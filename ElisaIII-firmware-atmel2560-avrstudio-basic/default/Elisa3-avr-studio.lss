
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  0000522c  000052c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000522c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000240  00800324  00800324  000053e4  2**0
                  ALLOC
  3 .stab         000024b4  00000000  00000000  000053e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007c9  00000000  00000000  00007898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00008061  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000010ef  00000000  00000000  00008319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004456  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001758  00000000  00000000  0000d85e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004dfd  00000000  00000000  0000efb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007d0  00000000  00000000  00013db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000107c  00000000  00000000  00014584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fc  00000000  00000000  00015600  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000020c  00000000  00000000  00016bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000130  00000000  00000000  00016e08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__vector_32>
      84:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_42>
      ac:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	1e 0a       	sbc	r1, r30
      e6:	02 0a       	sbc	r0, r18
      e8:	d0 09       	sbc	r29, r0
      ea:	93 0a       	sbc	r9, r19
      ec:	5d 0a       	sbc	r5, r29
      ee:	86 0a       	sbc	r8, r22
      f0:	a7 09       	sbc	r26, r7
      f2:	8b 09       	sbc	r24, r11
      f4:	5e 09       	sbc	r21, r14
      f6:	46 09       	sbc	r20, r6
      f8:	e7 08       	sbc	r14, r7
      fa:	e7 08       	sbc	r14, r7
      fc:	e7 08       	sbc	r14, r7
      fe:	e7 08       	sbc	r14, r7
     100:	e7 08       	sbc	r14, r7
     102:	e7 08       	sbc	r14, r7
     104:	3a 09       	sbc	r19, r10
     106:	2f 09       	sbc	r18, r15
     108:	e7 08       	sbc	r14, r7
     10a:	e7 08       	sbc	r14, r7
     10c:	e7 08       	sbc	r14, r7
     10e:	e7 08       	sbc	r14, r7
     110:	e7 08       	sbc	r14, r7
     112:	e7 08       	sbc	r14, r7
     114:	e7 08       	sbc	r14, r7
     116:	e7 08       	sbc	r14, r7
     118:	e7 08       	sbc	r14, r7
     11a:	e7 08       	sbc	r14, r7
     11c:	e7 08       	sbc	r14, r7
     11e:	e7 08       	sbc	r14, r7
     120:	5e 09       	sbc	r21, r14
     122:	d0 09       	sbc	r29, r0
     124:	23 09       	sbc	r18, r3
     126:	1e 09       	sbc	r17, r14
     128:	e7 08       	sbc	r14, r7
     12a:	e7 08       	sbc	r14, r7
     12c:	e7 08       	sbc	r14, r7
     12e:	e7 08       	sbc	r14, r7
     130:	e7 08       	sbc	r14, r7
     132:	e7 08       	sbc	r14, r7
     134:	e7 08       	sbc	r14, r7
     136:	e7 08       	sbc	r14, r7
     138:	e7 08       	sbc	r14, r7
     13a:	e7 08       	sbc	r14, r7
     13c:	e7 08       	sbc	r14, r7
     13e:	e7 08       	sbc	r14, r7
     140:	5d 0a       	sbc	r5, r29
     142:	a7 09       	sbc	r26, r7
     144:	e7 08       	sbc	r14, r7
     146:	e7 08       	sbc	r14, r7
     148:	1e 0a       	sbc	r1, r30
     14a:	86 0a       	sbc	r8, r22
     14c:	47 0a       	sbc	r4, r23
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ec e2       	ldi	r30, 0x2C	; 44
     194:	f2 e5       	ldi	r31, 0x52	; 82
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a4 36       	cpi	r26, 0x64	; 100
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 15 29 	jmp	0x522a	; 0x522a <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;

	initPeripherals();
     1ce:	0e 94 e7 10 	call	0x21ce	; 0x21ce <initPeripherals>

	calibrateSensors();
     1d2:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <calibrateSensors>

	initBehaviors();
     1d6:	0e 94 55 18 	call	0x30aa	; 0x30aa <initBehaviors>

	startTime = getTime100MicroSec();
     1da:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <getTime100MicroSec>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1e2:	cc 24       	eor	r12, r12
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
			GREEN_LED3_OFF;
			GREEN_LED4_OFF;
			GREEN_LED5_OFF;
			GREEN_LED6_OFF;
			GREEN_LED7_OFF;
			pwm_red = 255;
     1e8:	dd 24       	eor	r13, r13
     1ea:	da 94       	dec	r13
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     1ec:	0e 94 c2 10 	call	0x2184	; 0x2184 <getSelector>
     1f0:	80 93 30 05 	sts	0x0530, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1f4:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <readAccelXYZ>

		computeAngle();
     1f8:	0e 94 21 22 	call	0x4442	; 0x4442 <computeAngle>
	
		endTime = getTime100MicroSec();
     1fc:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     200:	6e 19       	sub	r22, r14
     202:	7f 09       	sbc	r23, r15
     204:	80 0b       	sbc	r24, r16
     206:	91 0b       	sbc	r25, r17
     208:	6e 31       	cpi	r22, 0x1E	; 30
     20a:	2b e4       	ldi	r18, 0x4B	; 75
     20c:	72 07       	cpc	r23, r18
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	82 07       	cpc	r24, r18
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	92 07       	cpc	r25, r18
     216:	08 f0       	brcs	.+2      	; 0x21a <main+0x5c>
     218:	80 c0       	rjmp	.+256    	; 0x31a <main+0x15c>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     21a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <handleIRRemoteCommands>


		handleRFCommands();
     21e:	0e 94 ba 03 	call	0x774	; 0x774 <handleRFCommands>


		usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     222:	80 91 30 05 	lds	r24, 0x0530
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	0e 94 60 10 	call	0x20c0	; 0x20c0 <usart0Transmit>


		switch(currentSelector) {
     22c:	80 91 30 05 	lds	r24, 0x0530
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	09 f4       	brne	.+2      	; 0x236 <main+0x78>
     234:	81 c0       	rjmp	.+258    	; 0x338 <main+0x17a>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	08 f0       	brcs	.+2      	; 0x23c <main+0x7e>
     23a:	49 c0       	rjmp	.+146    	; 0x2ce <main+0x110>
     23c:	88 23       	and	r24, r24
     23e:	09 f0       	breq	.+2      	; 0x242 <main+0x84>
     240:	80 c0       	rjmp	.+256    	; 0x342 <main+0x184>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     242:	0e 94 14 15 	call	0x2a28	; 0x2a28 <handleMotorsWithNoController>
     246:	80 91 30 05 	lds	r24, 0x0530
					setRightSpeed(25);
					break;
  
		}

		if(currentSelector != 0) {
     24a:	88 23       	and	r24, r24
     24c:	09 f0       	breq	.+2      	; 0x250 <main+0x92>
     24e:	60 c0       	rjmp	.+192    	; 0x310 <main+0x152>
     250:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     252:	c8 16       	cp	r12, r24
     254:	59 f2       	breq	.-106    	; 0x1ec <main+0x2e>
			disableObstacleAvoidance();
     256:	0e 94 66 1a 	call	0x34cc	; 0x34cc <disableObstacleAvoidance>
			disableCliffAvoidance();
     25a:	0e 94 6d 1a 	call	0x34da	; 0x34da <disableCliffAvoidance>
			GREEN_LED0_OFF;
     25e:	80 91 0b 01 	lds	r24, 0x010B
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     268:	80 91 0b 01 	lds	r24, 0x010B
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     272:	80 91 0b 01 	lds	r24, 0x010B
     276:	84 60       	ori	r24, 0x04	; 4
     278:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     27c:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     27e:	80 91 0b 01 	lds	r24, 0x010B
     282:	80 61       	ori	r24, 0x10	; 16
     284:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     288:	80 91 0b 01 	lds	r24, 0x010B
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     292:	80 91 0b 01 	lds	r24, 0x010B
     296:	80 64       	ori	r24, 0x40	; 64
     298:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     29c:	80 91 0b 01 	lds	r24, 0x010B
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2a6:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2aa:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2ae:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
			updateGreenLed(pwm_green);
     2b8:	80 91 0d 02 	lds	r24, 0x020D
     2bc:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
			updateBlueLed(pwm_blue);
     2c0:	80 91 0e 02 	lds	r24, 0x020E
     2c4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>
     2c8:	c0 90 30 05 	lds	r12, 0x0530
     2cc:	8f cf       	rjmp	.-226    	; 0x1ec <main+0x2e>


		usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info


		switch(currentSelector) {
     2ce:	84 30       	cpi	r24, 0x04	; 4
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0x116>
     2d2:	3f c0       	rjmp	.+126    	; 0x352 <main+0x194>
     2d4:	84 30       	cpi	r24, 0x04	; 4
     2d6:	70 f1       	brcs	.+92     	; 0x334 <main+0x176>
     2d8:	85 30       	cpi	r24, 0x05	; 5
     2da:	09 f0       	breq	.+2      	; 0x2de <main+0x120>
     2dc:	b6 cf       	rjmp	.-148    	; 0x24a <main+0x8c>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     2de:	80 91 0c 02 	lds	r24, 0x020C
     2e2:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
					updateGreenLed(pwm_green);
     2e6:	80 91 0d 02 	lds	r24, 0x020D
     2ea:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
					updateBlueLed(pwm_blue);
     2ee:	80 91 0e 02 	lds	r24, 0x020E
     2f2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>
					enableObstacleAvoidance();
     2f6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <enableObstacleAvoidance>
					setLeftSpeed(25);
     2fa:	89 e1       	ldi	r24, 0x19	; 25
     2fc:	0e 94 65 16 	call	0x2cca	; 0x2cca <setLeftSpeed>
					setRightSpeed(25);
     300:	89 e1       	ldi	r24, 0x19	; 25
     302:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <setRightSpeed>
     306:	80 91 30 05 	lds	r24, 0x0530
					break;
  
		}

		if(currentSelector != 0) {
     30a:	88 23       	and	r24, r24
     30c:	09 f4       	brne	.+2      	; 0x310 <main+0x152>
     30e:	a0 cf       	rjmp	.-192    	; 0x250 <main+0x92>
			handleMotorsWithSpeedController();  
     310:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <handleMotorsWithSpeedController>
     314:	80 91 30 05 	lds	r24, 0x0530
     318:	9c cf       	rjmp	.-200    	; 0x252 <main+0x94>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     31a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     31e:	80 91 30 05 	lds	r24, 0x0530
     322:	84 50       	subi	r24, 0x04	; 4
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	08 f4       	brcc	.+2      	; 0x32a <main+0x16c>
     328:	47 c0       	rjmp	.+142    	; 0x3b8 <main+0x1fa>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			}

			startTime = getTime100MicroSec();
     32a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <getTime100MicroSec>
     32e:	7b 01       	movw	r14, r22
     330:	8c 01       	movw	r16, r24
     332:	73 cf       	rjmp	.-282    	; 0x21a <main+0x5c>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     334:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <enableObstacleAvoidance>
					enableCliffAvoidance();
     338:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <enableCliffAvoidance>
     33c:	80 91 30 05 	lds	r24, 0x0530
					break;
     340:	84 cf       	rjmp	.-248    	; 0x24a <main+0x8c>


		usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info


		switch(currentSelector) {
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	09 f0       	breq	.+2      	; 0x348 <main+0x18a>
     346:	81 cf       	rjmp	.-254    	; 0x24a <main+0x8c>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     348:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <enableObstacleAvoidance>
     34c:	80 91 30 05 	lds	r24, 0x0530
					break;
     350:	7c cf       	rjmp	.-264    	; 0x24a <main+0x8c>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     352:	80 91 0b 01 	lds	r24, 0x010B
     356:	8e 7f       	andi	r24, 0xFE	; 254
     358:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     35c:	80 91 0b 01 	lds	r24, 0x010B
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     366:	80 91 0b 01 	lds	r24, 0x010B
     36a:	8b 7f       	andi	r24, 0xFB	; 251
     36c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     370:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     372:	80 91 0b 01 	lds	r24, 0x010B
     376:	8f 7e       	andi	r24, 0xEF	; 239
     378:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     37c:	80 91 0b 01 	lds	r24, 0x010B
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     386:	80 91 0b 01 	lds	r24, 0x010B
     38a:	8f 7b       	andi	r24, 0xBF	; 191
     38c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     390:	80 91 0b 01 	lds	r24, 0x010B
     394:	8f 77       	andi	r24, 0x7F	; 127
     396:	80 93 0b 01 	sts	0x010B, r24
					updateRedLed(pwm_red);
     39a:	80 91 0c 02 	lds	r24, 0x020C
     39e:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
					updateGreenLed(pwm_green);
     3a2:	80 91 0d 02 	lds	r24, 0x020D
     3a6:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
					updateBlueLed(pwm_blue);
     3aa:	80 91 0e 02 	lds	r24, 0x020E
     3ae:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>
     3b2:	80 91 30 05 	lds	r24, 0x0530
					break;
     3b6:	49 cf       	rjmp	.-366    	; 0x24a <main+0x8c>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     3b8:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <rand>
     3bc:	be 01       	movw	r22, r28
     3be:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__divmodhi4>
     3c2:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     3c6:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <rand>
     3ca:	be 01       	movw	r22, r28
     3cc:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__divmodhi4>
     3d0:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     3d4:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <rand>
     3d8:	be 01       	movw	r22, r28
     3da:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__divmodhi4>
     3de:	80 93 0e 02 	sts	0x020E, r24
     3e2:	a3 cf       	rjmp	.-186    	; 0x32a <main+0x16c>

000003e4 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     3e4:	84 b1       	in	r24, 0x04	; 4
     3e6:	80 7f       	andi	r24, 0xF0	; 240
     3e8:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     3ea:	84 b1       	in	r24, 0x04	; 4
     3ec:	87 60       	ori	r24, 0x07	; 7
     3ee:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     3f0:	80 e5       	ldi	r24, 0x50	; 80
     3f2:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     3f4:	8d b5       	in	r24, 0x2d	; 45
     3f6:	81 60       	ori	r24, 0x01	; 1
     3f8:	8d bd       	out	0x2d, r24	; 45

}
     3fa:	08 95       	ret

000003fc <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     3fc:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     3fe:	1d bc       	out	0x2d, r1	; 45
}
     400:	08 95       	ret

00000402 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     402:	44 23       	and	r20, r20
     404:	79 f0       	breq	.+30     	; 0x424 <SPI_ReadWrite_Block+0x22>
     406:	a8 2f       	mov	r26, r24
     408:	b9 2f       	mov	r27, r25
     40a:	e6 2f       	mov	r30, r22
     40c:	f7 2f       	mov	r31, r23
     40e:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     410:	9d 91       	ld	r25, X+
     412:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     414:	0d b4       	in	r0, 0x2d	; 45
     416:	07 fe       	sbrs	r0, 7
     418:	fd cf       	rjmp	.-6      	; 0x414 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     41a:	9e b5       	in	r25, 0x2e	; 46
     41c:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	84 17       	cp	r24, r20
     422:	b0 f3       	brcs	.-20     	; 0x410 <SPI_ReadWrite_Block+0xe>
     424:	08 95       	ret

00000426 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     426:	66 23       	and	r22, r22
     428:	59 f0       	breq	.+22     	; 0x440 <SPI_Write_Block+0x1a>
     42a:	e8 2f       	mov	r30, r24
     42c:	f9 2f       	mov	r31, r25
     42e:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     430:	91 91       	ld	r25, Z+
     432:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     434:	0d b4       	in	r0, 0x2d	; 45
     436:	07 fe       	sbrs	r0, 7
     438:	fd cf       	rjmp	.-6      	; 0x434 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     43a:	8f 5f       	subi	r24, 0xFF	; 255
     43c:	86 17       	cp	r24, r22
     43e:	c0 f3       	brcs	.-16     	; 0x430 <SPI_Write_Block+0xa>
     440:	08 95       	ret

00000442 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     442:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     444:	0d b4       	in	r0, 0x2d	; 45
     446:	07 fe       	sbrs	r0, 7
     448:	fd cf       	rjmp	.-6      	; 0x444 <SPI_Write_Byte+0x2>
    return SPDR;
     44a:	8e b5       	in	r24, 0x2e	; 46
}
     44c:	08 95       	ret

0000044e <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	00 d0       	rcall	.+0      	; 0x458 <mirf_config+0xa>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     45c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     45e:	80 e2       	ldi	r24, 0x20	; 32
     460:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     464:	8d e0       	ldi	r24, 0x0D	; 13
     466:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     46a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     46c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     46e:	83 e2       	ldi	r24, 0x23	; 35
     470:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     47a:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     47c:	80 91 03 04 	lds	r24, 0x0403
     480:	90 91 04 04 	lds	r25, 0x0404
     484:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     486:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     488:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     48a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     48c:	80 e3       	ldi	r24, 0x30	; 48
     48e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     492:	8e 01       	movw	r16, r28
     494:	0f 5f       	subi	r16, 0xFF	; 255
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	c8 01       	movw	r24, r16
     49a:	63 e0       	ldi	r22, 0x03	; 3
     49c:	0e 94 13 02 	call	0x426	; 0x426 <SPI_Write_Block>
    mirf_CSN_hi;
     4a0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     4a2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4a4:	8a e2       	ldi	r24, 0x2A	; 42
     4a6:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     4aa:	c8 01       	movw	r24, r16
     4ac:	63 e0       	ldi	r22, 0x03	; 3
     4ae:	0e 94 13 02 	call	0x426	; 0x426 <SPI_Write_Block>
    mirf_CSN_hi;
     4b2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4b6:	81 e2       	ldi	r24, 0x21	; 33
     4b8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     4c2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4c6:	82 e2       	ldi	r24, 0x22	; 34
     4c8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     4d2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4d6:	84 e2       	ldi	r24, 0x24	; 36
     4d8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4dc:	82 e1       	ldi	r24, 0x12	; 18
     4de:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     4e2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4e6:	85 e2       	ldi	r24, 0x25	; 37
     4e8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4ec:	88 e2       	ldi	r24, 0x28	; 40
     4ee:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     4f2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4f4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4f6:	81 e3       	ldi	r24, 0x31	; 49
     4f8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4fc:	8d e0       	ldi	r24, 0x0D	; 13
     4fe:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     502:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     504:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     506:	80 e5       	ldi	r24, 0x50	; 80
     508:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     50c:	83 e7       	ldi	r24, 0x73	; 115
     50e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     512:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     514:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     516:	8c e3       	ldi	r24, 0x3C	; 60
     518:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     522:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     524:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     526:	8d e3       	ldi	r24, 0x3D	; 61
     528:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     52c:	86 e0       	ldi	r24, 0x06	; 6
     52e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     532:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     534:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     536:	80 e2       	ldi	r24, 0x20	; 32
     538:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     53c:	8f e0       	ldi	r24, 0x0F	; 15
     53e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     542:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     554:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     556:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     558:	0e 94 27 02 	call	0x44e	; 0x44e <mirf_config>
}
     55c:	08 95       	ret

0000055e <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     564:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     566:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     568:	8a e2       	ldi	r24, 0x2A	; 42
     56a:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     56e:	ce 01       	movw	r24, r28
     570:	65 e0       	ldi	r22, 0x05	; 5
     572:	0e 94 13 02 	call	0x426	; 0x426 <SPI_Write_Block>
    mirf_CSN_hi;
     576:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     578:	2c 9a       	sbi	0x05, 4	; 5
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     586:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     588:	80 e3       	ldi	r24, 0x30	; 48
     58a:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     58e:	ce 01       	movw	r24, r28
     590:	65 e0       	ldi	r22, 0x05	; 5
     592:	0e 94 13 02 	call	0x426	; 0x426 <SPI_Write_Block>
    mirf_CSN_hi;
     596:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     59e:	80 91 37 05 	lds	r24, 0x0537
     5a2:	88 23       	and	r24, r24
     5a4:	11 f0       	breq	.+4      	; 0x5aa <mirf_data_ready+0xc>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     5a8:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     5aa:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     5b2:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     5b4:	80 74       	andi	r24, 0x40	; 64
     5b6:	08 95       	ret

000005b8 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     5b8:	df 93       	push	r29
     5ba:	cf 93       	push	r28
     5bc:	0f 92       	push	r0
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     5c2:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     5c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     5c6:	87 e1       	ldi	r24, 0x17	; 23
     5c8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     5cc:	be 01       	movw	r22, r28
     5ce:	6f 5f       	subi	r22, 0xFF	; 255
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	cb 01       	movw	r24, r22
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	0e 94 01 02 	call	0x402	; 0x402 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     5da:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
}
     5de:	81 70       	andi	r24, 0x01	; 1
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     5e8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     5ea:	82 ee       	ldi	r24, 0xE2	; 226
     5ec:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     5f0:	28 9a       	sbi	0x05, 0	; 5

}
     5f2:	08 95       	ret

000005f4 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     5fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     5fc:	81 e6       	ldi	r24, 0x61	; 97
     5fe:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     602:	ce 01       	movw	r24, r28
     604:	be 01       	movw	r22, r28
     606:	4d e0       	ldi	r20, 0x0D	; 13
     608:	0e 94 01 02 	call	0x402	; 0x402 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     60c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     60e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     610:	87 e2       	ldi	r24, 0x27	; 39
     612:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     61c:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     624:	df 93       	push	r29
     626:	cf 93       	push	r28
     628:	0f 92       	push	r0
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     62e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     630:	8f 71       	andi	r24, 0x1F	; 31
     632:	80 62       	ori	r24, 0x20	; 32
     634:	69 83       	std	Y+1, r22	; 0x01
     636:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     63a:	69 81       	ldd	r22, Y+1	; 0x01
     63c:	86 2f       	mov	r24, r22
     63e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     642:	28 9a       	sbi	0x05, 0	; 5
}
     644:	0f 90       	pop	r0
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	0f 92       	push	r0
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     65c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     65e:	8f 71       	andi	r24, 0x1F	; 31
     660:	49 83       	std	Y+1, r20	; 0x01
     662:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     666:	c8 01       	movw	r24, r16
     668:	b8 01       	movw	r22, r16
     66a:	49 81       	ldd	r20, Y+1	; 0x01
     66c:	0e 94 01 02 	call	0x402	; 0x402 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     670:	28 9a       	sbi	0x05, 0	; 5
}
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	0f 92       	push	r0
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     68e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     690:	8f 71       	andi	r24, 0x1F	; 31
     692:	80 62       	ori	r24, 0x20	; 32
     694:	49 83       	std	Y+1, r20	; 0x01
     696:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     69a:	c8 01       	movw	r24, r16
     69c:	49 81       	ldd	r20, Y+1	; 0x01
     69e:	64 2f       	mov	r22, r20
     6a0:	0e 94 13 02 	call	0x426	; 0x426 <SPI_Write_Block>
    mirf_CSN_hi;
     6a4:	28 9a       	sbi	0x05, 0	; 5
}
     6a6:	0f 90       	pop	r0
     6a8:	cf 91       	pop	r28
     6aa:	df 91       	pop	r29
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	df 93       	push	r29
     6b8:	cf 93       	push	r28
     6ba:	0f 92       	push	r0
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     6c2:	80 91 37 05 	lds	r24, 0x0537
     6c6:	88 23       	and	r24, r24
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <mirf_send+0x10>

    mirf_CE_lo;
     6ca:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 37 05 	sts	0x0537, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6d4:	80 e2       	ldi	r24, 0x20	; 32
     6d6:	69 83       	std	Y+1, r22	; 0x01
     6d8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6dc:	8a e4       	ldi	r24, 0x4A	; 74
     6de:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     6e2:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     6e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     6e6:	81 ee       	ldi	r24, 0xE1	; 225
     6e8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     6ec:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     6ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     6f0:	80 ea       	ldi	r24, 0xA0	; 160
     6f2:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     6f6:	c8 01       	movw	r24, r16
     6f8:	69 81       	ldd	r22, Y+1	; 0x01
     6fa:	0e 94 13 02 	call	0x426	; 0x426 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     6fe:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     700:	2c 9a       	sbi	0x05, 4	; 5
}
     702:	0f 90       	pop	r0
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	df 93       	push	r29
     718:	cf 93       	push	r28
     71a:	0f 92       	push	r0
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	18 2f       	mov	r17, r24
     722:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     724:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     726:	81 ee       	ldi	r24, 0xE1	; 225
     728:	99 83       	std	Y+1, r25	; 0x01
     72a:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     72e:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     730:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     732:	88 ea       	ldi	r24, 0xA8	; 168
     734:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     738:	99 81       	ldd	r25, Y+1	; 0x01
     73a:	00 23       	and	r16, r16
     73c:	61 f0       	breq	.+24     	; 0x756 <writeAckPayload+0x48>
     73e:	61 2f       	mov	r22, r17
     740:	79 2f       	mov	r23, r25
     742:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     744:	f7 01       	movw	r30, r14
     746:	81 91       	ld	r24, Z+
     748:	7f 01       	movw	r14, r30
     74a:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     74e:	8e 2d       	mov	r24, r14
     750:	81 1b       	sub	r24, r17
     752:	80 17       	cp	r24, r16
     754:	b8 f3       	brcs	.-18     	; 0x744 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     756:	28 9a       	sbi	0x05, 0	; 5


}
     758:	0f 90       	pop	r0
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	08 95       	ret

00000768 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     768:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     76a:	81 ee       	ldi	r24, 0xE1	; 225
     76c:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     770:	28 9a       	sbi	0x05, 0	; 5

}
     772:	08 95       	ret

00000774 <handleRFCommands>:

void handleRFCommands() {
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     77a:	80 91 37 05 	lds	r24, 0x0537
     77e:	88 23       	and	r24, r24
     780:	21 f0       	breq	.+8      	; 0x78a <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     78a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     792:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     794:	86 ff       	sbrs	r24, 6
     796:	f5 cf       	rjmp	.-22     	; 0x782 <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     798:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     79a:	87 e2       	ldi	r24, 0x27	; 39
     79c:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     7a0:	80 e7       	ldi	r24, 0x70	; 112
     7a2:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     7a6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     7a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     7aa:	81 e6       	ldi	r24, 0x61	; 97
     7ac:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     7b0:	84 e5       	ldi	r24, 0x54	; 84
     7b2:	95 e0       	ldi	r25, 0x05	; 5
     7b4:	bc 01       	movw	r22, r24
     7b6:	4d e0       	ldi	r20, 0x0D	; 13
     7b8:	0e 94 01 02 	call	0x402	; 0x402 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     7bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     7be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     7c0:	87 e2       	ldi	r24, 0x27	; 39
     7c2:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     7cc:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     7ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     7d0:	82 ee       	ldi	r24, 0xE2	; 226
     7d2:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     7d6:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     7d8:	60 91 54 05 	lds	r22, 0x0554
     7dc:	66 23       	and	r22, r22
     7de:	09 f4       	brne	.+2      	; 0x7e2 <handleRFCommands+0x6e>
     7e0:	b8 c1       	rjmp	.+880    	; 0xb52 <handleRFCommands+0x3de>
     7e2:	50 91 58 05 	lds	r21, 0x0558
     7e6:	40 91 59 05 	lds	r20, 0x0559
     7ea:	e0 91 55 05 	lds	r30, 0x0555
     7ee:	70 91 56 05 	lds	r23, 0x0556

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     7f2:	25 2f       	mov	r18, r21
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	2f 77       	andi	r18, 0x7F	; 127
     7f8:	30 70       	andi	r19, 0x00	; 0
     7fa:	30 93 02 04 	sts	0x0402, r19
     7fe:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     802:	84 2f       	mov	r24, r20
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	8f 77       	andi	r24, 0x7F	; 127
     808:	90 70       	andi	r25, 0x00	; 0
     80a:	90 93 00 04 	sts	0x0400, r25
     80e:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     812:	57 fd       	sbrc	r21, 7
     814:	a6 c2       	rjmp	.+1356   	; 0xd62 <handleRFCommands+0x5ee>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	30 95       	com	r19
     820:	21 95       	neg	r18
     822:	3f 4f       	sbci	r19, 0xFF	; 255
     824:	30 93 f0 03 	sts	0x03F0, r19
     828:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     82c:	47 fd       	sbrc	r20, 7
     82e:	a3 c2       	rjmp	.+1350   	; 0xd76 <handleRFCommands+0x602>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	90 95       	com	r25
     83a:	81 95       	neg	r24
     83c:	9f 4f       	sbci	r25, 0xFF	; 255
     83e:	90 93 f2 03 	sts	0x03F2, r25
     842:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     846:	42 e0       	ldi	r20, 0x02	; 2
     848:	21 30       	cpi	r18, 0x01	; 1
     84a:	34 07       	cpc	r19, r20
     84c:	44 f0       	brlt	.+16     	; 0x85e <handleRFCommands+0xea>
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	52 e0       	ldi	r21, 0x02	; 2
     852:	50 93 f0 03 	sts	0x03F0, r21
     856:	40 93 ef 03 	sts	0x03EF, r20
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     85e:	42 e0       	ldi	r20, 0x02	; 2
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	94 07       	cpc	r25, r20
     864:	34 f0       	brlt	.+12     	; 0x872 <handleRFCommands+0xfe>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	90 93 f2 03 	sts	0x03F2, r25
     86e:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     872:	4e ef       	ldi	r20, 0xFE	; 254
     874:	20 30       	cpi	r18, 0x00	; 0
     876:	34 07       	cpc	r19, r20
     878:	34 f4       	brge	.+12     	; 0x886 <handleRFCommands+0x112>
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	5e ef       	ldi	r21, 0xFE	; 254
     87e:	50 93 f0 03 	sts	0x03F0, r21
     882:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     886:	2e ef       	ldi	r18, 0xFE	; 254
     888:	80 30       	cpi	r24, 0x00	; 0
     88a:	92 07       	cpc	r25, r18
     88c:	34 f4       	brge	.+12     	; 0x89a <handleRFCommands+0x126>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	9e ef       	ldi	r25, 0xFE	; 254
     892:	90 93 f2 03 	sts	0x03F2, r25
     896:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     89a:	26 2f       	mov	r18, r22
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	30 93 4d 05 	sts	0x054D, r19
     8a2:	20 93 4c 05 	sts	0x054C, r18
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	f0 93 4f 05 	sts	0x054F, r31
     8ac:	e0 93 4e 05 	sts	0x054E, r30
     8b0:	c7 2f       	mov	r28, r23
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
     8b4:	d0 93 51 05 	sts	0x0551, r29
     8b8:	c0 93 50 05 	sts	0x0550, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     8bc:	92 2f       	mov	r25, r18
     8be:	88 27       	eor	r24, r24
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	24 e6       	ldi	r18, 0x64	; 100
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	b9 01       	movw	r22, r18
     8ca:	0e 94 f6 25 	call	0x4bec	; 0x4bec <__udivmodhi4>
     8ce:	16 2f       	mov	r17, r22
     8d0:	10 95       	com	r17
     8d2:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     8d6:	5e 2f       	mov	r21, r30
     8d8:	44 27       	eor	r20, r20
     8da:	4e 1b       	sub	r20, r30
     8dc:	5f 0b       	sbc	r21, r31
     8de:	ca 01       	movw	r24, r20
     8e0:	b9 01       	movw	r22, r18
     8e2:	0e 94 f6 25 	call	0x4bec	; 0x4bec <__udivmodhi4>
     8e6:	60 95       	com	r22
     8e8:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     8ec:	5c 2f       	mov	r21, r28
     8ee:	44 27       	eor	r20, r20
     8f0:	4c 1b       	sub	r20, r28
     8f2:	5d 0b       	sbc	r21, r29
     8f4:	ca 01       	movw	r24, r20
     8f6:	b9 01       	movw	r22, r18
     8f8:	0e 94 f6 25 	call	0x4bec	; 0x4bec <__udivmodhi4>
     8fc:	60 95       	com	r22
     8fe:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     902:	81 2f       	mov	r24, r17
     904:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
		updateGreenLed(pwm_green);
     908:	80 91 0d 02 	lds	r24, 0x020D
     90c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
		updateBlueLed(pwm_blue);
     910:	80 91 0e 02 	lds	r24, 0x020E
     914:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     918:	80 91 57 05 	lds	r24, 0x0557
     91c:	80 ff       	sbrs	r24, 0
     91e:	25 c1       	rjmp	.+586    	; 0xb6a <handleRFCommands+0x3f6>
			LED_IR1_LOW;
     920:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     922:	81 ff       	sbrs	r24, 1
     924:	25 c1       	rjmp	.+586    	; 0xb70 <handleRFCommands+0x3fc>
			LED_IR2_LOW;
     926:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     928:	98 2f       	mov	r25, r24
     92a:	82 ff       	sbrs	r24, 2
     92c:	25 c1       	rjmp	.+586    	; 0xb78 <handleRFCommands+0x404>
			irEnabled = 1;
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     934:	84 fd       	sbrc	r24, 4
     936:	24 c1       	rjmp	.+584    	; 0xb80 <handleRFCommands+0x40c>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     938:	86 ff       	sbrs	r24, 6
     93a:	29 c1       	rjmp	.+594    	; 0xb8e <handleRFCommands+0x41a>
			obstacleAvoidanceEnabled = 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 34 05 	sts	0x0534, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     942:	97 fd       	sbrc	r25, 7
     944:	28 c1       	rjmp	.+592    	; 0xb96 <handleRFCommands+0x422>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     946:	10 92 35 05 	sts	0x0535, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     94a:	80 91 5a 05 	lds	r24, 0x055A
     94e:	80 ff       	sbrs	r24, 0
     950:	29 c1       	rjmp	.+594    	; 0xba4 <handleRFCommands+0x430>
				GREEN_LED0_ON;
     952:	80 91 0b 01 	lds	r24, 0x010B
     956:	8e 7f       	andi	r24, 0xFE	; 254
     958:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     95c:	80 91 5a 05 	lds	r24, 0x055A
     960:	81 ff       	sbrs	r24, 1
     962:	29 c1       	rjmp	.+594    	; 0xbb6 <handleRFCommands+0x442>
				GREEN_LED1_ON;
     964:	80 91 0b 01 	lds	r24, 0x010B
     968:	8d 7f       	andi	r24, 0xFD	; 253
     96a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     96e:	80 91 5a 05 	lds	r24, 0x055A
     972:	82 ff       	sbrs	r24, 2
     974:	29 c1       	rjmp	.+594    	; 0xbc8 <handleRFCommands+0x454>
				GREEN_LED2_ON;
     976:	80 91 0b 01 	lds	r24, 0x010B
     97a:	8b 7f       	andi	r24, 0xFB	; 251
     97c:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     980:	80 91 5a 05 	lds	r24, 0x055A
     984:	83 ff       	sbrs	r24, 3
     986:	29 c1       	rjmp	.+594    	; 0xbda <handleRFCommands+0x466>
				GREEN_LED3_ON;
     988:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     98a:	80 91 5a 05 	lds	r24, 0x055A
     98e:	84 ff       	sbrs	r24, 4
     990:	29 c1       	rjmp	.+594    	; 0xbe4 <handleRFCommands+0x470>
				GREEN_LED4_ON;
     992:	80 91 0b 01 	lds	r24, 0x010B
     996:	8f 7e       	andi	r24, 0xEF	; 239
     998:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     99c:	80 91 5a 05 	lds	r24, 0x055A
     9a0:	85 ff       	sbrs	r24, 5
     9a2:	29 c1       	rjmp	.+594    	; 0xbf6 <handleRFCommands+0x482>
				GREEN_LED5_ON;
     9a4:	80 91 0b 01 	lds	r24, 0x010B
     9a8:	8f 7d       	andi	r24, 0xDF	; 223
     9aa:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     9ae:	80 91 5a 05 	lds	r24, 0x055A
     9b2:	86 ff       	sbrs	r24, 6
     9b4:	29 c1       	rjmp	.+594    	; 0xc08 <handleRFCommands+0x494>
				GREEN_LED6_ON;
     9b6:	80 91 0b 01 	lds	r24, 0x010B
     9ba:	8f 7b       	andi	r24, 0xBF	; 191
     9bc:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     9c0:	80 91 5a 05 	lds	r24, 0x055A
     9c4:	87 fd       	sbrc	r24, 7
     9c6:	29 c1       	rjmp	.+594    	; 0xc1a <handleRFCommands+0x4a6>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
     9c8:	80 91 0b 01 	lds	r24, 0x010B
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     9d2:	80 91 0b 02 	lds	r24, 0x020B
     9d6:	80 93 3c 05 	sts	0x053C, r24

		switch(packetId) {
     9da:	84 30       	cpi	r24, 0x04	; 4
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <handleRFCommands+0x26c>
     9de:	29 c1       	rjmp	.+594    	; 0xc32 <handleRFCommands+0x4be>
     9e0:	85 30       	cpi	r24, 0x05	; 5
     9e2:	08 f0       	brcs	.+2      	; 0x9e6 <handleRFCommands+0x272>
     9e4:	66 c1       	rjmp	.+716    	; 0xcb2 <handleRFCommands+0x53e>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	09 f0       	breq	.+2      	; 0x9ec <handleRFCommands+0x278>
     9ea:	65 c0       	rjmp	.+202    	; 0xab6 <handleRFCommands+0x342>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     9ec:	90 91 5f 03 	lds	r25, 0x035F
     9f0:	80 91 60 03 	lds	r24, 0x0360
     9f4:	90 93 3d 05 	sts	0x053D, r25
				ackPayload[2] = proximityResult[0]>>8;
     9f8:	80 93 3e 05 	sts	0x053E, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     9fc:	90 91 61 03 	lds	r25, 0x0361
     a00:	80 91 62 03 	lds	r24, 0x0362
     a04:	90 93 3f 05 	sts	0x053F, r25
				ackPayload[4] = proximityResult[1]>>8;
     a08:	80 93 40 05 	sts	0x0540, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     a0c:	90 91 63 03 	lds	r25, 0x0363
     a10:	80 91 64 03 	lds	r24, 0x0364
     a14:	90 93 41 05 	sts	0x0541, r25
				ackPayload[6] = proximityResult[2]>>8;
     a18:	80 93 42 05 	sts	0x0542, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     a1c:	90 91 65 03 	lds	r25, 0x0365
     a20:	80 91 66 03 	lds	r24, 0x0366
     a24:	90 93 43 05 	sts	0x0543, r25
				ackPayload[8] = proximityResult[3]>>8;
     a28:	80 93 44 05 	sts	0x0544, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     a2c:	90 91 69 03 	lds	r25, 0x0369
     a30:	80 91 6a 03 	lds	r24, 0x036A
     a34:	90 93 45 05 	sts	0x0545, r25
				ackPayload[10] = proximityResult[5]>>8;
     a38:	80 93 46 05 	sts	0x0546, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     a3c:	90 91 6b 03 	lds	r25, 0x036B
     a40:	80 91 6c 03 	lds	r24, 0x036C
     a44:	90 93 47 05 	sts	0x0547, r25
				ackPayload[12] = proximityResult[6]>>8;
     a48:	80 93 48 05 	sts	0x0548, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     a4c:	90 91 6d 03 	lds	r25, 0x036D
     a50:	80 91 6e 03 	lds	r24, 0x036E
     a54:	90 93 49 05 	sts	0x0549, r25
				ackPayload[14] = proximityResult[7]>>8;
     a58:	80 93 4a 05 	sts	0x054A, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     a5c:	30 91 03 01 	lds	r19, 0x0103
     a60:	80 91 03 01 	lds	r24, 0x0103
     a64:	20 91 03 01 	lds	r18, 0x0103
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	80 72       	andi	r24, 0x20	; 32
     a6c:	90 70       	andi	r25, 0x00	; 0
     a6e:	95 95       	asr	r25
     a70:	87 95       	ror	r24
     a72:	95 95       	asr	r25
     a74:	87 95       	ror	r24
     a76:	95 95       	asr	r25
     a78:	87 95       	ror	r24
     a7a:	95 95       	asr	r25
     a7c:	87 95       	ror	r24
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	22 1f       	adc	r18, r18
     a88:	22 27       	eor	r18, r18
     a8a:	22 1f       	adc	r18, r18
     a8c:	22 0f       	add	r18, r18
     a8e:	22 0f       	add	r18, r18
     a90:	28 2b       	or	r18, r24
     a92:	83 2f       	mov	r24, r19
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	80 71       	andi	r24, 0x10	; 16
     a98:	90 70       	andi	r25, 0x00	; 0
     a9a:	95 95       	asr	r25
     a9c:	87 95       	ror	r24
     a9e:	95 95       	asr	r25
     aa0:	87 95       	ror	r24
     aa2:	95 95       	asr	r25
     aa4:	87 95       	ror	r24
     aa6:	95 95       	asr	r25
     aa8:	87 95       	ror	r24
     aaa:	28 2b       	or	r18, r24
     aac:	20 93 4b 05 	sts	0x054B, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     ab0:	84 e0       	ldi	r24, 0x04	; 4
     ab2:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     ab6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     ab8:	81 ee       	ldi	r24, 0xE1	; 225
     aba:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
    mirf_CSN_hi;
     abe:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     ac0:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     ac2:	88 ea       	ldi	r24, 0xA8	; 168
     ac4:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     ac8:	80 91 3c 05 	lds	r24, 0x053C
     acc:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     ad0:	80 91 3d 05 	lds	r24, 0x053D
     ad4:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     ad8:	80 91 3e 05 	lds	r24, 0x053E
     adc:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     ae0:	80 91 3f 05 	lds	r24, 0x053F
     ae4:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     ae8:	80 91 40 05 	lds	r24, 0x0540
     aec:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     af0:	80 91 41 05 	lds	r24, 0x0541
     af4:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     af8:	80 91 42 05 	lds	r24, 0x0542
     afc:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b00:	80 91 43 05 	lds	r24, 0x0543
     b04:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b08:	80 91 44 05 	lds	r24, 0x0544
     b0c:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b10:	80 91 45 05 	lds	r24, 0x0545
     b14:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b18:	80 91 46 05 	lds	r24, 0x0546
     b1c:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b20:	80 91 47 05 	lds	r24, 0x0547
     b24:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b28:	80 91 48 05 	lds	r24, 0x0548
     b2c:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b30:	80 91 49 05 	lds	r24, 0x0549
     b34:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b38:	80 91 4a 05 	lds	r24, 0x054A
     b3c:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
     b40:	80 91 4b 05 	lds	r24, 0x054B
     b44:	0e 94 21 02 	call	0x442	; 0x442 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     b48:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     b52:	e0 91 55 05 	lds	r30, 0x0555
     b56:	ee 23       	and	r30, r30
     b58:	09 f4       	brne	.+2      	; 0xb5c <handleRFCommands+0x3e8>
     b5a:	16 c1       	rjmp	.+556    	; 0xd88 <handleRFCommands+0x614>
     b5c:	50 91 58 05 	lds	r21, 0x0558
     b60:	40 91 59 05 	lds	r20, 0x0559
     b64:	70 91 56 05 	lds	r23, 0x0556
     b68:	44 ce       	rjmp	.-888    	; 0x7f2 <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     b6a:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     b6c:	81 fd       	sbrc	r24, 1
     b6e:	db ce       	rjmp	.-586    	; 0x926 <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     b70:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     b72:	98 2f       	mov	r25, r24
     b74:	82 fd       	sbrc	r24, 2
     b76:	db ce       	rjmp	.-586    	; 0x92e <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     b78:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     b7c:	84 ff       	sbrs	r24, 4
     b7e:	dc ce       	rjmp	.-584    	; 0x938 <handleRFCommands+0x1c4>
			calibrateSensors();
     b80:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <calibrateSensors>
     b84:	90 91 57 05 	lds	r25, 0x0557
     b88:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b8a:	86 fd       	sbrc	r24, 6
     b8c:	d7 ce       	rjmp	.-594    	; 0x93c <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     b8e:	10 92 34 05 	sts	0x0534, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     b92:	97 ff       	sbrs	r25, 7
     b94:	d8 ce       	rjmp	.-592    	; 0x946 <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 35 05 	sts	0x0535, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     b9c:	80 91 5a 05 	lds	r24, 0x055A
     ba0:	80 fd       	sbrc	r24, 0
     ba2:	d7 ce       	rjmp	.-594    	; 0x952 <handleRFCommands+0x1de>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
     ba4:	80 91 0b 01 	lds	r24, 0x010B
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     bae:	80 91 5a 05 	lds	r24, 0x055A
     bb2:	81 fd       	sbrc	r24, 1
     bb4:	d7 ce       	rjmp	.-594    	; 0x964 <handleRFCommands+0x1f0>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
     bb6:	80 91 0b 01 	lds	r24, 0x010B
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     bc0:	80 91 5a 05 	lds	r24, 0x055A
     bc4:	82 fd       	sbrc	r24, 2
     bc6:	d7 ce       	rjmp	.-594    	; 0x976 <handleRFCommands+0x202>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
     bc8:	80 91 0b 01 	lds	r24, 0x010B
     bcc:	84 60       	ori	r24, 0x04	; 4
     bce:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
     bd2:	80 91 5a 05 	lds	r24, 0x055A
     bd6:	83 fd       	sbrc	r24, 3
     bd8:	d7 ce       	rjmp	.-594    	; 0x988 <handleRFCommands+0x214>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
     bda:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
     bdc:	80 91 5a 05 	lds	r24, 0x055A
     be0:	84 fd       	sbrc	r24, 4
     be2:	d7 ce       	rjmp	.-594    	; 0x992 <handleRFCommands+0x21e>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
     be4:	80 91 0b 01 	lds	r24, 0x010B
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
     bee:	80 91 5a 05 	lds	r24, 0x055A
     bf2:	85 fd       	sbrc	r24, 5
     bf4:	d7 ce       	rjmp	.-594    	; 0x9a4 <handleRFCommands+0x230>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
     bf6:	80 91 0b 01 	lds	r24, 0x010B
     bfa:	80 62       	ori	r24, 0x20	; 32
     bfc:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
     c00:	80 91 5a 05 	lds	r24, 0x055A
     c04:	86 fd       	sbrc	r24, 6
     c06:	d7 ce       	rjmp	.-594    	; 0x9b6 <handleRFCommands+0x242>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
     c08:	80 91 0b 01 	lds	r24, 0x010B
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
     c12:	80 91 5a 05 	lds	r24, 0x055A
     c16:	87 ff       	sbrs	r24, 7
     c18:	d7 ce       	rjmp	.-594    	; 0x9c8 <handleRFCommands+0x254>
				GREEN_LED7_ON;
     c1a:	80 91 0b 01 	lds	r24, 0x010B
     c1e:	8f 77       	andi	r24, 0x7F	; 127
     c20:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     c24:	80 91 0b 02 	lds	r24, 0x020B
     c28:	80 93 3c 05 	sts	0x053C, r24

		switch(packetId) {
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f0       	breq	.+2      	; 0xc32 <handleRFCommands+0x4be>
     c30:	d7 ce       	rjmp	.-594    	; 0x9e0 <handleRFCommands+0x26c>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     c32:	90 91 67 03 	lds	r25, 0x0367
     c36:	80 91 68 03 	lds	r24, 0x0368
     c3a:	90 93 3d 05 	sts	0x053D, r25
				ackPayload[2] = proximityResult[4]>>8;
     c3e:	80 93 3e 05 	sts	0x053E, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     c42:	90 91 6f 03 	lds	r25, 0x036F
     c46:	80 91 70 03 	lds	r24, 0x0370
     c4a:	90 93 3f 05 	sts	0x053F, r25
				ackPayload[4] = proximityResult[8]>>8;
     c4e:	80 93 40 05 	sts	0x0540, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     c52:	90 91 71 03 	lds	r25, 0x0371
     c56:	80 91 72 03 	lds	r24, 0x0372
     c5a:	90 93 41 05 	sts	0x0541, r25
				ackPayload[6] = proximityResult[9]>>8;
     c5e:	80 93 42 05 	sts	0x0542, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     c62:	90 91 73 03 	lds	r25, 0x0373
     c66:	80 91 74 03 	lds	r24, 0x0374
     c6a:	90 93 43 05 	sts	0x0543, r25
				ackPayload[8] = proximityResult[10]>>8;
     c6e:	80 93 44 05 	sts	0x0544, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     c72:	90 91 75 03 	lds	r25, 0x0375
     c76:	80 91 76 03 	lds	r24, 0x0376
     c7a:	90 93 45 05 	sts	0x0545, r25
				ackPayload[10] = proximityResult[11]>>8;
     c7e:	80 93 46 05 	sts	0x0546, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     c82:	90 91 11 05 	lds	r25, 0x0511
     c86:	80 91 12 05 	lds	r24, 0x0512
     c8a:	90 93 47 05 	sts	0x0547, r25
				ackPayload[12] = accX>>8;
     c8e:	80 93 48 05 	sts	0x0548, r24
				ackPayload[13] = accY&0xFF;
     c92:	90 91 13 05 	lds	r25, 0x0513
     c96:	80 91 14 05 	lds	r24, 0x0514
     c9a:	90 93 49 05 	sts	0x0549, r25
				ackPayload[14] = accY>>8;
     c9e:	80 93 4a 05 	sts	0x054A, r24
				ackPayload[15] = irCommand;
     ca2:	80 91 0c 05 	lds	r24, 0x050C
     ca6:	80 93 4b 05 	sts	0x054B, r24
				packetId = 5;
     caa:	85 e0       	ldi	r24, 0x05	; 5
     cac:	80 93 0b 02 	sts	0x020B, r24
				break;
     cb0:	02 cf       	rjmp	.-508    	; 0xab6 <handleRFCommands+0x342>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <handleRFCommands+0x544>
     cb6:	7d c0       	rjmp	.+250    	; 0xdb2 <handleRFCommands+0x63e>
     cb8:	86 30       	cpi	r24, 0x06	; 6
     cba:	09 f0       	breq	.+2      	; 0xcbe <handleRFCommands+0x54a>
     cbc:	fc ce       	rjmp	.-520    	; 0xab6 <handleRFCommands+0x342>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     cbe:	80 91 3f 03 	lds	r24, 0x033F
     cc2:	90 91 40 03 	lds	r25, 0x0340
     cc6:	80 93 3d 05 	sts	0x053D, r24
				ackPayload[2] = proximityValue[8]>>8;
     cca:	80 91 3f 03 	lds	r24, 0x033F
     cce:	90 91 40 03 	lds	r25, 0x0340
     cd2:	90 93 3e 05 	sts	0x053E, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     cd6:	80 91 4f 03 	lds	r24, 0x034F
     cda:	90 91 50 03 	lds	r25, 0x0350
     cde:	80 93 3f 05 	sts	0x053F, r24
				ackPayload[4] = proximityValue[16]>>8;
     ce2:	80 91 4f 03 	lds	r24, 0x034F
     ce6:	90 91 50 03 	lds	r25, 0x0350
     cea:	90 93 40 05 	sts	0x0540, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     cee:	80 91 53 03 	lds	r24, 0x0353
     cf2:	90 91 54 03 	lds	r25, 0x0354
     cf6:	80 93 41 05 	sts	0x0541, r24
				ackPayload[6] = proximityValue[18]>>8;
     cfa:	80 91 53 03 	lds	r24, 0x0353
     cfe:	90 91 54 03 	lds	r25, 0x0354
     d02:	90 93 42 05 	sts	0x0542, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     d06:	80 91 57 03 	lds	r24, 0x0357
     d0a:	90 91 58 03 	lds	r25, 0x0358
     d0e:	80 93 43 05 	sts	0x0543, r24
				ackPayload[8] = proximityValue[20]>>8;
     d12:	80 91 57 03 	lds	r24, 0x0357
     d16:	90 91 58 03 	lds	r25, 0x0358
     d1a:	90 93 44 05 	sts	0x0544, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     d1e:	80 91 5b 03 	lds	r24, 0x035B
     d22:	90 91 5c 03 	lds	r25, 0x035C
     d26:	80 93 45 05 	sts	0x0545, r24
				ackPayload[10] = proximityValue[22]>>8;
     d2a:	80 91 5b 03 	lds	r24, 0x035B
     d2e:	90 91 5c 03 	lds	r25, 0x035C
     d32:	90 93 46 05 	sts	0x0546, r25
				ackPayload[11] = accZ&0xFF;
     d36:	90 91 15 05 	lds	r25, 0x0515
     d3a:	80 91 16 05 	lds	r24, 0x0516
     d3e:	90 93 47 05 	sts	0x0547, r25
				ackPayload[12] = accZ>>8;
     d42:	80 93 48 05 	sts	0x0548, r24
				ackPayload[13] = batteryLevel&0xFF;
     d46:	90 91 c3 03 	lds	r25, 0x03C3
     d4a:	80 91 c4 03 	lds	r24, 0x03C4
     d4e:	90 93 49 05 	sts	0x0549, r25
				ackPayload[14] = batteryLevel>>8;
     d52:	80 93 4a 05 	sts	0x054A, r24
				ackPayload[15] = 0;
     d56:	10 92 4b 05 	sts	0x054B, r1
				packetId = 3;
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	80 93 0b 02 	sts	0x020B, r24
				break;
     d60:	aa ce       	rjmp	.-684    	; 0xab6 <handleRFCommands+0x342>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	30 93 f0 03 	sts	0x03F0, r19
     d6e:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     d72:	47 ff       	sbrs	r20, 7
     d74:	5d cd       	rjmp	.-1350   	; 0x830 <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	90 93 f2 03 	sts	0x03F2, r25
     d82:	80 93 f1 03 	sts	0x03F1, r24
     d86:	5f cd       	rjmp	.-1346   	; 0x846 <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     d88:	70 91 56 05 	lds	r23, 0x0556
     d8c:	77 23       	and	r23, r23
     d8e:	61 f4       	brne	.+24     	; 0xda8 <handleRFCommands+0x634>
     d90:	80 91 57 05 	lds	r24, 0x0557
     d94:	88 30       	cpi	r24, 0x08	; 8
     d96:	41 f4       	brne	.+16     	; 0xda8 <handleRFCommands+0x634>
     d98:	50 91 58 05 	lds	r21, 0x0558
     d9c:	55 23       	and	r21, r21
     d9e:	09 f4       	brne	.+2      	; 0xda2 <handleRFCommands+0x62e>
     da0:	64 c0       	rjmp	.+200    	; 0xe6a <handleRFCommands+0x6f6>
     da2:	40 91 59 05 	lds	r20, 0x0559
     da6:	25 cd       	rjmp	.-1462   	; 0x7f2 <handleRFCommands+0x7e>
     da8:	50 91 58 05 	lds	r21, 0x0558
     dac:	40 91 59 05 	lds	r20, 0x0559
     db0:	20 cd       	rjmp	.-1472   	; 0x7f2 <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     db2:	80 91 2f 03 	lds	r24, 0x032F
     db6:	90 91 30 03 	lds	r25, 0x0330
     dba:	80 93 3d 05 	sts	0x053D, r24
				ackPayload[2] = proximityValue[0]>>8;
     dbe:	80 91 2f 03 	lds	r24, 0x032F
     dc2:	90 91 30 03 	lds	r25, 0x0330
     dc6:	90 93 3e 05 	sts	0x053E, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     dca:	80 91 33 03 	lds	r24, 0x0333
     dce:	90 91 34 03 	lds	r25, 0x0334
     dd2:	80 93 3f 05 	sts	0x053F, r24
				ackPayload[4] = proximityValue[2]>>8;
     dd6:	80 91 33 03 	lds	r24, 0x0333
     dda:	90 91 34 03 	lds	r25, 0x0334
     dde:	90 93 40 05 	sts	0x0540, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     de2:	80 91 37 03 	lds	r24, 0x0337
     de6:	90 91 38 03 	lds	r25, 0x0338
     dea:	80 93 41 05 	sts	0x0541, r24
				ackPayload[6] = proximityValue[4]>>8;
     dee:	80 91 37 03 	lds	r24, 0x0337
     df2:	90 91 38 03 	lds	r25, 0x0338
     df6:	90 93 42 05 	sts	0x0542, r25
				ackPayload[7] = proximityValue[6]&0xFF;
     dfa:	80 91 3b 03 	lds	r24, 0x033B
     dfe:	90 91 3c 03 	lds	r25, 0x033C
     e02:	80 93 43 05 	sts	0x0543, r24
				ackPayload[8] = proximityValue[6]>>8;
     e06:	80 91 3b 03 	lds	r24, 0x033B
     e0a:	90 91 3c 03 	lds	r25, 0x033C
     e0e:	90 93 44 05 	sts	0x0544, r25
				ackPayload[9] = proximityValue[10]&0xFF;
     e12:	80 91 43 03 	lds	r24, 0x0343
     e16:	90 91 44 03 	lds	r25, 0x0344
     e1a:	80 93 45 05 	sts	0x0545, r24
				ackPayload[10] = proximityValue[10]>>8;
     e1e:	80 91 43 03 	lds	r24, 0x0343
     e22:	90 91 44 03 	lds	r25, 0x0344
     e26:	90 93 46 05 	sts	0x0546, r25
				ackPayload[11] = proximityValue[12]&0xFF;
     e2a:	80 91 47 03 	lds	r24, 0x0347
     e2e:	90 91 48 03 	lds	r25, 0x0348
     e32:	80 93 47 05 	sts	0x0547, r24
				ackPayload[12] = proximityValue[12]>>8;
     e36:	80 91 47 03 	lds	r24, 0x0347
     e3a:	90 91 48 03 	lds	r25, 0x0348
     e3e:	90 93 48 05 	sts	0x0548, r25
				ackPayload[13] = proximityValue[14]&0xFF;
     e42:	80 91 4b 03 	lds	r24, 0x034B
     e46:	90 91 4c 03 	lds	r25, 0x034C
     e4a:	80 93 49 05 	sts	0x0549, r24
				ackPayload[14] = proximityValue[14]>>8;
     e4e:	80 91 4b 03 	lds	r24, 0x034B
     e52:	90 91 4c 03 	lds	r25, 0x034C
     e56:	90 93 4a 05 	sts	0x054A, r25
				ackPayload[15] = currentSelector;
     e5a:	80 91 30 05 	lds	r24, 0x0530
     e5e:	80 93 4b 05 	sts	0x054B, r24
				packetId = 6;
     e62:	86 e0       	ldi	r24, 0x06	; 6
     e64:	80 93 0b 02 	sts	0x020B, r24
				break;
     e68:	26 ce       	rjmp	.-948    	; 0xab6 <handleRFCommands+0x342>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     e6a:	40 91 59 05 	lds	r20, 0x0559
     e6e:	44 23       	and	r20, r20
     e70:	79 f0       	breq	.+30     	; 0xe90 <handleRFCommands+0x71c>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     e72:	10 92 02 04 	sts	0x0402, r1
     e76:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     e7a:	84 2f       	mov	r24, r20
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	90 70       	andi	r25, 0x00	; 0
     e82:	90 93 00 04 	sts	0x0400, r25
     e86:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	c3 cc       	rjmp	.-1658   	; 0x816 <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
     e90:	8c e3       	ldi	r24, 0x3C	; 60
     e92:	0e 94 2e 11 	call	0x225c	; 0x225c <sleep>
     e96:	50 91 58 05 	lds	r21, 0x0558
     e9a:	40 91 59 05 	lds	r20, 0x0559
     e9e:	60 91 54 05 	lds	r22, 0x0554
     ea2:	e0 91 55 05 	lds	r30, 0x0555
     ea6:	70 91 56 05 	lds	r23, 0x0556
     eaa:	a3 cc       	rjmp	.-1722   	; 0x7f2 <handleRFCommands+0x7e>

00000eac <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29

	PCICR = 0;
     eb0:	c8 e6       	ldi	r28, 0x68	; 104
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
     eb4:	18 82       	st	Y, r1
	PCMSK1 = 0;
     eb6:	ac e6       	ldi	r26, 0x6C	; 108
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	1c 92       	st	X, r1
	TCCR2A = 0;
     ebc:	e0 eb       	ldi	r30, 0xB0	; 176
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1
	TCCR2B = 0;
     ec2:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     ec6:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     eca:	88 81       	ld	r24, Y
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     ed0:	8c 91       	ld	r24, X
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	80 83       	st	Z, r24

}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     eee:	80 91 11 02 	lds	r24, 0x0211
     ef2:	88 23       	and	r24, r24
     ef4:	21 f1       	breq	.+72     	; 0xf3e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     ef6:	80 91 03 01 	lds	r24, 0x0103
     efa:	86 fd       	sbrc	r24, 6
     efc:	20 c0       	rjmp	.+64     	; 0xf3e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     efe:	80 91 68 00 	lds	r24, 0x0068
     f02:	8d 7f       	andi	r24, 0xFD	; 253
     f04:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     f08:	80 91 6c 00 	lds	r24, 0x006C
     f0c:	8f 77       	andi	r24, 0x7F	; 127
     f0e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
     f18:	8d e0       	ldi	r24, 0x0D	; 13
     f1a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f1e:	80 91 b1 00 	lds	r24, 0x00B1
     f22:	86 60       	ori	r24, 0x06	; 6
     f24:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
     f28:	80 91 70 00 	lds	r24, 0x0070
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
     f32:	10 92 26 03 	sts	0x0326, r1
     f36:	10 92 27 03 	sts	0x0327, r1
     f3a:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
     f3e:	8f 91       	pop	r24
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
     f60:	80 91 b1 00 	lds	r24, 0x00B1
     f64:	88 7f       	andi	r24, 0xF8	; 248
     f66:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
     f6a:	80 91 12 02 	lds	r24, 0x0212
     f6e:	88 23       	and	r24, r24
     f70:	a9 f0       	breq	.+42     	; 0xf9c <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
     f72:	80 91 03 01 	lds	r24, 0x0103
     f76:	86 ff       	sbrs	r24, 6
     f78:	65 c0       	rjmp	.+202    	; 0x1044 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
     f7a:	80 91 68 00 	lds	r24, 0x0068
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
     f84:	80 91 6c 00 	lds	r24, 0x006C
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	9f ef       	ldi	r25, 0xFF	; 255
     f92:	90 93 02 02 	sts	0x0202, r25
     f96:	80 93 01 02 	sts	0x0201, r24
     f9a:	49 c0       	rjmp	.+146    	; 0x102e <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
     f9c:	80 91 01 02 	lds	r24, 0x0201
     fa0:	90 91 02 02 	lds	r25, 0x0202
     fa4:	2f ef       	ldi	r18, 0xFF	; 255
     fa6:	8f 3f       	cpi	r24, 0xFF	; 255
     fa8:	92 07       	cpc	r25, r18
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_13+0x64>
     fac:	63 c0       	rjmp	.+198    	; 0x1074 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__vector_13+0x6c>
     fb4:	98 c0       	rjmp	.+304    	; 0x10e6 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
     fb6:	9c 01       	movw	r18, r24
     fb8:	22 50       	subi	r18, 0x02	; 2
     fba:	30 40       	sbci	r19, 0x00	; 0
     fbc:	25 30       	cpi	r18, 0x05	; 5
     fbe:	31 05       	cpc	r19, r1
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <__vector_13+0x7a>
     fc2:	67 c0       	rjmp	.+206    	; 0x1092 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
     fc4:	9c 01       	movw	r18, r24
     fc6:	27 50       	subi	r18, 0x07	; 7
     fc8:	30 40       	sbci	r19, 0x00	; 0
     fca:	26 30       	cpi	r18, 0x06	; 6
     fcc:	31 05       	cpc	r19, r1
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <__vector_13+0x88>
     fd0:	bd c0       	rjmp	.+378    	; 0x114c <__vector_13+0x202>

				OCR2A = 54;
     fd2:	26 e3       	ldi	r18, 0x36	; 54
     fd4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
     fd8:	20 91 b1 00 	lds	r18, 0x00B1
     fdc:	26 60       	ori	r18, 0x06	; 6
     fde:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
     fe2:	20 91 70 00 	lds	r18, 0x0070
     fe6:	22 60       	ori	r18, 0x02	; 2
     fe8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
     fec:	20 91 03 01 	lds	r18, 0x0103
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	20 74       	andi	r18, 0x40	; 64
     ff4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
     ff6:	00 24       	eor	r0, r0
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	00 1c       	adc	r0, r0
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	00 1c       	adc	r0, r0
    1004:	23 2f       	mov	r18, r19
    1006:	30 2d       	mov	r19, r0
    1008:	4c e0       	ldi	r20, 0x0C	; 12
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	48 1b       	sub	r20, r24
    100e:	59 0b       	sbc	r21, r25
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <__vector_13+0xcc>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	4a 95       	dec	r20
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <__vector_13+0xc8>
				data_temp += temp;
    101a:	40 91 26 03 	lds	r20, 0x0326
    101e:	42 0f       	add	r20, r18
    1020:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1024:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1026:	90 93 02 02 	sts	0x0202, r25
    102a:	80 93 01 02 	sts	0x0201, r24

		}

}
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1044:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1048:	83 e3       	ldi	r24, 0x33	; 51
    104a:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    104e:	80 91 b1 00 	lds	r24, 0x00B1
    1052:	86 60       	ori	r24, 0x06	; 6
    1054:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1058:	80 91 70 00 	lds	r24, 0x0070
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	80 93 70 00 	sts	0x0070, r24
    1062:	80 91 01 02 	lds	r24, 0x0201
    1066:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    106a:	2f ef       	ldi	r18, 0xFF	; 255
    106c:	8f 3f       	cpi	r24, 0xFF	; 255
    106e:	92 07       	cpc	r25, r18
    1070:	c9 f6       	brne	.-78     	; 0x1024 <__vector_13+0xda>
    1072:	dd cf       	rjmp	.-70     	; 0x102e <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1074:	20 91 03 01 	lds	r18, 0x0103
    1078:	26 ff       	sbrs	r18, 6
    107a:	52 c0       	rjmp	.+164    	; 0x1120 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    107c:	20 91 68 00 	lds	r18, 0x0068
    1080:	22 60       	ori	r18, 0x02	; 2
    1082:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1086:	20 91 6c 00 	lds	r18, 0x006C
    108a:	20 68       	ori	r18, 0x80	; 128
    108c:	20 93 6c 00 	sts	0x006C, r18
    1090:	ce cf       	rjmp	.-100    	; 0x102e <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1092:	26 e3       	ldi	r18, 0x36	; 54
    1094:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1098:	20 91 b1 00 	lds	r18, 0x00B1
    109c:	26 60       	ori	r18, 0x06	; 6
    109e:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    10a2:	20 91 70 00 	lds	r18, 0x0070
    10a6:	22 60       	ori	r18, 0x02	; 2
    10a8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    10ac:	20 91 03 01 	lds	r18, 0x0103
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	20 74       	andi	r18, 0x40	; 64
    10b4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    10b6:	00 24       	eor	r0, r0
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	00 1c       	adc	r0, r0
    10be:	22 0f       	add	r18, r18
    10c0:	33 1f       	adc	r19, r19
    10c2:	00 1c       	adc	r0, r0
    10c4:	23 2f       	mov	r18, r19
    10c6:	30 2d       	mov	r19, r0
    10c8:	46 e0       	ldi	r20, 0x06	; 6
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	48 1b       	sub	r20, r24
    10ce:	59 0b       	sbc	r21, r25
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <__vector_13+0x18c>
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	4a 95       	dec	r20
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <__vector_13+0x188>
				address_temp += temp;
    10da:	40 91 27 03 	lds	r20, 0x0327
    10de:	42 0f       	add	r20, r18
    10e0:	40 93 27 03 	sts	0x0327, r20
    10e4:	9f cf       	rjmp	.-194    	; 0x1024 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    10e6:	20 91 03 01 	lds	r18, 0x0103
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	20 74       	andi	r18, 0x40	; 64
    10ee:	30 70       	andi	r19, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	23 2f       	mov	r18, r19
    10f4:	00 0c       	add	r0, r0
    10f6:	22 1f       	adc	r18, r18
    10f8:	33 0b       	sbc	r19, r19
    10fa:	00 0c       	add	r0, r0
    10fc:	22 1f       	adc	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1104:	26 e3       	ldi	r18, 0x36	; 54
    1106:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    110a:	20 91 b1 00 	lds	r18, 0x00B1
    110e:	26 60       	ori	r18, 0x06	; 6
    1110:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1114:	20 91 70 00 	lds	r18, 0x0070
    1118:	22 60       	ori	r18, 0x02	; 2
    111a:	20 93 70 00 	sts	0x0070, r18
    111e:	82 cf       	rjmp	.-252    	; 0x1024 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1120:	8c e1       	ldi	r24, 0x1C	; 28
    1122:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1126:	80 91 b1 00 	lds	r24, 0x00B1
    112a:	86 60       	ori	r24, 0x06	; 6
    112c:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1130:	80 91 70 00 	lds	r24, 0x0070
    1134:	82 60       	ori	r24, 0x02	; 2
    1136:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    113a:	10 92 26 03 	sts	0x0326, r1
    113e:	10 92 27 03 	sts	0x0327, r1
    1142:	10 92 28 03 	sts	0x0328, r1
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	6d cf       	rjmp	.-294    	; 0x1026 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    114c:	8d 30       	cpi	r24, 0x0D	; 13
    114e:	91 05       	cpc	r25, r1
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_13+0x20a>
    1152:	68 cf       	rjmp	.-304    	; 0x1024 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1154:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1158:	80 91 68 00 	lds	r24, 0x0068
    115c:	82 60       	ori	r24, 0x02	; 2
    115e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1162:	80 91 6c 00 	lds	r24, 0x006C
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	9f ef       	ldi	r25, 0xFF	; 255
    1170:	90 93 02 02 	sts	0x0202, r25
    1174:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1178:	80 91 28 03 	lds	r24, 0x0328
    117c:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1180:	80 91 27 03 	lds	r24, 0x0327
    1184:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1188:	80 91 26 03 	lds	r24, 0x0326
    118c:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 0d 05 	sts	0x050D, r24
    1196:	4b cf       	rjmp	.-362    	; 0x102e <__vector_13+0xe4>

00001198 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1198:	80 91 00 02 	lds	r24, 0x0200
    119c:	08 95       	ret

0000119e <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    119e:	80 91 24 03 	lds	r24, 0x0324
    11a2:	08 95       	ret

000011a4 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    11a4:	80 91 25 03 	lds	r24, 0x0325
    11a8:	08 95       	ret

000011aa <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    11aa:	80 91 11 02 	lds	r24, 0x0211
    11ae:	88 23       	and	r24, r24
    11b0:	b1 f1       	breq	.+108    	; 0x121e <handleIRRemoteCommands+0x74>

		if(command_received) {
    11b2:	80 91 0d 05 	lds	r24, 0x050D
    11b6:	88 23       	and	r24, r24
    11b8:	91 f1       	breq	.+100    	; 0x121e <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    11ba:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    11be:	e0 93 0c 05 	sts	0x050C, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    11c2:	10 92 0d 05 	sts	0x050D, r1

			switch(irCommand) {
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	e5 33       	cpi	r30, 0x35	; 53
    11ca:	f1 05       	cpc	r31, r1
    11cc:	48 f1       	brcs	.+82     	; 0x1220 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    11ce:	20 91 ef 03 	lds	r18, 0x03EF
    11d2:	30 91 f0 03 	lds	r19, 0x03F0
    11d6:	80 91 f1 03 	lds	r24, 0x03F1
    11da:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    11de:	37 fd       	sbrc	r19, 7
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    11e2:	35 95       	asr	r19
    11e4:	27 95       	ror	r18
    11e6:	35 95       	asr	r19
    11e8:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    11ea:	30 93 02 04 	sts	0x0402, r19
    11ee:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    11f2:	97 fd       	sbrc	r25, 7
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    11f6:	95 95       	asr	r25
    11f8:	87 95       	ror	r24
    11fa:	95 95       	asr	r25
    11fc:	87 95       	ror	r24
    11fe:	90 93 00 04 	sts	0x0400, r25
    1202:	80 93 ff 03 	sts	0x03FF, r24
    1206:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1208:	90 95       	com	r25
    120a:	81 95       	neg	r24
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	95 95       	asr	r25
    1210:	87 95       	ror	r24
    1212:	95 95       	asr	r25
    1214:	87 95       	ror	r24
    1216:	90 93 00 04 	sts	0x0400, r25
    121a:	80 93 ff 03 	sts	0x03FF, r24
    121e:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1220:	ee 58       	subi	r30, 0x8E	; 142
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	05 90       	lpm	r0, Z+
    122a:	f4 91       	lpm	r31, Z+
    122c:	e0 2d       	mov	r30, r0
    122e:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1230:	30 95       	com	r19
    1232:	21 95       	neg	r18
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	d5 cf       	rjmp	.-86     	; 0x11e2 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1238:	80 93 34 05 	sts	0x0534, r24
							cliffAvoidanceEnabled = 0;
    123c:	10 92 35 05 	sts	0x0535, r1
    1240:	c6 cf       	rjmp	.-116    	; 0x11ce <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1242:	10 92 34 05 	sts	0x0534, r1
							cliffAvoidanceEnabled = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 35 05 	sts	0x0535, r24
    124c:	20 91 ef 03 	lds	r18, 0x03EF
    1250:	30 91 f0 03 	lds	r19, 0x03F0
    1254:	80 91 f1 03 	lds	r24, 0x03F1
    1258:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    125c:	c0 cf       	rjmp	.-128    	; 0x11de <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    125e:	10 92 34 05 	sts	0x0534, r1
    1262:	20 91 ef 03 	lds	r18, 0x03EF
    1266:	30 91 f0 03 	lds	r19, 0x03F0
    126a:	80 91 f1 03 	lds	r24, 0x03F1
    126e:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1272:	b5 cf       	rjmp	.-150    	; 0x11de <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 34 05 	sts	0x0534, r24
    127a:	20 91 ef 03 	lds	r18, 0x03EF
    127e:	30 91 f0 03 	lds	r19, 0x03F0
    1282:	80 91 f1 03 	lds	r24, 0x03F1
    1286:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    128a:	a9 cf       	rjmp	.-174    	; 0x11de <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    128c:	80 91 f1 03 	lds	r24, 0x03F1
    1290:	90 91 f2 03 	lds	r25, 0x03F2
    1294:	4e 97       	sbiw	r24, 0x1e	; 30
    1296:	90 93 f2 03 	sts	0x03F2, r25
    129a:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    129e:	2e ef       	ldi	r18, 0xFE	; 254
    12a0:	80 30       	cpi	r24, 0x00	; 0
    12a2:	92 07       	cpc	r25, r18
    12a4:	9c f5       	brge	.+102    	; 0x130c <handleIRRemoteCommands+0x162>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	9e ef       	ldi	r25, 0xFE	; 254
    12aa:	90 93 f2 03 	sts	0x03F2, r25
    12ae:	80 93 f1 03 	sts	0x03F1, r24
    12b2:	20 91 ef 03 	lds	r18, 0x03EF
    12b6:	30 91 f0 03 	lds	r19, 0x03F0
    12ba:	91 cf       	rjmp	.-222    	; 0x11de <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    12bc:	20 91 ef 03 	lds	r18, 0x03EF
    12c0:	30 91 f0 03 	lds	r19, 0x03F0
    12c4:	80 91 ed 03 	lds	r24, 0x03ED
    12c8:	90 91 ee 03 	lds	r25, 0x03EE
    12cc:	28 17       	cp	r18, r24
    12ce:	39 07       	cpc	r19, r25
    12d0:	24 f0       	brlt	.+8      	; 0x12da <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    12d2:	20 91 f1 03 	lds	r18, 0x03F1
    12d6:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    12da:	2e 51       	subi	r18, 0x1E	; 30
    12dc:	30 40       	sbci	r19, 0x00	; 0
    12de:	30 93 f0 03 	sts	0x03F0, r19
    12e2:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    12e6:	c9 01       	movw	r24, r18
    12e8:	30 93 f2 03 	sts	0x03F2, r19
    12ec:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    12f0:	4e ef       	ldi	r20, 0xFE	; 254
    12f2:	20 30       	cpi	r18, 0x00	; 0
    12f4:	34 07       	cpc	r19, r20
    12f6:	34 f4       	brge	.+12     	; 0x1304 <handleIRRemoteCommands+0x15a>
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	5e ef       	ldi	r21, 0xFE	; 254
    12fc:	50 93 f0 03 	sts	0x03F0, r21
    1300:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    1304:	4e ef       	ldi	r20, 0xFE	; 254
    1306:	20 30       	cpi	r18, 0x00	; 0
    1308:	34 07       	cpc	r19, r20
    130a:	6c f2       	brlt	.-102    	; 0x12a6 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    130c:	20 91 ef 03 	lds	r18, 0x03EF
    1310:	30 91 f0 03 	lds	r19, 0x03F0
    1314:	64 cf       	rjmp	.-312    	; 0x11de <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1316:	20 91 ef 03 	lds	r18, 0x03EF
    131a:	30 91 f0 03 	lds	r19, 0x03F0
    131e:	2e 51       	subi	r18, 0x1E	; 30
    1320:	30 40       	sbci	r19, 0x00	; 0
    1322:	30 93 f0 03 	sts	0x03F0, r19
    1326:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    132a:	4e ef       	ldi	r20, 0xFE	; 254
    132c:	20 30       	cpi	r18, 0x00	; 0
    132e:	34 07       	cpc	r19, r20
    1330:	0c f0       	brlt	.+2      	; 0x1334 <handleIRRemoteCommands+0x18a>
    1332:	17 c1       	rjmp	.+558    	; 0x1562 <handleIRRemoteCommands+0x3b8>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	9e ef       	ldi	r25, 0xFE	; 254
    1338:	90 93 f0 03 	sts	0x03F0, r25
    133c:	80 93 ef 03 	sts	0x03EF, r24
    1340:	80 91 f1 03 	lds	r24, 0x03F1
    1344:	90 91 f2 03 	lds	r25, 0x03F2
    1348:	20 e8       	ldi	r18, 0x80	; 128
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4e cf       	rjmp	.-356    	; 0x11ea <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    134e:	20 91 ef 03 	lds	r18, 0x03EF
    1352:	30 91 f0 03 	lds	r19, 0x03F0
    1356:	2e 51       	subi	r18, 0x1E	; 30
    1358:	30 40       	sbci	r19, 0x00	; 0
    135a:	30 93 f0 03 	sts	0x03F0, r19
    135e:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1362:	80 91 f1 03 	lds	r24, 0x03F1
    1366:	90 91 f2 03 	lds	r25, 0x03F2
    136a:	4e 96       	adiw	r24, 0x1e	; 30
    136c:	90 93 f2 03 	sts	0x03F2, r25
    1370:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1374:	4e ef       	ldi	r20, 0xFE	; 254
    1376:	20 30       	cpi	r18, 0x00	; 0
    1378:	34 07       	cpc	r19, r20
    137a:	34 f4       	brge	.+12     	; 0x1388 <handleIRRemoteCommands+0x1de>
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	3e ef       	ldi	r19, 0xFE	; 254
    1380:	30 93 f0 03 	sts	0x03F0, r19
    1384:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1388:	42 e0       	ldi	r20, 0x02	; 2
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	94 07       	cpc	r25, r20
    138e:	0c f4       	brge	.+2      	; 0x1392 <handleIRRemoteCommands+0x1e8>
    1390:	26 cf       	rjmp	.-436    	; 0x11de <handleIRRemoteCommands+0x34>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	92 e0       	ldi	r25, 0x02	; 2
    1396:	90 93 f2 03 	sts	0x03F2, r25
    139a:	80 93 f1 03 	sts	0x03F1, r24
    139e:	1f cf       	rjmp	.-450    	; 0x11de <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    13a0:	20 91 ef 03 	lds	r18, 0x03EF
    13a4:	30 91 f0 03 	lds	r19, 0x03F0
    13a8:	80 91 f1 03 	lds	r24, 0x03F1
    13ac:	90 91 f2 03 	lds	r25, 0x03F2
    13b0:	82 17       	cp	r24, r18
    13b2:	93 07       	cpc	r25, r19
    13b4:	0c f4       	brge	.+2      	; 0x13b8 <handleIRRemoteCommands+0x20e>
    13b6:	da c0       	rjmp	.+436    	; 0x156c <handleIRRemoteCommands+0x3c2>
    13b8:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    13ba:	22 5e       	subi	r18, 0xE2	; 226
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	30 93 f0 03 	sts	0x03F0, r19
    13c2:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    13c6:	4e 96       	adiw	r24, 0x1e	; 30
    13c8:	90 93 f2 03 	sts	0x03F2, r25
    13cc:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    13d0:	42 e0       	ldi	r20, 0x02	; 2
    13d2:	21 30       	cpi	r18, 0x01	; 1
    13d4:	34 07       	cpc	r19, r20
    13d6:	34 f0       	brlt	.+12     	; 0x13e4 <handleIRRemoteCommands+0x23a>
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	32 e0       	ldi	r19, 0x02	; 2
    13dc:	30 93 f0 03 	sts	0x03F0, r19
    13e0:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    13e4:	22 e0       	ldi	r18, 0x02	; 2
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	92 07       	cpc	r25, r18
    13ea:	0c f4       	brge	.+2      	; 0x13ee <handleIRRemoteCommands+0x244>
    13ec:	8f cf       	rjmp	.-226    	; 0x130c <handleIRRemoteCommands+0x162>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	90 93 f2 03 	sts	0x03F2, r25
    13f6:	80 93 f1 03 	sts	0x03F1, r24
    13fa:	20 91 ef 03 	lds	r18, 0x03EF
    13fe:	30 91 f0 03 	lds	r19, 0x03F0
    1402:	ed ce       	rjmp	.-550    	; 0x11de <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1404:	20 91 ef 03 	lds	r18, 0x03EF
    1408:	30 91 f0 03 	lds	r19, 0x03F0
    140c:	22 5e       	subi	r18, 0xE2	; 226
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	30 93 f0 03 	sts	0x03F0, r19
    1414:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1418:	42 e0       	ldi	r20, 0x02	; 2
    141a:	21 30       	cpi	r18, 0x01	; 1
    141c:	34 07       	cpc	r19, r20
    141e:	0c f4       	brge	.+2      	; 0x1422 <handleIRRemoteCommands+0x278>
    1420:	a0 c0       	rjmp	.+320    	; 0x1562 <handleIRRemoteCommands+0x3b8>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	90 93 f0 03 	sts	0x03F0, r25
    142a:	80 93 ef 03 	sts	0x03EF, r24
    142e:	80 91 f1 03 	lds	r24, 0x03F1
    1432:	90 91 f2 03 	lds	r25, 0x03F2
    1436:	20 e8       	ldi	r18, 0x80	; 128
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	d7 ce       	rjmp	.-594    	; 0x11ea <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    143c:	80 91 0e 05 	lds	r24, 0x050E
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	65 e0       	ldi	r22, 0x05	; 5
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__divmodhi4>
    144c:	80 93 0e 05 	sts	0x050E, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1450:	88 23       	and	r24, r24
    1452:	09 f0       	breq	.+2      	; 0x1456 <handleIRRemoteCommands+0x2ac>
    1454:	8d c0       	rjmp	.+282    	; 0x1570 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1456:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1458:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    145a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1464:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1468:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
					updateGreenLed(pwm_green);
    146c:	80 91 0d 02 	lds	r24, 0x020D
    1470:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1474:	80 91 0e 02 	lds	r24, 0x020E
    1478:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>
    147c:	20 91 ef 03 	lds	r18, 0x03EF
    1480:	30 91 f0 03 	lds	r19, 0x03F0
    1484:	80 91 f1 03 	lds	r24, 0x03F1
    1488:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    148c:	a8 ce       	rjmp	.-688    	; 0x11de <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    148e:	80 91 0f 05 	lds	r24, 0x050F
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	83 70       	andi	r24, 0x03	; 3
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	80 93 0f 05 	sts	0x050F, r24
					switch(behaviorState) {
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <handleIRRemoteCommands+0x2fa>
    14a2:	cf ce       	rjmp	.-610    	; 0x1242 <handleIRRemoteCommands+0x98>
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	09 f4       	brne	.+2      	; 0x14aa <handleIRRemoteCommands+0x300>
    14a8:	53 c0       	rjmp	.+166    	; 0x1550 <handleIRRemoteCommands+0x3a6>
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <handleIRRemoteCommands+0x306>
    14ae:	c4 ce       	rjmp	.-632    	; 0x1238 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    14b0:	10 92 34 05 	sts	0x0534, r1
							cliffAvoidanceEnabled = 0;
    14b4:	10 92 35 05 	sts	0x0535, r1
    14b8:	8a ce       	rjmp	.-748    	; 0x11ce <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    14ba:	20 91 ef 03 	lds	r18, 0x03EF
    14be:	30 91 f0 03 	lds	r19, 0x03F0
    14c2:	22 5e       	subi	r18, 0xE2	; 226
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	30 93 f0 03 	sts	0x03F0, r19
    14ca:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    14ce:	80 91 f1 03 	lds	r24, 0x03F1
    14d2:	90 91 f2 03 	lds	r25, 0x03F2
    14d6:	4e 97       	sbiw	r24, 0x1e	; 30
    14d8:	90 93 f2 03 	sts	0x03F2, r25
    14dc:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    14e0:	42 e0       	ldi	r20, 0x02	; 2
    14e2:	21 30       	cpi	r18, 0x01	; 1
    14e4:	34 07       	cpc	r19, r20
    14e6:	34 f0       	brlt	.+12     	; 0x14f4 <handleIRRemoteCommands+0x34a>
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	32 e0       	ldi	r19, 0x02	; 2
    14ec:	30 93 f0 03 	sts	0x03F0, r19
    14f0:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    14f4:	4e ef       	ldi	r20, 0xFE	; 254
    14f6:	80 30       	cpi	r24, 0x00	; 0
    14f8:	94 07       	cpc	r25, r20
    14fa:	0c f0       	brlt	.+2      	; 0x14fe <handleIRRemoteCommands+0x354>
    14fc:	70 ce       	rjmp	.-800    	; 0x11de <handleIRRemoteCommands+0x34>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	9e ef       	ldi	r25, 0xFE	; 254
    1502:	90 93 f2 03 	sts	0x03F2, r25
    1506:	80 93 f1 03 	sts	0x03F1, r24
    150a:	69 ce       	rjmp	.-814    	; 0x11de <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    150c:	10 92 f0 03 	sts	0x03F0, r1
    1510:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    1514:	10 92 f2 03 	sts	0x03F2, r1
    1518:	10 92 f1 03 	sts	0x03F1, r1
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	5e ce       	rjmp	.-836    	; 0x11e2 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1526:	80 91 f1 03 	lds	r24, 0x03F1
    152a:	90 91 f2 03 	lds	r25, 0x03F2
    152e:	4e 96       	adiw	r24, 0x1e	; 30
    1530:	90 93 f2 03 	sts	0x03F2, r25
    1534:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1538:	22 e0       	ldi	r18, 0x02	; 2
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	92 07       	cpc	r25, r18
    153e:	0c f4       	brge	.+2      	; 0x1542 <handleIRRemoteCommands+0x398>
    1540:	e5 ce       	rjmp	.-566    	; 0x130c <handleIRRemoteCommands+0x162>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	92 e0       	ldi	r25, 0x02	; 2
    1546:	90 93 f2 03 	sts	0x03F2, r25
    154a:	80 93 f1 03 	sts	0x03F1, r24
    154e:	de ce       	rjmp	.-580    	; 0x130c <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 34 05 	sts	0x0534, r24
							cliffAvoidanceEnabled = 1;
    1556:	80 93 35 05 	sts	0x0535, r24
    155a:	20 91 ef 03 	lds	r18, 0x03EF
    155e:	30 91 f0 03 	lds	r19, 0x03F0
    1562:	80 91 f1 03 	lds	r24, 0x03F1
    1566:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    156a:	39 ce       	rjmp	.-910    	; 0x11de <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    156c:	c9 01       	movw	r24, r18
    156e:	25 cf       	rjmp	.-438    	; 0x13ba <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	61 f0       	breq	.+24     	; 0x158c <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	91 f0       	breq	.+36     	; 0x159c <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	d9 f0       	breq	.+54     	; 0x15b2 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1582:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1586:	80 93 0c 02 	sts	0x020C, r24
    158a:	6e cf       	rjmp	.-292    	; 0x1468 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1592:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1596:	80 93 0c 02 	sts	0x020C, r24
    159a:	66 cf       	rjmp	.-308    	; 0x1468 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    159c:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    159e:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    15a6:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    15aa:	10 92 0c 02 	sts	0x020C, r1
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	5b cf       	rjmp	.-330    	; 0x1468 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    15b2:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    15b6:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    15ba:	10 92 0c 02 	sts	0x020C, r1
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	53 cf       	rjmp	.-346    	; 0x1468 <handleIRRemoteCommands+0x2be>

000015c2 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    15c2:	08 95       	ret

000015c4 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <start_vertical_speed_control_left+0x14>
    15d6:	b7 c0       	rjmp	.+366    	; 0x1746 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    15d8:	20 91 23 05 	lds	r18, 0x0523
    15dc:	30 91 24 05 	lds	r19, 0x0524
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	2e 30       	cpi	r18, 0x0E	; 14
    15e4:	34 07       	cpc	r19, r20
    15e6:	0c f4       	brge	.+2      	; 0x15ea <start_vertical_speed_control_left+0x26>
    15e8:	88 c0       	rjmp	.+272    	; 0x16fa <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    15ea:	18 16       	cp	r1, r24
    15ec:	19 06       	cpc	r1, r25
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <start_vertical_speed_control_left+0x2e>
    15f0:	13 c1       	rjmp	.+550    	; 0x1818 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    15f2:	88 e6       	ldi	r24, 0x68	; 104
    15f4:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    15f6:	82 1b       	sub	r24, r18
    15f8:	93 0b       	sbc	r25, r19
    15fa:	95 95       	asr	r25
    15fc:	87 95       	ror	r24
    15fe:	95 95       	asr	r25
    1600:	87 95       	ror	r24
    1602:	29 e1       	ldi	r18, 0x19	; 25
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	28 1b       	sub	r18, r24
    1608:	39 0b       	sbc	r19, r25
    160a:	30 93 04 02 	sts	0x0204, r19
    160e:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1612:	40 91 38 05 	lds	r20, 0x0538
    1616:	50 91 39 05 	lds	r21, 0x0539
    161a:	50 93 53 05 	sts	0x0553, r21
    161e:	40 93 52 05 	sts	0x0552, r20
	if(*pwm_left >= 0) {
    1622:	20 81       	ld	r18, Z
    1624:	31 81       	ldd	r19, Z+1	; 0x01
    1626:	37 fd       	sbrc	r19, 7
    1628:	d2 c0       	rjmp	.+420    	; 0x17ce <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    162a:	80 91 e7 03 	lds	r24, 0x03E7
    162e:	90 91 e8 03 	lds	r25, 0x03E8
    1632:	b9 01       	movw	r22, r18
    1634:	68 1b       	sub	r22, r24
    1636:	79 0b       	sbc	r23, r25
    1638:	cb 01       	movw	r24, r22
    163a:	70 93 39 05 	sts	0x0539, r23
    163e:	60 93 38 05 	sts	0x0538, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1642:	20 91 f7 03 	lds	r18, 0x03F7
    1646:	30 91 f8 03 	lds	r19, 0x03F8
    164a:	28 0f       	add	r18, r24
    164c:	39 1f       	adc	r19, r25
    164e:	30 93 f8 03 	sts	0x03F8, r19
    1652:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1656:	76 e0       	ldi	r23, 0x06	; 6
    1658:	21 34       	cpi	r18, 0x41	; 65
    165a:	37 07       	cpc	r19, r23
    165c:	0c f4       	brge	.+2      	; 0x1660 <start_vertical_speed_control_left+0x9c>
    165e:	84 c0       	rjmp	.+264    	; 0x1768 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1660:	20 e4       	ldi	r18, 0x40	; 64
    1662:	36 e0       	ldi	r19, 0x06	; 6
    1664:	30 93 f8 03 	sts	0x03F8, r19
    1668:	20 93 f7 03 	sts	0x03F7, r18
    166c:	60 ec       	ldi	r22, 0xC0	; 192
    166e:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1670:	9c 01       	movw	r18, r24
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	dc 01       	movw	r26, r24
    1678:	aa 0f       	add	r26, r26
    167a:	bb 1f       	adc	r27, r27
    167c:	aa 0f       	add	r26, r26
    167e:	bb 1f       	adc	r27, r27
    1680:	aa 0f       	add	r26, r26
    1682:	bb 1f       	adc	r27, r27
    1684:	2a 0f       	add	r18, r26
    1686:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1688:	00 81       	ld	r16, Z
    168a:	11 81       	ldd	r17, Z+1	; 0x01
    168c:	c0 91 03 02 	lds	r28, 0x0203
    1690:	d0 91 04 02 	lds	r29, 0x0204
    1694:	0c 9f       	mul	r16, r28
    1696:	d0 01       	movw	r26, r0
    1698:	0d 9f       	mul	r16, r29
    169a:	b0 0d       	add	r27, r0
    169c:	1c 9f       	mul	r17, r28
    169e:	b0 0d       	add	r27, r0
    16a0:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    16a2:	2a 0f       	add	r18, r26
    16a4:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    16a6:	48 1b       	sub	r20, r24
    16a8:	59 0b       	sbc	r21, r25
    16aa:	44 0f       	add	r20, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	24 0f       	add	r18, r20
    16b0:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    16b2:	26 0f       	add	r18, r22
    16b4:	37 1f       	adc	r19, r23
    16b6:	30 93 f6 03 	sts	0x03F6, r19
    16ba:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    16be:	37 fd       	sbrc	r19, 7
    16c0:	69 c0       	rjmp	.+210    	; 0x1794 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    16c2:	12 16       	cp	r1, r18
    16c4:	13 06       	cpc	r1, r19
    16c6:	0c f0       	brlt	.+2      	; 0x16ca <start_vertical_speed_control_left+0x106>
    16c8:	6f c0       	rjmp	.+222    	; 0x17a8 <start_vertical_speed_control_left+0x1e4>
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	97 fd       	sbrc	r25, 7
    16d0:	89 c0       	rjmp	.+274    	; 0x17e4 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    16d2:	7d e5       	ldi	r23, 0x5D	; 93
    16d4:	21 3c       	cpi	r18, 0xC1	; 193
    16d6:	37 07       	cpc	r19, r23
    16d8:	0c f4       	brge	.+2      	; 0x16dc <start_vertical_speed_control_left+0x118>
    16da:	66 c0       	rjmp	.+204    	; 0x17a8 <start_vertical_speed_control_left+0x1e4>
    16dc:	80 ec       	ldi	r24, 0xC0	; 192
    16de:	9d e5       	ldi	r25, 0x5D	; 93
    16e0:	90 93 f6 03 	sts	0x03F6, r25
    16e4:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    16fa:	24 3b       	cpi	r18, 0xB4	; 180
    16fc:	31 05       	cpc	r19, r1
    16fe:	94 f4       	brge	.+36     	; 0x1724 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1700:	2a 35       	cpi	r18, 0x5A	; 90
    1702:	31 05       	cpc	r19, r1
    1704:	7c f4       	brge	.+30     	; 0x1724 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    1706:	18 16       	cp	r1, r24
    1708:	19 06       	cpc	r1, r25
    170a:	0c f0       	brlt	.+2      	; 0x170e <start_vertical_speed_control_left+0x14a>
    170c:	93 c0       	rjmp	.+294    	; 0x1834 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    170e:	35 95       	asr	r19
    1710:	27 95       	ror	r18
    1712:	35 95       	asr	r19
    1714:	27 95       	ror	r18
    1716:	27 5e       	subi	r18, 0xE7	; 231
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	30 93 04 02 	sts	0x0204, r19
    171e:	20 93 03 02 	sts	0x0203, r18
    1722:	77 cf       	rjmp	.-274    	; 0x1612 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1724:	18 16       	cp	r1, r24
    1726:	19 06       	cpc	r1, r25
    1728:	94 f5       	brge	.+100    	; 0x178e <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    172a:	84 eb       	ldi	r24, 0xB4	; 180
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	82 1b       	sub	r24, r18
    1730:	93 0b       	sbc	r25, r19
    1732:	95 95       	asr	r25
    1734:	87 95       	ror	r24
    1736:	95 95       	asr	r25
    1738:	87 95       	ror	r24
    173a:	49 96       	adiw	r24, 0x19	; 25
    173c:	90 93 04 02 	sts	0x0204, r25
    1740:	80 93 03 02 	sts	0x0203, r24
    1744:	66 cf       	rjmp	.-308    	; 0x1612 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1746:	10 92 f8 03 	sts	0x03F8, r1
    174a:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    174e:	10 92 39 05 	sts	0x0539, r1
    1752:	10 92 38 05 	sts	0x0538, r1
		delta_left_speed_prev = 0;
    1756:	10 92 53 05 	sts	0x0553, r1
    175a:	10 92 52 05 	sts	0x0552, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1768:	69 ef       	ldi	r22, 0xF9	; 249
    176a:	20 3c       	cpi	r18, 0xC0	; 192
    176c:	36 07       	cpc	r19, r22
    176e:	4c f4       	brge	.+18     	; 0x1782 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1770:	20 ec       	ldi	r18, 0xC0	; 192
    1772:	39 ef       	ldi	r19, 0xF9	; 249
    1774:	30 93 f8 03 	sts	0x03F8, r19
    1778:	20 93 f7 03 	sts	0x03F7, r18
    177c:	60 e4       	ldi	r22, 0x40	; 64
    177e:	7d ee       	ldi	r23, 0xED	; 237
    1780:	77 cf       	rjmp	.-274    	; 0x1670 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1782:	b9 01       	movw	r22, r18
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	62 0f       	add	r22, r18
    178a:	73 1f       	adc	r23, r19
    178c:	71 cf       	rjmp	.-286    	; 0x1670 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    178e:	84 eb       	ldi	r24, 0xB4	; 180
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	31 cf       	rjmp	.-414    	; 0x15f6 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	97 fd       	sbrc	r25, 7
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    179c:	10 92 f6 03 	sts	0x03F6, r1
    17a0:	10 92 f5 03 	sts	0x03F5, r1
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    17a8:	82 ea       	ldi	r24, 0xA2	; 162
    17aa:	20 34       	cpi	r18, 0x40	; 64
    17ac:	38 07       	cpc	r19, r24
    17ae:	04 f5       	brge	.+64     	; 0x17f0 <start_vertical_speed_control_left+0x22c>
    17b0:	80 e4       	ldi	r24, 0x40	; 64
    17b2:	92 ea       	ldi	r25, 0xA2	; 162
    17b4:	90 93 f6 03 	sts	0x03F6, r25
    17b8:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	9e ef       	ldi	r25, 0xFE	; 254
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24


}
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    17ce:	80 91 e7 03 	lds	r24, 0x03E7
    17d2:	90 91 e8 03 	lds	r25, 0x03E8
    17d6:	82 0f       	add	r24, r18
    17d8:	93 1f       	adc	r25, r19
    17da:	90 93 39 05 	sts	0x0539, r25
    17de:	80 93 38 05 	sts	0x0538, r24
    17e2:	2f cf       	rjmp	.-418    	; 0x1642 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    17e4:	10 92 f6 03 	sts	0x03F6, r1
    17e8:	10 92 f5 03 	sts	0x03F5, r1
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    17f0:	35 95       	asr	r19
    17f2:	27 95       	ror	r18
    17f4:	35 95       	asr	r19
    17f6:	27 95       	ror	r18
    17f8:	35 95       	asr	r19
    17fa:	27 95       	ror	r18
    17fc:	35 95       	asr	r19
    17fe:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1800:	31 83       	std	Z+1, r19	; 0x01
    1802:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	21 30       	cpi	r18, 0x01	; 1
    1808:	34 07       	cpc	r19, r20
    180a:	0c f0       	brlt	.+2      	; 0x180e <start_vertical_speed_control_left+0x24a>
    180c:	6d cf       	rjmp	.-294    	; 0x16e8 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    180e:	6e ef       	ldi	r22, 0xFE	; 254
    1810:	20 30       	cpi	r18, 0x00	; 0
    1812:	36 07       	cpc	r19, r22
    1814:	9c f2       	brlt	.-90     	; 0x17bc <start_vertical_speed_control_left+0x1f8>
    1816:	6c cf       	rjmp	.-296    	; 0x16f0 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1818:	88 e6       	ldi	r24, 0x68	; 104
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	82 1b       	sub	r24, r18
    181e:	93 0b       	sbc	r25, r19
    1820:	95 95       	asr	r25
    1822:	87 95       	ror	r24
    1824:	95 95       	asr	r25
    1826:	87 95       	ror	r24
    1828:	49 96       	adiw	r24, 0x19	; 25
    182a:	90 93 04 02 	sts	0x0204, r25
    182e:	80 93 03 02 	sts	0x0203, r24
    1832:	ef ce       	rjmp	.-546    	; 0x1612 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1834:	35 95       	asr	r19
    1836:	27 95       	ror	r18
    1838:	35 95       	asr	r19
    183a:	27 95       	ror	r18
    183c:	89 e1       	ldi	r24, 0x19	; 25
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	82 1b       	sub	r24, r18
    1842:	93 0b       	sbc	r25, r19
    1844:	90 93 04 02 	sts	0x0204, r25
    1848:	80 93 03 02 	sts	0x0203, r24
    184c:	e2 ce       	rjmp	.-572    	; 0x1612 <start_vertical_speed_control_left+0x4e>

0000184e <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	09 f4       	brne	.+2      	; 0x1862 <start_vertical_speed_control_right+0x14>
    1860:	b7 c0       	rjmp	.+366    	; 0x19d0 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1862:	20 91 23 05 	lds	r18, 0x0523
    1866:	30 91 24 05 	lds	r19, 0x0524
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	2e 30       	cpi	r18, 0x0E	; 14
    186e:	34 07       	cpc	r19, r20
    1870:	0c f4       	brge	.+2      	; 0x1874 <start_vertical_speed_control_right+0x26>
    1872:	88 c0       	rjmp	.+272    	; 0x1984 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1874:	18 16       	cp	r1, r24
    1876:	19 06       	cpc	r1, r25
    1878:	0c f0       	brlt	.+2      	; 0x187c <start_vertical_speed_control_right+0x2e>
    187a:	13 c1       	rjmp	.+550    	; 0x1aa2 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    187c:	88 e6       	ldi	r24, 0x68	; 104
    187e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1880:	82 1b       	sub	r24, r18
    1882:	93 0b       	sbc	r25, r19
    1884:	95 95       	asr	r25
    1886:	87 95       	ror	r24
    1888:	95 95       	asr	r25
    188a:	87 95       	ror	r24
    188c:	29 e1       	ldi	r18, 0x19	; 25
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	28 1b       	sub	r18, r24
    1892:	39 0b       	sbc	r19, r25
    1894:	30 93 06 02 	sts	0x0206, r19
    1898:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    189c:	40 91 61 05 	lds	r20, 0x0561
    18a0:	50 91 62 05 	lds	r21, 0x0562
    18a4:	50 93 3b 05 	sts	0x053B, r21
    18a8:	40 93 3a 05 	sts	0x053A, r20
	if(*pwm_right >= 0) {
    18ac:	20 81       	ld	r18, Z
    18ae:	31 81       	ldd	r19, Z+1	; 0x01
    18b0:	37 fd       	sbrc	r19, 7
    18b2:	d2 c0       	rjmp	.+420    	; 0x1a58 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    18b4:	80 91 e9 03 	lds	r24, 0x03E9
    18b8:	90 91 ea 03 	lds	r25, 0x03EA
    18bc:	b9 01       	movw	r22, r18
    18be:	68 1b       	sub	r22, r24
    18c0:	79 0b       	sbc	r23, r25
    18c2:	cb 01       	movw	r24, r22
    18c4:	70 93 62 05 	sts	0x0562, r23
    18c8:	60 93 61 05 	sts	0x0561, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    18cc:	20 91 f9 03 	lds	r18, 0x03F9
    18d0:	30 91 fa 03 	lds	r19, 0x03FA
    18d4:	28 0f       	add	r18, r24
    18d6:	39 1f       	adc	r19, r25
    18d8:	30 93 fa 03 	sts	0x03FA, r19
    18dc:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    18e0:	76 e0       	ldi	r23, 0x06	; 6
    18e2:	21 34       	cpi	r18, 0x41	; 65
    18e4:	37 07       	cpc	r19, r23
    18e6:	0c f4       	brge	.+2      	; 0x18ea <start_vertical_speed_control_right+0x9c>
    18e8:	84 c0       	rjmp	.+264    	; 0x19f2 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    18ea:	20 e4       	ldi	r18, 0x40	; 64
    18ec:	36 e0       	ldi	r19, 0x06	; 6
    18ee:	30 93 fa 03 	sts	0x03FA, r19
    18f2:	20 93 f9 03 	sts	0x03F9, r18
    18f6:	60 ec       	ldi	r22, 0xC0	; 192
    18f8:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    18fa:	9c 01       	movw	r18, r24
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	dc 01       	movw	r26, r24
    1902:	aa 0f       	add	r26, r26
    1904:	bb 1f       	adc	r27, r27
    1906:	aa 0f       	add	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	aa 0f       	add	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	2a 0f       	add	r18, r26
    1910:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1912:	00 81       	ld	r16, Z
    1914:	11 81       	ldd	r17, Z+1	; 0x01
    1916:	c0 91 05 02 	lds	r28, 0x0205
    191a:	d0 91 06 02 	lds	r29, 0x0206
    191e:	0c 9f       	mul	r16, r28
    1920:	d0 01       	movw	r26, r0
    1922:	0d 9f       	mul	r16, r29
    1924:	b0 0d       	add	r27, r0
    1926:	1c 9f       	mul	r17, r28
    1928:	b0 0d       	add	r27, r0
    192a:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    192c:	2a 0f       	add	r18, r26
    192e:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1930:	48 1b       	sub	r20, r24
    1932:	59 0b       	sbc	r21, r25
    1934:	44 0f       	add	r20, r20
    1936:	55 1f       	adc	r21, r21
    1938:	24 0f       	add	r18, r20
    193a:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    193c:	26 0f       	add	r18, r22
    193e:	37 1f       	adc	r19, r23
    1940:	30 93 f4 03 	sts	0x03F4, r19
    1944:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1948:	37 fd       	sbrc	r19, 7
    194a:	69 c0       	rjmp	.+210    	; 0x1a1e <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    194c:	12 16       	cp	r1, r18
    194e:	13 06       	cpc	r1, r19
    1950:	0c f0       	brlt	.+2      	; 0x1954 <start_vertical_speed_control_right+0x106>
    1952:	6f c0       	rjmp	.+222    	; 0x1a32 <start_vertical_speed_control_right+0x1e4>
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	97 fd       	sbrc	r25, 7
    195a:	89 c0       	rjmp	.+274    	; 0x1a6e <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    195c:	7d e5       	ldi	r23, 0x5D	; 93
    195e:	21 3c       	cpi	r18, 0xC1	; 193
    1960:	37 07       	cpc	r19, r23
    1962:	0c f4       	brge	.+2      	; 0x1966 <start_vertical_speed_control_right+0x118>
    1964:	66 c0       	rjmp	.+204    	; 0x1a32 <start_vertical_speed_control_right+0x1e4>
    1966:	80 ec       	ldi	r24, 0xC0	; 192
    1968:	9d e5       	ldi	r25, 0x5D	; 93
    196a:	90 93 f4 03 	sts	0x03F4, r25
    196e:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1984:	24 3b       	cpi	r18, 0xB4	; 180
    1986:	31 05       	cpc	r19, r1
    1988:	94 f4       	brge	.+36     	; 0x19ae <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    198a:	2a 35       	cpi	r18, 0x5A	; 90
    198c:	31 05       	cpc	r19, r1
    198e:	7c f4       	brge	.+30     	; 0x19ae <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1990:	18 16       	cp	r1, r24
    1992:	19 06       	cpc	r1, r25
    1994:	0c f0       	brlt	.+2      	; 0x1998 <start_vertical_speed_control_right+0x14a>
    1996:	93 c0       	rjmp	.+294    	; 0x1abe <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1998:	35 95       	asr	r19
    199a:	27 95       	ror	r18
    199c:	35 95       	asr	r19
    199e:	27 95       	ror	r18
    19a0:	27 5e       	subi	r18, 0xE7	; 231
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	30 93 06 02 	sts	0x0206, r19
    19a8:	20 93 05 02 	sts	0x0205, r18
    19ac:	77 cf       	rjmp	.-274    	; 0x189c <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    19ae:	18 16       	cp	r1, r24
    19b0:	19 06       	cpc	r1, r25
    19b2:	94 f5       	brge	.+100    	; 0x1a18 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    19b4:	84 eb       	ldi	r24, 0xB4	; 180
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	82 1b       	sub	r24, r18
    19ba:	93 0b       	sbc	r25, r19
    19bc:	95 95       	asr	r25
    19be:	87 95       	ror	r24
    19c0:	95 95       	asr	r25
    19c2:	87 95       	ror	r24
    19c4:	49 96       	adiw	r24, 0x19	; 25
    19c6:	90 93 06 02 	sts	0x0206, r25
    19ca:	80 93 05 02 	sts	0x0205, r24
    19ce:	66 cf       	rjmp	.-308    	; 0x189c <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    19d0:	10 92 fa 03 	sts	0x03FA, r1
    19d4:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    19d8:	10 92 62 05 	sts	0x0562, r1
    19dc:	10 92 61 05 	sts	0x0561, r1
		delta_right_speed_prev = 0;
    19e0:	10 92 3b 05 	sts	0x053B, r1
    19e4:	10 92 3a 05 	sts	0x053A, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    19f2:	69 ef       	ldi	r22, 0xF9	; 249
    19f4:	20 3c       	cpi	r18, 0xC0	; 192
    19f6:	36 07       	cpc	r19, r22
    19f8:	4c f4       	brge	.+18     	; 0x1a0c <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    19fa:	20 ec       	ldi	r18, 0xC0	; 192
    19fc:	39 ef       	ldi	r19, 0xF9	; 249
    19fe:	30 93 fa 03 	sts	0x03FA, r19
    1a02:	20 93 f9 03 	sts	0x03F9, r18
    1a06:	60 e4       	ldi	r22, 0x40	; 64
    1a08:	7d ee       	ldi	r23, 0xED	; 237
    1a0a:	77 cf       	rjmp	.-274    	; 0x18fa <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	66 0f       	add	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	62 0f       	add	r22, r18
    1a14:	73 1f       	adc	r23, r19
    1a16:	71 cf       	rjmp	.-286    	; 0x18fa <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1a18:	84 eb       	ldi	r24, 0xB4	; 180
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	31 cf       	rjmp	.-414    	; 0x1880 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	97 fd       	sbrc	r25, 7
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1a26:	10 92 f4 03 	sts	0x03F4, r1
    1a2a:	10 92 f3 03 	sts	0x03F3, r1
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1a32:	82 ea       	ldi	r24, 0xA2	; 162
    1a34:	20 34       	cpi	r18, 0x40	; 64
    1a36:	38 07       	cpc	r19, r24
    1a38:	04 f5       	brge	.+64     	; 0x1a7a <start_vertical_speed_control_right+0x22c>
    1a3a:	80 e4       	ldi	r24, 0x40	; 64
    1a3c:	92 ea       	ldi	r25, 0xA2	; 162
    1a3e:	90 93 f4 03 	sts	0x03F4, r25
    1a42:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	9e ef       	ldi	r25, 0xFE	; 254
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24

}
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1a58:	80 91 e9 03 	lds	r24, 0x03E9
    1a5c:	90 91 ea 03 	lds	r25, 0x03EA
    1a60:	82 0f       	add	r24, r18
    1a62:	93 1f       	adc	r25, r19
    1a64:	90 93 62 05 	sts	0x0562, r25
    1a68:	80 93 61 05 	sts	0x0561, r24
    1a6c:	2f cf       	rjmp	.-418    	; 0x18cc <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1a6e:	10 92 f4 03 	sts	0x03F4, r1
    1a72:	10 92 f3 03 	sts	0x03F3, r1
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1a7a:	35 95       	asr	r19
    1a7c:	27 95       	ror	r18
    1a7e:	35 95       	asr	r19
    1a80:	27 95       	ror	r18
    1a82:	35 95       	asr	r19
    1a84:	27 95       	ror	r18
    1a86:	35 95       	asr	r19
    1a88:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1a8a:	31 83       	std	Z+1, r19	; 0x01
    1a8c:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1a8e:	42 e0       	ldi	r20, 0x02	; 2
    1a90:	21 30       	cpi	r18, 0x01	; 1
    1a92:	34 07       	cpc	r19, r20
    1a94:	0c f0       	brlt	.+2      	; 0x1a98 <start_vertical_speed_control_right+0x24a>
    1a96:	6d cf       	rjmp	.-294    	; 0x1972 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1a98:	6e ef       	ldi	r22, 0xFE	; 254
    1a9a:	20 30       	cpi	r18, 0x00	; 0
    1a9c:	36 07       	cpc	r19, r22
    1a9e:	9c f2       	brlt	.-90     	; 0x1a46 <start_vertical_speed_control_right+0x1f8>
    1aa0:	6c cf       	rjmp	.-296    	; 0x197a <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1aa2:	88 e6       	ldi	r24, 0x68	; 104
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	82 1b       	sub	r24, r18
    1aa8:	93 0b       	sbc	r25, r19
    1aaa:	95 95       	asr	r25
    1aac:	87 95       	ror	r24
    1aae:	95 95       	asr	r25
    1ab0:	87 95       	ror	r24
    1ab2:	49 96       	adiw	r24, 0x19	; 25
    1ab4:	90 93 06 02 	sts	0x0206, r25
    1ab8:	80 93 05 02 	sts	0x0205, r24
    1abc:	ef ce       	rjmp	.-546    	; 0x189c <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1abe:	35 95       	asr	r19
    1ac0:	27 95       	ror	r18
    1ac2:	35 95       	asr	r19
    1ac4:	27 95       	ror	r18
    1ac6:	89 e1       	ldi	r24, 0x19	; 25
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	82 1b       	sub	r24, r18
    1acc:	93 0b       	sbc	r25, r19
    1ace:	90 93 06 02 	sts	0x0206, r25
    1ad2:	80 93 05 02 	sts	0x0205, r24
    1ad6:	e2 ce       	rjmp	.-572    	; 0x189c <start_vertical_speed_control_right+0x4e>

00001ad8 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1ad8:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <start_horizontal_speed_control_right+0xc>
    1ae2:	7b c0       	rjmp	.+246    	; 0x1bda <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1ae4:	a0 91 61 05 	lds	r26, 0x0561
    1ae8:	b0 91 62 05 	lds	r27, 0x0562
    1aec:	b0 93 3b 05 	sts	0x053B, r27
    1af0:	a0 93 3a 05 	sts	0x053A, r26
	if(*pwm_right >= 0) {
    1af4:	20 81       	ld	r18, Z
    1af6:	31 81       	ldd	r19, Z+1	; 0x01
    1af8:	37 fd       	sbrc	r19, 7
    1afa:	89 c0       	rjmp	.+274    	; 0x1c0e <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1afc:	80 91 e9 03 	lds	r24, 0x03E9
    1b00:	90 91 ea 03 	lds	r25, 0x03EA
    1b04:	a9 01       	movw	r20, r18
    1b06:	48 1b       	sub	r20, r24
    1b08:	59 0b       	sbc	r21, r25
    1b0a:	ca 01       	movw	r24, r20
    1b0c:	50 93 62 05 	sts	0x0562, r21
    1b10:	40 93 61 05 	sts	0x0561, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1b14:	20 91 f9 03 	lds	r18, 0x03F9
    1b18:	30 91 fa 03 	lds	r19, 0x03FA
    1b1c:	28 0f       	add	r18, r24
    1b1e:	39 1f       	adc	r19, r25
    1b20:	30 93 fa 03 	sts	0x03FA, r19
    1b24:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1b28:	56 e0       	ldi	r21, 0x06	; 6
    1b2a:	21 34       	cpi	r18, 0x41	; 65
    1b2c:	35 07       	cpc	r19, r21
    1b2e:	0c f4       	brge	.+2      	; 0x1b32 <start_horizontal_speed_control_right+0x5a>
    1b30:	61 c0       	rjmp	.+194    	; 0x1bf4 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1b32:	20 e4       	ldi	r18, 0x40	; 64
    1b34:	36 e0       	ldi	r19, 0x06	; 6
    1b36:	30 93 fa 03 	sts	0x03FA, r19
    1b3a:	20 93 f9 03 	sts	0x03F9, r18
    1b3e:	60 e8       	ldi	r22, 0x80	; 128
    1b40:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1b42:	9c 01       	movw	r18, r24
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	28 0f       	add	r18, r24
    1b4a:	39 1f       	adc	r19, r25
    1b4c:	22 0f       	add	r18, r18
    1b4e:	33 1f       	adc	r19, r19
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	28 0f       	add	r18, r24
    1b5a:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1b5c:	40 81       	ld	r20, Z
    1b5e:	51 81       	ldd	r21, Z+1	; 0x01
    1b60:	44 0f       	add	r20, r20
    1b62:	55 1f       	adc	r21, r21
    1b64:	44 0f       	add	r20, r20
    1b66:	55 1f       	adc	r21, r21
    1b68:	44 0f       	add	r20, r20
    1b6a:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1b6c:	24 0f       	add	r18, r20
    1b6e:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1b70:	ad 01       	movw	r20, r26
    1b72:	48 1b       	sub	r20, r24
    1b74:	59 0b       	sbc	r21, r25
    1b76:	ca 01       	movw	r24, r20
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	84 0f       	add	r24, r20
    1b7e:	95 1f       	adc	r25, r21
    1b80:	28 0f       	add	r18, r24
    1b82:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1b84:	26 0f       	add	r18, r22
    1b86:	37 1f       	adc	r19, r23
    1b88:	30 93 f4 03 	sts	0x03F4, r19
    1b8c:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1b90:	37 fd       	sbrc	r19, 7
    1b92:	4c c0       	rjmp	.+152    	; 0x1c2c <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1b94:	12 16       	cp	r1, r18
    1b96:	13 06       	cpc	r1, r19
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <start_horizontal_speed_control_right+0xc4>
    1b9a:	52 c0       	rjmp	.+164    	; 0x1c40 <start_horizontal_speed_control_right+0x168>
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	97 fd       	sbrc	r25, 7
    1ba2:	67 c0       	rjmp	.+206    	; 0x1c72 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1ba4:	5d e5       	ldi	r21, 0x5D	; 93
    1ba6:	21 3c       	cpi	r18, 0xC1	; 193
    1ba8:	35 07       	cpc	r19, r21
    1baa:	0c f4       	brge	.+2      	; 0x1bae <start_horizontal_speed_control_right+0xd6>
    1bac:	49 c0       	rjmp	.+146    	; 0x1c40 <start_horizontal_speed_control_right+0x168>
    1bae:	80 ec       	ldi	r24, 0xC0	; 192
    1bb0:	9d e5       	ldi	r25, 0x5D	; 93
    1bb2:	90 93 f4 03 	sts	0x03F4, r25
    1bb6:	80 93 f3 03 	sts	0x03F3, r24
    1bba:	2c ed       	ldi	r18, 0xDC	; 220
    1bbc:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1bbe:	22 5e       	subi	r18, 0xE2	; 226
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	31 83       	std	Z+1, r19	; 0x01
    1bc4:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1bc6:	42 e0       	ldi	r20, 0x02	; 2
    1bc8:	21 30       	cpi	r18, 0x01	; 1
    1bca:	34 07       	cpc	r19, r20
    1bcc:	0c f4       	brge	.+2      	; 0x1bd0 <start_horizontal_speed_control_right+0xf8>
    1bce:	48 c0       	rjmp	.+144    	; 0x1c60 <start_horizontal_speed_control_right+0x188>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1bda:	10 92 fa 03 	sts	0x03FA, r1
    1bde:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1be2:	10 92 62 05 	sts	0x0562, r1
    1be6:	10 92 61 05 	sts	0x0561, r1
		delta_right_speed_prev = 0;
    1bea:	10 92 3b 05 	sts	0x053B, r1
    1bee:	10 92 3a 05 	sts	0x053A, r1
		return;
    1bf2:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1bf4:	49 ef       	ldi	r20, 0xF9	; 249
    1bf6:	20 3c       	cpi	r18, 0xC0	; 192
    1bf8:	34 07       	cpc	r19, r20
    1bfa:	a4 f4       	brge	.+40     	; 0x1c24 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1bfc:	20 ec       	ldi	r18, 0xC0	; 192
    1bfe:	39 ef       	ldi	r19, 0xF9	; 249
    1c00:	30 93 fa 03 	sts	0x03FA, r19
    1c04:	20 93 f9 03 	sts	0x03F9, r18
    1c08:	60 e8       	ldi	r22, 0x80	; 128
    1c0a:	73 ef       	ldi	r23, 0xF3	; 243
    1c0c:	9a cf       	rjmp	.-204    	; 0x1b42 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1c0e:	80 91 e9 03 	lds	r24, 0x03E9
    1c12:	90 91 ea 03 	lds	r25, 0x03EA
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	90 93 62 05 	sts	0x0562, r25
    1c1e:	80 93 61 05 	sts	0x0561, r24
    1c22:	78 cf       	rjmp	.-272    	; 0x1b14 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1c24:	b9 01       	movw	r22, r18
    1c26:	66 0f       	add	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	8b cf       	rjmp	.-234    	; 0x1b42 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	97 fd       	sbrc	r25, 7
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1c34:	10 92 f4 03 	sts	0x03F4, r1
    1c38:	10 92 f3 03 	sts	0x03F3, r1
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c40:	82 ea       	ldi	r24, 0xA2	; 162
    1c42:	20 34       	cpi	r18, 0x40	; 64
    1c44:	38 07       	cpc	r19, r24
    1c46:	dc f4       	brge	.+54     	; 0x1c7e <start_horizontal_speed_control_right+0x1a6>
    1c48:	80 e4       	ldi	r24, 0x40	; 64
    1c4a:	92 ea       	ldi	r25, 0xA2	; 162
    1c4c:	90 93 f4 03 	sts	0x03F4, r25
    1c50:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1c54:	24 e2       	ldi	r18, 0x24	; 36
    1c56:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1c58:	2e 51       	subi	r18, 0x1E	; 30
    1c5a:	30 40       	sbci	r19, 0x00	; 0
    1c5c:	31 83       	std	Z+1, r19	; 0x01
    1c5e:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1c60:	5e ef       	ldi	r21, 0xFE	; 254
    1c62:	20 30       	cpi	r18, 0x00	; 0
    1c64:	35 07       	cpc	r19, r21
    1c66:	24 f4       	brge	.+8      	; 0x1c70 <start_horizontal_speed_control_right+0x198>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	9e ef       	ldi	r25, 0xFE	; 254
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1c72:	10 92 f4 03 	sts	0x03F4, r1
    1c76:	10 92 f3 03 	sts	0x03F3, r1
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c7e:	35 95       	asr	r19
    1c80:	27 95       	ror	r18
    1c82:	35 95       	asr	r19
    1c84:	27 95       	ror	r18
    1c86:	35 95       	asr	r19
    1c88:	27 95       	ror	r18
    1c8a:	35 95       	asr	r19
    1c8c:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1c8e:	31 83       	std	Z+1, r19	; 0x01
    1c90:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1c92:	12 16       	cp	r1, r18
    1c94:	13 06       	cpc	r1, r19
    1c96:	0c f4       	brge	.+2      	; 0x1c9a <start_horizontal_speed_control_right+0x1c2>
    1c98:	92 cf       	rjmp	.-220    	; 0x1bbe <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1c9a:	21 15       	cp	r18, r1
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	e1 f6       	brne	.-72     	; 0x1c58 <start_horizontal_speed_control_right+0x180>
    1ca0:	08 95       	ret

00001ca2 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1ca2:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	09 f4       	brne	.+2      	; 0x1cae <start_horizontal_speed_control_left+0xc>
    1cac:	7b c0       	rjmp	.+246    	; 0x1da4 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1cae:	a0 91 38 05 	lds	r26, 0x0538
    1cb2:	b0 91 39 05 	lds	r27, 0x0539
    1cb6:	b0 93 53 05 	sts	0x0553, r27
    1cba:	a0 93 52 05 	sts	0x0552, r26
	if(*pwm_left >= 0) {
    1cbe:	20 81       	ld	r18, Z
    1cc0:	31 81       	ldd	r19, Z+1	; 0x01
    1cc2:	37 fd       	sbrc	r19, 7
    1cc4:	89 c0       	rjmp	.+274    	; 0x1dd8 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1cc6:	80 91 e7 03 	lds	r24, 0x03E7
    1cca:	90 91 e8 03 	lds	r25, 0x03E8
    1cce:	a9 01       	movw	r20, r18
    1cd0:	48 1b       	sub	r20, r24
    1cd2:	59 0b       	sbc	r21, r25
    1cd4:	ca 01       	movw	r24, r20
    1cd6:	50 93 39 05 	sts	0x0539, r21
    1cda:	40 93 38 05 	sts	0x0538, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1cde:	20 91 f7 03 	lds	r18, 0x03F7
    1ce2:	30 91 f8 03 	lds	r19, 0x03F8
    1ce6:	28 0f       	add	r18, r24
    1ce8:	39 1f       	adc	r19, r25
    1cea:	30 93 f8 03 	sts	0x03F8, r19
    1cee:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1cf2:	56 e0       	ldi	r21, 0x06	; 6
    1cf4:	21 34       	cpi	r18, 0x41	; 65
    1cf6:	35 07       	cpc	r19, r21
    1cf8:	0c f4       	brge	.+2      	; 0x1cfc <start_horizontal_speed_control_left+0x5a>
    1cfa:	61 c0       	rjmp	.+194    	; 0x1dbe <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1cfc:	20 e4       	ldi	r18, 0x40	; 64
    1cfe:	36 e0       	ldi	r19, 0x06	; 6
    1d00:	30 93 f8 03 	sts	0x03F8, r19
    1d04:	20 93 f7 03 	sts	0x03F7, r18
    1d08:	60 e8       	ldi	r22, 0x80	; 128
    1d0a:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	22 0f       	add	r18, r18
    1d10:	33 1f       	adc	r19, r19
    1d12:	28 0f       	add	r18, r24
    1d14:	39 1f       	adc	r19, r25
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	22 0f       	add	r18, r18
    1d20:	33 1f       	adc	r19, r19
    1d22:	28 0f       	add	r18, r24
    1d24:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1d26:	40 81       	ld	r20, Z
    1d28:	51 81       	ldd	r21, Z+1	; 0x01
    1d2a:	44 0f       	add	r20, r20
    1d2c:	55 1f       	adc	r21, r21
    1d2e:	44 0f       	add	r20, r20
    1d30:	55 1f       	adc	r21, r21
    1d32:	44 0f       	add	r20, r20
    1d34:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1d36:	24 0f       	add	r18, r20
    1d38:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1d3a:	ad 01       	movw	r20, r26
    1d3c:	48 1b       	sub	r20, r24
    1d3e:	59 0b       	sbc	r21, r25
    1d40:	ca 01       	movw	r24, r20
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	84 0f       	add	r24, r20
    1d48:	95 1f       	adc	r25, r21
    1d4a:	28 0f       	add	r18, r24
    1d4c:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1d4e:	26 0f       	add	r18, r22
    1d50:	37 1f       	adc	r19, r23
    1d52:	30 93 f6 03 	sts	0x03F6, r19
    1d56:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1d5a:	37 fd       	sbrc	r19, 7
    1d5c:	4c c0       	rjmp	.+152    	; 0x1df6 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1d5e:	12 16       	cp	r1, r18
    1d60:	13 06       	cpc	r1, r19
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <start_horizontal_speed_control_left+0xc4>
    1d64:	52 c0       	rjmp	.+164    	; 0x1e0a <start_horizontal_speed_control_left+0x168>
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	97 fd       	sbrc	r25, 7
    1d6c:	67 c0       	rjmp	.+206    	; 0x1e3c <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1d6e:	5d e5       	ldi	r21, 0x5D	; 93
    1d70:	21 3c       	cpi	r18, 0xC1	; 193
    1d72:	35 07       	cpc	r19, r21
    1d74:	0c f4       	brge	.+2      	; 0x1d78 <start_horizontal_speed_control_left+0xd6>
    1d76:	49 c0       	rjmp	.+146    	; 0x1e0a <start_horizontal_speed_control_left+0x168>
    1d78:	80 ec       	ldi	r24, 0xC0	; 192
    1d7a:	9d e5       	ldi	r25, 0x5D	; 93
    1d7c:	90 93 f6 03 	sts	0x03F6, r25
    1d80:	80 93 f5 03 	sts	0x03F5, r24
    1d84:	2c ed       	ldi	r18, 0xDC	; 220
    1d86:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1d88:	22 5e       	subi	r18, 0xE2	; 226
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	31 83       	std	Z+1, r19	; 0x01
    1d8e:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1d90:	42 e0       	ldi	r20, 0x02	; 2
    1d92:	21 30       	cpi	r18, 0x01	; 1
    1d94:	34 07       	cpc	r19, r20
    1d96:	0c f4       	brge	.+2      	; 0x1d9a <start_horizontal_speed_control_left+0xf8>
    1d98:	48 c0       	rjmp	.+144    	; 0x1e2a <start_horizontal_speed_control_left+0x188>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1da4:	10 92 f8 03 	sts	0x03F8, r1
    1da8:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1dac:	10 92 39 05 	sts	0x0539, r1
    1db0:	10 92 38 05 	sts	0x0538, r1
		delta_left_speed_prev = 0;
    1db4:	10 92 53 05 	sts	0x0553, r1
    1db8:	10 92 52 05 	sts	0x0552, r1
		return;
    1dbc:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1dbe:	49 ef       	ldi	r20, 0xF9	; 249
    1dc0:	20 3c       	cpi	r18, 0xC0	; 192
    1dc2:	34 07       	cpc	r19, r20
    1dc4:	a4 f4       	brge	.+40     	; 0x1dee <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1dc6:	20 ec       	ldi	r18, 0xC0	; 192
    1dc8:	39 ef       	ldi	r19, 0xF9	; 249
    1dca:	30 93 f8 03 	sts	0x03F8, r19
    1dce:	20 93 f7 03 	sts	0x03F7, r18
    1dd2:	60 e8       	ldi	r22, 0x80	; 128
    1dd4:	73 ef       	ldi	r23, 0xF3	; 243
    1dd6:	9a cf       	rjmp	.-204    	; 0x1d0c <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1dd8:	80 91 e7 03 	lds	r24, 0x03E7
    1ddc:	90 91 e8 03 	lds	r25, 0x03E8
    1de0:	82 0f       	add	r24, r18
    1de2:	93 1f       	adc	r25, r19
    1de4:	90 93 39 05 	sts	0x0539, r25
    1de8:	80 93 38 05 	sts	0x0538, r24
    1dec:	78 cf       	rjmp	.-272    	; 0x1cde <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1dee:	b9 01       	movw	r22, r18
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	8b cf       	rjmp	.-234    	; 0x1d0c <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	97 fd       	sbrc	r25, 7
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1dfe:	10 92 f6 03 	sts	0x03F6, r1
    1e02:	10 92 f5 03 	sts	0x03F5, r1
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1e0a:	82 ea       	ldi	r24, 0xA2	; 162
    1e0c:	20 34       	cpi	r18, 0x40	; 64
    1e0e:	38 07       	cpc	r19, r24
    1e10:	dc f4       	brge	.+54     	; 0x1e48 <start_horizontal_speed_control_left+0x1a6>
    1e12:	80 e4       	ldi	r24, 0x40	; 64
    1e14:	92 ea       	ldi	r25, 0xA2	; 162
    1e16:	90 93 f6 03 	sts	0x03F6, r25
    1e1a:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1e1e:	24 e2       	ldi	r18, 0x24	; 36
    1e20:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    1e22:	2e 51       	subi	r18, 0x1E	; 30
    1e24:	30 40       	sbci	r19, 0x00	; 0
    1e26:	31 83       	std	Z+1, r19	; 0x01
    1e28:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1e2a:	5e ef       	ldi	r21, 0xFE	; 254
    1e2c:	20 30       	cpi	r18, 0x00	; 0
    1e2e:	35 07       	cpc	r19, r21
    1e30:	24 f4       	brge	.+8      	; 0x1e3a <start_horizontal_speed_control_left+0x198>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	9e ef       	ldi	r25, 0xFE	; 254
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
    1e3a:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1e3c:	10 92 f6 03 	sts	0x03F6, r1
    1e40:	10 92 f5 03 	sts	0x03F5, r1
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1e48:	35 95       	asr	r19
    1e4a:	27 95       	ror	r18
    1e4c:	35 95       	asr	r19
    1e4e:	27 95       	ror	r18
    1e50:	35 95       	asr	r19
    1e52:	27 95       	ror	r18
    1e54:	35 95       	asr	r19
    1e56:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1e58:	31 83       	std	Z+1, r19	; 0x01
    1e5a:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    1e5c:	12 16       	cp	r1, r18
    1e5e:	13 06       	cpc	r1, r19
    1e60:	0c f4       	brge	.+2      	; 0x1e64 <start_horizontal_speed_control_left+0x1c2>
    1e62:	92 cf       	rjmp	.-220    	; 0x1d88 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    1e64:	21 15       	cp	r18, r1
    1e66:	31 05       	cpc	r19, r1
    1e68:	e1 f6       	brne	.-72     	; 0x1e22 <start_horizontal_speed_control_left+0x180>
    1e6a:	08 95       	ret

00001e6c <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1e6c:	85 b7       	in	r24, 0x35	; 53
    1e6e:	80 61       	ori	r24, 0x10	; 16
    1e70:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1e76:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1e78:	97 ef       	ldi	r25, 0xF7	; 247
    1e7a:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1e7c:	90 ee       	ldi	r25, 0xE0	; 224
    1e7e:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1e80:	90 ef       	ldi	r25, 0xF0	; 240
    1e82:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1e84:	90 eb       	ldi	r25, 0xB0	; 176
    1e86:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1e88:	9c ef       	ldi	r25, 0xFC	; 252
    1e8a:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1e90:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1e92:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1e94:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1e96:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1e98:	80 91 33 05 	lds	r24, 0x0533
    1e9c:	88 23       	and	r24, r24
    1e9e:	e1 f0       	breq	.+56     	; 0x1ed8 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	d1 f0       	breq	.+52     	; 0x1ed8 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	51 f1       	breq	.+84     	; 0x1efc <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1eae:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1eb2:	9f e0       	ldi	r25, 0x0F	; 15
    1eb4:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    1eb8:	88 23       	and	r24, r24
    1eba:	a9 f4       	brne	.+42     	; 0x1ee6 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    1ebc:	90 91 05 01 	lds	r25, 0x0105
    1ec0:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1ec4:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255
    1eca:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    1ece:	88 23       	and	r24, r24
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1ed2:	10 92 0b 01 	sts	0x010B, r1
    1ed6:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    1ed8:	14 ba       	out	0x14, r1	; 20
    1eda:	e6 cf       	rjmp	.-52     	; 0x1ea8 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	c9 f3       	breq	.-14     	; 0x1ed2 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	41 f0       	breq	.+16     	; 0x1ef4 <initPortsIO+0x88>
    1ee4:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	59 f7       	brne	.-42     	; 0x1ec4 <initPortsIO+0x58>
		PORTJ = 0x0F;
    1eee:	90 93 05 01 	sts	0x0105, r25
    1ef2:	e8 cf       	rjmp	.-48     	; 0x1ec4 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1ef4:	87 ef       	ldi	r24, 0xF7	; 247
    1ef6:	80 93 0b 01 	sts	0x010B, r24
    1efa:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1efc:	98 e0       	ldi	r25, 0x08	; 8
    1efe:	94 bb       	out	0x14, r25	; 20
    1f00:	d3 cf       	rjmp	.-90     	; 0x1ea8 <initPortsIO+0x3c>

00001f02 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    1f02:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1f06:	10 92 bc 00 	sts	0x00BC, r1
}
    1f0a:	08 95       	ret

00001f0c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1f0c:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1f0e:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1f10:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1f1a:	08 95       	ret

00001f1c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f1c:	94 ea       	ldi	r25, 0xA4	; 164
    1f1e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f22:	90 91 bc 00 	lds	r25, 0x00BC
    1f26:	97 ff       	sbrs	r25, 7
    1f28:	fc cf       	rjmp	.-8      	; 0x1f22 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1f2a:	90 91 b9 00 	lds	r25, 0x00B9
    1f2e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1f30:	98 30       	cpi	r25, 0x08	; 8
    1f32:	21 f0       	breq	.+8      	; 0x1f3c <i2c_start+0x20>
    1f34:	90 31       	cpi	r25, 0x10	; 16
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1f3c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f40:	84 e8       	ldi	r24, 0x84	; 132
    1f42:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1f46:	80 91 bc 00 	lds	r24, 0x00BC
    1f4a:	87 ff       	sbrs	r24, 7
    1f4c:	fc cf       	rjmp	.-8      	; 0x1f46 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1f4e:	90 91 b9 00 	lds	r25, 0x00B9
    1f52:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1f54:	98 31       	cpi	r25, 0x18	; 24
    1f56:	21 f0       	breq	.+8      	; 0x1f60 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 34       	cpi	r25, 0x40	; 64
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    1f5e:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1f60:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1f62:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	08 95       	ret

00001f68 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f68:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1f6a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f6c:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f6e:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1f72:	90 91 bc 00 	lds	r25, 0x00BC
    1f76:	97 ff       	sbrs	r25, 7
    1f78:	fc cf       	rjmp	.-8      	; 0x1f72 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1f7a:	90 91 b9 00 	lds	r25, 0x00B9
    1f7e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1f80:	98 30       	cpi	r25, 0x08	; 8
    1f82:	11 f0       	breq	.+4      	; 0x1f88 <i2c_start_wait+0x20>
    1f84:	90 31       	cpi	r25, 0x10	; 16
    1f86:	99 f7       	brne	.-26     	; 0x1f6e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1f88:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1f8c:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1f90:	90 91 bc 00 	lds	r25, 0x00BC
    1f94:	97 ff       	sbrs	r25, 7
    1f96:	fc cf       	rjmp	.-8      	; 0x1f90 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1f98:	90 91 b9 00 	lds	r25, 0x00B9
    1f9c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1f9e:	90 32       	cpi	r25, 0x20	; 32
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <i2c_start_wait+0x40>
    1fa2:	98 35       	cpi	r25, 0x58	; 88
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <i2c_start_wait+0x40>
    1fa6:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1fa8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1fac:	90 91 bc 00 	lds	r25, 0x00BC
    1fb0:	94 fd       	sbrc	r25, 4
    1fb2:	fc cf       	rjmp	.-8      	; 0x1fac <i2c_start_wait+0x44>
    1fb4:	dc cf       	rjmp	.-72     	; 0x1f6e <i2c_start_wait+0x6>

00001fb6 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1fb6:	94 ea       	ldi	r25, 0xA4	; 164
    1fb8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1fbc:	90 91 bc 00 	lds	r25, 0x00BC
    1fc0:	97 ff       	sbrs	r25, 7
    1fc2:	fc cf       	rjmp	.-8      	; 0x1fbc <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fc4:	90 91 b9 00 	lds	r25, 0x00B9
    1fc8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1fca:	98 30       	cpi	r25, 0x08	; 8
    1fcc:	21 f0       	breq	.+8      	; 0x1fd6 <i2c_rep_start+0x20>
    1fce:	90 31       	cpi	r25, 0x10	; 16
    1fd0:	11 f0       	breq	.+4      	; 0x1fd6 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1fd6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1fda:	84 e8       	ldi	r24, 0x84	; 132
    1fdc:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1fe0:	80 91 bc 00 	lds	r24, 0x00BC
    1fe4:	87 ff       	sbrs	r24, 7
    1fe6:	fc cf       	rjmp	.-8      	; 0x1fe0 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fe8:	90 91 b9 00 	lds	r25, 0x00B9
    1fec:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1fee:	98 31       	cpi	r25, 0x18	; 24
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 34       	cpi	r25, 0x40	; 64
    1ff6:	19 f0       	breq	.+6      	; 0x1ffe <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    1ff8:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1ffc:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	08 95       	ret

00002002 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2002:	84 e9       	ldi	r24, 0x94	; 148
    2004:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2008:	80 91 bc 00 	lds	r24, 0x00BC
    200c:	84 fd       	sbrc	r24, 4
    200e:	fc cf       	rjmp	.-8      	; 0x2008 <i2c_stop+0x6>

}/* i2c_stop */
    2010:	08 95       	ret

00002012 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2012:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2016:	84 e8       	ldi	r24, 0x84	; 132
    2018:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    201c:	80 91 bc 00 	lds	r24, 0x00BC
    2020:	87 ff       	sbrs	r24, 7
    2022:	fc cf       	rjmp	.-8      	; 0x201c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2024:	90 91 b9 00 	lds	r25, 0x00B9
    2028:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	98 32       	cpi	r25, 0x28	; 40
    202e:	09 f0       	breq	.+2      	; 0x2032 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2030:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2032:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2034:	08 95       	ret

00002036 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2036:	84 ec       	ldi	r24, 0xC4	; 196
    2038:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    203c:	80 91 bc 00 	lds	r24, 0x00BC
    2040:	87 ff       	sbrs	r24, 7
    2042:	fc cf       	rjmp	.-8      	; 0x203c <i2c_readAck+0x6>

    return TWDR;
    2044:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2048:	08 95       	ret

0000204a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    204a:	84 e8       	ldi	r24, 0x84	; 132
    204c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2050:	80 91 bc 00 	lds	r24, 0x00BC
    2054:	87 ff       	sbrs	r24, 7
    2056:	fc cf       	rjmp	.-8      	; 0x2050 <i2c_readNak+0x6>
	
    return TWDR;
    2058:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    205c:	08 95       	ret

0000205e <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    205e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2062:	80 e1       	ldi	r24, 0x10	; 16
    2064:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2068:	e0 ec       	ldi	r30, 0xC0	; 192
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	82 60       	ori	r24, 0x02	; 2
    2070:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    2072:	e1 ec       	ldi	r30, 0xC1	; 193
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	88 69       	ori	r24, 0x98	; 152
    207a:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    207c:	e2 ec       	ldi	r30, 0xC2	; 194
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	86 60       	ori	r24, 0x06	; 6
    2084:	80 83       	st	Z, r24



}
    2086:	08 95       	ret

00002088 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    2088:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    208c:	80 e1       	ldi	r24, 0x10	; 16
    208e:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    2092:	e8 ec       	ldi	r30, 0xC8	; 200
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	82 60       	ori	r24, 0x02	; 2
    209a:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    209c:	e9 ec       	ldi	r30, 0xC9	; 201
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	88 61       	ori	r24, 0x18	; 24
    20a4:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    20a6:	ea ec       	ldi	r30, 0xCA	; 202
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	86 60       	ori	r24, 0x06	; 6
    20ae:	80 83       	st	Z, r24

}
    20b0:	08 95       	ret

000020b2 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    20b2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    20b6:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    20ba:	10 92 c2 00 	sts	0x00C2, r1

}
    20be:	08 95       	ret

000020c0 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    20c0:	90 91 c0 00 	lds	r25, 0x00C0
    20c4:	95 ff       	sbrs	r25, 5
    20c6:	fc cf       	rjmp	.-8      	; 0x20c0 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    20c8:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    20cc:	66 23       	and	r22, r22
    20ce:	21 f0       	breq	.+8      	; 0x20d8 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    20d0:	80 91 c0 00 	lds	r24, 0x00C0
    20d4:	86 ff       	sbrs	r24, 6
    20d6:	fc cf       	rjmp	.-8      	; 0x20d0 <usart0Transmit+0x10>
    20d8:	08 95       	ret

000020da <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    20da:	90 91 c8 00 	lds	r25, 0x00C8
    20de:	95 ff       	sbrs	r25, 5
    20e0:	fc cf       	rjmp	.-8      	; 0x20da <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    20e2:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    20e6:	66 23       	and	r22, r22
    20e8:	21 f0       	breq	.+8      	; 0x20f2 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    20ea:	80 91 c8 00 	lds	r24, 0x00C8
    20ee:	86 ff       	sbrs	r24, 6
    20f0:	fc cf       	rjmp	.-8      	; 0x20ea <usart1Transmit+0x10>
    20f2:	08 95       	ret

000020f4 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    20f4:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    20f8:	80 95       	com	r24
	} else {
		return 1;
	}

}
    20fa:	88 1f       	adc	r24, r24
    20fc:	88 27       	eor	r24, r24
    20fe:	88 1f       	adc	r24, r24
    2100:	08 95       	ret

00002102 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    2102:	87 e9       	ldi	r24, 0x97	; 151
    2104:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2106:	20 91 c0 00 	lds	r18, 0x00C0
    210a:	27 fd       	sbrc	r18, 7
    210c:	07 c0       	rjmp	.+14     	; 0x211c <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    210e:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    2110:	d1 f7       	brne	.-12     	; 0x2106 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 07 04 	sts	0x0407, r24
			return 0;				// timeout
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    211c:	80 91 c6 00 	lds	r24, 0x00C6

}
    2120:	08 95       	ret

00002122 <__vector_25>:

// The following usart0 rx isr has to be used with aseba.
ISR(USART0_RX_vect) {
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	0b b6       	in	r0, 0x3b	; 59
    212c:	0f 92       	push	r0
    212e:	11 24       	eor	r1, r1
    2130:	2f 93       	push	r18
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	ef 93       	push	r30
    2138:	ff 93       	push	r31
	byteCount++;
    213a:	80 91 08 04 	lds	r24, 0x0408
    213e:	90 91 09 04 	lds	r25, 0x0409
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	90 93 09 04 	sts	0x0409, r25
    2148:	80 93 08 04 	sts	0x0408, r24
	if(byteCount <= UART_BUFF_SIZE) {
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	92 07       	cpc	r25, r18
    2152:	60 f4       	brcc	.+24     	; 0x216c <__vector_25+0x4a>
		uartBuff[nextByteIndex] = UDR0;
    2154:	80 91 0a 05 	lds	r24, 0x050A
    2158:	90 91 c6 00 	lds	r25, 0x00C6
    215c:	e8 2f       	mov	r30, r24
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	e6 5f       	subi	r30, 0xF6	; 246
    2162:	fb 4f       	sbci	r31, 0xFB	; 251
    2164:	90 83       	st	Z, r25
		nextByteIndex++;
    2166:	8f 5f       	subi	r24, 0xFF	; 255
    2168:	80 93 0a 05 	sts	0x050A, r24
		if(nextByteIndex==UART_BUFF_SIZE) {
			nextByteIndex=0;
		}
	}
}
    216c:	ff 91       	pop	r31
    216e:	ef 91       	pop	r30
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	2f 91       	pop	r18
    2176:	0f 90       	pop	r0
    2178:	0b be       	out	0x3b, r0	; 59
    217a:	0f 90       	pop	r0
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	0f 90       	pop	r0
    2180:	1f 90       	pop	r1
    2182:	18 95       	reti

00002184 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2184:	86 b1       	in	r24, 0x06	; 6
    2186:	66 b1       	in	r22, 0x06	; 6
    2188:	26 b1       	in	r18, 0x06	; 6
    218a:	46 b1       	in	r20, 0x06	; 6
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	28 70       	andi	r18, 0x08	; 8
    2190:	30 70       	andi	r19, 0x00	; 0
    2192:	35 95       	asr	r19
    2194:	27 95       	ror	r18
    2196:	35 95       	asr	r19
    2198:	27 95       	ror	r18
    219a:	35 95       	asr	r19
    219c:	27 95       	ror	r18
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	64 70       	andi	r22, 0x04	; 4
    21a6:	70 70       	andi	r23, 0x00	; 0
    21a8:	75 95       	asr	r23
    21aa:	67 95       	ror	r22
    21ac:	75 95       	asr	r23
    21ae:	67 95       	ror	r22
    21b0:	26 0f       	add	r18, r22
    21b2:	37 1f       	adc	r19, r23
    21b4:	22 0f       	add	r18, r18
    21b6:	33 1f       	adc	r19, r19
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	42 70       	andi	r20, 0x02	; 2
    21bc:	50 70       	andi	r21, 0x00	; 0
    21be:	55 95       	asr	r21
    21c0:	47 95       	ror	r20
    21c2:	24 0f       	add	r18, r20
    21c4:	35 1f       	adc	r19, r21
    21c6:	22 0f       	add	r18, r18
    21c8:	81 70       	andi	r24, 0x01	; 1
}
    21ca:	82 0f       	add	r24, r18
    21cc:	08 95       	ret

000021ce <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    21ce:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    21d0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    21d2:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    21d4:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    21d8:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    21dc:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    21e0:	8e ef       	ldi	r24, 0xFE	; 254
    21e2:	9f e0       	ldi	r25, 0x0F	; 15
    21e4:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <__eerd_word_m2560>
    21e8:	90 93 04 04 	sts	0x0404, r25
    21ec:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    21f0:	9c 01       	movw	r18, r24
    21f2:	21 58       	subi	r18, 0x81	; 129
    21f4:	3c 40       	sbci	r19, 0x0C	; 12
    21f6:	23 30       	cpi	r18, 0x03	; 3
    21f8:	31 05       	cpc	r19, r1
    21fa:	b0 f4       	brcc	.+44     	; 0x2228 <__stack+0x29>
		hardwareRevision = HW_REV_3_0;
    21fc:	10 92 33 05 	sts	0x0533, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2200:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <initPortsIO>
	initAdc();
    2204:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <initAdc>
	initMotors();
    2208:	0e 94 b6 14 	call	0x296c	; 0x296c <initMotors>
	initRGBleds();
    220c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <initRGBleds>
	initSPI();
    2210:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <initSPI>
	mirf_init();
    2214:	0e 94 aa 02 	call	0x554	; 0x554 <mirf_init>
	initUsart0();
    2218:	0e 94 2f 10 	call	0x205e	; 0x205e <initUsart0>
	initAccelerometer();
    221c:	0e 94 b8 1b 	call	0x3770	; 0x3770 <initAccelerometer>
	init_ir_remote_control();
    2220:	0e 94 56 07 	call	0xeac	; 0xeac <init_ir_remote_control>

	sei();			// enable global interrupts
    2224:	78 94       	sei

	
}
    2226:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2228:	2c e0       	ldi	r18, 0x0C	; 12
    222a:	80 38       	cpi	r24, 0x80	; 128
    222c:	92 07       	cpc	r25, r18
    222e:	21 f4       	brne	.+8      	; 0x2238 <__stack+0x39>
		hardwareRevision = HW_REV_3_0_1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 33 05 	sts	0x0533, r24
    2236:	e4 cf       	rjmp	.-56     	; 0x2200 <__stack+0x1>
	}

	if(rfAddress > 3203) {
    2238:	2c e0       	ldi	r18, 0x0C	; 12
    223a:	84 38       	cpi	r24, 0x84	; 132
    223c:	92 07       	cpc	r25, r18
    223e:	00 f3       	brcs	.-64     	; 0x2200 <__stack+0x1>
		hardwareRevision = HW_REV_3_1;
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	80 93 33 05 	sts	0x0533, r24
    2246:	dc cf       	rjmp	.-72     	; 0x2200 <__stack+0x1>

00002248 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2248:	1f 92       	push	r1
    224a:	0f 92       	push	r0
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	0f 92       	push	r0
    2250:	11 24       	eor	r1, r1

}
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <sleep>:

void sleep(unsigned char seconds) {
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2260:	9e e1       	ldi	r25, 0x1E	; 30
    2262:	89 9f       	mul	r24, r25
    2264:	e0 01       	movw	r28, r0
    2266:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2268:	80 91 68 00 	lds	r24, 0x0068
    226c:	8d 7f       	andi	r24, 0xFD	; 253
    226e:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2272:	80 91 6c 00 	lds	r24, 0x006C
    2276:	8f 77       	andi	r24, 0x7F	; 127
    2278:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    227c:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    227e:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2282:	80 91 7a 00 	lds	r24, 0x007A
    2286:	80 61       	ori	r24, 0x10	; 16
    2288:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    228c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2290:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2294:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2298:	88 b3       	in	r24, 0x18	; 24
    229a:	87 60       	ori	r24, 0x07	; 7
    229c:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    229e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    22a2:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    22a6:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    22aa:	89 b3       	in	r24, 0x19	; 25
    22ac:	87 60       	ori	r24, 0x07	; 7
    22ae:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    22b0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    22b4:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    22b8:	0e 94 59 10 	call	0x20b2	; 0x20b2 <closeUsart>
	closeSPI();
    22bc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <closeSPI>
	i2c_close();
    22c0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <i2c_close>

	// set port pins
	initPortsIO();
    22c4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    22c8:	83 b7       	in	r24, 0x33	; 51
    22ca:	8f 60       	ori	r24, 0x0F	; 15
    22cc:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    22d4:	80 91 b0 00 	lds	r24, 0x00B0
    22d8:	8d 7f       	andi	r24, 0xFD	; 253
    22da:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    22de:	80 91 b1 00 	lds	r24, 0x00B1
    22e2:	87 60       	ori	r24, 0x07	; 7
    22e4:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    22e8:	20 97       	sbiw	r28, 0x00	; 0
    22ea:	19 f0       	breq	.+6      	; 0x22f2 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    22ec:	88 95       	sleep
		pause--;
    22ee:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    22f0:	e9 f7       	brne	.-6      	; 0x22ec <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    22f2:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    22f4:	80 91 b1 00 	lds	r24, 0x00B1
    22f8:	88 7f       	andi	r24, 0xF8	; 248
    22fa:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    22fe:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2302:	80 91 b0 00 	lds	r24, 0x00B0
    2306:	82 60       	ori	r24, 0x02	; 2
    2308:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2312:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2316:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    231a:	10 92 ec 03 	sts	0x03EC, r1
    231e:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    2322:	10 92 ee 03 	sts	0x03EE, r1
    2326:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    232a:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    232c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    232e:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2330:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2334:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2338:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    233c:	8e ef       	ldi	r24, 0xFE	; 254
    233e:	9f e0       	ldi	r25, 0x0F	; 15
    2340:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <__eerd_word_m2560>
    2344:	90 93 04 04 	sts	0x0404, r25
    2348:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    234c:	9c 01       	movw	r18, r24
    234e:	21 58       	subi	r18, 0x81	; 129
    2350:	3c 40       	sbci	r19, 0x0C	; 12
    2352:	23 30       	cpi	r18, 0x03	; 3
    2354:	31 05       	cpc	r19, r1
    2356:	c0 f4       	brcc	.+48     	; 0x2388 <sleep+0x12c>
		hardwareRevision = HW_REV_3_0;
    2358:	10 92 33 05 	sts	0x0533, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    235c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <initPortsIO>
	initAdc();
    2360:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <initAdc>
	initMotors();
    2364:	0e 94 b6 14 	call	0x296c	; 0x296c <initMotors>
	initRGBleds();
    2368:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <initRGBleds>
	initSPI();
    236c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <initSPI>
	mirf_init();
    2370:	0e 94 aa 02 	call	0x554	; 0x554 <mirf_init>
	initUsart0();
    2374:	0e 94 2f 10 	call	0x205e	; 0x205e <initUsart0>
	initAccelerometer();
    2378:	0e 94 b8 1b 	call	0x3770	; 0x3770 <initAccelerometer>
	init_ir_remote_control();
    237c:	0e 94 56 07 	call	0xeac	; 0xeac <init_ir_remote_control>

	sei();			// enable global interrupts
    2380:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2388:	2c e0       	ldi	r18, 0x0C	; 12
    238a:	80 38       	cpi	r24, 0x80	; 128
    238c:	92 07       	cpc	r25, r18
    238e:	21 f4       	brne	.+8      	; 0x2398 <sleep+0x13c>
		hardwareRevision = HW_REV_3_0_1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	80 93 33 05 	sts	0x0533, r24
    2396:	e2 cf       	rjmp	.-60     	; 0x235c <sleep+0x100>
	}

	if(rfAddress > 3203) {
    2398:	2c e0       	ldi	r18, 0x0C	; 12
    239a:	84 38       	cpi	r24, 0x84	; 132
    239c:	92 07       	cpc	r25, r18
    239e:	f0 f2       	brcs	.-68     	; 0x235c <sleep+0x100>
		hardwareRevision = HW_REV_3_1;
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	80 93 33 05 	sts	0x0533, r24
    23a6:	da cf       	rjmp	.-76     	; 0x235c <sleep+0x100>

000023a8 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    23a8:	60 91 2c 05 	lds	r22, 0x052C
    23ac:	70 91 2d 05 	lds	r23, 0x052D
	return clockTick;
}
    23b0:	80 91 2e 05 	lds	r24, 0x052E
    23b4:	90 91 2f 05 	lds	r25, 0x052F
    23b8:	08 95       	ret

000023ba <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	80 93 c5 03 	sts	0x03C5, r24
}
    23c0:	08 95       	ret

000023c2 <initAdc>:

#include "adc.h"


void initAdc(void) {
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    23c6:	ea e7       	ldi	r30, 0x7A	; 122
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	10 82       	st	Z, r1
	ADCSRB = 0;
    23cc:	ab e7       	ldi	r26, 0x7B	; 123
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	1c 92       	st	X, r1
	ADMUX = 0;
    23d2:	cc e7       	ldi	r28, 0x7C	; 124
    23d4:	d0 e0       	ldi	r29, 0x00	; 0
    23d6:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    23d8:	80 81       	ld	r24, Z
    23da:	86 60       	ori	r24, 0x06	; 6
    23dc:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    23de:	88 81       	ld	r24, Y
    23e0:	80 64       	ori	r24, 0x40	; 64
    23e2:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    23e4:	80 81       	ld	r24, Z
    23e6:	80 62       	ori	r24, 0x20	; 32
    23e8:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    23ea:	8c 91       	ld	r24, X
    23ec:	88 7f       	andi	r24, 0xF8	; 248
    23ee:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    23f0:	80 81       	ld	r24, Z
    23f2:	88 60       	ori	r24, 0x08	; 8
    23f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    23f6:	80 81       	ld	r24, Z
    23f8:	80 68       	ori	r24, 0x80	; 128
    23fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    23fc:	80 81       	ld	r24, Z
    23fe:	80 64       	ori	r24, 0x40	; 64
    2400:	80 83       	st	Z, r24

}
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <__vector_29>:

ISR(ADC_vect) {
    2408:	1f 92       	push	r1
    240a:	0f 92       	push	r0
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	0f 92       	push	r0
    2410:	0b b6       	in	r0, 0x3b	; 59
    2412:	0f 92       	push	r0
    2414:	11 24       	eor	r1, r1
    2416:	2f 93       	push	r18
    2418:	3f 93       	push	r19
    241a:	4f 93       	push	r20
    241c:	5f 93       	push	r21
    241e:	6f 93       	push	r22
    2420:	8f 93       	push	r24
    2422:	9f 93       	push	r25
    2424:	af 93       	push	r26
    2426:	bf 93       	push	r27
    2428:	ef 93       	push	r30
    242a:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    242c:	80 91 2c 05 	lds	r24, 0x052C
    2430:	90 91 2d 05 	lds	r25, 0x052D
    2434:	a0 91 2e 05 	lds	r26, 0x052E
    2438:	b0 91 2f 05 	lds	r27, 0x052F
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	a1 1d       	adc	r26, r1
    2440:	b1 1d       	adc	r27, r1
    2442:	80 93 2c 05 	sts	0x052C, r24
    2446:	90 93 2d 05 	sts	0x052D, r25
    244a:	a0 93 2e 05 	sts	0x052E, r26
    244e:	b0 93 2f 05 	sts	0x052F, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    2452:	20 91 78 00 	lds	r18, 0x0078
    2456:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2458:	40 91 79 00 	lds	r20, 0x0079
    245c:	94 2f       	mov	r25, r20
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	28 2b       	or	r18, r24
    2462:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2464:	80 91 bf 03 	lds	r24, 0x03BF
    2468:	82 30       	cpi	r24, 0x02	; 2
    246a:	09 f4       	brne	.+2      	; 0x246e <__vector_29+0x66>
    246c:	ac c1       	rjmp	.+856    	; 0x27c6 <__vector_29+0x3be>
    246e:	83 30       	cpi	r24, 0x03	; 3
    2470:	08 f4       	brcc	.+2      	; 0x2474 <__vector_29+0x6c>
    2472:	45 c0       	rjmp	.+138    	; 0x24fe <__vector_29+0xf6>
    2474:	83 30       	cpi	r24, 0x03	; 3
    2476:	09 f4       	brne	.+2      	; 0x247a <__vector_29+0x72>
    2478:	c9 c1       	rjmp	.+914    	; 0x280c <__vector_29+0x404>
    247a:	84 30       	cpi	r24, 0x04	; 4
    247c:	09 f4       	brne	.+2      	; 0x2480 <__vector_29+0x78>
    247e:	68 c1       	rjmp	.+720    	; 0x2750 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2480:	80 91 c0 03 	lds	r24, 0x03C0
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	09 f4       	brne	.+2      	; 0x248a <__vector_29+0x82>
    2488:	4f c1       	rjmp	.+670    	; 0x2728 <__vector_29+0x320>
    248a:	83 30       	cpi	r24, 0x03	; 3
    248c:	08 f0       	brcs	.+2      	; 0x2490 <__vector_29+0x88>
    248e:	cd c0       	rjmp	.+410    	; 0x262a <__vector_29+0x222>
    2490:	88 23       	and	r24, r24
    2492:	09 f0       	breq	.+2      	; 0x2496 <__vector_29+0x8e>
    2494:	24 c1       	rjmp	.+584    	; 0x26de <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2496:	80 91 2a 03 	lds	r24, 0x032A
    249a:	86 95       	lsr	r24
    249c:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    24a0:	80 91 c1 03 	lds	r24, 0x03C1
    24a4:	88 23       	and	r24, r24
    24a6:	09 f0       	breq	.+2      	; 0x24aa <__vector_29+0xa2>
    24a8:	e1 c1       	rjmp	.+962    	; 0x286c <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    24b6:	90 91 29 03 	lds	r25, 0x0329
    24ba:	98 30       	cpi	r25, 0x08	; 8
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <__vector_29+0xb8>
    24be:	ed c0       	rjmp	.+474    	; 0x269a <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    24c0:	90 91 7b 00 	lds	r25, 0x007B
    24c4:	97 7f       	andi	r25, 0xF7	; 247
    24c6:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    24ca:	90 91 29 03 	lds	r25, 0x0329
    24ce:	90 5c       	subi	r25, 0xC0	; 192
    24d0:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	09 f4       	brne	.+2      	; 0x24da <__vector_29+0xd2>
    24d8:	ed c0       	rjmp	.+474    	; 0x26b4 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	bf 91       	pop	r27
    24e0:	af 91       	pop	r26
    24e2:	9f 91       	pop	r25
    24e4:	8f 91       	pop	r24
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	0f 90       	pop	r0
    24f2:	0b be       	out	0x3b, r0	; 59
    24f4:	0f 90       	pop	r0
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	0f 90       	pop	r0
    24fa:	1f 90       	pop	r1
    24fc:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    24fe:	88 23       	and	r24, r24
    2500:	09 f0       	breq	.+2      	; 0x2504 <__vector_29+0xfc>
    2502:	fe c0       	rjmp	.+508    	; 0x2700 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2504:	60 91 2a 03 	lds	r22, 0x032A
    2508:	6e 30       	cpi	r22, 0x0E	; 14
    250a:	09 f4       	brne	.+2      	; 0x250e <__vector_29+0x106>
    250c:	d0 c1       	rjmp	.+928    	; 0x28ae <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    250e:	46 2f       	mov	r20, r22
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	fa 01       	movw	r30, r20
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	e1 5d       	subi	r30, 0xD1	; 209
    251a:	fc 4f       	sbci	r31, 0xFC	; 252
    251c:	31 83       	std	Z+1, r19	; 0x01
    251e:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2520:	40 ff       	sbrs	r20, 0
    2522:	77 c0       	rjmp	.+238    	; 0x2612 <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2524:	fa 01       	movw	r30, r20
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	e3 5d       	subi	r30, 0xD3	; 211
    252c:	fc 4f       	sbci	r31, 0xFC	; 252
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	fa 01       	movw	r30, r20
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	e1 5d       	subi	r30, 0xD1	; 209
    253a:	fc 4f       	sbci	r31, 0xFC	; 252
    253c:	40 81       	ld	r20, Z
    253e:	51 81       	ldd	r21, Z+1	; 0x01
    2540:	26 2f       	mov	r18, r22
    2542:	26 95       	lsr	r18
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	84 1b       	sub	r24, r20
    2548:	95 0b       	sbc	r25, r21
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	f9 01       	movw	r30, r18
    2550:	e9 58       	subi	r30, 0x89	; 137
    2552:	fc 4f       	sbci	r31, 0xFC	; 252
    2554:	40 81       	ld	r20, Z
    2556:	51 81       	ldd	r21, Z+1	; 0x01
    2558:	84 1b       	sub	r24, r20
    255a:	95 0b       	sbc	r25, r21
    255c:	f9 01       	movw	r30, r18
    255e:	e1 5a       	subi	r30, 0xA1	; 161
    2560:	fc 4f       	sbci	r31, 0xFC	; 252
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    2566:	97 fd       	sbrc	r25, 7
    2568:	bd c1       	rjmp	.+890    	; 0x28e4 <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    256a:	44 e0       	ldi	r20, 0x04	; 4
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	94 07       	cpc	r25, r20
    2570:	24 f0       	brlt	.+8      	; 0x257a <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	94 e0       	ldi	r25, 0x04	; 4
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    257a:	60 31       	cpi	r22, 0x10	; 16
    257c:	48 f4       	brcc	.+18     	; 0x2590 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    257e:	8c 33       	cpi	r24, 0x3C	; 60
    2580:	91 05       	cpc	r25, r1
    2582:	0c f0       	brlt	.+2      	; 0x2586 <__vector_29+0x17e>
    2584:	b4 c1       	rjmp	.+872    	; 0x28ee <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2586:	29 53       	subi	r18, 0x39	; 57
    2588:	3c 4f       	sbci	r19, 0xFC	; 252
    258a:	f9 01       	movw	r30, r18
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2590:	80 91 35 05 	lds	r24, 0x0535
    2594:	88 23       	and	r24, r24
    2596:	09 f4       	brne	.+2      	; 0x259a <__vector_29+0x192>
    2598:	75 c1       	rjmp	.+746    	; 0x2884 <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    259a:	80 91 6f 03 	lds	r24, 0x036F
    259e:	90 91 70 03 	lds	r25, 0x0370
    25a2:	f1 e0       	ldi	r31, 0x01	; 1
    25a4:	84 3a       	cpi	r24, 0xA4	; 164
    25a6:	9f 07       	cpc	r25, r31
    25a8:	cc f0       	brlt	.+50     	; 0x25dc <__vector_29+0x1d4>
    25aa:	80 91 71 03 	lds	r24, 0x0371
    25ae:	90 91 72 03 	lds	r25, 0x0372
    25b2:	21 e0       	ldi	r18, 0x01	; 1
    25b4:	84 3a       	cpi	r24, 0xA4	; 164
    25b6:	92 07       	cpc	r25, r18
    25b8:	8c f0       	brlt	.+34     	; 0x25dc <__vector_29+0x1d4>
    25ba:	80 91 73 03 	lds	r24, 0x0373
    25be:	90 91 74 03 	lds	r25, 0x0374
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	84 3a       	cpi	r24, 0xA4	; 164
    25c6:	94 07       	cpc	r25, r20
    25c8:	4c f0       	brlt	.+18     	; 0x25dc <__vector_29+0x1d4>
    25ca:	80 91 75 03 	lds	r24, 0x0375
    25ce:	90 91 76 03 	lds	r25, 0x0376
    25d2:	e1 e0       	ldi	r30, 0x01	; 1
    25d4:	84 3a       	cpi	r24, 0xA4	; 164
    25d6:	9e 07       	cpc	r25, r30
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <__vector_29+0x1d4>
    25da:	54 c1       	rjmp	.+680    	; 0x2884 <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	80 93 36 05 	sts	0x0536, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    25e2:	10 92 ee 03 	sts	0x03EE, r1
    25e6:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    25ea:	10 92 a9 00 	sts	0x00A9, r1
    25ee:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    25f2:	10 92 ab 00 	sts	0x00AB, r1
    25f6:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    25fa:	10 92 ec 03 	sts	0x03EC, r1
    25fe:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    2602:	10 92 99 00 	sts	0x0099, r1
    2606:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    260a:	10 92 9b 00 	sts	0x009B, r1
    260e:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    2612:	6f 5f       	subi	r22, 0xFF	; 255
    2614:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2618:	68 31       	cpi	r22, 0x18	; 24
    261a:	08 f4       	brcc	.+2      	; 0x261e <__vector_29+0x216>
    261c:	31 cf       	rjmp	.-414    	; 0x2480 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    261e:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 c6 03 	sts	0x03C6, r24
    2628:	2b cf       	rjmp	.-426    	; 0x2480 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    262a:	83 30       	cpi	r24, 0x03	; 3
    262c:	09 f4       	brne	.+2      	; 0x2630 <__vector_29+0x228>
    262e:	b7 c0       	rjmp	.+366    	; 0x279e <__vector_29+0x396>
    2630:	84 30       	cpi	r24, 0x04	; 4
    2632:	09 f0       	breq	.+2      	; 0x2636 <__vector_29+0x22e>
    2634:	40 cf       	rjmp	.-384    	; 0x24b6 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    2636:	90 91 2c 03 	lds	r25, 0x032C
    263a:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    263e:	90 91 2d 03 	lds	r25, 0x032D
    2642:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    2646:	90 91 c2 03 	lds	r25, 0x03C2
    264a:	99 23       	and	r25, r25
    264c:	09 f0       	breq	.+2      	; 0x2650 <__vector_29+0x248>
    264e:	08 c1       	rjmp	.+528    	; 0x2860 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    2656:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    265a:	60 91 2a 03 	lds	r22, 0x032A
    265e:	6e 30       	cpi	r22, 0x0E	; 14
    2660:	09 f4       	brne	.+2      	; 0x2664 <__vector_29+0x25c>
    2662:	1f c1       	rjmp	.+574    	; 0x28a2 <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    2664:	86 2f       	mov	r24, r22
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	60 ff       	sbrs	r22, 0
    266a:	f1 c0       	rjmp	.+482    	; 0x284e <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    266c:	60 31       	cpi	r22, 0x10	; 16
    266e:	08 f4       	brcc	.+2      	; 0x2672 <__vector_29+0x26a>
    2670:	0c c1       	rjmp	.+536    	; 0x288a <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    2672:	20 91 33 05 	lds	r18, 0x0533
    2676:	22 23       	and	r18, r18
    2678:	09 f0       	breq	.+2      	; 0x267c <__vector_29+0x274>
    267a:	d5 c0       	rjmp	.+426    	; 0x2826 <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    267c:	40 97       	sbiw	r24, 0x10	; 16
    267e:	95 95       	asr	r25
    2680:	87 95       	ror	r24
    2682:	21 e0       	ldi	r18, 0x01	; 1
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	02 c0       	rjmp	.+4      	; 0x268c <__vector_29+0x284>
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	8a 95       	dec	r24
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <__vector_29+0x280>
    2690:	20 93 05 01 	sts	0x0105, r18
    2694:	80 91 c0 03 	lds	r24, 0x03C0
    2698:	0e cf       	rjmp	.-484    	; 0x24b6 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    269a:	90 91 7b 00 	lds	r25, 0x007B
    269e:	98 60       	ori	r25, 0x08	; 8
    26a0:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    26a4:	90 91 29 03 	lds	r25, 0x0329
    26a8:	98 5c       	subi	r25, 0xC8	; 200
    26aa:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <__vector_29+0x2ac>
    26b2:	13 cf       	rjmp	.-474    	; 0x24da <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    26b4:	20 91 33 05 	lds	r18, 0x0533
    26b8:	22 23       	and	r18, r18
    26ba:	51 f0       	breq	.+20     	; 0x26d0 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    26bc:	21 30       	cpi	r18, 0x01	; 1
    26be:	19 f0       	breq	.+6      	; 0x26c6 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    26c0:	22 30       	cpi	r18, 0x02	; 2
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <__vector_29+0x2be>
    26c4:	0a cf       	rjmp	.-492    	; 0x24da <__vector_29+0xd2>
			PORTJ = 0xFF;
    26c6:	8f ef       	ldi	r24, 0xFF	; 255
    26c8:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    26cc:	12 b8       	out	0x02, r1	; 2
    26ce:	05 cf       	rjmp	.-502    	; 0x24da <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    26d0:	80 91 05 01 	lds	r24, 0x0105
    26d4:	80 7f       	andi	r24, 0xF0	; 240
    26d6:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    26da:	12 b8       	out	0x02, r1	; 2
    26dc:	fe ce       	rjmp	.-516    	; 0x24da <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <__vector_29+0x2dc>
    26e2:	e9 ce       	rjmp	.-558    	; 0x24b6 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    26e4:	80 91 2b 03 	lds	r24, 0x032B
    26e8:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    26ec:	80 91 2e 03 	lds	r24, 0x032E
    26f0:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    26f4:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	80 93 c0 03 	sts	0x03C0, r24
			break;
    26fe:	db ce       	rjmp	.-586    	; 0x24b6 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	09 f0       	breq	.+2      	; 0x2706 <__vector_29+0x2fe>
    2704:	bd ce       	rjmp	.-646    	; 0x2480 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2706:	80 91 d9 03 	lds	r24, 0x03D9
    270a:	90 91 da 03 	lds	r25, 0x03DA
    270e:	82 0f       	add	r24, r18
    2710:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	90 93 da 03 	sts	0x03DA, r25
    271a:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    271e:	80 91 c0 03 	lds	r24, 0x03C0
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	09 f0       	breq	.+2      	; 0x2728 <__vector_29+0x320>
    2726:	b1 ce       	rjmp	.-670    	; 0x248a <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2728:	80 91 2c 03 	lds	r24, 0x032C
    272c:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    2730:	80 91 2d 03 	lds	r24, 0x032D
    2734:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2738:	80 91 c2 03 	lds	r24, 0x03C2
    273c:	88 23       	and	r24, r24
    273e:	09 f0       	breq	.+2      	; 0x2742 <__vector_29+0x33a>
    2740:	9b c0       	rjmp	.+310    	; 0x2878 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	80 93 c0 03 	sts	0x03C0, r24
			break;
    274e:	b3 ce       	rjmp	.-666    	; 0x24b6 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2750:	80 91 0a 02 	lds	r24, 0x020A
    2754:	88 23       	and	r24, r24
    2756:	09 f4       	brne	.+2      	; 0x275a <__vector_29+0x352>
    2758:	93 ce       	rjmp	.-730    	; 0x2480 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    275a:	90 91 00 01 	lds	r25, 0x0100
    275e:	93 fd       	sbrc	r25, 3
    2760:	8f ce       	rjmp	.-738    	; 0x2480 <__vector_29+0x78>
    2762:	90 91 00 01 	lds	r25, 0x0100
    2766:	94 fd       	sbrc	r25, 4
    2768:	8b ce       	rjmp	.-746    	; 0x2480 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    276a:	48 2f       	mov	r20, r24
    276c:	4f 5f       	subi	r20, 0xFF	; 255
    276e:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    2772:	45 30       	cpi	r20, 0x05	; 5
    2774:	08 f4       	brcc	.+2      	; 0x2778 <__vector_29+0x370>
    2776:	84 ce       	rjmp	.-760    	; 0x2480 <__vector_29+0x78>
					left_vel_sum += value;
    2778:	80 91 e3 03 	lds	r24, 0x03E3
    277c:	90 91 e4 03 	lds	r25, 0x03E4
    2780:	82 0f       	add	r24, r18
    2782:	93 1f       	adc	r25, r19
    2784:	90 93 e4 03 	sts	0x03E4, r25
    2788:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    278c:	48 30       	cpi	r20, 0x08	; 8
    278e:	09 f0       	breq	.+2      	; 0x2792 <__vector_29+0x38a>
    2790:	77 ce       	rjmp	.-786    	; 0x2480 <__vector_29+0x78>
						firstSampleLeft = 0;
    2792:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	80 93 07 02 	sts	0x0207, r24
    279c:	71 ce       	rjmp	.-798    	; 0x2480 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    279e:	80 91 2b 03 	lds	r24, 0x032B
    27a2:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    27a6:	80 91 2e 03 	lds	r24, 0x032E
    27aa:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    27ae:	80 91 c1 03 	lds	r24, 0x03C1
    27b2:	88 23       	and	r24, r24
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__vector_29+0x3b0>
    27b6:	4e c0       	rjmp	.+156    	; 0x2854 <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    27be:	84 e0       	ldi	r24, 0x04	; 4
    27c0:	80 93 c0 03 	sts	0x03C0, r24
			break;
    27c4:	78 ce       	rjmp	.-784    	; 0x24b6 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    27c6:	80 91 09 02 	lds	r24, 0x0209
    27ca:	88 23       	and	r24, r24
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <__vector_29+0x3c8>
    27ce:	58 ce       	rjmp	.-848    	; 0x2480 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    27d0:	63 99       	sbic	0x0c, 3	; 12
    27d2:	56 ce       	rjmp	.-852    	; 0x2480 <__vector_29+0x78>
    27d4:	64 99       	sbic	0x0c, 4	; 12
    27d6:	54 ce       	rjmp	.-856    	; 0x2480 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    27d8:	48 2f       	mov	r20, r24
    27da:	4f 5f       	subi	r20, 0xFF	; 255
    27dc:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    27e0:	45 30       	cpi	r20, 0x05	; 5
    27e2:	08 f4       	brcc	.+2      	; 0x27e6 <__vector_29+0x3de>
    27e4:	4d ce       	rjmp	.-870    	; 0x2480 <__vector_29+0x78>
					right_vel_sum += value;
    27e6:	80 91 e5 03 	lds	r24, 0x03E5
    27ea:	90 91 e6 03 	lds	r25, 0x03E6
    27ee:	82 0f       	add	r24, r18
    27f0:	93 1f       	adc	r25, r19
    27f2:	90 93 e6 03 	sts	0x03E6, r25
    27f6:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    27fa:	48 30       	cpi	r20, 0x08	; 8
    27fc:	09 f0       	breq	.+2      	; 0x2800 <__vector_29+0x3f8>
    27fe:	40 ce       	rjmp	.-896    	; 0x2480 <__vector_29+0x78>
						firstSampleRight = 0;
    2800:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 08 02 	sts	0x0208, r24
    280a:	3a ce       	rjmp	.-908    	; 0x2480 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    280c:	80 91 d7 03 	lds	r24, 0x03D7
    2810:	90 91 d8 03 	lds	r25, 0x03D8
    2814:	82 0f       	add	r24, r18
    2816:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2818:	96 95       	lsr	r25
    281a:	87 95       	ror	r24
    281c:	90 93 d8 03 	sts	0x03D8, r25
    2820:	80 93 d7 03 	sts	0x03D7, r24
			break;
    2824:	2d ce       	rjmp	.-934    	; 0x2480 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    2826:	21 30       	cpi	r18, 0x01	; 1
    2828:	11 f0       	breq	.+4      	; 0x282e <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    282a:	22 30       	cpi	r18, 0x02	; 2
    282c:	81 f4       	brne	.+32     	; 0x284e <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    282e:	40 91 05 01 	lds	r20, 0x0105
    2832:	40 97       	sbiw	r24, 0x10	; 16
    2834:	95 95       	asr	r25
    2836:	87 95       	ror	r24
    2838:	21 e0       	ldi	r18, 0x01	; 1
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <__vector_29+0x43a>
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	8a 95       	dec	r24
    2844:	e2 f7       	brpl	.-8      	; 0x283e <__vector_29+0x436>
    2846:	20 95       	com	r18
    2848:	24 23       	and	r18, r20
    284a:	20 93 05 01 	sts	0x0105, r18
    284e:	80 91 c0 03 	lds	r24, 0x03C0
    2852:	31 ce       	rjmp	.-926    	; 0x24b6 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	d1 f1       	breq	.+116    	; 0x28cc <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2858:	85 e0       	ldi	r24, 0x05	; 5
    285a:	80 93 bf 03 	sts	0x03BF, r24
    285e:	af cf       	rjmp	.-162    	; 0x27be <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2860:	91 30       	cpi	r25, 0x01	; 1
    2862:	09 f0       	breq	.+2      	; 0x2866 <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2864:	85 e0       	ldi	r24, 0x05	; 5
    2866:	80 93 bf 03 	sts	0x03BF, r24
    286a:	f5 ce       	rjmp	.-534    	; 0x2656 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    286c:	81 30       	cpi	r24, 0x01	; 1
    286e:	b1 f1       	breq	.+108    	; 0x28dc <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2870:	85 e0       	ldi	r24, 0x05	; 5
    2872:	80 93 bf 03 	sts	0x03BF, r24
    2876:	1c ce       	rjmp	.-968    	; 0x24b0 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	61 f1       	breq	.+88     	; 0x28d4 <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    287c:	85 e0       	ldi	r24, 0x05	; 5
    287e:	80 93 bf 03 	sts	0x03BF, r24
    2882:	62 cf       	rjmp	.-316    	; 0x2748 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2884:	10 92 36 05 	sts	0x0536, r1
    2888:	c4 ce       	rjmp	.-632    	; 0x2612 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    288a:	66 95       	lsr	r22
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <__vector_29+0x48e>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	6a 95       	dec	r22
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <__vector_29+0x48a>
    289a:	82 b9       	out	0x02, r24	; 2
    289c:	80 91 c0 03 	lds	r24, 0x03C0
    28a0:	0a ce       	rjmp	.-1004   	; 0x24b6 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    28a2:	80 91 c5 03 	lds	r24, 0x03C5
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	a1 f1       	breq	.+104    	; 0x2912 <__vector_29+0x50a>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	04 ce       	rjmp	.-1016   	; 0x24b6 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    28ae:	80 91 c5 03 	lds	r24, 0x03C5
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <__vector_29+0x4b0>
    28b6:	2b ce       	rjmp	.-938    	; 0x250e <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    28b8:	30 93 c4 03 	sts	0x03C4, r19
    28bc:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    28c0:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    28c4:	46 98       	cbi	0x08, 6	; 8
    28c6:	4e e0       	ldi	r20, 0x0E	; 14
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	2a ce       	rjmp	.-940    	; 0x2520 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	80 93 bf 03 	sts	0x03BF, r24
    28d2:	75 cf       	rjmp	.-278    	; 0x27be <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	80 93 bf 03 	sts	0x03BF, r24
    28da:	36 cf       	rjmp	.-404    	; 0x2748 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	80 93 bf 03 	sts	0x03BF, r24
    28e2:	e6 cd       	rjmp	.-1076   	; 0x24b0 <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    28e4:	11 82       	std	Z+1, r1	; 0x01
    28e6:	10 82       	st	Z, r1
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	46 ce       	rjmp	.-884    	; 0x257a <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    28ee:	ac 01       	movw	r20, r24
    28f0:	44 5c       	subi	r20, 0xC4	; 196
    28f2:	5f 4f       	sbci	r21, 0xFF	; 255
    28f4:	55 95       	asr	r21
    28f6:	47 95       	ror	r20
    28f8:	48 37       	cpi	r20, 0x78	; 120
    28fa:	51 05       	cpc	r21, r1
    28fc:	7c f4       	brge	.+30     	; 0x291c <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    28fe:	29 53       	subi	r18, 0x39	; 57
    2900:	3c 4f       	sbci	r19, 0xFC	; 252
    2902:	cc 97       	sbiw	r24, 0x3c	; 60
    2904:	95 95       	asr	r25
    2906:	87 95       	ror	r24
    2908:	cc 96       	adiw	r24, 0x3c	; 60
    290a:	f9 01       	movw	r30, r18
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	3f ce       	rjmp	.-898    	; 0x2590 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2918:	46 9a       	sbi	0x08, 6	; 8
    291a:	a4 ce       	rjmp	.-696    	; 0x2664 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    291c:	ac 01       	movw	r20, r24
    291e:	44 5d       	subi	r20, 0xD4	; 212
    2920:	5e 4f       	sbci	r21, 0xFE	; 254
    2922:	55 95       	asr	r21
    2924:	47 95       	ror	r20
    2926:	55 95       	asr	r21
    2928:	47 95       	ror	r20
    292a:	44 3b       	cpi	r20, 0xB4	; 180
    292c:	51 05       	cpc	r21, r1
    292e:	74 f4       	brge	.+28     	; 0x294c <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2930:	29 53       	subi	r18, 0x39	; 57
    2932:	3c 4f       	sbci	r19, 0xFC	; 252
    2934:	84 5b       	subi	r24, 0xB4	; 180
    2936:	90 40       	sbci	r25, 0x00	; 0
    2938:	95 95       	asr	r25
    293a:	87 95       	ror	r24
    293c:	95 95       	asr	r25
    293e:	87 95       	ror	r24
    2940:	88 58       	subi	r24, 0x88	; 136
    2942:	9f 4f       	sbci	r25, 0xFF	; 255
    2944:	f9 01       	movw	r30, r18
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	22 ce       	rjmp	.-956    	; 0x2590 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    294c:	29 53       	subi	r18, 0x39	; 57
    294e:	3c 4f       	sbci	r19, 0xFC	; 252
    2950:	84 5a       	subi	r24, 0xA4	; 164
    2952:	91 40       	sbci	r25, 0x01	; 1
    2954:	95 95       	asr	r25
    2956:	87 95       	ror	r24
    2958:	95 95       	asr	r25
    295a:	87 95       	ror	r24
    295c:	95 95       	asr	r25
    295e:	87 95       	ror	r24
    2960:	8c 54       	subi	r24, 0x4C	; 76
    2962:	9f 4f       	sbci	r25, 0xFF	; 255
    2964:	f9 01       	movw	r30, r18
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    296a:	12 ce       	rjmp	.-988    	; 0x2590 <__vector_29+0x188>

0000296c <initMotors>:

#include "motors.h"

void initMotors() {
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2974:	e0 e9       	ldi	r30, 0x90	; 144
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	10 82       	st	Z, r1
	TCCR3B = 0;
    297a:	41 e9       	ldi	r20, 0x91	; 145
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	da 01       	movw	r26, r20
    2980:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2982:	21 e7       	ldi	r18, 0x71	; 113
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	e9 01       	movw	r28, r18
    2988:	18 82       	st	Y, r1
	TCCR4A = 0;
    298a:	a0 ea       	ldi	r26, 0xA0	; 160
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	1c 92       	st	X, r1
	TCCR4B = 0;
    2990:	81 ea       	ldi	r24, 0xA1	; 161
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	ec 01       	movw	r28, r24
    2996:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2998:	02 e7       	ldi	r16, 0x72	; 114
    299a:	10 e0       	ldi	r17, 0x00	; 0
    299c:	e8 01       	movw	r28, r16
    299e:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    29a0:	60 81       	ld	r22, Z
    29a2:	63 68       	ori	r22, 0x83	; 131
    29a4:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    29a6:	60 81       	ld	r22, Z
    29a8:	63 60       	ori	r22, 0x03	; 3
    29aa:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    29ac:	ea 01       	movw	r28, r20
    29ae:	68 81       	ld	r22, Y
    29b0:	6b 60       	ori	r22, 0x0B	; 11
    29b2:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    29b4:	40 91 eb 03 	lds	r20, 0x03EB
    29b8:	50 91 ec 03 	lds	r21, 0x03EC
    29bc:	50 93 99 00 	sts	0x0099, r21
    29c0:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    29c4:	10 92 9b 00 	sts	0x009B, r1
    29c8:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    29cc:	e9 01       	movw	r28, r18
    29ce:	48 81       	ld	r20, Y
    29d0:	41 60       	ori	r20, 0x01	; 1
    29d2:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    29d4:	20 81       	ld	r18, Z
    29d6:	2f 75       	andi	r18, 0x5F	; 95
    29d8:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    29da:	2e b1       	in	r18, 0x0e	; 14
    29dc:	27 7e       	andi	r18, 0xE7	; 231
    29de:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    29e0:	2c 91       	ld	r18, X
    29e2:	23 68       	ori	r18, 0x83	; 131
    29e4:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    29e6:	fc 01       	movw	r30, r24
    29e8:	20 81       	ld	r18, Z
    29ea:	2b 60       	ori	r18, 0x0B	; 11
    29ec:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    29ee:	80 91 ed 03 	lds	r24, 0x03ED
    29f2:	90 91 ee 03 	lds	r25, 0x03EE
    29f6:	90 93 a9 00 	sts	0x00A9, r25
    29fa:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    29fe:	10 92 ab 00 	sts	0x00AB, r1
    2a02:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2a06:	e8 01       	movw	r28, r16
    2a08:	88 81       	ld	r24, Y
    2a0a:	81 60       	ori	r24, 0x01	; 1
    2a0c:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2a0e:	8c 91       	ld	r24, X
    2a10:	8f 75       	andi	r24, 0x5F	; 95
    2a12:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2a14:	e2 e0       	ldi	r30, 0x02	; 2
    2a16:	f1 e0       	ldi	r31, 0x01	; 1
    2a18:	80 81       	ld	r24, Z
    2a1a:	87 7e       	andi	r24, 0xE7	; 231
    2a1c:	80 83       	st	Z, r24


}
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	08 95       	ret

00002a28 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    2a28:	80 91 07 02 	lds	r24, 0x0207
    2a2c:	88 23       	and	r24, r24
    2a2e:	91 f0       	breq	.+36     	; 0x2a54 <handleMotorsWithNoController+0x2c>
		last_left_vel = left_vel_sum>>2;
    2a30:	80 91 e3 03 	lds	r24, 0x03E3
    2a34:	90 91 e4 03 	lds	r25, 0x03E4
    2a38:	96 95       	lsr	r25
    2a3a:	87 95       	ror	r24
    2a3c:	96 95       	lsr	r25
    2a3e:	87 95       	ror	r24
    2a40:	90 93 e8 03 	sts	0x03E8, r25
    2a44:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2a48:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2a4c:	10 92 e4 03 	sts	0x03E4, r1
    2a50:	10 92 e3 03 	sts	0x03E3, r1
	}

	if(compute_right_vel) {
    2a54:	80 91 08 02 	lds	r24, 0x0208
    2a58:	88 23       	and	r24, r24
    2a5a:	91 f0       	breq	.+36     	; 0x2a80 <handleMotorsWithNoController+0x58>
		last_right_vel = right_vel_sum>>2;
    2a5c:	80 91 e5 03 	lds	r24, 0x03E5
    2a60:	90 91 e6 03 	lds	r25, 0x03E6
    2a64:	96 95       	lsr	r25
    2a66:	87 95       	ror	r24
    2a68:	96 95       	lsr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	90 93 ea 03 	sts	0x03EA, r25
    2a70:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2a74:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2a78:	10 92 e6 03 	sts	0x03E6, r1
    2a7c:	10 92 e5 03 	sts	0x03E5, r1
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    2a80:	80 91 ef 03 	lds	r24, 0x03EF
    2a84:	90 91 f0 03 	lds	r25, 0x03F0
    2a88:	90 93 fc 03 	sts	0x03FC, r25
    2a8c:	80 93 fb 03 	sts	0x03FB, r24
	pwm_left_working = pwm_left_desired;
    2a90:	20 91 f1 03 	lds	r18, 0x03F1
    2a94:	30 91 f2 03 	lds	r19, 0x03F2
    2a98:	30 93 fe 03 	sts	0x03FE, r19
    2a9c:	20 93 fd 03 	sts	0x03FD, r18
	if(obstacleAvoidanceEnabled) {
    2aa0:	40 91 34 05 	lds	r20, 0x0534
    2aa4:	44 23       	and	r20, r20
    2aa6:	71 f5       	brne	.+92     	; 0x2b04 <handleMotorsWithNoController+0xdc>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2aa8:	30 93 e2 03 	sts	0x03E2, r19
    2aac:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2ab0:	90 93 e0 03 	sts	0x03E0, r25
    2ab4:	80 93 df 03 	sts	0x03DF, r24

	pwm_left = pwm_left_working;
    2ab8:	30 93 ee 03 	sts	0x03EE, r19
    2abc:	20 93 ed 03 	sts	0x03ED, r18
	pwm_right = pwm_right_working;
    2ac0:	90 93 ec 03 	sts	0x03EC, r25
    2ac4:	80 93 eb 03 	sts	0x03EB, r24

	if(pwm_right > 0) {
    2ac8:	18 16       	cp	r1, r24
    2aca:	19 06       	cpc	r1, r25
    2acc:	54 f5       	brge	.+84     	; 0x2b22 <handleMotorsWithNoController+0xfa>
		OCR3A = (unsigned int)pwm_right;
    2ace:	90 93 99 00 	sts	0x0099, r25
    2ad2:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    2ad6:	80 91 ed 03 	lds	r24, 0x03ED
    2ada:	90 91 ee 03 	lds	r25, 0x03EE
    2ade:	18 16       	cp	r1, r24
    2ae0:	19 06       	cpc	r1, r25
    2ae2:	2c f4       	brge	.+10     	; 0x2aee <handleMotorsWithNoController+0xc6>
		OCR4A = (unsigned int)pwm_left;
    2ae4:	90 93 a9 00 	sts	0x00A9, r25
    2ae8:	80 93 a8 00 	sts	0x00A8, r24
    2aec:	08 95       	ret
	} else if(pwm_left < 0) {
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	59 f5       	brne	.+86     	; 0x2b48 <handleMotorsWithNoController+0x120>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    2af2:	10 92 a9 00 	sts	0x00A9, r1
    2af6:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2afa:	10 92 ab 00 	sts	0x00AB, r1
    2afe:	10 92 aa 00 	sts	0x00AA, r1
    2b02:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2b04:	8d ef       	ldi	r24, 0xFD	; 253
    2b06:	93 e0       	ldi	r25, 0x03	; 3
    2b08:	6b ef       	ldi	r22, 0xFB	; 251
    2b0a:	73 e0       	ldi	r23, 0x03	; 3
    2b0c:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <obstacleAvoidance>
    2b10:	20 91 fd 03 	lds	r18, 0x03FD
    2b14:	30 91 fe 03 	lds	r19, 0x03FE
    2b18:	80 91 fb 03 	lds	r24, 0x03FB
    2b1c:	90 91 fc 03 	lds	r25, 0x03FC
    2b20:	c3 cf       	rjmp	.-122    	; 0x2aa8 <handleMotorsWithNoController+0x80>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	49 f4       	brne	.+18     	; 0x2b38 <handleMotorsWithNoController+0x110>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    2b26:	10 92 99 00 	sts	0x0099, r1
    2b2a:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2b2e:	10 92 9b 00 	sts	0x009B, r1
    2b32:	10 92 9a 00 	sts	0x009A, r1
    2b36:	cf cf       	rjmp	.-98     	; 0x2ad6 <handleMotorsWithNoController+0xae>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    2b38:	90 95       	com	r25
    2b3a:	81 95       	neg	r24
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	90 93 9b 00 	sts	0x009B, r25
    2b42:	80 93 9a 00 	sts	0x009A, r24
    2b46:	c7 cf       	rjmp	.-114    	; 0x2ad6 <handleMotorsWithNoController+0xae>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    2b48:	90 95       	com	r25
    2b4a:	81 95       	neg	r24
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	90 93 ab 00 	sts	0x00AB, r25
    2b52:	80 93 aa 00 	sts	0x00AA, r24
    2b56:	08 95       	ret

00002b58 <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    2b58:	20 91 f1 03 	lds	r18, 0x03F1
    2b5c:	30 91 f2 03 	lds	r19, 0x03F2
    2b60:	30 93 fe 03 	sts	0x03FE, r19
    2b64:	20 93 fd 03 	sts	0x03FD, r18
	pwm_right_working = pwm_right_desired;
    2b68:	80 91 ef 03 	lds	r24, 0x03EF
    2b6c:	90 91 f0 03 	lds	r25, 0x03F0
    2b70:	90 93 fc 03 	sts	0x03FC, r25
    2b74:	80 93 fb 03 	sts	0x03FB, r24
	if(obstacleAvoidanceEnabled) {
    2b78:	40 91 34 05 	lds	r20, 0x0534
    2b7c:	44 23       	and	r20, r20
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <handleMotorsWithSpeedController+0x2a>
    2b80:	70 c0       	rjmp	.+224    	; 0x2c62 <handleMotorsWithSpeedController+0x10a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2b82:	30 93 e2 03 	sts	0x03E2, r19
    2b86:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2b8a:	90 93 e0 03 	sts	0x03E0, r25
    2b8e:	80 93 df 03 	sts	0x03DF, r24

	if(compute_left_vel) {
    2b92:	80 91 07 02 	lds	r24, 0x0207
    2b96:	88 23       	and	r24, r24
    2b98:	59 f1       	breq	.+86     	; 0x2bf0 <handleMotorsWithSpeedController+0x98>

		last_left_vel = left_vel_sum>>2;
    2b9a:	80 91 e3 03 	lds	r24, 0x03E3
    2b9e:	90 91 e4 03 	lds	r25, 0x03E4
    2ba2:	96 95       	lsr	r25
    2ba4:	87 95       	ror	r24
    2ba6:	96 95       	lsr	r25
    2ba8:	87 95       	ror	r24
    2baa:	90 93 e8 03 	sts	0x03E8, r25
    2bae:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2bb2:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2bb6:	10 92 e4 03 	sts	0x03E4, r1
    2bba:	10 92 e3 03 	sts	0x03E3, r1

		if(robotPosition == HORIZONTAL_POS) {
    2bbe:	80 91 16 02 	lds	r24, 0x0216
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <handleMotorsWithSpeedController+0x70>
    2bc6:	61 c0       	rjmp	.+194    	; 0x2c8a <handleMotorsWithSpeedController+0x132>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    2bc8:	8d ef       	ldi	r24, 0xFD	; 253
    2bca:	93 e0       	ldi	r25, 0x03	; 3
    2bcc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    2bd0:	80 91 fd 03 	lds	r24, 0x03FD
    2bd4:	90 91 fe 03 	lds	r25, 0x03FE
    2bd8:	90 93 ee 03 	sts	0x03EE, r25
    2bdc:	80 93 ed 03 	sts	0x03ED, r24

		if(pwm_left > 0) {
    2be0:	18 16       	cp	r1, r24
    2be2:	19 06       	cpc	r1, r25
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <handleMotorsWithSpeedController+0x90>
    2be6:	56 c0       	rjmp	.+172    	; 0x2c94 <handleMotorsWithSpeedController+0x13c>
			OCR4A = (unsigned int)pwm_left;
    2be8:	90 93 a9 00 	sts	0x00A9, r25
    2bec:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    2bf0:	80 91 08 02 	lds	r24, 0x0208
    2bf4:	88 23       	and	r24, r24
    2bf6:	a1 f1       	breq	.+104    	; 0x2c60 <handleMotorsWithSpeedController+0x108>

		last_right_vel = right_vel_sum>>2;
    2bf8:	80 91 e5 03 	lds	r24, 0x03E5
    2bfc:	90 91 e6 03 	lds	r25, 0x03E6
    2c00:	96 95       	lsr	r25
    2c02:	87 95       	ror	r24
    2c04:	96 95       	lsr	r25
    2c06:	87 95       	ror	r24
    2c08:	90 93 ea 03 	sts	0x03EA, r25
    2c0c:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2c10:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2c14:	10 92 e6 03 	sts	0x03E6, r1
    2c18:	10 92 e5 03 	sts	0x03E5, r1

		if(robotPosition == HORIZONTAL_POS) {
    2c1c:	80 91 16 02 	lds	r24, 0x0216
    2c20:	81 30       	cpi	r24, 0x01	; 1
    2c22:	71 f1       	breq	.+92     	; 0x2c80 <handleMotorsWithSpeedController+0x128>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    2c24:	8b ef       	ldi	r24, 0xFB	; 251
    2c26:	93 e0       	ldi	r25, 0x03	; 3
    2c28:	0e 94 27 0c 	call	0x184e	; 0x184e <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    2c2c:	80 91 fb 03 	lds	r24, 0x03FB
    2c30:	90 91 fc 03 	lds	r25, 0x03FC
    2c34:	90 93 ec 03 	sts	0x03EC, r25
    2c38:	80 93 eb 03 	sts	0x03EB, r24

		if(pwm_right > 0) {
    2c3c:	18 16       	cp	r1, r24
    2c3e:	19 06       	cpc	r1, r25
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <handleMotorsWithSpeedController+0xf4>
			OCR3A = (unsigned int)pwm_right;
    2c42:	90 93 99 00 	sts	0x0099, r25
    2c46:	80 93 98 00 	sts	0x0098, r24
    2c4a:	08 95       	ret
		} else if(pwm_right < 0) {
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	69 f5       	brne	.+90     	; 0x2caa <handleMotorsWithSpeedController+0x152>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    2c50:	10 92 99 00 	sts	0x0099, r1
    2c54:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    2c58:	10 92 9b 00 	sts	0x009B, r1
    2c5c:	10 92 9a 00 	sts	0x009A, r1
    2c60:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2c62:	8d ef       	ldi	r24, 0xFD	; 253
    2c64:	93 e0       	ldi	r25, 0x03	; 3
    2c66:	6b ef       	ldi	r22, 0xFB	; 251
    2c68:	73 e0       	ldi	r23, 0x03	; 3
    2c6a:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <obstacleAvoidance>
    2c6e:	20 91 fd 03 	lds	r18, 0x03FD
    2c72:	30 91 fe 03 	lds	r19, 0x03FE
    2c76:	80 91 fb 03 	lds	r24, 0x03FB
    2c7a:	90 91 fc 03 	lds	r25, 0x03FC
    2c7e:	81 cf       	rjmp	.-254    	; 0x2b82 <handleMotorsWithSpeedController+0x2a>
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    2c80:	8b ef       	ldi	r24, 0xFB	; 251
    2c82:	93 e0       	ldi	r25, 0x03	; 3
    2c84:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <start_horizontal_speed_control_right>
    2c88:	d1 cf       	rjmp	.-94     	; 0x2c2c <handleMotorsWithSpeedController+0xd4>
		compute_left_vel = 0;
		left_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    2c8a:	8d ef       	ldi	r24, 0xFD	; 253
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <start_horizontal_speed_control_left>
    2c92:	9e cf       	rjmp	.-196    	; 0x2bd0 <handleMotorsWithSpeedController+0x78>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	89 f4       	brne	.+34     	; 0x2cba <handleMotorsWithSpeedController+0x162>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    2c98:	10 92 a9 00 	sts	0x00A9, r1
    2c9c:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    2ca0:	10 92 ab 00 	sts	0x00AB, r1
    2ca4:	10 92 aa 00 	sts	0x00AA, r1
    2ca8:	a3 cf       	rjmp	.-186    	; 0x2bf0 <handleMotorsWithSpeedController+0x98>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    2caa:	90 95       	com	r25
    2cac:	81 95       	neg	r24
    2cae:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb0:	90 93 9b 00 	sts	0x009B, r25
    2cb4:	80 93 9a 00 	sts	0x009A, r24
    2cb8:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    2cba:	90 95       	com	r25
    2cbc:	81 95       	neg	r24
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	90 93 ab 00 	sts	0x00AB, r25
    2cc4:	80 93 aa 00 	sts	0x00AA, r24
    2cc8:	93 cf       	rjmp	.-218    	; 0x2bf0 <handleMotorsWithSpeedController+0x98>

00002cca <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2cca:	28 2f       	mov	r18, r24
    2ccc:	33 27       	eor	r19, r19
    2cce:	27 fd       	sbrc	r18, 7
    2cd0:	30 95       	com	r19
    2cd2:	37 fd       	sbrc	r19, 7
    2cd4:	30 c0       	rjmp	.+96     	; 0x2d36 <setLeftSpeed+0x6c>
    2cd6:	30 93 00 04 	sts	0x0400, r19
    2cda:	20 93 ff 03 	sts	0x03FF, r18

    if(vel >= 0) {
    2cde:	87 fd       	sbrc	r24, 7
    2ce0:	1e c0       	rjmp	.+60     	; 0x2d1e <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    2ce2:	22 0f       	add	r18, r18
    2ce4:	33 1f       	adc	r19, r19
    2ce6:	22 0f       	add	r18, r18
    2ce8:	33 1f       	adc	r19, r19
    2cea:	30 93 f2 03 	sts	0x03F2, r19
    2cee:	20 93 f1 03 	sts	0x03F1, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	21 30       	cpi	r18, 0x01	; 1
    2cf6:	38 07       	cpc	r19, r24
    2cf8:	3c f0       	brlt	.+14     	; 0x2d08 <setLeftSpeed+0x3e>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	92 e0       	ldi	r25, 0x02	; 2
    2cfe:	90 93 f2 03 	sts	0x03F2, r25
    2d02:	80 93 f1 03 	sts	0x03F1, r24
    2d06:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2d08:	8e ef       	ldi	r24, 0xFE	; 254
    2d0a:	20 30       	cpi	r18, 0x00	; 0
    2d0c:	38 07       	cpc	r19, r24
    2d0e:	34 f4       	brge	.+12     	; 0x2d1c <setLeftSpeed+0x52>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	9e ef       	ldi	r25, 0xFE	; 254
    2d14:	90 93 f2 03 	sts	0x03F2, r25
    2d18:	80 93 f1 03 	sts	0x03F1, r24
    2d1c:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	30 95       	com	r19
    2d28:	21 95       	neg	r18
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	30 93 f2 03 	sts	0x03F2, r19
    2d30:	20 93 f1 03 	sts	0x03F1, r18
    2d34:	de cf       	rjmp	.-68     	; 0x2cf2 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2d36:	30 95       	com	r19
    2d38:	21 95       	neg	r18
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	cc cf       	rjmp	.-104    	; 0x2cd6 <setLeftSpeed+0xc>

00002d3e <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2d3e:	28 2f       	mov	r18, r24
    2d40:	33 27       	eor	r19, r19
    2d42:	27 fd       	sbrc	r18, 7
    2d44:	30 95       	com	r19
    2d46:	37 fd       	sbrc	r19, 7
    2d48:	30 c0       	rjmp	.+96     	; 0x2daa <setRightSpeed+0x6c>
    2d4a:	30 93 02 04 	sts	0x0402, r19
    2d4e:	20 93 01 04 	sts	0x0401, r18

    if(vel >= 0) {
    2d52:	87 fd       	sbrc	r24, 7
    2d54:	1e c0       	rjmp	.+60     	; 0x2d92 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    2d56:	22 0f       	add	r18, r18
    2d58:	33 1f       	adc	r19, r19
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	30 93 f0 03 	sts	0x03F0, r19
    2d62:	20 93 ef 03 	sts	0x03EF, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	21 30       	cpi	r18, 0x01	; 1
    2d6a:	38 07       	cpc	r19, r24
    2d6c:	3c f0       	brlt	.+14     	; 0x2d7c <setRightSpeed+0x3e>
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	92 e0       	ldi	r25, 0x02	; 2
    2d72:	90 93 f0 03 	sts	0x03F0, r25
    2d76:	80 93 ef 03 	sts	0x03EF, r24
    2d7a:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2d7c:	8e ef       	ldi	r24, 0xFE	; 254
    2d7e:	20 30       	cpi	r18, 0x00	; 0
    2d80:	38 07       	cpc	r19, r24
    2d82:	34 f4       	brge	.+12     	; 0x2d90 <setRightSpeed+0x52>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	9e ef       	ldi	r25, 0xFE	; 254
    2d88:	90 93 f0 03 	sts	0x03F0, r25
    2d8c:	80 93 ef 03 	sts	0x03EF, r24
    2d90:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    2d92:	22 0f       	add	r18, r18
    2d94:	33 1f       	adc	r19, r19
    2d96:	22 0f       	add	r18, r18
    2d98:	33 1f       	adc	r19, r19
    2d9a:	30 95       	com	r19
    2d9c:	21 95       	neg	r18
    2d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2da0:	30 93 f0 03 	sts	0x03F0, r19
    2da4:	20 93 ef 03 	sts	0x03EF, r18
    2da8:	de cf       	rjmp	.-68     	; 0x2d66 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2daa:	30 95       	com	r19
    2dac:	21 95       	neg	r18
    2dae:	3f 4f       	sbci	r19, 0xFF	; 255
    2db0:	cc cf       	rjmp	.-104    	; 0x2d4a <setRightSpeed+0xc>

00002db2 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    2db2:	1f 92       	push	r1
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	0f 92       	push	r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	8f 93       	push	r24
    2dbe:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    2dc0:	80 91 36 05 	lds	r24, 0x0536
    2dc4:	88 23       	and	r24, r24
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <__vector_45+0x2e>
		pwm_left = 0;
    2dc8:	10 92 ee 03 	sts	0x03EE, r1
    2dcc:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    2dd0:	10 92 a9 00 	sts	0x00A9, r1
    2dd4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2dd8:	10 92 ab 00 	sts	0x00AB, r1
    2ddc:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    2de0:	10 92 d8 03 	sts	0x03D8, r1
    2de4:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    2de8:	80 91 ed 03 	lds	r24, 0x03ED
    2dec:	90 91 ee 03 	lds	r25, 0x03EE
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	41 f5       	brne	.+80     	; 0x2e44 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    2df4:	80 91 e1 03 	lds	r24, 0x03E1
    2df8:	90 91 e2 03 	lds	r25, 0x03E2
    2dfc:	97 fd       	sbrc	r25, 7
    2dfe:	69 c0       	rjmp	.+210    	; 0x2ed2 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    2e06:	8e e0       	ldi	r24, 0x0E	; 14
    2e08:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2e12:	80 91 a0 00 	lds	r24, 0x00A0
    2e16:	8f 75       	andi	r24, 0x5F	; 95
    2e18:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2e1c:	80 91 02 01 	lds	r24, 0x0102
    2e20:	87 7e       	andi	r24, 0xE7	; 231
    2e22:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    2e26:	80 91 72 00 	lds	r24, 0x0072
    2e2a:	89 7f       	andi	r24, 0xF9	; 249
    2e2c:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    2e30:	89 b3       	in	r24, 0x19	; 25
    2e32:	86 60       	ori	r24, 0x06	; 6
    2e34:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    2e36:	9f 91       	pop	r25
    2e38:	8f 91       	pop	r24
    2e3a:	0f 90       	pop	r0
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	0f 90       	pop	r0
    2e40:	1f 90       	pop	r1
    2e42:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    2e44:	18 16       	cp	r1, r24
    2e46:	19 06       	cpc	r1, r25
    2e48:	2c f5       	brge	.+74     	; 0x2e94 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    2e4a:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    2e4e:	8f e0       	ldi	r24, 0x0F	; 15
    2e50:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2e54:	80 91 a0 00 	lds	r24, 0x00A0
    2e58:	8f 7d       	andi	r24, 0xDF	; 223
    2e5a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2e5e:	80 91 72 00 	lds	r24, 0x0072
    2e62:	8b 7f       	andi	r24, 0xFB	; 251
    2e64:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    2e68:	80 91 02 01 	lds	r24, 0x0102
    2e6c:	8f 7e       	andi	r24, 0xEF	; 239
    2e6e:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    2e72:	80 91 a0 00 	lds	r24, 0x00A0
    2e76:	80 68       	ori	r24, 0x80	; 128
    2e78:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2e7c:	80 91 72 00 	lds	r24, 0x0072
    2e80:	82 60       	ori	r24, 0x02	; 2
    2e82:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    2e86:	9f 91       	pop	r25
    2e88:	8f 91       	pop	r24
    2e8a:	0f 90       	pop	r0
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	0f 90       	pop	r0
    2e90:	1f 90       	pop	r1
    2e92:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    2e94:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    2e98:	8e e0       	ldi	r24, 0x0E	; 14
    2e9a:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    2e9e:	80 91 a0 00 	lds	r24, 0x00A0
    2ea2:	8f 77       	andi	r24, 0x7F	; 127
    2ea4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2ea8:	80 91 72 00 	lds	r24, 0x0072
    2eac:	8d 7f       	andi	r24, 0xFD	; 253
    2eae:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    2eb2:	80 91 02 01 	lds	r24, 0x0102
    2eb6:	87 7f       	andi	r24, 0xF7	; 247
    2eb8:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    2ebc:	80 91 a0 00 	lds	r24, 0x00A0
    2ec0:	80 62       	ori	r24, 0x20	; 32
    2ec2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2ec6:	80 91 72 00 	lds	r24, 0x0072
    2eca:	84 60       	ori	r24, 0x04	; 4
    2ecc:	80 93 72 00 	sts	0x0072, r24
    2ed0:	b2 cf       	rjmp	.-156    	; 0x2e36 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    2ed8:	8f e0       	ldi	r24, 0x0F	; 15
    2eda:	80 93 2b 03 	sts	0x032B, r24
    2ede:	96 cf       	rjmp	.-212    	; 0x2e0c <__vector_45+0x5a>

00002ee0 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	0f 92       	push	r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	8f 93       	push	r24
    2eec:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    2ef4:	9e e0       	ldi	r25, 0x0E	; 14
    2ef6:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2efa:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2efe:	9f 91       	pop	r25
    2f00:	8f 91       	pop	r24
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	8f 93       	push	r24
    2f18:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    2f20:	9f e0       	ldi	r25, 0x0F	; 15
    2f22:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2f26:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2f2a:	9f 91       	pop	r25
    2f2c:	8f 91       	pop	r24
    2f2e:	0f 90       	pop	r0
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	0f 90       	pop	r0
    2f34:	1f 90       	pop	r1
    2f36:	18 95       	reti

00002f38 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    2f38:	1f 92       	push	r1
    2f3a:	0f 92       	push	r0
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	0f 92       	push	r0
    2f40:	11 24       	eor	r1, r1
    2f42:	8f 93       	push	r24
    2f44:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    2f46:	80 91 36 05 	lds	r24, 0x0536
    2f4a:	88 23       	and	r24, r24
    2f4c:	61 f0       	breq	.+24     	; 0x2f66 <__vector_35+0x2e>
		pwm_right = 0;
    2f4e:	10 92 ec 03 	sts	0x03EC, r1
    2f52:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    2f56:	10 92 99 00 	sts	0x0099, r1
    2f5a:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2f5e:	10 92 9b 00 	sts	0x009B, r1
    2f62:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    2f66:	10 92 da 03 	sts	0x03DA, r1
    2f6a:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    2f6e:	80 91 eb 03 	lds	r24, 0x03EB
    2f72:	90 91 ec 03 	lds	r25, 0x03EC
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	31 f5       	brne	.+76     	; 0x2fc6 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    2f7a:	80 91 df 03 	lds	r24, 0x03DF
    2f7e:	90 91 e0 03 	lds	r25, 0x03E0
    2f82:	97 fd       	sbrc	r25, 7
    2f84:	5f c0       	rjmp	.+190    	; 0x3044 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    2f8c:	8c e0       	ldi	r24, 0x0C	; 12
    2f8e:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2f98:	80 91 90 00 	lds	r24, 0x0090
    2f9c:	8f 75       	andi	r24, 0x5F	; 95
    2f9e:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2fa2:	8e b1       	in	r24, 0x0e	; 14
    2fa4:	87 7e       	andi	r24, 0xE7	; 231
    2fa6:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    2fa8:	80 91 71 00 	lds	r24, 0x0071
    2fac:	89 7f       	andi	r24, 0xF9	; 249
    2fae:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    2fb2:	88 b3       	in	r24, 0x18	; 24
    2fb4:	86 60       	ori	r24, 0x06	; 6
    2fb6:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2fb8:	9f 91       	pop	r25
    2fba:	8f 91       	pop	r24
    2fbc:	0f 90       	pop	r0
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	0f 90       	pop	r0
    2fc2:	1f 90       	pop	r1
    2fc4:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    2fc6:	18 16       	cp	r1, r24
    2fc8:	19 06       	cpc	r1, r25
    2fca:	0c f5       	brge	.+66     	; 0x300e <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    2fcc:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    2fd0:	8d e0       	ldi	r24, 0x0D	; 13
    2fd2:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    2fd6:	80 91 90 00 	lds	r24, 0x0090
    2fda:	8f 7d       	andi	r24, 0xDF	; 223
    2fdc:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    2fe0:	80 91 71 00 	lds	r24, 0x0071
    2fe4:	8b 7f       	andi	r24, 0xFB	; 251
    2fe6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    2fea:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    2fec:	80 91 90 00 	lds	r24, 0x0090
    2ff0:	80 68       	ori	r24, 0x80	; 128
    2ff2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    2ff6:	80 91 71 00 	lds	r24, 0x0071
    2ffa:	82 60       	ori	r24, 0x02	; 2
    2ffc:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3000:	9f 91       	pop	r25
    3002:	8f 91       	pop	r24
    3004:	0f 90       	pop	r0
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	0f 90       	pop	r0
    300a:	1f 90       	pop	r1
    300c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    300e:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3012:	8c e0       	ldi	r24, 0x0C	; 12
    3014:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3018:	80 91 90 00 	lds	r24, 0x0090
    301c:	8f 77       	andi	r24, 0x7F	; 127
    301e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3022:	80 91 71 00 	lds	r24, 0x0071
    3026:	8d 7f       	andi	r24, 0xFD	; 253
    3028:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    302c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    302e:	80 91 90 00 	lds	r24, 0x0090
    3032:	80 62       	ori	r24, 0x20	; 32
    3034:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3038:	80 91 71 00 	lds	r24, 0x0071
    303c:	84 60       	ori	r24, 0x04	; 4
    303e:	80 93 71 00 	sts	0x0071, r24
    3042:	ba cf       	rjmp	.-140    	; 0x2fb8 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    304a:	8d e0       	ldi	r24, 0x0D	; 13
    304c:	80 93 2c 03 	sts	0x032C, r24
    3050:	a0 cf       	rjmp	.-192    	; 0x2f92 <__vector_35+0x5a>

00003052 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3052:	1f 92       	push	r1
    3054:	0f 92       	push	r0
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	0f 92       	push	r0
    305a:	11 24       	eor	r1, r1
    305c:	8f 93       	push	r24
    305e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3066:	9c e0       	ldi	r25, 0x0C	; 12
    3068:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    306c:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    3070:	9f 91       	pop	r25
    3072:	8f 91       	pop	r24
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	0f 90       	pop	r0
    307a:	1f 90       	pop	r1
    307c:	18 95       	reti

0000307e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    307e:	1f 92       	push	r1
    3080:	0f 92       	push	r0
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	0f 92       	push	r0
    3086:	11 24       	eor	r1, r1
    3088:	8f 93       	push	r24
    308a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3092:	9d e0       	ldi	r25, 0x0D	; 13
    3094:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3098:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    309c:	9f 91       	pop	r25
    309e:	8f 91       	pop	r24
    30a0:	0f 90       	pop	r0
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	0f 90       	pop	r0
    30a6:	1f 90       	pop	r1
    30a8:	18 95       	reti

000030aa <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    30aa:	80 91 94 00 	lds	r24, 0x0094
    30ae:	90 91 95 00 	lds	r25, 0x0095
    30b2:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <srand>

}
    30b6:	08 95       	ret

000030b8 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    30b8:	2f 92       	push	r2
    30ba:	3f 92       	push	r3
    30bc:	4f 92       	push	r4
    30be:	5f 92       	push	r5
    30c0:	6f 92       	push	r6
    30c2:	7f 92       	push	r7
    30c4:	8f 92       	push	r8
    30c6:	9f 92       	push	r9
    30c8:	af 92       	push	r10
    30ca:	bf 92       	push	r11
    30cc:	cf 92       	push	r12
    30ce:	df 92       	push	r13
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	28 97       	sbiw	r28, 0x08	; 8
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	2c 01       	movw	r4, r24
    30ee:	7a 83       	std	Y+2, r23	; 0x02
    30f0:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    30f2:	fc 01       	movw	r30, r24
    30f4:	01 90       	ld	r0, Z+
    30f6:	f0 81       	ld	r31, Z
    30f8:	e0 2d       	mov	r30, r0
    30fa:	fc 83       	std	Y+4, r31	; 0x04
    30fc:	eb 83       	std	Y+3, r30	; 0x03
    30fe:	fb 01       	movw	r30, r22
    3100:	01 90       	ld	r0, Z+
    3102:	f0 81       	ld	r31, Z
    3104:	e0 2d       	mov	r30, r0
    3106:	fe 83       	std	Y+6, r31	; 0x06
    3108:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    310a:	60 91 c7 03 	lds	r22, 0x03C7
    310e:	70 91 c8 03 	lds	r23, 0x03C8
    3112:	65 30       	cpi	r22, 0x05	; 5
    3114:	71 05       	cpc	r23, r1
    3116:	34 f4       	brge	.+12     	; 0x3124 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    3118:	10 92 c8 03 	sts	0x03C8, r1
    311c:	10 92 c7 03 	sts	0x03C7, r1
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3124:	40 91 c9 03 	lds	r20, 0x03C9
    3128:	50 91 ca 03 	lds	r21, 0x03CA
    312c:	45 30       	cpi	r20, 0x05	; 5
    312e:	51 05       	cpc	r21, r1
    3130:	34 f4       	brge	.+12     	; 0x313e <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    3132:	10 92 ca 03 	sts	0x03CA, r1
    3136:	10 92 c9 03 	sts	0x03C9, r1
    313a:	40 e0       	ldi	r20, 0x00	; 0
    313c:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    313e:	80 91 cb 03 	lds	r24, 0x03CB
    3142:	90 91 cc 03 	lds	r25, 0x03CC
    3146:	85 30       	cpi	r24, 0x05	; 5
    3148:	91 05       	cpc	r25, r1
    314a:	24 f4       	brge	.+8      	; 0x3154 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    314c:	10 92 cc 03 	sts	0x03CC, r1
    3150:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3154:	00 91 cd 03 	lds	r16, 0x03CD
    3158:	10 91 ce 03 	lds	r17, 0x03CE
    315c:	05 30       	cpi	r16, 0x05	; 5
    315e:	11 05       	cpc	r17, r1
    3160:	34 f4       	brge	.+12     	; 0x316e <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    3162:	10 92 ce 03 	sts	0x03CE, r1
    3166:	10 92 cd 03 	sts	0x03CD, r1
    316a:	00 e0       	ldi	r16, 0x00	; 0
    316c:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    316e:	60 90 cf 03 	lds	r6, 0x03CF
    3172:	70 90 d0 03 	lds	r7, 0x03D0
    3176:	f5 e0       	ldi	r31, 0x05	; 5
    3178:	6f 16       	cp	r6, r31
    317a:	71 04       	cpc	r7, r1
    317c:	34 f4       	brge	.+12     	; 0x318a <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    317e:	10 92 d0 03 	sts	0x03D0, r1
    3182:	10 92 cf 03 	sts	0x03CF, r1
    3186:	66 24       	eor	r6, r6
    3188:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    318a:	20 91 d1 03 	lds	r18, 0x03D1
    318e:	30 91 d2 03 	lds	r19, 0x03D2
    3192:	25 30       	cpi	r18, 0x05	; 5
    3194:	31 05       	cpc	r19, r1
    3196:	34 f4       	brge	.+12     	; 0x31a4 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3198:	10 92 d2 03 	sts	0x03D2, r1
    319c:	10 92 d1 03 	sts	0x03D1, r1
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    31a4:	80 91 d3 03 	lds	r24, 0x03D3
    31a8:	90 91 d4 03 	lds	r25, 0x03D4
    31ac:	85 30       	cpi	r24, 0x05	; 5
    31ae:	91 05       	cpc	r25, r1
    31b0:	24 f4       	brge	.+8      	; 0x31ba <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    31b2:	10 92 d4 03 	sts	0x03D4, r1
    31b6:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    31ba:	80 91 d5 03 	lds	r24, 0x03D5
    31be:	90 91 d6 03 	lds	r25, 0x03D6
    31c2:	85 30       	cpi	r24, 0x05	; 5
    31c4:	91 05       	cpc	r25, r1
    31c6:	34 f4       	brge	.+12     	; 0x31d4 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    31c8:	10 92 d6 03 	sts	0x03D6, r1
    31cc:	10 92 d5 03 	sts	0x03D5, r1
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    31d4:	ee 24       	eor	r14, r14
    31d6:	ff 24       	eor	r15, r15
    31d8:	e6 1a       	sub	r14, r22
    31da:	f7 0a       	sbc	r15, r23
    31dc:	5a 01       	movw	r10, r20
    31de:	b5 94       	asr	r11
    31e0:	a7 94       	ror	r10
    31e2:	15 95       	asr	r17
    31e4:	07 95       	ror	r16
    31e6:	69 01       	movw	r12, r18
    31e8:	d5 94       	asr	r13
    31ea:	c7 94       	ror	r12
    31ec:	4c 01       	movw	r8, r24
    31ee:	95 94       	asr	r9
    31f0:	87 94       	ror	r8
    31f2:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <rand>
    31f6:	93 01       	movw	r18, r6
    31f8:	2e 51       	subi	r18, 0x1E	; 30
    31fa:	30 40       	sbci	r19, 0x00	; 0
    31fc:	2e 0d       	add	r18, r14
    31fe:	3f 1d       	adc	r19, r15
    3200:	20 0f       	add	r18, r16
    3202:	31 1f       	adc	r19, r17
    3204:	2c 0d       	add	r18, r12
    3206:	3d 1d       	adc	r19, r13
    3208:	2a 19       	sub	r18, r10
    320a:	3b 09       	sbc	r19, r11
    320c:	28 19       	sub	r18, r8
    320e:	39 09       	sbc	r19, r9
    3210:	4c e3       	ldi	r20, 0x3C	; 60
    3212:	24 2e       	mov	r2, r20
    3214:	31 2c       	mov	r3, r1
    3216:	b1 01       	movw	r22, r2
    3218:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__divmodhi4>
    321c:	28 0f       	add	r18, r24
    321e:	39 1f       	adc	r19, r25
    3220:	38 87       	std	Y+8, r19	; 0x08
    3222:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3224:	e0 90 c9 03 	lds	r14, 0x03C9
    3228:	f0 90 ca 03 	lds	r15, 0x03CA
    322c:	f5 94       	asr	r15
    322e:	e7 94       	ror	r14
    3230:	00 91 cb 03 	lds	r16, 0x03CB
    3234:	10 91 cc 03 	lds	r17, 0x03CC
    3238:	15 95       	asr	r17
    323a:	07 95       	ror	r16
    323c:	15 95       	asr	r17
    323e:	07 95       	ror	r16
    3240:	c0 90 cd 03 	lds	r12, 0x03CD
    3244:	d0 90 ce 03 	lds	r13, 0x03CE
    3248:	d5 94       	asr	r13
    324a:	c7 94       	ror	r12
    324c:	80 90 d1 03 	lds	r8, 0x03D1
    3250:	90 90 d2 03 	lds	r9, 0x03D2
    3254:	95 94       	asr	r9
    3256:	87 94       	ror	r8
    3258:	60 90 d3 03 	lds	r6, 0x03D3
    325c:	70 90 d4 03 	lds	r7, 0x03D4
    3260:	75 94       	asr	r7
    3262:	67 94       	ror	r6
    3264:	75 94       	asr	r7
    3266:	67 94       	ror	r6
    3268:	a0 90 d5 03 	lds	r10, 0x03D5
    326c:	b0 90 d6 03 	lds	r11, 0x03D6
    3270:	b5 94       	asr	r11
    3272:	a7 94       	ror	r10
    3274:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <rand>
    3278:	97 01       	movw	r18, r14
    327a:	20 0f       	add	r18, r16
    327c:	31 1f       	adc	r19, r17
    327e:	2e 51       	subi	r18, 0x1E	; 30
    3280:	30 40       	sbci	r19, 0x00	; 0
    3282:	2c 0d       	add	r18, r12
    3284:	3d 1d       	adc	r19, r13
    3286:	2a 19       	sub	r18, r10
    3288:	3b 09       	sbc	r19, r11
    328a:	28 19       	sub	r18, r8
    328c:	39 09       	sbc	r19, r9
    328e:	26 19       	sub	r18, r6
    3290:	37 09       	sbc	r19, r7
    3292:	b1 01       	movw	r22, r2
    3294:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__divmodhi4>
    3298:	28 0f       	add	r18, r24
    329a:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    329c:	4b 81       	ldd	r20, Y+3	; 0x03
    329e:	5c 81       	ldd	r21, Y+4	; 0x04
    32a0:	57 fd       	sbrc	r21, 7
    32a2:	97 c0       	rjmp	.+302    	; 0x33d2 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    32a4:	5a 01       	movw	r10, r20
    32a6:	cc 24       	eor	r12, r12
    32a8:	b7 fc       	sbrc	r11, 7
    32aa:	c0 94       	com	r12
    32ac:	dc 2c       	mov	r13, r12
    32ae:	8f 81       	ldd	r24, Y+7	; 0x07
    32b0:	98 85       	ldd	r25, Y+8	; 0x08
    32b2:	3c 01       	movw	r6, r24
    32b4:	88 24       	eor	r8, r8
    32b6:	77 fc       	sbrc	r7, 7
    32b8:	80 94       	com	r8
    32ba:	98 2c       	mov	r9, r8
    32bc:	79 01       	movw	r14, r18
    32be:	00 27       	eor	r16, r16
    32c0:	f7 fc       	sbrc	r15, 7
    32c2:	00 95       	com	r16
    32c4:	10 2f       	mov	r17, r16
    32c6:	c4 01       	movw	r24, r8
    32c8:	b3 01       	movw	r22, r6
    32ca:	6e 19       	sub	r22, r14
    32cc:	7f 09       	sbc	r23, r15
    32ce:	80 0b       	sbc	r24, r16
    32d0:	91 0b       	sbc	r25, r17
    32d2:	a6 01       	movw	r20, r12
    32d4:	95 01       	movw	r18, r10
    32d6:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__mulsi3>
    32da:	f7 e0       	ldi	r31, 0x07	; 7
    32dc:	95 95       	asr	r25
    32de:	87 95       	ror	r24
    32e0:	77 95       	ror	r23
    32e2:	67 95       	ror	r22
    32e4:	fa 95       	dec	r31
    32e6:	d1 f7       	brne	.-12     	; 0x32dc <obstacleAvoidance+0x224>
    32e8:	6a 0d       	add	r22, r10
    32ea:	7b 1d       	adc	r23, r11
    32ec:	8c 1d       	adc	r24, r12
    32ee:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    32f0:	f2 01       	movw	r30, r4
    32f2:	71 83       	std	Z+1, r23	; 0x01
    32f4:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    32f6:	2d 81       	ldd	r18, Y+5	; 0x05
    32f8:	3e 81       	ldd	r19, Y+6	; 0x06
    32fa:	37 fd       	sbrc	r19, 7
    32fc:	99 c0       	rjmp	.+306    	; 0x3430 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    32fe:	59 01       	movw	r10, r18
    3300:	cc 24       	eor	r12, r12
    3302:	b7 fc       	sbrc	r11, 7
    3304:	c0 94       	com	r12
    3306:	dc 2c       	mov	r13, r12
    3308:	c8 01       	movw	r24, r16
    330a:	b7 01       	movw	r22, r14
    330c:	66 0d       	add	r22, r6
    330e:	77 1d       	adc	r23, r7
    3310:	88 1d       	adc	r24, r8
    3312:	99 1d       	adc	r25, r9
    3314:	a6 01       	movw	r20, r12
    3316:	95 01       	movw	r18, r10
    3318:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__mulsi3>
    331c:	37 e0       	ldi	r19, 0x07	; 7
    331e:	95 95       	asr	r25
    3320:	87 95       	ror	r24
    3322:	77 95       	ror	r23
    3324:	67 95       	ror	r22
    3326:	3a 95       	dec	r19
    3328:	d1 f7       	brne	.-12     	; 0x331e <obstacleAvoidance+0x266>
    332a:	6a 0d       	add	r22, r10
    332c:	7b 1d       	adc	r23, r11
    332e:	8c 1d       	adc	r24, r12
    3330:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3332:	9b 01       	movw	r18, r22
    3334:	e9 81       	ldd	r30, Y+1	; 0x01
    3336:	fa 81       	ldd	r31, Y+2	; 0x02
    3338:	71 83       	std	Z+1, r23	; 0x01
    333a:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    333c:	f2 e0       	ldi	r31, 0x02	; 2
    333e:	21 30       	cpi	r18, 0x01	; 1
    3340:	3f 07       	cpc	r19, r31
    3342:	44 f0       	brlt	.+16     	; 0x3354 <obstacleAvoidance+0x29c>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	92 e0       	ldi	r25, 0x02	; 2
    3348:	e9 81       	ldd	r30, Y+1	; 0x01
    334a:	fa 81       	ldd	r31, Y+2	; 0x02
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	80 83       	st	Z, r24
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3354:	f2 01       	movw	r30, r4
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	f2 e0       	ldi	r31, 0x02	; 2
    335c:	81 30       	cpi	r24, 0x01	; 1
    335e:	9f 07       	cpc	r25, r31
    3360:	4c f0       	brlt	.+18     	; 0x3374 <obstacleAvoidance+0x2bc>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	92 e0       	ldi	r25, 0x02	; 2
    3366:	f2 01       	movw	r30, r4
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	80 83       	st	Z, r24
    336c:	e9 81       	ldd	r30, Y+1	; 0x01
    336e:	fa 81       	ldd	r31, Y+2	; 0x02
    3370:	20 81       	ld	r18, Z
    3372:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    3374:	fe ef       	ldi	r31, 0xFE	; 254
    3376:	20 30       	cpi	r18, 0x00	; 0
    3378:	3f 07       	cpc	r19, r31
    337a:	4c f4       	brge	.+18     	; 0x338e <obstacleAvoidance+0x2d6>
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	9e ef       	ldi	r25, 0xFE	; 254
    3380:	e9 81       	ldd	r30, Y+1	; 0x01
    3382:	fa 81       	ldd	r31, Y+2	; 0x02
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	80 83       	st	Z, r24
    3388:	f2 01       	movw	r30, r4
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    338e:	fe ef       	ldi	r31, 0xFE	; 254
    3390:	80 30       	cpi	r24, 0x00	; 0
    3392:	9f 07       	cpc	r25, r31
    3394:	2c f4       	brge	.+10     	; 0x33a0 <obstacleAvoidance+0x2e8>
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	9e ef       	ldi	r25, 0xFE	; 254
    339a:	f2 01       	movw	r30, r4
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24

}
    33a0:	28 96       	adiw	r28, 0x08	; 8
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	ff 90       	pop	r15
    33b6:	ef 90       	pop	r14
    33b8:	df 90       	pop	r13
    33ba:	cf 90       	pop	r12
    33bc:	bf 90       	pop	r11
    33be:	af 90       	pop	r10
    33c0:	9f 90       	pop	r9
    33c2:	8f 90       	pop	r8
    33c4:	7f 90       	pop	r7
    33c6:	6f 90       	pop	r6
    33c8:	5f 90       	pop	r5
    33ca:	4f 90       	pop	r4
    33cc:	3f 90       	pop	r3
    33ce:	2f 90       	pop	r2
    33d0:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    33d2:	4d 81       	ldd	r20, Y+5	; 0x05
    33d4:	5e 81       	ldd	r21, Y+6	; 0x06
    33d6:	5a 01       	movw	r10, r20
    33d8:	cc 24       	eor	r12, r12
    33da:	b7 fc       	sbrc	r11, 7
    33dc:	c0 94       	com	r12
    33de:	dc 2c       	mov	r13, r12
    33e0:	8f 81       	ldd	r24, Y+7	; 0x07
    33e2:	98 85       	ldd	r25, Y+8	; 0x08
    33e4:	3c 01       	movw	r6, r24
    33e6:	88 24       	eor	r8, r8
    33e8:	77 fc       	sbrc	r7, 7
    33ea:	80 94       	com	r8
    33ec:	98 2c       	mov	r9, r8
    33ee:	79 01       	movw	r14, r18
    33f0:	00 27       	eor	r16, r16
    33f2:	f7 fc       	sbrc	r15, 7
    33f4:	00 95       	com	r16
    33f6:	10 2f       	mov	r17, r16
    33f8:	c8 01       	movw	r24, r16
    33fa:	b7 01       	movw	r22, r14
    33fc:	66 0d       	add	r22, r6
    33fe:	77 1d       	adc	r23, r7
    3400:	88 1d       	adc	r24, r8
    3402:	99 1d       	adc	r25, r9
    3404:	a6 01       	movw	r20, r12
    3406:	95 01       	movw	r18, r10
    3408:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__mulsi3>
    340c:	e7 e0       	ldi	r30, 0x07	; 7
    340e:	95 95       	asr	r25
    3410:	87 95       	ror	r24
    3412:	77 95       	ror	r23
    3414:	67 95       	ror	r22
    3416:	ea 95       	dec	r30
    3418:	d1 f7       	brne	.-12     	; 0x340e <obstacleAvoidance+0x356>
    341a:	26 1b       	sub	r18, r22
    341c:	37 0b       	sbc	r19, r23
    341e:	48 0b       	sbc	r20, r24
    3420:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    3422:	f2 01       	movw	r30, r4
    3424:	31 83       	std	Z+1, r19	; 0x01
    3426:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    3428:	2d 81       	ldd	r18, Y+5	; 0x05
    342a:	3e 81       	ldd	r19, Y+6	; 0x06
    342c:	37 ff       	sbrs	r19, 7
    342e:	67 cf       	rjmp	.-306    	; 0x32fe <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3430:	2b 81       	ldd	r18, Y+3	; 0x03
    3432:	3c 81       	ldd	r19, Y+4	; 0x04
    3434:	59 01       	movw	r10, r18
    3436:	cc 24       	eor	r12, r12
    3438:	b7 fc       	sbrc	r11, 7
    343a:	c0 94       	com	r12
    343c:	dc 2c       	mov	r13, r12
    343e:	c4 01       	movw	r24, r8
    3440:	b3 01       	movw	r22, r6
    3442:	6e 19       	sub	r22, r14
    3444:	7f 09       	sbc	r23, r15
    3446:	80 0b       	sbc	r24, r16
    3448:	91 0b       	sbc	r25, r17
    344a:	a6 01       	movw	r20, r12
    344c:	95 01       	movw	r18, r10
    344e:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__mulsi3>
    3452:	27 e0       	ldi	r18, 0x07	; 7
    3454:	95 95       	asr	r25
    3456:	87 95       	ror	r24
    3458:	77 95       	ror	r23
    345a:	67 95       	ror	r22
    345c:	2a 95       	dec	r18
    345e:	d1 f7       	brne	.-12     	; 0x3454 <obstacleAvoidance+0x39c>
    3460:	a6 1a       	sub	r10, r22
    3462:	b7 0a       	sbc	r11, r23
    3464:	c8 0a       	sbc	r12, r24
    3466:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    3468:	95 01       	movw	r18, r10
    346a:	e9 81       	ldd	r30, Y+1	; 0x01
    346c:	fa 81       	ldd	r31, Y+2	; 0x02
    346e:	b1 82       	std	Z+1, r11	; 0x01
    3470:	a0 82       	st	Z, r10
    3472:	64 cf       	rjmp	.-312    	; 0x333c <obstacleAvoidance+0x284>

00003474 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3474:	80 91 6f 03 	lds	r24, 0x036F
    3478:	90 91 70 03 	lds	r25, 0x0370
    347c:	21 e0       	ldi	r18, 0x01	; 1
    347e:	84 3a       	cpi	r24, 0xA4	; 164
    3480:	92 07       	cpc	r25, r18
    3482:	d4 f0       	brlt	.+52     	; 0x34b8 <cliffDetected+0x44>
    3484:	80 91 71 03 	lds	r24, 0x0371
    3488:	90 91 72 03 	lds	r25, 0x0372
    348c:	21 e0       	ldi	r18, 0x01	; 1
    348e:	84 3a       	cpi	r24, 0xA4	; 164
    3490:	92 07       	cpc	r25, r18
    3492:	94 f0       	brlt	.+36     	; 0x34b8 <cliffDetected+0x44>
    3494:	80 91 73 03 	lds	r24, 0x0373
    3498:	90 91 74 03 	lds	r25, 0x0374
    349c:	21 e0       	ldi	r18, 0x01	; 1
    349e:	84 3a       	cpi	r24, 0xA4	; 164
    34a0:	92 07       	cpc	r25, r18
    34a2:	74 f0       	brlt	.+28     	; 0x34c0 <cliffDetected+0x4c>
		return 1;
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	20 91 75 03 	lds	r18, 0x0375
    34aa:	30 91 76 03 	lds	r19, 0x0376
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	24 3a       	cpi	r18, 0xA4	; 164
    34b2:	39 07       	cpc	r19, r25
    34b4:	1c f4       	brge	.+6      	; 0x34bc <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    34b6:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	08 95       	ret
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	08 95       	ret
    34c0:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    34c2:	08 95       	ret

000034c4 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	80 93 34 05 	sts	0x0534, r24
}
    34ca:	08 95       	ret

000034cc <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    34cc:	10 92 34 05 	sts	0x0534, r1
}
    34d0:	08 95       	ret

000034d2 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	80 93 35 05 	sts	0x0535, r24
}
    34d8:	08 95       	ret

000034da <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    34da:	10 92 35 05 	sts	0x0535, r1
}
    34de:	08 95       	ret

000034e0 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    34e0:	a0 e8       	ldi	r26, 0x80	; 128
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	1c 92       	st	X, r1
	TCCR1B = 0;
    34e6:	e1 e8       	ldi	r30, 0x81	; 129
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    34ec:	8c 91       	ld	r24, X
    34ee:	89 6a       	ori	r24, 0xA9	; 169
    34f0:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    34f2:	80 81       	ld	r24, Z
    34f4:	89 60       	ori	r24, 0x09	; 9
    34f6:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    34f8:	80 91 0c 02 	lds	r24, 0x020C
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	90 93 89 00 	sts	0x0089, r25
    3502:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3506:	80 91 0d 02 	lds	r24, 0x020D
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	90 93 8b 00 	sts	0x008B, r25
    3510:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3514:	80 91 0e 02 	lds	r24, 0x020E
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	90 93 8d 00 	sts	0x008D, r25
    351e:	80 93 8c 00 	sts	0x008C, r24

}
    3522:	08 95       	ret

00003524 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 91 05 04 	lds	r25, 0x0405
    352a:	89 1b       	sub	r24, r25
    352c:	80 93 05 04 	sts	0x0405, r24

	if(blinkState) {
    3530:	88 23       	and	r24, r24
    3532:	39 f4       	brne	.+14     	; 0x3542 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    3534:	80 91 80 00 	lds	r24, 0x0080
    3538:	87 7f       	andi	r24, 0xF7	; 247
    353a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    353e:	2f 98       	cbi	0x05, 7	; 5
    3540:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    3542:	80 91 80 00 	lds	r24, 0x0080
    3546:	88 60       	ori	r24, 0x08	; 8
    3548:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    354c:	8f ef       	ldi	r24, 0xFF	; 255
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	90 93 8d 00 	sts	0x008D, r25
    3554:	80 93 8c 00 	sts	0x008C, r24
    3558:	08 95       	ret

0000355a <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    355a:	88 23       	and	r24, r24
    355c:	59 f0       	breq	.+22     	; 0x3574 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    355e:	90 91 80 00 	lds	r25, 0x0080
    3562:	90 68       	ori	r25, 0x80	; 128
    3564:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	90 93 89 00 	sts	0x0089, r25
    356e:	80 93 88 00 	sts	0x0088, r24
    3572:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3574:	80 91 80 00 	lds	r24, 0x0080
    3578:	8f 77       	andi	r24, 0x7F	; 127
    357a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    357e:	2d 98       	cbi	0x05, 5	; 5
    3580:	08 95       	ret

00003582 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3582:	88 23       	and	r24, r24
    3584:	59 f0       	breq	.+22     	; 0x359c <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3586:	90 91 80 00 	lds	r25, 0x0080
    358a:	90 62       	ori	r25, 0x20	; 32
    358c:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	90 93 8b 00 	sts	0x008B, r25
    3596:	80 93 8a 00 	sts	0x008A, r24
    359a:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    359c:	80 91 80 00 	lds	r24, 0x0080
    35a0:	8f 7d       	andi	r24, 0xDF	; 223
    35a2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    35a6:	2e 98       	cbi	0x05, 6	; 5
    35a8:	08 95       	ret

000035aa <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    35aa:	88 23       	and	r24, r24
    35ac:	59 f0       	breq	.+22     	; 0x35c4 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    35ae:	90 91 80 00 	lds	r25, 0x0080
    35b2:	98 60       	ori	r25, 0x08	; 8
    35b4:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	90 93 8d 00 	sts	0x008D, r25
    35be:	80 93 8c 00 	sts	0x008C, r24
    35c2:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    35c4:	80 91 80 00 	lds	r24, 0x0080
    35c8:	87 7f       	andi	r24, 0xF7	; 247
    35ca:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    35ce:	2f 98       	cbi	0x05, 7	; 5
    35d0:	08 95       	ret

000035d2 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    35d2:	83 30       	cpi	r24, 0x03	; 3
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <setGreenLed+0x6>
    35d6:	5a c0       	rjmp	.+180    	; 0x368c <setGreenLed+0xba>
    35d8:	84 30       	cpi	r24, 0x04	; 4
    35da:	80 f0       	brcs	.+32     	; 0x35fc <setGreenLed+0x2a>
    35dc:	85 30       	cpi	r24, 0x05	; 5
    35de:	09 f4       	brne	.+2      	; 0x35e2 <setGreenLed+0x10>
    35e0:	41 c0       	rjmp	.+130    	; 0x3664 <setGreenLed+0x92>
    35e2:	85 30       	cpi	r24, 0x05	; 5
    35e4:	d0 f4       	brcc	.+52     	; 0x361a <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    35e6:	66 23       	and	r22, r22
    35e8:	09 f4       	brne	.+2      	; 0x35ec <setGreenLed+0x1a>
    35ea:	68 c0       	rjmp	.+208    	; 0x36bc <setGreenLed+0xea>
    35ec:	80 91 0b 01 	lds	r24, 0x010B
    35f0:	8f 7e       	andi	r24, 0xEF	; 239
    35f2:	80 93 0b 01 	sts	0x010B, r24
    35f6:	80 91 0b 01 	lds	r24, 0x010B
    35fa:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    35fc:	81 30       	cpi	r24, 0x01	; 1
    35fe:	e1 f1       	breq	.+120    	; 0x3678 <setGreenLed+0xa6>
    3600:	82 30       	cpi	r24, 0x02	; 2
    3602:	80 f0       	brcs	.+32     	; 0x3624 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3604:	66 23       	and	r22, r22
    3606:	09 f4       	brne	.+2      	; 0x360a <setGreenLed+0x38>
    3608:	46 c0       	rjmp	.+140    	; 0x3696 <setGreenLed+0xc4>
    360a:	80 91 0b 01 	lds	r24, 0x010B
    360e:	8b 7f       	andi	r24, 0xFB	; 251
    3610:	80 93 0b 01 	sts	0x010B, r24
    3614:	80 91 0b 01 	lds	r24, 0x010B
    3618:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    361a:	86 30       	cpi	r24, 0x06	; 6
    361c:	c9 f0       	breq	.+50     	; 0x3650 <setGreenLed+0x7e>
    361e:	87 30       	cpi	r24, 0x07	; 7
    3620:	61 f0       	breq	.+24     	; 0x363a <setGreenLed+0x68>
    3622:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3624:	66 23       	and	r22, r22
    3626:	09 f4       	brne	.+2      	; 0x362a <setGreenLed+0x58>
    3628:	51 c0       	rjmp	.+162    	; 0x36cc <setGreenLed+0xfa>
    362a:	80 91 0b 01 	lds	r24, 0x010B
    362e:	8e 7f       	andi	r24, 0xFE	; 254
    3630:	80 93 0b 01 	sts	0x010B, r24
    3634:	80 91 0b 01 	lds	r24, 0x010B
    3638:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    363a:	66 23       	and	r22, r22
    363c:	09 f0       	breq	.+2      	; 0x3640 <setGreenLed+0x6e>
    363e:	5e c0       	rjmp	.+188    	; 0x36fc <setGreenLed+0x12a>
    3640:	80 91 0b 01 	lds	r24, 0x010B
    3644:	80 68       	ori	r24, 0x80	; 128
    3646:	80 93 0b 01 	sts	0x010B, r24
    364a:	80 91 0b 01 	lds	r24, 0x010B
    364e:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    3650:	66 23       	and	r22, r22
    3652:	49 f1       	breq	.+82     	; 0x36a6 <setGreenLed+0xd4>
    3654:	80 91 0b 01 	lds	r24, 0x010B
    3658:	8f 7b       	andi	r24, 0xBF	; 191
    365a:	80 93 0b 01 	sts	0x010B, r24
    365e:	80 91 0b 01 	lds	r24, 0x010B
    3662:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    3664:	66 23       	and	r22, r22
    3666:	d1 f1       	breq	.+116    	; 0x36dc <setGreenLed+0x10a>
    3668:	80 91 0b 01 	lds	r24, 0x010B
    366c:	8f 7d       	andi	r24, 0xDF	; 223
    366e:	80 93 0b 01 	sts	0x010B, r24
    3672:	80 91 0b 01 	lds	r24, 0x010B
    3676:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3678:	66 23       	and	r22, r22
    367a:	c1 f1       	breq	.+112    	; 0x36ec <setGreenLed+0x11a>
    367c:	80 91 0b 01 	lds	r24, 0x010B
    3680:	8d 7f       	andi	r24, 0xFD	; 253
    3682:	80 93 0b 01 	sts	0x010B, r24
    3686:	80 91 0b 01 	lds	r24, 0x010B
    368a:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    368c:	66 23       	and	r22, r22
    368e:	99 f0       	breq	.+38     	; 0x36b6 <setGreenLed+0xe4>
    3690:	a3 98       	cbi	0x14, 3	; 20
    3692:	84 b3       	in	r24, 0x14	; 20
    3694:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3696:	80 91 0b 01 	lds	r24, 0x010B
    369a:	84 60       	ori	r24, 0x04	; 4
    369c:	80 93 0b 01 	sts	0x010B, r24
    36a0:	80 91 0b 01 	lds	r24, 0x010B
    36a4:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    36a6:	80 91 0b 01 	lds	r24, 0x010B
    36aa:	80 64       	ori	r24, 0x40	; 64
    36ac:	80 93 0b 01 	sts	0x010B, r24
    36b0:	80 91 0b 01 	lds	r24, 0x010B
    36b4:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    36b6:	a3 9a       	sbi	0x14, 3	; 20
    36b8:	84 b3       	in	r24, 0x14	; 20
    36ba:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    36bc:	80 91 0b 01 	lds	r24, 0x010B
    36c0:	80 61       	ori	r24, 0x10	; 16
    36c2:	80 93 0b 01 	sts	0x010B, r24
    36c6:	80 91 0b 01 	lds	r24, 0x010B
    36ca:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    36cc:	80 91 0b 01 	lds	r24, 0x010B
    36d0:	81 60       	ori	r24, 0x01	; 1
    36d2:	80 93 0b 01 	sts	0x010B, r24
    36d6:	80 91 0b 01 	lds	r24, 0x010B
    36da:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    36dc:	80 91 0b 01 	lds	r24, 0x010B
    36e0:	80 62       	ori	r24, 0x20	; 32
    36e2:	80 93 0b 01 	sts	0x010B, r24
    36e6:	80 91 0b 01 	lds	r24, 0x010B
    36ea:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    36ec:	80 91 0b 01 	lds	r24, 0x010B
    36f0:	82 60       	ori	r24, 0x02	; 2
    36f2:	80 93 0b 01 	sts	0x010B, r24
    36f6:	80 91 0b 01 	lds	r24, 0x010B
    36fa:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    36fc:	80 91 0b 01 	lds	r24, 0x010B
    3700:	8f 77       	andi	r24, 0x7F	; 127
    3702:	80 93 0b 01 	sts	0x010B, r24
    3706:	80 91 0b 01 	lds	r24, 0x010B
    370a:	08 95       	ret

0000370c <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    370c:	eb e0       	ldi	r30, 0x0B	; 11
    370e:	f1 e0       	ldi	r31, 0x01	; 1
    3710:	80 81       	ld	r24, Z
    3712:	81 60       	ori	r24, 0x01	; 1
    3714:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    3716:	80 81       	ld	r24, Z
    3718:	82 60       	ori	r24, 0x02	; 2
    371a:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    371c:	80 81       	ld	r24, Z
    371e:	84 60       	ori	r24, 0x04	; 4
    3720:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    3722:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    3724:	80 81       	ld	r24, Z
    3726:	80 61       	ori	r24, 0x10	; 16
    3728:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    372a:	80 81       	ld	r24, Z
    372c:	80 62       	ori	r24, 0x20	; 32
    372e:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    3730:	80 81       	ld	r24, Z
    3732:	80 64       	ori	r24, 0x40	; 64
    3734:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    3736:	80 81       	ld	r24, Z
    3738:	80 68       	ori	r24, 0x80	; 128
    373a:	80 83       	st	Z, r24

}
    373c:	08 95       	ret

0000373e <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    373e:	eb e0       	ldi	r30, 0x0B	; 11
    3740:	f1 e0       	ldi	r31, 0x01	; 1
    3742:	80 81       	ld	r24, Z
    3744:	8e 7f       	andi	r24, 0xFE	; 254
    3746:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    3748:	80 81       	ld	r24, Z
    374a:	8d 7f       	andi	r24, 0xFD	; 253
    374c:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    374e:	80 81       	ld	r24, Z
    3750:	8b 7f       	andi	r24, 0xFB	; 251
    3752:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    3754:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    3756:	80 81       	ld	r24, Z
    3758:	8f 7e       	andi	r24, 0xEF	; 239
    375a:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    375c:	80 81       	ld	r24, Z
    375e:	8f 7d       	andi	r24, 0xDF	; 223
    3760:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    3762:	80 81       	ld	r24, Z
    3764:	8f 7b       	andi	r24, 0xBF	; 191
    3766:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    3768:	80 81       	ld	r24, Z
    376a:	8f 77       	andi	r24, 0x7F	; 127
    376c:	80 83       	st	Z, r24

}
    376e:	08 95       	ret

00003770 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    3770:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3774:	80 91 13 02 	lds	r24, 0x0213
    3778:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    377c:	88 23       	and	r24, r24
    377e:	49 f4       	brne	.+18     	; 0x3792 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3780:	86 e1       	ldi	r24, 0x16	; 22
    3782:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3786:	85 e4       	ldi	r24, 0x45	; 69
    3788:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    378c:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    3790:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3792:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    3796:	86 ea       	ldi	r24, 0xA6	; 166
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	90 93 14 02 	sts	0x0214, r25
    379e:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    37a2:	86 ea       	ldi	r24, 0xA6	; 166
    37a4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    37a8:	88 23       	and	r24, r24
    37aa:	41 f5       	brne	.+80     	; 0x37fc <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    37ac:	8d e2       	ldi	r24, 0x2D	; 45
    37ae:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x08);	// measurement mode
    37b2:	88 e0       	ldi	r24, 0x08	; 8
    37b4:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    37b8:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    37bc:	80 91 13 02 	lds	r24, 0x0213
    37c0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    37c4:	88 23       	and	r24, r24
    37c6:	d1 f4       	brne	.+52     	; 0x37fc <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    37c8:	81 e3       	ldi	r24, 0x31	; 49
    37ca:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    37d4:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    37d8:	80 91 13 02 	lds	r24, 0x0213
    37dc:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    37e0:	88 23       	and	r24, r24
    37e2:	61 f4       	brne	.+24     	; 0x37fc <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    37e4:	8c e2       	ldi	r24, 0x2C	; 44
    37e6:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    37ea:	89 e0       	ldi	r24, 0x09	; 9
    37ec:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    37f0:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	80 93 10 05 	sts	0x0510, r24
    37fa:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    37fc:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	80 93 10 05 	sts	0x0510, r24
    3806:	08 95       	ret

00003808 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3808:	80 91 13 02 	lds	r24, 0x0213
    380c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3810:	88 23       	and	r24, r24
    3812:	51 f4       	brne	.+20     	; 0x3828 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3814:	86 e1       	ldi	r24, 0x16	; 22
    3816:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    381a:	85 e4       	ldi	r24, 0x45	; 69
    381c:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3820:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    }

	return 0;				// configuration ok
    3824:	80 e0       	ldi	r24, 0x00	; 0

}
    3826:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3828:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
		return 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	08 95       	ret

00003830 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3830:	80 91 13 02 	lds	r24, 0x0213
    3834:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3838:	88 23       	and	r24, r24
    383a:	31 f5       	brne	.+76     	; 0x3888 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    383c:	8d e2       	ldi	r24, 0x2D	; 45
    383e:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x08);	// measurement mode
    3842:	88 e0       	ldi	r24, 0x08	; 8
    3844:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3848:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    384c:	80 91 13 02 	lds	r24, 0x0213
    3850:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3854:	88 23       	and	r24, r24
    3856:	c1 f4       	brne	.+48     	; 0x3888 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3858:	81 e3       	ldi	r24, 0x31	; 49
    385a:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3864:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3868:	80 91 13 02 	lds	r24, 0x0213
    386c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3870:	88 23       	and	r24, r24
    3872:	51 f4       	brne	.+20     	; 0x3888 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3874:	8c e2       	ldi	r24, 0x2C	; 44
    3876:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    387a:	89 e0       	ldi	r24, 0x09	; 9
    387c:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3880:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
    }

	return 0;
    3884:	80 e0       	ldi	r24, 0x00	; 0

}
    3886:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3888:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>
		return 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	08 95       	ret

00003890 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    3890:	ff 92       	push	r15
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	0f 92       	push	r0
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    38a0:	80 91 10 05 	lds	r24, 0x0510
    38a4:	88 23       	and	r24, r24
    38a6:	91 f0       	breq	.+36     	; 0x38cc <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    38a8:	81 30       	cpi	r24, 0x01	; 1
    38aa:	09 f4       	brne	.+2      	; 0x38ae <readAccelXY+0x1e>
    38ac:	88 c0       	rjmp	.+272    	; 0x39be <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    38ae:	10 92 12 05 	sts	0x0512, r1
    38b2:	10 92 11 05 	sts	0x0511, r1
		accY = 0;
    38b6:	10 92 14 05 	sts	0x0514, r1
    38ba:	10 92 13 05 	sts	0x0513, r1

	}

}
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    38c8:	ff 90       	pop	r15
    38ca:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    38cc:	80 91 13 02 	lds	r24, 0x0213
    38d0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    38d4:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    38d6:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    38da:	80 91 13 02 	lds	r24, 0x0213
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    38e4:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    38e8:	08 2f       	mov	r16, r24
    38ea:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    38ee:	f8 2e       	mov	r15, r24
    38f0:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    38f4:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    38f6:	0e 94 25 10 	call	0x204a	; 0x204a <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3900:	90 91 63 05 	lds	r25, 0x0563
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	99 23       	and	r25, r25
    3908:	39 f1       	breq	.+78     	; 0x3958 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    390a:	4f 2d       	mov	r20, r15
    390c:	55 27       	eor	r21, r21
    390e:	47 fd       	sbrc	r20, 7
    3910:	50 95       	com	r21
    3912:	54 2f       	mov	r21, r20
    3914:	44 27       	eor	r20, r20
    3916:	60 2f       	mov	r22, r16
    3918:	77 27       	eor	r23, r23
    391a:	67 fd       	sbrc	r22, 7
    391c:	70 95       	com	r23
    391e:	46 2b       	or	r20, r22
    3920:	57 2b       	or	r21, r23
    3922:	50 93 12 05 	sts	0x0512, r21
    3926:	40 93 11 05 	sts	0x0511, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    392a:	28 2f       	mov	r18, r24
    392c:	33 27       	eor	r19, r19
    392e:	27 fd       	sbrc	r18, 7
    3930:	30 95       	com	r19
    3932:	32 2f       	mov	r19, r18
    3934:	22 27       	eor	r18, r18
    3936:	81 2f       	mov	r24, r17
    3938:	99 27       	eor	r25, r25
    393a:	87 fd       	sbrc	r24, 7
    393c:	90 95       	com	r25
    393e:	28 2b       	or	r18, r24
    3940:	39 2b       	or	r19, r25
    3942:	30 93 14 05 	sts	0x0514, r19
    3946:	20 93 13 05 	sts	0x0513, r18
		accX = 0;
		accY = 0;

	}

}
    394a:	0f 90       	pop	r0
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	ff 90       	pop	r15
    3956:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3958:	4f 2d       	mov	r20, r15
    395a:	55 27       	eor	r21, r21
    395c:	47 fd       	sbrc	r20, 7
    395e:	50 95       	com	r21
    3960:	54 2f       	mov	r21, r20
    3962:	44 27       	eor	r20, r20
    3964:	60 2f       	mov	r22, r16
    3966:	77 27       	eor	r23, r23
    3968:	67 fd       	sbrc	r22, 7
    396a:	70 95       	com	r23
    396c:	46 2b       	or	r20, r22
    396e:	57 2b       	or	r21, r23
    3970:	60 91 17 05 	lds	r22, 0x0517
    3974:	70 91 18 05 	lds	r23, 0x0518
    3978:	46 1b       	sub	r20, r22
    397a:	57 0b       	sbc	r21, r23
    397c:	50 93 12 05 	sts	0x0512, r21
    3980:	40 93 11 05 	sts	0x0511, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3984:	28 2f       	mov	r18, r24
    3986:	33 27       	eor	r19, r19
    3988:	27 fd       	sbrc	r18, 7
    398a:	30 95       	com	r19
    398c:	32 2f       	mov	r19, r18
    398e:	22 27       	eor	r18, r18
    3990:	81 2f       	mov	r24, r17
    3992:	99 27       	eor	r25, r25
    3994:	87 fd       	sbrc	r24, 7
    3996:	90 95       	com	r25
    3998:	28 2b       	or	r18, r24
    399a:	39 2b       	or	r19, r25
    399c:	80 91 19 05 	lds	r24, 0x0519
    39a0:	90 91 1a 05 	lds	r25, 0x051A
    39a4:	28 1b       	sub	r18, r24
    39a6:	39 0b       	sbc	r19, r25
    39a8:	30 93 14 05 	sts	0x0514, r19
    39ac:	20 93 13 05 	sts	0x0513, r18
		accX = 0;
		accY = 0;

	}

}
    39b0:	0f 90       	pop	r0
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	ff 90       	pop	r15
    39bc:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    39be:	80 91 13 02 	lds	r24, 0x0213
    39c2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    39c6:	82 e3       	ldi	r24, 0x32	; 50
    39c8:	86 cf       	rjmp	.-244    	; 0x38d6 <readAccelXY+0x46>

000039ca <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <readAccelXYZ+0x6>
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <readAccelXYZ+0x8>
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    39d6:	80 91 10 05 	lds	r24, 0x0510
    39da:	88 23       	and	r24, r24
    39dc:	c1 f0       	breq	.+48     	; 0x3a0e <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    39de:	81 30       	cpi	r24, 0x01	; 1
    39e0:	09 f4       	brne	.+2      	; 0x39e4 <readAccelXYZ+0x1a>
    39e2:	ad c0       	rjmp	.+346    	; 0x3b3e <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    39e4:	10 92 12 05 	sts	0x0512, r1
    39e8:	10 92 11 05 	sts	0x0511, r1
		accY = 0;
    39ec:	10 92 14 05 	sts	0x0514, r1
    39f0:	10 92 13 05 	sts	0x0513, r1
		accZ = 0;
    39f4:	10 92 16 05 	sts	0x0516, r1
    39f8:	10 92 15 05 	sts	0x0515, r1

	}

}
    39fc:	26 96       	adiw	r28, 0x06	; 6
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3a0e:	80 91 13 02 	lds	r24, 0x0213
    3a12:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3a16:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3a18:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3a1c:	80 91 13 02 	lds	r24, 0x0213
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3a26:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    3a2c:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    3a30:	8a 83       	std	Y+2, r24	; 0x02
    3a32:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    3a36:	8b 83       	std	Y+3, r24	; 0x03
    3a38:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    3a3c:	8c 83       	std	Y+4, r24	; 0x04
    3a3e:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    3a42:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3a44:	0e 94 25 10 	call	0x204a	; 0x204a <i2c_readNak>
    3a48:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3a4a:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3a4e:	80 91 63 05 	lds	r24, 0x0563
    3a52:	88 23       	and	r24, r24
    3a54:	89 f1       	breq	.+98     	; 0x3ab8 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	99 27       	eor	r25, r25
    3a5a:	87 fd       	sbrc	r24, 7
    3a5c:	90 95       	com	r25
    3a5e:	98 2f       	mov	r25, r24
    3a60:	88 27       	eor	r24, r24
    3a62:	29 81       	ldd	r18, Y+1	; 0x01
    3a64:	33 27       	eor	r19, r19
    3a66:	27 fd       	sbrc	r18, 7
    3a68:	30 95       	com	r19
    3a6a:	82 2b       	or	r24, r18
    3a6c:	93 2b       	or	r25, r19
    3a6e:	90 93 12 05 	sts	0x0512, r25
    3a72:	80 93 11 05 	sts	0x0511, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3a76:	8c 81       	ldd	r24, Y+4	; 0x04
    3a78:	99 27       	eor	r25, r25
    3a7a:	87 fd       	sbrc	r24, 7
    3a7c:	90 95       	com	r25
    3a7e:	98 2f       	mov	r25, r24
    3a80:	88 27       	eor	r24, r24
    3a82:	2b 81       	ldd	r18, Y+3	; 0x03
    3a84:	33 27       	eor	r19, r19
    3a86:	27 fd       	sbrc	r18, 7
    3a88:	30 95       	com	r19
    3a8a:	82 2b       	or	r24, r18
    3a8c:	93 2b       	or	r25, r19
    3a8e:	90 93 14 05 	sts	0x0514, r25
    3a92:	80 93 13 05 	sts	0x0513, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    3a96:	8e 81       	ldd	r24, Y+6	; 0x06
    3a98:	99 27       	eor	r25, r25
    3a9a:	87 fd       	sbrc	r24, 7
    3a9c:	90 95       	com	r25
    3a9e:	98 2f       	mov	r25, r24
    3aa0:	88 27       	eor	r24, r24
    3aa2:	2d 81       	ldd	r18, Y+5	; 0x05
    3aa4:	33 27       	eor	r19, r19
    3aa6:	27 fd       	sbrc	r18, 7
    3aa8:	30 95       	com	r19
    3aaa:	82 2b       	or	r24, r18
    3aac:	93 2b       	or	r25, r19
    3aae:	90 93 16 05 	sts	0x0516, r25
    3ab2:	80 93 15 05 	sts	0x0515, r24
    3ab6:	a2 cf       	rjmp	.-188    	; 0x39fc <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aba:	99 27       	eor	r25, r25
    3abc:	87 fd       	sbrc	r24, 7
    3abe:	90 95       	com	r25
    3ac0:	98 2f       	mov	r25, r24
    3ac2:	88 27       	eor	r24, r24
    3ac4:	29 81       	ldd	r18, Y+1	; 0x01
    3ac6:	33 27       	eor	r19, r19
    3ac8:	27 fd       	sbrc	r18, 7
    3aca:	30 95       	com	r19
    3acc:	82 2b       	or	r24, r18
    3ace:	93 2b       	or	r25, r19
    3ad0:	20 91 17 05 	lds	r18, 0x0517
    3ad4:	30 91 18 05 	lds	r19, 0x0518
    3ad8:	82 1b       	sub	r24, r18
    3ada:	93 0b       	sbc	r25, r19
    3adc:	90 93 12 05 	sts	0x0512, r25
    3ae0:	80 93 11 05 	sts	0x0511, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	99 27       	eor	r25, r25
    3ae8:	87 fd       	sbrc	r24, 7
    3aea:	90 95       	com	r25
    3aec:	98 2f       	mov	r25, r24
    3aee:	88 27       	eor	r24, r24
    3af0:	2b 81       	ldd	r18, Y+3	; 0x03
    3af2:	33 27       	eor	r19, r19
    3af4:	27 fd       	sbrc	r18, 7
    3af6:	30 95       	com	r19
    3af8:	82 2b       	or	r24, r18
    3afa:	93 2b       	or	r25, r19
    3afc:	20 91 19 05 	lds	r18, 0x0519
    3b00:	30 91 1a 05 	lds	r19, 0x051A
    3b04:	82 1b       	sub	r24, r18
    3b06:	93 0b       	sbc	r25, r19
    3b08:	90 93 14 05 	sts	0x0514, r25
    3b0c:	80 93 13 05 	sts	0x0513, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3b10:	8e 81       	ldd	r24, Y+6	; 0x06
    3b12:	99 27       	eor	r25, r25
    3b14:	87 fd       	sbrc	r24, 7
    3b16:	90 95       	com	r25
    3b18:	98 2f       	mov	r25, r24
    3b1a:	88 27       	eor	r24, r24
    3b1c:	2d 81       	ldd	r18, Y+5	; 0x05
    3b1e:	33 27       	eor	r19, r19
    3b20:	27 fd       	sbrc	r18, 7
    3b22:	30 95       	com	r19
    3b24:	82 2b       	or	r24, r18
    3b26:	93 2b       	or	r25, r19
    3b28:	20 91 1b 05 	lds	r18, 0x051B
    3b2c:	30 91 1c 05 	lds	r19, 0x051C
    3b30:	82 1b       	sub	r24, r18
    3b32:	93 0b       	sbc	r25, r19
    3b34:	90 93 16 05 	sts	0x0516, r25
    3b38:	80 93 15 05 	sts	0x0515, r24
    3b3c:	5f cf       	rjmp	.-322    	; 0x39fc <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    3b3e:	80 91 13 02 	lds	r24, 0x0213
    3b42:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3b46:	82 e3       	ldi	r24, 0x32	; 50
    3b48:	67 cf       	rjmp	.-306    	; 0x3a18 <readAccelXYZ+0x4e>

00003b4a <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    3b4e:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    3b52:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    3b56:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
	updateGreenLed(pwm_green);
    3b60:	80 91 0d 02 	lds	r24, 0x020D
    3b64:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
	updateBlueLed(pwm_blue);
    3b68:	80 91 0e 02 	lds	r24, 0x020E
    3b6c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>

	calibrationCycle = 0;
    3b70:	10 92 32 05 	sts	0x0532, r1
    3b74:	10 92 31 05 	sts	0x0531, r1
	startCalibration = 1;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	80 93 63 05 	sts	0x0563, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3b7e:	c1 e0       	ldi	r28, 0x01	; 1
    3b80:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3b82:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    3b86:	20 91 31 05 	lds	r18, 0x0531
    3b8a:	30 91 32 05 	lds	r19, 0x0532
    3b8e:	21 31       	cpi	r18, 0x11	; 17
    3b90:	31 05       	cpc	r19, r1
    3b92:	0c f4       	brge	.+2      	; 0x3b96 <calibrateSensors+0x4c>
    3b94:	35 c1       	rjmp	.+618    	; 0x3e00 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    3b96:	80 91 8f 03 	lds	r24, 0x038F
    3b9a:	90 91 90 03 	lds	r25, 0x0390
    3b9e:	a0 91 91 03 	lds	r26, 0x0391
    3ba2:	b0 91 92 03 	lds	r27, 0x0392
    3ba6:	54 e0       	ldi	r21, 0x04	; 4
    3ba8:	b6 95       	lsr	r27
    3baa:	a7 95       	ror	r26
    3bac:	97 95       	ror	r25
    3bae:	87 95       	ror	r24
    3bb0:	5a 95       	dec	r21
    3bb2:	d1 f7       	brne	.-12     	; 0x3ba8 <calibrateSensors+0x5e>
    3bb4:	90 93 78 03 	sts	0x0378, r25
    3bb8:	80 93 77 03 	sts	0x0377, r24
    3bbc:	80 91 93 03 	lds	r24, 0x0393
    3bc0:	90 91 94 03 	lds	r25, 0x0394
    3bc4:	a0 91 95 03 	lds	r26, 0x0395
    3bc8:	b0 91 96 03 	lds	r27, 0x0396
    3bcc:	44 e0       	ldi	r20, 0x04	; 4
    3bce:	b6 95       	lsr	r27
    3bd0:	a7 95       	ror	r26
    3bd2:	97 95       	ror	r25
    3bd4:	87 95       	ror	r24
    3bd6:	4a 95       	dec	r20
    3bd8:	d1 f7       	brne	.-12     	; 0x3bce <calibrateSensors+0x84>
    3bda:	90 93 7a 03 	sts	0x037A, r25
    3bde:	80 93 79 03 	sts	0x0379, r24
    3be2:	80 91 97 03 	lds	r24, 0x0397
    3be6:	90 91 98 03 	lds	r25, 0x0398
    3bea:	a0 91 99 03 	lds	r26, 0x0399
    3bee:	b0 91 9a 03 	lds	r27, 0x039A
    3bf2:	34 e0       	ldi	r19, 0x04	; 4
    3bf4:	b6 95       	lsr	r27
    3bf6:	a7 95       	ror	r26
    3bf8:	97 95       	ror	r25
    3bfa:	87 95       	ror	r24
    3bfc:	3a 95       	dec	r19
    3bfe:	d1 f7       	brne	.-12     	; 0x3bf4 <calibrateSensors+0xaa>
    3c00:	90 93 7c 03 	sts	0x037C, r25
    3c04:	80 93 7b 03 	sts	0x037B, r24
    3c08:	80 91 9b 03 	lds	r24, 0x039B
    3c0c:	90 91 9c 03 	lds	r25, 0x039C
    3c10:	a0 91 9d 03 	lds	r26, 0x039D
    3c14:	b0 91 9e 03 	lds	r27, 0x039E
    3c18:	24 e0       	ldi	r18, 0x04	; 4
    3c1a:	b6 95       	lsr	r27
    3c1c:	a7 95       	ror	r26
    3c1e:	97 95       	ror	r25
    3c20:	87 95       	ror	r24
    3c22:	2a 95       	dec	r18
    3c24:	d1 f7       	brne	.-12     	; 0x3c1a <calibrateSensors+0xd0>
    3c26:	90 93 7e 03 	sts	0x037E, r25
    3c2a:	80 93 7d 03 	sts	0x037D, r24
    3c2e:	80 91 9f 03 	lds	r24, 0x039F
    3c32:	90 91 a0 03 	lds	r25, 0x03A0
    3c36:	a0 91 a1 03 	lds	r26, 0x03A1
    3c3a:	b0 91 a2 03 	lds	r27, 0x03A2
    3c3e:	f4 e0       	ldi	r31, 0x04	; 4
    3c40:	b6 95       	lsr	r27
    3c42:	a7 95       	ror	r26
    3c44:	97 95       	ror	r25
    3c46:	87 95       	ror	r24
    3c48:	fa 95       	dec	r31
    3c4a:	d1 f7       	brne	.-12     	; 0x3c40 <calibrateSensors+0xf6>
    3c4c:	90 93 80 03 	sts	0x0380, r25
    3c50:	80 93 7f 03 	sts	0x037F, r24
    3c54:	80 91 a3 03 	lds	r24, 0x03A3
    3c58:	90 91 a4 03 	lds	r25, 0x03A4
    3c5c:	a0 91 a5 03 	lds	r26, 0x03A5
    3c60:	b0 91 a6 03 	lds	r27, 0x03A6
    3c64:	e4 e0       	ldi	r30, 0x04	; 4
    3c66:	b6 95       	lsr	r27
    3c68:	a7 95       	ror	r26
    3c6a:	97 95       	ror	r25
    3c6c:	87 95       	ror	r24
    3c6e:	ea 95       	dec	r30
    3c70:	d1 f7       	brne	.-12     	; 0x3c66 <calibrateSensors+0x11c>
    3c72:	90 93 82 03 	sts	0x0382, r25
    3c76:	80 93 81 03 	sts	0x0381, r24
    3c7a:	80 91 a7 03 	lds	r24, 0x03A7
    3c7e:	90 91 a8 03 	lds	r25, 0x03A8
    3c82:	a0 91 a9 03 	lds	r26, 0x03A9
    3c86:	b0 91 aa 03 	lds	r27, 0x03AA
    3c8a:	74 e0       	ldi	r23, 0x04	; 4
    3c8c:	b6 95       	lsr	r27
    3c8e:	a7 95       	ror	r26
    3c90:	97 95       	ror	r25
    3c92:	87 95       	ror	r24
    3c94:	7a 95       	dec	r23
    3c96:	d1 f7       	brne	.-12     	; 0x3c8c <calibrateSensors+0x142>
    3c98:	90 93 84 03 	sts	0x0384, r25
    3c9c:	80 93 83 03 	sts	0x0383, r24
    3ca0:	80 91 ab 03 	lds	r24, 0x03AB
    3ca4:	90 91 ac 03 	lds	r25, 0x03AC
    3ca8:	a0 91 ad 03 	lds	r26, 0x03AD
    3cac:	b0 91 ae 03 	lds	r27, 0x03AE
    3cb0:	64 e0       	ldi	r22, 0x04	; 4
    3cb2:	b6 95       	lsr	r27
    3cb4:	a7 95       	ror	r26
    3cb6:	97 95       	ror	r25
    3cb8:	87 95       	ror	r24
    3cba:	6a 95       	dec	r22
    3cbc:	d1 f7       	brne	.-12     	; 0x3cb2 <calibrateSensors+0x168>
    3cbe:	90 93 86 03 	sts	0x0386, r25
    3cc2:	80 93 85 03 	sts	0x0385, r24
    3cc6:	80 91 b3 03 	lds	r24, 0x03B3
    3cca:	90 91 b4 03 	lds	r25, 0x03B4
    3cce:	a0 91 b5 03 	lds	r26, 0x03B5
    3cd2:	b0 91 b6 03 	lds	r27, 0x03B6
    3cd6:	54 e0       	ldi	r21, 0x04	; 4
    3cd8:	b6 95       	lsr	r27
    3cda:	a7 95       	ror	r26
    3cdc:	97 95       	ror	r25
    3cde:	87 95       	ror	r24
    3ce0:	5a 95       	dec	r21
    3ce2:	d1 f7       	brne	.-12     	; 0x3cd8 <calibrateSensors+0x18e>
    3ce4:	9c 01       	movw	r18, r24
    3ce6:	80 91 b7 03 	lds	r24, 0x03B7
    3cea:	90 91 b8 03 	lds	r25, 0x03B8
    3cee:	a0 91 b9 03 	lds	r26, 0x03B9
    3cf2:	b0 91 ba 03 	lds	r27, 0x03BA
    3cf6:	44 e0       	ldi	r20, 0x04	; 4
    3cf8:	b6 95       	lsr	r27
    3cfa:	a7 95       	ror	r26
    3cfc:	97 95       	ror	r25
    3cfe:	87 95       	ror	r24
    3d00:	4a 95       	dec	r20
    3d02:	d1 f7       	brne	.-12     	; 0x3cf8 <calibrateSensors+0x1ae>
    3d04:	bc 01       	movw	r22, r24
    3d06:	80 91 bb 03 	lds	r24, 0x03BB
    3d0a:	90 91 bc 03 	lds	r25, 0x03BC
    3d0e:	a0 91 bd 03 	lds	r26, 0x03BD
    3d12:	b0 91 be 03 	lds	r27, 0x03BE
    3d16:	f4 e0       	ldi	r31, 0x04	; 4
    3d18:	b6 95       	lsr	r27
    3d1a:	a7 95       	ror	r26
    3d1c:	97 95       	ror	r25
    3d1e:	87 95       	ror	r24
    3d20:	fa 95       	dec	r31
    3d22:	d1 f7       	brne	.-12     	; 0x3d18 <calibrateSensors+0x1ce>
    3d24:	ac 01       	movw	r20, r24
    3d26:	80 91 af 03 	lds	r24, 0x03AF
    3d2a:	90 91 b0 03 	lds	r25, 0x03B0
    3d2e:	a0 91 b1 03 	lds	r26, 0x03B1
    3d32:	b0 91 b2 03 	lds	r27, 0x03B2
    3d36:	e4 e0       	ldi	r30, 0x04	; 4
    3d38:	b6 95       	lsr	r27
    3d3a:	a7 95       	ror	r26
    3d3c:	97 95       	ror	r25
    3d3e:	87 95       	ror	r24
    3d40:	ea 95       	dec	r30
    3d42:	d1 f7       	brne	.-12     	; 0x3d38 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    3d44:	80 50       	subi	r24, 0x00	; 0
    3d46:	92 40       	sbci	r25, 0x02	; 2
    3d48:	90 93 88 03 	sts	0x0388, r25
    3d4c:	80 93 87 03 	sts	0x0387, r24
    3d50:	20 50       	subi	r18, 0x00	; 0
    3d52:	32 40       	sbci	r19, 0x02	; 2
    3d54:	30 93 8a 03 	sts	0x038A, r19
    3d58:	20 93 89 03 	sts	0x0389, r18
    3d5c:	60 50       	subi	r22, 0x00	; 0
    3d5e:	72 40       	sbci	r23, 0x02	; 2
    3d60:	70 93 8c 03 	sts	0x038C, r23
    3d64:	60 93 8b 03 	sts	0x038B, r22
    3d68:	40 50       	subi	r20, 0x00	; 0
    3d6a:	52 40       	sbci	r21, 0x02	; 2
    3d6c:	50 93 8e 03 	sts	0x038E, r21
    3d70:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    3d74:	80 91 1d 05 	lds	r24, 0x051D
    3d78:	90 91 1e 05 	lds	r25, 0x051E
    3d7c:	95 95       	asr	r25
    3d7e:	87 95       	ror	r24
    3d80:	95 95       	asr	r25
    3d82:	87 95       	ror	r24
    3d84:	95 95       	asr	r25
    3d86:	87 95       	ror	r24
    3d88:	95 95       	asr	r25
    3d8a:	87 95       	ror	r24
    3d8c:	90 93 18 05 	sts	0x0518, r25
    3d90:	80 93 17 05 	sts	0x0517, r24
			accOffsetY = accOffsetYSum>>4;
    3d94:	80 91 1f 05 	lds	r24, 0x051F
    3d98:	90 91 20 05 	lds	r25, 0x0520
    3d9c:	95 95       	asr	r25
    3d9e:	87 95       	ror	r24
    3da0:	95 95       	asr	r25
    3da2:	87 95       	ror	r24
    3da4:	95 95       	asr	r25
    3da6:	87 95       	ror	r24
    3da8:	95 95       	asr	r25
    3daa:	87 95       	ror	r24
    3dac:	90 93 1a 05 	sts	0x051A, r25
    3db0:	80 93 19 05 	sts	0x0519, r24
			accOffsetZ = accOffsetZSum>>4;
    3db4:	80 91 21 05 	lds	r24, 0x0521
    3db8:	90 91 22 05 	lds	r25, 0x0522
    3dbc:	95 95       	asr	r25
    3dbe:	87 95       	ror	r24
    3dc0:	95 95       	asr	r25
    3dc2:	87 95       	ror	r24
    3dc4:	95 95       	asr	r25
    3dc6:	87 95       	ror	r24
    3dc8:	95 95       	asr	r25
    3dca:	87 95       	ror	r24
    3dcc:	90 93 1c 05 	sts	0x051C, r25
    3dd0:	80 93 1b 05 	sts	0x051B, r24

			startCalibration = 0;
    3dd4:	10 92 63 05 	sts	0x0563, r1

		}

	}

	pwm_red = 255;
    3dd8:	8f ef       	ldi	r24, 0xFF	; 255
    3dda:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3dde:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3de2:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3de6:	0e 94 ad 1a 	call	0x355a	; 0x355a <updateRedLed>
	updateGreenLed(pwm_green);
    3dea:	80 91 0d 02 	lds	r24, 0x020D
    3dee:	0e 94 c1 1a 	call	0x3582	; 0x3582 <updateGreenLed>
	updateBlueLed(pwm_blue);
    3df2:	80 91 0e 02 	lds	r24, 0x020E
    3df6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <updateBlueLed>

}
    3dfa:	df 91       	pop	r29
    3dfc:	cf 91       	pop	r28
    3dfe:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3e00:	80 91 c6 03 	lds	r24, 0x03C6
    3e04:	88 23       	and	r24, r24
    3e06:	09 f4       	brne	.+2      	; 0x3e0a <calibrateSensors+0x2c0>
    3e08:	86 c1       	rjmp	.+780    	; 0x4116 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3e0a:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    3e0e:	21 15       	cp	r18, r1
    3e10:	31 05       	cpc	r19, r1
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <calibrateSensors+0x2cc>
    3e14:	86 c1       	rjmp	.+780    	; 0x4122 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3e16:	80 91 5f 03 	lds	r24, 0x035F
    3e1a:	90 91 60 03 	lds	r25, 0x0360
    3e1e:	aa 27       	eor	r26, r26
    3e20:	97 fd       	sbrc	r25, 7
    3e22:	a0 95       	com	r26
    3e24:	ba 2f       	mov	r27, r26
    3e26:	40 91 8f 03 	lds	r20, 0x038F
    3e2a:	50 91 90 03 	lds	r21, 0x0390
    3e2e:	60 91 91 03 	lds	r22, 0x0391
    3e32:	70 91 92 03 	lds	r23, 0x0392
    3e36:	84 0f       	add	r24, r20
    3e38:	95 1f       	adc	r25, r21
    3e3a:	a6 1f       	adc	r26, r22
    3e3c:	b7 1f       	adc	r27, r23
    3e3e:	80 93 8f 03 	sts	0x038F, r24
    3e42:	90 93 90 03 	sts	0x0390, r25
    3e46:	a0 93 91 03 	sts	0x0391, r26
    3e4a:	b0 93 92 03 	sts	0x0392, r27
    3e4e:	80 91 61 03 	lds	r24, 0x0361
    3e52:	90 91 62 03 	lds	r25, 0x0362
    3e56:	aa 27       	eor	r26, r26
    3e58:	97 fd       	sbrc	r25, 7
    3e5a:	a0 95       	com	r26
    3e5c:	ba 2f       	mov	r27, r26
    3e5e:	40 91 93 03 	lds	r20, 0x0393
    3e62:	50 91 94 03 	lds	r21, 0x0394
    3e66:	60 91 95 03 	lds	r22, 0x0395
    3e6a:	70 91 96 03 	lds	r23, 0x0396
    3e6e:	84 0f       	add	r24, r20
    3e70:	95 1f       	adc	r25, r21
    3e72:	a6 1f       	adc	r26, r22
    3e74:	b7 1f       	adc	r27, r23
    3e76:	80 93 93 03 	sts	0x0393, r24
    3e7a:	90 93 94 03 	sts	0x0394, r25
    3e7e:	a0 93 95 03 	sts	0x0395, r26
    3e82:	b0 93 96 03 	sts	0x0396, r27
    3e86:	80 91 63 03 	lds	r24, 0x0363
    3e8a:	90 91 64 03 	lds	r25, 0x0364
    3e8e:	aa 27       	eor	r26, r26
    3e90:	97 fd       	sbrc	r25, 7
    3e92:	a0 95       	com	r26
    3e94:	ba 2f       	mov	r27, r26
    3e96:	40 91 97 03 	lds	r20, 0x0397
    3e9a:	50 91 98 03 	lds	r21, 0x0398
    3e9e:	60 91 99 03 	lds	r22, 0x0399
    3ea2:	70 91 9a 03 	lds	r23, 0x039A
    3ea6:	84 0f       	add	r24, r20
    3ea8:	95 1f       	adc	r25, r21
    3eaa:	a6 1f       	adc	r26, r22
    3eac:	b7 1f       	adc	r27, r23
    3eae:	80 93 97 03 	sts	0x0397, r24
    3eb2:	90 93 98 03 	sts	0x0398, r25
    3eb6:	a0 93 99 03 	sts	0x0399, r26
    3eba:	b0 93 9a 03 	sts	0x039A, r27
    3ebe:	80 91 65 03 	lds	r24, 0x0365
    3ec2:	90 91 66 03 	lds	r25, 0x0366
    3ec6:	aa 27       	eor	r26, r26
    3ec8:	97 fd       	sbrc	r25, 7
    3eca:	a0 95       	com	r26
    3ecc:	ba 2f       	mov	r27, r26
    3ece:	40 91 9b 03 	lds	r20, 0x039B
    3ed2:	50 91 9c 03 	lds	r21, 0x039C
    3ed6:	60 91 9d 03 	lds	r22, 0x039D
    3eda:	70 91 9e 03 	lds	r23, 0x039E
    3ede:	84 0f       	add	r24, r20
    3ee0:	95 1f       	adc	r25, r21
    3ee2:	a6 1f       	adc	r26, r22
    3ee4:	b7 1f       	adc	r27, r23
    3ee6:	80 93 9b 03 	sts	0x039B, r24
    3eea:	90 93 9c 03 	sts	0x039C, r25
    3eee:	a0 93 9d 03 	sts	0x039D, r26
    3ef2:	b0 93 9e 03 	sts	0x039E, r27
    3ef6:	80 91 67 03 	lds	r24, 0x0367
    3efa:	90 91 68 03 	lds	r25, 0x0368
    3efe:	aa 27       	eor	r26, r26
    3f00:	97 fd       	sbrc	r25, 7
    3f02:	a0 95       	com	r26
    3f04:	ba 2f       	mov	r27, r26
    3f06:	40 91 9f 03 	lds	r20, 0x039F
    3f0a:	50 91 a0 03 	lds	r21, 0x03A0
    3f0e:	60 91 a1 03 	lds	r22, 0x03A1
    3f12:	70 91 a2 03 	lds	r23, 0x03A2
    3f16:	84 0f       	add	r24, r20
    3f18:	95 1f       	adc	r25, r21
    3f1a:	a6 1f       	adc	r26, r22
    3f1c:	b7 1f       	adc	r27, r23
    3f1e:	80 93 9f 03 	sts	0x039F, r24
    3f22:	90 93 a0 03 	sts	0x03A0, r25
    3f26:	a0 93 a1 03 	sts	0x03A1, r26
    3f2a:	b0 93 a2 03 	sts	0x03A2, r27
    3f2e:	80 91 69 03 	lds	r24, 0x0369
    3f32:	90 91 6a 03 	lds	r25, 0x036A
    3f36:	aa 27       	eor	r26, r26
    3f38:	97 fd       	sbrc	r25, 7
    3f3a:	a0 95       	com	r26
    3f3c:	ba 2f       	mov	r27, r26
    3f3e:	40 91 a3 03 	lds	r20, 0x03A3
    3f42:	50 91 a4 03 	lds	r21, 0x03A4
    3f46:	60 91 a5 03 	lds	r22, 0x03A5
    3f4a:	70 91 a6 03 	lds	r23, 0x03A6
    3f4e:	84 0f       	add	r24, r20
    3f50:	95 1f       	adc	r25, r21
    3f52:	a6 1f       	adc	r26, r22
    3f54:	b7 1f       	adc	r27, r23
    3f56:	80 93 a3 03 	sts	0x03A3, r24
    3f5a:	90 93 a4 03 	sts	0x03A4, r25
    3f5e:	a0 93 a5 03 	sts	0x03A5, r26
    3f62:	b0 93 a6 03 	sts	0x03A6, r27
    3f66:	80 91 6b 03 	lds	r24, 0x036B
    3f6a:	90 91 6c 03 	lds	r25, 0x036C
    3f6e:	aa 27       	eor	r26, r26
    3f70:	97 fd       	sbrc	r25, 7
    3f72:	a0 95       	com	r26
    3f74:	ba 2f       	mov	r27, r26
    3f76:	40 91 a7 03 	lds	r20, 0x03A7
    3f7a:	50 91 a8 03 	lds	r21, 0x03A8
    3f7e:	60 91 a9 03 	lds	r22, 0x03A9
    3f82:	70 91 aa 03 	lds	r23, 0x03AA
    3f86:	84 0f       	add	r24, r20
    3f88:	95 1f       	adc	r25, r21
    3f8a:	a6 1f       	adc	r26, r22
    3f8c:	b7 1f       	adc	r27, r23
    3f8e:	80 93 a7 03 	sts	0x03A7, r24
    3f92:	90 93 a8 03 	sts	0x03A8, r25
    3f96:	a0 93 a9 03 	sts	0x03A9, r26
    3f9a:	b0 93 aa 03 	sts	0x03AA, r27
    3f9e:	80 91 6d 03 	lds	r24, 0x036D
    3fa2:	90 91 6e 03 	lds	r25, 0x036E
    3fa6:	aa 27       	eor	r26, r26
    3fa8:	97 fd       	sbrc	r25, 7
    3faa:	a0 95       	com	r26
    3fac:	ba 2f       	mov	r27, r26
    3fae:	40 91 ab 03 	lds	r20, 0x03AB
    3fb2:	50 91 ac 03 	lds	r21, 0x03AC
    3fb6:	60 91 ad 03 	lds	r22, 0x03AD
    3fba:	70 91 ae 03 	lds	r23, 0x03AE
    3fbe:	84 0f       	add	r24, r20
    3fc0:	95 1f       	adc	r25, r21
    3fc2:	a6 1f       	adc	r26, r22
    3fc4:	b7 1f       	adc	r27, r23
    3fc6:	80 93 ab 03 	sts	0x03AB, r24
    3fca:	90 93 ac 03 	sts	0x03AC, r25
    3fce:	a0 93 ad 03 	sts	0x03AD, r26
    3fd2:	b0 93 ae 03 	sts	0x03AE, r27
    3fd6:	80 91 6f 03 	lds	r24, 0x036F
    3fda:	90 91 70 03 	lds	r25, 0x0370
    3fde:	aa 27       	eor	r26, r26
    3fe0:	97 fd       	sbrc	r25, 7
    3fe2:	a0 95       	com	r26
    3fe4:	ba 2f       	mov	r27, r26
    3fe6:	40 91 af 03 	lds	r20, 0x03AF
    3fea:	50 91 b0 03 	lds	r21, 0x03B0
    3fee:	60 91 b1 03 	lds	r22, 0x03B1
    3ff2:	70 91 b2 03 	lds	r23, 0x03B2
    3ff6:	84 0f       	add	r24, r20
    3ff8:	95 1f       	adc	r25, r21
    3ffa:	a6 1f       	adc	r26, r22
    3ffc:	b7 1f       	adc	r27, r23
    3ffe:	80 93 af 03 	sts	0x03AF, r24
    4002:	90 93 b0 03 	sts	0x03B0, r25
    4006:	a0 93 b1 03 	sts	0x03B1, r26
    400a:	b0 93 b2 03 	sts	0x03B2, r27
    400e:	80 91 71 03 	lds	r24, 0x0371
    4012:	90 91 72 03 	lds	r25, 0x0372
    4016:	aa 27       	eor	r26, r26
    4018:	97 fd       	sbrc	r25, 7
    401a:	a0 95       	com	r26
    401c:	ba 2f       	mov	r27, r26
    401e:	40 91 b3 03 	lds	r20, 0x03B3
    4022:	50 91 b4 03 	lds	r21, 0x03B4
    4026:	60 91 b5 03 	lds	r22, 0x03B5
    402a:	70 91 b6 03 	lds	r23, 0x03B6
    402e:	84 0f       	add	r24, r20
    4030:	95 1f       	adc	r25, r21
    4032:	a6 1f       	adc	r26, r22
    4034:	b7 1f       	adc	r27, r23
    4036:	80 93 b3 03 	sts	0x03B3, r24
    403a:	90 93 b4 03 	sts	0x03B4, r25
    403e:	a0 93 b5 03 	sts	0x03B5, r26
    4042:	b0 93 b6 03 	sts	0x03B6, r27
    4046:	80 91 73 03 	lds	r24, 0x0373
    404a:	90 91 74 03 	lds	r25, 0x0374
    404e:	aa 27       	eor	r26, r26
    4050:	97 fd       	sbrc	r25, 7
    4052:	a0 95       	com	r26
    4054:	ba 2f       	mov	r27, r26
    4056:	40 91 b7 03 	lds	r20, 0x03B7
    405a:	50 91 b8 03 	lds	r21, 0x03B8
    405e:	60 91 b9 03 	lds	r22, 0x03B9
    4062:	70 91 ba 03 	lds	r23, 0x03BA
    4066:	84 0f       	add	r24, r20
    4068:	95 1f       	adc	r25, r21
    406a:	a6 1f       	adc	r26, r22
    406c:	b7 1f       	adc	r27, r23
    406e:	80 93 b7 03 	sts	0x03B7, r24
    4072:	90 93 b8 03 	sts	0x03B8, r25
    4076:	a0 93 b9 03 	sts	0x03B9, r26
    407a:	b0 93 ba 03 	sts	0x03BA, r27
    407e:	80 91 75 03 	lds	r24, 0x0375
    4082:	90 91 76 03 	lds	r25, 0x0376
    4086:	aa 27       	eor	r26, r26
    4088:	97 fd       	sbrc	r25, 7
    408a:	a0 95       	com	r26
    408c:	ba 2f       	mov	r27, r26
    408e:	40 91 bb 03 	lds	r20, 0x03BB
    4092:	50 91 bc 03 	lds	r21, 0x03BC
    4096:	60 91 bd 03 	lds	r22, 0x03BD
    409a:	70 91 be 03 	lds	r23, 0x03BE
    409e:	84 0f       	add	r24, r20
    40a0:	95 1f       	adc	r25, r21
    40a2:	a6 1f       	adc	r26, r22
    40a4:	b7 1f       	adc	r27, r23
    40a6:	80 93 bb 03 	sts	0x03BB, r24
    40aa:	90 93 bc 03 	sts	0x03BC, r25
    40ae:	a0 93 bd 03 	sts	0x03BD, r26
    40b2:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    40b6:	80 91 1d 05 	lds	r24, 0x051D
    40ba:	90 91 1e 05 	lds	r25, 0x051E
    40be:	40 91 11 05 	lds	r20, 0x0511
    40c2:	50 91 12 05 	lds	r21, 0x0512
    40c6:	84 0f       	add	r24, r20
    40c8:	95 1f       	adc	r25, r21
    40ca:	90 93 1e 05 	sts	0x051E, r25
    40ce:	80 93 1d 05 	sts	0x051D, r24
				accOffsetYSum += accY;
    40d2:	80 91 1f 05 	lds	r24, 0x051F
    40d6:	90 91 20 05 	lds	r25, 0x0520
    40da:	40 91 13 05 	lds	r20, 0x0513
    40de:	50 91 14 05 	lds	r21, 0x0514
    40e2:	84 0f       	add	r24, r20
    40e4:	95 1f       	adc	r25, r21
    40e6:	90 93 20 05 	sts	0x0520, r25
    40ea:	80 93 1f 05 	sts	0x051F, r24
				accOffsetZSum += accZ;
    40ee:	80 91 21 05 	lds	r24, 0x0521
    40f2:	90 91 22 05 	lds	r25, 0x0522
    40f6:	40 91 15 05 	lds	r20, 0x0515
    40fa:	50 91 16 05 	lds	r21, 0x0516
    40fe:	84 0f       	add	r24, r20
    4100:	95 1f       	adc	r25, r21
    4102:	90 93 22 05 	sts	0x0522, r25
    4106:	80 93 21 05 	sts	0x0521, r24

				calibrationCycle++;
    410a:	2f 5f       	subi	r18, 0xFF	; 255
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	30 93 32 05 	sts	0x0532, r19
    4112:	20 93 31 05 	sts	0x0531, r18
    4116:	80 91 63 05 	lds	r24, 0x0563
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    411a:	88 23       	and	r24, r24
    411c:	09 f0       	breq	.+2      	; 0x4120 <calibrateSensors+0x5d6>
    411e:	31 cd       	rjmp	.-1438   	; 0x3b82 <calibrateSensors+0x38>
    4120:	5b ce       	rjmp	.-842    	; 0x3dd8 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4122:	10 92 8f 03 	sts	0x038F, r1
    4126:	10 92 90 03 	sts	0x0390, r1
    412a:	10 92 91 03 	sts	0x0391, r1
    412e:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4132:	10 92 78 03 	sts	0x0378, r1
    4136:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    413a:	10 92 93 03 	sts	0x0393, r1
    413e:	10 92 94 03 	sts	0x0394, r1
    4142:	10 92 95 03 	sts	0x0395, r1
    4146:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    414a:	10 92 7a 03 	sts	0x037A, r1
    414e:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4152:	10 92 97 03 	sts	0x0397, r1
    4156:	10 92 98 03 	sts	0x0398, r1
    415a:	10 92 99 03 	sts	0x0399, r1
    415e:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4162:	10 92 7c 03 	sts	0x037C, r1
    4166:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    416a:	10 92 9b 03 	sts	0x039B, r1
    416e:	10 92 9c 03 	sts	0x039C, r1
    4172:	10 92 9d 03 	sts	0x039D, r1
    4176:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    417a:	10 92 7e 03 	sts	0x037E, r1
    417e:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4182:	10 92 9f 03 	sts	0x039F, r1
    4186:	10 92 a0 03 	sts	0x03A0, r1
    418a:	10 92 a1 03 	sts	0x03A1, r1
    418e:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    4192:	10 92 80 03 	sts	0x0380, r1
    4196:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    419a:	10 92 a3 03 	sts	0x03A3, r1
    419e:	10 92 a4 03 	sts	0x03A4, r1
    41a2:	10 92 a5 03 	sts	0x03A5, r1
    41a6:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    41aa:	10 92 82 03 	sts	0x0382, r1
    41ae:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    41b2:	10 92 a7 03 	sts	0x03A7, r1
    41b6:	10 92 a8 03 	sts	0x03A8, r1
    41ba:	10 92 a9 03 	sts	0x03A9, r1
    41be:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    41c2:	10 92 84 03 	sts	0x0384, r1
    41c6:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    41ca:	10 92 ab 03 	sts	0x03AB, r1
    41ce:	10 92 ac 03 	sts	0x03AC, r1
    41d2:	10 92 ad 03 	sts	0x03AD, r1
    41d6:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    41da:	10 92 86 03 	sts	0x0386, r1
    41de:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    41e2:	10 92 af 03 	sts	0x03AF, r1
    41e6:	10 92 b0 03 	sts	0x03B0, r1
    41ea:	10 92 b1 03 	sts	0x03B1, r1
    41ee:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    41f2:	10 92 88 03 	sts	0x0388, r1
    41f6:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    41fa:	10 92 b3 03 	sts	0x03B3, r1
    41fe:	10 92 b4 03 	sts	0x03B4, r1
    4202:	10 92 b5 03 	sts	0x03B5, r1
    4206:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    420a:	10 92 8a 03 	sts	0x038A, r1
    420e:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4212:	10 92 b7 03 	sts	0x03B7, r1
    4216:	10 92 b8 03 	sts	0x03B8, r1
    421a:	10 92 b9 03 	sts	0x03B9, r1
    421e:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4222:	10 92 8c 03 	sts	0x038C, r1
    4226:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    422a:	10 92 bb 03 	sts	0x03BB, r1
    422e:	10 92 bc 03 	sts	0x03BC, r1
    4232:	10 92 bd 03 	sts	0x03BD, r1
    4236:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    423a:	10 92 8e 03 	sts	0x038E, r1
    423e:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4242:	10 92 1e 05 	sts	0x051E, r1
    4246:	10 92 1d 05 	sts	0x051D, r1
					accOffsetYSum = 0;
    424a:	10 92 20 05 	sts	0x0520, r1
    424e:	10 92 1f 05 	sts	0x051F, r1
					accOffsetZSum = 0;
    4252:	10 92 22 05 	sts	0x0522, r1
    4256:	10 92 21 05 	sts	0x0521, r1

					calibrationCycle++;
    425a:	d0 93 32 05 	sts	0x0532, r29
    425e:	c0 93 31 05 	sts	0x0531, r28
    4262:	80 91 63 05 	lds	r24, 0x0563

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4266:	59 cf       	rjmp	.-334    	; 0x411a <calibrateSensors+0x5d0>

00004268 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    4268:	80 91 10 05 	lds	r24, 0x0510
    426c:	88 23       	and	r24, r24
    426e:	79 f0       	breq	.+30     	; 0x428e <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    4270:	81 30       	cpi	r24, 0x01	; 1
    4272:	11 f1       	breq	.+68     	; 0x42b8 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    4274:	10 92 12 05 	sts	0x0512, r1
    4278:	10 92 11 05 	sts	0x0511, r1
		accY = 0;
    427c:	10 92 14 05 	sts	0x0514, r1
    4280:	10 92 13 05 	sts	0x0513, r1
		accZ = 0;
    4284:	10 92 16 05 	sts	0x0516, r1
    4288:	10 92 15 05 	sts	0x0515, r1
    428c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    428e:	80 91 13 02 	lds	r24, 0x0213
    4292:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    429c:	80 91 13 02 	lds	r24, 0x0213
    42a0:	8f 5f       	subi	r24, 0xFF	; 255
    42a2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    42a6:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    42aa:	80 93 26 05 	sts	0x0526, r24
    42ae:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    42b2:	80 93 27 05 	sts	0x0527, r24
    42b6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    42b8:	80 91 13 02 	lds	r24, 0x0213
    42bc:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    42c0:	82 e3       	ldi	r24, 0x32	; 50
    42c2:	0e 94 09 10 	call	0x2012	; 0x2012 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    42c6:	80 91 13 02 	lds	r24, 0x0213
    42ca:	8f 5f       	subi	r24, 0xFF	; 255
    42cc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    42d0:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    42d4:	80 93 26 05 	sts	0x0526, r24
    42d8:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    42dc:	80 93 27 05 	sts	0x0527, r24
    42e0:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    42e4:	80 93 28 05 	sts	0x0528, r24
    42e8:	08 95       	ret

000042ea <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    42ea:	80 91 10 05 	lds	r24, 0x0510
    42ee:	88 23       	and	r24, r24
    42f0:	09 f0       	breq	.+2      	; 0x42f4 <readAccelXYZ_2+0xa>
    42f2:	4e c0       	rjmp	.+156    	; 0x4390 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    42f4:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    42f8:	80 93 28 05 	sts	0x0528, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    42fc:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    4300:	80 93 29 05 	sts	0x0529, r24
    4304:	0e 94 1b 10 	call	0x2036	; 0x2036 <i2c_readAck>
    4308:	80 93 2a 05 	sts	0x052A, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    430c:	0e 94 25 10 	call	0x204a	; 0x204a <i2c_readNak>
    4310:	80 93 2b 05 	sts	0x052B, r24
		i2c_stop();													// set stop conditon = release bus
    4314:	0e 94 01 10 	call	0x2002	; 0x2002 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4318:	80 91 63 05 	lds	r24, 0x0563
    431c:	88 23       	and	r24, r24
    431e:	09 f4       	brne	.+2      	; 0x4322 <readAccelXYZ_2+0x38>
    4320:	47 c0       	rjmp	.+142    	; 0x43b0 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    4322:	80 91 27 05 	lds	r24, 0x0527
    4326:	99 27       	eor	r25, r25
    4328:	87 fd       	sbrc	r24, 7
    432a:	90 95       	com	r25
    432c:	98 2f       	mov	r25, r24
    432e:	88 27       	eor	r24, r24
    4330:	20 91 26 05 	lds	r18, 0x0526
    4334:	33 27       	eor	r19, r19
    4336:	27 fd       	sbrc	r18, 7
    4338:	30 95       	com	r19
    433a:	82 2b       	or	r24, r18
    433c:	93 2b       	or	r25, r19
    433e:	90 93 12 05 	sts	0x0512, r25
    4342:	80 93 11 05 	sts	0x0511, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    4346:	80 91 29 05 	lds	r24, 0x0529
    434a:	99 27       	eor	r25, r25
    434c:	87 fd       	sbrc	r24, 7
    434e:	90 95       	com	r25
    4350:	98 2f       	mov	r25, r24
    4352:	88 27       	eor	r24, r24
    4354:	20 91 28 05 	lds	r18, 0x0528
    4358:	33 27       	eor	r19, r19
    435a:	27 fd       	sbrc	r18, 7
    435c:	30 95       	com	r19
    435e:	82 2b       	or	r24, r18
    4360:	93 2b       	or	r25, r19
    4362:	90 93 14 05 	sts	0x0514, r25
    4366:	80 93 13 05 	sts	0x0513, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    436a:	80 91 2b 05 	lds	r24, 0x052B
    436e:	99 27       	eor	r25, r25
    4370:	87 fd       	sbrc	r24, 7
    4372:	90 95       	com	r25
    4374:	98 2f       	mov	r25, r24
    4376:	88 27       	eor	r24, r24
    4378:	20 91 2a 05 	lds	r18, 0x052A
    437c:	33 27       	eor	r19, r19
    437e:	27 fd       	sbrc	r18, 7
    4380:	30 95       	com	r19
    4382:	82 2b       	or	r24, r18
    4384:	93 2b       	or	r25, r19
    4386:	90 93 16 05 	sts	0x0516, r25
    438a:	80 93 15 05 	sts	0x0515, r24
    438e:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    4390:	81 30       	cpi	r24, 0x01	; 1
    4392:	09 f4       	brne	.+2      	; 0x4396 <readAccelXYZ_2+0xac>
    4394:	b3 cf       	rjmp	.-154    	; 0x42fc <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4396:	10 92 12 05 	sts	0x0512, r1
    439a:	10 92 11 05 	sts	0x0511, r1
		accY = 0;
    439e:	10 92 14 05 	sts	0x0514, r1
    43a2:	10 92 13 05 	sts	0x0513, r1
		accZ = 0;
    43a6:	10 92 16 05 	sts	0x0516, r1
    43aa:	10 92 15 05 	sts	0x0515, r1
    43ae:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    43b0:	80 91 27 05 	lds	r24, 0x0527
    43b4:	99 27       	eor	r25, r25
    43b6:	87 fd       	sbrc	r24, 7
    43b8:	90 95       	com	r25
    43ba:	98 2f       	mov	r25, r24
    43bc:	88 27       	eor	r24, r24
    43be:	20 91 26 05 	lds	r18, 0x0526
    43c2:	33 27       	eor	r19, r19
    43c4:	27 fd       	sbrc	r18, 7
    43c6:	30 95       	com	r19
    43c8:	82 2b       	or	r24, r18
    43ca:	93 2b       	or	r25, r19
    43cc:	20 91 17 05 	lds	r18, 0x0517
    43d0:	30 91 18 05 	lds	r19, 0x0518
    43d4:	82 1b       	sub	r24, r18
    43d6:	93 0b       	sbc	r25, r19
    43d8:	90 93 12 05 	sts	0x0512, r25
    43dc:	80 93 11 05 	sts	0x0511, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    43e0:	80 91 29 05 	lds	r24, 0x0529
    43e4:	99 27       	eor	r25, r25
    43e6:	87 fd       	sbrc	r24, 7
    43e8:	90 95       	com	r25
    43ea:	98 2f       	mov	r25, r24
    43ec:	88 27       	eor	r24, r24
    43ee:	20 91 28 05 	lds	r18, 0x0528
    43f2:	33 27       	eor	r19, r19
    43f4:	27 fd       	sbrc	r18, 7
    43f6:	30 95       	com	r19
    43f8:	82 2b       	or	r24, r18
    43fa:	93 2b       	or	r25, r19
    43fc:	20 91 19 05 	lds	r18, 0x0519
    4400:	30 91 1a 05 	lds	r19, 0x051A
    4404:	82 1b       	sub	r24, r18
    4406:	93 0b       	sbc	r25, r19
    4408:	90 93 14 05 	sts	0x0514, r25
    440c:	80 93 13 05 	sts	0x0513, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    4410:	80 91 2b 05 	lds	r24, 0x052B
    4414:	99 27       	eor	r25, r25
    4416:	87 fd       	sbrc	r24, 7
    4418:	90 95       	com	r25
    441a:	98 2f       	mov	r25, r24
    441c:	88 27       	eor	r24, r24
    441e:	20 91 2a 05 	lds	r18, 0x052A
    4422:	33 27       	eor	r19, r19
    4424:	27 fd       	sbrc	r18, 7
    4426:	30 95       	com	r19
    4428:	82 2b       	or	r24, r18
    442a:	93 2b       	or	r25, r19
    442c:	20 91 1b 05 	lds	r18, 0x051B
    4430:	30 91 1c 05 	lds	r19, 0x051C
    4434:	82 1b       	sub	r24, r18
    4436:	93 0b       	sbc	r25, r19
    4438:	90 93 16 05 	sts	0x0516, r25
    443c:	80 93 15 05 	sts	0x0515, r24
    4440:	08 95       	ret

00004442 <computeAngle>:

	}

}

void computeAngle() {
    4442:	ef 92       	push	r14
    4444:	ff 92       	push	r15
    4446:	0f 93       	push	r16
    4448:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    444a:	80 91 15 05 	lds	r24, 0x0515
    444e:	90 91 16 05 	lds	r25, 0x0516
    4452:	97 fd       	sbrc	r25, 7
    4454:	5b c0       	rjmp	.+182    	; 0x450c <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    4456:	80 31       	cpi	r24, 0x10	; 16
    4458:	91 05       	cpc	r25, r1
    445a:	08 f0       	brcs	.+2      	; 0x445e <computeAngle+0x1c>
    445c:	42 c0       	rjmp	.+132    	; 0x44e2 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    4464:	90 91 14 02 	lds	r25, 0x0214
    4468:	98 17       	cp	r25, r24
    446a:	09 f4       	brne	.+2      	; 0x446e <computeAngle+0x2c>
    446c:	42 c0       	rjmp	.+132    	; 0x44f2 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    446e:	10 92 25 05 	sts	0x0525, r1
	}
	prevPosition = currPosition;
    4472:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    4476:	60 91 11 05 	lds	r22, 0x0511
    447a:	70 91 12 05 	lds	r23, 0x0512
    447e:	88 27       	eor	r24, r24
    4480:	77 fd       	sbrc	r23, 7
    4482:	80 95       	com	r24
    4484:	98 2f       	mov	r25, r24
    4486:	0e 94 89 23 	call	0x4712	; 0x4712 <__floatsisf>
    448a:	7b 01       	movw	r14, r22
    448c:	8c 01       	movw	r16, r24
    448e:	60 91 13 05 	lds	r22, 0x0513
    4492:	70 91 14 05 	lds	r23, 0x0514
    4496:	88 27       	eor	r24, r24
    4498:	77 fd       	sbrc	r23, 7
    449a:	80 95       	com	r24
    449c:	98 2f       	mov	r25, r24
    449e:	0e 94 89 23 	call	0x4712	; 0x4712 <__floatsisf>
    44a2:	9b 01       	movw	r18, r22
    44a4:	ac 01       	movw	r20, r24
    44a6:	c8 01       	movw	r24, r16
    44a8:	b7 01       	movw	r22, r14
    44aa:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <atan2>
    44ae:	21 ee       	ldi	r18, 0xE1	; 225
    44b0:	3e e2       	ldi	r19, 0x2E	; 46
    44b2:	45 e6       	ldi	r20, 0x65	; 101
    44b4:	52 e4       	ldi	r21, 0x42	; 66
    44b6:	0e 94 8a 22 	call	0x4514	; 0x4514 <__mulsf3>
    44ba:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__fixsfsi>
    44be:	9b 01       	movw	r18, r22
    44c0:	70 93 24 05 	sts	0x0524, r23
    44c4:	60 93 23 05 	sts	0x0523, r22

	if(currentAngle < 0) {
    44c8:	77 ff       	sbrs	r23, 7
    44ca:	06 c0       	rjmp	.+12     	; 0x44d8 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    44cc:	28 59       	subi	r18, 0x98	; 152
    44ce:	3e 4f       	sbci	r19, 0xFE	; 254
    44d0:	30 93 24 05 	sts	0x0524, r19
    44d4:	20 93 23 05 	sts	0x0523, r18
	}

}
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	ff 90       	pop	r15
    44de:	ef 90       	pop	r14
    44e0:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    44e2:	10 92 15 02 	sts	0x0215, r1
    44e6:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    44e8:	90 91 14 02 	lds	r25, 0x0214
    44ec:	98 17       	cp	r25, r24
    44ee:	09 f0       	breq	.+2      	; 0x44f2 <computeAngle+0xb0>
    44f0:	be cf       	rjmp	.-132    	; 0x446e <computeAngle+0x2c>
		timesInSamePos++;
    44f2:	90 91 25 05 	lds	r25, 0x0525
    44f6:	9f 5f       	subi	r25, 0xFF	; 255
    44f8:	90 93 25 05 	sts	0x0525, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    44fc:	95 30       	cpi	r25, 0x05	; 5
    44fe:	08 f4       	brcc	.+2      	; 0x4502 <computeAngle+0xc0>
    4500:	b8 cf       	rjmp	.-144    	; 0x4472 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4502:	10 92 25 05 	sts	0x0525, r1
			robotPosition = currPosition;
    4506:	80 93 16 02 	sts	0x0216, r24
    450a:	b3 cf       	rjmp	.-154    	; 0x4472 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    450c:	90 95       	com	r25
    450e:	81 95       	neg	r24
    4510:	9f 4f       	sbci	r25, 0xFF	; 255
    4512:	a1 cf       	rjmp	.-190    	; 0x4456 <computeAngle+0x14>

00004514 <__mulsf3>:
    4514:	a0 e2       	ldi	r26, 0x20	; 32
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e0 e9       	ldi	r30, 0x90	; 144
    451a:	f2 e2       	ldi	r31, 0x22	; 34
    451c:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__prologue_saves__+0x4>
    4520:	69 83       	std	Y+1, r22	; 0x01
    4522:	7a 83       	std	Y+2, r23	; 0x02
    4524:	8b 83       	std	Y+3, r24	; 0x03
    4526:	9c 83       	std	Y+4, r25	; 0x04
    4528:	2d 83       	std	Y+5, r18	; 0x05
    452a:	3e 83       	std	Y+6, r19	; 0x06
    452c:	4f 83       	std	Y+7, r20	; 0x07
    452e:	58 87       	std	Y+8, r21	; 0x08
    4530:	99 e0       	ldi	r25, 0x09	; 9
    4532:	e9 2e       	mov	r14, r25
    4534:	f1 2c       	mov	r15, r1
    4536:	ec 0e       	add	r14, r28
    4538:	fd 1e       	adc	r15, r29
    453a:	b7 01       	movw	r22, r14
    453c:	ce 01       	movw	r24, r28
    453e:	01 96       	adiw	r24, 0x01	; 1
    4540:	0e 94 67 25 	call	0x4ace	; 0x4ace <__unpack_f>
    4544:	8e 01       	movw	r16, r28
    4546:	0f 5e       	subi	r16, 0xEF	; 239
    4548:	1f 4f       	sbci	r17, 0xFF	; 255
    454a:	b8 01       	movw	r22, r16
    454c:	ce 01       	movw	r24, r28
    454e:	05 96       	adiw	r24, 0x05	; 5
    4550:	0e 94 67 25 	call	0x4ace	; 0x4ace <__unpack_f>
    4554:	99 85       	ldd	r25, Y+9	; 0x09
    4556:	92 30       	cpi	r25, 0x02	; 2
    4558:	88 f0       	brcs	.+34     	; 0x457c <__mulsf3+0x68>
    455a:	89 89       	ldd	r24, Y+17	; 0x11
    455c:	82 30       	cpi	r24, 0x02	; 2
    455e:	c0 f0       	brcs	.+48     	; 0x4590 <__mulsf3+0x7c>
    4560:	94 30       	cpi	r25, 0x04	; 4
    4562:	19 f4       	brne	.+6      	; 0x456a <__mulsf3+0x56>
    4564:	82 30       	cpi	r24, 0x02	; 2
    4566:	29 f0       	breq	.+10     	; 0x4572 <__mulsf3+0x5e>
    4568:	09 c0       	rjmp	.+18     	; 0x457c <__mulsf3+0x68>
    456a:	84 30       	cpi	r24, 0x04	; 4
    456c:	29 f4       	brne	.+10     	; 0x4578 <__mulsf3+0x64>
    456e:	92 30       	cpi	r25, 0x02	; 2
    4570:	79 f4       	brne	.+30     	; 0x4590 <__mulsf3+0x7c>
    4572:	67 e1       	ldi	r22, 0x17	; 23
    4574:	72 e0       	ldi	r23, 0x02	; 2
    4576:	c6 c0       	rjmp	.+396    	; 0x4704 <__mulsf3+0x1f0>
    4578:	92 30       	cpi	r25, 0x02	; 2
    457a:	41 f4       	brne	.+16     	; 0x458c <__mulsf3+0x78>
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4580:	8a 89       	ldd	r24, Y+18	; 0x12
    4582:	98 13       	cpse	r25, r24
    4584:	21 e0       	ldi	r18, 0x01	; 1
    4586:	2a 87       	std	Y+10, r18	; 0x0a
    4588:	b7 01       	movw	r22, r14
    458a:	bc c0       	rjmp	.+376    	; 0x4704 <__mulsf3+0x1f0>
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	41 f4       	brne	.+16     	; 0x45a0 <__mulsf3+0x8c>
    4590:	20 e0       	ldi	r18, 0x00	; 0
    4592:	9a 85       	ldd	r25, Y+10	; 0x0a
    4594:	8a 89       	ldd	r24, Y+18	; 0x12
    4596:	98 13       	cpse	r25, r24
    4598:	21 e0       	ldi	r18, 0x01	; 1
    459a:	2a 8b       	std	Y+18, r18	; 0x12
    459c:	b8 01       	movw	r22, r16
    459e:	b2 c0       	rjmp	.+356    	; 0x4704 <__mulsf3+0x1f0>
    45a0:	cd 84       	ldd	r12, Y+13	; 0x0d
    45a2:	de 84       	ldd	r13, Y+14	; 0x0e
    45a4:	ef 84       	ldd	r14, Y+15	; 0x0f
    45a6:	f8 88       	ldd	r15, Y+16	; 0x10
    45a8:	0d 89       	ldd	r16, Y+21	; 0x15
    45aa:	1e 89       	ldd	r17, Y+22	; 0x16
    45ac:	2f 89       	ldd	r18, Y+23	; 0x17
    45ae:	38 8d       	ldd	r19, Y+24	; 0x18
    45b0:	88 24       	eor	r8, r8
    45b2:	99 24       	eor	r9, r9
    45b4:	54 01       	movw	r10, r8
    45b6:	40 e0       	ldi	r20, 0x00	; 0
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	60 e0       	ldi	r22, 0x00	; 0
    45bc:	70 e0       	ldi	r23, 0x00	; 0
    45be:	44 24       	eor	r4, r4
    45c0:	55 24       	eor	r5, r5
    45c2:	32 01       	movw	r6, r4
    45c4:	e0 e0       	ldi	r30, 0x00	; 0
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	c6 01       	movw	r24, r12
    45ca:	81 70       	andi	r24, 0x01	; 1
    45cc:	90 70       	andi	r25, 0x00	; 0
    45ce:	89 2b       	or	r24, r25
    45d0:	d9 f0       	breq	.+54     	; 0x4608 <__mulsf3+0xf4>
    45d2:	80 0e       	add	r8, r16
    45d4:	91 1e       	adc	r9, r17
    45d6:	a2 1e       	adc	r10, r18
    45d8:	b3 1e       	adc	r11, r19
    45da:	db 01       	movw	r26, r22
    45dc:	ca 01       	movw	r24, r20
    45de:	84 0d       	add	r24, r4
    45e0:	95 1d       	adc	r25, r5
    45e2:	a6 1d       	adc	r26, r6
    45e4:	b7 1d       	adc	r27, r7
    45e6:	40 e0       	ldi	r20, 0x00	; 0
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	60 e0       	ldi	r22, 0x00	; 0
    45ec:	70 e0       	ldi	r23, 0x00	; 0
    45ee:	80 16       	cp	r8, r16
    45f0:	91 06       	cpc	r9, r17
    45f2:	a2 06       	cpc	r10, r18
    45f4:	b3 06       	cpc	r11, r19
    45f6:	20 f4       	brcc	.+8      	; 0x4600 <__mulsf3+0xec>
    45f8:	41 e0       	ldi	r20, 0x01	; 1
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	60 e0       	ldi	r22, 0x00	; 0
    45fe:	70 e0       	ldi	r23, 0x00	; 0
    4600:	48 0f       	add	r20, r24
    4602:	59 1f       	adc	r21, r25
    4604:	6a 1f       	adc	r22, r26
    4606:	7b 1f       	adc	r23, r27
    4608:	44 0c       	add	r4, r4
    460a:	55 1c       	adc	r5, r5
    460c:	66 1c       	adc	r6, r6
    460e:	77 1c       	adc	r7, r7
    4610:	37 ff       	sbrs	r19, 7
    4612:	08 c0       	rjmp	.+16     	; 0x4624 <__mulsf3+0x110>
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	a0 e0       	ldi	r26, 0x00	; 0
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	48 2a       	or	r4, r24
    461e:	59 2a       	or	r5, r25
    4620:	6a 2a       	or	r6, r26
    4622:	7b 2a       	or	r7, r27
    4624:	31 96       	adiw	r30, 0x01	; 1
    4626:	e0 32       	cpi	r30, 0x20	; 32
    4628:	f1 05       	cpc	r31, r1
    462a:	49 f0       	breq	.+18     	; 0x463e <__mulsf3+0x12a>
    462c:	00 0f       	add	r16, r16
    462e:	11 1f       	adc	r17, r17
    4630:	22 1f       	adc	r18, r18
    4632:	33 1f       	adc	r19, r19
    4634:	f6 94       	lsr	r15
    4636:	e7 94       	ror	r14
    4638:	d7 94       	ror	r13
    463a:	c7 94       	ror	r12
    463c:	c5 cf       	rjmp	.-118    	; 0x45c8 <__mulsf3+0xb4>
    463e:	8b 89       	ldd	r24, Y+19	; 0x13
    4640:	9c 89       	ldd	r25, Y+20	; 0x14
    4642:	2b 85       	ldd	r18, Y+11	; 0x0b
    4644:	3c 85       	ldd	r19, Y+12	; 0x0c
    4646:	82 0f       	add	r24, r18
    4648:	93 1f       	adc	r25, r19
    464a:	02 96       	adiw	r24, 0x02	; 2
    464c:	9c 8f       	std	Y+28, r25	; 0x1c
    464e:	8b 8f       	std	Y+27, r24	; 0x1b
    4650:	1a 8e       	std	Y+26, r1	; 0x1a
    4652:	9a 85       	ldd	r25, Y+10	; 0x0a
    4654:	8a 89       	ldd	r24, Y+18	; 0x12
    4656:	98 17       	cp	r25, r24
    4658:	11 f0       	breq	.+4      	; 0x465e <__mulsf3+0x14a>
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	8a 8f       	std	Y+26, r24	; 0x1a
    465e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4660:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4662:	17 c0       	rjmp	.+46     	; 0x4692 <__mulsf3+0x17e>
    4664:	ca 01       	movw	r24, r20
    4666:	81 70       	andi	r24, 0x01	; 1
    4668:	90 70       	andi	r25, 0x00	; 0
    466a:	89 2b       	or	r24, r25
    466c:	61 f0       	breq	.+24     	; 0x4686 <__mulsf3+0x172>
    466e:	b6 94       	lsr	r11
    4670:	a7 94       	ror	r10
    4672:	97 94       	ror	r9
    4674:	87 94       	ror	r8
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	a0 e0       	ldi	r26, 0x00	; 0
    467c:	b0 e8       	ldi	r27, 0x80	; 128
    467e:	88 2a       	or	r8, r24
    4680:	99 2a       	or	r9, r25
    4682:	aa 2a       	or	r10, r26
    4684:	bb 2a       	or	r11, r27
    4686:	76 95       	lsr	r23
    4688:	67 95       	ror	r22
    468a:	57 95       	ror	r21
    468c:	47 95       	ror	r20
    468e:	2f 5f       	subi	r18, 0xFF	; 255
    4690:	3f 4f       	sbci	r19, 0xFF	; 255
    4692:	77 fd       	sbrc	r23, 7
    4694:	e7 cf       	rjmp	.-50     	; 0x4664 <__mulsf3+0x150>
    4696:	c9 01       	movw	r24, r18
    4698:	0b c0       	rjmp	.+22     	; 0x46b0 <__mulsf3+0x19c>
    469a:	44 0f       	add	r20, r20
    469c:	55 1f       	adc	r21, r21
    469e:	66 1f       	adc	r22, r22
    46a0:	77 1f       	adc	r23, r23
    46a2:	b7 fc       	sbrc	r11, 7
    46a4:	41 60       	ori	r20, 0x01	; 1
    46a6:	88 0c       	add	r8, r8
    46a8:	99 1c       	adc	r9, r9
    46aa:	aa 1c       	adc	r10, r10
    46ac:	bb 1c       	adc	r11, r11
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	40 30       	cpi	r20, 0x00	; 0
    46b2:	a0 e0       	ldi	r26, 0x00	; 0
    46b4:	5a 07       	cpc	r21, r26
    46b6:	a0 e0       	ldi	r26, 0x00	; 0
    46b8:	6a 07       	cpc	r22, r26
    46ba:	a0 e4       	ldi	r26, 0x40	; 64
    46bc:	7a 07       	cpc	r23, r26
    46be:	68 f3       	brcs	.-38     	; 0x469a <__mulsf3+0x186>
    46c0:	9c 8f       	std	Y+28, r25	; 0x1c
    46c2:	8b 8f       	std	Y+27, r24	; 0x1b
    46c4:	db 01       	movw	r26, r22
    46c6:	ca 01       	movw	r24, r20
    46c8:	8f 77       	andi	r24, 0x7F	; 127
    46ca:	90 70       	andi	r25, 0x00	; 0
    46cc:	a0 70       	andi	r26, 0x00	; 0
    46ce:	b0 70       	andi	r27, 0x00	; 0
    46d0:	80 34       	cpi	r24, 0x40	; 64
    46d2:	91 05       	cpc	r25, r1
    46d4:	a1 05       	cpc	r26, r1
    46d6:	b1 05       	cpc	r27, r1
    46d8:	61 f4       	brne	.+24     	; 0x46f2 <__mulsf3+0x1de>
    46da:	47 fd       	sbrc	r20, 7
    46dc:	0a c0       	rjmp	.+20     	; 0x46f2 <__mulsf3+0x1de>
    46de:	81 14       	cp	r8, r1
    46e0:	91 04       	cpc	r9, r1
    46e2:	a1 04       	cpc	r10, r1
    46e4:	b1 04       	cpc	r11, r1
    46e6:	29 f0       	breq	.+10     	; 0x46f2 <__mulsf3+0x1de>
    46e8:	40 5c       	subi	r20, 0xC0	; 192
    46ea:	5f 4f       	sbci	r21, 0xFF	; 255
    46ec:	6f 4f       	sbci	r22, 0xFF	; 255
    46ee:	7f 4f       	sbci	r23, 0xFF	; 255
    46f0:	40 78       	andi	r20, 0x80	; 128
    46f2:	4d 8f       	std	Y+29, r20	; 0x1d
    46f4:	5e 8f       	std	Y+30, r21	; 0x1e
    46f6:	6f 8f       	std	Y+31, r22	; 0x1f
    46f8:	78 a3       	std	Y+32, r23	; 0x20
    46fa:	83 e0       	ldi	r24, 0x03	; 3
    46fc:	89 8f       	std	Y+25, r24	; 0x19
    46fe:	be 01       	movw	r22, r28
    4700:	67 5e       	subi	r22, 0xE7	; 231
    4702:	7f 4f       	sbci	r23, 0xFF	; 255
    4704:	cb 01       	movw	r24, r22
    4706:	0e 94 87 24 	call	0x490e	; 0x490e <__pack_f>
    470a:	e0 e1       	ldi	r30, 0x10	; 16
    470c:	a0 96       	adiw	r28, 0x20	; 32
    470e:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__epilogue_restores__+0x4>

00004712 <__floatsisf>:
    4712:	a8 e0       	ldi	r26, 0x08	; 8
    4714:	b0 e0       	ldi	r27, 0x00	; 0
    4716:	ef e8       	ldi	r30, 0x8F	; 143
    4718:	f3 e2       	ldi	r31, 0x23	; 35
    471a:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__+0x12>
    471e:	9b 01       	movw	r18, r22
    4720:	ac 01       	movw	r20, r24
    4722:	83 e0       	ldi	r24, 0x03	; 3
    4724:	89 83       	std	Y+1, r24	; 0x01
    4726:	da 01       	movw	r26, r20
    4728:	c9 01       	movw	r24, r18
    472a:	88 27       	eor	r24, r24
    472c:	b7 fd       	sbrc	r27, 7
    472e:	83 95       	inc	r24
    4730:	99 27       	eor	r25, r25
    4732:	aa 27       	eor	r26, r26
    4734:	bb 27       	eor	r27, r27
    4736:	b8 2e       	mov	r11, r24
    4738:	21 15       	cp	r18, r1
    473a:	31 05       	cpc	r19, r1
    473c:	41 05       	cpc	r20, r1
    473e:	51 05       	cpc	r21, r1
    4740:	19 f4       	brne	.+6      	; 0x4748 <__floatsisf+0x36>
    4742:	82 e0       	ldi	r24, 0x02	; 2
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	3a c0       	rjmp	.+116    	; 0x47bc <__floatsisf+0xaa>
    4748:	88 23       	and	r24, r24
    474a:	a9 f0       	breq	.+42     	; 0x4776 <__floatsisf+0x64>
    474c:	20 30       	cpi	r18, 0x00	; 0
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	38 07       	cpc	r19, r24
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	48 07       	cpc	r20, r24
    4756:	80 e8       	ldi	r24, 0x80	; 128
    4758:	58 07       	cpc	r21, r24
    475a:	29 f4       	brne	.+10     	; 0x4766 <__floatsisf+0x54>
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	70 e0       	ldi	r23, 0x00	; 0
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	9f ec       	ldi	r25, 0xCF	; 207
    4764:	30 c0       	rjmp	.+96     	; 0x47c6 <__floatsisf+0xb4>
    4766:	ee 24       	eor	r14, r14
    4768:	ff 24       	eor	r15, r15
    476a:	87 01       	movw	r16, r14
    476c:	e2 1a       	sub	r14, r18
    476e:	f3 0a       	sbc	r15, r19
    4770:	04 0b       	sbc	r16, r20
    4772:	15 0b       	sbc	r17, r21
    4774:	02 c0       	rjmp	.+4      	; 0x477a <__floatsisf+0x68>
    4776:	79 01       	movw	r14, r18
    4778:	8a 01       	movw	r16, r20
    477a:	8e e1       	ldi	r24, 0x1E	; 30
    477c:	c8 2e       	mov	r12, r24
    477e:	d1 2c       	mov	r13, r1
    4780:	dc 82       	std	Y+4, r13	; 0x04
    4782:	cb 82       	std	Y+3, r12	; 0x03
    4784:	ed 82       	std	Y+5, r14	; 0x05
    4786:	fe 82       	std	Y+6, r15	; 0x06
    4788:	0f 83       	std	Y+7, r16	; 0x07
    478a:	18 87       	std	Y+8, r17	; 0x08
    478c:	c8 01       	movw	r24, r16
    478e:	b7 01       	movw	r22, r14
    4790:	0e 94 3a 24 	call	0x4874	; 0x4874 <__clzsi2>
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	18 16       	cp	r1, r24
    4798:	19 06       	cpc	r1, r25
    479a:	84 f4       	brge	.+32     	; 0x47bc <__floatsisf+0xaa>
    479c:	08 2e       	mov	r0, r24
    479e:	04 c0       	rjmp	.+8      	; 0x47a8 <__floatsisf+0x96>
    47a0:	ee 0c       	add	r14, r14
    47a2:	ff 1c       	adc	r15, r15
    47a4:	00 1f       	adc	r16, r16
    47a6:	11 1f       	adc	r17, r17
    47a8:	0a 94       	dec	r0
    47aa:	d2 f7       	brpl	.-12     	; 0x47a0 <__floatsisf+0x8e>
    47ac:	ed 82       	std	Y+5, r14	; 0x05
    47ae:	fe 82       	std	Y+6, r15	; 0x06
    47b0:	0f 83       	std	Y+7, r16	; 0x07
    47b2:	18 87       	std	Y+8, r17	; 0x08
    47b4:	c8 1a       	sub	r12, r24
    47b6:	d9 0a       	sbc	r13, r25
    47b8:	dc 82       	std	Y+4, r13	; 0x04
    47ba:	cb 82       	std	Y+3, r12	; 0x03
    47bc:	ba 82       	std	Y+2, r11	; 0x02
    47be:	ce 01       	movw	r24, r28
    47c0:	01 96       	adiw	r24, 0x01	; 1
    47c2:	0e 94 87 24 	call	0x490e	; 0x490e <__pack_f>
    47c6:	e9 e0       	ldi	r30, 0x09	; 9
    47c8:	28 96       	adiw	r28, 0x08	; 8
    47ca:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__+0x12>

000047ce <__fixsfsi>:
    47ce:	ac e0       	ldi	r26, 0x0C	; 12
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	ed ee       	ldi	r30, 0xED	; 237
    47d4:	f3 e2       	ldi	r31, 0x23	; 35
    47d6:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <__prologue_saves__+0x20>
    47da:	69 83       	std	Y+1, r22	; 0x01
    47dc:	7a 83       	std	Y+2, r23	; 0x02
    47de:	8b 83       	std	Y+3, r24	; 0x03
    47e0:	9c 83       	std	Y+4, r25	; 0x04
    47e2:	be 01       	movw	r22, r28
    47e4:	6b 5f       	subi	r22, 0xFB	; 251
    47e6:	7f 4f       	sbci	r23, 0xFF	; 255
    47e8:	ce 01       	movw	r24, r28
    47ea:	01 96       	adiw	r24, 0x01	; 1
    47ec:	0e 94 67 25 	call	0x4ace	; 0x4ace <__unpack_f>
    47f0:	8d 81       	ldd	r24, Y+5	; 0x05
    47f2:	82 30       	cpi	r24, 0x02	; 2
    47f4:	a9 f1       	breq	.+106    	; 0x4860 <__fixsfsi+0x92>
    47f6:	82 30       	cpi	r24, 0x02	; 2
    47f8:	98 f1       	brcs	.+102    	; 0x4860 <__fixsfsi+0x92>
    47fa:	84 30       	cpi	r24, 0x04	; 4
    47fc:	21 f4       	brne	.+8      	; 0x4806 <__fixsfsi+0x38>
    47fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4800:	88 23       	and	r24, r24
    4802:	59 f4       	brne	.+22     	; 0x481a <__fixsfsi+0x4c>
    4804:	0f c0       	rjmp	.+30     	; 0x4824 <__fixsfsi+0x56>
    4806:	2f 81       	ldd	r18, Y+7	; 0x07
    4808:	38 85       	ldd	r19, Y+8	; 0x08
    480a:	37 fd       	sbrc	r19, 7
    480c:	29 c0       	rjmp	.+82     	; 0x4860 <__fixsfsi+0x92>
    480e:	6e 81       	ldd	r22, Y+6	; 0x06
    4810:	2f 31       	cpi	r18, 0x1F	; 31
    4812:	31 05       	cpc	r19, r1
    4814:	64 f0       	brlt	.+24     	; 0x482e <__fixsfsi+0x60>
    4816:	66 23       	and	r22, r22
    4818:	29 f0       	breq	.+10     	; 0x4824 <__fixsfsi+0x56>
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	40 e0       	ldi	r20, 0x00	; 0
    4820:	50 e8       	ldi	r21, 0x80	; 128
    4822:	22 c0       	rjmp	.+68     	; 0x4868 <__fixsfsi+0x9a>
    4824:	2f ef       	ldi	r18, 0xFF	; 255
    4826:	3f ef       	ldi	r19, 0xFF	; 255
    4828:	4f ef       	ldi	r20, 0xFF	; 255
    482a:	5f e7       	ldi	r21, 0x7F	; 127
    482c:	1d c0       	rjmp	.+58     	; 0x4868 <__fixsfsi+0x9a>
    482e:	8e e1       	ldi	r24, 0x1E	; 30
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	82 1b       	sub	r24, r18
    4834:	93 0b       	sbc	r25, r19
    4836:	29 85       	ldd	r18, Y+9	; 0x09
    4838:	3a 85       	ldd	r19, Y+10	; 0x0a
    483a:	4b 85       	ldd	r20, Y+11	; 0x0b
    483c:	5c 85       	ldd	r21, Y+12	; 0x0c
    483e:	04 c0       	rjmp	.+8      	; 0x4848 <__fixsfsi+0x7a>
    4840:	56 95       	lsr	r21
    4842:	47 95       	ror	r20
    4844:	37 95       	ror	r19
    4846:	27 95       	ror	r18
    4848:	8a 95       	dec	r24
    484a:	d2 f7       	brpl	.-12     	; 0x4840 <__fixsfsi+0x72>
    484c:	66 23       	and	r22, r22
    484e:	61 f0       	breq	.+24     	; 0x4868 <__fixsfsi+0x9a>
    4850:	50 95       	com	r21
    4852:	40 95       	com	r20
    4854:	30 95       	com	r19
    4856:	21 95       	neg	r18
    4858:	3f 4f       	sbci	r19, 0xFF	; 255
    485a:	4f 4f       	sbci	r20, 0xFF	; 255
    485c:	5f 4f       	sbci	r21, 0xFF	; 255
    485e:	04 c0       	rjmp	.+8      	; 0x4868 <__fixsfsi+0x9a>
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	40 e0       	ldi	r20, 0x00	; 0
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	ca 01       	movw	r24, r20
    486a:	b9 01       	movw	r22, r18
    486c:	e2 e0       	ldi	r30, 0x02	; 2
    486e:	2c 96       	adiw	r28, 0x0c	; 12
    4870:	0c 94 49 26 	jmp	0x4c92	; 0x4c92 <__epilogue_restores__+0x20>

00004874 <__clzsi2>:
    4874:	ef 92       	push	r14
    4876:	ff 92       	push	r15
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	9b 01       	movw	r18, r22
    487e:	ac 01       	movw	r20, r24
    4880:	20 30       	cpi	r18, 0x00	; 0
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	38 07       	cpc	r19, r24
    4886:	81 e0       	ldi	r24, 0x01	; 1
    4888:	48 07       	cpc	r20, r24
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	58 07       	cpc	r21, r24
    488e:	80 f4       	brcc	.+32     	; 0x48b0 <__clzsi2+0x3c>
    4890:	2f 3f       	cpi	r18, 0xFF	; 255
    4892:	31 05       	cpc	r19, r1
    4894:	41 05       	cpc	r20, r1
    4896:	51 05       	cpc	r21, r1
    4898:	09 f0       	breq	.+2      	; 0x489c <__clzsi2+0x28>
    489a:	20 f4       	brcc	.+8      	; 0x48a4 <__clzsi2+0x30>
    489c:	ee 24       	eor	r14, r14
    489e:	ff 24       	eor	r15, r15
    48a0:	87 01       	movw	r16, r14
    48a2:	19 c0       	rjmp	.+50     	; 0x48d6 <__clzsi2+0x62>
    48a4:	68 e0       	ldi	r22, 0x08	; 8
    48a6:	e6 2e       	mov	r14, r22
    48a8:	f1 2c       	mov	r15, r1
    48aa:	01 2d       	mov	r16, r1
    48ac:	11 2d       	mov	r17, r1
    48ae:	13 c0       	rjmp	.+38     	; 0x48d6 <__clzsi2+0x62>
    48b0:	20 30       	cpi	r18, 0x00	; 0
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	38 07       	cpc	r19, r24
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	48 07       	cpc	r20, r24
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	58 07       	cpc	r21, r24
    48be:	30 f4       	brcc	.+12     	; 0x48cc <__clzsi2+0x58>
    48c0:	90 e1       	ldi	r25, 0x10	; 16
    48c2:	e9 2e       	mov	r14, r25
    48c4:	f1 2c       	mov	r15, r1
    48c6:	01 2d       	mov	r16, r1
    48c8:	11 2d       	mov	r17, r1
    48ca:	05 c0       	rjmp	.+10     	; 0x48d6 <__clzsi2+0x62>
    48cc:	88 e1       	ldi	r24, 0x18	; 24
    48ce:	e8 2e       	mov	r14, r24
    48d0:	f1 2c       	mov	r15, r1
    48d2:	01 2d       	mov	r16, r1
    48d4:	11 2d       	mov	r17, r1
    48d6:	80 e2       	ldi	r24, 0x20	; 32
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	a0 e0       	ldi	r26, 0x00	; 0
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	8e 19       	sub	r24, r14
    48e0:	9f 09       	sbc	r25, r15
    48e2:	a0 0b       	sbc	r26, r16
    48e4:	b1 0b       	sbc	r27, r17
    48e6:	04 c0       	rjmp	.+8      	; 0x48f0 <__clzsi2+0x7c>
    48e8:	56 95       	lsr	r21
    48ea:	47 95       	ror	r20
    48ec:	37 95       	ror	r19
    48ee:	27 95       	ror	r18
    48f0:	ea 94       	dec	r14
    48f2:	d2 f7       	brpl	.-12     	; 0x48e8 <__clzsi2+0x74>
    48f4:	f9 01       	movw	r30, r18
    48f6:	e1 5e       	subi	r30, 0xE1	; 225
    48f8:	fd 4f       	sbci	r31, 0xFD	; 253
    48fa:	20 81       	ld	r18, Z
    48fc:	82 1b       	sub	r24, r18
    48fe:	91 09       	sbc	r25, r1
    4900:	a1 09       	sbc	r26, r1
    4902:	b1 09       	sbc	r27, r1
    4904:	1f 91       	pop	r17
    4906:	0f 91       	pop	r16
    4908:	ff 90       	pop	r15
    490a:	ef 90       	pop	r14
    490c:	08 95       	ret

0000490e <__pack_f>:
    490e:	9f 92       	push	r9
    4910:	af 92       	push	r10
    4912:	bf 92       	push	r11
    4914:	cf 92       	push	r12
    4916:	df 92       	push	r13
    4918:	ef 92       	push	r14
    491a:	ff 92       	push	r15
    491c:	0f 93       	push	r16
    491e:	1f 93       	push	r17
    4920:	ee 24       	eor	r14, r14
    4922:	ff 24       	eor	r15, r15
    4924:	87 01       	movw	r16, r14
    4926:	fc 01       	movw	r30, r24
    4928:	24 81       	ldd	r18, Z+4	; 0x04
    492a:	35 81       	ldd	r19, Z+5	; 0x05
    492c:	46 81       	ldd	r20, Z+6	; 0x06
    492e:	57 81       	ldd	r21, Z+7	; 0x07
    4930:	91 80       	ldd	r9, Z+1	; 0x01
    4932:	80 81       	ld	r24, Z
    4934:	82 30       	cpi	r24, 0x02	; 2
    4936:	10 f4       	brcc	.+4      	; 0x493c <__pack_f+0x2e>
    4938:	40 61       	ori	r20, 0x10	; 16
    493a:	a2 c0       	rjmp	.+324    	; 0x4a80 <__pack_f+0x172>
    493c:	84 30       	cpi	r24, 0x04	; 4
    493e:	09 f4       	brne	.+2      	; 0x4942 <__pack_f+0x34>
    4940:	9b c0       	rjmp	.+310    	; 0x4a78 <__pack_f+0x16a>
    4942:	82 30       	cpi	r24, 0x02	; 2
    4944:	29 f4       	brne	.+10     	; 0x4950 <__pack_f+0x42>
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	40 e0       	ldi	r20, 0x00	; 0
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	05 c0       	rjmp	.+10     	; 0x495a <__pack_f+0x4c>
    4950:	21 15       	cp	r18, r1
    4952:	31 05       	cpc	r19, r1
    4954:	41 05       	cpc	r20, r1
    4956:	51 05       	cpc	r21, r1
    4958:	19 f4       	brne	.+6      	; 0x4960 <__pack_f+0x52>
    495a:	e0 e0       	ldi	r30, 0x00	; 0
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	92 c0       	rjmp	.+292    	; 0x4a84 <__pack_f+0x176>
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	93 81       	ldd	r25, Z+3	; 0x03
    4964:	6f ef       	ldi	r22, 0xFF	; 255
    4966:	82 38       	cpi	r24, 0x82	; 130
    4968:	96 07       	cpc	r25, r22
    496a:	0c f0       	brlt	.+2      	; 0x496e <__pack_f+0x60>
    496c:	5a c0       	rjmp	.+180    	; 0x4a22 <__pack_f+0x114>
    496e:	62 e8       	ldi	r22, 0x82	; 130
    4970:	7f ef       	ldi	r23, 0xFF	; 255
    4972:	68 1b       	sub	r22, r24
    4974:	79 0b       	sbc	r23, r25
    4976:	6a 31       	cpi	r22, 0x1A	; 26
    4978:	71 05       	cpc	r23, r1
    497a:	2c f0       	brlt	.+10     	; 0x4986 <__pack_f+0x78>
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	40 e0       	ldi	r20, 0x00	; 0
    4982:	50 e0       	ldi	r21, 0x00	; 0
    4984:	2a c0       	rjmp	.+84     	; 0x49da <__pack_f+0xcc>
    4986:	aa 24       	eor	r10, r10
    4988:	bb 24       	eor	r11, r11
    498a:	65 01       	movw	r12, r10
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	a0 e0       	ldi	r26, 0x00	; 0
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	06 2e       	mov	r0, r22
    4996:	04 c0       	rjmp	.+8      	; 0x49a0 <__pack_f+0x92>
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	aa 1f       	adc	r26, r26
    499e:	bb 1f       	adc	r27, r27
    49a0:	0a 94       	dec	r0
    49a2:	d2 f7       	brpl	.-12     	; 0x4998 <__pack_f+0x8a>
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	a1 09       	sbc	r26, r1
    49a8:	b1 09       	sbc	r27, r1
    49aa:	82 23       	and	r24, r18
    49ac:	93 23       	and	r25, r19
    49ae:	a4 23       	and	r26, r20
    49b0:	b5 23       	and	r27, r21
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	a1 05       	cpc	r26, r1
    49b6:	b1 05       	cpc	r27, r1
    49b8:	29 f0       	breq	.+10     	; 0x49c4 <__pack_f+0xb6>
    49ba:	71 e0       	ldi	r23, 0x01	; 1
    49bc:	a7 2e       	mov	r10, r23
    49be:	b1 2c       	mov	r11, r1
    49c0:	c1 2c       	mov	r12, r1
    49c2:	d1 2c       	mov	r13, r1
    49c4:	04 c0       	rjmp	.+8      	; 0x49ce <__pack_f+0xc0>
    49c6:	56 95       	lsr	r21
    49c8:	47 95       	ror	r20
    49ca:	37 95       	ror	r19
    49cc:	27 95       	ror	r18
    49ce:	6a 95       	dec	r22
    49d0:	d2 f7       	brpl	.-12     	; 0x49c6 <__pack_f+0xb8>
    49d2:	2a 29       	or	r18, r10
    49d4:	3b 29       	or	r19, r11
    49d6:	4c 29       	or	r20, r12
    49d8:	5d 29       	or	r21, r13
    49da:	da 01       	movw	r26, r20
    49dc:	c9 01       	movw	r24, r18
    49de:	8f 77       	andi	r24, 0x7F	; 127
    49e0:	90 70       	andi	r25, 0x00	; 0
    49e2:	a0 70       	andi	r26, 0x00	; 0
    49e4:	b0 70       	andi	r27, 0x00	; 0
    49e6:	80 34       	cpi	r24, 0x40	; 64
    49e8:	91 05       	cpc	r25, r1
    49ea:	a1 05       	cpc	r26, r1
    49ec:	b1 05       	cpc	r27, r1
    49ee:	39 f4       	brne	.+14     	; 0x49fe <__pack_f+0xf0>
    49f0:	27 ff       	sbrs	r18, 7
    49f2:	09 c0       	rjmp	.+18     	; 0x4a06 <__pack_f+0xf8>
    49f4:	20 5c       	subi	r18, 0xC0	; 192
    49f6:	3f 4f       	sbci	r19, 0xFF	; 255
    49f8:	4f 4f       	sbci	r20, 0xFF	; 255
    49fa:	5f 4f       	sbci	r21, 0xFF	; 255
    49fc:	04 c0       	rjmp	.+8      	; 0x4a06 <__pack_f+0xf8>
    49fe:	21 5c       	subi	r18, 0xC1	; 193
    4a00:	3f 4f       	sbci	r19, 0xFF	; 255
    4a02:	4f 4f       	sbci	r20, 0xFF	; 255
    4a04:	5f 4f       	sbci	r21, 0xFF	; 255
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	20 30       	cpi	r18, 0x00	; 0
    4a0c:	60 e0       	ldi	r22, 0x00	; 0
    4a0e:	36 07       	cpc	r19, r22
    4a10:	60 e0       	ldi	r22, 0x00	; 0
    4a12:	46 07       	cpc	r20, r22
    4a14:	60 e4       	ldi	r22, 0x40	; 64
    4a16:	56 07       	cpc	r21, r22
    4a18:	10 f0       	brcs	.+4      	; 0x4a1e <__pack_f+0x110>
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	fc 01       	movw	r30, r24
    4a20:	23 c0       	rjmp	.+70     	; 0x4a68 <__pack_f+0x15a>
    4a22:	80 38       	cpi	r24, 0x80	; 128
    4a24:	91 05       	cpc	r25, r1
    4a26:	44 f5       	brge	.+80     	; 0x4a78 <__pack_f+0x16a>
    4a28:	fc 01       	movw	r30, r24
    4a2a:	e1 58       	subi	r30, 0x81	; 129
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	da 01       	movw	r26, r20
    4a30:	c9 01       	movw	r24, r18
    4a32:	8f 77       	andi	r24, 0x7F	; 127
    4a34:	90 70       	andi	r25, 0x00	; 0
    4a36:	a0 70       	andi	r26, 0x00	; 0
    4a38:	b0 70       	andi	r27, 0x00	; 0
    4a3a:	80 34       	cpi	r24, 0x40	; 64
    4a3c:	91 05       	cpc	r25, r1
    4a3e:	a1 05       	cpc	r26, r1
    4a40:	b1 05       	cpc	r27, r1
    4a42:	39 f4       	brne	.+14     	; 0x4a52 <__pack_f+0x144>
    4a44:	27 ff       	sbrs	r18, 7
    4a46:	09 c0       	rjmp	.+18     	; 0x4a5a <__pack_f+0x14c>
    4a48:	20 5c       	subi	r18, 0xC0	; 192
    4a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    4a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a50:	04 c0       	rjmp	.+8      	; 0x4a5a <__pack_f+0x14c>
    4a52:	21 5c       	subi	r18, 0xC1	; 193
    4a54:	3f 4f       	sbci	r19, 0xFF	; 255
    4a56:	4f 4f       	sbci	r20, 0xFF	; 255
    4a58:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5a:	57 ff       	sbrs	r21, 7
    4a5c:	05 c0       	rjmp	.+10     	; 0x4a68 <__pack_f+0x15a>
    4a5e:	56 95       	lsr	r21
    4a60:	47 95       	ror	r20
    4a62:	37 95       	ror	r19
    4a64:	27 95       	ror	r18
    4a66:	31 96       	adiw	r30, 0x01	; 1
    4a68:	87 e0       	ldi	r24, 0x07	; 7
    4a6a:	56 95       	lsr	r21
    4a6c:	47 95       	ror	r20
    4a6e:	37 95       	ror	r19
    4a70:	27 95       	ror	r18
    4a72:	8a 95       	dec	r24
    4a74:	d1 f7       	brne	.-12     	; 0x4a6a <__pack_f+0x15c>
    4a76:	06 c0       	rjmp	.+12     	; 0x4a84 <__pack_f+0x176>
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	40 e0       	ldi	r20, 0x00	; 0
    4a7e:	50 e0       	ldi	r21, 0x00	; 0
    4a80:	ef ef       	ldi	r30, 0xFF	; 255
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	e2 2e       	mov	r14, r18
    4a86:	f3 2e       	mov	r15, r19
    4a88:	94 2f       	mov	r25, r20
    4a8a:	9f 77       	andi	r25, 0x7F	; 127
    4a8c:	80 2f       	mov	r24, r16
    4a8e:	80 78       	andi	r24, 0x80	; 128
    4a90:	89 2b       	or	r24, r25
    4a92:	9e 2f       	mov	r25, r30
    4a94:	97 95       	ror	r25
    4a96:	99 27       	eor	r25, r25
    4a98:	97 95       	ror	r25
    4a9a:	8f 77       	andi	r24, 0x7F	; 127
    4a9c:	08 2f       	mov	r16, r24
    4a9e:	09 2b       	or	r16, r25
    4aa0:	9e 2f       	mov	r25, r30
    4aa2:	96 95       	lsr	r25
    4aa4:	81 2f       	mov	r24, r17
    4aa6:	80 78       	andi	r24, 0x80	; 128
    4aa8:	89 2b       	or	r24, r25
    4aaa:	97 94       	ror	r9
    4aac:	99 24       	eor	r9, r9
    4aae:	97 94       	ror	r9
    4ab0:	8f 77       	andi	r24, 0x7F	; 127
    4ab2:	18 2f       	mov	r17, r24
    4ab4:	19 29       	or	r17, r9
    4ab6:	c8 01       	movw	r24, r16
    4ab8:	b7 01       	movw	r22, r14
    4aba:	1f 91       	pop	r17
    4abc:	0f 91       	pop	r16
    4abe:	ff 90       	pop	r15
    4ac0:	ef 90       	pop	r14
    4ac2:	df 90       	pop	r13
    4ac4:	cf 90       	pop	r12
    4ac6:	bf 90       	pop	r11
    4ac8:	af 90       	pop	r10
    4aca:	9f 90       	pop	r9
    4acc:	08 95       	ret

00004ace <__unpack_f>:
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	db 01       	movw	r26, r22
    4ad6:	20 81       	ld	r18, Z
    4ad8:	31 81       	ldd	r19, Z+1	; 0x01
    4ada:	92 81       	ldd	r25, Z+2	; 0x02
    4adc:	49 2f       	mov	r20, r25
    4ade:	4f 77       	andi	r20, 0x7F	; 127
    4ae0:	50 e0       	ldi	r21, 0x00	; 0
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	99 27       	eor	r25, r25
    4ae6:	99 1f       	adc	r25, r25
    4ae8:	83 81       	ldd	r24, Z+3	; 0x03
    4aea:	e8 2f       	mov	r30, r24
    4aec:	ee 0f       	add	r30, r30
    4aee:	e9 2b       	or	r30, r25
    4af0:	6e 2f       	mov	r22, r30
    4af2:	70 e0       	ldi	r23, 0x00	; 0
    4af4:	88 1f       	adc	r24, r24
    4af6:	88 27       	eor	r24, r24
    4af8:	88 1f       	adc	r24, r24
    4afa:	ed 01       	movw	r28, r26
    4afc:	89 83       	std	Y+1, r24	; 0x01
    4afe:	ee 23       	and	r30, r30
    4b00:	71 f5       	brne	.+92     	; 0x4b5e <__unpack_f+0x90>
    4b02:	21 15       	cp	r18, r1
    4b04:	31 05       	cpc	r19, r1
    4b06:	41 05       	cpc	r20, r1
    4b08:	51 05       	cpc	r21, r1
    4b0a:	11 f4       	brne	.+4      	; 0x4b10 <__unpack_f+0x42>
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	2f c0       	rjmp	.+94     	; 0x4b6e <__unpack_f+0xa0>
    4b10:	6e 57       	subi	r22, 0x7E	; 126
    4b12:	70 40       	sbci	r23, 0x00	; 0
    4b14:	fd 01       	movw	r30, r26
    4b16:	73 83       	std	Z+3, r23	; 0x03
    4b18:	62 83       	std	Z+2, r22	; 0x02
    4b1a:	67 e0       	ldi	r22, 0x07	; 7
    4b1c:	22 0f       	add	r18, r18
    4b1e:	33 1f       	adc	r19, r19
    4b20:	44 1f       	adc	r20, r20
    4b22:	55 1f       	adc	r21, r21
    4b24:	6a 95       	dec	r22
    4b26:	d1 f7       	brne	.-12     	; 0x4b1c <__unpack_f+0x4e>
    4b28:	83 e0       	ldi	r24, 0x03	; 3
    4b2a:	8c 93       	st	X, r24
    4b2c:	0a c0       	rjmp	.+20     	; 0x4b42 <__unpack_f+0x74>
    4b2e:	22 0f       	add	r18, r18
    4b30:	33 1f       	adc	r19, r19
    4b32:	44 1f       	adc	r20, r20
    4b34:	55 1f       	adc	r21, r21
    4b36:	ed 01       	movw	r28, r26
    4b38:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	9b 83       	std	Y+3, r25	; 0x03
    4b40:	8a 83       	std	Y+2, r24	; 0x02
    4b42:	20 30       	cpi	r18, 0x00	; 0
    4b44:	e0 e0       	ldi	r30, 0x00	; 0
    4b46:	3e 07       	cpc	r19, r30
    4b48:	e0 e0       	ldi	r30, 0x00	; 0
    4b4a:	4e 07       	cpc	r20, r30
    4b4c:	e0 e4       	ldi	r30, 0x40	; 64
    4b4e:	5e 07       	cpc	r21, r30
    4b50:	70 f3       	brcs	.-36     	; 0x4b2e <__unpack_f+0x60>
    4b52:	ed 01       	movw	r28, r26
    4b54:	2c 83       	std	Y+4, r18	; 0x04
    4b56:	3d 83       	std	Y+5, r19	; 0x05
    4b58:	4e 83       	std	Y+6, r20	; 0x06
    4b5a:	5f 83       	std	Y+7, r21	; 0x07
    4b5c:	25 c0       	rjmp	.+74     	; 0x4ba8 <__unpack_f+0xda>
    4b5e:	ef 3f       	cpi	r30, 0xFF	; 255
    4b60:	79 f4       	brne	.+30     	; 0x4b80 <__unpack_f+0xb2>
    4b62:	21 15       	cp	r18, r1
    4b64:	31 05       	cpc	r19, r1
    4b66:	41 05       	cpc	r20, r1
    4b68:	51 05       	cpc	r21, r1
    4b6a:	19 f4       	brne	.+6      	; 0x4b72 <__unpack_f+0xa4>
    4b6c:	84 e0       	ldi	r24, 0x04	; 4
    4b6e:	8c 93       	st	X, r24
    4b70:	1b c0       	rjmp	.+54     	; 0x4ba8 <__unpack_f+0xda>
    4b72:	44 ff       	sbrs	r20, 4
    4b74:	03 c0       	rjmp	.+6      	; 0x4b7c <__unpack_f+0xae>
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	8c 93       	st	X, r24
    4b7a:	11 c0       	rjmp	.+34     	; 0x4b9e <__unpack_f+0xd0>
    4b7c:	1c 92       	st	X, r1
    4b7e:	0f c0       	rjmp	.+30     	; 0x4b9e <__unpack_f+0xd0>
    4b80:	6f 57       	subi	r22, 0x7F	; 127
    4b82:	70 40       	sbci	r23, 0x00	; 0
    4b84:	ed 01       	movw	r28, r26
    4b86:	7b 83       	std	Y+3, r23	; 0x03
    4b88:	6a 83       	std	Y+2, r22	; 0x02
    4b8a:	83 e0       	ldi	r24, 0x03	; 3
    4b8c:	8c 93       	st	X, r24
    4b8e:	87 e0       	ldi	r24, 0x07	; 7
    4b90:	22 0f       	add	r18, r18
    4b92:	33 1f       	adc	r19, r19
    4b94:	44 1f       	adc	r20, r20
    4b96:	55 1f       	adc	r21, r21
    4b98:	8a 95       	dec	r24
    4b9a:	d1 f7       	brne	.-12     	; 0x4b90 <__unpack_f+0xc2>
    4b9c:	50 64       	ori	r21, 0x40	; 64
    4b9e:	fd 01       	movw	r30, r26
    4ba0:	24 83       	std	Z+4, r18	; 0x04
    4ba2:	35 83       	std	Z+5, r19	; 0x05
    4ba4:	46 83       	std	Z+6, r20	; 0x06
    4ba6:	57 83       	std	Z+7, r21	; 0x07
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	08 95       	ret

00004bae <__mulsi3>:
    4bae:	62 9f       	mul	r22, r18
    4bb0:	d0 01       	movw	r26, r0
    4bb2:	73 9f       	mul	r23, r19
    4bb4:	f0 01       	movw	r30, r0
    4bb6:	82 9f       	mul	r24, r18
    4bb8:	e0 0d       	add	r30, r0
    4bba:	f1 1d       	adc	r31, r1
    4bbc:	64 9f       	mul	r22, r20
    4bbe:	e0 0d       	add	r30, r0
    4bc0:	f1 1d       	adc	r31, r1
    4bc2:	92 9f       	mul	r25, r18
    4bc4:	f0 0d       	add	r31, r0
    4bc6:	83 9f       	mul	r24, r19
    4bc8:	f0 0d       	add	r31, r0
    4bca:	74 9f       	mul	r23, r20
    4bcc:	f0 0d       	add	r31, r0
    4bce:	65 9f       	mul	r22, r21
    4bd0:	f0 0d       	add	r31, r0
    4bd2:	99 27       	eor	r25, r25
    4bd4:	72 9f       	mul	r23, r18
    4bd6:	b0 0d       	add	r27, r0
    4bd8:	e1 1d       	adc	r30, r1
    4bda:	f9 1f       	adc	r31, r25
    4bdc:	63 9f       	mul	r22, r19
    4bde:	b0 0d       	add	r27, r0
    4be0:	e1 1d       	adc	r30, r1
    4be2:	f9 1f       	adc	r31, r25
    4be4:	bd 01       	movw	r22, r26
    4be6:	cf 01       	movw	r24, r30
    4be8:	11 24       	eor	r1, r1
    4bea:	08 95       	ret

00004bec <__udivmodhi4>:
    4bec:	aa 1b       	sub	r26, r26
    4bee:	bb 1b       	sub	r27, r27
    4bf0:	51 e1       	ldi	r21, 0x11	; 17
    4bf2:	07 c0       	rjmp	.+14     	; 0x4c02 <__udivmodhi4_ep>

00004bf4 <__udivmodhi4_loop>:
    4bf4:	aa 1f       	adc	r26, r26
    4bf6:	bb 1f       	adc	r27, r27
    4bf8:	a6 17       	cp	r26, r22
    4bfa:	b7 07       	cpc	r27, r23
    4bfc:	10 f0       	brcs	.+4      	; 0x4c02 <__udivmodhi4_ep>
    4bfe:	a6 1b       	sub	r26, r22
    4c00:	b7 0b       	sbc	r27, r23

00004c02 <__udivmodhi4_ep>:
    4c02:	88 1f       	adc	r24, r24
    4c04:	99 1f       	adc	r25, r25
    4c06:	5a 95       	dec	r21
    4c08:	a9 f7       	brne	.-22     	; 0x4bf4 <__udivmodhi4_loop>
    4c0a:	80 95       	com	r24
    4c0c:	90 95       	com	r25
    4c0e:	bc 01       	movw	r22, r24
    4c10:	cd 01       	movw	r24, r26
    4c12:	08 95       	ret

00004c14 <__divmodhi4>:
    4c14:	97 fb       	bst	r25, 7
    4c16:	09 2e       	mov	r0, r25
    4c18:	07 26       	eor	r0, r23
    4c1a:	0a d0       	rcall	.+20     	; 0x4c30 <__divmodhi4_neg1>
    4c1c:	77 fd       	sbrc	r23, 7
    4c1e:	04 d0       	rcall	.+8      	; 0x4c28 <__divmodhi4_neg2>
    4c20:	e5 df       	rcall	.-54     	; 0x4bec <__udivmodhi4>
    4c22:	06 d0       	rcall	.+12     	; 0x4c30 <__divmodhi4_neg1>
    4c24:	00 20       	and	r0, r0
    4c26:	1a f4       	brpl	.+6      	; 0x4c2e <__divmodhi4_exit>

00004c28 <__divmodhi4_neg2>:
    4c28:	70 95       	com	r23
    4c2a:	61 95       	neg	r22
    4c2c:	7f 4f       	sbci	r23, 0xFF	; 255

00004c2e <__divmodhi4_exit>:
    4c2e:	08 95       	ret

00004c30 <__divmodhi4_neg1>:
    4c30:	f6 f7       	brtc	.-4      	; 0x4c2e <__divmodhi4_exit>
    4c32:	90 95       	com	r25
    4c34:	81 95       	neg	r24
    4c36:	9f 4f       	sbci	r25, 0xFF	; 255
    4c38:	08 95       	ret

00004c3a <__prologue_saves__>:
    4c3a:	2f 92       	push	r2
    4c3c:	3f 92       	push	r3
    4c3e:	4f 92       	push	r4
    4c40:	5f 92       	push	r5
    4c42:	6f 92       	push	r6
    4c44:	7f 92       	push	r7
    4c46:	8f 92       	push	r8
    4c48:	9f 92       	push	r9
    4c4a:	af 92       	push	r10
    4c4c:	bf 92       	push	r11
    4c4e:	cf 92       	push	r12
    4c50:	df 92       	push	r13
    4c52:	ef 92       	push	r14
    4c54:	ff 92       	push	r15
    4c56:	0f 93       	push	r16
    4c58:	1f 93       	push	r17
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
    4c62:	ca 1b       	sub	r28, r26
    4c64:	db 0b       	sbc	r29, r27
    4c66:	0f b6       	in	r0, 0x3f	; 63
    4c68:	f8 94       	cli
    4c6a:	de bf       	out	0x3e, r29	; 62
    4c6c:	0f be       	out	0x3f, r0	; 63
    4c6e:	cd bf       	out	0x3d, r28	; 61
    4c70:	19 94       	eijmp

00004c72 <__epilogue_restores__>:
    4c72:	2a 88       	ldd	r2, Y+18	; 0x12
    4c74:	39 88       	ldd	r3, Y+17	; 0x11
    4c76:	48 88       	ldd	r4, Y+16	; 0x10
    4c78:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c80:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c82:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c84:	b9 84       	ldd	r11, Y+9	; 0x09
    4c86:	c8 84       	ldd	r12, Y+8	; 0x08
    4c88:	df 80       	ldd	r13, Y+7	; 0x07
    4c8a:	ee 80       	ldd	r14, Y+6	; 0x06
    4c8c:	fd 80       	ldd	r15, Y+5	; 0x05
    4c8e:	0c 81       	ldd	r16, Y+4	; 0x04
    4c90:	1b 81       	ldd	r17, Y+3	; 0x03
    4c92:	aa 81       	ldd	r26, Y+2	; 0x02
    4c94:	b9 81       	ldd	r27, Y+1	; 0x01
    4c96:	ce 0f       	add	r28, r30
    4c98:	d1 1d       	adc	r29, r1
    4c9a:	0f b6       	in	r0, 0x3f	; 63
    4c9c:	f8 94       	cli
    4c9e:	de bf       	out	0x3e, r29	; 62
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	cd bf       	out	0x3d, r28	; 61
    4ca4:	ed 01       	movw	r28, r26
    4ca6:	08 95       	ret

00004ca8 <do_rand>:
    4ca8:	af 92       	push	r10
    4caa:	bf 92       	push	r11
    4cac:	cf 92       	push	r12
    4cae:	df 92       	push	r13
    4cb0:	ef 92       	push	r14
    4cb2:	ff 92       	push	r15
    4cb4:	0f 93       	push	r16
    4cb6:	1f 93       	push	r17
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	ec 01       	movw	r28, r24
    4cbe:	68 81       	ld	r22, Y
    4cc0:	79 81       	ldd	r23, Y+1	; 0x01
    4cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc6:	61 15       	cp	r22, r1
    4cc8:	71 05       	cpc	r23, r1
    4cca:	81 05       	cpc	r24, r1
    4ccc:	91 05       	cpc	r25, r1
    4cce:	21 f4       	brne	.+8      	; 0x4cd8 <do_rand+0x30>
    4cd0:	64 e2       	ldi	r22, 0x24	; 36
    4cd2:	79 ed       	ldi	r23, 0xD9	; 217
    4cd4:	8b e5       	ldi	r24, 0x5B	; 91
    4cd6:	97 e0       	ldi	r25, 0x07	; 7
    4cd8:	2d e1       	ldi	r18, 0x1D	; 29
    4cda:	33 ef       	ldi	r19, 0xF3	; 243
    4cdc:	41 e0       	ldi	r20, 0x01	; 1
    4cde:	50 e0       	ldi	r21, 0x00	; 0
    4ce0:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__divmodsi4>
    4ce4:	79 01       	movw	r14, r18
    4ce6:	8a 01       	movw	r16, r20
    4ce8:	27 ea       	ldi	r18, 0xA7	; 167
    4cea:	31 e4       	ldi	r19, 0x41	; 65
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__mulsi3>
    4cf4:	5b 01       	movw	r10, r22
    4cf6:	6c 01       	movw	r12, r24
    4cf8:	c8 01       	movw	r24, r16
    4cfa:	b7 01       	movw	r22, r14
    4cfc:	2c ee       	ldi	r18, 0xEC	; 236
    4cfe:	34 ef       	ldi	r19, 0xF4	; 244
    4d00:	4f ef       	ldi	r20, 0xFF	; 255
    4d02:	5f ef       	ldi	r21, 0xFF	; 255
    4d04:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__mulsi3>
    4d08:	6a 0d       	add	r22, r10
    4d0a:	7b 1d       	adc	r23, r11
    4d0c:	8c 1d       	adc	r24, r12
    4d0e:	9d 1d       	adc	r25, r13
    4d10:	97 ff       	sbrs	r25, 7
    4d12:	04 c0       	rjmp	.+8      	; 0x4d1c <do_rand+0x74>
    4d14:	61 50       	subi	r22, 0x01	; 1
    4d16:	70 40       	sbci	r23, 0x00	; 0
    4d18:	80 40       	sbci	r24, 0x00	; 0
    4d1a:	90 48       	sbci	r25, 0x80	; 128
    4d1c:	68 83       	st	Y, r22
    4d1e:	79 83       	std	Y+1, r23	; 0x01
    4d20:	8a 83       	std	Y+2, r24	; 0x02
    4d22:	9b 83       	std	Y+3, r25	; 0x03
    4d24:	7f 77       	andi	r23, 0x7F	; 127
    4d26:	cb 01       	movw	r24, r22
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	ff 90       	pop	r15
    4d32:	ef 90       	pop	r14
    4d34:	df 90       	pop	r13
    4d36:	cf 90       	pop	r12
    4d38:	bf 90       	pop	r11
    4d3a:	af 90       	pop	r10
    4d3c:	08 95       	ret

00004d3e <rand_r>:
    4d3e:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <do_rand>
    4d42:	08 95       	ret

00004d44 <rand>:
    4d44:	8f e1       	ldi	r24, 0x1F	; 31
    4d46:	93 e0       	ldi	r25, 0x03	; 3
    4d48:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <do_rand>
    4d4c:	08 95       	ret

00004d4e <srand>:
    4d4e:	a0 e0       	ldi	r26, 0x00	; 0
    4d50:	b0 e0       	ldi	r27, 0x00	; 0
    4d52:	80 93 1f 03 	sts	0x031F, r24
    4d56:	90 93 20 03 	sts	0x0320, r25
    4d5a:	a0 93 21 03 	sts	0x0321, r26
    4d5e:	b0 93 22 03 	sts	0x0322, r27
    4d62:	08 95       	ret
    4d64:	f5 d0       	rcall	.+490    	; 0x4f50 <__fp_pscA>
    4d66:	58 f0       	brcs	.+22     	; 0x4d7e <srand+0x30>
    4d68:	80 e8       	ldi	r24, 0x80	; 128
    4d6a:	91 e0       	ldi	r25, 0x01	; 1
    4d6c:	09 f4       	brne	.+2      	; 0x4d70 <srand+0x22>
    4d6e:	9e ef       	ldi	r25, 0xFE	; 254
    4d70:	f6 d0       	rcall	.+492    	; 0x4f5e <__fp_pscB>
    4d72:	28 f0       	brcs	.+10     	; 0x4d7e <srand+0x30>
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	51 e0       	ldi	r21, 0x01	; 1
    4d78:	59 f4       	brne	.+22     	; 0x4d90 <atan2+0xe>
    4d7a:	5e ef       	ldi	r21, 0xFE	; 254
    4d7c:	09 c0       	rjmp	.+18     	; 0x4d90 <atan2+0xe>
    4d7e:	c0 c0       	rjmp	.+384    	; 0x4f00 <__fp_nan>
    4d80:	28 c1       	rjmp	.+592    	; 0x4fd2 <__fp_zero>

00004d82 <atan2>:
    4d82:	e9 2f       	mov	r30, r25
    4d84:	e0 78       	andi	r30, 0x80	; 128
    4d86:	03 d1       	rcall	.+518    	; 0x4f8e <__fp_split3>
    4d88:	68 f3       	brcs	.-38     	; 0x4d64 <srand+0x16>
    4d8a:	09 2e       	mov	r0, r25
    4d8c:	05 2a       	or	r0, r21
    4d8e:	c1 f3       	breq	.-16     	; 0x4d80 <srand+0x32>
    4d90:	26 17       	cp	r18, r22
    4d92:	37 07       	cpc	r19, r23
    4d94:	48 07       	cpc	r20, r24
    4d96:	59 07       	cpc	r21, r25
    4d98:	38 f0       	brcs	.+14     	; 0x4da8 <atan2+0x26>
    4d9a:	0e 2e       	mov	r0, r30
    4d9c:	07 f8       	bld	r0, 7
    4d9e:	e0 25       	eor	r30, r0
    4da0:	69 f0       	breq	.+26     	; 0x4dbc <atan2+0x3a>
    4da2:	e0 25       	eor	r30, r0
    4da4:	e0 64       	ori	r30, 0x40	; 64
    4da6:	0a c0       	rjmp	.+20     	; 0x4dbc <atan2+0x3a>
    4da8:	ef 63       	ori	r30, 0x3F	; 63
    4daa:	07 f8       	bld	r0, 7
    4dac:	00 94       	com	r0
    4dae:	07 fa       	bst	r0, 7
    4db0:	db 01       	movw	r26, r22
    4db2:	b9 01       	movw	r22, r18
    4db4:	9d 01       	movw	r18, r26
    4db6:	dc 01       	movw	r26, r24
    4db8:	ca 01       	movw	r24, r20
    4dba:	ad 01       	movw	r20, r26
    4dbc:	ef 93       	push	r30
    4dbe:	41 d0       	rcall	.+130    	; 0x4e42 <__divsf3_pse>
    4dc0:	d5 d0       	rcall	.+426    	; 0x4f6c <__fp_round>
    4dc2:	0a d0       	rcall	.+20     	; 0x4dd8 <atan>
    4dc4:	5f 91       	pop	r21
    4dc6:	55 23       	and	r21, r21
    4dc8:	31 f0       	breq	.+12     	; 0x4dd6 <atan2+0x54>
    4dca:	2b ed       	ldi	r18, 0xDB	; 219
    4dcc:	3f e0       	ldi	r19, 0x0F	; 15
    4dce:	49 e4       	ldi	r20, 0x49	; 73
    4dd0:	50 fd       	sbrc	r21, 0
    4dd2:	49 ec       	ldi	r20, 0xC9	; 201
    4dd4:	77 c1       	rjmp	.+750    	; 0x50c4 <__addsf3>
    4dd6:	08 95       	ret

00004dd8 <atan>:
    4dd8:	df 93       	push	r29
    4dda:	dd 27       	eor	r29, r29
    4ddc:	b9 2f       	mov	r27, r25
    4dde:	bf 77       	andi	r27, 0x7F	; 127
    4de0:	40 e8       	ldi	r20, 0x80	; 128
    4de2:	5f e3       	ldi	r21, 0x3F	; 63
    4de4:	16 16       	cp	r1, r22
    4de6:	17 06       	cpc	r1, r23
    4de8:	48 07       	cpc	r20, r24
    4dea:	5b 07       	cpc	r21, r27
    4dec:	10 f4       	brcc	.+4      	; 0x4df2 <atan+0x1a>
    4dee:	d9 2f       	mov	r29, r25
    4df0:	f7 d0       	rcall	.+494    	; 0x4fe0 <inverse>
    4df2:	9f 93       	push	r25
    4df4:	8f 93       	push	r24
    4df6:	7f 93       	push	r23
    4df8:	6f 93       	push	r22
    4dfa:	5a d1       	rcall	.+692    	; 0x50b0 <square>
    4dfc:	ee e4       	ldi	r30, 0x4E	; 78
    4dfe:	f1 e0       	ldi	r31, 0x01	; 1
    4e00:	82 d0       	rcall	.+260    	; 0x4f06 <__fp_powser>
    4e02:	b4 d0       	rcall	.+360    	; 0x4f6c <__fp_round>
    4e04:	2f 91       	pop	r18
    4e06:	3f 91       	pop	r19
    4e08:	4f 91       	pop	r20
    4e0a:	5f 91       	pop	r21
    4e0c:	fa d0       	rcall	.+500    	; 0x5002 <__mulsf3x>
    4e0e:	dd 23       	and	r29, r29
    4e10:	49 f0       	breq	.+18     	; 0x4e24 <atan+0x4c>
    4e12:	90 58       	subi	r25, 0x80	; 128
    4e14:	a2 ea       	ldi	r26, 0xA2	; 162
    4e16:	2a ed       	ldi	r18, 0xDA	; 218
    4e18:	3f e0       	ldi	r19, 0x0F	; 15
    4e1a:	49 ec       	ldi	r20, 0xC9	; 201
    4e1c:	5f e3       	ldi	r21, 0x3F	; 63
    4e1e:	d0 78       	andi	r29, 0x80	; 128
    4e20:	5d 27       	eor	r21, r29
    4e22:	61 d1       	rcall	.+706    	; 0x50e6 <__addsf3x>
    4e24:	df 91       	pop	r29
    4e26:	a2 c0       	rjmp	.+324    	; 0x4f6c <__fp_round>
    4e28:	9a d0       	rcall	.+308    	; 0x4f5e <__fp_pscB>
    4e2a:	40 f0       	brcs	.+16     	; 0x4e3c <atan+0x64>
    4e2c:	91 d0       	rcall	.+290    	; 0x4f50 <__fp_pscA>
    4e2e:	30 f0       	brcs	.+12     	; 0x4e3c <atan+0x64>
    4e30:	21 f4       	brne	.+8      	; 0x4e3a <atan+0x62>
    4e32:	5f 3f       	cpi	r21, 0xFF	; 255
    4e34:	19 f0       	breq	.+6      	; 0x4e3c <atan+0x64>
    4e36:	5e c0       	rjmp	.+188    	; 0x4ef4 <__fp_inf>
    4e38:	51 11       	cpse	r21, r1
    4e3a:	cc c0       	rjmp	.+408    	; 0x4fd4 <__fp_szero>
    4e3c:	61 c0       	rjmp	.+194    	; 0x4f00 <__fp_nan>

00004e3e <__divsf3x>:
    4e3e:	a7 d0       	rcall	.+334    	; 0x4f8e <__fp_split3>
    4e40:	98 f3       	brcs	.-26     	; 0x4e28 <atan+0x50>

00004e42 <__divsf3_pse>:
    4e42:	99 23       	and	r25, r25
    4e44:	c9 f3       	breq	.-14     	; 0x4e38 <atan+0x60>
    4e46:	55 23       	and	r21, r21
    4e48:	b1 f3       	breq	.-20     	; 0x4e36 <atan+0x5e>
    4e4a:	95 1b       	sub	r25, r21
    4e4c:	55 0b       	sbc	r21, r21
    4e4e:	bb 27       	eor	r27, r27
    4e50:	aa 27       	eor	r26, r26
    4e52:	62 17       	cp	r22, r18
    4e54:	73 07       	cpc	r23, r19
    4e56:	84 07       	cpc	r24, r20
    4e58:	38 f0       	brcs	.+14     	; 0x4e68 <__divsf3_pse+0x26>
    4e5a:	9f 5f       	subi	r25, 0xFF	; 255
    4e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5e:	22 0f       	add	r18, r18
    4e60:	33 1f       	adc	r19, r19
    4e62:	44 1f       	adc	r20, r20
    4e64:	aa 1f       	adc	r26, r26
    4e66:	a9 f3       	breq	.-22     	; 0x4e52 <__divsf3_pse+0x10>
    4e68:	33 d0       	rcall	.+102    	; 0x4ed0 <__divsf3_pse+0x8e>
    4e6a:	0e 2e       	mov	r0, r30
    4e6c:	3a f0       	brmi	.+14     	; 0x4e7c <__divsf3_pse+0x3a>
    4e6e:	e0 e8       	ldi	r30, 0x80	; 128
    4e70:	30 d0       	rcall	.+96     	; 0x4ed2 <__divsf3_pse+0x90>
    4e72:	91 50       	subi	r25, 0x01	; 1
    4e74:	50 40       	sbci	r21, 0x00	; 0
    4e76:	e6 95       	lsr	r30
    4e78:	00 1c       	adc	r0, r0
    4e7a:	ca f7       	brpl	.-14     	; 0x4e6e <__divsf3_pse+0x2c>
    4e7c:	29 d0       	rcall	.+82     	; 0x4ed0 <__divsf3_pse+0x8e>
    4e7e:	fe 2f       	mov	r31, r30
    4e80:	27 d0       	rcall	.+78     	; 0x4ed0 <__divsf3_pse+0x8e>
    4e82:	66 0f       	add	r22, r22
    4e84:	77 1f       	adc	r23, r23
    4e86:	88 1f       	adc	r24, r24
    4e88:	bb 1f       	adc	r27, r27
    4e8a:	26 17       	cp	r18, r22
    4e8c:	37 07       	cpc	r19, r23
    4e8e:	48 07       	cpc	r20, r24
    4e90:	ab 07       	cpc	r26, r27
    4e92:	b0 e8       	ldi	r27, 0x80	; 128
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <__divsf3_pse+0x56>
    4e96:	bb 0b       	sbc	r27, r27
    4e98:	80 2d       	mov	r24, r0
    4e9a:	bf 01       	movw	r22, r30
    4e9c:	ff 27       	eor	r31, r31
    4e9e:	93 58       	subi	r25, 0x83	; 131
    4ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea2:	2a f0       	brmi	.+10     	; 0x4eae <__divsf3_pse+0x6c>
    4ea4:	9e 3f       	cpi	r25, 0xFE	; 254
    4ea6:	51 05       	cpc	r21, r1
    4ea8:	68 f0       	brcs	.+26     	; 0x4ec4 <__divsf3_pse+0x82>
    4eaa:	24 c0       	rjmp	.+72     	; 0x4ef4 <__fp_inf>
    4eac:	93 c0       	rjmp	.+294    	; 0x4fd4 <__fp_szero>
    4eae:	5f 3f       	cpi	r21, 0xFF	; 255
    4eb0:	ec f3       	brlt	.-6      	; 0x4eac <__divsf3_pse+0x6a>
    4eb2:	98 3e       	cpi	r25, 0xE8	; 232
    4eb4:	dc f3       	brlt	.-10     	; 0x4eac <__divsf3_pse+0x6a>
    4eb6:	86 95       	lsr	r24
    4eb8:	77 95       	ror	r23
    4eba:	67 95       	ror	r22
    4ebc:	b7 95       	ror	r27
    4ebe:	f7 95       	ror	r31
    4ec0:	9f 5f       	subi	r25, 0xFF	; 255
    4ec2:	c9 f7       	brne	.-14     	; 0x4eb6 <__divsf3_pse+0x74>
    4ec4:	88 0f       	add	r24, r24
    4ec6:	91 1d       	adc	r25, r1
    4ec8:	96 95       	lsr	r25
    4eca:	87 95       	ror	r24
    4ecc:	97 f9       	bld	r25, 7
    4ece:	08 95       	ret
    4ed0:	e1 e0       	ldi	r30, 0x01	; 1
    4ed2:	66 0f       	add	r22, r22
    4ed4:	77 1f       	adc	r23, r23
    4ed6:	88 1f       	adc	r24, r24
    4ed8:	bb 1f       	adc	r27, r27
    4eda:	62 17       	cp	r22, r18
    4edc:	73 07       	cpc	r23, r19
    4ede:	84 07       	cpc	r24, r20
    4ee0:	ba 07       	cpc	r27, r26
    4ee2:	20 f0       	brcs	.+8      	; 0x4eec <__divsf3_pse+0xaa>
    4ee4:	62 1b       	sub	r22, r18
    4ee6:	73 0b       	sbc	r23, r19
    4ee8:	84 0b       	sbc	r24, r20
    4eea:	ba 0b       	sbc	r27, r26
    4eec:	ee 1f       	adc	r30, r30
    4eee:	88 f7       	brcc	.-30     	; 0x4ed2 <__divsf3_pse+0x90>
    4ef0:	e0 95       	com	r30
    4ef2:	08 95       	ret

00004ef4 <__fp_inf>:
    4ef4:	97 f9       	bld	r25, 7
    4ef6:	9f 67       	ori	r25, 0x7F	; 127
    4ef8:	80 e8       	ldi	r24, 0x80	; 128
    4efa:	70 e0       	ldi	r23, 0x00	; 0
    4efc:	60 e0       	ldi	r22, 0x00	; 0
    4efe:	08 95       	ret

00004f00 <__fp_nan>:
    4f00:	9f ef       	ldi	r25, 0xFF	; 255
    4f02:	80 ec       	ldi	r24, 0xC0	; 192
    4f04:	08 95       	ret

00004f06 <__fp_powser>:
    4f06:	df 93       	push	r29
    4f08:	cf 93       	push	r28
    4f0a:	1f 93       	push	r17
    4f0c:	0f 93       	push	r16
    4f0e:	ff 92       	push	r15
    4f10:	ef 92       	push	r14
    4f12:	df 92       	push	r13
    4f14:	7b 01       	movw	r14, r22
    4f16:	8c 01       	movw	r16, r24
    4f18:	68 94       	set
    4f1a:	05 c0       	rjmp	.+10     	; 0x4f26 <__fp_powser+0x20>
    4f1c:	da 2e       	mov	r13, r26
    4f1e:	ef 01       	movw	r28, r30
    4f20:	70 d0       	rcall	.+224    	; 0x5002 <__mulsf3x>
    4f22:	fe 01       	movw	r30, r28
    4f24:	e8 94       	clt
    4f26:	a5 91       	lpm	r26, Z+
    4f28:	25 91       	lpm	r18, Z+
    4f2a:	35 91       	lpm	r19, Z+
    4f2c:	45 91       	lpm	r20, Z+
    4f2e:	55 91       	lpm	r21, Z+
    4f30:	ae f3       	brts	.-22     	; 0x4f1c <__fp_powser+0x16>
    4f32:	ef 01       	movw	r28, r30
    4f34:	d8 d0       	rcall	.+432    	; 0x50e6 <__addsf3x>
    4f36:	fe 01       	movw	r30, r28
    4f38:	97 01       	movw	r18, r14
    4f3a:	a8 01       	movw	r20, r16
    4f3c:	da 94       	dec	r13
    4f3e:	79 f7       	brne	.-34     	; 0x4f1e <__fp_powser+0x18>
    4f40:	df 90       	pop	r13
    4f42:	ef 90       	pop	r14
    4f44:	ff 90       	pop	r15
    4f46:	0f 91       	pop	r16
    4f48:	1f 91       	pop	r17
    4f4a:	cf 91       	pop	r28
    4f4c:	df 91       	pop	r29
    4f4e:	08 95       	ret

00004f50 <__fp_pscA>:
    4f50:	00 24       	eor	r0, r0
    4f52:	0a 94       	dec	r0
    4f54:	16 16       	cp	r1, r22
    4f56:	17 06       	cpc	r1, r23
    4f58:	18 06       	cpc	r1, r24
    4f5a:	09 06       	cpc	r0, r25
    4f5c:	08 95       	ret

00004f5e <__fp_pscB>:
    4f5e:	00 24       	eor	r0, r0
    4f60:	0a 94       	dec	r0
    4f62:	12 16       	cp	r1, r18
    4f64:	13 06       	cpc	r1, r19
    4f66:	14 06       	cpc	r1, r20
    4f68:	05 06       	cpc	r0, r21
    4f6a:	08 95       	ret

00004f6c <__fp_round>:
    4f6c:	09 2e       	mov	r0, r25
    4f6e:	03 94       	inc	r0
    4f70:	00 0c       	add	r0, r0
    4f72:	11 f4       	brne	.+4      	; 0x4f78 <__fp_round+0xc>
    4f74:	88 23       	and	r24, r24
    4f76:	52 f0       	brmi	.+20     	; 0x4f8c <__fp_round+0x20>
    4f78:	bb 0f       	add	r27, r27
    4f7a:	40 f4       	brcc	.+16     	; 0x4f8c <__fp_round+0x20>
    4f7c:	bf 2b       	or	r27, r31
    4f7e:	11 f4       	brne	.+4      	; 0x4f84 <__fp_round+0x18>
    4f80:	60 ff       	sbrs	r22, 0
    4f82:	04 c0       	rjmp	.+8      	; 0x4f8c <__fp_round+0x20>
    4f84:	6f 5f       	subi	r22, 0xFF	; 255
    4f86:	7f 4f       	sbci	r23, 0xFF	; 255
    4f88:	8f 4f       	sbci	r24, 0xFF	; 255
    4f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f8c:	08 95       	ret

00004f8e <__fp_split3>:
    4f8e:	57 fd       	sbrc	r21, 7
    4f90:	90 58       	subi	r25, 0x80	; 128
    4f92:	44 0f       	add	r20, r20
    4f94:	55 1f       	adc	r21, r21
    4f96:	59 f0       	breq	.+22     	; 0x4fae <__fp_splitA+0x10>
    4f98:	5f 3f       	cpi	r21, 0xFF	; 255
    4f9a:	71 f0       	breq	.+28     	; 0x4fb8 <__fp_splitA+0x1a>
    4f9c:	47 95       	ror	r20

00004f9e <__fp_splitA>:
    4f9e:	88 0f       	add	r24, r24
    4fa0:	97 fb       	bst	r25, 7
    4fa2:	99 1f       	adc	r25, r25
    4fa4:	61 f0       	breq	.+24     	; 0x4fbe <__fp_splitA+0x20>
    4fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    4fa8:	79 f0       	breq	.+30     	; 0x4fc8 <__fp_splitA+0x2a>
    4faa:	87 95       	ror	r24
    4fac:	08 95       	ret
    4fae:	12 16       	cp	r1, r18
    4fb0:	13 06       	cpc	r1, r19
    4fb2:	14 06       	cpc	r1, r20
    4fb4:	55 1f       	adc	r21, r21
    4fb6:	f2 cf       	rjmp	.-28     	; 0x4f9c <__fp_split3+0xe>
    4fb8:	46 95       	lsr	r20
    4fba:	f1 df       	rcall	.-30     	; 0x4f9e <__fp_splitA>
    4fbc:	08 c0       	rjmp	.+16     	; 0x4fce <__fp_splitA+0x30>
    4fbe:	16 16       	cp	r1, r22
    4fc0:	17 06       	cpc	r1, r23
    4fc2:	18 06       	cpc	r1, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	f1 cf       	rjmp	.-30     	; 0x4faa <__fp_splitA+0xc>
    4fc8:	86 95       	lsr	r24
    4fca:	71 05       	cpc	r23, r1
    4fcc:	61 05       	cpc	r22, r1
    4fce:	08 94       	sec
    4fd0:	08 95       	ret

00004fd2 <__fp_zero>:
    4fd2:	e8 94       	clt

00004fd4 <__fp_szero>:
    4fd4:	bb 27       	eor	r27, r27
    4fd6:	66 27       	eor	r22, r22
    4fd8:	77 27       	eor	r23, r23
    4fda:	cb 01       	movw	r24, r22
    4fdc:	97 f9       	bld	r25, 7
    4fde:	08 95       	ret

00004fe0 <inverse>:
    4fe0:	9b 01       	movw	r18, r22
    4fe2:	ac 01       	movw	r20, r24
    4fe4:	60 e0       	ldi	r22, 0x00	; 0
    4fe6:	70 e0       	ldi	r23, 0x00	; 0
    4fe8:	80 e8       	ldi	r24, 0x80	; 128
    4fea:	9f e3       	ldi	r25, 0x3F	; 63
    4fec:	cf c0       	rjmp	.+414    	; 0x518c <__divsf3>
    4fee:	b0 df       	rcall	.-160    	; 0x4f50 <__fp_pscA>
    4ff0:	28 f0       	brcs	.+10     	; 0x4ffc <inverse+0x1c>
    4ff2:	b5 df       	rcall	.-150    	; 0x4f5e <__fp_pscB>
    4ff4:	18 f0       	brcs	.+6      	; 0x4ffc <inverse+0x1c>
    4ff6:	95 23       	and	r25, r21
    4ff8:	09 f0       	breq	.+2      	; 0x4ffc <inverse+0x1c>
    4ffa:	7c cf       	rjmp	.-264    	; 0x4ef4 <__fp_inf>
    4ffc:	81 cf       	rjmp	.-254    	; 0x4f00 <__fp_nan>
    4ffe:	11 24       	eor	r1, r1
    5000:	e9 cf       	rjmp	.-46     	; 0x4fd4 <__fp_szero>

00005002 <__mulsf3x>:
    5002:	c5 df       	rcall	.-118    	; 0x4f8e <__fp_split3>
    5004:	a0 f3       	brcs	.-24     	; 0x4fee <inverse+0xe>

00005006 <__mulsf3_pse>:
    5006:	95 9f       	mul	r25, r21
    5008:	d1 f3       	breq	.-12     	; 0x4ffe <inverse+0x1e>
    500a:	95 0f       	add	r25, r21
    500c:	50 e0       	ldi	r21, 0x00	; 0
    500e:	55 1f       	adc	r21, r21
    5010:	62 9f       	mul	r22, r18
    5012:	f0 01       	movw	r30, r0
    5014:	72 9f       	mul	r23, r18
    5016:	bb 27       	eor	r27, r27
    5018:	f0 0d       	add	r31, r0
    501a:	b1 1d       	adc	r27, r1
    501c:	63 9f       	mul	r22, r19
    501e:	aa 27       	eor	r26, r26
    5020:	f0 0d       	add	r31, r0
    5022:	b1 1d       	adc	r27, r1
    5024:	aa 1f       	adc	r26, r26
    5026:	64 9f       	mul	r22, r20
    5028:	66 27       	eor	r22, r22
    502a:	b0 0d       	add	r27, r0
    502c:	a1 1d       	adc	r26, r1
    502e:	66 1f       	adc	r22, r22
    5030:	82 9f       	mul	r24, r18
    5032:	22 27       	eor	r18, r18
    5034:	b0 0d       	add	r27, r0
    5036:	a1 1d       	adc	r26, r1
    5038:	62 1f       	adc	r22, r18
    503a:	73 9f       	mul	r23, r19
    503c:	b0 0d       	add	r27, r0
    503e:	a1 1d       	adc	r26, r1
    5040:	62 1f       	adc	r22, r18
    5042:	83 9f       	mul	r24, r19
    5044:	a0 0d       	add	r26, r0
    5046:	61 1d       	adc	r22, r1
    5048:	22 1f       	adc	r18, r18
    504a:	74 9f       	mul	r23, r20
    504c:	33 27       	eor	r19, r19
    504e:	a0 0d       	add	r26, r0
    5050:	61 1d       	adc	r22, r1
    5052:	23 1f       	adc	r18, r19
    5054:	84 9f       	mul	r24, r20
    5056:	60 0d       	add	r22, r0
    5058:	21 1d       	adc	r18, r1
    505a:	82 2f       	mov	r24, r18
    505c:	76 2f       	mov	r23, r22
    505e:	6a 2f       	mov	r22, r26
    5060:	11 24       	eor	r1, r1
    5062:	9f 57       	subi	r25, 0x7F	; 127
    5064:	50 40       	sbci	r21, 0x00	; 0
    5066:	8a f0       	brmi	.+34     	; 0x508a <__mulsf3_pse+0x84>
    5068:	e1 f0       	breq	.+56     	; 0x50a2 <__mulsf3_pse+0x9c>
    506a:	88 23       	and	r24, r24
    506c:	4a f0       	brmi	.+18     	; 0x5080 <__mulsf3_pse+0x7a>
    506e:	ee 0f       	add	r30, r30
    5070:	ff 1f       	adc	r31, r31
    5072:	bb 1f       	adc	r27, r27
    5074:	66 1f       	adc	r22, r22
    5076:	77 1f       	adc	r23, r23
    5078:	88 1f       	adc	r24, r24
    507a:	91 50       	subi	r25, 0x01	; 1
    507c:	50 40       	sbci	r21, 0x00	; 0
    507e:	a9 f7       	brne	.-22     	; 0x506a <__mulsf3_pse+0x64>
    5080:	9e 3f       	cpi	r25, 0xFE	; 254
    5082:	51 05       	cpc	r21, r1
    5084:	70 f0       	brcs	.+28     	; 0x50a2 <__mulsf3_pse+0x9c>
    5086:	36 cf       	rjmp	.-404    	; 0x4ef4 <__fp_inf>
    5088:	a5 cf       	rjmp	.-182    	; 0x4fd4 <__fp_szero>
    508a:	5f 3f       	cpi	r21, 0xFF	; 255
    508c:	ec f3       	brlt	.-6      	; 0x5088 <__mulsf3_pse+0x82>
    508e:	98 3e       	cpi	r25, 0xE8	; 232
    5090:	dc f3       	brlt	.-10     	; 0x5088 <__mulsf3_pse+0x82>
    5092:	86 95       	lsr	r24
    5094:	77 95       	ror	r23
    5096:	67 95       	ror	r22
    5098:	b7 95       	ror	r27
    509a:	f7 95       	ror	r31
    509c:	e7 95       	ror	r30
    509e:	9f 5f       	subi	r25, 0xFF	; 255
    50a0:	c1 f7       	brne	.-16     	; 0x5092 <__mulsf3_pse+0x8c>
    50a2:	fe 2b       	or	r31, r30
    50a4:	88 0f       	add	r24, r24
    50a6:	91 1d       	adc	r25, r1
    50a8:	96 95       	lsr	r25
    50aa:	87 95       	ror	r24
    50ac:	97 f9       	bld	r25, 7
    50ae:	08 95       	ret

000050b0 <square>:
    50b0:	9b 01       	movw	r18, r22
    50b2:	ac 01       	movw	r20, r24
    50b4:	2f ca       	rjmp	.-2978   	; 0x4514 <__mulsf3>

000050b6 <__eerd_word_m2560>:
    50b6:	a8 e1       	ldi	r26, 0x18	; 24
    50b8:	b0 e0       	ldi	r27, 0x00	; 0
    50ba:	42 e0       	ldi	r20, 0x02	; 2
    50bc:	50 e0       	ldi	r21, 0x00	; 0
    50be:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__eerd_blraw_m2560>

000050c2 <__subsf3>:
    50c2:	50 58       	subi	r21, 0x80	; 128

000050c4 <__addsf3>:
    50c4:	bb 27       	eor	r27, r27
    50c6:	aa 27       	eor	r26, r26
    50c8:	0e d0       	rcall	.+28     	; 0x50e6 <__addsf3x>
    50ca:	50 cf       	rjmp	.-352    	; 0x4f6c <__fp_round>
    50cc:	41 df       	rcall	.-382    	; 0x4f50 <__fp_pscA>
    50ce:	30 f0       	brcs	.+12     	; 0x50dc <__addsf3+0x18>
    50d0:	46 df       	rcall	.-372    	; 0x4f5e <__fp_pscB>
    50d2:	20 f0       	brcs	.+8      	; 0x50dc <__addsf3+0x18>
    50d4:	31 f4       	brne	.+12     	; 0x50e2 <__addsf3+0x1e>
    50d6:	9f 3f       	cpi	r25, 0xFF	; 255
    50d8:	11 f4       	brne	.+4      	; 0x50de <__addsf3+0x1a>
    50da:	1e f4       	brtc	.+6      	; 0x50e2 <__addsf3+0x1e>
    50dc:	11 cf       	rjmp	.-478    	; 0x4f00 <__fp_nan>
    50de:	0e f4       	brtc	.+2      	; 0x50e2 <__addsf3+0x1e>
    50e0:	e0 95       	com	r30
    50e2:	e7 fb       	bst	r30, 7
    50e4:	07 cf       	rjmp	.-498    	; 0x4ef4 <__fp_inf>

000050e6 <__addsf3x>:
    50e6:	e9 2f       	mov	r30, r25
    50e8:	52 df       	rcall	.-348    	; 0x4f8e <__fp_split3>
    50ea:	80 f3       	brcs	.-32     	; 0x50cc <__addsf3+0x8>
    50ec:	ba 17       	cp	r27, r26
    50ee:	62 07       	cpc	r22, r18
    50f0:	73 07       	cpc	r23, r19
    50f2:	84 07       	cpc	r24, r20
    50f4:	95 07       	cpc	r25, r21
    50f6:	18 f0       	brcs	.+6      	; 0x50fe <__addsf3x+0x18>
    50f8:	71 f4       	brne	.+28     	; 0x5116 <__addsf3x+0x30>
    50fa:	9e f5       	brtc	.+102    	; 0x5162 <__addsf3x+0x7c>
    50fc:	6a cf       	rjmp	.-300    	; 0x4fd2 <__fp_zero>
    50fe:	0e f4       	brtc	.+2      	; 0x5102 <__addsf3x+0x1c>
    5100:	e0 95       	com	r30
    5102:	0b 2e       	mov	r0, r27
    5104:	ba 2f       	mov	r27, r26
    5106:	a0 2d       	mov	r26, r0
    5108:	0b 01       	movw	r0, r22
    510a:	b9 01       	movw	r22, r18
    510c:	90 01       	movw	r18, r0
    510e:	0c 01       	movw	r0, r24
    5110:	ca 01       	movw	r24, r20
    5112:	a0 01       	movw	r20, r0
    5114:	11 24       	eor	r1, r1
    5116:	ff 27       	eor	r31, r31
    5118:	59 1b       	sub	r21, r25
    511a:	99 f0       	breq	.+38     	; 0x5142 <__addsf3x+0x5c>
    511c:	59 3f       	cpi	r21, 0xF9	; 249
    511e:	50 f4       	brcc	.+20     	; 0x5134 <__addsf3x+0x4e>
    5120:	50 3e       	cpi	r21, 0xE0	; 224
    5122:	68 f1       	brcs	.+90     	; 0x517e <__addsf3x+0x98>
    5124:	1a 16       	cp	r1, r26
    5126:	f0 40       	sbci	r31, 0x00	; 0
    5128:	a2 2f       	mov	r26, r18
    512a:	23 2f       	mov	r18, r19
    512c:	34 2f       	mov	r19, r20
    512e:	44 27       	eor	r20, r20
    5130:	58 5f       	subi	r21, 0xF8	; 248
    5132:	f3 cf       	rjmp	.-26     	; 0x511a <__addsf3x+0x34>
    5134:	46 95       	lsr	r20
    5136:	37 95       	ror	r19
    5138:	27 95       	ror	r18
    513a:	a7 95       	ror	r26
    513c:	f0 40       	sbci	r31, 0x00	; 0
    513e:	53 95       	inc	r21
    5140:	c9 f7       	brne	.-14     	; 0x5134 <__addsf3x+0x4e>
    5142:	7e f4       	brtc	.+30     	; 0x5162 <__addsf3x+0x7c>
    5144:	1f 16       	cp	r1, r31
    5146:	ba 0b       	sbc	r27, r26
    5148:	62 0b       	sbc	r22, r18
    514a:	73 0b       	sbc	r23, r19
    514c:	84 0b       	sbc	r24, r20
    514e:	ba f0       	brmi	.+46     	; 0x517e <__addsf3x+0x98>
    5150:	91 50       	subi	r25, 0x01	; 1
    5152:	a1 f0       	breq	.+40     	; 0x517c <__addsf3x+0x96>
    5154:	ff 0f       	add	r31, r31
    5156:	bb 1f       	adc	r27, r27
    5158:	66 1f       	adc	r22, r22
    515a:	77 1f       	adc	r23, r23
    515c:	88 1f       	adc	r24, r24
    515e:	c2 f7       	brpl	.-16     	; 0x5150 <__addsf3x+0x6a>
    5160:	0e c0       	rjmp	.+28     	; 0x517e <__addsf3x+0x98>
    5162:	ba 0f       	add	r27, r26
    5164:	62 1f       	adc	r22, r18
    5166:	73 1f       	adc	r23, r19
    5168:	84 1f       	adc	r24, r20
    516a:	48 f4       	brcc	.+18     	; 0x517e <__addsf3x+0x98>
    516c:	87 95       	ror	r24
    516e:	77 95       	ror	r23
    5170:	67 95       	ror	r22
    5172:	b7 95       	ror	r27
    5174:	f7 95       	ror	r31
    5176:	9e 3f       	cpi	r25, 0xFE	; 254
    5178:	08 f0       	brcs	.+2      	; 0x517c <__addsf3x+0x96>
    517a:	b3 cf       	rjmp	.-154    	; 0x50e2 <__addsf3+0x1e>
    517c:	93 95       	inc	r25
    517e:	88 0f       	add	r24, r24
    5180:	08 f0       	brcs	.+2      	; 0x5184 <__addsf3x+0x9e>
    5182:	99 27       	eor	r25, r25
    5184:	ee 0f       	add	r30, r30
    5186:	97 95       	ror	r25
    5188:	87 95       	ror	r24
    518a:	08 95       	ret

0000518c <__divsf3>:
    518c:	58 de       	rcall	.-848    	; 0x4e3e <__divsf3x>
    518e:	ee ce       	rjmp	.-548    	; 0x4f6c <__fp_round>

00005190 <__eerd_block_m2560>:
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22

00005194 <__eerd_blraw_m2560>:
    5194:	fc 01       	movw	r30, r24
    5196:	f9 99       	sbic	0x1f, 1	; 31
    5198:	fe cf       	rjmp	.-4      	; 0x5196 <__eerd_blraw_m2560+0x2>
    519a:	06 c0       	rjmp	.+12     	; 0x51a8 <__eerd_blraw_m2560+0x14>
    519c:	f2 bd       	out	0x22, r31	; 34
    519e:	e1 bd       	out	0x21, r30	; 33
    51a0:	f8 9a       	sbi	0x1f, 0	; 31
    51a2:	31 96       	adiw	r30, 0x01	; 1
    51a4:	00 b4       	in	r0, 0x20	; 32
    51a6:	0d 92       	st	X+, r0
    51a8:	41 50       	subi	r20, 0x01	; 1
    51aa:	50 40       	sbci	r21, 0x00	; 0
    51ac:	b8 f7       	brcc	.-18     	; 0x519c <__eerd_blraw_m2560+0x8>
    51ae:	08 95       	ret

000051b0 <__divmodsi4>:
    51b0:	97 fb       	bst	r25, 7
    51b2:	09 2e       	mov	r0, r25
    51b4:	05 26       	eor	r0, r21
    51b6:	0e d0       	rcall	.+28     	; 0x51d4 <__divmodsi4_neg1>
    51b8:	57 fd       	sbrc	r21, 7
    51ba:	04 d0       	rcall	.+8      	; 0x51c4 <__divmodsi4_neg2>
    51bc:	14 d0       	rcall	.+40     	; 0x51e6 <__udivmodsi4>
    51be:	0a d0       	rcall	.+20     	; 0x51d4 <__divmodsi4_neg1>
    51c0:	00 1c       	adc	r0, r0
    51c2:	38 f4       	brcc	.+14     	; 0x51d2 <__divmodsi4_exit>

000051c4 <__divmodsi4_neg2>:
    51c4:	50 95       	com	r21
    51c6:	40 95       	com	r20
    51c8:	30 95       	com	r19
    51ca:	21 95       	neg	r18
    51cc:	3f 4f       	sbci	r19, 0xFF	; 255
    51ce:	4f 4f       	sbci	r20, 0xFF	; 255
    51d0:	5f 4f       	sbci	r21, 0xFF	; 255

000051d2 <__divmodsi4_exit>:
    51d2:	08 95       	ret

000051d4 <__divmodsi4_neg1>:
    51d4:	f6 f7       	brtc	.-4      	; 0x51d2 <__divmodsi4_exit>
    51d6:	90 95       	com	r25
    51d8:	80 95       	com	r24
    51da:	70 95       	com	r23
    51dc:	61 95       	neg	r22
    51de:	7f 4f       	sbci	r23, 0xFF	; 255
    51e0:	8f 4f       	sbci	r24, 0xFF	; 255
    51e2:	9f 4f       	sbci	r25, 0xFF	; 255
    51e4:	08 95       	ret

000051e6 <__udivmodsi4>:
    51e6:	a1 e2       	ldi	r26, 0x21	; 33
    51e8:	1a 2e       	mov	r1, r26
    51ea:	aa 1b       	sub	r26, r26
    51ec:	bb 1b       	sub	r27, r27
    51ee:	fd 01       	movw	r30, r26
    51f0:	0d c0       	rjmp	.+26     	; 0x520c <__udivmodsi4_ep>

000051f2 <__udivmodsi4_loop>:
    51f2:	aa 1f       	adc	r26, r26
    51f4:	bb 1f       	adc	r27, r27
    51f6:	ee 1f       	adc	r30, r30
    51f8:	ff 1f       	adc	r31, r31
    51fa:	a2 17       	cp	r26, r18
    51fc:	b3 07       	cpc	r27, r19
    51fe:	e4 07       	cpc	r30, r20
    5200:	f5 07       	cpc	r31, r21
    5202:	20 f0       	brcs	.+8      	; 0x520c <__udivmodsi4_ep>
    5204:	a2 1b       	sub	r26, r18
    5206:	b3 0b       	sbc	r27, r19
    5208:	e4 0b       	sbc	r30, r20
    520a:	f5 0b       	sbc	r31, r21

0000520c <__udivmodsi4_ep>:
    520c:	66 1f       	adc	r22, r22
    520e:	77 1f       	adc	r23, r23
    5210:	88 1f       	adc	r24, r24
    5212:	99 1f       	adc	r25, r25
    5214:	1a 94       	dec	r1
    5216:	69 f7       	brne	.-38     	; 0x51f2 <__udivmodsi4_loop>
    5218:	60 95       	com	r22
    521a:	70 95       	com	r23
    521c:	80 95       	com	r24
    521e:	90 95       	com	r25
    5220:	9b 01       	movw	r18, r22
    5222:	ac 01       	movw	r20, r24
    5224:	bd 01       	movw	r22, r26
    5226:	cf 01       	movw	r24, r30
    5228:	08 95       	ret

0000522a <_exit>:
    522a:	ff cf       	rjmp	.-2      	; 0x522a <_exit>
