
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00005566  000055fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024b  00800324  00800324  0000571e  2**0
                  ALLOC
  3 .stab         00002628  00000000  00000000  00005720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000088f  00000000  00000000  00007d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  000085d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114e  00000000  00000000  0000888f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004628  00000000  00000000  000099dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017a2  00000000  00000000  0000e005  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004f94  00000000  00000000  0000f7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  0001473c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010d1  00000000  00000000  00014f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001682  00000000  00000000  00015fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000020c  00000000  00000000  0001766f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  0001787b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__vector_32>
      84:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_42>
      ac:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	9a 0a       	sbc	r9, r26
      e6:	7e 0a       	sbc	r7, r30
      e8:	4c 0a       	sbc	r4, r28
      ea:	0f 0b       	sbc	r16, r31
      ec:	d9 0a       	sbc	r13, r25
      ee:	02 0b       	sbc	r16, r18
      f0:	23 0a       	sbc	r2, r19
      f2:	07 0a       	sbc	r0, r23
      f4:	da 09       	sbc	r29, r10
      f6:	c2 09       	sbc	r28, r2
      f8:	63 09       	sbc	r22, r3
      fa:	63 09       	sbc	r22, r3
      fc:	63 09       	sbc	r22, r3
      fe:	63 09       	sbc	r22, r3
     100:	63 09       	sbc	r22, r3
     102:	63 09       	sbc	r22, r3
     104:	b6 09       	sbc	r27, r6
     106:	ab 09       	sbc	r26, r11
     108:	63 09       	sbc	r22, r3
     10a:	63 09       	sbc	r22, r3
     10c:	63 09       	sbc	r22, r3
     10e:	63 09       	sbc	r22, r3
     110:	63 09       	sbc	r22, r3
     112:	63 09       	sbc	r22, r3
     114:	63 09       	sbc	r22, r3
     116:	63 09       	sbc	r22, r3
     118:	63 09       	sbc	r22, r3
     11a:	63 09       	sbc	r22, r3
     11c:	63 09       	sbc	r22, r3
     11e:	63 09       	sbc	r22, r3
     120:	da 09       	sbc	r29, r10
     122:	4c 0a       	sbc	r4, r28
     124:	9f 09       	sbc	r25, r15
     126:	9a 09       	sbc	r25, r10
     128:	63 09       	sbc	r22, r3
     12a:	63 09       	sbc	r22, r3
     12c:	63 09       	sbc	r22, r3
     12e:	63 09       	sbc	r22, r3
     130:	63 09       	sbc	r22, r3
     132:	63 09       	sbc	r22, r3
     134:	63 09       	sbc	r22, r3
     136:	63 09       	sbc	r22, r3
     138:	63 09       	sbc	r22, r3
     13a:	63 09       	sbc	r22, r3
     13c:	63 09       	sbc	r22, r3
     13e:	63 09       	sbc	r22, r3
     140:	d9 0a       	sbc	r13, r25
     142:	23 0a       	sbc	r2, r19
     144:	63 09       	sbc	r22, r3
     146:	63 09       	sbc	r22, r3
     148:	9a 0a       	sbc	r9, r26
     14a:	02 0b       	sbc	r16, r18
     14c:	c3 0a       	sbc	r12, r19
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e6 e6       	ldi	r30, 0x66	; 102
     194:	f5 e5       	ldi	r31, 0x55	; 85
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	af 36       	cpi	r26, 0x6F	; 111
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 b2 2a 	jmp	0x5564	; 0x5564 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;

	initPeripherals();
     1ce:	0e 94 63 11 	call	0x22c6	; 0x22c6 <initPeripherals>

	calibrateSensors();
     1d2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <calibrateSensors>

	initBehaviors();
     1d6:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <initBehaviors>

	startTime = getTime100MicroSec();
     1da:	0e 94 38 12 	call	0x2470	; 0x2470 <getTime100MicroSec>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1e2:	cc 24       	eor	r12, r12
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
			GREEN_LED3_OFF;
			GREEN_LED4_OFF;
			GREEN_LED5_OFF;
			GREEN_LED6_OFF;
			GREEN_LED7_OFF;
			pwm_red = 255;
     1e8:	dd 24       	eor	r13, r13
     1ea:	da 94       	dec	r13
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     1ec:	0e 94 3e 11 	call	0x227c	; 0x227c <getSelector>
     1f0:	80 93 3a 05 	sts	0x053A, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1f4:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <readAccelXYZ>

		computeAngle();
     1f8:	0e 94 a8 23 	call	0x4750	; 0x4750 <computeAngle>
	
		endTime = getTime100MicroSec();
     1fc:	0e 94 38 12 	call	0x2470	; 0x2470 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     200:	6e 19       	sub	r22, r14
     202:	7f 09       	sbc	r23, r15
     204:	80 0b       	sbc	r24, r16
     206:	91 0b       	sbc	r25, r17
     208:	6e 31       	cpi	r22, 0x1E	; 30
     20a:	2b e4       	ldi	r18, 0x4B	; 75
     20c:	72 07       	cpc	r23, r18
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	82 07       	cpc	r24, r18
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	92 07       	cpc	r25, r18
     216:	08 f0       	brcs	.+2      	; 0x21a <main+0x5c>
     218:	80 c0       	rjmp	.+256    	; 0x31a <main+0x15c>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     21a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <handleIRRemoteCommands>


		handleRFCommands();
     21e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <handleRFCommands>


		usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     222:	80 91 3a 05 	lds	r24, 0x053A
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <usart0Transmit>


		switch(currentSelector) {
     22c:	80 91 3a 05 	lds	r24, 0x053A
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	09 f4       	brne	.+2      	; 0x236 <main+0x78>
     234:	81 c0       	rjmp	.+258    	; 0x338 <main+0x17a>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	08 f0       	brcs	.+2      	; 0x23c <main+0x7e>
     23a:	49 c0       	rjmp	.+146    	; 0x2ce <main+0x110>
     23c:	88 23       	and	r24, r24
     23e:	09 f0       	breq	.+2      	; 0x242 <main+0x84>
     240:	80 c0       	rjmp	.+256    	; 0x342 <main+0x184>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     242:	0e 94 78 15 	call	0x2af0	; 0x2af0 <handleMotorsWithNoController>
     246:	80 91 3a 05 	lds	r24, 0x053A
					setRightSpeed(25);
					break;
  
		}

		if(currentSelector != 0) {
     24a:	88 23       	and	r24, r24
     24c:	09 f0       	breq	.+2      	; 0x250 <main+0x92>
     24e:	60 c0       	rjmp	.+192    	; 0x310 <main+0x152>
     250:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     252:	c8 16       	cp	r12, r24
     254:	59 f2       	breq	.-106    	; 0x1ec <main+0x2e>
			disableObstacleAvoidance();
     256:	0e 94 ed 1b 	call	0x37da	; 0x37da <disableObstacleAvoidance>
			disableCliffAvoidance();
     25a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     25e:	80 91 0b 01 	lds	r24, 0x010B
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     268:	80 91 0b 01 	lds	r24, 0x010B
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     272:	80 91 0b 01 	lds	r24, 0x010B
     276:	84 60       	ori	r24, 0x04	; 4
     278:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     27c:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     27e:	80 91 0b 01 	lds	r24, 0x010B
     282:	80 61       	ori	r24, 0x10	; 16
     284:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     288:	80 91 0b 01 	lds	r24, 0x010B
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     292:	80 91 0b 01 	lds	r24, 0x010B
     296:	80 64       	ori	r24, 0x40	; 64
     298:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     29c:	80 91 0b 01 	lds	r24, 0x010B
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2a6:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2aa:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2ae:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
			updateGreenLed(pwm_green);
     2b8:	80 91 0d 02 	lds	r24, 0x020D
     2bc:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
			updateBlueLed(pwm_blue);
     2c0:	80 91 0e 02 	lds	r24, 0x020E
     2c4:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>
     2c8:	c0 90 3a 05 	lds	r12, 0x053A
     2cc:	8f cf       	rjmp	.-226    	; 0x1ec <main+0x2e>


		usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info


		switch(currentSelector) {
     2ce:	84 30       	cpi	r24, 0x04	; 4
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0x116>
     2d2:	3f c0       	rjmp	.+126    	; 0x352 <main+0x194>
     2d4:	84 30       	cpi	r24, 0x04	; 4
     2d6:	70 f1       	brcs	.+92     	; 0x334 <main+0x176>
     2d8:	85 30       	cpi	r24, 0x05	; 5
     2da:	09 f0       	breq	.+2      	; 0x2de <main+0x120>
     2dc:	b6 cf       	rjmp	.-148    	; 0x24a <main+0x8c>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     2de:	80 91 0c 02 	lds	r24, 0x020C
     2e2:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
					updateGreenLed(pwm_green);
     2e6:	80 91 0d 02 	lds	r24, 0x020D
     2ea:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
					updateBlueLed(pwm_blue);
     2ee:	80 91 0e 02 	lds	r24, 0x020E
     2f2:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>
					enableObstacleAvoidance();
     2f6:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <enableObstacleAvoidance>
					setLeftSpeed(25);
     2fa:	89 e1       	ldi	r24, 0x19	; 25
     2fc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <setLeftSpeed>
					setRightSpeed(25);
     300:	89 e1       	ldi	r24, 0x19	; 25
     302:	0e 94 26 18 	call	0x304c	; 0x304c <setRightSpeed>
     306:	80 91 3a 05 	lds	r24, 0x053A
					break;
  
		}

		if(currentSelector != 0) {
     30a:	88 23       	and	r24, r24
     30c:	09 f4       	brne	.+2      	; 0x310 <main+0x152>
     30e:	a0 cf       	rjmp	.-192    	; 0x250 <main+0x92>
			handleMotorsWithSpeedController();  
     310:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <handleMotorsWithSpeedController>
     314:	80 91 3a 05 	lds	r24, 0x053A
     318:	9c cf       	rjmp	.-200    	; 0x252 <main+0x94>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     31a:	0e 94 41 12 	call	0x2482	; 0x2482 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     31e:	80 91 3a 05 	lds	r24, 0x053A
     322:	84 50       	subi	r24, 0x04	; 4
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	08 f4       	brcc	.+2      	; 0x32a <main+0x16c>
     328:	47 c0       	rjmp	.+142    	; 0x3b8 <main+0x1fa>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			}

			startTime = getTime100MicroSec();
     32a:	0e 94 38 12 	call	0x2470	; 0x2470 <getTime100MicroSec>
     32e:	7b 01       	movw	r14, r22
     330:	8c 01       	movw	r16, r24
     332:	73 cf       	rjmp	.-282    	; 0x21a <main+0x5c>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     334:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <enableObstacleAvoidance>
					enableCliffAvoidance();
     338:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <enableCliffAvoidance>
     33c:	80 91 3a 05 	lds	r24, 0x053A
					break;
     340:	84 cf       	rjmp	.-248    	; 0x24a <main+0x8c>


		usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info


		switch(currentSelector) {
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	09 f0       	breq	.+2      	; 0x348 <main+0x18a>
     346:	81 cf       	rjmp	.-254    	; 0x24a <main+0x8c>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     348:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <enableObstacleAvoidance>
     34c:	80 91 3a 05 	lds	r24, 0x053A
					break;
     350:	7c cf       	rjmp	.-264    	; 0x24a <main+0x8c>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     352:	80 91 0b 01 	lds	r24, 0x010B
     356:	8e 7f       	andi	r24, 0xFE	; 254
     358:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     35c:	80 91 0b 01 	lds	r24, 0x010B
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     366:	80 91 0b 01 	lds	r24, 0x010B
     36a:	8b 7f       	andi	r24, 0xFB	; 251
     36c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     370:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     372:	80 91 0b 01 	lds	r24, 0x010B
     376:	8f 7e       	andi	r24, 0xEF	; 239
     378:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     37c:	80 91 0b 01 	lds	r24, 0x010B
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     386:	80 91 0b 01 	lds	r24, 0x010B
     38a:	8f 7b       	andi	r24, 0xBF	; 191
     38c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     390:	80 91 0b 01 	lds	r24, 0x010B
     394:	8f 77       	andi	r24, 0x7F	; 127
     396:	80 93 0b 01 	sts	0x010B, r24
					updateRedLed(pwm_red);
     39a:	80 91 0c 02 	lds	r24, 0x020C
     39e:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
					updateGreenLed(pwm_green);
     3a2:	80 91 0d 02 	lds	r24, 0x020D
     3a6:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
					updateBlueLed(pwm_blue);
     3aa:	80 91 0e 02 	lds	r24, 0x020E
     3ae:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>
     3b2:	80 91 3a 05 	lds	r24, 0x053A
					break;
     3b6:	49 cf       	rjmp	.-366    	; 0x24a <main+0x8c>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     3b8:	0e 94 29 28 	call	0x5052	; 0x5052 <rand>
     3bc:	be 01       	movw	r22, r28
     3be:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__divmodhi4>
     3c2:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     3c6:	0e 94 29 28 	call	0x5052	; 0x5052 <rand>
     3ca:	be 01       	movw	r22, r28
     3cc:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__divmodhi4>
     3d0:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     3d4:	0e 94 29 28 	call	0x5052	; 0x5052 <rand>
     3d8:	be 01       	movw	r22, r28
     3da:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__divmodhi4>
     3de:	80 93 0e 02 	sts	0x020E, r24
     3e2:	a3 cf       	rjmp	.-186    	; 0x32a <main+0x16c>

000003e4 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     3e8:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     3ea:	0d b4       	in	r0, 0x2d	; 45
     3ec:	07 fc       	sbrc	r0, 7
     3ee:	0a c0       	rjmp	.+20     	; 0x404 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     3f0:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     3f2:	37 e2       	ldi	r19, 0x27	; 39
     3f4:	80 31       	cpi	r24, 0x10	; 16
     3f6:	93 07       	cpc	r25, r19
     3f8:	c0 f3       	brcs	.-16     	; 0x3ea <SPI_WAIT+0x6>
			spiCommError = 1;
     3fa:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     3fe:	0d b4       	in	r0, 0x2d	; 45
     400:	07 fe       	sbrs	r0, 7
     402:	f6 cf       	rjmp	.-20     	; 0x3f0 <SPI_WAIT+0xc>
			return;
		}
	}
}
     404:	08 95       	ret

00000406 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     406:	84 b1       	in	r24, 0x04	; 4
     408:	80 7f       	andi	r24, 0xF0	; 240
     40a:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     40c:	84 b1       	in	r24, 0x04	; 4
     40e:	87 60       	ori	r24, 0x07	; 7
     410:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     412:	80 e5       	ldi	r24, 0x50	; 80
     414:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     416:	8d b5       	in	r24, 0x2d	; 45
     418:	81 60       	ori	r24, 0x01	; 1
     41a:	8d bd       	out	0x2d, r24	; 45

}
     41c:	08 95       	ret

0000041e <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     41e:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     420:	1d bc       	out	0x2d, r1	; 45
}
     422:	08 95       	ret

00000424 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     424:	44 23       	and	r20, r20
     426:	09 f1       	breq	.+66     	; 0x46a <SPI_ReadWrite_Block+0x46>
     428:	a6 2f       	mov	r26, r22
     42a:	b7 2f       	mov	r27, r23
     42c:	e8 2f       	mov	r30, r24
     42e:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     430:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     432:	21 91       	ld	r18, Z+
     434:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     43a:	0d b4       	in	r0, 0x2d	; 45
     43c:	07 fc       	sbrc	r0, 7
     43e:	0b c0       	rjmp	.+22     	; 0x456 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     444:	57 e2       	ldi	r21, 0x27	; 39
     446:	20 31       	cpi	r18, 0x10	; 16
     448:	35 07       	cpc	r19, r21
     44a:	b8 f3       	brcs	.-18     	; 0x43a <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
     44c:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     450:	0d b4       	in	r0, 0x2d	; 45
     452:	07 fe       	sbrs	r0, 7
     454:	f5 cf       	rjmp	.-22     	; 0x440 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     456:	20 91 0e 04 	lds	r18, 0x040E
     45a:	22 23       	and	r18, r18
     45c:	31 f4       	brne	.+12     	; 0x46a <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
     45e:	2e b5       	in	r18, 0x2e	; 46
     460:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     462:	2e 2f       	mov	r18, r30
     464:	28 1b       	sub	r18, r24
     466:	24 17       	cp	r18, r20
     468:	20 f3       	brcs	.-56     	; 0x432 <SPI_ReadWrite_Block+0xe>
     46a:	08 95       	ret

0000046c <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     46c:	66 23       	and	r22, r22
     46e:	e9 f0       	breq	.+58     	; 0x4aa <SPI_Write_Block+0x3e>
     470:	e8 2f       	mov	r30, r24
     472:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     474:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     476:	21 91       	ld	r18, Z+
     478:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fc       	sbrc	r0, 7
     482:	0b c0       	rjmp	.+22     	; 0x49a <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     484:	2f 5f       	subi	r18, 0xFF	; 255
     486:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     488:	47 e2       	ldi	r20, 0x27	; 39
     48a:	20 31       	cpi	r18, 0x10	; 16
     48c:	34 07       	cpc	r19, r20
     48e:	b8 f3       	brcs	.-18     	; 0x47e <SPI_Write_Block+0x12>
			spiCommError = 1;
     490:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     494:	0d b4       	in	r0, 0x2d	; 45
     496:	07 fe       	sbrs	r0, 7
     498:	f5 cf       	rjmp	.-22     	; 0x484 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     49a:	20 91 0e 04 	lds	r18, 0x040E
     49e:	22 23       	and	r18, r18
     4a0:	21 f4       	brne	.+8      	; 0x4aa <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     4a2:	2e 2f       	mov	r18, r30
     4a4:	28 1b       	sub	r18, r24
     4a6:	26 17       	cp	r18, r22
     4a8:	30 f3       	brcs	.-52     	; 0x476 <SPI_Write_Block+0xa>
     4aa:	08 95       	ret

000004ac <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     4ac:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     4b2:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     4b4:	0d b4       	in	r0, 0x2d	; 45
     4b6:	07 fc       	sbrc	r0, 7
     4b8:	0a c0       	rjmp	.+20     	; 0x4ce <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     4ba:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     4bc:	37 e2       	ldi	r19, 0x27	; 39
     4be:	80 31       	cpi	r24, 0x10	; 16
     4c0:	93 07       	cpc	r25, r19
     4c2:	c0 f3       	brcs	.-16     	; 0x4b4 <SPI_Write_Byte+0x8>
			spiCommError = 1;
     4c4:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     4c8:	0d b4       	in	r0, 0x2d	; 45
     4ca:	07 fe       	sbrs	r0, 7
     4cc:	f6 cf       	rjmp	.-20     	; 0x4ba <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     4ce:	8e b5       	in	r24, 0x2e	; 46
}
     4d0:	08 95       	ret

000004d2 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	00 d0       	rcall	.+0      	; 0x4dc <mirf_config+0xa>
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4e8:	8d e0       	ldi	r24, 0x0D	; 13
     4ea:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     4ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4f2:	83 e2       	ldi	r24, 0x23	; 35
     4f4:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     4fe:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     500:	80 91 0b 04 	lds	r24, 0x040B
     504:	90 91 0c 04 	lds	r25, 0x040C
     508:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     50a:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     50c:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     50e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     510:	80 e3       	ldi	r24, 0x30	; 48
     512:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     516:	8e 01       	movw	r16, r28
     518:	0f 5f       	subi	r16, 0xFF	; 255
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	c8 01       	movw	r24, r16
     51e:	63 e0       	ldi	r22, 0x03	; 3
     520:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_Write_Block>
    mirf_CSN_hi;
     524:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     526:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     528:	8a e2       	ldi	r24, 0x2A	; 42
     52a:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     52e:	c8 01       	movw	r24, r16
     530:	63 e0       	ldi	r22, 0x03	; 3
     532:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_Write_Block>
    mirf_CSN_hi;
     536:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     538:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     53a:	81 e2       	ldi	r24, 0x21	; 33
     53c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     546:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     548:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     54a:	82 e2       	ldi	r24, 0x22	; 34
     54c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     556:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     558:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     55a:	84 e2       	ldi	r24, 0x24	; 36
     55c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     560:	82 e1       	ldi	r24, 0x12	; 18
     562:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     566:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     568:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     56a:	85 e2       	ldi	r24, 0x25	; 37
     56c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     570:	88 e2       	ldi	r24, 0x28	; 40
     572:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     576:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     578:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     57a:	81 e3       	ldi	r24, 0x31	; 49
     57c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     580:	8d e0       	ldi	r24, 0x0D	; 13
     582:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     586:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     588:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     58a:	80 e5       	ldi	r24, 0x50	; 80
     58c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     590:	83 e7       	ldi	r24, 0x73	; 115
     592:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     596:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     598:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     59a:	8c e3       	ldi	r24, 0x3C	; 60
     59c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     5a6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5aa:	8d e3       	ldi	r24, 0x3D	; 61
     5ac:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5b0:	86 e0       	ldi	r24, 0x06	; 6
     5b2:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     5b6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5ba:	80 e2       	ldi	r24, 0x20	; 32
     5bc:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5c0:	8f e0       	ldi	r24, 0x0F	; 15
     5c2:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     5c6:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     5d8:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     5da:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     5dc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <mirf_config>
}
     5e0:	08 95       	ret

000005e2 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     5e8:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     5ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5ec:	8a e2       	ldi	r24, 0x2A	; 42
     5ee:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     5f2:	ce 01       	movw	r24, r28
     5f4:	65 e0       	ldi	r22, 0x05	; 5
     5f6:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_Write_Block>
    mirf_CSN_hi;
     5fa:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     5fc:	2c 9a       	sbi	0x05, 4	; 5
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     60a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     60c:	80 e3       	ldi	r24, 0x30	; 48
     60e:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     612:	ce 01       	movw	r24, r28
     614:	65 e0       	ldi	r22, 0x05	; 5
     616:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_Write_Block>
    mirf_CSN_hi;
     61a:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     622:	80 91 41 05 	lds	r24, 0x0541
     626:	88 23       	and	r24, r24
     628:	11 f0       	breq	.+4      	; 0x62e <mirf_data_ready+0xc>
     62a:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
     62c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     62e:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     636:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     638:	80 74       	andi	r24, 0x40	; 64
     63a:	08 95       	ret

0000063c <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	0f 92       	push	r0
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     646:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     648:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     64a:	87 e1       	ldi	r24, 0x17	; 23
     64c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     650:	be 01       	movw	r22, r28
     652:	6f 5f       	subi	r22, 0xFF	; 255
     654:	7f 4f       	sbci	r23, 0xFF	; 255
     656:	cb 01       	movw	r24, r22
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	0e 94 12 02 	call	0x424	; 0x424 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     65e:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     660:	89 81       	ldd	r24, Y+1	; 0x01
}
     662:	81 70       	andi	r24, 0x01	; 1
     664:	0f 90       	pop	r0
     666:	cf 91       	pop	r28
     668:	df 91       	pop	r29
     66a:	08 95       	ret

0000066c <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     66c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     66e:	82 ee       	ldi	r24, 0xE2	; 226
     670:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     674:	28 9a       	sbi	0x05, 0	; 5

}
     676:	08 95       	ret

00000678 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     67e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     680:	81 e6       	ldi	r24, 0x61	; 97
     682:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     686:	ce 01       	movw	r24, r28
     688:	be 01       	movw	r22, r28
     68a:	4d e0       	ldi	r20, 0x0D	; 13
     68c:	0e 94 12 02 	call	0x424	; 0x424 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     690:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     692:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     694:	87 e2       	ldi	r24, 0x27	; 39
     696:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     69a:	80 e4       	ldi	r24, 0x40	; 64
     69c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     6a0:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	0f 92       	push	r0
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     6b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6b4:	8f 71       	andi	r24, 0x1F	; 31
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	69 83       	std	Y+1, r22	; 0x01
     6ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6be:	69 81       	ldd	r22, Y+1	; 0x01
     6c0:	86 2f       	mov	r24, r22
     6c2:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     6c6:	28 9a       	sbi	0x05, 0	; 5
}
     6c8:	0f 90       	pop	r0
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	08 95       	ret

000006d0 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	0f 92       	push	r0
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     6e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     6e2:	8f 71       	andi	r24, 0x1F	; 31
     6e4:	49 83       	std	Y+1, r20	; 0x01
     6e6:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     6ea:	c8 01       	movw	r24, r16
     6ec:	b8 01       	movw	r22, r16
     6ee:	49 81       	ldd	r20, Y+1	; 0x01
     6f0:	0e 94 12 02 	call	0x424	; 0x424 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     6f4:	28 9a       	sbi	0x05, 0	; 5
}
     6f6:	0f 90       	pop	r0
     6f8:	cf 91       	pop	r28
     6fa:	df 91       	pop	r29
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	0f 92       	push	r0
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     712:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     714:	8f 71       	andi	r24, 0x1F	; 31
     716:	80 62       	ori	r24, 0x20	; 32
     718:	49 83       	std	Y+1, r20	; 0x01
     71a:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     71e:	c8 01       	movw	r24, r16
     720:	49 81       	ldd	r20, Y+1	; 0x01
     722:	64 2f       	mov	r22, r20
     724:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_Write_Block>
    mirf_CSN_hi;
     728:	28 9a       	sbi	0x05, 0	; 5
}
     72a:	0f 90       	pop	r0
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	0f 92       	push	r0
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     746:	80 91 41 05 	lds	r24, 0x0541
     74a:	88 23       	and	r24, r24
     74c:	e1 f7       	brne	.-8      	; 0x746 <mirf_send+0x10>

    mirf_CE_lo;
     74e:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 41 05 	sts	0x0541, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     756:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     760:	8a e4       	ldi	r24, 0x4A	; 74
     762:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     766:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     768:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     76a:	81 ee       	ldi	r24, 0xE1	; 225
     76c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     770:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     772:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     774:	80 ea       	ldi	r24, 0xA0	; 160
     776:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     77a:	c8 01       	movw	r24, r16
     77c:	69 81       	ldd	r22, Y+1	; 0x01
     77e:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     782:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     784:	2c 9a       	sbi	0x05, 4	; 5
}
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	df 93       	push	r29
     79c:	cf 93       	push	r28
     79e:	0f 92       	push	r0
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	18 2f       	mov	r17, r24
     7a6:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     7a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     7aa:	81 ee       	ldi	r24, 0xE1	; 225
     7ac:	99 83       	std	Y+1, r25	; 0x01
     7ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     7b2:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     7b4:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     7b6:	88 ea       	ldi	r24, 0xA8	; 168
     7b8:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     7bc:	99 81       	ldd	r25, Y+1	; 0x01
     7be:	00 23       	and	r16, r16
     7c0:	61 f0       	breq	.+24     	; 0x7da <writeAckPayload+0x48>
     7c2:	61 2f       	mov	r22, r17
     7c4:	79 2f       	mov	r23, r25
     7c6:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     7c8:	f7 01       	movw	r30, r14
     7ca:	81 91       	ld	r24, Z+
     7cc:	7f 01       	movw	r14, r30
     7ce:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     7d2:	8e 2d       	mov	r24, r14
     7d4:	81 1b       	sub	r24, r17
     7d6:	80 17       	cp	r24, r16
     7d8:	b8 f3       	brcs	.-18     	; 0x7c8 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     7da:	28 9a       	sbi	0x05, 0	; 5


}
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	08 95       	ret

000007ec <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     7ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     7ee:	81 ee       	ldi	r24, 0xE1	; 225
     7f0:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     7f4:	28 9a       	sbi	0x05, 0	; 5

}
     7f6:	08 95       	ret

000007f8 <handleRFCommands>:

void handleRFCommands() {
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     7fe:	80 91 41 05 	lds	r24, 0x0541
     802:	88 23       	and	r24, r24
     804:	21 f0       	breq	.+8      	; 0x80e <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     80e:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     816:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     818:	86 ff       	sbrs	r24, 6
     81a:	f5 cf       	rjmp	.-22     	; 0x806 <handleRFCommands+0xe>

		rfFlags |= 0x02;
     81c:	80 91 0d 04 	lds	r24, 0x040D
     820:	82 60       	ori	r24, 0x02	; 2
     822:	80 93 0d 04 	sts	0x040D, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     826:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     828:	87 e2       	ldi	r24, 0x27	; 39
     82a:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     82e:	80 e7       	ldi	r24, 0x70	; 112
     830:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     834:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     836:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     838:	81 e6       	ldi	r24, 0x61	; 97
     83a:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     83e:	8f e5       	ldi	r24, 0x5F	; 95
     840:	95 e0       	ldi	r25, 0x05	; 5
     842:	bc 01       	movw	r22, r24
     844:	4d e0       	ldi	r20, 0x0D	; 13
     846:	0e 94 12 02 	call	0x424	; 0x424 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     84a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     84c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     84e:	87 e2       	ldi	r24, 0x27	; 39
     850:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    SPI_Write_Byte(value);
     854:	80 e4       	ldi	r24, 0x40	; 64
     856:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     85a:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     85c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     85e:	82 ee       	ldi	r24, 0xE2	; 226
     860:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     864:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     866:	60 91 5f 05 	lds	r22, 0x055F
     86a:	66 23       	and	r22, r22
     86c:	09 f4       	brne	.+2      	; 0x870 <handleRFCommands+0x78>
     86e:	95 c1       	rjmp	.+810    	; 0xb9a <handleRFCommands+0x3a2>
     870:	50 91 63 05 	lds	r21, 0x0563
     874:	40 91 64 05 	lds	r20, 0x0564
     878:	e0 91 60 05 	lds	r30, 0x0560
     87c:	70 91 61 05 	lds	r23, 0x0561

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     880:	25 2f       	mov	r18, r21
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	2f 77       	andi	r18, 0x7F	; 127
     886:	30 70       	andi	r19, 0x00	; 0
     888:	30 93 0a 04 	sts	0x040A, r19
     88c:	20 93 09 04 	sts	0x0409, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     890:	84 2f       	mov	r24, r20
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	8f 77       	andi	r24, 0x7F	; 127
     896:	90 70       	andi	r25, 0x00	; 0
     898:	90 93 08 04 	sts	0x0408, r25
     89c:	80 93 07 04 	sts	0x0407, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     8a0:	57 fd       	sbrc	r21, 7
     8a2:	7f c2       	rjmp	.+1278   	; 0xda2 <handleRFCommands+0x5aa>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	30 95       	com	r19
     8ae:	21 95       	neg	r18
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	30 93 f8 03 	sts	0x03F8, r19
     8b6:	20 93 f7 03 	sts	0x03F7, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     8ba:	47 fd       	sbrc	r20, 7
     8bc:	7c c2       	rjmp	.+1272   	; 0xdb6 <handleRFCommands+0x5be>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	90 95       	com	r25
     8c8:	81 95       	neg	r24
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	90 93 fa 03 	sts	0x03FA, r25
     8d0:	80 93 f9 03 	sts	0x03F9, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     8d4:	42 e0       	ldi	r20, 0x02	; 2
     8d6:	21 30       	cpi	r18, 0x01	; 1
     8d8:	34 07       	cpc	r19, r20
     8da:	44 f0       	brlt	.+16     	; 0x8ec <handleRFCommands+0xf4>
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	52 e0       	ldi	r21, 0x02	; 2
     8e0:	50 93 f8 03 	sts	0x03F8, r21
     8e4:	40 93 f7 03 	sts	0x03F7, r20
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     8ec:	42 e0       	ldi	r20, 0x02	; 2
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	94 07       	cpc	r25, r20
     8f2:	34 f0       	brlt	.+12     	; 0x900 <handleRFCommands+0x108>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	90 93 fa 03 	sts	0x03FA, r25
     8fc:	80 93 f9 03 	sts	0x03F9, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     900:	4e ef       	ldi	r20, 0xFE	; 254
     902:	20 30       	cpi	r18, 0x00	; 0
     904:	34 07       	cpc	r19, r20
     906:	34 f4       	brge	.+12     	; 0x914 <handleRFCommands+0x11c>
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	5e ef       	ldi	r21, 0xFE	; 254
     90c:	50 93 f8 03 	sts	0x03F8, r21
     910:	40 93 f7 03 	sts	0x03F7, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     914:	2e ef       	ldi	r18, 0xFE	; 254
     916:	80 30       	cpi	r24, 0x00	; 0
     918:	92 07       	cpc	r25, r18
     91a:	34 f4       	brge	.+12     	; 0x928 <handleRFCommands+0x130>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	9e ef       	ldi	r25, 0xFE	; 254
     920:	90 93 fa 03 	sts	0x03FA, r25
     924:	80 93 f9 03 	sts	0x03F9, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     928:	26 2f       	mov	r18, r22
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	30 93 58 05 	sts	0x0558, r19
     930:	20 93 57 05 	sts	0x0557, r18
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	f0 93 5a 05 	sts	0x055A, r31
     93a:	e0 93 59 05 	sts	0x0559, r30
     93e:	c7 2f       	mov	r28, r23
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	d0 93 5c 05 	sts	0x055C, r29
     946:	c0 93 5b 05 	sts	0x055B, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     94a:	92 2f       	mov	r25, r18
     94c:	88 27       	eor	r24, r24
     94e:	82 1b       	sub	r24, r18
     950:	93 0b       	sbc	r25, r19
     952:	24 e6       	ldi	r18, 0x64	; 100
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	b9 01       	movw	r22, r18
     958:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__udivmodhi4>
     95c:	16 2f       	mov	r17, r22
     95e:	10 95       	com	r17
     960:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     964:	5e 2f       	mov	r21, r30
     966:	44 27       	eor	r20, r20
     968:	4e 1b       	sub	r20, r30
     96a:	5f 0b       	sbc	r21, r31
     96c:	ca 01       	movw	r24, r20
     96e:	b9 01       	movw	r22, r18
     970:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__udivmodhi4>
     974:	60 95       	com	r22
     976:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     97a:	5c 2f       	mov	r21, r28
     97c:	44 27       	eor	r20, r20
     97e:	4c 1b       	sub	r20, r28
     980:	5d 0b       	sbc	r21, r29
     982:	ca 01       	movw	r24, r20
     984:	b9 01       	movw	r22, r18
     986:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__udivmodhi4>
     98a:	60 95       	com	r22
     98c:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     990:	81 2f       	mov	r24, r17
     992:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
		updateGreenLed(pwm_green);
     996:	80 91 0d 02 	lds	r24, 0x020D
     99a:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
		updateBlueLed(pwm_blue);
     99e:	80 91 0e 02 	lds	r24, 0x020E
     9a2:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     9a6:	80 91 62 05 	lds	r24, 0x0562
     9aa:	80 ff       	sbrs	r24, 0
     9ac:	02 c1       	rjmp	.+516    	; 0xbb2 <handleRFCommands+0x3ba>
			LED_IR1_LOW;
     9ae:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     9b0:	81 ff       	sbrs	r24, 1
     9b2:	02 c1       	rjmp	.+516    	; 0xbb8 <handleRFCommands+0x3c0>
			LED_IR2_LOW;
     9b4:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     9b6:	98 2f       	mov	r25, r24
     9b8:	82 ff       	sbrs	r24, 2
     9ba:	02 c1       	rjmp	.+516    	; 0xbc0 <handleRFCommands+0x3c8>
			irEnabled = 1;
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     9c2:	84 fd       	sbrc	r24, 4
     9c4:	01 c1       	rjmp	.+514    	; 0xbc8 <handleRFCommands+0x3d0>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     9c6:	86 ff       	sbrs	r24, 6
     9c8:	06 c1       	rjmp	.+524    	; 0xbd6 <handleRFCommands+0x3de>
			obstacleAvoidanceEnabled = 1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 3e 05 	sts	0x053E, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     9d0:	97 fd       	sbrc	r25, 7
     9d2:	05 c1       	rjmp	.+522    	; 0xbde <handleRFCommands+0x3e6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     9d4:	10 92 3f 05 	sts	0x053F, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     9d8:	80 91 65 05 	lds	r24, 0x0565
     9dc:	80 ff       	sbrs	r24, 0
     9de:	06 c1       	rjmp	.+524    	; 0xbec <handleRFCommands+0x3f4>
				GREEN_LED0_ON;
     9e0:	80 91 0b 01 	lds	r24, 0x010B
     9e4:	8e 7f       	andi	r24, 0xFE	; 254
     9e6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     9ea:	80 91 65 05 	lds	r24, 0x0565
     9ee:	81 ff       	sbrs	r24, 1
     9f0:	06 c1       	rjmp	.+524    	; 0xbfe <handleRFCommands+0x406>
				GREEN_LED1_ON;
     9f2:	80 91 0b 01 	lds	r24, 0x010B
     9f6:	8d 7f       	andi	r24, 0xFD	; 253
     9f8:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     9fc:	80 91 65 05 	lds	r24, 0x0565
     a00:	82 ff       	sbrs	r24, 2
     a02:	06 c1       	rjmp	.+524    	; 0xc10 <handleRFCommands+0x418>
				GREEN_LED2_ON;
     a04:	80 91 0b 01 	lds	r24, 0x010B
     a08:	8b 7f       	andi	r24, 0xFB	; 251
     a0a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     a0e:	80 91 65 05 	lds	r24, 0x0565
     a12:	83 ff       	sbrs	r24, 3
     a14:	06 c1       	rjmp	.+524    	; 0xc22 <handleRFCommands+0x42a>
				GREEN_LED3_ON;
     a16:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     a18:	80 91 65 05 	lds	r24, 0x0565
     a1c:	84 ff       	sbrs	r24, 4
     a1e:	06 c1       	rjmp	.+524    	; 0xc2c <handleRFCommands+0x434>
				GREEN_LED4_ON;
     a20:	80 91 0b 01 	lds	r24, 0x010B
     a24:	8f 7e       	andi	r24, 0xEF	; 239
     a26:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     a2a:	80 91 65 05 	lds	r24, 0x0565
     a2e:	85 ff       	sbrs	r24, 5
     a30:	06 c1       	rjmp	.+524    	; 0xc3e <handleRFCommands+0x446>
				GREEN_LED5_ON;
     a32:	80 91 0b 01 	lds	r24, 0x010B
     a36:	8f 7d       	andi	r24, 0xDF	; 223
     a38:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     a3c:	80 91 65 05 	lds	r24, 0x0565
     a40:	86 ff       	sbrs	r24, 6
     a42:	06 c1       	rjmp	.+524    	; 0xc50 <handleRFCommands+0x458>
				GREEN_LED6_ON;
     a44:	80 91 0b 01 	lds	r24, 0x010B
     a48:	8f 7b       	andi	r24, 0xBF	; 191
     a4a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     a4e:	80 91 65 05 	lds	r24, 0x0565
     a52:	87 fd       	sbrc	r24, 7
     a54:	06 c1       	rjmp	.+524    	; 0xc62 <handleRFCommands+0x46a>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
     a56:	80 91 0b 01 	lds	r24, 0x010B
     a5a:	80 68       	ori	r24, 0x80	; 128
     a5c:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     a60:	80 91 0b 02 	lds	r24, 0x020B
     a64:	80 93 47 05 	sts	0x0547, r24

		switch(packetId) {
     a68:	85 30       	cpi	r24, 0x05	; 5
     a6a:	09 f4       	brne	.+2      	; 0xa6e <handleRFCommands+0x276>
     a6c:	06 c1       	rjmp	.+524    	; 0xc7a <handleRFCommands+0x482>
     a6e:	86 30       	cpi	r24, 0x06	; 6
     a70:	08 f0       	brcs	.+2      	; 0xa74 <handleRFCommands+0x27c>
     a72:	5f c1       	rjmp	.+702    	; 0xd32 <handleRFCommands+0x53a>
     a74:	83 30       	cpi	r24, 0x03	; 3
     a76:	09 f4       	brne	.+2      	; 0xa7a <handleRFCommands+0x282>
     a78:	0e c2       	rjmp	.+1052   	; 0xe96 <handleRFCommands+0x69e>
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	09 f0       	breq	.+2      	; 0xa80 <handleRFCommands+0x288>
     a7e:	3f c0       	rjmp	.+126    	; 0xafe <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     a80:	90 91 67 03 	lds	r25, 0x0367
     a84:	80 91 68 03 	lds	r24, 0x0368
     a88:	90 93 48 05 	sts	0x0548, r25
				ackPayload[2] = proximityResult[4]>>8;
     a8c:	80 93 49 05 	sts	0x0549, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     a90:	90 91 6f 03 	lds	r25, 0x036F
     a94:	80 91 70 03 	lds	r24, 0x0370
     a98:	90 93 4a 05 	sts	0x054A, r25
				ackPayload[4] = proximityResult[8]>>8;
     a9c:	80 93 4b 05 	sts	0x054B, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     aa0:	90 91 71 03 	lds	r25, 0x0371
     aa4:	80 91 72 03 	lds	r24, 0x0372
     aa8:	90 93 4c 05 	sts	0x054C, r25
				ackPayload[6] = proximityResult[9]>>8;
     aac:	80 93 4d 05 	sts	0x054D, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     ab0:	90 91 73 03 	lds	r25, 0x0373
     ab4:	80 91 74 03 	lds	r24, 0x0374
     ab8:	90 93 4e 05 	sts	0x054E, r25
				ackPayload[8] = proximityResult[10]>>8;
     abc:	80 93 4f 05 	sts	0x054F, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     ac0:	90 91 75 03 	lds	r25, 0x0375
     ac4:	80 91 76 03 	lds	r24, 0x0376
     ac8:	90 93 50 05 	sts	0x0550, r25
				ackPayload[10] = proximityResult[11]>>8;
     acc:	80 93 51 05 	sts	0x0551, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     ad0:	90 91 1b 05 	lds	r25, 0x051B
     ad4:	80 91 1c 05 	lds	r24, 0x051C
     ad8:	90 93 52 05 	sts	0x0552, r25
				ackPayload[12] = accX>>8;
     adc:	80 93 53 05 	sts	0x0553, r24
				ackPayload[13] = accY&0xFF;
     ae0:	90 91 1d 05 	lds	r25, 0x051D
     ae4:	80 91 1e 05 	lds	r24, 0x051E
     ae8:	90 93 54 05 	sts	0x0554, r25
				ackPayload[14] = accY>>8;
     aec:	80 93 55 05 	sts	0x0555, r24
				ackPayload[15] = irCommand;
     af0:	80 91 16 05 	lds	r24, 0x0516
     af4:	80 93 56 05 	sts	0x0556, r24
				packetId = 5;
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     afe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     b00:	81 ee       	ldi	r24, 0xE1	; 225
     b02:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
    mirf_CSN_hi;
     b06:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     b08:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     b0a:	88 ea       	ldi	r24, 0xA8	; 168
     b0c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     b10:	80 91 47 05 	lds	r24, 0x0547
     b14:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b18:	80 91 48 05 	lds	r24, 0x0548
     b1c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b20:	80 91 49 05 	lds	r24, 0x0549
     b24:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b28:	80 91 4a 05 	lds	r24, 0x054A
     b2c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b30:	80 91 4b 05 	lds	r24, 0x054B
     b34:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b38:	80 91 4c 05 	lds	r24, 0x054C
     b3c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b40:	80 91 4d 05 	lds	r24, 0x054D
     b44:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b48:	80 91 4e 05 	lds	r24, 0x054E
     b4c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b50:	80 91 4f 05 	lds	r24, 0x054F
     b54:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b58:	80 91 50 05 	lds	r24, 0x0550
     b5c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b60:	80 91 51 05 	lds	r24, 0x0551
     b64:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b68:	80 91 52 05 	lds	r24, 0x0552
     b6c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b70:	80 91 53 05 	lds	r24, 0x0553
     b74:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b78:	80 91 54 05 	lds	r24, 0x0554
     b7c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b80:	80 91 55 05 	lds	r24, 0x0555
     b84:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
     b88:	80 91 56 05 	lds	r24, 0x0556
     b8c:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     b90:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     b9a:	e0 91 60 05 	lds	r30, 0x0560
     b9e:	ee 23       	and	r30, r30
     ba0:	09 f4       	brne	.+2      	; 0xba4 <handleRFCommands+0x3ac>
     ba2:	12 c1       	rjmp	.+548    	; 0xdc8 <handleRFCommands+0x5d0>
     ba4:	50 91 63 05 	lds	r21, 0x0563
     ba8:	40 91 64 05 	lds	r20, 0x0564
     bac:	70 91 61 05 	lds	r23, 0x0561
     bb0:	67 ce       	rjmp	.-818    	; 0x880 <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     bb2:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     bb4:	81 fd       	sbrc	r24, 1
     bb6:	fe ce       	rjmp	.-516    	; 0x9b4 <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     bb8:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     bba:	98 2f       	mov	r25, r24
     bbc:	82 fd       	sbrc	r24, 2
     bbe:	fe ce       	rjmp	.-516    	; 0x9bc <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     bc0:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     bc4:	84 ff       	sbrs	r24, 4
     bc6:	ff ce       	rjmp	.-514    	; 0x9c6 <handleRFCommands+0x1ce>
			calibrateSensors();
     bc8:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <calibrateSensors>
     bcc:	90 91 62 05 	lds	r25, 0x0562
     bd0:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     bd2:	86 fd       	sbrc	r24, 6
     bd4:	fa ce       	rjmp	.-524    	; 0x9ca <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     bd6:	10 92 3e 05 	sts	0x053E, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     bda:	97 ff       	sbrs	r25, 7
     bdc:	fb ce       	rjmp	.-522    	; 0x9d4 <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 3f 05 	sts	0x053F, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     be4:	80 91 65 05 	lds	r24, 0x0565
     be8:	80 fd       	sbrc	r24, 0
     bea:	fa ce       	rjmp	.-524    	; 0x9e0 <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
     bec:	80 91 0b 01 	lds	r24, 0x010B
     bf0:	81 60       	ori	r24, 0x01	; 1
     bf2:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     bf6:	80 91 65 05 	lds	r24, 0x0565
     bfa:	81 fd       	sbrc	r24, 1
     bfc:	fa ce       	rjmp	.-524    	; 0x9f2 <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
     bfe:	80 91 0b 01 	lds	r24, 0x010B
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     c08:	80 91 65 05 	lds	r24, 0x0565
     c0c:	82 fd       	sbrc	r24, 2
     c0e:	fa ce       	rjmp	.-524    	; 0xa04 <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
     c10:	80 91 0b 01 	lds	r24, 0x010B
     c14:	84 60       	ori	r24, 0x04	; 4
     c16:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
     c1a:	80 91 65 05 	lds	r24, 0x0565
     c1e:	83 fd       	sbrc	r24, 3
     c20:	fa ce       	rjmp	.-524    	; 0xa16 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
     c22:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
     c24:	80 91 65 05 	lds	r24, 0x0565
     c28:	84 fd       	sbrc	r24, 4
     c2a:	fa ce       	rjmp	.-524    	; 0xa20 <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
     c2c:	80 91 0b 01 	lds	r24, 0x010B
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
     c36:	80 91 65 05 	lds	r24, 0x0565
     c3a:	85 fd       	sbrc	r24, 5
     c3c:	fa ce       	rjmp	.-524    	; 0xa32 <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
     c3e:	80 91 0b 01 	lds	r24, 0x010B
     c42:	80 62       	ori	r24, 0x20	; 32
     c44:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
     c48:	80 91 65 05 	lds	r24, 0x0565
     c4c:	86 fd       	sbrc	r24, 6
     c4e:	fa ce       	rjmp	.-524    	; 0xa44 <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
     c50:	80 91 0b 01 	lds	r24, 0x010B
     c54:	80 64       	ori	r24, 0x40	; 64
     c56:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
     c5a:	80 91 65 05 	lds	r24, 0x0565
     c5e:	87 ff       	sbrs	r24, 7
     c60:	fa ce       	rjmp	.-524    	; 0xa56 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
     c62:	80 91 0b 01 	lds	r24, 0x010B
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     c6c:	80 91 0b 02 	lds	r24, 0x020B
     c70:	80 93 47 05 	sts	0x0547, r24

		switch(packetId) {
     c74:	85 30       	cpi	r24, 0x05	; 5
     c76:	09 f0       	breq	.+2      	; 0xc7a <handleRFCommands+0x482>
     c78:	fa ce       	rjmp	.-524    	; 0xa6e <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     c7a:	80 91 2f 03 	lds	r24, 0x032F
     c7e:	90 91 30 03 	lds	r25, 0x0330
     c82:	80 93 48 05 	sts	0x0548, r24
				ackPayload[2] = proximityValue[0]>>8;
     c86:	80 91 2f 03 	lds	r24, 0x032F
     c8a:	90 91 30 03 	lds	r25, 0x0330
     c8e:	90 93 49 05 	sts	0x0549, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     c92:	80 91 33 03 	lds	r24, 0x0333
     c96:	90 91 34 03 	lds	r25, 0x0334
     c9a:	80 93 4a 05 	sts	0x054A, r24
				ackPayload[4] = proximityValue[2]>>8;
     c9e:	80 91 33 03 	lds	r24, 0x0333
     ca2:	90 91 34 03 	lds	r25, 0x0334
     ca6:	90 93 4b 05 	sts	0x054B, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     caa:	80 91 37 03 	lds	r24, 0x0337
     cae:	90 91 38 03 	lds	r25, 0x0338
     cb2:	80 93 4c 05 	sts	0x054C, r24
				ackPayload[6] = proximityValue[4]>>8;
     cb6:	80 91 37 03 	lds	r24, 0x0337
     cba:	90 91 38 03 	lds	r25, 0x0338
     cbe:	90 93 4d 05 	sts	0x054D, r25
				ackPayload[7] = proximityValue[6]&0xFF;
     cc2:	80 91 3b 03 	lds	r24, 0x033B
     cc6:	90 91 3c 03 	lds	r25, 0x033C
     cca:	80 93 4e 05 	sts	0x054E, r24
				ackPayload[8] = proximityValue[6]>>8;
     cce:	80 91 3b 03 	lds	r24, 0x033B
     cd2:	90 91 3c 03 	lds	r25, 0x033C
     cd6:	90 93 4f 05 	sts	0x054F, r25
				ackPayload[9] = proximityValue[10]&0xFF;
     cda:	80 91 43 03 	lds	r24, 0x0343
     cde:	90 91 44 03 	lds	r25, 0x0344
     ce2:	80 93 50 05 	sts	0x0550, r24
				ackPayload[10] = proximityValue[10]>>8;
     ce6:	80 91 43 03 	lds	r24, 0x0343
     cea:	90 91 44 03 	lds	r25, 0x0344
     cee:	90 93 51 05 	sts	0x0551, r25
				ackPayload[11] = proximityValue[12]&0xFF;
     cf2:	80 91 47 03 	lds	r24, 0x0347
     cf6:	90 91 48 03 	lds	r25, 0x0348
     cfa:	80 93 52 05 	sts	0x0552, r24
				ackPayload[12] = proximityValue[12]>>8;
     cfe:	80 91 47 03 	lds	r24, 0x0347
     d02:	90 91 48 03 	lds	r25, 0x0348
     d06:	90 93 53 05 	sts	0x0553, r25
				ackPayload[13] = proximityValue[14]&0xFF;
     d0a:	80 91 4b 03 	lds	r24, 0x034B
     d0e:	90 91 4c 03 	lds	r25, 0x034C
     d12:	80 93 54 05 	sts	0x0554, r24
				ackPayload[14] = proximityValue[14]>>8;
     d16:	80 91 4b 03 	lds	r24, 0x034B
     d1a:	90 91 4c 03 	lds	r25, 0x034C
     d1e:	90 93 55 05 	sts	0x0555, r25
				ackPayload[15] = currentSelector;
     d22:	80 91 3a 05 	lds	r24, 0x053A
     d26:	80 93 56 05 	sts	0x0556, r24
				packetId = 6;
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	80 93 0b 02 	sts	0x020B, r24
				break;
     d30:	e6 ce       	rjmp	.-564    	; 0xafe <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     d32:	86 30       	cpi	r24, 0x06	; 6
     d34:	09 f4       	brne	.+2      	; 0xd38 <handleRFCommands+0x540>
     d36:	5d c0       	rjmp	.+186    	; 0xdf2 <handleRFCommands+0x5fa>
     d38:	87 30       	cpi	r24, 0x07	; 7
     d3a:	09 f0       	breq	.+2      	; 0xd3e <handleRFCommands+0x546>
     d3c:	e0 ce       	rjmp	.-576    	; 0xafe <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = leftMotSteps&0xFF;
     d3e:	30 91 db 03 	lds	r19, 0x03DB
     d42:	20 91 dc 03 	lds	r18, 0x03DC
     d46:	90 91 dd 03 	lds	r25, 0x03DD
     d4a:	80 91 de 03 	lds	r24, 0x03DE
     d4e:	30 93 48 05 	sts	0x0548, r19
				ackPayload[2] = leftMotSteps>>8;
     d52:	20 93 49 05 	sts	0x0549, r18
				ackPayload[3] = leftMotSteps>>16;
     d56:	90 93 4a 05 	sts	0x054A, r25
				ackPayload[4] = leftMotSteps>>24;
     d5a:	80 93 4b 05 	sts	0x054B, r24
				ackPayload[5] = rightMotSteps&0xFF;
     d5e:	30 91 d7 03 	lds	r19, 0x03D7
     d62:	20 91 d8 03 	lds	r18, 0x03D8
     d66:	90 91 d9 03 	lds	r25, 0x03D9
     d6a:	80 91 da 03 	lds	r24, 0x03DA
     d6e:	30 93 4c 05 	sts	0x054C, r19
				ackPayload[6] = rightMotSteps>>8;
     d72:	20 93 4d 05 	sts	0x054D, r18
				ackPayload[7] = rightMotSteps>>16;
     d76:	90 93 4e 05 	sts	0x054E, r25
				ackPayload[8] = rightMotSteps>>24;
     d7a:	80 93 4f 05 	sts	0x054F, r24
				ackPayload[9] = 0;
     d7e:	10 92 50 05 	sts	0x0550, r1
				ackPayload[10] = 0;
     d82:	10 92 51 05 	sts	0x0551, r1
				ackPayload[11] = 0;
     d86:	10 92 52 05 	sts	0x0552, r1
				ackPayload[12] = 0;
     d8a:	10 92 53 05 	sts	0x0553, r1
				ackPayload[13] = 0;
     d8e:	10 92 54 05 	sts	0x0554, r1
				ackPayload[14] = 0;
     d92:	10 92 55 05 	sts	0x0555, r1
				ackPayload[15] = 0;
     d96:	10 92 56 05 	sts	0x0556, r1
				packetId = 3;
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	80 93 0b 02 	sts	0x020B, r24
				break;
     da0:	ae ce       	rjmp	.-676    	; 0xafe <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	30 93 f8 03 	sts	0x03F8, r19
     dae:	20 93 f7 03 	sts	0x03F7, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     db2:	47 ff       	sbrs	r20, 7
     db4:	84 cd       	rjmp	.-1272   	; 0x8be <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	90 93 fa 03 	sts	0x03FA, r25
     dc2:	80 93 f9 03 	sts	0x03F9, r24
     dc6:	86 cd       	rjmp	.-1268   	; 0x8d4 <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     dc8:	70 91 61 05 	lds	r23, 0x0561
     dcc:	77 23       	and	r23, r23
     dce:	61 f4       	brne	.+24     	; 0xde8 <handleRFCommands+0x5f0>
     dd0:	80 91 62 05 	lds	r24, 0x0562
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	41 f4       	brne	.+16     	; 0xde8 <handleRFCommands+0x5f0>
     dd8:	50 91 63 05 	lds	r21, 0x0563
     ddc:	55 23       	and	r21, r21
     dde:	09 f4       	brne	.+2      	; 0xde2 <handleRFCommands+0x5ea>
     de0:	c0 c0       	rjmp	.+384    	; 0xf62 <handleRFCommands+0x76a>
     de2:	40 91 64 05 	lds	r20, 0x0564
     de6:	4c cd       	rjmp	.-1384   	; 0x880 <handleRFCommands+0x88>
     de8:	50 91 63 05 	lds	r21, 0x0563
     dec:	40 91 64 05 	lds	r20, 0x0564
     df0:	47 cd       	rjmp	.-1394   	; 0x880 <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     df2:	80 91 3f 03 	lds	r24, 0x033F
     df6:	90 91 40 03 	lds	r25, 0x0340
     dfa:	80 93 48 05 	sts	0x0548, r24
				ackPayload[2] = proximityValue[8]>>8;
     dfe:	80 91 3f 03 	lds	r24, 0x033F
     e02:	90 91 40 03 	lds	r25, 0x0340
     e06:	90 93 49 05 	sts	0x0549, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     e0a:	80 91 4f 03 	lds	r24, 0x034F
     e0e:	90 91 50 03 	lds	r25, 0x0350
     e12:	80 93 4a 05 	sts	0x054A, r24
				ackPayload[4] = proximityValue[16]>>8;
     e16:	80 91 4f 03 	lds	r24, 0x034F
     e1a:	90 91 50 03 	lds	r25, 0x0350
     e1e:	90 93 4b 05 	sts	0x054B, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     e22:	80 91 53 03 	lds	r24, 0x0353
     e26:	90 91 54 03 	lds	r25, 0x0354
     e2a:	80 93 4c 05 	sts	0x054C, r24
				ackPayload[6] = proximityValue[18]>>8;
     e2e:	80 91 53 03 	lds	r24, 0x0353
     e32:	90 91 54 03 	lds	r25, 0x0354
     e36:	90 93 4d 05 	sts	0x054D, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     e3a:	80 91 57 03 	lds	r24, 0x0357
     e3e:	90 91 58 03 	lds	r25, 0x0358
     e42:	80 93 4e 05 	sts	0x054E, r24
				ackPayload[8] = proximityValue[20]>>8;
     e46:	80 91 57 03 	lds	r24, 0x0357
     e4a:	90 91 58 03 	lds	r25, 0x0358
     e4e:	90 93 4f 05 	sts	0x054F, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     e52:	80 91 5b 03 	lds	r24, 0x035B
     e56:	90 91 5c 03 	lds	r25, 0x035C
     e5a:	80 93 50 05 	sts	0x0550, r24
				ackPayload[10] = proximityValue[22]>>8;
     e5e:	80 91 5b 03 	lds	r24, 0x035B
     e62:	90 91 5c 03 	lds	r25, 0x035C
     e66:	90 93 51 05 	sts	0x0551, r25
				ackPayload[11] = accZ&0xFF;
     e6a:	90 91 1f 05 	lds	r25, 0x051F
     e6e:	80 91 20 05 	lds	r24, 0x0520
     e72:	90 93 52 05 	sts	0x0552, r25
				ackPayload[12] = accZ>>8;
     e76:	80 93 53 05 	sts	0x0553, r24
				ackPayload[13] = batteryLevel&0xFF;
     e7a:	90 91 c3 03 	lds	r25, 0x03C3
     e7e:	80 91 c4 03 	lds	r24, 0x03C4
     e82:	90 93 54 05 	sts	0x0554, r25
				ackPayload[14] = batteryLevel>>8;
     e86:	80 93 55 05 	sts	0x0555, r24
				ackPayload[15] = 0;
     e8a:	10 92 56 05 	sts	0x0556, r1
				packetId = 7;
     e8e:	87 e0       	ldi	r24, 0x07	; 7
     e90:	80 93 0b 02 	sts	0x020B, r24
				break;
     e94:	34 ce       	rjmp	.-920    	; 0xafe <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     e96:	90 91 5f 03 	lds	r25, 0x035F
     e9a:	80 91 60 03 	lds	r24, 0x0360
     e9e:	90 93 48 05 	sts	0x0548, r25
				ackPayload[2] = proximityResult[0]>>8;
     ea2:	80 93 49 05 	sts	0x0549, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     ea6:	90 91 61 03 	lds	r25, 0x0361
     eaa:	80 91 62 03 	lds	r24, 0x0362
     eae:	90 93 4a 05 	sts	0x054A, r25
				ackPayload[4] = proximityResult[1]>>8;
     eb2:	80 93 4b 05 	sts	0x054B, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     eb6:	90 91 63 03 	lds	r25, 0x0363
     eba:	80 91 64 03 	lds	r24, 0x0364
     ebe:	90 93 4c 05 	sts	0x054C, r25
				ackPayload[6] = proximityResult[2]>>8;
     ec2:	80 93 4d 05 	sts	0x054D, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     ec6:	90 91 65 03 	lds	r25, 0x0365
     eca:	80 91 66 03 	lds	r24, 0x0366
     ece:	90 93 4e 05 	sts	0x054E, r25
				ackPayload[8] = proximityResult[3]>>8;
     ed2:	80 93 4f 05 	sts	0x054F, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     ed6:	90 91 69 03 	lds	r25, 0x0369
     eda:	80 91 6a 03 	lds	r24, 0x036A
     ede:	90 93 50 05 	sts	0x0550, r25
				ackPayload[10] = proximityResult[5]>>8;
     ee2:	80 93 51 05 	sts	0x0551, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     ee6:	90 91 6b 03 	lds	r25, 0x036B
     eea:	80 91 6c 03 	lds	r24, 0x036C
     eee:	90 93 52 05 	sts	0x0552, r25
				ackPayload[12] = proximityResult[6]>>8;
     ef2:	80 93 53 05 	sts	0x0553, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     ef6:	90 91 6d 03 	lds	r25, 0x036D
     efa:	80 91 6e 03 	lds	r24, 0x036E
     efe:	90 93 54 05 	sts	0x0554, r25
				ackPayload[14] = proximityResult[7]>>8;
     f02:	80 93 55 05 	sts	0x0555, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     f06:	30 91 03 01 	lds	r19, 0x0103
     f0a:	80 91 03 01 	lds	r24, 0x0103
     f0e:	20 91 03 01 	lds	r18, 0x0103
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	80 72       	andi	r24, 0x20	; 32
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	95 95       	asr	r25
     f1a:	87 95       	ror	r24
     f1c:	95 95       	asr	r25
     f1e:	87 95       	ror	r24
     f20:	95 95       	asr	r25
     f22:	87 95       	ror	r24
     f24:	95 95       	asr	r25
     f26:	87 95       	ror	r24
     f28:	95 95       	asr	r25
     f2a:	87 95       	ror	r24
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	22 1f       	adc	r18, r18
     f32:	22 27       	eor	r18, r18
     f34:	22 1f       	adc	r18, r18
     f36:	22 0f       	add	r18, r18
     f38:	22 0f       	add	r18, r18
     f3a:	28 2b       	or	r18, r24
     f3c:	83 2f       	mov	r24, r19
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	80 71       	andi	r24, 0x10	; 16
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	95 95       	asr	r25
     f46:	87 95       	ror	r24
     f48:	95 95       	asr	r25
     f4a:	87 95       	ror	r24
     f4c:	95 95       	asr	r25
     f4e:	87 95       	ror	r24
     f50:	95 95       	asr	r25
     f52:	87 95       	ror	r24
     f54:	28 2b       	or	r18, r24
     f56:	20 93 56 05 	sts	0x0556, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	80 93 0b 02 	sts	0x020B, r24
				break;
     f60:	ce cd       	rjmp	.-1124   	; 0xafe <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     f62:	40 91 64 05 	lds	r20, 0x0564
     f66:	44 23       	and	r20, r20
     f68:	79 f0       	breq	.+30     	; 0xf88 <handleRFCommands+0x790>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     f6a:	10 92 0a 04 	sts	0x040A, r1
     f6e:	10 92 09 04 	sts	0x0409, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     f72:	84 2f       	mov	r24, r20
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	8f 77       	andi	r24, 0x7F	; 127
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	90 93 08 04 	sts	0x0408, r25
     f7e:	80 93 07 04 	sts	0x0407, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	8e cc       	rjmp	.-1764   	; 0x8a4 <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
     f88:	8c e3       	ldi	r24, 0x3C	; 60
     f8a:	0e 94 cc 11 	call	0x2398	; 0x2398 <sleep>
     f8e:	50 91 63 05 	lds	r21, 0x0563
     f92:	40 91 64 05 	lds	r20, 0x0564
     f96:	60 91 5f 05 	lds	r22, 0x055F
     f9a:	e0 91 60 05 	lds	r30, 0x0560
     f9e:	70 91 61 05 	lds	r23, 0x0561
     fa2:	6e cc       	rjmp	.-1828   	; 0x880 <handleRFCommands+0x88>

00000fa4 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29

	PCICR = 0;
     fa8:	c8 e6       	ldi	r28, 0x68	; 104
     faa:	d0 e0       	ldi	r29, 0x00	; 0
     fac:	18 82       	st	Y, r1
	PCMSK1 = 0;
     fae:	ac e6       	ldi	r26, 0x6C	; 108
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	1c 92       	st	X, r1
	TCCR2A = 0;
     fb4:	e0 eb       	ldi	r30, 0xB0	; 176
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	10 82       	st	Z, r1
	TCCR2B = 0;
     fba:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     fbe:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     fc2:	88 81       	ld	r24, Y
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     fc8:	8c 91       	ld	r24, X
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     fce:	80 81       	ld	r24, Z
     fd0:	82 60       	ori	r24, 0x02	; 2
     fd2:	80 83       	st	Z, r24

}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     fe6:	80 91 11 02 	lds	r24, 0x0211
     fea:	88 23       	and	r24, r24
     fec:	21 f1       	breq	.+72     	; 0x1036 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     fee:	80 91 03 01 	lds	r24, 0x0103
     ff2:	86 fd       	sbrc	r24, 6
     ff4:	20 c0       	rjmp	.+64     	; 0x1036 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     ff6:	80 91 68 00 	lds	r24, 0x0068
     ffa:	8d 7f       	andi	r24, 0xFD	; 253
     ffc:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1000:	80 91 6c 00 	lds	r24, 0x006C
    1004:	8f 77       	andi	r24, 0x7F	; 127
    1006:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1016:	80 91 b1 00 	lds	r24, 0x00B1
    101a:	86 60       	ori	r24, 0x06	; 6
    101c:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1020:	80 91 70 00 	lds	r24, 0x0070
    1024:	82 60       	ori	r24, 0x02	; 2
    1026:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    102a:	10 92 26 03 	sts	0x0326, r1
    102e:	10 92 27 03 	sts	0x0327, r1
    1032:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    1036:	8f 91       	pop	r24
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1058:	80 91 b1 00 	lds	r24, 0x00B1
    105c:	88 7f       	andi	r24, 0xF8	; 248
    105e:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1062:	80 91 12 02 	lds	r24, 0x0212
    1066:	88 23       	and	r24, r24
    1068:	a9 f0       	breq	.+42     	; 0x1094 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    106a:	80 91 03 01 	lds	r24, 0x0103
    106e:	86 ff       	sbrs	r24, 6
    1070:	65 c0       	rjmp	.+202    	; 0x113c <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1072:	80 91 68 00 	lds	r24, 0x0068
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    107c:	80 91 6c 00 	lds	r24, 0x006C
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	9f ef       	ldi	r25, 0xFF	; 255
    108a:	90 93 02 02 	sts	0x0202, r25
    108e:	80 93 01 02 	sts	0x0201, r24
    1092:	49 c0       	rjmp	.+146    	; 0x1126 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1094:	80 91 01 02 	lds	r24, 0x0201
    1098:	90 91 02 02 	lds	r25, 0x0202
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	8f 3f       	cpi	r24, 0xFF	; 255
    10a0:	92 07       	cpc	r25, r18
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__vector_13+0x64>
    10a4:	63 c0       	rjmp	.+198    	; 0x116c <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <__vector_13+0x6c>
    10ac:	98 c0       	rjmp	.+304    	; 0x11de <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    10ae:	9c 01       	movw	r18, r24
    10b0:	22 50       	subi	r18, 0x02	; 2
    10b2:	30 40       	sbci	r19, 0x00	; 0
    10b4:	25 30       	cpi	r18, 0x05	; 5
    10b6:	31 05       	cpc	r19, r1
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <__vector_13+0x7a>
    10ba:	67 c0       	rjmp	.+206    	; 0x118a <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    10bc:	9c 01       	movw	r18, r24
    10be:	27 50       	subi	r18, 0x07	; 7
    10c0:	30 40       	sbci	r19, 0x00	; 0
    10c2:	26 30       	cpi	r18, 0x06	; 6
    10c4:	31 05       	cpc	r19, r1
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__vector_13+0x88>
    10c8:	bd c0       	rjmp	.+378    	; 0x1244 <__vector_13+0x202>

				OCR2A = 54;
    10ca:	26 e3       	ldi	r18, 0x36	; 54
    10cc:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    10d0:	20 91 b1 00 	lds	r18, 0x00B1
    10d4:	26 60       	ori	r18, 0x06	; 6
    10d6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    10da:	20 91 70 00 	lds	r18, 0x0070
    10de:	22 60       	ori	r18, 0x02	; 2
    10e0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    10e4:	20 91 03 01 	lds	r18, 0x0103
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	20 74       	andi	r18, 0x40	; 64
    10ec:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    10ee:	00 24       	eor	r0, r0
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	00 1c       	adc	r0, r0
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	00 1c       	adc	r0, r0
    10fc:	23 2f       	mov	r18, r19
    10fe:	30 2d       	mov	r19, r0
    1100:	4c e0       	ldi	r20, 0x0C	; 12
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	48 1b       	sub	r20, r24
    1106:	59 0b       	sbc	r21, r25
    1108:	02 c0       	rjmp	.+4      	; 0x110e <__vector_13+0xcc>
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	4a 95       	dec	r20
    1110:	e2 f7       	brpl	.-8      	; 0x110a <__vector_13+0xc8>
				data_temp += temp;
    1112:	40 91 26 03 	lds	r20, 0x0326
    1116:	42 0f       	add	r20, r18
    1118:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    111c:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    111e:	90 93 02 02 	sts	0x0202, r25
    1122:	80 93 01 02 	sts	0x0201, r24

		}

}
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    113c:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1140:	83 e3       	ldi	r24, 0x33	; 51
    1142:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1146:	80 91 b1 00 	lds	r24, 0x00B1
    114a:	86 60       	ori	r24, 0x06	; 6
    114c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1150:	80 91 70 00 	lds	r24, 0x0070
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	80 93 70 00 	sts	0x0070, r24
    115a:	80 91 01 02 	lds	r24, 0x0201
    115e:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1162:	2f ef       	ldi	r18, 0xFF	; 255
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	92 07       	cpc	r25, r18
    1168:	c9 f6       	brne	.-78     	; 0x111c <__vector_13+0xda>
    116a:	dd cf       	rjmp	.-70     	; 0x1126 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    116c:	20 91 03 01 	lds	r18, 0x0103
    1170:	26 ff       	sbrs	r18, 6
    1172:	52 c0       	rjmp	.+164    	; 0x1218 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1174:	20 91 68 00 	lds	r18, 0x0068
    1178:	22 60       	ori	r18, 0x02	; 2
    117a:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    117e:	20 91 6c 00 	lds	r18, 0x006C
    1182:	20 68       	ori	r18, 0x80	; 128
    1184:	20 93 6c 00 	sts	0x006C, r18
    1188:	ce cf       	rjmp	.-100    	; 0x1126 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    118a:	26 e3       	ldi	r18, 0x36	; 54
    118c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1190:	20 91 b1 00 	lds	r18, 0x00B1
    1194:	26 60       	ori	r18, 0x06	; 6
    1196:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    119a:	20 91 70 00 	lds	r18, 0x0070
    119e:	22 60       	ori	r18, 0x02	; 2
    11a0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    11a4:	20 91 03 01 	lds	r18, 0x0103
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	20 74       	andi	r18, 0x40	; 64
    11ac:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    11ae:	00 24       	eor	r0, r0
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	00 1c       	adc	r0, r0
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	00 1c       	adc	r0, r0
    11bc:	23 2f       	mov	r18, r19
    11be:	30 2d       	mov	r19, r0
    11c0:	46 e0       	ldi	r20, 0x06	; 6
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	48 1b       	sub	r20, r24
    11c6:	59 0b       	sbc	r21, r25
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <__vector_13+0x18c>
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	4a 95       	dec	r20
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <__vector_13+0x188>
				address_temp += temp;
    11d2:	40 91 27 03 	lds	r20, 0x0327
    11d6:	42 0f       	add	r20, r18
    11d8:	40 93 27 03 	sts	0x0327, r20
    11dc:	9f cf       	rjmp	.-194    	; 0x111c <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    11de:	20 91 03 01 	lds	r18, 0x0103
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	20 74       	andi	r18, 0x40	; 64
    11e6:	30 70       	andi	r19, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	23 2f       	mov	r18, r19
    11ec:	00 0c       	add	r0, r0
    11ee:	22 1f       	adc	r18, r18
    11f0:	33 0b       	sbc	r19, r19
    11f2:	00 0c       	add	r0, r0
    11f4:	22 1f       	adc	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    11fc:	26 e3       	ldi	r18, 0x36	; 54
    11fe:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1202:	20 91 b1 00 	lds	r18, 0x00B1
    1206:	26 60       	ori	r18, 0x06	; 6
    1208:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    120c:	20 91 70 00 	lds	r18, 0x0070
    1210:	22 60       	ori	r18, 0x02	; 2
    1212:	20 93 70 00 	sts	0x0070, r18
    1216:	82 cf       	rjmp	.-252    	; 0x111c <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1218:	8c e1       	ldi	r24, 0x1C	; 28
    121a:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    121e:	80 91 b1 00 	lds	r24, 0x00B1
    1222:	86 60       	ori	r24, 0x06	; 6
    1224:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1228:	80 91 70 00 	lds	r24, 0x0070
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1232:	10 92 26 03 	sts	0x0326, r1
    1236:	10 92 27 03 	sts	0x0327, r1
    123a:	10 92 28 03 	sts	0x0328, r1
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	6d cf       	rjmp	.-294    	; 0x111e <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1244:	8d 30       	cpi	r24, 0x0D	; 13
    1246:	91 05       	cpc	r25, r1
    1248:	09 f0       	breq	.+2      	; 0x124c <__vector_13+0x20a>
    124a:	68 cf       	rjmp	.-304    	; 0x111c <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    124c:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1250:	80 91 68 00 	lds	r24, 0x0068
    1254:	82 60       	ori	r24, 0x02	; 2
    1256:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    125a:	80 91 6c 00 	lds	r24, 0x006C
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	90 93 02 02 	sts	0x0202, r25
    126c:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1270:	80 91 28 03 	lds	r24, 0x0328
    1274:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1278:	80 91 27 03 	lds	r24, 0x0327
    127c:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1280:	80 91 26 03 	lds	r24, 0x0326
    1284:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 17 05 	sts	0x0517, r24
    128e:	4b cf       	rjmp	.-362    	; 0x1126 <__vector_13+0xe4>

00001290 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1290:	80 91 00 02 	lds	r24, 0x0200
    1294:	08 95       	ret

00001296 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1296:	80 91 24 03 	lds	r24, 0x0324
    129a:	08 95       	ret

0000129c <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    129c:	80 91 25 03 	lds	r24, 0x0325
    12a0:	08 95       	ret

000012a2 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    12a2:	80 91 11 02 	lds	r24, 0x0211
    12a6:	88 23       	and	r24, r24
    12a8:	b1 f1       	breq	.+108    	; 0x1316 <handleIRRemoteCommands+0x74>

		if(command_received) {
    12aa:	80 91 17 05 	lds	r24, 0x0517
    12ae:	88 23       	and	r24, r24
    12b0:	91 f1       	breq	.+100    	; 0x1316 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    12b2:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    12b6:	e0 93 16 05 	sts	0x0516, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    12ba:	10 92 17 05 	sts	0x0517, r1

			switch(irCommand) {
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	e5 33       	cpi	r30, 0x35	; 53
    12c2:	f1 05       	cpc	r31, r1
    12c4:	48 f1       	brcs	.+82     	; 0x1318 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    12c6:	20 91 f7 03 	lds	r18, 0x03F7
    12ca:	30 91 f8 03 	lds	r19, 0x03F8
    12ce:	80 91 f9 03 	lds	r24, 0x03F9
    12d2:	90 91 fa 03 	lds	r25, 0x03FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    12d6:	37 fd       	sbrc	r19, 7
    12d8:	27 c0       	rjmp	.+78     	; 0x1328 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    12da:	35 95       	asr	r19
    12dc:	27 95       	ror	r18
    12de:	35 95       	asr	r19
    12e0:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    12e2:	30 93 0a 04 	sts	0x040A, r19
    12e6:	20 93 09 04 	sts	0x0409, r18
			}
			if(pwm_left_desired >= 0) {
    12ea:	97 fd       	sbrc	r25, 7
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    12ee:	95 95       	asr	r25
    12f0:	87 95       	ror	r24
    12f2:	95 95       	asr	r25
    12f4:	87 95       	ror	r24
    12f6:	90 93 08 04 	sts	0x0408, r25
    12fa:	80 93 07 04 	sts	0x0407, r24
    12fe:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1300:	90 95       	com	r25
    1302:	81 95       	neg	r24
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	95 95       	asr	r25
    1308:	87 95       	ror	r24
    130a:	95 95       	asr	r25
    130c:	87 95       	ror	r24
    130e:	90 93 08 04 	sts	0x0408, r25
    1312:	80 93 07 04 	sts	0x0407, r24
    1316:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1318:	ee 58       	subi	r30, 0x8E	; 142
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	05 90       	lpm	r0, Z+
    1322:	f4 91       	lpm	r31, Z+
    1324:	e0 2d       	mov	r30, r0
    1326:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1328:	30 95       	com	r19
    132a:	21 95       	neg	r18
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	d5 cf       	rjmp	.-86     	; 0x12da <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1330:	80 93 3e 05 	sts	0x053E, r24
							cliffAvoidanceEnabled = 0;
    1334:	10 92 3f 05 	sts	0x053F, r1
    1338:	c6 cf       	rjmp	.-116    	; 0x12c6 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    133a:	10 92 3e 05 	sts	0x053E, r1
							cliffAvoidanceEnabled = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 3f 05 	sts	0x053F, r24
    1344:	20 91 f7 03 	lds	r18, 0x03F7
    1348:	30 91 f8 03 	lds	r19, 0x03F8
    134c:	80 91 f9 03 	lds	r24, 0x03F9
    1350:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1354:	c0 cf       	rjmp	.-128    	; 0x12d6 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1356:	10 92 3e 05 	sts	0x053E, r1
    135a:	20 91 f7 03 	lds	r18, 0x03F7
    135e:	30 91 f8 03 	lds	r19, 0x03F8
    1362:	80 91 f9 03 	lds	r24, 0x03F9
    1366:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    136a:	b5 cf       	rjmp	.-150    	; 0x12d6 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 3e 05 	sts	0x053E, r24
    1372:	20 91 f7 03 	lds	r18, 0x03F7
    1376:	30 91 f8 03 	lds	r19, 0x03F8
    137a:	80 91 f9 03 	lds	r24, 0x03F9
    137e:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1382:	a9 cf       	rjmp	.-174    	; 0x12d6 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1384:	80 91 f9 03 	lds	r24, 0x03F9
    1388:	90 91 fa 03 	lds	r25, 0x03FA
    138c:	4e 97       	sbiw	r24, 0x1e	; 30
    138e:	90 93 fa 03 	sts	0x03FA, r25
    1392:	80 93 f9 03 	sts	0x03F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1396:	2e ef       	ldi	r18, 0xFE	; 254
    1398:	80 30       	cpi	r24, 0x00	; 0
    139a:	92 07       	cpc	r25, r18
    139c:	9c f5       	brge	.+102    	; 0x1404 <handleIRRemoteCommands+0x162>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	9e ef       	ldi	r25, 0xFE	; 254
    13a2:	90 93 fa 03 	sts	0x03FA, r25
    13a6:	80 93 f9 03 	sts	0x03F9, r24
    13aa:	20 91 f7 03 	lds	r18, 0x03F7
    13ae:	30 91 f8 03 	lds	r19, 0x03F8
    13b2:	91 cf       	rjmp	.-222    	; 0x12d6 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    13b4:	20 91 f7 03 	lds	r18, 0x03F7
    13b8:	30 91 f8 03 	lds	r19, 0x03F8
    13bc:	80 91 f5 03 	lds	r24, 0x03F5
    13c0:	90 91 f6 03 	lds	r25, 0x03F6
    13c4:	28 17       	cp	r18, r24
    13c6:	39 07       	cpc	r19, r25
    13c8:	24 f0       	brlt	.+8      	; 0x13d2 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    13ca:	20 91 f9 03 	lds	r18, 0x03F9
    13ce:	30 91 fa 03 	lds	r19, 0x03FA
					}
					pwm_right_desired -= STEP_MOTORS;
    13d2:	2e 51       	subi	r18, 0x1E	; 30
    13d4:	30 40       	sbci	r19, 0x00	; 0
    13d6:	30 93 f8 03 	sts	0x03F8, r19
    13da:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    13de:	c9 01       	movw	r24, r18
    13e0:	30 93 fa 03 	sts	0x03FA, r19
    13e4:	20 93 f9 03 	sts	0x03F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    13e8:	4e ef       	ldi	r20, 0xFE	; 254
    13ea:	20 30       	cpi	r18, 0x00	; 0
    13ec:	34 07       	cpc	r19, r20
    13ee:	34 f4       	brge	.+12     	; 0x13fc <handleIRRemoteCommands+0x15a>
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	5e ef       	ldi	r21, 0xFE	; 254
    13f4:	50 93 f8 03 	sts	0x03F8, r21
    13f8:	40 93 f7 03 	sts	0x03F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    13fc:	4e ef       	ldi	r20, 0xFE	; 254
    13fe:	20 30       	cpi	r18, 0x00	; 0
    1400:	34 07       	cpc	r19, r20
    1402:	6c f2       	brlt	.-102    	; 0x139e <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1404:	20 91 f7 03 	lds	r18, 0x03F7
    1408:	30 91 f8 03 	lds	r19, 0x03F8
    140c:	64 cf       	rjmp	.-312    	; 0x12d6 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    140e:	20 91 f7 03 	lds	r18, 0x03F7
    1412:	30 91 f8 03 	lds	r19, 0x03F8
    1416:	2e 51       	subi	r18, 0x1E	; 30
    1418:	30 40       	sbci	r19, 0x00	; 0
    141a:	30 93 f8 03 	sts	0x03F8, r19
    141e:	20 93 f7 03 	sts	0x03F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1422:	4e ef       	ldi	r20, 0xFE	; 254
    1424:	20 30       	cpi	r18, 0x00	; 0
    1426:	34 07       	cpc	r19, r20
    1428:	0c f0       	brlt	.+2      	; 0x142c <handleIRRemoteCommands+0x18a>
    142a:	17 c1       	rjmp	.+558    	; 0x165a <handleIRRemoteCommands+0x3b8>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	9e ef       	ldi	r25, 0xFE	; 254
    1430:	90 93 f8 03 	sts	0x03F8, r25
    1434:	80 93 f7 03 	sts	0x03F7, r24
    1438:	80 91 f9 03 	lds	r24, 0x03F9
    143c:	90 91 fa 03 	lds	r25, 0x03FA
    1440:	20 e8       	ldi	r18, 0x80	; 128
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	4e cf       	rjmp	.-356    	; 0x12e2 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1446:	20 91 f7 03 	lds	r18, 0x03F7
    144a:	30 91 f8 03 	lds	r19, 0x03F8
    144e:	2e 51       	subi	r18, 0x1E	; 30
    1450:	30 40       	sbci	r19, 0x00	; 0
    1452:	30 93 f8 03 	sts	0x03F8, r19
    1456:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    145a:	80 91 f9 03 	lds	r24, 0x03F9
    145e:	90 91 fa 03 	lds	r25, 0x03FA
    1462:	4e 96       	adiw	r24, 0x1e	; 30
    1464:	90 93 fa 03 	sts	0x03FA, r25
    1468:	80 93 f9 03 	sts	0x03F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    146c:	4e ef       	ldi	r20, 0xFE	; 254
    146e:	20 30       	cpi	r18, 0x00	; 0
    1470:	34 07       	cpc	r19, r20
    1472:	34 f4       	brge	.+12     	; 0x1480 <handleIRRemoteCommands+0x1de>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3e ef       	ldi	r19, 0xFE	; 254
    1478:	30 93 f8 03 	sts	0x03F8, r19
    147c:	20 93 f7 03 	sts	0x03F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1480:	42 e0       	ldi	r20, 0x02	; 2
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	94 07       	cpc	r25, r20
    1486:	0c f4       	brge	.+2      	; 0x148a <handleIRRemoteCommands+0x1e8>
    1488:	26 cf       	rjmp	.-436    	; 0x12d6 <handleIRRemoteCommands+0x34>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	90 93 fa 03 	sts	0x03FA, r25
    1492:	80 93 f9 03 	sts	0x03F9, r24
    1496:	1f cf       	rjmp	.-450    	; 0x12d6 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1498:	20 91 f7 03 	lds	r18, 0x03F7
    149c:	30 91 f8 03 	lds	r19, 0x03F8
    14a0:	80 91 f9 03 	lds	r24, 0x03F9
    14a4:	90 91 fa 03 	lds	r25, 0x03FA
    14a8:	82 17       	cp	r24, r18
    14aa:	93 07       	cpc	r25, r19
    14ac:	0c f4       	brge	.+2      	; 0x14b0 <handleIRRemoteCommands+0x20e>
    14ae:	da c0       	rjmp	.+436    	; 0x1664 <handleIRRemoteCommands+0x3c2>
    14b0:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    14b2:	22 5e       	subi	r18, 0xE2	; 226
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	30 93 f8 03 	sts	0x03F8, r19
    14ba:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    14be:	4e 96       	adiw	r24, 0x1e	; 30
    14c0:	90 93 fa 03 	sts	0x03FA, r25
    14c4:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    14c8:	42 e0       	ldi	r20, 0x02	; 2
    14ca:	21 30       	cpi	r18, 0x01	; 1
    14cc:	34 07       	cpc	r19, r20
    14ce:	34 f0       	brlt	.+12     	; 0x14dc <handleIRRemoteCommands+0x23a>
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	32 e0       	ldi	r19, 0x02	; 2
    14d4:	30 93 f8 03 	sts	0x03F8, r19
    14d8:	20 93 f7 03 	sts	0x03F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    14dc:	22 e0       	ldi	r18, 0x02	; 2
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	92 07       	cpc	r25, r18
    14e2:	0c f4       	brge	.+2      	; 0x14e6 <handleIRRemoteCommands+0x244>
    14e4:	8f cf       	rjmp	.-226    	; 0x1404 <handleIRRemoteCommands+0x162>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	90 93 fa 03 	sts	0x03FA, r25
    14ee:	80 93 f9 03 	sts	0x03F9, r24
    14f2:	20 91 f7 03 	lds	r18, 0x03F7
    14f6:	30 91 f8 03 	lds	r19, 0x03F8
    14fa:	ed ce       	rjmp	.-550    	; 0x12d6 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    14fc:	20 91 f7 03 	lds	r18, 0x03F7
    1500:	30 91 f8 03 	lds	r19, 0x03F8
    1504:	22 5e       	subi	r18, 0xE2	; 226
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	30 93 f8 03 	sts	0x03F8, r19
    150c:	20 93 f7 03 	sts	0x03F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1510:	42 e0       	ldi	r20, 0x02	; 2
    1512:	21 30       	cpi	r18, 0x01	; 1
    1514:	34 07       	cpc	r19, r20
    1516:	0c f4       	brge	.+2      	; 0x151a <handleIRRemoteCommands+0x278>
    1518:	a0 c0       	rjmp	.+320    	; 0x165a <handleIRRemoteCommands+0x3b8>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	90 93 f8 03 	sts	0x03F8, r25
    1522:	80 93 f7 03 	sts	0x03F7, r24
    1526:	80 91 f9 03 	lds	r24, 0x03F9
    152a:	90 91 fa 03 	lds	r25, 0x03FA
    152e:	20 e8       	ldi	r18, 0x80	; 128
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	d7 ce       	rjmp	.-594    	; 0x12e2 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1534:	80 91 18 05 	lds	r24, 0x0518
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	65 e0       	ldi	r22, 0x05	; 5
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__divmodhi4>
    1544:	80 93 18 05 	sts	0x0518, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1548:	88 23       	and	r24, r24
    154a:	09 f0       	breq	.+2      	; 0x154e <handleIRRemoteCommands+0x2ac>
    154c:	8d c0       	rjmp	.+282    	; 0x1668 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    154e:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1550:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1552:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    155c:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1560:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
					updateGreenLed(pwm_green);
    1564:	80 91 0d 02 	lds	r24, 0x020D
    1568:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
					updateBlueLed(pwm_blue);
    156c:	80 91 0e 02 	lds	r24, 0x020E
    1570:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>
    1574:	20 91 f7 03 	lds	r18, 0x03F7
    1578:	30 91 f8 03 	lds	r19, 0x03F8
    157c:	80 91 f9 03 	lds	r24, 0x03F9
    1580:	90 91 fa 03 	lds	r25, 0x03FA

	               	break;
    1584:	a8 ce       	rjmp	.-688    	; 0x12d6 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1586:	80 91 19 05 	lds	r24, 0x0519
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	83 70       	andi	r24, 0x03	; 3
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	80 93 19 05 	sts	0x0519, r24
					switch(behaviorState) {
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	09 f4       	brne	.+2      	; 0x159c <handleIRRemoteCommands+0x2fa>
    159a:	cf ce       	rjmp	.-610    	; 0x133a <handleIRRemoteCommands+0x98>
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	09 f4       	brne	.+2      	; 0x15a2 <handleIRRemoteCommands+0x300>
    15a0:	53 c0       	rjmp	.+166    	; 0x1648 <handleIRRemoteCommands+0x3a6>
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <handleIRRemoteCommands+0x306>
    15a6:	c4 ce       	rjmp	.-632    	; 0x1330 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    15a8:	10 92 3e 05 	sts	0x053E, r1
							cliffAvoidanceEnabled = 0;
    15ac:	10 92 3f 05 	sts	0x053F, r1
    15b0:	8a ce       	rjmp	.-748    	; 0x12c6 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    15b2:	20 91 f7 03 	lds	r18, 0x03F7
    15b6:	30 91 f8 03 	lds	r19, 0x03F8
    15ba:	22 5e       	subi	r18, 0xE2	; 226
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	30 93 f8 03 	sts	0x03F8, r19
    15c2:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    15c6:	80 91 f9 03 	lds	r24, 0x03F9
    15ca:	90 91 fa 03 	lds	r25, 0x03FA
    15ce:	4e 97       	sbiw	r24, 0x1e	; 30
    15d0:	90 93 fa 03 	sts	0x03FA, r25
    15d4:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    15d8:	42 e0       	ldi	r20, 0x02	; 2
    15da:	21 30       	cpi	r18, 0x01	; 1
    15dc:	34 07       	cpc	r19, r20
    15de:	34 f0       	brlt	.+12     	; 0x15ec <handleIRRemoteCommands+0x34a>
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	32 e0       	ldi	r19, 0x02	; 2
    15e4:	30 93 f8 03 	sts	0x03F8, r19
    15e8:	20 93 f7 03 	sts	0x03F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    15ec:	4e ef       	ldi	r20, 0xFE	; 254
    15ee:	80 30       	cpi	r24, 0x00	; 0
    15f0:	94 07       	cpc	r25, r20
    15f2:	0c f0       	brlt	.+2      	; 0x15f6 <handleIRRemoteCommands+0x354>
    15f4:	70 ce       	rjmp	.-800    	; 0x12d6 <handleIRRemoteCommands+0x34>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	9e ef       	ldi	r25, 0xFE	; 254
    15fa:	90 93 fa 03 	sts	0x03FA, r25
    15fe:	80 93 f9 03 	sts	0x03F9, r24
    1602:	69 ce       	rjmp	.-814    	; 0x12d6 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1604:	10 92 f8 03 	sts	0x03F8, r1
    1608:	10 92 f7 03 	sts	0x03F7, r1
					pwm_left_desired = 0;
    160c:	10 92 fa 03 	sts	0x03FA, r1
    1610:	10 92 f9 03 	sts	0x03F9, r1
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	5e ce       	rjmp	.-836    	; 0x12da <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    161e:	80 91 f9 03 	lds	r24, 0x03F9
    1622:	90 91 fa 03 	lds	r25, 0x03FA
    1626:	4e 96       	adiw	r24, 0x1e	; 30
    1628:	90 93 fa 03 	sts	0x03FA, r25
    162c:	80 93 f9 03 	sts	0x03F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1630:	22 e0       	ldi	r18, 0x02	; 2
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	92 07       	cpc	r25, r18
    1636:	0c f4       	brge	.+2      	; 0x163a <handleIRRemoteCommands+0x398>
    1638:	e5 ce       	rjmp	.-566    	; 0x1404 <handleIRRemoteCommands+0x162>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	90 93 fa 03 	sts	0x03FA, r25
    1642:	80 93 f9 03 	sts	0x03F9, r24
    1646:	de ce       	rjmp	.-580    	; 0x1404 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 3e 05 	sts	0x053E, r24
							cliffAvoidanceEnabled = 1;
    164e:	80 93 3f 05 	sts	0x053F, r24
    1652:	20 91 f7 03 	lds	r18, 0x03F7
    1656:	30 91 f8 03 	lds	r19, 0x03F8
    165a:	80 91 f9 03 	lds	r24, 0x03F9
    165e:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1662:	39 ce       	rjmp	.-910    	; 0x12d6 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1664:	c9 01       	movw	r24, r18
    1666:	25 cf       	rjmp	.-438    	; 0x14b2 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	61 f0       	breq	.+24     	; 0x1684 <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 f0       	breq	.+36     	; 0x1694 <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	d9 f0       	breq	.+54     	; 0x16aa <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    167a:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    167e:	80 93 0c 02 	sts	0x020C, r24
    1682:	6e cf       	rjmp	.-292    	; 0x1560 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    168a:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    168e:	80 93 0c 02 	sts	0x020C, r24
    1692:	66 cf       	rjmp	.-308    	; 0x1560 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1694:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1696:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    169e:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    16a2:	10 92 0c 02 	sts	0x020C, r1
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	5b cf       	rjmp	.-330    	; 0x1560 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    16aa:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    16ae:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    16b2:	10 92 0c 02 	sts	0x020C, r1
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	53 cf       	rjmp	.-346    	; 0x1560 <handleIRRemoteCommands+0x2be>

000016ba <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    16ba:	08 95       	ret

000016bc <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    16c6:	80 81       	ld	r24, Z
    16c8:	91 81       	ldd	r25, Z+1	; 0x01
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <start_vertical_speed_control_left+0x14>
    16ce:	b7 c0       	rjmp	.+366    	; 0x183e <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    16d0:	20 91 2d 05 	lds	r18, 0x052D
    16d4:	30 91 2e 05 	lds	r19, 0x052E
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	2e 30       	cpi	r18, 0x0E	; 14
    16dc:	34 07       	cpc	r19, r20
    16de:	0c f4       	brge	.+2      	; 0x16e2 <start_vertical_speed_control_left+0x26>
    16e0:	88 c0       	rjmp	.+272    	; 0x17f2 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    16e2:	18 16       	cp	r1, r24
    16e4:	19 06       	cpc	r1, r25
    16e6:	0c f0       	brlt	.+2      	; 0x16ea <start_vertical_speed_control_left+0x2e>
    16e8:	13 c1       	rjmp	.+550    	; 0x1910 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    16ea:	88 e6       	ldi	r24, 0x68	; 104
    16ec:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    16ee:	82 1b       	sub	r24, r18
    16f0:	93 0b       	sbc	r25, r19
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	95 95       	asr	r25
    16f8:	87 95       	ror	r24
    16fa:	29 e1       	ldi	r18, 0x19	; 25
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	28 1b       	sub	r18, r24
    1700:	39 0b       	sbc	r19, r25
    1702:	30 93 04 02 	sts	0x0204, r19
    1706:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    170a:	40 91 43 05 	lds	r20, 0x0543
    170e:	50 91 44 05 	lds	r21, 0x0544
    1712:	50 93 5e 05 	sts	0x055E, r21
    1716:	40 93 5d 05 	sts	0x055D, r20
	if(*pwm_left >= 0) {
    171a:	20 81       	ld	r18, Z
    171c:	31 81       	ldd	r19, Z+1	; 0x01
    171e:	37 fd       	sbrc	r19, 7
    1720:	d2 c0       	rjmp	.+420    	; 0x18c6 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1722:	80 91 ef 03 	lds	r24, 0x03EF
    1726:	90 91 f0 03 	lds	r25, 0x03F0
    172a:	b9 01       	movw	r22, r18
    172c:	68 1b       	sub	r22, r24
    172e:	79 0b       	sbc	r23, r25
    1730:	cb 01       	movw	r24, r22
    1732:	70 93 44 05 	sts	0x0544, r23
    1736:	60 93 43 05 	sts	0x0543, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    173a:	20 91 ff 03 	lds	r18, 0x03FF
    173e:	30 91 00 04 	lds	r19, 0x0400
    1742:	28 0f       	add	r18, r24
    1744:	39 1f       	adc	r19, r25
    1746:	30 93 00 04 	sts	0x0400, r19
    174a:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    174e:	76 e0       	ldi	r23, 0x06	; 6
    1750:	21 34       	cpi	r18, 0x41	; 65
    1752:	37 07       	cpc	r19, r23
    1754:	0c f4       	brge	.+2      	; 0x1758 <start_vertical_speed_control_left+0x9c>
    1756:	84 c0       	rjmp	.+264    	; 0x1860 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1758:	20 e4       	ldi	r18, 0x40	; 64
    175a:	36 e0       	ldi	r19, 0x06	; 6
    175c:	30 93 00 04 	sts	0x0400, r19
    1760:	20 93 ff 03 	sts	0x03FF, r18
    1764:	60 ec       	ldi	r22, 0xC0	; 192
    1766:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1768:	9c 01       	movw	r18, r24
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	dc 01       	movw	r26, r24
    1770:	aa 0f       	add	r26, r26
    1772:	bb 1f       	adc	r27, r27
    1774:	aa 0f       	add	r26, r26
    1776:	bb 1f       	adc	r27, r27
    1778:	aa 0f       	add	r26, r26
    177a:	bb 1f       	adc	r27, r27
    177c:	2a 0f       	add	r18, r26
    177e:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1780:	00 81       	ld	r16, Z
    1782:	11 81       	ldd	r17, Z+1	; 0x01
    1784:	c0 91 03 02 	lds	r28, 0x0203
    1788:	d0 91 04 02 	lds	r29, 0x0204
    178c:	0c 9f       	mul	r16, r28
    178e:	d0 01       	movw	r26, r0
    1790:	0d 9f       	mul	r16, r29
    1792:	b0 0d       	add	r27, r0
    1794:	1c 9f       	mul	r17, r28
    1796:	b0 0d       	add	r27, r0
    1798:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    179a:	2a 0f       	add	r18, r26
    179c:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    179e:	48 1b       	sub	r20, r24
    17a0:	59 0b       	sbc	r21, r25
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	24 0f       	add	r18, r20
    17a8:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    17aa:	26 0f       	add	r18, r22
    17ac:	37 1f       	adc	r19, r23
    17ae:	30 93 fe 03 	sts	0x03FE, r19
    17b2:	20 93 fd 03 	sts	0x03FD, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    17b6:	37 fd       	sbrc	r19, 7
    17b8:	69 c0       	rjmp	.+210    	; 0x188c <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    17ba:	12 16       	cp	r1, r18
    17bc:	13 06       	cpc	r1, r19
    17be:	0c f0       	brlt	.+2      	; 0x17c2 <start_vertical_speed_control_left+0x106>
    17c0:	6f c0       	rjmp	.+222    	; 0x18a0 <start_vertical_speed_control_left+0x1e4>
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	97 fd       	sbrc	r25, 7
    17c8:	89 c0       	rjmp	.+274    	; 0x18dc <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    17ca:	7d e5       	ldi	r23, 0x5D	; 93
    17cc:	21 3c       	cpi	r18, 0xC1	; 193
    17ce:	37 07       	cpc	r19, r23
    17d0:	0c f4       	brge	.+2      	; 0x17d4 <start_vertical_speed_control_left+0x118>
    17d2:	66 c0       	rjmp	.+204    	; 0x18a0 <start_vertical_speed_control_left+0x1e4>
    17d4:	80 ec       	ldi	r24, 0xC0	; 192
    17d6:	9d e5       	ldi	r25, 0x5D	; 93
    17d8:	90 93 fe 03 	sts	0x03FE, r25
    17dc:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    17f2:	24 3b       	cpi	r18, 0xB4	; 180
    17f4:	31 05       	cpc	r19, r1
    17f6:	94 f4       	brge	.+36     	; 0x181c <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    17f8:	2a 35       	cpi	r18, 0x5A	; 90
    17fa:	31 05       	cpc	r19, r1
    17fc:	7c f4       	brge	.+30     	; 0x181c <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    17fe:	18 16       	cp	r1, r24
    1800:	19 06       	cpc	r1, r25
    1802:	0c f0       	brlt	.+2      	; 0x1806 <start_vertical_speed_control_left+0x14a>
    1804:	93 c0       	rjmp	.+294    	; 0x192c <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1806:	35 95       	asr	r19
    1808:	27 95       	ror	r18
    180a:	35 95       	asr	r19
    180c:	27 95       	ror	r18
    180e:	27 5e       	subi	r18, 0xE7	; 231
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	30 93 04 02 	sts	0x0204, r19
    1816:	20 93 03 02 	sts	0x0203, r18
    181a:	77 cf       	rjmp	.-274    	; 0x170a <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    181c:	18 16       	cp	r1, r24
    181e:	19 06       	cpc	r1, r25
    1820:	94 f5       	brge	.+100    	; 0x1886 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1822:	84 eb       	ldi	r24, 0xB4	; 180
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	82 1b       	sub	r24, r18
    1828:	93 0b       	sbc	r25, r19
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	95 95       	asr	r25
    1830:	87 95       	ror	r24
    1832:	49 96       	adiw	r24, 0x19	; 25
    1834:	90 93 04 02 	sts	0x0204, r25
    1838:	80 93 03 02 	sts	0x0203, r24
    183c:	66 cf       	rjmp	.-308    	; 0x170a <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    183e:	10 92 00 04 	sts	0x0400, r1
    1842:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    1846:	10 92 44 05 	sts	0x0544, r1
    184a:	10 92 43 05 	sts	0x0543, r1
		delta_left_speed_prev = 0;
    184e:	10 92 5e 05 	sts	0x055E, r1
    1852:	10 92 5d 05 	sts	0x055D, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1860:	69 ef       	ldi	r22, 0xF9	; 249
    1862:	20 3c       	cpi	r18, 0xC0	; 192
    1864:	36 07       	cpc	r19, r22
    1866:	4c f4       	brge	.+18     	; 0x187a <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1868:	20 ec       	ldi	r18, 0xC0	; 192
    186a:	39 ef       	ldi	r19, 0xF9	; 249
    186c:	30 93 00 04 	sts	0x0400, r19
    1870:	20 93 ff 03 	sts	0x03FF, r18
    1874:	60 e4       	ldi	r22, 0x40	; 64
    1876:	7d ee       	ldi	r23, 0xED	; 237
    1878:	77 cf       	rjmp	.-274    	; 0x1768 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    187a:	b9 01       	movw	r22, r18
    187c:	66 0f       	add	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	62 0f       	add	r22, r18
    1882:	73 1f       	adc	r23, r19
    1884:	71 cf       	rjmp	.-286    	; 0x1768 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1886:	84 eb       	ldi	r24, 0xB4	; 180
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	31 cf       	rjmp	.-414    	; 0x16ee <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	97 fd       	sbrc	r25, 7
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    1894:	10 92 fe 03 	sts	0x03FE, r1
    1898:	10 92 fd 03 	sts	0x03FD, r1
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    18a0:	82 ea       	ldi	r24, 0xA2	; 162
    18a2:	20 34       	cpi	r18, 0x40	; 64
    18a4:	38 07       	cpc	r19, r24
    18a6:	04 f5       	brge	.+64     	; 0x18e8 <start_vertical_speed_control_left+0x22c>
    18a8:	80 e4       	ldi	r24, 0x40	; 64
    18aa:	92 ea       	ldi	r25, 0xA2	; 162
    18ac:	90 93 fe 03 	sts	0x03FE, r25
    18b0:	80 93 fd 03 	sts	0x03FD, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	9e ef       	ldi	r25, 0xFE	; 254
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24


}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    18c6:	80 91 ef 03 	lds	r24, 0x03EF
    18ca:	90 91 f0 03 	lds	r25, 0x03F0
    18ce:	82 0f       	add	r24, r18
    18d0:	93 1f       	adc	r25, r19
    18d2:	90 93 44 05 	sts	0x0544, r25
    18d6:	80 93 43 05 	sts	0x0543, r24
    18da:	2f cf       	rjmp	.-418    	; 0x173a <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    18dc:	10 92 fe 03 	sts	0x03FE, r1
    18e0:	10 92 fd 03 	sts	0x03FD, r1
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    18e8:	35 95       	asr	r19
    18ea:	27 95       	ror	r18
    18ec:	35 95       	asr	r19
    18ee:	27 95       	ror	r18
    18f0:	35 95       	asr	r19
    18f2:	27 95       	ror	r18
    18f4:	35 95       	asr	r19
    18f6:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    18f8:	31 83       	std	Z+1, r19	; 0x01
    18fa:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    18fc:	42 e0       	ldi	r20, 0x02	; 2
    18fe:	21 30       	cpi	r18, 0x01	; 1
    1900:	34 07       	cpc	r19, r20
    1902:	0c f0       	brlt	.+2      	; 0x1906 <start_vertical_speed_control_left+0x24a>
    1904:	6d cf       	rjmp	.-294    	; 0x17e0 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1906:	6e ef       	ldi	r22, 0xFE	; 254
    1908:	20 30       	cpi	r18, 0x00	; 0
    190a:	36 07       	cpc	r19, r22
    190c:	9c f2       	brlt	.-90     	; 0x18b4 <start_vertical_speed_control_left+0x1f8>
    190e:	6c cf       	rjmp	.-296    	; 0x17e8 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1910:	88 e6       	ldi	r24, 0x68	; 104
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	82 1b       	sub	r24, r18
    1916:	93 0b       	sbc	r25, r19
    1918:	95 95       	asr	r25
    191a:	87 95       	ror	r24
    191c:	95 95       	asr	r25
    191e:	87 95       	ror	r24
    1920:	49 96       	adiw	r24, 0x19	; 25
    1922:	90 93 04 02 	sts	0x0204, r25
    1926:	80 93 03 02 	sts	0x0203, r24
    192a:	ef ce       	rjmp	.-546    	; 0x170a <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    192c:	35 95       	asr	r19
    192e:	27 95       	ror	r18
    1930:	35 95       	asr	r19
    1932:	27 95       	ror	r18
    1934:	89 e1       	ldi	r24, 0x19	; 25
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	82 1b       	sub	r24, r18
    193a:	93 0b       	sbc	r25, r19
    193c:	90 93 04 02 	sts	0x0204, r25
    1940:	80 93 03 02 	sts	0x0203, r24
    1944:	e2 ce       	rjmp	.-572    	; 0x170a <start_vertical_speed_control_left+0x4e>

00001946 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f4       	brne	.+2      	; 0x195a <start_vertical_speed_control_right+0x14>
    1958:	b7 c0       	rjmp	.+366    	; 0x1ac8 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    195a:	20 91 2d 05 	lds	r18, 0x052D
    195e:	30 91 2e 05 	lds	r19, 0x052E
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	2e 30       	cpi	r18, 0x0E	; 14
    1966:	34 07       	cpc	r19, r20
    1968:	0c f4       	brge	.+2      	; 0x196c <start_vertical_speed_control_right+0x26>
    196a:	88 c0       	rjmp	.+272    	; 0x1a7c <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    196c:	18 16       	cp	r1, r24
    196e:	19 06       	cpc	r1, r25
    1970:	0c f0       	brlt	.+2      	; 0x1974 <start_vertical_speed_control_right+0x2e>
    1972:	13 c1       	rjmp	.+550    	; 0x1b9a <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    1974:	88 e6       	ldi	r24, 0x68	; 104
    1976:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1978:	82 1b       	sub	r24, r18
    197a:	93 0b       	sbc	r25, r19
    197c:	95 95       	asr	r25
    197e:	87 95       	ror	r24
    1980:	95 95       	asr	r25
    1982:	87 95       	ror	r24
    1984:	29 e1       	ldi	r18, 0x19	; 25
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	28 1b       	sub	r18, r24
    198a:	39 0b       	sbc	r19, r25
    198c:	30 93 06 02 	sts	0x0206, r19
    1990:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1994:	40 91 6c 05 	lds	r20, 0x056C
    1998:	50 91 6d 05 	lds	r21, 0x056D
    199c:	50 93 46 05 	sts	0x0546, r21
    19a0:	40 93 45 05 	sts	0x0545, r20
	if(*pwm_right >= 0) {
    19a4:	20 81       	ld	r18, Z
    19a6:	31 81       	ldd	r19, Z+1	; 0x01
    19a8:	37 fd       	sbrc	r19, 7
    19aa:	d2 c0       	rjmp	.+420    	; 0x1b50 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    19ac:	80 91 f1 03 	lds	r24, 0x03F1
    19b0:	90 91 f2 03 	lds	r25, 0x03F2
    19b4:	b9 01       	movw	r22, r18
    19b6:	68 1b       	sub	r22, r24
    19b8:	79 0b       	sbc	r23, r25
    19ba:	cb 01       	movw	r24, r22
    19bc:	70 93 6d 05 	sts	0x056D, r23
    19c0:	60 93 6c 05 	sts	0x056C, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    19c4:	20 91 01 04 	lds	r18, 0x0401
    19c8:	30 91 02 04 	lds	r19, 0x0402
    19cc:	28 0f       	add	r18, r24
    19ce:	39 1f       	adc	r19, r25
    19d0:	30 93 02 04 	sts	0x0402, r19
    19d4:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    19d8:	76 e0       	ldi	r23, 0x06	; 6
    19da:	21 34       	cpi	r18, 0x41	; 65
    19dc:	37 07       	cpc	r19, r23
    19de:	0c f4       	brge	.+2      	; 0x19e2 <start_vertical_speed_control_right+0x9c>
    19e0:	84 c0       	rjmp	.+264    	; 0x1aea <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    19e2:	20 e4       	ldi	r18, 0x40	; 64
    19e4:	36 e0       	ldi	r19, 0x06	; 6
    19e6:	30 93 02 04 	sts	0x0402, r19
    19ea:	20 93 01 04 	sts	0x0401, r18
    19ee:	60 ec       	ldi	r22, 0xC0	; 192
    19f0:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    19f2:	9c 01       	movw	r18, r24
    19f4:	22 0f       	add	r18, r18
    19f6:	33 1f       	adc	r19, r19
    19f8:	dc 01       	movw	r26, r24
    19fa:	aa 0f       	add	r26, r26
    19fc:	bb 1f       	adc	r27, r27
    19fe:	aa 0f       	add	r26, r26
    1a00:	bb 1f       	adc	r27, r27
    1a02:	aa 0f       	add	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	2a 0f       	add	r18, r26
    1a08:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1a0a:	00 81       	ld	r16, Z
    1a0c:	11 81       	ldd	r17, Z+1	; 0x01
    1a0e:	c0 91 05 02 	lds	r28, 0x0205
    1a12:	d0 91 06 02 	lds	r29, 0x0206
    1a16:	0c 9f       	mul	r16, r28
    1a18:	d0 01       	movw	r26, r0
    1a1a:	0d 9f       	mul	r16, r29
    1a1c:	b0 0d       	add	r27, r0
    1a1e:	1c 9f       	mul	r17, r28
    1a20:	b0 0d       	add	r27, r0
    1a22:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1a24:	2a 0f       	add	r18, r26
    1a26:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1a28:	48 1b       	sub	r20, r24
    1a2a:	59 0b       	sbc	r21, r25
    1a2c:	44 0f       	add	r20, r20
    1a2e:	55 1f       	adc	r21, r21
    1a30:	24 0f       	add	r18, r20
    1a32:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1a34:	26 0f       	add	r18, r22
    1a36:	37 1f       	adc	r19, r23
    1a38:	30 93 fc 03 	sts	0x03FC, r19
    1a3c:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1a40:	37 fd       	sbrc	r19, 7
    1a42:	69 c0       	rjmp	.+210    	; 0x1b16 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1a44:	12 16       	cp	r1, r18
    1a46:	13 06       	cpc	r1, r19
    1a48:	0c f0       	brlt	.+2      	; 0x1a4c <start_vertical_speed_control_right+0x106>
    1a4a:	6f c0       	rjmp	.+222    	; 0x1b2a <start_vertical_speed_control_right+0x1e4>
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	97 fd       	sbrc	r25, 7
    1a52:	89 c0       	rjmp	.+274    	; 0x1b66 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1a54:	7d e5       	ldi	r23, 0x5D	; 93
    1a56:	21 3c       	cpi	r18, 0xC1	; 193
    1a58:	37 07       	cpc	r19, r23
    1a5a:	0c f4       	brge	.+2      	; 0x1a5e <start_vertical_speed_control_right+0x118>
    1a5c:	66 c0       	rjmp	.+204    	; 0x1b2a <start_vertical_speed_control_right+0x1e4>
    1a5e:	80 ec       	ldi	r24, 0xC0	; 192
    1a60:	9d e5       	ldi	r25, 0x5D	; 93
    1a62:	90 93 fc 03 	sts	0x03FC, r25
    1a66:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	92 e0       	ldi	r25, 0x02	; 2
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1a7c:	24 3b       	cpi	r18, 0xB4	; 180
    1a7e:	31 05       	cpc	r19, r1
    1a80:	94 f4       	brge	.+36     	; 0x1aa6 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1a82:	2a 35       	cpi	r18, 0x5A	; 90
    1a84:	31 05       	cpc	r19, r1
    1a86:	7c f4       	brge	.+30     	; 0x1aa6 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1a88:	18 16       	cp	r1, r24
    1a8a:	19 06       	cpc	r1, r25
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <start_vertical_speed_control_right+0x14a>
    1a8e:	93 c0       	rjmp	.+294    	; 0x1bb6 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1a90:	35 95       	asr	r19
    1a92:	27 95       	ror	r18
    1a94:	35 95       	asr	r19
    1a96:	27 95       	ror	r18
    1a98:	27 5e       	subi	r18, 0xE7	; 231
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	30 93 06 02 	sts	0x0206, r19
    1aa0:	20 93 05 02 	sts	0x0205, r18
    1aa4:	77 cf       	rjmp	.-274    	; 0x1994 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    1aa6:	18 16       	cp	r1, r24
    1aa8:	19 06       	cpc	r1, r25
    1aaa:	94 f5       	brge	.+100    	; 0x1b10 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    1aac:	84 eb       	ldi	r24, 0xB4	; 180
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	82 1b       	sub	r24, r18
    1ab2:	93 0b       	sbc	r25, r19
    1ab4:	95 95       	asr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	95 95       	asr	r25
    1aba:	87 95       	ror	r24
    1abc:	49 96       	adiw	r24, 0x19	; 25
    1abe:	90 93 06 02 	sts	0x0206, r25
    1ac2:	80 93 05 02 	sts	0x0205, r24
    1ac6:	66 cf       	rjmp	.-308    	; 0x1994 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1ac8:	10 92 02 04 	sts	0x0402, r1
    1acc:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    1ad0:	10 92 6d 05 	sts	0x056D, r1
    1ad4:	10 92 6c 05 	sts	0x056C, r1
		delta_right_speed_prev = 0;
    1ad8:	10 92 46 05 	sts	0x0546, r1
    1adc:	10 92 45 05 	sts	0x0545, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1aea:	69 ef       	ldi	r22, 0xF9	; 249
    1aec:	20 3c       	cpi	r18, 0xC0	; 192
    1aee:	36 07       	cpc	r19, r22
    1af0:	4c f4       	brge	.+18     	; 0x1b04 <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1af2:	20 ec       	ldi	r18, 0xC0	; 192
    1af4:	39 ef       	ldi	r19, 0xF9	; 249
    1af6:	30 93 02 04 	sts	0x0402, r19
    1afa:	20 93 01 04 	sts	0x0401, r18
    1afe:	60 e4       	ldi	r22, 0x40	; 64
    1b00:	7d ee       	ldi	r23, 0xED	; 237
    1b02:	77 cf       	rjmp	.-274    	; 0x19f2 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1b04:	b9 01       	movw	r22, r18
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	62 0f       	add	r22, r18
    1b0c:	73 1f       	adc	r23, r19
    1b0e:	71 cf       	rjmp	.-286    	; 0x19f2 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1b10:	84 eb       	ldi	r24, 0xB4	; 180
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	31 cf       	rjmp	.-414    	; 0x1978 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	97 fd       	sbrc	r25, 7
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1b1e:	10 92 fc 03 	sts	0x03FC, r1
    1b22:	10 92 fb 03 	sts	0x03FB, r1
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1b2a:	82 ea       	ldi	r24, 0xA2	; 162
    1b2c:	20 34       	cpi	r18, 0x40	; 64
    1b2e:	38 07       	cpc	r19, r24
    1b30:	04 f5       	brge	.+64     	; 0x1b72 <start_vertical_speed_control_right+0x22c>
    1b32:	80 e4       	ldi	r24, 0x40	; 64
    1b34:	92 ea       	ldi	r25, 0xA2	; 162
    1b36:	90 93 fc 03 	sts	0x03FC, r25
    1b3a:	80 93 fb 03 	sts	0x03FB, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	9e ef       	ldi	r25, 0xFE	; 254
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24

}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1b50:	80 91 f1 03 	lds	r24, 0x03F1
    1b54:	90 91 f2 03 	lds	r25, 0x03F2
    1b58:	82 0f       	add	r24, r18
    1b5a:	93 1f       	adc	r25, r19
    1b5c:	90 93 6d 05 	sts	0x056D, r25
    1b60:	80 93 6c 05 	sts	0x056C, r24
    1b64:	2f cf       	rjmp	.-418    	; 0x19c4 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1b66:	10 92 fc 03 	sts	0x03FC, r1
    1b6a:	10 92 fb 03 	sts	0x03FB, r1
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1b72:	35 95       	asr	r19
    1b74:	27 95       	ror	r18
    1b76:	35 95       	asr	r19
    1b78:	27 95       	ror	r18
    1b7a:	35 95       	asr	r19
    1b7c:	27 95       	ror	r18
    1b7e:	35 95       	asr	r19
    1b80:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1b82:	31 83       	std	Z+1, r19	; 0x01
    1b84:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1b86:	42 e0       	ldi	r20, 0x02	; 2
    1b88:	21 30       	cpi	r18, 0x01	; 1
    1b8a:	34 07       	cpc	r19, r20
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <start_vertical_speed_control_right+0x24a>
    1b8e:	6d cf       	rjmp	.-294    	; 0x1a6a <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1b90:	6e ef       	ldi	r22, 0xFE	; 254
    1b92:	20 30       	cpi	r18, 0x00	; 0
    1b94:	36 07       	cpc	r19, r22
    1b96:	9c f2       	brlt	.-90     	; 0x1b3e <start_vertical_speed_control_right+0x1f8>
    1b98:	6c cf       	rjmp	.-296    	; 0x1a72 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1b9a:	88 e6       	ldi	r24, 0x68	; 104
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	82 1b       	sub	r24, r18
    1ba0:	93 0b       	sbc	r25, r19
    1ba2:	95 95       	asr	r25
    1ba4:	87 95       	ror	r24
    1ba6:	95 95       	asr	r25
    1ba8:	87 95       	ror	r24
    1baa:	49 96       	adiw	r24, 0x19	; 25
    1bac:	90 93 06 02 	sts	0x0206, r25
    1bb0:	80 93 05 02 	sts	0x0205, r24
    1bb4:	ef ce       	rjmp	.-546    	; 0x1994 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1bb6:	35 95       	asr	r19
    1bb8:	27 95       	ror	r18
    1bba:	35 95       	asr	r19
    1bbc:	27 95       	ror	r18
    1bbe:	89 e1       	ldi	r24, 0x19	; 25
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	82 1b       	sub	r24, r18
    1bc4:	93 0b       	sbc	r25, r19
    1bc6:	90 93 06 02 	sts	0x0206, r25
    1bca:	80 93 05 02 	sts	0x0205, r24
    1bce:	e2 ce       	rjmp	.-572    	; 0x1994 <start_vertical_speed_control_right+0x4e>

00001bd0 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1bd0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <start_horizontal_speed_control_right+0xc>
    1bda:	7b c0       	rjmp	.+246    	; 0x1cd2 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1bdc:	a0 91 6c 05 	lds	r26, 0x056C
    1be0:	b0 91 6d 05 	lds	r27, 0x056D
    1be4:	b0 93 46 05 	sts	0x0546, r27
    1be8:	a0 93 45 05 	sts	0x0545, r26
	if(*pwm_right >= 0) {
    1bec:	20 81       	ld	r18, Z
    1bee:	31 81       	ldd	r19, Z+1	; 0x01
    1bf0:	37 fd       	sbrc	r19, 7
    1bf2:	89 c0       	rjmp	.+274    	; 0x1d06 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1bf4:	80 91 f1 03 	lds	r24, 0x03F1
    1bf8:	90 91 f2 03 	lds	r25, 0x03F2
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	48 1b       	sub	r20, r24
    1c00:	59 0b       	sbc	r21, r25
    1c02:	ca 01       	movw	r24, r20
    1c04:	50 93 6d 05 	sts	0x056D, r21
    1c08:	40 93 6c 05 	sts	0x056C, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1c0c:	20 91 01 04 	lds	r18, 0x0401
    1c10:	30 91 02 04 	lds	r19, 0x0402
    1c14:	28 0f       	add	r18, r24
    1c16:	39 1f       	adc	r19, r25
    1c18:	30 93 02 04 	sts	0x0402, r19
    1c1c:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1c20:	56 e0       	ldi	r21, 0x06	; 6
    1c22:	21 34       	cpi	r18, 0x41	; 65
    1c24:	35 07       	cpc	r19, r21
    1c26:	0c f4       	brge	.+2      	; 0x1c2a <start_horizontal_speed_control_right+0x5a>
    1c28:	61 c0       	rjmp	.+194    	; 0x1cec <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1c2a:	20 e4       	ldi	r18, 0x40	; 64
    1c2c:	36 e0       	ldi	r19, 0x06	; 6
    1c2e:	30 93 02 04 	sts	0x0402, r19
    1c32:	20 93 01 04 	sts	0x0401, r18
    1c36:	60 e8       	ldi	r22, 0x80	; 128
    1c38:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	22 0f       	add	r18, r18
    1c3e:	33 1f       	adc	r19, r19
    1c40:	28 0f       	add	r18, r24
    1c42:	39 1f       	adc	r19, r25
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	22 0f       	add	r18, r18
    1c4e:	33 1f       	adc	r19, r19
    1c50:	28 0f       	add	r18, r24
    1c52:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1c54:	40 81       	ld	r20, Z
    1c56:	51 81       	ldd	r21, Z+1	; 0x01
    1c58:	44 0f       	add	r20, r20
    1c5a:	55 1f       	adc	r21, r21
    1c5c:	44 0f       	add	r20, r20
    1c5e:	55 1f       	adc	r21, r21
    1c60:	44 0f       	add	r20, r20
    1c62:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1c64:	24 0f       	add	r18, r20
    1c66:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1c68:	ad 01       	movw	r20, r26
    1c6a:	48 1b       	sub	r20, r24
    1c6c:	59 0b       	sbc	r21, r25
    1c6e:	ca 01       	movw	r24, r20
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	84 0f       	add	r24, r20
    1c76:	95 1f       	adc	r25, r21
    1c78:	28 0f       	add	r18, r24
    1c7a:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1c7c:	26 0f       	add	r18, r22
    1c7e:	37 1f       	adc	r19, r23
    1c80:	30 93 fc 03 	sts	0x03FC, r19
    1c84:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c88:	37 fd       	sbrc	r19, 7
    1c8a:	4c c0       	rjmp	.+152    	; 0x1d24 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1c8c:	12 16       	cp	r1, r18
    1c8e:	13 06       	cpc	r1, r19
    1c90:	0c f0       	brlt	.+2      	; 0x1c94 <start_horizontal_speed_control_right+0xc4>
    1c92:	52 c0       	rjmp	.+164    	; 0x1d38 <start_horizontal_speed_control_right+0x168>
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	97 fd       	sbrc	r25, 7
    1c9a:	67 c0       	rjmp	.+206    	; 0x1d6a <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1c9c:	5d e5       	ldi	r21, 0x5D	; 93
    1c9e:	21 3c       	cpi	r18, 0xC1	; 193
    1ca0:	35 07       	cpc	r19, r21
    1ca2:	0c f4       	brge	.+2      	; 0x1ca6 <start_horizontal_speed_control_right+0xd6>
    1ca4:	49 c0       	rjmp	.+146    	; 0x1d38 <start_horizontal_speed_control_right+0x168>
    1ca6:	80 ec       	ldi	r24, 0xC0	; 192
    1ca8:	9d e5       	ldi	r25, 0x5D	; 93
    1caa:	90 93 fc 03 	sts	0x03FC, r25
    1cae:	80 93 fb 03 	sts	0x03FB, r24
    1cb2:	2c ed       	ldi	r18, 0xDC	; 220
    1cb4:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1cb6:	22 5e       	subi	r18, 0xE2	; 226
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	31 83       	std	Z+1, r19	; 0x01
    1cbc:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1cbe:	42 e0       	ldi	r20, 0x02	; 2
    1cc0:	21 30       	cpi	r18, 0x01	; 1
    1cc2:	34 07       	cpc	r19, r20
    1cc4:	0c f4       	brge	.+2      	; 0x1cc8 <start_horizontal_speed_control_right+0xf8>
    1cc6:	48 c0       	rjmp	.+144    	; 0x1d58 <start_horizontal_speed_control_right+0x188>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1cd2:	10 92 02 04 	sts	0x0402, r1
    1cd6:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    1cda:	10 92 6d 05 	sts	0x056D, r1
    1cde:	10 92 6c 05 	sts	0x056C, r1
		delta_right_speed_prev = 0;
    1ce2:	10 92 46 05 	sts	0x0546, r1
    1ce6:	10 92 45 05 	sts	0x0545, r1
		return;
    1cea:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1cec:	49 ef       	ldi	r20, 0xF9	; 249
    1cee:	20 3c       	cpi	r18, 0xC0	; 192
    1cf0:	34 07       	cpc	r19, r20
    1cf2:	a4 f4       	brge	.+40     	; 0x1d1c <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1cf4:	20 ec       	ldi	r18, 0xC0	; 192
    1cf6:	39 ef       	ldi	r19, 0xF9	; 249
    1cf8:	30 93 02 04 	sts	0x0402, r19
    1cfc:	20 93 01 04 	sts	0x0401, r18
    1d00:	60 e8       	ldi	r22, 0x80	; 128
    1d02:	73 ef       	ldi	r23, 0xF3	; 243
    1d04:	9a cf       	rjmp	.-204    	; 0x1c3a <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1d06:	80 91 f1 03 	lds	r24, 0x03F1
    1d0a:	90 91 f2 03 	lds	r25, 0x03F2
    1d0e:	82 0f       	add	r24, r18
    1d10:	93 1f       	adc	r25, r19
    1d12:	90 93 6d 05 	sts	0x056D, r25
    1d16:	80 93 6c 05 	sts	0x056C, r24
    1d1a:	78 cf       	rjmp	.-272    	; 0x1c0c <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	66 0f       	add	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	8b cf       	rjmp	.-234    	; 0x1c3a <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	97 fd       	sbrc	r25, 7
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1d2c:	10 92 fc 03 	sts	0x03FC, r1
    1d30:	10 92 fb 03 	sts	0x03FB, r1
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1d38:	82 ea       	ldi	r24, 0xA2	; 162
    1d3a:	20 34       	cpi	r18, 0x40	; 64
    1d3c:	38 07       	cpc	r19, r24
    1d3e:	dc f4       	brge	.+54     	; 0x1d76 <start_horizontal_speed_control_right+0x1a6>
    1d40:	80 e4       	ldi	r24, 0x40	; 64
    1d42:	92 ea       	ldi	r25, 0xA2	; 162
    1d44:	90 93 fc 03 	sts	0x03FC, r25
    1d48:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1d4c:	24 e2       	ldi	r18, 0x24	; 36
    1d4e:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1d50:	2e 51       	subi	r18, 0x1E	; 30
    1d52:	30 40       	sbci	r19, 0x00	; 0
    1d54:	31 83       	std	Z+1, r19	; 0x01
    1d56:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1d58:	5e ef       	ldi	r21, 0xFE	; 254
    1d5a:	20 30       	cpi	r18, 0x00	; 0
    1d5c:	35 07       	cpc	r19, r21
    1d5e:	24 f4       	brge	.+8      	; 0x1d68 <start_horizontal_speed_control_right+0x198>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	9e ef       	ldi	r25, 0xFE	; 254
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1d6a:	10 92 fc 03 	sts	0x03FC, r1
    1d6e:	10 92 fb 03 	sts	0x03FB, r1
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1d76:	35 95       	asr	r19
    1d78:	27 95       	ror	r18
    1d7a:	35 95       	asr	r19
    1d7c:	27 95       	ror	r18
    1d7e:	35 95       	asr	r19
    1d80:	27 95       	ror	r18
    1d82:	35 95       	asr	r19
    1d84:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1d86:	31 83       	std	Z+1, r19	; 0x01
    1d88:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1d8a:	12 16       	cp	r1, r18
    1d8c:	13 06       	cpc	r1, r19
    1d8e:	0c f4       	brge	.+2      	; 0x1d92 <start_horizontal_speed_control_right+0x1c2>
    1d90:	92 cf       	rjmp	.-220    	; 0x1cb6 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1d92:	21 15       	cp	r18, r1
    1d94:	31 05       	cpc	r19, r1
    1d96:	e1 f6       	brne	.-72     	; 0x1d50 <start_horizontal_speed_control_right+0x180>
    1d98:	08 95       	ret

00001d9a <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1d9a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <start_horizontal_speed_control_left+0xc>
    1da4:	7b c0       	rjmp	.+246    	; 0x1e9c <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1da6:	a0 91 43 05 	lds	r26, 0x0543
    1daa:	b0 91 44 05 	lds	r27, 0x0544
    1dae:	b0 93 5e 05 	sts	0x055E, r27
    1db2:	a0 93 5d 05 	sts	0x055D, r26
	if(*pwm_left >= 0) {
    1db6:	20 81       	ld	r18, Z
    1db8:	31 81       	ldd	r19, Z+1	; 0x01
    1dba:	37 fd       	sbrc	r19, 7
    1dbc:	89 c0       	rjmp	.+274    	; 0x1ed0 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1dbe:	80 91 ef 03 	lds	r24, 0x03EF
    1dc2:	90 91 f0 03 	lds	r25, 0x03F0
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	48 1b       	sub	r20, r24
    1dca:	59 0b       	sbc	r21, r25
    1dcc:	ca 01       	movw	r24, r20
    1dce:	50 93 44 05 	sts	0x0544, r21
    1dd2:	40 93 43 05 	sts	0x0543, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1dd6:	20 91 ff 03 	lds	r18, 0x03FF
    1dda:	30 91 00 04 	lds	r19, 0x0400
    1dde:	28 0f       	add	r18, r24
    1de0:	39 1f       	adc	r19, r25
    1de2:	30 93 00 04 	sts	0x0400, r19
    1de6:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1dea:	56 e0       	ldi	r21, 0x06	; 6
    1dec:	21 34       	cpi	r18, 0x41	; 65
    1dee:	35 07       	cpc	r19, r21
    1df0:	0c f4       	brge	.+2      	; 0x1df4 <start_horizontal_speed_control_left+0x5a>
    1df2:	61 c0       	rjmp	.+194    	; 0x1eb6 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1df4:	20 e4       	ldi	r18, 0x40	; 64
    1df6:	36 e0       	ldi	r19, 0x06	; 6
    1df8:	30 93 00 04 	sts	0x0400, r19
    1dfc:	20 93 ff 03 	sts	0x03FF, r18
    1e00:	60 e8       	ldi	r22, 0x80	; 128
    1e02:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1e04:	9c 01       	movw	r18, r24
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	28 0f       	add	r18, r24
    1e0c:	39 1f       	adc	r19, r25
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	28 0f       	add	r18, r24
    1e1c:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1e1e:	40 81       	ld	r20, Z
    1e20:	51 81       	ldd	r21, Z+1	; 0x01
    1e22:	44 0f       	add	r20, r20
    1e24:	55 1f       	adc	r21, r21
    1e26:	44 0f       	add	r20, r20
    1e28:	55 1f       	adc	r21, r21
    1e2a:	44 0f       	add	r20, r20
    1e2c:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1e2e:	24 0f       	add	r18, r20
    1e30:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1e32:	ad 01       	movw	r20, r26
    1e34:	48 1b       	sub	r20, r24
    1e36:	59 0b       	sbc	r21, r25
    1e38:	ca 01       	movw	r24, r20
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	84 0f       	add	r24, r20
    1e40:	95 1f       	adc	r25, r21
    1e42:	28 0f       	add	r18, r24
    1e44:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1e46:	26 0f       	add	r18, r22
    1e48:	37 1f       	adc	r19, r23
    1e4a:	30 93 fe 03 	sts	0x03FE, r19
    1e4e:	20 93 fd 03 	sts	0x03FD, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1e52:	37 fd       	sbrc	r19, 7
    1e54:	4c c0       	rjmp	.+152    	; 0x1eee <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1e56:	12 16       	cp	r1, r18
    1e58:	13 06       	cpc	r1, r19
    1e5a:	0c f0       	brlt	.+2      	; 0x1e5e <start_horizontal_speed_control_left+0xc4>
    1e5c:	52 c0       	rjmp	.+164    	; 0x1f02 <start_horizontal_speed_control_left+0x168>
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	97 fd       	sbrc	r25, 7
    1e64:	67 c0       	rjmp	.+206    	; 0x1f34 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1e66:	5d e5       	ldi	r21, 0x5D	; 93
    1e68:	21 3c       	cpi	r18, 0xC1	; 193
    1e6a:	35 07       	cpc	r19, r21
    1e6c:	0c f4       	brge	.+2      	; 0x1e70 <start_horizontal_speed_control_left+0xd6>
    1e6e:	49 c0       	rjmp	.+146    	; 0x1f02 <start_horizontal_speed_control_left+0x168>
    1e70:	80 ec       	ldi	r24, 0xC0	; 192
    1e72:	9d e5       	ldi	r25, 0x5D	; 93
    1e74:	90 93 fe 03 	sts	0x03FE, r25
    1e78:	80 93 fd 03 	sts	0x03FD, r24
    1e7c:	2c ed       	ldi	r18, 0xDC	; 220
    1e7e:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1e80:	22 5e       	subi	r18, 0xE2	; 226
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	31 83       	std	Z+1, r19	; 0x01
    1e86:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1e88:	42 e0       	ldi	r20, 0x02	; 2
    1e8a:	21 30       	cpi	r18, 0x01	; 1
    1e8c:	34 07       	cpc	r19, r20
    1e8e:	0c f4       	brge	.+2      	; 0x1e92 <start_horizontal_speed_control_left+0xf8>
    1e90:	48 c0       	rjmp	.+144    	; 0x1f22 <start_horizontal_speed_control_left+0x188>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1e9c:	10 92 00 04 	sts	0x0400, r1
    1ea0:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    1ea4:	10 92 44 05 	sts	0x0544, r1
    1ea8:	10 92 43 05 	sts	0x0543, r1
		delta_left_speed_prev = 0;
    1eac:	10 92 5e 05 	sts	0x055E, r1
    1eb0:	10 92 5d 05 	sts	0x055D, r1
		return;
    1eb4:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1eb6:	49 ef       	ldi	r20, 0xF9	; 249
    1eb8:	20 3c       	cpi	r18, 0xC0	; 192
    1eba:	34 07       	cpc	r19, r20
    1ebc:	a4 f4       	brge	.+40     	; 0x1ee6 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1ebe:	20 ec       	ldi	r18, 0xC0	; 192
    1ec0:	39 ef       	ldi	r19, 0xF9	; 249
    1ec2:	30 93 00 04 	sts	0x0400, r19
    1ec6:	20 93 ff 03 	sts	0x03FF, r18
    1eca:	60 e8       	ldi	r22, 0x80	; 128
    1ecc:	73 ef       	ldi	r23, 0xF3	; 243
    1ece:	9a cf       	rjmp	.-204    	; 0x1e04 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1ed0:	80 91 ef 03 	lds	r24, 0x03EF
    1ed4:	90 91 f0 03 	lds	r25, 0x03F0
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	90 93 44 05 	sts	0x0544, r25
    1ee0:	80 93 43 05 	sts	0x0543, r24
    1ee4:	78 cf       	rjmp	.-272    	; 0x1dd6 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	66 0f       	add	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	8b cf       	rjmp	.-234    	; 0x1e04 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	97 fd       	sbrc	r25, 7
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1ef6:	10 92 fe 03 	sts	0x03FE, r1
    1efa:	10 92 fd 03 	sts	0x03FD, r1
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1f02:	82 ea       	ldi	r24, 0xA2	; 162
    1f04:	20 34       	cpi	r18, 0x40	; 64
    1f06:	38 07       	cpc	r19, r24
    1f08:	dc f4       	brge	.+54     	; 0x1f40 <start_horizontal_speed_control_left+0x1a6>
    1f0a:	80 e4       	ldi	r24, 0x40	; 64
    1f0c:	92 ea       	ldi	r25, 0xA2	; 162
    1f0e:	90 93 fe 03 	sts	0x03FE, r25
    1f12:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1f16:	24 e2       	ldi	r18, 0x24	; 36
    1f18:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    1f1a:	2e 51       	subi	r18, 0x1E	; 30
    1f1c:	30 40       	sbci	r19, 0x00	; 0
    1f1e:	31 83       	std	Z+1, r19	; 0x01
    1f20:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1f22:	5e ef       	ldi	r21, 0xFE	; 254
    1f24:	20 30       	cpi	r18, 0x00	; 0
    1f26:	35 07       	cpc	r19, r21
    1f28:	24 f4       	brge	.+8      	; 0x1f32 <start_horizontal_speed_control_left+0x198>
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	9e ef       	ldi	r25, 0xFE	; 254
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1f34:	10 92 fe 03 	sts	0x03FE, r1
    1f38:	10 92 fd 03 	sts	0x03FD, r1
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1f40:	35 95       	asr	r19
    1f42:	27 95       	ror	r18
    1f44:	35 95       	asr	r19
    1f46:	27 95       	ror	r18
    1f48:	35 95       	asr	r19
    1f4a:	27 95       	ror	r18
    1f4c:	35 95       	asr	r19
    1f4e:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1f50:	31 83       	std	Z+1, r19	; 0x01
    1f52:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    1f54:	12 16       	cp	r1, r18
    1f56:	13 06       	cpc	r1, r19
    1f58:	0c f4       	brge	.+2      	; 0x1f5c <start_horizontal_speed_control_left+0x1c2>
    1f5a:	92 cf       	rjmp	.-220    	; 0x1e80 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	e1 f6       	brne	.-72     	; 0x1f1a <start_horizontal_speed_control_left+0x180>
    1f62:	08 95       	ret

00001f64 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1f64:	85 b7       	in	r24, 0x35	; 53
    1f66:	80 61       	ori	r24, 0x10	; 16
    1f68:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1f6e:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1f70:	97 ef       	ldi	r25, 0xF7	; 247
    1f72:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1f74:	90 ee       	ldi	r25, 0xE0	; 224
    1f76:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1f78:	90 ef       	ldi	r25, 0xF0	; 240
    1f7a:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1f7c:	90 eb       	ldi	r25, 0xB0	; 176
    1f7e:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1f80:	9c ef       	ldi	r25, 0xFC	; 252
    1f82:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1f88:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1f8a:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1f8c:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1f8e:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1f90:	80 91 3d 05 	lds	r24, 0x053D
    1f94:	88 23       	and	r24, r24
    1f96:	e1 f0       	breq	.+56     	; 0x1fd0 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	d1 f0       	breq	.+52     	; 0x1fd0 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	51 f1       	breq	.+84     	; 0x1ff4 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1fa0:	9f ef       	ldi	r25, 0xFF	; 255
    1fa2:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1fa6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1faa:	9f e0       	ldi	r25, 0x0F	; 15
    1fac:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    1fb0:	88 23       	and	r24, r24
    1fb2:	a9 f4       	brne	.+42     	; 0x1fde <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    1fb4:	90 91 05 01 	lds	r25, 0x0105
    1fb8:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1fbc:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    1fc6:	88 23       	and	r24, r24
    1fc8:	29 f4       	brne	.+10     	; 0x1fd4 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1fca:	10 92 0b 01 	sts	0x010B, r1
    1fce:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    1fd0:	14 ba       	out	0x14, r1	; 20
    1fd2:	e6 cf       	rjmp	.-52     	; 0x1fa0 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	c9 f3       	breq	.-14     	; 0x1fca <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	41 f0       	breq	.+16     	; 0x1fec <initPortsIO+0x88>
    1fdc:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	11 f0       	breq	.+4      	; 0x1fe6 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	59 f7       	brne	.-42     	; 0x1fbc <initPortsIO+0x58>
		PORTJ = 0x0F;
    1fe6:	90 93 05 01 	sts	0x0105, r25
    1fea:	e8 cf       	rjmp	.-48     	; 0x1fbc <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1fec:	87 ef       	ldi	r24, 0xF7	; 247
    1fee:	80 93 0b 01 	sts	0x010B, r24
    1ff2:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1ff4:	98 e0       	ldi	r25, 0x08	; 8
    1ff6:	94 bb       	out	0x14, r25	; 20
    1ff8:	d3 cf       	rjmp	.-90     	; 0x1fa0 <initPortsIO+0x3c>

00001ffa <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    1ffa:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1ffe:	10 92 bc 00 	sts	0x00BC, r1
}
    2002:	08 95       	ret

00002004 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2004:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2006:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2008:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2012:	08 95       	ret

00002014 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2014:	94 ea       	ldi	r25, 0xA4	; 164
    2016:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    201a:	90 91 bc 00 	lds	r25, 0x00BC
    201e:	97 ff       	sbrs	r25, 7
    2020:	fc cf       	rjmp	.-8      	; 0x201a <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2022:	90 91 b9 00 	lds	r25, 0x00B9
    2026:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2028:	98 30       	cpi	r25, 0x08	; 8
    202a:	21 f0       	breq	.+8      	; 0x2034 <i2c_start+0x20>
    202c:	90 31       	cpi	r25, 0x10	; 16
    202e:	11 f0       	breq	.+4      	; 0x2034 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2034:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2038:	84 e8       	ldi	r24, 0x84	; 132
    203a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    203e:	80 91 bc 00 	lds	r24, 0x00BC
    2042:	87 ff       	sbrs	r24, 7
    2044:	fc cf       	rjmp	.-8      	; 0x203e <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2046:	90 91 b9 00 	lds	r25, 0x00B9
    204a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    204c:	98 31       	cpi	r25, 0x18	; 24
    204e:	21 f0       	breq	.+8      	; 0x2058 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 34       	cpi	r25, 0x40	; 64
    2054:	19 f0       	breq	.+6      	; 0x205c <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2056:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2058:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    205a:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	08 95       	ret

00002060 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2060:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2062:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2064:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2066:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    206a:	90 91 bc 00 	lds	r25, 0x00BC
    206e:	97 ff       	sbrs	r25, 7
    2070:	fc cf       	rjmp	.-8      	; 0x206a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2072:	90 91 b9 00 	lds	r25, 0x00B9
    2076:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2078:	98 30       	cpi	r25, 0x08	; 8
    207a:	11 f0       	breq	.+4      	; 0x2080 <i2c_start_wait+0x20>
    207c:	90 31       	cpi	r25, 0x10	; 16
    207e:	99 f7       	brne	.-26     	; 0x2066 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2080:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2084:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2088:	90 91 bc 00 	lds	r25, 0x00BC
    208c:	97 ff       	sbrs	r25, 7
    208e:	fc cf       	rjmp	.-8      	; 0x2088 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2090:	90 91 b9 00 	lds	r25, 0x00B9
    2094:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2096:	90 32       	cpi	r25, 0x20	; 32
    2098:	19 f0       	breq	.+6      	; 0x20a0 <i2c_start_wait+0x40>
    209a:	98 35       	cpi	r25, 0x58	; 88
    209c:	09 f0       	breq	.+2      	; 0x20a0 <i2c_start_wait+0x40>
    209e:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    20a0:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    20a4:	90 91 bc 00 	lds	r25, 0x00BC
    20a8:	94 fd       	sbrc	r25, 4
    20aa:	fc cf       	rjmp	.-8      	; 0x20a4 <i2c_start_wait+0x44>
    20ac:	dc cf       	rjmp	.-72     	; 0x2066 <i2c_start_wait+0x6>

000020ae <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    20ae:	94 ea       	ldi	r25, 0xA4	; 164
    20b0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    20b4:	90 91 bc 00 	lds	r25, 0x00BC
    20b8:	97 ff       	sbrs	r25, 7
    20ba:	fc cf       	rjmp	.-8      	; 0x20b4 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    20bc:	90 91 b9 00 	lds	r25, 0x00B9
    20c0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    20c2:	98 30       	cpi	r25, 0x08	; 8
    20c4:	21 f0       	breq	.+8      	; 0x20ce <i2c_rep_start+0x20>
    20c6:	90 31       	cpi	r25, 0x10	; 16
    20c8:	11 f0       	breq	.+4      	; 0x20ce <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	08 95       	ret
	}

	// send device address
	TWDR = address;
    20ce:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    20d2:	84 e8       	ldi	r24, 0x84	; 132
    20d4:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    20d8:	80 91 bc 00 	lds	r24, 0x00BC
    20dc:	87 ff       	sbrs	r24, 7
    20de:	fc cf       	rjmp	.-8      	; 0x20d8 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    20e0:	90 91 b9 00 	lds	r25, 0x00B9
    20e4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    20e6:	98 31       	cpi	r25, 0x18	; 24
    20e8:	21 f0       	breq	.+8      	; 0x20f2 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 34       	cpi	r25, 0x40	; 64
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    20f0:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    20f2:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    20f4:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	08 95       	ret

000020fa <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    20fa:	84 e9       	ldi	r24, 0x94	; 148
    20fc:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2100:	80 91 bc 00 	lds	r24, 0x00BC
    2104:	84 fd       	sbrc	r24, 4
    2106:	fc cf       	rjmp	.-8      	; 0x2100 <i2c_stop+0x6>

}/* i2c_stop */
    2108:	08 95       	ret

0000210a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    210a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    210e:	84 e8       	ldi	r24, 0x84	; 132
    2110:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2114:	80 91 bc 00 	lds	r24, 0x00BC
    2118:	87 ff       	sbrs	r24, 7
    211a:	fc cf       	rjmp	.-8      	; 0x2114 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    211c:	90 91 b9 00 	lds	r25, 0x00B9
    2120:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	98 32       	cpi	r25, 0x28	; 40
    2126:	09 f0       	breq	.+2      	; 0x212a <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2128:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    212a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    212c:	08 95       	ret

0000212e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    212e:	84 ec       	ldi	r24, 0xC4	; 196
    2130:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2134:	80 91 bc 00 	lds	r24, 0x00BC
    2138:	87 ff       	sbrs	r24, 7
    213a:	fc cf       	rjmp	.-8      	; 0x2134 <i2c_readAck+0x6>

    return TWDR;
    213c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2140:	08 95       	ret

00002142 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2142:	84 e8       	ldi	r24, 0x84	; 132
    2144:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2148:	80 91 bc 00 	lds	r24, 0x00BC
    214c:	87 ff       	sbrs	r24, 7
    214e:	fc cf       	rjmp	.-8      	; 0x2148 <i2c_readNak+0x6>
	
    return TWDR;
    2150:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2154:	08 95       	ret

00002156 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2156:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    215a:	80 e1       	ldi	r24, 0x10	; 16
    215c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2160:	e0 ec       	ldi	r30, 0xC0	; 192
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	82 60       	ori	r24, 0x02	; 2
    2168:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    216a:	e1 ec       	ldi	r30, 0xC1	; 193
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 69       	ori	r24, 0x98	; 152
    2172:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2174:	e2 ec       	ldi	r30, 0xC2	; 194
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	86 60       	ori	r24, 0x06	; 6
    217c:	80 83       	st	Z, r24



}
    217e:	08 95       	ret

00002180 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    2180:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    2184:	80 e1       	ldi	r24, 0x10	; 16
    2186:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    218a:	e8 ec       	ldi	r30, 0xC8	; 200
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	82 60       	ori	r24, 0x02	; 2
    2192:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    2194:	e9 ec       	ldi	r30, 0xC9	; 201
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	88 61       	ori	r24, 0x18	; 24
    219c:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    219e:	ea ec       	ldi	r30, 0xCA	; 202
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	86 60       	ori	r24, 0x06	; 6
    21a6:	80 83       	st	Z, r24

}
    21a8:	08 95       	ret

000021aa <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    21aa:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    21ae:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    21b2:	10 92 c2 00 	sts	0x00C2, r1

}
    21b6:	08 95       	ret

000021b8 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    21b8:	90 91 c0 00 	lds	r25, 0x00C0
    21bc:	95 ff       	sbrs	r25, 5
    21be:	fc cf       	rjmp	.-8      	; 0x21b8 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    21c0:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    21c4:	66 23       	and	r22, r22
    21c6:	21 f0       	breq	.+8      	; 0x21d0 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    21c8:	80 91 c0 00 	lds	r24, 0x00C0
    21cc:	86 ff       	sbrs	r24, 6
    21ce:	fc cf       	rjmp	.-8      	; 0x21c8 <usart0Transmit+0x10>
    21d0:	08 95       	ret

000021d2 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    21d2:	90 91 c8 00 	lds	r25, 0x00C8
    21d6:	95 ff       	sbrs	r25, 5
    21d8:	fc cf       	rjmp	.-8      	; 0x21d2 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    21da:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    21de:	66 23       	and	r22, r22
    21e0:	21 f0       	breq	.+8      	; 0x21ea <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    21e2:	80 91 c8 00 	lds	r24, 0x00C8
    21e6:	86 ff       	sbrs	r24, 6
    21e8:	fc cf       	rjmp	.-8      	; 0x21e2 <usart1Transmit+0x10>
    21ea:	08 95       	ret

000021ec <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    21ec:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    21f0:	80 95       	com	r24
	} else {
		return 1;
	}

}
    21f2:	88 1f       	adc	r24, r24
    21f4:	88 27       	eor	r24, r24
    21f6:	88 1f       	adc	r24, r24
    21f8:	08 95       	ret

000021fa <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    21fa:	87 e9       	ldi	r24, 0x97	; 151
    21fc:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    21fe:	20 91 c0 00 	lds	r18, 0x00C0
    2202:	27 fd       	sbrc	r18, 7
    2204:	07 c0       	rjmp	.+14     	; 0x2214 <__stack+0x15>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2206:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    2208:	d1 f7       	brne	.-12     	; 0x21fe <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	80 93 11 04 	sts	0x0411, r24
			return 0;				// timeout
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2214:	80 91 c6 00 	lds	r24, 0x00C6

}
    2218:	08 95       	ret

0000221a <__vector_25>:

// The following usart0 rx isr has to be used with aseba.
ISR(USART0_RX_vect) {
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	0f 92       	push	r0
    2222:	0b b6       	in	r0, 0x3b	; 59
    2224:	0f 92       	push	r0
    2226:	11 24       	eor	r1, r1
    2228:	2f 93       	push	r18
    222a:	8f 93       	push	r24
    222c:	9f 93       	push	r25
    222e:	ef 93       	push	r30
    2230:	ff 93       	push	r31
	byteCount++;
    2232:	80 91 12 04 	lds	r24, 0x0412
    2236:	90 91 13 04 	lds	r25, 0x0413
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	90 93 13 04 	sts	0x0413, r25
    2240:	80 93 12 04 	sts	0x0412, r24
	if(byteCount <= UART_BUFF_SIZE) {
    2244:	21 e0       	ldi	r18, 0x01	; 1
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	92 07       	cpc	r25, r18
    224a:	60 f4       	brcc	.+24     	; 0x2264 <__vector_25+0x4a>
		uartBuff[nextByteIndex] = UDR0;
    224c:	80 91 14 05 	lds	r24, 0x0514
    2250:	90 91 c6 00 	lds	r25, 0x00C6
    2254:	e8 2f       	mov	r30, r24
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	ec 5e       	subi	r30, 0xEC	; 236
    225a:	fb 4f       	sbci	r31, 0xFB	; 251
    225c:	90 83       	st	Z, r25
		nextByteIndex++;
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	80 93 14 05 	sts	0x0514, r24
		if(nextByteIndex==UART_BUFF_SIZE) {
			nextByteIndex=0;
		}
	}
}
    2264:	ff 91       	pop	r31
    2266:	ef 91       	pop	r30
    2268:	9f 91       	pop	r25
    226a:	8f 91       	pop	r24
    226c:	2f 91       	pop	r18
    226e:	0f 90       	pop	r0
    2270:	0b be       	out	0x3b, r0	; 59
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    227c:	86 b1       	in	r24, 0x06	; 6
    227e:	66 b1       	in	r22, 0x06	; 6
    2280:	26 b1       	in	r18, 0x06	; 6
    2282:	46 b1       	in	r20, 0x06	; 6
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	28 70       	andi	r18, 0x08	; 8
    2288:	30 70       	andi	r19, 0x00	; 0
    228a:	35 95       	asr	r19
    228c:	27 95       	ror	r18
    228e:	35 95       	asr	r19
    2290:	27 95       	ror	r18
    2292:	35 95       	asr	r19
    2294:	27 95       	ror	r18
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	64 70       	andi	r22, 0x04	; 4
    229e:	70 70       	andi	r23, 0x00	; 0
    22a0:	75 95       	asr	r23
    22a2:	67 95       	ror	r22
    22a4:	75 95       	asr	r23
    22a6:	67 95       	ror	r22
    22a8:	26 0f       	add	r18, r22
    22aa:	37 1f       	adc	r19, r23
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	42 70       	andi	r20, 0x02	; 2
    22b4:	50 70       	andi	r21, 0x00	; 0
    22b6:	55 95       	asr	r21
    22b8:	47 95       	ror	r20
    22ba:	24 0f       	add	r18, r20
    22bc:	35 1f       	adc	r19, r21
    22be:	22 0f       	add	r18, r18
    22c0:	81 70       	andi	r24, 0x01	; 1
}
    22c2:	82 0f       	add	r24, r18
    22c4:	08 95       	ret

000022c6 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    22c6:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    22c8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    22ca:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    22cc:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    22d0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    22d4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    22d8:	8e ef       	ldi	r24, 0xFE	; 254
    22da:	9f e0       	ldi	r25, 0x0F	; 15
    22dc:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__eerd_word_m2560>
    22e0:	90 93 0c 04 	sts	0x040C, r25
    22e4:	80 93 0b 04 	sts	0x040B, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    22e8:	8d ef       	ldi	r24, 0xFD	; 253
    22ea:	9f e0       	ldi	r25, 0x0F	; 15
    22ec:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__eerd_byte_m2560>
    22f0:	80 93 42 05 	sts	0x0542, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    22f4:	98 2f       	mov	r25, r24
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	9e 3f       	cpi	r25, 0xFE	; 254
    22fa:	d8 f5       	brcc	.+118    	; 0x2372 <initPeripherals+0xac>
		OSCCAL = currentOsccal;
    22fc:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2300:	80 91 0b 04 	lds	r24, 0x040B
    2304:	90 91 0c 04 	lds	r25, 0x040C
    2308:	9c 01       	movw	r18, r24
    230a:	21 58       	subi	r18, 0x81	; 129
    230c:	3c 40       	sbci	r19, 0x0C	; 12
    230e:	23 30       	cpi	r18, 0x03	; 3
    2310:	31 05       	cpc	r19, r1
    2312:	f8 f4       	brcc	.+62     	; 0x2352 <initPeripherals+0x8c>
		hardwareRevision = HW_REV_3_0;
    2314:	10 92 3d 05 	sts	0x053D, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2318:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <initPortsIO>
	initAdc();
    231c:	0e 94 45 12 	call	0x248a	; 0x248a <initAdc>
	initMotors();
    2320:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <initMotors>
	initRGBleds();
    2324:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <initRGBleds>
	initSPI();
    2328:	0e 94 03 02 	call	0x406	; 0x406 <initSPI>
	mirf_init();
    232c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <mirf_init>
	if(spiCommError==0) {
    2330:	80 91 0e 04 	lds	r24, 0x040E
    2334:	88 23       	and	r24, r24
    2336:	29 f4       	brne	.+10     	; 0x2342 <initPeripherals+0x7c>
		rfFlags |= 1;
    2338:	80 91 0d 04 	lds	r24, 0x040D
    233c:	81 60       	ori	r24, 0x01	; 1
    233e:	80 93 0d 04 	sts	0x040D, r24
	}
	initUsart0();
    2342:	0e 94 ab 10 	call	0x2156	; 0x2156 <initUsart0>
	initAccelerometer();
    2346:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <initAccelerometer>
	init_ir_remote_control();
    234a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <init_ir_remote_control>

	sei();			// enable global interrupts
    234e:	78 94       	sei

	
}
    2350:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2352:	2c e0       	ldi	r18, 0x0C	; 12
    2354:	80 38       	cpi	r24, 0x80	; 128
    2356:	92 07       	cpc	r25, r18
    2358:	21 f4       	brne	.+8      	; 0x2362 <initPeripherals+0x9c>
		hardwareRevision = HW_REV_3_0_1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	80 93 3d 05 	sts	0x053D, r24
    2360:	db cf       	rjmp	.-74     	; 0x2318 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    2362:	2c e0       	ldi	r18, 0x0C	; 12
    2364:	84 38       	cpi	r24, 0x84	; 132
    2366:	92 07       	cpc	r25, r18
    2368:	b8 f2       	brcs	.-82     	; 0x2318 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	80 93 3d 05 	sts	0x053D, r24
    2370:	d3 cf       	rjmp	.-90     	; 0x2318 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    2372:	60 91 66 00 	lds	r22, 0x0066
    2376:	60 93 42 05 	sts	0x0542, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    237a:	8d ef       	ldi	r24, 0xFD	; 253
    237c:	9f e0       	ldi	r25, 0x0F	; 15
    237e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__eewr_byte_m2560>
    2382:	be cf       	rjmp	.-132    	; 0x2300 <initPeripherals+0x3a>

00002384 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2384:	1f 92       	push	r1
    2386:	0f 92       	push	r0
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	0f 92       	push	r0
    238c:	11 24       	eor	r1, r1

}
    238e:	0f 90       	pop	r0
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	0f 90       	pop	r0
    2394:	1f 90       	pop	r1
    2396:	18 95       	reti

00002398 <sleep>:

void sleep(unsigned char seconds) {
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    239c:	9e e1       	ldi	r25, 0x1E	; 30
    239e:	89 9f       	mul	r24, r25
    23a0:	e0 01       	movw	r28, r0
    23a2:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    23a4:	80 91 68 00 	lds	r24, 0x0068
    23a8:	8d 7f       	andi	r24, 0xFD	; 253
    23aa:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    23ae:	80 91 6c 00 	lds	r24, 0x006C
    23b2:	8f 77       	andi	r24, 0x7F	; 127
    23b4:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    23b8:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    23ba:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    23be:	80 91 7a 00 	lds	r24, 0x007A
    23c2:	80 61       	ori	r24, 0x10	; 16
    23c4:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    23c8:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    23cc:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    23d0:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    23d4:	88 b3       	in	r24, 0x18	; 24
    23d6:	87 60       	ori	r24, 0x07	; 7
    23d8:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    23da:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    23de:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    23e2:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    23e6:	89 b3       	in	r24, 0x19	; 25
    23e8:	87 60       	ori	r24, 0x07	; 7
    23ea:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    23ec:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    23f0:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    23f4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <closeUsart>
	closeSPI();
    23f8:	0e 94 0f 02 	call	0x41e	; 0x41e <closeSPI>
	i2c_close();
    23fc:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <i2c_close>

	// set port pins
	initPortsIO();
    2400:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2404:	83 b7       	in	r24, 0x33	; 51
    2406:	8f 60       	ori	r24, 0x0F	; 15
    2408:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2410:	80 91 b0 00 	lds	r24, 0x00B0
    2414:	8d 7f       	andi	r24, 0xFD	; 253
    2416:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    241a:	80 91 b1 00 	lds	r24, 0x00B1
    241e:	87 60       	ori	r24, 0x07	; 7
    2420:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    2424:	20 97       	sbiw	r28, 0x00	; 0
    2426:	19 f0       	breq	.+6      	; 0x242e <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2428:	88 95       	sleep
		pause--;
    242a:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    242c:	e9 f7       	brne	.-6      	; 0x2428 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    242e:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2430:	80 91 b1 00 	lds	r24, 0x00B1
    2434:	88 7f       	andi	r24, 0xF8	; 248
    2436:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    243a:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    243e:	80 91 b0 00 	lds	r24, 0x00B0
    2442:	82 60       	ori	r24, 0x02	; 2
    2444:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    244e:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2452:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2456:	10 92 f4 03 	sts	0x03F4, r1
    245a:	10 92 f3 03 	sts	0x03F3, r1
	pwm_left = 0;
    245e:	10 92 f6 03 	sts	0x03F6, r1
    2462:	10 92 f5 03 	sts	0x03F5, r1
	initPeripherals();
    2466:	0e 94 63 11 	call	0x22c6	; 0x22c6 <initPeripherals>

}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    2470:	60 91 36 05 	lds	r22, 0x0536
    2474:	70 91 37 05 	lds	r23, 0x0537
	return clockTick;
}
    2478:	80 91 38 05 	lds	r24, 0x0538
    247c:	90 91 39 05 	lds	r25, 0x0539
    2480:	08 95       	ret

00002482 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	80 93 c5 03 	sts	0x03C5, r24
}
    2488:	08 95       	ret

0000248a <initAdc>:

#include "adc.h"


void initAdc(void) {
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    248e:	ea e7       	ldi	r30, 0x7A	; 122
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	10 82       	st	Z, r1
	ADCSRB = 0;
    2494:	ab e7       	ldi	r26, 0x7B	; 123
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	1c 92       	st	X, r1
	ADMUX = 0;
    249a:	cc e7       	ldi	r28, 0x7C	; 124
    249c:	d0 e0       	ldi	r29, 0x00	; 0
    249e:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    24a0:	80 81       	ld	r24, Z
    24a2:	86 60       	ori	r24, 0x06	; 6
    24a4:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    24a6:	88 81       	ld	r24, Y
    24a8:	80 64       	ori	r24, 0x40	; 64
    24aa:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    24ac:	80 81       	ld	r24, Z
    24ae:	80 62       	ori	r24, 0x20	; 32
    24b0:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    24b2:	8c 91       	ld	r24, X
    24b4:	88 7f       	andi	r24, 0xF8	; 248
    24b6:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    24b8:	80 81       	ld	r24, Z
    24ba:	88 60       	ori	r24, 0x08	; 8
    24bc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    24be:	80 81       	ld	r24, Z
    24c0:	80 68       	ori	r24, 0x80	; 128
    24c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    24c4:	80 81       	ld	r24, Z
    24c6:	80 64       	ori	r24, 0x40	; 64
    24c8:	80 83       	st	Z, r24

}
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	08 95       	ret

000024d0 <__vector_29>:

ISR(ADC_vect) {
    24d0:	1f 92       	push	r1
    24d2:	0f 92       	push	r0
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	0f 92       	push	r0
    24d8:	0b b6       	in	r0, 0x3b	; 59
    24da:	0f 92       	push	r0
    24dc:	11 24       	eor	r1, r1
    24de:	2f 93       	push	r18
    24e0:	3f 93       	push	r19
    24e2:	4f 93       	push	r20
    24e4:	5f 93       	push	r21
    24e6:	6f 93       	push	r22
    24e8:	8f 93       	push	r24
    24ea:	9f 93       	push	r25
    24ec:	af 93       	push	r26
    24ee:	bf 93       	push	r27
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    24f4:	80 91 36 05 	lds	r24, 0x0536
    24f8:	90 91 37 05 	lds	r25, 0x0537
    24fc:	a0 91 38 05 	lds	r26, 0x0538
    2500:	b0 91 39 05 	lds	r27, 0x0539
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	a1 1d       	adc	r26, r1
    2508:	b1 1d       	adc	r27, r1
    250a:	80 93 36 05 	sts	0x0536, r24
    250e:	90 93 37 05 	sts	0x0537, r25
    2512:	a0 93 38 05 	sts	0x0538, r26
    2516:	b0 93 39 05 	sts	0x0539, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    251a:	20 91 78 00 	lds	r18, 0x0078
    251e:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2520:	40 91 79 00 	lds	r20, 0x0079
    2524:	94 2f       	mov	r25, r20
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	28 2b       	or	r18, r24
    252a:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    252c:	80 91 bf 03 	lds	r24, 0x03BF
    2530:	82 30       	cpi	r24, 0x02	; 2
    2532:	09 f4       	brne	.+2      	; 0x2536 <__vector_29+0x66>
    2534:	ac c1       	rjmp	.+856    	; 0x288e <__vector_29+0x3be>
    2536:	83 30       	cpi	r24, 0x03	; 3
    2538:	08 f4       	brcc	.+2      	; 0x253c <__vector_29+0x6c>
    253a:	45 c0       	rjmp	.+138    	; 0x25c6 <__vector_29+0xf6>
    253c:	83 30       	cpi	r24, 0x03	; 3
    253e:	09 f4       	brne	.+2      	; 0x2542 <__vector_29+0x72>
    2540:	c9 c1       	rjmp	.+914    	; 0x28d4 <__vector_29+0x404>
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	09 f4       	brne	.+2      	; 0x2548 <__vector_29+0x78>
    2546:	68 c1       	rjmp	.+720    	; 0x2818 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2548:	80 91 c0 03 	lds	r24, 0x03C0
    254c:	82 30       	cpi	r24, 0x02	; 2
    254e:	09 f4       	brne	.+2      	; 0x2552 <__vector_29+0x82>
    2550:	4f c1       	rjmp	.+670    	; 0x27f0 <__vector_29+0x320>
    2552:	83 30       	cpi	r24, 0x03	; 3
    2554:	08 f0       	brcs	.+2      	; 0x2558 <__vector_29+0x88>
    2556:	cd c0       	rjmp	.+410    	; 0x26f2 <__vector_29+0x222>
    2558:	88 23       	and	r24, r24
    255a:	09 f0       	breq	.+2      	; 0x255e <__vector_29+0x8e>
    255c:	24 c1       	rjmp	.+584    	; 0x27a6 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    255e:	80 91 2a 03 	lds	r24, 0x032A
    2562:	86 95       	lsr	r24
    2564:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2568:	80 91 c1 03 	lds	r24, 0x03C1
    256c:	88 23       	and	r24, r24
    256e:	09 f0       	breq	.+2      	; 0x2572 <__vector_29+0xa2>
    2570:	e1 c1       	rjmp	.+962    	; 0x2934 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    257e:	90 91 29 03 	lds	r25, 0x0329
    2582:	98 30       	cpi	r25, 0x08	; 8
    2584:	08 f0       	brcs	.+2      	; 0x2588 <__vector_29+0xb8>
    2586:	ed c0       	rjmp	.+474    	; 0x2762 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    2588:	90 91 7b 00 	lds	r25, 0x007B
    258c:	97 7f       	andi	r25, 0xF7	; 247
    258e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2592:	90 91 29 03 	lds	r25, 0x0329
    2596:	90 5c       	subi	r25, 0xC0	; 192
    2598:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	09 f4       	brne	.+2      	; 0x25a2 <__vector_29+0xd2>
    25a0:	ed c0       	rjmp	.+474    	; 0x277c <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    25a2:	ff 91       	pop	r31
    25a4:	ef 91       	pop	r30
    25a6:	bf 91       	pop	r27
    25a8:	af 91       	pop	r26
    25aa:	9f 91       	pop	r25
    25ac:	8f 91       	pop	r24
    25ae:	6f 91       	pop	r22
    25b0:	5f 91       	pop	r21
    25b2:	4f 91       	pop	r20
    25b4:	3f 91       	pop	r19
    25b6:	2f 91       	pop	r18
    25b8:	0f 90       	pop	r0
    25ba:	0b be       	out	0x3b, r0	; 59
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	0f 90       	pop	r0
    25c2:	1f 90       	pop	r1
    25c4:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    25c6:	88 23       	and	r24, r24
    25c8:	09 f0       	breq	.+2      	; 0x25cc <__vector_29+0xfc>
    25ca:	fe c0       	rjmp	.+508    	; 0x27c8 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    25cc:	60 91 2a 03 	lds	r22, 0x032A
    25d0:	6e 30       	cpi	r22, 0x0E	; 14
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <__vector_29+0x106>
    25d4:	d0 c1       	rjmp	.+928    	; 0x2976 <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    25d6:	46 2f       	mov	r20, r22
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	fa 01       	movw	r30, r20
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	e1 5d       	subi	r30, 0xD1	; 209
    25e2:	fc 4f       	sbci	r31, 0xFC	; 252
    25e4:	31 83       	std	Z+1, r19	; 0x01
    25e6:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    25e8:	40 ff       	sbrs	r20, 0
    25ea:	77 c0       	rjmp	.+238    	; 0x26da <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    25ec:	fa 01       	movw	r30, r20
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	e3 5d       	subi	r30, 0xD3	; 211
    25f4:	fc 4f       	sbci	r31, 0xFC	; 252
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	fa 01       	movw	r30, r20
    25fc:	ee 0f       	add	r30, r30
    25fe:	ff 1f       	adc	r31, r31
    2600:	e1 5d       	subi	r30, 0xD1	; 209
    2602:	fc 4f       	sbci	r31, 0xFC	; 252
    2604:	40 81       	ld	r20, Z
    2606:	51 81       	ldd	r21, Z+1	; 0x01
    2608:	26 2f       	mov	r18, r22
    260a:	26 95       	lsr	r18
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	84 1b       	sub	r24, r20
    2610:	95 0b       	sbc	r25, r21
    2612:	22 0f       	add	r18, r18
    2614:	33 1f       	adc	r19, r19
    2616:	f9 01       	movw	r30, r18
    2618:	e9 58       	subi	r30, 0x89	; 137
    261a:	fc 4f       	sbci	r31, 0xFC	; 252
    261c:	40 81       	ld	r20, Z
    261e:	51 81       	ldd	r21, Z+1	; 0x01
    2620:	84 1b       	sub	r24, r20
    2622:	95 0b       	sbc	r25, r21
    2624:	f9 01       	movw	r30, r18
    2626:	e1 5a       	subi	r30, 0xA1	; 161
    2628:	fc 4f       	sbci	r31, 0xFC	; 252
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    262e:	97 fd       	sbrc	r25, 7
    2630:	bd c1       	rjmp	.+890    	; 0x29ac <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2632:	44 e0       	ldi	r20, 0x04	; 4
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	94 07       	cpc	r25, r20
    2638:	24 f0       	brlt	.+8      	; 0x2642 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	94 e0       	ldi	r25, 0x04	; 4
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2642:	60 31       	cpi	r22, 0x10	; 16
    2644:	48 f4       	brcc	.+18     	; 0x2658 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2646:	8c 33       	cpi	r24, 0x3C	; 60
    2648:	91 05       	cpc	r25, r1
    264a:	0c f0       	brlt	.+2      	; 0x264e <__vector_29+0x17e>
    264c:	b4 c1       	rjmp	.+872    	; 0x29b6 <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    264e:	29 53       	subi	r18, 0x39	; 57
    2650:	3c 4f       	sbci	r19, 0xFC	; 252
    2652:	f9 01       	movw	r30, r18
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2658:	80 91 3f 05 	lds	r24, 0x053F
    265c:	88 23       	and	r24, r24
    265e:	09 f4       	brne	.+2      	; 0x2662 <__vector_29+0x192>
    2660:	75 c1       	rjmp	.+746    	; 0x294c <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2662:	80 91 6f 03 	lds	r24, 0x036F
    2666:	90 91 70 03 	lds	r25, 0x0370
    266a:	f1 e0       	ldi	r31, 0x01	; 1
    266c:	84 3a       	cpi	r24, 0xA4	; 164
    266e:	9f 07       	cpc	r25, r31
    2670:	cc f0       	brlt	.+50     	; 0x26a4 <__vector_29+0x1d4>
    2672:	80 91 71 03 	lds	r24, 0x0371
    2676:	90 91 72 03 	lds	r25, 0x0372
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	84 3a       	cpi	r24, 0xA4	; 164
    267e:	92 07       	cpc	r25, r18
    2680:	8c f0       	brlt	.+34     	; 0x26a4 <__vector_29+0x1d4>
    2682:	80 91 73 03 	lds	r24, 0x0373
    2686:	90 91 74 03 	lds	r25, 0x0374
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	84 3a       	cpi	r24, 0xA4	; 164
    268e:	94 07       	cpc	r25, r20
    2690:	4c f0       	brlt	.+18     	; 0x26a4 <__vector_29+0x1d4>
    2692:	80 91 75 03 	lds	r24, 0x0375
    2696:	90 91 76 03 	lds	r25, 0x0376
    269a:	e1 e0       	ldi	r30, 0x01	; 1
    269c:	84 3a       	cpi	r24, 0xA4	; 164
    269e:	9e 07       	cpc	r25, r30
    26a0:	0c f0       	brlt	.+2      	; 0x26a4 <__vector_29+0x1d4>
    26a2:	54 c1       	rjmp	.+680    	; 0x294c <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 93 40 05 	sts	0x0540, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    26aa:	10 92 f6 03 	sts	0x03F6, r1
    26ae:	10 92 f5 03 	sts	0x03F5, r1
						OCR4A = 0;
    26b2:	10 92 a9 00 	sts	0x00A9, r1
    26b6:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    26ba:	10 92 ab 00 	sts	0x00AB, r1
    26be:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    26c2:	10 92 f4 03 	sts	0x03F4, r1
    26c6:	10 92 f3 03 	sts	0x03F3, r1
						OCR3A = 0;
    26ca:	10 92 99 00 	sts	0x0099, r1
    26ce:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    26d2:	10 92 9b 00 	sts	0x009B, r1
    26d6:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    26da:	6f 5f       	subi	r22, 0xFF	; 255
    26dc:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    26e0:	68 31       	cpi	r22, 0x18	; 24
    26e2:	08 f4       	brcc	.+2      	; 0x26e6 <__vector_29+0x216>
    26e4:	31 cf       	rjmp	.-414    	; 0x2548 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    26e6:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 c6 03 	sts	0x03C6, r24
    26f0:	2b cf       	rjmp	.-426    	; 0x2548 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <__vector_29+0x228>
    26f6:	b7 c0       	rjmp	.+366    	; 0x2866 <__vector_29+0x396>
    26f8:	84 30       	cpi	r24, 0x04	; 4
    26fa:	09 f0       	breq	.+2      	; 0x26fe <__vector_29+0x22e>
    26fc:	40 cf       	rjmp	.-384    	; 0x257e <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    26fe:	90 91 2c 03 	lds	r25, 0x032C
    2702:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    2706:	90 91 2d 03 	lds	r25, 0x032D
    270a:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    270e:	90 91 c2 03 	lds	r25, 0x03C2
    2712:	99 23       	and	r25, r25
    2714:	09 f0       	breq	.+2      	; 0x2718 <__vector_29+0x248>
    2716:	08 c1       	rjmp	.+528    	; 0x2928 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2718:	83 e0       	ldi	r24, 0x03	; 3
    271a:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    271e:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    2722:	60 91 2a 03 	lds	r22, 0x032A
    2726:	6e 30       	cpi	r22, 0x0E	; 14
    2728:	09 f4       	brne	.+2      	; 0x272c <__vector_29+0x25c>
    272a:	1f c1       	rjmp	.+574    	; 0x296a <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    272c:	86 2f       	mov	r24, r22
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	60 ff       	sbrs	r22, 0
    2732:	f1 c0       	rjmp	.+482    	; 0x2916 <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2734:	60 31       	cpi	r22, 0x10	; 16
    2736:	08 f4       	brcc	.+2      	; 0x273a <__vector_29+0x26a>
    2738:	0c c1       	rjmp	.+536    	; 0x2952 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    273a:	20 91 3d 05 	lds	r18, 0x053D
    273e:	22 23       	and	r18, r18
    2740:	09 f0       	breq	.+2      	; 0x2744 <__vector_29+0x274>
    2742:	d5 c0       	rjmp	.+426    	; 0x28ee <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2744:	40 97       	sbiw	r24, 0x10	; 16
    2746:	95 95       	asr	r25
    2748:	87 95       	ror	r24
    274a:	21 e0       	ldi	r18, 0x01	; 1
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <__vector_29+0x284>
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	8a 95       	dec	r24
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <__vector_29+0x280>
    2758:	20 93 05 01 	sts	0x0105, r18
    275c:	80 91 c0 03 	lds	r24, 0x03C0
    2760:	0e cf       	rjmp	.-484    	; 0x257e <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2762:	90 91 7b 00 	lds	r25, 0x007B
    2766:	98 60       	ori	r25, 0x08	; 8
    2768:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    276c:	90 91 29 03 	lds	r25, 0x0329
    2770:	98 5c       	subi	r25, 0xC8	; 200
    2772:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2776:	82 30       	cpi	r24, 0x02	; 2
    2778:	09 f0       	breq	.+2      	; 0x277c <__vector_29+0x2ac>
    277a:	13 cf       	rjmp	.-474    	; 0x25a2 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    277c:	20 91 3d 05 	lds	r18, 0x053D
    2780:	22 23       	and	r18, r18
    2782:	51 f0       	breq	.+20     	; 0x2798 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2784:	21 30       	cpi	r18, 0x01	; 1
    2786:	19 f0       	breq	.+6      	; 0x278e <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2788:	22 30       	cpi	r18, 0x02	; 2
    278a:	09 f0       	breq	.+2      	; 0x278e <__vector_29+0x2be>
    278c:	0a cf       	rjmp	.-492    	; 0x25a2 <__vector_29+0xd2>
			PORTJ = 0xFF;
    278e:	8f ef       	ldi	r24, 0xFF	; 255
    2790:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2794:	12 b8       	out	0x02, r1	; 2
    2796:	05 cf       	rjmp	.-502    	; 0x25a2 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    2798:	80 91 05 01 	lds	r24, 0x0105
    279c:	80 7f       	andi	r24, 0xF0	; 240
    279e:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    27a2:	12 b8       	out	0x02, r1	; 2
    27a4:	fe ce       	rjmp	.-516    	; 0x25a2 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	09 f0       	breq	.+2      	; 0x27ac <__vector_29+0x2dc>
    27aa:	e9 ce       	rjmp	.-558    	; 0x257e <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    27ac:	80 91 2b 03 	lds	r24, 0x032B
    27b0:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    27b4:	80 91 2e 03 	lds	r24, 0x032E
    27b8:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    27bc:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	80 93 c0 03 	sts	0x03C0, r24
			break;
    27c6:	db ce       	rjmp	.-586    	; 0x257e <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	09 f0       	breq	.+2      	; 0x27ce <__vector_29+0x2fe>
    27cc:	bd ce       	rjmp	.-646    	; 0x2548 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    27ce:	80 91 e1 03 	lds	r24, 0x03E1
    27d2:	90 91 e2 03 	lds	r25, 0x03E2
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    27da:	96 95       	lsr	r25
    27dc:	87 95       	ror	r24
    27de:	90 93 e2 03 	sts	0x03E2, r25
    27e2:	80 93 e1 03 	sts	0x03E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    27e6:	80 91 c0 03 	lds	r24, 0x03C0
    27ea:	82 30       	cpi	r24, 0x02	; 2
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <__vector_29+0x320>
    27ee:	b1 ce       	rjmp	.-670    	; 0x2552 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    27f0:	80 91 2c 03 	lds	r24, 0x032C
    27f4:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    27f8:	80 91 2d 03 	lds	r24, 0x032D
    27fc:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2800:	80 91 c2 03 	lds	r24, 0x03C2
    2804:	88 23       	and	r24, r24
    2806:	09 f0       	breq	.+2      	; 0x280a <__vector_29+0x33a>
    2808:	9b c0       	rjmp	.+310    	; 0x2940 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2816:	b3 ce       	rjmp	.-666    	; 0x257e <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2818:	80 91 0a 02 	lds	r24, 0x020A
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <__vector_29+0x352>
    2820:	93 ce       	rjmp	.-730    	; 0x2548 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2822:	90 91 00 01 	lds	r25, 0x0100
    2826:	93 fd       	sbrc	r25, 3
    2828:	8f ce       	rjmp	.-738    	; 0x2548 <__vector_29+0x78>
    282a:	90 91 00 01 	lds	r25, 0x0100
    282e:	94 fd       	sbrc	r25, 4
    2830:	8b ce       	rjmp	.-746    	; 0x2548 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2832:	48 2f       	mov	r20, r24
    2834:	4f 5f       	subi	r20, 0xFF	; 255
    2836:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    283a:	45 30       	cpi	r20, 0x05	; 5
    283c:	08 f4       	brcc	.+2      	; 0x2840 <__vector_29+0x370>
    283e:	84 ce       	rjmp	.-760    	; 0x2548 <__vector_29+0x78>
					left_vel_sum += value;
    2840:	80 91 eb 03 	lds	r24, 0x03EB
    2844:	90 91 ec 03 	lds	r25, 0x03EC
    2848:	82 0f       	add	r24, r18
    284a:	93 1f       	adc	r25, r19
    284c:	90 93 ec 03 	sts	0x03EC, r25
    2850:	80 93 eb 03 	sts	0x03EB, r24
					if(firstSampleLeft==8) {
    2854:	48 30       	cpi	r20, 0x08	; 8
    2856:	09 f0       	breq	.+2      	; 0x285a <__vector_29+0x38a>
    2858:	77 ce       	rjmp	.-786    	; 0x2548 <__vector_29+0x78>
						firstSampleLeft = 0;
    285a:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	80 93 07 02 	sts	0x0207, r24
    2864:	71 ce       	rjmp	.-798    	; 0x2548 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2866:	80 91 2b 03 	lds	r24, 0x032B
    286a:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    286e:	80 91 2e 03 	lds	r24, 0x032E
    2872:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    2876:	80 91 c1 03 	lds	r24, 0x03C1
    287a:	88 23       	and	r24, r24
    287c:	09 f0       	breq	.+2      	; 0x2880 <__vector_29+0x3b0>
    287e:	4e c0       	rjmp	.+156    	; 0x291c <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    2886:	84 e0       	ldi	r24, 0x04	; 4
    2888:	80 93 c0 03 	sts	0x03C0, r24
			break;
    288c:	78 ce       	rjmp	.-784    	; 0x257e <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    288e:	80 91 09 02 	lds	r24, 0x0209
    2892:	88 23       	and	r24, r24
    2894:	09 f4       	brne	.+2      	; 0x2898 <__vector_29+0x3c8>
    2896:	58 ce       	rjmp	.-848    	; 0x2548 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2898:	63 99       	sbic	0x0c, 3	; 12
    289a:	56 ce       	rjmp	.-852    	; 0x2548 <__vector_29+0x78>
    289c:	64 99       	sbic	0x0c, 4	; 12
    289e:	54 ce       	rjmp	.-856    	; 0x2548 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    28a0:	48 2f       	mov	r20, r24
    28a2:	4f 5f       	subi	r20, 0xFF	; 255
    28a4:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    28a8:	45 30       	cpi	r20, 0x05	; 5
    28aa:	08 f4       	brcc	.+2      	; 0x28ae <__vector_29+0x3de>
    28ac:	4d ce       	rjmp	.-870    	; 0x2548 <__vector_29+0x78>
					right_vel_sum += value;
    28ae:	80 91 ed 03 	lds	r24, 0x03ED
    28b2:	90 91 ee 03 	lds	r25, 0x03EE
    28b6:	82 0f       	add	r24, r18
    28b8:	93 1f       	adc	r25, r19
    28ba:	90 93 ee 03 	sts	0x03EE, r25
    28be:	80 93 ed 03 	sts	0x03ED, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    28c2:	48 30       	cpi	r20, 0x08	; 8
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <__vector_29+0x3f8>
    28c6:	40 ce       	rjmp	.-896    	; 0x2548 <__vector_29+0x78>
						firstSampleRight = 0;
    28c8:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	80 93 08 02 	sts	0x0208, r24
    28d2:	3a ce       	rjmp	.-908    	; 0x2548 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    28d4:	80 91 df 03 	lds	r24, 0x03DF
    28d8:	90 91 e0 03 	lds	r25, 0x03E0
    28dc:	82 0f       	add	r24, r18
    28de:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    28e0:	96 95       	lsr	r25
    28e2:	87 95       	ror	r24
    28e4:	90 93 e0 03 	sts	0x03E0, r25
    28e8:	80 93 df 03 	sts	0x03DF, r24
			break;
    28ec:	2d ce       	rjmp	.-934    	; 0x2548 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    28ee:	21 30       	cpi	r18, 0x01	; 1
    28f0:	11 f0       	breq	.+4      	; 0x28f6 <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    28f2:	22 30       	cpi	r18, 0x02	; 2
    28f4:	81 f4       	brne	.+32     	; 0x2916 <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    28f6:	40 91 05 01 	lds	r20, 0x0105
    28fa:	40 97       	sbiw	r24, 0x10	; 16
    28fc:	95 95       	asr	r25
    28fe:	87 95       	ror	r24
    2900:	21 e0       	ldi	r18, 0x01	; 1
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	02 c0       	rjmp	.+4      	; 0x290a <__vector_29+0x43a>
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	8a 95       	dec	r24
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <__vector_29+0x436>
    290e:	20 95       	com	r18
    2910:	24 23       	and	r18, r20
    2912:	20 93 05 01 	sts	0x0105, r18
    2916:	80 91 c0 03 	lds	r24, 0x03C0
    291a:	31 ce       	rjmp	.-926    	; 0x257e <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	d1 f1       	breq	.+116    	; 0x2994 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2920:	85 e0       	ldi	r24, 0x05	; 5
    2922:	80 93 bf 03 	sts	0x03BF, r24
    2926:	af cf       	rjmp	.-162    	; 0x2886 <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2928:	91 30       	cpi	r25, 0x01	; 1
    292a:	09 f0       	breq	.+2      	; 0x292e <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    292c:	85 e0       	ldi	r24, 0x05	; 5
    292e:	80 93 bf 03 	sts	0x03BF, r24
    2932:	f5 ce       	rjmp	.-534    	; 0x271e <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	b1 f1       	breq	.+108    	; 0x29a4 <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2938:	85 e0       	ldi	r24, 0x05	; 5
    293a:	80 93 bf 03 	sts	0x03BF, r24
    293e:	1c ce       	rjmp	.-968    	; 0x2578 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2940:	81 30       	cpi	r24, 0x01	; 1
    2942:	61 f1       	breq	.+88     	; 0x299c <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2944:	85 e0       	ldi	r24, 0x05	; 5
    2946:	80 93 bf 03 	sts	0x03BF, r24
    294a:	62 cf       	rjmp	.-316    	; 0x2810 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    294c:	10 92 40 05 	sts	0x0540, r1
    2950:	c4 ce       	rjmp	.-632    	; 0x26da <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    2952:	66 95       	lsr	r22
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	02 c0       	rjmp	.+4      	; 0x295e <__vector_29+0x48e>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	6a 95       	dec	r22
    2960:	e2 f7       	brpl	.-8      	; 0x295a <__vector_29+0x48a>
    2962:	82 b9       	out	0x02, r24	; 2
    2964:	80 91 c0 03 	lds	r24, 0x03C0
    2968:	0a ce       	rjmp	.-1004   	; 0x257e <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    296a:	80 91 c5 03 	lds	r24, 0x03C5
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	a1 f1       	breq	.+104    	; 0x29da <__vector_29+0x50a>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	04 ce       	rjmp	.-1016   	; 0x257e <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2976:	80 91 c5 03 	lds	r24, 0x03C5
    297a:	82 30       	cpi	r24, 0x02	; 2
    297c:	09 f0       	breq	.+2      	; 0x2980 <__vector_29+0x4b0>
    297e:	2b ce       	rjmp	.-938    	; 0x25d6 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2980:	30 93 c4 03 	sts	0x03C4, r19
    2984:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    2988:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    298c:	46 98       	cbi	0x08, 6	; 8
    298e:	4e e0       	ldi	r20, 0x0E	; 14
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	2a ce       	rjmp	.-940    	; 0x25e8 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	80 93 bf 03 	sts	0x03BF, r24
    299a:	75 cf       	rjmp	.-278    	; 0x2886 <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	80 93 bf 03 	sts	0x03BF, r24
    29a2:	36 cf       	rjmp	.-404    	; 0x2810 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	80 93 bf 03 	sts	0x03BF, r24
    29aa:	e6 cd       	rjmp	.-1076   	; 0x2578 <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    29ac:	11 82       	std	Z+1, r1	; 0x01
    29ae:	10 82       	st	Z, r1
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	46 ce       	rjmp	.-884    	; 0x2642 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    29b6:	ac 01       	movw	r20, r24
    29b8:	44 5c       	subi	r20, 0xC4	; 196
    29ba:	5f 4f       	sbci	r21, 0xFF	; 255
    29bc:	55 95       	asr	r21
    29be:	47 95       	ror	r20
    29c0:	48 37       	cpi	r20, 0x78	; 120
    29c2:	51 05       	cpc	r21, r1
    29c4:	7c f4       	brge	.+30     	; 0x29e4 <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    29c6:	29 53       	subi	r18, 0x39	; 57
    29c8:	3c 4f       	sbci	r19, 0xFC	; 252
    29ca:	cc 97       	sbiw	r24, 0x3c	; 60
    29cc:	95 95       	asr	r25
    29ce:	87 95       	ror	r24
    29d0:	cc 96       	adiw	r24, 0x3c	; 60
    29d2:	f9 01       	movw	r30, r18
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
    29d8:	3f ce       	rjmp	.-898    	; 0x2658 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    29e0:	46 9a       	sbi	0x08, 6	; 8
    29e2:	a4 ce       	rjmp	.-696    	; 0x272c <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    29e4:	ac 01       	movw	r20, r24
    29e6:	44 5d       	subi	r20, 0xD4	; 212
    29e8:	5e 4f       	sbci	r21, 0xFE	; 254
    29ea:	55 95       	asr	r21
    29ec:	47 95       	ror	r20
    29ee:	55 95       	asr	r21
    29f0:	47 95       	ror	r20
    29f2:	44 3b       	cpi	r20, 0xB4	; 180
    29f4:	51 05       	cpc	r21, r1
    29f6:	74 f4       	brge	.+28     	; 0x2a14 <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    29f8:	29 53       	subi	r18, 0x39	; 57
    29fa:	3c 4f       	sbci	r19, 0xFC	; 252
    29fc:	84 5b       	subi	r24, 0xB4	; 180
    29fe:	90 40       	sbci	r25, 0x00	; 0
    2a00:	95 95       	asr	r25
    2a02:	87 95       	ror	r24
    2a04:	95 95       	asr	r25
    2a06:	87 95       	ror	r24
    2a08:	88 58       	subi	r24, 0x88	; 136
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	22 ce       	rjmp	.-956    	; 0x2658 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2a14:	29 53       	subi	r18, 0x39	; 57
    2a16:	3c 4f       	sbci	r19, 0xFC	; 252
    2a18:	84 5a       	subi	r24, 0xA4	; 164
    2a1a:	91 40       	sbci	r25, 0x01	; 1
    2a1c:	95 95       	asr	r25
    2a1e:	87 95       	ror	r24
    2a20:	95 95       	asr	r25
    2a22:	87 95       	ror	r24
    2a24:	95 95       	asr	r25
    2a26:	87 95       	ror	r24
    2a28:	8c 54       	subi	r24, 0x4C	; 76
    2a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
    2a32:	12 ce       	rjmp	.-988    	; 0x2658 <__vector_29+0x188>

00002a34 <initMotors>:

#include "motors.h"

void initMotors() {
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2a3c:	e0 e9       	ldi	r30, 0x90	; 144
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	10 82       	st	Z, r1
	TCCR3B = 0;
    2a42:	41 e9       	ldi	r20, 0x91	; 145
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	da 01       	movw	r26, r20
    2a48:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2a4a:	21 e7       	ldi	r18, 0x71	; 113
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	e9 01       	movw	r28, r18
    2a50:	18 82       	st	Y, r1
	TCCR4A = 0;
    2a52:	a0 ea       	ldi	r26, 0xA0	; 160
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	1c 92       	st	X, r1
	TCCR4B = 0;
    2a58:	81 ea       	ldi	r24, 0xA1	; 161
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	ec 01       	movw	r28, r24
    2a5e:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2a60:	02 e7       	ldi	r16, 0x72	; 114
    2a62:	10 e0       	ldi	r17, 0x00	; 0
    2a64:	e8 01       	movw	r28, r16
    2a66:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2a68:	60 81       	ld	r22, Z
    2a6a:	63 68       	ori	r22, 0x83	; 131
    2a6c:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2a6e:	60 81       	ld	r22, Z
    2a70:	63 60       	ori	r22, 0x03	; 3
    2a72:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2a74:	ea 01       	movw	r28, r20
    2a76:	68 81       	ld	r22, Y
    2a78:	6b 60       	ori	r22, 0x0B	; 11
    2a7a:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2a7c:	40 91 f3 03 	lds	r20, 0x03F3
    2a80:	50 91 f4 03 	lds	r21, 0x03F4
    2a84:	50 93 99 00 	sts	0x0099, r21
    2a88:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    2a8c:	10 92 9b 00 	sts	0x009B, r1
    2a90:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2a94:	e9 01       	movw	r28, r18
    2a96:	48 81       	ld	r20, Y
    2a98:	41 60       	ori	r20, 0x01	; 1
    2a9a:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2a9c:	20 81       	ld	r18, Z
    2a9e:	2f 75       	andi	r18, 0x5F	; 95
    2aa0:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2aa2:	2e b1       	in	r18, 0x0e	; 14
    2aa4:	27 7e       	andi	r18, 0xE7	; 231
    2aa6:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2aa8:	2c 91       	ld	r18, X
    2aaa:	23 68       	ori	r18, 0x83	; 131
    2aac:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 81       	ld	r18, Z
    2ab2:	2b 60       	ori	r18, 0x0B	; 11
    2ab4:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2ab6:	80 91 f5 03 	lds	r24, 0x03F5
    2aba:	90 91 f6 03 	lds	r25, 0x03F6
    2abe:	90 93 a9 00 	sts	0x00A9, r25
    2ac2:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2ac6:	10 92 ab 00 	sts	0x00AB, r1
    2aca:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2ace:	e8 01       	movw	r28, r16
    2ad0:	88 81       	ld	r24, Y
    2ad2:	81 60       	ori	r24, 0x01	; 1
    2ad4:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2ad6:	8c 91       	ld	r24, X
    2ad8:	8f 75       	andi	r24, 0x5F	; 95
    2ada:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2adc:	e2 e0       	ldi	r30, 0x02	; 2
    2ade:	f1 e0       	ldi	r31, 0x01	; 1
    2ae0:	80 81       	ld	r24, Z
    2ae2:	87 7e       	andi	r24, 0xE7	; 231
    2ae4:	80 83       	st	Z, r24


}
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	08 95       	ret

00002af0 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    2af0:	80 91 07 02 	lds	r24, 0x0207
    2af4:	88 23       	and	r24, r24
    2af6:	09 f0       	breq	.+2      	; 0x2afa <handleMotorsWithNoController+0xa>
    2af8:	41 c0       	rjmp	.+130    	; 0x2b7c <handleMotorsWithNoController+0x8c>
    2afa:	60 91 f9 03 	lds	r22, 0x03F9
    2afe:	70 91 fa 03 	lds	r23, 0x03FA
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    2b02:	80 91 08 02 	lds	r24, 0x0208
    2b06:	88 23       	and	r24, r24
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <handleMotorsWithNoController+0x1c>
    2b0a:	73 c0       	rjmp	.+230    	; 0x2bf2 <handleMotorsWithNoController+0x102>
    2b0c:	e0 91 f7 03 	lds	r30, 0x03F7
    2b10:	f0 91 f8 03 	lds	r31, 0x03F8
			rightMotSteps -= (last_right_vel>>3);
		}
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    2b14:	f0 93 04 04 	sts	0x0404, r31
    2b18:	e0 93 03 04 	sts	0x0403, r30
	pwm_left_working = pwm_left_desired;
    2b1c:	96 2f       	mov	r25, r22
    2b1e:	87 2f       	mov	r24, r23
    2b20:	60 93 05 04 	sts	0x0405, r22
    2b24:	70 93 06 04 	sts	0x0406, r23
	if(obstacleAvoidanceEnabled) {
    2b28:	20 91 3e 05 	lds	r18, 0x053E
    2b2c:	22 23       	and	r18, r18
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <handleMotorsWithNoController+0x42>
    2b30:	a3 c0       	rjmp	.+326    	; 0x2c78 <handleMotorsWithNoController+0x188>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2b32:	90 93 e9 03 	sts	0x03E9, r25
    2b36:	80 93 ea 03 	sts	0x03EA, r24
	pwm_right_desired_to_control = pwm_right_working;
    2b3a:	f0 93 e8 03 	sts	0x03E8, r31
    2b3e:	e0 93 e7 03 	sts	0x03E7, r30

	pwm_left = pwm_left_working;
    2b42:	90 93 f5 03 	sts	0x03F5, r25
    2b46:	80 93 f6 03 	sts	0x03F6, r24
	pwm_right = pwm_right_working;
    2b4a:	f0 93 f4 03 	sts	0x03F4, r31
    2b4e:	e0 93 f3 03 	sts	0x03F3, r30

	if(pwm_right > 0) {
    2b52:	1e 16       	cp	r1, r30
    2b54:	1f 06       	cpc	r1, r31
    2b56:	0c f0       	brlt	.+2      	; 0x2b5a <handleMotorsWithNoController+0x6a>
    2b58:	9e c0       	rjmp	.+316    	; 0x2c96 <handleMotorsWithNoController+0x1a6>
		OCR3A = (unsigned int)pwm_right;
    2b5a:	f0 93 99 00 	sts	0x0099, r31
    2b5e:	e0 93 98 00 	sts	0x0098, r30
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    2b62:	80 91 f5 03 	lds	r24, 0x03F5
    2b66:	90 91 f6 03 	lds	r25, 0x03F6
    2b6a:	18 16       	cp	r1, r24
    2b6c:	19 06       	cpc	r1, r25
    2b6e:	0c f0       	brlt	.+2      	; 0x2b72 <handleMotorsWithNoController+0x82>
    2b70:	77 c0       	rjmp	.+238    	; 0x2c60 <handleMotorsWithNoController+0x170>
		OCR4A = (unsigned int)pwm_left;
    2b72:	90 93 a9 00 	sts	0x00A9, r25
    2b76:	80 93 a8 00 	sts	0x00A8, r24
    2b7a:	08 95       	ret

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
		last_left_vel = left_vel_sum>>2;
    2b7c:	20 91 eb 03 	lds	r18, 0x03EB
    2b80:	30 91 ec 03 	lds	r19, 0x03EC
    2b84:	36 95       	lsr	r19
    2b86:	27 95       	ror	r18
    2b88:	36 95       	lsr	r19
    2b8a:	27 95       	ror	r18
    2b8c:	30 93 f0 03 	sts	0x03F0, r19
    2b90:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    2b94:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2b98:	10 92 ec 03 	sts	0x03EC, r1
    2b9c:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired >= 0) {
    2ba0:	60 91 f9 03 	lds	r22, 0x03F9
    2ba4:	70 91 fa 03 	lds	r23, 0x03FA
    2ba8:	77 fd       	sbrc	r23, 7
    2baa:	a0 c0       	rjmp	.+320    	; 0x2cec <handleMotorsWithNoController+0x1fc>
			leftMotSteps += (last_left_vel>>3);
    2bac:	35 95       	asr	r19
    2bae:	27 95       	ror	r18
    2bb0:	35 95       	asr	r19
    2bb2:	27 95       	ror	r18
    2bb4:	35 95       	asr	r19
    2bb6:	27 95       	ror	r18
    2bb8:	44 27       	eor	r20, r20
    2bba:	37 fd       	sbrc	r19, 7
    2bbc:	40 95       	com	r20
    2bbe:	54 2f       	mov	r21, r20
    2bc0:	80 91 db 03 	lds	r24, 0x03DB
    2bc4:	90 91 dc 03 	lds	r25, 0x03DC
    2bc8:	a0 91 dd 03 	lds	r26, 0x03DD
    2bcc:	b0 91 de 03 	lds	r27, 0x03DE
    2bd0:	82 0f       	add	r24, r18
    2bd2:	93 1f       	adc	r25, r19
    2bd4:	a4 1f       	adc	r26, r20
    2bd6:	b5 1f       	adc	r27, r21
    2bd8:	80 93 db 03 	sts	0x03DB, r24
    2bdc:	90 93 dc 03 	sts	0x03DC, r25
    2be0:	a0 93 dd 03 	sts	0x03DD, r26
    2be4:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    2be8:	80 91 08 02 	lds	r24, 0x0208
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <handleMotorsWithNoController+0x102>
    2bf0:	8d cf       	rjmp	.-230    	; 0x2b0c <handleMotorsWithNoController+0x1c>
		last_right_vel = right_vel_sum>>2;
    2bf2:	20 91 ed 03 	lds	r18, 0x03ED
    2bf6:	30 91 ee 03 	lds	r19, 0x03EE
    2bfa:	36 95       	lsr	r19
    2bfc:	27 95       	ror	r18
    2bfe:	36 95       	lsr	r19
    2c00:	27 95       	ror	r18
    2c02:	30 93 f2 03 	sts	0x03F2, r19
    2c06:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    2c0a:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2c0e:	10 92 ee 03 	sts	0x03EE, r1
    2c12:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired >= 0) {
    2c16:	e0 91 f7 03 	lds	r30, 0x03F7
    2c1a:	f0 91 f8 03 	lds	r31, 0x03F8
    2c1e:	f7 fd       	sbrc	r31, 7
    2c20:	46 c0       	rjmp	.+140    	; 0x2cae <handleMotorsWithNoController+0x1be>
			rightMotSteps += (last_right_vel>>3);
    2c22:	35 95       	asr	r19
    2c24:	27 95       	ror	r18
    2c26:	35 95       	asr	r19
    2c28:	27 95       	ror	r18
    2c2a:	35 95       	asr	r19
    2c2c:	27 95       	ror	r18
    2c2e:	44 27       	eor	r20, r20
    2c30:	37 fd       	sbrc	r19, 7
    2c32:	40 95       	com	r20
    2c34:	54 2f       	mov	r21, r20
    2c36:	80 91 d7 03 	lds	r24, 0x03D7
    2c3a:	90 91 d8 03 	lds	r25, 0x03D8
    2c3e:	a0 91 d9 03 	lds	r26, 0x03D9
    2c42:	b0 91 da 03 	lds	r27, 0x03DA
    2c46:	82 0f       	add	r24, r18
    2c48:	93 1f       	adc	r25, r19
    2c4a:	a4 1f       	adc	r26, r20
    2c4c:	b5 1f       	adc	r27, r21
    2c4e:	80 93 d7 03 	sts	0x03D7, r24
    2c52:	90 93 d8 03 	sts	0x03D8, r25
    2c56:	a0 93 d9 03 	sts	0x03D9, r26
    2c5a:	b0 93 da 03 	sts	0x03DA, r27
    2c5e:	5a cf       	rjmp	.-332    	; 0x2b14 <handleMotorsWithNoController+0x24>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <handleMotorsWithNoController+0x176>
    2c64:	6a c0       	rjmp	.+212    	; 0x2d3a <handleMotorsWithNoController+0x24a>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    2c66:	10 92 a9 00 	sts	0x00A9, r1
    2c6a:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2c6e:	10 92 ab 00 	sts	0x00AB, r1
    2c72:	10 92 aa 00 	sts	0x00AA, r1
    2c76:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2c78:	85 e0       	ldi	r24, 0x05	; 5
    2c7a:	94 e0       	ldi	r25, 0x04	; 4
    2c7c:	63 e0       	ldi	r22, 0x03	; 3
    2c7e:	74 e0       	ldi	r23, 0x04	; 4
    2c80:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <obstacleAvoidance>
    2c84:	90 91 05 04 	lds	r25, 0x0405
    2c88:	80 91 06 04 	lds	r24, 0x0406
    2c8c:	e0 91 03 04 	lds	r30, 0x0403
    2c90:	f0 91 04 04 	lds	r31, 0x0404
    2c94:	4e cf       	rjmp	.-356    	; 0x2b32 <handleMotorsWithNoController+0x42>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    2c96:	30 97       	sbiw	r30, 0x00	; 0
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <handleMotorsWithNoController+0x1ac>
    2c9a:	47 c0       	rjmp	.+142    	; 0x2d2a <handleMotorsWithNoController+0x23a>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    2c9c:	10 92 99 00 	sts	0x0099, r1
    2ca0:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2ca4:	10 92 9b 00 	sts	0x009B, r1
    2ca8:	10 92 9a 00 	sts	0x009A, r1
    2cac:	5a cf       	rjmp	.-332    	; 0x2b62 <handleMotorsWithNoController+0x72>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    2cae:	35 95       	asr	r19
    2cb0:	27 95       	ror	r18
    2cb2:	35 95       	asr	r19
    2cb4:	27 95       	ror	r18
    2cb6:	35 95       	asr	r19
    2cb8:	27 95       	ror	r18
    2cba:	44 27       	eor	r20, r20
    2cbc:	37 fd       	sbrc	r19, 7
    2cbe:	40 95       	com	r20
    2cc0:	54 2f       	mov	r21, r20
    2cc2:	80 91 d7 03 	lds	r24, 0x03D7
    2cc6:	90 91 d8 03 	lds	r25, 0x03D8
    2cca:	a0 91 d9 03 	lds	r26, 0x03D9
    2cce:	b0 91 da 03 	lds	r27, 0x03DA
    2cd2:	82 1b       	sub	r24, r18
    2cd4:	93 0b       	sbc	r25, r19
    2cd6:	a4 0b       	sbc	r26, r20
    2cd8:	b5 0b       	sbc	r27, r21
    2cda:	80 93 d7 03 	sts	0x03D7, r24
    2cde:	90 93 d8 03 	sts	0x03D8, r25
    2ce2:	a0 93 d9 03 	sts	0x03D9, r26
    2ce6:	b0 93 da 03 	sts	0x03DA, r27
    2cea:	14 cf       	rjmp	.-472    	; 0x2b14 <handleMotorsWithNoController+0x24>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    2cec:	35 95       	asr	r19
    2cee:	27 95       	ror	r18
    2cf0:	35 95       	asr	r19
    2cf2:	27 95       	ror	r18
    2cf4:	35 95       	asr	r19
    2cf6:	27 95       	ror	r18
    2cf8:	44 27       	eor	r20, r20
    2cfa:	37 fd       	sbrc	r19, 7
    2cfc:	40 95       	com	r20
    2cfe:	54 2f       	mov	r21, r20
    2d00:	80 91 db 03 	lds	r24, 0x03DB
    2d04:	90 91 dc 03 	lds	r25, 0x03DC
    2d08:	a0 91 dd 03 	lds	r26, 0x03DD
    2d0c:	b0 91 de 03 	lds	r27, 0x03DE
    2d10:	82 1b       	sub	r24, r18
    2d12:	93 0b       	sbc	r25, r19
    2d14:	a4 0b       	sbc	r26, r20
    2d16:	b5 0b       	sbc	r27, r21
    2d18:	80 93 db 03 	sts	0x03DB, r24
    2d1c:	90 93 dc 03 	sts	0x03DC, r25
    2d20:	a0 93 dd 03 	sts	0x03DD, r26
    2d24:	b0 93 de 03 	sts	0x03DE, r27
    2d28:	ec ce       	rjmp	.-552    	; 0x2b02 <handleMotorsWithNoController+0x12>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    2d2a:	f0 95       	com	r31
    2d2c:	e1 95       	neg	r30
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	f0 93 9b 00 	sts	0x009B, r31
    2d34:	e0 93 9a 00 	sts	0x009A, r30
    2d38:	14 cf       	rjmp	.-472    	; 0x2b62 <handleMotorsWithNoController+0x72>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    2d3a:	90 95       	com	r25
    2d3c:	81 95       	neg	r24
    2d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d40:	90 93 ab 00 	sts	0x00AB, r25
    2d44:	80 93 aa 00 	sts	0x00AA, r24
    2d48:	08 95       	ret

00002d4a <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    2d4a:	80 91 f9 03 	lds	r24, 0x03F9
    2d4e:	90 91 fa 03 	lds	r25, 0x03FA
    2d52:	90 93 06 04 	sts	0x0406, r25
    2d56:	80 93 05 04 	sts	0x0405, r24
	pwm_right_working = pwm_right_desired;
    2d5a:	20 91 f7 03 	lds	r18, 0x03F7
    2d5e:	30 91 f8 03 	lds	r19, 0x03F8
    2d62:	30 93 04 04 	sts	0x0404, r19
    2d66:	20 93 03 04 	sts	0x0403, r18
	if(obstacleAvoidanceEnabled) {
    2d6a:	40 91 3e 05 	lds	r20, 0x053E
    2d6e:	44 23       	and	r20, r20
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <handleMotorsWithSpeedController+0x2a>
    2d72:	b8 c0       	rjmp	.+368    	; 0x2ee4 <handleMotorsWithSpeedController+0x19a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2d74:	90 93 ea 03 	sts	0x03EA, r25
    2d78:	80 93 e9 03 	sts	0x03E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    2d7c:	30 93 e8 03 	sts	0x03E8, r19
    2d80:	20 93 e7 03 	sts	0x03E7, r18

	if(compute_left_vel) {
    2d84:	20 91 07 02 	lds	r18, 0x0207
    2d88:	22 23       	and	r18, r18
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <handleMotorsWithSpeedController+0x44>
    2d8c:	4b c0       	rjmp	.+150    	; 0x2e24 <handleMotorsWithSpeedController+0xda>

		last_left_vel = left_vel_sum>>2;
    2d8e:	20 91 eb 03 	lds	r18, 0x03EB
    2d92:	30 91 ec 03 	lds	r19, 0x03EC
    2d96:	36 95       	lsr	r19
    2d98:	27 95       	ror	r18
    2d9a:	36 95       	lsr	r19
    2d9c:	27 95       	ror	r18
    2d9e:	30 93 f0 03 	sts	0x03F0, r19
    2da2:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    2da6:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2daa:	10 92 ec 03 	sts	0x03EC, r1
    2dae:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired_to_control >= 0) {
    2db2:	97 fd       	sbrc	r25, 7
    2db4:	ce c0       	rjmp	.+412    	; 0x2f52 <handleMotorsWithSpeedController+0x208>
			leftMotSteps += (last_left_vel>>3);
    2db6:	35 95       	asr	r19
    2db8:	27 95       	ror	r18
    2dba:	35 95       	asr	r19
    2dbc:	27 95       	ror	r18
    2dbe:	35 95       	asr	r19
    2dc0:	27 95       	ror	r18
    2dc2:	44 27       	eor	r20, r20
    2dc4:	37 fd       	sbrc	r19, 7
    2dc6:	40 95       	com	r20
    2dc8:	54 2f       	mov	r21, r20
    2dca:	80 91 db 03 	lds	r24, 0x03DB
    2dce:	90 91 dc 03 	lds	r25, 0x03DC
    2dd2:	a0 91 dd 03 	lds	r26, 0x03DD
    2dd6:	b0 91 de 03 	lds	r27, 0x03DE
    2dda:	82 0f       	add	r24, r18
    2ddc:	93 1f       	adc	r25, r19
    2dde:	a4 1f       	adc	r26, r20
    2de0:	b5 1f       	adc	r27, r21
    2de2:	80 93 db 03 	sts	0x03DB, r24
    2de6:	90 93 dc 03 	sts	0x03DC, r25
    2dea:	a0 93 dd 03 	sts	0x03DD, r26
    2dee:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    2df2:	80 91 16 02 	lds	r24, 0x0216
    2df6:	81 30       	cpi	r24, 0x01	; 1
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <handleMotorsWithSpeedController+0xb2>
    2dfa:	ce c0       	rjmp	.+412    	; 0x2f98 <handleMotorsWithSpeedController+0x24e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    2dfc:	85 e0       	ldi	r24, 0x05	; 5
    2dfe:	94 e0       	ldi	r25, 0x04	; 4
    2e00:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    2e04:	80 91 05 04 	lds	r24, 0x0405
    2e08:	90 91 06 04 	lds	r25, 0x0406
    2e0c:	90 93 f6 03 	sts	0x03F6, r25
    2e10:	80 93 f5 03 	sts	0x03F5, r24

		if(pwm_left > 0) {
    2e14:	18 16       	cp	r1, r24
    2e16:	19 06       	cpc	r1, r25
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <handleMotorsWithSpeedController+0xd2>
    2e1a:	c3 c0       	rjmp	.+390    	; 0x2fa2 <handleMotorsWithSpeedController+0x258>
			OCR4A = (unsigned int)pwm_left;
    2e1c:	90 93 a9 00 	sts	0x00A9, r25
    2e20:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    2e24:	80 91 08 02 	lds	r24, 0x0208
    2e28:	88 23       	and	r24, r24
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <handleMotorsWithSpeedController+0xe4>
    2e2c:	5a c0       	rjmp	.+180    	; 0x2ee2 <handleMotorsWithSpeedController+0x198>

		last_right_vel = right_vel_sum>>2;
    2e2e:	20 91 ed 03 	lds	r18, 0x03ED
    2e32:	30 91 ee 03 	lds	r19, 0x03EE
    2e36:	36 95       	lsr	r19
    2e38:	27 95       	ror	r18
    2e3a:	36 95       	lsr	r19
    2e3c:	27 95       	ror	r18
    2e3e:	30 93 f2 03 	sts	0x03F2, r19
    2e42:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    2e46:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2e4a:	10 92 ee 03 	sts	0x03EE, r1
    2e4e:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired_to_control >= 0) {
    2e52:	80 91 e7 03 	lds	r24, 0x03E7
    2e56:	90 91 e8 03 	lds	r25, 0x03E8
    2e5a:	97 fd       	sbrc	r25, 7
    2e5c:	52 c0       	rjmp	.+164    	; 0x2f02 <handleMotorsWithSpeedController+0x1b8>
			rightMotSteps += (last_right_vel>>3);
    2e5e:	35 95       	asr	r19
    2e60:	27 95       	ror	r18
    2e62:	35 95       	asr	r19
    2e64:	27 95       	ror	r18
    2e66:	35 95       	asr	r19
    2e68:	27 95       	ror	r18
    2e6a:	44 27       	eor	r20, r20
    2e6c:	37 fd       	sbrc	r19, 7
    2e6e:	40 95       	com	r20
    2e70:	54 2f       	mov	r21, r20
    2e72:	80 91 d7 03 	lds	r24, 0x03D7
    2e76:	90 91 d8 03 	lds	r25, 0x03D8
    2e7a:	a0 91 d9 03 	lds	r26, 0x03D9
    2e7e:	b0 91 da 03 	lds	r27, 0x03DA
    2e82:	82 0f       	add	r24, r18
    2e84:	93 1f       	adc	r25, r19
    2e86:	a4 1f       	adc	r26, r20
    2e88:	b5 1f       	adc	r27, r21
    2e8a:	80 93 d7 03 	sts	0x03D7, r24
    2e8e:	90 93 d8 03 	sts	0x03D8, r25
    2e92:	a0 93 d9 03 	sts	0x03D9, r26
    2e96:	b0 93 da 03 	sts	0x03DA, r27
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    2e9a:	80 91 16 02 	lds	r24, 0x0216
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <handleMotorsWithSpeedController+0x15a>
    2ea2:	52 c0       	rjmp	.+164    	; 0x2f48 <handleMotorsWithSpeedController+0x1fe>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    2ea4:	83 e0       	ldi	r24, 0x03	; 3
    2ea6:	94 e0       	ldi	r25, 0x04	; 4
    2ea8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    2eac:	80 91 03 04 	lds	r24, 0x0403
    2eb0:	90 91 04 04 	lds	r25, 0x0404
    2eb4:	90 93 f4 03 	sts	0x03F4, r25
    2eb8:	80 93 f3 03 	sts	0x03F3, r24

		if(pwm_right > 0) {
    2ebc:	18 16       	cp	r1, r24
    2ebe:	19 06       	cpc	r1, r25
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <handleMotorsWithSpeedController+0x182>
			OCR3A = (unsigned int)pwm_right;
    2ec2:	90 93 99 00 	sts	0x0099, r25
    2ec6:	80 93 98 00 	sts	0x0098, r24
    2eca:	08 95       	ret
		} else if(pwm_right < 0) {
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <handleMotorsWithSpeedController+0x188>
    2ed0:	73 c0       	rjmp	.+230    	; 0x2fb8 <handleMotorsWithSpeedController+0x26e>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    2ed2:	10 92 99 00 	sts	0x0099, r1
    2ed6:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    2eda:	10 92 9b 00 	sts	0x009B, r1
    2ede:	10 92 9a 00 	sts	0x009A, r1
    2ee2:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2ee4:	85 e0       	ldi	r24, 0x05	; 5
    2ee6:	94 e0       	ldi	r25, 0x04	; 4
    2ee8:	63 e0       	ldi	r22, 0x03	; 3
    2eea:	74 e0       	ldi	r23, 0x04	; 4
    2eec:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <obstacleAvoidance>
    2ef0:	80 91 05 04 	lds	r24, 0x0405
    2ef4:	90 91 06 04 	lds	r25, 0x0406
    2ef8:	20 91 03 04 	lds	r18, 0x0403
    2efc:	30 91 04 04 	lds	r19, 0x0404
    2f00:	39 cf       	rjmp	.-398    	; 0x2d74 <handleMotorsWithSpeedController+0x2a>
		right_vel_sum = 0;

		if(pwm_right_desired_to_control >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    2f02:	35 95       	asr	r19
    2f04:	27 95       	ror	r18
    2f06:	35 95       	asr	r19
    2f08:	27 95       	ror	r18
    2f0a:	35 95       	asr	r19
    2f0c:	27 95       	ror	r18
    2f0e:	44 27       	eor	r20, r20
    2f10:	37 fd       	sbrc	r19, 7
    2f12:	40 95       	com	r20
    2f14:	54 2f       	mov	r21, r20
    2f16:	80 91 d7 03 	lds	r24, 0x03D7
    2f1a:	90 91 d8 03 	lds	r25, 0x03D8
    2f1e:	a0 91 d9 03 	lds	r26, 0x03D9
    2f22:	b0 91 da 03 	lds	r27, 0x03DA
    2f26:	82 1b       	sub	r24, r18
    2f28:	93 0b       	sbc	r25, r19
    2f2a:	a4 0b       	sbc	r26, r20
    2f2c:	b5 0b       	sbc	r27, r21
    2f2e:	80 93 d7 03 	sts	0x03D7, r24
    2f32:	90 93 d8 03 	sts	0x03D8, r25
    2f36:	a0 93 d9 03 	sts	0x03D9, r26
    2f3a:	b0 93 da 03 	sts	0x03DA, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    2f3e:	80 91 16 02 	lds	r24, 0x0216
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <handleMotorsWithSpeedController+0x1fe>
    2f46:	ae cf       	rjmp	.-164    	; 0x2ea4 <handleMotorsWithSpeedController+0x15a>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	94 e0       	ldi	r25, 0x04	; 4
    2f4c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <start_horizontal_speed_control_right>
    2f50:	ad cf       	rjmp	.-166    	; 0x2eac <handleMotorsWithSpeedController+0x162>
		left_vel_sum = 0;

		if(pwm_left_desired_to_control >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    2f52:	35 95       	asr	r19
    2f54:	27 95       	ror	r18
    2f56:	35 95       	asr	r19
    2f58:	27 95       	ror	r18
    2f5a:	35 95       	asr	r19
    2f5c:	27 95       	ror	r18
    2f5e:	44 27       	eor	r20, r20
    2f60:	37 fd       	sbrc	r19, 7
    2f62:	40 95       	com	r20
    2f64:	54 2f       	mov	r21, r20
    2f66:	80 91 db 03 	lds	r24, 0x03DB
    2f6a:	90 91 dc 03 	lds	r25, 0x03DC
    2f6e:	a0 91 dd 03 	lds	r26, 0x03DD
    2f72:	b0 91 de 03 	lds	r27, 0x03DE
    2f76:	82 1b       	sub	r24, r18
    2f78:	93 0b       	sbc	r25, r19
    2f7a:	a4 0b       	sbc	r26, r20
    2f7c:	b5 0b       	sbc	r27, r21
    2f7e:	80 93 db 03 	sts	0x03DB, r24
    2f82:	90 93 dc 03 	sts	0x03DC, r25
    2f86:	a0 93 dd 03 	sts	0x03DD, r26
    2f8a:	b0 93 de 03 	sts	0x03DE, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    2f8e:	80 91 16 02 	lds	r24, 0x0216
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <handleMotorsWithSpeedController+0x24e>
    2f96:	32 cf       	rjmp	.-412    	; 0x2dfc <handleMotorsWithSpeedController+0xb2>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    2f98:	85 e0       	ldi	r24, 0x05	; 5
    2f9a:	94 e0       	ldi	r25, 0x04	; 4
    2f9c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <start_horizontal_speed_control_left>
    2fa0:	31 cf       	rjmp	.-414    	; 0x2e04 <handleMotorsWithSpeedController+0xba>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	89 f4       	brne	.+34     	; 0x2fc8 <handleMotorsWithSpeedController+0x27e>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    2fa6:	10 92 a9 00 	sts	0x00A9, r1
    2faa:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    2fae:	10 92 ab 00 	sts	0x00AB, r1
    2fb2:	10 92 aa 00 	sts	0x00AA, r1
    2fb6:	36 cf       	rjmp	.-404    	; 0x2e24 <handleMotorsWithSpeedController+0xda>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    2fb8:	90 95       	com	r25
    2fba:	81 95       	neg	r24
    2fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbe:	90 93 9b 00 	sts	0x009B, r25
    2fc2:	80 93 9a 00 	sts	0x009A, r24
    2fc6:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    2fc8:	90 95       	com	r25
    2fca:	81 95       	neg	r24
    2fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fce:	90 93 ab 00 	sts	0x00AB, r25
    2fd2:	80 93 aa 00 	sts	0x00AA, r24
    2fd6:	26 cf       	rjmp	.-436    	; 0x2e24 <handleMotorsWithSpeedController+0xda>

00002fd8 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2fd8:	28 2f       	mov	r18, r24
    2fda:	33 27       	eor	r19, r19
    2fdc:	27 fd       	sbrc	r18, 7
    2fde:	30 95       	com	r19
    2fe0:	37 fd       	sbrc	r19, 7
    2fe2:	30 c0       	rjmp	.+96     	; 0x3044 <setLeftSpeed+0x6c>
    2fe4:	30 93 08 04 	sts	0x0408, r19
    2fe8:	20 93 07 04 	sts	0x0407, r18

    if(vel >= 0) {
    2fec:	87 fd       	sbrc	r24, 7
    2fee:	1e c0       	rjmp	.+60     	; 0x302c <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    2ff0:	22 0f       	add	r18, r18
    2ff2:	33 1f       	adc	r19, r19
    2ff4:	22 0f       	add	r18, r18
    2ff6:	33 1f       	adc	r19, r19
    2ff8:	30 93 fa 03 	sts	0x03FA, r19
    2ffc:	20 93 f9 03 	sts	0x03F9, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	21 30       	cpi	r18, 0x01	; 1
    3004:	38 07       	cpc	r19, r24
    3006:	3c f0       	brlt	.+14     	; 0x3016 <setLeftSpeed+0x3e>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	92 e0       	ldi	r25, 0x02	; 2
    300c:	90 93 fa 03 	sts	0x03FA, r25
    3010:	80 93 f9 03 	sts	0x03F9, r24
    3014:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    3016:	8e ef       	ldi	r24, 0xFE	; 254
    3018:	20 30       	cpi	r18, 0x00	; 0
    301a:	38 07       	cpc	r19, r24
    301c:	34 f4       	brge	.+12     	; 0x302a <setLeftSpeed+0x52>
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	9e ef       	ldi	r25, 0xFE	; 254
    3022:	90 93 fa 03 	sts	0x03FA, r25
    3026:	80 93 f9 03 	sts	0x03F9, r24
    302a:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    302c:	22 0f       	add	r18, r18
    302e:	33 1f       	adc	r19, r19
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	30 95       	com	r19
    3036:	21 95       	neg	r18
    3038:	3f 4f       	sbci	r19, 0xFF	; 255
    303a:	30 93 fa 03 	sts	0x03FA, r19
    303e:	20 93 f9 03 	sts	0x03F9, r18
    3042:	de cf       	rjmp	.-68     	; 0x3000 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3044:	30 95       	com	r19
    3046:	21 95       	neg	r18
    3048:	3f 4f       	sbci	r19, 0xFF	; 255
    304a:	cc cf       	rjmp	.-104    	; 0x2fe4 <setLeftSpeed+0xc>

0000304c <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    304c:	28 2f       	mov	r18, r24
    304e:	33 27       	eor	r19, r19
    3050:	27 fd       	sbrc	r18, 7
    3052:	30 95       	com	r19
    3054:	37 fd       	sbrc	r19, 7
    3056:	30 c0       	rjmp	.+96     	; 0x30b8 <setRightSpeed+0x6c>
    3058:	30 93 0a 04 	sts	0x040A, r19
    305c:	20 93 09 04 	sts	0x0409, r18

    if(vel >= 0) {
    3060:	87 fd       	sbrc	r24, 7
    3062:	1e c0       	rjmp	.+60     	; 0x30a0 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    3064:	22 0f       	add	r18, r18
    3066:	33 1f       	adc	r19, r19
    3068:	22 0f       	add	r18, r18
    306a:	33 1f       	adc	r19, r19
    306c:	30 93 f8 03 	sts	0x03F8, r19
    3070:	20 93 f7 03 	sts	0x03F7, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	21 30       	cpi	r18, 0x01	; 1
    3078:	38 07       	cpc	r19, r24
    307a:	3c f0       	brlt	.+14     	; 0x308a <setRightSpeed+0x3e>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	92 e0       	ldi	r25, 0x02	; 2
    3080:	90 93 f8 03 	sts	0x03F8, r25
    3084:	80 93 f7 03 	sts	0x03F7, r24
    3088:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    308a:	8e ef       	ldi	r24, 0xFE	; 254
    308c:	20 30       	cpi	r18, 0x00	; 0
    308e:	38 07       	cpc	r19, r24
    3090:	34 f4       	brge	.+12     	; 0x309e <setRightSpeed+0x52>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	9e ef       	ldi	r25, 0xFE	; 254
    3096:	90 93 f8 03 	sts	0x03F8, r25
    309a:	80 93 f7 03 	sts	0x03F7, r24
    309e:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    30a0:	22 0f       	add	r18, r18
    30a2:	33 1f       	adc	r19, r19
    30a4:	22 0f       	add	r18, r18
    30a6:	33 1f       	adc	r19, r19
    30a8:	30 95       	com	r19
    30aa:	21 95       	neg	r18
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	30 93 f8 03 	sts	0x03F8, r19
    30b2:	20 93 f7 03 	sts	0x03F7, r18
    30b6:	de cf       	rjmp	.-68     	; 0x3074 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    30b8:	30 95       	com	r19
    30ba:	21 95       	neg	r18
    30bc:	3f 4f       	sbci	r19, 0xFF	; 255
    30be:	cc cf       	rjmp	.-104    	; 0x3058 <setRightSpeed+0xc>

000030c0 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    30c0:	1f 92       	push	r1
    30c2:	0f 92       	push	r0
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	0f 92       	push	r0
    30c8:	11 24       	eor	r1, r1
    30ca:	8f 93       	push	r24
    30cc:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    30ce:	80 91 40 05 	lds	r24, 0x0540
    30d2:	88 23       	and	r24, r24
    30d4:	61 f0       	breq	.+24     	; 0x30ee <__vector_45+0x2e>
		pwm_left = 0;
    30d6:	10 92 f6 03 	sts	0x03F6, r1
    30da:	10 92 f5 03 	sts	0x03F5, r1
		OCR4A = 0;
    30de:	10 92 a9 00 	sts	0x00A9, r1
    30e2:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    30e6:	10 92 ab 00 	sts	0x00AB, r1
    30ea:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    30ee:	10 92 e0 03 	sts	0x03E0, r1
    30f2:	10 92 df 03 	sts	0x03DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    30f6:	80 91 f5 03 	lds	r24, 0x03F5
    30fa:	90 91 f6 03 	lds	r25, 0x03F6
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	41 f5       	brne	.+80     	; 0x3152 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3102:	80 91 e9 03 	lds	r24, 0x03E9
    3106:	90 91 ea 03 	lds	r25, 0x03EA
    310a:	97 fd       	sbrc	r25, 7
    310c:	69 c0       	rjmp	.+210    	; 0x31e0 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    3114:	8e e0       	ldi	r24, 0x0E	; 14
    3116:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3120:	80 91 a0 00 	lds	r24, 0x00A0
    3124:	8f 75       	andi	r24, 0x5F	; 95
    3126:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    312a:	80 91 02 01 	lds	r24, 0x0102
    312e:	87 7e       	andi	r24, 0xE7	; 231
    3130:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3134:	80 91 72 00 	lds	r24, 0x0072
    3138:	89 7f       	andi	r24, 0xF9	; 249
    313a:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    313e:	89 b3       	in	r24, 0x19	; 25
    3140:	86 60       	ori	r24, 0x06	; 6
    3142:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    3144:	9f 91       	pop	r25
    3146:	8f 91       	pop	r24
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	0f 90       	pop	r0
    314e:	1f 90       	pop	r1
    3150:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3152:	18 16       	cp	r1, r24
    3154:	19 06       	cpc	r1, r25
    3156:	2c f5       	brge	.+74     	; 0x31a2 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    3158:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    315c:	8f e0       	ldi	r24, 0x0F	; 15
    315e:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3162:	80 91 a0 00 	lds	r24, 0x00A0
    3166:	8f 7d       	andi	r24, 0xDF	; 223
    3168:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    316c:	80 91 72 00 	lds	r24, 0x0072
    3170:	8b 7f       	andi	r24, 0xFB	; 251
    3172:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3176:	80 91 02 01 	lds	r24, 0x0102
    317a:	8f 7e       	andi	r24, 0xEF	; 239
    317c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3180:	80 91 a0 00 	lds	r24, 0x00A0
    3184:	80 68       	ori	r24, 0x80	; 128
    3186:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    318a:	80 91 72 00 	lds	r24, 0x0072
    318e:	82 60       	ori	r24, 0x02	; 2
    3190:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3194:	9f 91       	pop	r25
    3196:	8f 91       	pop	r24
    3198:	0f 90       	pop	r0
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	0f 90       	pop	r0
    319e:	1f 90       	pop	r1
    31a0:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    31a2:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    31a6:	8e e0       	ldi	r24, 0x0E	; 14
    31a8:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    31ac:	80 91 a0 00 	lds	r24, 0x00A0
    31b0:	8f 77       	andi	r24, 0x7F	; 127
    31b2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    31b6:	80 91 72 00 	lds	r24, 0x0072
    31ba:	8d 7f       	andi	r24, 0xFD	; 253
    31bc:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    31c0:	80 91 02 01 	lds	r24, 0x0102
    31c4:	87 7f       	andi	r24, 0xF7	; 247
    31c6:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    31ca:	80 91 a0 00 	lds	r24, 0x00A0
    31ce:	80 62       	ori	r24, 0x20	; 32
    31d0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    31d4:	80 91 72 00 	lds	r24, 0x0072
    31d8:	84 60       	ori	r24, 0x04	; 4
    31da:	80 93 72 00 	sts	0x0072, r24
    31de:	b2 cf       	rjmp	.-156    	; 0x3144 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    31e6:	8f e0       	ldi	r24, 0x0F	; 15
    31e8:	80 93 2b 03 	sts	0x032B, r24
    31ec:	96 cf       	rjmp	.-212    	; 0x311a <__vector_45+0x5a>

000031ee <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	8f 93       	push	r24
    31fa:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3202:	9e e0       	ldi	r25, 0x0E	; 14
    3204:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3208:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	0f 90       	pop	r0
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	0f 90       	pop	r0
    3216:	1f 90       	pop	r1
    3218:	18 95       	reti

0000321a <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    321a:	1f 92       	push	r1
    321c:	0f 92       	push	r0
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	0f 92       	push	r0
    3222:	11 24       	eor	r1, r1
    3224:	8f 93       	push	r24
    3226:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    322e:	9f e0       	ldi	r25, 0x0F	; 15
    3230:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3234:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3238:	9f 91       	pop	r25
    323a:	8f 91       	pop	r24
    323c:	0f 90       	pop	r0
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	0f 90       	pop	r0
    3242:	1f 90       	pop	r1
    3244:	18 95       	reti

00003246 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3246:	1f 92       	push	r1
    3248:	0f 92       	push	r0
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	0f 92       	push	r0
    324e:	11 24       	eor	r1, r1
    3250:	8f 93       	push	r24
    3252:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    3254:	80 91 40 05 	lds	r24, 0x0540
    3258:	88 23       	and	r24, r24
    325a:	61 f0       	breq	.+24     	; 0x3274 <__vector_35+0x2e>
		pwm_right = 0;
    325c:	10 92 f4 03 	sts	0x03F4, r1
    3260:	10 92 f3 03 	sts	0x03F3, r1
		OCR3A = 0;
    3264:	10 92 99 00 	sts	0x0099, r1
    3268:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    326c:	10 92 9b 00 	sts	0x009B, r1
    3270:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3274:	10 92 e2 03 	sts	0x03E2, r1
    3278:	10 92 e1 03 	sts	0x03E1, r1


	if(pwm_right == 0) {
    327c:	80 91 f3 03 	lds	r24, 0x03F3
    3280:	90 91 f4 03 	lds	r25, 0x03F4
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	31 f5       	brne	.+76     	; 0x32d4 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3288:	80 91 e7 03 	lds	r24, 0x03E7
    328c:	90 91 e8 03 	lds	r25, 0x03E8
    3290:	97 fd       	sbrc	r25, 7
    3292:	5f c0       	rjmp	.+190    	; 0x3352 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    329a:	8c e0       	ldi	r24, 0x0C	; 12
    329c:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    32a6:	80 91 90 00 	lds	r24, 0x0090
    32aa:	8f 75       	andi	r24, 0x5F	; 95
    32ac:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    32b0:	8e b1       	in	r24, 0x0e	; 14
    32b2:	87 7e       	andi	r24, 0xE7	; 231
    32b4:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    32b6:	80 91 71 00 	lds	r24, 0x0071
    32ba:	89 7f       	andi	r24, 0xF9	; 249
    32bc:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    32c0:	88 b3       	in	r24, 0x18	; 24
    32c2:	86 60       	ori	r24, 0x06	; 6
    32c4:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    32c6:	9f 91       	pop	r25
    32c8:	8f 91       	pop	r24
    32ca:	0f 90       	pop	r0
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	0f 90       	pop	r0
    32d0:	1f 90       	pop	r1
    32d2:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    32d4:	18 16       	cp	r1, r24
    32d6:	19 06       	cpc	r1, r25
    32d8:	0c f5       	brge	.+66     	; 0x331c <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    32da:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    32de:	8d e0       	ldi	r24, 0x0D	; 13
    32e0:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    32e4:	80 91 90 00 	lds	r24, 0x0090
    32e8:	8f 7d       	andi	r24, 0xDF	; 223
    32ea:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    32ee:	80 91 71 00 	lds	r24, 0x0071
    32f2:	8b 7f       	andi	r24, 0xFB	; 251
    32f4:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    32f8:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    32fa:	80 91 90 00 	lds	r24, 0x0090
    32fe:	80 68       	ori	r24, 0x80	; 128
    3300:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3304:	80 91 71 00 	lds	r24, 0x0071
    3308:	82 60       	ori	r24, 0x02	; 2
    330a:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    330e:	9f 91       	pop	r25
    3310:	8f 91       	pop	r24
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	0f 90       	pop	r0
    3318:	1f 90       	pop	r1
    331a:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    331c:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3320:	8c e0       	ldi	r24, 0x0C	; 12
    3322:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3326:	80 91 90 00 	lds	r24, 0x0090
    332a:	8f 77       	andi	r24, 0x7F	; 127
    332c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3330:	80 91 71 00 	lds	r24, 0x0071
    3334:	8d 7f       	andi	r24, 0xFD	; 253
    3336:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    333a:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    333c:	80 91 90 00 	lds	r24, 0x0090
    3340:	80 62       	ori	r24, 0x20	; 32
    3342:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3346:	80 91 71 00 	lds	r24, 0x0071
    334a:	84 60       	ori	r24, 0x04	; 4
    334c:	80 93 71 00 	sts	0x0071, r24
    3350:	ba cf       	rjmp	.-140    	; 0x32c6 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3358:	8d e0       	ldi	r24, 0x0D	; 13
    335a:	80 93 2c 03 	sts	0x032C, r24
    335e:	a0 cf       	rjmp	.-192    	; 0x32a0 <__vector_35+0x5a>

00003360 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3360:	1f 92       	push	r1
    3362:	0f 92       	push	r0
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	0f 92       	push	r0
    3368:	11 24       	eor	r1, r1
    336a:	8f 93       	push	r24
    336c:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3374:	9c e0       	ldi	r25, 0x0C	; 12
    3376:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    337a:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    337e:	9f 91       	pop	r25
    3380:	8f 91       	pop	r24
    3382:	0f 90       	pop	r0
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	0f 90       	pop	r0
    3388:	1f 90       	pop	r1
    338a:	18 95       	reti

0000338c <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    338c:	1f 92       	push	r1
    338e:	0f 92       	push	r0
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	0f 92       	push	r0
    3394:	11 24       	eor	r1, r1
    3396:	8f 93       	push	r24
    3398:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    33a0:	9d e0       	ldi	r25, 0x0D	; 13
    33a2:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    33a6:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    33aa:	9f 91       	pop	r25
    33ac:	8f 91       	pop	r24
    33ae:	0f 90       	pop	r0
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	0f 90       	pop	r0
    33b4:	1f 90       	pop	r1
    33b6:	18 95       	reti

000033b8 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    33b8:	80 91 94 00 	lds	r24, 0x0094
    33bc:	90 91 95 00 	lds	r25, 0x0095
    33c0:	0e 94 2e 28 	call	0x505c	; 0x505c <srand>

}
    33c4:	08 95       	ret

000033c6 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    33c6:	2f 92       	push	r2
    33c8:	3f 92       	push	r3
    33ca:	4f 92       	push	r4
    33cc:	5f 92       	push	r5
    33ce:	6f 92       	push	r6
    33d0:	7f 92       	push	r7
    33d2:	8f 92       	push	r8
    33d4:	9f 92       	push	r9
    33d6:	af 92       	push	r10
    33d8:	bf 92       	push	r11
    33da:	cf 92       	push	r12
    33dc:	df 92       	push	r13
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	28 97       	sbiw	r28, 0x08	; 8
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	de bf       	out	0x3e, r29	; 62
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	cd bf       	out	0x3d, r28	; 61
    33fa:	2c 01       	movw	r4, r24
    33fc:	7a 83       	std	Y+2, r23	; 0x02
    33fe:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    3400:	fc 01       	movw	r30, r24
    3402:	01 90       	ld	r0, Z+
    3404:	f0 81       	ld	r31, Z
    3406:	e0 2d       	mov	r30, r0
    3408:	fc 83       	std	Y+4, r31	; 0x04
    340a:	eb 83       	std	Y+3, r30	; 0x03
    340c:	fb 01       	movw	r30, r22
    340e:	01 90       	ld	r0, Z+
    3410:	f0 81       	ld	r31, Z
    3412:	e0 2d       	mov	r30, r0
    3414:	fe 83       	std	Y+6, r31	; 0x06
    3416:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3418:	60 91 c7 03 	lds	r22, 0x03C7
    341c:	70 91 c8 03 	lds	r23, 0x03C8
    3420:	65 30       	cpi	r22, 0x05	; 5
    3422:	71 05       	cpc	r23, r1
    3424:	34 f4       	brge	.+12     	; 0x3432 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    3426:	10 92 c8 03 	sts	0x03C8, r1
    342a:	10 92 c7 03 	sts	0x03C7, r1
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3432:	40 91 c9 03 	lds	r20, 0x03C9
    3436:	50 91 ca 03 	lds	r21, 0x03CA
    343a:	45 30       	cpi	r20, 0x05	; 5
    343c:	51 05       	cpc	r21, r1
    343e:	34 f4       	brge	.+12     	; 0x344c <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    3440:	10 92 ca 03 	sts	0x03CA, r1
    3444:	10 92 c9 03 	sts	0x03C9, r1
    3448:	40 e0       	ldi	r20, 0x00	; 0
    344a:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    344c:	80 91 cb 03 	lds	r24, 0x03CB
    3450:	90 91 cc 03 	lds	r25, 0x03CC
    3454:	85 30       	cpi	r24, 0x05	; 5
    3456:	91 05       	cpc	r25, r1
    3458:	24 f4       	brge	.+8      	; 0x3462 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    345a:	10 92 cc 03 	sts	0x03CC, r1
    345e:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3462:	00 91 cd 03 	lds	r16, 0x03CD
    3466:	10 91 ce 03 	lds	r17, 0x03CE
    346a:	05 30       	cpi	r16, 0x05	; 5
    346c:	11 05       	cpc	r17, r1
    346e:	34 f4       	brge	.+12     	; 0x347c <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    3470:	10 92 ce 03 	sts	0x03CE, r1
    3474:	10 92 cd 03 	sts	0x03CD, r1
    3478:	00 e0       	ldi	r16, 0x00	; 0
    347a:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    347c:	60 90 cf 03 	lds	r6, 0x03CF
    3480:	70 90 d0 03 	lds	r7, 0x03D0
    3484:	f5 e0       	ldi	r31, 0x05	; 5
    3486:	6f 16       	cp	r6, r31
    3488:	71 04       	cpc	r7, r1
    348a:	34 f4       	brge	.+12     	; 0x3498 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    348c:	10 92 d0 03 	sts	0x03D0, r1
    3490:	10 92 cf 03 	sts	0x03CF, r1
    3494:	66 24       	eor	r6, r6
    3496:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3498:	20 91 d1 03 	lds	r18, 0x03D1
    349c:	30 91 d2 03 	lds	r19, 0x03D2
    34a0:	25 30       	cpi	r18, 0x05	; 5
    34a2:	31 05       	cpc	r19, r1
    34a4:	34 f4       	brge	.+12     	; 0x34b2 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    34a6:	10 92 d2 03 	sts	0x03D2, r1
    34aa:	10 92 d1 03 	sts	0x03D1, r1
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    34b2:	80 91 d3 03 	lds	r24, 0x03D3
    34b6:	90 91 d4 03 	lds	r25, 0x03D4
    34ba:	85 30       	cpi	r24, 0x05	; 5
    34bc:	91 05       	cpc	r25, r1
    34be:	24 f4       	brge	.+8      	; 0x34c8 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    34c0:	10 92 d4 03 	sts	0x03D4, r1
    34c4:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    34c8:	80 91 d5 03 	lds	r24, 0x03D5
    34cc:	90 91 d6 03 	lds	r25, 0x03D6
    34d0:	85 30       	cpi	r24, 0x05	; 5
    34d2:	91 05       	cpc	r25, r1
    34d4:	34 f4       	brge	.+12     	; 0x34e2 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    34d6:	10 92 d6 03 	sts	0x03D6, r1
    34da:	10 92 d5 03 	sts	0x03D5, r1
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    34e2:	ee 24       	eor	r14, r14
    34e4:	ff 24       	eor	r15, r15
    34e6:	e6 1a       	sub	r14, r22
    34e8:	f7 0a       	sbc	r15, r23
    34ea:	5a 01       	movw	r10, r20
    34ec:	b5 94       	asr	r11
    34ee:	a7 94       	ror	r10
    34f0:	15 95       	asr	r17
    34f2:	07 95       	ror	r16
    34f4:	69 01       	movw	r12, r18
    34f6:	d5 94       	asr	r13
    34f8:	c7 94       	ror	r12
    34fa:	4c 01       	movw	r8, r24
    34fc:	95 94       	asr	r9
    34fe:	87 94       	ror	r8
    3500:	0e 94 29 28 	call	0x5052	; 0x5052 <rand>
    3504:	93 01       	movw	r18, r6
    3506:	2e 51       	subi	r18, 0x1E	; 30
    3508:	30 40       	sbci	r19, 0x00	; 0
    350a:	2e 0d       	add	r18, r14
    350c:	3f 1d       	adc	r19, r15
    350e:	20 0f       	add	r18, r16
    3510:	31 1f       	adc	r19, r17
    3512:	2c 0d       	add	r18, r12
    3514:	3d 1d       	adc	r19, r13
    3516:	2a 19       	sub	r18, r10
    3518:	3b 09       	sbc	r19, r11
    351a:	28 19       	sub	r18, r8
    351c:	39 09       	sbc	r19, r9
    351e:	4c e3       	ldi	r20, 0x3C	; 60
    3520:	24 2e       	mov	r2, r20
    3522:	31 2c       	mov	r3, r1
    3524:	b1 01       	movw	r22, r2
    3526:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__divmodhi4>
    352a:	28 0f       	add	r18, r24
    352c:	39 1f       	adc	r19, r25
    352e:	38 87       	std	Y+8, r19	; 0x08
    3530:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3532:	e0 90 c9 03 	lds	r14, 0x03C9
    3536:	f0 90 ca 03 	lds	r15, 0x03CA
    353a:	f5 94       	asr	r15
    353c:	e7 94       	ror	r14
    353e:	00 91 cb 03 	lds	r16, 0x03CB
    3542:	10 91 cc 03 	lds	r17, 0x03CC
    3546:	15 95       	asr	r17
    3548:	07 95       	ror	r16
    354a:	15 95       	asr	r17
    354c:	07 95       	ror	r16
    354e:	c0 90 cd 03 	lds	r12, 0x03CD
    3552:	d0 90 ce 03 	lds	r13, 0x03CE
    3556:	d5 94       	asr	r13
    3558:	c7 94       	ror	r12
    355a:	80 90 d1 03 	lds	r8, 0x03D1
    355e:	90 90 d2 03 	lds	r9, 0x03D2
    3562:	95 94       	asr	r9
    3564:	87 94       	ror	r8
    3566:	60 90 d3 03 	lds	r6, 0x03D3
    356a:	70 90 d4 03 	lds	r7, 0x03D4
    356e:	75 94       	asr	r7
    3570:	67 94       	ror	r6
    3572:	75 94       	asr	r7
    3574:	67 94       	ror	r6
    3576:	a0 90 d5 03 	lds	r10, 0x03D5
    357a:	b0 90 d6 03 	lds	r11, 0x03D6
    357e:	b5 94       	asr	r11
    3580:	a7 94       	ror	r10
    3582:	0e 94 29 28 	call	0x5052	; 0x5052 <rand>
    3586:	97 01       	movw	r18, r14
    3588:	20 0f       	add	r18, r16
    358a:	31 1f       	adc	r19, r17
    358c:	2e 51       	subi	r18, 0x1E	; 30
    358e:	30 40       	sbci	r19, 0x00	; 0
    3590:	2c 0d       	add	r18, r12
    3592:	3d 1d       	adc	r19, r13
    3594:	2a 19       	sub	r18, r10
    3596:	3b 09       	sbc	r19, r11
    3598:	28 19       	sub	r18, r8
    359a:	39 09       	sbc	r19, r9
    359c:	26 19       	sub	r18, r6
    359e:	37 09       	sbc	r19, r7
    35a0:	b1 01       	movw	r22, r2
    35a2:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__divmodhi4>
    35a6:	28 0f       	add	r18, r24
    35a8:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    35aa:	4b 81       	ldd	r20, Y+3	; 0x03
    35ac:	5c 81       	ldd	r21, Y+4	; 0x04
    35ae:	57 fd       	sbrc	r21, 7
    35b0:	97 c0       	rjmp	.+302    	; 0x36e0 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    35b2:	5a 01       	movw	r10, r20
    35b4:	cc 24       	eor	r12, r12
    35b6:	b7 fc       	sbrc	r11, 7
    35b8:	c0 94       	com	r12
    35ba:	dc 2c       	mov	r13, r12
    35bc:	8f 81       	ldd	r24, Y+7	; 0x07
    35be:	98 85       	ldd	r25, Y+8	; 0x08
    35c0:	3c 01       	movw	r6, r24
    35c2:	88 24       	eor	r8, r8
    35c4:	77 fc       	sbrc	r7, 7
    35c6:	80 94       	com	r8
    35c8:	98 2c       	mov	r9, r8
    35ca:	79 01       	movw	r14, r18
    35cc:	00 27       	eor	r16, r16
    35ce:	f7 fc       	sbrc	r15, 7
    35d0:	00 95       	com	r16
    35d2:	10 2f       	mov	r17, r16
    35d4:	c4 01       	movw	r24, r8
    35d6:	b3 01       	movw	r22, r6
    35d8:	6e 19       	sub	r22, r14
    35da:	7f 09       	sbc	r23, r15
    35dc:	80 0b       	sbc	r24, r16
    35de:	91 0b       	sbc	r25, r17
    35e0:	a6 01       	movw	r20, r12
    35e2:	95 01       	movw	r18, r10
    35e4:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__mulsi3>
    35e8:	f7 e0       	ldi	r31, 0x07	; 7
    35ea:	95 95       	asr	r25
    35ec:	87 95       	ror	r24
    35ee:	77 95       	ror	r23
    35f0:	67 95       	ror	r22
    35f2:	fa 95       	dec	r31
    35f4:	d1 f7       	brne	.-12     	; 0x35ea <obstacleAvoidance+0x224>
    35f6:	6a 0d       	add	r22, r10
    35f8:	7b 1d       	adc	r23, r11
    35fa:	8c 1d       	adc	r24, r12
    35fc:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    35fe:	f2 01       	movw	r30, r4
    3600:	71 83       	std	Z+1, r23	; 0x01
    3602:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    3604:	2d 81       	ldd	r18, Y+5	; 0x05
    3606:	3e 81       	ldd	r19, Y+6	; 0x06
    3608:	37 fd       	sbrc	r19, 7
    360a:	99 c0       	rjmp	.+306    	; 0x373e <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    360c:	59 01       	movw	r10, r18
    360e:	cc 24       	eor	r12, r12
    3610:	b7 fc       	sbrc	r11, 7
    3612:	c0 94       	com	r12
    3614:	dc 2c       	mov	r13, r12
    3616:	c8 01       	movw	r24, r16
    3618:	b7 01       	movw	r22, r14
    361a:	66 0d       	add	r22, r6
    361c:	77 1d       	adc	r23, r7
    361e:	88 1d       	adc	r24, r8
    3620:	99 1d       	adc	r25, r9
    3622:	a6 01       	movw	r20, r12
    3624:	95 01       	movw	r18, r10
    3626:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__mulsi3>
    362a:	37 e0       	ldi	r19, 0x07	; 7
    362c:	95 95       	asr	r25
    362e:	87 95       	ror	r24
    3630:	77 95       	ror	r23
    3632:	67 95       	ror	r22
    3634:	3a 95       	dec	r19
    3636:	d1 f7       	brne	.-12     	; 0x362c <obstacleAvoidance+0x266>
    3638:	6a 0d       	add	r22, r10
    363a:	7b 1d       	adc	r23, r11
    363c:	8c 1d       	adc	r24, r12
    363e:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3640:	9b 01       	movw	r18, r22
    3642:	e9 81       	ldd	r30, Y+1	; 0x01
    3644:	fa 81       	ldd	r31, Y+2	; 0x02
    3646:	71 83       	std	Z+1, r23	; 0x01
    3648:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    364a:	f2 e0       	ldi	r31, 0x02	; 2
    364c:	21 30       	cpi	r18, 0x01	; 1
    364e:	3f 07       	cpc	r19, r31
    3650:	44 f0       	brlt	.+16     	; 0x3662 <obstacleAvoidance+0x29c>
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	92 e0       	ldi	r25, 0x02	; 2
    3656:	e9 81       	ldd	r30, Y+1	; 0x01
    3658:	fa 81       	ldd	r31, Y+2	; 0x02
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	80 83       	st	Z, r24
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3662:	f2 01       	movw	r30, r4
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	f2 e0       	ldi	r31, 0x02	; 2
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	9f 07       	cpc	r25, r31
    366e:	4c f0       	brlt	.+18     	; 0x3682 <obstacleAvoidance+0x2bc>
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	f2 01       	movw	r30, r4
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	80 83       	st	Z, r24
    367a:	e9 81       	ldd	r30, Y+1	; 0x01
    367c:	fa 81       	ldd	r31, Y+2	; 0x02
    367e:	20 81       	ld	r18, Z
    3680:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    3682:	fe ef       	ldi	r31, 0xFE	; 254
    3684:	20 30       	cpi	r18, 0x00	; 0
    3686:	3f 07       	cpc	r19, r31
    3688:	4c f4       	brge	.+18     	; 0x369c <obstacleAvoidance+0x2d6>
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	9e ef       	ldi	r25, 0xFE	; 254
    368e:	e9 81       	ldd	r30, Y+1	; 0x01
    3690:	fa 81       	ldd	r31, Y+2	; 0x02
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
    3696:	f2 01       	movw	r30, r4
    3698:	80 81       	ld	r24, Z
    369a:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    369c:	fe ef       	ldi	r31, 0xFE	; 254
    369e:	80 30       	cpi	r24, 0x00	; 0
    36a0:	9f 07       	cpc	r25, r31
    36a2:	2c f4       	brge	.+10     	; 0x36ae <obstacleAvoidance+0x2e8>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	9e ef       	ldi	r25, 0xFE	; 254
    36a8:	f2 01       	movw	r30, r4
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24

}
    36ae:	28 96       	adiw	r28, 0x08	; 8
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	ff 90       	pop	r15
    36c4:	ef 90       	pop	r14
    36c6:	df 90       	pop	r13
    36c8:	cf 90       	pop	r12
    36ca:	bf 90       	pop	r11
    36cc:	af 90       	pop	r10
    36ce:	9f 90       	pop	r9
    36d0:	8f 90       	pop	r8
    36d2:	7f 90       	pop	r7
    36d4:	6f 90       	pop	r6
    36d6:	5f 90       	pop	r5
    36d8:	4f 90       	pop	r4
    36da:	3f 90       	pop	r3
    36dc:	2f 90       	pop	r2
    36de:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    36e0:	4d 81       	ldd	r20, Y+5	; 0x05
    36e2:	5e 81       	ldd	r21, Y+6	; 0x06
    36e4:	5a 01       	movw	r10, r20
    36e6:	cc 24       	eor	r12, r12
    36e8:	b7 fc       	sbrc	r11, 7
    36ea:	c0 94       	com	r12
    36ec:	dc 2c       	mov	r13, r12
    36ee:	8f 81       	ldd	r24, Y+7	; 0x07
    36f0:	98 85       	ldd	r25, Y+8	; 0x08
    36f2:	3c 01       	movw	r6, r24
    36f4:	88 24       	eor	r8, r8
    36f6:	77 fc       	sbrc	r7, 7
    36f8:	80 94       	com	r8
    36fa:	98 2c       	mov	r9, r8
    36fc:	79 01       	movw	r14, r18
    36fe:	00 27       	eor	r16, r16
    3700:	f7 fc       	sbrc	r15, 7
    3702:	00 95       	com	r16
    3704:	10 2f       	mov	r17, r16
    3706:	c8 01       	movw	r24, r16
    3708:	b7 01       	movw	r22, r14
    370a:	66 0d       	add	r22, r6
    370c:	77 1d       	adc	r23, r7
    370e:	88 1d       	adc	r24, r8
    3710:	99 1d       	adc	r25, r9
    3712:	a6 01       	movw	r20, r12
    3714:	95 01       	movw	r18, r10
    3716:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__mulsi3>
    371a:	e7 e0       	ldi	r30, 0x07	; 7
    371c:	95 95       	asr	r25
    371e:	87 95       	ror	r24
    3720:	77 95       	ror	r23
    3722:	67 95       	ror	r22
    3724:	ea 95       	dec	r30
    3726:	d1 f7       	brne	.-12     	; 0x371c <obstacleAvoidance+0x356>
    3728:	26 1b       	sub	r18, r22
    372a:	37 0b       	sbc	r19, r23
    372c:	48 0b       	sbc	r20, r24
    372e:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    3730:	f2 01       	movw	r30, r4
    3732:	31 83       	std	Z+1, r19	; 0x01
    3734:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    3736:	2d 81       	ldd	r18, Y+5	; 0x05
    3738:	3e 81       	ldd	r19, Y+6	; 0x06
    373a:	37 ff       	sbrs	r19, 7
    373c:	67 cf       	rjmp	.-306    	; 0x360c <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    373e:	2b 81       	ldd	r18, Y+3	; 0x03
    3740:	3c 81       	ldd	r19, Y+4	; 0x04
    3742:	59 01       	movw	r10, r18
    3744:	cc 24       	eor	r12, r12
    3746:	b7 fc       	sbrc	r11, 7
    3748:	c0 94       	com	r12
    374a:	dc 2c       	mov	r13, r12
    374c:	c4 01       	movw	r24, r8
    374e:	b3 01       	movw	r22, r6
    3750:	6e 19       	sub	r22, r14
    3752:	7f 09       	sbc	r23, r15
    3754:	80 0b       	sbc	r24, r16
    3756:	91 0b       	sbc	r25, r17
    3758:	a6 01       	movw	r20, r12
    375a:	95 01       	movw	r18, r10
    375c:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__mulsi3>
    3760:	27 e0       	ldi	r18, 0x07	; 7
    3762:	95 95       	asr	r25
    3764:	87 95       	ror	r24
    3766:	77 95       	ror	r23
    3768:	67 95       	ror	r22
    376a:	2a 95       	dec	r18
    376c:	d1 f7       	brne	.-12     	; 0x3762 <obstacleAvoidance+0x39c>
    376e:	a6 1a       	sub	r10, r22
    3770:	b7 0a       	sbc	r11, r23
    3772:	c8 0a       	sbc	r12, r24
    3774:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    3776:	95 01       	movw	r18, r10
    3778:	e9 81       	ldd	r30, Y+1	; 0x01
    377a:	fa 81       	ldd	r31, Y+2	; 0x02
    377c:	b1 82       	std	Z+1, r11	; 0x01
    377e:	a0 82       	st	Z, r10
    3780:	64 cf       	rjmp	.-312    	; 0x364a <obstacleAvoidance+0x284>

00003782 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3782:	80 91 6f 03 	lds	r24, 0x036F
    3786:	90 91 70 03 	lds	r25, 0x0370
    378a:	21 e0       	ldi	r18, 0x01	; 1
    378c:	84 3a       	cpi	r24, 0xA4	; 164
    378e:	92 07       	cpc	r25, r18
    3790:	d4 f0       	brlt	.+52     	; 0x37c6 <cliffDetected+0x44>
    3792:	80 91 71 03 	lds	r24, 0x0371
    3796:	90 91 72 03 	lds	r25, 0x0372
    379a:	21 e0       	ldi	r18, 0x01	; 1
    379c:	84 3a       	cpi	r24, 0xA4	; 164
    379e:	92 07       	cpc	r25, r18
    37a0:	94 f0       	brlt	.+36     	; 0x37c6 <cliffDetected+0x44>
    37a2:	80 91 73 03 	lds	r24, 0x0373
    37a6:	90 91 74 03 	lds	r25, 0x0374
    37aa:	21 e0       	ldi	r18, 0x01	; 1
    37ac:	84 3a       	cpi	r24, 0xA4	; 164
    37ae:	92 07       	cpc	r25, r18
    37b0:	74 f0       	brlt	.+28     	; 0x37ce <cliffDetected+0x4c>
		return 1;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	20 91 75 03 	lds	r18, 0x0375
    37b8:	30 91 76 03 	lds	r19, 0x0376
    37bc:	91 e0       	ldi	r25, 0x01	; 1
    37be:	24 3a       	cpi	r18, 0xA4	; 164
    37c0:	39 07       	cpc	r19, r25
    37c2:	1c f4       	brge	.+6      	; 0x37ca <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    37c4:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	08 95       	ret
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	08 95       	ret
    37ce:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    37d0:	08 95       	ret

000037d2 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	80 93 3e 05 	sts	0x053E, r24
}
    37d8:	08 95       	ret

000037da <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    37da:	10 92 3e 05 	sts	0x053E, r1
}
    37de:	08 95       	ret

000037e0 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	80 93 3f 05 	sts	0x053F, r24
}
    37e6:	08 95       	ret

000037e8 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    37e8:	10 92 3f 05 	sts	0x053F, r1
}
    37ec:	08 95       	ret

000037ee <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    37ee:	a0 e8       	ldi	r26, 0x80	; 128
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	1c 92       	st	X, r1
	TCCR1B = 0;
    37f4:	e1 e8       	ldi	r30, 0x81	; 129
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    37fa:	8c 91       	ld	r24, X
    37fc:	89 6a       	ori	r24, 0xA9	; 169
    37fe:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3800:	80 81       	ld	r24, Z
    3802:	89 60       	ori	r24, 0x09	; 9
    3804:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3806:	80 91 0c 02 	lds	r24, 0x020C
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	90 93 89 00 	sts	0x0089, r25
    3810:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3814:	80 91 0d 02 	lds	r24, 0x020D
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	90 93 8b 00 	sts	0x008B, r25
    381e:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3822:	80 91 0e 02 	lds	r24, 0x020E
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	90 93 8d 00 	sts	0x008D, r25
    382c:	80 93 8c 00 	sts	0x008C, r24

}
    3830:	08 95       	ret

00003832 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 91 0f 04 	lds	r25, 0x040F
    3838:	89 1b       	sub	r24, r25
    383a:	80 93 0f 04 	sts	0x040F, r24

	if(blinkState) {
    383e:	88 23       	and	r24, r24
    3840:	39 f4       	brne	.+14     	; 0x3850 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    3842:	80 91 80 00 	lds	r24, 0x0080
    3846:	87 7f       	andi	r24, 0xF7	; 247
    3848:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    384c:	2f 98       	cbi	0x05, 7	; 5
    384e:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    3850:	80 91 80 00 	lds	r24, 0x0080
    3854:	88 60       	ori	r24, 0x08	; 8
    3856:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    385a:	8f ef       	ldi	r24, 0xFF	; 255
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	90 93 8d 00 	sts	0x008D, r25
    3862:	80 93 8c 00 	sts	0x008C, r24
    3866:	08 95       	ret

00003868 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3868:	88 23       	and	r24, r24
    386a:	59 f0       	breq	.+22     	; 0x3882 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    386c:	90 91 80 00 	lds	r25, 0x0080
    3870:	90 68       	ori	r25, 0x80	; 128
    3872:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	90 93 89 00 	sts	0x0089, r25
    387c:	80 93 88 00 	sts	0x0088, r24
    3880:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3882:	80 91 80 00 	lds	r24, 0x0080
    3886:	8f 77       	andi	r24, 0x7F	; 127
    3888:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    388c:	2d 98       	cbi	0x05, 5	; 5
    388e:	08 95       	ret

00003890 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3890:	88 23       	and	r24, r24
    3892:	59 f0       	breq	.+22     	; 0x38aa <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3894:	90 91 80 00 	lds	r25, 0x0080
    3898:	90 62       	ori	r25, 0x20	; 32
    389a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	90 93 8b 00 	sts	0x008B, r25
    38a4:	80 93 8a 00 	sts	0x008A, r24
    38a8:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    38aa:	80 91 80 00 	lds	r24, 0x0080
    38ae:	8f 7d       	andi	r24, 0xDF	; 223
    38b0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    38b4:	2e 98       	cbi	0x05, 6	; 5
    38b6:	08 95       	ret

000038b8 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    38b8:	88 23       	and	r24, r24
    38ba:	59 f0       	breq	.+22     	; 0x38d2 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    38bc:	90 91 80 00 	lds	r25, 0x0080
    38c0:	98 60       	ori	r25, 0x08	; 8
    38c2:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	90 93 8d 00 	sts	0x008D, r25
    38cc:	80 93 8c 00 	sts	0x008C, r24
    38d0:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    38d2:	80 91 80 00 	lds	r24, 0x0080
    38d6:	87 7f       	andi	r24, 0xF7	; 247
    38d8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    38dc:	2f 98       	cbi	0x05, 7	; 5
    38de:	08 95       	ret

000038e0 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    38e0:	83 30       	cpi	r24, 0x03	; 3
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <setGreenLed+0x6>
    38e4:	5a c0       	rjmp	.+180    	; 0x399a <setGreenLed+0xba>
    38e6:	84 30       	cpi	r24, 0x04	; 4
    38e8:	80 f0       	brcs	.+32     	; 0x390a <setGreenLed+0x2a>
    38ea:	85 30       	cpi	r24, 0x05	; 5
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <setGreenLed+0x10>
    38ee:	41 c0       	rjmp	.+130    	; 0x3972 <setGreenLed+0x92>
    38f0:	85 30       	cpi	r24, 0x05	; 5
    38f2:	d0 f4       	brcc	.+52     	; 0x3928 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    38f4:	66 23       	and	r22, r22
    38f6:	09 f4       	brne	.+2      	; 0x38fa <setGreenLed+0x1a>
    38f8:	68 c0       	rjmp	.+208    	; 0x39ca <setGreenLed+0xea>
    38fa:	80 91 0b 01 	lds	r24, 0x010B
    38fe:	8f 7e       	andi	r24, 0xEF	; 239
    3900:	80 93 0b 01 	sts	0x010B, r24
    3904:	80 91 0b 01 	lds	r24, 0x010B
    3908:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	e1 f1       	breq	.+120    	; 0x3986 <setGreenLed+0xa6>
    390e:	82 30       	cpi	r24, 0x02	; 2
    3910:	80 f0       	brcs	.+32     	; 0x3932 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3912:	66 23       	and	r22, r22
    3914:	09 f4       	brne	.+2      	; 0x3918 <setGreenLed+0x38>
    3916:	46 c0       	rjmp	.+140    	; 0x39a4 <setGreenLed+0xc4>
    3918:	80 91 0b 01 	lds	r24, 0x010B
    391c:	8b 7f       	andi	r24, 0xFB	; 251
    391e:	80 93 0b 01 	sts	0x010B, r24
    3922:	80 91 0b 01 	lds	r24, 0x010B
    3926:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3928:	86 30       	cpi	r24, 0x06	; 6
    392a:	c9 f0       	breq	.+50     	; 0x395e <setGreenLed+0x7e>
    392c:	87 30       	cpi	r24, 0x07	; 7
    392e:	61 f0       	breq	.+24     	; 0x3948 <setGreenLed+0x68>
    3930:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3932:	66 23       	and	r22, r22
    3934:	09 f4       	brne	.+2      	; 0x3938 <setGreenLed+0x58>
    3936:	51 c0       	rjmp	.+162    	; 0x39da <setGreenLed+0xfa>
    3938:	80 91 0b 01 	lds	r24, 0x010B
    393c:	8e 7f       	andi	r24, 0xFE	; 254
    393e:	80 93 0b 01 	sts	0x010B, r24
    3942:	80 91 0b 01 	lds	r24, 0x010B
    3946:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3948:	66 23       	and	r22, r22
    394a:	09 f0       	breq	.+2      	; 0x394e <setGreenLed+0x6e>
    394c:	5e c0       	rjmp	.+188    	; 0x3a0a <setGreenLed+0x12a>
    394e:	80 91 0b 01 	lds	r24, 0x010B
    3952:	80 68       	ori	r24, 0x80	; 128
    3954:	80 93 0b 01 	sts	0x010B, r24
    3958:	80 91 0b 01 	lds	r24, 0x010B
    395c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    395e:	66 23       	and	r22, r22
    3960:	49 f1       	breq	.+82     	; 0x39b4 <setGreenLed+0xd4>
    3962:	80 91 0b 01 	lds	r24, 0x010B
    3966:	8f 7b       	andi	r24, 0xBF	; 191
    3968:	80 93 0b 01 	sts	0x010B, r24
    396c:	80 91 0b 01 	lds	r24, 0x010B
    3970:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    3972:	66 23       	and	r22, r22
    3974:	d1 f1       	breq	.+116    	; 0x39ea <setGreenLed+0x10a>
    3976:	80 91 0b 01 	lds	r24, 0x010B
    397a:	8f 7d       	andi	r24, 0xDF	; 223
    397c:	80 93 0b 01 	sts	0x010B, r24
    3980:	80 91 0b 01 	lds	r24, 0x010B
    3984:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3986:	66 23       	and	r22, r22
    3988:	c1 f1       	breq	.+112    	; 0x39fa <setGreenLed+0x11a>
    398a:	80 91 0b 01 	lds	r24, 0x010B
    398e:	8d 7f       	andi	r24, 0xFD	; 253
    3990:	80 93 0b 01 	sts	0x010B, r24
    3994:	80 91 0b 01 	lds	r24, 0x010B
    3998:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    399a:	66 23       	and	r22, r22
    399c:	99 f0       	breq	.+38     	; 0x39c4 <setGreenLed+0xe4>
    399e:	a3 98       	cbi	0x14, 3	; 20
    39a0:	84 b3       	in	r24, 0x14	; 20
    39a2:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    39a4:	80 91 0b 01 	lds	r24, 0x010B
    39a8:	84 60       	ori	r24, 0x04	; 4
    39aa:	80 93 0b 01 	sts	0x010B, r24
    39ae:	80 91 0b 01 	lds	r24, 0x010B
    39b2:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    39b4:	80 91 0b 01 	lds	r24, 0x010B
    39b8:	80 64       	ori	r24, 0x40	; 64
    39ba:	80 93 0b 01 	sts	0x010B, r24
    39be:	80 91 0b 01 	lds	r24, 0x010B
    39c2:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    39c4:	a3 9a       	sbi	0x14, 3	; 20
    39c6:	84 b3       	in	r24, 0x14	; 20
    39c8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    39ca:	80 91 0b 01 	lds	r24, 0x010B
    39ce:	80 61       	ori	r24, 0x10	; 16
    39d0:	80 93 0b 01 	sts	0x010B, r24
    39d4:	80 91 0b 01 	lds	r24, 0x010B
    39d8:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    39da:	80 91 0b 01 	lds	r24, 0x010B
    39de:	81 60       	ori	r24, 0x01	; 1
    39e0:	80 93 0b 01 	sts	0x010B, r24
    39e4:	80 91 0b 01 	lds	r24, 0x010B
    39e8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    39ea:	80 91 0b 01 	lds	r24, 0x010B
    39ee:	80 62       	ori	r24, 0x20	; 32
    39f0:	80 93 0b 01 	sts	0x010B, r24
    39f4:	80 91 0b 01 	lds	r24, 0x010B
    39f8:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    39fa:	80 91 0b 01 	lds	r24, 0x010B
    39fe:	82 60       	ori	r24, 0x02	; 2
    3a00:	80 93 0b 01 	sts	0x010B, r24
    3a04:	80 91 0b 01 	lds	r24, 0x010B
    3a08:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3a0a:	80 91 0b 01 	lds	r24, 0x010B
    3a0e:	8f 77       	andi	r24, 0x7F	; 127
    3a10:	80 93 0b 01 	sts	0x010B, r24
    3a14:	80 91 0b 01 	lds	r24, 0x010B
    3a18:	08 95       	ret

00003a1a <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    3a1a:	eb e0       	ldi	r30, 0x0B	; 11
    3a1c:	f1 e0       	ldi	r31, 0x01	; 1
    3a1e:	80 81       	ld	r24, Z
    3a20:	81 60       	ori	r24, 0x01	; 1
    3a22:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    3a24:	80 81       	ld	r24, Z
    3a26:	82 60       	ori	r24, 0x02	; 2
    3a28:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    3a2a:	80 81       	ld	r24, Z
    3a2c:	84 60       	ori	r24, 0x04	; 4
    3a2e:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    3a30:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    3a32:	80 81       	ld	r24, Z
    3a34:	80 61       	ori	r24, 0x10	; 16
    3a36:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    3a38:	80 81       	ld	r24, Z
    3a3a:	80 62       	ori	r24, 0x20	; 32
    3a3c:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    3a3e:	80 81       	ld	r24, Z
    3a40:	80 64       	ori	r24, 0x40	; 64
    3a42:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    3a44:	80 81       	ld	r24, Z
    3a46:	80 68       	ori	r24, 0x80	; 128
    3a48:	80 83       	st	Z, r24

}
    3a4a:	08 95       	ret

00003a4c <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    3a4c:	eb e0       	ldi	r30, 0x0B	; 11
    3a4e:	f1 e0       	ldi	r31, 0x01	; 1
    3a50:	80 81       	ld	r24, Z
    3a52:	8e 7f       	andi	r24, 0xFE	; 254
    3a54:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    3a56:	80 81       	ld	r24, Z
    3a58:	8d 7f       	andi	r24, 0xFD	; 253
    3a5a:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    3a5c:	80 81       	ld	r24, Z
    3a5e:	8b 7f       	andi	r24, 0xFB	; 251
    3a60:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    3a62:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    3a64:	80 81       	ld	r24, Z
    3a66:	8f 7e       	andi	r24, 0xEF	; 239
    3a68:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    3a6a:	80 81       	ld	r24, Z
    3a6c:	8f 7d       	andi	r24, 0xDF	; 223
    3a6e:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    3a70:	80 81       	ld	r24, Z
    3a72:	8f 7b       	andi	r24, 0xBF	; 191
    3a74:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    3a76:	80 81       	ld	r24, Z
    3a78:	8f 77       	andi	r24, 0x7F	; 127
    3a7a:	80 83       	st	Z, r24

}
    3a7c:	08 95       	ret

00003a7e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    3a7e:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3a82:	80 91 13 02 	lds	r24, 0x0213
    3a86:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3a8a:	88 23       	and	r24, r24
    3a8c:	49 f4       	brne	.+18     	; 0x3aa0 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3a8e:	86 e1       	ldi	r24, 0x16	; 22
    3a90:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3a94:	85 e4       	ldi	r24, 0x45	; 69
    3a96:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3a9a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    3a9e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3aa0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    3aa4:	86 ea       	ldi	r24, 0xA6	; 166
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	90 93 14 02 	sts	0x0214, r25
    3aac:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3ab0:	86 ea       	ldi	r24, 0xA6	; 166
    3ab2:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3ab6:	88 23       	and	r24, r24
    3ab8:	41 f5       	brne	.+80     	; 0x3b0a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3aba:	8d e2       	ldi	r24, 0x2D	; 45
    3abc:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x08);	// measurement mode
    3ac0:	88 e0       	ldi	r24, 0x08	; 8
    3ac2:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3ac6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3aca:	80 91 13 02 	lds	r24, 0x0213
    3ace:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3ad2:	88 23       	and	r24, r24
    3ad4:	d1 f4       	brne	.+52     	; 0x3b0a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3ad6:	81 e3       	ldi	r24, 0x31	; 49
    3ad8:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3ae2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3ae6:	80 91 13 02 	lds	r24, 0x0213
    3aea:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3aee:	88 23       	and	r24, r24
    3af0:	61 f4       	brne	.+24     	; 0x3b0a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3af2:	8c e2       	ldi	r24, 0x2C	; 44
    3af4:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3af8:	89 e0       	ldi	r24, 0x09	; 9
    3afa:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3afe:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	80 93 1a 05 	sts	0x051A, r24
    3b08:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3b0a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3b0e:	82 e0       	ldi	r24, 0x02	; 2
    3b10:	80 93 1a 05 	sts	0x051A, r24
    3b14:	08 95       	ret

00003b16 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3b16:	80 91 13 02 	lds	r24, 0x0213
    3b1a:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3b1e:	88 23       	and	r24, r24
    3b20:	51 f4       	brne	.+20     	; 0x3b36 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3b22:	86 e1       	ldi	r24, 0x16	; 22
    3b24:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3b28:	85 e4       	ldi	r24, 0x45	; 69
    3b2a:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3b2e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    }

	return 0;				// configuration ok
    3b32:	80 e0       	ldi	r24, 0x00	; 0

}
    3b34:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3b36:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
		return 1;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	08 95       	ret

00003b3e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3b3e:	80 91 13 02 	lds	r24, 0x0213
    3b42:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3b46:	88 23       	and	r24, r24
    3b48:	31 f5       	brne	.+76     	; 0x3b96 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3b4a:	8d e2       	ldi	r24, 0x2D	; 45
    3b4c:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x08);	// measurement mode
    3b50:	88 e0       	ldi	r24, 0x08	; 8
    3b52:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3b56:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3b5a:	80 91 13 02 	lds	r24, 0x0213
    3b5e:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3b62:	88 23       	and	r24, r24
    3b64:	c1 f4       	brne	.+48     	; 0x3b96 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3b66:	81 e3       	ldi	r24, 0x31	; 49
    3b68:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3b72:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3b76:	80 91 13 02 	lds	r24, 0x0213
    3b7a:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3b7e:	88 23       	and	r24, r24
    3b80:	51 f4       	brne	.+20     	; 0x3b96 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3b82:	8c e2       	ldi	r24, 0x2C	; 44
    3b84:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3b88:	89 e0       	ldi	r24, 0x09	; 9
    3b8a:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3b8e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
    }

	return 0;
    3b92:	80 e0       	ldi	r24, 0x00	; 0

}
    3b94:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3b96:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>
		return 1;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	08 95       	ret

00003b9e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	0f 92       	push	r0
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    3bae:	80 91 1a 05 	lds	r24, 0x051A
    3bb2:	88 23       	and	r24, r24
    3bb4:	91 f0       	breq	.+36     	; 0x3bda <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    3bb6:	81 30       	cpi	r24, 0x01	; 1
    3bb8:	09 f4       	brne	.+2      	; 0x3bbc <readAccelXY+0x1e>
    3bba:	88 c0       	rjmp	.+272    	; 0x3ccc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    3bbc:	10 92 1c 05 	sts	0x051C, r1
    3bc0:	10 92 1b 05 	sts	0x051B, r1
		accY = 0;
    3bc4:	10 92 1e 05 	sts	0x051E, r1
    3bc8:	10 92 1d 05 	sts	0x051D, r1

	}

}
    3bcc:	0f 90       	pop	r0
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	1f 91       	pop	r17
    3bd4:	0f 91       	pop	r16
    3bd6:	ff 90       	pop	r15
    3bd8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3bda:	80 91 13 02 	lds	r24, 0x0213
    3bde:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3be2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    3be4:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3be8:	80 91 13 02 	lds	r24, 0x0213
    3bec:	8f 5f       	subi	r24, 0xFF	; 255
    3bee:	0e 94 57 10 	call	0x20ae	; 0x20ae <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3bf2:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3bf6:	08 2f       	mov	r16, r24
    3bf8:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3bfc:	f8 2e       	mov	r15, r24
    3bfe:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3c02:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3c04:	0e 94 a1 10 	call	0x2142	; 0x2142 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3c0e:	90 91 6e 05 	lds	r25, 0x056E
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	99 23       	and	r25, r25
    3c16:	39 f1       	breq	.+78     	; 0x3c66 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3c18:	4f 2d       	mov	r20, r15
    3c1a:	55 27       	eor	r21, r21
    3c1c:	47 fd       	sbrc	r20, 7
    3c1e:	50 95       	com	r21
    3c20:	54 2f       	mov	r21, r20
    3c22:	44 27       	eor	r20, r20
    3c24:	60 2f       	mov	r22, r16
    3c26:	77 27       	eor	r23, r23
    3c28:	67 fd       	sbrc	r22, 7
    3c2a:	70 95       	com	r23
    3c2c:	46 2b       	or	r20, r22
    3c2e:	57 2b       	or	r21, r23
    3c30:	50 93 1c 05 	sts	0x051C, r21
    3c34:	40 93 1b 05 	sts	0x051B, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3c38:	28 2f       	mov	r18, r24
    3c3a:	33 27       	eor	r19, r19
    3c3c:	27 fd       	sbrc	r18, 7
    3c3e:	30 95       	com	r19
    3c40:	32 2f       	mov	r19, r18
    3c42:	22 27       	eor	r18, r18
    3c44:	81 2f       	mov	r24, r17
    3c46:	99 27       	eor	r25, r25
    3c48:	87 fd       	sbrc	r24, 7
    3c4a:	90 95       	com	r25
    3c4c:	28 2b       	or	r18, r24
    3c4e:	39 2b       	or	r19, r25
    3c50:	30 93 1e 05 	sts	0x051E, r19
    3c54:	20 93 1d 05 	sts	0x051D, r18
		accX = 0;
		accY = 0;

	}

}
    3c58:	0f 90       	pop	r0
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	1f 91       	pop	r17
    3c60:	0f 91       	pop	r16
    3c62:	ff 90       	pop	r15
    3c64:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3c66:	4f 2d       	mov	r20, r15
    3c68:	55 27       	eor	r21, r21
    3c6a:	47 fd       	sbrc	r20, 7
    3c6c:	50 95       	com	r21
    3c6e:	54 2f       	mov	r21, r20
    3c70:	44 27       	eor	r20, r20
    3c72:	60 2f       	mov	r22, r16
    3c74:	77 27       	eor	r23, r23
    3c76:	67 fd       	sbrc	r22, 7
    3c78:	70 95       	com	r23
    3c7a:	46 2b       	or	r20, r22
    3c7c:	57 2b       	or	r21, r23
    3c7e:	60 91 21 05 	lds	r22, 0x0521
    3c82:	70 91 22 05 	lds	r23, 0x0522
    3c86:	46 1b       	sub	r20, r22
    3c88:	57 0b       	sbc	r21, r23
    3c8a:	50 93 1c 05 	sts	0x051C, r21
    3c8e:	40 93 1b 05 	sts	0x051B, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3c92:	28 2f       	mov	r18, r24
    3c94:	33 27       	eor	r19, r19
    3c96:	27 fd       	sbrc	r18, 7
    3c98:	30 95       	com	r19
    3c9a:	32 2f       	mov	r19, r18
    3c9c:	22 27       	eor	r18, r18
    3c9e:	81 2f       	mov	r24, r17
    3ca0:	99 27       	eor	r25, r25
    3ca2:	87 fd       	sbrc	r24, 7
    3ca4:	90 95       	com	r25
    3ca6:	28 2b       	or	r18, r24
    3ca8:	39 2b       	or	r19, r25
    3caa:	80 91 23 05 	lds	r24, 0x0523
    3cae:	90 91 24 05 	lds	r25, 0x0524
    3cb2:	28 1b       	sub	r18, r24
    3cb4:	39 0b       	sbc	r19, r25
    3cb6:	30 93 1e 05 	sts	0x051E, r19
    3cba:	20 93 1d 05 	sts	0x051D, r18
		accX = 0;
		accY = 0;

	}

}
    3cbe:	0f 90       	pop	r0
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	ff 90       	pop	r15
    3cca:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3ccc:	80 91 13 02 	lds	r24, 0x0213
    3cd0:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3cd4:	82 e3       	ldi	r24, 0x32	; 50
    3cd6:	86 cf       	rjmp	.-244    	; 0x3be4 <readAccelXY+0x46>

00003cd8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3cd8:	df 93       	push	r29
    3cda:	cf 93       	push	r28
    3cdc:	00 d0       	rcall	.+0      	; 0x3cde <readAccelXYZ+0x6>
    3cde:	00 d0       	rcall	.+0      	; 0x3ce0 <readAccelXYZ+0x8>
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    3ce4:	80 91 1a 05 	lds	r24, 0x051A
    3ce8:	88 23       	and	r24, r24
    3cea:	c1 f0       	breq	.+48     	; 0x3d1c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    3cec:	81 30       	cpi	r24, 0x01	; 1
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <readAccelXYZ+0x1a>
    3cf0:	ad c0       	rjmp	.+346    	; 0x3e4c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    3cf2:	10 92 1c 05 	sts	0x051C, r1
    3cf6:	10 92 1b 05 	sts	0x051B, r1
		accY = 0;
    3cfa:	10 92 1e 05 	sts	0x051E, r1
    3cfe:	10 92 1d 05 	sts	0x051D, r1
		accZ = 0;
    3d02:	10 92 20 05 	sts	0x0520, r1
    3d06:	10 92 1f 05 	sts	0x051F, r1

	}

}
    3d0a:	26 96       	adiw	r28, 0x06	; 6
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3d1c:	80 91 13 02 	lds	r24, 0x0213
    3d20:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3d24:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3d26:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3d2a:	80 91 13 02 	lds	r24, 0x0213
    3d2e:	8f 5f       	subi	r24, 0xFF	; 255
    3d30:	0e 94 57 10 	call	0x20ae	; 0x20ae <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3d34:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3d3e:	8a 83       	std	Y+2, r24	; 0x02
    3d40:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3d44:	8b 83       	std	Y+3, r24	; 0x03
    3d46:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3d4a:	8c 83       	std	Y+4, r24	; 0x04
    3d4c:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    3d50:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3d52:	0e 94 a1 10 	call	0x2142	; 0x2142 <i2c_readNak>
    3d56:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3d58:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3d5c:	80 91 6e 05 	lds	r24, 0x056E
    3d60:	88 23       	and	r24, r24
    3d62:	89 f1       	breq	.+98     	; 0x3dc6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3d64:	8a 81       	ldd	r24, Y+2	; 0x02
    3d66:	99 27       	eor	r25, r25
    3d68:	87 fd       	sbrc	r24, 7
    3d6a:	90 95       	com	r25
    3d6c:	98 2f       	mov	r25, r24
    3d6e:	88 27       	eor	r24, r24
    3d70:	29 81       	ldd	r18, Y+1	; 0x01
    3d72:	33 27       	eor	r19, r19
    3d74:	27 fd       	sbrc	r18, 7
    3d76:	30 95       	com	r19
    3d78:	82 2b       	or	r24, r18
    3d7a:	93 2b       	or	r25, r19
    3d7c:	90 93 1c 05 	sts	0x051C, r25
    3d80:	80 93 1b 05 	sts	0x051B, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3d84:	8c 81       	ldd	r24, Y+4	; 0x04
    3d86:	99 27       	eor	r25, r25
    3d88:	87 fd       	sbrc	r24, 7
    3d8a:	90 95       	com	r25
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	88 27       	eor	r24, r24
    3d90:	2b 81       	ldd	r18, Y+3	; 0x03
    3d92:	33 27       	eor	r19, r19
    3d94:	27 fd       	sbrc	r18, 7
    3d96:	30 95       	com	r19
    3d98:	82 2b       	or	r24, r18
    3d9a:	93 2b       	or	r25, r19
    3d9c:	90 93 1e 05 	sts	0x051E, r25
    3da0:	80 93 1d 05 	sts	0x051D, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    3da4:	8e 81       	ldd	r24, Y+6	; 0x06
    3da6:	99 27       	eor	r25, r25
    3da8:	87 fd       	sbrc	r24, 7
    3daa:	90 95       	com	r25
    3dac:	98 2f       	mov	r25, r24
    3dae:	88 27       	eor	r24, r24
    3db0:	2d 81       	ldd	r18, Y+5	; 0x05
    3db2:	33 27       	eor	r19, r19
    3db4:	27 fd       	sbrc	r18, 7
    3db6:	30 95       	com	r19
    3db8:	82 2b       	or	r24, r18
    3dba:	93 2b       	or	r25, r19
    3dbc:	90 93 20 05 	sts	0x0520, r25
    3dc0:	80 93 1f 05 	sts	0x051F, r24
    3dc4:	a2 cf       	rjmp	.-188    	; 0x3d0a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc8:	99 27       	eor	r25, r25
    3dca:	87 fd       	sbrc	r24, 7
    3dcc:	90 95       	com	r25
    3dce:	98 2f       	mov	r25, r24
    3dd0:	88 27       	eor	r24, r24
    3dd2:	29 81       	ldd	r18, Y+1	; 0x01
    3dd4:	33 27       	eor	r19, r19
    3dd6:	27 fd       	sbrc	r18, 7
    3dd8:	30 95       	com	r19
    3dda:	82 2b       	or	r24, r18
    3ddc:	93 2b       	or	r25, r19
    3dde:	20 91 21 05 	lds	r18, 0x0521
    3de2:	30 91 22 05 	lds	r19, 0x0522
    3de6:	82 1b       	sub	r24, r18
    3de8:	93 0b       	sbc	r25, r19
    3dea:	90 93 1c 05 	sts	0x051C, r25
    3dee:	80 93 1b 05 	sts	0x051B, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3df2:	8c 81       	ldd	r24, Y+4	; 0x04
    3df4:	99 27       	eor	r25, r25
    3df6:	87 fd       	sbrc	r24, 7
    3df8:	90 95       	com	r25
    3dfa:	98 2f       	mov	r25, r24
    3dfc:	88 27       	eor	r24, r24
    3dfe:	2b 81       	ldd	r18, Y+3	; 0x03
    3e00:	33 27       	eor	r19, r19
    3e02:	27 fd       	sbrc	r18, 7
    3e04:	30 95       	com	r19
    3e06:	82 2b       	or	r24, r18
    3e08:	93 2b       	or	r25, r19
    3e0a:	20 91 23 05 	lds	r18, 0x0523
    3e0e:	30 91 24 05 	lds	r19, 0x0524
    3e12:	82 1b       	sub	r24, r18
    3e14:	93 0b       	sbc	r25, r19
    3e16:	90 93 1e 05 	sts	0x051E, r25
    3e1a:	80 93 1d 05 	sts	0x051D, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e20:	99 27       	eor	r25, r25
    3e22:	87 fd       	sbrc	r24, 7
    3e24:	90 95       	com	r25
    3e26:	98 2f       	mov	r25, r24
    3e28:	88 27       	eor	r24, r24
    3e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e2c:	33 27       	eor	r19, r19
    3e2e:	27 fd       	sbrc	r18, 7
    3e30:	30 95       	com	r19
    3e32:	82 2b       	or	r24, r18
    3e34:	93 2b       	or	r25, r19
    3e36:	20 91 25 05 	lds	r18, 0x0525
    3e3a:	30 91 26 05 	lds	r19, 0x0526
    3e3e:	82 1b       	sub	r24, r18
    3e40:	93 0b       	sbc	r25, r19
    3e42:	90 93 20 05 	sts	0x0520, r25
    3e46:	80 93 1f 05 	sts	0x051F, r24
    3e4a:	5f cf       	rjmp	.-322    	; 0x3d0a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    3e4c:	80 91 13 02 	lds	r24, 0x0213
    3e50:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3e54:	82 e3       	ldi	r24, 0x32	; 50
    3e56:	67 cf       	rjmp	.-306    	; 0x3d26 <readAccelXYZ+0x4e>

00003e58 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    3e5c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    3e60:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    3e64:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
	updateGreenLed(pwm_green);
    3e6e:	80 91 0d 02 	lds	r24, 0x020D
    3e72:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
	updateBlueLed(pwm_blue);
    3e76:	80 91 0e 02 	lds	r24, 0x020E
    3e7a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>

	calibrationCycle = 0;
    3e7e:	10 92 3c 05 	sts	0x053C, r1
    3e82:	10 92 3b 05 	sts	0x053B, r1
	startCalibration = 1;
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	80 93 6e 05 	sts	0x056E, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3e8c:	c1 e0       	ldi	r28, 0x01	; 1
    3e8e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3e90:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    3e94:	20 91 3b 05 	lds	r18, 0x053B
    3e98:	30 91 3c 05 	lds	r19, 0x053C
    3e9c:	21 31       	cpi	r18, 0x11	; 17
    3e9e:	31 05       	cpc	r19, r1
    3ea0:	0c f4       	brge	.+2      	; 0x3ea4 <calibrateSensors+0x4c>
    3ea2:	35 c1       	rjmp	.+618    	; 0x410e <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    3ea4:	80 91 8f 03 	lds	r24, 0x038F
    3ea8:	90 91 90 03 	lds	r25, 0x0390
    3eac:	a0 91 91 03 	lds	r26, 0x0391
    3eb0:	b0 91 92 03 	lds	r27, 0x0392
    3eb4:	54 e0       	ldi	r21, 0x04	; 4
    3eb6:	b6 95       	lsr	r27
    3eb8:	a7 95       	ror	r26
    3eba:	97 95       	ror	r25
    3ebc:	87 95       	ror	r24
    3ebe:	5a 95       	dec	r21
    3ec0:	d1 f7       	brne	.-12     	; 0x3eb6 <calibrateSensors+0x5e>
    3ec2:	90 93 78 03 	sts	0x0378, r25
    3ec6:	80 93 77 03 	sts	0x0377, r24
    3eca:	80 91 93 03 	lds	r24, 0x0393
    3ece:	90 91 94 03 	lds	r25, 0x0394
    3ed2:	a0 91 95 03 	lds	r26, 0x0395
    3ed6:	b0 91 96 03 	lds	r27, 0x0396
    3eda:	44 e0       	ldi	r20, 0x04	; 4
    3edc:	b6 95       	lsr	r27
    3ede:	a7 95       	ror	r26
    3ee0:	97 95       	ror	r25
    3ee2:	87 95       	ror	r24
    3ee4:	4a 95       	dec	r20
    3ee6:	d1 f7       	brne	.-12     	; 0x3edc <calibrateSensors+0x84>
    3ee8:	90 93 7a 03 	sts	0x037A, r25
    3eec:	80 93 79 03 	sts	0x0379, r24
    3ef0:	80 91 97 03 	lds	r24, 0x0397
    3ef4:	90 91 98 03 	lds	r25, 0x0398
    3ef8:	a0 91 99 03 	lds	r26, 0x0399
    3efc:	b0 91 9a 03 	lds	r27, 0x039A
    3f00:	34 e0       	ldi	r19, 0x04	; 4
    3f02:	b6 95       	lsr	r27
    3f04:	a7 95       	ror	r26
    3f06:	97 95       	ror	r25
    3f08:	87 95       	ror	r24
    3f0a:	3a 95       	dec	r19
    3f0c:	d1 f7       	brne	.-12     	; 0x3f02 <calibrateSensors+0xaa>
    3f0e:	90 93 7c 03 	sts	0x037C, r25
    3f12:	80 93 7b 03 	sts	0x037B, r24
    3f16:	80 91 9b 03 	lds	r24, 0x039B
    3f1a:	90 91 9c 03 	lds	r25, 0x039C
    3f1e:	a0 91 9d 03 	lds	r26, 0x039D
    3f22:	b0 91 9e 03 	lds	r27, 0x039E
    3f26:	24 e0       	ldi	r18, 0x04	; 4
    3f28:	b6 95       	lsr	r27
    3f2a:	a7 95       	ror	r26
    3f2c:	97 95       	ror	r25
    3f2e:	87 95       	ror	r24
    3f30:	2a 95       	dec	r18
    3f32:	d1 f7       	brne	.-12     	; 0x3f28 <calibrateSensors+0xd0>
    3f34:	90 93 7e 03 	sts	0x037E, r25
    3f38:	80 93 7d 03 	sts	0x037D, r24
    3f3c:	80 91 9f 03 	lds	r24, 0x039F
    3f40:	90 91 a0 03 	lds	r25, 0x03A0
    3f44:	a0 91 a1 03 	lds	r26, 0x03A1
    3f48:	b0 91 a2 03 	lds	r27, 0x03A2
    3f4c:	f4 e0       	ldi	r31, 0x04	; 4
    3f4e:	b6 95       	lsr	r27
    3f50:	a7 95       	ror	r26
    3f52:	97 95       	ror	r25
    3f54:	87 95       	ror	r24
    3f56:	fa 95       	dec	r31
    3f58:	d1 f7       	brne	.-12     	; 0x3f4e <calibrateSensors+0xf6>
    3f5a:	90 93 80 03 	sts	0x0380, r25
    3f5e:	80 93 7f 03 	sts	0x037F, r24
    3f62:	80 91 a3 03 	lds	r24, 0x03A3
    3f66:	90 91 a4 03 	lds	r25, 0x03A4
    3f6a:	a0 91 a5 03 	lds	r26, 0x03A5
    3f6e:	b0 91 a6 03 	lds	r27, 0x03A6
    3f72:	e4 e0       	ldi	r30, 0x04	; 4
    3f74:	b6 95       	lsr	r27
    3f76:	a7 95       	ror	r26
    3f78:	97 95       	ror	r25
    3f7a:	87 95       	ror	r24
    3f7c:	ea 95       	dec	r30
    3f7e:	d1 f7       	brne	.-12     	; 0x3f74 <calibrateSensors+0x11c>
    3f80:	90 93 82 03 	sts	0x0382, r25
    3f84:	80 93 81 03 	sts	0x0381, r24
    3f88:	80 91 a7 03 	lds	r24, 0x03A7
    3f8c:	90 91 a8 03 	lds	r25, 0x03A8
    3f90:	a0 91 a9 03 	lds	r26, 0x03A9
    3f94:	b0 91 aa 03 	lds	r27, 0x03AA
    3f98:	74 e0       	ldi	r23, 0x04	; 4
    3f9a:	b6 95       	lsr	r27
    3f9c:	a7 95       	ror	r26
    3f9e:	97 95       	ror	r25
    3fa0:	87 95       	ror	r24
    3fa2:	7a 95       	dec	r23
    3fa4:	d1 f7       	brne	.-12     	; 0x3f9a <calibrateSensors+0x142>
    3fa6:	90 93 84 03 	sts	0x0384, r25
    3faa:	80 93 83 03 	sts	0x0383, r24
    3fae:	80 91 ab 03 	lds	r24, 0x03AB
    3fb2:	90 91 ac 03 	lds	r25, 0x03AC
    3fb6:	a0 91 ad 03 	lds	r26, 0x03AD
    3fba:	b0 91 ae 03 	lds	r27, 0x03AE
    3fbe:	64 e0       	ldi	r22, 0x04	; 4
    3fc0:	b6 95       	lsr	r27
    3fc2:	a7 95       	ror	r26
    3fc4:	97 95       	ror	r25
    3fc6:	87 95       	ror	r24
    3fc8:	6a 95       	dec	r22
    3fca:	d1 f7       	brne	.-12     	; 0x3fc0 <calibrateSensors+0x168>
    3fcc:	90 93 86 03 	sts	0x0386, r25
    3fd0:	80 93 85 03 	sts	0x0385, r24
    3fd4:	80 91 b3 03 	lds	r24, 0x03B3
    3fd8:	90 91 b4 03 	lds	r25, 0x03B4
    3fdc:	a0 91 b5 03 	lds	r26, 0x03B5
    3fe0:	b0 91 b6 03 	lds	r27, 0x03B6
    3fe4:	54 e0       	ldi	r21, 0x04	; 4
    3fe6:	b6 95       	lsr	r27
    3fe8:	a7 95       	ror	r26
    3fea:	97 95       	ror	r25
    3fec:	87 95       	ror	r24
    3fee:	5a 95       	dec	r21
    3ff0:	d1 f7       	brne	.-12     	; 0x3fe6 <calibrateSensors+0x18e>
    3ff2:	9c 01       	movw	r18, r24
    3ff4:	80 91 b7 03 	lds	r24, 0x03B7
    3ff8:	90 91 b8 03 	lds	r25, 0x03B8
    3ffc:	a0 91 b9 03 	lds	r26, 0x03B9
    4000:	b0 91 ba 03 	lds	r27, 0x03BA
    4004:	44 e0       	ldi	r20, 0x04	; 4
    4006:	b6 95       	lsr	r27
    4008:	a7 95       	ror	r26
    400a:	97 95       	ror	r25
    400c:	87 95       	ror	r24
    400e:	4a 95       	dec	r20
    4010:	d1 f7       	brne	.-12     	; 0x4006 <calibrateSensors+0x1ae>
    4012:	bc 01       	movw	r22, r24
    4014:	80 91 bb 03 	lds	r24, 0x03BB
    4018:	90 91 bc 03 	lds	r25, 0x03BC
    401c:	a0 91 bd 03 	lds	r26, 0x03BD
    4020:	b0 91 be 03 	lds	r27, 0x03BE
    4024:	f4 e0       	ldi	r31, 0x04	; 4
    4026:	b6 95       	lsr	r27
    4028:	a7 95       	ror	r26
    402a:	97 95       	ror	r25
    402c:	87 95       	ror	r24
    402e:	fa 95       	dec	r31
    4030:	d1 f7       	brne	.-12     	; 0x4026 <calibrateSensors+0x1ce>
    4032:	ac 01       	movw	r20, r24
    4034:	80 91 af 03 	lds	r24, 0x03AF
    4038:	90 91 b0 03 	lds	r25, 0x03B0
    403c:	a0 91 b1 03 	lds	r26, 0x03B1
    4040:	b0 91 b2 03 	lds	r27, 0x03B2
    4044:	e4 e0       	ldi	r30, 0x04	; 4
    4046:	b6 95       	lsr	r27
    4048:	a7 95       	ror	r26
    404a:	97 95       	ror	r25
    404c:	87 95       	ror	r24
    404e:	ea 95       	dec	r30
    4050:	d1 f7       	brne	.-12     	; 0x4046 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    4052:	80 50       	subi	r24, 0x00	; 0
    4054:	92 40       	sbci	r25, 0x02	; 2
    4056:	90 93 88 03 	sts	0x0388, r25
    405a:	80 93 87 03 	sts	0x0387, r24
    405e:	20 50       	subi	r18, 0x00	; 0
    4060:	32 40       	sbci	r19, 0x02	; 2
    4062:	30 93 8a 03 	sts	0x038A, r19
    4066:	20 93 89 03 	sts	0x0389, r18
    406a:	60 50       	subi	r22, 0x00	; 0
    406c:	72 40       	sbci	r23, 0x02	; 2
    406e:	70 93 8c 03 	sts	0x038C, r23
    4072:	60 93 8b 03 	sts	0x038B, r22
    4076:	40 50       	subi	r20, 0x00	; 0
    4078:	52 40       	sbci	r21, 0x02	; 2
    407a:	50 93 8e 03 	sts	0x038E, r21
    407e:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    4082:	80 91 27 05 	lds	r24, 0x0527
    4086:	90 91 28 05 	lds	r25, 0x0528
    408a:	95 95       	asr	r25
    408c:	87 95       	ror	r24
    408e:	95 95       	asr	r25
    4090:	87 95       	ror	r24
    4092:	95 95       	asr	r25
    4094:	87 95       	ror	r24
    4096:	95 95       	asr	r25
    4098:	87 95       	ror	r24
    409a:	90 93 22 05 	sts	0x0522, r25
    409e:	80 93 21 05 	sts	0x0521, r24
			accOffsetY = accOffsetYSum>>4;
    40a2:	80 91 29 05 	lds	r24, 0x0529
    40a6:	90 91 2a 05 	lds	r25, 0x052A
    40aa:	95 95       	asr	r25
    40ac:	87 95       	ror	r24
    40ae:	95 95       	asr	r25
    40b0:	87 95       	ror	r24
    40b2:	95 95       	asr	r25
    40b4:	87 95       	ror	r24
    40b6:	95 95       	asr	r25
    40b8:	87 95       	ror	r24
    40ba:	90 93 24 05 	sts	0x0524, r25
    40be:	80 93 23 05 	sts	0x0523, r24
			accOffsetZ = accOffsetZSum>>4;
    40c2:	80 91 2b 05 	lds	r24, 0x052B
    40c6:	90 91 2c 05 	lds	r25, 0x052C
    40ca:	95 95       	asr	r25
    40cc:	87 95       	ror	r24
    40ce:	95 95       	asr	r25
    40d0:	87 95       	ror	r24
    40d2:	95 95       	asr	r25
    40d4:	87 95       	ror	r24
    40d6:	95 95       	asr	r25
    40d8:	87 95       	ror	r24
    40da:	90 93 26 05 	sts	0x0526, r25
    40de:	80 93 25 05 	sts	0x0525, r24

			startCalibration = 0;
    40e2:	10 92 6e 05 	sts	0x056E, r1

		}

	}

	pwm_red = 255;
    40e6:	8f ef       	ldi	r24, 0xFF	; 255
    40e8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    40ec:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    40f0:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    40f4:	0e 94 34 1c 	call	0x3868	; 0x3868 <updateRedLed>
	updateGreenLed(pwm_green);
    40f8:	80 91 0d 02 	lds	r24, 0x020D
    40fc:	0e 94 48 1c 	call	0x3890	; 0x3890 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4100:	80 91 0e 02 	lds	r24, 0x020E
    4104:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <updateBlueLed>

}
    4108:	df 91       	pop	r29
    410a:	cf 91       	pop	r28
    410c:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    410e:	80 91 c6 03 	lds	r24, 0x03C6
    4112:	88 23       	and	r24, r24
    4114:	09 f4       	brne	.+2      	; 0x4118 <calibrateSensors+0x2c0>
    4116:	86 c1       	rjmp	.+780    	; 0x4424 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    4118:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    411c:	21 15       	cp	r18, r1
    411e:	31 05       	cpc	r19, r1
    4120:	09 f4       	brne	.+2      	; 0x4124 <calibrateSensors+0x2cc>
    4122:	86 c1       	rjmp	.+780    	; 0x4430 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    4124:	80 91 5f 03 	lds	r24, 0x035F
    4128:	90 91 60 03 	lds	r25, 0x0360
    412c:	aa 27       	eor	r26, r26
    412e:	97 fd       	sbrc	r25, 7
    4130:	a0 95       	com	r26
    4132:	ba 2f       	mov	r27, r26
    4134:	40 91 8f 03 	lds	r20, 0x038F
    4138:	50 91 90 03 	lds	r21, 0x0390
    413c:	60 91 91 03 	lds	r22, 0x0391
    4140:	70 91 92 03 	lds	r23, 0x0392
    4144:	84 0f       	add	r24, r20
    4146:	95 1f       	adc	r25, r21
    4148:	a6 1f       	adc	r26, r22
    414a:	b7 1f       	adc	r27, r23
    414c:	80 93 8f 03 	sts	0x038F, r24
    4150:	90 93 90 03 	sts	0x0390, r25
    4154:	a0 93 91 03 	sts	0x0391, r26
    4158:	b0 93 92 03 	sts	0x0392, r27
    415c:	80 91 61 03 	lds	r24, 0x0361
    4160:	90 91 62 03 	lds	r25, 0x0362
    4164:	aa 27       	eor	r26, r26
    4166:	97 fd       	sbrc	r25, 7
    4168:	a0 95       	com	r26
    416a:	ba 2f       	mov	r27, r26
    416c:	40 91 93 03 	lds	r20, 0x0393
    4170:	50 91 94 03 	lds	r21, 0x0394
    4174:	60 91 95 03 	lds	r22, 0x0395
    4178:	70 91 96 03 	lds	r23, 0x0396
    417c:	84 0f       	add	r24, r20
    417e:	95 1f       	adc	r25, r21
    4180:	a6 1f       	adc	r26, r22
    4182:	b7 1f       	adc	r27, r23
    4184:	80 93 93 03 	sts	0x0393, r24
    4188:	90 93 94 03 	sts	0x0394, r25
    418c:	a0 93 95 03 	sts	0x0395, r26
    4190:	b0 93 96 03 	sts	0x0396, r27
    4194:	80 91 63 03 	lds	r24, 0x0363
    4198:	90 91 64 03 	lds	r25, 0x0364
    419c:	aa 27       	eor	r26, r26
    419e:	97 fd       	sbrc	r25, 7
    41a0:	a0 95       	com	r26
    41a2:	ba 2f       	mov	r27, r26
    41a4:	40 91 97 03 	lds	r20, 0x0397
    41a8:	50 91 98 03 	lds	r21, 0x0398
    41ac:	60 91 99 03 	lds	r22, 0x0399
    41b0:	70 91 9a 03 	lds	r23, 0x039A
    41b4:	84 0f       	add	r24, r20
    41b6:	95 1f       	adc	r25, r21
    41b8:	a6 1f       	adc	r26, r22
    41ba:	b7 1f       	adc	r27, r23
    41bc:	80 93 97 03 	sts	0x0397, r24
    41c0:	90 93 98 03 	sts	0x0398, r25
    41c4:	a0 93 99 03 	sts	0x0399, r26
    41c8:	b0 93 9a 03 	sts	0x039A, r27
    41cc:	80 91 65 03 	lds	r24, 0x0365
    41d0:	90 91 66 03 	lds	r25, 0x0366
    41d4:	aa 27       	eor	r26, r26
    41d6:	97 fd       	sbrc	r25, 7
    41d8:	a0 95       	com	r26
    41da:	ba 2f       	mov	r27, r26
    41dc:	40 91 9b 03 	lds	r20, 0x039B
    41e0:	50 91 9c 03 	lds	r21, 0x039C
    41e4:	60 91 9d 03 	lds	r22, 0x039D
    41e8:	70 91 9e 03 	lds	r23, 0x039E
    41ec:	84 0f       	add	r24, r20
    41ee:	95 1f       	adc	r25, r21
    41f0:	a6 1f       	adc	r26, r22
    41f2:	b7 1f       	adc	r27, r23
    41f4:	80 93 9b 03 	sts	0x039B, r24
    41f8:	90 93 9c 03 	sts	0x039C, r25
    41fc:	a0 93 9d 03 	sts	0x039D, r26
    4200:	b0 93 9e 03 	sts	0x039E, r27
    4204:	80 91 67 03 	lds	r24, 0x0367
    4208:	90 91 68 03 	lds	r25, 0x0368
    420c:	aa 27       	eor	r26, r26
    420e:	97 fd       	sbrc	r25, 7
    4210:	a0 95       	com	r26
    4212:	ba 2f       	mov	r27, r26
    4214:	40 91 9f 03 	lds	r20, 0x039F
    4218:	50 91 a0 03 	lds	r21, 0x03A0
    421c:	60 91 a1 03 	lds	r22, 0x03A1
    4220:	70 91 a2 03 	lds	r23, 0x03A2
    4224:	84 0f       	add	r24, r20
    4226:	95 1f       	adc	r25, r21
    4228:	a6 1f       	adc	r26, r22
    422a:	b7 1f       	adc	r27, r23
    422c:	80 93 9f 03 	sts	0x039F, r24
    4230:	90 93 a0 03 	sts	0x03A0, r25
    4234:	a0 93 a1 03 	sts	0x03A1, r26
    4238:	b0 93 a2 03 	sts	0x03A2, r27
    423c:	80 91 69 03 	lds	r24, 0x0369
    4240:	90 91 6a 03 	lds	r25, 0x036A
    4244:	aa 27       	eor	r26, r26
    4246:	97 fd       	sbrc	r25, 7
    4248:	a0 95       	com	r26
    424a:	ba 2f       	mov	r27, r26
    424c:	40 91 a3 03 	lds	r20, 0x03A3
    4250:	50 91 a4 03 	lds	r21, 0x03A4
    4254:	60 91 a5 03 	lds	r22, 0x03A5
    4258:	70 91 a6 03 	lds	r23, 0x03A6
    425c:	84 0f       	add	r24, r20
    425e:	95 1f       	adc	r25, r21
    4260:	a6 1f       	adc	r26, r22
    4262:	b7 1f       	adc	r27, r23
    4264:	80 93 a3 03 	sts	0x03A3, r24
    4268:	90 93 a4 03 	sts	0x03A4, r25
    426c:	a0 93 a5 03 	sts	0x03A5, r26
    4270:	b0 93 a6 03 	sts	0x03A6, r27
    4274:	80 91 6b 03 	lds	r24, 0x036B
    4278:	90 91 6c 03 	lds	r25, 0x036C
    427c:	aa 27       	eor	r26, r26
    427e:	97 fd       	sbrc	r25, 7
    4280:	a0 95       	com	r26
    4282:	ba 2f       	mov	r27, r26
    4284:	40 91 a7 03 	lds	r20, 0x03A7
    4288:	50 91 a8 03 	lds	r21, 0x03A8
    428c:	60 91 a9 03 	lds	r22, 0x03A9
    4290:	70 91 aa 03 	lds	r23, 0x03AA
    4294:	84 0f       	add	r24, r20
    4296:	95 1f       	adc	r25, r21
    4298:	a6 1f       	adc	r26, r22
    429a:	b7 1f       	adc	r27, r23
    429c:	80 93 a7 03 	sts	0x03A7, r24
    42a0:	90 93 a8 03 	sts	0x03A8, r25
    42a4:	a0 93 a9 03 	sts	0x03A9, r26
    42a8:	b0 93 aa 03 	sts	0x03AA, r27
    42ac:	80 91 6d 03 	lds	r24, 0x036D
    42b0:	90 91 6e 03 	lds	r25, 0x036E
    42b4:	aa 27       	eor	r26, r26
    42b6:	97 fd       	sbrc	r25, 7
    42b8:	a0 95       	com	r26
    42ba:	ba 2f       	mov	r27, r26
    42bc:	40 91 ab 03 	lds	r20, 0x03AB
    42c0:	50 91 ac 03 	lds	r21, 0x03AC
    42c4:	60 91 ad 03 	lds	r22, 0x03AD
    42c8:	70 91 ae 03 	lds	r23, 0x03AE
    42cc:	84 0f       	add	r24, r20
    42ce:	95 1f       	adc	r25, r21
    42d0:	a6 1f       	adc	r26, r22
    42d2:	b7 1f       	adc	r27, r23
    42d4:	80 93 ab 03 	sts	0x03AB, r24
    42d8:	90 93 ac 03 	sts	0x03AC, r25
    42dc:	a0 93 ad 03 	sts	0x03AD, r26
    42e0:	b0 93 ae 03 	sts	0x03AE, r27
    42e4:	80 91 6f 03 	lds	r24, 0x036F
    42e8:	90 91 70 03 	lds	r25, 0x0370
    42ec:	aa 27       	eor	r26, r26
    42ee:	97 fd       	sbrc	r25, 7
    42f0:	a0 95       	com	r26
    42f2:	ba 2f       	mov	r27, r26
    42f4:	40 91 af 03 	lds	r20, 0x03AF
    42f8:	50 91 b0 03 	lds	r21, 0x03B0
    42fc:	60 91 b1 03 	lds	r22, 0x03B1
    4300:	70 91 b2 03 	lds	r23, 0x03B2
    4304:	84 0f       	add	r24, r20
    4306:	95 1f       	adc	r25, r21
    4308:	a6 1f       	adc	r26, r22
    430a:	b7 1f       	adc	r27, r23
    430c:	80 93 af 03 	sts	0x03AF, r24
    4310:	90 93 b0 03 	sts	0x03B0, r25
    4314:	a0 93 b1 03 	sts	0x03B1, r26
    4318:	b0 93 b2 03 	sts	0x03B2, r27
    431c:	80 91 71 03 	lds	r24, 0x0371
    4320:	90 91 72 03 	lds	r25, 0x0372
    4324:	aa 27       	eor	r26, r26
    4326:	97 fd       	sbrc	r25, 7
    4328:	a0 95       	com	r26
    432a:	ba 2f       	mov	r27, r26
    432c:	40 91 b3 03 	lds	r20, 0x03B3
    4330:	50 91 b4 03 	lds	r21, 0x03B4
    4334:	60 91 b5 03 	lds	r22, 0x03B5
    4338:	70 91 b6 03 	lds	r23, 0x03B6
    433c:	84 0f       	add	r24, r20
    433e:	95 1f       	adc	r25, r21
    4340:	a6 1f       	adc	r26, r22
    4342:	b7 1f       	adc	r27, r23
    4344:	80 93 b3 03 	sts	0x03B3, r24
    4348:	90 93 b4 03 	sts	0x03B4, r25
    434c:	a0 93 b5 03 	sts	0x03B5, r26
    4350:	b0 93 b6 03 	sts	0x03B6, r27
    4354:	80 91 73 03 	lds	r24, 0x0373
    4358:	90 91 74 03 	lds	r25, 0x0374
    435c:	aa 27       	eor	r26, r26
    435e:	97 fd       	sbrc	r25, 7
    4360:	a0 95       	com	r26
    4362:	ba 2f       	mov	r27, r26
    4364:	40 91 b7 03 	lds	r20, 0x03B7
    4368:	50 91 b8 03 	lds	r21, 0x03B8
    436c:	60 91 b9 03 	lds	r22, 0x03B9
    4370:	70 91 ba 03 	lds	r23, 0x03BA
    4374:	84 0f       	add	r24, r20
    4376:	95 1f       	adc	r25, r21
    4378:	a6 1f       	adc	r26, r22
    437a:	b7 1f       	adc	r27, r23
    437c:	80 93 b7 03 	sts	0x03B7, r24
    4380:	90 93 b8 03 	sts	0x03B8, r25
    4384:	a0 93 b9 03 	sts	0x03B9, r26
    4388:	b0 93 ba 03 	sts	0x03BA, r27
    438c:	80 91 75 03 	lds	r24, 0x0375
    4390:	90 91 76 03 	lds	r25, 0x0376
    4394:	aa 27       	eor	r26, r26
    4396:	97 fd       	sbrc	r25, 7
    4398:	a0 95       	com	r26
    439a:	ba 2f       	mov	r27, r26
    439c:	40 91 bb 03 	lds	r20, 0x03BB
    43a0:	50 91 bc 03 	lds	r21, 0x03BC
    43a4:	60 91 bd 03 	lds	r22, 0x03BD
    43a8:	70 91 be 03 	lds	r23, 0x03BE
    43ac:	84 0f       	add	r24, r20
    43ae:	95 1f       	adc	r25, r21
    43b0:	a6 1f       	adc	r26, r22
    43b2:	b7 1f       	adc	r27, r23
    43b4:	80 93 bb 03 	sts	0x03BB, r24
    43b8:	90 93 bc 03 	sts	0x03BC, r25
    43bc:	a0 93 bd 03 	sts	0x03BD, r26
    43c0:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    43c4:	80 91 27 05 	lds	r24, 0x0527
    43c8:	90 91 28 05 	lds	r25, 0x0528
    43cc:	40 91 1b 05 	lds	r20, 0x051B
    43d0:	50 91 1c 05 	lds	r21, 0x051C
    43d4:	84 0f       	add	r24, r20
    43d6:	95 1f       	adc	r25, r21
    43d8:	90 93 28 05 	sts	0x0528, r25
    43dc:	80 93 27 05 	sts	0x0527, r24
				accOffsetYSum += accY;
    43e0:	80 91 29 05 	lds	r24, 0x0529
    43e4:	90 91 2a 05 	lds	r25, 0x052A
    43e8:	40 91 1d 05 	lds	r20, 0x051D
    43ec:	50 91 1e 05 	lds	r21, 0x051E
    43f0:	84 0f       	add	r24, r20
    43f2:	95 1f       	adc	r25, r21
    43f4:	90 93 2a 05 	sts	0x052A, r25
    43f8:	80 93 29 05 	sts	0x0529, r24
				accOffsetZSum += accZ;
    43fc:	80 91 2b 05 	lds	r24, 0x052B
    4400:	90 91 2c 05 	lds	r25, 0x052C
    4404:	40 91 1f 05 	lds	r20, 0x051F
    4408:	50 91 20 05 	lds	r21, 0x0520
    440c:	84 0f       	add	r24, r20
    440e:	95 1f       	adc	r25, r21
    4410:	90 93 2c 05 	sts	0x052C, r25
    4414:	80 93 2b 05 	sts	0x052B, r24

				calibrationCycle++;
    4418:	2f 5f       	subi	r18, 0xFF	; 255
    441a:	3f 4f       	sbci	r19, 0xFF	; 255
    441c:	30 93 3c 05 	sts	0x053C, r19
    4420:	20 93 3b 05 	sts	0x053B, r18
    4424:	80 91 6e 05 	lds	r24, 0x056E
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    4428:	88 23       	and	r24, r24
    442a:	09 f0       	breq	.+2      	; 0x442e <calibrateSensors+0x5d6>
    442c:	31 cd       	rjmp	.-1438   	; 0x3e90 <calibrateSensors+0x38>
    442e:	5b ce       	rjmp	.-842    	; 0x40e6 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4430:	10 92 8f 03 	sts	0x038F, r1
    4434:	10 92 90 03 	sts	0x0390, r1
    4438:	10 92 91 03 	sts	0x0391, r1
    443c:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4440:	10 92 78 03 	sts	0x0378, r1
    4444:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4448:	10 92 93 03 	sts	0x0393, r1
    444c:	10 92 94 03 	sts	0x0394, r1
    4450:	10 92 95 03 	sts	0x0395, r1
    4454:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4458:	10 92 7a 03 	sts	0x037A, r1
    445c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4460:	10 92 97 03 	sts	0x0397, r1
    4464:	10 92 98 03 	sts	0x0398, r1
    4468:	10 92 99 03 	sts	0x0399, r1
    446c:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4470:	10 92 7c 03 	sts	0x037C, r1
    4474:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4478:	10 92 9b 03 	sts	0x039B, r1
    447c:	10 92 9c 03 	sts	0x039C, r1
    4480:	10 92 9d 03 	sts	0x039D, r1
    4484:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    4488:	10 92 7e 03 	sts	0x037E, r1
    448c:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4490:	10 92 9f 03 	sts	0x039F, r1
    4494:	10 92 a0 03 	sts	0x03A0, r1
    4498:	10 92 a1 03 	sts	0x03A1, r1
    449c:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    44a0:	10 92 80 03 	sts	0x0380, r1
    44a4:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    44a8:	10 92 a3 03 	sts	0x03A3, r1
    44ac:	10 92 a4 03 	sts	0x03A4, r1
    44b0:	10 92 a5 03 	sts	0x03A5, r1
    44b4:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    44b8:	10 92 82 03 	sts	0x0382, r1
    44bc:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    44c0:	10 92 a7 03 	sts	0x03A7, r1
    44c4:	10 92 a8 03 	sts	0x03A8, r1
    44c8:	10 92 a9 03 	sts	0x03A9, r1
    44cc:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    44d0:	10 92 84 03 	sts	0x0384, r1
    44d4:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    44d8:	10 92 ab 03 	sts	0x03AB, r1
    44dc:	10 92 ac 03 	sts	0x03AC, r1
    44e0:	10 92 ad 03 	sts	0x03AD, r1
    44e4:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    44e8:	10 92 86 03 	sts	0x0386, r1
    44ec:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    44f0:	10 92 af 03 	sts	0x03AF, r1
    44f4:	10 92 b0 03 	sts	0x03B0, r1
    44f8:	10 92 b1 03 	sts	0x03B1, r1
    44fc:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4500:	10 92 88 03 	sts	0x0388, r1
    4504:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4508:	10 92 b3 03 	sts	0x03B3, r1
    450c:	10 92 b4 03 	sts	0x03B4, r1
    4510:	10 92 b5 03 	sts	0x03B5, r1
    4514:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    4518:	10 92 8a 03 	sts	0x038A, r1
    451c:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4520:	10 92 b7 03 	sts	0x03B7, r1
    4524:	10 92 b8 03 	sts	0x03B8, r1
    4528:	10 92 b9 03 	sts	0x03B9, r1
    452c:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4530:	10 92 8c 03 	sts	0x038C, r1
    4534:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4538:	10 92 bb 03 	sts	0x03BB, r1
    453c:	10 92 bc 03 	sts	0x03BC, r1
    4540:	10 92 bd 03 	sts	0x03BD, r1
    4544:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4548:	10 92 8e 03 	sts	0x038E, r1
    454c:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4550:	10 92 28 05 	sts	0x0528, r1
    4554:	10 92 27 05 	sts	0x0527, r1
					accOffsetYSum = 0;
    4558:	10 92 2a 05 	sts	0x052A, r1
    455c:	10 92 29 05 	sts	0x0529, r1
					accOffsetZSum = 0;
    4560:	10 92 2c 05 	sts	0x052C, r1
    4564:	10 92 2b 05 	sts	0x052B, r1

					calibrationCycle++;
    4568:	d0 93 3c 05 	sts	0x053C, r29
    456c:	c0 93 3b 05 	sts	0x053B, r28
    4570:	80 91 6e 05 	lds	r24, 0x056E

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4574:	59 cf       	rjmp	.-334    	; 0x4428 <calibrateSensors+0x5d0>

00004576 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    4576:	80 91 1a 05 	lds	r24, 0x051A
    457a:	88 23       	and	r24, r24
    457c:	79 f0       	breq	.+30     	; 0x459c <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    457e:	81 30       	cpi	r24, 0x01	; 1
    4580:	11 f1       	breq	.+68     	; 0x45c6 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    4582:	10 92 1c 05 	sts	0x051C, r1
    4586:	10 92 1b 05 	sts	0x051B, r1
		accY = 0;
    458a:	10 92 1e 05 	sts	0x051E, r1
    458e:	10 92 1d 05 	sts	0x051D, r1
		accZ = 0;
    4592:	10 92 20 05 	sts	0x0520, r1
    4596:	10 92 1f 05 	sts	0x051F, r1
    459a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    459c:	80 91 13 02 	lds	r24, 0x0213
    45a0:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    45aa:	80 91 13 02 	lds	r24, 0x0213
    45ae:	8f 5f       	subi	r24, 0xFF	; 255
    45b0:	0e 94 57 10 	call	0x20ae	; 0x20ae <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    45b4:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    45b8:	80 93 30 05 	sts	0x0530, r24
    45bc:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    45c0:	80 93 31 05 	sts	0x0531, r24
    45c4:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    45c6:	80 91 13 02 	lds	r24, 0x0213
    45ca:	0e 94 0a 10 	call	0x2014	; 0x2014 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    45ce:	82 e3       	ldi	r24, 0x32	; 50
    45d0:	0e 94 85 10 	call	0x210a	; 0x210a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    45d4:	80 91 13 02 	lds	r24, 0x0213
    45d8:	8f 5f       	subi	r24, 0xFF	; 255
    45da:	0e 94 57 10 	call	0x20ae	; 0x20ae <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    45de:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    45e2:	80 93 30 05 	sts	0x0530, r24
    45e6:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    45ea:	80 93 31 05 	sts	0x0531, r24
    45ee:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    45f2:	80 93 32 05 	sts	0x0532, r24
    45f6:	08 95       	ret

000045f8 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    45f8:	80 91 1a 05 	lds	r24, 0x051A
    45fc:	88 23       	and	r24, r24
    45fe:	09 f0       	breq	.+2      	; 0x4602 <readAccelXYZ_2+0xa>
    4600:	4e c0       	rjmp	.+156    	; 0x469e <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4602:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    4606:	80 93 32 05 	sts	0x0532, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    460a:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    460e:	80 93 33 05 	sts	0x0533, r24
    4612:	0e 94 97 10 	call	0x212e	; 0x212e <i2c_readAck>
    4616:	80 93 34 05 	sts	0x0534, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    461a:	0e 94 a1 10 	call	0x2142	; 0x2142 <i2c_readNak>
    461e:	80 93 35 05 	sts	0x0535, r24
		i2c_stop();													// set stop conditon = release bus
    4622:	0e 94 7d 10 	call	0x20fa	; 0x20fa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4626:	80 91 6e 05 	lds	r24, 0x056E
    462a:	88 23       	and	r24, r24
    462c:	09 f4       	brne	.+2      	; 0x4630 <readAccelXYZ_2+0x38>
    462e:	47 c0       	rjmp	.+142    	; 0x46be <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    4630:	80 91 31 05 	lds	r24, 0x0531
    4634:	99 27       	eor	r25, r25
    4636:	87 fd       	sbrc	r24, 7
    4638:	90 95       	com	r25
    463a:	98 2f       	mov	r25, r24
    463c:	88 27       	eor	r24, r24
    463e:	20 91 30 05 	lds	r18, 0x0530
    4642:	33 27       	eor	r19, r19
    4644:	27 fd       	sbrc	r18, 7
    4646:	30 95       	com	r19
    4648:	82 2b       	or	r24, r18
    464a:	93 2b       	or	r25, r19
    464c:	90 93 1c 05 	sts	0x051C, r25
    4650:	80 93 1b 05 	sts	0x051B, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    4654:	80 91 33 05 	lds	r24, 0x0533
    4658:	99 27       	eor	r25, r25
    465a:	87 fd       	sbrc	r24, 7
    465c:	90 95       	com	r25
    465e:	98 2f       	mov	r25, r24
    4660:	88 27       	eor	r24, r24
    4662:	20 91 32 05 	lds	r18, 0x0532
    4666:	33 27       	eor	r19, r19
    4668:	27 fd       	sbrc	r18, 7
    466a:	30 95       	com	r19
    466c:	82 2b       	or	r24, r18
    466e:	93 2b       	or	r25, r19
    4670:	90 93 1e 05 	sts	0x051E, r25
    4674:	80 93 1d 05 	sts	0x051D, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    4678:	80 91 35 05 	lds	r24, 0x0535
    467c:	99 27       	eor	r25, r25
    467e:	87 fd       	sbrc	r24, 7
    4680:	90 95       	com	r25
    4682:	98 2f       	mov	r25, r24
    4684:	88 27       	eor	r24, r24
    4686:	20 91 34 05 	lds	r18, 0x0534
    468a:	33 27       	eor	r19, r19
    468c:	27 fd       	sbrc	r18, 7
    468e:	30 95       	com	r19
    4690:	82 2b       	or	r24, r18
    4692:	93 2b       	or	r25, r19
    4694:	90 93 20 05 	sts	0x0520, r25
    4698:	80 93 1f 05 	sts	0x051F, r24
    469c:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    469e:	81 30       	cpi	r24, 0x01	; 1
    46a0:	09 f4       	brne	.+2      	; 0x46a4 <readAccelXYZ_2+0xac>
    46a2:	b3 cf       	rjmp	.-154    	; 0x460a <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    46a4:	10 92 1c 05 	sts	0x051C, r1
    46a8:	10 92 1b 05 	sts	0x051B, r1
		accY = 0;
    46ac:	10 92 1e 05 	sts	0x051E, r1
    46b0:	10 92 1d 05 	sts	0x051D, r1
		accZ = 0;
    46b4:	10 92 20 05 	sts	0x0520, r1
    46b8:	10 92 1f 05 	sts	0x051F, r1
    46bc:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    46be:	80 91 31 05 	lds	r24, 0x0531
    46c2:	99 27       	eor	r25, r25
    46c4:	87 fd       	sbrc	r24, 7
    46c6:	90 95       	com	r25
    46c8:	98 2f       	mov	r25, r24
    46ca:	88 27       	eor	r24, r24
    46cc:	20 91 30 05 	lds	r18, 0x0530
    46d0:	33 27       	eor	r19, r19
    46d2:	27 fd       	sbrc	r18, 7
    46d4:	30 95       	com	r19
    46d6:	82 2b       	or	r24, r18
    46d8:	93 2b       	or	r25, r19
    46da:	20 91 21 05 	lds	r18, 0x0521
    46de:	30 91 22 05 	lds	r19, 0x0522
    46e2:	82 1b       	sub	r24, r18
    46e4:	93 0b       	sbc	r25, r19
    46e6:	90 93 1c 05 	sts	0x051C, r25
    46ea:	80 93 1b 05 	sts	0x051B, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    46ee:	80 91 33 05 	lds	r24, 0x0533
    46f2:	99 27       	eor	r25, r25
    46f4:	87 fd       	sbrc	r24, 7
    46f6:	90 95       	com	r25
    46f8:	98 2f       	mov	r25, r24
    46fa:	88 27       	eor	r24, r24
    46fc:	20 91 32 05 	lds	r18, 0x0532
    4700:	33 27       	eor	r19, r19
    4702:	27 fd       	sbrc	r18, 7
    4704:	30 95       	com	r19
    4706:	82 2b       	or	r24, r18
    4708:	93 2b       	or	r25, r19
    470a:	20 91 23 05 	lds	r18, 0x0523
    470e:	30 91 24 05 	lds	r19, 0x0524
    4712:	82 1b       	sub	r24, r18
    4714:	93 0b       	sbc	r25, r19
    4716:	90 93 1e 05 	sts	0x051E, r25
    471a:	80 93 1d 05 	sts	0x051D, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    471e:	80 91 35 05 	lds	r24, 0x0535
    4722:	99 27       	eor	r25, r25
    4724:	87 fd       	sbrc	r24, 7
    4726:	90 95       	com	r25
    4728:	98 2f       	mov	r25, r24
    472a:	88 27       	eor	r24, r24
    472c:	20 91 34 05 	lds	r18, 0x0534
    4730:	33 27       	eor	r19, r19
    4732:	27 fd       	sbrc	r18, 7
    4734:	30 95       	com	r19
    4736:	82 2b       	or	r24, r18
    4738:	93 2b       	or	r25, r19
    473a:	20 91 25 05 	lds	r18, 0x0525
    473e:	30 91 26 05 	lds	r19, 0x0526
    4742:	82 1b       	sub	r24, r18
    4744:	93 0b       	sbc	r25, r19
    4746:	90 93 20 05 	sts	0x0520, r25
    474a:	80 93 1f 05 	sts	0x051F, r24
    474e:	08 95       	ret

00004750 <computeAngle>:

	}

}

void computeAngle() {
    4750:	ef 92       	push	r14
    4752:	ff 92       	push	r15
    4754:	0f 93       	push	r16
    4756:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    4758:	80 91 1f 05 	lds	r24, 0x051F
    475c:	90 91 20 05 	lds	r25, 0x0520
    4760:	97 fd       	sbrc	r25, 7
    4762:	5b c0       	rjmp	.+182    	; 0x481a <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    4764:	80 31       	cpi	r24, 0x10	; 16
    4766:	91 05       	cpc	r25, r1
    4768:	08 f0       	brcs	.+2      	; 0x476c <computeAngle+0x1c>
    476a:	42 c0       	rjmp	.+132    	; 0x47f0 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    476c:	81 e0       	ldi	r24, 0x01	; 1
    476e:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    4772:	90 91 14 02 	lds	r25, 0x0214
    4776:	98 17       	cp	r25, r24
    4778:	09 f4       	brne	.+2      	; 0x477c <computeAngle+0x2c>
    477a:	42 c0       	rjmp	.+132    	; 0x4800 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    477c:	10 92 2f 05 	sts	0x052F, r1
	}
	prevPosition = currPosition;
    4780:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    4784:	60 91 1b 05 	lds	r22, 0x051B
    4788:	70 91 1c 05 	lds	r23, 0x051C
    478c:	88 27       	eor	r24, r24
    478e:	77 fd       	sbrc	r23, 7
    4790:	80 95       	com	r24
    4792:	98 2f       	mov	r25, r24
    4794:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__floatsisf>
    4798:	7b 01       	movw	r14, r22
    479a:	8c 01       	movw	r16, r24
    479c:	60 91 1d 05 	lds	r22, 0x051D
    47a0:	70 91 1e 05 	lds	r23, 0x051E
    47a4:	88 27       	eor	r24, r24
    47a6:	77 fd       	sbrc	r23, 7
    47a8:	80 95       	com	r24
    47aa:	98 2f       	mov	r25, r24
    47ac:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__floatsisf>
    47b0:	9b 01       	movw	r18, r22
    47b2:	ac 01       	movw	r20, r24
    47b4:	c8 01       	movw	r24, r16
    47b6:	b7 01       	movw	r22, r14
    47b8:	0e 94 48 28 	call	0x5090	; 0x5090 <atan2>
    47bc:	21 ee       	ldi	r18, 0xE1	; 225
    47be:	3e e2       	ldi	r19, 0x2E	; 46
    47c0:	45 e6       	ldi	r20, 0x65	; 101
    47c2:	52 e4       	ldi	r21, 0x42	; 66
    47c4:	0e 94 11 24 	call	0x4822	; 0x4822 <__mulsf3>
    47c8:	0e 94 6e 25 	call	0x4adc	; 0x4adc <__fixsfsi>
    47cc:	9b 01       	movw	r18, r22
    47ce:	70 93 2e 05 	sts	0x052E, r23
    47d2:	60 93 2d 05 	sts	0x052D, r22

	if(currentAngle < 0) {
    47d6:	77 ff       	sbrs	r23, 7
    47d8:	06 c0       	rjmp	.+12     	; 0x47e6 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    47da:	28 59       	subi	r18, 0x98	; 152
    47dc:	3e 4f       	sbci	r19, 0xFE	; 254
    47de:	30 93 2e 05 	sts	0x052E, r19
    47e2:	20 93 2d 05 	sts	0x052D, r18
	}

}
    47e6:	1f 91       	pop	r17
    47e8:	0f 91       	pop	r16
    47ea:	ff 90       	pop	r15
    47ec:	ef 90       	pop	r14
    47ee:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    47f0:	10 92 15 02 	sts	0x0215, r1
    47f4:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    47f6:	90 91 14 02 	lds	r25, 0x0214
    47fa:	98 17       	cp	r25, r24
    47fc:	09 f0       	breq	.+2      	; 0x4800 <computeAngle+0xb0>
    47fe:	be cf       	rjmp	.-132    	; 0x477c <computeAngle+0x2c>
		timesInSamePos++;
    4800:	90 91 2f 05 	lds	r25, 0x052F
    4804:	9f 5f       	subi	r25, 0xFF	; 255
    4806:	90 93 2f 05 	sts	0x052F, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    480a:	95 30       	cpi	r25, 0x05	; 5
    480c:	08 f4       	brcc	.+2      	; 0x4810 <computeAngle+0xc0>
    480e:	b8 cf       	rjmp	.-144    	; 0x4780 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4810:	10 92 2f 05 	sts	0x052F, r1
			robotPosition = currPosition;
    4814:	80 93 16 02 	sts	0x0216, r24
    4818:	b3 cf       	rjmp	.-154    	; 0x4780 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    481a:	90 95       	com	r25
    481c:	81 95       	neg	r24
    481e:	9f 4f       	sbci	r25, 0xFF	; 255
    4820:	a1 cf       	rjmp	.-190    	; 0x4764 <computeAngle+0x14>

00004822 <__mulsf3>:
    4822:	a0 e2       	ldi	r26, 0x20	; 32
    4824:	b0 e0       	ldi	r27, 0x00	; 0
    4826:	e7 e1       	ldi	r30, 0x17	; 23
    4828:	f4 e2       	ldi	r31, 0x24	; 36
    482a:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <__prologue_saves__+0x4>
    482e:	69 83       	std	Y+1, r22	; 0x01
    4830:	7a 83       	std	Y+2, r23	; 0x02
    4832:	8b 83       	std	Y+3, r24	; 0x03
    4834:	9c 83       	std	Y+4, r25	; 0x04
    4836:	2d 83       	std	Y+5, r18	; 0x05
    4838:	3e 83       	std	Y+6, r19	; 0x06
    483a:	4f 83       	std	Y+7, r20	; 0x07
    483c:	58 87       	std	Y+8, r21	; 0x08
    483e:	99 e0       	ldi	r25, 0x09	; 9
    4840:	e9 2e       	mov	r14, r25
    4842:	f1 2c       	mov	r15, r1
    4844:	ec 0e       	add	r14, r28
    4846:	fd 1e       	adc	r15, r29
    4848:	b7 01       	movw	r22, r14
    484a:	ce 01       	movw	r24, r28
    484c:	01 96       	adiw	r24, 0x01	; 1
    484e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__unpack_f>
    4852:	8e 01       	movw	r16, r28
    4854:	0f 5e       	subi	r16, 0xEF	; 239
    4856:	1f 4f       	sbci	r17, 0xFF	; 255
    4858:	b8 01       	movw	r22, r16
    485a:	ce 01       	movw	r24, r28
    485c:	05 96       	adiw	r24, 0x05	; 5
    485e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__unpack_f>
    4862:	99 85       	ldd	r25, Y+9	; 0x09
    4864:	92 30       	cpi	r25, 0x02	; 2
    4866:	88 f0       	brcs	.+34     	; 0x488a <__mulsf3+0x68>
    4868:	89 89       	ldd	r24, Y+17	; 0x11
    486a:	82 30       	cpi	r24, 0x02	; 2
    486c:	c0 f0       	brcs	.+48     	; 0x489e <__mulsf3+0x7c>
    486e:	94 30       	cpi	r25, 0x04	; 4
    4870:	19 f4       	brne	.+6      	; 0x4878 <__mulsf3+0x56>
    4872:	82 30       	cpi	r24, 0x02	; 2
    4874:	29 f0       	breq	.+10     	; 0x4880 <__mulsf3+0x5e>
    4876:	09 c0       	rjmp	.+18     	; 0x488a <__mulsf3+0x68>
    4878:	84 30       	cpi	r24, 0x04	; 4
    487a:	29 f4       	brne	.+10     	; 0x4886 <__mulsf3+0x64>
    487c:	92 30       	cpi	r25, 0x02	; 2
    487e:	79 f4       	brne	.+30     	; 0x489e <__mulsf3+0x7c>
    4880:	67 e1       	ldi	r22, 0x17	; 23
    4882:	72 e0       	ldi	r23, 0x02	; 2
    4884:	c6 c0       	rjmp	.+396    	; 0x4a12 <__mulsf3+0x1f0>
    4886:	92 30       	cpi	r25, 0x02	; 2
    4888:	41 f4       	brne	.+16     	; 0x489a <__mulsf3+0x78>
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	9a 85       	ldd	r25, Y+10	; 0x0a
    488e:	8a 89       	ldd	r24, Y+18	; 0x12
    4890:	98 13       	cpse	r25, r24
    4892:	21 e0       	ldi	r18, 0x01	; 1
    4894:	2a 87       	std	Y+10, r18	; 0x0a
    4896:	b7 01       	movw	r22, r14
    4898:	bc c0       	rjmp	.+376    	; 0x4a12 <__mulsf3+0x1f0>
    489a:	82 30       	cpi	r24, 0x02	; 2
    489c:	41 f4       	brne	.+16     	; 0x48ae <__mulsf3+0x8c>
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a2:	8a 89       	ldd	r24, Y+18	; 0x12
    48a4:	98 13       	cpse	r25, r24
    48a6:	21 e0       	ldi	r18, 0x01	; 1
    48a8:	2a 8b       	std	Y+18, r18	; 0x12
    48aa:	b8 01       	movw	r22, r16
    48ac:	b2 c0       	rjmp	.+356    	; 0x4a12 <__mulsf3+0x1f0>
    48ae:	cd 84       	ldd	r12, Y+13	; 0x0d
    48b0:	de 84       	ldd	r13, Y+14	; 0x0e
    48b2:	ef 84       	ldd	r14, Y+15	; 0x0f
    48b4:	f8 88       	ldd	r15, Y+16	; 0x10
    48b6:	0d 89       	ldd	r16, Y+21	; 0x15
    48b8:	1e 89       	ldd	r17, Y+22	; 0x16
    48ba:	2f 89       	ldd	r18, Y+23	; 0x17
    48bc:	38 8d       	ldd	r19, Y+24	; 0x18
    48be:	88 24       	eor	r8, r8
    48c0:	99 24       	eor	r9, r9
    48c2:	54 01       	movw	r10, r8
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	50 e0       	ldi	r21, 0x00	; 0
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	44 24       	eor	r4, r4
    48ce:	55 24       	eor	r5, r5
    48d0:	32 01       	movw	r6, r4
    48d2:	e0 e0       	ldi	r30, 0x00	; 0
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	c6 01       	movw	r24, r12
    48d8:	81 70       	andi	r24, 0x01	; 1
    48da:	90 70       	andi	r25, 0x00	; 0
    48dc:	89 2b       	or	r24, r25
    48de:	d9 f0       	breq	.+54     	; 0x4916 <__mulsf3+0xf4>
    48e0:	80 0e       	add	r8, r16
    48e2:	91 1e       	adc	r9, r17
    48e4:	a2 1e       	adc	r10, r18
    48e6:	b3 1e       	adc	r11, r19
    48e8:	db 01       	movw	r26, r22
    48ea:	ca 01       	movw	r24, r20
    48ec:	84 0d       	add	r24, r4
    48ee:	95 1d       	adc	r25, r5
    48f0:	a6 1d       	adc	r26, r6
    48f2:	b7 1d       	adc	r27, r7
    48f4:	40 e0       	ldi	r20, 0x00	; 0
    48f6:	50 e0       	ldi	r21, 0x00	; 0
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	70 e0       	ldi	r23, 0x00	; 0
    48fc:	80 16       	cp	r8, r16
    48fe:	91 06       	cpc	r9, r17
    4900:	a2 06       	cpc	r10, r18
    4902:	b3 06       	cpc	r11, r19
    4904:	20 f4       	brcc	.+8      	; 0x490e <__mulsf3+0xec>
    4906:	41 e0       	ldi	r20, 0x01	; 1
    4908:	50 e0       	ldi	r21, 0x00	; 0
    490a:	60 e0       	ldi	r22, 0x00	; 0
    490c:	70 e0       	ldi	r23, 0x00	; 0
    490e:	48 0f       	add	r20, r24
    4910:	59 1f       	adc	r21, r25
    4912:	6a 1f       	adc	r22, r26
    4914:	7b 1f       	adc	r23, r27
    4916:	44 0c       	add	r4, r4
    4918:	55 1c       	adc	r5, r5
    491a:	66 1c       	adc	r6, r6
    491c:	77 1c       	adc	r7, r7
    491e:	37 ff       	sbrs	r19, 7
    4920:	08 c0       	rjmp	.+16     	; 0x4932 <__mulsf3+0x110>
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	a0 e0       	ldi	r26, 0x00	; 0
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	48 2a       	or	r4, r24
    492c:	59 2a       	or	r5, r25
    492e:	6a 2a       	or	r6, r26
    4930:	7b 2a       	or	r7, r27
    4932:	31 96       	adiw	r30, 0x01	; 1
    4934:	e0 32       	cpi	r30, 0x20	; 32
    4936:	f1 05       	cpc	r31, r1
    4938:	49 f0       	breq	.+18     	; 0x494c <__mulsf3+0x12a>
    493a:	00 0f       	add	r16, r16
    493c:	11 1f       	adc	r17, r17
    493e:	22 1f       	adc	r18, r18
    4940:	33 1f       	adc	r19, r19
    4942:	f6 94       	lsr	r15
    4944:	e7 94       	ror	r14
    4946:	d7 94       	ror	r13
    4948:	c7 94       	ror	r12
    494a:	c5 cf       	rjmp	.-118    	; 0x48d6 <__mulsf3+0xb4>
    494c:	8b 89       	ldd	r24, Y+19	; 0x13
    494e:	9c 89       	ldd	r25, Y+20	; 0x14
    4950:	2b 85       	ldd	r18, Y+11	; 0x0b
    4952:	3c 85       	ldd	r19, Y+12	; 0x0c
    4954:	82 0f       	add	r24, r18
    4956:	93 1f       	adc	r25, r19
    4958:	02 96       	adiw	r24, 0x02	; 2
    495a:	9c 8f       	std	Y+28, r25	; 0x1c
    495c:	8b 8f       	std	Y+27, r24	; 0x1b
    495e:	1a 8e       	std	Y+26, r1	; 0x1a
    4960:	9a 85       	ldd	r25, Y+10	; 0x0a
    4962:	8a 89       	ldd	r24, Y+18	; 0x12
    4964:	98 17       	cp	r25, r24
    4966:	11 f0       	breq	.+4      	; 0x496c <__mulsf3+0x14a>
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	8a 8f       	std	Y+26, r24	; 0x1a
    496c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    496e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4970:	17 c0       	rjmp	.+46     	; 0x49a0 <__mulsf3+0x17e>
    4972:	ca 01       	movw	r24, r20
    4974:	81 70       	andi	r24, 0x01	; 1
    4976:	90 70       	andi	r25, 0x00	; 0
    4978:	89 2b       	or	r24, r25
    497a:	61 f0       	breq	.+24     	; 0x4994 <__mulsf3+0x172>
    497c:	b6 94       	lsr	r11
    497e:	a7 94       	ror	r10
    4980:	97 94       	ror	r9
    4982:	87 94       	ror	r8
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	a0 e0       	ldi	r26, 0x00	; 0
    498a:	b0 e8       	ldi	r27, 0x80	; 128
    498c:	88 2a       	or	r8, r24
    498e:	99 2a       	or	r9, r25
    4990:	aa 2a       	or	r10, r26
    4992:	bb 2a       	or	r11, r27
    4994:	76 95       	lsr	r23
    4996:	67 95       	ror	r22
    4998:	57 95       	ror	r21
    499a:	47 95       	ror	r20
    499c:	2f 5f       	subi	r18, 0xFF	; 255
    499e:	3f 4f       	sbci	r19, 0xFF	; 255
    49a0:	77 fd       	sbrc	r23, 7
    49a2:	e7 cf       	rjmp	.-50     	; 0x4972 <__mulsf3+0x150>
    49a4:	c9 01       	movw	r24, r18
    49a6:	0b c0       	rjmp	.+22     	; 0x49be <__mulsf3+0x19c>
    49a8:	44 0f       	add	r20, r20
    49aa:	55 1f       	adc	r21, r21
    49ac:	66 1f       	adc	r22, r22
    49ae:	77 1f       	adc	r23, r23
    49b0:	b7 fc       	sbrc	r11, 7
    49b2:	41 60       	ori	r20, 0x01	; 1
    49b4:	88 0c       	add	r8, r8
    49b6:	99 1c       	adc	r9, r9
    49b8:	aa 1c       	adc	r10, r10
    49ba:	bb 1c       	adc	r11, r11
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	40 30       	cpi	r20, 0x00	; 0
    49c0:	a0 e0       	ldi	r26, 0x00	; 0
    49c2:	5a 07       	cpc	r21, r26
    49c4:	a0 e0       	ldi	r26, 0x00	; 0
    49c6:	6a 07       	cpc	r22, r26
    49c8:	a0 e4       	ldi	r26, 0x40	; 64
    49ca:	7a 07       	cpc	r23, r26
    49cc:	68 f3       	brcs	.-38     	; 0x49a8 <__mulsf3+0x186>
    49ce:	9c 8f       	std	Y+28, r25	; 0x1c
    49d0:	8b 8f       	std	Y+27, r24	; 0x1b
    49d2:	db 01       	movw	r26, r22
    49d4:	ca 01       	movw	r24, r20
    49d6:	8f 77       	andi	r24, 0x7F	; 127
    49d8:	90 70       	andi	r25, 0x00	; 0
    49da:	a0 70       	andi	r26, 0x00	; 0
    49dc:	b0 70       	andi	r27, 0x00	; 0
    49de:	80 34       	cpi	r24, 0x40	; 64
    49e0:	91 05       	cpc	r25, r1
    49e2:	a1 05       	cpc	r26, r1
    49e4:	b1 05       	cpc	r27, r1
    49e6:	61 f4       	brne	.+24     	; 0x4a00 <__mulsf3+0x1de>
    49e8:	47 fd       	sbrc	r20, 7
    49ea:	0a c0       	rjmp	.+20     	; 0x4a00 <__mulsf3+0x1de>
    49ec:	81 14       	cp	r8, r1
    49ee:	91 04       	cpc	r9, r1
    49f0:	a1 04       	cpc	r10, r1
    49f2:	b1 04       	cpc	r11, r1
    49f4:	29 f0       	breq	.+10     	; 0x4a00 <__mulsf3+0x1de>
    49f6:	40 5c       	subi	r20, 0xC0	; 192
    49f8:	5f 4f       	sbci	r21, 0xFF	; 255
    49fa:	6f 4f       	sbci	r22, 0xFF	; 255
    49fc:	7f 4f       	sbci	r23, 0xFF	; 255
    49fe:	40 78       	andi	r20, 0x80	; 128
    4a00:	4d 8f       	std	Y+29, r20	; 0x1d
    4a02:	5e 8f       	std	Y+30, r21	; 0x1e
    4a04:	6f 8f       	std	Y+31, r22	; 0x1f
    4a06:	78 a3       	std	Y+32, r23	; 0x20
    4a08:	83 e0       	ldi	r24, 0x03	; 3
    4a0a:	89 8f       	std	Y+25, r24	; 0x19
    4a0c:	be 01       	movw	r22, r28
    4a0e:	67 5e       	subi	r22, 0xE7	; 231
    4a10:	7f 4f       	sbci	r23, 0xFF	; 255
    4a12:	cb 01       	movw	r24, r22
    4a14:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__pack_f>
    4a18:	e0 e1       	ldi	r30, 0x10	; 16
    4a1a:	a0 96       	adiw	r28, 0x20	; 32
    4a1c:	0c 94 c2 27 	jmp	0x4f84	; 0x4f84 <__epilogue_restores__+0x4>

00004a20 <__floatsisf>:
    4a20:	a8 e0       	ldi	r26, 0x08	; 8
    4a22:	b0 e0       	ldi	r27, 0x00	; 0
    4a24:	e6 e1       	ldi	r30, 0x16	; 22
    4a26:	f5 e2       	ldi	r31, 0x25	; 37
    4a28:	0c 94 ad 27 	jmp	0x4f5a	; 0x4f5a <__prologue_saves__+0x12>
    4a2c:	9b 01       	movw	r18, r22
    4a2e:	ac 01       	movw	r20, r24
    4a30:	83 e0       	ldi	r24, 0x03	; 3
    4a32:	89 83       	std	Y+1, r24	; 0x01
    4a34:	da 01       	movw	r26, r20
    4a36:	c9 01       	movw	r24, r18
    4a38:	88 27       	eor	r24, r24
    4a3a:	b7 fd       	sbrc	r27, 7
    4a3c:	83 95       	inc	r24
    4a3e:	99 27       	eor	r25, r25
    4a40:	aa 27       	eor	r26, r26
    4a42:	bb 27       	eor	r27, r27
    4a44:	b8 2e       	mov	r11, r24
    4a46:	21 15       	cp	r18, r1
    4a48:	31 05       	cpc	r19, r1
    4a4a:	41 05       	cpc	r20, r1
    4a4c:	51 05       	cpc	r21, r1
    4a4e:	19 f4       	brne	.+6      	; 0x4a56 <__floatsisf+0x36>
    4a50:	82 e0       	ldi	r24, 0x02	; 2
    4a52:	89 83       	std	Y+1, r24	; 0x01
    4a54:	3a c0       	rjmp	.+116    	; 0x4aca <__floatsisf+0xaa>
    4a56:	88 23       	and	r24, r24
    4a58:	a9 f0       	breq	.+42     	; 0x4a84 <__floatsisf+0x64>
    4a5a:	20 30       	cpi	r18, 0x00	; 0
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	38 07       	cpc	r19, r24
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	48 07       	cpc	r20, r24
    4a64:	80 e8       	ldi	r24, 0x80	; 128
    4a66:	58 07       	cpc	r21, r24
    4a68:	29 f4       	brne	.+10     	; 0x4a74 <__floatsisf+0x54>
    4a6a:	60 e0       	ldi	r22, 0x00	; 0
    4a6c:	70 e0       	ldi	r23, 0x00	; 0
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	9f ec       	ldi	r25, 0xCF	; 207
    4a72:	30 c0       	rjmp	.+96     	; 0x4ad4 <__floatsisf+0xb4>
    4a74:	ee 24       	eor	r14, r14
    4a76:	ff 24       	eor	r15, r15
    4a78:	87 01       	movw	r16, r14
    4a7a:	e2 1a       	sub	r14, r18
    4a7c:	f3 0a       	sbc	r15, r19
    4a7e:	04 0b       	sbc	r16, r20
    4a80:	15 0b       	sbc	r17, r21
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <__floatsisf+0x68>
    4a84:	79 01       	movw	r14, r18
    4a86:	8a 01       	movw	r16, r20
    4a88:	8e e1       	ldi	r24, 0x1E	; 30
    4a8a:	c8 2e       	mov	r12, r24
    4a8c:	d1 2c       	mov	r13, r1
    4a8e:	dc 82       	std	Y+4, r13	; 0x04
    4a90:	cb 82       	std	Y+3, r12	; 0x03
    4a92:	ed 82       	std	Y+5, r14	; 0x05
    4a94:	fe 82       	std	Y+6, r15	; 0x06
    4a96:	0f 83       	std	Y+7, r16	; 0x07
    4a98:	18 87       	std	Y+8, r17	; 0x08
    4a9a:	c8 01       	movw	r24, r16
    4a9c:	b7 01       	movw	r22, r14
    4a9e:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__clzsi2>
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	18 16       	cp	r1, r24
    4aa6:	19 06       	cpc	r1, r25
    4aa8:	84 f4       	brge	.+32     	; 0x4aca <__floatsisf+0xaa>
    4aaa:	08 2e       	mov	r0, r24
    4aac:	04 c0       	rjmp	.+8      	; 0x4ab6 <__floatsisf+0x96>
    4aae:	ee 0c       	add	r14, r14
    4ab0:	ff 1c       	adc	r15, r15
    4ab2:	00 1f       	adc	r16, r16
    4ab4:	11 1f       	adc	r17, r17
    4ab6:	0a 94       	dec	r0
    4ab8:	d2 f7       	brpl	.-12     	; 0x4aae <__floatsisf+0x8e>
    4aba:	ed 82       	std	Y+5, r14	; 0x05
    4abc:	fe 82       	std	Y+6, r15	; 0x06
    4abe:	0f 83       	std	Y+7, r16	; 0x07
    4ac0:	18 87       	std	Y+8, r17	; 0x08
    4ac2:	c8 1a       	sub	r12, r24
    4ac4:	d9 0a       	sbc	r13, r25
    4ac6:	dc 82       	std	Y+4, r13	; 0x04
    4ac8:	cb 82       	std	Y+3, r12	; 0x03
    4aca:	ba 82       	std	Y+2, r11	; 0x02
    4acc:	ce 01       	movw	r24, r28
    4ace:	01 96       	adiw	r24, 0x01	; 1
    4ad0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__pack_f>
    4ad4:	e9 e0       	ldi	r30, 0x09	; 9
    4ad6:	28 96       	adiw	r28, 0x08	; 8
    4ad8:	0c 94 c9 27 	jmp	0x4f92	; 0x4f92 <__epilogue_restores__+0x12>

00004adc <__fixsfsi>:
    4adc:	ac e0       	ldi	r26, 0x0C	; 12
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	e4 e7       	ldi	r30, 0x74	; 116
    4ae2:	f5 e2       	ldi	r31, 0x25	; 37
    4ae4:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__prologue_saves__+0x20>
    4ae8:	69 83       	std	Y+1, r22	; 0x01
    4aea:	7a 83       	std	Y+2, r23	; 0x02
    4aec:	8b 83       	std	Y+3, r24	; 0x03
    4aee:	9c 83       	std	Y+4, r25	; 0x04
    4af0:	be 01       	movw	r22, r28
    4af2:	6b 5f       	subi	r22, 0xFB	; 251
    4af4:	7f 4f       	sbci	r23, 0xFF	; 255
    4af6:	ce 01       	movw	r24, r28
    4af8:	01 96       	adiw	r24, 0x01	; 1
    4afa:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__unpack_f>
    4afe:	8d 81       	ldd	r24, Y+5	; 0x05
    4b00:	82 30       	cpi	r24, 0x02	; 2
    4b02:	a9 f1       	breq	.+106    	; 0x4b6e <__fixsfsi+0x92>
    4b04:	82 30       	cpi	r24, 0x02	; 2
    4b06:	98 f1       	brcs	.+102    	; 0x4b6e <__fixsfsi+0x92>
    4b08:	84 30       	cpi	r24, 0x04	; 4
    4b0a:	21 f4       	brne	.+8      	; 0x4b14 <__fixsfsi+0x38>
    4b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b0e:	88 23       	and	r24, r24
    4b10:	59 f4       	brne	.+22     	; 0x4b28 <__fixsfsi+0x4c>
    4b12:	0f c0       	rjmp	.+30     	; 0x4b32 <__fixsfsi+0x56>
    4b14:	2f 81       	ldd	r18, Y+7	; 0x07
    4b16:	38 85       	ldd	r19, Y+8	; 0x08
    4b18:	37 fd       	sbrc	r19, 7
    4b1a:	29 c0       	rjmp	.+82     	; 0x4b6e <__fixsfsi+0x92>
    4b1c:	6e 81       	ldd	r22, Y+6	; 0x06
    4b1e:	2f 31       	cpi	r18, 0x1F	; 31
    4b20:	31 05       	cpc	r19, r1
    4b22:	64 f0       	brlt	.+24     	; 0x4b3c <__fixsfsi+0x60>
    4b24:	66 23       	and	r22, r22
    4b26:	29 f0       	breq	.+10     	; 0x4b32 <__fixsfsi+0x56>
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	40 e0       	ldi	r20, 0x00	; 0
    4b2e:	50 e8       	ldi	r21, 0x80	; 128
    4b30:	22 c0       	rjmp	.+68     	; 0x4b76 <__fixsfsi+0x9a>
    4b32:	2f ef       	ldi	r18, 0xFF	; 255
    4b34:	3f ef       	ldi	r19, 0xFF	; 255
    4b36:	4f ef       	ldi	r20, 0xFF	; 255
    4b38:	5f e7       	ldi	r21, 0x7F	; 127
    4b3a:	1d c0       	rjmp	.+58     	; 0x4b76 <__fixsfsi+0x9a>
    4b3c:	8e e1       	ldi	r24, 0x1E	; 30
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	82 1b       	sub	r24, r18
    4b42:	93 0b       	sbc	r25, r19
    4b44:	29 85       	ldd	r18, Y+9	; 0x09
    4b46:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b48:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b4c:	04 c0       	rjmp	.+8      	; 0x4b56 <__fixsfsi+0x7a>
    4b4e:	56 95       	lsr	r21
    4b50:	47 95       	ror	r20
    4b52:	37 95       	ror	r19
    4b54:	27 95       	ror	r18
    4b56:	8a 95       	dec	r24
    4b58:	d2 f7       	brpl	.-12     	; 0x4b4e <__fixsfsi+0x72>
    4b5a:	66 23       	and	r22, r22
    4b5c:	61 f0       	breq	.+24     	; 0x4b76 <__fixsfsi+0x9a>
    4b5e:	50 95       	com	r21
    4b60:	40 95       	com	r20
    4b62:	30 95       	com	r19
    4b64:	21 95       	neg	r18
    4b66:	3f 4f       	sbci	r19, 0xFF	; 255
    4b68:	4f 4f       	sbci	r20, 0xFF	; 255
    4b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b6c:	04 c0       	rjmp	.+8      	; 0x4b76 <__fixsfsi+0x9a>
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	40 e0       	ldi	r20, 0x00	; 0
    4b74:	50 e0       	ldi	r21, 0x00	; 0
    4b76:	ca 01       	movw	r24, r20
    4b78:	b9 01       	movw	r22, r18
    4b7a:	e2 e0       	ldi	r30, 0x02	; 2
    4b7c:	2c 96       	adiw	r28, 0x0c	; 12
    4b7e:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <__epilogue_restores__+0x20>

00004b82 <__clzsi2>:
    4b82:	ef 92       	push	r14
    4b84:	ff 92       	push	r15
    4b86:	0f 93       	push	r16
    4b88:	1f 93       	push	r17
    4b8a:	9b 01       	movw	r18, r22
    4b8c:	ac 01       	movw	r20, r24
    4b8e:	20 30       	cpi	r18, 0x00	; 0
    4b90:	80 e0       	ldi	r24, 0x00	; 0
    4b92:	38 07       	cpc	r19, r24
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	48 07       	cpc	r20, r24
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	58 07       	cpc	r21, r24
    4b9c:	80 f4       	brcc	.+32     	; 0x4bbe <__clzsi2+0x3c>
    4b9e:	2f 3f       	cpi	r18, 0xFF	; 255
    4ba0:	31 05       	cpc	r19, r1
    4ba2:	41 05       	cpc	r20, r1
    4ba4:	51 05       	cpc	r21, r1
    4ba6:	09 f0       	breq	.+2      	; 0x4baa <__clzsi2+0x28>
    4ba8:	20 f4       	brcc	.+8      	; 0x4bb2 <__clzsi2+0x30>
    4baa:	ee 24       	eor	r14, r14
    4bac:	ff 24       	eor	r15, r15
    4bae:	87 01       	movw	r16, r14
    4bb0:	19 c0       	rjmp	.+50     	; 0x4be4 <__clzsi2+0x62>
    4bb2:	68 e0       	ldi	r22, 0x08	; 8
    4bb4:	e6 2e       	mov	r14, r22
    4bb6:	f1 2c       	mov	r15, r1
    4bb8:	01 2d       	mov	r16, r1
    4bba:	11 2d       	mov	r17, r1
    4bbc:	13 c0       	rjmp	.+38     	; 0x4be4 <__clzsi2+0x62>
    4bbe:	20 30       	cpi	r18, 0x00	; 0
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	38 07       	cpc	r19, r24
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	48 07       	cpc	r20, r24
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	58 07       	cpc	r21, r24
    4bcc:	30 f4       	brcc	.+12     	; 0x4bda <__clzsi2+0x58>
    4bce:	90 e1       	ldi	r25, 0x10	; 16
    4bd0:	e9 2e       	mov	r14, r25
    4bd2:	f1 2c       	mov	r15, r1
    4bd4:	01 2d       	mov	r16, r1
    4bd6:	11 2d       	mov	r17, r1
    4bd8:	05 c0       	rjmp	.+10     	; 0x4be4 <__clzsi2+0x62>
    4bda:	88 e1       	ldi	r24, 0x18	; 24
    4bdc:	e8 2e       	mov	r14, r24
    4bde:	f1 2c       	mov	r15, r1
    4be0:	01 2d       	mov	r16, r1
    4be2:	11 2d       	mov	r17, r1
    4be4:	80 e2       	ldi	r24, 0x20	; 32
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	a0 e0       	ldi	r26, 0x00	; 0
    4bea:	b0 e0       	ldi	r27, 0x00	; 0
    4bec:	8e 19       	sub	r24, r14
    4bee:	9f 09       	sbc	r25, r15
    4bf0:	a0 0b       	sbc	r26, r16
    4bf2:	b1 0b       	sbc	r27, r17
    4bf4:	04 c0       	rjmp	.+8      	; 0x4bfe <__clzsi2+0x7c>
    4bf6:	56 95       	lsr	r21
    4bf8:	47 95       	ror	r20
    4bfa:	37 95       	ror	r19
    4bfc:	27 95       	ror	r18
    4bfe:	ea 94       	dec	r14
    4c00:	d2 f7       	brpl	.-12     	; 0x4bf6 <__clzsi2+0x74>
    4c02:	f9 01       	movw	r30, r18
    4c04:	e1 5e       	subi	r30, 0xE1	; 225
    4c06:	fd 4f       	sbci	r31, 0xFD	; 253
    4c08:	20 81       	ld	r18, Z
    4c0a:	82 1b       	sub	r24, r18
    4c0c:	91 09       	sbc	r25, r1
    4c0e:	a1 09       	sbc	r26, r1
    4c10:	b1 09       	sbc	r27, r1
    4c12:	1f 91       	pop	r17
    4c14:	0f 91       	pop	r16
    4c16:	ff 90       	pop	r15
    4c18:	ef 90       	pop	r14
    4c1a:	08 95       	ret

00004c1c <__pack_f>:
    4c1c:	9f 92       	push	r9
    4c1e:	af 92       	push	r10
    4c20:	bf 92       	push	r11
    4c22:	cf 92       	push	r12
    4c24:	df 92       	push	r13
    4c26:	ef 92       	push	r14
    4c28:	ff 92       	push	r15
    4c2a:	0f 93       	push	r16
    4c2c:	1f 93       	push	r17
    4c2e:	ee 24       	eor	r14, r14
    4c30:	ff 24       	eor	r15, r15
    4c32:	87 01       	movw	r16, r14
    4c34:	fc 01       	movw	r30, r24
    4c36:	24 81       	ldd	r18, Z+4	; 0x04
    4c38:	35 81       	ldd	r19, Z+5	; 0x05
    4c3a:	46 81       	ldd	r20, Z+6	; 0x06
    4c3c:	57 81       	ldd	r21, Z+7	; 0x07
    4c3e:	91 80       	ldd	r9, Z+1	; 0x01
    4c40:	80 81       	ld	r24, Z
    4c42:	82 30       	cpi	r24, 0x02	; 2
    4c44:	10 f4       	brcc	.+4      	; 0x4c4a <__pack_f+0x2e>
    4c46:	40 61       	ori	r20, 0x10	; 16
    4c48:	a2 c0       	rjmp	.+324    	; 0x4d8e <__pack_f+0x172>
    4c4a:	84 30       	cpi	r24, 0x04	; 4
    4c4c:	09 f4       	brne	.+2      	; 0x4c50 <__pack_f+0x34>
    4c4e:	9b c0       	rjmp	.+310    	; 0x4d86 <__pack_f+0x16a>
    4c50:	82 30       	cpi	r24, 0x02	; 2
    4c52:	29 f4       	brne	.+10     	; 0x4c5e <__pack_f+0x42>
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	40 e0       	ldi	r20, 0x00	; 0
    4c5a:	50 e0       	ldi	r21, 0x00	; 0
    4c5c:	05 c0       	rjmp	.+10     	; 0x4c68 <__pack_f+0x4c>
    4c5e:	21 15       	cp	r18, r1
    4c60:	31 05       	cpc	r19, r1
    4c62:	41 05       	cpc	r20, r1
    4c64:	51 05       	cpc	r21, r1
    4c66:	19 f4       	brne	.+6      	; 0x4c6e <__pack_f+0x52>
    4c68:	e0 e0       	ldi	r30, 0x00	; 0
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	92 c0       	rjmp	.+292    	; 0x4d92 <__pack_f+0x176>
    4c6e:	82 81       	ldd	r24, Z+2	; 0x02
    4c70:	93 81       	ldd	r25, Z+3	; 0x03
    4c72:	6f ef       	ldi	r22, 0xFF	; 255
    4c74:	82 38       	cpi	r24, 0x82	; 130
    4c76:	96 07       	cpc	r25, r22
    4c78:	0c f0       	brlt	.+2      	; 0x4c7c <__pack_f+0x60>
    4c7a:	5a c0       	rjmp	.+180    	; 0x4d30 <__pack_f+0x114>
    4c7c:	62 e8       	ldi	r22, 0x82	; 130
    4c7e:	7f ef       	ldi	r23, 0xFF	; 255
    4c80:	68 1b       	sub	r22, r24
    4c82:	79 0b       	sbc	r23, r25
    4c84:	6a 31       	cpi	r22, 0x1A	; 26
    4c86:	71 05       	cpc	r23, r1
    4c88:	2c f0       	brlt	.+10     	; 0x4c94 <__pack_f+0x78>
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	40 e0       	ldi	r20, 0x00	; 0
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	2a c0       	rjmp	.+84     	; 0x4ce8 <__pack_f+0xcc>
    4c94:	aa 24       	eor	r10, r10
    4c96:	bb 24       	eor	r11, r11
    4c98:	65 01       	movw	r12, r10
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	a0 e0       	ldi	r26, 0x00	; 0
    4ca0:	b0 e0       	ldi	r27, 0x00	; 0
    4ca2:	06 2e       	mov	r0, r22
    4ca4:	04 c0       	rjmp	.+8      	; 0x4cae <__pack_f+0x92>
    4ca6:	88 0f       	add	r24, r24
    4ca8:	99 1f       	adc	r25, r25
    4caa:	aa 1f       	adc	r26, r26
    4cac:	bb 1f       	adc	r27, r27
    4cae:	0a 94       	dec	r0
    4cb0:	d2 f7       	brpl	.-12     	; 0x4ca6 <__pack_f+0x8a>
    4cb2:	01 97       	sbiw	r24, 0x01	; 1
    4cb4:	a1 09       	sbc	r26, r1
    4cb6:	b1 09       	sbc	r27, r1
    4cb8:	82 23       	and	r24, r18
    4cba:	93 23       	and	r25, r19
    4cbc:	a4 23       	and	r26, r20
    4cbe:	b5 23       	and	r27, r21
    4cc0:	00 97       	sbiw	r24, 0x00	; 0
    4cc2:	a1 05       	cpc	r26, r1
    4cc4:	b1 05       	cpc	r27, r1
    4cc6:	29 f0       	breq	.+10     	; 0x4cd2 <__pack_f+0xb6>
    4cc8:	71 e0       	ldi	r23, 0x01	; 1
    4cca:	a7 2e       	mov	r10, r23
    4ccc:	b1 2c       	mov	r11, r1
    4cce:	c1 2c       	mov	r12, r1
    4cd0:	d1 2c       	mov	r13, r1
    4cd2:	04 c0       	rjmp	.+8      	; 0x4cdc <__pack_f+0xc0>
    4cd4:	56 95       	lsr	r21
    4cd6:	47 95       	ror	r20
    4cd8:	37 95       	ror	r19
    4cda:	27 95       	ror	r18
    4cdc:	6a 95       	dec	r22
    4cde:	d2 f7       	brpl	.-12     	; 0x4cd4 <__pack_f+0xb8>
    4ce0:	2a 29       	or	r18, r10
    4ce2:	3b 29       	or	r19, r11
    4ce4:	4c 29       	or	r20, r12
    4ce6:	5d 29       	or	r21, r13
    4ce8:	da 01       	movw	r26, r20
    4cea:	c9 01       	movw	r24, r18
    4cec:	8f 77       	andi	r24, 0x7F	; 127
    4cee:	90 70       	andi	r25, 0x00	; 0
    4cf0:	a0 70       	andi	r26, 0x00	; 0
    4cf2:	b0 70       	andi	r27, 0x00	; 0
    4cf4:	80 34       	cpi	r24, 0x40	; 64
    4cf6:	91 05       	cpc	r25, r1
    4cf8:	a1 05       	cpc	r26, r1
    4cfa:	b1 05       	cpc	r27, r1
    4cfc:	39 f4       	brne	.+14     	; 0x4d0c <__pack_f+0xf0>
    4cfe:	27 ff       	sbrs	r18, 7
    4d00:	09 c0       	rjmp	.+18     	; 0x4d14 <__pack_f+0xf8>
    4d02:	20 5c       	subi	r18, 0xC0	; 192
    4d04:	3f 4f       	sbci	r19, 0xFF	; 255
    4d06:	4f 4f       	sbci	r20, 0xFF	; 255
    4d08:	5f 4f       	sbci	r21, 0xFF	; 255
    4d0a:	04 c0       	rjmp	.+8      	; 0x4d14 <__pack_f+0xf8>
    4d0c:	21 5c       	subi	r18, 0xC1	; 193
    4d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d10:	4f 4f       	sbci	r20, 0xFF	; 255
    4d12:	5f 4f       	sbci	r21, 0xFF	; 255
    4d14:	80 e0       	ldi	r24, 0x00	; 0
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	20 30       	cpi	r18, 0x00	; 0
    4d1a:	60 e0       	ldi	r22, 0x00	; 0
    4d1c:	36 07       	cpc	r19, r22
    4d1e:	60 e0       	ldi	r22, 0x00	; 0
    4d20:	46 07       	cpc	r20, r22
    4d22:	60 e4       	ldi	r22, 0x40	; 64
    4d24:	56 07       	cpc	r21, r22
    4d26:	10 f0       	brcs	.+4      	; 0x4d2c <__pack_f+0x110>
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	23 c0       	rjmp	.+70     	; 0x4d76 <__pack_f+0x15a>
    4d30:	80 38       	cpi	r24, 0x80	; 128
    4d32:	91 05       	cpc	r25, r1
    4d34:	44 f5       	brge	.+80     	; 0x4d86 <__pack_f+0x16a>
    4d36:	fc 01       	movw	r30, r24
    4d38:	e1 58       	subi	r30, 0x81	; 129
    4d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3c:	da 01       	movw	r26, r20
    4d3e:	c9 01       	movw	r24, r18
    4d40:	8f 77       	andi	r24, 0x7F	; 127
    4d42:	90 70       	andi	r25, 0x00	; 0
    4d44:	a0 70       	andi	r26, 0x00	; 0
    4d46:	b0 70       	andi	r27, 0x00	; 0
    4d48:	80 34       	cpi	r24, 0x40	; 64
    4d4a:	91 05       	cpc	r25, r1
    4d4c:	a1 05       	cpc	r26, r1
    4d4e:	b1 05       	cpc	r27, r1
    4d50:	39 f4       	brne	.+14     	; 0x4d60 <__pack_f+0x144>
    4d52:	27 ff       	sbrs	r18, 7
    4d54:	09 c0       	rjmp	.+18     	; 0x4d68 <__pack_f+0x14c>
    4d56:	20 5c       	subi	r18, 0xC0	; 192
    4d58:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5a:	4f 4f       	sbci	r20, 0xFF	; 255
    4d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d5e:	04 c0       	rjmp	.+8      	; 0x4d68 <__pack_f+0x14c>
    4d60:	21 5c       	subi	r18, 0xC1	; 193
    4d62:	3f 4f       	sbci	r19, 0xFF	; 255
    4d64:	4f 4f       	sbci	r20, 0xFF	; 255
    4d66:	5f 4f       	sbci	r21, 0xFF	; 255
    4d68:	57 ff       	sbrs	r21, 7
    4d6a:	05 c0       	rjmp	.+10     	; 0x4d76 <__pack_f+0x15a>
    4d6c:	56 95       	lsr	r21
    4d6e:	47 95       	ror	r20
    4d70:	37 95       	ror	r19
    4d72:	27 95       	ror	r18
    4d74:	31 96       	adiw	r30, 0x01	; 1
    4d76:	87 e0       	ldi	r24, 0x07	; 7
    4d78:	56 95       	lsr	r21
    4d7a:	47 95       	ror	r20
    4d7c:	37 95       	ror	r19
    4d7e:	27 95       	ror	r18
    4d80:	8a 95       	dec	r24
    4d82:	d1 f7       	brne	.-12     	; 0x4d78 <__pack_f+0x15c>
    4d84:	06 c0       	rjmp	.+12     	; 0x4d92 <__pack_f+0x176>
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e0       	ldi	r20, 0x00	; 0
    4d8c:	50 e0       	ldi	r21, 0x00	; 0
    4d8e:	ef ef       	ldi	r30, 0xFF	; 255
    4d90:	f0 e0       	ldi	r31, 0x00	; 0
    4d92:	e2 2e       	mov	r14, r18
    4d94:	f3 2e       	mov	r15, r19
    4d96:	94 2f       	mov	r25, r20
    4d98:	9f 77       	andi	r25, 0x7F	; 127
    4d9a:	80 2f       	mov	r24, r16
    4d9c:	80 78       	andi	r24, 0x80	; 128
    4d9e:	89 2b       	or	r24, r25
    4da0:	9e 2f       	mov	r25, r30
    4da2:	97 95       	ror	r25
    4da4:	99 27       	eor	r25, r25
    4da6:	97 95       	ror	r25
    4da8:	8f 77       	andi	r24, 0x7F	; 127
    4daa:	08 2f       	mov	r16, r24
    4dac:	09 2b       	or	r16, r25
    4dae:	9e 2f       	mov	r25, r30
    4db0:	96 95       	lsr	r25
    4db2:	81 2f       	mov	r24, r17
    4db4:	80 78       	andi	r24, 0x80	; 128
    4db6:	89 2b       	or	r24, r25
    4db8:	97 94       	ror	r9
    4dba:	99 24       	eor	r9, r9
    4dbc:	97 94       	ror	r9
    4dbe:	8f 77       	andi	r24, 0x7F	; 127
    4dc0:	18 2f       	mov	r17, r24
    4dc2:	19 29       	or	r17, r9
    4dc4:	c8 01       	movw	r24, r16
    4dc6:	b7 01       	movw	r22, r14
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	df 90       	pop	r13
    4dd2:	cf 90       	pop	r12
    4dd4:	bf 90       	pop	r11
    4dd6:	af 90       	pop	r10
    4dd8:	9f 90       	pop	r9
    4dda:	08 95       	ret

00004ddc <__unpack_f>:
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	fc 01       	movw	r30, r24
    4de2:	db 01       	movw	r26, r22
    4de4:	20 81       	ld	r18, Z
    4de6:	31 81       	ldd	r19, Z+1	; 0x01
    4de8:	92 81       	ldd	r25, Z+2	; 0x02
    4dea:	49 2f       	mov	r20, r25
    4dec:	4f 77       	andi	r20, 0x7F	; 127
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	99 1f       	adc	r25, r25
    4df2:	99 27       	eor	r25, r25
    4df4:	99 1f       	adc	r25, r25
    4df6:	83 81       	ldd	r24, Z+3	; 0x03
    4df8:	e8 2f       	mov	r30, r24
    4dfa:	ee 0f       	add	r30, r30
    4dfc:	e9 2b       	or	r30, r25
    4dfe:	6e 2f       	mov	r22, r30
    4e00:	70 e0       	ldi	r23, 0x00	; 0
    4e02:	88 1f       	adc	r24, r24
    4e04:	88 27       	eor	r24, r24
    4e06:	88 1f       	adc	r24, r24
    4e08:	ed 01       	movw	r28, r26
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	ee 23       	and	r30, r30
    4e0e:	71 f5       	brne	.+92     	; 0x4e6c <__unpack_f+0x90>
    4e10:	21 15       	cp	r18, r1
    4e12:	31 05       	cpc	r19, r1
    4e14:	41 05       	cpc	r20, r1
    4e16:	51 05       	cpc	r21, r1
    4e18:	11 f4       	brne	.+4      	; 0x4e1e <__unpack_f+0x42>
    4e1a:	82 e0       	ldi	r24, 0x02	; 2
    4e1c:	2f c0       	rjmp	.+94     	; 0x4e7c <__unpack_f+0xa0>
    4e1e:	6e 57       	subi	r22, 0x7E	; 126
    4e20:	70 40       	sbci	r23, 0x00	; 0
    4e22:	fd 01       	movw	r30, r26
    4e24:	73 83       	std	Z+3, r23	; 0x03
    4e26:	62 83       	std	Z+2, r22	; 0x02
    4e28:	67 e0       	ldi	r22, 0x07	; 7
    4e2a:	22 0f       	add	r18, r18
    4e2c:	33 1f       	adc	r19, r19
    4e2e:	44 1f       	adc	r20, r20
    4e30:	55 1f       	adc	r21, r21
    4e32:	6a 95       	dec	r22
    4e34:	d1 f7       	brne	.-12     	; 0x4e2a <__unpack_f+0x4e>
    4e36:	83 e0       	ldi	r24, 0x03	; 3
    4e38:	8c 93       	st	X, r24
    4e3a:	0a c0       	rjmp	.+20     	; 0x4e50 <__unpack_f+0x74>
    4e3c:	22 0f       	add	r18, r18
    4e3e:	33 1f       	adc	r19, r19
    4e40:	44 1f       	adc	r20, r20
    4e42:	55 1f       	adc	r21, r21
    4e44:	ed 01       	movw	r28, r26
    4e46:	8a 81       	ldd	r24, Y+2	; 0x02
    4e48:	9b 81       	ldd	r25, Y+3	; 0x03
    4e4a:	01 97       	sbiw	r24, 0x01	; 1
    4e4c:	9b 83       	std	Y+3, r25	; 0x03
    4e4e:	8a 83       	std	Y+2, r24	; 0x02
    4e50:	20 30       	cpi	r18, 0x00	; 0
    4e52:	e0 e0       	ldi	r30, 0x00	; 0
    4e54:	3e 07       	cpc	r19, r30
    4e56:	e0 e0       	ldi	r30, 0x00	; 0
    4e58:	4e 07       	cpc	r20, r30
    4e5a:	e0 e4       	ldi	r30, 0x40	; 64
    4e5c:	5e 07       	cpc	r21, r30
    4e5e:	70 f3       	brcs	.-36     	; 0x4e3c <__unpack_f+0x60>
    4e60:	ed 01       	movw	r28, r26
    4e62:	2c 83       	std	Y+4, r18	; 0x04
    4e64:	3d 83       	std	Y+5, r19	; 0x05
    4e66:	4e 83       	std	Y+6, r20	; 0x06
    4e68:	5f 83       	std	Y+7, r21	; 0x07
    4e6a:	25 c0       	rjmp	.+74     	; 0x4eb6 <__unpack_f+0xda>
    4e6c:	ef 3f       	cpi	r30, 0xFF	; 255
    4e6e:	79 f4       	brne	.+30     	; 0x4e8e <__unpack_f+0xb2>
    4e70:	21 15       	cp	r18, r1
    4e72:	31 05       	cpc	r19, r1
    4e74:	41 05       	cpc	r20, r1
    4e76:	51 05       	cpc	r21, r1
    4e78:	19 f4       	brne	.+6      	; 0x4e80 <__unpack_f+0xa4>
    4e7a:	84 e0       	ldi	r24, 0x04	; 4
    4e7c:	8c 93       	st	X, r24
    4e7e:	1b c0       	rjmp	.+54     	; 0x4eb6 <__unpack_f+0xda>
    4e80:	44 ff       	sbrs	r20, 4
    4e82:	03 c0       	rjmp	.+6      	; 0x4e8a <__unpack_f+0xae>
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	8c 93       	st	X, r24
    4e88:	11 c0       	rjmp	.+34     	; 0x4eac <__unpack_f+0xd0>
    4e8a:	1c 92       	st	X, r1
    4e8c:	0f c0       	rjmp	.+30     	; 0x4eac <__unpack_f+0xd0>
    4e8e:	6f 57       	subi	r22, 0x7F	; 127
    4e90:	70 40       	sbci	r23, 0x00	; 0
    4e92:	ed 01       	movw	r28, r26
    4e94:	7b 83       	std	Y+3, r23	; 0x03
    4e96:	6a 83       	std	Y+2, r22	; 0x02
    4e98:	83 e0       	ldi	r24, 0x03	; 3
    4e9a:	8c 93       	st	X, r24
    4e9c:	87 e0       	ldi	r24, 0x07	; 7
    4e9e:	22 0f       	add	r18, r18
    4ea0:	33 1f       	adc	r19, r19
    4ea2:	44 1f       	adc	r20, r20
    4ea4:	55 1f       	adc	r21, r21
    4ea6:	8a 95       	dec	r24
    4ea8:	d1 f7       	brne	.-12     	; 0x4e9e <__unpack_f+0xc2>
    4eaa:	50 64       	ori	r21, 0x40	; 64
    4eac:	fd 01       	movw	r30, r26
    4eae:	24 83       	std	Z+4, r18	; 0x04
    4eb0:	35 83       	std	Z+5, r19	; 0x05
    4eb2:	46 83       	std	Z+6, r20	; 0x06
    4eb4:	57 83       	std	Z+7, r21	; 0x07
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	08 95       	ret

00004ebc <__mulsi3>:
    4ebc:	62 9f       	mul	r22, r18
    4ebe:	d0 01       	movw	r26, r0
    4ec0:	73 9f       	mul	r23, r19
    4ec2:	f0 01       	movw	r30, r0
    4ec4:	82 9f       	mul	r24, r18
    4ec6:	e0 0d       	add	r30, r0
    4ec8:	f1 1d       	adc	r31, r1
    4eca:	64 9f       	mul	r22, r20
    4ecc:	e0 0d       	add	r30, r0
    4ece:	f1 1d       	adc	r31, r1
    4ed0:	92 9f       	mul	r25, r18
    4ed2:	f0 0d       	add	r31, r0
    4ed4:	83 9f       	mul	r24, r19
    4ed6:	f0 0d       	add	r31, r0
    4ed8:	74 9f       	mul	r23, r20
    4eda:	f0 0d       	add	r31, r0
    4edc:	65 9f       	mul	r22, r21
    4ede:	f0 0d       	add	r31, r0
    4ee0:	99 27       	eor	r25, r25
    4ee2:	72 9f       	mul	r23, r18
    4ee4:	b0 0d       	add	r27, r0
    4ee6:	e1 1d       	adc	r30, r1
    4ee8:	f9 1f       	adc	r31, r25
    4eea:	63 9f       	mul	r22, r19
    4eec:	b0 0d       	add	r27, r0
    4eee:	e1 1d       	adc	r30, r1
    4ef0:	f9 1f       	adc	r31, r25
    4ef2:	bd 01       	movw	r22, r26
    4ef4:	cf 01       	movw	r24, r30
    4ef6:	11 24       	eor	r1, r1
    4ef8:	08 95       	ret

00004efa <__udivmodhi4>:
    4efa:	aa 1b       	sub	r26, r26
    4efc:	bb 1b       	sub	r27, r27
    4efe:	51 e1       	ldi	r21, 0x11	; 17
    4f00:	07 c0       	rjmp	.+14     	; 0x4f10 <__udivmodhi4_ep>

00004f02 <__udivmodhi4_loop>:
    4f02:	aa 1f       	adc	r26, r26
    4f04:	bb 1f       	adc	r27, r27
    4f06:	a6 17       	cp	r26, r22
    4f08:	b7 07       	cpc	r27, r23
    4f0a:	10 f0       	brcs	.+4      	; 0x4f10 <__udivmodhi4_ep>
    4f0c:	a6 1b       	sub	r26, r22
    4f0e:	b7 0b       	sbc	r27, r23

00004f10 <__udivmodhi4_ep>:
    4f10:	88 1f       	adc	r24, r24
    4f12:	99 1f       	adc	r25, r25
    4f14:	5a 95       	dec	r21
    4f16:	a9 f7       	brne	.-22     	; 0x4f02 <__udivmodhi4_loop>
    4f18:	80 95       	com	r24
    4f1a:	90 95       	com	r25
    4f1c:	bc 01       	movw	r22, r24
    4f1e:	cd 01       	movw	r24, r26
    4f20:	08 95       	ret

00004f22 <__divmodhi4>:
    4f22:	97 fb       	bst	r25, 7
    4f24:	09 2e       	mov	r0, r25
    4f26:	07 26       	eor	r0, r23
    4f28:	0a d0       	rcall	.+20     	; 0x4f3e <__divmodhi4_neg1>
    4f2a:	77 fd       	sbrc	r23, 7
    4f2c:	04 d0       	rcall	.+8      	; 0x4f36 <__divmodhi4_neg2>
    4f2e:	e5 df       	rcall	.-54     	; 0x4efa <__udivmodhi4>
    4f30:	06 d0       	rcall	.+12     	; 0x4f3e <__divmodhi4_neg1>
    4f32:	00 20       	and	r0, r0
    4f34:	1a f4       	brpl	.+6      	; 0x4f3c <__divmodhi4_exit>

00004f36 <__divmodhi4_neg2>:
    4f36:	70 95       	com	r23
    4f38:	61 95       	neg	r22
    4f3a:	7f 4f       	sbci	r23, 0xFF	; 255

00004f3c <__divmodhi4_exit>:
    4f3c:	08 95       	ret

00004f3e <__divmodhi4_neg1>:
    4f3e:	f6 f7       	brtc	.-4      	; 0x4f3c <__divmodhi4_exit>
    4f40:	90 95       	com	r25
    4f42:	81 95       	neg	r24
    4f44:	9f 4f       	sbci	r25, 0xFF	; 255
    4f46:	08 95       	ret

00004f48 <__prologue_saves__>:
    4f48:	2f 92       	push	r2
    4f4a:	3f 92       	push	r3
    4f4c:	4f 92       	push	r4
    4f4e:	5f 92       	push	r5
    4f50:	6f 92       	push	r6
    4f52:	7f 92       	push	r7
    4f54:	8f 92       	push	r8
    4f56:	9f 92       	push	r9
    4f58:	af 92       	push	r10
    4f5a:	bf 92       	push	r11
    4f5c:	cf 92       	push	r12
    4f5e:	df 92       	push	r13
    4f60:	ef 92       	push	r14
    4f62:	ff 92       	push	r15
    4f64:	0f 93       	push	r16
    4f66:	1f 93       	push	r17
    4f68:	cf 93       	push	r28
    4f6a:	df 93       	push	r29
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	ca 1b       	sub	r28, r26
    4f72:	db 0b       	sbc	r29, r27
    4f74:	0f b6       	in	r0, 0x3f	; 63
    4f76:	f8 94       	cli
    4f78:	de bf       	out	0x3e, r29	; 62
    4f7a:	0f be       	out	0x3f, r0	; 63
    4f7c:	cd bf       	out	0x3d, r28	; 61
    4f7e:	19 94       	eijmp

00004f80 <__epilogue_restores__>:
    4f80:	2a 88       	ldd	r2, Y+18	; 0x12
    4f82:	39 88       	ldd	r3, Y+17	; 0x11
    4f84:	48 88       	ldd	r4, Y+16	; 0x10
    4f86:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f88:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f90:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f92:	b9 84       	ldd	r11, Y+9	; 0x09
    4f94:	c8 84       	ldd	r12, Y+8	; 0x08
    4f96:	df 80       	ldd	r13, Y+7	; 0x07
    4f98:	ee 80       	ldd	r14, Y+6	; 0x06
    4f9a:	fd 80       	ldd	r15, Y+5	; 0x05
    4f9c:	0c 81       	ldd	r16, Y+4	; 0x04
    4f9e:	1b 81       	ldd	r17, Y+3	; 0x03
    4fa0:	aa 81       	ldd	r26, Y+2	; 0x02
    4fa2:	b9 81       	ldd	r27, Y+1	; 0x01
    4fa4:	ce 0f       	add	r28, r30
    4fa6:	d1 1d       	adc	r29, r1
    4fa8:	0f b6       	in	r0, 0x3f	; 63
    4faa:	f8 94       	cli
    4fac:	de bf       	out	0x3e, r29	; 62
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	cd bf       	out	0x3d, r28	; 61
    4fb2:	ed 01       	movw	r28, r26
    4fb4:	08 95       	ret

00004fb6 <do_rand>:
    4fb6:	af 92       	push	r10
    4fb8:	bf 92       	push	r11
    4fba:	cf 92       	push	r12
    4fbc:	df 92       	push	r13
    4fbe:	ef 92       	push	r14
    4fc0:	ff 92       	push	r15
    4fc2:	0f 93       	push	r16
    4fc4:	1f 93       	push	r17
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	ec 01       	movw	r28, r24
    4fcc:	68 81       	ld	r22, Y
    4fce:	79 81       	ldd	r23, Y+1	; 0x01
    4fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fd4:	61 15       	cp	r22, r1
    4fd6:	71 05       	cpc	r23, r1
    4fd8:	81 05       	cpc	r24, r1
    4fda:	91 05       	cpc	r25, r1
    4fdc:	21 f4       	brne	.+8      	; 0x4fe6 <do_rand+0x30>
    4fde:	64 e2       	ldi	r22, 0x24	; 36
    4fe0:	79 ed       	ldi	r23, 0xD9	; 217
    4fe2:	8b e5       	ldi	r24, 0x5B	; 91
    4fe4:	97 e0       	ldi	r25, 0x07	; 7
    4fe6:	2d e1       	ldi	r18, 0x1D	; 29
    4fe8:	33 ef       	ldi	r19, 0xF3	; 243
    4fea:	41 e0       	ldi	r20, 0x01	; 1
    4fec:	50 e0       	ldi	r21, 0x00	; 0
    4fee:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__divmodsi4>
    4ff2:	79 01       	movw	r14, r18
    4ff4:	8a 01       	movw	r16, r20
    4ff6:	27 ea       	ldi	r18, 0xA7	; 167
    4ff8:	31 e4       	ldi	r19, 0x41	; 65
    4ffa:	40 e0       	ldi	r20, 0x00	; 0
    4ffc:	50 e0       	ldi	r21, 0x00	; 0
    4ffe:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__mulsi3>
    5002:	5b 01       	movw	r10, r22
    5004:	6c 01       	movw	r12, r24
    5006:	c8 01       	movw	r24, r16
    5008:	b7 01       	movw	r22, r14
    500a:	2c ee       	ldi	r18, 0xEC	; 236
    500c:	34 ef       	ldi	r19, 0xF4	; 244
    500e:	4f ef       	ldi	r20, 0xFF	; 255
    5010:	5f ef       	ldi	r21, 0xFF	; 255
    5012:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__mulsi3>
    5016:	6a 0d       	add	r22, r10
    5018:	7b 1d       	adc	r23, r11
    501a:	8c 1d       	adc	r24, r12
    501c:	9d 1d       	adc	r25, r13
    501e:	97 ff       	sbrs	r25, 7
    5020:	04 c0       	rjmp	.+8      	; 0x502a <do_rand+0x74>
    5022:	61 50       	subi	r22, 0x01	; 1
    5024:	70 40       	sbci	r23, 0x00	; 0
    5026:	80 40       	sbci	r24, 0x00	; 0
    5028:	90 48       	sbci	r25, 0x80	; 128
    502a:	68 83       	st	Y, r22
    502c:	79 83       	std	Y+1, r23	; 0x01
    502e:	8a 83       	std	Y+2, r24	; 0x02
    5030:	9b 83       	std	Y+3, r25	; 0x03
    5032:	7f 77       	andi	r23, 0x7F	; 127
    5034:	cb 01       	movw	r24, r22
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	1f 91       	pop	r17
    503c:	0f 91       	pop	r16
    503e:	ff 90       	pop	r15
    5040:	ef 90       	pop	r14
    5042:	df 90       	pop	r13
    5044:	cf 90       	pop	r12
    5046:	bf 90       	pop	r11
    5048:	af 90       	pop	r10
    504a:	08 95       	ret

0000504c <rand_r>:
    504c:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <do_rand>
    5050:	08 95       	ret

00005052 <rand>:
    5052:	8f e1       	ldi	r24, 0x1F	; 31
    5054:	93 e0       	ldi	r25, 0x03	; 3
    5056:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <do_rand>
    505a:	08 95       	ret

0000505c <srand>:
    505c:	a0 e0       	ldi	r26, 0x00	; 0
    505e:	b0 e0       	ldi	r27, 0x00	; 0
    5060:	80 93 1f 03 	sts	0x031F, r24
    5064:	90 93 20 03 	sts	0x0320, r25
    5068:	a0 93 21 03 	sts	0x0321, r26
    506c:	b0 93 22 03 	sts	0x0322, r27
    5070:	08 95       	ret
    5072:	f5 d0       	rcall	.+490    	; 0x525e <__fp_pscA>
    5074:	58 f0       	brcs	.+22     	; 0x508c <srand+0x30>
    5076:	80 e8       	ldi	r24, 0x80	; 128
    5078:	91 e0       	ldi	r25, 0x01	; 1
    507a:	09 f4       	brne	.+2      	; 0x507e <srand+0x22>
    507c:	9e ef       	ldi	r25, 0xFE	; 254
    507e:	f6 d0       	rcall	.+492    	; 0x526c <__fp_pscB>
    5080:	28 f0       	brcs	.+10     	; 0x508c <srand+0x30>
    5082:	40 e8       	ldi	r20, 0x80	; 128
    5084:	51 e0       	ldi	r21, 0x01	; 1
    5086:	59 f4       	brne	.+22     	; 0x509e <atan2+0xe>
    5088:	5e ef       	ldi	r21, 0xFE	; 254
    508a:	09 c0       	rjmp	.+18     	; 0x509e <atan2+0xe>
    508c:	c0 c0       	rjmp	.+384    	; 0x520e <__fp_nan>
    508e:	28 c1       	rjmp	.+592    	; 0x52e0 <__fp_zero>

00005090 <atan2>:
    5090:	e9 2f       	mov	r30, r25
    5092:	e0 78       	andi	r30, 0x80	; 128
    5094:	03 d1       	rcall	.+518    	; 0x529c <__fp_split3>
    5096:	68 f3       	brcs	.-38     	; 0x5072 <srand+0x16>
    5098:	09 2e       	mov	r0, r25
    509a:	05 2a       	or	r0, r21
    509c:	c1 f3       	breq	.-16     	; 0x508e <srand+0x32>
    509e:	26 17       	cp	r18, r22
    50a0:	37 07       	cpc	r19, r23
    50a2:	48 07       	cpc	r20, r24
    50a4:	59 07       	cpc	r21, r25
    50a6:	38 f0       	brcs	.+14     	; 0x50b6 <atan2+0x26>
    50a8:	0e 2e       	mov	r0, r30
    50aa:	07 f8       	bld	r0, 7
    50ac:	e0 25       	eor	r30, r0
    50ae:	69 f0       	breq	.+26     	; 0x50ca <atan2+0x3a>
    50b0:	e0 25       	eor	r30, r0
    50b2:	e0 64       	ori	r30, 0x40	; 64
    50b4:	0a c0       	rjmp	.+20     	; 0x50ca <atan2+0x3a>
    50b6:	ef 63       	ori	r30, 0x3F	; 63
    50b8:	07 f8       	bld	r0, 7
    50ba:	00 94       	com	r0
    50bc:	07 fa       	bst	r0, 7
    50be:	db 01       	movw	r26, r22
    50c0:	b9 01       	movw	r22, r18
    50c2:	9d 01       	movw	r18, r26
    50c4:	dc 01       	movw	r26, r24
    50c6:	ca 01       	movw	r24, r20
    50c8:	ad 01       	movw	r20, r26
    50ca:	ef 93       	push	r30
    50cc:	41 d0       	rcall	.+130    	; 0x5150 <__divsf3_pse>
    50ce:	d5 d0       	rcall	.+426    	; 0x527a <__fp_round>
    50d0:	0a d0       	rcall	.+20     	; 0x50e6 <atan>
    50d2:	5f 91       	pop	r21
    50d4:	55 23       	and	r21, r21
    50d6:	31 f0       	breq	.+12     	; 0x50e4 <atan2+0x54>
    50d8:	2b ed       	ldi	r18, 0xDB	; 219
    50da:	3f e0       	ldi	r19, 0x0F	; 15
    50dc:	49 e4       	ldi	r20, 0x49	; 73
    50de:	50 fd       	sbrc	r21, 0
    50e0:	49 ec       	ldi	r20, 0xC9	; 201
    50e2:	8d c1       	rjmp	.+794    	; 0x53fe <__addsf3>
    50e4:	08 95       	ret

000050e6 <atan>:
    50e6:	df 93       	push	r29
    50e8:	dd 27       	eor	r29, r29
    50ea:	b9 2f       	mov	r27, r25
    50ec:	bf 77       	andi	r27, 0x7F	; 127
    50ee:	40 e8       	ldi	r20, 0x80	; 128
    50f0:	5f e3       	ldi	r21, 0x3F	; 63
    50f2:	16 16       	cp	r1, r22
    50f4:	17 06       	cpc	r1, r23
    50f6:	48 07       	cpc	r20, r24
    50f8:	5b 07       	cpc	r21, r27
    50fa:	10 f4       	brcc	.+4      	; 0x5100 <atan+0x1a>
    50fc:	d9 2f       	mov	r29, r25
    50fe:	f7 d0       	rcall	.+494    	; 0x52ee <inverse>
    5100:	9f 93       	push	r25
    5102:	8f 93       	push	r24
    5104:	7f 93       	push	r23
    5106:	6f 93       	push	r22
    5108:	5a d1       	rcall	.+692    	; 0x53be <square>
    510a:	ee e4       	ldi	r30, 0x4E	; 78
    510c:	f1 e0       	ldi	r31, 0x01	; 1
    510e:	82 d0       	rcall	.+260    	; 0x5214 <__fp_powser>
    5110:	b4 d0       	rcall	.+360    	; 0x527a <__fp_round>
    5112:	2f 91       	pop	r18
    5114:	3f 91       	pop	r19
    5116:	4f 91       	pop	r20
    5118:	5f 91       	pop	r21
    511a:	fa d0       	rcall	.+500    	; 0x5310 <__mulsf3x>
    511c:	dd 23       	and	r29, r29
    511e:	49 f0       	breq	.+18     	; 0x5132 <atan+0x4c>
    5120:	90 58       	subi	r25, 0x80	; 128
    5122:	a2 ea       	ldi	r26, 0xA2	; 162
    5124:	2a ed       	ldi	r18, 0xDA	; 218
    5126:	3f e0       	ldi	r19, 0x0F	; 15
    5128:	49 ec       	ldi	r20, 0xC9	; 201
    512a:	5f e3       	ldi	r21, 0x3F	; 63
    512c:	d0 78       	andi	r29, 0x80	; 128
    512e:	5d 27       	eor	r21, r29
    5130:	77 d1       	rcall	.+750    	; 0x5420 <__addsf3x>
    5132:	df 91       	pop	r29
    5134:	a2 c0       	rjmp	.+324    	; 0x527a <__fp_round>
    5136:	9a d0       	rcall	.+308    	; 0x526c <__fp_pscB>
    5138:	40 f0       	brcs	.+16     	; 0x514a <atan+0x64>
    513a:	91 d0       	rcall	.+290    	; 0x525e <__fp_pscA>
    513c:	30 f0       	brcs	.+12     	; 0x514a <atan+0x64>
    513e:	21 f4       	brne	.+8      	; 0x5148 <atan+0x62>
    5140:	5f 3f       	cpi	r21, 0xFF	; 255
    5142:	19 f0       	breq	.+6      	; 0x514a <atan+0x64>
    5144:	5e c0       	rjmp	.+188    	; 0x5202 <__fp_inf>
    5146:	51 11       	cpse	r21, r1
    5148:	cc c0       	rjmp	.+408    	; 0x52e2 <__fp_szero>
    514a:	61 c0       	rjmp	.+194    	; 0x520e <__fp_nan>

0000514c <__divsf3x>:
    514c:	a7 d0       	rcall	.+334    	; 0x529c <__fp_split3>
    514e:	98 f3       	brcs	.-26     	; 0x5136 <atan+0x50>

00005150 <__divsf3_pse>:
    5150:	99 23       	and	r25, r25
    5152:	c9 f3       	breq	.-14     	; 0x5146 <atan+0x60>
    5154:	55 23       	and	r21, r21
    5156:	b1 f3       	breq	.-20     	; 0x5144 <atan+0x5e>
    5158:	95 1b       	sub	r25, r21
    515a:	55 0b       	sbc	r21, r21
    515c:	bb 27       	eor	r27, r27
    515e:	aa 27       	eor	r26, r26
    5160:	62 17       	cp	r22, r18
    5162:	73 07       	cpc	r23, r19
    5164:	84 07       	cpc	r24, r20
    5166:	38 f0       	brcs	.+14     	; 0x5176 <__divsf3_pse+0x26>
    5168:	9f 5f       	subi	r25, 0xFF	; 255
    516a:	5f 4f       	sbci	r21, 0xFF	; 255
    516c:	22 0f       	add	r18, r18
    516e:	33 1f       	adc	r19, r19
    5170:	44 1f       	adc	r20, r20
    5172:	aa 1f       	adc	r26, r26
    5174:	a9 f3       	breq	.-22     	; 0x5160 <__divsf3_pse+0x10>
    5176:	33 d0       	rcall	.+102    	; 0x51de <__divsf3_pse+0x8e>
    5178:	0e 2e       	mov	r0, r30
    517a:	3a f0       	brmi	.+14     	; 0x518a <__divsf3_pse+0x3a>
    517c:	e0 e8       	ldi	r30, 0x80	; 128
    517e:	30 d0       	rcall	.+96     	; 0x51e0 <__divsf3_pse+0x90>
    5180:	91 50       	subi	r25, 0x01	; 1
    5182:	50 40       	sbci	r21, 0x00	; 0
    5184:	e6 95       	lsr	r30
    5186:	00 1c       	adc	r0, r0
    5188:	ca f7       	brpl	.-14     	; 0x517c <__divsf3_pse+0x2c>
    518a:	29 d0       	rcall	.+82     	; 0x51de <__divsf3_pse+0x8e>
    518c:	fe 2f       	mov	r31, r30
    518e:	27 d0       	rcall	.+78     	; 0x51de <__divsf3_pse+0x8e>
    5190:	66 0f       	add	r22, r22
    5192:	77 1f       	adc	r23, r23
    5194:	88 1f       	adc	r24, r24
    5196:	bb 1f       	adc	r27, r27
    5198:	26 17       	cp	r18, r22
    519a:	37 07       	cpc	r19, r23
    519c:	48 07       	cpc	r20, r24
    519e:	ab 07       	cpc	r26, r27
    51a0:	b0 e8       	ldi	r27, 0x80	; 128
    51a2:	09 f0       	breq	.+2      	; 0x51a6 <__divsf3_pse+0x56>
    51a4:	bb 0b       	sbc	r27, r27
    51a6:	80 2d       	mov	r24, r0
    51a8:	bf 01       	movw	r22, r30
    51aa:	ff 27       	eor	r31, r31
    51ac:	93 58       	subi	r25, 0x83	; 131
    51ae:	5f 4f       	sbci	r21, 0xFF	; 255
    51b0:	2a f0       	brmi	.+10     	; 0x51bc <__divsf3_pse+0x6c>
    51b2:	9e 3f       	cpi	r25, 0xFE	; 254
    51b4:	51 05       	cpc	r21, r1
    51b6:	68 f0       	brcs	.+26     	; 0x51d2 <__divsf3_pse+0x82>
    51b8:	24 c0       	rjmp	.+72     	; 0x5202 <__fp_inf>
    51ba:	93 c0       	rjmp	.+294    	; 0x52e2 <__fp_szero>
    51bc:	5f 3f       	cpi	r21, 0xFF	; 255
    51be:	ec f3       	brlt	.-6      	; 0x51ba <__divsf3_pse+0x6a>
    51c0:	98 3e       	cpi	r25, 0xE8	; 232
    51c2:	dc f3       	brlt	.-10     	; 0x51ba <__divsf3_pse+0x6a>
    51c4:	86 95       	lsr	r24
    51c6:	77 95       	ror	r23
    51c8:	67 95       	ror	r22
    51ca:	b7 95       	ror	r27
    51cc:	f7 95       	ror	r31
    51ce:	9f 5f       	subi	r25, 0xFF	; 255
    51d0:	c9 f7       	brne	.-14     	; 0x51c4 <__divsf3_pse+0x74>
    51d2:	88 0f       	add	r24, r24
    51d4:	91 1d       	adc	r25, r1
    51d6:	96 95       	lsr	r25
    51d8:	87 95       	ror	r24
    51da:	97 f9       	bld	r25, 7
    51dc:	08 95       	ret
    51de:	e1 e0       	ldi	r30, 0x01	; 1
    51e0:	66 0f       	add	r22, r22
    51e2:	77 1f       	adc	r23, r23
    51e4:	88 1f       	adc	r24, r24
    51e6:	bb 1f       	adc	r27, r27
    51e8:	62 17       	cp	r22, r18
    51ea:	73 07       	cpc	r23, r19
    51ec:	84 07       	cpc	r24, r20
    51ee:	ba 07       	cpc	r27, r26
    51f0:	20 f0       	brcs	.+8      	; 0x51fa <__divsf3_pse+0xaa>
    51f2:	62 1b       	sub	r22, r18
    51f4:	73 0b       	sbc	r23, r19
    51f6:	84 0b       	sbc	r24, r20
    51f8:	ba 0b       	sbc	r27, r26
    51fa:	ee 1f       	adc	r30, r30
    51fc:	88 f7       	brcc	.-30     	; 0x51e0 <__divsf3_pse+0x90>
    51fe:	e0 95       	com	r30
    5200:	08 95       	ret

00005202 <__fp_inf>:
    5202:	97 f9       	bld	r25, 7
    5204:	9f 67       	ori	r25, 0x7F	; 127
    5206:	80 e8       	ldi	r24, 0x80	; 128
    5208:	70 e0       	ldi	r23, 0x00	; 0
    520a:	60 e0       	ldi	r22, 0x00	; 0
    520c:	08 95       	ret

0000520e <__fp_nan>:
    520e:	9f ef       	ldi	r25, 0xFF	; 255
    5210:	80 ec       	ldi	r24, 0xC0	; 192
    5212:	08 95       	ret

00005214 <__fp_powser>:
    5214:	df 93       	push	r29
    5216:	cf 93       	push	r28
    5218:	1f 93       	push	r17
    521a:	0f 93       	push	r16
    521c:	ff 92       	push	r15
    521e:	ef 92       	push	r14
    5220:	df 92       	push	r13
    5222:	7b 01       	movw	r14, r22
    5224:	8c 01       	movw	r16, r24
    5226:	68 94       	set
    5228:	05 c0       	rjmp	.+10     	; 0x5234 <__fp_powser+0x20>
    522a:	da 2e       	mov	r13, r26
    522c:	ef 01       	movw	r28, r30
    522e:	70 d0       	rcall	.+224    	; 0x5310 <__mulsf3x>
    5230:	fe 01       	movw	r30, r28
    5232:	e8 94       	clt
    5234:	a5 91       	lpm	r26, Z+
    5236:	25 91       	lpm	r18, Z+
    5238:	35 91       	lpm	r19, Z+
    523a:	45 91       	lpm	r20, Z+
    523c:	55 91       	lpm	r21, Z+
    523e:	ae f3       	brts	.-22     	; 0x522a <__fp_powser+0x16>
    5240:	ef 01       	movw	r28, r30
    5242:	ee d0       	rcall	.+476    	; 0x5420 <__addsf3x>
    5244:	fe 01       	movw	r30, r28
    5246:	97 01       	movw	r18, r14
    5248:	a8 01       	movw	r20, r16
    524a:	da 94       	dec	r13
    524c:	79 f7       	brne	.-34     	; 0x522c <__fp_powser+0x18>
    524e:	df 90       	pop	r13
    5250:	ef 90       	pop	r14
    5252:	ff 90       	pop	r15
    5254:	0f 91       	pop	r16
    5256:	1f 91       	pop	r17
    5258:	cf 91       	pop	r28
    525a:	df 91       	pop	r29
    525c:	08 95       	ret

0000525e <__fp_pscA>:
    525e:	00 24       	eor	r0, r0
    5260:	0a 94       	dec	r0
    5262:	16 16       	cp	r1, r22
    5264:	17 06       	cpc	r1, r23
    5266:	18 06       	cpc	r1, r24
    5268:	09 06       	cpc	r0, r25
    526a:	08 95       	ret

0000526c <__fp_pscB>:
    526c:	00 24       	eor	r0, r0
    526e:	0a 94       	dec	r0
    5270:	12 16       	cp	r1, r18
    5272:	13 06       	cpc	r1, r19
    5274:	14 06       	cpc	r1, r20
    5276:	05 06       	cpc	r0, r21
    5278:	08 95       	ret

0000527a <__fp_round>:
    527a:	09 2e       	mov	r0, r25
    527c:	03 94       	inc	r0
    527e:	00 0c       	add	r0, r0
    5280:	11 f4       	brne	.+4      	; 0x5286 <__fp_round+0xc>
    5282:	88 23       	and	r24, r24
    5284:	52 f0       	brmi	.+20     	; 0x529a <__fp_round+0x20>
    5286:	bb 0f       	add	r27, r27
    5288:	40 f4       	brcc	.+16     	; 0x529a <__fp_round+0x20>
    528a:	bf 2b       	or	r27, r31
    528c:	11 f4       	brne	.+4      	; 0x5292 <__fp_round+0x18>
    528e:	60 ff       	sbrs	r22, 0
    5290:	04 c0       	rjmp	.+8      	; 0x529a <__fp_round+0x20>
    5292:	6f 5f       	subi	r22, 0xFF	; 255
    5294:	7f 4f       	sbci	r23, 0xFF	; 255
    5296:	8f 4f       	sbci	r24, 0xFF	; 255
    5298:	9f 4f       	sbci	r25, 0xFF	; 255
    529a:	08 95       	ret

0000529c <__fp_split3>:
    529c:	57 fd       	sbrc	r21, 7
    529e:	90 58       	subi	r25, 0x80	; 128
    52a0:	44 0f       	add	r20, r20
    52a2:	55 1f       	adc	r21, r21
    52a4:	59 f0       	breq	.+22     	; 0x52bc <__fp_splitA+0x10>
    52a6:	5f 3f       	cpi	r21, 0xFF	; 255
    52a8:	71 f0       	breq	.+28     	; 0x52c6 <__fp_splitA+0x1a>
    52aa:	47 95       	ror	r20

000052ac <__fp_splitA>:
    52ac:	88 0f       	add	r24, r24
    52ae:	97 fb       	bst	r25, 7
    52b0:	99 1f       	adc	r25, r25
    52b2:	61 f0       	breq	.+24     	; 0x52cc <__fp_splitA+0x20>
    52b4:	9f 3f       	cpi	r25, 0xFF	; 255
    52b6:	79 f0       	breq	.+30     	; 0x52d6 <__fp_splitA+0x2a>
    52b8:	87 95       	ror	r24
    52ba:	08 95       	ret
    52bc:	12 16       	cp	r1, r18
    52be:	13 06       	cpc	r1, r19
    52c0:	14 06       	cpc	r1, r20
    52c2:	55 1f       	adc	r21, r21
    52c4:	f2 cf       	rjmp	.-28     	; 0x52aa <__fp_split3+0xe>
    52c6:	46 95       	lsr	r20
    52c8:	f1 df       	rcall	.-30     	; 0x52ac <__fp_splitA>
    52ca:	08 c0       	rjmp	.+16     	; 0x52dc <__fp_splitA+0x30>
    52cc:	16 16       	cp	r1, r22
    52ce:	17 06       	cpc	r1, r23
    52d0:	18 06       	cpc	r1, r24
    52d2:	99 1f       	adc	r25, r25
    52d4:	f1 cf       	rjmp	.-30     	; 0x52b8 <__fp_splitA+0xc>
    52d6:	86 95       	lsr	r24
    52d8:	71 05       	cpc	r23, r1
    52da:	61 05       	cpc	r22, r1
    52dc:	08 94       	sec
    52de:	08 95       	ret

000052e0 <__fp_zero>:
    52e0:	e8 94       	clt

000052e2 <__fp_szero>:
    52e2:	bb 27       	eor	r27, r27
    52e4:	66 27       	eor	r22, r22
    52e6:	77 27       	eor	r23, r23
    52e8:	cb 01       	movw	r24, r22
    52ea:	97 f9       	bld	r25, 7
    52ec:	08 95       	ret

000052ee <inverse>:
    52ee:	9b 01       	movw	r18, r22
    52f0:	ac 01       	movw	r20, r24
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	70 e0       	ldi	r23, 0x00	; 0
    52f6:	80 e8       	ldi	r24, 0x80	; 128
    52f8:	9f e3       	ldi	r25, 0x3F	; 63
    52fa:	e5 c0       	rjmp	.+458    	; 0x54c6 <__divsf3>
    52fc:	b0 df       	rcall	.-160    	; 0x525e <__fp_pscA>
    52fe:	28 f0       	brcs	.+10     	; 0x530a <inverse+0x1c>
    5300:	b5 df       	rcall	.-150    	; 0x526c <__fp_pscB>
    5302:	18 f0       	brcs	.+6      	; 0x530a <inverse+0x1c>
    5304:	95 23       	and	r25, r21
    5306:	09 f0       	breq	.+2      	; 0x530a <inverse+0x1c>
    5308:	7c cf       	rjmp	.-264    	; 0x5202 <__fp_inf>
    530a:	81 cf       	rjmp	.-254    	; 0x520e <__fp_nan>
    530c:	11 24       	eor	r1, r1
    530e:	e9 cf       	rjmp	.-46     	; 0x52e2 <__fp_szero>

00005310 <__mulsf3x>:
    5310:	c5 df       	rcall	.-118    	; 0x529c <__fp_split3>
    5312:	a0 f3       	brcs	.-24     	; 0x52fc <inverse+0xe>

00005314 <__mulsf3_pse>:
    5314:	95 9f       	mul	r25, r21
    5316:	d1 f3       	breq	.-12     	; 0x530c <inverse+0x1e>
    5318:	95 0f       	add	r25, r21
    531a:	50 e0       	ldi	r21, 0x00	; 0
    531c:	55 1f       	adc	r21, r21
    531e:	62 9f       	mul	r22, r18
    5320:	f0 01       	movw	r30, r0
    5322:	72 9f       	mul	r23, r18
    5324:	bb 27       	eor	r27, r27
    5326:	f0 0d       	add	r31, r0
    5328:	b1 1d       	adc	r27, r1
    532a:	63 9f       	mul	r22, r19
    532c:	aa 27       	eor	r26, r26
    532e:	f0 0d       	add	r31, r0
    5330:	b1 1d       	adc	r27, r1
    5332:	aa 1f       	adc	r26, r26
    5334:	64 9f       	mul	r22, r20
    5336:	66 27       	eor	r22, r22
    5338:	b0 0d       	add	r27, r0
    533a:	a1 1d       	adc	r26, r1
    533c:	66 1f       	adc	r22, r22
    533e:	82 9f       	mul	r24, r18
    5340:	22 27       	eor	r18, r18
    5342:	b0 0d       	add	r27, r0
    5344:	a1 1d       	adc	r26, r1
    5346:	62 1f       	adc	r22, r18
    5348:	73 9f       	mul	r23, r19
    534a:	b0 0d       	add	r27, r0
    534c:	a1 1d       	adc	r26, r1
    534e:	62 1f       	adc	r22, r18
    5350:	83 9f       	mul	r24, r19
    5352:	a0 0d       	add	r26, r0
    5354:	61 1d       	adc	r22, r1
    5356:	22 1f       	adc	r18, r18
    5358:	74 9f       	mul	r23, r20
    535a:	33 27       	eor	r19, r19
    535c:	a0 0d       	add	r26, r0
    535e:	61 1d       	adc	r22, r1
    5360:	23 1f       	adc	r18, r19
    5362:	84 9f       	mul	r24, r20
    5364:	60 0d       	add	r22, r0
    5366:	21 1d       	adc	r18, r1
    5368:	82 2f       	mov	r24, r18
    536a:	76 2f       	mov	r23, r22
    536c:	6a 2f       	mov	r22, r26
    536e:	11 24       	eor	r1, r1
    5370:	9f 57       	subi	r25, 0x7F	; 127
    5372:	50 40       	sbci	r21, 0x00	; 0
    5374:	8a f0       	brmi	.+34     	; 0x5398 <__mulsf3_pse+0x84>
    5376:	e1 f0       	breq	.+56     	; 0x53b0 <__mulsf3_pse+0x9c>
    5378:	88 23       	and	r24, r24
    537a:	4a f0       	brmi	.+18     	; 0x538e <__mulsf3_pse+0x7a>
    537c:	ee 0f       	add	r30, r30
    537e:	ff 1f       	adc	r31, r31
    5380:	bb 1f       	adc	r27, r27
    5382:	66 1f       	adc	r22, r22
    5384:	77 1f       	adc	r23, r23
    5386:	88 1f       	adc	r24, r24
    5388:	91 50       	subi	r25, 0x01	; 1
    538a:	50 40       	sbci	r21, 0x00	; 0
    538c:	a9 f7       	brne	.-22     	; 0x5378 <__mulsf3_pse+0x64>
    538e:	9e 3f       	cpi	r25, 0xFE	; 254
    5390:	51 05       	cpc	r21, r1
    5392:	70 f0       	brcs	.+28     	; 0x53b0 <__mulsf3_pse+0x9c>
    5394:	36 cf       	rjmp	.-404    	; 0x5202 <__fp_inf>
    5396:	a5 cf       	rjmp	.-182    	; 0x52e2 <__fp_szero>
    5398:	5f 3f       	cpi	r21, 0xFF	; 255
    539a:	ec f3       	brlt	.-6      	; 0x5396 <__mulsf3_pse+0x82>
    539c:	98 3e       	cpi	r25, 0xE8	; 232
    539e:	dc f3       	brlt	.-10     	; 0x5396 <__mulsf3_pse+0x82>
    53a0:	86 95       	lsr	r24
    53a2:	77 95       	ror	r23
    53a4:	67 95       	ror	r22
    53a6:	b7 95       	ror	r27
    53a8:	f7 95       	ror	r31
    53aa:	e7 95       	ror	r30
    53ac:	9f 5f       	subi	r25, 0xFF	; 255
    53ae:	c1 f7       	brne	.-16     	; 0x53a0 <__mulsf3_pse+0x8c>
    53b0:	fe 2b       	or	r31, r30
    53b2:	88 0f       	add	r24, r24
    53b4:	91 1d       	adc	r25, r1
    53b6:	96 95       	lsr	r25
    53b8:	87 95       	ror	r24
    53ba:	97 f9       	bld	r25, 7
    53bc:	08 95       	ret

000053be <square>:
    53be:	9b 01       	movw	r18, r22
    53c0:	ac 01       	movw	r20, r24
    53c2:	2f ca       	rjmp	.-2978   	; 0x4822 <__mulsf3>

000053c4 <__eerd_byte_m2560>:
    53c4:	f9 99       	sbic	0x1f, 1	; 31
    53c6:	fe cf       	rjmp	.-4      	; 0x53c4 <__eerd_byte_m2560>
    53c8:	92 bd       	out	0x22, r25	; 34
    53ca:	81 bd       	out	0x21, r24	; 33
    53cc:	f8 9a       	sbi	0x1f, 0	; 31
    53ce:	99 27       	eor	r25, r25
    53d0:	80 b5       	in	r24, 0x20	; 32
    53d2:	08 95       	ret

000053d4 <__eerd_word_m2560>:
    53d4:	a8 e1       	ldi	r26, 0x18	; 24
    53d6:	b0 e0       	ldi	r27, 0x00	; 0
    53d8:	42 e0       	ldi	r20, 0x02	; 2
    53da:	50 e0       	ldi	r21, 0x00	; 0
    53dc:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__eerd_blraw_m2560>

000053e0 <__eewr_byte_m2560>:
    53e0:	26 2f       	mov	r18, r22

000053e2 <__eewr_r18_m2560>:
    53e2:	f9 99       	sbic	0x1f, 1	; 31
    53e4:	fe cf       	rjmp	.-4      	; 0x53e2 <__eewr_r18_m2560>
    53e6:	1f ba       	out	0x1f, r1	; 31
    53e8:	92 bd       	out	0x22, r25	; 34
    53ea:	81 bd       	out	0x21, r24	; 33
    53ec:	20 bd       	out	0x20, r18	; 32
    53ee:	0f b6       	in	r0, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	fa 9a       	sbi	0x1f, 2	; 31
    53f4:	f9 9a       	sbi	0x1f, 1	; 31
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	01 96       	adiw	r24, 0x01	; 1
    53fa:	08 95       	ret

000053fc <__subsf3>:
    53fc:	50 58       	subi	r21, 0x80	; 128

000053fe <__addsf3>:
    53fe:	bb 27       	eor	r27, r27
    5400:	aa 27       	eor	r26, r26
    5402:	0e d0       	rcall	.+28     	; 0x5420 <__addsf3x>
    5404:	3a cf       	rjmp	.-396    	; 0x527a <__fp_round>
    5406:	2b df       	rcall	.-426    	; 0x525e <__fp_pscA>
    5408:	30 f0       	brcs	.+12     	; 0x5416 <__addsf3+0x18>
    540a:	30 df       	rcall	.-416    	; 0x526c <__fp_pscB>
    540c:	20 f0       	brcs	.+8      	; 0x5416 <__addsf3+0x18>
    540e:	31 f4       	brne	.+12     	; 0x541c <__addsf3+0x1e>
    5410:	9f 3f       	cpi	r25, 0xFF	; 255
    5412:	11 f4       	brne	.+4      	; 0x5418 <__addsf3+0x1a>
    5414:	1e f4       	brtc	.+6      	; 0x541c <__addsf3+0x1e>
    5416:	fb ce       	rjmp	.-522    	; 0x520e <__fp_nan>
    5418:	0e f4       	brtc	.+2      	; 0x541c <__addsf3+0x1e>
    541a:	e0 95       	com	r30
    541c:	e7 fb       	bst	r30, 7
    541e:	f1 ce       	rjmp	.-542    	; 0x5202 <__fp_inf>

00005420 <__addsf3x>:
    5420:	e9 2f       	mov	r30, r25
    5422:	3c df       	rcall	.-392    	; 0x529c <__fp_split3>
    5424:	80 f3       	brcs	.-32     	; 0x5406 <__addsf3+0x8>
    5426:	ba 17       	cp	r27, r26
    5428:	62 07       	cpc	r22, r18
    542a:	73 07       	cpc	r23, r19
    542c:	84 07       	cpc	r24, r20
    542e:	95 07       	cpc	r25, r21
    5430:	18 f0       	brcs	.+6      	; 0x5438 <__addsf3x+0x18>
    5432:	71 f4       	brne	.+28     	; 0x5450 <__addsf3x+0x30>
    5434:	9e f5       	brtc	.+102    	; 0x549c <__addsf3x+0x7c>
    5436:	54 cf       	rjmp	.-344    	; 0x52e0 <__fp_zero>
    5438:	0e f4       	brtc	.+2      	; 0x543c <__addsf3x+0x1c>
    543a:	e0 95       	com	r30
    543c:	0b 2e       	mov	r0, r27
    543e:	ba 2f       	mov	r27, r26
    5440:	a0 2d       	mov	r26, r0
    5442:	0b 01       	movw	r0, r22
    5444:	b9 01       	movw	r22, r18
    5446:	90 01       	movw	r18, r0
    5448:	0c 01       	movw	r0, r24
    544a:	ca 01       	movw	r24, r20
    544c:	a0 01       	movw	r20, r0
    544e:	11 24       	eor	r1, r1
    5450:	ff 27       	eor	r31, r31
    5452:	59 1b       	sub	r21, r25
    5454:	99 f0       	breq	.+38     	; 0x547c <__addsf3x+0x5c>
    5456:	59 3f       	cpi	r21, 0xF9	; 249
    5458:	50 f4       	brcc	.+20     	; 0x546e <__addsf3x+0x4e>
    545a:	50 3e       	cpi	r21, 0xE0	; 224
    545c:	68 f1       	brcs	.+90     	; 0x54b8 <__addsf3x+0x98>
    545e:	1a 16       	cp	r1, r26
    5460:	f0 40       	sbci	r31, 0x00	; 0
    5462:	a2 2f       	mov	r26, r18
    5464:	23 2f       	mov	r18, r19
    5466:	34 2f       	mov	r19, r20
    5468:	44 27       	eor	r20, r20
    546a:	58 5f       	subi	r21, 0xF8	; 248
    546c:	f3 cf       	rjmp	.-26     	; 0x5454 <__addsf3x+0x34>
    546e:	46 95       	lsr	r20
    5470:	37 95       	ror	r19
    5472:	27 95       	ror	r18
    5474:	a7 95       	ror	r26
    5476:	f0 40       	sbci	r31, 0x00	; 0
    5478:	53 95       	inc	r21
    547a:	c9 f7       	brne	.-14     	; 0x546e <__addsf3x+0x4e>
    547c:	7e f4       	brtc	.+30     	; 0x549c <__addsf3x+0x7c>
    547e:	1f 16       	cp	r1, r31
    5480:	ba 0b       	sbc	r27, r26
    5482:	62 0b       	sbc	r22, r18
    5484:	73 0b       	sbc	r23, r19
    5486:	84 0b       	sbc	r24, r20
    5488:	ba f0       	brmi	.+46     	; 0x54b8 <__addsf3x+0x98>
    548a:	91 50       	subi	r25, 0x01	; 1
    548c:	a1 f0       	breq	.+40     	; 0x54b6 <__addsf3x+0x96>
    548e:	ff 0f       	add	r31, r31
    5490:	bb 1f       	adc	r27, r27
    5492:	66 1f       	adc	r22, r22
    5494:	77 1f       	adc	r23, r23
    5496:	88 1f       	adc	r24, r24
    5498:	c2 f7       	brpl	.-16     	; 0x548a <__addsf3x+0x6a>
    549a:	0e c0       	rjmp	.+28     	; 0x54b8 <__addsf3x+0x98>
    549c:	ba 0f       	add	r27, r26
    549e:	62 1f       	adc	r22, r18
    54a0:	73 1f       	adc	r23, r19
    54a2:	84 1f       	adc	r24, r20
    54a4:	48 f4       	brcc	.+18     	; 0x54b8 <__addsf3x+0x98>
    54a6:	87 95       	ror	r24
    54a8:	77 95       	ror	r23
    54aa:	67 95       	ror	r22
    54ac:	b7 95       	ror	r27
    54ae:	f7 95       	ror	r31
    54b0:	9e 3f       	cpi	r25, 0xFE	; 254
    54b2:	08 f0       	brcs	.+2      	; 0x54b6 <__addsf3x+0x96>
    54b4:	b3 cf       	rjmp	.-154    	; 0x541c <__addsf3+0x1e>
    54b6:	93 95       	inc	r25
    54b8:	88 0f       	add	r24, r24
    54ba:	08 f0       	brcs	.+2      	; 0x54be <__addsf3x+0x9e>
    54bc:	99 27       	eor	r25, r25
    54be:	ee 0f       	add	r30, r30
    54c0:	97 95       	ror	r25
    54c2:	87 95       	ror	r24
    54c4:	08 95       	ret

000054c6 <__divsf3>:
    54c6:	42 de       	rcall	.-892    	; 0x514c <__divsf3x>
    54c8:	d8 ce       	rjmp	.-592    	; 0x527a <__fp_round>

000054ca <__eerd_block_m2560>:
    54ca:	dc 01       	movw	r26, r24
    54cc:	cb 01       	movw	r24, r22

000054ce <__eerd_blraw_m2560>:
    54ce:	fc 01       	movw	r30, r24
    54d0:	f9 99       	sbic	0x1f, 1	; 31
    54d2:	fe cf       	rjmp	.-4      	; 0x54d0 <__eerd_blraw_m2560+0x2>
    54d4:	06 c0       	rjmp	.+12     	; 0x54e2 <__eerd_blraw_m2560+0x14>
    54d6:	f2 bd       	out	0x22, r31	; 34
    54d8:	e1 bd       	out	0x21, r30	; 33
    54da:	f8 9a       	sbi	0x1f, 0	; 31
    54dc:	31 96       	adiw	r30, 0x01	; 1
    54de:	00 b4       	in	r0, 0x20	; 32
    54e0:	0d 92       	st	X+, r0
    54e2:	41 50       	subi	r20, 0x01	; 1
    54e4:	50 40       	sbci	r21, 0x00	; 0
    54e6:	b8 f7       	brcc	.-18     	; 0x54d6 <__eerd_blraw_m2560+0x8>
    54e8:	08 95       	ret

000054ea <__divmodsi4>:
    54ea:	97 fb       	bst	r25, 7
    54ec:	09 2e       	mov	r0, r25
    54ee:	05 26       	eor	r0, r21
    54f0:	0e d0       	rcall	.+28     	; 0x550e <__divmodsi4_neg1>
    54f2:	57 fd       	sbrc	r21, 7
    54f4:	04 d0       	rcall	.+8      	; 0x54fe <__divmodsi4_neg2>
    54f6:	14 d0       	rcall	.+40     	; 0x5520 <__udivmodsi4>
    54f8:	0a d0       	rcall	.+20     	; 0x550e <__divmodsi4_neg1>
    54fa:	00 1c       	adc	r0, r0
    54fc:	38 f4       	brcc	.+14     	; 0x550c <__divmodsi4_exit>

000054fe <__divmodsi4_neg2>:
    54fe:	50 95       	com	r21
    5500:	40 95       	com	r20
    5502:	30 95       	com	r19
    5504:	21 95       	neg	r18
    5506:	3f 4f       	sbci	r19, 0xFF	; 255
    5508:	4f 4f       	sbci	r20, 0xFF	; 255
    550a:	5f 4f       	sbci	r21, 0xFF	; 255

0000550c <__divmodsi4_exit>:
    550c:	08 95       	ret

0000550e <__divmodsi4_neg1>:
    550e:	f6 f7       	brtc	.-4      	; 0x550c <__divmodsi4_exit>
    5510:	90 95       	com	r25
    5512:	80 95       	com	r24
    5514:	70 95       	com	r23
    5516:	61 95       	neg	r22
    5518:	7f 4f       	sbci	r23, 0xFF	; 255
    551a:	8f 4f       	sbci	r24, 0xFF	; 255
    551c:	9f 4f       	sbci	r25, 0xFF	; 255
    551e:	08 95       	ret

00005520 <__udivmodsi4>:
    5520:	a1 e2       	ldi	r26, 0x21	; 33
    5522:	1a 2e       	mov	r1, r26
    5524:	aa 1b       	sub	r26, r26
    5526:	bb 1b       	sub	r27, r27
    5528:	fd 01       	movw	r30, r26
    552a:	0d c0       	rjmp	.+26     	; 0x5546 <__udivmodsi4_ep>

0000552c <__udivmodsi4_loop>:
    552c:	aa 1f       	adc	r26, r26
    552e:	bb 1f       	adc	r27, r27
    5530:	ee 1f       	adc	r30, r30
    5532:	ff 1f       	adc	r31, r31
    5534:	a2 17       	cp	r26, r18
    5536:	b3 07       	cpc	r27, r19
    5538:	e4 07       	cpc	r30, r20
    553a:	f5 07       	cpc	r31, r21
    553c:	20 f0       	brcs	.+8      	; 0x5546 <__udivmodsi4_ep>
    553e:	a2 1b       	sub	r26, r18
    5540:	b3 0b       	sbc	r27, r19
    5542:	e4 0b       	sbc	r30, r20
    5544:	f5 0b       	sbc	r31, r21

00005546 <__udivmodsi4_ep>:
    5546:	66 1f       	adc	r22, r22
    5548:	77 1f       	adc	r23, r23
    554a:	88 1f       	adc	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	1a 94       	dec	r1
    5550:	69 f7       	brne	.-38     	; 0x552c <__udivmodsi4_loop>
    5552:	60 95       	com	r22
    5554:	70 95       	com	r23
    5556:	80 95       	com	r24
    5558:	90 95       	com	r25
    555a:	9b 01       	movw	r18, r22
    555c:	ac 01       	movw	r20, r24
    555e:	bd 01       	movw	r22, r26
    5560:	cf 01       	movw	r24, r30
    5562:	08 95       	ret

00005564 <_exit>:
    5564:	ff cf       	rjmp	.-2      	; 0x5564 <_exit>
