
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00004cac  00004d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800324  00800324  00004e64  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  000071a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  000078a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000eb4  00000000  00000000  00007b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000040a3  00000000  00000000  00008a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000164c  00000000  00000000  0000cab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004864  00000000  00000000  0000e101  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000690  00000000  00000000  00012968  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e94  00000000  00000000  00012ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014d2  00000000  00000000  00013e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f3  00000000  00000000  0001535e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000140  00000000  00000000  00015551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_32>
      84:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_42>
      ac:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	8d 0a       	sbc	r8, r29
      e6:	71 0a       	sbc	r7, r17
      e8:	3f 0a       	sbc	r3, r31
      ea:	02 0b       	sbc	r16, r18
      ec:	cc 0a       	sbc	r12, r28
      ee:	f5 0a       	sbc	r15, r21
      f0:	16 0a       	sbc	r1, r22
      f2:	fa 09       	sbc	r31, r10
      f4:	cd 09       	sbc	r28, r13
      f6:	b5 09       	sbc	r27, r5
      f8:	56 09       	sbc	r21, r6
      fa:	56 09       	sbc	r21, r6
      fc:	56 09       	sbc	r21, r6
      fe:	56 09       	sbc	r21, r6
     100:	56 09       	sbc	r21, r6
     102:	56 09       	sbc	r21, r6
     104:	a9 09       	sbc	r26, r9
     106:	9e 09       	sbc	r25, r14
     108:	56 09       	sbc	r21, r6
     10a:	56 09       	sbc	r21, r6
     10c:	56 09       	sbc	r21, r6
     10e:	56 09       	sbc	r21, r6
     110:	56 09       	sbc	r21, r6
     112:	56 09       	sbc	r21, r6
     114:	56 09       	sbc	r21, r6
     116:	56 09       	sbc	r21, r6
     118:	56 09       	sbc	r21, r6
     11a:	56 09       	sbc	r21, r6
     11c:	56 09       	sbc	r21, r6
     11e:	56 09       	sbc	r21, r6
     120:	cd 09       	sbc	r28, r13
     122:	3f 0a       	sbc	r3, r31
     124:	92 09       	sbc	r25, r2
     126:	8d 09       	sbc	r24, r13
     128:	56 09       	sbc	r21, r6
     12a:	56 09       	sbc	r21, r6
     12c:	56 09       	sbc	r21, r6
     12e:	56 09       	sbc	r21, r6
     130:	56 09       	sbc	r21, r6
     132:	56 09       	sbc	r21, r6
     134:	56 09       	sbc	r21, r6
     136:	56 09       	sbc	r21, r6
     138:	56 09       	sbc	r21, r6
     13a:	56 09       	sbc	r21, r6
     13c:	56 09       	sbc	r21, r6
     13e:	56 09       	sbc	r21, r6
     140:	cc 0a       	sbc	r12, r28
     142:	16 0a       	sbc	r1, r22
     144:	56 09       	sbc	r21, r6
     146:	56 09       	sbc	r21, r6
     148:	8d 0a       	sbc	r8, r29
     14a:	f5 0a       	sbc	r15, r21
     14c:	b6 0a       	sbc	r11, r22
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ec ea       	ldi	r30, 0xAC	; 172
     194:	fc e4       	ldi	r31, 0x4C	; 76
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a4 35       	cpi	r26, 0x54	; 84
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	1f 93       	push	r17

	choosePeripheral = 1;					// usart menu
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
     1c6:	0e 94 89 12 	call	0x2512	; 0x2512 <initPeripherals>

	calibrateSensors();
     1ca:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <calibrateSensors>

	srand(TCNT3);							// initialize random seed (used in obstacle avoidance)
     1ce:	80 91 94 00 	lds	r24, 0x0094
     1d2:	90 91 95 00 	lds	r25, 0x0095
     1d6:	0e 94 fd 23 	call	0x47fa	; 0x47fa <srand>

		if(delayCounter >= (PAUSE_2_SEC)) {
			
			delayCounter = 0;
			
			measBattery = 1;
     1da:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {

		//PORTB ^= (1 << 6); 				// toggle the green led

		currentSelector = getSelector();	// update selector position
     1dc:	0e 94 64 12 	call	0x24c8	; 0x24c8 <getSelector>
     1e0:	80 93 21 04 	sts	0x0421, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1e4:	0e 94 28 1b 	call	0x3650	; 0x3650 <readAccelXYZ>

		computeAngle();
     1e8:	0e 94 77 1f 	call	0x3eee	; 0x3eee <computeAngle>
		if(delayCounter%(PAUSE_10_MSEC) == 0) {
			// do something every 10 milliseconds
		}
*/

		if(delayCounter >= (PAUSE_2_SEC)) {
     1ec:	80 91 1f 04 	lds	r24, 0x041F
     1f0:	90 91 20 04 	lds	r25, 0x0420
     1f4:	2b e4       	ldi	r18, 0x4B	; 75
     1f6:	8e 31       	cpi	r24, 0x1E	; 30
     1f8:	92 07       	cpc	r25, r18
     1fa:	30 f0       	brcs	.+12     	; 0x208 <main+0x4a>
			
			delayCounter = 0;
     1fc:	10 92 20 04 	sts	0x0420, r1
     200:	10 92 1f 04 	sts	0x041F, r1
			
			measBattery = 1;
     204:	10 93 c5 03 	sts	0x03C5, r17
			//sleep(20);

		}


		handleIRRemoteCommands();
     208:	0e 94 44 09 	call	0x1288	; 0x1288 <handleIRRemoteCommands>


		handleRFCommands();
     20c:	0e 94 c5 04 	call	0x98a	; 0x98a <handleRFCommands>


		if(currentSelector == 0) {	// no control
     210:	80 91 21 04 	lds	r24, 0x0421
     214:	88 23       	and	r24, r24
     216:	09 f0       	breq	.+2      	; 0x21a <main+0x5c>
     218:	66 c0       	rjmp	.+204    	; 0x2e6 <main+0x128>

			// compute velocities even if they aren't used
			if(compute_left_vel) {
     21a:	80 91 07 02 	lds	r24, 0x0207
     21e:	88 23       	and	r24, r24
     220:	91 f0       	breq	.+36     	; 0x246 <main+0x88>
				last_left_vel = left_vel_sum>>2;
     222:	80 91 e3 03 	lds	r24, 0x03E3
     226:	90 91 e4 03 	lds	r25, 0x03E4
     22a:	96 95       	lsr	r25
     22c:	87 95       	ror	r24
     22e:	96 95       	lsr	r25
     230:	87 95       	ror	r24
     232:	90 93 e8 03 	sts	0x03E8, r25
     236:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     23a:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     23e:	10 92 e4 03 	sts	0x03E4, r1
     242:	10 92 e3 03 	sts	0x03E3, r1
			}

			if(compute_right_vel) {
     246:	80 91 08 02 	lds	r24, 0x0208
     24a:	88 23       	and	r24, r24
     24c:	91 f0       	breq	.+36     	; 0x272 <main+0xb4>
				last_right_vel = right_vel_sum>>2;
     24e:	80 91 e5 03 	lds	r24, 0x03E5
     252:	90 91 e6 03 	lds	r25, 0x03E6
     256:	96 95       	lsr	r25
     258:	87 95       	ror	r24
     25a:	96 95       	lsr	r25
     25c:	87 95       	ror	r24
     25e:	90 93 ea 03 	sts	0x03EA, r25
     262:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     266:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     26a:	10 92 e6 03 	sts	0x03E6, r1
     26e:	10 92 e5 03 	sts	0x03E5, r1
			}


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     272:	80 91 ef 03 	lds	r24, 0x03EF
     276:	90 91 f0 03 	lds	r25, 0x03F0
     27a:	90 93 fc 03 	sts	0x03FC, r25
     27e:	80 93 fb 03 	sts	0x03FB, r24
			pwm_left_working = pwm_left_desired;
     282:	20 91 f1 03 	lds	r18, 0x03F1
     286:	30 91 f2 03 	lds	r19, 0x03F2
     28a:	30 93 fe 03 	sts	0x03FE, r19
     28e:	20 93 fd 03 	sts	0x03FD, r18
			if(obstacleAvoidanceEnabled) {
     292:	40 91 24 04 	lds	r20, 0x0424
     296:	44 23       	and	r20, r20
     298:	09 f0       	breq	.+2      	; 0x29c <main+0xde>
     29a:	a8 c0       	rjmp	.+336    	; 0x3ec <main+0x22e>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
	        pwm_left_desired_to_control = pwm_left_working;
     29c:	30 93 e2 03 	sts	0x03E2, r19
     2a0:	20 93 e1 03 	sts	0x03E1, r18
	        pwm_right_desired_to_control = pwm_right_working;
     2a4:	90 93 e0 03 	sts	0x03E0, r25
     2a8:	80 93 df 03 	sts	0x03DF, r24

			pwm_left = pwm_left_working;
     2ac:	30 93 ee 03 	sts	0x03EE, r19
     2b0:	20 93 ed 03 	sts	0x03ED, r18
			pwm_right = pwm_right_working;
     2b4:	90 93 ec 03 	sts	0x03EC, r25
     2b8:	80 93 eb 03 	sts	0x03EB, r24

			if(pwm_right > 0) {
     2bc:	18 16       	cp	r1, r24
     2be:	19 06       	cpc	r1, r25
     2c0:	0c f0       	brlt	.+2      	; 0x2c4 <main+0x106>
     2c2:	04 c1       	rjmp	.+520    	; 0x4cc <main+0x30e>
				OCR3A = (unsigned int)pwm_right;
     2c4:	90 93 99 00 	sts	0x0099, r25
     2c8:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     2cc:	80 91 ed 03 	lds	r24, 0x03ED
     2d0:	90 91 ee 03 	lds	r25, 0x03EE
     2d4:	18 16       	cp	r1, r24
     2d6:	19 06       	cpc	r1, r25
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <main+0x11e>
     2da:	ec c0       	rjmp	.+472    	; 0x4b4 <main+0x2f6>
				OCR4A = (unsigned int)pwm_left;
     2dc:	90 93 a9 00 	sts	0x00A9, r25
     2e0:	80 93 a8 00 	sts	0x00A8, r24
     2e4:	7b cf       	rjmp	.-266    	; 0x1dc <main+0x1e>
				OCR4A = 0;
				OCR4B = 0;
			}


		} else if(currentSelector == 1) {		// only horizontal speed control
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	09 f4       	brne	.+2      	; 0x2ec <main+0x12e>
     2ea:	8f c0       	rjmp	.+286    	; 0x40a <main+0x24c>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both horizontal and vertical speed control
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x134>
     2f0:	75 cf       	rjmp	.-278    	; 0x1dc <main+0x1e>

			pwm_left_working = pwm_left_desired;
     2f2:	20 91 f1 03 	lds	r18, 0x03F1
     2f6:	30 91 f2 03 	lds	r19, 0x03F2
     2fa:	30 93 fe 03 	sts	0x03FE, r19
     2fe:	20 93 fd 03 	sts	0x03FD, r18
			pwm_right_working = pwm_right_desired;
     302:	80 91 ef 03 	lds	r24, 0x03EF
     306:	90 91 f0 03 	lds	r25, 0x03F0
     30a:	90 93 fc 03 	sts	0x03FC, r25
     30e:	80 93 fb 03 	sts	0x03FB, r24
			if(obstacleAvoidanceEnabled) {
     312:	40 91 24 04 	lds	r20, 0x0424
     316:	44 23       	and	r20, r20
     318:	09 f0       	breq	.+2      	; 0x31c <main+0x15e>
     31a:	2a c1       	rjmp	.+596    	; 0x570 <main+0x3b2>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
			pwm_left_desired_to_control = pwm_left_working;
     31c:	30 93 e2 03 	sts	0x03E2, r19
     320:	20 93 e1 03 	sts	0x03E1, r18
			pwm_right_desired_to_control = pwm_right_working;
     324:	90 93 e0 03 	sts	0x03E0, r25
     328:	80 93 df 03 	sts	0x03DF, r24

			if(compute_left_vel) {
     32c:	80 91 07 02 	lds	r24, 0x0207
     330:	88 23       	and	r24, r24
     332:	59 f1       	breq	.+86     	; 0x38a <main+0x1cc>

				last_left_vel = left_vel_sum>>2;
     334:	80 91 e3 03 	lds	r24, 0x03E3
     338:	90 91 e4 03 	lds	r25, 0x03E4
     33c:	96 95       	lsr	r25
     33e:	87 95       	ror	r24
     340:	96 95       	lsr	r25
     342:	87 95       	ror	r24
     344:	90 93 e8 03 	sts	0x03E8, r25
     348:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     34c:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     350:	10 92 e4 03 	sts	0x03E4, r1
     354:	10 92 e3 03 	sts	0x03E3, r1

				if(robotPosition == HORIZONTAL_POS) {
     358:	80 91 16 02 	lds	r24, 0x0216
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	09 f4       	brne	.+2      	; 0x362 <main+0x1a4>
     360:	1b c1       	rjmp	.+566    	; 0x598 <main+0x3da>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
     362:	8d ef       	ldi	r24, 0xFD	; 253
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
     36a:	80 91 fd 03 	lds	r24, 0x03FD
     36e:	90 91 fe 03 	lds	r25, 0x03FE
     372:	90 93 ee 03 	sts	0x03EE, r25
     376:	80 93 ed 03 	sts	0x03ED, r24

				if(pwm_left > 0) {
     37a:	18 16       	cp	r1, r24
     37c:	19 06       	cpc	r1, r25
     37e:	0c f0       	brlt	.+2      	; 0x382 <main+0x1c4>
     380:	10 c1       	rjmp	.+544    	; 0x5a2 <main+0x3e4>
					OCR4A = (unsigned int)pwm_left;
     382:	90 93 a9 00 	sts	0x00A9, r25
     386:	80 93 a8 00 	sts	0x00A8, r24
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     38a:	80 91 08 02 	lds	r24, 0x0208
     38e:	88 23       	and	r24, r24
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1d6>
     392:	24 cf       	rjmp	.-440    	; 0x1dc <main+0x1e>

				last_right_vel = right_vel_sum>>2;
     394:	80 91 e5 03 	lds	r24, 0x03E5
     398:	90 91 e6 03 	lds	r25, 0x03E6
     39c:	96 95       	lsr	r25
     39e:	87 95       	ror	r24
     3a0:	96 95       	lsr	r25
     3a2:	87 95       	ror	r24
     3a4:	90 93 ea 03 	sts	0x03EA, r25
     3a8:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     3ac:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     3b0:	10 92 e6 03 	sts	0x03E6, r1
     3b4:	10 92 e5 03 	sts	0x03E5, r1

				if(robotPosition == HORIZONTAL_POS) {
     3b8:	80 91 16 02 	lds	r24, 0x0216
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x204>
     3c0:	e6 c0       	rjmp	.+460    	; 0x58e <main+0x3d0>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
     3c2:	8b ef       	ldi	r24, 0xFB	; 251
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	0e 94 96 0c 	call	0x192c	; 0x192c <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
     3ca:	80 91 fb 03 	lds	r24, 0x03FB
     3ce:	90 91 fc 03 	lds	r25, 0x03FC
     3d2:	90 93 ec 03 	sts	0x03EC, r25
     3d6:	80 93 eb 03 	sts	0x03EB, r24

				if(pwm_right > 0) {
     3da:	18 16       	cp	r1, r24
     3dc:	19 06       	cpc	r1, r25
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <main+0x224>
     3e0:	5d c0       	rjmp	.+186    	; 0x49c <main+0x2de>
					OCR3A = (unsigned int)pwm_right;
     3e2:	90 93 99 00 	sts	0x0099, r25
     3e6:	80 93 98 00 	sts	0x0098, r24
     3ea:	f8 ce       	rjmp	.-528    	; 0x1dc <main+0x1e>


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
			pwm_left_working = pwm_left_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     3ec:	8d ef       	ldi	r24, 0xFD	; 253
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	6b ef       	ldi	r22, 0xFB	; 251
     3f2:	73 e0       	ldi	r23, 0x03	; 3
     3f4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <obstacleAvoidance>
     3f8:	20 91 fd 03 	lds	r18, 0x03FD
     3fc:	30 91 fe 03 	lds	r19, 0x03FE
     400:	80 91 fb 03 	lds	r24, 0x03FB
     404:	90 91 fc 03 	lds	r25, 0x03FC
     408:	49 cf       	rjmp	.-366    	; 0x29c <main+0xde>
			}


		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
     40a:	20 91 f1 03 	lds	r18, 0x03F1
     40e:	30 91 f2 03 	lds	r19, 0x03F2
     412:	30 93 fe 03 	sts	0x03FE, r19
     416:	20 93 fd 03 	sts	0x03FD, r18
			pwm_right_working = pwm_right_desired;
     41a:	80 91 ef 03 	lds	r24, 0x03EF
     41e:	90 91 f0 03 	lds	r25, 0x03F0
     422:	90 93 fc 03 	sts	0x03FC, r25
     426:	80 93 fb 03 	sts	0x03FB, r24
			if(obstacleAvoidanceEnabled) {
     42a:	40 91 24 04 	lds	r20, 0x0424
     42e:	44 23       	and	r20, r20
     430:	09 f0       	breq	.+2      	; 0x434 <main+0x276>
     432:	7f c0       	rjmp	.+254    	; 0x532 <main+0x374>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
			pwm_left_desired_to_control = pwm_left_working;
     434:	30 93 e2 03 	sts	0x03E2, r19
     438:	20 93 e1 03 	sts	0x03E1, r18
			pwm_right_desired_to_control = pwm_right_working;
     43c:	90 93 e0 03 	sts	0x03E0, r25
     440:	80 93 df 03 	sts	0x03DF, r24

			if(compute_left_vel) {
     444:	80 91 07 02 	lds	r24, 0x0207
     448:	88 23       	and	r24, r24
     44a:	09 f0       	breq	.+2      	; 0x44e <main+0x290>
     44c:	4b c0       	rjmp	.+150    	; 0x4e4 <main+0x326>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     44e:	80 91 08 02 	lds	r24, 0x0208
     452:	88 23       	and	r24, r24
     454:	09 f4       	brne	.+2      	; 0x458 <main+0x29a>
     456:	c2 ce       	rjmp	.-636    	; 0x1dc <main+0x1e>

				last_right_vel = right_vel_sum>>2;
     458:	80 91 e5 03 	lds	r24, 0x03E5
     45c:	90 91 e6 03 	lds	r25, 0x03E6
     460:	96 95       	lsr	r25
     462:	87 95       	ror	r24
     464:	96 95       	lsr	r25
     466:	87 95       	ror	r24
     468:	90 93 ea 03 	sts	0x03EA, r25
     46c:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     470:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     474:	10 92 e6 03 	sts	0x03E6, r1
     478:	10 92 e5 03 	sts	0x03E5, r1

				start_horizontal_speed_control_right(&pwm_right_working);
     47c:	8b ef       	ldi	r24, 0xFB	; 251
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <start_horizontal_speed_control_right>

				pwm_right = pwm_right_working;
     484:	80 91 fb 03 	lds	r24, 0x03FB
     488:	90 91 fc 03 	lds	r25, 0x03FC
     48c:	90 93 ec 03 	sts	0x03EC, r25
     490:	80 93 eb 03 	sts	0x03EB, r24

				if(pwm_right > 0) {
     494:	18 16       	cp	r1, r24
     496:	19 06       	cpc	r1, r25
     498:	0c f4       	brge	.+2      	; 0x49c <main+0x2de>
     49a:	a3 cf       	rjmp	.-186    	; 0x3e2 <main+0x224>

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0x2e4>
     4a0:	96 c0       	rjmp	.+300    	; 0x5ce <main+0x410>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
     4a2:	10 92 99 00 	sts	0x0099, r1
     4a6:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
     4aa:	10 92 9b 00 	sts	0x009B, r1
     4ae:	10 92 9a 00 	sts	0x009A, r1
     4b2:	94 ce       	rjmp	.-728    	; 0x1dc <main+0x1e>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	09 f0       	breq	.+2      	; 0x4ba <main+0x2fc>
     4b8:	4b c0       	rjmp	.+150    	; 0x550 <main+0x392>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
     4ba:	10 92 a9 00 	sts	0x00A9, r1
     4be:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
     4c2:	10 92 ab 00 	sts	0x00AB, r1
     4c6:	10 92 aa 00 	sts	0x00AA, r1
     4ca:	88 ce       	rjmp	.-752    	; 0x1dc <main+0x1e>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <main+0x314>
     4d0:	47 c0       	rjmp	.+142    	; 0x560 <main+0x3a2>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
     4d2:	10 92 99 00 	sts	0x0099, r1
     4d6:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
     4da:	10 92 9b 00 	sts	0x009B, r1
     4de:	10 92 9a 00 	sts	0x009A, r1
     4e2:	f4 ce       	rjmp	.-536    	; 0x2cc <main+0x10e>
			pwm_left_desired_to_control = pwm_left_working;
			pwm_right_desired_to_control = pwm_right_working;

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;	// 4 samples taken for measuring velocity
     4e4:	80 91 e3 03 	lds	r24, 0x03E3
     4e8:	90 91 e4 03 	lds	r25, 0x03E4
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
     4f4:	90 93 e8 03 	sts	0x03E8, r25
     4f8:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     4fc:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     500:	10 92 e4 03 	sts	0x03E4, r1
     504:	10 92 e3 03 	sts	0x03E3, r1

				start_horizontal_speed_control_left(&pwm_left_working);
     508:	8d ef       	ldi	r24, 0xFD	; 253
     50a:	93 e0       	ldi	r25, 0x03	; 3
     50c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <start_horizontal_speed_control_left>

				pwm_left = pwm_left_working;
     510:	80 91 fd 03 	lds	r24, 0x03FD
     514:	90 91 fe 03 	lds	r25, 0x03FE
     518:	90 93 ee 03 	sts	0x03EE, r25
     51c:	80 93 ed 03 	sts	0x03ED, r24

				if(pwm_left > 0) {
     520:	18 16       	cp	r1, r24
     522:	19 06       	cpc	r1, r25
     524:	0c f0       	brlt	.+2      	; 0x528 <main+0x36a>
     526:	48 c0       	rjmp	.+144    	; 0x5b8 <main+0x3fa>
					OCR4A = (unsigned int)pwm_left;
     528:	90 93 a9 00 	sts	0x00A9, r25
     52c:	80 93 a8 00 	sts	0x00A8, r24
     530:	8e cf       	rjmp	.-228    	; 0x44e <main+0x290>
		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
			pwm_right_working = pwm_right_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     532:	8d ef       	ldi	r24, 0xFD	; 253
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	6b ef       	ldi	r22, 0xFB	; 251
     538:	73 e0       	ldi	r23, 0x03	; 3
     53a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <obstacleAvoidance>
     53e:	20 91 fd 03 	lds	r18, 0x03FD
     542:	30 91 fe 03 	lds	r19, 0x03FE
     546:	80 91 fb 03 	lds	r24, 0x03FB
     54a:	90 91 fc 03 	lds	r25, 0x03FC
     54e:	72 cf       	rjmp	.-284    	; 0x434 <main+0x276>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
     550:	90 95       	com	r25
     552:	81 95       	neg	r24
     554:	9f 4f       	sbci	r25, 0xFF	; 255
     556:	90 93 ab 00 	sts	0x00AB, r25
     55a:	80 93 aa 00 	sts	0x00AA, r24
     55e:	3e ce       	rjmp	.-900    	; 0x1dc <main+0x1e>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
     560:	90 95       	com	r25
     562:	81 95       	neg	r24
     564:	9f 4f       	sbci	r25, 0xFF	; 255
     566:	90 93 9b 00 	sts	0x009B, r25
     56a:	80 93 9a 00 	sts	0x009A, r24
     56e:	ae ce       	rjmp	.-676    	; 0x2cc <main+0x10e>
		} else if(currentSelector == 2) {		// both horizontal and vertical speed control

			pwm_left_working = pwm_left_desired;
			pwm_right_working = pwm_right_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     570:	8d ef       	ldi	r24, 0xFD	; 253
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	6b ef       	ldi	r22, 0xFB	; 251
     576:	73 e0       	ldi	r23, 0x03	; 3
     578:	0e 94 7e 17 	call	0x2efc	; 0x2efc <obstacleAvoidance>
     57c:	20 91 fd 03 	lds	r18, 0x03FD
     580:	30 91 fe 03 	lds	r19, 0x03FE
     584:	80 91 fb 03 	lds	r24, 0x03FB
     588:	90 91 fc 03 	lds	r25, 0x03FC
     58c:	c7 ce       	rjmp	.-626    	; 0x31c <main+0x15e>
				compute_right_vel = 0;
				right_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
     58e:	8b ef       	ldi	r24, 0xFB	; 251
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <start_horizontal_speed_control_right>
     596:	19 cf       	rjmp	.-462    	; 0x3ca <main+0x20c>
				compute_left_vel = 0;
				left_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
     598:	8d ef       	ldi	r24, 0xFD	; 253
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <start_horizontal_speed_control_left>
     5a0:	e4 ce       	rjmp	.-568    	; 0x36a <main+0x1ac>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	e1 f4       	brne	.+56     	; 0x5de <main+0x420>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5a6:	10 92 a9 00 	sts	0x00A9, r1
     5aa:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5ae:	10 92 ab 00 	sts	0x00AB, r1
     5b2:	10 92 aa 00 	sts	0x00AA, r1
     5b6:	e9 ce       	rjmp	.-558    	; 0x38a <main+0x1cc>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	c9 f4       	brne	.+50     	; 0x5ee <main+0x430>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5bc:	10 92 a9 00 	sts	0x00A9, r1
     5c0:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5c4:	10 92 ab 00 	sts	0x00AB, r1
     5c8:	10 92 aa 00 	sts	0x00AA, r1
     5cc:	40 cf       	rjmp	.-384    	; 0x44e <main+0x290>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
     5ce:	90 95       	com	r25
     5d0:	81 95       	neg	r24
     5d2:	9f 4f       	sbci	r25, 0xFF	; 255
     5d4:	90 93 9b 00 	sts	0x009B, r25
     5d8:	80 93 9a 00 	sts	0x009A, r24
     5dc:	ff cd       	rjmp	.-1026   	; 0x1dc <main+0x1e>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5de:	90 95       	com	r25
     5e0:	81 95       	neg	r24
     5e2:	9f 4f       	sbci	r25, 0xFF	; 255
     5e4:	90 93 ab 00 	sts	0x00AB, r25
     5e8:	80 93 aa 00 	sts	0x00AA, r24
     5ec:	ce ce       	rjmp	.-612    	; 0x38a <main+0x1cc>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5ee:	90 95       	com	r25
     5f0:	81 95       	neg	r24
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	90 93 ab 00 	sts	0x00AB, r25
     5f8:	80 93 aa 00 	sts	0x00AA, r24
     5fc:	28 cf       	rjmp	.-432    	; 0x44e <main+0x290>

000005fe <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     5fe:	84 b1       	in	r24, 0x04	; 4
     600:	80 7f       	andi	r24, 0xF0	; 240
     602:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     604:	84 b1       	in	r24, 0x04	; 4
     606:	87 60       	ori	r24, 0x07	; 7
     608:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     60a:	80 e5       	ldi	r24, 0x50	; 80
     60c:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     60e:	8d b5       	in	r24, 0x2d	; 45
     610:	81 60       	ori	r24, 0x01	; 1
     612:	8d bd       	out	0x2d, r24	; 45

}
     614:	08 95       	ret

00000616 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     616:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     618:	1d bc       	out	0x2d, r1	; 45
}
     61a:	08 95       	ret

0000061c <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     61c:	44 23       	and	r20, r20
     61e:	79 f0       	breq	.+30     	; 0x63e <SPI_ReadWrite_Block+0x22>
     620:	a8 2f       	mov	r26, r24
     622:	b9 2f       	mov	r27, r25
     624:	e6 2f       	mov	r30, r22
     626:	f7 2f       	mov	r31, r23
     628:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     62a:	9d 91       	ld	r25, X+
     62c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     634:	9e b5       	in	r25, 0x2e	; 46
     636:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	84 17       	cp	r24, r20
     63c:	b0 f3       	brcs	.-20     	; 0x62a <SPI_ReadWrite_Block+0xe>
     63e:	08 95       	ret

00000640 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     640:	66 23       	and	r22, r22
     642:	59 f0       	breq	.+22     	; 0x65a <SPI_Write_Block+0x1a>
     644:	e8 2f       	mov	r30, r24
     646:	f9 2f       	mov	r31, r25
     648:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     64a:	91 91       	ld	r25, Z+
     64c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	86 17       	cp	r24, r22
     658:	c0 f3       	brcs	.-16     	; 0x64a <SPI_Write_Block+0xa>
     65a:	08 95       	ret

0000065c <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     65c:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <SPI_Write_Byte+0x2>
    return SPDR;
     664:	8e b5       	in	r24, 0x2e	; 46
}
     666:	08 95       	ret

00000668 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	df 93       	push	r29
     66e:	cf 93       	push	r28
     670:	00 d0       	rcall	.+0      	; 0x672 <mirf_config+0xa>
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     676:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     678:	80 e2       	ldi	r24, 0x20	; 32
     67a:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     67e:	8d e0       	ldi	r24, 0x0D	; 13
     680:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     684:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     686:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     688:	83 e2       	ldi	r24, 0x23	; 35
     68a:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     694:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     69e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6a2:	80 e3       	ldi	r24, 0x30	; 48
     6a4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6a8:	8e 01       	movw	r16, r28
     6aa:	0f 5f       	subi	r16, 0xFF	; 255
     6ac:	1f 4f       	sbci	r17, 0xFF	; 255
     6ae:	c8 01       	movw	r24, r16
     6b0:	63 e0       	ldi	r22, 0x03	; 3
     6b2:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     6b6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6ba:	8a e2       	ldi	r24, 0x2A	; 42
     6bc:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6c0:	c8 01       	movw	r24, r16
     6c2:	63 e0       	ldi	r22, 0x03	; 3
     6c4:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     6c8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6cc:	81 e2       	ldi	r24, 0x21	; 33
     6ce:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     6d8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6dc:	82 e2       	ldi	r24, 0x22	; 34
     6de:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     6e8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6ec:	84 e2       	ldi	r24, 0x24	; 36
     6ee:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6f2:	82 e1       	ldi	r24, 0x12	; 18
     6f4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     6f8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6fc:	85 e2       	ldi	r24, 0x25	; 37
     6fe:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     702:	88 e2       	ldi	r24, 0x28	; 40
     704:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     708:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     70a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     70c:	81 e3       	ldi	r24, 0x31	; 49
     70e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     712:	8d e0       	ldi	r24, 0x0D	; 13
     714:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     718:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     71a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     71c:	80 e5       	ldi	r24, 0x50	; 80
     71e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     722:	83 e7       	ldi	r24, 0x73	; 115
     724:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     728:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     72a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     72c:	8c e3       	ldi	r24, 0x3C	; 60
     72e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     738:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     73a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     73c:	8d e3       	ldi	r24, 0x3D	; 61
     73e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     742:	86 e0       	ldi	r24, 0x06	; 6
     744:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     748:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     74a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     752:	8f e0       	ldi	r24, 0x0F	; 15
     754:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     758:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     76a:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     76c:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     76e:	0e 94 34 03 	call	0x668	; 0x668 <mirf_config>
}
     772:	08 95       	ret

00000774 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     77a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     77c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     77e:	8a e2       	ldi	r24, 0x2A	; 42
     780:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     784:	ce 01       	movw	r24, r28
     786:	65 e0       	ldi	r22, 0x05	; 5
     788:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     78c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     78e:	2c 9a       	sbi	0x05, 4	; 5
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     79c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     79e:	80 e3       	ldi	r24, 0x30	; 48
     7a0:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     7a4:	ce 01       	movw	r24, r28
     7a6:	65 e0       	ldi	r22, 0x05	; 5
     7a8:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     7ac:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     7b4:	80 91 27 04 	lds	r24, 0x0427
     7b8:	88 23       	and	r24, r24
     7ba:	11 f0       	breq	.+4      	; 0x7c0 <mirf_data_ready+0xc>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     7be:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     7c0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     7c8:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     7ca:	80 74       	andi	r24, 0x40	; 64
     7cc:	08 95       	ret

000007ce <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	0f 92       	push	r0
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     7d8:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     7da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     7dc:	87 e1       	ldi	r24, 0x17	; 23
     7de:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     7e2:	be 01       	movw	r22, r28
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	cb 01       	movw	r24, r22
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     7f0:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f4:	81 70       	andi	r24, 0x01	; 1
     7f6:	0f 90       	pop	r0
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     7fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     800:	82 ee       	ldi	r24, 0xE2	; 226
     802:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     806:	28 9a       	sbi	0x05, 0	; 5

}
     808:	08 95       	ret

0000080a <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     810:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     812:	81 e6       	ldi	r24, 0x61	; 97
     814:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     818:	ce 01       	movw	r24, r28
     81a:	be 01       	movw	r22, r28
     81c:	4d e0       	ldi	r20, 0x0D	; 13
     81e:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     822:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     824:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     826:	87 e2       	ldi	r24, 0x27	; 39
     828:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     832:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	0f 92       	push	r0
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     844:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     846:	8f 71       	andi	r24, 0x1F	; 31
     848:	80 62       	ori	r24, 0x20	; 32
     84a:	69 83       	std	Y+1, r22	; 0x01
     84c:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     850:	69 81       	ldd	r22, Y+1	; 0x01
     852:	86 2f       	mov	r24, r22
     854:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     858:	28 9a       	sbi	0x05, 0	; 5
}
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	0f 92       	push	r0
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     872:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     874:	8f 71       	andi	r24, 0x1F	; 31
     876:	49 83       	std	Y+1, r20	; 0x01
     878:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     87c:	c8 01       	movw	r24, r16
     87e:	b8 01       	movw	r22, r16
     880:	49 81       	ldd	r20, Y+1	; 0x01
     882:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     886:	28 9a       	sbi	0x05, 0	; 5
}
     888:	0f 90       	pop	r0
     88a:	cf 91       	pop	r28
     88c:	df 91       	pop	r29
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	08 95       	ret

00000894 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	df 93       	push	r29
     89a:	cf 93       	push	r28
     89c:	0f 92       	push	r0
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     8a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8a6:	8f 71       	andi	r24, 0x1F	; 31
     8a8:	80 62       	ori	r24, 0x20	; 32
     8aa:	49 83       	std	Y+1, r20	; 0x01
     8ac:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     8b0:	c8 01       	movw	r24, r16
     8b2:	49 81       	ldd	r20, Y+1	; 0x01
     8b4:	64 2f       	mov	r22, r20
     8b6:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     8ba:	28 9a       	sbi	0x05, 0	; 5
}
     8bc:	0f 90       	pop	r0
     8be:	cf 91       	pop	r28
     8c0:	df 91       	pop	r29
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	08 95       	ret

000008c8 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	0f 92       	push	r0
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     8d8:	80 91 27 04 	lds	r24, 0x0427
     8dc:	88 23       	and	r24, r24
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <mirf_send+0x10>

    mirf_CE_lo;
     8e0:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 27 04 	sts	0x0427, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     8e8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8ea:	80 e2       	ldi	r24, 0x20	; 32
     8ec:	69 83       	std	Y+1, r22	; 0x01
     8ee:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     8f2:	8a e4       	ldi	r24, 0x4A	; 74
     8f4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     8f8:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     8fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     8fc:	81 ee       	ldi	r24, 0xE1	; 225
     8fe:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     902:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     904:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     906:	80 ea       	ldi	r24, 0xA0	; 160
     908:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     90c:	c8 01       	movw	r24, r16
     90e:	69 81       	ldd	r22, Y+1	; 0x01
     910:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     914:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     916:	2c 9a       	sbi	0x05, 4	; 5
}
     918:	0f 90       	pop	r0
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	0f 92       	push	r0
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	18 2f       	mov	r17, r24
     938:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     93a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     93c:	81 ee       	ldi	r24, 0xE1	; 225
     93e:	99 83       	std	Y+1, r25	; 0x01
     940:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     944:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     946:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     948:	88 ea       	ldi	r24, 0xA8	; 168
     94a:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     94e:	99 81       	ldd	r25, Y+1	; 0x01
     950:	00 23       	and	r16, r16
     952:	61 f0       	breq	.+24     	; 0x96c <writeAckPayload+0x48>
     954:	61 2f       	mov	r22, r17
     956:	79 2f       	mov	r23, r25
     958:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     95a:	f7 01       	movw	r30, r14
     95c:	81 91       	ld	r24, Z+
     95e:	7f 01       	movw	r14, r30
     960:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     964:	8e 2d       	mov	r24, r14
     966:	81 1b       	sub	r24, r17
     968:	80 17       	cp	r24, r16
     96a:	b8 f3       	brcs	.-18     	; 0x95a <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     96c:	28 9a       	sbi	0x05, 0	; 5


}
     96e:	0f 90       	pop	r0
     970:	cf 91       	pop	r28
     972:	df 91       	pop	r29
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     97e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     980:	81 ee       	ldi	r24, 0xE1	; 225
     982:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     986:	28 9a       	sbi	0x05, 0	; 5

}
     988:	08 95       	ret

0000098a <handleRFCommands>:

void handleRFCommands() {
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     990:	80 91 27 04 	lds	r24, 0x0427
     994:	88 23       	and	r24, r24
     996:	21 f0       	breq	.+8      	; 0x9a0 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     9a0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     9a8:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     9aa:	86 ff       	sbrs	r24, 6
     9ac:	f5 cf       	rjmp	.-22     	; 0x998 <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9b0:	87 e2       	ldi	r24, 0x27	; 39
     9b2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9b6:	80 e7       	ldi	r24, 0x70	; 112
     9b8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     9bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     9be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     9c0:	81 e6       	ldi	r24, 0x61	; 97
     9c2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     9c6:	84 e4       	ldi	r24, 0x44	; 68
     9c8:	94 e0       	ldi	r25, 0x04	; 4
     9ca:	bc 01       	movw	r22, r24
     9cc:	4d e0       	ldi	r20, 0x0D	; 13
     9ce:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     9d2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9d6:	87 e2       	ldi	r24, 0x27	; 39
     9d8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9dc:	80 e4       	ldi	r24, 0x40	; 64
     9de:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     9e2:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     9e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     9e6:	82 ee       	ldi	r24, 0xE2	; 226
     9e8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     9ec:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     9ee:	60 91 44 04 	lds	r22, 0x0444
     9f2:	66 23       	and	r22, r22
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <handleRFCommands+0x6e>
     9f6:	6b c1       	rjmp	.+726    	; 0xcce <handleRFCommands+0x344>
     9f8:	50 91 48 04 	lds	r21, 0x0448
     9fc:	40 91 49 04 	lds	r20, 0x0449
     a00:	e0 91 45 04 	lds	r30, 0x0445
     a04:	70 91 46 04 	lds	r23, 0x0446

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     a08:	25 2f       	mov	r18, r21
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	2f 77       	andi	r18, 0x7F	; 127
     a0e:	30 70       	andi	r19, 0x00	; 0
     a10:	30 93 02 04 	sts	0x0402, r19
     a14:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     a18:	84 2f       	mov	r24, r20
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	8f 77       	andi	r24, 0x7F	; 127
     a1e:	90 70       	andi	r25, 0x00	; 0
     a20:	90 93 00 04 	sts	0x0400, r25
     a24:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     a28:	57 fd       	sbrc	r21, 7
     a2a:	15 c2       	rjmp	.+1066   	; 0xe56 <handleRFCommands+0x4cc>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	30 95       	com	r19
     a36:	21 95       	neg	r18
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	30 93 f0 03 	sts	0x03F0, r19
     a3e:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     a42:	47 fd       	sbrc	r20, 7
     a44:	12 c2       	rjmp	.+1060   	; 0xe6a <handleRFCommands+0x4e0>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	90 95       	com	r25
     a50:	81 95       	neg	r24
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	90 93 f2 03 	sts	0x03F2, r25
     a58:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     a5c:	42 e0       	ldi	r20, 0x02	; 2
     a5e:	21 30       	cpi	r18, 0x01	; 1
     a60:	34 07       	cpc	r19, r20
     a62:	44 f0       	brlt	.+16     	; 0xa74 <handleRFCommands+0xea>
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	52 e0       	ldi	r21, 0x02	; 2
     a68:	50 93 f0 03 	sts	0x03F0, r21
     a6c:	40 93 ef 03 	sts	0x03EF, r20
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     a74:	42 e0       	ldi	r20, 0x02	; 2
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	94 07       	cpc	r25, r20
     a7a:	34 f0       	brlt	.+12     	; 0xa88 <handleRFCommands+0xfe>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	90 93 f2 03 	sts	0x03F2, r25
     a84:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     a88:	4e ef       	ldi	r20, 0xFE	; 254
     a8a:	20 30       	cpi	r18, 0x00	; 0
     a8c:	34 07       	cpc	r19, r20
     a8e:	34 f4       	brge	.+12     	; 0xa9c <handleRFCommands+0x112>
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	5e ef       	ldi	r21, 0xFE	; 254
     a94:	50 93 f0 03 	sts	0x03F0, r21
     a98:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     a9c:	2e ef       	ldi	r18, 0xFE	; 254
     a9e:	80 30       	cpi	r24, 0x00	; 0
     aa0:	92 07       	cpc	r25, r18
     aa2:	34 f4       	brge	.+12     	; 0xab0 <handleRFCommands+0x126>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	9e ef       	ldi	r25, 0xFE	; 254
     aa8:	90 93 f2 03 	sts	0x03F2, r25
     aac:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     ab0:	26 2f       	mov	r18, r22
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	30 93 3d 04 	sts	0x043D, r19
     ab8:	20 93 3c 04 	sts	0x043C, r18
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	f0 93 3f 04 	sts	0x043F, r31
     ac2:	e0 93 3e 04 	sts	0x043E, r30
     ac6:	c7 2f       	mov	r28, r23
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
     aca:	d0 93 41 04 	sts	0x0441, r29
     ace:	c0 93 40 04 	sts	0x0440, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     ad2:	92 2f       	mov	r25, r18
     ad4:	88 27       	eor	r24, r24
     ad6:	82 1b       	sub	r24, r18
     ad8:	93 0b       	sbc	r25, r19
     ada:	24 e6       	ldi	r18, 0x64	; 100
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	b9 01       	movw	r22, r18
     ae0:	0e 94 4c 23 	call	0x4698	; 0x4698 <__udivmodhi4>
     ae4:	16 2f       	mov	r17, r22
     ae6:	10 95       	com	r17
     ae8:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     aec:	5e 2f       	mov	r21, r30
     aee:	44 27       	eor	r20, r20
     af0:	4e 1b       	sub	r20, r30
     af2:	5f 0b       	sbc	r21, r31
     af4:	ca 01       	movw	r24, r20
     af6:	b9 01       	movw	r22, r18
     af8:	0e 94 4c 23 	call	0x4698	; 0x4698 <__udivmodhi4>
     afc:	60 95       	com	r22
     afe:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     b02:	5c 2f       	mov	r21, r28
     b04:	44 27       	eor	r20, r20
     b06:	4c 1b       	sub	r20, r28
     b08:	5d 0b       	sbc	r21, r29
     b0a:	ca 01       	movw	r24, r20
     b0c:	b9 01       	movw	r22, r18
     b0e:	0e 94 4c 23 	call	0x4698	; 0x4698 <__udivmodhi4>
     b12:	60 95       	com	r22
     b14:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     b18:	81 2f       	mov	r24, r17
     b1a:	0e 94 bf 19 	call	0x337e	; 0x337e <updateRedLed>
		updateGreenLed(pwm_green);
     b1e:	80 91 0d 02 	lds	r24, 0x020D
     b22:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <updateGreenLed>
		updateBlueLed(pwm_blue);
     b26:	80 91 0e 02 	lds	r24, 0x020E
     b2a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     b2e:	80 91 47 04 	lds	r24, 0x0447
     b32:	80 ff       	sbrs	r24, 0
     b34:	d8 c0       	rjmp	.+432    	; 0xce6 <handleRFCommands+0x35c>
			LED_IR1_LOW;
     b36:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     b38:	81 ff       	sbrs	r24, 1
     b3a:	d8 c0       	rjmp	.+432    	; 0xcec <handleRFCommands+0x362>
			LED_IR2_LOW;
     b3c:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     b3e:	98 2f       	mov	r25, r24
     b40:	82 ff       	sbrs	r24, 2
     b42:	d8 c0       	rjmp	.+432    	; 0xcf4 <handleRFCommands+0x36a>
			irEnabled = 1;
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     b4a:	84 fd       	sbrc	r24, 4
     b4c:	d7 c0       	rjmp	.+430    	; 0xcfc <handleRFCommands+0x372>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b4e:	86 ff       	sbrs	r24, 6
     b50:	dc c0       	rjmp	.+440    	; 0xd0a <handleRFCommands+0x380>
			obstacleAvoidanceEnabled = 1;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 24 04 	sts	0x0424, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     b58:	97 fd       	sbrc	r25, 7
     b5a:	db c0       	rjmp	.+438    	; 0xd12 <handleRFCommands+0x388>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     b5c:	10 92 25 04 	sts	0x0425, r1
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     b60:	80 91 0b 02 	lds	r24, 0x020B
     b64:	80 93 2c 04 	sts	0x042C, r24

		switch(packetId) {
     b68:	84 30       	cpi	r24, 0x04	; 4
     b6a:	09 f4       	brne	.+2      	; 0xb6e <handleRFCommands+0x1e4>
     b6c:	dc c0       	rjmp	.+440    	; 0xd26 <handleRFCommands+0x39c>
     b6e:	85 30       	cpi	r24, 0x05	; 5
     b70:	08 f0       	brcs	.+2      	; 0xb74 <handleRFCommands+0x1ea>
     b72:	19 c1       	rjmp	.+562    	; 0xda6 <handleRFCommands+0x41c>
     b74:	83 30       	cpi	r24, 0x03	; 3
     b76:	09 f0       	breq	.+2      	; 0xb7a <handleRFCommands+0x1f0>
     b78:	5c c0       	rjmp	.+184    	; 0xc32 <handleRFCommands+0x2a8>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     b7a:	90 91 5f 03 	lds	r25, 0x035F
     b7e:	80 91 60 03 	lds	r24, 0x0360
     b82:	90 93 2d 04 	sts	0x042D, r25
				ackPayload[2] = proximityResult[0]>>8;
     b86:	80 93 2e 04 	sts	0x042E, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     b8a:	90 91 61 03 	lds	r25, 0x0361
     b8e:	80 91 62 03 	lds	r24, 0x0362
     b92:	90 93 2f 04 	sts	0x042F, r25
				ackPayload[4] = proximityResult[1]>>8;
     b96:	80 93 30 04 	sts	0x0430, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     b9a:	90 91 63 03 	lds	r25, 0x0363
     b9e:	80 91 64 03 	lds	r24, 0x0364
     ba2:	90 93 31 04 	sts	0x0431, r25
				ackPayload[6] = proximityResult[2]>>8;
     ba6:	80 93 32 04 	sts	0x0432, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     baa:	90 91 65 03 	lds	r25, 0x0365
     bae:	80 91 66 03 	lds	r24, 0x0366
     bb2:	90 93 33 04 	sts	0x0433, r25
				ackPayload[8] = proximityResult[3]>>8;
     bb6:	80 93 34 04 	sts	0x0434, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     bba:	90 91 69 03 	lds	r25, 0x0369
     bbe:	80 91 6a 03 	lds	r24, 0x036A
     bc2:	90 93 35 04 	sts	0x0435, r25
				ackPayload[10] = proximityResult[5]>>8;
     bc6:	80 93 36 04 	sts	0x0436, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     bca:	90 91 6b 03 	lds	r25, 0x036B
     bce:	80 91 6c 03 	lds	r24, 0x036C
     bd2:	90 93 37 04 	sts	0x0437, r25
				ackPayload[12] = proximityResult[6]>>8;
     bd6:	80 93 38 04 	sts	0x0438, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     bda:	90 91 6d 03 	lds	r25, 0x036D
     bde:	80 91 6e 03 	lds	r24, 0x036E
     be2:	90 93 39 04 	sts	0x0439, r25
				ackPayload[14] = proximityResult[7]>>8;
     be6:	80 93 3a 04 	sts	0x043A, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
     bea:	20 91 03 01 	lds	r18, 0x0103
     bee:	80 91 03 01 	lds	r24, 0x0103
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 72       	andi	r24, 0x20	; 32
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	95 95       	asr	r25
     bfa:	87 95       	ror	r24
     bfc:	95 95       	asr	r25
     bfe:	87 95       	ror	r24
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	95 95       	asr	r25
     c06:	87 95       	ror	r24
     c08:	95 95       	asr	r25
     c0a:	87 95       	ror	r24
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	20 71       	andi	r18, 0x10	; 16
     c14:	30 70       	andi	r19, 0x00	; 0
     c16:	35 95       	asr	r19
     c18:	27 95       	ror	r18
     c1a:	35 95       	asr	r19
     c1c:	27 95       	ror	r18
     c1e:	35 95       	asr	r19
     c20:	27 95       	ror	r18
     c22:	35 95       	asr	r19
     c24:	27 95       	ror	r18
     c26:	82 2b       	or	r24, r18
     c28:	80 93 3b 04 	sts	0x043B, r24
				#endif
				packetId = 4;
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     c32:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     c34:	81 ee       	ldi	r24, 0xE1	; 225
     c36:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     c3a:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     c3c:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     c3e:	88 ea       	ldi	r24, 0xA8	; 168
     c40:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     c44:	80 91 2c 04 	lds	r24, 0x042C
     c48:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c4c:	80 91 2d 04 	lds	r24, 0x042D
     c50:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c54:	80 91 2e 04 	lds	r24, 0x042E
     c58:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c5c:	80 91 2f 04 	lds	r24, 0x042F
     c60:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c64:	80 91 30 04 	lds	r24, 0x0430
     c68:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c6c:	80 91 31 04 	lds	r24, 0x0431
     c70:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c74:	80 91 32 04 	lds	r24, 0x0432
     c78:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c7c:	80 91 33 04 	lds	r24, 0x0433
     c80:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c84:	80 91 34 04 	lds	r24, 0x0434
     c88:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c8c:	80 91 35 04 	lds	r24, 0x0435
     c90:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c94:	80 91 36 04 	lds	r24, 0x0436
     c98:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     c9c:	80 91 37 04 	lds	r24, 0x0437
     ca0:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     ca4:	80 91 38 04 	lds	r24, 0x0438
     ca8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     cac:	80 91 39 04 	lds	r24, 0x0439
     cb0:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     cb4:	80 91 3a 04 	lds	r24, 0x043A
     cb8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     cbc:	80 91 3b 04 	lds	r24, 0x043B
     cc0:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     cc4:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     cce:	e0 91 45 04 	lds	r30, 0x0445
     cd2:	ee 23       	and	r30, r30
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <handleRFCommands+0x34e>
     cd6:	d2 c0       	rjmp	.+420    	; 0xe7c <handleRFCommands+0x4f2>
     cd8:	50 91 48 04 	lds	r21, 0x0448
     cdc:	40 91 49 04 	lds	r20, 0x0449
     ce0:	70 91 46 04 	lds	r23, 0x0446
     ce4:	91 ce       	rjmp	.-734    	; 0xa08 <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     ce6:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     ce8:	81 fd       	sbrc	r24, 1
     cea:	28 cf       	rjmp	.-432    	; 0xb3c <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     cec:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     cee:	98 2f       	mov	r25, r24
     cf0:	82 fd       	sbrc	r24, 2
     cf2:	28 cf       	rjmp	.-432    	; 0xb44 <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     cf4:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     cf8:	84 ff       	sbrs	r24, 4
     cfa:	29 cf       	rjmp	.-430    	; 0xb4e <handleRFCommands+0x1c4>
			calibrateSensors();
     cfc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <calibrateSensors>
     d00:	90 91 47 04 	lds	r25, 0x0447
     d04:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     d06:	86 fd       	sbrc	r24, 6
     d08:	24 cf       	rjmp	.-440    	; 0xb52 <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     d0a:	10 92 24 04 	sts	0x0424, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     d0e:	97 ff       	sbrs	r25, 7
     d10:	25 cf       	rjmp	.-438    	; 0xb5c <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 25 04 	sts	0x0425, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     d18:	80 91 0b 02 	lds	r24, 0x020B
     d1c:	80 93 2c 04 	sts	0x042C, r24

		switch(packetId) {
     d20:	84 30       	cpi	r24, 0x04	; 4
     d22:	09 f0       	breq	.+2      	; 0xd26 <handleRFCommands+0x39c>
     d24:	24 cf       	rjmp	.-440    	; 0xb6e <handleRFCommands+0x1e4>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     d26:	90 91 67 03 	lds	r25, 0x0367
     d2a:	80 91 68 03 	lds	r24, 0x0368
     d2e:	90 93 2d 04 	sts	0x042D, r25
				ackPayload[2] = proximityResult[4]>>8;
     d32:	80 93 2e 04 	sts	0x042E, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     d36:	90 91 6f 03 	lds	r25, 0x036F
     d3a:	80 91 70 03 	lds	r24, 0x0370
     d3e:	90 93 2f 04 	sts	0x042F, r25
				ackPayload[4] = proximityResult[8]>>8;
     d42:	80 93 30 04 	sts	0x0430, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     d46:	90 91 71 03 	lds	r25, 0x0371
     d4a:	80 91 72 03 	lds	r24, 0x0372
     d4e:	90 93 31 04 	sts	0x0431, r25
				ackPayload[6] = proximityResult[9]>>8;
     d52:	80 93 32 04 	sts	0x0432, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     d56:	90 91 73 03 	lds	r25, 0x0373
     d5a:	80 91 74 03 	lds	r24, 0x0374
     d5e:	90 93 33 04 	sts	0x0433, r25
				ackPayload[8] = proximityResult[10]>>8;
     d62:	80 93 34 04 	sts	0x0434, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     d66:	90 91 75 03 	lds	r25, 0x0375
     d6a:	80 91 76 03 	lds	r24, 0x0376
     d6e:	90 93 35 04 	sts	0x0435, r25
				ackPayload[10] = proximityResult[11]>>8;
     d72:	80 93 36 04 	sts	0x0436, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     d76:	90 91 0a 04 	lds	r25, 0x040A
     d7a:	80 91 0b 04 	lds	r24, 0x040B
     d7e:	90 93 37 04 	sts	0x0437, r25
				ackPayload[12] = accX>>8;
     d82:	80 93 38 04 	sts	0x0438, r24
				ackPayload[13] = accY&0xFF;
     d86:	90 91 0c 04 	lds	r25, 0x040C
     d8a:	80 91 0d 04 	lds	r24, 0x040D
     d8e:	90 93 39 04 	sts	0x0439, r25
				ackPayload[14] = accY>>8;
     d92:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[15] = irCommand;
     d96:	80 91 05 04 	lds	r24, 0x0405
     d9a:	80 93 3b 04 	sts	0x043B, r24
				packetId = 5;
     d9e:	85 e0       	ldi	r24, 0x05	; 5
     da0:	80 93 0b 02 	sts	0x020B, r24
				break;
     da4:	46 cf       	rjmp	.-372    	; 0xc32 <handleRFCommands+0x2a8>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     da6:	85 30       	cpi	r24, 0x05	; 5
     da8:	09 f4       	brne	.+2      	; 0xdac <handleRFCommands+0x422>
     daa:	7d c0       	rjmp	.+250    	; 0xea6 <handleRFCommands+0x51c>
     dac:	86 30       	cpi	r24, 0x06	; 6
     dae:	09 f0       	breq	.+2      	; 0xdb2 <handleRFCommands+0x428>
     db0:	40 cf       	rjmp	.-384    	; 0xc32 <handleRFCommands+0x2a8>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     db2:	80 91 3f 03 	lds	r24, 0x033F
     db6:	90 91 40 03 	lds	r25, 0x0340
     dba:	80 93 2d 04 	sts	0x042D, r24
				ackPayload[2] = proximityValue[8]>>8;
     dbe:	80 91 3f 03 	lds	r24, 0x033F
     dc2:	90 91 40 03 	lds	r25, 0x0340
     dc6:	90 93 2e 04 	sts	0x042E, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     dca:	80 91 4f 03 	lds	r24, 0x034F
     dce:	90 91 50 03 	lds	r25, 0x0350
     dd2:	80 93 2f 04 	sts	0x042F, r24
				ackPayload[4] = proximityValue[16]>>8;
     dd6:	80 91 4f 03 	lds	r24, 0x034F
     dda:	90 91 50 03 	lds	r25, 0x0350
     dde:	90 93 30 04 	sts	0x0430, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     de2:	80 91 53 03 	lds	r24, 0x0353
     de6:	90 91 54 03 	lds	r25, 0x0354
     dea:	80 93 31 04 	sts	0x0431, r24
				ackPayload[6] = proximityValue[18]>>8;
     dee:	80 91 53 03 	lds	r24, 0x0353
     df2:	90 91 54 03 	lds	r25, 0x0354
     df6:	90 93 32 04 	sts	0x0432, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     dfa:	80 91 57 03 	lds	r24, 0x0357
     dfe:	90 91 58 03 	lds	r25, 0x0358
     e02:	80 93 33 04 	sts	0x0433, r24
				ackPayload[8] = proximityValue[20]>>8;
     e06:	80 91 57 03 	lds	r24, 0x0357
     e0a:	90 91 58 03 	lds	r25, 0x0358
     e0e:	90 93 34 04 	sts	0x0434, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     e12:	80 91 5b 03 	lds	r24, 0x035B
     e16:	90 91 5c 03 	lds	r25, 0x035C
     e1a:	80 93 35 04 	sts	0x0435, r24
				ackPayload[10] = proximityValue[22]>>8;
     e1e:	80 91 5b 03 	lds	r24, 0x035B
     e22:	90 91 5c 03 	lds	r25, 0x035C
     e26:	90 93 36 04 	sts	0x0436, r25
				ackPayload[11] = accZ&0xFF;
     e2a:	90 91 0e 04 	lds	r25, 0x040E
     e2e:	80 91 0f 04 	lds	r24, 0x040F
     e32:	90 93 37 04 	sts	0x0437, r25
				ackPayload[12] = accZ>>8;
     e36:	80 93 38 04 	sts	0x0438, r24
				ackPayload[13] = batteryLevel&0xFF;
     e3a:	90 91 c3 03 	lds	r25, 0x03C3
     e3e:	80 91 c4 03 	lds	r24, 0x03C4
     e42:	90 93 39 04 	sts	0x0439, r25
				ackPayload[14] = batteryLevel>>8;
     e46:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[15] = 0;
     e4a:	10 92 3b 04 	sts	0x043B, r1
				packetId = 3;
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	80 93 0b 02 	sts	0x020B, r24
				break;
     e54:	ee ce       	rjmp	.-548    	; 0xc32 <handleRFCommands+0x2a8>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     e56:	22 0f       	add	r18, r18
     e58:	33 1f       	adc	r19, r19
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	30 93 f0 03 	sts	0x03F0, r19
     e62:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     e66:	47 ff       	sbrs	r20, 7
     e68:	ee cd       	rjmp	.-1060   	; 0xa46 <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	90 93 f2 03 	sts	0x03F2, r25
     e76:	80 93 f1 03 	sts	0x03F1, r24
     e7a:	f0 cd       	rjmp	.-1056   	; 0xa5c <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     e7c:	70 91 46 04 	lds	r23, 0x0446
     e80:	77 23       	and	r23, r23
     e82:	61 f4       	brne	.+24     	; 0xe9c <handleRFCommands+0x512>
     e84:	80 91 47 04 	lds	r24, 0x0447
     e88:	88 30       	cpi	r24, 0x08	; 8
     e8a:	41 f4       	brne	.+16     	; 0xe9c <handleRFCommands+0x512>
     e8c:	50 91 48 04 	lds	r21, 0x0448
     e90:	55 23       	and	r21, r21
     e92:	09 f4       	brne	.+2      	; 0xe96 <handleRFCommands+0x50c>
     e94:	64 c0       	rjmp	.+200    	; 0xf5e <handleRFCommands+0x5d4>
     e96:	40 91 49 04 	lds	r20, 0x0449
     e9a:	b6 cd       	rjmp	.-1172   	; 0xa08 <handleRFCommands+0x7e>
     e9c:	50 91 48 04 	lds	r21, 0x0448
     ea0:	40 91 49 04 	lds	r20, 0x0449
     ea4:	b1 cd       	rjmp	.-1182   	; 0xa08 <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     ea6:	80 91 2f 03 	lds	r24, 0x032F
     eaa:	90 91 30 03 	lds	r25, 0x0330
     eae:	80 93 2d 04 	sts	0x042D, r24
				ackPayload[2] = proximityValue[0]>>8;
     eb2:	80 91 2f 03 	lds	r24, 0x032F
     eb6:	90 91 30 03 	lds	r25, 0x0330
     eba:	90 93 2e 04 	sts	0x042E, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     ebe:	80 91 33 03 	lds	r24, 0x0333
     ec2:	90 91 34 03 	lds	r25, 0x0334
     ec6:	80 93 2f 04 	sts	0x042F, r24
				ackPayload[4] = proximityValue[2]>>8;
     eca:	80 91 33 03 	lds	r24, 0x0333
     ece:	90 91 34 03 	lds	r25, 0x0334
     ed2:	90 93 30 04 	sts	0x0430, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     ed6:	80 91 37 03 	lds	r24, 0x0337
     eda:	90 91 38 03 	lds	r25, 0x0338
     ede:	80 93 31 04 	sts	0x0431, r24
				ackPayload[6] = proximityValue[4]>>8;
     ee2:	80 91 37 03 	lds	r24, 0x0337
     ee6:	90 91 38 03 	lds	r25, 0x0338
     eea:	90 93 32 04 	sts	0x0432, r25
				ackPayload[7] = proximityValue[6]&0xFF;
     eee:	80 91 3b 03 	lds	r24, 0x033B
     ef2:	90 91 3c 03 	lds	r25, 0x033C
     ef6:	80 93 33 04 	sts	0x0433, r24
				ackPayload[8] = proximityValue[6]>>8;
     efa:	80 91 3b 03 	lds	r24, 0x033B
     efe:	90 91 3c 03 	lds	r25, 0x033C
     f02:	90 93 34 04 	sts	0x0434, r25
				ackPayload[9] = proximityValue[10]&0xFF;
     f06:	80 91 43 03 	lds	r24, 0x0343
     f0a:	90 91 44 03 	lds	r25, 0x0344
     f0e:	80 93 35 04 	sts	0x0435, r24
				ackPayload[10] = proximityValue[10]>>8;
     f12:	80 91 43 03 	lds	r24, 0x0343
     f16:	90 91 44 03 	lds	r25, 0x0344
     f1a:	90 93 36 04 	sts	0x0436, r25
				ackPayload[11] = proximityValue[12]&0xFF;
     f1e:	80 91 47 03 	lds	r24, 0x0347
     f22:	90 91 48 03 	lds	r25, 0x0348
     f26:	80 93 37 04 	sts	0x0437, r24
				ackPayload[12] = proximityValue[12]>>8;
     f2a:	80 91 47 03 	lds	r24, 0x0347
     f2e:	90 91 48 03 	lds	r25, 0x0348
     f32:	90 93 38 04 	sts	0x0438, r25
				ackPayload[13] = proximityValue[14]&0xFF;
     f36:	80 91 4b 03 	lds	r24, 0x034B
     f3a:	90 91 4c 03 	lds	r25, 0x034C
     f3e:	80 93 39 04 	sts	0x0439, r24
				ackPayload[14] = proximityValue[14]>>8;
     f42:	80 91 4b 03 	lds	r24, 0x034B
     f46:	90 91 4c 03 	lds	r25, 0x034C
     f4a:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[15] = currentSelector;
     f4e:	80 91 21 04 	lds	r24, 0x0421
     f52:	80 93 3b 04 	sts	0x043B, r24
				packetId = 6;
     f56:	86 e0       	ldi	r24, 0x06	; 6
     f58:	80 93 0b 02 	sts	0x020B, r24
				break;
     f5c:	6a ce       	rjmp	.-812    	; 0xc32 <handleRFCommands+0x2a8>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     f5e:	40 91 49 04 	lds	r20, 0x0449
     f62:	44 23       	and	r20, r20
     f64:	79 f0       	breq	.+30     	; 0xf84 <handleRFCommands+0x5fa>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     f66:	10 92 02 04 	sts	0x0402, r1
     f6a:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     f6e:	84 2f       	mov	r24, r20
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	8f 77       	andi	r24, 0x7F	; 127
     f74:	90 70       	andi	r25, 0x00	; 0
     f76:	90 93 00 04 	sts	0x0400, r25
     f7a:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	54 cd       	rjmp	.-1368   	; 0xa2c <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
     f84:	8c e3       	ldi	r24, 0x3C	; 60
     f86:	0e 94 a8 12 	call	0x2550	; 0x2550 <sleep>
     f8a:	50 91 48 04 	lds	r21, 0x0448
     f8e:	40 91 49 04 	lds	r20, 0x0449
     f92:	60 91 44 04 	lds	r22, 0x0444
     f96:	e0 91 45 04 	lds	r30, 0x0445
     f9a:	70 91 46 04 	lds	r23, 0x0446
     f9e:	34 cd       	rjmp	.-1432   	; 0xa08 <handleRFCommands+0x7e>

00000fa0 <init_ir_remote_control>:
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     fa0:	e8 e6       	ldi	r30, 0x68	; 104
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	82 60       	ori	r24, 0x02	; 2
     fa8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     faa:	ec e6       	ldi	r30, 0x6C	; 108
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     fb4:	e0 eb       	ldi	r30, 0xB0	; 176
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	80 83       	st	Z, r24

}
     fbe:	08 95       	ret

00000fc0 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     fcc:	80 91 11 02 	lds	r24, 0x0211
     fd0:	88 23       	and	r24, r24
     fd2:	21 f1       	breq	.+72     	; 0x101c <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     fd4:	80 91 03 01 	lds	r24, 0x0103
     fd8:	86 fd       	sbrc	r24, 6
     fda:	20 c0       	rjmp	.+64     	; 0x101c <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     fdc:	80 91 68 00 	lds	r24, 0x0068
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     fe6:	80 91 6c 00 	lds	r24, 0x006C
     fea:	8f 77       	andi	r24, 0x7F	; 127
     fec:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
     ff6:	8d e0       	ldi	r24, 0x0D	; 13
     ff8:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     ffc:	80 91 b1 00 	lds	r24, 0x00B1
    1000:	86 60       	ori	r24, 0x06	; 6
    1002:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1006:	80 91 70 00 	lds	r24, 0x0070
    100a:	82 60       	ori	r24, 0x02	; 2
    100c:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1010:	10 92 26 03 	sts	0x0326, r1
    1014:	10 92 27 03 	sts	0x0327, r1
    1018:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    101c:	8f 91       	pop	r24
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    103e:	80 91 b1 00 	lds	r24, 0x00B1
    1042:	88 7f       	andi	r24, 0xF8	; 248
    1044:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1048:	80 91 12 02 	lds	r24, 0x0212
    104c:	88 23       	and	r24, r24
    104e:	a9 f0       	breq	.+42     	; 0x107a <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1050:	80 91 03 01 	lds	r24, 0x0103
    1054:	86 ff       	sbrs	r24, 6
    1056:	65 c0       	rjmp	.+202    	; 0x1122 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1058:	80 91 68 00 	lds	r24, 0x0068
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1062:	80 91 6c 00 	lds	r24, 0x006C
    1066:	80 68       	ori	r24, 0x80	; 128
    1068:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	90 93 02 02 	sts	0x0202, r25
    1074:	80 93 01 02 	sts	0x0201, r24
    1078:	49 c0       	rjmp	.+146    	; 0x110c <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    107a:	80 91 01 02 	lds	r24, 0x0201
    107e:	90 91 02 02 	lds	r25, 0x0202
    1082:	2f ef       	ldi	r18, 0xFF	; 255
    1084:	8f 3f       	cpi	r24, 0xFF	; 255
    1086:	92 07       	cpc	r25, r18
    1088:	09 f4       	brne	.+2      	; 0x108c <__vector_13+0x64>
    108a:	63 c0       	rjmp	.+198    	; 0x1152 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <__vector_13+0x6c>
    1092:	98 c0       	rjmp	.+304    	; 0x11c4 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1094:	9c 01       	movw	r18, r24
    1096:	22 50       	subi	r18, 0x02	; 2
    1098:	30 40       	sbci	r19, 0x00	; 0
    109a:	25 30       	cpi	r18, 0x05	; 5
    109c:	31 05       	cpc	r19, r1
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <__vector_13+0x7a>
    10a0:	67 c0       	rjmp	.+206    	; 0x1170 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    10a2:	9c 01       	movw	r18, r24
    10a4:	27 50       	subi	r18, 0x07	; 7
    10a6:	30 40       	sbci	r19, 0x00	; 0
    10a8:	26 30       	cpi	r18, 0x06	; 6
    10aa:	31 05       	cpc	r19, r1
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <__vector_13+0x88>
    10ae:	bd c0       	rjmp	.+378    	; 0x122a <__vector_13+0x202>

				OCR2A = 54;
    10b0:	26 e3       	ldi	r18, 0x36	; 54
    10b2:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    10b6:	20 91 b1 00 	lds	r18, 0x00B1
    10ba:	26 60       	ori	r18, 0x06	; 6
    10bc:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    10c0:	20 91 70 00 	lds	r18, 0x0070
    10c4:	22 60       	ori	r18, 0x02	; 2
    10c6:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    10ca:	20 91 03 01 	lds	r18, 0x0103
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	20 74       	andi	r18, 0x40	; 64
    10d2:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    10d4:	00 24       	eor	r0, r0
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	00 1c       	adc	r0, r0
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	00 1c       	adc	r0, r0
    10e2:	23 2f       	mov	r18, r19
    10e4:	30 2d       	mov	r19, r0
    10e6:	4c e0       	ldi	r20, 0x0C	; 12
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	48 1b       	sub	r20, r24
    10ec:	59 0b       	sbc	r21, r25
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <__vector_13+0xcc>
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	4a 95       	dec	r20
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <__vector_13+0xc8>
				data_temp += temp;
    10f8:	40 91 26 03 	lds	r20, 0x0326
    10fc:	42 0f       	add	r20, r18
    10fe:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1102:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1104:	90 93 02 02 	sts	0x0202, r25
    1108:	80 93 01 02 	sts	0x0201, r24

		}

}
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	5f 91       	pop	r21
    1112:	4f 91       	pop	r20
    1114:	3f 91       	pop	r19
    1116:	2f 91       	pop	r18
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1122:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1126:	83 e3       	ldi	r24, 0x33	; 51
    1128:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    112c:	80 91 b1 00 	lds	r24, 0x00B1
    1130:	86 60       	ori	r24, 0x06	; 6
    1132:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1136:	80 91 70 00 	lds	r24, 0x0070
    113a:	82 60       	ori	r24, 0x02	; 2
    113c:	80 93 70 00 	sts	0x0070, r24
    1140:	80 91 01 02 	lds	r24, 0x0201
    1144:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1148:	2f ef       	ldi	r18, 0xFF	; 255
    114a:	8f 3f       	cpi	r24, 0xFF	; 255
    114c:	92 07       	cpc	r25, r18
    114e:	c9 f6       	brne	.-78     	; 0x1102 <__vector_13+0xda>
    1150:	dd cf       	rjmp	.-70     	; 0x110c <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1152:	20 91 03 01 	lds	r18, 0x0103
    1156:	26 ff       	sbrs	r18, 6
    1158:	52 c0       	rjmp	.+164    	; 0x11fe <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    115a:	20 91 68 00 	lds	r18, 0x0068
    115e:	22 60       	ori	r18, 0x02	; 2
    1160:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1164:	20 91 6c 00 	lds	r18, 0x006C
    1168:	20 68       	ori	r18, 0x80	; 128
    116a:	20 93 6c 00 	sts	0x006C, r18
    116e:	ce cf       	rjmp	.-100    	; 0x110c <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1170:	26 e3       	ldi	r18, 0x36	; 54
    1172:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1176:	20 91 b1 00 	lds	r18, 0x00B1
    117a:	26 60       	ori	r18, 0x06	; 6
    117c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1180:	20 91 70 00 	lds	r18, 0x0070
    1184:	22 60       	ori	r18, 0x02	; 2
    1186:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    118a:	20 91 03 01 	lds	r18, 0x0103
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	20 74       	andi	r18, 0x40	; 64
    1192:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1194:	00 24       	eor	r0, r0
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	00 1c       	adc	r0, r0
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	00 1c       	adc	r0, r0
    11a2:	23 2f       	mov	r18, r19
    11a4:	30 2d       	mov	r19, r0
    11a6:	46 e0       	ldi	r20, 0x06	; 6
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	48 1b       	sub	r20, r24
    11ac:	59 0b       	sbc	r21, r25
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <__vector_13+0x18c>
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	4a 95       	dec	r20
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <__vector_13+0x188>
				address_temp += temp;
    11b8:	40 91 27 03 	lds	r20, 0x0327
    11bc:	42 0f       	add	r20, r18
    11be:	40 93 27 03 	sts	0x0327, r20
    11c2:	9f cf       	rjmp	.-194    	; 0x1102 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    11c4:	20 91 03 01 	lds	r18, 0x0103
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	20 74       	andi	r18, 0x40	; 64
    11cc:	30 70       	andi	r19, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	23 2f       	mov	r18, r19
    11d2:	00 0c       	add	r0, r0
    11d4:	22 1f       	adc	r18, r18
    11d6:	33 0b       	sbc	r19, r19
    11d8:	00 0c       	add	r0, r0
    11da:	22 1f       	adc	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    11e2:	26 e3       	ldi	r18, 0x36	; 54
    11e4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    11e8:	20 91 b1 00 	lds	r18, 0x00B1
    11ec:	26 60       	ori	r18, 0x06	; 6
    11ee:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    11f2:	20 91 70 00 	lds	r18, 0x0070
    11f6:	22 60       	ori	r18, 0x02	; 2
    11f8:	20 93 70 00 	sts	0x0070, r18
    11fc:	82 cf       	rjmp	.-252    	; 0x1102 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    11fe:	8c e1       	ldi	r24, 0x1C	; 28
    1200:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1204:	80 91 b1 00 	lds	r24, 0x00B1
    1208:	86 60       	ori	r24, 0x06	; 6
    120a:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    120e:	80 91 70 00 	lds	r24, 0x0070
    1212:	82 60       	ori	r24, 0x02	; 2
    1214:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1218:	10 92 26 03 	sts	0x0326, r1
    121c:	10 92 27 03 	sts	0x0327, r1
    1220:	10 92 28 03 	sts	0x0328, r1
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	6d cf       	rjmp	.-294    	; 0x1104 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    122a:	8d 30       	cpi	r24, 0x0D	; 13
    122c:	91 05       	cpc	r25, r1
    122e:	09 f0       	breq	.+2      	; 0x1232 <__vector_13+0x20a>
    1230:	68 cf       	rjmp	.-304    	; 0x1102 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1232:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1236:	80 91 68 00 	lds	r24, 0x0068
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1240:	80 91 6c 00 	lds	r24, 0x006C
    1244:	80 68       	ori	r24, 0x80	; 128
    1246:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	90 93 02 02 	sts	0x0202, r25
    1252:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1256:	80 91 28 03 	lds	r24, 0x0328
    125a:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    125e:	80 91 27 03 	lds	r24, 0x0327
    1262:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1266:	80 91 26 03 	lds	r24, 0x0326
    126a:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	80 93 06 04 	sts	0x0406, r24
    1274:	4b cf       	rjmp	.-362    	; 0x110c <__vector_13+0xe4>

00001276 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1276:	80 91 00 02 	lds	r24, 0x0200
    127a:	08 95       	ret

0000127c <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    127c:	80 91 24 03 	lds	r24, 0x0324
    1280:	08 95       	ret

00001282 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1282:	80 91 25 03 	lds	r24, 0x0325
    1286:	08 95       	ret

00001288 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1288:	80 91 11 02 	lds	r24, 0x0211
    128c:	88 23       	and	r24, r24
    128e:	b1 f1       	breq	.+108    	; 0x12fc <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1290:	e0 91 25 03 	lds	r30, 0x0325

void handleIRRemoteCommands() {

	if(irEnabled) {

		irCommand = ir_remote_get_data();
    1294:	e0 93 05 04 	sts	0x0405, r30

		if(command_received) {
    1298:	80 91 06 04 	lds	r24, 0x0406
    129c:	88 23       	and	r24, r24
    129e:	71 f1       	breq	.+92     	; 0x12fc <handleIRRemoteCommands+0x74>

			command_received = 0;
    12a0:	10 92 06 04 	sts	0x0406, r1

			switch(irCommand) {
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	e5 33       	cpi	r30, 0x35	; 53
    12a8:	f1 05       	cpc	r31, r1
    12aa:	48 f1       	brcs	.+82     	; 0x12fe <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    12ac:	20 91 ef 03 	lds	r18, 0x03EF
    12b0:	30 91 f0 03 	lds	r19, 0x03F0
    12b4:	80 91 f1 03 	lds	r24, 0x03F1
    12b8:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    12bc:	37 fd       	sbrc	r19, 7
    12be:	27 c0       	rjmp	.+78     	; 0x130e <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    12c0:	35 95       	asr	r19
    12c2:	27 95       	ror	r18
    12c4:	35 95       	asr	r19
    12c6:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    12c8:	30 93 02 04 	sts	0x0402, r19
    12cc:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    12d0:	97 fd       	sbrc	r25, 7
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    12d4:	95 95       	asr	r25
    12d6:	87 95       	ror	r24
    12d8:	95 95       	asr	r25
    12da:	87 95       	ror	r24
    12dc:	90 93 00 04 	sts	0x0400, r25
    12e0:	80 93 ff 03 	sts	0x03FF, r24
    12e4:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    12e6:	90 95       	com	r25
    12e8:	81 95       	neg	r24
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	95 95       	asr	r25
    12ee:	87 95       	ror	r24
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	90 93 00 04 	sts	0x0400, r25
    12f8:	80 93 ff 03 	sts	0x03FF, r24
    12fc:	08 95       	ret

		if(command_received) {

			command_received = 0;

			switch(irCommand) {
    12fe:	ee 58       	subi	r30, 0x8E	; 142
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	05 90       	lpm	r0, Z+
    1308:	f4 91       	lpm	r31, Z+
    130a:	e0 2d       	mov	r30, r0
    130c:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    130e:	30 95       	com	r19
    1310:	21 95       	neg	r18
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	d5 cf       	rjmp	.-86     	; 0x12c0 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1316:	80 93 24 04 	sts	0x0424, r24
							cliffAvoidanceEnabled = 0;
    131a:	10 92 25 04 	sts	0x0425, r1
    131e:	c6 cf       	rjmp	.-116    	; 0x12ac <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1320:	10 92 24 04 	sts	0x0424, r1
							cliffAvoidanceEnabled = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 93 25 04 	sts	0x0425, r24
    132a:	20 91 ef 03 	lds	r18, 0x03EF
    132e:	30 91 f0 03 	lds	r19, 0x03F0
    1332:	80 91 f1 03 	lds	r24, 0x03F1
    1336:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    133a:	c0 cf       	rjmp	.-128    	; 0x12bc <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    133c:	10 92 24 04 	sts	0x0424, r1
    1340:	20 91 ef 03 	lds	r18, 0x03EF
    1344:	30 91 f0 03 	lds	r19, 0x03F0
    1348:	80 91 f1 03 	lds	r24, 0x03F1
    134c:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1350:	b5 cf       	rjmp	.-150    	; 0x12bc <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 93 24 04 	sts	0x0424, r24
    1358:	20 91 ef 03 	lds	r18, 0x03EF
    135c:	30 91 f0 03 	lds	r19, 0x03F0
    1360:	80 91 f1 03 	lds	r24, 0x03F1
    1364:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1368:	a9 cf       	rjmp	.-174    	; 0x12bc <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    136a:	80 91 f1 03 	lds	r24, 0x03F1
    136e:	90 91 f2 03 	lds	r25, 0x03F2
    1372:	4e 97       	sbiw	r24, 0x1e	; 30
    1374:	90 93 f2 03 	sts	0x03F2, r25
    1378:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    137c:	2e ef       	ldi	r18, 0xFE	; 254
    137e:	80 30       	cpi	r24, 0x00	; 0
    1380:	92 07       	cpc	r25, r18
    1382:	9c f5       	brge	.+102    	; 0x13ea <handleIRRemoteCommands+0x162>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	9e ef       	ldi	r25, 0xFE	; 254
    1388:	90 93 f2 03 	sts	0x03F2, r25
    138c:	80 93 f1 03 	sts	0x03F1, r24
    1390:	20 91 ef 03 	lds	r18, 0x03EF
    1394:	30 91 f0 03 	lds	r19, 0x03F0
    1398:	91 cf       	rjmp	.-222    	; 0x12bc <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    139a:	20 91 ef 03 	lds	r18, 0x03EF
    139e:	30 91 f0 03 	lds	r19, 0x03F0
    13a2:	80 91 ed 03 	lds	r24, 0x03ED
    13a6:	90 91 ee 03 	lds	r25, 0x03EE
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	24 f0       	brlt	.+8      	; 0x13b8 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    13b0:	20 91 f1 03 	lds	r18, 0x03F1
    13b4:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    13b8:	2e 51       	subi	r18, 0x1E	; 30
    13ba:	30 40       	sbci	r19, 0x00	; 0
    13bc:	30 93 f0 03 	sts	0x03F0, r19
    13c0:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    13c4:	c9 01       	movw	r24, r18
    13c6:	30 93 f2 03 	sts	0x03F2, r19
    13ca:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    13ce:	4e ef       	ldi	r20, 0xFE	; 254
    13d0:	20 30       	cpi	r18, 0x00	; 0
    13d2:	34 07       	cpc	r19, r20
    13d4:	34 f4       	brge	.+12     	; 0x13e2 <handleIRRemoteCommands+0x15a>
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	5e ef       	ldi	r21, 0xFE	; 254
    13da:	50 93 f0 03 	sts	0x03F0, r21
    13de:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    13e2:	4e ef       	ldi	r20, 0xFE	; 254
    13e4:	20 30       	cpi	r18, 0x00	; 0
    13e6:	34 07       	cpc	r19, r20
    13e8:	6c f2       	brlt	.-102    	; 0x1384 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    13ea:	20 91 ef 03 	lds	r18, 0x03EF
    13ee:	30 91 f0 03 	lds	r19, 0x03F0
    13f2:	64 cf       	rjmp	.-312    	; 0x12bc <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    13f4:	20 91 ef 03 	lds	r18, 0x03EF
    13f8:	30 91 f0 03 	lds	r19, 0x03F0
    13fc:	2e 51       	subi	r18, 0x1E	; 30
    13fe:	30 40       	sbci	r19, 0x00	; 0
    1400:	30 93 f0 03 	sts	0x03F0, r19
    1404:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1408:	4e ef       	ldi	r20, 0xFE	; 254
    140a:	20 30       	cpi	r18, 0x00	; 0
    140c:	34 07       	cpc	r19, r20
    140e:	0c f0       	brlt	.+2      	; 0x1412 <handleIRRemoteCommands+0x18a>
    1410:	17 c1       	rjmp	.+558    	; 0x1640 <handleIRRemoteCommands+0x3b8>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	9e ef       	ldi	r25, 0xFE	; 254
    1416:	90 93 f0 03 	sts	0x03F0, r25
    141a:	80 93 ef 03 	sts	0x03EF, r24
    141e:	80 91 f1 03 	lds	r24, 0x03F1
    1422:	90 91 f2 03 	lds	r25, 0x03F2
    1426:	20 e8       	ldi	r18, 0x80	; 128
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	4e cf       	rjmp	.-356    	; 0x12c8 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    142c:	20 91 ef 03 	lds	r18, 0x03EF
    1430:	30 91 f0 03 	lds	r19, 0x03F0
    1434:	2e 51       	subi	r18, 0x1E	; 30
    1436:	30 40       	sbci	r19, 0x00	; 0
    1438:	30 93 f0 03 	sts	0x03F0, r19
    143c:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1440:	80 91 f1 03 	lds	r24, 0x03F1
    1444:	90 91 f2 03 	lds	r25, 0x03F2
    1448:	4e 96       	adiw	r24, 0x1e	; 30
    144a:	90 93 f2 03 	sts	0x03F2, r25
    144e:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1452:	4e ef       	ldi	r20, 0xFE	; 254
    1454:	20 30       	cpi	r18, 0x00	; 0
    1456:	34 07       	cpc	r19, r20
    1458:	34 f4       	brge	.+12     	; 0x1466 <handleIRRemoteCommands+0x1de>
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3e ef       	ldi	r19, 0xFE	; 254
    145e:	30 93 f0 03 	sts	0x03F0, r19
    1462:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1466:	42 e0       	ldi	r20, 0x02	; 2
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	94 07       	cpc	r25, r20
    146c:	0c f4       	brge	.+2      	; 0x1470 <handleIRRemoteCommands+0x1e8>
    146e:	26 cf       	rjmp	.-436    	; 0x12bc <handleIRRemoteCommands+0x34>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	90 93 f2 03 	sts	0x03F2, r25
    1478:	80 93 f1 03 	sts	0x03F1, r24
    147c:	1f cf       	rjmp	.-450    	; 0x12bc <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    147e:	20 91 ef 03 	lds	r18, 0x03EF
    1482:	30 91 f0 03 	lds	r19, 0x03F0
    1486:	80 91 f1 03 	lds	r24, 0x03F1
    148a:	90 91 f2 03 	lds	r25, 0x03F2
    148e:	82 17       	cp	r24, r18
    1490:	93 07       	cpc	r25, r19
    1492:	0c f4       	brge	.+2      	; 0x1496 <handleIRRemoteCommands+0x20e>
    1494:	da c0       	rjmp	.+436    	; 0x164a <handleIRRemoteCommands+0x3c2>
    1496:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1498:	22 5e       	subi	r18, 0xE2	; 226
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	30 93 f0 03 	sts	0x03F0, r19
    14a0:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    14a4:	4e 96       	adiw	r24, 0x1e	; 30
    14a6:	90 93 f2 03 	sts	0x03F2, r25
    14aa:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    14ae:	42 e0       	ldi	r20, 0x02	; 2
    14b0:	21 30       	cpi	r18, 0x01	; 1
    14b2:	34 07       	cpc	r19, r20
    14b4:	34 f0       	brlt	.+12     	; 0x14c2 <handleIRRemoteCommands+0x23a>
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	32 e0       	ldi	r19, 0x02	; 2
    14ba:	30 93 f0 03 	sts	0x03F0, r19
    14be:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    14c2:	22 e0       	ldi	r18, 0x02	; 2
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	92 07       	cpc	r25, r18
    14c8:	0c f4       	brge	.+2      	; 0x14cc <handleIRRemoteCommands+0x244>
    14ca:	8f cf       	rjmp	.-226    	; 0x13ea <handleIRRemoteCommands+0x162>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	92 e0       	ldi	r25, 0x02	; 2
    14d0:	90 93 f2 03 	sts	0x03F2, r25
    14d4:	80 93 f1 03 	sts	0x03F1, r24
    14d8:	20 91 ef 03 	lds	r18, 0x03EF
    14dc:	30 91 f0 03 	lds	r19, 0x03F0
    14e0:	ed ce       	rjmp	.-550    	; 0x12bc <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    14e2:	20 91 ef 03 	lds	r18, 0x03EF
    14e6:	30 91 f0 03 	lds	r19, 0x03F0
    14ea:	22 5e       	subi	r18, 0xE2	; 226
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	30 93 f0 03 	sts	0x03F0, r19
    14f2:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    14f6:	42 e0       	ldi	r20, 0x02	; 2
    14f8:	21 30       	cpi	r18, 0x01	; 1
    14fa:	34 07       	cpc	r19, r20
    14fc:	0c f4       	brge	.+2      	; 0x1500 <handleIRRemoteCommands+0x278>
    14fe:	a0 c0       	rjmp	.+320    	; 0x1640 <handleIRRemoteCommands+0x3b8>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	90 93 f0 03 	sts	0x03F0, r25
    1508:	80 93 ef 03 	sts	0x03EF, r24
    150c:	80 91 f1 03 	lds	r24, 0x03F1
    1510:	90 91 f2 03 	lds	r25, 0x03F2
    1514:	20 e8       	ldi	r18, 0x80	; 128
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	d7 ce       	rjmp	.-594    	; 0x12c8 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    151a:	80 91 07 04 	lds	r24, 0x0407
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	65 e0       	ldi	r22, 0x05	; 5
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	0e 94 60 23 	call	0x46c0	; 0x46c0 <__divmodhi4>
    152a:	80 93 07 04 	sts	0x0407, r24

					if(colorState==0) {			// turn on blue and off all IRs
    152e:	88 23       	and	r24, r24
    1530:	09 f0       	breq	.+2      	; 0x1534 <handleIRRemoteCommands+0x2ac>
    1532:	8d c0       	rjmp	.+282    	; 0x164e <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1534:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1536:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1538:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1542:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1546:	0e 94 bf 19 	call	0x337e	; 0x337e <updateRedLed>
					updateGreenLed(pwm_green);
    154a:	80 91 0d 02 	lds	r24, 0x020D
    154e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1552:	80 91 0e 02 	lds	r24, 0x020E
    1556:	0e 94 e7 19 	call	0x33ce	; 0x33ce <updateBlueLed>
    155a:	20 91 ef 03 	lds	r18, 0x03EF
    155e:	30 91 f0 03 	lds	r19, 0x03F0
    1562:	80 91 f1 03 	lds	r24, 0x03F1
    1566:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    156a:	a8 ce       	rjmp	.-688    	; 0x12bc <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    156c:	80 91 08 04 	lds	r24, 0x0408
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	83 70       	andi	r24, 0x03	; 3
    1576:	90 70       	andi	r25, 0x00	; 0
    1578:	80 93 08 04 	sts	0x0408, r24
					switch(behaviorState) {
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	09 f4       	brne	.+2      	; 0x1582 <handleIRRemoteCommands+0x2fa>
    1580:	cf ce       	rjmp	.-610    	; 0x1320 <handleIRRemoteCommands+0x98>
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	09 f4       	brne	.+2      	; 0x1588 <handleIRRemoteCommands+0x300>
    1586:	53 c0       	rjmp	.+166    	; 0x162e <handleIRRemoteCommands+0x3a6>
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	09 f4       	brne	.+2      	; 0x158e <handleIRRemoteCommands+0x306>
    158c:	c4 ce       	rjmp	.-632    	; 0x1316 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    158e:	10 92 24 04 	sts	0x0424, r1
							cliffAvoidanceEnabled = 0;
    1592:	10 92 25 04 	sts	0x0425, r1
    1596:	8a ce       	rjmp	.-748    	; 0x12ac <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1598:	20 91 ef 03 	lds	r18, 0x03EF
    159c:	30 91 f0 03 	lds	r19, 0x03F0
    15a0:	22 5e       	subi	r18, 0xE2	; 226
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	30 93 f0 03 	sts	0x03F0, r19
    15a8:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    15ac:	80 91 f1 03 	lds	r24, 0x03F1
    15b0:	90 91 f2 03 	lds	r25, 0x03F2
    15b4:	4e 97       	sbiw	r24, 0x1e	; 30
    15b6:	90 93 f2 03 	sts	0x03F2, r25
    15ba:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    15be:	42 e0       	ldi	r20, 0x02	; 2
    15c0:	21 30       	cpi	r18, 0x01	; 1
    15c2:	34 07       	cpc	r19, r20
    15c4:	34 f0       	brlt	.+12     	; 0x15d2 <handleIRRemoteCommands+0x34a>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	32 e0       	ldi	r19, 0x02	; 2
    15ca:	30 93 f0 03 	sts	0x03F0, r19
    15ce:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    15d2:	4e ef       	ldi	r20, 0xFE	; 254
    15d4:	80 30       	cpi	r24, 0x00	; 0
    15d6:	94 07       	cpc	r25, r20
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <handleIRRemoteCommands+0x354>
    15da:	70 ce       	rjmp	.-800    	; 0x12bc <handleIRRemoteCommands+0x34>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	9e ef       	ldi	r25, 0xFE	; 254
    15e0:	90 93 f2 03 	sts	0x03F2, r25
    15e4:	80 93 f1 03 	sts	0x03F1, r24
    15e8:	69 ce       	rjmp	.-814    	; 0x12bc <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    15ea:	10 92 f0 03 	sts	0x03F0, r1
    15ee:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    15f2:	10 92 f2 03 	sts	0x03F2, r1
    15f6:	10 92 f1 03 	sts	0x03F1, r1
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	5e ce       	rjmp	.-836    	; 0x12c0 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1604:	80 91 f1 03 	lds	r24, 0x03F1
    1608:	90 91 f2 03 	lds	r25, 0x03F2
    160c:	4e 96       	adiw	r24, 0x1e	; 30
    160e:	90 93 f2 03 	sts	0x03F2, r25
    1612:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1616:	22 e0       	ldi	r18, 0x02	; 2
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	92 07       	cpc	r25, r18
    161c:	0c f4       	brge	.+2      	; 0x1620 <handleIRRemoteCommands+0x398>
    161e:	e5 ce       	rjmp	.-566    	; 0x13ea <handleIRRemoteCommands+0x162>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	90 93 f2 03 	sts	0x03F2, r25
    1628:	80 93 f1 03 	sts	0x03F1, r24
    162c:	de ce       	rjmp	.-580    	; 0x13ea <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 24 04 	sts	0x0424, r24
							cliffAvoidanceEnabled = 1;
    1634:	80 93 25 04 	sts	0x0425, r24
    1638:	20 91 ef 03 	lds	r18, 0x03EF
    163c:	30 91 f0 03 	lds	r19, 0x03F0
    1640:	80 91 f1 03 	lds	r24, 0x03F1
    1644:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1648:	39 ce       	rjmp	.-910    	; 0x12bc <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    164a:	c9 01       	movw	r24, r18
    164c:	25 cf       	rjmp	.-438    	; 0x1498 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	61 f0       	breq	.+24     	; 0x166a <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	91 f0       	breq	.+36     	; 0x167a <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	d9 f0       	breq	.+54     	; 0x1690 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1660:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1664:	80 93 0c 02 	sts	0x020C, r24
    1668:	6e cf       	rjmp	.-292    	; 0x1546 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1670:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1674:	80 93 0c 02 	sts	0x020C, r24
    1678:	66 cf       	rjmp	.-308    	; 0x1546 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    167a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    167c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1684:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    1688:	10 92 0c 02 	sts	0x020C, r1
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	5b cf       	rjmp	.-330    	; 0x1546 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1690:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    1694:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    1698:	10 92 0c 02 	sts	0x020C, r1
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	53 cf       	rjmp	.-346    	; 0x1546 <handleIRRemoteCommands+0x2be>

000016a0 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    16a0:	08 95       	ret

000016a2 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <start_vertical_speed_control_left+0x14>
    16b4:	b7 c0       	rjmp	.+366    	; 0x1824 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    16b6:	20 91 1c 04 	lds	r18, 0x041C
    16ba:	30 91 1d 04 	lds	r19, 0x041D
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	2e 30       	cpi	r18, 0x0E	; 14
    16c2:	34 07       	cpc	r19, r20
    16c4:	0c f4       	brge	.+2      	; 0x16c8 <start_vertical_speed_control_left+0x26>
    16c6:	88 c0       	rjmp	.+272    	; 0x17d8 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    16c8:	18 16       	cp	r1, r24
    16ca:	19 06       	cpc	r1, r25
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <start_vertical_speed_control_left+0x2e>
    16ce:	13 c1       	rjmp	.+550    	; 0x18f6 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    16d0:	88 e6       	ldi	r24, 0x68	; 104
    16d2:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    16d4:	82 1b       	sub	r24, r18
    16d6:	93 0b       	sbc	r25, r19
    16d8:	95 95       	asr	r25
    16da:	87 95       	ror	r24
    16dc:	95 95       	asr	r25
    16de:	87 95       	ror	r24
    16e0:	29 e1       	ldi	r18, 0x19	; 25
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	28 1b       	sub	r18, r24
    16e6:	39 0b       	sbc	r19, r25
    16e8:	30 93 04 02 	sts	0x0204, r19
    16ec:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    16f0:	40 91 28 04 	lds	r20, 0x0428
    16f4:	50 91 29 04 	lds	r21, 0x0429
    16f8:	50 93 43 04 	sts	0x0443, r21
    16fc:	40 93 42 04 	sts	0x0442, r20
	if(*pwm_left >= 0) {
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	37 fd       	sbrc	r19, 7
    1706:	d2 c0       	rjmp	.+420    	; 0x18ac <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1708:	80 91 e7 03 	lds	r24, 0x03E7
    170c:	90 91 e8 03 	lds	r25, 0x03E8
    1710:	b9 01       	movw	r22, r18
    1712:	68 1b       	sub	r22, r24
    1714:	79 0b       	sbc	r23, r25
    1716:	cb 01       	movw	r24, r22
    1718:	70 93 29 04 	sts	0x0429, r23
    171c:	60 93 28 04 	sts	0x0428, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1720:	20 91 f7 03 	lds	r18, 0x03F7
    1724:	30 91 f8 03 	lds	r19, 0x03F8
    1728:	28 0f       	add	r18, r24
    172a:	39 1f       	adc	r19, r25
    172c:	30 93 f8 03 	sts	0x03F8, r19
    1730:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1734:	76 e0       	ldi	r23, 0x06	; 6
    1736:	21 34       	cpi	r18, 0x41	; 65
    1738:	37 07       	cpc	r19, r23
    173a:	0c f4       	brge	.+2      	; 0x173e <start_vertical_speed_control_left+0x9c>
    173c:	84 c0       	rjmp	.+264    	; 0x1846 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    173e:	20 e4       	ldi	r18, 0x40	; 64
    1740:	36 e0       	ldi	r19, 0x06	; 6
    1742:	30 93 f8 03 	sts	0x03F8, r19
    1746:	20 93 f7 03 	sts	0x03F7, r18
    174a:	60 ec       	ldi	r22, 0xC0	; 192
    174c:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    174e:	9c 01       	movw	r18, r24
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	dc 01       	movw	r26, r24
    1756:	aa 0f       	add	r26, r26
    1758:	bb 1f       	adc	r27, r27
    175a:	aa 0f       	add	r26, r26
    175c:	bb 1f       	adc	r27, r27
    175e:	aa 0f       	add	r26, r26
    1760:	bb 1f       	adc	r27, r27
    1762:	2a 0f       	add	r18, r26
    1764:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1766:	00 81       	ld	r16, Z
    1768:	11 81       	ldd	r17, Z+1	; 0x01
    176a:	c0 91 03 02 	lds	r28, 0x0203
    176e:	d0 91 04 02 	lds	r29, 0x0204
    1772:	0c 9f       	mul	r16, r28
    1774:	d0 01       	movw	r26, r0
    1776:	0d 9f       	mul	r16, r29
    1778:	b0 0d       	add	r27, r0
    177a:	1c 9f       	mul	r17, r28
    177c:	b0 0d       	add	r27, r0
    177e:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1780:	2a 0f       	add	r18, r26
    1782:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    1784:	48 1b       	sub	r20, r24
    1786:	59 0b       	sbc	r21, r25
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	24 0f       	add	r18, r20
    178e:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    1790:	26 0f       	add	r18, r22
    1792:	37 1f       	adc	r19, r23
    1794:	30 93 f6 03 	sts	0x03F6, r19
    1798:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    179c:	37 fd       	sbrc	r19, 7
    179e:	69 c0       	rjmp	.+210    	; 0x1872 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    17a0:	12 16       	cp	r1, r18
    17a2:	13 06       	cpc	r1, r19
    17a4:	0c f0       	brlt	.+2      	; 0x17a8 <start_vertical_speed_control_left+0x106>
    17a6:	6f c0       	rjmp	.+222    	; 0x1886 <start_vertical_speed_control_left+0x1e4>
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	97 fd       	sbrc	r25, 7
    17ae:	89 c0       	rjmp	.+274    	; 0x18c2 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    17b0:	7d e5       	ldi	r23, 0x5D	; 93
    17b2:	21 3c       	cpi	r18, 0xC1	; 193
    17b4:	37 07       	cpc	r19, r23
    17b6:	0c f4       	brge	.+2      	; 0x17ba <start_vertical_speed_control_left+0x118>
    17b8:	66 c0       	rjmp	.+204    	; 0x1886 <start_vertical_speed_control_left+0x1e4>
    17ba:	80 ec       	ldi	r24, 0xC0	; 192
    17bc:	9d e5       	ldi	r25, 0x5D	; 93
    17be:	90 93 f6 03 	sts	0x03F6, r25
    17c2:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    17d8:	24 3b       	cpi	r18, 0xB4	; 180
    17da:	31 05       	cpc	r19, r1
    17dc:	94 f4       	brge	.+36     	; 0x1802 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    17de:	2a 35       	cpi	r18, 0x5A	; 90
    17e0:	31 05       	cpc	r19, r1
    17e2:	7c f4       	brge	.+30     	; 0x1802 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    17e4:	18 16       	cp	r1, r24
    17e6:	19 06       	cpc	r1, r25
    17e8:	0c f0       	brlt	.+2      	; 0x17ec <start_vertical_speed_control_left+0x14a>
    17ea:	93 c0       	rjmp	.+294    	; 0x1912 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    17ec:	35 95       	asr	r19
    17ee:	27 95       	ror	r18
    17f0:	35 95       	asr	r19
    17f2:	27 95       	ror	r18
    17f4:	27 5e       	subi	r18, 0xE7	; 231
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	30 93 04 02 	sts	0x0204, r19
    17fc:	20 93 03 02 	sts	0x0203, r18
    1800:	77 cf       	rjmp	.-274    	; 0x16f0 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1802:	18 16       	cp	r1, r24
    1804:	19 06       	cpc	r1, r25
    1806:	94 f5       	brge	.+100    	; 0x186c <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1808:	84 eb       	ldi	r24, 0xB4	; 180
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	82 1b       	sub	r24, r18
    180e:	93 0b       	sbc	r25, r19
    1810:	95 95       	asr	r25
    1812:	87 95       	ror	r24
    1814:	95 95       	asr	r25
    1816:	87 95       	ror	r24
    1818:	49 96       	adiw	r24, 0x19	; 25
    181a:	90 93 04 02 	sts	0x0204, r25
    181e:	80 93 03 02 	sts	0x0203, r24
    1822:	66 cf       	rjmp	.-308    	; 0x16f0 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1824:	10 92 f8 03 	sts	0x03F8, r1
    1828:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    182c:	10 92 29 04 	sts	0x0429, r1
    1830:	10 92 28 04 	sts	0x0428, r1
		delta_left_speed_prev = 0;
    1834:	10 92 43 04 	sts	0x0443, r1
    1838:	10 92 42 04 	sts	0x0442, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1846:	69 ef       	ldi	r22, 0xF9	; 249
    1848:	20 3c       	cpi	r18, 0xC0	; 192
    184a:	36 07       	cpc	r19, r22
    184c:	4c f4       	brge	.+18     	; 0x1860 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    184e:	20 ec       	ldi	r18, 0xC0	; 192
    1850:	39 ef       	ldi	r19, 0xF9	; 249
    1852:	30 93 f8 03 	sts	0x03F8, r19
    1856:	20 93 f7 03 	sts	0x03F7, r18
    185a:	60 e4       	ldi	r22, 0x40	; 64
    185c:	7d ee       	ldi	r23, 0xED	; 237
    185e:	77 cf       	rjmp	.-274    	; 0x174e <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1860:	b9 01       	movw	r22, r18
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	62 0f       	add	r22, r18
    1868:	73 1f       	adc	r23, r19
    186a:	71 cf       	rjmp	.-286    	; 0x174e <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    186c:	84 eb       	ldi	r24, 0xB4	; 180
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	31 cf       	rjmp	.-414    	; 0x16d4 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	97 fd       	sbrc	r25, 7
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    187a:	10 92 f6 03 	sts	0x03F6, r1
    187e:	10 92 f5 03 	sts	0x03F5, r1
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1886:	82 ea       	ldi	r24, 0xA2	; 162
    1888:	20 34       	cpi	r18, 0x40	; 64
    188a:	38 07       	cpc	r19, r24
    188c:	04 f5       	brge	.+64     	; 0x18ce <start_vertical_speed_control_left+0x22c>
    188e:	80 e4       	ldi	r24, 0x40	; 64
    1890:	92 ea       	ldi	r25, 0xA2	; 162
    1892:	90 93 f6 03 	sts	0x03F6, r25
    1896:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	9e ef       	ldi	r25, 0xFE	; 254
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24


}
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    18ac:	80 91 e7 03 	lds	r24, 0x03E7
    18b0:	90 91 e8 03 	lds	r25, 0x03E8
    18b4:	82 0f       	add	r24, r18
    18b6:	93 1f       	adc	r25, r19
    18b8:	90 93 29 04 	sts	0x0429, r25
    18bc:	80 93 28 04 	sts	0x0428, r24
    18c0:	2f cf       	rjmp	.-418    	; 0x1720 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    18c2:	10 92 f6 03 	sts	0x03F6, r1
    18c6:	10 92 f5 03 	sts	0x03F5, r1
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    18ce:	35 95       	asr	r19
    18d0:	27 95       	ror	r18
    18d2:	35 95       	asr	r19
    18d4:	27 95       	ror	r18
    18d6:	35 95       	asr	r19
    18d8:	27 95       	ror	r18
    18da:	35 95       	asr	r19
    18dc:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    18e2:	42 e0       	ldi	r20, 0x02	; 2
    18e4:	21 30       	cpi	r18, 0x01	; 1
    18e6:	34 07       	cpc	r19, r20
    18e8:	0c f0       	brlt	.+2      	; 0x18ec <start_vertical_speed_control_left+0x24a>
    18ea:	6d cf       	rjmp	.-294    	; 0x17c6 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    18ec:	6e ef       	ldi	r22, 0xFE	; 254
    18ee:	20 30       	cpi	r18, 0x00	; 0
    18f0:	36 07       	cpc	r19, r22
    18f2:	9c f2       	brlt	.-90     	; 0x189a <start_vertical_speed_control_left+0x1f8>
    18f4:	6c cf       	rjmp	.-296    	; 0x17ce <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    18f6:	88 e6       	ldi	r24, 0x68	; 104
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	82 1b       	sub	r24, r18
    18fc:	93 0b       	sbc	r25, r19
    18fe:	95 95       	asr	r25
    1900:	87 95       	ror	r24
    1902:	95 95       	asr	r25
    1904:	87 95       	ror	r24
    1906:	49 96       	adiw	r24, 0x19	; 25
    1908:	90 93 04 02 	sts	0x0204, r25
    190c:	80 93 03 02 	sts	0x0203, r24
    1910:	ef ce       	rjmp	.-546    	; 0x16f0 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1912:	35 95       	asr	r19
    1914:	27 95       	ror	r18
    1916:	35 95       	asr	r19
    1918:	27 95       	ror	r18
    191a:	89 e1       	ldi	r24, 0x19	; 25
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	82 1b       	sub	r24, r18
    1920:	93 0b       	sbc	r25, r19
    1922:	90 93 04 02 	sts	0x0204, r25
    1926:	80 93 03 02 	sts	0x0203, r24
    192a:	e2 ce       	rjmp	.-572    	; 0x16f0 <start_vertical_speed_control_left+0x4e>

0000192c <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	09 f4       	brne	.+2      	; 0x1940 <start_vertical_speed_control_right+0x14>
    193e:	b7 c0       	rjmp	.+366    	; 0x1aae <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1940:	20 91 1c 04 	lds	r18, 0x041C
    1944:	30 91 1d 04 	lds	r19, 0x041D
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	2e 30       	cpi	r18, 0x0E	; 14
    194c:	34 07       	cpc	r19, r20
    194e:	0c f4       	brge	.+2      	; 0x1952 <start_vertical_speed_control_right+0x26>
    1950:	88 c0       	rjmp	.+272    	; 0x1a62 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1952:	18 16       	cp	r1, r24
    1954:	19 06       	cpc	r1, r25
    1956:	0c f0       	brlt	.+2      	; 0x195a <start_vertical_speed_control_right+0x2e>
    1958:	13 c1       	rjmp	.+550    	; 0x1b80 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    195a:	88 e6       	ldi	r24, 0x68	; 104
    195c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    195e:	82 1b       	sub	r24, r18
    1960:	93 0b       	sbc	r25, r19
    1962:	95 95       	asr	r25
    1964:	87 95       	ror	r24
    1966:	95 95       	asr	r25
    1968:	87 95       	ror	r24
    196a:	29 e1       	ldi	r18, 0x19	; 25
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	28 1b       	sub	r18, r24
    1970:	39 0b       	sbc	r19, r25
    1972:	30 93 06 02 	sts	0x0206, r19
    1976:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    197a:	40 91 51 04 	lds	r20, 0x0451
    197e:	50 91 52 04 	lds	r21, 0x0452
    1982:	50 93 2b 04 	sts	0x042B, r21
    1986:	40 93 2a 04 	sts	0x042A, r20
	if(*pwm_right >= 0) {
    198a:	20 81       	ld	r18, Z
    198c:	31 81       	ldd	r19, Z+1	; 0x01
    198e:	37 fd       	sbrc	r19, 7
    1990:	d2 c0       	rjmp	.+420    	; 0x1b36 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1992:	80 91 e9 03 	lds	r24, 0x03E9
    1996:	90 91 ea 03 	lds	r25, 0x03EA
    199a:	b9 01       	movw	r22, r18
    199c:	68 1b       	sub	r22, r24
    199e:	79 0b       	sbc	r23, r25
    19a0:	cb 01       	movw	r24, r22
    19a2:	70 93 52 04 	sts	0x0452, r23
    19a6:	60 93 51 04 	sts	0x0451, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    19aa:	20 91 f9 03 	lds	r18, 0x03F9
    19ae:	30 91 fa 03 	lds	r19, 0x03FA
    19b2:	28 0f       	add	r18, r24
    19b4:	39 1f       	adc	r19, r25
    19b6:	30 93 fa 03 	sts	0x03FA, r19
    19ba:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    19be:	76 e0       	ldi	r23, 0x06	; 6
    19c0:	21 34       	cpi	r18, 0x41	; 65
    19c2:	37 07       	cpc	r19, r23
    19c4:	0c f4       	brge	.+2      	; 0x19c8 <start_vertical_speed_control_right+0x9c>
    19c6:	84 c0       	rjmp	.+264    	; 0x1ad0 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    19c8:	20 e4       	ldi	r18, 0x40	; 64
    19ca:	36 e0       	ldi	r19, 0x06	; 6
    19cc:	30 93 fa 03 	sts	0x03FA, r19
    19d0:	20 93 f9 03 	sts	0x03F9, r18
    19d4:	60 ec       	ldi	r22, 0xC0	; 192
    19d6:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    19d8:	9c 01       	movw	r18, r24
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	dc 01       	movw	r26, r24
    19e0:	aa 0f       	add	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	aa 0f       	add	r26, r26
    19e6:	bb 1f       	adc	r27, r27
    19e8:	aa 0f       	add	r26, r26
    19ea:	bb 1f       	adc	r27, r27
    19ec:	2a 0f       	add	r18, r26
    19ee:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    19f0:	00 81       	ld	r16, Z
    19f2:	11 81       	ldd	r17, Z+1	; 0x01
    19f4:	c0 91 05 02 	lds	r28, 0x0205
    19f8:	d0 91 06 02 	lds	r29, 0x0206
    19fc:	0c 9f       	mul	r16, r28
    19fe:	d0 01       	movw	r26, r0
    1a00:	0d 9f       	mul	r16, r29
    1a02:	b0 0d       	add	r27, r0
    1a04:	1c 9f       	mul	r17, r28
    1a06:	b0 0d       	add	r27, r0
    1a08:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1a0a:	2a 0f       	add	r18, r26
    1a0c:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1a0e:	48 1b       	sub	r20, r24
    1a10:	59 0b       	sbc	r21, r25
    1a12:	44 0f       	add	r20, r20
    1a14:	55 1f       	adc	r21, r21
    1a16:	24 0f       	add	r18, r20
    1a18:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1a1a:	26 0f       	add	r18, r22
    1a1c:	37 1f       	adc	r19, r23
    1a1e:	30 93 f4 03 	sts	0x03F4, r19
    1a22:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1a26:	37 fd       	sbrc	r19, 7
    1a28:	69 c0       	rjmp	.+210    	; 0x1afc <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1a2a:	12 16       	cp	r1, r18
    1a2c:	13 06       	cpc	r1, r19
    1a2e:	0c f0       	brlt	.+2      	; 0x1a32 <start_vertical_speed_control_right+0x106>
    1a30:	6f c0       	rjmp	.+222    	; 0x1b10 <start_vertical_speed_control_right+0x1e4>
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	97 fd       	sbrc	r25, 7
    1a38:	89 c0       	rjmp	.+274    	; 0x1b4c <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1a3a:	7d e5       	ldi	r23, 0x5D	; 93
    1a3c:	21 3c       	cpi	r18, 0xC1	; 193
    1a3e:	37 07       	cpc	r19, r23
    1a40:	0c f4       	brge	.+2      	; 0x1a44 <start_vertical_speed_control_right+0x118>
    1a42:	66 c0       	rjmp	.+204    	; 0x1b10 <start_vertical_speed_control_right+0x1e4>
    1a44:	80 ec       	ldi	r24, 0xC0	; 192
    1a46:	9d e5       	ldi	r25, 0x5D	; 93
    1a48:	90 93 f4 03 	sts	0x03F4, r25
    1a4c:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	92 e0       	ldi	r25, 0x02	; 2
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1a62:	24 3b       	cpi	r18, 0xB4	; 180
    1a64:	31 05       	cpc	r19, r1
    1a66:	94 f4       	brge	.+36     	; 0x1a8c <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1a68:	2a 35       	cpi	r18, 0x5A	; 90
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	7c f4       	brge	.+30     	; 0x1a8c <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1a6e:	18 16       	cp	r1, r24
    1a70:	19 06       	cpc	r1, r25
    1a72:	0c f0       	brlt	.+2      	; 0x1a76 <start_vertical_speed_control_right+0x14a>
    1a74:	93 c0       	rjmp	.+294    	; 0x1b9c <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1a76:	35 95       	asr	r19
    1a78:	27 95       	ror	r18
    1a7a:	35 95       	asr	r19
    1a7c:	27 95       	ror	r18
    1a7e:	27 5e       	subi	r18, 0xE7	; 231
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	30 93 06 02 	sts	0x0206, r19
    1a86:	20 93 05 02 	sts	0x0205, r18
    1a8a:	77 cf       	rjmp	.-274    	; 0x197a <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    1a8c:	18 16       	cp	r1, r24
    1a8e:	19 06       	cpc	r1, r25
    1a90:	94 f5       	brge	.+100    	; 0x1af6 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    1a92:	84 eb       	ldi	r24, 0xB4	; 180
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	82 1b       	sub	r24, r18
    1a98:	93 0b       	sbc	r25, r19
    1a9a:	95 95       	asr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	95 95       	asr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	49 96       	adiw	r24, 0x19	; 25
    1aa4:	90 93 06 02 	sts	0x0206, r25
    1aa8:	80 93 05 02 	sts	0x0205, r24
    1aac:	66 cf       	rjmp	.-308    	; 0x197a <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1aae:	10 92 fa 03 	sts	0x03FA, r1
    1ab2:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1ab6:	10 92 52 04 	sts	0x0452, r1
    1aba:	10 92 51 04 	sts	0x0451, r1
		delta_right_speed_prev = 0;
    1abe:	10 92 2b 04 	sts	0x042B, r1
    1ac2:	10 92 2a 04 	sts	0x042A, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1ad0:	69 ef       	ldi	r22, 0xF9	; 249
    1ad2:	20 3c       	cpi	r18, 0xC0	; 192
    1ad4:	36 07       	cpc	r19, r22
    1ad6:	4c f4       	brge	.+18     	; 0x1aea <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1ad8:	20 ec       	ldi	r18, 0xC0	; 192
    1ada:	39 ef       	ldi	r19, 0xF9	; 249
    1adc:	30 93 fa 03 	sts	0x03FA, r19
    1ae0:	20 93 f9 03 	sts	0x03F9, r18
    1ae4:	60 e4       	ldi	r22, 0x40	; 64
    1ae6:	7d ee       	ldi	r23, 0xED	; 237
    1ae8:	77 cf       	rjmp	.-274    	; 0x19d8 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1aea:	b9 01       	movw	r22, r18
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	62 0f       	add	r22, r18
    1af2:	73 1f       	adc	r23, r19
    1af4:	71 cf       	rjmp	.-286    	; 0x19d8 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1af6:	84 eb       	ldi	r24, 0xB4	; 180
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	31 cf       	rjmp	.-414    	; 0x195e <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	97 fd       	sbrc	r25, 7
    1b02:	06 c0       	rjmp	.+12     	; 0x1b10 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1b04:	10 92 f4 03 	sts	0x03F4, r1
    1b08:	10 92 f3 03 	sts	0x03F3, r1
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1b10:	82 ea       	ldi	r24, 0xA2	; 162
    1b12:	20 34       	cpi	r18, 0x40	; 64
    1b14:	38 07       	cpc	r19, r24
    1b16:	04 f5       	brge	.+64     	; 0x1b58 <start_vertical_speed_control_right+0x22c>
    1b18:	80 e4       	ldi	r24, 0x40	; 64
    1b1a:	92 ea       	ldi	r25, 0xA2	; 162
    1b1c:	90 93 f4 03 	sts	0x03F4, r25
    1b20:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	9e ef       	ldi	r25, 0xFE	; 254
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24

}
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1b36:	80 91 e9 03 	lds	r24, 0x03E9
    1b3a:	90 91 ea 03 	lds	r25, 0x03EA
    1b3e:	82 0f       	add	r24, r18
    1b40:	93 1f       	adc	r25, r19
    1b42:	90 93 52 04 	sts	0x0452, r25
    1b46:	80 93 51 04 	sts	0x0451, r24
    1b4a:	2f cf       	rjmp	.-418    	; 0x19aa <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1b4c:	10 92 f4 03 	sts	0x03F4, r1
    1b50:	10 92 f3 03 	sts	0x03F3, r1
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1b58:	35 95       	asr	r19
    1b5a:	27 95       	ror	r18
    1b5c:	35 95       	asr	r19
    1b5e:	27 95       	ror	r18
    1b60:	35 95       	asr	r19
    1b62:	27 95       	ror	r18
    1b64:	35 95       	asr	r19
    1b66:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1b68:	31 83       	std	Z+1, r19	; 0x01
    1b6a:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1b6c:	42 e0       	ldi	r20, 0x02	; 2
    1b6e:	21 30       	cpi	r18, 0x01	; 1
    1b70:	34 07       	cpc	r19, r20
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <start_vertical_speed_control_right+0x24a>
    1b74:	6d cf       	rjmp	.-294    	; 0x1a50 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1b76:	6e ef       	ldi	r22, 0xFE	; 254
    1b78:	20 30       	cpi	r18, 0x00	; 0
    1b7a:	36 07       	cpc	r19, r22
    1b7c:	9c f2       	brlt	.-90     	; 0x1b24 <start_vertical_speed_control_right+0x1f8>
    1b7e:	6c cf       	rjmp	.-296    	; 0x1a58 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1b80:	88 e6       	ldi	r24, 0x68	; 104
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	82 1b       	sub	r24, r18
    1b86:	93 0b       	sbc	r25, r19
    1b88:	95 95       	asr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	95 95       	asr	r25
    1b8e:	87 95       	ror	r24
    1b90:	49 96       	adiw	r24, 0x19	; 25
    1b92:	90 93 06 02 	sts	0x0206, r25
    1b96:	80 93 05 02 	sts	0x0205, r24
    1b9a:	ef ce       	rjmp	.-546    	; 0x197a <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1b9c:	35 95       	asr	r19
    1b9e:	27 95       	ror	r18
    1ba0:	35 95       	asr	r19
    1ba2:	27 95       	ror	r18
    1ba4:	89 e1       	ldi	r24, 0x19	; 25
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	82 1b       	sub	r24, r18
    1baa:	93 0b       	sbc	r25, r19
    1bac:	90 93 06 02 	sts	0x0206, r25
    1bb0:	80 93 05 02 	sts	0x0205, r24
    1bb4:	e2 ce       	rjmp	.-572    	; 0x197a <start_vertical_speed_control_right+0x4e>

00001bb6 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1bb6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <start_horizontal_speed_control_right+0xc>
    1bc0:	7b c0       	rjmp	.+246    	; 0x1cb8 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1bc2:	a0 91 51 04 	lds	r26, 0x0451
    1bc6:	b0 91 52 04 	lds	r27, 0x0452
    1bca:	b0 93 2b 04 	sts	0x042B, r27
    1bce:	a0 93 2a 04 	sts	0x042A, r26
	if(*pwm_right >= 0) {
    1bd2:	20 81       	ld	r18, Z
    1bd4:	31 81       	ldd	r19, Z+1	; 0x01
    1bd6:	37 fd       	sbrc	r19, 7
    1bd8:	89 c0       	rjmp	.+274    	; 0x1cec <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1bda:	80 91 e9 03 	lds	r24, 0x03E9
    1bde:	90 91 ea 03 	lds	r25, 0x03EA
    1be2:	a9 01       	movw	r20, r18
    1be4:	48 1b       	sub	r20, r24
    1be6:	59 0b       	sbc	r21, r25
    1be8:	ca 01       	movw	r24, r20
    1bea:	50 93 52 04 	sts	0x0452, r21
    1bee:	40 93 51 04 	sts	0x0451, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1bf2:	20 91 f9 03 	lds	r18, 0x03F9
    1bf6:	30 91 fa 03 	lds	r19, 0x03FA
    1bfa:	28 0f       	add	r18, r24
    1bfc:	39 1f       	adc	r19, r25
    1bfe:	30 93 fa 03 	sts	0x03FA, r19
    1c02:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1c06:	56 e0       	ldi	r21, 0x06	; 6
    1c08:	21 34       	cpi	r18, 0x41	; 65
    1c0a:	35 07       	cpc	r19, r21
    1c0c:	0c f4       	brge	.+2      	; 0x1c10 <start_horizontal_speed_control_right+0x5a>
    1c0e:	61 c0       	rjmp	.+194    	; 0x1cd2 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1c10:	20 e4       	ldi	r18, 0x40	; 64
    1c12:	36 e0       	ldi	r19, 0x06	; 6
    1c14:	30 93 fa 03 	sts	0x03FA, r19
    1c18:	20 93 f9 03 	sts	0x03F9, r18
    1c1c:	60 e8       	ldi	r22, 0x80	; 128
    1c1e:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1c20:	9c 01       	movw	r18, r24
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	28 0f       	add	r18, r24
    1c28:	39 1f       	adc	r19, r25
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	28 0f       	add	r18, r24
    1c38:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1c3a:	40 81       	ld	r20, Z
    1c3c:	51 81       	ldd	r21, Z+1	; 0x01
    1c3e:	44 0f       	add	r20, r20
    1c40:	55 1f       	adc	r21, r21
    1c42:	44 0f       	add	r20, r20
    1c44:	55 1f       	adc	r21, r21
    1c46:	44 0f       	add	r20, r20
    1c48:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1c4a:	24 0f       	add	r18, r20
    1c4c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1c4e:	ad 01       	movw	r20, r26
    1c50:	48 1b       	sub	r20, r24
    1c52:	59 0b       	sbc	r21, r25
    1c54:	ca 01       	movw	r24, r20
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	84 0f       	add	r24, r20
    1c5c:	95 1f       	adc	r25, r21
    1c5e:	28 0f       	add	r18, r24
    1c60:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1c62:	26 0f       	add	r18, r22
    1c64:	37 1f       	adc	r19, r23
    1c66:	30 93 f4 03 	sts	0x03F4, r19
    1c6a:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c6e:	37 fd       	sbrc	r19, 7
    1c70:	4c c0       	rjmp	.+152    	; 0x1d0a <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1c72:	12 16       	cp	r1, r18
    1c74:	13 06       	cpc	r1, r19
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <start_horizontal_speed_control_right+0xc4>
    1c78:	52 c0       	rjmp	.+164    	; 0x1d1e <start_horizontal_speed_control_right+0x168>
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	97 fd       	sbrc	r25, 7
    1c80:	67 c0       	rjmp	.+206    	; 0x1d50 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1c82:	5d e5       	ldi	r21, 0x5D	; 93
    1c84:	21 3c       	cpi	r18, 0xC1	; 193
    1c86:	35 07       	cpc	r19, r21
    1c88:	0c f4       	brge	.+2      	; 0x1c8c <start_horizontal_speed_control_right+0xd6>
    1c8a:	49 c0       	rjmp	.+146    	; 0x1d1e <start_horizontal_speed_control_right+0x168>
    1c8c:	80 ec       	ldi	r24, 0xC0	; 192
    1c8e:	9d e5       	ldi	r25, 0x5D	; 93
    1c90:	90 93 f4 03 	sts	0x03F4, r25
    1c94:	80 93 f3 03 	sts	0x03F3, r24
    1c98:	2c ed       	ldi	r18, 0xDC	; 220
    1c9a:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1c9c:	22 5e       	subi	r18, 0xE2	; 226
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	31 83       	std	Z+1, r19	; 0x01
    1ca2:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1ca4:	42 e0       	ldi	r20, 0x02	; 2
    1ca6:	21 30       	cpi	r18, 0x01	; 1
    1ca8:	34 07       	cpc	r19, r20
    1caa:	0c f4       	brge	.+2      	; 0x1cae <start_horizontal_speed_control_right+0xf8>
    1cac:	48 c0       	rjmp	.+144    	; 0x1d3e <start_horizontal_speed_control_right+0x188>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
    1cb6:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1cb8:	10 92 fa 03 	sts	0x03FA, r1
    1cbc:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1cc0:	10 92 52 04 	sts	0x0452, r1
    1cc4:	10 92 51 04 	sts	0x0451, r1
		delta_right_speed_prev = 0;
    1cc8:	10 92 2b 04 	sts	0x042B, r1
    1ccc:	10 92 2a 04 	sts	0x042A, r1
		return;
    1cd0:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1cd2:	49 ef       	ldi	r20, 0xF9	; 249
    1cd4:	20 3c       	cpi	r18, 0xC0	; 192
    1cd6:	34 07       	cpc	r19, r20
    1cd8:	a4 f4       	brge	.+40     	; 0x1d02 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1cda:	20 ec       	ldi	r18, 0xC0	; 192
    1cdc:	39 ef       	ldi	r19, 0xF9	; 249
    1cde:	30 93 fa 03 	sts	0x03FA, r19
    1ce2:	20 93 f9 03 	sts	0x03F9, r18
    1ce6:	60 e8       	ldi	r22, 0x80	; 128
    1ce8:	73 ef       	ldi	r23, 0xF3	; 243
    1cea:	9a cf       	rjmp	.-204    	; 0x1c20 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1cec:	80 91 e9 03 	lds	r24, 0x03E9
    1cf0:	90 91 ea 03 	lds	r25, 0x03EA
    1cf4:	82 0f       	add	r24, r18
    1cf6:	93 1f       	adc	r25, r19
    1cf8:	90 93 52 04 	sts	0x0452, r25
    1cfc:	80 93 51 04 	sts	0x0451, r24
    1d00:	78 cf       	rjmp	.-272    	; 0x1bf2 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1d02:	b9 01       	movw	r22, r18
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	8b cf       	rjmp	.-234    	; 0x1c20 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	97 fd       	sbrc	r25, 7
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1d12:	10 92 f4 03 	sts	0x03F4, r1
    1d16:	10 92 f3 03 	sts	0x03F3, r1
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1d1e:	82 ea       	ldi	r24, 0xA2	; 162
    1d20:	20 34       	cpi	r18, 0x40	; 64
    1d22:	38 07       	cpc	r19, r24
    1d24:	dc f4       	brge	.+54     	; 0x1d5c <start_horizontal_speed_control_right+0x1a6>
    1d26:	80 e4       	ldi	r24, 0x40	; 64
    1d28:	92 ea       	ldi	r25, 0xA2	; 162
    1d2a:	90 93 f4 03 	sts	0x03F4, r25
    1d2e:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1d32:	24 e2       	ldi	r18, 0x24	; 36
    1d34:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1d36:	2e 51       	subi	r18, 0x1E	; 30
    1d38:	30 40       	sbci	r19, 0x00	; 0
    1d3a:	31 83       	std	Z+1, r19	; 0x01
    1d3c:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1d3e:	5e ef       	ldi	r21, 0xFE	; 254
    1d40:	20 30       	cpi	r18, 0x00	; 0
    1d42:	35 07       	cpc	r19, r21
    1d44:	24 f4       	brge	.+8      	; 0x1d4e <start_horizontal_speed_control_right+0x198>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	9e ef       	ldi	r25, 0xFE	; 254
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1d50:	10 92 f4 03 	sts	0x03F4, r1
    1d54:	10 92 f3 03 	sts	0x03F3, r1
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1d5c:	35 95       	asr	r19
    1d5e:	27 95       	ror	r18
    1d60:	35 95       	asr	r19
    1d62:	27 95       	ror	r18
    1d64:	35 95       	asr	r19
    1d66:	27 95       	ror	r18
    1d68:	35 95       	asr	r19
    1d6a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1d6c:	31 83       	std	Z+1, r19	; 0x01
    1d6e:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1d70:	12 16       	cp	r1, r18
    1d72:	13 06       	cpc	r1, r19
    1d74:	0c f4       	brge	.+2      	; 0x1d78 <start_horizontal_speed_control_right+0x1c2>
    1d76:	92 cf       	rjmp	.-220    	; 0x1c9c <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1d78:	21 15       	cp	r18, r1
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	e1 f6       	brne	.-72     	; 0x1d36 <start_horizontal_speed_control_right+0x180>
    1d7e:	08 95       	ret

00001d80 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1d80:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <start_horizontal_speed_control_left+0xc>
    1d8a:	7b c0       	rjmp	.+246    	; 0x1e82 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1d8c:	a0 91 28 04 	lds	r26, 0x0428
    1d90:	b0 91 29 04 	lds	r27, 0x0429
    1d94:	b0 93 43 04 	sts	0x0443, r27
    1d98:	a0 93 42 04 	sts	0x0442, r26
	if(*pwm_left >= 0) {
    1d9c:	20 81       	ld	r18, Z
    1d9e:	31 81       	ldd	r19, Z+1	; 0x01
    1da0:	37 fd       	sbrc	r19, 7
    1da2:	89 c0       	rjmp	.+274    	; 0x1eb6 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1da4:	80 91 e7 03 	lds	r24, 0x03E7
    1da8:	90 91 e8 03 	lds	r25, 0x03E8
    1dac:	a9 01       	movw	r20, r18
    1dae:	48 1b       	sub	r20, r24
    1db0:	59 0b       	sbc	r21, r25
    1db2:	ca 01       	movw	r24, r20
    1db4:	50 93 29 04 	sts	0x0429, r21
    1db8:	40 93 28 04 	sts	0x0428, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1dbc:	20 91 f7 03 	lds	r18, 0x03F7
    1dc0:	30 91 f8 03 	lds	r19, 0x03F8
    1dc4:	28 0f       	add	r18, r24
    1dc6:	39 1f       	adc	r19, r25
    1dc8:	30 93 f8 03 	sts	0x03F8, r19
    1dcc:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1dd0:	56 e0       	ldi	r21, 0x06	; 6
    1dd2:	21 34       	cpi	r18, 0x41	; 65
    1dd4:	35 07       	cpc	r19, r21
    1dd6:	0c f4       	brge	.+2      	; 0x1dda <start_horizontal_speed_control_left+0x5a>
    1dd8:	61 c0       	rjmp	.+194    	; 0x1e9c <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1dda:	20 e4       	ldi	r18, 0x40	; 64
    1ddc:	36 e0       	ldi	r19, 0x06	; 6
    1dde:	30 93 f8 03 	sts	0x03F8, r19
    1de2:	20 93 f7 03 	sts	0x03F7, r18
    1de6:	60 e8       	ldi	r22, 0x80	; 128
    1de8:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1dea:	9c 01       	movw	r18, r24
    1dec:	22 0f       	add	r18, r18
    1dee:	33 1f       	adc	r19, r19
    1df0:	28 0f       	add	r18, r24
    1df2:	39 1f       	adc	r19, r25
    1df4:	22 0f       	add	r18, r18
    1df6:	33 1f       	adc	r19, r19
    1df8:	22 0f       	add	r18, r18
    1dfa:	33 1f       	adc	r19, r19
    1dfc:	22 0f       	add	r18, r18
    1dfe:	33 1f       	adc	r19, r19
    1e00:	28 0f       	add	r18, r24
    1e02:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1e04:	40 81       	ld	r20, Z
    1e06:	51 81       	ldd	r21, Z+1	; 0x01
    1e08:	44 0f       	add	r20, r20
    1e0a:	55 1f       	adc	r21, r21
    1e0c:	44 0f       	add	r20, r20
    1e0e:	55 1f       	adc	r21, r21
    1e10:	44 0f       	add	r20, r20
    1e12:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1e14:	24 0f       	add	r18, r20
    1e16:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1e18:	ad 01       	movw	r20, r26
    1e1a:	48 1b       	sub	r20, r24
    1e1c:	59 0b       	sbc	r21, r25
    1e1e:	ca 01       	movw	r24, r20
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	84 0f       	add	r24, r20
    1e26:	95 1f       	adc	r25, r21
    1e28:	28 0f       	add	r18, r24
    1e2a:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1e2c:	26 0f       	add	r18, r22
    1e2e:	37 1f       	adc	r19, r23
    1e30:	30 93 f6 03 	sts	0x03F6, r19
    1e34:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1e38:	37 fd       	sbrc	r19, 7
    1e3a:	4c c0       	rjmp	.+152    	; 0x1ed4 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1e3c:	12 16       	cp	r1, r18
    1e3e:	13 06       	cpc	r1, r19
    1e40:	0c f0       	brlt	.+2      	; 0x1e44 <start_horizontal_speed_control_left+0xc4>
    1e42:	52 c0       	rjmp	.+164    	; 0x1ee8 <start_horizontal_speed_control_left+0x168>
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	97 fd       	sbrc	r25, 7
    1e4a:	67 c0       	rjmp	.+206    	; 0x1f1a <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1e4c:	5d e5       	ldi	r21, 0x5D	; 93
    1e4e:	21 3c       	cpi	r18, 0xC1	; 193
    1e50:	35 07       	cpc	r19, r21
    1e52:	0c f4       	brge	.+2      	; 0x1e56 <start_horizontal_speed_control_left+0xd6>
    1e54:	49 c0       	rjmp	.+146    	; 0x1ee8 <start_horizontal_speed_control_left+0x168>
    1e56:	80 ec       	ldi	r24, 0xC0	; 192
    1e58:	9d e5       	ldi	r25, 0x5D	; 93
    1e5a:	90 93 f6 03 	sts	0x03F6, r25
    1e5e:	80 93 f5 03 	sts	0x03F5, r24
    1e62:	2c ed       	ldi	r18, 0xDC	; 220
    1e64:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1e66:	22 5e       	subi	r18, 0xE2	; 226
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	31 83       	std	Z+1, r19	; 0x01
    1e6c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1e6e:	42 e0       	ldi	r20, 0x02	; 2
    1e70:	21 30       	cpi	r18, 0x01	; 1
    1e72:	34 07       	cpc	r19, r20
    1e74:	0c f4       	brge	.+2      	; 0x1e78 <start_horizontal_speed_control_left+0xf8>
    1e76:	48 c0       	rjmp	.+144    	; 0x1f08 <start_horizontal_speed_control_left+0x188>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	92 e0       	ldi	r25, 0x02	; 2
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1e82:	10 92 f8 03 	sts	0x03F8, r1
    1e86:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1e8a:	10 92 29 04 	sts	0x0429, r1
    1e8e:	10 92 28 04 	sts	0x0428, r1
		delta_left_speed_prev = 0;
    1e92:	10 92 43 04 	sts	0x0443, r1
    1e96:	10 92 42 04 	sts	0x0442, r1
		return;
    1e9a:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1e9c:	49 ef       	ldi	r20, 0xF9	; 249
    1e9e:	20 3c       	cpi	r18, 0xC0	; 192
    1ea0:	34 07       	cpc	r19, r20
    1ea2:	a4 f4       	brge	.+40     	; 0x1ecc <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1ea4:	20 ec       	ldi	r18, 0xC0	; 192
    1ea6:	39 ef       	ldi	r19, 0xF9	; 249
    1ea8:	30 93 f8 03 	sts	0x03F8, r19
    1eac:	20 93 f7 03 	sts	0x03F7, r18
    1eb0:	60 e8       	ldi	r22, 0x80	; 128
    1eb2:	73 ef       	ldi	r23, 0xF3	; 243
    1eb4:	9a cf       	rjmp	.-204    	; 0x1dea <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1eb6:	80 91 e7 03 	lds	r24, 0x03E7
    1eba:	90 91 e8 03 	lds	r25, 0x03E8
    1ebe:	82 0f       	add	r24, r18
    1ec0:	93 1f       	adc	r25, r19
    1ec2:	90 93 29 04 	sts	0x0429, r25
    1ec6:	80 93 28 04 	sts	0x0428, r24
    1eca:	78 cf       	rjmp	.-272    	; 0x1dbc <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1ecc:	b9 01       	movw	r22, r18
    1ece:	66 0f       	add	r22, r22
    1ed0:	77 1f       	adc	r23, r23
    1ed2:	8b cf       	rjmp	.-234    	; 0x1dea <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	97 fd       	sbrc	r25, 7
    1eda:	06 c0       	rjmp	.+12     	; 0x1ee8 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1edc:	10 92 f6 03 	sts	0x03F6, r1
    1ee0:	10 92 f5 03 	sts	0x03F5, r1
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1ee8:	82 ea       	ldi	r24, 0xA2	; 162
    1eea:	20 34       	cpi	r18, 0x40	; 64
    1eec:	38 07       	cpc	r19, r24
    1eee:	dc f4       	brge	.+54     	; 0x1f26 <start_horizontal_speed_control_left+0x1a6>
    1ef0:	80 e4       	ldi	r24, 0x40	; 64
    1ef2:	92 ea       	ldi	r25, 0xA2	; 162
    1ef4:	90 93 f6 03 	sts	0x03F6, r25
    1ef8:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1efc:	24 e2       	ldi	r18, 0x24	; 36
    1efe:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    1f00:	2e 51       	subi	r18, 0x1E	; 30
    1f02:	30 40       	sbci	r19, 0x00	; 0
    1f04:	31 83       	std	Z+1, r19	; 0x01
    1f06:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1f08:	5e ef       	ldi	r21, 0xFE	; 254
    1f0a:	20 30       	cpi	r18, 0x00	; 0
    1f0c:	35 07       	cpc	r19, r21
    1f0e:	24 f4       	brge	.+8      	; 0x1f18 <start_horizontal_speed_control_left+0x198>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	9e ef       	ldi	r25, 0xFE	; 254
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
    1f18:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1f1a:	10 92 f6 03 	sts	0x03F6, r1
    1f1e:	10 92 f5 03 	sts	0x03F5, r1
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1f26:	35 95       	asr	r19
    1f28:	27 95       	ror	r18
    1f2a:	35 95       	asr	r19
    1f2c:	27 95       	ror	r18
    1f2e:	35 95       	asr	r19
    1f30:	27 95       	ror	r18
    1f32:	35 95       	asr	r19
    1f34:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1f36:	31 83       	std	Z+1, r19	; 0x01
    1f38:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    1f3a:	12 16       	cp	r1, r18
    1f3c:	13 06       	cpc	r1, r19
    1f3e:	0c f4       	brge	.+2      	; 0x1f42 <start_horizontal_speed_control_left+0x1c2>
    1f40:	92 cf       	rjmp	.-220    	; 0x1e66 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    1f42:	21 15       	cp	r18, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	e1 f6       	brne	.-72     	; 0x1f00 <start_horizontal_speed_control_left+0x180>
    1f48:	08 95       	ret

00001f4a <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1f4a:	85 b7       	in	r24, 0x35	; 53
    1f4c:	80 61       	ori	r24, 0x10	; 16
    1f4e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1f54:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1f56:	97 ef       	ldi	r25, 0xF7	; 247
    1f58:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1f5a:	90 ee       	ldi	r25, 0xE0	; 224
    1f5c:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1f5e:	90 ef       	ldi	r25, 0xF0	; 240
    1f60:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1f62:	90 eb       	ldi	r25, 0xB0	; 176
    1f64:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1f66:	9c ef       	ldi	r25, 0xFC	; 252
    1f68:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1f6e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1f70:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1f72:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1f74:	83 bb       	out	0x13, r24	; 19
	#ifdef HW_REV_3_0
		PORTG = 0x00;		// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;		// default for unused pins is 0
    1f76:	14 ba       	out	0x14, r1	; 20
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	#endif	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1f78:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1f7c:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1f80:	9f e0       	ldi	r25, 0x0F	; 15
    1f82:	90 93 04 01 	sts	0x0104, r25
	#ifdef HW_REV_3_0
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	#endif
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
    1f86:	90 93 05 01 	sts	0x0105, r25
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;			// adc channel pins as input
    1f8a:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1f8e:	80 93 0a 01 	sts	0x010A, r24
	#ifdef HW_REV_3_0
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1f92:	10 92 0b 01 	sts	0x010B, r1
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
	#endif
		
}
    1f96:	08 95       	ret

00001f98 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    1f98:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1f9c:	10 92 bc 00 	sts	0x00BC, r1
}
    1fa0:	08 95       	ret

00001fa2 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1fa2:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1fa4:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1fa6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1faa:	80 e2       	ldi	r24, 0x20	; 32
    1fac:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1fb0:	08 95       	ret

00001fb2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1fb2:	94 ea       	ldi	r25, 0xA4	; 164
    1fb4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1fb8:	90 91 bc 00 	lds	r25, 0x00BC
    1fbc:	97 ff       	sbrs	r25, 7
    1fbe:	fc cf       	rjmp	.-8      	; 0x1fb8 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fc0:	90 91 b9 00 	lds	r25, 0x00B9
    1fc4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1fc6:	98 30       	cpi	r25, 0x08	; 8
    1fc8:	21 f0       	breq	.+8      	; 0x1fd2 <i2c_start+0x20>
    1fca:	90 31       	cpi	r25, 0x10	; 16
    1fcc:	11 f0       	breq	.+4      	; 0x1fd2 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1fd2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1fd6:	84 e8       	ldi	r24, 0x84	; 132
    1fd8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1fdc:	80 91 bc 00 	lds	r24, 0x00BC
    1fe0:	87 ff       	sbrs	r24, 7
    1fe2:	fc cf       	rjmp	.-8      	; 0x1fdc <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fe4:	90 91 b9 00 	lds	r25, 0x00B9
    1fe8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1fea:	98 31       	cpi	r25, 0x18	; 24
    1fec:	21 f0       	breq	.+8      	; 0x1ff6 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 34       	cpi	r25, 0x40	; 64
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    1ff4:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1ff6:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1ff8:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	08 95       	ret

00001ffe <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ffe:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2000:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2002:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2004:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2008:	90 91 bc 00 	lds	r25, 0x00BC
    200c:	97 ff       	sbrs	r25, 7
    200e:	fc cf       	rjmp	.-8      	; 0x2008 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2010:	90 91 b9 00 	lds	r25, 0x00B9
    2014:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2016:	98 30       	cpi	r25, 0x08	; 8
    2018:	11 f0       	breq	.+4      	; 0x201e <i2c_start_wait+0x20>
    201a:	90 31       	cpi	r25, 0x10	; 16
    201c:	99 f7       	brne	.-26     	; 0x2004 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    201e:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2022:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2026:	90 91 bc 00 	lds	r25, 0x00BC
    202a:	97 ff       	sbrs	r25, 7
    202c:	fc cf       	rjmp	.-8      	; 0x2026 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    202e:	90 91 b9 00 	lds	r25, 0x00B9
    2032:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2034:	90 32       	cpi	r25, 0x20	; 32
    2036:	19 f0       	breq	.+6      	; 0x203e <i2c_start_wait+0x40>
    2038:	98 35       	cpi	r25, 0x58	; 88
    203a:	09 f0       	breq	.+2      	; 0x203e <i2c_start_wait+0x40>
    203c:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    203e:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2042:	90 91 bc 00 	lds	r25, 0x00BC
    2046:	94 fd       	sbrc	r25, 4
    2048:	fc cf       	rjmp	.-8      	; 0x2042 <i2c_start_wait+0x44>
    204a:	dc cf       	rjmp	.-72     	; 0x2004 <i2c_start_wait+0x6>

0000204c <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    204c:	94 ea       	ldi	r25, 0xA4	; 164
    204e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2052:	90 91 bc 00 	lds	r25, 0x00BC
    2056:	97 ff       	sbrs	r25, 7
    2058:	fc cf       	rjmp	.-8      	; 0x2052 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    205a:	90 91 b9 00 	lds	r25, 0x00B9
    205e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2060:	98 30       	cpi	r25, 0x08	; 8
    2062:	21 f0       	breq	.+8      	; 0x206c <i2c_rep_start+0x20>
    2064:	90 31       	cpi	r25, 0x10	; 16
    2066:	11 f0       	breq	.+4      	; 0x206c <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	08 95       	ret
	}

	// send device address
	TWDR = address;
    206c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2070:	84 e8       	ldi	r24, 0x84	; 132
    2072:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2076:	80 91 bc 00 	lds	r24, 0x00BC
    207a:	87 ff       	sbrs	r24, 7
    207c:	fc cf       	rjmp	.-8      	; 0x2076 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    207e:	90 91 b9 00 	lds	r25, 0x00B9
    2082:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2084:	98 31       	cpi	r25, 0x18	; 24
    2086:	21 f0       	breq	.+8      	; 0x2090 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 34       	cpi	r25, 0x40	; 64
    208c:	19 f0       	breq	.+6      	; 0x2094 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    208e:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2090:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2092:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	08 95       	ret

00002098 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2098:	84 e9       	ldi	r24, 0x94	; 148
    209a:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    209e:	80 91 bc 00 	lds	r24, 0x00BC
    20a2:	84 fd       	sbrc	r24, 4
    20a4:	fc cf       	rjmp	.-8      	; 0x209e <i2c_stop+0x6>

}/* i2c_stop */
    20a6:	08 95       	ret

000020a8 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    20a8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    20ac:	84 e8       	ldi	r24, 0x84	; 132
    20ae:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    20b2:	80 91 bc 00 	lds	r24, 0x00BC
    20b6:	87 ff       	sbrs	r24, 7
    20b8:	fc cf       	rjmp	.-8      	; 0x20b2 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    20ba:	90 91 b9 00 	lds	r25, 0x00B9
    20be:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	98 32       	cpi	r25, 0x28	; 40
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    20c6:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    20c8:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    20ca:	08 95       	ret

000020cc <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    20cc:	84 ec       	ldi	r24, 0xC4	; 196
    20ce:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    20d2:	80 91 bc 00 	lds	r24, 0x00BC
    20d6:	87 ff       	sbrs	r24, 7
    20d8:	fc cf       	rjmp	.-8      	; 0x20d2 <i2c_readAck+0x6>

    return TWDR;
    20da:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    20de:	08 95       	ret

000020e0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    20e0:	84 e8       	ldi	r24, 0x84	; 132
    20e2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    20e6:	80 91 bc 00 	lds	r24, 0x00BC
    20ea:	87 ff       	sbrs	r24, 7
    20ec:	fc cf       	rjmp	.-8      	; 0x20e6 <i2c_readNak+0x6>
	
    return TWDR;
    20ee:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    20f2:	08 95       	ret

000020f4 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    20f4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    20f8:	80 e1       	ldi	r24, 0x10	; 16
    20fa:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    20fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	82 60       	ori	r24, 0x02	; 2
    2106:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2108:	e1 ec       	ldi	r30, 0xC1	; 193
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	88 69       	ori	r24, 0x98	; 152
    2110:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2112:	e2 ec       	ldi	r30, 0xC2	; 194
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	86 60       	ori	r24, 0x06	; 6
    211a:	80 83       	st	Z, r24

}
    211c:	08 95       	ret

0000211e <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    211e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2122:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2126:	10 92 c2 00 	sts	0x00C2, r1

}
    212a:	08 95       	ret

0000212c <usartTransmit>:

void usartTransmit(unsigned char data) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    212c:	90 91 c0 00 	lds	r25, 0x00C0
    2130:	95 ff       	sbrs	r25, 5
    2132:	fc cf       	rjmp	.-8      	; 0x212c <usartTransmit>
	UDR0 = data;						// put data into buffer, sends the data
    2134:	80 93 c6 00 	sts	0x00C6, r24

}
    2138:	08 95       	ret

0000213a <__vector_25>:
// for options 0,1,2 there are the commands "+" and "-" that increase or decrease the luminosity of the leds
// for options 3,4 there are the commmands "+", "-" and "s" to increase, decrease and reset to zero the speed respectively
// for options 5 there is the command "s" that stop the sending of the adc values
// if a key is pressed that do not correspond to any commands for that option, then the initial menu is entered.

ISR(USART0_RX_vect) {
    213a:	1f 92       	push	r1
    213c:	0f 92       	push	r0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	0f 92       	push	r0
    2142:	11 24       	eor	r1, r1
    2144:	2f 93       	push	r18
    2146:	8f 93       	push	r24
    2148:	9f 93       	push	r25

	char receivedByte = UDR0;
    214a:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {						// menu
    214e:	90 91 10 02 	lds	r25, 0x0210
    2152:	99 23       	and	r25, r25
    2154:	b9 f0       	breq	.+46     	; 0x2184 <__vector_25+0x4a>
		switch(receivedByte) {
    2156:	82 33       	cpi	r24, 0x32	; 50
    2158:	09 f4       	brne	.+2      	; 0x215c <__vector_25+0x22>
    215a:	5b c0       	rjmp	.+182    	; 0x2212 <__stack+0x13>
    215c:	83 33       	cpi	r24, 0x33	; 51
    215e:	80 f5       	brcc	.+96     	; 0x21c0 <__vector_25+0x86>
    2160:	80 33       	cpi	r24, 0x30	; 48
    2162:	09 f4       	brne	.+2      	; 0x2166 <__vector_25+0x2c>
    2164:	7e c0       	rjmp	.+252    	; 0x2262 <__stack+0x63>
    2166:	81 33       	cpi	r24, 0x31	; 49
    2168:	29 f4       	brne	.+10     	; 0x2174 <__vector_25+0x3a>
			case '0': 							// red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': 							// green led
				peripheralChoice = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2170:	10 92 10 02 	sts	0x0210, r1

	}



}
    2174:	9f 91       	pop	r25
    2176:	8f 91       	pop	r24
    2178:	2f 91       	pop	r18
    217a:	0f 90       	pop	r0
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	0f 90       	pop	r0
    2180:	1f 90       	pop	r1
    2182:	18 95       	reti

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    2184:	90 91 0f 02 	lds	r25, 0x020F
    2188:	92 30       	cpi	r25, 0x02	; 2
    218a:	09 f4       	brne	.+2      	; 0x218e <__vector_25+0x54>
    218c:	48 c0       	rjmp	.+144    	; 0x221e <__stack+0x1f>
    218e:	93 30       	cpi	r25, 0x03	; 3
    2190:	40 f1       	brcs	.+80     	; 0x21e2 <__vector_25+0xa8>
    2192:	94 30       	cpi	r25, 0x04	; 4
    2194:	09 f4       	brne	.+2      	; 0x2198 <__vector_25+0x5e>
    2196:	8c c0       	rjmp	.+280    	; 0x22b0 <__stack+0xb1>
    2198:	94 30       	cpi	r25, 0x04	; 4
    219a:	08 f4       	brcc	.+2      	; 0x219e <__vector_25+0x64>
    219c:	73 c0       	rjmp	.+230    	; 0x2284 <__stack+0x85>
    219e:	95 30       	cpi	r25, 0x05	; 5
    21a0:	49 f7       	brne	.-46     	; 0x2174 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: 								// adc
				if(receivedByte == 's') {
    21a2:	83 37       	cpi	r24, 0x73	; 115
    21a4:	39 f7       	brne	.-50     	; 0x2174 <__vector_25+0x3a>
					sendAdcValues = 0;
    21a6:	10 92 04 04 	sts	0x0404, r1
					choosePeripheral = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 10 02 	sts	0x0210, r24

	}



}
    21b0:	9f 91       	pop	r25
    21b2:	8f 91       	pop	r24
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
    21c0:	84 33       	cpi	r24, 0x34	; 52
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <__vector_25+0x8c>
    21c4:	59 c0       	rjmp	.+178    	; 0x2278 <__stack+0x79>
    21c6:	84 33       	cpi	r24, 0x34	; 52
    21c8:	08 f4       	brcc	.+2      	; 0x21cc <__vector_25+0x92>
    21ca:	50 c0       	rjmp	.+160    	; 0x226c <__stack+0x6d>
    21cc:	85 33       	cpi	r24, 0x35	; 53
    21ce:	91 f6       	brne	.-92     	; 0x2174 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':							// send adc values
				peripheralChoice = 5;
    21d0:	85 e0       	ldi	r24, 0x05	; 5
    21d2:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    21d6:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	80 93 04 04 	sts	0x0404, r24
				break;
    21e0:	c9 cf       	rjmp	.-110    	; 0x2174 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    21e2:	99 23       	and	r25, r25
    21e4:	91 f5       	brne	.+100    	; 0x224a <__stack+0x4b>
			case 0:								// red led
				if(receivedByte == '-') {
    21e6:	8d 32       	cpi	r24, 0x2D	; 45
    21e8:	09 f4       	brne	.+2      	; 0x21ec <__vector_25+0xb2>
    21ea:	d5 c0       	rjmp	.+426    	; 0x2396 <__stack+0x197>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    21ec:	8b 32       	cpi	r24, 0x2B	; 43
    21ee:	e9 f6       	brne	.-70     	; 0x21aa <__vector_25+0x70>
					current_pwm = pwm_red-10;
    21f0:	80 91 0c 02 	lds	r24, 0x020C
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    21f8:	97 fd       	sbrc	r25, 7
    21fa:	3f c1       	rjmp	.+638    	; 0x247a <__stack+0x27b>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    21fc:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    2200:	88 23       	and	r24, r24
    2202:	09 f4       	brne	.+2      	; 0x2206 <__stack+0x7>
    2204:	3c c1       	rjmp	.+632    	; 0x247e <__stack+0x27f>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	90 93 89 00 	sts	0x0089, r25
    220c:	80 93 88 00 	sts	0x0088, r24
    2210:	b1 cf       	rjmp	.-158    	; 0x2174 <__vector_25+0x3a>
			case '1': 							// green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': 							// blue led
				peripheralChoice = 2;
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2218:	10 92 10 02 	sts	0x0210, r1
				break;
    221c:	ab cf       	rjmp	.-170    	; 0x2174 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
    221e:	8d 32       	cpi	r24, 0x2D	; 45
    2220:	09 f4       	brne	.+2      	; 0x2224 <__stack+0x25>
    2222:	e8 c0       	rjmp	.+464    	; 0x23f4 <__stack+0x1f5>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2224:	8b 32       	cpi	r24, 0x2B	; 43
    2226:	09 f6       	brne	.-126    	; 0x21aa <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2228:	80 91 0e 02 	lds	r24, 0x020E
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2230:	97 fd       	sbrc	r25, 7
    2232:	35 c1       	rjmp	.+618    	; 0x249e <__stack+0x29f>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2234:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    2238:	88 23       	and	r24, r24
    223a:	09 f4       	brne	.+2      	; 0x223e <__stack+0x3f>
    223c:	32 c1       	rjmp	.+612    	; 0x24a2 <__stack+0x2a3>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	90 93 8d 00 	sts	0x008D, r25
    2244:	80 93 8c 00 	sts	0x008C, r24
    2248:	95 cf       	rjmp	.-214    	; 0x2174 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    224a:	91 30       	cpi	r25, 0x01	; 1
    224c:	09 f0       	breq	.+2      	; 0x2250 <__stack+0x51>
    224e:	92 cf       	rjmp	.-220    	; 0x2174 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
    2250:	8d 32       	cpi	r24, 0x2D	; 45
    2252:	09 f4       	brne	.+2      	; 0x2256 <__stack+0x57>
    2254:	89 c0       	rjmp	.+274    	; 0x2368 <__stack+0x169>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2256:	8b 32       	cpi	r24, 0x2B	; 43
    2258:	09 f4       	brne	.+2      	; 0x225c <__stack+0x5d>
    225a:	3f c0       	rjmp	.+126    	; 0x22da <__stack+0xdb>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    225c:	90 93 10 02 	sts	0x0210, r25
    2260:	89 cf       	rjmp	.-238    	; 0x2174 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
			case '0': 							// red led
				peripheralChoice = 0;
    2262:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    2266:	10 92 10 02 	sts	0x0210, r1
				break;
    226a:	84 cf       	rjmp	.-248    	; 0x2174 <__vector_25+0x3a>
			case '2': 							// blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': 							// right motor
				peripheralChoice = 3;
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2272:	10 92 10 02 	sts	0x0210, r1
				break;
    2276:	7e cf       	rjmp	.-260    	; 0x2174 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
    2278:	84 e0       	ldi	r24, 0x04	; 4
    227a:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    227e:	10 92 10 02 	sts	0x0210, r1
				break;
    2282:	78 cf       	rjmp	.-272    	; 0x2174 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
    2284:	8b 32       	cpi	r24, 0x2B	; 43
    2286:	09 f4       	brne	.+2      	; 0x228a <__stack+0x8b>
    2288:	cc c0       	rjmp	.+408    	; 0x2422 <__stack+0x223>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    228a:	8d 32       	cpi	r24, 0x2D	; 45
    228c:	09 f4       	brne	.+2      	; 0x2290 <__stack+0x91>
    228e:	51 c0       	rjmp	.+162    	; 0x2332 <__stack+0x133>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2290:	83 37       	cpi	r24, 0x73	; 115
    2292:	09 f0       	breq	.+2      	; 0x2296 <__stack+0x97>
    2294:	8a cf       	rjmp	.-236    	; 0x21aa <__vector_25+0x70>
					pwm_right = 0;
    2296:	10 92 ec 03 	sts	0x03EC, r1
    229a:	10 92 eb 03 	sts	0x03EB, r1
					OCR3A = 0;
    229e:	10 92 99 00 	sts	0x0099, r1
    22a2:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    22a6:	10 92 9b 00 	sts	0x009B, r1
    22aa:	10 92 9a 00 	sts	0x009A, r1
    22ae:	62 cf       	rjmp	.-316    	; 0x2174 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
    22b0:	8b 32       	cpi	r24, 0x2B	; 43
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__stack+0xb7>
    22b4:	87 c0       	rjmp	.+270    	; 0x23c4 <__stack+0x1c5>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    22b6:	8d 32       	cpi	r24, 0x2D	; 45
    22b8:	09 f1       	breq	.+66     	; 0x22fc <__stack+0xfd>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    22ba:	83 37       	cpi	r24, 0x73	; 115
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <__stack+0xc1>
    22be:	75 cf       	rjmp	.-278    	; 0x21aa <__vector_25+0x70>
					pwm_left = 0;
    22c0:	10 92 ee 03 	sts	0x03EE, r1
    22c4:	10 92 ed 03 	sts	0x03ED, r1
					OCR4A = 0;
    22c8:	10 92 a9 00 	sts	0x00A9, r1
    22cc:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    22d0:	10 92 ab 00 	sts	0x00AB, r1
    22d4:	10 92 aa 00 	sts	0x00AA, r1
    22d8:	4d cf       	rjmp	.-358    	; 0x2174 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    22da:	80 91 0d 02 	lds	r24, 0x020D
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    22e2:	97 fd       	sbrc	r25, 7
    22e4:	d3 c0       	rjmp	.+422    	; 0x248c <__stack+0x28d>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    22e6:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    22ea:	88 23       	and	r24, r24
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <__stack+0xf1>
    22ee:	d0 c0       	rjmp	.+416    	; 0x2490 <__stack+0x291>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	90 93 8b 00 	sts	0x008B, r25
    22f6:	80 93 8a 00 	sts	0x008A, r24
    22fa:	3c cf       	rjmp	.-392    	; 0x2174 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    22fc:	80 91 ed 03 	lds	r24, 0x03ED
    2300:	90 91 ee 03 	lds	r25, 0x03EE
    2304:	4e 97       	sbiw	r24, 0x1e	; 30
    2306:	90 93 ee 03 	sts	0x03EE, r25
    230a:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    230e:	2c ef       	ldi	r18, 0xFC	; 252
    2310:	80 30       	cpi	r24, 0x00	; 0
    2312:	92 07       	cpc	r25, r18
    2314:	0c f0       	brlt	.+2      	; 0x2318 <__stack+0x119>
    2316:	cc c0       	rjmp	.+408    	; 0x24b0 <__stack+0x2b1>
						pwm_left = -MAX_MOTORS_PWM;
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	9c ef       	ldi	r25, 0xFC	; 252
    231c:	90 93 ee 03 	sts	0x03EE, r25
    2320:	80 93 ed 03 	sts	0x03ED, r24
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2328:	90 93 ab 00 	sts	0x00AB, r25
    232c:	80 93 aa 00 	sts	0x00AA, r24
    2330:	21 cf       	rjmp	.-446    	; 0x2174 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2332:	80 91 eb 03 	lds	r24, 0x03EB
    2336:	90 91 ec 03 	lds	r25, 0x03EC
    233a:	4e 97       	sbiw	r24, 0x1e	; 30
    233c:	90 93 ec 03 	sts	0x03EC, r25
    2340:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2344:	2c ef       	ldi	r18, 0xFC	; 252
    2346:	80 30       	cpi	r24, 0x00	; 0
    2348:	92 07       	cpc	r25, r18
    234a:	0c f0       	brlt	.+2      	; 0x234e <__stack+0x14f>
    234c:	b7 c0       	rjmp	.+366    	; 0x24bc <__stack+0x2bd>
						pwm_right = -MAX_MOTORS_PWM;
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	9c ef       	ldi	r25, 0xFC	; 252
    2352:	90 93 ec 03 	sts	0x03EC, r25
    2356:	80 93 eb 03 	sts	0x03EB, r24
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    235e:	90 93 9b 00 	sts	0x009B, r25
    2362:	80 93 9a 00 	sts	0x009A, r24
    2366:	06 cf       	rjmp	.-500    	; 0x2174 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2368:	80 91 80 00 	lds	r24, 0x0080
    236c:	80 62       	ori	r24, 0x20	; 32
    236e:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2372:	80 91 0d 02 	lds	r24, 0x020D
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    237a:	8f 3f       	cpi	r24, 0xFF	; 255
    237c:	91 05       	cpc	r25, r1
    237e:	19 f0       	breq	.+6      	; 0x2386 <__stack+0x187>
    2380:	14 f0       	brlt	.+4      	; 0x2386 <__stack+0x187>
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	90 93 8b 00 	sts	0x008B, r25
    2390:	80 93 8a 00 	sts	0x008A, r24
    2394:	ef ce       	rjmp	.-546    	; 0x2174 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:								// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2396:	80 91 80 00 	lds	r24, 0x0080
    239a:	80 68       	ori	r24, 0x80	; 128
    239c:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    23a0:	80 91 0c 02 	lds	r24, 0x020C
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    23a8:	8f 3f       	cpi	r24, 0xFF	; 255
    23aa:	91 05       	cpc	r25, r1
    23ac:	19 f0       	breq	.+6      	; 0x23b4 <__stack+0x1b5>
    23ae:	14 f0       	brlt	.+4      	; 0x23b4 <__stack+0x1b5>
    23b0:	8f ef       	ldi	r24, 0xFF	; 255
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	90 93 89 00 	sts	0x0089, r25
    23be:	80 93 88 00 	sts	0x0088, r24
    23c2:	d8 ce       	rjmp	.-592    	; 0x2174 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    23c4:	80 91 ed 03 	lds	r24, 0x03ED
    23c8:	90 91 ee 03 	lds	r25, 0x03EE
    23cc:	4e 96       	adiw	r24, 0x1e	; 30
    23ce:	90 93 ee 03 	sts	0x03EE, r25
    23d2:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    23d6:	24 e0       	ldi	r18, 0x04	; 4
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	92 07       	cpc	r25, r18
    23dc:	d4 f1       	brlt	.+116    	; 0x2452 <__stack+0x253>
						pwm_left = MAX_MOTORS_PWM;
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	94 e0       	ldi	r25, 0x04	; 4
    23e2:	90 93 ee 03 	sts	0x03EE, r25
    23e6:	80 93 ed 03 	sts	0x03ED, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    23ea:	90 93 a9 00 	sts	0x00A9, r25
    23ee:	80 93 a8 00 	sts	0x00A8, r24
    23f2:	c0 ce       	rjmp	.-640    	; 0x2174 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    23f4:	80 91 80 00 	lds	r24, 0x0080
    23f8:	88 60       	ori	r24, 0x08	; 8
    23fa:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    23fe:	80 91 0e 02 	lds	r24, 0x020E
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2406:	8f 3f       	cpi	r24, 0xFF	; 255
    2408:	91 05       	cpc	r25, r1
    240a:	19 f0       	breq	.+6      	; 0x2412 <__stack+0x213>
    240c:	14 f0       	brlt	.+4      	; 0x2412 <__stack+0x213>
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	90 93 8d 00 	sts	0x008D, r25
    241c:	80 93 8c 00 	sts	0x008C, r24
    2420:	a9 ce       	rjmp	.-686    	; 0x2174 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2422:	80 91 eb 03 	lds	r24, 0x03EB
    2426:	90 91 ec 03 	lds	r25, 0x03EC
    242a:	4e 96       	adiw	r24, 0x1e	; 30
    242c:	90 93 ec 03 	sts	0x03EC, r25
    2430:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    2434:	24 e0       	ldi	r18, 0x04	; 4
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	92 07       	cpc	r25, r18
    243a:	ac f0       	brlt	.+42     	; 0x2466 <__stack+0x267>
						pwm_right = MAX_MOTORS_PWM;
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	94 e0       	ldi	r25, 0x04	; 4
    2440:	90 93 ec 03 	sts	0x03EC, r25
    2444:	80 93 eb 03 	sts	0x03EB, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    2448:	90 93 99 00 	sts	0x0099, r25
    244c:	80 93 98 00 	sts	0x0098, r24
    2450:	91 ce       	rjmp	.-734    	; 0x2174 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2452:	97 ff       	sbrs	r25, 7
    2454:	ca cf       	rjmp	.-108    	; 0x23ea <__stack+0x1eb>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2456:	90 95       	com	r25
    2458:	81 95       	neg	r24
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	90 93 ab 00 	sts	0x00AB, r25
    2460:	80 93 aa 00 	sts	0x00AA, r24
    2464:	87 ce       	rjmp	.-754    	; 0x2174 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2466:	97 ff       	sbrs	r25, 7
    2468:	ef cf       	rjmp	.-34     	; 0x2448 <__stack+0x249>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    246a:	90 95       	com	r25
    246c:	81 95       	neg	r24
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	90 93 9b 00 	sts	0x009B, r25
    2474:	80 93 9a 00 	sts	0x009A, r24
    2478:	7d ce       	rjmp	.-774    	; 0x2174 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    247a:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    247e:	80 91 80 00 	lds	r24, 0x0080
    2482:	8f 77       	andi	r24, 0x7F	; 127
    2484:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    2488:	2d 98       	cbi	0x05, 5	; 5
    248a:	74 ce       	rjmp	.-792    	; 0x2174 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    248c:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2490:	80 91 80 00 	lds	r24, 0x0080
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    249a:	2e 98       	cbi	0x05, 6	; 5
    249c:	6b ce       	rjmp	.-810    	; 0x2174 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    249e:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    24a2:	80 91 80 00 	lds	r24, 0x0080
    24a6:	87 7f       	andi	r24, 0xF7	; 247
    24a8:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    24ac:	2f 98       	cbi	0x05, 7	; 5
    24ae:	62 ce       	rjmp	.-828    	; 0x2174 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    24b0:	97 ff       	sbrs	r25, 7
    24b2:	9b cf       	rjmp	.-202    	; 0x23ea <__stack+0x1eb>
						OCR4A = pwm_left;
    24b4:	90 95       	com	r25
    24b6:	81 95       	neg	r24
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	36 cf       	rjmp	.-404    	; 0x2328 <__stack+0x129>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    24bc:	97 ff       	sbrs	r25, 7
    24be:	c4 cf       	rjmp	.-120    	; 0x2448 <__stack+0x249>
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    24c0:	90 95       	com	r25
    24c2:	81 95       	neg	r24
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	4b cf       	rjmp	.-362    	; 0x235e <__stack+0x15f>

000024c8 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    24c8:	86 b1       	in	r24, 0x06	; 6
    24ca:	66 b1       	in	r22, 0x06	; 6
    24cc:	26 b1       	in	r18, 0x06	; 6
    24ce:	46 b1       	in	r20, 0x06	; 6
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	28 70       	andi	r18, 0x08	; 8
    24d4:	30 70       	andi	r19, 0x00	; 0
    24d6:	35 95       	asr	r19
    24d8:	27 95       	ror	r18
    24da:	35 95       	asr	r19
    24dc:	27 95       	ror	r18
    24de:	35 95       	asr	r19
    24e0:	27 95       	ror	r18
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	64 70       	andi	r22, 0x04	; 4
    24ea:	70 70       	andi	r23, 0x00	; 0
    24ec:	75 95       	asr	r23
    24ee:	67 95       	ror	r22
    24f0:	75 95       	asr	r23
    24f2:	67 95       	ror	r22
    24f4:	26 0f       	add	r18, r22
    24f6:	37 1f       	adc	r19, r23
    24f8:	22 0f       	add	r18, r18
    24fa:	33 1f       	adc	r19, r19
    24fc:	50 e0       	ldi	r21, 0x00	; 0
    24fe:	42 70       	andi	r20, 0x02	; 2
    2500:	50 70       	andi	r21, 0x00	; 0
    2502:	55 95       	asr	r21
    2504:	47 95       	ror	r20
    2506:	24 0f       	add	r18, r20
    2508:	35 1f       	adc	r19, r21
    250a:	22 0f       	add	r18, r18
    250c:	81 70       	andi	r24, 0x01	; 1
}
    250e:	82 0f       	add	r24, r18
    2510:	08 95       	ret

00002512 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2512:	f8 94       	cli

	initPortsIO();
    2514:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <initPortsIO>
	initAdc();
    2518:	0e 94 26 13 	call	0x264c	; 0x264c <initAdc>
	initMotors();
    251c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <initMotors>
	initRGBleds();
    2520:	0e 94 84 19 	call	0x3308	; 0x3308 <initRGBleds>
	initSPI();
    2524:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initSPI>
	mirf_init();
    2528:	0e 94 b5 03 	call	0x76a	; 0x76a <mirf_init>
	initUsart();
    252c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <initUsart>
	initAccelerometer();
    2530:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <initAccelerometer>
	init_ir_remote_control();
    2534:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <init_ir_remote_control>

	sei();			// enable global interrupts
    2538:	78 94       	sei

	
}
    253a:	08 95       	ret

0000253c <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    253c:	1f 92       	push	r1
    253e:	0f 92       	push	r0
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	0f 92       	push	r0
    2544:	11 24       	eor	r1, r1

}
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti

00002550 <sleep>:

void sleep(unsigned char seconds) {
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2554:	9e e1       	ldi	r25, 0x1E	; 30
    2556:	89 9f       	mul	r24, r25
    2558:	e0 01       	movw	r28, r0
    255a:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    255c:	80 91 68 00 	lds	r24, 0x0068
    2560:	8d 7f       	andi	r24, 0xFD	; 253
    2562:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2566:	80 91 6c 00 	lds	r24, 0x006C
    256a:	8f 77       	andi	r24, 0x7F	; 127
    256c:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2570:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2572:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2576:	80 91 7a 00 	lds	r24, 0x007A
    257a:	80 61       	ori	r24, 0x10	; 16
    257c:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2580:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2584:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2588:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    258c:	88 b3       	in	r24, 0x18	; 24
    258e:	87 60       	ori	r24, 0x07	; 7
    2590:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2592:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2596:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    259a:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    259e:	89 b3       	in	r24, 0x19	; 25
    25a0:	87 60       	ori	r24, 0x07	; 7
    25a2:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    25a4:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    25a8:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    25ac:	0e 94 8f 10 	call	0x211e	; 0x211e <closeUsart>
	closeSPI();
    25b0:	0e 94 0b 03 	call	0x616	; 0x616 <closeSPI>
	i2c_close();
    25b4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2c_close>

	// set port pins
	initPortsIO();
    25b8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    25bc:	83 b7       	in	r24, 0x33	; 51
    25be:	8f 60       	ori	r24, 0x0F	; 15
    25c0:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    25c8:	80 91 b0 00 	lds	r24, 0x00B0
    25cc:	8d 7f       	andi	r24, 0xFD	; 253
    25ce:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    25d2:	80 91 b1 00 	lds	r24, 0x00B1
    25d6:	87 60       	ori	r24, 0x07	; 7
    25d8:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    25dc:	20 97       	sbiw	r28, 0x00	; 0
    25de:	19 f0       	breq	.+6      	; 0x25e6 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    25e0:	88 95       	sleep
		pause--;
    25e2:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    25e4:	e9 f7       	brne	.-6      	; 0x25e0 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    25e6:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    25e8:	80 91 b1 00 	lds	r24, 0x00B1
    25ec:	88 7f       	andi	r24, 0xF8	; 248
    25ee:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    25f2:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    25f6:	80 91 b0 00 	lds	r24, 0x00B0
    25fa:	82 60       	ori	r24, 0x02	; 2
    25fc:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2600:	8f ef       	ldi	r24, 0xFF	; 255
    2602:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2606:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    260a:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    260e:	10 92 ec 03 	sts	0x03EC, r1
    2612:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    2616:	10 92 ee 03 	sts	0x03EE, r1
    261a:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    261e:	f8 94       	cli

	initPortsIO();
    2620:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <initPortsIO>
	initAdc();
    2624:	0e 94 26 13 	call	0x264c	; 0x264c <initAdc>
	initMotors();
    2628:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <initMotors>
	initRGBleds();
    262c:	0e 94 84 19 	call	0x3308	; 0x3308 <initRGBleds>
	initSPI();
    2630:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initSPI>
	mirf_init();
    2634:	0e 94 b5 03 	call	0x76a	; 0x76a <mirf_init>
	initUsart();
    2638:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <initUsart>
	initAccelerometer();
    263c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <initAccelerometer>
	init_ir_remote_control();
    2640:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <init_ir_remote_control>

	sei();			// enable global interrupts
    2644:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	08 95       	ret

0000264c <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    264c:	ea e7       	ldi	r30, 0x7A	; 122
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	86 60       	ori	r24, 0x06	; 6
    2654:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    2656:	ac e7       	ldi	r26, 0x7C	; 124
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	8c 91       	ld	r24, X
    265c:	80 64       	ori	r24, 0x40	; 64
    265e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2660:	80 81       	ld	r24, Z
    2662:	80 62       	ori	r24, 0x20	; 32
    2664:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2666:	ab e7       	ldi	r26, 0x7B	; 123
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	8c 91       	ld	r24, X
    266c:	88 7f       	andi	r24, 0xF8	; 248
    266e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2670:	80 81       	ld	r24, Z
    2672:	88 60       	ori	r24, 0x08	; 8
    2674:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2676:	80 81       	ld	r24, Z
    2678:	80 68       	ori	r24, 0x80	; 128
    267a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    267c:	80 81       	ld	r24, Z
    267e:	80 64       	ori	r24, 0x40	; 64
    2680:	80 83       	st	Z, r24

}
    2682:	08 95       	ret

00002684 <__vector_29>:

ISR(ADC_vect) {
    2684:	1f 92       	push	r1
    2686:	0f 92       	push	r0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	0f 92       	push	r0
    268c:	0b b6       	in	r0, 0x3b	; 59
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	2f 93       	push	r18
    2694:	3f 93       	push	r19
    2696:	4f 93       	push	r20
    2698:	5f 93       	push	r21
    269a:	6f 93       	push	r22
    269c:	8f 93       	push	r24
    269e:	9f 93       	push	r25
    26a0:	ef 93       	push	r30
    26a2:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    26a4:	80 91 1f 04 	lds	r24, 0x041F
    26a8:	90 91 20 04 	lds	r25, 0x0420
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	90 93 20 04 	sts	0x0420, r25
    26b2:	80 93 1f 04 	sts	0x041F, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    26b6:	20 91 78 00 	lds	r18, 0x0078
    26ba:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    26bc:	40 91 79 00 	lds	r20, 0x0079
    26c0:	94 2f       	mov	r25, r20
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	28 2b       	or	r18, r24
    26c6:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    26c8:	80 91 bf 03 	lds	r24, 0x03BF
    26cc:	82 30       	cpi	r24, 0x02	; 2
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <__vector_29+0x4e>
    26d0:	8e c1       	rjmp	.+796    	; 0x29ee <__vector_29+0x36a>
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <__vector_29+0x54>
    26d6:	46 c0       	rjmp	.+140    	; 0x2764 <__vector_29+0xe0>
    26d8:	83 30       	cpi	r24, 0x03	; 3
    26da:	09 f4       	brne	.+2      	; 0x26de <__vector_29+0x5a>
    26dc:	ab c1       	rjmp	.+854    	; 0x2a34 <__vector_29+0x3b0>
    26de:	84 30       	cpi	r24, 0x04	; 4
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <__vector_29+0x60>
    26e2:	4a c1       	rjmp	.+660    	; 0x2978 <__vector_29+0x2f4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    26e4:	80 91 c0 03 	lds	r24, 0x03C0
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	09 f4       	brne	.+2      	; 0x26ee <__vector_29+0x6a>
    26ec:	31 c1       	rjmp	.+610    	; 0x2950 <__vector_29+0x2cc>
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	08 f0       	brcs	.+2      	; 0x26f4 <__vector_29+0x70>
    26f2:	ce c0       	rjmp	.+412    	; 0x2890 <__vector_29+0x20c>
    26f4:	88 23       	and	r24, r24
    26f6:	09 f0       	breq	.+2      	; 0x26fa <__vector_29+0x76>
    26f8:	06 c1       	rjmp	.+524    	; 0x2906 <__vector_29+0x282>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    26fa:	80 91 2a 03 	lds	r24, 0x032A
    26fe:	86 95       	lsr	r24
    2700:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2704:	80 91 c1 03 	lds	r24, 0x03C1
    2708:	88 23       	and	r24, r24
    270a:	09 f0       	breq	.+2      	; 0x270e <__vector_29+0x8a>
    270c:	bf c1       	rjmp	.+894    	; 0x2a8c <__vector_29+0x408>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    271a:	90 91 29 03 	lds	r25, 0x0329
    271e:	98 30       	cpi	r25, 0x08	; 8
    2720:	08 f0       	brcs	.+2      	; 0x2724 <__vector_29+0xa0>
    2722:	e6 c0       	rjmp	.+460    	; 0x28f0 <__vector_29+0x26c>
		ADCSRB &= ~(1 << MUX5);
    2724:	90 91 7b 00 	lds	r25, 0x007B
    2728:	97 7f       	andi	r25, 0xF7	; 247
    272a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    272e:	90 91 29 03 	lds	r25, 0x0329
    2732:	90 5c       	subi	r25, 0xC0	; 192
    2734:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	21 f4       	brne	.+8      	; 0x2744 <__vector_29+0xc0>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0)"
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
    273c:	8f ef       	ldi	r24, 0xFF	; 255
    273e:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    2742:	12 b8       	out	0x02, r1	; 2

	}

	//LED_BLUE_OFF;

}
    2744:	ff 91       	pop	r31
    2746:	ef 91       	pop	r30
    2748:	9f 91       	pop	r25
    274a:	8f 91       	pop	r24
    274c:	6f 91       	pop	r22
    274e:	5f 91       	pop	r21
    2750:	4f 91       	pop	r20
    2752:	3f 91       	pop	r19
    2754:	2f 91       	pop	r18
    2756:	0f 90       	pop	r0
    2758:	0b be       	out	0x3b, r0	; 59
    275a:	0f 90       	pop	r0
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	0f 90       	pop	r0
    2760:	1f 90       	pop	r1
    2762:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2764:	88 23       	and	r24, r24
    2766:	09 f0       	breq	.+2      	; 0x276a <__vector_29+0xe6>
    2768:	df c0       	rjmp	.+446    	; 0x2928 <__vector_29+0x2a4>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    276a:	60 91 2a 03 	lds	r22, 0x032A
    276e:	6e 30       	cpi	r22, 0x0E	; 14
    2770:	09 f4       	brne	.+2      	; 0x2774 <__vector_29+0xf0>
    2772:	a1 c1       	rjmp	.+834    	; 0x2ab6 <__vector_29+0x432>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2774:	46 2f       	mov	r20, r22
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	fa 01       	movw	r30, r20
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	e1 5d       	subi	r30, 0xD1	; 209
    2780:	fc 4f       	sbci	r31, 0xFC	; 252
    2782:	31 83       	std	Z+1, r19	; 0x01
    2784:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2786:	40 ff       	sbrs	r20, 0
    2788:	77 c0       	rjmp	.+238    	; 0x2878 <__vector_29+0x1f4>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    278a:	fa 01       	movw	r30, r20
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	e3 5d       	subi	r30, 0xD3	; 211
    2792:	fc 4f       	sbci	r31, 0xFC	; 252
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	fa 01       	movw	r30, r20
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	e1 5d       	subi	r30, 0xD1	; 209
    27a0:	fc 4f       	sbci	r31, 0xFC	; 252
    27a2:	40 81       	ld	r20, Z
    27a4:	51 81       	ldd	r21, Z+1	; 0x01
    27a6:	26 2f       	mov	r18, r22
    27a8:	26 95       	lsr	r18
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	84 1b       	sub	r24, r20
    27ae:	95 0b       	sbc	r25, r21
    27b0:	22 0f       	add	r18, r18
    27b2:	33 1f       	adc	r19, r19
    27b4:	f9 01       	movw	r30, r18
    27b6:	e9 58       	subi	r30, 0x89	; 137
    27b8:	fc 4f       	sbci	r31, 0xFC	; 252
    27ba:	40 81       	ld	r20, Z
    27bc:	51 81       	ldd	r21, Z+1	; 0x01
    27be:	84 1b       	sub	r24, r20
    27c0:	95 0b       	sbc	r25, r21
    27c2:	f9 01       	movw	r30, r18
    27c4:	e1 5a       	subi	r30, 0xA1	; 161
    27c6:	fc 4f       	sbci	r31, 0xFC	; 252
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    27cc:	97 fd       	sbrc	r25, 7
    27ce:	8e c1       	rjmp	.+796    	; 0x2aec <__vector_29+0x468>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    27d0:	44 e0       	ldi	r20, 0x04	; 4
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	94 07       	cpc	r25, r20
    27d6:	24 f0       	brlt	.+8      	; 0x27e0 <__vector_29+0x15c>
					proximityResult[currentProx>>1] = 1024;
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	94 e0       	ldi	r25, 0x04	; 4
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    27e0:	60 31       	cpi	r22, 0x10	; 16
    27e2:	48 f4       	brcc	.+18     	; 0x27f6 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    27e4:	8c 33       	cpi	r24, 0x3C	; 60
    27e6:	91 05       	cpc	r25, r1
    27e8:	0c f0       	brlt	.+2      	; 0x27ec <__vector_29+0x168>
    27ea:	85 c1       	rjmp	.+778    	; 0x2af6 <__vector_29+0x472>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    27ec:	29 53       	subi	r18, 0x39	; 57
    27ee:	3c 4f       	sbci	r19, 0xFC	; 252
    27f0:	f9 01       	movw	r30, r18
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    27f6:	80 91 25 04 	lds	r24, 0x0425
    27fa:	88 23       	and	r24, r24
    27fc:	09 f4       	brne	.+2      	; 0x2800 <__vector_29+0x17c>
    27fe:	52 c1       	rjmp	.+676    	; 0x2aa4 <__vector_29+0x420>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2800:	80 91 6f 03 	lds	r24, 0x036F
    2804:	90 91 70 03 	lds	r25, 0x0370
    2808:	f1 e0       	ldi	r31, 0x01	; 1
    280a:	84 3a       	cpi	r24, 0xA4	; 164
    280c:	9f 07       	cpc	r25, r31
    280e:	cc f0       	brlt	.+50     	; 0x2842 <__vector_29+0x1be>
    2810:	80 91 71 03 	lds	r24, 0x0371
    2814:	90 91 72 03 	lds	r25, 0x0372
    2818:	21 e0       	ldi	r18, 0x01	; 1
    281a:	84 3a       	cpi	r24, 0xA4	; 164
    281c:	92 07       	cpc	r25, r18
    281e:	8c f0       	brlt	.+34     	; 0x2842 <__vector_29+0x1be>
    2820:	80 91 73 03 	lds	r24, 0x0373
    2824:	90 91 74 03 	lds	r25, 0x0374
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	84 3a       	cpi	r24, 0xA4	; 164
    282c:	94 07       	cpc	r25, r20
    282e:	4c f0       	brlt	.+18     	; 0x2842 <__vector_29+0x1be>
    2830:	80 91 75 03 	lds	r24, 0x0375
    2834:	90 91 76 03 	lds	r25, 0x0376
    2838:	e1 e0       	ldi	r30, 0x01	; 1
    283a:	84 3a       	cpi	r24, 0xA4	; 164
    283c:	9e 07       	cpc	r25, r30
    283e:	0c f0       	brlt	.+2      	; 0x2842 <__vector_29+0x1be>
    2840:	31 c1       	rjmp	.+610    	; 0x2aa4 <__vector_29+0x420>
						cliffDetectedFlag = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 26 04 	sts	0x0426, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    2848:	10 92 ee 03 	sts	0x03EE, r1
    284c:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    2850:	10 92 a9 00 	sts	0x00A9, r1
    2854:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    2858:	10 92 ab 00 	sts	0x00AB, r1
    285c:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    2860:	10 92 ec 03 	sts	0x03EC, r1
    2864:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    2868:	10 92 99 00 	sts	0x0099, r1
    286c:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2870:	10 92 9b 00 	sts	0x009B, r1
    2874:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    2878:	6f 5f       	subi	r22, 0xFF	; 255
    287a:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    287e:	68 31       	cpi	r22, 0x18	; 24
    2880:	08 f4       	brcc	.+2      	; 0x2884 <__vector_29+0x200>
    2882:	30 cf       	rjmp	.-416    	; 0x26e4 <__vector_29+0x60>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2884:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 c6 03 	sts	0x03C6, r24
    288e:	2a cf       	rjmp	.-428    	; 0x26e4 <__vector_29+0x60>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2890:	83 30       	cpi	r24, 0x03	; 3
    2892:	09 f4       	brne	.+2      	; 0x2896 <__vector_29+0x212>
    2894:	98 c0       	rjmp	.+304    	; 0x29c6 <__vector_29+0x342>
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	09 f0       	breq	.+2      	; 0x289c <__vector_29+0x218>
    289a:	3f cf       	rjmp	.-386    	; 0x271a <__vector_29+0x96>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    289c:	90 91 2c 03 	lds	r25, 0x032C
    28a0:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    28a4:	90 91 2d 03 	lds	r25, 0x032D
    28a8:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    28ac:	90 91 c2 03 	lds	r25, 0x03C2
    28b0:	99 23       	and	r25, r25
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <__vector_29+0x232>
    28b4:	e5 c0       	rjmp	.+458    	; 0x2a80 <__vector_29+0x3fc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    28bc:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    28c0:	20 91 2a 03 	lds	r18, 0x032A
    28c4:	2e 30       	cpi	r18, 0x0E	; 14
    28c6:	09 f4       	brne	.+2      	; 0x28ca <__vector_29+0x246>
    28c8:	f0 c0       	rjmp	.+480    	; 0x2aaa <__vector_29+0x426>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    28ca:	82 2f       	mov	r24, r18
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	20 ff       	sbrs	r18, 0
    28d0:	ce c0       	rjmp	.+412    	; 0x2a6e <__vector_29+0x3ea>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    28d2:	20 31       	cpi	r18, 0x10	; 16
    28d4:	08 f0       	brcs	.+2      	; 0x28d8 <__vector_29+0x254>
    28d6:	bb c0       	rjmp	.+374    	; 0x2a4e <__vector_29+0x3ca>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    28d8:	26 95       	lsr	r18
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <__vector_29+0x260>
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	2a 95       	dec	r18
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <__vector_29+0x25c>
    28e8:	82 b9       	out	0x02, r24	; 2
    28ea:	80 91 c0 03 	lds	r24, 0x03C0
    28ee:	15 cf       	rjmp	.-470    	; 0x271a <__vector_29+0x96>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    28f0:	90 91 7b 00 	lds	r25, 0x007B
    28f4:	98 60       	ori	r25, 0x08	; 8
    28f6:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    28fa:	90 91 29 03 	lds	r25, 0x0329
    28fe:	98 5c       	subi	r25, 0xC8	; 200
    2900:	90 93 7c 00 	sts	0x007C, r25
    2904:	19 cf       	rjmp	.-462    	; 0x2738 <__vector_29+0xb4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2906:	81 30       	cpi	r24, 0x01	; 1
    2908:	09 f0       	breq	.+2      	; 0x290c <__vector_29+0x288>
    290a:	07 cf       	rjmp	.-498    	; 0x271a <__vector_29+0x96>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    290c:	80 91 2b 03 	lds	r24, 0x032B
    2910:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2914:	80 91 2e 03 	lds	r24, 0x032E
    2918:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    291c:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2926:	f9 ce       	rjmp	.-526    	; 0x271a <__vector_29+0x96>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	09 f0       	breq	.+2      	; 0x292e <__vector_29+0x2aa>
    292c:	db ce       	rjmp	.-586    	; 0x26e4 <__vector_29+0x60>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    292e:	80 91 d9 03 	lds	r24, 0x03D9
    2932:	90 91 da 03 	lds	r25, 0x03DA
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    293a:	96 95       	lsr	r25
    293c:	87 95       	ror	r24
    293e:	90 93 da 03 	sts	0x03DA, r25
    2942:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2946:	80 91 c0 03 	lds	r24, 0x03C0
    294a:	82 30       	cpi	r24, 0x02	; 2
    294c:	09 f0       	breq	.+2      	; 0x2950 <__vector_29+0x2cc>
    294e:	cf ce       	rjmp	.-610    	; 0x26ee <__vector_29+0x6a>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2950:	80 91 2c 03 	lds	r24, 0x032C
    2954:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    2958:	80 91 2d 03 	lds	r24, 0x032D
    295c:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2960:	80 91 c2 03 	lds	r24, 0x03C2
    2964:	88 23       	and	r24, r24
    2966:	09 f0       	breq	.+2      	; 0x296a <__vector_29+0x2e6>
    2968:	97 c0       	rjmp	.+302    	; 0x2a98 <__vector_29+0x414>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2976:	d1 ce       	rjmp	.-606    	; 0x271a <__vector_29+0x96>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2978:	80 91 0a 02 	lds	r24, 0x020A
    297c:	88 23       	and	r24, r24
    297e:	09 f4       	brne	.+2      	; 0x2982 <__vector_29+0x2fe>
    2980:	b1 ce       	rjmp	.-670    	; 0x26e4 <__vector_29+0x60>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2982:	90 91 00 01 	lds	r25, 0x0100
    2986:	93 fd       	sbrc	r25, 3
    2988:	ad ce       	rjmp	.-678    	; 0x26e4 <__vector_29+0x60>
    298a:	90 91 00 01 	lds	r25, 0x0100
    298e:	94 fd       	sbrc	r25, 4
    2990:	a9 ce       	rjmp	.-686    	; 0x26e4 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2992:	48 2f       	mov	r20, r24
    2994:	4f 5f       	subi	r20, 0xFF	; 255
    2996:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    299a:	45 30       	cpi	r20, 0x05	; 5
    299c:	08 f4       	brcc	.+2      	; 0x29a0 <__vector_29+0x31c>
    299e:	a2 ce       	rjmp	.-700    	; 0x26e4 <__vector_29+0x60>
					left_vel_sum += value;
    29a0:	80 91 e3 03 	lds	r24, 0x03E3
    29a4:	90 91 e4 03 	lds	r25, 0x03E4
    29a8:	82 0f       	add	r24, r18
    29aa:	93 1f       	adc	r25, r19
    29ac:	90 93 e4 03 	sts	0x03E4, r25
    29b0:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    29b4:	48 30       	cpi	r20, 0x08	; 8
    29b6:	09 f0       	breq	.+2      	; 0x29ba <__vector_29+0x336>
    29b8:	95 ce       	rjmp	.-726    	; 0x26e4 <__vector_29+0x60>
						firstSampleLeft = 0;
    29ba:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	80 93 07 02 	sts	0x0207, r24
    29c4:	8f ce       	rjmp	.-738    	; 0x26e4 <__vector_29+0x60>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    29c6:	80 91 2b 03 	lds	r24, 0x032B
    29ca:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    29ce:	80 91 2e 03 	lds	r24, 0x032E
    29d2:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    29d6:	80 91 c1 03 	lds	r24, 0x03C1
    29da:	88 23       	and	r24, r24
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <__vector_29+0x35c>
    29de:	4a c0       	rjmp	.+148    	; 0x2a74 <__vector_29+0x3f0>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    29e6:	84 e0       	ldi	r24, 0x04	; 4
    29e8:	80 93 c0 03 	sts	0x03C0, r24
			break;
    29ec:	96 ce       	rjmp	.-724    	; 0x271a <__vector_29+0x96>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    29ee:	80 91 09 02 	lds	r24, 0x0209
    29f2:	88 23       	and	r24, r24
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <__vector_29+0x374>
    29f6:	76 ce       	rjmp	.-788    	; 0x26e4 <__vector_29+0x60>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    29f8:	63 99       	sbic	0x0c, 3	; 12
    29fa:	74 ce       	rjmp	.-792    	; 0x26e4 <__vector_29+0x60>
    29fc:	64 99       	sbic	0x0c, 4	; 12
    29fe:	72 ce       	rjmp	.-796    	; 0x26e4 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2a00:	48 2f       	mov	r20, r24
    2a02:	4f 5f       	subi	r20, 0xFF	; 255
    2a04:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2a08:	45 30       	cpi	r20, 0x05	; 5
    2a0a:	08 f4       	brcc	.+2      	; 0x2a0e <__vector_29+0x38a>
    2a0c:	6b ce       	rjmp	.-810    	; 0x26e4 <__vector_29+0x60>
					right_vel_sum += value;
    2a0e:	80 91 e5 03 	lds	r24, 0x03E5
    2a12:	90 91 e6 03 	lds	r25, 0x03E6
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	90 93 e6 03 	sts	0x03E6, r25
    2a1e:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2a22:	48 30       	cpi	r20, 0x08	; 8
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <__vector_29+0x3a4>
    2a26:	5e ce       	rjmp	.-836    	; 0x26e4 <__vector_29+0x60>
						firstSampleRight = 0;
    2a28:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	80 93 08 02 	sts	0x0208, r24
    2a32:	58 ce       	rjmp	.-848    	; 0x26e4 <__vector_29+0x60>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2a34:	80 91 d7 03 	lds	r24, 0x03D7
    2a38:	90 91 d8 03 	lds	r25, 0x03D8
    2a3c:	82 0f       	add	r24, r18
    2a3e:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2a40:	96 95       	lsr	r25
    2a42:	87 95       	ror	r24
    2a44:	90 93 d8 03 	sts	0x03D8, r25
    2a48:	80 93 d7 03 	sts	0x03D7, r24
			break;
    2a4c:	4b ce       	rjmp	.-874    	; 0x26e4 <__vector_29+0x60>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif

					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2a4e:	40 91 05 01 	lds	r20, 0x0105
    2a52:	40 97       	sbiw	r24, 0x10	; 16
    2a54:	95 95       	asr	r25
    2a56:	87 95       	ror	r24
    2a58:	21 e0       	ldi	r18, 0x01	; 1
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <__vector_29+0x3de>
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	8a 95       	dec	r24
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <__vector_29+0x3da>
    2a66:	20 95       	com	r18
    2a68:	24 23       	and	r18, r20
    2a6a:	20 93 05 01 	sts	0x0105, r18
    2a6e:	80 91 c0 03 	lds	r24, 0x03C0
    2a72:	53 ce       	rjmp	.-858    	; 0x271a <__vector_29+0x96>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	71 f1       	breq	.+92     	; 0x2ad4 <__vector_29+0x450>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2a78:	85 e0       	ldi	r24, 0x05	; 5
    2a7a:	80 93 bf 03 	sts	0x03BF, r24
    2a7e:	b3 cf       	rjmp	.-154    	; 0x29e6 <__vector_29+0x362>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a80:	91 30       	cpi	r25, 0x01	; 1
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <__vector_29+0x402>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2a84:	85 e0       	ldi	r24, 0x05	; 5
    2a86:	80 93 bf 03 	sts	0x03BF, r24
    2a8a:	18 cf       	rjmp	.-464    	; 0x28bc <__vector_29+0x238>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	51 f1       	breq	.+84     	; 0x2ae4 <__vector_29+0x460>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2a90:	85 e0       	ldi	r24, 0x05	; 5
    2a92:	80 93 bf 03 	sts	0x03BF, r24
    2a96:	3e ce       	rjmp	.-900    	; 0x2714 <__vector_29+0x90>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	01 f1       	breq	.+64     	; 0x2adc <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2a9c:	85 e0       	ldi	r24, 0x05	; 5
    2a9e:	80 93 bf 03 	sts	0x03BF, r24
    2aa2:	66 cf       	rjmp	.-308    	; 0x2970 <__vector_29+0x2ec>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2aa4:	10 92 26 04 	sts	0x0426, r1
    2aa8:	e7 ce       	rjmp	.-562    	; 0x2878 <__vector_29+0x1f4>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    2aaa:	80 91 c5 03 	lds	r24, 0x03C5
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	a1 f1       	breq	.+104    	; 0x2b1a <__vector_29+0x496>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	32 ce       	rjmp	.-924    	; 0x271a <__vector_29+0x96>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2ab6:	80 91 c5 03 	lds	r24, 0x03C5
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <__vector_29+0x43c>
    2abe:	5a ce       	rjmp	.-844    	; 0x2774 <__vector_29+0xf0>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2ac0:	30 93 c4 03 	sts	0x03C4, r19
    2ac4:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    2ac8:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2acc:	46 98       	cbi	0x08, 6	; 8
    2ace:	4e e0       	ldi	r20, 0x0E	; 14
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	59 ce       	rjmp	.-846    	; 0x2786 <__vector_29+0x102>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	80 93 bf 03 	sts	0x03BF, r24
    2ada:	85 cf       	rjmp	.-246    	; 0x29e6 <__vector_29+0x362>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	80 93 bf 03 	sts	0x03BF, r24
    2ae2:	46 cf       	rjmp	.-372    	; 0x2970 <__vector_29+0x2ec>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	80 93 bf 03 	sts	0x03BF, r24
    2aea:	14 ce       	rjmp	.-984    	; 0x2714 <__vector_29+0x90>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2aec:	11 82       	std	Z+1, r1	; 0x01
    2aee:	10 82       	st	Z, r1
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	75 ce       	rjmp	.-790    	; 0x27e0 <__vector_29+0x15c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2af6:	ac 01       	movw	r20, r24
    2af8:	44 5c       	subi	r20, 0xC4	; 196
    2afa:	5f 4f       	sbci	r21, 0xFF	; 255
    2afc:	55 95       	asr	r21
    2afe:	47 95       	ror	r20
    2b00:	48 37       	cpi	r20, 0x78	; 120
    2b02:	51 05       	cpc	r21, r1
    2b04:	7c f4       	brge	.+30     	; 0x2b24 <__vector_29+0x4a0>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2b06:	29 53       	subi	r18, 0x39	; 57
    2b08:	3c 4f       	sbci	r19, 0xFC	; 252
    2b0a:	cc 97       	sbiw	r24, 0x3c	; 60
    2b0c:	95 95       	asr	r25
    2b0e:	87 95       	ror	r24
    2b10:	cc 96       	adiw	r24, 0x3c	; 60
    2b12:	f9 01       	movw	r30, r18
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	80 83       	st	Z, r24
    2b18:	6e ce       	rjmp	.-804    	; 0x27f6 <__vector_29+0x172>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2b20:	46 9a       	sbi	0x08, 6	; 8
    2b22:	d3 ce       	rjmp	.-602    	; 0x28ca <__vector_29+0x246>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2b24:	ac 01       	movw	r20, r24
    2b26:	44 5d       	subi	r20, 0xD4	; 212
    2b28:	5e 4f       	sbci	r21, 0xFE	; 254
    2b2a:	55 95       	asr	r21
    2b2c:	47 95       	ror	r20
    2b2e:	55 95       	asr	r21
    2b30:	47 95       	ror	r20
    2b32:	44 3b       	cpi	r20, 0xB4	; 180
    2b34:	51 05       	cpc	r21, r1
    2b36:	74 f4       	brge	.+28     	; 0x2b54 <__vector_29+0x4d0>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2b38:	29 53       	subi	r18, 0x39	; 57
    2b3a:	3c 4f       	sbci	r19, 0xFC	; 252
    2b3c:	84 5b       	subi	r24, 0xB4	; 180
    2b3e:	90 40       	sbci	r25, 0x00	; 0
    2b40:	95 95       	asr	r25
    2b42:	87 95       	ror	r24
    2b44:	95 95       	asr	r25
    2b46:	87 95       	ror	r24
    2b48:	88 58       	subi	r24, 0x88	; 136
    2b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4c:	f9 01       	movw	r30, r18
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	51 ce       	rjmp	.-862    	; 0x27f6 <__vector_29+0x172>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2b54:	29 53       	subi	r18, 0x39	; 57
    2b56:	3c 4f       	sbci	r19, 0xFC	; 252
    2b58:	84 5a       	subi	r24, 0xA4	; 164
    2b5a:	91 40       	sbci	r25, 0x01	; 1
    2b5c:	95 95       	asr	r25
    2b5e:	87 95       	ror	r24
    2b60:	95 95       	asr	r25
    2b62:	87 95       	ror	r24
    2b64:	95 95       	asr	r25
    2b66:	87 95       	ror	r24
    2b68:	8c 54       	subi	r24, 0x4C	; 76
    2b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	41 ce       	rjmp	.-894    	; 0x27f6 <__vector_29+0x172>

00002b74 <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2b74:	e0 e9       	ldi	r30, 0x90	; 144
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	83 68       	ori	r24, 0x83	; 131
    2b7c:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2b7e:	80 81       	ld	r24, Z
    2b80:	83 60       	ori	r24, 0x03	; 3
    2b82:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2b84:	a1 e9       	ldi	r26, 0x91	; 145
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	8c 91       	ld	r24, X
    2b8a:	8b 60       	ori	r24, 0x0B	; 11
    2b8c:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2b8e:	80 91 eb 03 	lds	r24, 0x03EB
    2b92:	90 91 ec 03 	lds	r25, 0x03EC
    2b96:	90 93 99 00 	sts	0x0099, r25
    2b9a:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2b9e:	10 92 9b 00 	sts	0x009B, r1
    2ba2:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2ba6:	a1 e7       	ldi	r26, 0x71	; 113
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	8c 91       	ld	r24, X
    2bac:	81 60       	ori	r24, 0x01	; 1
    2bae:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8f 75       	andi	r24, 0x5F	; 95
    2bb4:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2bb6:	8e b1       	in	r24, 0x0e	; 14
    2bb8:	87 7e       	andi	r24, 0xE7	; 231
    2bba:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2bbc:	e0 ea       	ldi	r30, 0xA0	; 160
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	83 68       	ori	r24, 0x83	; 131
    2bc4:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2bc6:	a1 ea       	ldi	r26, 0xA1	; 161
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	8c 91       	ld	r24, X
    2bcc:	8b 60       	ori	r24, 0x0B	; 11
    2bce:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2bd0:	80 91 ed 03 	lds	r24, 0x03ED
    2bd4:	90 91 ee 03 	lds	r25, 0x03EE
    2bd8:	90 93 a9 00 	sts	0x00A9, r25
    2bdc:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2be0:	10 92 ab 00 	sts	0x00AB, r1
    2be4:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2be8:	a2 e7       	ldi	r26, 0x72	; 114
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	8c 91       	ld	r24, X
    2bee:	81 60       	ori	r24, 0x01	; 1
    2bf0:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8f 75       	andi	r24, 0x5F	; 95
    2bf6:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2bf8:	e2 e0       	ldi	r30, 0x02	; 2
    2bfa:	f1 e0       	ldi	r31, 0x01	; 1
    2bfc:	80 81       	ld	r24, Z
    2bfe:	87 7e       	andi	r24, 0xE7	; 231
    2c00:	80 83       	st	Z, r24


}
    2c02:	08 95       	ret

00002c04 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    2c04:	1f 92       	push	r1
    2c06:	0f 92       	push	r0
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	0f 92       	push	r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	8f 93       	push	r24
    2c10:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    2c12:	80 91 26 04 	lds	r24, 0x0426
    2c16:	88 23       	and	r24, r24
    2c18:	61 f0       	breq	.+24     	; 0x2c32 <__vector_45+0x2e>
		pwm_left = 0;
    2c1a:	10 92 ee 03 	sts	0x03EE, r1
    2c1e:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    2c22:	10 92 a9 00 	sts	0x00A9, r1
    2c26:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2c2a:	10 92 ab 00 	sts	0x00AB, r1
    2c2e:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    2c32:	10 92 d8 03 	sts	0x03D8, r1
    2c36:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    2c3a:	80 91 ed 03 	lds	r24, 0x03ED
    2c3e:	90 91 ee 03 	lds	r25, 0x03EE
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	41 f5       	brne	.+80     	; 0x2c96 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    2c46:	80 91 e1 03 	lds	r24, 0x03E1
    2c4a:	90 91 e2 03 	lds	r25, 0x03E2
    2c4e:	97 fd       	sbrc	r25, 7
    2c50:	69 c0       	rjmp	.+210    	; 0x2d24 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    2c58:	8e e0       	ldi	r24, 0x0E	; 14
    2c5a:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2c64:	80 91 a0 00 	lds	r24, 0x00A0
    2c68:	8f 75       	andi	r24, 0x5F	; 95
    2c6a:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2c6e:	80 91 02 01 	lds	r24, 0x0102
    2c72:	87 7e       	andi	r24, 0xE7	; 231
    2c74:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    2c78:	80 91 72 00 	lds	r24, 0x0072
    2c7c:	89 7f       	andi	r24, 0xF9	; 249
    2c7e:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    2c82:	89 b3       	in	r24, 0x19	; 25
    2c84:	86 60       	ori	r24, 0x06	; 6
    2c86:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    2c88:	9f 91       	pop	r25
    2c8a:	8f 91       	pop	r24
    2c8c:	0f 90       	pop	r0
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	0f 90       	pop	r0
    2c92:	1f 90       	pop	r1
    2c94:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    2c96:	18 16       	cp	r1, r24
    2c98:	19 06       	cpc	r1, r25
    2c9a:	2c f5       	brge	.+74     	; 0x2ce6 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    2c9c:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    2ca0:	8f e0       	ldi	r24, 0x0F	; 15
    2ca2:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2ca6:	80 91 a0 00 	lds	r24, 0x00A0
    2caa:	8f 7d       	andi	r24, 0xDF	; 223
    2cac:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2cb0:	80 91 72 00 	lds	r24, 0x0072
    2cb4:	8b 7f       	andi	r24, 0xFB	; 251
    2cb6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    2cba:	80 91 02 01 	lds	r24, 0x0102
    2cbe:	8f 7e       	andi	r24, 0xEF	; 239
    2cc0:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    2cc4:	80 91 a0 00 	lds	r24, 0x00A0
    2cc8:	80 68       	ori	r24, 0x80	; 128
    2cca:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2cce:	80 91 72 00 	lds	r24, 0x0072
    2cd2:	82 60       	ori	r24, 0x02	; 2
    2cd4:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	0f 90       	pop	r0
    2ce2:	1f 90       	pop	r1
    2ce4:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    2ce6:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    2cea:	8e e0       	ldi	r24, 0x0E	; 14
    2cec:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    2cf0:	80 91 a0 00 	lds	r24, 0x00A0
    2cf4:	8f 77       	andi	r24, 0x7F	; 127
    2cf6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2cfa:	80 91 72 00 	lds	r24, 0x0072
    2cfe:	8d 7f       	andi	r24, 0xFD	; 253
    2d00:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    2d04:	80 91 02 01 	lds	r24, 0x0102
    2d08:	87 7f       	andi	r24, 0xF7	; 247
    2d0a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    2d0e:	80 91 a0 00 	lds	r24, 0x00A0
    2d12:	80 62       	ori	r24, 0x20	; 32
    2d14:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2d18:	80 91 72 00 	lds	r24, 0x0072
    2d1c:	84 60       	ori	r24, 0x04	; 4
    2d1e:	80 93 72 00 	sts	0x0072, r24
    2d22:	b2 cf       	rjmp	.-156    	; 0x2c88 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    2d2a:	8f e0       	ldi	r24, 0x0F	; 15
    2d2c:	80 93 2b 03 	sts	0x032B, r24
    2d30:	96 cf       	rjmp	.-212    	; 0x2c5e <__vector_45+0x5a>

00002d32 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	8f 93       	push	r24
    2d3e:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    2d46:	9e e0       	ldi	r25, 0x0E	; 14
    2d48:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2d4c:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2d50:	9f 91       	pop	r25
    2d52:	8f 91       	pop	r24
    2d54:	0f 90       	pop	r0
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	0f 90       	pop	r0
    2d5a:	1f 90       	pop	r1
    2d5c:	18 95       	reti

00002d5e <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    2d5e:	1f 92       	push	r1
    2d60:	0f 92       	push	r0
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	0f 92       	push	r0
    2d66:	11 24       	eor	r1, r1
    2d68:	8f 93       	push	r24
    2d6a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    2d72:	9f e0       	ldi	r25, 0x0F	; 15
    2d74:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2d78:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2d7c:	9f 91       	pop	r25
    2d7e:	8f 91       	pop	r24
    2d80:	0f 90       	pop	r0
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	0f 90       	pop	r0
    2d86:	1f 90       	pop	r1
    2d88:	18 95       	reti

00002d8a <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    2d8a:	1f 92       	push	r1
    2d8c:	0f 92       	push	r0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	0f 92       	push	r0
    2d92:	11 24       	eor	r1, r1
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    2d98:	80 91 26 04 	lds	r24, 0x0426
    2d9c:	88 23       	and	r24, r24
    2d9e:	61 f0       	breq	.+24     	; 0x2db8 <__vector_35+0x2e>
		pwm_right = 0;
    2da0:	10 92 ec 03 	sts	0x03EC, r1
    2da4:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    2da8:	10 92 99 00 	sts	0x0099, r1
    2dac:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2db0:	10 92 9b 00 	sts	0x009B, r1
    2db4:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    2db8:	10 92 da 03 	sts	0x03DA, r1
    2dbc:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    2dc0:	80 91 eb 03 	lds	r24, 0x03EB
    2dc4:	90 91 ec 03 	lds	r25, 0x03EC
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	31 f5       	brne	.+76     	; 0x2e18 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    2dcc:	80 91 df 03 	lds	r24, 0x03DF
    2dd0:	90 91 e0 03 	lds	r25, 0x03E0
    2dd4:	97 fd       	sbrc	r25, 7
    2dd6:	5f c0       	rjmp	.+190    	; 0x2e96 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    2dde:	8c e0       	ldi	r24, 0x0C	; 12
    2de0:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2dea:	80 91 90 00 	lds	r24, 0x0090
    2dee:	8f 75       	andi	r24, 0x5F	; 95
    2df0:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2df4:	8e b1       	in	r24, 0x0e	; 14
    2df6:	87 7e       	andi	r24, 0xE7	; 231
    2df8:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    2dfa:	80 91 71 00 	lds	r24, 0x0071
    2dfe:	89 7f       	andi	r24, 0xF9	; 249
    2e00:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    2e04:	88 b3       	in	r24, 0x18	; 24
    2e06:	86 60       	ori	r24, 0x06	; 6
    2e08:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2e0a:	9f 91       	pop	r25
    2e0c:	8f 91       	pop	r24
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    2e18:	18 16       	cp	r1, r24
    2e1a:	19 06       	cpc	r1, r25
    2e1c:	0c f5       	brge	.+66     	; 0x2e60 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    2e1e:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    2e22:	8d e0       	ldi	r24, 0x0D	; 13
    2e24:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    2e28:	80 91 90 00 	lds	r24, 0x0090
    2e2c:	8f 7d       	andi	r24, 0xDF	; 223
    2e2e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    2e32:	80 91 71 00 	lds	r24, 0x0071
    2e36:	8b 7f       	andi	r24, 0xFB	; 251
    2e38:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    2e3c:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    2e3e:	80 91 90 00 	lds	r24, 0x0090
    2e42:	80 68       	ori	r24, 0x80	; 128
    2e44:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    2e48:	80 91 71 00 	lds	r24, 0x0071
    2e4c:	82 60       	ori	r24, 0x02	; 2
    2e4e:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2e52:	9f 91       	pop	r25
    2e54:	8f 91       	pop	r24
    2e56:	0f 90       	pop	r0
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	0f 90       	pop	r0
    2e5c:	1f 90       	pop	r1
    2e5e:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    2e60:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    2e64:	8c e0       	ldi	r24, 0x0C	; 12
    2e66:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    2e6a:	80 91 90 00 	lds	r24, 0x0090
    2e6e:	8f 77       	andi	r24, 0x7F	; 127
    2e70:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    2e74:	80 91 71 00 	lds	r24, 0x0071
    2e78:	8d 7f       	andi	r24, 0xFD	; 253
    2e7a:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    2e7e:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    2e80:	80 91 90 00 	lds	r24, 0x0090
    2e84:	80 62       	ori	r24, 0x20	; 32
    2e86:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    2e8a:	80 91 71 00 	lds	r24, 0x0071
    2e8e:	84 60       	ori	r24, 0x04	; 4
    2e90:	80 93 71 00 	sts	0x0071, r24
    2e94:	ba cf       	rjmp	.-140    	; 0x2e0a <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    2e9c:	8d e0       	ldi	r24, 0x0D	; 13
    2e9e:	80 93 2c 03 	sts	0x032C, r24
    2ea2:	a0 cf       	rjmp	.-192    	; 0x2de4 <__vector_35+0x5a>

00002ea4 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	8f 93       	push	r24
    2eb0:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    2eb8:	9c e0       	ldi	r25, 0x0C	; 12
    2eba:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    2ebe:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    2ec2:	9f 91       	pop	r25
    2ec4:	8f 91       	pop	r24
    2ec6:	0f 90       	pop	r0
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	0f 90       	pop	r0
    2ecc:	1f 90       	pop	r1
    2ece:	18 95       	reti

00002ed0 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    2ed0:	1f 92       	push	r1
    2ed2:	0f 92       	push	r0
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	0f 92       	push	r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	8f 93       	push	r24
    2edc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    2ee4:	9d e0       	ldi	r25, 0x0D	; 13
    2ee6:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    2eea:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	0f 90       	pop	r0
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	0f 90       	pop	r0
    2ef8:	1f 90       	pop	r1
    2efa:	18 95       	reti

00002efc <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    2efc:	2f 92       	push	r2
    2efe:	3f 92       	push	r3
    2f00:	4f 92       	push	r4
    2f02:	5f 92       	push	r5
    2f04:	6f 92       	push	r6
    2f06:	7f 92       	push	r7
    2f08:	8f 92       	push	r8
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	28 97       	sbiw	r28, 0x08	; 8
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	2c 01       	movw	r4, r24
    2f32:	7a 83       	std	Y+2, r23	; 0x02
    2f34:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    2f36:	fc 01       	movw	r30, r24
    2f38:	01 90       	ld	r0, Z+
    2f3a:	f0 81       	ld	r31, Z
    2f3c:	e0 2d       	mov	r30, r0
    2f3e:	fc 83       	std	Y+4, r31	; 0x04
    2f40:	eb 83       	std	Y+3, r30	; 0x03
    2f42:	fb 01       	movw	r30, r22
    2f44:	01 90       	ld	r0, Z+
    2f46:	f0 81       	ld	r31, Z
    2f48:	e0 2d       	mov	r30, r0
    2f4a:	fe 83       	std	Y+6, r31	; 0x06
    2f4c:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f4e:	60 91 c7 03 	lds	r22, 0x03C7
    2f52:	70 91 c8 03 	lds	r23, 0x03C8
    2f56:	65 30       	cpi	r22, 0x05	; 5
    2f58:	71 05       	cpc	r23, r1
    2f5a:	34 f4       	brge	.+12     	; 0x2f68 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    2f5c:	10 92 c8 03 	sts	0x03C8, r1
    2f60:	10 92 c7 03 	sts	0x03C7, r1
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f68:	40 91 c9 03 	lds	r20, 0x03C9
    2f6c:	50 91 ca 03 	lds	r21, 0x03CA
    2f70:	45 30       	cpi	r20, 0x05	; 5
    2f72:	51 05       	cpc	r21, r1
    2f74:	34 f4       	brge	.+12     	; 0x2f82 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    2f76:	10 92 ca 03 	sts	0x03CA, r1
    2f7a:	10 92 c9 03 	sts	0x03C9, r1
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f82:	80 91 cb 03 	lds	r24, 0x03CB
    2f86:	90 91 cc 03 	lds	r25, 0x03CC
    2f8a:	85 30       	cpi	r24, 0x05	; 5
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	24 f4       	brge	.+8      	; 0x2f98 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    2f90:	10 92 cc 03 	sts	0x03CC, r1
    2f94:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f98:	00 91 cd 03 	lds	r16, 0x03CD
    2f9c:	10 91 ce 03 	lds	r17, 0x03CE
    2fa0:	05 30       	cpi	r16, 0x05	; 5
    2fa2:	11 05       	cpc	r17, r1
    2fa4:	34 f4       	brge	.+12     	; 0x2fb2 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    2fa6:	10 92 ce 03 	sts	0x03CE, r1
    2faa:	10 92 cd 03 	sts	0x03CD, r1
    2fae:	00 e0       	ldi	r16, 0x00	; 0
    2fb0:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2fb2:	60 90 cf 03 	lds	r6, 0x03CF
    2fb6:	70 90 d0 03 	lds	r7, 0x03D0
    2fba:	f5 e0       	ldi	r31, 0x05	; 5
    2fbc:	6f 16       	cp	r6, r31
    2fbe:	71 04       	cpc	r7, r1
    2fc0:	34 f4       	brge	.+12     	; 0x2fce <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    2fc2:	10 92 d0 03 	sts	0x03D0, r1
    2fc6:	10 92 cf 03 	sts	0x03CF, r1
    2fca:	66 24       	eor	r6, r6
    2fcc:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2fce:	20 91 d1 03 	lds	r18, 0x03D1
    2fd2:	30 91 d2 03 	lds	r19, 0x03D2
    2fd6:	25 30       	cpi	r18, 0x05	; 5
    2fd8:	31 05       	cpc	r19, r1
    2fda:	34 f4       	brge	.+12     	; 0x2fe8 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    2fdc:	10 92 d2 03 	sts	0x03D2, r1
    2fe0:	10 92 d1 03 	sts	0x03D1, r1
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2fe8:	80 91 d3 03 	lds	r24, 0x03D3
    2fec:	90 91 d4 03 	lds	r25, 0x03D4
    2ff0:	85 30       	cpi	r24, 0x05	; 5
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	24 f4       	brge	.+8      	; 0x2ffe <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    2ff6:	10 92 d4 03 	sts	0x03D4, r1
    2ffa:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2ffe:	80 91 d5 03 	lds	r24, 0x03D5
    3002:	90 91 d6 03 	lds	r25, 0x03D6
    3006:	85 30       	cpi	r24, 0x05	; 5
    3008:	91 05       	cpc	r25, r1
    300a:	34 f4       	brge	.+12     	; 0x3018 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    300c:	10 92 d6 03 	sts	0x03D6, r1
    3010:	10 92 d5 03 	sts	0x03D5, r1
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    3018:	ee 24       	eor	r14, r14
    301a:	ff 24       	eor	r15, r15
    301c:	e6 1a       	sub	r14, r22
    301e:	f7 0a       	sbc	r15, r23
    3020:	5a 01       	movw	r10, r20
    3022:	b5 94       	asr	r11
    3024:	a7 94       	ror	r10
    3026:	15 95       	asr	r17
    3028:	07 95       	ror	r16
    302a:	69 01       	movw	r12, r18
    302c:	d5 94       	asr	r13
    302e:	c7 94       	ror	r12
    3030:	4c 01       	movw	r8, r24
    3032:	95 94       	asr	r9
    3034:	87 94       	ror	r8
    3036:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <rand>
    303a:	93 01       	movw	r18, r6
    303c:	2e 51       	subi	r18, 0x1E	; 30
    303e:	30 40       	sbci	r19, 0x00	; 0
    3040:	2e 0d       	add	r18, r14
    3042:	3f 1d       	adc	r19, r15
    3044:	20 0f       	add	r18, r16
    3046:	31 1f       	adc	r19, r17
    3048:	2c 0d       	add	r18, r12
    304a:	3d 1d       	adc	r19, r13
    304c:	2a 19       	sub	r18, r10
    304e:	3b 09       	sbc	r19, r11
    3050:	28 19       	sub	r18, r8
    3052:	39 09       	sbc	r19, r9
    3054:	4c e3       	ldi	r20, 0x3C	; 60
    3056:	24 2e       	mov	r2, r20
    3058:	31 2c       	mov	r3, r1
    305a:	b1 01       	movw	r22, r2
    305c:	0e 94 60 23 	call	0x46c0	; 0x46c0 <__divmodhi4>
    3060:	28 0f       	add	r18, r24
    3062:	39 1f       	adc	r19, r25
    3064:	38 87       	std	Y+8, r19	; 0x08
    3066:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3068:	e0 90 c9 03 	lds	r14, 0x03C9
    306c:	f0 90 ca 03 	lds	r15, 0x03CA
    3070:	f5 94       	asr	r15
    3072:	e7 94       	ror	r14
    3074:	00 91 cb 03 	lds	r16, 0x03CB
    3078:	10 91 cc 03 	lds	r17, 0x03CC
    307c:	15 95       	asr	r17
    307e:	07 95       	ror	r16
    3080:	15 95       	asr	r17
    3082:	07 95       	ror	r16
    3084:	c0 90 cd 03 	lds	r12, 0x03CD
    3088:	d0 90 ce 03 	lds	r13, 0x03CE
    308c:	d5 94       	asr	r13
    308e:	c7 94       	ror	r12
    3090:	80 90 d1 03 	lds	r8, 0x03D1
    3094:	90 90 d2 03 	lds	r9, 0x03D2
    3098:	95 94       	asr	r9
    309a:	87 94       	ror	r8
    309c:	60 90 d3 03 	lds	r6, 0x03D3
    30a0:	70 90 d4 03 	lds	r7, 0x03D4
    30a4:	75 94       	asr	r7
    30a6:	67 94       	ror	r6
    30a8:	75 94       	asr	r7
    30aa:	67 94       	ror	r6
    30ac:	a0 90 d5 03 	lds	r10, 0x03D5
    30b0:	b0 90 d6 03 	lds	r11, 0x03D6
    30b4:	b5 94       	asr	r11
    30b6:	a7 94       	ror	r10
    30b8:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <rand>
    30bc:	97 01       	movw	r18, r14
    30be:	20 0f       	add	r18, r16
    30c0:	31 1f       	adc	r19, r17
    30c2:	2e 51       	subi	r18, 0x1E	; 30
    30c4:	30 40       	sbci	r19, 0x00	; 0
    30c6:	2c 0d       	add	r18, r12
    30c8:	3d 1d       	adc	r19, r13
    30ca:	2a 19       	sub	r18, r10
    30cc:	3b 09       	sbc	r19, r11
    30ce:	28 19       	sub	r18, r8
    30d0:	39 09       	sbc	r19, r9
    30d2:	26 19       	sub	r18, r6
    30d4:	37 09       	sbc	r19, r7
    30d6:	b1 01       	movw	r22, r2
    30d8:	0e 94 60 23 	call	0x46c0	; 0x46c0 <__divmodhi4>
    30dc:	28 0f       	add	r18, r24
    30de:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    30e0:	4b 81       	ldd	r20, Y+3	; 0x03
    30e2:	5c 81       	ldd	r21, Y+4	; 0x04
    30e4:	57 fd       	sbrc	r21, 7
    30e6:	97 c0       	rjmp	.+302    	; 0x3216 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    30e8:	5a 01       	movw	r10, r20
    30ea:	cc 24       	eor	r12, r12
    30ec:	b7 fc       	sbrc	r11, 7
    30ee:	c0 94       	com	r12
    30f0:	dc 2c       	mov	r13, r12
    30f2:	8f 81       	ldd	r24, Y+7	; 0x07
    30f4:	98 85       	ldd	r25, Y+8	; 0x08
    30f6:	3c 01       	movw	r6, r24
    30f8:	88 24       	eor	r8, r8
    30fa:	77 fc       	sbrc	r7, 7
    30fc:	80 94       	com	r8
    30fe:	98 2c       	mov	r9, r8
    3100:	79 01       	movw	r14, r18
    3102:	00 27       	eor	r16, r16
    3104:	f7 fc       	sbrc	r15, 7
    3106:	00 95       	com	r16
    3108:	10 2f       	mov	r17, r16
    310a:	c4 01       	movw	r24, r8
    310c:	b3 01       	movw	r22, r6
    310e:	6e 19       	sub	r22, r14
    3110:	7f 09       	sbc	r23, r15
    3112:	80 0b       	sbc	r24, r16
    3114:	91 0b       	sbc	r25, r17
    3116:	a6 01       	movw	r20, r12
    3118:	95 01       	movw	r18, r10
    311a:	0e 94 2d 23 	call	0x465a	; 0x465a <__mulsi3>
    311e:	f7 e0       	ldi	r31, 0x07	; 7
    3120:	95 95       	asr	r25
    3122:	87 95       	ror	r24
    3124:	77 95       	ror	r23
    3126:	67 95       	ror	r22
    3128:	fa 95       	dec	r31
    312a:	d1 f7       	brne	.-12     	; 0x3120 <obstacleAvoidance+0x224>
    312c:	6a 0d       	add	r22, r10
    312e:	7b 1d       	adc	r23, r11
    3130:	8c 1d       	adc	r24, r12
    3132:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    3134:	f2 01       	movw	r30, r4
    3136:	71 83       	std	Z+1, r23	; 0x01
    3138:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    313a:	2d 81       	ldd	r18, Y+5	; 0x05
    313c:	3e 81       	ldd	r19, Y+6	; 0x06
    313e:	37 fd       	sbrc	r19, 7
    3140:	99 c0       	rjmp	.+306    	; 0x3274 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3142:	59 01       	movw	r10, r18
    3144:	cc 24       	eor	r12, r12
    3146:	b7 fc       	sbrc	r11, 7
    3148:	c0 94       	com	r12
    314a:	dc 2c       	mov	r13, r12
    314c:	c8 01       	movw	r24, r16
    314e:	b7 01       	movw	r22, r14
    3150:	66 0d       	add	r22, r6
    3152:	77 1d       	adc	r23, r7
    3154:	88 1d       	adc	r24, r8
    3156:	99 1d       	adc	r25, r9
    3158:	a6 01       	movw	r20, r12
    315a:	95 01       	movw	r18, r10
    315c:	0e 94 2d 23 	call	0x465a	; 0x465a <__mulsi3>
    3160:	37 e0       	ldi	r19, 0x07	; 7
    3162:	95 95       	asr	r25
    3164:	87 95       	ror	r24
    3166:	77 95       	ror	r23
    3168:	67 95       	ror	r22
    316a:	3a 95       	dec	r19
    316c:	d1 f7       	brne	.-12     	; 0x3162 <obstacleAvoidance+0x266>
    316e:	6a 0d       	add	r22, r10
    3170:	7b 1d       	adc	r23, r11
    3172:	8c 1d       	adc	r24, r12
    3174:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3176:	9b 01       	movw	r18, r22
    3178:	e9 81       	ldd	r30, Y+1	; 0x01
    317a:	fa 81       	ldd	r31, Y+2	; 0x02
    317c:	71 83       	std	Z+1, r23	; 0x01
    317e:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    3180:	f2 e0       	ldi	r31, 0x02	; 2
    3182:	21 30       	cpi	r18, 0x01	; 1
    3184:	3f 07       	cpc	r19, r31
    3186:	44 f0       	brlt	.+16     	; 0x3198 <obstacleAvoidance+0x29c>
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	92 e0       	ldi	r25, 0x02	; 2
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3198:	f2 01       	movw	r30, r4
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	f2 e0       	ldi	r31, 0x02	; 2
    31a0:	81 30       	cpi	r24, 0x01	; 1
    31a2:	9f 07       	cpc	r25, r31
    31a4:	4c f0       	brlt	.+18     	; 0x31b8 <obstacleAvoidance+0x2bc>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	92 e0       	ldi	r25, 0x02	; 2
    31aa:	f2 01       	movw	r30, r4
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	80 83       	st	Z, r24
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	20 81       	ld	r18, Z
    31b6:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    31b8:	fe ef       	ldi	r31, 0xFE	; 254
    31ba:	20 30       	cpi	r18, 0x00	; 0
    31bc:	3f 07       	cpc	r19, r31
    31be:	4c f4       	brge	.+18     	; 0x31d2 <obstacleAvoidance+0x2d6>
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	9e ef       	ldi	r25, 0xFE	; 254
    31c4:	e9 81       	ldd	r30, Y+1	; 0x01
    31c6:	fa 81       	ldd	r31, Y+2	; 0x02
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	f2 01       	movw	r30, r4
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    31d2:	fe ef       	ldi	r31, 0xFE	; 254
    31d4:	80 30       	cpi	r24, 0x00	; 0
    31d6:	9f 07       	cpc	r25, r31
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <obstacleAvoidance+0x2e8>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	9e ef       	ldi	r25, 0xFE	; 254
    31de:	f2 01       	movw	r30, r4
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24

}
    31e4:	28 96       	adiw	r28, 0x08	; 8
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	df 90       	pop	r13
    31fe:	cf 90       	pop	r12
    3200:	bf 90       	pop	r11
    3202:	af 90       	pop	r10
    3204:	9f 90       	pop	r9
    3206:	8f 90       	pop	r8
    3208:	7f 90       	pop	r7
    320a:	6f 90       	pop	r6
    320c:	5f 90       	pop	r5
    320e:	4f 90       	pop	r4
    3210:	3f 90       	pop	r3
    3212:	2f 90       	pop	r2
    3214:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3216:	4d 81       	ldd	r20, Y+5	; 0x05
    3218:	5e 81       	ldd	r21, Y+6	; 0x06
    321a:	5a 01       	movw	r10, r20
    321c:	cc 24       	eor	r12, r12
    321e:	b7 fc       	sbrc	r11, 7
    3220:	c0 94       	com	r12
    3222:	dc 2c       	mov	r13, r12
    3224:	8f 81       	ldd	r24, Y+7	; 0x07
    3226:	98 85       	ldd	r25, Y+8	; 0x08
    3228:	3c 01       	movw	r6, r24
    322a:	88 24       	eor	r8, r8
    322c:	77 fc       	sbrc	r7, 7
    322e:	80 94       	com	r8
    3230:	98 2c       	mov	r9, r8
    3232:	79 01       	movw	r14, r18
    3234:	00 27       	eor	r16, r16
    3236:	f7 fc       	sbrc	r15, 7
    3238:	00 95       	com	r16
    323a:	10 2f       	mov	r17, r16
    323c:	c8 01       	movw	r24, r16
    323e:	b7 01       	movw	r22, r14
    3240:	66 0d       	add	r22, r6
    3242:	77 1d       	adc	r23, r7
    3244:	88 1d       	adc	r24, r8
    3246:	99 1d       	adc	r25, r9
    3248:	a6 01       	movw	r20, r12
    324a:	95 01       	movw	r18, r10
    324c:	0e 94 2d 23 	call	0x465a	; 0x465a <__mulsi3>
    3250:	e7 e0       	ldi	r30, 0x07	; 7
    3252:	95 95       	asr	r25
    3254:	87 95       	ror	r24
    3256:	77 95       	ror	r23
    3258:	67 95       	ror	r22
    325a:	ea 95       	dec	r30
    325c:	d1 f7       	brne	.-12     	; 0x3252 <obstacleAvoidance+0x356>
    325e:	26 1b       	sub	r18, r22
    3260:	37 0b       	sbc	r19, r23
    3262:	48 0b       	sbc	r20, r24
    3264:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    3266:	f2 01       	movw	r30, r4
    3268:	31 83       	std	Z+1, r19	; 0x01
    326a:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    326c:	2d 81       	ldd	r18, Y+5	; 0x05
    326e:	3e 81       	ldd	r19, Y+6	; 0x06
    3270:	37 ff       	sbrs	r19, 7
    3272:	67 cf       	rjmp	.-306    	; 0x3142 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3274:	2b 81       	ldd	r18, Y+3	; 0x03
    3276:	3c 81       	ldd	r19, Y+4	; 0x04
    3278:	59 01       	movw	r10, r18
    327a:	cc 24       	eor	r12, r12
    327c:	b7 fc       	sbrc	r11, 7
    327e:	c0 94       	com	r12
    3280:	dc 2c       	mov	r13, r12
    3282:	c4 01       	movw	r24, r8
    3284:	b3 01       	movw	r22, r6
    3286:	6e 19       	sub	r22, r14
    3288:	7f 09       	sbc	r23, r15
    328a:	80 0b       	sbc	r24, r16
    328c:	91 0b       	sbc	r25, r17
    328e:	a6 01       	movw	r20, r12
    3290:	95 01       	movw	r18, r10
    3292:	0e 94 2d 23 	call	0x465a	; 0x465a <__mulsi3>
    3296:	27 e0       	ldi	r18, 0x07	; 7
    3298:	95 95       	asr	r25
    329a:	87 95       	ror	r24
    329c:	77 95       	ror	r23
    329e:	67 95       	ror	r22
    32a0:	2a 95       	dec	r18
    32a2:	d1 f7       	brne	.-12     	; 0x3298 <obstacleAvoidance+0x39c>
    32a4:	a6 1a       	sub	r10, r22
    32a6:	b7 0a       	sbc	r11, r23
    32a8:	c8 0a       	sbc	r12, r24
    32aa:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    32ac:	95 01       	movw	r18, r10
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	b1 82       	std	Z+1, r11	; 0x01
    32b4:	a0 82       	st	Z, r10
    32b6:	64 cf       	rjmp	.-312    	; 0x3180 <obstacleAvoidance+0x284>

000032b8 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    32b8:	80 91 6f 03 	lds	r24, 0x036F
    32bc:	90 91 70 03 	lds	r25, 0x0370
    32c0:	21 e0       	ldi	r18, 0x01	; 1
    32c2:	84 3a       	cpi	r24, 0xA4	; 164
    32c4:	92 07       	cpc	r25, r18
    32c6:	d4 f0       	brlt	.+52     	; 0x32fc <cliffDetected+0x44>
    32c8:	80 91 71 03 	lds	r24, 0x0371
    32cc:	90 91 72 03 	lds	r25, 0x0372
    32d0:	21 e0       	ldi	r18, 0x01	; 1
    32d2:	84 3a       	cpi	r24, 0xA4	; 164
    32d4:	92 07       	cpc	r25, r18
    32d6:	94 f0       	brlt	.+36     	; 0x32fc <cliffDetected+0x44>
    32d8:	80 91 73 03 	lds	r24, 0x0373
    32dc:	90 91 74 03 	lds	r25, 0x0374
    32e0:	21 e0       	ldi	r18, 0x01	; 1
    32e2:	84 3a       	cpi	r24, 0xA4	; 164
    32e4:	92 07       	cpc	r25, r18
    32e6:	74 f0       	brlt	.+28     	; 0x3304 <cliffDetected+0x4c>
		return 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	20 91 75 03 	lds	r18, 0x0375
    32ee:	30 91 76 03 	lds	r19, 0x0376
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	24 3a       	cpi	r18, 0xA4	; 164
    32f6:	39 07       	cpc	r19, r25
    32f8:	1c f4       	brge	.+6      	; 0x3300 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    32fa:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	08 95       	ret
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	08 95       	ret
    3304:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    3306:	08 95       	ret

00003308 <initRGBleds>:
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    3308:	e0 e8       	ldi	r30, 0x80	; 128
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	89 6a       	ori	r24, 0xA9	; 169
    3310:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3312:	e1 e8       	ldi	r30, 0x81	; 129
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	89 60       	ori	r24, 0x09	; 9
    331a:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    331c:	80 91 0c 02 	lds	r24, 0x020C
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	90 93 89 00 	sts	0x0089, r25
    3326:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    332a:	80 91 0d 02 	lds	r24, 0x020D
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	90 93 8b 00 	sts	0x008B, r25
    3334:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3338:	80 91 0e 02 	lds	r24, 0x020E
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	90 93 8d 00 	sts	0x008D, r25
    3342:	80 93 8c 00 	sts	0x008C, r24

}
    3346:	08 95       	ret

00003348 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	90 91 03 04 	lds	r25, 0x0403
    334e:	89 1b       	sub	r24, r25
    3350:	80 93 03 04 	sts	0x0403, r24

	if(blinkState) {
    3354:	88 23       	and	r24, r24
    3356:	39 f4       	brne	.+14     	; 0x3366 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    3358:	80 91 80 00 	lds	r24, 0x0080
    335c:	87 7f       	andi	r24, 0xF7	; 247
    335e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    3362:	2f 98       	cbi	0x05, 7	; 5
    3364:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    3366:	80 91 80 00 	lds	r24, 0x0080
    336a:	88 60       	ori	r24, 0x08	; 8
    336c:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3370:	8f ef       	ldi	r24, 0xFF	; 255
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	90 93 8d 00 	sts	0x008D, r25
    3378:	80 93 8c 00 	sts	0x008C, r24
    337c:	08 95       	ret

0000337e <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    337e:	88 23       	and	r24, r24
    3380:	59 f0       	breq	.+22     	; 0x3398 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    3382:	90 91 80 00 	lds	r25, 0x0080
    3386:	90 68       	ori	r25, 0x80	; 128
    3388:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	90 93 89 00 	sts	0x0089, r25
    3392:	80 93 88 00 	sts	0x0088, r24
    3396:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3398:	80 91 80 00 	lds	r24, 0x0080
    339c:	8f 77       	andi	r24, 0x7F	; 127
    339e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    33a2:	2d 98       	cbi	0x05, 5	; 5
    33a4:	08 95       	ret

000033a6 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    33a6:	88 23       	and	r24, r24
    33a8:	59 f0       	breq	.+22     	; 0x33c0 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    33aa:	90 91 80 00 	lds	r25, 0x0080
    33ae:	90 62       	ori	r25, 0x20	; 32
    33b0:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	90 93 8b 00 	sts	0x008B, r25
    33ba:	80 93 8a 00 	sts	0x008A, r24
    33be:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    33c0:	80 91 80 00 	lds	r24, 0x0080
    33c4:	8f 7d       	andi	r24, 0xDF	; 223
    33c6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    33ca:	2e 98       	cbi	0x05, 6	; 5
    33cc:	08 95       	ret

000033ce <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    33ce:	88 23       	and	r24, r24
    33d0:	59 f0       	breq	.+22     	; 0x33e8 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    33d2:	90 91 80 00 	lds	r25, 0x0080
    33d6:	98 60       	ori	r25, 0x08	; 8
    33d8:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	90 93 8d 00 	sts	0x008D, r25
    33e2:	80 93 8c 00 	sts	0x008C, r24
    33e6:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    33e8:	80 91 80 00 	lds	r24, 0x0080
    33ec:	87 7f       	andi	r24, 0xF7	; 247
    33ee:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    33f2:	2f 98       	cbi	0x05, 7	; 5
    33f4:	08 95       	ret

000033f6 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    33f6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    33fa:	80 91 13 02 	lds	r24, 0x0213
    33fe:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3402:	88 23       	and	r24, r24
    3404:	49 f4       	brne	.+18     	; 0x3418 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3406:	86 e1       	ldi	r24, 0x16	; 22
    3408:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    340c:	85 e4       	ldi	r24, 0x45	; 69
    340e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3412:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    3416:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3418:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    341c:	86 ea       	ldi	r24, 0xA6	; 166
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	90 93 14 02 	sts	0x0214, r25
    3424:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3428:	86 ea       	ldi	r24, 0xA6	; 166
    342a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    342e:	88 23       	and	r24, r24
    3430:	41 f5       	brne	.+80     	; 0x3482 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3432:	8d e2       	ldi	r24, 0x2D	; 45
    3434:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x08);	// measurement mode
    3438:	88 e0       	ldi	r24, 0x08	; 8
    343a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    343e:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3442:	80 91 13 02 	lds	r24, 0x0213
    3446:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    344a:	88 23       	and	r24, r24
    344c:	d1 f4       	brne	.+52     	; 0x3482 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    344e:	81 e3       	ldi	r24, 0x31	; 49
    3450:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    345a:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    345e:	80 91 13 02 	lds	r24, 0x0213
    3462:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3466:	88 23       	and	r24, r24
    3468:	61 f4       	brne	.+24     	; 0x3482 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    346a:	8c e2       	ldi	r24, 0x2C	; 44
    346c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3470:	89 e0       	ldi	r24, 0x09	; 9
    3472:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3476:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	80 93 09 04 	sts	0x0409, r24
    3480:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3482:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3486:	82 e0       	ldi	r24, 0x02	; 2
    3488:	80 93 09 04 	sts	0x0409, r24
    348c:	08 95       	ret

0000348e <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    348e:	80 91 13 02 	lds	r24, 0x0213
    3492:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3496:	88 23       	and	r24, r24
    3498:	51 f4       	brne	.+20     	; 0x34ae <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    349a:	86 e1       	ldi	r24, 0x16	; 22
    349c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    34a0:	85 e4       	ldi	r24, 0x45	; 69
    34a2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34a6:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    }

	return 0;				// configuration ok
    34aa:	80 e0       	ldi	r24, 0x00	; 0

}
    34ac:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    34ae:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
		return 1;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	08 95       	ret

000034b6 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34b6:	80 91 13 02 	lds	r24, 0x0213
    34ba:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34be:	88 23       	and	r24, r24
    34c0:	31 f5       	brne	.+76     	; 0x350e <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    34c2:	8d e2       	ldi	r24, 0x2D	; 45
    34c4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x08);	// measurement mode
    34c8:	88 e0       	ldi	r24, 0x08	; 8
    34ca:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34ce:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34d2:	80 91 13 02 	lds	r24, 0x0213
    34d6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34da:	88 23       	and	r24, r24
    34dc:	c1 f4       	brne	.+48     	; 0x350e <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    34de:	81 e3       	ldi	r24, 0x31	; 49
    34e0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34ea:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34ee:	80 91 13 02 	lds	r24, 0x0213
    34f2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34f6:	88 23       	and	r24, r24
    34f8:	51 f4       	brne	.+20     	; 0x350e <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    34fa:	8c e2       	ldi	r24, 0x2C	; 44
    34fc:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3500:	89 e0       	ldi	r24, 0x09	; 9
    3502:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3506:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
    }

	return 0;
    350a:	80 e0       	ldi	r24, 0x00	; 0

}
    350c:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    350e:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>
		return 1;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	08 95       	ret

00003516 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	0f 92       	push	r0
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    3526:	80 91 09 04 	lds	r24, 0x0409
    352a:	88 23       	and	r24, r24
    352c:	91 f0       	breq	.+36     	; 0x3552 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	09 f4       	brne	.+2      	; 0x3534 <readAccelXY+0x1e>
    3532:	88 c0       	rjmp	.+272    	; 0x3644 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    3534:	10 92 0b 04 	sts	0x040B, r1
    3538:	10 92 0a 04 	sts	0x040A, r1
		accY = 0;
    353c:	10 92 0d 04 	sts	0x040D, r1
    3540:	10 92 0c 04 	sts	0x040C, r1

	}

}
    3544:	0f 90       	pop	r0
    3546:	cf 91       	pop	r28
    3548:	df 91       	pop	r29
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	ff 90       	pop	r15
    3550:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3552:	80 91 13 02 	lds	r24, 0x0213
    3556:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    355a:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    355c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3560:	80 91 13 02 	lds	r24, 0x0213
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	0e 94 26 10 	call	0x204c	; 0x204c <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    356a:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    356e:	08 2f       	mov	r16, r24
    3570:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    3574:	f8 2e       	mov	r15, r24
    3576:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    357a:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    357c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3586:	90 91 53 04 	lds	r25, 0x0453
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	99 23       	and	r25, r25
    358e:	39 f1       	breq	.+78     	; 0x35de <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3590:	4f 2d       	mov	r20, r15
    3592:	55 27       	eor	r21, r21
    3594:	47 fd       	sbrc	r20, 7
    3596:	50 95       	com	r21
    3598:	54 2f       	mov	r21, r20
    359a:	44 27       	eor	r20, r20
    359c:	60 2f       	mov	r22, r16
    359e:	77 27       	eor	r23, r23
    35a0:	67 fd       	sbrc	r22, 7
    35a2:	70 95       	com	r23
    35a4:	46 2b       	or	r20, r22
    35a6:	57 2b       	or	r21, r23
    35a8:	50 93 0b 04 	sts	0x040B, r21
    35ac:	40 93 0a 04 	sts	0x040A, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    35b0:	28 2f       	mov	r18, r24
    35b2:	33 27       	eor	r19, r19
    35b4:	27 fd       	sbrc	r18, 7
    35b6:	30 95       	com	r19
    35b8:	32 2f       	mov	r19, r18
    35ba:	22 27       	eor	r18, r18
    35bc:	81 2f       	mov	r24, r17
    35be:	99 27       	eor	r25, r25
    35c0:	87 fd       	sbrc	r24, 7
    35c2:	90 95       	com	r25
    35c4:	28 2b       	or	r18, r24
    35c6:	39 2b       	or	r19, r25
    35c8:	30 93 0d 04 	sts	0x040D, r19
    35cc:	20 93 0c 04 	sts	0x040C, r18
		accX = 0;
		accY = 0;

	}

}
    35d0:	0f 90       	pop	r0
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	ff 90       	pop	r15
    35dc:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    35de:	4f 2d       	mov	r20, r15
    35e0:	55 27       	eor	r21, r21
    35e2:	47 fd       	sbrc	r20, 7
    35e4:	50 95       	com	r21
    35e6:	54 2f       	mov	r21, r20
    35e8:	44 27       	eor	r20, r20
    35ea:	60 2f       	mov	r22, r16
    35ec:	77 27       	eor	r23, r23
    35ee:	67 fd       	sbrc	r22, 7
    35f0:	70 95       	com	r23
    35f2:	46 2b       	or	r20, r22
    35f4:	57 2b       	or	r21, r23
    35f6:	60 91 10 04 	lds	r22, 0x0410
    35fa:	70 91 11 04 	lds	r23, 0x0411
    35fe:	46 1b       	sub	r20, r22
    3600:	57 0b       	sbc	r21, r23
    3602:	50 93 0b 04 	sts	0x040B, r21
    3606:	40 93 0a 04 	sts	0x040A, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    360a:	28 2f       	mov	r18, r24
    360c:	33 27       	eor	r19, r19
    360e:	27 fd       	sbrc	r18, 7
    3610:	30 95       	com	r19
    3612:	32 2f       	mov	r19, r18
    3614:	22 27       	eor	r18, r18
    3616:	81 2f       	mov	r24, r17
    3618:	99 27       	eor	r25, r25
    361a:	87 fd       	sbrc	r24, 7
    361c:	90 95       	com	r25
    361e:	28 2b       	or	r18, r24
    3620:	39 2b       	or	r19, r25
    3622:	80 91 12 04 	lds	r24, 0x0412
    3626:	90 91 13 04 	lds	r25, 0x0413
    362a:	28 1b       	sub	r18, r24
    362c:	39 0b       	sbc	r19, r25
    362e:	30 93 0d 04 	sts	0x040D, r19
    3632:	20 93 0c 04 	sts	0x040C, r18
		accX = 0;
		accY = 0;

	}

}
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3644:	80 91 13 02 	lds	r24, 0x0213
    3648:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    364c:	82 e3       	ldi	r24, 0x32	; 50
    364e:	86 cf       	rjmp	.-244    	; 0x355c <readAccelXY+0x46>

00003650 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	00 d0       	rcall	.+0      	; 0x3656 <readAccelXYZ+0x6>
    3656:	00 d0       	rcall	.+0      	; 0x3658 <readAccelXYZ+0x8>
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    365c:	80 91 09 04 	lds	r24, 0x0409
    3660:	88 23       	and	r24, r24
    3662:	c1 f0       	breq	.+48     	; 0x3694 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    3664:	81 30       	cpi	r24, 0x01	; 1
    3666:	09 f4       	brne	.+2      	; 0x366a <readAccelXYZ+0x1a>
    3668:	ad c0       	rjmp	.+346    	; 0x37c4 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    366a:	10 92 0b 04 	sts	0x040B, r1
    366e:	10 92 0a 04 	sts	0x040A, r1
		accY = 0;
    3672:	10 92 0d 04 	sts	0x040D, r1
    3676:	10 92 0c 04 	sts	0x040C, r1
		accZ = 0;
    367a:	10 92 0f 04 	sts	0x040F, r1
    367e:	10 92 0e 04 	sts	0x040E, r1

	}

}
    3682:	26 96       	adiw	r28, 0x06	; 6
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3694:	80 91 13 02 	lds	r24, 0x0213
    3698:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    369c:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    369e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    36a2:	80 91 13 02 	lds	r24, 0x0213
    36a6:	8f 5f       	subi	r24, 0xFF	; 255
    36a8:	0e 94 26 10 	call	0x204c	; 0x204c <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    36ac:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    36b6:	8a 83       	std	Y+2, r24	; 0x02
    36b8:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    36bc:	8b 83       	std	Y+3, r24	; 0x03
    36be:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    36c2:	8c 83       	std	Y+4, r24	; 0x04
    36c4:	0e 94 66 10 	call	0x20cc	; 0x20cc <i2c_readAck>
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    36ca:	0e 94 70 10 	call	0x20e0	; 0x20e0 <i2c_readNak>
    36ce:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    36d0:	0e 94 4c 10 	call	0x2098	; 0x2098 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    36d4:	80 91 53 04 	lds	r24, 0x0453
    36d8:	88 23       	and	r24, r24
    36da:	89 f1       	breq	.+98     	; 0x373e <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	99 27       	eor	r25, r25
    36e0:	87 fd       	sbrc	r24, 7
    36e2:	90 95       	com	r25
    36e4:	98 2f       	mov	r25, r24
    36e6:	88 27       	eor	r24, r24
    36e8:	29 81       	ldd	r18, Y+1	; 0x01
    36ea:	33 27       	eor	r19, r19
    36ec:	27 fd       	sbrc	r18, 7
    36ee:	30 95       	com	r19
    36f0:	82 2b       	or	r24, r18
    36f2:	93 2b       	or	r25, r19
    36f4:	90 93 0b 04 	sts	0x040B, r25
    36f8:	80 93 0a 04 	sts	0x040A, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    36fc:	8c 81       	ldd	r24, Y+4	; 0x04
    36fe:	99 27       	eor	r25, r25
    3700:	87 fd       	sbrc	r24, 7
    3702:	90 95       	com	r25
    3704:	98 2f       	mov	r25, r24
    3706:	88 27       	eor	r24, r24
    3708:	2b 81       	ldd	r18, Y+3	; 0x03
    370a:	33 27       	eor	r19, r19
    370c:	27 fd       	sbrc	r18, 7
    370e:	30 95       	com	r19
    3710:	82 2b       	or	r24, r18
    3712:	93 2b       	or	r25, r19
    3714:	90 93 0d 04 	sts	0x040D, r25
    3718:	80 93 0c 04 	sts	0x040C, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    371c:	8e 81       	ldd	r24, Y+6	; 0x06
    371e:	99 27       	eor	r25, r25
    3720:	87 fd       	sbrc	r24, 7
    3722:	90 95       	com	r25
    3724:	98 2f       	mov	r25, r24
    3726:	88 27       	eor	r24, r24
    3728:	2d 81       	ldd	r18, Y+5	; 0x05
    372a:	33 27       	eor	r19, r19
    372c:	27 fd       	sbrc	r18, 7
    372e:	30 95       	com	r19
    3730:	82 2b       	or	r24, r18
    3732:	93 2b       	or	r25, r19
    3734:	90 93 0f 04 	sts	0x040F, r25
    3738:	80 93 0e 04 	sts	0x040E, r24
    373c:	a2 cf       	rjmp	.-188    	; 0x3682 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	99 27       	eor	r25, r25
    3742:	87 fd       	sbrc	r24, 7
    3744:	90 95       	com	r25
    3746:	98 2f       	mov	r25, r24
    3748:	88 27       	eor	r24, r24
    374a:	29 81       	ldd	r18, Y+1	; 0x01
    374c:	33 27       	eor	r19, r19
    374e:	27 fd       	sbrc	r18, 7
    3750:	30 95       	com	r19
    3752:	82 2b       	or	r24, r18
    3754:	93 2b       	or	r25, r19
    3756:	20 91 10 04 	lds	r18, 0x0410
    375a:	30 91 11 04 	lds	r19, 0x0411
    375e:	82 1b       	sub	r24, r18
    3760:	93 0b       	sbc	r25, r19
    3762:	90 93 0b 04 	sts	0x040B, r25
    3766:	80 93 0a 04 	sts	0x040A, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    376a:	8c 81       	ldd	r24, Y+4	; 0x04
    376c:	99 27       	eor	r25, r25
    376e:	87 fd       	sbrc	r24, 7
    3770:	90 95       	com	r25
    3772:	98 2f       	mov	r25, r24
    3774:	88 27       	eor	r24, r24
    3776:	2b 81       	ldd	r18, Y+3	; 0x03
    3778:	33 27       	eor	r19, r19
    377a:	27 fd       	sbrc	r18, 7
    377c:	30 95       	com	r19
    377e:	82 2b       	or	r24, r18
    3780:	93 2b       	or	r25, r19
    3782:	20 91 12 04 	lds	r18, 0x0412
    3786:	30 91 13 04 	lds	r19, 0x0413
    378a:	82 1b       	sub	r24, r18
    378c:	93 0b       	sbc	r25, r19
    378e:	90 93 0d 04 	sts	0x040D, r25
    3792:	80 93 0c 04 	sts	0x040C, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	99 27       	eor	r25, r25
    379a:	87 fd       	sbrc	r24, 7
    379c:	90 95       	com	r25
    379e:	98 2f       	mov	r25, r24
    37a0:	88 27       	eor	r24, r24
    37a2:	2d 81       	ldd	r18, Y+5	; 0x05
    37a4:	33 27       	eor	r19, r19
    37a6:	27 fd       	sbrc	r18, 7
    37a8:	30 95       	com	r19
    37aa:	82 2b       	or	r24, r18
    37ac:	93 2b       	or	r25, r19
    37ae:	20 91 14 04 	lds	r18, 0x0414
    37b2:	30 91 15 04 	lds	r19, 0x0415
    37b6:	82 1b       	sub	r24, r18
    37b8:	93 0b       	sbc	r25, r19
    37ba:	90 93 0f 04 	sts	0x040F, r25
    37be:	80 93 0e 04 	sts	0x040E, r24
    37c2:	5f cf       	rjmp	.-322    	; 0x3682 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    37c4:	80 91 13 02 	lds	r24, 0x0213
    37c8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    37cc:	82 e3       	ldi	r24, 0x32	; 50
    37ce:	67 cf       	rjmp	.-306    	; 0x369e <readAccelXYZ+0x4e>

000037d0 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    37d4:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    37d8:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    37dc:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	0e 94 bf 19 	call	0x337e	; 0x337e <updateRedLed>
	updateGreenLed(pwm_green);
    37e6:	80 91 0d 02 	lds	r24, 0x020D
    37ea:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <updateGreenLed>
	updateBlueLed(pwm_blue);
    37ee:	80 91 0e 02 	lds	r24, 0x020E
    37f2:	0e 94 e7 19 	call	0x33ce	; 0x33ce <updateBlueLed>

	calibrationCycle = 0;
    37f6:	10 92 23 04 	sts	0x0423, r1
    37fa:	10 92 22 04 	sts	0x0422, r1
	startCalibration = 1;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	80 93 53 04 	sts	0x0453, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3804:	c1 e0       	ldi	r28, 0x01	; 1
    3806:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3808:	0e 94 28 1b 	call	0x3650	; 0x3650 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    380c:	20 91 22 04 	lds	r18, 0x0422
    3810:	30 91 23 04 	lds	r19, 0x0423
    3814:	21 31       	cpi	r18, 0x11	; 17
    3816:	31 05       	cpc	r19, r1
    3818:	0c f4       	brge	.+2      	; 0x381c <calibrateSensors+0x4c>
    381a:	35 c1       	rjmp	.+618    	; 0x3a86 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    381c:	80 91 8f 03 	lds	r24, 0x038F
    3820:	90 91 90 03 	lds	r25, 0x0390
    3824:	a0 91 91 03 	lds	r26, 0x0391
    3828:	b0 91 92 03 	lds	r27, 0x0392
    382c:	54 e0       	ldi	r21, 0x04	; 4
    382e:	b6 95       	lsr	r27
    3830:	a7 95       	ror	r26
    3832:	97 95       	ror	r25
    3834:	87 95       	ror	r24
    3836:	5a 95       	dec	r21
    3838:	d1 f7       	brne	.-12     	; 0x382e <calibrateSensors+0x5e>
    383a:	90 93 78 03 	sts	0x0378, r25
    383e:	80 93 77 03 	sts	0x0377, r24
    3842:	80 91 93 03 	lds	r24, 0x0393
    3846:	90 91 94 03 	lds	r25, 0x0394
    384a:	a0 91 95 03 	lds	r26, 0x0395
    384e:	b0 91 96 03 	lds	r27, 0x0396
    3852:	44 e0       	ldi	r20, 0x04	; 4
    3854:	b6 95       	lsr	r27
    3856:	a7 95       	ror	r26
    3858:	97 95       	ror	r25
    385a:	87 95       	ror	r24
    385c:	4a 95       	dec	r20
    385e:	d1 f7       	brne	.-12     	; 0x3854 <calibrateSensors+0x84>
    3860:	90 93 7a 03 	sts	0x037A, r25
    3864:	80 93 79 03 	sts	0x0379, r24
    3868:	80 91 97 03 	lds	r24, 0x0397
    386c:	90 91 98 03 	lds	r25, 0x0398
    3870:	a0 91 99 03 	lds	r26, 0x0399
    3874:	b0 91 9a 03 	lds	r27, 0x039A
    3878:	34 e0       	ldi	r19, 0x04	; 4
    387a:	b6 95       	lsr	r27
    387c:	a7 95       	ror	r26
    387e:	97 95       	ror	r25
    3880:	87 95       	ror	r24
    3882:	3a 95       	dec	r19
    3884:	d1 f7       	brne	.-12     	; 0x387a <calibrateSensors+0xaa>
    3886:	90 93 7c 03 	sts	0x037C, r25
    388a:	80 93 7b 03 	sts	0x037B, r24
    388e:	80 91 9b 03 	lds	r24, 0x039B
    3892:	90 91 9c 03 	lds	r25, 0x039C
    3896:	a0 91 9d 03 	lds	r26, 0x039D
    389a:	b0 91 9e 03 	lds	r27, 0x039E
    389e:	24 e0       	ldi	r18, 0x04	; 4
    38a0:	b6 95       	lsr	r27
    38a2:	a7 95       	ror	r26
    38a4:	97 95       	ror	r25
    38a6:	87 95       	ror	r24
    38a8:	2a 95       	dec	r18
    38aa:	d1 f7       	brne	.-12     	; 0x38a0 <calibrateSensors+0xd0>
    38ac:	90 93 7e 03 	sts	0x037E, r25
    38b0:	80 93 7d 03 	sts	0x037D, r24
    38b4:	80 91 9f 03 	lds	r24, 0x039F
    38b8:	90 91 a0 03 	lds	r25, 0x03A0
    38bc:	a0 91 a1 03 	lds	r26, 0x03A1
    38c0:	b0 91 a2 03 	lds	r27, 0x03A2
    38c4:	f4 e0       	ldi	r31, 0x04	; 4
    38c6:	b6 95       	lsr	r27
    38c8:	a7 95       	ror	r26
    38ca:	97 95       	ror	r25
    38cc:	87 95       	ror	r24
    38ce:	fa 95       	dec	r31
    38d0:	d1 f7       	brne	.-12     	; 0x38c6 <calibrateSensors+0xf6>
    38d2:	90 93 80 03 	sts	0x0380, r25
    38d6:	80 93 7f 03 	sts	0x037F, r24
    38da:	80 91 a3 03 	lds	r24, 0x03A3
    38de:	90 91 a4 03 	lds	r25, 0x03A4
    38e2:	a0 91 a5 03 	lds	r26, 0x03A5
    38e6:	b0 91 a6 03 	lds	r27, 0x03A6
    38ea:	e4 e0       	ldi	r30, 0x04	; 4
    38ec:	b6 95       	lsr	r27
    38ee:	a7 95       	ror	r26
    38f0:	97 95       	ror	r25
    38f2:	87 95       	ror	r24
    38f4:	ea 95       	dec	r30
    38f6:	d1 f7       	brne	.-12     	; 0x38ec <calibrateSensors+0x11c>
    38f8:	90 93 82 03 	sts	0x0382, r25
    38fc:	80 93 81 03 	sts	0x0381, r24
    3900:	80 91 a7 03 	lds	r24, 0x03A7
    3904:	90 91 a8 03 	lds	r25, 0x03A8
    3908:	a0 91 a9 03 	lds	r26, 0x03A9
    390c:	b0 91 aa 03 	lds	r27, 0x03AA
    3910:	74 e0       	ldi	r23, 0x04	; 4
    3912:	b6 95       	lsr	r27
    3914:	a7 95       	ror	r26
    3916:	97 95       	ror	r25
    3918:	87 95       	ror	r24
    391a:	7a 95       	dec	r23
    391c:	d1 f7       	brne	.-12     	; 0x3912 <calibrateSensors+0x142>
    391e:	90 93 84 03 	sts	0x0384, r25
    3922:	80 93 83 03 	sts	0x0383, r24
    3926:	80 91 ab 03 	lds	r24, 0x03AB
    392a:	90 91 ac 03 	lds	r25, 0x03AC
    392e:	a0 91 ad 03 	lds	r26, 0x03AD
    3932:	b0 91 ae 03 	lds	r27, 0x03AE
    3936:	64 e0       	ldi	r22, 0x04	; 4
    3938:	b6 95       	lsr	r27
    393a:	a7 95       	ror	r26
    393c:	97 95       	ror	r25
    393e:	87 95       	ror	r24
    3940:	6a 95       	dec	r22
    3942:	d1 f7       	brne	.-12     	; 0x3938 <calibrateSensors+0x168>
    3944:	90 93 86 03 	sts	0x0386, r25
    3948:	80 93 85 03 	sts	0x0385, r24
    394c:	80 91 b3 03 	lds	r24, 0x03B3
    3950:	90 91 b4 03 	lds	r25, 0x03B4
    3954:	a0 91 b5 03 	lds	r26, 0x03B5
    3958:	b0 91 b6 03 	lds	r27, 0x03B6
    395c:	54 e0       	ldi	r21, 0x04	; 4
    395e:	b6 95       	lsr	r27
    3960:	a7 95       	ror	r26
    3962:	97 95       	ror	r25
    3964:	87 95       	ror	r24
    3966:	5a 95       	dec	r21
    3968:	d1 f7       	brne	.-12     	; 0x395e <calibrateSensors+0x18e>
    396a:	9c 01       	movw	r18, r24
    396c:	80 91 b7 03 	lds	r24, 0x03B7
    3970:	90 91 b8 03 	lds	r25, 0x03B8
    3974:	a0 91 b9 03 	lds	r26, 0x03B9
    3978:	b0 91 ba 03 	lds	r27, 0x03BA
    397c:	44 e0       	ldi	r20, 0x04	; 4
    397e:	b6 95       	lsr	r27
    3980:	a7 95       	ror	r26
    3982:	97 95       	ror	r25
    3984:	87 95       	ror	r24
    3986:	4a 95       	dec	r20
    3988:	d1 f7       	brne	.-12     	; 0x397e <calibrateSensors+0x1ae>
    398a:	bc 01       	movw	r22, r24
    398c:	80 91 bb 03 	lds	r24, 0x03BB
    3990:	90 91 bc 03 	lds	r25, 0x03BC
    3994:	a0 91 bd 03 	lds	r26, 0x03BD
    3998:	b0 91 be 03 	lds	r27, 0x03BE
    399c:	f4 e0       	ldi	r31, 0x04	; 4
    399e:	b6 95       	lsr	r27
    39a0:	a7 95       	ror	r26
    39a2:	97 95       	ror	r25
    39a4:	87 95       	ror	r24
    39a6:	fa 95       	dec	r31
    39a8:	d1 f7       	brne	.-12     	; 0x399e <calibrateSensors+0x1ce>
    39aa:	ac 01       	movw	r20, r24
    39ac:	80 91 af 03 	lds	r24, 0x03AF
    39b0:	90 91 b0 03 	lds	r25, 0x03B0
    39b4:	a0 91 b1 03 	lds	r26, 0x03B1
    39b8:	b0 91 b2 03 	lds	r27, 0x03B2
    39bc:	e4 e0       	ldi	r30, 0x04	; 4
    39be:	b6 95       	lsr	r27
    39c0:	a7 95       	ror	r26
    39c2:	97 95       	ror	r25
    39c4:	87 95       	ror	r24
    39c6:	ea 95       	dec	r30
    39c8:	d1 f7       	brne	.-12     	; 0x39be <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    39ca:	80 50       	subi	r24, 0x00	; 0
    39cc:	92 40       	sbci	r25, 0x02	; 2
    39ce:	90 93 88 03 	sts	0x0388, r25
    39d2:	80 93 87 03 	sts	0x0387, r24
    39d6:	20 50       	subi	r18, 0x00	; 0
    39d8:	32 40       	sbci	r19, 0x02	; 2
    39da:	30 93 8a 03 	sts	0x038A, r19
    39de:	20 93 89 03 	sts	0x0389, r18
    39e2:	60 50       	subi	r22, 0x00	; 0
    39e4:	72 40       	sbci	r23, 0x02	; 2
    39e6:	70 93 8c 03 	sts	0x038C, r23
    39ea:	60 93 8b 03 	sts	0x038B, r22
    39ee:	40 50       	subi	r20, 0x00	; 0
    39f0:	52 40       	sbci	r21, 0x02	; 2
    39f2:	50 93 8e 03 	sts	0x038E, r21
    39f6:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    39fa:	80 91 16 04 	lds	r24, 0x0416
    39fe:	90 91 17 04 	lds	r25, 0x0417
    3a02:	95 95       	asr	r25
    3a04:	87 95       	ror	r24
    3a06:	95 95       	asr	r25
    3a08:	87 95       	ror	r24
    3a0a:	95 95       	asr	r25
    3a0c:	87 95       	ror	r24
    3a0e:	95 95       	asr	r25
    3a10:	87 95       	ror	r24
    3a12:	90 93 11 04 	sts	0x0411, r25
    3a16:	80 93 10 04 	sts	0x0410, r24
			accOffsetY = accOffsetYSum>>4;
    3a1a:	80 91 18 04 	lds	r24, 0x0418
    3a1e:	90 91 19 04 	lds	r25, 0x0419
    3a22:	95 95       	asr	r25
    3a24:	87 95       	ror	r24
    3a26:	95 95       	asr	r25
    3a28:	87 95       	ror	r24
    3a2a:	95 95       	asr	r25
    3a2c:	87 95       	ror	r24
    3a2e:	95 95       	asr	r25
    3a30:	87 95       	ror	r24
    3a32:	90 93 13 04 	sts	0x0413, r25
    3a36:	80 93 12 04 	sts	0x0412, r24
			accOffsetZ = accOffsetZSum>>4;
    3a3a:	80 91 1a 04 	lds	r24, 0x041A
    3a3e:	90 91 1b 04 	lds	r25, 0x041B
    3a42:	95 95       	asr	r25
    3a44:	87 95       	ror	r24
    3a46:	95 95       	asr	r25
    3a48:	87 95       	ror	r24
    3a4a:	95 95       	asr	r25
    3a4c:	87 95       	ror	r24
    3a4e:	95 95       	asr	r25
    3a50:	87 95       	ror	r24
    3a52:	90 93 15 04 	sts	0x0415, r25
    3a56:	80 93 14 04 	sts	0x0414, r24

			startCalibration = 0;
    3a5a:	10 92 53 04 	sts	0x0453, r1

		}

	}

	pwm_red = 255;
    3a5e:	8f ef       	ldi	r24, 0xFF	; 255
    3a60:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3a64:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3a68:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3a6c:	0e 94 bf 19 	call	0x337e	; 0x337e <updateRedLed>
	updateGreenLed(pwm_green);
    3a70:	80 91 0d 02 	lds	r24, 0x020D
    3a74:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <updateGreenLed>
	updateBlueLed(pwm_blue);
    3a78:	80 91 0e 02 	lds	r24, 0x020E
    3a7c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <updateBlueLed>

}
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3a86:	80 91 c6 03 	lds	r24, 0x03C6
    3a8a:	88 23       	and	r24, r24
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <calibrateSensors+0x2c0>
    3a8e:	86 c1       	rjmp	.+780    	; 0x3d9c <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3a90:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    3a94:	21 15       	cp	r18, r1
    3a96:	31 05       	cpc	r19, r1
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <calibrateSensors+0x2cc>
    3a9a:	86 c1       	rjmp	.+780    	; 0x3da8 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3a9c:	80 91 5f 03 	lds	r24, 0x035F
    3aa0:	90 91 60 03 	lds	r25, 0x0360
    3aa4:	aa 27       	eor	r26, r26
    3aa6:	97 fd       	sbrc	r25, 7
    3aa8:	a0 95       	com	r26
    3aaa:	ba 2f       	mov	r27, r26
    3aac:	40 91 8f 03 	lds	r20, 0x038F
    3ab0:	50 91 90 03 	lds	r21, 0x0390
    3ab4:	60 91 91 03 	lds	r22, 0x0391
    3ab8:	70 91 92 03 	lds	r23, 0x0392
    3abc:	84 0f       	add	r24, r20
    3abe:	95 1f       	adc	r25, r21
    3ac0:	a6 1f       	adc	r26, r22
    3ac2:	b7 1f       	adc	r27, r23
    3ac4:	80 93 8f 03 	sts	0x038F, r24
    3ac8:	90 93 90 03 	sts	0x0390, r25
    3acc:	a0 93 91 03 	sts	0x0391, r26
    3ad0:	b0 93 92 03 	sts	0x0392, r27
    3ad4:	80 91 61 03 	lds	r24, 0x0361
    3ad8:	90 91 62 03 	lds	r25, 0x0362
    3adc:	aa 27       	eor	r26, r26
    3ade:	97 fd       	sbrc	r25, 7
    3ae0:	a0 95       	com	r26
    3ae2:	ba 2f       	mov	r27, r26
    3ae4:	40 91 93 03 	lds	r20, 0x0393
    3ae8:	50 91 94 03 	lds	r21, 0x0394
    3aec:	60 91 95 03 	lds	r22, 0x0395
    3af0:	70 91 96 03 	lds	r23, 0x0396
    3af4:	84 0f       	add	r24, r20
    3af6:	95 1f       	adc	r25, r21
    3af8:	a6 1f       	adc	r26, r22
    3afa:	b7 1f       	adc	r27, r23
    3afc:	80 93 93 03 	sts	0x0393, r24
    3b00:	90 93 94 03 	sts	0x0394, r25
    3b04:	a0 93 95 03 	sts	0x0395, r26
    3b08:	b0 93 96 03 	sts	0x0396, r27
    3b0c:	80 91 63 03 	lds	r24, 0x0363
    3b10:	90 91 64 03 	lds	r25, 0x0364
    3b14:	aa 27       	eor	r26, r26
    3b16:	97 fd       	sbrc	r25, 7
    3b18:	a0 95       	com	r26
    3b1a:	ba 2f       	mov	r27, r26
    3b1c:	40 91 97 03 	lds	r20, 0x0397
    3b20:	50 91 98 03 	lds	r21, 0x0398
    3b24:	60 91 99 03 	lds	r22, 0x0399
    3b28:	70 91 9a 03 	lds	r23, 0x039A
    3b2c:	84 0f       	add	r24, r20
    3b2e:	95 1f       	adc	r25, r21
    3b30:	a6 1f       	adc	r26, r22
    3b32:	b7 1f       	adc	r27, r23
    3b34:	80 93 97 03 	sts	0x0397, r24
    3b38:	90 93 98 03 	sts	0x0398, r25
    3b3c:	a0 93 99 03 	sts	0x0399, r26
    3b40:	b0 93 9a 03 	sts	0x039A, r27
    3b44:	80 91 65 03 	lds	r24, 0x0365
    3b48:	90 91 66 03 	lds	r25, 0x0366
    3b4c:	aa 27       	eor	r26, r26
    3b4e:	97 fd       	sbrc	r25, 7
    3b50:	a0 95       	com	r26
    3b52:	ba 2f       	mov	r27, r26
    3b54:	40 91 9b 03 	lds	r20, 0x039B
    3b58:	50 91 9c 03 	lds	r21, 0x039C
    3b5c:	60 91 9d 03 	lds	r22, 0x039D
    3b60:	70 91 9e 03 	lds	r23, 0x039E
    3b64:	84 0f       	add	r24, r20
    3b66:	95 1f       	adc	r25, r21
    3b68:	a6 1f       	adc	r26, r22
    3b6a:	b7 1f       	adc	r27, r23
    3b6c:	80 93 9b 03 	sts	0x039B, r24
    3b70:	90 93 9c 03 	sts	0x039C, r25
    3b74:	a0 93 9d 03 	sts	0x039D, r26
    3b78:	b0 93 9e 03 	sts	0x039E, r27
    3b7c:	80 91 67 03 	lds	r24, 0x0367
    3b80:	90 91 68 03 	lds	r25, 0x0368
    3b84:	aa 27       	eor	r26, r26
    3b86:	97 fd       	sbrc	r25, 7
    3b88:	a0 95       	com	r26
    3b8a:	ba 2f       	mov	r27, r26
    3b8c:	40 91 9f 03 	lds	r20, 0x039F
    3b90:	50 91 a0 03 	lds	r21, 0x03A0
    3b94:	60 91 a1 03 	lds	r22, 0x03A1
    3b98:	70 91 a2 03 	lds	r23, 0x03A2
    3b9c:	84 0f       	add	r24, r20
    3b9e:	95 1f       	adc	r25, r21
    3ba0:	a6 1f       	adc	r26, r22
    3ba2:	b7 1f       	adc	r27, r23
    3ba4:	80 93 9f 03 	sts	0x039F, r24
    3ba8:	90 93 a0 03 	sts	0x03A0, r25
    3bac:	a0 93 a1 03 	sts	0x03A1, r26
    3bb0:	b0 93 a2 03 	sts	0x03A2, r27
    3bb4:	80 91 69 03 	lds	r24, 0x0369
    3bb8:	90 91 6a 03 	lds	r25, 0x036A
    3bbc:	aa 27       	eor	r26, r26
    3bbe:	97 fd       	sbrc	r25, 7
    3bc0:	a0 95       	com	r26
    3bc2:	ba 2f       	mov	r27, r26
    3bc4:	40 91 a3 03 	lds	r20, 0x03A3
    3bc8:	50 91 a4 03 	lds	r21, 0x03A4
    3bcc:	60 91 a5 03 	lds	r22, 0x03A5
    3bd0:	70 91 a6 03 	lds	r23, 0x03A6
    3bd4:	84 0f       	add	r24, r20
    3bd6:	95 1f       	adc	r25, r21
    3bd8:	a6 1f       	adc	r26, r22
    3bda:	b7 1f       	adc	r27, r23
    3bdc:	80 93 a3 03 	sts	0x03A3, r24
    3be0:	90 93 a4 03 	sts	0x03A4, r25
    3be4:	a0 93 a5 03 	sts	0x03A5, r26
    3be8:	b0 93 a6 03 	sts	0x03A6, r27
    3bec:	80 91 6b 03 	lds	r24, 0x036B
    3bf0:	90 91 6c 03 	lds	r25, 0x036C
    3bf4:	aa 27       	eor	r26, r26
    3bf6:	97 fd       	sbrc	r25, 7
    3bf8:	a0 95       	com	r26
    3bfa:	ba 2f       	mov	r27, r26
    3bfc:	40 91 a7 03 	lds	r20, 0x03A7
    3c00:	50 91 a8 03 	lds	r21, 0x03A8
    3c04:	60 91 a9 03 	lds	r22, 0x03A9
    3c08:	70 91 aa 03 	lds	r23, 0x03AA
    3c0c:	84 0f       	add	r24, r20
    3c0e:	95 1f       	adc	r25, r21
    3c10:	a6 1f       	adc	r26, r22
    3c12:	b7 1f       	adc	r27, r23
    3c14:	80 93 a7 03 	sts	0x03A7, r24
    3c18:	90 93 a8 03 	sts	0x03A8, r25
    3c1c:	a0 93 a9 03 	sts	0x03A9, r26
    3c20:	b0 93 aa 03 	sts	0x03AA, r27
    3c24:	80 91 6d 03 	lds	r24, 0x036D
    3c28:	90 91 6e 03 	lds	r25, 0x036E
    3c2c:	aa 27       	eor	r26, r26
    3c2e:	97 fd       	sbrc	r25, 7
    3c30:	a0 95       	com	r26
    3c32:	ba 2f       	mov	r27, r26
    3c34:	40 91 ab 03 	lds	r20, 0x03AB
    3c38:	50 91 ac 03 	lds	r21, 0x03AC
    3c3c:	60 91 ad 03 	lds	r22, 0x03AD
    3c40:	70 91 ae 03 	lds	r23, 0x03AE
    3c44:	84 0f       	add	r24, r20
    3c46:	95 1f       	adc	r25, r21
    3c48:	a6 1f       	adc	r26, r22
    3c4a:	b7 1f       	adc	r27, r23
    3c4c:	80 93 ab 03 	sts	0x03AB, r24
    3c50:	90 93 ac 03 	sts	0x03AC, r25
    3c54:	a0 93 ad 03 	sts	0x03AD, r26
    3c58:	b0 93 ae 03 	sts	0x03AE, r27
    3c5c:	80 91 6f 03 	lds	r24, 0x036F
    3c60:	90 91 70 03 	lds	r25, 0x0370
    3c64:	aa 27       	eor	r26, r26
    3c66:	97 fd       	sbrc	r25, 7
    3c68:	a0 95       	com	r26
    3c6a:	ba 2f       	mov	r27, r26
    3c6c:	40 91 af 03 	lds	r20, 0x03AF
    3c70:	50 91 b0 03 	lds	r21, 0x03B0
    3c74:	60 91 b1 03 	lds	r22, 0x03B1
    3c78:	70 91 b2 03 	lds	r23, 0x03B2
    3c7c:	84 0f       	add	r24, r20
    3c7e:	95 1f       	adc	r25, r21
    3c80:	a6 1f       	adc	r26, r22
    3c82:	b7 1f       	adc	r27, r23
    3c84:	80 93 af 03 	sts	0x03AF, r24
    3c88:	90 93 b0 03 	sts	0x03B0, r25
    3c8c:	a0 93 b1 03 	sts	0x03B1, r26
    3c90:	b0 93 b2 03 	sts	0x03B2, r27
    3c94:	80 91 71 03 	lds	r24, 0x0371
    3c98:	90 91 72 03 	lds	r25, 0x0372
    3c9c:	aa 27       	eor	r26, r26
    3c9e:	97 fd       	sbrc	r25, 7
    3ca0:	a0 95       	com	r26
    3ca2:	ba 2f       	mov	r27, r26
    3ca4:	40 91 b3 03 	lds	r20, 0x03B3
    3ca8:	50 91 b4 03 	lds	r21, 0x03B4
    3cac:	60 91 b5 03 	lds	r22, 0x03B5
    3cb0:	70 91 b6 03 	lds	r23, 0x03B6
    3cb4:	84 0f       	add	r24, r20
    3cb6:	95 1f       	adc	r25, r21
    3cb8:	a6 1f       	adc	r26, r22
    3cba:	b7 1f       	adc	r27, r23
    3cbc:	80 93 b3 03 	sts	0x03B3, r24
    3cc0:	90 93 b4 03 	sts	0x03B4, r25
    3cc4:	a0 93 b5 03 	sts	0x03B5, r26
    3cc8:	b0 93 b6 03 	sts	0x03B6, r27
    3ccc:	80 91 73 03 	lds	r24, 0x0373
    3cd0:	90 91 74 03 	lds	r25, 0x0374
    3cd4:	aa 27       	eor	r26, r26
    3cd6:	97 fd       	sbrc	r25, 7
    3cd8:	a0 95       	com	r26
    3cda:	ba 2f       	mov	r27, r26
    3cdc:	40 91 b7 03 	lds	r20, 0x03B7
    3ce0:	50 91 b8 03 	lds	r21, 0x03B8
    3ce4:	60 91 b9 03 	lds	r22, 0x03B9
    3ce8:	70 91 ba 03 	lds	r23, 0x03BA
    3cec:	84 0f       	add	r24, r20
    3cee:	95 1f       	adc	r25, r21
    3cf0:	a6 1f       	adc	r26, r22
    3cf2:	b7 1f       	adc	r27, r23
    3cf4:	80 93 b7 03 	sts	0x03B7, r24
    3cf8:	90 93 b8 03 	sts	0x03B8, r25
    3cfc:	a0 93 b9 03 	sts	0x03B9, r26
    3d00:	b0 93 ba 03 	sts	0x03BA, r27
    3d04:	80 91 75 03 	lds	r24, 0x0375
    3d08:	90 91 76 03 	lds	r25, 0x0376
    3d0c:	aa 27       	eor	r26, r26
    3d0e:	97 fd       	sbrc	r25, 7
    3d10:	a0 95       	com	r26
    3d12:	ba 2f       	mov	r27, r26
    3d14:	40 91 bb 03 	lds	r20, 0x03BB
    3d18:	50 91 bc 03 	lds	r21, 0x03BC
    3d1c:	60 91 bd 03 	lds	r22, 0x03BD
    3d20:	70 91 be 03 	lds	r23, 0x03BE
    3d24:	84 0f       	add	r24, r20
    3d26:	95 1f       	adc	r25, r21
    3d28:	a6 1f       	adc	r26, r22
    3d2a:	b7 1f       	adc	r27, r23
    3d2c:	80 93 bb 03 	sts	0x03BB, r24
    3d30:	90 93 bc 03 	sts	0x03BC, r25
    3d34:	a0 93 bd 03 	sts	0x03BD, r26
    3d38:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    3d3c:	80 91 16 04 	lds	r24, 0x0416
    3d40:	90 91 17 04 	lds	r25, 0x0417
    3d44:	40 91 0a 04 	lds	r20, 0x040A
    3d48:	50 91 0b 04 	lds	r21, 0x040B
    3d4c:	84 0f       	add	r24, r20
    3d4e:	95 1f       	adc	r25, r21
    3d50:	90 93 17 04 	sts	0x0417, r25
    3d54:	80 93 16 04 	sts	0x0416, r24
				accOffsetYSum += accY;
    3d58:	80 91 18 04 	lds	r24, 0x0418
    3d5c:	90 91 19 04 	lds	r25, 0x0419
    3d60:	40 91 0c 04 	lds	r20, 0x040C
    3d64:	50 91 0d 04 	lds	r21, 0x040D
    3d68:	84 0f       	add	r24, r20
    3d6a:	95 1f       	adc	r25, r21
    3d6c:	90 93 19 04 	sts	0x0419, r25
    3d70:	80 93 18 04 	sts	0x0418, r24
				accOffsetZSum += accZ;
    3d74:	80 91 1a 04 	lds	r24, 0x041A
    3d78:	90 91 1b 04 	lds	r25, 0x041B
    3d7c:	40 91 0e 04 	lds	r20, 0x040E
    3d80:	50 91 0f 04 	lds	r21, 0x040F
    3d84:	84 0f       	add	r24, r20
    3d86:	95 1f       	adc	r25, r21
    3d88:	90 93 1b 04 	sts	0x041B, r25
    3d8c:	80 93 1a 04 	sts	0x041A, r24

				calibrationCycle++;
    3d90:	2f 5f       	subi	r18, 0xFF	; 255
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	30 93 23 04 	sts	0x0423, r19
    3d98:	20 93 22 04 	sts	0x0422, r18
    3d9c:	80 91 53 04 	lds	r24, 0x0453
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    3da0:	88 23       	and	r24, r24
    3da2:	09 f0       	breq	.+2      	; 0x3da6 <calibrateSensors+0x5d6>
    3da4:	31 cd       	rjmp	.-1438   	; 0x3808 <calibrateSensors+0x38>
    3da6:	5b ce       	rjmp	.-842    	; 0x3a5e <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3da8:	10 92 8f 03 	sts	0x038F, r1
    3dac:	10 92 90 03 	sts	0x0390, r1
    3db0:	10 92 91 03 	sts	0x0391, r1
    3db4:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    3db8:	10 92 78 03 	sts	0x0378, r1
    3dbc:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3dc0:	10 92 93 03 	sts	0x0393, r1
    3dc4:	10 92 94 03 	sts	0x0394, r1
    3dc8:	10 92 95 03 	sts	0x0395, r1
    3dcc:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    3dd0:	10 92 7a 03 	sts	0x037A, r1
    3dd4:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3dd8:	10 92 97 03 	sts	0x0397, r1
    3ddc:	10 92 98 03 	sts	0x0398, r1
    3de0:	10 92 99 03 	sts	0x0399, r1
    3de4:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    3de8:	10 92 7c 03 	sts	0x037C, r1
    3dec:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3df0:	10 92 9b 03 	sts	0x039B, r1
    3df4:	10 92 9c 03 	sts	0x039C, r1
    3df8:	10 92 9d 03 	sts	0x039D, r1
    3dfc:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    3e00:	10 92 7e 03 	sts	0x037E, r1
    3e04:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e08:	10 92 9f 03 	sts	0x039F, r1
    3e0c:	10 92 a0 03 	sts	0x03A0, r1
    3e10:	10 92 a1 03 	sts	0x03A1, r1
    3e14:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    3e18:	10 92 80 03 	sts	0x0380, r1
    3e1c:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e20:	10 92 a3 03 	sts	0x03A3, r1
    3e24:	10 92 a4 03 	sts	0x03A4, r1
    3e28:	10 92 a5 03 	sts	0x03A5, r1
    3e2c:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    3e30:	10 92 82 03 	sts	0x0382, r1
    3e34:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e38:	10 92 a7 03 	sts	0x03A7, r1
    3e3c:	10 92 a8 03 	sts	0x03A8, r1
    3e40:	10 92 a9 03 	sts	0x03A9, r1
    3e44:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    3e48:	10 92 84 03 	sts	0x0384, r1
    3e4c:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e50:	10 92 ab 03 	sts	0x03AB, r1
    3e54:	10 92 ac 03 	sts	0x03AC, r1
    3e58:	10 92 ad 03 	sts	0x03AD, r1
    3e5c:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    3e60:	10 92 86 03 	sts	0x0386, r1
    3e64:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e68:	10 92 af 03 	sts	0x03AF, r1
    3e6c:	10 92 b0 03 	sts	0x03B0, r1
    3e70:	10 92 b1 03 	sts	0x03B1, r1
    3e74:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    3e78:	10 92 88 03 	sts	0x0388, r1
    3e7c:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e80:	10 92 b3 03 	sts	0x03B3, r1
    3e84:	10 92 b4 03 	sts	0x03B4, r1
    3e88:	10 92 b5 03 	sts	0x03B5, r1
    3e8c:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    3e90:	10 92 8a 03 	sts	0x038A, r1
    3e94:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e98:	10 92 b7 03 	sts	0x03B7, r1
    3e9c:	10 92 b8 03 	sts	0x03B8, r1
    3ea0:	10 92 b9 03 	sts	0x03B9, r1
    3ea4:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    3ea8:	10 92 8c 03 	sts	0x038C, r1
    3eac:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3eb0:	10 92 bb 03 	sts	0x03BB, r1
    3eb4:	10 92 bc 03 	sts	0x03BC, r1
    3eb8:	10 92 bd 03 	sts	0x03BD, r1
    3ebc:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    3ec0:	10 92 8e 03 	sts	0x038E, r1
    3ec4:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    3ec8:	10 92 17 04 	sts	0x0417, r1
    3ecc:	10 92 16 04 	sts	0x0416, r1
					accOffsetYSum = 0;
    3ed0:	10 92 19 04 	sts	0x0419, r1
    3ed4:	10 92 18 04 	sts	0x0418, r1
					accOffsetZSum = 0;
    3ed8:	10 92 1b 04 	sts	0x041B, r1
    3edc:	10 92 1a 04 	sts	0x041A, r1

					calibrationCycle++;
    3ee0:	d0 93 23 04 	sts	0x0423, r29
    3ee4:	c0 93 22 04 	sts	0x0422, r28
    3ee8:	80 91 53 04 	lds	r24, 0x0453

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    3eec:	59 cf       	rjmp	.-334    	; 0x3da0 <calibrateSensors+0x5d0>

00003eee <computeAngle>:

	}

}

void computeAngle() {
    3eee:	ef 92       	push	r14
    3ef0:	ff 92       	push	r15
    3ef2:	0f 93       	push	r16
    3ef4:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3ef6:	80 91 0e 04 	lds	r24, 0x040E
    3efa:	90 91 0f 04 	lds	r25, 0x040F
    3efe:	97 fd       	sbrc	r25, 7
    3f00:	5b c0       	rjmp	.+182    	; 0x3fb8 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    3f02:	80 31       	cpi	r24, 0x10	; 16
    3f04:	91 05       	cpc	r25, r1
    3f06:	08 f0       	brcs	.+2      	; 0x3f0a <computeAngle+0x1c>
    3f08:	42 c0       	rjmp	.+132    	; 0x3f8e <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    3f10:	90 91 14 02 	lds	r25, 0x0214
    3f14:	98 17       	cp	r25, r24
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <computeAngle+0x2c>
    3f18:	42 c0       	rjmp	.+132    	; 0x3f9e <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    3f1a:	10 92 1e 04 	sts	0x041E, r1
	}
	prevPosition = currPosition;
    3f1e:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    3f22:	60 91 0a 04 	lds	r22, 0x040A
    3f26:	70 91 0b 04 	lds	r23, 0x040B
    3f2a:	88 27       	eor	r24, r24
    3f2c:	77 fd       	sbrc	r23, 7
    3f2e:	80 95       	com	r24
    3f30:	98 2f       	mov	r25, r24
    3f32:	0e 94 df 20 	call	0x41be	; 0x41be <__floatsisf>
    3f36:	7b 01       	movw	r14, r22
    3f38:	8c 01       	movw	r16, r24
    3f3a:	60 91 0c 04 	lds	r22, 0x040C
    3f3e:	70 91 0d 04 	lds	r23, 0x040D
    3f42:	88 27       	eor	r24, r24
    3f44:	77 fd       	sbrc	r23, 7
    3f46:	80 95       	com	r24
    3f48:	98 2f       	mov	r25, r24
    3f4a:	0e 94 df 20 	call	0x41be	; 0x41be <__floatsisf>
    3f4e:	9b 01       	movw	r18, r22
    3f50:	ac 01       	movw	r20, r24
    3f52:	c8 01       	movw	r24, r16
    3f54:	b7 01       	movw	r22, r14
    3f56:	0e 94 17 24 	call	0x482e	; 0x482e <atan2>
    3f5a:	21 ee       	ldi	r18, 0xE1	; 225
    3f5c:	3e e2       	ldi	r19, 0x2E	; 46
    3f5e:	45 e6       	ldi	r20, 0x65	; 101
    3f60:	52 e4       	ldi	r21, 0x42	; 66
    3f62:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__mulsf3>
    3f66:	0e 94 3d 21 	call	0x427a	; 0x427a <__fixsfsi>
    3f6a:	9b 01       	movw	r18, r22
    3f6c:	70 93 1d 04 	sts	0x041D, r23
    3f70:	60 93 1c 04 	sts	0x041C, r22

	if(currentAngle < 0) {
    3f74:	77 ff       	sbrs	r23, 7
    3f76:	06 c0       	rjmp	.+12     	; 0x3f84 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    3f78:	28 59       	subi	r18, 0x98	; 152
    3f7a:	3e 4f       	sbci	r19, 0xFE	; 254
    3f7c:	30 93 1d 04 	sts	0x041D, r19
    3f80:	20 93 1c 04 	sts	0x041C, r18
	}

}
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	ff 90       	pop	r15
    3f8a:	ef 90       	pop	r14
    3f8c:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    3f8e:	10 92 15 02 	sts	0x0215, r1
    3f92:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    3f94:	90 91 14 02 	lds	r25, 0x0214
    3f98:	98 17       	cp	r25, r24
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <computeAngle+0xb0>
    3f9c:	be cf       	rjmp	.-132    	; 0x3f1a <computeAngle+0x2c>
		timesInSamePos++;
    3f9e:	90 91 1e 04 	lds	r25, 0x041E
    3fa2:	9f 5f       	subi	r25, 0xFF	; 255
    3fa4:	90 93 1e 04 	sts	0x041E, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    3fa8:	95 30       	cpi	r25, 0x05	; 5
    3faa:	08 f4       	brcc	.+2      	; 0x3fae <computeAngle+0xc0>
    3fac:	b8 cf       	rjmp	.-144    	; 0x3f1e <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    3fae:	10 92 1e 04 	sts	0x041E, r1
			robotPosition = currPosition;
    3fb2:	80 93 16 02 	sts	0x0216, r24
    3fb6:	b3 cf       	rjmp	.-154    	; 0x3f1e <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3fb8:	90 95       	com	r25
    3fba:	81 95       	neg	r24
    3fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbe:	a1 cf       	rjmp	.-190    	; 0x3f02 <computeAngle+0x14>

00003fc0 <__mulsf3>:
    3fc0:	a0 e2       	ldi	r26, 0x20	; 32
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	e6 ee       	ldi	r30, 0xE6	; 230
    3fc6:	ff e1       	ldi	r31, 0x1F	; 31
    3fc8:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__prologue_saves__+0x4>
    3fcc:	69 83       	std	Y+1, r22	; 0x01
    3fce:	7a 83       	std	Y+2, r23	; 0x02
    3fd0:	8b 83       	std	Y+3, r24	; 0x03
    3fd2:	9c 83       	std	Y+4, r25	; 0x04
    3fd4:	2d 83       	std	Y+5, r18	; 0x05
    3fd6:	3e 83       	std	Y+6, r19	; 0x06
    3fd8:	4f 83       	std	Y+7, r20	; 0x07
    3fda:	58 87       	std	Y+8, r21	; 0x08
    3fdc:	99 e0       	ldi	r25, 0x09	; 9
    3fde:	e9 2e       	mov	r14, r25
    3fe0:	f1 2c       	mov	r15, r1
    3fe2:	ec 0e       	add	r14, r28
    3fe4:	fd 1e       	adc	r15, r29
    3fe6:	b7 01       	movw	r22, r14
    3fe8:	ce 01       	movw	r24, r28
    3fea:	01 96       	adiw	r24, 0x01	; 1
    3fec:	0e 94 bd 22 	call	0x457a	; 0x457a <__unpack_f>
    3ff0:	8e 01       	movw	r16, r28
    3ff2:	0f 5e       	subi	r16, 0xEF	; 239
    3ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff6:	b8 01       	movw	r22, r16
    3ff8:	ce 01       	movw	r24, r28
    3ffa:	05 96       	adiw	r24, 0x05	; 5
    3ffc:	0e 94 bd 22 	call	0x457a	; 0x457a <__unpack_f>
    4000:	99 85       	ldd	r25, Y+9	; 0x09
    4002:	92 30       	cpi	r25, 0x02	; 2
    4004:	88 f0       	brcs	.+34     	; 0x4028 <__mulsf3+0x68>
    4006:	89 89       	ldd	r24, Y+17	; 0x11
    4008:	82 30       	cpi	r24, 0x02	; 2
    400a:	c0 f0       	brcs	.+48     	; 0x403c <__mulsf3+0x7c>
    400c:	94 30       	cpi	r25, 0x04	; 4
    400e:	19 f4       	brne	.+6      	; 0x4016 <__mulsf3+0x56>
    4010:	82 30       	cpi	r24, 0x02	; 2
    4012:	29 f0       	breq	.+10     	; 0x401e <__mulsf3+0x5e>
    4014:	09 c0       	rjmp	.+18     	; 0x4028 <__mulsf3+0x68>
    4016:	84 30       	cpi	r24, 0x04	; 4
    4018:	29 f4       	brne	.+10     	; 0x4024 <__mulsf3+0x64>
    401a:	92 30       	cpi	r25, 0x02	; 2
    401c:	79 f4       	brne	.+30     	; 0x403c <__mulsf3+0x7c>
    401e:	67 e1       	ldi	r22, 0x17	; 23
    4020:	72 e0       	ldi	r23, 0x02	; 2
    4022:	c6 c0       	rjmp	.+396    	; 0x41b0 <__mulsf3+0x1f0>
    4024:	92 30       	cpi	r25, 0x02	; 2
    4026:	41 f4       	brne	.+16     	; 0x4038 <__mulsf3+0x78>
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	9a 85       	ldd	r25, Y+10	; 0x0a
    402c:	8a 89       	ldd	r24, Y+18	; 0x12
    402e:	98 13       	cpse	r25, r24
    4030:	21 e0       	ldi	r18, 0x01	; 1
    4032:	2a 87       	std	Y+10, r18	; 0x0a
    4034:	b7 01       	movw	r22, r14
    4036:	bc c0       	rjmp	.+376    	; 0x41b0 <__mulsf3+0x1f0>
    4038:	82 30       	cpi	r24, 0x02	; 2
    403a:	41 f4       	brne	.+16     	; 0x404c <__mulsf3+0x8c>
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4040:	8a 89       	ldd	r24, Y+18	; 0x12
    4042:	98 13       	cpse	r25, r24
    4044:	21 e0       	ldi	r18, 0x01	; 1
    4046:	2a 8b       	std	Y+18, r18	; 0x12
    4048:	b8 01       	movw	r22, r16
    404a:	b2 c0       	rjmp	.+356    	; 0x41b0 <__mulsf3+0x1f0>
    404c:	cd 84       	ldd	r12, Y+13	; 0x0d
    404e:	de 84       	ldd	r13, Y+14	; 0x0e
    4050:	ef 84       	ldd	r14, Y+15	; 0x0f
    4052:	f8 88       	ldd	r15, Y+16	; 0x10
    4054:	0d 89       	ldd	r16, Y+21	; 0x15
    4056:	1e 89       	ldd	r17, Y+22	; 0x16
    4058:	2f 89       	ldd	r18, Y+23	; 0x17
    405a:	38 8d       	ldd	r19, Y+24	; 0x18
    405c:	88 24       	eor	r8, r8
    405e:	99 24       	eor	r9, r9
    4060:	54 01       	movw	r10, r8
    4062:	40 e0       	ldi	r20, 0x00	; 0
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	44 24       	eor	r4, r4
    406c:	55 24       	eor	r5, r5
    406e:	32 01       	movw	r6, r4
    4070:	e0 e0       	ldi	r30, 0x00	; 0
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	c6 01       	movw	r24, r12
    4076:	81 70       	andi	r24, 0x01	; 1
    4078:	90 70       	andi	r25, 0x00	; 0
    407a:	89 2b       	or	r24, r25
    407c:	d9 f0       	breq	.+54     	; 0x40b4 <__mulsf3+0xf4>
    407e:	80 0e       	add	r8, r16
    4080:	91 1e       	adc	r9, r17
    4082:	a2 1e       	adc	r10, r18
    4084:	b3 1e       	adc	r11, r19
    4086:	db 01       	movw	r26, r22
    4088:	ca 01       	movw	r24, r20
    408a:	84 0d       	add	r24, r4
    408c:	95 1d       	adc	r25, r5
    408e:	a6 1d       	adc	r26, r6
    4090:	b7 1d       	adc	r27, r7
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	50 e0       	ldi	r21, 0x00	; 0
    4096:	60 e0       	ldi	r22, 0x00	; 0
    4098:	70 e0       	ldi	r23, 0x00	; 0
    409a:	80 16       	cp	r8, r16
    409c:	91 06       	cpc	r9, r17
    409e:	a2 06       	cpc	r10, r18
    40a0:	b3 06       	cpc	r11, r19
    40a2:	20 f4       	brcc	.+8      	; 0x40ac <__mulsf3+0xec>
    40a4:	41 e0       	ldi	r20, 0x01	; 1
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	48 0f       	add	r20, r24
    40ae:	59 1f       	adc	r21, r25
    40b0:	6a 1f       	adc	r22, r26
    40b2:	7b 1f       	adc	r23, r27
    40b4:	44 0c       	add	r4, r4
    40b6:	55 1c       	adc	r5, r5
    40b8:	66 1c       	adc	r6, r6
    40ba:	77 1c       	adc	r7, r7
    40bc:	37 ff       	sbrs	r19, 7
    40be:	08 c0       	rjmp	.+16     	; 0x40d0 <__mulsf3+0x110>
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	a0 e0       	ldi	r26, 0x00	; 0
    40c6:	b0 e0       	ldi	r27, 0x00	; 0
    40c8:	48 2a       	or	r4, r24
    40ca:	59 2a       	or	r5, r25
    40cc:	6a 2a       	or	r6, r26
    40ce:	7b 2a       	or	r7, r27
    40d0:	31 96       	adiw	r30, 0x01	; 1
    40d2:	e0 32       	cpi	r30, 0x20	; 32
    40d4:	f1 05       	cpc	r31, r1
    40d6:	49 f0       	breq	.+18     	; 0x40ea <__mulsf3+0x12a>
    40d8:	00 0f       	add	r16, r16
    40da:	11 1f       	adc	r17, r17
    40dc:	22 1f       	adc	r18, r18
    40de:	33 1f       	adc	r19, r19
    40e0:	f6 94       	lsr	r15
    40e2:	e7 94       	ror	r14
    40e4:	d7 94       	ror	r13
    40e6:	c7 94       	ror	r12
    40e8:	c5 cf       	rjmp	.-118    	; 0x4074 <__mulsf3+0xb4>
    40ea:	8b 89       	ldd	r24, Y+19	; 0x13
    40ec:	9c 89       	ldd	r25, Y+20	; 0x14
    40ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    40f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    40f2:	82 0f       	add	r24, r18
    40f4:	93 1f       	adc	r25, r19
    40f6:	02 96       	adiw	r24, 0x02	; 2
    40f8:	9c 8f       	std	Y+28, r25	; 0x1c
    40fa:	8b 8f       	std	Y+27, r24	; 0x1b
    40fc:	1a 8e       	std	Y+26, r1	; 0x1a
    40fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4100:	8a 89       	ldd	r24, Y+18	; 0x12
    4102:	98 17       	cp	r25, r24
    4104:	11 f0       	breq	.+4      	; 0x410a <__mulsf3+0x14a>
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	8a 8f       	std	Y+26, r24	; 0x1a
    410a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    410c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    410e:	17 c0       	rjmp	.+46     	; 0x413e <__mulsf3+0x17e>
    4110:	ca 01       	movw	r24, r20
    4112:	81 70       	andi	r24, 0x01	; 1
    4114:	90 70       	andi	r25, 0x00	; 0
    4116:	89 2b       	or	r24, r25
    4118:	61 f0       	breq	.+24     	; 0x4132 <__mulsf3+0x172>
    411a:	b6 94       	lsr	r11
    411c:	a7 94       	ror	r10
    411e:	97 94       	ror	r9
    4120:	87 94       	ror	r8
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	a0 e0       	ldi	r26, 0x00	; 0
    4128:	b0 e8       	ldi	r27, 0x80	; 128
    412a:	88 2a       	or	r8, r24
    412c:	99 2a       	or	r9, r25
    412e:	aa 2a       	or	r10, r26
    4130:	bb 2a       	or	r11, r27
    4132:	76 95       	lsr	r23
    4134:	67 95       	ror	r22
    4136:	57 95       	ror	r21
    4138:	47 95       	ror	r20
    413a:	2f 5f       	subi	r18, 0xFF	; 255
    413c:	3f 4f       	sbci	r19, 0xFF	; 255
    413e:	77 fd       	sbrc	r23, 7
    4140:	e7 cf       	rjmp	.-50     	; 0x4110 <__mulsf3+0x150>
    4142:	c9 01       	movw	r24, r18
    4144:	0b c0       	rjmp	.+22     	; 0x415c <__mulsf3+0x19c>
    4146:	44 0f       	add	r20, r20
    4148:	55 1f       	adc	r21, r21
    414a:	66 1f       	adc	r22, r22
    414c:	77 1f       	adc	r23, r23
    414e:	b7 fc       	sbrc	r11, 7
    4150:	41 60       	ori	r20, 0x01	; 1
    4152:	88 0c       	add	r8, r8
    4154:	99 1c       	adc	r9, r9
    4156:	aa 1c       	adc	r10, r10
    4158:	bb 1c       	adc	r11, r11
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	40 30       	cpi	r20, 0x00	; 0
    415e:	a0 e0       	ldi	r26, 0x00	; 0
    4160:	5a 07       	cpc	r21, r26
    4162:	a0 e0       	ldi	r26, 0x00	; 0
    4164:	6a 07       	cpc	r22, r26
    4166:	a0 e4       	ldi	r26, 0x40	; 64
    4168:	7a 07       	cpc	r23, r26
    416a:	68 f3       	brcs	.-38     	; 0x4146 <__mulsf3+0x186>
    416c:	9c 8f       	std	Y+28, r25	; 0x1c
    416e:	8b 8f       	std	Y+27, r24	; 0x1b
    4170:	db 01       	movw	r26, r22
    4172:	ca 01       	movw	r24, r20
    4174:	8f 77       	andi	r24, 0x7F	; 127
    4176:	90 70       	andi	r25, 0x00	; 0
    4178:	a0 70       	andi	r26, 0x00	; 0
    417a:	b0 70       	andi	r27, 0x00	; 0
    417c:	80 34       	cpi	r24, 0x40	; 64
    417e:	91 05       	cpc	r25, r1
    4180:	a1 05       	cpc	r26, r1
    4182:	b1 05       	cpc	r27, r1
    4184:	61 f4       	brne	.+24     	; 0x419e <__mulsf3+0x1de>
    4186:	47 fd       	sbrc	r20, 7
    4188:	0a c0       	rjmp	.+20     	; 0x419e <__mulsf3+0x1de>
    418a:	81 14       	cp	r8, r1
    418c:	91 04       	cpc	r9, r1
    418e:	a1 04       	cpc	r10, r1
    4190:	b1 04       	cpc	r11, r1
    4192:	29 f0       	breq	.+10     	; 0x419e <__mulsf3+0x1de>
    4194:	40 5c       	subi	r20, 0xC0	; 192
    4196:	5f 4f       	sbci	r21, 0xFF	; 255
    4198:	6f 4f       	sbci	r22, 0xFF	; 255
    419a:	7f 4f       	sbci	r23, 0xFF	; 255
    419c:	40 78       	andi	r20, 0x80	; 128
    419e:	4d 8f       	std	Y+29, r20	; 0x1d
    41a0:	5e 8f       	std	Y+30, r21	; 0x1e
    41a2:	6f 8f       	std	Y+31, r22	; 0x1f
    41a4:	78 a3       	std	Y+32, r23	; 0x20
    41a6:	83 e0       	ldi	r24, 0x03	; 3
    41a8:	89 8f       	std	Y+25, r24	; 0x19
    41aa:	be 01       	movw	r22, r28
    41ac:	67 5e       	subi	r22, 0xE7	; 231
    41ae:	7f 4f       	sbci	r23, 0xFF	; 255
    41b0:	cb 01       	movw	r24, r22
    41b2:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__pack_f>
    41b6:	e0 e1       	ldi	r30, 0x10	; 16
    41b8:	a0 96       	adiw	r28, 0x20	; 32
    41ba:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__epilogue_restores__+0x4>

000041be <__floatsisf>:
    41be:	a8 e0       	ldi	r26, 0x08	; 8
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	e5 ee       	ldi	r30, 0xE5	; 229
    41c4:	f0 e2       	ldi	r31, 0x20	; 32
    41c6:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__+0x12>
    41ca:	9b 01       	movw	r18, r22
    41cc:	ac 01       	movw	r20, r24
    41ce:	83 e0       	ldi	r24, 0x03	; 3
    41d0:	89 83       	std	Y+1, r24	; 0x01
    41d2:	da 01       	movw	r26, r20
    41d4:	c9 01       	movw	r24, r18
    41d6:	88 27       	eor	r24, r24
    41d8:	b7 fd       	sbrc	r27, 7
    41da:	83 95       	inc	r24
    41dc:	99 27       	eor	r25, r25
    41de:	aa 27       	eor	r26, r26
    41e0:	bb 27       	eor	r27, r27
    41e2:	b8 2e       	mov	r11, r24
    41e4:	21 15       	cp	r18, r1
    41e6:	31 05       	cpc	r19, r1
    41e8:	41 05       	cpc	r20, r1
    41ea:	51 05       	cpc	r21, r1
    41ec:	19 f4       	brne	.+6      	; 0x41f4 <__floatsisf+0x36>
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	3a c0       	rjmp	.+116    	; 0x4268 <__floatsisf+0xaa>
    41f4:	88 23       	and	r24, r24
    41f6:	a9 f0       	breq	.+42     	; 0x4222 <__floatsisf+0x64>
    41f8:	20 30       	cpi	r18, 0x00	; 0
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	38 07       	cpc	r19, r24
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	48 07       	cpc	r20, r24
    4202:	80 e8       	ldi	r24, 0x80	; 128
    4204:	58 07       	cpc	r21, r24
    4206:	29 f4       	brne	.+10     	; 0x4212 <__floatsisf+0x54>
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	9f ec       	ldi	r25, 0xCF	; 207
    4210:	30 c0       	rjmp	.+96     	; 0x4272 <__floatsisf+0xb4>
    4212:	ee 24       	eor	r14, r14
    4214:	ff 24       	eor	r15, r15
    4216:	87 01       	movw	r16, r14
    4218:	e2 1a       	sub	r14, r18
    421a:	f3 0a       	sbc	r15, r19
    421c:	04 0b       	sbc	r16, r20
    421e:	15 0b       	sbc	r17, r21
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <__floatsisf+0x68>
    4222:	79 01       	movw	r14, r18
    4224:	8a 01       	movw	r16, r20
    4226:	8e e1       	ldi	r24, 0x1E	; 30
    4228:	c8 2e       	mov	r12, r24
    422a:	d1 2c       	mov	r13, r1
    422c:	dc 82       	std	Y+4, r13	; 0x04
    422e:	cb 82       	std	Y+3, r12	; 0x03
    4230:	ed 82       	std	Y+5, r14	; 0x05
    4232:	fe 82       	std	Y+6, r15	; 0x06
    4234:	0f 83       	std	Y+7, r16	; 0x07
    4236:	18 87       	std	Y+8, r17	; 0x08
    4238:	c8 01       	movw	r24, r16
    423a:	b7 01       	movw	r22, r14
    423c:	0e 94 90 21 	call	0x4320	; 0x4320 <__clzsi2>
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	18 16       	cp	r1, r24
    4244:	19 06       	cpc	r1, r25
    4246:	84 f4       	brge	.+32     	; 0x4268 <__floatsisf+0xaa>
    4248:	08 2e       	mov	r0, r24
    424a:	04 c0       	rjmp	.+8      	; 0x4254 <__floatsisf+0x96>
    424c:	ee 0c       	add	r14, r14
    424e:	ff 1c       	adc	r15, r15
    4250:	00 1f       	adc	r16, r16
    4252:	11 1f       	adc	r17, r17
    4254:	0a 94       	dec	r0
    4256:	d2 f7       	brpl	.-12     	; 0x424c <__floatsisf+0x8e>
    4258:	ed 82       	std	Y+5, r14	; 0x05
    425a:	fe 82       	std	Y+6, r15	; 0x06
    425c:	0f 83       	std	Y+7, r16	; 0x07
    425e:	18 87       	std	Y+8, r17	; 0x08
    4260:	c8 1a       	sub	r12, r24
    4262:	d9 0a       	sbc	r13, r25
    4264:	dc 82       	std	Y+4, r13	; 0x04
    4266:	cb 82       	std	Y+3, r12	; 0x03
    4268:	ba 82       	std	Y+2, r11	; 0x02
    426a:	ce 01       	movw	r24, r28
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__pack_f>
    4272:	e9 e0       	ldi	r30, 0x09	; 9
    4274:	28 96       	adiw	r28, 0x08	; 8
    4276:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__epilogue_restores__+0x12>

0000427a <__fixsfsi>:
    427a:	ac e0       	ldi	r26, 0x0C	; 12
    427c:	b0 e0       	ldi	r27, 0x00	; 0
    427e:	e3 e4       	ldi	r30, 0x43	; 67
    4280:	f1 e2       	ldi	r31, 0x21	; 33
    4282:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__prologue_saves__+0x20>
    4286:	69 83       	std	Y+1, r22	; 0x01
    4288:	7a 83       	std	Y+2, r23	; 0x02
    428a:	8b 83       	std	Y+3, r24	; 0x03
    428c:	9c 83       	std	Y+4, r25	; 0x04
    428e:	be 01       	movw	r22, r28
    4290:	6b 5f       	subi	r22, 0xFB	; 251
    4292:	7f 4f       	sbci	r23, 0xFF	; 255
    4294:	ce 01       	movw	r24, r28
    4296:	01 96       	adiw	r24, 0x01	; 1
    4298:	0e 94 bd 22 	call	0x457a	; 0x457a <__unpack_f>
    429c:	8d 81       	ldd	r24, Y+5	; 0x05
    429e:	82 30       	cpi	r24, 0x02	; 2
    42a0:	a9 f1       	breq	.+106    	; 0x430c <__fixsfsi+0x92>
    42a2:	82 30       	cpi	r24, 0x02	; 2
    42a4:	98 f1       	brcs	.+102    	; 0x430c <__fixsfsi+0x92>
    42a6:	84 30       	cpi	r24, 0x04	; 4
    42a8:	21 f4       	brne	.+8      	; 0x42b2 <__fixsfsi+0x38>
    42aa:	8e 81       	ldd	r24, Y+6	; 0x06
    42ac:	88 23       	and	r24, r24
    42ae:	59 f4       	brne	.+22     	; 0x42c6 <__fixsfsi+0x4c>
    42b0:	0f c0       	rjmp	.+30     	; 0x42d0 <__fixsfsi+0x56>
    42b2:	2f 81       	ldd	r18, Y+7	; 0x07
    42b4:	38 85       	ldd	r19, Y+8	; 0x08
    42b6:	37 fd       	sbrc	r19, 7
    42b8:	29 c0       	rjmp	.+82     	; 0x430c <__fixsfsi+0x92>
    42ba:	6e 81       	ldd	r22, Y+6	; 0x06
    42bc:	2f 31       	cpi	r18, 0x1F	; 31
    42be:	31 05       	cpc	r19, r1
    42c0:	64 f0       	brlt	.+24     	; 0x42da <__fixsfsi+0x60>
    42c2:	66 23       	and	r22, r22
    42c4:	29 f0       	breq	.+10     	; 0x42d0 <__fixsfsi+0x56>
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	50 e8       	ldi	r21, 0x80	; 128
    42ce:	22 c0       	rjmp	.+68     	; 0x4314 <__fixsfsi+0x9a>
    42d0:	2f ef       	ldi	r18, 0xFF	; 255
    42d2:	3f ef       	ldi	r19, 0xFF	; 255
    42d4:	4f ef       	ldi	r20, 0xFF	; 255
    42d6:	5f e7       	ldi	r21, 0x7F	; 127
    42d8:	1d c0       	rjmp	.+58     	; 0x4314 <__fixsfsi+0x9a>
    42da:	8e e1       	ldi	r24, 0x1E	; 30
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	82 1b       	sub	r24, r18
    42e0:	93 0b       	sbc	r25, r19
    42e2:	29 85       	ldd	r18, Y+9	; 0x09
    42e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    42e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    42e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    42ea:	04 c0       	rjmp	.+8      	; 0x42f4 <__fixsfsi+0x7a>
    42ec:	56 95       	lsr	r21
    42ee:	47 95       	ror	r20
    42f0:	37 95       	ror	r19
    42f2:	27 95       	ror	r18
    42f4:	8a 95       	dec	r24
    42f6:	d2 f7       	brpl	.-12     	; 0x42ec <__fixsfsi+0x72>
    42f8:	66 23       	and	r22, r22
    42fa:	61 f0       	breq	.+24     	; 0x4314 <__fixsfsi+0x9a>
    42fc:	50 95       	com	r21
    42fe:	40 95       	com	r20
    4300:	30 95       	com	r19
    4302:	21 95       	neg	r18
    4304:	3f 4f       	sbci	r19, 0xFF	; 255
    4306:	4f 4f       	sbci	r20, 0xFF	; 255
    4308:	5f 4f       	sbci	r21, 0xFF	; 255
    430a:	04 c0       	rjmp	.+8      	; 0x4314 <__fixsfsi+0x9a>
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	ca 01       	movw	r24, r20
    4316:	b9 01       	movw	r22, r18
    4318:	e2 e0       	ldi	r30, 0x02	; 2
    431a:	2c 96       	adiw	r28, 0x0c	; 12
    431c:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__epilogue_restores__+0x20>

00004320 <__clzsi2>:
    4320:	ef 92       	push	r14
    4322:	ff 92       	push	r15
    4324:	0f 93       	push	r16
    4326:	1f 93       	push	r17
    4328:	9b 01       	movw	r18, r22
    432a:	ac 01       	movw	r20, r24
    432c:	20 30       	cpi	r18, 0x00	; 0
    432e:	80 e0       	ldi	r24, 0x00	; 0
    4330:	38 07       	cpc	r19, r24
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	48 07       	cpc	r20, r24
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	58 07       	cpc	r21, r24
    433a:	80 f4       	brcc	.+32     	; 0x435c <__clzsi2+0x3c>
    433c:	2f 3f       	cpi	r18, 0xFF	; 255
    433e:	31 05       	cpc	r19, r1
    4340:	41 05       	cpc	r20, r1
    4342:	51 05       	cpc	r21, r1
    4344:	09 f0       	breq	.+2      	; 0x4348 <__clzsi2+0x28>
    4346:	20 f4       	brcc	.+8      	; 0x4350 <__clzsi2+0x30>
    4348:	ee 24       	eor	r14, r14
    434a:	ff 24       	eor	r15, r15
    434c:	87 01       	movw	r16, r14
    434e:	19 c0       	rjmp	.+50     	; 0x4382 <__clzsi2+0x62>
    4350:	68 e0       	ldi	r22, 0x08	; 8
    4352:	e6 2e       	mov	r14, r22
    4354:	f1 2c       	mov	r15, r1
    4356:	01 2d       	mov	r16, r1
    4358:	11 2d       	mov	r17, r1
    435a:	13 c0       	rjmp	.+38     	; 0x4382 <__clzsi2+0x62>
    435c:	20 30       	cpi	r18, 0x00	; 0
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	38 07       	cpc	r19, r24
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	48 07       	cpc	r20, r24
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	58 07       	cpc	r21, r24
    436a:	30 f4       	brcc	.+12     	; 0x4378 <__clzsi2+0x58>
    436c:	90 e1       	ldi	r25, 0x10	; 16
    436e:	e9 2e       	mov	r14, r25
    4370:	f1 2c       	mov	r15, r1
    4372:	01 2d       	mov	r16, r1
    4374:	11 2d       	mov	r17, r1
    4376:	05 c0       	rjmp	.+10     	; 0x4382 <__clzsi2+0x62>
    4378:	88 e1       	ldi	r24, 0x18	; 24
    437a:	e8 2e       	mov	r14, r24
    437c:	f1 2c       	mov	r15, r1
    437e:	01 2d       	mov	r16, r1
    4380:	11 2d       	mov	r17, r1
    4382:	80 e2       	ldi	r24, 0x20	; 32
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	a0 e0       	ldi	r26, 0x00	; 0
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	8e 19       	sub	r24, r14
    438c:	9f 09       	sbc	r25, r15
    438e:	a0 0b       	sbc	r26, r16
    4390:	b1 0b       	sbc	r27, r17
    4392:	04 c0       	rjmp	.+8      	; 0x439c <__clzsi2+0x7c>
    4394:	56 95       	lsr	r21
    4396:	47 95       	ror	r20
    4398:	37 95       	ror	r19
    439a:	27 95       	ror	r18
    439c:	ea 94       	dec	r14
    439e:	d2 f7       	brpl	.-12     	; 0x4394 <__clzsi2+0x74>
    43a0:	f9 01       	movw	r30, r18
    43a2:	e1 5e       	subi	r30, 0xE1	; 225
    43a4:	fd 4f       	sbci	r31, 0xFD	; 253
    43a6:	20 81       	ld	r18, Z
    43a8:	82 1b       	sub	r24, r18
    43aa:	91 09       	sbc	r25, r1
    43ac:	a1 09       	sbc	r26, r1
    43ae:	b1 09       	sbc	r27, r1
    43b0:	1f 91       	pop	r17
    43b2:	0f 91       	pop	r16
    43b4:	ff 90       	pop	r15
    43b6:	ef 90       	pop	r14
    43b8:	08 95       	ret

000043ba <__pack_f>:
    43ba:	9f 92       	push	r9
    43bc:	af 92       	push	r10
    43be:	bf 92       	push	r11
    43c0:	cf 92       	push	r12
    43c2:	df 92       	push	r13
    43c4:	ef 92       	push	r14
    43c6:	ff 92       	push	r15
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	ee 24       	eor	r14, r14
    43ce:	ff 24       	eor	r15, r15
    43d0:	87 01       	movw	r16, r14
    43d2:	fc 01       	movw	r30, r24
    43d4:	24 81       	ldd	r18, Z+4	; 0x04
    43d6:	35 81       	ldd	r19, Z+5	; 0x05
    43d8:	46 81       	ldd	r20, Z+6	; 0x06
    43da:	57 81       	ldd	r21, Z+7	; 0x07
    43dc:	91 80       	ldd	r9, Z+1	; 0x01
    43de:	80 81       	ld	r24, Z
    43e0:	82 30       	cpi	r24, 0x02	; 2
    43e2:	10 f4       	brcc	.+4      	; 0x43e8 <__pack_f+0x2e>
    43e4:	40 61       	ori	r20, 0x10	; 16
    43e6:	a2 c0       	rjmp	.+324    	; 0x452c <__pack_f+0x172>
    43e8:	84 30       	cpi	r24, 0x04	; 4
    43ea:	09 f4       	brne	.+2      	; 0x43ee <__pack_f+0x34>
    43ec:	9b c0       	rjmp	.+310    	; 0x4524 <__pack_f+0x16a>
    43ee:	82 30       	cpi	r24, 0x02	; 2
    43f0:	29 f4       	brne	.+10     	; 0x43fc <__pack_f+0x42>
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	40 e0       	ldi	r20, 0x00	; 0
    43f8:	50 e0       	ldi	r21, 0x00	; 0
    43fa:	05 c0       	rjmp	.+10     	; 0x4406 <__pack_f+0x4c>
    43fc:	21 15       	cp	r18, r1
    43fe:	31 05       	cpc	r19, r1
    4400:	41 05       	cpc	r20, r1
    4402:	51 05       	cpc	r21, r1
    4404:	19 f4       	brne	.+6      	; 0x440c <__pack_f+0x52>
    4406:	e0 e0       	ldi	r30, 0x00	; 0
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	92 c0       	rjmp	.+292    	; 0x4530 <__pack_f+0x176>
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	6f ef       	ldi	r22, 0xFF	; 255
    4412:	82 38       	cpi	r24, 0x82	; 130
    4414:	96 07       	cpc	r25, r22
    4416:	0c f0       	brlt	.+2      	; 0x441a <__pack_f+0x60>
    4418:	5a c0       	rjmp	.+180    	; 0x44ce <__pack_f+0x114>
    441a:	62 e8       	ldi	r22, 0x82	; 130
    441c:	7f ef       	ldi	r23, 0xFF	; 255
    441e:	68 1b       	sub	r22, r24
    4420:	79 0b       	sbc	r23, r25
    4422:	6a 31       	cpi	r22, 0x1A	; 26
    4424:	71 05       	cpc	r23, r1
    4426:	2c f0       	brlt	.+10     	; 0x4432 <__pack_f+0x78>
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	40 e0       	ldi	r20, 0x00	; 0
    442e:	50 e0       	ldi	r21, 0x00	; 0
    4430:	2a c0       	rjmp	.+84     	; 0x4486 <__pack_f+0xcc>
    4432:	aa 24       	eor	r10, r10
    4434:	bb 24       	eor	r11, r11
    4436:	65 01       	movw	r12, r10
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	a0 e0       	ldi	r26, 0x00	; 0
    443e:	b0 e0       	ldi	r27, 0x00	; 0
    4440:	06 2e       	mov	r0, r22
    4442:	04 c0       	rjmp	.+8      	; 0x444c <__pack_f+0x92>
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	aa 1f       	adc	r26, r26
    444a:	bb 1f       	adc	r27, r27
    444c:	0a 94       	dec	r0
    444e:	d2 f7       	brpl	.-12     	; 0x4444 <__pack_f+0x8a>
    4450:	01 97       	sbiw	r24, 0x01	; 1
    4452:	a1 09       	sbc	r26, r1
    4454:	b1 09       	sbc	r27, r1
    4456:	82 23       	and	r24, r18
    4458:	93 23       	and	r25, r19
    445a:	a4 23       	and	r26, r20
    445c:	b5 23       	and	r27, r21
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	a1 05       	cpc	r26, r1
    4462:	b1 05       	cpc	r27, r1
    4464:	29 f0       	breq	.+10     	; 0x4470 <__pack_f+0xb6>
    4466:	71 e0       	ldi	r23, 0x01	; 1
    4468:	a7 2e       	mov	r10, r23
    446a:	b1 2c       	mov	r11, r1
    446c:	c1 2c       	mov	r12, r1
    446e:	d1 2c       	mov	r13, r1
    4470:	04 c0       	rjmp	.+8      	; 0x447a <__pack_f+0xc0>
    4472:	56 95       	lsr	r21
    4474:	47 95       	ror	r20
    4476:	37 95       	ror	r19
    4478:	27 95       	ror	r18
    447a:	6a 95       	dec	r22
    447c:	d2 f7       	brpl	.-12     	; 0x4472 <__pack_f+0xb8>
    447e:	2a 29       	or	r18, r10
    4480:	3b 29       	or	r19, r11
    4482:	4c 29       	or	r20, r12
    4484:	5d 29       	or	r21, r13
    4486:	da 01       	movw	r26, r20
    4488:	c9 01       	movw	r24, r18
    448a:	8f 77       	andi	r24, 0x7F	; 127
    448c:	90 70       	andi	r25, 0x00	; 0
    448e:	a0 70       	andi	r26, 0x00	; 0
    4490:	b0 70       	andi	r27, 0x00	; 0
    4492:	80 34       	cpi	r24, 0x40	; 64
    4494:	91 05       	cpc	r25, r1
    4496:	a1 05       	cpc	r26, r1
    4498:	b1 05       	cpc	r27, r1
    449a:	39 f4       	brne	.+14     	; 0x44aa <__pack_f+0xf0>
    449c:	27 ff       	sbrs	r18, 7
    449e:	09 c0       	rjmp	.+18     	; 0x44b2 <__pack_f+0xf8>
    44a0:	20 5c       	subi	r18, 0xC0	; 192
    44a2:	3f 4f       	sbci	r19, 0xFF	; 255
    44a4:	4f 4f       	sbci	r20, 0xFF	; 255
    44a6:	5f 4f       	sbci	r21, 0xFF	; 255
    44a8:	04 c0       	rjmp	.+8      	; 0x44b2 <__pack_f+0xf8>
    44aa:	21 5c       	subi	r18, 0xC1	; 193
    44ac:	3f 4f       	sbci	r19, 0xFF	; 255
    44ae:	4f 4f       	sbci	r20, 0xFF	; 255
    44b0:	5f 4f       	sbci	r21, 0xFF	; 255
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	20 30       	cpi	r18, 0x00	; 0
    44b8:	60 e0       	ldi	r22, 0x00	; 0
    44ba:	36 07       	cpc	r19, r22
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	46 07       	cpc	r20, r22
    44c0:	60 e4       	ldi	r22, 0x40	; 64
    44c2:	56 07       	cpc	r21, r22
    44c4:	10 f0       	brcs	.+4      	; 0x44ca <__pack_f+0x110>
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	fc 01       	movw	r30, r24
    44cc:	23 c0       	rjmp	.+70     	; 0x4514 <__pack_f+0x15a>
    44ce:	80 38       	cpi	r24, 0x80	; 128
    44d0:	91 05       	cpc	r25, r1
    44d2:	44 f5       	brge	.+80     	; 0x4524 <__pack_f+0x16a>
    44d4:	fc 01       	movw	r30, r24
    44d6:	e1 58       	subi	r30, 0x81	; 129
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	da 01       	movw	r26, r20
    44dc:	c9 01       	movw	r24, r18
    44de:	8f 77       	andi	r24, 0x7F	; 127
    44e0:	90 70       	andi	r25, 0x00	; 0
    44e2:	a0 70       	andi	r26, 0x00	; 0
    44e4:	b0 70       	andi	r27, 0x00	; 0
    44e6:	80 34       	cpi	r24, 0x40	; 64
    44e8:	91 05       	cpc	r25, r1
    44ea:	a1 05       	cpc	r26, r1
    44ec:	b1 05       	cpc	r27, r1
    44ee:	39 f4       	brne	.+14     	; 0x44fe <__pack_f+0x144>
    44f0:	27 ff       	sbrs	r18, 7
    44f2:	09 c0       	rjmp	.+18     	; 0x4506 <__pack_f+0x14c>
    44f4:	20 5c       	subi	r18, 0xC0	; 192
    44f6:	3f 4f       	sbci	r19, 0xFF	; 255
    44f8:	4f 4f       	sbci	r20, 0xFF	; 255
    44fa:	5f 4f       	sbci	r21, 0xFF	; 255
    44fc:	04 c0       	rjmp	.+8      	; 0x4506 <__pack_f+0x14c>
    44fe:	21 5c       	subi	r18, 0xC1	; 193
    4500:	3f 4f       	sbci	r19, 0xFF	; 255
    4502:	4f 4f       	sbci	r20, 0xFF	; 255
    4504:	5f 4f       	sbci	r21, 0xFF	; 255
    4506:	57 ff       	sbrs	r21, 7
    4508:	05 c0       	rjmp	.+10     	; 0x4514 <__pack_f+0x15a>
    450a:	56 95       	lsr	r21
    450c:	47 95       	ror	r20
    450e:	37 95       	ror	r19
    4510:	27 95       	ror	r18
    4512:	31 96       	adiw	r30, 0x01	; 1
    4514:	87 e0       	ldi	r24, 0x07	; 7
    4516:	56 95       	lsr	r21
    4518:	47 95       	ror	r20
    451a:	37 95       	ror	r19
    451c:	27 95       	ror	r18
    451e:	8a 95       	dec	r24
    4520:	d1 f7       	brne	.-12     	; 0x4516 <__pack_f+0x15c>
    4522:	06 c0       	rjmp	.+12     	; 0x4530 <__pack_f+0x176>
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	ef ef       	ldi	r30, 0xFF	; 255
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	e2 2e       	mov	r14, r18
    4532:	f3 2e       	mov	r15, r19
    4534:	94 2f       	mov	r25, r20
    4536:	9f 77       	andi	r25, 0x7F	; 127
    4538:	80 2f       	mov	r24, r16
    453a:	80 78       	andi	r24, 0x80	; 128
    453c:	89 2b       	or	r24, r25
    453e:	9e 2f       	mov	r25, r30
    4540:	97 95       	ror	r25
    4542:	99 27       	eor	r25, r25
    4544:	97 95       	ror	r25
    4546:	8f 77       	andi	r24, 0x7F	; 127
    4548:	08 2f       	mov	r16, r24
    454a:	09 2b       	or	r16, r25
    454c:	9e 2f       	mov	r25, r30
    454e:	96 95       	lsr	r25
    4550:	81 2f       	mov	r24, r17
    4552:	80 78       	andi	r24, 0x80	; 128
    4554:	89 2b       	or	r24, r25
    4556:	97 94       	ror	r9
    4558:	99 24       	eor	r9, r9
    455a:	97 94       	ror	r9
    455c:	8f 77       	andi	r24, 0x7F	; 127
    455e:	18 2f       	mov	r17, r24
    4560:	19 29       	or	r17, r9
    4562:	c8 01       	movw	r24, r16
    4564:	b7 01       	movw	r22, r14
    4566:	1f 91       	pop	r17
    4568:	0f 91       	pop	r16
    456a:	ff 90       	pop	r15
    456c:	ef 90       	pop	r14
    456e:	df 90       	pop	r13
    4570:	cf 90       	pop	r12
    4572:	bf 90       	pop	r11
    4574:	af 90       	pop	r10
    4576:	9f 90       	pop	r9
    4578:	08 95       	ret

0000457a <__unpack_f>:
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	fc 01       	movw	r30, r24
    4580:	db 01       	movw	r26, r22
    4582:	20 81       	ld	r18, Z
    4584:	31 81       	ldd	r19, Z+1	; 0x01
    4586:	92 81       	ldd	r25, Z+2	; 0x02
    4588:	49 2f       	mov	r20, r25
    458a:	4f 77       	andi	r20, 0x7F	; 127
    458c:	50 e0       	ldi	r21, 0x00	; 0
    458e:	99 1f       	adc	r25, r25
    4590:	99 27       	eor	r25, r25
    4592:	99 1f       	adc	r25, r25
    4594:	83 81       	ldd	r24, Z+3	; 0x03
    4596:	e8 2f       	mov	r30, r24
    4598:	ee 0f       	add	r30, r30
    459a:	e9 2b       	or	r30, r25
    459c:	6e 2f       	mov	r22, r30
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	88 1f       	adc	r24, r24
    45a2:	88 27       	eor	r24, r24
    45a4:	88 1f       	adc	r24, r24
    45a6:	ed 01       	movw	r28, r26
    45a8:	89 83       	std	Y+1, r24	; 0x01
    45aa:	ee 23       	and	r30, r30
    45ac:	71 f5       	brne	.+92     	; 0x460a <__unpack_f+0x90>
    45ae:	21 15       	cp	r18, r1
    45b0:	31 05       	cpc	r19, r1
    45b2:	41 05       	cpc	r20, r1
    45b4:	51 05       	cpc	r21, r1
    45b6:	11 f4       	brne	.+4      	; 0x45bc <__unpack_f+0x42>
    45b8:	82 e0       	ldi	r24, 0x02	; 2
    45ba:	2f c0       	rjmp	.+94     	; 0x461a <__unpack_f+0xa0>
    45bc:	6e 57       	subi	r22, 0x7E	; 126
    45be:	70 40       	sbci	r23, 0x00	; 0
    45c0:	fd 01       	movw	r30, r26
    45c2:	73 83       	std	Z+3, r23	; 0x03
    45c4:	62 83       	std	Z+2, r22	; 0x02
    45c6:	67 e0       	ldi	r22, 0x07	; 7
    45c8:	22 0f       	add	r18, r18
    45ca:	33 1f       	adc	r19, r19
    45cc:	44 1f       	adc	r20, r20
    45ce:	55 1f       	adc	r21, r21
    45d0:	6a 95       	dec	r22
    45d2:	d1 f7       	brne	.-12     	; 0x45c8 <__unpack_f+0x4e>
    45d4:	83 e0       	ldi	r24, 0x03	; 3
    45d6:	8c 93       	st	X, r24
    45d8:	0a c0       	rjmp	.+20     	; 0x45ee <__unpack_f+0x74>
    45da:	22 0f       	add	r18, r18
    45dc:	33 1f       	adc	r19, r19
    45de:	44 1f       	adc	r20, r20
    45e0:	55 1f       	adc	r21, r21
    45e2:	ed 01       	movw	r28, r26
    45e4:	8a 81       	ldd	r24, Y+2	; 0x02
    45e6:	9b 81       	ldd	r25, Y+3	; 0x03
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	9b 83       	std	Y+3, r25	; 0x03
    45ec:	8a 83       	std	Y+2, r24	; 0x02
    45ee:	20 30       	cpi	r18, 0x00	; 0
    45f0:	e0 e0       	ldi	r30, 0x00	; 0
    45f2:	3e 07       	cpc	r19, r30
    45f4:	e0 e0       	ldi	r30, 0x00	; 0
    45f6:	4e 07       	cpc	r20, r30
    45f8:	e0 e4       	ldi	r30, 0x40	; 64
    45fa:	5e 07       	cpc	r21, r30
    45fc:	70 f3       	brcs	.-36     	; 0x45da <__unpack_f+0x60>
    45fe:	ed 01       	movw	r28, r26
    4600:	2c 83       	std	Y+4, r18	; 0x04
    4602:	3d 83       	std	Y+5, r19	; 0x05
    4604:	4e 83       	std	Y+6, r20	; 0x06
    4606:	5f 83       	std	Y+7, r21	; 0x07
    4608:	25 c0       	rjmp	.+74     	; 0x4654 <__unpack_f+0xda>
    460a:	ef 3f       	cpi	r30, 0xFF	; 255
    460c:	79 f4       	brne	.+30     	; 0x462c <__unpack_f+0xb2>
    460e:	21 15       	cp	r18, r1
    4610:	31 05       	cpc	r19, r1
    4612:	41 05       	cpc	r20, r1
    4614:	51 05       	cpc	r21, r1
    4616:	19 f4       	brne	.+6      	; 0x461e <__unpack_f+0xa4>
    4618:	84 e0       	ldi	r24, 0x04	; 4
    461a:	8c 93       	st	X, r24
    461c:	1b c0       	rjmp	.+54     	; 0x4654 <__unpack_f+0xda>
    461e:	44 ff       	sbrs	r20, 4
    4620:	03 c0       	rjmp	.+6      	; 0x4628 <__unpack_f+0xae>
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	8c 93       	st	X, r24
    4626:	11 c0       	rjmp	.+34     	; 0x464a <__unpack_f+0xd0>
    4628:	1c 92       	st	X, r1
    462a:	0f c0       	rjmp	.+30     	; 0x464a <__unpack_f+0xd0>
    462c:	6f 57       	subi	r22, 0x7F	; 127
    462e:	70 40       	sbci	r23, 0x00	; 0
    4630:	ed 01       	movw	r28, r26
    4632:	7b 83       	std	Y+3, r23	; 0x03
    4634:	6a 83       	std	Y+2, r22	; 0x02
    4636:	83 e0       	ldi	r24, 0x03	; 3
    4638:	8c 93       	st	X, r24
    463a:	87 e0       	ldi	r24, 0x07	; 7
    463c:	22 0f       	add	r18, r18
    463e:	33 1f       	adc	r19, r19
    4640:	44 1f       	adc	r20, r20
    4642:	55 1f       	adc	r21, r21
    4644:	8a 95       	dec	r24
    4646:	d1 f7       	brne	.-12     	; 0x463c <__unpack_f+0xc2>
    4648:	50 64       	ori	r21, 0x40	; 64
    464a:	fd 01       	movw	r30, r26
    464c:	24 83       	std	Z+4, r18	; 0x04
    464e:	35 83       	std	Z+5, r19	; 0x05
    4650:	46 83       	std	Z+6, r20	; 0x06
    4652:	57 83       	std	Z+7, r21	; 0x07
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	08 95       	ret

0000465a <__mulsi3>:
    465a:	62 9f       	mul	r22, r18
    465c:	d0 01       	movw	r26, r0
    465e:	73 9f       	mul	r23, r19
    4660:	f0 01       	movw	r30, r0
    4662:	82 9f       	mul	r24, r18
    4664:	e0 0d       	add	r30, r0
    4666:	f1 1d       	adc	r31, r1
    4668:	64 9f       	mul	r22, r20
    466a:	e0 0d       	add	r30, r0
    466c:	f1 1d       	adc	r31, r1
    466e:	92 9f       	mul	r25, r18
    4670:	f0 0d       	add	r31, r0
    4672:	83 9f       	mul	r24, r19
    4674:	f0 0d       	add	r31, r0
    4676:	74 9f       	mul	r23, r20
    4678:	f0 0d       	add	r31, r0
    467a:	65 9f       	mul	r22, r21
    467c:	f0 0d       	add	r31, r0
    467e:	99 27       	eor	r25, r25
    4680:	72 9f       	mul	r23, r18
    4682:	b0 0d       	add	r27, r0
    4684:	e1 1d       	adc	r30, r1
    4686:	f9 1f       	adc	r31, r25
    4688:	63 9f       	mul	r22, r19
    468a:	b0 0d       	add	r27, r0
    468c:	e1 1d       	adc	r30, r1
    468e:	f9 1f       	adc	r31, r25
    4690:	bd 01       	movw	r22, r26
    4692:	cf 01       	movw	r24, r30
    4694:	11 24       	eor	r1, r1
    4696:	08 95       	ret

00004698 <__udivmodhi4>:
    4698:	aa 1b       	sub	r26, r26
    469a:	bb 1b       	sub	r27, r27
    469c:	51 e1       	ldi	r21, 0x11	; 17
    469e:	07 c0       	rjmp	.+14     	; 0x46ae <__udivmodhi4_ep>

000046a0 <__udivmodhi4_loop>:
    46a0:	aa 1f       	adc	r26, r26
    46a2:	bb 1f       	adc	r27, r27
    46a4:	a6 17       	cp	r26, r22
    46a6:	b7 07       	cpc	r27, r23
    46a8:	10 f0       	brcs	.+4      	; 0x46ae <__udivmodhi4_ep>
    46aa:	a6 1b       	sub	r26, r22
    46ac:	b7 0b       	sbc	r27, r23

000046ae <__udivmodhi4_ep>:
    46ae:	88 1f       	adc	r24, r24
    46b0:	99 1f       	adc	r25, r25
    46b2:	5a 95       	dec	r21
    46b4:	a9 f7       	brne	.-22     	; 0x46a0 <__udivmodhi4_loop>
    46b6:	80 95       	com	r24
    46b8:	90 95       	com	r25
    46ba:	bc 01       	movw	r22, r24
    46bc:	cd 01       	movw	r24, r26
    46be:	08 95       	ret

000046c0 <__divmodhi4>:
    46c0:	97 fb       	bst	r25, 7
    46c2:	09 2e       	mov	r0, r25
    46c4:	07 26       	eor	r0, r23
    46c6:	0a d0       	rcall	.+20     	; 0x46dc <__divmodhi4_neg1>
    46c8:	77 fd       	sbrc	r23, 7
    46ca:	04 d0       	rcall	.+8      	; 0x46d4 <__divmodhi4_neg2>
    46cc:	e5 df       	rcall	.-54     	; 0x4698 <__udivmodhi4>
    46ce:	06 d0       	rcall	.+12     	; 0x46dc <__divmodhi4_neg1>
    46d0:	00 20       	and	r0, r0
    46d2:	1a f4       	brpl	.+6      	; 0x46da <__divmodhi4_exit>

000046d4 <__divmodhi4_neg2>:
    46d4:	70 95       	com	r23
    46d6:	61 95       	neg	r22
    46d8:	7f 4f       	sbci	r23, 0xFF	; 255

000046da <__divmodhi4_exit>:
    46da:	08 95       	ret

000046dc <__divmodhi4_neg1>:
    46dc:	f6 f7       	brtc	.-4      	; 0x46da <__divmodhi4_exit>
    46de:	90 95       	com	r25
    46e0:	81 95       	neg	r24
    46e2:	9f 4f       	sbci	r25, 0xFF	; 255
    46e4:	08 95       	ret

000046e6 <__prologue_saves__>:
    46e6:	2f 92       	push	r2
    46e8:	3f 92       	push	r3
    46ea:	4f 92       	push	r4
    46ec:	5f 92       	push	r5
    46ee:	6f 92       	push	r6
    46f0:	7f 92       	push	r7
    46f2:	8f 92       	push	r8
    46f4:	9f 92       	push	r9
    46f6:	af 92       	push	r10
    46f8:	bf 92       	push	r11
    46fa:	cf 92       	push	r12
    46fc:	df 92       	push	r13
    46fe:	ef 92       	push	r14
    4700:	ff 92       	push	r15
    4702:	0f 93       	push	r16
    4704:	1f 93       	push	r17
    4706:	cf 93       	push	r28
    4708:	df 93       	push	r29
    470a:	cd b7       	in	r28, 0x3d	; 61
    470c:	de b7       	in	r29, 0x3e	; 62
    470e:	ca 1b       	sub	r28, r26
    4710:	db 0b       	sbc	r29, r27
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	f8 94       	cli
    4716:	de bf       	out	0x3e, r29	; 62
    4718:	0f be       	out	0x3f, r0	; 63
    471a:	cd bf       	out	0x3d, r28	; 61
    471c:	19 94       	eijmp

0000471e <__epilogue_restores__>:
    471e:	2a 88       	ldd	r2, Y+18	; 0x12
    4720:	39 88       	ldd	r3, Y+17	; 0x11
    4722:	48 88       	ldd	r4, Y+16	; 0x10
    4724:	5f 84       	ldd	r5, Y+15	; 0x0f
    4726:	6e 84       	ldd	r6, Y+14	; 0x0e
    4728:	7d 84       	ldd	r7, Y+13	; 0x0d
    472a:	8c 84       	ldd	r8, Y+12	; 0x0c
    472c:	9b 84       	ldd	r9, Y+11	; 0x0b
    472e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4730:	b9 84       	ldd	r11, Y+9	; 0x09
    4732:	c8 84       	ldd	r12, Y+8	; 0x08
    4734:	df 80       	ldd	r13, Y+7	; 0x07
    4736:	ee 80       	ldd	r14, Y+6	; 0x06
    4738:	fd 80       	ldd	r15, Y+5	; 0x05
    473a:	0c 81       	ldd	r16, Y+4	; 0x04
    473c:	1b 81       	ldd	r17, Y+3	; 0x03
    473e:	aa 81       	ldd	r26, Y+2	; 0x02
    4740:	b9 81       	ldd	r27, Y+1	; 0x01
    4742:	ce 0f       	add	r28, r30
    4744:	d1 1d       	adc	r29, r1
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	f8 94       	cli
    474a:	de bf       	out	0x3e, r29	; 62
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	cd bf       	out	0x3d, r28	; 61
    4750:	ed 01       	movw	r28, r26
    4752:	08 95       	ret

00004754 <do_rand>:
    4754:	af 92       	push	r10
    4756:	bf 92       	push	r11
    4758:	cf 92       	push	r12
    475a:	df 92       	push	r13
    475c:	ef 92       	push	r14
    475e:	ff 92       	push	r15
    4760:	0f 93       	push	r16
    4762:	1f 93       	push	r17
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	ec 01       	movw	r28, r24
    476a:	68 81       	ld	r22, Y
    476c:	79 81       	ldd	r23, Y+1	; 0x01
    476e:	8a 81       	ldd	r24, Y+2	; 0x02
    4770:	9b 81       	ldd	r25, Y+3	; 0x03
    4772:	61 15       	cp	r22, r1
    4774:	71 05       	cpc	r23, r1
    4776:	81 05       	cpc	r24, r1
    4778:	91 05       	cpc	r25, r1
    477a:	21 f4       	brne	.+8      	; 0x4784 <do_rand+0x30>
    477c:	64 e2       	ldi	r22, 0x24	; 36
    477e:	79 ed       	ldi	r23, 0xD9	; 217
    4780:	8b e5       	ldi	r24, 0x5B	; 91
    4782:	97 e0       	ldi	r25, 0x07	; 7
    4784:	2d e1       	ldi	r18, 0x1D	; 29
    4786:	33 ef       	ldi	r19, 0xF3	; 243
    4788:	41 e0       	ldi	r20, 0x01	; 1
    478a:	50 e0       	ldi	r21, 0x00	; 0
    478c:	0e 94 18 26 	call	0x4c30	; 0x4c30 <__divmodsi4>
    4790:	79 01       	movw	r14, r18
    4792:	8a 01       	movw	r16, r20
    4794:	27 ea       	ldi	r18, 0xA7	; 167
    4796:	31 e4       	ldi	r19, 0x41	; 65
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	0e 94 2d 23 	call	0x465a	; 0x465a <__mulsi3>
    47a0:	5b 01       	movw	r10, r22
    47a2:	6c 01       	movw	r12, r24
    47a4:	c8 01       	movw	r24, r16
    47a6:	b7 01       	movw	r22, r14
    47a8:	2c ee       	ldi	r18, 0xEC	; 236
    47aa:	34 ef       	ldi	r19, 0xF4	; 244
    47ac:	4f ef       	ldi	r20, 0xFF	; 255
    47ae:	5f ef       	ldi	r21, 0xFF	; 255
    47b0:	0e 94 2d 23 	call	0x465a	; 0x465a <__mulsi3>
    47b4:	6a 0d       	add	r22, r10
    47b6:	7b 1d       	adc	r23, r11
    47b8:	8c 1d       	adc	r24, r12
    47ba:	9d 1d       	adc	r25, r13
    47bc:	97 ff       	sbrs	r25, 7
    47be:	04 c0       	rjmp	.+8      	; 0x47c8 <do_rand+0x74>
    47c0:	61 50       	subi	r22, 0x01	; 1
    47c2:	70 40       	sbci	r23, 0x00	; 0
    47c4:	80 40       	sbci	r24, 0x00	; 0
    47c6:	90 48       	sbci	r25, 0x80	; 128
    47c8:	68 83       	st	Y, r22
    47ca:	79 83       	std	Y+1, r23	; 0x01
    47cc:	8a 83       	std	Y+2, r24	; 0x02
    47ce:	9b 83       	std	Y+3, r25	; 0x03
    47d0:	7f 77       	andi	r23, 0x7F	; 127
    47d2:	cb 01       	movw	r24, r22
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	df 90       	pop	r13
    47e2:	cf 90       	pop	r12
    47e4:	bf 90       	pop	r11
    47e6:	af 90       	pop	r10
    47e8:	08 95       	ret

000047ea <rand_r>:
    47ea:	0e 94 aa 23 	call	0x4754	; 0x4754 <do_rand>
    47ee:	08 95       	ret

000047f0 <rand>:
    47f0:	8f e1       	ldi	r24, 0x1F	; 31
    47f2:	93 e0       	ldi	r25, 0x03	; 3
    47f4:	0e 94 aa 23 	call	0x4754	; 0x4754 <do_rand>
    47f8:	08 95       	ret

000047fa <srand>:
    47fa:	a0 e0       	ldi	r26, 0x00	; 0
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	80 93 1f 03 	sts	0x031F, r24
    4802:	90 93 20 03 	sts	0x0320, r25
    4806:	a0 93 21 03 	sts	0x0321, r26
    480a:	b0 93 22 03 	sts	0x0322, r27
    480e:	08 95       	ret
    4810:	f5 d0       	rcall	.+490    	; 0x49fc <__fp_pscA>
    4812:	58 f0       	brcs	.+22     	; 0x482a <srand+0x30>
    4814:	80 e8       	ldi	r24, 0x80	; 128
    4816:	91 e0       	ldi	r25, 0x01	; 1
    4818:	09 f4       	brne	.+2      	; 0x481c <srand+0x22>
    481a:	9e ef       	ldi	r25, 0xFE	; 254
    481c:	f6 d0       	rcall	.+492    	; 0x4a0a <__fp_pscB>
    481e:	28 f0       	brcs	.+10     	; 0x482a <srand+0x30>
    4820:	40 e8       	ldi	r20, 0x80	; 128
    4822:	51 e0       	ldi	r21, 0x01	; 1
    4824:	59 f4       	brne	.+22     	; 0x483c <atan2+0xe>
    4826:	5e ef       	ldi	r21, 0xFE	; 254
    4828:	09 c0       	rjmp	.+18     	; 0x483c <atan2+0xe>
    482a:	c0 c0       	rjmp	.+384    	; 0x49ac <__fp_nan>
    482c:	28 c1       	rjmp	.+592    	; 0x4a7e <__fp_zero>

0000482e <atan2>:
    482e:	e9 2f       	mov	r30, r25
    4830:	e0 78       	andi	r30, 0x80	; 128
    4832:	03 d1       	rcall	.+518    	; 0x4a3a <__fp_split3>
    4834:	68 f3       	brcs	.-38     	; 0x4810 <srand+0x16>
    4836:	09 2e       	mov	r0, r25
    4838:	05 2a       	or	r0, r21
    483a:	c1 f3       	breq	.-16     	; 0x482c <srand+0x32>
    483c:	26 17       	cp	r18, r22
    483e:	37 07       	cpc	r19, r23
    4840:	48 07       	cpc	r20, r24
    4842:	59 07       	cpc	r21, r25
    4844:	38 f0       	brcs	.+14     	; 0x4854 <atan2+0x26>
    4846:	0e 2e       	mov	r0, r30
    4848:	07 f8       	bld	r0, 7
    484a:	e0 25       	eor	r30, r0
    484c:	69 f0       	breq	.+26     	; 0x4868 <atan2+0x3a>
    484e:	e0 25       	eor	r30, r0
    4850:	e0 64       	ori	r30, 0x40	; 64
    4852:	0a c0       	rjmp	.+20     	; 0x4868 <atan2+0x3a>
    4854:	ef 63       	ori	r30, 0x3F	; 63
    4856:	07 f8       	bld	r0, 7
    4858:	00 94       	com	r0
    485a:	07 fa       	bst	r0, 7
    485c:	db 01       	movw	r26, r22
    485e:	b9 01       	movw	r22, r18
    4860:	9d 01       	movw	r18, r26
    4862:	dc 01       	movw	r26, r24
    4864:	ca 01       	movw	r24, r20
    4866:	ad 01       	movw	r20, r26
    4868:	ef 93       	push	r30
    486a:	41 d0       	rcall	.+130    	; 0x48ee <__divsf3_pse>
    486c:	d5 d0       	rcall	.+426    	; 0x4a18 <__fp_round>
    486e:	0a d0       	rcall	.+20     	; 0x4884 <atan>
    4870:	5f 91       	pop	r21
    4872:	55 23       	and	r21, r21
    4874:	31 f0       	breq	.+12     	; 0x4882 <atan2+0x54>
    4876:	2b ed       	ldi	r18, 0xDB	; 219
    4878:	3f e0       	ldi	r19, 0x0F	; 15
    487a:	49 e4       	ldi	r20, 0x49	; 73
    487c:	50 fd       	sbrc	r21, 0
    487e:	49 ec       	ldi	r20, 0xC9	; 201
    4880:	71 c1       	rjmp	.+738    	; 0x4b64 <__addsf3>
    4882:	08 95       	ret

00004884 <atan>:
    4884:	df 93       	push	r29
    4886:	dd 27       	eor	r29, r29
    4888:	b9 2f       	mov	r27, r25
    488a:	bf 77       	andi	r27, 0x7F	; 127
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	5f e3       	ldi	r21, 0x3F	; 63
    4890:	16 16       	cp	r1, r22
    4892:	17 06       	cpc	r1, r23
    4894:	48 07       	cpc	r20, r24
    4896:	5b 07       	cpc	r21, r27
    4898:	10 f4       	brcc	.+4      	; 0x489e <atan+0x1a>
    489a:	d9 2f       	mov	r29, r25
    489c:	f7 d0       	rcall	.+494    	; 0x4a8c <inverse>
    489e:	9f 93       	push	r25
    48a0:	8f 93       	push	r24
    48a2:	7f 93       	push	r23
    48a4:	6f 93       	push	r22
    48a6:	5a d1       	rcall	.+692    	; 0x4b5c <square>
    48a8:	ee e4       	ldi	r30, 0x4E	; 78
    48aa:	f1 e0       	ldi	r31, 0x01	; 1
    48ac:	82 d0       	rcall	.+260    	; 0x49b2 <__fp_powser>
    48ae:	b4 d0       	rcall	.+360    	; 0x4a18 <__fp_round>
    48b0:	2f 91       	pop	r18
    48b2:	3f 91       	pop	r19
    48b4:	4f 91       	pop	r20
    48b6:	5f 91       	pop	r21
    48b8:	fa d0       	rcall	.+500    	; 0x4aae <__mulsf3x>
    48ba:	dd 23       	and	r29, r29
    48bc:	49 f0       	breq	.+18     	; 0x48d0 <atan+0x4c>
    48be:	90 58       	subi	r25, 0x80	; 128
    48c0:	a2 ea       	ldi	r26, 0xA2	; 162
    48c2:	2a ed       	ldi	r18, 0xDA	; 218
    48c4:	3f e0       	ldi	r19, 0x0F	; 15
    48c6:	49 ec       	ldi	r20, 0xC9	; 201
    48c8:	5f e3       	ldi	r21, 0x3F	; 63
    48ca:	d0 78       	andi	r29, 0x80	; 128
    48cc:	5d 27       	eor	r21, r29
    48ce:	5b d1       	rcall	.+694    	; 0x4b86 <__addsf3x>
    48d0:	df 91       	pop	r29
    48d2:	a2 c0       	rjmp	.+324    	; 0x4a18 <__fp_round>
    48d4:	9a d0       	rcall	.+308    	; 0x4a0a <__fp_pscB>
    48d6:	40 f0       	brcs	.+16     	; 0x48e8 <atan+0x64>
    48d8:	91 d0       	rcall	.+290    	; 0x49fc <__fp_pscA>
    48da:	30 f0       	brcs	.+12     	; 0x48e8 <atan+0x64>
    48dc:	21 f4       	brne	.+8      	; 0x48e6 <atan+0x62>
    48de:	5f 3f       	cpi	r21, 0xFF	; 255
    48e0:	19 f0       	breq	.+6      	; 0x48e8 <atan+0x64>
    48e2:	5e c0       	rjmp	.+188    	; 0x49a0 <__fp_inf>
    48e4:	51 11       	cpse	r21, r1
    48e6:	cc c0       	rjmp	.+408    	; 0x4a80 <__fp_szero>
    48e8:	61 c0       	rjmp	.+194    	; 0x49ac <__fp_nan>

000048ea <__divsf3x>:
    48ea:	a7 d0       	rcall	.+334    	; 0x4a3a <__fp_split3>
    48ec:	98 f3       	brcs	.-26     	; 0x48d4 <atan+0x50>

000048ee <__divsf3_pse>:
    48ee:	99 23       	and	r25, r25
    48f0:	c9 f3       	breq	.-14     	; 0x48e4 <atan+0x60>
    48f2:	55 23       	and	r21, r21
    48f4:	b1 f3       	breq	.-20     	; 0x48e2 <atan+0x5e>
    48f6:	95 1b       	sub	r25, r21
    48f8:	55 0b       	sbc	r21, r21
    48fa:	bb 27       	eor	r27, r27
    48fc:	aa 27       	eor	r26, r26
    48fe:	62 17       	cp	r22, r18
    4900:	73 07       	cpc	r23, r19
    4902:	84 07       	cpc	r24, r20
    4904:	38 f0       	brcs	.+14     	; 0x4914 <__divsf3_pse+0x26>
    4906:	9f 5f       	subi	r25, 0xFF	; 255
    4908:	5f 4f       	sbci	r21, 0xFF	; 255
    490a:	22 0f       	add	r18, r18
    490c:	33 1f       	adc	r19, r19
    490e:	44 1f       	adc	r20, r20
    4910:	aa 1f       	adc	r26, r26
    4912:	a9 f3       	breq	.-22     	; 0x48fe <__divsf3_pse+0x10>
    4914:	33 d0       	rcall	.+102    	; 0x497c <__divsf3_pse+0x8e>
    4916:	0e 2e       	mov	r0, r30
    4918:	3a f0       	brmi	.+14     	; 0x4928 <__divsf3_pse+0x3a>
    491a:	e0 e8       	ldi	r30, 0x80	; 128
    491c:	30 d0       	rcall	.+96     	; 0x497e <__divsf3_pse+0x90>
    491e:	91 50       	subi	r25, 0x01	; 1
    4920:	50 40       	sbci	r21, 0x00	; 0
    4922:	e6 95       	lsr	r30
    4924:	00 1c       	adc	r0, r0
    4926:	ca f7       	brpl	.-14     	; 0x491a <__divsf3_pse+0x2c>
    4928:	29 d0       	rcall	.+82     	; 0x497c <__divsf3_pse+0x8e>
    492a:	fe 2f       	mov	r31, r30
    492c:	27 d0       	rcall	.+78     	; 0x497c <__divsf3_pse+0x8e>
    492e:	66 0f       	add	r22, r22
    4930:	77 1f       	adc	r23, r23
    4932:	88 1f       	adc	r24, r24
    4934:	bb 1f       	adc	r27, r27
    4936:	26 17       	cp	r18, r22
    4938:	37 07       	cpc	r19, r23
    493a:	48 07       	cpc	r20, r24
    493c:	ab 07       	cpc	r26, r27
    493e:	b0 e8       	ldi	r27, 0x80	; 128
    4940:	09 f0       	breq	.+2      	; 0x4944 <__divsf3_pse+0x56>
    4942:	bb 0b       	sbc	r27, r27
    4944:	80 2d       	mov	r24, r0
    4946:	bf 01       	movw	r22, r30
    4948:	ff 27       	eor	r31, r31
    494a:	93 58       	subi	r25, 0x83	; 131
    494c:	5f 4f       	sbci	r21, 0xFF	; 255
    494e:	2a f0       	brmi	.+10     	; 0x495a <__divsf3_pse+0x6c>
    4950:	9e 3f       	cpi	r25, 0xFE	; 254
    4952:	51 05       	cpc	r21, r1
    4954:	68 f0       	brcs	.+26     	; 0x4970 <__divsf3_pse+0x82>
    4956:	24 c0       	rjmp	.+72     	; 0x49a0 <__fp_inf>
    4958:	93 c0       	rjmp	.+294    	; 0x4a80 <__fp_szero>
    495a:	5f 3f       	cpi	r21, 0xFF	; 255
    495c:	ec f3       	brlt	.-6      	; 0x4958 <__divsf3_pse+0x6a>
    495e:	98 3e       	cpi	r25, 0xE8	; 232
    4960:	dc f3       	brlt	.-10     	; 0x4958 <__divsf3_pse+0x6a>
    4962:	86 95       	lsr	r24
    4964:	77 95       	ror	r23
    4966:	67 95       	ror	r22
    4968:	b7 95       	ror	r27
    496a:	f7 95       	ror	r31
    496c:	9f 5f       	subi	r25, 0xFF	; 255
    496e:	c9 f7       	brne	.-14     	; 0x4962 <__divsf3_pse+0x74>
    4970:	88 0f       	add	r24, r24
    4972:	91 1d       	adc	r25, r1
    4974:	96 95       	lsr	r25
    4976:	87 95       	ror	r24
    4978:	97 f9       	bld	r25, 7
    497a:	08 95       	ret
    497c:	e1 e0       	ldi	r30, 0x01	; 1
    497e:	66 0f       	add	r22, r22
    4980:	77 1f       	adc	r23, r23
    4982:	88 1f       	adc	r24, r24
    4984:	bb 1f       	adc	r27, r27
    4986:	62 17       	cp	r22, r18
    4988:	73 07       	cpc	r23, r19
    498a:	84 07       	cpc	r24, r20
    498c:	ba 07       	cpc	r27, r26
    498e:	20 f0       	brcs	.+8      	; 0x4998 <__divsf3_pse+0xaa>
    4990:	62 1b       	sub	r22, r18
    4992:	73 0b       	sbc	r23, r19
    4994:	84 0b       	sbc	r24, r20
    4996:	ba 0b       	sbc	r27, r26
    4998:	ee 1f       	adc	r30, r30
    499a:	88 f7       	brcc	.-30     	; 0x497e <__divsf3_pse+0x90>
    499c:	e0 95       	com	r30
    499e:	08 95       	ret

000049a0 <__fp_inf>:
    49a0:	97 f9       	bld	r25, 7
    49a2:	9f 67       	ori	r25, 0x7F	; 127
    49a4:	80 e8       	ldi	r24, 0x80	; 128
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	60 e0       	ldi	r22, 0x00	; 0
    49aa:	08 95       	ret

000049ac <__fp_nan>:
    49ac:	9f ef       	ldi	r25, 0xFF	; 255
    49ae:	80 ec       	ldi	r24, 0xC0	; 192
    49b0:	08 95       	ret

000049b2 <__fp_powser>:
    49b2:	df 93       	push	r29
    49b4:	cf 93       	push	r28
    49b6:	1f 93       	push	r17
    49b8:	0f 93       	push	r16
    49ba:	ff 92       	push	r15
    49bc:	ef 92       	push	r14
    49be:	df 92       	push	r13
    49c0:	7b 01       	movw	r14, r22
    49c2:	8c 01       	movw	r16, r24
    49c4:	68 94       	set
    49c6:	05 c0       	rjmp	.+10     	; 0x49d2 <__fp_powser+0x20>
    49c8:	da 2e       	mov	r13, r26
    49ca:	ef 01       	movw	r28, r30
    49cc:	70 d0       	rcall	.+224    	; 0x4aae <__mulsf3x>
    49ce:	fe 01       	movw	r30, r28
    49d0:	e8 94       	clt
    49d2:	a5 91       	lpm	r26, Z+
    49d4:	25 91       	lpm	r18, Z+
    49d6:	35 91       	lpm	r19, Z+
    49d8:	45 91       	lpm	r20, Z+
    49da:	55 91       	lpm	r21, Z+
    49dc:	ae f3       	brts	.-22     	; 0x49c8 <__fp_powser+0x16>
    49de:	ef 01       	movw	r28, r30
    49e0:	d2 d0       	rcall	.+420    	; 0x4b86 <__addsf3x>
    49e2:	fe 01       	movw	r30, r28
    49e4:	97 01       	movw	r18, r14
    49e6:	a8 01       	movw	r20, r16
    49e8:	da 94       	dec	r13
    49ea:	79 f7       	brne	.-34     	; 0x49ca <__fp_powser+0x18>
    49ec:	df 90       	pop	r13
    49ee:	ef 90       	pop	r14
    49f0:	ff 90       	pop	r15
    49f2:	0f 91       	pop	r16
    49f4:	1f 91       	pop	r17
    49f6:	cf 91       	pop	r28
    49f8:	df 91       	pop	r29
    49fa:	08 95       	ret

000049fc <__fp_pscA>:
    49fc:	00 24       	eor	r0, r0
    49fe:	0a 94       	dec	r0
    4a00:	16 16       	cp	r1, r22
    4a02:	17 06       	cpc	r1, r23
    4a04:	18 06       	cpc	r1, r24
    4a06:	09 06       	cpc	r0, r25
    4a08:	08 95       	ret

00004a0a <__fp_pscB>:
    4a0a:	00 24       	eor	r0, r0
    4a0c:	0a 94       	dec	r0
    4a0e:	12 16       	cp	r1, r18
    4a10:	13 06       	cpc	r1, r19
    4a12:	14 06       	cpc	r1, r20
    4a14:	05 06       	cpc	r0, r21
    4a16:	08 95       	ret

00004a18 <__fp_round>:
    4a18:	09 2e       	mov	r0, r25
    4a1a:	03 94       	inc	r0
    4a1c:	00 0c       	add	r0, r0
    4a1e:	11 f4       	brne	.+4      	; 0x4a24 <__fp_round+0xc>
    4a20:	88 23       	and	r24, r24
    4a22:	52 f0       	brmi	.+20     	; 0x4a38 <__fp_round+0x20>
    4a24:	bb 0f       	add	r27, r27
    4a26:	40 f4       	brcc	.+16     	; 0x4a38 <__fp_round+0x20>
    4a28:	bf 2b       	or	r27, r31
    4a2a:	11 f4       	brne	.+4      	; 0x4a30 <__fp_round+0x18>
    4a2c:	60 ff       	sbrs	r22, 0
    4a2e:	04 c0       	rjmp	.+8      	; 0x4a38 <__fp_round+0x20>
    4a30:	6f 5f       	subi	r22, 0xFF	; 255
    4a32:	7f 4f       	sbci	r23, 0xFF	; 255
    4a34:	8f 4f       	sbci	r24, 0xFF	; 255
    4a36:	9f 4f       	sbci	r25, 0xFF	; 255
    4a38:	08 95       	ret

00004a3a <__fp_split3>:
    4a3a:	57 fd       	sbrc	r21, 7
    4a3c:	90 58       	subi	r25, 0x80	; 128
    4a3e:	44 0f       	add	r20, r20
    4a40:	55 1f       	adc	r21, r21
    4a42:	59 f0       	breq	.+22     	; 0x4a5a <__fp_splitA+0x10>
    4a44:	5f 3f       	cpi	r21, 0xFF	; 255
    4a46:	71 f0       	breq	.+28     	; 0x4a64 <__fp_splitA+0x1a>
    4a48:	47 95       	ror	r20

00004a4a <__fp_splitA>:
    4a4a:	88 0f       	add	r24, r24
    4a4c:	97 fb       	bst	r25, 7
    4a4e:	99 1f       	adc	r25, r25
    4a50:	61 f0       	breq	.+24     	; 0x4a6a <__fp_splitA+0x20>
    4a52:	9f 3f       	cpi	r25, 0xFF	; 255
    4a54:	79 f0       	breq	.+30     	; 0x4a74 <__fp_splitA+0x2a>
    4a56:	87 95       	ror	r24
    4a58:	08 95       	ret
    4a5a:	12 16       	cp	r1, r18
    4a5c:	13 06       	cpc	r1, r19
    4a5e:	14 06       	cpc	r1, r20
    4a60:	55 1f       	adc	r21, r21
    4a62:	f2 cf       	rjmp	.-28     	; 0x4a48 <__fp_split3+0xe>
    4a64:	46 95       	lsr	r20
    4a66:	f1 df       	rcall	.-30     	; 0x4a4a <__fp_splitA>
    4a68:	08 c0       	rjmp	.+16     	; 0x4a7a <__fp_splitA+0x30>
    4a6a:	16 16       	cp	r1, r22
    4a6c:	17 06       	cpc	r1, r23
    4a6e:	18 06       	cpc	r1, r24
    4a70:	99 1f       	adc	r25, r25
    4a72:	f1 cf       	rjmp	.-30     	; 0x4a56 <__fp_splitA+0xc>
    4a74:	86 95       	lsr	r24
    4a76:	71 05       	cpc	r23, r1
    4a78:	61 05       	cpc	r22, r1
    4a7a:	08 94       	sec
    4a7c:	08 95       	ret

00004a7e <__fp_zero>:
    4a7e:	e8 94       	clt

00004a80 <__fp_szero>:
    4a80:	bb 27       	eor	r27, r27
    4a82:	66 27       	eor	r22, r22
    4a84:	77 27       	eor	r23, r23
    4a86:	cb 01       	movw	r24, r22
    4a88:	97 f9       	bld	r25, 7
    4a8a:	08 95       	ret

00004a8c <inverse>:
    4a8c:	9b 01       	movw	r18, r22
    4a8e:	ac 01       	movw	r20, r24
    4a90:	60 e0       	ldi	r22, 0x00	; 0
    4a92:	70 e0       	ldi	r23, 0x00	; 0
    4a94:	80 e8       	ldi	r24, 0x80	; 128
    4a96:	9f e3       	ldi	r25, 0x3F	; 63
    4a98:	c9 c0       	rjmp	.+402    	; 0x4c2c <__divsf3>
    4a9a:	b0 df       	rcall	.-160    	; 0x49fc <__fp_pscA>
    4a9c:	28 f0       	brcs	.+10     	; 0x4aa8 <inverse+0x1c>
    4a9e:	b5 df       	rcall	.-150    	; 0x4a0a <__fp_pscB>
    4aa0:	18 f0       	brcs	.+6      	; 0x4aa8 <inverse+0x1c>
    4aa2:	95 23       	and	r25, r21
    4aa4:	09 f0       	breq	.+2      	; 0x4aa8 <inverse+0x1c>
    4aa6:	7c cf       	rjmp	.-264    	; 0x49a0 <__fp_inf>
    4aa8:	81 cf       	rjmp	.-254    	; 0x49ac <__fp_nan>
    4aaa:	11 24       	eor	r1, r1
    4aac:	e9 cf       	rjmp	.-46     	; 0x4a80 <__fp_szero>

00004aae <__mulsf3x>:
    4aae:	c5 df       	rcall	.-118    	; 0x4a3a <__fp_split3>
    4ab0:	a0 f3       	brcs	.-24     	; 0x4a9a <inverse+0xe>

00004ab2 <__mulsf3_pse>:
    4ab2:	95 9f       	mul	r25, r21
    4ab4:	d1 f3       	breq	.-12     	; 0x4aaa <inverse+0x1e>
    4ab6:	95 0f       	add	r25, r21
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	55 1f       	adc	r21, r21
    4abc:	62 9f       	mul	r22, r18
    4abe:	f0 01       	movw	r30, r0
    4ac0:	72 9f       	mul	r23, r18
    4ac2:	bb 27       	eor	r27, r27
    4ac4:	f0 0d       	add	r31, r0
    4ac6:	b1 1d       	adc	r27, r1
    4ac8:	63 9f       	mul	r22, r19
    4aca:	aa 27       	eor	r26, r26
    4acc:	f0 0d       	add	r31, r0
    4ace:	b1 1d       	adc	r27, r1
    4ad0:	aa 1f       	adc	r26, r26
    4ad2:	64 9f       	mul	r22, r20
    4ad4:	66 27       	eor	r22, r22
    4ad6:	b0 0d       	add	r27, r0
    4ad8:	a1 1d       	adc	r26, r1
    4ada:	66 1f       	adc	r22, r22
    4adc:	82 9f       	mul	r24, r18
    4ade:	22 27       	eor	r18, r18
    4ae0:	b0 0d       	add	r27, r0
    4ae2:	a1 1d       	adc	r26, r1
    4ae4:	62 1f       	adc	r22, r18
    4ae6:	73 9f       	mul	r23, r19
    4ae8:	b0 0d       	add	r27, r0
    4aea:	a1 1d       	adc	r26, r1
    4aec:	62 1f       	adc	r22, r18
    4aee:	83 9f       	mul	r24, r19
    4af0:	a0 0d       	add	r26, r0
    4af2:	61 1d       	adc	r22, r1
    4af4:	22 1f       	adc	r18, r18
    4af6:	74 9f       	mul	r23, r20
    4af8:	33 27       	eor	r19, r19
    4afa:	a0 0d       	add	r26, r0
    4afc:	61 1d       	adc	r22, r1
    4afe:	23 1f       	adc	r18, r19
    4b00:	84 9f       	mul	r24, r20
    4b02:	60 0d       	add	r22, r0
    4b04:	21 1d       	adc	r18, r1
    4b06:	82 2f       	mov	r24, r18
    4b08:	76 2f       	mov	r23, r22
    4b0a:	6a 2f       	mov	r22, r26
    4b0c:	11 24       	eor	r1, r1
    4b0e:	9f 57       	subi	r25, 0x7F	; 127
    4b10:	50 40       	sbci	r21, 0x00	; 0
    4b12:	8a f0       	brmi	.+34     	; 0x4b36 <__mulsf3_pse+0x84>
    4b14:	e1 f0       	breq	.+56     	; 0x4b4e <__mulsf3_pse+0x9c>
    4b16:	88 23       	and	r24, r24
    4b18:	4a f0       	brmi	.+18     	; 0x4b2c <__mulsf3_pse+0x7a>
    4b1a:	ee 0f       	add	r30, r30
    4b1c:	ff 1f       	adc	r31, r31
    4b1e:	bb 1f       	adc	r27, r27
    4b20:	66 1f       	adc	r22, r22
    4b22:	77 1f       	adc	r23, r23
    4b24:	88 1f       	adc	r24, r24
    4b26:	91 50       	subi	r25, 0x01	; 1
    4b28:	50 40       	sbci	r21, 0x00	; 0
    4b2a:	a9 f7       	brne	.-22     	; 0x4b16 <__mulsf3_pse+0x64>
    4b2c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b2e:	51 05       	cpc	r21, r1
    4b30:	70 f0       	brcs	.+28     	; 0x4b4e <__mulsf3_pse+0x9c>
    4b32:	36 cf       	rjmp	.-404    	; 0x49a0 <__fp_inf>
    4b34:	a5 cf       	rjmp	.-182    	; 0x4a80 <__fp_szero>
    4b36:	5f 3f       	cpi	r21, 0xFF	; 255
    4b38:	ec f3       	brlt	.-6      	; 0x4b34 <__mulsf3_pse+0x82>
    4b3a:	98 3e       	cpi	r25, 0xE8	; 232
    4b3c:	dc f3       	brlt	.-10     	; 0x4b34 <__mulsf3_pse+0x82>
    4b3e:	86 95       	lsr	r24
    4b40:	77 95       	ror	r23
    4b42:	67 95       	ror	r22
    4b44:	b7 95       	ror	r27
    4b46:	f7 95       	ror	r31
    4b48:	e7 95       	ror	r30
    4b4a:	9f 5f       	subi	r25, 0xFF	; 255
    4b4c:	c1 f7       	brne	.-16     	; 0x4b3e <__mulsf3_pse+0x8c>
    4b4e:	fe 2b       	or	r31, r30
    4b50:	88 0f       	add	r24, r24
    4b52:	91 1d       	adc	r25, r1
    4b54:	96 95       	lsr	r25
    4b56:	87 95       	ror	r24
    4b58:	97 f9       	bld	r25, 7
    4b5a:	08 95       	ret

00004b5c <square>:
    4b5c:	9b 01       	movw	r18, r22
    4b5e:	ac 01       	movw	r20, r24
    4b60:	2f ca       	rjmp	.-2978   	; 0x3fc0 <__mulsf3>

00004b62 <__subsf3>:
    4b62:	50 58       	subi	r21, 0x80	; 128

00004b64 <__addsf3>:
    4b64:	bb 27       	eor	r27, r27
    4b66:	aa 27       	eor	r26, r26
    4b68:	0e d0       	rcall	.+28     	; 0x4b86 <__addsf3x>
    4b6a:	56 cf       	rjmp	.-340    	; 0x4a18 <__fp_round>
    4b6c:	47 df       	rcall	.-370    	; 0x49fc <__fp_pscA>
    4b6e:	30 f0       	brcs	.+12     	; 0x4b7c <__addsf3+0x18>
    4b70:	4c df       	rcall	.-360    	; 0x4a0a <__fp_pscB>
    4b72:	20 f0       	brcs	.+8      	; 0x4b7c <__addsf3+0x18>
    4b74:	31 f4       	brne	.+12     	; 0x4b82 <__addsf3+0x1e>
    4b76:	9f 3f       	cpi	r25, 0xFF	; 255
    4b78:	11 f4       	brne	.+4      	; 0x4b7e <__addsf3+0x1a>
    4b7a:	1e f4       	brtc	.+6      	; 0x4b82 <__addsf3+0x1e>
    4b7c:	17 cf       	rjmp	.-466    	; 0x49ac <__fp_nan>
    4b7e:	0e f4       	brtc	.+2      	; 0x4b82 <__addsf3+0x1e>
    4b80:	e0 95       	com	r30
    4b82:	e7 fb       	bst	r30, 7
    4b84:	0d cf       	rjmp	.-486    	; 0x49a0 <__fp_inf>

00004b86 <__addsf3x>:
    4b86:	e9 2f       	mov	r30, r25
    4b88:	58 df       	rcall	.-336    	; 0x4a3a <__fp_split3>
    4b8a:	80 f3       	brcs	.-32     	; 0x4b6c <__addsf3+0x8>
    4b8c:	ba 17       	cp	r27, r26
    4b8e:	62 07       	cpc	r22, r18
    4b90:	73 07       	cpc	r23, r19
    4b92:	84 07       	cpc	r24, r20
    4b94:	95 07       	cpc	r25, r21
    4b96:	18 f0       	brcs	.+6      	; 0x4b9e <__addsf3x+0x18>
    4b98:	71 f4       	brne	.+28     	; 0x4bb6 <__addsf3x+0x30>
    4b9a:	9e f5       	brtc	.+102    	; 0x4c02 <__addsf3x+0x7c>
    4b9c:	70 cf       	rjmp	.-288    	; 0x4a7e <__fp_zero>
    4b9e:	0e f4       	brtc	.+2      	; 0x4ba2 <__addsf3x+0x1c>
    4ba0:	e0 95       	com	r30
    4ba2:	0b 2e       	mov	r0, r27
    4ba4:	ba 2f       	mov	r27, r26
    4ba6:	a0 2d       	mov	r26, r0
    4ba8:	0b 01       	movw	r0, r22
    4baa:	b9 01       	movw	r22, r18
    4bac:	90 01       	movw	r18, r0
    4bae:	0c 01       	movw	r0, r24
    4bb0:	ca 01       	movw	r24, r20
    4bb2:	a0 01       	movw	r20, r0
    4bb4:	11 24       	eor	r1, r1
    4bb6:	ff 27       	eor	r31, r31
    4bb8:	59 1b       	sub	r21, r25
    4bba:	99 f0       	breq	.+38     	; 0x4be2 <__addsf3x+0x5c>
    4bbc:	59 3f       	cpi	r21, 0xF9	; 249
    4bbe:	50 f4       	brcc	.+20     	; 0x4bd4 <__addsf3x+0x4e>
    4bc0:	50 3e       	cpi	r21, 0xE0	; 224
    4bc2:	68 f1       	brcs	.+90     	; 0x4c1e <__addsf3x+0x98>
    4bc4:	1a 16       	cp	r1, r26
    4bc6:	f0 40       	sbci	r31, 0x00	; 0
    4bc8:	a2 2f       	mov	r26, r18
    4bca:	23 2f       	mov	r18, r19
    4bcc:	34 2f       	mov	r19, r20
    4bce:	44 27       	eor	r20, r20
    4bd0:	58 5f       	subi	r21, 0xF8	; 248
    4bd2:	f3 cf       	rjmp	.-26     	; 0x4bba <__addsf3x+0x34>
    4bd4:	46 95       	lsr	r20
    4bd6:	37 95       	ror	r19
    4bd8:	27 95       	ror	r18
    4bda:	a7 95       	ror	r26
    4bdc:	f0 40       	sbci	r31, 0x00	; 0
    4bde:	53 95       	inc	r21
    4be0:	c9 f7       	brne	.-14     	; 0x4bd4 <__addsf3x+0x4e>
    4be2:	7e f4       	brtc	.+30     	; 0x4c02 <__addsf3x+0x7c>
    4be4:	1f 16       	cp	r1, r31
    4be6:	ba 0b       	sbc	r27, r26
    4be8:	62 0b       	sbc	r22, r18
    4bea:	73 0b       	sbc	r23, r19
    4bec:	84 0b       	sbc	r24, r20
    4bee:	ba f0       	brmi	.+46     	; 0x4c1e <__addsf3x+0x98>
    4bf0:	91 50       	subi	r25, 0x01	; 1
    4bf2:	a1 f0       	breq	.+40     	; 0x4c1c <__addsf3x+0x96>
    4bf4:	ff 0f       	add	r31, r31
    4bf6:	bb 1f       	adc	r27, r27
    4bf8:	66 1f       	adc	r22, r22
    4bfa:	77 1f       	adc	r23, r23
    4bfc:	88 1f       	adc	r24, r24
    4bfe:	c2 f7       	brpl	.-16     	; 0x4bf0 <__addsf3x+0x6a>
    4c00:	0e c0       	rjmp	.+28     	; 0x4c1e <__addsf3x+0x98>
    4c02:	ba 0f       	add	r27, r26
    4c04:	62 1f       	adc	r22, r18
    4c06:	73 1f       	adc	r23, r19
    4c08:	84 1f       	adc	r24, r20
    4c0a:	48 f4       	brcc	.+18     	; 0x4c1e <__addsf3x+0x98>
    4c0c:	87 95       	ror	r24
    4c0e:	77 95       	ror	r23
    4c10:	67 95       	ror	r22
    4c12:	b7 95       	ror	r27
    4c14:	f7 95       	ror	r31
    4c16:	9e 3f       	cpi	r25, 0xFE	; 254
    4c18:	08 f0       	brcs	.+2      	; 0x4c1c <__addsf3x+0x96>
    4c1a:	b3 cf       	rjmp	.-154    	; 0x4b82 <__addsf3+0x1e>
    4c1c:	93 95       	inc	r25
    4c1e:	88 0f       	add	r24, r24
    4c20:	08 f0       	brcs	.+2      	; 0x4c24 <__addsf3x+0x9e>
    4c22:	99 27       	eor	r25, r25
    4c24:	ee 0f       	add	r30, r30
    4c26:	97 95       	ror	r25
    4c28:	87 95       	ror	r24
    4c2a:	08 95       	ret

00004c2c <__divsf3>:
    4c2c:	5e de       	rcall	.-836    	; 0x48ea <__divsf3x>
    4c2e:	f4 ce       	rjmp	.-536    	; 0x4a18 <__fp_round>

00004c30 <__divmodsi4>:
    4c30:	97 fb       	bst	r25, 7
    4c32:	09 2e       	mov	r0, r25
    4c34:	05 26       	eor	r0, r21
    4c36:	0e d0       	rcall	.+28     	; 0x4c54 <__divmodsi4_neg1>
    4c38:	57 fd       	sbrc	r21, 7
    4c3a:	04 d0       	rcall	.+8      	; 0x4c44 <__divmodsi4_neg2>
    4c3c:	14 d0       	rcall	.+40     	; 0x4c66 <__udivmodsi4>
    4c3e:	0a d0       	rcall	.+20     	; 0x4c54 <__divmodsi4_neg1>
    4c40:	00 1c       	adc	r0, r0
    4c42:	38 f4       	brcc	.+14     	; 0x4c52 <__divmodsi4_exit>

00004c44 <__divmodsi4_neg2>:
    4c44:	50 95       	com	r21
    4c46:	40 95       	com	r20
    4c48:	30 95       	com	r19
    4c4a:	21 95       	neg	r18
    4c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c50:	5f 4f       	sbci	r21, 0xFF	; 255

00004c52 <__divmodsi4_exit>:
    4c52:	08 95       	ret

00004c54 <__divmodsi4_neg1>:
    4c54:	f6 f7       	brtc	.-4      	; 0x4c52 <__divmodsi4_exit>
    4c56:	90 95       	com	r25
    4c58:	80 95       	com	r24
    4c5a:	70 95       	com	r23
    4c5c:	61 95       	neg	r22
    4c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c60:	8f 4f       	sbci	r24, 0xFF	; 255
    4c62:	9f 4f       	sbci	r25, 0xFF	; 255
    4c64:	08 95       	ret

00004c66 <__udivmodsi4>:
    4c66:	a1 e2       	ldi	r26, 0x21	; 33
    4c68:	1a 2e       	mov	r1, r26
    4c6a:	aa 1b       	sub	r26, r26
    4c6c:	bb 1b       	sub	r27, r27
    4c6e:	fd 01       	movw	r30, r26
    4c70:	0d c0       	rjmp	.+26     	; 0x4c8c <__udivmodsi4_ep>

00004c72 <__udivmodsi4_loop>:
    4c72:	aa 1f       	adc	r26, r26
    4c74:	bb 1f       	adc	r27, r27
    4c76:	ee 1f       	adc	r30, r30
    4c78:	ff 1f       	adc	r31, r31
    4c7a:	a2 17       	cp	r26, r18
    4c7c:	b3 07       	cpc	r27, r19
    4c7e:	e4 07       	cpc	r30, r20
    4c80:	f5 07       	cpc	r31, r21
    4c82:	20 f0       	brcs	.+8      	; 0x4c8c <__udivmodsi4_ep>
    4c84:	a2 1b       	sub	r26, r18
    4c86:	b3 0b       	sbc	r27, r19
    4c88:	e4 0b       	sbc	r30, r20
    4c8a:	f5 0b       	sbc	r31, r21

00004c8c <__udivmodsi4_ep>:
    4c8c:	66 1f       	adc	r22, r22
    4c8e:	77 1f       	adc	r23, r23
    4c90:	88 1f       	adc	r24, r24
    4c92:	99 1f       	adc	r25, r25
    4c94:	1a 94       	dec	r1
    4c96:	69 f7       	brne	.-38     	; 0x4c72 <__udivmodsi4_loop>
    4c98:	60 95       	com	r22
    4c9a:	70 95       	com	r23
    4c9c:	80 95       	com	r24
    4c9e:	90 95       	com	r25
    4ca0:	9b 01       	movw	r18, r22
    4ca2:	ac 01       	movw	r20, r24
    4ca4:	bd 01       	movw	r22, r26
    4ca6:	cf 01       	movw	r24, r30
    4ca8:	08 95       	ret

00004caa <_exit>:
    4caa:	ff cf       	rjmp	.-2      	; 0x4caa <_exit>
