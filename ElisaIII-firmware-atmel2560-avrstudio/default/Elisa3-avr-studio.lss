
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  000049e2  00004a76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000132  00800328  00800328  00004b9e  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  00006ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  000075e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f10  00000000  00000000  00007862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e59  00000000  00000000  00008772  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000148d  00000000  00000000  0000c5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004524  00000000  00000000  0000da58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  00011f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e79  00000000  00000000  0001258c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001163  00000000  00000000  00013405  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f2  00000000  00000000  00014568  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  0001475a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <__vector_32>
      84:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__vector_42>
      ac:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	1e 0b       	sbc	r17, r30
      e6:	02 0b       	sbc	r16, r18
      e8:	ce 0a       	sbc	r12, r30
      ea:	b9 0a       	sbc	r11, r25
      ec:	8c 0a       	sbc	r8, r28
      ee:	7f 0a       	sbc	r7, r31
      f0:	56 0a       	sbc	r5, r22
      f2:	3a 0a       	sbc	r3, r26
      f4:	0d 0a       	sbc	r0, r29
      f6:	f3 09       	sbc	r31, r3
      f8:	bb 06       	cpc	r11, r27
      fa:	bb 06       	cpc	r11, r27
      fc:	bb 06       	cpc	r11, r27
      fe:	bb 06       	cpc	r11, r27
     100:	bb 06       	cpc	r11, r27
     102:	bb 06       	cpc	r11, r27
     104:	e8 09       	sbc	r30, r8
     106:	dd 09       	sbc	r29, r13
     108:	bb 06       	cpc	r11, r27
     10a:	bb 06       	cpc	r11, r27
     10c:	bb 06       	cpc	r11, r27
     10e:	bb 06       	cpc	r11, r27
     110:	bb 06       	cpc	r11, r27
     112:	bb 06       	cpc	r11, r27
     114:	bb 06       	cpc	r11, r27
     116:	bb 06       	cpc	r11, r27
     118:	bb 06       	cpc	r11, r27
     11a:	bb 06       	cpc	r11, r27
     11c:	bb 06       	cpc	r11, r27
     11e:	bb 06       	cpc	r11, r27
     120:	0d 0a       	sbc	r0, r29
     122:	ce 0a       	sbc	r12, r30
     124:	cd 09       	sbc	r28, r13
     126:	c8 09       	sbc	r28, r8
     128:	bb 06       	cpc	r11, r27
     12a:	bb 06       	cpc	r11, r27
     12c:	bb 06       	cpc	r11, r27
     12e:	bb 06       	cpc	r11, r27
     130:	bb 06       	cpc	r11, r27
     132:	bb 06       	cpc	r11, r27
     134:	bb 06       	cpc	r11, r27
     136:	bb 06       	cpc	r11, r27
     138:	bb 06       	cpc	r11, r27
     13a:	bb 06       	cpc	r11, r27
     13c:	bb 06       	cpc	r11, r27
     13e:	bb 06       	cpc	r11, r27
     140:	8c 0a       	sbc	r8, r28
     142:	56 0a       	sbc	r5, r22
     144:	bb 06       	cpc	r11, r27
     146:	bb 06       	cpc	r11, r27
     148:	1e 0b       	sbc	r17, r30
     14a:	7f 0a       	sbc	r7, r31
     14c:	48 0b       	sbc	r20, r24
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e2 ee       	ldi	r30, 0xE2	; 226
     194:	f9 e4       	ldi	r31, 0x49	; 73
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a8 32       	cpi	r26, 0x28	; 40
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a8 e2       	ldi	r26, 0x28	; 40
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	aa 35       	cpi	r26, 0x5A	; 90
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 f0 24 	jmp	0x49e0	; 0x49e0 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "motors.h"
#include "leds.h"
#include "behaviors.h"


int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	a4 97       	sbiw	r28, 0x24	; 36
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61

	unsigned int i = 0;
	choosePeripheral = 1;
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	10 93 16 02 	sts	0x0216, r17

	initPeripherals();
     1f8:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <initPeripherals>

	startCalibration = 1;
     1fc:	10 93 29 04 	sts	0x0429, r17
	calibrationCycle = 0;
     200:	10 92 2b 04 	sts	0x042B, r1
     204:	10 92 2a 04 	sts	0x042A, r1
	updateBlueLed(pwm_blue);				
*/				

	while(1) {

		PORTB ^= (1 << 6); // Toggle the green LED
     208:	00 e4       	ldi	r16, 0x40	; 64
     20a:	85 b1       	in	r24, 0x05	; 5
     20c:	80 27       	eor	r24, r16
     20e:	85 b9       	out	0x05, r24	; 5

		currentSelector = getSelector();
     210:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getSelector>
     214:	80 93 28 04 	sts	0x0428, r24
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
     218:	0e 94 9f 18 	call	0x313e	; 0x313e <readAccelXYZ>
		//PORTB |= (1 << 6);
		computeAngle();
     21c:	0e 94 5f 19 	call	0x32be	; 0x32be <computeAngle>

		if(updateProx) {
     220:	80 91 9c 03 	lds	r24, 0x039C
     224:	88 23       	and	r24, r24
     226:	09 f0       	breq	.+2      	; 0x22a <main+0x6c>
     228:	77 c2       	rjmp	.+1262   	; 0x718 <main+0x55a>
     22a:	40 91 29 04 	lds	r20, 0x0429
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
     22e:	20 91 26 04 	lds	r18, 0x0426
     232:	30 91 27 04 	lds	r19, 0x0427
     236:	5e e4       	ldi	r21, 0x4E	; 78
     238:	20 32       	cpi	r18, 0x20	; 32
     23a:	35 07       	cpc	r19, r21
     23c:	10 f0       	brcs	.+4      	; 0x242 <main+0x84>
			measBattery = 1;
     23e:	10 93 99 03 	sts	0x0399, r17
			}
			*/
		}


		if(startCalibration && calibrationCycle<CALIBRATION_CYCLES) {
     242:	44 23       	and	r20, r20
     244:	09 f4       	brne	.+2      	; 0x248 <main+0x8a>
     246:	dc c1       	rjmp	.+952    	; 0x600 <main+0x442>
     248:	60 91 2a 04 	lds	r22, 0x042A
     24c:	70 91 2b 04 	lds	r23, 0x042B
     250:	60 31       	cpi	r22, 0x10	; 16
     252:	71 05       	cpc	r23, r1
     254:	0c f0       	brlt	.+2      	; 0x258 <main+0x9a>
     256:	d8 c1       	rjmp	.+944    	; 0x608 <main+0x44a>

			if(proxUpdated) {
     258:	80 91 cd 03 	lds	r24, 0x03CD
     25c:	88 23       	and	r24, r24
     25e:	a9 f2       	breq	.-86     	; 0x20a <main+0x4c>

				proxUpdated = 0;
     260:	10 92 cd 03 	sts	0x03CD, r1
				
				if(calibrationCycle==0) {
     264:	61 15       	cp	r22, r1
     266:	71 05       	cpc	r23, r1
     268:	11 f4       	brne	.+4      	; 0x26e <main+0xb0>
     26a:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <main+0x1134>
     26e:	80 91 1e 04 	lds	r24, 0x041E
     272:	90 91 1f 04 	lds	r25, 0x041F
     276:	9c a3       	std	Y+36, r25	; 0x24
     278:	8b a3       	std	Y+35, r24	; 0x23
     27a:	20 90 20 04 	lds	r2, 0x0420
     27e:	30 90 21 04 	lds	r3, 0x0421
     282:	a0 91 22 04 	lds	r26, 0x0422
     286:	b0 91 23 04 	lds	r27, 0x0423
     28a:	ba 83       	std	Y+2, r27	; 0x02
     28c:	a9 83       	std	Y+1, r26	; 0x01
     28e:	20 91 9d 03 	lds	r18, 0x039D
     292:	30 91 9e 03 	lds	r19, 0x039E
     296:	40 91 9f 03 	lds	r20, 0x039F
     29a:	50 91 a0 03 	lds	r21, 0x03A0
     29e:	c0 90 a1 03 	lds	r12, 0x03A1
     2a2:	d0 90 a2 03 	lds	r13, 0x03A2
     2a6:	e0 90 a3 03 	lds	r14, 0x03A3
     2aa:	f0 90 a4 03 	lds	r15, 0x03A4
     2ae:	80 90 a5 03 	lds	r8, 0x03A5
     2b2:	90 90 a6 03 	lds	r9, 0x03A6
     2b6:	a0 90 a7 03 	lds	r10, 0x03A7
     2ba:	b0 90 a8 03 	lds	r11, 0x03A8
     2be:	40 90 a9 03 	lds	r4, 0x03A9
     2c2:	50 90 aa 03 	lds	r5, 0x03AA
     2c6:	60 90 ab 03 	lds	r6, 0x03AB
     2ca:	70 90 ac 03 	lds	r7, 0x03AC
     2ce:	80 91 ad 03 	lds	r24, 0x03AD
     2d2:	90 91 ae 03 	lds	r25, 0x03AE
     2d6:	a0 91 af 03 	lds	r26, 0x03AF
     2da:	b0 91 b0 03 	lds	r27, 0x03B0
     2de:	8b 83       	std	Y+3, r24	; 0x03
     2e0:	9c 83       	std	Y+4, r25	; 0x04
     2e2:	ad 83       	std	Y+5, r26	; 0x05
     2e4:	be 83       	std	Y+6, r27	; 0x06
     2e6:	80 91 b1 03 	lds	r24, 0x03B1
     2ea:	90 91 b2 03 	lds	r25, 0x03B2
     2ee:	a0 91 b3 03 	lds	r26, 0x03B3
     2f2:	b0 91 b4 03 	lds	r27, 0x03B4
     2f6:	8f 83       	std	Y+7, r24	; 0x07
     2f8:	98 87       	std	Y+8, r25	; 0x08
     2fa:	a9 87       	std	Y+9, r26	; 0x09
     2fc:	ba 87       	std	Y+10, r27	; 0x0a
     2fe:	80 91 b5 03 	lds	r24, 0x03B5
     302:	90 91 b6 03 	lds	r25, 0x03B6
     306:	a0 91 b7 03 	lds	r26, 0x03B7
     30a:	b0 91 b8 03 	lds	r27, 0x03B8
     30e:	8b 87       	std	Y+11, r24	; 0x0b
     310:	9c 87       	std	Y+12, r25	; 0x0c
     312:	ad 87       	std	Y+13, r26	; 0x0d
     314:	be 87       	std	Y+14, r27	; 0x0e
     316:	80 91 b9 03 	lds	r24, 0x03B9
     31a:	90 91 ba 03 	lds	r25, 0x03BA
     31e:	a0 91 bb 03 	lds	r26, 0x03BB
     322:	b0 91 bc 03 	lds	r27, 0x03BC
     326:	8f 87       	std	Y+15, r24	; 0x0f
     328:	98 8b       	std	Y+16, r25	; 0x10
     32a:	a9 8b       	std	Y+17, r26	; 0x11
     32c:	ba 8b       	std	Y+18, r27	; 0x12
     32e:	80 91 bd 03 	lds	r24, 0x03BD
     332:	90 91 be 03 	lds	r25, 0x03BE
     336:	a0 91 bf 03 	lds	r26, 0x03BF
     33a:	b0 91 c0 03 	lds	r27, 0x03C0
     33e:	8b 8b       	std	Y+19, r24	; 0x13
     340:	9c 8b       	std	Y+20, r25	; 0x14
     342:	ad 8b       	std	Y+21, r26	; 0x15
     344:	be 8b       	std	Y+22, r27	; 0x16
     346:	80 91 c1 03 	lds	r24, 0x03C1
     34a:	90 91 c2 03 	lds	r25, 0x03C2
     34e:	a0 91 c3 03 	lds	r26, 0x03C3
     352:	b0 91 c4 03 	lds	r27, 0x03C4
     356:	8f 8b       	std	Y+23, r24	; 0x17
     358:	98 8f       	std	Y+24, r25	; 0x18
     35a:	a9 8f       	std	Y+25, r26	; 0x19
     35c:	ba 8f       	std	Y+26, r27	; 0x1a
     35e:	80 91 c5 03 	lds	r24, 0x03C5
     362:	90 91 c6 03 	lds	r25, 0x03C6
     366:	a0 91 c7 03 	lds	r26, 0x03C7
     36a:	b0 91 c8 03 	lds	r27, 0x03C8
     36e:	8b 8f       	std	Y+27, r24	; 0x1b
     370:	9c 8f       	std	Y+28, r25	; 0x1c
     372:	ad 8f       	std	Y+29, r26	; 0x1d
     374:	be 8f       	std	Y+30, r27	; 0x1e
     376:	80 91 c9 03 	lds	r24, 0x03C9
     37a:	90 91 ca 03 	lds	r25, 0x03CA
     37e:	a0 91 cb 03 	lds	r26, 0x03CB
     382:	b0 91 cc 03 	lds	r27, 0x03CC
     386:	8f 8f       	std	Y+31, r24	; 0x1f
     388:	98 a3       	std	Y+32, r25	; 0x20
     38a:	a9 a3       	std	Y+33, r26	; 0x21
     38c:	ba a3       	std	Y+34, r27	; 0x22
					accOffsetYSum = 0;
					accOffsetZSum = 0;
				}
			
				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
     38e:	80 91 63 03 	lds	r24, 0x0363
     392:	90 91 64 03 	lds	r25, 0x0364
     396:	aa 27       	eor	r26, r26
     398:	97 fd       	sbrc	r25, 7
     39a:	a0 95       	com	r26
     39c:	ba 2f       	mov	r27, r26
     39e:	82 0f       	add	r24, r18
     3a0:	93 1f       	adc	r25, r19
     3a2:	a4 1f       	adc	r26, r20
     3a4:	b5 1f       	adc	r27, r21
     3a6:	80 93 9d 03 	sts	0x039D, r24
     3aa:	90 93 9e 03 	sts	0x039E, r25
     3ae:	a0 93 9f 03 	sts	0x039F, r26
     3b2:	b0 93 a0 03 	sts	0x03A0, r27
     3b6:	80 91 65 03 	lds	r24, 0x0365
     3ba:	90 91 66 03 	lds	r25, 0x0366
     3be:	aa 27       	eor	r26, r26
     3c0:	97 fd       	sbrc	r25, 7
     3c2:	a0 95       	com	r26
     3c4:	ba 2f       	mov	r27, r26
     3c6:	8c 0d       	add	r24, r12
     3c8:	9d 1d       	adc	r25, r13
     3ca:	ae 1d       	adc	r26, r14
     3cc:	bf 1d       	adc	r27, r15
     3ce:	80 93 a1 03 	sts	0x03A1, r24
     3d2:	90 93 a2 03 	sts	0x03A2, r25
     3d6:	a0 93 a3 03 	sts	0x03A3, r26
     3da:	b0 93 a4 03 	sts	0x03A4, r27
     3de:	80 91 67 03 	lds	r24, 0x0367
     3e2:	90 91 68 03 	lds	r25, 0x0368
     3e6:	aa 27       	eor	r26, r26
     3e8:	97 fd       	sbrc	r25, 7
     3ea:	a0 95       	com	r26
     3ec:	ba 2f       	mov	r27, r26
     3ee:	88 0d       	add	r24, r8
     3f0:	99 1d       	adc	r25, r9
     3f2:	aa 1d       	adc	r26, r10
     3f4:	bb 1d       	adc	r27, r11
     3f6:	80 93 a5 03 	sts	0x03A5, r24
     3fa:	90 93 a6 03 	sts	0x03A6, r25
     3fe:	a0 93 a7 03 	sts	0x03A7, r26
     402:	b0 93 a8 03 	sts	0x03A8, r27
     406:	80 91 69 03 	lds	r24, 0x0369
     40a:	90 91 6a 03 	lds	r25, 0x036A
     40e:	aa 27       	eor	r26, r26
     410:	97 fd       	sbrc	r25, 7
     412:	a0 95       	com	r26
     414:	ba 2f       	mov	r27, r26
     416:	84 0d       	add	r24, r4
     418:	95 1d       	adc	r25, r5
     41a:	a6 1d       	adc	r26, r6
     41c:	b7 1d       	adc	r27, r7
     41e:	80 93 a9 03 	sts	0x03A9, r24
     422:	90 93 aa 03 	sts	0x03AA, r25
     426:	a0 93 ab 03 	sts	0x03AB, r26
     42a:	b0 93 ac 03 	sts	0x03AC, r27
     42e:	80 91 6b 03 	lds	r24, 0x036B
     432:	90 91 6c 03 	lds	r25, 0x036C
     436:	aa 27       	eor	r26, r26
     438:	97 fd       	sbrc	r25, 7
     43a:	a0 95       	com	r26
     43c:	ba 2f       	mov	r27, r26
     43e:	2b 81       	ldd	r18, Y+3	; 0x03
     440:	3c 81       	ldd	r19, Y+4	; 0x04
     442:	4d 81       	ldd	r20, Y+5	; 0x05
     444:	5e 81       	ldd	r21, Y+6	; 0x06
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	a4 1f       	adc	r26, r20
     44c:	b5 1f       	adc	r27, r21
     44e:	80 93 ad 03 	sts	0x03AD, r24
     452:	90 93 ae 03 	sts	0x03AE, r25
     456:	a0 93 af 03 	sts	0x03AF, r26
     45a:	b0 93 b0 03 	sts	0x03B0, r27
     45e:	80 91 6d 03 	lds	r24, 0x036D
     462:	90 91 6e 03 	lds	r25, 0x036E
     466:	aa 27       	eor	r26, r26
     468:	97 fd       	sbrc	r25, 7
     46a:	a0 95       	com	r26
     46c:	ba 2f       	mov	r27, r26
     46e:	2f 81       	ldd	r18, Y+7	; 0x07
     470:	38 85       	ldd	r19, Y+8	; 0x08
     472:	49 85       	ldd	r20, Y+9	; 0x09
     474:	5a 85       	ldd	r21, Y+10	; 0x0a
     476:	82 0f       	add	r24, r18
     478:	93 1f       	adc	r25, r19
     47a:	a4 1f       	adc	r26, r20
     47c:	b5 1f       	adc	r27, r21
     47e:	80 93 b1 03 	sts	0x03B1, r24
     482:	90 93 b2 03 	sts	0x03B2, r25
     486:	a0 93 b3 03 	sts	0x03B3, r26
     48a:	b0 93 b4 03 	sts	0x03B4, r27
     48e:	80 91 6f 03 	lds	r24, 0x036F
     492:	90 91 70 03 	lds	r25, 0x0370
     496:	aa 27       	eor	r26, r26
     498:	97 fd       	sbrc	r25, 7
     49a:	a0 95       	com	r26
     49c:	ba 2f       	mov	r27, r26
     49e:	2b 85       	ldd	r18, Y+11	; 0x0b
     4a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     4a2:	4d 85       	ldd	r20, Y+13	; 0x0d
     4a4:	5e 85       	ldd	r21, Y+14	; 0x0e
     4a6:	82 0f       	add	r24, r18
     4a8:	93 1f       	adc	r25, r19
     4aa:	a4 1f       	adc	r26, r20
     4ac:	b5 1f       	adc	r27, r21
     4ae:	80 93 b5 03 	sts	0x03B5, r24
     4b2:	90 93 b6 03 	sts	0x03B6, r25
     4b6:	a0 93 b7 03 	sts	0x03B7, r26
     4ba:	b0 93 b8 03 	sts	0x03B8, r27
     4be:	80 91 71 03 	lds	r24, 0x0371
     4c2:	90 91 72 03 	lds	r25, 0x0372
     4c6:	aa 27       	eor	r26, r26
     4c8:	97 fd       	sbrc	r25, 7
     4ca:	a0 95       	com	r26
     4cc:	ba 2f       	mov	r27, r26
     4ce:	2f 85       	ldd	r18, Y+15	; 0x0f
     4d0:	38 89       	ldd	r19, Y+16	; 0x10
     4d2:	49 89       	ldd	r20, Y+17	; 0x11
     4d4:	5a 89       	ldd	r21, Y+18	; 0x12
     4d6:	82 0f       	add	r24, r18
     4d8:	93 1f       	adc	r25, r19
     4da:	a4 1f       	adc	r26, r20
     4dc:	b5 1f       	adc	r27, r21
     4de:	80 93 b9 03 	sts	0x03B9, r24
     4e2:	90 93 ba 03 	sts	0x03BA, r25
     4e6:	a0 93 bb 03 	sts	0x03BB, r26
     4ea:	b0 93 bc 03 	sts	0x03BC, r27
     4ee:	80 91 73 03 	lds	r24, 0x0373
     4f2:	90 91 74 03 	lds	r25, 0x0374
     4f6:	aa 27       	eor	r26, r26
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	a0 95       	com	r26
     4fc:	ba 2f       	mov	r27, r26
     4fe:	2b 89       	ldd	r18, Y+19	; 0x13
     500:	3c 89       	ldd	r19, Y+20	; 0x14
     502:	4d 89       	ldd	r20, Y+21	; 0x15
     504:	5e 89       	ldd	r21, Y+22	; 0x16
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	a4 1f       	adc	r26, r20
     50c:	b5 1f       	adc	r27, r21
     50e:	80 93 bd 03 	sts	0x03BD, r24
     512:	90 93 be 03 	sts	0x03BE, r25
     516:	a0 93 bf 03 	sts	0x03BF, r26
     51a:	b0 93 c0 03 	sts	0x03C0, r27
     51e:	80 91 75 03 	lds	r24, 0x0375
     522:	90 91 76 03 	lds	r25, 0x0376
     526:	aa 27       	eor	r26, r26
     528:	97 fd       	sbrc	r25, 7
     52a:	a0 95       	com	r26
     52c:	ba 2f       	mov	r27, r26
     52e:	2f 89       	ldd	r18, Y+23	; 0x17
     530:	38 8d       	ldd	r19, Y+24	; 0x18
     532:	49 8d       	ldd	r20, Y+25	; 0x19
     534:	5a 8d       	ldd	r21, Y+26	; 0x1a
     536:	82 0f       	add	r24, r18
     538:	93 1f       	adc	r25, r19
     53a:	a4 1f       	adc	r26, r20
     53c:	b5 1f       	adc	r27, r21
     53e:	80 93 c1 03 	sts	0x03C1, r24
     542:	90 93 c2 03 	sts	0x03C2, r25
     546:	a0 93 c3 03 	sts	0x03C3, r26
     54a:	b0 93 c4 03 	sts	0x03C4, r27
     54e:	80 91 77 03 	lds	r24, 0x0377
     552:	90 91 78 03 	lds	r25, 0x0378
     556:	aa 27       	eor	r26, r26
     558:	97 fd       	sbrc	r25, 7
     55a:	a0 95       	com	r26
     55c:	ba 2f       	mov	r27, r26
     55e:	2b 8d       	ldd	r18, Y+27	; 0x1b
     560:	3c 8d       	ldd	r19, Y+28	; 0x1c
     562:	4d 8d       	ldd	r20, Y+29	; 0x1d
     564:	5e 8d       	ldd	r21, Y+30	; 0x1e
     566:	82 0f       	add	r24, r18
     568:	93 1f       	adc	r25, r19
     56a:	a4 1f       	adc	r26, r20
     56c:	b5 1f       	adc	r27, r21
     56e:	80 93 c5 03 	sts	0x03C5, r24
     572:	90 93 c6 03 	sts	0x03C6, r25
     576:	a0 93 c7 03 	sts	0x03C7, r26
     57a:	b0 93 c8 03 	sts	0x03C8, r27
     57e:	80 91 79 03 	lds	r24, 0x0379
     582:	90 91 7a 03 	lds	r25, 0x037A
     586:	aa 27       	eor	r26, r26
     588:	97 fd       	sbrc	r25, 7
     58a:	a0 95       	com	r26
     58c:	ba 2f       	mov	r27, r26
     58e:	2f 8d       	ldd	r18, Y+31	; 0x1f
     590:	38 a1       	ldd	r19, Y+32	; 0x20
     592:	49 a1       	ldd	r20, Y+33	; 0x21
     594:	5a a1       	ldd	r21, Y+34	; 0x22
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	a4 1f       	adc	r26, r20
     59c:	b5 1f       	adc	r27, r21
     59e:	80 93 c9 03 	sts	0x03C9, r24
     5a2:	90 93 ca 03 	sts	0x03CA, r25
     5a6:	a0 93 cb 03 	sts	0x03CB, r26
     5aa:	b0 93 cc 03 	sts	0x03CC, r27
				}		

				accOffsetXSum += accX;
     5ae:	80 91 0a 04 	lds	r24, 0x040A
     5b2:	90 91 0b 04 	lds	r25, 0x040B
     5b6:	4b a1       	ldd	r20, Y+35	; 0x23
     5b8:	5c a1       	ldd	r21, Y+36	; 0x24
     5ba:	84 0f       	add	r24, r20
     5bc:	95 1f       	adc	r25, r21
     5be:	90 93 1f 04 	sts	0x041F, r25
     5c2:	80 93 1e 04 	sts	0x041E, r24
				accOffsetYSum += accY;
     5c6:	80 91 0c 04 	lds	r24, 0x040C
     5ca:	90 91 0d 04 	lds	r25, 0x040D
     5ce:	82 0d       	add	r24, r2
     5d0:	93 1d       	adc	r25, r3
     5d2:	90 93 21 04 	sts	0x0421, r25
     5d6:	80 93 20 04 	sts	0x0420, r24
				accOffsetZSum += accZ;
     5da:	80 91 0e 04 	lds	r24, 0x040E
     5de:	90 91 0f 04 	lds	r25, 0x040F
     5e2:	a9 81       	ldd	r26, Y+1	; 0x01
     5e4:	ba 81       	ldd	r27, Y+2	; 0x02
     5e6:	8a 0f       	add	r24, r26
     5e8:	9b 1f       	adc	r25, r27
     5ea:	90 93 23 04 	sts	0x0423, r25
     5ee:	80 93 22 04 	sts	0x0422, r24
				
				calibrationCycle++;
     5f2:	6f 5f       	subi	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	70 93 2b 04 	sts	0x042B, r23
     5fa:	60 93 2a 04 	sts	0x042A, r22
     5fe:	05 ce       	rjmp	.-1014   	; 0x20a <main+0x4c>
     600:	60 91 2a 04 	lds	r22, 0x042A
     604:	70 91 2b 04 	lds	r23, 0x042B
	
			}

			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {
     608:	60 31       	cpi	r22, 0x10	; 16
     60a:	71 05       	cpc	r23, r1
     60c:	09 f4       	brne	.+2      	; 0x610 <main+0x452>
     60e:	d4 c3       	rjmp	.+1960   	; 0xdb8 <main+0xbfa>
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
     610:	80 91 17 02 	lds	r24, 0x0217
     614:	88 23       	and	r24, r24
     616:	09 f0       	breq	.+2      	; 0x61a <main+0x45c>
     618:	9d c3       	rjmp	.+1850   	; 0xd54 <main+0xb96>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
     61a:	9e e4       	ldi	r25, 0x4E	; 78
     61c:	20 32       	cpi	r18, 0x20	; 32
     61e:	39 07       	cpc	r19, r25
     620:	20 f0       	brcs	.+8      	; 0x62a <main+0x46c>
			delayCounter = 0;
     622:	10 92 27 04 	sts	0x0427, r1
     626:	10 92 26 04 	sts	0x0426, r1
			usartTransmit(CHARGE_ON);								
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
     62a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <mirf_data_ready>
     62e:	88 23       	and	r24, r24
     630:	09 f0       	breq	.+2      	; 0x634 <main+0x476>
     632:	54 c2       	rjmp	.+1192   	; 0xadc <main+0x91e>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
     634:	80 91 28 04 	lds	r24, 0x0428
     638:	88 23       	and	r24, r24
     63a:	09 f0       	breq	.+2      	; 0x63e <main+0x480>
     63c:	37 c1       	rjmp	.+622    	; 0x8ac <main+0x6ee>

			// compute velocities even if they aren't used...
			if(compute_left_vel) {
     63e:	80 91 f6 03 	lds	r24, 0x03F6
     642:	88 23       	and	r24, r24
     644:	a1 f0       	breq	.+40     	; 0x66e <main+0x4b0>
				last_left_vel = left_vel_sum>>2;
     646:	80 91 d6 03 	lds	r24, 0x03D6
     64a:	90 91 d7 03 	lds	r25, 0x03D7
     64e:	96 95       	lsr	r25
     650:	87 95       	ror	r24
     652:	96 95       	lsr	r25
     654:	87 95       	ror	r24
     656:	90 93 db 03 	sts	0x03DB, r25
     65a:	80 93 da 03 	sts	0x03DA, r24
				left_vel_changed = 1;
     65e:	10 93 f8 03 	sts	0x03F8, r17
				compute_left_vel = 0;
     662:	10 92 f6 03 	sts	0x03F6, r1
				left_vel_sum = 0;
     666:	10 92 d7 03 	sts	0x03D7, r1
     66a:	10 92 d6 03 	sts	0x03D6, r1
			}

			if(compute_right_vel) {
     66e:	80 91 f7 03 	lds	r24, 0x03F7
     672:	88 23       	and	r24, r24
     674:	a1 f0       	breq	.+40     	; 0x69e <main+0x4e0>
				last_right_vel = right_vel_sum>>2;
     676:	80 91 d8 03 	lds	r24, 0x03D8
     67a:	90 91 d9 03 	lds	r25, 0x03D9
     67e:	96 95       	lsr	r25
     680:	87 95       	ror	r24
     682:	96 95       	lsr	r25
     684:	87 95       	ror	r24
     686:	90 93 dd 03 	sts	0x03DD, r25
     68a:	80 93 dc 03 	sts	0x03DC, r24
				right_vel_changed = 1;
     68e:	10 93 f9 03 	sts	0x03F9, r17
				compute_right_vel = 0;
     692:	10 92 f7 03 	sts	0x03F7, r1
				right_vel_sum = 0;
     696:	10 92 d9 03 	sts	0x03D9, r1
     69a:	10 92 d8 03 	sts	0x03D8, r1
			}

			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     69e:	80 91 e6 03 	lds	r24, 0x03E6
     6a2:	90 91 e7 03 	lds	r25, 0x03E7
     6a6:	90 93 fb 03 	sts	0x03FB, r25
     6aa:	80 93 fa 03 	sts	0x03FA, r24
			pwm_left_working = pwm_left_desired;
     6ae:	80 91 e8 03 	lds	r24, 0x03E8
     6b2:	90 91 e9 03 	lds	r25, 0x03E9
     6b6:	90 93 fd 03 	sts	0x03FD, r25
     6ba:	80 93 fc 03 	sts	0x03FC, r24
				
			if(obstacleAvoidanceEnabled) {
     6be:	80 91 2c 04 	lds	r24, 0x042C
     6c2:	88 23       	and	r24, r24
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <main+0x50a>
     6c6:	cc c4       	rjmp	.+2456   	; 0x1060 <main+0xea2>
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
				//PORTB |= (1 << 7);				
			}
				
			if(cliffAvoidanceEnabled) {
     6c8:	80 91 31 04 	lds	r24, 0x0431
     6cc:	88 23       	and	r24, r24
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <main+0x514>
     6d0:	c4 c4       	rjmp	.+2440   	; 0x105a <main+0xe9c>
		}
*/

		if(update_pwm) {

			update_pwm = 0;
     6d2:	10 92 fe 03 	sts	0x03FE, r1
			pwm_left = pwm_left_working;
     6d6:	80 91 fc 03 	lds	r24, 0x03FC
     6da:	90 91 fd 03 	lds	r25, 0x03FD
     6de:	90 93 e1 03 	sts	0x03E1, r25
     6e2:	80 93 e0 03 	sts	0x03E0, r24
			pwm_right = pwm_right_working;
     6e6:	80 91 fa 03 	lds	r24, 0x03FA
     6ea:	90 91 fb 03 	lds	r25, 0x03FB
     6ee:	90 93 df 03 	sts	0x03DF, r25
     6f2:	80 93 de 03 	sts	0x03DE, r24

			if(pwm_right >= 0) {
     6f6:	97 fd       	sbrc	r25, 7
     6f8:	be c4       	rjmp	.+2428   	; 0x1076 <main+0xeb8>
				OCR3A = (unsigned int)pwm_right;
     6fa:	90 93 99 00 	sts	0x0099, r25
     6fe:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (unsigned int)(-pwm_right);
			}
			if(pwm_left >= 0) {
     702:	80 91 e0 03 	lds	r24, 0x03E0
     706:	90 91 e1 03 	lds	r25, 0x03E1
     70a:	97 fd       	sbrc	r25, 7
     70c:	ac c4       	rjmp	.+2392   	; 0x1066 <main+0xea8>
				OCR4A = (unsigned int)pwm_left;
     70e:	90 93 a9 00 	sts	0x00A9, r25
     712:	80 93 a8 00 	sts	0x00A8, r24
     716:	79 cd       	rjmp	.-1294   	; 0x20a <main+0x4c>
		//PORTB |= (1 << 6);
		computeAngle();

		if(updateProx) {

			updateProx = 0;
     718:	10 92 9c 03 	sts	0x039C, r1
			if(startCalibration) {
     71c:	40 91 29 04 	lds	r20, 0x0429
     720:	44 23       	and	r20, r20
     722:	09 f4       	brne	.+2      	; 0x726 <main+0x568>
     724:	ce c0       	rjmp	.+412    	; 0x8c2 <main+0x704>

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
     726:	80 91 33 03 	lds	r24, 0x0333
     72a:	90 91 34 03 	lds	r25, 0x0334
     72e:	20 91 35 03 	lds	r18, 0x0335
     732:	30 91 36 03 	lds	r19, 0x0336
     736:	82 1b       	sub	r24, r18
     738:	93 0b       	sbc	r25, r19
     73a:	90 93 64 03 	sts	0x0364, r25
     73e:	80 93 63 03 	sts	0x0363, r24
				if(proximityResult[0] < 0) {
     742:	97 fd       	sbrc	r25, 7
     744:	81 c5       	rjmp	.+2818   	; 0x1248 <main+0x108a>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
     746:	80 91 37 03 	lds	r24, 0x0337
     74a:	90 91 38 03 	lds	r25, 0x0338
     74e:	20 91 39 03 	lds	r18, 0x0339
     752:	30 91 3a 03 	lds	r19, 0x033A
     756:	82 1b       	sub	r24, r18
     758:	93 0b       	sbc	r25, r19
     75a:	90 93 66 03 	sts	0x0366, r25
     75e:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[1] < 0) {
     762:	97 fd       	sbrc	r25, 7
     764:	5d c5       	rjmp	.+2746   	; 0x1220 <main+0x1062>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
     766:	80 91 3b 03 	lds	r24, 0x033B
     76a:	90 91 3c 03 	lds	r25, 0x033C
     76e:	20 91 3d 03 	lds	r18, 0x033D
     772:	30 91 3e 03 	lds	r19, 0x033E
     776:	82 1b       	sub	r24, r18
     778:	93 0b       	sbc	r25, r19
     77a:	90 93 68 03 	sts	0x0368, r25
     77e:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[2] < 0) {
     782:	97 fd       	sbrc	r25, 7
     784:	48 c5       	rjmp	.+2704   	; 0x1216 <main+0x1058>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
     786:	80 91 3f 03 	lds	r24, 0x033F
     78a:	90 91 40 03 	lds	r25, 0x0340
     78e:	20 91 41 03 	lds	r18, 0x0341
     792:	30 91 42 03 	lds	r19, 0x0342
     796:	82 1b       	sub	r24, r18
     798:	93 0b       	sbc	r25, r19
     79a:	90 93 6a 03 	sts	0x036A, r25
     79e:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[3] < 0) {
     7a2:	97 fd       	sbrc	r25, 7
     7a4:	a1 c5       	rjmp	.+2882   	; 0x12e8 <main+0x112a>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
     7a6:	80 91 43 03 	lds	r24, 0x0343
     7aa:	90 91 44 03 	lds	r25, 0x0344
     7ae:	20 91 45 03 	lds	r18, 0x0345
     7b2:	30 91 46 03 	lds	r19, 0x0346
     7b6:	82 1b       	sub	r24, r18
     7b8:	93 0b       	sbc	r25, r19
     7ba:	90 93 6c 03 	sts	0x036C, r25
     7be:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[4] < 0) {
     7c2:	97 fd       	sbrc	r25, 7
     7c4:	8c c5       	rjmp	.+2840   	; 0x12de <main+0x1120>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
     7c6:	80 91 47 03 	lds	r24, 0x0347
     7ca:	90 91 48 03 	lds	r25, 0x0348
     7ce:	20 91 49 03 	lds	r18, 0x0349
     7d2:	30 91 4a 03 	lds	r19, 0x034A
     7d6:	82 1b       	sub	r24, r18
     7d8:	93 0b       	sbc	r25, r19
     7da:	90 93 6e 03 	sts	0x036E, r25
     7de:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[5] < 0) {
     7e2:	97 fd       	sbrc	r25, 7
     7e4:	77 c5       	rjmp	.+2798   	; 0x12d4 <main+0x1116>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
     7e6:	80 91 4b 03 	lds	r24, 0x034B
     7ea:	90 91 4c 03 	lds	r25, 0x034C
     7ee:	20 91 4d 03 	lds	r18, 0x034D
     7f2:	30 91 4e 03 	lds	r19, 0x034E
     7f6:	82 1b       	sub	r24, r18
     7f8:	93 0b       	sbc	r25, r19
     7fa:	90 93 70 03 	sts	0x0370, r25
     7fe:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[6] < 0) {
     802:	97 fd       	sbrc	r25, 7
     804:	62 c5       	rjmp	.+2756   	; 0x12ca <main+0x110c>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
     806:	80 91 4f 03 	lds	r24, 0x034F
     80a:	90 91 50 03 	lds	r25, 0x0350
     80e:	20 91 51 03 	lds	r18, 0x0351
     812:	30 91 52 03 	lds	r19, 0x0352
     816:	82 1b       	sub	r24, r18
     818:	93 0b       	sbc	r25, r19
     81a:	90 93 72 03 	sts	0x0372, r25
     81e:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[7] < 0) {
     822:	97 fd       	sbrc	r25, 7
     824:	4d c5       	rjmp	.+2714   	; 0x12c0 <main+0x1102>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
     826:	80 91 53 03 	lds	r24, 0x0353
     82a:	90 91 54 03 	lds	r25, 0x0354
     82e:	20 91 55 03 	lds	r18, 0x0355
     832:	30 91 56 03 	lds	r19, 0x0356
     836:	82 1b       	sub	r24, r18
     838:	93 0b       	sbc	r25, r19
     83a:	90 93 74 03 	sts	0x0374, r25
     83e:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[8] < 0) {
     842:	97 fd       	sbrc	r25, 7
     844:	38 c5       	rjmp	.+2672   	; 0x12b6 <main+0x10f8>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
     846:	80 91 57 03 	lds	r24, 0x0357
     84a:	90 91 58 03 	lds	r25, 0x0358
     84e:	20 91 59 03 	lds	r18, 0x0359
     852:	30 91 5a 03 	lds	r19, 0x035A
     856:	82 1b       	sub	r24, r18
     858:	93 0b       	sbc	r25, r19
     85a:	90 93 76 03 	sts	0x0376, r25
     85e:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[9] < 0) {
     862:	97 fd       	sbrc	r25, 7
     864:	23 c5       	rjmp	.+2630   	; 0x12ac <main+0x10ee>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
     866:	80 91 5b 03 	lds	r24, 0x035B
     86a:	90 91 5c 03 	lds	r25, 0x035C
     86e:	20 91 5d 03 	lds	r18, 0x035D
     872:	30 91 5e 03 	lds	r19, 0x035E
     876:	82 1b       	sub	r24, r18
     878:	93 0b       	sbc	r25, r19
     87a:	90 93 78 03 	sts	0x0378, r25
     87e:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[10] < 0) {
     882:	97 fd       	sbrc	r25, 7
     884:	0e c5       	rjmp	.+2588   	; 0x12a2 <main+0x10e4>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
     886:	80 91 5f 03 	lds	r24, 0x035F
     88a:	90 91 60 03 	lds	r25, 0x0360
     88e:	20 91 61 03 	lds	r18, 0x0361
     892:	30 91 62 03 	lds	r19, 0x0362
     896:	82 1b       	sub	r24, r18
     898:	93 0b       	sbc	r25, r19
     89a:	90 93 7a 03 	sts	0x037A, r25
     89e:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[11] < 0) {
     8a2:	97 fd       	sbrc	r25, 7
     8a4:	16 c1       	rjmp	.+556    	; 0xad2 <main+0x914>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
     8a6:	10 93 cd 03 	sts	0x03CD, r17
     8aa:	c1 cc       	rjmp	.-1662   	; 0x22e <main+0x70>
				cliffAvoidance();
			}
			
			update_pwm = 1;

		} else if(currentSelector == 1) {
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <main+0x6f8>
		
		} else if(currentSelector == 2) {		// speed control
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <main+0x6f8>
     8b4:	40 c4       	rjmp	.+2176   	; 0x1136 <main+0xf78>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
     8b6:	80 91 fe 03 	lds	r24, 0x03FE
     8ba:	88 23       	and	r24, r24
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <main+0x702>
     8be:	a5 cc       	rjmp	.-1718   	; 0x20a <main+0x4c>
     8c0:	08 cf       	rjmp	.-496    	; 0x6d2 <main+0x514>
					proximityResult[11] = 0;
				}

			} else { 

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
     8c2:	80 91 33 03 	lds	r24, 0x0333
     8c6:	90 91 34 03 	lds	r25, 0x0334
     8ca:	20 91 35 03 	lds	r18, 0x0335
     8ce:	30 91 36 03 	lds	r19, 0x0336
     8d2:	82 1b       	sub	r24, r18
     8d4:	93 0b       	sbc	r25, r19
     8d6:	20 91 7b 03 	lds	r18, 0x037B
     8da:	30 91 7c 03 	lds	r19, 0x037C
     8de:	82 1b       	sub	r24, r18
     8e0:	93 0b       	sbc	r25, r19
     8e2:	90 93 64 03 	sts	0x0364, r25
     8e6:	80 93 63 03 	sts	0x0363, r24
				if(proximityResult[0] < 0) {
     8ea:	97 fd       	sbrc	r25, 7
     8ec:	a8 c4       	rjmp	.+2384   	; 0x123e <main+0x1080>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
     8ee:	80 91 37 03 	lds	r24, 0x0337
     8f2:	90 91 38 03 	lds	r25, 0x0338
     8f6:	20 91 39 03 	lds	r18, 0x0339
     8fa:	30 91 3a 03 	lds	r19, 0x033A
     8fe:	82 1b       	sub	r24, r18
     900:	93 0b       	sbc	r25, r19
     902:	20 91 7d 03 	lds	r18, 0x037D
     906:	30 91 7e 03 	lds	r19, 0x037E
     90a:	82 1b       	sub	r24, r18
     90c:	93 0b       	sbc	r25, r19
     90e:	90 93 66 03 	sts	0x0366, r25
     912:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[1] < 0) {
     916:	97 fd       	sbrc	r25, 7
     918:	8d c4       	rjmp	.+2330   	; 0x1234 <main+0x1076>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
     91a:	80 91 3b 03 	lds	r24, 0x033B
     91e:	90 91 3c 03 	lds	r25, 0x033C
     922:	20 91 3d 03 	lds	r18, 0x033D
     926:	30 91 3e 03 	lds	r19, 0x033E
     92a:	82 1b       	sub	r24, r18
     92c:	93 0b       	sbc	r25, r19
     92e:	20 91 7f 03 	lds	r18, 0x037F
     932:	30 91 80 03 	lds	r19, 0x0380
     936:	82 1b       	sub	r24, r18
     938:	93 0b       	sbc	r25, r19
     93a:	90 93 68 03 	sts	0x0368, r25
     93e:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[2] < 0) {
     942:	97 fd       	sbrc	r25, 7
     944:	72 c4       	rjmp	.+2276   	; 0x122a <main+0x106c>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
     946:	80 91 3f 03 	lds	r24, 0x033F
     94a:	90 91 40 03 	lds	r25, 0x0340
     94e:	20 91 41 03 	lds	r18, 0x0341
     952:	30 91 42 03 	lds	r19, 0x0342
     956:	82 1b       	sub	r24, r18
     958:	93 0b       	sbc	r25, r19
     95a:	20 91 81 03 	lds	r18, 0x0381
     95e:	30 91 82 03 	lds	r19, 0x0382
     962:	82 1b       	sub	r24, r18
     964:	93 0b       	sbc	r25, r19
     966:	90 93 6a 03 	sts	0x036A, r25
     96a:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[3] < 0) {
     96e:	97 fd       	sbrc	r25, 7
     970:	93 c4       	rjmp	.+2342   	; 0x1298 <main+0x10da>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
     972:	80 91 43 03 	lds	r24, 0x0343
     976:	90 91 44 03 	lds	r25, 0x0344
     97a:	20 91 45 03 	lds	r18, 0x0345
     97e:	30 91 46 03 	lds	r19, 0x0346
     982:	82 1b       	sub	r24, r18
     984:	93 0b       	sbc	r25, r19
     986:	20 91 83 03 	lds	r18, 0x0383
     98a:	30 91 84 03 	lds	r19, 0x0384
     98e:	82 1b       	sub	r24, r18
     990:	93 0b       	sbc	r25, r19
     992:	90 93 6c 03 	sts	0x036C, r25
     996:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[4] < 0) {
     99a:	97 fd       	sbrc	r25, 7
     99c:	78 c4       	rjmp	.+2288   	; 0x128e <main+0x10d0>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
     99e:	80 91 47 03 	lds	r24, 0x0347
     9a2:	90 91 48 03 	lds	r25, 0x0348
     9a6:	20 91 49 03 	lds	r18, 0x0349
     9aa:	30 91 4a 03 	lds	r19, 0x034A
     9ae:	82 1b       	sub	r24, r18
     9b0:	93 0b       	sbc	r25, r19
     9b2:	20 91 85 03 	lds	r18, 0x0385
     9b6:	30 91 86 03 	lds	r19, 0x0386
     9ba:	82 1b       	sub	r24, r18
     9bc:	93 0b       	sbc	r25, r19
     9be:	90 93 6e 03 	sts	0x036E, r25
     9c2:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[5] < 0) {
     9c6:	97 fd       	sbrc	r25, 7
     9c8:	5d c4       	rjmp	.+2234   	; 0x1284 <main+0x10c6>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
     9ca:	80 91 4b 03 	lds	r24, 0x034B
     9ce:	90 91 4c 03 	lds	r25, 0x034C
     9d2:	20 91 4d 03 	lds	r18, 0x034D
     9d6:	30 91 4e 03 	lds	r19, 0x034E
     9da:	82 1b       	sub	r24, r18
     9dc:	93 0b       	sbc	r25, r19
     9de:	20 91 87 03 	lds	r18, 0x0387
     9e2:	30 91 88 03 	lds	r19, 0x0388
     9e6:	82 1b       	sub	r24, r18
     9e8:	93 0b       	sbc	r25, r19
     9ea:	90 93 70 03 	sts	0x0370, r25
     9ee:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[6] < 0) {
     9f2:	97 fd       	sbrc	r25, 7
     9f4:	42 c4       	rjmp	.+2180   	; 0x127a <main+0x10bc>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
     9f6:	80 91 4f 03 	lds	r24, 0x034F
     9fa:	90 91 50 03 	lds	r25, 0x0350
     9fe:	20 91 51 03 	lds	r18, 0x0351
     a02:	30 91 52 03 	lds	r19, 0x0352
     a06:	82 1b       	sub	r24, r18
     a08:	93 0b       	sbc	r25, r19
     a0a:	20 91 89 03 	lds	r18, 0x0389
     a0e:	30 91 8a 03 	lds	r19, 0x038A
     a12:	82 1b       	sub	r24, r18
     a14:	93 0b       	sbc	r25, r19
     a16:	90 93 72 03 	sts	0x0372, r25
     a1a:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[7] < 0) {
     a1e:	97 fd       	sbrc	r25, 7
     a20:	27 c4       	rjmp	.+2126   	; 0x1270 <main+0x10b2>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
     a22:	80 91 53 03 	lds	r24, 0x0353
     a26:	90 91 54 03 	lds	r25, 0x0354
     a2a:	20 91 55 03 	lds	r18, 0x0355
     a2e:	30 91 56 03 	lds	r19, 0x0356
     a32:	82 1b       	sub	r24, r18
     a34:	93 0b       	sbc	r25, r19
     a36:	20 91 8b 03 	lds	r18, 0x038B
     a3a:	30 91 8c 03 	lds	r19, 0x038C
     a3e:	82 1b       	sub	r24, r18
     a40:	93 0b       	sbc	r25, r19
     a42:	90 93 74 03 	sts	0x0374, r25
     a46:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[8] < 0) {
     a4a:	97 fd       	sbrc	r25, 7
     a4c:	0c c4       	rjmp	.+2072   	; 0x1266 <main+0x10a8>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
     a4e:	80 91 57 03 	lds	r24, 0x0357
     a52:	90 91 58 03 	lds	r25, 0x0358
     a56:	20 91 59 03 	lds	r18, 0x0359
     a5a:	30 91 5a 03 	lds	r19, 0x035A
     a5e:	82 1b       	sub	r24, r18
     a60:	93 0b       	sbc	r25, r19
     a62:	20 91 8d 03 	lds	r18, 0x038D
     a66:	30 91 8e 03 	lds	r19, 0x038E
     a6a:	82 1b       	sub	r24, r18
     a6c:	93 0b       	sbc	r25, r19
     a6e:	90 93 76 03 	sts	0x0376, r25
     a72:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[9] < 0) {
     a76:	97 fd       	sbrc	r25, 7
     a78:	f1 c3       	rjmp	.+2018   	; 0x125c <main+0x109e>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
     a7a:	80 91 5b 03 	lds	r24, 0x035B
     a7e:	90 91 5c 03 	lds	r25, 0x035C
     a82:	20 91 5d 03 	lds	r18, 0x035D
     a86:	30 91 5e 03 	lds	r19, 0x035E
     a8a:	82 1b       	sub	r24, r18
     a8c:	93 0b       	sbc	r25, r19
     a8e:	20 91 8f 03 	lds	r18, 0x038F
     a92:	30 91 90 03 	lds	r19, 0x0390
     a96:	82 1b       	sub	r24, r18
     a98:	93 0b       	sbc	r25, r19
     a9a:	90 93 78 03 	sts	0x0378, r25
     a9e:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[10] < 0) {
     aa2:	97 fd       	sbrc	r25, 7
     aa4:	d6 c3       	rjmp	.+1964   	; 0x1252 <main+0x1094>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23] - proximityOffset[11];	// ambient - (ambient+reflected) - offset
     aa6:	80 91 5f 03 	lds	r24, 0x035F
     aaa:	90 91 60 03 	lds	r25, 0x0360
     aae:	20 91 61 03 	lds	r18, 0x0361
     ab2:	30 91 62 03 	lds	r19, 0x0362
     ab6:	82 1b       	sub	r24, r18
     ab8:	93 0b       	sbc	r25, r19
     aba:	20 91 91 03 	lds	r18, 0x0391
     abe:	30 91 92 03 	lds	r19, 0x0392
     ac2:	82 1b       	sub	r24, r18
     ac4:	93 0b       	sbc	r25, r19
     ac6:	90 93 7a 03 	sts	0x037A, r25
     aca:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[11] < 0) {
     ace:	97 ff       	sbrs	r25, 7
     ad0:	ea ce       	rjmp	.-556    	; 0x8a6 <main+0x6e8>
					proximityResult[11] = 0;
     ad2:	10 92 7a 03 	sts	0x037A, r1
     ad6:	10 92 79 03 	sts	0x0379, r1
     ada:	e5 ce       	rjmp	.-566    	; 0x8a6 <main+0x6e8>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	60 e7       	ldi	r22, 0x70	; 112
     ae0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <mirf_config_register>

			mirf_get_data(rfData);
     ae4:	82 e5       	ldi	r24, 0x52	; 82
     ae6:	94 e0       	ldi	r25, 0x04	; 4
     ae8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <mirf_get_data>
			flush_rx_fifo();
     aec:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <flush_rx_fifo>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     af0:	40 91 52 04 	lds	r20, 0x0452
     af4:	44 23       	and	r20, r20
     af6:	69 f4       	brne	.+26     	; 0xb12 <main+0x954>
     af8:	80 91 53 04 	lds	r24, 0x0453
     afc:	88 23       	and	r24, r24
     afe:	49 f4       	brne	.+18     	; 0xb12 <main+0x954>
     b00:	80 91 54 04 	lds	r24, 0x0454
     b04:	88 23       	and	r24, r24
     b06:	29 f4       	brne	.+10     	; 0xb12 <main+0x954>
     b08:	80 91 55 04 	lds	r24, 0x0455
     b0c:	88 30       	cpi	r24, 0x08	; 8
     b0e:	09 f4       	brne	.+2      	; 0xb12 <main+0x954>
     b10:	98 c6       	rjmp	.+3376   	; 0x1842 <main+0x1684>
     b12:	60 91 56 04 	lds	r22, 0x0456
     b16:	50 91 57 04 	lds	r21, 0x0457

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     b1a:	26 2f       	mov	r18, r22
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	2f 77       	andi	r18, 0x7F	; 127
     b20:	30 70       	andi	r19, 0x00	; 0
     b22:	30 93 02 04 	sts	0x0402, r19
     b26:	20 93 01 04 	sts	0x0401, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     b2a:	85 2f       	mov	r24, r21
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	8f 77       	andi	r24, 0x7F	; 127
     b30:	90 70       	andi	r25, 0x00	; 0
     b32:	90 93 00 04 	sts	0x0400, r25
     b36:	80 93 ff 03 	sts	0x03FF, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
     b3a:	67 fd       	sbrc	r22, 7
     b3c:	16 c4       	rjmp	.+2092   	; 0x136a <main+0x11ac>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	30 95       	com	r19
     b48:	21 95       	neg	r18
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	30 93 e7 03 	sts	0x03E7, r19
     b50:	20 93 e6 03 	sts	0x03E6, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
     b54:	57 fd       	sbrc	r21, 7
     b56:	00 c4       	rjmp	.+2048   	; 0x1358 <main+0x119a>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	90 95       	com	r25
     b62:	81 95       	neg	r24
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	90 93 e9 03 	sts	0x03E9, r25
     b6a:	80 93 e8 03 	sts	0x03E8, r24
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     b6e:	a2 e0       	ldi	r26, 0x02	; 2
     b70:	21 30       	cpi	r18, 0x01	; 1
     b72:	3a 07       	cpc	r19, r26
     b74:	44 f0       	brlt	.+16     	; 0xb86 <main+0x9c8>
     b76:	e0 e0       	ldi	r30, 0x00	; 0
     b78:	f2 e0       	ldi	r31, 0x02	; 2
     b7a:	f0 93 e7 03 	sts	0x03E7, r31
     b7e:	e0 93 e6 03 	sts	0x03E6, r30
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	32 e0       	ldi	r19, 0x02	; 2
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     b86:	f2 e0       	ldi	r31, 0x02	; 2
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	9f 07       	cpc	r25, r31
     b8c:	34 f0       	brlt	.+12     	; 0xb9a <main+0x9dc>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	90 93 e9 03 	sts	0x03E9, r25
     b96:	80 93 e8 03 	sts	0x03E8, r24
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     b9a:	ae ef       	ldi	r26, 0xFE	; 254
     b9c:	20 30       	cpi	r18, 0x00	; 0
     b9e:	3a 07       	cpc	r19, r26
     ba0:	34 f4       	brge	.+12     	; 0xbae <main+0x9f0>
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	fe ef       	ldi	r31, 0xFE	; 254
     ba6:	f0 93 e7 03 	sts	0x03E7, r31
     baa:	e0 93 e6 03 	sts	0x03E6, r30
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     bae:	fe ef       	ldi	r31, 0xFE	; 254
     bb0:	80 30       	cpi	r24, 0x00	; 0
     bb2:	9f 07       	cpc	r25, r31
     bb4:	34 f4       	brge	.+12     	; 0xbc2 <main+0xa04>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	3e ef       	ldi	r19, 0xFE	; 254
     bba:	30 93 e9 03 	sts	0x03E9, r19
     bbe:	20 93 e8 03 	sts	0x03E8, r18
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	50 93 4b 04 	sts	0x044B, r21
     bc8:	40 93 4a 04 	sts	0x044A, r20
     bcc:	20 91 53 04 	lds	r18, 0x0453
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	30 93 4d 04 	sts	0x044D, r19
     bd6:	20 93 4c 04 	sts	0x044C, r18
     bda:	e0 91 54 04 	lds	r30, 0x0454
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	f0 93 4f 04 	sts	0x044F, r31
     be4:	e0 93 4e 04 	sts	0x044E, r30
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     be8:	94 2f       	mov	r25, r20
     bea:	88 27       	eor	r24, r24
     bec:	84 1b       	sub	r24, r20
     bee:	95 0b       	sbc	r25, r21
     bf0:	64 e6       	ldi	r22, 0x64	; 100
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 82 22 	call	0x4504	; 0x4504 <__udivmodhi4>
     bf8:	c6 2e       	mov	r12, r22
     bfa:	c0 94       	com	r12
     bfc:	c0 92 12 02 	sts	0x0212, r12
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     c00:	52 2f       	mov	r21, r18
     c02:	44 27       	eor	r20, r20
     c04:	42 1b       	sub	r20, r18
     c06:	53 0b       	sbc	r21, r19
     c08:	ca 01       	movw	r24, r20
     c0a:	64 e6       	ldi	r22, 0x64	; 100
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 82 22 	call	0x4504	; 0x4504 <__udivmodhi4>
     c12:	60 95       	com	r22
     c14:	60 93 14 02 	sts	0x0214, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     c18:	3e 2f       	mov	r19, r30
     c1a:	22 27       	eor	r18, r18
     c1c:	2e 1b       	sub	r18, r30
     c1e:	3f 0b       	sbc	r19, r31
     c20:	c9 01       	movw	r24, r18
     c22:	64 e6       	ldi	r22, 0x64	; 100
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	0e 94 82 22 	call	0x4504	; 0x4504 <__udivmodhi4>
     c2a:	60 95       	com	r22
     c2c:	60 93 13 02 	sts	0x0213, r22
			updateRedLed(pwm_red);	
     c30:	8c 2d       	mov	r24, r12
     c32:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <updateRedLed>
			updateGreenLed(pwm_green);
     c36:	80 91 13 02 	lds	r24, 0x0213
     c3a:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <updateGreenLed>
			updateBlueLed(pwm_blue);
     c3e:	80 91 14 02 	lds	r24, 0x0214
     c42:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <updateBlueLed>
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     c46:	80 91 55 04 	lds	r24, 0x0455
     c4a:	80 ff       	sbrs	r24, 0
     c4c:	04 c2       	rjmp	.+1032   	; 0x1056 <main+0xe98>
				LED_IR1_LOW;
     c4e:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH; 
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     c50:	81 ff       	sbrs	r24, 1
     c52:	ff c1       	rjmp	.+1022   	; 0x1052 <main+0xe94>
				LED_IR2_LOW;
     c54:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     c56:	98 2f       	mov	r25, r24
     c58:	82 ff       	sbrs	r24, 2
     c5a:	dc c1       	rjmp	.+952    	; 0x1014 <main+0xe56>
				irEnabled = 1;
     c5c:	10 93 17 02 	sts	0x0217, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     c60:	94 fd       	sbrc	r25, 4
     c62:	dc c1       	rjmp	.+952    	; 0x101c <main+0xe5e>
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     c64:	96 ff       	sbrs	r25, 6
     c66:	d3 c1       	rjmp	.+934    	; 0x100e <main+0xe50>
				obstacleAvoidanceEnabled = 1;
     c68:	10 93 2c 04 	sts	0x042C, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     c6c:	88 0f       	add	r24, r24
     c6e:	88 0b       	sbc	r24, r24
     c70:	81 23       	and	r24, r17
     c72:	80 93 31 04 	sts	0x0431, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
     c76:	80 91 11 02 	lds	r24, 0x0211
     c7a:	80 93 3a 04 	sts	0x043A, r24

			switch(packetId) {
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	09 f4       	brne	.+2      	; 0xc84 <main+0xac6>
     c82:	78 c5       	rjmp	.+2800   	; 0x1774 <main+0x15b6>
     c84:	85 30       	cpi	r24, 0x05	; 5
     c86:	08 f0       	brcs	.+2      	; 0xc8a <main+0xacc>
     c88:	fe c1       	rjmp	.+1020   	; 0x1086 <main+0xec8>
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	09 f0       	breq	.+2      	; 0xc90 <main+0xad2>
     c8e:	5c c0       	rjmp	.+184    	; 0xd48 <main+0xb8a>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     c90:	90 91 63 03 	lds	r25, 0x0363
     c94:	80 91 64 03 	lds	r24, 0x0364
     c98:	90 93 3b 04 	sts	0x043B, r25
					ackPayload[2] = proximityResult[0]>>8;					
     c9c:	80 93 3c 04 	sts	0x043C, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     ca0:	90 91 65 03 	lds	r25, 0x0365
     ca4:	80 91 66 03 	lds	r24, 0x0366
     ca8:	90 93 3d 04 	sts	0x043D, r25
					ackPayload[4] = proximityResult[1]>>8;
     cac:	80 93 3e 04 	sts	0x043E, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     cb0:	90 91 67 03 	lds	r25, 0x0367
     cb4:	80 91 68 03 	lds	r24, 0x0368
     cb8:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[6] = proximityResult[2]>>8;
     cbc:	80 93 40 04 	sts	0x0440, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     cc0:	90 91 69 03 	lds	r25, 0x0369
     cc4:	80 91 6a 03 	lds	r24, 0x036A
     cc8:	90 93 41 04 	sts	0x0441, r25
					ackPayload[8] = proximityResult[3]>>8;
     ccc:	80 93 42 04 	sts	0x0442, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     cd0:	90 91 6d 03 	lds	r25, 0x036D
     cd4:	80 91 6e 03 	lds	r24, 0x036E
     cd8:	90 93 43 04 	sts	0x0443, r25
					ackPayload[10] = proximityResult[5]>>8;
     cdc:	80 93 44 04 	sts	0x0444, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     ce0:	90 91 6f 03 	lds	r25, 0x036F
     ce4:	80 91 70 03 	lds	r24, 0x0370
     ce8:	90 93 45 04 	sts	0x0445, r25
					ackPayload[12] = proximityResult[6]>>8;
     cec:	80 93 46 04 	sts	0x0446, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     cf0:	90 91 71 03 	lds	r25, 0x0371
     cf4:	80 91 72 03 	lds	r24, 0x0372
     cf8:	90 93 47 04 	sts	0x0447, r25
					ackPayload[14] = proximityResult[7]>>8;	
     cfc:	80 93 48 04 	sts	0x0448, r24
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
     d00:	20 91 03 01 	lds	r18, 0x0103
     d04:	80 91 03 01 	lds	r24, 0x0103
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	80 72       	andi	r24, 0x20	; 32
     d0c:	90 70       	andi	r25, 0x00	; 0
     d0e:	95 95       	asr	r25
     d10:	87 95       	ror	r24
     d12:	95 95       	asr	r25
     d14:	87 95       	ror	r24
     d16:	95 95       	asr	r25
     d18:	87 95       	ror	r24
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	95 95       	asr	r25
     d20:	87 95       	ror	r24
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	20 71       	andi	r18, 0x10	; 16
     d2a:	30 70       	andi	r19, 0x00	; 0
     d2c:	35 95       	asr	r19
     d2e:	27 95       	ror	r18
     d30:	35 95       	asr	r19
     d32:	27 95       	ror	r18
     d34:	35 95       	asr	r19
     d36:	27 95       	ror	r18
     d38:	35 95       	asr	r19
     d3a:	27 95       	ror	r18
     d3c:	82 2b       	or	r24, r18
     d3e:	80 93 49 04 	sts	0x0449, r24
					packetId = 4;
     d42:	34 e0       	ldi	r19, 0x04	; 4
     d44:	30 93 11 02 	sts	0x0211, r19
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
     d48:	8a e3       	ldi	r24, 0x3A	; 58
     d4a:	94 e0       	ldi	r25, 0x04	; 4
     d4c:	60 e1       	ldi	r22, 0x10	; 16
     d4e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <writeAckPayload>
     d52:	70 cc       	rjmp	.-1824   	; 0x634 <main+0x476>

		}

		if(irEnabled) {

			ir_move = e_get_data();
     d54:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <e_get_data>
     d58:	80 93 05 04 	sts	0x0405, r24

			if(command_received) {
     d5c:	90 91 06 04 	lds	r25, 0x0406
     d60:	99 23       	and	r25, r25
     d62:	09 f4       	brne	.+2      	; 0xd66 <main+0xba8>
     d64:	4f c1       	rjmp	.+670    	; 0x1004 <main+0xe46>

				command_received = 0;
     d66:	10 92 06 04 	sts	0x0406, r1

				switch(ir_move) {
     d6a:	e8 2f       	mov	r30, r24
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	e5 33       	cpi	r30, 0x35	; 53
     d70:	f1 05       	cpc	r31, r1
     d72:	08 f4       	brcc	.+2      	; 0xd76 <main+0xbb8>
     d74:	03 c3       	rjmp	.+1542   	; 0x137c <main+0x11be>
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
     d76:	20 91 e6 03 	lds	r18, 0x03E6
     d7a:	30 91 e7 03 	lds	r19, 0x03E7
     d7e:	80 91 e8 03 	lds	r24, 0x03E8
     d82:	90 91 e9 03 	lds	r25, 0x03E9
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
     d86:	37 fd       	sbrc	r19, 7
     d88:	14 c3       	rjmp	.+1576   	; 0x13b2 <main+0x11f4>
					speedr = pwm_right_desired >> 2;
     d8a:	35 95       	asr	r19
     d8c:	27 95       	ror	r18
     d8e:	35 95       	asr	r19
     d90:	27 95       	ror	r18
				} else {
					speedr = (-pwm_right_desired) >> 2;
     d92:	30 93 02 04 	sts	0x0402, r19
     d96:	20 93 01 04 	sts	0x0401, r18
				}
				if(pwm_left_desired >= 0) {
     d9a:	97 fd       	sbrc	r25, 7
     d9c:	28 c1       	rjmp	.+592    	; 0xfee <main+0xe30>
					speedl = pwm_left_desired >> 2;
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	90 93 00 04 	sts	0x0400, r25
     daa:	80 93 ff 03 	sts	0x03FF, r24
     dae:	20 91 26 04 	lds	r18, 0x0426
     db2:	30 91 27 04 	lds	r19, 0x0427
     db6:	31 cc       	rjmp	.-1950   	; 0x61a <main+0x45c>

		} else if(calibrationCycle == CALIBRATION_CYCLES) {

			for (i=0;i<12;i++) {
				//proximityOffset[i]=(unsigned int)((float)proximitySum[i]/(float)calibrationCycle);
				proximityOffset[i] = proximitySum[i]>>4;
     db8:	80 91 9d 03 	lds	r24, 0x039D
     dbc:	90 91 9e 03 	lds	r25, 0x039E
     dc0:	a0 91 9f 03 	lds	r26, 0x039F
     dc4:	b0 91 a0 03 	lds	r27, 0x03A0
     dc8:	64 e0       	ldi	r22, 0x04	; 4
     dca:	b6 95       	lsr	r27
     dcc:	a7 95       	ror	r26
     dce:	97 95       	ror	r25
     dd0:	87 95       	ror	r24
     dd2:	6a 95       	dec	r22
     dd4:	d1 f7       	brne	.-12     	; 0xdca <main+0xc0c>
     dd6:	90 93 7c 03 	sts	0x037C, r25
     dda:	80 93 7b 03 	sts	0x037B, r24
     dde:	80 91 a1 03 	lds	r24, 0x03A1
     de2:	90 91 a2 03 	lds	r25, 0x03A2
     de6:	a0 91 a3 03 	lds	r26, 0x03A3
     dea:	b0 91 a4 03 	lds	r27, 0x03A4
     dee:	54 e0       	ldi	r21, 0x04	; 4
     df0:	b6 95       	lsr	r27
     df2:	a7 95       	ror	r26
     df4:	97 95       	ror	r25
     df6:	87 95       	ror	r24
     df8:	5a 95       	dec	r21
     dfa:	d1 f7       	brne	.-12     	; 0xdf0 <main+0xc32>
     dfc:	90 93 7e 03 	sts	0x037E, r25
     e00:	80 93 7d 03 	sts	0x037D, r24
     e04:	80 91 a5 03 	lds	r24, 0x03A5
     e08:	90 91 a6 03 	lds	r25, 0x03A6
     e0c:	a0 91 a7 03 	lds	r26, 0x03A7
     e10:	b0 91 a8 03 	lds	r27, 0x03A8
     e14:	44 e0       	ldi	r20, 0x04	; 4
     e16:	b6 95       	lsr	r27
     e18:	a7 95       	ror	r26
     e1a:	97 95       	ror	r25
     e1c:	87 95       	ror	r24
     e1e:	4a 95       	dec	r20
     e20:	d1 f7       	brne	.-12     	; 0xe16 <main+0xc58>
     e22:	90 93 80 03 	sts	0x0380, r25
     e26:	80 93 7f 03 	sts	0x037F, r24
     e2a:	80 91 a9 03 	lds	r24, 0x03A9
     e2e:	90 91 aa 03 	lds	r25, 0x03AA
     e32:	a0 91 ab 03 	lds	r26, 0x03AB
     e36:	b0 91 ac 03 	lds	r27, 0x03AC
     e3a:	f4 e0       	ldi	r31, 0x04	; 4
     e3c:	b6 95       	lsr	r27
     e3e:	a7 95       	ror	r26
     e40:	97 95       	ror	r25
     e42:	87 95       	ror	r24
     e44:	fa 95       	dec	r31
     e46:	d1 f7       	brne	.-12     	; 0xe3c <main+0xc7e>
     e48:	90 93 82 03 	sts	0x0382, r25
     e4c:	80 93 81 03 	sts	0x0381, r24
     e50:	80 91 ad 03 	lds	r24, 0x03AD
     e54:	90 91 ae 03 	lds	r25, 0x03AE
     e58:	a0 91 af 03 	lds	r26, 0x03AF
     e5c:	b0 91 b0 03 	lds	r27, 0x03B0
     e60:	e4 e0       	ldi	r30, 0x04	; 4
     e62:	b6 95       	lsr	r27
     e64:	a7 95       	ror	r26
     e66:	97 95       	ror	r25
     e68:	87 95       	ror	r24
     e6a:	ea 95       	dec	r30
     e6c:	d1 f7       	brne	.-12     	; 0xe62 <main+0xca4>
     e6e:	90 93 84 03 	sts	0x0384, r25
     e72:	80 93 83 03 	sts	0x0383, r24
     e76:	80 91 b1 03 	lds	r24, 0x03B1
     e7a:	90 91 b2 03 	lds	r25, 0x03B2
     e7e:	a0 91 b3 03 	lds	r26, 0x03B3
     e82:	b0 91 b4 03 	lds	r27, 0x03B4
     e86:	74 e0       	ldi	r23, 0x04	; 4
     e88:	b6 95       	lsr	r27
     e8a:	a7 95       	ror	r26
     e8c:	97 95       	ror	r25
     e8e:	87 95       	ror	r24
     e90:	7a 95       	dec	r23
     e92:	d1 f7       	brne	.-12     	; 0xe88 <main+0xcca>
     e94:	90 93 86 03 	sts	0x0386, r25
     e98:	80 93 85 03 	sts	0x0385, r24
     e9c:	80 91 b5 03 	lds	r24, 0x03B5
     ea0:	90 91 b6 03 	lds	r25, 0x03B6
     ea4:	a0 91 b7 03 	lds	r26, 0x03B7
     ea8:	b0 91 b8 03 	lds	r27, 0x03B8
     eac:	64 e0       	ldi	r22, 0x04	; 4
     eae:	b6 95       	lsr	r27
     eb0:	a7 95       	ror	r26
     eb2:	97 95       	ror	r25
     eb4:	87 95       	ror	r24
     eb6:	6a 95       	dec	r22
     eb8:	d1 f7       	brne	.-12     	; 0xeae <main+0xcf0>
     eba:	90 93 88 03 	sts	0x0388, r25
     ebe:	80 93 87 03 	sts	0x0387, r24
     ec2:	80 91 b9 03 	lds	r24, 0x03B9
     ec6:	90 91 ba 03 	lds	r25, 0x03BA
     eca:	a0 91 bb 03 	lds	r26, 0x03BB
     ece:	b0 91 bc 03 	lds	r27, 0x03BC
     ed2:	54 e0       	ldi	r21, 0x04	; 4
     ed4:	b6 95       	lsr	r27
     ed6:	a7 95       	ror	r26
     ed8:	97 95       	ror	r25
     eda:	87 95       	ror	r24
     edc:	5a 95       	dec	r21
     ede:	d1 f7       	brne	.-12     	; 0xed4 <main+0xd16>
     ee0:	90 93 8a 03 	sts	0x038A, r25
     ee4:	80 93 89 03 	sts	0x0389, r24
     ee8:	80 91 bd 03 	lds	r24, 0x03BD
     eec:	90 91 be 03 	lds	r25, 0x03BE
     ef0:	a0 91 bf 03 	lds	r26, 0x03BF
     ef4:	b0 91 c0 03 	lds	r27, 0x03C0
     ef8:	44 e0       	ldi	r20, 0x04	; 4
     efa:	b6 95       	lsr	r27
     efc:	a7 95       	ror	r26
     efe:	97 95       	ror	r25
     f00:	87 95       	ror	r24
     f02:	4a 95       	dec	r20
     f04:	d1 f7       	brne	.-12     	; 0xefa <main+0xd3c>
     f06:	90 93 8c 03 	sts	0x038C, r25
     f0a:	80 93 8b 03 	sts	0x038B, r24
     f0e:	80 91 c1 03 	lds	r24, 0x03C1
     f12:	90 91 c2 03 	lds	r25, 0x03C2
     f16:	a0 91 c3 03 	lds	r26, 0x03C3
     f1a:	b0 91 c4 03 	lds	r27, 0x03C4
     f1e:	f4 e0       	ldi	r31, 0x04	; 4
     f20:	b6 95       	lsr	r27
     f22:	a7 95       	ror	r26
     f24:	97 95       	ror	r25
     f26:	87 95       	ror	r24
     f28:	fa 95       	dec	r31
     f2a:	d1 f7       	brne	.-12     	; 0xf20 <main+0xd62>
     f2c:	90 93 8e 03 	sts	0x038E, r25
     f30:	80 93 8d 03 	sts	0x038D, r24
     f34:	80 91 c5 03 	lds	r24, 0x03C5
     f38:	90 91 c6 03 	lds	r25, 0x03C6
     f3c:	a0 91 c7 03 	lds	r26, 0x03C7
     f40:	b0 91 c8 03 	lds	r27, 0x03C8
     f44:	e4 e0       	ldi	r30, 0x04	; 4
     f46:	b6 95       	lsr	r27
     f48:	a7 95       	ror	r26
     f4a:	97 95       	ror	r25
     f4c:	87 95       	ror	r24
     f4e:	ea 95       	dec	r30
     f50:	d1 f7       	brne	.-12     	; 0xf46 <main+0xd88>
     f52:	90 93 90 03 	sts	0x0390, r25
     f56:	80 93 8f 03 	sts	0x038F, r24
     f5a:	80 91 c9 03 	lds	r24, 0x03C9
     f5e:	90 91 ca 03 	lds	r25, 0x03CA
     f62:	a0 91 cb 03 	lds	r26, 0x03CB
     f66:	b0 91 cc 03 	lds	r27, 0x03CC
     f6a:	74 e0       	ldi	r23, 0x04	; 4
     f6c:	b6 95       	lsr	r27
     f6e:	a7 95       	ror	r26
     f70:	97 95       	ror	r25
     f72:	87 95       	ror	r24
     f74:	7a 95       	dec	r23
     f76:	d1 f7       	brne	.-12     	; 0xf6c <main+0xdae>
     f78:	90 93 92 03 	sts	0x0392, r25
     f7c:	80 93 91 03 	sts	0x0391, r24
			}

			accOffsetX = accOffsetXSum>>4;				
     f80:	80 91 1e 04 	lds	r24, 0x041E
     f84:	90 91 1f 04 	lds	r25, 0x041F
     f88:	95 95       	asr	r25
     f8a:	87 95       	ror	r24
     f8c:	95 95       	asr	r25
     f8e:	87 95       	ror	r24
     f90:	95 95       	asr	r25
     f92:	87 95       	ror	r24
     f94:	95 95       	asr	r25
     f96:	87 95       	ror	r24
     f98:	90 93 17 04 	sts	0x0417, r25
     f9c:	80 93 16 04 	sts	0x0416, r24
			accOffsetY = accOffsetYSum>>4;
     fa0:	80 91 20 04 	lds	r24, 0x0420
     fa4:	90 91 21 04 	lds	r25, 0x0421
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	95 95       	asr	r25
     fae:	87 95       	ror	r24
     fb0:	95 95       	asr	r25
     fb2:	87 95       	ror	r24
     fb4:	95 95       	asr	r25
     fb6:	87 95       	ror	r24
     fb8:	90 93 19 04 	sts	0x0419, r25
     fbc:	80 93 18 04 	sts	0x0418, r24
			accOffsetZ = accOffsetZSum>>4;
     fc0:	80 91 22 04 	lds	r24, 0x0422
     fc4:	90 91 23 04 	lds	r25, 0x0423
     fc8:	95 95       	asr	r25
     fca:	87 95       	ror	r24
     fcc:	95 95       	asr	r25
     fce:	87 95       	ror	r24
     fd0:	95 95       	asr	r25
     fd2:	87 95       	ror	r24
     fd4:	95 95       	asr	r25
     fd6:	87 95       	ror	r24
     fd8:	90 93 1b 04 	sts	0x041B, r25
     fdc:	80 93 1a 04 	sts	0x041A, r24

			startCalibration = 0;
     fe0:	10 92 29 04 	sts	0x0429, r1
			calibrationCycle = 0;
     fe4:	10 92 2b 04 	sts	0x042B, r1
     fe8:	10 92 2a 04 	sts	0x042A, r1
     fec:	11 cb       	rjmp	.-2526   	; 0x610 <main+0x452>
					speedr = (-pwm_right_desired) >> 2;
				}
				if(pwm_left_desired >= 0) {
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
     fee:	90 95       	com	r25
     ff0:	81 95       	neg	r24
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	95 95       	asr	r25
     ffa:	87 95       	ror	r24
     ffc:	90 93 00 04 	sts	0x0400, r25
    1000:	80 93 ff 03 	sts	0x03FF, r24
    1004:	20 91 26 04 	lds	r18, 0x0426
    1008:	30 91 27 04 	lds	r19, 0x0427
    100c:	06 cb       	rjmp	.-2548   	; 0x61a <main+0x45c>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    100e:	10 92 2c 04 	sts	0x042C, r1
    1012:	2c ce       	rjmp	.-936    	; 0xc6c <main+0xaae>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    1014:	10 92 17 02 	sts	0x0217, r1
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1018:	94 ff       	sbrs	r25, 4
    101a:	24 ce       	rjmp	.-952    	; 0xc64 <main+0xaa6>
				startCalibration = 1;
    101c:	10 93 29 04 	sts	0x0429, r17
				calibrationCycle = 0;
    1020:	10 92 2b 04 	sts	0x042B, r1
    1024:	10 92 2a 04 	sts	0x042A, r1
				pwm_red = 0;
    1028:	10 92 12 02 	sts	0x0212, r1
				pwm_green = 0;
    102c:	10 92 13 02 	sts	0x0213, r1
				pwm_blue = 0;
    1030:	10 92 14 02 	sts	0x0214, r1
				updateRedLed(pwm_red);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <updateRedLed>
				updateGreenLed(pwm_green);
    103a:	80 91 13 02 	lds	r24, 0x0213
    103e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <updateGreenLed>
				updateBlueLed(pwm_blue);
    1042:	80 91 14 02 	lds	r24, 0x0214
    1046:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <updateBlueLed>
    104a:	80 91 55 04 	lds	r24, 0x0455
    104e:	98 2f       	mov	r25, r24
    1050:	09 ce       	rjmp	.-1006   	; 0xc64 <main+0xaa6>
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    1052:	45 9a       	sbi	0x08, 5	; 8
    1054:	00 ce       	rjmp	.-1024   	; 0xc56 <main+0xa98>
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH; 
    1056:	44 9a       	sbi	0x08, 4	; 8
    1058:	fb cd       	rjmp	.-1034   	; 0xc50 <main+0xa92>
				obstacleAvoidance();
				//PORTB |= (1 << 7);				
			}
				
			if(cliffAvoidanceEnabled) {
				cliffAvoidance();
    105a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <cliffAvoidance>
    105e:	39 cb       	rjmp	.-2446   	; 0x6d2 <main+0x514>
			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
			pwm_left_working = pwm_left_desired;
				
			if(obstacleAvoidanceEnabled) {
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
    1060:	0e 94 57 1d 	call	0x3aae	; 0x3aae <obstacleAvoidance>
    1064:	31 cb       	rjmp	.-2462   	; 0x6c8 <main+0x50a>
				OCR3B = (unsigned int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = (unsigned int)pwm_left;
			} else {
				OCR4B =(unsigned int)( -pwm_left);
    1066:	90 95       	com	r25
    1068:	81 95       	neg	r24
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	90 93 ab 00 	sts	0x00AB, r25
    1070:	80 93 aa 00 	sts	0x00AA, r24
    1074:	ca c8       	rjmp	.-3692   	; 0x20a <main+0x4c>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (unsigned int)pwm_right;
			} else {
				OCR3B = (unsigned int)(-pwm_right);
    1076:	90 95       	com	r25
    1078:	81 95       	neg	r24
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	90 93 9b 00 	sts	0x009B, r25
    1080:	80 93 9a 00 	sts	0x009A, r24
    1084:	3e cb       	rjmp	.-2436   	; 0x702 <main+0x544>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    1086:	85 30       	cpi	r24, 0x05	; 5
    1088:	09 f4       	brne	.+2      	; 0x108c <main+0xece>
    108a:	18 c3       	rjmp	.+1584   	; 0x16bc <main+0x14fe>
    108c:	86 30       	cpi	r24, 0x06	; 6
    108e:	09 f0       	breq	.+2      	; 0x1092 <main+0xed4>
    1090:	5b ce       	rjmp	.-842    	; 0xd48 <main+0xb8a>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    1092:	80 91 43 03 	lds	r24, 0x0343
    1096:	90 91 44 03 	lds	r25, 0x0344
    109a:	80 93 3b 04 	sts	0x043B, r24
					ackPayload[2] = proximityValue[8]>>8;
    109e:	80 91 43 03 	lds	r24, 0x0343
    10a2:	90 91 44 03 	lds	r25, 0x0344
    10a6:	90 93 3c 04 	sts	0x043C, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    10aa:	80 91 53 03 	lds	r24, 0x0353
    10ae:	90 91 54 03 	lds	r25, 0x0354
    10b2:	80 93 3d 04 	sts	0x043D, r24
					ackPayload[4] = proximityValue[16]>>8;
    10b6:	80 91 53 03 	lds	r24, 0x0353
    10ba:	90 91 54 03 	lds	r25, 0x0354
    10be:	90 93 3e 04 	sts	0x043E, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    10c2:	80 91 57 03 	lds	r24, 0x0357
    10c6:	90 91 58 03 	lds	r25, 0x0358
    10ca:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[6] = proximityValue[18]>>8;
    10ce:	80 91 57 03 	lds	r24, 0x0357
    10d2:	90 91 58 03 	lds	r25, 0x0358
    10d6:	90 93 40 04 	sts	0x0440, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    10da:	80 91 5b 03 	lds	r24, 0x035B
    10de:	90 91 5c 03 	lds	r25, 0x035C
    10e2:	80 93 41 04 	sts	0x0441, r24
					ackPayload[8] = proximityValue[20]>>8;
    10e6:	80 91 5b 03 	lds	r24, 0x035B
    10ea:	90 91 5c 03 	lds	r25, 0x035C
    10ee:	90 93 42 04 	sts	0x0442, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    10f2:	80 91 5f 03 	lds	r24, 0x035F
    10f6:	90 91 60 03 	lds	r25, 0x0360
    10fa:	80 93 43 04 	sts	0x0443, r24
					ackPayload[10] = proximityValue[22]>>8;
    10fe:	80 91 5f 03 	lds	r24, 0x035F
    1102:	90 91 60 03 	lds	r25, 0x0360
    1106:	90 93 44 04 	sts	0x0444, r25
					ackPayload[11] = accZ&0xFF;
    110a:	90 91 0e 04 	lds	r25, 0x040E
    110e:	80 91 0f 04 	lds	r24, 0x040F
    1112:	90 93 45 04 	sts	0x0445, r25
					ackPayload[12] = accZ>>8;
    1116:	80 93 46 04 	sts	0x0446, r24
					ackPayload[13] = batteryLevel&0xFF;
    111a:	90 91 97 03 	lds	r25, 0x0397
    111e:	80 91 98 03 	lds	r24, 0x0398
    1122:	90 93 47 04 	sts	0x0447, r25
					ackPayload[14] = batteryLevel>>8;
    1126:	80 93 48 04 	sts	0x0448, r24
					ackPayload[15] = 0;				
    112a:	10 92 49 04 	sts	0x0449, r1
					packetId = 3;
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	80 93 11 02 	sts	0x0211, r24
					break;											
    1134:	09 ce       	rjmp	.-1006   	; 0xd48 <main+0xb8a>
					OCR3B = (unsigned int)(-pwm_right);
				}
			}
*/

			if(compute_left_vel) {
    1136:	80 91 f6 03 	lds	r24, 0x03F6
    113a:	88 23       	and	r24, r24
    113c:	99 f1       	breq	.+102    	; 0x11a4 <main+0xfe6>
				last_left_vel = left_vel_sum>>2;
    113e:	80 91 d6 03 	lds	r24, 0x03D6
    1142:	90 91 d7 03 	lds	r25, 0x03D7
    1146:	96 95       	lsr	r25
    1148:	87 95       	ror	r24
    114a:	96 95       	lsr	r25
    114c:	87 95       	ror	r24
    114e:	90 93 db 03 	sts	0x03DB, r25
    1152:	80 93 da 03 	sts	0x03DA, r24
				left_vel_changed = 1;
    1156:	10 93 f8 03 	sts	0x03F8, r17
				compute_left_vel = 0;
    115a:	10 92 f6 03 	sts	0x03F6, r1
				left_vel_sum = 0;
    115e:	10 92 d7 03 	sts	0x03D7, r1
    1162:	10 92 d6 03 	sts	0x03D6, r1
			
				pwm_left_working = pwm_left_desired;
    1166:	80 91 e8 03 	lds	r24, 0x03E8
    116a:	90 91 e9 03 	lds	r25, 0x03E9
    116e:	90 93 fd 03 	sts	0x03FD, r25
    1172:	80 93 fc 03 	sts	0x03FC, r24

				if(orizzontal_position == ORIZZONTAL_POS) {
    1176:	80 91 1c 02 	lds	r24, 0x021C
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	09 f4       	brne	.+2      	; 0x1180 <main+0xfc2>
    117e:	3a c3       	rjmp	.+1652   	; 0x17f4 <main+0x1636>
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
    1180:	8c ef       	ldi	r24, 0xFC	; 252
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
    1188:	80 91 fc 03 	lds	r24, 0x03FC
    118c:	90 91 fd 03 	lds	r25, 0x03FD
    1190:	90 93 e1 03 	sts	0x03E1, r25
    1194:	80 93 e0 03 	sts	0x03E0, r24

				if(pwm_left >= 0) {
    1198:	97 fd       	sbrc	r25, 7
    119a:	3e c3       	rjmp	.+1660   	; 0x1818 <main+0x165a>
					OCR4A = (unsigned int)pwm_left;
    119c:	90 93 a9 00 	sts	0x00A9, r25
    11a0:	80 93 a8 00 	sts	0x00A8, r24
				//}

				//update_pwm = 1;												
			}

			if(compute_right_vel) {
    11a4:	80 91 f7 03 	lds	r24, 0x03F7
    11a8:	88 23       	and	r24, r24
    11aa:	09 f4       	brne	.+2      	; 0x11ae <main+0xff0>
    11ac:	84 cb       	rjmp	.-2296   	; 0x8b6 <main+0x6f8>
				last_right_vel = right_vel_sum>>2;
    11ae:	80 91 d8 03 	lds	r24, 0x03D8
    11b2:	90 91 d9 03 	lds	r25, 0x03D9
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	96 95       	lsr	r25
    11bc:	87 95       	ror	r24
    11be:	90 93 dd 03 	sts	0x03DD, r25
    11c2:	80 93 dc 03 	sts	0x03DC, r24
				right_vel_changed = 1;
    11c6:	10 93 f9 03 	sts	0x03F9, r17
				compute_right_vel = 0;
    11ca:	10 92 f7 03 	sts	0x03F7, r1
				right_vel_sum = 0;
    11ce:	10 92 d9 03 	sts	0x03D9, r1
    11d2:	10 92 d8 03 	sts	0x03D8, r1
			
				pwm_right_working = pwm_right_desired;
    11d6:	80 91 e6 03 	lds	r24, 0x03E6
    11da:	90 91 e7 03 	lds	r25, 0x03E7
    11de:	90 93 fb 03 	sts	0x03FB, r25
    11e2:	80 93 fa 03 	sts	0x03FA, r24

				if(orizzontal_position == ORIZZONTAL_POS) {
    11e6:	80 91 1c 02 	lds	r24, 0x021C
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <main+0x1032>
    11ee:	07 c3       	rjmp	.+1550   	; 0x17fe <main+0x1640>
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
    11f0:	8a ef       	ldi	r24, 0xFA	; 250
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}
	
				pwm_right = pwm_right_working;
    11f8:	80 91 fa 03 	lds	r24, 0x03FA
    11fc:	90 91 fb 03 	lds	r25, 0x03FB
    1200:	90 93 df 03 	sts	0x03DF, r25
    1204:	80 93 de 03 	sts	0x03DE, r24
	
				if(pwm_right >= 0) {
    1208:	97 fd       	sbrc	r25, 7
    120a:	fe c2       	rjmp	.+1532   	; 0x1808 <main+0x164a>
					OCR3A = (unsigned int)pwm_right;
    120c:	90 93 99 00 	sts	0x0099, r25
    1210:	80 93 98 00 	sts	0x0098, r24
    1214:	50 cb       	rjmp	.-2400   	; 0x8b6 <main+0x6f8>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    1216:	10 92 68 03 	sts	0x0368, r1
    121a:	10 92 67 03 	sts	0x0367, r1
    121e:	b3 ca       	rjmp	.-2714   	; 0x786 <main+0x5c8>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    1220:	10 92 66 03 	sts	0x0366, r1
    1224:	10 92 65 03 	sts	0x0365, r1
    1228:	9e ca       	rjmp	.-2756   	; 0x766 <main+0x5a8>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    122a:	10 92 68 03 	sts	0x0368, r1
    122e:	10 92 67 03 	sts	0x0367, r1
    1232:	89 cb       	rjmp	.-2286   	; 0x946 <main+0x788>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    1234:	10 92 66 03 	sts	0x0366, r1
    1238:	10 92 65 03 	sts	0x0365, r1
    123c:	6e cb       	rjmp	.-2340   	; 0x91a <main+0x75c>

			} else { 

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    123e:	10 92 64 03 	sts	0x0364, r1
    1242:	10 92 63 03 	sts	0x0363, r1
    1246:	53 cb       	rjmp	.-2394   	; 0x8ee <main+0x730>
			updateProx = 0;
			if(startCalibration) {

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    1248:	10 92 64 03 	sts	0x0364, r1
    124c:	10 92 63 03 	sts	0x0363, r1
    1250:	7a ca       	rjmp	.-2828   	; 0x746 <main+0x588>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    1252:	10 92 78 03 	sts	0x0378, r1
    1256:	10 92 77 03 	sts	0x0377, r1
    125a:	25 cc       	rjmp	.-1974   	; 0xaa6 <main+0x8e8>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    125c:	10 92 76 03 	sts	0x0376, r1
    1260:	10 92 75 03 	sts	0x0375, r1
    1264:	0a cc       	rjmp	.-2028   	; 0xa7a <main+0x8bc>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    1266:	10 92 74 03 	sts	0x0374, r1
    126a:	10 92 73 03 	sts	0x0373, r1
    126e:	ef cb       	rjmp	.-2082   	; 0xa4e <main+0x890>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    1270:	10 92 72 03 	sts	0x0372, r1
    1274:	10 92 71 03 	sts	0x0371, r1
    1278:	d4 cb       	rjmp	.-2136   	; 0xa22 <main+0x864>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    127a:	10 92 70 03 	sts	0x0370, r1
    127e:	10 92 6f 03 	sts	0x036F, r1
    1282:	b9 cb       	rjmp	.-2190   	; 0x9f6 <main+0x838>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    1284:	10 92 6e 03 	sts	0x036E, r1
    1288:	10 92 6d 03 	sts	0x036D, r1
    128c:	9e cb       	rjmp	.-2244   	; 0x9ca <main+0x80c>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    128e:	10 92 6c 03 	sts	0x036C, r1
    1292:	10 92 6b 03 	sts	0x036B, r1
    1296:	83 cb       	rjmp	.-2298   	; 0x99e <main+0x7e0>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    1298:	10 92 6a 03 	sts	0x036A, r1
    129c:	10 92 69 03 	sts	0x0369, r1
    12a0:	68 cb       	rjmp	.-2352   	; 0x972 <main+0x7b4>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    12a2:	10 92 78 03 	sts	0x0378, r1
    12a6:	10 92 77 03 	sts	0x0377, r1
    12aa:	ed ca       	rjmp	.-2598   	; 0x886 <main+0x6c8>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    12ac:	10 92 76 03 	sts	0x0376, r1
    12b0:	10 92 75 03 	sts	0x0375, r1
    12b4:	d8 ca       	rjmp	.-2640   	; 0x866 <main+0x6a8>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    12b6:	10 92 74 03 	sts	0x0374, r1
    12ba:	10 92 73 03 	sts	0x0373, r1
    12be:	c3 ca       	rjmp	.-2682   	; 0x846 <main+0x688>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    12c0:	10 92 72 03 	sts	0x0372, r1
    12c4:	10 92 71 03 	sts	0x0371, r1
    12c8:	ae ca       	rjmp	.-2724   	; 0x826 <main+0x668>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    12ca:	10 92 70 03 	sts	0x0370, r1
    12ce:	10 92 6f 03 	sts	0x036F, r1
    12d2:	99 ca       	rjmp	.-2766   	; 0x806 <main+0x648>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    12d4:	10 92 6e 03 	sts	0x036E, r1
    12d8:	10 92 6d 03 	sts	0x036D, r1
    12dc:	84 ca       	rjmp	.-2808   	; 0x7e6 <main+0x628>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    12de:	10 92 6c 03 	sts	0x036C, r1
    12e2:	10 92 6b 03 	sts	0x036B, r1
    12e6:	6f ca       	rjmp	.-2850   	; 0x7c6 <main+0x608>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    12e8:	10 92 6a 03 	sts	0x036A, r1
    12ec:	10 92 69 03 	sts	0x0369, r1
    12f0:	5a ca       	rjmp	.-2892   	; 0x7a6 <main+0x5e8>

			if(proxUpdated) {

				proxUpdated = 0;
				
				if(calibrationCycle==0) {
    12f2:	1f 8e       	std	Y+31, r1	; 0x1f
    12f4:	18 a2       	std	Y+32, r1	; 0x20
    12f6:	19 a2       	std	Y+33, r1	; 0x21
    12f8:	1a a2       	std	Y+34, r1	; 0x22
    12fa:	1b 8e       	std	Y+27, r1	; 0x1b
    12fc:	1c 8e       	std	Y+28, r1	; 0x1c
    12fe:	1d 8e       	std	Y+29, r1	; 0x1d
    1300:	1e 8e       	std	Y+30, r1	; 0x1e
    1302:	1f 8a       	std	Y+23, r1	; 0x17
    1304:	18 8e       	std	Y+24, r1	; 0x18
    1306:	19 8e       	std	Y+25, r1	; 0x19
    1308:	1a 8e       	std	Y+26, r1	; 0x1a
    130a:	1b 8a       	std	Y+19, r1	; 0x13
    130c:	1c 8a       	std	Y+20, r1	; 0x14
    130e:	1d 8a       	std	Y+21, r1	; 0x15
    1310:	1e 8a       	std	Y+22, r1	; 0x16
    1312:	1f 86       	std	Y+15, r1	; 0x0f
    1314:	18 8a       	std	Y+16, r1	; 0x10
    1316:	19 8a       	std	Y+17, r1	; 0x11
    1318:	1a 8a       	std	Y+18, r1	; 0x12
    131a:	1b 86       	std	Y+11, r1	; 0x0b
    131c:	1c 86       	std	Y+12, r1	; 0x0c
    131e:	1d 86       	std	Y+13, r1	; 0x0d
    1320:	1e 86       	std	Y+14, r1	; 0x0e
    1322:	1f 82       	std	Y+7, r1	; 0x07
    1324:	18 86       	std	Y+8, r1	; 0x08
    1326:	19 86       	std	Y+9, r1	; 0x09
    1328:	1a 86       	std	Y+10, r1	; 0x0a
    132a:	1b 82       	std	Y+3, r1	; 0x03
    132c:	1c 82       	std	Y+4, r1	; 0x04
    132e:	1d 82       	std	Y+5, r1	; 0x05
    1330:	1e 82       	std	Y+6, r1	; 0x06
    1332:	44 24       	eor	r4, r4
    1334:	55 24       	eor	r5, r5
    1336:	32 01       	movw	r6, r4
    1338:	88 24       	eor	r8, r8
    133a:	99 24       	eor	r9, r9
    133c:	54 01       	movw	r10, r8
    133e:	cc 24       	eor	r12, r12
    1340:	dd 24       	eor	r13, r13
    1342:	76 01       	movw	r14, r12
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	a9 01       	movw	r20, r18
    134a:	1a 82       	std	Y+2, r1	; 0x02
    134c:	19 82       	std	Y+1, r1	; 0x01
    134e:	22 24       	eor	r2, r2
    1350:	33 24       	eor	r3, r3
    1352:	1c a2       	std	Y+36, r1	; 0x24
    1354:	1b a2       	std	Y+35, r1	; 0x23
    1356:	1b c8       	rjmp	.-4042   	; 0x38e <main+0x1d0>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	90 93 e9 03 	sts	0x03E9, r25
    1364:	80 93 e8 03 	sts	0x03E8, r24
    1368:	02 cc       	rjmp	.-2044   	; 0xb6e <main+0x9b0>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	22 0f       	add	r18, r18
    1370:	33 1f       	adc	r19, r19
    1372:	30 93 e7 03 	sts	0x03E7, r19
    1376:	20 93 e6 03 	sts	0x03E6, r18
    137a:	ec cb       	rjmp	.-2088   	; 0xb54 <main+0x996>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    137c:	ee 58       	subi	r30, 0x8E	; 142
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	05 90       	lpm	r0, Z+
    1386:	f4 91       	lpm	r31, Z+
    1388:	e0 2d       	mov	r30, r0
    138a:	19 94       	eijmp
							case 0: 
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    138c:	80 93 2c 04 	sts	0x042C, r24
								cliffAvoidanceEnabled = 0;
    1390:	10 92 31 04 	sts	0x0431, r1
    1394:	f0 cc       	rjmp	.-1568   	; 0xd76 <main+0xbb8>
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    1396:	10 92 2c 04 	sts	0x042C, r1
								cliffAvoidanceEnabled = 1;
    139a:	10 93 31 04 	sts	0x0431, r17
    139e:	20 91 e6 03 	lds	r18, 0x03E6
    13a2:	30 91 e7 03 	lds	r19, 0x03E7
    13a6:	80 91 e8 03 	lds	r24, 0x03E8
    13aa:	90 91 e9 03 	lds	r25, 0x03E9
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    13ae:	37 ff       	sbrs	r19, 7
    13b0:	ec cc       	rjmp	.-1576   	; 0xd8a <main+0xbcc>
					speedr = pwm_right_desired >> 2;
    13b2:	30 95       	com	r19
    13b4:	21 95       	neg	r18
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	e8 cc       	rjmp	.-1584   	; 0xd8a <main+0xbcc>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;
					
					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    13ba:	10 92 2c 04 	sts	0x042C, r1
    13be:	20 91 e6 03 	lds	r18, 0x03E6
    13c2:	30 91 e7 03 	lds	r19, 0x03E7
    13c6:	80 91 e8 03 	lds	r24, 0x03E8
    13ca:	90 91 e9 03 	lds	r25, 0x03E9
						break;
    13ce:	db cc       	rjmp	.-1610   	; 0xd86 <main+0xbc8>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    13d0:	10 93 2c 04 	sts	0x042C, r17
    13d4:	20 91 e6 03 	lds	r18, 0x03E6
    13d8:	30 91 e7 03 	lds	r19, 0x03E7
    13dc:	80 91 e8 03 	lds	r24, 0x03E8
    13e0:	90 91 e9 03 	lds	r25, 0x03E9
						break;
    13e4:	d0 cc       	rjmp	.-1632   	; 0xd86 <main+0xbc8>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    13e6:	80 91 e8 03 	lds	r24, 0x03E8
    13ea:	90 91 e9 03 	lds	r25, 0x03E9
    13ee:	4e 97       	sbiw	r24, 0x1e	; 30
    13f0:	90 93 e9 03 	sts	0x03E9, r25
    13f4:	80 93 e8 03 	sts	0x03E8, r24
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    13f8:	bc ef       	ldi	r27, 0xFC	; 252
    13fa:	80 30       	cpi	r24, 0x00	; 0
    13fc:	9b 07       	cpc	r25, r27
    13fe:	ac f5       	brge	.+106    	; 0x146a <main+0x12ac>
    1400:	e0 e0       	ldi	r30, 0x00	; 0
    1402:	fc ef       	ldi	r31, 0xFC	; 252
    1404:	f0 93 e9 03 	sts	0x03E9, r31
    1408:	e0 93 e8 03 	sts	0x03E8, r30
    140c:	20 91 e6 03 	lds	r18, 0x03E6
    1410:	30 91 e7 03 	lds	r19, 0x03E7
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	9c ef       	ldi	r25, 0xFC	; 252
    1418:	b6 cc       	rjmp	.-1684   	; 0xd86 <main+0xbc8>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    141a:	20 91 e6 03 	lds	r18, 0x03E6
    141e:	30 91 e7 03 	lds	r19, 0x03E7
    1422:	80 91 e0 03 	lds	r24, 0x03E0
    1426:	90 91 e1 03 	lds	r25, 0x03E1
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	24 f0       	brlt	.+8      	; 0x1438 <main+0x127a>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    1430:	20 91 e8 03 	lds	r18, 0x03E8
    1434:	30 91 e9 03 	lds	r19, 0x03E9
						}
						pwm_right_desired -= STEP_MOTORS;
    1438:	2e 51       	subi	r18, 0x1E	; 30
    143a:	30 40       	sbci	r19, 0x00	; 0
    143c:	30 93 e7 03 	sts	0x03E7, r19
    1440:	20 93 e6 03 	sts	0x03E6, r18
						pwm_left_desired -= STEP_MOTORS;
    1444:	c9 01       	movw	r24, r18
    1446:	30 93 e9 03 	sts	0x03E9, r19
    144a:	20 93 e8 03 	sts	0x03E8, r18
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    144e:	4c ef       	ldi	r20, 0xFC	; 252
    1450:	20 30       	cpi	r18, 0x00	; 0
    1452:	34 07       	cpc	r19, r20
    1454:	34 f4       	brge	.+12     	; 0x1462 <main+0x12a4>
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	bc ef       	ldi	r27, 0xFC	; 252
    145a:	b0 93 e7 03 	sts	0x03E7, r27
    145e:	a0 93 e6 03 	sts	0x03E6, r26
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    1462:	bc ef       	ldi	r27, 0xFC	; 252
    1464:	20 30       	cpi	r18, 0x00	; 0
    1466:	3b 07       	cpc	r19, r27
    1468:	5c f2       	brlt	.-106    	; 0x1400 <main+0x1242>
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    146a:	20 91 e6 03 	lds	r18, 0x03E6
    146e:	30 91 e7 03 	lds	r19, 0x03E7
    1472:	89 cc       	rjmp	.-1774   	; 0xd86 <main+0xbc8>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    1474:	20 91 e6 03 	lds	r18, 0x03E6
    1478:	30 91 e7 03 	lds	r19, 0x03E7
    147c:	2e 51       	subi	r18, 0x1E	; 30
    147e:	30 40       	sbci	r19, 0x00	; 0
    1480:	30 93 e7 03 	sts	0x03E7, r19
    1484:	20 93 e6 03 	sts	0x03E6, r18
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1488:	fc ef       	ldi	r31, 0xFC	; 252
    148a:	20 30       	cpi	r18, 0x00	; 0
    148c:	3f 07       	cpc	r19, r31
    148e:	0c f0       	brlt	.+2      	; 0x1492 <main+0x12d4>
    1490:	d3 c1       	rjmp	.+934    	; 0x1838 <main+0x167a>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3c ef       	ldi	r19, 0xFC	; 252
    1496:	30 93 e7 03 	sts	0x03E7, r19
    149a:	20 93 e6 03 	sts	0x03E6, r18
    149e:	80 91 e8 03 	lds	r24, 0x03E8
    14a2:	90 91 e9 03 	lds	r25, 0x03E9
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	31 e0       	ldi	r19, 0x01	; 1
    14aa:	73 cc       	rjmp	.-1818   	; 0xd92 <main+0xbd4>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    14ac:	20 91 e6 03 	lds	r18, 0x03E6
    14b0:	30 91 e7 03 	lds	r19, 0x03E7
    14b4:	2e 51       	subi	r18, 0x1E	; 30
    14b6:	30 40       	sbci	r19, 0x00	; 0
    14b8:	30 93 e7 03 	sts	0x03E7, r19
    14bc:	20 93 e6 03 	sts	0x03E6, r18
						pwm_left_desired += STEP_MOTORS;
    14c0:	80 91 e8 03 	lds	r24, 0x03E8
    14c4:	90 91 e9 03 	lds	r25, 0x03E9
    14c8:	4e 96       	adiw	r24, 0x1e	; 30
    14ca:	90 93 e9 03 	sts	0x03E9, r25
    14ce:	80 93 e8 03 	sts	0x03E8, r24
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    14d2:	fc ef       	ldi	r31, 0xFC	; 252
    14d4:	20 30       	cpi	r18, 0x00	; 0
    14d6:	3f 07       	cpc	r19, r31
    14d8:	34 f4       	brge	.+12     	; 0x14e6 <main+0x1328>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3c ef       	ldi	r19, 0xFC	; 252
    14de:	30 93 e7 03 	sts	0x03E7, r19
    14e2:	20 93 e6 03 	sts	0x03E6, r18
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    14e6:	44 e0       	ldi	r20, 0x04	; 4
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	94 07       	cpc	r25, r20
    14ec:	0c f4       	brge	.+2      	; 0x14f0 <main+0x1332>
    14ee:	4b cc       	rjmp	.-1898   	; 0xd86 <main+0xbc8>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	94 e0       	ldi	r25, 0x04	; 4
    14f4:	90 93 e9 03 	sts	0x03E9, r25
    14f8:	80 93 e8 03 	sts	0x03E8, r24
    14fc:	44 cc       	rjmp	.-1912   	; 0xd86 <main+0xbc8>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    14fe:	10 92 e7 03 	sts	0x03E7, r1
    1502:	10 92 e6 03 	sts	0x03E6, r1
						pwm_left_desired = 0;
    1506:	10 92 e9 03 	sts	0x03E9, r1
    150a:	10 92 e8 03 	sts	0x03E8, r1
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	39 cc       	rjmp	.-1934   	; 0xd8a <main+0xbcc>
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    1518:	20 91 e6 03 	lds	r18, 0x03E6
    151c:	30 91 e7 03 	lds	r19, 0x03E7
    1520:	22 5e       	subi	r18, 0xE2	; 226
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	30 93 e7 03 	sts	0x03E7, r19
    1528:	20 93 e6 03 	sts	0x03E6, r18
						pwm_left_desired -= STEP_MOTORS;
    152c:	80 91 e8 03 	lds	r24, 0x03E8
    1530:	90 91 e9 03 	lds	r25, 0x03E9
    1534:	4e 97       	sbiw	r24, 0x1e	; 30
    1536:	90 93 e9 03 	sts	0x03E9, r25
    153a:	80 93 e8 03 	sts	0x03E8, r24
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    153e:	a4 e0       	ldi	r26, 0x04	; 4
    1540:	21 30       	cpi	r18, 0x01	; 1
    1542:	3a 07       	cpc	r19, r26
    1544:	44 f0       	brlt	.+16     	; 0x1556 <main+0x1398>
    1546:	e0 e0       	ldi	r30, 0x00	; 0
    1548:	f4 e0       	ldi	r31, 0x04	; 4
    154a:	f0 93 e7 03 	sts	0x03E7, r31
    154e:	e0 93 e6 03 	sts	0x03E6, r30
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	34 e0       	ldi	r19, 0x04	; 4
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1556:	fc ef       	ldi	r31, 0xFC	; 252
    1558:	80 30       	cpi	r24, 0x00	; 0
    155a:	9f 07       	cpc	r25, r31
    155c:	0c f0       	brlt	.+2      	; 0x1560 <main+0x13a2>
    155e:	13 cc       	rjmp	.-2010   	; 0xd86 <main+0xbc8>
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	5c ef       	ldi	r21, 0xFC	; 252
    1564:	50 93 e9 03 	sts	0x03E9, r21
    1568:	40 93 e8 03 	sts	0x03E8, r20
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	9c ef       	ldi	r25, 0xFC	; 252
    1570:	0a cc       	rjmp	.-2028   	; 0xd86 <main+0xbc8>
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    1572:	80 91 e8 03 	lds	r24, 0x03E8
    1576:	90 91 e9 03 	lds	r25, 0x03E9
    157a:	4e 96       	adiw	r24, 0x1e	; 30
    157c:	90 93 e9 03 	sts	0x03E9, r25
    1580:	80 93 e8 03 	sts	0x03E8, r24
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1584:	54 e0       	ldi	r21, 0x04	; 4
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	95 07       	cpc	r25, r21
    158a:	0c f4       	brge	.+2      	; 0x158e <main+0x13d0>
    158c:	6e cf       	rjmp	.-292    	; 0x146a <main+0x12ac>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	94 e0       	ldi	r25, 0x04	; 4
    1592:	90 93 e9 03 	sts	0x03E9, r25
    1596:	80 93 e8 03 	sts	0x03E8, r24
    159a:	67 cf       	rjmp	.-306    	; 0x146a <main+0x12ac>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    159c:	20 91 e6 03 	lds	r18, 0x03E6
    15a0:	30 91 e7 03 	lds	r19, 0x03E7
    15a4:	80 91 e8 03 	lds	r24, 0x03E8
    15a8:	90 91 e9 03 	lds	r25, 0x03E9
    15ac:	82 17       	cp	r24, r18
    15ae:	93 07       	cpc	r25, r19
    15b0:	0c f4       	brge	.+2      	; 0x15b4 <main+0x13f6>
    15b2:	61 c1       	rjmp	.+706    	; 0x1876 <main+0x16b8>
    15b4:	9c 01       	movw	r18, r24
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    15b6:	22 5e       	subi	r18, 0xE2	; 226
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	30 93 e7 03 	sts	0x03E7, r19
    15be:	20 93 e6 03 	sts	0x03E6, r18
						pwm_left_desired += STEP_MOTORS;
    15c2:	4e 96       	adiw	r24, 0x1e	; 30
    15c4:	90 93 e9 03 	sts	0x03E9, r25
    15c8:	80 93 e8 03 	sts	0x03E8, r24
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	21 30       	cpi	r18, 0x01	; 1
    15d0:	3b 07       	cpc	r19, r27
    15d2:	34 f0       	brlt	.+12     	; 0x15e0 <main+0x1422>
    15d4:	e0 e0       	ldi	r30, 0x00	; 0
    15d6:	f4 e0       	ldi	r31, 0x04	; 4
    15d8:	f0 93 e7 03 	sts	0x03E7, r31
    15dc:	e0 93 e6 03 	sts	0x03E6, r30
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    15e0:	f4 e0       	ldi	r31, 0x04	; 4
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	9f 07       	cpc	r25, r31
    15e6:	0c f4       	brge	.+2      	; 0x15ea <main+0x142c>
    15e8:	40 cf       	rjmp	.-384    	; 0x146a <main+0x12ac>
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	34 e0       	ldi	r19, 0x04	; 4
    15ee:	30 93 e9 03 	sts	0x03E9, r19
    15f2:	20 93 e8 03 	sts	0x03E8, r18
    15f6:	20 91 e6 03 	lds	r18, 0x03E6
    15fa:	30 91 e7 03 	lds	r19, 0x03E7
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	94 e0       	ldi	r25, 0x04	; 4
    1602:	c1 cb       	rjmp	.-2174   	; 0xd86 <main+0xbc8>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1604:	20 91 e6 03 	lds	r18, 0x03E6
    1608:	30 91 e7 03 	lds	r19, 0x03E7
    160c:	22 5e       	subi	r18, 0xE2	; 226
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	30 93 e7 03 	sts	0x03E7, r19
    1614:	20 93 e6 03 	sts	0x03E6, r18
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	21 30       	cpi	r18, 0x01	; 1
    161c:	39 07       	cpc	r19, r25
    161e:	0c f4       	brge	.+2      	; 0x1622 <main+0x1464>
    1620:	0b c1       	rjmp	.+534    	; 0x1838 <main+0x167a>
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	b4 e0       	ldi	r27, 0x04	; 4
    1626:	b0 93 e7 03 	sts	0x03E7, r27
    162a:	a0 93 e6 03 	sts	0x03E6, r26
    162e:	80 91 e8 03 	lds	r24, 0x03E8
    1632:	90 91 e9 03 	lds	r25, 0x03E9
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	31 e0       	ldi	r19, 0x01	; 1
    163a:	ab cb       	rjmp	.-2218   	; 0xd92 <main+0xbd4>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    163c:	80 91 07 04 	lds	r24, 0x0407
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	65 e0       	ldi	r22, 0x05	; 5
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	0e 94 96 22 	call	0x452c	; 0x452c <__divmodhi4>
    164c:	80 93 07 04 	sts	0x0407, r24

						if(colorState==0) {		// turn on blue
    1650:	88 23       	and	r24, r24
    1652:	09 f0       	breq	.+2      	; 0x1656 <main+0x1498>
    1654:	12 c1       	rjmp	.+548    	; 0x187a <main+0x16bc>
							LED_IR1_HIGH;
    1656:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    1658:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    165a:	10 92 14 02 	sts	0x0214, r1
							pwm_green = MAX_LEDS_PWM;
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	30 93 13 02 	sts	0x0213, r19
							pwm_red = MAX_LEDS_PWM;					
    1664:	30 93 12 02 	sts	0x0212, r19
    1668:	8f ef       	ldi	r24, 0xFF	; 255
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
    166a:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <updateRedLed>
						updateGreenLed(pwm_green);
    166e:	80 91 13 02 	lds	r24, 0x0213
    1672:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <updateGreenLed>
						updateBlueLed(pwm_blue);
    1676:	80 91 14 02 	lds	r24, 0x0214
    167a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <updateBlueLed>
    167e:	20 91 e6 03 	lds	r18, 0x03E6
    1682:	30 91 e7 03 	lds	r19, 0x03E7
    1686:	80 91 e8 03 	lds	r24, 0x03E8
    168a:	90 91 e9 03 	lds	r25, 0x03E9

	                  	break;
    168e:	7b cb       	rjmp	.-2314   	; 0xd86 <main+0xbc8>
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;
					
					case 52:
						behaviorState = (behaviorState+1)%4;
    1690:	80 91 08 04 	lds	r24, 0x0408
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	83 70       	andi	r24, 0x03	; 3
    169a:	90 70       	andi	r25, 0x00	; 0
    169c:	80 93 08 04 	sts	0x0408, r24
						switch(behaviorState) {
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <main+0x14e8>
    16a4:	78 ce       	rjmp	.-784    	; 0x1396 <main+0x11d8>
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	09 f4       	brne	.+2      	; 0x16ac <main+0x14ee>
    16aa:	be c0       	rjmp	.+380    	; 0x1828 <main+0x166a>
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <main+0x14f4>
    16b0:	6d ce       	rjmp	.-806    	; 0x138c <main+0x11ce>
							case 0: 
								obstacleAvoidanceEnabled = 0;
    16b2:	10 92 2c 04 	sts	0x042C, r1
								cliffAvoidanceEnabled = 0;
    16b6:	10 92 31 04 	sts	0x0431, r1
    16ba:	5d cb       	rjmp	.-2374   	; 0xd76 <main+0xbb8>
					ackPayload[15] = ir_move;			
					packetId = 5;
					break;
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    16bc:	80 91 33 03 	lds	r24, 0x0333
    16c0:	90 91 34 03 	lds	r25, 0x0334
    16c4:	80 93 3b 04 	sts	0x043B, r24
					ackPayload[2] = proximityValue[0]>>8;
    16c8:	80 91 33 03 	lds	r24, 0x0333
    16cc:	90 91 34 03 	lds	r25, 0x0334
    16d0:	90 93 3c 04 	sts	0x043C, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    16d4:	80 91 37 03 	lds	r24, 0x0337
    16d8:	90 91 38 03 	lds	r25, 0x0338
    16dc:	80 93 3d 04 	sts	0x043D, r24
					ackPayload[4] = proximityValue[2]>>8;
    16e0:	80 91 37 03 	lds	r24, 0x0337
    16e4:	90 91 38 03 	lds	r25, 0x0338
    16e8:	90 93 3e 04 	sts	0x043E, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    16ec:	80 91 3b 03 	lds	r24, 0x033B
    16f0:	90 91 3c 03 	lds	r25, 0x033C
    16f4:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[6] = proximityValue[4]>>8;
    16f8:	80 91 3b 03 	lds	r24, 0x033B
    16fc:	90 91 3c 03 	lds	r25, 0x033C
    1700:	90 93 40 04 	sts	0x0440, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    1704:	80 91 3f 03 	lds	r24, 0x033F
    1708:	90 91 40 03 	lds	r25, 0x0340
    170c:	80 93 41 04 	sts	0x0441, r24
					ackPayload[8] = proximityValue[6]>>8;
    1710:	80 91 3f 03 	lds	r24, 0x033F
    1714:	90 91 40 03 	lds	r25, 0x0340
    1718:	90 93 42 04 	sts	0x0442, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    171c:	80 91 47 03 	lds	r24, 0x0347
    1720:	90 91 48 03 	lds	r25, 0x0348
    1724:	80 93 43 04 	sts	0x0443, r24
					ackPayload[10] = proximityValue[10]>>8;
    1728:	80 91 47 03 	lds	r24, 0x0347
    172c:	90 91 48 03 	lds	r25, 0x0348
    1730:	90 93 44 04 	sts	0x0444, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    1734:	80 91 4b 03 	lds	r24, 0x034B
    1738:	90 91 4c 03 	lds	r25, 0x034C
    173c:	80 93 45 04 	sts	0x0445, r24
					ackPayload[12] = proximityValue[12]>>8;
    1740:	80 91 4b 03 	lds	r24, 0x034B
    1744:	90 91 4c 03 	lds	r25, 0x034C
    1748:	90 93 46 04 	sts	0x0446, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    174c:	80 91 4f 03 	lds	r24, 0x034F
    1750:	90 91 50 03 	lds	r25, 0x0350
    1754:	80 93 47 04 	sts	0x0447, r24
					ackPayload[14] = proximityValue[14]>>8;
    1758:	80 91 4f 03 	lds	r24, 0x034F
    175c:	90 91 50 03 	lds	r25, 0x0350
    1760:	90 93 48 04 	sts	0x0448, r25
					ackPayload[15] = currentSelector;
    1764:	80 91 28 04 	lds	r24, 0x0428
    1768:	80 93 49 04 	sts	0x0449, r24
					packetId = 6;
    176c:	56 e0       	ldi	r21, 0x06	; 6
    176e:	50 93 11 02 	sts	0x0211, r21
					break;	
    1772:	ea ca       	rjmp	.-2604   	; 0xd48 <main+0xb8a>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    1774:	90 91 6b 03 	lds	r25, 0x036B
    1778:	80 91 6c 03 	lds	r24, 0x036C
    177c:	90 93 3b 04 	sts	0x043B, r25
					ackPayload[2] = proximityResult[4]>>8;
    1780:	80 93 3c 04 	sts	0x043C, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    1784:	90 91 73 03 	lds	r25, 0x0373
    1788:	80 91 74 03 	lds	r24, 0x0374
    178c:	90 93 3d 04 	sts	0x043D, r25
					ackPayload[4] = proximityResult[8]>>8;
    1790:	80 93 3e 04 	sts	0x043E, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    1794:	90 91 75 03 	lds	r25, 0x0375
    1798:	80 91 76 03 	lds	r24, 0x0376
    179c:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[6] = proximityResult[9]>>8;
    17a0:	80 93 40 04 	sts	0x0440, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    17a4:	90 91 77 03 	lds	r25, 0x0377
    17a8:	80 91 78 03 	lds	r24, 0x0378
    17ac:	90 93 41 04 	sts	0x0441, r25
					ackPayload[8] = proximityResult[10]>>8;
    17b0:	80 93 42 04 	sts	0x0442, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    17b4:	90 91 79 03 	lds	r25, 0x0379
    17b8:	80 91 7a 03 	lds	r24, 0x037A
    17bc:	90 93 43 04 	sts	0x0443, r25
					ackPayload[10] = proximityResult[11]>>8;
    17c0:	80 93 44 04 	sts	0x0444, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    17c4:	90 91 0a 04 	lds	r25, 0x040A
    17c8:	80 91 0b 04 	lds	r24, 0x040B
    17cc:	90 93 45 04 	sts	0x0445, r25
					ackPayload[12] = accX>>8;
    17d0:	80 93 46 04 	sts	0x0446, r24
					ackPayload[13] = accY&0xFF;
    17d4:	90 91 0c 04 	lds	r25, 0x040C
    17d8:	80 91 0d 04 	lds	r24, 0x040D
    17dc:	90 93 47 04 	sts	0x0447, r25
					ackPayload[14] = accY>>8;
    17e0:	80 93 48 04 	sts	0x0448, r24
					ackPayload[15] = ir_move;			
    17e4:	80 91 05 04 	lds	r24, 0x0405
    17e8:	80 93 49 04 	sts	0x0449, r24
					packetId = 5;
    17ec:	45 e0       	ldi	r20, 0x05	; 5
    17ee:	40 93 11 02 	sts	0x0211, r20
					break;
    17f2:	aa ca       	rjmp	.-2732   	; 0xd48 <main+0xb8a>
			
				pwm_left_working = pwm_left_desired;

				if(orizzontal_position == ORIZZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_left(&pwm_left_working);
    17f4:	8c ef       	ldi	r24, 0xFC	; 252
    17f6:	93 e0       	ldi	r25, 0x03	; 3
    17f8:	0e 94 1b 13 	call	0x2636	; 0x2636 <start_orizzontal_speed_control_left>
    17fc:	c5 cc       	rjmp	.-1654   	; 0x1188 <main+0xfca>
			
				pwm_right_working = pwm_right_desired;

				if(orizzontal_position == ORIZZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_right(&pwm_right_working);
    17fe:	8a ef       	ldi	r24, 0xFA	; 250
    1800:	93 e0       	ldi	r25, 0x03	; 3
    1802:	0e 94 36 12 	call	0x246c	; 0x246c <start_orizzontal_speed_control_right>
    1806:	f8 cc       	rjmp	.-1552   	; 0x11f8 <main+0x103a>
				pwm_right = pwm_right_working;
	
				if(pwm_right >= 0) {
					OCR3A = (unsigned int)pwm_right;
				} else {
					OCR3B = (unsigned int)(-pwm_right);
    1808:	90 95       	com	r25
    180a:	81 95       	neg	r24
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	90 93 9b 00 	sts	0x009B, r25
    1812:	80 93 9a 00 	sts	0x009A, r24
    1816:	4f c8       	rjmp	.-3938   	; 0x8b6 <main+0x6f8>
				pwm_left = pwm_left_working;

				if(pwm_left >= 0) {
					OCR4A = (unsigned int)pwm_left;
				} else {
					OCR4B =(unsigned int)( -pwm_left);
    1818:	90 95       	com	r25
    181a:	81 95       	neg	r24
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	90 93 ab 00 	sts	0x00AB, r25
    1822:	80 93 aa 00 	sts	0x00AA, r24
    1826:	be cc       	rjmp	.-1668   	; 0x11a4 <main+0xfe6>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    1828:	10 93 2c 04 	sts	0x042C, r17
								cliffAvoidanceEnabled = 1;
    182c:	10 93 31 04 	sts	0x0431, r17
    1830:	20 91 e6 03 	lds	r18, 0x03E6
    1834:	30 91 e7 03 	lds	r19, 0x03E7
    1838:	80 91 e8 03 	lds	r24, 0x03E8
    183c:	90 91 e9 03 	lds	r25, 0x03E9
								break;
    1840:	a2 ca       	rjmp	.-2748   	; 0xd86 <main+0xbc8>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1842:	60 91 56 04 	lds	r22, 0x0456
    1846:	66 23       	and	r22, r22
    1848:	19 f0       	breq	.+6      	; 0x1850 <main+0x1692>
    184a:	50 91 57 04 	lds	r21, 0x0457
    184e:	65 c9       	rjmp	.-3382   	; 0xb1a <main+0x95c>
    1850:	50 91 57 04 	lds	r21, 0x0457
    1854:	55 23       	and	r21, r21
    1856:	f9 f0       	breq	.+62     	; 0x1896 <main+0x16d8>

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1858:	10 92 02 04 	sts	0x0402, r1
    185c:	10 92 01 04 	sts	0x0401, r1
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1860:	85 2f       	mov	r24, r21
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	8f 77       	andi	r24, 0x7F	; 127
    1866:	90 70       	andi	r25, 0x00	; 0
    1868:	90 93 00 04 	sts	0x0400, r25
    186c:	80 93 ff 03 	sts	0x03FF, r24

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	64 c9       	rjmp	.-3384   	; 0xb3e <main+0x980>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    1876:	c9 01       	movw	r24, r18
    1878:	9e ce       	rjmp	.-708    	; 0x15b6 <main+0x13f8>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	09 f1       	breq	.+66     	; 0x18c0 <main+0x1702>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	a1 f0       	breq	.+40     	; 0x18aa <main+0x16ec>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	31 f1       	breq	.+76     	; 0x18d2 <main+0x1714>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	80 93 14 02 	sts	0x0214, r24
							pwm_green = MAX_LEDS_PWM;
    188c:	80 93 13 02 	sts	0x0213, r24
							pwm_red = MAX_LEDS_PWM;
    1890:	80 93 12 02 	sts	0x0212, r24
    1894:	ea ce       	rjmp	.-556    	; 0x166a <main+0x14ac>
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    1896:	8c e3       	ldi	r24, 0x3C	; 60
    1898:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <sleep>
    189c:	60 91 56 04 	lds	r22, 0x0456
    18a0:	50 91 57 04 	lds	r21, 0x0457
    18a4:	40 91 52 04 	lds	r20, 0x0452
    18a8:	38 c9       	rjmp	.-3472   	; 0xb1a <main+0x95c>
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    18aa:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    18ac:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    18ae:	5f ef       	ldi	r21, 0xFF	; 255
    18b0:	50 93 14 02 	sts	0x0214, r21
							pwm_green = MAX_LEDS_PWM;
    18b4:	50 93 13 02 	sts	0x0213, r21
							pwm_red = 0;
    18b8:	10 92 12 02 	sts	0x0212, r1
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	d5 ce       	rjmp	.-598    	; 0x166a <main+0x14ac>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    18c0:	4f ef       	ldi	r20, 0xFF	; 255
    18c2:	40 93 14 02 	sts	0x0214, r20
							pwm_green = 0;
    18c6:	10 92 13 02 	sts	0x0213, r1
							pwm_red = MAX_LEDS_PWM;
    18ca:	40 93 12 02 	sts	0x0212, r20
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	cc ce       	rjmp	.-616    	; 0x166a <main+0x14ac>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    18d2:	10 92 14 02 	sts	0x0214, r1
							pwm_green = 0;
    18d6:	10 92 13 02 	sts	0x0213, r1
							pwm_red = 0;
    18da:	10 92 12 02 	sts	0x0212, r1
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	c4 ce       	rjmp	.-632    	; 0x166a <main+0x14ac>

000018e2 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    18e2:	84 b1       	in	r24, 0x04	; 4
    18e4:	80 7f       	andi	r24, 0xF0	; 240
    18e6:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    18e8:	84 b1       	in	r24, 0x04	; 4
    18ea:	87 60       	ori	r24, 0x07	; 7
    18ec:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    18ee:	80 e5       	ldi	r24, 0x50	; 80
    18f0:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    18f2:	8d b5       	in	r24, 0x2d	; 45
    18f4:	81 60       	ori	r24, 0x01	; 1
    18f6:	8d bd       	out	0x2d, r24	; 45

}
    18f8:	08 95       	ret

000018fa <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    18fa:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    18fc:	1d bc       	out	0x2d, r1	; 45
}
    18fe:	08 95       	ret

00001900 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1900:	44 23       	and	r20, r20
    1902:	79 f0       	breq	.+30     	; 0x1922 <SPI_ReadWrite_Block+0x22>
    1904:	a8 2f       	mov	r26, r24
    1906:	b9 2f       	mov	r27, r25
    1908:	e6 2f       	mov	r30, r22
    190a:	f7 2f       	mov	r31, r23
    190c:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    190e:	9d 91       	ld	r25, X+
    1910:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1912:	0d b4       	in	r0, 0x2d	; 45
    1914:	07 fe       	sbrs	r0, 7
    1916:	fd cf       	rjmp	.-6      	; 0x1912 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1918:	9e b5       	in	r25, 0x2e	; 46
    191a:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	84 17       	cp	r24, r20
    1920:	b0 f3       	brcs	.-20     	; 0x190e <SPI_ReadWrite_Block+0xe>
    1922:	08 95       	ret

00001924 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1924:	66 23       	and	r22, r22
    1926:	59 f0       	breq	.+22     	; 0x193e <SPI_Write_Block+0x1a>
    1928:	e8 2f       	mov	r30, r24
    192a:	f9 2f       	mov	r31, r25
    192c:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    192e:	91 91       	ld	r25, Z+
    1930:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1932:	0d b4       	in	r0, 0x2d	; 45
    1934:	07 fe       	sbrs	r0, 7
    1936:	fd cf       	rjmp	.-6      	; 0x1932 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	86 17       	cp	r24, r22
    193c:	c0 f3       	brcs	.-16     	; 0x192e <SPI_Write_Block+0xa>
    193e:	08 95       	ret

00001940 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1940:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1942:	0d b4       	in	r0, 0x2d	; 45
    1944:	07 fe       	sbrs	r0, 7
    1946:	fd cf       	rjmp	.-6      	; 0x1942 <SPI_Write_Byte+0x2>
    return SPDR;
    1948:	8e b5       	in	r24, 0x2e	; 46
}
    194a:	08 95       	ret

0000194c <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <mirf_config+0xa>
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    195a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    195c:	80 e2       	ldi	r24, 0x20	; 32
    195e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1962:	8d e0       	ldi	r24, 0x0D	; 13
    1964:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1968:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    196a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    196c:	83 e2       	ldi	r24, 0x23	; 35
    196e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1978:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    197a:	8c e0       	ldi	r24, 0x0C	; 12
    197c:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    197e:	80 e8       	ldi	r24, 0x80	; 128
    1980:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1982:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1984:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1986:	80 e3       	ldi	r24, 0x30	; 48
    1988:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    198c:	8e 01       	movw	r16, r28
    198e:	0f 5f       	subi	r16, 0xFF	; 255
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	c8 01       	movw	r24, r16
    1994:	63 e0       	ldi	r22, 0x03	; 3
    1996:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_Write_Block>
    mirf_CSN_hi;
    199a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    199c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    199e:	8a e2       	ldi	r24, 0x2A	; 42
    19a0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    19a4:	c8 01       	movw	r24, r16
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_Write_Block>
    mirf_CSN_hi;
    19ac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19b0:	81 e2       	ldi	r24, 0x21	; 33
    19b2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    19bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19c0:	82 e2       	ldi	r24, 0x22	; 34
    19c2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    19cc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19d0:	84 e2       	ldi	r24, 0x24	; 36
    19d2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19d6:	82 e1       	ldi	r24, 0x12	; 18
    19d8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    19dc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19e0:	85 e2       	ldi	r24, 0x25	; 37
    19e2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19e6:	88 e2       	ldi	r24, 0x28	; 40
    19e8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    19ec:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19f0:	81 e3       	ldi	r24, 0x31	; 49
    19f2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    19fc:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    19fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1a00:	80 e5       	ldi	r24, 0x50	; 80
    1a02:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1a06:	83 e7       	ldi	r24, 0x73	; 115
    1a08:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a0c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a0e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a10:	8c e3       	ldi	r24, 0x3C	; 60
    1a12:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a1c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a1e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a20:	8d e3       	ldi	r24, 0x3D	; 61
    1a22:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a26:	86 e0       	ldi	r24, 0x06	; 6
    1a28:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a2c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a30:	80 e2       	ldi	r24, 0x20	; 32
    1a32:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a36:	8f e0       	ldi	r24, 0x0F	; 15
    1a38:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a3c:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	08 95       	ret

00001a4e <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1a4e:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1a50:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1a52:	0e 94 a6 0c 	call	0x194c	; 0x194c <mirf_config>
}
    1a56:	08 95       	ret

00001a58 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1a5e:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a60:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a62:	8a e2       	ldi	r24, 0x2A	; 42
    1a64:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a68:	ce 01       	movw	r24, r28
    1a6a:	65 e0       	ldi	r22, 0x05	; 5
    1a6c:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_Write_Block>
    mirf_CSN_hi;
    1a70:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1a72:	2c 9a       	sbi	0x05, 4	; 5
}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a80:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a82:	80 e3       	ldi	r24, 0x30	; 48
    1a84:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a88:	ce 01       	movw	r24, r28
    1a8a:	65 e0       	ldi	r22, 0x05	; 5
    1a8c:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_Write_Block>
    mirf_CSN_hi;
    1a90:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1a98:	80 91 35 04 	lds	r24, 0x0435
    1a9c:	88 23       	and	r24, r24
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <mirf_data_ready+0xc>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1aa2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1aa4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1aac:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1aae:	80 74       	andi	r24, 0x40	; 64
    1ab0:	08 95       	ret

00001ab2 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1abc:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1abe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1ac0:	87 e1       	ldi	r24, 0x17	; 23
    1ac2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1ac6:	be 01       	movw	r22, r28
    1ac8:	6f 5f       	subi	r22, 0xFF	; 255
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	cb 01       	movw	r24, r22
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 80 0c 	call	0x1900	; 0x1900 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1ad4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad8:	81 70       	andi	r24, 0x01	; 1
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1ae2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1ae4:	82 ee       	ldi	r24, 0xE2	; 226
    1ae6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1aea:	28 9a       	sbi	0x05, 0	; 5

}
    1aec:	08 95       	ret

00001aee <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1af4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1af6:	81 e6       	ldi	r24, 0x61	; 97
    1af8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1afc:	ce 01       	movw	r24, r28
    1afe:	be 01       	movw	r22, r28
    1b00:	46 e0       	ldi	r20, 0x06	; 6
    1b02:	0e 94 80 0c 	call	0x1900	; 0x1900 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1b06:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b08:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b0a:	87 e2       	ldi	r24, 0x27	; 39
    1b0c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b10:	80 e4       	ldi	r24, 0x40	; 64
    1b12:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b16:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	0f 92       	push	r0
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1b28:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b2a:	8f 71       	andi	r24, 0x1F	; 31
    1b2c:	80 62       	ori	r24, 0x20	; 32
    1b2e:	69 83       	std	Y+1, r22	; 0x01
    1b30:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b34:	69 81       	ldd	r22, Y+1	; 0x01
    1b36:	86 2f       	mov	r24, r22
    1b38:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b3c:	28 9a       	sbi	0x05, 0	; 5
}
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b56:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1b58:	8f 71       	andi	r24, 0x1F	; 31
    1b5a:	49 83       	std	Y+1, r20	; 0x01
    1b5c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1b60:	c8 01       	movw	r24, r16
    1b62:	b8 01       	movw	r22, r16
    1b64:	49 81       	ldd	r20, Y+1	; 0x01
    1b66:	0e 94 80 0c 	call	0x1900	; 0x1900 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1b6a:	28 9a       	sbi	0x05, 0	; 5
}
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	08 95       	ret

00001b78 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b88:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b8a:	8f 71       	andi	r24, 0x1F	; 31
    1b8c:	80 62       	ori	r24, 0x20	; 32
    1b8e:	49 83       	std	Y+1, r20	; 0x01
    1b90:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b94:	c8 01       	movw	r24, r16
    1b96:	49 81       	ldd	r20, Y+1	; 0x01
    1b98:	64 2f       	mov	r22, r20
    1b9a:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_Write_Block>
    mirf_CSN_hi;
    1b9e:	28 9a       	sbi	0x05, 0	; 5
}
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1bbc:	80 91 35 04 	lds	r24, 0x0435
    1bc0:	88 23       	and	r24, r24
    1bc2:	e1 f7       	brne	.-8      	; 0x1bbc <mirf_send+0x10>

    mirf_CE_lo;
    1bc4:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	80 93 35 04 	sts	0x0435, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1bcc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bce:	80 e2       	ldi	r24, 0x20	; 32
    1bd0:	69 83       	std	Y+1, r22	; 0x01
    1bd2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bd6:	8a e4       	ldi	r24, 0x4A	; 74
    1bd8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bdc:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1bde:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1be0:	81 ee       	ldi	r24, 0xE1	; 225
    1be2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1be6:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1be8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1bea:	80 ea       	ldi	r24, 0xA0	; 160
    1bec:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	69 81       	ldd	r22, Y+1	; 0x01
    1bf4:	0e 94 92 0c 	call	0x1924	; 0x1924 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1bf8:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1bfa:	2c 9a       	sbi	0x05, 4	; 5
}
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	08 95       	ret

00001c08 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	18 2f       	mov	r17, r24
    1c1c:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1c1e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1c20:	81 ee       	ldi	r24, 0xE1	; 225
    1c22:	99 83       	std	Y+1, r25	; 0x01
    1c24:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c28:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1c2a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1c2c:	88 ea       	ldi	r24, 0xA8	; 168
    1c2e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1c32:	99 81       	ldd	r25, Y+1	; 0x01
    1c34:	00 23       	and	r16, r16
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <writeAckPayload+0x48>
    1c38:	61 2f       	mov	r22, r17
    1c3a:	79 2f       	mov	r23, r25
    1c3c:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1c3e:	f7 01       	movw	r30, r14
    1c40:	81 91       	ld	r24, Z+
    1c42:	7f 01       	movw	r14, r30
    1c44:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1c48:	8e 2d       	mov	r24, r14
    1c4a:	81 1b       	sub	r24, r17
    1c4c:	80 17       	cp	r24, r16
    1c4e:	b8 f3       	brcs	.-18     	; 0x1c3e <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1c50:	28 9a       	sbi	0x05, 0	; 5


}
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	08 95       	ret

00001c62 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1c62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1c64:	81 ee       	ldi	r24, 0xE1	; 225
    1c66:	0e 94 a0 0c 	call	0x1940	; 0x1940 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c6a:	28 9a       	sbi	0x05, 0	; 5

}
    1c6c:	08 95       	ret

00001c6e <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    1c6e:	e8 e6       	ldi	r30, 0x68	; 104
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	82 60       	ori	r24, 0x02	; 2
    1c76:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    1c78:	ec e6       	ldi	r30, 0x6C	; 108
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 68       	ori	r24, 0x80	; 128
    1c80:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    1c82:	e0 eb       	ldi	r30, 0xB0	; 176
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	82 60       	ori	r24, 0x02	; 2
    1c8a:	80 83       	st	Z, r24

}
    1c8c:	08 95       	ret

00001c8e <__vector_10>:

ISR(PCINT1_vect) {
    1c8e:	1f 92       	push	r1
    1c90:	0f 92       	push	r0
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	0f 92       	push	r0
    1c96:	11 24       	eor	r1, r1
    1c98:	8f 93       	push	r24

	if(irEnabled) {
    1c9a:	80 91 17 02 	lds	r24, 0x0217
    1c9e:	88 23       	and	r24, r24
    1ca0:	21 f1       	breq	.+72     	; 0x1cea <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {
    1ca2:	80 91 03 01 	lds	r24, 0x0103
    1ca6:	86 fd       	sbrc	r24, 6
    1ca8:	20 c0       	rjmp	.+64     	; 0x1cea <__vector_10+0x5c>

			//PORTB ^= (1 << 5);
			//PORTB &= ~(1 << 6);
   			
			PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    1caa:	80 91 68 00 	lds	r24, 0x0068
    1cae:	8d 7f       	andi	r24, 0xFD	; 253
    1cb0:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1cb4:	80 91 6c 00 	lds	r24, 0x006C
    1cb8:	8f 77       	andi	r24, 0x7F	; 127
    1cba:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 18 02 	sts	0x0218, r24
			OCR2A = 13;
    1cc4:	8d e0       	ldi	r24, 0x0D	; 13
    1cc6:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    1cca:	80 91 b1 00 	lds	r24, 0x00B1
    1cce:	86 60       	ori	r24, 0x06	; 6
    1cd0:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    1cd4:	80 91 70 00 	lds	r24, 0x0070
    1cd8:	82 60       	ori	r24, 0x02	; 2
    1cda:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1cde:	10 92 2a 03 	sts	0x032A, r1
    1ce2:	10 92 2b 03 	sts	0x032B, r1
    1ce6:	10 92 2c 03 	sts	0x032C, r1

		}

	}
	
}
    1cea:	8f 91       	pop	r24
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    1cf6:	80 91 00 02 	lds	r24, 0x0200
    1cfa:	08 95       	ret

00001cfc <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    1cfc:	80 91 28 03 	lds	r24, 0x0328
    1d00:	08 95       	ret

00001d02 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    1d02:	80 91 29 03 	lds	r24, 0x0329
    1d06:	08 95       	ret

00001d08 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1d08:	1f 92       	push	r1
    1d0a:	0f 92       	push	r0
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	0f 92       	push	r0
    1d10:	11 24       	eor	r1, r1
    1d12:	2f 93       	push	r18
    1d14:	3f 93       	push	r19
    1d16:	4f 93       	push	r20
    1d18:	5f 93       	push	r21
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25

		static int i = -1;

		//PORTB ^= (1 << 5);

		TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    1d1e:	80 91 b1 00 	lds	r24, 0x00B1
    1d22:	88 7f       	andi	r24, 0xF8	; 248
    1d24:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {
    1d28:	80 91 18 02 	lds	r24, 0x0218
    1d2c:	88 23       	and	r24, r24
    1d2e:	a9 f0       	breq	.+42     	; 0x1d5a <__vector_13+0x52>
			if(REMOTE) {	// if high it is a glitch
    1d30:	80 91 03 01 	lds	r24, 0x0103
    1d34:	86 ff       	sbrs	r24, 6
    1d36:	65 c0       	rjmp	.+202    	; 0x1e02 <__vector_13+0xfa>
				PCICR |= (1 << PCIE1);		// enable external interrupt
    1d38:	80 91 68 00 	lds	r24, 0x0068
    1d3c:	82 60       	ori	r24, 0x02	; 2
    1d3e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1d42:	80 91 6c 00 	lds	r24, 0x006C
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	90 93 02 02 	sts	0x0202, r25
    1d54:	80 93 01 02 	sts	0x0201, r24
    1d58:	49 c0       	rjmp	.+146    	; 0x1dec <__vector_13+0xe4>

			}
		} else {


			if (i == -1) { // start bit confirm  change timer period
    1d5a:	80 91 01 02 	lds	r24, 0x0201
    1d5e:	90 91 02 02 	lds	r25, 0x0202
    1d62:	2f ef       	ldi	r18, 0xFF	; 255
    1d64:	8f 3f       	cpi	r24, 0xFF	; 255
    1d66:	92 07       	cpc	r25, r18
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__vector_13+0x64>
    1d6a:	63 c0       	rjmp	.+198    	; 0x1e32 <__vector_13+0x12a>
					TIMSK2 |= (1 << OCIE2A);									

					check_temp = address_temp = data_temp = 0;
					i=0;
				}
			} else if (i == 1)	{ // check bit read and change timer period
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	91 05       	cpc	r25, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <__vector_13+0x6c>
    1d72:	98 c0       	rjmp	.+304    	; 0x1ea4 <__vector_13+0x19c>
				// 1.778/0.032 = 54 => 1.728
				OCR2A = 54;
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);

			} else if ((i > 1) && (i < 7)) { // we read address
    1d74:	9c 01       	movw	r18, r24
    1d76:	22 50       	subi	r18, 0x02	; 2
    1d78:	30 40       	sbci	r19, 0x00	; 0
    1d7a:	25 30       	cpi	r18, 0x05	; 5
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <__vector_13+0x7a>
    1d80:	67 c0       	rjmp	.+206    	; 0x1e50 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { // we read data
    1d82:	9c 01       	movw	r18, r24
    1d84:	27 50       	subi	r18, 0x07	; 7
    1d86:	30 40       	sbci	r19, 0x00	; 0
    1d88:	26 30       	cpi	r18, 0x06	; 6
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <__vector_13+0x88>
    1d8e:	bd c0       	rjmp	.+378    	; 0x1f0a <__vector_13+0x202>

				//OCR2A = 14;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 1.778/0.032 = 54
				OCR2A = 54;
    1d90:	26 e3       	ldi	r18, 0x36	; 54
    1d92:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    1d96:	20 91 b1 00 	lds	r18, 0x00B1
    1d9a:	26 60       	ori	r18, 0x06	; 6
    1d9c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1da0:	20 91 70 00 	lds	r18, 0x0070
    1da4:	22 60       	ori	r18, 0x02	; 2
    1da6:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1daa:	20 91 03 01 	lds	r18, 0x0103
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	20 74       	andi	r18, 0x40	; 64
    1db2:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1db4:	00 24       	eor	r0, r0
    1db6:	22 0f       	add	r18, r18
    1db8:	33 1f       	adc	r19, r19
    1dba:	00 1c       	adc	r0, r0
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	00 1c       	adc	r0, r0
    1dc2:	23 2f       	mov	r18, r19
    1dc4:	30 2d       	mov	r19, r0
    1dc6:	4c e0       	ldi	r20, 0x0C	; 12
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	48 1b       	sub	r20, r24
    1dcc:	59 0b       	sbc	r21, r25
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <__vector_13+0xcc>
    1dd0:	22 0f       	add	r18, r18
    1dd2:	33 1f       	adc	r19, r19
    1dd4:	4a 95       	dec	r20
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <__vector_13+0xc8>
				data_temp += temp;
    1dd8:	40 91 2a 03 	lds	r20, 0x032A
    1ddc:	42 0f       	add	r20, r18
    1dde:	40 93 2a 03 	sts	0x032A, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1de2:	01 96       	adiw	r24, 0x01	; 1
			} 

		}
	
		if(i!=-1)
			i++;
    1de4:	90 93 02 02 	sts	0x0202, r25
    1de8:	80 93 01 02 	sts	0x0201, r24

}
    1dec:	9f 91       	pop	r25
    1dee:	8f 91       	pop	r24
    1df0:	5f 91       	pop	r21
    1df2:	4f 91       	pop	r20
    1df4:	3f 91       	pop	r19
    1df6:	2f 91       	pop	r18
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	0f 90       	pop	r0
    1dfe:	1f 90       	pop	r1
    1e00:	18 95       	reti
			if(REMOTE) {	// if high it is a glitch
				PCICR |= (1 << PCIE1);		// enable external interrupt
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			
			} else {
				checkGlitch = 0;
    1e02:	10 92 18 02 	sts	0x0218, r1
				// 2/0.128 = 15.6
				//OCR2A = 16;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 2.1/0.032 = 64 => 2.048 ms
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;
    1e06:	83 e3       	ldi	r24, 0x33	; 51
    1e08:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    1e0c:	80 91 b1 00 	lds	r24, 0x00B1
    1e10:	86 60       	ori	r24, 0x06	; 6
    1e12:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    1e16:	80 91 70 00 	lds	r24, 0x0070
    1e1a:	82 60       	ori	r24, 0x02	; 2
    1e1c:	80 93 70 00 	sts	0x0070, r24
    1e20:	80 91 01 02 	lds	r24, 0x0201
    1e24:	90 91 02 02 	lds	r25, 0x0202
				//PORTB |= (1 << 6);
			} 

		}
	
		if(i!=-1)
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2c:	92 07       	cpc	r25, r18
    1e2e:	c9 f6       	brne	.-78     	; 0x1de2 <__vector_13+0xda>
    1e30:	dd cf       	rjmp	.-70     	; 0x1dec <__vector_13+0xe4>
		} else {


			if (i == -1) { // start bit confirm  change timer period

				if(REMOTE) {	//if high it is only a noise
    1e32:	20 91 03 01 	lds	r18, 0x0103
    1e36:	26 ff       	sbrs	r18, 6
    1e38:	52 c0       	rjmp	.+164    	; 0x1ede <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// enable external interrupt
    1e3a:	20 91 68 00 	lds	r18, 0x0068
    1e3e:	22 60       	ori	r18, 0x02	; 2
    1e40:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1e44:	20 91 6c 00 	lds	r18, 0x006C
    1e48:	20 68       	ori	r18, 0x80	; 128
    1e4a:	20 93 6c 00 	sts	0x006C, r18
    1e4e:	ce cf       	rjmp	.-100    	; 0x1dec <__vector_13+0xe4>
			} else if ((i > 1) && (i < 7)) { // we read address
		
				//OCR2A = 14;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 1.778/0.032 = 54
				OCR2A = 54;
    1e50:	26 e3       	ldi	r18, 0x36	; 54
    1e52:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    1e56:	20 91 b1 00 	lds	r18, 0x00B1
    1e5a:	26 60       	ori	r18, 0x06	; 6
    1e5c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1e60:	20 91 70 00 	lds	r18, 0x0070
    1e64:	22 60       	ori	r18, 0x02	; 2
    1e66:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1e6a:	20 91 03 01 	lds	r18, 0x0103
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	20 74       	andi	r18, 0x40	; 64
    1e72:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1e74:	00 24       	eor	r0, r0
    1e76:	22 0f       	add	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	00 1c       	adc	r0, r0
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	00 1c       	adc	r0, r0
    1e82:	23 2f       	mov	r18, r19
    1e84:	30 2d       	mov	r19, r0
    1e86:	46 e0       	ldi	r20, 0x06	; 6
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	48 1b       	sub	r20, r24
    1e8c:	59 0b       	sbc	r21, r25
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <__vector_13+0x18c>
    1e90:	22 0f       	add	r18, r18
    1e92:	33 1f       	adc	r19, r19
    1e94:	4a 95       	dec	r20
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <__vector_13+0x188>
				address_temp += temp;
    1e98:	40 91 2b 03 	lds	r20, 0x032B
    1e9c:	42 0f       	add	r20, r18
    1e9e:	40 93 2b 03 	sts	0x032B, r20
    1ea2:	9f cf       	rjmp	.-194    	; 0x1de2 <__vector_13+0xda>
					check_temp = address_temp = data_temp = 0;
					i=0;
				}
			} else if (i == 1)	{ // check bit read and change timer period

				check_temp = REMOTE;	   // read the check bit
    1ea4:	20 91 03 01 	lds	r18, 0x0103
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	20 74       	andi	r18, 0x40	; 64
    1eac:	30 70       	andi	r19, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	23 2f       	mov	r18, r19
    1eb2:	00 0c       	add	r0, r0
    1eb4:	22 1f       	adc	r18, r18
    1eb6:	33 0b       	sbc	r19, r19
    1eb8:	00 0c       	add	r0, r0
    1eba:	22 1f       	adc	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	20 93 2c 03 	sts	0x032C, r18
				//cycle value is 1.778[ms]
				// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
				//OCR2A = 14;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 1.778/0.032 = 54 => 1.728
				OCR2A = 54;
    1ec2:	26 e3       	ldi	r18, 0x36	; 54
    1ec4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    1ec8:	20 91 b1 00 	lds	r18, 0x00B1
    1ecc:	26 60       	ori	r18, 0x06	; 6
    1ece:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1ed2:	20 91 70 00 	lds	r18, 0x0070
    1ed6:	22 60       	ori	r18, 0x02	; 2
    1ed8:	20 93 70 00 	sts	0x0070, r18
    1edc:	82 cf       	rjmp	.-252    	; 0x1de2 <__vector_13+0xda>
					//cycle value is 0.6 to go to check bit[ms]
					// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
					//OCR2A = 5;
					//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
					// 0.9/0.032 = 28 => 0.896
					OCR2A = 28;
    1ede:	8c e1       	ldi	r24, 0x1C	; 28
    1ee0:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    1ee4:	80 91 b1 00 	lds	r24, 0x00B1
    1ee8:	86 60       	ori	r24, 0x06	; 6
    1eea:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);									
    1eee:	80 91 70 00 	lds	r24, 0x0070
    1ef2:	82 60       	ori	r24, 0x02	; 2
    1ef4:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1ef8:	10 92 2a 03 	sts	0x032A, r1
    1efc:	10 92 2b 03 	sts	0x032B, r1
    1f00:	10 92 2c 03 	sts	0x032C, r1
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	6d cf       	rjmp	.-294    	; 0x1de4 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { // last bit read
    1f0a:	8d 30       	cpi	r24, 0x0D	; 13
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <__vector_13+0x20a>
    1f10:	68 cf       	rjmp	.-304    	; 0x1de2 <__vector_13+0xda>
				
				TIMSK2 = 0;					// disable all interrupt for timer2
    1f12:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);		// enable interrupt
    1f16:	80 91 68 00 	lds	r24, 0x0068
    1f1a:	82 60       	ori	r24, 0x02	; 2
    1f1c:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1f20:	80 91 6c 00 	lds	r24, 0x006C
    1f24:	80 68       	ori	r24, 0x80	; 128
    1f26:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	90 93 02 02 	sts	0x0202, r25
    1f32:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1f36:	80 91 2c 03 	lds	r24, 0x032C
    1f3a:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1f3e:	80 91 2b 03 	lds	r24, 0x032B
    1f42:	80 93 28 03 	sts	0x0328, r24
				data_ir = data_temp;
    1f46:	80 91 2a 03 	lds	r24, 0x032A
    1f4a:	80 93 29 03 	sts	0x0329, r24
				command_received=1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	80 93 06 04 	sts	0x0406, r24
    1f54:	4b cf       	rjmp	.-362    	; 0x1dec <__vector_13+0xe4>

00001f56 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1f56:	08 95       	ret

00001f58 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <start_vertical_speed_control_left+0x14>
    1f6a:	b7 c0       	rjmp	.+366    	; 0x20da <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1f6c:	20 91 1c 04 	lds	r18, 0x041C
    1f70:	30 91 1d 04 	lds	r19, 0x041D
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	2e 30       	cpi	r18, 0x0E	; 14
    1f78:	34 07       	cpc	r19, r20
    1f7a:	0c f4       	brge	.+2      	; 0x1f7e <start_vertical_speed_control_left+0x26>
    1f7c:	88 c0       	rjmp	.+272    	; 0x208e <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    1f7e:	18 16       	cp	r1, r24
    1f80:	19 06       	cpc	r1, r25
    1f82:	0c f0       	brlt	.+2      	; 0x1f86 <start_vertical_speed_control_left+0x2e>
    1f84:	13 c1       	rjmp	.+550    	; 0x21ac <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    1f86:	88 e6       	ldi	r24, 0x68	; 104
    1f88:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1f8a:	82 1b       	sub	r24, r18
    1f8c:	93 0b       	sbc	r25, r19
    1f8e:	95 95       	asr	r25
    1f90:	87 95       	ror	r24
    1f92:	95 95       	asr	r25
    1f94:	87 95       	ror	r24
    1f96:	29 e1       	ldi	r18, 0x19	; 25
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	28 1b       	sub	r18, r24
    1f9c:	39 0b       	sbc	r19, r25
    1f9e:	30 93 0c 02 	sts	0x020C, r19
    1fa2:	20 93 0b 02 	sts	0x020B, r18
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_left_speed_prev = delta_left_speed_current; 
    1fa6:	40 91 36 04 	lds	r20, 0x0436
    1faa:	50 91 37 04 	lds	r21, 0x0437
    1fae:	50 93 51 04 	sts	0x0451, r21
    1fb2:	40 93 50 04 	sts	0x0450, r20
	if(*pwm_left >= 0) {
    1fb6:	20 81       	ld	r18, Z
    1fb8:	31 81       	ldd	r19, Z+1	; 0x01
    1fba:	37 fd       	sbrc	r19, 7
    1fbc:	d2 c0       	rjmp	.+420    	; 0x2162 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1fbe:	80 91 da 03 	lds	r24, 0x03DA
    1fc2:	90 91 db 03 	lds	r25, 0x03DB
    1fc6:	b9 01       	movw	r22, r18
    1fc8:	68 1b       	sub	r22, r24
    1fca:	79 0b       	sbc	r23, r25
    1fcc:	cb 01       	movw	r24, r22
    1fce:	70 93 37 04 	sts	0x0437, r23
    1fd2:	60 93 36 04 	sts	0x0436, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    1fd6:	20 91 f2 03 	lds	r18, 0x03F2
    1fda:	30 91 f3 03 	lds	r19, 0x03F3
    1fde:	28 0f       	add	r18, r24
    1fe0:	39 1f       	adc	r19, r25
    1fe2:	30 93 f3 03 	sts	0x03F3, r19
    1fe6:	20 93 f2 03 	sts	0x03F2, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1fea:	76 e0       	ldi	r23, 0x06	; 6
    1fec:	21 34       	cpi	r18, 0x41	; 65
    1fee:	37 07       	cpc	r19, r23
    1ff0:	0c f4       	brge	.+2      	; 0x1ff4 <start_vertical_speed_control_left+0x9c>
    1ff2:	84 c0       	rjmp	.+264    	; 0x20fc <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1ff4:	20 e4       	ldi	r18, 0x40	; 64
    1ff6:	36 e0       	ldi	r19, 0x06	; 6
    1ff8:	30 93 f3 03 	sts	0x03F3, r19
    1ffc:	20 93 f2 03 	sts	0x03F2, r18
    2000:	60 ec       	ldi	r22, 0xC0	; 192
    2002:	72 e1       	ldi	r23, 0x12	; 18
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2004:	9c 01       	movw	r18, r24
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	dc 01       	movw	r26, r24
    200c:	aa 0f       	add	r26, r26
    200e:	bb 1f       	adc	r27, r27
    2010:	aa 0f       	add	r26, r26
    2012:	bb 1f       	adc	r27, r27
    2014:	aa 0f       	add	r26, r26
    2016:	bb 1f       	adc	r27, r27
    2018:	2a 0f       	add	r18, r26
    201a:	3b 1f       	adc	r19, r27
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
    201c:	00 81       	ld	r16, Z
    201e:	11 81       	ldd	r17, Z+1	; 0x01
    2020:	c0 91 0b 02 	lds	r28, 0x020B
    2024:	d0 91 0c 02 	lds	r29, 0x020C
    2028:	0c 9f       	mul	r16, r28
    202a:	d0 01       	movw	r26, r0
    202c:	0d 9f       	mul	r16, r29
    202e:	b0 0d       	add	r27, r0
    2030:	1c 9f       	mul	r17, r28
    2032:	b0 0d       	add	r27, r0
    2034:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2036:	2a 0f       	add	r18, r26
    2038:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    203a:	48 1b       	sub	r20, r24
    203c:	59 0b       	sbc	r21, r25
    203e:	44 0f       	add	r20, r20
    2040:	55 1f       	adc	r21, r21
    2042:	24 0f       	add	r18, r20
    2044:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    2046:	26 0f       	add	r18, r22
    2048:	37 1f       	adc	r19, r23
    204a:	30 93 ed 03 	sts	0x03ED, r19
    204e:	20 93 ec 03 	sts	0x03EC, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2052:	37 fd       	sbrc	r19, 7
    2054:	69 c0       	rjmp	.+210    	; 0x2128 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2056:	12 16       	cp	r1, r18
    2058:	13 06       	cpc	r1, r19
    205a:	0c f0       	brlt	.+2      	; 0x205e <start_vertical_speed_control_left+0x106>
    205c:	6f c0       	rjmp	.+222    	; 0x213c <start_vertical_speed_control_left+0x1e4>
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	97 fd       	sbrc	r25, 7
    2064:	89 c0       	rjmp	.+274    	; 0x2178 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2066:	7d e5       	ldi	r23, 0x5D	; 93
    2068:	21 3c       	cpi	r18, 0xC1	; 193
    206a:	37 07       	cpc	r19, r23
    206c:	0c f4       	brge	.+2      	; 0x2070 <start_vertical_speed_control_left+0x118>
    206e:	66 c0       	rjmp	.+204    	; 0x213c <start_vertical_speed_control_left+0x1e4>
    2070:	80 ec       	ldi	r24, 0xC0	; 192
    2072:	9d e5       	ldi	r25, 0x5D	; 93
    2074:	90 93 ed 03 	sts	0x03ED, r25
    2078:	80 93 ec 03 	sts	0x03EC, r24
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	92 e0       	ldi	r25, 0x02	; 2
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    208e:	24 3b       	cpi	r18, 0xB4	; 180
    2090:	31 05       	cpc	r19, r1
    2092:	94 f4       	brge	.+36     	; 0x20b8 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    2094:	2a 35       	cpi	r18, 0x5A	; 90
    2096:	31 05       	cpc	r19, r1
    2098:	7c f4       	brge	.+30     	; 0x20b8 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    209a:	18 16       	cp	r1, r24
    209c:	19 06       	cpc	r1, r25
    209e:	0c f0       	brlt	.+2      	; 0x20a2 <start_vertical_speed_control_left+0x14a>
    20a0:	93 c0       	rjmp	.+294    	; 0x21c8 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    20a2:	35 95       	asr	r19
    20a4:	27 95       	ror	r18
    20a6:	35 95       	asr	r19
    20a8:	27 95       	ror	r18
    20aa:	27 5e       	subi	r18, 0xE7	; 231
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	30 93 0c 02 	sts	0x020C, r19
    20b2:	20 93 0b 02 	sts	0x020B, r18
    20b6:	77 cf       	rjmp	.-274    	; 0x1fa6 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
    20b8:	18 16       	cp	r1, r24
    20ba:	19 06       	cpc	r1, r25
    20bc:	94 f5       	brge	.+100    	; 0x2122 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    20be:	84 eb       	ldi	r24, 0xB4	; 180
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	82 1b       	sub	r24, r18
    20c4:	93 0b       	sbc	r25, r19
    20c6:	95 95       	asr	r25
    20c8:	87 95       	ror	r24
    20ca:	95 95       	asr	r25
    20cc:	87 95       	ror	r24
    20ce:	49 96       	adiw	r24, 0x19	; 25
    20d0:	90 93 0c 02 	sts	0x020C, r25
    20d4:	80 93 0b 02 	sts	0x020B, r24
    20d8:	66 cf       	rjmp	.-308    	; 0x1fa6 <start_vertical_speed_control_left+0x4e>
}

void start_vertical_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    20da:	10 92 f3 03 	sts	0x03F3, r1
    20de:	10 92 f2 03 	sts	0x03F2, r1
		delta_left_speed_current = 0;
    20e2:	10 92 37 04 	sts	0x0437, r1
    20e6:	10 92 36 04 	sts	0x0436, r1
		delta_left_speed_prev = 0;
    20ea:	10 92 51 04 	sts	0x0451, r1
    20ee:	10 92 50 04 	sts	0x0450, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    20fc:	69 ef       	ldi	r22, 0xF9	; 249
    20fe:	20 3c       	cpi	r18, 0xC0	; 192
    2100:	36 07       	cpc	r19, r22
    2102:	4c f4       	brge	.+18     	; 0x2116 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2104:	20 ec       	ldi	r18, 0xC0	; 192
    2106:	39 ef       	ldi	r19, 0xF9	; 249
    2108:	30 93 f3 03 	sts	0x03F3, r19
    210c:	20 93 f2 03 	sts	0x03F2, r18
    2110:	60 e4       	ldi	r22, 0x40	; 64
    2112:	7d ee       	ldi	r23, 0xED	; 237
    2114:	77 cf       	rjmp	.-274    	; 0x2004 <start_vertical_speed_control_left+0xac>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2116:	b9 01       	movw	r22, r18
    2118:	66 0f       	add	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	62 0f       	add	r22, r18
    211e:	73 1f       	adc	r23, r19
    2120:	71 cf       	rjmp	.-286    	; 0x2004 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2122:	84 eb       	ldi	r24, 0xB4	; 180
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	31 cf       	rjmp	.-414    	; 0x1f8a <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	97 fd       	sbrc	r25, 7
    212e:	06 c0       	rjmp	.+12     	; 0x213c <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    2130:	10 92 ed 03 	sts	0x03ED, r1
    2134:	10 92 ec 03 	sts	0x03EC, r1
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    213c:	82 ea       	ldi	r24, 0xA2	; 162
    213e:	20 34       	cpi	r18, 0x40	; 64
    2140:	38 07       	cpc	r19, r24
    2142:	04 f5       	brge	.+64     	; 0x2184 <start_vertical_speed_control_left+0x22c>
    2144:	80 e4       	ldi	r24, 0x40	; 64
    2146:	92 ea       	ldi	r25, 0xA2	; 162
    2148:	90 93 ed 03 	sts	0x03ED, r25
    214c:	80 93 ec 03 	sts	0x03EC, r24
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	9e ef       	ldi	r25, 0xFE	; 254
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24


}
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2162:	80 91 da 03 	lds	r24, 0x03DA
    2166:	90 91 db 03 	lds	r25, 0x03DB
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	90 93 37 04 	sts	0x0437, r25
    2172:	80 93 36 04 	sts	0x0436, r24
    2176:	2f cf       	rjmp	.-418    	; 0x1fd6 <start_vertical_speed_control_left+0x7e>

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2178:	10 92 ed 03 	sts	0x03ED, r1
    217c:	10 92 ec 03 	sts	0x03EC, r1
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2184:	35 95       	asr	r19
    2186:	27 95       	ror	r18
    2188:	35 95       	asr	r19
    218a:	27 95       	ror	r18
    218c:	35 95       	asr	r19
    218e:	27 95       	ror	r18
    2190:	35 95       	asr	r19
    2192:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2194:	31 83       	std	Z+1, r19	; 0x01
    2196:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2198:	42 e0       	ldi	r20, 0x02	; 2
    219a:	21 30       	cpi	r18, 0x01	; 1
    219c:	34 07       	cpc	r19, r20
    219e:	0c f0       	brlt	.+2      	; 0x21a2 <start_vertical_speed_control_left+0x24a>
    21a0:	6d cf       	rjmp	.-294    	; 0x207c <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    21a2:	6e ef       	ldi	r22, 0xFE	; 254
    21a4:	20 30       	cpi	r18, 0x00	; 0
    21a6:	36 07       	cpc	r19, r22
    21a8:	9c f2       	brlt	.-90     	; 0x2150 <start_vertical_speed_control_left+0x1f8>
    21aa:	6c cf       	rjmp	.-296    	; 0x2084 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    21ac:	88 e6       	ldi	r24, 0x68	; 104
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	82 1b       	sub	r24, r18
    21b2:	93 0b       	sbc	r25, r19
    21b4:	95 95       	asr	r25
    21b6:	87 95       	ror	r24
    21b8:	95 95       	asr	r25
    21ba:	87 95       	ror	r24
    21bc:	49 96       	adiw	r24, 0x19	; 25
    21be:	90 93 0c 02 	sts	0x020C, r25
    21c2:	80 93 0b 02 	sts	0x020B, r24
    21c6:	ef ce       	rjmp	.-546    	; 0x1fa6 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    21c8:	35 95       	asr	r19
    21ca:	27 95       	ror	r18
    21cc:	35 95       	asr	r19
    21ce:	27 95       	ror	r18
    21d0:	89 e1       	ldi	r24, 0x19	; 25
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	82 1b       	sub	r24, r18
    21d6:	93 0b       	sbc	r25, r19
    21d8:	90 93 0c 02 	sts	0x020C, r25
    21dc:	80 93 0b 02 	sts	0x020B, r24
    21e0:	e2 ce       	rjmp	.-572    	; 0x1fa6 <start_vertical_speed_control_left+0x4e>

000021e2 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <start_vertical_speed_control_right+0x14>
    21f4:	b7 c0       	rjmp	.+366    	; 0x2364 <__stack+0x165>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    21f6:	20 91 1c 04 	lds	r18, 0x041C
    21fa:	30 91 1d 04 	lds	r19, 0x041D
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	2e 30       	cpi	r18, 0x0E	; 14
    2202:	34 07       	cpc	r19, r20
    2204:	0c f4       	brge	.+2      	; 0x2208 <__stack+0x9>
    2206:	88 c0       	rjmp	.+272    	; 0x2318 <__stack+0x119>
		if(*pwm_right > 0) {
    2208:	18 16       	cp	r1, r24
    220a:	19 06       	cpc	r1, r25
    220c:	0c f0       	brlt	.+2      	; 0x2210 <__stack+0x11>
    220e:	13 c1       	rjmp	.+550    	; 0x2436 <__stack+0x237>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2210:	88 e6       	ldi	r24, 0x68	; 104
    2212:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2214:	82 1b       	sub	r24, r18
    2216:	93 0b       	sbc	r25, r19
    2218:	95 95       	asr	r25
    221a:	87 95       	ror	r24
    221c:	95 95       	asr	r25
    221e:	87 95       	ror	r24
    2220:	29 e1       	ldi	r18, 0x19	; 25
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	28 1b       	sub	r18, r24
    2226:	39 0b       	sbc	r19, r25
    2228:	30 93 0e 02 	sts	0x020E, r19
    222c:	20 93 0d 02 	sts	0x020D, r18
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_right_speed_prev = delta_right_speed_current;
    2230:	40 91 58 04 	lds	r20, 0x0458
    2234:	50 91 59 04 	lds	r21, 0x0459
    2238:	50 93 39 04 	sts	0x0439, r21
    223c:	40 93 38 04 	sts	0x0438, r20
	if(*pwm_right >= 0) {
    2240:	20 81       	ld	r18, Z
    2242:	31 81       	ldd	r19, Z+1	; 0x01
    2244:	37 fd       	sbrc	r19, 7
    2246:	d2 c0       	rjmp	.+420    	; 0x23ec <__stack+0x1ed>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2248:	80 91 dc 03 	lds	r24, 0x03DC
    224c:	90 91 dd 03 	lds	r25, 0x03DD
    2250:	b9 01       	movw	r22, r18
    2252:	68 1b       	sub	r22, r24
    2254:	79 0b       	sbc	r23, r25
    2256:	cb 01       	movw	r24, r22
    2258:	70 93 59 04 	sts	0x0459, r23
    225c:	60 93 58 04 	sts	0x0458, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    2260:	20 91 f4 03 	lds	r18, 0x03F4
    2264:	30 91 f5 03 	lds	r19, 0x03F5
    2268:	28 0f       	add	r18, r24
    226a:	39 1f       	adc	r19, r25
    226c:	30 93 f5 03 	sts	0x03F5, r19
    2270:	20 93 f4 03 	sts	0x03F4, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2274:	76 e0       	ldi	r23, 0x06	; 6
    2276:	21 34       	cpi	r18, 0x41	; 65
    2278:	37 07       	cpc	r19, r23
    227a:	0c f4       	brge	.+2      	; 0x227e <__stack+0x7f>
    227c:	84 c0       	rjmp	.+264    	; 0x2386 <__stack+0x187>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    227e:	20 e4       	ldi	r18, 0x40	; 64
    2280:	36 e0       	ldi	r19, 0x06	; 6
    2282:	30 93 f5 03 	sts	0x03F5, r19
    2286:	20 93 f4 03 	sts	0x03F4, r18
    228a:	60 ec       	ldi	r22, 0xC0	; 192
    228c:	72 e1       	ldi	r23, 0x12	; 18
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    228e:	9c 01       	movw	r18, r24
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	dc 01       	movw	r26, r24
    2296:	aa 0f       	add	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	aa 0f       	add	r26, r26
    229c:	bb 1f       	adc	r27, r27
    229e:	aa 0f       	add	r26, r26
    22a0:	bb 1f       	adc	r27, r27
    22a2:	2a 0f       	add	r18, r26
    22a4:	3b 1f       	adc	r19, r27
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    22a6:	00 81       	ld	r16, Z
    22a8:	11 81       	ldd	r17, Z+1	; 0x01
    22aa:	c0 91 0d 02 	lds	r28, 0x020D
    22ae:	d0 91 0e 02 	lds	r29, 0x020E
    22b2:	0c 9f       	mul	r16, r28
    22b4:	d0 01       	movw	r26, r0
    22b6:	0d 9f       	mul	r16, r29
    22b8:	b0 0d       	add	r27, r0
    22ba:	1c 9f       	mul	r17, r28
    22bc:	b0 0d       	add	r27, r0
    22be:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    22c0:	2a 0f       	add	r18, r26
    22c2:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    22c4:	48 1b       	sub	r20, r24
    22c6:	59 0b       	sbc	r21, r25
    22c8:	44 0f       	add	r20, r20
    22ca:	55 1f       	adc	r21, r21
    22cc:	24 0f       	add	r18, r20
    22ce:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    22d0:	26 0f       	add	r18, r22
    22d2:	37 1f       	adc	r19, r23
    22d4:	30 93 eb 03 	sts	0x03EB, r19
    22d8:	20 93 ea 03 	sts	0x03EA, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    22dc:	37 fd       	sbrc	r19, 7
    22de:	69 c0       	rjmp	.+210    	; 0x23b2 <__stack+0x1b3>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    22e0:	12 16       	cp	r1, r18
    22e2:	13 06       	cpc	r1, r19
    22e4:	0c f0       	brlt	.+2      	; 0x22e8 <__stack+0xe9>
    22e6:	6f c0       	rjmp	.+222    	; 0x23c6 <__stack+0x1c7>
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	97 fd       	sbrc	r25, 7
    22ee:	89 c0       	rjmp	.+274    	; 0x2402 <__stack+0x203>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    22f0:	7d e5       	ldi	r23, 0x5D	; 93
    22f2:	21 3c       	cpi	r18, 0xC1	; 193
    22f4:	37 07       	cpc	r19, r23
    22f6:	0c f4       	brge	.+2      	; 0x22fa <__stack+0xfb>
    22f8:	66 c0       	rjmp	.+204    	; 0x23c6 <__stack+0x1c7>
    22fa:	80 ec       	ldi	r24, 0xC0	; 192
    22fc:	9d e5       	ldi	r25, 0x5D	; 93
    22fe:	90 93 eb 03 	sts	0x03EB, r25
    2302:	80 93 ea 03 	sts	0x03EA, r24
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	92 e0       	ldi	r25, 0x02	; 2
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2318:	24 3b       	cpi	r18, 0xB4	; 180
    231a:	31 05       	cpc	r19, r1
    231c:	94 f4       	brge	.+36     	; 0x2342 <__stack+0x143>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    231e:	2a 35       	cpi	r18, 0x5A	; 90
    2320:	31 05       	cpc	r19, r1
    2322:	7c f4       	brge	.+30     	; 0x2342 <__stack+0x143>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2324:	18 16       	cp	r1, r24
    2326:	19 06       	cpc	r1, r25
    2328:	0c f0       	brlt	.+2      	; 0x232c <__stack+0x12d>
    232a:	93 c0       	rjmp	.+294    	; 0x2452 <__stack+0x253>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    232c:	35 95       	asr	r19
    232e:	27 95       	ror	r18
    2330:	35 95       	asr	r19
    2332:	27 95       	ror	r18
    2334:	27 5e       	subi	r18, 0xE7	; 231
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	30 93 0e 02 	sts	0x020E, r19
    233c:	20 93 0d 02 	sts	0x020D, r18
    2340:	77 cf       	rjmp	.-274    	; 0x2230 <__stack+0x31>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
    2342:	18 16       	cp	r1, r24
    2344:	19 06       	cpc	r1, r25
    2346:	94 f5       	brge	.+100    	; 0x23ac <__stack+0x1ad>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2348:	84 eb       	ldi	r24, 0xB4	; 180
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	82 1b       	sub	r24, r18
    234e:	93 0b       	sbc	r25, r19
    2350:	95 95       	asr	r25
    2352:	87 95       	ror	r24
    2354:	95 95       	asr	r25
    2356:	87 95       	ror	r24
    2358:	49 96       	adiw	r24, 0x19	; 25
    235a:	90 93 0e 02 	sts	0x020E, r25
    235e:	80 93 0d 02 	sts	0x020D, r24
    2362:	66 cf       	rjmp	.-308    	; 0x2230 <__stack+0x31>


void start_vertical_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    2364:	10 92 f5 03 	sts	0x03F5, r1
    2368:	10 92 f4 03 	sts	0x03F4, r1
		delta_right_speed_current = 0;
    236c:	10 92 59 04 	sts	0x0459, r1
    2370:	10 92 58 04 	sts	0x0458, r1
		delta_right_speed_prev = 0;
    2374:	10 92 39 04 	sts	0x0439, r1
    2378:	10 92 38 04 	sts	0x0438, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2386:	69 ef       	ldi	r22, 0xF9	; 249
    2388:	20 3c       	cpi	r18, 0xC0	; 192
    238a:	36 07       	cpc	r19, r22
    238c:	4c f4       	brge	.+18     	; 0x23a0 <__stack+0x1a1>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    238e:	20 ec       	ldi	r18, 0xC0	; 192
    2390:	39 ef       	ldi	r19, 0xF9	; 249
    2392:	30 93 f5 03 	sts	0x03F5, r19
    2396:	20 93 f4 03 	sts	0x03F4, r18
    239a:	60 e4       	ldi	r22, 0x40	; 64
    239c:	7d ee       	ldi	r23, 0xED	; 237
    239e:	77 cf       	rjmp	.-274    	; 0x228e <__stack+0x8f>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    23a0:	b9 01       	movw	r22, r18
    23a2:	66 0f       	add	r22, r22
    23a4:	77 1f       	adc	r23, r23
    23a6:	62 0f       	add	r22, r18
    23a8:	73 1f       	adc	r23, r19
    23aa:	71 cf       	rjmp	.-286    	; 0x228e <__stack+0x8f>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    23ac:	84 eb       	ldi	r24, 0xB4	; 180
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	31 cf       	rjmp	.-414    	; 0x2214 <__stack+0x15>
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	97 fd       	sbrc	r25, 7
    23b8:	06 c0       	rjmp	.+12     	; 0x23c6 <__stack+0x1c7>
		pwm_right_speed_controller = 0;
    23ba:	10 92 eb 03 	sts	0x03EB, r1
    23be:	10 92 ea 03 	sts	0x03EA, r1
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    23c6:	82 ea       	ldi	r24, 0xA2	; 162
    23c8:	20 34       	cpi	r18, 0x40	; 64
    23ca:	38 07       	cpc	r19, r24
    23cc:	04 f5       	brge	.+64     	; 0x240e <__stack+0x20f>
    23ce:	80 e4       	ldi	r24, 0x40	; 64
    23d0:	92 ea       	ldi	r25, 0xA2	; 162
    23d2:	90 93 eb 03 	sts	0x03EB, r25
    23d6:	80 93 ea 03 	sts	0x03EA, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	9e ef       	ldi	r25, 0xFE	; 254
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24

}
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	08 95       	ret

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    23ec:	80 91 dc 03 	lds	r24, 0x03DC
    23f0:	90 91 dd 03 	lds	r25, 0x03DD
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	90 93 59 04 	sts	0x0459, r25
    23fc:	80 93 58 04 	sts	0x0458, r24
    2400:	2f cf       	rjmp	.-418    	; 0x2260 <__stack+0x61>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2402:	10 92 eb 03 	sts	0x03EB, r1
    2406:	10 92 ea 03 	sts	0x03EA, r1
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    240e:	35 95       	asr	r19
    2410:	27 95       	ror	r18
    2412:	35 95       	asr	r19
    2414:	27 95       	ror	r18
    2416:	35 95       	asr	r19
    2418:	27 95       	ror	r18
    241a:	35 95       	asr	r19
    241c:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    241e:	31 83       	std	Z+1, r19	; 0x01
    2420:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2422:	42 e0       	ldi	r20, 0x02	; 2
    2424:	21 30       	cpi	r18, 0x01	; 1
    2426:	34 07       	cpc	r19, r20
    2428:	0c f0       	brlt	.+2      	; 0x242c <__stack+0x22d>
    242a:	6d cf       	rjmp	.-294    	; 0x2306 <__stack+0x107>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    242c:	6e ef       	ldi	r22, 0xFE	; 254
    242e:	20 30       	cpi	r18, 0x00	; 0
    2430:	36 07       	cpc	r19, r22
    2432:	9c f2       	brlt	.-90     	; 0x23da <__stack+0x1db>
    2434:	6c cf       	rjmp	.-296    	; 0x230e <__stack+0x10f>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2436:	88 e6       	ldi	r24, 0x68	; 104
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	82 1b       	sub	r24, r18
    243c:	93 0b       	sbc	r25, r19
    243e:	95 95       	asr	r25
    2440:	87 95       	ror	r24
    2442:	95 95       	asr	r25
    2444:	87 95       	ror	r24
    2446:	49 96       	adiw	r24, 0x19	; 25
    2448:	90 93 0e 02 	sts	0x020E, r25
    244c:	80 93 0d 02 	sts	0x020D, r24
    2450:	ef ce       	rjmp	.-546    	; 0x2230 <__stack+0x31>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2452:	35 95       	asr	r19
    2454:	27 95       	ror	r18
    2456:	35 95       	asr	r19
    2458:	27 95       	ror	r18
    245a:	89 e1       	ldi	r24, 0x19	; 25
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	82 1b       	sub	r24, r18
    2460:	93 0b       	sbc	r25, r19
    2462:	90 93 0e 02 	sts	0x020E, r25
    2466:	80 93 0d 02 	sts	0x020D, r24
    246a:	e2 ce       	rjmp	.-572    	; 0x2230 <__stack+0x31>

0000246c <start_orizzontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_right(signed int *pwm_right) {
    246c:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    246e:	80 81       	ld	r24, Z
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	09 f4       	brne	.+2      	; 0x2478 <start_orizzontal_speed_control_right+0xc>
    2476:	7b c0       	rjmp	.+246    	; 0x256e <start_orizzontal_speed_control_right+0x102>
		delta_right_speed_current = 0;
		delta_right_speed_prev = 0;
		return;
	}

	delta_right_speed_prev = delta_right_speed_current;
    2478:	a0 91 58 04 	lds	r26, 0x0458
    247c:	b0 91 59 04 	lds	r27, 0x0459
    2480:	b0 93 39 04 	sts	0x0439, r27
    2484:	a0 93 38 04 	sts	0x0438, r26
	if(*pwm_right >= 0) {
    2488:	20 81       	ld	r18, Z
    248a:	31 81       	ldd	r19, Z+1	; 0x01
    248c:	37 fd       	sbrc	r19, 7
    248e:	89 c0       	rjmp	.+274    	; 0x25a2 <start_orizzontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2490:	80 91 dc 03 	lds	r24, 0x03DC
    2494:	90 91 dd 03 	lds	r25, 0x03DD
    2498:	a9 01       	movw	r20, r18
    249a:	48 1b       	sub	r20, r24
    249c:	59 0b       	sbc	r21, r25
    249e:	ca 01       	movw	r24, r20
    24a0:	50 93 59 04 	sts	0x0459, r21
    24a4:	40 93 58 04 	sts	0x0458, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    24a8:	20 91 f4 03 	lds	r18, 0x03F4
    24ac:	30 91 f5 03 	lds	r19, 0x03F5
    24b0:	28 0f       	add	r18, r24
    24b2:	39 1f       	adc	r19, r25
    24b4:	30 93 f5 03 	sts	0x03F5, r19
    24b8:	20 93 f4 03 	sts	0x03F4, r18

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
    24bc:	56 e0       	ldi	r21, 0x06	; 6
    24be:	21 34       	cpi	r18, 0x41	; 65
    24c0:	35 07       	cpc	r19, r21
    24c2:	0c f4       	brge	.+2      	; 0x24c6 <start_orizzontal_speed_control_right+0x5a>
    24c4:	61 c0       	rjmp	.+194    	; 0x2588 <start_orizzontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
    24c6:	20 e4       	ldi	r18, 0x40	; 64
    24c8:	36 e0       	ldi	r19, 0x06	; 6
    24ca:	30 93 f5 03 	sts	0x03F5, r19
    24ce:	20 93 f4 03 	sts	0x03F4, r18
    24d2:	60 e8       	ldi	r22, 0x80	; 128
    24d4:	7c e0       	ldi	r23, 0x0C	; 12
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
    24d6:	9c 01       	movw	r18, r24
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	28 0f       	add	r18, r24
    24de:	39 1f       	adc	r19, r25
    24e0:	22 0f       	add	r18, r18
    24e2:	33 1f       	adc	r19, r19
    24e4:	22 0f       	add	r18, r18
    24e6:	33 1f       	adc	r19, r19
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	28 0f       	add	r18, r24
    24ee:	39 1f       	adc	r19, r25
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
    24f0:	40 81       	ld	r20, Z
    24f2:	51 81       	ldd	r21, Z+1	; 0x01
    24f4:	44 0f       	add	r20, r20
    24f6:	55 1f       	adc	r21, r21
    24f8:	44 0f       	add	r20, r20
    24fa:	55 1f       	adc	r21, r21
    24fc:	44 0f       	add	r20, r20
    24fe:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
    2500:	24 0f       	add	r18, r20
    2502:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
    2504:	ad 01       	movw	r20, r26
    2506:	48 1b       	sub	r20, r24
    2508:	59 0b       	sbc	r21, r25
    250a:	ca 01       	movw	r24, r20
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	84 0f       	add	r24, r20
    2512:	95 1f       	adc	r25, r21
    2514:	28 0f       	add	r18, r24
    2516:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_ORIZZONTAL);
    2518:	26 0f       	add	r18, r22
    251a:	37 1f       	adc	r19, r23
    251c:	30 93 eb 03 	sts	0x03EB, r19
    2520:	20 93 ea 03 	sts	0x03EA, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2524:	37 fd       	sbrc	r19, 7
    2526:	4c c0       	rjmp	.+152    	; 0x25c0 <start_orizzontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2528:	12 16       	cp	r1, r18
    252a:	13 06       	cpc	r1, r19
    252c:	0c f0       	brlt	.+2      	; 0x2530 <start_orizzontal_speed_control_right+0xc4>
    252e:	52 c0       	rjmp	.+164    	; 0x25d4 <start_orizzontal_speed_control_right+0x168>
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	97 fd       	sbrc	r25, 7
    2536:	67 c0       	rjmp	.+206    	; 0x2606 <start_orizzontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2538:	5d e5       	ldi	r21, 0x5D	; 93
    253a:	21 3c       	cpi	r18, 0xC1	; 193
    253c:	35 07       	cpc	r19, r21
    253e:	0c f4       	brge	.+2      	; 0x2542 <start_orizzontal_speed_control_right+0xd6>
    2540:	49 c0       	rjmp	.+146    	; 0x25d4 <start_orizzontal_speed_control_right+0x168>
    2542:	80 ec       	ldi	r24, 0xC0	; 192
    2544:	9d e5       	ldi	r25, 0x5D	; 93
    2546:	90 93 eb 03 	sts	0x03EB, r25
    254a:	80 93 ea 03 	sts	0x03EA, r24
    254e:	2c ed       	ldi	r18, 0xDC	; 220
    2550:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(*pwm_right > 0) {
		*pwm_right += 30;
    2552:	22 5e       	subi	r18, 0xE2	; 226
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	31 83       	std	Z+1, r19	; 0x01
    2558:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    255a:	42 e0       	ldi	r20, 0x02	; 2
    255c:	21 30       	cpi	r18, 0x01	; 1
    255e:	34 07       	cpc	r19, r20
    2560:	0c f4       	brge	.+2      	; 0x2564 <start_orizzontal_speed_control_right+0xf8>
    2562:	48 c0       	rjmp	.+144    	; 0x25f4 <start_orizzontal_speed_control_right+0x188>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	92 e0       	ldi	r25, 0x02	; 2
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	08 95       	ret
}

void start_orizzontal_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    256e:	10 92 f5 03 	sts	0x03F5, r1
    2572:	10 92 f4 03 	sts	0x03F4, r1
		delta_right_speed_current = 0;
    2576:	10 92 59 04 	sts	0x0459, r1
    257a:	10 92 58 04 	sts	0x0458, r1
		delta_right_speed_prev = 0;
    257e:	10 92 39 04 	sts	0x0439, r1
    2582:	10 92 38 04 	sts	0x0438, r1
		return;
    2586:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2588:	49 ef       	ldi	r20, 0xF9	; 249
    258a:	20 3c       	cpi	r18, 0xC0	; 192
    258c:	34 07       	cpc	r19, r20
    258e:	a4 f4       	brge	.+40     	; 0x25b8 <start_orizzontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
    2590:	20 ec       	ldi	r18, 0xC0	; 192
    2592:	39 ef       	ldi	r19, 0xF9	; 249
    2594:	30 93 f5 03 	sts	0x03F5, r19
    2598:	20 93 f4 03 	sts	0x03F4, r18
    259c:	60 e8       	ldi	r22, 0x80	; 128
    259e:	73 ef       	ldi	r23, 0xF3	; 243
    25a0:	9a cf       	rjmp	.-204    	; 0x24d6 <start_orizzontal_speed_control_right+0x6a>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    25a2:	80 91 dc 03 	lds	r24, 0x03DC
    25a6:	90 91 dd 03 	lds	r25, 0x03DD
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	90 93 59 04 	sts	0x0459, r25
    25b2:	80 93 58 04 	sts	0x0458, r24
    25b6:	78 cf       	rjmp	.-272    	; 0x24a8 <start_orizzontal_speed_control_right+0x3c>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    25b8:	b9 01       	movw	r22, r18
    25ba:	66 0f       	add	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	8b cf       	rjmp	.-234    	; 0x24d6 <start_orizzontal_speed_control_right+0x6a>
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_ORIZZONTAL);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	97 fd       	sbrc	r25, 7
    25c6:	06 c0       	rjmp	.+12     	; 0x25d4 <start_orizzontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    25c8:	10 92 eb 03 	sts	0x03EB, r1
    25cc:	10 92 ea 03 	sts	0x03EA, r1
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    25d4:	82 ea       	ldi	r24, 0xA2	; 162
    25d6:	20 34       	cpi	r18, 0x40	; 64
    25d8:	38 07       	cpc	r19, r24
    25da:	dc f4       	brge	.+54     	; 0x2612 <start_orizzontal_speed_control_right+0x1a6>
    25dc:	80 e4       	ldi	r24, 0x40	; 64
    25de:	92 ea       	ldi	r25, 0xA2	; 162
    25e0:	90 93 eb 03 	sts	0x03EB, r25
    25e4:	80 93 ea 03 	sts	0x03EA, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    25e8:	24 e2       	ldi	r18, 0x24	; 36
    25ea:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    25ec:	2e 51       	subi	r18, 0x1E	; 30
    25ee:	30 40       	sbci	r19, 0x00	; 0
    25f0:	31 83       	std	Z+1, r19	; 0x01
    25f2:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    25f4:	5e ef       	ldi	r21, 0xFE	; 254
    25f6:	20 30       	cpi	r18, 0x00	; 0
    25f8:	35 07       	cpc	r19, r21
    25fa:	24 f4       	brge	.+8      	; 0x2604 <start_orizzontal_speed_control_right+0x198>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	9e ef       	ldi	r25, 0xFE	; 254
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	08 95       	ret

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2606:	10 92 eb 03 	sts	0x03EB, r1
    260a:	10 92 ea 03 	sts	0x03EA, r1
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2612:	35 95       	asr	r19
    2614:	27 95       	ror	r18
    2616:	35 95       	asr	r19
    2618:	27 95       	ror	r18
    261a:	35 95       	asr	r19
    261c:	27 95       	ror	r18
    261e:	35 95       	asr	r19
    2620:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    2622:	31 83       	std	Z+1, r19	; 0x01
    2624:	20 83       	st	Z, r18
	if(*pwm_right > 0) {
    2626:	12 16       	cp	r1, r18
    2628:	13 06       	cpc	r1, r19
    262a:	0c f4       	brge	.+2      	; 0x262e <start_orizzontal_speed_control_right+0x1c2>
    262c:	92 cf       	rjmp	.-220    	; 0x2552 <start_orizzontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    262e:	21 15       	cp	r18, r1
    2630:	31 05       	cpc	r19, r1
    2632:	e1 f6       	brne	.-72     	; 0x25ec <start_orizzontal_speed_control_right+0x180>
    2634:	08 95       	ret

00002636 <start_orizzontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_left(signed int *pwm_left) {
    2636:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	09 f4       	brne	.+2      	; 0x2642 <start_orizzontal_speed_control_left+0xc>
    2640:	7b c0       	rjmp	.+246    	; 0x2738 <start_orizzontal_speed_control_left+0x102>
		delta_left_speed_current = 0;
		delta_left_speed_prev = 0;
		return;
	}

	delta_left_speed_prev = delta_left_speed_current; 
    2642:	a0 91 36 04 	lds	r26, 0x0436
    2646:	b0 91 37 04 	lds	r27, 0x0437
    264a:	b0 93 51 04 	sts	0x0451, r27
    264e:	a0 93 50 04 	sts	0x0450, r26
	if(*pwm_left >= 0) {
    2652:	20 81       	ld	r18, Z
    2654:	31 81       	ldd	r19, Z+1	; 0x01
    2656:	37 fd       	sbrc	r19, 7
    2658:	89 c0       	rjmp	.+274    	; 0x276c <start_orizzontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    265a:	80 91 da 03 	lds	r24, 0x03DA
    265e:	90 91 db 03 	lds	r25, 0x03DB
    2662:	a9 01       	movw	r20, r18
    2664:	48 1b       	sub	r20, r24
    2666:	59 0b       	sbc	r21, r25
    2668:	ca 01       	movw	r24, r20
    266a:	50 93 37 04 	sts	0x0437, r21
    266e:	40 93 36 04 	sts	0x0436, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    2672:	20 91 f2 03 	lds	r18, 0x03F2
    2676:	30 91 f3 03 	lds	r19, 0x03F3
    267a:	28 0f       	add	r18, r24
    267c:	39 1f       	adc	r19, r25
    267e:	30 93 f3 03 	sts	0x03F3, r19
    2682:	20 93 f2 03 	sts	0x03F2, r18

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
    2686:	56 e0       	ldi	r21, 0x06	; 6
    2688:	21 34       	cpi	r18, 0x41	; 65
    268a:	35 07       	cpc	r19, r21
    268c:	0c f4       	brge	.+2      	; 0x2690 <start_orizzontal_speed_control_left+0x5a>
    268e:	61 c0       	rjmp	.+194    	; 0x2752 <start_orizzontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
    2690:	20 e4       	ldi	r18, 0x40	; 64
    2692:	36 e0       	ldi	r19, 0x06	; 6
    2694:	30 93 f3 03 	sts	0x03F3, r19
    2698:	20 93 f2 03 	sts	0x03F2, r18
    269c:	60 e8       	ldi	r22, 0x80	; 128
    269e:	7c e0       	ldi	r23, 0x0C	; 12
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
    26a0:	9c 01       	movw	r18, r24
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	28 0f       	add	r18, r24
    26a8:	39 1f       	adc	r19, r25
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	22 0f       	add	r18, r18
    26b4:	33 1f       	adc	r19, r19
    26b6:	28 0f       	add	r18, r24
    26b8:	39 1f       	adc	r19, r25
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
    26ba:	40 81       	ld	r20, Z
    26bc:	51 81       	ldd	r21, Z+1	; 0x01
    26be:	44 0f       	add	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	44 0f       	add	r20, r20
    26c4:	55 1f       	adc	r21, r21
    26c6:	44 0f       	add	r20, r20
    26c8:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
    26ca:	24 0f       	add	r18, r20
    26cc:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
    26ce:	ad 01       	movw	r20, r26
    26d0:	48 1b       	sub	r20, r24
    26d2:	59 0b       	sbc	r21, r25
    26d4:	ca 01       	movw	r24, r20
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	84 0f       	add	r24, r20
    26dc:	95 1f       	adc	r25, r21
    26de:	28 0f       	add	r18, r24
    26e0:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_ORIZZONTAL);
    26e2:	26 0f       	add	r18, r22
    26e4:	37 1f       	adc	r19, r23
    26e6:	30 93 ed 03 	sts	0x03ED, r19
    26ea:	20 93 ec 03 	sts	0x03EC, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    26ee:	37 fd       	sbrc	r19, 7
    26f0:	4c c0       	rjmp	.+152    	; 0x278a <start_orizzontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    26f2:	12 16       	cp	r1, r18
    26f4:	13 06       	cpc	r1, r19
    26f6:	0c f0       	brlt	.+2      	; 0x26fa <start_orizzontal_speed_control_left+0xc4>
    26f8:	52 c0       	rjmp	.+164    	; 0x279e <start_orizzontal_speed_control_left+0x168>
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	97 fd       	sbrc	r25, 7
    2700:	67 c0       	rjmp	.+206    	; 0x27d0 <start_orizzontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2702:	5d e5       	ldi	r21, 0x5D	; 93
    2704:	21 3c       	cpi	r18, 0xC1	; 193
    2706:	35 07       	cpc	r19, r21
    2708:	0c f4       	brge	.+2      	; 0x270c <start_orizzontal_speed_control_left+0xd6>
    270a:	49 c0       	rjmp	.+146    	; 0x279e <start_orizzontal_speed_control_left+0x168>
    270c:	80 ec       	ldi	r24, 0xC0	; 192
    270e:	9d e5       	ldi	r25, 0x5D	; 93
    2710:	90 93 ed 03 	sts	0x03ED, r25
    2714:	80 93 ec 03 	sts	0x03EC, r24
    2718:	2c ed       	ldi	r18, 0xDC	; 220
    271a:	35 e0       	ldi	r19, 0x05	; 5
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
	if(*pwm_left > 0) {
		*pwm_left += 30;
    271c:	22 5e       	subi	r18, 0xE2	; 226
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	31 83       	std	Z+1, r19	; 0x01
    2722:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2724:	42 e0       	ldi	r20, 0x02	; 2
    2726:	21 30       	cpi	r18, 0x01	; 1
    2728:	34 07       	cpc	r19, r20
    272a:	0c f4       	brge	.+2      	; 0x272e <start_orizzontal_speed_control_left+0xf8>
    272c:	48 c0       	rjmp	.+144    	; 0x27be <start_orizzontal_speed_control_left+0x188>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	92 e0       	ldi	r25, 0x02	; 2
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	08 95       	ret
}

void start_orizzontal_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    2738:	10 92 f3 03 	sts	0x03F3, r1
    273c:	10 92 f2 03 	sts	0x03F2, r1
		delta_left_speed_current = 0;
    2740:	10 92 37 04 	sts	0x0437, r1
    2744:	10 92 36 04 	sts	0x0436, r1
		delta_left_speed_prev = 0;
    2748:	10 92 51 04 	sts	0x0451, r1
    274c:	10 92 50 04 	sts	0x0450, r1
		return;
    2750:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2752:	49 ef       	ldi	r20, 0xF9	; 249
    2754:	20 3c       	cpi	r18, 0xC0	; 192
    2756:	34 07       	cpc	r19, r20
    2758:	a4 f4       	brge	.+40     	; 0x2782 <start_orizzontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
    275a:	20 ec       	ldi	r18, 0xC0	; 192
    275c:	39 ef       	ldi	r19, 0xF9	; 249
    275e:	30 93 f3 03 	sts	0x03F3, r19
    2762:	20 93 f2 03 	sts	0x03F2, r18
    2766:	60 e8       	ldi	r22, 0x80	; 128
    2768:	73 ef       	ldi	r23, 0xF3	; 243
    276a:	9a cf       	rjmp	.-204    	; 0x26a0 <start_orizzontal_speed_control_left+0x6a>

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    276c:	80 91 da 03 	lds	r24, 0x03DA
    2770:	90 91 db 03 	lds	r25, 0x03DB
    2774:	82 0f       	add	r24, r18
    2776:	93 1f       	adc	r25, r19
    2778:	90 93 37 04 	sts	0x0437, r25
    277c:	80 93 36 04 	sts	0x0436, r24
    2780:	78 cf       	rjmp	.-272    	; 0x2672 <start_orizzontal_speed_control_left+0x3c>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2782:	b9 01       	movw	r22, r18
    2784:	66 0f       	add	r22, r22
    2786:	77 1f       	adc	r23, r23
    2788:	8b cf       	rjmp	.-234    	; 0x26a0 <start_orizzontal_speed_control_left+0x6a>
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_ORIZZONTAL);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	97 fd       	sbrc	r25, 7
    2790:	06 c0       	rjmp	.+12     	; 0x279e <start_orizzontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2792:	10 92 ed 03 	sts	0x03ED, r1
    2796:	10 92 ec 03 	sts	0x03EC, r1
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    279e:	82 ea       	ldi	r24, 0xA2	; 162
    27a0:	20 34       	cpi	r18, 0x40	; 64
    27a2:	38 07       	cpc	r19, r24
    27a4:	dc f4       	brge	.+54     	; 0x27dc <start_orizzontal_speed_control_left+0x1a6>
    27a6:	80 e4       	ldi	r24, 0x40	; 64
    27a8:	92 ea       	ldi	r25, 0xA2	; 162
    27aa:	90 93 ed 03 	sts	0x03ED, r25
    27ae:	80 93 ec 03 	sts	0x03EC, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    27b2:	24 e2       	ldi	r18, 0x24	; 36
    27b4:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    27b6:	2e 51       	subi	r18, 0x1E	; 30
    27b8:	30 40       	sbci	r19, 0x00	; 0
    27ba:	31 83       	std	Z+1, r19	; 0x01
    27bc:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    27be:	5e ef       	ldi	r21, 0xFE	; 254
    27c0:	20 30       	cpi	r18, 0x00	; 0
    27c2:	35 07       	cpc	r19, r21
    27c4:	24 f4       	brge	.+8      	; 0x27ce <start_orizzontal_speed_control_left+0x198>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	9e ef       	ldi	r25, 0xFE	; 254
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	08 95       	ret

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    27d0:	10 92 ed 03 	sts	0x03ED, r1
    27d4:	10 92 ec 03 	sts	0x03EC, r1
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    27dc:	35 95       	asr	r19
    27de:	27 95       	ror	r18
    27e0:	35 95       	asr	r19
    27e2:	27 95       	ror	r18
    27e4:	35 95       	asr	r19
    27e6:	27 95       	ror	r18
    27e8:	35 95       	asr	r19
    27ea:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    27ec:	31 83       	std	Z+1, r19	; 0x01
    27ee:	20 83       	st	Z, r18
	if(*pwm_left > 0) {
    27f0:	12 16       	cp	r1, r18
    27f2:	13 06       	cpc	r1, r19
    27f4:	0c f4       	brge	.+2      	; 0x27f8 <start_orizzontal_speed_control_left+0x1c2>
    27f6:	92 cf       	rjmp	.-220    	; 0x271c <start_orizzontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    27f8:	21 15       	cp	r18, r1
    27fa:	31 05       	cpc	r19, r1
    27fc:	e1 f6       	brne	.-72     	; 0x27b6 <start_orizzontal_speed_control_left+0x180>
    27fe:	08 95       	ret

00002800 <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    2804:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2806:	97 ef       	ldi	r25, 0xF7	; 247
    2808:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    280a:	90 ee       	ldi	r25, 0xE0	; 224
    280c:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    280e:	90 ef       	ldi	r25, 0xF0	; 240
    2810:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    2812:	90 eb       	ldi	r25, 0xB0	; 176
    2814:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2816:	9c ef       	ldi	r25, 0xFC	; 252
    2818:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    281a:	93 e0       	ldi	r25, 0x03	; 3
    281c:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    281e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2820:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    2822:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    2824:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    2826:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    2828:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    282c:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    2830:	9f e8       	ldi	r25, 0x8F	; 143
    2832:	90 93 04 01 	sts	0x0104, r25
	#endif
	#ifdef HE_REV_3_1
	PORTJ = 0x0F;
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    2836:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    283a:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    283e:	10 92 0b 01 	sts	0x010B, r1

		
}
    2842:	08 95       	ret

00002844 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    2844:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2848:	10 92 bc 00 	sts	0x00BC, r1
}
    284c:	08 95       	ret

0000284e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    284e:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2850:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2852:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2856:	80 e2       	ldi	r24, 0x20	; 32
    2858:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    285c:	08 95       	ret

0000285e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    285e:	94 ea       	ldi	r25, 0xA4	; 164
    2860:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2864:	90 91 bc 00 	lds	r25, 0x00BC
    2868:	97 ff       	sbrs	r25, 7
    286a:	fc cf       	rjmp	.-8      	; 0x2864 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    286c:	90 91 b9 00 	lds	r25, 0x00B9
    2870:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2872:	98 30       	cpi	r25, 0x08	; 8
    2874:	21 f0       	breq	.+8      	; 0x287e <i2c_start+0x20>
    2876:	90 31       	cpi	r25, 0x10	; 16
    2878:	11 f0       	breq	.+4      	; 0x287e <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    287e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2882:	84 e8       	ldi	r24, 0x84	; 132
    2884:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2888:	80 91 bc 00 	lds	r24, 0x00BC
    288c:	87 ff       	sbrs	r24, 7
    288e:	fc cf       	rjmp	.-8      	; 0x2888 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2890:	90 91 b9 00 	lds	r25, 0x00B9
    2894:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2896:	98 31       	cpi	r25, 0x18	; 24
    2898:	21 f0       	breq	.+8      	; 0x28a2 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 34       	cpi	r25, 0x40	; 64
    289e:	19 f0       	breq	.+6      	; 0x28a6 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    28a0:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    28a2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    28a4:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	08 95       	ret

000028aa <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    28aa:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    28ac:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    28ae:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    28b0:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    28b4:	90 91 bc 00 	lds	r25, 0x00BC
    28b8:	97 ff       	sbrs	r25, 7
    28ba:	fc cf       	rjmp	.-8      	; 0x28b4 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    28bc:	90 91 b9 00 	lds	r25, 0x00B9
    28c0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    28c2:	98 30       	cpi	r25, 0x08	; 8
    28c4:	11 f0       	breq	.+4      	; 0x28ca <i2c_start_wait+0x20>
    28c6:	90 31       	cpi	r25, 0x10	; 16
    28c8:	99 f7       	brne	.-26     	; 0x28b0 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    28ca:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    28ce:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    28d2:	90 91 bc 00 	lds	r25, 0x00BC
    28d6:	97 ff       	sbrs	r25, 7
    28d8:	fc cf       	rjmp	.-8      	; 0x28d2 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    28da:	90 91 b9 00 	lds	r25, 0x00B9
    28de:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    28e0:	90 32       	cpi	r25, 0x20	; 32
    28e2:	19 f0       	breq	.+6      	; 0x28ea <i2c_start_wait+0x40>
    28e4:	98 35       	cpi	r25, 0x58	; 88
    28e6:	09 f0       	breq	.+2      	; 0x28ea <i2c_start_wait+0x40>
    28e8:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    28ea:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    28ee:	90 91 bc 00 	lds	r25, 0x00BC
    28f2:	94 fd       	sbrc	r25, 4
    28f4:	fc cf       	rjmp	.-8      	; 0x28ee <i2c_start_wait+0x44>
    28f6:	dc cf       	rjmp	.-72     	; 0x28b0 <i2c_start_wait+0x6>

000028f8 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    28f8:	94 ea       	ldi	r25, 0xA4	; 164
    28fa:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    28fe:	90 91 bc 00 	lds	r25, 0x00BC
    2902:	97 ff       	sbrs	r25, 7
    2904:	fc cf       	rjmp	.-8      	; 0x28fe <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2906:	90 91 b9 00 	lds	r25, 0x00B9
    290a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    290c:	98 30       	cpi	r25, 0x08	; 8
    290e:	21 f0       	breq	.+8      	; 0x2918 <i2c_rep_start+0x20>
    2910:	90 31       	cpi	r25, 0x10	; 16
    2912:	11 f0       	breq	.+4      	; 0x2918 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2918:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    291c:	84 e8       	ldi	r24, 0x84	; 132
    291e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2922:	80 91 bc 00 	lds	r24, 0x00BC
    2926:	87 ff       	sbrs	r24, 7
    2928:	fc cf       	rjmp	.-8      	; 0x2922 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    292a:	90 91 b9 00 	lds	r25, 0x00B9
    292e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2930:	98 31       	cpi	r25, 0x18	; 24
    2932:	21 f0       	breq	.+8      	; 0x293c <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 34       	cpi	r25, 0x40	; 64
    2938:	19 f0       	breq	.+6      	; 0x2940 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    293a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    293c:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    293e:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	08 95       	ret

00002944 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2944:	84 e9       	ldi	r24, 0x94	; 148
    2946:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    294a:	80 91 bc 00 	lds	r24, 0x00BC
    294e:	84 fd       	sbrc	r24, 4
    2950:	fc cf       	rjmp	.-8      	; 0x294a <i2c_stop+0x6>

}/* i2c_stop */
    2952:	08 95       	ret

00002954 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2954:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2958:	84 e8       	ldi	r24, 0x84	; 132
    295a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    295e:	80 91 bc 00 	lds	r24, 0x00BC
    2962:	87 ff       	sbrs	r24, 7
    2964:	fc cf       	rjmp	.-8      	; 0x295e <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2966:	90 91 b9 00 	lds	r25, 0x00B9
    296a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	98 32       	cpi	r25, 0x28	; 40
    2970:	09 f0       	breq	.+2      	; 0x2974 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2972:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2974:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2976:	08 95       	ret

00002978 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2978:	84 ec       	ldi	r24, 0xC4	; 196
    297a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    297e:	80 91 bc 00 	lds	r24, 0x00BC
    2982:	87 ff       	sbrs	r24, 7
    2984:	fc cf       	rjmp	.-8      	; 0x297e <i2c_readAck+0x6>

    return TWDR;
    2986:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    298a:	08 95       	ret

0000298c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    298c:	84 e8       	ldi	r24, 0x84	; 132
    298e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2992:	80 91 bc 00 	lds	r24, 0x00BC
    2996:	87 ff       	sbrs	r24, 7
    2998:	fc cf       	rjmp	.-8      	; 0x2992 <i2c_readNak+0x6>
	
    return TWDR;
    299a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    299e:	08 95       	ret

000029a0 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    29a0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    29a4:	80 e1       	ldi	r24, 0x10	; 16
    29a6:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    29aa:	e0 ec       	ldi	r30, 0xC0	; 192
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	82 60       	ori	r24, 0x02	; 2
    29b2:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    29b4:	e1 ec       	ldi	r30, 0xC1	; 193
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	88 69       	ori	r24, 0x98	; 152
    29bc:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    29be:	e2 ec       	ldi	r30, 0xC2	; 194
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	86 60       	ori	r24, 0x06	; 6
    29c6:	80 83       	st	Z, r24

}
    29c8:	08 95       	ret

000029ca <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;
    29ca:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    29ce:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    29d2:	10 92 c2 00 	sts	0x00C2, r1

}
    29d6:	08 95       	ret

000029d8 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    29d8:	90 91 c0 00 	lds	r25, 0x00C0
    29dc:	95 ff       	sbrs	r25, 5
    29de:	fc cf       	rjmp	.-8      	; 0x29d8 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    29e0:	80 93 c6 00 	sts	0x00C6, r24

}
    29e4:	08 95       	ret

000029e6 <__vector_25>:

ISR(USART0_RX_vect) {
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	2f 93       	push	r18
    29f2:	8f 93       	push	r24
    29f4:	9f 93       	push	r25

	char receivedByte = UDR0;
    29f6:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    29fa:	90 91 16 02 	lds	r25, 0x0216
    29fe:	99 23       	and	r25, r25
    2a00:	b9 f0       	breq	.+46     	; 0x2a30 <__vector_25+0x4a>
		switch(receivedByte) {
    2a02:	82 33       	cpi	r24, 0x32	; 50
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <__vector_25+0x22>
    2a06:	5b c0       	rjmp	.+182    	; 0x2abe <__vector_25+0xd8>
    2a08:	83 33       	cpi	r24, 0x33	; 51
    2a0a:	80 f5       	brcc	.+96     	; 0x2a6c <__vector_25+0x86>
    2a0c:	80 33       	cpi	r24, 0x30	; 48
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <__vector_25+0x2c>
    2a10:	7e c0       	rjmp	.+252    	; 0x2b0e <__vector_25+0x128>
    2a12:	81 33       	cpi	r24, 0x31	; 49
    2a14:	29 f4       	brne	.+10     	; 0x2a20 <__vector_25+0x3a>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    2a1c:	10 92 16 02 	sts	0x0216, r1

	}



}
    2a20:	9f 91       	pop	r25
    2a22:	8f 91       	pop	r24
    2a24:	2f 91       	pop	r18
    2a26:	0f 90       	pop	r0
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	0f 90       	pop	r0
    2a2c:	1f 90       	pop	r1
    2a2e:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2a30:	90 91 15 02 	lds	r25, 0x0215
    2a34:	92 30       	cpi	r25, 0x02	; 2
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <__vector_25+0x54>
    2a38:	48 c0       	rjmp	.+144    	; 0x2aca <__vector_25+0xe4>
    2a3a:	93 30       	cpi	r25, 0x03	; 3
    2a3c:	40 f1       	brcs	.+80     	; 0x2a8e <__vector_25+0xa8>
    2a3e:	94 30       	cpi	r25, 0x04	; 4
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <__vector_25+0x5e>
    2a42:	8c c0       	rjmp	.+280    	; 0x2b5c <__vector_25+0x176>
    2a44:	94 30       	cpi	r25, 0x04	; 4
    2a46:	08 f4       	brcc	.+2      	; 0x2a4a <__vector_25+0x64>
    2a48:	73 c0       	rjmp	.+230    	; 0x2b30 <__vector_25+0x14a>
    2a4a:	95 30       	cpi	r25, 0x05	; 5
    2a4c:	49 f7       	brne	.-46     	; 0x2a20 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    2a4e:	83 37       	cpi	r24, 0x73	; 115
    2a50:	39 f7       	brne	.-50     	; 0x2a20 <__vector_25+0x3a>
					sendAdcValues = 0;
    2a52:	10 92 04 04 	sts	0x0404, r1
					choosePeripheral = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	80 93 16 02 	sts	0x0216, r24

	}



}
    2a5c:	9f 91       	pop	r25
    2a5e:	8f 91       	pop	r24
    2a60:	2f 91       	pop	r18
    2a62:	0f 90       	pop	r0
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	0f 90       	pop	r0
    2a68:	1f 90       	pop	r1
    2a6a:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    2a6c:	84 33       	cpi	r24, 0x34	; 52
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <__vector_25+0x8c>
    2a70:	59 c0       	rjmp	.+178    	; 0x2b24 <__vector_25+0x13e>
    2a72:	84 33       	cpi	r24, 0x34	; 52
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <__vector_25+0x92>
    2a76:	50 c0       	rjmp	.+160    	; 0x2b18 <__vector_25+0x132>
    2a78:	85 33       	cpi	r24, 0x35	; 53
    2a7a:	91 f6       	brne	.-92     	; 0x2a20 <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2a7c:	85 e0       	ldi	r24, 0x05	; 5
    2a7e:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    2a82:	10 92 16 02 	sts	0x0216, r1
				sendAdcValues = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 04 04 	sts	0x0404, r24
				break;
    2a8c:	c9 cf       	rjmp	.-110    	; 0x2a20 <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2a8e:	99 23       	and	r25, r25
    2a90:	91 f5       	brne	.+100    	; 0x2af6 <__vector_25+0x110>
			case 0:	// red led
				if(receivedByte == '-') {
    2a92:	8d 32       	cpi	r24, 0x2D	; 45
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <__vector_25+0xb2>
    2a96:	d5 c0       	rjmp	.+426    	; 0x2c42 <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2a98:	8b 32       	cpi	r24, 0x2B	; 43
    2a9a:	e9 f6       	brne	.-70     	; 0x2a56 <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2a9c:	80 91 12 02 	lds	r24, 0x0212
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2aa4:	97 fd       	sbrc	r25, 7
    2aa6:	3f c1       	rjmp	.+638    	; 0x2d26 <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2aa8:	80 93 12 02 	sts	0x0212, r24
					if(pwm_red == 0) {
    2aac:	88 23       	and	r24, r24
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <__vector_25+0xcc>
    2ab0:	3c c1       	rjmp	.+632    	; 0x2d2a <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	90 93 89 00 	sts	0x0089, r25
    2ab8:	80 93 88 00 	sts	0x0088, r24
    2abc:	b1 cf       	rjmp	.-158    	; 0x2a20 <__vector_25+0x3a>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    2ac4:	10 92 16 02 	sts	0x0216, r1
				break;
    2ac8:	ab cf       	rjmp	.-170    	; 0x2a20 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2aca:	8d 32       	cpi	r24, 0x2D	; 45
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <__vector_25+0xea>
    2ace:	e8 c0       	rjmp	.+464    	; 0x2ca0 <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2ad0:	8b 32       	cpi	r24, 0x2B	; 43
    2ad2:	09 f6       	brne	.-126    	; 0x2a56 <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2ad4:	80 91 14 02 	lds	r24, 0x0214
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2adc:	97 fd       	sbrc	r25, 7
    2ade:	35 c1       	rjmp	.+618    	; 0x2d4a <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2ae0:	80 93 14 02 	sts	0x0214, r24
					if(pwm_blue == 0) {
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <__vector_25+0x104>
    2ae8:	32 c1       	rjmp	.+612    	; 0x2d4e <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	90 93 8d 00 	sts	0x008D, r25
    2af0:	80 93 8c 00 	sts	0x008C, r24
    2af4:	95 cf       	rjmp	.-214    	; 0x2a20 <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2af6:	91 30       	cpi	r25, 0x01	; 1
    2af8:	09 f0       	breq	.+2      	; 0x2afc <__vector_25+0x116>
    2afa:	92 cf       	rjmp	.-220    	; 0x2a20 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2afc:	8d 32       	cpi	r24, 0x2D	; 45
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <__vector_25+0x11c>
    2b00:	89 c0       	rjmp	.+274    	; 0x2c14 <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2b02:	8b 32       	cpi	r24, 0x2B	; 43
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <__vector_25+0x122>
    2b06:	3f c0       	rjmp	.+126    	; 0x2b86 <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2b08:	90 93 16 02 	sts	0x0216, r25
    2b0c:	89 cf       	rjmp	.-238    	; 0x2a20 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2b0e:	10 92 15 02 	sts	0x0215, r1
				choosePeripheral = 0;
    2b12:	10 92 16 02 	sts	0x0216, r1
				break;
    2b16:	84 cf       	rjmp	.-248    	; 0x2a20 <__vector_25+0x3a>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    2b1e:	10 92 16 02 	sts	0x0216, r1
				break;
    2b22:	7e cf       	rjmp	.-260    	; 0x2a20 <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    2b2a:	10 92 16 02 	sts	0x0216, r1
				break;
    2b2e:	78 cf       	rjmp	.-272    	; 0x2a20 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    2b30:	8b 32       	cpi	r24, 0x2B	; 43
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <__vector_25+0x150>
    2b34:	cc c0       	rjmp	.+408    	; 0x2cce <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    2b36:	8d 32       	cpi	r24, 0x2D	; 45
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <__vector_25+0x156>
    2b3a:	51 c0       	rjmp	.+162    	; 0x2bde <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2b3c:	83 37       	cpi	r24, 0x73	; 115
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <__vector_25+0x15c>
    2b40:	8a cf       	rjmp	.-236    	; 0x2a56 <__vector_25+0x70>
					pwm_right = 0;
    2b42:	10 92 df 03 	sts	0x03DF, r1
    2b46:	10 92 de 03 	sts	0x03DE, r1
					OCR3A = 0;
    2b4a:	10 92 99 00 	sts	0x0099, r1
    2b4e:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2b52:	10 92 9b 00 	sts	0x009B, r1
    2b56:	10 92 9a 00 	sts	0x009A, r1
    2b5a:	62 cf       	rjmp	.-316    	; 0x2a20 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    2b5c:	8b 32       	cpi	r24, 0x2B	; 43
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <__vector_25+0x17c>
    2b60:	87 c0       	rjmp	.+270    	; 0x2c70 <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2b62:	8d 32       	cpi	r24, 0x2D	; 45
    2b64:	09 f1       	breq	.+66     	; 0x2ba8 <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2b66:	83 37       	cpi	r24, 0x73	; 115
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <__vector_25+0x186>
    2b6a:	75 cf       	rjmp	.-278    	; 0x2a56 <__vector_25+0x70>
					pwm_left = 0;
    2b6c:	10 92 e1 03 	sts	0x03E1, r1
    2b70:	10 92 e0 03 	sts	0x03E0, r1
					OCR4A = 0;
    2b74:	10 92 a9 00 	sts	0x00A9, r1
    2b78:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2b7c:	10 92 ab 00 	sts	0x00AB, r1
    2b80:	10 92 aa 00 	sts	0x00AA, r1
    2b84:	4d cf       	rjmp	.-358    	; 0x2a20 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2b86:	80 91 13 02 	lds	r24, 0x0213
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2b8e:	97 fd       	sbrc	r25, 7
    2b90:	d3 c0       	rjmp	.+422    	; 0x2d38 <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2b92:	80 93 13 02 	sts	0x0213, r24
					if(pwm_green == 0) {
    2b96:	88 23       	and	r24, r24
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <__vector_25+0x1b6>
    2b9a:	d0 c0       	rjmp	.+416    	; 0x2d3c <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	90 93 8b 00 	sts	0x008B, r25
    2ba2:	80 93 8a 00 	sts	0x008A, r24
    2ba6:	3c cf       	rjmp	.-392    	; 0x2a20 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2ba8:	80 91 e0 03 	lds	r24, 0x03E0
    2bac:	90 91 e1 03 	lds	r25, 0x03E1
    2bb0:	4e 97       	sbiw	r24, 0x1e	; 30
    2bb2:	90 93 e1 03 	sts	0x03E1, r25
    2bb6:	80 93 e0 03 	sts	0x03E0, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2bba:	2c ef       	ldi	r18, 0xFC	; 252
    2bbc:	80 30       	cpi	r24, 0x00	; 0
    2bbe:	92 07       	cpc	r25, r18
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <__vector_25+0x1de>
    2bc2:	cc c0       	rjmp	.+408    	; 0x2d5c <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	9c ef       	ldi	r25, 0xFC	; 252
    2bc8:	90 93 e1 03 	sts	0x03E1, r25
    2bcc:	80 93 e0 03 	sts	0x03E0, r24
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2bd4:	90 93 ab 00 	sts	0x00AB, r25
    2bd8:	80 93 aa 00 	sts	0x00AA, r24
    2bdc:	21 cf       	rjmp	.-446    	; 0x2a20 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2bde:	80 91 de 03 	lds	r24, 0x03DE
    2be2:	90 91 df 03 	lds	r25, 0x03DF
    2be6:	4e 97       	sbiw	r24, 0x1e	; 30
    2be8:	90 93 df 03 	sts	0x03DF, r25
    2bec:	80 93 de 03 	sts	0x03DE, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2bf0:	2c ef       	ldi	r18, 0xFC	; 252
    2bf2:	80 30       	cpi	r24, 0x00	; 0
    2bf4:	92 07       	cpc	r25, r18
    2bf6:	0c f0       	brlt	.+2      	; 0x2bfa <__vector_25+0x214>
    2bf8:	b7 c0       	rjmp	.+366    	; 0x2d68 <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	9c ef       	ldi	r25, 0xFC	; 252
    2bfe:	90 93 df 03 	sts	0x03DF, r25
    2c02:	80 93 de 03 	sts	0x03DE, r24
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2c0a:	90 93 9b 00 	sts	0x009B, r25
    2c0e:	80 93 9a 00 	sts	0x009A, r24
    2c12:	06 cf       	rjmp	.-500    	; 0x2a20 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2c14:	80 91 80 00 	lds	r24, 0x0080
    2c18:	80 62       	ori	r24, 0x20	; 32
    2c1a:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2c1e:	80 91 13 02 	lds	r24, 0x0213
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2c26:	8f 3f       	cpi	r24, 0xFF	; 255
    2c28:	91 05       	cpc	r25, r1
    2c2a:	19 f0       	breq	.+6      	; 0x2c32 <__vector_25+0x24c>
    2c2c:	14 f0       	brlt	.+4      	; 0x2c32 <__vector_25+0x24c>
    2c2e:	8f ef       	ldi	r24, 0xFF	; 255
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	80 93 13 02 	sts	0x0213, r24
					OCR1B = pwm_green;
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	90 93 8b 00 	sts	0x008B, r25
    2c3c:	80 93 8a 00 	sts	0x008A, r24
    2c40:	ef ce       	rjmp	.-546    	; 0x2a20 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2c42:	80 91 80 00 	lds	r24, 0x0080
    2c46:	80 68       	ori	r24, 0x80	; 128
    2c48:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2c4c:	80 91 12 02 	lds	r24, 0x0212
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2c54:	8f 3f       	cpi	r24, 0xFF	; 255
    2c56:	91 05       	cpc	r25, r1
    2c58:	19 f0       	breq	.+6      	; 0x2c60 <__vector_25+0x27a>
    2c5a:	14 f0       	brlt	.+4      	; 0x2c60 <__vector_25+0x27a>
    2c5c:	8f ef       	ldi	r24, 0xFF	; 255
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	80 93 12 02 	sts	0x0212, r24
					OCR1A = pwm_red;
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	90 93 89 00 	sts	0x0089, r25
    2c6a:	80 93 88 00 	sts	0x0088, r24
    2c6e:	d8 ce       	rjmp	.-592    	; 0x2a20 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2c70:	80 91 e0 03 	lds	r24, 0x03E0
    2c74:	90 91 e1 03 	lds	r25, 0x03E1
    2c78:	4e 96       	adiw	r24, 0x1e	; 30
    2c7a:	90 93 e1 03 	sts	0x03E1, r25
    2c7e:	80 93 e0 03 	sts	0x03E0, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    2c82:	24 e0       	ldi	r18, 0x04	; 4
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	92 07       	cpc	r25, r18
    2c88:	d4 f1       	brlt	.+116    	; 0x2cfe <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	94 e0       	ldi	r25, 0x04	; 4
    2c8e:	90 93 e1 03 	sts	0x03E1, r25
    2c92:	80 93 e0 03 	sts	0x03E0, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2c96:	90 93 a9 00 	sts	0x00A9, r25
    2c9a:	80 93 a8 00 	sts	0x00A8, r24
    2c9e:	c0 ce       	rjmp	.-640    	; 0x2a20 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2ca0:	80 91 80 00 	lds	r24, 0x0080
    2ca4:	88 60       	ori	r24, 0x08	; 8
    2ca6:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2caa:	80 91 14 02 	lds	r24, 0x0214
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	19 f0       	breq	.+6      	; 0x2cbe <__vector_25+0x2d8>
    2cb8:	14 f0       	brlt	.+4      	; 0x2cbe <__vector_25+0x2d8>
    2cba:	8f ef       	ldi	r24, 0xFF	; 255
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	80 93 14 02 	sts	0x0214, r24
					OCR1C = pwm_blue;
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	90 93 8d 00 	sts	0x008D, r25
    2cc8:	80 93 8c 00 	sts	0x008C, r24
    2ccc:	a9 ce       	rjmp	.-686    	; 0x2a20 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2cce:	80 91 de 03 	lds	r24, 0x03DE
    2cd2:	90 91 df 03 	lds	r25, 0x03DF
    2cd6:	4e 96       	adiw	r24, 0x1e	; 30
    2cd8:	90 93 df 03 	sts	0x03DF, r25
    2cdc:	80 93 de 03 	sts	0x03DE, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    2ce0:	24 e0       	ldi	r18, 0x04	; 4
    2ce2:	81 30       	cpi	r24, 0x01	; 1
    2ce4:	92 07       	cpc	r25, r18
    2ce6:	ac f0       	brlt	.+42     	; 0x2d12 <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	94 e0       	ldi	r25, 0x04	; 4
    2cec:	90 93 df 03 	sts	0x03DF, r25
    2cf0:	80 93 de 03 	sts	0x03DE, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2cf4:	90 93 99 00 	sts	0x0099, r25
    2cf8:	80 93 98 00 	sts	0x0098, r24
    2cfc:	91 ce       	rjmp	.-734    	; 0x2a20 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2cfe:	97 ff       	sbrs	r25, 7
    2d00:	ca cf       	rjmp	.-108    	; 0x2c96 <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2d02:	90 95       	com	r25
    2d04:	81 95       	neg	r24
    2d06:	9f 4f       	sbci	r25, 0xFF	; 255
    2d08:	90 93 ab 00 	sts	0x00AB, r25
    2d0c:	80 93 aa 00 	sts	0x00AA, r24
    2d10:	87 ce       	rjmp	.-754    	; 0x2a20 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2d12:	97 ff       	sbrs	r25, 7
    2d14:	ef cf       	rjmp	.-34     	; 0x2cf4 <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    2d16:	90 95       	com	r25
    2d18:	81 95       	neg	r24
    2d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1c:	90 93 9b 00 	sts	0x009B, r25
    2d20:	80 93 9a 00 	sts	0x009A, r24
    2d24:	7d ce       	rjmp	.-774    	; 0x2a20 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2d26:	10 92 12 02 	sts	0x0212, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2d2a:	80 91 80 00 	lds	r24, 0x0080
    2d2e:	8f 77       	andi	r24, 0x7F	; 127
    2d30:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    2d34:	2d 98       	cbi	0x05, 5	; 5
    2d36:	74 ce       	rjmp	.-792    	; 0x2a20 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2d38:	10 92 13 02 	sts	0x0213, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2d3c:	80 91 80 00 	lds	r24, 0x0080
    2d40:	8f 7d       	andi	r24, 0xDF	; 223
    2d42:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2d46:	2e 98       	cbi	0x05, 6	; 5
    2d48:	6b ce       	rjmp	.-810    	; 0x2a20 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2d4a:	10 92 14 02 	sts	0x0214, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2d4e:	80 91 80 00 	lds	r24, 0x0080
    2d52:	87 7f       	andi	r24, 0xF7	; 247
    2d54:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    2d58:	2f 98       	cbi	0x05, 7	; 5
    2d5a:	62 ce       	rjmp	.-828    	; 0x2a20 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2d5c:	97 ff       	sbrs	r25, 7
    2d5e:	9b cf       	rjmp	.-202    	; 0x2c96 <__vector_25+0x2b0>
						OCR4A = pwm_left;
    2d60:	90 95       	com	r25
    2d62:	81 95       	neg	r24
    2d64:	9f 4f       	sbci	r25, 0xFF	; 255
    2d66:	36 cf       	rjmp	.-404    	; 0x2bd4 <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2d68:	97 ff       	sbrs	r25, 7
    2d6a:	c4 cf       	rjmp	.-120    	; 0x2cf4 <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2d6c:	90 95       	com	r25
    2d6e:	81 95       	neg	r24
    2d70:	9f 4f       	sbci	r25, 0xFF	; 255
    2d72:	4b cf       	rjmp	.-362    	; 0x2c0a <__vector_25+0x224>

00002d74 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2d74:	86 b1       	in	r24, 0x06	; 6
    2d76:	66 b1       	in	r22, 0x06	; 6
    2d78:	26 b1       	in	r18, 0x06	; 6
    2d7a:	46 b1       	in	r20, 0x06	; 6
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	28 70       	andi	r18, 0x08	; 8
    2d80:	30 70       	andi	r19, 0x00	; 0
    2d82:	35 95       	asr	r19
    2d84:	27 95       	ror	r18
    2d86:	35 95       	asr	r19
    2d88:	27 95       	ror	r18
    2d8a:	35 95       	asr	r19
    2d8c:	27 95       	ror	r18
    2d8e:	22 0f       	add	r18, r18
    2d90:	33 1f       	adc	r19, r19
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	64 70       	andi	r22, 0x04	; 4
    2d96:	70 70       	andi	r23, 0x00	; 0
    2d98:	75 95       	asr	r23
    2d9a:	67 95       	ror	r22
    2d9c:	75 95       	asr	r23
    2d9e:	67 95       	ror	r22
    2da0:	26 0f       	add	r18, r22
    2da2:	37 1f       	adc	r19, r23
    2da4:	22 0f       	add	r18, r18
    2da6:	33 1f       	adc	r19, r19
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	42 70       	andi	r20, 0x02	; 2
    2dac:	50 70       	andi	r21, 0x00	; 0
    2dae:	55 95       	asr	r21
    2db0:	47 95       	ror	r20
    2db2:	24 0f       	add	r18, r20
    2db4:	35 1f       	adc	r19, r21
    2db6:	22 0f       	add	r18, r18
    2db8:	81 70       	andi	r24, 0x01	; 1
}
    2dba:	82 0f       	add	r24, r18
    2dbc:	08 95       	ret

00002dbe <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2dbe:	f8 94       	cli

	initPortsIO();
    2dc0:	0e 94 00 14 	call	0x2800	; 0x2800 <initPortsIO>
	initAdc();
    2dc4:	0e 94 c8 19 	call	0x3390	; 0x3390 <initAdc>
	initMotors();
    2dc8:	0e 94 9d 1b 	call	0x373a	; 0x373a <initMotors>
	initRGBleds();
    2dcc:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <initRGBleds>
	initSPI();
    2dd0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <initSPI>
	mirf_init();
    2dd4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <mirf_init>
	initUsart();
    2dd8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <initUsart>
	initAccelerometer();
    2ddc:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <initAccelerometer>
	e_init_remote_control();
    2de0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <e_init_remote_control>

	sei();			// enable global interrupts
    2de4:	78 94       	sei

	
}
    2de6:	08 95       	ret

00002de8 <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2de8:	1f 92       	push	r1
    2dea:	0f 92       	push	r0
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	0f 92       	push	r0
    2df0:	11 24       	eor	r1, r1

}
    2df2:	0f 90       	pop	r0
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	0f 90       	pop	r0
    2df8:	1f 90       	pop	r1
    2dfa:	18 95       	reti

00002dfc <sleep>:

void sleep(unsigned char seconds) {
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2e00:	9e e1       	ldi	r25, 0x1E	; 30
    2e02:	89 9f       	mul	r24, r25
    2e04:	e0 01       	movw	r28, r0
    2e06:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2e08:	80 91 68 00 	lds	r24, 0x0068
    2e0c:	8d 7f       	andi	r24, 0xFD	; 253
    2e0e:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2e12:	80 91 6c 00 	lds	r24, 0x006C
    2e16:	8f 77       	andi	r24, 0x7F	; 127
    2e18:	80 93 6c 00 	sts	0x006C, r24

	// disable adc
	ADCSRA = 0x00;	// disable interrupt and turn off adc
    2e1c:	10 92 7a 00 	sts	0x007A, r1

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2e20:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2e24:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2e28:	10 92 71 00 	sts	0x0071, r1
	TCCR4A = 0x00;
    2e2c:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2e30:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2e34:	10 92 72 00 	sts	0x0072, r1

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2e38:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2e3c:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2e40:	0e 94 e5 14 	call	0x29ca	; 0x29ca <closeUsart>
	closeSPI();
    2e44:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <closeSPI>
	i2c_close();
    2e48:	0e 94 22 14 	call	0x2844	; 0x2844 <i2c_close>

	// set port pins
	initPortsIO();
    2e4c:	0e 94 00 14 	call	0x2800	; 0x2800 <initPortsIO>
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7);
	PORTC &= ~(1 << 7); // sleep pin
    2e50:	47 98       	cbi	0x08, 7	; 8
	//PORTB &= ~(1 << 4);	// radio CE pin
	PORTD = 0x00;	// I2C and uart pins to 0
    2e52:	1b b8       	out	0x0b, r1	; 11

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2e5a:	80 91 b0 00 	lds	r24, 0x00B0
    2e5e:	8d 7f       	andi	r24, 0xFD	; 253
    2e60:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2e64:	80 91 b1 00 	lds	r24, 0x00B1
    2e68:	87 60       	ori	r24, 0x07	; 7
    2e6a:	80 93 b1 00 	sts	0x00B1, r24

	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
    2e6e:	83 b7       	in	r24, 0x33	; 51
    2e70:	85 60       	ori	r24, 0x05	; 5
    2e72:	83 bf       	out	0x33, r24	; 51
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
    2e74:	20 97       	sbiw	r28, 0x00	; 0
    2e76:	19 f0       	breq	.+6      	; 0x2e7e <sleep+0x82>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2e78:	88 95       	sleep
		pause--;
    2e7a:	21 97       	sbiw	r28, 0x01	; 1
	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
    2e7c:	e9 f7       	brne	.-6      	; 0x2e78 <sleep+0x7c>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2e7e:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2e80:	80 91 b1 00 	lds	r24, 0x00B1
    2e84:	88 7f       	andi	r24, 0xF8	; 248
    2e86:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    2e8a:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2e8e:	80 91 b0 00 	lds	r24, 0x00B0
    2e92:	82 60       	ori	r24, 0x02	; 2
    2e94:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2e98:	8f ef       	ldi	r24, 0xFF	; 255
    2e9a:	80 93 12 02 	sts	0x0212, r24
	pwm_green = 255;
    2e9e:	80 93 13 02 	sts	0x0213, r24
	pwm_blue = 255;
    2ea2:	80 93 14 02 	sts	0x0214, r24
	pwm_right = 0;
    2ea6:	10 92 df 03 	sts	0x03DF, r1
    2eaa:	10 92 de 03 	sts	0x03DE, r1
	pwm_left = 0;
    2eae:	10 92 e1 03 	sts	0x03E1, r1
    2eb2:	10 92 e0 03 	sts	0x03E0, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2eb6:	f8 94       	cli

	initPortsIO();
    2eb8:	0e 94 00 14 	call	0x2800	; 0x2800 <initPortsIO>
	initAdc();
    2ebc:	0e 94 c8 19 	call	0x3390	; 0x3390 <initAdc>
	initMotors();
    2ec0:	0e 94 9d 1b 	call	0x373a	; 0x373a <initMotors>
	initRGBleds();
    2ec4:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <initRGBleds>
	initSPI();
    2ec8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <initSPI>
	mirf_init();
    2ecc:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <mirf_init>
	initUsart();
    2ed0:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <initUsart>
	initAccelerometer();
    2ed4:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <initAccelerometer>
	e_init_remote_control();
    2ed8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <e_init_remote_control>

	sei();			// enable global interrupts
    2edc:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <initAccelerometer>:
void initAccelerometer() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
    2ee4:	0e 94 27 14 	call	0x284e	; 0x284e <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2ee8:	80 91 19 02 	lds	r24, 0x0219
    2eec:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2ef0:	88 23       	and	r24, r24
    2ef2:	49 f4       	brne	.+18     	; 0x2f06 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    2ef4:	86 e1       	ldi	r24, 0x16	; 22
    2ef6:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
    2efa:	85 e4       	ldi	r24, 0x45	; 69
    2efc:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2f00:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    2f04:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
    2f06:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    2f0a:	86 ea       	ldi	r24, 0xA6	; 166
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	90 93 1a 02 	sts	0x021A, r25
    2f12:	80 93 19 02 	sts	0x0219, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2f16:	86 ea       	ldi	r24, 0xA6	; 166
    2f18:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2f1c:	88 23       	and	r24, r24
    2f1e:	41 f5       	brne	.+80     	; 0x2f70 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
    2f20:	8d e2       	ldi	r24, 0x2D	; 45
    2f22:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
    2f26:	88 e0       	ldi	r24, 0x08	; 8
    2f28:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2f2c:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2f30:	80 91 19 02 	lds	r24, 0x0219
    2f34:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2f38:	88 23       	and	r24, r24
    2f3a:	d1 f4       	brne	.+52     	; 0x2f70 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    2f3c:	81 e3       	ldi	r24, 0x31	; 49
    2f3e:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2f48:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2f4c:	80 91 19 02 	lds	r24, 0x0219
    2f50:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2f54:	88 23       	and	r24, r24
    2f56:	61 f4       	brne	.+24     	; 0x2f70 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
    2f58:	8c e2       	ldi	r24, 0x2C	; 44
    2f5a:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
    2f5e:	89 e0       	ldi	r24, 0x09	; 9
    2f60:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2f64:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	80 93 09 04 	sts	0x0409, r24
    2f6e:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
    2f70:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	80 93 09 04 	sts	0x0409, r24
    2f7a:	08 95       	ret

00002f7c <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2f7c:	80 91 19 02 	lds	r24, 0x0219
    2f80:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2f84:	88 23       	and	r24, r24
    2f86:	51 f4       	brne	.+20     	; 0x2f9c <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    2f88:	86 e1       	ldi	r24, 0x16	; 22
    2f8a:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
    2f8e:	85 e4       	ldi	r24, 0x45	; 69
    2f90:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2f94:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    }

	return 0;
    2f98:	80 e0       	ldi	r24, 0x00	; 0

}
    2f9a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
    2f9c:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
		return 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	08 95       	ret

00002fa4 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2fa4:	80 91 19 02 	lds	r24, 0x0219
    2fa8:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2fac:	88 23       	and	r24, r24
    2fae:	31 f5       	brne	.+76     	; 0x2ffc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
    2fb0:	8d e2       	ldi	r24, 0x2D	; 45
    2fb2:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
    2fb6:	88 e0       	ldi	r24, 0x08	; 8
    2fb8:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2fbc:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2fc0:	80 91 19 02 	lds	r24, 0x0219
    2fc4:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2fc8:	88 23       	and	r24, r24
    2fca:	c1 f4       	brne	.+48     	; 0x2ffc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    2fcc:	81 e3       	ldi	r24, 0x31	; 49
    2fce:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2fd8:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    2fdc:	80 91 19 02 	lds	r24, 0x0219
    2fe0:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
    2fe4:	88 23       	and	r24, r24
    2fe6:	51 f4       	brne	.+20     	; 0x2ffc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
    2fe8:	8c e2       	ldi	r24, 0x2C	; 44
    2fea:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
    2fee:	89 e0       	ldi	r24, 0x09	; 9
    2ff0:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2ff4:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
    }

	return 0;
    2ff8:	80 e0       	ldi	r24, 0x00	; 0

}
    2ffa:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
    2ffc:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>
		return 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	08 95       	ret

00003004 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    3004:	ff 92       	push	r15
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	0f 92       	push	r0
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];


	if(useAccel == USE_MMAX7455L) {
    3014:	80 91 09 04 	lds	r24, 0x0409
    3018:	88 23       	and	r24, r24
    301a:	91 f0       	breq	.+36     	; 0x3040 <readAccelXY+0x3c>
		if(accY & 0x02000) {
			accY |= 0xFC00;
		}
*/

	} else if(useAccel == USE_ADXL345) {
    301c:	81 30       	cpi	r24, 0x01	; 1
    301e:	09 f4       	brne	.+2      	; 0x3022 <readAccelXY+0x1e>
    3020:	88 c0       	rjmp	.+272    	; 0x3132 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
		}

	} else {

		accX = 0;
    3022:	10 92 0b 04 	sts	0x040B, r1
    3026:	10 92 0a 04 	sts	0x040A, r1
		accY = 0;
    302a:	10 92 0d 04 	sts	0x040D, r1
    302e:	10 92 0c 04 	sts	0x040C, r1

	}


}
    3032:	0f 90       	pop	r0
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
    3040:	80 91 19 02 	lds	r24, 0x0219
    3044:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
		i2c_write(0x00);							// sends address to read from
    3048:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
    304a:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
    304e:	80 91 19 02 	lds	r24, 0x0219
    3052:	8f 5f       	subi	r24, 0xFF	; 255
    3054:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
    3058:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    305c:	08 2f       	mov	r16, r24
    305e:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    3062:	f8 2e       	mov	r15, r24
    3064:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    3068:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
    306a:	0e 94 c6 14 	call	0x298c	; 0x298c <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>

		if(startCalibration) {
    3074:	90 91 29 04 	lds	r25, 0x0429
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	99 23       	and	r25, r25
    307c:	39 f1       	breq	.+78     	; 0x30cc <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    // X axis
    307e:	4f 2d       	mov	r20, r15
    3080:	55 27       	eor	r21, r21
    3082:	47 fd       	sbrc	r20, 7
    3084:	50 95       	com	r21
    3086:	54 2f       	mov	r21, r20
    3088:	44 27       	eor	r20, r20
    308a:	60 2f       	mov	r22, r16
    308c:	77 27       	eor	r23, r23
    308e:	67 fd       	sbrc	r22, 7
    3090:	70 95       	com	r23
    3092:	46 2b       	or	r20, r22
    3094:	57 2b       	or	r21, r23
    3096:	50 93 0b 04 	sts	0x040B, r21
    309a:	40 93 0a 04 	sts	0x040A, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    // Y axis
    309e:	28 2f       	mov	r18, r24
    30a0:	33 27       	eor	r19, r19
    30a2:	27 fd       	sbrc	r18, 7
    30a4:	30 95       	com	r19
    30a6:	32 2f       	mov	r19, r18
    30a8:	22 27       	eor	r18, r18
    30aa:	81 2f       	mov	r24, r17
    30ac:	99 27       	eor	r25, r25
    30ae:	87 fd       	sbrc	r24, 7
    30b0:	90 95       	com	r25
    30b2:	28 2b       	or	r18, r24
    30b4:	39 2b       	or	r19, r25
    30b6:	30 93 0d 04 	sts	0x040D, r19
    30ba:	20 93 0c 04 	sts	0x040C, r18
		accY = 0;

	}


}
    30be:	0f 90       	pop	r0
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    30c8:	ff 90       	pop	r15
    30ca:	08 95       	ret

		if(startCalibration) {
			accX = ((signed int)buff[1]<<8)|buff[0];    // X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    // Y axis
		} else {
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;    // X axis
    30cc:	4f 2d       	mov	r20, r15
    30ce:	55 27       	eor	r21, r21
    30d0:	47 fd       	sbrc	r20, 7
    30d2:	50 95       	com	r21
    30d4:	54 2f       	mov	r21, r20
    30d6:	44 27       	eor	r20, r20
    30d8:	60 2f       	mov	r22, r16
    30da:	77 27       	eor	r23, r23
    30dc:	67 fd       	sbrc	r22, 7
    30de:	70 95       	com	r23
    30e0:	46 2b       	or	r20, r22
    30e2:	57 2b       	or	r21, r23
    30e4:	60 91 16 04 	lds	r22, 0x0416
    30e8:	70 91 17 04 	lds	r23, 0x0417
    30ec:	46 1b       	sub	r20, r22
    30ee:	57 0b       	sbc	r21, r23
    30f0:	50 93 0b 04 	sts	0x040B, r21
    30f4:	40 93 0a 04 	sts	0x040A, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
    30f8:	28 2f       	mov	r18, r24
    30fa:	33 27       	eor	r19, r19
    30fc:	27 fd       	sbrc	r18, 7
    30fe:	30 95       	com	r19
    3100:	32 2f       	mov	r19, r18
    3102:	22 27       	eor	r18, r18
    3104:	81 2f       	mov	r24, r17
    3106:	99 27       	eor	r25, r25
    3108:	87 fd       	sbrc	r24, 7
    310a:	90 95       	com	r25
    310c:	28 2b       	or	r18, r24
    310e:	39 2b       	or	r19, r25
    3110:	80 91 18 04 	lds	r24, 0x0418
    3114:	90 91 19 04 	lds	r25, 0x0419
    3118:	28 1b       	sub	r18, r24
    311a:	39 0b       	sbc	r19, r25
    311c:	30 93 0d 04 	sts	0x040D, r19
    3120:	20 93 0c 04 	sts	0x040C, r18
		accY = 0;

	}


}
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	08 95       	ret
*/

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
    3132:	80 91 19 02 	lds	r24, 0x0219
    3136:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
		i2c_write(0x32);							// sends address to read from
    313a:	82 e3       	ldi	r24, 0x32	; 50
    313c:	86 cf       	rjmp	.-244    	; 0x304a <readAccelXY+0x46>

0000313e <readAccelXYZ>:
	}


}

void readAccelXYZ() {
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	00 d0       	rcall	.+0      	; 0x3144 <readAccelXYZ+0x6>
    3144:	00 d0       	rcall	.+0      	; 0x3146 <readAccelXYZ+0x8>
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    314a:	80 91 09 04 	lds	r24, 0x0409
    314e:	88 23       	and	r24, r24
    3150:	c1 f0       	breq	.+48     	; 0x3182 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;    // X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;    // Z axis
		}

	} else if(useAccel == USE_ADXL345) {	
    3152:	81 30       	cpi	r24, 0x01	; 1
    3154:	09 f4       	brne	.+2      	; 0x3158 <readAccelXYZ+0x1a>
    3156:	ad c0       	rjmp	.+346    	; 0x32b2 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;    // Z axis
		}

	} else {

		accX = 0;
    3158:	10 92 0b 04 	sts	0x040B, r1
    315c:	10 92 0a 04 	sts	0x040A, r1
		accY = 0;
    3160:	10 92 0d 04 	sts	0x040D, r1
    3164:	10 92 0c 04 	sts	0x040C, r1
		accZ = 0;
    3168:	10 92 0f 04 	sts	0x040F, r1
    316c:	10 92 0e 04 	sts	0x040E, r1

	}

}
    3170:	26 96       	adiw	r28, 0x06	; 6
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
    3182:	80 91 19 02 	lds	r24, 0x0219
    3186:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
		i2c_write(0x00);							// sends address to read from
    318a:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
    318c:	0e 94 aa 14 	call	0x2954	; 0x2954 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
    3190:	80 91 19 02 	lds	r24, 0x0219
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
    319a:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    31a4:	8a 83       	std	Y+2, r24	; 0x02
    31a6:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    31aa:	8b 83       	std	Y+3, r24	; 0x03
    31ac:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    31b0:	8c 83       	std	Y+4, r24	; 0x04
    31b2:	0e 94 bc 14 	call	0x2978	; 0x2978 <i2c_readAck>
    31b6:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
    31b8:	0e 94 c6 14 	call	0x298c	; 0x298c <i2c_readNak>
    31bc:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
    31be:	0e 94 a2 14 	call	0x2944	; 0x2944 <i2c_stop>

		if(startCalibration) {
    31c2:	80 91 29 04 	lds	r24, 0x0429
    31c6:	88 23       	and	r24, r24
    31c8:	89 f1       	breq	.+98     	; 0x322c <readAccelXYZ+0xee>
			// 10 bits valus in 2's complement
			accX = ((signed int)buff[1]<<8)|buff[0];    // X axis
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	99 27       	eor	r25, r25
    31ce:	87 fd       	sbrc	r24, 7
    31d0:	90 95       	com	r25
    31d2:	98 2f       	mov	r25, r24
    31d4:	88 27       	eor	r24, r24
    31d6:	29 81       	ldd	r18, Y+1	; 0x01
    31d8:	33 27       	eor	r19, r19
    31da:	27 fd       	sbrc	r18, 7
    31dc:	30 95       	com	r19
    31de:	82 2b       	or	r24, r18
    31e0:	93 2b       	or	r25, r19
    31e2:	90 93 0b 04 	sts	0x040B, r25
    31e6:	80 93 0a 04 	sts	0x040A, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    // Y axis
    31ea:	8c 81       	ldd	r24, Y+4	; 0x04
    31ec:	99 27       	eor	r25, r25
    31ee:	87 fd       	sbrc	r24, 7
    31f0:	90 95       	com	r25
    31f2:	98 2f       	mov	r25, r24
    31f4:	88 27       	eor	r24, r24
    31f6:	2b 81       	ldd	r18, Y+3	; 0x03
    31f8:	33 27       	eor	r19, r19
    31fa:	27 fd       	sbrc	r18, 7
    31fc:	30 95       	com	r19
    31fe:	82 2b       	or	r24, r18
    3200:	93 2b       	or	r25, r19
    3202:	90 93 0d 04 	sts	0x040D, r25
    3206:	80 93 0c 04 	sts	0x040C, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    // Z axis
    320a:	8e 81       	ldd	r24, Y+6	; 0x06
    320c:	99 27       	eor	r25, r25
    320e:	87 fd       	sbrc	r24, 7
    3210:	90 95       	com	r25
    3212:	98 2f       	mov	r25, r24
    3214:	88 27       	eor	r24, r24
    3216:	2d 81       	ldd	r18, Y+5	; 0x05
    3218:	33 27       	eor	r19, r19
    321a:	27 fd       	sbrc	r18, 7
    321c:	30 95       	com	r19
    321e:	82 2b       	or	r24, r18
    3220:	93 2b       	or	r25, r19
    3222:	90 93 0f 04 	sts	0x040F, r25
    3226:	80 93 0e 04 	sts	0x040E, r24
    322a:	a2 cf       	rjmp	.-188    	; 0x3170 <readAccelXYZ+0x32>
		} else {
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;    // X axis
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	99 27       	eor	r25, r25
    3230:	87 fd       	sbrc	r24, 7
    3232:	90 95       	com	r25
    3234:	98 2f       	mov	r25, r24
    3236:	88 27       	eor	r24, r24
    3238:	29 81       	ldd	r18, Y+1	; 0x01
    323a:	33 27       	eor	r19, r19
    323c:	27 fd       	sbrc	r18, 7
    323e:	30 95       	com	r19
    3240:	82 2b       	or	r24, r18
    3242:	93 2b       	or	r25, r19
    3244:	20 91 16 04 	lds	r18, 0x0416
    3248:	30 91 17 04 	lds	r19, 0x0417
    324c:	82 1b       	sub	r24, r18
    324e:	93 0b       	sbc	r25, r19
    3250:	90 93 0b 04 	sts	0x040B, r25
    3254:	80 93 0a 04 	sts	0x040A, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	99 27       	eor	r25, r25
    325c:	87 fd       	sbrc	r24, 7
    325e:	90 95       	com	r25
    3260:	98 2f       	mov	r25, r24
    3262:	88 27       	eor	r24, r24
    3264:	2b 81       	ldd	r18, Y+3	; 0x03
    3266:	33 27       	eor	r19, r19
    3268:	27 fd       	sbrc	r18, 7
    326a:	30 95       	com	r19
    326c:	82 2b       	or	r24, r18
    326e:	93 2b       	or	r25, r19
    3270:	20 91 18 04 	lds	r18, 0x0418
    3274:	30 91 19 04 	lds	r19, 0x0419
    3278:	82 1b       	sub	r24, r18
    327a:	93 0b       	sbc	r25, r19
    327c:	90 93 0d 04 	sts	0x040D, r25
    3280:	80 93 0c 04 	sts	0x040C, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;    // Z axis
    3284:	8e 81       	ldd	r24, Y+6	; 0x06
    3286:	99 27       	eor	r25, r25
    3288:	87 fd       	sbrc	r24, 7
    328a:	90 95       	com	r25
    328c:	98 2f       	mov	r25, r24
    328e:	88 27       	eor	r24, r24
    3290:	2d 81       	ldd	r18, Y+5	; 0x05
    3292:	33 27       	eor	r19, r19
    3294:	27 fd       	sbrc	r18, 7
    3296:	30 95       	com	r19
    3298:	82 2b       	or	r24, r18
    329a:	93 2b       	or	r25, r19
    329c:	20 91 1a 04 	lds	r18, 0x041A
    32a0:	30 91 1b 04 	lds	r19, 0x041B
    32a4:	82 1b       	sub	r24, r18
    32a6:	93 0b       	sbc	r25, r19
    32a8:	90 93 0f 04 	sts	0x040F, r25
    32ac:	80 93 0e 04 	sts	0x040E, r24
    32b0:	5f cf       	rjmp	.-322    	; 0x3170 <readAccelXYZ+0x32>
		}

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
    32b2:	80 91 19 02 	lds	r24, 0x0219
    32b6:	0e 94 2f 14 	call	0x285e	; 0x285e <i2c_start>
		i2c_write(0x32);							// sends address to read from
    32ba:	82 e3       	ldi	r24, 0x32	; 50
    32bc:	67 cf       	rjmp	.-306    	; 0x318c <readAccelXYZ+0x4e>

000032be <computeAngle>:

	}

}

void computeAngle() {
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    32c6:	80 91 0e 04 	lds	r24, 0x040E
    32ca:	90 91 0f 04 	lds	r25, 0x040F
    32ce:	97 fd       	sbrc	r25, 7
    32d0:	5b c0       	rjmp	.+182    	; 0x3388 <computeAngle+0xca>

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
    32d2:	80 31       	cpi	r24, 0x10	; 16
    32d4:	91 05       	cpc	r25, r1
    32d6:	08 f0       	brcs	.+2      	; 0x32da <computeAngle+0x1c>
    32d8:	42 c0       	rjmp	.+132    	; 0x335e <computeAngle+0xa0>
		curr_position = ORIZZONTAL_POS;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	80 93 1b 02 	sts	0x021B, r24
	} else {
		curr_position = VERTICAL_POS;
	}

	if(prev_position == curr_position) {
    32e0:	90 91 1a 02 	lds	r25, 0x021A
    32e4:	98 17       	cp	r25, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <computeAngle+0x2c>
    32e8:	42 c0       	rjmp	.+132    	; 0x336e <computeAngle+0xb0>
		if(times_in_same_pos >= SAME_POS_NUM) {
			times_in_same_pos = 0;
			orizzontal_position = curr_position;	// 1 = orizzontal, 0 = vertical
		}
	} else {
		times_in_same_pos = 0;
    32ea:	10 92 24 04 	sts	0x0424, r1
	}

	prev_position = curr_position;
    32ee:	80 93 1a 02 	sts	0x021A, r24
		updateGreenLed(pwm_green);
		updateBlueLed(pwm_blue);
	}
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
    32f2:	60 91 0a 04 	lds	r22, 0x040A
    32f6:	70 91 0b 04 	lds	r23, 0x040B
    32fa:	88 27       	eor	r24, r24
    32fc:	77 fd       	sbrc	r23, 7
    32fe:	80 95       	com	r24
    3300:	98 2f       	mov	r25, r24
    3302:	0e 94 34 20 	call	0x4068	; 0x4068 <__floatsisf>
    3306:	7b 01       	movw	r14, r22
    3308:	8c 01       	movw	r16, r24
    330a:	60 91 0c 04 	lds	r22, 0x040C
    330e:	70 91 0d 04 	lds	r23, 0x040D
    3312:	88 27       	eor	r24, r24
    3314:	77 fd       	sbrc	r23, 7
    3316:	80 95       	com	r24
    3318:	98 2f       	mov	r25, r24
    331a:	0e 94 34 20 	call	0x4068	; 0x4068 <__floatsisf>
    331e:	9b 01       	movw	r18, r22
    3320:	ac 01       	movw	r20, r24
    3322:	c8 01       	movw	r24, r16
    3324:	b7 01       	movw	r22, r14
    3326:	0e 94 ef 22 	call	0x45de	; 0x45de <atan2>
    332a:	21 ee       	ldi	r18, 0xE1	; 225
    332c:	3e e2       	ldi	r19, 0x2E	; 46
    332e:	45 e6       	ldi	r20, 0x65	; 101
    3330:	52 e4       	ldi	r21, 0x42	; 66
    3332:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__mulsf3>
    3336:	0e 94 92 20 	call	0x4124	; 0x4124 <__fixsfsi>
    333a:	9b 01       	movw	r18, r22
    333c:	70 93 1d 04 	sts	0x041D, r23
    3340:	60 93 1c 04 	sts	0x041C, r22

	if(currentAngle < 0) {
    3344:	77 ff       	sbrs	r23, 7
    3346:	06 c0       	rjmp	.+12     	; 0x3354 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    3348:	28 59       	subi	r18, 0x98	; 152
    334a:	3e 4f       	sbci	r19, 0xFE	; 254
    334c:	30 93 1d 04 	sts	0x041D, r19
    3350:	20 93 1c 04 	sts	0x041C, r18
	}

}
    3354:	1f 91       	pop	r17
    3356:	0f 91       	pop	r16
    3358:	ff 90       	pop	r15
    335a:	ef 90       	pop	r14
    335c:	08 95       	ret
	unsigned int abs_acc_z=abs(accZ);

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
		curr_position = ORIZZONTAL_POS;
	} else {
		curr_position = VERTICAL_POS;
    335e:	10 92 1b 02 	sts	0x021B, r1
    3362:	80 e0       	ldi	r24, 0x00	; 0
	}

	if(prev_position == curr_position) {
    3364:	90 91 1a 02 	lds	r25, 0x021A
    3368:	98 17       	cp	r25, r24
    336a:	09 f0       	breq	.+2      	; 0x336e <computeAngle+0xb0>
    336c:	be cf       	rjmp	.-132    	; 0x32ea <computeAngle+0x2c>
		times_in_same_pos++;
    336e:	90 91 24 04 	lds	r25, 0x0424
    3372:	9f 5f       	subi	r25, 0xFF	; 255
    3374:	90 93 24 04 	sts	0x0424, r25
		if(times_in_same_pos >= SAME_POS_NUM) {
    3378:	95 30       	cpi	r25, 0x05	; 5
    337a:	08 f4       	brcc	.+2      	; 0x337e <computeAngle+0xc0>
    337c:	b8 cf       	rjmp	.-144    	; 0x32ee <computeAngle+0x30>
			times_in_same_pos = 0;
    337e:	10 92 24 04 	sts	0x0424, r1
			orizzontal_position = curr_position;	// 1 = orizzontal, 0 = vertical
    3382:	80 93 1c 02 	sts	0x021C, r24
    3386:	b3 cf       	rjmp	.-154    	; 0x32ee <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3388:	90 95       	com	r25
    338a:	81 95       	neg	r24
    338c:	9f 4f       	sbci	r25, 0xFF	; 255
    338e:	a1 cf       	rjmp	.-190    	; 0x32d2 <computeAngle+0x14>

00003390 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
    3390:	ea e7       	ldi	r30, 0x7A	; 122
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	86 60       	ori	r24, 0x06	; 6
    3398:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    339a:	ac e7       	ldi	r26, 0x7C	; 124
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	8c 91       	ld	r24, X
    33a0:	80 64       	ori	r24, 0x40	; 64
    33a2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
    33a4:	80 81       	ld	r24, Z
    33a6:	80 62       	ori	r24, 0x20	; 32
    33a8:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
    33aa:	ab e7       	ldi	r26, 0x7B	; 123
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	8c 91       	ld	r24, X
    33b0:	88 7f       	andi	r24, 0xF8	; 248
    33b2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    33b4:	80 81       	ld	r24, Z
    33b6:	88 60       	ori	r24, 0x08	; 8
    33b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    33ba:	80 81       	ld	r24, Z
    33bc:	80 68       	ori	r24, 0x80	; 128
    33be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    33c0:	80 81       	ld	r24, Z
    33c2:	80 64       	ori	r24, 0x40	; 64
    33c4:	80 83       	st	Z, r24

}
    33c6:	08 95       	ret

000033c8 <__vector_29>:

ISR(ADC_vect) {	
    33c8:	1f 92       	push	r1
    33ca:	0f 92       	push	r0
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	0f 92       	push	r0
    33d0:	0b b6       	in	r0, 0x3b	; 59
    33d2:	0f 92       	push	r0
    33d4:	11 24       	eor	r1, r1
    33d6:	2f 93       	push	r18
    33d8:	3f 93       	push	r19
    33da:	4f 93       	push	r20
    33dc:	8f 93       	push	r24
    33de:	9f 93       	push	r25
    33e0:	ef 93       	push	r30
    33e2:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;		// this variable is used to have basic delays based on the adc interrupt timing (one interrupt every 104 us)
    33e4:	80 91 26 04 	lds	r24, 0x0426
    33e8:	90 91 27 04 	lds	r25, 0x0427
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	90 93 27 04 	sts	0x0427, r25
    33f2:	80 93 26 04 	sts	0x0426, r24

	int value = ADCL;			// must be read first!!
    33f6:	20 91 78 00 	lds	r18, 0x0078
    33fa:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    33fc:	40 91 79 00 	lds	r20, 0x0079
    3400:	94 2f       	mov	r25, r20
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	28 2b       	or	r18, r24
    3406:	39 2b       	or	r19, r25

	// save the last data
	switch(adcSaveDataTo) {
    3408:	80 91 93 03 	lds	r24, 0x0393
    340c:	82 30       	cpi	r24, 0x02	; 2
    340e:	09 f4       	brne	.+2      	; 0x3412 <__vector_29+0x4a>
    3410:	1a c1       	rjmp	.+564    	; 0x3646 <__vector_29+0x27e>
    3412:	83 30       	cpi	r24, 0x03	; 3
    3414:	08 f4       	brcc	.+2      	; 0x3418 <__vector_29+0x50>
    3416:	44 c0       	rjmp	.+136    	; 0x34a0 <__vector_29+0xd8>
    3418:	83 30       	cpi	r24, 0x03	; 3
    341a:	09 f4       	brne	.+2      	; 0x341e <__vector_29+0x56>
    341c:	07 c1       	rjmp	.+526    	; 0x362c <__vector_29+0x264>
    341e:	84 30       	cpi	r24, 0x04	; 4
    3420:	09 f4       	brne	.+2      	; 0x3424 <__vector_29+0x5c>
    3422:	d1 c0       	rjmp	.+418    	; 0x35c6 <__vector_29+0x1fe>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    3424:	80 91 94 03 	lds	r24, 0x0394
    3428:	82 30       	cpi	r24, 0x02	; 2
    342a:	09 f4       	brne	.+2      	; 0x342e <__vector_29+0x66>
    342c:	b8 c0       	rjmp	.+368    	; 0x359e <__vector_29+0x1d6>
    342e:	83 30       	cpi	r24, 0x03	; 3
    3430:	08 f0       	brcs	.+2      	; 0x3434 <__vector_29+0x6c>
    3432:	52 c0       	rjmp	.+164    	; 0x34d8 <__vector_29+0x110>
    3434:	88 23       	and	r24, r24
    3436:	09 f0       	breq	.+2      	; 0x343a <__vector_29+0x72>
    3438:	8d c0       	rjmp	.+282    	; 0x3554 <__vector_29+0x18c>

		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
    343a:	80 91 2e 03 	lds	r24, 0x032E
    343e:	86 95       	lsr	r24
    3440:	80 93 2d 03 	sts	0x032D, r24
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
    3444:	80 91 95 03 	lds	r24, 0x0395
    3448:	88 23       	and	r24, r24
    344a:	09 f0       	breq	.+2      	; 0x344e <__vector_29+0x86>
    344c:	3a c1       	rjmp	.+628    	; 0x36c2 <__vector_29+0x2fa>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	80 93 93 03 	sts	0x0393, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	80 93 94 03 	sts	0x0394, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
    345a:	90 91 2d 03 	lds	r25, 0x032D
    345e:	98 30       	cpi	r25, 0x08	; 8
    3460:	08 f0       	brcs	.+2      	; 0x3464 <__vector_29+0x9c>
    3462:	6d c0       	rjmp	.+218    	; 0x353e <__vector_29+0x176>
		ADCSRB &= ~(1 << MUX5);
    3464:	90 91 7b 00 	lds	r25, 0x007B
    3468:	97 7f       	andi	r25, 0xF7	; 247
    346a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    346e:	90 91 2d 03 	lds	r25, 0x032D
    3472:	90 5c       	subi	r25, 0xC0	; 192
    3474:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3478:	82 30       	cpi	r24, 0x02	; 2
    347a:	21 f4       	brne	.+8      	; 0x3484 <__vector_29+0xbc>
		PORTJ &= 0xF0;
		PORTA = 0x00;
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
    347c:	8f ef       	ldi	r24, 0xFF	; 255
    347e:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    3482:	12 b8       	out	0x02, r1	; 2

	}

//	PORTB |= (1 << 7);

}
    3484:	ff 91       	pop	r31
    3486:	ef 91       	pop	r30
    3488:	9f 91       	pop	r25
    348a:	8f 91       	pop	r24
    348c:	4f 91       	pop	r20
    348e:	3f 91       	pop	r19
    3490:	2f 91       	pop	r18
    3492:	0f 90       	pop	r0
    3494:	0b be       	out	0x3b, r0	; 59
    3496:	0f 90       	pop	r0
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	0f 90       	pop	r0
    349c:	1f 90       	pop	r1
    349e:	18 95       	reti

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
    34a0:	88 23       	and	r24, r24
    34a2:	09 f0       	breq	.+2      	; 0x34a6 <__vector_29+0xde>
    34a4:	68 c0       	rjmp	.+208    	; 0x3576 <__vector_29+0x1ae>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
    34a6:	80 91 2e 03 	lds	r24, 0x032E
    34aa:	8e 30       	cpi	r24, 0x0E	; 14
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <__vector_29+0xe8>
    34ae:	1b c1       	rjmp	.+566    	; 0x36e6 <__vector_29+0x31e>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
    34b0:	e8 2f       	mov	r30, r24
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	ed 5c       	subi	r30, 0xCD	; 205
    34ba:	fc 4f       	sbci	r31, 0xFC	; 252
    34bc:	31 83       	std	Z+1, r19	; 0x01
    34be:	20 83       	st	Z, r18
			}
			currentProx++;
    34c0:	8f 5f       	subi	r24, 0xFF	; 255
    34c2:	80 93 2e 03 	sts	0x032E, r24
			if(currentProx > 23) {
    34c6:	88 31       	cpi	r24, 0x18	; 24
    34c8:	08 f4       	brcc	.+2      	; 0x34cc <__vector_29+0x104>
    34ca:	ac cf       	rjmp	.-168    	; 0x3424 <__vector_29+0x5c>
				currentProx = 0;
    34cc:	10 92 2e 03 	sts	0x032E, r1
				updateProx = 1;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	80 93 9c 03 	sts	0x039C, r24
    34d6:	a6 cf       	rjmp	.-180    	; 0x3424 <__vector_29+0x5c>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    34d8:	83 30       	cpi	r24, 0x03	; 3
    34da:	09 f4       	brne	.+2      	; 0x34de <__vector_29+0x116>
    34dc:	93 c0       	rjmp	.+294    	; 0x3604 <__vector_29+0x23c>
    34de:	84 30       	cpi	r24, 0x04	; 4
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <__vector_29+0x11c>
    34e2:	bb cf       	rjmp	.-138    	; 0x345a <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
    34e4:	90 91 30 03 	lds	r25, 0x0330
    34e8:	90 93 2d 03 	sts	0x032D, r25
			rightChannelPhase = rightMotorPhase;	
    34ec:	90 91 31 03 	lds	r25, 0x0331
    34f0:	90 93 95 03 	sts	0x0395, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    34f4:	90 91 96 03 	lds	r25, 0x0396
    34f8:	99 23       	and	r25, r25
    34fa:	09 f0       	breq	.+2      	; 0x34fe <__vector_29+0x136>
    34fc:	dc c0       	rjmp	.+440    	; 0x36b6 <__vector_29+0x2ee>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    34fe:	83 e0       	ldi	r24, 0x03	; 3
    3500:	80 93 93 03 	sts	0x0393, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3504:	10 92 94 03 	sts	0x0394, r1

			if(currentProx==14 && measBattery==1) {
    3508:	20 91 2e 03 	lds	r18, 0x032E
    350c:	2e 30       	cpi	r18, 0x0E	; 14
    350e:	09 f4       	brne	.+2      	; 0x3512 <__vector_29+0x14a>
    3510:	e4 c0       	rjmp	.+456    	; 0x36da <__vector_29+0x312>
				measBattery=2;
				PORTC |= (1 << 6);	// sense enable on
			}

			if(currentProx & 0x01) {	// if active phase
    3512:	82 2f       	mov	r24, r18
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	20 ff       	sbrs	r18, 0
    3518:	c5 c0       	rjmp	.+394    	; 0x36a4 <__vector_29+0x2dc>
				if(currentProx < 16) {
    351a:	20 31       	cpi	r18, 0x10	; 16
    351c:	08 f0       	brcs	.+2      	; 0x3520 <__vector_29+0x158>
    351e:	b2 c0       	rjmp	.+356    	; 0x3684 <__vector_29+0x2bc>
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
    3520:	2e 30       	cpi	r18, 0x0E	; 14
    3522:	09 f4       	brne	.+2      	; 0x3526 <__vector_29+0x15e>
    3524:	fe c0       	rjmp	.+508    	; 0x3722 <__vector_29+0x35a>
						measBattery=2;
						PORTC |= (1 << 6);	// sense enable on
					} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
    3526:	26 95       	lsr	r18
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <__vector_29+0x16a>
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	2a 95       	dec	r18
    3534:	e2 f7       	brpl	.-8      	; 0x352e <__vector_29+0x166>
    3536:	82 b9       	out	0x02, r24	; 2
    3538:	80 91 94 03 	lds	r24, 0x0394
    353c:	8e cf       	rjmp	.-228    	; 0x345a <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
    353e:	90 91 7b 00 	lds	r25, 0x007B
    3542:	98 60       	ori	r25, 0x08	; 8
    3544:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3548:	90 91 2d 03 	lds	r25, 0x032D
    354c:	98 5c       	subi	r25, 0xC8	; 200
    354e:	90 93 7c 00 	sts	0x007C, r25
    3552:	92 cf       	rjmp	.-220    	; 0x3478 <__vector_29+0xb0>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    3554:	81 30       	cpi	r24, 0x01	; 1
    3556:	09 f0       	breq	.+2      	; 0x355a <__vector_29+0x192>
    3558:	80 cf       	rjmp	.-256    	; 0x345a <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    355a:	80 91 2f 03 	lds	r24, 0x032F
    355e:	80 93 2d 03 	sts	0x032D, r24
			leftChannelPhase = leftMotorPhase;
    3562:	80 91 32 03 	lds	r24, 0x0332
    3566:	80 93 96 03 	sts	0x0396, r24
			adcSaveDataTo = SAVE_TO_PROX;
    356a:	10 92 93 03 	sts	0x0393, r1
			adcSamplingState = 2;
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	80 93 94 03 	sts	0x0394, r24
			break;
    3574:	72 cf       	rjmp	.-284    	; 0x345a <__vector_29+0x92>

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
    3576:	81 30       	cpi	r24, 0x01	; 1
    3578:	09 f0       	breq	.+2      	; 0x357c <__vector_29+0x1b4>
    357a:	54 cf       	rjmp	.-344    	; 0x3424 <__vector_29+0x5c>
				updateProx = 1;
			}
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    357c:	80 91 d0 03 	lds	r24, 0x03D0
    3580:	90 91 d1 03 	lds	r25, 0x03D1
    3584:	82 0f       	add	r24, r18
    3586:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
    3588:	96 95       	lsr	r25
    358a:	87 95       	ror	r24
    358c:	90 93 d1 03 	sts	0x03D1, r25
    3590:	80 93 d0 03 	sts	0x03D0, r24
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    3594:	80 91 94 03 	lds	r24, 0x0394
    3598:	82 30       	cpi	r24, 0x02	; 2
    359a:	09 f0       	breq	.+2      	; 0x359e <__vector_29+0x1d6>
    359c:	48 cf       	rjmp	.-368    	; 0x342e <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    359e:	80 91 30 03 	lds	r24, 0x0330
    35a2:	80 93 2d 03 	sts	0x032D, r24
			rightChannelPhase = rightMotorPhase;
    35a6:	80 91 31 03 	lds	r24, 0x0331
    35aa:	80 93 95 03 	sts	0x0395, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    35ae:	80 91 96 03 	lds	r24, 0x0396
    35b2:	88 23       	and	r24, r24
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <__vector_29+0x1f0>
    35b6:	8b c0       	rjmp	.+278    	; 0x36ce <__vector_29+0x306>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	80 93 93 03 	sts	0x0393, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    35be:	83 e0       	ldi	r24, 0x03	; 3
    35c0:	80 93 94 03 	sts	0x0394, r24
			break;
    35c4:	4a cf       	rjmp	.-364    	; 0x345a <__vector_29+0x92>
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			//PORTB ^= (1 << 7);
			if(firstSampleLeft > 0) {
    35c6:	80 91 10 02 	lds	r24, 0x0210
    35ca:	88 23       	and	r24, r24
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <__vector_29+0x208>
    35ce:	2a cf       	rjmp	.-428    	; 0x3424 <__vector_29+0x5c>
				firstSampleLeft++;
    35d0:	48 2f       	mov	r20, r24
    35d2:	4f 5f       	subi	r20, 0xFF	; 255
    35d4:	40 93 10 02 	sts	0x0210, r20
				if(firstSampleLeft > 4) {
    35d8:	45 30       	cpi	r20, 0x05	; 5
    35da:	08 f4       	brcc	.+2      	; 0x35de <__vector_29+0x216>
    35dc:	23 cf       	rjmp	.-442    	; 0x3424 <__vector_29+0x5c>
					left_vel_sum += value;
    35de:	80 91 d6 03 	lds	r24, 0x03D6
    35e2:	90 91 d7 03 	lds	r25, 0x03D7
    35e6:	82 0f       	add	r24, r18
    35e8:	93 1f       	adc	r25, r19
    35ea:	90 93 d7 03 	sts	0x03D7, r25
    35ee:	80 93 d6 03 	sts	0x03D6, r24
					if(firstSampleLeft==8) {
    35f2:	48 30       	cpi	r20, 0x08	; 8
    35f4:	09 f0       	breq	.+2      	; 0x35f8 <__vector_29+0x230>
    35f6:	16 cf       	rjmp	.-468    	; 0x3424 <__vector_29+0x5c>
						firstSampleLeft = 0;
    35f8:	10 92 10 02 	sts	0x0210, r1
						compute_left_vel = 1;
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	80 93 f6 03 	sts	0x03F6, r24
    3602:	10 cf       	rjmp	.-480    	; 0x3424 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3604:	80 91 2f 03 	lds	r24, 0x032F
    3608:	80 93 2d 03 	sts	0x032D, r24
			leftChannelPhase = leftMotorPhase;
    360c:	80 91 32 03 	lds	r24, 0x0332
    3610:	80 93 96 03 	sts	0x0396, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    3614:	80 91 95 03 	lds	r24, 0x0395
    3618:	88 23       	and	r24, r24
    361a:	09 f0       	breq	.+2      	; 0x361e <__vector_29+0x256>
    361c:	46 c0       	rjmp	.+140    	; 0x36aa <__vector_29+0x2e2>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	80 93 93 03 	sts	0x0393, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    3624:	84 e0       	ldi	r24, 0x04	; 4
    3626:	80 93 94 03 	sts	0x0394, r24
			break;
    362a:	17 cf       	rjmp	.-466    	; 0x345a <__vector_29+0x92>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    362c:	80 91 ce 03 	lds	r24, 0x03CE
    3630:	90 91 cf 03 	lds	r25, 0x03CF
    3634:	82 0f       	add	r24, r18
    3636:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3638:	96 95       	lsr	r25
    363a:	87 95       	ror	r24
    363c:	90 93 cf 03 	sts	0x03CF, r25
    3640:	80 93 ce 03 	sts	0x03CE, r24
			break;
    3644:	ef ce       	rjmp	.-546    	; 0x3424 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3646:	80 91 0f 02 	lds	r24, 0x020F
    364a:	88 23       	and	r24, r24
    364c:	09 f4       	brne	.+2      	; 0x3650 <__vector_29+0x288>
    364e:	ea ce       	rjmp	.-556    	; 0x3424 <__vector_29+0x5c>
				firstSampleRight++;
    3650:	48 2f       	mov	r20, r24
    3652:	4f 5f       	subi	r20, 0xFF	; 255
    3654:	40 93 0f 02 	sts	0x020F, r20
				if(firstSampleRight > 4) {		// to skip undesired samples (3 samples skipped)
    3658:	45 30       	cpi	r20, 0x05	; 5
    365a:	08 f4       	brcc	.+2      	; 0x365e <__vector_29+0x296>
    365c:	e3 ce       	rjmp	.-570    	; 0x3424 <__vector_29+0x5c>
					right_vel_sum += value;
    365e:	80 91 d8 03 	lds	r24, 0x03D8
    3662:	90 91 d9 03 	lds	r25, 0x03D9
    3666:	82 0f       	add	r24, r18
    3668:	93 1f       	adc	r25, r19
    366a:	90 93 d9 03 	sts	0x03D9, r25
    366e:	80 93 d8 03 	sts	0x03D8, r24
					if(firstSampleRight==8) {	// number of samples to take for the speed computation
    3672:	48 30       	cpi	r20, 0x08	; 8
    3674:	09 f0       	breq	.+2      	; 0x3678 <__vector_29+0x2b0>
    3676:	d6 ce       	rjmp	.-596    	; 0x3424 <__vector_29+0x5c>
						firstSampleRight = 0;
    3678:	10 92 0f 02 	sts	0x020F, r1
						compute_right_vel = 1;
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	80 93 f7 03 	sts	0x03F7, r24
    3682:	d0 ce       	rjmp	.-608    	; 0x3424 <__vector_29+0x5c>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif
					
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));
    3684:	40 91 05 01 	lds	r20, 0x0105
    3688:	40 97       	sbiw	r24, 0x10	; 16
    368a:	95 95       	asr	r25
    368c:	87 95       	ror	r24
    368e:	21 e0       	ldi	r18, 0x01	; 1
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <__vector_29+0x2d0>
    3694:	22 0f       	add	r18, r18
    3696:	33 1f       	adc	r19, r19
    3698:	8a 95       	dec	r24
    369a:	e2 f7       	brpl	.-8      	; 0x3694 <__vector_29+0x2cc>
    369c:	20 95       	com	r18
    369e:	24 23       	and	r18, r20
    36a0:	20 93 05 01 	sts	0x0105, r18
    36a4:	80 91 94 03 	lds	r24, 0x0394
    36a8:	d8 ce       	rjmp	.-592    	; 0x345a <__vector_29+0x92>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    36aa:	81 30       	cpi	r24, 0x01	; 1
    36ac:	69 f1       	breq	.+90     	; 0x3708 <__vector_29+0x340>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    36ae:	85 e0       	ldi	r24, 0x05	; 5
    36b0:	80 93 93 03 	sts	0x0393, r24
    36b4:	b7 cf       	rjmp	.-146    	; 0x3624 <__vector_29+0x25c>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    36b6:	91 30       	cpi	r25, 0x01	; 1
    36b8:	09 f0       	breq	.+2      	; 0x36bc <__vector_29+0x2f4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    36ba:	85 e0       	ldi	r24, 0x05	; 5
    36bc:	80 93 93 03 	sts	0x0393, r24
    36c0:	21 cf       	rjmp	.-446    	; 0x3504 <__vector_29+0x13c>
		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    36c2:	81 30       	cpi	r24, 0x01	; 1
    36c4:	e9 f0       	breq	.+58     	; 0x3700 <__vector_29+0x338>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    36c6:	85 e0       	ldi	r24, 0x05	; 5
    36c8:	80 93 93 03 	sts	0x0393, r24
    36cc:	c3 ce       	rjmp	.-634    	; 0x3454 <__vector_29+0x8c>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	f9 f0       	breq	.+62     	; 0x3710 <__vector_29+0x348>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    36d2:	85 e0       	ldi	r24, 0x05	; 5
    36d4:	80 93 93 03 	sts	0x0393, r24
    36d8:	72 cf       	rjmp	.-284    	; 0x35be <__vector_29+0x1f6>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    36da:	80 91 99 03 	lds	r24, 0x0399
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	d9 f0       	breq	.+54     	; 0x3718 <__vector_29+0x350>
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	ba ce       	rjmp	.-652    	; 0x345a <__vector_29+0x92>

	// save the last data
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
    36e6:	90 91 99 03 	lds	r25, 0x0399
    36ea:	92 30       	cpi	r25, 0x02	; 2
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <__vector_29+0x328>
    36ee:	e0 ce       	rjmp	.-576    	; 0x34b0 <__vector_29+0xe8>
				batteryLevel = value;
    36f0:	30 93 98 03 	sts	0x0398, r19
    36f4:	20 93 97 03 	sts	0x0397, r18
				measBattery = 0;
    36f8:	10 92 99 03 	sts	0x0399, r1
				PORTC &= ~(1 << 6);
    36fc:	46 98       	cbi	0x08, 6	; 8
    36fe:	e0 ce       	rjmp	.-576    	; 0x34c0 <__vector_29+0xf8>
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	80 93 93 03 	sts	0x0393, r24
    3706:	a6 ce       	rjmp	.-692    	; 0x3454 <__vector_29+0x8c>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	80 93 93 03 	sts	0x0393, r24
    370e:	8a cf       	rjmp	.-236    	; 0x3624 <__vector_29+0x25c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3710:	84 e0       	ldi	r24, 0x04	; 4
    3712:	80 93 93 03 	sts	0x0393, r24
    3716:	53 cf       	rjmp	.-346    	; 0x35be <__vector_29+0x1f6>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3718:	82 e0       	ldi	r24, 0x02	; 2
    371a:	80 93 99 03 	sts	0x0399, r24
				PORTC |= (1 << 6);	// sense enable on
    371e:	46 9a       	sbi	0x08, 6	; 8
    3720:	f8 ce       	rjmp	.-528    	; 0x3512 <__vector_29+0x14a>
			}

			if(currentProx & 0x01) {	// if active phase
				if(currentProx < 16) {
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
    3722:	80 91 99 03 	lds	r24, 0x0399
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	09 f0       	breq	.+2      	; 0x372c <__vector_29+0x364>
    372a:	fd ce       	rjmp	.-518    	; 0x3526 <__vector_29+0x15e>
						measBattery=2;
    372c:	82 e0       	ldi	r24, 0x02	; 2
    372e:	80 93 99 03 	sts	0x0399, r24
						PORTC |= (1 << 6);	// sense enable on
    3732:	46 9a       	sbi	0x08, 6	; 8
    3734:	80 91 94 03 	lds	r24, 0x0394
    3738:	90 ce       	rjmp	.-736    	; 0x345a <__vector_29+0x92>

0000373a <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    373a:	e0 e9       	ldi	r30, 0x90	; 144
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 81       	ld	r24, Z
    3740:	83 68       	ori	r24, 0x83	; 131
    3742:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
    3744:	80 81       	ld	r24, Z
    3746:	83 60       	ori	r24, 0x03	; 3
    3748:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    374a:	a1 e9       	ldi	r26, 0x91	; 145
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	8c 91       	ld	r24, X
    3750:	8b 60       	ori	r24, 0x0B	; 11
    3752:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3754:	80 91 de 03 	lds	r24, 0x03DE
    3758:	90 91 df 03 	lds	r25, 0x03DF
    375c:	90 93 99 00 	sts	0x0099, r25
    3760:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    3764:	10 92 9b 00 	sts	0x009B, r1
    3768:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
    376c:	a1 e7       	ldi	r26, 0x71	; 113
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	8c 91       	ld	r24, X
    3772:	81 60       	ori	r24, 0x01	; 1
    3774:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3776:	80 81       	ld	r24, Z
    3778:	8f 75       	andi	r24, 0x5F	; 95
    377a:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    377c:	8e b1       	in	r24, 0x0e	; 14
    377e:	87 7e       	andi	r24, 0xE7	; 231
    3780:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3782:	e0 ea       	ldi	r30, 0xA0	; 160
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	80 81       	ld	r24, Z
    3788:	83 68       	ori	r24, 0x83	; 131
    378a:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    378c:	a1 ea       	ldi	r26, 0xA1	; 161
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	8c 91       	ld	r24, X
    3792:	8b 60       	ori	r24, 0x0B	; 11
    3794:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3796:	80 91 e0 03 	lds	r24, 0x03E0
    379a:	90 91 e1 03 	lds	r25, 0x03E1
    379e:	90 93 a9 00 	sts	0x00A9, r25
    37a2:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    37a6:	10 92 ab 00 	sts	0x00AB, r1
    37aa:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    37ae:	a2 e7       	ldi	r26, 0x72	; 114
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	8c 91       	ld	r24, X
    37b4:	81 60       	ori	r24, 0x01	; 1
    37b6:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    37b8:	80 81       	ld	r24, Z
    37ba:	8f 75       	andi	r24, 0x5F	; 95
    37bc:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    37be:	e2 e0       	ldi	r30, 0x02	; 2
    37c0:	f1 e0       	ldi	r31, 0x01	; 1
    37c2:	80 81       	ld	r24, Z
    37c4:	87 7e       	andi	r24, 0xE7	; 231
    37c6:	80 83       	st	Z, r24


}
    37c8:	08 95       	ret

000037ca <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    37ca:	1f 92       	push	r1
    37cc:	0f 92       	push	r0
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	0f 92       	push	r0
    37d2:	11 24       	eor	r1, r1
    37d4:	8f 93       	push	r24
    37d6:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	if(pwm_left == 0) {
    37d8:	80 91 e0 03 	lds	r24, 0x03E0
    37dc:	90 91 e1 03 	lds	r25, 0x03E1
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	a1 f5       	brne	.+104    	; 0x384c <__vector_45+0x82>
		//firstSampleLeft = 0;
		left_vel_sum = 0;
    37e4:	10 92 d7 03 	sts	0x03D7, r1
    37e8:	10 92 d6 03 	sts	0x03D6, r1
		last_left_vel = 0;
    37ec:	10 92 db 03 	sts	0x03DB, r1
    37f0:	10 92 da 03 	sts	0x03DA, r1
		left_current_avg = 0;
    37f4:	10 92 cf 03 	sts	0x03CF, r1
    37f8:	10 92 ce 03 	sts	0x03CE, r1

		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(prev_pwm_left < 0) {
    37fc:	80 91 e4 03 	lds	r24, 0x03E4
    3800:	90 91 e5 03 	lds	r25, 0x03E5
    3804:	97 fd       	sbrc	r25, 7
    3806:	69 c0       	rjmp	.+210    	; 0x38da <__vector_45+0x110>
			leftMotorPhase = PASSIVE_PHASE;
			// select channel 14 to sample the left velocity
			currentMotLeftChannel = 15;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	80 93 32 03 	sts	0x0332, r24
			// select channel 14 to sample the left velocity
			currentMotLeftChannel = 14;		
    380e:	8e e0       	ldi	r24, 0x0E	; 14
    3810:	80 93 2f 03 	sts	0x032F, r24
		}
		firstSampleLeft = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	80 93 10 02 	sts	0x0210, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    381a:	80 91 a0 00 	lds	r24, 0x00A0
    381e:	8f 75       	andi	r24, 0x5F	; 95
    3820:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3824:	80 91 02 01 	lds	r24, 0x0102
    3828:	87 7e       	andi	r24, 0xE7	; 231
    382a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    382e:	80 91 72 00 	lds	r24, 0x0072
    3832:	89 7f       	andi	r24, 0xF9	; 249
    3834:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3838:	89 b3       	in	r24, 0x19	; 25
    383a:	86 60       	ori	r24, 0x06	; 6
    383c:	89 bb       	out	0x19, r24	; 25
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
    383e:	9f 91       	pop	r25
    3840:	8f 91       	pop	r24
    3842:	0f 90       	pop	r0
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	0f 90       	pop	r0
    3848:	1f 90       	pop	r1
    384a:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    384c:	18 16       	cp	r1, r24
    384e:	19 06       	cpc	r1, r25
    3850:	2c f5       	brge	.+74     	; 0x389c <__vector_45+0xd2>
		leftMotorPhase = ACTIVE_PHASE;
    3852:	10 92 32 03 	sts	0x0332, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    3856:	8f e0       	ldi	r24, 0x0F	; 15
    3858:	80 93 2f 03 	sts	0x032F, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    385c:	80 91 a0 00 	lds	r24, 0x00A0
    3860:	8f 7d       	andi	r24, 0xDF	; 223
    3862:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3866:	80 91 72 00 	lds	r24, 0x0072
    386a:	8b 7f       	andi	r24, 0xFB	; 251
    386c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3870:	80 91 02 01 	lds	r24, 0x0102
    3874:	8f 7e       	andi	r24, 0xEF	; 239
    3876:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    387a:	80 91 a0 00 	lds	r24, 0x00A0
    387e:	80 68       	ori	r24, 0x80	; 128
    3880:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3884:	80 91 72 00 	lds	r24, 0x0072
    3888:	82 60       	ori	r24, 0x02	; 2
    388a:	80 93 72 00 	sts	0x0072, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
    388e:	9f 91       	pop	r25
    3890:	8f 91       	pop	r24
    3892:	0f 90       	pop	r0
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	0f 90       	pop	r0
    3898:	1f 90       	pop	r1
    389a:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    389c:	10 92 32 03 	sts	0x0332, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    38a0:	8e e0       	ldi	r24, 0x0E	; 14
    38a2:	80 93 2f 03 	sts	0x032F, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    38a6:	80 91 a0 00 	lds	r24, 0x00A0
    38aa:	8f 77       	andi	r24, 0x7F	; 127
    38ac:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    38b0:	80 91 72 00 	lds	r24, 0x0072
    38b4:	8d 7f       	andi	r24, 0xFD	; 253
    38b6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    38ba:	80 91 02 01 	lds	r24, 0x0102
    38be:	87 7f       	andi	r24, 0xF7	; 247
    38c0:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    38c4:	80 91 a0 00 	lds	r24, 0x00A0
    38c8:	80 62       	ori	r24, 0x20	; 32
    38ca:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    38ce:	80 91 72 00 	lds	r24, 0x0072
    38d2:	84 60       	ori	r24, 0x04	; 4
    38d4:	80 93 72 00 	sts	0x0072, r24
    38d8:	b2 cf       	rjmp	.-156    	; 0x383e <__vector_45+0x74>

		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(prev_pwm_left < 0) {
			leftMotorPhase = PASSIVE_PHASE;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	80 93 32 03 	sts	0x0332, r24
			// select channel 14 to sample the left velocity
			currentMotLeftChannel = 15;
    38e0:	8f e0       	ldi	r24, 0x0F	; 15
    38e2:	80 93 2f 03 	sts	0x032F, r24
    38e6:	96 cf       	rjmp	.-212    	; 0x3814 <__vector_45+0x4a>

000038e8 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    38e8:	1f 92       	push	r1
    38ea:	0f 92       	push	r0
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	0f 92       	push	r0
    38f0:	11 24       	eor	r1, r1
    38f2:	8f 93       	push	r24
    38f4:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	80 93 32 03 	sts	0x0332, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    38fc:	9e e0       	ldi	r25, 0x0E	; 14
    38fe:	90 93 2f 03 	sts	0x032F, r25

	firstSampleLeft = 1;
    3902:	80 93 10 02 	sts	0x0210, r24

//	PORTB |= (1 << 6);

}
    3906:	9f 91       	pop	r25
    3908:	8f 91       	pop	r24
    390a:	0f 90       	pop	r0
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	0f 90       	pop	r0
    3910:	1f 90       	pop	r1
    3912:	18 95       	reti

00003914 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3914:	1f 92       	push	r1
    3916:	0f 92       	push	r0
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	0f 92       	push	r0
    391c:	11 24       	eor	r1, r1
    391e:	8f 93       	push	r24
    3920:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 93 32 03 	sts	0x0332, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3928:	9f e0       	ldi	r25, 0x0F	; 15
    392a:	90 93 2f 03 	sts	0x032F, r25

	firstSampleLeft = 1;
    392e:	80 93 10 02 	sts	0x0210, r24

//	PORTB |= (1 << 6);

}
    3932:	9f 91       	pop	r25
    3934:	8f 91       	pop	r24
    3936:	0f 90       	pop	r0
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	0f 90       	pop	r0
    393c:	1f 90       	pop	r1
    393e:	18 95       	reti

00003940 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3940:	1f 92       	push	r1
    3942:	0f 92       	push	r0
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	0f 92       	push	r0
    3948:	11 24       	eor	r1, r1
    394a:	8f 93       	push	r24
    394c:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
    394e:	80 91 de 03 	lds	r24, 0x03DE
    3952:	90 91 df 03 	lds	r25, 0x03DF
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	91 f5       	brne	.+100    	; 0x39be <__vector_35+0x7e>
		//firstSampleRight = 0;
		right_vel_sum = 0;
    395a:	10 92 d9 03 	sts	0x03D9, r1
    395e:	10 92 d8 03 	sts	0x03D8, r1
		last_right_vel = 0;
    3962:	10 92 dd 03 	sts	0x03DD, r1
    3966:	10 92 dc 03 	sts	0x03DC, r1
		right_current_avg = 0;
    396a:	10 92 d1 03 	sts	0x03D1, r1
    396e:	10 92 d0 03 	sts	0x03D0, r1
		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(prev_pwm_right < 0) {
    3972:	80 91 e2 03 	lds	r24, 0x03E2
    3976:	90 91 e3 03 	lds	r25, 0x03E3
    397a:	97 fd       	sbrc	r25, 7
    397c:	5f c0       	rjmp	.+190    	; 0x3a3c <__vector_35+0xfc>
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample the right velocity
			currentMotRightChannel = 13;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	80 93 31 03 	sts	0x0331, r24
			// select channel 12 to sample the right velocity
			currentMotRightChannel = 12;
    3984:	8c e0       	ldi	r24, 0x0C	; 12
    3986:	80 93 30 03 	sts	0x0330, r24
		}
		firstSampleRight = 1;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	80 93 0f 02 	sts	0x020F, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3990:	80 91 90 00 	lds	r24, 0x0090
    3994:	8f 75       	andi	r24, 0x5F	; 95
    3996:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    399a:	8e b1       	in	r24, 0x0e	; 14
    399c:	87 7e       	andi	r24, 0xE7	; 231
    399e:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    39a0:	80 91 71 00 	lds	r24, 0x0071
    39a4:	89 7f       	andi	r24, 0xF9	; 249
    39a6:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    39aa:	88 b3       	in	r24, 0x18	; 24
    39ac:	86 60       	ori	r24, 0x06	; 6
    39ae:	88 bb       	out	0x18, r24	; 24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
    39b0:	9f 91       	pop	r25
    39b2:	8f 91       	pop	r24
    39b4:	0f 90       	pop	r0
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	0f 90       	pop	r0
    39ba:	1f 90       	pop	r1
    39bc:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    39be:	18 16       	cp	r1, r24
    39c0:	19 06       	cpc	r1, r25
    39c2:	0c f5       	brge	.+66     	; 0x3a06 <__vector_35+0xc6>
		rightMotorPhase = ACTIVE_PHASE;
    39c4:	10 92 31 03 	sts	0x0331, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    39c8:	8d e0       	ldi	r24, 0x0D	; 13
    39ca:	80 93 30 03 	sts	0x0330, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    39ce:	80 91 90 00 	lds	r24, 0x0090
    39d2:	8f 7d       	andi	r24, 0xDF	; 223
    39d4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    39d8:	80 91 71 00 	lds	r24, 0x0071
    39dc:	8b 7f       	andi	r24, 0xFB	; 251
    39de:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    39e2:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    39e4:	80 91 90 00 	lds	r24, 0x0090
    39e8:	80 68       	ori	r24, 0x80	; 128
    39ea:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    39ee:	80 91 71 00 	lds	r24, 0x0071
    39f2:	82 60       	ori	r24, 0x02	; 2
    39f4:	80 93 71 00 	sts	0x0071, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
    39f8:	9f 91       	pop	r25
    39fa:	8f 91       	pop	r24
    39fc:	0f 90       	pop	r0
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	0f 90       	pop	r0
    3a02:	1f 90       	pop	r1
    3a04:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3a06:	10 92 31 03 	sts	0x0331, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3a0a:	8c e0       	ldi	r24, 0x0C	; 12
    3a0c:	80 93 30 03 	sts	0x0330, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3a10:	80 91 90 00 	lds	r24, 0x0090
    3a14:	8f 77       	andi	r24, 0x7F	; 127
    3a16:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3a1a:	80 91 71 00 	lds	r24, 0x0071
    3a1e:	8d 7f       	andi	r24, 0xFD	; 253
    3a20:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3a24:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3a26:	80 91 90 00 	lds	r24, 0x0090
    3a2a:	80 62       	ori	r24, 0x20	; 32
    3a2c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3a30:	80 91 71 00 	lds	r24, 0x0071
    3a34:	84 60       	ori	r24, 0x04	; 4
    3a36:	80 93 71 00 	sts	0x0071, r24
    3a3a:	ba cf       	rjmp	.-140    	; 0x39b0 <__vector_35+0x70>
		right_current_avg = 0;
		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(prev_pwm_right < 0) {
			rightMotorPhase = PASSIVE_PHASE;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	80 93 31 03 	sts	0x0331, r24
			// select channel 12 to sample the right velocity
			currentMotRightChannel = 13;
    3a42:	8d e0       	ldi	r24, 0x0D	; 13
    3a44:	80 93 30 03 	sts	0x0330, r24
    3a48:	a0 cf       	rjmp	.-192    	; 0x398a <__vector_35+0x4a>

00003a4a <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3a4a:	1f 92       	push	r1
    3a4c:	0f 92       	push	r0
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	0f 92       	push	r0
    3a52:	11 24       	eor	r1, r1
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	80 93 31 03 	sts	0x0331, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3a5e:	9c e0       	ldi	r25, 0x0C	; 12
    3a60:	90 93 30 03 	sts	0x0330, r25

	firstSampleRight = 1;
    3a64:	80 93 0f 02 	sts	0x020F, r24

//	PORTB |= (1 << 5);

}
    3a68:	9f 91       	pop	r25
    3a6a:	8f 91       	pop	r24
    3a6c:	0f 90       	pop	r0
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	0f 90       	pop	r0
    3a72:	1f 90       	pop	r1
    3a74:	18 95       	reti

00003a76 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3a76:	1f 92       	push	r1
    3a78:	0f 92       	push	r0
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	0f 92       	push	r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	8f 93       	push	r24
    3a82:	9f 93       	push	r25

//	PORTB &= ~(1 << 5);

	if(pwm_right == 0) {
    3a84:	80 91 de 03 	lds	r24, 0x03DE
    3a88:	90 91 df 03 	lds	r25, 0x03DF
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	41 f0       	breq	.+16     	; 0x3aa0 <__vector_33+0x2a>
		return;
	}

	rightMotorPhase = PASSIVE_PHASE;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	80 93 31 03 	sts	0x0331, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3a96:	9d e0       	ldi	r25, 0x0D	; 13
    3a98:	90 93 30 03 	sts	0x0330, r25

	firstSampleRight = 1;
    3a9c:	80 93 0f 02 	sts	0x020F, r24

//	PORTB |= (1 << 5);
}
    3aa0:	9f 91       	pop	r25
    3aa2:	8f 91       	pop	r24
    3aa4:	0f 90       	pop	r0
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	0f 90       	pop	r0
    3aaa:	1f 90       	pop	r1
    3aac:	18 95       	reti

00003aae <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance() {
    3aae:	cf 92       	push	r12
    3ab0:	df 92       	push	r13
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
	signed int velX=0, velY=0;
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
    3abe:	80 91 e6 03 	lds	r24, 0x03E6
    3ac2:	90 91 e7 03 	lds	r25, 0x03E7
    3ac6:	97 fd       	sbrc	r25, 7
    3ac8:	c9 c0       	rjmp	.+402    	; 0x3c5c <obstacleAvoidance+0x1ae>
    3aca:	60 91 01 04 	lds	r22, 0x0401
    3ace:	70 91 02 04 	lds	r23, 0x0402
		speedr = -speedr;
	}
	if(pwm_left_desired < 0) {
    3ad2:	80 91 e8 03 	lds	r24, 0x03E8
    3ad6:	90 91 e9 03 	lds	r25, 0x03E9
    3ada:	97 fd       	sbrc	r25, 7
    3adc:	d0 c0       	rjmp	.+416    	; 0x3c7e <obstacleAvoidance+0x1d0>
    3ade:	40 91 ff 03 	lds	r20, 0x03FF
    3ae2:	50 91 00 04 	lds	r21, 0x0400
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3ae6:	e0 90 65 03 	lds	r14, 0x0365
    3aea:	f0 90 66 03 	lds	r15, 0x0366
    3aee:	90 91 69 03 	lds	r25, 0x0369
    3af2:	80 91 6a 03 	lds	r24, 0x036A
    3af6:	a9 2f       	mov	r26, r25
    3af8:	b8 2f       	mov	r27, r24
    3afa:	b7 fd       	sbrc	r27, 7
    3afc:	cf c0       	rjmp	.+414    	; 0x3c9c <obstacleAvoidance+0x1ee>
    3afe:	b5 95       	asr	r27
    3b00:	a7 95       	ror	r26
    3b02:	00 91 6d 03 	lds	r16, 0x036D
    3b06:	10 91 6e 03 	lds	r17, 0x036E
    3b0a:	90 91 71 03 	lds	r25, 0x0371
    3b0e:	80 91 72 03 	lds	r24, 0x0372
    3b12:	e9 2f       	mov	r30, r25
    3b14:	f8 2f       	mov	r31, r24
    3b16:	f7 fd       	sbrc	r31, 7
    3b18:	cc c0       	rjmp	.+408    	; 0x3cb2 <obstacleAvoidance+0x204>
    3b1a:	f5 95       	asr	r31
    3b1c:	e7 95       	ror	r30
    3b1e:	f0 95       	com	r31
    3b20:	e1 95       	neg	r30
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
    3b24:	ea 01       	movw	r28, r20
    3b26:	c6 0f       	add	r28, r22
    3b28:	d7 1f       	adc	r29, r23
    3b2a:	d7 fd       	sbrc	r29, 7
    3b2c:	b9 c0       	rjmp	.+370    	; 0x3ca0 <obstacleAvoidance+0x1f2>
    3b2e:	d5 95       	asr	r29
    3b30:	c7 95       	ror	r28
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3b32:	8e 2d       	mov	r24, r14
    3b34:	9f 2d       	mov	r25, r15
    3b36:	97 fd       	sbrc	r25, 7
    3b38:	ba c0       	rjmp	.+372    	; 0x3cae <obstacleAvoidance+0x200>
    3b3a:	95 95       	asr	r25
    3b3c:	87 95       	ror	r24
    3b3e:	9d 01       	movw	r18, r26
    3b40:	28 1b       	sub	r18, r24
    3b42:	39 0b       	sbc	r19, r25
    3b44:	80 91 6b 03 	lds	r24, 0x036B
    3b48:	90 91 6c 03 	lds	r25, 0x036C
    3b4c:	28 0f       	add	r18, r24
    3b4e:	39 1f       	adc	r19, r25
    3b50:	c8 01       	movw	r24, r16
    3b52:	17 fd       	sbrc	r17, 7
    3b54:	b6 c0       	rjmp	.+364    	; 0x3cc2 <obstacleAvoidance+0x214>
    3b56:	95 95       	asr	r25
    3b58:	87 95       	ror	r24
    3b5a:	82 0f       	add	r24, r18
    3b5c:	93 1f       	adc	r25, r19
    3b5e:	8e 0f       	add	r24, r30
    3b60:	9f 1f       	adc	r25, r31
    3b62:	20 91 63 03 	lds	r18, 0x0363
    3b66:	30 91 64 03 	lds	r19, 0x0364
    3b6a:	82 1b       	sub	r24, r18
    3b6c:	93 0b       	sbc	r25, r19
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	velX += sumSensorsX/4;
    3b6e:	96 95       	lsr	r25
    3b70:	87 95       	ror	r24
    3b72:	96 95       	lsr	r25
    3b74:	87 95       	ror	r24
    3b76:	8c 0f       	add	r24, r28
    3b78:	9d 1f       	adc	r25, r29
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    3b7a:	64 1b       	sub	r22, r20
    3b7c:	75 0b       	sbc	r23, r21
    3b7e:	77 fd       	sbrc	r23, 7
    3b80:	9d c0       	rjmp	.+314    	; 0x3cbc <obstacleAvoidance+0x20e>
    3b82:	75 95       	asr	r23
    3b84:	67 95       	ror	r22

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3b86:	ea 0f       	add	r30, r26
    3b88:	fb 1f       	adc	r31, r27
    3b8a:	20 91 67 03 	lds	r18, 0x0367
    3b8e:	30 91 68 03 	lds	r19, 0x0368
    3b92:	e2 0f       	add	r30, r18
    3b94:	f3 1f       	adc	r31, r19
    3b96:	2e 2d       	mov	r18, r14
    3b98:	3f 2d       	mov	r19, r15
    3b9a:	37 fd       	sbrc	r19, 7
    3b9c:	8c c0       	rjmp	.+280    	; 0x3cb6 <obstacleAvoidance+0x208>
    3b9e:	35 95       	asr	r19
    3ba0:	27 95       	ror	r18
    3ba2:	2e 0f       	add	r18, r30
    3ba4:	3f 1f       	adc	r19, r31
    3ba6:	40 2f       	mov	r20, r16
    3ba8:	51 2f       	mov	r21, r17
    3baa:	57 fd       	sbrc	r21, 7
    3bac:	74 c0       	rjmp	.+232    	; 0x3c96 <obstacleAvoidance+0x1e8>
    3bae:	55 95       	asr	r21
    3bb0:	47 95       	ror	r20
    3bb2:	24 1b       	sub	r18, r20
    3bb4:	35 0b       	sbc	r19, r21
    3bb6:	40 91 6f 03 	lds	r20, 0x036F
    3bba:	50 91 70 03 	lds	r21, 0x0370
    3bbe:	24 1b       	sub	r18, r20
    3bc0:	35 0b       	sbc	r19, r21

	velX += sumSensorsX/4;
	velY += sumSensorsY/4;
    3bc2:	36 95       	lsr	r19
    3bc4:	27 95       	ror	r18
    3bc6:	36 95       	lsr	r19
    3bc8:	27 95       	ror	r18
    3bca:	26 0f       	add	r18, r22
    3bcc:	37 1f       	adc	r19, r23

	speedR = (velX + velY);
    3bce:	a9 01       	movw	r20, r18
    3bd0:	48 0f       	add	r20, r24
    3bd2:	59 1f       	adc	r21, r25
	speedL = (velX - velY);
    3bd4:	82 1b       	sub	r24, r18
    3bd6:	93 0b       	sbc	r25, r19

	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL<<2);
	} else {
		pwm_left_working = speedL<<2;
    3bd8:	88 0f       	add	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	90 93 fd 03 	sts	0x03FD, r25
    3be4:	80 93 fc 03 	sts	0x03FC, r24

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR<<2);
	} else {
		pwm_right_working = speedR<<2;
    3be8:	9a 01       	movw	r18, r20
    3bea:	22 0f       	add	r18, r18
    3bec:	33 1f       	adc	r19, r19
    3bee:	22 0f       	add	r18, r18
    3bf0:	33 1f       	adc	r19, r19
    3bf2:	30 93 fb 03 	sts	0x03FB, r19
    3bf6:	20 93 fa 03 	sts	0x03FA, r18
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
    3bfa:	42 e0       	ldi	r20, 0x02	; 2
    3bfc:	21 30       	cpi	r18, 0x01	; 1
    3bfe:	34 07       	cpc	r19, r20
    3c00:	34 f0       	brlt	.+12     	; 0x3c0e <obstacleAvoidance+0x160>
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	32 e0       	ldi	r19, 0x02	; 2
    3c06:	30 93 fb 03 	sts	0x03FB, r19
    3c0a:	20 93 fa 03 	sts	0x03FA, r18
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
    3c0e:	42 e0       	ldi	r20, 0x02	; 2
    3c10:	81 30       	cpi	r24, 0x01	; 1
    3c12:	94 07       	cpc	r25, r20
    3c14:	34 f0       	brlt	.+12     	; 0x3c22 <obstacleAvoidance+0x174>
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	92 e0       	ldi	r25, 0x02	; 2
    3c1a:	90 93 fd 03 	sts	0x03FD, r25
    3c1e:	80 93 fc 03 	sts	0x03FC, r24
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
    3c22:	4e ef       	ldi	r20, 0xFE	; 254
    3c24:	20 30       	cpi	r18, 0x00	; 0
    3c26:	34 07       	cpc	r19, r20
    3c28:	34 f4       	brge	.+12     	; 0x3c36 <obstacleAvoidance+0x188>
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	3e ef       	ldi	r19, 0xFE	; 254
    3c2e:	30 93 fb 03 	sts	0x03FB, r19
    3c32:	20 93 fa 03 	sts	0x03FA, r18
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    3c36:	2e ef       	ldi	r18, 0xFE	; 254
    3c38:	80 30       	cpi	r24, 0x00	; 0
    3c3a:	92 07       	cpc	r25, r18
    3c3c:	34 f4       	brge	.+12     	; 0x3c4a <obstacleAvoidance+0x19c>
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	9e ef       	ldi	r25, 0xFE	; 254
    3c42:	90 93 fd 03 	sts	0x03FD, r25
    3c46:	80 93 fc 03 	sts	0x03FC, r24
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    3c4a:	df 91       	pop	r29
    3c4c:	cf 91       	pop	r28
    3c4e:	1f 91       	pop	r17
    3c50:	0f 91       	pop	r16
    3c52:	ff 90       	pop	r15
    3c54:	ef 90       	pop	r14
    3c56:	df 90       	pop	r13
    3c58:	cf 90       	pop	r12
    3c5a:	08 95       	ret
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
		speedr = -speedr;
    3c5c:	60 91 01 04 	lds	r22, 0x0401
    3c60:	70 91 02 04 	lds	r23, 0x0402
    3c64:	70 95       	com	r23
    3c66:	61 95       	neg	r22
    3c68:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6a:	70 93 02 04 	sts	0x0402, r23
    3c6e:	60 93 01 04 	sts	0x0401, r22
	}
	if(pwm_left_desired < 0) {
    3c72:	80 91 e8 03 	lds	r24, 0x03E8
    3c76:	90 91 e9 03 	lds	r25, 0x03E9
    3c7a:	97 ff       	sbrs	r25, 7
    3c7c:	30 cf       	rjmp	.-416    	; 0x3ade <obstacleAvoidance+0x30>
		speedl = - speedl;
    3c7e:	40 91 ff 03 	lds	r20, 0x03FF
    3c82:	50 91 00 04 	lds	r21, 0x0400
    3c86:	50 95       	com	r21
    3c88:	41 95       	neg	r20
    3c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8c:	50 93 00 04 	sts	0x0400, r21
    3c90:	40 93 ff 03 	sts	0x03FF, r20
    3c94:	28 cf       	rjmp	.-432    	; 0x3ae6 <obstacleAvoidance+0x38>

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3c96:	4f 5f       	subi	r20, 0xFF	; 255
    3c98:	5f 4f       	sbci	r21, 0xFF	; 255
    3c9a:	89 cf       	rjmp	.-238    	; 0x3bae <obstacleAvoidance+0x100>
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3c9c:	11 96       	adiw	r26, 0x01	; 1
    3c9e:	2f cf       	rjmp	.-418    	; 0x3afe <obstacleAvoidance+0x50>
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
    3ca0:	21 96       	adiw	r28, 0x01	; 1
    3ca2:	d5 95       	asr	r29
    3ca4:	c7 95       	ror	r28
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3ca6:	8e 2d       	mov	r24, r14
    3ca8:	9f 2d       	mov	r25, r15
    3caa:	97 ff       	sbrs	r25, 7
    3cac:	46 cf       	rjmp	.-372    	; 0x3b3a <obstacleAvoidance+0x8c>
    3cae:	01 96       	adiw	r24, 0x01	; 1
    3cb0:	44 cf       	rjmp	.-376    	; 0x3b3a <obstacleAvoidance+0x8c>
    3cb2:	31 96       	adiw	r30, 0x01	; 1
    3cb4:	32 cf       	rjmp	.-412    	; 0x3b1a <obstacleAvoidance+0x6c>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3cb6:	2f 5f       	subi	r18, 0xFF	; 255
    3cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cba:	71 cf       	rjmp	.-286    	; 0x3b9e <obstacleAvoidance+0xf0>
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    3cbc:	6f 5f       	subi	r22, 0xFF	; 255
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	60 cf       	rjmp	.-320    	; 0x3b82 <obstacleAvoidance+0xd4>

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3cc2:	01 96       	adiw	r24, 0x01	; 1
    3cc4:	48 cf       	rjmp	.-368    	; 0x3b56 <obstacleAvoidance+0xa8>

00003cc6 <cliffAvoidance>:

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    3cc6:	80 91 53 03 	lds	r24, 0x0353
    3cca:	90 91 54 03 	lds	r25, 0x0354
    3cce:	20 91 55 03 	lds	r18, 0x0355
    3cd2:	30 91 56 03 	lds	r19, 0x0356
    3cd6:	82 1b       	sub	r24, r18
    3cd8:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    3cda:	60 91 57 03 	lds	r22, 0x0357
    3cde:	70 91 58 03 	lds	r23, 0x0358
    3ce2:	20 91 59 03 	lds	r18, 0x0359
    3ce6:	30 91 5a 03 	lds	r19, 0x035A
    3cea:	62 1b       	sub	r22, r18
    3cec:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    3cee:	40 91 5b 03 	lds	r20, 0x035B
    3cf2:	50 91 5c 03 	lds	r21, 0x035C
    3cf6:	20 91 5d 03 	lds	r18, 0x035D
    3cfa:	30 91 5e 03 	lds	r19, 0x035E
    3cfe:	42 1b       	sub	r20, r18
    3d00:	53 0b       	sbc	r21, r19
    3d02:	57 fd       	sbrc	r21, 7
    3d04:	4e c0       	rjmp	.+156    	; 0x3da2 <cliffAvoidance+0xdc>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    3d06:	20 91 5f 03 	lds	r18, 0x035F
    3d0a:	30 91 60 03 	lds	r19, 0x0360
    3d0e:	e0 91 61 03 	lds	r30, 0x0361
    3d12:	f0 91 62 03 	lds	r31, 0x0362
    3d16:	2e 1b       	sub	r18, r30
    3d18:	3f 0b       	sbc	r19, r31
    3d1a:	37 fd       	sbrc	r19, 7
    3d1c:	4b c0       	rjmp	.+150    	; 0x3db4 <cliffAvoidance+0xee>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    3d1e:	97 fd       	sbrc	r25, 7
    3d20:	46 c0       	rjmp	.+140    	; 0x3dae <cliffAvoidance+0xe8>
    3d22:	90 93 33 04 	sts	0x0433, r25
    3d26:	80 93 32 04 	sts	0x0432, r24
	minGround = GROUND_LEFT;
    3d2a:	e3 e0       	ldi	r30, 0x03	; 3
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	f0 93 1e 02 	sts	0x021E, r31
    3d32:	e0 93 1d 02 	sts	0x021D, r30
	if(g1 < minGroundValue) {
    3d36:	77 fd       	sbrc	r23, 7
    3d38:	37 c0       	rjmp	.+110    	; 0x3da8 <cliffAvoidance+0xe2>
    3d3a:	68 17       	cp	r22, r24
    3d3c:	79 07       	cpc	r23, r25
    3d3e:	58 f4       	brcc	.+22     	; 0x3d56 <cliffAvoidance+0x90>
		minGroundValue = g1;
    3d40:	70 93 33 04 	sts	0x0433, r23
    3d44:	60 93 32 04 	sts	0x0432, r22
		minGround = GROUND_CENTER_LEFT;
    3d48:	82 e0       	ldi	r24, 0x02	; 2
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	90 93 1e 02 	sts	0x021E, r25
    3d50:	80 93 1d 02 	sts	0x021D, r24
    3d54:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    3d56:	48 17       	cp	r20, r24
    3d58:	59 07       	cpc	r21, r25
    3d5a:	58 f4       	brcc	.+22     	; 0x3d72 <cliffAvoidance+0xac>
		minGroundValue = g2;
    3d5c:	50 93 33 04 	sts	0x0433, r21
    3d60:	40 93 32 04 	sts	0x0432, r20
		minGround = GROUND_CENTER_RIGHT;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	90 93 1e 02 	sts	0x021E, r25
    3d6c:	80 93 1d 02 	sts	0x021D, r24
    3d70:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    3d72:	28 17       	cp	r18, r24
    3d74:	39 07       	cpc	r19, r25
    3d76:	48 f4       	brcc	.+18     	; 0x3d8a <cliffAvoidance+0xc4>
		minGroundValue = g3;
    3d78:	30 93 33 04 	sts	0x0433, r19
    3d7c:	20 93 32 04 	sts	0x0432, r18
		minGround = GROUND_RIGHT;
    3d80:	10 92 1e 02 	sts	0x021E, r1
    3d84:	10 92 1d 02 	sts	0x021D, r1
    3d88:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    3d8a:	84 37       	cpi	r24, 0x74	; 116
    3d8c:	91 05       	cpc	r25, r1
    3d8e:	40 f4       	brcc	.+16     	; 0x3da0 <cliffAvoidance+0xda>
		pwm_right_working = 0;
    3d90:	10 92 fb 03 	sts	0x03FB, r1
    3d94:	10 92 fa 03 	sts	0x03FA, r1
		pwm_left_working = 0;
    3d98:	10 92 fd 03 	sts	0x03FD, r1
    3d9c:	10 92 fc 03 	sts	0x03FC, r1
    3da0:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    3da2:	40 e0       	ldi	r20, 0x00	; 0
    3da4:	50 e0       	ldi	r21, 0x00	; 0
    3da6:	af cf       	rjmp	.-162    	; 0x3d06 <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    3da8:	60 e0       	ldi	r22, 0x00	; 0
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	c6 cf       	rjmp	.-116    	; 0x3d3a <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	b7 cf       	rjmp	.-146    	; 0x3d22 <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	b2 cf       	rjmp	.-156    	; 0x3d1e <cliffAvoidance+0x58>

00003dba <initRGBleds>:
	//TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1B1) & ~(1 << COM1C1);	// disable OCA, OCB, OCC to turn them off
	//TIMSK1 |= (1 << OCIE1A); 	// Enable output compare match interrupt
	//TIMSK1 |= (1 << TOIE1);	// Enable timer overflow interrupt
*/

}
    3dba:	08 95       	ret

00003dbc <toggleBlueLed>:
*/


void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	90 91 03 04 	lds	r25, 0x0403
    3dc2:	89 1b       	sub	r24, r25
    3dc4:	80 93 03 04 	sts	0x0403, r24

	if(blinkState) {
    3dc8:	88 23       	and	r24, r24
    3dca:	39 f4       	brne	.+14     	; 0x3dda <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
    3dcc:	80 91 80 00 	lds	r24, 0x0080
    3dd0:	87 7f       	andi	r24, 0xF7	; 247
    3dd2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3dd6:	2f 98       	cbi	0x05, 7	; 5
    3dd8:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
    3dda:	80 91 80 00 	lds	r24, 0x0080
    3dde:	88 60       	ori	r24, 0x08	; 8
    3de0:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3de4:	8f ef       	ldi	r24, 0xFF	; 255
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	90 93 8d 00 	sts	0x008D, r25
    3dec:	80 93 8c 00 	sts	0x008C, r24
    3df0:	08 95       	ret

00003df2 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3df2:	88 23       	and	r24, r24
    3df4:	59 f0       	breq	.+22     	; 0x3e0c <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    3df6:	90 91 80 00 	lds	r25, 0x0080
    3dfa:	90 68       	ori	r25, 0x80	; 128
    3dfc:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	90 93 89 00 	sts	0x0089, r25
    3e06:	80 93 88 00 	sts	0x0088, r24
    3e0a:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    3e0c:	80 91 80 00 	lds	r24, 0x0080
    3e10:	8f 77       	andi	r24, 0x7F	; 127
    3e12:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    3e16:	2d 98       	cbi	0x05, 5	; 5
    3e18:	08 95       	ret

00003e1a <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3e1a:	88 23       	and	r24, r24
    3e1c:	59 f0       	breq	.+22     	; 0x3e34 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    3e1e:	90 91 80 00 	lds	r25, 0x0080
    3e22:	90 62       	ori	r25, 0x20	; 32
    3e24:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	90 93 8b 00 	sts	0x008B, r25
    3e2e:	80 93 8a 00 	sts	0x008A, r24
    3e32:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    3e34:	80 91 80 00 	lds	r24, 0x0080
    3e38:	8f 7d       	andi	r24, 0xDF	; 223
    3e3a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    3e3e:	2e 98       	cbi	0x05, 6	; 5
    3e40:	08 95       	ret

00003e42 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3e42:	88 23       	and	r24, r24
    3e44:	59 f0       	breq	.+22     	; 0x3e5c <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    3e46:	90 91 80 00 	lds	r25, 0x0080
    3e4a:	98 60       	ori	r25, 0x08	; 8
    3e4c:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	90 93 8d 00 	sts	0x008D, r25
    3e56:	80 93 8c 00 	sts	0x008C, r24
    3e5a:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    3e5c:	80 91 80 00 	lds	r24, 0x0080
    3e60:	87 7f       	andi	r24, 0xF7	; 247
    3e62:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3e66:	2f 98       	cbi	0x05, 7	; 5
    3e68:	08 95       	ret

00003e6a <__mulsf3>:
    3e6a:	a0 e2       	ldi	r26, 0x20	; 32
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	eb e3       	ldi	r30, 0x3B	; 59
    3e70:	ff e1       	ldi	r31, 0x1F	; 31
    3e72:	0c 94 ab 22 	jmp	0x4556	; 0x4556 <__prologue_saves__+0x4>
    3e76:	69 83       	std	Y+1, r22	; 0x01
    3e78:	7a 83       	std	Y+2, r23	; 0x02
    3e7a:	8b 83       	std	Y+3, r24	; 0x03
    3e7c:	9c 83       	std	Y+4, r25	; 0x04
    3e7e:	2d 83       	std	Y+5, r18	; 0x05
    3e80:	3e 83       	std	Y+6, r19	; 0x06
    3e82:	4f 83       	std	Y+7, r20	; 0x07
    3e84:	58 87       	std	Y+8, r21	; 0x08
    3e86:	99 e0       	ldi	r25, 0x09	; 9
    3e88:	e9 2e       	mov	r14, r25
    3e8a:	f1 2c       	mov	r15, r1
    3e8c:	ec 0e       	add	r14, r28
    3e8e:	fd 1e       	adc	r15, r29
    3e90:	b7 01       	movw	r22, r14
    3e92:	ce 01       	movw	r24, r28
    3e94:	01 96       	adiw	r24, 0x01	; 1
    3e96:	0e 94 12 22 	call	0x4424	; 0x4424 <__unpack_f>
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	0f 5e       	subi	r16, 0xEF	; 239
    3e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea0:	b8 01       	movw	r22, r16
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	05 96       	adiw	r24, 0x05	; 5
    3ea6:	0e 94 12 22 	call	0x4424	; 0x4424 <__unpack_f>
    3eaa:	99 85       	ldd	r25, Y+9	; 0x09
    3eac:	92 30       	cpi	r25, 0x02	; 2
    3eae:	88 f0       	brcs	.+34     	; 0x3ed2 <__mulsf3+0x68>
    3eb0:	89 89       	ldd	r24, Y+17	; 0x11
    3eb2:	82 30       	cpi	r24, 0x02	; 2
    3eb4:	c0 f0       	brcs	.+48     	; 0x3ee6 <__mulsf3+0x7c>
    3eb6:	94 30       	cpi	r25, 0x04	; 4
    3eb8:	19 f4       	brne	.+6      	; 0x3ec0 <__mulsf3+0x56>
    3eba:	82 30       	cpi	r24, 0x02	; 2
    3ebc:	29 f0       	breq	.+10     	; 0x3ec8 <__mulsf3+0x5e>
    3ebe:	09 c0       	rjmp	.+18     	; 0x3ed2 <__mulsf3+0x68>
    3ec0:	84 30       	cpi	r24, 0x04	; 4
    3ec2:	29 f4       	brne	.+10     	; 0x3ece <__mulsf3+0x64>
    3ec4:	92 30       	cpi	r25, 0x02	; 2
    3ec6:	79 f4       	brne	.+30     	; 0x3ee6 <__mulsf3+0x7c>
    3ec8:	6f e1       	ldi	r22, 0x1F	; 31
    3eca:	72 e0       	ldi	r23, 0x02	; 2
    3ecc:	c6 c0       	rjmp	.+396    	; 0x405a <__mulsf3+0x1f0>
    3ece:	92 30       	cpi	r25, 0x02	; 2
    3ed0:	41 f4       	brne	.+16     	; 0x3ee2 <__mulsf3+0x78>
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed6:	8a 89       	ldd	r24, Y+18	; 0x12
    3ed8:	98 13       	cpse	r25, r24
    3eda:	21 e0       	ldi	r18, 0x01	; 1
    3edc:	2a 87       	std	Y+10, r18	; 0x0a
    3ede:	b7 01       	movw	r22, r14
    3ee0:	bc c0       	rjmp	.+376    	; 0x405a <__mulsf3+0x1f0>
    3ee2:	82 30       	cpi	r24, 0x02	; 2
    3ee4:	41 f4       	brne	.+16     	; 0x3ef6 <__mulsf3+0x8c>
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eea:	8a 89       	ldd	r24, Y+18	; 0x12
    3eec:	98 13       	cpse	r25, r24
    3eee:	21 e0       	ldi	r18, 0x01	; 1
    3ef0:	2a 8b       	std	Y+18, r18	; 0x12
    3ef2:	b8 01       	movw	r22, r16
    3ef4:	b2 c0       	rjmp	.+356    	; 0x405a <__mulsf3+0x1f0>
    3ef6:	cd 84       	ldd	r12, Y+13	; 0x0d
    3ef8:	de 84       	ldd	r13, Y+14	; 0x0e
    3efa:	ef 84       	ldd	r14, Y+15	; 0x0f
    3efc:	f8 88       	ldd	r15, Y+16	; 0x10
    3efe:	0d 89       	ldd	r16, Y+21	; 0x15
    3f00:	1e 89       	ldd	r17, Y+22	; 0x16
    3f02:	2f 89       	ldd	r18, Y+23	; 0x17
    3f04:	38 8d       	ldd	r19, Y+24	; 0x18
    3f06:	88 24       	eor	r8, r8
    3f08:	99 24       	eor	r9, r9
    3f0a:	54 01       	movw	r10, r8
    3f0c:	40 e0       	ldi	r20, 0x00	; 0
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	44 24       	eor	r4, r4
    3f16:	55 24       	eor	r5, r5
    3f18:	32 01       	movw	r6, r4
    3f1a:	e0 e0       	ldi	r30, 0x00	; 0
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	c6 01       	movw	r24, r12
    3f20:	81 70       	andi	r24, 0x01	; 1
    3f22:	90 70       	andi	r25, 0x00	; 0
    3f24:	89 2b       	or	r24, r25
    3f26:	d9 f0       	breq	.+54     	; 0x3f5e <__mulsf3+0xf4>
    3f28:	80 0e       	add	r8, r16
    3f2a:	91 1e       	adc	r9, r17
    3f2c:	a2 1e       	adc	r10, r18
    3f2e:	b3 1e       	adc	r11, r19
    3f30:	db 01       	movw	r26, r22
    3f32:	ca 01       	movw	r24, r20
    3f34:	84 0d       	add	r24, r4
    3f36:	95 1d       	adc	r25, r5
    3f38:	a6 1d       	adc	r26, r6
    3f3a:	b7 1d       	adc	r27, r7
    3f3c:	40 e0       	ldi	r20, 0x00	; 0
    3f3e:	50 e0       	ldi	r21, 0x00	; 0
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	70 e0       	ldi	r23, 0x00	; 0
    3f44:	80 16       	cp	r8, r16
    3f46:	91 06       	cpc	r9, r17
    3f48:	a2 06       	cpc	r10, r18
    3f4a:	b3 06       	cpc	r11, r19
    3f4c:	20 f4       	brcc	.+8      	; 0x3f56 <__mulsf3+0xec>
    3f4e:	41 e0       	ldi	r20, 0x01	; 1
    3f50:	50 e0       	ldi	r21, 0x00	; 0
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	48 0f       	add	r20, r24
    3f58:	59 1f       	adc	r21, r25
    3f5a:	6a 1f       	adc	r22, r26
    3f5c:	7b 1f       	adc	r23, r27
    3f5e:	44 0c       	add	r4, r4
    3f60:	55 1c       	adc	r5, r5
    3f62:	66 1c       	adc	r6, r6
    3f64:	77 1c       	adc	r7, r7
    3f66:	37 ff       	sbrs	r19, 7
    3f68:	08 c0       	rjmp	.+16     	; 0x3f7a <__mulsf3+0x110>
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	a0 e0       	ldi	r26, 0x00	; 0
    3f70:	b0 e0       	ldi	r27, 0x00	; 0
    3f72:	48 2a       	or	r4, r24
    3f74:	59 2a       	or	r5, r25
    3f76:	6a 2a       	or	r6, r26
    3f78:	7b 2a       	or	r7, r27
    3f7a:	31 96       	adiw	r30, 0x01	; 1
    3f7c:	e0 32       	cpi	r30, 0x20	; 32
    3f7e:	f1 05       	cpc	r31, r1
    3f80:	49 f0       	breq	.+18     	; 0x3f94 <__mulsf3+0x12a>
    3f82:	00 0f       	add	r16, r16
    3f84:	11 1f       	adc	r17, r17
    3f86:	22 1f       	adc	r18, r18
    3f88:	33 1f       	adc	r19, r19
    3f8a:	f6 94       	lsr	r15
    3f8c:	e7 94       	ror	r14
    3f8e:	d7 94       	ror	r13
    3f90:	c7 94       	ror	r12
    3f92:	c5 cf       	rjmp	.-118    	; 0x3f1e <__mulsf3+0xb4>
    3f94:	8b 89       	ldd	r24, Y+19	; 0x13
    3f96:	9c 89       	ldd	r25, Y+20	; 0x14
    3f98:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3f9c:	82 0f       	add	r24, r18
    3f9e:	93 1f       	adc	r25, r19
    3fa0:	02 96       	adiw	r24, 0x02	; 2
    3fa2:	9c 8f       	std	Y+28, r25	; 0x1c
    3fa4:	8b 8f       	std	Y+27, r24	; 0x1b
    3fa6:	1a 8e       	std	Y+26, r1	; 0x1a
    3fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3faa:	8a 89       	ldd	r24, Y+18	; 0x12
    3fac:	98 17       	cp	r25, r24
    3fae:	11 f0       	breq	.+4      	; 0x3fb4 <__mulsf3+0x14a>
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	8a 8f       	std	Y+26, r24	; 0x1a
    3fb4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3fb6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3fb8:	17 c0       	rjmp	.+46     	; 0x3fe8 <__mulsf3+0x17e>
    3fba:	ca 01       	movw	r24, r20
    3fbc:	81 70       	andi	r24, 0x01	; 1
    3fbe:	90 70       	andi	r25, 0x00	; 0
    3fc0:	89 2b       	or	r24, r25
    3fc2:	61 f0       	breq	.+24     	; 0x3fdc <__mulsf3+0x172>
    3fc4:	b6 94       	lsr	r11
    3fc6:	a7 94       	ror	r10
    3fc8:	97 94       	ror	r9
    3fca:	87 94       	ror	r8
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	a0 e0       	ldi	r26, 0x00	; 0
    3fd2:	b0 e8       	ldi	r27, 0x80	; 128
    3fd4:	88 2a       	or	r8, r24
    3fd6:	99 2a       	or	r9, r25
    3fd8:	aa 2a       	or	r10, r26
    3fda:	bb 2a       	or	r11, r27
    3fdc:	76 95       	lsr	r23
    3fde:	67 95       	ror	r22
    3fe0:	57 95       	ror	r21
    3fe2:	47 95       	ror	r20
    3fe4:	2f 5f       	subi	r18, 0xFF	; 255
    3fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe8:	77 fd       	sbrc	r23, 7
    3fea:	e7 cf       	rjmp	.-50     	; 0x3fba <__mulsf3+0x150>
    3fec:	c9 01       	movw	r24, r18
    3fee:	0b c0       	rjmp	.+22     	; 0x4006 <__mulsf3+0x19c>
    3ff0:	44 0f       	add	r20, r20
    3ff2:	55 1f       	adc	r21, r21
    3ff4:	66 1f       	adc	r22, r22
    3ff6:	77 1f       	adc	r23, r23
    3ff8:	b7 fc       	sbrc	r11, 7
    3ffa:	41 60       	ori	r20, 0x01	; 1
    3ffc:	88 0c       	add	r8, r8
    3ffe:	99 1c       	adc	r9, r9
    4000:	aa 1c       	adc	r10, r10
    4002:	bb 1c       	adc	r11, r11
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	40 30       	cpi	r20, 0x00	; 0
    4008:	a0 e0       	ldi	r26, 0x00	; 0
    400a:	5a 07       	cpc	r21, r26
    400c:	a0 e0       	ldi	r26, 0x00	; 0
    400e:	6a 07       	cpc	r22, r26
    4010:	a0 e4       	ldi	r26, 0x40	; 64
    4012:	7a 07       	cpc	r23, r26
    4014:	68 f3       	brcs	.-38     	; 0x3ff0 <__mulsf3+0x186>
    4016:	9c 8f       	std	Y+28, r25	; 0x1c
    4018:	8b 8f       	std	Y+27, r24	; 0x1b
    401a:	db 01       	movw	r26, r22
    401c:	ca 01       	movw	r24, r20
    401e:	8f 77       	andi	r24, 0x7F	; 127
    4020:	90 70       	andi	r25, 0x00	; 0
    4022:	a0 70       	andi	r26, 0x00	; 0
    4024:	b0 70       	andi	r27, 0x00	; 0
    4026:	80 34       	cpi	r24, 0x40	; 64
    4028:	91 05       	cpc	r25, r1
    402a:	a1 05       	cpc	r26, r1
    402c:	b1 05       	cpc	r27, r1
    402e:	61 f4       	brne	.+24     	; 0x4048 <__mulsf3+0x1de>
    4030:	47 fd       	sbrc	r20, 7
    4032:	0a c0       	rjmp	.+20     	; 0x4048 <__mulsf3+0x1de>
    4034:	81 14       	cp	r8, r1
    4036:	91 04       	cpc	r9, r1
    4038:	a1 04       	cpc	r10, r1
    403a:	b1 04       	cpc	r11, r1
    403c:	29 f0       	breq	.+10     	; 0x4048 <__mulsf3+0x1de>
    403e:	40 5c       	subi	r20, 0xC0	; 192
    4040:	5f 4f       	sbci	r21, 0xFF	; 255
    4042:	6f 4f       	sbci	r22, 0xFF	; 255
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	40 78       	andi	r20, 0x80	; 128
    4048:	4d 8f       	std	Y+29, r20	; 0x1d
    404a:	5e 8f       	std	Y+30, r21	; 0x1e
    404c:	6f 8f       	std	Y+31, r22	; 0x1f
    404e:	78 a3       	std	Y+32, r23	; 0x20
    4050:	83 e0       	ldi	r24, 0x03	; 3
    4052:	89 8f       	std	Y+25, r24	; 0x19
    4054:	be 01       	movw	r22, r28
    4056:	67 5e       	subi	r22, 0xE7	; 231
    4058:	7f 4f       	sbci	r23, 0xFF	; 255
    405a:	cb 01       	movw	r24, r22
    405c:	0e 94 32 21 	call	0x4264	; 0x4264 <__pack_f>
    4060:	e0 e1       	ldi	r30, 0x10	; 16
    4062:	a0 96       	adiw	r28, 0x20	; 32
    4064:	0c 94 c7 22 	jmp	0x458e	; 0x458e <__epilogue_restores__+0x4>

00004068 <__floatsisf>:
    4068:	a8 e0       	ldi	r26, 0x08	; 8
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	ea e3       	ldi	r30, 0x3A	; 58
    406e:	f0 e2       	ldi	r31, 0x20	; 32
    4070:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__prologue_saves__+0x12>
    4074:	9b 01       	movw	r18, r22
    4076:	ac 01       	movw	r20, r24
    4078:	83 e0       	ldi	r24, 0x03	; 3
    407a:	89 83       	std	Y+1, r24	; 0x01
    407c:	da 01       	movw	r26, r20
    407e:	c9 01       	movw	r24, r18
    4080:	88 27       	eor	r24, r24
    4082:	b7 fd       	sbrc	r27, 7
    4084:	83 95       	inc	r24
    4086:	99 27       	eor	r25, r25
    4088:	aa 27       	eor	r26, r26
    408a:	bb 27       	eor	r27, r27
    408c:	b8 2e       	mov	r11, r24
    408e:	21 15       	cp	r18, r1
    4090:	31 05       	cpc	r19, r1
    4092:	41 05       	cpc	r20, r1
    4094:	51 05       	cpc	r21, r1
    4096:	19 f4       	brne	.+6      	; 0x409e <__floatsisf+0x36>
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	89 83       	std	Y+1, r24	; 0x01
    409c:	3a c0       	rjmp	.+116    	; 0x4112 <__floatsisf+0xaa>
    409e:	88 23       	and	r24, r24
    40a0:	a9 f0       	breq	.+42     	; 0x40cc <__floatsisf+0x64>
    40a2:	20 30       	cpi	r18, 0x00	; 0
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	38 07       	cpc	r19, r24
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	48 07       	cpc	r20, r24
    40ac:	80 e8       	ldi	r24, 0x80	; 128
    40ae:	58 07       	cpc	r21, r24
    40b0:	29 f4       	brne	.+10     	; 0x40bc <__floatsisf+0x54>
    40b2:	60 e0       	ldi	r22, 0x00	; 0
    40b4:	70 e0       	ldi	r23, 0x00	; 0
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	9f ec       	ldi	r25, 0xCF	; 207
    40ba:	30 c0       	rjmp	.+96     	; 0x411c <__floatsisf+0xb4>
    40bc:	ee 24       	eor	r14, r14
    40be:	ff 24       	eor	r15, r15
    40c0:	87 01       	movw	r16, r14
    40c2:	e2 1a       	sub	r14, r18
    40c4:	f3 0a       	sbc	r15, r19
    40c6:	04 0b       	sbc	r16, r20
    40c8:	15 0b       	sbc	r17, r21
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <__floatsisf+0x68>
    40cc:	79 01       	movw	r14, r18
    40ce:	8a 01       	movw	r16, r20
    40d0:	8e e1       	ldi	r24, 0x1E	; 30
    40d2:	c8 2e       	mov	r12, r24
    40d4:	d1 2c       	mov	r13, r1
    40d6:	dc 82       	std	Y+4, r13	; 0x04
    40d8:	cb 82       	std	Y+3, r12	; 0x03
    40da:	ed 82       	std	Y+5, r14	; 0x05
    40dc:	fe 82       	std	Y+6, r15	; 0x06
    40de:	0f 83       	std	Y+7, r16	; 0x07
    40e0:	18 87       	std	Y+8, r17	; 0x08
    40e2:	c8 01       	movw	r24, r16
    40e4:	b7 01       	movw	r22, r14
    40e6:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__clzsi2>
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	18 16       	cp	r1, r24
    40ee:	19 06       	cpc	r1, r25
    40f0:	84 f4       	brge	.+32     	; 0x4112 <__floatsisf+0xaa>
    40f2:	08 2e       	mov	r0, r24
    40f4:	04 c0       	rjmp	.+8      	; 0x40fe <__floatsisf+0x96>
    40f6:	ee 0c       	add	r14, r14
    40f8:	ff 1c       	adc	r15, r15
    40fa:	00 1f       	adc	r16, r16
    40fc:	11 1f       	adc	r17, r17
    40fe:	0a 94       	dec	r0
    4100:	d2 f7       	brpl	.-12     	; 0x40f6 <__floatsisf+0x8e>
    4102:	ed 82       	std	Y+5, r14	; 0x05
    4104:	fe 82       	std	Y+6, r15	; 0x06
    4106:	0f 83       	std	Y+7, r16	; 0x07
    4108:	18 87       	std	Y+8, r17	; 0x08
    410a:	c8 1a       	sub	r12, r24
    410c:	d9 0a       	sbc	r13, r25
    410e:	dc 82       	std	Y+4, r13	; 0x04
    4110:	cb 82       	std	Y+3, r12	; 0x03
    4112:	ba 82       	std	Y+2, r11	; 0x02
    4114:	ce 01       	movw	r24, r28
    4116:	01 96       	adiw	r24, 0x01	; 1
    4118:	0e 94 32 21 	call	0x4264	; 0x4264 <__pack_f>
    411c:	e9 e0       	ldi	r30, 0x09	; 9
    411e:	28 96       	adiw	r28, 0x08	; 8
    4120:	0c 94 ce 22 	jmp	0x459c	; 0x459c <__epilogue_restores__+0x12>

00004124 <__fixsfsi>:
    4124:	ac e0       	ldi	r26, 0x0C	; 12
    4126:	b0 e0       	ldi	r27, 0x00	; 0
    4128:	e8 e9       	ldi	r30, 0x98	; 152
    412a:	f0 e2       	ldi	r31, 0x20	; 32
    412c:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x20>
    4130:	69 83       	std	Y+1, r22	; 0x01
    4132:	7a 83       	std	Y+2, r23	; 0x02
    4134:	8b 83       	std	Y+3, r24	; 0x03
    4136:	9c 83       	std	Y+4, r25	; 0x04
    4138:	be 01       	movw	r22, r28
    413a:	6b 5f       	subi	r22, 0xFB	; 251
    413c:	7f 4f       	sbci	r23, 0xFF	; 255
    413e:	ce 01       	movw	r24, r28
    4140:	01 96       	adiw	r24, 0x01	; 1
    4142:	0e 94 12 22 	call	0x4424	; 0x4424 <__unpack_f>
    4146:	8d 81       	ldd	r24, Y+5	; 0x05
    4148:	82 30       	cpi	r24, 0x02	; 2
    414a:	a9 f1       	breq	.+106    	; 0x41b6 <__fixsfsi+0x92>
    414c:	82 30       	cpi	r24, 0x02	; 2
    414e:	98 f1       	brcs	.+102    	; 0x41b6 <__fixsfsi+0x92>
    4150:	84 30       	cpi	r24, 0x04	; 4
    4152:	21 f4       	brne	.+8      	; 0x415c <__fixsfsi+0x38>
    4154:	8e 81       	ldd	r24, Y+6	; 0x06
    4156:	88 23       	and	r24, r24
    4158:	59 f4       	brne	.+22     	; 0x4170 <__fixsfsi+0x4c>
    415a:	0f c0       	rjmp	.+30     	; 0x417a <__fixsfsi+0x56>
    415c:	2f 81       	ldd	r18, Y+7	; 0x07
    415e:	38 85       	ldd	r19, Y+8	; 0x08
    4160:	37 fd       	sbrc	r19, 7
    4162:	29 c0       	rjmp	.+82     	; 0x41b6 <__fixsfsi+0x92>
    4164:	6e 81       	ldd	r22, Y+6	; 0x06
    4166:	2f 31       	cpi	r18, 0x1F	; 31
    4168:	31 05       	cpc	r19, r1
    416a:	64 f0       	brlt	.+24     	; 0x4184 <__fixsfsi+0x60>
    416c:	66 23       	and	r22, r22
    416e:	29 f0       	breq	.+10     	; 0x417a <__fixsfsi+0x56>
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e0       	ldi	r20, 0x00	; 0
    4176:	50 e8       	ldi	r21, 0x80	; 128
    4178:	22 c0       	rjmp	.+68     	; 0x41be <__fixsfsi+0x9a>
    417a:	2f ef       	ldi	r18, 0xFF	; 255
    417c:	3f ef       	ldi	r19, 0xFF	; 255
    417e:	4f ef       	ldi	r20, 0xFF	; 255
    4180:	5f e7       	ldi	r21, 0x7F	; 127
    4182:	1d c0       	rjmp	.+58     	; 0x41be <__fixsfsi+0x9a>
    4184:	8e e1       	ldi	r24, 0x1E	; 30
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	82 1b       	sub	r24, r18
    418a:	93 0b       	sbc	r25, r19
    418c:	29 85       	ldd	r18, Y+9	; 0x09
    418e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4190:	4b 85       	ldd	r20, Y+11	; 0x0b
    4192:	5c 85       	ldd	r21, Y+12	; 0x0c
    4194:	04 c0       	rjmp	.+8      	; 0x419e <__fixsfsi+0x7a>
    4196:	56 95       	lsr	r21
    4198:	47 95       	ror	r20
    419a:	37 95       	ror	r19
    419c:	27 95       	ror	r18
    419e:	8a 95       	dec	r24
    41a0:	d2 f7       	brpl	.-12     	; 0x4196 <__fixsfsi+0x72>
    41a2:	66 23       	and	r22, r22
    41a4:	61 f0       	breq	.+24     	; 0x41be <__fixsfsi+0x9a>
    41a6:	50 95       	com	r21
    41a8:	40 95       	com	r20
    41aa:	30 95       	com	r19
    41ac:	21 95       	neg	r18
    41ae:	3f 4f       	sbci	r19, 0xFF	; 255
    41b0:	4f 4f       	sbci	r20, 0xFF	; 255
    41b2:	5f 4f       	sbci	r21, 0xFF	; 255
    41b4:	04 c0       	rjmp	.+8      	; 0x41be <__fixsfsi+0x9a>
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	50 e0       	ldi	r21, 0x00	; 0
    41be:	ca 01       	movw	r24, r20
    41c0:	b9 01       	movw	r22, r18
    41c2:	e2 e0       	ldi	r30, 0x02	; 2
    41c4:	2c 96       	adiw	r28, 0x0c	; 12
    41c6:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x20>

000041ca <__clzsi2>:
    41ca:	ef 92       	push	r14
    41cc:	ff 92       	push	r15
    41ce:	0f 93       	push	r16
    41d0:	1f 93       	push	r17
    41d2:	9b 01       	movw	r18, r22
    41d4:	ac 01       	movw	r20, r24
    41d6:	20 30       	cpi	r18, 0x00	; 0
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	38 07       	cpc	r19, r24
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	48 07       	cpc	r20, r24
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	58 07       	cpc	r21, r24
    41e4:	80 f4       	brcc	.+32     	; 0x4206 <__clzsi2+0x3c>
    41e6:	2f 3f       	cpi	r18, 0xFF	; 255
    41e8:	31 05       	cpc	r19, r1
    41ea:	41 05       	cpc	r20, r1
    41ec:	51 05       	cpc	r21, r1
    41ee:	09 f0       	breq	.+2      	; 0x41f2 <__clzsi2+0x28>
    41f0:	20 f4       	brcc	.+8      	; 0x41fa <__clzsi2+0x30>
    41f2:	ee 24       	eor	r14, r14
    41f4:	ff 24       	eor	r15, r15
    41f6:	87 01       	movw	r16, r14
    41f8:	19 c0       	rjmp	.+50     	; 0x422c <__clzsi2+0x62>
    41fa:	68 e0       	ldi	r22, 0x08	; 8
    41fc:	e6 2e       	mov	r14, r22
    41fe:	f1 2c       	mov	r15, r1
    4200:	01 2d       	mov	r16, r1
    4202:	11 2d       	mov	r17, r1
    4204:	13 c0       	rjmp	.+38     	; 0x422c <__clzsi2+0x62>
    4206:	20 30       	cpi	r18, 0x00	; 0
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	38 07       	cpc	r19, r24
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	48 07       	cpc	r20, r24
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	58 07       	cpc	r21, r24
    4214:	30 f4       	brcc	.+12     	; 0x4222 <__clzsi2+0x58>
    4216:	90 e1       	ldi	r25, 0x10	; 16
    4218:	e9 2e       	mov	r14, r25
    421a:	f1 2c       	mov	r15, r1
    421c:	01 2d       	mov	r16, r1
    421e:	11 2d       	mov	r17, r1
    4220:	05 c0       	rjmp	.+10     	; 0x422c <__clzsi2+0x62>
    4222:	88 e1       	ldi	r24, 0x18	; 24
    4224:	e8 2e       	mov	r14, r24
    4226:	f1 2c       	mov	r15, r1
    4228:	01 2d       	mov	r16, r1
    422a:	11 2d       	mov	r17, r1
    422c:	80 e2       	ldi	r24, 0x20	; 32
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	a0 e0       	ldi	r26, 0x00	; 0
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	8e 19       	sub	r24, r14
    4236:	9f 09       	sbc	r25, r15
    4238:	a0 0b       	sbc	r26, r16
    423a:	b1 0b       	sbc	r27, r17
    423c:	04 c0       	rjmp	.+8      	; 0x4246 <__clzsi2+0x7c>
    423e:	56 95       	lsr	r21
    4240:	47 95       	ror	r20
    4242:	37 95       	ror	r19
    4244:	27 95       	ror	r18
    4246:	ea 94       	dec	r14
    4248:	d2 f7       	brpl	.-12     	; 0x423e <__clzsi2+0x74>
    424a:	f9 01       	movw	r30, r18
    424c:	e9 5d       	subi	r30, 0xD9	; 217
    424e:	fd 4f       	sbci	r31, 0xFD	; 253
    4250:	20 81       	ld	r18, Z
    4252:	82 1b       	sub	r24, r18
    4254:	91 09       	sbc	r25, r1
    4256:	a1 09       	sbc	r26, r1
    4258:	b1 09       	sbc	r27, r1
    425a:	1f 91       	pop	r17
    425c:	0f 91       	pop	r16
    425e:	ff 90       	pop	r15
    4260:	ef 90       	pop	r14
    4262:	08 95       	ret

00004264 <__pack_f>:
    4264:	9f 92       	push	r9
    4266:	af 92       	push	r10
    4268:	bf 92       	push	r11
    426a:	cf 92       	push	r12
    426c:	df 92       	push	r13
    426e:	ef 92       	push	r14
    4270:	ff 92       	push	r15
    4272:	0f 93       	push	r16
    4274:	1f 93       	push	r17
    4276:	ee 24       	eor	r14, r14
    4278:	ff 24       	eor	r15, r15
    427a:	87 01       	movw	r16, r14
    427c:	fc 01       	movw	r30, r24
    427e:	24 81       	ldd	r18, Z+4	; 0x04
    4280:	35 81       	ldd	r19, Z+5	; 0x05
    4282:	46 81       	ldd	r20, Z+6	; 0x06
    4284:	57 81       	ldd	r21, Z+7	; 0x07
    4286:	91 80       	ldd	r9, Z+1	; 0x01
    4288:	80 81       	ld	r24, Z
    428a:	82 30       	cpi	r24, 0x02	; 2
    428c:	10 f4       	brcc	.+4      	; 0x4292 <__pack_f+0x2e>
    428e:	40 61       	ori	r20, 0x10	; 16
    4290:	a2 c0       	rjmp	.+324    	; 0x43d6 <__pack_f+0x172>
    4292:	84 30       	cpi	r24, 0x04	; 4
    4294:	09 f4       	brne	.+2      	; 0x4298 <__pack_f+0x34>
    4296:	9b c0       	rjmp	.+310    	; 0x43ce <__pack_f+0x16a>
    4298:	82 30       	cpi	r24, 0x02	; 2
    429a:	29 f4       	brne	.+10     	; 0x42a6 <__pack_f+0x42>
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	40 e0       	ldi	r20, 0x00	; 0
    42a2:	50 e0       	ldi	r21, 0x00	; 0
    42a4:	05 c0       	rjmp	.+10     	; 0x42b0 <__pack_f+0x4c>
    42a6:	21 15       	cp	r18, r1
    42a8:	31 05       	cpc	r19, r1
    42aa:	41 05       	cpc	r20, r1
    42ac:	51 05       	cpc	r21, r1
    42ae:	19 f4       	brne	.+6      	; 0x42b6 <__pack_f+0x52>
    42b0:	e0 e0       	ldi	r30, 0x00	; 0
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	92 c0       	rjmp	.+292    	; 0x43da <__pack_f+0x176>
    42b6:	82 81       	ldd	r24, Z+2	; 0x02
    42b8:	93 81       	ldd	r25, Z+3	; 0x03
    42ba:	6f ef       	ldi	r22, 0xFF	; 255
    42bc:	82 38       	cpi	r24, 0x82	; 130
    42be:	96 07       	cpc	r25, r22
    42c0:	0c f0       	brlt	.+2      	; 0x42c4 <__pack_f+0x60>
    42c2:	5a c0       	rjmp	.+180    	; 0x4378 <__pack_f+0x114>
    42c4:	62 e8       	ldi	r22, 0x82	; 130
    42c6:	7f ef       	ldi	r23, 0xFF	; 255
    42c8:	68 1b       	sub	r22, r24
    42ca:	79 0b       	sbc	r23, r25
    42cc:	6a 31       	cpi	r22, 0x1A	; 26
    42ce:	71 05       	cpc	r23, r1
    42d0:	2c f0       	brlt	.+10     	; 0x42dc <__pack_f+0x78>
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e0       	ldi	r20, 0x00	; 0
    42d8:	50 e0       	ldi	r21, 0x00	; 0
    42da:	2a c0       	rjmp	.+84     	; 0x4330 <__pack_f+0xcc>
    42dc:	aa 24       	eor	r10, r10
    42de:	bb 24       	eor	r11, r11
    42e0:	65 01       	movw	r12, r10
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	a0 e0       	ldi	r26, 0x00	; 0
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	06 2e       	mov	r0, r22
    42ec:	04 c0       	rjmp	.+8      	; 0x42f6 <__pack_f+0x92>
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	aa 1f       	adc	r26, r26
    42f4:	bb 1f       	adc	r27, r27
    42f6:	0a 94       	dec	r0
    42f8:	d2 f7       	brpl	.-12     	; 0x42ee <__pack_f+0x8a>
    42fa:	01 97       	sbiw	r24, 0x01	; 1
    42fc:	a1 09       	sbc	r26, r1
    42fe:	b1 09       	sbc	r27, r1
    4300:	82 23       	and	r24, r18
    4302:	93 23       	and	r25, r19
    4304:	a4 23       	and	r26, r20
    4306:	b5 23       	and	r27, r21
    4308:	00 97       	sbiw	r24, 0x00	; 0
    430a:	a1 05       	cpc	r26, r1
    430c:	b1 05       	cpc	r27, r1
    430e:	29 f0       	breq	.+10     	; 0x431a <__pack_f+0xb6>
    4310:	71 e0       	ldi	r23, 0x01	; 1
    4312:	a7 2e       	mov	r10, r23
    4314:	b1 2c       	mov	r11, r1
    4316:	c1 2c       	mov	r12, r1
    4318:	d1 2c       	mov	r13, r1
    431a:	04 c0       	rjmp	.+8      	; 0x4324 <__pack_f+0xc0>
    431c:	56 95       	lsr	r21
    431e:	47 95       	ror	r20
    4320:	37 95       	ror	r19
    4322:	27 95       	ror	r18
    4324:	6a 95       	dec	r22
    4326:	d2 f7       	brpl	.-12     	; 0x431c <__pack_f+0xb8>
    4328:	2a 29       	or	r18, r10
    432a:	3b 29       	or	r19, r11
    432c:	4c 29       	or	r20, r12
    432e:	5d 29       	or	r21, r13
    4330:	da 01       	movw	r26, r20
    4332:	c9 01       	movw	r24, r18
    4334:	8f 77       	andi	r24, 0x7F	; 127
    4336:	90 70       	andi	r25, 0x00	; 0
    4338:	a0 70       	andi	r26, 0x00	; 0
    433a:	b0 70       	andi	r27, 0x00	; 0
    433c:	80 34       	cpi	r24, 0x40	; 64
    433e:	91 05       	cpc	r25, r1
    4340:	a1 05       	cpc	r26, r1
    4342:	b1 05       	cpc	r27, r1
    4344:	39 f4       	brne	.+14     	; 0x4354 <__pack_f+0xf0>
    4346:	27 ff       	sbrs	r18, 7
    4348:	09 c0       	rjmp	.+18     	; 0x435c <__pack_f+0xf8>
    434a:	20 5c       	subi	r18, 0xC0	; 192
    434c:	3f 4f       	sbci	r19, 0xFF	; 255
    434e:	4f 4f       	sbci	r20, 0xFF	; 255
    4350:	5f 4f       	sbci	r21, 0xFF	; 255
    4352:	04 c0       	rjmp	.+8      	; 0x435c <__pack_f+0xf8>
    4354:	21 5c       	subi	r18, 0xC1	; 193
    4356:	3f 4f       	sbci	r19, 0xFF	; 255
    4358:	4f 4f       	sbci	r20, 0xFF	; 255
    435a:	5f 4f       	sbci	r21, 0xFF	; 255
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	20 30       	cpi	r18, 0x00	; 0
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	36 07       	cpc	r19, r22
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	46 07       	cpc	r20, r22
    436a:	60 e4       	ldi	r22, 0x40	; 64
    436c:	56 07       	cpc	r21, r22
    436e:	10 f0       	brcs	.+4      	; 0x4374 <__pack_f+0x110>
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	fc 01       	movw	r30, r24
    4376:	23 c0       	rjmp	.+70     	; 0x43be <__pack_f+0x15a>
    4378:	80 38       	cpi	r24, 0x80	; 128
    437a:	91 05       	cpc	r25, r1
    437c:	44 f5       	brge	.+80     	; 0x43ce <__pack_f+0x16a>
    437e:	fc 01       	movw	r30, r24
    4380:	e1 58       	subi	r30, 0x81	; 129
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	da 01       	movw	r26, r20
    4386:	c9 01       	movw	r24, r18
    4388:	8f 77       	andi	r24, 0x7F	; 127
    438a:	90 70       	andi	r25, 0x00	; 0
    438c:	a0 70       	andi	r26, 0x00	; 0
    438e:	b0 70       	andi	r27, 0x00	; 0
    4390:	80 34       	cpi	r24, 0x40	; 64
    4392:	91 05       	cpc	r25, r1
    4394:	a1 05       	cpc	r26, r1
    4396:	b1 05       	cpc	r27, r1
    4398:	39 f4       	brne	.+14     	; 0x43a8 <__pack_f+0x144>
    439a:	27 ff       	sbrs	r18, 7
    439c:	09 c0       	rjmp	.+18     	; 0x43b0 <__pack_f+0x14c>
    439e:	20 5c       	subi	r18, 0xC0	; 192
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	4f 4f       	sbci	r20, 0xFF	; 255
    43a4:	5f 4f       	sbci	r21, 0xFF	; 255
    43a6:	04 c0       	rjmp	.+8      	; 0x43b0 <__pack_f+0x14c>
    43a8:	21 5c       	subi	r18, 0xC1	; 193
    43aa:	3f 4f       	sbci	r19, 0xFF	; 255
    43ac:	4f 4f       	sbci	r20, 0xFF	; 255
    43ae:	5f 4f       	sbci	r21, 0xFF	; 255
    43b0:	57 ff       	sbrs	r21, 7
    43b2:	05 c0       	rjmp	.+10     	; 0x43be <__pack_f+0x15a>
    43b4:	56 95       	lsr	r21
    43b6:	47 95       	ror	r20
    43b8:	37 95       	ror	r19
    43ba:	27 95       	ror	r18
    43bc:	31 96       	adiw	r30, 0x01	; 1
    43be:	87 e0       	ldi	r24, 0x07	; 7
    43c0:	56 95       	lsr	r21
    43c2:	47 95       	ror	r20
    43c4:	37 95       	ror	r19
    43c6:	27 95       	ror	r18
    43c8:	8a 95       	dec	r24
    43ca:	d1 f7       	brne	.-12     	; 0x43c0 <__pack_f+0x15c>
    43cc:	06 c0       	rjmp	.+12     	; 0x43da <__pack_f+0x176>
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e0       	ldi	r20, 0x00	; 0
    43d4:	50 e0       	ldi	r21, 0x00	; 0
    43d6:	ef ef       	ldi	r30, 0xFF	; 255
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	e2 2e       	mov	r14, r18
    43dc:	f3 2e       	mov	r15, r19
    43de:	94 2f       	mov	r25, r20
    43e0:	9f 77       	andi	r25, 0x7F	; 127
    43e2:	80 2f       	mov	r24, r16
    43e4:	80 78       	andi	r24, 0x80	; 128
    43e6:	89 2b       	or	r24, r25
    43e8:	9e 2f       	mov	r25, r30
    43ea:	97 95       	ror	r25
    43ec:	99 27       	eor	r25, r25
    43ee:	97 95       	ror	r25
    43f0:	8f 77       	andi	r24, 0x7F	; 127
    43f2:	08 2f       	mov	r16, r24
    43f4:	09 2b       	or	r16, r25
    43f6:	9e 2f       	mov	r25, r30
    43f8:	96 95       	lsr	r25
    43fa:	81 2f       	mov	r24, r17
    43fc:	80 78       	andi	r24, 0x80	; 128
    43fe:	89 2b       	or	r24, r25
    4400:	97 94       	ror	r9
    4402:	99 24       	eor	r9, r9
    4404:	97 94       	ror	r9
    4406:	8f 77       	andi	r24, 0x7F	; 127
    4408:	18 2f       	mov	r17, r24
    440a:	19 29       	or	r17, r9
    440c:	c8 01       	movw	r24, r16
    440e:	b7 01       	movw	r22, r14
    4410:	1f 91       	pop	r17
    4412:	0f 91       	pop	r16
    4414:	ff 90       	pop	r15
    4416:	ef 90       	pop	r14
    4418:	df 90       	pop	r13
    441a:	cf 90       	pop	r12
    441c:	bf 90       	pop	r11
    441e:	af 90       	pop	r10
    4420:	9f 90       	pop	r9
    4422:	08 95       	ret

00004424 <__unpack_f>:
    4424:	cf 93       	push	r28
    4426:	df 93       	push	r29
    4428:	fc 01       	movw	r30, r24
    442a:	db 01       	movw	r26, r22
    442c:	20 81       	ld	r18, Z
    442e:	31 81       	ldd	r19, Z+1	; 0x01
    4430:	92 81       	ldd	r25, Z+2	; 0x02
    4432:	49 2f       	mov	r20, r25
    4434:	4f 77       	andi	r20, 0x7F	; 127
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	99 1f       	adc	r25, r25
    443a:	99 27       	eor	r25, r25
    443c:	99 1f       	adc	r25, r25
    443e:	83 81       	ldd	r24, Z+3	; 0x03
    4440:	e8 2f       	mov	r30, r24
    4442:	ee 0f       	add	r30, r30
    4444:	e9 2b       	or	r30, r25
    4446:	6e 2f       	mov	r22, r30
    4448:	70 e0       	ldi	r23, 0x00	; 0
    444a:	88 1f       	adc	r24, r24
    444c:	88 27       	eor	r24, r24
    444e:	88 1f       	adc	r24, r24
    4450:	ed 01       	movw	r28, r26
    4452:	89 83       	std	Y+1, r24	; 0x01
    4454:	ee 23       	and	r30, r30
    4456:	71 f5       	brne	.+92     	; 0x44b4 <__unpack_f+0x90>
    4458:	21 15       	cp	r18, r1
    445a:	31 05       	cpc	r19, r1
    445c:	41 05       	cpc	r20, r1
    445e:	51 05       	cpc	r21, r1
    4460:	11 f4       	brne	.+4      	; 0x4466 <__unpack_f+0x42>
    4462:	82 e0       	ldi	r24, 0x02	; 2
    4464:	2f c0       	rjmp	.+94     	; 0x44c4 <__unpack_f+0xa0>
    4466:	6e 57       	subi	r22, 0x7E	; 126
    4468:	70 40       	sbci	r23, 0x00	; 0
    446a:	fd 01       	movw	r30, r26
    446c:	73 83       	std	Z+3, r23	; 0x03
    446e:	62 83       	std	Z+2, r22	; 0x02
    4470:	67 e0       	ldi	r22, 0x07	; 7
    4472:	22 0f       	add	r18, r18
    4474:	33 1f       	adc	r19, r19
    4476:	44 1f       	adc	r20, r20
    4478:	55 1f       	adc	r21, r21
    447a:	6a 95       	dec	r22
    447c:	d1 f7       	brne	.-12     	; 0x4472 <__unpack_f+0x4e>
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	8c 93       	st	X, r24
    4482:	0a c0       	rjmp	.+20     	; 0x4498 <__unpack_f+0x74>
    4484:	22 0f       	add	r18, r18
    4486:	33 1f       	adc	r19, r19
    4488:	44 1f       	adc	r20, r20
    448a:	55 1f       	adc	r21, r21
    448c:	ed 01       	movw	r28, r26
    448e:	8a 81       	ldd	r24, Y+2	; 0x02
    4490:	9b 81       	ldd	r25, Y+3	; 0x03
    4492:	01 97       	sbiw	r24, 0x01	; 1
    4494:	9b 83       	std	Y+3, r25	; 0x03
    4496:	8a 83       	std	Y+2, r24	; 0x02
    4498:	20 30       	cpi	r18, 0x00	; 0
    449a:	e0 e0       	ldi	r30, 0x00	; 0
    449c:	3e 07       	cpc	r19, r30
    449e:	e0 e0       	ldi	r30, 0x00	; 0
    44a0:	4e 07       	cpc	r20, r30
    44a2:	e0 e4       	ldi	r30, 0x40	; 64
    44a4:	5e 07       	cpc	r21, r30
    44a6:	70 f3       	brcs	.-36     	; 0x4484 <__unpack_f+0x60>
    44a8:	ed 01       	movw	r28, r26
    44aa:	2c 83       	std	Y+4, r18	; 0x04
    44ac:	3d 83       	std	Y+5, r19	; 0x05
    44ae:	4e 83       	std	Y+6, r20	; 0x06
    44b0:	5f 83       	std	Y+7, r21	; 0x07
    44b2:	25 c0       	rjmp	.+74     	; 0x44fe <__unpack_f+0xda>
    44b4:	ef 3f       	cpi	r30, 0xFF	; 255
    44b6:	79 f4       	brne	.+30     	; 0x44d6 <__unpack_f+0xb2>
    44b8:	21 15       	cp	r18, r1
    44ba:	31 05       	cpc	r19, r1
    44bc:	41 05       	cpc	r20, r1
    44be:	51 05       	cpc	r21, r1
    44c0:	19 f4       	brne	.+6      	; 0x44c8 <__unpack_f+0xa4>
    44c2:	84 e0       	ldi	r24, 0x04	; 4
    44c4:	8c 93       	st	X, r24
    44c6:	1b c0       	rjmp	.+54     	; 0x44fe <__unpack_f+0xda>
    44c8:	44 ff       	sbrs	r20, 4
    44ca:	03 c0       	rjmp	.+6      	; 0x44d2 <__unpack_f+0xae>
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	8c 93       	st	X, r24
    44d0:	11 c0       	rjmp	.+34     	; 0x44f4 <__unpack_f+0xd0>
    44d2:	1c 92       	st	X, r1
    44d4:	0f c0       	rjmp	.+30     	; 0x44f4 <__unpack_f+0xd0>
    44d6:	6f 57       	subi	r22, 0x7F	; 127
    44d8:	70 40       	sbci	r23, 0x00	; 0
    44da:	ed 01       	movw	r28, r26
    44dc:	7b 83       	std	Y+3, r23	; 0x03
    44de:	6a 83       	std	Y+2, r22	; 0x02
    44e0:	83 e0       	ldi	r24, 0x03	; 3
    44e2:	8c 93       	st	X, r24
    44e4:	87 e0       	ldi	r24, 0x07	; 7
    44e6:	22 0f       	add	r18, r18
    44e8:	33 1f       	adc	r19, r19
    44ea:	44 1f       	adc	r20, r20
    44ec:	55 1f       	adc	r21, r21
    44ee:	8a 95       	dec	r24
    44f0:	d1 f7       	brne	.-12     	; 0x44e6 <__unpack_f+0xc2>
    44f2:	50 64       	ori	r21, 0x40	; 64
    44f4:	fd 01       	movw	r30, r26
    44f6:	24 83       	std	Z+4, r18	; 0x04
    44f8:	35 83       	std	Z+5, r19	; 0x05
    44fa:	46 83       	std	Z+6, r20	; 0x06
    44fc:	57 83       	std	Z+7, r21	; 0x07
    44fe:	df 91       	pop	r29
    4500:	cf 91       	pop	r28
    4502:	08 95       	ret

00004504 <__udivmodhi4>:
    4504:	aa 1b       	sub	r26, r26
    4506:	bb 1b       	sub	r27, r27
    4508:	51 e1       	ldi	r21, 0x11	; 17
    450a:	07 c0       	rjmp	.+14     	; 0x451a <__udivmodhi4_ep>

0000450c <__udivmodhi4_loop>:
    450c:	aa 1f       	adc	r26, r26
    450e:	bb 1f       	adc	r27, r27
    4510:	a6 17       	cp	r26, r22
    4512:	b7 07       	cpc	r27, r23
    4514:	10 f0       	brcs	.+4      	; 0x451a <__udivmodhi4_ep>
    4516:	a6 1b       	sub	r26, r22
    4518:	b7 0b       	sbc	r27, r23

0000451a <__udivmodhi4_ep>:
    451a:	88 1f       	adc	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	5a 95       	dec	r21
    4520:	a9 f7       	brne	.-22     	; 0x450c <__udivmodhi4_loop>
    4522:	80 95       	com	r24
    4524:	90 95       	com	r25
    4526:	bc 01       	movw	r22, r24
    4528:	cd 01       	movw	r24, r26
    452a:	08 95       	ret

0000452c <__divmodhi4>:
    452c:	97 fb       	bst	r25, 7
    452e:	09 2e       	mov	r0, r25
    4530:	07 26       	eor	r0, r23
    4532:	0a d0       	rcall	.+20     	; 0x4548 <__divmodhi4_neg1>
    4534:	77 fd       	sbrc	r23, 7
    4536:	04 d0       	rcall	.+8      	; 0x4540 <__divmodhi4_neg2>
    4538:	e5 df       	rcall	.-54     	; 0x4504 <__udivmodhi4>
    453a:	06 d0       	rcall	.+12     	; 0x4548 <__divmodhi4_neg1>
    453c:	00 20       	and	r0, r0
    453e:	1a f4       	brpl	.+6      	; 0x4546 <__divmodhi4_exit>

00004540 <__divmodhi4_neg2>:
    4540:	70 95       	com	r23
    4542:	61 95       	neg	r22
    4544:	7f 4f       	sbci	r23, 0xFF	; 255

00004546 <__divmodhi4_exit>:
    4546:	08 95       	ret

00004548 <__divmodhi4_neg1>:
    4548:	f6 f7       	brtc	.-4      	; 0x4546 <__divmodhi4_exit>
    454a:	90 95       	com	r25
    454c:	81 95       	neg	r24
    454e:	9f 4f       	sbci	r25, 0xFF	; 255
    4550:	08 95       	ret

00004552 <__prologue_saves__>:
    4552:	2f 92       	push	r2
    4554:	3f 92       	push	r3
    4556:	4f 92       	push	r4
    4558:	5f 92       	push	r5
    455a:	6f 92       	push	r6
    455c:	7f 92       	push	r7
    455e:	8f 92       	push	r8
    4560:	9f 92       	push	r9
    4562:	af 92       	push	r10
    4564:	bf 92       	push	r11
    4566:	cf 92       	push	r12
    4568:	df 92       	push	r13
    456a:	ef 92       	push	r14
    456c:	ff 92       	push	r15
    456e:	0f 93       	push	r16
    4570:	1f 93       	push	r17
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
    4576:	cd b7       	in	r28, 0x3d	; 61
    4578:	de b7       	in	r29, 0x3e	; 62
    457a:	ca 1b       	sub	r28, r26
    457c:	db 0b       	sbc	r29, r27
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	19 94       	eijmp

0000458a <__epilogue_restores__>:
    458a:	2a 88       	ldd	r2, Y+18	; 0x12
    458c:	39 88       	ldd	r3, Y+17	; 0x11
    458e:	48 88       	ldd	r4, Y+16	; 0x10
    4590:	5f 84       	ldd	r5, Y+15	; 0x0f
    4592:	6e 84       	ldd	r6, Y+14	; 0x0e
    4594:	7d 84       	ldd	r7, Y+13	; 0x0d
    4596:	8c 84       	ldd	r8, Y+12	; 0x0c
    4598:	9b 84       	ldd	r9, Y+11	; 0x0b
    459a:	aa 84       	ldd	r10, Y+10	; 0x0a
    459c:	b9 84       	ldd	r11, Y+9	; 0x09
    459e:	c8 84       	ldd	r12, Y+8	; 0x08
    45a0:	df 80       	ldd	r13, Y+7	; 0x07
    45a2:	ee 80       	ldd	r14, Y+6	; 0x06
    45a4:	fd 80       	ldd	r15, Y+5	; 0x05
    45a6:	0c 81       	ldd	r16, Y+4	; 0x04
    45a8:	1b 81       	ldd	r17, Y+3	; 0x03
    45aa:	aa 81       	ldd	r26, Y+2	; 0x02
    45ac:	b9 81       	ldd	r27, Y+1	; 0x01
    45ae:	ce 0f       	add	r28, r30
    45b0:	d1 1d       	adc	r29, r1
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	ed 01       	movw	r28, r26
    45be:	08 95       	ret
    45c0:	f5 d0       	rcall	.+490    	; 0x47ac <__fp_pscA>
    45c2:	58 f0       	brcs	.+22     	; 0x45da <__epilogue_restores__+0x50>
    45c4:	80 e8       	ldi	r24, 0x80	; 128
    45c6:	91 e0       	ldi	r25, 0x01	; 1
    45c8:	09 f4       	brne	.+2      	; 0x45cc <__epilogue_restores__+0x42>
    45ca:	9e ef       	ldi	r25, 0xFE	; 254
    45cc:	f6 d0       	rcall	.+492    	; 0x47ba <__fp_pscB>
    45ce:	28 f0       	brcs	.+10     	; 0x45da <__epilogue_restores__+0x50>
    45d0:	40 e8       	ldi	r20, 0x80	; 128
    45d2:	51 e0       	ldi	r21, 0x01	; 1
    45d4:	59 f4       	brne	.+22     	; 0x45ec <atan2+0xe>
    45d6:	5e ef       	ldi	r21, 0xFE	; 254
    45d8:	09 c0       	rjmp	.+18     	; 0x45ec <atan2+0xe>
    45da:	c0 c0       	rjmp	.+384    	; 0x475c <__fp_nan>
    45dc:	28 c1       	rjmp	.+592    	; 0x482e <__fp_zero>

000045de <atan2>:
    45de:	e9 2f       	mov	r30, r25
    45e0:	e0 78       	andi	r30, 0x80	; 128
    45e2:	03 d1       	rcall	.+518    	; 0x47ea <__fp_split3>
    45e4:	68 f3       	brcs	.-38     	; 0x45c0 <__epilogue_restores__+0x36>
    45e6:	09 2e       	mov	r0, r25
    45e8:	05 2a       	or	r0, r21
    45ea:	c1 f3       	breq	.-16     	; 0x45dc <__epilogue_restores__+0x52>
    45ec:	26 17       	cp	r18, r22
    45ee:	37 07       	cpc	r19, r23
    45f0:	48 07       	cpc	r20, r24
    45f2:	59 07       	cpc	r21, r25
    45f4:	38 f0       	brcs	.+14     	; 0x4604 <atan2+0x26>
    45f6:	0e 2e       	mov	r0, r30
    45f8:	07 f8       	bld	r0, 7
    45fa:	e0 25       	eor	r30, r0
    45fc:	69 f0       	breq	.+26     	; 0x4618 <atan2+0x3a>
    45fe:	e0 25       	eor	r30, r0
    4600:	e0 64       	ori	r30, 0x40	; 64
    4602:	0a c0       	rjmp	.+20     	; 0x4618 <atan2+0x3a>
    4604:	ef 63       	ori	r30, 0x3F	; 63
    4606:	07 f8       	bld	r0, 7
    4608:	00 94       	com	r0
    460a:	07 fa       	bst	r0, 7
    460c:	db 01       	movw	r26, r22
    460e:	b9 01       	movw	r22, r18
    4610:	9d 01       	movw	r18, r26
    4612:	dc 01       	movw	r26, r24
    4614:	ca 01       	movw	r24, r20
    4616:	ad 01       	movw	r20, r26
    4618:	ef 93       	push	r30
    461a:	41 d0       	rcall	.+130    	; 0x469e <__divsf3_pse>
    461c:	d5 d0       	rcall	.+426    	; 0x47c8 <__fp_round>
    461e:	0a d0       	rcall	.+20     	; 0x4634 <atan>
    4620:	5f 91       	pop	r21
    4622:	55 23       	and	r21, r21
    4624:	31 f0       	breq	.+12     	; 0x4632 <atan2+0x54>
    4626:	2b ed       	ldi	r18, 0xDB	; 219
    4628:	3f e0       	ldi	r19, 0x0F	; 15
    462a:	49 e4       	ldi	r20, 0x49	; 73
    462c:	50 fd       	sbrc	r21, 0
    462e:	49 ec       	ldi	r20, 0xC9	; 201
    4630:	71 c1       	rjmp	.+738    	; 0x4914 <__addsf3>
    4632:	08 95       	ret

00004634 <atan>:
    4634:	df 93       	push	r29
    4636:	dd 27       	eor	r29, r29
    4638:	b9 2f       	mov	r27, r25
    463a:	bf 77       	andi	r27, 0x7F	; 127
    463c:	40 e8       	ldi	r20, 0x80	; 128
    463e:	5f e3       	ldi	r21, 0x3F	; 63
    4640:	16 16       	cp	r1, r22
    4642:	17 06       	cpc	r1, r23
    4644:	48 07       	cpc	r20, r24
    4646:	5b 07       	cpc	r21, r27
    4648:	10 f4       	brcc	.+4      	; 0x464e <atan+0x1a>
    464a:	d9 2f       	mov	r29, r25
    464c:	f7 d0       	rcall	.+494    	; 0x483c <inverse>
    464e:	9f 93       	push	r25
    4650:	8f 93       	push	r24
    4652:	7f 93       	push	r23
    4654:	6f 93       	push	r22
    4656:	5a d1       	rcall	.+692    	; 0x490c <square>
    4658:	ee e4       	ldi	r30, 0x4E	; 78
    465a:	f1 e0       	ldi	r31, 0x01	; 1
    465c:	82 d0       	rcall	.+260    	; 0x4762 <__fp_powser>
    465e:	b4 d0       	rcall	.+360    	; 0x47c8 <__fp_round>
    4660:	2f 91       	pop	r18
    4662:	3f 91       	pop	r19
    4664:	4f 91       	pop	r20
    4666:	5f 91       	pop	r21
    4668:	fa d0       	rcall	.+500    	; 0x485e <__mulsf3x>
    466a:	dd 23       	and	r29, r29
    466c:	49 f0       	breq	.+18     	; 0x4680 <atan+0x4c>
    466e:	90 58       	subi	r25, 0x80	; 128
    4670:	a2 ea       	ldi	r26, 0xA2	; 162
    4672:	2a ed       	ldi	r18, 0xDA	; 218
    4674:	3f e0       	ldi	r19, 0x0F	; 15
    4676:	49 ec       	ldi	r20, 0xC9	; 201
    4678:	5f e3       	ldi	r21, 0x3F	; 63
    467a:	d0 78       	andi	r29, 0x80	; 128
    467c:	5d 27       	eor	r21, r29
    467e:	5b d1       	rcall	.+694    	; 0x4936 <__addsf3x>
    4680:	df 91       	pop	r29
    4682:	a2 c0       	rjmp	.+324    	; 0x47c8 <__fp_round>
    4684:	9a d0       	rcall	.+308    	; 0x47ba <__fp_pscB>
    4686:	40 f0       	brcs	.+16     	; 0x4698 <atan+0x64>
    4688:	91 d0       	rcall	.+290    	; 0x47ac <__fp_pscA>
    468a:	30 f0       	brcs	.+12     	; 0x4698 <atan+0x64>
    468c:	21 f4       	brne	.+8      	; 0x4696 <atan+0x62>
    468e:	5f 3f       	cpi	r21, 0xFF	; 255
    4690:	19 f0       	breq	.+6      	; 0x4698 <atan+0x64>
    4692:	5e c0       	rjmp	.+188    	; 0x4750 <__fp_inf>
    4694:	51 11       	cpse	r21, r1
    4696:	cc c0       	rjmp	.+408    	; 0x4830 <__fp_szero>
    4698:	61 c0       	rjmp	.+194    	; 0x475c <__fp_nan>

0000469a <__divsf3x>:
    469a:	a7 d0       	rcall	.+334    	; 0x47ea <__fp_split3>
    469c:	98 f3       	brcs	.-26     	; 0x4684 <atan+0x50>

0000469e <__divsf3_pse>:
    469e:	99 23       	and	r25, r25
    46a0:	c9 f3       	breq	.-14     	; 0x4694 <atan+0x60>
    46a2:	55 23       	and	r21, r21
    46a4:	b1 f3       	breq	.-20     	; 0x4692 <atan+0x5e>
    46a6:	95 1b       	sub	r25, r21
    46a8:	55 0b       	sbc	r21, r21
    46aa:	bb 27       	eor	r27, r27
    46ac:	aa 27       	eor	r26, r26
    46ae:	62 17       	cp	r22, r18
    46b0:	73 07       	cpc	r23, r19
    46b2:	84 07       	cpc	r24, r20
    46b4:	38 f0       	brcs	.+14     	; 0x46c4 <__divsf3_pse+0x26>
    46b6:	9f 5f       	subi	r25, 0xFF	; 255
    46b8:	5f 4f       	sbci	r21, 0xFF	; 255
    46ba:	22 0f       	add	r18, r18
    46bc:	33 1f       	adc	r19, r19
    46be:	44 1f       	adc	r20, r20
    46c0:	aa 1f       	adc	r26, r26
    46c2:	a9 f3       	breq	.-22     	; 0x46ae <__divsf3_pse+0x10>
    46c4:	33 d0       	rcall	.+102    	; 0x472c <__divsf3_pse+0x8e>
    46c6:	0e 2e       	mov	r0, r30
    46c8:	3a f0       	brmi	.+14     	; 0x46d8 <__divsf3_pse+0x3a>
    46ca:	e0 e8       	ldi	r30, 0x80	; 128
    46cc:	30 d0       	rcall	.+96     	; 0x472e <__divsf3_pse+0x90>
    46ce:	91 50       	subi	r25, 0x01	; 1
    46d0:	50 40       	sbci	r21, 0x00	; 0
    46d2:	e6 95       	lsr	r30
    46d4:	00 1c       	adc	r0, r0
    46d6:	ca f7       	brpl	.-14     	; 0x46ca <__divsf3_pse+0x2c>
    46d8:	29 d0       	rcall	.+82     	; 0x472c <__divsf3_pse+0x8e>
    46da:	fe 2f       	mov	r31, r30
    46dc:	27 d0       	rcall	.+78     	; 0x472c <__divsf3_pse+0x8e>
    46de:	66 0f       	add	r22, r22
    46e0:	77 1f       	adc	r23, r23
    46e2:	88 1f       	adc	r24, r24
    46e4:	bb 1f       	adc	r27, r27
    46e6:	26 17       	cp	r18, r22
    46e8:	37 07       	cpc	r19, r23
    46ea:	48 07       	cpc	r20, r24
    46ec:	ab 07       	cpc	r26, r27
    46ee:	b0 e8       	ldi	r27, 0x80	; 128
    46f0:	09 f0       	breq	.+2      	; 0x46f4 <__divsf3_pse+0x56>
    46f2:	bb 0b       	sbc	r27, r27
    46f4:	80 2d       	mov	r24, r0
    46f6:	bf 01       	movw	r22, r30
    46f8:	ff 27       	eor	r31, r31
    46fa:	93 58       	subi	r25, 0x83	; 131
    46fc:	5f 4f       	sbci	r21, 0xFF	; 255
    46fe:	2a f0       	brmi	.+10     	; 0x470a <__divsf3_pse+0x6c>
    4700:	9e 3f       	cpi	r25, 0xFE	; 254
    4702:	51 05       	cpc	r21, r1
    4704:	68 f0       	brcs	.+26     	; 0x4720 <__divsf3_pse+0x82>
    4706:	24 c0       	rjmp	.+72     	; 0x4750 <__fp_inf>
    4708:	93 c0       	rjmp	.+294    	; 0x4830 <__fp_szero>
    470a:	5f 3f       	cpi	r21, 0xFF	; 255
    470c:	ec f3       	brlt	.-6      	; 0x4708 <__divsf3_pse+0x6a>
    470e:	98 3e       	cpi	r25, 0xE8	; 232
    4710:	dc f3       	brlt	.-10     	; 0x4708 <__divsf3_pse+0x6a>
    4712:	86 95       	lsr	r24
    4714:	77 95       	ror	r23
    4716:	67 95       	ror	r22
    4718:	b7 95       	ror	r27
    471a:	f7 95       	ror	r31
    471c:	9f 5f       	subi	r25, 0xFF	; 255
    471e:	c9 f7       	brne	.-14     	; 0x4712 <__divsf3_pse+0x74>
    4720:	88 0f       	add	r24, r24
    4722:	91 1d       	adc	r25, r1
    4724:	96 95       	lsr	r25
    4726:	87 95       	ror	r24
    4728:	97 f9       	bld	r25, 7
    472a:	08 95       	ret
    472c:	e1 e0       	ldi	r30, 0x01	; 1
    472e:	66 0f       	add	r22, r22
    4730:	77 1f       	adc	r23, r23
    4732:	88 1f       	adc	r24, r24
    4734:	bb 1f       	adc	r27, r27
    4736:	62 17       	cp	r22, r18
    4738:	73 07       	cpc	r23, r19
    473a:	84 07       	cpc	r24, r20
    473c:	ba 07       	cpc	r27, r26
    473e:	20 f0       	brcs	.+8      	; 0x4748 <__divsf3_pse+0xaa>
    4740:	62 1b       	sub	r22, r18
    4742:	73 0b       	sbc	r23, r19
    4744:	84 0b       	sbc	r24, r20
    4746:	ba 0b       	sbc	r27, r26
    4748:	ee 1f       	adc	r30, r30
    474a:	88 f7       	brcc	.-30     	; 0x472e <__divsf3_pse+0x90>
    474c:	e0 95       	com	r30
    474e:	08 95       	ret

00004750 <__fp_inf>:
    4750:	97 f9       	bld	r25, 7
    4752:	9f 67       	ori	r25, 0x7F	; 127
    4754:	80 e8       	ldi	r24, 0x80	; 128
    4756:	70 e0       	ldi	r23, 0x00	; 0
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	08 95       	ret

0000475c <__fp_nan>:
    475c:	9f ef       	ldi	r25, 0xFF	; 255
    475e:	80 ec       	ldi	r24, 0xC0	; 192
    4760:	08 95       	ret

00004762 <__fp_powser>:
    4762:	df 93       	push	r29
    4764:	cf 93       	push	r28
    4766:	1f 93       	push	r17
    4768:	0f 93       	push	r16
    476a:	ff 92       	push	r15
    476c:	ef 92       	push	r14
    476e:	df 92       	push	r13
    4770:	7b 01       	movw	r14, r22
    4772:	8c 01       	movw	r16, r24
    4774:	68 94       	set
    4776:	05 c0       	rjmp	.+10     	; 0x4782 <__fp_powser+0x20>
    4778:	da 2e       	mov	r13, r26
    477a:	ef 01       	movw	r28, r30
    477c:	70 d0       	rcall	.+224    	; 0x485e <__mulsf3x>
    477e:	fe 01       	movw	r30, r28
    4780:	e8 94       	clt
    4782:	a5 91       	lpm	r26, Z+
    4784:	25 91       	lpm	r18, Z+
    4786:	35 91       	lpm	r19, Z+
    4788:	45 91       	lpm	r20, Z+
    478a:	55 91       	lpm	r21, Z+
    478c:	ae f3       	brts	.-22     	; 0x4778 <__fp_powser+0x16>
    478e:	ef 01       	movw	r28, r30
    4790:	d2 d0       	rcall	.+420    	; 0x4936 <__addsf3x>
    4792:	fe 01       	movw	r30, r28
    4794:	97 01       	movw	r18, r14
    4796:	a8 01       	movw	r20, r16
    4798:	da 94       	dec	r13
    479a:	79 f7       	brne	.-34     	; 0x477a <__fp_powser+0x18>
    479c:	df 90       	pop	r13
    479e:	ef 90       	pop	r14
    47a0:	ff 90       	pop	r15
    47a2:	0f 91       	pop	r16
    47a4:	1f 91       	pop	r17
    47a6:	cf 91       	pop	r28
    47a8:	df 91       	pop	r29
    47aa:	08 95       	ret

000047ac <__fp_pscA>:
    47ac:	00 24       	eor	r0, r0
    47ae:	0a 94       	dec	r0
    47b0:	16 16       	cp	r1, r22
    47b2:	17 06       	cpc	r1, r23
    47b4:	18 06       	cpc	r1, r24
    47b6:	09 06       	cpc	r0, r25
    47b8:	08 95       	ret

000047ba <__fp_pscB>:
    47ba:	00 24       	eor	r0, r0
    47bc:	0a 94       	dec	r0
    47be:	12 16       	cp	r1, r18
    47c0:	13 06       	cpc	r1, r19
    47c2:	14 06       	cpc	r1, r20
    47c4:	05 06       	cpc	r0, r21
    47c6:	08 95       	ret

000047c8 <__fp_round>:
    47c8:	09 2e       	mov	r0, r25
    47ca:	03 94       	inc	r0
    47cc:	00 0c       	add	r0, r0
    47ce:	11 f4       	brne	.+4      	; 0x47d4 <__fp_round+0xc>
    47d0:	88 23       	and	r24, r24
    47d2:	52 f0       	brmi	.+20     	; 0x47e8 <__fp_round+0x20>
    47d4:	bb 0f       	add	r27, r27
    47d6:	40 f4       	brcc	.+16     	; 0x47e8 <__fp_round+0x20>
    47d8:	bf 2b       	or	r27, r31
    47da:	11 f4       	brne	.+4      	; 0x47e0 <__fp_round+0x18>
    47dc:	60 ff       	sbrs	r22, 0
    47de:	04 c0       	rjmp	.+8      	; 0x47e8 <__fp_round+0x20>
    47e0:	6f 5f       	subi	r22, 0xFF	; 255
    47e2:	7f 4f       	sbci	r23, 0xFF	; 255
    47e4:	8f 4f       	sbci	r24, 0xFF	; 255
    47e6:	9f 4f       	sbci	r25, 0xFF	; 255
    47e8:	08 95       	ret

000047ea <__fp_split3>:
    47ea:	57 fd       	sbrc	r21, 7
    47ec:	90 58       	subi	r25, 0x80	; 128
    47ee:	44 0f       	add	r20, r20
    47f0:	55 1f       	adc	r21, r21
    47f2:	59 f0       	breq	.+22     	; 0x480a <__fp_splitA+0x10>
    47f4:	5f 3f       	cpi	r21, 0xFF	; 255
    47f6:	71 f0       	breq	.+28     	; 0x4814 <__fp_splitA+0x1a>
    47f8:	47 95       	ror	r20

000047fa <__fp_splitA>:
    47fa:	88 0f       	add	r24, r24
    47fc:	97 fb       	bst	r25, 7
    47fe:	99 1f       	adc	r25, r25
    4800:	61 f0       	breq	.+24     	; 0x481a <__fp_splitA+0x20>
    4802:	9f 3f       	cpi	r25, 0xFF	; 255
    4804:	79 f0       	breq	.+30     	; 0x4824 <__fp_splitA+0x2a>
    4806:	87 95       	ror	r24
    4808:	08 95       	ret
    480a:	12 16       	cp	r1, r18
    480c:	13 06       	cpc	r1, r19
    480e:	14 06       	cpc	r1, r20
    4810:	55 1f       	adc	r21, r21
    4812:	f2 cf       	rjmp	.-28     	; 0x47f8 <__fp_split3+0xe>
    4814:	46 95       	lsr	r20
    4816:	f1 df       	rcall	.-30     	; 0x47fa <__fp_splitA>
    4818:	08 c0       	rjmp	.+16     	; 0x482a <__fp_splitA+0x30>
    481a:	16 16       	cp	r1, r22
    481c:	17 06       	cpc	r1, r23
    481e:	18 06       	cpc	r1, r24
    4820:	99 1f       	adc	r25, r25
    4822:	f1 cf       	rjmp	.-30     	; 0x4806 <__fp_splitA+0xc>
    4824:	86 95       	lsr	r24
    4826:	71 05       	cpc	r23, r1
    4828:	61 05       	cpc	r22, r1
    482a:	08 94       	sec
    482c:	08 95       	ret

0000482e <__fp_zero>:
    482e:	e8 94       	clt

00004830 <__fp_szero>:
    4830:	bb 27       	eor	r27, r27
    4832:	66 27       	eor	r22, r22
    4834:	77 27       	eor	r23, r23
    4836:	cb 01       	movw	r24, r22
    4838:	97 f9       	bld	r25, 7
    483a:	08 95       	ret

0000483c <inverse>:
    483c:	9b 01       	movw	r18, r22
    483e:	ac 01       	movw	r20, r24
    4840:	60 e0       	ldi	r22, 0x00	; 0
    4842:	70 e0       	ldi	r23, 0x00	; 0
    4844:	80 e8       	ldi	r24, 0x80	; 128
    4846:	9f e3       	ldi	r25, 0x3F	; 63
    4848:	c9 c0       	rjmp	.+402    	; 0x49dc <__divsf3>
    484a:	b0 df       	rcall	.-160    	; 0x47ac <__fp_pscA>
    484c:	28 f0       	brcs	.+10     	; 0x4858 <inverse+0x1c>
    484e:	b5 df       	rcall	.-150    	; 0x47ba <__fp_pscB>
    4850:	18 f0       	brcs	.+6      	; 0x4858 <inverse+0x1c>
    4852:	95 23       	and	r25, r21
    4854:	09 f0       	breq	.+2      	; 0x4858 <inverse+0x1c>
    4856:	7c cf       	rjmp	.-264    	; 0x4750 <__fp_inf>
    4858:	81 cf       	rjmp	.-254    	; 0x475c <__fp_nan>
    485a:	11 24       	eor	r1, r1
    485c:	e9 cf       	rjmp	.-46     	; 0x4830 <__fp_szero>

0000485e <__mulsf3x>:
    485e:	c5 df       	rcall	.-118    	; 0x47ea <__fp_split3>
    4860:	a0 f3       	brcs	.-24     	; 0x484a <inverse+0xe>

00004862 <__mulsf3_pse>:
    4862:	95 9f       	mul	r25, r21
    4864:	d1 f3       	breq	.-12     	; 0x485a <inverse+0x1e>
    4866:	95 0f       	add	r25, r21
    4868:	50 e0       	ldi	r21, 0x00	; 0
    486a:	55 1f       	adc	r21, r21
    486c:	62 9f       	mul	r22, r18
    486e:	f0 01       	movw	r30, r0
    4870:	72 9f       	mul	r23, r18
    4872:	bb 27       	eor	r27, r27
    4874:	f0 0d       	add	r31, r0
    4876:	b1 1d       	adc	r27, r1
    4878:	63 9f       	mul	r22, r19
    487a:	aa 27       	eor	r26, r26
    487c:	f0 0d       	add	r31, r0
    487e:	b1 1d       	adc	r27, r1
    4880:	aa 1f       	adc	r26, r26
    4882:	64 9f       	mul	r22, r20
    4884:	66 27       	eor	r22, r22
    4886:	b0 0d       	add	r27, r0
    4888:	a1 1d       	adc	r26, r1
    488a:	66 1f       	adc	r22, r22
    488c:	82 9f       	mul	r24, r18
    488e:	22 27       	eor	r18, r18
    4890:	b0 0d       	add	r27, r0
    4892:	a1 1d       	adc	r26, r1
    4894:	62 1f       	adc	r22, r18
    4896:	73 9f       	mul	r23, r19
    4898:	b0 0d       	add	r27, r0
    489a:	a1 1d       	adc	r26, r1
    489c:	62 1f       	adc	r22, r18
    489e:	83 9f       	mul	r24, r19
    48a0:	a0 0d       	add	r26, r0
    48a2:	61 1d       	adc	r22, r1
    48a4:	22 1f       	adc	r18, r18
    48a6:	74 9f       	mul	r23, r20
    48a8:	33 27       	eor	r19, r19
    48aa:	a0 0d       	add	r26, r0
    48ac:	61 1d       	adc	r22, r1
    48ae:	23 1f       	adc	r18, r19
    48b0:	84 9f       	mul	r24, r20
    48b2:	60 0d       	add	r22, r0
    48b4:	21 1d       	adc	r18, r1
    48b6:	82 2f       	mov	r24, r18
    48b8:	76 2f       	mov	r23, r22
    48ba:	6a 2f       	mov	r22, r26
    48bc:	11 24       	eor	r1, r1
    48be:	9f 57       	subi	r25, 0x7F	; 127
    48c0:	50 40       	sbci	r21, 0x00	; 0
    48c2:	8a f0       	brmi	.+34     	; 0x48e6 <__mulsf3_pse+0x84>
    48c4:	e1 f0       	breq	.+56     	; 0x48fe <__mulsf3_pse+0x9c>
    48c6:	88 23       	and	r24, r24
    48c8:	4a f0       	brmi	.+18     	; 0x48dc <__mulsf3_pse+0x7a>
    48ca:	ee 0f       	add	r30, r30
    48cc:	ff 1f       	adc	r31, r31
    48ce:	bb 1f       	adc	r27, r27
    48d0:	66 1f       	adc	r22, r22
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 1f       	adc	r24, r24
    48d6:	91 50       	subi	r25, 0x01	; 1
    48d8:	50 40       	sbci	r21, 0x00	; 0
    48da:	a9 f7       	brne	.-22     	; 0x48c6 <__mulsf3_pse+0x64>
    48dc:	9e 3f       	cpi	r25, 0xFE	; 254
    48de:	51 05       	cpc	r21, r1
    48e0:	70 f0       	brcs	.+28     	; 0x48fe <__mulsf3_pse+0x9c>
    48e2:	36 cf       	rjmp	.-404    	; 0x4750 <__fp_inf>
    48e4:	a5 cf       	rjmp	.-182    	; 0x4830 <__fp_szero>
    48e6:	5f 3f       	cpi	r21, 0xFF	; 255
    48e8:	ec f3       	brlt	.-6      	; 0x48e4 <__mulsf3_pse+0x82>
    48ea:	98 3e       	cpi	r25, 0xE8	; 232
    48ec:	dc f3       	brlt	.-10     	; 0x48e4 <__mulsf3_pse+0x82>
    48ee:	86 95       	lsr	r24
    48f0:	77 95       	ror	r23
    48f2:	67 95       	ror	r22
    48f4:	b7 95       	ror	r27
    48f6:	f7 95       	ror	r31
    48f8:	e7 95       	ror	r30
    48fa:	9f 5f       	subi	r25, 0xFF	; 255
    48fc:	c1 f7       	brne	.-16     	; 0x48ee <__mulsf3_pse+0x8c>
    48fe:	fe 2b       	or	r31, r30
    4900:	88 0f       	add	r24, r24
    4902:	91 1d       	adc	r25, r1
    4904:	96 95       	lsr	r25
    4906:	87 95       	ror	r24
    4908:	97 f9       	bld	r25, 7
    490a:	08 95       	ret

0000490c <square>:
    490c:	9b 01       	movw	r18, r22
    490e:	ac 01       	movw	r20, r24
    4910:	ac ca       	rjmp	.-2728   	; 0x3e6a <__mulsf3>

00004912 <__subsf3>:
    4912:	50 58       	subi	r21, 0x80	; 128

00004914 <__addsf3>:
    4914:	bb 27       	eor	r27, r27
    4916:	aa 27       	eor	r26, r26
    4918:	0e d0       	rcall	.+28     	; 0x4936 <__addsf3x>
    491a:	56 cf       	rjmp	.-340    	; 0x47c8 <__fp_round>
    491c:	47 df       	rcall	.-370    	; 0x47ac <__fp_pscA>
    491e:	30 f0       	brcs	.+12     	; 0x492c <__addsf3+0x18>
    4920:	4c df       	rcall	.-360    	; 0x47ba <__fp_pscB>
    4922:	20 f0       	brcs	.+8      	; 0x492c <__addsf3+0x18>
    4924:	31 f4       	brne	.+12     	; 0x4932 <__addsf3+0x1e>
    4926:	9f 3f       	cpi	r25, 0xFF	; 255
    4928:	11 f4       	brne	.+4      	; 0x492e <__addsf3+0x1a>
    492a:	1e f4       	brtc	.+6      	; 0x4932 <__addsf3+0x1e>
    492c:	17 cf       	rjmp	.-466    	; 0x475c <__fp_nan>
    492e:	0e f4       	brtc	.+2      	; 0x4932 <__addsf3+0x1e>
    4930:	e0 95       	com	r30
    4932:	e7 fb       	bst	r30, 7
    4934:	0d cf       	rjmp	.-486    	; 0x4750 <__fp_inf>

00004936 <__addsf3x>:
    4936:	e9 2f       	mov	r30, r25
    4938:	58 df       	rcall	.-336    	; 0x47ea <__fp_split3>
    493a:	80 f3       	brcs	.-32     	; 0x491c <__addsf3+0x8>
    493c:	ba 17       	cp	r27, r26
    493e:	62 07       	cpc	r22, r18
    4940:	73 07       	cpc	r23, r19
    4942:	84 07       	cpc	r24, r20
    4944:	95 07       	cpc	r25, r21
    4946:	18 f0       	brcs	.+6      	; 0x494e <__addsf3x+0x18>
    4948:	71 f4       	brne	.+28     	; 0x4966 <__addsf3x+0x30>
    494a:	9e f5       	brtc	.+102    	; 0x49b2 <__addsf3x+0x7c>
    494c:	70 cf       	rjmp	.-288    	; 0x482e <__fp_zero>
    494e:	0e f4       	brtc	.+2      	; 0x4952 <__addsf3x+0x1c>
    4950:	e0 95       	com	r30
    4952:	0b 2e       	mov	r0, r27
    4954:	ba 2f       	mov	r27, r26
    4956:	a0 2d       	mov	r26, r0
    4958:	0b 01       	movw	r0, r22
    495a:	b9 01       	movw	r22, r18
    495c:	90 01       	movw	r18, r0
    495e:	0c 01       	movw	r0, r24
    4960:	ca 01       	movw	r24, r20
    4962:	a0 01       	movw	r20, r0
    4964:	11 24       	eor	r1, r1
    4966:	ff 27       	eor	r31, r31
    4968:	59 1b       	sub	r21, r25
    496a:	99 f0       	breq	.+38     	; 0x4992 <__addsf3x+0x5c>
    496c:	59 3f       	cpi	r21, 0xF9	; 249
    496e:	50 f4       	brcc	.+20     	; 0x4984 <__addsf3x+0x4e>
    4970:	50 3e       	cpi	r21, 0xE0	; 224
    4972:	68 f1       	brcs	.+90     	; 0x49ce <__addsf3x+0x98>
    4974:	1a 16       	cp	r1, r26
    4976:	f0 40       	sbci	r31, 0x00	; 0
    4978:	a2 2f       	mov	r26, r18
    497a:	23 2f       	mov	r18, r19
    497c:	34 2f       	mov	r19, r20
    497e:	44 27       	eor	r20, r20
    4980:	58 5f       	subi	r21, 0xF8	; 248
    4982:	f3 cf       	rjmp	.-26     	; 0x496a <__addsf3x+0x34>
    4984:	46 95       	lsr	r20
    4986:	37 95       	ror	r19
    4988:	27 95       	ror	r18
    498a:	a7 95       	ror	r26
    498c:	f0 40       	sbci	r31, 0x00	; 0
    498e:	53 95       	inc	r21
    4990:	c9 f7       	brne	.-14     	; 0x4984 <__addsf3x+0x4e>
    4992:	7e f4       	brtc	.+30     	; 0x49b2 <__addsf3x+0x7c>
    4994:	1f 16       	cp	r1, r31
    4996:	ba 0b       	sbc	r27, r26
    4998:	62 0b       	sbc	r22, r18
    499a:	73 0b       	sbc	r23, r19
    499c:	84 0b       	sbc	r24, r20
    499e:	ba f0       	brmi	.+46     	; 0x49ce <__addsf3x+0x98>
    49a0:	91 50       	subi	r25, 0x01	; 1
    49a2:	a1 f0       	breq	.+40     	; 0x49cc <__addsf3x+0x96>
    49a4:	ff 0f       	add	r31, r31
    49a6:	bb 1f       	adc	r27, r27
    49a8:	66 1f       	adc	r22, r22
    49aa:	77 1f       	adc	r23, r23
    49ac:	88 1f       	adc	r24, r24
    49ae:	c2 f7       	brpl	.-16     	; 0x49a0 <__addsf3x+0x6a>
    49b0:	0e c0       	rjmp	.+28     	; 0x49ce <__addsf3x+0x98>
    49b2:	ba 0f       	add	r27, r26
    49b4:	62 1f       	adc	r22, r18
    49b6:	73 1f       	adc	r23, r19
    49b8:	84 1f       	adc	r24, r20
    49ba:	48 f4       	brcc	.+18     	; 0x49ce <__addsf3x+0x98>
    49bc:	87 95       	ror	r24
    49be:	77 95       	ror	r23
    49c0:	67 95       	ror	r22
    49c2:	b7 95       	ror	r27
    49c4:	f7 95       	ror	r31
    49c6:	9e 3f       	cpi	r25, 0xFE	; 254
    49c8:	08 f0       	brcs	.+2      	; 0x49cc <__addsf3x+0x96>
    49ca:	b3 cf       	rjmp	.-154    	; 0x4932 <__addsf3+0x1e>
    49cc:	93 95       	inc	r25
    49ce:	88 0f       	add	r24, r24
    49d0:	08 f0       	brcs	.+2      	; 0x49d4 <__addsf3x+0x9e>
    49d2:	99 27       	eor	r25, r25
    49d4:	ee 0f       	add	r30, r30
    49d6:	97 95       	ror	r25
    49d8:	87 95       	ror	r24
    49da:	08 95       	ret

000049dc <__divsf3>:
    49dc:	5e de       	rcall	.-836    	; 0x469a <__divsf3x>
    49de:	f4 ce       	rjmp	.-536    	; 0x47c8 <__fp_round>

000049e0 <_exit>:
    49e0:	ff cf       	rjmp	.-2      	; 0x49e0 <_exit>
