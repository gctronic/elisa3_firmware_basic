
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00004f1e  00004fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000133  00800324  00800324  000050d6  2**0
                  ALLOC
  3 .stab         000024b4  00000000  00000000  000050d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007c9  00000000  00000000  0000758c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00007d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ed7  00000000  00000000  0000800d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000415f  00000000  00000000  00008ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000165d  00000000  00000000  0000d043  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004a98  00000000  00000000  0000e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000690  00000000  00000000  00013138  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eaf  00000000  00000000  000137c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014d6  00000000  00000000  00014677  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000020d  00000000  00000000  00015b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000158  00000000  00000000  00015d5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__vector_32>
      84:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_42>
      ac:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	20 0b       	sbc	r18, r16
      e6:	04 0b       	sbc	r16, r20
      e8:	d2 0a       	sbc	r13, r18
      ea:	95 0b       	sbc	r25, r21
      ec:	5f 0b       	sbc	r21, r31
      ee:	88 0b       	sbc	r24, r24
      f0:	a9 0a       	sbc	r10, r25
      f2:	8d 0a       	sbc	r8, r29
      f4:	60 0a       	sbc	r6, r16
      f6:	48 0a       	sbc	r4, r24
      f8:	e9 09       	sbc	r30, r9
      fa:	e9 09       	sbc	r30, r9
      fc:	e9 09       	sbc	r30, r9
      fe:	e9 09       	sbc	r30, r9
     100:	e9 09       	sbc	r30, r9
     102:	e9 09       	sbc	r30, r9
     104:	3c 0a       	sbc	r3, r28
     106:	31 0a       	sbc	r3, r17
     108:	e9 09       	sbc	r30, r9
     10a:	e9 09       	sbc	r30, r9
     10c:	e9 09       	sbc	r30, r9
     10e:	e9 09       	sbc	r30, r9
     110:	e9 09       	sbc	r30, r9
     112:	e9 09       	sbc	r30, r9
     114:	e9 09       	sbc	r30, r9
     116:	e9 09       	sbc	r30, r9
     118:	e9 09       	sbc	r30, r9
     11a:	e9 09       	sbc	r30, r9
     11c:	e9 09       	sbc	r30, r9
     11e:	e9 09       	sbc	r30, r9
     120:	60 0a       	sbc	r6, r16
     122:	d2 0a       	sbc	r13, r18
     124:	25 0a       	sbc	r2, r21
     126:	20 0a       	sbc	r2, r16
     128:	e9 09       	sbc	r30, r9
     12a:	e9 09       	sbc	r30, r9
     12c:	e9 09       	sbc	r30, r9
     12e:	e9 09       	sbc	r30, r9
     130:	e9 09       	sbc	r30, r9
     132:	e9 09       	sbc	r30, r9
     134:	e9 09       	sbc	r30, r9
     136:	e9 09       	sbc	r30, r9
     138:	e9 09       	sbc	r30, r9
     13a:	e9 09       	sbc	r30, r9
     13c:	e9 09       	sbc	r30, r9
     13e:	e9 09       	sbc	r30, r9
     140:	5f 0b       	sbc	r21, r31
     142:	a9 0a       	sbc	r10, r25
     144:	e9 09       	sbc	r30, r9
     146:	e9 09       	sbc	r30, r9
     148:	20 0b       	sbc	r18, r16
     14a:	88 0b       	sbc	r24, r24
     14c:	49 0b       	sbc	r20, r25
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ee e1       	ldi	r30, 0x1E	; 30
     194:	ff e4       	ldi	r31, 0x4F	; 79
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a7 35       	cpi	r26, 0x57	; 87
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 8e 27 	jmp	0x4f1c	; 0x4f1c <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	1f 93       	push	r17

	choosePeripheral = 1;					// usart menu
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
     1c6:	0e 94 40 13 	call	0x2680	; 0x2680 <initPeripherals>

	calibrateSensors();
     1ca:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <calibrateSensors>

	srand(TCNT3);							// initialize random seed (used in obstacle avoidance)
     1ce:	80 91 94 00 	lds	r24, 0x0094
     1d2:	90 91 95 00 	lds	r25, 0x0095
     1d6:	0e 94 20 25 	call	0x4a40	; 0x4a40 <srand>

		if(delayCounter >= (PAUSE_2_SEC)) {
			
			delayCounter = 0;
			
			measBattery = 1;
     1da:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {

		//PORTB ^= (1 << 6); 				// toggle the green led

		currentSelector = getSelector();	// update selector position
     1dc:	0e 94 1b 13 	call	0x2636	; 0x2636 <getSelector>
     1e0:	80 93 23 04 	sts	0x0423, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1e4:	0e 94 4b 1c 	call	0x3896	; 0x3896 <readAccelXYZ>

		computeAngle();
     1e8:	0e 94 9a 20 	call	0x4134	; 0x4134 <computeAngle>
		if(delayCounter%(PAUSE_10_MSEC) == 0) {
			// do something every 10 milliseconds
		}
*/

		if(delayCounter >= (PAUSE_2_SEC)) {
     1ec:	80 91 21 04 	lds	r24, 0x0421
     1f0:	90 91 22 04 	lds	r25, 0x0422
     1f4:	2b e4       	ldi	r18, 0x4B	; 75
     1f6:	8e 31       	cpi	r24, 0x1E	; 30
     1f8:	92 07       	cpc	r25, r18
     1fa:	30 f0       	brcs	.+12     	; 0x208 <main+0x4a>
			
			delayCounter = 0;
     1fc:	10 92 22 04 	sts	0x0422, r1
     200:	10 92 21 04 	sts	0x0421, r1
			
			measBattery = 1;
     204:	10 93 c5 03 	sts	0x03C5, r17
			//sleep(20);

		}


		handleIRRemoteCommands();
     208:	0e 94 d7 09 	call	0x13ae	; 0x13ae <handleIRRemoteCommands>


		handleRFCommands();
     20c:	0e 94 c7 04 	call	0x98e	; 0x98e <handleRFCommands>


		if(currentSelector == 0) {	// no control
     210:	80 91 23 04 	lds	r24, 0x0423
     214:	88 23       	and	r24, r24
     216:	09 f0       	breq	.+2      	; 0x21a <main+0x5c>
     218:	66 c0       	rjmp	.+204    	; 0x2e6 <main+0x128>

			// compute velocities even if they aren't used
			if(compute_left_vel) {
     21a:	80 91 07 02 	lds	r24, 0x0207
     21e:	88 23       	and	r24, r24
     220:	91 f0       	breq	.+36     	; 0x246 <main+0x88>
				last_left_vel = left_vel_sum>>2;
     222:	80 91 e3 03 	lds	r24, 0x03E3
     226:	90 91 e4 03 	lds	r25, 0x03E4
     22a:	96 95       	lsr	r25
     22c:	87 95       	ror	r24
     22e:	96 95       	lsr	r25
     230:	87 95       	ror	r24
     232:	90 93 e8 03 	sts	0x03E8, r25
     236:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     23a:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     23e:	10 92 e4 03 	sts	0x03E4, r1
     242:	10 92 e3 03 	sts	0x03E3, r1
			}

			if(compute_right_vel) {
     246:	80 91 08 02 	lds	r24, 0x0208
     24a:	88 23       	and	r24, r24
     24c:	91 f0       	breq	.+36     	; 0x272 <main+0xb4>
				last_right_vel = right_vel_sum>>2;
     24e:	80 91 e5 03 	lds	r24, 0x03E5
     252:	90 91 e6 03 	lds	r25, 0x03E6
     256:	96 95       	lsr	r25
     258:	87 95       	ror	r24
     25a:	96 95       	lsr	r25
     25c:	87 95       	ror	r24
     25e:	90 93 ea 03 	sts	0x03EA, r25
     262:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     266:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     26a:	10 92 e6 03 	sts	0x03E6, r1
     26e:	10 92 e5 03 	sts	0x03E5, r1
			}


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     272:	80 91 ef 03 	lds	r24, 0x03EF
     276:	90 91 f0 03 	lds	r25, 0x03F0
     27a:	90 93 fc 03 	sts	0x03FC, r25
     27e:	80 93 fb 03 	sts	0x03FB, r24
			pwm_left_working = pwm_left_desired;
     282:	20 91 f1 03 	lds	r18, 0x03F1
     286:	30 91 f2 03 	lds	r19, 0x03F2
     28a:	30 93 fe 03 	sts	0x03FE, r19
     28e:	20 93 fd 03 	sts	0x03FD, r18
			if(obstacleAvoidanceEnabled) {
     292:	40 91 27 04 	lds	r20, 0x0427
     296:	44 23       	and	r20, r20
     298:	09 f0       	breq	.+2      	; 0x29c <main+0xde>
     29a:	a8 c0       	rjmp	.+336    	; 0x3ec <main+0x22e>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
	        pwm_left_desired_to_control = pwm_left_working;
     29c:	30 93 e2 03 	sts	0x03E2, r19
     2a0:	20 93 e1 03 	sts	0x03E1, r18
	        pwm_right_desired_to_control = pwm_right_working;
     2a4:	90 93 e0 03 	sts	0x03E0, r25
     2a8:	80 93 df 03 	sts	0x03DF, r24

			pwm_left = pwm_left_working;
     2ac:	30 93 ee 03 	sts	0x03EE, r19
     2b0:	20 93 ed 03 	sts	0x03ED, r18
			pwm_right = pwm_right_working;
     2b4:	90 93 ec 03 	sts	0x03EC, r25
     2b8:	80 93 eb 03 	sts	0x03EB, r24

			if(pwm_right > 0) {
     2bc:	18 16       	cp	r1, r24
     2be:	19 06       	cpc	r1, r25
     2c0:	0c f0       	brlt	.+2      	; 0x2c4 <main+0x106>
     2c2:	04 c1       	rjmp	.+520    	; 0x4cc <main+0x30e>
				OCR3A = (unsigned int)pwm_right;
     2c4:	90 93 99 00 	sts	0x0099, r25
     2c8:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     2cc:	80 91 ed 03 	lds	r24, 0x03ED
     2d0:	90 91 ee 03 	lds	r25, 0x03EE
     2d4:	18 16       	cp	r1, r24
     2d6:	19 06       	cpc	r1, r25
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <main+0x11e>
     2da:	ec c0       	rjmp	.+472    	; 0x4b4 <main+0x2f6>
				OCR4A = (unsigned int)pwm_left;
     2dc:	90 93 a9 00 	sts	0x00A9, r25
     2e0:	80 93 a8 00 	sts	0x00A8, r24
     2e4:	7b cf       	rjmp	.-266    	; 0x1dc <main+0x1e>
				OCR4A = 0;
				OCR4B = 0;
			}


		} else if(currentSelector == 1) {		// only horizontal speed control
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	09 f4       	brne	.+2      	; 0x2ec <main+0x12e>
     2ea:	8f c0       	rjmp	.+286    	; 0x40a <main+0x24c>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both horizontal and vertical speed control
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x134>
     2f0:	75 cf       	rjmp	.-278    	; 0x1dc <main+0x1e>

			pwm_left_working = pwm_left_desired;
     2f2:	20 91 f1 03 	lds	r18, 0x03F1
     2f6:	30 91 f2 03 	lds	r19, 0x03F2
     2fa:	30 93 fe 03 	sts	0x03FE, r19
     2fe:	20 93 fd 03 	sts	0x03FD, r18
			pwm_right_working = pwm_right_desired;
     302:	80 91 ef 03 	lds	r24, 0x03EF
     306:	90 91 f0 03 	lds	r25, 0x03F0
     30a:	90 93 fc 03 	sts	0x03FC, r25
     30e:	80 93 fb 03 	sts	0x03FB, r24
			if(obstacleAvoidanceEnabled) {
     312:	40 91 27 04 	lds	r20, 0x0427
     316:	44 23       	and	r20, r20
     318:	09 f0       	breq	.+2      	; 0x31c <main+0x15e>
     31a:	2a c1       	rjmp	.+596    	; 0x570 <main+0x3b2>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
			pwm_left_desired_to_control = pwm_left_working;
     31c:	30 93 e2 03 	sts	0x03E2, r19
     320:	20 93 e1 03 	sts	0x03E1, r18
			pwm_right_desired_to_control = pwm_right_working;
     324:	90 93 e0 03 	sts	0x03E0, r25
     328:	80 93 df 03 	sts	0x03DF, r24

			if(compute_left_vel) {
     32c:	80 91 07 02 	lds	r24, 0x0207
     330:	88 23       	and	r24, r24
     332:	59 f1       	breq	.+86     	; 0x38a <main+0x1cc>

				last_left_vel = left_vel_sum>>2;
     334:	80 91 e3 03 	lds	r24, 0x03E3
     338:	90 91 e4 03 	lds	r25, 0x03E4
     33c:	96 95       	lsr	r25
     33e:	87 95       	ror	r24
     340:	96 95       	lsr	r25
     342:	87 95       	ror	r24
     344:	90 93 e8 03 	sts	0x03E8, r25
     348:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     34c:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     350:	10 92 e4 03 	sts	0x03E4, r1
     354:	10 92 e3 03 	sts	0x03E3, r1

				if(robotPosition == HORIZONTAL_POS) {
     358:	80 91 16 02 	lds	r24, 0x0216
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	09 f4       	brne	.+2      	; 0x362 <main+0x1a4>
     360:	1b c1       	rjmp	.+566    	; 0x598 <main+0x3da>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
     362:	8d ef       	ldi	r24, 0xFD	; 253
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
     36a:	80 91 fd 03 	lds	r24, 0x03FD
     36e:	90 91 fe 03 	lds	r25, 0x03FE
     372:	90 93 ee 03 	sts	0x03EE, r25
     376:	80 93 ed 03 	sts	0x03ED, r24

				if(pwm_left > 0) {
     37a:	18 16       	cp	r1, r24
     37c:	19 06       	cpc	r1, r25
     37e:	0c f0       	brlt	.+2      	; 0x382 <main+0x1c4>
     380:	10 c1       	rjmp	.+544    	; 0x5a2 <main+0x3e4>
					OCR4A = (unsigned int)pwm_left;
     382:	90 93 a9 00 	sts	0x00A9, r25
     386:	80 93 a8 00 	sts	0x00A8, r24
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     38a:	80 91 08 02 	lds	r24, 0x0208
     38e:	88 23       	and	r24, r24
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1d6>
     392:	24 cf       	rjmp	.-440    	; 0x1dc <main+0x1e>

				last_right_vel = right_vel_sum>>2;
     394:	80 91 e5 03 	lds	r24, 0x03E5
     398:	90 91 e6 03 	lds	r25, 0x03E6
     39c:	96 95       	lsr	r25
     39e:	87 95       	ror	r24
     3a0:	96 95       	lsr	r25
     3a2:	87 95       	ror	r24
     3a4:	90 93 ea 03 	sts	0x03EA, r25
     3a8:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     3ac:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     3b0:	10 92 e6 03 	sts	0x03E6, r1
     3b4:	10 92 e5 03 	sts	0x03E5, r1

				if(robotPosition == HORIZONTAL_POS) {
     3b8:	80 91 16 02 	lds	r24, 0x0216
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x204>
     3c0:	e6 c0       	rjmp	.+460    	; 0x58e <main+0x3d0>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
     3c2:	8b ef       	ldi	r24, 0xFB	; 251
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
     3ca:	80 91 fb 03 	lds	r24, 0x03FB
     3ce:	90 91 fc 03 	lds	r25, 0x03FC
     3d2:	90 93 ec 03 	sts	0x03EC, r25
     3d6:	80 93 eb 03 	sts	0x03EB, r24

				if(pwm_right > 0) {
     3da:	18 16       	cp	r1, r24
     3dc:	19 06       	cpc	r1, r25
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <main+0x224>
     3e0:	5d c0       	rjmp	.+186    	; 0x49c <main+0x2de>
					OCR3A = (unsigned int)pwm_right;
     3e2:	90 93 99 00 	sts	0x0099, r25
     3e6:	80 93 98 00 	sts	0x0098, r24
     3ea:	f8 ce       	rjmp	.-528    	; 0x1dc <main+0x1e>


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
			pwm_left_working = pwm_left_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     3ec:	8d ef       	ldi	r24, 0xFD	; 253
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	6b ef       	ldi	r22, 0xFB	; 251
     3f2:	73 e0       	ldi	r23, 0x03	; 3
     3f4:	0e 94 a1 18 	call	0x3142	; 0x3142 <obstacleAvoidance>
     3f8:	20 91 fd 03 	lds	r18, 0x03FD
     3fc:	30 91 fe 03 	lds	r19, 0x03FE
     400:	80 91 fb 03 	lds	r24, 0x03FB
     404:	90 91 fc 03 	lds	r25, 0x03FC
     408:	49 cf       	rjmp	.-366    	; 0x29c <main+0xde>
			}


		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
     40a:	20 91 f1 03 	lds	r18, 0x03F1
     40e:	30 91 f2 03 	lds	r19, 0x03F2
     412:	30 93 fe 03 	sts	0x03FE, r19
     416:	20 93 fd 03 	sts	0x03FD, r18
			pwm_right_working = pwm_right_desired;
     41a:	80 91 ef 03 	lds	r24, 0x03EF
     41e:	90 91 f0 03 	lds	r25, 0x03F0
     422:	90 93 fc 03 	sts	0x03FC, r25
     426:	80 93 fb 03 	sts	0x03FB, r24
			if(obstacleAvoidanceEnabled) {
     42a:	40 91 27 04 	lds	r20, 0x0427
     42e:	44 23       	and	r20, r20
     430:	09 f0       	breq	.+2      	; 0x434 <main+0x276>
     432:	7f c0       	rjmp	.+254    	; 0x532 <main+0x374>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
			pwm_left_desired_to_control = pwm_left_working;
     434:	30 93 e2 03 	sts	0x03E2, r19
     438:	20 93 e1 03 	sts	0x03E1, r18
			pwm_right_desired_to_control = pwm_right_working;
     43c:	90 93 e0 03 	sts	0x03E0, r25
     440:	80 93 df 03 	sts	0x03DF, r24

			if(compute_left_vel) {
     444:	80 91 07 02 	lds	r24, 0x0207
     448:	88 23       	and	r24, r24
     44a:	09 f0       	breq	.+2      	; 0x44e <main+0x290>
     44c:	4b c0       	rjmp	.+150    	; 0x4e4 <main+0x326>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     44e:	80 91 08 02 	lds	r24, 0x0208
     452:	88 23       	and	r24, r24
     454:	09 f4       	brne	.+2      	; 0x458 <main+0x29a>
     456:	c2 ce       	rjmp	.-636    	; 0x1dc <main+0x1e>

				last_right_vel = right_vel_sum>>2;
     458:	80 91 e5 03 	lds	r24, 0x03E5
     45c:	90 91 e6 03 	lds	r25, 0x03E6
     460:	96 95       	lsr	r25
     462:	87 95       	ror	r24
     464:	96 95       	lsr	r25
     466:	87 95       	ror	r24
     468:	90 93 ea 03 	sts	0x03EA, r25
     46c:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     470:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     474:	10 92 e6 03 	sts	0x03E6, r1
     478:	10 92 e5 03 	sts	0x03E5, r1

				start_horizontal_speed_control_right(&pwm_right_working);
     47c:	8b ef       	ldi	r24, 0xFB	; 251
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <start_horizontal_speed_control_right>

				pwm_right = pwm_right_working;
     484:	80 91 fb 03 	lds	r24, 0x03FB
     488:	90 91 fc 03 	lds	r25, 0x03FC
     48c:	90 93 ec 03 	sts	0x03EC, r25
     490:	80 93 eb 03 	sts	0x03EB, r24

				if(pwm_right > 0) {
     494:	18 16       	cp	r1, r24
     496:	19 06       	cpc	r1, r25
     498:	0c f4       	brge	.+2      	; 0x49c <main+0x2de>
     49a:	a3 cf       	rjmp	.-186    	; 0x3e2 <main+0x224>

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0x2e4>
     4a0:	96 c0       	rjmp	.+300    	; 0x5ce <main+0x410>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
     4a2:	10 92 99 00 	sts	0x0099, r1
     4a6:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
     4aa:	10 92 9b 00 	sts	0x009B, r1
     4ae:	10 92 9a 00 	sts	0x009A, r1
     4b2:	94 ce       	rjmp	.-728    	; 0x1dc <main+0x1e>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	09 f0       	breq	.+2      	; 0x4ba <main+0x2fc>
     4b8:	4b c0       	rjmp	.+150    	; 0x550 <main+0x392>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
     4ba:	10 92 a9 00 	sts	0x00A9, r1
     4be:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
     4c2:	10 92 ab 00 	sts	0x00AB, r1
     4c6:	10 92 aa 00 	sts	0x00AA, r1
     4ca:	88 ce       	rjmp	.-752    	; 0x1dc <main+0x1e>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <main+0x314>
     4d0:	47 c0       	rjmp	.+142    	; 0x560 <main+0x3a2>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
     4d2:	10 92 99 00 	sts	0x0099, r1
     4d6:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
     4da:	10 92 9b 00 	sts	0x009B, r1
     4de:	10 92 9a 00 	sts	0x009A, r1
     4e2:	f4 ce       	rjmp	.-536    	; 0x2cc <main+0x10e>
			pwm_left_desired_to_control = pwm_left_working;
			pwm_right_desired_to_control = pwm_right_working;

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;	// 4 samples taken for measuring velocity
     4e4:	80 91 e3 03 	lds	r24, 0x03E3
     4e8:	90 91 e4 03 	lds	r25, 0x03E4
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
     4f4:	90 93 e8 03 	sts	0x03E8, r25
     4f8:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     4fc:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     500:	10 92 e4 03 	sts	0x03E4, r1
     504:	10 92 e3 03 	sts	0x03E3, r1

				start_horizontal_speed_control_left(&pwm_left_working);
     508:	8d ef       	ldi	r24, 0xFD	; 253
     50a:	93 e0       	ldi	r25, 0x03	; 3
     50c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <start_horizontal_speed_control_left>

				pwm_left = pwm_left_working;
     510:	80 91 fd 03 	lds	r24, 0x03FD
     514:	90 91 fe 03 	lds	r25, 0x03FE
     518:	90 93 ee 03 	sts	0x03EE, r25
     51c:	80 93 ed 03 	sts	0x03ED, r24

				if(pwm_left > 0) {
     520:	18 16       	cp	r1, r24
     522:	19 06       	cpc	r1, r25
     524:	0c f0       	brlt	.+2      	; 0x528 <main+0x36a>
     526:	48 c0       	rjmp	.+144    	; 0x5b8 <main+0x3fa>
					OCR4A = (unsigned int)pwm_left;
     528:	90 93 a9 00 	sts	0x00A9, r25
     52c:	80 93 a8 00 	sts	0x00A8, r24
     530:	8e cf       	rjmp	.-228    	; 0x44e <main+0x290>
		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
			pwm_right_working = pwm_right_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     532:	8d ef       	ldi	r24, 0xFD	; 253
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	6b ef       	ldi	r22, 0xFB	; 251
     538:	73 e0       	ldi	r23, 0x03	; 3
     53a:	0e 94 a1 18 	call	0x3142	; 0x3142 <obstacleAvoidance>
     53e:	20 91 fd 03 	lds	r18, 0x03FD
     542:	30 91 fe 03 	lds	r19, 0x03FE
     546:	80 91 fb 03 	lds	r24, 0x03FB
     54a:	90 91 fc 03 	lds	r25, 0x03FC
     54e:	72 cf       	rjmp	.-284    	; 0x434 <main+0x276>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
     550:	90 95       	com	r25
     552:	81 95       	neg	r24
     554:	9f 4f       	sbci	r25, 0xFF	; 255
     556:	90 93 ab 00 	sts	0x00AB, r25
     55a:	80 93 aa 00 	sts	0x00AA, r24
     55e:	3e ce       	rjmp	.-900    	; 0x1dc <main+0x1e>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
     560:	90 95       	com	r25
     562:	81 95       	neg	r24
     564:	9f 4f       	sbci	r25, 0xFF	; 255
     566:	90 93 9b 00 	sts	0x009B, r25
     56a:	80 93 9a 00 	sts	0x009A, r24
     56e:	ae ce       	rjmp	.-676    	; 0x2cc <main+0x10e>
		} else if(currentSelector == 2) {		// both horizontal and vertical speed control

			pwm_left_working = pwm_left_desired;
			pwm_right_working = pwm_right_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     570:	8d ef       	ldi	r24, 0xFD	; 253
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	6b ef       	ldi	r22, 0xFB	; 251
     576:	73 e0       	ldi	r23, 0x03	; 3
     578:	0e 94 a1 18 	call	0x3142	; 0x3142 <obstacleAvoidance>
     57c:	20 91 fd 03 	lds	r18, 0x03FD
     580:	30 91 fe 03 	lds	r19, 0x03FE
     584:	80 91 fb 03 	lds	r24, 0x03FB
     588:	90 91 fc 03 	lds	r25, 0x03FC
     58c:	c7 ce       	rjmp	.-626    	; 0x31c <main+0x15e>
				compute_right_vel = 0;
				right_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
     58e:	8b ef       	ldi	r24, 0xFB	; 251
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <start_horizontal_speed_control_right>
     596:	19 cf       	rjmp	.-462    	; 0x3ca <main+0x20c>
				compute_left_vel = 0;
				left_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
     598:	8d ef       	ldi	r24, 0xFD	; 253
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <start_horizontal_speed_control_left>
     5a0:	e4 ce       	rjmp	.-568    	; 0x36a <main+0x1ac>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	e1 f4       	brne	.+56     	; 0x5de <main+0x420>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5a6:	10 92 a9 00 	sts	0x00A9, r1
     5aa:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5ae:	10 92 ab 00 	sts	0x00AB, r1
     5b2:	10 92 aa 00 	sts	0x00AA, r1
     5b6:	e9 ce       	rjmp	.-558    	; 0x38a <main+0x1cc>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	c9 f4       	brne	.+50     	; 0x5ee <main+0x430>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5bc:	10 92 a9 00 	sts	0x00A9, r1
     5c0:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5c4:	10 92 ab 00 	sts	0x00AB, r1
     5c8:	10 92 aa 00 	sts	0x00AA, r1
     5cc:	40 cf       	rjmp	.-384    	; 0x44e <main+0x290>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
     5ce:	90 95       	com	r25
     5d0:	81 95       	neg	r24
     5d2:	9f 4f       	sbci	r25, 0xFF	; 255
     5d4:	90 93 9b 00 	sts	0x009B, r25
     5d8:	80 93 9a 00 	sts	0x009A, r24
     5dc:	ff cd       	rjmp	.-1026   	; 0x1dc <main+0x1e>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5de:	90 95       	com	r25
     5e0:	81 95       	neg	r24
     5e2:	9f 4f       	sbci	r25, 0xFF	; 255
     5e4:	90 93 ab 00 	sts	0x00AB, r25
     5e8:	80 93 aa 00 	sts	0x00AA, r24
     5ec:	ce ce       	rjmp	.-612    	; 0x38a <main+0x1cc>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5ee:	90 95       	com	r25
     5f0:	81 95       	neg	r24
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	90 93 ab 00 	sts	0x00AB, r25
     5f8:	80 93 aa 00 	sts	0x00AA, r24
     5fc:	28 cf       	rjmp	.-432    	; 0x44e <main+0x290>

000005fe <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     5fe:	84 b1       	in	r24, 0x04	; 4
     600:	80 7f       	andi	r24, 0xF0	; 240
     602:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     604:	84 b1       	in	r24, 0x04	; 4
     606:	87 60       	ori	r24, 0x07	; 7
     608:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     60a:	80 e5       	ldi	r24, 0x50	; 80
     60c:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     60e:	8d b5       	in	r24, 0x2d	; 45
     610:	81 60       	ori	r24, 0x01	; 1
     612:	8d bd       	out	0x2d, r24	; 45

}
     614:	08 95       	ret

00000616 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     616:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     618:	1d bc       	out	0x2d, r1	; 45
}
     61a:	08 95       	ret

0000061c <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     61c:	44 23       	and	r20, r20
     61e:	79 f0       	breq	.+30     	; 0x63e <SPI_ReadWrite_Block+0x22>
     620:	a8 2f       	mov	r26, r24
     622:	b9 2f       	mov	r27, r25
     624:	e6 2f       	mov	r30, r22
     626:	f7 2f       	mov	r31, r23
     628:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     62a:	9d 91       	ld	r25, X+
     62c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     634:	9e b5       	in	r25, 0x2e	; 46
     636:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	84 17       	cp	r24, r20
     63c:	b0 f3       	brcs	.-20     	; 0x62a <SPI_ReadWrite_Block+0xe>
     63e:	08 95       	ret

00000640 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     640:	66 23       	and	r22, r22
     642:	59 f0       	breq	.+22     	; 0x65a <SPI_Write_Block+0x1a>
     644:	e8 2f       	mov	r30, r24
     646:	f9 2f       	mov	r31, r25
     648:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     64a:	91 91       	ld	r25, Z+
     64c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	86 17       	cp	r24, r22
     658:	c0 f3       	brcs	.-16     	; 0x64a <SPI_Write_Block+0xa>
     65a:	08 95       	ret

0000065c <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     65c:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <SPI_Write_Byte+0x2>
    return SPDR;
     664:	8e b5       	in	r24, 0x2e	; 46
}
     666:	08 95       	ret

00000668 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	df 93       	push	r29
     66e:	cf 93       	push	r28
     670:	00 d0       	rcall	.+0      	; 0x672 <mirf_config+0xa>
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     676:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     678:	80 e2       	ldi	r24, 0x20	; 32
     67a:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     67e:	8d e0       	ldi	r24, 0x0D	; 13
     680:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     684:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     686:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     688:	83 e2       	ldi	r24, 0x23	; 35
     68a:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     694:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     696:	80 91 03 04 	lds	r24, 0x0403
     69a:	90 91 04 04 	lds	r25, 0x0404
     69e:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     6a0:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     6a2:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6a6:	80 e3       	ldi	r24, 0x30	; 48
     6a8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6ac:	8e 01       	movw	r16, r28
     6ae:	0f 5f       	subi	r16, 0xFF	; 255
     6b0:	1f 4f       	sbci	r17, 0xFF	; 255
     6b2:	c8 01       	movw	r24, r16
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     6ba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6be:	8a e2       	ldi	r24, 0x2A	; 42
     6c0:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6c4:	c8 01       	movw	r24, r16
     6c6:	63 e0       	ldi	r22, 0x03	; 3
     6c8:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     6cc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6d0:	81 e2       	ldi	r24, 0x21	; 33
     6d2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     6dc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6e0:	82 e2       	ldi	r24, 0x22	; 34
     6e2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     6ec:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6f0:	84 e2       	ldi	r24, 0x24	; 36
     6f2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6f6:	82 e1       	ldi	r24, 0x12	; 18
     6f8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     6fc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     700:	85 e2       	ldi	r24, 0x25	; 37
     702:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     706:	88 e2       	ldi	r24, 0x28	; 40
     708:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     70c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     70e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     710:	81 e3       	ldi	r24, 0x31	; 49
     712:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     716:	8d e0       	ldi	r24, 0x0D	; 13
     718:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     71c:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     71e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     720:	80 e5       	ldi	r24, 0x50	; 80
     722:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     726:	83 e7       	ldi	r24, 0x73	; 115
     728:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     72c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     72e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     730:	8c e3       	ldi	r24, 0x3C	; 60
     732:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     73c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     73e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     740:	8d e3       	ldi	r24, 0x3D	; 61
     742:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     74c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     74e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     750:	80 e2       	ldi	r24, 0x20	; 32
     752:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     756:	8f e0       	ldi	r24, 0x0F	; 15
     758:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     75c:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	08 95       	ret

0000076e <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     76e:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     770:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     772:	0e 94 34 03 	call	0x668	; 0x668 <mirf_config>
}
     776:	08 95       	ret

00000778 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     77e:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     780:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     782:	8a e2       	ldi	r24, 0x2A	; 42
     784:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     788:	ce 01       	movw	r24, r28
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     790:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     792:	2c 9a       	sbi	0x05, 4	; 5
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     7a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     7a8:	ce 01       	movw	r24, r28
     7aa:	65 e0       	ldi	r22, 0x05	; 5
     7ac:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     7b0:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     7b8:	80 91 2a 04 	lds	r24, 0x042A
     7bc:	88 23       	and	r24, r24
     7be:	11 f0       	breq	.+4      	; 0x7c4 <mirf_data_ready+0xc>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     7c2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     7c4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     7cc:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     7ce:	80 74       	andi	r24, 0x40	; 64
     7d0:	08 95       	ret

000007d2 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	0f 92       	push	r0
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     7dc:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     7de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     7e0:	87 e1       	ldi	r24, 0x17	; 23
     7e2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     7e6:	be 01       	movw	r22, r28
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	cb 01       	movw	r24, r22
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     7f4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f8:	81 70       	andi	r24, 0x01	; 1
     7fa:	0f 90       	pop	r0
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     802:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     804:	82 ee       	ldi	r24, 0xE2	; 226
     806:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     80a:	28 9a       	sbi	0x05, 0	; 5

}
     80c:	08 95       	ret

0000080e <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     814:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     816:	81 e6       	ldi	r24, 0x61	; 97
     818:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     81c:	ce 01       	movw	r24, r28
     81e:	be 01       	movw	r22, r28
     820:	4d e0       	ldi	r20, 0x0D	; 13
     822:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     826:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     828:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     82a:	87 e2       	ldi	r24, 0x27	; 39
     82c:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     830:	80 e4       	ldi	r24, 0x40	; 64
     832:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     836:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	0f 92       	push	r0
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     848:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     84a:	8f 71       	andi	r24, 0x1F	; 31
     84c:	80 62       	ori	r24, 0x20	; 32
     84e:	69 83       	std	Y+1, r22	; 0x01
     850:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     854:	69 81       	ldd	r22, Y+1	; 0x01
     856:	86 2f       	mov	r24, r22
     858:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     85c:	28 9a       	sbi	0x05, 0	; 5
}
     85e:	0f 90       	pop	r0
     860:	cf 91       	pop	r28
     862:	df 91       	pop	r29
     864:	08 95       	ret

00000866 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	0f 92       	push	r0
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     876:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     878:	8f 71       	andi	r24, 0x1F	; 31
     87a:	49 83       	std	Y+1, r20	; 0x01
     87c:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     880:	c8 01       	movw	r24, r16
     882:	b8 01       	movw	r22, r16
     884:	49 81       	ldd	r20, Y+1	; 0x01
     886:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     88a:	28 9a       	sbi	0x05, 0	; 5
}
     88c:	0f 90       	pop	r0
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	08 95       	ret

00000898 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	0f 92       	push	r0
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     8a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8aa:	8f 71       	andi	r24, 0x1F	; 31
     8ac:	80 62       	ori	r24, 0x20	; 32
     8ae:	49 83       	std	Y+1, r20	; 0x01
     8b0:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     8b4:	c8 01       	movw	r24, r16
     8b6:	49 81       	ldd	r20, Y+1	; 0x01
     8b8:	64 2f       	mov	r22, r20
     8ba:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;
     8be:	28 9a       	sbi	0x05, 0	; 5
}
     8c0:	0f 90       	pop	r0
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	0f 92       	push	r0
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     8dc:	80 91 2a 04 	lds	r24, 0x042A
     8e0:	88 23       	and	r24, r24
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <mirf_send+0x10>

    mirf_CE_lo;
     8e4:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 2a 04 	sts	0x042A, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     8ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8ee:	80 e2       	ldi	r24, 0x20	; 32
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     8f6:	8a e4       	ldi	r24, 0x4A	; 74
     8f8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     8fc:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     8fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     900:	81 ee       	ldi	r24, 0xE1	; 225
     902:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     906:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     908:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     90a:	80 ea       	ldi	r24, 0xA0	; 160
     90c:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     910:	c8 01       	movw	r24, r16
     912:	69 81       	ldd	r22, Y+1	; 0x01
     914:	0e 94 20 03 	call	0x640	; 0x640 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     918:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     91a:	2c 9a       	sbi	0x05, 4	; 5
}
     91c:	0f 90       	pop	r0
     91e:	cf 91       	pop	r28
     920:	df 91       	pop	r29
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	0f 92       	push	r0
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	18 2f       	mov	r17, r24
     93c:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     93e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     940:	81 ee       	ldi	r24, 0xE1	; 225
     942:	99 83       	std	Y+1, r25	; 0x01
     944:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     948:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     94a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     94c:	88 ea       	ldi	r24, 0xA8	; 168
     94e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     952:	99 81       	ldd	r25, Y+1	; 0x01
     954:	00 23       	and	r16, r16
     956:	61 f0       	breq	.+24     	; 0x970 <writeAckPayload+0x48>
     958:	61 2f       	mov	r22, r17
     95a:	79 2f       	mov	r23, r25
     95c:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     95e:	f7 01       	movw	r30, r14
     960:	81 91       	ld	r24, Z+
     962:	7f 01       	movw	r14, r30
     964:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     968:	8e 2d       	mov	r24, r14
     96a:	81 1b       	sub	r24, r17
     96c:	80 17       	cp	r24, r16
     96e:	b8 f3       	brcs	.-18     	; 0x95e <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     970:	28 9a       	sbi	0x05, 0	; 5


}
     972:	0f 90       	pop	r0
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	08 95       	ret

00000982 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     982:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     984:	81 ee       	ldi	r24, 0xE1	; 225
     986:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     98a:	28 9a       	sbi	0x05, 0	; 5

}
     98c:	08 95       	ret

0000098e <handleRFCommands>:

void handleRFCommands() {
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     994:	80 91 2a 04 	lds	r24, 0x042A
     998:	88 23       	and	r24, r24
     99a:	21 f0       	breq	.+8      	; 0x9a4 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     9a4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     9ac:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     9ae:	86 ff       	sbrs	r24, 6
     9b0:	f5 cf       	rjmp	.-22     	; 0x99c <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9b4:	87 e2       	ldi	r24, 0x27	; 39
     9b6:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9ba:	80 e7       	ldi	r24, 0x70	; 112
     9bc:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     9c0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     9c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     9c4:	81 e6       	ldi	r24, 0x61	; 97
     9c6:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     9ca:	87 e4       	ldi	r24, 0x47	; 71
     9cc:	94 e0       	ldi	r25, 0x04	; 4
     9ce:	bc 01       	movw	r22, r24
     9d0:	4d e0       	ldi	r20, 0x0D	; 13
     9d2:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     9d6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9da:	87 e2       	ldi	r24, 0x27	; 39
     9dc:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9e0:	80 e4       	ldi	r24, 0x40	; 64
     9e2:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     9e6:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     9e8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     9ea:	82 ee       	ldi	r24, 0xE2	; 226
     9ec:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     9f0:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     9f2:	60 91 47 04 	lds	r22, 0x0447
     9f6:	66 23       	and	r22, r22
     9f8:	09 f4       	brne	.+2      	; 0x9fc <handleRFCommands+0x6e>
     9fa:	b8 c1       	rjmp	.+880    	; 0xd6c <handleRFCommands+0x3de>
     9fc:	50 91 4b 04 	lds	r21, 0x044B
     a00:	40 91 4c 04 	lds	r20, 0x044C
     a04:	e0 91 48 04 	lds	r30, 0x0448
     a08:	70 91 49 04 	lds	r23, 0x0449

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     a0c:	25 2f       	mov	r18, r21
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	2f 77       	andi	r18, 0x7F	; 127
     a12:	30 70       	andi	r19, 0x00	; 0
     a14:	30 93 02 04 	sts	0x0402, r19
     a18:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     a1c:	84 2f       	mov	r24, r20
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	90 93 00 04 	sts	0x0400, r25
     a28:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     a2c:	57 fd       	sbrc	r21, 7
     a2e:	a6 c2       	rjmp	.+1356   	; 0xf7c <handleRFCommands+0x5ee>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	30 95       	com	r19
     a3a:	21 95       	neg	r18
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	30 93 f0 03 	sts	0x03F0, r19
     a42:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     a46:	47 fd       	sbrc	r20, 7
     a48:	a3 c2       	rjmp	.+1350   	; 0xf90 <handleRFCommands+0x602>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	90 95       	com	r25
     a54:	81 95       	neg	r24
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	90 93 f2 03 	sts	0x03F2, r25
     a5c:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     a60:	42 e0       	ldi	r20, 0x02	; 2
     a62:	21 30       	cpi	r18, 0x01	; 1
     a64:	34 07       	cpc	r19, r20
     a66:	44 f0       	brlt	.+16     	; 0xa78 <handleRFCommands+0xea>
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	52 e0       	ldi	r21, 0x02	; 2
     a6c:	50 93 f0 03 	sts	0x03F0, r21
     a70:	40 93 ef 03 	sts	0x03EF, r20
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     a78:	42 e0       	ldi	r20, 0x02	; 2
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	94 07       	cpc	r25, r20
     a7e:	34 f0       	brlt	.+12     	; 0xa8c <handleRFCommands+0xfe>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	90 93 f2 03 	sts	0x03F2, r25
     a88:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     a8c:	4e ef       	ldi	r20, 0xFE	; 254
     a8e:	20 30       	cpi	r18, 0x00	; 0
     a90:	34 07       	cpc	r19, r20
     a92:	34 f4       	brge	.+12     	; 0xaa0 <handleRFCommands+0x112>
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	5e ef       	ldi	r21, 0xFE	; 254
     a98:	50 93 f0 03 	sts	0x03F0, r21
     a9c:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     aa0:	2e ef       	ldi	r18, 0xFE	; 254
     aa2:	80 30       	cpi	r24, 0x00	; 0
     aa4:	92 07       	cpc	r25, r18
     aa6:	34 f4       	brge	.+12     	; 0xab4 <handleRFCommands+0x126>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	9e ef       	ldi	r25, 0xFE	; 254
     aac:	90 93 f2 03 	sts	0x03F2, r25
     ab0:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     ab4:	26 2f       	mov	r18, r22
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	30 93 40 04 	sts	0x0440, r19
     abc:	20 93 3f 04 	sts	0x043F, r18
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	f0 93 42 04 	sts	0x0442, r31
     ac6:	e0 93 41 04 	sts	0x0441, r30
     aca:	c7 2f       	mov	r28, r23
     acc:	d0 e0       	ldi	r29, 0x00	; 0
     ace:	d0 93 44 04 	sts	0x0444, r29
     ad2:	c0 93 43 04 	sts	0x0443, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     ad6:	92 2f       	mov	r25, r18
     ad8:	88 27       	eor	r24, r24
     ada:	82 1b       	sub	r24, r18
     adc:	93 0b       	sbc	r25, r19
     ade:	24 e6       	ldi	r18, 0x64	; 100
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	b9 01       	movw	r22, r18
     ae4:	0e 94 6f 24 	call	0x48de	; 0x48de <__udivmodhi4>
     ae8:	16 2f       	mov	r17, r22
     aea:	10 95       	com	r17
     aec:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     af0:	5e 2f       	mov	r21, r30
     af2:	44 27       	eor	r20, r20
     af4:	4e 1b       	sub	r20, r30
     af6:	5f 0b       	sbc	r21, r31
     af8:	ca 01       	movw	r24, r20
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 6f 24 	call	0x48de	; 0x48de <__udivmodhi4>
     b00:	60 95       	com	r22
     b02:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     b06:	5c 2f       	mov	r21, r28
     b08:	44 27       	eor	r20, r20
     b0a:	4c 1b       	sub	r20, r28
     b0c:	5d 0b       	sbc	r21, r29
     b0e:	ca 01       	movw	r24, r20
     b10:	b9 01       	movw	r22, r18
     b12:	0e 94 6f 24 	call	0x48de	; 0x48de <__udivmodhi4>
     b16:	60 95       	com	r22
     b18:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     b1c:	81 2f       	mov	r24, r17
     b1e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <updateRedLed>
		updateGreenLed(pwm_green);
     b22:	80 91 0d 02 	lds	r24, 0x020D
     b26:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <updateGreenLed>
		updateBlueLed(pwm_blue);
     b2a:	80 91 0e 02 	lds	r24, 0x020E
     b2e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     b32:	80 91 4a 04 	lds	r24, 0x044A
     b36:	80 ff       	sbrs	r24, 0
     b38:	25 c1       	rjmp	.+586    	; 0xd84 <handleRFCommands+0x3f6>
			LED_IR1_LOW;
     b3a:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     b3c:	81 ff       	sbrs	r24, 1
     b3e:	25 c1       	rjmp	.+586    	; 0xd8a <handleRFCommands+0x3fc>
			LED_IR2_LOW;
     b40:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     b42:	98 2f       	mov	r25, r24
     b44:	82 ff       	sbrs	r24, 2
     b46:	25 c1       	rjmp	.+586    	; 0xd92 <handleRFCommands+0x404>
			irEnabled = 1;
     b48:	21 e0       	ldi	r18, 0x01	; 1
     b4a:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     b4e:	84 fd       	sbrc	r24, 4
     b50:	24 c1       	rjmp	.+584    	; 0xd9a <handleRFCommands+0x40c>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b52:	86 ff       	sbrs	r24, 6
     b54:	29 c1       	rjmp	.+594    	; 0xda8 <handleRFCommands+0x41a>
			obstacleAvoidanceEnabled = 1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 27 04 	sts	0x0427, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     b5c:	97 fd       	sbrc	r25, 7
     b5e:	28 c1       	rjmp	.+592    	; 0xdb0 <handleRFCommands+0x422>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     b60:	10 92 28 04 	sts	0x0428, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     b64:	80 91 4d 04 	lds	r24, 0x044D
     b68:	80 ff       	sbrs	r24, 0
     b6a:	29 c1       	rjmp	.+594    	; 0xdbe <handleRFCommands+0x430>
				GRREEN_LED0_ON;
     b6c:	80 91 0b 01 	lds	r24, 0x010B
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     b76:	80 91 4d 04 	lds	r24, 0x044D
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	29 c1       	rjmp	.+594    	; 0xdd0 <handleRFCommands+0x442>
				GRREEN_LED1_ON;
     b7e:	80 91 0b 01 	lds	r24, 0x010B
     b82:	8d 7f       	andi	r24, 0xFD	; 253
     b84:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     b88:	80 91 4d 04 	lds	r24, 0x044D
     b8c:	82 ff       	sbrs	r24, 2
     b8e:	29 c1       	rjmp	.+594    	; 0xde2 <handleRFCommands+0x454>
				GRREEN_LED2_ON;
     b90:	80 91 0b 01 	lds	r24, 0x010B
     b94:	8b 7f       	andi	r24, 0xFB	; 251
     b96:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     b9a:	80 91 4d 04 	lds	r24, 0x044D
     b9e:	83 ff       	sbrs	r24, 3
     ba0:	29 c1       	rjmp	.+594    	; 0xdf4 <handleRFCommands+0x466>
				GRREEN_LED3_ON;
     ba2:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GRREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     ba4:	80 91 4d 04 	lds	r24, 0x044D
     ba8:	84 ff       	sbrs	r24, 4
     baa:	29 c1       	rjmp	.+594    	; 0xdfe <handleRFCommands+0x470>
				GRREEN_LED4_ON;
     bac:	80 91 0b 01 	lds	r24, 0x010B
     bb0:	8f 7e       	andi	r24, 0xEF	; 239
     bb2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     bb6:	80 91 4d 04 	lds	r24, 0x044D
     bba:	85 ff       	sbrs	r24, 5
     bbc:	29 c1       	rjmp	.+594    	; 0xe10 <handleRFCommands+0x482>
				GRREEN_LED5_ON;
     bbe:	80 91 0b 01 	lds	r24, 0x010B
     bc2:	8f 7d       	andi	r24, 0xDF	; 223
     bc4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     bc8:	80 91 4d 04 	lds	r24, 0x044D
     bcc:	86 ff       	sbrs	r24, 6
     bce:	29 c1       	rjmp	.+594    	; 0xe22 <handleRFCommands+0x494>
				GRREEN_LED6_ON;
     bd0:	80 91 0b 01 	lds	r24, 0x010B
     bd4:	8f 7b       	andi	r24, 0xBF	; 191
     bd6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     bda:	80 91 4d 04 	lds	r24, 0x044D
     bde:	87 fd       	sbrc	r24, 7
     be0:	29 c1       	rjmp	.+594    	; 0xe34 <handleRFCommands+0x4a6>
				GRREEN_LED7_ON;
			} else {
				GRREEN_LED7_OFF;
     be2:	80 91 0b 01 	lds	r24, 0x010B
     be6:	80 68       	ori	r24, 0x80	; 128
     be8:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     bec:	80 91 0b 02 	lds	r24, 0x020B
     bf0:	80 93 2f 04 	sts	0x042F, r24

		switch(packetId) {
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	09 f4       	brne	.+2      	; 0xbfa <handleRFCommands+0x26c>
     bf8:	29 c1       	rjmp	.+594    	; 0xe4c <handleRFCommands+0x4be>
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	08 f0       	brcs	.+2      	; 0xc00 <handleRFCommands+0x272>
     bfe:	66 c1       	rjmp	.+716    	; 0xecc <handleRFCommands+0x53e>
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	09 f0       	breq	.+2      	; 0xc06 <handleRFCommands+0x278>
     c04:	65 c0       	rjmp	.+202    	; 0xcd0 <handleRFCommands+0x342>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     c06:	90 91 5f 03 	lds	r25, 0x035F
     c0a:	80 91 60 03 	lds	r24, 0x0360
     c0e:	90 93 30 04 	sts	0x0430, r25
				ackPayload[2] = proximityResult[0]>>8;
     c12:	80 93 31 04 	sts	0x0431, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     c16:	90 91 61 03 	lds	r25, 0x0361
     c1a:	80 91 62 03 	lds	r24, 0x0362
     c1e:	90 93 32 04 	sts	0x0432, r25
				ackPayload[4] = proximityResult[1]>>8;
     c22:	80 93 33 04 	sts	0x0433, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     c26:	90 91 63 03 	lds	r25, 0x0363
     c2a:	80 91 64 03 	lds	r24, 0x0364
     c2e:	90 93 34 04 	sts	0x0434, r25
				ackPayload[6] = proximityResult[2]>>8;
     c32:	80 93 35 04 	sts	0x0435, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     c36:	90 91 65 03 	lds	r25, 0x0365
     c3a:	80 91 66 03 	lds	r24, 0x0366
     c3e:	90 93 36 04 	sts	0x0436, r25
				ackPayload[8] = proximityResult[3]>>8;
     c42:	80 93 37 04 	sts	0x0437, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     c46:	90 91 69 03 	lds	r25, 0x0369
     c4a:	80 91 6a 03 	lds	r24, 0x036A
     c4e:	90 93 38 04 	sts	0x0438, r25
				ackPayload[10] = proximityResult[5]>>8;
     c52:	80 93 39 04 	sts	0x0439, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     c56:	90 91 6b 03 	lds	r25, 0x036B
     c5a:	80 91 6c 03 	lds	r24, 0x036C
     c5e:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[12] = proximityResult[6]>>8;
     c62:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     c66:	90 91 6d 03 	lds	r25, 0x036D
     c6a:	80 91 6e 03 	lds	r24, 0x036E
     c6e:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[14] = proximityResult[7]>>8;
     c72:	80 93 3d 04 	sts	0x043D, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     c76:	30 91 03 01 	lds	r19, 0x0103
     c7a:	80 91 03 01 	lds	r24, 0x0103
     c7e:	20 91 03 01 	lds	r18, 0x0103
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	80 72       	andi	r24, 0x20	; 32
     c86:	90 70       	andi	r25, 0x00	; 0
     c88:	95 95       	asr	r25
     c8a:	87 95       	ror	r24
     c8c:	95 95       	asr	r25
     c8e:	87 95       	ror	r24
     c90:	95 95       	asr	r25
     c92:	87 95       	ror	r24
     c94:	95 95       	asr	r25
     c96:	87 95       	ror	r24
     c98:	95 95       	asr	r25
     c9a:	87 95       	ror	r24
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	22 1f       	adc	r18, r18
     ca2:	22 27       	eor	r18, r18
     ca4:	22 1f       	adc	r18, r18
     ca6:	22 0f       	add	r18, r18
     ca8:	22 0f       	add	r18, r18
     caa:	28 2b       	or	r18, r24
     cac:	83 2f       	mov	r24, r19
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	80 71       	andi	r24, 0x10	; 16
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	95 95       	asr	r25
     cb6:	87 95       	ror	r24
     cb8:	95 95       	asr	r25
     cba:	87 95       	ror	r24
     cbc:	95 95       	asr	r25
     cbe:	87 95       	ror	r24
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	28 2b       	or	r18, r24
     cc6:	20 93 3e 04 	sts	0x043E, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     cd0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     cd2:	81 ee       	ldi	r24, 0xE1	; 225
     cd4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
    mirf_CSN_hi;
     cd8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     cda:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     cdc:	88 ea       	ldi	r24, 0xA8	; 168
     cde:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     ce2:	80 91 2f 04 	lds	r24, 0x042F
     ce6:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     cea:	80 91 30 04 	lds	r24, 0x0430
     cee:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     cf2:	80 91 31 04 	lds	r24, 0x0431
     cf6:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     cfa:	80 91 32 04 	lds	r24, 0x0432
     cfe:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d02:	80 91 33 04 	lds	r24, 0x0433
     d06:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d0a:	80 91 34 04 	lds	r24, 0x0434
     d0e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d12:	80 91 35 04 	lds	r24, 0x0435
     d16:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d1a:	80 91 36 04 	lds	r24, 0x0436
     d1e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d22:	80 91 37 04 	lds	r24, 0x0437
     d26:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d2a:	80 91 38 04 	lds	r24, 0x0438
     d2e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d32:	80 91 39 04 	lds	r24, 0x0439
     d36:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d3a:	80 91 3a 04 	lds	r24, 0x043A
     d3e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d42:	80 91 3b 04 	lds	r24, 0x043B
     d46:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d4a:	80 91 3c 04 	lds	r24, 0x043C
     d4e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d52:	80 91 3d 04 	lds	r24, 0x043D
     d56:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
     d5a:	80 91 3e 04 	lds	r24, 0x043E
     d5e:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     d62:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     d6c:	e0 91 48 04 	lds	r30, 0x0448
     d70:	ee 23       	and	r30, r30
     d72:	09 f4       	brne	.+2      	; 0xd76 <handleRFCommands+0x3e8>
     d74:	16 c1       	rjmp	.+556    	; 0xfa2 <handleRFCommands+0x614>
     d76:	50 91 4b 04 	lds	r21, 0x044B
     d7a:	40 91 4c 04 	lds	r20, 0x044C
     d7e:	70 91 49 04 	lds	r23, 0x0449
     d82:	44 ce       	rjmp	.-888    	; 0xa0c <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     d84:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     d86:	81 fd       	sbrc	r24, 1
     d88:	db ce       	rjmp	.-586    	; 0xb40 <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     d8a:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     d8c:	98 2f       	mov	r25, r24
     d8e:	82 fd       	sbrc	r24, 2
     d90:	db ce       	rjmp	.-586    	; 0xb48 <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     d92:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     d96:	84 ff       	sbrs	r24, 4
     d98:	dc ce       	rjmp	.-584    	; 0xb52 <handleRFCommands+0x1c4>
			calibrateSensors();
     d9a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <calibrateSensors>
     d9e:	90 91 4a 04 	lds	r25, 0x044A
     da2:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     da4:	86 fd       	sbrc	r24, 6
     da6:	d7 ce       	rjmp	.-594    	; 0xb56 <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     da8:	10 92 27 04 	sts	0x0427, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     dac:	97 ff       	sbrs	r25, 7
     dae:	d8 ce       	rjmp	.-592    	; 0xb60 <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 28 04 	sts	0x0428, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     db6:	80 91 4d 04 	lds	r24, 0x044D
     dba:	80 fd       	sbrc	r24, 0
     dbc:	d7 ce       	rjmp	.-594    	; 0xb6c <handleRFCommands+0x1de>
				GRREEN_LED0_ON;
			} else {
				GRREEN_LED0_OFF;
     dbe:	80 91 0b 01 	lds	r24, 0x010B
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     dc8:	80 91 4d 04 	lds	r24, 0x044D
     dcc:	81 fd       	sbrc	r24, 1
     dce:	d7 ce       	rjmp	.-594    	; 0xb7e <handleRFCommands+0x1f0>
				GRREEN_LED1_ON;
			} else {
				GRREEN_LED1_OFF;
     dd0:	80 91 0b 01 	lds	r24, 0x010B
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     dda:	80 91 4d 04 	lds	r24, 0x044D
     dde:	82 fd       	sbrc	r24, 2
     de0:	d7 ce       	rjmp	.-594    	; 0xb90 <handleRFCommands+0x202>
				GRREEN_LED2_ON;
			} else {
				GRREEN_LED2_OFF;
     de2:	80 91 0b 01 	lds	r24, 0x010B
     de6:	84 60       	ori	r24, 0x04	; 4
     de8:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
     dec:	80 91 4d 04 	lds	r24, 0x044D
     df0:	83 fd       	sbrc	r24, 3
     df2:	d7 ce       	rjmp	.-594    	; 0xba2 <handleRFCommands+0x214>
				GRREEN_LED3_ON;
			} else {
				GRREEN_LED3_OFF;
     df4:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
     df6:	80 91 4d 04 	lds	r24, 0x044D
     dfa:	84 fd       	sbrc	r24, 4
     dfc:	d7 ce       	rjmp	.-594    	; 0xbac <handleRFCommands+0x21e>
				GRREEN_LED4_ON;
			} else {
				GRREEN_LED4_OFF;
     dfe:	80 91 0b 01 	lds	r24, 0x010B
     e02:	80 61       	ori	r24, 0x10	; 16
     e04:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
     e08:	80 91 4d 04 	lds	r24, 0x044D
     e0c:	85 fd       	sbrc	r24, 5
     e0e:	d7 ce       	rjmp	.-594    	; 0xbbe <handleRFCommands+0x230>
				GRREEN_LED5_ON;
			} else {
				GRREEN_LED5_OFF;
     e10:	80 91 0b 01 	lds	r24, 0x010B
     e14:	80 62       	ori	r24, 0x20	; 32
     e16:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
     e1a:	80 91 4d 04 	lds	r24, 0x044D
     e1e:	86 fd       	sbrc	r24, 6
     e20:	d7 ce       	rjmp	.-594    	; 0xbd0 <handleRFCommands+0x242>
				GRREEN_LED6_ON;
			} else {
				GRREEN_LED6_OFF;
     e22:	80 91 0b 01 	lds	r24, 0x010B
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
     e2c:	80 91 4d 04 	lds	r24, 0x044D
     e30:	87 ff       	sbrs	r24, 7
     e32:	d7 ce       	rjmp	.-594    	; 0xbe2 <handleRFCommands+0x254>
				GRREEN_LED7_ON;
     e34:	80 91 0b 01 	lds	r24, 0x010B
     e38:	8f 77       	andi	r24, 0x7F	; 127
     e3a:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     e3e:	80 91 0b 02 	lds	r24, 0x020B
     e42:	80 93 2f 04 	sts	0x042F, r24

		switch(packetId) {
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	09 f0       	breq	.+2      	; 0xe4c <handleRFCommands+0x4be>
     e4a:	d7 ce       	rjmp	.-594    	; 0xbfa <handleRFCommands+0x26c>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     e4c:	90 91 67 03 	lds	r25, 0x0367
     e50:	80 91 68 03 	lds	r24, 0x0368
     e54:	90 93 30 04 	sts	0x0430, r25
				ackPayload[2] = proximityResult[4]>>8;
     e58:	80 93 31 04 	sts	0x0431, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     e5c:	90 91 6f 03 	lds	r25, 0x036F
     e60:	80 91 70 03 	lds	r24, 0x0370
     e64:	90 93 32 04 	sts	0x0432, r25
				ackPayload[4] = proximityResult[8]>>8;
     e68:	80 93 33 04 	sts	0x0433, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     e6c:	90 91 71 03 	lds	r25, 0x0371
     e70:	80 91 72 03 	lds	r24, 0x0372
     e74:	90 93 34 04 	sts	0x0434, r25
				ackPayload[6] = proximityResult[9]>>8;
     e78:	80 93 35 04 	sts	0x0435, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     e7c:	90 91 73 03 	lds	r25, 0x0373
     e80:	80 91 74 03 	lds	r24, 0x0374
     e84:	90 93 36 04 	sts	0x0436, r25
				ackPayload[8] = proximityResult[10]>>8;
     e88:	80 93 37 04 	sts	0x0437, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     e8c:	90 91 75 03 	lds	r25, 0x0375
     e90:	80 91 76 03 	lds	r24, 0x0376
     e94:	90 93 38 04 	sts	0x0438, r25
				ackPayload[10] = proximityResult[11]>>8;
     e98:	80 93 39 04 	sts	0x0439, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     e9c:	90 91 0c 04 	lds	r25, 0x040C
     ea0:	80 91 0d 04 	lds	r24, 0x040D
     ea4:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[12] = accX>>8;
     ea8:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[13] = accY&0xFF;
     eac:	90 91 0e 04 	lds	r25, 0x040E
     eb0:	80 91 0f 04 	lds	r24, 0x040F
     eb4:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[14] = accY>>8;
     eb8:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[15] = irCommand;
     ebc:	80 91 07 04 	lds	r24, 0x0407
     ec0:	80 93 3e 04 	sts	0x043E, r24
				packetId = 5;
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	80 93 0b 02 	sts	0x020B, r24
				break;
     eca:	02 cf       	rjmp	.-508    	; 0xcd0 <handleRFCommands+0x342>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     ecc:	85 30       	cpi	r24, 0x05	; 5
     ece:	09 f4       	brne	.+2      	; 0xed2 <handleRFCommands+0x544>
     ed0:	7d c0       	rjmp	.+250    	; 0xfcc <handleRFCommands+0x63e>
     ed2:	86 30       	cpi	r24, 0x06	; 6
     ed4:	09 f0       	breq	.+2      	; 0xed8 <handleRFCommands+0x54a>
     ed6:	fc ce       	rjmp	.-520    	; 0xcd0 <handleRFCommands+0x342>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     ed8:	80 91 3f 03 	lds	r24, 0x033F
     edc:	90 91 40 03 	lds	r25, 0x0340
     ee0:	80 93 30 04 	sts	0x0430, r24
				ackPayload[2] = proximityValue[8]>>8;
     ee4:	80 91 3f 03 	lds	r24, 0x033F
     ee8:	90 91 40 03 	lds	r25, 0x0340
     eec:	90 93 31 04 	sts	0x0431, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     ef0:	80 91 4f 03 	lds	r24, 0x034F
     ef4:	90 91 50 03 	lds	r25, 0x0350
     ef8:	80 93 32 04 	sts	0x0432, r24
				ackPayload[4] = proximityValue[16]>>8;
     efc:	80 91 4f 03 	lds	r24, 0x034F
     f00:	90 91 50 03 	lds	r25, 0x0350
     f04:	90 93 33 04 	sts	0x0433, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     f08:	80 91 53 03 	lds	r24, 0x0353
     f0c:	90 91 54 03 	lds	r25, 0x0354
     f10:	80 93 34 04 	sts	0x0434, r24
				ackPayload[6] = proximityValue[18]>>8;
     f14:	80 91 53 03 	lds	r24, 0x0353
     f18:	90 91 54 03 	lds	r25, 0x0354
     f1c:	90 93 35 04 	sts	0x0435, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     f20:	80 91 57 03 	lds	r24, 0x0357
     f24:	90 91 58 03 	lds	r25, 0x0358
     f28:	80 93 36 04 	sts	0x0436, r24
				ackPayload[8] = proximityValue[20]>>8;
     f2c:	80 91 57 03 	lds	r24, 0x0357
     f30:	90 91 58 03 	lds	r25, 0x0358
     f34:	90 93 37 04 	sts	0x0437, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     f38:	80 91 5b 03 	lds	r24, 0x035B
     f3c:	90 91 5c 03 	lds	r25, 0x035C
     f40:	80 93 38 04 	sts	0x0438, r24
				ackPayload[10] = proximityValue[22]>>8;
     f44:	80 91 5b 03 	lds	r24, 0x035B
     f48:	90 91 5c 03 	lds	r25, 0x035C
     f4c:	90 93 39 04 	sts	0x0439, r25
				ackPayload[11] = accZ&0xFF;
     f50:	90 91 10 04 	lds	r25, 0x0410
     f54:	80 91 11 04 	lds	r24, 0x0411
     f58:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[12] = accZ>>8;
     f5c:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[13] = batteryLevel&0xFF;
     f60:	90 91 c3 03 	lds	r25, 0x03C3
     f64:	80 91 c4 03 	lds	r24, 0x03C4
     f68:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[14] = batteryLevel>>8;
     f6c:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[15] = 0;
     f70:	10 92 3e 04 	sts	0x043E, r1
				packetId = 3;
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	80 93 0b 02 	sts	0x020B, r24
				break;
     f7a:	aa ce       	rjmp	.-684    	; 0xcd0 <handleRFCommands+0x342>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	22 0f       	add	r18, r18
     f82:	33 1f       	adc	r19, r19
     f84:	30 93 f0 03 	sts	0x03F0, r19
     f88:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     f8c:	47 ff       	sbrs	r20, 7
     f8e:	5d cd       	rjmp	.-1350   	; 0xa4a <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	90 93 f2 03 	sts	0x03F2, r25
     f9c:	80 93 f1 03 	sts	0x03F1, r24
     fa0:	5f cd       	rjmp	.-1346   	; 0xa60 <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     fa2:	70 91 49 04 	lds	r23, 0x0449
     fa6:	77 23       	and	r23, r23
     fa8:	61 f4       	brne	.+24     	; 0xfc2 <handleRFCommands+0x634>
     faa:	80 91 4a 04 	lds	r24, 0x044A
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	41 f4       	brne	.+16     	; 0xfc2 <handleRFCommands+0x634>
     fb2:	50 91 4b 04 	lds	r21, 0x044B
     fb6:	55 23       	and	r21, r21
     fb8:	09 f4       	brne	.+2      	; 0xfbc <handleRFCommands+0x62e>
     fba:	64 c0       	rjmp	.+200    	; 0x1084 <handleRFCommands+0x6f6>
     fbc:	40 91 4c 04 	lds	r20, 0x044C
     fc0:	25 cd       	rjmp	.-1462   	; 0xa0c <handleRFCommands+0x7e>
     fc2:	50 91 4b 04 	lds	r21, 0x044B
     fc6:	40 91 4c 04 	lds	r20, 0x044C
     fca:	20 cd       	rjmp	.-1472   	; 0xa0c <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     fcc:	80 91 2f 03 	lds	r24, 0x032F
     fd0:	90 91 30 03 	lds	r25, 0x0330
     fd4:	80 93 30 04 	sts	0x0430, r24
				ackPayload[2] = proximityValue[0]>>8;
     fd8:	80 91 2f 03 	lds	r24, 0x032F
     fdc:	90 91 30 03 	lds	r25, 0x0330
     fe0:	90 93 31 04 	sts	0x0431, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     fe4:	80 91 33 03 	lds	r24, 0x0333
     fe8:	90 91 34 03 	lds	r25, 0x0334
     fec:	80 93 32 04 	sts	0x0432, r24
				ackPayload[4] = proximityValue[2]>>8;
     ff0:	80 91 33 03 	lds	r24, 0x0333
     ff4:	90 91 34 03 	lds	r25, 0x0334
     ff8:	90 93 33 04 	sts	0x0433, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     ffc:	80 91 37 03 	lds	r24, 0x0337
    1000:	90 91 38 03 	lds	r25, 0x0338
    1004:	80 93 34 04 	sts	0x0434, r24
				ackPayload[6] = proximityValue[4]>>8;
    1008:	80 91 37 03 	lds	r24, 0x0337
    100c:	90 91 38 03 	lds	r25, 0x0338
    1010:	90 93 35 04 	sts	0x0435, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1014:	80 91 3b 03 	lds	r24, 0x033B
    1018:	90 91 3c 03 	lds	r25, 0x033C
    101c:	80 93 36 04 	sts	0x0436, r24
				ackPayload[8] = proximityValue[6]>>8;
    1020:	80 91 3b 03 	lds	r24, 0x033B
    1024:	90 91 3c 03 	lds	r25, 0x033C
    1028:	90 93 37 04 	sts	0x0437, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    102c:	80 91 43 03 	lds	r24, 0x0343
    1030:	90 91 44 03 	lds	r25, 0x0344
    1034:	80 93 38 04 	sts	0x0438, r24
				ackPayload[10] = proximityValue[10]>>8;
    1038:	80 91 43 03 	lds	r24, 0x0343
    103c:	90 91 44 03 	lds	r25, 0x0344
    1040:	90 93 39 04 	sts	0x0439, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1044:	80 91 47 03 	lds	r24, 0x0347
    1048:	90 91 48 03 	lds	r25, 0x0348
    104c:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[12] = proximityValue[12]>>8;
    1050:	80 91 47 03 	lds	r24, 0x0347
    1054:	90 91 48 03 	lds	r25, 0x0348
    1058:	90 93 3b 04 	sts	0x043B, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    105c:	80 91 4b 03 	lds	r24, 0x034B
    1060:	90 91 4c 03 	lds	r25, 0x034C
    1064:	80 93 3c 04 	sts	0x043C, r24
				ackPayload[14] = proximityValue[14]>>8;
    1068:	80 91 4b 03 	lds	r24, 0x034B
    106c:	90 91 4c 03 	lds	r25, 0x034C
    1070:	90 93 3d 04 	sts	0x043D, r25
				ackPayload[15] = currentSelector;
    1074:	80 91 23 04 	lds	r24, 0x0423
    1078:	80 93 3e 04 	sts	0x043E, r24
				packetId = 6;
    107c:	86 e0       	ldi	r24, 0x06	; 6
    107e:	80 93 0b 02 	sts	0x020B, r24
				break;
    1082:	26 ce       	rjmp	.-948    	; 0xcd0 <handleRFCommands+0x342>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1084:	40 91 4c 04 	lds	r20, 0x044C
    1088:	44 23       	and	r20, r20
    108a:	79 f0       	breq	.+30     	; 0x10aa <handleRFCommands+0x71c>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    108c:	10 92 02 04 	sts	0x0402, r1
    1090:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1094:	84 2f       	mov	r24, r20
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	90 70       	andi	r25, 0x00	; 0
    109c:	90 93 00 04 	sts	0x0400, r25
    10a0:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	c3 cc       	rjmp	.-1658   	; 0xa30 <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    10aa:	8c e3       	ldi	r24, 0x3C	; 60
    10ac:	0e 94 7f 13 	call	0x26fe	; 0x26fe <sleep>
    10b0:	50 91 4b 04 	lds	r21, 0x044B
    10b4:	40 91 4c 04 	lds	r20, 0x044C
    10b8:	60 91 47 04 	lds	r22, 0x0447
    10bc:	e0 91 48 04 	lds	r30, 0x0448
    10c0:	70 91 49 04 	lds	r23, 0x0449
    10c4:	a3 cc       	rjmp	.-1722   	; 0xa0c <handleRFCommands+0x7e>

000010c6 <init_ir_remote_control>:
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    10c6:	e8 e6       	ldi	r30, 0x68	; 104
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    10d0:	ec e6       	ldi	r30, 0x6C	; 108
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    10da:	e0 eb       	ldi	r30, 0xB0	; 176
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	80 83       	st	Z, r24

}
    10e4:	08 95       	ret

000010e6 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    10f2:	80 91 11 02 	lds	r24, 0x0211
    10f6:	88 23       	and	r24, r24
    10f8:	21 f1       	breq	.+72     	; 0x1142 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    10fa:	80 91 03 01 	lds	r24, 0x0103
    10fe:	86 fd       	sbrc	r24, 6
    1100:	20 c0       	rjmp	.+64     	; 0x1142 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1102:	80 91 68 00 	lds	r24, 0x0068
    1106:	8d 7f       	andi	r24, 0xFD	; 253
    1108:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    110c:	80 91 6c 00 	lds	r24, 0x006C
    1110:	8f 77       	andi	r24, 0x7F	; 127
    1112:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
    111c:	8d e0       	ldi	r24, 0x0D	; 13
    111e:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1122:	80 91 b1 00 	lds	r24, 0x00B1
    1126:	86 60       	ori	r24, 0x06	; 6
    1128:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    112c:	80 91 70 00 	lds	r24, 0x0070
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1136:	10 92 26 03 	sts	0x0326, r1
    113a:	10 92 27 03 	sts	0x0327, r1
    113e:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    1142:	8f 91       	pop	r24
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	2f 93       	push	r18
    115a:	3f 93       	push	r19
    115c:	4f 93       	push	r20
    115e:	5f 93       	push	r21
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1164:	80 91 b1 00 	lds	r24, 0x00B1
    1168:	88 7f       	andi	r24, 0xF8	; 248
    116a:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    116e:	80 91 12 02 	lds	r24, 0x0212
    1172:	88 23       	and	r24, r24
    1174:	a9 f0       	breq	.+42     	; 0x11a0 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1176:	80 91 03 01 	lds	r24, 0x0103
    117a:	86 ff       	sbrs	r24, 6
    117c:	65 c0       	rjmp	.+202    	; 0x1248 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    117e:	80 91 68 00 	lds	r24, 0x0068
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1188:	80 91 6c 00 	lds	r24, 0x006C
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	9f ef       	ldi	r25, 0xFF	; 255
    1196:	90 93 02 02 	sts	0x0202, r25
    119a:	80 93 01 02 	sts	0x0201, r24
    119e:	49 c0       	rjmp	.+146    	; 0x1232 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    11a0:	80 91 01 02 	lds	r24, 0x0201
    11a4:	90 91 02 02 	lds	r25, 0x0202
    11a8:	2f ef       	ldi	r18, 0xFF	; 255
    11aa:	8f 3f       	cpi	r24, 0xFF	; 255
    11ac:	92 07       	cpc	r25, r18
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <__vector_13+0x64>
    11b0:	63 c0       	rjmp	.+198    	; 0x1278 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__vector_13+0x6c>
    11b8:	98 c0       	rjmp	.+304    	; 0x12ea <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    11ba:	9c 01       	movw	r18, r24
    11bc:	22 50       	subi	r18, 0x02	; 2
    11be:	30 40       	sbci	r19, 0x00	; 0
    11c0:	25 30       	cpi	r18, 0x05	; 5
    11c2:	31 05       	cpc	r19, r1
    11c4:	08 f4       	brcc	.+2      	; 0x11c8 <__vector_13+0x7a>
    11c6:	67 c0       	rjmp	.+206    	; 0x1296 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    11c8:	9c 01       	movw	r18, r24
    11ca:	27 50       	subi	r18, 0x07	; 7
    11cc:	30 40       	sbci	r19, 0x00	; 0
    11ce:	26 30       	cpi	r18, 0x06	; 6
    11d0:	31 05       	cpc	r19, r1
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <__vector_13+0x88>
    11d4:	bd c0       	rjmp	.+378    	; 0x1350 <__vector_13+0x202>

				OCR2A = 54;
    11d6:	26 e3       	ldi	r18, 0x36	; 54
    11d8:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    11dc:	20 91 b1 00 	lds	r18, 0x00B1
    11e0:	26 60       	ori	r18, 0x06	; 6
    11e2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    11e6:	20 91 70 00 	lds	r18, 0x0070
    11ea:	22 60       	ori	r18, 0x02	; 2
    11ec:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    11f0:	20 91 03 01 	lds	r18, 0x0103
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	20 74       	andi	r18, 0x40	; 64
    11f8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    11fa:	00 24       	eor	r0, r0
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	00 1c       	adc	r0, r0
    1202:	22 0f       	add	r18, r18
    1204:	33 1f       	adc	r19, r19
    1206:	00 1c       	adc	r0, r0
    1208:	23 2f       	mov	r18, r19
    120a:	30 2d       	mov	r19, r0
    120c:	4c e0       	ldi	r20, 0x0C	; 12
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	48 1b       	sub	r20, r24
    1212:	59 0b       	sbc	r21, r25
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__vector_13+0xcc>
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	4a 95       	dec	r20
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <__vector_13+0xc8>
				data_temp += temp;
    121e:	40 91 26 03 	lds	r20, 0x0326
    1222:	42 0f       	add	r20, r18
    1224:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1228:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    122a:	90 93 02 02 	sts	0x0202, r25
    122e:	80 93 01 02 	sts	0x0201, r24

		}

}
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1248:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    124c:	83 e3       	ldi	r24, 0x33	; 51
    124e:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1252:	80 91 b1 00 	lds	r24, 0x00B1
    1256:	86 60       	ori	r24, 0x06	; 6
    1258:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    125c:	80 91 70 00 	lds	r24, 0x0070
    1260:	82 60       	ori	r24, 0x02	; 2
    1262:	80 93 70 00 	sts	0x0070, r24
    1266:	80 91 01 02 	lds	r24, 0x0201
    126a:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    126e:	2f ef       	ldi	r18, 0xFF	; 255
    1270:	8f 3f       	cpi	r24, 0xFF	; 255
    1272:	92 07       	cpc	r25, r18
    1274:	c9 f6       	brne	.-78     	; 0x1228 <__vector_13+0xda>
    1276:	dd cf       	rjmp	.-70     	; 0x1232 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1278:	20 91 03 01 	lds	r18, 0x0103
    127c:	26 ff       	sbrs	r18, 6
    127e:	52 c0       	rjmp	.+164    	; 0x1324 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1280:	20 91 68 00 	lds	r18, 0x0068
    1284:	22 60       	ori	r18, 0x02	; 2
    1286:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    128a:	20 91 6c 00 	lds	r18, 0x006C
    128e:	20 68       	ori	r18, 0x80	; 128
    1290:	20 93 6c 00 	sts	0x006C, r18
    1294:	ce cf       	rjmp	.-100    	; 0x1232 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1296:	26 e3       	ldi	r18, 0x36	; 54
    1298:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    129c:	20 91 b1 00 	lds	r18, 0x00B1
    12a0:	26 60       	ori	r18, 0x06	; 6
    12a2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    12a6:	20 91 70 00 	lds	r18, 0x0070
    12aa:	22 60       	ori	r18, 0x02	; 2
    12ac:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    12b0:	20 91 03 01 	lds	r18, 0x0103
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	20 74       	andi	r18, 0x40	; 64
    12b8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    12ba:	00 24       	eor	r0, r0
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	00 1c       	adc	r0, r0
    12c2:	22 0f       	add	r18, r18
    12c4:	33 1f       	adc	r19, r19
    12c6:	00 1c       	adc	r0, r0
    12c8:	23 2f       	mov	r18, r19
    12ca:	30 2d       	mov	r19, r0
    12cc:	46 e0       	ldi	r20, 0x06	; 6
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	48 1b       	sub	r20, r24
    12d2:	59 0b       	sbc	r21, r25
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <__vector_13+0x18c>
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	4a 95       	dec	r20
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <__vector_13+0x188>
				address_temp += temp;
    12de:	40 91 27 03 	lds	r20, 0x0327
    12e2:	42 0f       	add	r20, r18
    12e4:	40 93 27 03 	sts	0x0327, r20
    12e8:	9f cf       	rjmp	.-194    	; 0x1228 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    12ea:	20 91 03 01 	lds	r18, 0x0103
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	20 74       	andi	r18, 0x40	; 64
    12f2:	30 70       	andi	r19, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	23 2f       	mov	r18, r19
    12f8:	00 0c       	add	r0, r0
    12fa:	22 1f       	adc	r18, r18
    12fc:	33 0b       	sbc	r19, r19
    12fe:	00 0c       	add	r0, r0
    1300:	22 1f       	adc	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1308:	26 e3       	ldi	r18, 0x36	; 54
    130a:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    130e:	20 91 b1 00 	lds	r18, 0x00B1
    1312:	26 60       	ori	r18, 0x06	; 6
    1314:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1318:	20 91 70 00 	lds	r18, 0x0070
    131c:	22 60       	ori	r18, 0x02	; 2
    131e:	20 93 70 00 	sts	0x0070, r18
    1322:	82 cf       	rjmp	.-252    	; 0x1228 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1324:	8c e1       	ldi	r24, 0x1C	; 28
    1326:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    132a:	80 91 b1 00 	lds	r24, 0x00B1
    132e:	86 60       	ori	r24, 0x06	; 6
    1330:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1334:	80 91 70 00 	lds	r24, 0x0070
    1338:	82 60       	ori	r24, 0x02	; 2
    133a:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    133e:	10 92 26 03 	sts	0x0326, r1
    1342:	10 92 27 03 	sts	0x0327, r1
    1346:	10 92 28 03 	sts	0x0328, r1
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	6d cf       	rjmp	.-294    	; 0x122a <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1350:	8d 30       	cpi	r24, 0x0D	; 13
    1352:	91 05       	cpc	r25, r1
    1354:	09 f0       	breq	.+2      	; 0x1358 <__vector_13+0x20a>
    1356:	68 cf       	rjmp	.-304    	; 0x1228 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1358:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    135c:	80 91 68 00 	lds	r24, 0x0068
    1360:	82 60       	ori	r24, 0x02	; 2
    1362:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1366:	80 91 6c 00 	lds	r24, 0x006C
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	90 93 02 02 	sts	0x0202, r25
    1378:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    137c:	80 91 28 03 	lds	r24, 0x0328
    1380:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1384:	80 91 27 03 	lds	r24, 0x0327
    1388:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    138c:	80 91 26 03 	lds	r24, 0x0326
    1390:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 08 04 	sts	0x0408, r24
    139a:	4b cf       	rjmp	.-362    	; 0x1232 <__vector_13+0xe4>

0000139c <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    139c:	80 91 00 02 	lds	r24, 0x0200
    13a0:	08 95       	ret

000013a2 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    13a2:	80 91 24 03 	lds	r24, 0x0324
    13a6:	08 95       	ret

000013a8 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    13a8:	80 91 25 03 	lds	r24, 0x0325
    13ac:	08 95       	ret

000013ae <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    13ae:	80 91 11 02 	lds	r24, 0x0211
    13b2:	88 23       	and	r24, r24
    13b4:	b1 f1       	breq	.+108    	; 0x1422 <handleIRRemoteCommands+0x74>

		if(command_received) {
    13b6:	80 91 08 04 	lds	r24, 0x0408
    13ba:	88 23       	and	r24, r24
    13bc:	91 f1       	breq	.+100    	; 0x1422 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    13be:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    13c2:	e0 93 07 04 	sts	0x0407, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    13c6:	10 92 08 04 	sts	0x0408, r1

			switch(irCommand) {
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	e5 33       	cpi	r30, 0x35	; 53
    13ce:	f1 05       	cpc	r31, r1
    13d0:	48 f1       	brcs	.+82     	; 0x1424 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    13d2:	20 91 ef 03 	lds	r18, 0x03EF
    13d6:	30 91 f0 03 	lds	r19, 0x03F0
    13da:	80 91 f1 03 	lds	r24, 0x03F1
    13de:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    13e2:	37 fd       	sbrc	r19, 7
    13e4:	27 c0       	rjmp	.+78     	; 0x1434 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    13e6:	35 95       	asr	r19
    13e8:	27 95       	ror	r18
    13ea:	35 95       	asr	r19
    13ec:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    13ee:	30 93 02 04 	sts	0x0402, r19
    13f2:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    13f6:	97 fd       	sbrc	r25, 7
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    13fa:	95 95       	asr	r25
    13fc:	87 95       	ror	r24
    13fe:	95 95       	asr	r25
    1400:	87 95       	ror	r24
    1402:	90 93 00 04 	sts	0x0400, r25
    1406:	80 93 ff 03 	sts	0x03FF, r24
    140a:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    140c:	90 95       	com	r25
    140e:	81 95       	neg	r24
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	95 95       	asr	r25
    1418:	87 95       	ror	r24
    141a:	90 93 00 04 	sts	0x0400, r25
    141e:	80 93 ff 03 	sts	0x03FF, r24
    1422:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1424:	ee 58       	subi	r30, 0x8E	; 142
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	05 90       	lpm	r0, Z+
    142e:	f4 91       	lpm	r31, Z+
    1430:	e0 2d       	mov	r30, r0
    1432:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1434:	30 95       	com	r19
    1436:	21 95       	neg	r18
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	d5 cf       	rjmp	.-86     	; 0x13e6 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    143c:	80 93 27 04 	sts	0x0427, r24
							cliffAvoidanceEnabled = 0;
    1440:	10 92 28 04 	sts	0x0428, r1
    1444:	c6 cf       	rjmp	.-116    	; 0x13d2 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1446:	10 92 27 04 	sts	0x0427, r1
							cliffAvoidanceEnabled = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	80 93 28 04 	sts	0x0428, r24
    1450:	20 91 ef 03 	lds	r18, 0x03EF
    1454:	30 91 f0 03 	lds	r19, 0x03F0
    1458:	80 91 f1 03 	lds	r24, 0x03F1
    145c:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1460:	c0 cf       	rjmp	.-128    	; 0x13e2 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1462:	10 92 27 04 	sts	0x0427, r1
    1466:	20 91 ef 03 	lds	r18, 0x03EF
    146a:	30 91 f0 03 	lds	r19, 0x03F0
    146e:	80 91 f1 03 	lds	r24, 0x03F1
    1472:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1476:	b5 cf       	rjmp	.-150    	; 0x13e2 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 27 04 	sts	0x0427, r24
    147e:	20 91 ef 03 	lds	r18, 0x03EF
    1482:	30 91 f0 03 	lds	r19, 0x03F0
    1486:	80 91 f1 03 	lds	r24, 0x03F1
    148a:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    148e:	a9 cf       	rjmp	.-174    	; 0x13e2 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1490:	80 91 f1 03 	lds	r24, 0x03F1
    1494:	90 91 f2 03 	lds	r25, 0x03F2
    1498:	4e 97       	sbiw	r24, 0x1e	; 30
    149a:	90 93 f2 03 	sts	0x03F2, r25
    149e:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    14a2:	2e ef       	ldi	r18, 0xFE	; 254
    14a4:	80 30       	cpi	r24, 0x00	; 0
    14a6:	92 07       	cpc	r25, r18
    14a8:	9c f5       	brge	.+102    	; 0x1510 <handleIRRemoteCommands+0x162>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	9e ef       	ldi	r25, 0xFE	; 254
    14ae:	90 93 f2 03 	sts	0x03F2, r25
    14b2:	80 93 f1 03 	sts	0x03F1, r24
    14b6:	20 91 ef 03 	lds	r18, 0x03EF
    14ba:	30 91 f0 03 	lds	r19, 0x03F0
    14be:	91 cf       	rjmp	.-222    	; 0x13e2 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    14c0:	20 91 ef 03 	lds	r18, 0x03EF
    14c4:	30 91 f0 03 	lds	r19, 0x03F0
    14c8:	80 91 ed 03 	lds	r24, 0x03ED
    14cc:	90 91 ee 03 	lds	r25, 0x03EE
    14d0:	28 17       	cp	r18, r24
    14d2:	39 07       	cpc	r19, r25
    14d4:	24 f0       	brlt	.+8      	; 0x14de <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    14d6:	20 91 f1 03 	lds	r18, 0x03F1
    14da:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    14de:	2e 51       	subi	r18, 0x1E	; 30
    14e0:	30 40       	sbci	r19, 0x00	; 0
    14e2:	30 93 f0 03 	sts	0x03F0, r19
    14e6:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    14ea:	c9 01       	movw	r24, r18
    14ec:	30 93 f2 03 	sts	0x03F2, r19
    14f0:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    14f4:	4e ef       	ldi	r20, 0xFE	; 254
    14f6:	20 30       	cpi	r18, 0x00	; 0
    14f8:	34 07       	cpc	r19, r20
    14fa:	34 f4       	brge	.+12     	; 0x1508 <handleIRRemoteCommands+0x15a>
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	5e ef       	ldi	r21, 0xFE	; 254
    1500:	50 93 f0 03 	sts	0x03F0, r21
    1504:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    1508:	4e ef       	ldi	r20, 0xFE	; 254
    150a:	20 30       	cpi	r18, 0x00	; 0
    150c:	34 07       	cpc	r19, r20
    150e:	6c f2       	brlt	.-102    	; 0x14aa <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1510:	20 91 ef 03 	lds	r18, 0x03EF
    1514:	30 91 f0 03 	lds	r19, 0x03F0
    1518:	64 cf       	rjmp	.-312    	; 0x13e2 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    151a:	20 91 ef 03 	lds	r18, 0x03EF
    151e:	30 91 f0 03 	lds	r19, 0x03F0
    1522:	2e 51       	subi	r18, 0x1E	; 30
    1524:	30 40       	sbci	r19, 0x00	; 0
    1526:	30 93 f0 03 	sts	0x03F0, r19
    152a:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    152e:	4e ef       	ldi	r20, 0xFE	; 254
    1530:	20 30       	cpi	r18, 0x00	; 0
    1532:	34 07       	cpc	r19, r20
    1534:	0c f0       	brlt	.+2      	; 0x1538 <handleIRRemoteCommands+0x18a>
    1536:	17 c1       	rjmp	.+558    	; 0x1766 <handleIRRemoteCommands+0x3b8>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	9e ef       	ldi	r25, 0xFE	; 254
    153c:	90 93 f0 03 	sts	0x03F0, r25
    1540:	80 93 ef 03 	sts	0x03EF, r24
    1544:	80 91 f1 03 	lds	r24, 0x03F1
    1548:	90 91 f2 03 	lds	r25, 0x03F2
    154c:	20 e8       	ldi	r18, 0x80	; 128
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4e cf       	rjmp	.-356    	; 0x13ee <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1552:	20 91 ef 03 	lds	r18, 0x03EF
    1556:	30 91 f0 03 	lds	r19, 0x03F0
    155a:	2e 51       	subi	r18, 0x1E	; 30
    155c:	30 40       	sbci	r19, 0x00	; 0
    155e:	30 93 f0 03 	sts	0x03F0, r19
    1562:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1566:	80 91 f1 03 	lds	r24, 0x03F1
    156a:	90 91 f2 03 	lds	r25, 0x03F2
    156e:	4e 96       	adiw	r24, 0x1e	; 30
    1570:	90 93 f2 03 	sts	0x03F2, r25
    1574:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1578:	4e ef       	ldi	r20, 0xFE	; 254
    157a:	20 30       	cpi	r18, 0x00	; 0
    157c:	34 07       	cpc	r19, r20
    157e:	34 f4       	brge	.+12     	; 0x158c <handleIRRemoteCommands+0x1de>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3e ef       	ldi	r19, 0xFE	; 254
    1584:	30 93 f0 03 	sts	0x03F0, r19
    1588:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    158c:	42 e0       	ldi	r20, 0x02	; 2
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	94 07       	cpc	r25, r20
    1592:	0c f4       	brge	.+2      	; 0x1596 <handleIRRemoteCommands+0x1e8>
    1594:	26 cf       	rjmp	.-436    	; 0x13e2 <handleIRRemoteCommands+0x34>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	90 93 f2 03 	sts	0x03F2, r25
    159e:	80 93 f1 03 	sts	0x03F1, r24
    15a2:	1f cf       	rjmp	.-450    	; 0x13e2 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    15a4:	20 91 ef 03 	lds	r18, 0x03EF
    15a8:	30 91 f0 03 	lds	r19, 0x03F0
    15ac:	80 91 f1 03 	lds	r24, 0x03F1
    15b0:	90 91 f2 03 	lds	r25, 0x03F2
    15b4:	82 17       	cp	r24, r18
    15b6:	93 07       	cpc	r25, r19
    15b8:	0c f4       	brge	.+2      	; 0x15bc <handleIRRemoteCommands+0x20e>
    15ba:	da c0       	rjmp	.+436    	; 0x1770 <handleIRRemoteCommands+0x3c2>
    15bc:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    15be:	22 5e       	subi	r18, 0xE2	; 226
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	30 93 f0 03 	sts	0x03F0, r19
    15c6:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    15ca:	4e 96       	adiw	r24, 0x1e	; 30
    15cc:	90 93 f2 03 	sts	0x03F2, r25
    15d0:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    15d4:	42 e0       	ldi	r20, 0x02	; 2
    15d6:	21 30       	cpi	r18, 0x01	; 1
    15d8:	34 07       	cpc	r19, r20
    15da:	34 f0       	brlt	.+12     	; 0x15e8 <handleIRRemoteCommands+0x23a>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	32 e0       	ldi	r19, 0x02	; 2
    15e0:	30 93 f0 03 	sts	0x03F0, r19
    15e4:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    15e8:	22 e0       	ldi	r18, 0x02	; 2
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	92 07       	cpc	r25, r18
    15ee:	0c f4       	brge	.+2      	; 0x15f2 <handleIRRemoteCommands+0x244>
    15f0:	8f cf       	rjmp	.-226    	; 0x1510 <handleIRRemoteCommands+0x162>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	90 93 f2 03 	sts	0x03F2, r25
    15fa:	80 93 f1 03 	sts	0x03F1, r24
    15fe:	20 91 ef 03 	lds	r18, 0x03EF
    1602:	30 91 f0 03 	lds	r19, 0x03F0
    1606:	ed ce       	rjmp	.-550    	; 0x13e2 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1608:	20 91 ef 03 	lds	r18, 0x03EF
    160c:	30 91 f0 03 	lds	r19, 0x03F0
    1610:	22 5e       	subi	r18, 0xE2	; 226
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	30 93 f0 03 	sts	0x03F0, r19
    1618:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    161c:	42 e0       	ldi	r20, 0x02	; 2
    161e:	21 30       	cpi	r18, 0x01	; 1
    1620:	34 07       	cpc	r19, r20
    1622:	0c f4       	brge	.+2      	; 0x1626 <handleIRRemoteCommands+0x278>
    1624:	a0 c0       	rjmp	.+320    	; 0x1766 <handleIRRemoteCommands+0x3b8>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	90 93 f0 03 	sts	0x03F0, r25
    162e:	80 93 ef 03 	sts	0x03EF, r24
    1632:	80 91 f1 03 	lds	r24, 0x03F1
    1636:	90 91 f2 03 	lds	r25, 0x03F2
    163a:	20 e8       	ldi	r18, 0x80	; 128
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	d7 ce       	rjmp	.-594    	; 0x13ee <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1640:	80 91 09 04 	lds	r24, 0x0409
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	65 e0       	ldi	r22, 0x05	; 5
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 83 24 	call	0x4906	; 0x4906 <__divmodhi4>
    1650:	80 93 09 04 	sts	0x0409, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1654:	88 23       	and	r24, r24
    1656:	09 f0       	breq	.+2      	; 0x165a <handleIRRemoteCommands+0x2ac>
    1658:	8d c0       	rjmp	.+282    	; 0x1774 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    165a:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    165c:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    165e:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1668:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    166c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <updateRedLed>
					updateGreenLed(pwm_green);
    1670:	80 91 0d 02 	lds	r24, 0x020D
    1674:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <updateGreenLed>
					updateBlueLed(pwm_blue);
    1678:	80 91 0e 02 	lds	r24, 0x020E
    167c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <updateBlueLed>
    1680:	20 91 ef 03 	lds	r18, 0x03EF
    1684:	30 91 f0 03 	lds	r19, 0x03F0
    1688:	80 91 f1 03 	lds	r24, 0x03F1
    168c:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    1690:	a8 ce       	rjmp	.-688    	; 0x13e2 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1692:	80 91 0a 04 	lds	r24, 0x040A
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	83 70       	andi	r24, 0x03	; 3
    169c:	90 70       	andi	r25, 0x00	; 0
    169e:	80 93 0a 04 	sts	0x040A, r24
					switch(behaviorState) {
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <handleIRRemoteCommands+0x2fa>
    16a6:	cf ce       	rjmp	.-610    	; 0x1446 <handleIRRemoteCommands+0x98>
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	09 f4       	brne	.+2      	; 0x16ae <handleIRRemoteCommands+0x300>
    16ac:	53 c0       	rjmp	.+166    	; 0x1754 <handleIRRemoteCommands+0x3a6>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <handleIRRemoteCommands+0x306>
    16b2:	c4 ce       	rjmp	.-632    	; 0x143c <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    16b4:	10 92 27 04 	sts	0x0427, r1
							cliffAvoidanceEnabled = 0;
    16b8:	10 92 28 04 	sts	0x0428, r1
    16bc:	8a ce       	rjmp	.-748    	; 0x13d2 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    16be:	20 91 ef 03 	lds	r18, 0x03EF
    16c2:	30 91 f0 03 	lds	r19, 0x03F0
    16c6:	22 5e       	subi	r18, 0xE2	; 226
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	30 93 f0 03 	sts	0x03F0, r19
    16ce:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    16d2:	80 91 f1 03 	lds	r24, 0x03F1
    16d6:	90 91 f2 03 	lds	r25, 0x03F2
    16da:	4e 97       	sbiw	r24, 0x1e	; 30
    16dc:	90 93 f2 03 	sts	0x03F2, r25
    16e0:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    16e4:	42 e0       	ldi	r20, 0x02	; 2
    16e6:	21 30       	cpi	r18, 0x01	; 1
    16e8:	34 07       	cpc	r19, r20
    16ea:	34 f0       	brlt	.+12     	; 0x16f8 <handleIRRemoteCommands+0x34a>
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	32 e0       	ldi	r19, 0x02	; 2
    16f0:	30 93 f0 03 	sts	0x03F0, r19
    16f4:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    16f8:	4e ef       	ldi	r20, 0xFE	; 254
    16fa:	80 30       	cpi	r24, 0x00	; 0
    16fc:	94 07       	cpc	r25, r20
    16fe:	0c f0       	brlt	.+2      	; 0x1702 <handleIRRemoteCommands+0x354>
    1700:	70 ce       	rjmp	.-800    	; 0x13e2 <handleIRRemoteCommands+0x34>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	9e ef       	ldi	r25, 0xFE	; 254
    1706:	90 93 f2 03 	sts	0x03F2, r25
    170a:	80 93 f1 03 	sts	0x03F1, r24
    170e:	69 ce       	rjmp	.-814    	; 0x13e2 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1710:	10 92 f0 03 	sts	0x03F0, r1
    1714:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    1718:	10 92 f2 03 	sts	0x03F2, r1
    171c:	10 92 f1 03 	sts	0x03F1, r1
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	5e ce       	rjmp	.-836    	; 0x13e6 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    172a:	80 91 f1 03 	lds	r24, 0x03F1
    172e:	90 91 f2 03 	lds	r25, 0x03F2
    1732:	4e 96       	adiw	r24, 0x1e	; 30
    1734:	90 93 f2 03 	sts	0x03F2, r25
    1738:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    173c:	22 e0       	ldi	r18, 0x02	; 2
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	92 07       	cpc	r25, r18
    1742:	0c f4       	brge	.+2      	; 0x1746 <handleIRRemoteCommands+0x398>
    1744:	e5 ce       	rjmp	.-566    	; 0x1510 <handleIRRemoteCommands+0x162>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	90 93 f2 03 	sts	0x03F2, r25
    174e:	80 93 f1 03 	sts	0x03F1, r24
    1752:	de ce       	rjmp	.-580    	; 0x1510 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 27 04 	sts	0x0427, r24
							cliffAvoidanceEnabled = 1;
    175a:	80 93 28 04 	sts	0x0428, r24
    175e:	20 91 ef 03 	lds	r18, 0x03EF
    1762:	30 91 f0 03 	lds	r19, 0x03F0
    1766:	80 91 f1 03 	lds	r24, 0x03F1
    176a:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    176e:	39 ce       	rjmp	.-910    	; 0x13e2 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1770:	c9 01       	movw	r24, r18
    1772:	25 cf       	rjmp	.-438    	; 0x15be <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	61 f0       	breq	.+24     	; 0x1790 <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	91 f0       	breq	.+36     	; 0x17a0 <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	d9 f0       	breq	.+54     	; 0x17b6 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1786:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    178a:	80 93 0c 02 	sts	0x020C, r24
    178e:	6e cf       	rjmp	.-292    	; 0x166c <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1796:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    179a:	80 93 0c 02 	sts	0x020C, r24
    179e:	66 cf       	rjmp	.-308    	; 0x166c <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    17a0:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    17a2:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    17aa:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    17ae:	10 92 0c 02 	sts	0x020C, r1
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	5b cf       	rjmp	.-330    	; 0x166c <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    17b6:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    17ba:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    17be:	10 92 0c 02 	sts	0x020C, r1
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	53 cf       	rjmp	.-346    	; 0x166c <handleIRRemoteCommands+0x2be>

000017c6 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    17c6:	08 95       	ret

000017c8 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	09 f4       	brne	.+2      	; 0x17dc <start_vertical_speed_control_left+0x14>
    17da:	b7 c0       	rjmp	.+366    	; 0x194a <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    17dc:	20 91 1e 04 	lds	r18, 0x041E
    17e0:	30 91 1f 04 	lds	r19, 0x041F
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	2e 30       	cpi	r18, 0x0E	; 14
    17e8:	34 07       	cpc	r19, r20
    17ea:	0c f4       	brge	.+2      	; 0x17ee <start_vertical_speed_control_left+0x26>
    17ec:	88 c0       	rjmp	.+272    	; 0x18fe <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    17ee:	18 16       	cp	r1, r24
    17f0:	19 06       	cpc	r1, r25
    17f2:	0c f0       	brlt	.+2      	; 0x17f6 <start_vertical_speed_control_left+0x2e>
    17f4:	13 c1       	rjmp	.+550    	; 0x1a1c <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    17f6:	88 e6       	ldi	r24, 0x68	; 104
    17f8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    17fa:	82 1b       	sub	r24, r18
    17fc:	93 0b       	sbc	r25, r19
    17fe:	95 95       	asr	r25
    1800:	87 95       	ror	r24
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	29 e1       	ldi	r18, 0x19	; 25
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	28 1b       	sub	r18, r24
    180c:	39 0b       	sbc	r19, r25
    180e:	30 93 04 02 	sts	0x0204, r19
    1812:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1816:	40 91 2b 04 	lds	r20, 0x042B
    181a:	50 91 2c 04 	lds	r21, 0x042C
    181e:	50 93 46 04 	sts	0x0446, r21
    1822:	40 93 45 04 	sts	0x0445, r20
	if(*pwm_left >= 0) {
    1826:	20 81       	ld	r18, Z
    1828:	31 81       	ldd	r19, Z+1	; 0x01
    182a:	37 fd       	sbrc	r19, 7
    182c:	d2 c0       	rjmp	.+420    	; 0x19d2 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    182e:	80 91 e7 03 	lds	r24, 0x03E7
    1832:	90 91 e8 03 	lds	r25, 0x03E8
    1836:	b9 01       	movw	r22, r18
    1838:	68 1b       	sub	r22, r24
    183a:	79 0b       	sbc	r23, r25
    183c:	cb 01       	movw	r24, r22
    183e:	70 93 2c 04 	sts	0x042C, r23
    1842:	60 93 2b 04 	sts	0x042B, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1846:	20 91 f7 03 	lds	r18, 0x03F7
    184a:	30 91 f8 03 	lds	r19, 0x03F8
    184e:	28 0f       	add	r18, r24
    1850:	39 1f       	adc	r19, r25
    1852:	30 93 f8 03 	sts	0x03F8, r19
    1856:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    185a:	76 e0       	ldi	r23, 0x06	; 6
    185c:	21 34       	cpi	r18, 0x41	; 65
    185e:	37 07       	cpc	r19, r23
    1860:	0c f4       	brge	.+2      	; 0x1864 <start_vertical_speed_control_left+0x9c>
    1862:	84 c0       	rjmp	.+264    	; 0x196c <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1864:	20 e4       	ldi	r18, 0x40	; 64
    1866:	36 e0       	ldi	r19, 0x06	; 6
    1868:	30 93 f8 03 	sts	0x03F8, r19
    186c:	20 93 f7 03 	sts	0x03F7, r18
    1870:	60 ec       	ldi	r22, 0xC0	; 192
    1872:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1874:	9c 01       	movw	r18, r24
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	dc 01       	movw	r26, r24
    187c:	aa 0f       	add	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	aa 0f       	add	r26, r26
    1882:	bb 1f       	adc	r27, r27
    1884:	aa 0f       	add	r26, r26
    1886:	bb 1f       	adc	r27, r27
    1888:	2a 0f       	add	r18, r26
    188a:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    188c:	00 81       	ld	r16, Z
    188e:	11 81       	ldd	r17, Z+1	; 0x01
    1890:	c0 91 03 02 	lds	r28, 0x0203
    1894:	d0 91 04 02 	lds	r29, 0x0204
    1898:	0c 9f       	mul	r16, r28
    189a:	d0 01       	movw	r26, r0
    189c:	0d 9f       	mul	r16, r29
    189e:	b0 0d       	add	r27, r0
    18a0:	1c 9f       	mul	r17, r28
    18a2:	b0 0d       	add	r27, r0
    18a4:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    18a6:	2a 0f       	add	r18, r26
    18a8:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    18aa:	48 1b       	sub	r20, r24
    18ac:	59 0b       	sbc	r21, r25
    18ae:	44 0f       	add	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	24 0f       	add	r18, r20
    18b4:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    18b6:	26 0f       	add	r18, r22
    18b8:	37 1f       	adc	r19, r23
    18ba:	30 93 f6 03 	sts	0x03F6, r19
    18be:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    18c2:	37 fd       	sbrc	r19, 7
    18c4:	69 c0       	rjmp	.+210    	; 0x1998 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    18c6:	12 16       	cp	r1, r18
    18c8:	13 06       	cpc	r1, r19
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <start_vertical_speed_control_left+0x106>
    18cc:	6f c0       	rjmp	.+222    	; 0x19ac <start_vertical_speed_control_left+0x1e4>
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	97 fd       	sbrc	r25, 7
    18d4:	89 c0       	rjmp	.+274    	; 0x19e8 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    18d6:	7d e5       	ldi	r23, 0x5D	; 93
    18d8:	21 3c       	cpi	r18, 0xC1	; 193
    18da:	37 07       	cpc	r19, r23
    18dc:	0c f4       	brge	.+2      	; 0x18e0 <start_vertical_speed_control_left+0x118>
    18de:	66 c0       	rjmp	.+204    	; 0x19ac <start_vertical_speed_control_left+0x1e4>
    18e0:	80 ec       	ldi	r24, 0xC0	; 192
    18e2:	9d e5       	ldi	r25, 0x5D	; 93
    18e4:	90 93 f6 03 	sts	0x03F6, r25
    18e8:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    18fe:	24 3b       	cpi	r18, 0xB4	; 180
    1900:	31 05       	cpc	r19, r1
    1902:	94 f4       	brge	.+36     	; 0x1928 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1904:	2a 35       	cpi	r18, 0x5A	; 90
    1906:	31 05       	cpc	r19, r1
    1908:	7c f4       	brge	.+30     	; 0x1928 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    190a:	18 16       	cp	r1, r24
    190c:	19 06       	cpc	r1, r25
    190e:	0c f0       	brlt	.+2      	; 0x1912 <start_vertical_speed_control_left+0x14a>
    1910:	93 c0       	rjmp	.+294    	; 0x1a38 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1912:	35 95       	asr	r19
    1914:	27 95       	ror	r18
    1916:	35 95       	asr	r19
    1918:	27 95       	ror	r18
    191a:	27 5e       	subi	r18, 0xE7	; 231
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	30 93 04 02 	sts	0x0204, r19
    1922:	20 93 03 02 	sts	0x0203, r18
    1926:	77 cf       	rjmp	.-274    	; 0x1816 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1928:	18 16       	cp	r1, r24
    192a:	19 06       	cpc	r1, r25
    192c:	94 f5       	brge	.+100    	; 0x1992 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    192e:	84 eb       	ldi	r24, 0xB4	; 180
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	82 1b       	sub	r24, r18
    1934:	93 0b       	sbc	r25, r19
    1936:	95 95       	asr	r25
    1938:	87 95       	ror	r24
    193a:	95 95       	asr	r25
    193c:	87 95       	ror	r24
    193e:	49 96       	adiw	r24, 0x19	; 25
    1940:	90 93 04 02 	sts	0x0204, r25
    1944:	80 93 03 02 	sts	0x0203, r24
    1948:	66 cf       	rjmp	.-308    	; 0x1816 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    194a:	10 92 f8 03 	sts	0x03F8, r1
    194e:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1952:	10 92 2c 04 	sts	0x042C, r1
    1956:	10 92 2b 04 	sts	0x042B, r1
		delta_left_speed_prev = 0;
    195a:	10 92 46 04 	sts	0x0446, r1
    195e:	10 92 45 04 	sts	0x0445, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    196c:	69 ef       	ldi	r22, 0xF9	; 249
    196e:	20 3c       	cpi	r18, 0xC0	; 192
    1970:	36 07       	cpc	r19, r22
    1972:	4c f4       	brge	.+18     	; 0x1986 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1974:	20 ec       	ldi	r18, 0xC0	; 192
    1976:	39 ef       	ldi	r19, 0xF9	; 249
    1978:	30 93 f8 03 	sts	0x03F8, r19
    197c:	20 93 f7 03 	sts	0x03F7, r18
    1980:	60 e4       	ldi	r22, 0x40	; 64
    1982:	7d ee       	ldi	r23, 0xED	; 237
    1984:	77 cf       	rjmp	.-274    	; 0x1874 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1986:	b9 01       	movw	r22, r18
    1988:	66 0f       	add	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	62 0f       	add	r22, r18
    198e:	73 1f       	adc	r23, r19
    1990:	71 cf       	rjmp	.-286    	; 0x1874 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1992:	84 eb       	ldi	r24, 0xB4	; 180
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	31 cf       	rjmp	.-414    	; 0x17fa <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	97 fd       	sbrc	r25, 7
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    19a0:	10 92 f6 03 	sts	0x03F6, r1
    19a4:	10 92 f5 03 	sts	0x03F5, r1
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    19ac:	82 ea       	ldi	r24, 0xA2	; 162
    19ae:	20 34       	cpi	r18, 0x40	; 64
    19b0:	38 07       	cpc	r19, r24
    19b2:	04 f5       	brge	.+64     	; 0x19f4 <start_vertical_speed_control_left+0x22c>
    19b4:	80 e4       	ldi	r24, 0x40	; 64
    19b6:	92 ea       	ldi	r25, 0xA2	; 162
    19b8:	90 93 f6 03 	sts	0x03F6, r25
    19bc:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	9e ef       	ldi	r25, 0xFE	; 254
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24


}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    19d2:	80 91 e7 03 	lds	r24, 0x03E7
    19d6:	90 91 e8 03 	lds	r25, 0x03E8
    19da:	82 0f       	add	r24, r18
    19dc:	93 1f       	adc	r25, r19
    19de:	90 93 2c 04 	sts	0x042C, r25
    19e2:	80 93 2b 04 	sts	0x042B, r24
    19e6:	2f cf       	rjmp	.-418    	; 0x1846 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    19e8:	10 92 f6 03 	sts	0x03F6, r1
    19ec:	10 92 f5 03 	sts	0x03F5, r1
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    19f4:	35 95       	asr	r19
    19f6:	27 95       	ror	r18
    19f8:	35 95       	asr	r19
    19fa:	27 95       	ror	r18
    19fc:	35 95       	asr	r19
    19fe:	27 95       	ror	r18
    1a00:	35 95       	asr	r19
    1a02:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1a04:	31 83       	std	Z+1, r19	; 0x01
    1a06:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1a08:	42 e0       	ldi	r20, 0x02	; 2
    1a0a:	21 30       	cpi	r18, 0x01	; 1
    1a0c:	34 07       	cpc	r19, r20
    1a0e:	0c f0       	brlt	.+2      	; 0x1a12 <start_vertical_speed_control_left+0x24a>
    1a10:	6d cf       	rjmp	.-294    	; 0x18ec <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1a12:	6e ef       	ldi	r22, 0xFE	; 254
    1a14:	20 30       	cpi	r18, 0x00	; 0
    1a16:	36 07       	cpc	r19, r22
    1a18:	9c f2       	brlt	.-90     	; 0x19c0 <start_vertical_speed_control_left+0x1f8>
    1a1a:	6c cf       	rjmp	.-296    	; 0x18f4 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1a1c:	88 e6       	ldi	r24, 0x68	; 104
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	82 1b       	sub	r24, r18
    1a22:	93 0b       	sbc	r25, r19
    1a24:	95 95       	asr	r25
    1a26:	87 95       	ror	r24
    1a28:	95 95       	asr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	49 96       	adiw	r24, 0x19	; 25
    1a2e:	90 93 04 02 	sts	0x0204, r25
    1a32:	80 93 03 02 	sts	0x0203, r24
    1a36:	ef ce       	rjmp	.-546    	; 0x1816 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1a38:	35 95       	asr	r19
    1a3a:	27 95       	ror	r18
    1a3c:	35 95       	asr	r19
    1a3e:	27 95       	ror	r18
    1a40:	89 e1       	ldi	r24, 0x19	; 25
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	82 1b       	sub	r24, r18
    1a46:	93 0b       	sbc	r25, r19
    1a48:	90 93 04 02 	sts	0x0204, r25
    1a4c:	80 93 03 02 	sts	0x0203, r24
    1a50:	e2 ce       	rjmp	.-572    	; 0x1816 <start_vertical_speed_control_left+0x4e>

00001a52 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <start_vertical_speed_control_right+0x14>
    1a64:	b7 c0       	rjmp	.+366    	; 0x1bd4 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1a66:	20 91 1e 04 	lds	r18, 0x041E
    1a6a:	30 91 1f 04 	lds	r19, 0x041F
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	2e 30       	cpi	r18, 0x0E	; 14
    1a72:	34 07       	cpc	r19, r20
    1a74:	0c f4       	brge	.+2      	; 0x1a78 <start_vertical_speed_control_right+0x26>
    1a76:	88 c0       	rjmp	.+272    	; 0x1b88 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1a78:	18 16       	cp	r1, r24
    1a7a:	19 06       	cpc	r1, r25
    1a7c:	0c f0       	brlt	.+2      	; 0x1a80 <start_vertical_speed_control_right+0x2e>
    1a7e:	13 c1       	rjmp	.+550    	; 0x1ca6 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    1a80:	88 e6       	ldi	r24, 0x68	; 104
    1a82:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1a84:	82 1b       	sub	r24, r18
    1a86:	93 0b       	sbc	r25, r19
    1a88:	95 95       	asr	r25
    1a8a:	87 95       	ror	r24
    1a8c:	95 95       	asr	r25
    1a8e:	87 95       	ror	r24
    1a90:	29 e1       	ldi	r18, 0x19	; 25
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	28 1b       	sub	r18, r24
    1a96:	39 0b       	sbc	r19, r25
    1a98:	30 93 06 02 	sts	0x0206, r19
    1a9c:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1aa0:	40 91 54 04 	lds	r20, 0x0454
    1aa4:	50 91 55 04 	lds	r21, 0x0455
    1aa8:	50 93 2e 04 	sts	0x042E, r21
    1aac:	40 93 2d 04 	sts	0x042D, r20
	if(*pwm_right >= 0) {
    1ab0:	20 81       	ld	r18, Z
    1ab2:	31 81       	ldd	r19, Z+1	; 0x01
    1ab4:	37 fd       	sbrc	r19, 7
    1ab6:	d2 c0       	rjmp	.+420    	; 0x1c5c <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1ab8:	80 91 e9 03 	lds	r24, 0x03E9
    1abc:	90 91 ea 03 	lds	r25, 0x03EA
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	68 1b       	sub	r22, r24
    1ac4:	79 0b       	sbc	r23, r25
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	70 93 55 04 	sts	0x0455, r23
    1acc:	60 93 54 04 	sts	0x0454, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1ad0:	20 91 f9 03 	lds	r18, 0x03F9
    1ad4:	30 91 fa 03 	lds	r19, 0x03FA
    1ad8:	28 0f       	add	r18, r24
    1ada:	39 1f       	adc	r19, r25
    1adc:	30 93 fa 03 	sts	0x03FA, r19
    1ae0:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    1ae4:	76 e0       	ldi	r23, 0x06	; 6
    1ae6:	21 34       	cpi	r18, 0x41	; 65
    1ae8:	37 07       	cpc	r19, r23
    1aea:	0c f4       	brge	.+2      	; 0x1aee <start_vertical_speed_control_right+0x9c>
    1aec:	84 c0       	rjmp	.+264    	; 0x1bf6 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    1aee:	20 e4       	ldi	r18, 0x40	; 64
    1af0:	36 e0       	ldi	r19, 0x06	; 6
    1af2:	30 93 fa 03 	sts	0x03FA, r19
    1af6:	20 93 f9 03 	sts	0x03F9, r18
    1afa:	60 ec       	ldi	r22, 0xC0	; 192
    1afc:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1afe:	9c 01       	movw	r18, r24
    1b00:	22 0f       	add	r18, r18
    1b02:	33 1f       	adc	r19, r19
    1b04:	dc 01       	movw	r26, r24
    1b06:	aa 0f       	add	r26, r26
    1b08:	bb 1f       	adc	r27, r27
    1b0a:	aa 0f       	add	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	aa 0f       	add	r26, r26
    1b10:	bb 1f       	adc	r27, r27
    1b12:	2a 0f       	add	r18, r26
    1b14:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1b16:	00 81       	ld	r16, Z
    1b18:	11 81       	ldd	r17, Z+1	; 0x01
    1b1a:	c0 91 05 02 	lds	r28, 0x0205
    1b1e:	d0 91 06 02 	lds	r29, 0x0206
    1b22:	0c 9f       	mul	r16, r28
    1b24:	d0 01       	movw	r26, r0
    1b26:	0d 9f       	mul	r16, r29
    1b28:	b0 0d       	add	r27, r0
    1b2a:	1c 9f       	mul	r17, r28
    1b2c:	b0 0d       	add	r27, r0
    1b2e:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1b30:	2a 0f       	add	r18, r26
    1b32:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1b34:	48 1b       	sub	r20, r24
    1b36:	59 0b       	sbc	r21, r25
    1b38:	44 0f       	add	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	24 0f       	add	r18, r20
    1b3e:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1b40:	26 0f       	add	r18, r22
    1b42:	37 1f       	adc	r19, r23
    1b44:	30 93 f4 03 	sts	0x03F4, r19
    1b48:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1b4c:	37 fd       	sbrc	r19, 7
    1b4e:	69 c0       	rjmp	.+210    	; 0x1c22 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1b50:	12 16       	cp	r1, r18
    1b52:	13 06       	cpc	r1, r19
    1b54:	0c f0       	brlt	.+2      	; 0x1b58 <start_vertical_speed_control_right+0x106>
    1b56:	6f c0       	rjmp	.+222    	; 0x1c36 <start_vertical_speed_control_right+0x1e4>
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	97 fd       	sbrc	r25, 7
    1b5e:	89 c0       	rjmp	.+274    	; 0x1c72 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1b60:	7d e5       	ldi	r23, 0x5D	; 93
    1b62:	21 3c       	cpi	r18, 0xC1	; 193
    1b64:	37 07       	cpc	r19, r23
    1b66:	0c f4       	brge	.+2      	; 0x1b6a <start_vertical_speed_control_right+0x118>
    1b68:	66 c0       	rjmp	.+204    	; 0x1c36 <start_vertical_speed_control_right+0x1e4>
    1b6a:	80 ec       	ldi	r24, 0xC0	; 192
    1b6c:	9d e5       	ldi	r25, 0x5D	; 93
    1b6e:	90 93 f4 03 	sts	0x03F4, r25
    1b72:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1b88:	24 3b       	cpi	r18, 0xB4	; 180
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	94 f4       	brge	.+36     	; 0x1bb2 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1b8e:	2a 35       	cpi	r18, 0x5A	; 90
    1b90:	31 05       	cpc	r19, r1
    1b92:	7c f4       	brge	.+30     	; 0x1bb2 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1b94:	18 16       	cp	r1, r24
    1b96:	19 06       	cpc	r1, r25
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <start_vertical_speed_control_right+0x14a>
    1b9a:	93 c0       	rjmp	.+294    	; 0x1cc2 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1b9c:	35 95       	asr	r19
    1b9e:	27 95       	ror	r18
    1ba0:	35 95       	asr	r19
    1ba2:	27 95       	ror	r18
    1ba4:	27 5e       	subi	r18, 0xE7	; 231
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	30 93 06 02 	sts	0x0206, r19
    1bac:	20 93 05 02 	sts	0x0205, r18
    1bb0:	77 cf       	rjmp	.-274    	; 0x1aa0 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    1bb2:	18 16       	cp	r1, r24
    1bb4:	19 06       	cpc	r1, r25
    1bb6:	94 f5       	brge	.+100    	; 0x1c1c <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    1bb8:	84 eb       	ldi	r24, 0xB4	; 180
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	82 1b       	sub	r24, r18
    1bbe:	93 0b       	sbc	r25, r19
    1bc0:	95 95       	asr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	95 95       	asr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	49 96       	adiw	r24, 0x19	; 25
    1bca:	90 93 06 02 	sts	0x0206, r25
    1bce:	80 93 05 02 	sts	0x0205, r24
    1bd2:	66 cf       	rjmp	.-308    	; 0x1aa0 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1bd4:	10 92 fa 03 	sts	0x03FA, r1
    1bd8:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1bdc:	10 92 55 04 	sts	0x0455, r1
    1be0:	10 92 54 04 	sts	0x0454, r1
		delta_right_speed_prev = 0;
    1be4:	10 92 2e 04 	sts	0x042E, r1
    1be8:	10 92 2d 04 	sts	0x042D, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1bf6:	69 ef       	ldi	r22, 0xF9	; 249
    1bf8:	20 3c       	cpi	r18, 0xC0	; 192
    1bfa:	36 07       	cpc	r19, r22
    1bfc:	4c f4       	brge	.+18     	; 0x1c10 <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1bfe:	20 ec       	ldi	r18, 0xC0	; 192
    1c00:	39 ef       	ldi	r19, 0xF9	; 249
    1c02:	30 93 fa 03 	sts	0x03FA, r19
    1c06:	20 93 f9 03 	sts	0x03F9, r18
    1c0a:	60 e4       	ldi	r22, 0x40	; 64
    1c0c:	7d ee       	ldi	r23, 0xED	; 237
    1c0e:	77 cf       	rjmp	.-274    	; 0x1afe <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1c10:	b9 01       	movw	r22, r18
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	62 0f       	add	r22, r18
    1c18:	73 1f       	adc	r23, r19
    1c1a:	71 cf       	rjmp	.-286    	; 0x1afe <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1c1c:	84 eb       	ldi	r24, 0xB4	; 180
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	31 cf       	rjmp	.-414    	; 0x1a84 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	97 fd       	sbrc	r25, 7
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1c2a:	10 92 f4 03 	sts	0x03F4, r1
    1c2e:	10 92 f3 03 	sts	0x03F3, r1
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c36:	82 ea       	ldi	r24, 0xA2	; 162
    1c38:	20 34       	cpi	r18, 0x40	; 64
    1c3a:	38 07       	cpc	r19, r24
    1c3c:	04 f5       	brge	.+64     	; 0x1c7e <start_vertical_speed_control_right+0x22c>
    1c3e:	80 e4       	ldi	r24, 0x40	; 64
    1c40:	92 ea       	ldi	r25, 0xA2	; 162
    1c42:	90 93 f4 03 	sts	0x03F4, r25
    1c46:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	9e ef       	ldi	r25, 0xFE	; 254
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24

}
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1c5c:	80 91 e9 03 	lds	r24, 0x03E9
    1c60:	90 91 ea 03 	lds	r25, 0x03EA
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	90 93 55 04 	sts	0x0455, r25
    1c6c:	80 93 54 04 	sts	0x0454, r24
    1c70:	2f cf       	rjmp	.-418    	; 0x1ad0 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1c72:	10 92 f4 03 	sts	0x03F4, r1
    1c76:	10 92 f3 03 	sts	0x03F3, r1
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c7e:	35 95       	asr	r19
    1c80:	27 95       	ror	r18
    1c82:	35 95       	asr	r19
    1c84:	27 95       	ror	r18
    1c86:	35 95       	asr	r19
    1c88:	27 95       	ror	r18
    1c8a:	35 95       	asr	r19
    1c8c:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1c8e:	31 83       	std	Z+1, r19	; 0x01
    1c90:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1c92:	42 e0       	ldi	r20, 0x02	; 2
    1c94:	21 30       	cpi	r18, 0x01	; 1
    1c96:	34 07       	cpc	r19, r20
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <start_vertical_speed_control_right+0x24a>
    1c9a:	6d cf       	rjmp	.-294    	; 0x1b76 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1c9c:	6e ef       	ldi	r22, 0xFE	; 254
    1c9e:	20 30       	cpi	r18, 0x00	; 0
    1ca0:	36 07       	cpc	r19, r22
    1ca2:	9c f2       	brlt	.-90     	; 0x1c4a <start_vertical_speed_control_right+0x1f8>
    1ca4:	6c cf       	rjmp	.-296    	; 0x1b7e <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1ca6:	88 e6       	ldi	r24, 0x68	; 104
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	82 1b       	sub	r24, r18
    1cac:	93 0b       	sbc	r25, r19
    1cae:	95 95       	asr	r25
    1cb0:	87 95       	ror	r24
    1cb2:	95 95       	asr	r25
    1cb4:	87 95       	ror	r24
    1cb6:	49 96       	adiw	r24, 0x19	; 25
    1cb8:	90 93 06 02 	sts	0x0206, r25
    1cbc:	80 93 05 02 	sts	0x0205, r24
    1cc0:	ef ce       	rjmp	.-546    	; 0x1aa0 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1cc2:	35 95       	asr	r19
    1cc4:	27 95       	ror	r18
    1cc6:	35 95       	asr	r19
    1cc8:	27 95       	ror	r18
    1cca:	89 e1       	ldi	r24, 0x19	; 25
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	82 1b       	sub	r24, r18
    1cd0:	93 0b       	sbc	r25, r19
    1cd2:	90 93 06 02 	sts	0x0206, r25
    1cd6:	80 93 05 02 	sts	0x0205, r24
    1cda:	e2 ce       	rjmp	.-572    	; 0x1aa0 <start_vertical_speed_control_right+0x4e>

00001cdc <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1cdc:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <start_horizontal_speed_control_right+0xc>
    1ce6:	7b c0       	rjmp	.+246    	; 0x1dde <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1ce8:	a0 91 54 04 	lds	r26, 0x0454
    1cec:	b0 91 55 04 	lds	r27, 0x0455
    1cf0:	b0 93 2e 04 	sts	0x042E, r27
    1cf4:	a0 93 2d 04 	sts	0x042D, r26
	if(*pwm_right >= 0) {
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	37 fd       	sbrc	r19, 7
    1cfe:	89 c0       	rjmp	.+274    	; 0x1e12 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1d00:	80 91 e9 03 	lds	r24, 0x03E9
    1d04:	90 91 ea 03 	lds	r25, 0x03EA
    1d08:	a9 01       	movw	r20, r18
    1d0a:	48 1b       	sub	r20, r24
    1d0c:	59 0b       	sbc	r21, r25
    1d0e:	ca 01       	movw	r24, r20
    1d10:	50 93 55 04 	sts	0x0455, r21
    1d14:	40 93 54 04 	sts	0x0454, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1d18:	20 91 f9 03 	lds	r18, 0x03F9
    1d1c:	30 91 fa 03 	lds	r19, 0x03FA
    1d20:	28 0f       	add	r18, r24
    1d22:	39 1f       	adc	r19, r25
    1d24:	30 93 fa 03 	sts	0x03FA, r19
    1d28:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1d2c:	56 e0       	ldi	r21, 0x06	; 6
    1d2e:	21 34       	cpi	r18, 0x41	; 65
    1d30:	35 07       	cpc	r19, r21
    1d32:	0c f4       	brge	.+2      	; 0x1d36 <start_horizontal_speed_control_right+0x5a>
    1d34:	61 c0       	rjmp	.+194    	; 0x1df8 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1d36:	20 e4       	ldi	r18, 0x40	; 64
    1d38:	36 e0       	ldi	r19, 0x06	; 6
    1d3a:	30 93 fa 03 	sts	0x03FA, r19
    1d3e:	20 93 f9 03 	sts	0x03F9, r18
    1d42:	60 e8       	ldi	r22, 0x80	; 128
    1d44:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1d46:	9c 01       	movw	r18, r24
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	28 0f       	add	r18, r24
    1d4e:	39 1f       	adc	r19, r25
    1d50:	22 0f       	add	r18, r18
    1d52:	33 1f       	adc	r19, r19
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	22 0f       	add	r18, r18
    1d5a:	33 1f       	adc	r19, r19
    1d5c:	28 0f       	add	r18, r24
    1d5e:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1d60:	40 81       	ld	r20, Z
    1d62:	51 81       	ldd	r21, Z+1	; 0x01
    1d64:	44 0f       	add	r20, r20
    1d66:	55 1f       	adc	r21, r21
    1d68:	44 0f       	add	r20, r20
    1d6a:	55 1f       	adc	r21, r21
    1d6c:	44 0f       	add	r20, r20
    1d6e:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1d70:	24 0f       	add	r18, r20
    1d72:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1d74:	ad 01       	movw	r20, r26
    1d76:	48 1b       	sub	r20, r24
    1d78:	59 0b       	sbc	r21, r25
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	84 0f       	add	r24, r20
    1d82:	95 1f       	adc	r25, r21
    1d84:	28 0f       	add	r18, r24
    1d86:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1d88:	26 0f       	add	r18, r22
    1d8a:	37 1f       	adc	r19, r23
    1d8c:	30 93 f4 03 	sts	0x03F4, r19
    1d90:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1d94:	37 fd       	sbrc	r19, 7
    1d96:	4c c0       	rjmp	.+152    	; 0x1e30 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1d98:	12 16       	cp	r1, r18
    1d9a:	13 06       	cpc	r1, r19
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <start_horizontal_speed_control_right+0xc4>
    1d9e:	52 c0       	rjmp	.+164    	; 0x1e44 <start_horizontal_speed_control_right+0x168>
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	97 fd       	sbrc	r25, 7
    1da6:	67 c0       	rjmp	.+206    	; 0x1e76 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1da8:	5d e5       	ldi	r21, 0x5D	; 93
    1daa:	21 3c       	cpi	r18, 0xC1	; 193
    1dac:	35 07       	cpc	r19, r21
    1dae:	0c f4       	brge	.+2      	; 0x1db2 <start_horizontal_speed_control_right+0xd6>
    1db0:	49 c0       	rjmp	.+146    	; 0x1e44 <start_horizontal_speed_control_right+0x168>
    1db2:	80 ec       	ldi	r24, 0xC0	; 192
    1db4:	9d e5       	ldi	r25, 0x5D	; 93
    1db6:	90 93 f4 03 	sts	0x03F4, r25
    1dba:	80 93 f3 03 	sts	0x03F3, r24
    1dbe:	2c ed       	ldi	r18, 0xDC	; 220
    1dc0:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1dc2:	22 5e       	subi	r18, 0xE2	; 226
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	31 83       	std	Z+1, r19	; 0x01
    1dc8:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1dca:	42 e0       	ldi	r20, 0x02	; 2
    1dcc:	21 30       	cpi	r18, 0x01	; 1
    1dce:	34 07       	cpc	r19, r20
    1dd0:	0c f4       	brge	.+2      	; 0x1dd4 <start_horizontal_speed_control_right+0xf8>
    1dd2:	48 c0       	rjmp	.+144    	; 0x1e64 <start_horizontal_speed_control_right+0x188>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	92 e0       	ldi	r25, 0x02	; 2
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1dde:	10 92 fa 03 	sts	0x03FA, r1
    1de2:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1de6:	10 92 55 04 	sts	0x0455, r1
    1dea:	10 92 54 04 	sts	0x0454, r1
		delta_right_speed_prev = 0;
    1dee:	10 92 2e 04 	sts	0x042E, r1
    1df2:	10 92 2d 04 	sts	0x042D, r1
		return;
    1df6:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1df8:	49 ef       	ldi	r20, 0xF9	; 249
    1dfa:	20 3c       	cpi	r18, 0xC0	; 192
    1dfc:	34 07       	cpc	r19, r20
    1dfe:	a4 f4       	brge	.+40     	; 0x1e28 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1e00:	20 ec       	ldi	r18, 0xC0	; 192
    1e02:	39 ef       	ldi	r19, 0xF9	; 249
    1e04:	30 93 fa 03 	sts	0x03FA, r19
    1e08:	20 93 f9 03 	sts	0x03F9, r18
    1e0c:	60 e8       	ldi	r22, 0x80	; 128
    1e0e:	73 ef       	ldi	r23, 0xF3	; 243
    1e10:	9a cf       	rjmp	.-204    	; 0x1d46 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1e12:	80 91 e9 03 	lds	r24, 0x03E9
    1e16:	90 91 ea 03 	lds	r25, 0x03EA
    1e1a:	82 0f       	add	r24, r18
    1e1c:	93 1f       	adc	r25, r19
    1e1e:	90 93 55 04 	sts	0x0455, r25
    1e22:	80 93 54 04 	sts	0x0454, r24
    1e26:	78 cf       	rjmp	.-272    	; 0x1d18 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1e28:	b9 01       	movw	r22, r18
    1e2a:	66 0f       	add	r22, r22
    1e2c:	77 1f       	adc	r23, r23
    1e2e:	8b cf       	rjmp	.-234    	; 0x1d46 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	97 fd       	sbrc	r25, 7
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1e38:	10 92 f4 03 	sts	0x03F4, r1
    1e3c:	10 92 f3 03 	sts	0x03F3, r1
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1e44:	82 ea       	ldi	r24, 0xA2	; 162
    1e46:	20 34       	cpi	r18, 0x40	; 64
    1e48:	38 07       	cpc	r19, r24
    1e4a:	dc f4       	brge	.+54     	; 0x1e82 <start_horizontal_speed_control_right+0x1a6>
    1e4c:	80 e4       	ldi	r24, 0x40	; 64
    1e4e:	92 ea       	ldi	r25, 0xA2	; 162
    1e50:	90 93 f4 03 	sts	0x03F4, r25
    1e54:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1e58:	24 e2       	ldi	r18, 0x24	; 36
    1e5a:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1e5c:	2e 51       	subi	r18, 0x1E	; 30
    1e5e:	30 40       	sbci	r19, 0x00	; 0
    1e60:	31 83       	std	Z+1, r19	; 0x01
    1e62:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1e64:	5e ef       	ldi	r21, 0xFE	; 254
    1e66:	20 30       	cpi	r18, 0x00	; 0
    1e68:	35 07       	cpc	r19, r21
    1e6a:	24 f4       	brge	.+8      	; 0x1e74 <start_horizontal_speed_control_right+0x198>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	9e ef       	ldi	r25, 0xFE	; 254
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1e76:	10 92 f4 03 	sts	0x03F4, r1
    1e7a:	10 92 f3 03 	sts	0x03F3, r1
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1e82:	35 95       	asr	r19
    1e84:	27 95       	ror	r18
    1e86:	35 95       	asr	r19
    1e88:	27 95       	ror	r18
    1e8a:	35 95       	asr	r19
    1e8c:	27 95       	ror	r18
    1e8e:	35 95       	asr	r19
    1e90:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1e92:	31 83       	std	Z+1, r19	; 0x01
    1e94:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1e96:	12 16       	cp	r1, r18
    1e98:	13 06       	cpc	r1, r19
    1e9a:	0c f4       	brge	.+2      	; 0x1e9e <start_horizontal_speed_control_right+0x1c2>
    1e9c:	92 cf       	rjmp	.-220    	; 0x1dc2 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1e9e:	21 15       	cp	r18, r1
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	e1 f6       	brne	.-72     	; 0x1e5c <start_horizontal_speed_control_right+0x180>
    1ea4:	08 95       	ret

00001ea6 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1ea6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <start_horizontal_speed_control_left+0xc>
    1eb0:	7b c0       	rjmp	.+246    	; 0x1fa8 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1eb2:	a0 91 2b 04 	lds	r26, 0x042B
    1eb6:	b0 91 2c 04 	lds	r27, 0x042C
    1eba:	b0 93 46 04 	sts	0x0446, r27
    1ebe:	a0 93 45 04 	sts	0x0445, r26
	if(*pwm_left >= 0) {
    1ec2:	20 81       	ld	r18, Z
    1ec4:	31 81       	ldd	r19, Z+1	; 0x01
    1ec6:	37 fd       	sbrc	r19, 7
    1ec8:	89 c0       	rjmp	.+274    	; 0x1fdc <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1eca:	80 91 e7 03 	lds	r24, 0x03E7
    1ece:	90 91 e8 03 	lds	r25, 0x03E8
    1ed2:	a9 01       	movw	r20, r18
    1ed4:	48 1b       	sub	r20, r24
    1ed6:	59 0b       	sbc	r21, r25
    1ed8:	ca 01       	movw	r24, r20
    1eda:	50 93 2c 04 	sts	0x042C, r21
    1ede:	40 93 2b 04 	sts	0x042B, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1ee2:	20 91 f7 03 	lds	r18, 0x03F7
    1ee6:	30 91 f8 03 	lds	r19, 0x03F8
    1eea:	28 0f       	add	r18, r24
    1eec:	39 1f       	adc	r19, r25
    1eee:	30 93 f8 03 	sts	0x03F8, r19
    1ef2:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1ef6:	56 e0       	ldi	r21, 0x06	; 6
    1ef8:	21 34       	cpi	r18, 0x41	; 65
    1efa:	35 07       	cpc	r19, r21
    1efc:	0c f4       	brge	.+2      	; 0x1f00 <start_horizontal_speed_control_left+0x5a>
    1efe:	61 c0       	rjmp	.+194    	; 0x1fc2 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1f00:	20 e4       	ldi	r18, 0x40	; 64
    1f02:	36 e0       	ldi	r19, 0x06	; 6
    1f04:	30 93 f8 03 	sts	0x03F8, r19
    1f08:	20 93 f7 03 	sts	0x03F7, r18
    1f0c:	60 e8       	ldi	r22, 0x80	; 128
    1f0e:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1f10:	9c 01       	movw	r18, r24
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	28 0f       	add	r18, r24
    1f18:	39 1f       	adc	r19, r25
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	22 0f       	add	r18, r18
    1f20:	33 1f       	adc	r19, r19
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	28 0f       	add	r18, r24
    1f28:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1f2a:	40 81       	ld	r20, Z
    1f2c:	51 81       	ldd	r21, Z+1	; 0x01
    1f2e:	44 0f       	add	r20, r20
    1f30:	55 1f       	adc	r21, r21
    1f32:	44 0f       	add	r20, r20
    1f34:	55 1f       	adc	r21, r21
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1f3a:	24 0f       	add	r18, r20
    1f3c:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1f3e:	ad 01       	movw	r20, r26
    1f40:	48 1b       	sub	r20, r24
    1f42:	59 0b       	sbc	r21, r25
    1f44:	ca 01       	movw	r24, r20
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	84 0f       	add	r24, r20
    1f4c:	95 1f       	adc	r25, r21
    1f4e:	28 0f       	add	r18, r24
    1f50:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1f52:	26 0f       	add	r18, r22
    1f54:	37 1f       	adc	r19, r23
    1f56:	30 93 f6 03 	sts	0x03F6, r19
    1f5a:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1f5e:	37 fd       	sbrc	r19, 7
    1f60:	4c c0       	rjmp	.+152    	; 0x1ffa <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1f62:	12 16       	cp	r1, r18
    1f64:	13 06       	cpc	r1, r19
    1f66:	0c f0       	brlt	.+2      	; 0x1f6a <start_horizontal_speed_control_left+0xc4>
    1f68:	52 c0       	rjmp	.+164    	; 0x200e <start_horizontal_speed_control_left+0x168>
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	97 fd       	sbrc	r25, 7
    1f70:	67 c0       	rjmp	.+206    	; 0x2040 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1f72:	5d e5       	ldi	r21, 0x5D	; 93
    1f74:	21 3c       	cpi	r18, 0xC1	; 193
    1f76:	35 07       	cpc	r19, r21
    1f78:	0c f4       	brge	.+2      	; 0x1f7c <start_horizontal_speed_control_left+0xd6>
    1f7a:	49 c0       	rjmp	.+146    	; 0x200e <start_horizontal_speed_control_left+0x168>
    1f7c:	80 ec       	ldi	r24, 0xC0	; 192
    1f7e:	9d e5       	ldi	r25, 0x5D	; 93
    1f80:	90 93 f6 03 	sts	0x03F6, r25
    1f84:	80 93 f5 03 	sts	0x03F5, r24
    1f88:	2c ed       	ldi	r18, 0xDC	; 220
    1f8a:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1f8c:	22 5e       	subi	r18, 0xE2	; 226
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	31 83       	std	Z+1, r19	; 0x01
    1f92:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1f94:	42 e0       	ldi	r20, 0x02	; 2
    1f96:	21 30       	cpi	r18, 0x01	; 1
    1f98:	34 07       	cpc	r19, r20
    1f9a:	0c f4       	brge	.+2      	; 0x1f9e <start_horizontal_speed_control_left+0xf8>
    1f9c:	48 c0       	rjmp	.+144    	; 0x202e <start_horizontal_speed_control_left+0x188>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	92 e0       	ldi	r25, 0x02	; 2
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    1fa6:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1fa8:	10 92 f8 03 	sts	0x03F8, r1
    1fac:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1fb0:	10 92 2c 04 	sts	0x042C, r1
    1fb4:	10 92 2b 04 	sts	0x042B, r1
		delta_left_speed_prev = 0;
    1fb8:	10 92 46 04 	sts	0x0446, r1
    1fbc:	10 92 45 04 	sts	0x0445, r1
		return;
    1fc0:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1fc2:	49 ef       	ldi	r20, 0xF9	; 249
    1fc4:	20 3c       	cpi	r18, 0xC0	; 192
    1fc6:	34 07       	cpc	r19, r20
    1fc8:	a4 f4       	brge	.+40     	; 0x1ff2 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1fca:	20 ec       	ldi	r18, 0xC0	; 192
    1fcc:	39 ef       	ldi	r19, 0xF9	; 249
    1fce:	30 93 f8 03 	sts	0x03F8, r19
    1fd2:	20 93 f7 03 	sts	0x03F7, r18
    1fd6:	60 e8       	ldi	r22, 0x80	; 128
    1fd8:	73 ef       	ldi	r23, 0xF3	; 243
    1fda:	9a cf       	rjmp	.-204    	; 0x1f10 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1fdc:	80 91 e7 03 	lds	r24, 0x03E7
    1fe0:	90 91 e8 03 	lds	r25, 0x03E8
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	90 93 2c 04 	sts	0x042C, r25
    1fec:	80 93 2b 04 	sts	0x042B, r24
    1ff0:	78 cf       	rjmp	.-272    	; 0x1ee2 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	66 0f       	add	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	8b cf       	rjmp	.-234    	; 0x1f10 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	97 fd       	sbrc	r25, 7
    2000:	06 c0       	rjmp	.+12     	; 0x200e <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2002:	10 92 f6 03 	sts	0x03F6, r1
    2006:	10 92 f5 03 	sts	0x03F5, r1
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    200e:	82 ea       	ldi	r24, 0xA2	; 162
    2010:	20 34       	cpi	r18, 0x40	; 64
    2012:	38 07       	cpc	r19, r24
    2014:	dc f4       	brge	.+54     	; 0x204c <start_horizontal_speed_control_left+0x1a6>
    2016:	80 e4       	ldi	r24, 0x40	; 64
    2018:	92 ea       	ldi	r25, 0xA2	; 162
    201a:	90 93 f6 03 	sts	0x03F6, r25
    201e:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2022:	24 e2       	ldi	r18, 0x24	; 36
    2024:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2026:	2e 51       	subi	r18, 0x1E	; 30
    2028:	30 40       	sbci	r19, 0x00	; 0
    202a:	31 83       	std	Z+1, r19	; 0x01
    202c:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    202e:	5e ef       	ldi	r21, 0xFE	; 254
    2030:	20 30       	cpi	r18, 0x00	; 0
    2032:	35 07       	cpc	r19, r21
    2034:	24 f4       	brge	.+8      	; 0x203e <start_horizontal_speed_control_left+0x198>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	9e ef       	ldi	r25, 0xFE	; 254
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2040:	10 92 f6 03 	sts	0x03F6, r1
    2044:	10 92 f5 03 	sts	0x03F5, r1
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    204c:	35 95       	asr	r19
    204e:	27 95       	ror	r18
    2050:	35 95       	asr	r19
    2052:	27 95       	ror	r18
    2054:	35 95       	asr	r19
    2056:	27 95       	ror	r18
    2058:	35 95       	asr	r19
    205a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    205c:	31 83       	std	Z+1, r19	; 0x01
    205e:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    2060:	12 16       	cp	r1, r18
    2062:	13 06       	cpc	r1, r19
    2064:	0c f4       	brge	.+2      	; 0x2068 <start_horizontal_speed_control_left+0x1c2>
    2066:	92 cf       	rjmp	.-220    	; 0x1f8c <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2068:	21 15       	cp	r18, r1
    206a:	31 05       	cpc	r19, r1
    206c:	e1 f6       	brne	.-72     	; 0x2026 <start_horizontal_speed_control_left+0x180>
    206e:	08 95       	ret

00002070 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2070:	85 b7       	in	r24, 0x35	; 53
    2072:	80 61       	ori	r24, 0x10	; 16
    2074:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2076:	8f ef       	ldi	r24, 0xFF	; 255
    2078:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    207a:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    207c:	97 ef       	ldi	r25, 0xF7	; 247
    207e:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    2080:	90 ee       	ldi	r25, 0xE0	; 224
    2082:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    2084:	90 ef       	ldi	r25, 0xF0	; 240
    2086:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2088:	90 eb       	ldi	r25, 0xB0	; 176
    208a:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    208c:	9c ef       	ldi	r25, 0xFC	; 252
    208e:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    2090:	93 e0       	ldi	r25, 0x03	; 3
    2092:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2094:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2096:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    2098:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    209a:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    209c:	80 91 26 04 	lds	r24, 0x0426
    20a0:	88 23       	and	r24, r24
    20a2:	e1 f0       	breq	.+56     	; 0x20dc <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	d1 f0       	breq	.+52     	; 0x20dc <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    20a8:	82 30       	cpi	r24, 0x02	; 2
    20aa:	51 f1       	breq	.+84     	; 0x2100 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    20ac:	9f ef       	ldi	r25, 0xFF	; 255
    20ae:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    20b2:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    20b6:	9f e0       	ldi	r25, 0x0F	; 15
    20b8:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    20bc:	88 23       	and	r24, r24
    20be:	a9 f4       	brne	.+42     	; 0x20ea <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    20c0:	90 91 05 01 	lds	r25, 0x0105
    20c4:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    20c8:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    20cc:	9f ef       	ldi	r25, 0xFF	; 255
    20ce:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    20d2:	88 23       	and	r24, r24
    20d4:	29 f4       	brne	.+10     	; 0x20e0 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    20d6:	10 92 0b 01 	sts	0x010B, r1
    20da:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    20dc:	14 ba       	out	0x14, r1	; 20
    20de:	e6 cf       	rjmp	.-52     	; 0x20ac <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	c9 f3       	breq	.-14     	; 0x20d6 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	41 f0       	breq	.+16     	; 0x20f8 <initPortsIO+0x88>
    20e8:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	59 f7       	brne	.-42     	; 0x20c8 <initPortsIO+0x58>
		PORTJ = 0x0F;
    20f2:	90 93 05 01 	sts	0x0105, r25
    20f6:	e8 cf       	rjmp	.-48     	; 0x20c8 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    20f8:	87 ef       	ldi	r24, 0xF7	; 247
    20fa:	80 93 0b 01 	sts	0x010B, r24
    20fe:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    2100:	98 e0       	ldi	r25, 0x08	; 8
    2102:	94 bb       	out	0x14, r25	; 20
    2104:	d3 cf       	rjmp	.-90     	; 0x20ac <initPortsIO+0x3c>

00002106 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    2106:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    210a:	10 92 bc 00 	sts	0x00BC, r1
}
    210e:	08 95       	ret

00002110 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2110:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2112:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2114:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    211e:	08 95       	ret

00002120 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2120:	94 ea       	ldi	r25, 0xA4	; 164
    2122:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2126:	90 91 bc 00 	lds	r25, 0x00BC
    212a:	97 ff       	sbrs	r25, 7
    212c:	fc cf       	rjmp	.-8      	; 0x2126 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    212e:	90 91 b9 00 	lds	r25, 0x00B9
    2132:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2134:	98 30       	cpi	r25, 0x08	; 8
    2136:	21 f0       	breq	.+8      	; 0x2140 <i2c_start+0x20>
    2138:	90 31       	cpi	r25, 0x10	; 16
    213a:	11 f0       	breq	.+4      	; 0x2140 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2140:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2144:	84 e8       	ldi	r24, 0x84	; 132
    2146:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    214a:	80 91 bc 00 	lds	r24, 0x00BC
    214e:	87 ff       	sbrs	r24, 7
    2150:	fc cf       	rjmp	.-8      	; 0x214a <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2152:	90 91 b9 00 	lds	r25, 0x00B9
    2156:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2158:	98 31       	cpi	r25, 0x18	; 24
    215a:	21 f0       	breq	.+8      	; 0x2164 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 34       	cpi	r25, 0x40	; 64
    2160:	19 f0       	breq	.+6      	; 0x2168 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2162:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2164:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2166:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	08 95       	ret

0000216c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    216c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    216e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2170:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2172:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2176:	90 91 bc 00 	lds	r25, 0x00BC
    217a:	97 ff       	sbrs	r25, 7
    217c:	fc cf       	rjmp	.-8      	; 0x2176 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    217e:	90 91 b9 00 	lds	r25, 0x00B9
    2182:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2184:	98 30       	cpi	r25, 0x08	; 8
    2186:	11 f0       	breq	.+4      	; 0x218c <i2c_start_wait+0x20>
    2188:	90 31       	cpi	r25, 0x10	; 16
    218a:	99 f7       	brne	.-26     	; 0x2172 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    218c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2190:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2194:	90 91 bc 00 	lds	r25, 0x00BC
    2198:	97 ff       	sbrs	r25, 7
    219a:	fc cf       	rjmp	.-8      	; 0x2194 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    219c:	90 91 b9 00 	lds	r25, 0x00B9
    21a0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    21a2:	90 32       	cpi	r25, 0x20	; 32
    21a4:	19 f0       	breq	.+6      	; 0x21ac <i2c_start_wait+0x40>
    21a6:	98 35       	cpi	r25, 0x58	; 88
    21a8:	09 f0       	breq	.+2      	; 0x21ac <i2c_start_wait+0x40>
    21aa:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    21ac:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    21b0:	90 91 bc 00 	lds	r25, 0x00BC
    21b4:	94 fd       	sbrc	r25, 4
    21b6:	fc cf       	rjmp	.-8      	; 0x21b0 <i2c_start_wait+0x44>
    21b8:	dc cf       	rjmp	.-72     	; 0x2172 <i2c_start_wait+0x6>

000021ba <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    21ba:	94 ea       	ldi	r25, 0xA4	; 164
    21bc:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    21c0:	90 91 bc 00 	lds	r25, 0x00BC
    21c4:	97 ff       	sbrs	r25, 7
    21c6:	fc cf       	rjmp	.-8      	; 0x21c0 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    21c8:	90 91 b9 00 	lds	r25, 0x00B9
    21cc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    21ce:	98 30       	cpi	r25, 0x08	; 8
    21d0:	21 f0       	breq	.+8      	; 0x21da <i2c_rep_start+0x20>
    21d2:	90 31       	cpi	r25, 0x10	; 16
    21d4:	11 f0       	breq	.+4      	; 0x21da <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	08 95       	ret
	}

	// send device address
	TWDR = address;
    21da:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    21de:	84 e8       	ldi	r24, 0x84	; 132
    21e0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    21e4:	80 91 bc 00 	lds	r24, 0x00BC
    21e8:	87 ff       	sbrs	r24, 7
    21ea:	fc cf       	rjmp	.-8      	; 0x21e4 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    21ec:	90 91 b9 00 	lds	r25, 0x00B9
    21f0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    21f2:	98 31       	cpi	r25, 0x18	; 24
    21f4:	21 f0       	breq	.+8      	; 0x21fe <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 34       	cpi	r25, 0x40	; 64
    21fa:	19 f0       	breq	.+6      	; 0x2202 <__stack+0x3>
{
    return i2c_start( address );

}/* i2c_rep_start */
    21fc:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    21fe:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2200:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	08 95       	ret

00002206 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2206:	84 e9       	ldi	r24, 0x94	; 148
    2208:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    220c:	80 91 bc 00 	lds	r24, 0x00BC
    2210:	84 fd       	sbrc	r24, 4
    2212:	fc cf       	rjmp	.-8      	; 0x220c <i2c_stop+0x6>

}/* i2c_stop */
    2214:	08 95       	ret

00002216 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2216:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    221a:	84 e8       	ldi	r24, 0x84	; 132
    221c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2220:	80 91 bc 00 	lds	r24, 0x00BC
    2224:	87 ff       	sbrs	r24, 7
    2226:	fc cf       	rjmp	.-8      	; 0x2220 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2228:	90 91 b9 00 	lds	r25, 0x00B9
    222c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	98 32       	cpi	r25, 0x28	; 40
    2232:	09 f0       	breq	.+2      	; 0x2236 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2234:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2236:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2238:	08 95       	ret

0000223a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    223a:	84 ec       	ldi	r24, 0xC4	; 196
    223c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2240:	80 91 bc 00 	lds	r24, 0x00BC
    2244:	87 ff       	sbrs	r24, 7
    2246:	fc cf       	rjmp	.-8      	; 0x2240 <i2c_readAck+0x6>

    return TWDR;
    2248:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    224c:	08 95       	ret

0000224e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    224e:	84 e8       	ldi	r24, 0x84	; 132
    2250:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2254:	80 91 bc 00 	lds	r24, 0x00BC
    2258:	87 ff       	sbrs	r24, 7
    225a:	fc cf       	rjmp	.-8      	; 0x2254 <i2c_readNak+0x6>
	
    return TWDR;
    225c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2260:	08 95       	ret

00002262 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2262:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2266:	80 e1       	ldi	r24, 0x10	; 16
    2268:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    226c:	e0 ec       	ldi	r30, 0xC0	; 192
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2276:	e1 ec       	ldi	r30, 0xC1	; 193
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	88 69       	ori	r24, 0x98	; 152
    227e:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2280:	e2 ec       	ldi	r30, 0xC2	; 194
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	86 60       	ori	r24, 0x06	; 6
    2288:	80 83       	st	Z, r24

}
    228a:	08 95       	ret

0000228c <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    228c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2290:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2294:	10 92 c2 00 	sts	0x00C2, r1

}
    2298:	08 95       	ret

0000229a <usartTransmit>:

void usartTransmit(unsigned char data) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    229a:	90 91 c0 00 	lds	r25, 0x00C0
    229e:	95 ff       	sbrs	r25, 5
    22a0:	fc cf       	rjmp	.-8      	; 0x229a <usartTransmit>
	UDR0 = data;						// put data into buffer, sends the data
    22a2:	80 93 c6 00 	sts	0x00C6, r24

}
    22a6:	08 95       	ret

000022a8 <__vector_25>:
// for options 0,1,2 there are the commands "+" and "-" that increase or decrease the luminosity of the leds
// for options 3,4 there are the commmands "+", "-" and "s" to increase, decrease and reset to zero the speed respectively
// for options 5 there is the command "s" that stop the sending of the adc values
// if a key is pressed that do not correspond to any commands for that option, then the initial menu is entered.

ISR(USART0_RX_vect) {
    22a8:	1f 92       	push	r1
    22aa:	0f 92       	push	r0
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	0f 92       	push	r0
    22b0:	11 24       	eor	r1, r1
    22b2:	2f 93       	push	r18
    22b4:	8f 93       	push	r24
    22b6:	9f 93       	push	r25

	char receivedByte = UDR0;
    22b8:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {						// menu
    22bc:	90 91 10 02 	lds	r25, 0x0210
    22c0:	99 23       	and	r25, r25
    22c2:	b9 f0       	breq	.+46     	; 0x22f2 <__vector_25+0x4a>
		switch(receivedByte) {
    22c4:	82 33       	cpi	r24, 0x32	; 50
    22c6:	09 f4       	brne	.+2      	; 0x22ca <__vector_25+0x22>
    22c8:	5b c0       	rjmp	.+182    	; 0x2380 <__vector_25+0xd8>
    22ca:	83 33       	cpi	r24, 0x33	; 51
    22cc:	80 f5       	brcc	.+96     	; 0x232e <__vector_25+0x86>
    22ce:	80 33       	cpi	r24, 0x30	; 48
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <__vector_25+0x2c>
    22d2:	7e c0       	rjmp	.+252    	; 0x23d0 <__vector_25+0x128>
    22d4:	81 33       	cpi	r24, 0x31	; 49
    22d6:	29 f4       	brne	.+10     	; 0x22e2 <__vector_25+0x3a>
			case '0': 							// red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': 							// green led
				peripheralChoice = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    22de:	10 92 10 02 	sts	0x0210, r1

	}



}
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	2f 91       	pop	r18
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	0f 90       	pop	r0
    22ee:	1f 90       	pop	r1
    22f0:	18 95       	reti

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    22f2:	90 91 0f 02 	lds	r25, 0x020F
    22f6:	92 30       	cpi	r25, 0x02	; 2
    22f8:	09 f4       	brne	.+2      	; 0x22fc <__vector_25+0x54>
    22fa:	48 c0       	rjmp	.+144    	; 0x238c <__vector_25+0xe4>
    22fc:	93 30       	cpi	r25, 0x03	; 3
    22fe:	40 f1       	brcs	.+80     	; 0x2350 <__vector_25+0xa8>
    2300:	94 30       	cpi	r25, 0x04	; 4
    2302:	09 f4       	brne	.+2      	; 0x2306 <__vector_25+0x5e>
    2304:	8c c0       	rjmp	.+280    	; 0x241e <__vector_25+0x176>
    2306:	94 30       	cpi	r25, 0x04	; 4
    2308:	08 f4       	brcc	.+2      	; 0x230c <__vector_25+0x64>
    230a:	73 c0       	rjmp	.+230    	; 0x23f2 <__vector_25+0x14a>
    230c:	95 30       	cpi	r25, 0x05	; 5
    230e:	49 f7       	brne	.-46     	; 0x22e2 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: 								// adc
				if(receivedByte == 's') {
    2310:	83 37       	cpi	r24, 0x73	; 115
    2312:	39 f7       	brne	.-50     	; 0x22e2 <__vector_25+0x3a>
					sendAdcValues = 0;
    2314:	10 92 06 04 	sts	0x0406, r1
					choosePeripheral = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 10 02 	sts	0x0210, r24

	}



}
    231e:	9f 91       	pop	r25
    2320:	8f 91       	pop	r24
    2322:	2f 91       	pop	r18
    2324:	0f 90       	pop	r0
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	0f 90       	pop	r0
    232a:	1f 90       	pop	r1
    232c:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
    232e:	84 33       	cpi	r24, 0x34	; 52
    2330:	09 f4       	brne	.+2      	; 0x2334 <__vector_25+0x8c>
    2332:	59 c0       	rjmp	.+178    	; 0x23e6 <__vector_25+0x13e>
    2334:	84 33       	cpi	r24, 0x34	; 52
    2336:	08 f4       	brcc	.+2      	; 0x233a <__vector_25+0x92>
    2338:	50 c0       	rjmp	.+160    	; 0x23da <__vector_25+0x132>
    233a:	85 33       	cpi	r24, 0x35	; 53
    233c:	91 f6       	brne	.-92     	; 0x22e2 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':							// send adc values
				peripheralChoice = 5;
    233e:	85 e0       	ldi	r24, 0x05	; 5
    2340:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2344:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	80 93 06 04 	sts	0x0406, r24
				break;
    234e:	c9 cf       	rjmp	.-110    	; 0x22e2 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    2350:	99 23       	and	r25, r25
    2352:	91 f5       	brne	.+100    	; 0x23b8 <__vector_25+0x110>
			case 0:								// red led
				if(receivedByte == '-') {
    2354:	8d 32       	cpi	r24, 0x2D	; 45
    2356:	09 f4       	brne	.+2      	; 0x235a <__vector_25+0xb2>
    2358:	d5 c0       	rjmp	.+426    	; 0x2504 <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    235a:	8b 32       	cpi	r24, 0x2B	; 43
    235c:	e9 f6       	brne	.-70     	; 0x2318 <__vector_25+0x70>
					current_pwm = pwm_red-10;
    235e:	80 91 0c 02 	lds	r24, 0x020C
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2366:	97 fd       	sbrc	r25, 7
    2368:	3f c1       	rjmp	.+638    	; 0x25e8 <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    236a:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    236e:	88 23       	and	r24, r24
    2370:	09 f4       	brne	.+2      	; 0x2374 <__vector_25+0xcc>
    2372:	3c c1       	rjmp	.+632    	; 0x25ec <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	90 93 89 00 	sts	0x0089, r25
    237a:	80 93 88 00 	sts	0x0088, r24
    237e:	b1 cf       	rjmp	.-158    	; 0x22e2 <__vector_25+0x3a>
			case '1': 							// green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': 							// blue led
				peripheralChoice = 2;
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2386:	10 92 10 02 	sts	0x0210, r1
				break;
    238a:	ab cf       	rjmp	.-170    	; 0x22e2 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
    238c:	8d 32       	cpi	r24, 0x2D	; 45
    238e:	09 f4       	brne	.+2      	; 0x2392 <__vector_25+0xea>
    2390:	e8 c0       	rjmp	.+464    	; 0x2562 <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2392:	8b 32       	cpi	r24, 0x2B	; 43
    2394:	09 f6       	brne	.-126    	; 0x2318 <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2396:	80 91 0e 02 	lds	r24, 0x020E
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    239e:	97 fd       	sbrc	r25, 7
    23a0:	35 c1       	rjmp	.+618    	; 0x260c <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    23a2:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    23a6:	88 23       	and	r24, r24
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__vector_25+0x104>
    23aa:	32 c1       	rjmp	.+612    	; 0x2610 <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	90 93 8d 00 	sts	0x008D, r25
    23b2:	80 93 8c 00 	sts	0x008C, r24
    23b6:	95 cf       	rjmp	.-214    	; 0x22e2 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    23b8:	91 30       	cpi	r25, 0x01	; 1
    23ba:	09 f0       	breq	.+2      	; 0x23be <__vector_25+0x116>
    23bc:	92 cf       	rjmp	.-220    	; 0x22e2 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
    23be:	8d 32       	cpi	r24, 0x2D	; 45
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <__vector_25+0x11c>
    23c2:	89 c0       	rjmp	.+274    	; 0x24d6 <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    23c4:	8b 32       	cpi	r24, 0x2B	; 43
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__vector_25+0x122>
    23c8:	3f c0       	rjmp	.+126    	; 0x2448 <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    23ca:	90 93 10 02 	sts	0x0210, r25
    23ce:	89 cf       	rjmp	.-238    	; 0x22e2 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
			case '0': 							// red led
				peripheralChoice = 0;
    23d0:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    23d4:	10 92 10 02 	sts	0x0210, r1
				break;
    23d8:	84 cf       	rjmp	.-248    	; 0x22e2 <__vector_25+0x3a>
			case '2': 							// blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': 							// right motor
				peripheralChoice = 3;
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    23e0:	10 92 10 02 	sts	0x0210, r1
				break;
    23e4:	7e cf       	rjmp	.-260    	; 0x22e2 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    23ec:	10 92 10 02 	sts	0x0210, r1
				break;
    23f0:	78 cf       	rjmp	.-272    	; 0x22e2 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
    23f2:	8b 32       	cpi	r24, 0x2B	; 43
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <__vector_25+0x150>
    23f6:	cc c0       	rjmp	.+408    	; 0x2590 <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    23f8:	8d 32       	cpi	r24, 0x2D	; 45
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__vector_25+0x156>
    23fc:	51 c0       	rjmp	.+162    	; 0x24a0 <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    23fe:	83 37       	cpi	r24, 0x73	; 115
    2400:	09 f0       	breq	.+2      	; 0x2404 <__vector_25+0x15c>
    2402:	8a cf       	rjmp	.-236    	; 0x2318 <__vector_25+0x70>
					pwm_right = 0;
    2404:	10 92 ec 03 	sts	0x03EC, r1
    2408:	10 92 eb 03 	sts	0x03EB, r1
					OCR3A = 0;
    240c:	10 92 99 00 	sts	0x0099, r1
    2410:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2414:	10 92 9b 00 	sts	0x009B, r1
    2418:	10 92 9a 00 	sts	0x009A, r1
    241c:	62 cf       	rjmp	.-316    	; 0x22e2 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
    241e:	8b 32       	cpi	r24, 0x2B	; 43
    2420:	09 f4       	brne	.+2      	; 0x2424 <__vector_25+0x17c>
    2422:	87 c0       	rjmp	.+270    	; 0x2532 <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2424:	8d 32       	cpi	r24, 0x2D	; 45
    2426:	09 f1       	breq	.+66     	; 0x246a <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2428:	83 37       	cpi	r24, 0x73	; 115
    242a:	09 f0       	breq	.+2      	; 0x242e <__vector_25+0x186>
    242c:	75 cf       	rjmp	.-278    	; 0x2318 <__vector_25+0x70>
					pwm_left = 0;
    242e:	10 92 ee 03 	sts	0x03EE, r1
    2432:	10 92 ed 03 	sts	0x03ED, r1
					OCR4A = 0;
    2436:	10 92 a9 00 	sts	0x00A9, r1
    243a:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    243e:	10 92 ab 00 	sts	0x00AB, r1
    2442:	10 92 aa 00 	sts	0x00AA, r1
    2446:	4d cf       	rjmp	.-358    	; 0x22e2 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2448:	80 91 0d 02 	lds	r24, 0x020D
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2450:	97 fd       	sbrc	r25, 7
    2452:	d3 c0       	rjmp	.+422    	; 0x25fa <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2454:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    2458:	88 23       	and	r24, r24
    245a:	09 f4       	brne	.+2      	; 0x245e <__vector_25+0x1b6>
    245c:	d0 c0       	rjmp	.+416    	; 0x25fe <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	90 93 8b 00 	sts	0x008B, r25
    2464:	80 93 8a 00 	sts	0x008A, r24
    2468:	3c cf       	rjmp	.-392    	; 0x22e2 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    246a:	80 91 ed 03 	lds	r24, 0x03ED
    246e:	90 91 ee 03 	lds	r25, 0x03EE
    2472:	4e 97       	sbiw	r24, 0x1e	; 30
    2474:	90 93 ee 03 	sts	0x03EE, r25
    2478:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    247c:	2c ef       	ldi	r18, 0xFC	; 252
    247e:	80 30       	cpi	r24, 0x00	; 0
    2480:	92 07       	cpc	r25, r18
    2482:	0c f0       	brlt	.+2      	; 0x2486 <__vector_25+0x1de>
    2484:	cc c0       	rjmp	.+408    	; 0x261e <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	9c ef       	ldi	r25, 0xFC	; 252
    248a:	90 93 ee 03 	sts	0x03EE, r25
    248e:	80 93 ed 03 	sts	0x03ED, r24
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2496:	90 93 ab 00 	sts	0x00AB, r25
    249a:	80 93 aa 00 	sts	0x00AA, r24
    249e:	21 cf       	rjmp	.-446    	; 0x22e2 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    24a0:	80 91 eb 03 	lds	r24, 0x03EB
    24a4:	90 91 ec 03 	lds	r25, 0x03EC
    24a8:	4e 97       	sbiw	r24, 0x1e	; 30
    24aa:	90 93 ec 03 	sts	0x03EC, r25
    24ae:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    24b2:	2c ef       	ldi	r18, 0xFC	; 252
    24b4:	80 30       	cpi	r24, 0x00	; 0
    24b6:	92 07       	cpc	r25, r18
    24b8:	0c f0       	brlt	.+2      	; 0x24bc <__vector_25+0x214>
    24ba:	b7 c0       	rjmp	.+366    	; 0x262a <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	9c ef       	ldi	r25, 0xFC	; 252
    24c0:	90 93 ec 03 	sts	0x03EC, r25
    24c4:	80 93 eb 03 	sts	0x03EB, r24
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    24cc:	90 93 9b 00 	sts	0x009B, r25
    24d0:	80 93 9a 00 	sts	0x009A, r24
    24d4:	06 cf       	rjmp	.-500    	; 0x22e2 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    24d6:	80 91 80 00 	lds	r24, 0x0080
    24da:	80 62       	ori	r24, 0x20	; 32
    24dc:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    24e0:	80 91 0d 02 	lds	r24, 0x020D
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    24e8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ea:	91 05       	cpc	r25, r1
    24ec:	19 f0       	breq	.+6      	; 0x24f4 <__vector_25+0x24c>
    24ee:	14 f0       	brlt	.+4      	; 0x24f4 <__vector_25+0x24c>
    24f0:	8f ef       	ldi	r24, 0xFF	; 255
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	90 93 8b 00 	sts	0x008B, r25
    24fe:	80 93 8a 00 	sts	0x008A, r24
    2502:	ef ce       	rjmp	.-546    	; 0x22e2 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:								// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2504:	80 91 80 00 	lds	r24, 0x0080
    2508:	80 68       	ori	r24, 0x80	; 128
    250a:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    250e:	80 91 0c 02 	lds	r24, 0x020C
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2516:	8f 3f       	cpi	r24, 0xFF	; 255
    2518:	91 05       	cpc	r25, r1
    251a:	19 f0       	breq	.+6      	; 0x2522 <__vector_25+0x27a>
    251c:	14 f0       	brlt	.+4      	; 0x2522 <__vector_25+0x27a>
    251e:	8f ef       	ldi	r24, 0xFF	; 255
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	90 93 89 00 	sts	0x0089, r25
    252c:	80 93 88 00 	sts	0x0088, r24
    2530:	d8 ce       	rjmp	.-592    	; 0x22e2 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2532:	80 91 ed 03 	lds	r24, 0x03ED
    2536:	90 91 ee 03 	lds	r25, 0x03EE
    253a:	4e 96       	adiw	r24, 0x1e	; 30
    253c:	90 93 ee 03 	sts	0x03EE, r25
    2540:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    2544:	24 e0       	ldi	r18, 0x04	; 4
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	92 07       	cpc	r25, r18
    254a:	d4 f1       	brlt	.+116    	; 0x25c0 <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	94 e0       	ldi	r25, 0x04	; 4
    2550:	90 93 ee 03 	sts	0x03EE, r25
    2554:	80 93 ed 03 	sts	0x03ED, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2558:	90 93 a9 00 	sts	0x00A9, r25
    255c:	80 93 a8 00 	sts	0x00A8, r24
    2560:	c0 ce       	rjmp	.-640    	; 0x22e2 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2562:	80 91 80 00 	lds	r24, 0x0080
    2566:	88 60       	ori	r24, 0x08	; 8
    2568:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    256c:	80 91 0e 02 	lds	r24, 0x020E
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2574:	8f 3f       	cpi	r24, 0xFF	; 255
    2576:	91 05       	cpc	r25, r1
    2578:	19 f0       	breq	.+6      	; 0x2580 <__vector_25+0x2d8>
    257a:	14 f0       	brlt	.+4      	; 0x2580 <__vector_25+0x2d8>
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	90 93 8d 00 	sts	0x008D, r25
    258a:	80 93 8c 00 	sts	0x008C, r24
    258e:	a9 ce       	rjmp	.-686    	; 0x22e2 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2590:	80 91 eb 03 	lds	r24, 0x03EB
    2594:	90 91 ec 03 	lds	r25, 0x03EC
    2598:	4e 96       	adiw	r24, 0x1e	; 30
    259a:	90 93 ec 03 	sts	0x03EC, r25
    259e:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    25a2:	24 e0       	ldi	r18, 0x04	; 4
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	92 07       	cpc	r25, r18
    25a8:	ac f0       	brlt	.+42     	; 0x25d4 <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	94 e0       	ldi	r25, 0x04	; 4
    25ae:	90 93 ec 03 	sts	0x03EC, r25
    25b2:	80 93 eb 03 	sts	0x03EB, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    25b6:	90 93 99 00 	sts	0x0099, r25
    25ba:	80 93 98 00 	sts	0x0098, r24
    25be:	91 ce       	rjmp	.-734    	; 0x22e2 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    25c0:	97 ff       	sbrs	r25, 7
    25c2:	ca cf       	rjmp	.-108    	; 0x2558 <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    25c4:	90 95       	com	r25
    25c6:	81 95       	neg	r24
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	90 93 ab 00 	sts	0x00AB, r25
    25ce:	80 93 aa 00 	sts	0x00AA, r24
    25d2:	87 ce       	rjmp	.-754    	; 0x22e2 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    25d4:	97 ff       	sbrs	r25, 7
    25d6:	ef cf       	rjmp	.-34     	; 0x25b6 <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    25d8:	90 95       	com	r25
    25da:	81 95       	neg	r24
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	90 93 9b 00 	sts	0x009B, r25
    25e2:	80 93 9a 00 	sts	0x009A, r24
    25e6:	7d ce       	rjmp	.-774    	; 0x22e2 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    25e8:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    25ec:	80 91 80 00 	lds	r24, 0x0080
    25f0:	8f 77       	andi	r24, 0x7F	; 127
    25f2:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    25f6:	2d 98       	cbi	0x05, 5	; 5
    25f8:	74 ce       	rjmp	.-792    	; 0x22e2 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    25fa:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    25fe:	80 91 80 00 	lds	r24, 0x0080
    2602:	8f 7d       	andi	r24, 0xDF	; 223
    2604:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2608:	2e 98       	cbi	0x05, 6	; 5
    260a:	6b ce       	rjmp	.-810    	; 0x22e2 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    260c:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2610:	80 91 80 00 	lds	r24, 0x0080
    2614:	87 7f       	andi	r24, 0xF7	; 247
    2616:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    261a:	2f 98       	cbi	0x05, 7	; 5
    261c:	62 ce       	rjmp	.-828    	; 0x22e2 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    261e:	97 ff       	sbrs	r25, 7
    2620:	9b cf       	rjmp	.-202    	; 0x2558 <__vector_25+0x2b0>
						OCR4A = pwm_left;
    2622:	90 95       	com	r25
    2624:	81 95       	neg	r24
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	36 cf       	rjmp	.-404    	; 0x2496 <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    262a:	97 ff       	sbrs	r25, 7
    262c:	c4 cf       	rjmp	.-120    	; 0x25b6 <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    262e:	90 95       	com	r25
    2630:	81 95       	neg	r24
    2632:	9f 4f       	sbci	r25, 0xFF	; 255
    2634:	4b cf       	rjmp	.-362    	; 0x24cc <__vector_25+0x224>

00002636 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2636:	86 b1       	in	r24, 0x06	; 6
    2638:	66 b1       	in	r22, 0x06	; 6
    263a:	26 b1       	in	r18, 0x06	; 6
    263c:	46 b1       	in	r20, 0x06	; 6
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	28 70       	andi	r18, 0x08	; 8
    2642:	30 70       	andi	r19, 0x00	; 0
    2644:	35 95       	asr	r19
    2646:	27 95       	ror	r18
    2648:	35 95       	asr	r19
    264a:	27 95       	ror	r18
    264c:	35 95       	asr	r19
    264e:	27 95       	ror	r18
    2650:	22 0f       	add	r18, r18
    2652:	33 1f       	adc	r19, r19
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	64 70       	andi	r22, 0x04	; 4
    2658:	70 70       	andi	r23, 0x00	; 0
    265a:	75 95       	asr	r23
    265c:	67 95       	ror	r22
    265e:	75 95       	asr	r23
    2660:	67 95       	ror	r22
    2662:	26 0f       	add	r18, r22
    2664:	37 1f       	adc	r19, r23
    2666:	22 0f       	add	r18, r18
    2668:	33 1f       	adc	r19, r19
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	42 70       	andi	r20, 0x02	; 2
    266e:	50 70       	andi	r21, 0x00	; 0
    2670:	55 95       	asr	r21
    2672:	47 95       	ror	r20
    2674:	24 0f       	add	r18, r20
    2676:	35 1f       	adc	r19, r21
    2678:	22 0f       	add	r18, r18
    267a:	81 70       	andi	r24, 0x01	; 1
}
    267c:	82 0f       	add	r24, r18
    267e:	08 95       	ret

00002680 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2680:	f8 94       	cli
	
	rfAddress = eeprom_read_word((uint16_t*)4094);
    2682:	8e ef       	ldi	r24, 0xFE	; 254
    2684:	9f e0       	ldi	r25, 0x0F	; 15
    2686:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__eerd_word_m2560>
    268a:	90 93 04 04 	sts	0x0404, r25
    268e:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2692:	9c 01       	movw	r18, r24
    2694:	21 58       	subi	r18, 0x81	; 129
    2696:	3c 40       	sbci	r19, 0x0C	; 12
    2698:	23 30       	cpi	r18, 0x03	; 3
    269a:	31 05       	cpc	r19, r1
    269c:	b0 f4       	brcc	.+44     	; 0x26ca <initPeripherals+0x4a>
		hardwareRevision = HW_REV_3_0;
    269e:	10 92 26 04 	sts	0x0426, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    26a2:	0e 94 38 10 	call	0x2070	; 0x2070 <initPortsIO>
	initAdc();
    26a6:	0e 94 1d 14 	call	0x283a	; 0x283a <initAdc>
	initMotors();
    26aa:	0e 94 dd 16 	call	0x2dba	; 0x2dba <initMotors>
	initRGBleds();
    26ae:	0e 94 a7 1a 	call	0x354e	; 0x354e <initRGBleds>
	initSPI();
    26b2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initSPI>
	mirf_init();
    26b6:	0e 94 b7 03 	call	0x76e	; 0x76e <mirf_init>
	initUsart();
    26ba:	0e 94 31 11 	call	0x2262	; 0x2262 <initUsart>
	initAccelerometer();
    26be:	0e 94 1e 1b 	call	0x363c	; 0x363c <initAccelerometer>
	init_ir_remote_control();
    26c2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <init_ir_remote_control>

	sei();			// enable global interrupts
    26c6:	78 94       	sei

	
}
    26c8:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    26ca:	2c e0       	ldi	r18, 0x0C	; 12
    26cc:	80 38       	cpi	r24, 0x80	; 128
    26ce:	92 07       	cpc	r25, r18
    26d0:	21 f4       	brne	.+8      	; 0x26da <initPeripherals+0x5a>
		hardwareRevision = HW_REV_3_0_1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	80 93 26 04 	sts	0x0426, r24
    26d8:	e4 cf       	rjmp	.-56     	; 0x26a2 <initPeripherals+0x22>
	}

	if(rfAddress > 3203) {
    26da:	2c e0       	ldi	r18, 0x0C	; 12
    26dc:	84 38       	cpi	r24, 0x84	; 132
    26de:	92 07       	cpc	r25, r18
    26e0:	00 f3       	brcs	.-64     	; 0x26a2 <initPeripherals+0x22>
		hardwareRevision = HW_REV_3_1;
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	80 93 26 04 	sts	0x0426, r24
    26e8:	dc cf       	rjmp	.-72     	; 0x26a2 <initPeripherals+0x22>

000026ea <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    26ea:	1f 92       	push	r1
    26ec:	0f 92       	push	r0
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	0f 92       	push	r0
    26f2:	11 24       	eor	r1, r1

}
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	0f 90       	pop	r0
    26fa:	1f 90       	pop	r1
    26fc:	18 95       	reti

000026fe <sleep>:

void sleep(unsigned char seconds) {
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2702:	9e e1       	ldi	r25, 0x1E	; 30
    2704:	89 9f       	mul	r24, r25
    2706:	e0 01       	movw	r28, r0
    2708:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    270a:	80 91 68 00 	lds	r24, 0x0068
    270e:	8d 7f       	andi	r24, 0xFD	; 253
    2710:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2714:	80 91 6c 00 	lds	r24, 0x006C
    2718:	8f 77       	andi	r24, 0x7F	; 127
    271a:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    271e:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2720:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2724:	80 91 7a 00 	lds	r24, 0x007A
    2728:	80 61       	ori	r24, 0x10	; 16
    272a:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    272e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2732:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2736:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    273a:	88 b3       	in	r24, 0x18	; 24
    273c:	87 60       	ori	r24, 0x07	; 7
    273e:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2740:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2744:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2748:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    274c:	89 b3       	in	r24, 0x19	; 25
    274e:	87 60       	ori	r24, 0x07	; 7
    2750:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2752:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2756:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    275a:	0e 94 46 11 	call	0x228c	; 0x228c <closeUsart>
	closeSPI();
    275e:	0e 94 0b 03 	call	0x616	; 0x616 <closeSPI>
	i2c_close();
    2762:	0e 94 83 10 	call	0x2106	; 0x2106 <i2c_close>

	// set port pins
	initPortsIO();
    2766:	0e 94 38 10 	call	0x2070	; 0x2070 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    276a:	83 b7       	in	r24, 0x33	; 51
    276c:	8f 60       	ori	r24, 0x0F	; 15
    276e:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2776:	80 91 b0 00 	lds	r24, 0x00B0
    277a:	8d 7f       	andi	r24, 0xFD	; 253
    277c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2780:	80 91 b1 00 	lds	r24, 0x00B1
    2784:	87 60       	ori	r24, 0x07	; 7
    2786:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    278a:	20 97       	sbiw	r28, 0x00	; 0
    278c:	19 f0       	breq	.+6      	; 0x2794 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    278e:	88 95       	sleep
		pause--;
    2790:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    2792:	e9 f7       	brne	.-6      	; 0x278e <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2794:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2796:	80 91 b1 00 	lds	r24, 0x00B1
    279a:	88 7f       	andi	r24, 0xF8	; 248
    279c:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    27a0:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    27a4:	80 91 b0 00 	lds	r24, 0x00B0
    27a8:	82 60       	ori	r24, 0x02	; 2
    27aa:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    27ae:	8f ef       	ldi	r24, 0xFF	; 255
    27b0:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    27b4:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    27b8:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    27bc:	10 92 ec 03 	sts	0x03EC, r1
    27c0:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    27c4:	10 92 ee 03 	sts	0x03EE, r1
    27c8:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    27cc:	f8 94       	cli
	
	rfAddress = eeprom_read_word((uint16_t*)4094);
    27ce:	8e ef       	ldi	r24, 0xFE	; 254
    27d0:	9f e0       	ldi	r25, 0x0F	; 15
    27d2:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__eerd_word_m2560>
    27d6:	90 93 04 04 	sts	0x0404, r25
    27da:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    27de:	9c 01       	movw	r18, r24
    27e0:	21 58       	subi	r18, 0x81	; 129
    27e2:	3c 40       	sbci	r19, 0x0C	; 12
    27e4:	23 30       	cpi	r18, 0x03	; 3
    27e6:	31 05       	cpc	r19, r1
    27e8:	c0 f4       	brcc	.+48     	; 0x281a <sleep+0x11c>
		hardwareRevision = HW_REV_3_0;
    27ea:	10 92 26 04 	sts	0x0426, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    27ee:	0e 94 38 10 	call	0x2070	; 0x2070 <initPortsIO>
	initAdc();
    27f2:	0e 94 1d 14 	call	0x283a	; 0x283a <initAdc>
	initMotors();
    27f6:	0e 94 dd 16 	call	0x2dba	; 0x2dba <initMotors>
	initRGBleds();
    27fa:	0e 94 a7 1a 	call	0x354e	; 0x354e <initRGBleds>
	initSPI();
    27fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initSPI>
	mirf_init();
    2802:	0e 94 b7 03 	call	0x76e	; 0x76e <mirf_init>
	initUsart();
    2806:	0e 94 31 11 	call	0x2262	; 0x2262 <initUsart>
	initAccelerometer();
    280a:	0e 94 1e 1b 	call	0x363c	; 0x363c <initAccelerometer>
	init_ir_remote_control();
    280e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <init_ir_remote_control>

	sei();			// enable global interrupts
    2812:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    281a:	2c e0       	ldi	r18, 0x0C	; 12
    281c:	80 38       	cpi	r24, 0x80	; 128
    281e:	92 07       	cpc	r25, r18
    2820:	21 f4       	brne	.+8      	; 0x282a <sleep+0x12c>
		hardwareRevision = HW_REV_3_0_1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	80 93 26 04 	sts	0x0426, r24
    2828:	e2 cf       	rjmp	.-60     	; 0x27ee <sleep+0xf0>
	}

	if(rfAddress > 3203) {
    282a:	2c e0       	ldi	r18, 0x0C	; 12
    282c:	84 38       	cpi	r24, 0x84	; 132
    282e:	92 07       	cpc	r25, r18
    2830:	f0 f2       	brcs	.-68     	; 0x27ee <sleep+0xf0>
		hardwareRevision = HW_REV_3_1;
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	80 93 26 04 	sts	0x0426, r24
    2838:	da cf       	rjmp	.-76     	; 0x27ee <sleep+0xf0>

0000283a <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    283a:	ea e7       	ldi	r30, 0x7A	; 122
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	86 60       	ori	r24, 0x06	; 6
    2842:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    2844:	ac e7       	ldi	r26, 0x7C	; 124
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	8c 91       	ld	r24, X
    284a:	80 64       	ori	r24, 0x40	; 64
    284c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    284e:	80 81       	ld	r24, Z
    2850:	80 62       	ori	r24, 0x20	; 32
    2852:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2854:	ab e7       	ldi	r26, 0x7B	; 123
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	8c 91       	ld	r24, X
    285a:	88 7f       	andi	r24, 0xF8	; 248
    285c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    285e:	80 81       	ld	r24, Z
    2860:	88 60       	ori	r24, 0x08	; 8
    2862:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2864:	80 81       	ld	r24, Z
    2866:	80 68       	ori	r24, 0x80	; 128
    2868:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    286a:	80 81       	ld	r24, Z
    286c:	80 64       	ori	r24, 0x40	; 64
    286e:	80 83       	st	Z, r24

}
    2870:	08 95       	ret

00002872 <__vector_29>:

ISR(ADC_vect) {
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	0b b6       	in	r0, 0x3b	; 59
    287c:	0f 92       	push	r0
    287e:	11 24       	eor	r1, r1
    2880:	2f 93       	push	r18
    2882:	3f 93       	push	r19
    2884:	4f 93       	push	r20
    2886:	5f 93       	push	r21
    2888:	6f 93       	push	r22
    288a:	8f 93       	push	r24
    288c:	9f 93       	push	r25
    288e:	ef 93       	push	r30
    2890:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    2892:	80 91 21 04 	lds	r24, 0x0421
    2896:	90 91 22 04 	lds	r25, 0x0422
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	90 93 22 04 	sts	0x0422, r25
    28a0:	80 93 21 04 	sts	0x0421, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    28a4:	20 91 78 00 	lds	r18, 0x0078
    28a8:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    28aa:	40 91 79 00 	lds	r20, 0x0079
    28ae:	94 2f       	mov	r25, r20
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	28 2b       	or	r18, r24
    28b4:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    28b6:	80 91 bf 03 	lds	r24, 0x03BF
    28ba:	82 30       	cpi	r24, 0x02	; 2
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <__vector_29+0x4e>
    28be:	aa c1       	rjmp	.+852    	; 0x2c14 <__vector_29+0x3a2>
    28c0:	83 30       	cpi	r24, 0x03	; 3
    28c2:	08 f4       	brcc	.+2      	; 0x28c6 <__vector_29+0x54>
    28c4:	43 c0       	rjmp	.+134    	; 0x294c <__vector_29+0xda>
    28c6:	83 30       	cpi	r24, 0x03	; 3
    28c8:	09 f4       	brne	.+2      	; 0x28cc <__vector_29+0x5a>
    28ca:	c7 c1       	rjmp	.+910    	; 0x2c5a <__vector_29+0x3e8>
    28cc:	84 30       	cpi	r24, 0x04	; 4
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <__vector_29+0x60>
    28d0:	66 c1       	rjmp	.+716    	; 0x2b9e <__vector_29+0x32c>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    28d2:	80 91 c0 03 	lds	r24, 0x03C0
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	09 f4       	brne	.+2      	; 0x28dc <__vector_29+0x6a>
    28da:	4d c1       	rjmp	.+666    	; 0x2b76 <__vector_29+0x304>
    28dc:	83 30       	cpi	r24, 0x03	; 3
    28de:	08 f0       	brcs	.+2      	; 0x28e2 <__vector_29+0x70>
    28e0:	cb c0       	rjmp	.+406    	; 0x2a78 <__vector_29+0x206>
    28e2:	88 23       	and	r24, r24
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <__vector_29+0x76>
    28e6:	22 c1       	rjmp	.+580    	; 0x2b2c <__vector_29+0x2ba>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    28e8:	80 91 2a 03 	lds	r24, 0x032A
    28ec:	86 95       	lsr	r24
    28ee:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    28f2:	80 91 c1 03 	lds	r24, 0x03C1
    28f6:	88 23       	and	r24, r24
    28f8:	09 f0       	breq	.+2      	; 0x28fc <__vector_29+0x8a>
    28fa:	df c1       	rjmp	.+958    	; 0x2cba <__vector_29+0x448>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2908:	90 91 29 03 	lds	r25, 0x0329
    290c:	98 30       	cpi	r25, 0x08	; 8
    290e:	08 f0       	brcs	.+2      	; 0x2912 <__vector_29+0xa0>
    2910:	eb c0       	rjmp	.+470    	; 0x2ae8 <__vector_29+0x276>
		ADCSRB &= ~(1 << MUX5);
    2912:	90 91 7b 00 	lds	r25, 0x007B
    2916:	97 7f       	andi	r25, 0xF7	; 247
    2918:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    291c:	90 91 29 03 	lds	r25, 0x0329
    2920:	90 5c       	subi	r25, 0xC0	; 192
    2922:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2926:	82 30       	cpi	r24, 0x02	; 2
    2928:	09 f4       	brne	.+2      	; 0x292c <__vector_29+0xba>
    292a:	eb c0       	rjmp	.+470    	; 0x2b02 <__vector_29+0x290>

	}

	//LED_BLUE_OFF;

}
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	6f 91       	pop	r22
    2936:	5f 91       	pop	r21
    2938:	4f 91       	pop	r20
    293a:	3f 91       	pop	r19
    293c:	2f 91       	pop	r18
    293e:	0f 90       	pop	r0
    2940:	0b be       	out	0x3b, r0	; 59
    2942:	0f 90       	pop	r0
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	0f 90       	pop	r0
    2948:	1f 90       	pop	r1
    294a:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    294c:	88 23       	and	r24, r24
    294e:	09 f0       	breq	.+2      	; 0x2952 <__vector_29+0xe0>
    2950:	fe c0       	rjmp	.+508    	; 0x2b4e <__vector_29+0x2dc>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2952:	60 91 2a 03 	lds	r22, 0x032A
    2956:	6e 30       	cpi	r22, 0x0E	; 14
    2958:	09 f4       	brne	.+2      	; 0x295c <__vector_29+0xea>
    295a:	d0 c1       	rjmp	.+928    	; 0x2cfc <__vector_29+0x48a>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    295c:	46 2f       	mov	r20, r22
    295e:	50 e0       	ldi	r21, 0x00	; 0
    2960:	fa 01       	movw	r30, r20
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	e1 5d       	subi	r30, 0xD1	; 209
    2968:	fc 4f       	sbci	r31, 0xFC	; 252
    296a:	31 83       	std	Z+1, r19	; 0x01
    296c:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    296e:	40 ff       	sbrs	r20, 0
    2970:	77 c0       	rjmp	.+238    	; 0x2a60 <__vector_29+0x1ee>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2972:	fa 01       	movw	r30, r20
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	e3 5d       	subi	r30, 0xD3	; 211
    297a:	fc 4f       	sbci	r31, 0xFC	; 252
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	fa 01       	movw	r30, r20
    2982:	ee 0f       	add	r30, r30
    2984:	ff 1f       	adc	r31, r31
    2986:	e1 5d       	subi	r30, 0xD1	; 209
    2988:	fc 4f       	sbci	r31, 0xFC	; 252
    298a:	40 81       	ld	r20, Z
    298c:	51 81       	ldd	r21, Z+1	; 0x01
    298e:	26 2f       	mov	r18, r22
    2990:	26 95       	lsr	r18
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	84 1b       	sub	r24, r20
    2996:	95 0b       	sbc	r25, r21
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	f9 01       	movw	r30, r18
    299e:	e9 58       	subi	r30, 0x89	; 137
    29a0:	fc 4f       	sbci	r31, 0xFC	; 252
    29a2:	40 81       	ld	r20, Z
    29a4:	51 81       	ldd	r21, Z+1	; 0x01
    29a6:	84 1b       	sub	r24, r20
    29a8:	95 0b       	sbc	r25, r21
    29aa:	f9 01       	movw	r30, r18
    29ac:	e1 5a       	subi	r30, 0xA1	; 161
    29ae:	fc 4f       	sbci	r31, 0xFC	; 252
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    29b4:	97 fd       	sbrc	r25, 7
    29b6:	bd c1       	rjmp	.+890    	; 0x2d32 <__vector_29+0x4c0>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    29b8:	44 e0       	ldi	r20, 0x04	; 4
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	94 07       	cpc	r25, r20
    29be:	24 f0       	brlt	.+8      	; 0x29c8 <__vector_29+0x156>
					proximityResult[currentProx>>1] = 1024;
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	94 e0       	ldi	r25, 0x04	; 4
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    29c8:	60 31       	cpi	r22, 0x10	; 16
    29ca:	48 f4       	brcc	.+18     	; 0x29de <__vector_29+0x16c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    29cc:	8c 33       	cpi	r24, 0x3C	; 60
    29ce:	91 05       	cpc	r25, r1
    29d0:	0c f0       	brlt	.+2      	; 0x29d4 <__vector_29+0x162>
    29d2:	b4 c1       	rjmp	.+872    	; 0x2d3c <__vector_29+0x4ca>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    29d4:	29 53       	subi	r18, 0x39	; 57
    29d6:	3c 4f       	sbci	r19, 0xFC	; 252
    29d8:	f9 01       	movw	r30, r18
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    29de:	80 91 28 04 	lds	r24, 0x0428
    29e2:	88 23       	and	r24, r24
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <__vector_29+0x176>
    29e6:	75 c1       	rjmp	.+746    	; 0x2cd2 <__vector_29+0x460>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    29e8:	80 91 6f 03 	lds	r24, 0x036F
    29ec:	90 91 70 03 	lds	r25, 0x0370
    29f0:	f1 e0       	ldi	r31, 0x01	; 1
    29f2:	84 3a       	cpi	r24, 0xA4	; 164
    29f4:	9f 07       	cpc	r25, r31
    29f6:	cc f0       	brlt	.+50     	; 0x2a2a <__vector_29+0x1b8>
    29f8:	80 91 71 03 	lds	r24, 0x0371
    29fc:	90 91 72 03 	lds	r25, 0x0372
    2a00:	21 e0       	ldi	r18, 0x01	; 1
    2a02:	84 3a       	cpi	r24, 0xA4	; 164
    2a04:	92 07       	cpc	r25, r18
    2a06:	8c f0       	brlt	.+34     	; 0x2a2a <__vector_29+0x1b8>
    2a08:	80 91 73 03 	lds	r24, 0x0373
    2a0c:	90 91 74 03 	lds	r25, 0x0374
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	84 3a       	cpi	r24, 0xA4	; 164
    2a14:	94 07       	cpc	r25, r20
    2a16:	4c f0       	brlt	.+18     	; 0x2a2a <__vector_29+0x1b8>
    2a18:	80 91 75 03 	lds	r24, 0x0375
    2a1c:	90 91 76 03 	lds	r25, 0x0376
    2a20:	e1 e0       	ldi	r30, 0x01	; 1
    2a22:	84 3a       	cpi	r24, 0xA4	; 164
    2a24:	9e 07       	cpc	r25, r30
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <__vector_29+0x1b8>
    2a28:	54 c1       	rjmp	.+680    	; 0x2cd2 <__vector_29+0x460>
						cliffDetectedFlag = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	80 93 29 04 	sts	0x0429, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    2a30:	10 92 ee 03 	sts	0x03EE, r1
    2a34:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    2a38:	10 92 a9 00 	sts	0x00A9, r1
    2a3c:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    2a40:	10 92 ab 00 	sts	0x00AB, r1
    2a44:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    2a48:	10 92 ec 03 	sts	0x03EC, r1
    2a4c:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    2a50:	10 92 99 00 	sts	0x0099, r1
    2a54:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2a58:	10 92 9b 00 	sts	0x009B, r1
    2a5c:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    2a60:	6f 5f       	subi	r22, 0xFF	; 255
    2a62:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2a66:	68 31       	cpi	r22, 0x18	; 24
    2a68:	08 f4       	brcc	.+2      	; 0x2a6c <__vector_29+0x1fa>
    2a6a:	33 cf       	rjmp	.-410    	; 0x28d2 <__vector_29+0x60>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2a6c:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	80 93 c6 03 	sts	0x03C6, r24
    2a76:	2d cf       	rjmp	.-422    	; 0x28d2 <__vector_29+0x60>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2a78:	83 30       	cpi	r24, 0x03	; 3
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <__vector_29+0x20c>
    2a7c:	b7 c0       	rjmp	.+366    	; 0x2bec <__vector_29+0x37a>
    2a7e:	84 30       	cpi	r24, 0x04	; 4
    2a80:	09 f0       	breq	.+2      	; 0x2a84 <__vector_29+0x212>
    2a82:	42 cf       	rjmp	.-380    	; 0x2908 <__vector_29+0x96>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    2a84:	90 91 2c 03 	lds	r25, 0x032C
    2a88:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    2a8c:	90 91 2d 03 	lds	r25, 0x032D
    2a90:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    2a94:	90 91 c2 03 	lds	r25, 0x03C2
    2a98:	99 23       	and	r25, r25
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <__vector_29+0x22c>
    2a9c:	08 c1       	rjmp	.+528    	; 0x2cae <__vector_29+0x43c>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    2aa4:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    2aa8:	60 91 2a 03 	lds	r22, 0x032A
    2aac:	6e 30       	cpi	r22, 0x0E	; 14
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <__vector_29+0x240>
    2ab0:	1f c1       	rjmp	.+574    	; 0x2cf0 <__vector_29+0x47e>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    2ab2:	86 2f       	mov	r24, r22
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	60 ff       	sbrs	r22, 0
    2ab8:	f1 c0       	rjmp	.+482    	; 0x2c9c <__vector_29+0x42a>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2aba:	60 31       	cpi	r22, 0x10	; 16
    2abc:	08 f4       	brcc	.+2      	; 0x2ac0 <__vector_29+0x24e>
    2abe:	0c c1       	rjmp	.+536    	; 0x2cd8 <__vector_29+0x466>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    2ac0:	20 91 26 04 	lds	r18, 0x0426
    2ac4:	22 23       	and	r18, r18
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <__vector_29+0x258>
    2ac8:	d5 c0       	rjmp	.+426    	; 0x2c74 <__vector_29+0x402>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2aca:	40 97       	sbiw	r24, 0x10	; 16
    2acc:	95 95       	asr	r25
    2ace:	87 95       	ror	r24
    2ad0:	21 e0       	ldi	r18, 0x01	; 1
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <__vector_29+0x268>
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	8a 95       	dec	r24
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <__vector_29+0x264>
    2ade:	20 93 05 01 	sts	0x0105, r18
    2ae2:	80 91 c0 03 	lds	r24, 0x03C0
    2ae6:	10 cf       	rjmp	.-480    	; 0x2908 <__vector_29+0x96>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2ae8:	90 91 7b 00 	lds	r25, 0x007B
    2aec:	98 60       	ori	r25, 0x08	; 8
    2aee:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    2af2:	90 91 29 03 	lds	r25, 0x0329
    2af6:	98 5c       	subi	r25, 0xC8	; 200
    2af8:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <__vector_29+0x290>
    2b00:	15 cf       	rjmp	.-470    	; 0x292c <__vector_29+0xba>

		if(hardwareRevision == HW_REV_3_0) {
    2b02:	20 91 26 04 	lds	r18, 0x0426
    2b06:	22 23       	and	r18, r18
    2b08:	51 f0       	breq	.+20     	; 0x2b1e <__vector_29+0x2ac>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2b0a:	21 30       	cpi	r18, 0x01	; 1
    2b0c:	19 f0       	breq	.+6      	; 0x2b14 <__vector_29+0x2a2>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2b0e:	22 30       	cpi	r18, 0x02	; 2
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <__vector_29+0x2a2>
    2b12:	0c cf       	rjmp	.-488    	; 0x292c <__vector_29+0xba>
			PORTJ = 0xFF;
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
    2b16:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2b1a:	12 b8       	out	0x02, r1	; 2
    2b1c:	07 cf       	rjmp	.-498    	; 0x292c <__vector_29+0xba>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    2b1e:	80 91 05 01 	lds	r24, 0x0105
    2b22:	80 7f       	andi	r24, 0xF0	; 240
    2b24:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2b28:	12 b8       	out	0x02, r1	; 2
    2b2a:	00 cf       	rjmp	.-512    	; 0x292c <__vector_29+0xba>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2b2c:	81 30       	cpi	r24, 0x01	; 1
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <__vector_29+0x2c0>
    2b30:	eb ce       	rjmp	.-554    	; 0x2908 <__vector_29+0x96>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2b32:	80 91 2b 03 	lds	r24, 0x032B
    2b36:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2b3a:	80 91 2e 03 	lds	r24, 0x032E
    2b3e:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    2b42:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2b4c:	dd ce       	rjmp	.-582    	; 0x2908 <__vector_29+0x96>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <__vector_29+0x2e2>
    2b52:	bf ce       	rjmp	.-642    	; 0x28d2 <__vector_29+0x60>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2b54:	80 91 d9 03 	lds	r24, 0x03D9
    2b58:	90 91 da 03 	lds	r25, 0x03DA
    2b5c:	82 0f       	add	r24, r18
    2b5e:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    2b60:	96 95       	lsr	r25
    2b62:	87 95       	ror	r24
    2b64:	90 93 da 03 	sts	0x03DA, r25
    2b68:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2b6c:	80 91 c0 03 	lds	r24, 0x03C0
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	09 f0       	breq	.+2      	; 0x2b76 <__vector_29+0x304>
    2b74:	b3 ce       	rjmp	.-666    	; 0x28dc <__vector_29+0x6a>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2b76:	80 91 2c 03 	lds	r24, 0x032C
    2b7a:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    2b7e:	80 91 2d 03 	lds	r24, 0x032D
    2b82:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2b86:	80 91 c2 03 	lds	r24, 0x03C2
    2b8a:	88 23       	and	r24, r24
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <__vector_29+0x31e>
    2b8e:	9b c0       	rjmp	.+310    	; 0x2cc6 <__vector_29+0x454>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2b9c:	b5 ce       	rjmp	.-662    	; 0x2908 <__vector_29+0x96>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2b9e:	80 91 0a 02 	lds	r24, 0x020A
    2ba2:	88 23       	and	r24, r24
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <__vector_29+0x336>
    2ba6:	95 ce       	rjmp	.-726    	; 0x28d2 <__vector_29+0x60>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2ba8:	90 91 00 01 	lds	r25, 0x0100
    2bac:	93 fd       	sbrc	r25, 3
    2bae:	91 ce       	rjmp	.-734    	; 0x28d2 <__vector_29+0x60>
    2bb0:	90 91 00 01 	lds	r25, 0x0100
    2bb4:	94 fd       	sbrc	r25, 4
    2bb6:	8d ce       	rjmp	.-742    	; 0x28d2 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2bb8:	48 2f       	mov	r20, r24
    2bba:	4f 5f       	subi	r20, 0xFF	; 255
    2bbc:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    2bc0:	45 30       	cpi	r20, 0x05	; 5
    2bc2:	08 f4       	brcc	.+2      	; 0x2bc6 <__vector_29+0x354>
    2bc4:	86 ce       	rjmp	.-756    	; 0x28d2 <__vector_29+0x60>
					left_vel_sum += value;
    2bc6:	80 91 e3 03 	lds	r24, 0x03E3
    2bca:	90 91 e4 03 	lds	r25, 0x03E4
    2bce:	82 0f       	add	r24, r18
    2bd0:	93 1f       	adc	r25, r19
    2bd2:	90 93 e4 03 	sts	0x03E4, r25
    2bd6:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    2bda:	48 30       	cpi	r20, 0x08	; 8
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <__vector_29+0x36e>
    2bde:	79 ce       	rjmp	.-782    	; 0x28d2 <__vector_29+0x60>
						firstSampleLeft = 0;
    2be0:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	80 93 07 02 	sts	0x0207, r24
    2bea:	73 ce       	rjmp	.-794    	; 0x28d2 <__vector_29+0x60>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2bec:	80 91 2b 03 	lds	r24, 0x032B
    2bf0:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2bf4:	80 91 2e 03 	lds	r24, 0x032E
    2bf8:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    2bfc:	80 91 c1 03 	lds	r24, 0x03C1
    2c00:	88 23       	and	r24, r24
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <__vector_29+0x394>
    2c04:	4e c0       	rjmp	.+156    	; 0x2ca2 <__vector_29+0x430>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    2c0c:	84 e0       	ldi	r24, 0x04	; 4
    2c0e:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2c12:	7a ce       	rjmp	.-780    	; 0x2908 <__vector_29+0x96>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    2c14:	80 91 09 02 	lds	r24, 0x0209
    2c18:	88 23       	and	r24, r24
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <__vector_29+0x3ac>
    2c1c:	5a ce       	rjmp	.-844    	; 0x28d2 <__vector_29+0x60>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2c1e:	63 99       	sbic	0x0c, 3	; 12
    2c20:	58 ce       	rjmp	.-848    	; 0x28d2 <__vector_29+0x60>
    2c22:	64 99       	sbic	0x0c, 4	; 12
    2c24:	56 ce       	rjmp	.-852    	; 0x28d2 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2c26:	48 2f       	mov	r20, r24
    2c28:	4f 5f       	subi	r20, 0xFF	; 255
    2c2a:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2c2e:	45 30       	cpi	r20, 0x05	; 5
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <__vector_29+0x3c2>
    2c32:	4f ce       	rjmp	.-866    	; 0x28d2 <__vector_29+0x60>
					right_vel_sum += value;
    2c34:	80 91 e5 03 	lds	r24, 0x03E5
    2c38:	90 91 e6 03 	lds	r25, 0x03E6
    2c3c:	82 0f       	add	r24, r18
    2c3e:	93 1f       	adc	r25, r19
    2c40:	90 93 e6 03 	sts	0x03E6, r25
    2c44:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2c48:	48 30       	cpi	r20, 0x08	; 8
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <__vector_29+0x3dc>
    2c4c:	42 ce       	rjmp	.-892    	; 0x28d2 <__vector_29+0x60>
						firstSampleRight = 0;
    2c4e:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 93 08 02 	sts	0x0208, r24
    2c58:	3c ce       	rjmp	.-904    	; 0x28d2 <__vector_29+0x60>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2c5a:	80 91 d7 03 	lds	r24, 0x03D7
    2c5e:	90 91 d8 03 	lds	r25, 0x03D8
    2c62:	82 0f       	add	r24, r18
    2c64:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2c66:	96 95       	lsr	r25
    2c68:	87 95       	ror	r24
    2c6a:	90 93 d8 03 	sts	0x03D8, r25
    2c6e:	80 93 d7 03 	sts	0x03D7, r24
			break;
    2c72:	2f ce       	rjmp	.-930    	; 0x28d2 <__vector_29+0x60>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    2c74:	21 30       	cpi	r18, 0x01	; 1
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <__vector_29+0x40a>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    2c78:	22 30       	cpi	r18, 0x02	; 2
    2c7a:	81 f4       	brne	.+32     	; 0x2c9c <__vector_29+0x42a>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2c7c:	40 91 05 01 	lds	r20, 0x0105
    2c80:	40 97       	sbiw	r24, 0x10	; 16
    2c82:	95 95       	asr	r25
    2c84:	87 95       	ror	r24
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <__vector_29+0x41e>
    2c8c:	22 0f       	add	r18, r18
    2c8e:	33 1f       	adc	r19, r19
    2c90:	8a 95       	dec	r24
    2c92:	e2 f7       	brpl	.-8      	; 0x2c8c <__vector_29+0x41a>
    2c94:	20 95       	com	r18
    2c96:	24 23       	and	r18, r20
    2c98:	20 93 05 01 	sts	0x0105, r18
    2c9c:	80 91 c0 03 	lds	r24, 0x03C0
    2ca0:	33 ce       	rjmp	.-922    	; 0x2908 <__vector_29+0x96>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	d1 f1       	breq	.+116    	; 0x2d1a <__vector_29+0x4a8>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2ca6:	85 e0       	ldi	r24, 0x05	; 5
    2ca8:	80 93 bf 03 	sts	0x03BF, r24
    2cac:	af cf       	rjmp	.-162    	; 0x2c0c <__vector_29+0x39a>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2cae:	91 30       	cpi	r25, 0x01	; 1
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <__vector_29+0x442>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2cb2:	85 e0       	ldi	r24, 0x05	; 5
    2cb4:	80 93 bf 03 	sts	0x03BF, r24
    2cb8:	f5 ce       	rjmp	.-534    	; 0x2aa4 <__vector_29+0x232>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	b1 f1       	breq	.+108    	; 0x2d2a <__vector_29+0x4b8>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2cbe:	85 e0       	ldi	r24, 0x05	; 5
    2cc0:	80 93 bf 03 	sts	0x03BF, r24
    2cc4:	1e ce       	rjmp	.-964    	; 0x2902 <__vector_29+0x90>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	61 f1       	breq	.+88     	; 0x2d22 <__vector_29+0x4b0>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2cca:	85 e0       	ldi	r24, 0x05	; 5
    2ccc:	80 93 bf 03 	sts	0x03BF, r24
    2cd0:	62 cf       	rjmp	.-316    	; 0x2b96 <__vector_29+0x324>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2cd2:	10 92 29 04 	sts	0x0429, r1
    2cd6:	c4 ce       	rjmp	.-632    	; 0x2a60 <__vector_29+0x1ee>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    2cd8:	66 95       	lsr	r22
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <__vector_29+0x472>
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	6a 95       	dec	r22
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <__vector_29+0x46e>
    2ce8:	82 b9       	out	0x02, r24	; 2
    2cea:	80 91 c0 03 	lds	r24, 0x03C0
    2cee:	0c ce       	rjmp	.-1000   	; 0x2908 <__vector_29+0x96>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    2cf0:	80 91 c5 03 	lds	r24, 0x03C5
    2cf4:	81 30       	cpi	r24, 0x01	; 1
    2cf6:	a1 f1       	breq	.+104    	; 0x2d60 <__vector_29+0x4ee>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	06 ce       	rjmp	.-1012   	; 0x2908 <__vector_29+0x96>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2cfc:	80 91 c5 03 	lds	r24, 0x03C5
    2d00:	82 30       	cpi	r24, 0x02	; 2
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <__vector_29+0x494>
    2d04:	2b ce       	rjmp	.-938    	; 0x295c <__vector_29+0xea>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2d06:	30 93 c4 03 	sts	0x03C4, r19
    2d0a:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    2d0e:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2d12:	46 98       	cbi	0x08, 6	; 8
    2d14:	4e e0       	ldi	r20, 0x0E	; 14
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	2a ce       	rjmp	.-940    	; 0x296e <__vector_29+0xfc>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	80 93 bf 03 	sts	0x03BF, r24
    2d20:	75 cf       	rjmp	.-278    	; 0x2c0c <__vector_29+0x39a>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2d22:	84 e0       	ldi	r24, 0x04	; 4
    2d24:	80 93 bf 03 	sts	0x03BF, r24
    2d28:	36 cf       	rjmp	.-404    	; 0x2b96 <__vector_29+0x324>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	80 93 bf 03 	sts	0x03BF, r24
    2d30:	e8 cd       	rjmp	.-1072   	; 0x2902 <__vector_29+0x90>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2d32:	11 82       	std	Z+1, r1	; 0x01
    2d34:	10 82       	st	Z, r1
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	46 ce       	rjmp	.-884    	; 0x29c8 <__vector_29+0x156>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	44 5c       	subi	r20, 0xC4	; 196
    2d40:	5f 4f       	sbci	r21, 0xFF	; 255
    2d42:	55 95       	asr	r21
    2d44:	47 95       	ror	r20
    2d46:	48 37       	cpi	r20, 0x78	; 120
    2d48:	51 05       	cpc	r21, r1
    2d4a:	7c f4       	brge	.+30     	; 0x2d6a <__vector_29+0x4f8>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2d4c:	29 53       	subi	r18, 0x39	; 57
    2d4e:	3c 4f       	sbci	r19, 0xFC	; 252
    2d50:	cc 97       	sbiw	r24, 0x3c	; 60
    2d52:	95 95       	asr	r25
    2d54:	87 95       	ror	r24
    2d56:	cc 96       	adiw	r24, 0x3c	; 60
    2d58:	f9 01       	movw	r30, r18
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
    2d5e:	3f ce       	rjmp	.-898    	; 0x29de <__vector_29+0x16c>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2d66:	46 9a       	sbi	0x08, 6	; 8
    2d68:	a4 ce       	rjmp	.-696    	; 0x2ab2 <__vector_29+0x240>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2d6a:	ac 01       	movw	r20, r24
    2d6c:	44 5d       	subi	r20, 0xD4	; 212
    2d6e:	5e 4f       	sbci	r21, 0xFE	; 254
    2d70:	55 95       	asr	r21
    2d72:	47 95       	ror	r20
    2d74:	55 95       	asr	r21
    2d76:	47 95       	ror	r20
    2d78:	44 3b       	cpi	r20, 0xB4	; 180
    2d7a:	51 05       	cpc	r21, r1
    2d7c:	74 f4       	brge	.+28     	; 0x2d9a <__vector_29+0x528>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2d7e:	29 53       	subi	r18, 0x39	; 57
    2d80:	3c 4f       	sbci	r19, 0xFC	; 252
    2d82:	84 5b       	subi	r24, 0xB4	; 180
    2d84:	90 40       	sbci	r25, 0x00	; 0
    2d86:	95 95       	asr	r25
    2d88:	87 95       	ror	r24
    2d8a:	95 95       	asr	r25
    2d8c:	87 95       	ror	r24
    2d8e:	88 58       	subi	r24, 0x88	; 136
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	f9 01       	movw	r30, r18
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
    2d98:	22 ce       	rjmp	.-956    	; 0x29de <__vector_29+0x16c>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2d9a:	29 53       	subi	r18, 0x39	; 57
    2d9c:	3c 4f       	sbci	r19, 0xFC	; 252
    2d9e:	84 5a       	subi	r24, 0xA4	; 164
    2da0:	91 40       	sbci	r25, 0x01	; 1
    2da2:	95 95       	asr	r25
    2da4:	87 95       	ror	r24
    2da6:	95 95       	asr	r25
    2da8:	87 95       	ror	r24
    2daa:	95 95       	asr	r25
    2dac:	87 95       	ror	r24
    2dae:	8c 54       	subi	r24, 0x4C	; 76
    2db0:	9f 4f       	sbci	r25, 0xFF	; 255
    2db2:	f9 01       	movw	r30, r18
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	12 ce       	rjmp	.-988    	; 0x29de <__vector_29+0x16c>

00002dba <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2dba:	e0 e9       	ldi	r30, 0x90	; 144
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	83 68       	ori	r24, 0x83	; 131
    2dc2:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2dc4:	80 81       	ld	r24, Z
    2dc6:	83 60       	ori	r24, 0x03	; 3
    2dc8:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2dca:	a1 e9       	ldi	r26, 0x91	; 145
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	8c 91       	ld	r24, X
    2dd0:	8b 60       	ori	r24, 0x0B	; 11
    2dd2:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2dd4:	80 91 eb 03 	lds	r24, 0x03EB
    2dd8:	90 91 ec 03 	lds	r25, 0x03EC
    2ddc:	90 93 99 00 	sts	0x0099, r25
    2de0:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2de4:	10 92 9b 00 	sts	0x009B, r1
    2de8:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2dec:	a1 e7       	ldi	r26, 0x71	; 113
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	8c 91       	ld	r24, X
    2df2:	81 60       	ori	r24, 0x01	; 1
    2df4:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 75       	andi	r24, 0x5F	; 95
    2dfa:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2dfc:	8e b1       	in	r24, 0x0e	; 14
    2dfe:	87 7e       	andi	r24, 0xE7	; 231
    2e00:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2e02:	e0 ea       	ldi	r30, 0xA0	; 160
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	83 68       	ori	r24, 0x83	; 131
    2e0a:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2e0c:	a1 ea       	ldi	r26, 0xA1	; 161
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	8c 91       	ld	r24, X
    2e12:	8b 60       	ori	r24, 0x0B	; 11
    2e14:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2e16:	80 91 ed 03 	lds	r24, 0x03ED
    2e1a:	90 91 ee 03 	lds	r25, 0x03EE
    2e1e:	90 93 a9 00 	sts	0x00A9, r25
    2e22:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2e26:	10 92 ab 00 	sts	0x00AB, r1
    2e2a:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2e2e:	a2 e7       	ldi	r26, 0x72	; 114
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	8c 91       	ld	r24, X
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2e38:	80 81       	ld	r24, Z
    2e3a:	8f 75       	andi	r24, 0x5F	; 95
    2e3c:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2e3e:	e2 e0       	ldi	r30, 0x02	; 2
    2e40:	f1 e0       	ldi	r31, 0x01	; 1
    2e42:	80 81       	ld	r24, Z
    2e44:	87 7e       	andi	r24, 0xE7	; 231
    2e46:	80 83       	st	Z, r24


}
    2e48:	08 95       	ret

00002e4a <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    2e4a:	1f 92       	push	r1
    2e4c:	0f 92       	push	r0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    2e58:	80 91 29 04 	lds	r24, 0x0429
    2e5c:	88 23       	and	r24, r24
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <__vector_45+0x2e>
		pwm_left = 0;
    2e60:	10 92 ee 03 	sts	0x03EE, r1
    2e64:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    2e68:	10 92 a9 00 	sts	0x00A9, r1
    2e6c:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2e70:	10 92 ab 00 	sts	0x00AB, r1
    2e74:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    2e78:	10 92 d8 03 	sts	0x03D8, r1
    2e7c:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    2e80:	80 91 ed 03 	lds	r24, 0x03ED
    2e84:	90 91 ee 03 	lds	r25, 0x03EE
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	41 f5       	brne	.+80     	; 0x2edc <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    2e8c:	80 91 e1 03 	lds	r24, 0x03E1
    2e90:	90 91 e2 03 	lds	r25, 0x03E2
    2e94:	97 fd       	sbrc	r25, 7
    2e96:	69 c0       	rjmp	.+210    	; 0x2f6a <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    2e9e:	8e e0       	ldi	r24, 0x0E	; 14
    2ea0:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2eaa:	80 91 a0 00 	lds	r24, 0x00A0
    2eae:	8f 75       	andi	r24, 0x5F	; 95
    2eb0:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2eb4:	80 91 02 01 	lds	r24, 0x0102
    2eb8:	87 7e       	andi	r24, 0xE7	; 231
    2eba:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    2ebe:	80 91 72 00 	lds	r24, 0x0072
    2ec2:	89 7f       	andi	r24, 0xF9	; 249
    2ec4:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    2ec8:	89 b3       	in	r24, 0x19	; 25
    2eca:	86 60       	ori	r24, 0x06	; 6
    2ecc:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    2ece:	9f 91       	pop	r25
    2ed0:	8f 91       	pop	r24
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	0f 90       	pop	r0
    2ed8:	1f 90       	pop	r1
    2eda:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    2edc:	18 16       	cp	r1, r24
    2ede:	19 06       	cpc	r1, r25
    2ee0:	2c f5       	brge	.+74     	; 0x2f2c <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    2ee2:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    2ee6:	8f e0       	ldi	r24, 0x0F	; 15
    2ee8:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2eec:	80 91 a0 00 	lds	r24, 0x00A0
    2ef0:	8f 7d       	andi	r24, 0xDF	; 223
    2ef2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2ef6:	80 91 72 00 	lds	r24, 0x0072
    2efa:	8b 7f       	andi	r24, 0xFB	; 251
    2efc:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    2f00:	80 91 02 01 	lds	r24, 0x0102
    2f04:	8f 7e       	andi	r24, 0xEF	; 239
    2f06:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    2f0a:	80 91 a0 00 	lds	r24, 0x00A0
    2f0e:	80 68       	ori	r24, 0x80	; 128
    2f10:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2f14:	80 91 72 00 	lds	r24, 0x0072
    2f18:	82 60       	ori	r24, 0x02	; 2
    2f1a:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	0f 90       	pop	r0
    2f28:	1f 90       	pop	r1
    2f2a:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    2f2c:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    2f30:	8e e0       	ldi	r24, 0x0E	; 14
    2f32:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    2f36:	80 91 a0 00 	lds	r24, 0x00A0
    2f3a:	8f 77       	andi	r24, 0x7F	; 127
    2f3c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2f40:	80 91 72 00 	lds	r24, 0x0072
    2f44:	8d 7f       	andi	r24, 0xFD	; 253
    2f46:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    2f4a:	80 91 02 01 	lds	r24, 0x0102
    2f4e:	87 7f       	andi	r24, 0xF7	; 247
    2f50:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    2f54:	80 91 a0 00 	lds	r24, 0x00A0
    2f58:	80 62       	ori	r24, 0x20	; 32
    2f5a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2f5e:	80 91 72 00 	lds	r24, 0x0072
    2f62:	84 60       	ori	r24, 0x04	; 4
    2f64:	80 93 72 00 	sts	0x0072, r24
    2f68:	b2 cf       	rjmp	.-156    	; 0x2ece <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    2f70:	8f e0       	ldi	r24, 0x0F	; 15
    2f72:	80 93 2b 03 	sts	0x032B, r24
    2f76:	96 cf       	rjmp	.-212    	; 0x2ea4 <__vector_45+0x5a>

00002f78 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	8f 93       	push	r24
    2f84:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    2f8c:	9e e0       	ldi	r25, 0x0E	; 14
    2f8e:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2f92:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2f96:	9f 91       	pop	r25
    2f98:	8f 91       	pop	r24
    2f9a:	0f 90       	pop	r0
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	0f 90       	pop	r0
    2fa0:	1f 90       	pop	r1
    2fa2:	18 95       	reti

00002fa4 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    2fa4:	1f 92       	push	r1
    2fa6:	0f 92       	push	r0
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	0f 92       	push	r0
    2fac:	11 24       	eor	r1, r1
    2fae:	8f 93       	push	r24
    2fb0:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    2fb8:	9f e0       	ldi	r25, 0x0F	; 15
    2fba:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2fbe:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2fc2:	9f 91       	pop	r25
    2fc4:	8f 91       	pop	r24
    2fc6:	0f 90       	pop	r0
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	0f 90       	pop	r0
    2fcc:	1f 90       	pop	r1
    2fce:	18 95       	reti

00002fd0 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    2fd0:	1f 92       	push	r1
    2fd2:	0f 92       	push	r0
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	0f 92       	push	r0
    2fd8:	11 24       	eor	r1, r1
    2fda:	8f 93       	push	r24
    2fdc:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    2fde:	80 91 29 04 	lds	r24, 0x0429
    2fe2:	88 23       	and	r24, r24
    2fe4:	61 f0       	breq	.+24     	; 0x2ffe <__vector_35+0x2e>
		pwm_right = 0;
    2fe6:	10 92 ec 03 	sts	0x03EC, r1
    2fea:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    2fee:	10 92 99 00 	sts	0x0099, r1
    2ff2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2ff6:	10 92 9b 00 	sts	0x009B, r1
    2ffa:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    2ffe:	10 92 da 03 	sts	0x03DA, r1
    3002:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    3006:	80 91 eb 03 	lds	r24, 0x03EB
    300a:	90 91 ec 03 	lds	r25, 0x03EC
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	31 f5       	brne	.+76     	; 0x305e <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3012:	80 91 df 03 	lds	r24, 0x03DF
    3016:	90 91 e0 03 	lds	r25, 0x03E0
    301a:	97 fd       	sbrc	r25, 7
    301c:	5f c0       	rjmp	.+190    	; 0x30dc <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3024:	8c e0       	ldi	r24, 0x0C	; 12
    3026:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3030:	80 91 90 00 	lds	r24, 0x0090
    3034:	8f 75       	andi	r24, 0x5F	; 95
    3036:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    303a:	8e b1       	in	r24, 0x0e	; 14
    303c:	87 7e       	andi	r24, 0xE7	; 231
    303e:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3040:	80 91 71 00 	lds	r24, 0x0071
    3044:	89 7f       	andi	r24, 0xF9	; 249
    3046:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    304a:	88 b3       	in	r24, 0x18	; 24
    304c:	86 60       	ori	r24, 0x06	; 6
    304e:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3050:	9f 91       	pop	r25
    3052:	8f 91       	pop	r24
    3054:	0f 90       	pop	r0
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	0f 90       	pop	r0
    305a:	1f 90       	pop	r1
    305c:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    305e:	18 16       	cp	r1, r24
    3060:	19 06       	cpc	r1, r25
    3062:	0c f5       	brge	.+66     	; 0x30a6 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    3064:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3068:	8d e0       	ldi	r24, 0x0D	; 13
    306a:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    306e:	80 91 90 00 	lds	r24, 0x0090
    3072:	8f 7d       	andi	r24, 0xDF	; 223
    3074:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3078:	80 91 71 00 	lds	r24, 0x0071
    307c:	8b 7f       	andi	r24, 0xFB	; 251
    307e:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3082:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3084:	80 91 90 00 	lds	r24, 0x0090
    3088:	80 68       	ori	r24, 0x80	; 128
    308a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    308e:	80 91 71 00 	lds	r24, 0x0071
    3092:	82 60       	ori	r24, 0x02	; 2
    3094:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3098:	9f 91       	pop	r25
    309a:	8f 91       	pop	r24
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    30a6:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    30aa:	8c e0       	ldi	r24, 0x0C	; 12
    30ac:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    30b0:	80 91 90 00 	lds	r24, 0x0090
    30b4:	8f 77       	andi	r24, 0x7F	; 127
    30b6:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    30ba:	80 91 71 00 	lds	r24, 0x0071
    30be:	8d 7f       	andi	r24, 0xFD	; 253
    30c0:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    30c4:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    30c6:	80 91 90 00 	lds	r24, 0x0090
    30ca:	80 62       	ori	r24, 0x20	; 32
    30cc:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    30d0:	80 91 71 00 	lds	r24, 0x0071
    30d4:	84 60       	ori	r24, 0x04	; 4
    30d6:	80 93 71 00 	sts	0x0071, r24
    30da:	ba cf       	rjmp	.-140    	; 0x3050 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    30e2:	8d e0       	ldi	r24, 0x0D	; 13
    30e4:	80 93 2c 03 	sts	0x032C, r24
    30e8:	a0 cf       	rjmp	.-192    	; 0x302a <__vector_35+0x5a>

000030ea <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    30ea:	1f 92       	push	r1
    30ec:	0f 92       	push	r0
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	0f 92       	push	r0
    30f2:	11 24       	eor	r1, r1
    30f4:	8f 93       	push	r24
    30f6:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    30fe:	9c e0       	ldi	r25, 0x0C	; 12
    3100:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3104:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    3108:	9f 91       	pop	r25
    310a:	8f 91       	pop	r24
    310c:	0f 90       	pop	r0
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	0f 90       	pop	r0
    3112:	1f 90       	pop	r1
    3114:	18 95       	reti

00003116 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3116:	1f 92       	push	r1
    3118:	0f 92       	push	r0
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	0f 92       	push	r0
    311e:	11 24       	eor	r1, r1
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    312a:	9d e0       	ldi	r25, 0x0D	; 13
    312c:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3130:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    3134:	9f 91       	pop	r25
    3136:	8f 91       	pop	r24
    3138:	0f 90       	pop	r0
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	0f 90       	pop	r0
    313e:	1f 90       	pop	r1
    3140:	18 95       	reti

00003142 <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    3142:	2f 92       	push	r2
    3144:	3f 92       	push	r3
    3146:	4f 92       	push	r4
    3148:	5f 92       	push	r5
    314a:	6f 92       	push	r6
    314c:	7f 92       	push	r7
    314e:	8f 92       	push	r8
    3150:	9f 92       	push	r9
    3152:	af 92       	push	r10
    3154:	bf 92       	push	r11
    3156:	cf 92       	push	r12
    3158:	df 92       	push	r13
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	28 97       	sbiw	r28, 0x08	; 8
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	2c 01       	movw	r4, r24
    3178:	7a 83       	std	Y+2, r23	; 0x02
    317a:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    317c:	fc 01       	movw	r30, r24
    317e:	01 90       	ld	r0, Z+
    3180:	f0 81       	ld	r31, Z
    3182:	e0 2d       	mov	r30, r0
    3184:	fc 83       	std	Y+4, r31	; 0x04
    3186:	eb 83       	std	Y+3, r30	; 0x03
    3188:	fb 01       	movw	r30, r22
    318a:	01 90       	ld	r0, Z+
    318c:	f0 81       	ld	r31, Z
    318e:	e0 2d       	mov	r30, r0
    3190:	fe 83       	std	Y+6, r31	; 0x06
    3192:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3194:	60 91 c7 03 	lds	r22, 0x03C7
    3198:	70 91 c8 03 	lds	r23, 0x03C8
    319c:	65 30       	cpi	r22, 0x05	; 5
    319e:	71 05       	cpc	r23, r1
    31a0:	34 f4       	brge	.+12     	; 0x31ae <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    31a2:	10 92 c8 03 	sts	0x03C8, r1
    31a6:	10 92 c7 03 	sts	0x03C7, r1
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    31ae:	40 91 c9 03 	lds	r20, 0x03C9
    31b2:	50 91 ca 03 	lds	r21, 0x03CA
    31b6:	45 30       	cpi	r20, 0x05	; 5
    31b8:	51 05       	cpc	r21, r1
    31ba:	34 f4       	brge	.+12     	; 0x31c8 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    31bc:	10 92 ca 03 	sts	0x03CA, r1
    31c0:	10 92 c9 03 	sts	0x03C9, r1
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    31c8:	80 91 cb 03 	lds	r24, 0x03CB
    31cc:	90 91 cc 03 	lds	r25, 0x03CC
    31d0:	85 30       	cpi	r24, 0x05	; 5
    31d2:	91 05       	cpc	r25, r1
    31d4:	24 f4       	brge	.+8      	; 0x31de <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    31d6:	10 92 cc 03 	sts	0x03CC, r1
    31da:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    31de:	00 91 cd 03 	lds	r16, 0x03CD
    31e2:	10 91 ce 03 	lds	r17, 0x03CE
    31e6:	05 30       	cpi	r16, 0x05	; 5
    31e8:	11 05       	cpc	r17, r1
    31ea:	34 f4       	brge	.+12     	; 0x31f8 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    31ec:	10 92 ce 03 	sts	0x03CE, r1
    31f0:	10 92 cd 03 	sts	0x03CD, r1
    31f4:	00 e0       	ldi	r16, 0x00	; 0
    31f6:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    31f8:	60 90 cf 03 	lds	r6, 0x03CF
    31fc:	70 90 d0 03 	lds	r7, 0x03D0
    3200:	f5 e0       	ldi	r31, 0x05	; 5
    3202:	6f 16       	cp	r6, r31
    3204:	71 04       	cpc	r7, r1
    3206:	34 f4       	brge	.+12     	; 0x3214 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    3208:	10 92 d0 03 	sts	0x03D0, r1
    320c:	10 92 cf 03 	sts	0x03CF, r1
    3210:	66 24       	eor	r6, r6
    3212:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3214:	20 91 d1 03 	lds	r18, 0x03D1
    3218:	30 91 d2 03 	lds	r19, 0x03D2
    321c:	25 30       	cpi	r18, 0x05	; 5
    321e:	31 05       	cpc	r19, r1
    3220:	34 f4       	brge	.+12     	; 0x322e <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3222:	10 92 d2 03 	sts	0x03D2, r1
    3226:	10 92 d1 03 	sts	0x03D1, r1
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    322e:	80 91 d3 03 	lds	r24, 0x03D3
    3232:	90 91 d4 03 	lds	r25, 0x03D4
    3236:	85 30       	cpi	r24, 0x05	; 5
    3238:	91 05       	cpc	r25, r1
    323a:	24 f4       	brge	.+8      	; 0x3244 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    323c:	10 92 d4 03 	sts	0x03D4, r1
    3240:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3244:	80 91 d5 03 	lds	r24, 0x03D5
    3248:	90 91 d6 03 	lds	r25, 0x03D6
    324c:	85 30       	cpi	r24, 0x05	; 5
    324e:	91 05       	cpc	r25, r1
    3250:	34 f4       	brge	.+12     	; 0x325e <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    3252:	10 92 d6 03 	sts	0x03D6, r1
    3256:	10 92 d5 03 	sts	0x03D5, r1
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    325e:	ee 24       	eor	r14, r14
    3260:	ff 24       	eor	r15, r15
    3262:	e6 1a       	sub	r14, r22
    3264:	f7 0a       	sbc	r15, r23
    3266:	5a 01       	movw	r10, r20
    3268:	b5 94       	asr	r11
    326a:	a7 94       	ror	r10
    326c:	15 95       	asr	r17
    326e:	07 95       	ror	r16
    3270:	69 01       	movw	r12, r18
    3272:	d5 94       	asr	r13
    3274:	c7 94       	ror	r12
    3276:	4c 01       	movw	r8, r24
    3278:	95 94       	asr	r9
    327a:	87 94       	ror	r8
    327c:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <rand>
    3280:	93 01       	movw	r18, r6
    3282:	2e 51       	subi	r18, 0x1E	; 30
    3284:	30 40       	sbci	r19, 0x00	; 0
    3286:	2e 0d       	add	r18, r14
    3288:	3f 1d       	adc	r19, r15
    328a:	20 0f       	add	r18, r16
    328c:	31 1f       	adc	r19, r17
    328e:	2c 0d       	add	r18, r12
    3290:	3d 1d       	adc	r19, r13
    3292:	2a 19       	sub	r18, r10
    3294:	3b 09       	sbc	r19, r11
    3296:	28 19       	sub	r18, r8
    3298:	39 09       	sbc	r19, r9
    329a:	4c e3       	ldi	r20, 0x3C	; 60
    329c:	24 2e       	mov	r2, r20
    329e:	31 2c       	mov	r3, r1
    32a0:	b1 01       	movw	r22, r2
    32a2:	0e 94 83 24 	call	0x4906	; 0x4906 <__divmodhi4>
    32a6:	28 0f       	add	r18, r24
    32a8:	39 1f       	adc	r19, r25
    32aa:	38 87       	std	Y+8, r19	; 0x08
    32ac:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    32ae:	e0 90 c9 03 	lds	r14, 0x03C9
    32b2:	f0 90 ca 03 	lds	r15, 0x03CA
    32b6:	f5 94       	asr	r15
    32b8:	e7 94       	ror	r14
    32ba:	00 91 cb 03 	lds	r16, 0x03CB
    32be:	10 91 cc 03 	lds	r17, 0x03CC
    32c2:	15 95       	asr	r17
    32c4:	07 95       	ror	r16
    32c6:	15 95       	asr	r17
    32c8:	07 95       	ror	r16
    32ca:	c0 90 cd 03 	lds	r12, 0x03CD
    32ce:	d0 90 ce 03 	lds	r13, 0x03CE
    32d2:	d5 94       	asr	r13
    32d4:	c7 94       	ror	r12
    32d6:	80 90 d1 03 	lds	r8, 0x03D1
    32da:	90 90 d2 03 	lds	r9, 0x03D2
    32de:	95 94       	asr	r9
    32e0:	87 94       	ror	r8
    32e2:	60 90 d3 03 	lds	r6, 0x03D3
    32e6:	70 90 d4 03 	lds	r7, 0x03D4
    32ea:	75 94       	asr	r7
    32ec:	67 94       	ror	r6
    32ee:	75 94       	asr	r7
    32f0:	67 94       	ror	r6
    32f2:	a0 90 d5 03 	lds	r10, 0x03D5
    32f6:	b0 90 d6 03 	lds	r11, 0x03D6
    32fa:	b5 94       	asr	r11
    32fc:	a7 94       	ror	r10
    32fe:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <rand>
    3302:	97 01       	movw	r18, r14
    3304:	20 0f       	add	r18, r16
    3306:	31 1f       	adc	r19, r17
    3308:	2e 51       	subi	r18, 0x1E	; 30
    330a:	30 40       	sbci	r19, 0x00	; 0
    330c:	2c 0d       	add	r18, r12
    330e:	3d 1d       	adc	r19, r13
    3310:	2a 19       	sub	r18, r10
    3312:	3b 09       	sbc	r19, r11
    3314:	28 19       	sub	r18, r8
    3316:	39 09       	sbc	r19, r9
    3318:	26 19       	sub	r18, r6
    331a:	37 09       	sbc	r19, r7
    331c:	b1 01       	movw	r22, r2
    331e:	0e 94 83 24 	call	0x4906	; 0x4906 <__divmodhi4>
    3322:	28 0f       	add	r18, r24
    3324:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    3326:	4b 81       	ldd	r20, Y+3	; 0x03
    3328:	5c 81       	ldd	r21, Y+4	; 0x04
    332a:	57 fd       	sbrc	r21, 7
    332c:	97 c0       	rjmp	.+302    	; 0x345c <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    332e:	5a 01       	movw	r10, r20
    3330:	cc 24       	eor	r12, r12
    3332:	b7 fc       	sbrc	r11, 7
    3334:	c0 94       	com	r12
    3336:	dc 2c       	mov	r13, r12
    3338:	8f 81       	ldd	r24, Y+7	; 0x07
    333a:	98 85       	ldd	r25, Y+8	; 0x08
    333c:	3c 01       	movw	r6, r24
    333e:	88 24       	eor	r8, r8
    3340:	77 fc       	sbrc	r7, 7
    3342:	80 94       	com	r8
    3344:	98 2c       	mov	r9, r8
    3346:	79 01       	movw	r14, r18
    3348:	00 27       	eor	r16, r16
    334a:	f7 fc       	sbrc	r15, 7
    334c:	00 95       	com	r16
    334e:	10 2f       	mov	r17, r16
    3350:	c4 01       	movw	r24, r8
    3352:	b3 01       	movw	r22, r6
    3354:	6e 19       	sub	r22, r14
    3356:	7f 09       	sbc	r23, r15
    3358:	80 0b       	sbc	r24, r16
    335a:	91 0b       	sbc	r25, r17
    335c:	a6 01       	movw	r20, r12
    335e:	95 01       	movw	r18, r10
    3360:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__mulsi3>
    3364:	f7 e0       	ldi	r31, 0x07	; 7
    3366:	95 95       	asr	r25
    3368:	87 95       	ror	r24
    336a:	77 95       	ror	r23
    336c:	67 95       	ror	r22
    336e:	fa 95       	dec	r31
    3370:	d1 f7       	brne	.-12     	; 0x3366 <obstacleAvoidance+0x224>
    3372:	6a 0d       	add	r22, r10
    3374:	7b 1d       	adc	r23, r11
    3376:	8c 1d       	adc	r24, r12
    3378:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    337a:	f2 01       	movw	r30, r4
    337c:	71 83       	std	Z+1, r23	; 0x01
    337e:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    3380:	2d 81       	ldd	r18, Y+5	; 0x05
    3382:	3e 81       	ldd	r19, Y+6	; 0x06
    3384:	37 fd       	sbrc	r19, 7
    3386:	99 c0       	rjmp	.+306    	; 0x34ba <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3388:	59 01       	movw	r10, r18
    338a:	cc 24       	eor	r12, r12
    338c:	b7 fc       	sbrc	r11, 7
    338e:	c0 94       	com	r12
    3390:	dc 2c       	mov	r13, r12
    3392:	c8 01       	movw	r24, r16
    3394:	b7 01       	movw	r22, r14
    3396:	66 0d       	add	r22, r6
    3398:	77 1d       	adc	r23, r7
    339a:	88 1d       	adc	r24, r8
    339c:	99 1d       	adc	r25, r9
    339e:	a6 01       	movw	r20, r12
    33a0:	95 01       	movw	r18, r10
    33a2:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__mulsi3>
    33a6:	37 e0       	ldi	r19, 0x07	; 7
    33a8:	95 95       	asr	r25
    33aa:	87 95       	ror	r24
    33ac:	77 95       	ror	r23
    33ae:	67 95       	ror	r22
    33b0:	3a 95       	dec	r19
    33b2:	d1 f7       	brne	.-12     	; 0x33a8 <obstacleAvoidance+0x266>
    33b4:	6a 0d       	add	r22, r10
    33b6:	7b 1d       	adc	r23, r11
    33b8:	8c 1d       	adc	r24, r12
    33ba:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    33bc:	9b 01       	movw	r18, r22
    33be:	e9 81       	ldd	r30, Y+1	; 0x01
    33c0:	fa 81       	ldd	r31, Y+2	; 0x02
    33c2:	71 83       	std	Z+1, r23	; 0x01
    33c4:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    33c6:	f2 e0       	ldi	r31, 0x02	; 2
    33c8:	21 30       	cpi	r18, 0x01	; 1
    33ca:	3f 07       	cpc	r19, r31
    33cc:	44 f0       	brlt	.+16     	; 0x33de <obstacleAvoidance+0x29c>
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	92 e0       	ldi	r25, 0x02	; 2
    33d2:	e9 81       	ldd	r30, Y+1	; 0x01
    33d4:	fa 81       	ldd	r31, Y+2	; 0x02
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	80 83       	st	Z, r24
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    33de:	f2 01       	movw	r30, r4
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	f2 e0       	ldi	r31, 0x02	; 2
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	9f 07       	cpc	r25, r31
    33ea:	4c f0       	brlt	.+18     	; 0x33fe <obstacleAvoidance+0x2bc>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	92 e0       	ldi	r25, 0x02	; 2
    33f0:	f2 01       	movw	r30, r4
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
    33f6:	e9 81       	ldd	r30, Y+1	; 0x01
    33f8:	fa 81       	ldd	r31, Y+2	; 0x02
    33fa:	20 81       	ld	r18, Z
    33fc:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    33fe:	fe ef       	ldi	r31, 0xFE	; 254
    3400:	20 30       	cpi	r18, 0x00	; 0
    3402:	3f 07       	cpc	r19, r31
    3404:	4c f4       	brge	.+18     	; 0x3418 <obstacleAvoidance+0x2d6>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	9e ef       	ldi	r25, 0xFE	; 254
    340a:	e9 81       	ldd	r30, Y+1	; 0x01
    340c:	fa 81       	ldd	r31, Y+2	; 0x02
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    3412:	f2 01       	movw	r30, r4
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    3418:	fe ef       	ldi	r31, 0xFE	; 254
    341a:	80 30       	cpi	r24, 0x00	; 0
    341c:	9f 07       	cpc	r25, r31
    341e:	2c f4       	brge	.+10     	; 0x342a <obstacleAvoidance+0x2e8>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	9e ef       	ldi	r25, 0xFE	; 254
    3424:	f2 01       	movw	r30, r4
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24

}
    342a:	28 96       	adiw	r28, 0x08	; 8
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	cf 90       	pop	r12
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	9f 90       	pop	r9
    344c:	8f 90       	pop	r8
    344e:	7f 90       	pop	r7
    3450:	6f 90       	pop	r6
    3452:	5f 90       	pop	r5
    3454:	4f 90       	pop	r4
    3456:	3f 90       	pop	r3
    3458:	2f 90       	pop	r2
    345a:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    345c:	4d 81       	ldd	r20, Y+5	; 0x05
    345e:	5e 81       	ldd	r21, Y+6	; 0x06
    3460:	5a 01       	movw	r10, r20
    3462:	cc 24       	eor	r12, r12
    3464:	b7 fc       	sbrc	r11, 7
    3466:	c0 94       	com	r12
    3468:	dc 2c       	mov	r13, r12
    346a:	8f 81       	ldd	r24, Y+7	; 0x07
    346c:	98 85       	ldd	r25, Y+8	; 0x08
    346e:	3c 01       	movw	r6, r24
    3470:	88 24       	eor	r8, r8
    3472:	77 fc       	sbrc	r7, 7
    3474:	80 94       	com	r8
    3476:	98 2c       	mov	r9, r8
    3478:	79 01       	movw	r14, r18
    347a:	00 27       	eor	r16, r16
    347c:	f7 fc       	sbrc	r15, 7
    347e:	00 95       	com	r16
    3480:	10 2f       	mov	r17, r16
    3482:	c8 01       	movw	r24, r16
    3484:	b7 01       	movw	r22, r14
    3486:	66 0d       	add	r22, r6
    3488:	77 1d       	adc	r23, r7
    348a:	88 1d       	adc	r24, r8
    348c:	99 1d       	adc	r25, r9
    348e:	a6 01       	movw	r20, r12
    3490:	95 01       	movw	r18, r10
    3492:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__mulsi3>
    3496:	e7 e0       	ldi	r30, 0x07	; 7
    3498:	95 95       	asr	r25
    349a:	87 95       	ror	r24
    349c:	77 95       	ror	r23
    349e:	67 95       	ror	r22
    34a0:	ea 95       	dec	r30
    34a2:	d1 f7       	brne	.-12     	; 0x3498 <obstacleAvoidance+0x356>
    34a4:	26 1b       	sub	r18, r22
    34a6:	37 0b       	sbc	r19, r23
    34a8:	48 0b       	sbc	r20, r24
    34aa:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    34ac:	f2 01       	movw	r30, r4
    34ae:	31 83       	std	Z+1, r19	; 0x01
    34b0:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    34b2:	2d 81       	ldd	r18, Y+5	; 0x05
    34b4:	3e 81       	ldd	r19, Y+6	; 0x06
    34b6:	37 ff       	sbrs	r19, 7
    34b8:	67 cf       	rjmp	.-306    	; 0x3388 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    34ba:	2b 81       	ldd	r18, Y+3	; 0x03
    34bc:	3c 81       	ldd	r19, Y+4	; 0x04
    34be:	59 01       	movw	r10, r18
    34c0:	cc 24       	eor	r12, r12
    34c2:	b7 fc       	sbrc	r11, 7
    34c4:	c0 94       	com	r12
    34c6:	dc 2c       	mov	r13, r12
    34c8:	c4 01       	movw	r24, r8
    34ca:	b3 01       	movw	r22, r6
    34cc:	6e 19       	sub	r22, r14
    34ce:	7f 09       	sbc	r23, r15
    34d0:	80 0b       	sbc	r24, r16
    34d2:	91 0b       	sbc	r25, r17
    34d4:	a6 01       	movw	r20, r12
    34d6:	95 01       	movw	r18, r10
    34d8:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__mulsi3>
    34dc:	27 e0       	ldi	r18, 0x07	; 7
    34de:	95 95       	asr	r25
    34e0:	87 95       	ror	r24
    34e2:	77 95       	ror	r23
    34e4:	67 95       	ror	r22
    34e6:	2a 95       	dec	r18
    34e8:	d1 f7       	brne	.-12     	; 0x34de <obstacleAvoidance+0x39c>
    34ea:	a6 1a       	sub	r10, r22
    34ec:	b7 0a       	sbc	r11, r23
    34ee:	c8 0a       	sbc	r12, r24
    34f0:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    34f2:	95 01       	movw	r18, r10
    34f4:	e9 81       	ldd	r30, Y+1	; 0x01
    34f6:	fa 81       	ldd	r31, Y+2	; 0x02
    34f8:	b1 82       	std	Z+1, r11	; 0x01
    34fa:	a0 82       	st	Z, r10
    34fc:	64 cf       	rjmp	.-312    	; 0x33c6 <obstacleAvoidance+0x284>

000034fe <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    34fe:	80 91 6f 03 	lds	r24, 0x036F
    3502:	90 91 70 03 	lds	r25, 0x0370
    3506:	21 e0       	ldi	r18, 0x01	; 1
    3508:	84 3a       	cpi	r24, 0xA4	; 164
    350a:	92 07       	cpc	r25, r18
    350c:	d4 f0       	brlt	.+52     	; 0x3542 <cliffDetected+0x44>
    350e:	80 91 71 03 	lds	r24, 0x0371
    3512:	90 91 72 03 	lds	r25, 0x0372
    3516:	21 e0       	ldi	r18, 0x01	; 1
    3518:	84 3a       	cpi	r24, 0xA4	; 164
    351a:	92 07       	cpc	r25, r18
    351c:	94 f0       	brlt	.+36     	; 0x3542 <cliffDetected+0x44>
    351e:	80 91 73 03 	lds	r24, 0x0373
    3522:	90 91 74 03 	lds	r25, 0x0374
    3526:	21 e0       	ldi	r18, 0x01	; 1
    3528:	84 3a       	cpi	r24, 0xA4	; 164
    352a:	92 07       	cpc	r25, r18
    352c:	74 f0       	brlt	.+28     	; 0x354a <cliffDetected+0x4c>
		return 1;
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	20 91 75 03 	lds	r18, 0x0375
    3534:	30 91 76 03 	lds	r19, 0x0376
    3538:	91 e0       	ldi	r25, 0x01	; 1
    353a:	24 3a       	cpi	r18, 0xA4	; 164
    353c:	39 07       	cpc	r19, r25
    353e:	1c f4       	brge	.+6      	; 0x3546 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    3540:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	08 95       	ret
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	08 95       	ret
    354a:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    354c:	08 95       	ret

0000354e <initRGBleds>:
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    354e:	e0 e8       	ldi	r30, 0x80	; 128
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	89 6a       	ori	r24, 0xA9	; 169
    3556:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3558:	e1 e8       	ldi	r30, 0x81	; 129
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	89 60       	ori	r24, 0x09	; 9
    3560:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3562:	80 91 0c 02 	lds	r24, 0x020C
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	90 93 89 00 	sts	0x0089, r25
    356c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3570:	80 91 0d 02 	lds	r24, 0x020D
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	90 93 8b 00 	sts	0x008B, r25
    357a:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    357e:	80 91 0e 02 	lds	r24, 0x020E
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	90 93 8d 00 	sts	0x008D, r25
    3588:	80 93 8c 00 	sts	0x008C, r24

}
    358c:	08 95       	ret

0000358e <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	90 91 05 04 	lds	r25, 0x0405
    3594:	89 1b       	sub	r24, r25
    3596:	80 93 05 04 	sts	0x0405, r24

	if(blinkState) {
    359a:	88 23       	and	r24, r24
    359c:	39 f4       	brne	.+14     	; 0x35ac <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    359e:	80 91 80 00 	lds	r24, 0x0080
    35a2:	87 7f       	andi	r24, 0xF7	; 247
    35a4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    35a8:	2f 98       	cbi	0x05, 7	; 5
    35aa:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    35ac:	80 91 80 00 	lds	r24, 0x0080
    35b0:	88 60       	ori	r24, 0x08	; 8
    35b2:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    35b6:	8f ef       	ldi	r24, 0xFF	; 255
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	90 93 8d 00 	sts	0x008D, r25
    35be:	80 93 8c 00 	sts	0x008C, r24
    35c2:	08 95       	ret

000035c4 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    35c4:	88 23       	and	r24, r24
    35c6:	59 f0       	breq	.+22     	; 0x35de <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    35c8:	90 91 80 00 	lds	r25, 0x0080
    35cc:	90 68       	ori	r25, 0x80	; 128
    35ce:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	90 93 89 00 	sts	0x0089, r25
    35d8:	80 93 88 00 	sts	0x0088, r24
    35dc:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    35de:	80 91 80 00 	lds	r24, 0x0080
    35e2:	8f 77       	andi	r24, 0x7F	; 127
    35e4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    35e8:	2d 98       	cbi	0x05, 5	; 5
    35ea:	08 95       	ret

000035ec <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    35ec:	88 23       	and	r24, r24
    35ee:	59 f0       	breq	.+22     	; 0x3606 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    35f0:	90 91 80 00 	lds	r25, 0x0080
    35f4:	90 62       	ori	r25, 0x20	; 32
    35f6:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	90 93 8b 00 	sts	0x008B, r25
    3600:	80 93 8a 00 	sts	0x008A, r24
    3604:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    3606:	80 91 80 00 	lds	r24, 0x0080
    360a:	8f 7d       	andi	r24, 0xDF	; 223
    360c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3610:	2e 98       	cbi	0x05, 6	; 5
    3612:	08 95       	ret

00003614 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3614:	88 23       	and	r24, r24
    3616:	59 f0       	breq	.+22     	; 0x362e <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    3618:	90 91 80 00 	lds	r25, 0x0080
    361c:	98 60       	ori	r25, 0x08	; 8
    361e:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	90 93 8d 00 	sts	0x008D, r25
    3628:	80 93 8c 00 	sts	0x008C, r24
    362c:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    362e:	80 91 80 00 	lds	r24, 0x0080
    3632:	87 7f       	andi	r24, 0xF7	; 247
    3634:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    3638:	2f 98       	cbi	0x05, 7	; 5
    363a:	08 95       	ret

0000363c <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    363c:	0e 94 88 10 	call	0x2110	; 0x2110 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3640:	80 91 13 02 	lds	r24, 0x0213
    3644:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3648:	88 23       	and	r24, r24
    364a:	49 f4       	brne	.+18     	; 0x365e <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    364c:	86 e1       	ldi	r24, 0x16	; 22
    364e:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3652:	85 e4       	ldi	r24, 0x45	; 69
    3654:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3658:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    365c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    365e:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    3662:	86 ea       	ldi	r24, 0xA6	; 166
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	90 93 14 02 	sts	0x0214, r25
    366a:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    366e:	86 ea       	ldi	r24, 0xA6	; 166
    3670:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3674:	88 23       	and	r24, r24
    3676:	41 f5       	brne	.+80     	; 0x36c8 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3678:	8d e2       	ldi	r24, 0x2D	; 45
    367a:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x08);	// measurement mode
    367e:	88 e0       	ldi	r24, 0x08	; 8
    3680:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3684:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3688:	80 91 13 02 	lds	r24, 0x0213
    368c:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3690:	88 23       	and	r24, r24
    3692:	d1 f4       	brne	.+52     	; 0x36c8 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3694:	81 e3       	ldi	r24, 0x31	; 49
    3696:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    36a0:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    36a4:	80 91 13 02 	lds	r24, 0x0213
    36a8:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    36ac:	88 23       	and	r24, r24
    36ae:	61 f4       	brne	.+24     	; 0x36c8 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    36b0:	8c e2       	ldi	r24, 0x2C	; 44
    36b2:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    36b6:	89 e0       	ldi	r24, 0x09	; 9
    36b8:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    36bc:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	80 93 0b 04 	sts	0x040B, r24
    36c6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    36c8:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	80 93 0b 04 	sts	0x040B, r24
    36d2:	08 95       	ret

000036d4 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    36d4:	80 91 13 02 	lds	r24, 0x0213
    36d8:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    36dc:	88 23       	and	r24, r24
    36de:	51 f4       	brne	.+20     	; 0x36f4 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    36e0:	86 e1       	ldi	r24, 0x16	; 22
    36e2:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    36e6:	85 e4       	ldi	r24, 0x45	; 69
    36e8:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    36ec:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    }

	return 0;				// configuration ok
    36f0:	80 e0       	ldi	r24, 0x00	; 0

}
    36f2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    36f4:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
		return 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	08 95       	ret

000036fc <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    36fc:	80 91 13 02 	lds	r24, 0x0213
    3700:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3704:	88 23       	and	r24, r24
    3706:	31 f5       	brne	.+76     	; 0x3754 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3708:	8d e2       	ldi	r24, 0x2D	; 45
    370a:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x08);	// measurement mode
    370e:	88 e0       	ldi	r24, 0x08	; 8
    3710:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3714:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3718:	80 91 13 02 	lds	r24, 0x0213
    371c:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3720:	88 23       	and	r24, r24
    3722:	c1 f4       	brne	.+48     	; 0x3754 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3724:	81 e3       	ldi	r24, 0x31	; 49
    3726:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3730:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3734:	80 91 13 02 	lds	r24, 0x0213
    3738:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    373c:	88 23       	and	r24, r24
    373e:	51 f4       	brne	.+20     	; 0x3754 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3740:	8c e2       	ldi	r24, 0x2C	; 44
    3742:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3746:	89 e0       	ldi	r24, 0x09	; 9
    3748:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    374c:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
    }

	return 0;
    3750:	80 e0       	ldi	r24, 0x00	; 0

}
    3752:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3754:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>
		return 1;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	08 95       	ret

0000375c <readAccelXY>:

	return 0;

}

void readAccelXY() {
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	0f 92       	push	r0
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    376c:	80 91 0b 04 	lds	r24, 0x040B
    3770:	88 23       	and	r24, r24
    3772:	91 f0       	breq	.+36     	; 0x3798 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    3774:	81 30       	cpi	r24, 0x01	; 1
    3776:	09 f4       	brne	.+2      	; 0x377a <readAccelXY+0x1e>
    3778:	88 c0       	rjmp	.+272    	; 0x388a <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    377a:	10 92 0d 04 	sts	0x040D, r1
    377e:	10 92 0c 04 	sts	0x040C, r1
		accY = 0;
    3782:	10 92 0f 04 	sts	0x040F, r1
    3786:	10 92 0e 04 	sts	0x040E, r1

	}

}
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3798:	80 91 13 02 	lds	r24, 0x0213
    379c:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    37a0:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    37a2:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    37a6:	80 91 13 02 	lds	r24, 0x0213
    37aa:	8f 5f       	subi	r24, 0xFF	; 255
    37ac:	0e 94 dd 10 	call	0x21ba	; 0x21ba <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    37b0:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    37b4:	08 2f       	mov	r16, r24
    37b6:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    37ba:	f8 2e       	mov	r15, r24
    37bc:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    37c0:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    37c2:	0e 94 27 11 	call	0x224e	; 0x224e <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    37cc:	90 91 56 04 	lds	r25, 0x0456
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	99 23       	and	r25, r25
    37d4:	39 f1       	breq	.+78     	; 0x3824 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    37d6:	4f 2d       	mov	r20, r15
    37d8:	55 27       	eor	r21, r21
    37da:	47 fd       	sbrc	r20, 7
    37dc:	50 95       	com	r21
    37de:	54 2f       	mov	r21, r20
    37e0:	44 27       	eor	r20, r20
    37e2:	60 2f       	mov	r22, r16
    37e4:	77 27       	eor	r23, r23
    37e6:	67 fd       	sbrc	r22, 7
    37e8:	70 95       	com	r23
    37ea:	46 2b       	or	r20, r22
    37ec:	57 2b       	or	r21, r23
    37ee:	50 93 0d 04 	sts	0x040D, r21
    37f2:	40 93 0c 04 	sts	0x040C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    37f6:	28 2f       	mov	r18, r24
    37f8:	33 27       	eor	r19, r19
    37fa:	27 fd       	sbrc	r18, 7
    37fc:	30 95       	com	r19
    37fe:	32 2f       	mov	r19, r18
    3800:	22 27       	eor	r18, r18
    3802:	81 2f       	mov	r24, r17
    3804:	99 27       	eor	r25, r25
    3806:	87 fd       	sbrc	r24, 7
    3808:	90 95       	com	r25
    380a:	28 2b       	or	r18, r24
    380c:	39 2b       	or	r19, r25
    380e:	30 93 0f 04 	sts	0x040F, r19
    3812:	20 93 0e 04 	sts	0x040E, r18
		accX = 0;
		accY = 0;

	}

}
    3816:	0f 90       	pop	r0
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	1f 91       	pop	r17
    381e:	0f 91       	pop	r16
    3820:	ff 90       	pop	r15
    3822:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3824:	4f 2d       	mov	r20, r15
    3826:	55 27       	eor	r21, r21
    3828:	47 fd       	sbrc	r20, 7
    382a:	50 95       	com	r21
    382c:	54 2f       	mov	r21, r20
    382e:	44 27       	eor	r20, r20
    3830:	60 2f       	mov	r22, r16
    3832:	77 27       	eor	r23, r23
    3834:	67 fd       	sbrc	r22, 7
    3836:	70 95       	com	r23
    3838:	46 2b       	or	r20, r22
    383a:	57 2b       	or	r21, r23
    383c:	60 91 12 04 	lds	r22, 0x0412
    3840:	70 91 13 04 	lds	r23, 0x0413
    3844:	46 1b       	sub	r20, r22
    3846:	57 0b       	sbc	r21, r23
    3848:	50 93 0d 04 	sts	0x040D, r21
    384c:	40 93 0c 04 	sts	0x040C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3850:	28 2f       	mov	r18, r24
    3852:	33 27       	eor	r19, r19
    3854:	27 fd       	sbrc	r18, 7
    3856:	30 95       	com	r19
    3858:	32 2f       	mov	r19, r18
    385a:	22 27       	eor	r18, r18
    385c:	81 2f       	mov	r24, r17
    385e:	99 27       	eor	r25, r25
    3860:	87 fd       	sbrc	r24, 7
    3862:	90 95       	com	r25
    3864:	28 2b       	or	r18, r24
    3866:	39 2b       	or	r19, r25
    3868:	80 91 14 04 	lds	r24, 0x0414
    386c:	90 91 15 04 	lds	r25, 0x0415
    3870:	28 1b       	sub	r18, r24
    3872:	39 0b       	sbc	r19, r25
    3874:	30 93 0f 04 	sts	0x040F, r19
    3878:	20 93 0e 04 	sts	0x040E, r18
		accX = 0;
		accY = 0;

	}

}
    387c:	0f 90       	pop	r0
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	ff 90       	pop	r15
    3888:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    388a:	80 91 13 02 	lds	r24, 0x0213
    388e:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3892:	82 e3       	ldi	r24, 0x32	; 50
    3894:	86 cf       	rjmp	.-244    	; 0x37a2 <readAccelXY+0x46>

00003896 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	00 d0       	rcall	.+0      	; 0x389c <readAccelXYZ+0x6>
    389c:	00 d0       	rcall	.+0      	; 0x389e <readAccelXYZ+0x8>
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    38a2:	80 91 0b 04 	lds	r24, 0x040B
    38a6:	88 23       	and	r24, r24
    38a8:	c1 f0       	breq	.+48     	; 0x38da <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    38aa:	81 30       	cpi	r24, 0x01	; 1
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <readAccelXYZ+0x1a>
    38ae:	ad c0       	rjmp	.+346    	; 0x3a0a <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    38b0:	10 92 0d 04 	sts	0x040D, r1
    38b4:	10 92 0c 04 	sts	0x040C, r1
		accY = 0;
    38b8:	10 92 0f 04 	sts	0x040F, r1
    38bc:	10 92 0e 04 	sts	0x040E, r1
		accZ = 0;
    38c0:	10 92 11 04 	sts	0x0411, r1
    38c4:	10 92 10 04 	sts	0x0410, r1

	}

}
    38c8:	26 96       	adiw	r28, 0x06	; 6
    38ca:	0f b6       	in	r0, 0x3f	; 63
    38cc:	f8 94       	cli
    38ce:	de bf       	out	0x3e, r29	; 62
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	cd bf       	out	0x3d, r28	; 61
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    38da:	80 91 13 02 	lds	r24, 0x0213
    38de:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    38e2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    38e4:	0e 94 0b 11 	call	0x2216	; 0x2216 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    38e8:	80 91 13 02 	lds	r24, 0x0213
    38ec:	8f 5f       	subi	r24, 0xFF	; 255
    38ee:	0e 94 dd 10 	call	0x21ba	; 0x21ba <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    38f2:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    38fc:	8a 83       	std	Y+2, r24	; 0x02
    38fe:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    3902:	8b 83       	std	Y+3, r24	; 0x03
    3904:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    3908:	8c 83       	std	Y+4, r24	; 0x04
    390a:	0e 94 1d 11 	call	0x223a	; 0x223a <i2c_readAck>
    390e:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3910:	0e 94 27 11 	call	0x224e	; 0x224e <i2c_readNak>
    3914:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3916:	0e 94 03 11 	call	0x2206	; 0x2206 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    391a:	80 91 56 04 	lds	r24, 0x0456
    391e:	88 23       	and	r24, r24
    3920:	89 f1       	breq	.+98     	; 0x3984 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	99 27       	eor	r25, r25
    3926:	87 fd       	sbrc	r24, 7
    3928:	90 95       	com	r25
    392a:	98 2f       	mov	r25, r24
    392c:	88 27       	eor	r24, r24
    392e:	29 81       	ldd	r18, Y+1	; 0x01
    3930:	33 27       	eor	r19, r19
    3932:	27 fd       	sbrc	r18, 7
    3934:	30 95       	com	r19
    3936:	82 2b       	or	r24, r18
    3938:	93 2b       	or	r25, r19
    393a:	90 93 0d 04 	sts	0x040D, r25
    393e:	80 93 0c 04 	sts	0x040C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3942:	8c 81       	ldd	r24, Y+4	; 0x04
    3944:	99 27       	eor	r25, r25
    3946:	87 fd       	sbrc	r24, 7
    3948:	90 95       	com	r25
    394a:	98 2f       	mov	r25, r24
    394c:	88 27       	eor	r24, r24
    394e:	2b 81       	ldd	r18, Y+3	; 0x03
    3950:	33 27       	eor	r19, r19
    3952:	27 fd       	sbrc	r18, 7
    3954:	30 95       	com	r19
    3956:	82 2b       	or	r24, r18
    3958:	93 2b       	or	r25, r19
    395a:	90 93 0f 04 	sts	0x040F, r25
    395e:	80 93 0e 04 	sts	0x040E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    3962:	8e 81       	ldd	r24, Y+6	; 0x06
    3964:	99 27       	eor	r25, r25
    3966:	87 fd       	sbrc	r24, 7
    3968:	90 95       	com	r25
    396a:	98 2f       	mov	r25, r24
    396c:	88 27       	eor	r24, r24
    396e:	2d 81       	ldd	r18, Y+5	; 0x05
    3970:	33 27       	eor	r19, r19
    3972:	27 fd       	sbrc	r18, 7
    3974:	30 95       	com	r19
    3976:	82 2b       	or	r24, r18
    3978:	93 2b       	or	r25, r19
    397a:	90 93 11 04 	sts	0x0411, r25
    397e:	80 93 10 04 	sts	0x0410, r24
    3982:	a2 cf       	rjmp	.-188    	; 0x38c8 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
    3986:	99 27       	eor	r25, r25
    3988:	87 fd       	sbrc	r24, 7
    398a:	90 95       	com	r25
    398c:	98 2f       	mov	r25, r24
    398e:	88 27       	eor	r24, r24
    3990:	29 81       	ldd	r18, Y+1	; 0x01
    3992:	33 27       	eor	r19, r19
    3994:	27 fd       	sbrc	r18, 7
    3996:	30 95       	com	r19
    3998:	82 2b       	or	r24, r18
    399a:	93 2b       	or	r25, r19
    399c:	20 91 12 04 	lds	r18, 0x0412
    39a0:	30 91 13 04 	lds	r19, 0x0413
    39a4:	82 1b       	sub	r24, r18
    39a6:	93 0b       	sbc	r25, r19
    39a8:	90 93 0d 04 	sts	0x040D, r25
    39ac:	80 93 0c 04 	sts	0x040C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	99 27       	eor	r25, r25
    39b4:	87 fd       	sbrc	r24, 7
    39b6:	90 95       	com	r25
    39b8:	98 2f       	mov	r25, r24
    39ba:	88 27       	eor	r24, r24
    39bc:	2b 81       	ldd	r18, Y+3	; 0x03
    39be:	33 27       	eor	r19, r19
    39c0:	27 fd       	sbrc	r18, 7
    39c2:	30 95       	com	r19
    39c4:	82 2b       	or	r24, r18
    39c6:	93 2b       	or	r25, r19
    39c8:	20 91 14 04 	lds	r18, 0x0414
    39cc:	30 91 15 04 	lds	r19, 0x0415
    39d0:	82 1b       	sub	r24, r18
    39d2:	93 0b       	sbc	r25, r19
    39d4:	90 93 0f 04 	sts	0x040F, r25
    39d8:	80 93 0e 04 	sts	0x040E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    39dc:	8e 81       	ldd	r24, Y+6	; 0x06
    39de:	99 27       	eor	r25, r25
    39e0:	87 fd       	sbrc	r24, 7
    39e2:	90 95       	com	r25
    39e4:	98 2f       	mov	r25, r24
    39e6:	88 27       	eor	r24, r24
    39e8:	2d 81       	ldd	r18, Y+5	; 0x05
    39ea:	33 27       	eor	r19, r19
    39ec:	27 fd       	sbrc	r18, 7
    39ee:	30 95       	com	r19
    39f0:	82 2b       	or	r24, r18
    39f2:	93 2b       	or	r25, r19
    39f4:	20 91 16 04 	lds	r18, 0x0416
    39f8:	30 91 17 04 	lds	r19, 0x0417
    39fc:	82 1b       	sub	r24, r18
    39fe:	93 0b       	sbc	r25, r19
    3a00:	90 93 11 04 	sts	0x0411, r25
    3a04:	80 93 10 04 	sts	0x0410, r24
    3a08:	5f cf       	rjmp	.-322    	; 0x38c8 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    3a0a:	80 91 13 02 	lds	r24, 0x0213
    3a0e:	0e 94 90 10 	call	0x2120	; 0x2120 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3a12:	82 e3       	ldi	r24, 0x32	; 50
    3a14:	67 cf       	rjmp	.-306    	; 0x38e4 <readAccelXYZ+0x4e>

00003a16 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    3a1a:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    3a1e:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    3a22:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <updateRedLed>
	updateGreenLed(pwm_green);
    3a2c:	80 91 0d 02 	lds	r24, 0x020D
    3a30:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <updateGreenLed>
	updateBlueLed(pwm_blue);
    3a34:	80 91 0e 02 	lds	r24, 0x020E
    3a38:	0e 94 0a 1b 	call	0x3614	; 0x3614 <updateBlueLed>

	calibrationCycle = 0;
    3a3c:	10 92 25 04 	sts	0x0425, r1
    3a40:	10 92 24 04 	sts	0x0424, r1
	startCalibration = 1;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	80 93 56 04 	sts	0x0456, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3a4a:	c1 e0       	ldi	r28, 0x01	; 1
    3a4c:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3a4e:	0e 94 4b 1c 	call	0x3896	; 0x3896 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    3a52:	20 91 24 04 	lds	r18, 0x0424
    3a56:	30 91 25 04 	lds	r19, 0x0425
    3a5a:	21 31       	cpi	r18, 0x11	; 17
    3a5c:	31 05       	cpc	r19, r1
    3a5e:	0c f4       	brge	.+2      	; 0x3a62 <calibrateSensors+0x4c>
    3a60:	35 c1       	rjmp	.+618    	; 0x3ccc <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    3a62:	80 91 8f 03 	lds	r24, 0x038F
    3a66:	90 91 90 03 	lds	r25, 0x0390
    3a6a:	a0 91 91 03 	lds	r26, 0x0391
    3a6e:	b0 91 92 03 	lds	r27, 0x0392
    3a72:	54 e0       	ldi	r21, 0x04	; 4
    3a74:	b6 95       	lsr	r27
    3a76:	a7 95       	ror	r26
    3a78:	97 95       	ror	r25
    3a7a:	87 95       	ror	r24
    3a7c:	5a 95       	dec	r21
    3a7e:	d1 f7       	brne	.-12     	; 0x3a74 <calibrateSensors+0x5e>
    3a80:	90 93 78 03 	sts	0x0378, r25
    3a84:	80 93 77 03 	sts	0x0377, r24
    3a88:	80 91 93 03 	lds	r24, 0x0393
    3a8c:	90 91 94 03 	lds	r25, 0x0394
    3a90:	a0 91 95 03 	lds	r26, 0x0395
    3a94:	b0 91 96 03 	lds	r27, 0x0396
    3a98:	44 e0       	ldi	r20, 0x04	; 4
    3a9a:	b6 95       	lsr	r27
    3a9c:	a7 95       	ror	r26
    3a9e:	97 95       	ror	r25
    3aa0:	87 95       	ror	r24
    3aa2:	4a 95       	dec	r20
    3aa4:	d1 f7       	brne	.-12     	; 0x3a9a <calibrateSensors+0x84>
    3aa6:	90 93 7a 03 	sts	0x037A, r25
    3aaa:	80 93 79 03 	sts	0x0379, r24
    3aae:	80 91 97 03 	lds	r24, 0x0397
    3ab2:	90 91 98 03 	lds	r25, 0x0398
    3ab6:	a0 91 99 03 	lds	r26, 0x0399
    3aba:	b0 91 9a 03 	lds	r27, 0x039A
    3abe:	34 e0       	ldi	r19, 0x04	; 4
    3ac0:	b6 95       	lsr	r27
    3ac2:	a7 95       	ror	r26
    3ac4:	97 95       	ror	r25
    3ac6:	87 95       	ror	r24
    3ac8:	3a 95       	dec	r19
    3aca:	d1 f7       	brne	.-12     	; 0x3ac0 <calibrateSensors+0xaa>
    3acc:	90 93 7c 03 	sts	0x037C, r25
    3ad0:	80 93 7b 03 	sts	0x037B, r24
    3ad4:	80 91 9b 03 	lds	r24, 0x039B
    3ad8:	90 91 9c 03 	lds	r25, 0x039C
    3adc:	a0 91 9d 03 	lds	r26, 0x039D
    3ae0:	b0 91 9e 03 	lds	r27, 0x039E
    3ae4:	24 e0       	ldi	r18, 0x04	; 4
    3ae6:	b6 95       	lsr	r27
    3ae8:	a7 95       	ror	r26
    3aea:	97 95       	ror	r25
    3aec:	87 95       	ror	r24
    3aee:	2a 95       	dec	r18
    3af0:	d1 f7       	brne	.-12     	; 0x3ae6 <calibrateSensors+0xd0>
    3af2:	90 93 7e 03 	sts	0x037E, r25
    3af6:	80 93 7d 03 	sts	0x037D, r24
    3afa:	80 91 9f 03 	lds	r24, 0x039F
    3afe:	90 91 a0 03 	lds	r25, 0x03A0
    3b02:	a0 91 a1 03 	lds	r26, 0x03A1
    3b06:	b0 91 a2 03 	lds	r27, 0x03A2
    3b0a:	f4 e0       	ldi	r31, 0x04	; 4
    3b0c:	b6 95       	lsr	r27
    3b0e:	a7 95       	ror	r26
    3b10:	97 95       	ror	r25
    3b12:	87 95       	ror	r24
    3b14:	fa 95       	dec	r31
    3b16:	d1 f7       	brne	.-12     	; 0x3b0c <calibrateSensors+0xf6>
    3b18:	90 93 80 03 	sts	0x0380, r25
    3b1c:	80 93 7f 03 	sts	0x037F, r24
    3b20:	80 91 a3 03 	lds	r24, 0x03A3
    3b24:	90 91 a4 03 	lds	r25, 0x03A4
    3b28:	a0 91 a5 03 	lds	r26, 0x03A5
    3b2c:	b0 91 a6 03 	lds	r27, 0x03A6
    3b30:	e4 e0       	ldi	r30, 0x04	; 4
    3b32:	b6 95       	lsr	r27
    3b34:	a7 95       	ror	r26
    3b36:	97 95       	ror	r25
    3b38:	87 95       	ror	r24
    3b3a:	ea 95       	dec	r30
    3b3c:	d1 f7       	brne	.-12     	; 0x3b32 <calibrateSensors+0x11c>
    3b3e:	90 93 82 03 	sts	0x0382, r25
    3b42:	80 93 81 03 	sts	0x0381, r24
    3b46:	80 91 a7 03 	lds	r24, 0x03A7
    3b4a:	90 91 a8 03 	lds	r25, 0x03A8
    3b4e:	a0 91 a9 03 	lds	r26, 0x03A9
    3b52:	b0 91 aa 03 	lds	r27, 0x03AA
    3b56:	74 e0       	ldi	r23, 0x04	; 4
    3b58:	b6 95       	lsr	r27
    3b5a:	a7 95       	ror	r26
    3b5c:	97 95       	ror	r25
    3b5e:	87 95       	ror	r24
    3b60:	7a 95       	dec	r23
    3b62:	d1 f7       	brne	.-12     	; 0x3b58 <calibrateSensors+0x142>
    3b64:	90 93 84 03 	sts	0x0384, r25
    3b68:	80 93 83 03 	sts	0x0383, r24
    3b6c:	80 91 ab 03 	lds	r24, 0x03AB
    3b70:	90 91 ac 03 	lds	r25, 0x03AC
    3b74:	a0 91 ad 03 	lds	r26, 0x03AD
    3b78:	b0 91 ae 03 	lds	r27, 0x03AE
    3b7c:	64 e0       	ldi	r22, 0x04	; 4
    3b7e:	b6 95       	lsr	r27
    3b80:	a7 95       	ror	r26
    3b82:	97 95       	ror	r25
    3b84:	87 95       	ror	r24
    3b86:	6a 95       	dec	r22
    3b88:	d1 f7       	brne	.-12     	; 0x3b7e <calibrateSensors+0x168>
    3b8a:	90 93 86 03 	sts	0x0386, r25
    3b8e:	80 93 85 03 	sts	0x0385, r24
    3b92:	80 91 b3 03 	lds	r24, 0x03B3
    3b96:	90 91 b4 03 	lds	r25, 0x03B4
    3b9a:	a0 91 b5 03 	lds	r26, 0x03B5
    3b9e:	b0 91 b6 03 	lds	r27, 0x03B6
    3ba2:	54 e0       	ldi	r21, 0x04	; 4
    3ba4:	b6 95       	lsr	r27
    3ba6:	a7 95       	ror	r26
    3ba8:	97 95       	ror	r25
    3baa:	87 95       	ror	r24
    3bac:	5a 95       	dec	r21
    3bae:	d1 f7       	brne	.-12     	; 0x3ba4 <calibrateSensors+0x18e>
    3bb0:	9c 01       	movw	r18, r24
    3bb2:	80 91 b7 03 	lds	r24, 0x03B7
    3bb6:	90 91 b8 03 	lds	r25, 0x03B8
    3bba:	a0 91 b9 03 	lds	r26, 0x03B9
    3bbe:	b0 91 ba 03 	lds	r27, 0x03BA
    3bc2:	44 e0       	ldi	r20, 0x04	; 4
    3bc4:	b6 95       	lsr	r27
    3bc6:	a7 95       	ror	r26
    3bc8:	97 95       	ror	r25
    3bca:	87 95       	ror	r24
    3bcc:	4a 95       	dec	r20
    3bce:	d1 f7       	brne	.-12     	; 0x3bc4 <calibrateSensors+0x1ae>
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	80 91 bb 03 	lds	r24, 0x03BB
    3bd6:	90 91 bc 03 	lds	r25, 0x03BC
    3bda:	a0 91 bd 03 	lds	r26, 0x03BD
    3bde:	b0 91 be 03 	lds	r27, 0x03BE
    3be2:	f4 e0       	ldi	r31, 0x04	; 4
    3be4:	b6 95       	lsr	r27
    3be6:	a7 95       	ror	r26
    3be8:	97 95       	ror	r25
    3bea:	87 95       	ror	r24
    3bec:	fa 95       	dec	r31
    3bee:	d1 f7       	brne	.-12     	; 0x3be4 <calibrateSensors+0x1ce>
    3bf0:	ac 01       	movw	r20, r24
    3bf2:	80 91 af 03 	lds	r24, 0x03AF
    3bf6:	90 91 b0 03 	lds	r25, 0x03B0
    3bfa:	a0 91 b1 03 	lds	r26, 0x03B1
    3bfe:	b0 91 b2 03 	lds	r27, 0x03B2
    3c02:	e4 e0       	ldi	r30, 0x04	; 4
    3c04:	b6 95       	lsr	r27
    3c06:	a7 95       	ror	r26
    3c08:	97 95       	ror	r25
    3c0a:	87 95       	ror	r24
    3c0c:	ea 95       	dec	r30
    3c0e:	d1 f7       	brne	.-12     	; 0x3c04 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    3c10:	80 50       	subi	r24, 0x00	; 0
    3c12:	92 40       	sbci	r25, 0x02	; 2
    3c14:	90 93 88 03 	sts	0x0388, r25
    3c18:	80 93 87 03 	sts	0x0387, r24
    3c1c:	20 50       	subi	r18, 0x00	; 0
    3c1e:	32 40       	sbci	r19, 0x02	; 2
    3c20:	30 93 8a 03 	sts	0x038A, r19
    3c24:	20 93 89 03 	sts	0x0389, r18
    3c28:	60 50       	subi	r22, 0x00	; 0
    3c2a:	72 40       	sbci	r23, 0x02	; 2
    3c2c:	70 93 8c 03 	sts	0x038C, r23
    3c30:	60 93 8b 03 	sts	0x038B, r22
    3c34:	40 50       	subi	r20, 0x00	; 0
    3c36:	52 40       	sbci	r21, 0x02	; 2
    3c38:	50 93 8e 03 	sts	0x038E, r21
    3c3c:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    3c40:	80 91 18 04 	lds	r24, 0x0418
    3c44:	90 91 19 04 	lds	r25, 0x0419
    3c48:	95 95       	asr	r25
    3c4a:	87 95       	ror	r24
    3c4c:	95 95       	asr	r25
    3c4e:	87 95       	ror	r24
    3c50:	95 95       	asr	r25
    3c52:	87 95       	ror	r24
    3c54:	95 95       	asr	r25
    3c56:	87 95       	ror	r24
    3c58:	90 93 13 04 	sts	0x0413, r25
    3c5c:	80 93 12 04 	sts	0x0412, r24
			accOffsetY = accOffsetYSum>>4;
    3c60:	80 91 1a 04 	lds	r24, 0x041A
    3c64:	90 91 1b 04 	lds	r25, 0x041B
    3c68:	95 95       	asr	r25
    3c6a:	87 95       	ror	r24
    3c6c:	95 95       	asr	r25
    3c6e:	87 95       	ror	r24
    3c70:	95 95       	asr	r25
    3c72:	87 95       	ror	r24
    3c74:	95 95       	asr	r25
    3c76:	87 95       	ror	r24
    3c78:	90 93 15 04 	sts	0x0415, r25
    3c7c:	80 93 14 04 	sts	0x0414, r24
			accOffsetZ = accOffsetZSum>>4;
    3c80:	80 91 1c 04 	lds	r24, 0x041C
    3c84:	90 91 1d 04 	lds	r25, 0x041D
    3c88:	95 95       	asr	r25
    3c8a:	87 95       	ror	r24
    3c8c:	95 95       	asr	r25
    3c8e:	87 95       	ror	r24
    3c90:	95 95       	asr	r25
    3c92:	87 95       	ror	r24
    3c94:	95 95       	asr	r25
    3c96:	87 95       	ror	r24
    3c98:	90 93 17 04 	sts	0x0417, r25
    3c9c:	80 93 16 04 	sts	0x0416, r24

			startCalibration = 0;
    3ca0:	10 92 56 04 	sts	0x0456, r1

		}

	}

	pwm_red = 255;
    3ca4:	8f ef       	ldi	r24, 0xFF	; 255
    3ca6:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3caa:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3cae:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3cb2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <updateRedLed>
	updateGreenLed(pwm_green);
    3cb6:	80 91 0d 02 	lds	r24, 0x020D
    3cba:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <updateGreenLed>
	updateBlueLed(pwm_blue);
    3cbe:	80 91 0e 02 	lds	r24, 0x020E
    3cc2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <updateBlueLed>

}
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3ccc:	80 91 c6 03 	lds	r24, 0x03C6
    3cd0:	88 23       	and	r24, r24
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <calibrateSensors+0x2c0>
    3cd4:	86 c1       	rjmp	.+780    	; 0x3fe2 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3cd6:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    3cda:	21 15       	cp	r18, r1
    3cdc:	31 05       	cpc	r19, r1
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <calibrateSensors+0x2cc>
    3ce0:	86 c1       	rjmp	.+780    	; 0x3fee <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3ce2:	80 91 5f 03 	lds	r24, 0x035F
    3ce6:	90 91 60 03 	lds	r25, 0x0360
    3cea:	aa 27       	eor	r26, r26
    3cec:	97 fd       	sbrc	r25, 7
    3cee:	a0 95       	com	r26
    3cf0:	ba 2f       	mov	r27, r26
    3cf2:	40 91 8f 03 	lds	r20, 0x038F
    3cf6:	50 91 90 03 	lds	r21, 0x0390
    3cfa:	60 91 91 03 	lds	r22, 0x0391
    3cfe:	70 91 92 03 	lds	r23, 0x0392
    3d02:	84 0f       	add	r24, r20
    3d04:	95 1f       	adc	r25, r21
    3d06:	a6 1f       	adc	r26, r22
    3d08:	b7 1f       	adc	r27, r23
    3d0a:	80 93 8f 03 	sts	0x038F, r24
    3d0e:	90 93 90 03 	sts	0x0390, r25
    3d12:	a0 93 91 03 	sts	0x0391, r26
    3d16:	b0 93 92 03 	sts	0x0392, r27
    3d1a:	80 91 61 03 	lds	r24, 0x0361
    3d1e:	90 91 62 03 	lds	r25, 0x0362
    3d22:	aa 27       	eor	r26, r26
    3d24:	97 fd       	sbrc	r25, 7
    3d26:	a0 95       	com	r26
    3d28:	ba 2f       	mov	r27, r26
    3d2a:	40 91 93 03 	lds	r20, 0x0393
    3d2e:	50 91 94 03 	lds	r21, 0x0394
    3d32:	60 91 95 03 	lds	r22, 0x0395
    3d36:	70 91 96 03 	lds	r23, 0x0396
    3d3a:	84 0f       	add	r24, r20
    3d3c:	95 1f       	adc	r25, r21
    3d3e:	a6 1f       	adc	r26, r22
    3d40:	b7 1f       	adc	r27, r23
    3d42:	80 93 93 03 	sts	0x0393, r24
    3d46:	90 93 94 03 	sts	0x0394, r25
    3d4a:	a0 93 95 03 	sts	0x0395, r26
    3d4e:	b0 93 96 03 	sts	0x0396, r27
    3d52:	80 91 63 03 	lds	r24, 0x0363
    3d56:	90 91 64 03 	lds	r25, 0x0364
    3d5a:	aa 27       	eor	r26, r26
    3d5c:	97 fd       	sbrc	r25, 7
    3d5e:	a0 95       	com	r26
    3d60:	ba 2f       	mov	r27, r26
    3d62:	40 91 97 03 	lds	r20, 0x0397
    3d66:	50 91 98 03 	lds	r21, 0x0398
    3d6a:	60 91 99 03 	lds	r22, 0x0399
    3d6e:	70 91 9a 03 	lds	r23, 0x039A
    3d72:	84 0f       	add	r24, r20
    3d74:	95 1f       	adc	r25, r21
    3d76:	a6 1f       	adc	r26, r22
    3d78:	b7 1f       	adc	r27, r23
    3d7a:	80 93 97 03 	sts	0x0397, r24
    3d7e:	90 93 98 03 	sts	0x0398, r25
    3d82:	a0 93 99 03 	sts	0x0399, r26
    3d86:	b0 93 9a 03 	sts	0x039A, r27
    3d8a:	80 91 65 03 	lds	r24, 0x0365
    3d8e:	90 91 66 03 	lds	r25, 0x0366
    3d92:	aa 27       	eor	r26, r26
    3d94:	97 fd       	sbrc	r25, 7
    3d96:	a0 95       	com	r26
    3d98:	ba 2f       	mov	r27, r26
    3d9a:	40 91 9b 03 	lds	r20, 0x039B
    3d9e:	50 91 9c 03 	lds	r21, 0x039C
    3da2:	60 91 9d 03 	lds	r22, 0x039D
    3da6:	70 91 9e 03 	lds	r23, 0x039E
    3daa:	84 0f       	add	r24, r20
    3dac:	95 1f       	adc	r25, r21
    3dae:	a6 1f       	adc	r26, r22
    3db0:	b7 1f       	adc	r27, r23
    3db2:	80 93 9b 03 	sts	0x039B, r24
    3db6:	90 93 9c 03 	sts	0x039C, r25
    3dba:	a0 93 9d 03 	sts	0x039D, r26
    3dbe:	b0 93 9e 03 	sts	0x039E, r27
    3dc2:	80 91 67 03 	lds	r24, 0x0367
    3dc6:	90 91 68 03 	lds	r25, 0x0368
    3dca:	aa 27       	eor	r26, r26
    3dcc:	97 fd       	sbrc	r25, 7
    3dce:	a0 95       	com	r26
    3dd0:	ba 2f       	mov	r27, r26
    3dd2:	40 91 9f 03 	lds	r20, 0x039F
    3dd6:	50 91 a0 03 	lds	r21, 0x03A0
    3dda:	60 91 a1 03 	lds	r22, 0x03A1
    3dde:	70 91 a2 03 	lds	r23, 0x03A2
    3de2:	84 0f       	add	r24, r20
    3de4:	95 1f       	adc	r25, r21
    3de6:	a6 1f       	adc	r26, r22
    3de8:	b7 1f       	adc	r27, r23
    3dea:	80 93 9f 03 	sts	0x039F, r24
    3dee:	90 93 a0 03 	sts	0x03A0, r25
    3df2:	a0 93 a1 03 	sts	0x03A1, r26
    3df6:	b0 93 a2 03 	sts	0x03A2, r27
    3dfa:	80 91 69 03 	lds	r24, 0x0369
    3dfe:	90 91 6a 03 	lds	r25, 0x036A
    3e02:	aa 27       	eor	r26, r26
    3e04:	97 fd       	sbrc	r25, 7
    3e06:	a0 95       	com	r26
    3e08:	ba 2f       	mov	r27, r26
    3e0a:	40 91 a3 03 	lds	r20, 0x03A3
    3e0e:	50 91 a4 03 	lds	r21, 0x03A4
    3e12:	60 91 a5 03 	lds	r22, 0x03A5
    3e16:	70 91 a6 03 	lds	r23, 0x03A6
    3e1a:	84 0f       	add	r24, r20
    3e1c:	95 1f       	adc	r25, r21
    3e1e:	a6 1f       	adc	r26, r22
    3e20:	b7 1f       	adc	r27, r23
    3e22:	80 93 a3 03 	sts	0x03A3, r24
    3e26:	90 93 a4 03 	sts	0x03A4, r25
    3e2a:	a0 93 a5 03 	sts	0x03A5, r26
    3e2e:	b0 93 a6 03 	sts	0x03A6, r27
    3e32:	80 91 6b 03 	lds	r24, 0x036B
    3e36:	90 91 6c 03 	lds	r25, 0x036C
    3e3a:	aa 27       	eor	r26, r26
    3e3c:	97 fd       	sbrc	r25, 7
    3e3e:	a0 95       	com	r26
    3e40:	ba 2f       	mov	r27, r26
    3e42:	40 91 a7 03 	lds	r20, 0x03A7
    3e46:	50 91 a8 03 	lds	r21, 0x03A8
    3e4a:	60 91 a9 03 	lds	r22, 0x03A9
    3e4e:	70 91 aa 03 	lds	r23, 0x03AA
    3e52:	84 0f       	add	r24, r20
    3e54:	95 1f       	adc	r25, r21
    3e56:	a6 1f       	adc	r26, r22
    3e58:	b7 1f       	adc	r27, r23
    3e5a:	80 93 a7 03 	sts	0x03A7, r24
    3e5e:	90 93 a8 03 	sts	0x03A8, r25
    3e62:	a0 93 a9 03 	sts	0x03A9, r26
    3e66:	b0 93 aa 03 	sts	0x03AA, r27
    3e6a:	80 91 6d 03 	lds	r24, 0x036D
    3e6e:	90 91 6e 03 	lds	r25, 0x036E
    3e72:	aa 27       	eor	r26, r26
    3e74:	97 fd       	sbrc	r25, 7
    3e76:	a0 95       	com	r26
    3e78:	ba 2f       	mov	r27, r26
    3e7a:	40 91 ab 03 	lds	r20, 0x03AB
    3e7e:	50 91 ac 03 	lds	r21, 0x03AC
    3e82:	60 91 ad 03 	lds	r22, 0x03AD
    3e86:	70 91 ae 03 	lds	r23, 0x03AE
    3e8a:	84 0f       	add	r24, r20
    3e8c:	95 1f       	adc	r25, r21
    3e8e:	a6 1f       	adc	r26, r22
    3e90:	b7 1f       	adc	r27, r23
    3e92:	80 93 ab 03 	sts	0x03AB, r24
    3e96:	90 93 ac 03 	sts	0x03AC, r25
    3e9a:	a0 93 ad 03 	sts	0x03AD, r26
    3e9e:	b0 93 ae 03 	sts	0x03AE, r27
    3ea2:	80 91 6f 03 	lds	r24, 0x036F
    3ea6:	90 91 70 03 	lds	r25, 0x0370
    3eaa:	aa 27       	eor	r26, r26
    3eac:	97 fd       	sbrc	r25, 7
    3eae:	a0 95       	com	r26
    3eb0:	ba 2f       	mov	r27, r26
    3eb2:	40 91 af 03 	lds	r20, 0x03AF
    3eb6:	50 91 b0 03 	lds	r21, 0x03B0
    3eba:	60 91 b1 03 	lds	r22, 0x03B1
    3ebe:	70 91 b2 03 	lds	r23, 0x03B2
    3ec2:	84 0f       	add	r24, r20
    3ec4:	95 1f       	adc	r25, r21
    3ec6:	a6 1f       	adc	r26, r22
    3ec8:	b7 1f       	adc	r27, r23
    3eca:	80 93 af 03 	sts	0x03AF, r24
    3ece:	90 93 b0 03 	sts	0x03B0, r25
    3ed2:	a0 93 b1 03 	sts	0x03B1, r26
    3ed6:	b0 93 b2 03 	sts	0x03B2, r27
    3eda:	80 91 71 03 	lds	r24, 0x0371
    3ede:	90 91 72 03 	lds	r25, 0x0372
    3ee2:	aa 27       	eor	r26, r26
    3ee4:	97 fd       	sbrc	r25, 7
    3ee6:	a0 95       	com	r26
    3ee8:	ba 2f       	mov	r27, r26
    3eea:	40 91 b3 03 	lds	r20, 0x03B3
    3eee:	50 91 b4 03 	lds	r21, 0x03B4
    3ef2:	60 91 b5 03 	lds	r22, 0x03B5
    3ef6:	70 91 b6 03 	lds	r23, 0x03B6
    3efa:	84 0f       	add	r24, r20
    3efc:	95 1f       	adc	r25, r21
    3efe:	a6 1f       	adc	r26, r22
    3f00:	b7 1f       	adc	r27, r23
    3f02:	80 93 b3 03 	sts	0x03B3, r24
    3f06:	90 93 b4 03 	sts	0x03B4, r25
    3f0a:	a0 93 b5 03 	sts	0x03B5, r26
    3f0e:	b0 93 b6 03 	sts	0x03B6, r27
    3f12:	80 91 73 03 	lds	r24, 0x0373
    3f16:	90 91 74 03 	lds	r25, 0x0374
    3f1a:	aa 27       	eor	r26, r26
    3f1c:	97 fd       	sbrc	r25, 7
    3f1e:	a0 95       	com	r26
    3f20:	ba 2f       	mov	r27, r26
    3f22:	40 91 b7 03 	lds	r20, 0x03B7
    3f26:	50 91 b8 03 	lds	r21, 0x03B8
    3f2a:	60 91 b9 03 	lds	r22, 0x03B9
    3f2e:	70 91 ba 03 	lds	r23, 0x03BA
    3f32:	84 0f       	add	r24, r20
    3f34:	95 1f       	adc	r25, r21
    3f36:	a6 1f       	adc	r26, r22
    3f38:	b7 1f       	adc	r27, r23
    3f3a:	80 93 b7 03 	sts	0x03B7, r24
    3f3e:	90 93 b8 03 	sts	0x03B8, r25
    3f42:	a0 93 b9 03 	sts	0x03B9, r26
    3f46:	b0 93 ba 03 	sts	0x03BA, r27
    3f4a:	80 91 75 03 	lds	r24, 0x0375
    3f4e:	90 91 76 03 	lds	r25, 0x0376
    3f52:	aa 27       	eor	r26, r26
    3f54:	97 fd       	sbrc	r25, 7
    3f56:	a0 95       	com	r26
    3f58:	ba 2f       	mov	r27, r26
    3f5a:	40 91 bb 03 	lds	r20, 0x03BB
    3f5e:	50 91 bc 03 	lds	r21, 0x03BC
    3f62:	60 91 bd 03 	lds	r22, 0x03BD
    3f66:	70 91 be 03 	lds	r23, 0x03BE
    3f6a:	84 0f       	add	r24, r20
    3f6c:	95 1f       	adc	r25, r21
    3f6e:	a6 1f       	adc	r26, r22
    3f70:	b7 1f       	adc	r27, r23
    3f72:	80 93 bb 03 	sts	0x03BB, r24
    3f76:	90 93 bc 03 	sts	0x03BC, r25
    3f7a:	a0 93 bd 03 	sts	0x03BD, r26
    3f7e:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    3f82:	80 91 18 04 	lds	r24, 0x0418
    3f86:	90 91 19 04 	lds	r25, 0x0419
    3f8a:	40 91 0c 04 	lds	r20, 0x040C
    3f8e:	50 91 0d 04 	lds	r21, 0x040D
    3f92:	84 0f       	add	r24, r20
    3f94:	95 1f       	adc	r25, r21
    3f96:	90 93 19 04 	sts	0x0419, r25
    3f9a:	80 93 18 04 	sts	0x0418, r24
				accOffsetYSum += accY;
    3f9e:	80 91 1a 04 	lds	r24, 0x041A
    3fa2:	90 91 1b 04 	lds	r25, 0x041B
    3fa6:	40 91 0e 04 	lds	r20, 0x040E
    3faa:	50 91 0f 04 	lds	r21, 0x040F
    3fae:	84 0f       	add	r24, r20
    3fb0:	95 1f       	adc	r25, r21
    3fb2:	90 93 1b 04 	sts	0x041B, r25
    3fb6:	80 93 1a 04 	sts	0x041A, r24
				accOffsetZSum += accZ;
    3fba:	80 91 1c 04 	lds	r24, 0x041C
    3fbe:	90 91 1d 04 	lds	r25, 0x041D
    3fc2:	40 91 10 04 	lds	r20, 0x0410
    3fc6:	50 91 11 04 	lds	r21, 0x0411
    3fca:	84 0f       	add	r24, r20
    3fcc:	95 1f       	adc	r25, r21
    3fce:	90 93 1d 04 	sts	0x041D, r25
    3fd2:	80 93 1c 04 	sts	0x041C, r24

				calibrationCycle++;
    3fd6:	2f 5f       	subi	r18, 0xFF	; 255
    3fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fda:	30 93 25 04 	sts	0x0425, r19
    3fde:	20 93 24 04 	sts	0x0424, r18
    3fe2:	80 91 56 04 	lds	r24, 0x0456
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    3fe6:	88 23       	and	r24, r24
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <calibrateSensors+0x5d6>
    3fea:	31 cd       	rjmp	.-1438   	; 0x3a4e <calibrateSensors+0x38>
    3fec:	5b ce       	rjmp	.-842    	; 0x3ca4 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3fee:	10 92 8f 03 	sts	0x038F, r1
    3ff2:	10 92 90 03 	sts	0x0390, r1
    3ff6:	10 92 91 03 	sts	0x0391, r1
    3ffa:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    3ffe:	10 92 78 03 	sts	0x0378, r1
    4002:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4006:	10 92 93 03 	sts	0x0393, r1
    400a:	10 92 94 03 	sts	0x0394, r1
    400e:	10 92 95 03 	sts	0x0395, r1
    4012:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4016:	10 92 7a 03 	sts	0x037A, r1
    401a:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    401e:	10 92 97 03 	sts	0x0397, r1
    4022:	10 92 98 03 	sts	0x0398, r1
    4026:	10 92 99 03 	sts	0x0399, r1
    402a:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    402e:	10 92 7c 03 	sts	0x037C, r1
    4032:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4036:	10 92 9b 03 	sts	0x039B, r1
    403a:	10 92 9c 03 	sts	0x039C, r1
    403e:	10 92 9d 03 	sts	0x039D, r1
    4042:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    4046:	10 92 7e 03 	sts	0x037E, r1
    404a:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    404e:	10 92 9f 03 	sts	0x039F, r1
    4052:	10 92 a0 03 	sts	0x03A0, r1
    4056:	10 92 a1 03 	sts	0x03A1, r1
    405a:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    405e:	10 92 80 03 	sts	0x0380, r1
    4062:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4066:	10 92 a3 03 	sts	0x03A3, r1
    406a:	10 92 a4 03 	sts	0x03A4, r1
    406e:	10 92 a5 03 	sts	0x03A5, r1
    4072:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    4076:	10 92 82 03 	sts	0x0382, r1
    407a:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    407e:	10 92 a7 03 	sts	0x03A7, r1
    4082:	10 92 a8 03 	sts	0x03A8, r1
    4086:	10 92 a9 03 	sts	0x03A9, r1
    408a:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    408e:	10 92 84 03 	sts	0x0384, r1
    4092:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4096:	10 92 ab 03 	sts	0x03AB, r1
    409a:	10 92 ac 03 	sts	0x03AC, r1
    409e:	10 92 ad 03 	sts	0x03AD, r1
    40a2:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    40a6:	10 92 86 03 	sts	0x0386, r1
    40aa:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40ae:	10 92 af 03 	sts	0x03AF, r1
    40b2:	10 92 b0 03 	sts	0x03B0, r1
    40b6:	10 92 b1 03 	sts	0x03B1, r1
    40ba:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    40be:	10 92 88 03 	sts	0x0388, r1
    40c2:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40c6:	10 92 b3 03 	sts	0x03B3, r1
    40ca:	10 92 b4 03 	sts	0x03B4, r1
    40ce:	10 92 b5 03 	sts	0x03B5, r1
    40d2:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    40d6:	10 92 8a 03 	sts	0x038A, r1
    40da:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40de:	10 92 b7 03 	sts	0x03B7, r1
    40e2:	10 92 b8 03 	sts	0x03B8, r1
    40e6:	10 92 b9 03 	sts	0x03B9, r1
    40ea:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    40ee:	10 92 8c 03 	sts	0x038C, r1
    40f2:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40f6:	10 92 bb 03 	sts	0x03BB, r1
    40fa:	10 92 bc 03 	sts	0x03BC, r1
    40fe:	10 92 bd 03 	sts	0x03BD, r1
    4102:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4106:	10 92 8e 03 	sts	0x038E, r1
    410a:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    410e:	10 92 19 04 	sts	0x0419, r1
    4112:	10 92 18 04 	sts	0x0418, r1
					accOffsetYSum = 0;
    4116:	10 92 1b 04 	sts	0x041B, r1
    411a:	10 92 1a 04 	sts	0x041A, r1
					accOffsetZSum = 0;
    411e:	10 92 1d 04 	sts	0x041D, r1
    4122:	10 92 1c 04 	sts	0x041C, r1

					calibrationCycle++;
    4126:	d0 93 25 04 	sts	0x0425, r29
    412a:	c0 93 24 04 	sts	0x0424, r28
    412e:	80 91 56 04 	lds	r24, 0x0456

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4132:	59 cf       	rjmp	.-334    	; 0x3fe6 <calibrateSensors+0x5d0>

00004134 <computeAngle>:

	}

}

void computeAngle() {
    4134:	ef 92       	push	r14
    4136:	ff 92       	push	r15
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    413c:	80 91 10 04 	lds	r24, 0x0410
    4140:	90 91 11 04 	lds	r25, 0x0411
    4144:	97 fd       	sbrc	r25, 7
    4146:	5b c0       	rjmp	.+182    	; 0x41fe <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    4148:	80 31       	cpi	r24, 0x10	; 16
    414a:	91 05       	cpc	r25, r1
    414c:	08 f0       	brcs	.+2      	; 0x4150 <computeAngle+0x1c>
    414e:	42 c0       	rjmp	.+132    	; 0x41d4 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    4156:	90 91 14 02 	lds	r25, 0x0214
    415a:	98 17       	cp	r25, r24
    415c:	09 f4       	brne	.+2      	; 0x4160 <computeAngle+0x2c>
    415e:	42 c0       	rjmp	.+132    	; 0x41e4 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    4160:	10 92 20 04 	sts	0x0420, r1
	}
	prevPosition = currPosition;
    4164:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    4168:	60 91 0c 04 	lds	r22, 0x040C
    416c:	70 91 0d 04 	lds	r23, 0x040D
    4170:	88 27       	eor	r24, r24
    4172:	77 fd       	sbrc	r23, 7
    4174:	80 95       	com	r24
    4176:	98 2f       	mov	r25, r24
    4178:	0e 94 02 22 	call	0x4404	; 0x4404 <__floatsisf>
    417c:	7b 01       	movw	r14, r22
    417e:	8c 01       	movw	r16, r24
    4180:	60 91 0e 04 	lds	r22, 0x040E
    4184:	70 91 0f 04 	lds	r23, 0x040F
    4188:	88 27       	eor	r24, r24
    418a:	77 fd       	sbrc	r23, 7
    418c:	80 95       	com	r24
    418e:	98 2f       	mov	r25, r24
    4190:	0e 94 02 22 	call	0x4404	; 0x4404 <__floatsisf>
    4194:	9b 01       	movw	r18, r22
    4196:	ac 01       	movw	r20, r24
    4198:	c8 01       	movw	r24, r16
    419a:	b7 01       	movw	r22, r14
    419c:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <atan2>
    41a0:	21 ee       	ldi	r18, 0xE1	; 225
    41a2:	3e e2       	ldi	r19, 0x2E	; 46
    41a4:	45 e6       	ldi	r20, 0x65	; 101
    41a6:	52 e4       	ldi	r21, 0x42	; 66
    41a8:	0e 94 03 21 	call	0x4206	; 0x4206 <__mulsf3>
    41ac:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__fixsfsi>
    41b0:	9b 01       	movw	r18, r22
    41b2:	70 93 1f 04 	sts	0x041F, r23
    41b6:	60 93 1e 04 	sts	0x041E, r22

	if(currentAngle < 0) {
    41ba:	77 ff       	sbrs	r23, 7
    41bc:	06 c0       	rjmp	.+12     	; 0x41ca <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    41be:	28 59       	subi	r18, 0x98	; 152
    41c0:	3e 4f       	sbci	r19, 0xFE	; 254
    41c2:	30 93 1f 04 	sts	0x041F, r19
    41c6:	20 93 1e 04 	sts	0x041E, r18
	}

}
    41ca:	1f 91       	pop	r17
    41cc:	0f 91       	pop	r16
    41ce:	ff 90       	pop	r15
    41d0:	ef 90       	pop	r14
    41d2:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    41d4:	10 92 15 02 	sts	0x0215, r1
    41d8:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    41da:	90 91 14 02 	lds	r25, 0x0214
    41de:	98 17       	cp	r25, r24
    41e0:	09 f0       	breq	.+2      	; 0x41e4 <computeAngle+0xb0>
    41e2:	be cf       	rjmp	.-132    	; 0x4160 <computeAngle+0x2c>
		timesInSamePos++;
    41e4:	90 91 20 04 	lds	r25, 0x0420
    41e8:	9f 5f       	subi	r25, 0xFF	; 255
    41ea:	90 93 20 04 	sts	0x0420, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    41ee:	95 30       	cpi	r25, 0x05	; 5
    41f0:	08 f4       	brcc	.+2      	; 0x41f4 <computeAngle+0xc0>
    41f2:	b8 cf       	rjmp	.-144    	; 0x4164 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    41f4:	10 92 20 04 	sts	0x0420, r1
			robotPosition = currPosition;
    41f8:	80 93 16 02 	sts	0x0216, r24
    41fc:	b3 cf       	rjmp	.-154    	; 0x4164 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    41fe:	90 95       	com	r25
    4200:	81 95       	neg	r24
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	a1 cf       	rjmp	.-190    	; 0x4148 <computeAngle+0x14>

00004206 <__mulsf3>:
    4206:	a0 e2       	ldi	r26, 0x20	; 32
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	e9 e0       	ldi	r30, 0x09	; 9
    420c:	f1 e2       	ldi	r31, 0x21	; 33
    420e:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__prologue_saves__+0x4>
    4212:	69 83       	std	Y+1, r22	; 0x01
    4214:	7a 83       	std	Y+2, r23	; 0x02
    4216:	8b 83       	std	Y+3, r24	; 0x03
    4218:	9c 83       	std	Y+4, r25	; 0x04
    421a:	2d 83       	std	Y+5, r18	; 0x05
    421c:	3e 83       	std	Y+6, r19	; 0x06
    421e:	4f 83       	std	Y+7, r20	; 0x07
    4220:	58 87       	std	Y+8, r21	; 0x08
    4222:	99 e0       	ldi	r25, 0x09	; 9
    4224:	e9 2e       	mov	r14, r25
    4226:	f1 2c       	mov	r15, r1
    4228:	ec 0e       	add	r14, r28
    422a:	fd 1e       	adc	r15, r29
    422c:	b7 01       	movw	r22, r14
    422e:	ce 01       	movw	r24, r28
    4230:	01 96       	adiw	r24, 0x01	; 1
    4232:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__unpack_f>
    4236:	8e 01       	movw	r16, r28
    4238:	0f 5e       	subi	r16, 0xEF	; 239
    423a:	1f 4f       	sbci	r17, 0xFF	; 255
    423c:	b8 01       	movw	r22, r16
    423e:	ce 01       	movw	r24, r28
    4240:	05 96       	adiw	r24, 0x05	; 5
    4242:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__unpack_f>
    4246:	99 85       	ldd	r25, Y+9	; 0x09
    4248:	92 30       	cpi	r25, 0x02	; 2
    424a:	88 f0       	brcs	.+34     	; 0x426e <__mulsf3+0x68>
    424c:	89 89       	ldd	r24, Y+17	; 0x11
    424e:	82 30       	cpi	r24, 0x02	; 2
    4250:	c0 f0       	brcs	.+48     	; 0x4282 <__mulsf3+0x7c>
    4252:	94 30       	cpi	r25, 0x04	; 4
    4254:	19 f4       	brne	.+6      	; 0x425c <__mulsf3+0x56>
    4256:	82 30       	cpi	r24, 0x02	; 2
    4258:	29 f0       	breq	.+10     	; 0x4264 <__mulsf3+0x5e>
    425a:	09 c0       	rjmp	.+18     	; 0x426e <__mulsf3+0x68>
    425c:	84 30       	cpi	r24, 0x04	; 4
    425e:	29 f4       	brne	.+10     	; 0x426a <__mulsf3+0x64>
    4260:	92 30       	cpi	r25, 0x02	; 2
    4262:	79 f4       	brne	.+30     	; 0x4282 <__mulsf3+0x7c>
    4264:	67 e1       	ldi	r22, 0x17	; 23
    4266:	72 e0       	ldi	r23, 0x02	; 2
    4268:	c6 c0       	rjmp	.+396    	; 0x43f6 <__mulsf3+0x1f0>
    426a:	92 30       	cpi	r25, 0x02	; 2
    426c:	41 f4       	brne	.+16     	; 0x427e <__mulsf3+0x78>
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	9a 85       	ldd	r25, Y+10	; 0x0a
    4272:	8a 89       	ldd	r24, Y+18	; 0x12
    4274:	98 13       	cpse	r25, r24
    4276:	21 e0       	ldi	r18, 0x01	; 1
    4278:	2a 87       	std	Y+10, r18	; 0x0a
    427a:	b7 01       	movw	r22, r14
    427c:	bc c0       	rjmp	.+376    	; 0x43f6 <__mulsf3+0x1f0>
    427e:	82 30       	cpi	r24, 0x02	; 2
    4280:	41 f4       	brne	.+16     	; 0x4292 <__mulsf3+0x8c>
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	9a 85       	ldd	r25, Y+10	; 0x0a
    4286:	8a 89       	ldd	r24, Y+18	; 0x12
    4288:	98 13       	cpse	r25, r24
    428a:	21 e0       	ldi	r18, 0x01	; 1
    428c:	2a 8b       	std	Y+18, r18	; 0x12
    428e:	b8 01       	movw	r22, r16
    4290:	b2 c0       	rjmp	.+356    	; 0x43f6 <__mulsf3+0x1f0>
    4292:	cd 84       	ldd	r12, Y+13	; 0x0d
    4294:	de 84       	ldd	r13, Y+14	; 0x0e
    4296:	ef 84       	ldd	r14, Y+15	; 0x0f
    4298:	f8 88       	ldd	r15, Y+16	; 0x10
    429a:	0d 89       	ldd	r16, Y+21	; 0x15
    429c:	1e 89       	ldd	r17, Y+22	; 0x16
    429e:	2f 89       	ldd	r18, Y+23	; 0x17
    42a0:	38 8d       	ldd	r19, Y+24	; 0x18
    42a2:	88 24       	eor	r8, r8
    42a4:	99 24       	eor	r9, r9
    42a6:	54 01       	movw	r10, r8
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	60 e0       	ldi	r22, 0x00	; 0
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	44 24       	eor	r4, r4
    42b2:	55 24       	eor	r5, r5
    42b4:	32 01       	movw	r6, r4
    42b6:	e0 e0       	ldi	r30, 0x00	; 0
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	c6 01       	movw	r24, r12
    42bc:	81 70       	andi	r24, 0x01	; 1
    42be:	90 70       	andi	r25, 0x00	; 0
    42c0:	89 2b       	or	r24, r25
    42c2:	d9 f0       	breq	.+54     	; 0x42fa <__mulsf3+0xf4>
    42c4:	80 0e       	add	r8, r16
    42c6:	91 1e       	adc	r9, r17
    42c8:	a2 1e       	adc	r10, r18
    42ca:	b3 1e       	adc	r11, r19
    42cc:	db 01       	movw	r26, r22
    42ce:	ca 01       	movw	r24, r20
    42d0:	84 0d       	add	r24, r4
    42d2:	95 1d       	adc	r25, r5
    42d4:	a6 1d       	adc	r26, r6
    42d6:	b7 1d       	adc	r27, r7
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	50 e0       	ldi	r21, 0x00	; 0
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	80 16       	cp	r8, r16
    42e2:	91 06       	cpc	r9, r17
    42e4:	a2 06       	cpc	r10, r18
    42e6:	b3 06       	cpc	r11, r19
    42e8:	20 f4       	brcc	.+8      	; 0x42f2 <__mulsf3+0xec>
    42ea:	41 e0       	ldi	r20, 0x01	; 1
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	60 e0       	ldi	r22, 0x00	; 0
    42f0:	70 e0       	ldi	r23, 0x00	; 0
    42f2:	48 0f       	add	r20, r24
    42f4:	59 1f       	adc	r21, r25
    42f6:	6a 1f       	adc	r22, r26
    42f8:	7b 1f       	adc	r23, r27
    42fa:	44 0c       	add	r4, r4
    42fc:	55 1c       	adc	r5, r5
    42fe:	66 1c       	adc	r6, r6
    4300:	77 1c       	adc	r7, r7
    4302:	37 ff       	sbrs	r19, 7
    4304:	08 c0       	rjmp	.+16     	; 0x4316 <__mulsf3+0x110>
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	a0 e0       	ldi	r26, 0x00	; 0
    430c:	b0 e0       	ldi	r27, 0x00	; 0
    430e:	48 2a       	or	r4, r24
    4310:	59 2a       	or	r5, r25
    4312:	6a 2a       	or	r6, r26
    4314:	7b 2a       	or	r7, r27
    4316:	31 96       	adiw	r30, 0x01	; 1
    4318:	e0 32       	cpi	r30, 0x20	; 32
    431a:	f1 05       	cpc	r31, r1
    431c:	49 f0       	breq	.+18     	; 0x4330 <__mulsf3+0x12a>
    431e:	00 0f       	add	r16, r16
    4320:	11 1f       	adc	r17, r17
    4322:	22 1f       	adc	r18, r18
    4324:	33 1f       	adc	r19, r19
    4326:	f6 94       	lsr	r15
    4328:	e7 94       	ror	r14
    432a:	d7 94       	ror	r13
    432c:	c7 94       	ror	r12
    432e:	c5 cf       	rjmp	.-118    	; 0x42ba <__mulsf3+0xb4>
    4330:	8b 89       	ldd	r24, Y+19	; 0x13
    4332:	9c 89       	ldd	r25, Y+20	; 0x14
    4334:	2b 85       	ldd	r18, Y+11	; 0x0b
    4336:	3c 85       	ldd	r19, Y+12	; 0x0c
    4338:	82 0f       	add	r24, r18
    433a:	93 1f       	adc	r25, r19
    433c:	02 96       	adiw	r24, 0x02	; 2
    433e:	9c 8f       	std	Y+28, r25	; 0x1c
    4340:	8b 8f       	std	Y+27, r24	; 0x1b
    4342:	1a 8e       	std	Y+26, r1	; 0x1a
    4344:	9a 85       	ldd	r25, Y+10	; 0x0a
    4346:	8a 89       	ldd	r24, Y+18	; 0x12
    4348:	98 17       	cp	r25, r24
    434a:	11 f0       	breq	.+4      	; 0x4350 <__mulsf3+0x14a>
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	8a 8f       	std	Y+26, r24	; 0x1a
    4350:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4352:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4354:	17 c0       	rjmp	.+46     	; 0x4384 <__mulsf3+0x17e>
    4356:	ca 01       	movw	r24, r20
    4358:	81 70       	andi	r24, 0x01	; 1
    435a:	90 70       	andi	r25, 0x00	; 0
    435c:	89 2b       	or	r24, r25
    435e:	61 f0       	breq	.+24     	; 0x4378 <__mulsf3+0x172>
    4360:	b6 94       	lsr	r11
    4362:	a7 94       	ror	r10
    4364:	97 94       	ror	r9
    4366:	87 94       	ror	r8
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	a0 e0       	ldi	r26, 0x00	; 0
    436e:	b0 e8       	ldi	r27, 0x80	; 128
    4370:	88 2a       	or	r8, r24
    4372:	99 2a       	or	r9, r25
    4374:	aa 2a       	or	r10, r26
    4376:	bb 2a       	or	r11, r27
    4378:	76 95       	lsr	r23
    437a:	67 95       	ror	r22
    437c:	57 95       	ror	r21
    437e:	47 95       	ror	r20
    4380:	2f 5f       	subi	r18, 0xFF	; 255
    4382:	3f 4f       	sbci	r19, 0xFF	; 255
    4384:	77 fd       	sbrc	r23, 7
    4386:	e7 cf       	rjmp	.-50     	; 0x4356 <__mulsf3+0x150>
    4388:	c9 01       	movw	r24, r18
    438a:	0b c0       	rjmp	.+22     	; 0x43a2 <__mulsf3+0x19c>
    438c:	44 0f       	add	r20, r20
    438e:	55 1f       	adc	r21, r21
    4390:	66 1f       	adc	r22, r22
    4392:	77 1f       	adc	r23, r23
    4394:	b7 fc       	sbrc	r11, 7
    4396:	41 60       	ori	r20, 0x01	; 1
    4398:	88 0c       	add	r8, r8
    439a:	99 1c       	adc	r9, r9
    439c:	aa 1c       	adc	r10, r10
    439e:	bb 1c       	adc	r11, r11
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	40 30       	cpi	r20, 0x00	; 0
    43a4:	a0 e0       	ldi	r26, 0x00	; 0
    43a6:	5a 07       	cpc	r21, r26
    43a8:	a0 e0       	ldi	r26, 0x00	; 0
    43aa:	6a 07       	cpc	r22, r26
    43ac:	a0 e4       	ldi	r26, 0x40	; 64
    43ae:	7a 07       	cpc	r23, r26
    43b0:	68 f3       	brcs	.-38     	; 0x438c <__mulsf3+0x186>
    43b2:	9c 8f       	std	Y+28, r25	; 0x1c
    43b4:	8b 8f       	std	Y+27, r24	; 0x1b
    43b6:	db 01       	movw	r26, r22
    43b8:	ca 01       	movw	r24, r20
    43ba:	8f 77       	andi	r24, 0x7F	; 127
    43bc:	90 70       	andi	r25, 0x00	; 0
    43be:	a0 70       	andi	r26, 0x00	; 0
    43c0:	b0 70       	andi	r27, 0x00	; 0
    43c2:	80 34       	cpi	r24, 0x40	; 64
    43c4:	91 05       	cpc	r25, r1
    43c6:	a1 05       	cpc	r26, r1
    43c8:	b1 05       	cpc	r27, r1
    43ca:	61 f4       	brne	.+24     	; 0x43e4 <__mulsf3+0x1de>
    43cc:	47 fd       	sbrc	r20, 7
    43ce:	0a c0       	rjmp	.+20     	; 0x43e4 <__mulsf3+0x1de>
    43d0:	81 14       	cp	r8, r1
    43d2:	91 04       	cpc	r9, r1
    43d4:	a1 04       	cpc	r10, r1
    43d6:	b1 04       	cpc	r11, r1
    43d8:	29 f0       	breq	.+10     	; 0x43e4 <__mulsf3+0x1de>
    43da:	40 5c       	subi	r20, 0xC0	; 192
    43dc:	5f 4f       	sbci	r21, 0xFF	; 255
    43de:	6f 4f       	sbci	r22, 0xFF	; 255
    43e0:	7f 4f       	sbci	r23, 0xFF	; 255
    43e2:	40 78       	andi	r20, 0x80	; 128
    43e4:	4d 8f       	std	Y+29, r20	; 0x1d
    43e6:	5e 8f       	std	Y+30, r21	; 0x1e
    43e8:	6f 8f       	std	Y+31, r22	; 0x1f
    43ea:	78 a3       	std	Y+32, r23	; 0x20
    43ec:	83 e0       	ldi	r24, 0x03	; 3
    43ee:	89 8f       	std	Y+25, r24	; 0x19
    43f0:	be 01       	movw	r22, r28
    43f2:	67 5e       	subi	r22, 0xE7	; 231
    43f4:	7f 4f       	sbci	r23, 0xFF	; 255
    43f6:	cb 01       	movw	r24, r22
    43f8:	0e 94 00 23 	call	0x4600	; 0x4600 <__pack_f>
    43fc:	e0 e1       	ldi	r30, 0x10	; 16
    43fe:	a0 96       	adiw	r28, 0x20	; 32
    4400:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__epilogue_restores__+0x4>

00004404 <__floatsisf>:
    4404:	a8 e0       	ldi	r26, 0x08	; 8
    4406:	b0 e0       	ldi	r27, 0x00	; 0
    4408:	e8 e0       	ldi	r30, 0x08	; 8
    440a:	f2 e2       	ldi	r31, 0x22	; 34
    440c:	0c 94 9f 24 	jmp	0x493e	; 0x493e <__prologue_saves__+0x12>
    4410:	9b 01       	movw	r18, r22
    4412:	ac 01       	movw	r20, r24
    4414:	83 e0       	ldi	r24, 0x03	; 3
    4416:	89 83       	std	Y+1, r24	; 0x01
    4418:	da 01       	movw	r26, r20
    441a:	c9 01       	movw	r24, r18
    441c:	88 27       	eor	r24, r24
    441e:	b7 fd       	sbrc	r27, 7
    4420:	83 95       	inc	r24
    4422:	99 27       	eor	r25, r25
    4424:	aa 27       	eor	r26, r26
    4426:	bb 27       	eor	r27, r27
    4428:	b8 2e       	mov	r11, r24
    442a:	21 15       	cp	r18, r1
    442c:	31 05       	cpc	r19, r1
    442e:	41 05       	cpc	r20, r1
    4430:	51 05       	cpc	r21, r1
    4432:	19 f4       	brne	.+6      	; 0x443a <__floatsisf+0x36>
    4434:	82 e0       	ldi	r24, 0x02	; 2
    4436:	89 83       	std	Y+1, r24	; 0x01
    4438:	3a c0       	rjmp	.+116    	; 0x44ae <__floatsisf+0xaa>
    443a:	88 23       	and	r24, r24
    443c:	a9 f0       	breq	.+42     	; 0x4468 <__floatsisf+0x64>
    443e:	20 30       	cpi	r18, 0x00	; 0
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	38 07       	cpc	r19, r24
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	48 07       	cpc	r20, r24
    4448:	80 e8       	ldi	r24, 0x80	; 128
    444a:	58 07       	cpc	r21, r24
    444c:	29 f4       	brne	.+10     	; 0x4458 <__floatsisf+0x54>
    444e:	60 e0       	ldi	r22, 0x00	; 0
    4450:	70 e0       	ldi	r23, 0x00	; 0
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	9f ec       	ldi	r25, 0xCF	; 207
    4456:	30 c0       	rjmp	.+96     	; 0x44b8 <__floatsisf+0xb4>
    4458:	ee 24       	eor	r14, r14
    445a:	ff 24       	eor	r15, r15
    445c:	87 01       	movw	r16, r14
    445e:	e2 1a       	sub	r14, r18
    4460:	f3 0a       	sbc	r15, r19
    4462:	04 0b       	sbc	r16, r20
    4464:	15 0b       	sbc	r17, r21
    4466:	02 c0       	rjmp	.+4      	; 0x446c <__floatsisf+0x68>
    4468:	79 01       	movw	r14, r18
    446a:	8a 01       	movw	r16, r20
    446c:	8e e1       	ldi	r24, 0x1E	; 30
    446e:	c8 2e       	mov	r12, r24
    4470:	d1 2c       	mov	r13, r1
    4472:	dc 82       	std	Y+4, r13	; 0x04
    4474:	cb 82       	std	Y+3, r12	; 0x03
    4476:	ed 82       	std	Y+5, r14	; 0x05
    4478:	fe 82       	std	Y+6, r15	; 0x06
    447a:	0f 83       	std	Y+7, r16	; 0x07
    447c:	18 87       	std	Y+8, r17	; 0x08
    447e:	c8 01       	movw	r24, r16
    4480:	b7 01       	movw	r22, r14
    4482:	0e 94 b3 22 	call	0x4566	; 0x4566 <__clzsi2>
    4486:	01 97       	sbiw	r24, 0x01	; 1
    4488:	18 16       	cp	r1, r24
    448a:	19 06       	cpc	r1, r25
    448c:	84 f4       	brge	.+32     	; 0x44ae <__floatsisf+0xaa>
    448e:	08 2e       	mov	r0, r24
    4490:	04 c0       	rjmp	.+8      	; 0x449a <__floatsisf+0x96>
    4492:	ee 0c       	add	r14, r14
    4494:	ff 1c       	adc	r15, r15
    4496:	00 1f       	adc	r16, r16
    4498:	11 1f       	adc	r17, r17
    449a:	0a 94       	dec	r0
    449c:	d2 f7       	brpl	.-12     	; 0x4492 <__floatsisf+0x8e>
    449e:	ed 82       	std	Y+5, r14	; 0x05
    44a0:	fe 82       	std	Y+6, r15	; 0x06
    44a2:	0f 83       	std	Y+7, r16	; 0x07
    44a4:	18 87       	std	Y+8, r17	; 0x08
    44a6:	c8 1a       	sub	r12, r24
    44a8:	d9 0a       	sbc	r13, r25
    44aa:	dc 82       	std	Y+4, r13	; 0x04
    44ac:	cb 82       	std	Y+3, r12	; 0x03
    44ae:	ba 82       	std	Y+2, r11	; 0x02
    44b0:	ce 01       	movw	r24, r28
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	0e 94 00 23 	call	0x4600	; 0x4600 <__pack_f>
    44b8:	e9 e0       	ldi	r30, 0x09	; 9
    44ba:	28 96       	adiw	r28, 0x08	; 8
    44bc:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <__epilogue_restores__+0x12>

000044c0 <__fixsfsi>:
    44c0:	ac e0       	ldi	r26, 0x0C	; 12
    44c2:	b0 e0       	ldi	r27, 0x00	; 0
    44c4:	e6 e6       	ldi	r30, 0x66	; 102
    44c6:	f2 e2       	ldi	r31, 0x22	; 34
    44c8:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__prologue_saves__+0x20>
    44cc:	69 83       	std	Y+1, r22	; 0x01
    44ce:	7a 83       	std	Y+2, r23	; 0x02
    44d0:	8b 83       	std	Y+3, r24	; 0x03
    44d2:	9c 83       	std	Y+4, r25	; 0x04
    44d4:	be 01       	movw	r22, r28
    44d6:	6b 5f       	subi	r22, 0xFB	; 251
    44d8:	7f 4f       	sbci	r23, 0xFF	; 255
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__unpack_f>
    44e2:	8d 81       	ldd	r24, Y+5	; 0x05
    44e4:	82 30       	cpi	r24, 0x02	; 2
    44e6:	a9 f1       	breq	.+106    	; 0x4552 <__fixsfsi+0x92>
    44e8:	82 30       	cpi	r24, 0x02	; 2
    44ea:	98 f1       	brcs	.+102    	; 0x4552 <__fixsfsi+0x92>
    44ec:	84 30       	cpi	r24, 0x04	; 4
    44ee:	21 f4       	brne	.+8      	; 0x44f8 <__fixsfsi+0x38>
    44f0:	8e 81       	ldd	r24, Y+6	; 0x06
    44f2:	88 23       	and	r24, r24
    44f4:	59 f4       	brne	.+22     	; 0x450c <__fixsfsi+0x4c>
    44f6:	0f c0       	rjmp	.+30     	; 0x4516 <__fixsfsi+0x56>
    44f8:	2f 81       	ldd	r18, Y+7	; 0x07
    44fa:	38 85       	ldd	r19, Y+8	; 0x08
    44fc:	37 fd       	sbrc	r19, 7
    44fe:	29 c0       	rjmp	.+82     	; 0x4552 <__fixsfsi+0x92>
    4500:	6e 81       	ldd	r22, Y+6	; 0x06
    4502:	2f 31       	cpi	r18, 0x1F	; 31
    4504:	31 05       	cpc	r19, r1
    4506:	64 f0       	brlt	.+24     	; 0x4520 <__fixsfsi+0x60>
    4508:	66 23       	and	r22, r22
    450a:	29 f0       	breq	.+10     	; 0x4516 <__fixsfsi+0x56>
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	40 e0       	ldi	r20, 0x00	; 0
    4512:	50 e8       	ldi	r21, 0x80	; 128
    4514:	22 c0       	rjmp	.+68     	; 0x455a <__fixsfsi+0x9a>
    4516:	2f ef       	ldi	r18, 0xFF	; 255
    4518:	3f ef       	ldi	r19, 0xFF	; 255
    451a:	4f ef       	ldi	r20, 0xFF	; 255
    451c:	5f e7       	ldi	r21, 0x7F	; 127
    451e:	1d c0       	rjmp	.+58     	; 0x455a <__fixsfsi+0x9a>
    4520:	8e e1       	ldi	r24, 0x1E	; 30
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	82 1b       	sub	r24, r18
    4526:	93 0b       	sbc	r25, r19
    4528:	29 85       	ldd	r18, Y+9	; 0x09
    452a:	3a 85       	ldd	r19, Y+10	; 0x0a
    452c:	4b 85       	ldd	r20, Y+11	; 0x0b
    452e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4530:	04 c0       	rjmp	.+8      	; 0x453a <__fixsfsi+0x7a>
    4532:	56 95       	lsr	r21
    4534:	47 95       	ror	r20
    4536:	37 95       	ror	r19
    4538:	27 95       	ror	r18
    453a:	8a 95       	dec	r24
    453c:	d2 f7       	brpl	.-12     	; 0x4532 <__fixsfsi+0x72>
    453e:	66 23       	and	r22, r22
    4540:	61 f0       	breq	.+24     	; 0x455a <__fixsfsi+0x9a>
    4542:	50 95       	com	r21
    4544:	40 95       	com	r20
    4546:	30 95       	com	r19
    4548:	21 95       	neg	r18
    454a:	3f 4f       	sbci	r19, 0xFF	; 255
    454c:	4f 4f       	sbci	r20, 0xFF	; 255
    454e:	5f 4f       	sbci	r21, 0xFF	; 255
    4550:	04 c0       	rjmp	.+8      	; 0x455a <__fixsfsi+0x9a>
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	40 e0       	ldi	r20, 0x00	; 0
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	ca 01       	movw	r24, r20
    455c:	b9 01       	movw	r22, r18
    455e:	e2 e0       	ldi	r30, 0x02	; 2
    4560:	2c 96       	adiw	r28, 0x0c	; 12
    4562:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__epilogue_restores__+0x20>

00004566 <__clzsi2>:
    4566:	ef 92       	push	r14
    4568:	ff 92       	push	r15
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	9b 01       	movw	r18, r22
    4570:	ac 01       	movw	r20, r24
    4572:	20 30       	cpi	r18, 0x00	; 0
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	38 07       	cpc	r19, r24
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	48 07       	cpc	r20, r24
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	58 07       	cpc	r21, r24
    4580:	80 f4       	brcc	.+32     	; 0x45a2 <__clzsi2+0x3c>
    4582:	2f 3f       	cpi	r18, 0xFF	; 255
    4584:	31 05       	cpc	r19, r1
    4586:	41 05       	cpc	r20, r1
    4588:	51 05       	cpc	r21, r1
    458a:	09 f0       	breq	.+2      	; 0x458e <__clzsi2+0x28>
    458c:	20 f4       	brcc	.+8      	; 0x4596 <__clzsi2+0x30>
    458e:	ee 24       	eor	r14, r14
    4590:	ff 24       	eor	r15, r15
    4592:	87 01       	movw	r16, r14
    4594:	19 c0       	rjmp	.+50     	; 0x45c8 <__clzsi2+0x62>
    4596:	68 e0       	ldi	r22, 0x08	; 8
    4598:	e6 2e       	mov	r14, r22
    459a:	f1 2c       	mov	r15, r1
    459c:	01 2d       	mov	r16, r1
    459e:	11 2d       	mov	r17, r1
    45a0:	13 c0       	rjmp	.+38     	; 0x45c8 <__clzsi2+0x62>
    45a2:	20 30       	cpi	r18, 0x00	; 0
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	38 07       	cpc	r19, r24
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	48 07       	cpc	r20, r24
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	58 07       	cpc	r21, r24
    45b0:	30 f4       	brcc	.+12     	; 0x45be <__clzsi2+0x58>
    45b2:	90 e1       	ldi	r25, 0x10	; 16
    45b4:	e9 2e       	mov	r14, r25
    45b6:	f1 2c       	mov	r15, r1
    45b8:	01 2d       	mov	r16, r1
    45ba:	11 2d       	mov	r17, r1
    45bc:	05 c0       	rjmp	.+10     	; 0x45c8 <__clzsi2+0x62>
    45be:	88 e1       	ldi	r24, 0x18	; 24
    45c0:	e8 2e       	mov	r14, r24
    45c2:	f1 2c       	mov	r15, r1
    45c4:	01 2d       	mov	r16, r1
    45c6:	11 2d       	mov	r17, r1
    45c8:	80 e2       	ldi	r24, 0x20	; 32
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	a0 e0       	ldi	r26, 0x00	; 0
    45ce:	b0 e0       	ldi	r27, 0x00	; 0
    45d0:	8e 19       	sub	r24, r14
    45d2:	9f 09       	sbc	r25, r15
    45d4:	a0 0b       	sbc	r26, r16
    45d6:	b1 0b       	sbc	r27, r17
    45d8:	04 c0       	rjmp	.+8      	; 0x45e2 <__clzsi2+0x7c>
    45da:	56 95       	lsr	r21
    45dc:	47 95       	ror	r20
    45de:	37 95       	ror	r19
    45e0:	27 95       	ror	r18
    45e2:	ea 94       	dec	r14
    45e4:	d2 f7       	brpl	.-12     	; 0x45da <__clzsi2+0x74>
    45e6:	f9 01       	movw	r30, r18
    45e8:	e1 5e       	subi	r30, 0xE1	; 225
    45ea:	fd 4f       	sbci	r31, 0xFD	; 253
    45ec:	20 81       	ld	r18, Z
    45ee:	82 1b       	sub	r24, r18
    45f0:	91 09       	sbc	r25, r1
    45f2:	a1 09       	sbc	r26, r1
    45f4:	b1 09       	sbc	r27, r1
    45f6:	1f 91       	pop	r17
    45f8:	0f 91       	pop	r16
    45fa:	ff 90       	pop	r15
    45fc:	ef 90       	pop	r14
    45fe:	08 95       	ret

00004600 <__pack_f>:
    4600:	9f 92       	push	r9
    4602:	af 92       	push	r10
    4604:	bf 92       	push	r11
    4606:	cf 92       	push	r12
    4608:	df 92       	push	r13
    460a:	ef 92       	push	r14
    460c:	ff 92       	push	r15
    460e:	0f 93       	push	r16
    4610:	1f 93       	push	r17
    4612:	ee 24       	eor	r14, r14
    4614:	ff 24       	eor	r15, r15
    4616:	87 01       	movw	r16, r14
    4618:	fc 01       	movw	r30, r24
    461a:	24 81       	ldd	r18, Z+4	; 0x04
    461c:	35 81       	ldd	r19, Z+5	; 0x05
    461e:	46 81       	ldd	r20, Z+6	; 0x06
    4620:	57 81       	ldd	r21, Z+7	; 0x07
    4622:	91 80       	ldd	r9, Z+1	; 0x01
    4624:	80 81       	ld	r24, Z
    4626:	82 30       	cpi	r24, 0x02	; 2
    4628:	10 f4       	brcc	.+4      	; 0x462e <__pack_f+0x2e>
    462a:	40 61       	ori	r20, 0x10	; 16
    462c:	a2 c0       	rjmp	.+324    	; 0x4772 <__pack_f+0x172>
    462e:	84 30       	cpi	r24, 0x04	; 4
    4630:	09 f4       	brne	.+2      	; 0x4634 <__pack_f+0x34>
    4632:	9b c0       	rjmp	.+310    	; 0x476a <__pack_f+0x16a>
    4634:	82 30       	cpi	r24, 0x02	; 2
    4636:	29 f4       	brne	.+10     	; 0x4642 <__pack_f+0x42>
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e0       	ldi	r20, 0x00	; 0
    463e:	50 e0       	ldi	r21, 0x00	; 0
    4640:	05 c0       	rjmp	.+10     	; 0x464c <__pack_f+0x4c>
    4642:	21 15       	cp	r18, r1
    4644:	31 05       	cpc	r19, r1
    4646:	41 05       	cpc	r20, r1
    4648:	51 05       	cpc	r21, r1
    464a:	19 f4       	brne	.+6      	; 0x4652 <__pack_f+0x52>
    464c:	e0 e0       	ldi	r30, 0x00	; 0
    464e:	f0 e0       	ldi	r31, 0x00	; 0
    4650:	92 c0       	rjmp	.+292    	; 0x4776 <__pack_f+0x176>
    4652:	82 81       	ldd	r24, Z+2	; 0x02
    4654:	93 81       	ldd	r25, Z+3	; 0x03
    4656:	6f ef       	ldi	r22, 0xFF	; 255
    4658:	82 38       	cpi	r24, 0x82	; 130
    465a:	96 07       	cpc	r25, r22
    465c:	0c f0       	brlt	.+2      	; 0x4660 <__pack_f+0x60>
    465e:	5a c0       	rjmp	.+180    	; 0x4714 <__pack_f+0x114>
    4660:	62 e8       	ldi	r22, 0x82	; 130
    4662:	7f ef       	ldi	r23, 0xFF	; 255
    4664:	68 1b       	sub	r22, r24
    4666:	79 0b       	sbc	r23, r25
    4668:	6a 31       	cpi	r22, 0x1A	; 26
    466a:	71 05       	cpc	r23, r1
    466c:	2c f0       	brlt	.+10     	; 0x4678 <__pack_f+0x78>
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e0       	ldi	r20, 0x00	; 0
    4674:	50 e0       	ldi	r21, 0x00	; 0
    4676:	2a c0       	rjmp	.+84     	; 0x46cc <__pack_f+0xcc>
    4678:	aa 24       	eor	r10, r10
    467a:	bb 24       	eor	r11, r11
    467c:	65 01       	movw	r12, r10
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	a0 e0       	ldi	r26, 0x00	; 0
    4684:	b0 e0       	ldi	r27, 0x00	; 0
    4686:	06 2e       	mov	r0, r22
    4688:	04 c0       	rjmp	.+8      	; 0x4692 <__pack_f+0x92>
    468a:	88 0f       	add	r24, r24
    468c:	99 1f       	adc	r25, r25
    468e:	aa 1f       	adc	r26, r26
    4690:	bb 1f       	adc	r27, r27
    4692:	0a 94       	dec	r0
    4694:	d2 f7       	brpl	.-12     	; 0x468a <__pack_f+0x8a>
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	a1 09       	sbc	r26, r1
    469a:	b1 09       	sbc	r27, r1
    469c:	82 23       	and	r24, r18
    469e:	93 23       	and	r25, r19
    46a0:	a4 23       	and	r26, r20
    46a2:	b5 23       	and	r27, r21
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	a1 05       	cpc	r26, r1
    46a8:	b1 05       	cpc	r27, r1
    46aa:	29 f0       	breq	.+10     	; 0x46b6 <__pack_f+0xb6>
    46ac:	71 e0       	ldi	r23, 0x01	; 1
    46ae:	a7 2e       	mov	r10, r23
    46b0:	b1 2c       	mov	r11, r1
    46b2:	c1 2c       	mov	r12, r1
    46b4:	d1 2c       	mov	r13, r1
    46b6:	04 c0       	rjmp	.+8      	; 0x46c0 <__pack_f+0xc0>
    46b8:	56 95       	lsr	r21
    46ba:	47 95       	ror	r20
    46bc:	37 95       	ror	r19
    46be:	27 95       	ror	r18
    46c0:	6a 95       	dec	r22
    46c2:	d2 f7       	brpl	.-12     	; 0x46b8 <__pack_f+0xb8>
    46c4:	2a 29       	or	r18, r10
    46c6:	3b 29       	or	r19, r11
    46c8:	4c 29       	or	r20, r12
    46ca:	5d 29       	or	r21, r13
    46cc:	da 01       	movw	r26, r20
    46ce:	c9 01       	movw	r24, r18
    46d0:	8f 77       	andi	r24, 0x7F	; 127
    46d2:	90 70       	andi	r25, 0x00	; 0
    46d4:	a0 70       	andi	r26, 0x00	; 0
    46d6:	b0 70       	andi	r27, 0x00	; 0
    46d8:	80 34       	cpi	r24, 0x40	; 64
    46da:	91 05       	cpc	r25, r1
    46dc:	a1 05       	cpc	r26, r1
    46de:	b1 05       	cpc	r27, r1
    46e0:	39 f4       	brne	.+14     	; 0x46f0 <__pack_f+0xf0>
    46e2:	27 ff       	sbrs	r18, 7
    46e4:	09 c0       	rjmp	.+18     	; 0x46f8 <__pack_f+0xf8>
    46e6:	20 5c       	subi	r18, 0xC0	; 192
    46e8:	3f 4f       	sbci	r19, 0xFF	; 255
    46ea:	4f 4f       	sbci	r20, 0xFF	; 255
    46ec:	5f 4f       	sbci	r21, 0xFF	; 255
    46ee:	04 c0       	rjmp	.+8      	; 0x46f8 <__pack_f+0xf8>
    46f0:	21 5c       	subi	r18, 0xC1	; 193
    46f2:	3f 4f       	sbci	r19, 0xFF	; 255
    46f4:	4f 4f       	sbci	r20, 0xFF	; 255
    46f6:	5f 4f       	sbci	r21, 0xFF	; 255
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	20 30       	cpi	r18, 0x00	; 0
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	36 07       	cpc	r19, r22
    4702:	60 e0       	ldi	r22, 0x00	; 0
    4704:	46 07       	cpc	r20, r22
    4706:	60 e4       	ldi	r22, 0x40	; 64
    4708:	56 07       	cpc	r21, r22
    470a:	10 f0       	brcs	.+4      	; 0x4710 <__pack_f+0x110>
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	fc 01       	movw	r30, r24
    4712:	23 c0       	rjmp	.+70     	; 0x475a <__pack_f+0x15a>
    4714:	80 38       	cpi	r24, 0x80	; 128
    4716:	91 05       	cpc	r25, r1
    4718:	44 f5       	brge	.+80     	; 0x476a <__pack_f+0x16a>
    471a:	fc 01       	movw	r30, r24
    471c:	e1 58       	subi	r30, 0x81	; 129
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	da 01       	movw	r26, r20
    4722:	c9 01       	movw	r24, r18
    4724:	8f 77       	andi	r24, 0x7F	; 127
    4726:	90 70       	andi	r25, 0x00	; 0
    4728:	a0 70       	andi	r26, 0x00	; 0
    472a:	b0 70       	andi	r27, 0x00	; 0
    472c:	80 34       	cpi	r24, 0x40	; 64
    472e:	91 05       	cpc	r25, r1
    4730:	a1 05       	cpc	r26, r1
    4732:	b1 05       	cpc	r27, r1
    4734:	39 f4       	brne	.+14     	; 0x4744 <__pack_f+0x144>
    4736:	27 ff       	sbrs	r18, 7
    4738:	09 c0       	rjmp	.+18     	; 0x474c <__pack_f+0x14c>
    473a:	20 5c       	subi	r18, 0xC0	; 192
    473c:	3f 4f       	sbci	r19, 0xFF	; 255
    473e:	4f 4f       	sbci	r20, 0xFF	; 255
    4740:	5f 4f       	sbci	r21, 0xFF	; 255
    4742:	04 c0       	rjmp	.+8      	; 0x474c <__pack_f+0x14c>
    4744:	21 5c       	subi	r18, 0xC1	; 193
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	4f 4f       	sbci	r20, 0xFF	; 255
    474a:	5f 4f       	sbci	r21, 0xFF	; 255
    474c:	57 ff       	sbrs	r21, 7
    474e:	05 c0       	rjmp	.+10     	; 0x475a <__pack_f+0x15a>
    4750:	56 95       	lsr	r21
    4752:	47 95       	ror	r20
    4754:	37 95       	ror	r19
    4756:	27 95       	ror	r18
    4758:	31 96       	adiw	r30, 0x01	; 1
    475a:	87 e0       	ldi	r24, 0x07	; 7
    475c:	56 95       	lsr	r21
    475e:	47 95       	ror	r20
    4760:	37 95       	ror	r19
    4762:	27 95       	ror	r18
    4764:	8a 95       	dec	r24
    4766:	d1 f7       	brne	.-12     	; 0x475c <__pack_f+0x15c>
    4768:	06 c0       	rjmp	.+12     	; 0x4776 <__pack_f+0x176>
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	50 e0       	ldi	r21, 0x00	; 0
    4772:	ef ef       	ldi	r30, 0xFF	; 255
    4774:	f0 e0       	ldi	r31, 0x00	; 0
    4776:	e2 2e       	mov	r14, r18
    4778:	f3 2e       	mov	r15, r19
    477a:	94 2f       	mov	r25, r20
    477c:	9f 77       	andi	r25, 0x7F	; 127
    477e:	80 2f       	mov	r24, r16
    4780:	80 78       	andi	r24, 0x80	; 128
    4782:	89 2b       	or	r24, r25
    4784:	9e 2f       	mov	r25, r30
    4786:	97 95       	ror	r25
    4788:	99 27       	eor	r25, r25
    478a:	97 95       	ror	r25
    478c:	8f 77       	andi	r24, 0x7F	; 127
    478e:	08 2f       	mov	r16, r24
    4790:	09 2b       	or	r16, r25
    4792:	9e 2f       	mov	r25, r30
    4794:	96 95       	lsr	r25
    4796:	81 2f       	mov	r24, r17
    4798:	80 78       	andi	r24, 0x80	; 128
    479a:	89 2b       	or	r24, r25
    479c:	97 94       	ror	r9
    479e:	99 24       	eor	r9, r9
    47a0:	97 94       	ror	r9
    47a2:	8f 77       	andi	r24, 0x7F	; 127
    47a4:	18 2f       	mov	r17, r24
    47a6:	19 29       	or	r17, r9
    47a8:	c8 01       	movw	r24, r16
    47aa:	b7 01       	movw	r22, r14
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	df 90       	pop	r13
    47b6:	cf 90       	pop	r12
    47b8:	bf 90       	pop	r11
    47ba:	af 90       	pop	r10
    47bc:	9f 90       	pop	r9
    47be:	08 95       	ret

000047c0 <__unpack_f>:
    47c0:	cf 93       	push	r28
    47c2:	df 93       	push	r29
    47c4:	fc 01       	movw	r30, r24
    47c6:	db 01       	movw	r26, r22
    47c8:	20 81       	ld	r18, Z
    47ca:	31 81       	ldd	r19, Z+1	; 0x01
    47cc:	92 81       	ldd	r25, Z+2	; 0x02
    47ce:	49 2f       	mov	r20, r25
    47d0:	4f 77       	andi	r20, 0x7F	; 127
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	99 1f       	adc	r25, r25
    47d6:	99 27       	eor	r25, r25
    47d8:	99 1f       	adc	r25, r25
    47da:	83 81       	ldd	r24, Z+3	; 0x03
    47dc:	e8 2f       	mov	r30, r24
    47de:	ee 0f       	add	r30, r30
    47e0:	e9 2b       	or	r30, r25
    47e2:	6e 2f       	mov	r22, r30
    47e4:	70 e0       	ldi	r23, 0x00	; 0
    47e6:	88 1f       	adc	r24, r24
    47e8:	88 27       	eor	r24, r24
    47ea:	88 1f       	adc	r24, r24
    47ec:	ed 01       	movw	r28, r26
    47ee:	89 83       	std	Y+1, r24	; 0x01
    47f0:	ee 23       	and	r30, r30
    47f2:	71 f5       	brne	.+92     	; 0x4850 <__unpack_f+0x90>
    47f4:	21 15       	cp	r18, r1
    47f6:	31 05       	cpc	r19, r1
    47f8:	41 05       	cpc	r20, r1
    47fa:	51 05       	cpc	r21, r1
    47fc:	11 f4       	brne	.+4      	; 0x4802 <__unpack_f+0x42>
    47fe:	82 e0       	ldi	r24, 0x02	; 2
    4800:	2f c0       	rjmp	.+94     	; 0x4860 <__unpack_f+0xa0>
    4802:	6e 57       	subi	r22, 0x7E	; 126
    4804:	70 40       	sbci	r23, 0x00	; 0
    4806:	fd 01       	movw	r30, r26
    4808:	73 83       	std	Z+3, r23	; 0x03
    480a:	62 83       	std	Z+2, r22	; 0x02
    480c:	67 e0       	ldi	r22, 0x07	; 7
    480e:	22 0f       	add	r18, r18
    4810:	33 1f       	adc	r19, r19
    4812:	44 1f       	adc	r20, r20
    4814:	55 1f       	adc	r21, r21
    4816:	6a 95       	dec	r22
    4818:	d1 f7       	brne	.-12     	; 0x480e <__unpack_f+0x4e>
    481a:	83 e0       	ldi	r24, 0x03	; 3
    481c:	8c 93       	st	X, r24
    481e:	0a c0       	rjmp	.+20     	; 0x4834 <__unpack_f+0x74>
    4820:	22 0f       	add	r18, r18
    4822:	33 1f       	adc	r19, r19
    4824:	44 1f       	adc	r20, r20
    4826:	55 1f       	adc	r21, r21
    4828:	ed 01       	movw	r28, r26
    482a:	8a 81       	ldd	r24, Y+2	; 0x02
    482c:	9b 81       	ldd	r25, Y+3	; 0x03
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	9b 83       	std	Y+3, r25	; 0x03
    4832:	8a 83       	std	Y+2, r24	; 0x02
    4834:	20 30       	cpi	r18, 0x00	; 0
    4836:	e0 e0       	ldi	r30, 0x00	; 0
    4838:	3e 07       	cpc	r19, r30
    483a:	e0 e0       	ldi	r30, 0x00	; 0
    483c:	4e 07       	cpc	r20, r30
    483e:	e0 e4       	ldi	r30, 0x40	; 64
    4840:	5e 07       	cpc	r21, r30
    4842:	70 f3       	brcs	.-36     	; 0x4820 <__unpack_f+0x60>
    4844:	ed 01       	movw	r28, r26
    4846:	2c 83       	std	Y+4, r18	; 0x04
    4848:	3d 83       	std	Y+5, r19	; 0x05
    484a:	4e 83       	std	Y+6, r20	; 0x06
    484c:	5f 83       	std	Y+7, r21	; 0x07
    484e:	25 c0       	rjmp	.+74     	; 0x489a <__unpack_f+0xda>
    4850:	ef 3f       	cpi	r30, 0xFF	; 255
    4852:	79 f4       	brne	.+30     	; 0x4872 <__unpack_f+0xb2>
    4854:	21 15       	cp	r18, r1
    4856:	31 05       	cpc	r19, r1
    4858:	41 05       	cpc	r20, r1
    485a:	51 05       	cpc	r21, r1
    485c:	19 f4       	brne	.+6      	; 0x4864 <__unpack_f+0xa4>
    485e:	84 e0       	ldi	r24, 0x04	; 4
    4860:	8c 93       	st	X, r24
    4862:	1b c0       	rjmp	.+54     	; 0x489a <__unpack_f+0xda>
    4864:	44 ff       	sbrs	r20, 4
    4866:	03 c0       	rjmp	.+6      	; 0x486e <__unpack_f+0xae>
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	8c 93       	st	X, r24
    486c:	11 c0       	rjmp	.+34     	; 0x4890 <__unpack_f+0xd0>
    486e:	1c 92       	st	X, r1
    4870:	0f c0       	rjmp	.+30     	; 0x4890 <__unpack_f+0xd0>
    4872:	6f 57       	subi	r22, 0x7F	; 127
    4874:	70 40       	sbci	r23, 0x00	; 0
    4876:	ed 01       	movw	r28, r26
    4878:	7b 83       	std	Y+3, r23	; 0x03
    487a:	6a 83       	std	Y+2, r22	; 0x02
    487c:	83 e0       	ldi	r24, 0x03	; 3
    487e:	8c 93       	st	X, r24
    4880:	87 e0       	ldi	r24, 0x07	; 7
    4882:	22 0f       	add	r18, r18
    4884:	33 1f       	adc	r19, r19
    4886:	44 1f       	adc	r20, r20
    4888:	55 1f       	adc	r21, r21
    488a:	8a 95       	dec	r24
    488c:	d1 f7       	brne	.-12     	; 0x4882 <__unpack_f+0xc2>
    488e:	50 64       	ori	r21, 0x40	; 64
    4890:	fd 01       	movw	r30, r26
    4892:	24 83       	std	Z+4, r18	; 0x04
    4894:	35 83       	std	Z+5, r19	; 0x05
    4896:	46 83       	std	Z+6, r20	; 0x06
    4898:	57 83       	std	Z+7, r21	; 0x07
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	08 95       	ret

000048a0 <__mulsi3>:
    48a0:	62 9f       	mul	r22, r18
    48a2:	d0 01       	movw	r26, r0
    48a4:	73 9f       	mul	r23, r19
    48a6:	f0 01       	movw	r30, r0
    48a8:	82 9f       	mul	r24, r18
    48aa:	e0 0d       	add	r30, r0
    48ac:	f1 1d       	adc	r31, r1
    48ae:	64 9f       	mul	r22, r20
    48b0:	e0 0d       	add	r30, r0
    48b2:	f1 1d       	adc	r31, r1
    48b4:	92 9f       	mul	r25, r18
    48b6:	f0 0d       	add	r31, r0
    48b8:	83 9f       	mul	r24, r19
    48ba:	f0 0d       	add	r31, r0
    48bc:	74 9f       	mul	r23, r20
    48be:	f0 0d       	add	r31, r0
    48c0:	65 9f       	mul	r22, r21
    48c2:	f0 0d       	add	r31, r0
    48c4:	99 27       	eor	r25, r25
    48c6:	72 9f       	mul	r23, r18
    48c8:	b0 0d       	add	r27, r0
    48ca:	e1 1d       	adc	r30, r1
    48cc:	f9 1f       	adc	r31, r25
    48ce:	63 9f       	mul	r22, r19
    48d0:	b0 0d       	add	r27, r0
    48d2:	e1 1d       	adc	r30, r1
    48d4:	f9 1f       	adc	r31, r25
    48d6:	bd 01       	movw	r22, r26
    48d8:	cf 01       	movw	r24, r30
    48da:	11 24       	eor	r1, r1
    48dc:	08 95       	ret

000048de <__udivmodhi4>:
    48de:	aa 1b       	sub	r26, r26
    48e0:	bb 1b       	sub	r27, r27
    48e2:	51 e1       	ldi	r21, 0x11	; 17
    48e4:	07 c0       	rjmp	.+14     	; 0x48f4 <__udivmodhi4_ep>

000048e6 <__udivmodhi4_loop>:
    48e6:	aa 1f       	adc	r26, r26
    48e8:	bb 1f       	adc	r27, r27
    48ea:	a6 17       	cp	r26, r22
    48ec:	b7 07       	cpc	r27, r23
    48ee:	10 f0       	brcs	.+4      	; 0x48f4 <__udivmodhi4_ep>
    48f0:	a6 1b       	sub	r26, r22
    48f2:	b7 0b       	sbc	r27, r23

000048f4 <__udivmodhi4_ep>:
    48f4:	88 1f       	adc	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	5a 95       	dec	r21
    48fa:	a9 f7       	brne	.-22     	; 0x48e6 <__udivmodhi4_loop>
    48fc:	80 95       	com	r24
    48fe:	90 95       	com	r25
    4900:	bc 01       	movw	r22, r24
    4902:	cd 01       	movw	r24, r26
    4904:	08 95       	ret

00004906 <__divmodhi4>:
    4906:	97 fb       	bst	r25, 7
    4908:	09 2e       	mov	r0, r25
    490a:	07 26       	eor	r0, r23
    490c:	0a d0       	rcall	.+20     	; 0x4922 <__divmodhi4_neg1>
    490e:	77 fd       	sbrc	r23, 7
    4910:	04 d0       	rcall	.+8      	; 0x491a <__divmodhi4_neg2>
    4912:	e5 df       	rcall	.-54     	; 0x48de <__udivmodhi4>
    4914:	06 d0       	rcall	.+12     	; 0x4922 <__divmodhi4_neg1>
    4916:	00 20       	and	r0, r0
    4918:	1a f4       	brpl	.+6      	; 0x4920 <__divmodhi4_exit>

0000491a <__divmodhi4_neg2>:
    491a:	70 95       	com	r23
    491c:	61 95       	neg	r22
    491e:	7f 4f       	sbci	r23, 0xFF	; 255

00004920 <__divmodhi4_exit>:
    4920:	08 95       	ret

00004922 <__divmodhi4_neg1>:
    4922:	f6 f7       	brtc	.-4      	; 0x4920 <__divmodhi4_exit>
    4924:	90 95       	com	r25
    4926:	81 95       	neg	r24
    4928:	9f 4f       	sbci	r25, 0xFF	; 255
    492a:	08 95       	ret

0000492c <__prologue_saves__>:
    492c:	2f 92       	push	r2
    492e:	3f 92       	push	r3
    4930:	4f 92       	push	r4
    4932:	5f 92       	push	r5
    4934:	6f 92       	push	r6
    4936:	7f 92       	push	r7
    4938:	8f 92       	push	r8
    493a:	9f 92       	push	r9
    493c:	af 92       	push	r10
    493e:	bf 92       	push	r11
    4940:	cf 92       	push	r12
    4942:	df 92       	push	r13
    4944:	ef 92       	push	r14
    4946:	ff 92       	push	r15
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    4954:	ca 1b       	sub	r28, r26
    4956:	db 0b       	sbc	r29, r27
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	f8 94       	cli
    495c:	de bf       	out	0x3e, r29	; 62
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	19 94       	eijmp

00004964 <__epilogue_restores__>:
    4964:	2a 88       	ldd	r2, Y+18	; 0x12
    4966:	39 88       	ldd	r3, Y+17	; 0x11
    4968:	48 88       	ldd	r4, Y+16	; 0x10
    496a:	5f 84       	ldd	r5, Y+15	; 0x0f
    496c:	6e 84       	ldd	r6, Y+14	; 0x0e
    496e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4970:	8c 84       	ldd	r8, Y+12	; 0x0c
    4972:	9b 84       	ldd	r9, Y+11	; 0x0b
    4974:	aa 84       	ldd	r10, Y+10	; 0x0a
    4976:	b9 84       	ldd	r11, Y+9	; 0x09
    4978:	c8 84       	ldd	r12, Y+8	; 0x08
    497a:	df 80       	ldd	r13, Y+7	; 0x07
    497c:	ee 80       	ldd	r14, Y+6	; 0x06
    497e:	fd 80       	ldd	r15, Y+5	; 0x05
    4980:	0c 81       	ldd	r16, Y+4	; 0x04
    4982:	1b 81       	ldd	r17, Y+3	; 0x03
    4984:	aa 81       	ldd	r26, Y+2	; 0x02
    4986:	b9 81       	ldd	r27, Y+1	; 0x01
    4988:	ce 0f       	add	r28, r30
    498a:	d1 1d       	adc	r29, r1
    498c:	0f b6       	in	r0, 0x3f	; 63
    498e:	f8 94       	cli
    4990:	de bf       	out	0x3e, r29	; 62
    4992:	0f be       	out	0x3f, r0	; 63
    4994:	cd bf       	out	0x3d, r28	; 61
    4996:	ed 01       	movw	r28, r26
    4998:	08 95       	ret

0000499a <do_rand>:
    499a:	af 92       	push	r10
    499c:	bf 92       	push	r11
    499e:	cf 92       	push	r12
    49a0:	df 92       	push	r13
    49a2:	ef 92       	push	r14
    49a4:	ff 92       	push	r15
    49a6:	0f 93       	push	r16
    49a8:	1f 93       	push	r17
    49aa:	cf 93       	push	r28
    49ac:	df 93       	push	r29
    49ae:	ec 01       	movw	r28, r24
    49b0:	68 81       	ld	r22, Y
    49b2:	79 81       	ldd	r23, Y+1	; 0x01
    49b4:	8a 81       	ldd	r24, Y+2	; 0x02
    49b6:	9b 81       	ldd	r25, Y+3	; 0x03
    49b8:	61 15       	cp	r22, r1
    49ba:	71 05       	cpc	r23, r1
    49bc:	81 05       	cpc	r24, r1
    49be:	91 05       	cpc	r25, r1
    49c0:	21 f4       	brne	.+8      	; 0x49ca <do_rand+0x30>
    49c2:	64 e2       	ldi	r22, 0x24	; 36
    49c4:	79 ed       	ldi	r23, 0xD9	; 217
    49c6:	8b e5       	ldi	r24, 0x5B	; 91
    49c8:	97 e0       	ldi	r25, 0x07	; 7
    49ca:	2d e1       	ldi	r18, 0x1D	; 29
    49cc:	33 ef       	ldi	r19, 0xF3	; 243
    49ce:	41 e0       	ldi	r20, 0x01	; 1
    49d0:	50 e0       	ldi	r21, 0x00	; 0
    49d2:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__divmodsi4>
    49d6:	79 01       	movw	r14, r18
    49d8:	8a 01       	movw	r16, r20
    49da:	27 ea       	ldi	r18, 0xA7	; 167
    49dc:	31 e4       	ldi	r19, 0x41	; 65
    49de:	40 e0       	ldi	r20, 0x00	; 0
    49e0:	50 e0       	ldi	r21, 0x00	; 0
    49e2:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__mulsi3>
    49e6:	5b 01       	movw	r10, r22
    49e8:	6c 01       	movw	r12, r24
    49ea:	c8 01       	movw	r24, r16
    49ec:	b7 01       	movw	r22, r14
    49ee:	2c ee       	ldi	r18, 0xEC	; 236
    49f0:	34 ef       	ldi	r19, 0xF4	; 244
    49f2:	4f ef       	ldi	r20, 0xFF	; 255
    49f4:	5f ef       	ldi	r21, 0xFF	; 255
    49f6:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__mulsi3>
    49fa:	6a 0d       	add	r22, r10
    49fc:	7b 1d       	adc	r23, r11
    49fe:	8c 1d       	adc	r24, r12
    4a00:	9d 1d       	adc	r25, r13
    4a02:	97 ff       	sbrs	r25, 7
    4a04:	04 c0       	rjmp	.+8      	; 0x4a0e <do_rand+0x74>
    4a06:	61 50       	subi	r22, 0x01	; 1
    4a08:	70 40       	sbci	r23, 0x00	; 0
    4a0a:	80 40       	sbci	r24, 0x00	; 0
    4a0c:	90 48       	sbci	r25, 0x80	; 128
    4a0e:	68 83       	st	Y, r22
    4a10:	79 83       	std	Y+1, r23	; 0x01
    4a12:	8a 83       	std	Y+2, r24	; 0x02
    4a14:	9b 83       	std	Y+3, r25	; 0x03
    4a16:	7f 77       	andi	r23, 0x7F	; 127
    4a18:	cb 01       	movw	r24, r22
    4a1a:	df 91       	pop	r29
    4a1c:	cf 91       	pop	r28
    4a1e:	1f 91       	pop	r17
    4a20:	0f 91       	pop	r16
    4a22:	ff 90       	pop	r15
    4a24:	ef 90       	pop	r14
    4a26:	df 90       	pop	r13
    4a28:	cf 90       	pop	r12
    4a2a:	bf 90       	pop	r11
    4a2c:	af 90       	pop	r10
    4a2e:	08 95       	ret

00004a30 <rand_r>:
    4a30:	0e 94 cd 24 	call	0x499a	; 0x499a <do_rand>
    4a34:	08 95       	ret

00004a36 <rand>:
    4a36:	8f e1       	ldi	r24, 0x1F	; 31
    4a38:	93 e0       	ldi	r25, 0x03	; 3
    4a3a:	0e 94 cd 24 	call	0x499a	; 0x499a <do_rand>
    4a3e:	08 95       	ret

00004a40 <srand>:
    4a40:	a0 e0       	ldi	r26, 0x00	; 0
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	80 93 1f 03 	sts	0x031F, r24
    4a48:	90 93 20 03 	sts	0x0320, r25
    4a4c:	a0 93 21 03 	sts	0x0321, r26
    4a50:	b0 93 22 03 	sts	0x0322, r27
    4a54:	08 95       	ret
    4a56:	f5 d0       	rcall	.+490    	; 0x4c42 <__fp_pscA>
    4a58:	58 f0       	brcs	.+22     	; 0x4a70 <srand+0x30>
    4a5a:	80 e8       	ldi	r24, 0x80	; 128
    4a5c:	91 e0       	ldi	r25, 0x01	; 1
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <srand+0x22>
    4a60:	9e ef       	ldi	r25, 0xFE	; 254
    4a62:	f6 d0       	rcall	.+492    	; 0x4c50 <__fp_pscB>
    4a64:	28 f0       	brcs	.+10     	; 0x4a70 <srand+0x30>
    4a66:	40 e8       	ldi	r20, 0x80	; 128
    4a68:	51 e0       	ldi	r21, 0x01	; 1
    4a6a:	59 f4       	brne	.+22     	; 0x4a82 <atan2+0xe>
    4a6c:	5e ef       	ldi	r21, 0xFE	; 254
    4a6e:	09 c0       	rjmp	.+18     	; 0x4a82 <atan2+0xe>
    4a70:	c0 c0       	rjmp	.+384    	; 0x4bf2 <__fp_nan>
    4a72:	28 c1       	rjmp	.+592    	; 0x4cc4 <__fp_zero>

00004a74 <atan2>:
    4a74:	e9 2f       	mov	r30, r25
    4a76:	e0 78       	andi	r30, 0x80	; 128
    4a78:	03 d1       	rcall	.+518    	; 0x4c80 <__fp_split3>
    4a7a:	68 f3       	brcs	.-38     	; 0x4a56 <srand+0x16>
    4a7c:	09 2e       	mov	r0, r25
    4a7e:	05 2a       	or	r0, r21
    4a80:	c1 f3       	breq	.-16     	; 0x4a72 <srand+0x32>
    4a82:	26 17       	cp	r18, r22
    4a84:	37 07       	cpc	r19, r23
    4a86:	48 07       	cpc	r20, r24
    4a88:	59 07       	cpc	r21, r25
    4a8a:	38 f0       	brcs	.+14     	; 0x4a9a <atan2+0x26>
    4a8c:	0e 2e       	mov	r0, r30
    4a8e:	07 f8       	bld	r0, 7
    4a90:	e0 25       	eor	r30, r0
    4a92:	69 f0       	breq	.+26     	; 0x4aae <atan2+0x3a>
    4a94:	e0 25       	eor	r30, r0
    4a96:	e0 64       	ori	r30, 0x40	; 64
    4a98:	0a c0       	rjmp	.+20     	; 0x4aae <atan2+0x3a>
    4a9a:	ef 63       	ori	r30, 0x3F	; 63
    4a9c:	07 f8       	bld	r0, 7
    4a9e:	00 94       	com	r0
    4aa0:	07 fa       	bst	r0, 7
    4aa2:	db 01       	movw	r26, r22
    4aa4:	b9 01       	movw	r22, r18
    4aa6:	9d 01       	movw	r18, r26
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	ca 01       	movw	r24, r20
    4aac:	ad 01       	movw	r20, r26
    4aae:	ef 93       	push	r30
    4ab0:	41 d0       	rcall	.+130    	; 0x4b34 <__divsf3_pse>
    4ab2:	d5 d0       	rcall	.+426    	; 0x4c5e <__fp_round>
    4ab4:	0a d0       	rcall	.+20     	; 0x4aca <atan>
    4ab6:	5f 91       	pop	r21
    4ab8:	55 23       	and	r21, r21
    4aba:	31 f0       	breq	.+12     	; 0x4ac8 <atan2+0x54>
    4abc:	2b ed       	ldi	r18, 0xDB	; 219
    4abe:	3f e0       	ldi	r19, 0x0F	; 15
    4ac0:	49 e4       	ldi	r20, 0x49	; 73
    4ac2:	50 fd       	sbrc	r21, 0
    4ac4:	49 ec       	ldi	r20, 0xC9	; 201
    4ac6:	77 c1       	rjmp	.+750    	; 0x4db6 <__addsf3>
    4ac8:	08 95       	ret

00004aca <atan>:
    4aca:	df 93       	push	r29
    4acc:	dd 27       	eor	r29, r29
    4ace:	b9 2f       	mov	r27, r25
    4ad0:	bf 77       	andi	r27, 0x7F	; 127
    4ad2:	40 e8       	ldi	r20, 0x80	; 128
    4ad4:	5f e3       	ldi	r21, 0x3F	; 63
    4ad6:	16 16       	cp	r1, r22
    4ad8:	17 06       	cpc	r1, r23
    4ada:	48 07       	cpc	r20, r24
    4adc:	5b 07       	cpc	r21, r27
    4ade:	10 f4       	brcc	.+4      	; 0x4ae4 <atan+0x1a>
    4ae0:	d9 2f       	mov	r29, r25
    4ae2:	f7 d0       	rcall	.+494    	; 0x4cd2 <inverse>
    4ae4:	9f 93       	push	r25
    4ae6:	8f 93       	push	r24
    4ae8:	7f 93       	push	r23
    4aea:	6f 93       	push	r22
    4aec:	5a d1       	rcall	.+692    	; 0x4da2 <square>
    4aee:	ee e4       	ldi	r30, 0x4E	; 78
    4af0:	f1 e0       	ldi	r31, 0x01	; 1
    4af2:	82 d0       	rcall	.+260    	; 0x4bf8 <__fp_powser>
    4af4:	b4 d0       	rcall	.+360    	; 0x4c5e <__fp_round>
    4af6:	2f 91       	pop	r18
    4af8:	3f 91       	pop	r19
    4afa:	4f 91       	pop	r20
    4afc:	5f 91       	pop	r21
    4afe:	fa d0       	rcall	.+500    	; 0x4cf4 <__mulsf3x>
    4b00:	dd 23       	and	r29, r29
    4b02:	49 f0       	breq	.+18     	; 0x4b16 <atan+0x4c>
    4b04:	90 58       	subi	r25, 0x80	; 128
    4b06:	a2 ea       	ldi	r26, 0xA2	; 162
    4b08:	2a ed       	ldi	r18, 0xDA	; 218
    4b0a:	3f e0       	ldi	r19, 0x0F	; 15
    4b0c:	49 ec       	ldi	r20, 0xC9	; 201
    4b0e:	5f e3       	ldi	r21, 0x3F	; 63
    4b10:	d0 78       	andi	r29, 0x80	; 128
    4b12:	5d 27       	eor	r21, r29
    4b14:	61 d1       	rcall	.+706    	; 0x4dd8 <__addsf3x>
    4b16:	df 91       	pop	r29
    4b18:	a2 c0       	rjmp	.+324    	; 0x4c5e <__fp_round>
    4b1a:	9a d0       	rcall	.+308    	; 0x4c50 <__fp_pscB>
    4b1c:	40 f0       	brcs	.+16     	; 0x4b2e <atan+0x64>
    4b1e:	91 d0       	rcall	.+290    	; 0x4c42 <__fp_pscA>
    4b20:	30 f0       	brcs	.+12     	; 0x4b2e <atan+0x64>
    4b22:	21 f4       	brne	.+8      	; 0x4b2c <atan+0x62>
    4b24:	5f 3f       	cpi	r21, 0xFF	; 255
    4b26:	19 f0       	breq	.+6      	; 0x4b2e <atan+0x64>
    4b28:	5e c0       	rjmp	.+188    	; 0x4be6 <__fp_inf>
    4b2a:	51 11       	cpse	r21, r1
    4b2c:	cc c0       	rjmp	.+408    	; 0x4cc6 <__fp_szero>
    4b2e:	61 c0       	rjmp	.+194    	; 0x4bf2 <__fp_nan>

00004b30 <__divsf3x>:
    4b30:	a7 d0       	rcall	.+334    	; 0x4c80 <__fp_split3>
    4b32:	98 f3       	brcs	.-26     	; 0x4b1a <atan+0x50>

00004b34 <__divsf3_pse>:
    4b34:	99 23       	and	r25, r25
    4b36:	c9 f3       	breq	.-14     	; 0x4b2a <atan+0x60>
    4b38:	55 23       	and	r21, r21
    4b3a:	b1 f3       	breq	.-20     	; 0x4b28 <atan+0x5e>
    4b3c:	95 1b       	sub	r25, r21
    4b3e:	55 0b       	sbc	r21, r21
    4b40:	bb 27       	eor	r27, r27
    4b42:	aa 27       	eor	r26, r26
    4b44:	62 17       	cp	r22, r18
    4b46:	73 07       	cpc	r23, r19
    4b48:	84 07       	cpc	r24, r20
    4b4a:	38 f0       	brcs	.+14     	; 0x4b5a <__divsf3_pse+0x26>
    4b4c:	9f 5f       	subi	r25, 0xFF	; 255
    4b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b50:	22 0f       	add	r18, r18
    4b52:	33 1f       	adc	r19, r19
    4b54:	44 1f       	adc	r20, r20
    4b56:	aa 1f       	adc	r26, r26
    4b58:	a9 f3       	breq	.-22     	; 0x4b44 <__divsf3_pse+0x10>
    4b5a:	33 d0       	rcall	.+102    	; 0x4bc2 <__divsf3_pse+0x8e>
    4b5c:	0e 2e       	mov	r0, r30
    4b5e:	3a f0       	brmi	.+14     	; 0x4b6e <__divsf3_pse+0x3a>
    4b60:	e0 e8       	ldi	r30, 0x80	; 128
    4b62:	30 d0       	rcall	.+96     	; 0x4bc4 <__divsf3_pse+0x90>
    4b64:	91 50       	subi	r25, 0x01	; 1
    4b66:	50 40       	sbci	r21, 0x00	; 0
    4b68:	e6 95       	lsr	r30
    4b6a:	00 1c       	adc	r0, r0
    4b6c:	ca f7       	brpl	.-14     	; 0x4b60 <__divsf3_pse+0x2c>
    4b6e:	29 d0       	rcall	.+82     	; 0x4bc2 <__divsf3_pse+0x8e>
    4b70:	fe 2f       	mov	r31, r30
    4b72:	27 d0       	rcall	.+78     	; 0x4bc2 <__divsf3_pse+0x8e>
    4b74:	66 0f       	add	r22, r22
    4b76:	77 1f       	adc	r23, r23
    4b78:	88 1f       	adc	r24, r24
    4b7a:	bb 1f       	adc	r27, r27
    4b7c:	26 17       	cp	r18, r22
    4b7e:	37 07       	cpc	r19, r23
    4b80:	48 07       	cpc	r20, r24
    4b82:	ab 07       	cpc	r26, r27
    4b84:	b0 e8       	ldi	r27, 0x80	; 128
    4b86:	09 f0       	breq	.+2      	; 0x4b8a <__divsf3_pse+0x56>
    4b88:	bb 0b       	sbc	r27, r27
    4b8a:	80 2d       	mov	r24, r0
    4b8c:	bf 01       	movw	r22, r30
    4b8e:	ff 27       	eor	r31, r31
    4b90:	93 58       	subi	r25, 0x83	; 131
    4b92:	5f 4f       	sbci	r21, 0xFF	; 255
    4b94:	2a f0       	brmi	.+10     	; 0x4ba0 <__divsf3_pse+0x6c>
    4b96:	9e 3f       	cpi	r25, 0xFE	; 254
    4b98:	51 05       	cpc	r21, r1
    4b9a:	68 f0       	brcs	.+26     	; 0x4bb6 <__divsf3_pse+0x82>
    4b9c:	24 c0       	rjmp	.+72     	; 0x4be6 <__fp_inf>
    4b9e:	93 c0       	rjmp	.+294    	; 0x4cc6 <__fp_szero>
    4ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ba2:	ec f3       	brlt	.-6      	; 0x4b9e <__divsf3_pse+0x6a>
    4ba4:	98 3e       	cpi	r25, 0xE8	; 232
    4ba6:	dc f3       	brlt	.-10     	; 0x4b9e <__divsf3_pse+0x6a>
    4ba8:	86 95       	lsr	r24
    4baa:	77 95       	ror	r23
    4bac:	67 95       	ror	r22
    4bae:	b7 95       	ror	r27
    4bb0:	f7 95       	ror	r31
    4bb2:	9f 5f       	subi	r25, 0xFF	; 255
    4bb4:	c9 f7       	brne	.-14     	; 0x4ba8 <__divsf3_pse+0x74>
    4bb6:	88 0f       	add	r24, r24
    4bb8:	91 1d       	adc	r25, r1
    4bba:	96 95       	lsr	r25
    4bbc:	87 95       	ror	r24
    4bbe:	97 f9       	bld	r25, 7
    4bc0:	08 95       	ret
    4bc2:	e1 e0       	ldi	r30, 0x01	; 1
    4bc4:	66 0f       	add	r22, r22
    4bc6:	77 1f       	adc	r23, r23
    4bc8:	88 1f       	adc	r24, r24
    4bca:	bb 1f       	adc	r27, r27
    4bcc:	62 17       	cp	r22, r18
    4bce:	73 07       	cpc	r23, r19
    4bd0:	84 07       	cpc	r24, r20
    4bd2:	ba 07       	cpc	r27, r26
    4bd4:	20 f0       	brcs	.+8      	; 0x4bde <__divsf3_pse+0xaa>
    4bd6:	62 1b       	sub	r22, r18
    4bd8:	73 0b       	sbc	r23, r19
    4bda:	84 0b       	sbc	r24, r20
    4bdc:	ba 0b       	sbc	r27, r26
    4bde:	ee 1f       	adc	r30, r30
    4be0:	88 f7       	brcc	.-30     	; 0x4bc4 <__divsf3_pse+0x90>
    4be2:	e0 95       	com	r30
    4be4:	08 95       	ret

00004be6 <__fp_inf>:
    4be6:	97 f9       	bld	r25, 7
    4be8:	9f 67       	ori	r25, 0x7F	; 127
    4bea:	80 e8       	ldi	r24, 0x80	; 128
    4bec:	70 e0       	ldi	r23, 0x00	; 0
    4bee:	60 e0       	ldi	r22, 0x00	; 0
    4bf0:	08 95       	ret

00004bf2 <__fp_nan>:
    4bf2:	9f ef       	ldi	r25, 0xFF	; 255
    4bf4:	80 ec       	ldi	r24, 0xC0	; 192
    4bf6:	08 95       	ret

00004bf8 <__fp_powser>:
    4bf8:	df 93       	push	r29
    4bfa:	cf 93       	push	r28
    4bfc:	1f 93       	push	r17
    4bfe:	0f 93       	push	r16
    4c00:	ff 92       	push	r15
    4c02:	ef 92       	push	r14
    4c04:	df 92       	push	r13
    4c06:	7b 01       	movw	r14, r22
    4c08:	8c 01       	movw	r16, r24
    4c0a:	68 94       	set
    4c0c:	05 c0       	rjmp	.+10     	; 0x4c18 <__fp_powser+0x20>
    4c0e:	da 2e       	mov	r13, r26
    4c10:	ef 01       	movw	r28, r30
    4c12:	70 d0       	rcall	.+224    	; 0x4cf4 <__mulsf3x>
    4c14:	fe 01       	movw	r30, r28
    4c16:	e8 94       	clt
    4c18:	a5 91       	lpm	r26, Z+
    4c1a:	25 91       	lpm	r18, Z+
    4c1c:	35 91       	lpm	r19, Z+
    4c1e:	45 91       	lpm	r20, Z+
    4c20:	55 91       	lpm	r21, Z+
    4c22:	ae f3       	brts	.-22     	; 0x4c0e <__fp_powser+0x16>
    4c24:	ef 01       	movw	r28, r30
    4c26:	d8 d0       	rcall	.+432    	; 0x4dd8 <__addsf3x>
    4c28:	fe 01       	movw	r30, r28
    4c2a:	97 01       	movw	r18, r14
    4c2c:	a8 01       	movw	r20, r16
    4c2e:	da 94       	dec	r13
    4c30:	79 f7       	brne	.-34     	; 0x4c10 <__fp_powser+0x18>
    4c32:	df 90       	pop	r13
    4c34:	ef 90       	pop	r14
    4c36:	ff 90       	pop	r15
    4c38:	0f 91       	pop	r16
    4c3a:	1f 91       	pop	r17
    4c3c:	cf 91       	pop	r28
    4c3e:	df 91       	pop	r29
    4c40:	08 95       	ret

00004c42 <__fp_pscA>:
    4c42:	00 24       	eor	r0, r0
    4c44:	0a 94       	dec	r0
    4c46:	16 16       	cp	r1, r22
    4c48:	17 06       	cpc	r1, r23
    4c4a:	18 06       	cpc	r1, r24
    4c4c:	09 06       	cpc	r0, r25
    4c4e:	08 95       	ret

00004c50 <__fp_pscB>:
    4c50:	00 24       	eor	r0, r0
    4c52:	0a 94       	dec	r0
    4c54:	12 16       	cp	r1, r18
    4c56:	13 06       	cpc	r1, r19
    4c58:	14 06       	cpc	r1, r20
    4c5a:	05 06       	cpc	r0, r21
    4c5c:	08 95       	ret

00004c5e <__fp_round>:
    4c5e:	09 2e       	mov	r0, r25
    4c60:	03 94       	inc	r0
    4c62:	00 0c       	add	r0, r0
    4c64:	11 f4       	brne	.+4      	; 0x4c6a <__fp_round+0xc>
    4c66:	88 23       	and	r24, r24
    4c68:	52 f0       	brmi	.+20     	; 0x4c7e <__fp_round+0x20>
    4c6a:	bb 0f       	add	r27, r27
    4c6c:	40 f4       	brcc	.+16     	; 0x4c7e <__fp_round+0x20>
    4c6e:	bf 2b       	or	r27, r31
    4c70:	11 f4       	brne	.+4      	; 0x4c76 <__fp_round+0x18>
    4c72:	60 ff       	sbrs	r22, 0
    4c74:	04 c0       	rjmp	.+8      	; 0x4c7e <__fp_round+0x20>
    4c76:	6f 5f       	subi	r22, 0xFF	; 255
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7e:	08 95       	ret

00004c80 <__fp_split3>:
    4c80:	57 fd       	sbrc	r21, 7
    4c82:	90 58       	subi	r25, 0x80	; 128
    4c84:	44 0f       	add	r20, r20
    4c86:	55 1f       	adc	r21, r21
    4c88:	59 f0       	breq	.+22     	; 0x4ca0 <__fp_splitA+0x10>
    4c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4c8c:	71 f0       	breq	.+28     	; 0x4caa <__fp_splitA+0x1a>
    4c8e:	47 95       	ror	r20

00004c90 <__fp_splitA>:
    4c90:	88 0f       	add	r24, r24
    4c92:	97 fb       	bst	r25, 7
    4c94:	99 1f       	adc	r25, r25
    4c96:	61 f0       	breq	.+24     	; 0x4cb0 <__fp_splitA+0x20>
    4c98:	9f 3f       	cpi	r25, 0xFF	; 255
    4c9a:	79 f0       	breq	.+30     	; 0x4cba <__fp_splitA+0x2a>
    4c9c:	87 95       	ror	r24
    4c9e:	08 95       	ret
    4ca0:	12 16       	cp	r1, r18
    4ca2:	13 06       	cpc	r1, r19
    4ca4:	14 06       	cpc	r1, r20
    4ca6:	55 1f       	adc	r21, r21
    4ca8:	f2 cf       	rjmp	.-28     	; 0x4c8e <__fp_split3+0xe>
    4caa:	46 95       	lsr	r20
    4cac:	f1 df       	rcall	.-30     	; 0x4c90 <__fp_splitA>
    4cae:	08 c0       	rjmp	.+16     	; 0x4cc0 <__fp_splitA+0x30>
    4cb0:	16 16       	cp	r1, r22
    4cb2:	17 06       	cpc	r1, r23
    4cb4:	18 06       	cpc	r1, r24
    4cb6:	99 1f       	adc	r25, r25
    4cb8:	f1 cf       	rjmp	.-30     	; 0x4c9c <__fp_splitA+0xc>
    4cba:	86 95       	lsr	r24
    4cbc:	71 05       	cpc	r23, r1
    4cbe:	61 05       	cpc	r22, r1
    4cc0:	08 94       	sec
    4cc2:	08 95       	ret

00004cc4 <__fp_zero>:
    4cc4:	e8 94       	clt

00004cc6 <__fp_szero>:
    4cc6:	bb 27       	eor	r27, r27
    4cc8:	66 27       	eor	r22, r22
    4cca:	77 27       	eor	r23, r23
    4ccc:	cb 01       	movw	r24, r22
    4cce:	97 f9       	bld	r25, 7
    4cd0:	08 95       	ret

00004cd2 <inverse>:
    4cd2:	9b 01       	movw	r18, r22
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	60 e0       	ldi	r22, 0x00	; 0
    4cd8:	70 e0       	ldi	r23, 0x00	; 0
    4cda:	80 e8       	ldi	r24, 0x80	; 128
    4cdc:	9f e3       	ldi	r25, 0x3F	; 63
    4cde:	cf c0       	rjmp	.+414    	; 0x4e7e <__divsf3>
    4ce0:	b0 df       	rcall	.-160    	; 0x4c42 <__fp_pscA>
    4ce2:	28 f0       	brcs	.+10     	; 0x4cee <inverse+0x1c>
    4ce4:	b5 df       	rcall	.-150    	; 0x4c50 <__fp_pscB>
    4ce6:	18 f0       	brcs	.+6      	; 0x4cee <inverse+0x1c>
    4ce8:	95 23       	and	r25, r21
    4cea:	09 f0       	breq	.+2      	; 0x4cee <inverse+0x1c>
    4cec:	7c cf       	rjmp	.-264    	; 0x4be6 <__fp_inf>
    4cee:	81 cf       	rjmp	.-254    	; 0x4bf2 <__fp_nan>
    4cf0:	11 24       	eor	r1, r1
    4cf2:	e9 cf       	rjmp	.-46     	; 0x4cc6 <__fp_szero>

00004cf4 <__mulsf3x>:
    4cf4:	c5 df       	rcall	.-118    	; 0x4c80 <__fp_split3>
    4cf6:	a0 f3       	brcs	.-24     	; 0x4ce0 <inverse+0xe>

00004cf8 <__mulsf3_pse>:
    4cf8:	95 9f       	mul	r25, r21
    4cfa:	d1 f3       	breq	.-12     	; 0x4cf0 <inverse+0x1e>
    4cfc:	95 0f       	add	r25, r21
    4cfe:	50 e0       	ldi	r21, 0x00	; 0
    4d00:	55 1f       	adc	r21, r21
    4d02:	62 9f       	mul	r22, r18
    4d04:	f0 01       	movw	r30, r0
    4d06:	72 9f       	mul	r23, r18
    4d08:	bb 27       	eor	r27, r27
    4d0a:	f0 0d       	add	r31, r0
    4d0c:	b1 1d       	adc	r27, r1
    4d0e:	63 9f       	mul	r22, r19
    4d10:	aa 27       	eor	r26, r26
    4d12:	f0 0d       	add	r31, r0
    4d14:	b1 1d       	adc	r27, r1
    4d16:	aa 1f       	adc	r26, r26
    4d18:	64 9f       	mul	r22, r20
    4d1a:	66 27       	eor	r22, r22
    4d1c:	b0 0d       	add	r27, r0
    4d1e:	a1 1d       	adc	r26, r1
    4d20:	66 1f       	adc	r22, r22
    4d22:	82 9f       	mul	r24, r18
    4d24:	22 27       	eor	r18, r18
    4d26:	b0 0d       	add	r27, r0
    4d28:	a1 1d       	adc	r26, r1
    4d2a:	62 1f       	adc	r22, r18
    4d2c:	73 9f       	mul	r23, r19
    4d2e:	b0 0d       	add	r27, r0
    4d30:	a1 1d       	adc	r26, r1
    4d32:	62 1f       	adc	r22, r18
    4d34:	83 9f       	mul	r24, r19
    4d36:	a0 0d       	add	r26, r0
    4d38:	61 1d       	adc	r22, r1
    4d3a:	22 1f       	adc	r18, r18
    4d3c:	74 9f       	mul	r23, r20
    4d3e:	33 27       	eor	r19, r19
    4d40:	a0 0d       	add	r26, r0
    4d42:	61 1d       	adc	r22, r1
    4d44:	23 1f       	adc	r18, r19
    4d46:	84 9f       	mul	r24, r20
    4d48:	60 0d       	add	r22, r0
    4d4a:	21 1d       	adc	r18, r1
    4d4c:	82 2f       	mov	r24, r18
    4d4e:	76 2f       	mov	r23, r22
    4d50:	6a 2f       	mov	r22, r26
    4d52:	11 24       	eor	r1, r1
    4d54:	9f 57       	subi	r25, 0x7F	; 127
    4d56:	50 40       	sbci	r21, 0x00	; 0
    4d58:	8a f0       	brmi	.+34     	; 0x4d7c <__mulsf3_pse+0x84>
    4d5a:	e1 f0       	breq	.+56     	; 0x4d94 <__mulsf3_pse+0x9c>
    4d5c:	88 23       	and	r24, r24
    4d5e:	4a f0       	brmi	.+18     	; 0x4d72 <__mulsf3_pse+0x7a>
    4d60:	ee 0f       	add	r30, r30
    4d62:	ff 1f       	adc	r31, r31
    4d64:	bb 1f       	adc	r27, r27
    4d66:	66 1f       	adc	r22, r22
    4d68:	77 1f       	adc	r23, r23
    4d6a:	88 1f       	adc	r24, r24
    4d6c:	91 50       	subi	r25, 0x01	; 1
    4d6e:	50 40       	sbci	r21, 0x00	; 0
    4d70:	a9 f7       	brne	.-22     	; 0x4d5c <__mulsf3_pse+0x64>
    4d72:	9e 3f       	cpi	r25, 0xFE	; 254
    4d74:	51 05       	cpc	r21, r1
    4d76:	70 f0       	brcs	.+28     	; 0x4d94 <__mulsf3_pse+0x9c>
    4d78:	36 cf       	rjmp	.-404    	; 0x4be6 <__fp_inf>
    4d7a:	a5 cf       	rjmp	.-182    	; 0x4cc6 <__fp_szero>
    4d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d7e:	ec f3       	brlt	.-6      	; 0x4d7a <__mulsf3_pse+0x82>
    4d80:	98 3e       	cpi	r25, 0xE8	; 232
    4d82:	dc f3       	brlt	.-10     	; 0x4d7a <__mulsf3_pse+0x82>
    4d84:	86 95       	lsr	r24
    4d86:	77 95       	ror	r23
    4d88:	67 95       	ror	r22
    4d8a:	b7 95       	ror	r27
    4d8c:	f7 95       	ror	r31
    4d8e:	e7 95       	ror	r30
    4d90:	9f 5f       	subi	r25, 0xFF	; 255
    4d92:	c1 f7       	brne	.-16     	; 0x4d84 <__mulsf3_pse+0x8c>
    4d94:	fe 2b       	or	r31, r30
    4d96:	88 0f       	add	r24, r24
    4d98:	91 1d       	adc	r25, r1
    4d9a:	96 95       	lsr	r25
    4d9c:	87 95       	ror	r24
    4d9e:	97 f9       	bld	r25, 7
    4da0:	08 95       	ret

00004da2 <square>:
    4da2:	9b 01       	movw	r18, r22
    4da4:	ac 01       	movw	r20, r24
    4da6:	2f ca       	rjmp	.-2978   	; 0x4206 <__mulsf3>

00004da8 <__eerd_word_m2560>:
    4da8:	a8 e1       	ldi	r26, 0x18	; 24
    4daa:	b0 e0       	ldi	r27, 0x00	; 0
    4dac:	42 e0       	ldi	r20, 0x02	; 2
    4dae:	50 e0       	ldi	r21, 0x00	; 0
    4db0:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__eerd_blraw_m2560>

00004db4 <__subsf3>:
    4db4:	50 58       	subi	r21, 0x80	; 128

00004db6 <__addsf3>:
    4db6:	bb 27       	eor	r27, r27
    4db8:	aa 27       	eor	r26, r26
    4dba:	0e d0       	rcall	.+28     	; 0x4dd8 <__addsf3x>
    4dbc:	50 cf       	rjmp	.-352    	; 0x4c5e <__fp_round>
    4dbe:	41 df       	rcall	.-382    	; 0x4c42 <__fp_pscA>
    4dc0:	30 f0       	brcs	.+12     	; 0x4dce <__addsf3+0x18>
    4dc2:	46 df       	rcall	.-372    	; 0x4c50 <__fp_pscB>
    4dc4:	20 f0       	brcs	.+8      	; 0x4dce <__addsf3+0x18>
    4dc6:	31 f4       	brne	.+12     	; 0x4dd4 <__addsf3+0x1e>
    4dc8:	9f 3f       	cpi	r25, 0xFF	; 255
    4dca:	11 f4       	brne	.+4      	; 0x4dd0 <__addsf3+0x1a>
    4dcc:	1e f4       	brtc	.+6      	; 0x4dd4 <__addsf3+0x1e>
    4dce:	11 cf       	rjmp	.-478    	; 0x4bf2 <__fp_nan>
    4dd0:	0e f4       	brtc	.+2      	; 0x4dd4 <__addsf3+0x1e>
    4dd2:	e0 95       	com	r30
    4dd4:	e7 fb       	bst	r30, 7
    4dd6:	07 cf       	rjmp	.-498    	; 0x4be6 <__fp_inf>

00004dd8 <__addsf3x>:
    4dd8:	e9 2f       	mov	r30, r25
    4dda:	52 df       	rcall	.-348    	; 0x4c80 <__fp_split3>
    4ddc:	80 f3       	brcs	.-32     	; 0x4dbe <__addsf3+0x8>
    4dde:	ba 17       	cp	r27, r26
    4de0:	62 07       	cpc	r22, r18
    4de2:	73 07       	cpc	r23, r19
    4de4:	84 07       	cpc	r24, r20
    4de6:	95 07       	cpc	r25, r21
    4de8:	18 f0       	brcs	.+6      	; 0x4df0 <__addsf3x+0x18>
    4dea:	71 f4       	brne	.+28     	; 0x4e08 <__addsf3x+0x30>
    4dec:	9e f5       	brtc	.+102    	; 0x4e54 <__addsf3x+0x7c>
    4dee:	6a cf       	rjmp	.-300    	; 0x4cc4 <__fp_zero>
    4df0:	0e f4       	brtc	.+2      	; 0x4df4 <__addsf3x+0x1c>
    4df2:	e0 95       	com	r30
    4df4:	0b 2e       	mov	r0, r27
    4df6:	ba 2f       	mov	r27, r26
    4df8:	a0 2d       	mov	r26, r0
    4dfa:	0b 01       	movw	r0, r22
    4dfc:	b9 01       	movw	r22, r18
    4dfe:	90 01       	movw	r18, r0
    4e00:	0c 01       	movw	r0, r24
    4e02:	ca 01       	movw	r24, r20
    4e04:	a0 01       	movw	r20, r0
    4e06:	11 24       	eor	r1, r1
    4e08:	ff 27       	eor	r31, r31
    4e0a:	59 1b       	sub	r21, r25
    4e0c:	99 f0       	breq	.+38     	; 0x4e34 <__addsf3x+0x5c>
    4e0e:	59 3f       	cpi	r21, 0xF9	; 249
    4e10:	50 f4       	brcc	.+20     	; 0x4e26 <__addsf3x+0x4e>
    4e12:	50 3e       	cpi	r21, 0xE0	; 224
    4e14:	68 f1       	brcs	.+90     	; 0x4e70 <__addsf3x+0x98>
    4e16:	1a 16       	cp	r1, r26
    4e18:	f0 40       	sbci	r31, 0x00	; 0
    4e1a:	a2 2f       	mov	r26, r18
    4e1c:	23 2f       	mov	r18, r19
    4e1e:	34 2f       	mov	r19, r20
    4e20:	44 27       	eor	r20, r20
    4e22:	58 5f       	subi	r21, 0xF8	; 248
    4e24:	f3 cf       	rjmp	.-26     	; 0x4e0c <__addsf3x+0x34>
    4e26:	46 95       	lsr	r20
    4e28:	37 95       	ror	r19
    4e2a:	27 95       	ror	r18
    4e2c:	a7 95       	ror	r26
    4e2e:	f0 40       	sbci	r31, 0x00	; 0
    4e30:	53 95       	inc	r21
    4e32:	c9 f7       	brne	.-14     	; 0x4e26 <__addsf3x+0x4e>
    4e34:	7e f4       	brtc	.+30     	; 0x4e54 <__addsf3x+0x7c>
    4e36:	1f 16       	cp	r1, r31
    4e38:	ba 0b       	sbc	r27, r26
    4e3a:	62 0b       	sbc	r22, r18
    4e3c:	73 0b       	sbc	r23, r19
    4e3e:	84 0b       	sbc	r24, r20
    4e40:	ba f0       	brmi	.+46     	; 0x4e70 <__addsf3x+0x98>
    4e42:	91 50       	subi	r25, 0x01	; 1
    4e44:	a1 f0       	breq	.+40     	; 0x4e6e <__addsf3x+0x96>
    4e46:	ff 0f       	add	r31, r31
    4e48:	bb 1f       	adc	r27, r27
    4e4a:	66 1f       	adc	r22, r22
    4e4c:	77 1f       	adc	r23, r23
    4e4e:	88 1f       	adc	r24, r24
    4e50:	c2 f7       	brpl	.-16     	; 0x4e42 <__addsf3x+0x6a>
    4e52:	0e c0       	rjmp	.+28     	; 0x4e70 <__addsf3x+0x98>
    4e54:	ba 0f       	add	r27, r26
    4e56:	62 1f       	adc	r22, r18
    4e58:	73 1f       	adc	r23, r19
    4e5a:	84 1f       	adc	r24, r20
    4e5c:	48 f4       	brcc	.+18     	; 0x4e70 <__addsf3x+0x98>
    4e5e:	87 95       	ror	r24
    4e60:	77 95       	ror	r23
    4e62:	67 95       	ror	r22
    4e64:	b7 95       	ror	r27
    4e66:	f7 95       	ror	r31
    4e68:	9e 3f       	cpi	r25, 0xFE	; 254
    4e6a:	08 f0       	brcs	.+2      	; 0x4e6e <__addsf3x+0x96>
    4e6c:	b3 cf       	rjmp	.-154    	; 0x4dd4 <__addsf3+0x1e>
    4e6e:	93 95       	inc	r25
    4e70:	88 0f       	add	r24, r24
    4e72:	08 f0       	brcs	.+2      	; 0x4e76 <__addsf3x+0x9e>
    4e74:	99 27       	eor	r25, r25
    4e76:	ee 0f       	add	r30, r30
    4e78:	97 95       	ror	r25
    4e7a:	87 95       	ror	r24
    4e7c:	08 95       	ret

00004e7e <__divsf3>:
    4e7e:	58 de       	rcall	.-848    	; 0x4b30 <__divsf3x>
    4e80:	ee ce       	rjmp	.-548    	; 0x4c5e <__fp_round>

00004e82 <__eerd_block_m2560>:
    4e82:	dc 01       	movw	r26, r24
    4e84:	cb 01       	movw	r24, r22

00004e86 <__eerd_blraw_m2560>:
    4e86:	fc 01       	movw	r30, r24
    4e88:	f9 99       	sbic	0x1f, 1	; 31
    4e8a:	fe cf       	rjmp	.-4      	; 0x4e88 <__eerd_blraw_m2560+0x2>
    4e8c:	06 c0       	rjmp	.+12     	; 0x4e9a <__eerd_blraw_m2560+0x14>
    4e8e:	f2 bd       	out	0x22, r31	; 34
    4e90:	e1 bd       	out	0x21, r30	; 33
    4e92:	f8 9a       	sbi	0x1f, 0	; 31
    4e94:	31 96       	adiw	r30, 0x01	; 1
    4e96:	00 b4       	in	r0, 0x20	; 32
    4e98:	0d 92       	st	X+, r0
    4e9a:	41 50       	subi	r20, 0x01	; 1
    4e9c:	50 40       	sbci	r21, 0x00	; 0
    4e9e:	b8 f7       	brcc	.-18     	; 0x4e8e <__eerd_blraw_m2560+0x8>
    4ea0:	08 95       	ret

00004ea2 <__divmodsi4>:
    4ea2:	97 fb       	bst	r25, 7
    4ea4:	09 2e       	mov	r0, r25
    4ea6:	05 26       	eor	r0, r21
    4ea8:	0e d0       	rcall	.+28     	; 0x4ec6 <__divmodsi4_neg1>
    4eaa:	57 fd       	sbrc	r21, 7
    4eac:	04 d0       	rcall	.+8      	; 0x4eb6 <__divmodsi4_neg2>
    4eae:	14 d0       	rcall	.+40     	; 0x4ed8 <__udivmodsi4>
    4eb0:	0a d0       	rcall	.+20     	; 0x4ec6 <__divmodsi4_neg1>
    4eb2:	00 1c       	adc	r0, r0
    4eb4:	38 f4       	brcc	.+14     	; 0x4ec4 <__divmodsi4_exit>

00004eb6 <__divmodsi4_neg2>:
    4eb6:	50 95       	com	r21
    4eb8:	40 95       	com	r20
    4eba:	30 95       	com	r19
    4ebc:	21 95       	neg	r18
    4ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec0:	4f 4f       	sbci	r20, 0xFF	; 255
    4ec2:	5f 4f       	sbci	r21, 0xFF	; 255

00004ec4 <__divmodsi4_exit>:
    4ec4:	08 95       	ret

00004ec6 <__divmodsi4_neg1>:
    4ec6:	f6 f7       	brtc	.-4      	; 0x4ec4 <__divmodsi4_exit>
    4ec8:	90 95       	com	r25
    4eca:	80 95       	com	r24
    4ecc:	70 95       	com	r23
    4ece:	61 95       	neg	r22
    4ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed6:	08 95       	ret

00004ed8 <__udivmodsi4>:
    4ed8:	a1 e2       	ldi	r26, 0x21	; 33
    4eda:	1a 2e       	mov	r1, r26
    4edc:	aa 1b       	sub	r26, r26
    4ede:	bb 1b       	sub	r27, r27
    4ee0:	fd 01       	movw	r30, r26
    4ee2:	0d c0       	rjmp	.+26     	; 0x4efe <__udivmodsi4_ep>

00004ee4 <__udivmodsi4_loop>:
    4ee4:	aa 1f       	adc	r26, r26
    4ee6:	bb 1f       	adc	r27, r27
    4ee8:	ee 1f       	adc	r30, r30
    4eea:	ff 1f       	adc	r31, r31
    4eec:	a2 17       	cp	r26, r18
    4eee:	b3 07       	cpc	r27, r19
    4ef0:	e4 07       	cpc	r30, r20
    4ef2:	f5 07       	cpc	r31, r21
    4ef4:	20 f0       	brcs	.+8      	; 0x4efe <__udivmodsi4_ep>
    4ef6:	a2 1b       	sub	r26, r18
    4ef8:	b3 0b       	sbc	r27, r19
    4efa:	e4 0b       	sbc	r30, r20
    4efc:	f5 0b       	sbc	r31, r21

00004efe <__udivmodsi4_ep>:
    4efe:	66 1f       	adc	r22, r22
    4f00:	77 1f       	adc	r23, r23
    4f02:	88 1f       	adc	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	1a 94       	dec	r1
    4f08:	69 f7       	brne	.-38     	; 0x4ee4 <__udivmodsi4_loop>
    4f0a:	60 95       	com	r22
    4f0c:	70 95       	com	r23
    4f0e:	80 95       	com	r24
    4f10:	90 95       	com	r25
    4f12:	9b 01       	movw	r18, r22
    4f14:	ac 01       	movw	r20, r24
    4f16:	bd 01       	movw	r22, r26
    4f18:	cf 01       	movw	r24, r30
    4f1a:	08 95       	ret

00004f1c <_exit>:
    4f1c:	ff cf       	rjmp	.-2      	; 0x4f1c <_exit>
