
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  00004b68  00004bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  0080032a  0080032a  00004d26  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  0000776a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f46  00000000  00000000  000079ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e49  00000000  00000000  00008930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000148d  00000000  00000000  0000c779  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000468a  00000000  00000000  0000dc06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  00012290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ea7  00000000  00000000  000128a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001163  00000000  00000000  00013747  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f2  00000000  00000000  000148aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  00014a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 ee 1d 	jmp	0x3bdc	; 0x3bdc <__vector_32>
      84:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__vector_42>
      ac:	0c 94 5b 1d 	jmp	0x3ab6	; 0x3ab6 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	83 0b       	sbc	r24, r19
      e6:	67 0b       	sbc	r22, r23
      e8:	33 0b       	sbc	r19, r19
      ea:	11 0b       	sbc	r17, r17
      ec:	e4 0a       	sbc	r14, r20
      ee:	26 0b       	sbc	r18, r22
      f0:	bb 0a       	sbc	r11, r27
      f2:	9f 0a       	sbc	r9, r31
      f4:	72 0a       	sbc	r7, r18
      f6:	58 0a       	sbc	r5, r24
      f8:	c5 06       	cpc	r12, r21
      fa:	c5 06       	cpc	r12, r21
      fc:	c5 06       	cpc	r12, r21
      fe:	c5 06       	cpc	r12, r21
     100:	c5 06       	cpc	r12, r21
     102:	c5 06       	cpc	r12, r21
     104:	4d 0a       	sbc	r4, r29
     106:	42 0a       	sbc	r4, r18
     108:	c5 06       	cpc	r12, r21
     10a:	c5 06       	cpc	r12, r21
     10c:	c5 06       	cpc	r12, r21
     10e:	c5 06       	cpc	r12, r21
     110:	c5 06       	cpc	r12, r21
     112:	c5 06       	cpc	r12, r21
     114:	c5 06       	cpc	r12, r21
     116:	c5 06       	cpc	r12, r21
     118:	c5 06       	cpc	r12, r21
     11a:	c5 06       	cpc	r12, r21
     11c:	c5 06       	cpc	r12, r21
     11e:	c5 06       	cpc	r12, r21
     120:	72 0a       	sbc	r7, r18
     122:	33 0b       	sbc	r19, r19
     124:	32 0a       	sbc	r3, r18
     126:	2d 0a       	sbc	r2, r29
     128:	c5 06       	cpc	r12, r21
     12a:	c5 06       	cpc	r12, r21
     12c:	c5 06       	cpc	r12, r21
     12e:	c5 06       	cpc	r12, r21
     130:	c5 06       	cpc	r12, r21
     132:	c5 06       	cpc	r12, r21
     134:	c5 06       	cpc	r12, r21
     136:	c5 06       	cpc	r12, r21
     138:	c5 06       	cpc	r12, r21
     13a:	c5 06       	cpc	r12, r21
     13c:	c5 06       	cpc	r12, r21
     13e:	c5 06       	cpc	r12, r21
     140:	e4 0a       	sbc	r14, r20
     142:	bb 0a       	sbc	r11, r27
     144:	c5 06       	cpc	r12, r21
     146:	c5 06       	cpc	r12, r21
     148:	83 0b       	sbc	r24, r19
     14a:	26 0b       	sbc	r18, r22
     14c:	ad 0b       	sbc	r26, r29
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e8 e6       	ldi	r30, 0x68	; 104
     194:	fb e4       	ldi	r31, 0x4B	; 75
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	aa 32       	cpi	r26, 0x2A	; 42
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	aa e2       	ldi	r26, 0x2A	; 42
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	ae 35       	cpi	r26, 0x5E	; 94
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "utility.h"
#include "speed_control.h"
#include "nRF24L01.h"
#include "behaviors.h"

int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	a4 97       	sbiw	r28, 0x24	; 36
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61

	unsigned int i = 0;
	choosePeripheral = 1;
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	10 93 18 02 	sts	0x0218, r17

	initPeripherals();
     1f8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <initPeripherals>

	startCalibration = 1;
     1fc:	10 93 2d 04 	sts	0x042D, r17
	calibrationCycle = 0;
     200:	10 92 2f 04 	sts	0x042F, r1
     204:	10 92 2e 04 	sts	0x042E, r1
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
					ackPayload[12] = accX>>8;
					ackPayload[13] = accY&0xFF;
					ackPayload[14] = accY>>8;
					ackPayload[15] = ir_move;
					packetId = 5;
     208:	05 e0       	ldi	r16, 0x05	; 5

	while(1) {

		//PORTB ^= (1 << 6); 	// toggle the green led

		currentSelector = getSelector();
     20a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <getSelector>
     20e:	80 93 2c 04 	sts	0x042C, r24

		readAccelXYZ();
     212:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <readAccelXYZ>

		computeAngle();
     216:	0e 94 2c 1a 	call	0x3458	; 0x3458 <computeAngle>

		if(updateProx) {
     21a:	80 91 9e 03 	lds	r24, 0x039E
     21e:	88 23       	and	r24, r24
     220:	09 f0       	breq	.+2      	; 0x224 <main+0x66>
     222:	83 c2       	rjmp	.+1286   	; 0x72a <main+0x56c>
     224:	40 91 2d 04 	lds	r20, 0x042D
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
     228:	20 91 2a 04 	lds	r18, 0x042A
     22c:	30 91 2b 04 	lds	r19, 0x042B
     230:	5e e4       	ldi	r21, 0x4E	; 78
     232:	20 32       	cpi	r18, 0x20	; 32
     234:	35 07       	cpc	r19, r21
     236:	10 f0       	brcs	.+4      	; 0x23c <main+0x7e>
			measBattery = 1;
     238:	10 93 9b 03 	sts	0x039B, r17
			//sleep(60);
		}


		if(startCalibration && calibrationCycle<CALIBRATION_CYCLES) {
     23c:	44 23       	and	r20, r20
     23e:	09 f4       	brne	.+2      	; 0x242 <main+0x84>
     240:	dc c1       	rjmp	.+952    	; 0x5fa <main+0x43c>
     242:	60 91 2e 04 	lds	r22, 0x042E
     246:	70 91 2f 04 	lds	r23, 0x042F
     24a:	60 31       	cpi	r22, 0x10	; 16
     24c:	71 05       	cpc	r23, r1
     24e:	0c f0       	brlt	.+2      	; 0x252 <main+0x94>
     250:	d8 c1       	rjmp	.+944    	; 0x602 <main+0x444>

			if(proxUpdated) {
     252:	80 91 cf 03 	lds	r24, 0x03CF
     256:	88 23       	and	r24, r24
     258:	c1 f2       	breq	.-80     	; 0x20a <main+0x4c>

				proxUpdated = 0;
     25a:	10 92 cf 03 	sts	0x03CF, r1

				if(calibrationCycle==0) {
     25e:	61 15       	cp	r22, r1
     260:	71 05       	cpc	r23, r1
     262:	11 f4       	brne	.+4      	; 0x268 <main+0xaa>
     264:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <main+0x11fc>
     268:	80 91 22 04 	lds	r24, 0x0422
     26c:	90 91 23 04 	lds	r25, 0x0423
     270:	9c a3       	std	Y+36, r25	; 0x24
     272:	8b a3       	std	Y+35, r24	; 0x23
     274:	20 90 24 04 	lds	r2, 0x0424
     278:	30 90 25 04 	lds	r3, 0x0425
     27c:	a0 91 26 04 	lds	r26, 0x0426
     280:	b0 91 27 04 	lds	r27, 0x0427
     284:	ba 83       	std	Y+2, r27	; 0x02
     286:	a9 83       	std	Y+1, r26	; 0x01
     288:	20 91 9f 03 	lds	r18, 0x039F
     28c:	30 91 a0 03 	lds	r19, 0x03A0
     290:	40 91 a1 03 	lds	r20, 0x03A1
     294:	50 91 a2 03 	lds	r21, 0x03A2
     298:	c0 90 a3 03 	lds	r12, 0x03A3
     29c:	d0 90 a4 03 	lds	r13, 0x03A4
     2a0:	e0 90 a5 03 	lds	r14, 0x03A5
     2a4:	f0 90 a6 03 	lds	r15, 0x03A6
     2a8:	80 90 a7 03 	lds	r8, 0x03A7
     2ac:	90 90 a8 03 	lds	r9, 0x03A8
     2b0:	a0 90 a9 03 	lds	r10, 0x03A9
     2b4:	b0 90 aa 03 	lds	r11, 0x03AA
     2b8:	40 90 ab 03 	lds	r4, 0x03AB
     2bc:	50 90 ac 03 	lds	r5, 0x03AC
     2c0:	60 90 ad 03 	lds	r6, 0x03AD
     2c4:	70 90 ae 03 	lds	r7, 0x03AE
     2c8:	80 91 af 03 	lds	r24, 0x03AF
     2cc:	90 91 b0 03 	lds	r25, 0x03B0
     2d0:	a0 91 b1 03 	lds	r26, 0x03B1
     2d4:	b0 91 b2 03 	lds	r27, 0x03B2
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	ad 83       	std	Y+5, r26	; 0x05
     2de:	be 83       	std	Y+6, r27	; 0x06
     2e0:	80 91 b3 03 	lds	r24, 0x03B3
     2e4:	90 91 b4 03 	lds	r25, 0x03B4
     2e8:	a0 91 b5 03 	lds	r26, 0x03B5
     2ec:	b0 91 b6 03 	lds	r27, 0x03B6
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
     2f4:	a9 87       	std	Y+9, r26	; 0x09
     2f6:	ba 87       	std	Y+10, r27	; 0x0a
     2f8:	80 91 b7 03 	lds	r24, 0x03B7
     2fc:	90 91 b8 03 	lds	r25, 0x03B8
     300:	a0 91 b9 03 	lds	r26, 0x03B9
     304:	b0 91 ba 03 	lds	r27, 0x03BA
     308:	8b 87       	std	Y+11, r24	; 0x0b
     30a:	9c 87       	std	Y+12, r25	; 0x0c
     30c:	ad 87       	std	Y+13, r26	; 0x0d
     30e:	be 87       	std	Y+14, r27	; 0x0e
     310:	80 91 bb 03 	lds	r24, 0x03BB
     314:	90 91 bc 03 	lds	r25, 0x03BC
     318:	a0 91 bd 03 	lds	r26, 0x03BD
     31c:	b0 91 be 03 	lds	r27, 0x03BE
     320:	8f 87       	std	Y+15, r24	; 0x0f
     322:	98 8b       	std	Y+16, r25	; 0x10
     324:	a9 8b       	std	Y+17, r26	; 0x11
     326:	ba 8b       	std	Y+18, r27	; 0x12
     328:	80 91 bf 03 	lds	r24, 0x03BF
     32c:	90 91 c0 03 	lds	r25, 0x03C0
     330:	a0 91 c1 03 	lds	r26, 0x03C1
     334:	b0 91 c2 03 	lds	r27, 0x03C2
     338:	8b 8b       	std	Y+19, r24	; 0x13
     33a:	9c 8b       	std	Y+20, r25	; 0x14
     33c:	ad 8b       	std	Y+21, r26	; 0x15
     33e:	be 8b       	std	Y+22, r27	; 0x16
     340:	80 91 c3 03 	lds	r24, 0x03C3
     344:	90 91 c4 03 	lds	r25, 0x03C4
     348:	a0 91 c5 03 	lds	r26, 0x03C5
     34c:	b0 91 c6 03 	lds	r27, 0x03C6
     350:	8f 8b       	std	Y+23, r24	; 0x17
     352:	98 8f       	std	Y+24, r25	; 0x18
     354:	a9 8f       	std	Y+25, r26	; 0x19
     356:	ba 8f       	std	Y+26, r27	; 0x1a
     358:	80 91 c7 03 	lds	r24, 0x03C7
     35c:	90 91 c8 03 	lds	r25, 0x03C8
     360:	a0 91 c9 03 	lds	r26, 0x03C9
     364:	b0 91 ca 03 	lds	r27, 0x03CA
     368:	8b 8f       	std	Y+27, r24	; 0x1b
     36a:	9c 8f       	std	Y+28, r25	; 0x1c
     36c:	ad 8f       	std	Y+29, r26	; 0x1d
     36e:	be 8f       	std	Y+30, r27	; 0x1e
     370:	80 91 cb 03 	lds	r24, 0x03CB
     374:	90 91 cc 03 	lds	r25, 0x03CC
     378:	a0 91 cd 03 	lds	r26, 0x03CD
     37c:	b0 91 ce 03 	lds	r27, 0x03CE
     380:	8f 8f       	std	Y+31, r24	; 0x1f
     382:	98 a3       	std	Y+32, r25	; 0x20
     384:	a9 a3       	std	Y+33, r26	; 0x21
     386:	ba a3       	std	Y+34, r27	; 0x22
					accOffsetYSum = 0;
					accOffsetZSum = 0;
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
     388:	80 91 65 03 	lds	r24, 0x0365
     38c:	90 91 66 03 	lds	r25, 0x0366
     390:	aa 27       	eor	r26, r26
     392:	97 fd       	sbrc	r25, 7
     394:	a0 95       	com	r26
     396:	ba 2f       	mov	r27, r26
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	a4 1f       	adc	r26, r20
     39e:	b5 1f       	adc	r27, r21
     3a0:	80 93 9f 03 	sts	0x039F, r24
     3a4:	90 93 a0 03 	sts	0x03A0, r25
     3a8:	a0 93 a1 03 	sts	0x03A1, r26
     3ac:	b0 93 a2 03 	sts	0x03A2, r27
     3b0:	80 91 67 03 	lds	r24, 0x0367
     3b4:	90 91 68 03 	lds	r25, 0x0368
     3b8:	aa 27       	eor	r26, r26
     3ba:	97 fd       	sbrc	r25, 7
     3bc:	a0 95       	com	r26
     3be:	ba 2f       	mov	r27, r26
     3c0:	8c 0d       	add	r24, r12
     3c2:	9d 1d       	adc	r25, r13
     3c4:	ae 1d       	adc	r26, r14
     3c6:	bf 1d       	adc	r27, r15
     3c8:	80 93 a3 03 	sts	0x03A3, r24
     3cc:	90 93 a4 03 	sts	0x03A4, r25
     3d0:	a0 93 a5 03 	sts	0x03A5, r26
     3d4:	b0 93 a6 03 	sts	0x03A6, r27
     3d8:	80 91 69 03 	lds	r24, 0x0369
     3dc:	90 91 6a 03 	lds	r25, 0x036A
     3e0:	aa 27       	eor	r26, r26
     3e2:	97 fd       	sbrc	r25, 7
     3e4:	a0 95       	com	r26
     3e6:	ba 2f       	mov	r27, r26
     3e8:	88 0d       	add	r24, r8
     3ea:	99 1d       	adc	r25, r9
     3ec:	aa 1d       	adc	r26, r10
     3ee:	bb 1d       	adc	r27, r11
     3f0:	80 93 a7 03 	sts	0x03A7, r24
     3f4:	90 93 a8 03 	sts	0x03A8, r25
     3f8:	a0 93 a9 03 	sts	0x03A9, r26
     3fc:	b0 93 aa 03 	sts	0x03AA, r27
     400:	80 91 6b 03 	lds	r24, 0x036B
     404:	90 91 6c 03 	lds	r25, 0x036C
     408:	aa 27       	eor	r26, r26
     40a:	97 fd       	sbrc	r25, 7
     40c:	a0 95       	com	r26
     40e:	ba 2f       	mov	r27, r26
     410:	84 0d       	add	r24, r4
     412:	95 1d       	adc	r25, r5
     414:	a6 1d       	adc	r26, r6
     416:	b7 1d       	adc	r27, r7
     418:	80 93 ab 03 	sts	0x03AB, r24
     41c:	90 93 ac 03 	sts	0x03AC, r25
     420:	a0 93 ad 03 	sts	0x03AD, r26
     424:	b0 93 ae 03 	sts	0x03AE, r27
     428:	80 91 6d 03 	lds	r24, 0x036D
     42c:	90 91 6e 03 	lds	r25, 0x036E
     430:	aa 27       	eor	r26, r26
     432:	97 fd       	sbrc	r25, 7
     434:	a0 95       	com	r26
     436:	ba 2f       	mov	r27, r26
     438:	2b 81       	ldd	r18, Y+3	; 0x03
     43a:	3c 81       	ldd	r19, Y+4	; 0x04
     43c:	4d 81       	ldd	r20, Y+5	; 0x05
     43e:	5e 81       	ldd	r21, Y+6	; 0x06
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
     444:	a4 1f       	adc	r26, r20
     446:	b5 1f       	adc	r27, r21
     448:	80 93 af 03 	sts	0x03AF, r24
     44c:	90 93 b0 03 	sts	0x03B0, r25
     450:	a0 93 b1 03 	sts	0x03B1, r26
     454:	b0 93 b2 03 	sts	0x03B2, r27
     458:	80 91 6f 03 	lds	r24, 0x036F
     45c:	90 91 70 03 	lds	r25, 0x0370
     460:	aa 27       	eor	r26, r26
     462:	97 fd       	sbrc	r25, 7
     464:	a0 95       	com	r26
     466:	ba 2f       	mov	r27, r26
     468:	2f 81       	ldd	r18, Y+7	; 0x07
     46a:	38 85       	ldd	r19, Y+8	; 0x08
     46c:	49 85       	ldd	r20, Y+9	; 0x09
     46e:	5a 85       	ldd	r21, Y+10	; 0x0a
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	a4 1f       	adc	r26, r20
     476:	b5 1f       	adc	r27, r21
     478:	80 93 b3 03 	sts	0x03B3, r24
     47c:	90 93 b4 03 	sts	0x03B4, r25
     480:	a0 93 b5 03 	sts	0x03B5, r26
     484:	b0 93 b6 03 	sts	0x03B6, r27
     488:	80 91 71 03 	lds	r24, 0x0371
     48c:	90 91 72 03 	lds	r25, 0x0372
     490:	aa 27       	eor	r26, r26
     492:	97 fd       	sbrc	r25, 7
     494:	a0 95       	com	r26
     496:	ba 2f       	mov	r27, r26
     498:	2b 85       	ldd	r18, Y+11	; 0x0b
     49a:	3c 85       	ldd	r19, Y+12	; 0x0c
     49c:	4d 85       	ldd	r20, Y+13	; 0x0d
     49e:	5e 85       	ldd	r21, Y+14	; 0x0e
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	a4 1f       	adc	r26, r20
     4a6:	b5 1f       	adc	r27, r21
     4a8:	80 93 b7 03 	sts	0x03B7, r24
     4ac:	90 93 b8 03 	sts	0x03B8, r25
     4b0:	a0 93 b9 03 	sts	0x03B9, r26
     4b4:	b0 93 ba 03 	sts	0x03BA, r27
     4b8:	80 91 73 03 	lds	r24, 0x0373
     4bc:	90 91 74 03 	lds	r25, 0x0374
     4c0:	aa 27       	eor	r26, r26
     4c2:	97 fd       	sbrc	r25, 7
     4c4:	a0 95       	com	r26
     4c6:	ba 2f       	mov	r27, r26
     4c8:	2f 85       	ldd	r18, Y+15	; 0x0f
     4ca:	38 89       	ldd	r19, Y+16	; 0x10
     4cc:	49 89       	ldd	r20, Y+17	; 0x11
     4ce:	5a 89       	ldd	r21, Y+18	; 0x12
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	a4 1f       	adc	r26, r20
     4d6:	b5 1f       	adc	r27, r21
     4d8:	80 93 bb 03 	sts	0x03BB, r24
     4dc:	90 93 bc 03 	sts	0x03BC, r25
     4e0:	a0 93 bd 03 	sts	0x03BD, r26
     4e4:	b0 93 be 03 	sts	0x03BE, r27
     4e8:	80 91 75 03 	lds	r24, 0x0375
     4ec:	90 91 76 03 	lds	r25, 0x0376
     4f0:	aa 27       	eor	r26, r26
     4f2:	97 fd       	sbrc	r25, 7
     4f4:	a0 95       	com	r26
     4f6:	ba 2f       	mov	r27, r26
     4f8:	2b 89       	ldd	r18, Y+19	; 0x13
     4fa:	3c 89       	ldd	r19, Y+20	; 0x14
     4fc:	4d 89       	ldd	r20, Y+21	; 0x15
     4fe:	5e 89       	ldd	r21, Y+22	; 0x16
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	a4 1f       	adc	r26, r20
     506:	b5 1f       	adc	r27, r21
     508:	80 93 bf 03 	sts	0x03BF, r24
     50c:	90 93 c0 03 	sts	0x03C0, r25
     510:	a0 93 c1 03 	sts	0x03C1, r26
     514:	b0 93 c2 03 	sts	0x03C2, r27
     518:	80 91 77 03 	lds	r24, 0x0377
     51c:	90 91 78 03 	lds	r25, 0x0378
     520:	aa 27       	eor	r26, r26
     522:	97 fd       	sbrc	r25, 7
     524:	a0 95       	com	r26
     526:	ba 2f       	mov	r27, r26
     528:	2f 89       	ldd	r18, Y+23	; 0x17
     52a:	38 8d       	ldd	r19, Y+24	; 0x18
     52c:	49 8d       	ldd	r20, Y+25	; 0x19
     52e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	a4 1f       	adc	r26, r20
     536:	b5 1f       	adc	r27, r21
     538:	80 93 c3 03 	sts	0x03C3, r24
     53c:	90 93 c4 03 	sts	0x03C4, r25
     540:	a0 93 c5 03 	sts	0x03C5, r26
     544:	b0 93 c6 03 	sts	0x03C6, r27
     548:	80 91 79 03 	lds	r24, 0x0379
     54c:	90 91 7a 03 	lds	r25, 0x037A
     550:	aa 27       	eor	r26, r26
     552:	97 fd       	sbrc	r25, 7
     554:	a0 95       	com	r26
     556:	ba 2f       	mov	r27, r26
     558:	2b 8d       	ldd	r18, Y+27	; 0x1b
     55a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     55c:	4d 8d       	ldd	r20, Y+29	; 0x1d
     55e:	5e 8d       	ldd	r21, Y+30	; 0x1e
     560:	82 0f       	add	r24, r18
     562:	93 1f       	adc	r25, r19
     564:	a4 1f       	adc	r26, r20
     566:	b5 1f       	adc	r27, r21
     568:	80 93 c7 03 	sts	0x03C7, r24
     56c:	90 93 c8 03 	sts	0x03C8, r25
     570:	a0 93 c9 03 	sts	0x03C9, r26
     574:	b0 93 ca 03 	sts	0x03CA, r27
     578:	80 91 7b 03 	lds	r24, 0x037B
     57c:	90 91 7c 03 	lds	r25, 0x037C
     580:	aa 27       	eor	r26, r26
     582:	97 fd       	sbrc	r25, 7
     584:	a0 95       	com	r26
     586:	ba 2f       	mov	r27, r26
     588:	2f 8d       	ldd	r18, Y+31	; 0x1f
     58a:	38 a1       	ldd	r19, Y+32	; 0x20
     58c:	49 a1       	ldd	r20, Y+33	; 0x21
     58e:	5a a1       	ldd	r21, Y+34	; 0x22
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	a4 1f       	adc	r26, r20
     596:	b5 1f       	adc	r27, r21
     598:	80 93 cb 03 	sts	0x03CB, r24
     59c:	90 93 cc 03 	sts	0x03CC, r25
     5a0:	a0 93 cd 03 	sts	0x03CD, r26
     5a4:	b0 93 ce 03 	sts	0x03CE, r27
				}

				accOffsetXSum += accX;
     5a8:	80 91 0e 04 	lds	r24, 0x040E
     5ac:	90 91 0f 04 	lds	r25, 0x040F
     5b0:	4b a1       	ldd	r20, Y+35	; 0x23
     5b2:	5c a1       	ldd	r21, Y+36	; 0x24
     5b4:	84 0f       	add	r24, r20
     5b6:	95 1f       	adc	r25, r21
     5b8:	90 93 23 04 	sts	0x0423, r25
     5bc:	80 93 22 04 	sts	0x0422, r24
				accOffsetYSum += accY;
     5c0:	80 91 10 04 	lds	r24, 0x0410
     5c4:	90 91 11 04 	lds	r25, 0x0411
     5c8:	82 0d       	add	r24, r2
     5ca:	93 1d       	adc	r25, r3
     5cc:	90 93 25 04 	sts	0x0425, r25
     5d0:	80 93 24 04 	sts	0x0424, r24
				accOffsetZSum += accZ;
     5d4:	80 91 12 04 	lds	r24, 0x0412
     5d8:	90 91 13 04 	lds	r25, 0x0413
     5dc:	a9 81       	ldd	r26, Y+1	; 0x01
     5de:	ba 81       	ldd	r27, Y+2	; 0x02
     5e0:	8a 0f       	add	r24, r26
     5e2:	9b 1f       	adc	r25, r27
     5e4:	90 93 27 04 	sts	0x0427, r25
     5e8:	80 93 26 04 	sts	0x0426, r24

				calibrationCycle++;
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	70 93 2f 04 	sts	0x042F, r23
     5f4:	60 93 2e 04 	sts	0x042E, r22
     5f8:	08 ce       	rjmp	.-1008   	; 0x20a <main+0x4c>
     5fa:	60 91 2e 04 	lds	r22, 0x042E
     5fe:	70 91 2f 04 	lds	r23, 0x042F

			}

			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {
     602:	60 31       	cpi	r22, 0x10	; 16
     604:	71 05       	cpc	r23, r1
     606:	09 f4       	brne	.+2      	; 0x60a <main+0x44c>
     608:	e1 c3       	rjmp	.+1986   	; 0xdcc <main+0xc0e>
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
     60a:	80 91 19 02 	lds	r24, 0x0219
     60e:	88 23       	and	r24, r24
     610:	09 f0       	breq	.+2      	; 0x614 <main+0x456>
     612:	aa c3       	rjmp	.+1876   	; 0xd68 <main+0xbaa>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
     614:	9e e4       	ldi	r25, 0x4E	; 78
     616:	20 32       	cpi	r18, 0x20	; 32
     618:	39 07       	cpc	r19, r25
     61a:	20 f0       	brcs	.+8      	; 0x624 <main+0x466>
			delayCounter = 0;
     61c:	10 92 2b 04 	sts	0x042B, r1
     620:	10 92 2a 04 	sts	0x042A, r1
			usartTransmit(CHARGE_ON);
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
     624:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <mirf_data_ready>
     628:	88 23       	and	r24, r24
     62a:	09 f0       	breq	.+2      	; 0x62e <main+0x470>
     62c:	61 c2       	rjmp	.+1218   	; 0xaf0 <main+0x932>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
     62e:	20 91 2c 04 	lds	r18, 0x042C
     632:	22 23       	and	r18, r18
     634:	09 f0       	breq	.+2      	; 0x638 <main+0x47a>
     636:	43 c1       	rjmp	.+646    	; 0x8be <main+0x700>

			// compute velocities even if they aren't used...
			if(compute_left_vel) {
     638:	80 91 0f 02 	lds	r24, 0x020F
     63c:	88 23       	and	r24, r24
     63e:	a1 f0       	breq	.+40     	; 0x668 <main+0x4aa>
				last_left_vel = left_vel_sum>>2;
     640:	80 91 dc 03 	lds	r24, 0x03DC
     644:	90 91 dd 03 	lds	r25, 0x03DD
     648:	96 95       	lsr	r25
     64a:	87 95       	ror	r24
     64c:	96 95       	lsr	r25
     64e:	87 95       	ror	r24
     650:	90 93 e1 03 	sts	0x03E1, r25
     654:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
     658:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
     65c:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
     660:	10 92 dd 03 	sts	0x03DD, r1
     664:	10 92 dc 03 	sts	0x03DC, r1
			}

			if(compute_right_vel) {
     668:	80 91 10 02 	lds	r24, 0x0210
     66c:	88 23       	and	r24, r24
     66e:	a1 f0       	breq	.+40     	; 0x698 <main+0x4da>
				last_right_vel = right_vel_sum>>2;
     670:	80 91 de 03 	lds	r24, 0x03DE
     674:	90 91 df 03 	lds	r25, 0x03DF
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	96 95       	lsr	r25
     67e:	87 95       	ror	r24
     680:	90 93 e3 03 	sts	0x03E3, r25
     684:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
     688:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
     68c:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
     690:	10 92 df 03 	sts	0x03DF, r1
     694:	10 92 de 03 	sts	0x03DE, r1
			}

			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     698:	80 91 ec 03 	lds	r24, 0x03EC
     69c:	90 91 ed 03 	lds	r25, 0x03ED
     6a0:	90 93 ff 03 	sts	0x03FF, r25
     6a4:	80 93 fe 03 	sts	0x03FE, r24
			pwm_left_working = pwm_left_desired;
     6a8:	20 91 ee 03 	lds	r18, 0x03EE
     6ac:	30 91 ef 03 	lds	r19, 0x03EF
     6b0:	30 93 01 04 	sts	0x0401, r19
     6b4:	20 93 00 04 	sts	0x0400, r18
            pwm_left_desired_to_control = pwm_left_desired;
     6b8:	30 93 db 03 	sts	0x03DB, r19
     6bc:	20 93 da 03 	sts	0x03DA, r18
            pwm_right_desired_to_control = pwm_right_desired;
     6c0:	90 93 d9 03 	sts	0x03D9, r25
     6c4:	80 93 d8 03 	sts	0x03D8, r24

			if(obstacleAvoidanceEnabled) {
     6c8:	80 91 30 04 	lds	r24, 0x0430
     6cc:	88 23       	and	r24, r24
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <main+0x514>
     6d0:	d1 c4       	rjmp	.+2466   	; 0x1074 <main+0xeb6>
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
				//PORTB |= (1 << 7);
			}

			if(cliffAvoidanceEnabled) {
     6d2:	80 91 35 04 	lds	r24, 0x0435
     6d6:	88 23       	and	r24, r24
     6d8:	09 f0       	breq	.+2      	; 0x6dc <main+0x51e>
     6da:	c9 c4       	rjmp	.+2450   	; 0x106e <main+0xeb0>
		}
*/

		if(update_pwm) {

			update_pwm = 0;
     6dc:	10 92 02 04 	sts	0x0402, r1
			pwm_left = pwm_left_working;
     6e0:	80 91 00 04 	lds	r24, 0x0400
     6e4:	90 91 01 04 	lds	r25, 0x0401
     6e8:	90 93 e7 03 	sts	0x03E7, r25
     6ec:	80 93 e6 03 	sts	0x03E6, r24
			pwm_right = pwm_right_working;
     6f0:	80 91 fe 03 	lds	r24, 0x03FE
     6f4:	90 91 ff 03 	lds	r25, 0x03FF
     6f8:	90 93 e5 03 	sts	0x03E5, r25
     6fc:	80 93 e4 03 	sts	0x03E4, r24

			if(pwm_right > 0) {
     700:	18 16       	cp	r1, r24
     702:	19 06       	cpc	r1, r25
     704:	0c f0       	brlt	.+2      	; 0x708 <main+0x54a>
     706:	04 c5       	rjmp	.+2568   	; 0x1110 <main+0xf52>
				OCR3A = (unsigned int)pwm_right;
     708:	90 93 99 00 	sts	0x0099, r25
     70c:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     710:	80 91 e6 03 	lds	r24, 0x03E6
     714:	90 91 e7 03 	lds	r25, 0x03E7
     718:	18 16       	cp	r1, r24
     71a:	19 06       	cpc	r1, r25
     71c:	0c f0       	brlt	.+2      	; 0x720 <main+0x562>
     71e:	ec c4       	rjmp	.+2520   	; 0x10f8 <main+0xf3a>
				OCR4A = (unsigned int)pwm_left;
     720:	90 93 a9 00 	sts	0x00A9, r25
     724:	80 93 a8 00 	sts	0x00A8, r24
     728:	70 cd       	rjmp	.-1312   	; 0x20a <main+0x4c>

		computeAngle();

		if(updateProx) {

			updateProx = 0;
     72a:	10 92 9e 03 	sts	0x039E, r1
			if(startCalibration) {
     72e:	40 91 2d 04 	lds	r20, 0x042D
     732:	44 23       	and	r20, r20
     734:	09 f4       	brne	.+2      	; 0x738 <main+0x57a>
     736:	cf c0       	rjmp	.+414    	; 0x8d6 <main+0x718>

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
     738:	80 91 35 03 	lds	r24, 0x0335
     73c:	90 91 36 03 	lds	r25, 0x0336
     740:	20 91 37 03 	lds	r18, 0x0337
     744:	30 91 38 03 	lds	r19, 0x0338
     748:	82 1b       	sub	r24, r18
     74a:	93 0b       	sbc	r25, r19
     74c:	90 93 66 03 	sts	0x0366, r25
     750:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[0] < 0) {
     754:	97 fd       	sbrc	r25, 7
     756:	ff c5       	rjmp	.+3070   	; 0x1356 <main+0x1198>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
     758:	80 91 39 03 	lds	r24, 0x0339
     75c:	90 91 3a 03 	lds	r25, 0x033A
     760:	20 91 3b 03 	lds	r18, 0x033B
     764:	30 91 3c 03 	lds	r19, 0x033C
     768:	82 1b       	sub	r24, r18
     76a:	93 0b       	sbc	r25, r19
     76c:	90 93 68 03 	sts	0x0368, r25
     770:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[1] < 0) {
     774:	97 fd       	sbrc	r25, 7
     776:	b8 c5       	rjmp	.+2928   	; 0x12e8 <main+0x112a>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
     778:	80 91 3d 03 	lds	r24, 0x033D
     77c:	90 91 3e 03 	lds	r25, 0x033E
     780:	20 91 3f 03 	lds	r18, 0x033F
     784:	30 91 40 03 	lds	r19, 0x0340
     788:	82 1b       	sub	r24, r18
     78a:	93 0b       	sbc	r25, r19
     78c:	90 93 6a 03 	sts	0x036A, r25
     790:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[2] < 0) {
     794:	97 fd       	sbrc	r25, 7
     796:	a3 c5       	rjmp	.+2886   	; 0x12de <main+0x1120>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
     798:	80 91 41 03 	lds	r24, 0x0341
     79c:	90 91 42 03 	lds	r25, 0x0342
     7a0:	20 91 43 03 	lds	r18, 0x0343
     7a4:	30 91 44 03 	lds	r19, 0x0344
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	90 93 6c 03 	sts	0x036C, r25
     7b0:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[3] < 0) {
     7b4:	97 fd       	sbrc	r25, 7
     7b6:	e8 c5       	rjmp	.+3024   	; 0x1388 <main+0x11ca>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
     7b8:	80 91 45 03 	lds	r24, 0x0345
     7bc:	90 91 46 03 	lds	r25, 0x0346
     7c0:	20 91 47 03 	lds	r18, 0x0347
     7c4:	30 91 48 03 	lds	r19, 0x0348
     7c8:	82 1b       	sub	r24, r18
     7ca:	93 0b       	sbc	r25, r19
     7cc:	90 93 6e 03 	sts	0x036E, r25
     7d0:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[4] < 0) {
     7d4:	97 fd       	sbrc	r25, 7
     7d6:	d3 c5       	rjmp	.+2982   	; 0x137e <main+0x11c0>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
     7d8:	80 91 49 03 	lds	r24, 0x0349
     7dc:	90 91 4a 03 	lds	r25, 0x034A
     7e0:	20 91 4b 03 	lds	r18, 0x034B
     7e4:	30 91 4c 03 	lds	r19, 0x034C
     7e8:	82 1b       	sub	r24, r18
     7ea:	93 0b       	sbc	r25, r19
     7ec:	90 93 70 03 	sts	0x0370, r25
     7f0:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[5] < 0) {
     7f4:	97 fd       	sbrc	r25, 7
     7f6:	be c5       	rjmp	.+2940   	; 0x1374 <main+0x11b6>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
     7f8:	80 91 4d 03 	lds	r24, 0x034D
     7fc:	90 91 4e 03 	lds	r25, 0x034E
     800:	20 91 4f 03 	lds	r18, 0x034F
     804:	30 91 50 03 	lds	r19, 0x0350
     808:	82 1b       	sub	r24, r18
     80a:	93 0b       	sbc	r25, r19
     80c:	90 93 72 03 	sts	0x0372, r25
     810:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[6] < 0) {
     814:	97 fd       	sbrc	r25, 7
     816:	a9 c5       	rjmp	.+2898   	; 0x136a <main+0x11ac>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
     818:	80 91 51 03 	lds	r24, 0x0351
     81c:	90 91 52 03 	lds	r25, 0x0352
     820:	20 91 53 03 	lds	r18, 0x0353
     824:	30 91 54 03 	lds	r19, 0x0354
     828:	82 1b       	sub	r24, r18
     82a:	93 0b       	sbc	r25, r19
     82c:	90 93 74 03 	sts	0x0374, r25
     830:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[7] < 0) {
     834:	97 fd       	sbrc	r25, 7
     836:	bc c5       	rjmp	.+2936   	; 0x13b0 <main+0x11f2>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
     838:	80 91 55 03 	lds	r24, 0x0355
     83c:	90 91 56 03 	lds	r25, 0x0356
     840:	20 91 57 03 	lds	r18, 0x0357
     844:	30 91 58 03 	lds	r19, 0x0358
     848:	82 1b       	sub	r24, r18
     84a:	93 0b       	sbc	r25, r19
     84c:	90 93 76 03 	sts	0x0376, r25
     850:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[8] < 0) {
     854:	97 fd       	sbrc	r25, 7
     856:	a7 c5       	rjmp	.+2894   	; 0x13a6 <main+0x11e8>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
     858:	80 91 59 03 	lds	r24, 0x0359
     85c:	90 91 5a 03 	lds	r25, 0x035A
     860:	20 91 5b 03 	lds	r18, 0x035B
     864:	30 91 5c 03 	lds	r19, 0x035C
     868:	82 1b       	sub	r24, r18
     86a:	93 0b       	sbc	r25, r19
     86c:	90 93 78 03 	sts	0x0378, r25
     870:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[9] < 0) {
     874:	97 fd       	sbrc	r25, 7
     876:	92 c5       	rjmp	.+2852   	; 0x139c <main+0x11de>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
     878:	80 91 5d 03 	lds	r24, 0x035D
     87c:	90 91 5e 03 	lds	r25, 0x035E
     880:	20 91 5f 03 	lds	r18, 0x035F
     884:	30 91 60 03 	lds	r19, 0x0360
     888:	82 1b       	sub	r24, r18
     88a:	93 0b       	sbc	r25, r19
     88c:	90 93 7a 03 	sts	0x037A, r25
     890:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[10] < 0) {
     894:	97 fd       	sbrc	r25, 7
     896:	7d c5       	rjmp	.+2810   	; 0x1392 <main+0x11d4>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
     898:	80 91 61 03 	lds	r24, 0x0361
     89c:	90 91 62 03 	lds	r25, 0x0362
     8a0:	20 91 63 03 	lds	r18, 0x0363
     8a4:	30 91 64 03 	lds	r19, 0x0364
     8a8:	82 1b       	sub	r24, r18
     8aa:	93 0b       	sbc	r25, r19
     8ac:	90 93 7c 03 	sts	0x037C, r25
     8b0:	80 93 7b 03 	sts	0x037B, r24
				if(proximityResult[11] < 0) {
     8b4:	97 fd       	sbrc	r25, 7
     8b6:	17 c1       	rjmp	.+558    	; 0xae6 <main+0x928>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
     8b8:	10 93 cf 03 	sts	0x03CF, r17
     8bc:	b5 cc       	rjmp	.-1686   	; 0x228 <main+0x6a>
				cliffAvoidance();
			}

			update_pwm = 1;

		} else if(currentSelector == 1) {		// only orizzontal speed control
     8be:	21 30       	cpi	r18, 0x01	; 1
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <main+0x706>
     8c2:	db c3       	rjmp	.+1974   	; 0x107a <main+0xebc>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both speed control orizzontal and vertical
     8c4:	22 30       	cpi	r18, 0x02	; 2
     8c6:	09 f4       	brne	.+2      	; 0x8ca <main+0x70c>
     8c8:	87 c4       	rjmp	.+2318   	; 0x11d8 <main+0x101a>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
     8ca:	80 91 02 04 	lds	r24, 0x0402
     8ce:	88 23       	and	r24, r24
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <main+0x716>
     8d2:	9b cc       	rjmp	.-1738   	; 0x20a <main+0x4c>
     8d4:	03 cf       	rjmp	.-506    	; 0x6dc <main+0x51e>
					proximityResult[11] = 0;
				}

			} else {

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
     8d6:	80 91 35 03 	lds	r24, 0x0335
     8da:	90 91 36 03 	lds	r25, 0x0336
     8de:	20 91 37 03 	lds	r18, 0x0337
     8e2:	30 91 38 03 	lds	r19, 0x0338
     8e6:	82 1b       	sub	r24, r18
     8e8:	93 0b       	sbc	r25, r19
     8ea:	20 91 7d 03 	lds	r18, 0x037D
     8ee:	30 91 7e 03 	lds	r19, 0x037E
     8f2:	82 1b       	sub	r24, r18
     8f4:	93 0b       	sbc	r25, r19
     8f6:	90 93 66 03 	sts	0x0366, r25
     8fa:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[0] < 0) {
     8fe:	97 fd       	sbrc	r25, 7
     900:	25 c5       	rjmp	.+2634   	; 0x134c <main+0x118e>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
     902:	80 91 39 03 	lds	r24, 0x0339
     906:	90 91 3a 03 	lds	r25, 0x033A
     90a:	20 91 3b 03 	lds	r18, 0x033B
     90e:	30 91 3c 03 	lds	r19, 0x033C
     912:	82 1b       	sub	r24, r18
     914:	93 0b       	sbc	r25, r19
     916:	20 91 7f 03 	lds	r18, 0x037F
     91a:	30 91 80 03 	lds	r19, 0x0380
     91e:	82 1b       	sub	r24, r18
     920:	93 0b       	sbc	r25, r19
     922:	90 93 68 03 	sts	0x0368, r25
     926:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[1] < 0) {
     92a:	97 fd       	sbrc	r25, 7
     92c:	0a c5       	rjmp	.+2580   	; 0x1342 <main+0x1184>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
     92e:	80 91 3d 03 	lds	r24, 0x033D
     932:	90 91 3e 03 	lds	r25, 0x033E
     936:	20 91 3f 03 	lds	r18, 0x033F
     93a:	30 91 40 03 	lds	r19, 0x0340
     93e:	82 1b       	sub	r24, r18
     940:	93 0b       	sbc	r25, r19
     942:	20 91 81 03 	lds	r18, 0x0381
     946:	30 91 82 03 	lds	r19, 0x0382
     94a:	82 1b       	sub	r24, r18
     94c:	93 0b       	sbc	r25, r19
     94e:	90 93 6a 03 	sts	0x036A, r25
     952:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[2] < 0) {
     956:	97 fd       	sbrc	r25, 7
     958:	ef c4       	rjmp	.+2526   	; 0x1338 <main+0x117a>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
     95a:	80 91 41 03 	lds	r24, 0x0341
     95e:	90 91 42 03 	lds	r25, 0x0342
     962:	20 91 43 03 	lds	r18, 0x0343
     966:	30 91 44 03 	lds	r19, 0x0344
     96a:	82 1b       	sub	r24, r18
     96c:	93 0b       	sbc	r25, r19
     96e:	20 91 83 03 	lds	r18, 0x0383
     972:	30 91 84 03 	lds	r19, 0x0384
     976:	82 1b       	sub	r24, r18
     978:	93 0b       	sbc	r25, r19
     97a:	90 93 6c 03 	sts	0x036C, r25
     97e:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[3] < 0) {
     982:	97 fd       	sbrc	r25, 7
     984:	d4 c4       	rjmp	.+2472   	; 0x132e <main+0x1170>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
     986:	80 91 45 03 	lds	r24, 0x0345
     98a:	90 91 46 03 	lds	r25, 0x0346
     98e:	20 91 47 03 	lds	r18, 0x0347
     992:	30 91 48 03 	lds	r19, 0x0348
     996:	82 1b       	sub	r24, r18
     998:	93 0b       	sbc	r25, r19
     99a:	20 91 85 03 	lds	r18, 0x0385
     99e:	30 91 86 03 	lds	r19, 0x0386
     9a2:	82 1b       	sub	r24, r18
     9a4:	93 0b       	sbc	r25, r19
     9a6:	90 93 6e 03 	sts	0x036E, r25
     9aa:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[4] < 0) {
     9ae:	97 fd       	sbrc	r25, 7
     9b0:	b9 c4       	rjmp	.+2418   	; 0x1324 <main+0x1166>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
     9b2:	80 91 49 03 	lds	r24, 0x0349
     9b6:	90 91 4a 03 	lds	r25, 0x034A
     9ba:	20 91 4b 03 	lds	r18, 0x034B
     9be:	30 91 4c 03 	lds	r19, 0x034C
     9c2:	82 1b       	sub	r24, r18
     9c4:	93 0b       	sbc	r25, r19
     9c6:	20 91 87 03 	lds	r18, 0x0387
     9ca:	30 91 88 03 	lds	r19, 0x0388
     9ce:	82 1b       	sub	r24, r18
     9d0:	93 0b       	sbc	r25, r19
     9d2:	90 93 70 03 	sts	0x0370, r25
     9d6:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[5] < 0) {
     9da:	97 fd       	sbrc	r25, 7
     9dc:	9e c4       	rjmp	.+2364   	; 0x131a <main+0x115c>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
     9de:	80 91 4d 03 	lds	r24, 0x034D
     9e2:	90 91 4e 03 	lds	r25, 0x034E
     9e6:	20 91 4f 03 	lds	r18, 0x034F
     9ea:	30 91 50 03 	lds	r19, 0x0350
     9ee:	82 1b       	sub	r24, r18
     9f0:	93 0b       	sbc	r25, r19
     9f2:	20 91 89 03 	lds	r18, 0x0389
     9f6:	30 91 8a 03 	lds	r19, 0x038A
     9fa:	82 1b       	sub	r24, r18
     9fc:	93 0b       	sbc	r25, r19
     9fe:	90 93 72 03 	sts	0x0372, r25
     a02:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[6] < 0) {
     a06:	97 fd       	sbrc	r25, 7
     a08:	83 c4       	rjmp	.+2310   	; 0x1310 <main+0x1152>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
     a0a:	80 91 51 03 	lds	r24, 0x0351
     a0e:	90 91 52 03 	lds	r25, 0x0352
     a12:	20 91 53 03 	lds	r18, 0x0353
     a16:	30 91 54 03 	lds	r19, 0x0354
     a1a:	82 1b       	sub	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	20 91 8b 03 	lds	r18, 0x038B
     a22:	30 91 8c 03 	lds	r19, 0x038C
     a26:	82 1b       	sub	r24, r18
     a28:	93 0b       	sbc	r25, r19
     a2a:	90 93 74 03 	sts	0x0374, r25
     a2e:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[7] < 0) {
     a32:	97 fd       	sbrc	r25, 7
     a34:	68 c4       	rjmp	.+2256   	; 0x1306 <main+0x1148>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
     a36:	80 91 55 03 	lds	r24, 0x0355
     a3a:	90 91 56 03 	lds	r25, 0x0356
     a3e:	20 91 57 03 	lds	r18, 0x0357
     a42:	30 91 58 03 	lds	r19, 0x0358
     a46:	82 1b       	sub	r24, r18
     a48:	93 0b       	sbc	r25, r19
     a4a:	20 91 8d 03 	lds	r18, 0x038D
     a4e:	30 91 8e 03 	lds	r19, 0x038E
     a52:	82 1b       	sub	r24, r18
     a54:	93 0b       	sbc	r25, r19
     a56:	90 93 76 03 	sts	0x0376, r25
     a5a:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[8] < 0) {
     a5e:	97 fd       	sbrc	r25, 7
     a60:	4d c4       	rjmp	.+2202   	; 0x12fc <main+0x113e>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
     a62:	80 91 59 03 	lds	r24, 0x0359
     a66:	90 91 5a 03 	lds	r25, 0x035A
     a6a:	20 91 5b 03 	lds	r18, 0x035B
     a6e:	30 91 5c 03 	lds	r19, 0x035C
     a72:	82 1b       	sub	r24, r18
     a74:	93 0b       	sbc	r25, r19
     a76:	20 91 8f 03 	lds	r18, 0x038F
     a7a:	30 91 90 03 	lds	r19, 0x0390
     a7e:	82 1b       	sub	r24, r18
     a80:	93 0b       	sbc	r25, r19
     a82:	90 93 78 03 	sts	0x0378, r25
     a86:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[9] < 0) {
     a8a:	97 fd       	sbrc	r25, 7
     a8c:	32 c4       	rjmp	.+2148   	; 0x12f2 <main+0x1134>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
     a8e:	80 91 5d 03 	lds	r24, 0x035D
     a92:	90 91 5e 03 	lds	r25, 0x035E
     a96:	20 91 5f 03 	lds	r18, 0x035F
     a9a:	30 91 60 03 	lds	r19, 0x0360
     a9e:	82 1b       	sub	r24, r18
     aa0:	93 0b       	sbc	r25, r19
     aa2:	20 91 91 03 	lds	r18, 0x0391
     aa6:	30 91 92 03 	lds	r19, 0x0392
     aaa:	82 1b       	sub	r24, r18
     aac:	93 0b       	sbc	r25, r19
     aae:	90 93 7a 03 	sts	0x037A, r25
     ab2:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[10] < 0) {
     ab6:	97 fd       	sbrc	r25, 7
     ab8:	53 c4       	rjmp	.+2214   	; 0x1360 <main+0x11a2>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23] - proximityOffset[11];	// ambient - (ambient+reflected) - offset
     aba:	80 91 61 03 	lds	r24, 0x0361
     abe:	90 91 62 03 	lds	r25, 0x0362
     ac2:	20 91 63 03 	lds	r18, 0x0363
     ac6:	30 91 64 03 	lds	r19, 0x0364
     aca:	82 1b       	sub	r24, r18
     acc:	93 0b       	sbc	r25, r19
     ace:	20 91 93 03 	lds	r18, 0x0393
     ad2:	30 91 94 03 	lds	r19, 0x0394
     ad6:	82 1b       	sub	r24, r18
     ad8:	93 0b       	sbc	r25, r19
     ada:	90 93 7c 03 	sts	0x037C, r25
     ade:	80 93 7b 03 	sts	0x037B, r24
				if(proximityResult[11] < 0) {
     ae2:	97 ff       	sbrs	r25, 7
     ae4:	e9 ce       	rjmp	.-558    	; 0x8b8 <main+0x6fa>
					proximityResult[11] = 0;
     ae6:	10 92 7c 03 	sts	0x037C, r1
     aea:	10 92 7b 03 	sts	0x037B, r1
     aee:	e4 ce       	rjmp	.-568    	; 0x8b8 <main+0x6fa>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	60 e7       	ldi	r22, 0x70	; 112
     af4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <mirf_config_register>

			mirf_get_data(rfData);
     af8:	86 e5       	ldi	r24, 0x56	; 86
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <mirf_get_data>
			flush_rx_fifo();
     b00:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <flush_rx_fifo>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     b04:	40 91 56 04 	lds	r20, 0x0456
     b08:	44 23       	and	r20, r20
     b0a:	69 f4       	brne	.+26     	; 0xb26 <main+0x968>
     b0c:	80 91 57 04 	lds	r24, 0x0457
     b10:	88 23       	and	r24, r24
     b12:	49 f4       	brne	.+18     	; 0xb26 <main+0x968>
     b14:	80 91 58 04 	lds	r24, 0x0458
     b18:	88 23       	and	r24, r24
     b1a:	29 f4       	brne	.+10     	; 0xb26 <main+0x968>
     b1c:	80 91 59 04 	lds	r24, 0x0459
     b20:	88 30       	cpi	r24, 0x08	; 8
     b22:	09 f4       	brne	.+2      	; 0xb26 <main+0x968>
     b24:	40 c7       	rjmp	.+3712   	; 0x19a6 <main+0x17e8>
     b26:	60 91 5a 04 	lds	r22, 0x045A
     b2a:	50 91 5b 04 	lds	r21, 0x045B

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     b2e:	26 2f       	mov	r18, r22
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	2f 77       	andi	r18, 0x7F	; 127
     b34:	30 70       	andi	r19, 0x00	; 0
     b36:	30 93 06 04 	sts	0x0406, r19
     b3a:	20 93 05 04 	sts	0x0405, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     b3e:	85 2f       	mov	r24, r21
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	90 70       	andi	r25, 0x00	; 0
     b46:	90 93 04 04 	sts	0x0404, r25
     b4a:	80 93 03 04 	sts	0x0403, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
     b4e:	67 fd       	sbrc	r22, 7
     b50:	71 c4       	rjmp	.+2274   	; 0x1434 <main+0x1276>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	22 0f       	add	r18, r18
     b58:	33 1f       	adc	r19, r19
     b5a:	30 95       	com	r19
     b5c:	21 95       	neg	r18
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	30 93 ed 03 	sts	0x03ED, r19
     b64:	20 93 ec 03 	sts	0x03EC, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
     b68:	57 fd       	sbrc	r21, 7
     b6a:	5b c4       	rjmp	.+2230   	; 0x1422 <main+0x1264>
				pwm_left_desired = speedl<<2;
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	90 95       	com	r25
     b76:	81 95       	neg	r24
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	90 93 ef 03 	sts	0x03EF, r25
     b7e:	80 93 ee 03 	sts	0x03EE, r24
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     b82:	a2 e0       	ldi	r26, 0x02	; 2
     b84:	21 30       	cpi	r18, 0x01	; 1
     b86:	3a 07       	cpc	r19, r26
     b88:	44 f0       	brlt	.+16     	; 0xb9a <main+0x9dc>
     b8a:	e0 e0       	ldi	r30, 0x00	; 0
     b8c:	f2 e0       	ldi	r31, 0x02	; 2
     b8e:	f0 93 ed 03 	sts	0x03ED, r31
     b92:	e0 93 ec 03 	sts	0x03EC, r30
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	32 e0       	ldi	r19, 0x02	; 2
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     b9a:	f2 e0       	ldi	r31, 0x02	; 2
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	9f 07       	cpc	r25, r31
     ba0:	34 f0       	brlt	.+12     	; 0xbae <main+0x9f0>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	90 93 ef 03 	sts	0x03EF, r25
     baa:	80 93 ee 03 	sts	0x03EE, r24
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     bae:	ae ef       	ldi	r26, 0xFE	; 254
     bb0:	20 30       	cpi	r18, 0x00	; 0
     bb2:	3a 07       	cpc	r19, r26
     bb4:	34 f4       	brge	.+12     	; 0xbc2 <main+0xa04>
     bb6:	e0 e0       	ldi	r30, 0x00	; 0
     bb8:	fe ef       	ldi	r31, 0xFE	; 254
     bba:	f0 93 ed 03 	sts	0x03ED, r31
     bbe:	e0 93 ec 03 	sts	0x03EC, r30
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     bc2:	fe ef       	ldi	r31, 0xFE	; 254
     bc4:	80 30       	cpi	r24, 0x00	; 0
     bc6:	9f 07       	cpc	r25, r31
     bc8:	34 f4       	brge	.+12     	; 0xbd6 <main+0xa18>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3e ef       	ldi	r19, 0xFE	; 254
     bce:	30 93 ef 03 	sts	0x03EF, r19
     bd2:	20 93 ee 03 	sts	0x03EE, r18


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	50 93 4f 04 	sts	0x044F, r21
     bdc:	40 93 4e 04 	sts	0x044E, r20
     be0:	20 91 57 04 	lds	r18, 0x0457
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	30 93 51 04 	sts	0x0451, r19
     bea:	20 93 50 04 	sts	0x0450, r18
     bee:	e0 91 58 04 	lds	r30, 0x0458
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	f0 93 53 04 	sts	0x0453, r31
     bf8:	e0 93 52 04 	sts	0x0452, r30
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     bfc:	94 2f       	mov	r25, r20
     bfe:	88 27       	eor	r24, r24
     c00:	84 1b       	sub	r24, r20
     c02:	95 0b       	sbc	r25, r21
     c04:	64 e6       	ldi	r22, 0x64	; 100
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	0e 94 45 23 	call	0x468a	; 0x468a <__udivmodhi4>
     c0c:	c6 2e       	mov	r12, r22
     c0e:	c0 94       	com	r12
     c10:	c0 92 14 02 	sts	0x0214, r12
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     c14:	52 2f       	mov	r21, r18
     c16:	44 27       	eor	r20, r20
     c18:	42 1b       	sub	r20, r18
     c1a:	53 0b       	sbc	r21, r19
     c1c:	ca 01       	movw	r24, r20
     c1e:	64 e6       	ldi	r22, 0x64	; 100
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 45 23 	call	0x468a	; 0x468a <__udivmodhi4>
     c26:	60 95       	com	r22
     c28:	60 93 16 02 	sts	0x0216, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     c2c:	3e 2f       	mov	r19, r30
     c2e:	22 27       	eor	r18, r18
     c30:	2e 1b       	sub	r18, r30
     c32:	3f 0b       	sbc	r19, r31
     c34:	c9 01       	movw	r24, r18
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 45 23 	call	0x468a	; 0x468a <__udivmodhi4>
     c3e:	60 95       	com	r22
     c40:	60 93 15 02 	sts	0x0215, r22
			updateRedLed(pwm_red);
     c44:	8c 2d       	mov	r24, r12
     c46:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <updateRedLed>
			updateGreenLed(pwm_green);
     c4a:	80 91 15 02 	lds	r24, 0x0215
     c4e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <updateGreenLed>
			updateBlueLed(pwm_blue);
     c52:	80 91 16 02 	lds	r24, 0x0216
     c56:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     c5a:	80 91 59 04 	lds	r24, 0x0459
     c5e:	80 ff       	sbrs	r24, 0
     c60:	04 c2       	rjmp	.+1032   	; 0x106a <main+0xeac>
				LED_IR1_LOW;
     c62:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     c64:	81 ff       	sbrs	r24, 1
     c66:	ff c1       	rjmp	.+1022   	; 0x1066 <main+0xea8>
				LED_IR2_LOW;
     c68:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     c6a:	98 2f       	mov	r25, r24
     c6c:	82 ff       	sbrs	r24, 2
     c6e:	dc c1       	rjmp	.+952    	; 0x1028 <main+0xe6a>
				irEnabled = 1;
     c70:	10 93 19 02 	sts	0x0219, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     c74:	94 fd       	sbrc	r25, 4
     c76:	dc c1       	rjmp	.+952    	; 0x1030 <main+0xe72>
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     c78:	96 ff       	sbrs	r25, 6
     c7a:	d3 c1       	rjmp	.+934    	; 0x1022 <main+0xe64>
				obstacleAvoidanceEnabled = 1;
     c7c:	10 93 30 04 	sts	0x0430, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     c80:	88 0f       	add	r24, r24
     c82:	88 0b       	sbc	r24, r24
     c84:	81 23       	and	r24, r17
     c86:	80 93 35 04 	sts	0x0435, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
     c8a:	80 91 13 02 	lds	r24, 0x0213
     c8e:	80 93 3e 04 	sts	0x043E, r24

			switch(packetId) {
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	09 f4       	brne	.+2      	; 0xc98 <main+0xada>
     c96:	d3 c5       	rjmp	.+2982   	; 0x183e <main+0x1680>
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <main+0xae0>
     c9c:	45 c2       	rjmp	.+1162   	; 0x1128 <main+0xf6a>
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	09 f0       	breq	.+2      	; 0xca4 <main+0xae6>
     ca2:	5c c0       	rjmp	.+184    	; 0xd5c <main+0xb9e>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     ca4:	90 91 65 03 	lds	r25, 0x0365
     ca8:	80 91 66 03 	lds	r24, 0x0366
     cac:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[2] = proximityResult[0]>>8;
     cb0:	80 93 40 04 	sts	0x0440, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     cb4:	90 91 67 03 	lds	r25, 0x0367
     cb8:	80 91 68 03 	lds	r24, 0x0368
     cbc:	90 93 41 04 	sts	0x0441, r25
					ackPayload[4] = proximityResult[1]>>8;
     cc0:	80 93 42 04 	sts	0x0442, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     cc4:	90 91 69 03 	lds	r25, 0x0369
     cc8:	80 91 6a 03 	lds	r24, 0x036A
     ccc:	90 93 43 04 	sts	0x0443, r25
					ackPayload[6] = proximityResult[2]>>8;
     cd0:	80 93 44 04 	sts	0x0444, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     cd4:	90 91 6b 03 	lds	r25, 0x036B
     cd8:	80 91 6c 03 	lds	r24, 0x036C
     cdc:	90 93 45 04 	sts	0x0445, r25
					ackPayload[8] = proximityResult[3]>>8;
     ce0:	80 93 46 04 	sts	0x0446, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     ce4:	90 91 6f 03 	lds	r25, 0x036F
     ce8:	80 91 70 03 	lds	r24, 0x0370
     cec:	90 93 47 04 	sts	0x0447, r25
					ackPayload[10] = proximityResult[5]>>8;
     cf0:	80 93 48 04 	sts	0x0448, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     cf4:	90 91 71 03 	lds	r25, 0x0371
     cf8:	80 91 72 03 	lds	r24, 0x0372
     cfc:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = proximityResult[6]>>8;
     d00:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     d04:	90 91 73 03 	lds	r25, 0x0373
     d08:	80 91 74 03 	lds	r24, 0x0374
     d0c:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = proximityResult[7]>>8;
     d10:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
     d14:	20 91 03 01 	lds	r18, 0x0103
     d18:	80 91 03 01 	lds	r24, 0x0103
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	80 72       	andi	r24, 0x20	; 32
     d20:	90 70       	andi	r25, 0x00	; 0
     d22:	95 95       	asr	r25
     d24:	87 95       	ror	r24
     d26:	95 95       	asr	r25
     d28:	87 95       	ror	r24
     d2a:	95 95       	asr	r25
     d2c:	87 95       	ror	r24
     d2e:	95 95       	asr	r25
     d30:	87 95       	ror	r24
     d32:	95 95       	asr	r25
     d34:	87 95       	ror	r24
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	20 71       	andi	r18, 0x10	; 16
     d3e:	30 70       	andi	r19, 0x00	; 0
     d40:	35 95       	asr	r19
     d42:	27 95       	ror	r18
     d44:	35 95       	asr	r19
     d46:	27 95       	ror	r18
     d48:	35 95       	asr	r19
     d4a:	27 95       	ror	r18
     d4c:	35 95       	asr	r19
     d4e:	27 95       	ror	r18
     d50:	82 2b       	or	r24, r18
     d52:	80 93 4d 04 	sts	0x044D, r24
					packetId = 4;
     d56:	34 e0       	ldi	r19, 0x04	; 4
     d58:	30 93 13 02 	sts	0x0213, r19
					break;


			}

			writeAckPayload(ackPayload, 16);
     d5c:	8e e3       	ldi	r24, 0x3E	; 62
     d5e:	94 e0       	ldi	r25, 0x04	; 4
     d60:	60 e1       	ldi	r22, 0x10	; 16
     d62:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <writeAckPayload>
     d66:	63 cc       	rjmp	.-1850   	; 0x62e <main+0x470>

		}

		if(irEnabled) {

			ir_move = e_get_data();
     d68:	0e 94 73 10 	call	0x20e6	; 0x20e6 <e_get_data>
     d6c:	80 93 09 04 	sts	0x0409, r24

			if(command_received) {
     d70:	90 91 0a 04 	lds	r25, 0x040A
     d74:	99 23       	and	r25, r25
     d76:	09 f4       	brne	.+2      	; 0xd7a <main+0xbbc>
     d78:	4f c1       	rjmp	.+670    	; 0x1018 <main+0xe5a>

				command_received = 0;
     d7a:	10 92 0a 04 	sts	0x040A, r1

				switch(ir_move) {
     d7e:	e8 2f       	mov	r30, r24
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	e5 33       	cpi	r30, 0x35	; 53
     d84:	f1 05       	cpc	r31, r1
     d86:	08 f4       	brcc	.+2      	; 0xd8a <main+0xbcc>
     d88:	5e c3       	rjmp	.+1724   	; 0x1446 <main+0x1288>
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
     d8a:	20 91 ec 03 	lds	r18, 0x03EC
     d8e:	30 91 ed 03 	lds	r19, 0x03ED
     d92:	80 91 ee 03 	lds	r24, 0x03EE
     d96:	90 91 ef 03 	lds	r25, 0x03EF
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
     d9a:	37 fd       	sbrc	r19, 7
     d9c:	6f c3       	rjmp	.+1758   	; 0x147c <main+0x12be>
					speedr = pwm_right_desired >> 2;
     d9e:	35 95       	asr	r19
     da0:	27 95       	ror	r18
     da2:	35 95       	asr	r19
     da4:	27 95       	ror	r18
				} else {
					speedr = (-pwm_right_desired) >> 2;
     da6:	30 93 06 04 	sts	0x0406, r19
     daa:	20 93 05 04 	sts	0x0405, r18
				}
				if(pwm_left_desired >= 0) {
     dae:	97 fd       	sbrc	r25, 7
     db0:	28 c1       	rjmp	.+592    	; 0x1002 <main+0xe44>
					speedl = pwm_left_desired >> 2;
     db2:	95 95       	asr	r25
     db4:	87 95       	ror	r24
     db6:	95 95       	asr	r25
     db8:	87 95       	ror	r24
     dba:	90 93 04 04 	sts	0x0404, r25
     dbe:	80 93 03 04 	sts	0x0403, r24
     dc2:	20 91 2a 04 	lds	r18, 0x042A
     dc6:	30 91 2b 04 	lds	r19, 0x042B
     dca:	24 cc       	rjmp	.-1976   	; 0x614 <main+0x456>

		} else if(calibrationCycle == CALIBRATION_CYCLES) {

			for (i=0;i<12;i++) {
				//proximityOffset[i]=(unsigned int)((float)proximitySum[i]/(float)calibrationCycle);
				proximityOffset[i] = proximitySum[i]>>4;
     dcc:	80 91 9f 03 	lds	r24, 0x039F
     dd0:	90 91 a0 03 	lds	r25, 0x03A0
     dd4:	a0 91 a1 03 	lds	r26, 0x03A1
     dd8:	b0 91 a2 03 	lds	r27, 0x03A2
     ddc:	64 e0       	ldi	r22, 0x04	; 4
     dde:	b6 95       	lsr	r27
     de0:	a7 95       	ror	r26
     de2:	97 95       	ror	r25
     de4:	87 95       	ror	r24
     de6:	6a 95       	dec	r22
     de8:	d1 f7       	brne	.-12     	; 0xdde <main+0xc20>
     dea:	90 93 7e 03 	sts	0x037E, r25
     dee:	80 93 7d 03 	sts	0x037D, r24
     df2:	80 91 a3 03 	lds	r24, 0x03A3
     df6:	90 91 a4 03 	lds	r25, 0x03A4
     dfa:	a0 91 a5 03 	lds	r26, 0x03A5
     dfe:	b0 91 a6 03 	lds	r27, 0x03A6
     e02:	54 e0       	ldi	r21, 0x04	; 4
     e04:	b6 95       	lsr	r27
     e06:	a7 95       	ror	r26
     e08:	97 95       	ror	r25
     e0a:	87 95       	ror	r24
     e0c:	5a 95       	dec	r21
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <main+0xc46>
     e10:	90 93 80 03 	sts	0x0380, r25
     e14:	80 93 7f 03 	sts	0x037F, r24
     e18:	80 91 a7 03 	lds	r24, 0x03A7
     e1c:	90 91 a8 03 	lds	r25, 0x03A8
     e20:	a0 91 a9 03 	lds	r26, 0x03A9
     e24:	b0 91 aa 03 	lds	r27, 0x03AA
     e28:	44 e0       	ldi	r20, 0x04	; 4
     e2a:	b6 95       	lsr	r27
     e2c:	a7 95       	ror	r26
     e2e:	97 95       	ror	r25
     e30:	87 95       	ror	r24
     e32:	4a 95       	dec	r20
     e34:	d1 f7       	brne	.-12     	; 0xe2a <main+0xc6c>
     e36:	90 93 82 03 	sts	0x0382, r25
     e3a:	80 93 81 03 	sts	0x0381, r24
     e3e:	80 91 ab 03 	lds	r24, 0x03AB
     e42:	90 91 ac 03 	lds	r25, 0x03AC
     e46:	a0 91 ad 03 	lds	r26, 0x03AD
     e4a:	b0 91 ae 03 	lds	r27, 0x03AE
     e4e:	f4 e0       	ldi	r31, 0x04	; 4
     e50:	b6 95       	lsr	r27
     e52:	a7 95       	ror	r26
     e54:	97 95       	ror	r25
     e56:	87 95       	ror	r24
     e58:	fa 95       	dec	r31
     e5a:	d1 f7       	brne	.-12     	; 0xe50 <main+0xc92>
     e5c:	90 93 84 03 	sts	0x0384, r25
     e60:	80 93 83 03 	sts	0x0383, r24
     e64:	80 91 af 03 	lds	r24, 0x03AF
     e68:	90 91 b0 03 	lds	r25, 0x03B0
     e6c:	a0 91 b1 03 	lds	r26, 0x03B1
     e70:	b0 91 b2 03 	lds	r27, 0x03B2
     e74:	e4 e0       	ldi	r30, 0x04	; 4
     e76:	b6 95       	lsr	r27
     e78:	a7 95       	ror	r26
     e7a:	97 95       	ror	r25
     e7c:	87 95       	ror	r24
     e7e:	ea 95       	dec	r30
     e80:	d1 f7       	brne	.-12     	; 0xe76 <main+0xcb8>
     e82:	90 93 86 03 	sts	0x0386, r25
     e86:	80 93 85 03 	sts	0x0385, r24
     e8a:	80 91 b3 03 	lds	r24, 0x03B3
     e8e:	90 91 b4 03 	lds	r25, 0x03B4
     e92:	a0 91 b5 03 	lds	r26, 0x03B5
     e96:	b0 91 b6 03 	lds	r27, 0x03B6
     e9a:	74 e0       	ldi	r23, 0x04	; 4
     e9c:	b6 95       	lsr	r27
     e9e:	a7 95       	ror	r26
     ea0:	97 95       	ror	r25
     ea2:	87 95       	ror	r24
     ea4:	7a 95       	dec	r23
     ea6:	d1 f7       	brne	.-12     	; 0xe9c <main+0xcde>
     ea8:	90 93 88 03 	sts	0x0388, r25
     eac:	80 93 87 03 	sts	0x0387, r24
     eb0:	80 91 b7 03 	lds	r24, 0x03B7
     eb4:	90 91 b8 03 	lds	r25, 0x03B8
     eb8:	a0 91 b9 03 	lds	r26, 0x03B9
     ebc:	b0 91 ba 03 	lds	r27, 0x03BA
     ec0:	64 e0       	ldi	r22, 0x04	; 4
     ec2:	b6 95       	lsr	r27
     ec4:	a7 95       	ror	r26
     ec6:	97 95       	ror	r25
     ec8:	87 95       	ror	r24
     eca:	6a 95       	dec	r22
     ecc:	d1 f7       	brne	.-12     	; 0xec2 <main+0xd04>
     ece:	90 93 8a 03 	sts	0x038A, r25
     ed2:	80 93 89 03 	sts	0x0389, r24
     ed6:	80 91 bb 03 	lds	r24, 0x03BB
     eda:	90 91 bc 03 	lds	r25, 0x03BC
     ede:	a0 91 bd 03 	lds	r26, 0x03BD
     ee2:	b0 91 be 03 	lds	r27, 0x03BE
     ee6:	54 e0       	ldi	r21, 0x04	; 4
     ee8:	b6 95       	lsr	r27
     eea:	a7 95       	ror	r26
     eec:	97 95       	ror	r25
     eee:	87 95       	ror	r24
     ef0:	5a 95       	dec	r21
     ef2:	d1 f7       	brne	.-12     	; 0xee8 <main+0xd2a>
     ef4:	90 93 8c 03 	sts	0x038C, r25
     ef8:	80 93 8b 03 	sts	0x038B, r24
     efc:	80 91 bf 03 	lds	r24, 0x03BF
     f00:	90 91 c0 03 	lds	r25, 0x03C0
     f04:	a0 91 c1 03 	lds	r26, 0x03C1
     f08:	b0 91 c2 03 	lds	r27, 0x03C2
     f0c:	44 e0       	ldi	r20, 0x04	; 4
     f0e:	b6 95       	lsr	r27
     f10:	a7 95       	ror	r26
     f12:	97 95       	ror	r25
     f14:	87 95       	ror	r24
     f16:	4a 95       	dec	r20
     f18:	d1 f7       	brne	.-12     	; 0xf0e <main+0xd50>
     f1a:	90 93 8e 03 	sts	0x038E, r25
     f1e:	80 93 8d 03 	sts	0x038D, r24
     f22:	80 91 c3 03 	lds	r24, 0x03C3
     f26:	90 91 c4 03 	lds	r25, 0x03C4
     f2a:	a0 91 c5 03 	lds	r26, 0x03C5
     f2e:	b0 91 c6 03 	lds	r27, 0x03C6
     f32:	f4 e0       	ldi	r31, 0x04	; 4
     f34:	b6 95       	lsr	r27
     f36:	a7 95       	ror	r26
     f38:	97 95       	ror	r25
     f3a:	87 95       	ror	r24
     f3c:	fa 95       	dec	r31
     f3e:	d1 f7       	brne	.-12     	; 0xf34 <main+0xd76>
     f40:	90 93 90 03 	sts	0x0390, r25
     f44:	80 93 8f 03 	sts	0x038F, r24
     f48:	80 91 c7 03 	lds	r24, 0x03C7
     f4c:	90 91 c8 03 	lds	r25, 0x03C8
     f50:	a0 91 c9 03 	lds	r26, 0x03C9
     f54:	b0 91 ca 03 	lds	r27, 0x03CA
     f58:	e4 e0       	ldi	r30, 0x04	; 4
     f5a:	b6 95       	lsr	r27
     f5c:	a7 95       	ror	r26
     f5e:	97 95       	ror	r25
     f60:	87 95       	ror	r24
     f62:	ea 95       	dec	r30
     f64:	d1 f7       	brne	.-12     	; 0xf5a <main+0xd9c>
     f66:	90 93 92 03 	sts	0x0392, r25
     f6a:	80 93 91 03 	sts	0x0391, r24
     f6e:	80 91 cb 03 	lds	r24, 0x03CB
     f72:	90 91 cc 03 	lds	r25, 0x03CC
     f76:	a0 91 cd 03 	lds	r26, 0x03CD
     f7a:	b0 91 ce 03 	lds	r27, 0x03CE
     f7e:	74 e0       	ldi	r23, 0x04	; 4
     f80:	b6 95       	lsr	r27
     f82:	a7 95       	ror	r26
     f84:	97 95       	ror	r25
     f86:	87 95       	ror	r24
     f88:	7a 95       	dec	r23
     f8a:	d1 f7       	brne	.-12     	; 0xf80 <main+0xdc2>
     f8c:	90 93 94 03 	sts	0x0394, r25
     f90:	80 93 93 03 	sts	0x0393, r24
			}

			accOffsetX = accOffsetXSum>>4;
     f94:	80 91 22 04 	lds	r24, 0x0422
     f98:	90 91 23 04 	lds	r25, 0x0423
     f9c:	95 95       	asr	r25
     f9e:	87 95       	ror	r24
     fa0:	95 95       	asr	r25
     fa2:	87 95       	ror	r24
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	90 93 1b 04 	sts	0x041B, r25
     fb0:	80 93 1a 04 	sts	0x041A, r24
			accOffsetY = accOffsetYSum>>4;
     fb4:	80 91 24 04 	lds	r24, 0x0424
     fb8:	90 91 25 04 	lds	r25, 0x0425
     fbc:	95 95       	asr	r25
     fbe:	87 95       	ror	r24
     fc0:	95 95       	asr	r25
     fc2:	87 95       	ror	r24
     fc4:	95 95       	asr	r25
     fc6:	87 95       	ror	r24
     fc8:	95 95       	asr	r25
     fca:	87 95       	ror	r24
     fcc:	90 93 1d 04 	sts	0x041D, r25
     fd0:	80 93 1c 04 	sts	0x041C, r24
			accOffsetZ = accOffsetZSum>>4;
     fd4:	80 91 26 04 	lds	r24, 0x0426
     fd8:	90 91 27 04 	lds	r25, 0x0427
     fdc:	95 95       	asr	r25
     fde:	87 95       	ror	r24
     fe0:	95 95       	asr	r25
     fe2:	87 95       	ror	r24
     fe4:	95 95       	asr	r25
     fe6:	87 95       	ror	r24
     fe8:	95 95       	asr	r25
     fea:	87 95       	ror	r24
     fec:	90 93 1f 04 	sts	0x041F, r25
     ff0:	80 93 1e 04 	sts	0x041E, r24

			startCalibration = 0;
     ff4:	10 92 2d 04 	sts	0x042D, r1
			calibrationCycle = 0;
     ff8:	10 92 2f 04 	sts	0x042F, r1
     ffc:	10 92 2e 04 	sts	0x042E, r1
    1000:	04 cb       	rjmp	.-2552   	; 0x60a <main+0x44c>
					speedr = (-pwm_right_desired) >> 2;
				}
				if(pwm_left_desired >= 0) {
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
    1002:	90 95       	com	r25
    1004:	81 95       	neg	r24
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	95 95       	asr	r25
    100a:	87 95       	ror	r24
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	90 93 04 04 	sts	0x0404, r25
    1014:	80 93 03 04 	sts	0x0403, r24
    1018:	20 91 2a 04 	lds	r18, 0x042A
    101c:	30 91 2b 04 	lds	r19, 0x042B
    1020:	f9 ca       	rjmp	.-2574   	; 0x614 <main+0x456>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    1022:	10 92 30 04 	sts	0x0430, r1
    1026:	2c ce       	rjmp	.-936    	; 0xc80 <main+0xac2>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    1028:	10 92 19 02 	sts	0x0219, r1
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    102c:	94 ff       	sbrs	r25, 4
    102e:	24 ce       	rjmp	.-952    	; 0xc78 <main+0xaba>
				startCalibration = 1;
    1030:	10 93 2d 04 	sts	0x042D, r17
				calibrationCycle = 0;
    1034:	10 92 2f 04 	sts	0x042F, r1
    1038:	10 92 2e 04 	sts	0x042E, r1
				pwm_red = 0;
    103c:	10 92 14 02 	sts	0x0214, r1
				pwm_green = 0;
    1040:	10 92 15 02 	sts	0x0215, r1
				pwm_blue = 0;
    1044:	10 92 16 02 	sts	0x0216, r1
				updateRedLed(pwm_red);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <updateRedLed>
				updateGreenLed(pwm_green);
    104e:	80 91 15 02 	lds	r24, 0x0215
    1052:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <updateGreenLed>
				updateBlueLed(pwm_blue);
    1056:	80 91 16 02 	lds	r24, 0x0216
    105a:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <updateBlueLed>
    105e:	80 91 59 04 	lds	r24, 0x0459
    1062:	98 2f       	mov	r25, r24
    1064:	09 ce       	rjmp	.-1006   	; 0xc78 <main+0xaba>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    1066:	45 9a       	sbi	0x08, 5	; 8
    1068:	00 ce       	rjmp	.-1024   	; 0xc6a <main+0xaac>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    106a:	44 9a       	sbi	0x08, 4	; 8
    106c:	fb cd       	rjmp	.-1034   	; 0xc64 <main+0xaa6>
				obstacleAvoidance();
				//PORTB |= (1 << 7);
			}

			if(cliffAvoidanceEnabled) {
				cliffAvoidance();
    106e:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <cliffAvoidance>
    1072:	34 cb       	rjmp	.-2456   	; 0x6dc <main+0x51e>
            pwm_left_desired_to_control = pwm_left_desired;
            pwm_right_desired_to_control = pwm_right_desired;

			if(obstacleAvoidanceEnabled) {
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
    1074:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <obstacleAvoidance>
    1078:	2c cb       	rjmp	.-2472   	; 0x6d2 <main+0x514>

			update_pwm = 1;

		} else if(currentSelector == 1) {		// only orizzontal speed control

			if(compute_left_vel) {
    107a:	80 91 0f 02 	lds	r24, 0x020F
    107e:	88 23       	and	r24, r24
    1080:	09 f0       	breq	.+2      	; 0x1084 <main+0xec6>
    1082:	1c c4       	rjmp	.+2104   	; 0x18bc <main+0x16fe>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
    1084:	80 91 10 02 	lds	r24, 0x0210
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <main+0xed0>
    108c:	1e cc       	rjmp	.-1988   	; 0x8ca <main+0x70c>
				last_right_vel = right_vel_sum>>2;
    108e:	80 91 de 03 	lds	r24, 0x03DE
    1092:	90 91 df 03 	lds	r25, 0x03DF
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24
    109e:	90 93 e3 03 	sts	0x03E3, r25
    10a2:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
    10a6:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
    10aa:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
    10ae:	10 92 df 03 	sts	0x03DF, r1
    10b2:	10 92 de 03 	sts	0x03DE, r1

				pwm_right_working = pwm_right_desired;
    10b6:	80 91 ec 03 	lds	r24, 0x03EC
    10ba:	90 91 ed 03 	lds	r25, 0x03ED
    10be:	90 93 ff 03 	sts	0x03FF, r25
    10c2:	80 93 fe 03 	sts	0x03FE, r24
				pwm_right_desired_to_control = pwm_right_desired;
    10c6:	90 93 d9 03 	sts	0x03D9, r25
    10ca:	80 93 d8 03 	sts	0x03D8, r24

				start_orizzontal_speed_control_right(&pwm_right_working);
    10ce:	8e ef       	ldi	r24, 0xFE	; 254
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	0e 94 01 13 	call	0x2602	; 0x2602 <start_orizzontal_speed_control_right>

				pwm_right = pwm_right_working;
    10d6:	80 91 fe 03 	lds	r24, 0x03FE
    10da:	90 91 ff 03 	lds	r25, 0x03FF
    10de:	90 93 e5 03 	sts	0x03E5, r25
    10e2:	80 93 e4 03 	sts	0x03E4, r24
				//} else {
				//	OCR3A = 0;
				//	OCR3B = 0;
				//}

				if(pwm_right > 0) {
    10e6:	18 16       	cp	r1, r24
    10e8:	19 06       	cpc	r1, r25
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <main+0xf30>
    10ec:	ec c0       	rjmp	.+472    	; 0x12c6 <main+0x1108>
				}

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
    10ee:	90 93 99 00 	sts	0x0099, r25
    10f2:	80 93 98 00 	sts	0x0098, r24
    10f6:	e9 cb       	rjmp	.-2094   	; 0x8ca <main+0x70c>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	09 f0       	breq	.+2      	; 0x10fe <main+0xf40>
    10fc:	13 c4       	rjmp	.+2086   	; 0x1924 <main+0x1766>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
    10fe:	10 92 a9 00 	sts	0x00A9, r1
    1102:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
    1106:	10 92 ab 00 	sts	0x00AB, r1
    110a:	10 92 aa 00 	sts	0x00AA, r1
    110e:	7d c8       	rjmp	.-3846   	; 0x20a <main+0x4c>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <main+0xf58>
    1114:	10 c4       	rjmp	.+2080   	; 0x1936 <main+0x1778>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
    1116:	10 92 99 00 	sts	0x0099, r1
    111a:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
    111e:	10 92 9b 00 	sts	0x009B, r1
    1122:	10 92 9a 00 	sts	0x009A, r1
    1126:	f4 ca       	rjmp	.-2584   	; 0x710 <main+0x552>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    1128:	85 30       	cpi	r24, 0x05	; 5
    112a:	09 f4       	brne	.+2      	; 0x112e <main+0xf70>
    112c:	2c c3       	rjmp	.+1624   	; 0x1786 <main+0x15c8>
    112e:	86 30       	cpi	r24, 0x06	; 6
    1130:	09 f0       	breq	.+2      	; 0x1134 <main+0xf76>
    1132:	14 ce       	rjmp	.-984    	; 0xd5c <main+0xb9e>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    1134:	80 91 45 03 	lds	r24, 0x0345
    1138:	90 91 46 03 	lds	r25, 0x0346
    113c:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[2] = proximityValue[8]>>8;
    1140:	80 91 45 03 	lds	r24, 0x0345
    1144:	90 91 46 03 	lds	r25, 0x0346
    1148:	90 93 40 04 	sts	0x0440, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    114c:	80 91 55 03 	lds	r24, 0x0355
    1150:	90 91 56 03 	lds	r25, 0x0356
    1154:	80 93 41 04 	sts	0x0441, r24
					ackPayload[4] = proximityValue[16]>>8;
    1158:	80 91 55 03 	lds	r24, 0x0355
    115c:	90 91 56 03 	lds	r25, 0x0356
    1160:	90 93 42 04 	sts	0x0442, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    1164:	80 91 59 03 	lds	r24, 0x0359
    1168:	90 91 5a 03 	lds	r25, 0x035A
    116c:	80 93 43 04 	sts	0x0443, r24
					ackPayload[6] = proximityValue[18]>>8;
    1170:	80 91 59 03 	lds	r24, 0x0359
    1174:	90 91 5a 03 	lds	r25, 0x035A
    1178:	90 93 44 04 	sts	0x0444, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    117c:	80 91 5d 03 	lds	r24, 0x035D
    1180:	90 91 5e 03 	lds	r25, 0x035E
    1184:	80 93 45 04 	sts	0x0445, r24
					ackPayload[8] = proximityValue[20]>>8;
    1188:	80 91 5d 03 	lds	r24, 0x035D
    118c:	90 91 5e 03 	lds	r25, 0x035E
    1190:	90 93 46 04 	sts	0x0446, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    1194:	80 91 61 03 	lds	r24, 0x0361
    1198:	90 91 62 03 	lds	r25, 0x0362
    119c:	80 93 47 04 	sts	0x0447, r24
					ackPayload[10] = proximityValue[22]>>8;
    11a0:	80 91 61 03 	lds	r24, 0x0361
    11a4:	90 91 62 03 	lds	r25, 0x0362
    11a8:	90 93 48 04 	sts	0x0448, r25
					ackPayload[11] = accZ&0xFF;
    11ac:	90 91 12 04 	lds	r25, 0x0412
    11b0:	80 91 13 04 	lds	r24, 0x0413
    11b4:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = accZ>>8;
    11b8:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = batteryLevel&0xFF;
    11bc:	90 91 99 03 	lds	r25, 0x0399
    11c0:	80 91 9a 03 	lds	r24, 0x039A
    11c4:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = batteryLevel>>8;
    11c8:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = 0;
    11cc:	10 92 4d 04 	sts	0x044D, r1
					packetId = 3;
    11d0:	53 e0       	ldi	r21, 0x03	; 3
    11d2:	50 93 13 02 	sts	0x0213, r21
					break;
    11d6:	c2 cd       	rjmp	.-1148   	; 0xd5c <main+0xb9e>
					OCR3B = (unsigned int)(-pwm_right);
				}
			}
*/

			if(compute_left_vel) {
    11d8:	80 91 0f 02 	lds	r24, 0x020F
    11dc:	88 23       	and	r24, r24
    11de:	c9 f1       	breq	.+114    	; 0x1252 <main+0x1094>
				last_left_vel = left_vel_sum>>2;
    11e0:	80 91 dc 03 	lds	r24, 0x03DC
    11e4:	90 91 dd 03 	lds	r25, 0x03DD
    11e8:	96 95       	lsr	r25
    11ea:	87 95       	ror	r24
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	90 93 e1 03 	sts	0x03E1, r25
    11f4:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
    11f8:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
    11fc:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    1200:	10 92 dd 03 	sts	0x03DD, r1
    1204:	10 92 dc 03 	sts	0x03DC, r1

				pwm_left_working = pwm_left_desired;
    1208:	80 91 ee 03 	lds	r24, 0x03EE
    120c:	90 91 ef 03 	lds	r25, 0x03EF
    1210:	90 93 01 04 	sts	0x0401, r25
    1214:	80 93 00 04 	sts	0x0400, r24
				pwm_left_desired_to_control = pwm_left_desired;
    1218:	90 93 db 03 	sts	0x03DB, r25
    121c:	80 93 da 03 	sts	0x03DA, r24

				if(robotPosition == ORIZZONTAL_POS) {
    1220:	80 91 1e 02 	lds	r24, 0x021E
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	09 f4       	brne	.+2      	; 0x122a <main+0x106c>
    1228:	94 c3       	rjmp	.+1832   	; 0x1952 <main+0x1794>
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	94 e0       	ldi	r25, 0x04	; 4
    122e:	0e 94 77 10 	call	0x20ee	; 0x20ee <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
    1232:	80 91 00 04 	lds	r24, 0x0400
    1236:	90 91 01 04 	lds	r25, 0x0401
    123a:	90 93 e7 03 	sts	0x03E7, r25
    123e:	80 93 e6 03 	sts	0x03E6, r24

				if(pwm_left > 0) {
    1242:	18 16       	cp	r1, r24
    1244:	19 06       	cpc	r1, r25
    1246:	0c f0       	brlt	.+2      	; 0x124a <main+0x108c>
    1248:	89 c3       	rjmp	.+1810   	; 0x195c <main+0x179e>
					OCR4A = (unsigned int)pwm_left;
    124a:	90 93 a9 00 	sts	0x00A9, r25
    124e:	80 93 a8 00 	sts	0x00A8, r24
					OCR4A = 0;
					OCR4B = 0;
				}
			}

			if(compute_right_vel) {
    1252:	80 91 10 02 	lds	r24, 0x0210
    1256:	88 23       	and	r24, r24
    1258:	09 f4       	brne	.+2      	; 0x125c <main+0x109e>
    125a:	37 cb       	rjmp	.-2450   	; 0x8ca <main+0x70c>
				last_right_vel = right_vel_sum>>2;
    125c:	80 91 de 03 	lds	r24, 0x03DE
    1260:	90 91 df 03 	lds	r25, 0x03DF
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	90 93 e3 03 	sts	0x03E3, r25
    1270:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
    1274:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
    1278:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
    127c:	10 92 df 03 	sts	0x03DF, r1
    1280:	10 92 de 03 	sts	0x03DE, r1

				pwm_right_working = pwm_right_desired;
    1284:	80 91 ec 03 	lds	r24, 0x03EC
    1288:	90 91 ed 03 	lds	r25, 0x03ED
    128c:	90 93 ff 03 	sts	0x03FF, r25
    1290:	80 93 fe 03 	sts	0x03FE, r24
				pwm_right_desired_to_control = pwm_right_desired;
    1294:	90 93 d9 03 	sts	0x03D9, r25
    1298:	80 93 d8 03 	sts	0x03D8, r24

				if(robotPosition == ORIZZONTAL_POS) {
    129c:	80 91 1e 02 	lds	r24, 0x021E
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <main+0x10e8>
    12a4:	51 c3       	rjmp	.+1698   	; 0x1948 <main+0x178a>
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
    12a6:	8e ef       	ldi	r24, 0xFE	; 254
    12a8:	93 e0       	ldi	r25, 0x03	; 3
    12aa:	0e 94 bc 11 	call	0x2378	; 0x2378 <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
    12ae:	80 91 fe 03 	lds	r24, 0x03FE
    12b2:	90 91 ff 03 	lds	r25, 0x03FF
    12b6:	90 93 e5 03 	sts	0x03E5, r25
    12ba:	80 93 e4 03 	sts	0x03E4, r24

				if(pwm_right > 0) {
    12be:	18 16       	cp	r1, r24
    12c0:	19 06       	cpc	r1, r25
    12c2:	0c f4       	brge	.+2      	; 0x12c6 <main+0x1108>
    12c4:	14 cf       	rjmp	.-472    	; 0x10ee <main+0xf30>
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	09 f0       	breq	.+2      	; 0x12cc <main+0x110e>
    12ca:	74 c3       	rjmp	.+1768   	; 0x19b4 <main+0x17f6>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
    12cc:	10 92 99 00 	sts	0x0099, r1
    12d0:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    12d4:	10 92 9b 00 	sts	0x009B, r1
    12d8:	10 92 9a 00 	sts	0x009A, r1
    12dc:	f6 ca       	rjmp	.-2580   	; 0x8ca <main+0x70c>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    12de:	10 92 6a 03 	sts	0x036A, r1
    12e2:	10 92 69 03 	sts	0x0369, r1
    12e6:	58 ca       	rjmp	.-2896   	; 0x798 <main+0x5da>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    12e8:	10 92 68 03 	sts	0x0368, r1
    12ec:	10 92 67 03 	sts	0x0367, r1
    12f0:	43 ca       	rjmp	.-2938   	; 0x778 <main+0x5ba>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    12f2:	10 92 78 03 	sts	0x0378, r1
    12f6:	10 92 77 03 	sts	0x0377, r1
    12fa:	c9 cb       	rjmp	.-2158   	; 0xa8e <main+0x8d0>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    12fc:	10 92 76 03 	sts	0x0376, r1
    1300:	10 92 75 03 	sts	0x0375, r1
    1304:	ae cb       	rjmp	.-2212   	; 0xa62 <main+0x8a4>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    1306:	10 92 74 03 	sts	0x0374, r1
    130a:	10 92 73 03 	sts	0x0373, r1
    130e:	93 cb       	rjmp	.-2266   	; 0xa36 <main+0x878>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    1310:	10 92 72 03 	sts	0x0372, r1
    1314:	10 92 71 03 	sts	0x0371, r1
    1318:	78 cb       	rjmp	.-2320   	; 0xa0a <main+0x84c>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    131a:	10 92 70 03 	sts	0x0370, r1
    131e:	10 92 6f 03 	sts	0x036F, r1
    1322:	5d cb       	rjmp	.-2374   	; 0x9de <main+0x820>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    1324:	10 92 6e 03 	sts	0x036E, r1
    1328:	10 92 6d 03 	sts	0x036D, r1
    132c:	42 cb       	rjmp	.-2428   	; 0x9b2 <main+0x7f4>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    132e:	10 92 6c 03 	sts	0x036C, r1
    1332:	10 92 6b 03 	sts	0x036B, r1
    1336:	27 cb       	rjmp	.-2482   	; 0x986 <main+0x7c8>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    1338:	10 92 6a 03 	sts	0x036A, r1
    133c:	10 92 69 03 	sts	0x0369, r1
    1340:	0c cb       	rjmp	.-2536   	; 0x95a <main+0x79c>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    1342:	10 92 68 03 	sts	0x0368, r1
    1346:	10 92 67 03 	sts	0x0367, r1
    134a:	f1 ca       	rjmp	.-2590   	; 0x92e <main+0x770>

			} else {

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    134c:	10 92 66 03 	sts	0x0366, r1
    1350:	10 92 65 03 	sts	0x0365, r1
    1354:	d6 ca       	rjmp	.-2644   	; 0x902 <main+0x744>
			updateProx = 0;
			if(startCalibration) {

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    1356:	10 92 66 03 	sts	0x0366, r1
    135a:	10 92 65 03 	sts	0x0365, r1
    135e:	fc c9       	rjmp	.-3080   	; 0x758 <main+0x59a>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    1360:	10 92 7a 03 	sts	0x037A, r1
    1364:	10 92 79 03 	sts	0x0379, r1
    1368:	a8 cb       	rjmp	.-2224   	; 0xaba <main+0x8fc>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    136a:	10 92 72 03 	sts	0x0372, r1
    136e:	10 92 71 03 	sts	0x0371, r1
    1372:	52 ca       	rjmp	.-2908   	; 0x818 <main+0x65a>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    1374:	10 92 70 03 	sts	0x0370, r1
    1378:	10 92 6f 03 	sts	0x036F, r1
    137c:	3d ca       	rjmp	.-2950   	; 0x7f8 <main+0x63a>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    137e:	10 92 6e 03 	sts	0x036E, r1
    1382:	10 92 6d 03 	sts	0x036D, r1
    1386:	28 ca       	rjmp	.-2992   	; 0x7d8 <main+0x61a>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    1388:	10 92 6c 03 	sts	0x036C, r1
    138c:	10 92 6b 03 	sts	0x036B, r1
    1390:	13 ca       	rjmp	.-3034   	; 0x7b8 <main+0x5fa>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    1392:	10 92 7a 03 	sts	0x037A, r1
    1396:	10 92 79 03 	sts	0x0379, r1
    139a:	7e ca       	rjmp	.-2820   	; 0x898 <main+0x6da>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    139c:	10 92 78 03 	sts	0x0378, r1
    13a0:	10 92 77 03 	sts	0x0377, r1
    13a4:	69 ca       	rjmp	.-2862   	; 0x878 <main+0x6ba>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    13a6:	10 92 76 03 	sts	0x0376, r1
    13aa:	10 92 75 03 	sts	0x0375, r1
    13ae:	54 ca       	rjmp	.-2904   	; 0x858 <main+0x69a>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    13b0:	10 92 74 03 	sts	0x0374, r1
    13b4:	10 92 73 03 	sts	0x0373, r1
    13b8:	3f ca       	rjmp	.-2946   	; 0x838 <main+0x67a>

			if(proxUpdated) {

				proxUpdated = 0;

				if(calibrationCycle==0) {
    13ba:	1f 8e       	std	Y+31, r1	; 0x1f
    13bc:	18 a2       	std	Y+32, r1	; 0x20
    13be:	19 a2       	std	Y+33, r1	; 0x21
    13c0:	1a a2       	std	Y+34, r1	; 0x22
    13c2:	1b 8e       	std	Y+27, r1	; 0x1b
    13c4:	1c 8e       	std	Y+28, r1	; 0x1c
    13c6:	1d 8e       	std	Y+29, r1	; 0x1d
    13c8:	1e 8e       	std	Y+30, r1	; 0x1e
    13ca:	1f 8a       	std	Y+23, r1	; 0x17
    13cc:	18 8e       	std	Y+24, r1	; 0x18
    13ce:	19 8e       	std	Y+25, r1	; 0x19
    13d0:	1a 8e       	std	Y+26, r1	; 0x1a
    13d2:	1b 8a       	std	Y+19, r1	; 0x13
    13d4:	1c 8a       	std	Y+20, r1	; 0x14
    13d6:	1d 8a       	std	Y+21, r1	; 0x15
    13d8:	1e 8a       	std	Y+22, r1	; 0x16
    13da:	1f 86       	std	Y+15, r1	; 0x0f
    13dc:	18 8a       	std	Y+16, r1	; 0x10
    13de:	19 8a       	std	Y+17, r1	; 0x11
    13e0:	1a 8a       	std	Y+18, r1	; 0x12
    13e2:	1b 86       	std	Y+11, r1	; 0x0b
    13e4:	1c 86       	std	Y+12, r1	; 0x0c
    13e6:	1d 86       	std	Y+13, r1	; 0x0d
    13e8:	1e 86       	std	Y+14, r1	; 0x0e
    13ea:	1f 82       	std	Y+7, r1	; 0x07
    13ec:	18 86       	std	Y+8, r1	; 0x08
    13ee:	19 86       	std	Y+9, r1	; 0x09
    13f0:	1a 86       	std	Y+10, r1	; 0x0a
    13f2:	1b 82       	std	Y+3, r1	; 0x03
    13f4:	1c 82       	std	Y+4, r1	; 0x04
    13f6:	1d 82       	std	Y+5, r1	; 0x05
    13f8:	1e 82       	std	Y+6, r1	; 0x06
    13fa:	44 24       	eor	r4, r4
    13fc:	55 24       	eor	r5, r5
    13fe:	32 01       	movw	r6, r4
    1400:	88 24       	eor	r8, r8
    1402:	99 24       	eor	r9, r9
    1404:	54 01       	movw	r10, r8
    1406:	cc 24       	eor	r12, r12
    1408:	dd 24       	eor	r13, r13
    140a:	76 01       	movw	r14, r12
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	1a 82       	std	Y+2, r1	; 0x02
    1414:	19 82       	std	Y+1, r1	; 0x01
    1416:	22 24       	eor	r2, r2
    1418:	33 24       	eor	r3, r3
    141a:	1c a2       	std	Y+36, r1	; 0x24
    141c:	1b a2       	std	Y+35, r1	; 0x23
    141e:	0c 94 c4 01 	jmp	0x388	; 0x388 <main+0x1ca>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	90 93 ef 03 	sts	0x03EF, r25
    142e:	80 93 ee 03 	sts	0x03EE, r24
    1432:	a7 cb       	rjmp	.-2226   	; 0xb82 <main+0x9c4>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1434:	22 0f       	add	r18, r18
    1436:	33 1f       	adc	r19, r19
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	30 93 ed 03 	sts	0x03ED, r19
    1440:	20 93 ec 03 	sts	0x03EC, r18
    1444:	91 cb       	rjmp	.-2270   	; 0xb68 <main+0x9aa>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    1446:	ee 58       	subi	r30, 0x8E	; 142
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	05 90       	lpm	r0, Z+
    1450:	f4 91       	lpm	r31, Z+
    1452:	e0 2d       	mov	r30, r0
    1454:	19 94       	eijmp
							case 0:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    1456:	80 93 30 04 	sts	0x0430, r24
								cliffAvoidanceEnabled = 0;
    145a:	10 92 35 04 	sts	0x0435, r1
    145e:	95 cc       	rjmp	.-1750   	; 0xd8a <main+0xbcc>
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    1460:	10 92 30 04 	sts	0x0430, r1
								cliffAvoidanceEnabled = 1;
    1464:	10 93 35 04 	sts	0x0435, r17
    1468:	20 91 ec 03 	lds	r18, 0x03EC
    146c:	30 91 ed 03 	lds	r19, 0x03ED
    1470:	80 91 ee 03 	lds	r24, 0x03EE
    1474:	90 91 ef 03 	lds	r25, 0x03EF
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
    1478:	37 ff       	sbrs	r19, 7
    147a:	91 cc       	rjmp	.-1758   	; 0xd9e <main+0xbe0>
					speedr = pwm_right_desired >> 2;
    147c:	30 95       	com	r19
    147e:	21 95       	neg	r18
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	8d cc       	rjmp	.-1766   	; 0xd9e <main+0xbe0>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;

					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    1484:	10 92 30 04 	sts	0x0430, r1
    1488:	20 91 ec 03 	lds	r18, 0x03EC
    148c:	30 91 ed 03 	lds	r19, 0x03ED
    1490:	80 91 ee 03 	lds	r24, 0x03EE
    1494:	90 91 ef 03 	lds	r25, 0x03EF
						break;
    1498:	80 cc       	rjmp	.-1792   	; 0xd9a <main+0xbdc>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    149a:	10 93 30 04 	sts	0x0430, r17
    149e:	20 91 ec 03 	lds	r18, 0x03EC
    14a2:	30 91 ed 03 	lds	r19, 0x03ED
    14a6:	80 91 ee 03 	lds	r24, 0x03EE
    14aa:	90 91 ef 03 	lds	r25, 0x03EF
						break;
    14ae:	75 cc       	rjmp	.-1814   	; 0xd9a <main+0xbdc>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    14b0:	80 91 ee 03 	lds	r24, 0x03EE
    14b4:	90 91 ef 03 	lds	r25, 0x03EF
    14b8:	4e 97       	sbiw	r24, 0x1e	; 30
    14ba:	90 93 ef 03 	sts	0x03EF, r25
    14be:	80 93 ee 03 	sts	0x03EE, r24
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    14c2:	bc ef       	ldi	r27, 0xFC	; 252
    14c4:	80 30       	cpi	r24, 0x00	; 0
    14c6:	9b 07       	cpc	r25, r27
    14c8:	ac f5       	brge	.+106    	; 0x1534 <main+0x1376>
    14ca:	e0 e0       	ldi	r30, 0x00	; 0
    14cc:	fc ef       	ldi	r31, 0xFC	; 252
    14ce:	f0 93 ef 03 	sts	0x03EF, r31
    14d2:	e0 93 ee 03 	sts	0x03EE, r30
    14d6:	20 91 ec 03 	lds	r18, 0x03EC
    14da:	30 91 ed 03 	lds	r19, 0x03ED
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	9c ef       	ldi	r25, 0xFC	; 252
    14e2:	5b cc       	rjmp	.-1866   	; 0xd9a <main+0xbdc>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    14e4:	20 91 ec 03 	lds	r18, 0x03EC
    14e8:	30 91 ed 03 	lds	r19, 0x03ED
    14ec:	80 91 e6 03 	lds	r24, 0x03E6
    14f0:	90 91 e7 03 	lds	r25, 0x03E7
    14f4:	28 17       	cp	r18, r24
    14f6:	39 07       	cpc	r19, r25
    14f8:	24 f0       	brlt	.+8      	; 0x1502 <main+0x1344>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    14fa:	20 91 ee 03 	lds	r18, 0x03EE
    14fe:	30 91 ef 03 	lds	r19, 0x03EF
						}
						pwm_right_desired -= STEP_MOTORS;
    1502:	2e 51       	subi	r18, 0x1E	; 30
    1504:	30 40       	sbci	r19, 0x00	; 0
    1506:	30 93 ed 03 	sts	0x03ED, r19
    150a:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired -= STEP_MOTORS;
    150e:	c9 01       	movw	r24, r18
    1510:	30 93 ef 03 	sts	0x03EF, r19
    1514:	20 93 ee 03 	sts	0x03EE, r18
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1518:	4c ef       	ldi	r20, 0xFC	; 252
    151a:	20 30       	cpi	r18, 0x00	; 0
    151c:	34 07       	cpc	r19, r20
    151e:	34 f4       	brge	.+12     	; 0x152c <main+0x136e>
    1520:	a0 e0       	ldi	r26, 0x00	; 0
    1522:	bc ef       	ldi	r27, 0xFC	; 252
    1524:	b0 93 ed 03 	sts	0x03ED, r27
    1528:	a0 93 ec 03 	sts	0x03EC, r26
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    152c:	bc ef       	ldi	r27, 0xFC	; 252
    152e:	20 30       	cpi	r18, 0x00	; 0
    1530:	3b 07       	cpc	r19, r27
    1532:	5c f2       	brlt	.-106    	; 0x14ca <main+0x130c>
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1534:	20 91 ec 03 	lds	r18, 0x03EC
    1538:	30 91 ed 03 	lds	r19, 0x03ED
    153c:	2e cc       	rjmp	.-1956   	; 0xd9a <main+0xbdc>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    153e:	20 91 ec 03 	lds	r18, 0x03EC
    1542:	30 91 ed 03 	lds	r19, 0x03ED
    1546:	2e 51       	subi	r18, 0x1E	; 30
    1548:	30 40       	sbci	r19, 0x00	; 0
    154a:	30 93 ed 03 	sts	0x03ED, r19
    154e:	20 93 ec 03 	sts	0x03EC, r18
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1552:	fc ef       	ldi	r31, 0xFC	; 252
    1554:	20 30       	cpi	r18, 0x00	; 0
    1556:	3f 07       	cpc	r19, r31
    1558:	0c f0       	brlt	.+2      	; 0x155c <main+0x139e>
    155a:	14 c2       	rjmp	.+1064   	; 0x1984 <main+0x17c6>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3c ef       	ldi	r19, 0xFC	; 252
    1560:	30 93 ed 03 	sts	0x03ED, r19
    1564:	20 93 ec 03 	sts	0x03EC, r18
    1568:	80 91 ee 03 	lds	r24, 0x03EE
    156c:	90 91 ef 03 	lds	r25, 0x03EF
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	31 e0       	ldi	r19, 0x01	; 1
    1574:	18 cc       	rjmp	.-2000   	; 0xda6 <main+0xbe8>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    1576:	20 91 ec 03 	lds	r18, 0x03EC
    157a:	30 91 ed 03 	lds	r19, 0x03ED
    157e:	2e 51       	subi	r18, 0x1E	; 30
    1580:	30 40       	sbci	r19, 0x00	; 0
    1582:	30 93 ed 03 	sts	0x03ED, r19
    1586:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired += STEP_MOTORS;
    158a:	80 91 ee 03 	lds	r24, 0x03EE
    158e:	90 91 ef 03 	lds	r25, 0x03EF
    1592:	4e 96       	adiw	r24, 0x1e	; 30
    1594:	90 93 ef 03 	sts	0x03EF, r25
    1598:	80 93 ee 03 	sts	0x03EE, r24
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    159c:	fc ef       	ldi	r31, 0xFC	; 252
    159e:	20 30       	cpi	r18, 0x00	; 0
    15a0:	3f 07       	cpc	r19, r31
    15a2:	34 f4       	brge	.+12     	; 0x15b0 <main+0x13f2>
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3c ef       	ldi	r19, 0xFC	; 252
    15a8:	30 93 ed 03 	sts	0x03ED, r19
    15ac:	20 93 ec 03 	sts	0x03EC, r18
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    15b0:	44 e0       	ldi	r20, 0x04	; 4
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	94 07       	cpc	r25, r20
    15b6:	0c f4       	brge	.+2      	; 0x15ba <main+0x13fc>
    15b8:	f0 cb       	rjmp	.-2080   	; 0xd9a <main+0xbdc>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	94 e0       	ldi	r25, 0x04	; 4
    15be:	90 93 ef 03 	sts	0x03EF, r25
    15c2:	80 93 ee 03 	sts	0x03EE, r24
    15c6:	e9 cb       	rjmp	.-2094   	; 0xd9a <main+0xbdc>
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    15c8:	20 91 ec 03 	lds	r18, 0x03EC
    15cc:	30 91 ed 03 	lds	r19, 0x03ED
    15d0:	22 5e       	subi	r18, 0xE2	; 226
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	30 93 ed 03 	sts	0x03ED, r19
    15d8:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired -= STEP_MOTORS;
    15dc:	80 91 ee 03 	lds	r24, 0x03EE
    15e0:	90 91 ef 03 	lds	r25, 0x03EF
    15e4:	4e 97       	sbiw	r24, 0x1e	; 30
    15e6:	90 93 ef 03 	sts	0x03EF, r25
    15ea:	80 93 ee 03 	sts	0x03EE, r24
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    15ee:	a4 e0       	ldi	r26, 0x04	; 4
    15f0:	21 30       	cpi	r18, 0x01	; 1
    15f2:	3a 07       	cpc	r19, r26
    15f4:	44 f0       	brlt	.+16     	; 0x1606 <main+0x1448>
    15f6:	e0 e0       	ldi	r30, 0x00	; 0
    15f8:	f4 e0       	ldi	r31, 0x04	; 4
    15fa:	f0 93 ed 03 	sts	0x03ED, r31
    15fe:	e0 93 ec 03 	sts	0x03EC, r30
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	34 e0       	ldi	r19, 0x04	; 4
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1606:	fc ef       	ldi	r31, 0xFC	; 252
    1608:	80 30       	cpi	r24, 0x00	; 0
    160a:	9f 07       	cpc	r25, r31
    160c:	0c f0       	brlt	.+2      	; 0x1610 <main+0x1452>
    160e:	c5 cb       	rjmp	.-2166   	; 0xd9a <main+0xbdc>
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	5c ef       	ldi	r21, 0xFC	; 252
    1614:	50 93 ef 03 	sts	0x03EF, r21
    1618:	40 93 ee 03 	sts	0x03EE, r20
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	9c ef       	ldi	r25, 0xFC	; 252
    1620:	bc cb       	rjmp	.-2184   	; 0xd9a <main+0xbdc>
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    1622:	80 91 ee 03 	lds	r24, 0x03EE
    1626:	90 91 ef 03 	lds	r25, 0x03EF
    162a:	4e 96       	adiw	r24, 0x1e	; 30
    162c:	90 93 ef 03 	sts	0x03EF, r25
    1630:	80 93 ee 03 	sts	0x03EE, r24
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1634:	54 e0       	ldi	r21, 0x04	; 4
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	95 07       	cpc	r25, r21
    163a:	0c f4       	brge	.+2      	; 0x163e <main+0x1480>
    163c:	7b cf       	rjmp	.-266    	; 0x1534 <main+0x1376>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	94 e0       	ldi	r25, 0x04	; 4
    1642:	90 93 ef 03 	sts	0x03EF, r25
    1646:	80 93 ee 03 	sts	0x03EE, r24
    164a:	74 cf       	rjmp	.-280    	; 0x1534 <main+0x1376>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    164c:	10 92 ed 03 	sts	0x03ED, r1
    1650:	10 92 ec 03 	sts	0x03EC, r1
						pwm_left_desired = 0;
    1654:	10 92 ef 03 	sts	0x03EF, r1
    1658:	10 92 ee 03 	sts	0x03EE, r1
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	9c cb       	rjmp	.-2248   	; 0xd9e <main+0xbe0>
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    1666:	20 91 ec 03 	lds	r18, 0x03EC
    166a:	30 91 ed 03 	lds	r19, 0x03ED
    166e:	80 91 ee 03 	lds	r24, 0x03EE
    1672:	90 91 ef 03 	lds	r25, 0x03EF
    1676:	82 17       	cp	r24, r18
    1678:	93 07       	cpc	r25, r19
    167a:	0c f4       	brge	.+2      	; 0x167e <main+0x14c0>
    167c:	b7 c1       	rjmp	.+878    	; 0x19ec <main+0x182e>
    167e:	9c 01       	movw	r18, r24
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    1680:	22 5e       	subi	r18, 0xE2	; 226
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	30 93 ed 03 	sts	0x03ED, r19
    1688:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired += STEP_MOTORS;
    168c:	4e 96       	adiw	r24, 0x1e	; 30
    168e:	90 93 ef 03 	sts	0x03EF, r25
    1692:	80 93 ee 03 	sts	0x03EE, r24
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    1696:	b4 e0       	ldi	r27, 0x04	; 4
    1698:	21 30       	cpi	r18, 0x01	; 1
    169a:	3b 07       	cpc	r19, r27
    169c:	34 f0       	brlt	.+12     	; 0x16aa <main+0x14ec>
    169e:	e0 e0       	ldi	r30, 0x00	; 0
    16a0:	f4 e0       	ldi	r31, 0x04	; 4
    16a2:	f0 93 ed 03 	sts	0x03ED, r31
    16a6:	e0 93 ec 03 	sts	0x03EC, r30
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    16aa:	f4 e0       	ldi	r31, 0x04	; 4
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	9f 07       	cpc	r25, r31
    16b0:	0c f4       	brge	.+2      	; 0x16b4 <main+0x14f6>
    16b2:	40 cf       	rjmp	.-384    	; 0x1534 <main+0x1376>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	34 e0       	ldi	r19, 0x04	; 4
    16b8:	30 93 ef 03 	sts	0x03EF, r19
    16bc:	20 93 ee 03 	sts	0x03EE, r18
    16c0:	20 91 ec 03 	lds	r18, 0x03EC
    16c4:	30 91 ed 03 	lds	r19, 0x03ED
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	94 e0       	ldi	r25, 0x04	; 4
    16cc:	66 cb       	rjmp	.-2356   	; 0xd9a <main+0xbdc>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    16ce:	20 91 ec 03 	lds	r18, 0x03EC
    16d2:	30 91 ed 03 	lds	r19, 0x03ED
    16d6:	22 5e       	subi	r18, 0xE2	; 226
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	30 93 ed 03 	sts	0x03ED, r19
    16de:	20 93 ec 03 	sts	0x03EC, r18
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    16e2:	94 e0       	ldi	r25, 0x04	; 4
    16e4:	21 30       	cpi	r18, 0x01	; 1
    16e6:	39 07       	cpc	r19, r25
    16e8:	0c f4       	brge	.+2      	; 0x16ec <main+0x152e>
    16ea:	4c c1       	rjmp	.+664    	; 0x1984 <main+0x17c6>
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	b4 e0       	ldi	r27, 0x04	; 4
    16f0:	b0 93 ed 03 	sts	0x03ED, r27
    16f4:	a0 93 ec 03 	sts	0x03EC, r26
    16f8:	80 91 ee 03 	lds	r24, 0x03EE
    16fc:	90 91 ef 03 	lds	r25, 0x03EF
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	31 e0       	ldi	r19, 0x01	; 1
    1704:	50 cb       	rjmp	.-2400   	; 0xda6 <main+0xbe8>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    1706:	80 91 0b 04 	lds	r24, 0x040B
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	65 e0       	ldi	r22, 0x05	; 5
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__divmodhi4>
    1716:	80 93 0b 04 	sts	0x040B, r24

						if(colorState==0) {		// turn on blue
    171a:	88 23       	and	r24, r24
    171c:	09 f0       	breq	.+2      	; 0x1720 <main+0x1562>
    171e:	68 c1       	rjmp	.+720    	; 0x19f0 <main+0x1832>
							LED_IR1_HIGH;
    1720:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    1722:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    1724:	10 92 16 02 	sts	0x0216, r1
							pwm_green = MAX_LEDS_PWM;
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	30 93 15 02 	sts	0x0215, r19
							pwm_red = MAX_LEDS_PWM;
    172e:	30 93 14 02 	sts	0x0214, r19
    1732:	8f ef       	ldi	r24, 0xFF	; 255
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}

						updateRedLed(pwm_red);
    1734:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <updateRedLed>
						updateGreenLed(pwm_green);
    1738:	80 91 15 02 	lds	r24, 0x0215
    173c:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <updateGreenLed>
						updateBlueLed(pwm_blue);
    1740:	80 91 16 02 	lds	r24, 0x0216
    1744:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <updateBlueLed>
    1748:	20 91 ec 03 	lds	r18, 0x03EC
    174c:	30 91 ed 03 	lds	r19, 0x03ED
    1750:	80 91 ee 03 	lds	r24, 0x03EE
    1754:	90 91 ef 03 	lds	r25, 0x03EF

	                  	break;
    1758:	20 cb       	rjmp	.-2496   	; 0xd9a <main+0xbdc>
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;

					case 52:
						behaviorState = (behaviorState+1)%4;
    175a:	80 91 0c 04 	lds	r24, 0x040C
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	83 70       	andi	r24, 0x03	; 3
    1764:	90 70       	andi	r25, 0x00	; 0
    1766:	80 93 0c 04 	sts	0x040C, r24
						switch(behaviorState) {
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	09 f4       	brne	.+2      	; 0x1770 <main+0x15b2>
    176e:	78 ce       	rjmp	.-784    	; 0x1460 <main+0x12a2>
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	09 f4       	brne	.+2      	; 0x1776 <main+0x15b8>
    1774:	ff c0       	rjmp	.+510    	; 0x1974 <main+0x17b6>
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	09 f4       	brne	.+2      	; 0x177c <main+0x15be>
    177a:	6d ce       	rjmp	.-806    	; 0x1456 <main+0x1298>
							case 0:
								obstacleAvoidanceEnabled = 0;
    177c:	10 92 30 04 	sts	0x0430, r1
								cliffAvoidanceEnabled = 0;
    1780:	10 92 35 04 	sts	0x0435, r1
    1784:	02 cb       	rjmp	.-2556   	; 0xd8a <main+0xbcc>
					ackPayload[15] = ir_move;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    1786:	80 91 35 03 	lds	r24, 0x0335
    178a:	90 91 36 03 	lds	r25, 0x0336
    178e:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[2] = proximityValue[0]>>8;
    1792:	80 91 35 03 	lds	r24, 0x0335
    1796:	90 91 36 03 	lds	r25, 0x0336
    179a:	90 93 40 04 	sts	0x0440, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    179e:	80 91 39 03 	lds	r24, 0x0339
    17a2:	90 91 3a 03 	lds	r25, 0x033A
    17a6:	80 93 41 04 	sts	0x0441, r24
					ackPayload[4] = proximityValue[2]>>8;
    17aa:	80 91 39 03 	lds	r24, 0x0339
    17ae:	90 91 3a 03 	lds	r25, 0x033A
    17b2:	90 93 42 04 	sts	0x0442, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    17b6:	80 91 3d 03 	lds	r24, 0x033D
    17ba:	90 91 3e 03 	lds	r25, 0x033E
    17be:	80 93 43 04 	sts	0x0443, r24
					ackPayload[6] = proximityValue[4]>>8;
    17c2:	80 91 3d 03 	lds	r24, 0x033D
    17c6:	90 91 3e 03 	lds	r25, 0x033E
    17ca:	90 93 44 04 	sts	0x0444, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    17ce:	80 91 41 03 	lds	r24, 0x0341
    17d2:	90 91 42 03 	lds	r25, 0x0342
    17d6:	80 93 45 04 	sts	0x0445, r24
					ackPayload[8] = proximityValue[6]>>8;
    17da:	80 91 41 03 	lds	r24, 0x0341
    17de:	90 91 42 03 	lds	r25, 0x0342
    17e2:	90 93 46 04 	sts	0x0446, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    17e6:	80 91 49 03 	lds	r24, 0x0349
    17ea:	90 91 4a 03 	lds	r25, 0x034A
    17ee:	80 93 47 04 	sts	0x0447, r24
					ackPayload[10] = proximityValue[10]>>8;
    17f2:	80 91 49 03 	lds	r24, 0x0349
    17f6:	90 91 4a 03 	lds	r25, 0x034A
    17fa:	90 93 48 04 	sts	0x0448, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    17fe:	80 91 4d 03 	lds	r24, 0x034D
    1802:	90 91 4e 03 	lds	r25, 0x034E
    1806:	80 93 49 04 	sts	0x0449, r24
					ackPayload[12] = proximityValue[12]>>8;
    180a:	80 91 4d 03 	lds	r24, 0x034D
    180e:	90 91 4e 03 	lds	r25, 0x034E
    1812:	90 93 4a 04 	sts	0x044A, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    1816:	80 91 51 03 	lds	r24, 0x0351
    181a:	90 91 52 03 	lds	r25, 0x0352
    181e:	80 93 4b 04 	sts	0x044B, r24
					ackPayload[14] = proximityValue[14]>>8;
    1822:	80 91 51 03 	lds	r24, 0x0351
    1826:	90 91 52 03 	lds	r25, 0x0352
    182a:	90 93 4c 04 	sts	0x044C, r25
					ackPayload[15] = currentSelector;
    182e:	80 91 2c 04 	lds	r24, 0x042C
    1832:	80 93 4d 04 	sts	0x044D, r24
					packetId = 6;
    1836:	46 e0       	ldi	r20, 0x06	; 6
    1838:	40 93 13 02 	sts	0x0213, r20
					break;
    183c:	8f ca       	rjmp	.-2786   	; 0xd5c <main+0xb9e>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    183e:	90 91 6d 03 	lds	r25, 0x036D
    1842:	80 91 6e 03 	lds	r24, 0x036E
    1846:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[2] = proximityResult[4]>>8;
    184a:	80 93 40 04 	sts	0x0440, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    184e:	90 91 75 03 	lds	r25, 0x0375
    1852:	80 91 76 03 	lds	r24, 0x0376
    1856:	90 93 41 04 	sts	0x0441, r25
					ackPayload[4] = proximityResult[8]>>8;
    185a:	80 93 42 04 	sts	0x0442, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    185e:	90 91 77 03 	lds	r25, 0x0377
    1862:	80 91 78 03 	lds	r24, 0x0378
    1866:	90 93 43 04 	sts	0x0443, r25
					ackPayload[6] = proximityResult[9]>>8;
    186a:	80 93 44 04 	sts	0x0444, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    186e:	90 91 79 03 	lds	r25, 0x0379
    1872:	80 91 7a 03 	lds	r24, 0x037A
    1876:	90 93 45 04 	sts	0x0445, r25
					ackPayload[8] = proximityResult[10]>>8;
    187a:	80 93 46 04 	sts	0x0446, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    187e:	90 91 7b 03 	lds	r25, 0x037B
    1882:	80 91 7c 03 	lds	r24, 0x037C
    1886:	90 93 47 04 	sts	0x0447, r25
					ackPayload[10] = proximityResult[11]>>8;
    188a:	80 93 48 04 	sts	0x0448, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    188e:	90 91 0e 04 	lds	r25, 0x040E
    1892:	80 91 0f 04 	lds	r24, 0x040F
    1896:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = accX>>8;
    189a:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = accY&0xFF;
    189e:	90 91 10 04 	lds	r25, 0x0410
    18a2:	80 91 11 04 	lds	r24, 0x0411
    18a6:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = accY>>8;
    18aa:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = ir_move;
    18ae:	80 91 09 04 	lds	r24, 0x0409
    18b2:	80 93 4d 04 	sts	0x044D, r24
					packetId = 5;
    18b6:	00 93 13 02 	sts	0x0213, r16
					break;
    18ba:	50 ca       	rjmp	.-2912   	; 0xd5c <main+0xb9e>

		} else if(currentSelector == 1) {		// only orizzontal speed control

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;
    18bc:	80 91 dc 03 	lds	r24, 0x03DC
    18c0:	90 91 dd 03 	lds	r25, 0x03DD
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	96 95       	lsr	r25
    18ca:	87 95       	ror	r24
    18cc:	90 93 e1 03 	sts	0x03E1, r25
    18d0:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
    18d4:	20 93 fc 03 	sts	0x03FC, r18
				compute_left_vel = 0;
    18d8:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    18dc:	10 92 dd 03 	sts	0x03DD, r1
    18e0:	10 92 dc 03 	sts	0x03DC, r1

				pwm_left_working = pwm_left_desired;
    18e4:	80 91 ee 03 	lds	r24, 0x03EE
    18e8:	90 91 ef 03 	lds	r25, 0x03EF
    18ec:	90 93 01 04 	sts	0x0401, r25
    18f0:	80 93 00 04 	sts	0x0400, r24
				pwm_left_desired_to_control = pwm_left_desired;
    18f4:	90 93 db 03 	sts	0x03DB, r25
    18f8:	80 93 da 03 	sts	0x03DA, r24

				start_orizzontal_speed_control_left(&pwm_left_working);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	94 e0       	ldi	r25, 0x04	; 4
    1900:	0e 94 e6 13 	call	0x27cc	; 0x27cc <start_orizzontal_speed_control_left>

				pwm_left = pwm_left_working;
    1904:	80 91 00 04 	lds	r24, 0x0400
    1908:	90 91 01 04 	lds	r25, 0x0401
    190c:	90 93 e7 03 	sts	0x03E7, r25
    1910:	80 93 e6 03 	sts	0x03E6, r24
				//} else {
				//	OCR4A = 0;
				//	OCR4B = 0;
				//}

				if(pwm_left > 0) {
    1914:	18 16       	cp	r1, r24
    1916:	19 06       	cpc	r1, r25
    1918:	d4 f5       	brge	.+116    	; 0x198e <main+0x17d0>
					OCR4A = (unsigned int)pwm_left;
    191a:	90 93 a9 00 	sts	0x00A9, r25
    191e:	80 93 a8 00 	sts	0x00A8, r24
    1922:	b0 cb       	rjmp	.-2208   	; 0x1084 <main+0xec6>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
    1924:	90 95       	com	r25
    1926:	81 95       	neg	r24
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	90 93 ab 00 	sts	0x00AB, r25
    192e:	80 93 aa 00 	sts	0x00AA, r24
    1932:	0c 94 05 01 	jmp	0x20a	; 0x20a <main+0x4c>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
    1936:	90 95       	com	r25
    1938:	81 95       	neg	r24
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	90 93 9b 00 	sts	0x009B, r25
    1940:	80 93 9a 00 	sts	0x009A, r24
    1944:	0c 94 88 03 	jmp	0x710	; 0x710 <main+0x552>
				pwm_right_working = pwm_right_desired;
				pwm_right_desired_to_control = pwm_right_desired;

				if(robotPosition == ORIZZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_right(&pwm_right_working);
    1948:	8e ef       	ldi	r24, 0xFE	; 254
    194a:	93 e0       	ldi	r25, 0x03	; 3
    194c:	0e 94 01 13 	call	0x2602	; 0x2602 <start_orizzontal_speed_control_right>
    1950:	ae cc       	rjmp	.-1700   	; 0x12ae <main+0x10f0>
				pwm_left_working = pwm_left_desired;
				pwm_left_desired_to_control = pwm_left_desired;

				if(robotPosition == ORIZZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_left(&pwm_left_working);
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	94 e0       	ldi	r25, 0x04	; 4
    1956:	0e 94 e6 13 	call	0x27cc	; 0x27cc <start_orizzontal_speed_control_left>
    195a:	6b cc       	rjmp	.-1834   	; 0x1232 <main+0x1074>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	09 f0       	breq	.+2      	; 0x1962 <main+0x17a4>
    1960:	55 c0       	rjmp	.+170    	; 0x1a0c <main+0x184e>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1962:	10 92 a9 00 	sts	0x00A9, r1
    1966:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    196a:	10 92 ab 00 	sts	0x00AB, r1
    196e:	10 92 aa 00 	sts	0x00AA, r1
    1972:	6f cc       	rjmp	.-1826   	; 0x1252 <main+0x1094>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    1974:	10 93 30 04 	sts	0x0430, r17
								cliffAvoidanceEnabled = 1;
    1978:	10 93 35 04 	sts	0x0435, r17
    197c:	20 91 ec 03 	lds	r18, 0x03EC
    1980:	30 91 ed 03 	lds	r19, 0x03ED
    1984:	80 91 ee 03 	lds	r24, 0x03EE
    1988:	90 91 ef 03 	lds	r25, 0x03EF
								break;
    198c:	06 ca       	rjmp	.-3060   	; 0xd9a <main+0xbdc>
				//	OCR4B = 0;
				//}

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	09 f0       	breq	.+2      	; 0x1994 <main+0x17d6>
    1992:	44 c0       	rjmp	.+136    	; 0x1a1c <main+0x185e>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1994:	10 92 a9 00 	sts	0x00A9, r1
    1998:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    199c:	10 92 ab 00 	sts	0x00AB, r1
    19a0:	10 92 aa 00 	sts	0x00AA, r1
    19a4:	6f cb       	rjmp	.-2338   	; 0x1084 <main+0xec6>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    19a6:	60 91 5a 04 	lds	r22, 0x045A
    19aa:	66 23       	and	r22, r22
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <main+0x1808>
    19ae:	50 91 5b 04 	lds	r21, 0x045B
    19b2:	bd c8       	rjmp	.-3718   	; 0xb2e <main+0x970>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
    19b4:	90 95       	com	r25
    19b6:	81 95       	neg	r24
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	90 93 9b 00 	sts	0x009B, r25
    19be:	80 93 9a 00 	sts	0x009A, r24
    19c2:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <main+0x70c>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    19c6:	50 91 5b 04 	lds	r21, 0x045B
    19ca:	55 23       	and	r21, r21
    19cc:	79 f1       	breq	.+94     	; 0x1a2c <main+0x186e>

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    19ce:	10 92 06 04 	sts	0x0406, r1
    19d2:	10 92 05 04 	sts	0x0405, r1
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    19d6:	85 2f       	mov	r24, r21
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	8f 77       	andi	r24, 0x7F	; 127
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	90 93 04 04 	sts	0x0404, r25
    19e2:	80 93 03 04 	sts	0x0403, r24

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	b3 c8       	rjmp	.-3738   	; 0xb52 <main+0x994>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    19ec:	c9 01       	movw	r24, r18
    19ee:	48 ce       	rjmp	.-880    	; 0x1680 <main+0x14c2>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	89 f1       	breq	.+98     	; 0x1a56 <main+0x1898>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    19f4:	82 30       	cpi	r24, 0x02	; 2
    19f6:	21 f1       	breq	.+72     	; 0x1a40 <main+0x1882>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	b1 f1       	breq	.+108    	; 0x1a68 <main+0x18aa>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	80 93 16 02 	sts	0x0216, r24
							pwm_green = MAX_LEDS_PWM;
    1a02:	80 93 15 02 	sts	0x0215, r24
							pwm_red = MAX_LEDS_PWM;
    1a06:	80 93 14 02 	sts	0x0214, r24
    1a0a:	94 ce       	rjmp	.-728    	; 0x1734 <main+0x1576>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1a0c:	90 95       	com	r25
    1a0e:	81 95       	neg	r24
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	90 93 ab 00 	sts	0x00AB, r25
    1a16:	80 93 aa 00 	sts	0x00AA, r24
    1a1a:	1b cc       	rjmp	.-1994   	; 0x1252 <main+0x1094>
				//}

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1a1c:	90 95       	com	r25
    1a1e:	81 95       	neg	r24
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	90 93 ab 00 	sts	0x00AB, r25
    1a26:	80 93 aa 00 	sts	0x00AA, r24
    1a2a:	2c cb       	rjmp	.-2472   	; 0x1084 <main+0xec6>
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    1a2c:	8c e3       	ldi	r24, 0x3C	; 60
    1a2e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <sleep>
    1a32:	60 91 5a 04 	lds	r22, 0x045A
    1a36:	50 91 5b 04 	lds	r21, 0x045B
    1a3a:	40 91 56 04 	lds	r20, 0x0456
    1a3e:	77 c8       	rjmp	.-3858   	; 0xb2e <main+0x970>
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    1a40:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    1a42:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    1a44:	5f ef       	ldi	r21, 0xFF	; 255
    1a46:	50 93 16 02 	sts	0x0216, r21
							pwm_green = MAX_LEDS_PWM;
    1a4a:	50 93 15 02 	sts	0x0215, r21
							pwm_red = 0;
    1a4e:	10 92 14 02 	sts	0x0214, r1
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	6f ce       	rjmp	.-802    	; 0x1734 <main+0x1576>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    1a56:	4f ef       	ldi	r20, 0xFF	; 255
    1a58:	40 93 16 02 	sts	0x0216, r20
							pwm_green = 0;
    1a5c:	10 92 15 02 	sts	0x0215, r1
							pwm_red = MAX_LEDS_PWM;
    1a60:	40 93 14 02 	sts	0x0214, r20
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	66 ce       	rjmp	.-820    	; 0x1734 <main+0x1576>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    1a68:	10 92 16 02 	sts	0x0216, r1
							pwm_green = 0;
    1a6c:	10 92 15 02 	sts	0x0215, r1
							pwm_red = 0;
    1a70:	10 92 14 02 	sts	0x0214, r1
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	5e ce       	rjmp	.-836    	; 0x1734 <main+0x1576>

00001a78 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1a78:	84 b1       	in	r24, 0x04	; 4
    1a7a:	80 7f       	andi	r24, 0xF0	; 240
    1a7c:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1a7e:	84 b1       	in	r24, 0x04	; 4
    1a80:	87 60       	ori	r24, 0x07	; 7
    1a82:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1a84:	80 e5       	ldi	r24, 0x50	; 80
    1a86:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1a88:	8d b5       	in	r24, 0x2d	; 45
    1a8a:	81 60       	ori	r24, 0x01	; 1
    1a8c:	8d bd       	out	0x2d, r24	; 45

}
    1a8e:	08 95       	ret

00001a90 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1a90:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1a92:	1d bc       	out	0x2d, r1	; 45
}
    1a94:	08 95       	ret

00001a96 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1a96:	44 23       	and	r20, r20
    1a98:	79 f0       	breq	.+30     	; 0x1ab8 <SPI_ReadWrite_Block+0x22>
    1a9a:	a8 2f       	mov	r26, r24
    1a9c:	b9 2f       	mov	r27, r25
    1a9e:	e6 2f       	mov	r30, r22
    1aa0:	f7 2f       	mov	r31, r23
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1aa4:	9d 91       	ld	r25, X+
    1aa6:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1aa8:	0d b4       	in	r0, 0x2d	; 45
    1aaa:	07 fe       	sbrs	r0, 7
    1aac:	fd cf       	rjmp	.-6      	; 0x1aa8 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1aae:	9e b5       	in	r25, 0x2e	; 46
    1ab0:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	84 17       	cp	r24, r20
    1ab6:	b0 f3       	brcs	.-20     	; 0x1aa4 <SPI_ReadWrite_Block+0xe>
    1ab8:	08 95       	ret

00001aba <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1aba:	66 23       	and	r22, r22
    1abc:	59 f0       	breq	.+22     	; 0x1ad4 <SPI_Write_Block+0x1a>
    1abe:	e8 2f       	mov	r30, r24
    1ac0:	f9 2f       	mov	r31, r25
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1ac4:	91 91       	ld	r25, Z+
    1ac6:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1ac8:	0d b4       	in	r0, 0x2d	; 45
    1aca:	07 fe       	sbrs	r0, 7
    1acc:	fd cf       	rjmp	.-6      	; 0x1ac8 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	86 17       	cp	r24, r22
    1ad2:	c0 f3       	brcs	.-16     	; 0x1ac4 <SPI_Write_Block+0xa>
    1ad4:	08 95       	ret

00001ad6 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1ad6:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1ad8:	0d b4       	in	r0, 0x2d	; 45
    1ada:	07 fe       	sbrs	r0, 7
    1adc:	fd cf       	rjmp	.-6      	; 0x1ad8 <SPI_Write_Byte+0x2>
    return SPDR;
    1ade:	8e b5       	in	r24, 0x2e	; 46
}
    1ae0:	08 95       	ret

00001ae2 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <mirf_config+0xa>
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1af0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1af2:	80 e2       	ldi	r24, 0x20	; 32
    1af4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1af8:	8d e0       	ldi	r24, 0x0D	; 13
    1afa:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1afe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b02:	83 e2       	ldi	r24, 0x23	; 35
    1b04:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b0e:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    1b10:	8c e0       	ldi	r24, 0x0C	; 12
    1b12:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1b18:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1b1a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b1c:	80 e3       	ldi	r24, 0x30	; 48
    1b1e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b22:	8e 01       	movw	r16, r28
    1b24:	0f 5f       	subi	r16, 0xFF	; 255
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	c8 01       	movw	r24, r16
    1b2a:	63 e0       	ldi	r22, 0x03	; 3
    1b2c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPI_Write_Block>
    mirf_CSN_hi;
    1b30:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1b32:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b34:	8a e2       	ldi	r24, 0x2A	; 42
    1b36:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPI_Write_Block>
    mirf_CSN_hi;
    1b42:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b44:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b46:	81 e2       	ldi	r24, 0x21	; 33
    1b48:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b52:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b54:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b56:	82 e2       	ldi	r24, 0x22	; 34
    1b58:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b62:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b64:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b66:	84 e2       	ldi	r24, 0x24	; 36
    1b68:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b6c:	82 e1       	ldi	r24, 0x12	; 18
    1b6e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b72:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b74:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b76:	85 e2       	ldi	r24, 0x25	; 37
    1b78:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b7c:	88 e2       	ldi	r24, 0x28	; 40
    1b7e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b82:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1b84:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b86:	81 e3       	ldi	r24, 0x31	; 49
    1b88:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b8c:	86 e0       	ldi	r24, 0x06	; 6
    1b8e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b92:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1b94:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1b96:	80 e5       	ldi	r24, 0x50	; 80
    1b98:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1b9c:	83 e7       	ldi	r24, 0x73	; 115
    1b9e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1ba2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ba4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ba6:	8c e3       	ldi	r24, 0x3C	; 60
    1ba8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bb2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1bb4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bb6:	8d e3       	ldi	r24, 0x3D	; 61
    1bb8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bbc:	86 e0       	ldi	r24, 0x06	; 6
    1bbe:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bc2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1bc4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bc6:	80 e2       	ldi	r24, 0x20	; 32
    1bc8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bcc:	8f e0       	ldi	r24, 0x0F	; 15
    1bce:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bd2:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1be4:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1be6:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1be8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <mirf_config>
}
    1bec:	08 95       	ret

00001bee <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1bf4:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1bf6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bf8:	8a e2       	ldi	r24, 0x2A	; 42
    1bfa:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1bfe:	ce 01       	movw	r24, r28
    1c00:	65 e0       	ldi	r22, 0x05	; 5
    1c02:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPI_Write_Block>
    mirf_CSN_hi;
    1c06:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1c08:	2c 9a       	sbi	0x05, 4	; 5
}
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1c16:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c18:	80 e3       	ldi	r24, 0x30	; 48
    1c1a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1c1e:	ce 01       	movw	r24, r28
    1c20:	65 e0       	ldi	r22, 0x05	; 5
    1c22:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPI_Write_Block>
    mirf_CSN_hi;
    1c26:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	08 95       	ret

00001c2e <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1c2e:	80 91 39 04 	lds	r24, 0x0439
    1c32:	88 23       	and	r24, r24
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <mirf_data_ready+0xc>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1c38:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1c3a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1c42:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1c44:	80 74       	andi	r24, 0x40	; 64
    1c46:	08 95       	ret

00001c48 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1c52:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1c54:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1c56:	87 e1       	ldi	r24, 0x17	; 23
    1c58:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1c5c:	be 01       	movw	r22, r28
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	cb 01       	movw	r24, r22
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1c6a:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6e:	81 70       	andi	r24, 0x01	; 1
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1c78:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1c7a:	82 ee       	ldi	r24, 0xE2	; 226
    1c7c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c80:	28 9a       	sbi	0x05, 0	; 5

}
    1c82:	08 95       	ret

00001c84 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1c8a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1c8c:	81 e6       	ldi	r24, 0x61	; 97
    1c8e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1c92:	ce 01       	movw	r24, r28
    1c94:	be 01       	movw	r22, r28
    1c96:	46 e0       	ldi	r20, 0x06	; 6
    1c98:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1c9c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c9e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ca0:	87 e2       	ldi	r24, 0x27	; 39
    1ca2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ca6:	80 e4       	ldi	r24, 0x40	; 64
    1ca8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cac:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1cbe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cc0:	8f 71       	andi	r24, 0x1F	; 31
    1cc2:	80 62       	ori	r24, 0x20	; 32
    1cc4:	69 83       	std	Y+1, r22	; 0x01
    1cc6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cca:	69 81       	ldd	r22, Y+1	; 0x01
    1ccc:	86 2f       	mov	r24, r22
    1cce:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cd2:	28 9a       	sbi	0x05, 0	; 5
}
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1cec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1cee:	8f 71       	andi	r24, 0x1F	; 31
    1cf0:	49 83       	std	Y+1, r20	; 0x01
    1cf2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	b8 01       	movw	r22, r16
    1cfa:	49 81       	ldd	r20, Y+1	; 0x01
    1cfc:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1d00:	28 9a       	sbi	0x05, 0	; 5
}
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	08 95       	ret

00001d0e <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1d1e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d20:	8f 71       	andi	r24, 0x1F	; 31
    1d22:	80 62       	ori	r24, 0x20	; 32
    1d24:	49 83       	std	Y+1, r20	; 0x01
    1d26:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	49 81       	ldd	r20, Y+1	; 0x01
    1d2e:	64 2f       	mov	r22, r20
    1d30:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPI_Write_Block>
    mirf_CSN_hi;
    1d34:	28 9a       	sbi	0x05, 0	; 5
}
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1d52:	80 91 39 04 	lds	r24, 0x0439
    1d56:	88 23       	and	r24, r24
    1d58:	e1 f7       	brne	.-8      	; 0x1d52 <mirf_send+0x10>

    mirf_CE_lo;
    1d5a:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 39 04 	sts	0x0439, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	69 83       	std	Y+1, r22	; 0x01
    1d68:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d6c:	8a e4       	ldi	r24, 0x4A	; 74
    1d6e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d72:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1d74:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1d76:	81 ee       	ldi	r24, 0xE1	; 225
    1d78:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1d7c:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1d7e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1d80:	80 ea       	ldi	r24, 0xA0	; 160
    1d82:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1d86:	c8 01       	movw	r24, r16
    1d88:	69 81       	ldd	r22, Y+1	; 0x01
    1d8a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1d8e:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1d90:	2c 9a       	sbi	0x05, 4	; 5
}
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	18 2f       	mov	r17, r24
    1db2:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1db4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1db6:	81 ee       	ldi	r24, 0xE1	; 225
    1db8:	99 83       	std	Y+1, r25	; 0x01
    1dba:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1dbe:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1dc0:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1dc2:	88 ea       	ldi	r24, 0xA8	; 168
    1dc4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1dc8:	99 81       	ldd	r25, Y+1	; 0x01
    1dca:	00 23       	and	r16, r16
    1dcc:	61 f0       	breq	.+24     	; 0x1de6 <writeAckPayload+0x48>
    1dce:	61 2f       	mov	r22, r17
    1dd0:	79 2f       	mov	r23, r25
    1dd2:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	7f 01       	movw	r14, r30
    1dda:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1dde:	8e 2d       	mov	r24, r14
    1de0:	81 1b       	sub	r24, r17
    1de2:	80 17       	cp	r24, r16
    1de4:	b8 f3       	brcs	.-18     	; 0x1dd4 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1de6:	28 9a       	sbi	0x05, 0	; 5


}
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	08 95       	ret

00001df8 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1df8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1dfa:	81 ee       	ldi	r24, 0xE1	; 225
    1dfc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e00:	28 9a       	sbi	0x05, 0	; 5

}
    1e02:	08 95       	ret

00001e04 <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1e04:	e8 e6       	ldi	r30, 0x68	; 104
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1e0e:	ec e6       	ldi	r30, 0x6C	; 108
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1e18:	e0 eb       	ldi	r30, 0xB0	; 176
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	82 60       	ori	r24, 0x02	; 2
    1e20:	80 83       	st	Z, r24

}
    1e22:	08 95       	ret

00001e24 <__vector_10>:

ISR(PCINT1_vect) {
    1e24:	1f 92       	push	r1
    1e26:	0f 92       	push	r0
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	0f 92       	push	r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	8f 93       	push	r24

	if(irEnabled) {		// if the robot is configured to accept TV remote commands
    1e30:	80 91 19 02 	lds	r24, 0x0219
    1e34:	88 23       	and	r24, r24
    1e36:	21 f1       	breq	.+72     	; 0x1e80 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1e38:	80 91 03 01 	lds	r24, 0x0103
    1e3c:	86 fd       	sbrc	r24, 6
    1e3e:	20 c0       	rjmp	.+64     	; 0x1e80 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1e40:	80 91 68 00 	lds	r24, 0x0068
    1e44:	8d 7f       	andi	r24, 0xFD	; 253
    1e46:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1e4a:	80 91 6c 00 	lds	r24, 0x006C
    1e4e:	8f 77       	andi	r24, 0x7F	; 127
    1e50:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	80 93 1a 02 	sts	0x021A, r24
			OCR2A = 13;									// output compare register
    1e5a:	8d e0       	ldi	r24, 0x0D	; 13
    1e5c:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1e60:	80 91 b1 00 	lds	r24, 0x00B1
    1e64:	86 60       	ori	r24, 0x06	; 6
    1e66:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1e6a:	80 91 70 00 	lds	r24, 0x0070
    1e6e:	82 60       	ori	r24, 0x02	; 2
    1e70:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1e74:	10 92 2c 03 	sts	0x032C, r1
    1e78:	10 92 2d 03 	sts	0x032D, r1
    1e7c:	10 92 2e 03 	sts	0x032E, r1

		}

	}
	
}
    1e80:	8f 91       	pop	r24
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	8f 93       	push	r24
    1ea0:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1ea2:	80 91 b1 00 	lds	r24, 0x00B1
    1ea6:	88 7f       	andi	r24, 0xF8	; 248
    1ea8:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1eac:	80 91 1a 02 	lds	r24, 0x021A
    1eb0:	88 23       	and	r24, r24
    1eb2:	a9 f0       	breq	.+42     	; 0x1ede <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1eb4:	80 91 03 01 	lds	r24, 0x0103
    1eb8:	86 ff       	sbrs	r24, 6
    1eba:	65 c0       	rjmp	.+202    	; 0x1f86 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1ebc:	80 91 68 00 	lds	r24, 0x0068
    1ec0:	82 60       	ori	r24, 0x02	; 2
    1ec2:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1ec6:	80 91 6c 00 	lds	r24, 0x006C
    1eca:	80 68       	ori	r24, 0x80	; 128
    1ecc:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	9f ef       	ldi	r25, 0xFF	; 255
    1ed4:	90 93 02 02 	sts	0x0202, r25
    1ed8:	80 93 01 02 	sts	0x0201, r24
    1edc:	49 c0       	rjmp	.+146    	; 0x1f70 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1ede:	80 91 01 02 	lds	r24, 0x0201
    1ee2:	90 91 02 02 	lds	r25, 0x0202
    1ee6:	2f ef       	ldi	r18, 0xFF	; 255
    1ee8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eea:	92 07       	cpc	r25, r18
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__vector_13+0x64>
    1eee:	63 c0       	rjmp	.+198    	; 0x1fb6 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <__vector_13+0x6c>
    1ef6:	98 c0       	rjmp	.+304    	; 0x2028 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1ef8:	9c 01       	movw	r18, r24
    1efa:	22 50       	subi	r18, 0x02	; 2
    1efc:	30 40       	sbci	r19, 0x00	; 0
    1efe:	25 30       	cpi	r18, 0x05	; 5
    1f00:	31 05       	cpc	r19, r1
    1f02:	08 f4       	brcc	.+2      	; 0x1f06 <__vector_13+0x7a>
    1f04:	67 c0       	rjmp	.+206    	; 0x1fd4 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    1f06:	9c 01       	movw	r18, r24
    1f08:	27 50       	subi	r18, 0x07	; 7
    1f0a:	30 40       	sbci	r19, 0x00	; 0
    1f0c:	26 30       	cpi	r18, 0x06	; 6
    1f0e:	31 05       	cpc	r19, r1
    1f10:	08 f0       	brcs	.+2      	; 0x1f14 <__vector_13+0x88>
    1f12:	bd c0       	rjmp	.+378    	; 0x208e <__vector_13+0x202>

				OCR2A = 54;
    1f14:	26 e3       	ldi	r18, 0x36	; 54
    1f16:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1f1a:	20 91 b1 00 	lds	r18, 0x00B1
    1f1e:	26 60       	ori	r18, 0x06	; 6
    1f20:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1f24:	20 91 70 00 	lds	r18, 0x0070
    1f28:	22 60       	ori	r18, 0x02	; 2
    1f2a:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1f2e:	20 91 03 01 	lds	r18, 0x0103
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	20 74       	andi	r18, 0x40	; 64
    1f36:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1f38:	00 24       	eor	r0, r0
    1f3a:	22 0f       	add	r18, r18
    1f3c:	33 1f       	adc	r19, r19
    1f3e:	00 1c       	adc	r0, r0
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	00 1c       	adc	r0, r0
    1f46:	23 2f       	mov	r18, r19
    1f48:	30 2d       	mov	r19, r0
    1f4a:	4c e0       	ldi	r20, 0x0C	; 12
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	48 1b       	sub	r20, r24
    1f50:	59 0b       	sbc	r21, r25
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <__vector_13+0xcc>
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	4a 95       	dec	r20
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <__vector_13+0xc8>
				data_temp += temp;
    1f5c:	40 91 2c 03 	lds	r20, 0x032C
    1f60:	42 0f       	add	r20, r18
    1f62:	40 93 2c 03 	sts	0x032C, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1f66:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1f68:	90 93 02 02 	sts	0x0202, r25
    1f6c:	80 93 01 02 	sts	0x0201, r24

		}

}
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	5f 91       	pop	r21
    1f76:	4f 91       	pop	r20
    1f78:	3f 91       	pop	r19
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1f86:	10 92 1a 02 	sts	0x021A, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1f8a:	83 e3       	ldi	r24, 0x33	; 51
    1f8c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1f90:	80 91 b1 00 	lds	r24, 0x00B1
    1f94:	86 60       	ori	r24, 0x06	; 6
    1f96:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1f9a:	80 91 70 00 	lds	r24, 0x0070
    1f9e:	82 60       	ori	r24, 0x02	; 2
    1fa0:	80 93 70 00 	sts	0x0070, r24
    1fa4:	80 91 01 02 	lds	r24, 0x0201
    1fa8:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1fac:	2f ef       	ldi	r18, 0xFF	; 255
    1fae:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb0:	92 07       	cpc	r25, r18
    1fb2:	c9 f6       	brne	.-78     	; 0x1f66 <__vector_13+0xda>
    1fb4:	dd cf       	rjmp	.-70     	; 0x1f70 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1fb6:	20 91 03 01 	lds	r18, 0x0103
    1fba:	26 ff       	sbrs	r18, 6
    1fbc:	52 c0       	rjmp	.+164    	; 0x2062 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1fbe:	20 91 68 00 	lds	r18, 0x0068
    1fc2:	22 60       	ori	r18, 0x02	; 2
    1fc4:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1fc8:	20 91 6c 00 	lds	r18, 0x006C
    1fcc:	20 68       	ori	r18, 0x80	; 128
    1fce:	20 93 6c 00 	sts	0x006C, r18
    1fd2:	ce cf       	rjmp	.-100    	; 0x1f70 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1fd4:	26 e3       	ldi	r18, 0x36	; 54
    1fd6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1fda:	20 91 b1 00 	lds	r18, 0x00B1
    1fde:	26 60       	ori	r18, 0x06	; 6
    1fe0:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1fe4:	20 91 70 00 	lds	r18, 0x0070
    1fe8:	22 60       	ori	r18, 0x02	; 2
    1fea:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1fee:	20 91 03 01 	lds	r18, 0x0103
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	20 74       	andi	r18, 0x40	; 64
    1ff6:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1ff8:	00 24       	eor	r0, r0
    1ffa:	22 0f       	add	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	00 1c       	adc	r0, r0
    2000:	22 0f       	add	r18, r18
    2002:	33 1f       	adc	r19, r19
    2004:	00 1c       	adc	r0, r0
    2006:	23 2f       	mov	r18, r19
    2008:	30 2d       	mov	r19, r0
    200a:	46 e0       	ldi	r20, 0x06	; 6
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	48 1b       	sub	r20, r24
    2010:	59 0b       	sbc	r21, r25
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <__vector_13+0x18c>
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	4a 95       	dec	r20
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <__vector_13+0x188>
				address_temp += temp;
    201c:	40 91 2d 03 	lds	r20, 0x032D
    2020:	42 0f       	add	r20, r18
    2022:	40 93 2d 03 	sts	0x032D, r20
    2026:	9f cf       	rjmp	.-194    	; 0x1f66 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2028:	20 91 03 01 	lds	r18, 0x0103
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	20 74       	andi	r18, 0x40	; 64
    2030:	30 70       	andi	r19, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	23 2f       	mov	r18, r19
    2036:	00 0c       	add	r0, r0
    2038:	22 1f       	adc	r18, r18
    203a:	33 0b       	sbc	r19, r19
    203c:	00 0c       	add	r0, r0
    203e:	22 1f       	adc	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	20 93 2e 03 	sts	0x032E, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2046:	26 e3       	ldi	r18, 0x36	; 54
    2048:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    204c:	20 91 b1 00 	lds	r18, 0x00B1
    2050:	26 60       	ori	r18, 0x06	; 6
    2052:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2056:	20 91 70 00 	lds	r18, 0x0070
    205a:	22 60       	ori	r18, 0x02	; 2
    205c:	20 93 70 00 	sts	0x0070, r18
    2060:	82 cf       	rjmp	.-252    	; 0x1f66 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2062:	8c e1       	ldi	r24, 0x1C	; 28
    2064:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2068:	80 91 b1 00 	lds	r24, 0x00B1
    206c:	86 60       	ori	r24, 0x06	; 6
    206e:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2072:	80 91 70 00 	lds	r24, 0x0070
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    207c:	10 92 2c 03 	sts	0x032C, r1
    2080:	10 92 2d 03 	sts	0x032D, r1
    2084:	10 92 2e 03 	sts	0x032E, r1
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	6d cf       	rjmp	.-294    	; 0x1f68 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    208e:	8d 30       	cpi	r24, 0x0D	; 13
    2090:	91 05       	cpc	r25, r1
    2092:	09 f0       	breq	.+2      	; 0x2096 <__vector_13+0x20a>
    2094:	68 cf       	rjmp	.-304    	; 0x1f66 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2096:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    209a:	80 91 68 00 	lds	r24, 0x0068
    209e:	82 60       	ori	r24, 0x02	; 2
    20a0:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    20a4:	80 91 6c 00 	lds	r24, 0x006C
    20a8:	80 68       	ori	r24, 0x80	; 128
    20aa:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	9f ef       	ldi	r25, 0xFF	; 255
    20b2:	90 93 02 02 	sts	0x0202, r25
    20b6:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    20ba:	80 91 2e 03 	lds	r24, 0x032E
    20be:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    20c2:	80 91 2d 03 	lds	r24, 0x032D
    20c6:	80 93 2a 03 	sts	0x032A, r24
				data_ir = data_temp;
    20ca:	80 91 2c 03 	lds	r24, 0x032C
    20ce:	80 93 2b 03 	sts	0x032B, r24
				command_received=1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 0a 04 	sts	0x040A, r24
    20d8:	4b cf       	rjmp	.-362    	; 0x1f70 <__vector_13+0xe4>

000020da <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    20da:	80 91 00 02 	lds	r24, 0x0200
    20de:	08 95       	ret

000020e0 <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    20e0:	80 91 2a 03 	lds	r24, 0x032A
    20e4:	08 95       	ret

000020e6 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    20e6:	80 91 2b 03 	lds	r24, 0x032B
    20ea:	08 95       	ret

000020ec <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    20ec:	08 95       	ret

000020ee <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	09 f4       	brne	.+2      	; 0x2102 <start_vertical_speed_control_left+0x14>
    2100:	b7 c0       	rjmp	.+366    	; 0x2270 <__stack+0x71>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2102:	20 91 20 04 	lds	r18, 0x0420
    2106:	30 91 21 04 	lds	r19, 0x0421
    210a:	41 e0       	ldi	r20, 0x01	; 1
    210c:	2e 30       	cpi	r18, 0x0E	; 14
    210e:	34 07       	cpc	r19, r20
    2110:	0c f4       	brge	.+2      	; 0x2114 <start_vertical_speed_control_left+0x26>
    2112:	88 c0       	rjmp	.+272    	; 0x2224 <__stack+0x25>
		if(*pwm_left > 0) {
    2114:	18 16       	cp	r1, r24
    2116:	19 06       	cpc	r1, r25
    2118:	0c f0       	brlt	.+2      	; 0x211c <start_vertical_speed_control_left+0x2e>
    211a:	13 c1       	rjmp	.+550    	; 0x2342 <__stack+0x143>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    211c:	88 e6       	ldi	r24, 0x68	; 104
    211e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2120:	82 1b       	sub	r24, r18
    2122:	93 0b       	sbc	r25, r19
    2124:	95 95       	asr	r25
    2126:	87 95       	ror	r24
    2128:	95 95       	asr	r25
    212a:	87 95       	ror	r24
    212c:	29 e1       	ldi	r18, 0x19	; 25
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	28 1b       	sub	r18, r24
    2132:	39 0b       	sbc	r19, r25
    2134:	30 93 0c 02 	sts	0x020C, r19
    2138:	20 93 0b 02 	sts	0x020B, r18
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_left_speed_prev = delta_left_speed_current; 
    213c:	40 91 3a 04 	lds	r20, 0x043A
    2140:	50 91 3b 04 	lds	r21, 0x043B
    2144:	50 93 55 04 	sts	0x0455, r21
    2148:	40 93 54 04 	sts	0x0454, r20
	if(*pwm_left >= 0) {
    214c:	20 81       	ld	r18, Z
    214e:	31 81       	ldd	r19, Z+1	; 0x01
    2150:	37 fd       	sbrc	r19, 7
    2152:	d2 c0       	rjmp	.+420    	; 0x22f8 <__stack+0xf9>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2154:	80 91 e0 03 	lds	r24, 0x03E0
    2158:	90 91 e1 03 	lds	r25, 0x03E1
    215c:	b9 01       	movw	r22, r18
    215e:	68 1b       	sub	r22, r24
    2160:	79 0b       	sbc	r23, r25
    2162:	cb 01       	movw	r24, r22
    2164:	70 93 3b 04 	sts	0x043B, r23
    2168:	60 93 3a 04 	sts	0x043A, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    216c:	20 91 f8 03 	lds	r18, 0x03F8
    2170:	30 91 f9 03 	lds	r19, 0x03F9
    2174:	28 0f       	add	r18, r24
    2176:	39 1f       	adc	r19, r25
    2178:	30 93 f9 03 	sts	0x03F9, r19
    217c:	20 93 f8 03 	sts	0x03F8, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2180:	76 e0       	ldi	r23, 0x06	; 6
    2182:	21 34       	cpi	r18, 0x41	; 65
    2184:	37 07       	cpc	r19, r23
    2186:	0c f4       	brge	.+2      	; 0x218a <start_vertical_speed_control_left+0x9c>
    2188:	84 c0       	rjmp	.+264    	; 0x2292 <__stack+0x93>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    218a:	20 e4       	ldi	r18, 0x40	; 64
    218c:	36 e0       	ldi	r19, 0x06	; 6
    218e:	30 93 f9 03 	sts	0x03F9, r19
    2192:	20 93 f8 03 	sts	0x03F8, r18
    2196:	60 ec       	ldi	r22, 0xC0	; 192
    2198:	72 e1       	ldi	r23, 0x12	; 18
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    219a:	9c 01       	movw	r18, r24
    219c:	22 0f       	add	r18, r18
    219e:	33 1f       	adc	r19, r19
    21a0:	dc 01       	movw	r26, r24
    21a2:	aa 0f       	add	r26, r26
    21a4:	bb 1f       	adc	r27, r27
    21a6:	aa 0f       	add	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	aa 0f       	add	r26, r26
    21ac:	bb 1f       	adc	r27, r27
    21ae:	2a 0f       	add	r18, r26
    21b0:	3b 1f       	adc	r19, r27
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
    21b2:	00 81       	ld	r16, Z
    21b4:	11 81       	ldd	r17, Z+1	; 0x01
    21b6:	c0 91 0b 02 	lds	r28, 0x020B
    21ba:	d0 91 0c 02 	lds	r29, 0x020C
    21be:	0c 9f       	mul	r16, r28
    21c0:	d0 01       	movw	r26, r0
    21c2:	0d 9f       	mul	r16, r29
    21c4:	b0 0d       	add	r27, r0
    21c6:	1c 9f       	mul	r17, r28
    21c8:	b0 0d       	add	r27, r0
    21ca:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    21cc:	2a 0f       	add	r18, r26
    21ce:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    21d0:	48 1b       	sub	r20, r24
    21d2:	59 0b       	sbc	r21, r25
    21d4:	44 0f       	add	r20, r20
    21d6:	55 1f       	adc	r21, r21
    21d8:	24 0f       	add	r18, r20
    21da:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    21dc:	26 0f       	add	r18, r22
    21de:	37 1f       	adc	r19, r23
    21e0:	30 93 f3 03 	sts	0x03F3, r19
    21e4:	20 93 f2 03 	sts	0x03F2, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    21e8:	37 fd       	sbrc	r19, 7
    21ea:	69 c0       	rjmp	.+210    	; 0x22be <__stack+0xbf>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    21ec:	12 16       	cp	r1, r18
    21ee:	13 06       	cpc	r1, r19
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <start_vertical_speed_control_left+0x106>
    21f2:	6f c0       	rjmp	.+222    	; 0x22d2 <__stack+0xd3>
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	97 fd       	sbrc	r25, 7
    21fa:	89 c0       	rjmp	.+274    	; 0x230e <__stack+0x10f>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    21fc:	7d e5       	ldi	r23, 0x5D	; 93
    21fe:	21 3c       	cpi	r18, 0xC1	; 193
    2200:	37 07       	cpc	r19, r23
    2202:	0c f4       	brge	.+2      	; 0x2206 <__stack+0x7>
    2204:	66 c0       	rjmp	.+204    	; 0x22d2 <__stack+0xd3>
    2206:	80 ec       	ldi	r24, 0xC0	; 192
    2208:	9d e5       	ldi	r25, 0x5D	; 93
    220a:	90 93 f3 03 	sts	0x03F3, r25
    220e:	80 93 f2 03 	sts	0x03F2, r24
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	92 e0       	ldi	r25, 0x02	; 2
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2224:	24 3b       	cpi	r18, 0xB4	; 180
    2226:	31 05       	cpc	r19, r1
    2228:	94 f4       	brge	.+36     	; 0x224e <__stack+0x4f>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    222a:	2a 35       	cpi	r18, 0x5A	; 90
    222c:	31 05       	cpc	r19, r1
    222e:	7c f4       	brge	.+30     	; 0x224e <__stack+0x4f>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2230:	18 16       	cp	r1, r24
    2232:	19 06       	cpc	r1, r25
    2234:	0c f0       	brlt	.+2      	; 0x2238 <__stack+0x39>
    2236:	93 c0       	rjmp	.+294    	; 0x235e <__stack+0x15f>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2238:	35 95       	asr	r19
    223a:	27 95       	ror	r18
    223c:	35 95       	asr	r19
    223e:	27 95       	ror	r18
    2240:	27 5e       	subi	r18, 0xE7	; 231
    2242:	3f 4f       	sbci	r19, 0xFF	; 255
    2244:	30 93 0c 02 	sts	0x020C, r19
    2248:	20 93 0b 02 	sts	0x020B, r18
    224c:	77 cf       	rjmp	.-274    	; 0x213c <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
    224e:	18 16       	cp	r1, r24
    2250:	19 06       	cpc	r1, r25
    2252:	94 f5       	brge	.+100    	; 0x22b8 <__stack+0xb9>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2254:	84 eb       	ldi	r24, 0xB4	; 180
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	82 1b       	sub	r24, r18
    225a:	93 0b       	sbc	r25, r19
    225c:	95 95       	asr	r25
    225e:	87 95       	ror	r24
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	49 96       	adiw	r24, 0x19	; 25
    2266:	90 93 0c 02 	sts	0x020C, r25
    226a:	80 93 0b 02 	sts	0x020B, r24
    226e:	66 cf       	rjmp	.-308    	; 0x213c <start_vertical_speed_control_left+0x4e>
}

void start_vertical_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    2270:	10 92 f9 03 	sts	0x03F9, r1
    2274:	10 92 f8 03 	sts	0x03F8, r1
		delta_left_speed_current = 0;
    2278:	10 92 3b 04 	sts	0x043B, r1
    227c:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    2280:	10 92 55 04 	sts	0x0455, r1
    2284:	10 92 54 04 	sts	0x0454, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2292:	69 ef       	ldi	r22, 0xF9	; 249
    2294:	20 3c       	cpi	r18, 0xC0	; 192
    2296:	36 07       	cpc	r19, r22
    2298:	4c f4       	brge	.+18     	; 0x22ac <__stack+0xad>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    229a:	20 ec       	ldi	r18, 0xC0	; 192
    229c:	39 ef       	ldi	r19, 0xF9	; 249
    229e:	30 93 f9 03 	sts	0x03F9, r19
    22a2:	20 93 f8 03 	sts	0x03F8, r18
    22a6:	60 e4       	ldi	r22, 0x40	; 64
    22a8:	7d ee       	ldi	r23, 0xED	; 237
    22aa:	77 cf       	rjmp	.-274    	; 0x219a <start_vertical_speed_control_left+0xac>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    22ac:	b9 01       	movw	r22, r18
    22ae:	66 0f       	add	r22, r22
    22b0:	77 1f       	adc	r23, r23
    22b2:	62 0f       	add	r22, r18
    22b4:	73 1f       	adc	r23, r19
    22b6:	71 cf       	rjmp	.-286    	; 0x219a <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    22b8:	84 eb       	ldi	r24, 0xB4	; 180
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	31 cf       	rjmp	.-414    	; 0x2120 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	97 fd       	sbrc	r25, 7
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <__stack+0xd3>
		pwm_left_speed_controller = 0;
    22c6:	10 92 f3 03 	sts	0x03F3, r1
    22ca:	10 92 f2 03 	sts	0x03F2, r1
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    22d2:	82 ea       	ldi	r24, 0xA2	; 162
    22d4:	20 34       	cpi	r18, 0x40	; 64
    22d6:	38 07       	cpc	r19, r24
    22d8:	04 f5       	brge	.+64     	; 0x231a <__stack+0x11b>
    22da:	80 e4       	ldi	r24, 0x40	; 64
    22dc:	92 ea       	ldi	r25, 0xA2	; 162
    22de:	90 93 f3 03 	sts	0x03F3, r25
    22e2:	80 93 f2 03 	sts	0x03F2, r24
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	9e ef       	ldi	r25, 0xFE	; 254
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	80 83       	st	Z, r24


}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    22f8:	80 91 e0 03 	lds	r24, 0x03E0
    22fc:	90 91 e1 03 	lds	r25, 0x03E1
    2300:	82 0f       	add	r24, r18
    2302:	93 1f       	adc	r25, r19
    2304:	90 93 3b 04 	sts	0x043B, r25
    2308:	80 93 3a 04 	sts	0x043A, r24
    230c:	2f cf       	rjmp	.-418    	; 0x216c <start_vertical_speed_control_left+0x7e>

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    230e:	10 92 f3 03 	sts	0x03F3, r1
    2312:	10 92 f2 03 	sts	0x03F2, r1
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    231a:	35 95       	asr	r19
    231c:	27 95       	ror	r18
    231e:	35 95       	asr	r19
    2320:	27 95       	ror	r18
    2322:	35 95       	asr	r19
    2324:	27 95       	ror	r18
    2326:	35 95       	asr	r19
    2328:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    232a:	31 83       	std	Z+1, r19	; 0x01
    232c:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    232e:	42 e0       	ldi	r20, 0x02	; 2
    2330:	21 30       	cpi	r18, 0x01	; 1
    2332:	34 07       	cpc	r19, r20
    2334:	0c f0       	brlt	.+2      	; 0x2338 <__stack+0x139>
    2336:	6d cf       	rjmp	.-294    	; 0x2212 <__stack+0x13>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2338:	6e ef       	ldi	r22, 0xFE	; 254
    233a:	20 30       	cpi	r18, 0x00	; 0
    233c:	36 07       	cpc	r19, r22
    233e:	9c f2       	brlt	.-90     	; 0x22e6 <__stack+0xe7>
    2340:	6c cf       	rjmp	.-296    	; 0x221a <__stack+0x1b>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2342:	88 e6       	ldi	r24, 0x68	; 104
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	82 1b       	sub	r24, r18
    2348:	93 0b       	sbc	r25, r19
    234a:	95 95       	asr	r25
    234c:	87 95       	ror	r24
    234e:	95 95       	asr	r25
    2350:	87 95       	ror	r24
    2352:	49 96       	adiw	r24, 0x19	; 25
    2354:	90 93 0c 02 	sts	0x020C, r25
    2358:	80 93 0b 02 	sts	0x020B, r24
    235c:	ef ce       	rjmp	.-546    	; 0x213c <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    235e:	35 95       	asr	r19
    2360:	27 95       	ror	r18
    2362:	35 95       	asr	r19
    2364:	27 95       	ror	r18
    2366:	89 e1       	ldi	r24, 0x19	; 25
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	82 1b       	sub	r24, r18
    236c:	93 0b       	sbc	r25, r19
    236e:	90 93 0c 02 	sts	0x020C, r25
    2372:	80 93 0b 02 	sts	0x020B, r24
    2376:	e2 ce       	rjmp	.-572    	; 0x213c <start_vertical_speed_control_left+0x4e>

00002378 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	09 f4       	brne	.+2      	; 0x238c <start_vertical_speed_control_right+0x14>
    238a:	b7 c0       	rjmp	.+366    	; 0x24fa <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    238c:	20 91 20 04 	lds	r18, 0x0420
    2390:	30 91 21 04 	lds	r19, 0x0421
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	2e 30       	cpi	r18, 0x0E	; 14
    2398:	34 07       	cpc	r19, r20
    239a:	0c f4       	brge	.+2      	; 0x239e <start_vertical_speed_control_right+0x26>
    239c:	88 c0       	rjmp	.+272    	; 0x24ae <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    239e:	18 16       	cp	r1, r24
    23a0:	19 06       	cpc	r1, r25
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <start_vertical_speed_control_right+0x2e>
    23a4:	13 c1       	rjmp	.+550    	; 0x25cc <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    23a6:	88 e6       	ldi	r24, 0x68	; 104
    23a8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    23aa:	82 1b       	sub	r24, r18
    23ac:	93 0b       	sbc	r25, r19
    23ae:	95 95       	asr	r25
    23b0:	87 95       	ror	r24
    23b2:	95 95       	asr	r25
    23b4:	87 95       	ror	r24
    23b6:	29 e1       	ldi	r18, 0x19	; 25
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	28 1b       	sub	r18, r24
    23bc:	39 0b       	sbc	r19, r25
    23be:	30 93 0e 02 	sts	0x020E, r19
    23c2:	20 93 0d 02 	sts	0x020D, r18
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_right_speed_prev = delta_right_speed_current;
    23c6:	40 91 5c 04 	lds	r20, 0x045C
    23ca:	50 91 5d 04 	lds	r21, 0x045D
    23ce:	50 93 3d 04 	sts	0x043D, r21
    23d2:	40 93 3c 04 	sts	0x043C, r20
	if(*pwm_right >= 0) {
    23d6:	20 81       	ld	r18, Z
    23d8:	31 81       	ldd	r19, Z+1	; 0x01
    23da:	37 fd       	sbrc	r19, 7
    23dc:	d2 c0       	rjmp	.+420    	; 0x2582 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    23de:	80 91 e2 03 	lds	r24, 0x03E2
    23e2:	90 91 e3 03 	lds	r25, 0x03E3
    23e6:	b9 01       	movw	r22, r18
    23e8:	68 1b       	sub	r22, r24
    23ea:	79 0b       	sbc	r23, r25
    23ec:	cb 01       	movw	r24, r22
    23ee:	70 93 5d 04 	sts	0x045D, r23
    23f2:	60 93 5c 04 	sts	0x045C, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    23f6:	20 91 fa 03 	lds	r18, 0x03FA
    23fa:	30 91 fb 03 	lds	r19, 0x03FB
    23fe:	28 0f       	add	r18, r24
    2400:	39 1f       	adc	r19, r25
    2402:	30 93 fb 03 	sts	0x03FB, r19
    2406:	20 93 fa 03 	sts	0x03FA, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    240a:	76 e0       	ldi	r23, 0x06	; 6
    240c:	21 34       	cpi	r18, 0x41	; 65
    240e:	37 07       	cpc	r19, r23
    2410:	0c f4       	brge	.+2      	; 0x2414 <start_vertical_speed_control_right+0x9c>
    2412:	84 c0       	rjmp	.+264    	; 0x251c <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2414:	20 e4       	ldi	r18, 0x40	; 64
    2416:	36 e0       	ldi	r19, 0x06	; 6
    2418:	30 93 fb 03 	sts	0x03FB, r19
    241c:	20 93 fa 03 	sts	0x03FA, r18
    2420:	60 ec       	ldi	r22, 0xC0	; 192
    2422:	72 e1       	ldi	r23, 0x12	; 18
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2424:	9c 01       	movw	r18, r24
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	dc 01       	movw	r26, r24
    242c:	aa 0f       	add	r26, r26
    242e:	bb 1f       	adc	r27, r27
    2430:	aa 0f       	add	r26, r26
    2432:	bb 1f       	adc	r27, r27
    2434:	aa 0f       	add	r26, r26
    2436:	bb 1f       	adc	r27, r27
    2438:	2a 0f       	add	r18, r26
    243a:	3b 1f       	adc	r19, r27
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    243c:	00 81       	ld	r16, Z
    243e:	11 81       	ldd	r17, Z+1	; 0x01
    2440:	c0 91 0d 02 	lds	r28, 0x020D
    2444:	d0 91 0e 02 	lds	r29, 0x020E
    2448:	0c 9f       	mul	r16, r28
    244a:	d0 01       	movw	r26, r0
    244c:	0d 9f       	mul	r16, r29
    244e:	b0 0d       	add	r27, r0
    2450:	1c 9f       	mul	r17, r28
    2452:	b0 0d       	add	r27, r0
    2454:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2456:	2a 0f       	add	r18, r26
    2458:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    245a:	48 1b       	sub	r20, r24
    245c:	59 0b       	sbc	r21, r25
    245e:	44 0f       	add	r20, r20
    2460:	55 1f       	adc	r21, r21
    2462:	24 0f       	add	r18, r20
    2464:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    2466:	26 0f       	add	r18, r22
    2468:	37 1f       	adc	r19, r23
    246a:	30 93 f1 03 	sts	0x03F1, r19
    246e:	20 93 f0 03 	sts	0x03F0, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2472:	37 fd       	sbrc	r19, 7
    2474:	69 c0       	rjmp	.+210    	; 0x2548 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2476:	12 16       	cp	r1, r18
    2478:	13 06       	cpc	r1, r19
    247a:	0c f0       	brlt	.+2      	; 0x247e <start_vertical_speed_control_right+0x106>
    247c:	6f c0       	rjmp	.+222    	; 0x255c <start_vertical_speed_control_right+0x1e4>
    247e:	80 81       	ld	r24, Z
    2480:	91 81       	ldd	r25, Z+1	; 0x01
    2482:	97 fd       	sbrc	r25, 7
    2484:	89 c0       	rjmp	.+274    	; 0x2598 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2486:	7d e5       	ldi	r23, 0x5D	; 93
    2488:	21 3c       	cpi	r18, 0xC1	; 193
    248a:	37 07       	cpc	r19, r23
    248c:	0c f4       	brge	.+2      	; 0x2490 <start_vertical_speed_control_right+0x118>
    248e:	66 c0       	rjmp	.+204    	; 0x255c <start_vertical_speed_control_right+0x1e4>
    2490:	80 ec       	ldi	r24, 0xC0	; 192
    2492:	9d e5       	ldi	r25, 0x5D	; 93
    2494:	90 93 f1 03 	sts	0x03F1, r25
    2498:	80 93 f0 03 	sts	0x03F0, r24
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    24ae:	24 3b       	cpi	r18, 0xB4	; 180
    24b0:	31 05       	cpc	r19, r1
    24b2:	94 f4       	brge	.+36     	; 0x24d8 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    24b4:	2a 35       	cpi	r18, 0x5A	; 90
    24b6:	31 05       	cpc	r19, r1
    24b8:	7c f4       	brge	.+30     	; 0x24d8 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    24ba:	18 16       	cp	r1, r24
    24bc:	19 06       	cpc	r1, r25
    24be:	0c f0       	brlt	.+2      	; 0x24c2 <start_vertical_speed_control_right+0x14a>
    24c0:	93 c0       	rjmp	.+294    	; 0x25e8 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    24c2:	35 95       	asr	r19
    24c4:	27 95       	ror	r18
    24c6:	35 95       	asr	r19
    24c8:	27 95       	ror	r18
    24ca:	27 5e       	subi	r18, 0xE7	; 231
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	30 93 0e 02 	sts	0x020E, r19
    24d2:	20 93 0d 02 	sts	0x020D, r18
    24d6:	77 cf       	rjmp	.-274    	; 0x23c6 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
    24d8:	18 16       	cp	r1, r24
    24da:	19 06       	cpc	r1, r25
    24dc:	94 f5       	brge	.+100    	; 0x2542 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    24de:	84 eb       	ldi	r24, 0xB4	; 180
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	82 1b       	sub	r24, r18
    24e4:	93 0b       	sbc	r25, r19
    24e6:	95 95       	asr	r25
    24e8:	87 95       	ror	r24
    24ea:	95 95       	asr	r25
    24ec:	87 95       	ror	r24
    24ee:	49 96       	adiw	r24, 0x19	; 25
    24f0:	90 93 0e 02 	sts	0x020E, r25
    24f4:	80 93 0d 02 	sts	0x020D, r24
    24f8:	66 cf       	rjmp	.-308    	; 0x23c6 <start_vertical_speed_control_right+0x4e>


void start_vertical_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    24fa:	10 92 fb 03 	sts	0x03FB, r1
    24fe:	10 92 fa 03 	sts	0x03FA, r1
		delta_right_speed_current = 0;
    2502:	10 92 5d 04 	sts	0x045D, r1
    2506:	10 92 5c 04 	sts	0x045C, r1
		delta_right_speed_prev = 0;
    250a:	10 92 3d 04 	sts	0x043D, r1
    250e:	10 92 3c 04 	sts	0x043C, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    251c:	69 ef       	ldi	r22, 0xF9	; 249
    251e:	20 3c       	cpi	r18, 0xC0	; 192
    2520:	36 07       	cpc	r19, r22
    2522:	4c f4       	brge	.+18     	; 0x2536 <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2524:	20 ec       	ldi	r18, 0xC0	; 192
    2526:	39 ef       	ldi	r19, 0xF9	; 249
    2528:	30 93 fb 03 	sts	0x03FB, r19
    252c:	20 93 fa 03 	sts	0x03FA, r18
    2530:	60 e4       	ldi	r22, 0x40	; 64
    2532:	7d ee       	ldi	r23, 0xED	; 237
    2534:	77 cf       	rjmp	.-274    	; 0x2424 <start_vertical_speed_control_right+0xac>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2536:	b9 01       	movw	r22, r18
    2538:	66 0f       	add	r22, r22
    253a:	77 1f       	adc	r23, r23
    253c:	62 0f       	add	r22, r18
    253e:	73 1f       	adc	r23, r19
    2540:	71 cf       	rjmp	.-286    	; 0x2424 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2542:	84 eb       	ldi	r24, 0xB4	; 180
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	31 cf       	rjmp	.-414    	; 0x23aa <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	97 fd       	sbrc	r25, 7
    254e:	06 c0       	rjmp	.+12     	; 0x255c <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    2550:	10 92 f1 03 	sts	0x03F1, r1
    2554:	10 92 f0 03 	sts	0x03F0, r1
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    255c:	82 ea       	ldi	r24, 0xA2	; 162
    255e:	20 34       	cpi	r18, 0x40	; 64
    2560:	38 07       	cpc	r19, r24
    2562:	04 f5       	brge	.+64     	; 0x25a4 <start_vertical_speed_control_right+0x22c>
    2564:	80 e4       	ldi	r24, 0x40	; 64
    2566:	92 ea       	ldi	r25, 0xA2	; 162
    2568:	90 93 f1 03 	sts	0x03F1, r25
    256c:	80 93 f0 03 	sts	0x03F0, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	9e ef       	ldi	r25, 0xFE	; 254
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24

}
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2582:	80 91 e2 03 	lds	r24, 0x03E2
    2586:	90 91 e3 03 	lds	r25, 0x03E3
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	90 93 5d 04 	sts	0x045D, r25
    2592:	80 93 5c 04 	sts	0x045C, r24
    2596:	2f cf       	rjmp	.-418    	; 0x23f6 <start_vertical_speed_control_right+0x7e>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2598:	10 92 f1 03 	sts	0x03F1, r1
    259c:	10 92 f0 03 	sts	0x03F0, r1
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    25a4:	35 95       	asr	r19
    25a6:	27 95       	ror	r18
    25a8:	35 95       	asr	r19
    25aa:	27 95       	ror	r18
    25ac:	35 95       	asr	r19
    25ae:	27 95       	ror	r18
    25b0:	35 95       	asr	r19
    25b2:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    25b4:	31 83       	std	Z+1, r19	; 0x01
    25b6:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    25b8:	42 e0       	ldi	r20, 0x02	; 2
    25ba:	21 30       	cpi	r18, 0x01	; 1
    25bc:	34 07       	cpc	r19, r20
    25be:	0c f0       	brlt	.+2      	; 0x25c2 <start_vertical_speed_control_right+0x24a>
    25c0:	6d cf       	rjmp	.-294    	; 0x249c <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    25c2:	6e ef       	ldi	r22, 0xFE	; 254
    25c4:	20 30       	cpi	r18, 0x00	; 0
    25c6:	36 07       	cpc	r19, r22
    25c8:	9c f2       	brlt	.-90     	; 0x2570 <start_vertical_speed_control_right+0x1f8>
    25ca:	6c cf       	rjmp	.-296    	; 0x24a4 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    25cc:	88 e6       	ldi	r24, 0x68	; 104
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	82 1b       	sub	r24, r18
    25d2:	93 0b       	sbc	r25, r19
    25d4:	95 95       	asr	r25
    25d6:	87 95       	ror	r24
    25d8:	95 95       	asr	r25
    25da:	87 95       	ror	r24
    25dc:	49 96       	adiw	r24, 0x19	; 25
    25de:	90 93 0e 02 	sts	0x020E, r25
    25e2:	80 93 0d 02 	sts	0x020D, r24
    25e6:	ef ce       	rjmp	.-546    	; 0x23c6 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    25e8:	35 95       	asr	r19
    25ea:	27 95       	ror	r18
    25ec:	35 95       	asr	r19
    25ee:	27 95       	ror	r18
    25f0:	89 e1       	ldi	r24, 0x19	; 25
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	82 1b       	sub	r24, r18
    25f6:	93 0b       	sbc	r25, r19
    25f8:	90 93 0e 02 	sts	0x020E, r25
    25fc:	80 93 0d 02 	sts	0x020D, r24
    2600:	e2 ce       	rjmp	.-572    	; 0x23c6 <start_vertical_speed_control_right+0x4e>

00002602 <start_orizzontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_right(signed int *pwm_right) {
    2602:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	09 f4       	brne	.+2      	; 0x260e <start_orizzontal_speed_control_right+0xc>
    260c:	7b c0       	rjmp	.+246    	; 0x2704 <start_orizzontal_speed_control_right+0x102>
		delta_right_speed_current = 0;
		delta_right_speed_prev = 0;
		return;
	}

	delta_right_speed_prev = delta_right_speed_current;
    260e:	a0 91 5c 04 	lds	r26, 0x045C
    2612:	b0 91 5d 04 	lds	r27, 0x045D
    2616:	b0 93 3d 04 	sts	0x043D, r27
    261a:	a0 93 3c 04 	sts	0x043C, r26
	if(*pwm_right >= 0) {
    261e:	20 81       	ld	r18, Z
    2620:	31 81       	ldd	r19, Z+1	; 0x01
    2622:	37 fd       	sbrc	r19, 7
    2624:	89 c0       	rjmp	.+274    	; 0x2738 <start_orizzontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2626:	80 91 e2 03 	lds	r24, 0x03E2
    262a:	90 91 e3 03 	lds	r25, 0x03E3
    262e:	a9 01       	movw	r20, r18
    2630:	48 1b       	sub	r20, r24
    2632:	59 0b       	sbc	r21, r25
    2634:	ca 01       	movw	r24, r20
    2636:	50 93 5d 04 	sts	0x045D, r21
    263a:	40 93 5c 04 	sts	0x045C, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    263e:	20 91 fa 03 	lds	r18, 0x03FA
    2642:	30 91 fb 03 	lds	r19, 0x03FB
    2646:	28 0f       	add	r18, r24
    2648:	39 1f       	adc	r19, r25
    264a:	30 93 fb 03 	sts	0x03FB, r19
    264e:	20 93 fa 03 	sts	0x03FA, r18

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
    2652:	56 e0       	ldi	r21, 0x06	; 6
    2654:	21 34       	cpi	r18, 0x41	; 65
    2656:	35 07       	cpc	r19, r21
    2658:	0c f4       	brge	.+2      	; 0x265c <start_orizzontal_speed_control_right+0x5a>
    265a:	61 c0       	rjmp	.+194    	; 0x271e <start_orizzontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
    265c:	20 e4       	ldi	r18, 0x40	; 64
    265e:	36 e0       	ldi	r19, 0x06	; 6
    2660:	30 93 fb 03 	sts	0x03FB, r19
    2664:	20 93 fa 03 	sts	0x03FA, r18
    2668:	60 e8       	ldi	r22, 0x80	; 128
    266a:	7c e0       	ldi	r23, 0x0C	; 12
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
    266c:	9c 01       	movw	r18, r24
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	28 0f       	add	r18, r24
    2674:	39 1f       	adc	r19, r25
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	22 0f       	add	r18, r18
    2680:	33 1f       	adc	r19, r19
    2682:	28 0f       	add	r18, r24
    2684:	39 1f       	adc	r19, r25
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
    2686:	40 81       	ld	r20, Z
    2688:	51 81       	ldd	r21, Z+1	; 0x01
    268a:	44 0f       	add	r20, r20
    268c:	55 1f       	adc	r21, r21
    268e:	44 0f       	add	r20, r20
    2690:	55 1f       	adc	r21, r21
    2692:	44 0f       	add	r20, r20
    2694:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
    2696:	24 0f       	add	r18, r20
    2698:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
    269a:	ad 01       	movw	r20, r26
    269c:	48 1b       	sub	r20, r24
    269e:	59 0b       	sbc	r21, r25
    26a0:	ca 01       	movw	r24, r20
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	84 0f       	add	r24, r20
    26a8:	95 1f       	adc	r25, r21
    26aa:	28 0f       	add	r18, r24
    26ac:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_ORIZZONTAL);
    26ae:	26 0f       	add	r18, r22
    26b0:	37 1f       	adc	r19, r23
    26b2:	30 93 f1 03 	sts	0x03F1, r19
    26b6:	20 93 f0 03 	sts	0x03F0, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    26ba:	37 fd       	sbrc	r19, 7
    26bc:	4c c0       	rjmp	.+152    	; 0x2756 <start_orizzontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    26be:	12 16       	cp	r1, r18
    26c0:	13 06       	cpc	r1, r19
    26c2:	0c f0       	brlt	.+2      	; 0x26c6 <start_orizzontal_speed_control_right+0xc4>
    26c4:	52 c0       	rjmp	.+164    	; 0x276a <start_orizzontal_speed_control_right+0x168>
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	97 fd       	sbrc	r25, 7
    26cc:	67 c0       	rjmp	.+206    	; 0x279c <start_orizzontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    26ce:	5d e5       	ldi	r21, 0x5D	; 93
    26d0:	21 3c       	cpi	r18, 0xC1	; 193
    26d2:	35 07       	cpc	r19, r21
    26d4:	0c f4       	brge	.+2      	; 0x26d8 <start_orizzontal_speed_control_right+0xd6>
    26d6:	49 c0       	rjmp	.+146    	; 0x276a <start_orizzontal_speed_control_right+0x168>
    26d8:	80 ec       	ldi	r24, 0xC0	; 192
    26da:	9d e5       	ldi	r25, 0x5D	; 93
    26dc:	90 93 f1 03 	sts	0x03F1, r25
    26e0:	80 93 f0 03 	sts	0x03F0, r24
    26e4:	2c ed       	ldi	r18, 0xDC	; 220
    26e6:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(*pwm_right > 0) {
		*pwm_right += 30;
    26e8:	22 5e       	subi	r18, 0xE2	; 226
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	31 83       	std	Z+1, r19	; 0x01
    26ee:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    26f0:	42 e0       	ldi	r20, 0x02	; 2
    26f2:	21 30       	cpi	r18, 0x01	; 1
    26f4:	34 07       	cpc	r19, r20
    26f6:	0c f4       	brge	.+2      	; 0x26fa <start_orizzontal_speed_control_right+0xf8>
    26f8:	48 c0       	rjmp	.+144    	; 0x278a <start_orizzontal_speed_control_right+0x188>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	92 e0       	ldi	r25, 0x02	; 2
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	08 95       	ret
}

void start_orizzontal_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    2704:	10 92 fb 03 	sts	0x03FB, r1
    2708:	10 92 fa 03 	sts	0x03FA, r1
		delta_right_speed_current = 0;
    270c:	10 92 5d 04 	sts	0x045D, r1
    2710:	10 92 5c 04 	sts	0x045C, r1
		delta_right_speed_prev = 0;
    2714:	10 92 3d 04 	sts	0x043D, r1
    2718:	10 92 3c 04 	sts	0x043C, r1
		return;
    271c:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    271e:	49 ef       	ldi	r20, 0xF9	; 249
    2720:	20 3c       	cpi	r18, 0xC0	; 192
    2722:	34 07       	cpc	r19, r20
    2724:	a4 f4       	brge	.+40     	; 0x274e <start_orizzontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
    2726:	20 ec       	ldi	r18, 0xC0	; 192
    2728:	39 ef       	ldi	r19, 0xF9	; 249
    272a:	30 93 fb 03 	sts	0x03FB, r19
    272e:	20 93 fa 03 	sts	0x03FA, r18
    2732:	60 e8       	ldi	r22, 0x80	; 128
    2734:	73 ef       	ldi	r23, 0xF3	; 243
    2736:	9a cf       	rjmp	.-204    	; 0x266c <start_orizzontal_speed_control_right+0x6a>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2738:	80 91 e2 03 	lds	r24, 0x03E2
    273c:	90 91 e3 03 	lds	r25, 0x03E3
    2740:	82 0f       	add	r24, r18
    2742:	93 1f       	adc	r25, r19
    2744:	90 93 5d 04 	sts	0x045D, r25
    2748:	80 93 5c 04 	sts	0x045C, r24
    274c:	78 cf       	rjmp	.-272    	; 0x263e <start_orizzontal_speed_control_right+0x3c>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    274e:	b9 01       	movw	r22, r18
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	8b cf       	rjmp	.-234    	; 0x266c <start_orizzontal_speed_control_right+0x6a>
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_ORIZZONTAL);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	97 fd       	sbrc	r25, 7
    275c:	06 c0       	rjmp	.+12     	; 0x276a <start_orizzontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    275e:	10 92 f1 03 	sts	0x03F1, r1
    2762:	10 92 f0 03 	sts	0x03F0, r1
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    276a:	82 ea       	ldi	r24, 0xA2	; 162
    276c:	20 34       	cpi	r18, 0x40	; 64
    276e:	38 07       	cpc	r19, r24
    2770:	dc f4       	brge	.+54     	; 0x27a8 <start_orizzontal_speed_control_right+0x1a6>
    2772:	80 e4       	ldi	r24, 0x40	; 64
    2774:	92 ea       	ldi	r25, 0xA2	; 162
    2776:	90 93 f1 03 	sts	0x03F1, r25
    277a:	80 93 f0 03 	sts	0x03F0, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    277e:	24 e2       	ldi	r18, 0x24	; 36
    2780:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2782:	2e 51       	subi	r18, 0x1E	; 30
    2784:	30 40       	sbci	r19, 0x00	; 0
    2786:	31 83       	std	Z+1, r19	; 0x01
    2788:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    278a:	5e ef       	ldi	r21, 0xFE	; 254
    278c:	20 30       	cpi	r18, 0x00	; 0
    278e:	35 07       	cpc	r19, r21
    2790:	24 f4       	brge	.+8      	; 0x279a <start_orizzontal_speed_control_right+0x198>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	9e ef       	ldi	r25, 0xFE	; 254
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	08 95       	ret

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    279c:	10 92 f1 03 	sts	0x03F1, r1
    27a0:	10 92 f0 03 	sts	0x03F0, r1
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    27a8:	35 95       	asr	r19
    27aa:	27 95       	ror	r18
    27ac:	35 95       	asr	r19
    27ae:	27 95       	ror	r18
    27b0:	35 95       	asr	r19
    27b2:	27 95       	ror	r18
    27b4:	35 95       	asr	r19
    27b6:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    27b8:	31 83       	std	Z+1, r19	; 0x01
    27ba:	20 83       	st	Z, r18
	if(*pwm_right > 0) {
    27bc:	12 16       	cp	r1, r18
    27be:	13 06       	cpc	r1, r19
    27c0:	0c f4       	brge	.+2      	; 0x27c4 <start_orizzontal_speed_control_right+0x1c2>
    27c2:	92 cf       	rjmp	.-220    	; 0x26e8 <start_orizzontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    27c4:	21 15       	cp	r18, r1
    27c6:	31 05       	cpc	r19, r1
    27c8:	e1 f6       	brne	.-72     	; 0x2782 <start_orizzontal_speed_control_right+0x180>
    27ca:	08 95       	ret

000027cc <start_orizzontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_left(signed int *pwm_left) {
    27cc:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <start_orizzontal_speed_control_left+0xc>
    27d6:	7b c0       	rjmp	.+246    	; 0x28ce <start_orizzontal_speed_control_left+0x102>
		delta_left_speed_current = 0;
		delta_left_speed_prev = 0;
		return;
	}

	delta_left_speed_prev = delta_left_speed_current; 
    27d8:	a0 91 3a 04 	lds	r26, 0x043A
    27dc:	b0 91 3b 04 	lds	r27, 0x043B
    27e0:	b0 93 55 04 	sts	0x0455, r27
    27e4:	a0 93 54 04 	sts	0x0454, r26
	if(*pwm_left >= 0) {
    27e8:	20 81       	ld	r18, Z
    27ea:	31 81       	ldd	r19, Z+1	; 0x01
    27ec:	37 fd       	sbrc	r19, 7
    27ee:	89 c0       	rjmp	.+274    	; 0x2902 <start_orizzontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    27f0:	80 91 e0 03 	lds	r24, 0x03E0
    27f4:	90 91 e1 03 	lds	r25, 0x03E1
    27f8:	a9 01       	movw	r20, r18
    27fa:	48 1b       	sub	r20, r24
    27fc:	59 0b       	sbc	r21, r25
    27fe:	ca 01       	movw	r24, r20
    2800:	50 93 3b 04 	sts	0x043B, r21
    2804:	40 93 3a 04 	sts	0x043A, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    2808:	20 91 f8 03 	lds	r18, 0x03F8
    280c:	30 91 f9 03 	lds	r19, 0x03F9
    2810:	28 0f       	add	r18, r24
    2812:	39 1f       	adc	r19, r25
    2814:	30 93 f9 03 	sts	0x03F9, r19
    2818:	20 93 f8 03 	sts	0x03F8, r18

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
    281c:	56 e0       	ldi	r21, 0x06	; 6
    281e:	21 34       	cpi	r18, 0x41	; 65
    2820:	35 07       	cpc	r19, r21
    2822:	0c f4       	brge	.+2      	; 0x2826 <start_orizzontal_speed_control_left+0x5a>
    2824:	61 c0       	rjmp	.+194    	; 0x28e8 <start_orizzontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
    2826:	20 e4       	ldi	r18, 0x40	; 64
    2828:	36 e0       	ldi	r19, 0x06	; 6
    282a:	30 93 f9 03 	sts	0x03F9, r19
    282e:	20 93 f8 03 	sts	0x03F8, r18
    2832:	60 e8       	ldi	r22, 0x80	; 128
    2834:	7c e0       	ldi	r23, 0x0C	; 12
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
    2836:	9c 01       	movw	r18, r24
    2838:	22 0f       	add	r18, r18
    283a:	33 1f       	adc	r19, r19
    283c:	28 0f       	add	r18, r24
    283e:	39 1f       	adc	r19, r25
    2840:	22 0f       	add	r18, r18
    2842:	33 1f       	adc	r19, r19
    2844:	22 0f       	add	r18, r18
    2846:	33 1f       	adc	r19, r19
    2848:	22 0f       	add	r18, r18
    284a:	33 1f       	adc	r19, r19
    284c:	28 0f       	add	r18, r24
    284e:	39 1f       	adc	r19, r25
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
    2850:	40 81       	ld	r20, Z
    2852:	51 81       	ldd	r21, Z+1	; 0x01
    2854:	44 0f       	add	r20, r20
    2856:	55 1f       	adc	r21, r21
    2858:	44 0f       	add	r20, r20
    285a:	55 1f       	adc	r21, r21
    285c:	44 0f       	add	r20, r20
    285e:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
    2860:	24 0f       	add	r18, r20
    2862:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
    2864:	ad 01       	movw	r20, r26
    2866:	48 1b       	sub	r20, r24
    2868:	59 0b       	sbc	r21, r25
    286a:	ca 01       	movw	r24, r20
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	84 0f       	add	r24, r20
    2872:	95 1f       	adc	r25, r21
    2874:	28 0f       	add	r18, r24
    2876:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_ORIZZONTAL);
    2878:	26 0f       	add	r18, r22
    287a:	37 1f       	adc	r19, r23
    287c:	30 93 f3 03 	sts	0x03F3, r19
    2880:	20 93 f2 03 	sts	0x03F2, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2884:	37 fd       	sbrc	r19, 7
    2886:	4c c0       	rjmp	.+152    	; 0x2920 <start_orizzontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2888:	12 16       	cp	r1, r18
    288a:	13 06       	cpc	r1, r19
    288c:	0c f0       	brlt	.+2      	; 0x2890 <start_orizzontal_speed_control_left+0xc4>
    288e:	52 c0       	rjmp	.+164    	; 0x2934 <start_orizzontal_speed_control_left+0x168>
    2890:	80 81       	ld	r24, Z
    2892:	91 81       	ldd	r25, Z+1	; 0x01
    2894:	97 fd       	sbrc	r25, 7
    2896:	67 c0       	rjmp	.+206    	; 0x2966 <start_orizzontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2898:	5d e5       	ldi	r21, 0x5D	; 93
    289a:	21 3c       	cpi	r18, 0xC1	; 193
    289c:	35 07       	cpc	r19, r21
    289e:	0c f4       	brge	.+2      	; 0x28a2 <start_orizzontal_speed_control_left+0xd6>
    28a0:	49 c0       	rjmp	.+146    	; 0x2934 <start_orizzontal_speed_control_left+0x168>
    28a2:	80 ec       	ldi	r24, 0xC0	; 192
    28a4:	9d e5       	ldi	r25, 0x5D	; 93
    28a6:	90 93 f3 03 	sts	0x03F3, r25
    28aa:	80 93 f2 03 	sts	0x03F2, r24
    28ae:	2c ed       	ldi	r18, 0xDC	; 220
    28b0:	35 e0       	ldi	r19, 0x05	; 5
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
	if(*pwm_left > 0) {
		*pwm_left += 30;
    28b2:	22 5e       	subi	r18, 0xE2	; 226
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	31 83       	std	Z+1, r19	; 0x01
    28b8:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    28ba:	42 e0       	ldi	r20, 0x02	; 2
    28bc:	21 30       	cpi	r18, 0x01	; 1
    28be:	34 07       	cpc	r19, r20
    28c0:	0c f4       	brge	.+2      	; 0x28c4 <start_orizzontal_speed_control_left+0xf8>
    28c2:	48 c0       	rjmp	.+144    	; 0x2954 <start_orizzontal_speed_control_left+0x188>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	92 e0       	ldi	r25, 0x02	; 2
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
    28cc:	08 95       	ret
}

void start_orizzontal_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    28ce:	10 92 f9 03 	sts	0x03F9, r1
    28d2:	10 92 f8 03 	sts	0x03F8, r1
		delta_left_speed_current = 0;
    28d6:	10 92 3b 04 	sts	0x043B, r1
    28da:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    28de:	10 92 55 04 	sts	0x0455, r1
    28e2:	10 92 54 04 	sts	0x0454, r1
		return;
    28e6:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    28e8:	49 ef       	ldi	r20, 0xF9	; 249
    28ea:	20 3c       	cpi	r18, 0xC0	; 192
    28ec:	34 07       	cpc	r19, r20
    28ee:	a4 f4       	brge	.+40     	; 0x2918 <start_orizzontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
    28f0:	20 ec       	ldi	r18, 0xC0	; 192
    28f2:	39 ef       	ldi	r19, 0xF9	; 249
    28f4:	30 93 f9 03 	sts	0x03F9, r19
    28f8:	20 93 f8 03 	sts	0x03F8, r18
    28fc:	60 e8       	ldi	r22, 0x80	; 128
    28fe:	73 ef       	ldi	r23, 0xF3	; 243
    2900:	9a cf       	rjmp	.-204    	; 0x2836 <start_orizzontal_speed_control_left+0x6a>

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2902:	80 91 e0 03 	lds	r24, 0x03E0
    2906:	90 91 e1 03 	lds	r25, 0x03E1
    290a:	82 0f       	add	r24, r18
    290c:	93 1f       	adc	r25, r19
    290e:	90 93 3b 04 	sts	0x043B, r25
    2912:	80 93 3a 04 	sts	0x043A, r24
    2916:	78 cf       	rjmp	.-272    	; 0x2808 <start_orizzontal_speed_control_left+0x3c>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2918:	b9 01       	movw	r22, r18
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	8b cf       	rjmp	.-234    	; 0x2836 <start_orizzontal_speed_control_left+0x6a>
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_ORIZZONTAL);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	97 fd       	sbrc	r25, 7
    2926:	06 c0       	rjmp	.+12     	; 0x2934 <start_orizzontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2928:	10 92 f3 03 	sts	0x03F3, r1
    292c:	10 92 f2 03 	sts	0x03F2, r1
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2934:	82 ea       	ldi	r24, 0xA2	; 162
    2936:	20 34       	cpi	r18, 0x40	; 64
    2938:	38 07       	cpc	r19, r24
    293a:	dc f4       	brge	.+54     	; 0x2972 <start_orizzontal_speed_control_left+0x1a6>
    293c:	80 e4       	ldi	r24, 0x40	; 64
    293e:	92 ea       	ldi	r25, 0xA2	; 162
    2940:	90 93 f3 03 	sts	0x03F3, r25
    2944:	80 93 f2 03 	sts	0x03F2, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2948:	24 e2       	ldi	r18, 0x24	; 36
    294a:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    294c:	2e 51       	subi	r18, 0x1E	; 30
    294e:	30 40       	sbci	r19, 0x00	; 0
    2950:	31 83       	std	Z+1, r19	; 0x01
    2952:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2954:	5e ef       	ldi	r21, 0xFE	; 254
    2956:	20 30       	cpi	r18, 0x00	; 0
    2958:	35 07       	cpc	r19, r21
    295a:	24 f4       	brge	.+8      	; 0x2964 <start_orizzontal_speed_control_left+0x198>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	9e ef       	ldi	r25, 0xFE	; 254
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	80 83       	st	Z, r24
    2964:	08 95       	ret

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2966:	10 92 f3 03 	sts	0x03F3, r1
    296a:	10 92 f2 03 	sts	0x03F2, r1
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2972:	35 95       	asr	r19
    2974:	27 95       	ror	r18
    2976:	35 95       	asr	r19
    2978:	27 95       	ror	r18
    297a:	35 95       	asr	r19
    297c:	27 95       	ror	r18
    297e:	35 95       	asr	r19
    2980:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2982:	31 83       	std	Z+1, r19	; 0x01
    2984:	20 83       	st	Z, r18
	if(*pwm_left > 0) {
    2986:	12 16       	cp	r1, r18
    2988:	13 06       	cpc	r1, r19
    298a:	0c f4       	brge	.+2      	; 0x298e <start_orizzontal_speed_control_left+0x1c2>
    298c:	92 cf       	rjmp	.-220    	; 0x28b2 <start_orizzontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    298e:	21 15       	cp	r18, r1
    2990:	31 05       	cpc	r19, r1
    2992:	e1 f6       	brne	.-72     	; 0x294c <start_orizzontal_speed_control_left+0x180>
    2994:	08 95       	ret

00002996 <initPortsIO>:
#include <avr\io.h>
#include "ports_io.h"

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    2996:	8f ef       	ldi	r24, 0xFF	; 255
    2998:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    299a:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    299c:	97 ef       	ldi	r25, 0xF7	; 247
    299e:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    29a0:	90 ee       	ldi	r25, 0xE0	; 224
    29a2:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    29a4:	90 ef       	ldi	r25, 0xF0	; 240
    29a6:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    29a8:	90 eb       	ldi	r25, 0xB0	; 176
    29aa:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    29ac:	9c ef       	ldi	r25, 0xFC	; 252
    29ae:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    29b0:	93 e0       	ldi	r25, 0x03	; 3
    29b2:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;	// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    29b4:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    29b6:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    29b8:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    29ba:	83 bb       	out	0x13, r24	; 19
	#ifdef HW_REV_3_0
		PORTG = 0x00;	// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;	// default for unused pins is 0
    29bc:	14 ba       	out	0x14, r1	; 20
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;	// default for unused pins is 0, led3 to 1
	#endif	

	DDRH = 0xFF;	// all pins to output; when usart is activated it changes the pins direction accordingly
    29be:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    29c2:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;	// cliff pulses as output; charge-on, button0, remote, charge status as input
    29c6:	9f e0       	ldi	r25, 0x0F	; 15
    29c8:	90 93 04 01 	sts	0x0104, r25
	#ifdef HW_REV_3_0
		PORTJ &= 0x00;	// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	#endif
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
    29cc:	90 93 05 01 	sts	0x0105, r25
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    29d0:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    29d4:	80 93 0a 01 	sts	0x010A, r24
	#ifdef HW_REV_3_0
		PORTL = 0x00;	// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;	// pwm (unused) and unused pins to 0
    29d8:	10 92 0b 01 	sts	0x010B, r1
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;	// pwm (unused) to 0, leds to 1
	#endif
		
}
    29dc:	08 95       	ret

000029de <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    29de:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    29e2:	10 92 bc 00 	sts	0x00BC, r1
}
    29e6:	08 95       	ret

000029e8 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    29e8:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    29ea:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    29ec:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    29f0:	80 e2       	ldi	r24, 0x20	; 32
    29f2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    29f6:	08 95       	ret

000029f8 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    29f8:	94 ea       	ldi	r25, 0xA4	; 164
    29fa:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    29fe:	90 91 bc 00 	lds	r25, 0x00BC
    2a02:	97 ff       	sbrs	r25, 7
    2a04:	fc cf       	rjmp	.-8      	; 0x29fe <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2a06:	90 91 b9 00 	lds	r25, 0x00B9
    2a0a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2a0c:	98 30       	cpi	r25, 0x08	; 8
    2a0e:	21 f0       	breq	.+8      	; 0x2a18 <i2c_start+0x20>
    2a10:	90 31       	cpi	r25, 0x10	; 16
    2a12:	11 f0       	breq	.+4      	; 0x2a18 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2a18:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a1c:	84 e8       	ldi	r24, 0x84	; 132
    2a1e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2a22:	80 91 bc 00 	lds	r24, 0x00BC
    2a26:	87 ff       	sbrs	r24, 7
    2a28:	fc cf       	rjmp	.-8      	; 0x2a22 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2a2a:	90 91 b9 00 	lds	r25, 0x00B9
    2a2e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2a30:	98 31       	cpi	r25, 0x18	; 24
    2a32:	21 f0       	breq	.+8      	; 0x2a3c <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 34       	cpi	r25, 0x40	; 64
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2a3a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2a3c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2a3e:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	08 95       	ret

00002a44 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a44:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2a46:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2a48:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a4a:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2a4e:	90 91 bc 00 	lds	r25, 0x00BC
    2a52:	97 ff       	sbrs	r25, 7
    2a54:	fc cf       	rjmp	.-8      	; 0x2a4e <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2a56:	90 91 b9 00 	lds	r25, 0x00B9
    2a5a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2a5c:	98 30       	cpi	r25, 0x08	; 8
    2a5e:	11 f0       	breq	.+4      	; 0x2a64 <i2c_start_wait+0x20>
    2a60:	90 31       	cpi	r25, 0x10	; 16
    2a62:	99 f7       	brne	.-26     	; 0x2a4a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2a64:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2a68:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2a6c:	90 91 bc 00 	lds	r25, 0x00BC
    2a70:	97 ff       	sbrs	r25, 7
    2a72:	fc cf       	rjmp	.-8      	; 0x2a6c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2a74:	90 91 b9 00 	lds	r25, 0x00B9
    2a78:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2a7a:	90 32       	cpi	r25, 0x20	; 32
    2a7c:	19 f0       	breq	.+6      	; 0x2a84 <i2c_start_wait+0x40>
    2a7e:	98 35       	cpi	r25, 0x58	; 88
    2a80:	09 f0       	breq	.+2      	; 0x2a84 <i2c_start_wait+0x40>
    2a82:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2a84:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2a88:	90 91 bc 00 	lds	r25, 0x00BC
    2a8c:	94 fd       	sbrc	r25, 4
    2a8e:	fc cf       	rjmp	.-8      	; 0x2a88 <i2c_start_wait+0x44>
    2a90:	dc cf       	rjmp	.-72     	; 0x2a4a <i2c_start_wait+0x6>

00002a92 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a92:	94 ea       	ldi	r25, 0xA4	; 164
    2a94:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2a98:	90 91 bc 00 	lds	r25, 0x00BC
    2a9c:	97 ff       	sbrs	r25, 7
    2a9e:	fc cf       	rjmp	.-8      	; 0x2a98 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2aa0:	90 91 b9 00 	lds	r25, 0x00B9
    2aa4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2aa6:	98 30       	cpi	r25, 0x08	; 8
    2aa8:	21 f0       	breq	.+8      	; 0x2ab2 <i2c_rep_start+0x20>
    2aaa:	90 31       	cpi	r25, 0x10	; 16
    2aac:	11 f0       	breq	.+4      	; 0x2ab2 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2ab2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ab6:	84 e8       	ldi	r24, 0x84	; 132
    2ab8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2abc:	80 91 bc 00 	lds	r24, 0x00BC
    2ac0:	87 ff       	sbrs	r24, 7
    2ac2:	fc cf       	rjmp	.-8      	; 0x2abc <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ac4:	90 91 b9 00 	lds	r25, 0x00B9
    2ac8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2aca:	98 31       	cpi	r25, 0x18	; 24
    2acc:	21 f0       	breq	.+8      	; 0x2ad6 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 34       	cpi	r25, 0x40	; 64
    2ad2:	19 f0       	breq	.+6      	; 0x2ada <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2ad4:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2ad8:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	08 95       	ret

00002ade <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2ade:	84 e9       	ldi	r24, 0x94	; 148
    2ae0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2ae4:	80 91 bc 00 	lds	r24, 0x00BC
    2ae8:	84 fd       	sbrc	r24, 4
    2aea:	fc cf       	rjmp	.-8      	; 0x2ae4 <i2c_stop+0x6>

}/* i2c_stop */
    2aec:	08 95       	ret

00002aee <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2aee:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2af2:	84 e8       	ldi	r24, 0x84	; 132
    2af4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2af8:	80 91 bc 00 	lds	r24, 0x00BC
    2afc:	87 ff       	sbrs	r24, 7
    2afe:	fc cf       	rjmp	.-8      	; 0x2af8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2b00:	90 91 b9 00 	lds	r25, 0x00B9
    2b04:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	98 32       	cpi	r25, 0x28	; 40
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2b0c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2b10:	08 95       	ret

00002b12 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2b12:	84 ec       	ldi	r24, 0xC4	; 196
    2b14:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2b18:	80 91 bc 00 	lds	r24, 0x00BC
    2b1c:	87 ff       	sbrs	r24, 7
    2b1e:	fc cf       	rjmp	.-8      	; 0x2b18 <i2c_readAck+0x6>

    return TWDR;
    2b20:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2b24:	08 95       	ret

00002b26 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b26:	84 e8       	ldi	r24, 0x84	; 132
    2b28:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2b2c:	80 91 bc 00 	lds	r24, 0x00BC
    2b30:	87 ff       	sbrs	r24, 7
    2b32:	fc cf       	rjmp	.-8      	; 0x2b2c <i2c_readNak+0x6>
	
    return TWDR;
    2b34:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2b38:	08 95       	ret

00002b3a <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    2b3a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2b3e:	80 e1       	ldi	r24, 0x10	; 16
    2b40:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2b44:	e0 ec       	ldi	r30, 0xC0	; 192
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	82 60       	ori	r24, 0x02	; 2
    2b4c:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2b4e:	e1 ec       	ldi	r30, 0xC1	; 193
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	88 69       	ori	r24, 0x98	; 152
    2b56:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    2b58:	e2 ec       	ldi	r30, 0xC2	; 194
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	86 60       	ori	r24, 0x06	; 6
    2b60:	80 83       	st	Z, r24

}
    2b62:	08 95       	ret

00002b64 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;
    2b64:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2b68:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2b6c:	10 92 c2 00 	sts	0x00C2, r1

}
    2b70:	08 95       	ret

00002b72 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    2b72:	90 91 c0 00 	lds	r25, 0x00C0
    2b76:	95 ff       	sbrs	r25, 5
    2b78:	fc cf       	rjmp	.-8      	; 0x2b72 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    2b7a:	80 93 c6 00 	sts	0x00C6, r24

}
    2b7e:	08 95       	ret

00002b80 <__vector_25>:

ISR(USART0_RX_vect) {
    2b80:	1f 92       	push	r1
    2b82:	0f 92       	push	r0
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	0f 92       	push	r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	2f 93       	push	r18
    2b8c:	8f 93       	push	r24
    2b8e:	9f 93       	push	r25

	char receivedByte = UDR0;
    2b90:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    2b94:	90 91 18 02 	lds	r25, 0x0218
    2b98:	99 23       	and	r25, r25
    2b9a:	b9 f0       	breq	.+46     	; 0x2bca <__vector_25+0x4a>
		switch(receivedByte) {
    2b9c:	82 33       	cpi	r24, 0x32	; 50
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <__vector_25+0x22>
    2ba0:	5b c0       	rjmp	.+182    	; 0x2c58 <__vector_25+0xd8>
    2ba2:	83 33       	cpi	r24, 0x33	; 51
    2ba4:	80 f5       	brcc	.+96     	; 0x2c06 <__vector_25+0x86>
    2ba6:	80 33       	cpi	r24, 0x30	; 48
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <__vector_25+0x2c>
    2baa:	7e c0       	rjmp	.+252    	; 0x2ca8 <__vector_25+0x128>
    2bac:	81 33       	cpi	r24, 0x31	; 49
    2bae:	29 f4       	brne	.+10     	; 0x2bba <__vector_25+0x3a>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2bb6:	10 92 18 02 	sts	0x0218, r1

	}



}
    2bba:	9f 91       	pop	r25
    2bbc:	8f 91       	pop	r24
    2bbe:	2f 91       	pop	r18
    2bc0:	0f 90       	pop	r0
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	0f 90       	pop	r0
    2bc6:	1f 90       	pop	r1
    2bc8:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2bca:	90 91 17 02 	lds	r25, 0x0217
    2bce:	92 30       	cpi	r25, 0x02	; 2
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <__vector_25+0x54>
    2bd2:	48 c0       	rjmp	.+144    	; 0x2c64 <__vector_25+0xe4>
    2bd4:	93 30       	cpi	r25, 0x03	; 3
    2bd6:	40 f1       	brcs	.+80     	; 0x2c28 <__vector_25+0xa8>
    2bd8:	94 30       	cpi	r25, 0x04	; 4
    2bda:	09 f4       	brne	.+2      	; 0x2bde <__vector_25+0x5e>
    2bdc:	8c c0       	rjmp	.+280    	; 0x2cf6 <__vector_25+0x176>
    2bde:	94 30       	cpi	r25, 0x04	; 4
    2be0:	08 f4       	brcc	.+2      	; 0x2be4 <__vector_25+0x64>
    2be2:	73 c0       	rjmp	.+230    	; 0x2cca <__vector_25+0x14a>
    2be4:	95 30       	cpi	r25, 0x05	; 5
    2be6:	49 f7       	brne	.-46     	; 0x2bba <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    2be8:	83 37       	cpi	r24, 0x73	; 115
    2bea:	39 f7       	brne	.-50     	; 0x2bba <__vector_25+0x3a>
					sendAdcValues = 0;
    2bec:	10 92 08 04 	sts	0x0408, r1
					choosePeripheral = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	80 93 18 02 	sts	0x0218, r24

	}



}
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	2f 91       	pop	r18
    2bfc:	0f 90       	pop	r0
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	0f 90       	pop	r0
    2c02:	1f 90       	pop	r1
    2c04:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    2c06:	84 33       	cpi	r24, 0x34	; 52
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <__vector_25+0x8c>
    2c0a:	59 c0       	rjmp	.+178    	; 0x2cbe <__vector_25+0x13e>
    2c0c:	84 33       	cpi	r24, 0x34	; 52
    2c0e:	08 f4       	brcc	.+2      	; 0x2c12 <__vector_25+0x92>
    2c10:	50 c0       	rjmp	.+160    	; 0x2cb2 <__vector_25+0x132>
    2c12:	85 33       	cpi	r24, 0x35	; 53
    2c14:	91 f6       	brne	.-92     	; 0x2bba <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2c16:	85 e0       	ldi	r24, 0x05	; 5
    2c18:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2c1c:	10 92 18 02 	sts	0x0218, r1
				sendAdcValues = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	80 93 08 04 	sts	0x0408, r24
				break;
    2c26:	c9 cf       	rjmp	.-110    	; 0x2bba <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2c28:	99 23       	and	r25, r25
    2c2a:	91 f5       	brne	.+100    	; 0x2c90 <__vector_25+0x110>
			case 0:	// red led
				if(receivedByte == '-') {
    2c2c:	8d 32       	cpi	r24, 0x2D	; 45
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <__vector_25+0xb2>
    2c30:	d5 c0       	rjmp	.+426    	; 0x2ddc <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2c32:	8b 32       	cpi	r24, 0x2B	; 43
    2c34:	e9 f6       	brne	.-70     	; 0x2bf0 <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2c36:	80 91 14 02 	lds	r24, 0x0214
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2c3e:	97 fd       	sbrc	r25, 7
    2c40:	3f c1       	rjmp	.+638    	; 0x2ec0 <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2c42:	80 93 14 02 	sts	0x0214, r24
					if(pwm_red == 0) {
    2c46:	88 23       	and	r24, r24
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <__vector_25+0xcc>
    2c4a:	3c c1       	rjmp	.+632    	; 0x2ec4 <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	90 93 89 00 	sts	0x0089, r25
    2c52:	80 93 88 00 	sts	0x0088, r24
    2c56:	b1 cf       	rjmp	.-158    	; 0x2bba <__vector_25+0x3a>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2c5e:	10 92 18 02 	sts	0x0218, r1
				break;
    2c62:	ab cf       	rjmp	.-170    	; 0x2bba <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2c64:	8d 32       	cpi	r24, 0x2D	; 45
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <__vector_25+0xea>
    2c68:	e8 c0       	rjmp	.+464    	; 0x2e3a <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2c6a:	8b 32       	cpi	r24, 0x2B	; 43
    2c6c:	09 f6       	brne	.-126    	; 0x2bf0 <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2c6e:	80 91 16 02 	lds	r24, 0x0216
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2c76:	97 fd       	sbrc	r25, 7
    2c78:	35 c1       	rjmp	.+618    	; 0x2ee4 <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2c7a:	80 93 16 02 	sts	0x0216, r24
					if(pwm_blue == 0) {
    2c7e:	88 23       	and	r24, r24
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <__vector_25+0x104>
    2c82:	32 c1       	rjmp	.+612    	; 0x2ee8 <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	90 93 8d 00 	sts	0x008D, r25
    2c8a:	80 93 8c 00 	sts	0x008C, r24
    2c8e:	95 cf       	rjmp	.-214    	; 0x2bba <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2c90:	91 30       	cpi	r25, 0x01	; 1
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <__vector_25+0x116>
    2c94:	92 cf       	rjmp	.-220    	; 0x2bba <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2c96:	8d 32       	cpi	r24, 0x2D	; 45
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <__vector_25+0x11c>
    2c9a:	89 c0       	rjmp	.+274    	; 0x2dae <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2c9c:	8b 32       	cpi	r24, 0x2B	; 43
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <__vector_25+0x122>
    2ca0:	3f c0       	rjmp	.+126    	; 0x2d20 <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2ca2:	90 93 18 02 	sts	0x0218, r25
    2ca6:	89 cf       	rjmp	.-238    	; 0x2bba <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2ca8:	10 92 17 02 	sts	0x0217, r1
				choosePeripheral = 0;
    2cac:	10 92 18 02 	sts	0x0218, r1
				break;
    2cb0:	84 cf       	rjmp	.-248    	; 0x2bba <__vector_25+0x3a>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2cb8:	10 92 18 02 	sts	0x0218, r1
				break;
    2cbc:	7e cf       	rjmp	.-260    	; 0x2bba <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
    2cbe:	84 e0       	ldi	r24, 0x04	; 4
    2cc0:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2cc4:	10 92 18 02 	sts	0x0218, r1
				break;
    2cc8:	78 cf       	rjmp	.-272    	; 0x2bba <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    2cca:	8b 32       	cpi	r24, 0x2B	; 43
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <__vector_25+0x150>
    2cce:	cc c0       	rjmp	.+408    	; 0x2e68 <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    2cd0:	8d 32       	cpi	r24, 0x2D	; 45
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <__vector_25+0x156>
    2cd4:	51 c0       	rjmp	.+162    	; 0x2d78 <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2cd6:	83 37       	cpi	r24, 0x73	; 115
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <__vector_25+0x15c>
    2cda:	8a cf       	rjmp	.-236    	; 0x2bf0 <__vector_25+0x70>
					pwm_right = 0;
    2cdc:	10 92 e5 03 	sts	0x03E5, r1
    2ce0:	10 92 e4 03 	sts	0x03E4, r1
					OCR3A = 0;
    2ce4:	10 92 99 00 	sts	0x0099, r1
    2ce8:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2cec:	10 92 9b 00 	sts	0x009B, r1
    2cf0:	10 92 9a 00 	sts	0x009A, r1
    2cf4:	62 cf       	rjmp	.-316    	; 0x2bba <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    2cf6:	8b 32       	cpi	r24, 0x2B	; 43
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <__vector_25+0x17c>
    2cfa:	87 c0       	rjmp	.+270    	; 0x2e0a <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2cfc:	8d 32       	cpi	r24, 0x2D	; 45
    2cfe:	09 f1       	breq	.+66     	; 0x2d42 <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2d00:	83 37       	cpi	r24, 0x73	; 115
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <__vector_25+0x186>
    2d04:	75 cf       	rjmp	.-278    	; 0x2bf0 <__vector_25+0x70>
					pwm_left = 0;
    2d06:	10 92 e7 03 	sts	0x03E7, r1
    2d0a:	10 92 e6 03 	sts	0x03E6, r1
					OCR4A = 0;
    2d0e:	10 92 a9 00 	sts	0x00A9, r1
    2d12:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2d16:	10 92 ab 00 	sts	0x00AB, r1
    2d1a:	10 92 aa 00 	sts	0x00AA, r1
    2d1e:	4d cf       	rjmp	.-358    	; 0x2bba <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2d20:	80 91 15 02 	lds	r24, 0x0215
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2d28:	97 fd       	sbrc	r25, 7
    2d2a:	d3 c0       	rjmp	.+422    	; 0x2ed2 <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2d2c:	80 93 15 02 	sts	0x0215, r24
					if(pwm_green == 0) {
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <__vector_25+0x1b6>
    2d34:	d0 c0       	rjmp	.+416    	; 0x2ed6 <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	90 93 8b 00 	sts	0x008B, r25
    2d3c:	80 93 8a 00 	sts	0x008A, r24
    2d40:	3c cf       	rjmp	.-392    	; 0x2bba <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2d42:	80 91 e6 03 	lds	r24, 0x03E6
    2d46:	90 91 e7 03 	lds	r25, 0x03E7
    2d4a:	4e 97       	sbiw	r24, 0x1e	; 30
    2d4c:	90 93 e7 03 	sts	0x03E7, r25
    2d50:	80 93 e6 03 	sts	0x03E6, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2d54:	2c ef       	ldi	r18, 0xFC	; 252
    2d56:	80 30       	cpi	r24, 0x00	; 0
    2d58:	92 07       	cpc	r25, r18
    2d5a:	0c f0       	brlt	.+2      	; 0x2d5e <__vector_25+0x1de>
    2d5c:	cc c0       	rjmp	.+408    	; 0x2ef6 <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	9c ef       	ldi	r25, 0xFC	; 252
    2d62:	90 93 e7 03 	sts	0x03E7, r25
    2d66:	80 93 e6 03 	sts	0x03E6, r24
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2d6e:	90 93 ab 00 	sts	0x00AB, r25
    2d72:	80 93 aa 00 	sts	0x00AA, r24
    2d76:	21 cf       	rjmp	.-446    	; 0x2bba <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2d78:	80 91 e4 03 	lds	r24, 0x03E4
    2d7c:	90 91 e5 03 	lds	r25, 0x03E5
    2d80:	4e 97       	sbiw	r24, 0x1e	; 30
    2d82:	90 93 e5 03 	sts	0x03E5, r25
    2d86:	80 93 e4 03 	sts	0x03E4, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2d8a:	2c ef       	ldi	r18, 0xFC	; 252
    2d8c:	80 30       	cpi	r24, 0x00	; 0
    2d8e:	92 07       	cpc	r25, r18
    2d90:	0c f0       	brlt	.+2      	; 0x2d94 <__vector_25+0x214>
    2d92:	b7 c0       	rjmp	.+366    	; 0x2f02 <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	9c ef       	ldi	r25, 0xFC	; 252
    2d98:	90 93 e5 03 	sts	0x03E5, r25
    2d9c:	80 93 e4 03 	sts	0x03E4, r24
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2da4:	90 93 9b 00 	sts	0x009B, r25
    2da8:	80 93 9a 00 	sts	0x009A, r24
    2dac:	06 cf       	rjmp	.-500    	; 0x2bba <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2dae:	80 91 80 00 	lds	r24, 0x0080
    2db2:	80 62       	ori	r24, 0x20	; 32
    2db4:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2db8:	80 91 15 02 	lds	r24, 0x0215
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	19 f0       	breq	.+6      	; 0x2dcc <__vector_25+0x24c>
    2dc6:	14 f0       	brlt	.+4      	; 0x2dcc <__vector_25+0x24c>
    2dc8:	8f ef       	ldi	r24, 0xFF	; 255
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	80 93 15 02 	sts	0x0215, r24
					OCR1B = pwm_green;
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	90 93 8b 00 	sts	0x008B, r25
    2dd6:	80 93 8a 00 	sts	0x008A, r24
    2dda:	ef ce       	rjmp	.-546    	; 0x2bba <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2ddc:	80 91 80 00 	lds	r24, 0x0080
    2de0:	80 68       	ori	r24, 0x80	; 128
    2de2:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2de6:	80 91 14 02 	lds	r24, 0x0214
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2dee:	8f 3f       	cpi	r24, 0xFF	; 255
    2df0:	91 05       	cpc	r25, r1
    2df2:	19 f0       	breq	.+6      	; 0x2dfa <__vector_25+0x27a>
    2df4:	14 f0       	brlt	.+4      	; 0x2dfa <__vector_25+0x27a>
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	80 93 14 02 	sts	0x0214, r24
					OCR1A = pwm_red;
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	90 93 89 00 	sts	0x0089, r25
    2e04:	80 93 88 00 	sts	0x0088, r24
    2e08:	d8 ce       	rjmp	.-592    	; 0x2bba <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2e0a:	80 91 e6 03 	lds	r24, 0x03E6
    2e0e:	90 91 e7 03 	lds	r25, 0x03E7
    2e12:	4e 96       	adiw	r24, 0x1e	; 30
    2e14:	90 93 e7 03 	sts	0x03E7, r25
    2e18:	80 93 e6 03 	sts	0x03E6, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    2e1c:	24 e0       	ldi	r18, 0x04	; 4
    2e1e:	81 30       	cpi	r24, 0x01	; 1
    2e20:	92 07       	cpc	r25, r18
    2e22:	d4 f1       	brlt	.+116    	; 0x2e98 <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	94 e0       	ldi	r25, 0x04	; 4
    2e28:	90 93 e7 03 	sts	0x03E7, r25
    2e2c:	80 93 e6 03 	sts	0x03E6, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2e30:	90 93 a9 00 	sts	0x00A9, r25
    2e34:	80 93 a8 00 	sts	0x00A8, r24
    2e38:	c0 ce       	rjmp	.-640    	; 0x2bba <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2e3a:	80 91 80 00 	lds	r24, 0x0080
    2e3e:	88 60       	ori	r24, 0x08	; 8
    2e40:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2e44:	80 91 16 02 	lds	r24, 0x0216
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2e4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4e:	91 05       	cpc	r25, r1
    2e50:	19 f0       	breq	.+6      	; 0x2e58 <__vector_25+0x2d8>
    2e52:	14 f0       	brlt	.+4      	; 0x2e58 <__vector_25+0x2d8>
    2e54:	8f ef       	ldi	r24, 0xFF	; 255
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	80 93 16 02 	sts	0x0216, r24
					OCR1C = pwm_blue;
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	90 93 8d 00 	sts	0x008D, r25
    2e62:	80 93 8c 00 	sts	0x008C, r24
    2e66:	a9 ce       	rjmp	.-686    	; 0x2bba <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2e68:	80 91 e4 03 	lds	r24, 0x03E4
    2e6c:	90 91 e5 03 	lds	r25, 0x03E5
    2e70:	4e 96       	adiw	r24, 0x1e	; 30
    2e72:	90 93 e5 03 	sts	0x03E5, r25
    2e76:	80 93 e4 03 	sts	0x03E4, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    2e7a:	24 e0       	ldi	r18, 0x04	; 4
    2e7c:	81 30       	cpi	r24, 0x01	; 1
    2e7e:	92 07       	cpc	r25, r18
    2e80:	ac f0       	brlt	.+42     	; 0x2eac <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	94 e0       	ldi	r25, 0x04	; 4
    2e86:	90 93 e5 03 	sts	0x03E5, r25
    2e8a:	80 93 e4 03 	sts	0x03E4, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2e8e:	90 93 99 00 	sts	0x0099, r25
    2e92:	80 93 98 00 	sts	0x0098, r24
    2e96:	91 ce       	rjmp	.-734    	; 0x2bba <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2e98:	97 ff       	sbrs	r25, 7
    2e9a:	ca cf       	rjmp	.-108    	; 0x2e30 <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2e9c:	90 95       	com	r25
    2e9e:	81 95       	neg	r24
    2ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea2:	90 93 ab 00 	sts	0x00AB, r25
    2ea6:	80 93 aa 00 	sts	0x00AA, r24
    2eaa:	87 ce       	rjmp	.-754    	; 0x2bba <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2eac:	97 ff       	sbrs	r25, 7
    2eae:	ef cf       	rjmp	.-34     	; 0x2e8e <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    2eb0:	90 95       	com	r25
    2eb2:	81 95       	neg	r24
    2eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb6:	90 93 9b 00 	sts	0x009B, r25
    2eba:	80 93 9a 00 	sts	0x009A, r24
    2ebe:	7d ce       	rjmp	.-774    	; 0x2bba <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2ec0:	10 92 14 02 	sts	0x0214, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2ec4:	80 91 80 00 	lds	r24, 0x0080
    2ec8:	8f 77       	andi	r24, 0x7F	; 127
    2eca:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    2ece:	2d 98       	cbi	0x05, 5	; 5
    2ed0:	74 ce       	rjmp	.-792    	; 0x2bba <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2ed2:	10 92 15 02 	sts	0x0215, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2ed6:	80 91 80 00 	lds	r24, 0x0080
    2eda:	8f 7d       	andi	r24, 0xDF	; 223
    2edc:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2ee0:	2e 98       	cbi	0x05, 6	; 5
    2ee2:	6b ce       	rjmp	.-810    	; 0x2bba <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2ee4:	10 92 16 02 	sts	0x0216, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2ee8:	80 91 80 00 	lds	r24, 0x0080
    2eec:	87 7f       	andi	r24, 0xF7	; 247
    2eee:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    2ef2:	2f 98       	cbi	0x05, 7	; 5
    2ef4:	62 ce       	rjmp	.-828    	; 0x2bba <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2ef6:	97 ff       	sbrs	r25, 7
    2ef8:	9b cf       	rjmp	.-202    	; 0x2e30 <__vector_25+0x2b0>
						OCR4A = pwm_left;
    2efa:	90 95       	com	r25
    2efc:	81 95       	neg	r24
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	36 cf       	rjmp	.-404    	; 0x2d6e <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2f02:	97 ff       	sbrs	r25, 7
    2f04:	c4 cf       	rjmp	.-120    	; 0x2e8e <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2f06:	90 95       	com	r25
    2f08:	81 95       	neg	r24
    2f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0c:	4b cf       	rjmp	.-362    	; 0x2da4 <__vector_25+0x224>

00002f0e <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2f0e:	86 b1       	in	r24, 0x06	; 6
    2f10:	66 b1       	in	r22, 0x06	; 6
    2f12:	26 b1       	in	r18, 0x06	; 6
    2f14:	46 b1       	in	r20, 0x06	; 6
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	28 70       	andi	r18, 0x08	; 8
    2f1a:	30 70       	andi	r19, 0x00	; 0
    2f1c:	35 95       	asr	r19
    2f1e:	27 95       	ror	r18
    2f20:	35 95       	asr	r19
    2f22:	27 95       	ror	r18
    2f24:	35 95       	asr	r19
    2f26:	27 95       	ror	r18
    2f28:	22 0f       	add	r18, r18
    2f2a:	33 1f       	adc	r19, r19
    2f2c:	70 e0       	ldi	r23, 0x00	; 0
    2f2e:	64 70       	andi	r22, 0x04	; 4
    2f30:	70 70       	andi	r23, 0x00	; 0
    2f32:	75 95       	asr	r23
    2f34:	67 95       	ror	r22
    2f36:	75 95       	asr	r23
    2f38:	67 95       	ror	r22
    2f3a:	26 0f       	add	r18, r22
    2f3c:	37 1f       	adc	r19, r23
    2f3e:	22 0f       	add	r18, r18
    2f40:	33 1f       	adc	r19, r19
    2f42:	50 e0       	ldi	r21, 0x00	; 0
    2f44:	42 70       	andi	r20, 0x02	; 2
    2f46:	50 70       	andi	r21, 0x00	; 0
    2f48:	55 95       	asr	r21
    2f4a:	47 95       	ror	r20
    2f4c:	24 0f       	add	r18, r20
    2f4e:	35 1f       	adc	r19, r21
    2f50:	22 0f       	add	r18, r18
    2f52:	81 70       	andi	r24, 0x01	; 1
}
    2f54:	82 0f       	add	r24, r18
    2f56:	08 95       	ret

00002f58 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2f58:	f8 94       	cli

	initPortsIO();
    2f5a:	0e 94 cb 14 	call	0x2996	; 0x2996 <initPortsIO>
	initAdc();
    2f5e:	0e 94 95 1a 	call	0x352a	; 0x352a <initAdc>
	initMotors();
    2f62:	0e 94 76 1c 	call	0x38ec	; 0x38ec <initMotors>
	initRGBleds();
    2f66:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <initRGBleds>
	initSPI();
    2f6a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <initSPI>
	mirf_init();
    2f6e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <mirf_init>
	initUsart();
    2f72:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <initUsart>
	initAccelerometer();
    2f76:	0e 94 3f 18 	call	0x307e	; 0x307e <initAccelerometer>
	e_init_remote_control();
    2f7a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <e_init_remote_control>

	sei();			// enable global interrupts
    2f7e:	78 94       	sei

	
}
    2f80:	08 95       	ret

00002f82 <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2f82:	1f 92       	push	r1
    2f84:	0f 92       	push	r0
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	0f 92       	push	r0
    2f8a:	11 24       	eor	r1, r1

}
    2f8c:	0f 90       	pop	r0
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	0f 90       	pop	r0
    2f92:	1f 90       	pop	r1
    2f94:	18 95       	reti

00002f96 <sleep>:

void sleep(unsigned char seconds) {
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2f9a:	9e e1       	ldi	r25, 0x1E	; 30
    2f9c:	89 9f       	mul	r24, r25
    2f9e:	e0 01       	movw	r28, r0
    2fa0:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2fa2:	80 91 68 00 	lds	r24, 0x0068
    2fa6:	8d 7f       	andi	r24, 0xFD	; 253
    2fa8:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2fac:	80 91 6c 00 	lds	r24, 0x006C
    2fb0:	8f 77       	andi	r24, 0x7F	; 127
    2fb2:	80 93 6c 00 	sts	0x006C, r24

	// disable adc
	ADCSRA = 0x00;	// disable interrupt and turn off adc
    2fb6:	10 92 7a 00 	sts	0x007A, r1

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2fba:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2fbe:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2fc2:	10 92 71 00 	sts	0x0071, r1
	TCCR4A = 0x00;
    2fc6:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2fca:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2fce:	10 92 72 00 	sts	0x0072, r1

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2fd2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2fd6:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2fda:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <closeUsart>
	closeSPI();
    2fde:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <closeSPI>
	i2c_close();
    2fe2:	0e 94 ef 14 	call	0x29de	; 0x29de <i2c_close>

	// set port pins
	initPortsIO();
    2fe6:	0e 94 cb 14 	call	0x2996	; 0x2996 <initPortsIO>
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7);
	PORTC &= ~(1 << 7); // sleep pin
    2fea:	47 98       	cbi	0x08, 7	; 8
	//PORTB &= ~(1 << 4);	// radio CE pin
	PORTD = 0x00;	// I2C and uart pins to 0
    2fec:	1b b8       	out	0x0b, r1	; 11

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2ff4:	80 91 b0 00 	lds	r24, 0x00B0
    2ff8:	8d 7f       	andi	r24, 0xFD	; 253
    2ffa:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2ffe:	80 91 b1 00 	lds	r24, 0x00B1
    3002:	87 60       	ori	r24, 0x07	; 7
    3004:	80 93 b1 00 	sts	0x00B1, r24

	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
    3008:	83 b7       	in	r24, 0x33	; 51
    300a:	85 60       	ori	r24, 0x05	; 5
    300c:	83 bf       	out	0x33, r24	; 51
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
    300e:	20 97       	sbiw	r28, 0x00	; 0
    3010:	19 f0       	breq	.+6      	; 0x3018 <sleep+0x82>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3012:	88 95       	sleep
		pause--;
    3014:	21 97       	sbiw	r28, 0x01	; 1
	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
    3016:	e9 f7       	brne	.-6      	; 0x3012 <sleep+0x7c>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3018:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    301a:	80 91 b1 00 	lds	r24, 0x00B1
    301e:	88 7f       	andi	r24, 0xF8	; 248
    3020:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3024:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3028:	80 91 b0 00 	lds	r24, 0x00B0
    302c:	82 60       	ori	r24, 0x02	; 2
    302e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3032:	8f ef       	ldi	r24, 0xFF	; 255
    3034:	80 93 14 02 	sts	0x0214, r24
	pwm_green = 255;
    3038:	80 93 15 02 	sts	0x0215, r24
	pwm_blue = 255;
    303c:	80 93 16 02 	sts	0x0216, r24
	pwm_right = 0;
    3040:	10 92 e5 03 	sts	0x03E5, r1
    3044:	10 92 e4 03 	sts	0x03E4, r1
	pwm_left = 0;
    3048:	10 92 e7 03 	sts	0x03E7, r1
    304c:	10 92 e6 03 	sts	0x03E6, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3050:	f8 94       	cli

	initPortsIO();
    3052:	0e 94 cb 14 	call	0x2996	; 0x2996 <initPortsIO>
	initAdc();
    3056:	0e 94 95 1a 	call	0x352a	; 0x352a <initAdc>
	initMotors();
    305a:	0e 94 76 1c 	call	0x38ec	; 0x38ec <initMotors>
	initRGBleds();
    305e:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <initRGBleds>
	initSPI();
    3062:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <initSPI>
	mirf_init();
    3066:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <mirf_init>
	initUsart();
    306a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <initUsart>
	initAccelerometer();
    306e:	0e 94 3f 18 	call	0x307e	; 0x307e <initAccelerometer>
	e_init_remote_control();
    3072:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <e_init_remote_control>

	sei();			// enable global interrupts
    3076:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	08 95       	ret

0000307e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    307e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3082:	80 91 1b 02 	lds	r24, 0x021B
    3086:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    308a:	88 23       	and	r24, r24
    308c:	49 f4       	brne	.+18     	; 0x30a0 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    308e:	86 e1       	ldi	r24, 0x16	; 22
    3090:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3094:	85 e4       	ldi	r24, 0x45	; 69
    3096:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    309a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    309e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    30a0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    30a4:	86 ea       	ldi	r24, 0xA6	; 166
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	90 93 1c 02 	sts	0x021C, r25
    30ac:	80 93 1b 02 	sts	0x021B, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    30b0:	86 ea       	ldi	r24, 0xA6	; 166
    30b2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    30b6:	88 23       	and	r24, r24
    30b8:	41 f5       	brne	.+80     	; 0x310a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    30ba:	8d e2       	ldi	r24, 0x2D	; 45
    30bc:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x08);	// measurement mode
    30c0:	88 e0       	ldi	r24, 0x08	; 8
    30c2:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    30c6:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    30ca:	80 91 1b 02 	lds	r24, 0x021B
    30ce:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    30d2:	88 23       	and	r24, r24
    30d4:	d1 f4       	brne	.+52     	; 0x310a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    30d6:	81 e3       	ldi	r24, 0x31	; 49
    30d8:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    30e2:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    30e6:	80 91 1b 02 	lds	r24, 0x021B
    30ea:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    30ee:	88 23       	and	r24, r24
    30f0:	61 f4       	brne	.+24     	; 0x310a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    30f2:	8c e2       	ldi	r24, 0x2C	; 44
    30f4:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    30f8:	89 e0       	ldi	r24, 0x09	; 9
    30fa:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    30fe:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	80 93 0d 04 	sts	0x040D, r24
    3108:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    310a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    310e:	82 e0       	ldi	r24, 0x02	; 2
    3110:	80 93 0d 04 	sts	0x040D, r24
    3114:	08 95       	ret

00003116 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3116:	80 91 1b 02 	lds	r24, 0x021B
    311a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    311e:	88 23       	and	r24, r24
    3120:	51 f4       	brne	.+20     	; 0x3136 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3122:	86 e1       	ldi	r24, 0x16	; 22
    3124:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3128:	85 e4       	ldi	r24, 0x45	; 69
    312a:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    312e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    }

	return 0;				// configuration ok
    3132:	80 e0       	ldi	r24, 0x00	; 0

}
    3134:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3136:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
		return 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	08 95       	ret

0000313e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    313e:	80 91 1b 02 	lds	r24, 0x021B
    3142:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3146:	88 23       	and	r24, r24
    3148:	31 f5       	brne	.+76     	; 0x3196 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    314a:	8d e2       	ldi	r24, 0x2D	; 45
    314c:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x08);	// measurement mode
    3150:	88 e0       	ldi	r24, 0x08	; 8
    3152:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3156:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    315a:	80 91 1b 02 	lds	r24, 0x021B
    315e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3162:	88 23       	and	r24, r24
    3164:	c1 f4       	brne	.+48     	; 0x3196 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3166:	81 e3       	ldi	r24, 0x31	; 49
    3168:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3172:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3176:	80 91 1b 02 	lds	r24, 0x021B
    317a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    317e:	88 23       	and	r24, r24
    3180:	51 f4       	brne	.+20     	; 0x3196 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3182:	8c e2       	ldi	r24, 0x2C	; 44
    3184:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3188:	89 e0       	ldi	r24, 0x09	; 9
    318a:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    318e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
    }

	return 0;
    3192:	80 e0       	ldi	r24, 0x00	; 0

}
    3194:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3196:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>
		return 1;
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	08 95       	ret

0000319e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	0f 92       	push	r0
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    31ae:	80 91 0d 04 	lds	r24, 0x040D
    31b2:	88 23       	and	r24, r24
    31b4:	91 f0       	breq	.+36     	; 0x31da <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	09 f4       	brne	.+2      	; 0x31bc <readAccelXY+0x1e>
    31ba:	88 c0       	rjmp	.+272    	; 0x32cc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    31bc:	10 92 0f 04 	sts	0x040F, r1
    31c0:	10 92 0e 04 	sts	0x040E, r1
		accY = 0;
    31c4:	10 92 11 04 	sts	0x0411, r1
    31c8:	10 92 10 04 	sts	0x0410, r1

	}

}
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	ff 90       	pop	r15
    31d8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    31da:	80 91 1b 02 	lds	r24, 0x021B
    31de:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    31e2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    31e4:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    31e8:	80 91 1b 02 	lds	r24, 0x021B
    31ec:	8f 5f       	subi	r24, 0xFF	; 255
    31ee:	0e 94 49 15 	call	0x2a92	; 0x2a92 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    31f2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    31f6:	08 2f       	mov	r16, r24
    31f8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    31fc:	f8 2e       	mov	r15, r24
    31fe:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    3202:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3204:	0e 94 93 15 	call	0x2b26	; 0x2b26 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    320e:	90 91 2d 04 	lds	r25, 0x042D
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	99 23       	and	r25, r25
    3216:	39 f1       	breq	.+78     	; 0x3266 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3218:	4f 2d       	mov	r20, r15
    321a:	55 27       	eor	r21, r21
    321c:	47 fd       	sbrc	r20, 7
    321e:	50 95       	com	r21
    3220:	54 2f       	mov	r21, r20
    3222:	44 27       	eor	r20, r20
    3224:	60 2f       	mov	r22, r16
    3226:	77 27       	eor	r23, r23
    3228:	67 fd       	sbrc	r22, 7
    322a:	70 95       	com	r23
    322c:	46 2b       	or	r20, r22
    322e:	57 2b       	or	r21, r23
    3230:	50 93 0f 04 	sts	0x040F, r21
    3234:	40 93 0e 04 	sts	0x040E, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3238:	28 2f       	mov	r18, r24
    323a:	33 27       	eor	r19, r19
    323c:	27 fd       	sbrc	r18, 7
    323e:	30 95       	com	r19
    3240:	32 2f       	mov	r19, r18
    3242:	22 27       	eor	r18, r18
    3244:	81 2f       	mov	r24, r17
    3246:	99 27       	eor	r25, r25
    3248:	87 fd       	sbrc	r24, 7
    324a:	90 95       	com	r25
    324c:	28 2b       	or	r18, r24
    324e:	39 2b       	or	r19, r25
    3250:	30 93 11 04 	sts	0x0411, r19
    3254:	20 93 10 04 	sts	0x0410, r18
		accX = 0;
		accY = 0;

	}

}
    3258:	0f 90       	pop	r0
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	ff 90       	pop	r15
    3264:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3266:	4f 2d       	mov	r20, r15
    3268:	55 27       	eor	r21, r21
    326a:	47 fd       	sbrc	r20, 7
    326c:	50 95       	com	r21
    326e:	54 2f       	mov	r21, r20
    3270:	44 27       	eor	r20, r20
    3272:	60 2f       	mov	r22, r16
    3274:	77 27       	eor	r23, r23
    3276:	67 fd       	sbrc	r22, 7
    3278:	70 95       	com	r23
    327a:	46 2b       	or	r20, r22
    327c:	57 2b       	or	r21, r23
    327e:	60 91 1a 04 	lds	r22, 0x041A
    3282:	70 91 1b 04 	lds	r23, 0x041B
    3286:	46 1b       	sub	r20, r22
    3288:	57 0b       	sbc	r21, r23
    328a:	50 93 0f 04 	sts	0x040F, r21
    328e:	40 93 0e 04 	sts	0x040E, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3292:	28 2f       	mov	r18, r24
    3294:	33 27       	eor	r19, r19
    3296:	27 fd       	sbrc	r18, 7
    3298:	30 95       	com	r19
    329a:	32 2f       	mov	r19, r18
    329c:	22 27       	eor	r18, r18
    329e:	81 2f       	mov	r24, r17
    32a0:	99 27       	eor	r25, r25
    32a2:	87 fd       	sbrc	r24, 7
    32a4:	90 95       	com	r25
    32a6:	28 2b       	or	r18, r24
    32a8:	39 2b       	or	r19, r25
    32aa:	80 91 1c 04 	lds	r24, 0x041C
    32ae:	90 91 1d 04 	lds	r25, 0x041D
    32b2:	28 1b       	sub	r18, r24
    32b4:	39 0b       	sbc	r19, r25
    32b6:	30 93 11 04 	sts	0x0411, r19
    32ba:	20 93 10 04 	sts	0x0410, r18
		accX = 0;
		accY = 0;

	}

}
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    32cc:	80 91 1b 02 	lds	r24, 0x021B
    32d0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    32d4:	82 e3       	ldi	r24, 0x32	; 50
    32d6:	86 cf       	rjmp	.-244    	; 0x31e4 <readAccelXY+0x46>

000032d8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	00 d0       	rcall	.+0      	; 0x32de <readAccelXYZ+0x6>
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <readAccelXYZ+0x8>
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    32e4:	80 91 0d 04 	lds	r24, 0x040D
    32e8:	88 23       	and	r24, r24
    32ea:	c1 f0       	breq	.+48     	; 0x331c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    32ec:	81 30       	cpi	r24, 0x01	; 1
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <readAccelXYZ+0x1a>
    32f0:	ad c0       	rjmp	.+346    	; 0x344c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    32f2:	10 92 0f 04 	sts	0x040F, r1
    32f6:	10 92 0e 04 	sts	0x040E, r1
		accY = 0;
    32fa:	10 92 11 04 	sts	0x0411, r1
    32fe:	10 92 10 04 	sts	0x0410, r1
		accZ = 0;
    3302:	10 92 13 04 	sts	0x0413, r1
    3306:	10 92 12 04 	sts	0x0412, r1

	}

}
    330a:	26 96       	adiw	r28, 0x06	; 6
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    331c:	80 91 1b 02 	lds	r24, 0x021B
    3320:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3324:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3326:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    332a:	80 91 1b 02 	lds	r24, 0x021B
    332e:	8f 5f       	subi	r24, 0xFF	; 255
    3330:	0e 94 49 15 	call	0x2a92	; 0x2a92 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3334:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    333e:	8a 83       	std	Y+2, r24	; 0x02
    3340:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    3344:	8b 83       	std	Y+3, r24	; 0x03
    3346:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    334a:	8c 83       	std	Y+4, r24	; 0x04
    334c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <i2c_readAck>
    3350:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3352:	0e 94 93 15 	call	0x2b26	; 0x2b26 <i2c_readNak>
    3356:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3358:	0e 94 6f 15 	call	0x2ade	; 0x2ade <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    335c:	80 91 2d 04 	lds	r24, 0x042D
    3360:	88 23       	and	r24, r24
    3362:	89 f1       	breq	.+98     	; 0x33c6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	99 27       	eor	r25, r25
    3368:	87 fd       	sbrc	r24, 7
    336a:	90 95       	com	r25
    336c:	98 2f       	mov	r25, r24
    336e:	88 27       	eor	r24, r24
    3370:	29 81       	ldd	r18, Y+1	; 0x01
    3372:	33 27       	eor	r19, r19
    3374:	27 fd       	sbrc	r18, 7
    3376:	30 95       	com	r19
    3378:	82 2b       	or	r24, r18
    337a:	93 2b       	or	r25, r19
    337c:	90 93 0f 04 	sts	0x040F, r25
    3380:	80 93 0e 04 	sts	0x040E, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3384:	8c 81       	ldd	r24, Y+4	; 0x04
    3386:	99 27       	eor	r25, r25
    3388:	87 fd       	sbrc	r24, 7
    338a:	90 95       	com	r25
    338c:	98 2f       	mov	r25, r24
    338e:	88 27       	eor	r24, r24
    3390:	2b 81       	ldd	r18, Y+3	; 0x03
    3392:	33 27       	eor	r19, r19
    3394:	27 fd       	sbrc	r18, 7
    3396:	30 95       	com	r19
    3398:	82 2b       	or	r24, r18
    339a:	93 2b       	or	r25, r19
    339c:	90 93 11 04 	sts	0x0411, r25
    33a0:	80 93 10 04 	sts	0x0410, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    33a4:	8e 81       	ldd	r24, Y+6	; 0x06
    33a6:	99 27       	eor	r25, r25
    33a8:	87 fd       	sbrc	r24, 7
    33aa:	90 95       	com	r25
    33ac:	98 2f       	mov	r25, r24
    33ae:	88 27       	eor	r24, r24
    33b0:	2d 81       	ldd	r18, Y+5	; 0x05
    33b2:	33 27       	eor	r19, r19
    33b4:	27 fd       	sbrc	r18, 7
    33b6:	30 95       	com	r19
    33b8:	82 2b       	or	r24, r18
    33ba:	93 2b       	or	r25, r19
    33bc:	90 93 13 04 	sts	0x0413, r25
    33c0:	80 93 12 04 	sts	0x0412, r24
    33c4:	a2 cf       	rjmp	.-188    	; 0x330a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	99 27       	eor	r25, r25
    33ca:	87 fd       	sbrc	r24, 7
    33cc:	90 95       	com	r25
    33ce:	98 2f       	mov	r25, r24
    33d0:	88 27       	eor	r24, r24
    33d2:	29 81       	ldd	r18, Y+1	; 0x01
    33d4:	33 27       	eor	r19, r19
    33d6:	27 fd       	sbrc	r18, 7
    33d8:	30 95       	com	r19
    33da:	82 2b       	or	r24, r18
    33dc:	93 2b       	or	r25, r19
    33de:	20 91 1a 04 	lds	r18, 0x041A
    33e2:	30 91 1b 04 	lds	r19, 0x041B
    33e6:	82 1b       	sub	r24, r18
    33e8:	93 0b       	sbc	r25, r19
    33ea:	90 93 0f 04 	sts	0x040F, r25
    33ee:	80 93 0e 04 	sts	0x040E, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    33f2:	8c 81       	ldd	r24, Y+4	; 0x04
    33f4:	99 27       	eor	r25, r25
    33f6:	87 fd       	sbrc	r24, 7
    33f8:	90 95       	com	r25
    33fa:	98 2f       	mov	r25, r24
    33fc:	88 27       	eor	r24, r24
    33fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3400:	33 27       	eor	r19, r19
    3402:	27 fd       	sbrc	r18, 7
    3404:	30 95       	com	r19
    3406:	82 2b       	or	r24, r18
    3408:	93 2b       	or	r25, r19
    340a:	20 91 1c 04 	lds	r18, 0x041C
    340e:	30 91 1d 04 	lds	r19, 0x041D
    3412:	82 1b       	sub	r24, r18
    3414:	93 0b       	sbc	r25, r19
    3416:	90 93 11 04 	sts	0x0411, r25
    341a:	80 93 10 04 	sts	0x0410, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    341e:	8e 81       	ldd	r24, Y+6	; 0x06
    3420:	99 27       	eor	r25, r25
    3422:	87 fd       	sbrc	r24, 7
    3424:	90 95       	com	r25
    3426:	98 2f       	mov	r25, r24
    3428:	88 27       	eor	r24, r24
    342a:	2d 81       	ldd	r18, Y+5	; 0x05
    342c:	33 27       	eor	r19, r19
    342e:	27 fd       	sbrc	r18, 7
    3430:	30 95       	com	r19
    3432:	82 2b       	or	r24, r18
    3434:	93 2b       	or	r25, r19
    3436:	20 91 1e 04 	lds	r18, 0x041E
    343a:	30 91 1f 04 	lds	r19, 0x041F
    343e:	82 1b       	sub	r24, r18
    3440:	93 0b       	sbc	r25, r19
    3442:	90 93 13 04 	sts	0x0413, r25
    3446:	80 93 12 04 	sts	0x0412, r24
    344a:	5f cf       	rjmp	.-322    	; 0x330a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    344c:	80 91 1b 02 	lds	r24, 0x021B
    3450:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3454:	82 e3       	ldi	r24, 0x32	; 50
    3456:	67 cf       	rjmp	.-306    	; 0x3326 <readAccelXYZ+0x4e>

00003458 <computeAngle>:

	}

}

void computeAngle() {
    3458:	ef 92       	push	r14
    345a:	ff 92       	push	r15
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3460:	80 91 12 04 	lds	r24, 0x0412
    3464:	90 91 13 04 	lds	r25, 0x0413
    3468:	97 fd       	sbrc	r25, 7
    346a:	5b c0       	rjmp	.+182    	; 0x3522 <computeAngle+0xca>

	// check the robot position (orizzontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    346c:	80 31       	cpi	r24, 0x10	; 16
    346e:	91 05       	cpc	r25, r1
    3470:	08 f0       	brcs	.+2      	; 0x3474 <computeAngle+0x1c>
    3472:	42 c0       	rjmp	.+132    	; 0x34f8 <computeAngle+0xa0>
		currPosition = ORIZZONTAL_POS;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	80 93 1d 02 	sts	0x021D, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    347a:	90 91 1c 02 	lds	r25, 0x021C
    347e:	98 17       	cp	r25, r24
    3480:	09 f4       	brne	.+2      	; 0x3484 <computeAngle+0x2c>
    3482:	42 c0       	rjmp	.+132    	; 0x3508 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    3484:	10 92 28 04 	sts	0x0428, r1
	}
	prevPosition = currPosition;
    3488:	80 93 1c 02 	sts	0x021C, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    348c:	60 91 0e 04 	lds	r22, 0x040E
    3490:	70 91 0f 04 	lds	r23, 0x040F
    3494:	88 27       	eor	r24, r24
    3496:	77 fd       	sbrc	r23, 7
    3498:	80 95       	com	r24
    349a:	98 2f       	mov	r25, r24
    349c:	0e 94 f7 20 	call	0x41ee	; 0x41ee <__floatsisf>
    34a0:	7b 01       	movw	r14, r22
    34a2:	8c 01       	movw	r16, r24
    34a4:	60 91 10 04 	lds	r22, 0x0410
    34a8:	70 91 11 04 	lds	r23, 0x0411
    34ac:	88 27       	eor	r24, r24
    34ae:	77 fd       	sbrc	r23, 7
    34b0:	80 95       	com	r24
    34b2:	98 2f       	mov	r25, r24
    34b4:	0e 94 f7 20 	call	0x41ee	; 0x41ee <__floatsisf>
    34b8:	9b 01       	movw	r18, r22
    34ba:	ac 01       	movw	r20, r24
    34bc:	c8 01       	movw	r24, r16
    34be:	b7 01       	movw	r22, r14
    34c0:	0e 94 b2 23 	call	0x4764	; 0x4764 <atan2>
    34c4:	21 ee       	ldi	r18, 0xE1	; 225
    34c6:	3e e2       	ldi	r19, 0x2E	; 46
    34c8:	45 e6       	ldi	r20, 0x65	; 101
    34ca:	52 e4       	ldi	r21, 0x42	; 66
    34cc:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <__mulsf3>
    34d0:	0e 94 55 21 	call	0x42aa	; 0x42aa <__fixsfsi>
    34d4:	9b 01       	movw	r18, r22
    34d6:	70 93 21 04 	sts	0x0421, r23
    34da:	60 93 20 04 	sts	0x0420, r22

	if(currentAngle < 0) {
    34de:	77 ff       	sbrs	r23, 7
    34e0:	06 c0       	rjmp	.+12     	; 0x34ee <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    34e2:	28 59       	subi	r18, 0x98	; 152
    34e4:	3e 4f       	sbci	r19, 0xFE	; 254
    34e6:	30 93 21 04 	sts	0x0421, r19
    34ea:	20 93 20 04 	sts	0x0420, r18
	}

}
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = ORIZZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    34f8:	10 92 1d 02 	sts	0x021D, r1
    34fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    34fe:	90 91 1c 02 	lds	r25, 0x021C
    3502:	98 17       	cp	r25, r24
    3504:	09 f0       	breq	.+2      	; 0x3508 <computeAngle+0xb0>
    3506:	be cf       	rjmp	.-132    	; 0x3484 <computeAngle+0x2c>
		timesInSamePos++;
    3508:	90 91 28 04 	lds	r25, 0x0428
    350c:	9f 5f       	subi	r25, 0xFF	; 255
    350e:	90 93 28 04 	sts	0x0428, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    3512:	95 30       	cpi	r25, 0x05	; 5
    3514:	08 f4       	brcc	.+2      	; 0x3518 <computeAngle+0xc0>
    3516:	b8 cf       	rjmp	.-144    	; 0x3488 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    3518:	10 92 28 04 	sts	0x0428, r1
			robotPosition = currPosition;
    351c:	80 93 1e 02 	sts	0x021E, r24
    3520:	b3 cf       	rjmp	.-154    	; 0x3488 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3522:	90 95       	com	r25
    3524:	81 95       	neg	r24
    3526:	9f 4f       	sbci	r25, 0xFF	; 255
    3528:	a1 cf       	rjmp	.-190    	; 0x346c <computeAngle+0x14>

0000352a <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
    352a:	ea e7       	ldi	r30, 0x7A	; 122
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	86 60       	ori	r24, 0x06	; 6
    3532:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3534:	ac e7       	ldi	r26, 0x7C	; 124
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	8c 91       	ld	r24, X
    353a:	80 64       	ori	r24, 0x40	; 64
    353c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
    353e:	80 81       	ld	r24, Z
    3540:	80 62       	ori	r24, 0x20	; 32
    3542:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3544:	ab e7       	ldi	r26, 0x7B	; 123
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	8c 91       	ld	r24, X
    354a:	88 7f       	andi	r24, 0xF8	; 248
    354c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    354e:	80 81       	ld	r24, Z
    3550:	88 60       	ori	r24, 0x08	; 8
    3552:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3554:	80 81       	ld	r24, Z
    3556:	80 68       	ori	r24, 0x80	; 128
    3558:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    355a:	80 81       	ld	r24, Z
    355c:	80 64       	ori	r24, 0x40	; 64
    355e:	80 83       	st	Z, r24

}
    3560:	08 95       	ret

00003562 <__vector_29>:

ISR(ADC_vect) {
    3562:	1f 92       	push	r1
    3564:	0f 92       	push	r0
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	0f 92       	push	r0
    356a:	0b b6       	in	r0, 0x3b	; 59
    356c:	0f 92       	push	r0
    356e:	11 24       	eor	r1, r1
    3570:	2f 93       	push	r18
    3572:	3f 93       	push	r19
    3574:	4f 93       	push	r20
    3576:	8f 93       	push	r24
    3578:	9f 93       	push	r25
    357a:	ef 93       	push	r30
    357c:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector

//	PORTB &= ~(1 << 7);

	delayCounter++;		// this variable is used to have basic delays based on the adc interrupt timing (one interrupt every 104 us)
    357e:	80 91 2a 04 	lds	r24, 0x042A
    3582:	90 91 2b 04 	lds	r25, 0x042B
    3586:	01 96       	adiw	r24, 0x01	; 1
    3588:	90 93 2b 04 	sts	0x042B, r25
    358c:	80 93 2a 04 	sts	0x042A, r24

	int value = ADCL;			// must be read first!!
    3590:	20 91 78 00 	lds	r18, 0x0078
    3594:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3596:	40 91 79 00 	lds	r20, 0x0079
    359a:	94 2f       	mov	r25, r20
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	28 2b       	or	r18, r24
    35a0:	39 2b       	or	r19, r25

	// save the last data
	switch(adcSaveDataTo) {
    35a2:	80 91 95 03 	lds	r24, 0x0395
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	09 f4       	brne	.+2      	; 0x35ac <__vector_29+0x4a>
    35aa:	22 c1       	rjmp	.+580    	; 0x37f0 <__vector_29+0x28e>
    35ac:	83 30       	cpi	r24, 0x03	; 3
    35ae:	08 f4       	brcc	.+2      	; 0x35b2 <__vector_29+0x50>
    35b0:	44 c0       	rjmp	.+136    	; 0x363a <__vector_29+0xd8>
    35b2:	83 30       	cpi	r24, 0x03	; 3
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <__vector_29+0x56>
    35b6:	0f c1       	rjmp	.+542    	; 0x37d6 <__vector_29+0x274>
    35b8:	84 30       	cpi	r24, 0x04	; 4
    35ba:	09 f4       	brne	.+2      	; 0x35be <__vector_29+0x5c>
    35bc:	d1 c0       	rjmp	.+418    	; 0x3760 <__vector_29+0x1fe>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    35be:	80 91 96 03 	lds	r24, 0x0396
    35c2:	82 30       	cpi	r24, 0x02	; 2
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <__vector_29+0x66>
    35c6:	b8 c0       	rjmp	.+368    	; 0x3738 <__vector_29+0x1d6>
    35c8:	83 30       	cpi	r24, 0x03	; 3
    35ca:	08 f0       	brcs	.+2      	; 0x35ce <__vector_29+0x6c>
    35cc:	52 c0       	rjmp	.+164    	; 0x3672 <__vector_29+0x110>
    35ce:	88 23       	and	r24, r24
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <__vector_29+0x72>
    35d2:	8d c0       	rjmp	.+282    	; 0x36ee <__vector_29+0x18c>

		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
    35d4:	80 91 30 03 	lds	r24, 0x0330
    35d8:	86 95       	lsr	r24
    35da:	80 93 2f 03 	sts	0x032F, r24
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
    35de:	80 91 97 03 	lds	r24, 0x0397
    35e2:	88 23       	and	r24, r24
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <__vector_29+0x86>
    35e6:	46 c1       	rjmp	.+652    	; 0x3874 <__vector_29+0x312>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	80 93 96 03 	sts	0x0396, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
    35f4:	90 91 2f 03 	lds	r25, 0x032F
    35f8:	98 30       	cpi	r25, 0x08	; 8
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <__vector_29+0x9c>
    35fc:	6d c0       	rjmp	.+218    	; 0x36d8 <__vector_29+0x176>
		ADCSRB &= ~(1 << MUX5);
    35fe:	90 91 7b 00 	lds	r25, 0x007B
    3602:	97 7f       	andi	r25, 0xF7	; 247
    3604:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3608:	90 91 2f 03 	lds	r25, 0x032F
    360c:	90 5c       	subi	r25, 0xC0	; 192
    360e:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3612:	82 30       	cpi	r24, 0x02	; 2
    3614:	21 f4       	brne	.+8      	; 0x361e <__vector_29+0xbc>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0)"
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
    3616:	8f ef       	ldi	r24, 0xFF	; 255
    3618:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    361c:	12 b8       	out	0x02, r1	; 2

	}

//	PORTB |= (1 << 7);

}
    361e:	ff 91       	pop	r31
    3620:	ef 91       	pop	r30
    3622:	9f 91       	pop	r25
    3624:	8f 91       	pop	r24
    3626:	4f 91       	pop	r20
    3628:	3f 91       	pop	r19
    362a:	2f 91       	pop	r18
    362c:	0f 90       	pop	r0
    362e:	0b be       	out	0x3b, r0	; 59
    3630:	0f 90       	pop	r0
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	0f 90       	pop	r0
    3636:	1f 90       	pop	r1
    3638:	18 95       	reti

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
    363a:	88 23       	and	r24, r24
    363c:	09 f0       	breq	.+2      	; 0x3640 <__vector_29+0xde>
    363e:	68 c0       	rjmp	.+208    	; 0x3710 <__vector_29+0x1ae>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
    3640:	80 91 30 03 	lds	r24, 0x0330
    3644:	8e 30       	cpi	r24, 0x0E	; 14
    3646:	09 f4       	brne	.+2      	; 0x364a <__vector_29+0xe8>
    3648:	27 c1       	rjmp	.+590    	; 0x3898 <__vector_29+0x336>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
    364a:	e8 2f       	mov	r30, r24
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	ee 0f       	add	r30, r30
    3650:	ff 1f       	adc	r31, r31
    3652:	eb 5c       	subi	r30, 0xCB	; 203
    3654:	fc 4f       	sbci	r31, 0xFC	; 252
    3656:	31 83       	std	Z+1, r19	; 0x01
    3658:	20 83       	st	Z, r18
			}
			currentProx++;
    365a:	8f 5f       	subi	r24, 0xFF	; 255
    365c:	80 93 30 03 	sts	0x0330, r24
			if(currentProx > 23) {
    3660:	88 31       	cpi	r24, 0x18	; 24
    3662:	08 f4       	brcc	.+2      	; 0x3666 <__vector_29+0x104>
    3664:	ac cf       	rjmp	.-168    	; 0x35be <__vector_29+0x5c>
				currentProx = 0;
    3666:	10 92 30 03 	sts	0x0330, r1
				updateProx = 1;
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	80 93 9e 03 	sts	0x039E, r24
    3670:	a6 cf       	rjmp	.-180    	; 0x35be <__vector_29+0x5c>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    3672:	83 30       	cpi	r24, 0x03	; 3
    3674:	09 f4       	brne	.+2      	; 0x3678 <__vector_29+0x116>
    3676:	9b c0       	rjmp	.+310    	; 0x37ae <__vector_29+0x24c>
    3678:	84 30       	cpi	r24, 0x04	; 4
    367a:	09 f0       	breq	.+2      	; 0x367e <__vector_29+0x11c>
    367c:	bb cf       	rjmp	.-138    	; 0x35f4 <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    367e:	90 91 32 03 	lds	r25, 0x0332
    3682:	90 93 2f 03 	sts	0x032F, r25
			rightChannelPhase = rightMotorPhase;
    3686:	90 91 33 03 	lds	r25, 0x0333
    368a:	90 93 97 03 	sts	0x0397, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    368e:	90 91 98 03 	lds	r25, 0x0398
    3692:	99 23       	and	r25, r25
    3694:	09 f0       	breq	.+2      	; 0x3698 <__vector_29+0x136>
    3696:	e8 c0       	rjmp	.+464    	; 0x3868 <__vector_29+0x306>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3698:	83 e0       	ldi	r24, 0x03	; 3
    369a:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    369e:	10 92 96 03 	sts	0x0396, r1

			if(currentProx==14 && measBattery==1) {
    36a2:	20 91 30 03 	lds	r18, 0x0330
    36a6:	2e 30       	cpi	r18, 0x0E	; 14
    36a8:	09 f4       	brne	.+2      	; 0x36ac <__vector_29+0x14a>
    36aa:	f0 c0       	rjmp	.+480    	; 0x388c <__vector_29+0x32a>
				measBattery=2;
				PORTC |= (1 << 6);	// sense enable on
			}

			if(currentProx & 0x01) {	// if active phase
    36ac:	82 2f       	mov	r24, r18
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	20 ff       	sbrs	r18, 0
    36b2:	d1 c0       	rjmp	.+418    	; 0x3856 <__vector_29+0x2f4>
				if(currentProx < 16) {
    36b4:	20 31       	cpi	r18, 0x10	; 16
    36b6:	08 f0       	brcs	.+2      	; 0x36ba <__vector_29+0x158>
    36b8:	be c0       	rjmp	.+380    	; 0x3836 <__vector_29+0x2d4>
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
    36ba:	2e 30       	cpi	r18, 0x0E	; 14
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <__vector_29+0x15e>
    36be:	0a c1       	rjmp	.+532    	; 0x38d4 <__vector_29+0x372>
						measBattery=2;
						PORTC |= (1 << 6);	// sense enable on
					} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
    36c0:	26 95       	lsr	r18
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <__vector_29+0x16a>
    36c8:	88 0f       	add	r24, r24
    36ca:	99 1f       	adc	r25, r25
    36cc:	2a 95       	dec	r18
    36ce:	e2 f7       	brpl	.-8      	; 0x36c8 <__vector_29+0x166>
    36d0:	82 b9       	out	0x02, r24	; 2
    36d2:	80 91 96 03 	lds	r24, 0x0396
    36d6:	8e cf       	rjmp	.-228    	; 0x35f4 <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
    36d8:	90 91 7b 00 	lds	r25, 0x007B
    36dc:	98 60       	ori	r25, 0x08	; 8
    36de:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    36e2:	90 91 2f 03 	lds	r25, 0x032F
    36e6:	98 5c       	subi	r25, 0xC8	; 200
    36e8:	90 93 7c 00 	sts	0x007C, r25
    36ec:	92 cf       	rjmp	.-220    	; 0x3612 <__vector_29+0xb0>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	09 f0       	breq	.+2      	; 0x36f4 <__vector_29+0x192>
    36f2:	80 cf       	rjmp	.-256    	; 0x35f4 <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    36f4:	80 91 31 03 	lds	r24, 0x0331
    36f8:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    36fc:	80 91 34 03 	lds	r24, 0x0334
    3700:	80 93 98 03 	sts	0x0398, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3704:	10 92 95 03 	sts	0x0395, r1
			adcSamplingState = 2;
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	80 93 96 03 	sts	0x0396, r24
			break;
    370e:	72 cf       	rjmp	.-284    	; 0x35f4 <__vector_29+0x92>

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	09 f0       	breq	.+2      	; 0x3716 <__vector_29+0x1b4>
    3714:	54 cf       	rjmp	.-344    	; 0x35be <__vector_29+0x5c>
				updateProx = 1;
			}
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3716:	80 91 d2 03 	lds	r24, 0x03D2
    371a:	90 91 d3 03 	lds	r25, 0x03D3
    371e:	82 0f       	add	r24, r18
    3720:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
    3722:	96 95       	lsr	r25
    3724:	87 95       	ror	r24
    3726:	90 93 d3 03 	sts	0x03D3, r25
    372a:	80 93 d2 03 	sts	0x03D2, r24
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
    372e:	80 91 96 03 	lds	r24, 0x0396
    3732:	82 30       	cpi	r24, 0x02	; 2
    3734:	09 f0       	breq	.+2      	; 0x3738 <__vector_29+0x1d6>
    3736:	48 cf       	rjmp	.-368    	; 0x35c8 <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3738:	80 91 32 03 	lds	r24, 0x0332
    373c:	80 93 2f 03 	sts	0x032F, r24
			rightChannelPhase = rightMotorPhase;
    3740:	80 91 33 03 	lds	r24, 0x0333
    3744:	80 93 97 03 	sts	0x0397, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3748:	80 91 98 03 	lds	r24, 0x0398
    374c:	88 23       	and	r24, r24
    374e:	09 f0       	breq	.+2      	; 0x3752 <__vector_29+0x1f0>
    3750:	97 c0       	rjmp	.+302    	; 0x3880 <__vector_29+0x31e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3752:	83 e0       	ldi	r24, 0x03	; 3
    3754:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3758:	83 e0       	ldi	r24, 0x03	; 3
    375a:	80 93 96 03 	sts	0x0396, r24
			break;
    375e:	4a cf       	rjmp	.-364    	; 0x35f4 <__vector_29+0x92>
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			//PORTB ^= (1 << 7);
			if(firstSampleLeft > 0) {
    3760:	80 91 12 02 	lds	r24, 0x0212
    3764:	88 23       	and	r24, r24
    3766:	09 f4       	brne	.+2      	; 0x376a <__vector_29+0x208>
    3768:	2a cf       	rjmp	.-428    	; 0x35be <__vector_29+0x5c>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {  // if active phase for either forward or backward direction
    376a:	90 91 00 01 	lds	r25, 0x0100
    376e:	93 fd       	sbrc	r25, 3
    3770:	26 cf       	rjmp	.-436    	; 0x35be <__vector_29+0x5c>
    3772:	90 91 00 01 	lds	r25, 0x0100
    3776:	94 fd       	sbrc	r25, 4
    3778:	22 cf       	rjmp	.-444    	; 0x35be <__vector_29+0x5c>
					//PORTB &= ~(1 << 5);
					break;
				}
				firstSampleLeft++;
    377a:	48 2f       	mov	r20, r24
    377c:	4f 5f       	subi	r20, 0xFF	; 255
    377e:	40 93 12 02 	sts	0x0212, r20
				if(firstSampleLeft > 4) {
    3782:	45 30       	cpi	r20, 0x05	; 5
    3784:	08 f4       	brcc	.+2      	; 0x3788 <__vector_29+0x226>
    3786:	1b cf       	rjmp	.-458    	; 0x35be <__vector_29+0x5c>
					left_vel_sum += value;
    3788:	80 91 dc 03 	lds	r24, 0x03DC
    378c:	90 91 dd 03 	lds	r25, 0x03DD
    3790:	82 0f       	add	r24, r18
    3792:	93 1f       	adc	r25, r19
    3794:	90 93 dd 03 	sts	0x03DD, r25
    3798:	80 93 dc 03 	sts	0x03DC, r24
					if(firstSampleLeft==8) {
    379c:	48 30       	cpi	r20, 0x08	; 8
    379e:	09 f0       	breq	.+2      	; 0x37a2 <__vector_29+0x240>
    37a0:	0e cf       	rjmp	.-484    	; 0x35be <__vector_29+0x5c>
						firstSampleLeft = 0;
    37a2:	10 92 12 02 	sts	0x0212, r1
						compute_left_vel = 1;
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	80 93 0f 02 	sts	0x020F, r24
    37ac:	08 cf       	rjmp	.-496    	; 0x35be <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    37ae:	80 91 31 03 	lds	r24, 0x0331
    37b2:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    37b6:	80 91 34 03 	lds	r24, 0x0334
    37ba:	80 93 98 03 	sts	0x0398, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    37be:	80 91 97 03 	lds	r24, 0x0397
    37c2:	88 23       	and	r24, r24
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <__vector_29+0x266>
    37c6:	4a c0       	rjmp	.+148    	; 0x385c <__vector_29+0x2fa>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    37ce:	84 e0       	ldi	r24, 0x04	; 4
    37d0:	80 93 96 03 	sts	0x0396, r24
			break;
    37d4:	0f cf       	rjmp	.-482    	; 0x35f4 <__vector_29+0x92>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    37d6:	80 91 d0 03 	lds	r24, 0x03D0
    37da:	90 91 d1 03 	lds	r25, 0x03D1
    37de:	82 0f       	add	r24, r18
    37e0:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    37e2:	96 95       	lsr	r25
    37e4:	87 95       	ror	r24
    37e6:	90 93 d1 03 	sts	0x03D1, r25
    37ea:	80 93 d0 03 	sts	0x03D0, r24
			break;
    37ee:	e7 ce       	rjmp	.-562    	; 0x35be <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    37f0:	80 91 11 02 	lds	r24, 0x0211
    37f4:	88 23       	and	r24, r24
    37f6:	09 f4       	brne	.+2      	; 0x37fa <__vector_29+0x298>
    37f8:	e2 ce       	rjmp	.-572    	; 0x35be <__vector_29+0x5c>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    37fa:	63 99       	sbic	0x0c, 3	; 12
    37fc:	e0 ce       	rjmp	.-576    	; 0x35be <__vector_29+0x5c>
    37fe:	64 99       	sbic	0x0c, 4	; 12
    3800:	de ce       	rjmp	.-580    	; 0x35be <__vector_29+0x5c>
					//PORTB &= ~(1 << 5);
					break;
				}
				firstSampleRight++;
    3802:	48 2f       	mov	r20, r24
    3804:	4f 5f       	subi	r20, 0xFF	; 255
    3806:	40 93 11 02 	sts	0x0211, r20
				if(firstSampleRight > 4) {		// to skip undesired samples (3 samples skipped)
    380a:	45 30       	cpi	r20, 0x05	; 5
    380c:	08 f4       	brcc	.+2      	; 0x3810 <__vector_29+0x2ae>
    380e:	d7 ce       	rjmp	.-594    	; 0x35be <__vector_29+0x5c>
					right_vel_sum += value;
    3810:	80 91 de 03 	lds	r24, 0x03DE
    3814:	90 91 df 03 	lds	r25, 0x03DF
    3818:	82 0f       	add	r24, r18
    381a:	93 1f       	adc	r25, r19
    381c:	90 93 df 03 	sts	0x03DF, r25
    3820:	80 93 de 03 	sts	0x03DE, r24
					if(firstSampleRight==8) {	// number of samples to take for the speed computation
    3824:	48 30       	cpi	r20, 0x08	; 8
    3826:	09 f0       	breq	.+2      	; 0x382a <__vector_29+0x2c8>
    3828:	ca ce       	rjmp	.-620    	; 0x35be <__vector_29+0x5c>
						firstSampleRight = 0;
    382a:	10 92 11 02 	sts	0x0211, r1
						compute_right_vel = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 93 10 02 	sts	0x0210, r24
    3834:	c4 ce       	rjmp	.-632    	; 0x35be <__vector_29+0x5c>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif

					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));
    3836:	40 91 05 01 	lds	r20, 0x0105
    383a:	40 97       	sbiw	r24, 0x10	; 16
    383c:	95 95       	asr	r25
    383e:	87 95       	ror	r24
    3840:	21 e0       	ldi	r18, 0x01	; 1
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	02 c0       	rjmp	.+4      	; 0x384a <__vector_29+0x2e8>
    3846:	22 0f       	add	r18, r18
    3848:	33 1f       	adc	r19, r19
    384a:	8a 95       	dec	r24
    384c:	e2 f7       	brpl	.-8      	; 0x3846 <__vector_29+0x2e4>
    384e:	20 95       	com	r18
    3850:	24 23       	and	r18, r20
    3852:	20 93 05 01 	sts	0x0105, r18
    3856:	80 91 96 03 	lds	r24, 0x0396
    385a:	cc ce       	rjmp	.-616    	; 0x35f4 <__vector_29+0x92>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    385c:	81 30       	cpi	r24, 0x01	; 1
    385e:	69 f1       	breq	.+90     	; 0x38ba <__vector_29+0x358>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3860:	85 e0       	ldi	r24, 0x05	; 5
    3862:	80 93 95 03 	sts	0x0395, r24
    3866:	b3 cf       	rjmp	.-154    	; 0x37ce <__vector_29+0x26c>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3868:	91 30       	cpi	r25, 0x01	; 1
    386a:	09 f0       	breq	.+2      	; 0x386e <__vector_29+0x30c>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    386c:	85 e0       	ldi	r24, 0x05	; 5
    386e:	80 93 95 03 	sts	0x0395, r24
    3872:	15 cf       	rjmp	.-470    	; 0x369e <__vector_29+0x13c>
		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3874:	81 30       	cpi	r24, 0x01	; 1
    3876:	e9 f0       	breq	.+58     	; 0x38b2 <__vector_29+0x350>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3878:	85 e0       	ldi	r24, 0x05	; 5
    387a:	80 93 95 03 	sts	0x0395, r24
    387e:	b7 ce       	rjmp	.-658    	; 0x35ee <__vector_29+0x8c>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3880:	81 30       	cpi	r24, 0x01	; 1
    3882:	f9 f0       	breq	.+62     	; 0x38c2 <__vector_29+0x360>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3884:	85 e0       	ldi	r24, 0x05	; 5
    3886:	80 93 95 03 	sts	0x0395, r24
    388a:	66 cf       	rjmp	.-308    	; 0x3758 <__vector_29+0x1f6>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    388c:	80 91 9b 03 	lds	r24, 0x039B
    3890:	81 30       	cpi	r24, 0x01	; 1
    3892:	d9 f0       	breq	.+54     	; 0x38ca <__vector_29+0x368>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	ae ce       	rjmp	.-676    	; 0x35f4 <__vector_29+0x92>

	// save the last data
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
    3898:	90 91 9b 03 	lds	r25, 0x039B
    389c:	92 30       	cpi	r25, 0x02	; 2
    389e:	09 f0       	breq	.+2      	; 0x38a2 <__vector_29+0x340>
    38a0:	d4 ce       	rjmp	.-600    	; 0x364a <__vector_29+0xe8>
				batteryLevel = value;
    38a2:	30 93 9a 03 	sts	0x039A, r19
    38a6:	20 93 99 03 	sts	0x0399, r18
				measBattery = 0;
    38aa:	10 92 9b 03 	sts	0x039B, r1
				PORTC &= ~(1 << 6);
    38ae:	46 98       	cbi	0x08, 6	; 8
    38b0:	d4 ce       	rjmp	.-600    	; 0x365a <__vector_29+0xf8>
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    38b2:	82 e0       	ldi	r24, 0x02	; 2
    38b4:	80 93 95 03 	sts	0x0395, r24
    38b8:	9a ce       	rjmp	.-716    	; 0x35ee <__vector_29+0x8c>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    38ba:	82 e0       	ldi	r24, 0x02	; 2
    38bc:	80 93 95 03 	sts	0x0395, r24
    38c0:	86 cf       	rjmp	.-244    	; 0x37ce <__vector_29+0x26c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    38c2:	84 e0       	ldi	r24, 0x04	; 4
    38c4:	80 93 95 03 	sts	0x0395, r24
    38c8:	47 cf       	rjmp	.-370    	; 0x3758 <__vector_29+0x1f6>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	80 93 9b 03 	sts	0x039B, r24
				PORTC |= (1 << 6);	// sense enable on
    38d0:	46 9a       	sbi	0x08, 6	; 8
    38d2:	ec ce       	rjmp	.-552    	; 0x36ac <__vector_29+0x14a>
			}

			if(currentProx & 0x01) {	// if active phase
				if(currentProx < 16) {
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
    38d4:	80 91 9b 03 	lds	r24, 0x039B
    38d8:	81 30       	cpi	r24, 0x01	; 1
    38da:	09 f0       	breq	.+2      	; 0x38de <__vector_29+0x37c>
    38dc:	f1 ce       	rjmp	.-542    	; 0x36c0 <__vector_29+0x15e>
						measBattery=2;
    38de:	82 e0       	ldi	r24, 0x02	; 2
    38e0:	80 93 9b 03 	sts	0x039B, r24
						PORTC |= (1 << 6);	// sense enable on
    38e4:	46 9a       	sbi	0x08, 6	; 8
    38e6:	80 91 96 03 	lds	r24, 0x0396
    38ea:	84 ce       	rjmp	.-760    	; 0x35f4 <__vector_29+0x92>

000038ec <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    38ec:	e0 e9       	ldi	r30, 0x90	; 144
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	83 68       	ori	r24, 0x83	; 131
    38f4:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    38f6:	80 81       	ld	r24, Z
    38f8:	83 60       	ori	r24, 0x03	; 3
    38fa:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    38fc:	a1 e9       	ldi	r26, 0x91	; 145
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	8c 91       	ld	r24, X
    3902:	8b 60       	ori	r24, 0x0B	; 11
    3904:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3906:	80 91 e4 03 	lds	r24, 0x03E4
    390a:	90 91 e5 03 	lds	r25, 0x03E5
    390e:	90 93 99 00 	sts	0x0099, r25
    3912:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    3916:	10 92 9b 00 	sts	0x009B, r1
    391a:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    391e:	a1 e7       	ldi	r26, 0x71	; 113
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	8c 91       	ld	r24, X
    3924:	81 60       	ori	r24, 0x01	; 1
    3926:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3928:	80 81       	ld	r24, Z
    392a:	8f 75       	andi	r24, 0x5F	; 95
    392c:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    392e:	8e b1       	in	r24, 0x0e	; 14
    3930:	87 7e       	andi	r24, 0xE7	; 231
    3932:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3934:	e0 ea       	ldi	r30, 0xA0	; 160
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	83 68       	ori	r24, 0x83	; 131
    393c:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    393e:	a1 ea       	ldi	r26, 0xA1	; 161
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	8c 91       	ld	r24, X
    3944:	8b 60       	ori	r24, 0x0B	; 11
    3946:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3948:	80 91 e6 03 	lds	r24, 0x03E6
    394c:	90 91 e7 03 	lds	r25, 0x03E7
    3950:	90 93 a9 00 	sts	0x00A9, r25
    3954:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3958:	10 92 ab 00 	sts	0x00AB, r1
    395c:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3960:	a2 e7       	ldi	r26, 0x72	; 114
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	8c 91       	ld	r24, X
    3966:	81 60       	ori	r24, 0x01	; 1
    3968:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    396a:	80 81       	ld	r24, Z
    396c:	8f 75       	andi	r24, 0x5F	; 95
    396e:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3970:	e2 e0       	ldi	r30, 0x02	; 2
    3972:	f1 e0       	ldi	r31, 0x01	; 1
    3974:	80 81       	ld	r24, Z
    3976:	87 7e       	andi	r24, 0xE7	; 231
    3978:	80 83       	st	Z, r24


}
    397a:	08 95       	ret

0000397c <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    397c:	1f 92       	push	r1
    397e:	0f 92       	push	r0
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	0f 92       	push	r0
    3984:	11 24       	eor	r1, r1
    3986:	8f 93       	push	r24
    3988:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	left_current_avg = 0;
    398a:	10 92 d1 03 	sts	0x03D1, r1
    398e:	10 92 d0 03 	sts	0x03D0, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3992:	80 91 e6 03 	lds	r24, 0x03E6
    3996:	90 91 e7 03 	lds	r25, 0x03E7
    399a:	00 97       	sbiw	r24, 0x00	; 0
    399c:	41 f5       	brne	.+80     	; 0x39ee <__vector_45+0x72>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    399e:	80 91 da 03 	lds	r24, 0x03DA
    39a2:	90 91 db 03 	lds	r25, 0x03DB
    39a6:	97 fd       	sbrc	r25, 7
    39a8:	69 c0       	rjmp	.+210    	; 0x3a7c <__vector_45+0x100>
			leftMotorPhase = PASSIVE_PHASE;
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 14;
    39b0:	8e e0       	ldi	r24, 0x0E	; 14
    39b2:	80 93 31 03 	sts	0x0331, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	80 93 12 02 	sts	0x0212, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    39bc:	80 91 a0 00 	lds	r24, 0x00A0
    39c0:	8f 75       	andi	r24, 0x5F	; 95
    39c2:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    39c6:	80 91 02 01 	lds	r24, 0x0102
    39ca:	87 7e       	andi	r24, 0xE7	; 231
    39cc:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    39d0:	80 91 72 00 	lds	r24, 0x0072
    39d4:	89 7f       	andi	r24, 0xF9	; 249
    39d6:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    39da:	89 b3       	in	r24, 0x19	; 25
    39dc:	86 60       	ori	r24, 0x06	; 6
    39de:	89 bb       	out	0x19, r24	; 25
	}
*/

//	PORTB |= (1 << 6);

}
    39e0:	9f 91       	pop	r25
    39e2:	8f 91       	pop	r24
    39e4:	0f 90       	pop	r0
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	0f 90       	pop	r0
    39ea:	1f 90       	pop	r1
    39ec:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    39ee:	18 16       	cp	r1, r24
    39f0:	19 06       	cpc	r1, r25
    39f2:	2c f5       	brge	.+74     	; 0x3a3e <__vector_45+0xc2>
		leftMotorPhase = ACTIVE_PHASE;
    39f4:	10 92 34 03 	sts	0x0334, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    39f8:	8f e0       	ldi	r24, 0x0F	; 15
    39fa:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    39fe:	80 91 a0 00 	lds	r24, 0x00A0
    3a02:	8f 7d       	andi	r24, 0xDF	; 223
    3a04:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3a08:	80 91 72 00 	lds	r24, 0x0072
    3a0c:	8b 7f       	andi	r24, 0xFB	; 251
    3a0e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3a12:	80 91 02 01 	lds	r24, 0x0102
    3a16:	8f 7e       	andi	r24, 0xEF	; 239
    3a18:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3a1c:	80 91 a0 00 	lds	r24, 0x00A0
    3a20:	80 68       	ori	r24, 0x80	; 128
    3a22:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3a26:	80 91 72 00 	lds	r24, 0x0072
    3a2a:	82 60       	ori	r24, 0x02	; 2
    3a2c:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	PORTB |= (1 << 6);

}
    3a30:	9f 91       	pop	r25
    3a32:	8f 91       	pop	r24
    3a34:	0f 90       	pop	r0
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	0f 90       	pop	r0
    3a3a:	1f 90       	pop	r1
    3a3c:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3a3e:	10 92 34 03 	sts	0x0334, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3a42:	8e e0       	ldi	r24, 0x0E	; 14
    3a44:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3a48:	80 91 a0 00 	lds	r24, 0x00A0
    3a4c:	8f 77       	andi	r24, 0x7F	; 127
    3a4e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3a52:	80 91 72 00 	lds	r24, 0x0072
    3a56:	8d 7f       	andi	r24, 0xFD	; 253
    3a58:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3a5c:	80 91 02 01 	lds	r24, 0x0102
    3a60:	87 7f       	andi	r24, 0xF7	; 247
    3a62:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3a66:	80 91 a0 00 	lds	r24, 0x00A0
    3a6a:	80 62       	ori	r24, 0x20	; 32
    3a6c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3a70:	80 91 72 00 	lds	r24, 0x0072
    3a74:	84 60       	ori	r24, 0x04	; 4
    3a76:	80 93 72 00 	sts	0x0072, r24
    3a7a:	b2 cf       	rjmp	.-156    	; 0x39e0 <__vector_45+0x64>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 15;
    3a82:	8f e0       	ldi	r24, 0x0F	; 15
    3a84:	80 93 31 03 	sts	0x0331, r24
    3a88:	96 cf       	rjmp	.-212    	; 0x39b6 <__vector_45+0x3a>

00003a8a <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3a8a:	1f 92       	push	r1
    3a8c:	0f 92       	push	r0
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	0f 92       	push	r0
    3a92:	11 24       	eor	r1, r1
    3a94:	8f 93       	push	r24
    3a96:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	80 93 34 03 	sts	0x0334, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3a9e:	9e e0       	ldi	r25, 0x0E	; 14
    3aa0:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    3aa4:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3aa8:	9f 91       	pop	r25
    3aaa:	8f 91       	pop	r24
    3aac:	0f 90       	pop	r0
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	0f 90       	pop	r0
    3ab2:	1f 90       	pop	r1
    3ab4:	18 95       	reti

00003ab6 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3ab6:	1f 92       	push	r1
    3ab8:	0f 92       	push	r0
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	0f 92       	push	r0
    3abe:	11 24       	eor	r1, r1
    3ac0:	8f 93       	push	r24
    3ac2:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	80 93 34 03 	sts	0x0334, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3aca:	9f e0       	ldi	r25, 0x0F	; 15
    3acc:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    3ad0:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3ad4:	9f 91       	pop	r25
    3ad6:	8f 91       	pop	r24
    3ad8:	0f 90       	pop	r0
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	0f 90       	pop	r0
    3ade:	1f 90       	pop	r1
    3ae0:	18 95       	reti

00003ae2 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	8f 93       	push	r24
    3aee:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	right_current_avg = 0;
    3af0:	10 92 d3 03 	sts	0x03D3, r1
    3af4:	10 92 d2 03 	sts	0x03D2, r1


	if(pwm_right == 0) {
    3af8:	80 91 e4 03 	lds	r24, 0x03E4
    3afc:	90 91 e5 03 	lds	r25, 0x03E5
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	31 f5       	brne	.+76     	; 0x3b50 <__vector_35+0x6e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3b04:	80 91 d8 03 	lds	r24, 0x03D8
    3b08:	90 91 d9 03 	lds	r25, 0x03D9
    3b0c:	97 fd       	sbrc	r25, 7
    3b0e:	5f c0       	rjmp	.+190    	; 0x3bce <__vector_35+0xec>
			rightMotorPhase = PASSIVE_PHASE;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	80 93 33 03 	sts	0x0333, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3b16:	8c e0       	ldi	r24, 0x0C	; 12
    3b18:	80 93 32 03 	sts	0x0332, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	80 93 11 02 	sts	0x0211, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3b22:	80 91 90 00 	lds	r24, 0x0090
    3b26:	8f 75       	andi	r24, 0x5F	; 95
    3b28:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3b2c:	8e b1       	in	r24, 0x0e	; 14
    3b2e:	87 7e       	andi	r24, 0xE7	; 231
    3b30:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3b32:	80 91 71 00 	lds	r24, 0x0071
    3b36:	89 7f       	andi	r24, 0xF9	; 249
    3b38:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3b3c:	88 b3       	in	r24, 0x18	; 24
    3b3e:	86 60       	ori	r24, 0x06	; 6
    3b40:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3b42:	9f 91       	pop	r25
    3b44:	8f 91       	pop	r24
    3b46:	0f 90       	pop	r0
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	0f 90       	pop	r0
    3b4c:	1f 90       	pop	r1
    3b4e:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3b50:	18 16       	cp	r1, r24
    3b52:	19 06       	cpc	r1, r25
    3b54:	0c f5       	brge	.+66     	; 0x3b98 <__vector_35+0xb6>
		rightMotorPhase = ACTIVE_PHASE;
    3b56:	10 92 33 03 	sts	0x0333, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3b5a:	8d e0       	ldi	r24, 0x0D	; 13
    3b5c:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3b60:	80 91 90 00 	lds	r24, 0x0090
    3b64:	8f 7d       	andi	r24, 0xDF	; 223
    3b66:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3b6a:	80 91 71 00 	lds	r24, 0x0071
    3b6e:	8b 7f       	andi	r24, 0xFB	; 251
    3b70:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3b74:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3b76:	80 91 90 00 	lds	r24, 0x0090
    3b7a:	80 68       	ori	r24, 0x80	; 128
    3b7c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3b80:	80 91 71 00 	lds	r24, 0x0071
    3b84:	82 60       	ori	r24, 0x02	; 2
    3b86:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3b8a:	9f 91       	pop	r25
    3b8c:	8f 91       	pop	r24
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	0f 90       	pop	r0
    3b94:	1f 90       	pop	r1
    3b96:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3b98:	10 92 33 03 	sts	0x0333, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3b9c:	8c e0       	ldi	r24, 0x0C	; 12
    3b9e:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3ba2:	80 91 90 00 	lds	r24, 0x0090
    3ba6:	8f 77       	andi	r24, 0x7F	; 127
    3ba8:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3bac:	80 91 71 00 	lds	r24, 0x0071
    3bb0:	8d 7f       	andi	r24, 0xFD	; 253
    3bb2:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3bb6:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3bb8:	80 91 90 00 	lds	r24, 0x0090
    3bbc:	80 62       	ori	r24, 0x20	; 32
    3bbe:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3bc2:	80 91 71 00 	lds	r24, 0x0071
    3bc6:	84 60       	ori	r24, 0x04	; 4
    3bc8:	80 93 71 00 	sts	0x0071, r24
    3bcc:	ba cf       	rjmp	.-140    	; 0x3b42 <__vector_35+0x60>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	80 93 33 03 	sts	0x0333, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3bd4:	8d e0       	ldi	r24, 0x0D	; 13
    3bd6:	80 93 32 03 	sts	0x0332, r24
    3bda:	a0 cf       	rjmp	.-192    	; 0x3b1c <__vector_35+0x3a>

00003bdc <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3bdc:	1f 92       	push	r1
    3bde:	0f 92       	push	r0
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	0f 92       	push	r0
    3be4:	11 24       	eor	r1, r1
    3be6:	8f 93       	push	r24
    3be8:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	80 93 33 03 	sts	0x0333, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3bf0:	9c e0       	ldi	r25, 0x0C	; 12
    3bf2:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3bf6:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);

}
    3bfa:	9f 91       	pop	r25
    3bfc:	8f 91       	pop	r24
    3bfe:	0f 90       	pop	r0
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	0f 90       	pop	r0
    3c04:	1f 90       	pop	r1
    3c06:	18 95       	reti

00003c08 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3c08:	1f 92       	push	r1
    3c0a:	0f 92       	push	r0
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	0f 92       	push	r0
    3c10:	11 24       	eor	r1, r1
    3c12:	8f 93       	push	r24
    3c14:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	80 93 33 03 	sts	0x0333, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3c1c:	9d e0       	ldi	r25, 0x0D	; 13
    3c1e:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3c22:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);
}
    3c26:	9f 91       	pop	r25
    3c28:	8f 91       	pop	r24
    3c2a:	0f 90       	pop	r0
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	0f 90       	pop	r0
    3c30:	1f 90       	pop	r1
    3c32:	18 95       	reti

00003c34 <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance() {
    3c34:	cf 92       	push	r12
    3c36:	df 92       	push	r13
    3c38:	ef 92       	push	r14
    3c3a:	ff 92       	push	r15
    3c3c:	0f 93       	push	r16
    3c3e:	1f 93       	push	r17
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
	signed int velX=0, velY=0;
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
    3c44:	80 91 ec 03 	lds	r24, 0x03EC
    3c48:	90 91 ed 03 	lds	r25, 0x03ED
    3c4c:	97 fd       	sbrc	r25, 7
    3c4e:	c9 c0       	rjmp	.+402    	; 0x3de2 <obstacleAvoidance+0x1ae>
    3c50:	60 91 05 04 	lds	r22, 0x0405
    3c54:	70 91 06 04 	lds	r23, 0x0406
		speedr = -speedr;
	}
	if(pwm_left_desired < 0) {
    3c58:	80 91 ee 03 	lds	r24, 0x03EE
    3c5c:	90 91 ef 03 	lds	r25, 0x03EF
    3c60:	97 fd       	sbrc	r25, 7
    3c62:	d0 c0       	rjmp	.+416    	; 0x3e04 <obstacleAvoidance+0x1d0>
    3c64:	40 91 03 04 	lds	r20, 0x0403
    3c68:	50 91 04 04 	lds	r21, 0x0404
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3c6c:	e0 90 67 03 	lds	r14, 0x0367
    3c70:	f0 90 68 03 	lds	r15, 0x0368
    3c74:	90 91 6b 03 	lds	r25, 0x036B
    3c78:	80 91 6c 03 	lds	r24, 0x036C
    3c7c:	a9 2f       	mov	r26, r25
    3c7e:	b8 2f       	mov	r27, r24
    3c80:	b7 fd       	sbrc	r27, 7
    3c82:	cf c0       	rjmp	.+414    	; 0x3e22 <obstacleAvoidance+0x1ee>
    3c84:	b5 95       	asr	r27
    3c86:	a7 95       	ror	r26
    3c88:	00 91 6f 03 	lds	r16, 0x036F
    3c8c:	10 91 70 03 	lds	r17, 0x0370
    3c90:	90 91 73 03 	lds	r25, 0x0373
    3c94:	80 91 74 03 	lds	r24, 0x0374
    3c98:	e9 2f       	mov	r30, r25
    3c9a:	f8 2f       	mov	r31, r24
    3c9c:	f7 fd       	sbrc	r31, 7
    3c9e:	cc c0       	rjmp	.+408    	; 0x3e38 <obstacleAvoidance+0x204>
    3ca0:	f5 95       	asr	r31
    3ca2:	e7 95       	ror	r30
    3ca4:	f0 95       	com	r31
    3ca6:	e1 95       	neg	r30
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
    3caa:	ea 01       	movw	r28, r20
    3cac:	c6 0f       	add	r28, r22
    3cae:	d7 1f       	adc	r29, r23
    3cb0:	d7 fd       	sbrc	r29, 7
    3cb2:	b9 c0       	rjmp	.+370    	; 0x3e26 <obstacleAvoidance+0x1f2>
    3cb4:	d5 95       	asr	r29
    3cb6:	c7 95       	ror	r28
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3cb8:	8e 2d       	mov	r24, r14
    3cba:	9f 2d       	mov	r25, r15
    3cbc:	97 fd       	sbrc	r25, 7
    3cbe:	ba c0       	rjmp	.+372    	; 0x3e34 <obstacleAvoidance+0x200>
    3cc0:	95 95       	asr	r25
    3cc2:	87 95       	ror	r24
    3cc4:	9d 01       	movw	r18, r26
    3cc6:	28 1b       	sub	r18, r24
    3cc8:	39 0b       	sbc	r19, r25
    3cca:	80 91 6d 03 	lds	r24, 0x036D
    3cce:	90 91 6e 03 	lds	r25, 0x036E
    3cd2:	28 0f       	add	r18, r24
    3cd4:	39 1f       	adc	r19, r25
    3cd6:	c8 01       	movw	r24, r16
    3cd8:	17 fd       	sbrc	r17, 7
    3cda:	b6 c0       	rjmp	.+364    	; 0x3e48 <obstacleAvoidance+0x214>
    3cdc:	95 95       	asr	r25
    3cde:	87 95       	ror	r24
    3ce0:	82 0f       	add	r24, r18
    3ce2:	93 1f       	adc	r25, r19
    3ce4:	8e 0f       	add	r24, r30
    3ce6:	9f 1f       	adc	r25, r31
    3ce8:	20 91 65 03 	lds	r18, 0x0365
    3cec:	30 91 66 03 	lds	r19, 0x0366
    3cf0:	82 1b       	sub	r24, r18
    3cf2:	93 0b       	sbc	r25, r19
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	velX += sumSensorsX/4;
    3cf4:	96 95       	lsr	r25
    3cf6:	87 95       	ror	r24
    3cf8:	96 95       	lsr	r25
    3cfa:	87 95       	ror	r24
    3cfc:	8c 0f       	add	r24, r28
    3cfe:	9d 1f       	adc	r25, r29
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    3d00:	64 1b       	sub	r22, r20
    3d02:	75 0b       	sbc	r23, r21
    3d04:	77 fd       	sbrc	r23, 7
    3d06:	9d c0       	rjmp	.+314    	; 0x3e42 <obstacleAvoidance+0x20e>
    3d08:	75 95       	asr	r23
    3d0a:	67 95       	ror	r22

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3d0c:	ea 0f       	add	r30, r26
    3d0e:	fb 1f       	adc	r31, r27
    3d10:	20 91 69 03 	lds	r18, 0x0369
    3d14:	30 91 6a 03 	lds	r19, 0x036A
    3d18:	e2 0f       	add	r30, r18
    3d1a:	f3 1f       	adc	r31, r19
    3d1c:	2e 2d       	mov	r18, r14
    3d1e:	3f 2d       	mov	r19, r15
    3d20:	37 fd       	sbrc	r19, 7
    3d22:	8c c0       	rjmp	.+280    	; 0x3e3c <obstacleAvoidance+0x208>
    3d24:	35 95       	asr	r19
    3d26:	27 95       	ror	r18
    3d28:	2e 0f       	add	r18, r30
    3d2a:	3f 1f       	adc	r19, r31
    3d2c:	40 2f       	mov	r20, r16
    3d2e:	51 2f       	mov	r21, r17
    3d30:	57 fd       	sbrc	r21, 7
    3d32:	74 c0       	rjmp	.+232    	; 0x3e1c <obstacleAvoidance+0x1e8>
    3d34:	55 95       	asr	r21
    3d36:	47 95       	ror	r20
    3d38:	24 1b       	sub	r18, r20
    3d3a:	35 0b       	sbc	r19, r21
    3d3c:	40 91 71 03 	lds	r20, 0x0371
    3d40:	50 91 72 03 	lds	r21, 0x0372
    3d44:	24 1b       	sub	r18, r20
    3d46:	35 0b       	sbc	r19, r21

	velX += sumSensorsX/4;
	velY += sumSensorsY/4;
    3d48:	36 95       	lsr	r19
    3d4a:	27 95       	ror	r18
    3d4c:	36 95       	lsr	r19
    3d4e:	27 95       	ror	r18
    3d50:	26 0f       	add	r18, r22
    3d52:	37 1f       	adc	r19, r23

	speedR = (velX + velY);
    3d54:	a9 01       	movw	r20, r18
    3d56:	48 0f       	add	r20, r24
    3d58:	59 1f       	adc	r21, r25
	speedL = (velX - velY);
    3d5a:	82 1b       	sub	r24, r18
    3d5c:	93 0b       	sbc	r25, r19

	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL<<2);
	} else {
		pwm_left_working = speedL<<2;
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	90 93 01 04 	sts	0x0401, r25
    3d6a:	80 93 00 04 	sts	0x0400, r24

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR<<2);
	} else {
		pwm_right_working = speedR<<2;
    3d6e:	9a 01       	movw	r18, r20
    3d70:	22 0f       	add	r18, r18
    3d72:	33 1f       	adc	r19, r19
    3d74:	22 0f       	add	r18, r18
    3d76:	33 1f       	adc	r19, r19
    3d78:	30 93 ff 03 	sts	0x03FF, r19
    3d7c:	20 93 fe 03 	sts	0x03FE, r18
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
    3d80:	42 e0       	ldi	r20, 0x02	; 2
    3d82:	21 30       	cpi	r18, 0x01	; 1
    3d84:	34 07       	cpc	r19, r20
    3d86:	34 f0       	brlt	.+12     	; 0x3d94 <obstacleAvoidance+0x160>
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	32 e0       	ldi	r19, 0x02	; 2
    3d8c:	30 93 ff 03 	sts	0x03FF, r19
    3d90:	20 93 fe 03 	sts	0x03FE, r18
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
    3d94:	42 e0       	ldi	r20, 0x02	; 2
    3d96:	81 30       	cpi	r24, 0x01	; 1
    3d98:	94 07       	cpc	r25, r20
    3d9a:	34 f0       	brlt	.+12     	; 0x3da8 <obstacleAvoidance+0x174>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	92 e0       	ldi	r25, 0x02	; 2
    3da0:	90 93 01 04 	sts	0x0401, r25
    3da4:	80 93 00 04 	sts	0x0400, r24
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
    3da8:	4e ef       	ldi	r20, 0xFE	; 254
    3daa:	20 30       	cpi	r18, 0x00	; 0
    3dac:	34 07       	cpc	r19, r20
    3dae:	34 f4       	brge	.+12     	; 0x3dbc <obstacleAvoidance+0x188>
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	3e ef       	ldi	r19, 0xFE	; 254
    3db4:	30 93 ff 03 	sts	0x03FF, r19
    3db8:	20 93 fe 03 	sts	0x03FE, r18
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    3dbc:	2e ef       	ldi	r18, 0xFE	; 254
    3dbe:	80 30       	cpi	r24, 0x00	; 0
    3dc0:	92 07       	cpc	r25, r18
    3dc2:	34 f4       	brge	.+12     	; 0x3dd0 <obstacleAvoidance+0x19c>
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	9e ef       	ldi	r25, 0xFE	; 254
    3dc8:	90 93 01 04 	sts	0x0401, r25
    3dcc:	80 93 00 04 	sts	0x0400, r24
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	ff 90       	pop	r15
    3dda:	ef 90       	pop	r14
    3ddc:	df 90       	pop	r13
    3dde:	cf 90       	pop	r12
    3de0:	08 95       	ret
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
		speedr = -speedr;
    3de2:	60 91 05 04 	lds	r22, 0x0405
    3de6:	70 91 06 04 	lds	r23, 0x0406
    3dea:	70 95       	com	r23
    3dec:	61 95       	neg	r22
    3dee:	7f 4f       	sbci	r23, 0xFF	; 255
    3df0:	70 93 06 04 	sts	0x0406, r23
    3df4:	60 93 05 04 	sts	0x0405, r22
	}
	if(pwm_left_desired < 0) {
    3df8:	80 91 ee 03 	lds	r24, 0x03EE
    3dfc:	90 91 ef 03 	lds	r25, 0x03EF
    3e00:	97 ff       	sbrs	r25, 7
    3e02:	30 cf       	rjmp	.-416    	; 0x3c64 <obstacleAvoidance+0x30>
		speedl = - speedl;
    3e04:	40 91 03 04 	lds	r20, 0x0403
    3e08:	50 91 04 04 	lds	r21, 0x0404
    3e0c:	50 95       	com	r21
    3e0e:	41 95       	neg	r20
    3e10:	5f 4f       	sbci	r21, 0xFF	; 255
    3e12:	50 93 04 04 	sts	0x0404, r21
    3e16:	40 93 03 04 	sts	0x0403, r20
    3e1a:	28 cf       	rjmp	.-432    	; 0x3c6c <obstacleAvoidance+0x38>

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3e1c:	4f 5f       	subi	r20, 0xFF	; 255
    3e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e20:	89 cf       	rjmp	.-238    	; 0x3d34 <obstacleAvoidance+0x100>
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3e22:	11 96       	adiw	r26, 0x01	; 1
    3e24:	2f cf       	rjmp	.-418    	; 0x3c84 <obstacleAvoidance+0x50>
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
    3e26:	21 96       	adiw	r28, 0x01	; 1
    3e28:	d5 95       	asr	r29
    3e2a:	c7 95       	ror	r28
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3e2c:	8e 2d       	mov	r24, r14
    3e2e:	9f 2d       	mov	r25, r15
    3e30:	97 ff       	sbrs	r25, 7
    3e32:	46 cf       	rjmp	.-372    	; 0x3cc0 <obstacleAvoidance+0x8c>
    3e34:	01 96       	adiw	r24, 0x01	; 1
    3e36:	44 cf       	rjmp	.-376    	; 0x3cc0 <obstacleAvoidance+0x8c>
    3e38:	31 96       	adiw	r30, 0x01	; 1
    3e3a:	32 cf       	rjmp	.-412    	; 0x3ca0 <obstacleAvoidance+0x6c>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3e3c:	2f 5f       	subi	r18, 0xFF	; 255
    3e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e40:	71 cf       	rjmp	.-286    	; 0x3d24 <obstacleAvoidance+0xf0>
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    3e42:	6f 5f       	subi	r22, 0xFF	; 255
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	60 cf       	rjmp	.-320    	; 0x3d08 <obstacleAvoidance+0xd4>

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3e48:	01 96       	adiw	r24, 0x01	; 1
    3e4a:	48 cf       	rjmp	.-368    	; 0x3cdc <obstacleAvoidance+0xa8>

00003e4c <cliffAvoidance>:

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    3e4c:	80 91 55 03 	lds	r24, 0x0355
    3e50:	90 91 56 03 	lds	r25, 0x0356
    3e54:	20 91 57 03 	lds	r18, 0x0357
    3e58:	30 91 58 03 	lds	r19, 0x0358
    3e5c:	82 1b       	sub	r24, r18
    3e5e:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    3e60:	60 91 59 03 	lds	r22, 0x0359
    3e64:	70 91 5a 03 	lds	r23, 0x035A
    3e68:	20 91 5b 03 	lds	r18, 0x035B
    3e6c:	30 91 5c 03 	lds	r19, 0x035C
    3e70:	62 1b       	sub	r22, r18
    3e72:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    3e74:	40 91 5d 03 	lds	r20, 0x035D
    3e78:	50 91 5e 03 	lds	r21, 0x035E
    3e7c:	20 91 5f 03 	lds	r18, 0x035F
    3e80:	30 91 60 03 	lds	r19, 0x0360
    3e84:	42 1b       	sub	r20, r18
    3e86:	53 0b       	sbc	r21, r19
    3e88:	57 fd       	sbrc	r21, 7
    3e8a:	4e c0       	rjmp	.+156    	; 0x3f28 <cliffAvoidance+0xdc>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    3e8c:	20 91 61 03 	lds	r18, 0x0361
    3e90:	30 91 62 03 	lds	r19, 0x0362
    3e94:	e0 91 63 03 	lds	r30, 0x0363
    3e98:	f0 91 64 03 	lds	r31, 0x0364
    3e9c:	2e 1b       	sub	r18, r30
    3e9e:	3f 0b       	sbc	r19, r31
    3ea0:	37 fd       	sbrc	r19, 7
    3ea2:	4b c0       	rjmp	.+150    	; 0x3f3a <cliffAvoidance+0xee>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    3ea4:	97 fd       	sbrc	r25, 7
    3ea6:	46 c0       	rjmp	.+140    	; 0x3f34 <cliffAvoidance+0xe8>
    3ea8:	90 93 37 04 	sts	0x0437, r25
    3eac:	80 93 36 04 	sts	0x0436, r24
	minGround = GROUND_LEFT;
    3eb0:	e3 e0       	ldi	r30, 0x03	; 3
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	f0 93 20 02 	sts	0x0220, r31
    3eb8:	e0 93 1f 02 	sts	0x021F, r30
	if(g1 < minGroundValue) {
    3ebc:	77 fd       	sbrc	r23, 7
    3ebe:	37 c0       	rjmp	.+110    	; 0x3f2e <cliffAvoidance+0xe2>
    3ec0:	68 17       	cp	r22, r24
    3ec2:	79 07       	cpc	r23, r25
    3ec4:	58 f4       	brcc	.+22     	; 0x3edc <cliffAvoidance+0x90>
		minGroundValue = g1;
    3ec6:	70 93 37 04 	sts	0x0437, r23
    3eca:	60 93 36 04 	sts	0x0436, r22
		minGround = GROUND_CENTER_LEFT;
    3ece:	82 e0       	ldi	r24, 0x02	; 2
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	90 93 20 02 	sts	0x0220, r25
    3ed6:	80 93 1f 02 	sts	0x021F, r24
    3eda:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    3edc:	48 17       	cp	r20, r24
    3ede:	59 07       	cpc	r21, r25
    3ee0:	58 f4       	brcc	.+22     	; 0x3ef8 <cliffAvoidance+0xac>
		minGroundValue = g2;
    3ee2:	50 93 37 04 	sts	0x0437, r21
    3ee6:	40 93 36 04 	sts	0x0436, r20
		minGround = GROUND_CENTER_RIGHT;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	90 93 20 02 	sts	0x0220, r25
    3ef2:	80 93 1f 02 	sts	0x021F, r24
    3ef6:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    3ef8:	28 17       	cp	r18, r24
    3efa:	39 07       	cpc	r19, r25
    3efc:	48 f4       	brcc	.+18     	; 0x3f10 <cliffAvoidance+0xc4>
		minGroundValue = g3;
    3efe:	30 93 37 04 	sts	0x0437, r19
    3f02:	20 93 36 04 	sts	0x0436, r18
		minGround = GROUND_RIGHT;
    3f06:	10 92 20 02 	sts	0x0220, r1
    3f0a:	10 92 1f 02 	sts	0x021F, r1
    3f0e:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    3f10:	84 37       	cpi	r24, 0x74	; 116
    3f12:	91 05       	cpc	r25, r1
    3f14:	40 f4       	brcc	.+16     	; 0x3f26 <cliffAvoidance+0xda>
		pwm_right_working = 0;
    3f16:	10 92 ff 03 	sts	0x03FF, r1
    3f1a:	10 92 fe 03 	sts	0x03FE, r1
		pwm_left_working = 0;
    3f1e:	10 92 01 04 	sts	0x0401, r1
    3f22:	10 92 00 04 	sts	0x0400, r1
    3f26:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    3f28:	40 e0       	ldi	r20, 0x00	; 0
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	af cf       	rjmp	.-162    	; 0x3e8c <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	70 e0       	ldi	r23, 0x00	; 0
    3f32:	c6 cf       	rjmp	.-116    	; 0x3ec0 <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	b7 cf       	rjmp	.-146    	; 0x3ea8 <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	b2 cf       	rjmp	.-156    	; 0x3ea4 <cliffAvoidance+0x58>

00003f40 <initRGBleds>:
	//TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1B1) & ~(1 << COM1C1);	// disable OCA, OCB, OCC to turn them off
	//TIMSK1 |= (1 << OCIE1A); 	// Enable output compare match interrupt
	//TIMSK1 |= (1 << TOIE1);	// Enable timer overflow interrupt
*/

}
    3f40:	08 95       	ret

00003f42 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	90 91 07 04 	lds	r25, 0x0407
    3f48:	89 1b       	sub	r24, r25
    3f4a:	80 93 07 04 	sts	0x0407, r24

	if(blinkState) {
    3f4e:	88 23       	and	r24, r24
    3f50:	39 f4       	brne	.+14     	; 0x3f60 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
    3f52:	80 91 80 00 	lds	r24, 0x0080
    3f56:	87 7f       	andi	r24, 0xF7	; 247
    3f58:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3f5c:	2f 98       	cbi	0x05, 7	; 5
    3f5e:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
    3f60:	80 91 80 00 	lds	r24, 0x0080
    3f64:	88 60       	ori	r24, 0x08	; 8
    3f66:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3f6a:	8f ef       	ldi	r24, 0xFF	; 255
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	90 93 8d 00 	sts	0x008D, r25
    3f72:	80 93 8c 00 	sts	0x008C, r24
    3f76:	08 95       	ret

00003f78 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3f78:	88 23       	and	r24, r24
    3f7a:	59 f0       	breq	.+22     	; 0x3f92 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    3f7c:	90 91 80 00 	lds	r25, 0x0080
    3f80:	90 68       	ori	r25, 0x80	; 128
    3f82:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	90 93 89 00 	sts	0x0089, r25
    3f8c:	80 93 88 00 	sts	0x0088, r24
    3f90:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    3f92:	80 91 80 00 	lds	r24, 0x0080
    3f96:	8f 77       	andi	r24, 0x7F	; 127
    3f98:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    3f9c:	2d 98       	cbi	0x05, 5	; 5
    3f9e:	08 95       	ret

00003fa0 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3fa0:	88 23       	and	r24, r24
    3fa2:	59 f0       	breq	.+22     	; 0x3fba <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    3fa4:	90 91 80 00 	lds	r25, 0x0080
    3fa8:	90 62       	ori	r25, 0x20	; 32
    3faa:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	90 93 8b 00 	sts	0x008B, r25
    3fb4:	80 93 8a 00 	sts	0x008A, r24
    3fb8:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    3fba:	80 91 80 00 	lds	r24, 0x0080
    3fbe:	8f 7d       	andi	r24, 0xDF	; 223
    3fc0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    3fc4:	2e 98       	cbi	0x05, 6	; 5
    3fc6:	08 95       	ret

00003fc8 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3fc8:	88 23       	and	r24, r24
    3fca:	59 f0       	breq	.+22     	; 0x3fe2 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    3fcc:	90 91 80 00 	lds	r25, 0x0080
    3fd0:	98 60       	ori	r25, 0x08	; 8
    3fd2:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	90 93 8d 00 	sts	0x008D, r25
    3fdc:	80 93 8c 00 	sts	0x008C, r24
    3fe0:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    3fe2:	80 91 80 00 	lds	r24, 0x0080
    3fe6:	87 7f       	andi	r24, 0xF7	; 247
    3fe8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3fec:	2f 98       	cbi	0x05, 7	; 5
    3fee:	08 95       	ret

00003ff0 <__mulsf3>:
    3ff0:	a0 e2       	ldi	r26, 0x20	; 32
    3ff2:	b0 e0       	ldi	r27, 0x00	; 0
    3ff4:	ee ef       	ldi	r30, 0xFE	; 254
    3ff6:	ff e1       	ldi	r31, 0x1F	; 31
    3ff8:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__prologue_saves__+0x4>
    3ffc:	69 83       	std	Y+1, r22	; 0x01
    3ffe:	7a 83       	std	Y+2, r23	; 0x02
    4000:	8b 83       	std	Y+3, r24	; 0x03
    4002:	9c 83       	std	Y+4, r25	; 0x04
    4004:	2d 83       	std	Y+5, r18	; 0x05
    4006:	3e 83       	std	Y+6, r19	; 0x06
    4008:	4f 83       	std	Y+7, r20	; 0x07
    400a:	58 87       	std	Y+8, r21	; 0x08
    400c:	99 e0       	ldi	r25, 0x09	; 9
    400e:	e9 2e       	mov	r14, r25
    4010:	f1 2c       	mov	r15, r1
    4012:	ec 0e       	add	r14, r28
    4014:	fd 1e       	adc	r15, r29
    4016:	b7 01       	movw	r22, r14
    4018:	ce 01       	movw	r24, r28
    401a:	01 96       	adiw	r24, 0x01	; 1
    401c:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__unpack_f>
    4020:	8e 01       	movw	r16, r28
    4022:	0f 5e       	subi	r16, 0xEF	; 239
    4024:	1f 4f       	sbci	r17, 0xFF	; 255
    4026:	b8 01       	movw	r22, r16
    4028:	ce 01       	movw	r24, r28
    402a:	05 96       	adiw	r24, 0x05	; 5
    402c:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__unpack_f>
    4030:	99 85       	ldd	r25, Y+9	; 0x09
    4032:	92 30       	cpi	r25, 0x02	; 2
    4034:	88 f0       	brcs	.+34     	; 0x4058 <__mulsf3+0x68>
    4036:	89 89       	ldd	r24, Y+17	; 0x11
    4038:	82 30       	cpi	r24, 0x02	; 2
    403a:	c0 f0       	brcs	.+48     	; 0x406c <__mulsf3+0x7c>
    403c:	94 30       	cpi	r25, 0x04	; 4
    403e:	19 f4       	brne	.+6      	; 0x4046 <__mulsf3+0x56>
    4040:	82 30       	cpi	r24, 0x02	; 2
    4042:	29 f0       	breq	.+10     	; 0x404e <__mulsf3+0x5e>
    4044:	09 c0       	rjmp	.+18     	; 0x4058 <__mulsf3+0x68>
    4046:	84 30       	cpi	r24, 0x04	; 4
    4048:	29 f4       	brne	.+10     	; 0x4054 <__mulsf3+0x64>
    404a:	92 30       	cpi	r25, 0x02	; 2
    404c:	79 f4       	brne	.+30     	; 0x406c <__mulsf3+0x7c>
    404e:	61 e2       	ldi	r22, 0x21	; 33
    4050:	72 e0       	ldi	r23, 0x02	; 2
    4052:	c6 c0       	rjmp	.+396    	; 0x41e0 <__mulsf3+0x1f0>
    4054:	92 30       	cpi	r25, 0x02	; 2
    4056:	41 f4       	brne	.+16     	; 0x4068 <__mulsf3+0x78>
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	9a 85       	ldd	r25, Y+10	; 0x0a
    405c:	8a 89       	ldd	r24, Y+18	; 0x12
    405e:	98 13       	cpse	r25, r24
    4060:	21 e0       	ldi	r18, 0x01	; 1
    4062:	2a 87       	std	Y+10, r18	; 0x0a
    4064:	b7 01       	movw	r22, r14
    4066:	bc c0       	rjmp	.+376    	; 0x41e0 <__mulsf3+0x1f0>
    4068:	82 30       	cpi	r24, 0x02	; 2
    406a:	41 f4       	brne	.+16     	; 0x407c <__mulsf3+0x8c>
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4070:	8a 89       	ldd	r24, Y+18	; 0x12
    4072:	98 13       	cpse	r25, r24
    4074:	21 e0       	ldi	r18, 0x01	; 1
    4076:	2a 8b       	std	Y+18, r18	; 0x12
    4078:	b8 01       	movw	r22, r16
    407a:	b2 c0       	rjmp	.+356    	; 0x41e0 <__mulsf3+0x1f0>
    407c:	cd 84       	ldd	r12, Y+13	; 0x0d
    407e:	de 84       	ldd	r13, Y+14	; 0x0e
    4080:	ef 84       	ldd	r14, Y+15	; 0x0f
    4082:	f8 88       	ldd	r15, Y+16	; 0x10
    4084:	0d 89       	ldd	r16, Y+21	; 0x15
    4086:	1e 89       	ldd	r17, Y+22	; 0x16
    4088:	2f 89       	ldd	r18, Y+23	; 0x17
    408a:	38 8d       	ldd	r19, Y+24	; 0x18
    408c:	88 24       	eor	r8, r8
    408e:	99 24       	eor	r9, r9
    4090:	54 01       	movw	r10, r8
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	50 e0       	ldi	r21, 0x00	; 0
    4096:	60 e0       	ldi	r22, 0x00	; 0
    4098:	70 e0       	ldi	r23, 0x00	; 0
    409a:	44 24       	eor	r4, r4
    409c:	55 24       	eor	r5, r5
    409e:	32 01       	movw	r6, r4
    40a0:	e0 e0       	ldi	r30, 0x00	; 0
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	c6 01       	movw	r24, r12
    40a6:	81 70       	andi	r24, 0x01	; 1
    40a8:	90 70       	andi	r25, 0x00	; 0
    40aa:	89 2b       	or	r24, r25
    40ac:	d9 f0       	breq	.+54     	; 0x40e4 <__mulsf3+0xf4>
    40ae:	80 0e       	add	r8, r16
    40b0:	91 1e       	adc	r9, r17
    40b2:	a2 1e       	adc	r10, r18
    40b4:	b3 1e       	adc	r11, r19
    40b6:	db 01       	movw	r26, r22
    40b8:	ca 01       	movw	r24, r20
    40ba:	84 0d       	add	r24, r4
    40bc:	95 1d       	adc	r25, r5
    40be:	a6 1d       	adc	r26, r6
    40c0:	b7 1d       	adc	r27, r7
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	70 e0       	ldi	r23, 0x00	; 0
    40ca:	80 16       	cp	r8, r16
    40cc:	91 06       	cpc	r9, r17
    40ce:	a2 06       	cpc	r10, r18
    40d0:	b3 06       	cpc	r11, r19
    40d2:	20 f4       	brcc	.+8      	; 0x40dc <__mulsf3+0xec>
    40d4:	41 e0       	ldi	r20, 0x01	; 1
    40d6:	50 e0       	ldi	r21, 0x00	; 0
    40d8:	60 e0       	ldi	r22, 0x00	; 0
    40da:	70 e0       	ldi	r23, 0x00	; 0
    40dc:	48 0f       	add	r20, r24
    40de:	59 1f       	adc	r21, r25
    40e0:	6a 1f       	adc	r22, r26
    40e2:	7b 1f       	adc	r23, r27
    40e4:	44 0c       	add	r4, r4
    40e6:	55 1c       	adc	r5, r5
    40e8:	66 1c       	adc	r6, r6
    40ea:	77 1c       	adc	r7, r7
    40ec:	37 ff       	sbrs	r19, 7
    40ee:	08 c0       	rjmp	.+16     	; 0x4100 <__mulsf3+0x110>
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	a0 e0       	ldi	r26, 0x00	; 0
    40f6:	b0 e0       	ldi	r27, 0x00	; 0
    40f8:	48 2a       	or	r4, r24
    40fa:	59 2a       	or	r5, r25
    40fc:	6a 2a       	or	r6, r26
    40fe:	7b 2a       	or	r7, r27
    4100:	31 96       	adiw	r30, 0x01	; 1
    4102:	e0 32       	cpi	r30, 0x20	; 32
    4104:	f1 05       	cpc	r31, r1
    4106:	49 f0       	breq	.+18     	; 0x411a <__mulsf3+0x12a>
    4108:	00 0f       	add	r16, r16
    410a:	11 1f       	adc	r17, r17
    410c:	22 1f       	adc	r18, r18
    410e:	33 1f       	adc	r19, r19
    4110:	f6 94       	lsr	r15
    4112:	e7 94       	ror	r14
    4114:	d7 94       	ror	r13
    4116:	c7 94       	ror	r12
    4118:	c5 cf       	rjmp	.-118    	; 0x40a4 <__mulsf3+0xb4>
    411a:	8b 89       	ldd	r24, Y+19	; 0x13
    411c:	9c 89       	ldd	r25, Y+20	; 0x14
    411e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4120:	3c 85       	ldd	r19, Y+12	; 0x0c
    4122:	82 0f       	add	r24, r18
    4124:	93 1f       	adc	r25, r19
    4126:	02 96       	adiw	r24, 0x02	; 2
    4128:	9c 8f       	std	Y+28, r25	; 0x1c
    412a:	8b 8f       	std	Y+27, r24	; 0x1b
    412c:	1a 8e       	std	Y+26, r1	; 0x1a
    412e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4130:	8a 89       	ldd	r24, Y+18	; 0x12
    4132:	98 17       	cp	r25, r24
    4134:	11 f0       	breq	.+4      	; 0x413a <__mulsf3+0x14a>
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	8a 8f       	std	Y+26, r24	; 0x1a
    413a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    413c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    413e:	17 c0       	rjmp	.+46     	; 0x416e <__mulsf3+0x17e>
    4140:	ca 01       	movw	r24, r20
    4142:	81 70       	andi	r24, 0x01	; 1
    4144:	90 70       	andi	r25, 0x00	; 0
    4146:	89 2b       	or	r24, r25
    4148:	61 f0       	breq	.+24     	; 0x4162 <__mulsf3+0x172>
    414a:	b6 94       	lsr	r11
    414c:	a7 94       	ror	r10
    414e:	97 94       	ror	r9
    4150:	87 94       	ror	r8
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	a0 e0       	ldi	r26, 0x00	; 0
    4158:	b0 e8       	ldi	r27, 0x80	; 128
    415a:	88 2a       	or	r8, r24
    415c:	99 2a       	or	r9, r25
    415e:	aa 2a       	or	r10, r26
    4160:	bb 2a       	or	r11, r27
    4162:	76 95       	lsr	r23
    4164:	67 95       	ror	r22
    4166:	57 95       	ror	r21
    4168:	47 95       	ror	r20
    416a:	2f 5f       	subi	r18, 0xFF	; 255
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	77 fd       	sbrc	r23, 7
    4170:	e7 cf       	rjmp	.-50     	; 0x4140 <__mulsf3+0x150>
    4172:	c9 01       	movw	r24, r18
    4174:	0b c0       	rjmp	.+22     	; 0x418c <__mulsf3+0x19c>
    4176:	44 0f       	add	r20, r20
    4178:	55 1f       	adc	r21, r21
    417a:	66 1f       	adc	r22, r22
    417c:	77 1f       	adc	r23, r23
    417e:	b7 fc       	sbrc	r11, 7
    4180:	41 60       	ori	r20, 0x01	; 1
    4182:	88 0c       	add	r8, r8
    4184:	99 1c       	adc	r9, r9
    4186:	aa 1c       	adc	r10, r10
    4188:	bb 1c       	adc	r11, r11
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	40 30       	cpi	r20, 0x00	; 0
    418e:	a0 e0       	ldi	r26, 0x00	; 0
    4190:	5a 07       	cpc	r21, r26
    4192:	a0 e0       	ldi	r26, 0x00	; 0
    4194:	6a 07       	cpc	r22, r26
    4196:	a0 e4       	ldi	r26, 0x40	; 64
    4198:	7a 07       	cpc	r23, r26
    419a:	68 f3       	brcs	.-38     	; 0x4176 <__mulsf3+0x186>
    419c:	9c 8f       	std	Y+28, r25	; 0x1c
    419e:	8b 8f       	std	Y+27, r24	; 0x1b
    41a0:	db 01       	movw	r26, r22
    41a2:	ca 01       	movw	r24, r20
    41a4:	8f 77       	andi	r24, 0x7F	; 127
    41a6:	90 70       	andi	r25, 0x00	; 0
    41a8:	a0 70       	andi	r26, 0x00	; 0
    41aa:	b0 70       	andi	r27, 0x00	; 0
    41ac:	80 34       	cpi	r24, 0x40	; 64
    41ae:	91 05       	cpc	r25, r1
    41b0:	a1 05       	cpc	r26, r1
    41b2:	b1 05       	cpc	r27, r1
    41b4:	61 f4       	brne	.+24     	; 0x41ce <__mulsf3+0x1de>
    41b6:	47 fd       	sbrc	r20, 7
    41b8:	0a c0       	rjmp	.+20     	; 0x41ce <__mulsf3+0x1de>
    41ba:	81 14       	cp	r8, r1
    41bc:	91 04       	cpc	r9, r1
    41be:	a1 04       	cpc	r10, r1
    41c0:	b1 04       	cpc	r11, r1
    41c2:	29 f0       	breq	.+10     	; 0x41ce <__mulsf3+0x1de>
    41c4:	40 5c       	subi	r20, 0xC0	; 192
    41c6:	5f 4f       	sbci	r21, 0xFF	; 255
    41c8:	6f 4f       	sbci	r22, 0xFF	; 255
    41ca:	7f 4f       	sbci	r23, 0xFF	; 255
    41cc:	40 78       	andi	r20, 0x80	; 128
    41ce:	4d 8f       	std	Y+29, r20	; 0x1d
    41d0:	5e 8f       	std	Y+30, r21	; 0x1e
    41d2:	6f 8f       	std	Y+31, r22	; 0x1f
    41d4:	78 a3       	std	Y+32, r23	; 0x20
    41d6:	83 e0       	ldi	r24, 0x03	; 3
    41d8:	89 8f       	std	Y+25, r24	; 0x19
    41da:	be 01       	movw	r22, r28
    41dc:	67 5e       	subi	r22, 0xE7	; 231
    41de:	7f 4f       	sbci	r23, 0xFF	; 255
    41e0:	cb 01       	movw	r24, r22
    41e2:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__pack_f>
    41e6:	e0 e1       	ldi	r30, 0x10	; 16
    41e8:	a0 96       	adiw	r28, 0x20	; 32
    41ea:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__epilogue_restores__+0x4>

000041ee <__floatsisf>:
    41ee:	a8 e0       	ldi	r26, 0x08	; 8
    41f0:	b0 e0       	ldi	r27, 0x00	; 0
    41f2:	ed ef       	ldi	r30, 0xFD	; 253
    41f4:	f0 e2       	ldi	r31, 0x20	; 32
    41f6:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__prologue_saves__+0x12>
    41fa:	9b 01       	movw	r18, r22
    41fc:	ac 01       	movw	r20, r24
    41fe:	83 e0       	ldi	r24, 0x03	; 3
    4200:	89 83       	std	Y+1, r24	; 0x01
    4202:	da 01       	movw	r26, r20
    4204:	c9 01       	movw	r24, r18
    4206:	88 27       	eor	r24, r24
    4208:	b7 fd       	sbrc	r27, 7
    420a:	83 95       	inc	r24
    420c:	99 27       	eor	r25, r25
    420e:	aa 27       	eor	r26, r26
    4210:	bb 27       	eor	r27, r27
    4212:	b8 2e       	mov	r11, r24
    4214:	21 15       	cp	r18, r1
    4216:	31 05       	cpc	r19, r1
    4218:	41 05       	cpc	r20, r1
    421a:	51 05       	cpc	r21, r1
    421c:	19 f4       	brne	.+6      	; 0x4224 <__floatsisf+0x36>
    421e:	82 e0       	ldi	r24, 0x02	; 2
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	3a c0       	rjmp	.+116    	; 0x4298 <__floatsisf+0xaa>
    4224:	88 23       	and	r24, r24
    4226:	a9 f0       	breq	.+42     	; 0x4252 <__floatsisf+0x64>
    4228:	20 30       	cpi	r18, 0x00	; 0
    422a:	80 e0       	ldi	r24, 0x00	; 0
    422c:	38 07       	cpc	r19, r24
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	48 07       	cpc	r20, r24
    4232:	80 e8       	ldi	r24, 0x80	; 128
    4234:	58 07       	cpc	r21, r24
    4236:	29 f4       	brne	.+10     	; 0x4242 <__floatsisf+0x54>
    4238:	60 e0       	ldi	r22, 0x00	; 0
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	9f ec       	ldi	r25, 0xCF	; 207
    4240:	30 c0       	rjmp	.+96     	; 0x42a2 <__floatsisf+0xb4>
    4242:	ee 24       	eor	r14, r14
    4244:	ff 24       	eor	r15, r15
    4246:	87 01       	movw	r16, r14
    4248:	e2 1a       	sub	r14, r18
    424a:	f3 0a       	sbc	r15, r19
    424c:	04 0b       	sbc	r16, r20
    424e:	15 0b       	sbc	r17, r21
    4250:	02 c0       	rjmp	.+4      	; 0x4256 <__floatsisf+0x68>
    4252:	79 01       	movw	r14, r18
    4254:	8a 01       	movw	r16, r20
    4256:	8e e1       	ldi	r24, 0x1E	; 30
    4258:	c8 2e       	mov	r12, r24
    425a:	d1 2c       	mov	r13, r1
    425c:	dc 82       	std	Y+4, r13	; 0x04
    425e:	cb 82       	std	Y+3, r12	; 0x03
    4260:	ed 82       	std	Y+5, r14	; 0x05
    4262:	fe 82       	std	Y+6, r15	; 0x06
    4264:	0f 83       	std	Y+7, r16	; 0x07
    4266:	18 87       	std	Y+8, r17	; 0x08
    4268:	c8 01       	movw	r24, r16
    426a:	b7 01       	movw	r22, r14
    426c:	0e 94 a8 21 	call	0x4350	; 0x4350 <__clzsi2>
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	18 16       	cp	r1, r24
    4274:	19 06       	cpc	r1, r25
    4276:	84 f4       	brge	.+32     	; 0x4298 <__floatsisf+0xaa>
    4278:	08 2e       	mov	r0, r24
    427a:	04 c0       	rjmp	.+8      	; 0x4284 <__floatsisf+0x96>
    427c:	ee 0c       	add	r14, r14
    427e:	ff 1c       	adc	r15, r15
    4280:	00 1f       	adc	r16, r16
    4282:	11 1f       	adc	r17, r17
    4284:	0a 94       	dec	r0
    4286:	d2 f7       	brpl	.-12     	; 0x427c <__floatsisf+0x8e>
    4288:	ed 82       	std	Y+5, r14	; 0x05
    428a:	fe 82       	std	Y+6, r15	; 0x06
    428c:	0f 83       	std	Y+7, r16	; 0x07
    428e:	18 87       	std	Y+8, r17	; 0x08
    4290:	c8 1a       	sub	r12, r24
    4292:	d9 0a       	sbc	r13, r25
    4294:	dc 82       	std	Y+4, r13	; 0x04
    4296:	cb 82       	std	Y+3, r12	; 0x03
    4298:	ba 82       	std	Y+2, r11	; 0x02
    429a:	ce 01       	movw	r24, r28
    429c:	01 96       	adiw	r24, 0x01	; 1
    429e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__pack_f>
    42a2:	e9 e0       	ldi	r30, 0x09	; 9
    42a4:	28 96       	adiw	r28, 0x08	; 8
    42a6:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__epilogue_restores__+0x12>

000042aa <__fixsfsi>:
    42aa:	ac e0       	ldi	r26, 0x0C	; 12
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	eb e5       	ldi	r30, 0x5B	; 91
    42b0:	f1 e2       	ldi	r31, 0x21	; 33
    42b2:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__+0x20>
    42b6:	69 83       	std	Y+1, r22	; 0x01
    42b8:	7a 83       	std	Y+2, r23	; 0x02
    42ba:	8b 83       	std	Y+3, r24	; 0x03
    42bc:	9c 83       	std	Y+4, r25	; 0x04
    42be:	be 01       	movw	r22, r28
    42c0:	6b 5f       	subi	r22, 0xFB	; 251
    42c2:	7f 4f       	sbci	r23, 0xFF	; 255
    42c4:	ce 01       	movw	r24, r28
    42c6:	01 96       	adiw	r24, 0x01	; 1
    42c8:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__unpack_f>
    42cc:	8d 81       	ldd	r24, Y+5	; 0x05
    42ce:	82 30       	cpi	r24, 0x02	; 2
    42d0:	a9 f1       	breq	.+106    	; 0x433c <__fixsfsi+0x92>
    42d2:	82 30       	cpi	r24, 0x02	; 2
    42d4:	98 f1       	brcs	.+102    	; 0x433c <__fixsfsi+0x92>
    42d6:	84 30       	cpi	r24, 0x04	; 4
    42d8:	21 f4       	brne	.+8      	; 0x42e2 <__fixsfsi+0x38>
    42da:	8e 81       	ldd	r24, Y+6	; 0x06
    42dc:	88 23       	and	r24, r24
    42de:	59 f4       	brne	.+22     	; 0x42f6 <__fixsfsi+0x4c>
    42e0:	0f c0       	rjmp	.+30     	; 0x4300 <__fixsfsi+0x56>
    42e2:	2f 81       	ldd	r18, Y+7	; 0x07
    42e4:	38 85       	ldd	r19, Y+8	; 0x08
    42e6:	37 fd       	sbrc	r19, 7
    42e8:	29 c0       	rjmp	.+82     	; 0x433c <__fixsfsi+0x92>
    42ea:	6e 81       	ldd	r22, Y+6	; 0x06
    42ec:	2f 31       	cpi	r18, 0x1F	; 31
    42ee:	31 05       	cpc	r19, r1
    42f0:	64 f0       	brlt	.+24     	; 0x430a <__fixsfsi+0x60>
    42f2:	66 23       	and	r22, r22
    42f4:	29 f0       	breq	.+10     	; 0x4300 <__fixsfsi+0x56>
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 e0       	ldi	r20, 0x00	; 0
    42fc:	50 e8       	ldi	r21, 0x80	; 128
    42fe:	22 c0       	rjmp	.+68     	; 0x4344 <__fixsfsi+0x9a>
    4300:	2f ef       	ldi	r18, 0xFF	; 255
    4302:	3f ef       	ldi	r19, 0xFF	; 255
    4304:	4f ef       	ldi	r20, 0xFF	; 255
    4306:	5f e7       	ldi	r21, 0x7F	; 127
    4308:	1d c0       	rjmp	.+58     	; 0x4344 <__fixsfsi+0x9a>
    430a:	8e e1       	ldi	r24, 0x1E	; 30
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	82 1b       	sub	r24, r18
    4310:	93 0b       	sbc	r25, r19
    4312:	29 85       	ldd	r18, Y+9	; 0x09
    4314:	3a 85       	ldd	r19, Y+10	; 0x0a
    4316:	4b 85       	ldd	r20, Y+11	; 0x0b
    4318:	5c 85       	ldd	r21, Y+12	; 0x0c
    431a:	04 c0       	rjmp	.+8      	; 0x4324 <__fixsfsi+0x7a>
    431c:	56 95       	lsr	r21
    431e:	47 95       	ror	r20
    4320:	37 95       	ror	r19
    4322:	27 95       	ror	r18
    4324:	8a 95       	dec	r24
    4326:	d2 f7       	brpl	.-12     	; 0x431c <__fixsfsi+0x72>
    4328:	66 23       	and	r22, r22
    432a:	61 f0       	breq	.+24     	; 0x4344 <__fixsfsi+0x9a>
    432c:	50 95       	com	r21
    432e:	40 95       	com	r20
    4330:	30 95       	com	r19
    4332:	21 95       	neg	r18
    4334:	3f 4f       	sbci	r19, 0xFF	; 255
    4336:	4f 4f       	sbci	r20, 0xFF	; 255
    4338:	5f 4f       	sbci	r21, 0xFF	; 255
    433a:	04 c0       	rjmp	.+8      	; 0x4344 <__fixsfsi+0x9a>
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	40 e0       	ldi	r20, 0x00	; 0
    4342:	50 e0       	ldi	r21, 0x00	; 0
    4344:	ca 01       	movw	r24, r20
    4346:	b9 01       	movw	r22, r18
    4348:	e2 e0       	ldi	r30, 0x02	; 2
    434a:	2c 96       	adiw	r28, 0x0c	; 12
    434c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__epilogue_restores__+0x20>

00004350 <__clzsi2>:
    4350:	ef 92       	push	r14
    4352:	ff 92       	push	r15
    4354:	0f 93       	push	r16
    4356:	1f 93       	push	r17
    4358:	9b 01       	movw	r18, r22
    435a:	ac 01       	movw	r20, r24
    435c:	20 30       	cpi	r18, 0x00	; 0
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	38 07       	cpc	r19, r24
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	48 07       	cpc	r20, r24
    4366:	80 e0       	ldi	r24, 0x00	; 0
    4368:	58 07       	cpc	r21, r24
    436a:	80 f4       	brcc	.+32     	; 0x438c <__clzsi2+0x3c>
    436c:	2f 3f       	cpi	r18, 0xFF	; 255
    436e:	31 05       	cpc	r19, r1
    4370:	41 05       	cpc	r20, r1
    4372:	51 05       	cpc	r21, r1
    4374:	09 f0       	breq	.+2      	; 0x4378 <__clzsi2+0x28>
    4376:	20 f4       	brcc	.+8      	; 0x4380 <__clzsi2+0x30>
    4378:	ee 24       	eor	r14, r14
    437a:	ff 24       	eor	r15, r15
    437c:	87 01       	movw	r16, r14
    437e:	19 c0       	rjmp	.+50     	; 0x43b2 <__clzsi2+0x62>
    4380:	68 e0       	ldi	r22, 0x08	; 8
    4382:	e6 2e       	mov	r14, r22
    4384:	f1 2c       	mov	r15, r1
    4386:	01 2d       	mov	r16, r1
    4388:	11 2d       	mov	r17, r1
    438a:	13 c0       	rjmp	.+38     	; 0x43b2 <__clzsi2+0x62>
    438c:	20 30       	cpi	r18, 0x00	; 0
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	38 07       	cpc	r19, r24
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	48 07       	cpc	r20, r24
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	58 07       	cpc	r21, r24
    439a:	30 f4       	brcc	.+12     	; 0x43a8 <__clzsi2+0x58>
    439c:	90 e1       	ldi	r25, 0x10	; 16
    439e:	e9 2e       	mov	r14, r25
    43a0:	f1 2c       	mov	r15, r1
    43a2:	01 2d       	mov	r16, r1
    43a4:	11 2d       	mov	r17, r1
    43a6:	05 c0       	rjmp	.+10     	; 0x43b2 <__clzsi2+0x62>
    43a8:	88 e1       	ldi	r24, 0x18	; 24
    43aa:	e8 2e       	mov	r14, r24
    43ac:	f1 2c       	mov	r15, r1
    43ae:	01 2d       	mov	r16, r1
    43b0:	11 2d       	mov	r17, r1
    43b2:	80 e2       	ldi	r24, 0x20	; 32
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	a0 e0       	ldi	r26, 0x00	; 0
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	8e 19       	sub	r24, r14
    43bc:	9f 09       	sbc	r25, r15
    43be:	a0 0b       	sbc	r26, r16
    43c0:	b1 0b       	sbc	r27, r17
    43c2:	04 c0       	rjmp	.+8      	; 0x43cc <__clzsi2+0x7c>
    43c4:	56 95       	lsr	r21
    43c6:	47 95       	ror	r20
    43c8:	37 95       	ror	r19
    43ca:	27 95       	ror	r18
    43cc:	ea 94       	dec	r14
    43ce:	d2 f7       	brpl	.-12     	; 0x43c4 <__clzsi2+0x74>
    43d0:	f9 01       	movw	r30, r18
    43d2:	e7 5d       	subi	r30, 0xD7	; 215
    43d4:	fd 4f       	sbci	r31, 0xFD	; 253
    43d6:	20 81       	ld	r18, Z
    43d8:	82 1b       	sub	r24, r18
    43da:	91 09       	sbc	r25, r1
    43dc:	a1 09       	sbc	r26, r1
    43de:	b1 09       	sbc	r27, r1
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	ff 90       	pop	r15
    43e6:	ef 90       	pop	r14
    43e8:	08 95       	ret

000043ea <__pack_f>:
    43ea:	9f 92       	push	r9
    43ec:	af 92       	push	r10
    43ee:	bf 92       	push	r11
    43f0:	cf 92       	push	r12
    43f2:	df 92       	push	r13
    43f4:	ef 92       	push	r14
    43f6:	ff 92       	push	r15
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	ee 24       	eor	r14, r14
    43fe:	ff 24       	eor	r15, r15
    4400:	87 01       	movw	r16, r14
    4402:	fc 01       	movw	r30, r24
    4404:	24 81       	ldd	r18, Z+4	; 0x04
    4406:	35 81       	ldd	r19, Z+5	; 0x05
    4408:	46 81       	ldd	r20, Z+6	; 0x06
    440a:	57 81       	ldd	r21, Z+7	; 0x07
    440c:	91 80       	ldd	r9, Z+1	; 0x01
    440e:	80 81       	ld	r24, Z
    4410:	82 30       	cpi	r24, 0x02	; 2
    4412:	10 f4       	brcc	.+4      	; 0x4418 <__pack_f+0x2e>
    4414:	40 61       	ori	r20, 0x10	; 16
    4416:	a2 c0       	rjmp	.+324    	; 0x455c <__pack_f+0x172>
    4418:	84 30       	cpi	r24, 0x04	; 4
    441a:	09 f4       	brne	.+2      	; 0x441e <__pack_f+0x34>
    441c:	9b c0       	rjmp	.+310    	; 0x4554 <__pack_f+0x16a>
    441e:	82 30       	cpi	r24, 0x02	; 2
    4420:	29 f4       	brne	.+10     	; 0x442c <__pack_f+0x42>
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e0       	ldi	r20, 0x00	; 0
    4428:	50 e0       	ldi	r21, 0x00	; 0
    442a:	05 c0       	rjmp	.+10     	; 0x4436 <__pack_f+0x4c>
    442c:	21 15       	cp	r18, r1
    442e:	31 05       	cpc	r19, r1
    4430:	41 05       	cpc	r20, r1
    4432:	51 05       	cpc	r21, r1
    4434:	19 f4       	brne	.+6      	; 0x443c <__pack_f+0x52>
    4436:	e0 e0       	ldi	r30, 0x00	; 0
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	92 c0       	rjmp	.+292    	; 0x4560 <__pack_f+0x176>
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	6f ef       	ldi	r22, 0xFF	; 255
    4442:	82 38       	cpi	r24, 0x82	; 130
    4444:	96 07       	cpc	r25, r22
    4446:	0c f0       	brlt	.+2      	; 0x444a <__pack_f+0x60>
    4448:	5a c0       	rjmp	.+180    	; 0x44fe <__pack_f+0x114>
    444a:	62 e8       	ldi	r22, 0x82	; 130
    444c:	7f ef       	ldi	r23, 0xFF	; 255
    444e:	68 1b       	sub	r22, r24
    4450:	79 0b       	sbc	r23, r25
    4452:	6a 31       	cpi	r22, 0x1A	; 26
    4454:	71 05       	cpc	r23, r1
    4456:	2c f0       	brlt	.+10     	; 0x4462 <__pack_f+0x78>
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	40 e0       	ldi	r20, 0x00	; 0
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	2a c0       	rjmp	.+84     	; 0x44b6 <__pack_f+0xcc>
    4462:	aa 24       	eor	r10, r10
    4464:	bb 24       	eor	r11, r11
    4466:	65 01       	movw	r12, r10
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	a0 e0       	ldi	r26, 0x00	; 0
    446e:	b0 e0       	ldi	r27, 0x00	; 0
    4470:	06 2e       	mov	r0, r22
    4472:	04 c0       	rjmp	.+8      	; 0x447c <__pack_f+0x92>
    4474:	88 0f       	add	r24, r24
    4476:	99 1f       	adc	r25, r25
    4478:	aa 1f       	adc	r26, r26
    447a:	bb 1f       	adc	r27, r27
    447c:	0a 94       	dec	r0
    447e:	d2 f7       	brpl	.-12     	; 0x4474 <__pack_f+0x8a>
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	a1 09       	sbc	r26, r1
    4484:	b1 09       	sbc	r27, r1
    4486:	82 23       	and	r24, r18
    4488:	93 23       	and	r25, r19
    448a:	a4 23       	and	r26, r20
    448c:	b5 23       	and	r27, r21
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	a1 05       	cpc	r26, r1
    4492:	b1 05       	cpc	r27, r1
    4494:	29 f0       	breq	.+10     	; 0x44a0 <__pack_f+0xb6>
    4496:	71 e0       	ldi	r23, 0x01	; 1
    4498:	a7 2e       	mov	r10, r23
    449a:	b1 2c       	mov	r11, r1
    449c:	c1 2c       	mov	r12, r1
    449e:	d1 2c       	mov	r13, r1
    44a0:	04 c0       	rjmp	.+8      	; 0x44aa <__pack_f+0xc0>
    44a2:	56 95       	lsr	r21
    44a4:	47 95       	ror	r20
    44a6:	37 95       	ror	r19
    44a8:	27 95       	ror	r18
    44aa:	6a 95       	dec	r22
    44ac:	d2 f7       	brpl	.-12     	; 0x44a2 <__pack_f+0xb8>
    44ae:	2a 29       	or	r18, r10
    44b0:	3b 29       	or	r19, r11
    44b2:	4c 29       	or	r20, r12
    44b4:	5d 29       	or	r21, r13
    44b6:	da 01       	movw	r26, r20
    44b8:	c9 01       	movw	r24, r18
    44ba:	8f 77       	andi	r24, 0x7F	; 127
    44bc:	90 70       	andi	r25, 0x00	; 0
    44be:	a0 70       	andi	r26, 0x00	; 0
    44c0:	b0 70       	andi	r27, 0x00	; 0
    44c2:	80 34       	cpi	r24, 0x40	; 64
    44c4:	91 05       	cpc	r25, r1
    44c6:	a1 05       	cpc	r26, r1
    44c8:	b1 05       	cpc	r27, r1
    44ca:	39 f4       	brne	.+14     	; 0x44da <__pack_f+0xf0>
    44cc:	27 ff       	sbrs	r18, 7
    44ce:	09 c0       	rjmp	.+18     	; 0x44e2 <__pack_f+0xf8>
    44d0:	20 5c       	subi	r18, 0xC0	; 192
    44d2:	3f 4f       	sbci	r19, 0xFF	; 255
    44d4:	4f 4f       	sbci	r20, 0xFF	; 255
    44d6:	5f 4f       	sbci	r21, 0xFF	; 255
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <__pack_f+0xf8>
    44da:	21 5c       	subi	r18, 0xC1	; 193
    44dc:	3f 4f       	sbci	r19, 0xFF	; 255
    44de:	4f 4f       	sbci	r20, 0xFF	; 255
    44e0:	5f 4f       	sbci	r21, 0xFF	; 255
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	20 30       	cpi	r18, 0x00	; 0
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	36 07       	cpc	r19, r22
    44ec:	60 e0       	ldi	r22, 0x00	; 0
    44ee:	46 07       	cpc	r20, r22
    44f0:	60 e4       	ldi	r22, 0x40	; 64
    44f2:	56 07       	cpc	r21, r22
    44f4:	10 f0       	brcs	.+4      	; 0x44fa <__pack_f+0x110>
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	fc 01       	movw	r30, r24
    44fc:	23 c0       	rjmp	.+70     	; 0x4544 <__pack_f+0x15a>
    44fe:	80 38       	cpi	r24, 0x80	; 128
    4500:	91 05       	cpc	r25, r1
    4502:	44 f5       	brge	.+80     	; 0x4554 <__pack_f+0x16a>
    4504:	fc 01       	movw	r30, r24
    4506:	e1 58       	subi	r30, 0x81	; 129
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	da 01       	movw	r26, r20
    450c:	c9 01       	movw	r24, r18
    450e:	8f 77       	andi	r24, 0x7F	; 127
    4510:	90 70       	andi	r25, 0x00	; 0
    4512:	a0 70       	andi	r26, 0x00	; 0
    4514:	b0 70       	andi	r27, 0x00	; 0
    4516:	80 34       	cpi	r24, 0x40	; 64
    4518:	91 05       	cpc	r25, r1
    451a:	a1 05       	cpc	r26, r1
    451c:	b1 05       	cpc	r27, r1
    451e:	39 f4       	brne	.+14     	; 0x452e <__pack_f+0x144>
    4520:	27 ff       	sbrs	r18, 7
    4522:	09 c0       	rjmp	.+18     	; 0x4536 <__pack_f+0x14c>
    4524:	20 5c       	subi	r18, 0xC0	; 192
    4526:	3f 4f       	sbci	r19, 0xFF	; 255
    4528:	4f 4f       	sbci	r20, 0xFF	; 255
    452a:	5f 4f       	sbci	r21, 0xFF	; 255
    452c:	04 c0       	rjmp	.+8      	; 0x4536 <__pack_f+0x14c>
    452e:	21 5c       	subi	r18, 0xC1	; 193
    4530:	3f 4f       	sbci	r19, 0xFF	; 255
    4532:	4f 4f       	sbci	r20, 0xFF	; 255
    4534:	5f 4f       	sbci	r21, 0xFF	; 255
    4536:	57 ff       	sbrs	r21, 7
    4538:	05 c0       	rjmp	.+10     	; 0x4544 <__pack_f+0x15a>
    453a:	56 95       	lsr	r21
    453c:	47 95       	ror	r20
    453e:	37 95       	ror	r19
    4540:	27 95       	ror	r18
    4542:	31 96       	adiw	r30, 0x01	; 1
    4544:	87 e0       	ldi	r24, 0x07	; 7
    4546:	56 95       	lsr	r21
    4548:	47 95       	ror	r20
    454a:	37 95       	ror	r19
    454c:	27 95       	ror	r18
    454e:	8a 95       	dec	r24
    4550:	d1 f7       	brne	.-12     	; 0x4546 <__pack_f+0x15c>
    4552:	06 c0       	rjmp	.+12     	; 0x4560 <__pack_f+0x176>
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	40 e0       	ldi	r20, 0x00	; 0
    455a:	50 e0       	ldi	r21, 0x00	; 0
    455c:	ef ef       	ldi	r30, 0xFF	; 255
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	e2 2e       	mov	r14, r18
    4562:	f3 2e       	mov	r15, r19
    4564:	94 2f       	mov	r25, r20
    4566:	9f 77       	andi	r25, 0x7F	; 127
    4568:	80 2f       	mov	r24, r16
    456a:	80 78       	andi	r24, 0x80	; 128
    456c:	89 2b       	or	r24, r25
    456e:	9e 2f       	mov	r25, r30
    4570:	97 95       	ror	r25
    4572:	99 27       	eor	r25, r25
    4574:	97 95       	ror	r25
    4576:	8f 77       	andi	r24, 0x7F	; 127
    4578:	08 2f       	mov	r16, r24
    457a:	09 2b       	or	r16, r25
    457c:	9e 2f       	mov	r25, r30
    457e:	96 95       	lsr	r25
    4580:	81 2f       	mov	r24, r17
    4582:	80 78       	andi	r24, 0x80	; 128
    4584:	89 2b       	or	r24, r25
    4586:	97 94       	ror	r9
    4588:	99 24       	eor	r9, r9
    458a:	97 94       	ror	r9
    458c:	8f 77       	andi	r24, 0x7F	; 127
    458e:	18 2f       	mov	r17, r24
    4590:	19 29       	or	r17, r9
    4592:	c8 01       	movw	r24, r16
    4594:	b7 01       	movw	r22, r14
    4596:	1f 91       	pop	r17
    4598:	0f 91       	pop	r16
    459a:	ff 90       	pop	r15
    459c:	ef 90       	pop	r14
    459e:	df 90       	pop	r13
    45a0:	cf 90       	pop	r12
    45a2:	bf 90       	pop	r11
    45a4:	af 90       	pop	r10
    45a6:	9f 90       	pop	r9
    45a8:	08 95       	ret

000045aa <__unpack_f>:
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	fc 01       	movw	r30, r24
    45b0:	db 01       	movw	r26, r22
    45b2:	20 81       	ld	r18, Z
    45b4:	31 81       	ldd	r19, Z+1	; 0x01
    45b6:	92 81       	ldd	r25, Z+2	; 0x02
    45b8:	49 2f       	mov	r20, r25
    45ba:	4f 77       	andi	r20, 0x7F	; 127
    45bc:	50 e0       	ldi	r21, 0x00	; 0
    45be:	99 1f       	adc	r25, r25
    45c0:	99 27       	eor	r25, r25
    45c2:	99 1f       	adc	r25, r25
    45c4:	83 81       	ldd	r24, Z+3	; 0x03
    45c6:	e8 2f       	mov	r30, r24
    45c8:	ee 0f       	add	r30, r30
    45ca:	e9 2b       	or	r30, r25
    45cc:	6e 2f       	mov	r22, r30
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	88 1f       	adc	r24, r24
    45d2:	88 27       	eor	r24, r24
    45d4:	88 1f       	adc	r24, r24
    45d6:	ed 01       	movw	r28, r26
    45d8:	89 83       	std	Y+1, r24	; 0x01
    45da:	ee 23       	and	r30, r30
    45dc:	71 f5       	brne	.+92     	; 0x463a <__unpack_f+0x90>
    45de:	21 15       	cp	r18, r1
    45e0:	31 05       	cpc	r19, r1
    45e2:	41 05       	cpc	r20, r1
    45e4:	51 05       	cpc	r21, r1
    45e6:	11 f4       	brne	.+4      	; 0x45ec <__unpack_f+0x42>
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	2f c0       	rjmp	.+94     	; 0x464a <__unpack_f+0xa0>
    45ec:	6e 57       	subi	r22, 0x7E	; 126
    45ee:	70 40       	sbci	r23, 0x00	; 0
    45f0:	fd 01       	movw	r30, r26
    45f2:	73 83       	std	Z+3, r23	; 0x03
    45f4:	62 83       	std	Z+2, r22	; 0x02
    45f6:	67 e0       	ldi	r22, 0x07	; 7
    45f8:	22 0f       	add	r18, r18
    45fa:	33 1f       	adc	r19, r19
    45fc:	44 1f       	adc	r20, r20
    45fe:	55 1f       	adc	r21, r21
    4600:	6a 95       	dec	r22
    4602:	d1 f7       	brne	.-12     	; 0x45f8 <__unpack_f+0x4e>
    4604:	83 e0       	ldi	r24, 0x03	; 3
    4606:	8c 93       	st	X, r24
    4608:	0a c0       	rjmp	.+20     	; 0x461e <__unpack_f+0x74>
    460a:	22 0f       	add	r18, r18
    460c:	33 1f       	adc	r19, r19
    460e:	44 1f       	adc	r20, r20
    4610:	55 1f       	adc	r21, r21
    4612:	ed 01       	movw	r28, r26
    4614:	8a 81       	ldd	r24, Y+2	; 0x02
    4616:	9b 81       	ldd	r25, Y+3	; 0x03
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	9b 83       	std	Y+3, r25	; 0x03
    461c:	8a 83       	std	Y+2, r24	; 0x02
    461e:	20 30       	cpi	r18, 0x00	; 0
    4620:	e0 e0       	ldi	r30, 0x00	; 0
    4622:	3e 07       	cpc	r19, r30
    4624:	e0 e0       	ldi	r30, 0x00	; 0
    4626:	4e 07       	cpc	r20, r30
    4628:	e0 e4       	ldi	r30, 0x40	; 64
    462a:	5e 07       	cpc	r21, r30
    462c:	70 f3       	brcs	.-36     	; 0x460a <__unpack_f+0x60>
    462e:	ed 01       	movw	r28, r26
    4630:	2c 83       	std	Y+4, r18	; 0x04
    4632:	3d 83       	std	Y+5, r19	; 0x05
    4634:	4e 83       	std	Y+6, r20	; 0x06
    4636:	5f 83       	std	Y+7, r21	; 0x07
    4638:	25 c0       	rjmp	.+74     	; 0x4684 <__unpack_f+0xda>
    463a:	ef 3f       	cpi	r30, 0xFF	; 255
    463c:	79 f4       	brne	.+30     	; 0x465c <__unpack_f+0xb2>
    463e:	21 15       	cp	r18, r1
    4640:	31 05       	cpc	r19, r1
    4642:	41 05       	cpc	r20, r1
    4644:	51 05       	cpc	r21, r1
    4646:	19 f4       	brne	.+6      	; 0x464e <__unpack_f+0xa4>
    4648:	84 e0       	ldi	r24, 0x04	; 4
    464a:	8c 93       	st	X, r24
    464c:	1b c0       	rjmp	.+54     	; 0x4684 <__unpack_f+0xda>
    464e:	44 ff       	sbrs	r20, 4
    4650:	03 c0       	rjmp	.+6      	; 0x4658 <__unpack_f+0xae>
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	8c 93       	st	X, r24
    4656:	11 c0       	rjmp	.+34     	; 0x467a <__unpack_f+0xd0>
    4658:	1c 92       	st	X, r1
    465a:	0f c0       	rjmp	.+30     	; 0x467a <__unpack_f+0xd0>
    465c:	6f 57       	subi	r22, 0x7F	; 127
    465e:	70 40       	sbci	r23, 0x00	; 0
    4660:	ed 01       	movw	r28, r26
    4662:	7b 83       	std	Y+3, r23	; 0x03
    4664:	6a 83       	std	Y+2, r22	; 0x02
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	8c 93       	st	X, r24
    466a:	87 e0       	ldi	r24, 0x07	; 7
    466c:	22 0f       	add	r18, r18
    466e:	33 1f       	adc	r19, r19
    4670:	44 1f       	adc	r20, r20
    4672:	55 1f       	adc	r21, r21
    4674:	8a 95       	dec	r24
    4676:	d1 f7       	brne	.-12     	; 0x466c <__unpack_f+0xc2>
    4678:	50 64       	ori	r21, 0x40	; 64
    467a:	fd 01       	movw	r30, r26
    467c:	24 83       	std	Z+4, r18	; 0x04
    467e:	35 83       	std	Z+5, r19	; 0x05
    4680:	46 83       	std	Z+6, r20	; 0x06
    4682:	57 83       	std	Z+7, r21	; 0x07
    4684:	df 91       	pop	r29
    4686:	cf 91       	pop	r28
    4688:	08 95       	ret

0000468a <__udivmodhi4>:
    468a:	aa 1b       	sub	r26, r26
    468c:	bb 1b       	sub	r27, r27
    468e:	51 e1       	ldi	r21, 0x11	; 17
    4690:	07 c0       	rjmp	.+14     	; 0x46a0 <__udivmodhi4_ep>

00004692 <__udivmodhi4_loop>:
    4692:	aa 1f       	adc	r26, r26
    4694:	bb 1f       	adc	r27, r27
    4696:	a6 17       	cp	r26, r22
    4698:	b7 07       	cpc	r27, r23
    469a:	10 f0       	brcs	.+4      	; 0x46a0 <__udivmodhi4_ep>
    469c:	a6 1b       	sub	r26, r22
    469e:	b7 0b       	sbc	r27, r23

000046a0 <__udivmodhi4_ep>:
    46a0:	88 1f       	adc	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	5a 95       	dec	r21
    46a6:	a9 f7       	brne	.-22     	; 0x4692 <__udivmodhi4_loop>
    46a8:	80 95       	com	r24
    46aa:	90 95       	com	r25
    46ac:	bc 01       	movw	r22, r24
    46ae:	cd 01       	movw	r24, r26
    46b0:	08 95       	ret

000046b2 <__divmodhi4>:
    46b2:	97 fb       	bst	r25, 7
    46b4:	09 2e       	mov	r0, r25
    46b6:	07 26       	eor	r0, r23
    46b8:	0a d0       	rcall	.+20     	; 0x46ce <__divmodhi4_neg1>
    46ba:	77 fd       	sbrc	r23, 7
    46bc:	04 d0       	rcall	.+8      	; 0x46c6 <__divmodhi4_neg2>
    46be:	e5 df       	rcall	.-54     	; 0x468a <__udivmodhi4>
    46c0:	06 d0       	rcall	.+12     	; 0x46ce <__divmodhi4_neg1>
    46c2:	00 20       	and	r0, r0
    46c4:	1a f4       	brpl	.+6      	; 0x46cc <__divmodhi4_exit>

000046c6 <__divmodhi4_neg2>:
    46c6:	70 95       	com	r23
    46c8:	61 95       	neg	r22
    46ca:	7f 4f       	sbci	r23, 0xFF	; 255

000046cc <__divmodhi4_exit>:
    46cc:	08 95       	ret

000046ce <__divmodhi4_neg1>:
    46ce:	f6 f7       	brtc	.-4      	; 0x46cc <__divmodhi4_exit>
    46d0:	90 95       	com	r25
    46d2:	81 95       	neg	r24
    46d4:	9f 4f       	sbci	r25, 0xFF	; 255
    46d6:	08 95       	ret

000046d8 <__prologue_saves__>:
    46d8:	2f 92       	push	r2
    46da:	3f 92       	push	r3
    46dc:	4f 92       	push	r4
    46de:	5f 92       	push	r5
    46e0:	6f 92       	push	r6
    46e2:	7f 92       	push	r7
    46e4:	8f 92       	push	r8
    46e6:	9f 92       	push	r9
    46e8:	af 92       	push	r10
    46ea:	bf 92       	push	r11
    46ec:	cf 92       	push	r12
    46ee:	df 92       	push	r13
    46f0:	ef 92       	push	r14
    46f2:	ff 92       	push	r15
    46f4:	0f 93       	push	r16
    46f6:	1f 93       	push	r17
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	cd b7       	in	r28, 0x3d	; 61
    46fe:	de b7       	in	r29, 0x3e	; 62
    4700:	ca 1b       	sub	r28, r26
    4702:	db 0b       	sbc	r29, r27
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	19 94       	eijmp

00004710 <__epilogue_restores__>:
    4710:	2a 88       	ldd	r2, Y+18	; 0x12
    4712:	39 88       	ldd	r3, Y+17	; 0x11
    4714:	48 88       	ldd	r4, Y+16	; 0x10
    4716:	5f 84       	ldd	r5, Y+15	; 0x0f
    4718:	6e 84       	ldd	r6, Y+14	; 0x0e
    471a:	7d 84       	ldd	r7, Y+13	; 0x0d
    471c:	8c 84       	ldd	r8, Y+12	; 0x0c
    471e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4720:	aa 84       	ldd	r10, Y+10	; 0x0a
    4722:	b9 84       	ldd	r11, Y+9	; 0x09
    4724:	c8 84       	ldd	r12, Y+8	; 0x08
    4726:	df 80       	ldd	r13, Y+7	; 0x07
    4728:	ee 80       	ldd	r14, Y+6	; 0x06
    472a:	fd 80       	ldd	r15, Y+5	; 0x05
    472c:	0c 81       	ldd	r16, Y+4	; 0x04
    472e:	1b 81       	ldd	r17, Y+3	; 0x03
    4730:	aa 81       	ldd	r26, Y+2	; 0x02
    4732:	b9 81       	ldd	r27, Y+1	; 0x01
    4734:	ce 0f       	add	r28, r30
    4736:	d1 1d       	adc	r29, r1
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	ed 01       	movw	r28, r26
    4744:	08 95       	ret
    4746:	f5 d0       	rcall	.+490    	; 0x4932 <__fp_pscA>
    4748:	58 f0       	brcs	.+22     	; 0x4760 <__epilogue_restores__+0x50>
    474a:	80 e8       	ldi	r24, 0x80	; 128
    474c:	91 e0       	ldi	r25, 0x01	; 1
    474e:	09 f4       	brne	.+2      	; 0x4752 <__epilogue_restores__+0x42>
    4750:	9e ef       	ldi	r25, 0xFE	; 254
    4752:	f6 d0       	rcall	.+492    	; 0x4940 <__fp_pscB>
    4754:	28 f0       	brcs	.+10     	; 0x4760 <__epilogue_restores__+0x50>
    4756:	40 e8       	ldi	r20, 0x80	; 128
    4758:	51 e0       	ldi	r21, 0x01	; 1
    475a:	59 f4       	brne	.+22     	; 0x4772 <atan2+0xe>
    475c:	5e ef       	ldi	r21, 0xFE	; 254
    475e:	09 c0       	rjmp	.+18     	; 0x4772 <atan2+0xe>
    4760:	c0 c0       	rjmp	.+384    	; 0x48e2 <__fp_nan>
    4762:	28 c1       	rjmp	.+592    	; 0x49b4 <__fp_zero>

00004764 <atan2>:
    4764:	e9 2f       	mov	r30, r25
    4766:	e0 78       	andi	r30, 0x80	; 128
    4768:	03 d1       	rcall	.+518    	; 0x4970 <__fp_split3>
    476a:	68 f3       	brcs	.-38     	; 0x4746 <__epilogue_restores__+0x36>
    476c:	09 2e       	mov	r0, r25
    476e:	05 2a       	or	r0, r21
    4770:	c1 f3       	breq	.-16     	; 0x4762 <__epilogue_restores__+0x52>
    4772:	26 17       	cp	r18, r22
    4774:	37 07       	cpc	r19, r23
    4776:	48 07       	cpc	r20, r24
    4778:	59 07       	cpc	r21, r25
    477a:	38 f0       	brcs	.+14     	; 0x478a <atan2+0x26>
    477c:	0e 2e       	mov	r0, r30
    477e:	07 f8       	bld	r0, 7
    4780:	e0 25       	eor	r30, r0
    4782:	69 f0       	breq	.+26     	; 0x479e <atan2+0x3a>
    4784:	e0 25       	eor	r30, r0
    4786:	e0 64       	ori	r30, 0x40	; 64
    4788:	0a c0       	rjmp	.+20     	; 0x479e <atan2+0x3a>
    478a:	ef 63       	ori	r30, 0x3F	; 63
    478c:	07 f8       	bld	r0, 7
    478e:	00 94       	com	r0
    4790:	07 fa       	bst	r0, 7
    4792:	db 01       	movw	r26, r22
    4794:	b9 01       	movw	r22, r18
    4796:	9d 01       	movw	r18, r26
    4798:	dc 01       	movw	r26, r24
    479a:	ca 01       	movw	r24, r20
    479c:	ad 01       	movw	r20, r26
    479e:	ef 93       	push	r30
    47a0:	41 d0       	rcall	.+130    	; 0x4824 <__divsf3_pse>
    47a2:	d5 d0       	rcall	.+426    	; 0x494e <__fp_round>
    47a4:	0a d0       	rcall	.+20     	; 0x47ba <atan>
    47a6:	5f 91       	pop	r21
    47a8:	55 23       	and	r21, r21
    47aa:	31 f0       	breq	.+12     	; 0x47b8 <atan2+0x54>
    47ac:	2b ed       	ldi	r18, 0xDB	; 219
    47ae:	3f e0       	ldi	r19, 0x0F	; 15
    47b0:	49 e4       	ldi	r20, 0x49	; 73
    47b2:	50 fd       	sbrc	r21, 0
    47b4:	49 ec       	ldi	r20, 0xC9	; 201
    47b6:	71 c1       	rjmp	.+738    	; 0x4a9a <__addsf3>
    47b8:	08 95       	ret

000047ba <atan>:
    47ba:	df 93       	push	r29
    47bc:	dd 27       	eor	r29, r29
    47be:	b9 2f       	mov	r27, r25
    47c0:	bf 77       	andi	r27, 0x7F	; 127
    47c2:	40 e8       	ldi	r20, 0x80	; 128
    47c4:	5f e3       	ldi	r21, 0x3F	; 63
    47c6:	16 16       	cp	r1, r22
    47c8:	17 06       	cpc	r1, r23
    47ca:	48 07       	cpc	r20, r24
    47cc:	5b 07       	cpc	r21, r27
    47ce:	10 f4       	brcc	.+4      	; 0x47d4 <atan+0x1a>
    47d0:	d9 2f       	mov	r29, r25
    47d2:	f7 d0       	rcall	.+494    	; 0x49c2 <inverse>
    47d4:	9f 93       	push	r25
    47d6:	8f 93       	push	r24
    47d8:	7f 93       	push	r23
    47da:	6f 93       	push	r22
    47dc:	5a d1       	rcall	.+692    	; 0x4a92 <square>
    47de:	ee e4       	ldi	r30, 0x4E	; 78
    47e0:	f1 e0       	ldi	r31, 0x01	; 1
    47e2:	82 d0       	rcall	.+260    	; 0x48e8 <__fp_powser>
    47e4:	b4 d0       	rcall	.+360    	; 0x494e <__fp_round>
    47e6:	2f 91       	pop	r18
    47e8:	3f 91       	pop	r19
    47ea:	4f 91       	pop	r20
    47ec:	5f 91       	pop	r21
    47ee:	fa d0       	rcall	.+500    	; 0x49e4 <__mulsf3x>
    47f0:	dd 23       	and	r29, r29
    47f2:	49 f0       	breq	.+18     	; 0x4806 <atan+0x4c>
    47f4:	90 58       	subi	r25, 0x80	; 128
    47f6:	a2 ea       	ldi	r26, 0xA2	; 162
    47f8:	2a ed       	ldi	r18, 0xDA	; 218
    47fa:	3f e0       	ldi	r19, 0x0F	; 15
    47fc:	49 ec       	ldi	r20, 0xC9	; 201
    47fe:	5f e3       	ldi	r21, 0x3F	; 63
    4800:	d0 78       	andi	r29, 0x80	; 128
    4802:	5d 27       	eor	r21, r29
    4804:	5b d1       	rcall	.+694    	; 0x4abc <__addsf3x>
    4806:	df 91       	pop	r29
    4808:	a2 c0       	rjmp	.+324    	; 0x494e <__fp_round>
    480a:	9a d0       	rcall	.+308    	; 0x4940 <__fp_pscB>
    480c:	40 f0       	brcs	.+16     	; 0x481e <atan+0x64>
    480e:	91 d0       	rcall	.+290    	; 0x4932 <__fp_pscA>
    4810:	30 f0       	brcs	.+12     	; 0x481e <atan+0x64>
    4812:	21 f4       	brne	.+8      	; 0x481c <atan+0x62>
    4814:	5f 3f       	cpi	r21, 0xFF	; 255
    4816:	19 f0       	breq	.+6      	; 0x481e <atan+0x64>
    4818:	5e c0       	rjmp	.+188    	; 0x48d6 <__fp_inf>
    481a:	51 11       	cpse	r21, r1
    481c:	cc c0       	rjmp	.+408    	; 0x49b6 <__fp_szero>
    481e:	61 c0       	rjmp	.+194    	; 0x48e2 <__fp_nan>

00004820 <__divsf3x>:
    4820:	a7 d0       	rcall	.+334    	; 0x4970 <__fp_split3>
    4822:	98 f3       	brcs	.-26     	; 0x480a <atan+0x50>

00004824 <__divsf3_pse>:
    4824:	99 23       	and	r25, r25
    4826:	c9 f3       	breq	.-14     	; 0x481a <atan+0x60>
    4828:	55 23       	and	r21, r21
    482a:	b1 f3       	breq	.-20     	; 0x4818 <atan+0x5e>
    482c:	95 1b       	sub	r25, r21
    482e:	55 0b       	sbc	r21, r21
    4830:	bb 27       	eor	r27, r27
    4832:	aa 27       	eor	r26, r26
    4834:	62 17       	cp	r22, r18
    4836:	73 07       	cpc	r23, r19
    4838:	84 07       	cpc	r24, r20
    483a:	38 f0       	brcs	.+14     	; 0x484a <__divsf3_pse+0x26>
    483c:	9f 5f       	subi	r25, 0xFF	; 255
    483e:	5f 4f       	sbci	r21, 0xFF	; 255
    4840:	22 0f       	add	r18, r18
    4842:	33 1f       	adc	r19, r19
    4844:	44 1f       	adc	r20, r20
    4846:	aa 1f       	adc	r26, r26
    4848:	a9 f3       	breq	.-22     	; 0x4834 <__divsf3_pse+0x10>
    484a:	33 d0       	rcall	.+102    	; 0x48b2 <__divsf3_pse+0x8e>
    484c:	0e 2e       	mov	r0, r30
    484e:	3a f0       	brmi	.+14     	; 0x485e <__divsf3_pse+0x3a>
    4850:	e0 e8       	ldi	r30, 0x80	; 128
    4852:	30 d0       	rcall	.+96     	; 0x48b4 <__divsf3_pse+0x90>
    4854:	91 50       	subi	r25, 0x01	; 1
    4856:	50 40       	sbci	r21, 0x00	; 0
    4858:	e6 95       	lsr	r30
    485a:	00 1c       	adc	r0, r0
    485c:	ca f7       	brpl	.-14     	; 0x4850 <__divsf3_pse+0x2c>
    485e:	29 d0       	rcall	.+82     	; 0x48b2 <__divsf3_pse+0x8e>
    4860:	fe 2f       	mov	r31, r30
    4862:	27 d0       	rcall	.+78     	; 0x48b2 <__divsf3_pse+0x8e>
    4864:	66 0f       	add	r22, r22
    4866:	77 1f       	adc	r23, r23
    4868:	88 1f       	adc	r24, r24
    486a:	bb 1f       	adc	r27, r27
    486c:	26 17       	cp	r18, r22
    486e:	37 07       	cpc	r19, r23
    4870:	48 07       	cpc	r20, r24
    4872:	ab 07       	cpc	r26, r27
    4874:	b0 e8       	ldi	r27, 0x80	; 128
    4876:	09 f0       	breq	.+2      	; 0x487a <__divsf3_pse+0x56>
    4878:	bb 0b       	sbc	r27, r27
    487a:	80 2d       	mov	r24, r0
    487c:	bf 01       	movw	r22, r30
    487e:	ff 27       	eor	r31, r31
    4880:	93 58       	subi	r25, 0x83	; 131
    4882:	5f 4f       	sbci	r21, 0xFF	; 255
    4884:	2a f0       	brmi	.+10     	; 0x4890 <__divsf3_pse+0x6c>
    4886:	9e 3f       	cpi	r25, 0xFE	; 254
    4888:	51 05       	cpc	r21, r1
    488a:	68 f0       	brcs	.+26     	; 0x48a6 <__divsf3_pse+0x82>
    488c:	24 c0       	rjmp	.+72     	; 0x48d6 <__fp_inf>
    488e:	93 c0       	rjmp	.+294    	; 0x49b6 <__fp_szero>
    4890:	5f 3f       	cpi	r21, 0xFF	; 255
    4892:	ec f3       	brlt	.-6      	; 0x488e <__divsf3_pse+0x6a>
    4894:	98 3e       	cpi	r25, 0xE8	; 232
    4896:	dc f3       	brlt	.-10     	; 0x488e <__divsf3_pse+0x6a>
    4898:	86 95       	lsr	r24
    489a:	77 95       	ror	r23
    489c:	67 95       	ror	r22
    489e:	b7 95       	ror	r27
    48a0:	f7 95       	ror	r31
    48a2:	9f 5f       	subi	r25, 0xFF	; 255
    48a4:	c9 f7       	brne	.-14     	; 0x4898 <__divsf3_pse+0x74>
    48a6:	88 0f       	add	r24, r24
    48a8:	91 1d       	adc	r25, r1
    48aa:	96 95       	lsr	r25
    48ac:	87 95       	ror	r24
    48ae:	97 f9       	bld	r25, 7
    48b0:	08 95       	ret
    48b2:	e1 e0       	ldi	r30, 0x01	; 1
    48b4:	66 0f       	add	r22, r22
    48b6:	77 1f       	adc	r23, r23
    48b8:	88 1f       	adc	r24, r24
    48ba:	bb 1f       	adc	r27, r27
    48bc:	62 17       	cp	r22, r18
    48be:	73 07       	cpc	r23, r19
    48c0:	84 07       	cpc	r24, r20
    48c2:	ba 07       	cpc	r27, r26
    48c4:	20 f0       	brcs	.+8      	; 0x48ce <__divsf3_pse+0xaa>
    48c6:	62 1b       	sub	r22, r18
    48c8:	73 0b       	sbc	r23, r19
    48ca:	84 0b       	sbc	r24, r20
    48cc:	ba 0b       	sbc	r27, r26
    48ce:	ee 1f       	adc	r30, r30
    48d0:	88 f7       	brcc	.-30     	; 0x48b4 <__divsf3_pse+0x90>
    48d2:	e0 95       	com	r30
    48d4:	08 95       	ret

000048d6 <__fp_inf>:
    48d6:	97 f9       	bld	r25, 7
    48d8:	9f 67       	ori	r25, 0x7F	; 127
    48da:	80 e8       	ldi	r24, 0x80	; 128
    48dc:	70 e0       	ldi	r23, 0x00	; 0
    48de:	60 e0       	ldi	r22, 0x00	; 0
    48e0:	08 95       	ret

000048e2 <__fp_nan>:
    48e2:	9f ef       	ldi	r25, 0xFF	; 255
    48e4:	80 ec       	ldi	r24, 0xC0	; 192
    48e6:	08 95       	ret

000048e8 <__fp_powser>:
    48e8:	df 93       	push	r29
    48ea:	cf 93       	push	r28
    48ec:	1f 93       	push	r17
    48ee:	0f 93       	push	r16
    48f0:	ff 92       	push	r15
    48f2:	ef 92       	push	r14
    48f4:	df 92       	push	r13
    48f6:	7b 01       	movw	r14, r22
    48f8:	8c 01       	movw	r16, r24
    48fa:	68 94       	set
    48fc:	05 c0       	rjmp	.+10     	; 0x4908 <__fp_powser+0x20>
    48fe:	da 2e       	mov	r13, r26
    4900:	ef 01       	movw	r28, r30
    4902:	70 d0       	rcall	.+224    	; 0x49e4 <__mulsf3x>
    4904:	fe 01       	movw	r30, r28
    4906:	e8 94       	clt
    4908:	a5 91       	lpm	r26, Z+
    490a:	25 91       	lpm	r18, Z+
    490c:	35 91       	lpm	r19, Z+
    490e:	45 91       	lpm	r20, Z+
    4910:	55 91       	lpm	r21, Z+
    4912:	ae f3       	brts	.-22     	; 0x48fe <__fp_powser+0x16>
    4914:	ef 01       	movw	r28, r30
    4916:	d2 d0       	rcall	.+420    	; 0x4abc <__addsf3x>
    4918:	fe 01       	movw	r30, r28
    491a:	97 01       	movw	r18, r14
    491c:	a8 01       	movw	r20, r16
    491e:	da 94       	dec	r13
    4920:	79 f7       	brne	.-34     	; 0x4900 <__fp_powser+0x18>
    4922:	df 90       	pop	r13
    4924:	ef 90       	pop	r14
    4926:	ff 90       	pop	r15
    4928:	0f 91       	pop	r16
    492a:	1f 91       	pop	r17
    492c:	cf 91       	pop	r28
    492e:	df 91       	pop	r29
    4930:	08 95       	ret

00004932 <__fp_pscA>:
    4932:	00 24       	eor	r0, r0
    4934:	0a 94       	dec	r0
    4936:	16 16       	cp	r1, r22
    4938:	17 06       	cpc	r1, r23
    493a:	18 06       	cpc	r1, r24
    493c:	09 06       	cpc	r0, r25
    493e:	08 95       	ret

00004940 <__fp_pscB>:
    4940:	00 24       	eor	r0, r0
    4942:	0a 94       	dec	r0
    4944:	12 16       	cp	r1, r18
    4946:	13 06       	cpc	r1, r19
    4948:	14 06       	cpc	r1, r20
    494a:	05 06       	cpc	r0, r21
    494c:	08 95       	ret

0000494e <__fp_round>:
    494e:	09 2e       	mov	r0, r25
    4950:	03 94       	inc	r0
    4952:	00 0c       	add	r0, r0
    4954:	11 f4       	brne	.+4      	; 0x495a <__fp_round+0xc>
    4956:	88 23       	and	r24, r24
    4958:	52 f0       	brmi	.+20     	; 0x496e <__fp_round+0x20>
    495a:	bb 0f       	add	r27, r27
    495c:	40 f4       	brcc	.+16     	; 0x496e <__fp_round+0x20>
    495e:	bf 2b       	or	r27, r31
    4960:	11 f4       	brne	.+4      	; 0x4966 <__fp_round+0x18>
    4962:	60 ff       	sbrs	r22, 0
    4964:	04 c0       	rjmp	.+8      	; 0x496e <__fp_round+0x20>
    4966:	6f 5f       	subi	r22, 0xFF	; 255
    4968:	7f 4f       	sbci	r23, 0xFF	; 255
    496a:	8f 4f       	sbci	r24, 0xFF	; 255
    496c:	9f 4f       	sbci	r25, 0xFF	; 255
    496e:	08 95       	ret

00004970 <__fp_split3>:
    4970:	57 fd       	sbrc	r21, 7
    4972:	90 58       	subi	r25, 0x80	; 128
    4974:	44 0f       	add	r20, r20
    4976:	55 1f       	adc	r21, r21
    4978:	59 f0       	breq	.+22     	; 0x4990 <__fp_splitA+0x10>
    497a:	5f 3f       	cpi	r21, 0xFF	; 255
    497c:	71 f0       	breq	.+28     	; 0x499a <__fp_splitA+0x1a>
    497e:	47 95       	ror	r20

00004980 <__fp_splitA>:
    4980:	88 0f       	add	r24, r24
    4982:	97 fb       	bst	r25, 7
    4984:	99 1f       	adc	r25, r25
    4986:	61 f0       	breq	.+24     	; 0x49a0 <__fp_splitA+0x20>
    4988:	9f 3f       	cpi	r25, 0xFF	; 255
    498a:	79 f0       	breq	.+30     	; 0x49aa <__fp_splitA+0x2a>
    498c:	87 95       	ror	r24
    498e:	08 95       	ret
    4990:	12 16       	cp	r1, r18
    4992:	13 06       	cpc	r1, r19
    4994:	14 06       	cpc	r1, r20
    4996:	55 1f       	adc	r21, r21
    4998:	f2 cf       	rjmp	.-28     	; 0x497e <__fp_split3+0xe>
    499a:	46 95       	lsr	r20
    499c:	f1 df       	rcall	.-30     	; 0x4980 <__fp_splitA>
    499e:	08 c0       	rjmp	.+16     	; 0x49b0 <__fp_splitA+0x30>
    49a0:	16 16       	cp	r1, r22
    49a2:	17 06       	cpc	r1, r23
    49a4:	18 06       	cpc	r1, r24
    49a6:	99 1f       	adc	r25, r25
    49a8:	f1 cf       	rjmp	.-30     	; 0x498c <__fp_splitA+0xc>
    49aa:	86 95       	lsr	r24
    49ac:	71 05       	cpc	r23, r1
    49ae:	61 05       	cpc	r22, r1
    49b0:	08 94       	sec
    49b2:	08 95       	ret

000049b4 <__fp_zero>:
    49b4:	e8 94       	clt

000049b6 <__fp_szero>:
    49b6:	bb 27       	eor	r27, r27
    49b8:	66 27       	eor	r22, r22
    49ba:	77 27       	eor	r23, r23
    49bc:	cb 01       	movw	r24, r22
    49be:	97 f9       	bld	r25, 7
    49c0:	08 95       	ret

000049c2 <inverse>:
    49c2:	9b 01       	movw	r18, r22
    49c4:	ac 01       	movw	r20, r24
    49c6:	60 e0       	ldi	r22, 0x00	; 0
    49c8:	70 e0       	ldi	r23, 0x00	; 0
    49ca:	80 e8       	ldi	r24, 0x80	; 128
    49cc:	9f e3       	ldi	r25, 0x3F	; 63
    49ce:	c9 c0       	rjmp	.+402    	; 0x4b62 <__divsf3>
    49d0:	b0 df       	rcall	.-160    	; 0x4932 <__fp_pscA>
    49d2:	28 f0       	brcs	.+10     	; 0x49de <inverse+0x1c>
    49d4:	b5 df       	rcall	.-150    	; 0x4940 <__fp_pscB>
    49d6:	18 f0       	brcs	.+6      	; 0x49de <inverse+0x1c>
    49d8:	95 23       	and	r25, r21
    49da:	09 f0       	breq	.+2      	; 0x49de <inverse+0x1c>
    49dc:	7c cf       	rjmp	.-264    	; 0x48d6 <__fp_inf>
    49de:	81 cf       	rjmp	.-254    	; 0x48e2 <__fp_nan>
    49e0:	11 24       	eor	r1, r1
    49e2:	e9 cf       	rjmp	.-46     	; 0x49b6 <__fp_szero>

000049e4 <__mulsf3x>:
    49e4:	c5 df       	rcall	.-118    	; 0x4970 <__fp_split3>
    49e6:	a0 f3       	brcs	.-24     	; 0x49d0 <inverse+0xe>

000049e8 <__mulsf3_pse>:
    49e8:	95 9f       	mul	r25, r21
    49ea:	d1 f3       	breq	.-12     	; 0x49e0 <inverse+0x1e>
    49ec:	95 0f       	add	r25, r21
    49ee:	50 e0       	ldi	r21, 0x00	; 0
    49f0:	55 1f       	adc	r21, r21
    49f2:	62 9f       	mul	r22, r18
    49f4:	f0 01       	movw	r30, r0
    49f6:	72 9f       	mul	r23, r18
    49f8:	bb 27       	eor	r27, r27
    49fa:	f0 0d       	add	r31, r0
    49fc:	b1 1d       	adc	r27, r1
    49fe:	63 9f       	mul	r22, r19
    4a00:	aa 27       	eor	r26, r26
    4a02:	f0 0d       	add	r31, r0
    4a04:	b1 1d       	adc	r27, r1
    4a06:	aa 1f       	adc	r26, r26
    4a08:	64 9f       	mul	r22, r20
    4a0a:	66 27       	eor	r22, r22
    4a0c:	b0 0d       	add	r27, r0
    4a0e:	a1 1d       	adc	r26, r1
    4a10:	66 1f       	adc	r22, r22
    4a12:	82 9f       	mul	r24, r18
    4a14:	22 27       	eor	r18, r18
    4a16:	b0 0d       	add	r27, r0
    4a18:	a1 1d       	adc	r26, r1
    4a1a:	62 1f       	adc	r22, r18
    4a1c:	73 9f       	mul	r23, r19
    4a1e:	b0 0d       	add	r27, r0
    4a20:	a1 1d       	adc	r26, r1
    4a22:	62 1f       	adc	r22, r18
    4a24:	83 9f       	mul	r24, r19
    4a26:	a0 0d       	add	r26, r0
    4a28:	61 1d       	adc	r22, r1
    4a2a:	22 1f       	adc	r18, r18
    4a2c:	74 9f       	mul	r23, r20
    4a2e:	33 27       	eor	r19, r19
    4a30:	a0 0d       	add	r26, r0
    4a32:	61 1d       	adc	r22, r1
    4a34:	23 1f       	adc	r18, r19
    4a36:	84 9f       	mul	r24, r20
    4a38:	60 0d       	add	r22, r0
    4a3a:	21 1d       	adc	r18, r1
    4a3c:	82 2f       	mov	r24, r18
    4a3e:	76 2f       	mov	r23, r22
    4a40:	6a 2f       	mov	r22, r26
    4a42:	11 24       	eor	r1, r1
    4a44:	9f 57       	subi	r25, 0x7F	; 127
    4a46:	50 40       	sbci	r21, 0x00	; 0
    4a48:	8a f0       	brmi	.+34     	; 0x4a6c <__mulsf3_pse+0x84>
    4a4a:	e1 f0       	breq	.+56     	; 0x4a84 <__mulsf3_pse+0x9c>
    4a4c:	88 23       	and	r24, r24
    4a4e:	4a f0       	brmi	.+18     	; 0x4a62 <__mulsf3_pse+0x7a>
    4a50:	ee 0f       	add	r30, r30
    4a52:	ff 1f       	adc	r31, r31
    4a54:	bb 1f       	adc	r27, r27
    4a56:	66 1f       	adc	r22, r22
    4a58:	77 1f       	adc	r23, r23
    4a5a:	88 1f       	adc	r24, r24
    4a5c:	91 50       	subi	r25, 0x01	; 1
    4a5e:	50 40       	sbci	r21, 0x00	; 0
    4a60:	a9 f7       	brne	.-22     	; 0x4a4c <__mulsf3_pse+0x64>
    4a62:	9e 3f       	cpi	r25, 0xFE	; 254
    4a64:	51 05       	cpc	r21, r1
    4a66:	70 f0       	brcs	.+28     	; 0x4a84 <__mulsf3_pse+0x9c>
    4a68:	36 cf       	rjmp	.-404    	; 0x48d6 <__fp_inf>
    4a6a:	a5 cf       	rjmp	.-182    	; 0x49b6 <__fp_szero>
    4a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    4a6e:	ec f3       	brlt	.-6      	; 0x4a6a <__mulsf3_pse+0x82>
    4a70:	98 3e       	cpi	r25, 0xE8	; 232
    4a72:	dc f3       	brlt	.-10     	; 0x4a6a <__mulsf3_pse+0x82>
    4a74:	86 95       	lsr	r24
    4a76:	77 95       	ror	r23
    4a78:	67 95       	ror	r22
    4a7a:	b7 95       	ror	r27
    4a7c:	f7 95       	ror	r31
    4a7e:	e7 95       	ror	r30
    4a80:	9f 5f       	subi	r25, 0xFF	; 255
    4a82:	c1 f7       	brne	.-16     	; 0x4a74 <__mulsf3_pse+0x8c>
    4a84:	fe 2b       	or	r31, r30
    4a86:	88 0f       	add	r24, r24
    4a88:	91 1d       	adc	r25, r1
    4a8a:	96 95       	lsr	r25
    4a8c:	87 95       	ror	r24
    4a8e:	97 f9       	bld	r25, 7
    4a90:	08 95       	ret

00004a92 <square>:
    4a92:	9b 01       	movw	r18, r22
    4a94:	ac 01       	movw	r20, r24
    4a96:	ac ca       	rjmp	.-2728   	; 0x3ff0 <__mulsf3>

00004a98 <__subsf3>:
    4a98:	50 58       	subi	r21, 0x80	; 128

00004a9a <__addsf3>:
    4a9a:	bb 27       	eor	r27, r27
    4a9c:	aa 27       	eor	r26, r26
    4a9e:	0e d0       	rcall	.+28     	; 0x4abc <__addsf3x>
    4aa0:	56 cf       	rjmp	.-340    	; 0x494e <__fp_round>
    4aa2:	47 df       	rcall	.-370    	; 0x4932 <__fp_pscA>
    4aa4:	30 f0       	brcs	.+12     	; 0x4ab2 <__addsf3+0x18>
    4aa6:	4c df       	rcall	.-360    	; 0x4940 <__fp_pscB>
    4aa8:	20 f0       	brcs	.+8      	; 0x4ab2 <__addsf3+0x18>
    4aaa:	31 f4       	brne	.+12     	; 0x4ab8 <__addsf3+0x1e>
    4aac:	9f 3f       	cpi	r25, 0xFF	; 255
    4aae:	11 f4       	brne	.+4      	; 0x4ab4 <__addsf3+0x1a>
    4ab0:	1e f4       	brtc	.+6      	; 0x4ab8 <__addsf3+0x1e>
    4ab2:	17 cf       	rjmp	.-466    	; 0x48e2 <__fp_nan>
    4ab4:	0e f4       	brtc	.+2      	; 0x4ab8 <__addsf3+0x1e>
    4ab6:	e0 95       	com	r30
    4ab8:	e7 fb       	bst	r30, 7
    4aba:	0d cf       	rjmp	.-486    	; 0x48d6 <__fp_inf>

00004abc <__addsf3x>:
    4abc:	e9 2f       	mov	r30, r25
    4abe:	58 df       	rcall	.-336    	; 0x4970 <__fp_split3>
    4ac0:	80 f3       	brcs	.-32     	; 0x4aa2 <__addsf3+0x8>
    4ac2:	ba 17       	cp	r27, r26
    4ac4:	62 07       	cpc	r22, r18
    4ac6:	73 07       	cpc	r23, r19
    4ac8:	84 07       	cpc	r24, r20
    4aca:	95 07       	cpc	r25, r21
    4acc:	18 f0       	brcs	.+6      	; 0x4ad4 <__addsf3x+0x18>
    4ace:	71 f4       	brne	.+28     	; 0x4aec <__addsf3x+0x30>
    4ad0:	9e f5       	brtc	.+102    	; 0x4b38 <__addsf3x+0x7c>
    4ad2:	70 cf       	rjmp	.-288    	; 0x49b4 <__fp_zero>
    4ad4:	0e f4       	brtc	.+2      	; 0x4ad8 <__addsf3x+0x1c>
    4ad6:	e0 95       	com	r30
    4ad8:	0b 2e       	mov	r0, r27
    4ada:	ba 2f       	mov	r27, r26
    4adc:	a0 2d       	mov	r26, r0
    4ade:	0b 01       	movw	r0, r22
    4ae0:	b9 01       	movw	r22, r18
    4ae2:	90 01       	movw	r18, r0
    4ae4:	0c 01       	movw	r0, r24
    4ae6:	ca 01       	movw	r24, r20
    4ae8:	a0 01       	movw	r20, r0
    4aea:	11 24       	eor	r1, r1
    4aec:	ff 27       	eor	r31, r31
    4aee:	59 1b       	sub	r21, r25
    4af0:	99 f0       	breq	.+38     	; 0x4b18 <__addsf3x+0x5c>
    4af2:	59 3f       	cpi	r21, 0xF9	; 249
    4af4:	50 f4       	brcc	.+20     	; 0x4b0a <__addsf3x+0x4e>
    4af6:	50 3e       	cpi	r21, 0xE0	; 224
    4af8:	68 f1       	brcs	.+90     	; 0x4b54 <__addsf3x+0x98>
    4afa:	1a 16       	cp	r1, r26
    4afc:	f0 40       	sbci	r31, 0x00	; 0
    4afe:	a2 2f       	mov	r26, r18
    4b00:	23 2f       	mov	r18, r19
    4b02:	34 2f       	mov	r19, r20
    4b04:	44 27       	eor	r20, r20
    4b06:	58 5f       	subi	r21, 0xF8	; 248
    4b08:	f3 cf       	rjmp	.-26     	; 0x4af0 <__addsf3x+0x34>
    4b0a:	46 95       	lsr	r20
    4b0c:	37 95       	ror	r19
    4b0e:	27 95       	ror	r18
    4b10:	a7 95       	ror	r26
    4b12:	f0 40       	sbci	r31, 0x00	; 0
    4b14:	53 95       	inc	r21
    4b16:	c9 f7       	brne	.-14     	; 0x4b0a <__addsf3x+0x4e>
    4b18:	7e f4       	brtc	.+30     	; 0x4b38 <__addsf3x+0x7c>
    4b1a:	1f 16       	cp	r1, r31
    4b1c:	ba 0b       	sbc	r27, r26
    4b1e:	62 0b       	sbc	r22, r18
    4b20:	73 0b       	sbc	r23, r19
    4b22:	84 0b       	sbc	r24, r20
    4b24:	ba f0       	brmi	.+46     	; 0x4b54 <__addsf3x+0x98>
    4b26:	91 50       	subi	r25, 0x01	; 1
    4b28:	a1 f0       	breq	.+40     	; 0x4b52 <__addsf3x+0x96>
    4b2a:	ff 0f       	add	r31, r31
    4b2c:	bb 1f       	adc	r27, r27
    4b2e:	66 1f       	adc	r22, r22
    4b30:	77 1f       	adc	r23, r23
    4b32:	88 1f       	adc	r24, r24
    4b34:	c2 f7       	brpl	.-16     	; 0x4b26 <__addsf3x+0x6a>
    4b36:	0e c0       	rjmp	.+28     	; 0x4b54 <__addsf3x+0x98>
    4b38:	ba 0f       	add	r27, r26
    4b3a:	62 1f       	adc	r22, r18
    4b3c:	73 1f       	adc	r23, r19
    4b3e:	84 1f       	adc	r24, r20
    4b40:	48 f4       	brcc	.+18     	; 0x4b54 <__addsf3x+0x98>
    4b42:	87 95       	ror	r24
    4b44:	77 95       	ror	r23
    4b46:	67 95       	ror	r22
    4b48:	b7 95       	ror	r27
    4b4a:	f7 95       	ror	r31
    4b4c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b4e:	08 f0       	brcs	.+2      	; 0x4b52 <__addsf3x+0x96>
    4b50:	b3 cf       	rjmp	.-154    	; 0x4ab8 <__addsf3+0x1e>
    4b52:	93 95       	inc	r25
    4b54:	88 0f       	add	r24, r24
    4b56:	08 f0       	brcs	.+2      	; 0x4b5a <__addsf3x+0x9e>
    4b58:	99 27       	eor	r25, r25
    4b5a:	ee 0f       	add	r30, r30
    4b5c:	97 95       	ror	r25
    4b5e:	87 95       	ror	r24
    4b60:	08 95       	ret

00004b62 <__divsf3>:
    4b62:	5e de       	rcall	.-836    	; 0x4820 <__divsf3x>
    4b64:	f4 ce       	rjmp	.-536    	; 0x494e <__fp_round>

00004b66 <_exit>:
    4b66:	ff cf       	rjmp	.-2      	; 0x4b66 <_exit>
