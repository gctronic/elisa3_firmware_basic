
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800200  00004638  000046cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  0080031e  0080031e  000047ea  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  000047ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  00006ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007155  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d2d  00000000  00000000  00007335  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a51  00000000  00000000  00008062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001417  00000000  00000000  0000bab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c02  00000000  00000000  0000ceca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000590  00000000  00000000  00010acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cc3  00000000  00000000  0001105c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014ca  00000000  00000000  00011d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000106  00000000  00000000  000131e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000200  00000000  00000000  000132ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__vector_10>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 47 14 	jmp	0x288e	; 0x288e <__vector_13>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__vector_25>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_29>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      80:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_32>
      84:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_33>
      88:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      8c:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_35>
      90:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      94:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      98:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      9c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a8:	0c 94 0c 03 	jmp	0x618	; 0x618 <__vector_42>
      ac:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_43>
      b0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      b4:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_45>
      b8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      bc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      cc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      dc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e8 e3       	ldi	r30, 0x38	; 56
     12a:	f6 e4       	ldi	r31, 0x46	; 70
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	ae 31       	cpi	r26, 0x1E	; 30
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	14 e0       	ldi	r17, 0x04	; 4
     13a:	ae e1       	ldi	r26, 0x1E	; 30
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a2 31       	cpi	r26, 0x12	; 18
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 b1 08 	call	0x1162	; 0x1162 <main>
     14c:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	86 60       	ori	r24, 0x06	; 6
     15c:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     15e:	ac e7       	ldi	r26, 0x7C	; 124
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	8c 91       	ld	r24, X
     164:	80 64       	ori	r24, 0x40	; 64
     166:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     168:	80 81       	ld	r24, Z
     16a:	80 62       	ori	r24, 0x20	; 32
     16c:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     16e:	ab e7       	ldi	r26, 0x7B	; 123
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	8c 91       	ld	r24, X
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     178:	80 81       	ld	r24, Z
     17a:	88 60       	ori	r24, 0x08	; 8
     17c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     184:	80 81       	ld	r24, Z
     186:	80 64       	ori	r24, 0x40	; 64
     188:	80 83       	st	Z, r24

}
     18a:	08 95       	ret

0000018c <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	0b b6       	in	r0, 0x3b	; 59
     196:	0f 92       	push	r0
     198:	11 24       	eor	r1, r1
     19a:	2f 93       	push	r18
     19c:	3f 93       	push	r19
     19e:	4f 93       	push	r20
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;		// this variable is used to have basic delays based on the adc interrupt timing (one interrupt every 104 us)
     1a8:	80 91 d9 03 	lds	r24, 0x03D9
     1ac:	90 91 da 03 	lds	r25, 0x03DA
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	90 93 da 03 	sts	0x03DA, r25
     1b6:	80 93 d9 03 	sts	0x03D9, r24

	int value = ADCL;			// must be read first!!
     1ba:	20 91 78 00 	lds	r18, 0x0078
     1be:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     1c0:	40 91 79 00 	lds	r20, 0x0079
     1c4:	94 2f       	mov	r25, r20
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	28 2b       	or	r18, r24
     1ca:	39 2b       	or	r19, r25

	// save the last data
	switch(adcSaveDataTo) {
     1cc:	80 91 59 03 	lds	r24, 0x0359
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <__vector_29+0x4a>
     1d4:	0b c1       	rjmp	.+534    	; 0x3ec <__vector_29+0x260>
     1d6:	83 30       	cpi	r24, 0x03	; 3
     1d8:	08 f4       	brcc	.+2      	; 0x1dc <__vector_29+0x50>
     1da:	44 c0       	rjmp	.+136    	; 0x264 <__vector_29+0xd8>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	09 f4       	brne	.+2      	; 0x1e2 <__vector_29+0x56>
     1e0:	f8 c0       	rjmp	.+496    	; 0x3d2 <__vector_29+0x246>
     1e2:	84 30       	cpi	r24, 0x04	; 4
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <__vector_29+0x5c>
     1e6:	ce c0       	rjmp	.+412    	; 0x384 <__vector_29+0x1f8>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     1e8:	80 91 5a 03 	lds	r24, 0x035A
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <__vector_29+0x66>
     1f0:	b5 c0       	rjmp	.+362    	; 0x35c <__vector_29+0x1d0>
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	08 f0       	brcs	.+2      	; 0x1f8 <__vector_29+0x6c>
     1f6:	4f c0       	rjmp	.+158    	; 0x296 <__vector_29+0x10a>
     1f8:	88 23       	and	r24, r24
     1fa:	09 f0       	breq	.+2      	; 0x1fe <__vector_29+0x72>
     1fc:	8a c0       	rjmp	.+276    	; 0x312 <__vector_29+0x186>

		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
     1fe:	80 91 24 03 	lds	r24, 0x0324
     202:	86 95       	lsr	r24
     204:	80 93 23 03 	sts	0x0323, r24
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
     208:	80 91 5b 03 	lds	r24, 0x035B
     20c:	88 23       	and	r24, r24
     20e:	09 f0       	breq	.+2      	; 0x212 <__vector_29+0x86>
     210:	1b c1       	rjmp	.+566    	; 0x448 <__vector_29+0x2bc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 59 03 	sts	0x0359, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 5a 03 	sts	0x035A, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     21e:	90 91 23 03 	lds	r25, 0x0323
     222:	98 30       	cpi	r25, 0x08	; 8
     224:	08 f0       	brcs	.+2      	; 0x228 <__vector_29+0x9c>
     226:	6a c0       	rjmp	.+212    	; 0x2fc <__vector_29+0x170>
		ADCSRB &= ~(1 << MUX5);
     228:	90 91 7b 00 	lds	r25, 0x007B
     22c:	97 7f       	andi	r25, 0xF7	; 247
     22e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
     232:	90 91 23 03 	lds	r25, 0x0323
     236:	90 5c       	subi	r25, 0xC0	; 192
     238:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	21 f4       	brne	.+8      	; 0x248 <__vector_29+0xbc>
		PORTJ &= 0xF0;
		PORTA = 0x00;
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
     246:	12 b8       	out	0x02, r1	; 2

	}

//	PORTB |= (1 << 7);

}
     248:	ff 91       	pop	r31
     24a:	ef 91       	pop	r30
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	4f 91       	pop	r20
     252:	3f 91       	pop	r19
     254:	2f 91       	pop	r18
     256:	0f 90       	pop	r0
     258:	0b be       	out	0x3b, r0	; 59
     25a:	0f 90       	pop	r0
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	0f 90       	pop	r0
     260:	1f 90       	pop	r1
     262:	18 95       	reti

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     264:	88 23       	and	r24, r24
     266:	09 f0       	breq	.+2      	; 0x26a <__vector_29+0xde>
     268:	65 c0       	rjmp	.+202    	; 0x334 <__vector_29+0x1a8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     26a:	80 91 24 03 	lds	r24, 0x0324
     26e:	8e 30       	cpi	r24, 0x0E	; 14
     270:	09 f4       	brne	.+2      	; 0x274 <__vector_29+0xe8>
     272:	f8 c0       	rjmp	.+496    	; 0x464 <__vector_29+0x2d8>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     274:	e8 2f       	mov	r30, r24
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	ee 0f       	add	r30, r30
     27a:	ff 1f       	adc	r31, r31
     27c:	e7 5d       	subi	r30, 0xD7	; 215
     27e:	fc 4f       	sbci	r31, 0xFC	; 252
     280:	31 83       	std	Z+1, r19	; 0x01
     282:	20 83       	st	Z, r18
			}
			currentProx++;
     284:	8f 5f       	subi	r24, 0xFF	; 255
     286:	80 93 24 03 	sts	0x0324, r24
			if(currentProx > 23) {
     28a:	88 31       	cpi	r24, 0x18	; 24
     28c:	08 f4       	brcc	.+2      	; 0x290 <__vector_29+0x104>
     28e:	ac cf       	rjmp	.-168    	; 0x1e8 <__vector_29+0x5c>
				currentProx = 0;
     290:	10 92 24 03 	sts	0x0324, r1
     294:	a9 cf       	rjmp	.-174    	; 0x1e8 <__vector_29+0x5c>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	09 f4       	brne	.+2      	; 0x29c <__vector_29+0x110>
     29a:	88 c0       	rjmp	.+272    	; 0x3ac <__vector_29+0x220>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	09 f0       	breq	.+2      	; 0x2a2 <__vector_29+0x116>
     2a0:	be cf       	rjmp	.-132    	; 0x21e <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
     2a2:	90 91 26 03 	lds	r25, 0x0326
     2a6:	90 93 23 03 	sts	0x0323, r25
			rightChannelPhase = rightMotorPhase;	
     2aa:	90 91 27 03 	lds	r25, 0x0327
     2ae:	90 93 5b 03 	sts	0x035B, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     2b2:	90 91 5c 03 	lds	r25, 0x035C
     2b6:	99 23       	and	r25, r25
     2b8:	09 f0       	breq	.+2      	; 0x2bc <__vector_29+0x130>
     2ba:	c3 c0       	rjmp	.+390    	; 0x442 <__vector_29+0x2b6>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	80 93 59 03 	sts	0x0359, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     2c2:	10 92 5a 03 	sts	0x035A, r1

			if(currentProx==14 && measBattery==1) {
     2c6:	20 91 24 03 	lds	r18, 0x0324
     2ca:	2e 30       	cpi	r18, 0x0E	; 14
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <__vector_29+0x144>
     2ce:	c4 c0       	rjmp	.+392    	; 0x458 <__vector_29+0x2cc>
				measBattery=2;
				PORTC |= (1 << 6);	// sense enable on
			}

			if(currentProx & 0x01) {	// if active phase
     2d0:	82 2f       	mov	r24, r18
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	20 ff       	sbrs	r18, 0
     2d6:	ae c0       	rjmp	.+348    	; 0x434 <__vector_29+0x2a8>
				if(currentProx < 16) {
     2d8:	20 31       	cpi	r18, 0x10	; 16
     2da:	08 f0       	brcs	.+2      	; 0x2de <__vector_29+0x152>
     2dc:	9b c0       	rjmp	.+310    	; 0x414 <__vector_29+0x288>
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     2de:	2e 30       	cpi	r18, 0x0E	; 14
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <__vector_29+0x158>
     2e2:	d2 c0       	rjmp	.+420    	; 0x488 <__vector_29+0x2fc>
						measBattery=2;
						PORTC |= (1 << 6);	// sense enable on
					} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
     2e4:	26 95       	lsr	r18
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__vector_29+0x164>
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	2a 95       	dec	r18
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <__vector_29+0x160>
     2f4:	82 b9       	out	0x02, r24	; 2
     2f6:	80 91 5a 03 	lds	r24, 0x035A
     2fa:	91 cf       	rjmp	.-222    	; 0x21e <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     2fc:	90 91 7b 00 	lds	r25, 0x007B
     300:	98 60       	ori	r25, 0x08	; 8
     302:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
     306:	90 91 23 03 	lds	r25, 0x0323
     30a:	98 5c       	subi	r25, 0xC8	; 200
     30c:	90 93 7c 00 	sts	0x007C, r25
     310:	95 cf       	rjmp	.-214    	; 0x23c <__vector_29+0xb0>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	09 f0       	breq	.+2      	; 0x318 <__vector_29+0x18c>
     316:	83 cf       	rjmp	.-250    	; 0x21e <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
     318:	80 91 25 03 	lds	r24, 0x0325
     31c:	80 93 23 03 	sts	0x0323, r24
			leftChannelPhase = leftMotorPhase;
     320:	80 91 28 03 	lds	r24, 0x0328
     324:	80 93 5c 03 	sts	0x035C, r24
			adcSaveDataTo = SAVE_TO_PROX;
     328:	10 92 59 03 	sts	0x0359, r1
			adcSamplingState = 2;
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	80 93 5a 03 	sts	0x035A, r24
			break;
     332:	75 cf       	rjmp	.-278    	; 0x21e <__vector_29+0x92>

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	09 f0       	breq	.+2      	; 0x33a <__vector_29+0x1ae>
     338:	57 cf       	rjmp	.-338    	; 0x1e8 <__vector_29+0x5c>
				currentProx = 0;
			}
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     33a:	80 91 64 03 	lds	r24, 0x0364
     33e:	90 91 65 03 	lds	r25, 0x0365
     342:	82 0f       	add	r24, r18
     344:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	90 93 65 03 	sts	0x0365, r25
     34e:	80 93 64 03 	sts	0x0364, r24
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     352:	80 91 5a 03 	lds	r24, 0x035A
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	09 f0       	breq	.+2      	; 0x35c <__vector_29+0x1d0>
     35a:	4b cf       	rjmp	.-362    	; 0x1f2 <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
     35c:	80 91 26 03 	lds	r24, 0x0326
     360:	80 93 23 03 	sts	0x0323, r24
			rightChannelPhase = rightMotorPhase;
     364:	80 91 27 03 	lds	r24, 0x0327
     368:	80 93 5b 03 	sts	0x035B, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     36c:	80 91 5c 03 	lds	r24, 0x035C
     370:	88 23       	and	r24, r24
     372:	09 f0       	breq	.+2      	; 0x376 <__vector_29+0x1ea>
     374:	6d c0       	rjmp	.+218    	; 0x450 <__vector_29+0x2c4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	80 93 59 03 	sts	0x0359, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	80 93 5a 03 	sts	0x035A, r24
			break;
     382:	4d cf       	rjmp	.-358    	; 0x21e <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     384:	80 91 72 03 	lds	r24, 0x0372
     388:	90 91 73 03 	lds	r25, 0x0373
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	90 93 73 03 	sts	0x0373, r25
     394:	80 93 72 03 	sts	0x0372, r24
			num_lvel_samples_avg++;
     398:	80 91 6a 03 	lds	r24, 0x036A
     39c:	90 91 6b 03 	lds	r25, 0x036B
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	90 93 6b 03 	sts	0x036B, r25
     3a6:	80 93 6a 03 	sts	0x036A, r24
			break;
     3aa:	1e cf       	rjmp	.-452    	; 0x1e8 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
     3ac:	80 91 25 03 	lds	r24, 0x0325
     3b0:	80 93 23 03 	sts	0x0323, r24
			leftChannelPhase = leftMotorPhase;
     3b4:	80 91 28 03 	lds	r24, 0x0328
     3b8:	80 93 5c 03 	sts	0x035C, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     3bc:	80 91 5b 03 	lds	r24, 0x035B
     3c0:	88 23       	and	r24, r24
     3c2:	d9 f5       	brne	.+118    	; 0x43a <__vector_29+0x2ae>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 59 03 	sts	0x0359, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	80 93 5a 03 	sts	0x035A, r24
			break;
     3d0:	26 cf       	rjmp	.-436    	; 0x21e <__vector_29+0x92>
			right_vel_sum += value;
			num_rvel_samples_avg++;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     3d2:	80 91 62 03 	lds	r24, 0x0362
     3d6:	90 91 63 03 	lds	r25, 0x0363
     3da:	82 0f       	add	r24, r18
     3dc:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	90 93 63 03 	sts	0x0363, r25
     3e6:	80 93 62 03 	sts	0x0362, r24
			break;
     3ea:	fe ce       	rjmp	.-516    	; 0x1e8 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     3ec:	80 91 76 03 	lds	r24, 0x0376
     3f0:	90 91 77 03 	lds	r25, 0x0377
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	90 93 77 03 	sts	0x0377, r25
     3fc:	80 93 76 03 	sts	0x0376, r24
			num_rvel_samples_avg++;
     400:	80 91 6e 03 	lds	r24, 0x036E
     404:	90 91 6f 03 	lds	r25, 0x036F
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 6f 03 	sts	0x036F, r25
     40e:	80 93 6e 03 	sts	0x036E, r24
			break;
     412:	ea ce       	rjmp	.-556    	; 0x1e8 <__vector_29+0x5c>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif
					
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));
     414:	40 91 05 01 	lds	r20, 0x0105
     418:	40 97       	sbiw	r24, 0x10	; 16
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__vector_29+0x29c>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__vector_29+0x298>
     42c:	20 95       	com	r18
     42e:	24 23       	and	r18, r20
     430:	20 93 05 01 	sts	0x0105, r18
     434:	80 91 5a 03 	lds	r24, 0x035A
     438:	f2 ce       	rjmp	.-540    	; 0x21e <__vector_29+0x92>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	80 93 59 03 	sts	0x0359, r24
     440:	c4 cf       	rjmp	.-120    	; 0x3ca <__vector_29+0x23e>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     442:	80 93 59 03 	sts	0x0359, r24
     446:	3d cf       	rjmp	.-390    	; 0x2c2 <__vector_29+0x136>
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	80 93 59 03 	sts	0x0359, r24
     44e:	e4 ce       	rjmp	.-568    	; 0x218 <__vector_29+0x8c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	80 93 59 03 	sts	0x0359, r24
     456:	92 cf       	rjmp	.-220    	; 0x37c <__vector_29+0x1f0>
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
     458:	80 91 5f 03 	lds	r24, 0x035F
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	79 f0       	breq	.+30     	; 0x47e <__vector_29+0x2f2>
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	dd ce       	rjmp	.-582    	; 0x21e <__vector_29+0x92>

	// save the last data
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     464:	90 91 5f 03 	lds	r25, 0x035F
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	09 f0       	breq	.+2      	; 0x46e <__vector_29+0x2e2>
     46c:	03 cf       	rjmp	.-506    	; 0x274 <__vector_29+0xe8>
				batteryLevel = value;
     46e:	30 93 5e 03 	sts	0x035E, r19
     472:	20 93 5d 03 	sts	0x035D, r18
				measBattery = 0;
     476:	10 92 5f 03 	sts	0x035F, r1
				PORTC &= ~(1 << 6);
     47a:	46 98       	cbi	0x08, 6	; 8
     47c:	03 cf       	rjmp	.-506    	; 0x284 <__vector_29+0xf8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	80 93 5f 03 	sts	0x035F, r24
				PORTC |= (1 << 6);	// sense enable on
     484:	46 9a       	sbi	0x08, 6	; 8
     486:	24 cf       	rjmp	.-440    	; 0x2d0 <__vector_29+0x144>
			}

			if(currentProx & 0x01) {	// if active phase
				if(currentProx < 16) {
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     488:	80 91 5f 03 	lds	r24, 0x035F
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	09 f0       	breq	.+2      	; 0x492 <__vector_29+0x306>
     490:	29 cf       	rjmp	.-430    	; 0x2e4 <__vector_29+0x158>
						measBattery=2;
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	80 93 5f 03 	sts	0x035F, r24
						PORTC |= (1 << 6);	// sense enable on
     498:	46 9a       	sbi	0x08, 6	; 8
     49a:	80 91 5a 03 	lds	r24, 0x035A
     49e:	bf ce       	rjmp	.-642    	; 0x21e <__vector_29+0x92>

000004a0 <initPwm>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
     4a0:	e0 e8       	ldi	r30, 0x80	; 128
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	89 6a       	ori	r24, 0xA9	; 169
     4a8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
     4aa:	e1 e8       	ldi	r30, 0x81	; 129
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	89 60       	ori	r24, 0x09	; 9
     4b2:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
     4b4:	80 91 0c 02 	lds	r24, 0x020C
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	90 93 89 00 	sts	0x0089, r25
     4be:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
     4c2:	80 91 0d 02 	lds	r24, 0x020D
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	90 93 8b 00 	sts	0x008B, r25
     4cc:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
     4d0:	80 91 0e 02 	lds	r24, 0x020E
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	90 93 8d 00 	sts	0x008D, r25
     4da:	80 93 8c 00 	sts	0x008C, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     4de:	e0 e9       	ldi	r30, 0x90	; 144
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	83 68       	ori	r24, 0x83	; 131
     4e6:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     4e8:	80 81       	ld	r24, Z
     4ea:	83 60       	ori	r24, 0x03	; 3
     4ec:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     4ee:	a1 e9       	ldi	r26, 0x91	; 145
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	8c 91       	ld	r24, X
     4f4:	8b 60       	ori	r24, 0x0B	; 11
     4f6:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     4f8:	80 91 7e 03 	lds	r24, 0x037E
     4fc:	90 91 7f 03 	lds	r25, 0x037F
     500:	90 93 99 00 	sts	0x0099, r25
     504:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     508:	10 92 9b 00 	sts	0x009B, r1
     50c:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     510:	a1 e7       	ldi	r26, 0x71	; 113
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	8c 91       	ld	r24, X
     516:	81 60       	ori	r24, 0x01	; 1
     518:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     51a:	80 81       	ld	r24, Z
     51c:	8f 75       	andi	r24, 0x5F	; 95
     51e:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     520:	8e b1       	in	r24, 0x0e	; 14
     522:	87 7e       	andi	r24, 0xE7	; 231
     524:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     526:	e0 ea       	ldi	r30, 0xA0	; 160
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	83 68       	ori	r24, 0x83	; 131
     52e:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     530:	a1 ea       	ldi	r26, 0xA1	; 161
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	8c 91       	ld	r24, X
     536:	8b 60       	ori	r24, 0x0B	; 11
     538:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     53a:	80 91 82 03 	lds	r24, 0x0382
     53e:	90 91 83 03 	lds	r25, 0x0383
     542:	90 93 a9 00 	sts	0x00A9, r25
     546:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     54a:	10 92 ab 00 	sts	0x00AB, r1
     54e:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     552:	a2 e7       	ldi	r26, 0x72	; 114
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	8c 91       	ld	r24, X
     558:	81 60       	ori	r24, 0x01	; 1
     55a:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     55c:	80 81       	ld	r24, Z
     55e:	8f 75       	andi	r24, 0x5F	; 95
     560:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     562:	e2 e0       	ldi	r30, 0x02	; 2
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	80 81       	ld	r24, Z
     568:	87 7e       	andi	r24, 0xE7	; 231
     56a:	80 83       	st	Z, r24


}
     56c:	08 95       	ret

0000056e <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	leftMotorPhase = ACTIVE_PHASE;
     580:	10 92 28 03 	sts	0x0328, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     584:	80 91 62 03 	lds	r24, 0x0362
     588:	90 91 63 03 	lds	r25, 0x0363
     58c:	90 93 67 03 	sts	0x0367, r25
     590:	80 93 66 03 	sts	0x0366, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     594:	80 91 6a 03 	lds	r24, 0x036A
     598:	90 91 6b 03 	lds	r25, 0x036B
     59c:	90 93 6d 03 	sts	0x036D, r25
     5a0:	80 93 6c 03 	sts	0x036C, r24
	last_left_vel_sum = left_vel_sum;
     5a4:	80 91 72 03 	lds	r24, 0x0372
     5a8:	90 91 73 03 	lds	r25, 0x0373
     5ac:	90 93 75 03 	sts	0x0375, r25
     5b0:	80 93 74 03 	sts	0x0374, r24

	// reset sampling variables
	left_current_avg = 0;
     5b4:	10 92 63 03 	sts	0x0363, r1
     5b8:	10 92 62 03 	sts	0x0362, r1
	num_lvel_samples_avg = 0;
     5bc:	10 92 6b 03 	sts	0x036B, r1
     5c0:	10 92 6a 03 	sts	0x036A, r1
	left_vel_sum = 0;
     5c4:	10 92 73 03 	sts	0x0373, r1
     5c8:	10 92 72 03 	sts	0x0372, r1

	// start control
	compute_left_vel = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 ae 03 	sts	0x03AE, r24
	start_control = 1;
     5d2:	80 93 b0 03 	sts	0x03B0, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     5d6:	80 91 82 03 	lds	r24, 0x0382
     5da:	90 91 83 03 	lds	r25, 0x0383
     5de:	a0 91 84 03 	lds	r26, 0x0384
     5e2:	b0 91 85 03 	lds	r27, 0x0385
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	a1 05       	cpc	r26, r1
     5ea:	b1 05       	cpc	r27, r1
     5ec:	29 f0       	breq	.+10     	; 0x5f8 <__vector_45+0x8a>
//		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
//		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     5ee:	18 16       	cp	r1, r24
     5f0:	19 06       	cpc	r1, r25
     5f2:	1a 06       	cpc	r1, r26
     5f4:	1b 06       	cpc	r1, r27
     5f6:	64 f4       	brge	.+24     	; 0x610 <__vector_45+0xa2>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	80 93 25 03 	sts	0x0325, r24
//		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	0f 90       	pop	r0
     608:	0f be       	out	0x3f, r0	; 63
     60a:	0f 90       	pop	r0
     60c:	1f 90       	pop	r1
     60e:	18 95       	reti
//		PORTH &= ~(1 << 4);				// output to 0
//		TCCR4A |= (1 << COM4A1);		// enable OCA
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     610:	8e e0       	ldi	r24, 0x0E	; 14
     612:	80 93 25 03 	sts	0x0325, r24
     616:	f3 cf       	rjmp	.-26     	; 0x5fe <__vector_45+0x90>

00000618 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     618:	1f 92       	push	r1
     61a:	0f 92       	push	r0
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 28 03 	sts	0x0328, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     62a:	8e e0       	ldi	r24, 0x0E	; 14
     62c:	80 93 25 03 	sts	0x0325, r24

//	PORTB |= (1 << 6);

}
     630:	8f 91       	pop	r24
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 28 03 	sts	0x0328, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     64e:	8f e0       	ldi	r24, 0x0F	; 15
     650:	80 93 25 03 	sts	0x0325, r24

//	PORTB |= (1 << 6);

}
     654:	8f 91       	pop	r24
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	2f 93       	push	r18
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	rightMotorPhase = ACTIVE_PHASE;
     674:	10 92 27 03 	sts	0x0327, r1
	sendAdcValues = 1;
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	20 93 bf 03 	sts	0x03BF, r18

	// copy sampling variables
	last_right_current = right_current_avg;
     67e:	80 91 64 03 	lds	r24, 0x0364
     682:	90 91 65 03 	lds	r25, 0x0365
     686:	90 93 69 03 	sts	0x0369, r25
     68a:	80 93 68 03 	sts	0x0368, r24
	last_right_vel_sum = right_vel_sum;
     68e:	80 91 76 03 	lds	r24, 0x0376
     692:	90 91 77 03 	lds	r25, 0x0377
     696:	90 93 79 03 	sts	0x0379, r25
     69a:	80 93 78 03 	sts	0x0378, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     69e:	80 91 6e 03 	lds	r24, 0x036E
     6a2:	90 91 6f 03 	lds	r25, 0x036F
     6a6:	90 93 71 03 	sts	0x0371, r25
     6aa:	80 93 70 03 	sts	0x0370, r24

	// reset sampling variables
	right_current_avg = 0;
     6ae:	10 92 65 03 	sts	0x0365, r1
     6b2:	10 92 64 03 	sts	0x0364, r1
	right_vel_sum = 0;
     6b6:	10 92 77 03 	sts	0x0377, r1
     6ba:	10 92 76 03 	sts	0x0376, r1
	num_rvel_samples_avg = 0;
     6be:	10 92 6f 03 	sts	0x036F, r1
     6c2:	10 92 6e 03 	sts	0x036E, r1

	// start control
	compute_right_vel = 1;
     6c6:	20 93 af 03 	sts	0x03AF, r18

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     6ca:	80 91 7e 03 	lds	r24, 0x037E
     6ce:	90 91 7f 03 	lds	r25, 0x037F
     6d2:	a0 91 80 03 	lds	r26, 0x0380
     6d6:	b0 91 81 03 	lds	r27, 0x0381
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	a1 05       	cpc	r26, r1
     6de:	b1 05       	cpc	r27, r1
     6e0:	29 f0       	breq	.+10     	; 0x6ec <__vector_35+0x8c>
//		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
//		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     6e2:	18 16       	cp	r1, r24
     6e4:	19 06       	cpc	r1, r25
     6e6:	1a 06       	cpc	r1, r26
     6e8:	1b 06       	cpc	r1, r27
     6ea:	6c f4       	brge	.+26     	; 0x706 <__vector_35+0xa6>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     6ec:	8d e0       	ldi	r24, 0x0D	; 13
     6ee:	80 93 26 03 	sts	0x0326, r24
//		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti
//		PORTE &= ~(1 << 4);				// output to 0
//		TCCR3A |= (1 << COM3A1);		// enable OCA
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     706:	8c e0       	ldi	r24, 0x0C	; 12
     708:	80 93 26 03 	sts	0x0326, r24
     70c:	f2 cf       	rjmp	.-28     	; 0x6f2 <__vector_35+0x92>

0000070e <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 27 03 	sts	0x0327, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     720:	8c e0       	ldi	r24, 0x0C	; 12
     722:	80 93 26 03 	sts	0x0326, r24

//	PORTB |= (1 << 6);
}
     726:	8f 91       	pop	r24
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 27 03 	sts	0x0327, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     744:	8d e0       	ldi	r24, 0x0D	; 13
     746:	80 93 26 03 	sts	0x0326, r24

//	PORTB |= (1 << 6);
}
     74a:	8f 91       	pop	r24
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	00 d0       	rcall	.+0      	; 0x75c <readAccelXYZ+0x6>
     75c:	00 d0       	rcall	.+0      	; 0x75e <readAccelXYZ+0x8>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {
     762:	80 91 c3 03 	lds	r24, 0x03C3
     766:	88 23       	and	r24, r24
     768:	c1 f0       	breq	.+48     	; 0x79a <readAccelXYZ+0x44>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis


	} else if(useAccel == USE_ADXL345) {	
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	09 f4       	brne	.+2      	; 0x770 <readAccelXYZ+0x1a>
     76e:	54 c0       	rjmp	.+168    	; 0x818 <readAccelXYZ+0xc2>
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis

	} else {

		accX = 0;
     770:	10 92 c5 03 	sts	0x03C5, r1
     774:	10 92 c4 03 	sts	0x03C4, r1
		accY = 0;
     778:	10 92 c7 03 	sts	0x03C7, r1
     77c:	10 92 c6 03 	sts	0x03C6, r1
		accZ = 0;
     780:	10 92 c9 03 	sts	0x03C9, r1
     784:	10 92 c8 03 	sts	0x03C8, r1

	}

}
     788:	26 96       	adiw	r28, 0x06	; 6
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	cf 91       	pop	r28
     796:	df 91       	pop	r29
     798:	08 95       	ret
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     79a:	80 91 13 02 	lds	r24, 0x0213
     79e:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
		i2c_write(0x00);							// sends address to read from
     7a2:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     7a4:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     7a8:	80 91 13 02 	lds	r24, 0x0213
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
     7b2:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     7bc:	8a 83       	std	Y+2, r24	; 0x02
     7be:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     7c8:	8c 83       	std	Y+4, r24	; 0x04
     7ca:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     7ce:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
     7d0:	0e 94 1e 19 	call	0x323c	; 0x323c <i2c_readNak>
     7d4:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
     7d6:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>

		// 16 bits values in 2's complement
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     7da:	3a 81       	ldd	r19, Y+2	; 0x02
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	82 2b       	or	r24, r18
     7e4:	93 2b       	or	r25, r19
     7e6:	90 93 c5 03 	sts	0x03C5, r25
     7ea:	80 93 c4 03 	sts	0x03C4, r24
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     7ee:	3c 81       	ldd	r19, Y+4	; 0x04
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	82 2b       	or	r24, r18
     7f8:	93 2b       	or	r25, r19
     7fa:	90 93 c7 03 	sts	0x03C7, r25
     7fe:	80 93 c6 03 	sts	0x03C6, r24
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     802:	3e 81       	ldd	r19, Y+6	; 0x06
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	8d 81       	ldd	r24, Y+5	; 0x05
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	82 2b       	or	r24, r18
     80c:	93 2b       	or	r25, r19
     80e:	90 93 c9 03 	sts	0x03C9, r25
     812:	80 93 c8 03 	sts	0x03C8, r24
     816:	b8 cf       	rjmp	.-144    	; 0x788 <readAccelXYZ+0x32>


	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     818:	80 91 13 02 	lds	r24, 0x0213
     81c:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
		i2c_write(0x32);							// sends address to read from
     820:	82 e3       	ldi	r24, 0x32	; 50
     822:	c0 cf       	rjmp	.-128    	; 0x7a4 <readAccelXYZ+0x4e>

00000824 <readAccelXY>:

	}

}

void readAccelXY() {
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	0f 92       	push	r0
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[4], ret;


	if(useAccel == USE_MMAX7455L) {
     834:	80 91 c3 03 	lds	r24, 0x03C3
     838:	88 23       	and	r24, r24
     83a:	91 f0       	breq	.+36     	; 0x860 <readAccelXY+0x3c>
		i2c_stop();									// set stop conditon = release bus

		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	09 f4       	brne	.+2      	; 0x842 <readAccelXY+0x1e>
     840:	45 c0       	rjmp	.+138    	; 0x8cc <readAccelXY+0xa8>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else {

		accX = 0;
     842:	10 92 c5 03 	sts	0x03C5, r1
     846:	10 92 c4 03 	sts	0x03C4, r1
		accY = 0;
     84a:	10 92 c7 03 	sts	0x03C7, r1
     84e:	10 92 c6 03 	sts	0x03C6, r1

	}


}
     852:	0f 90       	pop	r0
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     860:	80 91 13 02 	lds	r24, 0x0213
     864:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
		i2c_write(0x00);							// sends address to read from
     868:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     86a:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     86e:	80 91 13 02 	lds	r24, 0x0213
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
     878:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     87c:	08 2f       	mov	r16, r24
     87e:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     882:	f8 2e       	mov	r15, r24
     884:	0e 94 14 19 	call	0x3228	; 0x3228 <i2c_readAck>
     888:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
     88a:	0e 94 1e 19 	call	0x323c	; 0x323c <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
     88e:	89 83       	std	Y+1, r24	; 0x01
     890:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>

		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     894:	5f 2d       	mov	r21, r15
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	20 2f       	mov	r18, r16
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	24 2b       	or	r18, r20
     89e:	35 2b       	or	r19, r21
     8a0:	30 93 c5 03 	sts	0x03C5, r19
     8a4:	20 93 c4 03 	sts	0x03C4, r18
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	38 2f       	mov	r19, r24
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	81 2f       	mov	r24, r17
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	82 2b       	or	r24, r18
     8b4:	93 2b       	or	r25, r19
     8b6:	90 93 c7 03 	sts	0x03C7, r25
     8ba:	80 93 c6 03 	sts	0x03C6, r24
		accY = 0;

	}


}
     8be:	0f 90       	pop	r0
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	08 95       	ret
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     8cc:	80 91 13 02 	lds	r24, 0x0213
     8d0:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
		i2c_write(0x32);							// sends address to read from
     8d4:	82 e3       	ldi	r24, 0x32	; 50
     8d6:	c9 cf       	rjmp	.-110    	; 0x86a <readAccelXY+0x46>

000008d8 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8d8:	80 91 13 02 	lds	r24, 0x0213
     8dc:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     8e0:	88 23       	and	r24, r24
     8e2:	51 f4       	brne	.+20     	; 0x8f8 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     8e4:	86 e1       	ldi	r24, 0x16	; 22
     8e6:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     8ea:	85 e4       	ldi	r24, 0x45	; 69
     8ec:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     8f0:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	return 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0

}
     8f6:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     8f8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
		return 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret

00000900 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     900:	80 91 13 02 	lds	r24, 0x0213
     904:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     908:	88 23       	and	r24, r24
     90a:	31 f5       	brne	.+76     	; 0x958 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     90c:	8d e2       	ldi	r24, 0x2D	; 45
     90e:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     912:	88 e0       	ldi	r24, 0x08	; 8
     914:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     918:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     91c:	80 91 13 02 	lds	r24, 0x0213
     920:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     924:	88 23       	and	r24, r24
     926:	c1 f4       	brne	.+48     	; 0x958 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     928:	81 e3       	ldi	r24, 0x31	; 49
     92a:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     934:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     938:	80 91 13 02 	lds	r24, 0x0213
     93c:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     940:	88 23       	and	r24, r24
     942:	51 f4       	brne	.+20     	; 0x958 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     944:	8c e2       	ldi	r24, 0x2C	; 44
     946:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     94a:	89 e0       	ldi	r24, 0x09	; 9
     94c:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     950:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	return 0;
     954:	80 e0       	ldi	r24, 0x00	; 0

}
     956:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     958:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
		return 1;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	08 95       	ret

00000960 <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     960:	0e 94 7f 18 	call	0x30fe	; 0x30fe <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     964:	80 91 13 02 	lds	r24, 0x0213
     968:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     96c:	88 23       	and	r24, r24
     96e:	49 f4       	brne	.+18     	; 0x982 <initI2C+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     970:	86 e1       	ldi	r24, 0x16	; 22
     972:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     976:	85 e4       	ldi	r24, 0x45	; 69
     978:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     97c:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
     980:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     982:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     986:	86 ea       	ldi	r24, 0xA6	; 166
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	90 93 14 02 	sts	0x0214, r25
     98e:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     992:	86 ea       	ldi	r24, 0xA6	; 166
     994:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     998:	88 23       	and	r24, r24
     99a:	41 f5       	brne	.+80     	; 0x9ec <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     99c:	8d e2       	ldi	r24, 0x2D	; 45
     99e:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9a8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9ac:	80 91 13 02 	lds	r24, 0x0213
     9b0:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9b4:	88 23       	and	r24, r24
     9b6:	d1 f4       	brne	.+52     	; 0x9ec <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     9b8:	81 e3       	ldi	r24, 0x31	; 49
     9ba:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9c4:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9c8:	80 91 13 02 	lds	r24, 0x0213
     9cc:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9d0:	88 23       	and	r24, r24
     9d2:	61 f4       	brne	.+24     	; 0x9ec <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     9d4:	8c e2       	ldi	r24, 0x2C	; 44
     9d6:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     9da:	89 e0       	ldi	r24, 0x09	; 9
     9dc:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9e0:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 c3 03 	sts	0x03C3, r24
     9ea:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     9ec:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	80 93 c3 03 	sts	0x03C3, r24
     9f6:	08 95       	ret

000009f8 <calibrateAccelerometer>:
		}
	}

}

void calibrateAccelerometer() {
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29

	int j=0;
	accOffsetX = 0;
     9fc:	10 92 d1 03 	sts	0x03D1, r1
     a00:	10 92 d0 03 	sts	0x03D0, r1
	accOffsetY = 0;
     a04:	10 92 d3 03 	sts	0x03D3, r1
     a08:	10 92 d2 03 	sts	0x03D2, r1
	accOffsetZ = 0;
     a0c:	10 92 d5 03 	sts	0x03D5, r1
     a10:	10 92 d4 03 	sts	0x03D4, r1
     a14:	c2 e3       	ldi	r28, 0x32	; 50
     a16:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     a18:	0e 94 ab 03 	call	0x756	; 0x756 <readAccelXYZ>
		accOffsetX += accX;
     a1c:	80 91 c4 03 	lds	r24, 0x03C4
     a20:	90 91 c5 03 	lds	r25, 0x03C5
     a24:	20 91 d0 03 	lds	r18, 0x03D0
     a28:	30 91 d1 03 	lds	r19, 0x03D1
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	90 93 d1 03 	sts	0x03D1, r25
     a34:	80 93 d0 03 	sts	0x03D0, r24
		accOffsetY += accY;
     a38:	e0 91 c6 03 	lds	r30, 0x03C6
     a3c:	f0 91 c7 03 	lds	r31, 0x03C7
     a40:	20 91 d2 03 	lds	r18, 0x03D2
     a44:	30 91 d3 03 	lds	r19, 0x03D3
     a48:	e2 0f       	add	r30, r18
     a4a:	f3 1f       	adc	r31, r19
     a4c:	f0 93 d3 03 	sts	0x03D3, r31
     a50:	e0 93 d2 03 	sts	0x03D2, r30
		accOffsetZ += accZ;
     a54:	20 91 c8 03 	lds	r18, 0x03C8
     a58:	30 91 c9 03 	lds	r19, 0x03C9
     a5c:	40 91 d4 03 	lds	r20, 0x03D4
     a60:	50 91 d5 03 	lds	r21, 0x03D5
     a64:	24 0f       	add	r18, r20
     a66:	35 1f       	adc	r19, r21
     a68:	30 93 d5 03 	sts	0x03D5, r19
     a6c:	20 93 d4 03 	sts	0x03D4, r18
     a70:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     a72:	91 f6       	brne	.-92     	; 0xa18 <calibrateAccelerometer+0x20>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     a74:	c2 e3       	ldi	r28, 0x32	; 50
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	be 01       	movw	r22, r28
     a7a:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
     a7e:	70 93 d1 03 	sts	0x03D1, r23
     a82:	60 93 d0 03 	sts	0x03D0, r22
	accOffsetY = accOffsetY/50;
     a86:	cf 01       	movw	r24, r30
     a88:	be 01       	movw	r22, r28
     a8a:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
     a8e:	70 93 d3 03 	sts	0x03D3, r23
     a92:	60 93 d2 03 	sts	0x03D2, r22
	accOffsetZ = accOffsetZ/50;
     a96:	c9 01       	movw	r24, r18
     a98:	be 01       	movw	r22, r28
     a9a:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
     a9e:	70 93 d5 03 	sts	0x03D5, r23
     aa2:	60 93 d4 03 	sts	0x03D4, r22

}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <computeAngle>:

void computeAngle() {
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29

	readAccelXY();
     ab8:	0e 94 12 04 	call	0x824	; 0x824 <readAccelXY>

	if(useAccel == USE_MMAX7455L) {
     abc:	80 91 c3 03 	lds	r24, 0x03C3
     ac0:	88 23       	and	r24, r24
     ac2:	09 f0       	breq	.+2      	; 0xac6 <computeAngle+0x1a>
     ac4:	55 c0       	rjmp	.+170    	; 0xb70 <computeAngle+0xc4>
		if(accX > 511) {
     ac6:	60 91 c4 03 	lds	r22, 0x03C4
     aca:	70 91 c5 03 	lds	r23, 0x03C5
     ace:	22 e0       	ldi	r18, 0x02	; 2
     ad0:	60 30       	cpi	r22, 0x00	; 0
     ad2:	72 07       	cpc	r23, r18
     ad4:	34 f0       	brlt	.+12     	; 0xae2 <computeAngle+0x36>
			accX -= 1023;
     ad6:	6f 5f       	subi	r22, 0xFF	; 255
     ad8:	73 40       	sbci	r23, 0x03	; 3
     ada:	70 93 c5 03 	sts	0x03C5, r23
     ade:	60 93 c4 03 	sts	0x03C4, r22
		}
		if(accY > 511) {
     ae2:	c0 91 c6 03 	lds	r28, 0x03C6
     ae6:	d0 91 c7 03 	lds	r29, 0x03C7
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	c0 30       	cpi	r28, 0x00	; 0
     aee:	d8 07       	cpc	r29, r24
     af0:	34 f0       	brlt	.+12     	; 0xafe <computeAngle+0x52>
			accY -= 1023;
     af2:	cf 5f       	subi	r28, 0xFF	; 255
     af4:	d3 40       	sbci	r29, 0x03	; 3
     af6:	d0 93 c7 03 	sts	0x03C7, r29
     afa:	c0 93 c6 03 	sts	0x03C6, r28
		}
		if(accZ > 511) {
     afe:	80 91 c8 03 	lds	r24, 0x03C8
     b02:	90 91 c9 03 	lds	r25, 0x03C9
     b06:	22 e0       	ldi	r18, 0x02	; 2
     b08:	80 30       	cpi	r24, 0x00	; 0
     b0a:	92 07       	cpc	r25, r18
     b0c:	e4 f5       	brge	.+120    	; 0xb86 <computeAngle+0xda>
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     b0e:	88 27       	eor	r24, r24
     b10:	77 fd       	sbrc	r23, 7
     b12:	80 95       	com	r24
     b14:	98 2f       	mov	r25, r24
     b16:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
     b1a:	7b 01       	movw	r14, r22
     b1c:	8c 01       	movw	r16, r24
     b1e:	be 01       	movw	r22, r28
     b20:	88 27       	eor	r24, r24
     b22:	77 fd       	sbrc	r23, 7
     b24:	80 95       	com	r24
     b26:	98 2f       	mov	r25, r24
     b28:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
     b2c:	9b 01       	movw	r18, r22
     b2e:	ac 01       	movw	r20, r24
     b30:	c8 01       	movw	r24, r16
     b32:	b7 01       	movw	r22, r14
     b34:	0e 94 1f 21 	call	0x423e	; 0x423e <atan2>
     b38:	21 ee       	ldi	r18, 0xE1	; 225
     b3a:	3e e2       	ldi	r19, 0x2E	; 46
     b3c:	45 e6       	ldi	r20, 0x65	; 101
     b3e:	52 e4       	ldi	r21, 0x42	; 66
     b40:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3>
     b44:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__fixsfsi>
     b48:	9b 01       	movw	r18, r22
     b4a:	70 93 d7 03 	sts	0x03D7, r23
     b4e:	60 93 d6 03 	sts	0x03D6, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     b52:	77 ff       	sbrs	r23, 7
     b54:	06 c0       	rjmp	.+12     	; 0xb62 <computeAngle+0xb6>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     b56:	28 59       	subi	r18, 0x98	; 152
     b58:	3e 4f       	sbci	r19, 0xFE	; 254
     b5a:	30 93 d7 03 	sts	0x03D7, r19
     b5e:	20 93 d6 03 	sts	0x03D6, r18
	}

}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	08 95       	ret
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
		}
	} else if(useAccel == USE_ADXL345) {
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	81 f0       	breq	.+32     	; 0xb94 <computeAngle+0xe8>
     b74:	60 91 c4 03 	lds	r22, 0x03C4
     b78:	70 91 c5 03 	lds	r23, 0x03C5
     b7c:	c0 91 c6 03 	lds	r28, 0x03C6
     b80:	d0 91 c7 03 	lds	r29, 0x03C7
     b84:	c4 cf       	rjmp	.-120    	; 0xb0e <computeAngle+0x62>
		}
		if(accY > 511) {
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	93 40       	sbci	r25, 0x03	; 3
     b8a:	90 93 c9 03 	sts	0x03C9, r25
     b8e:	80 93 c8 03 	sts	0x03C8, r24
     b92:	bd cf       	rjmp	.-134    	; 0xb0e <computeAngle+0x62>
		}
	} else if(useAccel == USE_ADXL345) {
		accX = accX-accOffsetX;
     b94:	60 91 c4 03 	lds	r22, 0x03C4
     b98:	70 91 c5 03 	lds	r23, 0x03C5
     b9c:	80 91 d0 03 	lds	r24, 0x03D0
     ba0:	90 91 d1 03 	lds	r25, 0x03D1
     ba4:	68 1b       	sub	r22, r24
     ba6:	79 0b       	sbc	r23, r25
     ba8:	70 93 c5 03 	sts	0x03C5, r23
     bac:	60 93 c4 03 	sts	0x03C4, r22
		accY = accY-accOffsetY;
     bb0:	c0 91 c6 03 	lds	r28, 0x03C6
     bb4:	d0 91 c7 03 	lds	r29, 0x03C7
     bb8:	80 91 d2 03 	lds	r24, 0x03D2
     bbc:	90 91 d3 03 	lds	r25, 0x03D3
     bc0:	c8 1b       	sub	r28, r24
     bc2:	d9 0b       	sbc	r29, r25
     bc4:	d0 93 c7 03 	sts	0x03C7, r29
     bc8:	c0 93 c6 03 	sts	0x03C6, r28
     bcc:	a0 cf       	rjmp	.-192    	; 0xb0e <computeAngle+0x62>

00000bce <initPeripherals>:

}

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     bce:	f8 94       	cli

	initPortsIO();
     bd0:	0e 94 5d 18 	call	0x30ba	; 0x30ba <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     bd4:	80 91 7a 00 	lds	r24, 0x007A
     bd8:	86 60       	ori	r24, 0x06	; 6
     bda:	80 93 7a 00 	sts	0x007A, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     bde:	80 91 7c 00 	lds	r24, 0x007C
     be2:	80 64       	ori	r24, 0x40	; 64
     be4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     be8:	80 91 7a 00 	lds	r24, 0x007A
     bec:	80 62       	ori	r24, 0x20	; 32
     bee:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     bf2:	80 91 7b 00 	lds	r24, 0x007B
     bf6:	88 7f       	andi	r24, 0xF8	; 248
     bf8:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     bfc:	80 91 7a 00 	lds	r24, 0x007A
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     c06:	80 91 7a 00 	lds	r24, 0x007A
     c0a:	80 68       	ori	r24, 0x80	; 128
     c0c:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     c10:	80 91 7a 00 	lds	r24, 0x007A
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	80 93 7a 00 	sts	0x007A, r24

	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
     c1a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <initPwm>
	initSPI();
     c1e:	0e 94 37 12 	call	0x246e	; 0x246e <initSPI>
	mirf_init();
     c22:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <mirf_init>
	initUsart();
     c26:	0e 94 28 19 	call	0x3250	; 0x3250 <initUsart>
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     c2a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c2e:	80 91 13 02 	lds	r24, 0x0213
     c32:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c36:	88 23       	and	r24, r24
     c38:	51 f4       	brne	.+20     	; 0xc4e <initPeripherals+0x80>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     c3a:	86 e1       	ldi	r24, 0x16	; 22
     c3c:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     c40:	85 e4       	ldi	r24, 0x45	; 69
     c42:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c46:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     c4a:	78 94       	sei

	

}
     c4c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     c4e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     c52:	86 ea       	ldi	r24, 0xA6	; 166
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 14 02 	sts	0x0214, r25
     c5a:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c5e:	86 ea       	ldi	r24, 0xA6	; 166
     c60:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c64:	88 23       	and	r24, r24
     c66:	41 f5       	brne	.+80     	; 0xcb8 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     c68:	8d e2       	ldi	r24, 0x2D	; 45
     c6a:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     c6e:	88 e0       	ldi	r24, 0x08	; 8
     c70:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c74:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c78:	80 91 13 02 	lds	r24, 0x0213
     c7c:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c80:	88 23       	and	r24, r24
     c82:	d1 f4       	brne	.+52     	; 0xcb8 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     c84:	81 e3       	ldi	r24, 0x31	; 49
     c86:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c90:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c94:	80 91 13 02 	lds	r24, 0x0213
     c98:	0e 94 87 18 	call	0x310e	; 0x310e <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c9c:	88 23       	and	r24, r24
     c9e:	61 f4       	brne	.+24     	; 0xcb8 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     ca0:	8c e2       	ldi	r24, 0x2C	; 44
     ca2:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     ca6:	89 e0       	ldi	r24, 0x09	; 9
     ca8:	0e 94 02 19 	call	0x3204	; 0x3204 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     cac:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 c3 03 	sts	0x03C3, r24
     cb6:	c9 cf       	rjmp	.-110    	; 0xc4a <initPeripherals+0x7c>
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     cb8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	80 93 c3 03 	sts	0x03C3, r24
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     cc2:	78 94       	sei

	

}
     cc4:	08 95       	ret

00000cc6 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 91 be 03 	lds	r25, 0x03BE
     ccc:	89 1b       	sub	r24, r25
     cce:	80 93 be 03 	sts	0x03BE, r24

	if(blinkState) {
     cd2:	88 23       	and	r24, r24
     cd4:	39 f4       	brne	.+14     	; 0xce4 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     cd6:	80 91 80 00 	lds	r24, 0x0080
     cda:	87 7f       	andi	r24, 0xF7	; 247
     cdc:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     ce0:	2f 98       	cbi	0x05, 7	; 5
     ce2:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     ce4:	80 91 80 00 	lds	r24, 0x0080
     ce8:	88 60       	ori	r24, 0x08	; 8
     cea:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 8d 00 	sts	0x008D, r25
     cf6:	80 93 8c 00 	sts	0x008C, r24
     cfa:	08 95       	ret

00000cfc <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     cfc:	88 23       	and	r24, r24
     cfe:	59 f0       	breq	.+22     	; 0xd16 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     d00:	90 91 80 00 	lds	r25, 0x0080
     d04:	90 68       	ori	r25, 0x80	; 128
     d06:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 89 00 	sts	0x0089, r25
     d10:	80 93 88 00 	sts	0x0088, r24
     d14:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     d16:	80 91 80 00 	lds	r24, 0x0080
     d1a:	8f 77       	andi	r24, 0x7F	; 127
     d1c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     d20:	2d 98       	cbi	0x05, 5	; 5
     d22:	08 95       	ret

00000d24 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     d24:	88 23       	and	r24, r24
     d26:	59 f0       	breq	.+22     	; 0xd3e <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     d28:	90 91 80 00 	lds	r25, 0x0080
     d2c:	90 62       	ori	r25, 0x20	; 32
     d2e:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	90 93 8b 00 	sts	0x008B, r25
     d38:	80 93 8a 00 	sts	0x008A, r24
     d3c:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     d3e:	80 91 80 00 	lds	r24, 0x0080
     d42:	8f 7d       	andi	r24, 0xDF	; 223
     d44:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     d48:	2e 98       	cbi	0x05, 6	; 5
     d4a:	08 95       	ret

00000d4c <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     d4c:	88 23       	and	r24, r24
     d4e:	59 f0       	breq	.+22     	; 0xd66 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     d50:	90 91 80 00 	lds	r25, 0x0080
     d54:	98 60       	ori	r25, 0x08	; 8
     d56:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 8d 00 	sts	0x008D, r25
     d60:	80 93 8c 00 	sts	0x008C, r24
     d64:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     d66:	80 91 80 00 	lds	r24, 0x0080
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     d70:	2f 98       	cbi	0x05, 7	; 5
     d72:	08 95       	ret

00000d74 <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 93 d8 03 	sts	0x03D8, r24
}
     d7a:	08 95       	ret

00000d7c <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     d7c:	86 b1       	in	r24, 0x06	; 6
     d7e:	66 b1       	in	r22, 0x06	; 6
     d80:	26 b1       	in	r18, 0x06	; 6
     d82:	46 b1       	in	r20, 0x06	; 6
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	28 70       	andi	r18, 0x08	; 8
     d88:	30 70       	andi	r19, 0x00	; 0
     d8a:	35 95       	asr	r19
     d8c:	27 95       	ror	r18
     d8e:	35 95       	asr	r19
     d90:	27 95       	ror	r18
     d92:	35 95       	asr	r19
     d94:	27 95       	ror	r18
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	64 70       	andi	r22, 0x04	; 4
     d9e:	70 70       	andi	r23, 0x00	; 0
     da0:	75 95       	asr	r23
     da2:	67 95       	ror	r22
     da4:	75 95       	asr	r23
     da6:	67 95       	ror	r22
     da8:	26 0f       	add	r18, r22
     daa:	37 1f       	adc	r19, r23
     dac:	22 0f       	add	r18, r18
     dae:	33 1f       	adc	r19, r19
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	42 70       	andi	r20, 0x02	; 2
     db4:	50 70       	andi	r21, 0x00	; 0
     db6:	55 95       	asr	r21
     db8:	47 95       	ror	r20
     dba:	24 0f       	add	r18, r20
     dbc:	35 1f       	adc	r19, r21
     dbe:	22 0f       	add	r18, r18
     dc0:	81 70       	andi	r24, 0x01	; 1
}
     dc2:	82 0f       	add	r24, r18
     dc4:	08 95       	ret

00000dc6 <obstacleAvoidance>:

void obstacleAvoidance() {
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
	// obstacle avoidance using the 3 front proximity sensors

	signed int currentProxValue1=0, currentProxValue2=0, speedL=0, speedR=0;

	if(speedr==0 || speedl==0) {
     de2:	80 91 bd 03 	lds	r24, 0x03BD
     de6:	88 23       	and	r24, r24
     de8:	09 f4       	brne	.+2      	; 0xdec <obstacleAvoidance+0x26>
     dea:	f7 c0       	rjmp	.+494    	; 0xfda <obstacleAvoidance+0x214>
     dec:	20 91 bc 03 	lds	r18, 0x03BC
     df0:	22 23       	and	r18, r18
     df2:	09 f4       	brne	.+2      	; 0xdf6 <obstacleAvoidance+0x30>
     df4:	f2 c0       	rjmp	.+484    	; 0xfda <obstacleAvoidance+0x214>
		pwm_left_working = 0;
		return;
	}

	// max speed tested = 40
	if(speedr > 40) {
     df6:	89 32       	cpi	r24, 0x29	; 41
     df8:	08 f0       	brcs	.+2      	; 0xdfc <obstacleAvoidance+0x36>
     dfa:	0e c1       	rjmp	.+540    	; 0x1018 <obstacleAvoidance+0x252>
     dfc:	a8 2e       	mov	r10, r24
     dfe:	bb 24       	eor	r11, r11
     e00:	8c e2       	ldi	r24, 0x2C	; 44
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	b5 01       	movw	r22, r10
     e06:	0e 94 89 20 	call	0x4112	; 0x4112 <__divmodhi4>
     e0a:	fb 01       	movw	r30, r22
     e0c:	45 01       	movw	r8, r10
     e0e:	88 0c       	add	r8, r8
     e10:	99 1c       	adc	r9, r9
		speedr = 40;
	}
	if(speedl > 40) {
     e12:	29 32       	cpi	r18, 0x29	; 41
     e14:	08 f0       	brcs	.+2      	; 0xe18 <obstacleAvoidance+0x52>
     e16:	0e c1       	rjmp	.+540    	; 0x1034 <obstacleAvoidance+0x26e>
     e18:	e2 2e       	mov	r14, r18
     e1a:	ff 24       	eor	r15, r15
     e1c:	8c e2       	ldi	r24, 0x2C	; 44
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	b7 01       	movw	r22, r14
     e22:	0e 94 89 20 	call	0x4112	; 0x4112 <__divmodhi4>
     e26:	8b 01       	movw	r16, r22
     e28:	37 01       	movw	r6, r14
     e2a:	66 0c       	add	r6, r6
     e2c:	77 1c       	adc	r7, r7
		speedl = 40;
	}

	currentProxValue1 = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
     e2e:	20 91 29 03 	lds	r18, 0x0329
     e32:	30 91 2a 03 	lds	r19, 0x032A
     e36:	80 91 2b 03 	lds	r24, 0x032B
     e3a:	90 91 2c 03 	lds	r25, 0x032C
     e3e:	28 1b       	sub	r18, r24
     e40:	39 0b       	sbc	r19, r25
     e42:	37 fd       	sbrc	r19, 7
     e44:	09 c1       	rjmp	.+530    	; 0x1058 <obstacleAvoidance+0x292>
	if(currentProxValue1 < 0) {
		currentProxValue1 = 0;
	}
	currentProxValue2 = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
     e46:	80 91 2d 03 	lds	r24, 0x032D
     e4a:	90 91 2e 03 	lds	r25, 0x032E
     e4e:	60 91 2f 03 	lds	r22, 0x032F
     e52:	70 91 30 03 	lds	r23, 0x0330
	if(currentProxValue2 < 0) {
		currentProxValue2 = 0;
	}
	rightProxSum = currentProxValue1/2 + currentProxValue2;
	currentProxValue2 = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
     e56:	c0 91 45 03 	lds	r28, 0x0345
     e5a:	d0 91 46 03 	lds	r29, 0x0346
     e5e:	40 91 47 03 	lds	r20, 0x0347
     e62:	50 91 48 03 	lds	r21, 0x0348
     e66:	c4 1b       	sub	r28, r20
     e68:	d5 0b       	sbc	r29, r21
	}
	currentProxValue2 = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
	if(currentProxValue2 < 0) {
		currentProxValue2 = 0;
	}
	rightProxSum = currentProxValue1/2 + currentProxValue2;
     e6a:	a9 01       	movw	r20, r18
     e6c:	55 95       	asr	r21
     e6e:	47 95       	ror	r20
     e70:	86 1b       	sub	r24, r22
     e72:	97 0b       	sbc	r25, r23
     e74:	97 fd       	sbrc	r25, 7
     e76:	ed c0       	rjmp	.+474    	; 0x1052 <obstacleAvoidance+0x28c>
     e78:	84 0f       	add	r24, r20
     e7a:	95 1f       	adc	r25, r21
		currentProxValue2 = 0;
	}
	leftProxSum = currentProxValue1/4 + currentProxValue2;


	rightProxSum = rightProxSum/(int)(300/speedr);	// scale the sum to have a moderate impact on the velocity
     e7c:	bf 01       	movw	r22, r30
     e7e:	0e 94 89 20 	call	0x4112	; 0x4112 <__divmodhi4>
     e82:	fb 01       	movw	r30, r22
     e84:	6b 01       	movw	r12, r22
     e86:	70 93 de 03 	sts	0x03DE, r23
     e8a:	60 93 dd 03 	sts	0x03DD, r22
	rightProxSum = currentProxValue1/2 + currentProxValue2;
	currentProxValue2 = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
	if(currentProxValue2 < 0) {
		currentProxValue2 = 0;
	}
	leftProxSum = currentProxValue1/4 + currentProxValue2;
     e8e:	35 95       	asr	r19
     e90:	27 95       	ror	r18
     e92:	35 95       	asr	r19
     e94:	27 95       	ror	r18
     e96:	d7 fd       	sbrc	r29, 7
     e98:	d9 c0       	rjmp	.+434    	; 0x104c <obstacleAvoidance+0x286>
     e9a:	c9 01       	movw	r24, r18
     e9c:	8c 0f       	add	r24, r28
     e9e:	9d 1f       	adc	r25, r29


	rightProxSum = rightProxSum/(int)(300/speedr);	// scale the sum to have a moderate impact on the velocity
	leftProxSum = leftProxSum/(int)(300/speedl);
     ea0:	b8 01       	movw	r22, r16
     ea2:	0e 94 89 20 	call	0x4112	; 0x4112 <__divmodhi4>
     ea6:	cb 01       	movw	r24, r22
     ea8:	70 93 e0 03 	sts	0x03E0, r23
     eac:	60 93 df 03 	sts	0x03DF, r22

	if(rightProxSum > (int)(speedr*2)) {		// velocity of the motors goes from -30 to +30
     eb0:	8e 16       	cp	r8, r30
     eb2:	9f 06       	cpc	r9, r31
     eb4:	2c f4       	brge	.+10     	; 0xec0 <obstacleAvoidance+0xfa>
		rightProxSum = (int)(speedr*2);
     eb6:	90 92 de 03 	sts	0x03DE, r9
     eba:	80 92 dd 03 	sts	0x03DD, r8
     ebe:	64 01       	movw	r12, r8
	}
	if(leftProxSum > (int)(speedl*2)) {
     ec0:	66 16       	cp	r6, r22
     ec2:	77 06       	cpc	r7, r23
     ec4:	2c f4       	brge	.+10     	; 0xed0 <obstacleAvoidance+0x10a>
		leftProxSum = (int)(speedl*2);
     ec6:	70 92 e0 03 	sts	0x03E0, r7
     eca:	60 92 df 03 	sts	0x03DF, r6
     ece:	c3 01       	movw	r24, r6
	}


	speedL = (int)speedl - rightProxSum;
     ed0:	ec 18       	sub	r14, r12
     ed2:	fd 08       	sbc	r15, r13
	speedR = (int)speedr - leftProxSum;
     ed4:	a8 1a       	sub	r10, r24
     ed6:	b9 0a       	sbc	r11, r25

	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL<<2);
	} else {
		pwm_left_working = speedL<<2;
     ed8:	ee 0c       	add	r14, r14
     eda:	ff 1c       	adc	r15, r15
     edc:	ee 0c       	add	r14, r14
     ede:	ff 1c       	adc	r15, r15
     ee0:	00 27       	eor	r16, r16
     ee2:	f7 fc       	sbrc	r15, 7
     ee4:	00 95       	com	r16
     ee6:	10 2f       	mov	r17, r16
     ee8:	e0 92 b7 03 	sts	0x03B7, r14
     eec:	f0 92 b8 03 	sts	0x03B8, r15
     ef0:	00 93 b9 03 	sts	0x03B9, r16
     ef4:	10 93 ba 03 	sts	0x03BA, r17

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR<<2);
	} else {
		pwm_right_working = speedR<<2;
     ef8:	aa 0c       	add	r10, r10
     efa:	bb 1c       	adc	r11, r11
     efc:	aa 0c       	add	r10, r10
     efe:	bb 1c       	adc	r11, r11
     f00:	cc 24       	eor	r12, r12
     f02:	b7 fc       	sbrc	r11, 7
     f04:	c0 94       	com	r12
     f06:	dc 2c       	mov	r13, r12
     f08:	a0 92 b3 03 	sts	0x03B3, r10
     f0c:	b0 92 b4 03 	sts	0x03B4, r11
     f10:	c0 92 b5 03 	sts	0x03B5, r12
     f14:	d0 92 b6 03 	sts	0x03B6, r13
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
     f18:	84 e3       	ldi	r24, 0x34	; 52
     f1a:	a8 16       	cp	r10, r24
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	b8 06       	cpc	r11, r24
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	c8 06       	cpc	r12, r24
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	d8 06       	cpc	r13, r24
     f28:	94 f0       	brlt	.+36     	; 0xf4e <obstacleAvoidance+0x188>
     f2a:	83 e3       	ldi	r24, 0x33	; 51
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	80 93 b3 03 	sts	0x03B3, r24
     f36:	90 93 b4 03 	sts	0x03B4, r25
     f3a:	a0 93 b5 03 	sts	0x03B5, r26
     f3e:	b0 93 b6 03 	sts	0x03B6, r27
     f42:	83 e3       	ldi	r24, 0x33	; 51
     f44:	a8 2e       	mov	r10, r24
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	b8 2e       	mov	r11, r24
     f4a:	c1 2c       	mov	r12, r1
     f4c:	d1 2c       	mov	r13, r1
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
     f4e:	84 e3       	ldi	r24, 0x34	; 52
     f50:	e8 16       	cp	r14, r24
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	f8 06       	cpc	r15, r24
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 07       	cpc	r16, r24
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	18 07       	cpc	r17, r24
     f5e:	94 f0       	brlt	.+36     	; 0xf84 <obstacleAvoidance+0x1be>
     f60:	83 e3       	ldi	r24, 0x33	; 51
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	80 93 b7 03 	sts	0x03B7, r24
     f6c:	90 93 b8 03 	sts	0x03B8, r25
     f70:	a0 93 b9 03 	sts	0x03B9, r26
     f74:	b0 93 ba 03 	sts	0x03BA, r27
     f78:	b3 e3       	ldi	r27, 0x33	; 51
     f7a:	eb 2e       	mov	r14, r27
     f7c:	b1 e0       	ldi	r27, 0x01	; 1
     f7e:	fb 2e       	mov	r15, r27
     f80:	01 2d       	mov	r16, r1
     f82:	11 2d       	mov	r17, r1
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
     f84:	8d ec       	ldi	r24, 0xCD	; 205
     f86:	a8 16       	cp	r10, r24
     f88:	8e ef       	ldi	r24, 0xFE	; 254
     f8a:	b8 06       	cpc	r11, r24
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	c8 06       	cpc	r12, r24
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	d8 06       	cpc	r13, r24
     f94:	64 f4       	brge	.+24     	; 0xfae <obstacleAvoidance+0x1e8>
     f96:	8d ec       	ldi	r24, 0xCD	; 205
     f98:	9e ef       	ldi	r25, 0xFE	; 254
     f9a:	af ef       	ldi	r26, 0xFF	; 255
     f9c:	bf ef       	ldi	r27, 0xFF	; 255
     f9e:	80 93 b3 03 	sts	0x03B3, r24
     fa2:	90 93 b4 03 	sts	0x03B4, r25
     fa6:	a0 93 b5 03 	sts	0x03B5, r26
     faa:	b0 93 b6 03 	sts	0x03B6, r27
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
     fae:	8d ec       	ldi	r24, 0xCD	; 205
     fb0:	e8 16       	cp	r14, r24
     fb2:	8e ef       	ldi	r24, 0xFE	; 254
     fb4:	f8 06       	cpc	r15, r24
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	08 07       	cpc	r16, r24
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	18 07       	cpc	r17, r24
     fbe:	ec f4       	brge	.+58     	; 0xffa <obstacleAvoidance+0x234>
     fc0:	8d ec       	ldi	r24, 0xCD	; 205
     fc2:	9e ef       	ldi	r25, 0xFE	; 254
     fc4:	af ef       	ldi	r26, 0xFF	; 255
     fc6:	bf ef       	ldi	r27, 0xFF	; 255
     fc8:	80 93 b7 03 	sts	0x03B7, r24
     fcc:	90 93 b8 03 	sts	0x03B8, r25
     fd0:	a0 93 b9 03 	sts	0x03B9, r26
     fd4:	b0 93 ba 03 	sts	0x03BA, r27
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <obstacleAvoidance+0x234>
	// obstacle avoidance using the 3 front proximity sensors

	signed int currentProxValue1=0, currentProxValue2=0, speedL=0, speedR=0;

	if(speedr==0 || speedl==0) {
		pwm_right_working = 0;
     fda:	10 92 b3 03 	sts	0x03B3, r1
     fde:	10 92 b4 03 	sts	0x03B4, r1
     fe2:	10 92 b5 03 	sts	0x03B5, r1
     fe6:	10 92 b6 03 	sts	0x03B6, r1
		pwm_left_working = 0;
     fea:	10 92 b7 03 	sts	0x03B7, r1
     fee:	10 92 b8 03 	sts	0x03B8, r1
     ff2:	10 92 b9 03 	sts	0x03B9, r1
     ff6:	10 92 ba 03 	sts	0x03BA, r1
	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);

}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	7f 90       	pop	r7
    1014:	6f 90       	pop	r6
    1016:	08 95       	ret
		return;
	}

	// max speed tested = 40
	if(speedr > 40) {
		speedr = 40;
    1018:	88 e2       	ldi	r24, 0x28	; 40
    101a:	80 93 bd 03 	sts	0x03BD, r24
    101e:	30 e5       	ldi	r19, 0x50	; 80
    1020:	83 2e       	mov	r8, r19
    1022:	91 2c       	mov	r9, r1
    1024:	e7 e0       	ldi	r30, 0x07	; 7
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	98 e2       	ldi	r25, 0x28	; 40
    102a:	a9 2e       	mov	r10, r25
    102c:	b1 2c       	mov	r11, r1
	}
	if(speedl > 40) {
    102e:	29 32       	cpi	r18, 0x29	; 41
    1030:	08 f4       	brcc	.+2      	; 0x1034 <obstacleAvoidance+0x26e>
    1032:	f2 ce       	rjmp	.-540    	; 0xe18 <obstacleAvoidance+0x52>
		speedl = 40;
    1034:	88 e2       	ldi	r24, 0x28	; 40
    1036:	80 93 bc 03 	sts	0x03BC, r24
    103a:	10 e5       	ldi	r17, 0x50	; 80
    103c:	61 2e       	mov	r6, r17
    103e:	71 2c       	mov	r7, r1
    1040:	07 e0       	ldi	r16, 0x07	; 7
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	b8 e2       	ldi	r27, 0x28	; 40
    1046:	eb 2e       	mov	r14, r27
    1048:	f1 2c       	mov	r15, r1
    104a:	f1 ce       	rjmp	.-542    	; 0xe2e <obstacleAvoidance+0x68>
	rightProxSum = currentProxValue1/2 + currentProxValue2;
	currentProxValue2 = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
	if(currentProxValue2 < 0) {
		currentProxValue2 = 0;
	}
	leftProxSum = currentProxValue1/4 + currentProxValue2;
    104c:	c0 e0       	ldi	r28, 0x00	; 0
    104e:	d0 e0       	ldi	r29, 0x00	; 0
    1050:	24 cf       	rjmp	.-440    	; 0xe9a <obstacleAvoidance+0xd4>
	}
	currentProxValue2 = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
	if(currentProxValue2 < 0) {
		currentProxValue2 = 0;
	}
	rightProxSum = currentProxValue1/2 + currentProxValue2;
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	10 cf       	rjmp	.-480    	; 0xe78 <obstacleAvoidance+0xb2>
	}
	if(speedl > 40) {
		speedl = 40;
	}

	currentProxValue1 = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	f4 ce       	rjmp	.-536    	; 0xe46 <obstacleAvoidance+0x80>

0000105e <cliffAvoidance>:

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    105e:	80 91 49 03 	lds	r24, 0x0349
    1062:	90 91 4a 03 	lds	r25, 0x034A
    1066:	20 91 4b 03 	lds	r18, 0x034B
    106a:	30 91 4c 03 	lds	r19, 0x034C
    106e:	82 1b       	sub	r24, r18
    1070:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    1072:	60 91 4d 03 	lds	r22, 0x034D
    1076:	70 91 4e 03 	lds	r23, 0x034E
    107a:	20 91 4f 03 	lds	r18, 0x034F
    107e:	30 91 50 03 	lds	r19, 0x0350
    1082:	62 1b       	sub	r22, r18
    1084:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1086:	40 91 51 03 	lds	r20, 0x0351
    108a:	50 91 52 03 	lds	r21, 0x0352
    108e:	20 91 53 03 	lds	r18, 0x0353
    1092:	30 91 54 03 	lds	r19, 0x0354
    1096:	42 1b       	sub	r20, r18
    1098:	53 0b       	sbc	r21, r19
    109a:	57 fd       	sbrc	r21, 7
    109c:	56 c0       	rjmp	.+172    	; 0x114a <cliffAvoidance+0xec>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    109e:	20 91 55 03 	lds	r18, 0x0355
    10a2:	30 91 56 03 	lds	r19, 0x0356
    10a6:	e0 91 57 03 	lds	r30, 0x0357
    10aa:	f0 91 58 03 	lds	r31, 0x0358
    10ae:	2e 1b       	sub	r18, r30
    10b0:	3f 0b       	sbc	r19, r31
    10b2:	37 fd       	sbrc	r19, 7
    10b4:	53 c0       	rjmp	.+166    	; 0x115c <cliffAvoidance+0xfe>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    10b6:	97 fd       	sbrc	r25, 7
    10b8:	4e c0       	rjmp	.+156    	; 0x1156 <cliffAvoidance+0xf8>
    10ba:	90 93 e3 03 	sts	0x03E3, r25
    10be:	80 93 e2 03 	sts	0x03E2, r24
	minGround = GROUND_LEFT;
    10c2:	e3 e0       	ldi	r30, 0x03	; 3
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	f0 93 15 02 	sts	0x0215, r31
    10ca:	e0 93 14 02 	sts	0x0214, r30
	if(g1 < minGroundValue) {
    10ce:	77 fd       	sbrc	r23, 7
    10d0:	3f c0       	rjmp	.+126    	; 0x1150 <cliffAvoidance+0xf2>
    10d2:	68 17       	cp	r22, r24
    10d4:	79 07       	cpc	r23, r25
    10d6:	58 f4       	brcc	.+22     	; 0x10ee <cliffAvoidance+0x90>
		minGroundValue = g1;
    10d8:	70 93 e3 03 	sts	0x03E3, r23
    10dc:	60 93 e2 03 	sts	0x03E2, r22
		minGround = GROUND_CENTER_LEFT;
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 15 02 	sts	0x0215, r25
    10e8:	80 93 14 02 	sts	0x0214, r24
    10ec:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    10ee:	48 17       	cp	r20, r24
    10f0:	59 07       	cpc	r21, r25
    10f2:	58 f4       	brcc	.+22     	; 0x110a <cliffAvoidance+0xac>
		minGroundValue = g2;
    10f4:	50 93 e3 03 	sts	0x03E3, r21
    10f8:	40 93 e2 03 	sts	0x03E2, r20
		minGround = GROUND_CENTER_RIGHT;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 15 02 	sts	0x0215, r25
    1104:	80 93 14 02 	sts	0x0214, r24
    1108:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    110a:	28 17       	cp	r18, r24
    110c:	39 07       	cpc	r19, r25
    110e:	48 f4       	brcc	.+18     	; 0x1122 <cliffAvoidance+0xc4>
		minGroundValue = g3;
    1110:	30 93 e3 03 	sts	0x03E3, r19
    1114:	20 93 e2 03 	sts	0x03E2, r18
		minGround = GROUND_RIGHT;
    1118:	10 92 15 02 	sts	0x0215, r1
    111c:	10 92 14 02 	sts	0x0214, r1
    1120:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    1122:	84 37       	cpi	r24, 0x74	; 116
    1124:	91 05       	cpc	r25, r1
    1126:	80 f4       	brcc	.+32     	; 0x1148 <cliffAvoidance+0xea>
		pwm_right_working = 0;
    1128:	10 92 b3 03 	sts	0x03B3, r1
    112c:	10 92 b4 03 	sts	0x03B4, r1
    1130:	10 92 b5 03 	sts	0x03B5, r1
    1134:	10 92 b6 03 	sts	0x03B6, r1
		pwm_left_working = 0;
    1138:	10 92 b7 03 	sts	0x03B7, r1
    113c:	10 92 b8 03 	sts	0x03B8, r1
    1140:	10 92 b9 03 	sts	0x03B9, r1
    1144:	10 92 ba 03 	sts	0x03BA, r1
    1148:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	a7 cf       	rjmp	.-178    	; 0x109e <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	be cf       	rjmp	.-132    	; 0x10d2 <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	af cf       	rjmp	.-162    	; 0x10ba <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	aa cf       	rjmp	.-172    	; 0x10b6 <cliffAvoidance+0x58>

00001162 <main>:
		pwm_left_working = 0;
	}

}

int main(void) {
    1162:	2f 92       	push	r2
    1164:	3f 92       	push	r3
    1166:	4f 92       	push	r4
    1168:	5f 92       	push	r5
    116a:	6f 92       	push	r6
    116c:	7f 92       	push	r7
    116e:	8f 92       	push	r8
    1170:	9f 92       	push	r9
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <main+0x26>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	choosePeripheral = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
    1194:	0e 94 e7 05 	call	0xbce	; 0xbce <initPeripherals>
}

void calibrateAccelerometer() {

	int j=0;
	accOffsetX = 0;
    1198:	10 92 d1 03 	sts	0x03D1, r1
    119c:	10 92 d0 03 	sts	0x03D0, r1
	accOffsetY = 0;
    11a0:	10 92 d3 03 	sts	0x03D3, r1
    11a4:	10 92 d2 03 	sts	0x03D2, r1
	accOffsetZ = 0;
    11a8:	10 92 d5 03 	sts	0x03D5, r1
    11ac:	10 92 d4 03 	sts	0x03D4, r1
    11b0:	02 e3       	ldi	r16, 0x32	; 50
    11b2:	10 e0       	ldi	r17, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
    11b4:	0e 94 ab 03 	call	0x756	; 0x756 <readAccelXYZ>
		accOffsetX += accX;
    11b8:	80 91 c4 03 	lds	r24, 0x03C4
    11bc:	90 91 c5 03 	lds	r25, 0x03C5
    11c0:	20 91 d0 03 	lds	r18, 0x03D0
    11c4:	30 91 d1 03 	lds	r19, 0x03D1
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	90 93 d1 03 	sts	0x03D1, r25
    11d0:	80 93 d0 03 	sts	0x03D0, r24
		accOffsetY += accY;
    11d4:	e0 91 c6 03 	lds	r30, 0x03C6
    11d8:	f0 91 c7 03 	lds	r31, 0x03C7
    11dc:	20 91 d2 03 	lds	r18, 0x03D2
    11e0:	30 91 d3 03 	lds	r19, 0x03D3
    11e4:	e2 0f       	add	r30, r18
    11e6:	f3 1f       	adc	r31, r19
    11e8:	f0 93 d3 03 	sts	0x03D3, r31
    11ec:	e0 93 d2 03 	sts	0x03D2, r30
		accOffsetZ += accZ;
    11f0:	20 91 c8 03 	lds	r18, 0x03C8
    11f4:	30 91 c9 03 	lds	r19, 0x03C9
    11f8:	40 91 d4 03 	lds	r20, 0x03D4
    11fc:	50 91 d5 03 	lds	r21, 0x03D5
    1200:	24 0f       	add	r18, r20
    1202:	35 1f       	adc	r19, r21
    1204:	30 93 d5 03 	sts	0x03D5, r19
    1208:	20 93 d4 03 	sts	0x03D4, r18
    120c:	01 50       	subi	r16, 0x01	; 1
    120e:	10 40       	sbci	r17, 0x00	; 0
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
    1210:	89 f6       	brne	.-94     	; 0x11b4 <main+0x52>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
    1212:	02 e3       	ldi	r16, 0x32	; 50
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	b8 01       	movw	r22, r16
    1218:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    121c:	70 93 d1 03 	sts	0x03D1, r23
    1220:	60 93 d0 03 	sts	0x03D0, r22
	accOffsetY = accOffsetY/50;
    1224:	cf 01       	movw	r24, r30
    1226:	b8 01       	movw	r22, r16
    1228:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    122c:	70 93 d3 03 	sts	0x03D3, r23
    1230:	60 93 d2 03 	sts	0x03D2, r22
	accOffsetZ = accOffsetZ/50;
    1234:	c9 01       	movw	r24, r18
    1236:	b8 01       	movw	r22, r16
    1238:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    123c:	70 93 d5 03 	sts	0x03D5, r23
    1240:	60 93 d4 03 	sts	0x03D4, r22
//PORTB &= ~(1 << 5);
	calibrateAccelerometer();
//PORTB |= (1 << 5);


	e_init_remote_control();
    1244:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <e_init_remote_control>
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
		//PORTB |= (1 << 6);

		if(delayCounter >= 20000) {
			measBattery = 1;
    1248:	11 e0       	ldi	r17, 0x01	; 1

					case 6:	// both motors right
						pwm_right_desired -= STEP_MOTORS;
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    124a:	96 e6       	ldi	r25, 0x66	; 102
    124c:	29 2e       	mov	r2, r25
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	39 2e       	mov	r3, r25
    1252:	41 2c       	mov	r4, r1
    1254:	51 2c       	mov	r5, r1
					ackPayload[11] = accX&0xFF;
					ackPayload[12] = accX>>8;
					ackPayload[13] = accY&0xFF;
					ackPayload[14] = accY>>8;
					ackPayload[15] = ir_move;			
					packetId = 5;
    1256:	05 e0       	ldi	r16, 0x05	; 5
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1258:	8d ec       	ldi	r24, 0xCD	; 205
    125a:	c8 2e       	mov	r12, r24
    125c:	8e ef       	ldi	r24, 0xFE	; 254
    125e:	d8 2e       	mov	r13, r24
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	e8 2e       	mov	r14, r24
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	f8 2e       	mov	r15, r24
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1268:	b3 e3       	ldi	r27, 0x33	; 51
    126a:	8b 2e       	mov	r8, r27
    126c:	b1 e0       	ldi	r27, 0x01	; 1
    126e:	9b 2e       	mov	r9, r27
    1270:	a1 2c       	mov	r10, r1
    1272:	b1 2c       	mov	r11, r1
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
    1274:	a3 e0       	ldi	r26, 0x03	; 3
    1276:	6a 2e       	mov	r6, r26
    1278:	71 2c       	mov	r7, r1
    127a:	63 c0       	rjmp	.+198    	; 0x1342 <main+0x1e0>
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control

			if(start_control) {
    127c:	80 91 b0 03 	lds	r24, 0x03B0
    1280:	88 23       	and	r24, r24
    1282:	09 f4       	brne	.+2      	; 0x1286 <main+0x124>
    1284:	aa c0       	rjmp	.+340    	; 0x13da <main+0x278>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    1286:	80 91 86 03 	lds	r24, 0x0386
    128a:	90 91 87 03 	lds	r25, 0x0387
    128e:	a0 91 88 03 	lds	r26, 0x0388
    1292:	b0 91 89 03 	lds	r27, 0x0389
    1296:	80 93 b3 03 	sts	0x03B3, r24
    129a:	90 93 b4 03 	sts	0x03B4, r25
    129e:	a0 93 b5 03 	sts	0x03B5, r26
    12a2:	b0 93 b6 03 	sts	0x03B6, r27
				pwm_left_working = pwm_left_desired;
    12a6:	80 91 8a 03 	lds	r24, 0x038A
    12aa:	90 91 8b 03 	lds	r25, 0x038B
    12ae:	a0 91 8c 03 	lds	r26, 0x038C
    12b2:	b0 91 8d 03 	lds	r27, 0x038D
    12b6:	80 93 b7 03 	sts	0x03B7, r24
    12ba:	90 93 b8 03 	sts	0x03B8, r25
    12be:	a0 93 b9 03 	sts	0x03B9, r26
    12c2:	b0 93 ba 03 	sts	0x03BA, r27
				
				if(obstacleAvoidanceEnabled) {
    12c6:	80 91 dc 03 	lds	r24, 0x03DC
    12ca:	88 23       	and	r24, r24
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <main+0x16e>
    12ce:	e2 c3       	rjmp	.+1988   	; 0x1a94 <main+0x932>
					//PORTB &= ~(1 << 7);
					obstacleAvoidance();
					//PORTB |= (1 << 7);				
				}
				
				if(cliffAvoidanceEnabled) {
    12d0:	80 91 e1 03 	lds	r24, 0x03E1
    12d4:	88 23       	and	r24, r24
    12d6:	09 f0       	breq	.+2      	; 0x12da <main+0x178>
    12d8:	67 c3       	rjmp	.+1742   	; 0x19a8 <main+0x846>
					cliffAvoidance();
				}
				start_control = 0;
    12da:	10 92 b0 03 	sts	0x03B0, r1
				update_pwm = 1;
    12de:	10 93 bb 03 	sts	0x03BB, r17
    12e2:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
    12e4:	80 91 ae 03 	lds	r24, 0x03AE
    12e8:	88 23       	and	r24, r24
    12ea:	91 f0       	breq	.+36     	; 0x1310 <main+0x1ae>
			last_left_vel = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
    12ec:	80 91 74 03 	lds	r24, 0x0374
    12f0:	90 91 75 03 	lds	r25, 0x0375
    12f4:	60 91 6c 03 	lds	r22, 0x036C
    12f8:	70 91 6d 03 	lds	r23, 0x036D
    12fc:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    1300:	70 93 7b 03 	sts	0x037B, r23
    1304:	60 93 7a 03 	sts	0x037A, r22
			left_vel_changed = 1;
    1308:	10 93 b1 03 	sts	0x03B1, r17
			compute_left_vel = 0;
    130c:	10 92 ae 03 	sts	0x03AE, r1
		}

		if(compute_right_vel) {
    1310:	80 91 af 03 	lds	r24, 0x03AF
    1314:	88 23       	and	r24, r24
    1316:	91 f0       	breq	.+36     	; 0x133c <main+0x1da>
			last_right_vel = (unsigned int)(last_right_vel_sum/last_num_rvel_samples_avg);
    1318:	80 91 78 03 	lds	r24, 0x0378
    131c:	90 91 79 03 	lds	r25, 0x0379
    1320:	60 91 70 03 	lds	r22, 0x0370
    1324:	70 91 71 03 	lds	r23, 0x0371
    1328:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    132c:	70 93 7d 03 	sts	0x037D, r23
    1330:	60 93 7c 03 	sts	0x037C, r22
			right_vel_changed = 1;
    1334:	10 93 b2 03 	sts	0x03B2, r17
			compute_right_vel = 0;
    1338:	10 92 af 03 	sts	0x03AF, r1
		}

		if(update_pwm) {
    133c:	22 23       	and	r18, r18
    133e:	09 f0       	breq	.+2      	; 0x1342 <main+0x1e0>
    1340:	0b c2       	rjmp	.+1046   	; 0x1758 <main+0x5f6>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    1342:	46 b1       	in	r20, 0x06	; 6
    1344:	86 b1       	in	r24, 0x06	; 6
    1346:	26 b1       	in	r18, 0x06	; 6
    1348:	56 b1       	in	r21, 0x06	; 6
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	28 70       	andi	r18, 0x08	; 8
    134e:	30 70       	andi	r19, 0x00	; 0
    1350:	35 95       	asr	r19
    1352:	27 95       	ror	r18
    1354:	35 95       	asr	r19
    1356:	27 95       	ror	r18
    1358:	35 95       	asr	r19
    135a:	27 95       	ror	r18
    135c:	22 0f       	add	r18, r18
    135e:	33 1f       	adc	r19, r19
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	84 70       	andi	r24, 0x04	; 4
    1364:	90 70       	andi	r25, 0x00	; 0
    1366:	95 95       	asr	r25
    1368:	87 95       	ror	r24
    136a:	95 95       	asr	r25
    136c:	87 95       	ror	r24
    136e:	28 0f       	add	r18, r24
    1370:	39 1f       	adc	r19, r25
    1372:	22 0f       	add	r18, r18
    1374:	33 1f       	adc	r19, r19
    1376:	85 2f       	mov	r24, r21
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	82 70       	andi	r24, 0x02	; 2
    137c:	90 70       	andi	r25, 0x00	; 0
    137e:	95 95       	asr	r25
    1380:	87 95       	ror	r24
    1382:	28 0f       	add	r18, r24
    1384:	39 1f       	adc	r19, r25
    1386:	22 0f       	add	r18, r18
    1388:	41 70       	andi	r20, 0x01	; 1
    138a:	24 0f       	add	r18, r20

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		currentSelector = getSelector();
    138c:	20 93 db 03 	sts	0x03DB, r18
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
    1390:	0e 94 ab 03 	call	0x756	; 0x756 <readAccelXYZ>
		//PORTB |= (1 << 6);

		if(delayCounter >= 20000) {
    1394:	80 91 d9 03 	lds	r24, 0x03D9
    1398:	90 91 da 03 	lds	r25, 0x03DA
    139c:	2e e4       	ldi	r18, 0x4E	; 78
    139e:	80 32       	cpi	r24, 0x20	; 32
    13a0:	92 07       	cpc	r25, r18
    13a2:	10 f0       	brcs	.+4      	; 0x13a8 <main+0x246>
			measBattery = 1;
    13a4:	10 93 5f 03 	sts	0x035F, r17
		}

		if(irEnabled) {
    13a8:	20 91 11 02 	lds	r18, 0x0211
    13ac:	22 23       	and	r18, r18
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <main+0x250>
    13b0:	0a c1       	rjmp	.+532    	; 0x15c6 <main+0x464>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
    13b2:	ae e4       	ldi	r26, 0x4E	; 78
    13b4:	80 32       	cpi	r24, 0x20	; 32
    13b6:	9a 07       	cpc	r25, r26
    13b8:	20 f0       	brcs	.+8      	; 0x13c2 <main+0x260>
			delayCounter = 0;
    13ba:	10 92 da 03 	sts	0x03DA, r1
    13be:	10 92 d9 03 	sts	0x03D9, r1
			usartTransmit(CHARGE_ON);								
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
    13c2:	0e 94 0f 13 	call	0x261e	; 0x261e <mirf_data_ready>
    13c6:	88 23       	and	r24, r24
    13c8:	59 f4       	brne	.+22     	; 0x13e0 <main+0x27e>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
    13ca:	80 91 db 03 	lds	r24, 0x03DB
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <main+0x272>
    13d2:	54 cf       	rjmp	.-344    	; 0x127c <main+0x11a>
				}
				start_control = 0;
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	09 f4       	brne	.+2      	; 0x13da <main+0x278>
    13d8:	27 c2       	rjmp	.+1102   	; 0x1828 <main+0x6c6>

			if(start_control && left_vel_changed && right_vel_changed) {
    13da:	20 91 bb 03 	lds	r18, 0x03BB
    13de:	82 cf       	rjmp	.-252    	; 0x12e4 <main+0x182>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	60 e7       	ldi	r22, 0x70	; 112
    13e4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <mirf_config_register>

			mirf_get_data(rfData);
    13e8:	8c ef       	ldi	r24, 0xFC	; 252
    13ea:	93 e0       	ldi	r25, 0x03	; 3
    13ec:	0e 94 3a 13 	call	0x2674	; 0x2674 <mirf_get_data>
			flush_rx_fifo();
    13f0:	0e 94 34 13 	call	0x2668	; 0x2668 <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && (rfData[3]==0b00001000 || rfData[3]==0b00011000) && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    13f4:	90 91 00 04 	lds	r25, 0x0400
    13f8:	89 2f       	mov	r24, r25
    13fa:	8f 77       	andi	r24, 0x7F	; 127
    13fc:	80 93 bd 03 	sts	0x03BD, r24
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1400:	60 91 01 04 	lds	r22, 0x0401
    1404:	76 2f       	mov	r23, r22
    1406:	7f 77       	andi	r23, 0x7F	; 127
    1408:	70 93 bc 03 	sts	0x03BC, r23
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    140c:	97 fd       	sbrc	r25, 7
    140e:	b9 c2       	rjmp	.+1394   	; 0x1982 <main+0x820>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	90 95       	com	r25
    141c:	81 95       	neg	r24
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	9c 01       	movw	r18, r24
    1422:	44 27       	eor	r20, r20
    1424:	37 fd       	sbrc	r19, 7
    1426:	40 95       	com	r20
    1428:	54 2f       	mov	r21, r20
    142a:	20 93 86 03 	sts	0x0386, r18
    142e:	30 93 87 03 	sts	0x0387, r19
    1432:	40 93 88 03 	sts	0x0388, r20
    1436:	50 93 89 03 	sts	0x0389, r21
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    143a:	67 fd       	sbrc	r22, 7
    143c:	8f c2       	rjmp	.+1310   	; 0x195c <main+0x7fa>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    143e:	87 2f       	mov	r24, r23
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	90 95       	com	r25
    144c:	81 95       	neg	r24
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	aa 27       	eor	r26, r26
    1452:	97 fd       	sbrc	r25, 7
    1454:	a0 95       	com	r26
    1456:	ba 2f       	mov	r27, r26
    1458:	80 93 8a 03 	sts	0x038A, r24
    145c:	90 93 8b 03 	sts	0x038B, r25
    1460:	a0 93 8c 03 	sts	0x038C, r26
    1464:	b0 93 8d 03 	sts	0x038D, r27
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1468:	24 33       	cpi	r18, 0x34	; 52
    146a:	e1 e0       	ldi	r30, 0x01	; 1
    146c:	3e 07       	cpc	r19, r30
    146e:	e0 e0       	ldi	r30, 0x00	; 0
    1470:	4e 07       	cpc	r20, r30
    1472:	e0 e0       	ldi	r30, 0x00	; 0
    1474:	5e 07       	cpc	r21, r30
    1476:	64 f0       	brlt	.+24     	; 0x1490 <main+0x32e>
    1478:	80 92 86 03 	sts	0x0386, r8
    147c:	90 92 87 03 	sts	0x0387, r9
    1480:	a0 92 88 03 	sts	0x0388, r10
    1484:	b0 92 89 03 	sts	0x0389, r11
    1488:	23 e3       	ldi	r18, 0x33	; 51
    148a:	31 e0       	ldi	r19, 0x01	; 1
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1490:	84 33       	cpi	r24, 0x34	; 52
    1492:	f1 e0       	ldi	r31, 0x01	; 1
    1494:	9f 07       	cpc	r25, r31
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	af 07       	cpc	r26, r31
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	bf 07       	cpc	r27, r31
    149e:	64 f0       	brlt	.+24     	; 0x14b8 <main+0x356>
    14a0:	80 92 8a 03 	sts	0x038A, r8
    14a4:	90 92 8b 03 	sts	0x038B, r9
    14a8:	a0 92 8c 03 	sts	0x038C, r10
    14ac:	b0 92 8d 03 	sts	0x038D, r11
    14b0:	83 e3       	ldi	r24, 0x33	; 51
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    14b8:	2d 3c       	cpi	r18, 0xCD	; 205
    14ba:	6e ef       	ldi	r22, 0xFE	; 254
    14bc:	36 07       	cpc	r19, r22
    14be:	6f ef       	ldi	r22, 0xFF	; 255
    14c0:	46 07       	cpc	r20, r22
    14c2:	6f ef       	ldi	r22, 0xFF	; 255
    14c4:	56 07       	cpc	r21, r22
    14c6:	44 f4       	brge	.+16     	; 0x14d8 <main+0x376>
    14c8:	c0 92 86 03 	sts	0x0386, r12
    14cc:	d0 92 87 03 	sts	0x0387, r13
    14d0:	e0 92 88 03 	sts	0x0388, r14
    14d4:	f0 92 89 03 	sts	0x0389, r15
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    14d8:	8d 3c       	cpi	r24, 0xCD	; 205
    14da:	ee ef       	ldi	r30, 0xFE	; 254
    14dc:	9e 07       	cpc	r25, r30
    14de:	ef ef       	ldi	r30, 0xFF	; 255
    14e0:	ae 07       	cpc	r26, r30
    14e2:	ef ef       	ldi	r30, 0xFF	; 255
    14e4:	be 07       	cpc	r27, r30
    14e6:	44 f4       	brge	.+16     	; 0x14f8 <main+0x396>
    14e8:	c0 92 8a 03 	sts	0x038A, r12
    14ec:	d0 92 8b 03 	sts	0x038B, r13
    14f0:	e0 92 8c 03 	sts	0x038C, r14
    14f4:	f0 92 8d 03 	sts	0x038D, r15
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    14f8:	20 91 fc 03 	lds	r18, 0x03FC
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	30 93 f7 03 	sts	0x03F7, r19
    1502:	20 93 f6 03 	sts	0x03F6, r18
    1506:	e0 91 fd 03 	lds	r30, 0x03FD
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	f0 93 f9 03 	sts	0x03F9, r31
    1510:	e0 93 f8 03 	sts	0x03F8, r30
    1514:	80 91 fe 03 	lds	r24, 0x03FE
    1518:	48 2f       	mov	r20, r24
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	5a 83       	std	Y+2, r21	; 0x02
    151e:	49 83       	std	Y+1, r20	; 0x01
    1520:	50 93 fb 03 	sts	0x03FB, r21
    1524:	40 93 fa 03 	sts	0x03FA, r20
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1528:	92 2f       	mov	r25, r18
    152a:	88 27       	eor	r24, r24
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	64 e6       	ldi	r22, 0x64	; 100
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    1538:	60 95       	com	r22
    153a:	60 93 0c 02 	sts	0x020C, r22
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    153e:	9e 2f       	mov	r25, r30
    1540:	88 27       	eor	r24, r24
    1542:	8e 1b       	sub	r24, r30
    1544:	9f 0b       	sbc	r25, r31
    1546:	64 e6       	ldi	r22, 0x64	; 100
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    154e:	60 95       	com	r22
    1550:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1554:	a9 81       	ldd	r26, Y+1	; 0x01
    1556:	ba 81       	ldd	r27, Y+2	; 0x02
    1558:	9a 2f       	mov	r25, r26
    155a:	88 27       	eor	r24, r24
    155c:	8a 1b       	sub	r24, r26
    155e:	9b 0b       	sbc	r25, r27
    1560:	64 e6       	ldi	r22, 0x64	; 100
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	0e 94 75 20 	call	0x40ea	; 0x40ea <__udivmodhi4>
    1568:	60 95       	com	r22
    156a:	60 93 0d 02 	sts	0x020D, r22
			//updateRedLed(pwm_red);	
			//updateGreenLed(pwm_green);
			//updateBlueLed(pwm_blue);
			

			if(rfData[3]== 1) {			// turn on one IR
    156e:	80 91 ff 03 	lds	r24, 0x03FF
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	09 f4       	brne	.+2      	; 0x1578 <main+0x416>
    1576:	ef c1       	rjmp	.+990    	; 0x1956 <main+0x7f4>
				//LED_IR1 = 0;
				//LED_IR2 = 1;
				LED_IR1_LOW;
				LED_IR2_HIGH;
			} else if(rfData[3]==2) {	// turn on two IRs
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	09 f4       	brne	.+2      	; 0x157e <main+0x41c>
    157c:	aa c2       	rjmp	.+1364   	; 0x1ad2 <main+0x970>
				//LED_IR1 = 1;
				//LED_IR2 = 0;
				LED_IR1_HIGH;
				LED_IR2_LOW;
			} else if(rfData[3]==3) {	// turn on all three IRs
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	09 f4       	brne	.+2      	; 0x1584 <main+0x422>
    1582:	0d c4       	rjmp	.+2074   	; 0x1d9e <main+0xc3c>
				LED_IR1_LOW;
				LED_IR2_LOW;
			} else {					// turn off IRs
				//LED_IR1 = 1;
				//LED_IR2 = 1;
				LED_IR1_HIGH;
    1584:	44 9a       	sbi	0x08, 4	; 8
				LED_IR2_HIGH;
    1586:	45 9a       	sbi	0x08, 5	; 8
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1588:	82 ff       	sbrs	r24, 2
    158a:	e3 c0       	rjmp	.+454    	; 0x1752 <main+0x5f0>
				irEnabled = 1;
    158c:	10 93 11 02 	sts	0x0211, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00100000)==0b00100000) {	// check the sixth bit to enable/disable obstacle avoidance
    1590:	85 ff       	sbrs	r24, 5
    1592:	dc c0       	rjmp	.+440    	; 0x174c <main+0x5ea>
				obstacleAvoidanceEnabled = 1;
    1594:	10 93 dc 03 	sts	0x03DC, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1598:	86 ff       	sbrs	r24, 6
    159a:	4a c0       	rjmp	.+148    	; 0x1630 <main+0x4ce>
				cliffAvoidanceEnabled = 1;
    159c:	10 93 e1 03 	sts	0x03E1, r17
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    15a0:	80 91 0b 02 	lds	r24, 0x020B
    15a4:	80 93 e6 03 	sts	0x03E6, r24

			switch(packetId) {
    15a8:	84 30       	cpi	r24, 0x04	; 4
    15aa:	09 f4       	brne	.+2      	; 0x15ae <main+0x44c>
    15ac:	4a c0       	rjmp	.+148    	; 0x1642 <main+0x4e0>
    15ae:	85 30       	cpi	r24, 0x05	; 5
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <main+0x452>
    15b2:	79 c1       	rjmp	.+754    	; 0x18a6 <main+0x744>
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	09 f4       	brne	.+2      	; 0x15ba <main+0x458>
    15b8:	eb c2       	rjmp	.+1494   	; 0x1b90 <main+0xa2e>
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
    15ba:	86 ee       	ldi	r24, 0xE6	; 230
    15bc:	93 e0       	ldi	r25, 0x03	; 3
    15be:	60 e1       	ldi	r22, 0x10	; 16
    15c0:	0e 94 c7 13 	call	0x278e	; 0x278e <writeAckPayload>
    15c4:	02 cf       	rjmp	.-508    	; 0x13ca <main+0x268>
			measBattery = 1;
		}

		if(irEnabled) {

			ir_move = e_get_data();
    15c6:	0e 94 44 14 	call	0x2888	; 0x2888 <e_get_data>
    15ca:	80 93 c0 03 	sts	0x03C0, r24

			if(command_received) {
    15ce:	90 91 c1 03 	lds	r25, 0x03C1
    15d2:	99 23       	and	r25, r25
    15d4:	41 f1       	breq	.+80     	; 0x1626 <main+0x4c4>

				command_received = 0;
    15d6:	10 92 c1 03 	sts	0x03C1, r1

				switch(ir_move) {
    15da:	86 30       	cpi	r24, 0x06	; 6
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <main+0x47e>
    15de:	90 c6       	rjmp	.+3360   	; 0x2300 <__stack+0x101>
    15e0:	87 30       	cpi	r24, 0x07	; 7
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <main+0x484>
    15e4:	94 c3       	rjmp	.+1832   	; 0x1d0e <main+0xbac>
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	09 f4       	brne	.+2      	; 0x15ec <main+0x48a>
    15ea:	aa c5       	rjmp	.+2900   	; 0x2140 <main+0xfde>
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <main+0x490>
    15f0:	50 c4       	rjmp	.+2208   	; 0x1e92 <main+0xd30>
    15f2:	88 23       	and	r24, r24
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <main+0x496>
    15f6:	c3 c4       	rjmp	.+2438   	; 0x1f7e <main+0xe1c>
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <main+0x49c>
    15fc:	9a c4       	rjmp	.+2356   	; 0x1f32 <main+0xdd0>
					case 32:	// program +
						cliffAvoidanceEnabled = 1;
						break;

					case 33:	// program -
						cliffAvoidanceEnabled = 0;
    15fe:	80 91 86 03 	lds	r24, 0x0386
    1602:	90 91 87 03 	lds	r25, 0x0387
    1606:	a0 91 88 03 	lds	r26, 0x0388
    160a:	b0 91 89 03 	lds	r27, 0x0389
    160e:	b5 95       	asr	r27
    1610:	a7 95       	ror	r26
    1612:	97 95       	ror	r25
    1614:	87 95       	ror	r24
    1616:	b5 95       	asr	r27
    1618:	a7 95       	ror	r26
    161a:	97 95       	ror	r25
    161c:	87 95       	ror	r24
	               	default:
	                 	break;

	            }	// switch

				speedr = pwm_right_desired >> 2;
    161e:	80 93 bd 03 	sts	0x03BD, r24
				speedl = pwm_right_desired >> 2;
    1622:	80 93 bc 03 	sts	0x03BC, r24
    1626:	80 91 d9 03 	lds	r24, 0x03D9
    162a:	90 91 da 03 	lds	r25, 0x03DA
    162e:	c1 ce       	rjmp	.-638    	; 0x13b2 <main+0x250>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    1630:	10 92 e1 03 	sts	0x03E1, r1
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    1634:	80 91 0b 02 	lds	r24, 0x020B
    1638:	80 93 e6 03 	sts	0x03E6, r24

			switch(packetId) {
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	09 f0       	breq	.+2      	; 0x1642 <main+0x4e0>
    1640:	b6 cf       	rjmp	.-148    	; 0x15ae <main+0x44c>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					currentProxValue = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
    1642:	20 91 39 03 	lds	r18, 0x0339
    1646:	30 91 3a 03 	lds	r19, 0x033A
    164a:	80 91 3b 03 	lds	r24, 0x033B
    164e:	90 91 3c 03 	lds	r25, 0x033C
    1652:	28 1b       	sub	r18, r24
    1654:	39 0b       	sbc	r19, r25
    1656:	30 93 61 03 	sts	0x0361, r19
    165a:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    165e:	37 fd       	sbrc	r19, 7
    1660:	40 c4       	rjmp	.+2176   	; 0x1ee2 <main+0xd80>
    1662:	92 2f       	mov	r25, r18
    1664:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[1] = currentProxValue&0xFF;
    1666:	90 93 e7 03 	sts	0x03E7, r25
					ackPayload[2] = currentProxValue>>8;
    166a:	80 93 e8 03 	sts	0x03E8, r24

					currentProxValue = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    166e:	20 91 49 03 	lds	r18, 0x0349
    1672:	30 91 4a 03 	lds	r19, 0x034A
    1676:	80 91 4b 03 	lds	r24, 0x034B
    167a:	90 91 4c 03 	lds	r25, 0x034C
    167e:	28 1b       	sub	r18, r24
    1680:	39 0b       	sbc	r19, r25
    1682:	30 93 61 03 	sts	0x0361, r19
    1686:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    168a:	37 fd       	sbrc	r19, 7
    168c:	27 c4       	rjmp	.+2126   	; 0x1edc <main+0xd7a>
    168e:	92 2f       	mov	r25, r18
    1690:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[3] = currentProxValue&0xFF;
    1692:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[4] = currentProxValue>>8;
    1696:	80 93 ea 03 	sts	0x03EA, r24

					currentProxValue = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    169a:	20 91 4d 03 	lds	r18, 0x034D
    169e:	30 91 4e 03 	lds	r19, 0x034E
    16a2:	80 91 4f 03 	lds	r24, 0x034F
    16a6:	90 91 50 03 	lds	r25, 0x0350
    16aa:	28 1b       	sub	r18, r24
    16ac:	39 0b       	sbc	r19, r25
    16ae:	30 93 61 03 	sts	0x0361, r19
    16b2:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    16b6:	37 fd       	sbrc	r19, 7
    16b8:	0e c4       	rjmp	.+2076   	; 0x1ed6 <main+0xd74>
    16ba:	92 2f       	mov	r25, r18
    16bc:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[5] = currentProxValue&0xFF;
    16be:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[6] = currentProxValue>>8;
    16c2:	80 93 ec 03 	sts	0x03EC, r24

					currentProxValue = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    16c6:	20 91 51 03 	lds	r18, 0x0351
    16ca:	30 91 52 03 	lds	r19, 0x0352
    16ce:	80 91 53 03 	lds	r24, 0x0353
    16d2:	90 91 54 03 	lds	r25, 0x0354
    16d6:	28 1b       	sub	r18, r24
    16d8:	39 0b       	sbc	r19, r25
    16da:	30 93 61 03 	sts	0x0361, r19
    16de:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    16e2:	37 fd       	sbrc	r19, 7
    16e4:	f5 c3       	rjmp	.+2026   	; 0x1ed0 <main+0xd6e>
    16e6:	92 2f       	mov	r25, r18
    16e8:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[7] = currentProxValue&0xFF;
    16ea:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[8] = currentProxValue>>8;
    16ee:	80 93 ee 03 	sts	0x03EE, r24

					currentProxValue = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    16f2:	20 91 55 03 	lds	r18, 0x0355
    16f6:	30 91 56 03 	lds	r19, 0x0356
    16fa:	80 91 57 03 	lds	r24, 0x0357
    16fe:	90 91 58 03 	lds	r25, 0x0358
    1702:	28 1b       	sub	r18, r24
    1704:	39 0b       	sbc	r19, r25
    1706:	30 93 61 03 	sts	0x0361, r19
    170a:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    170e:	37 fd       	sbrc	r19, 7
    1710:	d8 c3       	rjmp	.+1968   	; 0x1ec2 <main+0xd60>
    1712:	92 2f       	mov	r25, r18
    1714:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[9] = currentProxValue&0xFF;
    1716:	90 93 ef 03 	sts	0x03EF, r25
					ackPayload[10] = currentProxValue>>8;
    171a:	80 93 f0 03 	sts	0x03F0, r24

					ackPayload[11] = accX&0xFF;
    171e:	90 91 c4 03 	lds	r25, 0x03C4
    1722:	80 91 c5 03 	lds	r24, 0x03C5
    1726:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[12] = accX>>8;
    172a:	80 93 f2 03 	sts	0x03F2, r24
					ackPayload[13] = accY&0xFF;
    172e:	90 91 c6 03 	lds	r25, 0x03C6
    1732:	80 91 c7 03 	lds	r24, 0x03C7
    1736:	90 93 f3 03 	sts	0x03F3, r25
					ackPayload[14] = accY>>8;
    173a:	80 93 f4 03 	sts	0x03F4, r24
					ackPayload[15] = ir_move;			
    173e:	80 91 c0 03 	lds	r24, 0x03C0
    1742:	80 93 f5 03 	sts	0x03F5, r24
					packetId = 5;
    1746:	00 93 0b 02 	sts	0x020B, r16
					break;
    174a:	37 cf       	rjmp	.-402    	; 0x15ba <main+0x458>
			}

			if((rfData[3]&0b00100000)==0b00100000) {	// check the sixth bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    174c:	10 92 dc 03 	sts	0x03DC, r1
    1750:	23 cf       	rjmp	.-442    	; 0x1598 <main+0x436>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    1752:	10 92 11 02 	sts	0x0211, r1
    1756:	1c cf       	rjmp	.-456    	; 0x1590 <main+0x42e>
			compute_right_vel = 0;
		}

		if(update_pwm) {

			update_pwm = 0;
    1758:	10 92 bb 03 	sts	0x03BB, r1
			pwm_left = pwm_left_working;
    175c:	20 91 b7 03 	lds	r18, 0x03B7
    1760:	30 91 b8 03 	lds	r19, 0x03B8
    1764:	40 91 b9 03 	lds	r20, 0x03B9
    1768:	50 91 ba 03 	lds	r21, 0x03BA
    176c:	20 93 82 03 	sts	0x0382, r18
    1770:	30 93 83 03 	sts	0x0383, r19
    1774:	40 93 84 03 	sts	0x0384, r20
    1778:	50 93 85 03 	sts	0x0385, r21
			pwm_right = pwm_right_working;
    177c:	80 91 b3 03 	lds	r24, 0x03B3
    1780:	90 91 b4 03 	lds	r25, 0x03B4
    1784:	a0 91 b5 03 	lds	r26, 0x03B5
    1788:	b0 91 b6 03 	lds	r27, 0x03B6
    178c:	80 93 7e 03 	sts	0x037E, r24
    1790:	90 93 7f 03 	sts	0x037F, r25
    1794:	a0 93 80 03 	sts	0x0380, r26
    1798:	b0 93 81 03 	sts	0x0381, r27

			if(pwm_right >= 0) {
    179c:	b7 fd       	sbrc	r27, 7
    179e:	24 c3       	rjmp	.+1608   	; 0x1de8 <main+0xc86>
				OCR3A = (int)pwm_right;
    17a0:	90 93 99 00 	sts	0x0099, r25
    17a4:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    17a8:	57 fd       	sbrc	r21, 7
    17aa:	fc c2       	rjmp	.+1528   	; 0x1da4 <main+0xc42>
				OCR4A = pwm_left;
    17ac:	30 93 a9 00 	sts	0x00A9, r19
    17b0:	20 93 a8 00 	sts	0x00A8, r18
			} else {
				OCR4B = -pwm_left;
			}

			if(pwm_left == 0) {
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	41 05       	cpc	r20, r1
    17ba:	51 05       	cpc	r21, r1
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <main+0x65e>
    17be:	1c c3       	rjmp	.+1592   	; 0x1df8 <main+0xc96>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    17c0:	80 91 a0 00 	lds	r24, 0x00A0
    17c4:	8f 75       	andi	r24, 0x5F	; 95
    17c6:	80 93 a0 00 	sts	0x00A0, r24
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    17ca:	80 91 02 01 	lds	r24, 0x0102
    17ce:	87 7e       	andi	r24, 0xE7	; 231
    17d0:	80 93 02 01 	sts	0x0102, r24
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    17d4:	80 91 72 00 	lds	r24, 0x0072
    17d8:	89 7f       	andi	r24, 0xF9	; 249
    17da:	80 93 72 00 	sts	0x0072, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    17de:	80 91 72 00 	lds	r24, 0x0072
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
				TCCR4A |= (1 << COM4B1);		// enable OCB
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
			}

			if(pwm_right == 0) {
    17e8:	80 91 7e 03 	lds	r24, 0x037E
    17ec:	90 91 7f 03 	lds	r25, 0x037F
    17f0:	a0 91 80 03 	lds	r26, 0x0380
    17f4:	b0 91 81 03 	lds	r27, 0x0381
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	a1 05       	cpc	r26, r1
    17fc:	b1 05       	cpc	r27, r1
    17fe:	09 f0       	breq	.+2      	; 0x1802 <main+0x6a0>
    1800:	4c c1       	rjmp	.+664    	; 0x1a9a <main+0x938>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    1802:	80 91 90 00 	lds	r24, 0x0090
    1806:	8f 75       	andi	r24, 0x5F	; 95
    1808:	80 93 90 00 	sts	0x0090, r24
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    180c:	8e b1       	in	r24, 0x0e	; 14
    180e:	87 7e       	andi	r24, 0xE7	; 231
    1810:	8e b9       	out	0x0e, r24	; 14
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    1812:	80 91 71 00 	lds	r24, 0x0071
    1816:	89 7f       	andi	r24, 0xF9	; 249
    1818:	80 93 71 00 	sts	0x0071, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    181c:	80 91 71 00 	lds	r24, 0x0071
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	80 93 71 00 	sts	0x0071, r24
    1826:	8d cd       	rjmp	.-1254   	; 0x1342 <main+0x1e0>
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control

			if(start_control && left_vel_changed && right_vel_changed) {
    1828:	80 91 b0 03 	lds	r24, 0x03B0
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <main+0x6d0>
    1830:	d4 cd       	rjmp	.-1112   	; 0x13da <main+0x278>
    1832:	80 91 b1 03 	lds	r24, 0x03B1
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <main+0x6da>
    183a:	cf cd       	rjmp	.-1122   	; 0x13da <main+0x278>
    183c:	80 91 b2 03 	lds	r24, 0x03B2
    1840:	88 23       	and	r24, r24
    1842:	09 f4       	brne	.+2      	; 0x1846 <main+0x6e4>
    1844:	ca cd       	rjmp	.-1132   	; 0x13da <main+0x278>
				pwm_right_working = pwm_right_desired;
    1846:	80 91 86 03 	lds	r24, 0x0386
    184a:	90 91 87 03 	lds	r25, 0x0387
    184e:	a0 91 88 03 	lds	r26, 0x0388
    1852:	b0 91 89 03 	lds	r27, 0x0389
    1856:	80 93 b3 03 	sts	0x03B3, r24
    185a:	90 93 b4 03 	sts	0x03B4, r25
    185e:	a0 93 b5 03 	sts	0x03B5, r26
    1862:	b0 93 b6 03 	sts	0x03B6, r27
				pwm_left_working = pwm_left_desired;
    1866:	80 91 8a 03 	lds	r24, 0x038A
    186a:	90 91 8b 03 	lds	r25, 0x038B
    186e:	a0 91 8c 03 	lds	r26, 0x038C
    1872:	b0 91 8d 03 	lds	r27, 0x038D
    1876:	80 93 b7 03 	sts	0x03B7, r24
    187a:	90 93 b8 03 	sts	0x03B8, r25
    187e:	a0 93 b9 03 	sts	0x03B9, r26
    1882:	b0 93 ba 03 	sts	0x03BA, r27
				start_control = 0;
    1886:	10 92 b0 03 	sts	0x03B0, r1
				left_vel_changed = 0;
    188a:	10 92 b1 03 	sts	0x03B1, r1
				right_vel_changed = 0;
    188e:	10 92 b2 03 	sts	0x03B2, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    1892:	87 eb       	ldi	r24, 0xB7	; 183
    1894:	93 e0       	ldi	r25, 0x03	; 3
    1896:	63 eb       	ldi	r22, 0xB3	; 179
    1898:	73 e0       	ldi	r23, 0x03	; 3
    189a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <start_orizzontal_speed_control>
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    189e:	10 93 bb 03 	sts	0x03BB, r17
    18a2:	21 e0       	ldi	r18, 0x01	; 1
    18a4:	1f cd       	rjmp	.-1474   	; 0x12e4 <main+0x182>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	09 f4       	brne	.+2      	; 0x18ac <main+0x74a>
    18aa:	16 c1       	rjmp	.+556    	; 0x1ad8 <main+0x976>
    18ac:	86 30       	cpi	r24, 0x06	; 6
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <main+0x750>
    18b0:	84 ce       	rjmp	.-760    	; 0x15ba <main+0x458>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    18b2:	80 91 39 03 	lds	r24, 0x0339
    18b6:	90 91 3a 03 	lds	r25, 0x033A
    18ba:	80 93 e7 03 	sts	0x03E7, r24
					ackPayload[2] = proximityValue[8]>>8;
    18be:	80 91 39 03 	lds	r24, 0x0339
    18c2:	90 91 3a 03 	lds	r25, 0x033A
    18c6:	90 93 e8 03 	sts	0x03E8, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    18ca:	80 91 49 03 	lds	r24, 0x0349
    18ce:	90 91 4a 03 	lds	r25, 0x034A
    18d2:	80 93 e9 03 	sts	0x03E9, r24
					ackPayload[4] = proximityValue[16]>>8;
    18d6:	80 91 49 03 	lds	r24, 0x0349
    18da:	90 91 4a 03 	lds	r25, 0x034A
    18de:	90 93 ea 03 	sts	0x03EA, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    18e2:	80 91 4d 03 	lds	r24, 0x034D
    18e6:	90 91 4e 03 	lds	r25, 0x034E
    18ea:	80 93 eb 03 	sts	0x03EB, r24
					ackPayload[6] = proximityValue[18]>>8;
    18ee:	80 91 4d 03 	lds	r24, 0x034D
    18f2:	90 91 4e 03 	lds	r25, 0x034E
    18f6:	90 93 ec 03 	sts	0x03EC, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    18fa:	80 91 51 03 	lds	r24, 0x0351
    18fe:	90 91 52 03 	lds	r25, 0x0352
    1902:	80 93 ed 03 	sts	0x03ED, r24
					ackPayload[8] = proximityValue[20]>>8;
    1906:	80 91 51 03 	lds	r24, 0x0351
    190a:	90 91 52 03 	lds	r25, 0x0352
    190e:	90 93 ee 03 	sts	0x03EE, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    1912:	80 91 55 03 	lds	r24, 0x0355
    1916:	90 91 56 03 	lds	r25, 0x0356
    191a:	80 93 ef 03 	sts	0x03EF, r24
					ackPayload[10] = proximityValue[22]>>8;
    191e:	80 91 55 03 	lds	r24, 0x0355
    1922:	90 91 56 03 	lds	r25, 0x0356
    1926:	90 93 f0 03 	sts	0x03F0, r25
					ackPayload[11] = accZ&0xFF;
    192a:	90 91 c8 03 	lds	r25, 0x03C8
    192e:	80 91 c9 03 	lds	r24, 0x03C9
    1932:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[12] = accZ>>8;
    1936:	80 93 f2 03 	sts	0x03F2, r24
					ackPayload[13] = batteryLevel&0xFF;
    193a:	90 91 5d 03 	lds	r25, 0x035D
    193e:	80 91 5e 03 	lds	r24, 0x035E
    1942:	90 93 f3 03 	sts	0x03F3, r25
					ackPayload[14] = batteryLevel>>8;
    1946:	80 93 f4 03 	sts	0x03F4, r24
					ackPayload[15] = 0;				
    194a:	10 92 f5 03 	sts	0x03F5, r1
					packetId = 3;
    194e:	f3 e0       	ldi	r31, 0x03	; 3
    1950:	f0 93 0b 02 	sts	0x020B, r31
					break;											
    1954:	32 ce       	rjmp	.-924    	; 0x15ba <main+0x458>
			

			if(rfData[3]== 1) {			// turn on one IR
				//LED_IR1 = 0;
				//LED_IR2 = 1;
				LED_IR1_LOW;
    1956:	44 98       	cbi	0x08, 4	; 8
				LED_IR2_HIGH;
    1958:	45 9a       	sbi	0x08, 5	; 8
    195a:	16 ce       	rjmp	.-980    	; 0x1588 <main+0x426>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    195c:	87 2f       	mov	r24, r23
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	aa 27       	eor	r26, r26
    196a:	97 fd       	sbrc	r25, 7
    196c:	a0 95       	com	r26
    196e:	ba 2f       	mov	r27, r26
    1970:	80 93 8a 03 	sts	0x038A, r24
    1974:	90 93 8b 03 	sts	0x038B, r25
    1978:	a0 93 8c 03 	sts	0x038C, r26
    197c:	b0 93 8d 03 	sts	0x038D, r27
    1980:	73 cd       	rjmp	.-1306   	; 0x1468 <main+0x306>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	9c 01       	movw	r18, r24
    198e:	44 27       	eor	r20, r20
    1990:	37 fd       	sbrc	r19, 7
    1992:	40 95       	com	r20
    1994:	54 2f       	mov	r21, r20
    1996:	20 93 86 03 	sts	0x0386, r18
    199a:	30 93 87 03 	sts	0x0387, r19
    199e:	40 93 88 03 	sts	0x0388, r20
    19a2:	50 93 89 03 	sts	0x0389, r21
    19a6:	49 cd       	rjmp	.-1390   	; 0x143a <main+0x2d8>

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    19a8:	20 91 49 03 	lds	r18, 0x0349
    19ac:	30 91 4a 03 	lds	r19, 0x034A
    19b0:	80 91 4b 03 	lds	r24, 0x034B
    19b4:	90 91 4c 03 	lds	r25, 0x034C
    19b8:	28 1b       	sub	r18, r24
    19ba:	39 0b       	sbc	r19, r25
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    19bc:	e0 91 4d 03 	lds	r30, 0x034D
    19c0:	f0 91 4e 03 	lds	r31, 0x034E
    19c4:	80 91 4f 03 	lds	r24, 0x034F
    19c8:	90 91 50 03 	lds	r25, 0x0350
    19cc:	e8 1b       	sub	r30, r24
    19ce:	f9 0b       	sbc	r31, r25
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    19d0:	60 91 51 03 	lds	r22, 0x0351
    19d4:	70 91 52 03 	lds	r23, 0x0352
    19d8:	80 91 53 03 	lds	r24, 0x0353
    19dc:	90 91 54 03 	lds	r25, 0x0354
    19e0:	68 1b       	sub	r22, r24
    19e2:	79 0b       	sbc	r23, r25
    19e4:	77 fd       	sbrc	r23, 7
    19e6:	a2 c2       	rjmp	.+1348   	; 0x1f2c <main+0xdca>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    19e8:	40 91 55 03 	lds	r20, 0x0355
    19ec:	50 91 56 03 	lds	r21, 0x0356
    19f0:	80 91 57 03 	lds	r24, 0x0357
    19f4:	90 91 58 03 	lds	r25, 0x0358
    19f8:	48 1b       	sub	r20, r24
    19fa:	59 0b       	sbc	r21, r25
    19fc:	57 fd       	sbrc	r21, 7
    19fe:	93 c2       	rjmp	.+1318   	; 0x1f26 <main+0xdc4>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    1a00:	37 fd       	sbrc	r19, 7
    1a02:	8e c2       	rjmp	.+1308   	; 0x1f20 <main+0xdbe>
    1a04:	30 93 e3 03 	sts	0x03E3, r19
    1a08:	20 93 e2 03 	sts	0x03E2, r18
	minGround = GROUND_LEFT;
    1a0c:	70 92 15 02 	sts	0x0215, r7
    1a10:	60 92 14 02 	sts	0x0214, r6
	if(g1 < minGroundValue) {
    1a14:	cf 01       	movw	r24, r30
    1a16:	f7 fd       	sbrc	r31, 7
    1a18:	80 c2       	rjmp	.+1280   	; 0x1f1a <main+0xdb8>
    1a1a:	82 17       	cp	r24, r18
    1a1c:	93 07       	cpc	r25, r19
    1a1e:	58 f4       	brcc	.+22     	; 0x1a36 <main+0x8d4>
		minGroundValue = g1;
    1a20:	90 93 e3 03 	sts	0x03E3, r25
    1a24:	80 93 e2 03 	sts	0x03E2, r24
		minGround = GROUND_CENTER_LEFT;
    1a28:	22 e0       	ldi	r18, 0x02	; 2
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	30 93 15 02 	sts	0x0215, r19
    1a30:	20 93 14 02 	sts	0x0214, r18
    1a34:	9c 01       	movw	r18, r24
	}
	if(g2 < minGroundValue) {
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	58 f4       	brcc	.+22     	; 0x1a52 <main+0x8f0>
		minGroundValue = g2;
    1a3c:	70 93 e3 03 	sts	0x03E3, r23
    1a40:	60 93 e2 03 	sts	0x03E2, r22
		minGround = GROUND_CENTER_RIGHT;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	90 93 15 02 	sts	0x0215, r25
    1a4c:	80 93 14 02 	sts	0x0214, r24
    1a50:	9b 01       	movw	r18, r22
	}
	if(g3 < minGroundValue) {
    1a52:	42 17       	cp	r20, r18
    1a54:	53 07       	cpc	r21, r19
    1a56:	48 f4       	brcc	.+18     	; 0x1a6a <main+0x908>
		minGroundValue = g3;
    1a58:	50 93 e3 03 	sts	0x03E3, r21
    1a5c:	40 93 e2 03 	sts	0x03E2, r20
		minGround = GROUND_RIGHT;
    1a60:	10 92 15 02 	sts	0x0215, r1
    1a64:	10 92 14 02 	sts	0x0214, r1
    1a68:	9a 01       	movw	r18, r20
	}

	if(minGroundValue <= CLIFF_THR) {
    1a6a:	24 37       	cpi	r18, 0x74	; 116
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <main+0x910>
    1a70:	34 cc       	rjmp	.-1944   	; 0x12da <main+0x178>
		pwm_right_working = 0;
    1a72:	10 92 b3 03 	sts	0x03B3, r1
    1a76:	10 92 b4 03 	sts	0x03B4, r1
    1a7a:	10 92 b5 03 	sts	0x03B5, r1
    1a7e:	10 92 b6 03 	sts	0x03B6, r1
		pwm_left_working = 0;
    1a82:	10 92 b7 03 	sts	0x03B7, r1
    1a86:	10 92 b8 03 	sts	0x03B8, r1
    1a8a:	10 92 b9 03 	sts	0x03B9, r1
    1a8e:	10 92 ba 03 	sts	0x03BA, r1
    1a92:	23 cc       	rjmp	.-1978   	; 0x12da <main+0x178>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
				pwm_left_working = pwm_left_desired;
				
				if(obstacleAvoidanceEnabled) {
					//PORTB &= ~(1 << 7);
					obstacleAvoidance();
    1a94:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <obstacleAvoidance>
    1a98:	1b cc       	rjmp	.-1994   	; 0x12d0 <main+0x16e>
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			}else if(pwm_right > 0) {   		// move forward
    1a9a:	18 16       	cp	r1, r24
    1a9c:	19 06       	cpc	r1, r25
    1a9e:	1a 06       	cpc	r1, r26
    1aa0:	1b 06       	cpc	r1, r27
    1aa2:	0c f0       	brlt	.+2      	; 0x1aa6 <main+0x944>
    1aa4:	82 c4       	rjmp	.+2308   	; 0x23aa <__stack+0x1ab>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    1aa6:	80 91 90 00 	lds	r24, 0x0090
    1aaa:	8f 7d       	andi	r24, 0xDF	; 223
    1aac:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    1ab0:	80 91 71 00 	lds	r24, 0x0071
    1ab4:	8b 7f       	andi	r24, 0xFB	; 251
    1ab6:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 4);				// output to 0
    1aba:	74 98       	cbi	0x0e, 4	; 14
				TCCR3A |= (1 << COM3A1);		// enable OCA
    1abc:	80 91 90 00 	lds	r24, 0x0090
    1ac0:	80 68       	ori	r24, 0x80	; 128
    1ac2:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    1ac6:	80 91 71 00 	lds	r24, 0x0071
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	80 93 71 00 	sts	0x0071, r24
    1ad0:	38 cc       	rjmp	.-1936   	; 0x1342 <main+0x1e0>
				LED_IR1_LOW;
				LED_IR2_HIGH;
			} else if(rfData[3]==2) {	// turn on two IRs
				//LED_IR1 = 1;
				//LED_IR2 = 0;
				LED_IR1_HIGH;
    1ad2:	44 9a       	sbi	0x08, 4	; 8
				LED_IR2_LOW;
    1ad4:	45 98       	cbi	0x08, 5	; 8
    1ad6:	58 cd       	rjmp	.-1360   	; 0x1588 <main+0x426>
					ackPayload[15] = ir_move;			
					packetId = 5;
					break;
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    1ad8:	80 91 29 03 	lds	r24, 0x0329
    1adc:	90 91 2a 03 	lds	r25, 0x032A
    1ae0:	80 93 e7 03 	sts	0x03E7, r24
					ackPayload[2] = proximityValue[0]>>8;
    1ae4:	80 91 29 03 	lds	r24, 0x0329
    1ae8:	90 91 2a 03 	lds	r25, 0x032A
    1aec:	90 93 e8 03 	sts	0x03E8, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    1af0:	80 91 2d 03 	lds	r24, 0x032D
    1af4:	90 91 2e 03 	lds	r25, 0x032E
    1af8:	80 93 e9 03 	sts	0x03E9, r24
					ackPayload[4] = proximityValue[2]>>8;
    1afc:	80 91 2d 03 	lds	r24, 0x032D
    1b00:	90 91 2e 03 	lds	r25, 0x032E
    1b04:	90 93 ea 03 	sts	0x03EA, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    1b08:	80 91 31 03 	lds	r24, 0x0331
    1b0c:	90 91 32 03 	lds	r25, 0x0332
    1b10:	80 93 eb 03 	sts	0x03EB, r24
					ackPayload[6] = proximityValue[4]>>8;
    1b14:	80 91 31 03 	lds	r24, 0x0331
    1b18:	90 91 32 03 	lds	r25, 0x0332
    1b1c:	90 93 ec 03 	sts	0x03EC, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    1b20:	80 91 35 03 	lds	r24, 0x0335
    1b24:	90 91 36 03 	lds	r25, 0x0336
    1b28:	80 93 ed 03 	sts	0x03ED, r24
					ackPayload[8] = proximityValue[6]>>8;
    1b2c:	80 91 35 03 	lds	r24, 0x0335
    1b30:	90 91 36 03 	lds	r25, 0x0336
    1b34:	90 93 ee 03 	sts	0x03EE, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    1b38:	80 91 3d 03 	lds	r24, 0x033D
    1b3c:	90 91 3e 03 	lds	r25, 0x033E
    1b40:	80 93 ef 03 	sts	0x03EF, r24
					ackPayload[10] = proximityValue[10]>>8;
    1b44:	80 91 3d 03 	lds	r24, 0x033D
    1b48:	90 91 3e 03 	lds	r25, 0x033E
    1b4c:	90 93 f0 03 	sts	0x03F0, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    1b50:	80 91 41 03 	lds	r24, 0x0341
    1b54:	90 91 42 03 	lds	r25, 0x0342
    1b58:	80 93 f1 03 	sts	0x03F1, r24
					ackPayload[12] = proximityValue[12]>>8;
    1b5c:	80 91 41 03 	lds	r24, 0x0341
    1b60:	90 91 42 03 	lds	r25, 0x0342
    1b64:	90 93 f2 03 	sts	0x03F2, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    1b68:	80 91 45 03 	lds	r24, 0x0345
    1b6c:	90 91 46 03 	lds	r25, 0x0346
    1b70:	80 93 f3 03 	sts	0x03F3, r24
					ackPayload[14] = proximityValue[14]>>8;
    1b74:	80 91 45 03 	lds	r24, 0x0345
    1b78:	90 91 46 03 	lds	r25, 0x0346
    1b7c:	90 93 f4 03 	sts	0x03F4, r25
					ackPayload[15] = currentSelector;
    1b80:	80 91 db 03 	lds	r24, 0x03DB
    1b84:	80 93 f5 03 	sts	0x03F5, r24
					packetId = 6;
    1b88:	e6 e0       	ldi	r30, 0x06	; 6
    1b8a:	e0 93 0b 02 	sts	0x020B, r30
					break;	
    1b8e:	15 cd       	rjmp	.-1494   	; 0x15ba <main+0x458>

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					currentProxValue = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
    1b90:	20 91 29 03 	lds	r18, 0x0329
    1b94:	30 91 2a 03 	lds	r19, 0x032A
    1b98:	80 91 2b 03 	lds	r24, 0x032B
    1b9c:	90 91 2c 03 	lds	r25, 0x032C
    1ba0:	28 1b       	sub	r18, r24
    1ba2:	39 0b       	sbc	r19, r25
    1ba4:	30 93 61 03 	sts	0x0361, r19
    1ba8:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1bac:	37 fd       	sbrc	r19, 7
    1bae:	b2 c1       	rjmp	.+868    	; 0x1f14 <main+0xdb2>
    1bb0:	92 2f       	mov	r25, r18
    1bb2:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[1] = currentProxValue&0xFF;
    1bb4:	90 93 e7 03 	sts	0x03E7, r25
					ackPayload[2] = currentProxValue>>8;
    1bb8:	80 93 e8 03 	sts	0x03E8, r24

					currentProxValue = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
    1bbc:	20 91 2d 03 	lds	r18, 0x032D
    1bc0:	30 91 2e 03 	lds	r19, 0x032E
    1bc4:	80 91 2f 03 	lds	r24, 0x032F
    1bc8:	90 91 30 03 	lds	r25, 0x0330
    1bcc:	28 1b       	sub	r18, r24
    1bce:	39 0b       	sbc	r19, r25
    1bd0:	30 93 61 03 	sts	0x0361, r19
    1bd4:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1bd8:	37 fd       	sbrc	r19, 7
    1bda:	99 c1       	rjmp	.+818    	; 0x1f0e <main+0xdac>
    1bdc:	92 2f       	mov	r25, r18
    1bde:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}					
					ackPayload[3] = currentProxValue&0xFF;
    1be0:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[4] = currentProxValue>>8;
    1be4:	80 93 ea 03 	sts	0x03EA, r24

					currentProxValue = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
    1be8:	20 91 31 03 	lds	r18, 0x0331
    1bec:	30 91 32 03 	lds	r19, 0x0332
    1bf0:	80 91 33 03 	lds	r24, 0x0333
    1bf4:	90 91 34 03 	lds	r25, 0x0334
    1bf8:	28 1b       	sub	r18, r24
    1bfa:	39 0b       	sbc	r19, r25
    1bfc:	30 93 61 03 	sts	0x0361, r19
    1c00:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1c04:	37 fd       	sbrc	r19, 7
    1c06:	80 c1       	rjmp	.+768    	; 0x1f08 <main+0xda6>
    1c08:	92 2f       	mov	r25, r18
    1c0a:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[5] = currentProxValue&0xFF;
    1c0c:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[6] = currentProxValue>>8;
    1c10:	80 93 ec 03 	sts	0x03EC, r24

					currentProxValue = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
    1c14:	20 91 35 03 	lds	r18, 0x0335
    1c18:	30 91 36 03 	lds	r19, 0x0336
    1c1c:	80 91 37 03 	lds	r24, 0x0337
    1c20:	90 91 38 03 	lds	r25, 0x0338
    1c24:	28 1b       	sub	r18, r24
    1c26:	39 0b       	sbc	r19, r25
    1c28:	30 93 61 03 	sts	0x0361, r19
    1c2c:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1c30:	37 fd       	sbrc	r19, 7
    1c32:	67 c1       	rjmp	.+718    	; 0x1f02 <main+0xda0>
    1c34:	92 2f       	mov	r25, r18
    1c36:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[7] = currentProxValue&0xFF;
    1c38:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[8] = currentProxValue>>8;
    1c3c:	80 93 ee 03 	sts	0x03EE, r24

					currentProxValue = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
    1c40:	20 91 3d 03 	lds	r18, 0x033D
    1c44:	30 91 3e 03 	lds	r19, 0x033E
    1c48:	80 91 3f 03 	lds	r24, 0x033F
    1c4c:	90 91 40 03 	lds	r25, 0x0340
    1c50:	28 1b       	sub	r18, r24
    1c52:	39 0b       	sbc	r19, r25
    1c54:	30 93 61 03 	sts	0x0361, r19
    1c58:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1c5c:	37 fd       	sbrc	r19, 7
    1c5e:	4e c1       	rjmp	.+668    	; 0x1efc <main+0xd9a>
    1c60:	92 2f       	mov	r25, r18
    1c62:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[9] = currentProxValue&0xFF;
    1c64:	90 93 ef 03 	sts	0x03EF, r25
					ackPayload[10] = currentProxValue>>8;
    1c68:	80 93 f0 03 	sts	0x03F0, r24

					currentProxValue = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
    1c6c:	20 91 41 03 	lds	r18, 0x0341
    1c70:	30 91 42 03 	lds	r19, 0x0342
    1c74:	80 91 43 03 	lds	r24, 0x0343
    1c78:	90 91 44 03 	lds	r25, 0x0344
    1c7c:	28 1b       	sub	r18, r24
    1c7e:	39 0b       	sbc	r19, r25
    1c80:	30 93 61 03 	sts	0x0361, r19
    1c84:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1c88:	37 fd       	sbrc	r19, 7
    1c8a:	35 c1       	rjmp	.+618    	; 0x1ef6 <main+0xd94>
    1c8c:	92 2f       	mov	r25, r18
    1c8e:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[11] = currentProxValue&0xFF;
    1c90:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[12] = currentProxValue>>8;
    1c94:	80 93 f2 03 	sts	0x03F2, r24

					currentProxValue = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
    1c98:	20 91 45 03 	lds	r18, 0x0345
    1c9c:	30 91 46 03 	lds	r19, 0x0346
    1ca0:	80 91 47 03 	lds	r24, 0x0347
    1ca4:	90 91 48 03 	lds	r25, 0x0348
    1ca8:	28 1b       	sub	r18, r24
    1caa:	39 0b       	sbc	r19, r25
    1cac:	30 93 61 03 	sts	0x0361, r19
    1cb0:	20 93 60 03 	sts	0x0360, r18
					if(currentProxValue < 0) {
    1cb4:	37 fd       	sbrc	r19, 7
    1cb6:	18 c1       	rjmp	.+560    	; 0x1ee8 <main+0xd86>
    1cb8:	92 2f       	mov	r25, r18
    1cba:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[13] = currentProxValue&0xFF;
    1cbc:	90 93 f3 03 	sts	0x03F3, r25
					ackPayload[14] = currentProxValue>>8;	
    1cc0:	80 93 f4 03 	sts	0x03F4, r24

					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
    1cc4:	80 91 03 01 	lds	r24, 0x0103
    1cc8:	20 91 03 01 	lds	r18, 0x0103
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	20 72       	andi	r18, 0x20	; 32
    1cd0:	30 70       	andi	r19, 0x00	; 0
    1cd2:	35 95       	asr	r19
    1cd4:	27 95       	ror	r18
    1cd6:	35 95       	asr	r19
    1cd8:	27 95       	ror	r18
    1cda:	35 95       	asr	r19
    1cdc:	27 95       	ror	r18
    1cde:	35 95       	asr	r19
    1ce0:	27 95       	ror	r18
    1ce2:	35 95       	asr	r19
    1ce4:	27 95       	ror	r18
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	80 71       	andi	r24, 0x10	; 16
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	95 95       	asr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	95 95       	asr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	95 95       	asr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	95 95       	asr	r25
    1cfe:	87 95       	ror	r24
    1d00:	82 2b       	or	r24, r18
    1d02:	80 93 f5 03 	sts	0x03F5, r24
					packetId = 4;
    1d06:	b4 e0       	ldi	r27, 0x04	; 4
    1d08:	b0 93 0b 02 	sts	0x020B, r27
					break;
    1d0c:	56 cc       	rjmp	.-1876   	; 0x15ba <main+0x458>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    1d0e:	80 31       	cpi	r24, 0x10	; 16
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <main+0xbb2>
    1d12:	e3 c2       	rjmp	.+1478   	; 0x22da <__stack+0xdb>
    1d14:	81 31       	cpi	r24, 0x11	; 17
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <main+0xbb8>
    1d18:	a1 c0       	rjmp	.+322    	; 0x1e5c <main+0xcfa>
    1d1a:	88 30       	cpi	r24, 0x08	; 8
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <main+0xbbe>
    1d1e:	8d c2       	rjmp	.+1306   	; 0x223a <__stack+0x3b>
    1d20:	88 30       	cpi	r24, 0x08	; 8
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <main+0xbc4>
    1d24:	60 c2       	rjmp	.+1216   	; 0x21e6 <main+0x1084>
    1d26:	89 30       	cpi	r24, 0x09	; 9
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <main+0xbca>
    1d2a:	69 cc       	rjmp	.-1838   	; 0x15fe <main+0x49c>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    1d2c:	80 91 8a 03 	lds	r24, 0x038A
    1d30:	90 91 8b 03 	lds	r25, 0x038B
    1d34:	a0 91 8c 03 	lds	r26, 0x038C
    1d38:	b0 91 8d 03 	lds	r27, 0x038D
    1d3c:	4e 97       	sbiw	r24, 0x1e	; 30
    1d3e:	a1 09       	sbc	r26, r1
    1d40:	b1 09       	sbc	r27, r1
    1d42:	80 93 8a 03 	sts	0x038A, r24
    1d46:	90 93 8b 03 	sts	0x038B, r25
    1d4a:	a0 93 8c 03 	sts	0x038C, r26
    1d4e:	b0 93 8d 03 	sts	0x038D, r27
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1d52:	8a 39       	cpi	r24, 0x9A	; 154
    1d54:	5d ef       	ldi	r21, 0xFD	; 253
    1d56:	95 07       	cpc	r25, r21
    1d58:	5f ef       	ldi	r21, 0xFF	; 255
    1d5a:	a5 07       	cpc	r26, r21
    1d5c:	5f ef       	ldi	r21, 0xFF	; 255
    1d5e:	b5 07       	cpc	r27, r21
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <main+0xc02>
    1d62:	6b c0       	rjmp	.+214    	; 0x1e3a <main+0xcd8>
    1d64:	8a e9       	ldi	r24, 0x9A	; 154
    1d66:	9d ef       	ldi	r25, 0xFD	; 253
    1d68:	af ef       	ldi	r26, 0xFF	; 255
    1d6a:	bf ef       	ldi	r27, 0xFF	; 255
    1d6c:	80 93 8a 03 	sts	0x038A, r24
    1d70:	90 93 8b 03 	sts	0x038B, r25
    1d74:	a0 93 8c 03 	sts	0x038C, r26
    1d78:	b0 93 8d 03 	sts	0x038D, r27
    1d7c:	80 91 86 03 	lds	r24, 0x0386
    1d80:	90 91 87 03 	lds	r25, 0x0387
    1d84:	a0 91 88 03 	lds	r26, 0x0388
    1d88:	b0 91 89 03 	lds	r27, 0x0389
    1d8c:	b5 95       	asr	r27
    1d8e:	a7 95       	ror	r26
    1d90:	97 95       	ror	r25
    1d92:	87 95       	ror	r24
    1d94:	b5 95       	asr	r27
    1d96:	a7 95       	ror	r26
    1d98:	97 95       	ror	r25
    1d9a:	87 95       	ror	r24
    1d9c:	40 cc       	rjmp	.-1920   	; 0x161e <main+0x4bc>
				LED_IR1_HIGH;
				LED_IR2_LOW;
			} else if(rfData[3]==3) {	// turn on all three IRs
				//LED_IR1 = 0;
				//LED_IR2 = 0;											
				LED_IR1_LOW;
    1d9e:	44 98       	cbi	0x08, 4	; 8
				LED_IR2_LOW;
    1da0:	45 98       	cbi	0x08, 5	; 8
    1da2:	f2 cb       	rjmp	.-2076   	; 0x1588 <main+0x426>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    1da4:	88 27       	eor	r24, r24
    1da6:	99 27       	eor	r25, r25
    1da8:	82 1b       	sub	r24, r18
    1daa:	93 0b       	sbc	r25, r19
    1dac:	90 93 ab 00 	sts	0x00AB, r25
    1db0:	80 93 aa 00 	sts	0x00AA, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
			} else if(pwm_left < 0) {      		// move backward
				// select channel 14 to sample left current
				//currentMotLeftChannel = 14;
				TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    1db4:	80 91 a0 00 	lds	r24, 0x00A0
    1db8:	8f 77       	andi	r24, 0x7F	; 127
    1dba:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    1dbe:	80 91 72 00 	lds	r24, 0x0072
    1dc2:	8d 7f       	andi	r24, 0xFD	; 253
    1dc4:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
    1dc8:	80 91 02 01 	lds	r24, 0x0102
    1dcc:	87 7f       	andi	r24, 0xF7	; 247
    1dce:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4B1);		// enable OCB
    1dd2:	80 91 a0 00 	lds	r24, 0x00A0
    1dd6:	80 62       	ori	r24, 0x20	; 32
    1dd8:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    1ddc:	80 91 72 00 	lds	r24, 0x0072
    1de0:	84 60       	ori	r24, 0x04	; 4
    1de2:	80 93 72 00 	sts	0x0072, r24
    1de6:	00 cd       	rjmp	.-1536   	; 0x17e8 <main+0x686>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    1de8:	90 95       	com	r25
    1dea:	81 95       	neg	r24
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	90 93 9b 00 	sts	0x009B, r25
    1df2:	80 93 9a 00 	sts	0x009A, r24
    1df6:	d8 cc       	rjmp	.-1616   	; 0x17a8 <main+0x646>
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			} else if(pwm_left > 0) {   		// move forward
    1df8:	12 16       	cp	r1, r18
    1dfa:	13 06       	cpc	r1, r19
    1dfc:	14 06       	cpc	r1, r20
    1dfe:	15 06       	cpc	r1, r21
    1e00:	cc f6       	brge	.-78     	; 0x1db4 <main+0xc52>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    1e02:	80 91 a0 00 	lds	r24, 0x00A0
    1e06:	8f 7d       	andi	r24, 0xDF	; 223
    1e08:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    1e0c:	80 91 72 00 	lds	r24, 0x0072
    1e10:	8b 7f       	andi	r24, 0xFB	; 251
    1e12:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 4);				// output to 0
    1e16:	80 91 02 01 	lds	r24, 0x0102
    1e1a:	8f 7e       	andi	r24, 0xEF	; 239
    1e1c:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
    1e20:	80 91 a0 00 	lds	r24, 0x00A0
    1e24:	80 68       	ori	r24, 0x80	; 128
    1e26:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    1e2a:	80 91 72 00 	lds	r24, 0x0072
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	80 93 72 00 	sts	0x0072, r24
    1e34:	d9 cc       	rjmp	.-1614   	; 0x17e8 <main+0x686>
					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
						break;

					case 32:	// program +
						cliffAvoidanceEnabled = 1;
    1e36:	10 93 e1 03 	sts	0x03E1, r17
    1e3a:	80 91 86 03 	lds	r24, 0x0386
    1e3e:	90 91 87 03 	lds	r25, 0x0387
    1e42:	a0 91 88 03 	lds	r26, 0x0388
    1e46:	b0 91 89 03 	lds	r27, 0x0389
    1e4a:	b5 95       	asr	r27
    1e4c:	a7 95       	ror	r26
    1e4e:	97 95       	ror	r25
    1e50:	87 95       	ror	r24
    1e52:	b5 95       	asr	r27
    1e54:	a7 95       	ror	r26
    1e56:	97 95       	ror	r25
    1e58:	87 95       	ror	r24
						break;
    1e5a:	e1 cb       	rjmp	.-2110   	; 0x161e <main+0x4bc>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    1e5c:	80 32       	cpi	r24, 0x20	; 32
    1e5e:	59 f3       	breq	.-42     	; 0x1e36 <main+0xcd4>
    1e60:	81 32       	cpi	r24, 0x21	; 33
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <main+0xd04>
    1e64:	6a c1       	rjmp	.+724    	; 0x213a <main+0xfd8>
    1e66:	81 31       	cpi	r24, 0x11	; 17
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <main+0xd0a>
    1e6a:	c9 cb       	rjmp	.-2158   	; 0x15fe <main+0x49c>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;
					
					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    1e6c:	10 92 dc 03 	sts	0x03DC, r1
    1e70:	80 91 86 03 	lds	r24, 0x0386
    1e74:	90 91 87 03 	lds	r25, 0x0387
    1e78:	a0 91 88 03 	lds	r26, 0x0388
    1e7c:	b0 91 89 03 	lds	r27, 0x0389
    1e80:	b5 95       	asr	r27
    1e82:	a7 95       	ror	r26
    1e84:	97 95       	ror	r25
    1e86:	87 95       	ror	r24
    1e88:	b5 95       	asr	r27
    1e8a:	a7 95       	ror	r26
    1e8c:	97 95       	ror	r25
    1e8e:	87 95       	ror	r24
						break;
    1e90:	c6 cb       	rjmp	.-2164   	; 0x161e <main+0x4bc>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    1e92:	84 30       	cpi	r24, 0x04	; 4
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <main+0xd36>
    1e96:	f8 c0       	rjmp	.+496    	; 0x2088 <main+0xf26>
    1e98:	85 30       	cpi	r24, 0x05	; 5
    1e9a:	08 f4       	brcc	.+2      	; 0x1e9e <main+0xd3c>
    1e9c:	c0 c0       	rjmp	.+384    	; 0x201e <main+0xebc>

					case 5:	// stop motors
						pwm_right_desired = 0;
    1e9e:	10 92 86 03 	sts	0x0386, r1
    1ea2:	10 92 87 03 	sts	0x0387, r1
    1ea6:	10 92 88 03 	sts	0x0388, r1
    1eaa:	10 92 89 03 	sts	0x0389, r1
						pwm_left_desired = 0;
    1eae:	10 92 8a 03 	sts	0x038A, r1
    1eb2:	10 92 8b 03 	sts	0x038B, r1
    1eb6:	10 92 8c 03 	sts	0x038C, r1
    1eba:	10 92 8d 03 	sts	0x038D, r1
						break;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	ae cb       	rjmp	.-2212   	; 0x161e <main+0x4bc>
					ackPayload[7] = currentProxValue&0xFF;
					ackPayload[8] = currentProxValue>>8;

					currentProxValue = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
						currentProxValue = 0;
    1ec2:	10 92 61 03 	sts	0x0361, r1
    1ec6:	10 92 60 03 	sts	0x0360, r1
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	23 cc       	rjmp	.-1978   	; 0x1716 <main+0x5b4>
					}
					ackPayload[5] = currentProxValue&0xFF;
					ackPayload[6] = currentProxValue>>8;

					currentProxValue = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0a cc       	rjmp	.-2028   	; 0x16ea <main+0x588>
					}
					ackPayload[3] = currentProxValue&0xFF;
					ackPayload[4] = currentProxValue>>8;

					currentProxValue = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	f1 cb       	rjmp	.-2078   	; 0x16be <main+0x55c>
					}
					ackPayload[1] = currentProxValue&0xFF;
					ackPayload[2] = currentProxValue>>8;

					currentProxValue = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	d8 cb       	rjmp	.-2128   	; 0x1692 <main+0x530>
					packetId = 4;
					break;

				case 4:
					currentProxValue = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	bf cb       	rjmp	.-2178   	; 0x1666 <main+0x504>
					ackPayload[11] = currentProxValue&0xFF;
					ackPayload[12] = currentProxValue>>8;

					currentProxValue = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
						currentProxValue = 0;
    1ee8:	10 92 61 03 	sts	0x0361, r1
    1eec:	10 92 60 03 	sts	0x0360, r1
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	e3 ce       	rjmp	.-570    	; 0x1cbc <main+0xb5a>
					}
					ackPayload[9] = currentProxValue&0xFF;
					ackPayload[10] = currentProxValue>>8;

					currentProxValue = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	ca ce       	rjmp	.-620    	; 0x1c90 <main+0xb2e>
					}
					ackPayload[7] = currentProxValue&0xFF;
					ackPayload[8] = currentProxValue>>8;

					currentProxValue = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	b1 ce       	rjmp	.-670    	; 0x1c64 <main+0xb02>
					}
					ackPayload[5] = currentProxValue&0xFF;
					ackPayload[6] = currentProxValue>>8;

					currentProxValue = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	98 ce       	rjmp	.-720    	; 0x1c38 <main+0xad6>
					}					
					ackPayload[3] = currentProxValue&0xFF;
					ackPayload[4] = currentProxValue>>8;

					currentProxValue = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	7f ce       	rjmp	.-770    	; 0x1c0c <main+0xaaa>
					}
					ackPayload[1] = currentProxValue&0xFF;
					ackPayload[2] = currentProxValue>>8;

					currentProxValue = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	66 ce       	rjmp	.-820    	; 0x1be0 <main+0xa7e>
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					currentProxValue = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	4d ce       	rjmp	.-870    	; 0x1bb4 <main+0xa52>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	7d cd       	rjmp	.-1286   	; 0x1a1a <main+0x8b8>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	6f cd       	rjmp	.-1314   	; 0x1a04 <main+0x8a2>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	6a cd       	rjmp	.-1324   	; 0x1a00 <main+0x89e>
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	5b cd       	rjmp	.-1354   	; 0x19e8 <main+0x886>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1f32:	80 91 86 03 	lds	r24, 0x0386
    1f36:	90 91 87 03 	lds	r25, 0x0387
    1f3a:	a0 91 88 03 	lds	r26, 0x0388
    1f3e:	b0 91 89 03 	lds	r27, 0x0389
    1f42:	4e 96       	adiw	r24, 0x1e	; 30
    1f44:	a1 1d       	adc	r26, r1
    1f46:	b1 1d       	adc	r27, r1
    1f48:	80 93 86 03 	sts	0x0386, r24
    1f4c:	90 93 87 03 	sts	0x0387, r25
    1f50:	a0 93 88 03 	sts	0x0388, r26
    1f54:	b0 93 89 03 	sts	0x0389, r27
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1f58:	87 36       	cpi	r24, 0x67	; 103
    1f5a:	42 e0       	ldi	r20, 0x02	; 2
    1f5c:	94 07       	cpc	r25, r20
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	a4 07       	cpc	r26, r20
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	b4 07       	cpc	r27, r20
    1f66:	0c f4       	brge	.+2      	; 0x1f6a <main+0xe08>
    1f68:	52 cb       	rjmp	.-2396   	; 0x160e <main+0x4ac>
    1f6a:	20 92 86 03 	sts	0x0386, r2
    1f6e:	30 92 87 03 	sts	0x0387, r3
    1f72:	40 92 88 03 	sts	0x0388, r4
    1f76:	50 92 89 03 	sts	0x0389, r5
    1f7a:	89 e9       	ldi	r24, 0x99	; 153
    1f7c:	50 cb       	rjmp	.-2400   	; 0x161e <main+0x4bc>
						pwm_right_desired -= STEP_MOTORS;
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
						colorState = (colorState+1)%5;
    1f7e:	80 91 c2 03 	lds	r24, 0x03C2
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	65 e0       	ldi	r22, 0x05	; 5
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	0e 94 89 20 	call	0x4112	; 0x4112 <__divmodhi4>
    1f8e:	80 93 c2 03 	sts	0x03C2, r24

						if(colorState==0) {		// turn on blue
    1f92:	88 23       	and	r24, r24
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <main+0xe36>
    1f96:	20 c2       	rjmp	.+1088   	; 0x23d8 <__stack+0x1d9>
							LED_IR1_HIGH;
    1f98:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    1f9a:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    1f9c:	10 92 0e 02 	sts	0x020E, r1
							pwm_green = MAX_LEDS_PWM;
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	30 93 0d 02 	sts	0x020D, r19
							pwm_red = MAX_LEDS_PWM;					
    1fa6:	30 93 0c 02 	sts	0x020C, r19

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1faa:	80 91 80 00 	lds	r24, 0x0080
    1fae:	80 68       	ori	r24, 0x80	; 128
    1fb0:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	90 93 89 00 	sts	0x0089, r25
    1fbc:	80 93 88 00 	sts	0x0088, r24
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
    1fc0:	80 91 0d 02 	lds	r24, 0x020D

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <main+0xe68>
    1fc8:	2c c2       	rjmp	.+1112   	; 0x2422 <__stack+0x223>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    1fca:	90 91 80 00 	lds	r25, 0x0080
    1fce:	90 62       	ori	r25, 0x20	; 32
    1fd0:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	90 93 8b 00 	sts	0x008B, r25
    1fda:	80 93 8a 00 	sts	0x008A, r24
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    1fde:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <main+0xe86>
    1fe6:	06 c2       	rjmp	.+1036   	; 0x23f4 <__stack+0x1f5>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    1fe8:	90 91 80 00 	lds	r25, 0x0080
    1fec:	98 60       	ori	r25, 0x08	; 8
    1fee:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	90 93 8d 00 	sts	0x008D, r25
    1ff8:	80 93 8c 00 	sts	0x008C, r24
    1ffc:	80 91 86 03 	lds	r24, 0x0386
    2000:	90 91 87 03 	lds	r25, 0x0387
    2004:	a0 91 88 03 	lds	r26, 0x0388
    2008:	b0 91 89 03 	lds	r27, 0x0389
    200c:	b5 95       	asr	r27
    200e:	a7 95       	ror	r26
    2010:	97 95       	ror	r25
    2012:	87 95       	ror	r24
    2014:	b5 95       	asr	r27
    2016:	a7 95       	ror	r26
    2018:	97 95       	ror	r25
    201a:	87 95       	ror	r24
    201c:	00 cb       	rjmp	.-2560   	; 0x161e <main+0x4bc>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    201e:	80 91 8a 03 	lds	r24, 0x038A
    2022:	90 91 8b 03 	lds	r25, 0x038B
    2026:	a0 91 8c 03 	lds	r26, 0x038C
    202a:	b0 91 8d 03 	lds	r27, 0x038D
    202e:	4e 96       	adiw	r24, 0x1e	; 30
    2030:	a1 1d       	adc	r26, r1
    2032:	b1 1d       	adc	r27, r1
    2034:	80 93 8a 03 	sts	0x038A, r24
    2038:	90 93 8b 03 	sts	0x038B, r25
    203c:	a0 93 8c 03 	sts	0x038C, r26
    2040:	b0 93 8d 03 	sts	0x038D, r27
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    2044:	87 36       	cpi	r24, 0x67	; 103
    2046:	32 e0       	ldi	r19, 0x02	; 2
    2048:	93 07       	cpc	r25, r19
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	a3 07       	cpc	r26, r19
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	b3 07       	cpc	r27, r19
    2052:	0c f4       	brge	.+2      	; 0x2056 <main+0xef4>
    2054:	f2 ce       	rjmp	.-540    	; 0x1e3a <main+0xcd8>
    2056:	20 92 8a 03 	sts	0x038A, r2
    205a:	30 92 8b 03 	sts	0x038B, r3
    205e:	40 92 8c 03 	sts	0x038C, r4
    2062:	50 92 8d 03 	sts	0x038D, r5
    2066:	80 91 86 03 	lds	r24, 0x0386
    206a:	90 91 87 03 	lds	r25, 0x0387
    206e:	a0 91 88 03 	lds	r26, 0x0388
    2072:	b0 91 89 03 	lds	r27, 0x0389
    2076:	b5 95       	asr	r27
    2078:	a7 95       	ror	r26
    207a:	97 95       	ror	r25
    207c:	87 95       	ror	r24
    207e:	b5 95       	asr	r27
    2080:	a7 95       	ror	r26
    2082:	97 95       	ror	r25
    2084:	87 95       	ror	r24
    2086:	cb ca       	rjmp	.-2666   	; 0x161e <main+0x4bc>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
						pwm_right_desired += STEP_MOTORS;
    2088:	80 91 86 03 	lds	r24, 0x0386
    208c:	90 91 87 03 	lds	r25, 0x0387
    2090:	a0 91 88 03 	lds	r26, 0x0388
    2094:	b0 91 89 03 	lds	r27, 0x0389
    2098:	4e 96       	adiw	r24, 0x1e	; 30
    209a:	a1 1d       	adc	r26, r1
    209c:	b1 1d       	adc	r27, r1
    209e:	80 93 86 03 	sts	0x0386, r24
    20a2:	90 93 87 03 	sts	0x0387, r25
    20a6:	a0 93 88 03 	sts	0x0388, r26
    20aa:	b0 93 89 03 	sts	0x0389, r27
						pwm_left_desired -= STEP_MOTORS;
    20ae:	20 91 8a 03 	lds	r18, 0x038A
    20b2:	30 91 8b 03 	lds	r19, 0x038B
    20b6:	40 91 8c 03 	lds	r20, 0x038C
    20ba:	50 91 8d 03 	lds	r21, 0x038D
    20be:	2e 51       	subi	r18, 0x1E	; 30
    20c0:	30 40       	sbci	r19, 0x00	; 0
    20c2:	40 40       	sbci	r20, 0x00	; 0
    20c4:	50 40       	sbci	r21, 0x00	; 0
    20c6:	20 93 8a 03 	sts	0x038A, r18
    20ca:	30 93 8b 03 	sts	0x038B, r19
    20ce:	40 93 8c 03 	sts	0x038C, r20
    20d2:	50 93 8d 03 	sts	0x038D, r21
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    20d6:	87 36       	cpi	r24, 0x67	; 103
    20d8:	f2 e0       	ldi	r31, 0x02	; 2
    20da:	9f 07       	cpc	r25, r31
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	af 07       	cpc	r26, r31
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	bf 07       	cpc	r27, r31
    20e4:	64 f0       	brlt	.+24     	; 0x20fe <main+0xf9c>
    20e6:	20 92 86 03 	sts	0x0386, r2
    20ea:	30 92 87 03 	sts	0x0387, r3
    20ee:	40 92 88 03 	sts	0x0388, r4
    20f2:	50 92 89 03 	sts	0x0389, r5
    20f6:	86 e6       	ldi	r24, 0x66	; 102
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	a0 e0       	ldi	r26, 0x00	; 0
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    20fe:	2a 39       	cpi	r18, 0x9A	; 154
    2100:	6d ef       	ldi	r22, 0xFD	; 253
    2102:	36 07       	cpc	r19, r22
    2104:	6f ef       	ldi	r22, 0xFF	; 255
    2106:	46 07       	cpc	r20, r22
    2108:	6f ef       	ldi	r22, 0xFF	; 255
    210a:	56 07       	cpc	r21, r22
    210c:	0c f0       	brlt	.+2      	; 0x2110 <main+0xfae>
    210e:	7f ca       	rjmp	.-2818   	; 0x160e <main+0x4ac>
    2110:	2a e9       	ldi	r18, 0x9A	; 154
    2112:	3d ef       	ldi	r19, 0xFD	; 253
    2114:	4f ef       	ldi	r20, 0xFF	; 255
    2116:	5f ef       	ldi	r21, 0xFF	; 255
    2118:	20 93 8a 03 	sts	0x038A, r18
    211c:	30 93 8b 03 	sts	0x038B, r19
    2120:	40 93 8c 03 	sts	0x038C, r20
    2124:	50 93 8d 03 	sts	0x038D, r21
    2128:	b5 95       	asr	r27
    212a:	a7 95       	ror	r26
    212c:	97 95       	ror	r25
    212e:	87 95       	ror	r24
    2130:	b5 95       	asr	r27
    2132:	a7 95       	ror	r26
    2134:	97 95       	ror	r25
    2136:	87 95       	ror	r24
    2138:	72 ca       	rjmp	.-2844   	; 0x161e <main+0x4bc>
					case 32:	// program +
						cliffAvoidanceEnabled = 1;
						break;

					case 33:	// program -
						cliffAvoidanceEnabled = 0;
    213a:	10 92 e1 03 	sts	0x03E1, r1
    213e:	5f ca       	rjmp	.-2882   	; 0x15fe <main+0x49c>
						pwm_right_desired = 0;
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
						if(pwm_right_desired > pwm_left_desired) {
    2140:	80 91 86 03 	lds	r24, 0x0386
    2144:	90 91 87 03 	lds	r25, 0x0387
    2148:	a0 91 88 03 	lds	r26, 0x0388
    214c:	b0 91 89 03 	lds	r27, 0x0389
    2150:	20 91 8a 03 	lds	r18, 0x038A
    2154:	30 91 8b 03 	lds	r19, 0x038B
    2158:	40 91 8c 03 	lds	r20, 0x038C
    215c:	50 91 8d 03 	lds	r21, 0x038D
    2160:	28 17       	cp	r18, r24
    2162:	39 07       	cpc	r19, r25
    2164:	4a 07       	cpc	r20, r26
    2166:	5b 07       	cpc	r21, r27
    2168:	14 f4       	brge	.+4      	; 0x216e <main+0x100c>
    216a:	9c 01       	movw	r18, r24
    216c:	ad 01       	movw	r20, r26
    216e:	da 01       	movw	r26, r20
    2170:	c9 01       	movw	r24, r18
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    2172:	4e 96       	adiw	r24, 0x1e	; 30
    2174:	a1 1d       	adc	r26, r1
    2176:	b1 1d       	adc	r27, r1
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	ab 83       	std	Y+3, r26	; 0x03
    217e:	bc 83       	std	Y+4, r27	; 0x04
    2180:	80 93 86 03 	sts	0x0386, r24
    2184:	90 93 87 03 	sts	0x0387, r25
    2188:	a0 93 88 03 	sts	0x0388, r26
    218c:	b0 93 89 03 	sts	0x0389, r27
						pwm_left_desired += STEP_MOTORS;
    2190:	da 01       	movw	r26, r20
    2192:	c9 01       	movw	r24, r18
    2194:	4e 96       	adiw	r24, 0x1e	; 30
    2196:	a1 1d       	adc	r26, r1
    2198:	b1 1d       	adc	r27, r1
    219a:	80 93 8a 03 	sts	0x038A, r24
    219e:	90 93 8b 03 	sts	0x038B, r25
    21a2:	a0 93 8c 03 	sts	0x038C, r26
    21a6:	b0 93 8d 03 	sts	0x038D, r27
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    21aa:	29 81       	ldd	r18, Y+1	; 0x01
    21ac:	3a 81       	ldd	r19, Y+2	; 0x02
    21ae:	4b 81       	ldd	r20, Y+3	; 0x03
    21b0:	5c 81       	ldd	r21, Y+4	; 0x04
    21b2:	27 36       	cpi	r18, 0x67	; 103
    21b4:	62 e0       	ldi	r22, 0x02	; 2
    21b6:	36 07       	cpc	r19, r22
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	46 07       	cpc	r20, r22
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	56 07       	cpc	r21, r22
    21c0:	44 f0       	brlt	.+16     	; 0x21d2 <main+0x1070>
    21c2:	20 92 86 03 	sts	0x0386, r2
    21c6:	30 92 87 03 	sts	0x0387, r3
    21ca:	40 92 88 03 	sts	0x0388, r4
    21ce:	50 92 89 03 	sts	0x0389, r5
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    21d2:	87 36       	cpi	r24, 0x67	; 103
    21d4:	e2 e0       	ldi	r30, 0x02	; 2
    21d6:	9e 07       	cpc	r25, r30
    21d8:	e0 e0       	ldi	r30, 0x00	; 0
    21da:	ae 07       	cpc	r26, r30
    21dc:	e0 e0       	ldi	r30, 0x00	; 0
    21de:	be 07       	cpc	r27, r30
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <main+0x1082>
    21e2:	39 cf       	rjmp	.-398    	; 0x2056 <main+0xef4>
    21e4:	0c ca       	rjmp	.-3048   	; 0x15fe <main+0x49c>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    21e6:	80 91 86 03 	lds	r24, 0x0386
    21ea:	90 91 87 03 	lds	r25, 0x0387
    21ee:	a0 91 88 03 	lds	r26, 0x0388
    21f2:	b0 91 89 03 	lds	r27, 0x0389
    21f6:	4e 97       	sbiw	r24, 0x1e	; 30
    21f8:	a1 09       	sbc	r26, r1
    21fa:	b1 09       	sbc	r27, r1
    21fc:	80 93 86 03 	sts	0x0386, r24
    2200:	90 93 87 03 	sts	0x0387, r25
    2204:	a0 93 88 03 	sts	0x0388, r26
    2208:	b0 93 89 03 	sts	0x0389, r27
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    220c:	8a 39       	cpi	r24, 0x9A	; 154
    220e:	ed ef       	ldi	r30, 0xFD	; 253
    2210:	9e 07       	cpc	r25, r30
    2212:	ef ef       	ldi	r30, 0xFF	; 255
    2214:	ae 07       	cpc	r26, r30
    2216:	ef ef       	ldi	r30, 0xFF	; 255
    2218:	be 07       	cpc	r27, r30
    221a:	0c f0       	brlt	.+2      	; 0x221e <__stack+0x1f>
    221c:	f8 c9       	rjmp	.-3088   	; 0x160e <main+0x4ac>
    221e:	2a e9       	ldi	r18, 0x9A	; 154
    2220:	3d ef       	ldi	r19, 0xFD	; 253
    2222:	4f ef       	ldi	r20, 0xFF	; 255
    2224:	5f ef       	ldi	r21, 0xFF	; 255
    2226:	20 93 86 03 	sts	0x0386, r18
    222a:	30 93 87 03 	sts	0x0387, r19
    222e:	40 93 88 03 	sts	0x0388, r20
    2232:	50 93 89 03 	sts	0x0389, r21
    2236:	86 e6       	ldi	r24, 0x66	; 102
    2238:	f2 c9       	rjmp	.-3100   	; 0x161e <main+0x4bc>
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
						if(pwm_right_desired < pwm_left) {
    223a:	20 91 86 03 	lds	r18, 0x0386
    223e:	30 91 87 03 	lds	r19, 0x0387
    2242:	40 91 88 03 	lds	r20, 0x0388
    2246:	50 91 89 03 	lds	r21, 0x0389
    224a:	80 91 82 03 	lds	r24, 0x0382
    224e:	90 91 83 03 	lds	r25, 0x0383
    2252:	a0 91 84 03 	lds	r26, 0x0384
    2256:	b0 91 85 03 	lds	r27, 0x0385
    225a:	28 17       	cp	r18, r24
    225c:	39 07       	cpc	r19, r25
    225e:	4a 07       	cpc	r20, r26
    2260:	5b 07       	cpc	r21, r27
    2262:	44 f0       	brlt	.+16     	; 0x2274 <__stack+0x75>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    2264:	20 91 8a 03 	lds	r18, 0x038A
    2268:	30 91 8b 03 	lds	r19, 0x038B
    226c:	40 91 8c 03 	lds	r20, 0x038C
    2270:	50 91 8d 03 	lds	r21, 0x038D
						}
						pwm_right_desired -= STEP_MOTORS;
    2274:	da 01       	movw	r26, r20
    2276:	c9 01       	movw	r24, r18
    2278:	4e 97       	sbiw	r24, 0x1e	; 30
    227a:	a1 09       	sbc	r26, r1
    227c:	b1 09       	sbc	r27, r1
    227e:	80 93 86 03 	sts	0x0386, r24
    2282:	90 93 87 03 	sts	0x0387, r25
    2286:	a0 93 88 03 	sts	0x0388, r26
    228a:	b0 93 89 03 	sts	0x0389, r27
						pwm_left_desired -= STEP_MOTORS;
    228e:	80 93 8a 03 	sts	0x038A, r24
    2292:	90 93 8b 03 	sts	0x038B, r25
    2296:	a0 93 8c 03 	sts	0x038C, r26
    229a:	b0 93 8d 03 	sts	0x038D, r27
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    229e:	8a 39       	cpi	r24, 0x9A	; 154
    22a0:	fd ef       	ldi	r31, 0xFD	; 253
    22a2:	9f 07       	cpc	r25, r31
    22a4:	ff ef       	ldi	r31, 0xFF	; 255
    22a6:	af 07       	cpc	r26, r31
    22a8:	ff ef       	ldi	r31, 0xFF	; 255
    22aa:	bf 07       	cpc	r27, r31
    22ac:	64 f4       	brge	.+24     	; 0x22c6 <__stack+0xc7>
    22ae:	2a e9       	ldi	r18, 0x9A	; 154
    22b0:	3d ef       	ldi	r19, 0xFD	; 253
    22b2:	4f ef       	ldi	r20, 0xFF	; 255
    22b4:	5f ef       	ldi	r21, 0xFF	; 255
    22b6:	20 93 86 03 	sts	0x0386, r18
    22ba:	30 93 87 03 	sts	0x0387, r19
    22be:	40 93 88 03 	sts	0x0388, r20
    22c2:	50 93 89 03 	sts	0x0389, r21
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    22c6:	8a 39       	cpi	r24, 0x9A	; 154
    22c8:	3d ef       	ldi	r19, 0xFD	; 253
    22ca:	93 07       	cpc	r25, r19
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	a3 07       	cpc	r26, r19
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	b3 07       	cpc	r27, r19
    22d4:	0c f4       	brge	.+2      	; 0x22d8 <__stack+0xd9>
    22d6:	46 cd       	rjmp	.-1396   	; 0x1d64 <main+0xc02>
    22d8:	92 c9       	rjmp	.-3292   	; 0x15fe <main+0x49c>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    22da:	10 93 dc 03 	sts	0x03DC, r17
    22de:	80 91 86 03 	lds	r24, 0x0386
    22e2:	90 91 87 03 	lds	r25, 0x0387
    22e6:	a0 91 88 03 	lds	r26, 0x0388
    22ea:	b0 91 89 03 	lds	r27, 0x0389
    22ee:	b5 95       	asr	r27
    22f0:	a7 95       	ror	r26
    22f2:	97 95       	ror	r25
    22f4:	87 95       	ror	r24
    22f6:	b5 95       	asr	r27
    22f8:	a7 95       	ror	r26
    22fa:	97 95       	ror	r25
    22fc:	87 95       	ror	r24
						break;
    22fe:	8f c9       	rjmp	.-3298   	; 0x161e <main+0x4bc>
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
						pwm_right_desired -= STEP_MOTORS;
    2300:	80 91 86 03 	lds	r24, 0x0386
    2304:	90 91 87 03 	lds	r25, 0x0387
    2308:	a0 91 88 03 	lds	r26, 0x0388
    230c:	b0 91 89 03 	lds	r27, 0x0389
    2310:	4e 97       	sbiw	r24, 0x1e	; 30
    2312:	a1 09       	sbc	r26, r1
    2314:	b1 09       	sbc	r27, r1
    2316:	80 93 86 03 	sts	0x0386, r24
    231a:	90 93 87 03 	sts	0x0387, r25
    231e:	a0 93 88 03 	sts	0x0388, r26
    2322:	b0 93 89 03 	sts	0x0389, r27
						pwm_left_desired += STEP_MOTORS;
    2326:	20 91 8a 03 	lds	r18, 0x038A
    232a:	30 91 8b 03 	lds	r19, 0x038B
    232e:	40 91 8c 03 	lds	r20, 0x038C
    2332:	50 91 8d 03 	lds	r21, 0x038D
    2336:	22 5e       	subi	r18, 0xE2	; 226
    2338:	3f 4f       	sbci	r19, 0xFF	; 255
    233a:	4f 4f       	sbci	r20, 0xFF	; 255
    233c:	5f 4f       	sbci	r21, 0xFF	; 255
    233e:	20 93 8a 03 	sts	0x038A, r18
    2342:	30 93 8b 03 	sts	0x038B, r19
    2346:	40 93 8c 03 	sts	0x038C, r20
    234a:	50 93 8d 03 	sts	0x038D, r21
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    234e:	8a 39       	cpi	r24, 0x9A	; 154
    2350:	ed ef       	ldi	r30, 0xFD	; 253
    2352:	9e 07       	cpc	r25, r30
    2354:	ef ef       	ldi	r30, 0xFF	; 255
    2356:	ae 07       	cpc	r26, r30
    2358:	ef ef       	ldi	r30, 0xFF	; 255
    235a:	be 07       	cpc	r27, r30
    235c:	64 f4       	brge	.+24     	; 0x2376 <__stack+0x177>
    235e:	8a e9       	ldi	r24, 0x9A	; 154
    2360:	9d ef       	ldi	r25, 0xFD	; 253
    2362:	af ef       	ldi	r26, 0xFF	; 255
    2364:	bf ef       	ldi	r27, 0xFF	; 255
    2366:	80 93 86 03 	sts	0x0386, r24
    236a:	90 93 87 03 	sts	0x0387, r25
    236e:	a0 93 88 03 	sts	0x0388, r26
    2372:	b0 93 89 03 	sts	0x0389, r27
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    2376:	27 36       	cpi	r18, 0x67	; 103
    2378:	e2 e0       	ldi	r30, 0x02	; 2
    237a:	3e 07       	cpc	r19, r30
    237c:	e0 e0       	ldi	r30, 0x00	; 0
    237e:	4e 07       	cpc	r20, r30
    2380:	e0 e0       	ldi	r30, 0x00	; 0
    2382:	5e 07       	cpc	r21, r30
    2384:	0c f4       	brge	.+2      	; 0x2388 <__stack+0x189>
    2386:	43 c9       	rjmp	.-3450   	; 0x160e <main+0x4ac>
    2388:	20 92 8a 03 	sts	0x038A, r2
    238c:	30 92 8b 03 	sts	0x038B, r3
    2390:	40 92 8c 03 	sts	0x038C, r4
    2394:	50 92 8d 03 	sts	0x038D, r5
    2398:	b5 95       	asr	r27
    239a:	a7 95       	ror	r26
    239c:	97 95       	ror	r25
    239e:	87 95       	ror	r24
    23a0:	b5 95       	asr	r27
    23a2:	a7 95       	ror	r26
    23a4:	97 95       	ror	r25
    23a6:	87 95       	ror	r24
    23a8:	3a c9       	rjmp	.-3468   	; 0x161e <main+0x4bc>
				TCCR3A |= (1 << COM3A1);		// enable OCA
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
			} else if(pwm_right < 0) {      	// move backward
				// select channel 12 to sample left current
				//currentMotRightChannel = 12;
				TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    23aa:	80 91 90 00 	lds	r24, 0x0090
    23ae:	8f 77       	andi	r24, 0x7F	; 127
    23b0:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    23b4:	80 91 71 00 	lds	r24, 0x0071
    23b8:	8d 7f       	andi	r24, 0xFD	; 253
    23ba:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 3);				// output to 0
    23be:	73 98       	cbi	0x0e, 3	; 14
				TCCR3A |= (1 << COM3B1);		// enable OCB
    23c0:	80 91 90 00 	lds	r24, 0x0090
    23c4:	80 62       	ori	r24, 0x20	; 32
    23c6:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    23ca:	80 91 71 00 	lds	r24, 0x0071
    23ce:	84 60       	ori	r24, 0x04	; 4
    23d0:	80 93 71 00 	sts	0x0071, r24
    23d4:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <main+0x1e0>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	51 f1       	breq	.+84     	; 0x2430 <__stack+0x231>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	81 f1       	breq	.+96     	; 0x2440 <__stack+0x241>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    23e0:	83 30       	cpi	r24, 0x03	; 3
    23e2:	f1 f1       	breq	.+124    	; 0x2460 <__stack+0x261>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    23e4:	6f ef       	ldi	r22, 0xFF	; 255
    23e6:	60 93 0e 02 	sts	0x020E, r22
							pwm_green = MAX_LEDS_PWM;
    23ea:	60 93 0d 02 	sts	0x020D, r22
							pwm_red = MAX_LEDS_PWM;
    23ee:	60 93 0c 02 	sts	0x020C, r22
    23f2:	db cd       	rjmp	.-1098   	; 0x1faa <main+0xe48>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    23f4:	80 91 80 00 	lds	r24, 0x0080
    23f8:	87 7f       	andi	r24, 0xF7	; 247
    23fa:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    23fe:	2f 98       	cbi	0x05, 7	; 5
    2400:	80 91 86 03 	lds	r24, 0x0386
    2404:	90 91 87 03 	lds	r25, 0x0387
    2408:	a0 91 88 03 	lds	r26, 0x0388
    240c:	b0 91 89 03 	lds	r27, 0x0389
    2410:	b5 95       	asr	r27
    2412:	a7 95       	ror	r26
    2414:	97 95       	ror	r25
    2416:	87 95       	ror	r24
    2418:	b5 95       	asr	r27
    241a:	a7 95       	ror	r26
    241c:	97 95       	ror	r25
    241e:	87 95       	ror	r24
    2420:	fe c8       	rjmp	.-3588   	; 0x161e <main+0x4bc>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    2422:	80 91 80 00 	lds	r24, 0x0080
    2426:	8f 7d       	andi	r24, 0xDF	; 223
    2428:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    242c:	2e 98       	cbi	0x05, 6	; 5
    242e:	d7 cd       	rjmp	.-1106   	; 0x1fde <main+0xe7c>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    2430:	4f ef       	ldi	r20, 0xFF	; 255
    2432:	40 93 0e 02 	sts	0x020E, r20
							pwm_green = 0;
    2436:	10 92 0d 02 	sts	0x020D, r1
							pwm_red = MAX_LEDS_PWM;
    243a:	40 93 0c 02 	sts	0x020C, r20
    243e:	b5 cd       	rjmp	.-1174   	; 0x1faa <main+0xe48>
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    2440:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    2442:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    2444:	5f ef       	ldi	r21, 0xFF	; 255
    2446:	50 93 0e 02 	sts	0x020E, r21
							pwm_green = MAX_LEDS_PWM;
    244a:	50 93 0d 02 	sts	0x020D, r21
							pwm_red = 0;
    244e:	10 92 0c 02 	sts	0x020C, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    2452:	80 91 80 00 	lds	r24, 0x0080
    2456:	8f 77       	andi	r24, 0x7F	; 127
    2458:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    245c:	2d 98       	cbi	0x05, 5	; 5
    245e:	b0 cd       	rjmp	.-1184   	; 0x1fc0 <main+0xe5e>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    2460:	10 92 0e 02 	sts	0x020E, r1
							pwm_green = 0;
    2464:	10 92 0d 02 	sts	0x020D, r1
							pwm_red = 0;
    2468:	10 92 0c 02 	sts	0x020C, r1
    246c:	f2 cf       	rjmp	.-28     	; 0x2452 <__stack+0x253>

0000246e <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    246e:	84 b1       	in	r24, 0x04	; 4
    2470:	80 7f       	andi	r24, 0xF0	; 240
    2472:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    2474:	84 b1       	in	r24, 0x04	; 4
    2476:	87 60       	ori	r24, 0x07	; 7
    2478:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    247a:	80 e5       	ldi	r24, 0x50	; 80
    247c:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    247e:	8d b5       	in	r24, 0x2d	; 45
    2480:	81 60       	ori	r24, 0x01	; 1
    2482:	8d bd       	out	0x2d, r24	; 45

}
    2484:	08 95       	ret

00002486 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2486:	44 23       	and	r20, r20
    2488:	79 f0       	breq	.+30     	; 0x24a8 <SPI_ReadWrite_Block+0x22>
    248a:	a8 2f       	mov	r26, r24
    248c:	b9 2f       	mov	r27, r25
    248e:	e6 2f       	mov	r30, r22
    2490:	f7 2f       	mov	r31, r23
    2492:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    2494:	9d 91       	ld	r25, X+
    2496:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    2498:	0d b4       	in	r0, 0x2d	; 45
    249a:	07 fe       	sbrs	r0, 7
    249c:	fd cf       	rjmp	.-6      	; 0x2498 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    249e:	9e b5       	in	r25, 0x2e	; 46
    24a0:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	84 17       	cp	r24, r20
    24a6:	b0 f3       	brcs	.-20     	; 0x2494 <SPI_ReadWrite_Block+0xe>
    24a8:	08 95       	ret

000024aa <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    24aa:	66 23       	and	r22, r22
    24ac:	59 f0       	breq	.+22     	; 0x24c4 <SPI_Write_Block+0x1a>
    24ae:	e8 2f       	mov	r30, r24
    24b0:	f9 2f       	mov	r31, r25
    24b2:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    24b4:	91 91       	ld	r25, Z+
    24b6:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    24b8:	0d b4       	in	r0, 0x2d	; 45
    24ba:	07 fe       	sbrs	r0, 7
    24bc:	fd cf       	rjmp	.-6      	; 0x24b8 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    24be:	8f 5f       	subi	r24, 0xFF	; 255
    24c0:	86 17       	cp	r24, r22
    24c2:	c0 f3       	brcs	.-16     	; 0x24b4 <SPI_Write_Block+0xa>
    24c4:	08 95       	ret

000024c6 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    24c6:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    24c8:	0d b4       	in	r0, 0x2d	; 45
    24ca:	07 fe       	sbrs	r0, 7
    24cc:	fd cf       	rjmp	.-6      	; 0x24c8 <SPI_Write_Byte+0x2>
    return SPDR;
    24ce:	8e b5       	in	r24, 0x2e	; 46
}
    24d0:	08 95       	ret

000024d2 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <mirf_config+0xa>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    24e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    24e2:	80 e2       	ldi	r24, 0x20	; 32
    24e4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    24e8:	8d e0       	ldi	r24, 0x0D	; 13
    24ea:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    24ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    24f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    24f2:	83 e2       	ldi	r24, 0x23	; 35
    24f4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    24fe:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    2500:	8c e0       	ldi	r24, 0x0C	; 12
    2502:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    2504:	80 e8       	ldi	r24, 0x80	; 128
    2506:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2508:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    250a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    250c:	80 e3       	ldi	r24, 0x30	; 48
    250e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2512:	8e 01       	movw	r16, r28
    2514:	0f 5f       	subi	r16, 0xFF	; 255
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	c8 01       	movw	r24, r16
    251a:	63 e0       	ldi	r22, 0x03	; 3
    251c:	0e 94 55 12 	call	0x24aa	; 0x24aa <SPI_Write_Block>
    mirf_CSN_hi;
    2520:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2522:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2524:	8a e2       	ldi	r24, 0x2A	; 42
    2526:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    252a:	c8 01       	movw	r24, r16
    252c:	63 e0       	ldi	r22, 0x03	; 3
    252e:	0e 94 55 12 	call	0x24aa	; 0x24aa <SPI_Write_Block>
    mirf_CSN_hi;
    2532:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2534:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2536:	81 e2       	ldi	r24, 0x21	; 33
    2538:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2542:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2544:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2546:	82 e2       	ldi	r24, 0x22	; 34
    2548:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2552:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2554:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2556:	84 e2       	ldi	r24, 0x24	; 36
    2558:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    255c:	82 e1       	ldi	r24, 0x12	; 18
    255e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2562:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2564:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2566:	85 e2       	ldi	r24, 0x25	; 37
    2568:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    256c:	88 e2       	ldi	r24, 0x28	; 40
    256e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2572:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2574:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2576:	81 e3       	ldi	r24, 0x31	; 49
    2578:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    257c:	86 e0       	ldi	r24, 0x06	; 6
    257e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2582:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    2584:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    2586:	80 e5       	ldi	r24, 0x50	; 80
    2588:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    258c:	83 e7       	ldi	r24, 0x73	; 115
    258e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2592:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2594:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2596:	8c e3       	ldi	r24, 0x3C	; 60
    2598:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    25a2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25a6:	8d e3       	ldi	r24, 0x3D	; 61
    25a8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25ac:	86 e0       	ldi	r24, 0x06	; 6
    25ae:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    25b2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25b6:	80 e2       	ldi	r24, 0x20	; 32
    25b8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25bc:	8f e0       	ldi	r24, 0x0F	; 15
    25be:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    25c2:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	08 95       	ret

000025d4 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    25d4:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    25d6:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    25d8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <mirf_config>
}
    25dc:	08 95       	ret

000025de <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    25e4:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    25e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25e8:	8a e2       	ldi	r24, 0x2A	; 42
    25ea:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    25ee:	ce 01       	movw	r24, r28
    25f0:	65 e0       	ldi	r22, 0x05	; 5
    25f2:	0e 94 55 12 	call	0x24aa	; 0x24aa <SPI_Write_Block>
    mirf_CSN_hi;
    25f6:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    25f8:	2c 9a       	sbi	0x05, 4	; 5
}
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	08 95       	ret

00002600 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2606:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2608:	80 e3       	ldi	r24, 0x30	; 48
    260a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    260e:	ce 01       	movw	r24, r28
    2610:	65 e0       	ldi	r22, 0x05	; 5
    2612:	0e 94 55 12 	call	0x24aa	; 0x24aa <SPI_Write_Block>
    mirf_CSN_hi;
    2616:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    261e:	80 91 e5 03 	lds	r24, 0x03E5
    2622:	88 23       	and	r24, r24
    2624:	11 f0       	breq	.+4      	; 0x262a <mirf_data_ready+0xc>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    2628:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    262a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    262c:	8f ef       	ldi	r24, 0xFF	; 255
    262e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    2632:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    2634:	80 74       	andi	r24, 0x40	; 64
    2636:	08 95       	ret

00002638 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	0f 92       	push	r0
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    2642:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2644:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2646:	87 e1       	ldi	r24, 0x17	; 23
    2648:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    264c:	be 01       	movw	r22, r28
    264e:	6f 5f       	subi	r22, 0xFF	; 255
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	cb 01       	movw	r24, r22
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 43 12 	call	0x2486	; 0x2486 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    265a:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    265c:	89 81       	ldd	r24, Y+1	; 0x01
}
    265e:	81 70       	andi	r24, 0x01	; 1
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    2668:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    266a:	82 ee       	ldi	r24, 0xE2	; 226
    266c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2670:	28 9a       	sbi	0x05, 0	; 5

}
    2672:	08 95       	ret

00002674 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    267a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    267c:	81 e6       	ldi	r24, 0x61	; 97
    267e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    2682:	ce 01       	movw	r24, r28
    2684:	be 01       	movw	r22, r28
    2686:	46 e0       	ldi	r20, 0x06	; 6
    2688:	0e 94 43 12 	call	0x2486	; 0x2486 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    268c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    268e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2690:	87 e2       	ldi	r24, 0x27	; 39
    2692:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2696:	80 e4       	ldi	r24, 0x40	; 64
    2698:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    269c:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	0f 92       	push	r0
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    26ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    26b0:	8f 71       	andi	r24, 0x1F	; 31
    26b2:	80 62       	ori	r24, 0x20	; 32
    26b4:	69 83       	std	Y+1, r22	; 0x01
    26b6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    26ba:	69 81       	ldd	r22, Y+1	; 0x01
    26bc:	86 2f       	mov	r24, r22
    26be:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    26c2:	28 9a       	sbi	0x05, 0	; 5
}
    26c4:	0f 90       	pop	r0
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	0f 92       	push	r0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    26dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    26de:	8f 71       	andi	r24, 0x1F	; 31
    26e0:	49 83       	std	Y+1, r20	; 0x01
    26e2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    26e6:	c8 01       	movw	r24, r16
    26e8:	b8 01       	movw	r22, r16
    26ea:	49 81       	ldd	r20, Y+1	; 0x01
    26ec:	0e 94 43 12 	call	0x2486	; 0x2486 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    26f0:	28 9a       	sbi	0x05, 0	; 5
}
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	08 95       	ret

000026fe <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    270e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2710:	8f 71       	andi	r24, 0x1F	; 31
    2712:	80 62       	ori	r24, 0x20	; 32
    2714:	49 83       	std	Y+1, r20	; 0x01
    2716:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    271a:	c8 01       	movw	r24, r16
    271c:	49 81       	ldd	r20, Y+1	; 0x01
    271e:	64 2f       	mov	r22, r20
    2720:	0e 94 55 12 	call	0x24aa	; 0x24aa <SPI_Write_Block>
    mirf_CSN_hi;
    2724:	28 9a       	sbi	0x05, 0	; 5
}
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret

00002732 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	0f 92       	push	r0
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    2742:	80 91 e5 03 	lds	r24, 0x03E5
    2746:	88 23       	and	r24, r24
    2748:	e1 f7       	brne	.-8      	; 0x2742 <mirf_send+0x10>

    mirf_CE_lo;
    274a:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 93 e5 03 	sts	0x03E5, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2752:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2754:	80 e2       	ldi	r24, 0x20	; 32
    2756:	69 83       	std	Y+1, r22	; 0x01
    2758:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    275c:	8a e4       	ldi	r24, 0x4A	; 74
    275e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    2762:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    2764:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    2766:	81 ee       	ldi	r24, 0xE1	; 225
    2768:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    276c:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    276e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    2770:	80 ea       	ldi	r24, 0xA0	; 160
    2772:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    2776:	c8 01       	movw	r24, r16
    2778:	69 81       	ldd	r22, Y+1	; 0x01
    277a:	0e 94 55 12 	call	0x24aa	; 0x24aa <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    277e:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    2780:	2c 9a       	sbi	0x05, 4	; 5
}
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	08 95       	ret

0000278e <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	18 2f       	mov	r17, r24
    27a2:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    27a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    27a6:	81 ee       	ldi	r24, 0xE1	; 225
    27a8:	99 83       	std	Y+1, r25	; 0x01
    27aa:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    27ae:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    27b0:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    27b2:	88 ea       	ldi	r24, 0xA8	; 168
    27b4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    27b8:	99 81       	ldd	r25, Y+1	; 0x01
    27ba:	00 23       	and	r16, r16
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <writeAckPayload+0x48>
    27be:	61 2f       	mov	r22, r17
    27c0:	79 2f       	mov	r23, r25
    27c2:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    27c4:	f7 01       	movw	r30, r14
    27c6:	81 91       	ld	r24, Z+
    27c8:	7f 01       	movw	r14, r30
    27ca:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    27ce:	8e 2d       	mov	r24, r14
    27d0:	81 1b       	sub	r24, r17
    27d2:	80 17       	cp	r24, r16
    27d4:	b8 f3       	brcs	.-18     	; 0x27c4 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    27d6:	28 9a       	sbi	0x05, 0	; 5


}
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	08 95       	ret

000027e8 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    27e8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    27ea:	81 ee       	ldi	r24, 0xE1	; 225
    27ec:	0e 94 63 12 	call	0x24c6	; 0x24c6 <SPI_Write_Byte>
    mirf_CSN_hi;
    27f0:	28 9a       	sbi	0x05, 0	; 5

}
    27f2:	08 95       	ret

000027f4 <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    27f4:	e8 e6       	ldi	r30, 0x68	; 104
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	82 60       	ori	r24, 0x02	; 2
    27fc:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    27fe:	ec e6       	ldi	r30, 0x6C	; 108
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    2808:	e0 eb       	ldi	r30, 0xB0	; 176
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	82 60       	ori	r24, 0x02	; 2
    2810:	80 83       	st	Z, r24

}
    2812:	08 95       	ret

00002814 <__vector_10>:

ISR(PCINT1_vect) {
    2814:	1f 92       	push	r1
    2816:	0f 92       	push	r0
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	0f 92       	push	r0
    281c:	11 24       	eor	r1, r1
    281e:	8f 93       	push	r24

	if(irEnabled) {
    2820:	80 91 11 02 	lds	r24, 0x0211
    2824:	88 23       	and	r24, r24
    2826:	21 f1       	breq	.+72     	; 0x2870 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {
    2828:	80 91 03 01 	lds	r24, 0x0103
    282c:	86 fd       	sbrc	r24, 6
    282e:	20 c0       	rjmp	.+64     	; 0x2870 <__vector_10+0x5c>

			//PORTB ^= (1 << 5);
			//PORTB &= ~(1 << 6);
   			
			PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2830:	80 91 68 00 	lds	r24, 0x0068
    2834:	8d 7f       	andi	r24, 0xFD	; 253
    2836:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    283a:	80 91 6c 00 	lds	r24, 0x006C
    283e:	8f 77       	andi	r24, 0x7F	; 127
    2840:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;
    284a:	8d e0       	ldi	r24, 0x0D	; 13
    284c:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2850:	80 91 b1 00 	lds	r24, 0x00B1
    2854:	86 60       	ori	r24, 0x06	; 6
    2856:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    285a:	80 91 70 00 	lds	r24, 0x0070
    285e:	82 60       	ori	r24, 0x02	; 2
    2860:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2864:	10 92 20 03 	sts	0x0320, r1
    2868:	10 92 21 03 	sts	0x0321, r1
    286c:	10 92 22 03 	sts	0x0322, r1

		}

	}
	
}
    2870:	8f 91       	pop	r24
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    287c:	80 91 00 02 	lds	r24, 0x0200
    2880:	08 95       	ret

00002882 <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    2882:	80 91 1e 03 	lds	r24, 0x031E
    2886:	08 95       	ret

00002888 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    2888:	80 91 1f 03 	lds	r24, 0x031F
    288c:	08 95       	ret

0000288e <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    288e:	1f 92       	push	r1
    2890:	0f 92       	push	r0
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	0f 92       	push	r0
    2896:	11 24       	eor	r1, r1
    2898:	2f 93       	push	r18
    289a:	3f 93       	push	r19
    289c:	4f 93       	push	r20
    289e:	5f 93       	push	r21
    28a0:	8f 93       	push	r24
    28a2:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    28a4:	80 91 b1 00 	lds	r24, 0x00B1
    28a8:	88 7f       	andi	r24, 0xF8	; 248
    28aa:	80 93 b1 00 	sts	0x00B1, r24
	
	if(checkGlitch) {
    28ae:	80 91 12 02 	lds	r24, 0x0212
    28b2:	88 23       	and	r24, r24
    28b4:	a9 f0       	breq	.+42     	; 0x28e0 <__vector_13+0x52>
		if(REMOTE) {	// if high it is a glitch
    28b6:	80 91 03 01 	lds	r24, 0x0103
    28ba:	86 ff       	sbrs	r24, 6
    28bc:	65 c0       	rjmp	.+202    	; 0x2988 <__vector_13+0xfa>
			PCICR |= (1 << PCIE1);		// enable external interrupt
    28be:	80 91 68 00 	lds	r24, 0x0068
    28c2:	82 60       	ori	r24, 0x02	; 2
    28c4:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    28c8:	80 91 6c 00 	lds	r24, 0x006C
    28cc:	80 68       	ori	r24, 0x80	; 128
    28ce:	80 93 6c 00 	sts	0x006C, r24
			i = -1;			
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	9f ef       	ldi	r25, 0xFF	; 255
    28d6:	90 93 02 02 	sts	0x0202, r25
    28da:	80 93 01 02 	sts	0x0201, r24
    28de:	49 c0       	rjmp	.+146    	; 0x2972 <__vector_13+0xe4>

		}
	} else {


		if (i == -1) { // start bit confirm  change timer period
    28e0:	80 91 01 02 	lds	r24, 0x0201
    28e4:	90 91 02 02 	lds	r25, 0x0202
    28e8:	2f ef       	ldi	r18, 0xFF	; 255
    28ea:	8f 3f       	cpi	r24, 0xFF	; 255
    28ec:	92 07       	cpc	r25, r18
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <__vector_13+0x64>
    28f0:	63 c0       	rjmp	.+198    	; 0x29b8 <__vector_13+0x12a>
				TIMSK2 |= (1 << OCIE2A);									

				check_temp = address_temp = data_temp = 0;
				i=0;
			}
		} else if (i == 1)	{ // check bit read and change timer period
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	91 05       	cpc	r25, r1
    28f6:	09 f4       	brne	.+2      	; 0x28fa <__vector_13+0x6c>
    28f8:	98 c0       	rjmp	.+304    	; 0x2a2a <__vector_13+0x19c>
			// 1.778/0.032 = 54 => 1.728
			OCR2A = 54;
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
			TIMSK2 |= (1 << OCIE2A);

		} else if ((i > 1) && (i < 7)) { // we read address
    28fa:	9c 01       	movw	r18, r24
    28fc:	22 50       	subi	r18, 0x02	; 2
    28fe:	30 40       	sbci	r19, 0x00	; 0
    2900:	25 30       	cpi	r18, 0x05	; 5
    2902:	31 05       	cpc	r19, r1
    2904:	08 f4       	brcc	.+2      	; 0x2908 <__vector_13+0x7a>
    2906:	67 c0       	rjmp	.+206    	; 0x29d6 <__vector_13+0x148>

			unsigned char temp = REMOTE;
			temp <<= 6-i;
			address_temp += temp;

		} else if ((i > 6) && (i < 13 )) { // we read data
    2908:	9c 01       	movw	r18, r24
    290a:	27 50       	subi	r18, 0x07	; 7
    290c:	30 40       	sbci	r19, 0x00	; 0
    290e:	26 30       	cpi	r18, 0x06	; 6
    2910:	31 05       	cpc	r19, r1
    2912:	08 f0       	brcs	.+2      	; 0x2916 <__vector_13+0x88>
    2914:	bd c0       	rjmp	.+378    	; 0x2a90 <__vector_13+0x202>

			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54
			OCR2A = 54;
    2916:	26 e3       	ldi	r18, 0x36	; 54
    2918:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    291c:	20 91 b1 00 	lds	r18, 0x00B1
    2920:	26 60       	ori	r18, 0x06	; 6
    2922:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    2926:	20 91 70 00 	lds	r18, 0x0070
    292a:	22 60       	ori	r18, 0x02	; 2
    292c:	20 93 70 00 	sts	0x0070, r18

			unsigned char temp = REMOTE;
    2930:	20 91 03 01 	lds	r18, 0x0103
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	20 74       	andi	r18, 0x40	; 64
    2938:	30 70       	andi	r19, 0x00	; 0
			temp <<= 6+6-i;
    293a:	00 24       	eor	r0, r0
    293c:	22 0f       	add	r18, r18
    293e:	33 1f       	adc	r19, r19
    2940:	00 1c       	adc	r0, r0
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	00 1c       	adc	r0, r0
    2948:	23 2f       	mov	r18, r19
    294a:	30 2d       	mov	r19, r0
    294c:	4c e0       	ldi	r20, 0x0C	; 12
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	48 1b       	sub	r20, r24
    2952:	59 0b       	sbc	r21, r25
    2954:	02 c0       	rjmp	.+4      	; 0x295a <__vector_13+0xcc>
    2956:	22 0f       	add	r18, r18
    2958:	33 1f       	adc	r19, r19
    295a:	4a 95       	dec	r20
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <__vector_13+0xc8>
			data_temp += temp;
    295e:	40 91 20 03 	lds	r20, 0x0320
    2962:	42 0f       	add	r20, r18
    2964:	40 93 20 03 	sts	0x0320, r20

			i = -1;
			check = check_temp;
			address = address_temp;
			data_ir = data_temp;
			command_received=1;
    2968:	01 96       	adiw	r24, 0x01	; 1
		} 

	}
	
	if(i!=-1)
		i++;
    296a:	90 93 02 02 	sts	0x0202, r25
    296e:	80 93 01 02 	sts	0x0201, r24


}
    2972:	9f 91       	pop	r25
    2974:	8f 91       	pop	r24
    2976:	5f 91       	pop	r21
    2978:	4f 91       	pop	r20
    297a:	3f 91       	pop	r19
    297c:	2f 91       	pop	r18
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	0f 90       	pop	r0
    2984:	1f 90       	pop	r1
    2986:	18 95       	reti
		if(REMOTE) {	// if high it is a glitch
			PCICR |= (1 << PCIE1);		// enable external interrupt
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
			i = -1;			
		} else {
			checkGlitch = 0;
    2988:	10 92 12 02 	sts	0x0212, r1
			// 2/0.128 = 15.6
			//OCR2A = 16;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 2.1/0.032 = 64 => 2.048 ms
			// but we already wait 0.416 us => 13, so 64-13=51
			OCR2A = 51;
    298c:	83 e3       	ldi	r24, 0x33	; 51
    298e:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2992:	80 91 b1 00 	lds	r24, 0x00B1
    2996:	86 60       	ori	r24, 0x06	; 6
    2998:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    299c:	80 91 70 00 	lds	r24, 0x0070
    29a0:	82 60       	ori	r24, 0x02	; 2
    29a2:	80 93 70 00 	sts	0x0070, r24
    29a6:	80 91 01 02 	lds	r24, 0x0201
    29aa:	90 91 02 02 	lds	r25, 0x0202
			//PORTB |= (1 << 6);
		} 

	}
	
	if(i!=-1)
    29ae:	2f ef       	ldi	r18, 0xFF	; 255
    29b0:	8f 3f       	cpi	r24, 0xFF	; 255
    29b2:	92 07       	cpc	r25, r18
    29b4:	c9 f6       	brne	.-78     	; 0x2968 <__vector_13+0xda>
    29b6:	dd cf       	rjmp	.-70     	; 0x2972 <__vector_13+0xe4>
	} else {


		if (i == -1) { // start bit confirm  change timer period

			if(REMOTE) {	//if high it is only a noise
    29b8:	20 91 03 01 	lds	r18, 0x0103
    29bc:	26 ff       	sbrs	r18, 6
    29be:	52 c0       	rjmp	.+164    	; 0x2a64 <__vector_13+0x1d6>

				PCICR |= (1 << PCIE1);		// enable external interrupt
    29c0:	20 91 68 00 	lds	r18, 0x0068
    29c4:	22 60       	ori	r18, 0x02	; 2
    29c6:	20 93 68 00 	sts	0x0068, r18
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    29ca:	20 91 6c 00 	lds	r18, 0x006C
    29ce:	20 68       	ori	r18, 0x80	; 128
    29d0:	20 93 6c 00 	sts	0x006C, r18
    29d4:	ce cf       	rjmp	.-100    	; 0x2972 <__vector_13+0xe4>
		} else if ((i > 1) && (i < 7)) { // we read address
		
			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54
			OCR2A = 54;
    29d6:	26 e3       	ldi	r18, 0x36	; 54
    29d8:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    29dc:	20 91 b1 00 	lds	r18, 0x00B1
    29e0:	26 60       	ori	r18, 0x06	; 6
    29e2:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    29e6:	20 91 70 00 	lds	r18, 0x0070
    29ea:	22 60       	ori	r18, 0x02	; 2
    29ec:	20 93 70 00 	sts	0x0070, r18

			unsigned char temp = REMOTE;
    29f0:	20 91 03 01 	lds	r18, 0x0103
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	20 74       	andi	r18, 0x40	; 64
    29f8:	30 70       	andi	r19, 0x00	; 0
			temp <<= 6-i;
    29fa:	00 24       	eor	r0, r0
    29fc:	22 0f       	add	r18, r18
    29fe:	33 1f       	adc	r19, r19
    2a00:	00 1c       	adc	r0, r0
    2a02:	22 0f       	add	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	00 1c       	adc	r0, r0
    2a08:	23 2f       	mov	r18, r19
    2a0a:	30 2d       	mov	r19, r0
    2a0c:	46 e0       	ldi	r20, 0x06	; 6
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	48 1b       	sub	r20, r24
    2a12:	59 0b       	sbc	r21, r25
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <__vector_13+0x18c>
    2a16:	22 0f       	add	r18, r18
    2a18:	33 1f       	adc	r19, r19
    2a1a:	4a 95       	dec	r20
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <__vector_13+0x188>
			address_temp += temp;
    2a1e:	40 91 21 03 	lds	r20, 0x0321
    2a22:	42 0f       	add	r20, r18
    2a24:	40 93 21 03 	sts	0x0321, r20
    2a28:	9f cf       	rjmp	.-194    	; 0x2968 <__vector_13+0xda>
				check_temp = address_temp = data_temp = 0;
				i=0;
			}
		} else if (i == 1)	{ // check bit read and change timer period

			check_temp = REMOTE;	   // read the check bit
    2a2a:	20 91 03 01 	lds	r18, 0x0103
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	20 74       	andi	r18, 0x40	; 64
    2a32:	30 70       	andi	r19, 0x00	; 0
    2a34:	02 2e       	mov	r0, r18
    2a36:	23 2f       	mov	r18, r19
    2a38:	00 0c       	add	r0, r0
    2a3a:	22 1f       	adc	r18, r18
    2a3c:	33 0b       	sbc	r19, r19
    2a3e:	00 0c       	add	r0, r0
    2a40:	22 1f       	adc	r18, r18
    2a42:	33 1f       	adc	r19, r19
    2a44:	20 93 22 03 	sts	0x0322, r18
			//cycle value is 1.778[ms]
			// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54 => 1.728
			OCR2A = 54;
    2a48:	26 e3       	ldi	r18, 0x36	; 54
    2a4a:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2a4e:	20 91 b1 00 	lds	r18, 0x00B1
    2a52:	26 60       	ori	r18, 0x06	; 6
    2a54:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    2a58:	20 91 70 00 	lds	r18, 0x0070
    2a5c:	22 60       	ori	r18, 0x02	; 2
    2a5e:	20 93 70 00 	sts	0x0070, r18
    2a62:	82 cf       	rjmp	.-252    	; 0x2968 <__vector_13+0xda>
				//cycle value is 0.6 to go to check bit[ms]
				// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
				//OCR2A = 5;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 0.9/0.032 = 28 => 0.896
				OCR2A = 28;
    2a64:	8c e1       	ldi	r24, 0x1C	; 28
    2a66:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2a6a:	80 91 b1 00 	lds	r24, 0x00B1
    2a6e:	86 60       	ori	r24, 0x06	; 6
    2a70:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);									
    2a74:	80 91 70 00 	lds	r24, 0x0070
    2a78:	82 60       	ori	r24, 0x02	; 2
    2a7a:	80 93 70 00 	sts	0x0070, r24

				check_temp = address_temp = data_temp = 0;
    2a7e:	10 92 20 03 	sts	0x0320, r1
    2a82:	10 92 21 03 	sts	0x0321, r1
    2a86:	10 92 22 03 	sts	0x0322, r1
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	6d cf       	rjmp	.-294    	; 0x296a <__vector_13+0xdc>

			unsigned char temp = REMOTE;
			temp <<= 6+6-i;
			data_temp += temp;

		} else if (i == 13) { // last bit read
    2a90:	8d 30       	cpi	r24, 0x0D	; 13
    2a92:	91 05       	cpc	r25, r1
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <__vector_13+0x20a>
    2a96:	68 cf       	rjmp	.-304    	; 0x2968 <__vector_13+0xda>

			PCICR |= (1 << PCIE1);		// enable interrupt
    2a98:	80 91 68 00 	lds	r24, 0x0068
    2a9c:	82 60       	ori	r24, 0x02	; 2
    2a9e:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2aa2:	80 91 6c 00 	lds	r24, 0x006C
    2aa6:	80 68       	ori	r24, 0x80	; 128
    2aa8:	80 93 6c 00 	sts	0x006C, r24

			i = -1;
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	9f ef       	ldi	r25, 0xFF	; 255
    2ab0:	90 93 02 02 	sts	0x0202, r25
    2ab4:	80 93 01 02 	sts	0x0201, r24
			check = check_temp;
    2ab8:	80 91 22 03 	lds	r24, 0x0322
    2abc:	80 93 00 02 	sts	0x0200, r24
			address = address_temp;
    2ac0:	80 91 21 03 	lds	r24, 0x0321
    2ac4:	80 93 1e 03 	sts	0x031E, r24
			data_ir = data_temp;
    2ac8:	80 91 20 03 	lds	r24, 0x0320
    2acc:	80 93 1f 03 	sts	0x031F, r24
			command_received=1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	80 93 c1 03 	sts	0x03C1, r24
    2ad6:	4d cf       	rjmp	.-358    	; 0x2972 <__vector_13+0xe4>

00002ad8 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2ad8:	08 95       	ret

00002ada <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    2ada:	08 95       	ret

00002adc <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    2adc:	2f 92       	push	r2
    2ade:	3f 92       	push	r3
    2ae0:	4f 92       	push	r4
    2ae2:	5f 92       	push	r5
    2ae4:	6f 92       	push	r6
    2ae6:	7f 92       	push	r7
    2ae8:	8f 92       	push	r8
    2aea:	9f 92       	push	r9
    2aec:	af 92       	push	r10
    2aee:	bf 92       	push	r11
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	2c 97       	sbiw	r28, 0x0c	; 12
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
    2b14:	79 87       	std	Y+9, r23	; 0x09
    2b16:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    2b18:	fc 01       	movw	r30, r24
    2b1a:	20 80       	ld	r2, Z
    2b1c:	31 80       	ldd	r3, Z+1	; 0x01
    2b1e:	42 80       	ldd	r4, Z+2	; 0x02
    2b20:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    2b22:	fb 01       	movw	r30, r22
    2b24:	a0 80       	ld	r10, Z
    2b26:	b1 80       	ldd	r11, Z+1	; 0x01
    2b28:	c2 80       	ldd	r12, Z+2	; 0x02
    2b2a:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    2b2c:	21 14       	cp	r2, r1
    2b2e:	31 04       	cpc	r3, r1
    2b30:	41 04       	cpc	r4, r1
    2b32:	51 04       	cpc	r5, r1
    2b34:	31 f4       	brne	.+12     	; 0x2b42 <start_orizzontal_speed_control+0x66>
    2b36:	a1 14       	cp	r10, r1
    2b38:	b1 04       	cpc	r11, r1
    2b3a:	c1 04       	cpc	r12, r1
    2b3c:	d1 04       	cpc	r13, r1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <start_orizzontal_speed_control+0x66>
    2b40:	bd c1       	rjmp	.+890    	; 0x2ebc <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    2b42:	60 90 0a 04 	lds	r6, 0x040A
    2b46:	70 90 0b 04 	lds	r7, 0x040B
    2b4a:	80 90 0c 04 	lds	r8, 0x040C
    2b4e:	90 90 0d 04 	lds	r9, 0x040D
    2b52:	60 92 0e 04 	sts	0x040E, r6
    2b56:	70 92 0f 04 	sts	0x040F, r7
    2b5a:	80 92 10 04 	sts	0x0410, r8
    2b5e:	90 92 11 04 	sts	0x0411, r9
	if(pwm_right_working >= 0) {
    2b62:	d7 fc       	sbrc	r13, 7
    2b64:	35 c2       	rjmp	.+1130   	; 0x2fd0 <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    2b66:	80 91 7c 03 	lds	r24, 0x037C
    2b6a:	90 91 7d 03 	lds	r25, 0x037D
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	86 01       	movw	r16, r12
    2b74:	75 01       	movw	r14, r10
    2b76:	e8 1a       	sub	r14, r24
    2b78:	f9 0a       	sbc	r15, r25
    2b7a:	0a 0b       	sbc	r16, r26
    2b7c:	1b 0b       	sbc	r17, r27
    2b7e:	e0 92 9a 03 	sts	0x039A, r14
    2b82:	f0 92 9b 03 	sts	0x039B, r15
    2b86:	00 93 9c 03 	sts	0x039C, r16
    2b8a:	10 93 9d 03 	sts	0x039D, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    2b8e:	e0 92 0a 04 	sts	0x040A, r14
    2b92:	f0 92 0b 04 	sts	0x040B, r15
    2b96:	00 93 0c 04 	sts	0x040C, r16
    2b9a:	10 93 0d 04 	sts	0x040D, r17
	delta_right_speed_sum += delta_right_speed;
    2b9e:	60 91 a2 03 	lds	r22, 0x03A2
    2ba2:	70 91 a3 03 	lds	r23, 0x03A3
    2ba6:	80 91 a4 03 	lds	r24, 0x03A4
    2baa:	90 91 a5 03 	lds	r25, 0x03A5
    2bae:	6e 0d       	add	r22, r14
    2bb0:	7f 1d       	adc	r23, r15
    2bb2:	80 1f       	adc	r24, r16
    2bb4:	91 1f       	adc	r25, r17
    2bb6:	60 93 a2 03 	sts	0x03A2, r22
    2bba:	70 93 a3 03 	sts	0x03A3, r23
    2bbe:	80 93 a4 03 	sts	0x03A4, r24
    2bc2:	90 93 a5 03 	sts	0x03A5, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    2bc6:	61 38       	cpi	r22, 0x81	; 129
    2bc8:	fc e0       	ldi	r31, 0x0C	; 12
    2bca:	7f 07       	cpc	r23, r31
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8f 07       	cpc	r24, r31
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	9f 07       	cpc	r25, r31
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <start_orizzontal_speed_control+0xfc>
    2bd6:	8b c1       	rjmp	.+790    	; 0x2eee <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2bd8:	60 38       	cpi	r22, 0x80	; 128
    2bda:	e3 ef       	ldi	r30, 0xF3	; 243
    2bdc:	7e 07       	cpc	r23, r30
    2bde:	ef ef       	ldi	r30, 0xFF	; 255
    2be0:	8e 07       	cpc	r24, r30
    2be2:	ef ef       	ldi	r30, 0xFF	; 255
    2be4:	9e 07       	cpc	r25, r30
    2be6:	0c f4       	brge	.+2      	; 0x2bea <start_orizzontal_speed_control+0x10e>
    2be8:	2c c2       	rjmp	.+1112   	; 0x3042 <start_orizzontal_speed_control+0x566>
    2bea:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    2bee:	9b 01       	movw	r18, r22
    2bf0:	ac 01       	movw	r20, r24
    2bf2:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__addsf3>
    2bf6:	6d 83       	std	Y+5, r22	; 0x05
    2bf8:	7e 83       	std	Y+6, r23	; 0x06
    2bfa:	8f 83       	std	Y+7, r24	; 0x07
    2bfc:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    2bfe:	c8 01       	movw	r24, r16
    2c00:	b7 01       	movw	r22, r14
    2c02:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	48 ec       	ldi	r20, 0xC8	; 200
    2c0c:	52 e4       	ldi	r21, 0x42	; 66
    2c0e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3>
    2c12:	69 83       	std	Y+1, r22	; 0x01
    2c14:	7a 83       	std	Y+2, r23	; 0x02
    2c16:	8b 83       	std	Y+3, r24	; 0x03
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	c8 01       	movw	r24, r16
    2c1c:	b7 01       	movw	r22, r14
    2c1e:	66 19       	sub	r22, r6
    2c20:	77 09       	sbc	r23, r7
    2c22:	88 09       	sbc	r24, r8
    2c24:	99 09       	sbc	r25, r9
    2c26:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3>
    2c36:	9b 01       	movw	r18, r22
    2c38:	ac 01       	movw	r20, r24
    2c3a:	69 81       	ldd	r22, Y+1	; 0x01
    2c3c:	7a 81       	ldd	r23, Y+2	; 0x02
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__addsf3>
    2c46:	bd 81       	ldd	r27, Y+5	; 0x05
    2c48:	ae 81       	ldd	r26, Y+6	; 0x06
    2c4a:	ef 80       	ldd	r14, Y+7	; 0x07
    2c4c:	6a 84       	ldd	r6, Y+10	; 0x0a
    2c4e:	2b 2f       	mov	r18, r27
    2c50:	3a 2f       	mov	r19, r26
    2c52:	4e 2d       	mov	r20, r14
    2c54:	56 2d       	mov	r21, r6
    2c56:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__addsf3>
    2c5a:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__fixsfsi>
    2c5e:	7b 01       	movw	r14, r22
    2c60:	8c 01       	movw	r16, r24
    2c62:	60 93 aa 03 	sts	0x03AA, r22
    2c66:	70 93 ab 03 	sts	0x03AB, r23
    2c6a:	80 93 ac 03 	sts	0x03AC, r24
    2c6e:	90 93 ad 03 	sts	0x03AD, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    2c72:	c6 01       	movw	r24, r12
    2c74:	b5 01       	movw	r22, r10
    2c76:	28 e7       	ldi	r18, 0x78	; 120
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	0e 94 56 20 	call	0x40ac	; 0x40ac <__mulsi3>
    2c82:	6e 0d       	add	r22, r14
    2c84:	7f 1d       	adc	r23, r15
    2c86:	80 1f       	adc	r24, r16
    2c88:	91 1f       	adc	r25, r17
    2c8a:	60 93 8e 03 	sts	0x038E, r22
    2c8e:	70 93 8f 03 	sts	0x038F, r23
    2c92:	80 93 90 03 	sts	0x0390, r24
    2c96:	90 93 91 03 	sts	0x0391, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2c9a:	97 fd       	sbrc	r25, 7
    2c9c:	76 c1       	rjmp	.+748    	; 0x2f8a <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    2c9e:	16 16       	cp	r1, r22
    2ca0:	17 06       	cpc	r1, r23
    2ca2:	18 06       	cpc	r1, r24
    2ca4:	19 06       	cpc	r1, r25
    2ca6:	0c f0       	brlt	.+2      	; 0x2caa <start_orizzontal_speed_control+0x1ce>
    2ca8:	7d c1       	rjmp	.+762    	; 0x2fa4 <start_orizzontal_speed_control+0x4c8>
    2caa:	d7 fc       	sbrc	r13, 7
    2cac:	fd c1       	rjmp	.+1018   	; 0x30a8 <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2cae:	61 3c       	cpi	r22, 0xC1	; 193
    2cb0:	ed e5       	ldi	r30, 0x5D	; 93
    2cb2:	7e 07       	cpc	r23, r30
    2cb4:	e0 e0       	ldi	r30, 0x00	; 0
    2cb6:	8e 07       	cpc	r24, r30
    2cb8:	e0 e0       	ldi	r30, 0x00	; 0
    2cba:	9e 07       	cpc	r25, r30
    2cbc:	0c f4       	brge	.+2      	; 0x2cc0 <start_orizzontal_speed_control+0x1e4>
    2cbe:	72 c1       	rjmp	.+740    	; 0x2fa4 <start_orizzontal_speed_control+0x4c8>
    2cc0:	80 ec       	ldi	r24, 0xC0	; 192
    2cc2:	9d e5       	ldi	r25, 0x5D	; 93
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	80 93 8e 03 	sts	0x038E, r24
    2ccc:	90 93 8f 03 	sts	0x038F, r25
    2cd0:	a0 93 90 03 	sts	0x0390, r26
    2cd4:	b0 93 91 03 	sts	0x0391, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    2cd8:	a0 90 02 04 	lds	r10, 0x0402
    2cdc:	b0 90 03 04 	lds	r11, 0x0403
    2ce0:	c0 90 04 04 	lds	r12, 0x0404
    2ce4:	d0 90 05 04 	lds	r13, 0x0405
    2ce8:	a0 92 06 04 	sts	0x0406, r10
    2cec:	b0 92 07 04 	sts	0x0407, r11
    2cf0:	c0 92 08 04 	sts	0x0408, r12
    2cf4:	d0 92 09 04 	sts	0x0409, r13
	if(pwm_left_working >= 0) {
    2cf8:	57 fc       	sbrc	r5, 7
    2cfa:	7d c1       	rjmp	.+762    	; 0x2ff6 <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    2cfc:	80 91 7a 03 	lds	r24, 0x037A
    2d00:	90 91 7b 03 	lds	r25, 0x037B
    2d04:	a0 e0       	ldi	r26, 0x00	; 0
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	82 01       	movw	r16, r4
    2d0a:	71 01       	movw	r14, r2
    2d0c:	e8 1a       	sub	r14, r24
    2d0e:	f9 0a       	sbc	r15, r25
    2d10:	0a 0b       	sbc	r16, r26
    2d12:	1b 0b       	sbc	r17, r27
    2d14:	e0 92 96 03 	sts	0x0396, r14
    2d18:	f0 92 97 03 	sts	0x0397, r15
    2d1c:	00 93 98 03 	sts	0x0398, r16
    2d20:	10 93 99 03 	sts	0x0399, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    2d24:	e0 92 02 04 	sts	0x0402, r14
    2d28:	f0 92 03 04 	sts	0x0403, r15
    2d2c:	00 93 04 04 	sts	0x0404, r16
    2d30:	10 93 05 04 	sts	0x0405, r17
	delta_left_speed_sum += delta_left_speed;
    2d34:	60 91 9e 03 	lds	r22, 0x039E
    2d38:	70 91 9f 03 	lds	r23, 0x039F
    2d3c:	80 91 a0 03 	lds	r24, 0x03A0
    2d40:	90 91 a1 03 	lds	r25, 0x03A1
    2d44:	6e 0d       	add	r22, r14
    2d46:	7f 1d       	adc	r23, r15
    2d48:	80 1f       	adc	r24, r16
    2d4a:	91 1f       	adc	r25, r17
    2d4c:	60 93 9e 03 	sts	0x039E, r22
    2d50:	70 93 9f 03 	sts	0x039F, r23
    2d54:	80 93 a0 03 	sts	0x03A0, r24
    2d58:	90 93 a1 03 	sts	0x03A1, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    2d5c:	61 38       	cpi	r22, 0x81	; 129
    2d5e:	2c e0       	ldi	r18, 0x0C	; 12
    2d60:	72 07       	cpc	r23, r18
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	82 07       	cpc	r24, r18
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	92 07       	cpc	r25, r18
    2d6a:	0c f4       	brge	.+2      	; 0x2d6e <start_orizzontal_speed_control+0x292>
    2d6c:	d3 c0       	rjmp	.+422    	; 0x2f14 <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	9c e0       	ldi	r25, 0x0C	; 12
    2d72:	a0 e0       	ldi	r26, 0x00	; 0
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	80 93 9e 03 	sts	0x039E, r24
    2d7a:	90 93 9f 03 	sts	0x039F, r25
    2d7e:	a0 93 a0 03 	sts	0x03A0, r26
    2d82:	b0 93 a1 03 	sts	0x03A1, r27
    2d86:	19 82       	std	Y+1, r1	; 0x01
    2d88:	1d 82       	std	Y+5, r1	; 0x05
    2d8a:	88 ec       	ldi	r24, 0xC8	; 200
    2d8c:	8e 83       	std	Y+6, r24	; 0x06
    2d8e:	e5 e4       	ldi	r30, 0x45	; 69
    2d90:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    2d92:	c8 01       	movw	r24, r16
    2d94:	b7 01       	movw	r22, r14
    2d96:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	48 ec       	ldi	r20, 0xC8	; 200
    2da0:	52 e4       	ldi	r21, 0x42	; 66
    2da2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3>
    2da6:	3b 01       	movw	r6, r22
    2da8:	4c 01       	movw	r8, r24
    2daa:	c8 01       	movw	r24, r16
    2dac:	b7 01       	movw	r22, r14
    2dae:	6a 19       	sub	r22, r10
    2db0:	7b 09       	sbc	r23, r11
    2db2:	8c 09       	sbc	r24, r12
    2db4:	9d 09       	sbc	r25, r13
    2db6:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3>
    2dc6:	9b 01       	movw	r18, r22
    2dc8:	ac 01       	movw	r20, r24
    2dca:	c4 01       	movw	r24, r8
    2dcc:	b3 01       	movw	r22, r6
    2dce:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__addsf3>
    2dd2:	b9 81       	ldd	r27, Y+1	; 0x01
    2dd4:	ad 81       	ldd	r26, Y+5	; 0x05
    2dd6:	ee 80       	ldd	r14, Y+6	; 0x06
    2dd8:	af 80       	ldd	r10, Y+7	; 0x07
    2dda:	2b 2f       	mov	r18, r27
    2ddc:	3a 2f       	mov	r19, r26
    2dde:	4e 2d       	mov	r20, r14
    2de0:	5a 2d       	mov	r21, r10
    2de2:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__addsf3>
    2de6:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__fixsfsi>
    2dea:	7b 01       	movw	r14, r22
    2dec:	8c 01       	movw	r16, r24
    2dee:	60 93 a6 03 	sts	0x03A6, r22
    2df2:	70 93 a7 03 	sts	0x03A7, r23
    2df6:	80 93 a8 03 	sts	0x03A8, r24
    2dfa:	90 93 a9 03 	sts	0x03A9, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    2dfe:	c2 01       	movw	r24, r4
    2e00:	b1 01       	movw	r22, r2
    2e02:	28 e7       	ldi	r18, 0x78	; 120
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	0e 94 56 20 	call	0x40ac	; 0x40ac <__mulsi3>
    2e0e:	6e 0d       	add	r22, r14
    2e10:	7f 1d       	adc	r23, r15
    2e12:	80 1f       	adc	r24, r16
    2e14:	91 1f       	adc	r25, r17
    2e16:	60 93 92 03 	sts	0x0392, r22
    2e1a:	70 93 93 03 	sts	0x0393, r23
    2e1e:	80 93 94 03 	sts	0x0394, r24
    2e22:	90 93 95 03 	sts	0x0395, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2e26:	97 fd       	sbrc	r25, 7
    2e28:	89 c0       	rjmp	.+274    	; 0x2f3c <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    2e2a:	16 16       	cp	r1, r22
    2e2c:	17 06       	cpc	r1, r23
    2e2e:	18 06       	cpc	r1, r24
    2e30:	19 06       	cpc	r1, r25
    2e32:	0c f0       	brlt	.+2      	; 0x2e36 <start_orizzontal_speed_control+0x35a>
    2e34:	90 c0       	rjmp	.+288    	; 0x2f56 <start_orizzontal_speed_control+0x47a>
    2e36:	57 fc       	sbrc	r5, 7
    2e38:	17 c1       	rjmp	.+558    	; 0x3068 <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2e3a:	61 3c       	cpi	r22, 0xC1	; 193
    2e3c:	ed e5       	ldi	r30, 0x5D	; 93
    2e3e:	7e 07       	cpc	r23, r30
    2e40:	e0 e0       	ldi	r30, 0x00	; 0
    2e42:	8e 07       	cpc	r24, r30
    2e44:	e0 e0       	ldi	r30, 0x00	; 0
    2e46:	9e 07       	cpc	r25, r30
    2e48:	0c f4       	brge	.+2      	; 0x2e4c <start_orizzontal_speed_control+0x370>
    2e4a:	85 c0       	rjmp	.+266    	; 0x2f56 <start_orizzontal_speed_control+0x47a>
    2e4c:	80 ec       	ldi	r24, 0xC0	; 192
    2e4e:	9d e5       	ldi	r25, 0x5D	; 93
    2e50:	a0 e0       	ldi	r26, 0x00	; 0
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	80 93 92 03 	sts	0x0392, r24
    2e58:	90 93 93 03 	sts	0x0393, r25
    2e5c:	a0 93 94 03 	sts	0x0394, r26
    2e60:	b0 93 95 03 	sts	0x0395, r27
    2e64:	64 eb       	ldi	r22, 0xB4	; 180
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2e6c:	eb 85       	ldd	r30, Y+11	; 0x0b
    2e6e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e70:	60 83       	st	Z, r22
    2e72:	71 83       	std	Z+1, r23	; 0x01
    2e74:	82 83       	std	Z+2, r24	; 0x02
    2e76:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2e78:	60 91 8e 03 	lds	r22, 0x038E
    2e7c:	70 91 8f 03 	lds	r23, 0x038F
    2e80:	80 91 90 03 	lds	r24, 0x0390
    2e84:	90 91 91 03 	lds	r25, 0x0391
    2e88:	26 e6       	ldi	r18, 0x66	; 102
    2e8a:	32 e0       	ldi	r19, 0x02	; 2
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	0e 94 56 20 	call	0x40ac	; 0x40ac <__mulsi3>
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	39 e0       	ldi	r19, 0x09	; 9
    2e98:	4d e3       	ldi	r20, 0x3D	; 61
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	0e 94 9c 20 	call	0x4138	; 0x4138 <__divmodsi4>
    2ea0:	ca 01       	movw	r24, r20
    2ea2:	b9 01       	movw	r22, r18
    2ea4:	2c e3       	ldi	r18, 0x3C	; 60
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	0e 94 56 20 	call	0x40ac	; 0x40ac <__mulsi3>
    2eb0:	e8 85       	ldd	r30, Y+8	; 0x08
    2eb2:	f9 85       	ldd	r31, Y+9	; 0x09
    2eb4:	60 83       	st	Z, r22
    2eb6:	71 83       	std	Z+1, r23	; 0x01
    2eb8:	82 83       	std	Z+2, r24	; 0x02
    2eba:	93 83       	std	Z+3, r25	; 0x03

}
    2ebc:	2c 96       	adiw	r28, 0x0c	; 12
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	df 90       	pop	r13
    2ed6:	cf 90       	pop	r12
    2ed8:	bf 90       	pop	r11
    2eda:	af 90       	pop	r10
    2edc:	9f 90       	pop	r9
    2ede:	8f 90       	pop	r8
    2ee0:	7f 90       	pop	r7
    2ee2:	6f 90       	pop	r6
    2ee4:	5f 90       	pop	r5
    2ee6:	4f 90       	pop	r4
    2ee8:	3f 90       	pop	r3
    2eea:	2f 90       	pop	r2
    2eec:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2eee:	80 e8       	ldi	r24, 0x80	; 128
    2ef0:	9c e0       	ldi	r25, 0x0C	; 12
    2ef2:	a0 e0       	ldi	r26, 0x00	; 0
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	80 93 a2 03 	sts	0x03A2, r24
    2efa:	90 93 a3 03 	sts	0x03A3, r25
    2efe:	a0 93 a4 03 	sts	0x03A4, r26
    2f02:	b0 93 a5 03 	sts	0x03A5, r27
    2f06:	1d 82       	std	Y+5, r1	; 0x05
    2f08:	1e 82       	std	Y+6, r1	; 0x06
    2f0a:	28 ec       	ldi	r18, 0xC8	; 200
    2f0c:	2f 83       	std	Y+7, r18	; 0x07
    2f0e:	85 e4       	ldi	r24, 0x45	; 69
    2f10:	8a 87       	std	Y+10, r24	; 0x0a
    2f12:	75 ce       	rjmp	.-790    	; 0x2bfe <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2f14:	60 38       	cpi	r22, 0x80	; 128
    2f16:	f3 ef       	ldi	r31, 0xF3	; 243
    2f18:	7f 07       	cpc	r23, r31
    2f1a:	ff ef       	ldi	r31, 0xFF	; 255
    2f1c:	8f 07       	cpc	r24, r31
    2f1e:	ff ef       	ldi	r31, 0xFF	; 255
    2f20:	9f 07       	cpc	r25, r31
    2f22:	0c f4       	brge	.+2      	; 0x2f26 <start_orizzontal_speed_control+0x44a>
    2f24:	7b c0       	rjmp	.+246    	; 0x301c <start_orizzontal_speed_control+0x540>
    2f26:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    2f2a:	9b 01       	movw	r18, r22
    2f2c:	ac 01       	movw	r20, r24
    2f2e:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__addsf3>
    2f32:	69 83       	std	Y+1, r22	; 0x01
    2f34:	7d 83       	std	Y+5, r23	; 0x05
    2f36:	8e 83       	std	Y+6, r24	; 0x06
    2f38:	9f 83       	std	Y+7, r25	; 0x07
    2f3a:	2b cf       	rjmp	.-426    	; 0x2d92 <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2f3c:	57 fc       	sbrc	r5, 7
    2f3e:	0b c0       	rjmp	.+22     	; 0x2f56 <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    2f40:	10 92 92 03 	sts	0x0392, r1
    2f44:	10 92 93 03 	sts	0x0393, r1
    2f48:	10 92 94 03 	sts	0x0394, r1
    2f4c:	10 92 95 03 	sts	0x0395, r1
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2f56:	60 34       	cpi	r22, 0x40	; 64
    2f58:	f2 ea       	ldi	r31, 0xA2	; 162
    2f5a:	7f 07       	cpc	r23, r31
    2f5c:	ff ef       	ldi	r31, 0xFF	; 255
    2f5e:	8f 07       	cpc	r24, r31
    2f60:	ff ef       	ldi	r31, 0xFF	; 255
    2f62:	9f 07       	cpc	r25, r31
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <start_orizzontal_speed_control+0x48c>
    2f66:	8b c0       	rjmp	.+278    	; 0x307e <start_orizzontal_speed_control+0x5a2>
    2f68:	80 e4       	ldi	r24, 0x40	; 64
    2f6a:	92 ea       	ldi	r25, 0xA2	; 162
    2f6c:	af ef       	ldi	r26, 0xFF	; 255
    2f6e:	bf ef       	ldi	r27, 0xFF	; 255
    2f70:	80 93 92 03 	sts	0x0392, r24
    2f74:	90 93 93 03 	sts	0x0393, r25
    2f78:	a0 93 94 03 	sts	0x0394, r26
    2f7c:	b0 93 95 03 	sts	0x0395, r27
    2f80:	6c e4       	ldi	r22, 0x4C	; 76
    2f82:	7f ef       	ldi	r23, 0xFF	; 255
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	71 cf       	rjmp	.-286    	; 0x2e6c <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2f8a:	d7 fc       	sbrc	r13, 7
    2f8c:	0b c0       	rjmp	.+22     	; 0x2fa4 <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    2f8e:	10 92 8e 03 	sts	0x038E, r1
    2f92:	10 92 8f 03 	sts	0x038F, r1
    2f96:	10 92 90 03 	sts	0x0390, r1
    2f9a:	10 92 91 03 	sts	0x0391, r1
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2fa4:	60 34       	cpi	r22, 0x40	; 64
    2fa6:	f2 ea       	ldi	r31, 0xA2	; 162
    2fa8:	7f 07       	cpc	r23, r31
    2faa:	ff ef       	ldi	r31, 0xFF	; 255
    2fac:	8f 07       	cpc	r24, r31
    2fae:	ff ef       	ldi	r31, 0xFF	; 255
    2fb0:	9f 07       	cpc	r25, r31
    2fb2:	0c f0       	brlt	.+2      	; 0x2fb6 <start_orizzontal_speed_control+0x4da>
    2fb4:	91 ce       	rjmp	.-734    	; 0x2cd8 <start_orizzontal_speed_control+0x1fc>
    2fb6:	80 e4       	ldi	r24, 0x40	; 64
    2fb8:	92 ea       	ldi	r25, 0xA2	; 162
    2fba:	af ef       	ldi	r26, 0xFF	; 255
    2fbc:	bf ef       	ldi	r27, 0xFF	; 255
    2fbe:	80 93 8e 03 	sts	0x038E, r24
    2fc2:	90 93 8f 03 	sts	0x038F, r25
    2fc6:	a0 93 90 03 	sts	0x0390, r26
    2fca:	b0 93 91 03 	sts	0x0391, r27
    2fce:	84 ce       	rjmp	.-760    	; 0x2cd8 <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    2fd0:	e0 90 7c 03 	lds	r14, 0x037C
    2fd4:	f0 90 7d 03 	lds	r15, 0x037D
    2fd8:	00 e0       	ldi	r16, 0x00	; 0
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	ea 0c       	add	r14, r10
    2fde:	fb 1c       	adc	r15, r11
    2fe0:	0c 1d       	adc	r16, r12
    2fe2:	1d 1d       	adc	r17, r13
    2fe4:	e0 92 9a 03 	sts	0x039A, r14
    2fe8:	f0 92 9b 03 	sts	0x039B, r15
    2fec:	00 93 9c 03 	sts	0x039C, r16
    2ff0:	10 93 9d 03 	sts	0x039D, r17
    2ff4:	cc cd       	rjmp	.-1128   	; 0x2b8e <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    2ff6:	e0 90 7a 03 	lds	r14, 0x037A
    2ffa:	f0 90 7b 03 	lds	r15, 0x037B
    2ffe:	00 e0       	ldi	r16, 0x00	; 0
    3000:	10 e0       	ldi	r17, 0x00	; 0
    3002:	e2 0c       	add	r14, r2
    3004:	f3 1c       	adc	r15, r3
    3006:	04 1d       	adc	r16, r4
    3008:	15 1d       	adc	r17, r5
    300a:	e0 92 96 03 	sts	0x0396, r14
    300e:	f0 92 97 03 	sts	0x0397, r15
    3012:	00 93 98 03 	sts	0x0398, r16
    3016:	10 93 99 03 	sts	0x0399, r17
    301a:	84 ce       	rjmp	.-760    	; 0x2d24 <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    301c:	80 e8       	ldi	r24, 0x80	; 128
    301e:	93 ef       	ldi	r25, 0xF3	; 243
    3020:	af ef       	ldi	r26, 0xFF	; 255
    3022:	bf ef       	ldi	r27, 0xFF	; 255
    3024:	80 93 9e 03 	sts	0x039E, r24
    3028:	90 93 9f 03 	sts	0x039F, r25
    302c:	a0 93 a0 03 	sts	0x03A0, r26
    3030:	b0 93 a1 03 	sts	0x03A1, r27
    3034:	19 82       	std	Y+1, r1	; 0x01
    3036:	1d 82       	std	Y+5, r1	; 0x05
    3038:	28 ec       	ldi	r18, 0xC8	; 200
    303a:	2e 83       	std	Y+6, r18	; 0x06
    303c:	85 ec       	ldi	r24, 0xC5	; 197
    303e:	8f 83       	std	Y+7, r24	; 0x07
    3040:	a8 ce       	rjmp	.-688    	; 0x2d92 <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    3042:	80 e8       	ldi	r24, 0x80	; 128
    3044:	93 ef       	ldi	r25, 0xF3	; 243
    3046:	af ef       	ldi	r26, 0xFF	; 255
    3048:	bf ef       	ldi	r27, 0xFF	; 255
    304a:	80 93 a2 03 	sts	0x03A2, r24
    304e:	90 93 a3 03 	sts	0x03A3, r25
    3052:	a0 93 a4 03 	sts	0x03A4, r26
    3056:	b0 93 a5 03 	sts	0x03A5, r27
    305a:	1d 82       	std	Y+5, r1	; 0x05
    305c:	1e 82       	std	Y+6, r1	; 0x06
    305e:	f8 ec       	ldi	r31, 0xC8	; 200
    3060:	ff 83       	std	Y+7, r31	; 0x07
    3062:	25 ec       	ldi	r18, 0xC5	; 197
    3064:	2a 87       	std	Y+10, r18	; 0x0a
    3066:	cb cd       	rjmp	.-1130   	; 0x2bfe <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    3068:	10 92 92 03 	sts	0x0392, r1
    306c:	10 92 93 03 	sts	0x0393, r1
    3070:	10 92 94 03 	sts	0x0394, r1
    3074:	10 92 95 03 	sts	0x0395, r1
    3078:	60 e0       	ldi	r22, 0x00	; 0
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    307e:	26 e6       	ldi	r18, 0x66	; 102
    3080:	32 e0       	ldi	r19, 0x02	; 2
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	0e 94 56 20 	call	0x40ac	; 0x40ac <__mulsi3>
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	39 e0       	ldi	r19, 0x09	; 9
    308e:	4d e3       	ldi	r20, 0x3D	; 61
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	0e 94 9c 20 	call	0x4138	; 0x4138 <__divmodsi4>
    3096:	ca 01       	movw	r24, r20
    3098:	b9 01       	movw	r22, r18
    309a:	2c e3       	ldi	r18, 0x3C	; 60
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	0e 94 56 20 	call	0x40ac	; 0x40ac <__mulsi3>
    30a6:	e2 ce       	rjmp	.-572    	; 0x2e6c <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    30a8:	10 92 8e 03 	sts	0x038E, r1
    30ac:	10 92 8f 03 	sts	0x038F, r1
    30b0:	10 92 90 03 	sts	0x0390, r1
    30b4:	10 92 91 03 	sts	0x0391, r1
    30b8:	0f ce       	rjmp	.-994    	; 0x2cd8 <start_orizzontal_speed_control+0x1fc>

000030ba <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    30ba:	8f ef       	ldi	r24, 0xFF	; 255
    30bc:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    30be:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    30c0:	97 ef       	ldi	r25, 0xF7	; 247
    30c2:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    30c4:	90 ee       	ldi	r25, 0xE0	; 224
    30c6:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    30c8:	90 ef       	ldi	r25, 0xF0	; 240
    30ca:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    30cc:	90 eb       	ldi	r25, 0xB0	; 176
    30ce:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    30d0:	9c ef       	ldi	r25, 0xFC	; 252
    30d2:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    30d4:	93 e0       	ldi	r25, 0x03	; 3
    30d6:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    30d8:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    30da:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    30dc:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    30de:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    30e0:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    30e2:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    30e6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    30ea:	9f e8       	ldi	r25, 0x8F	; 143
    30ec:	90 93 04 01 	sts	0x0104, r25
	#endif
	#ifdef HE_REV_3_1
	PORTJ = 0x0F;
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    30f0:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    30f4:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    30f8:	10 92 0b 01 	sts	0x010B, r1

		
}
    30fc:	08 95       	ret

000030fe <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    30fe:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3100:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3102:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3106:	80 e2       	ldi	r24, 0x20	; 32
    3108:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    310c:	08 95       	ret

0000310e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    310e:	94 ea       	ldi	r25, 0xA4	; 164
    3110:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3114:	90 91 bc 00 	lds	r25, 0x00BC
    3118:	97 ff       	sbrs	r25, 7
    311a:	fc cf       	rjmp	.-8      	; 0x3114 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    311c:	90 91 b9 00 	lds	r25, 0x00B9
    3120:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3122:	98 30       	cpi	r25, 0x08	; 8
    3124:	21 f0       	breq	.+8      	; 0x312e <i2c_start+0x20>
    3126:	90 31       	cpi	r25, 0x10	; 16
    3128:	11 f0       	breq	.+4      	; 0x312e <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    312e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3132:	84 e8       	ldi	r24, 0x84	; 132
    3134:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3138:	80 91 bc 00 	lds	r24, 0x00BC
    313c:	87 ff       	sbrs	r24, 7
    313e:	fc cf       	rjmp	.-8      	; 0x3138 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3140:	90 91 b9 00 	lds	r25, 0x00B9
    3144:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3146:	98 31       	cpi	r25, 0x18	; 24
    3148:	21 f0       	breq	.+8      	; 0x3152 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 34       	cpi	r25, 0x40	; 64
    314e:	19 f0       	breq	.+6      	; 0x3156 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3150:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3152:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3154:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	08 95       	ret

0000315a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    315a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    315c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    315e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3160:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3164:	90 91 bc 00 	lds	r25, 0x00BC
    3168:	97 ff       	sbrs	r25, 7
    316a:	fc cf       	rjmp	.-8      	; 0x3164 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    316c:	90 91 b9 00 	lds	r25, 0x00B9
    3170:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3172:	98 30       	cpi	r25, 0x08	; 8
    3174:	11 f0       	breq	.+4      	; 0x317a <i2c_start_wait+0x20>
    3176:	90 31       	cpi	r25, 0x10	; 16
    3178:	99 f7       	brne	.-26     	; 0x3160 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    317a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    317e:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3182:	90 91 bc 00 	lds	r25, 0x00BC
    3186:	97 ff       	sbrs	r25, 7
    3188:	fc cf       	rjmp	.-8      	; 0x3182 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    318a:	90 91 b9 00 	lds	r25, 0x00B9
    318e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3190:	90 32       	cpi	r25, 0x20	; 32
    3192:	19 f0       	breq	.+6      	; 0x319a <i2c_start_wait+0x40>
    3194:	98 35       	cpi	r25, 0x58	; 88
    3196:	09 f0       	breq	.+2      	; 0x319a <i2c_start_wait+0x40>
    3198:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    319a:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    319e:	90 91 bc 00 	lds	r25, 0x00BC
    31a2:	94 fd       	sbrc	r25, 4
    31a4:	fc cf       	rjmp	.-8      	; 0x319e <i2c_start_wait+0x44>
    31a6:	dc cf       	rjmp	.-72     	; 0x3160 <i2c_start_wait+0x6>

000031a8 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    31a8:	94 ea       	ldi	r25, 0xA4	; 164
    31aa:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    31ae:	90 91 bc 00 	lds	r25, 0x00BC
    31b2:	97 ff       	sbrs	r25, 7
    31b4:	fc cf       	rjmp	.-8      	; 0x31ae <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    31b6:	90 91 b9 00 	lds	r25, 0x00B9
    31ba:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    31bc:	98 30       	cpi	r25, 0x08	; 8
    31be:	21 f0       	breq	.+8      	; 0x31c8 <i2c_rep_start+0x20>
    31c0:	90 31       	cpi	r25, 0x10	; 16
    31c2:	11 f0       	breq	.+4      	; 0x31c8 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    31c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    31cc:	84 e8       	ldi	r24, 0x84	; 132
    31ce:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    31d2:	80 91 bc 00 	lds	r24, 0x00BC
    31d6:	87 ff       	sbrs	r24, 7
    31d8:	fc cf       	rjmp	.-8      	; 0x31d2 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    31da:	90 91 b9 00 	lds	r25, 0x00B9
    31de:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    31e0:	98 31       	cpi	r25, 0x18	; 24
    31e2:	21 f0       	breq	.+8      	; 0x31ec <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 34       	cpi	r25, 0x40	; 64
    31e8:	19 f0       	breq	.+6      	; 0x31f0 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    31ea:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    31ec:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    31ee:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	08 95       	ret

000031f4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    31f4:	84 e9       	ldi	r24, 0x94	; 148
    31f6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    31fa:	80 91 bc 00 	lds	r24, 0x00BC
    31fe:	84 fd       	sbrc	r24, 4
    3200:	fc cf       	rjmp	.-8      	; 0x31fa <i2c_stop+0x6>

}/* i2c_stop */
    3202:	08 95       	ret

00003204 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3204:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3208:	84 e8       	ldi	r24, 0x84	; 132
    320a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    320e:	80 91 bc 00 	lds	r24, 0x00BC
    3212:	87 ff       	sbrs	r24, 7
    3214:	fc cf       	rjmp	.-8      	; 0x320e <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3216:	90 91 b9 00 	lds	r25, 0x00B9
    321a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	98 32       	cpi	r25, 0x28	; 40
    3220:	09 f0       	breq	.+2      	; 0x3224 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3222:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3224:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3226:	08 95       	ret

00003228 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3228:	84 ec       	ldi	r24, 0xC4	; 196
    322a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    322e:	80 91 bc 00 	lds	r24, 0x00BC
    3232:	87 ff       	sbrs	r24, 7
    3234:	fc cf       	rjmp	.-8      	; 0x322e <i2c_readAck+0x6>

    return TWDR;
    3236:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    323a:	08 95       	ret

0000323c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    323c:	84 e8       	ldi	r24, 0x84	; 132
    323e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3242:	80 91 bc 00 	lds	r24, 0x00BC
    3246:	87 ff       	sbrs	r24, 7
    3248:	fc cf       	rjmp	.-8      	; 0x3242 <i2c_readNak+0x6>
	
    return TWDR;
    324a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    324e:	08 95       	ret

00003250 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    3250:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3254:	80 e1       	ldi	r24, 0x10	; 16
    3256:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    325a:	e0 ec       	ldi	r30, 0xC0	; 192
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	82 60       	ori	r24, 0x02	; 2
    3262:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    3264:	e1 ec       	ldi	r30, 0xC1	; 193
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	88 69       	ori	r24, 0x98	; 152
    326c:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    326e:	e2 ec       	ldi	r30, 0xC2	; 194
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	86 60       	ori	r24, 0x06	; 6
    3276:	80 83       	st	Z, r24

}
    3278:	08 95       	ret

0000327a <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    327a:	90 91 c0 00 	lds	r25, 0x00C0
    327e:	95 ff       	sbrs	r25, 5
    3280:	fc cf       	rjmp	.-8      	; 0x327a <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    3282:	80 93 c6 00 	sts	0x00C6, r24

}
    3286:	08 95       	ret

00003288 <__vector_25>:

ISR(USART0_RX_vect) {
    3288:	1f 92       	push	r1
    328a:	0f 92       	push	r0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	0f 92       	push	r0
    3290:	11 24       	eor	r1, r1
    3292:	2f 93       	push	r18
    3294:	8f 93       	push	r24
    3296:	9f 93       	push	r25
    3298:	af 93       	push	r26
    329a:	bf 93       	push	r27

	char receivedByte = UDR0;
    329c:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    32a0:	90 91 10 02 	lds	r25, 0x0210
    32a4:	99 23       	and	r25, r25
    32a6:	c9 f0       	breq	.+50     	; 0x32da <__vector_25+0x52>
		switch(receivedByte) {
    32a8:	82 33       	cpi	r24, 0x32	; 50
    32aa:	09 f4       	brne	.+2      	; 0x32ae <__vector_25+0x26>
    32ac:	56 c0       	rjmp	.+172    	; 0x335a <__vector_25+0xd2>
    32ae:	83 33       	cpi	r24, 0x33	; 51
    32b0:	58 f5       	brcc	.+86     	; 0x3308 <__vector_25+0x80>
    32b2:	80 33       	cpi	r24, 0x30	; 48
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <__vector_25+0x30>
    32b6:	79 c0       	rjmp	.+242    	; 0x33aa <__vector_25+0x122>
    32b8:	81 33       	cpi	r24, 0x31	; 49
    32ba:	29 f4       	brne	.+10     	; 0x32c6 <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    32c2:	10 92 10 02 	sts	0x0210, r1

	}



}
    32c6:	bf 91       	pop	r27
    32c8:	af 91       	pop	r26
    32ca:	9f 91       	pop	r25
    32cc:	8f 91       	pop	r24
    32ce:	2f 91       	pop	r18
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	0f 90       	pop	r0
    32d6:	1f 90       	pop	r1
    32d8:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    32da:	90 91 0f 02 	lds	r25, 0x020F
    32de:	92 30       	cpi	r25, 0x02	; 2
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <__vector_25+0x5c>
    32e2:	41 c0       	rjmp	.+130    	; 0x3366 <__vector_25+0xde>
    32e4:	93 30       	cpi	r25, 0x03	; 3
    32e6:	08 f1       	brcs	.+66     	; 0x332a <__vector_25+0xa2>
    32e8:	94 30       	cpi	r25, 0x04	; 4
    32ea:	09 f4       	brne	.+2      	; 0x32ee <__vector_25+0x66>
    32ec:	89 c0       	rjmp	.+274    	; 0x3400 <__vector_25+0x178>
    32ee:	94 30       	cpi	r25, 0x04	; 4
    32f0:	08 f4       	brcc	.+2      	; 0x32f4 <__vector_25+0x6c>
    32f2:	6c c0       	rjmp	.+216    	; 0x33cc <__vector_25+0x144>
    32f4:	95 30       	cpi	r25, 0x05	; 5
    32f6:	39 f7       	brne	.-50     	; 0x32c6 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    32f8:	83 37       	cpi	r24, 0x73	; 115
    32fa:	29 f7       	brne	.-54     	; 0x32c6 <__vector_25+0x3e>
					sendAdcValues = 0;
    32fc:	10 92 bf 03 	sts	0x03BF, r1
					choosePeripheral = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	80 93 10 02 	sts	0x0210, r24
    3306:	df cf       	rjmp	.-66     	; 0x32c6 <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    3308:	84 33       	cpi	r24, 0x34	; 52
    330a:	09 f4       	brne	.+2      	; 0x330e <__vector_25+0x86>
    330c:	59 c0       	rjmp	.+178    	; 0x33c0 <__vector_25+0x138>
    330e:	84 33       	cpi	r24, 0x34	; 52
    3310:	08 f4       	brcc	.+2      	; 0x3314 <__vector_25+0x8c>
    3312:	50 c0       	rjmp	.+160    	; 0x33b4 <__vector_25+0x12c>
    3314:	85 33       	cpi	r24, 0x35	; 53
    3316:	b9 f6       	brne	.-82     	; 0x32c6 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    3318:	85 e0       	ldi	r24, 0x05	; 5
    331a:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    331e:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	80 93 bf 03 	sts	0x03BF, r24
				break;
    3328:	ce cf       	rjmp	.-100    	; 0x32c6 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    332a:	99 23       	and	r25, r25
    332c:	91 f5       	brne	.+100    	; 0x3392 <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    332e:	8d 32       	cpi	r24, 0x2D	; 45
    3330:	09 f4       	brne	.+2      	; 0x3334 <__vector_25+0xac>
    3332:	05 c1       	rjmp	.+522    	; 0x353e <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    3334:	8b 32       	cpi	r24, 0x2B	; 43
    3336:	21 f7       	brne	.-56     	; 0x3300 <__vector_25+0x78>
					current_pwm = pwm_red-10;
    3338:	80 91 0c 02 	lds	r24, 0x020C
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3340:	97 fd       	sbrc	r25, 7
    3342:	9c c1       	rjmp	.+824    	; 0x367c <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    3344:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    3348:	88 23       	and	r24, r24
    334a:	09 f4       	brne	.+2      	; 0x334e <__vector_25+0xc6>
    334c:	99 c1       	rjmp	.+818    	; 0x3680 <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	90 93 89 00 	sts	0x0089, r25
    3354:	80 93 88 00 	sts	0x0088, r24
    3358:	b6 cf       	rjmp	.-148    	; 0x32c6 <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    335a:	82 e0       	ldi	r24, 0x02	; 2
    335c:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    3360:	10 92 10 02 	sts	0x0210, r1
				break;
    3364:	b0 cf       	rjmp	.-160    	; 0x32c6 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    3366:	8d 32       	cpi	r24, 0x2D	; 45
    3368:	09 f4       	brne	.+2      	; 0x336c <__vector_25+0xe4>
    336a:	2f c1       	rjmp	.+606    	; 0x35ca <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    336c:	8b 32       	cpi	r24, 0x2B	; 43
    336e:	41 f6       	brne	.-112    	; 0x3300 <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    3370:	80 91 0e 02 	lds	r24, 0x020E
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3378:	97 fd       	sbrc	r25, 7
    337a:	92 c1       	rjmp	.+804    	; 0x36a0 <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    337c:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    3380:	88 23       	and	r24, r24
    3382:	09 f4       	brne	.+2      	; 0x3386 <__vector_25+0xfe>
    3384:	8f c1       	rjmp	.+798    	; 0x36a4 <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	90 93 8d 00 	sts	0x008D, r25
    338c:	80 93 8c 00 	sts	0x008C, r24
    3390:	9a cf       	rjmp	.-204    	; 0x32c6 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3392:	91 30       	cpi	r25, 0x01	; 1
    3394:	09 f0       	breq	.+2      	; 0x3398 <__vector_25+0x110>
    3396:	97 cf       	rjmp	.-210    	; 0x32c6 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    3398:	8d 32       	cpi	r24, 0x2D	; 45
    339a:	09 f4       	brne	.+2      	; 0x339e <__vector_25+0x116>
    339c:	b9 c0       	rjmp	.+370    	; 0x3510 <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    339e:	8b 32       	cpi	r24, 0x2B	; 43
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <__vector_25+0x11c>
    33a2:	47 c0       	rjmp	.+142    	; 0x3432 <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    33a4:	90 93 10 02 	sts	0x0210, r25
    33a8:	8e cf       	rjmp	.-228    	; 0x32c6 <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    33aa:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    33ae:	10 92 10 02 	sts	0x0210, r1
				break;
    33b2:	89 cf       	rjmp	.-238    	; 0x32c6 <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    33b4:	83 e0       	ldi	r24, 0x03	; 3
    33b6:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    33ba:	10 92 10 02 	sts	0x0210, r1
				break;
    33be:	83 cf       	rjmp	.-250    	; 0x32c6 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    33c0:	84 e0       	ldi	r24, 0x04	; 4
    33c2:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    33c6:	10 92 10 02 	sts	0x0210, r1
				break;
    33ca:	7d cf       	rjmp	.-262    	; 0x32c6 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    33cc:	8b 32       	cpi	r24, 0x2B	; 43
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <__vector_25+0x14a>
    33d0:	13 c1       	rjmp	.+550    	; 0x35f8 <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    33d2:	8d 32       	cpi	r24, 0x2D	; 45
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <__vector_25+0x150>
    33d6:	6d c0       	rjmp	.+218    	; 0x34b2 <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    33d8:	83 37       	cpi	r24, 0x73	; 115
    33da:	09 f0       	breq	.+2      	; 0x33de <__vector_25+0x156>
    33dc:	91 cf       	rjmp	.-222    	; 0x3300 <__vector_25+0x78>
					pwm_right = 0;
    33de:	10 92 7e 03 	sts	0x037E, r1
    33e2:	10 92 7f 03 	sts	0x037F, r1
    33e6:	10 92 80 03 	sts	0x0380, r1
    33ea:	10 92 81 03 	sts	0x0381, r1
					OCR3A = 0;
    33ee:	10 92 99 00 	sts	0x0099, r1
    33f2:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    33f6:	10 92 9b 00 	sts	0x009B, r1
    33fa:	10 92 9a 00 	sts	0x009A, r1
    33fe:	63 cf       	rjmp	.-314    	; 0x32c6 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    3400:	8b 32       	cpi	r24, 0x2B	; 43
    3402:	09 f4       	brne	.+2      	; 0x3406 <__vector_25+0x17e>
    3404:	b3 c0       	rjmp	.+358    	; 0x356c <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    3406:	8d 32       	cpi	r24, 0x2D	; 45
    3408:	29 f1       	breq	.+74     	; 0x3454 <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    340a:	83 37       	cpi	r24, 0x73	; 115
    340c:	09 f0       	breq	.+2      	; 0x3410 <__vector_25+0x188>
    340e:	78 cf       	rjmp	.-272    	; 0x3300 <__vector_25+0x78>
					pwm_left = 0;
    3410:	10 92 82 03 	sts	0x0382, r1
    3414:	10 92 83 03 	sts	0x0383, r1
    3418:	10 92 84 03 	sts	0x0384, r1
    341c:	10 92 85 03 	sts	0x0385, r1
					OCR4A = 0;
    3420:	10 92 a9 00 	sts	0x00A9, r1
    3424:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    3428:	10 92 ab 00 	sts	0x00AB, r1
    342c:	10 92 aa 00 	sts	0x00AA, r1
    3430:	4a cf       	rjmp	.-364    	; 0x32c6 <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    3432:	80 91 0d 02 	lds	r24, 0x020D
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    343a:	97 fd       	sbrc	r25, 7
    343c:	28 c1       	rjmp	.+592    	; 0x368e <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    343e:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    3442:	88 23       	and	r24, r24
    3444:	09 f4       	brne	.+2      	; 0x3448 <__vector_25+0x1c0>
    3446:	25 c1       	rjmp	.+586    	; 0x3692 <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	90 93 8b 00 	sts	0x008B, r25
    344e:	80 93 8a 00 	sts	0x008A, r24
    3452:	39 cf       	rjmp	.-398    	; 0x32c6 <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    3454:	80 91 82 03 	lds	r24, 0x0382
    3458:	90 91 83 03 	lds	r25, 0x0383
    345c:	a0 91 84 03 	lds	r26, 0x0384
    3460:	b0 91 85 03 	lds	r27, 0x0385
    3464:	4e 97       	sbiw	r24, 0x1e	; 30
    3466:	a1 09       	sbc	r26, r1
    3468:	b1 09       	sbc	r27, r1
    346a:	80 93 82 03 	sts	0x0382, r24
    346e:	90 93 83 03 	sts	0x0383, r25
    3472:	a0 93 84 03 	sts	0x0384, r26
    3476:	b0 93 85 03 	sts	0x0385, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    347a:	8a 39       	cpi	r24, 0x9A	; 154
    347c:	2d ef       	ldi	r18, 0xFD	; 253
    347e:	92 07       	cpc	r25, r18
    3480:	2f ef       	ldi	r18, 0xFF	; 255
    3482:	a2 07       	cpc	r26, r18
    3484:	2f ef       	ldi	r18, 0xFF	; 255
    3486:	b2 07       	cpc	r27, r18
    3488:	0c f0       	brlt	.+2      	; 0x348c <__vector_25+0x204>
    348a:	13 c1       	rjmp	.+550    	; 0x36b2 <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    348c:	8a e9       	ldi	r24, 0x9A	; 154
    348e:	9d ef       	ldi	r25, 0xFD	; 253
    3490:	af ef       	ldi	r26, 0xFF	; 255
    3492:	bf ef       	ldi	r27, 0xFF	; 255
    3494:	80 93 82 03 	sts	0x0382, r24
    3498:	90 93 83 03 	sts	0x0383, r25
    349c:	a0 93 84 03 	sts	0x0384, r26
    34a0:	b0 93 85 03 	sts	0x0385, r27
    34a4:	86 e6       	ldi	r24, 0x66	; 102
    34a6:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    34a8:	90 93 ab 00 	sts	0x00AB, r25
    34ac:	80 93 aa 00 	sts	0x00AA, r24
    34b0:	0a cf       	rjmp	.-492    	; 0x32c6 <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    34b2:	80 91 7e 03 	lds	r24, 0x037E
    34b6:	90 91 7f 03 	lds	r25, 0x037F
    34ba:	a0 91 80 03 	lds	r26, 0x0380
    34be:	b0 91 81 03 	lds	r27, 0x0381
    34c2:	4e 97       	sbiw	r24, 0x1e	; 30
    34c4:	a1 09       	sbc	r26, r1
    34c6:	b1 09       	sbc	r27, r1
    34c8:	80 93 7e 03 	sts	0x037E, r24
    34cc:	90 93 7f 03 	sts	0x037F, r25
    34d0:	a0 93 80 03 	sts	0x0380, r26
    34d4:	b0 93 81 03 	sts	0x0381, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    34d8:	8a 39       	cpi	r24, 0x9A	; 154
    34da:	2d ef       	ldi	r18, 0xFD	; 253
    34dc:	92 07       	cpc	r25, r18
    34de:	2f ef       	ldi	r18, 0xFF	; 255
    34e0:	a2 07       	cpc	r26, r18
    34e2:	2f ef       	ldi	r18, 0xFF	; 255
    34e4:	b2 07       	cpc	r27, r18
    34e6:	0c f0       	brlt	.+2      	; 0x34ea <__vector_25+0x262>
    34e8:	ea c0       	rjmp	.+468    	; 0x36be <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    34ea:	8a e9       	ldi	r24, 0x9A	; 154
    34ec:	9d ef       	ldi	r25, 0xFD	; 253
    34ee:	af ef       	ldi	r26, 0xFF	; 255
    34f0:	bf ef       	ldi	r27, 0xFF	; 255
    34f2:	80 93 7e 03 	sts	0x037E, r24
    34f6:	90 93 7f 03 	sts	0x037F, r25
    34fa:	a0 93 80 03 	sts	0x0380, r26
    34fe:	b0 93 81 03 	sts	0x0381, r27
    3502:	86 e6       	ldi	r24, 0x66	; 102
    3504:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    3506:	90 93 9b 00 	sts	0x009B, r25
    350a:	80 93 9a 00 	sts	0x009A, r24
    350e:	db ce       	rjmp	.-586    	; 0x32c6 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    3510:	80 91 80 00 	lds	r24, 0x0080
    3514:	80 62       	ori	r24, 0x20	; 32
    3516:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    351a:	80 91 0d 02 	lds	r24, 0x020D
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    3522:	8f 3f       	cpi	r24, 0xFF	; 255
    3524:	91 05       	cpc	r25, r1
    3526:	19 f0       	breq	.+6      	; 0x352e <__vector_25+0x2a6>
    3528:	14 f0       	brlt	.+4      	; 0x352e <__vector_25+0x2a6>
    352a:	8f ef       	ldi	r24, 0xFF	; 255
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	90 93 8b 00 	sts	0x008B, r25
    3538:	80 93 8a 00 	sts	0x008A, r24
    353c:	c4 ce       	rjmp	.-632    	; 0x32c6 <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    353e:	80 91 80 00 	lds	r24, 0x0080
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    3548:	80 91 0c 02 	lds	r24, 0x020C
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    3550:	8f 3f       	cpi	r24, 0xFF	; 255
    3552:	91 05       	cpc	r25, r1
    3554:	19 f0       	breq	.+6      	; 0x355c <__vector_25+0x2d4>
    3556:	14 f0       	brlt	.+4      	; 0x355c <__vector_25+0x2d4>
    3558:	8f ef       	ldi	r24, 0xFF	; 255
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	90 93 89 00 	sts	0x0089, r25
    3566:	80 93 88 00 	sts	0x0088, r24
    356a:	ad ce       	rjmp	.-678    	; 0x32c6 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    356c:	80 91 82 03 	lds	r24, 0x0382
    3570:	90 91 83 03 	lds	r25, 0x0383
    3574:	a0 91 84 03 	lds	r26, 0x0384
    3578:	b0 91 85 03 	lds	r27, 0x0385
    357c:	4e 96       	adiw	r24, 0x1e	; 30
    357e:	a1 1d       	adc	r26, r1
    3580:	b1 1d       	adc	r27, r1
    3582:	80 93 82 03 	sts	0x0382, r24
    3586:	90 93 83 03 	sts	0x0383, r25
    358a:	a0 93 84 03 	sts	0x0384, r26
    358e:	b0 93 85 03 	sts	0x0385, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    3592:	87 36       	cpi	r24, 0x67	; 103
    3594:	22 e0       	ldi	r18, 0x02	; 2
    3596:	92 07       	cpc	r25, r18
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	a2 07       	cpc	r26, r18
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	b2 07       	cpc	r27, r18
    35a0:	0c f4       	brge	.+2      	; 0x35a4 <__vector_25+0x31c>
    35a2:	58 c0       	rjmp	.+176    	; 0x3654 <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    35a4:	86 e6       	ldi	r24, 0x66	; 102
    35a6:	92 e0       	ldi	r25, 0x02	; 2
    35a8:	a0 e0       	ldi	r26, 0x00	; 0
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	80 93 82 03 	sts	0x0382, r24
    35b0:	90 93 83 03 	sts	0x0383, r25
    35b4:	a0 93 84 03 	sts	0x0384, r26
    35b8:	b0 93 85 03 	sts	0x0385, r27
    35bc:	86 e6       	ldi	r24, 0x66	; 102
    35be:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    35c0:	90 93 a9 00 	sts	0x00A9, r25
    35c4:	80 93 a8 00 	sts	0x00A8, r24
    35c8:	7e ce       	rjmp	.-772    	; 0x32c6 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    35ca:	80 91 80 00 	lds	r24, 0x0080
    35ce:	88 60       	ori	r24, 0x08	; 8
    35d0:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    35d4:	80 91 0e 02 	lds	r24, 0x020E
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    35dc:	8f 3f       	cpi	r24, 0xFF	; 255
    35de:	91 05       	cpc	r25, r1
    35e0:	19 f0       	breq	.+6      	; 0x35e8 <__vector_25+0x360>
    35e2:	14 f0       	brlt	.+4      	; 0x35e8 <__vector_25+0x360>
    35e4:	8f ef       	ldi	r24, 0xFF	; 255
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	90 93 8d 00 	sts	0x008D, r25
    35f2:	80 93 8c 00 	sts	0x008C, r24
    35f6:	67 ce       	rjmp	.-818    	; 0x32c6 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    35f8:	80 91 7e 03 	lds	r24, 0x037E
    35fc:	90 91 7f 03 	lds	r25, 0x037F
    3600:	a0 91 80 03 	lds	r26, 0x0380
    3604:	b0 91 81 03 	lds	r27, 0x0381
    3608:	4e 96       	adiw	r24, 0x1e	; 30
    360a:	a1 1d       	adc	r26, r1
    360c:	b1 1d       	adc	r27, r1
    360e:	80 93 7e 03 	sts	0x037E, r24
    3612:	90 93 7f 03 	sts	0x037F, r25
    3616:	a0 93 80 03 	sts	0x0380, r26
    361a:	b0 93 81 03 	sts	0x0381, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    361e:	87 36       	cpi	r24, 0x67	; 103
    3620:	22 e0       	ldi	r18, 0x02	; 2
    3622:	92 07       	cpc	r25, r18
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	a2 07       	cpc	r26, r18
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	b2 07       	cpc	r27, r18
    362c:	ec f0       	brlt	.+58     	; 0x3668 <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    362e:	86 e6       	ldi	r24, 0x66	; 102
    3630:	92 e0       	ldi	r25, 0x02	; 2
    3632:	a0 e0       	ldi	r26, 0x00	; 0
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	80 93 7e 03 	sts	0x037E, r24
    363a:	90 93 7f 03 	sts	0x037F, r25
    363e:	a0 93 80 03 	sts	0x0380, r26
    3642:	b0 93 81 03 	sts	0x0381, r27
    3646:	86 e6       	ldi	r24, 0x66	; 102
    3648:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    364a:	90 93 99 00 	sts	0x0099, r25
    364e:	80 93 98 00 	sts	0x0098, r24
    3652:	39 ce       	rjmp	.-910    	; 0x32c6 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    3654:	b7 ff       	sbrs	r27, 7
    3656:	b4 cf       	rjmp	.-152    	; 0x35c0 <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3658:	90 95       	com	r25
    365a:	81 95       	neg	r24
    365c:	9f 4f       	sbci	r25, 0xFF	; 255
    365e:	90 93 ab 00 	sts	0x00AB, r25
    3662:	80 93 aa 00 	sts	0x00AA, r24
    3666:	2f ce       	rjmp	.-930    	; 0x32c6 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3668:	b7 ff       	sbrs	r27, 7
    366a:	ef cf       	rjmp	.-34     	; 0x364a <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    366c:	90 95       	com	r25
    366e:	81 95       	neg	r24
    3670:	9f 4f       	sbci	r25, 0xFF	; 255
    3672:	90 93 9b 00 	sts	0x009B, r25
    3676:	80 93 9a 00 	sts	0x009A, r24
    367a:	25 ce       	rjmp	.-950    	; 0x32c6 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    367c:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    3680:	80 91 80 00 	lds	r24, 0x0080
    3684:	8f 77       	andi	r24, 0x7F	; 127
    3686:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    368a:	2d 98       	cbi	0x05, 5	; 5
    368c:	1c ce       	rjmp	.-968    	; 0x32c6 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    368e:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    3692:	80 91 80 00 	lds	r24, 0x0080
    3696:	8f 7d       	andi	r24, 0xDF	; 223
    3698:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    369c:	2e 98       	cbi	0x05, 6	; 5
    369e:	13 ce       	rjmp	.-986    	; 0x32c6 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    36a0:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    36a4:	80 91 80 00 	lds	r24, 0x0080
    36a8:	87 7f       	andi	r24, 0xF7	; 247
    36aa:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    36ae:	2f 98       	cbi	0x05, 7	; 5
    36b0:	0a ce       	rjmp	.-1004   	; 0x32c6 <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    36b2:	b7 ff       	sbrs	r27, 7
    36b4:	85 cf       	rjmp	.-246    	; 0x35c0 <__vector_25+0x338>
						OCR4A = pwm_left;
    36b6:	90 95       	com	r25
    36b8:	81 95       	neg	r24
    36ba:	9f 4f       	sbci	r25, 0xFF	; 255
    36bc:	f5 ce       	rjmp	.-534    	; 0x34a8 <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    36be:	b7 ff       	sbrs	r27, 7
    36c0:	c4 cf       	rjmp	.-120    	; 0x364a <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    36c2:	90 95       	com	r25
    36c4:	81 95       	neg	r24
    36c6:	9f 4f       	sbci	r25, 0xFF	; 255
    36c8:	1e cf       	rjmp	.-452    	; 0x3506 <__vector_25+0x27e>

000036ca <_fpadd_parts>:
    36ca:	a0 e0       	ldi	r26, 0x00	; 0
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	eb e6       	ldi	r30, 0x6B	; 107
    36d0:	fb e1       	ldi	r31, 0x1B	; 27
    36d2:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x4>
    36d6:	2c 01       	movw	r4, r24
    36d8:	5b 01       	movw	r10, r22
    36da:	fa 01       	movw	r30, r20
    36dc:	dc 01       	movw	r26, r24
    36de:	9c 91       	ld	r25, X
    36e0:	92 30       	cpi	r25, 0x02	; 2
    36e2:	08 f4       	brcc	.+2      	; 0x36e6 <_fpadd_parts+0x1c>
    36e4:	32 c1       	rjmp	.+612    	; 0x394a <_fpadd_parts+0x280>
    36e6:	eb 01       	movw	r28, r22
    36e8:	88 81       	ld	r24, Y
    36ea:	82 30       	cpi	r24, 0x02	; 2
    36ec:	08 f4       	brcc	.+2      	; 0x36f0 <_fpadd_parts+0x26>
    36ee:	2c c1       	rjmp	.+600    	; 0x3948 <_fpadd_parts+0x27e>
    36f0:	94 30       	cpi	r25, 0x04	; 4
    36f2:	71 f4       	brne	.+28     	; 0x3710 <_fpadd_parts+0x46>
    36f4:	84 30       	cpi	r24, 0x04	; 4
    36f6:	09 f0       	breq	.+2      	; 0x36fa <_fpadd_parts+0x30>
    36f8:	28 c1       	rjmp	.+592    	; 0x394a <_fpadd_parts+0x280>
    36fa:	f2 01       	movw	r30, r4
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	98 17       	cp	r25, r24
    3702:	09 f4       	brne	.+2      	; 0x3706 <_fpadd_parts+0x3c>
    3704:	22 c1       	rjmp	.+580    	; 0x394a <_fpadd_parts+0x280>
    3706:	16 e1       	ldi	r17, 0x16	; 22
    3708:	41 2e       	mov	r4, r17
    370a:	12 e0       	ldi	r17, 0x02	; 2
    370c:	51 2e       	mov	r5, r17
    370e:	1d c1       	rjmp	.+570    	; 0x394a <_fpadd_parts+0x280>
    3710:	84 30       	cpi	r24, 0x04	; 4
    3712:	09 f4       	brne	.+2      	; 0x3716 <_fpadd_parts+0x4c>
    3714:	19 c1       	rjmp	.+562    	; 0x3948 <_fpadd_parts+0x27e>
    3716:	82 30       	cpi	r24, 0x02	; 2
    3718:	a9 f4       	brne	.+42     	; 0x3744 <_fpadd_parts+0x7a>
    371a:	92 30       	cpi	r25, 0x02	; 2
    371c:	09 f0       	breq	.+2      	; 0x3720 <_fpadd_parts+0x56>
    371e:	15 c1       	rjmp	.+554    	; 0x394a <_fpadd_parts+0x280>
    3720:	ca 01       	movw	r24, r20
    3722:	a2 01       	movw	r20, r4
    3724:	28 e0       	ldi	r18, 0x08	; 8
    3726:	da 01       	movw	r26, r20
    3728:	0d 90       	ld	r0, X+
    372a:	ad 01       	movw	r20, r26
    372c:	ec 01       	movw	r28, r24
    372e:	09 92       	st	Y+, r0
    3730:	ce 01       	movw	r24, r28
    3732:	21 50       	subi	r18, 0x01	; 1
    3734:	c1 f7       	brne	.-16     	; 0x3726 <_fpadd_parts+0x5c>
    3736:	e5 01       	movw	r28, r10
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	e2 01       	movw	r28, r4
    373c:	99 81       	ldd	r25, Y+1	; 0x01
    373e:	89 23       	and	r24, r25
    3740:	81 83       	std	Z+1, r24	; 0x01
    3742:	00 c1       	rjmp	.+512    	; 0x3944 <_fpadd_parts+0x27a>
    3744:	92 30       	cpi	r25, 0x02	; 2
    3746:	09 f4       	brne	.+2      	; 0x374a <_fpadd_parts+0x80>
    3748:	ff c0       	rjmp	.+510    	; 0x3948 <_fpadd_parts+0x27e>
    374a:	e2 01       	movw	r28, r4
    374c:	ca 80       	ldd	r12, Y+2	; 0x02
    374e:	db 80       	ldd	r13, Y+3	; 0x03
    3750:	eb 01       	movw	r28, r22
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	9b 81       	ldd	r25, Y+3	; 0x03
    3756:	e2 01       	movw	r28, r4
    3758:	2c 81       	ldd	r18, Y+4	; 0x04
    375a:	3d 81       	ldd	r19, Y+5	; 0x05
    375c:	4e 81       	ldd	r20, Y+6	; 0x06
    375e:	5f 81       	ldd	r21, Y+7	; 0x07
    3760:	eb 01       	movw	r28, r22
    3762:	ec 80       	ldd	r14, Y+4	; 0x04
    3764:	fd 80       	ldd	r15, Y+5	; 0x05
    3766:	0e 81       	ldd	r16, Y+6	; 0x06
    3768:	1f 81       	ldd	r17, Y+7	; 0x07
    376a:	b6 01       	movw	r22, r12
    376c:	68 1b       	sub	r22, r24
    376e:	79 0b       	sbc	r23, r25
    3770:	db 01       	movw	r26, r22
    3772:	77 ff       	sbrs	r23, 7
    3774:	03 c0       	rjmp	.+6      	; 0x377c <_fpadd_parts+0xb2>
    3776:	70 95       	com	r23
    3778:	61 95       	neg	r22
    377a:	7f 4f       	sbci	r23, 0xFF	; 255
    377c:	60 32       	cpi	r22, 0x20	; 32
    377e:	71 05       	cpc	r23, r1
    3780:	0c f0       	brlt	.+2      	; 0x3784 <_fpadd_parts+0xba>
    3782:	5d c0       	rjmp	.+186    	; 0x383e <_fpadd_parts+0x174>
    3784:	1a 16       	cp	r1, r26
    3786:	1b 06       	cpc	r1, r27
    3788:	5c f5       	brge	.+86     	; 0x37e0 <_fpadd_parts+0x116>
    378a:	66 24       	eor	r6, r6
    378c:	77 24       	eor	r7, r7
    378e:	43 01       	movw	r8, r6
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	a0 e0       	ldi	r26, 0x00	; 0
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	06 2e       	mov	r0, r22
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <_fpadd_parts+0xda>
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	aa 1f       	adc	r26, r26
    37a2:	bb 1f       	adc	r27, r27
    37a4:	0a 94       	dec	r0
    37a6:	d2 f7       	brpl	.-12     	; 0x379c <_fpadd_parts+0xd2>
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	a1 09       	sbc	r26, r1
    37ac:	b1 09       	sbc	r27, r1
    37ae:	8e 21       	and	r24, r14
    37b0:	9f 21       	and	r25, r15
    37b2:	a0 23       	and	r26, r16
    37b4:	b1 23       	and	r27, r17
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	a1 05       	cpc	r26, r1
    37ba:	b1 05       	cpc	r27, r1
    37bc:	29 f0       	breq	.+10     	; 0x37c8 <_fpadd_parts+0xfe>
    37be:	b1 e0       	ldi	r27, 0x01	; 1
    37c0:	6b 2e       	mov	r6, r27
    37c2:	71 2c       	mov	r7, r1
    37c4:	81 2c       	mov	r8, r1
    37c6:	91 2c       	mov	r9, r1
    37c8:	04 c0       	rjmp	.+8      	; 0x37d2 <_fpadd_parts+0x108>
    37ca:	16 95       	lsr	r17
    37cc:	07 95       	ror	r16
    37ce:	f7 94       	ror	r15
    37d0:	e7 94       	ror	r14
    37d2:	6a 95       	dec	r22
    37d4:	d2 f7       	brpl	.-12     	; 0x37ca <_fpadd_parts+0x100>
    37d6:	e6 28       	or	r14, r6
    37d8:	f7 28       	or	r15, r7
    37da:	08 29       	or	r16, r8
    37dc:	19 29       	or	r17, r9
    37de:	3b c0       	rjmp	.+118    	; 0x3856 <_fpadd_parts+0x18c>
    37e0:	ab 2b       	or	r26, r27
    37e2:	c9 f1       	breq	.+114    	; 0x3856 <_fpadd_parts+0x18c>
    37e4:	c6 0e       	add	r12, r22
    37e6:	d7 1e       	adc	r13, r23
    37e8:	66 24       	eor	r6, r6
    37ea:	77 24       	eor	r7, r7
    37ec:	43 01       	movw	r8, r6
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	a0 e0       	ldi	r26, 0x00	; 0
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	06 2e       	mov	r0, r22
    37f8:	04 c0       	rjmp	.+8      	; 0x3802 <_fpadd_parts+0x138>
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	aa 1f       	adc	r26, r26
    3800:	bb 1f       	adc	r27, r27
    3802:	0a 94       	dec	r0
    3804:	d2 f7       	brpl	.-12     	; 0x37fa <_fpadd_parts+0x130>
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	a1 09       	sbc	r26, r1
    380a:	b1 09       	sbc	r27, r1
    380c:	82 23       	and	r24, r18
    380e:	93 23       	and	r25, r19
    3810:	a4 23       	and	r26, r20
    3812:	b5 23       	and	r27, r21
    3814:	00 97       	sbiw	r24, 0x00	; 0
    3816:	a1 05       	cpc	r26, r1
    3818:	b1 05       	cpc	r27, r1
    381a:	29 f0       	breq	.+10     	; 0x3826 <_fpadd_parts+0x15c>
    381c:	a1 e0       	ldi	r26, 0x01	; 1
    381e:	6a 2e       	mov	r6, r26
    3820:	71 2c       	mov	r7, r1
    3822:	81 2c       	mov	r8, r1
    3824:	91 2c       	mov	r9, r1
    3826:	04 c0       	rjmp	.+8      	; 0x3830 <_fpadd_parts+0x166>
    3828:	56 95       	lsr	r21
    382a:	47 95       	ror	r20
    382c:	37 95       	ror	r19
    382e:	27 95       	ror	r18
    3830:	6a 95       	dec	r22
    3832:	d2 f7       	brpl	.-12     	; 0x3828 <_fpadd_parts+0x15e>
    3834:	26 29       	or	r18, r6
    3836:	37 29       	or	r19, r7
    3838:	48 29       	or	r20, r8
    383a:	59 29       	or	r21, r9
    383c:	0c c0       	rjmp	.+24     	; 0x3856 <_fpadd_parts+0x18c>
    383e:	8c 15       	cp	r24, r12
    3840:	9d 05       	cpc	r25, r13
    3842:	34 f0       	brlt	.+12     	; 0x3850 <_fpadd_parts+0x186>
    3844:	6c 01       	movw	r12, r24
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	03 c0       	rjmp	.+6      	; 0x3856 <_fpadd_parts+0x18c>
    3850:	ee 24       	eor	r14, r14
    3852:	ff 24       	eor	r15, r15
    3854:	87 01       	movw	r16, r14
    3856:	e2 01       	movw	r28, r4
    3858:	99 81       	ldd	r25, Y+1	; 0x01
    385a:	e5 01       	movw	r28, r10
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	98 17       	cp	r25, r24
    3860:	09 f4       	brne	.+2      	; 0x3864 <_fpadd_parts+0x19a>
    3862:	43 c0       	rjmp	.+134    	; 0x38ea <_fpadd_parts+0x220>
    3864:	99 23       	and	r25, r25
    3866:	39 f0       	breq	.+14     	; 0x3876 <_fpadd_parts+0x1ac>
    3868:	e2 1a       	sub	r14, r18
    386a:	f3 0a       	sbc	r15, r19
    386c:	04 0b       	sbc	r16, r20
    386e:	15 0b       	sbc	r17, r21
    3870:	a8 01       	movw	r20, r16
    3872:	97 01       	movw	r18, r14
    3874:	04 c0       	rjmp	.+8      	; 0x387e <_fpadd_parts+0x1b4>
    3876:	2e 19       	sub	r18, r14
    3878:	3f 09       	sbc	r19, r15
    387a:	40 0b       	sbc	r20, r16
    387c:	51 0b       	sbc	r21, r17
    387e:	57 fd       	sbrc	r21, 7
    3880:	08 c0       	rjmp	.+16     	; 0x3892 <_fpadd_parts+0x1c8>
    3882:	11 82       	std	Z+1, r1	; 0x01
    3884:	d3 82       	std	Z+3, r13	; 0x03
    3886:	c2 82       	std	Z+2, r12	; 0x02
    3888:	24 83       	std	Z+4, r18	; 0x04
    388a:	35 83       	std	Z+5, r19	; 0x05
    388c:	46 83       	std	Z+6, r20	; 0x06
    388e:	57 83       	std	Z+7, r21	; 0x07
    3890:	1d c0       	rjmp	.+58     	; 0x38cc <_fpadd_parts+0x202>
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	81 83       	std	Z+1, r24	; 0x01
    3896:	d3 82       	std	Z+3, r13	; 0x03
    3898:	c2 82       	std	Z+2, r12	; 0x02
    389a:	88 27       	eor	r24, r24
    389c:	99 27       	eor	r25, r25
    389e:	dc 01       	movw	r26, r24
    38a0:	82 1b       	sub	r24, r18
    38a2:	93 0b       	sbc	r25, r19
    38a4:	a4 0b       	sbc	r26, r20
    38a6:	b5 0b       	sbc	r27, r21
    38a8:	84 83       	std	Z+4, r24	; 0x04
    38aa:	95 83       	std	Z+5, r25	; 0x05
    38ac:	a6 83       	std	Z+6, r26	; 0x06
    38ae:	b7 83       	std	Z+7, r27	; 0x07
    38b0:	0d c0       	rjmp	.+26     	; 0x38cc <_fpadd_parts+0x202>
    38b2:	22 0f       	add	r18, r18
    38b4:	33 1f       	adc	r19, r19
    38b6:	44 1f       	adc	r20, r20
    38b8:	55 1f       	adc	r21, r21
    38ba:	24 83       	std	Z+4, r18	; 0x04
    38bc:	35 83       	std	Z+5, r19	; 0x05
    38be:	46 83       	std	Z+6, r20	; 0x06
    38c0:	57 83       	std	Z+7, r21	; 0x07
    38c2:	82 81       	ldd	r24, Z+2	; 0x02
    38c4:	93 81       	ldd	r25, Z+3	; 0x03
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	93 83       	std	Z+3, r25	; 0x03
    38ca:	82 83       	std	Z+2, r24	; 0x02
    38cc:	24 81       	ldd	r18, Z+4	; 0x04
    38ce:	35 81       	ldd	r19, Z+5	; 0x05
    38d0:	46 81       	ldd	r20, Z+6	; 0x06
    38d2:	57 81       	ldd	r21, Z+7	; 0x07
    38d4:	da 01       	movw	r26, r20
    38d6:	c9 01       	movw	r24, r18
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	a1 09       	sbc	r26, r1
    38dc:	b1 09       	sbc	r27, r1
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	af 4f       	sbci	r26, 0xFF	; 255
    38e4:	bf 43       	sbci	r27, 0x3F	; 63
    38e6:	28 f3       	brcs	.-54     	; 0x38b2 <_fpadd_parts+0x1e8>
    38e8:	0b c0       	rjmp	.+22     	; 0x3900 <_fpadd_parts+0x236>
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	d3 82       	std	Z+3, r13	; 0x03
    38ee:	c2 82       	std	Z+2, r12	; 0x02
    38f0:	2e 0d       	add	r18, r14
    38f2:	3f 1d       	adc	r19, r15
    38f4:	40 1f       	adc	r20, r16
    38f6:	51 1f       	adc	r21, r17
    38f8:	24 83       	std	Z+4, r18	; 0x04
    38fa:	35 83       	std	Z+5, r19	; 0x05
    38fc:	46 83       	std	Z+6, r20	; 0x06
    38fe:	57 83       	std	Z+7, r21	; 0x07
    3900:	83 e0       	ldi	r24, 0x03	; 3
    3902:	80 83       	st	Z, r24
    3904:	24 81       	ldd	r18, Z+4	; 0x04
    3906:	35 81       	ldd	r19, Z+5	; 0x05
    3908:	46 81       	ldd	r20, Z+6	; 0x06
    390a:	57 81       	ldd	r21, Z+7	; 0x07
    390c:	55 23       	and	r21, r21
    390e:	d4 f4       	brge	.+52     	; 0x3944 <_fpadd_parts+0x27a>
    3910:	c9 01       	movw	r24, r18
    3912:	aa 27       	eor	r26, r26
    3914:	97 fd       	sbrc	r25, 7
    3916:	a0 95       	com	r26
    3918:	ba 2f       	mov	r27, r26
    391a:	81 70       	andi	r24, 0x01	; 1
    391c:	90 70       	andi	r25, 0x00	; 0
    391e:	a0 70       	andi	r26, 0x00	; 0
    3920:	b0 70       	andi	r27, 0x00	; 0
    3922:	56 95       	lsr	r21
    3924:	47 95       	ror	r20
    3926:	37 95       	ror	r19
    3928:	27 95       	ror	r18
    392a:	82 2b       	or	r24, r18
    392c:	93 2b       	or	r25, r19
    392e:	a4 2b       	or	r26, r20
    3930:	b5 2b       	or	r27, r21
    3932:	84 83       	std	Z+4, r24	; 0x04
    3934:	95 83       	std	Z+5, r25	; 0x05
    3936:	a6 83       	std	Z+6, r26	; 0x06
    3938:	b7 83       	std	Z+7, r27	; 0x07
    393a:	82 81       	ldd	r24, Z+2	; 0x02
    393c:	93 81       	ldd	r25, Z+3	; 0x03
    393e:	01 96       	adiw	r24, 0x01	; 1
    3940:	93 83       	std	Z+3, r25	; 0x03
    3942:	82 83       	std	Z+2, r24	; 0x02
    3944:	2f 01       	movw	r4, r30
    3946:	01 c0       	rjmp	.+2      	; 0x394a <_fpadd_parts+0x280>
    3948:	25 01       	movw	r4, r10
    394a:	c2 01       	movw	r24, r4
    394c:	e0 e1       	ldi	r30, 0x10	; 16
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x4>

00003956 <__subsf3>:
    3956:	a0 e2       	ldi	r26, 0x20	; 32
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e1 eb       	ldi	r30, 0xB1	; 177
    395c:	fc e1       	ldi	r31, 0x1C	; 28
    395e:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <__prologue_saves__+0x18>
    3962:	69 83       	std	Y+1, r22	; 0x01
    3964:	7a 83       	std	Y+2, r23	; 0x02
    3966:	8b 83       	std	Y+3, r24	; 0x03
    3968:	9c 83       	std	Y+4, r25	; 0x04
    396a:	2d 83       	std	Y+5, r18	; 0x05
    396c:	3e 83       	std	Y+6, r19	; 0x06
    396e:	4f 83       	std	Y+7, r20	; 0x07
    3970:	58 87       	std	Y+8, r21	; 0x08
    3972:	09 e0       	ldi	r16, 0x09	; 9
    3974:	e0 2e       	mov	r14, r16
    3976:	f1 2c       	mov	r15, r1
    3978:	ec 0e       	add	r14, r28
    397a:	fd 1e       	adc	r15, r29
    397c:	b7 01       	movw	r22, r14
    397e:	ce 01       	movw	r24, r28
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    3986:	8e 01       	movw	r16, r28
    3988:	0f 5e       	subi	r16, 0xEF	; 239
    398a:	1f 4f       	sbci	r17, 0xFF	; 255
    398c:	b8 01       	movw	r22, r16
    398e:	ce 01       	movw	r24, r28
    3990:	05 96       	adiw	r24, 0x05	; 5
    3992:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    3996:	8a 89       	ldd	r24, Y+18	; 0x12
    3998:	91 e0       	ldi	r25, 0x01	; 1
    399a:	89 27       	eor	r24, r25
    399c:	8a 8b       	std	Y+18, r24	; 0x12
    399e:	ae 01       	movw	r20, r28
    39a0:	47 5e       	subi	r20, 0xE7	; 231
    39a2:	5f 4f       	sbci	r21, 0xFF	; 255
    39a4:	b8 01       	movw	r22, r16
    39a6:	c7 01       	movw	r24, r14
    39a8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_fpadd_parts>
    39ac:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__pack_f>
    39b0:	e6 e0       	ldi	r30, 0x06	; 6
    39b2:	a0 96       	adiw	r28, 0x20	; 32
    39b4:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__epilogue_restores__+0x18>

000039b8 <__addsf3>:
    39b8:	a0 e2       	ldi	r26, 0x20	; 32
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	e2 ee       	ldi	r30, 0xE2	; 226
    39be:	fc e1       	ldi	r31, 0x1C	; 28
    39c0:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <__prologue_saves__+0x18>
    39c4:	69 83       	std	Y+1, r22	; 0x01
    39c6:	7a 83       	std	Y+2, r23	; 0x02
    39c8:	8b 83       	std	Y+3, r24	; 0x03
    39ca:	9c 83       	std	Y+4, r25	; 0x04
    39cc:	2d 83       	std	Y+5, r18	; 0x05
    39ce:	3e 83       	std	Y+6, r19	; 0x06
    39d0:	4f 83       	std	Y+7, r20	; 0x07
    39d2:	58 87       	std	Y+8, r21	; 0x08
    39d4:	89 e0       	ldi	r24, 0x09	; 9
    39d6:	e8 2e       	mov	r14, r24
    39d8:	f1 2c       	mov	r15, r1
    39da:	ec 0e       	add	r14, r28
    39dc:	fd 1e       	adc	r15, r29
    39de:	b7 01       	movw	r22, r14
    39e0:	ce 01       	movw	r24, r28
    39e2:	01 96       	adiw	r24, 0x01	; 1
    39e4:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    39e8:	8e 01       	movw	r16, r28
    39ea:	0f 5e       	subi	r16, 0xEF	; 239
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	b8 01       	movw	r22, r16
    39f0:	ce 01       	movw	r24, r28
    39f2:	05 96       	adiw	r24, 0x05	; 5
    39f4:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    39f8:	ae 01       	movw	r20, r28
    39fa:	47 5e       	subi	r20, 0xE7	; 231
    39fc:	5f 4f       	sbci	r21, 0xFF	; 255
    39fe:	b8 01       	movw	r22, r16
    3a00:	c7 01       	movw	r24, r14
    3a02:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_fpadd_parts>
    3a06:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__pack_f>
    3a0a:	e6 e0       	ldi	r30, 0x06	; 6
    3a0c:	a0 96       	adiw	r28, 0x20	; 32
    3a0e:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__epilogue_restores__+0x18>

00003a12 <__mulsf3>:
    3a12:	a0 e2       	ldi	r26, 0x20	; 32
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	ef e0       	ldi	r30, 0x0F	; 15
    3a18:	fd e1       	ldi	r31, 0x1D	; 29
    3a1a:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x4>
    3a1e:	69 83       	std	Y+1, r22	; 0x01
    3a20:	7a 83       	std	Y+2, r23	; 0x02
    3a22:	8b 83       	std	Y+3, r24	; 0x03
    3a24:	9c 83       	std	Y+4, r25	; 0x04
    3a26:	2d 83       	std	Y+5, r18	; 0x05
    3a28:	3e 83       	std	Y+6, r19	; 0x06
    3a2a:	4f 83       	std	Y+7, r20	; 0x07
    3a2c:	58 87       	std	Y+8, r21	; 0x08
    3a2e:	99 e0       	ldi	r25, 0x09	; 9
    3a30:	e9 2e       	mov	r14, r25
    3a32:	f1 2c       	mov	r15, r1
    3a34:	ec 0e       	add	r14, r28
    3a36:	fd 1e       	adc	r15, r29
    3a38:	b7 01       	movw	r22, r14
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	01 96       	adiw	r24, 0x01	; 1
    3a3e:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    3a42:	8e 01       	movw	r16, r28
    3a44:	0f 5e       	subi	r16, 0xEF	; 239
    3a46:	1f 4f       	sbci	r17, 0xFF	; 255
    3a48:	b8 01       	movw	r22, r16
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	05 96       	adiw	r24, 0x05	; 5
    3a4e:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    3a52:	99 85       	ldd	r25, Y+9	; 0x09
    3a54:	92 30       	cpi	r25, 0x02	; 2
    3a56:	88 f0       	brcs	.+34     	; 0x3a7a <__mulsf3+0x68>
    3a58:	89 89       	ldd	r24, Y+17	; 0x11
    3a5a:	82 30       	cpi	r24, 0x02	; 2
    3a5c:	c0 f0       	brcs	.+48     	; 0x3a8e <__mulsf3+0x7c>
    3a5e:	94 30       	cpi	r25, 0x04	; 4
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <__mulsf3+0x56>
    3a62:	82 30       	cpi	r24, 0x02	; 2
    3a64:	29 f0       	breq	.+10     	; 0x3a70 <__mulsf3+0x5e>
    3a66:	09 c0       	rjmp	.+18     	; 0x3a7a <__mulsf3+0x68>
    3a68:	84 30       	cpi	r24, 0x04	; 4
    3a6a:	29 f4       	brne	.+10     	; 0x3a76 <__mulsf3+0x64>
    3a6c:	92 30       	cpi	r25, 0x02	; 2
    3a6e:	79 f4       	brne	.+30     	; 0x3a8e <__mulsf3+0x7c>
    3a70:	66 e1       	ldi	r22, 0x16	; 22
    3a72:	72 e0       	ldi	r23, 0x02	; 2
    3a74:	c6 c0       	rjmp	.+396    	; 0x3c02 <__mulsf3+0x1f0>
    3a76:	92 30       	cpi	r25, 0x02	; 2
    3a78:	41 f4       	brne	.+16     	; 0x3a8a <__mulsf3+0x78>
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a80:	98 13       	cpse	r25, r24
    3a82:	21 e0       	ldi	r18, 0x01	; 1
    3a84:	2a 87       	std	Y+10, r18	; 0x0a
    3a86:	b7 01       	movw	r22, r14
    3a88:	bc c0       	rjmp	.+376    	; 0x3c02 <__mulsf3+0x1f0>
    3a8a:	82 30       	cpi	r24, 0x02	; 2
    3a8c:	41 f4       	brne	.+16     	; 0x3a9e <__mulsf3+0x8c>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a92:	8a 89       	ldd	r24, Y+18	; 0x12
    3a94:	98 13       	cpse	r25, r24
    3a96:	21 e0       	ldi	r18, 0x01	; 1
    3a98:	2a 8b       	std	Y+18, r18	; 0x12
    3a9a:	b8 01       	movw	r22, r16
    3a9c:	b2 c0       	rjmp	.+356    	; 0x3c02 <__mulsf3+0x1f0>
    3a9e:	cd 84       	ldd	r12, Y+13	; 0x0d
    3aa0:	de 84       	ldd	r13, Y+14	; 0x0e
    3aa2:	ef 84       	ldd	r14, Y+15	; 0x0f
    3aa4:	f8 88       	ldd	r15, Y+16	; 0x10
    3aa6:	0d 89       	ldd	r16, Y+21	; 0x15
    3aa8:	1e 89       	ldd	r17, Y+22	; 0x16
    3aaa:	2f 89       	ldd	r18, Y+23	; 0x17
    3aac:	38 8d       	ldd	r19, Y+24	; 0x18
    3aae:	88 24       	eor	r8, r8
    3ab0:	99 24       	eor	r9, r9
    3ab2:	54 01       	movw	r10, r8
    3ab4:	40 e0       	ldi	r20, 0x00	; 0
    3ab6:	50 e0       	ldi	r21, 0x00	; 0
    3ab8:	60 e0       	ldi	r22, 0x00	; 0
    3aba:	70 e0       	ldi	r23, 0x00	; 0
    3abc:	44 24       	eor	r4, r4
    3abe:	55 24       	eor	r5, r5
    3ac0:	32 01       	movw	r6, r4
    3ac2:	e0 e0       	ldi	r30, 0x00	; 0
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	c6 01       	movw	r24, r12
    3ac8:	81 70       	andi	r24, 0x01	; 1
    3aca:	90 70       	andi	r25, 0x00	; 0
    3acc:	89 2b       	or	r24, r25
    3ace:	d9 f0       	breq	.+54     	; 0x3b06 <__mulsf3+0xf4>
    3ad0:	80 0e       	add	r8, r16
    3ad2:	91 1e       	adc	r9, r17
    3ad4:	a2 1e       	adc	r10, r18
    3ad6:	b3 1e       	adc	r11, r19
    3ad8:	db 01       	movw	r26, r22
    3ada:	ca 01       	movw	r24, r20
    3adc:	84 0d       	add	r24, r4
    3ade:	95 1d       	adc	r25, r5
    3ae0:	a6 1d       	adc	r26, r6
    3ae2:	b7 1d       	adc	r27, r7
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	80 16       	cp	r8, r16
    3aee:	91 06       	cpc	r9, r17
    3af0:	a2 06       	cpc	r10, r18
    3af2:	b3 06       	cpc	r11, r19
    3af4:	20 f4       	brcc	.+8      	; 0x3afe <__mulsf3+0xec>
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	50 e0       	ldi	r21, 0x00	; 0
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	48 0f       	add	r20, r24
    3b00:	59 1f       	adc	r21, r25
    3b02:	6a 1f       	adc	r22, r26
    3b04:	7b 1f       	adc	r23, r27
    3b06:	44 0c       	add	r4, r4
    3b08:	55 1c       	adc	r5, r5
    3b0a:	66 1c       	adc	r6, r6
    3b0c:	77 1c       	adc	r7, r7
    3b0e:	37 ff       	sbrs	r19, 7
    3b10:	08 c0       	rjmp	.+16     	; 0x3b22 <__mulsf3+0x110>
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a0 e0       	ldi	r26, 0x00	; 0
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	48 2a       	or	r4, r24
    3b1c:	59 2a       	or	r5, r25
    3b1e:	6a 2a       	or	r6, r26
    3b20:	7b 2a       	or	r7, r27
    3b22:	31 96       	adiw	r30, 0x01	; 1
    3b24:	e0 32       	cpi	r30, 0x20	; 32
    3b26:	f1 05       	cpc	r31, r1
    3b28:	49 f0       	breq	.+18     	; 0x3b3c <__mulsf3+0x12a>
    3b2a:	00 0f       	add	r16, r16
    3b2c:	11 1f       	adc	r17, r17
    3b2e:	22 1f       	adc	r18, r18
    3b30:	33 1f       	adc	r19, r19
    3b32:	f6 94       	lsr	r15
    3b34:	e7 94       	ror	r14
    3b36:	d7 94       	ror	r13
    3b38:	c7 94       	ror	r12
    3b3a:	c5 cf       	rjmp	.-118    	; 0x3ac6 <__mulsf3+0xb4>
    3b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b40:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b42:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b44:	82 0f       	add	r24, r18
    3b46:	93 1f       	adc	r25, r19
    3b48:	02 96       	adiw	r24, 0x02	; 2
    3b4a:	9c 8f       	std	Y+28, r25	; 0x1c
    3b4c:	8b 8f       	std	Y+27, r24	; 0x1b
    3b4e:	1a 8e       	std	Y+26, r1	; 0x1a
    3b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b52:	8a 89       	ldd	r24, Y+18	; 0x12
    3b54:	98 17       	cp	r25, r24
    3b56:	11 f0       	breq	.+4      	; 0x3b5c <__mulsf3+0x14a>
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	8a 8f       	std	Y+26, r24	; 0x1a
    3b5c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3b5e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3b60:	17 c0       	rjmp	.+46     	; 0x3b90 <__mulsf3+0x17e>
    3b62:	ca 01       	movw	r24, r20
    3b64:	81 70       	andi	r24, 0x01	; 1
    3b66:	90 70       	andi	r25, 0x00	; 0
    3b68:	89 2b       	or	r24, r25
    3b6a:	61 f0       	breq	.+24     	; 0x3b84 <__mulsf3+0x172>
    3b6c:	b6 94       	lsr	r11
    3b6e:	a7 94       	ror	r10
    3b70:	97 94       	ror	r9
    3b72:	87 94       	ror	r8
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b0 e8       	ldi	r27, 0x80	; 128
    3b7c:	88 2a       	or	r8, r24
    3b7e:	99 2a       	or	r9, r25
    3b80:	aa 2a       	or	r10, r26
    3b82:	bb 2a       	or	r11, r27
    3b84:	76 95       	lsr	r23
    3b86:	67 95       	ror	r22
    3b88:	57 95       	ror	r21
    3b8a:	47 95       	ror	r20
    3b8c:	2f 5f       	subi	r18, 0xFF	; 255
    3b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b90:	77 fd       	sbrc	r23, 7
    3b92:	e7 cf       	rjmp	.-50     	; 0x3b62 <__mulsf3+0x150>
    3b94:	c9 01       	movw	r24, r18
    3b96:	0b c0       	rjmp	.+22     	; 0x3bae <__mulsf3+0x19c>
    3b98:	44 0f       	add	r20, r20
    3b9a:	55 1f       	adc	r21, r21
    3b9c:	66 1f       	adc	r22, r22
    3b9e:	77 1f       	adc	r23, r23
    3ba0:	b7 fc       	sbrc	r11, 7
    3ba2:	41 60       	ori	r20, 0x01	; 1
    3ba4:	88 0c       	add	r8, r8
    3ba6:	99 1c       	adc	r9, r9
    3ba8:	aa 1c       	adc	r10, r10
    3baa:	bb 1c       	adc	r11, r11
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	40 30       	cpi	r20, 0x00	; 0
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	5a 07       	cpc	r21, r26
    3bb4:	a0 e0       	ldi	r26, 0x00	; 0
    3bb6:	6a 07       	cpc	r22, r26
    3bb8:	a0 e4       	ldi	r26, 0x40	; 64
    3bba:	7a 07       	cpc	r23, r26
    3bbc:	68 f3       	brcs	.-38     	; 0x3b98 <__mulsf3+0x186>
    3bbe:	9c 8f       	std	Y+28, r25	; 0x1c
    3bc0:	8b 8f       	std	Y+27, r24	; 0x1b
    3bc2:	db 01       	movw	r26, r22
    3bc4:	ca 01       	movw	r24, r20
    3bc6:	8f 77       	andi	r24, 0x7F	; 127
    3bc8:	90 70       	andi	r25, 0x00	; 0
    3bca:	a0 70       	andi	r26, 0x00	; 0
    3bcc:	b0 70       	andi	r27, 0x00	; 0
    3bce:	80 34       	cpi	r24, 0x40	; 64
    3bd0:	91 05       	cpc	r25, r1
    3bd2:	a1 05       	cpc	r26, r1
    3bd4:	b1 05       	cpc	r27, r1
    3bd6:	61 f4       	brne	.+24     	; 0x3bf0 <__mulsf3+0x1de>
    3bd8:	47 fd       	sbrc	r20, 7
    3bda:	0a c0       	rjmp	.+20     	; 0x3bf0 <__mulsf3+0x1de>
    3bdc:	81 14       	cp	r8, r1
    3bde:	91 04       	cpc	r9, r1
    3be0:	a1 04       	cpc	r10, r1
    3be2:	b1 04       	cpc	r11, r1
    3be4:	29 f0       	breq	.+10     	; 0x3bf0 <__mulsf3+0x1de>
    3be6:	40 5c       	subi	r20, 0xC0	; 192
    3be8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bea:	6f 4f       	sbci	r22, 0xFF	; 255
    3bec:	7f 4f       	sbci	r23, 0xFF	; 255
    3bee:	40 78       	andi	r20, 0x80	; 128
    3bf0:	4d 8f       	std	Y+29, r20	; 0x1d
    3bf2:	5e 8f       	std	Y+30, r21	; 0x1e
    3bf4:	6f 8f       	std	Y+31, r22	; 0x1f
    3bf6:	78 a3       	std	Y+32, r23	; 0x20
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	89 8f       	std	Y+25, r24	; 0x19
    3bfc:	be 01       	movw	r22, r28
    3bfe:	67 5e       	subi	r22, 0xE7	; 231
    3c00:	7f 4f       	sbci	r23, 0xFF	; 255
    3c02:	cb 01       	movw	r24, r22
    3c04:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__pack_f>
    3c08:	e0 e1       	ldi	r30, 0x10	; 16
    3c0a:	a0 96       	adiw	r28, 0x20	; 32
    3c0c:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x4>

00003c10 <__floatsisf>:
    3c10:	a8 e0       	ldi	r26, 0x08	; 8
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	ee e0       	ldi	r30, 0x0E	; 14
    3c16:	fe e1       	ldi	r31, 0x1E	; 30
    3c18:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__prologue_saves__+0x12>
    3c1c:	9b 01       	movw	r18, r22
    3c1e:	ac 01       	movw	r20, r24
    3c20:	83 e0       	ldi	r24, 0x03	; 3
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	da 01       	movw	r26, r20
    3c26:	c9 01       	movw	r24, r18
    3c28:	88 27       	eor	r24, r24
    3c2a:	b7 fd       	sbrc	r27, 7
    3c2c:	83 95       	inc	r24
    3c2e:	99 27       	eor	r25, r25
    3c30:	aa 27       	eor	r26, r26
    3c32:	bb 27       	eor	r27, r27
    3c34:	b8 2e       	mov	r11, r24
    3c36:	21 15       	cp	r18, r1
    3c38:	31 05       	cpc	r19, r1
    3c3a:	41 05       	cpc	r20, r1
    3c3c:	51 05       	cpc	r21, r1
    3c3e:	19 f4       	brne	.+6      	; 0x3c46 <__floatsisf+0x36>
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	3a c0       	rjmp	.+116    	; 0x3cba <__floatsisf+0xaa>
    3c46:	88 23       	and	r24, r24
    3c48:	a9 f0       	breq	.+42     	; 0x3c74 <__floatsisf+0x64>
    3c4a:	20 30       	cpi	r18, 0x00	; 0
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	38 07       	cpc	r19, r24
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	48 07       	cpc	r20, r24
    3c54:	80 e8       	ldi	r24, 0x80	; 128
    3c56:	58 07       	cpc	r21, r24
    3c58:	29 f4       	brne	.+10     	; 0x3c64 <__floatsisf+0x54>
    3c5a:	60 e0       	ldi	r22, 0x00	; 0
    3c5c:	70 e0       	ldi	r23, 0x00	; 0
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	9f ec       	ldi	r25, 0xCF	; 207
    3c62:	30 c0       	rjmp	.+96     	; 0x3cc4 <__floatsisf+0xb4>
    3c64:	ee 24       	eor	r14, r14
    3c66:	ff 24       	eor	r15, r15
    3c68:	87 01       	movw	r16, r14
    3c6a:	e2 1a       	sub	r14, r18
    3c6c:	f3 0a       	sbc	r15, r19
    3c6e:	04 0b       	sbc	r16, r20
    3c70:	15 0b       	sbc	r17, r21
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <__floatsisf+0x68>
    3c74:	79 01       	movw	r14, r18
    3c76:	8a 01       	movw	r16, r20
    3c78:	8e e1       	ldi	r24, 0x1E	; 30
    3c7a:	c8 2e       	mov	r12, r24
    3c7c:	d1 2c       	mov	r13, r1
    3c7e:	dc 82       	std	Y+4, r13	; 0x04
    3c80:	cb 82       	std	Y+3, r12	; 0x03
    3c82:	ed 82       	std	Y+5, r14	; 0x05
    3c84:	fe 82       	std	Y+6, r15	; 0x06
    3c86:	0f 83       	std	Y+7, r16	; 0x07
    3c88:	18 87       	std	Y+8, r17	; 0x08
    3c8a:	c8 01       	movw	r24, r16
    3c8c:	b7 01       	movw	r22, r14
    3c8e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__clzsi2>
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	18 16       	cp	r1, r24
    3c96:	19 06       	cpc	r1, r25
    3c98:	84 f4       	brge	.+32     	; 0x3cba <__floatsisf+0xaa>
    3c9a:	08 2e       	mov	r0, r24
    3c9c:	04 c0       	rjmp	.+8      	; 0x3ca6 <__floatsisf+0x96>
    3c9e:	ee 0c       	add	r14, r14
    3ca0:	ff 1c       	adc	r15, r15
    3ca2:	00 1f       	adc	r16, r16
    3ca4:	11 1f       	adc	r17, r17
    3ca6:	0a 94       	dec	r0
    3ca8:	d2 f7       	brpl	.-12     	; 0x3c9e <__floatsisf+0x8e>
    3caa:	ed 82       	std	Y+5, r14	; 0x05
    3cac:	fe 82       	std	Y+6, r15	; 0x06
    3cae:	0f 83       	std	Y+7, r16	; 0x07
    3cb0:	18 87       	std	Y+8, r17	; 0x08
    3cb2:	c8 1a       	sub	r12, r24
    3cb4:	d9 0a       	sbc	r13, r25
    3cb6:	dc 82       	std	Y+4, r13	; 0x04
    3cb8:	cb 82       	std	Y+3, r12	; 0x03
    3cba:	ba 82       	std	Y+2, r11	; 0x02
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	01 96       	adiw	r24, 0x01	; 1
    3cc0:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__pack_f>
    3cc4:	e9 e0       	ldi	r30, 0x09	; 9
    3cc6:	28 96       	adiw	r28, 0x08	; 8
    3cc8:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__epilogue_restores__+0x12>

00003ccc <__fixsfsi>:
    3ccc:	ac e0       	ldi	r26, 0x0C	; 12
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	ec e6       	ldi	r30, 0x6C	; 108
    3cd2:	fe e1       	ldi	r31, 0x1E	; 30
    3cd4:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__prologue_saves__+0x20>
    3cd8:	69 83       	std	Y+1, r22	; 0x01
    3cda:	7a 83       	std	Y+2, r23	; 0x02
    3cdc:	8b 83       	std	Y+3, r24	; 0x03
    3cde:	9c 83       	std	Y+4, r25	; 0x04
    3ce0:	be 01       	movw	r22, r28
    3ce2:	6b 5f       	subi	r22, 0xFB	; 251
    3ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce6:	ce 01       	movw	r24, r28
    3ce8:	01 96       	adiw	r24, 0x01	; 1
    3cea:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__unpack_f>
    3cee:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf0:	82 30       	cpi	r24, 0x02	; 2
    3cf2:	a9 f1       	breq	.+106    	; 0x3d5e <__fixsfsi+0x92>
    3cf4:	82 30       	cpi	r24, 0x02	; 2
    3cf6:	98 f1       	brcs	.+102    	; 0x3d5e <__fixsfsi+0x92>
    3cf8:	84 30       	cpi	r24, 0x04	; 4
    3cfa:	21 f4       	brne	.+8      	; 0x3d04 <__fixsfsi+0x38>
    3cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    3cfe:	88 23       	and	r24, r24
    3d00:	59 f4       	brne	.+22     	; 0x3d18 <__fixsfsi+0x4c>
    3d02:	0f c0       	rjmp	.+30     	; 0x3d22 <__fixsfsi+0x56>
    3d04:	2f 81       	ldd	r18, Y+7	; 0x07
    3d06:	38 85       	ldd	r19, Y+8	; 0x08
    3d08:	37 fd       	sbrc	r19, 7
    3d0a:	29 c0       	rjmp	.+82     	; 0x3d5e <__fixsfsi+0x92>
    3d0c:	6e 81       	ldd	r22, Y+6	; 0x06
    3d0e:	2f 31       	cpi	r18, 0x1F	; 31
    3d10:	31 05       	cpc	r19, r1
    3d12:	64 f0       	brlt	.+24     	; 0x3d2c <__fixsfsi+0x60>
    3d14:	66 23       	and	r22, r22
    3d16:	29 f0       	breq	.+10     	; 0x3d22 <__fixsfsi+0x56>
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e8       	ldi	r21, 0x80	; 128
    3d20:	22 c0       	rjmp	.+68     	; 0x3d66 <__fixsfsi+0x9a>
    3d22:	2f ef       	ldi	r18, 0xFF	; 255
    3d24:	3f ef       	ldi	r19, 0xFF	; 255
    3d26:	4f ef       	ldi	r20, 0xFF	; 255
    3d28:	5f e7       	ldi	r21, 0x7F	; 127
    3d2a:	1d c0       	rjmp	.+58     	; 0x3d66 <__fixsfsi+0x9a>
    3d2c:	8e e1       	ldi	r24, 0x1E	; 30
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	82 1b       	sub	r24, r18
    3d32:	93 0b       	sbc	r25, r19
    3d34:	29 85       	ldd	r18, Y+9	; 0x09
    3d36:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d38:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d3a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d3c:	04 c0       	rjmp	.+8      	; 0x3d46 <__fixsfsi+0x7a>
    3d3e:	56 95       	lsr	r21
    3d40:	47 95       	ror	r20
    3d42:	37 95       	ror	r19
    3d44:	27 95       	ror	r18
    3d46:	8a 95       	dec	r24
    3d48:	d2 f7       	brpl	.-12     	; 0x3d3e <__fixsfsi+0x72>
    3d4a:	66 23       	and	r22, r22
    3d4c:	61 f0       	breq	.+24     	; 0x3d66 <__fixsfsi+0x9a>
    3d4e:	50 95       	com	r21
    3d50:	40 95       	com	r20
    3d52:	30 95       	com	r19
    3d54:	21 95       	neg	r18
    3d56:	3f 4f       	sbci	r19, 0xFF	; 255
    3d58:	4f 4f       	sbci	r20, 0xFF	; 255
    3d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d5c:	04 c0       	rjmp	.+8      	; 0x3d66 <__fixsfsi+0x9a>
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	ca 01       	movw	r24, r20
    3d68:	b9 01       	movw	r22, r18
    3d6a:	e2 e0       	ldi	r30, 0x02	; 2
    3d6c:	2c 96       	adiw	r28, 0x0c	; 12
    3d6e:	0c 94 05 21 	jmp	0x420a	; 0x420a <__epilogue_restores__+0x20>

00003d72 <__clzsi2>:
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	0f 93       	push	r16
    3d78:	1f 93       	push	r17
    3d7a:	9b 01       	movw	r18, r22
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	20 30       	cpi	r18, 0x00	; 0
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	38 07       	cpc	r19, r24
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	48 07       	cpc	r20, r24
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	58 07       	cpc	r21, r24
    3d8c:	80 f4       	brcc	.+32     	; 0x3dae <__clzsi2+0x3c>
    3d8e:	2f 3f       	cpi	r18, 0xFF	; 255
    3d90:	31 05       	cpc	r19, r1
    3d92:	41 05       	cpc	r20, r1
    3d94:	51 05       	cpc	r21, r1
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <__clzsi2+0x28>
    3d98:	20 f4       	brcc	.+8      	; 0x3da2 <__clzsi2+0x30>
    3d9a:	ee 24       	eor	r14, r14
    3d9c:	ff 24       	eor	r15, r15
    3d9e:	87 01       	movw	r16, r14
    3da0:	19 c0       	rjmp	.+50     	; 0x3dd4 <__clzsi2+0x62>
    3da2:	68 e0       	ldi	r22, 0x08	; 8
    3da4:	e6 2e       	mov	r14, r22
    3da6:	f1 2c       	mov	r15, r1
    3da8:	01 2d       	mov	r16, r1
    3daa:	11 2d       	mov	r17, r1
    3dac:	13 c0       	rjmp	.+38     	; 0x3dd4 <__clzsi2+0x62>
    3dae:	20 30       	cpi	r18, 0x00	; 0
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	38 07       	cpc	r19, r24
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	48 07       	cpc	r20, r24
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	58 07       	cpc	r21, r24
    3dbc:	30 f4       	brcc	.+12     	; 0x3dca <__clzsi2+0x58>
    3dbe:	90 e1       	ldi	r25, 0x10	; 16
    3dc0:	e9 2e       	mov	r14, r25
    3dc2:	f1 2c       	mov	r15, r1
    3dc4:	01 2d       	mov	r16, r1
    3dc6:	11 2d       	mov	r17, r1
    3dc8:	05 c0       	rjmp	.+10     	; 0x3dd4 <__clzsi2+0x62>
    3dca:	88 e1       	ldi	r24, 0x18	; 24
    3dcc:	e8 2e       	mov	r14, r24
    3dce:	f1 2c       	mov	r15, r1
    3dd0:	01 2d       	mov	r16, r1
    3dd2:	11 2d       	mov	r17, r1
    3dd4:	80 e2       	ldi	r24, 0x20	; 32
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	a0 e0       	ldi	r26, 0x00	; 0
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	8e 19       	sub	r24, r14
    3dde:	9f 09       	sbc	r25, r15
    3de0:	a0 0b       	sbc	r26, r16
    3de2:	b1 0b       	sbc	r27, r17
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <__clzsi2+0x7c>
    3de6:	56 95       	lsr	r21
    3de8:	47 95       	ror	r20
    3dea:	37 95       	ror	r19
    3dec:	27 95       	ror	r18
    3dee:	ea 94       	dec	r14
    3df0:	d2 f7       	brpl	.-12     	; 0x3de6 <__clzsi2+0x74>
    3df2:	f9 01       	movw	r30, r18
    3df4:	e2 5e       	subi	r30, 0xE2	; 226
    3df6:	fd 4f       	sbci	r31, 0xFD	; 253
    3df8:	20 81       	ld	r18, Z
    3dfa:	82 1b       	sub	r24, r18
    3dfc:	91 09       	sbc	r25, r1
    3dfe:	a1 09       	sbc	r26, r1
    3e00:	b1 09       	sbc	r27, r1
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	ff 90       	pop	r15
    3e08:	ef 90       	pop	r14
    3e0a:	08 95       	ret

00003e0c <__pack_f>:
    3e0c:	9f 92       	push	r9
    3e0e:	af 92       	push	r10
    3e10:	bf 92       	push	r11
    3e12:	cf 92       	push	r12
    3e14:	df 92       	push	r13
    3e16:	ef 92       	push	r14
    3e18:	ff 92       	push	r15
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	ee 24       	eor	r14, r14
    3e20:	ff 24       	eor	r15, r15
    3e22:	87 01       	movw	r16, r14
    3e24:	fc 01       	movw	r30, r24
    3e26:	24 81       	ldd	r18, Z+4	; 0x04
    3e28:	35 81       	ldd	r19, Z+5	; 0x05
    3e2a:	46 81       	ldd	r20, Z+6	; 0x06
    3e2c:	57 81       	ldd	r21, Z+7	; 0x07
    3e2e:	91 80       	ldd	r9, Z+1	; 0x01
    3e30:	80 81       	ld	r24, Z
    3e32:	82 30       	cpi	r24, 0x02	; 2
    3e34:	10 f4       	brcc	.+4      	; 0x3e3a <__pack_f+0x2e>
    3e36:	40 61       	ori	r20, 0x10	; 16
    3e38:	a2 c0       	rjmp	.+324    	; 0x3f7e <__pack_f+0x172>
    3e3a:	84 30       	cpi	r24, 0x04	; 4
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <__pack_f+0x34>
    3e3e:	9b c0       	rjmp	.+310    	; 0x3f76 <__pack_f+0x16a>
    3e40:	82 30       	cpi	r24, 0x02	; 2
    3e42:	29 f4       	brne	.+10     	; 0x3e4e <__pack_f+0x42>
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	05 c0       	rjmp	.+10     	; 0x3e58 <__pack_f+0x4c>
    3e4e:	21 15       	cp	r18, r1
    3e50:	31 05       	cpc	r19, r1
    3e52:	41 05       	cpc	r20, r1
    3e54:	51 05       	cpc	r21, r1
    3e56:	19 f4       	brne	.+6      	; 0x3e5e <__pack_f+0x52>
    3e58:	e0 e0       	ldi	r30, 0x00	; 0
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	92 c0       	rjmp	.+292    	; 0x3f82 <__pack_f+0x176>
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	6f ef       	ldi	r22, 0xFF	; 255
    3e64:	82 38       	cpi	r24, 0x82	; 130
    3e66:	96 07       	cpc	r25, r22
    3e68:	0c f0       	brlt	.+2      	; 0x3e6c <__pack_f+0x60>
    3e6a:	5a c0       	rjmp	.+180    	; 0x3f20 <__pack_f+0x114>
    3e6c:	62 e8       	ldi	r22, 0x82	; 130
    3e6e:	7f ef       	ldi	r23, 0xFF	; 255
    3e70:	68 1b       	sub	r22, r24
    3e72:	79 0b       	sbc	r23, r25
    3e74:	6a 31       	cpi	r22, 0x1A	; 26
    3e76:	71 05       	cpc	r23, r1
    3e78:	2c f0       	brlt	.+10     	; 0x3e84 <__pack_f+0x78>
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e0       	ldi	r20, 0x00	; 0
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	2a c0       	rjmp	.+84     	; 0x3ed8 <__pack_f+0xcc>
    3e84:	aa 24       	eor	r10, r10
    3e86:	bb 24       	eor	r11, r11
    3e88:	65 01       	movw	r12, r10
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	a0 e0       	ldi	r26, 0x00	; 0
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	06 2e       	mov	r0, r22
    3e94:	04 c0       	rjmp	.+8      	; 0x3e9e <__pack_f+0x92>
    3e96:	88 0f       	add	r24, r24
    3e98:	99 1f       	adc	r25, r25
    3e9a:	aa 1f       	adc	r26, r26
    3e9c:	bb 1f       	adc	r27, r27
    3e9e:	0a 94       	dec	r0
    3ea0:	d2 f7       	brpl	.-12     	; 0x3e96 <__pack_f+0x8a>
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	a1 09       	sbc	r26, r1
    3ea6:	b1 09       	sbc	r27, r1
    3ea8:	82 23       	and	r24, r18
    3eaa:	93 23       	and	r25, r19
    3eac:	a4 23       	and	r26, r20
    3eae:	b5 23       	and	r27, r21
    3eb0:	00 97       	sbiw	r24, 0x00	; 0
    3eb2:	a1 05       	cpc	r26, r1
    3eb4:	b1 05       	cpc	r27, r1
    3eb6:	29 f0       	breq	.+10     	; 0x3ec2 <__pack_f+0xb6>
    3eb8:	71 e0       	ldi	r23, 0x01	; 1
    3eba:	a7 2e       	mov	r10, r23
    3ebc:	b1 2c       	mov	r11, r1
    3ebe:	c1 2c       	mov	r12, r1
    3ec0:	d1 2c       	mov	r13, r1
    3ec2:	04 c0       	rjmp	.+8      	; 0x3ecc <__pack_f+0xc0>
    3ec4:	56 95       	lsr	r21
    3ec6:	47 95       	ror	r20
    3ec8:	37 95       	ror	r19
    3eca:	27 95       	ror	r18
    3ecc:	6a 95       	dec	r22
    3ece:	d2 f7       	brpl	.-12     	; 0x3ec4 <__pack_f+0xb8>
    3ed0:	2a 29       	or	r18, r10
    3ed2:	3b 29       	or	r19, r11
    3ed4:	4c 29       	or	r20, r12
    3ed6:	5d 29       	or	r21, r13
    3ed8:	da 01       	movw	r26, r20
    3eda:	c9 01       	movw	r24, r18
    3edc:	8f 77       	andi	r24, 0x7F	; 127
    3ede:	90 70       	andi	r25, 0x00	; 0
    3ee0:	a0 70       	andi	r26, 0x00	; 0
    3ee2:	b0 70       	andi	r27, 0x00	; 0
    3ee4:	80 34       	cpi	r24, 0x40	; 64
    3ee6:	91 05       	cpc	r25, r1
    3ee8:	a1 05       	cpc	r26, r1
    3eea:	b1 05       	cpc	r27, r1
    3eec:	39 f4       	brne	.+14     	; 0x3efc <__pack_f+0xf0>
    3eee:	27 ff       	sbrs	r18, 7
    3ef0:	09 c0       	rjmp	.+18     	; 0x3f04 <__pack_f+0xf8>
    3ef2:	20 5c       	subi	r18, 0xC0	; 192
    3ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef6:	4f 4f       	sbci	r20, 0xFF	; 255
    3ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    3efa:	04 c0       	rjmp	.+8      	; 0x3f04 <__pack_f+0xf8>
    3efc:	21 5c       	subi	r18, 0xC1	; 193
    3efe:	3f 4f       	sbci	r19, 0xFF	; 255
    3f00:	4f 4f       	sbci	r20, 0xFF	; 255
    3f02:	5f 4f       	sbci	r21, 0xFF	; 255
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	20 30       	cpi	r18, 0x00	; 0
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	36 07       	cpc	r19, r22
    3f0e:	60 e0       	ldi	r22, 0x00	; 0
    3f10:	46 07       	cpc	r20, r22
    3f12:	60 e4       	ldi	r22, 0x40	; 64
    3f14:	56 07       	cpc	r21, r22
    3f16:	10 f0       	brcs	.+4      	; 0x3f1c <__pack_f+0x110>
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	23 c0       	rjmp	.+70     	; 0x3f66 <__pack_f+0x15a>
    3f20:	80 38       	cpi	r24, 0x80	; 128
    3f22:	91 05       	cpc	r25, r1
    3f24:	44 f5       	brge	.+80     	; 0x3f76 <__pack_f+0x16a>
    3f26:	fc 01       	movw	r30, r24
    3f28:	e1 58       	subi	r30, 0x81	; 129
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	da 01       	movw	r26, r20
    3f2e:	c9 01       	movw	r24, r18
    3f30:	8f 77       	andi	r24, 0x7F	; 127
    3f32:	90 70       	andi	r25, 0x00	; 0
    3f34:	a0 70       	andi	r26, 0x00	; 0
    3f36:	b0 70       	andi	r27, 0x00	; 0
    3f38:	80 34       	cpi	r24, 0x40	; 64
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	a1 05       	cpc	r26, r1
    3f3e:	b1 05       	cpc	r27, r1
    3f40:	39 f4       	brne	.+14     	; 0x3f50 <__pack_f+0x144>
    3f42:	27 ff       	sbrs	r18, 7
    3f44:	09 c0       	rjmp	.+18     	; 0x3f58 <__pack_f+0x14c>
    3f46:	20 5c       	subi	r18, 0xC0	; 192
    3f48:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f4e:	04 c0       	rjmp	.+8      	; 0x3f58 <__pack_f+0x14c>
    3f50:	21 5c       	subi	r18, 0xC1	; 193
    3f52:	3f 4f       	sbci	r19, 0xFF	; 255
    3f54:	4f 4f       	sbci	r20, 0xFF	; 255
    3f56:	5f 4f       	sbci	r21, 0xFF	; 255
    3f58:	57 ff       	sbrs	r21, 7
    3f5a:	05 c0       	rjmp	.+10     	; 0x3f66 <__pack_f+0x15a>
    3f5c:	56 95       	lsr	r21
    3f5e:	47 95       	ror	r20
    3f60:	37 95       	ror	r19
    3f62:	27 95       	ror	r18
    3f64:	31 96       	adiw	r30, 0x01	; 1
    3f66:	87 e0       	ldi	r24, 0x07	; 7
    3f68:	56 95       	lsr	r21
    3f6a:	47 95       	ror	r20
    3f6c:	37 95       	ror	r19
    3f6e:	27 95       	ror	r18
    3f70:	8a 95       	dec	r24
    3f72:	d1 f7       	brne	.-12     	; 0x3f68 <__pack_f+0x15c>
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <__pack_f+0x176>
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e0       	ldi	r20, 0x00	; 0
    3f7c:	50 e0       	ldi	r21, 0x00	; 0
    3f7e:	ef ef       	ldi	r30, 0xFF	; 255
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	e2 2e       	mov	r14, r18
    3f84:	f3 2e       	mov	r15, r19
    3f86:	94 2f       	mov	r25, r20
    3f88:	9f 77       	andi	r25, 0x7F	; 127
    3f8a:	80 2f       	mov	r24, r16
    3f8c:	80 78       	andi	r24, 0x80	; 128
    3f8e:	89 2b       	or	r24, r25
    3f90:	9e 2f       	mov	r25, r30
    3f92:	97 95       	ror	r25
    3f94:	99 27       	eor	r25, r25
    3f96:	97 95       	ror	r25
    3f98:	8f 77       	andi	r24, 0x7F	; 127
    3f9a:	08 2f       	mov	r16, r24
    3f9c:	09 2b       	or	r16, r25
    3f9e:	9e 2f       	mov	r25, r30
    3fa0:	96 95       	lsr	r25
    3fa2:	81 2f       	mov	r24, r17
    3fa4:	80 78       	andi	r24, 0x80	; 128
    3fa6:	89 2b       	or	r24, r25
    3fa8:	97 94       	ror	r9
    3faa:	99 24       	eor	r9, r9
    3fac:	97 94       	ror	r9
    3fae:	8f 77       	andi	r24, 0x7F	; 127
    3fb0:	18 2f       	mov	r17, r24
    3fb2:	19 29       	or	r17, r9
    3fb4:	c8 01       	movw	r24, r16
    3fb6:	b7 01       	movw	r22, r14
    3fb8:	1f 91       	pop	r17
    3fba:	0f 91       	pop	r16
    3fbc:	ff 90       	pop	r15
    3fbe:	ef 90       	pop	r14
    3fc0:	df 90       	pop	r13
    3fc2:	cf 90       	pop	r12
    3fc4:	bf 90       	pop	r11
    3fc6:	af 90       	pop	r10
    3fc8:	9f 90       	pop	r9
    3fca:	08 95       	ret

00003fcc <__unpack_f>:
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	db 01       	movw	r26, r22
    3fd4:	20 81       	ld	r18, Z
    3fd6:	31 81       	ldd	r19, Z+1	; 0x01
    3fd8:	92 81       	ldd	r25, Z+2	; 0x02
    3fda:	49 2f       	mov	r20, r25
    3fdc:	4f 77       	andi	r20, 0x7F	; 127
    3fde:	50 e0       	ldi	r21, 0x00	; 0
    3fe0:	99 1f       	adc	r25, r25
    3fe2:	99 27       	eor	r25, r25
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	83 81       	ldd	r24, Z+3	; 0x03
    3fe8:	e8 2f       	mov	r30, r24
    3fea:	ee 0f       	add	r30, r30
    3fec:	e9 2b       	or	r30, r25
    3fee:	6e 2f       	mov	r22, r30
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	88 1f       	adc	r24, r24
    3ff4:	88 27       	eor	r24, r24
    3ff6:	88 1f       	adc	r24, r24
    3ff8:	ed 01       	movw	r28, r26
    3ffa:	89 83       	std	Y+1, r24	; 0x01
    3ffc:	ee 23       	and	r30, r30
    3ffe:	71 f5       	brne	.+92     	; 0x405c <__unpack_f+0x90>
    4000:	21 15       	cp	r18, r1
    4002:	31 05       	cpc	r19, r1
    4004:	41 05       	cpc	r20, r1
    4006:	51 05       	cpc	r21, r1
    4008:	11 f4       	brne	.+4      	; 0x400e <__unpack_f+0x42>
    400a:	82 e0       	ldi	r24, 0x02	; 2
    400c:	2f c0       	rjmp	.+94     	; 0x406c <__unpack_f+0xa0>
    400e:	6e 57       	subi	r22, 0x7E	; 126
    4010:	70 40       	sbci	r23, 0x00	; 0
    4012:	fd 01       	movw	r30, r26
    4014:	73 83       	std	Z+3, r23	; 0x03
    4016:	62 83       	std	Z+2, r22	; 0x02
    4018:	67 e0       	ldi	r22, 0x07	; 7
    401a:	22 0f       	add	r18, r18
    401c:	33 1f       	adc	r19, r19
    401e:	44 1f       	adc	r20, r20
    4020:	55 1f       	adc	r21, r21
    4022:	6a 95       	dec	r22
    4024:	d1 f7       	brne	.-12     	; 0x401a <__unpack_f+0x4e>
    4026:	83 e0       	ldi	r24, 0x03	; 3
    4028:	8c 93       	st	X, r24
    402a:	0a c0       	rjmp	.+20     	; 0x4040 <__unpack_f+0x74>
    402c:	22 0f       	add	r18, r18
    402e:	33 1f       	adc	r19, r19
    4030:	44 1f       	adc	r20, r20
    4032:	55 1f       	adc	r21, r21
    4034:	ed 01       	movw	r28, r26
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	9b 81       	ldd	r25, Y+3	; 0x03
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	9b 83       	std	Y+3, r25	; 0x03
    403e:	8a 83       	std	Y+2, r24	; 0x02
    4040:	20 30       	cpi	r18, 0x00	; 0
    4042:	e0 e0       	ldi	r30, 0x00	; 0
    4044:	3e 07       	cpc	r19, r30
    4046:	e0 e0       	ldi	r30, 0x00	; 0
    4048:	4e 07       	cpc	r20, r30
    404a:	e0 e4       	ldi	r30, 0x40	; 64
    404c:	5e 07       	cpc	r21, r30
    404e:	70 f3       	brcs	.-36     	; 0x402c <__unpack_f+0x60>
    4050:	ed 01       	movw	r28, r26
    4052:	2c 83       	std	Y+4, r18	; 0x04
    4054:	3d 83       	std	Y+5, r19	; 0x05
    4056:	4e 83       	std	Y+6, r20	; 0x06
    4058:	5f 83       	std	Y+7, r21	; 0x07
    405a:	25 c0       	rjmp	.+74     	; 0x40a6 <__unpack_f+0xda>
    405c:	ef 3f       	cpi	r30, 0xFF	; 255
    405e:	79 f4       	brne	.+30     	; 0x407e <__unpack_f+0xb2>
    4060:	21 15       	cp	r18, r1
    4062:	31 05       	cpc	r19, r1
    4064:	41 05       	cpc	r20, r1
    4066:	51 05       	cpc	r21, r1
    4068:	19 f4       	brne	.+6      	; 0x4070 <__unpack_f+0xa4>
    406a:	84 e0       	ldi	r24, 0x04	; 4
    406c:	8c 93       	st	X, r24
    406e:	1b c0       	rjmp	.+54     	; 0x40a6 <__unpack_f+0xda>
    4070:	44 ff       	sbrs	r20, 4
    4072:	03 c0       	rjmp	.+6      	; 0x407a <__unpack_f+0xae>
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	8c 93       	st	X, r24
    4078:	11 c0       	rjmp	.+34     	; 0x409c <__unpack_f+0xd0>
    407a:	1c 92       	st	X, r1
    407c:	0f c0       	rjmp	.+30     	; 0x409c <__unpack_f+0xd0>
    407e:	6f 57       	subi	r22, 0x7F	; 127
    4080:	70 40       	sbci	r23, 0x00	; 0
    4082:	ed 01       	movw	r28, r26
    4084:	7b 83       	std	Y+3, r23	; 0x03
    4086:	6a 83       	std	Y+2, r22	; 0x02
    4088:	83 e0       	ldi	r24, 0x03	; 3
    408a:	8c 93       	st	X, r24
    408c:	87 e0       	ldi	r24, 0x07	; 7
    408e:	22 0f       	add	r18, r18
    4090:	33 1f       	adc	r19, r19
    4092:	44 1f       	adc	r20, r20
    4094:	55 1f       	adc	r21, r21
    4096:	8a 95       	dec	r24
    4098:	d1 f7       	brne	.-12     	; 0x408e <__unpack_f+0xc2>
    409a:	50 64       	ori	r21, 0x40	; 64
    409c:	fd 01       	movw	r30, r26
    409e:	24 83       	std	Z+4, r18	; 0x04
    40a0:	35 83       	std	Z+5, r19	; 0x05
    40a2:	46 83       	std	Z+6, r20	; 0x06
    40a4:	57 83       	std	Z+7, r21	; 0x07
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	08 95       	ret

000040ac <__mulsi3>:
    40ac:	62 9f       	mul	r22, r18
    40ae:	d0 01       	movw	r26, r0
    40b0:	73 9f       	mul	r23, r19
    40b2:	f0 01       	movw	r30, r0
    40b4:	82 9f       	mul	r24, r18
    40b6:	e0 0d       	add	r30, r0
    40b8:	f1 1d       	adc	r31, r1
    40ba:	64 9f       	mul	r22, r20
    40bc:	e0 0d       	add	r30, r0
    40be:	f1 1d       	adc	r31, r1
    40c0:	92 9f       	mul	r25, r18
    40c2:	f0 0d       	add	r31, r0
    40c4:	83 9f       	mul	r24, r19
    40c6:	f0 0d       	add	r31, r0
    40c8:	74 9f       	mul	r23, r20
    40ca:	f0 0d       	add	r31, r0
    40cc:	65 9f       	mul	r22, r21
    40ce:	f0 0d       	add	r31, r0
    40d0:	99 27       	eor	r25, r25
    40d2:	72 9f       	mul	r23, r18
    40d4:	b0 0d       	add	r27, r0
    40d6:	e1 1d       	adc	r30, r1
    40d8:	f9 1f       	adc	r31, r25
    40da:	63 9f       	mul	r22, r19
    40dc:	b0 0d       	add	r27, r0
    40de:	e1 1d       	adc	r30, r1
    40e0:	f9 1f       	adc	r31, r25
    40e2:	bd 01       	movw	r22, r26
    40e4:	cf 01       	movw	r24, r30
    40e6:	11 24       	eor	r1, r1
    40e8:	08 95       	ret

000040ea <__udivmodhi4>:
    40ea:	aa 1b       	sub	r26, r26
    40ec:	bb 1b       	sub	r27, r27
    40ee:	51 e1       	ldi	r21, 0x11	; 17
    40f0:	07 c0       	rjmp	.+14     	; 0x4100 <__udivmodhi4_ep>

000040f2 <__udivmodhi4_loop>:
    40f2:	aa 1f       	adc	r26, r26
    40f4:	bb 1f       	adc	r27, r27
    40f6:	a6 17       	cp	r26, r22
    40f8:	b7 07       	cpc	r27, r23
    40fa:	10 f0       	brcs	.+4      	; 0x4100 <__udivmodhi4_ep>
    40fc:	a6 1b       	sub	r26, r22
    40fe:	b7 0b       	sbc	r27, r23

00004100 <__udivmodhi4_ep>:
    4100:	88 1f       	adc	r24, r24
    4102:	99 1f       	adc	r25, r25
    4104:	5a 95       	dec	r21
    4106:	a9 f7       	brne	.-22     	; 0x40f2 <__udivmodhi4_loop>
    4108:	80 95       	com	r24
    410a:	90 95       	com	r25
    410c:	bc 01       	movw	r22, r24
    410e:	cd 01       	movw	r24, r26
    4110:	08 95       	ret

00004112 <__divmodhi4>:
    4112:	97 fb       	bst	r25, 7
    4114:	09 2e       	mov	r0, r25
    4116:	07 26       	eor	r0, r23
    4118:	0a d0       	rcall	.+20     	; 0x412e <__divmodhi4_neg1>
    411a:	77 fd       	sbrc	r23, 7
    411c:	04 d0       	rcall	.+8      	; 0x4126 <__divmodhi4_neg2>
    411e:	e5 df       	rcall	.-54     	; 0x40ea <__udivmodhi4>
    4120:	06 d0       	rcall	.+12     	; 0x412e <__divmodhi4_neg1>
    4122:	00 20       	and	r0, r0
    4124:	1a f4       	brpl	.+6      	; 0x412c <__divmodhi4_exit>

00004126 <__divmodhi4_neg2>:
    4126:	70 95       	com	r23
    4128:	61 95       	neg	r22
    412a:	7f 4f       	sbci	r23, 0xFF	; 255

0000412c <__divmodhi4_exit>:
    412c:	08 95       	ret

0000412e <__divmodhi4_neg1>:
    412e:	f6 f7       	brtc	.-4      	; 0x412c <__divmodhi4_exit>
    4130:	90 95       	com	r25
    4132:	81 95       	neg	r24
    4134:	9f 4f       	sbci	r25, 0xFF	; 255
    4136:	08 95       	ret

00004138 <__divmodsi4>:
    4138:	97 fb       	bst	r25, 7
    413a:	09 2e       	mov	r0, r25
    413c:	05 26       	eor	r0, r21
    413e:	0e d0       	rcall	.+28     	; 0x415c <__divmodsi4_neg1>
    4140:	57 fd       	sbrc	r21, 7
    4142:	04 d0       	rcall	.+8      	; 0x414c <__divmodsi4_neg2>
    4144:	14 d0       	rcall	.+40     	; 0x416e <__udivmodsi4>
    4146:	0a d0       	rcall	.+20     	; 0x415c <__divmodsi4_neg1>
    4148:	00 1c       	adc	r0, r0
    414a:	38 f4       	brcc	.+14     	; 0x415a <__divmodsi4_exit>

0000414c <__divmodsi4_neg2>:
    414c:	50 95       	com	r21
    414e:	40 95       	com	r20
    4150:	30 95       	com	r19
    4152:	21 95       	neg	r18
    4154:	3f 4f       	sbci	r19, 0xFF	; 255
    4156:	4f 4f       	sbci	r20, 0xFF	; 255
    4158:	5f 4f       	sbci	r21, 0xFF	; 255

0000415a <__divmodsi4_exit>:
    415a:	08 95       	ret

0000415c <__divmodsi4_neg1>:
    415c:	f6 f7       	brtc	.-4      	; 0x415a <__divmodsi4_exit>
    415e:	90 95       	com	r25
    4160:	80 95       	com	r24
    4162:	70 95       	com	r23
    4164:	61 95       	neg	r22
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	8f 4f       	sbci	r24, 0xFF	; 255
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	08 95       	ret

0000416e <__udivmodsi4>:
    416e:	a1 e2       	ldi	r26, 0x21	; 33
    4170:	1a 2e       	mov	r1, r26
    4172:	aa 1b       	sub	r26, r26
    4174:	bb 1b       	sub	r27, r27
    4176:	fd 01       	movw	r30, r26
    4178:	0d c0       	rjmp	.+26     	; 0x4194 <__udivmodsi4_ep>

0000417a <__udivmodsi4_loop>:
    417a:	aa 1f       	adc	r26, r26
    417c:	bb 1f       	adc	r27, r27
    417e:	ee 1f       	adc	r30, r30
    4180:	ff 1f       	adc	r31, r31
    4182:	a2 17       	cp	r26, r18
    4184:	b3 07       	cpc	r27, r19
    4186:	e4 07       	cpc	r30, r20
    4188:	f5 07       	cpc	r31, r21
    418a:	20 f0       	brcs	.+8      	; 0x4194 <__udivmodsi4_ep>
    418c:	a2 1b       	sub	r26, r18
    418e:	b3 0b       	sbc	r27, r19
    4190:	e4 0b       	sbc	r30, r20
    4192:	f5 0b       	sbc	r31, r21

00004194 <__udivmodsi4_ep>:
    4194:	66 1f       	adc	r22, r22
    4196:	77 1f       	adc	r23, r23
    4198:	88 1f       	adc	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	1a 94       	dec	r1
    419e:	69 f7       	brne	.-38     	; 0x417a <__udivmodsi4_loop>
    41a0:	60 95       	com	r22
    41a2:	70 95       	com	r23
    41a4:	80 95       	com	r24
    41a6:	90 95       	com	r25
    41a8:	9b 01       	movw	r18, r22
    41aa:	ac 01       	movw	r20, r24
    41ac:	bd 01       	movw	r22, r26
    41ae:	cf 01       	movw	r24, r30
    41b0:	08 95       	ret

000041b2 <__prologue_saves__>:
    41b2:	2f 92       	push	r2
    41b4:	3f 92       	push	r3
    41b6:	4f 92       	push	r4
    41b8:	5f 92       	push	r5
    41ba:	6f 92       	push	r6
    41bc:	7f 92       	push	r7
    41be:	8f 92       	push	r8
    41c0:	9f 92       	push	r9
    41c2:	af 92       	push	r10
    41c4:	bf 92       	push	r11
    41c6:	cf 92       	push	r12
    41c8:	df 92       	push	r13
    41ca:	ef 92       	push	r14
    41cc:	ff 92       	push	r15
    41ce:	0f 93       	push	r16
    41d0:	1f 93       	push	r17
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62
    41da:	ca 1b       	sub	r28, r26
    41dc:	db 0b       	sbc	r29, r27
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	19 94       	eijmp

000041ea <__epilogue_restores__>:
    41ea:	2a 88       	ldd	r2, Y+18	; 0x12
    41ec:	39 88       	ldd	r3, Y+17	; 0x11
    41ee:	48 88       	ldd	r4, Y+16	; 0x10
    41f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    41f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    41f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    41f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    41f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    41fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    41fc:	b9 84       	ldd	r11, Y+9	; 0x09
    41fe:	c8 84       	ldd	r12, Y+8	; 0x08
    4200:	df 80       	ldd	r13, Y+7	; 0x07
    4202:	ee 80       	ldd	r14, Y+6	; 0x06
    4204:	fd 80       	ldd	r15, Y+5	; 0x05
    4206:	0c 81       	ldd	r16, Y+4	; 0x04
    4208:	1b 81       	ldd	r17, Y+3	; 0x03
    420a:	aa 81       	ldd	r26, Y+2	; 0x02
    420c:	b9 81       	ldd	r27, Y+1	; 0x01
    420e:	ce 0f       	add	r28, r30
    4210:	d1 1d       	adc	r29, r1
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	ed 01       	movw	r28, r26
    421e:	08 95       	ret
    4220:	f5 d0       	rcall	.+490    	; 0x440c <__fp_pscA>
    4222:	58 f0       	brcs	.+22     	; 0x423a <__epilogue_restores__+0x50>
    4224:	80 e8       	ldi	r24, 0x80	; 128
    4226:	91 e0       	ldi	r25, 0x01	; 1
    4228:	09 f4       	brne	.+2      	; 0x422c <__epilogue_restores__+0x42>
    422a:	9e ef       	ldi	r25, 0xFE	; 254
    422c:	f6 d0       	rcall	.+492    	; 0x441a <__fp_pscB>
    422e:	28 f0       	brcs	.+10     	; 0x423a <__epilogue_restores__+0x50>
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	51 e0       	ldi	r21, 0x01	; 1
    4234:	59 f4       	brne	.+22     	; 0x424c <atan2+0xe>
    4236:	5e ef       	ldi	r21, 0xFE	; 254
    4238:	09 c0       	rjmp	.+18     	; 0x424c <atan2+0xe>
    423a:	c0 c0       	rjmp	.+384    	; 0x43bc <__fp_nan>
    423c:	28 c1       	rjmp	.+592    	; 0x448e <__fp_zero>

0000423e <atan2>:
    423e:	e9 2f       	mov	r30, r25
    4240:	e0 78       	andi	r30, 0x80	; 128
    4242:	03 d1       	rcall	.+518    	; 0x444a <__fp_split3>
    4244:	68 f3       	brcs	.-38     	; 0x4220 <__epilogue_restores__+0x36>
    4246:	09 2e       	mov	r0, r25
    4248:	05 2a       	or	r0, r21
    424a:	c1 f3       	breq	.-16     	; 0x423c <__epilogue_restores__+0x52>
    424c:	26 17       	cp	r18, r22
    424e:	37 07       	cpc	r19, r23
    4250:	48 07       	cpc	r20, r24
    4252:	59 07       	cpc	r21, r25
    4254:	38 f0       	brcs	.+14     	; 0x4264 <atan2+0x26>
    4256:	0e 2e       	mov	r0, r30
    4258:	07 f8       	bld	r0, 7
    425a:	e0 25       	eor	r30, r0
    425c:	69 f0       	breq	.+26     	; 0x4278 <atan2+0x3a>
    425e:	e0 25       	eor	r30, r0
    4260:	e0 64       	ori	r30, 0x40	; 64
    4262:	0a c0       	rjmp	.+20     	; 0x4278 <atan2+0x3a>
    4264:	ef 63       	ori	r30, 0x3F	; 63
    4266:	07 f8       	bld	r0, 7
    4268:	00 94       	com	r0
    426a:	07 fa       	bst	r0, 7
    426c:	db 01       	movw	r26, r22
    426e:	b9 01       	movw	r22, r18
    4270:	9d 01       	movw	r18, r26
    4272:	dc 01       	movw	r26, r24
    4274:	ca 01       	movw	r24, r20
    4276:	ad 01       	movw	r20, r26
    4278:	ef 93       	push	r30
    427a:	41 d0       	rcall	.+130    	; 0x42fe <__divsf3_pse>
    427c:	d5 d0       	rcall	.+426    	; 0x4428 <__fp_round>
    427e:	0a d0       	rcall	.+20     	; 0x4294 <atan>
    4280:	5f 91       	pop	r21
    4282:	55 23       	and	r21, r21
    4284:	31 f0       	breq	.+12     	; 0x4292 <atan2+0x54>
    4286:	2b ed       	ldi	r18, 0xDB	; 219
    4288:	3f e0       	ldi	r19, 0x0F	; 15
    428a:	49 e4       	ldi	r20, 0x49	; 73
    428c:	50 fd       	sbrc	r21, 0
    428e:	49 ec       	ldi	r20, 0xC9	; 201
    4290:	93 cb       	rjmp	.-2266   	; 0x39b8 <__addsf3>
    4292:	08 95       	ret

00004294 <atan>:
    4294:	df 93       	push	r29
    4296:	dd 27       	eor	r29, r29
    4298:	b9 2f       	mov	r27, r25
    429a:	bf 77       	andi	r27, 0x7F	; 127
    429c:	40 e8       	ldi	r20, 0x80	; 128
    429e:	5f e3       	ldi	r21, 0x3F	; 63
    42a0:	16 16       	cp	r1, r22
    42a2:	17 06       	cpc	r1, r23
    42a4:	48 07       	cpc	r20, r24
    42a6:	5b 07       	cpc	r21, r27
    42a8:	10 f4       	brcc	.+4      	; 0x42ae <atan+0x1a>
    42aa:	d9 2f       	mov	r29, r25
    42ac:	f7 d0       	rcall	.+494    	; 0x449c <inverse>
    42ae:	9f 93       	push	r25
    42b0:	8f 93       	push	r24
    42b2:	7f 93       	push	r23
    42b4:	6f 93       	push	r22
    42b6:	5a d1       	rcall	.+692    	; 0x456c <square>
    42b8:	e4 ee       	ldi	r30, 0xE4	; 228
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	82 d0       	rcall	.+260    	; 0x43c2 <__fp_powser>
    42be:	b4 d0       	rcall	.+360    	; 0x4428 <__fp_round>
    42c0:	2f 91       	pop	r18
    42c2:	3f 91       	pop	r19
    42c4:	4f 91       	pop	r20
    42c6:	5f 91       	pop	r21
    42c8:	fa d0       	rcall	.+500    	; 0x44be <__mulsf3x>
    42ca:	dd 23       	and	r29, r29
    42cc:	49 f0       	breq	.+18     	; 0x42e0 <atan+0x4c>
    42ce:	90 58       	subi	r25, 0x80	; 128
    42d0:	a2 ea       	ldi	r26, 0xA2	; 162
    42d2:	2a ed       	ldi	r18, 0xDA	; 218
    42d4:	3f e0       	ldi	r19, 0x0F	; 15
    42d6:	49 ec       	ldi	r20, 0xC9	; 201
    42d8:	5f e3       	ldi	r21, 0x3F	; 63
    42da:	d0 78       	andi	r29, 0x80	; 128
    42dc:	5d 27       	eor	r21, r29
    42de:	56 d1       	rcall	.+684    	; 0x458c <__addsf3x>
    42e0:	df 91       	pop	r29
    42e2:	a2 c0       	rjmp	.+324    	; 0x4428 <__fp_round>
    42e4:	9a d0       	rcall	.+308    	; 0x441a <__fp_pscB>
    42e6:	40 f0       	brcs	.+16     	; 0x42f8 <atan+0x64>
    42e8:	91 d0       	rcall	.+290    	; 0x440c <__fp_pscA>
    42ea:	30 f0       	brcs	.+12     	; 0x42f8 <atan+0x64>
    42ec:	21 f4       	brne	.+8      	; 0x42f6 <atan+0x62>
    42ee:	5f 3f       	cpi	r21, 0xFF	; 255
    42f0:	19 f0       	breq	.+6      	; 0x42f8 <atan+0x64>
    42f2:	5e c0       	rjmp	.+188    	; 0x43b0 <__fp_inf>
    42f4:	51 11       	cpse	r21, r1
    42f6:	cc c0       	rjmp	.+408    	; 0x4490 <__fp_szero>
    42f8:	61 c0       	rjmp	.+194    	; 0x43bc <__fp_nan>

000042fa <__divsf3x>:
    42fa:	a7 d0       	rcall	.+334    	; 0x444a <__fp_split3>
    42fc:	98 f3       	brcs	.-26     	; 0x42e4 <atan+0x50>

000042fe <__divsf3_pse>:
    42fe:	99 23       	and	r25, r25
    4300:	c9 f3       	breq	.-14     	; 0x42f4 <atan+0x60>
    4302:	55 23       	and	r21, r21
    4304:	b1 f3       	breq	.-20     	; 0x42f2 <atan+0x5e>
    4306:	95 1b       	sub	r25, r21
    4308:	55 0b       	sbc	r21, r21
    430a:	bb 27       	eor	r27, r27
    430c:	aa 27       	eor	r26, r26
    430e:	62 17       	cp	r22, r18
    4310:	73 07       	cpc	r23, r19
    4312:	84 07       	cpc	r24, r20
    4314:	38 f0       	brcs	.+14     	; 0x4324 <__divsf3_pse+0x26>
    4316:	9f 5f       	subi	r25, 0xFF	; 255
    4318:	5f 4f       	sbci	r21, 0xFF	; 255
    431a:	22 0f       	add	r18, r18
    431c:	33 1f       	adc	r19, r19
    431e:	44 1f       	adc	r20, r20
    4320:	aa 1f       	adc	r26, r26
    4322:	a9 f3       	breq	.-22     	; 0x430e <__divsf3_pse+0x10>
    4324:	33 d0       	rcall	.+102    	; 0x438c <__divsf3_pse+0x8e>
    4326:	0e 2e       	mov	r0, r30
    4328:	3a f0       	brmi	.+14     	; 0x4338 <__divsf3_pse+0x3a>
    432a:	e0 e8       	ldi	r30, 0x80	; 128
    432c:	30 d0       	rcall	.+96     	; 0x438e <__divsf3_pse+0x90>
    432e:	91 50       	subi	r25, 0x01	; 1
    4330:	50 40       	sbci	r21, 0x00	; 0
    4332:	e6 95       	lsr	r30
    4334:	00 1c       	adc	r0, r0
    4336:	ca f7       	brpl	.-14     	; 0x432a <__divsf3_pse+0x2c>
    4338:	29 d0       	rcall	.+82     	; 0x438c <__divsf3_pse+0x8e>
    433a:	fe 2f       	mov	r31, r30
    433c:	27 d0       	rcall	.+78     	; 0x438c <__divsf3_pse+0x8e>
    433e:	66 0f       	add	r22, r22
    4340:	77 1f       	adc	r23, r23
    4342:	88 1f       	adc	r24, r24
    4344:	bb 1f       	adc	r27, r27
    4346:	26 17       	cp	r18, r22
    4348:	37 07       	cpc	r19, r23
    434a:	48 07       	cpc	r20, r24
    434c:	ab 07       	cpc	r26, r27
    434e:	b0 e8       	ldi	r27, 0x80	; 128
    4350:	09 f0       	breq	.+2      	; 0x4354 <__divsf3_pse+0x56>
    4352:	bb 0b       	sbc	r27, r27
    4354:	80 2d       	mov	r24, r0
    4356:	bf 01       	movw	r22, r30
    4358:	ff 27       	eor	r31, r31
    435a:	93 58       	subi	r25, 0x83	; 131
    435c:	5f 4f       	sbci	r21, 0xFF	; 255
    435e:	2a f0       	brmi	.+10     	; 0x436a <__divsf3_pse+0x6c>
    4360:	9e 3f       	cpi	r25, 0xFE	; 254
    4362:	51 05       	cpc	r21, r1
    4364:	68 f0       	brcs	.+26     	; 0x4380 <__divsf3_pse+0x82>
    4366:	24 c0       	rjmp	.+72     	; 0x43b0 <__fp_inf>
    4368:	93 c0       	rjmp	.+294    	; 0x4490 <__fp_szero>
    436a:	5f 3f       	cpi	r21, 0xFF	; 255
    436c:	ec f3       	brlt	.-6      	; 0x4368 <__divsf3_pse+0x6a>
    436e:	98 3e       	cpi	r25, 0xE8	; 232
    4370:	dc f3       	brlt	.-10     	; 0x4368 <__divsf3_pse+0x6a>
    4372:	86 95       	lsr	r24
    4374:	77 95       	ror	r23
    4376:	67 95       	ror	r22
    4378:	b7 95       	ror	r27
    437a:	f7 95       	ror	r31
    437c:	9f 5f       	subi	r25, 0xFF	; 255
    437e:	c9 f7       	brne	.-14     	; 0x4372 <__divsf3_pse+0x74>
    4380:	88 0f       	add	r24, r24
    4382:	91 1d       	adc	r25, r1
    4384:	96 95       	lsr	r25
    4386:	87 95       	ror	r24
    4388:	97 f9       	bld	r25, 7
    438a:	08 95       	ret
    438c:	e1 e0       	ldi	r30, 0x01	; 1
    438e:	66 0f       	add	r22, r22
    4390:	77 1f       	adc	r23, r23
    4392:	88 1f       	adc	r24, r24
    4394:	bb 1f       	adc	r27, r27
    4396:	62 17       	cp	r22, r18
    4398:	73 07       	cpc	r23, r19
    439a:	84 07       	cpc	r24, r20
    439c:	ba 07       	cpc	r27, r26
    439e:	20 f0       	brcs	.+8      	; 0x43a8 <__divsf3_pse+0xaa>
    43a0:	62 1b       	sub	r22, r18
    43a2:	73 0b       	sbc	r23, r19
    43a4:	84 0b       	sbc	r24, r20
    43a6:	ba 0b       	sbc	r27, r26
    43a8:	ee 1f       	adc	r30, r30
    43aa:	88 f7       	brcc	.-30     	; 0x438e <__divsf3_pse+0x90>
    43ac:	e0 95       	com	r30
    43ae:	08 95       	ret

000043b0 <__fp_inf>:
    43b0:	97 f9       	bld	r25, 7
    43b2:	9f 67       	ori	r25, 0x7F	; 127
    43b4:	80 e8       	ldi	r24, 0x80	; 128
    43b6:	70 e0       	ldi	r23, 0x00	; 0
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	08 95       	ret

000043bc <__fp_nan>:
    43bc:	9f ef       	ldi	r25, 0xFF	; 255
    43be:	80 ec       	ldi	r24, 0xC0	; 192
    43c0:	08 95       	ret

000043c2 <__fp_powser>:
    43c2:	df 93       	push	r29
    43c4:	cf 93       	push	r28
    43c6:	1f 93       	push	r17
    43c8:	0f 93       	push	r16
    43ca:	ff 92       	push	r15
    43cc:	ef 92       	push	r14
    43ce:	df 92       	push	r13
    43d0:	7b 01       	movw	r14, r22
    43d2:	8c 01       	movw	r16, r24
    43d4:	68 94       	set
    43d6:	05 c0       	rjmp	.+10     	; 0x43e2 <__fp_powser+0x20>
    43d8:	da 2e       	mov	r13, r26
    43da:	ef 01       	movw	r28, r30
    43dc:	70 d0       	rcall	.+224    	; 0x44be <__mulsf3x>
    43de:	fe 01       	movw	r30, r28
    43e0:	e8 94       	clt
    43e2:	a5 91       	lpm	r26, Z+
    43e4:	25 91       	lpm	r18, Z+
    43e6:	35 91       	lpm	r19, Z+
    43e8:	45 91       	lpm	r20, Z+
    43ea:	55 91       	lpm	r21, Z+
    43ec:	ae f3       	brts	.-22     	; 0x43d8 <__fp_powser+0x16>
    43ee:	ef 01       	movw	r28, r30
    43f0:	cd d0       	rcall	.+410    	; 0x458c <__addsf3x>
    43f2:	fe 01       	movw	r30, r28
    43f4:	97 01       	movw	r18, r14
    43f6:	a8 01       	movw	r20, r16
    43f8:	da 94       	dec	r13
    43fa:	79 f7       	brne	.-34     	; 0x43da <__fp_powser+0x18>
    43fc:	df 90       	pop	r13
    43fe:	ef 90       	pop	r14
    4400:	ff 90       	pop	r15
    4402:	0f 91       	pop	r16
    4404:	1f 91       	pop	r17
    4406:	cf 91       	pop	r28
    4408:	df 91       	pop	r29
    440a:	08 95       	ret

0000440c <__fp_pscA>:
    440c:	00 24       	eor	r0, r0
    440e:	0a 94       	dec	r0
    4410:	16 16       	cp	r1, r22
    4412:	17 06       	cpc	r1, r23
    4414:	18 06       	cpc	r1, r24
    4416:	09 06       	cpc	r0, r25
    4418:	08 95       	ret

0000441a <__fp_pscB>:
    441a:	00 24       	eor	r0, r0
    441c:	0a 94       	dec	r0
    441e:	12 16       	cp	r1, r18
    4420:	13 06       	cpc	r1, r19
    4422:	14 06       	cpc	r1, r20
    4424:	05 06       	cpc	r0, r21
    4426:	08 95       	ret

00004428 <__fp_round>:
    4428:	09 2e       	mov	r0, r25
    442a:	03 94       	inc	r0
    442c:	00 0c       	add	r0, r0
    442e:	11 f4       	brne	.+4      	; 0x4434 <__fp_round+0xc>
    4430:	88 23       	and	r24, r24
    4432:	52 f0       	brmi	.+20     	; 0x4448 <__fp_round+0x20>
    4434:	bb 0f       	add	r27, r27
    4436:	40 f4       	brcc	.+16     	; 0x4448 <__fp_round+0x20>
    4438:	bf 2b       	or	r27, r31
    443a:	11 f4       	brne	.+4      	; 0x4440 <__fp_round+0x18>
    443c:	60 ff       	sbrs	r22, 0
    443e:	04 c0       	rjmp	.+8      	; 0x4448 <__fp_round+0x20>
    4440:	6f 5f       	subi	r22, 0xFF	; 255
    4442:	7f 4f       	sbci	r23, 0xFF	; 255
    4444:	8f 4f       	sbci	r24, 0xFF	; 255
    4446:	9f 4f       	sbci	r25, 0xFF	; 255
    4448:	08 95       	ret

0000444a <__fp_split3>:
    444a:	57 fd       	sbrc	r21, 7
    444c:	90 58       	subi	r25, 0x80	; 128
    444e:	44 0f       	add	r20, r20
    4450:	55 1f       	adc	r21, r21
    4452:	59 f0       	breq	.+22     	; 0x446a <__fp_splitA+0x10>
    4454:	5f 3f       	cpi	r21, 0xFF	; 255
    4456:	71 f0       	breq	.+28     	; 0x4474 <__fp_splitA+0x1a>
    4458:	47 95       	ror	r20

0000445a <__fp_splitA>:
    445a:	88 0f       	add	r24, r24
    445c:	97 fb       	bst	r25, 7
    445e:	99 1f       	adc	r25, r25
    4460:	61 f0       	breq	.+24     	; 0x447a <__fp_splitA+0x20>
    4462:	9f 3f       	cpi	r25, 0xFF	; 255
    4464:	79 f0       	breq	.+30     	; 0x4484 <__fp_splitA+0x2a>
    4466:	87 95       	ror	r24
    4468:	08 95       	ret
    446a:	12 16       	cp	r1, r18
    446c:	13 06       	cpc	r1, r19
    446e:	14 06       	cpc	r1, r20
    4470:	55 1f       	adc	r21, r21
    4472:	f2 cf       	rjmp	.-28     	; 0x4458 <__fp_split3+0xe>
    4474:	46 95       	lsr	r20
    4476:	f1 df       	rcall	.-30     	; 0x445a <__fp_splitA>
    4478:	08 c0       	rjmp	.+16     	; 0x448a <__fp_splitA+0x30>
    447a:	16 16       	cp	r1, r22
    447c:	17 06       	cpc	r1, r23
    447e:	18 06       	cpc	r1, r24
    4480:	99 1f       	adc	r25, r25
    4482:	f1 cf       	rjmp	.-30     	; 0x4466 <__fp_splitA+0xc>
    4484:	86 95       	lsr	r24
    4486:	71 05       	cpc	r23, r1
    4488:	61 05       	cpc	r22, r1
    448a:	08 94       	sec
    448c:	08 95       	ret

0000448e <__fp_zero>:
    448e:	e8 94       	clt

00004490 <__fp_szero>:
    4490:	bb 27       	eor	r27, r27
    4492:	66 27       	eor	r22, r22
    4494:	77 27       	eor	r23, r23
    4496:	cb 01       	movw	r24, r22
    4498:	97 f9       	bld	r25, 7
    449a:	08 95       	ret

0000449c <inverse>:
    449c:	9b 01       	movw	r18, r22
    449e:	ac 01       	movw	r20, r24
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	70 e0       	ldi	r23, 0x00	; 0
    44a4:	80 e8       	ldi	r24, 0x80	; 128
    44a6:	9f e3       	ldi	r25, 0x3F	; 63
    44a8:	c4 c0       	rjmp	.+392    	; 0x4632 <__divsf3>
    44aa:	b0 df       	rcall	.-160    	; 0x440c <__fp_pscA>
    44ac:	28 f0       	brcs	.+10     	; 0x44b8 <inverse+0x1c>
    44ae:	b5 df       	rcall	.-150    	; 0x441a <__fp_pscB>
    44b0:	18 f0       	brcs	.+6      	; 0x44b8 <inverse+0x1c>
    44b2:	95 23       	and	r25, r21
    44b4:	09 f0       	breq	.+2      	; 0x44b8 <inverse+0x1c>
    44b6:	7c cf       	rjmp	.-264    	; 0x43b0 <__fp_inf>
    44b8:	81 cf       	rjmp	.-254    	; 0x43bc <__fp_nan>
    44ba:	11 24       	eor	r1, r1
    44bc:	e9 cf       	rjmp	.-46     	; 0x4490 <__fp_szero>

000044be <__mulsf3x>:
    44be:	c5 df       	rcall	.-118    	; 0x444a <__fp_split3>
    44c0:	a0 f3       	brcs	.-24     	; 0x44aa <inverse+0xe>

000044c2 <__mulsf3_pse>:
    44c2:	95 9f       	mul	r25, r21
    44c4:	d1 f3       	breq	.-12     	; 0x44ba <inverse+0x1e>
    44c6:	95 0f       	add	r25, r21
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	55 1f       	adc	r21, r21
    44cc:	62 9f       	mul	r22, r18
    44ce:	f0 01       	movw	r30, r0
    44d0:	72 9f       	mul	r23, r18
    44d2:	bb 27       	eor	r27, r27
    44d4:	f0 0d       	add	r31, r0
    44d6:	b1 1d       	adc	r27, r1
    44d8:	63 9f       	mul	r22, r19
    44da:	aa 27       	eor	r26, r26
    44dc:	f0 0d       	add	r31, r0
    44de:	b1 1d       	adc	r27, r1
    44e0:	aa 1f       	adc	r26, r26
    44e2:	64 9f       	mul	r22, r20
    44e4:	66 27       	eor	r22, r22
    44e6:	b0 0d       	add	r27, r0
    44e8:	a1 1d       	adc	r26, r1
    44ea:	66 1f       	adc	r22, r22
    44ec:	82 9f       	mul	r24, r18
    44ee:	22 27       	eor	r18, r18
    44f0:	b0 0d       	add	r27, r0
    44f2:	a1 1d       	adc	r26, r1
    44f4:	62 1f       	adc	r22, r18
    44f6:	73 9f       	mul	r23, r19
    44f8:	b0 0d       	add	r27, r0
    44fa:	a1 1d       	adc	r26, r1
    44fc:	62 1f       	adc	r22, r18
    44fe:	83 9f       	mul	r24, r19
    4500:	a0 0d       	add	r26, r0
    4502:	61 1d       	adc	r22, r1
    4504:	22 1f       	adc	r18, r18
    4506:	74 9f       	mul	r23, r20
    4508:	33 27       	eor	r19, r19
    450a:	a0 0d       	add	r26, r0
    450c:	61 1d       	adc	r22, r1
    450e:	23 1f       	adc	r18, r19
    4510:	84 9f       	mul	r24, r20
    4512:	60 0d       	add	r22, r0
    4514:	21 1d       	adc	r18, r1
    4516:	82 2f       	mov	r24, r18
    4518:	76 2f       	mov	r23, r22
    451a:	6a 2f       	mov	r22, r26
    451c:	11 24       	eor	r1, r1
    451e:	9f 57       	subi	r25, 0x7F	; 127
    4520:	50 40       	sbci	r21, 0x00	; 0
    4522:	8a f0       	brmi	.+34     	; 0x4546 <__mulsf3_pse+0x84>
    4524:	e1 f0       	breq	.+56     	; 0x455e <__mulsf3_pse+0x9c>
    4526:	88 23       	and	r24, r24
    4528:	4a f0       	brmi	.+18     	; 0x453c <__mulsf3_pse+0x7a>
    452a:	ee 0f       	add	r30, r30
    452c:	ff 1f       	adc	r31, r31
    452e:	bb 1f       	adc	r27, r27
    4530:	66 1f       	adc	r22, r22
    4532:	77 1f       	adc	r23, r23
    4534:	88 1f       	adc	r24, r24
    4536:	91 50       	subi	r25, 0x01	; 1
    4538:	50 40       	sbci	r21, 0x00	; 0
    453a:	a9 f7       	brne	.-22     	; 0x4526 <__mulsf3_pse+0x64>
    453c:	9e 3f       	cpi	r25, 0xFE	; 254
    453e:	51 05       	cpc	r21, r1
    4540:	70 f0       	brcs	.+28     	; 0x455e <__mulsf3_pse+0x9c>
    4542:	36 cf       	rjmp	.-404    	; 0x43b0 <__fp_inf>
    4544:	a5 cf       	rjmp	.-182    	; 0x4490 <__fp_szero>
    4546:	5f 3f       	cpi	r21, 0xFF	; 255
    4548:	ec f3       	brlt	.-6      	; 0x4544 <__mulsf3_pse+0x82>
    454a:	98 3e       	cpi	r25, 0xE8	; 232
    454c:	dc f3       	brlt	.-10     	; 0x4544 <__mulsf3_pse+0x82>
    454e:	86 95       	lsr	r24
    4550:	77 95       	ror	r23
    4552:	67 95       	ror	r22
    4554:	b7 95       	ror	r27
    4556:	f7 95       	ror	r31
    4558:	e7 95       	ror	r30
    455a:	9f 5f       	subi	r25, 0xFF	; 255
    455c:	c1 f7       	brne	.-16     	; 0x454e <__mulsf3_pse+0x8c>
    455e:	fe 2b       	or	r31, r30
    4560:	88 0f       	add	r24, r24
    4562:	91 1d       	adc	r25, r1
    4564:	96 95       	lsr	r25
    4566:	87 95       	ror	r24
    4568:	97 f9       	bld	r25, 7
    456a:	08 95       	ret

0000456c <square>:
    456c:	9b 01       	movw	r18, r22
    456e:	ac 01       	movw	r20, r24
    4570:	50 ca       	rjmp	.-2912   	; 0x3a12 <__mulsf3>
    4572:	4c df       	rcall	.-360    	; 0x440c <__fp_pscA>
    4574:	30 f0       	brcs	.+12     	; 0x4582 <square+0x16>
    4576:	51 df       	rcall	.-350    	; 0x441a <__fp_pscB>
    4578:	20 f0       	brcs	.+8      	; 0x4582 <square+0x16>
    457a:	31 f4       	brne	.+12     	; 0x4588 <square+0x1c>
    457c:	9f 3f       	cpi	r25, 0xFF	; 255
    457e:	11 f4       	brne	.+4      	; 0x4584 <square+0x18>
    4580:	1e f4       	brtc	.+6      	; 0x4588 <square+0x1c>
    4582:	1c cf       	rjmp	.-456    	; 0x43bc <__fp_nan>
    4584:	0e f4       	brtc	.+2      	; 0x4588 <square+0x1c>
    4586:	e0 95       	com	r30
    4588:	e7 fb       	bst	r30, 7
    458a:	12 cf       	rjmp	.-476    	; 0x43b0 <__fp_inf>

0000458c <__addsf3x>:
    458c:	e9 2f       	mov	r30, r25
    458e:	5d df       	rcall	.-326    	; 0x444a <__fp_split3>
    4590:	80 f3       	brcs	.-32     	; 0x4572 <square+0x6>
    4592:	ba 17       	cp	r27, r26
    4594:	62 07       	cpc	r22, r18
    4596:	73 07       	cpc	r23, r19
    4598:	84 07       	cpc	r24, r20
    459a:	95 07       	cpc	r25, r21
    459c:	18 f0       	brcs	.+6      	; 0x45a4 <__addsf3x+0x18>
    459e:	71 f4       	brne	.+28     	; 0x45bc <__addsf3x+0x30>
    45a0:	9e f5       	brtc	.+102    	; 0x4608 <__addsf3x+0x7c>
    45a2:	75 cf       	rjmp	.-278    	; 0x448e <__fp_zero>
    45a4:	0e f4       	brtc	.+2      	; 0x45a8 <__addsf3x+0x1c>
    45a6:	e0 95       	com	r30
    45a8:	0b 2e       	mov	r0, r27
    45aa:	ba 2f       	mov	r27, r26
    45ac:	a0 2d       	mov	r26, r0
    45ae:	0b 01       	movw	r0, r22
    45b0:	b9 01       	movw	r22, r18
    45b2:	90 01       	movw	r18, r0
    45b4:	0c 01       	movw	r0, r24
    45b6:	ca 01       	movw	r24, r20
    45b8:	a0 01       	movw	r20, r0
    45ba:	11 24       	eor	r1, r1
    45bc:	ff 27       	eor	r31, r31
    45be:	59 1b       	sub	r21, r25
    45c0:	99 f0       	breq	.+38     	; 0x45e8 <__addsf3x+0x5c>
    45c2:	59 3f       	cpi	r21, 0xF9	; 249
    45c4:	50 f4       	brcc	.+20     	; 0x45da <__addsf3x+0x4e>
    45c6:	50 3e       	cpi	r21, 0xE0	; 224
    45c8:	68 f1       	brcs	.+90     	; 0x4624 <__addsf3x+0x98>
    45ca:	1a 16       	cp	r1, r26
    45cc:	f0 40       	sbci	r31, 0x00	; 0
    45ce:	a2 2f       	mov	r26, r18
    45d0:	23 2f       	mov	r18, r19
    45d2:	34 2f       	mov	r19, r20
    45d4:	44 27       	eor	r20, r20
    45d6:	58 5f       	subi	r21, 0xF8	; 248
    45d8:	f3 cf       	rjmp	.-26     	; 0x45c0 <__addsf3x+0x34>
    45da:	46 95       	lsr	r20
    45dc:	37 95       	ror	r19
    45de:	27 95       	ror	r18
    45e0:	a7 95       	ror	r26
    45e2:	f0 40       	sbci	r31, 0x00	; 0
    45e4:	53 95       	inc	r21
    45e6:	c9 f7       	brne	.-14     	; 0x45da <__addsf3x+0x4e>
    45e8:	7e f4       	brtc	.+30     	; 0x4608 <__addsf3x+0x7c>
    45ea:	1f 16       	cp	r1, r31
    45ec:	ba 0b       	sbc	r27, r26
    45ee:	62 0b       	sbc	r22, r18
    45f0:	73 0b       	sbc	r23, r19
    45f2:	84 0b       	sbc	r24, r20
    45f4:	ba f0       	brmi	.+46     	; 0x4624 <__addsf3x+0x98>
    45f6:	91 50       	subi	r25, 0x01	; 1
    45f8:	a1 f0       	breq	.+40     	; 0x4622 <__addsf3x+0x96>
    45fa:	ff 0f       	add	r31, r31
    45fc:	bb 1f       	adc	r27, r27
    45fe:	66 1f       	adc	r22, r22
    4600:	77 1f       	adc	r23, r23
    4602:	88 1f       	adc	r24, r24
    4604:	c2 f7       	brpl	.-16     	; 0x45f6 <__addsf3x+0x6a>
    4606:	0e c0       	rjmp	.+28     	; 0x4624 <__addsf3x+0x98>
    4608:	ba 0f       	add	r27, r26
    460a:	62 1f       	adc	r22, r18
    460c:	73 1f       	adc	r23, r19
    460e:	84 1f       	adc	r24, r20
    4610:	48 f4       	brcc	.+18     	; 0x4624 <__addsf3x+0x98>
    4612:	87 95       	ror	r24
    4614:	77 95       	ror	r23
    4616:	67 95       	ror	r22
    4618:	b7 95       	ror	r27
    461a:	f7 95       	ror	r31
    461c:	9e 3f       	cpi	r25, 0xFE	; 254
    461e:	08 f0       	brcs	.+2      	; 0x4622 <__addsf3x+0x96>
    4620:	b3 cf       	rjmp	.-154    	; 0x4588 <square+0x1c>
    4622:	93 95       	inc	r25
    4624:	88 0f       	add	r24, r24
    4626:	08 f0       	brcs	.+2      	; 0x462a <__addsf3x+0x9e>
    4628:	99 27       	eor	r25, r25
    462a:	ee 0f       	add	r30, r30
    462c:	97 95       	ror	r25
    462e:	87 95       	ror	r24
    4630:	08 95       	ret

00004632 <__divsf3>:
    4632:	63 de       	rcall	.-826    	; 0x42fa <__divsf3x>
    4634:	f9 ce       	rjmp	.-526    	; 0x4428 <__fp_round>

00004636 <_exit>:
    4636:	ff cf       	rjmp	.-2      	; 0x4636 <_exit>
