
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  00005396  0000542a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012f  00800328  00800328  00005552  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  00005554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  0000781c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000eb9  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003db1  00000000  00000000  00008f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014b1  00000000  00000000  0000cd07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000485d  00000000  00000000  0000e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  00012a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e5a  00000000  00000000  00013028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000016dc  00000000  00000000  00013e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000106  00000000  00000000  0001555e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000288  00000000  00000000  00015664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_32>
      84:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_42>
      ac:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	a9 15       	cp	r26, r9
      e6:	8d 15       	cp	r24, r13
      e8:	59 15       	cp	r21, r9
      ea:	40 15       	cp	r20, r0
      ec:	13 15       	cp	r17, r3
      ee:	06 15       	cp	r16, r6
      f0:	dd 14       	cp	r13, r13
      f2:	b8 14       	cp	r11, r8
      f4:	8b 14       	cp	r8, r11
      f6:	71 14       	cp	r7, r1
      f8:	c5 10       	cpse	r12, r5
      fa:	c5 10       	cpse	r12, r5
      fc:	c5 10       	cpse	r12, r5
      fe:	c5 10       	cpse	r12, r5
     100:	c5 10       	cpse	r12, r5
     102:	c5 10       	cpse	r12, r5
     104:	66 14       	cp	r6, r6
     106:	5b 14       	cp	r5, r11
     108:	c5 10       	cpse	r12, r5
     10a:	c5 10       	cpse	r12, r5
     10c:	c5 10       	cpse	r12, r5
     10e:	c5 10       	cpse	r12, r5
     110:	c5 10       	cpse	r12, r5
     112:	c5 10       	cpse	r12, r5
     114:	c5 10       	cpse	r12, r5
     116:	c5 10       	cpse	r12, r5
     118:	c5 10       	cpse	r12, r5
     11a:	c5 10       	cpse	r12, r5
     11c:	c5 10       	cpse	r12, r5
     11e:	c5 10       	cpse	r12, r5
     120:	8b 14       	cp	r8, r11
     122:	59 15       	cp	r21, r9
     124:	58 14       	cp	r5, r8
     126:	46 14       	cp	r4, r6
     128:	c5 10       	cpse	r12, r5
     12a:	c5 10       	cpse	r12, r5
     12c:	c5 10       	cpse	r12, r5
     12e:	c5 10       	cpse	r12, r5
     130:	c5 10       	cpse	r12, r5
     132:	c5 10       	cpse	r12, r5
     134:	c5 10       	cpse	r12, r5
     136:	c5 10       	cpse	r12, r5
     138:	c5 10       	cpse	r12, r5
     13a:	c5 10       	cpse	r12, r5
     13c:	c5 10       	cpse	r12, r5
     13e:	c5 10       	cpse	r12, r5
     140:	13 15       	cp	r17, r3
     142:	dd 14       	cp	r13, r13
     144:	c5 10       	cpse	r12, r5
     146:	c5 10       	cpse	r12, r5
     148:	a9 15       	cp	r26, r9
     14a:	06 15       	cp	r16, r6
     14c:	34 14       	cp	r3, r4
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e6 e9       	ldi	r30, 0x96	; 150
     194:	f3 e5       	ldi	r31, 0x53	; 83
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a8 32       	cpi	r26, 0x28	; 40
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a8 e2       	ldi	r26, 0x28	; 40
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a7 35       	cpi	r26, 0x57	; 87
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 37 0a 	call	0x146e	; 0x146e <main>
     1b6:	0c 94 ca 29 	jmp	0x5394	; 0x5394 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <myAbs>:

unsigned int myAbs(int i) {
	if(i < 0) {
		return i*(-1);
	} else {
		return -i;
     1be:	22 27       	eor	r18, r18
     1c0:	33 27       	eor	r19, r19
     1c2:	28 1b       	sub	r18, r24
     1c4:	39 0b       	sbc	r19, r25
	}
}
     1c6:	c9 01       	movw	r24, r18
     1c8:	08 95       	ret

000001ca <initPeripherals>:

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     1ca:	f8 94       	cli

	initPortsIO();
     1cc:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     1d0:	80 91 7a 00 	lds	r24, 0x007A
     1d4:	86 60       	ori	r24, 0x06	; 6
     1d6:	80 93 7a 00 	sts	0x007A, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     1da:	80 91 7c 00 	lds	r24, 0x007C
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     1e4:	80 91 7a 00 	lds	r24, 0x007A
     1e8:	80 62       	ori	r24, 0x20	; 32
     1ea:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     1ee:	80 91 7b 00 	lds	r24, 0x007B
     1f2:	88 7f       	andi	r24, 0xF8	; 248
     1f4:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     1f8:	80 91 7a 00 	lds	r24, 0x007A
     1fc:	88 60       	ori	r24, 0x08	; 8
     1fe:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     202:	80 91 7a 00 	lds	r24, 0x007A
     206:	80 68       	ori	r24, 0x80	; 128
     208:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     20c:	80 91 7a 00 	lds	r24, 0x007A
     210:	80 64       	ori	r24, 0x40	; 64
     212:	80 93 7a 00 	sts	0x007A, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     216:	80 91 90 00 	lds	r24, 0x0090
     21a:	83 68       	ori	r24, 0x83	; 131
     21c:	80 93 90 00 	sts	0x0090, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     220:	80 91 90 00 	lds	r24, 0x0090
     224:	83 60       	ori	r24, 0x03	; 3
     226:	80 93 90 00 	sts	0x0090, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     22a:	80 91 91 00 	lds	r24, 0x0091
     22e:	8b 60       	ori	r24, 0x0B	; 11
     230:	80 93 91 00 	sts	0x0091, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     234:	80 91 de 03 	lds	r24, 0x03DE
     238:	90 91 df 03 	lds	r25, 0x03DF
     23c:	90 93 99 00 	sts	0x0099, r25
     240:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     244:	10 92 9b 00 	sts	0x009B, r1
     248:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     24c:	80 91 71 00 	lds	r24, 0x0071
     250:	81 60       	ori	r24, 0x01	; 1
     252:	80 93 71 00 	sts	0x0071, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     256:	80 91 90 00 	lds	r24, 0x0090
     25a:	8f 75       	andi	r24, 0x5F	; 95
     25c:	80 93 90 00 	sts	0x0090, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     260:	8e b1       	in	r24, 0x0e	; 14
     262:	87 7e       	andi	r24, 0xE7	; 231
     264:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     266:	80 91 a0 00 	lds	r24, 0x00A0
     26a:	83 68       	ori	r24, 0x83	; 131
     26c:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     270:	80 91 a1 00 	lds	r24, 0x00A1
     274:	8b 60       	ori	r24, 0x0B	; 11
     276:	80 93 a1 00 	sts	0x00A1, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     27a:	80 91 e0 03 	lds	r24, 0x03E0
     27e:	90 91 e1 03 	lds	r25, 0x03E1
     282:	90 93 a9 00 	sts	0x00A9, r25
     286:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     28a:	10 92 ab 00 	sts	0x00AB, r1
     28e:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     292:	80 91 72 00 	lds	r24, 0x0072
     296:	81 60       	ori	r24, 0x01	; 1
     298:	80 93 72 00 	sts	0x0072, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     29c:	80 91 a0 00 	lds	r24, 0x00A0
     2a0:	8f 75       	andi	r24, 0x5F	; 95
     2a2:	80 93 a0 00 	sts	0x00A0, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     2a6:	80 91 02 01 	lds	r24, 0x0102
     2aa:	87 7e       	andi	r24, 0xE7	; 231
     2ac:	80 93 02 01 	sts	0x0102, r24
	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
	initSPI();
     2b0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <initSPI>
	mirf_init();
     2b4:	0e 94 36 18 	call	0x306c	; 0x306c <mirf_init>
	initUsart();
     2b8:	0e 94 2c 20 	call	0x4058	; 0x4058 <initUsart>
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     2bc:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     2c0:	80 91 19 02 	lds	r24, 0x0219
     2c4:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     2c8:	88 23       	and	r24, r24
     2ca:	61 f4       	brne	.+24     	; 0x2e4 <initPeripherals+0x11a>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     2cc:	86 e1       	ldi	r24, 0x16	; 22
     2ce:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     2d2:	85 e4       	ldi	r24, 0x45	; 69
     2d4:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     2d8:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
	initPwm();
	initSPI();
	mirf_init();
	initUsart();
	initI2C();
	e_init_remote_control();
     2dc:	0e 94 46 19 	call	0x328c	; 0x328c <e_init_remote_control>

	sei();			// enable global interrupts
     2e0:	78 94       	sei

	
}
     2e2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     2e4:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     2e8:	86 ea       	ldi	r24, 0xA6	; 166
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	90 93 1a 02 	sts	0x021A, r25
     2f0:	80 93 19 02 	sts	0x0219, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     2f4:	86 ea       	ldi	r24, 0xA6	; 166
     2f6:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     2fa:	88 23       	and	r24, r24
     2fc:	41 f5       	brne	.+80     	; 0x34e <initPeripherals+0x184>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     2fe:	8d e2       	ldi	r24, 0x2D	; 45
     300:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     304:	88 e0       	ldi	r24, 0x08	; 8
     306:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     30a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     30e:	80 91 19 02 	lds	r24, 0x0219
     312:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     316:	88 23       	and	r24, r24
     318:	d1 f4       	brne	.+52     	; 0x34e <initPeripherals+0x184>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     31a:	81 e3       	ldi	r24, 0x31	; 49
     31c:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     326:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     32a:	80 91 19 02 	lds	r24, 0x0219
     32e:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     332:	88 23       	and	r24, r24
     334:	61 f4       	brne	.+24     	; 0x34e <initPeripherals+0x184>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     336:	8c e2       	ldi	r24, 0x2C	; 44
     338:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     33c:	89 e0       	ldi	r24, 0x09	; 9
     33e:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     342:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 05 04 	sts	0x0405, r24
     34c:	c7 cf       	rjmp	.-114    	; 0x2dc <initPeripherals+0x112>
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     34e:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	80 93 05 04 	sts	0x0405, r24
	initPwm();
	initSPI();
	mirf_init();
	initUsart();
	initI2C();
	e_init_remote_control();
     358:	0e 94 46 19 	call	0x328c	; 0x328c <e_init_remote_control>

	sei();			// enable global interrupts
     35c:	78 94       	sei

	
}
     35e:	08 95       	ret

00000360 <sleep.clone.0>:

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
     360:	80 91 68 00 	lds	r24, 0x0068
     364:	8d 7f       	andi	r24, 0xFD	; 253
     366:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
     36a:	80 91 6c 00 	lds	r24, 0x006C
     36e:	8f 77       	andi	r24, 0x7F	; 127
     370:	80 93 6c 00 	sts	0x006C, r24

	// disable adc
	ADCSRA = 0x00;	// disable interrupt and turn off adc
     374:	10 92 7a 00 	sts	0x007A, r1

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
     378:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
     37c:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
     380:	10 92 71 00 	sts	0x0071, r1
	TCCR4A = 0x00;
     384:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
     388:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
     38c:	10 92 72 00 	sts	0x0072, r1

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
     390:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
     394:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
     398:	0e 94 41 20 	call	0x4082	; 0x4082 <closeUsart>
	closeSPI();
     39c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <closeSPI>
	i2c_close();
     3a0:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <i2c_close>

	// set port pins
	initPortsIO();
     3a4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <initPortsIO>
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7);
	PORTC &= ~(1 << 7); // sleep pin
     3a8:	47 98       	cbi	0x08, 7	; 8
	//PORTB &= ~(1 << 4);	// radio CE pin
	PORTD = 0x00;	// I2C and uart pins to 0
     3aa:	1b b8       	out	0x0b, r1	; 11

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
     3b2:	80 91 b0 00 	lds	r24, 0x00B0
     3b6:	8d 7f       	andi	r24, 0xFD	; 253
     3b8:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
     3bc:	80 91 b1 00 	lds	r24, 0x00B1
     3c0:	87 60       	ori	r24, 0x07	; 7
     3c2:	80 93 b1 00 	sts	0x00B1, r24

	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
     3c6:	83 b7       	in	r24, 0x33	; 51
     3c8:	85 60       	ori	r24, 0x05	; 5
     3ca:	83 bf       	out	0x33, r24	; 51
     3cc:	88 e0       	ldi	r24, 0x08	; 8
     3ce:	97 e0       	ldi	r25, 0x07	; 7
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
     3d0:	88 95       	sleep
     3d2:	01 97       	sbiw	r24, 0x01	; 1
	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <sleep.clone.0+0x70>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
     3d6:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
     3d8:	80 91 b1 00 	lds	r24, 0x00B1
     3dc:	88 7f       	andi	r24, 0xF8	; 248
     3de:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
     3e2:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
     3e6:	80 91 b0 00 	lds	r24, 0x00B0
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	80 93 12 02 	sts	0x0212, r24
	pwm_green = 255;
     3f6:	80 93 13 02 	sts	0x0213, r24
	pwm_blue = 255;
     3fa:	80 93 14 02 	sts	0x0214, r24
	pwm_right = 0;
     3fe:	10 92 df 03 	sts	0x03DF, r1
     402:	10 92 de 03 	sts	0x03DE, r1
	pwm_left = 0;
     406:	10 92 e1 03 	sts	0x03E1, r1
     40a:	10 92 e0 03 	sts	0x03E0, r1
	initPeripherals();
     40e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <initPeripherals>

}
     412:	08 95       	ret

00000414 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1

}
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <sleep>:

void sleep(unsigned char seconds) {
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
     42c:	9e e1       	ldi	r25, 0x1E	; 30
     42e:	89 9f       	mul	r24, r25
     430:	e0 01       	movw	r28, r0
     432:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
     434:	80 91 68 00 	lds	r24, 0x0068
     438:	8d 7f       	andi	r24, 0xFD	; 253
     43a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
     43e:	80 91 6c 00 	lds	r24, 0x006C
     442:	8f 77       	andi	r24, 0x7F	; 127
     444:	80 93 6c 00 	sts	0x006C, r24

	// disable adc
	ADCSRA = 0x00;	// disable interrupt and turn off adc
     448:	10 92 7a 00 	sts	0x007A, r1

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
     44c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
     450:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
     454:	10 92 71 00 	sts	0x0071, r1
	TCCR4A = 0x00;
     458:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
     45c:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
     460:	10 92 72 00 	sts	0x0072, r1

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
     464:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
     468:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
     46c:	0e 94 41 20 	call	0x4082	; 0x4082 <closeUsart>
	closeSPI();
     470:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <closeSPI>
	i2c_close();
     474:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <i2c_close>

	// set port pins
	initPortsIO();
     478:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <initPortsIO>
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7);
	PORTC &= ~(1 << 7); // sleep pin
     47c:	47 98       	cbi	0x08, 7	; 8
	//PORTB &= ~(1 << 4);	// radio CE pin
	PORTD = 0x00;	// I2C and uart pins to 0
     47e:	1b b8       	out	0x0b, r1	; 11

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
     486:	80 91 b0 00 	lds	r24, 0x00B0
     48a:	8d 7f       	andi	r24, 0xFD	; 253
     48c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
     490:	80 91 b1 00 	lds	r24, 0x00B1
     494:	87 60       	ori	r24, 0x07	; 7
     496:	80 93 b1 00 	sts	0x00B1, r24

	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
     49a:	83 b7       	in	r24, 0x33	; 51
     49c:	85 60       	ori	r24, 0x05	; 5
     49e:	83 bf       	out	0x33, r24	; 51
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
     4a0:	20 97       	sbiw	r28, 0x00	; 0
     4a2:	19 f0       	breq	.+6      	; 0x4aa <sleep+0x82>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
     4a4:	88 95       	sleep
		pause--;
     4a6:	21 97       	sbiw	r28, 0x01	; 1
	// set extendend standby mode and enable it
	//SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
	SMCR |= (1 << SM1) | (1 << SE);
	//SMCR |= (1 << SE);	// idle mode

	while(pause > 0) {	
     4a8:	e9 f7       	brne	.-6      	; 0x4a4 <sleep+0x7c>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
     4aa:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
     4ac:	80 91 b1 00 	lds	r24, 0x00B1
     4b0:	88 7f       	andi	r24, 0xF8	; 248
     4b2:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
     4b6:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
     4ba:	80 91 b0 00 	lds	r24, 0x00B0
     4be:	82 60       	ori	r24, 0x02	; 2
     4c0:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	80 93 12 02 	sts	0x0212, r24
	pwm_green = 255;
     4ca:	80 93 13 02 	sts	0x0213, r24
	pwm_blue = 255;
     4ce:	80 93 14 02 	sts	0x0214, r24
	pwm_right = 0;
     4d2:	10 92 df 03 	sts	0x03DF, r1
     4d6:	10 92 de 03 	sts	0x03DE, r1
	pwm_left = 0;
     4da:	10 92 e1 03 	sts	0x03E1, r1
     4de:	10 92 e0 03 	sts	0x03E0, r1
	initPeripherals();
     4e2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <initPeripherals>

}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     4ec:	ea e7       	ldi	r30, 0x7A	; 122
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	86 60       	ori	r24, 0x06	; 6
     4f4:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     4f6:	ac e7       	ldi	r26, 0x7C	; 124
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	8c 91       	ld	r24, X
     4fc:	80 64       	ori	r24, 0x40	; 64
     4fe:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     500:	80 81       	ld	r24, Z
     502:	80 62       	ori	r24, 0x20	; 32
     504:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     506:	ab e7       	ldi	r26, 0x7B	; 123
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	8c 91       	ld	r24, X
     50c:	88 7f       	andi	r24, 0xF8	; 248
     50e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     510:	80 81       	ld	r24, Z
     512:	88 60       	ori	r24, 0x08	; 8
     514:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     516:	80 81       	ld	r24, Z
     518:	80 68       	ori	r24, 0x80	; 128
     51a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     51c:	80 81       	ld	r24, Z
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	80 83       	st	Z, r24

}
     522:	08 95       	ret

00000524 <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;		// this variable is used to have basic delays based on the adc interrupt timing (one interrupt every 104 us)
     540:	80 91 22 04 	lds	r24, 0x0422
     544:	90 91 23 04 	lds	r25, 0x0423
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 23 04 	sts	0x0423, r25
     54e:	80 93 22 04 	sts	0x0422, r24

	int value = ADCL;			// must be read first!!
     552:	20 91 78 00 	lds	r18, 0x0078
     556:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     558:	40 91 79 00 	lds	r20, 0x0079
     55c:	94 2f       	mov	r25, r20
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	28 2b       	or	r18, r24
     562:	39 2b       	or	r19, r25

	// save the last data
	switch(adcSaveDataTo) {
     564:	80 91 93 03 	lds	r24, 0x0393
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	09 f4       	brne	.+2      	; 0x56e <__vector_29+0x4a>
     56c:	1a c1       	rjmp	.+564    	; 0x7a2 <__vector_29+0x27e>
     56e:	83 30       	cpi	r24, 0x03	; 3
     570:	08 f4       	brcc	.+2      	; 0x574 <__vector_29+0x50>
     572:	44 c0       	rjmp	.+136    	; 0x5fc <__vector_29+0xd8>
     574:	83 30       	cpi	r24, 0x03	; 3
     576:	09 f4       	brne	.+2      	; 0x57a <__vector_29+0x56>
     578:	07 c1       	rjmp	.+526    	; 0x788 <__vector_29+0x264>
     57a:	84 30       	cpi	r24, 0x04	; 4
     57c:	09 f4       	brne	.+2      	; 0x580 <__vector_29+0x5c>
     57e:	d1 c0       	rjmp	.+418    	; 0x722 <__vector_29+0x1fe>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
     580:	80 91 94 03 	lds	r24, 0x0394
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	09 f4       	brne	.+2      	; 0x58a <__vector_29+0x66>
     588:	b8 c0       	rjmp	.+368    	; 0x6fa <__vector_29+0x1d6>
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	08 f0       	brcs	.+2      	; 0x590 <__vector_29+0x6c>
     58e:	52 c0       	rjmp	.+164    	; 0x634 <__vector_29+0x110>
     590:	88 23       	and	r24, r24
     592:	09 f0       	breq	.+2      	; 0x596 <__vector_29+0x72>
     594:	8d c0       	rjmp	.+282    	; 0x6b0 <__vector_29+0x18c>

		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
     596:	80 91 2e 03 	lds	r24, 0x032E
     59a:	86 95       	lsr	r24
     59c:	80 93 2d 03 	sts	0x032D, r24
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
     5a0:	80 91 95 03 	lds	r24, 0x0395
     5a4:	88 23       	and	r24, r24
     5a6:	09 f0       	breq	.+2      	; 0x5aa <__vector_29+0x86>
     5a8:	3a c1       	rjmp	.+628    	; 0x81e <__vector_29+0x2fa>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 93 03 	sts	0x0393, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 94 03 	sts	0x0394, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     5b6:	90 91 2d 03 	lds	r25, 0x032D
     5ba:	98 30       	cpi	r25, 0x08	; 8
     5bc:	08 f0       	brcs	.+2      	; 0x5c0 <__vector_29+0x9c>
     5be:	6d c0       	rjmp	.+218    	; 0x69a <__vector_29+0x176>
		ADCSRB &= ~(1 << MUX5);
     5c0:	90 91 7b 00 	lds	r25, 0x007B
     5c4:	97 7f       	andi	r25, 0xF7	; 247
     5c6:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
     5ca:	90 91 2d 03 	lds	r25, 0x032D
     5ce:	90 5c       	subi	r25, 0xC0	; 192
     5d0:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	21 f4       	brne	.+8      	; 0x5e0 <__vector_29+0xbc>
		PORTJ &= 0xF0;
		PORTA = 0x00;
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
     5de:	12 b8       	out	0x02, r1	; 2

	}

//	PORTB |= (1 << 7);

}
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	4f 91       	pop	r20
     5ea:	3f 91       	pop	r19
     5ec:	2f 91       	pop	r18
     5ee:	0f 90       	pop	r0
     5f0:	0b be       	out	0x3b, r0	; 59
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     5fc:	88 23       	and	r24, r24
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_29+0xde>
     600:	68 c0       	rjmp	.+208    	; 0x6d2 <__vector_29+0x1ae>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     602:	80 91 2e 03 	lds	r24, 0x032E
     606:	8e 30       	cpi	r24, 0x0E	; 14
     608:	09 f4       	brne	.+2      	; 0x60c <__vector_29+0xe8>
     60a:	1b c1       	rjmp	.+566    	; 0x842 <__vector_29+0x31e>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     60c:	e8 2f       	mov	r30, r24
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ed 5c       	subi	r30, 0xCD	; 205
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	31 83       	std	Z+1, r19	; 0x01
     61a:	20 83       	st	Z, r18
			}
			currentProx++;
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 2e 03 	sts	0x032E, r24
			if(currentProx > 23) {
     622:	88 31       	cpi	r24, 0x18	; 24
     624:	08 f4       	brcc	.+2      	; 0x628 <__vector_29+0x104>
     626:	ac cf       	rjmp	.-168    	; 0x580 <__vector_29+0x5c>
				currentProx = 0;
     628:	10 92 2e 03 	sts	0x032E, r1
				updateProx = 1;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 9c 03 	sts	0x039C, r24
     632:	a6 cf       	rjmp	.-180    	; 0x580 <__vector_29+0x5c>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
     634:	83 30       	cpi	r24, 0x03	; 3
     636:	09 f4       	brne	.+2      	; 0x63a <__vector_29+0x116>
     638:	93 c0       	rjmp	.+294    	; 0x760 <__vector_29+0x23c>
     63a:	84 30       	cpi	r24, 0x04	; 4
     63c:	09 f0       	breq	.+2      	; 0x640 <__vector_29+0x11c>
     63e:	bb cf       	rjmp	.-138    	; 0x5b6 <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
     640:	90 91 30 03 	lds	r25, 0x0330
     644:	90 93 2d 03 	sts	0x032D, r25
			rightChannelPhase = rightMotorPhase;	
     648:	90 91 31 03 	lds	r25, 0x0331
     64c:	90 93 95 03 	sts	0x0395, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     650:	90 91 96 03 	lds	r25, 0x0396
     654:	99 23       	and	r25, r25
     656:	09 f0       	breq	.+2      	; 0x65a <__vector_29+0x136>
     658:	dc c0       	rjmp	.+440    	; 0x812 <__vector_29+0x2ee>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	80 93 93 03 	sts	0x0393, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
     660:	10 92 94 03 	sts	0x0394, r1

			if(currentProx==14 && measBattery==1) {
     664:	20 91 2e 03 	lds	r18, 0x032E
     668:	2e 30       	cpi	r18, 0x0E	; 14
     66a:	09 f4       	brne	.+2      	; 0x66e <__vector_29+0x14a>
     66c:	e4 c0       	rjmp	.+456    	; 0x836 <__vector_29+0x312>
				measBattery=2;
				PORTC |= (1 << 6);	// sense enable on
			}

			if(currentProx & 0x01) {	// if active phase
     66e:	82 2f       	mov	r24, r18
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	20 ff       	sbrs	r18, 0
     674:	c5 c0       	rjmp	.+394    	; 0x800 <__vector_29+0x2dc>
				if(currentProx < 16) {
     676:	20 31       	cpi	r18, 0x10	; 16
     678:	08 f0       	brcs	.+2      	; 0x67c <__vector_29+0x158>
     67a:	b2 c0       	rjmp	.+356    	; 0x7e0 <__vector_29+0x2bc>
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     67c:	2e 30       	cpi	r18, 0x0E	; 14
     67e:	09 f4       	brne	.+2      	; 0x682 <__vector_29+0x15e>
     680:	fe c0       	rjmp	.+508    	; 0x87e <__vector_29+0x35a>
						measBattery=2;
						PORTC |= (1 << 6);	// sense enable on
					} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
     682:	26 95       	lsr	r18
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <__vector_29+0x16a>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	2a 95       	dec	r18
     690:	e2 f7       	brpl	.-8      	; 0x68a <__vector_29+0x166>
     692:	82 b9       	out	0x02, r24	; 2
     694:	80 91 94 03 	lds	r24, 0x0394
     698:	8e cf       	rjmp	.-228    	; 0x5b6 <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     69a:	90 91 7b 00 	lds	r25, 0x007B
     69e:	98 60       	ori	r25, 0x08	; 8
     6a0:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
     6a4:	90 91 2d 03 	lds	r25, 0x032D
     6a8:	98 5c       	subi	r25, 0xC8	; 200
     6aa:	90 93 7c 00 	sts	0x007C, r25
     6ae:	92 cf       	rjmp	.-220    	; 0x5d4 <__vector_29+0xb0>
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_29+0x192>
     6b4:	80 cf       	rjmp	.-256    	; 0x5b6 <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
     6b6:	80 91 2f 03 	lds	r24, 0x032F
     6ba:	80 93 2d 03 	sts	0x032D, r24
			leftChannelPhase = leftMotorPhase;
     6be:	80 91 32 03 	lds	r24, 0x0332
     6c2:	80 93 96 03 	sts	0x0396, r24
			adcSaveDataTo = SAVE_TO_PROX;
     6c6:	10 92 93 03 	sts	0x0393, r1
			adcSamplingState = 2;
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	80 93 94 03 	sts	0x0394, r24
			break;
     6d0:	72 cf       	rjmp	.-284    	; 0x5b6 <__vector_29+0x92>

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <__vector_29+0x1b4>
     6d6:	54 cf       	rjmp	.-344    	; 0x580 <__vector_29+0x5c>
				updateProx = 1;
			}
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     6d8:	80 91 d0 03 	lds	r24, 0x03D0
     6dc:	90 91 d1 03 	lds	r25, 0x03D1
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	90 93 d1 03 	sts	0x03D1, r25
     6ec:	80 93 d0 03 	sts	0x03D0, r24
		case SKIP_SAMPLE:
			break;
	}

	// select next channel
	switch(adcSamplingState) {
     6f0:	80 91 94 03 	lds	r24, 0x0394
     6f4:	82 30       	cpi	r24, 0x02	; 2
     6f6:	09 f0       	breq	.+2      	; 0x6fa <__vector_29+0x1d6>
     6f8:	48 cf       	rjmp	.-368    	; 0x58a <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
     6fa:	80 91 30 03 	lds	r24, 0x0330
     6fe:	80 93 2d 03 	sts	0x032D, r24
			rightChannelPhase = rightMotorPhase;
     702:	80 91 31 03 	lds	r24, 0x0331
     706:	80 93 95 03 	sts	0x0395, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     70a:	80 91 96 03 	lds	r24, 0x0396
     70e:	88 23       	and	r24, r24
     710:	09 f0       	breq	.+2      	; 0x714 <__vector_29+0x1f0>
     712:	8b c0       	rjmp	.+278    	; 0x82a <__vector_29+0x306>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	80 93 93 03 	sts	0x0393, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	80 93 94 03 	sts	0x0394, r24
			break;
     720:	4a cf       	rjmp	.-364    	; 0x5b6 <__vector_29+0x92>
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			//PORTB ^= (1 << 7);
			if(firstSampleLeft > 0) {
     722:	80 91 10 02 	lds	r24, 0x0210
     726:	88 23       	and	r24, r24
     728:	09 f4       	brne	.+2      	; 0x72c <__vector_29+0x208>
     72a:	2a cf       	rjmp	.-428    	; 0x580 <__vector_29+0x5c>
				firstSampleLeft++;
     72c:	48 2f       	mov	r20, r24
     72e:	4f 5f       	subi	r20, 0xFF	; 255
     730:	40 93 10 02 	sts	0x0210, r20
				if(firstSampleLeft > 4) {
     734:	45 30       	cpi	r20, 0x05	; 5
     736:	08 f4       	brcc	.+2      	; 0x73a <__vector_29+0x216>
     738:	23 cf       	rjmp	.-442    	; 0x580 <__vector_29+0x5c>
					left_vel_sum += value;
     73a:	80 91 d6 03 	lds	r24, 0x03D6
     73e:	90 91 d7 03 	lds	r25, 0x03D7
     742:	82 0f       	add	r24, r18
     744:	93 1f       	adc	r25, r19
     746:	90 93 d7 03 	sts	0x03D7, r25
     74a:	80 93 d6 03 	sts	0x03D6, r24
					if(firstSampleLeft==12) {
     74e:	4c 30       	cpi	r20, 0x0C	; 12
     750:	09 f0       	breq	.+2      	; 0x754 <__vector_29+0x230>
     752:	16 cf       	rjmp	.-468    	; 0x580 <__vector_29+0x5c>
						firstSampleLeft = 0;
     754:	10 92 10 02 	sts	0x0210, r1
						compute_left_vel = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 f2 03 	sts	0x03F2, r24
     75e:	10 cf       	rjmp	.-480    	; 0x580 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
     760:	80 91 2f 03 	lds	r24, 0x032F
     764:	80 93 2d 03 	sts	0x032D, r24
			leftChannelPhase = leftMotorPhase;
     768:	80 91 32 03 	lds	r24, 0x0332
     76c:	80 93 96 03 	sts	0x0396, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     770:	80 91 95 03 	lds	r24, 0x0395
     774:	88 23       	and	r24, r24
     776:	09 f0       	breq	.+2      	; 0x77a <__vector_29+0x256>
     778:	46 c0       	rjmp	.+140    	; 0x806 <__vector_29+0x2e2>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 93 03 	sts	0x0393, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	80 93 94 03 	sts	0x0394, r24
			break;
     786:	17 cf       	rjmp	.-466    	; 0x5b6 <__vector_29+0x92>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     788:	80 91 ce 03 	lds	r24, 0x03CE
     78c:	90 91 cf 03 	lds	r25, 0x03CF
     790:	82 0f       	add	r24, r18
     792:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     794:	96 95       	lsr	r25
     796:	87 95       	ror	r24
     798:	90 93 cf 03 	sts	0x03CF, r25
     79c:	80 93 ce 03 	sts	0x03CE, r24
			break;
     7a0:	ef ce       	rjmp	.-546    	; 0x580 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
     7a2:	80 91 0f 02 	lds	r24, 0x020F
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <__vector_29+0x288>
     7aa:	ea ce       	rjmp	.-556    	; 0x580 <__vector_29+0x5c>
				firstSampleRight++;
     7ac:	48 2f       	mov	r20, r24
     7ae:	4f 5f       	subi	r20, 0xFF	; 255
     7b0:	40 93 0f 02 	sts	0x020F, r20
				if(firstSampleRight > 4) {		// to skip undesired samples (3 samples skipped)
     7b4:	45 30       	cpi	r20, 0x05	; 5
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <__vector_29+0x296>
     7b8:	e3 ce       	rjmp	.-570    	; 0x580 <__vector_29+0x5c>
					right_vel_sum += value;
     7ba:	80 91 d8 03 	lds	r24, 0x03D8
     7be:	90 91 d9 03 	lds	r25, 0x03D9
     7c2:	82 0f       	add	r24, r18
     7c4:	93 1f       	adc	r25, r19
     7c6:	90 93 d9 03 	sts	0x03D9, r25
     7ca:	80 93 d8 03 	sts	0x03D8, r24
					if(firstSampleRight==12) {	// number of samples to take for the speed computation
     7ce:	4c 30       	cpi	r20, 0x0C	; 12
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_29+0x2b0>
     7d2:	d6 ce       	rjmp	.-596    	; 0x580 <__vector_29+0x5c>
						firstSampleRight = 0;
     7d4:	10 92 0f 02 	sts	0x020F, r1
						compute_right_vel = 1;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 f3 03 	sts	0x03F3, r24
     7de:	d0 ce       	rjmp	.-608    	; 0x580 <__vector_29+0x5c>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif
					
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));
     7e0:	40 91 05 01 	lds	r20, 0x0105
     7e4:	40 97       	sbiw	r24, 0x10	; 16
     7e6:	95 95       	asr	r25
     7e8:	87 95       	ror	r24
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <__vector_29+0x2d0>
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	8a 95       	dec	r24
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <__vector_29+0x2cc>
     7f8:	20 95       	com	r18
     7fa:	24 23       	and	r18, r20
     7fc:	20 93 05 01 	sts	0x0105, r18
     800:	80 91 94 03 	lds	r24, 0x0394
     804:	d8 ce       	rjmp	.-592    	; 0x5b6 <__vector_29+0x92>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	69 f1       	breq	.+90     	; 0x864 <__vector_29+0x340>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	80 93 93 03 	sts	0x0393, r24
     810:	b7 cf       	rjmp	.-146    	; 0x780 <__vector_29+0x25c>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
     812:	91 30       	cpi	r25, 0x01	; 1
     814:	09 f0       	breq	.+2      	; 0x818 <__vector_29+0x2f4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
     816:	85 e0       	ldi	r24, 0x05	; 5
     818:	80 93 93 03 	sts	0x0393, r24
     81c:	21 cf       	rjmp	.-446    	; 0x660 <__vector_29+0x13c>
		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	e9 f0       	breq	.+58     	; 0x85c <__vector_29+0x338>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
     822:	85 e0       	ldi	r24, 0x05	; 5
     824:	80 93 93 03 	sts	0x0393, r24
     828:	c3 ce       	rjmp	.-634    	; 0x5b0 <__vector_29+0x8c>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	f9 f0       	breq	.+62     	; 0x86c <__vector_29+0x348>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
     82e:	85 e0       	ldi	r24, 0x05	; 5
     830:	80 93 93 03 	sts	0x0393, r24
     834:	72 cf       	rjmp	.-284    	; 0x71a <__vector_29+0x1f6>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
     836:	80 91 99 03 	lds	r24, 0x0399
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	d9 f0       	breq	.+54     	; 0x874 <__vector_29+0x350>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	ba ce       	rjmp	.-652    	; 0x5b6 <__vector_29+0x92>

	// save the last data
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     842:	90 91 99 03 	lds	r25, 0x0399
     846:	92 30       	cpi	r25, 0x02	; 2
     848:	09 f0       	breq	.+2      	; 0x84c <__vector_29+0x328>
     84a:	e0 ce       	rjmp	.-576    	; 0x60c <__vector_29+0xe8>
				batteryLevel = value;
     84c:	30 93 98 03 	sts	0x0398, r19
     850:	20 93 97 03 	sts	0x0397, r18
				measBattery = 0;
     854:	10 92 99 03 	sts	0x0399, r1
				PORTC &= ~(1 << 6);
     858:	46 98       	cbi	0x08, 6	; 8
     85a:	e0 ce       	rjmp	.-576    	; 0x61c <__vector_29+0xf8>
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	80 93 93 03 	sts	0x0393, r24
     862:	a6 ce       	rjmp	.-692    	; 0x5b0 <__vector_29+0x8c>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	80 93 93 03 	sts	0x0393, r24
     86a:	8a cf       	rjmp	.-236    	; 0x780 <__vector_29+0x25c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	80 93 93 03 	sts	0x0393, r24
     872:	53 cf       	rjmp	.-346    	; 0x71a <__vector_29+0x1f6>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	80 93 99 03 	sts	0x0399, r24
				PORTC |= (1 << 6);	// sense enable on
     87a:	46 9a       	sbi	0x08, 6	; 8
     87c:	f8 ce       	rjmp	.-528    	; 0x66e <__vector_29+0x14a>
			}

			if(currentProx & 0x01) {	// if active phase
				if(currentProx < 16) {
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     87e:	80 91 99 03 	lds	r24, 0x0399
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	09 f0       	breq	.+2      	; 0x888 <__vector_29+0x364>
     886:	fd ce       	rjmp	.-518    	; 0x682 <__vector_29+0x15e>
						measBattery=2;
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	80 93 99 03 	sts	0x0399, r24
						PORTC |= (1 << 6);	// sense enable on
     88e:	46 9a       	sbi	0x08, 6	; 8
     890:	80 91 94 03 	lds	r24, 0x0394
     894:	90 ce       	rjmp	.-736    	; 0x5b6 <__vector_29+0x92>

00000896 <initPwm>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     896:	e0 e9       	ldi	r30, 0x90	; 144
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	83 68       	ori	r24, 0x83	; 131
     89e:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     8a0:	80 81       	ld	r24, Z
     8a2:	83 60       	ori	r24, 0x03	; 3
     8a4:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     8a6:	a1 e9       	ldi	r26, 0x91	; 145
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	8c 91       	ld	r24, X
     8ac:	8b 60       	ori	r24, 0x0B	; 11
     8ae:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     8b0:	80 91 de 03 	lds	r24, 0x03DE
     8b4:	90 91 df 03 	lds	r25, 0x03DF
     8b8:	90 93 99 00 	sts	0x0099, r25
     8bc:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     8c0:	10 92 9b 00 	sts	0x009B, r1
     8c4:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     8c8:	a1 e7       	ldi	r26, 0x71	; 113
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	8c 91       	ld	r24, X
     8ce:	81 60       	ori	r24, 0x01	; 1
     8d0:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     8d2:	80 81       	ld	r24, Z
     8d4:	8f 75       	andi	r24, 0x5F	; 95
     8d6:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     8d8:	8e b1       	in	r24, 0x0e	; 14
     8da:	87 7e       	andi	r24, 0xE7	; 231
     8dc:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     8de:	e0 ea       	ldi	r30, 0xA0	; 160
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	83 68       	ori	r24, 0x83	; 131
     8e6:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     8e8:	a1 ea       	ldi	r26, 0xA1	; 161
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	8c 91       	ld	r24, X
     8ee:	8b 60       	ori	r24, 0x0B	; 11
     8f0:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     8f2:	80 91 e0 03 	lds	r24, 0x03E0
     8f6:	90 91 e1 03 	lds	r25, 0x03E1
     8fa:	90 93 a9 00 	sts	0x00A9, r25
     8fe:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     902:	10 92 ab 00 	sts	0x00AB, r1
     906:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     90a:	a2 e7       	ldi	r26, 0x72	; 114
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	8c 91       	ld	r24, X
     910:	81 60       	ori	r24, 0x01	; 1
     912:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     914:	80 81       	ld	r24, Z
     916:	8f 75       	andi	r24, 0x5F	; 95
     918:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     91a:	e2 e0       	ldi	r30, 0x02	; 2
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	80 81       	ld	r24, Z
     920:	87 7e       	andi	r24, 0xE7	; 231
     922:	80 83       	st	Z, r24


}
     924:	08 95       	ret

00000926 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	if(pwm_left == 0) {
     934:	80 91 e0 03 	lds	r24, 0x03E0
     938:	90 91 e1 03 	lds	r25, 0x03E1
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	49 f1       	breq	.+82     	; 0x992 <__vector_45+0x6c>
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     940:	18 16       	cp	r1, r24
     942:	19 06       	cpc	r1, r25
     944:	0c f0       	brlt	.+2      	; 0x948 <__vector_45+0x22>
     946:	4d c0       	rjmp	.+154    	; 0x9e2 <__vector_45+0xbc>
		leftMotorPhase = ACTIVE_PHASE;
     948:	10 92 32 03 	sts	0x0332, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     94c:	8f e0       	ldi	r24, 0x0F	; 15
     94e:	80 93 2f 03 	sts	0x032F, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
     952:	80 91 a0 00 	lds	r24, 0x00A0
     956:	8f 7d       	andi	r24, 0xDF	; 223
     958:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
     95c:	80 91 72 00 	lds	r24, 0x0072
     960:	8b 7f       	andi	r24, 0xFB	; 251
     962:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
     966:	80 91 02 01 	lds	r24, 0x0102
     96a:	8f 7e       	andi	r24, 0xEF	; 239
     96c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
     970:	80 91 a0 00 	lds	r24, 0x00A0
     974:	80 68       	ori	r24, 0x80	; 128
     976:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
     97a:	80 91 72 00 	lds	r24, 0x0072
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	80 93 72 00 	sts	0x0072, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti
ISR(TIMER4_OVF_vect) {

//	PORTB &= ~(1 << 6);

	if(pwm_left == 0) {
		left_vel_sum = 0;
     992:	10 92 d7 03 	sts	0x03D7, r1
     996:	10 92 d6 03 	sts	0x03D6, r1
		last_left_vel = 0;
     99a:	10 92 db 03 	sts	0x03DB, r1
     99e:	10 92 da 03 	sts	0x03DA, r1
		left_current_avg = 0;
     9a2:	10 92 cf 03 	sts	0x03CF, r1
     9a6:	10 92 ce 03 	sts	0x03CE, r1
		leftMotorPhase = NO_PHASE;
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	80 93 32 03 	sts	0x0332, r24
		compute_left_vel = 1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 f2 03 	sts	0x03F2, r24
		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     9b6:	80 91 a0 00 	lds	r24, 0x00A0
     9ba:	8f 75       	andi	r24, 0x5F	; 95
     9bc:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     9c0:	80 91 02 01 	lds	r24, 0x0102
     9c4:	87 7e       	andi	r24, 0xE7	; 231
     9c6:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
     9ca:	80 91 72 00 	lds	r24, 0x0072
     9ce:	89 7f       	andi	r24, 0xF9	; 249
     9d0:	80 93 72 00 	sts	0x0072, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
     9e2:	10 92 32 03 	sts	0x0332, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     9e6:	8e e0       	ldi	r24, 0x0E	; 14
     9e8:	80 93 2f 03 	sts	0x032F, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
     9ec:	80 91 a0 00 	lds	r24, 0x00A0
     9f0:	8f 77       	andi	r24, 0x7F	; 127
     9f2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
     9f6:	80 91 72 00 	lds	r24, 0x0072
     9fa:	8d 7f       	andi	r24, 0xFD	; 253
     9fc:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
     a00:	80 91 02 01 	lds	r24, 0x0102
     a04:	87 7f       	andi	r24, 0xF7	; 247
     a06:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
     a0a:	80 91 a0 00 	lds	r24, 0x00A0
     a0e:	80 62       	ori	r24, 0x20	; 32
     a10:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
     a14:	80 91 72 00 	lds	r24, 0x0072
     a18:	84 60       	ori	r24, 0x04	; 4
     a1a:	80 93 72 00 	sts	0x0072, r24
     a1e:	b2 cf       	rjmp	.-156    	; 0x984 <__vector_45+0x5e>

00000a20 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 32 03 	sts	0x0332, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     a34:	9e e0       	ldi	r25, 0x0E	; 14
     a36:	90 93 2f 03 	sts	0x032F, r25

	firstSampleLeft = 1;
     a3a:	80 93 10 02 	sts	0x0210, r24

//	PORTB |= (1 << 6);

}
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 32 03 	sts	0x0332, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     a60:	9f e0       	ldi	r25, 0x0F	; 15
     a62:	90 93 2f 03 	sts	0x032F, r25

	firstSampleLeft = 1;
     a66:	80 93 10 02 	sts	0x0210, r24

//	PORTB |= (1 << 6);

}
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     a86:	80 91 de 03 	lds	r24, 0x03DE
     a8a:	90 91 df 03 	lds	r25, 0x03DF
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	29 f1       	breq	.+74     	; 0xadc <__vector_35+0x64>
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     a92:	18 16       	cp	r1, r24
     a94:	19 06       	cpc	r1, r25
     a96:	0c f0       	brlt	.+2      	; 0xa9a <__vector_35+0x22>
     a98:	47 c0       	rjmp	.+142    	; 0xb28 <__vector_35+0xb0>
		rightMotorPhase = ACTIVE_PHASE;
     a9a:	10 92 31 03 	sts	0x0331, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     a9e:	8d e0       	ldi	r24, 0x0D	; 13
     aa0:	80 93 30 03 	sts	0x0330, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
     aa4:	80 91 90 00 	lds	r24, 0x0090
     aa8:	8f 7d       	andi	r24, 0xDF	; 223
     aaa:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
     aae:	80 91 71 00 	lds	r24, 0x0071
     ab2:	8b 7f       	andi	r24, 0xFB	; 251
     ab4:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
     ab8:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
     aba:	80 91 90 00 	lds	r24, 0x0090
     abe:	80 68       	ori	r24, 0x80	; 128
     ac0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
     ac4:	80 91 71 00 	lds	r24, 0x0071
     ac8:	82 60       	ori	r24, 0x02	; 2
     aca:	80 93 71 00 	sts	0x0071, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti
//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
		right_vel_sum = 0;
     adc:	10 92 d9 03 	sts	0x03D9, r1
     ae0:	10 92 d8 03 	sts	0x03D8, r1
		last_right_vel = 0;
     ae4:	10 92 dd 03 	sts	0x03DD, r1
     ae8:	10 92 dc 03 	sts	0x03DC, r1
		right_current_avg = 0;
     aec:	10 92 d1 03 	sts	0x03D1, r1
     af0:	10 92 d0 03 	sts	0x03D0, r1
		rightMotorPhase = NO_PHASE;
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	80 93 31 03 	sts	0x0331, r24
		compute_right_vel = 1;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 93 f3 03 	sts	0x03F3, r24
		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     b00:	80 91 90 00 	lds	r24, 0x0090
     b04:	8f 75       	andi	r24, 0x5F	; 95
     b06:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     b0a:	8e b1       	in	r24, 0x0e	; 14
     b0c:	87 7e       	andi	r24, 0xE7	; 231
     b0e:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
     b10:	80 91 71 00 	lds	r24, 0x0071
     b14:	89 7f       	andi	r24, 0xF9	; 249
     b16:	80 93 71 00 	sts	0x0071, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
     b28:	10 92 31 03 	sts	0x0331, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     b2c:	8c e0       	ldi	r24, 0x0C	; 12
     b2e:	80 93 30 03 	sts	0x0330, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
     b32:	80 91 90 00 	lds	r24, 0x0090
     b36:	8f 77       	andi	r24, 0x7F	; 127
     b38:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
     b3c:	80 91 71 00 	lds	r24, 0x0071
     b40:	8d 7f       	andi	r24, 0xFD	; 253
     b42:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
     b46:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
     b48:	80 91 90 00 	lds	r24, 0x0090
     b4c:	80 62       	ori	r24, 0x20	; 32
     b4e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
     b52:	80 91 71 00 	lds	r24, 0x0071
     b56:	84 60       	ori	r24, 0x04	; 4
     b58:	80 93 71 00 	sts	0x0071, r24
     b5c:	b8 cf       	rjmp	.-144    	; 0xace <__vector_35+0x56>

00000b5e <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 31 03 	sts	0x0331, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     b72:	9c e0       	ldi	r25, 0x0C	; 12
     b74:	90 93 30 03 	sts	0x0330, r25

	firstSampleRight = 1;
     b78:	80 93 0f 02 	sts	0x020F, r24

//	PORTB |= (1 << 6);
}
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     b8a:	1f 92       	push	r1
     b8c:	0f 92       	push	r0
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	0f 92       	push	r0
     b92:	11 24       	eor	r1, r1
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 31 03 	sts	0x0331, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     b9e:	9d e0       	ldi	r25, 0x0D	; 13
     ba0:	90 93 30 03 	sts	0x0330, r25

	firstSampleRight = 1;
     ba4:	80 93 0f 02 	sts	0x020F, r24

//	PORTB |= (1 << 6);
}
     ba8:	9f 91       	pop	r25
     baa:	8f 91       	pop	r24
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <readAccelXYZ+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <readAccelXYZ+0x8>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
     bc2:	80 91 05 04 	lds	r24, 0x0405
     bc6:	88 23       	and	r24, r24
     bc8:	c1 f0       	breq	.+48     	; 0xbfa <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;    // X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;    // Z axis
		}

	} else if(useAccel == USE_ADXL345) {	
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <readAccelXYZ+0x1a>
     bce:	ad c0       	rjmp	.+346    	; 0xd2a <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;    // Z axis
		}

	} else {

		accX = 0;
     bd0:	10 92 07 04 	sts	0x0407, r1
     bd4:	10 92 06 04 	sts	0x0406, r1
		accY = 0;
     bd8:	10 92 09 04 	sts	0x0409, r1
     bdc:	10 92 08 04 	sts	0x0408, r1
		accZ = 0;
     be0:	10 92 0b 04 	sts	0x040B, r1
     be4:	10 92 0a 04 	sts	0x040A, r1

	}

}
     be8:	26 96       	adiw	r28, 0x06	; 6
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     bfa:	80 91 19 02 	lds	r24, 0x0219
     bfe:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
		i2c_write(0x00);							// sends address to read from
     c02:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     c04:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     c08:	80 91 19 02 	lds	r24, 0x0219
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
     c12:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     c1c:	8a 83       	std	Y+2, r24	; 0x02
     c1e:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     c22:	8b 83       	std	Y+3, r24	; 0x03
     c24:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     c28:	8c 83       	std	Y+4, r24	; 0x04
     c2a:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     c2e:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
     c30:	0e 94 22 20 	call	0x4044	; 0x4044 <i2c_readNak>
     c34:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
     c36:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>

		if(startCalibration) {
     c3a:	80 91 25 04 	lds	r24, 0x0425
     c3e:	88 23       	and	r24, r24
     c40:	89 f1       	breq	.+98     	; 0xca4 <readAccelXYZ+0xee>
			// 10 bits valus in 2's complement
			accX = ((signed int)buff[1]<<8)|buff[0];    // X axis
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	99 27       	eor	r25, r25
     c46:	87 fd       	sbrc	r24, 7
     c48:	90 95       	com	r25
     c4a:	98 2f       	mov	r25, r24
     c4c:	88 27       	eor	r24, r24
     c4e:	29 81       	ldd	r18, Y+1	; 0x01
     c50:	33 27       	eor	r19, r19
     c52:	27 fd       	sbrc	r18, 7
     c54:	30 95       	com	r19
     c56:	82 2b       	or	r24, r18
     c58:	93 2b       	or	r25, r19
     c5a:	90 93 07 04 	sts	0x0407, r25
     c5e:	80 93 06 04 	sts	0x0406, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    // Y axis
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	99 27       	eor	r25, r25
     c66:	87 fd       	sbrc	r24, 7
     c68:	90 95       	com	r25
     c6a:	98 2f       	mov	r25, r24
     c6c:	88 27       	eor	r24, r24
     c6e:	2b 81       	ldd	r18, Y+3	; 0x03
     c70:	33 27       	eor	r19, r19
     c72:	27 fd       	sbrc	r18, 7
     c74:	30 95       	com	r19
     c76:	82 2b       	or	r24, r18
     c78:	93 2b       	or	r25, r19
     c7a:	90 93 09 04 	sts	0x0409, r25
     c7e:	80 93 08 04 	sts	0x0408, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    // Z axis
     c82:	8e 81       	ldd	r24, Y+6	; 0x06
     c84:	99 27       	eor	r25, r25
     c86:	87 fd       	sbrc	r24, 7
     c88:	90 95       	com	r25
     c8a:	98 2f       	mov	r25, r24
     c8c:	88 27       	eor	r24, r24
     c8e:	2d 81       	ldd	r18, Y+5	; 0x05
     c90:	33 27       	eor	r19, r19
     c92:	27 fd       	sbrc	r18, 7
     c94:	30 95       	com	r19
     c96:	82 2b       	or	r24, r18
     c98:	93 2b       	or	r25, r19
     c9a:	90 93 0b 04 	sts	0x040B, r25
     c9e:	80 93 0a 04 	sts	0x040A, r24
     ca2:	a2 cf       	rjmp	.-188    	; 0xbe8 <readAccelXYZ+0x32>
		} else {
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;    // X axis
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	99 27       	eor	r25, r25
     ca8:	87 fd       	sbrc	r24, 7
     caa:	90 95       	com	r25
     cac:	98 2f       	mov	r25, r24
     cae:	88 27       	eor	r24, r24
     cb0:	29 81       	ldd	r18, Y+1	; 0x01
     cb2:	33 27       	eor	r19, r19
     cb4:	27 fd       	sbrc	r18, 7
     cb6:	30 95       	com	r19
     cb8:	82 2b       	or	r24, r18
     cba:	93 2b       	or	r25, r19
     cbc:	20 91 12 04 	lds	r18, 0x0412
     cc0:	30 91 13 04 	lds	r19, 0x0413
     cc4:	82 1b       	sub	r24, r18
     cc6:	93 0b       	sbc	r25, r19
     cc8:	90 93 07 04 	sts	0x0407, r25
     ccc:	80 93 06 04 	sts	0x0406, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	99 27       	eor	r25, r25
     cd4:	87 fd       	sbrc	r24, 7
     cd6:	90 95       	com	r25
     cd8:	98 2f       	mov	r25, r24
     cda:	88 27       	eor	r24, r24
     cdc:	2b 81       	ldd	r18, Y+3	; 0x03
     cde:	33 27       	eor	r19, r19
     ce0:	27 fd       	sbrc	r18, 7
     ce2:	30 95       	com	r19
     ce4:	82 2b       	or	r24, r18
     ce6:	93 2b       	or	r25, r19
     ce8:	20 91 14 04 	lds	r18, 0x0414
     cec:	30 91 15 04 	lds	r19, 0x0415
     cf0:	82 1b       	sub	r24, r18
     cf2:	93 0b       	sbc	r25, r19
     cf4:	90 93 09 04 	sts	0x0409, r25
     cf8:	80 93 08 04 	sts	0x0408, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;    // Z axis
     cfc:	8e 81       	ldd	r24, Y+6	; 0x06
     cfe:	99 27       	eor	r25, r25
     d00:	87 fd       	sbrc	r24, 7
     d02:	90 95       	com	r25
     d04:	98 2f       	mov	r25, r24
     d06:	88 27       	eor	r24, r24
     d08:	2d 81       	ldd	r18, Y+5	; 0x05
     d0a:	33 27       	eor	r19, r19
     d0c:	27 fd       	sbrc	r18, 7
     d0e:	30 95       	com	r19
     d10:	82 2b       	or	r24, r18
     d12:	93 2b       	or	r25, r19
     d14:	20 91 16 04 	lds	r18, 0x0416
     d18:	30 91 17 04 	lds	r19, 0x0417
     d1c:	82 1b       	sub	r24, r18
     d1e:	93 0b       	sbc	r25, r19
     d20:	90 93 0b 04 	sts	0x040B, r25
     d24:	80 93 0a 04 	sts	0x040A, r24
     d28:	5f cf       	rjmp	.-322    	; 0xbe8 <readAccelXYZ+0x32>
		}

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     d2a:	80 91 19 02 	lds	r24, 0x0219
     d2e:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
		i2c_write(0x32);							// sends address to read from
     d32:	82 e3       	ldi	r24, 0x32	; 50
     d34:	67 cf       	rjmp	.-306    	; 0xc04 <readAccelXYZ+0x4e>

00000d36 <readAccelXY>:

	}

}

void readAccelXY() {
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];


	if(useAccel == USE_MMAX7455L) {
     d46:	80 91 05 04 	lds	r24, 0x0405
     d4a:	88 23       	and	r24, r24
     d4c:	91 f0       	breq	.+36     	; 0xd72 <readAccelXY+0x3c>
		if(accY & 0x02000) {
			accY |= 0xFC00;
		}
*/

	} else if(useAccel == USE_ADXL345) {
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	09 f4       	brne	.+2      	; 0xd54 <readAccelXY+0x1e>
     d52:	88 c0       	rjmp	.+272    	; 0xe64 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
		}

	} else {

		accX = 0;
     d54:	10 92 07 04 	sts	0x0407, r1
     d58:	10 92 06 04 	sts	0x0406, r1
		accY = 0;
     d5c:	10 92 09 04 	sts	0x0409, r1
     d60:	10 92 08 04 	sts	0x0408, r1

	}


}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     d72:	80 91 19 02 	lds	r24, 0x0219
     d76:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
		i2c_write(0x00);							// sends address to read from
     d7a:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     d7c:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     d80:	80 91 19 02 	lds	r24, 0x0219
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
     d8a:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     d8e:	08 2f       	mov	r16, r24
     d90:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     d94:	f8 2e       	mov	r15, r24
     d96:	0e 94 18 20 	call	0x4030	; 0x4030 <i2c_readAck>
     d9a:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
     d9c:	0e 94 22 20 	call	0x4044	; 0x4044 <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>

		if(startCalibration) {
     da6:	90 91 25 04 	lds	r25, 0x0425
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	99 23       	and	r25, r25
     dae:	39 f1       	breq	.+78     	; 0xdfe <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    // X axis
     db0:	4f 2d       	mov	r20, r15
     db2:	55 27       	eor	r21, r21
     db4:	47 fd       	sbrc	r20, 7
     db6:	50 95       	com	r21
     db8:	54 2f       	mov	r21, r20
     dba:	44 27       	eor	r20, r20
     dbc:	60 2f       	mov	r22, r16
     dbe:	77 27       	eor	r23, r23
     dc0:	67 fd       	sbrc	r22, 7
     dc2:	70 95       	com	r23
     dc4:	46 2b       	or	r20, r22
     dc6:	57 2b       	or	r21, r23
     dc8:	50 93 07 04 	sts	0x0407, r21
     dcc:	40 93 06 04 	sts	0x0406, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    // Y axis
     dd0:	28 2f       	mov	r18, r24
     dd2:	33 27       	eor	r19, r19
     dd4:	27 fd       	sbrc	r18, 7
     dd6:	30 95       	com	r19
     dd8:	32 2f       	mov	r19, r18
     dda:	22 27       	eor	r18, r18
     ddc:	81 2f       	mov	r24, r17
     dde:	99 27       	eor	r25, r25
     de0:	87 fd       	sbrc	r24, 7
     de2:	90 95       	com	r25
     de4:	28 2b       	or	r18, r24
     de6:	39 2b       	or	r19, r25
     de8:	30 93 09 04 	sts	0x0409, r19
     dec:	20 93 08 04 	sts	0x0408, r18
		accY = 0;

	}


}
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	08 95       	ret

		if(startCalibration) {
			accX = ((signed int)buff[1]<<8)|buff[0];    // X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    // Y axis
		} else {
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;    // X axis
     dfe:	4f 2d       	mov	r20, r15
     e00:	55 27       	eor	r21, r21
     e02:	47 fd       	sbrc	r20, 7
     e04:	50 95       	com	r21
     e06:	54 2f       	mov	r21, r20
     e08:	44 27       	eor	r20, r20
     e0a:	60 2f       	mov	r22, r16
     e0c:	77 27       	eor	r23, r23
     e0e:	67 fd       	sbrc	r22, 7
     e10:	70 95       	com	r23
     e12:	46 2b       	or	r20, r22
     e14:	57 2b       	or	r21, r23
     e16:	60 91 12 04 	lds	r22, 0x0412
     e1a:	70 91 13 04 	lds	r23, 0x0413
     e1e:	46 1b       	sub	r20, r22
     e20:	57 0b       	sbc	r21, r23
     e22:	50 93 07 04 	sts	0x0407, r21
     e26:	40 93 06 04 	sts	0x0406, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;    // Y axis
     e2a:	28 2f       	mov	r18, r24
     e2c:	33 27       	eor	r19, r19
     e2e:	27 fd       	sbrc	r18, 7
     e30:	30 95       	com	r19
     e32:	32 2f       	mov	r19, r18
     e34:	22 27       	eor	r18, r18
     e36:	81 2f       	mov	r24, r17
     e38:	99 27       	eor	r25, r25
     e3a:	87 fd       	sbrc	r24, 7
     e3c:	90 95       	com	r25
     e3e:	28 2b       	or	r18, r24
     e40:	39 2b       	or	r19, r25
     e42:	80 91 14 04 	lds	r24, 0x0414
     e46:	90 91 15 04 	lds	r25, 0x0415
     e4a:	28 1b       	sub	r18, r24
     e4c:	39 0b       	sbc	r19, r25
     e4e:	30 93 09 04 	sts	0x0409, r19
     e52:	20 93 08 04 	sts	0x0408, r18
		accY = 0;

	}


}
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	08 95       	ret
*/

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     e64:	80 91 19 02 	lds	r24, 0x0219
     e68:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
		i2c_write(0x32);							// sends address to read from
     e6c:	82 e3       	ldi	r24, 0x32	; 50
     e6e:	86 cf       	rjmp	.-244    	; 0xd7c <readAccelXY+0x46>

00000e70 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     e70:	80 91 19 02 	lds	r24, 0x0219
     e74:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     e78:	88 23       	and	r24, r24
     e7a:	51 f4       	brne	.+20     	; 0xe90 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     e7c:	86 e1       	ldi	r24, 0x16	; 22
     e7e:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     e82:	85 e4       	ldi	r24, 0x45	; 69
     e84:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     e88:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	return 0;
     e8c:	80 e0       	ldi	r24, 0x00	; 0

}
     e8e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     e90:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
		return 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret

00000e98 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     e98:	80 91 19 02 	lds	r24, 0x0219
     e9c:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     ea0:	88 23       	and	r24, r24
     ea2:	31 f5       	brne	.+76     	; 0xef0 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     ea4:	8d e2       	ldi	r24, 0x2D	; 45
     ea6:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     eaa:	88 e0       	ldi	r24, 0x08	; 8
     eac:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     eb0:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     eb4:	80 91 19 02 	lds	r24, 0x0219
     eb8:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     ebc:	88 23       	and	r24, r24
     ebe:	c1 f4       	brne	.+48     	; 0xef0 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     ec0:	81 e3       	ldi	r24, 0x31	; 49
     ec2:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     ecc:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     ed0:	80 91 19 02 	lds	r24, 0x0219
     ed4:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     ed8:	88 23       	and	r24, r24
     eda:	51 f4       	brne	.+20     	; 0xef0 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     edc:	8c e2       	ldi	r24, 0x2C	; 44
     ede:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     ee2:	89 e0       	ldi	r24, 0x09	; 9
     ee4:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     ee8:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	return 0;
     eec:	80 e0       	ldi	r24, 0x00	; 0

}
     eee:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     ef0:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
		return 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	08 95       	ret

00000ef8 <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     ef8:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     efc:	80 91 19 02 	lds	r24, 0x0219
     f00:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     f04:	88 23       	and	r24, r24
     f06:	49 f4       	brne	.+18     	; 0xf1a <initI2C+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     f08:	86 e1       	ldi	r24, 0x16	; 22
     f0a:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     f0e:	85 e4       	ldi	r24, 0x45	; 69
     f10:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     f14:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
     f18:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     f1a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     f1e:	86 ea       	ldi	r24, 0xA6	; 166
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 1a 02 	sts	0x021A, r25
     f26:	80 93 19 02 	sts	0x0219, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     f2a:	86 ea       	ldi	r24, 0xA6	; 166
     f2c:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     f30:	88 23       	and	r24, r24
     f32:	41 f5       	brne	.+80     	; 0xf84 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     f34:	8d e2       	ldi	r24, 0x2D	; 45
     f36:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     f3a:	88 e0       	ldi	r24, 0x08	; 8
     f3c:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     f40:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     f44:	80 91 19 02 	lds	r24, 0x0219
     f48:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     f4c:	88 23       	and	r24, r24
     f4e:	d1 f4       	brne	.+52     	; 0xf84 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     f50:	81 e3       	ldi	r24, 0x31	; 49
     f52:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     f5c:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     f60:	80 91 19 02 	lds	r24, 0x0219
     f64:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     f68:	88 23       	and	r24, r24
     f6a:	61 f4       	brne	.+24     	; 0xf84 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     f6c:	8c e2       	ldi	r24, 0x2C	; 44
     f6e:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     f72:	89 e0       	ldi	r24, 0x09	; 9
     f74:	0e 94 06 20 	call	0x400c	; 0x400c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     f78:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 05 04 	sts	0x0405, r24
     f82:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     f84:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	80 93 05 04 	sts	0x0405, r24
     f8e:	08 95       	ret

00000f90 <toggleBlueLed>:

}

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 91 ff 03 	lds	r25, 0x03FF
     f96:	89 1b       	sub	r24, r25
     f98:	80 93 ff 03 	sts	0x03FF, r24

	if(blinkState) {
     f9c:	88 23       	and	r24, r24
     f9e:	39 f4       	brne	.+14     	; 0xfae <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     fa0:	80 91 80 00 	lds	r24, 0x0080
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     faa:	2f 98       	cbi	0x05, 7	; 5
     fac:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     fae:	80 91 80 00 	lds	r24, 0x0080
     fb2:	88 60       	ori	r24, 0x08	; 8
     fb4:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 8d 00 	sts	0x008D, r25
     fc0:	80 93 8c 00 	sts	0x008C, r24
     fc4:	08 95       	ret

00000fc6 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     fc6:	88 23       	and	r24, r24
     fc8:	59 f0       	breq	.+22     	; 0xfe0 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     fca:	90 91 80 00 	lds	r25, 0x0080
     fce:	90 68       	ori	r25, 0x80	; 128
     fd0:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	90 93 89 00 	sts	0x0089, r25
     fda:	80 93 88 00 	sts	0x0088, r24
     fde:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     fe0:	80 91 80 00 	lds	r24, 0x0080
     fe4:	8f 77       	andi	r24, 0x7F	; 127
     fe6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     fea:	2d 98       	cbi	0x05, 5	; 5
     fec:	08 95       	ret

00000fee <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     fee:	88 23       	and	r24, r24
     ff0:	59 f0       	breq	.+22     	; 0x1008 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     ff2:	90 91 80 00 	lds	r25, 0x0080
     ff6:	90 62       	ori	r25, 0x20	; 32
     ff8:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	90 93 8b 00 	sts	0x008B, r25
    1002:	80 93 8a 00 	sts	0x008A, r24
    1006:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1008:	80 91 80 00 	lds	r24, 0x0080
    100c:	8f 7d       	andi	r24, 0xDF	; 223
    100e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    1012:	2e 98       	cbi	0x05, 6	; 5
    1014:	08 95       	ret

00001016 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1016:	88 23       	and	r24, r24
    1018:	59 f0       	breq	.+22     	; 0x1030 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    101a:	90 91 80 00 	lds	r25, 0x0080
    101e:	98 60       	ori	r25, 0x08	; 8
    1020:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	90 93 8d 00 	sts	0x008D, r25
    102a:	80 93 8c 00 	sts	0x008C, r24
    102e:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    1030:	80 91 80 00 	lds	r24, 0x0080
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    103a:	2f 98       	cbi	0x05, 7	; 5
    103c:	08 95       	ret

0000103e <computeAngle>:
		OCR1C = value;
	}

}

void computeAngle() {
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    1046:	80 91 0a 04 	lds	r24, 0x040A
    104a:	90 91 0b 04 	lds	r25, 0x040B
    104e:	97 fd       	sbrc	r25, 7
    1050:	5b c0       	rjmp	.+182    	; 0x1108 <computeAngle+0xca>

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
    1052:	80 31       	cpi	r24, 0x10	; 16
    1054:	91 05       	cpc	r25, r1
    1056:	08 f0       	brcs	.+2      	; 0x105a <computeAngle+0x1c>
    1058:	42 c0       	rjmp	.+132    	; 0x10de <computeAngle+0xa0>
		curr_position = ORIZZONTAL_POS;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 1b 02 	sts	0x021B, r24
	} else {
		curr_position = VERTICAL_POS;
	}

	if(prev_position == curr_position) {
    1060:	90 91 1a 02 	lds	r25, 0x021A
    1064:	98 17       	cp	r25, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <computeAngle+0x2c>
    1068:	42 c0       	rjmp	.+132    	; 0x10ee <computeAngle+0xb0>
		if(times_in_same_pos >= SAME_POS_NUM) {
			times_in_same_pos = 0;
			orizzontal_position = curr_position;	// 1 = orizzontal, 0 = vertical
		}
	} else {
		times_in_same_pos = 0;
    106a:	10 92 20 04 	sts	0x0420, r1
	}

	prev_position = curr_position;
    106e:	80 93 1a 02 	sts	0x021A, r24
		updateGreenLed(pwm_green);
		updateBlueLed(pwm_blue);
	}
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
    1072:	60 91 06 04 	lds	r22, 0x0406
    1076:	70 91 07 04 	lds	r23, 0x0407
    107a:	88 27       	eor	r24, r24
    107c:	77 fd       	sbrc	r23, 7
    107e:	80 95       	com	r24
    1080:	98 2f       	mov	r25, r24
    1082:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	60 91 08 04 	lds	r22, 0x0408
    108e:	70 91 09 04 	lds	r23, 0x0409
    1092:	88 27       	eor	r24, r24
    1094:	77 fd       	sbrc	r23, 7
    1096:	80 95       	com	r24
    1098:	98 2f       	mov	r25, r24
    109a:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	c8 01       	movw	r24, r16
    10a4:	b7 01       	movw	r22, r14
    10a6:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <atan2>
    10aa:	21 ee       	ldi	r18, 0xE1	; 225
    10ac:	3e e2       	ldi	r19, 0x2E	; 46
    10ae:	45 e6       	ldi	r20, 0x65	; 101
    10b0:	52 e4       	ldi	r21, 0x42	; 66
    10b2:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsf3>
    10b6:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__fixsfsi>
    10ba:	9b 01       	movw	r18, r22
    10bc:	70 93 19 04 	sts	0x0419, r23
    10c0:	60 93 18 04 	sts	0x0418, r22

	if(currentAngle < 0) {
    10c4:	77 ff       	sbrs	r23, 7
    10c6:	06 c0       	rjmp	.+12     	; 0x10d4 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    10c8:	28 59       	subi	r18, 0x98	; 152
    10ca:	3e 4f       	sbci	r19, 0xFE	; 254
    10cc:	30 93 19 04 	sts	0x0419, r19
    10d0:	20 93 18 04 	sts	0x0418, r18
	}

}
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	08 95       	ret
	unsigned int abs_acc_z=abs(accZ);

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
		curr_position = ORIZZONTAL_POS;
	} else {
		curr_position = VERTICAL_POS;
    10de:	10 92 1b 02 	sts	0x021B, r1
    10e2:	80 e0       	ldi	r24, 0x00	; 0
	}

	if(prev_position == curr_position) {
    10e4:	90 91 1a 02 	lds	r25, 0x021A
    10e8:	98 17       	cp	r25, r24
    10ea:	09 f0       	breq	.+2      	; 0x10ee <computeAngle+0xb0>
    10ec:	be cf       	rjmp	.-132    	; 0x106a <computeAngle+0x2c>
		times_in_same_pos++;
    10ee:	90 91 20 04 	lds	r25, 0x0420
    10f2:	9f 5f       	subi	r25, 0xFF	; 255
    10f4:	90 93 20 04 	sts	0x0420, r25
		if(times_in_same_pos >= SAME_POS_NUM) {
    10f8:	95 30       	cpi	r25, 0x05	; 5
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <computeAngle+0xc0>
    10fc:	b8 cf       	rjmp	.-144    	; 0x106e <computeAngle+0x30>
			times_in_same_pos = 0;
    10fe:	10 92 20 04 	sts	0x0420, r1
			orizzontal_position = curr_position;	// 1 = orizzontal, 0 = vertical
    1102:	80 93 1c 02 	sts	0x021C, r24
    1106:	b3 cf       	rjmp	.-154    	; 0x106e <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    1108:	90 95       	com	r25
    110a:	81 95       	neg	r24
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	a1 cf       	rjmp	.-190    	; 0x1052 <computeAngle+0x14>

00001110 <sendValues>:

}


void sendValues() {
	myTimeout = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 21 04 	sts	0x0421, r24
}
    1116:	08 95       	ret

00001118 <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    1118:	86 b1       	in	r24, 0x06	; 6
    111a:	66 b1       	in	r22, 0x06	; 6
    111c:	26 b1       	in	r18, 0x06	; 6
    111e:	46 b1       	in	r20, 0x06	; 6
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	28 70       	andi	r18, 0x08	; 8
    1124:	30 70       	andi	r19, 0x00	; 0
    1126:	35 95       	asr	r19
    1128:	27 95       	ror	r18
    112a:	35 95       	asr	r19
    112c:	27 95       	ror	r18
    112e:	35 95       	asr	r19
    1130:	27 95       	ror	r18
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	64 70       	andi	r22, 0x04	; 4
    113a:	70 70       	andi	r23, 0x00	; 0
    113c:	75 95       	asr	r23
    113e:	67 95       	ror	r22
    1140:	75 95       	asr	r23
    1142:	67 95       	ror	r22
    1144:	26 0f       	add	r18, r22
    1146:	37 1f       	adc	r19, r23
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	42 70       	andi	r20, 0x02	; 2
    1150:	50 70       	andi	r21, 0x00	; 0
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	24 0f       	add	r18, r20
    1158:	35 1f       	adc	r19, r21
    115a:	22 0f       	add	r18, r18
    115c:	81 70       	andi	r24, 0x01	; 1
}
    115e:	82 0f       	add	r24, r18
    1160:	08 95       	ret

00001162 <obstacleAvoidance>:

void obstacleAvoidance() {
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
	signed int velX=0, velY=0;
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
    1172:	80 91 e2 03 	lds	r24, 0x03E2
    1176:	90 91 e3 03 	lds	r25, 0x03E3
    117a:	97 fd       	sbrc	r25, 7
    117c:	c9 c0       	rjmp	.+402    	; 0x1310 <obstacleAvoidance+0x1ae>
    117e:	60 91 fd 03 	lds	r22, 0x03FD
    1182:	70 91 fe 03 	lds	r23, 0x03FE
		speedr = -speedr;
	}
	if(pwm_left_desired < 0) {
    1186:	80 91 e4 03 	lds	r24, 0x03E4
    118a:	90 91 e5 03 	lds	r25, 0x03E5
    118e:	97 fd       	sbrc	r25, 7
    1190:	d0 c0       	rjmp	.+416    	; 0x1332 <obstacleAvoidance+0x1d0>
    1192:	40 91 fb 03 	lds	r20, 0x03FB
    1196:	50 91 fc 03 	lds	r21, 0x03FC
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    119a:	e0 90 65 03 	lds	r14, 0x0365
    119e:	f0 90 66 03 	lds	r15, 0x0366
    11a2:	90 91 69 03 	lds	r25, 0x0369
    11a6:	80 91 6a 03 	lds	r24, 0x036A
    11aa:	a9 2f       	mov	r26, r25
    11ac:	b8 2f       	mov	r27, r24
    11ae:	b7 fd       	sbrc	r27, 7
    11b0:	cf c0       	rjmp	.+414    	; 0x1350 <obstacleAvoidance+0x1ee>
    11b2:	b5 95       	asr	r27
    11b4:	a7 95       	ror	r26
    11b6:	00 91 6d 03 	lds	r16, 0x036D
    11ba:	10 91 6e 03 	lds	r17, 0x036E
    11be:	90 91 71 03 	lds	r25, 0x0371
    11c2:	80 91 72 03 	lds	r24, 0x0372
    11c6:	e9 2f       	mov	r30, r25
    11c8:	f8 2f       	mov	r31, r24
    11ca:	f7 fd       	sbrc	r31, 7
    11cc:	cc c0       	rjmp	.+408    	; 0x1366 <obstacleAvoidance+0x204>
    11ce:	f5 95       	asr	r31
    11d0:	e7 95       	ror	r30
    11d2:	f0 95       	com	r31
    11d4:	e1 95       	neg	r30
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
    11d8:	ea 01       	movw	r28, r20
    11da:	c6 0f       	add	r28, r22
    11dc:	d7 1f       	adc	r29, r23
    11de:	d7 fd       	sbrc	r29, 7
    11e0:	b9 c0       	rjmp	.+370    	; 0x1354 <obstacleAvoidance+0x1f2>
    11e2:	d5 95       	asr	r29
    11e4:	c7 95       	ror	r28
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    11e6:	8e 2d       	mov	r24, r14
    11e8:	9f 2d       	mov	r25, r15
    11ea:	97 fd       	sbrc	r25, 7
    11ec:	ba c0       	rjmp	.+372    	; 0x1362 <obstacleAvoidance+0x200>
    11ee:	95 95       	asr	r25
    11f0:	87 95       	ror	r24
    11f2:	9d 01       	movw	r18, r26
    11f4:	28 1b       	sub	r18, r24
    11f6:	39 0b       	sbc	r19, r25
    11f8:	80 91 6b 03 	lds	r24, 0x036B
    11fc:	90 91 6c 03 	lds	r25, 0x036C
    1200:	28 0f       	add	r18, r24
    1202:	39 1f       	adc	r19, r25
    1204:	c8 01       	movw	r24, r16
    1206:	17 fd       	sbrc	r17, 7
    1208:	b6 c0       	rjmp	.+364    	; 0x1376 <obstacleAvoidance+0x214>
    120a:	95 95       	asr	r25
    120c:	87 95       	ror	r24
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	8e 0f       	add	r24, r30
    1214:	9f 1f       	adc	r25, r31
    1216:	20 91 63 03 	lds	r18, 0x0363
    121a:	30 91 64 03 	lds	r19, 0x0364
    121e:	82 1b       	sub	r24, r18
    1220:	93 0b       	sbc	r25, r19
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	velX += sumSensorsX/4;
    1222:	96 95       	lsr	r25
    1224:	87 95       	ror	r24
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	8c 0f       	add	r24, r28
    122c:	9d 1f       	adc	r25, r29
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    122e:	64 1b       	sub	r22, r20
    1230:	75 0b       	sbc	r23, r21
    1232:	77 fd       	sbrc	r23, 7
    1234:	9d c0       	rjmp	.+314    	; 0x1370 <obstacleAvoidance+0x20e>
    1236:	75 95       	asr	r23
    1238:	67 95       	ror	r22

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    123a:	ea 0f       	add	r30, r26
    123c:	fb 1f       	adc	r31, r27
    123e:	20 91 67 03 	lds	r18, 0x0367
    1242:	30 91 68 03 	lds	r19, 0x0368
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	2e 2d       	mov	r18, r14
    124c:	3f 2d       	mov	r19, r15
    124e:	37 fd       	sbrc	r19, 7
    1250:	8c c0       	rjmp	.+280    	; 0x136a <obstacleAvoidance+0x208>
    1252:	35 95       	asr	r19
    1254:	27 95       	ror	r18
    1256:	2e 0f       	add	r18, r30
    1258:	3f 1f       	adc	r19, r31
    125a:	40 2f       	mov	r20, r16
    125c:	51 2f       	mov	r21, r17
    125e:	57 fd       	sbrc	r21, 7
    1260:	74 c0       	rjmp	.+232    	; 0x134a <obstacleAvoidance+0x1e8>
    1262:	55 95       	asr	r21
    1264:	47 95       	ror	r20
    1266:	24 1b       	sub	r18, r20
    1268:	35 0b       	sbc	r19, r21
    126a:	40 91 6f 03 	lds	r20, 0x036F
    126e:	50 91 70 03 	lds	r21, 0x0370
    1272:	24 1b       	sub	r18, r20
    1274:	35 0b       	sbc	r19, r21

	velX += sumSensorsX/4;
	velY += sumSensorsY/4;
    1276:	36 95       	lsr	r19
    1278:	27 95       	ror	r18
    127a:	36 95       	lsr	r19
    127c:	27 95       	ror	r18
    127e:	26 0f       	add	r18, r22
    1280:	37 1f       	adc	r19, r23

	speedR = (velX + velY);
    1282:	a9 01       	movw	r20, r18
    1284:	48 0f       	add	r20, r24
    1286:	59 1f       	adc	r21, r25
	speedL = (velX - velY);
    1288:	82 1b       	sub	r24, r18
    128a:	93 0b       	sbc	r25, r19

	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL<<2);
	} else {
		pwm_left_working = speedL<<2;
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	90 93 f9 03 	sts	0x03F9, r25
    1298:	80 93 f8 03 	sts	0x03F8, r24

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR<<2);
	} else {
		pwm_right_working = speedR<<2;
    129c:	9a 01       	movw	r18, r20
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	30 93 f7 03 	sts	0x03F7, r19
    12aa:	20 93 f6 03 	sts	0x03F6, r18
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
    12ae:	41 e0       	ldi	r20, 0x01	; 1
    12b0:	24 33       	cpi	r18, 0x34	; 52
    12b2:	34 07       	cpc	r19, r20
    12b4:	34 f0       	brlt	.+12     	; 0x12c2 <obstacleAvoidance+0x160>
    12b6:	23 e3       	ldi	r18, 0x33	; 51
    12b8:	31 e0       	ldi	r19, 0x01	; 1
    12ba:	30 93 f7 03 	sts	0x03F7, r19
    12be:	20 93 f6 03 	sts	0x03F6, r18
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	84 33       	cpi	r24, 0x34	; 52
    12c6:	94 07       	cpc	r25, r20
    12c8:	34 f0       	brlt	.+12     	; 0x12d6 <obstacleAvoidance+0x174>
    12ca:	83 e3       	ldi	r24, 0x33	; 51
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	90 93 f9 03 	sts	0x03F9, r25
    12d2:	80 93 f8 03 	sts	0x03F8, r24
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
    12d6:	4e ef       	ldi	r20, 0xFE	; 254
    12d8:	2d 3c       	cpi	r18, 0xCD	; 205
    12da:	34 07       	cpc	r19, r20
    12dc:	34 f4       	brge	.+12     	; 0x12ea <obstacleAvoidance+0x188>
    12de:	2d ec       	ldi	r18, 0xCD	; 205
    12e0:	3e ef       	ldi	r19, 0xFE	; 254
    12e2:	30 93 f7 03 	sts	0x03F7, r19
    12e6:	20 93 f6 03 	sts	0x03F6, r18
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    12ea:	2e ef       	ldi	r18, 0xFE	; 254
    12ec:	8d 3c       	cpi	r24, 0xCD	; 205
    12ee:	92 07       	cpc	r25, r18
    12f0:	34 f4       	brge	.+12     	; 0x12fe <obstacleAvoidance+0x19c>
    12f2:	8d ec       	ldi	r24, 0xCD	; 205
    12f4:	9e ef       	ldi	r25, 0xFE	; 254
    12f6:	90 93 f9 03 	sts	0x03F9, r25
    12fa:	80 93 f8 03 	sts	0x03F8, r24
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	08 95       	ret
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
		speedr = -speedr;
    1310:	60 91 fd 03 	lds	r22, 0x03FD
    1314:	70 91 fe 03 	lds	r23, 0x03FE
    1318:	70 95       	com	r23
    131a:	61 95       	neg	r22
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	70 93 fe 03 	sts	0x03FE, r23
    1322:	60 93 fd 03 	sts	0x03FD, r22
	}
	if(pwm_left_desired < 0) {
    1326:	80 91 e4 03 	lds	r24, 0x03E4
    132a:	90 91 e5 03 	lds	r25, 0x03E5
    132e:	97 ff       	sbrs	r25, 7
    1330:	30 cf       	rjmp	.-416    	; 0x1192 <obstacleAvoidance+0x30>
		speedl = - speedl;
    1332:	40 91 fb 03 	lds	r20, 0x03FB
    1336:	50 91 fc 03 	lds	r21, 0x03FC
    133a:	50 95       	com	r21
    133c:	41 95       	neg	r20
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	50 93 fc 03 	sts	0x03FC, r21
    1344:	40 93 fb 03 	sts	0x03FB, r20
    1348:	28 cf       	rjmp	.-432    	; 0x119a <obstacleAvoidance+0x38>

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    134a:	4f 5f       	subi	r20, 0xFF	; 255
    134c:	5f 4f       	sbci	r21, 0xFF	; 255
    134e:	89 cf       	rjmp	.-238    	; 0x1262 <obstacleAvoidance+0x100>
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    1350:	11 96       	adiw	r26, 0x01	; 1
    1352:	2f cf       	rjmp	.-418    	; 0x11b2 <obstacleAvoidance+0x50>
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
    1354:	21 96       	adiw	r28, 0x01	; 1
    1356:	d5 95       	asr	r29
    1358:	c7 95       	ror	r28
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    135a:	8e 2d       	mov	r24, r14
    135c:	9f 2d       	mov	r25, r15
    135e:	97 ff       	sbrs	r25, 7
    1360:	46 cf       	rjmp	.-372    	; 0x11ee <obstacleAvoidance+0x8c>
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	44 cf       	rjmp	.-376    	; 0x11ee <obstacleAvoidance+0x8c>
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	32 cf       	rjmp	.-412    	; 0x11ce <obstacleAvoidance+0x6c>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	71 cf       	rjmp	.-286    	; 0x1252 <obstacleAvoidance+0xf0>
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	60 cf       	rjmp	.-320    	; 0x1236 <obstacleAvoidance+0xd4>

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	48 cf       	rjmp	.-368    	; 0x120a <obstacleAvoidance+0xa8>

0000137a <cliffAvoidance>:

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    137a:	80 91 53 03 	lds	r24, 0x0353
    137e:	90 91 54 03 	lds	r25, 0x0354
    1382:	20 91 55 03 	lds	r18, 0x0355
    1386:	30 91 56 03 	lds	r19, 0x0356
    138a:	82 1b       	sub	r24, r18
    138c:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    138e:	60 91 57 03 	lds	r22, 0x0357
    1392:	70 91 58 03 	lds	r23, 0x0358
    1396:	20 91 59 03 	lds	r18, 0x0359
    139a:	30 91 5a 03 	lds	r19, 0x035A
    139e:	62 1b       	sub	r22, r18
    13a0:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    13a2:	40 91 5b 03 	lds	r20, 0x035B
    13a6:	50 91 5c 03 	lds	r21, 0x035C
    13aa:	20 91 5d 03 	lds	r18, 0x035D
    13ae:	30 91 5e 03 	lds	r19, 0x035E
    13b2:	42 1b       	sub	r20, r18
    13b4:	53 0b       	sbc	r21, r19
    13b6:	57 fd       	sbrc	r21, 7
    13b8:	4e c0       	rjmp	.+156    	; 0x1456 <cliffAvoidance+0xdc>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    13ba:	20 91 5f 03 	lds	r18, 0x035F
    13be:	30 91 60 03 	lds	r19, 0x0360
    13c2:	e0 91 61 03 	lds	r30, 0x0361
    13c6:	f0 91 62 03 	lds	r31, 0x0362
    13ca:	2e 1b       	sub	r18, r30
    13cc:	3f 0b       	sbc	r19, r31
    13ce:	37 fd       	sbrc	r19, 7
    13d0:	4b c0       	rjmp	.+150    	; 0x1468 <cliffAvoidance+0xee>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    13d2:	97 fd       	sbrc	r25, 7
    13d4:	46 c0       	rjmp	.+140    	; 0x1462 <cliffAvoidance+0xe8>
    13d6:	90 93 30 04 	sts	0x0430, r25
    13da:	80 93 2f 04 	sts	0x042F, r24
	minGround = GROUND_LEFT;
    13de:	e3 e0       	ldi	r30, 0x03	; 3
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	f0 93 1e 02 	sts	0x021E, r31
    13e6:	e0 93 1d 02 	sts	0x021D, r30
	if(g1 < minGroundValue) {
    13ea:	77 fd       	sbrc	r23, 7
    13ec:	37 c0       	rjmp	.+110    	; 0x145c <cliffAvoidance+0xe2>
    13ee:	68 17       	cp	r22, r24
    13f0:	79 07       	cpc	r23, r25
    13f2:	58 f4       	brcc	.+22     	; 0x140a <cliffAvoidance+0x90>
		minGroundValue = g1;
    13f4:	70 93 30 04 	sts	0x0430, r23
    13f8:	60 93 2f 04 	sts	0x042F, r22
		minGround = GROUND_CENTER_LEFT;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	90 93 1e 02 	sts	0x021E, r25
    1404:	80 93 1d 02 	sts	0x021D, r24
    1408:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    140a:	48 17       	cp	r20, r24
    140c:	59 07       	cpc	r21, r25
    140e:	58 f4       	brcc	.+22     	; 0x1426 <cliffAvoidance+0xac>
		minGroundValue = g2;
    1410:	50 93 30 04 	sts	0x0430, r21
    1414:	40 93 2f 04 	sts	0x042F, r20
		minGround = GROUND_CENTER_RIGHT;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	90 93 1e 02 	sts	0x021E, r25
    1420:	80 93 1d 02 	sts	0x021D, r24
    1424:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	48 f4       	brcc	.+18     	; 0x143e <cliffAvoidance+0xc4>
		minGroundValue = g3;
    142c:	30 93 30 04 	sts	0x0430, r19
    1430:	20 93 2f 04 	sts	0x042F, r18
		minGround = GROUND_RIGHT;
    1434:	10 92 1e 02 	sts	0x021E, r1
    1438:	10 92 1d 02 	sts	0x021D, r1
    143c:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    143e:	84 37       	cpi	r24, 0x74	; 116
    1440:	91 05       	cpc	r25, r1
    1442:	40 f4       	brcc	.+16     	; 0x1454 <cliffAvoidance+0xda>
		pwm_right_working = 0;
    1444:	10 92 f7 03 	sts	0x03F7, r1
    1448:	10 92 f6 03 	sts	0x03F6, r1
		pwm_left_working = 0;
    144c:	10 92 f9 03 	sts	0x03F9, r1
    1450:	10 92 f8 03 	sts	0x03F8, r1
    1454:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	af cf       	rjmp	.-162    	; 0x13ba <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	c6 cf       	rjmp	.-116    	; 0x13ee <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	b7 cf       	rjmp	.-146    	; 0x13d6 <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	b2 cf       	rjmp	.-156    	; 0x13d2 <cliffAvoidance+0x58>

0000146e <main>:
		pwm_left_working = 0;
	}

}

int main(void) {
    146e:	2f 92       	push	r2
    1470:	3f 92       	push	r3
    1472:	4f 92       	push	r4
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	a4 97       	sbiw	r28, 0x24	; 36
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61

	unsigned int i = 0;
	choosePeripheral = 1;
    14a2:	ee 24       	eor	r14, r14
    14a4:	e3 94       	inc	r14
    14a6:	e0 92 16 02 	sts	0x0216, r14

	initPeripherals();
    14aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <initPeripherals>

	startCalibration = 1;
    14ae:	e0 92 25 04 	sts	0x0425, r14
	calibrationCycle = 0;
    14b2:	10 92 27 04 	sts	0x0427, r1
    14b6:	10 92 26 04 	sts	0x0426, r1
	updateBlueLed(pwm_blue);				
*/				

	while(1) {

		PORTB ^= (1 << 6); // Toggle the green LED
    14ba:	b0 e4       	ldi	r27, 0x40	; 64
    14bc:	cb 2e       	mov	r12, r27
void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
		curr_position = ORIZZONTAL_POS;
    14be:	dd 24       	eor	r13, r13
    14c0:	d3 94       	inc	r13
	updateBlueLed(pwm_blue);				
*/				

	while(1) {

		PORTB ^= (1 << 6); // Toggle the green LED
    14c2:	85 b1       	in	r24, 0x05	; 5
    14c4:	8c 25       	eor	r24, r12
    14c6:	85 b9       	out	0x05, r24	; 5
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    14c8:	66 b1       	in	r22, 0x06	; 6
    14ca:	46 b1       	in	r20, 0x06	; 6
    14cc:	86 b1       	in	r24, 0x06	; 6
    14ce:	26 b1       	in	r18, 0x06	; 6
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	88 70       	andi	r24, 0x08	; 8
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	95 95       	asr	r25
    14d8:	87 95       	ror	r24
    14da:	95 95       	asr	r25
    14dc:	87 95       	ror	r24
    14de:	95 95       	asr	r25
    14e0:	87 95       	ror	r24
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	44 70       	andi	r20, 0x04	; 4
    14ea:	50 70       	andi	r21, 0x00	; 0
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	55 95       	asr	r21
    14f2:	47 95       	ror	r20
    14f4:	84 0f       	add	r24, r20
    14f6:	95 1f       	adc	r25, r21
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	22 70       	andi	r18, 0x02	; 2
    1500:	30 70       	andi	r19, 0x00	; 0
    1502:	35 95       	asr	r19
    1504:	27 95       	ror	r18
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	88 0f       	add	r24, r24
    150c:	61 70       	andi	r22, 0x01	; 1
    150e:	86 0f       	add	r24, r22

	while(1) {

		PORTB ^= (1 << 6); // Toggle the green LED

		currentSelector = getSelector();
    1510:	80 93 24 04 	sts	0x0424, r24
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
    1514:	0e 94 db 05 	call	0xbb6	; 0xbb6 <readAccelXYZ>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    1518:	80 91 0a 04 	lds	r24, 0x040A
    151c:	90 91 0b 04 	lds	r25, 0x040B
    1520:	97 fd       	sbrc	r25, 7
    1522:	50 c6       	rjmp	.+3232   	; 0x21c4 <main+0xd56>

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
    1524:	80 31       	cpi	r24, 0x10	; 16
    1526:	91 05       	cpc	r25, r1
    1528:	08 f0       	brcs	.+2      	; 0x152c <main+0xbe>
    152a:	a0 c3       	rjmp	.+1856   	; 0x1c6c <main+0x7fe>
		curr_position = ORIZZONTAL_POS;
    152c:	d0 92 1b 02 	sts	0x021B, r13
    1530:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		curr_position = VERTICAL_POS;
	}

	if(prev_position == curr_position) {
    1532:	90 91 1a 02 	lds	r25, 0x021A
    1536:	98 17       	cp	r25, r24
    1538:	09 f4       	brne	.+2      	; 0x153c <main+0xce>
    153a:	a0 c3       	rjmp	.+1856   	; 0x1c7c <main+0x80e>
		if(times_in_same_pos >= SAME_POS_NUM) {
			times_in_same_pos = 0;
			orizzontal_position = curr_position;	// 1 = orizzontal, 0 = vertical
		}
	} else {
		times_in_same_pos = 0;
    153c:	10 92 20 04 	sts	0x0420, r1
	}

	prev_position = curr_position;
    1540:	80 93 1a 02 	sts	0x021A, r24
		updateGreenLed(pwm_green);
		updateBlueLed(pwm_blue);
	}
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
    1544:	60 91 06 04 	lds	r22, 0x0406
    1548:	70 91 07 04 	lds	r23, 0x0407
    154c:	88 27       	eor	r24, r24
    154e:	77 fd       	sbrc	r23, 7
    1550:	80 95       	com	r24
    1552:	98 2f       	mov	r25, r24
    1554:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1558:	7b 01       	movw	r14, r22
    155a:	8c 01       	movw	r16, r24
    155c:	60 91 08 04 	lds	r22, 0x0408
    1560:	70 91 09 04 	lds	r23, 0x0409
    1564:	88 27       	eor	r24, r24
    1566:	77 fd       	sbrc	r23, 7
    1568:	80 95       	com	r24
    156a:	98 2f       	mov	r25, r24
    156c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1570:	9b 01       	movw	r18, r22
    1572:	ac 01       	movw	r20, r24
    1574:	c8 01       	movw	r24, r16
    1576:	b7 01       	movw	r22, r14
    1578:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <atan2>
    157c:	21 ee       	ldi	r18, 0xE1	; 225
    157e:	3e e2       	ldi	r19, 0x2E	; 46
    1580:	45 e6       	ldi	r20, 0x65	; 101
    1582:	52 e4       	ldi	r21, 0x42	; 66
    1584:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsf3>
    1588:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__fixsfsi>
    158c:	9b 01       	movw	r18, r22
    158e:	70 93 19 04 	sts	0x0419, r23
    1592:	60 93 18 04 	sts	0x0418, r22

	if(currentAngle < 0) {
    1596:	77 ff       	sbrs	r23, 7
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <main+0x138>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    159a:	28 59       	subi	r18, 0x98	; 152
    159c:	3e 4f       	sbci	r19, 0xFE	; 254
    159e:	30 93 19 04 	sts	0x0419, r19
    15a2:	20 93 18 04 	sts	0x0418, r18
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
		//PORTB |= (1 << 6);
		computeAngle();

		if(updateProx) {
    15a6:	80 91 9c 03 	lds	r24, 0x039C
    15aa:	88 23       	and	r24, r24
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <main+0x142>
    15ae:	df c0       	rjmp	.+446    	; 0x176e <main+0x300>

			updateProx = 0;
    15b0:	10 92 9c 03 	sts	0x039C, r1
			if(startCalibration) {
    15b4:	80 91 25 04 	lds	r24, 0x0425
    15b8:	88 23       	and	r24, r24
    15ba:	09 f4       	brne	.+2      	; 0x15be <main+0x150>
    15bc:	7a c3       	rjmp	.+1780   	; 0x1cb2 <main+0x844>

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
    15be:	80 91 33 03 	lds	r24, 0x0333
    15c2:	90 91 34 03 	lds	r25, 0x0334
    15c6:	20 91 35 03 	lds	r18, 0x0335
    15ca:	30 91 36 03 	lds	r19, 0x0336
    15ce:	82 1b       	sub	r24, r18
    15d0:	93 0b       	sbc	r25, r19
    15d2:	90 93 64 03 	sts	0x0364, r25
    15d6:	80 93 63 03 	sts	0x0363, r24
				if(proximityResult[0] < 0) {
    15da:	97 ff       	sbrs	r25, 7
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <main+0x174>
    15de:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__stack+0x593>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
    15e2:	80 91 37 03 	lds	r24, 0x0337
    15e6:	90 91 38 03 	lds	r25, 0x0338
    15ea:	20 91 39 03 	lds	r18, 0x0339
    15ee:	30 91 3a 03 	lds	r19, 0x033A
    15f2:	82 1b       	sub	r24, r18
    15f4:	93 0b       	sbc	r25, r19
    15f6:	90 93 66 03 	sts	0x0366, r25
    15fa:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[1] < 0) {
    15fe:	97 ff       	sbrs	r25, 7
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <main+0x198>
    1602:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__stack+0x4e9>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
    1606:	80 91 3b 03 	lds	r24, 0x033B
    160a:	90 91 3c 03 	lds	r25, 0x033C
    160e:	20 91 3d 03 	lds	r18, 0x033D
    1612:	30 91 3e 03 	lds	r19, 0x033E
    1616:	82 1b       	sub	r24, r18
    1618:	93 0b       	sbc	r25, r19
    161a:	90 93 68 03 	sts	0x0368, r25
    161e:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[2] < 0) {
    1622:	97 ff       	sbrs	r25, 7
    1624:	02 c0       	rjmp	.+4      	; 0x162a <main+0x1bc>
    1626:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__stack+0x4dd>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
    162a:	80 91 3f 03 	lds	r24, 0x033F
    162e:	90 91 40 03 	lds	r25, 0x0340
    1632:	20 91 41 03 	lds	r18, 0x0341
    1636:	30 91 42 03 	lds	r19, 0x0342
    163a:	82 1b       	sub	r24, r18
    163c:	93 0b       	sbc	r25, r19
    163e:	90 93 6a 03 	sts	0x036A, r25
    1642:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[3] < 0) {
    1646:	97 ff       	sbrs	r25, 7
    1648:	02 c0       	rjmp	.+4      	; 0x164e <main+0x1e0>
    164a:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__stack+0x519>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
    164e:	80 91 43 03 	lds	r24, 0x0343
    1652:	90 91 44 03 	lds	r25, 0x0344
    1656:	20 91 45 03 	lds	r18, 0x0345
    165a:	30 91 46 03 	lds	r19, 0x0346
    165e:	82 1b       	sub	r24, r18
    1660:	93 0b       	sbc	r25, r19
    1662:	90 93 6c 03 	sts	0x036C, r25
    1666:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[4] < 0) {
    166a:	97 ff       	sbrs	r25, 7
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <main+0x204>
    166e:	0c 94 86 13 	jmp	0x270c	; 0x270c <__stack+0x50d>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
    1672:	80 91 47 03 	lds	r24, 0x0347
    1676:	90 91 48 03 	lds	r25, 0x0348
    167a:	20 91 49 03 	lds	r18, 0x0349
    167e:	30 91 4a 03 	lds	r19, 0x034A
    1682:	82 1b       	sub	r24, r18
    1684:	93 0b       	sbc	r25, r19
    1686:	90 93 6e 03 	sts	0x036E, r25
    168a:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[5] < 0) {
    168e:	97 ff       	sbrs	r25, 7
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <main+0x228>
    1692:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__stack+0x501>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
    1696:	80 91 4b 03 	lds	r24, 0x034B
    169a:	90 91 4c 03 	lds	r25, 0x034C
    169e:	20 91 4d 03 	lds	r18, 0x034D
    16a2:	30 91 4e 03 	lds	r19, 0x034E
    16a6:	82 1b       	sub	r24, r18
    16a8:	93 0b       	sbc	r25, r19
    16aa:	90 93 70 03 	sts	0x0370, r25
    16ae:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[6] < 0) {
    16b2:	97 ff       	sbrs	r25, 7
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <main+0x24c>
    16b6:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__stack+0x4f5>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
    16ba:	80 91 4f 03 	lds	r24, 0x034F
    16be:	90 91 50 03 	lds	r25, 0x0350
    16c2:	20 91 51 03 	lds	r18, 0x0351
    16c6:	30 91 52 03 	lds	r19, 0x0352
    16ca:	82 1b       	sub	r24, r18
    16cc:	93 0b       	sbc	r25, r19
    16ce:	90 93 72 03 	sts	0x0372, r25
    16d2:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[7] < 0) {
    16d6:	97 ff       	sbrs	r25, 7
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <main+0x270>
    16da:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__stack+0x5c3>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    16de:	80 91 53 03 	lds	r24, 0x0353
    16e2:	90 91 54 03 	lds	r25, 0x0354
    16e6:	20 91 55 03 	lds	r18, 0x0355
    16ea:	30 91 56 03 	lds	r19, 0x0356
    16ee:	82 1b       	sub	r24, r18
    16f0:	93 0b       	sbc	r25, r19
    16f2:	90 93 74 03 	sts	0x0374, r25
    16f6:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[8] < 0) {
    16fa:	97 ff       	sbrs	r25, 7
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <main+0x294>
    16fe:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__stack+0x5b7>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    1702:	80 91 57 03 	lds	r24, 0x0357
    1706:	90 91 58 03 	lds	r25, 0x0358
    170a:	20 91 59 03 	lds	r18, 0x0359
    170e:	30 91 5a 03 	lds	r19, 0x035A
    1712:	82 1b       	sub	r24, r18
    1714:	93 0b       	sbc	r25, r19
    1716:	90 93 76 03 	sts	0x0376, r25
    171a:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[9] < 0) {
    171e:	97 ff       	sbrs	r25, 7
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <main+0x2b8>
    1722:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__stack+0x5ab>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1726:	80 91 5b 03 	lds	r24, 0x035B
    172a:	90 91 5c 03 	lds	r25, 0x035C
    172e:	20 91 5d 03 	lds	r18, 0x035D
    1732:	30 91 5e 03 	lds	r19, 0x035E
    1736:	82 1b       	sub	r24, r18
    1738:	93 0b       	sbc	r25, r19
    173a:	90 93 78 03 	sts	0x0378, r25
    173e:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[10] < 0) {
    1742:	97 ff       	sbrs	r25, 7
    1744:	02 c0       	rjmp	.+4      	; 0x174a <main+0x2dc>
    1746:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__stack+0x59f>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    174a:	80 91 5f 03 	lds	r24, 0x035F
    174e:	90 91 60 03 	lds	r25, 0x0360
    1752:	20 91 61 03 	lds	r18, 0x0361
    1756:	30 91 62 03 	lds	r19, 0x0362
    175a:	82 1b       	sub	r24, r18
    175c:	93 0b       	sbc	r25, r19
    175e:	90 93 7a 03 	sts	0x037A, r25
    1762:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[11] < 0) {
    1766:	97 fd       	sbrc	r25, 7
    1768:	ac c3       	rjmp	.+1880   	; 0x1ec2 <main+0xa54>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
    176a:	d0 92 cd 03 	sts	0x03CD, r13
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
    176e:	80 91 22 04 	lds	r24, 0x0422
    1772:	90 91 23 04 	lds	r25, 0x0423
    1776:	2e e4       	ldi	r18, 0x4E	; 78
    1778:	80 32       	cpi	r24, 0x20	; 32
    177a:	92 07       	cpc	r25, r18
    177c:	08 f0       	brcs	.+2      	; 0x1780 <main+0x312>
    177e:	94 c2       	rjmp	.+1320   	; 0x1ca8 <main+0x83a>
			}
			*/
		}


		if(startCalibration && calibrationCycle<CALIBRATION_CYCLES) {
    1780:	80 91 25 04 	lds	r24, 0x0425
    1784:	88 23       	and	r24, r24
    1786:	09 f4       	brne	.+2      	; 0x178a <main+0x31c>
    1788:	dd c1       	rjmp	.+954    	; 0x1b44 <main+0x6d6>
    178a:	60 91 26 04 	lds	r22, 0x0426
    178e:	70 91 27 04 	lds	r23, 0x0427
    1792:	60 31       	cpi	r22, 0x10	; 16
    1794:	71 05       	cpc	r23, r1
    1796:	0c f0       	brlt	.+2      	; 0x179a <main+0x32c>
    1798:	d9 c1       	rjmp	.+946    	; 0x1b4c <main+0x6de>

			if(proxUpdated) {
    179a:	80 91 cd 03 	lds	r24, 0x03CD
    179e:	88 23       	and	r24, r24
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <main+0x336>
    17a2:	8f ce       	rjmp	.-738    	; 0x14c2 <main+0x54>

				proxUpdated = 0;
    17a4:	10 92 cd 03 	sts	0x03CD, r1
				
				if(calibrationCycle==0) {
    17a8:	61 15       	cp	r22, r1
    17aa:	71 05       	cpc	r23, r1
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <main+0x344>
    17ae:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__stack+0x5cf>
    17b2:	40 91 1a 04 	lds	r20, 0x041A
    17b6:	50 91 1b 04 	lds	r21, 0x041B
    17ba:	5c a3       	std	Y+36, r21	; 0x24
    17bc:	4b a3       	std	Y+35, r20	; 0x23
    17be:	20 90 1c 04 	lds	r2, 0x041C
    17c2:	30 90 1d 04 	lds	r3, 0x041D
    17c6:	80 91 1e 04 	lds	r24, 0x041E
    17ca:	90 91 1f 04 	lds	r25, 0x041F
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	20 91 9d 03 	lds	r18, 0x039D
    17d6:	30 91 9e 03 	lds	r19, 0x039E
    17da:	40 91 9f 03 	lds	r20, 0x039F
    17de:	50 91 a0 03 	lds	r21, 0x03A0
    17e2:	e0 90 a1 03 	lds	r14, 0x03A1
    17e6:	f0 90 a2 03 	lds	r15, 0x03A2
    17ea:	00 91 a3 03 	lds	r16, 0x03A3
    17ee:	10 91 a4 03 	lds	r17, 0x03A4
    17f2:	80 90 a5 03 	lds	r8, 0x03A5
    17f6:	90 90 a6 03 	lds	r9, 0x03A6
    17fa:	a0 90 a7 03 	lds	r10, 0x03A7
    17fe:	b0 90 a8 03 	lds	r11, 0x03A8
    1802:	40 90 a9 03 	lds	r4, 0x03A9
    1806:	50 90 aa 03 	lds	r5, 0x03AA
    180a:	60 90 ab 03 	lds	r6, 0x03AB
    180e:	70 90 ac 03 	lds	r7, 0x03AC
    1812:	80 91 ad 03 	lds	r24, 0x03AD
    1816:	90 91 ae 03 	lds	r25, 0x03AE
    181a:	a0 91 af 03 	lds	r26, 0x03AF
    181e:	b0 91 b0 03 	lds	r27, 0x03B0
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	ad 83       	std	Y+5, r26	; 0x05
    1828:	be 83       	std	Y+6, r27	; 0x06
    182a:	80 91 b1 03 	lds	r24, 0x03B1
    182e:	90 91 b2 03 	lds	r25, 0x03B2
    1832:	a0 91 b3 03 	lds	r26, 0x03B3
    1836:	b0 91 b4 03 	lds	r27, 0x03B4
    183a:	8f 83       	std	Y+7, r24	; 0x07
    183c:	98 87       	std	Y+8, r25	; 0x08
    183e:	a9 87       	std	Y+9, r26	; 0x09
    1840:	ba 87       	std	Y+10, r27	; 0x0a
    1842:	80 91 b5 03 	lds	r24, 0x03B5
    1846:	90 91 b6 03 	lds	r25, 0x03B6
    184a:	a0 91 b7 03 	lds	r26, 0x03B7
    184e:	b0 91 b8 03 	lds	r27, 0x03B8
    1852:	8b 87       	std	Y+11, r24	; 0x0b
    1854:	9c 87       	std	Y+12, r25	; 0x0c
    1856:	ad 87       	std	Y+13, r26	; 0x0d
    1858:	be 87       	std	Y+14, r27	; 0x0e
    185a:	80 91 b9 03 	lds	r24, 0x03B9
    185e:	90 91 ba 03 	lds	r25, 0x03BA
    1862:	a0 91 bb 03 	lds	r26, 0x03BB
    1866:	b0 91 bc 03 	lds	r27, 0x03BC
    186a:	8f 87       	std	Y+15, r24	; 0x0f
    186c:	98 8b       	std	Y+16, r25	; 0x10
    186e:	a9 8b       	std	Y+17, r26	; 0x11
    1870:	ba 8b       	std	Y+18, r27	; 0x12
    1872:	80 91 bd 03 	lds	r24, 0x03BD
    1876:	90 91 be 03 	lds	r25, 0x03BE
    187a:	a0 91 bf 03 	lds	r26, 0x03BF
    187e:	b0 91 c0 03 	lds	r27, 0x03C0
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	ad 8b       	std	Y+21, r26	; 0x15
    1888:	be 8b       	std	Y+22, r27	; 0x16
    188a:	80 91 c1 03 	lds	r24, 0x03C1
    188e:	90 91 c2 03 	lds	r25, 0x03C2
    1892:	a0 91 c3 03 	lds	r26, 0x03C3
    1896:	b0 91 c4 03 	lds	r27, 0x03C4
    189a:	8f 8b       	std	Y+23, r24	; 0x17
    189c:	98 8f       	std	Y+24, r25	; 0x18
    189e:	a9 8f       	std	Y+25, r26	; 0x19
    18a0:	ba 8f       	std	Y+26, r27	; 0x1a
    18a2:	80 91 c5 03 	lds	r24, 0x03C5
    18a6:	90 91 c6 03 	lds	r25, 0x03C6
    18aa:	a0 91 c7 03 	lds	r26, 0x03C7
    18ae:	b0 91 c8 03 	lds	r27, 0x03C8
    18b2:	8b 8f       	std	Y+27, r24	; 0x1b
    18b4:	9c 8f       	std	Y+28, r25	; 0x1c
    18b6:	ad 8f       	std	Y+29, r26	; 0x1d
    18b8:	be 8f       	std	Y+30, r27	; 0x1e
    18ba:	80 91 c9 03 	lds	r24, 0x03C9
    18be:	90 91 ca 03 	lds	r25, 0x03CA
    18c2:	a0 91 cb 03 	lds	r26, 0x03CB
    18c6:	b0 91 cc 03 	lds	r27, 0x03CC
    18ca:	8f 8f       	std	Y+31, r24	; 0x1f
    18cc:	98 a3       	std	Y+32, r25	; 0x20
    18ce:	a9 a3       	std	Y+33, r26	; 0x21
    18d0:	ba a3       	std	Y+34, r27	; 0x22
					accOffsetYSum = 0;
					accOffsetZSum = 0;
				}
			
				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    18d2:	80 91 63 03 	lds	r24, 0x0363
    18d6:	90 91 64 03 	lds	r25, 0x0364
    18da:	aa 27       	eor	r26, r26
    18dc:	97 fd       	sbrc	r25, 7
    18de:	a0 95       	com	r26
    18e0:	ba 2f       	mov	r27, r26
    18e2:	82 0f       	add	r24, r18
    18e4:	93 1f       	adc	r25, r19
    18e6:	a4 1f       	adc	r26, r20
    18e8:	b5 1f       	adc	r27, r21
    18ea:	80 93 9d 03 	sts	0x039D, r24
    18ee:	90 93 9e 03 	sts	0x039E, r25
    18f2:	a0 93 9f 03 	sts	0x039F, r26
    18f6:	b0 93 a0 03 	sts	0x03A0, r27
    18fa:	80 91 65 03 	lds	r24, 0x0365
    18fe:	90 91 66 03 	lds	r25, 0x0366
    1902:	aa 27       	eor	r26, r26
    1904:	97 fd       	sbrc	r25, 7
    1906:	a0 95       	com	r26
    1908:	ba 2f       	mov	r27, r26
    190a:	8e 0d       	add	r24, r14
    190c:	9f 1d       	adc	r25, r15
    190e:	a0 1f       	adc	r26, r16
    1910:	b1 1f       	adc	r27, r17
    1912:	80 93 a1 03 	sts	0x03A1, r24
    1916:	90 93 a2 03 	sts	0x03A2, r25
    191a:	a0 93 a3 03 	sts	0x03A3, r26
    191e:	b0 93 a4 03 	sts	0x03A4, r27
    1922:	80 91 67 03 	lds	r24, 0x0367
    1926:	90 91 68 03 	lds	r25, 0x0368
    192a:	aa 27       	eor	r26, r26
    192c:	97 fd       	sbrc	r25, 7
    192e:	a0 95       	com	r26
    1930:	ba 2f       	mov	r27, r26
    1932:	88 0d       	add	r24, r8
    1934:	99 1d       	adc	r25, r9
    1936:	aa 1d       	adc	r26, r10
    1938:	bb 1d       	adc	r27, r11
    193a:	80 93 a5 03 	sts	0x03A5, r24
    193e:	90 93 a6 03 	sts	0x03A6, r25
    1942:	a0 93 a7 03 	sts	0x03A7, r26
    1946:	b0 93 a8 03 	sts	0x03A8, r27
    194a:	80 91 69 03 	lds	r24, 0x0369
    194e:	90 91 6a 03 	lds	r25, 0x036A
    1952:	aa 27       	eor	r26, r26
    1954:	97 fd       	sbrc	r25, 7
    1956:	a0 95       	com	r26
    1958:	ba 2f       	mov	r27, r26
    195a:	84 0d       	add	r24, r4
    195c:	95 1d       	adc	r25, r5
    195e:	a6 1d       	adc	r26, r6
    1960:	b7 1d       	adc	r27, r7
    1962:	80 93 a9 03 	sts	0x03A9, r24
    1966:	90 93 aa 03 	sts	0x03AA, r25
    196a:	a0 93 ab 03 	sts	0x03AB, r26
    196e:	b0 93 ac 03 	sts	0x03AC, r27
    1972:	80 91 6b 03 	lds	r24, 0x036B
    1976:	90 91 6c 03 	lds	r25, 0x036C
    197a:	aa 27       	eor	r26, r26
    197c:	97 fd       	sbrc	r25, 7
    197e:	a0 95       	com	r26
    1980:	ba 2f       	mov	r27, r26
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	4d 81       	ldd	r20, Y+5	; 0x05
    1988:	5e 81       	ldd	r21, Y+6	; 0x06
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	a4 1f       	adc	r26, r20
    1990:	b5 1f       	adc	r27, r21
    1992:	80 93 ad 03 	sts	0x03AD, r24
    1996:	90 93 ae 03 	sts	0x03AE, r25
    199a:	a0 93 af 03 	sts	0x03AF, r26
    199e:	b0 93 b0 03 	sts	0x03B0, r27
    19a2:	80 91 6d 03 	lds	r24, 0x036D
    19a6:	90 91 6e 03 	lds	r25, 0x036E
    19aa:	aa 27       	eor	r26, r26
    19ac:	97 fd       	sbrc	r25, 7
    19ae:	a0 95       	com	r26
    19b0:	ba 2f       	mov	r27, r26
    19b2:	2f 81       	ldd	r18, Y+7	; 0x07
    19b4:	38 85       	ldd	r19, Y+8	; 0x08
    19b6:	49 85       	ldd	r20, Y+9	; 0x09
    19b8:	5a 85       	ldd	r21, Y+10	; 0x0a
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	a4 1f       	adc	r26, r20
    19c0:	b5 1f       	adc	r27, r21
    19c2:	80 93 b1 03 	sts	0x03B1, r24
    19c6:	90 93 b2 03 	sts	0x03B2, r25
    19ca:	a0 93 b3 03 	sts	0x03B3, r26
    19ce:	b0 93 b4 03 	sts	0x03B4, r27
    19d2:	80 91 6f 03 	lds	r24, 0x036F
    19d6:	90 91 70 03 	lds	r25, 0x0370
    19da:	aa 27       	eor	r26, r26
    19dc:	97 fd       	sbrc	r25, 7
    19de:	a0 95       	com	r26
    19e0:	ba 2f       	mov	r27, r26
    19e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    19e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    19e6:	4d 85       	ldd	r20, Y+13	; 0x0d
    19e8:	5e 85       	ldd	r21, Y+14	; 0x0e
    19ea:	82 0f       	add	r24, r18
    19ec:	93 1f       	adc	r25, r19
    19ee:	a4 1f       	adc	r26, r20
    19f0:	b5 1f       	adc	r27, r21
    19f2:	80 93 b5 03 	sts	0x03B5, r24
    19f6:	90 93 b6 03 	sts	0x03B6, r25
    19fa:	a0 93 b7 03 	sts	0x03B7, r26
    19fe:	b0 93 b8 03 	sts	0x03B8, r27
    1a02:	80 91 71 03 	lds	r24, 0x0371
    1a06:	90 91 72 03 	lds	r25, 0x0372
    1a0a:	aa 27       	eor	r26, r26
    1a0c:	97 fd       	sbrc	r25, 7
    1a0e:	a0 95       	com	r26
    1a10:	ba 2f       	mov	r27, r26
    1a12:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a14:	38 89       	ldd	r19, Y+16	; 0x10
    1a16:	49 89       	ldd	r20, Y+17	; 0x11
    1a18:	5a 89       	ldd	r21, Y+18	; 0x12
    1a1a:	82 0f       	add	r24, r18
    1a1c:	93 1f       	adc	r25, r19
    1a1e:	a4 1f       	adc	r26, r20
    1a20:	b5 1f       	adc	r27, r21
    1a22:	80 93 b9 03 	sts	0x03B9, r24
    1a26:	90 93 ba 03 	sts	0x03BA, r25
    1a2a:	a0 93 bb 03 	sts	0x03BB, r26
    1a2e:	b0 93 bc 03 	sts	0x03BC, r27
    1a32:	80 91 73 03 	lds	r24, 0x0373
    1a36:	90 91 74 03 	lds	r25, 0x0374
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	97 fd       	sbrc	r25, 7
    1a3e:	a0 95       	com	r26
    1a40:	ba 2f       	mov	r27, r26
    1a42:	2b 89       	ldd	r18, Y+19	; 0x13
    1a44:	3c 89       	ldd	r19, Y+20	; 0x14
    1a46:	4d 89       	ldd	r20, Y+21	; 0x15
    1a48:	5e 89       	ldd	r21, Y+22	; 0x16
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	a4 1f       	adc	r26, r20
    1a50:	b5 1f       	adc	r27, r21
    1a52:	80 93 bd 03 	sts	0x03BD, r24
    1a56:	90 93 be 03 	sts	0x03BE, r25
    1a5a:	a0 93 bf 03 	sts	0x03BF, r26
    1a5e:	b0 93 c0 03 	sts	0x03C0, r27
    1a62:	80 91 75 03 	lds	r24, 0x0375
    1a66:	90 91 76 03 	lds	r25, 0x0376
    1a6a:	aa 27       	eor	r26, r26
    1a6c:	97 fd       	sbrc	r25, 7
    1a6e:	a0 95       	com	r26
    1a70:	ba 2f       	mov	r27, r26
    1a72:	2f 89       	ldd	r18, Y+23	; 0x17
    1a74:	38 8d       	ldd	r19, Y+24	; 0x18
    1a76:	49 8d       	ldd	r20, Y+25	; 0x19
    1a78:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	a4 1f       	adc	r26, r20
    1a80:	b5 1f       	adc	r27, r21
    1a82:	80 93 c1 03 	sts	0x03C1, r24
    1a86:	90 93 c2 03 	sts	0x03C2, r25
    1a8a:	a0 93 c3 03 	sts	0x03C3, r26
    1a8e:	b0 93 c4 03 	sts	0x03C4, r27
    1a92:	80 91 77 03 	lds	r24, 0x0377
    1a96:	90 91 78 03 	lds	r25, 0x0378
    1a9a:	aa 27       	eor	r26, r26
    1a9c:	97 fd       	sbrc	r25, 7
    1a9e:	a0 95       	com	r26
    1aa0:	ba 2f       	mov	r27, r26
    1aa2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1aa4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1aa6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1aa8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1aaa:	82 0f       	add	r24, r18
    1aac:	93 1f       	adc	r25, r19
    1aae:	a4 1f       	adc	r26, r20
    1ab0:	b5 1f       	adc	r27, r21
    1ab2:	80 93 c5 03 	sts	0x03C5, r24
    1ab6:	90 93 c6 03 	sts	0x03C6, r25
    1aba:	a0 93 c7 03 	sts	0x03C7, r26
    1abe:	b0 93 c8 03 	sts	0x03C8, r27
    1ac2:	80 91 79 03 	lds	r24, 0x0379
    1ac6:	90 91 7a 03 	lds	r25, 0x037A
    1aca:	aa 27       	eor	r26, r26
    1acc:	97 fd       	sbrc	r25, 7
    1ace:	a0 95       	com	r26
    1ad0:	ba 2f       	mov	r27, r26
    1ad2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1ad4:	38 a1       	ldd	r19, Y+32	; 0x20
    1ad6:	49 a1       	ldd	r20, Y+33	; 0x21
    1ad8:	5a a1       	ldd	r21, Y+34	; 0x22
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	a4 1f       	adc	r26, r20
    1ae0:	b5 1f       	adc	r27, r21
    1ae2:	80 93 c9 03 	sts	0x03C9, r24
    1ae6:	90 93 ca 03 	sts	0x03CA, r25
    1aea:	a0 93 cb 03 	sts	0x03CB, r26
    1aee:	b0 93 cc 03 	sts	0x03CC, r27
				}		

				accOffsetXSum += accX;
    1af2:	80 91 06 04 	lds	r24, 0x0406
    1af6:	90 91 07 04 	lds	r25, 0x0407
    1afa:	4b a1       	ldd	r20, Y+35	; 0x23
    1afc:	5c a1       	ldd	r21, Y+36	; 0x24
    1afe:	84 0f       	add	r24, r20
    1b00:	95 1f       	adc	r25, r21
    1b02:	90 93 1b 04 	sts	0x041B, r25
    1b06:	80 93 1a 04 	sts	0x041A, r24
				accOffsetYSum += accY;
    1b0a:	80 91 08 04 	lds	r24, 0x0408
    1b0e:	90 91 09 04 	lds	r25, 0x0409
    1b12:	82 0d       	add	r24, r2
    1b14:	93 1d       	adc	r25, r3
    1b16:	90 93 1d 04 	sts	0x041D, r25
    1b1a:	80 93 1c 04 	sts	0x041C, r24
				accOffsetZSum += accZ;
    1b1e:	80 91 0a 04 	lds	r24, 0x040A
    1b22:	90 91 0b 04 	lds	r25, 0x040B
    1b26:	a9 81       	ldd	r26, Y+1	; 0x01
    1b28:	ba 81       	ldd	r27, Y+2	; 0x02
    1b2a:	8a 0f       	add	r24, r26
    1b2c:	9b 1f       	adc	r25, r27
    1b2e:	90 93 1f 04 	sts	0x041F, r25
    1b32:	80 93 1e 04 	sts	0x041E, r24
				
				calibrationCycle++;
    1b36:	6f 5f       	subi	r22, 0xFF	; 255
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	70 93 27 04 	sts	0x0427, r23
    1b3e:	60 93 26 04 	sts	0x0426, r22
    1b42:	bf cc       	rjmp	.-1666   	; 0x14c2 <main+0x54>
    1b44:	60 91 26 04 	lds	r22, 0x0426
    1b48:	70 91 27 04 	lds	r23, 0x0427
	
			}

			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {
    1b4c:	60 31       	cpi	r22, 0x10	; 16
    1b4e:	71 05       	cpc	r23, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <main+0x6e6>
    1b52:	3c c3       	rjmp	.+1656   	; 0x21cc <main+0xd5e>
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
    1b54:	80 91 17 02 	lds	r24, 0x0217
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <main+0x6f0>
    1b5c:	05 c3       	rjmp	.+1546   	; 0x2168 <main+0xcfa>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
    1b5e:	80 91 22 04 	lds	r24, 0x0422
    1b62:	90 91 23 04 	lds	r25, 0x0423
    1b66:	ae e4       	ldi	r26, 0x4E	; 78
    1b68:	80 32       	cpi	r24, 0x20	; 32
    1b6a:	9a 07       	cpc	r25, r26
    1b6c:	20 f0       	brcs	.+8      	; 0x1b76 <main+0x708>
			delayCounter = 0;
    1b6e:	10 92 23 04 	sts	0x0423, r1
    1b72:	10 92 22 04 	sts	0x0422, r1
			usartTransmit(CHARGE_ON);								
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
    1b76:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <mirf_data_ready>
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <main+0x712>
    1b7e:	a6 c1       	rjmp	.+844    	; 0x1ecc <main+0xa5e>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
    1b80:	80 91 24 04 	lds	r24, 0x0424
    1b84:	88 23       	and	r24, r24
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <main+0x71c>
    1b88:	86 c0       	rjmp	.+268    	; 0x1c96 <main+0x828>

			// compute velocities even if they aren't used...
			if(compute_left_vel) {
    1b8a:	80 91 f2 03 	lds	r24, 0x03F2
    1b8e:	88 23       	and	r24, r24
    1b90:	b1 f0       	breq	.+44     	; 0x1bbe <main+0x750>
				last_left_vel = left_vel_sum>>3;
    1b92:	80 91 d6 03 	lds	r24, 0x03D6
    1b96:	90 91 d7 03 	lds	r25, 0x03D7
    1b9a:	96 95       	lsr	r25
    1b9c:	87 95       	ror	r24
    1b9e:	96 95       	lsr	r25
    1ba0:	87 95       	ror	r24
    1ba2:	96 95       	lsr	r25
    1ba4:	87 95       	ror	r24
    1ba6:	90 93 db 03 	sts	0x03DB, r25
    1baa:	80 93 da 03 	sts	0x03DA, r24
				left_vel_changed = 1;
    1bae:	d0 92 f4 03 	sts	0x03F4, r13
				compute_left_vel = 0;
    1bb2:	10 92 f2 03 	sts	0x03F2, r1
				left_vel_sum = 0;
    1bb6:	10 92 d7 03 	sts	0x03D7, r1
    1bba:	10 92 d6 03 	sts	0x03D6, r1
			}

			if(compute_right_vel) {
    1bbe:	80 91 f3 03 	lds	r24, 0x03F3
    1bc2:	88 23       	and	r24, r24
    1bc4:	b1 f0       	breq	.+44     	; 0x1bf2 <main+0x784>
				last_right_vel = right_vel_sum>>3;
    1bc6:	80 91 d8 03 	lds	r24, 0x03D8
    1bca:	90 91 d9 03 	lds	r25, 0x03D9
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	96 95       	lsr	r25
    1bd4:	87 95       	ror	r24
    1bd6:	96 95       	lsr	r25
    1bd8:	87 95       	ror	r24
    1bda:	90 93 dd 03 	sts	0x03DD, r25
    1bde:	80 93 dc 03 	sts	0x03DC, r24
				right_vel_changed = 1;
    1be2:	d0 92 f5 03 	sts	0x03F5, r13
				compute_right_vel = 0;
    1be6:	10 92 f3 03 	sts	0x03F3, r1
				right_vel_sum = 0;
    1bea:	10 92 d9 03 	sts	0x03D9, r1
    1bee:	10 92 d8 03 	sts	0x03D8, r1
			}

			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    1bf2:	80 91 e2 03 	lds	r24, 0x03E2
    1bf6:	90 91 e3 03 	lds	r25, 0x03E3
    1bfa:	90 93 f7 03 	sts	0x03F7, r25
    1bfe:	80 93 f6 03 	sts	0x03F6, r24
			pwm_left_working = pwm_left_desired;
    1c02:	80 91 e4 03 	lds	r24, 0x03E4
    1c06:	90 91 e5 03 	lds	r25, 0x03E5
    1c0a:	90 93 f9 03 	sts	0x03F9, r25
    1c0e:	80 93 f8 03 	sts	0x03F8, r24
				
			if(obstacleAvoidanceEnabled) {
    1c12:	80 91 29 04 	lds	r24, 0x0429
    1c16:	88 23       	and	r24, r24
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <main+0x7ae>
    1c1a:	9e c4       	rjmp	.+2364   	; 0x2558 <__stack+0x359>
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
				//PORTB |= (1 << 7);				
			}
				
			if(cliffAvoidanceEnabled) {
    1c1c:	80 91 2e 04 	lds	r24, 0x042E
    1c20:	88 23       	and	r24, r24
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <main+0x7b8>
    1c24:	26 c4       	rjmp	.+2124   	; 0x2472 <__stack+0x273>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
    1c26:	20 91 f8 03 	lds	r18, 0x03F8
    1c2a:	30 91 f9 03 	lds	r19, 0x03F9
    1c2e:	80 91 f6 03 	lds	r24, 0x03F6
    1c32:	90 91 f7 03 	lds	r25, 0x03F7

			update_pwm = 0;
    1c36:	10 92 fa 03 	sts	0x03FA, r1
			pwm_left = pwm_left_working;
    1c3a:	30 93 e1 03 	sts	0x03E1, r19
    1c3e:	20 93 e0 03 	sts	0x03E0, r18
			pwm_right = pwm_right_working;
    1c42:	90 93 df 03 	sts	0x03DF, r25
    1c46:	80 93 de 03 	sts	0x03DE, r24

			if(pwm_right >= 0) {
    1c4a:	97 fd       	sbrc	r25, 7
    1c4c:	ce c4       	rjmp	.+2460   	; 0x25ea <__stack+0x3eb>
				OCR3A = (unsigned int)pwm_right;
    1c4e:	90 93 99 00 	sts	0x0099, r25
    1c52:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (unsigned int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    1c56:	80 91 e0 03 	lds	r24, 0x03E0
    1c5a:	90 91 e1 03 	lds	r25, 0x03E1
    1c5e:	97 fd       	sbrc	r25, 7
    1c60:	bb c4       	rjmp	.+2422   	; 0x25d8 <__stack+0x3d9>
				OCR4A = (unsigned int)pwm_left;
    1c62:	90 93 a9 00 	sts	0x00A9, r25
    1c66:	80 93 a8 00 	sts	0x00A8, r24
    1c6a:	2b cc       	rjmp	.-1962   	; 0x14c2 <main+0x54>
	unsigned int abs_acc_z=abs(accZ);

	if(abs_acc_z <= NULL_ANGLE_THRESHOLD) { // && abs_acc_y <= NULL_ANGLE_THRESHOLD) {
		curr_position = ORIZZONTAL_POS;
	} else {
		curr_position = VERTICAL_POS;
    1c6c:	10 92 1b 02 	sts	0x021B, r1
    1c70:	80 e0       	ldi	r24, 0x00	; 0
	}

	if(prev_position == curr_position) {
    1c72:	90 91 1a 02 	lds	r25, 0x021A
    1c76:	98 17       	cp	r25, r24
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <main+0x80e>
    1c7a:	60 cc       	rjmp	.-1856   	; 0x153c <main+0xce>
		times_in_same_pos++;
    1c7c:	90 91 20 04 	lds	r25, 0x0420
    1c80:	9f 5f       	subi	r25, 0xFF	; 255
    1c82:	90 93 20 04 	sts	0x0420, r25
		if(times_in_same_pos >= SAME_POS_NUM) {
    1c86:	95 30       	cpi	r25, 0x05	; 5
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <main+0x81e>
    1c8a:	5a cc       	rjmp	.-1868   	; 0x1540 <main+0xd2>
			times_in_same_pos = 0;
    1c8c:	10 92 20 04 	sts	0x0420, r1
			orizzontal_position = curr_position;	// 1 = orizzontal, 0 = vertical
    1c90:	80 93 1c 02 	sts	0x021C, r24
    1c94:	55 cc       	rjmp	.-1878   	; 0x1540 <main+0xd2>
				cliffAvoidance();
			}
			
			update_pwm = 1;

		} else if(currentSelector == 2) {		// speed control
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <main+0x82e>
    1c9a:	61 c4       	rjmp	.+2242   	; 0x255e <__stack+0x35f>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
    1c9c:	80 91 fa 03 	lds	r24, 0x03FA
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <main+0x838>
    1ca4:	0e cc       	rjmp	.-2020   	; 0x14c2 <main+0x54>
    1ca6:	bf cf       	rjmp	.-130    	; 0x1c26 <main+0x7b8>
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
			measBattery = 1;
    1ca8:	d0 92 99 03 	sts	0x0399, r13
			sleep(60);
    1cac:	0e 94 b0 01 	call	0x360	; 0x360 <sleep.clone.0>
    1cb0:	67 cd       	rjmp	.-1330   	; 0x1780 <main+0x312>
					proximityResult[11] = 0;
				}

			} else { 

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
    1cb2:	80 91 33 03 	lds	r24, 0x0333
    1cb6:	90 91 34 03 	lds	r25, 0x0334
    1cba:	20 91 35 03 	lds	r18, 0x0335
    1cbe:	30 91 36 03 	lds	r19, 0x0336
    1cc2:	82 1b       	sub	r24, r18
    1cc4:	93 0b       	sbc	r25, r19
    1cc6:	20 91 7b 03 	lds	r18, 0x037B
    1cca:	30 91 7c 03 	lds	r19, 0x037C
    1cce:	82 1b       	sub	r24, r18
    1cd0:	93 0b       	sbc	r25, r19
    1cd2:	90 93 64 03 	sts	0x0364, r25
    1cd6:	80 93 63 03 	sts	0x0363, r24
				if(proximityResult[0] < 0) {
    1cda:	97 fd       	sbrc	r25, 7
    1cdc:	55 c5       	rjmp	.+2730   	; 0x2788 <__stack+0x589>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
    1cde:	80 91 37 03 	lds	r24, 0x0337
    1ce2:	90 91 38 03 	lds	r25, 0x0338
    1ce6:	20 91 39 03 	lds	r18, 0x0339
    1cea:	30 91 3a 03 	lds	r19, 0x033A
    1cee:	82 1b       	sub	r24, r18
    1cf0:	93 0b       	sbc	r25, r19
    1cf2:	20 91 7d 03 	lds	r18, 0x037D
    1cf6:	30 91 7e 03 	lds	r19, 0x037E
    1cfa:	82 1b       	sub	r24, r18
    1cfc:	93 0b       	sbc	r25, r19
    1cfe:	90 93 66 03 	sts	0x0366, r25
    1d02:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[1] < 0) {
    1d06:	97 fd       	sbrc	r25, 7
    1d08:	3a c5       	rjmp	.+2676   	; 0x277e <__stack+0x57f>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
    1d0a:	80 91 3b 03 	lds	r24, 0x033B
    1d0e:	90 91 3c 03 	lds	r25, 0x033C
    1d12:	20 91 3d 03 	lds	r18, 0x033D
    1d16:	30 91 3e 03 	lds	r19, 0x033E
    1d1a:	82 1b       	sub	r24, r18
    1d1c:	93 0b       	sbc	r25, r19
    1d1e:	20 91 7f 03 	lds	r18, 0x037F
    1d22:	30 91 80 03 	lds	r19, 0x0380
    1d26:	82 1b       	sub	r24, r18
    1d28:	93 0b       	sbc	r25, r19
    1d2a:	90 93 68 03 	sts	0x0368, r25
    1d2e:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[2] < 0) {
    1d32:	97 fd       	sbrc	r25, 7
    1d34:	1f c5       	rjmp	.+2622   	; 0x2774 <__stack+0x575>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
    1d36:	80 91 3f 03 	lds	r24, 0x033F
    1d3a:	90 91 40 03 	lds	r25, 0x0340
    1d3e:	20 91 41 03 	lds	r18, 0x0341
    1d42:	30 91 42 03 	lds	r19, 0x0342
    1d46:	82 1b       	sub	r24, r18
    1d48:	93 0b       	sbc	r25, r19
    1d4a:	20 91 81 03 	lds	r18, 0x0381
    1d4e:	30 91 82 03 	lds	r19, 0x0382
    1d52:	82 1b       	sub	r24, r18
    1d54:	93 0b       	sbc	r25, r19
    1d56:	90 93 6a 03 	sts	0x036A, r25
    1d5a:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[3] < 0) {
    1d5e:	97 fd       	sbrc	r25, 7
    1d60:	04 c5       	rjmp	.+2568   	; 0x276a <__stack+0x56b>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
    1d62:	80 91 43 03 	lds	r24, 0x0343
    1d66:	90 91 44 03 	lds	r25, 0x0344
    1d6a:	20 91 45 03 	lds	r18, 0x0345
    1d6e:	30 91 46 03 	lds	r19, 0x0346
    1d72:	82 1b       	sub	r24, r18
    1d74:	93 0b       	sbc	r25, r19
    1d76:	20 91 83 03 	lds	r18, 0x0383
    1d7a:	30 91 84 03 	lds	r19, 0x0384
    1d7e:	82 1b       	sub	r24, r18
    1d80:	93 0b       	sbc	r25, r19
    1d82:	90 93 6c 03 	sts	0x036C, r25
    1d86:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[4] < 0) {
    1d8a:	97 fd       	sbrc	r25, 7
    1d8c:	e9 c4       	rjmp	.+2514   	; 0x2760 <__stack+0x561>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
    1d8e:	80 91 47 03 	lds	r24, 0x0347
    1d92:	90 91 48 03 	lds	r25, 0x0348
    1d96:	20 91 49 03 	lds	r18, 0x0349
    1d9a:	30 91 4a 03 	lds	r19, 0x034A
    1d9e:	82 1b       	sub	r24, r18
    1da0:	93 0b       	sbc	r25, r19
    1da2:	20 91 85 03 	lds	r18, 0x0385
    1da6:	30 91 86 03 	lds	r19, 0x0386
    1daa:	82 1b       	sub	r24, r18
    1dac:	93 0b       	sbc	r25, r19
    1dae:	90 93 6e 03 	sts	0x036E, r25
    1db2:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[5] < 0) {
    1db6:	97 fd       	sbrc	r25, 7
    1db8:	ce c4       	rjmp	.+2460   	; 0x2756 <__stack+0x557>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
    1dba:	80 91 4b 03 	lds	r24, 0x034B
    1dbe:	90 91 4c 03 	lds	r25, 0x034C
    1dc2:	20 91 4d 03 	lds	r18, 0x034D
    1dc6:	30 91 4e 03 	lds	r19, 0x034E
    1dca:	82 1b       	sub	r24, r18
    1dcc:	93 0b       	sbc	r25, r19
    1dce:	20 91 87 03 	lds	r18, 0x0387
    1dd2:	30 91 88 03 	lds	r19, 0x0388
    1dd6:	82 1b       	sub	r24, r18
    1dd8:	93 0b       	sbc	r25, r19
    1dda:	90 93 70 03 	sts	0x0370, r25
    1dde:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[6] < 0) {
    1de2:	97 fd       	sbrc	r25, 7
    1de4:	b3 c4       	rjmp	.+2406   	; 0x274c <__stack+0x54d>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
    1de6:	80 91 4f 03 	lds	r24, 0x034F
    1dea:	90 91 50 03 	lds	r25, 0x0350
    1dee:	20 91 51 03 	lds	r18, 0x0351
    1df2:	30 91 52 03 	lds	r19, 0x0352
    1df6:	82 1b       	sub	r24, r18
    1df8:	93 0b       	sbc	r25, r19
    1dfa:	20 91 89 03 	lds	r18, 0x0389
    1dfe:	30 91 8a 03 	lds	r19, 0x038A
    1e02:	82 1b       	sub	r24, r18
    1e04:	93 0b       	sbc	r25, r19
    1e06:	90 93 72 03 	sts	0x0372, r25
    1e0a:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[7] < 0) {
    1e0e:	97 fd       	sbrc	r25, 7
    1e10:	98 c4       	rjmp	.+2352   	; 0x2742 <__stack+0x543>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
    1e12:	80 91 53 03 	lds	r24, 0x0353
    1e16:	90 91 54 03 	lds	r25, 0x0354
    1e1a:	20 91 55 03 	lds	r18, 0x0355
    1e1e:	30 91 56 03 	lds	r19, 0x0356
    1e22:	82 1b       	sub	r24, r18
    1e24:	93 0b       	sbc	r25, r19
    1e26:	20 91 8b 03 	lds	r18, 0x038B
    1e2a:	30 91 8c 03 	lds	r19, 0x038C
    1e2e:	82 1b       	sub	r24, r18
    1e30:	93 0b       	sbc	r25, r19
    1e32:	90 93 74 03 	sts	0x0374, r25
    1e36:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[8] < 0) {
    1e3a:	97 fd       	sbrc	r25, 7
    1e3c:	7d c4       	rjmp	.+2298   	; 0x2738 <__stack+0x539>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
    1e3e:	80 91 57 03 	lds	r24, 0x0357
    1e42:	90 91 58 03 	lds	r25, 0x0358
    1e46:	20 91 59 03 	lds	r18, 0x0359
    1e4a:	30 91 5a 03 	lds	r19, 0x035A
    1e4e:	82 1b       	sub	r24, r18
    1e50:	93 0b       	sbc	r25, r19
    1e52:	20 91 8d 03 	lds	r18, 0x038D
    1e56:	30 91 8e 03 	lds	r19, 0x038E
    1e5a:	82 1b       	sub	r24, r18
    1e5c:	93 0b       	sbc	r25, r19
    1e5e:	90 93 76 03 	sts	0x0376, r25
    1e62:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[9] < 0) {
    1e66:	97 fd       	sbrc	r25, 7
    1e68:	62 c4       	rjmp	.+2244   	; 0x272e <__stack+0x52f>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
    1e6a:	80 91 5b 03 	lds	r24, 0x035B
    1e6e:	90 91 5c 03 	lds	r25, 0x035C
    1e72:	20 91 5d 03 	lds	r18, 0x035D
    1e76:	30 91 5e 03 	lds	r19, 0x035E
    1e7a:	82 1b       	sub	r24, r18
    1e7c:	93 0b       	sbc	r25, r19
    1e7e:	20 91 8f 03 	lds	r18, 0x038F
    1e82:	30 91 90 03 	lds	r19, 0x0390
    1e86:	82 1b       	sub	r24, r18
    1e88:	93 0b       	sbc	r25, r19
    1e8a:	90 93 78 03 	sts	0x0378, r25
    1e8e:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[10] < 0) {
    1e92:	97 fd       	sbrc	r25, 7
    1e94:	47 c4       	rjmp	.+2190   	; 0x2724 <__stack+0x525>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23] - proximityOffset[11];	// ambient - (ambient+reflected) - offset
    1e96:	80 91 5f 03 	lds	r24, 0x035F
    1e9a:	90 91 60 03 	lds	r25, 0x0360
    1e9e:	20 91 61 03 	lds	r18, 0x0361
    1ea2:	30 91 62 03 	lds	r19, 0x0362
    1ea6:	82 1b       	sub	r24, r18
    1ea8:	93 0b       	sbc	r25, r19
    1eaa:	20 91 91 03 	lds	r18, 0x0391
    1eae:	30 91 92 03 	lds	r19, 0x0392
    1eb2:	82 1b       	sub	r24, r18
    1eb4:	93 0b       	sbc	r25, r19
    1eb6:	90 93 7a 03 	sts	0x037A, r25
    1eba:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[11] < 0) {
    1ebe:	97 ff       	sbrs	r25, 7
    1ec0:	54 cc       	rjmp	.-1880   	; 0x176a <main+0x2fc>
					proximityResult[11] = 0;
    1ec2:	10 92 7a 03 	sts	0x037A, r1
    1ec6:	10 92 79 03 	sts	0x0379, r1
    1eca:	4f cc       	rjmp	.-1890   	; 0x176a <main+0x2fc>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    1ecc:	87 e0       	ldi	r24, 0x07	; 7
    1ece:	60 e7       	ldi	r22, 0x70	; 112
    1ed0:	0e 94 9e 18 	call	0x313c	; 0x313c <mirf_config_register>

			mirf_get_data(rfData);
    1ed4:	8f e4       	ldi	r24, 0x4F	; 79
    1ed6:	94 e0       	ldi	r25, 0x04	; 4
    1ed8:	0e 94 86 18 	call	0x310c	; 0x310c <mirf_get_data>
			flush_rx_fifo();
    1edc:	0e 94 80 18 	call	0x3100	; 0x3100 <flush_rx_fifo>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1ee0:	30 91 4f 04 	lds	r19, 0x044F
    1ee4:	33 23       	and	r19, r19
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <main+0xa7c>
    1ee8:	b8 c2       	rjmp	.+1392   	; 0x245a <__stack+0x25b>
    1eea:	70 91 53 04 	lds	r23, 0x0453
    1eee:	60 91 54 04 	lds	r22, 0x0454
    1ef2:	20 91 50 04 	lds	r18, 0x0450
    1ef6:	e0 91 51 04 	lds	r30, 0x0451

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1efa:	47 2f       	mov	r20, r23
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	4f 77       	andi	r20, 0x7F	; 127
    1f00:	50 70       	andi	r21, 0x00	; 0
    1f02:	50 93 fe 03 	sts	0x03FE, r21
    1f06:	40 93 fd 03 	sts	0x03FD, r20
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1f0a:	86 2f       	mov	r24, r22
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	8f 77       	andi	r24, 0x7F	; 127
    1f10:	90 70       	andi	r25, 0x00	; 0
    1f12:	90 93 fc 03 	sts	0x03FC, r25
    1f16:	80 93 fb 03 	sts	0x03FB, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1f1a:	77 fd       	sbrc	r23, 7
    1f1c:	94 c4       	rjmp	.+2344   	; 0x2846 <__stack+0x647>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    1f1e:	44 0f       	add	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	44 0f       	add	r20, r20
    1f24:	55 1f       	adc	r21, r21
    1f26:	50 95       	com	r21
    1f28:	41 95       	neg	r20
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	50 93 e3 03 	sts	0x03E3, r21
    1f30:	40 93 e2 03 	sts	0x03E2, r20
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1f34:	67 fd       	sbrc	r22, 7
    1f36:	7e c4       	rjmp	.+2300   	; 0x2834 <__stack+0x635>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	90 95       	com	r25
    1f42:	81 95       	neg	r24
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	90 93 e5 03 	sts	0x03E5, r25
    1f4a:	80 93 e4 03 	sts	0x03E4, r24
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1f4e:	b1 e0       	ldi	r27, 0x01	; 1
    1f50:	44 33       	cpi	r20, 0x34	; 52
    1f52:	5b 07       	cpc	r21, r27
    1f54:	34 f0       	brlt	.+12     	; 0x1f62 <main+0xaf4>
    1f56:	43 e3       	ldi	r20, 0x33	; 51
    1f58:	51 e0       	ldi	r21, 0x01	; 1
    1f5a:	50 93 e3 03 	sts	0x03E3, r21
    1f5e:	40 93 e2 03 	sts	0x03E2, r20
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	84 33       	cpi	r24, 0x34	; 52
    1f66:	96 07       	cpc	r25, r22
    1f68:	34 f0       	brlt	.+12     	; 0x1f76 <main+0xb08>
    1f6a:	83 e3       	ldi	r24, 0x33	; 51
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	90 93 e5 03 	sts	0x03E5, r25
    1f72:	80 93 e4 03 	sts	0x03E4, r24
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1f76:	ae ef       	ldi	r26, 0xFE	; 254
    1f78:	4d 3c       	cpi	r20, 0xCD	; 205
    1f7a:	5a 07       	cpc	r21, r26
    1f7c:	34 f4       	brge	.+12     	; 0x1f8a <main+0xb1c>
    1f7e:	4d ec       	ldi	r20, 0xCD	; 205
    1f80:	5e ef       	ldi	r21, 0xFE	; 254
    1f82:	50 93 e3 03 	sts	0x03E3, r21
    1f86:	40 93 e2 03 	sts	0x03E2, r20
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1f8a:	5e ef       	ldi	r21, 0xFE	; 254
    1f8c:	8d 3c       	cpi	r24, 0xCD	; 205
    1f8e:	95 07       	cpc	r25, r21
    1f90:	34 f4       	brge	.+12     	; 0x1f9e <main+0xb30>
    1f92:	8d ec       	ldi	r24, 0xCD	; 205
    1f94:	9e ef       	ldi	r25, 0xFE	; 254
    1f96:	90 93 e5 03 	sts	0x03E5, r25
    1f9a:	80 93 e4 03 	sts	0x03E4, r24
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    1f9e:	43 2f       	mov	r20, r19
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	50 93 48 04 	sts	0x0448, r21
    1fa6:	40 93 47 04 	sts	0x0447, r20
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	30 93 4a 04 	sts	0x044A, r19
    1fb0:	20 93 49 04 	sts	0x0449, r18
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	f0 93 4c 04 	sts	0x044C, r31
    1fba:	e0 93 4b 04 	sts	0x044B, r30
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1fbe:	94 2f       	mov	r25, r20
    1fc0:	88 27       	eor	r24, r24
    1fc2:	84 1b       	sub	r24, r20
    1fc4:	95 0b       	sbc	r25, r21
    1fc6:	64 e6       	ldi	r22, 0x64	; 100
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <__udivmodhi4>
    1fce:	46 2f       	mov	r20, r22
    1fd0:	40 95       	com	r20
    1fd2:	40 93 12 02 	sts	0x0212, r20
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1fd6:	92 2f       	mov	r25, r18
    1fd8:	88 27       	eor	r24, r24
    1fda:	82 1b       	sub	r24, r18
    1fdc:	93 0b       	sbc	r25, r19
    1fde:	64 e6       	ldi	r22, 0x64	; 100
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <__udivmodhi4>
    1fe6:	60 95       	com	r22
    1fe8:	60 93 14 02 	sts	0x0214, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1fec:	9e 2f       	mov	r25, r30
    1fee:	88 27       	eor	r24, r24
    1ff0:	8e 1b       	sub	r24, r30
    1ff2:	9f 0b       	sbc	r25, r31
    1ff4:	64 e6       	ldi	r22, 0x64	; 100
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <__udivmodhi4>
    1ffc:	60 95       	com	r22
    1ffe:	60 93 13 02 	sts	0x0213, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    2002:	44 23       	and	r20, r20
    2004:	09 f4       	brne	.+2      	; 0x2008 <main+0xb9a>
    2006:	0b c3       	rjmp	.+1558   	; 0x261e <__stack+0x41f>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    2008:	80 91 80 00 	lds	r24, 0x0080
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    2012:	64 2f       	mov	r22, r20
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	70 93 89 00 	sts	0x0089, r23
    201a:	60 93 88 00 	sts	0x0088, r22
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    201e:	80 91 13 02 	lds	r24, 0x0213

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    2022:	88 23       	and	r24, r24
    2024:	09 f4       	brne	.+2      	; 0x2028 <main+0xbba>
    2026:	e9 c2       	rjmp	.+1490   	; 0x25fa <__stack+0x3fb>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    2028:	90 91 80 00 	lds	r25, 0x0080
    202c:	90 62       	ori	r25, 0x20	; 32
    202e:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	90 93 8b 00 	sts	0x008B, r25
    2038:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    203c:	80 91 14 02 	lds	r24, 0x0214

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    2040:	88 23       	and	r24, r24
    2042:	09 f4       	brne	.+2      	; 0x2046 <main+0xbd8>
    2044:	e5 c2       	rjmp	.+1482   	; 0x2610 <__stack+0x411>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    2046:	90 91 80 00 	lds	r25, 0x0080
    204a:	98 60       	ori	r25, 0x08	; 8
    204c:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	90 93 8d 00 	sts	0x008D, r25
    2056:	80 93 8c 00 	sts	0x008C, r24
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    205a:	80 91 52 04 	lds	r24, 0x0452
    205e:	80 ff       	sbrs	r24, 0
    2060:	fa c1       	rjmp	.+1012   	; 0x2456 <__stack+0x257>
				LED_IR1_LOW;
    2062:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH; 
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    2064:	81 ff       	sbrs	r24, 1
    2066:	f5 c1       	rjmp	.+1002   	; 0x2452 <__stack+0x253>
				LED_IR2_LOW;
    2068:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    206a:	98 2f       	mov	r25, r24
    206c:	82 ff       	sbrs	r24, 2
    206e:	c9 c1       	rjmp	.+914    	; 0x2402 <__stack+0x203>
				irEnabled = 1;
    2070:	d0 92 17 02 	sts	0x0217, r13
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    2074:	94 fd       	sbrc	r25, 4
    2076:	c9 c1       	rjmp	.+914    	; 0x240a <__stack+0x20b>
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2078:	96 ff       	sbrs	r25, 6
    207a:	e8 c1       	rjmp	.+976    	; 0x244c <__stack+0x24d>
				obstacleAvoidanceEnabled = 1;
    207c:	d0 92 29 04 	sts	0x0429, r13
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    2080:	88 0f       	add	r24, r24
    2082:	88 0b       	sbc	r24, r24
    2084:	8d 21       	and	r24, r13
    2086:	80 93 2e 04 	sts	0x042E, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    208a:	80 91 11 02 	lds	r24, 0x0211
    208e:	80 93 37 04 	sts	0x0437, r24

			switch(packetId) {
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	09 f4       	brne	.+2      	; 0x2098 <main+0xc2a>
    2096:	0c c6       	rjmp	.+3096   	; 0x2cb0 <__stack+0xab1>
    2098:	85 30       	cpi	r24, 0x05	; 5
    209a:	08 f0       	brcs	.+2      	; 0x209e <main+0xc30>
    209c:	c7 c2       	rjmp	.+1422   	; 0x262c <__stack+0x42d>
    209e:	83 30       	cpi	r24, 0x03	; 3
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <main+0xc36>
    20a2:	5c c0       	rjmp	.+184    	; 0x215c <main+0xcee>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    20a4:	90 91 63 03 	lds	r25, 0x0363
    20a8:	80 91 64 03 	lds	r24, 0x0364
    20ac:	90 93 38 04 	sts	0x0438, r25
					ackPayload[2] = proximityResult[0]>>8;					
    20b0:	80 93 39 04 	sts	0x0439, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    20b4:	90 91 65 03 	lds	r25, 0x0365
    20b8:	80 91 66 03 	lds	r24, 0x0366
    20bc:	90 93 3a 04 	sts	0x043A, r25
					ackPayload[4] = proximityResult[1]>>8;
    20c0:	80 93 3b 04 	sts	0x043B, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    20c4:	90 91 67 03 	lds	r25, 0x0367
    20c8:	80 91 68 03 	lds	r24, 0x0368
    20cc:	90 93 3c 04 	sts	0x043C, r25
					ackPayload[6] = proximityResult[2]>>8;
    20d0:	80 93 3d 04 	sts	0x043D, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    20d4:	90 91 69 03 	lds	r25, 0x0369
    20d8:	80 91 6a 03 	lds	r24, 0x036A
    20dc:	90 93 3e 04 	sts	0x043E, r25
					ackPayload[8] = proximityResult[3]>>8;
    20e0:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    20e4:	90 91 6d 03 	lds	r25, 0x036D
    20e8:	80 91 6e 03 	lds	r24, 0x036E
    20ec:	90 93 40 04 	sts	0x0440, r25
					ackPayload[10] = proximityResult[5]>>8;
    20f0:	80 93 41 04 	sts	0x0441, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    20f4:	90 91 6f 03 	lds	r25, 0x036F
    20f8:	80 91 70 03 	lds	r24, 0x0370
    20fc:	90 93 42 04 	sts	0x0442, r25
					ackPayload[12] = proximityResult[6]>>8;
    2100:	80 93 43 04 	sts	0x0443, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    2104:	90 91 71 03 	lds	r25, 0x0371
    2108:	80 91 72 03 	lds	r24, 0x0372
    210c:	90 93 44 04 	sts	0x0444, r25
					ackPayload[14] = proximityResult[7]>>8;	
    2110:	80 93 45 04 	sts	0x0445, r24
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
    2114:	20 91 03 01 	lds	r18, 0x0103
    2118:	80 91 03 01 	lds	r24, 0x0103
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	80 72       	andi	r24, 0x20	; 32
    2120:	90 70       	andi	r25, 0x00	; 0
    2122:	95 95       	asr	r25
    2124:	87 95       	ror	r24
    2126:	95 95       	asr	r25
    2128:	87 95       	ror	r24
    212a:	95 95       	asr	r25
    212c:	87 95       	ror	r24
    212e:	95 95       	asr	r25
    2130:	87 95       	ror	r24
    2132:	95 95       	asr	r25
    2134:	87 95       	ror	r24
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	20 71       	andi	r18, 0x10	; 16
    213e:	30 70       	andi	r19, 0x00	; 0
    2140:	35 95       	asr	r19
    2142:	27 95       	ror	r18
    2144:	35 95       	asr	r19
    2146:	27 95       	ror	r18
    2148:	35 95       	asr	r19
    214a:	27 95       	ror	r18
    214c:	35 95       	asr	r19
    214e:	27 95       	ror	r18
    2150:	82 2b       	or	r24, r18
    2152:	80 93 46 04 	sts	0x0446, r24
					packetId = 4;
    2156:	94 e0       	ldi	r25, 0x04	; 4
    2158:	90 93 11 02 	sts	0x0211, r25
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
    215c:	87 e3       	ldi	r24, 0x37	; 55
    215e:	94 e0       	ldi	r25, 0x04	; 4
    2160:	60 e1       	ldi	r22, 0x10	; 16
    2162:	0e 94 13 19 	call	0x3226	; 0x3226 <writeAckPayload>
    2166:	0c cd       	rjmp	.-1512   	; 0x1b80 <main+0x712>

		}

		if(irEnabled) {

			ir_move = e_get_data();
    2168:	0e 94 90 19 	call	0x3320	; 0x3320 <e_get_data>
    216c:	80 93 01 04 	sts	0x0401, r24

			if(command_received) {
    2170:	90 91 02 04 	lds	r25, 0x0402
    2174:	99 23       	and	r25, r25
    2176:	09 f4       	brne	.+2      	; 0x217a <main+0xd0c>
    2178:	f2 cc       	rjmp	.-1564   	; 0x1b5e <main+0x6f0>

				command_received = 0;
    217a:	10 92 02 04 	sts	0x0402, r1

				switch(ir_move) {
    217e:	e8 2f       	mov	r30, r24
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	e5 33       	cpi	r30, 0x35	; 53
    2184:	f1 05       	cpc	r31, r1
    2186:	08 f4       	brcc	.+2      	; 0x218a <main+0xd1c>
    2188:	67 c3       	rjmp	.+1742   	; 0x2858 <__stack+0x659>
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
    218a:	20 91 e2 03 	lds	r18, 0x03E2
    218e:	30 91 e3 03 	lds	r19, 0x03E3
    2192:	80 91 e4 03 	lds	r24, 0x03E4
    2196:	90 91 e5 03 	lds	r25, 0x03E5
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    219a:	37 fd       	sbrc	r19, 7
    219c:	83 c3       	rjmp	.+1798   	; 0x28a4 <__stack+0x6a5>
					speedr = pwm_right_desired >> 2;
    219e:	35 95       	asr	r19
    21a0:	27 95       	ror	r18
    21a2:	35 95       	asr	r19
    21a4:	27 95       	ror	r18
				} else {
					speedr = (-pwm_right_desired) >> 2;
    21a6:	30 93 fe 03 	sts	0x03FE, r19
    21aa:	20 93 fd 03 	sts	0x03FD, r18
				}
				if(pwm_left_desired >= 0) {
    21ae:	97 fd       	sbrc	r25, 7
    21b0:	00 c4       	rjmp	.+2048   	; 0x29b2 <__stack+0x7b3>
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
    21b2:	95 95       	asr	r25
    21b4:	87 95       	ror	r24
    21b6:	95 95       	asr	r25
    21b8:	87 95       	ror	r24
    21ba:	90 93 fc 03 	sts	0x03FC, r25
    21be:	80 93 fb 03 	sts	0x03FB, r24
    21c2:	cd cc       	rjmp	.-1638   	; 0x1b5e <main+0x6f0>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    21c4:	90 95       	com	r25
    21c6:	81 95       	neg	r24
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	ac c9       	rjmp	.-3240   	; 0x1524 <main+0xb6>

		} else if(calibrationCycle == CALIBRATION_CYCLES) {

			for (i=0;i<12;i++) {
				//proximityOffset[i]=(unsigned int)((float)proximitySum[i]/(float)calibrationCycle);
				proximityOffset[i] = proximitySum[i]>>4;
    21cc:	80 91 9d 03 	lds	r24, 0x039D
    21d0:	90 91 9e 03 	lds	r25, 0x039E
    21d4:	a0 91 9f 03 	lds	r26, 0x039F
    21d8:	b0 91 a0 03 	lds	r27, 0x03A0
    21dc:	44 e0       	ldi	r20, 0x04	; 4
    21de:	b6 95       	lsr	r27
    21e0:	a7 95       	ror	r26
    21e2:	97 95       	ror	r25
    21e4:	87 95       	ror	r24
    21e6:	4a 95       	dec	r20
    21e8:	d1 f7       	brne	.-12     	; 0x21de <main+0xd70>
    21ea:	90 93 7c 03 	sts	0x037C, r25
    21ee:	80 93 7b 03 	sts	0x037B, r24
    21f2:	80 91 a1 03 	lds	r24, 0x03A1
    21f6:	90 91 a2 03 	lds	r25, 0x03A2
    21fa:	a0 91 a3 03 	lds	r26, 0x03A3
    21fe:	b0 91 a4 03 	lds	r27, 0x03A4
    2202:	34 e0       	ldi	r19, 0x04	; 4
    2204:	b6 95       	lsr	r27
    2206:	a7 95       	ror	r26
    2208:	97 95       	ror	r25
    220a:	87 95       	ror	r24
    220c:	3a 95       	dec	r19
    220e:	d1 f7       	brne	.-12     	; 0x2204 <__stack+0x5>
    2210:	90 93 7e 03 	sts	0x037E, r25
    2214:	80 93 7d 03 	sts	0x037D, r24
    2218:	80 91 a5 03 	lds	r24, 0x03A5
    221c:	90 91 a6 03 	lds	r25, 0x03A6
    2220:	a0 91 a7 03 	lds	r26, 0x03A7
    2224:	b0 91 a8 03 	lds	r27, 0x03A8
    2228:	24 e0       	ldi	r18, 0x04	; 4
    222a:	b6 95       	lsr	r27
    222c:	a7 95       	ror	r26
    222e:	97 95       	ror	r25
    2230:	87 95       	ror	r24
    2232:	2a 95       	dec	r18
    2234:	d1 f7       	brne	.-12     	; 0x222a <__stack+0x2b>
    2236:	90 93 80 03 	sts	0x0380, r25
    223a:	80 93 7f 03 	sts	0x037F, r24
    223e:	80 91 a9 03 	lds	r24, 0x03A9
    2242:	90 91 aa 03 	lds	r25, 0x03AA
    2246:	a0 91 ab 03 	lds	r26, 0x03AB
    224a:	b0 91 ac 03 	lds	r27, 0x03AC
    224e:	04 e0       	ldi	r16, 0x04	; 4
    2250:	b6 95       	lsr	r27
    2252:	a7 95       	ror	r26
    2254:	97 95       	ror	r25
    2256:	87 95       	ror	r24
    2258:	0a 95       	dec	r16
    225a:	d1 f7       	brne	.-12     	; 0x2250 <__stack+0x51>
    225c:	90 93 82 03 	sts	0x0382, r25
    2260:	80 93 81 03 	sts	0x0381, r24
    2264:	80 91 ad 03 	lds	r24, 0x03AD
    2268:	90 91 ae 03 	lds	r25, 0x03AE
    226c:	a0 91 af 03 	lds	r26, 0x03AF
    2270:	b0 91 b0 03 	lds	r27, 0x03B0
    2274:	14 e0       	ldi	r17, 0x04	; 4
    2276:	b6 95       	lsr	r27
    2278:	a7 95       	ror	r26
    227a:	97 95       	ror	r25
    227c:	87 95       	ror	r24
    227e:	1a 95       	dec	r17
    2280:	d1 f7       	brne	.-12     	; 0x2276 <__stack+0x77>
    2282:	90 93 84 03 	sts	0x0384, r25
    2286:	80 93 83 03 	sts	0x0383, r24
    228a:	80 91 b1 03 	lds	r24, 0x03B1
    228e:	90 91 b2 03 	lds	r25, 0x03B2
    2292:	a0 91 b3 03 	lds	r26, 0x03B3
    2296:	b0 91 b4 03 	lds	r27, 0x03B4
    229a:	f4 e0       	ldi	r31, 0x04	; 4
    229c:	b6 95       	lsr	r27
    229e:	a7 95       	ror	r26
    22a0:	97 95       	ror	r25
    22a2:	87 95       	ror	r24
    22a4:	fa 95       	dec	r31
    22a6:	d1 f7       	brne	.-12     	; 0x229c <__stack+0x9d>
    22a8:	90 93 86 03 	sts	0x0386, r25
    22ac:	80 93 85 03 	sts	0x0385, r24
    22b0:	80 91 b5 03 	lds	r24, 0x03B5
    22b4:	90 91 b6 03 	lds	r25, 0x03B6
    22b8:	a0 91 b7 03 	lds	r26, 0x03B7
    22bc:	b0 91 b8 03 	lds	r27, 0x03B8
    22c0:	e4 e0       	ldi	r30, 0x04	; 4
    22c2:	b6 95       	lsr	r27
    22c4:	a7 95       	ror	r26
    22c6:	97 95       	ror	r25
    22c8:	87 95       	ror	r24
    22ca:	ea 95       	dec	r30
    22cc:	d1 f7       	brne	.-12     	; 0x22c2 <__stack+0xc3>
    22ce:	90 93 88 03 	sts	0x0388, r25
    22d2:	80 93 87 03 	sts	0x0387, r24
    22d6:	80 91 b9 03 	lds	r24, 0x03B9
    22da:	90 91 ba 03 	lds	r25, 0x03BA
    22de:	a0 91 bb 03 	lds	r26, 0x03BB
    22e2:	b0 91 bc 03 	lds	r27, 0x03BC
    22e6:	74 e0       	ldi	r23, 0x04	; 4
    22e8:	b6 95       	lsr	r27
    22ea:	a7 95       	ror	r26
    22ec:	97 95       	ror	r25
    22ee:	87 95       	ror	r24
    22f0:	7a 95       	dec	r23
    22f2:	d1 f7       	brne	.-12     	; 0x22e8 <__stack+0xe9>
    22f4:	90 93 8a 03 	sts	0x038A, r25
    22f8:	80 93 89 03 	sts	0x0389, r24
    22fc:	80 91 bd 03 	lds	r24, 0x03BD
    2300:	90 91 be 03 	lds	r25, 0x03BE
    2304:	a0 91 bf 03 	lds	r26, 0x03BF
    2308:	b0 91 c0 03 	lds	r27, 0x03C0
    230c:	64 e0       	ldi	r22, 0x04	; 4
    230e:	b6 95       	lsr	r27
    2310:	a7 95       	ror	r26
    2312:	97 95       	ror	r25
    2314:	87 95       	ror	r24
    2316:	6a 95       	dec	r22
    2318:	d1 f7       	brne	.-12     	; 0x230e <__stack+0x10f>
    231a:	90 93 8c 03 	sts	0x038C, r25
    231e:	80 93 8b 03 	sts	0x038B, r24
    2322:	80 91 c1 03 	lds	r24, 0x03C1
    2326:	90 91 c2 03 	lds	r25, 0x03C2
    232a:	a0 91 c3 03 	lds	r26, 0x03C3
    232e:	b0 91 c4 03 	lds	r27, 0x03C4
    2332:	54 e0       	ldi	r21, 0x04	; 4
    2334:	b6 95       	lsr	r27
    2336:	a7 95       	ror	r26
    2338:	97 95       	ror	r25
    233a:	87 95       	ror	r24
    233c:	5a 95       	dec	r21
    233e:	d1 f7       	brne	.-12     	; 0x2334 <__stack+0x135>
    2340:	90 93 8e 03 	sts	0x038E, r25
    2344:	80 93 8d 03 	sts	0x038D, r24
    2348:	80 91 c5 03 	lds	r24, 0x03C5
    234c:	90 91 c6 03 	lds	r25, 0x03C6
    2350:	a0 91 c7 03 	lds	r26, 0x03C7
    2354:	b0 91 c8 03 	lds	r27, 0x03C8
    2358:	44 e0       	ldi	r20, 0x04	; 4
    235a:	b6 95       	lsr	r27
    235c:	a7 95       	ror	r26
    235e:	97 95       	ror	r25
    2360:	87 95       	ror	r24
    2362:	4a 95       	dec	r20
    2364:	d1 f7       	brne	.-12     	; 0x235a <__stack+0x15b>
    2366:	90 93 90 03 	sts	0x0390, r25
    236a:	80 93 8f 03 	sts	0x038F, r24
    236e:	80 91 c9 03 	lds	r24, 0x03C9
    2372:	90 91 ca 03 	lds	r25, 0x03CA
    2376:	a0 91 cb 03 	lds	r26, 0x03CB
    237a:	b0 91 cc 03 	lds	r27, 0x03CC
    237e:	34 e0       	ldi	r19, 0x04	; 4
    2380:	b6 95       	lsr	r27
    2382:	a7 95       	ror	r26
    2384:	97 95       	ror	r25
    2386:	87 95       	ror	r24
    2388:	3a 95       	dec	r19
    238a:	d1 f7       	brne	.-12     	; 0x2380 <__stack+0x181>
    238c:	90 93 92 03 	sts	0x0392, r25
    2390:	80 93 91 03 	sts	0x0391, r24
			}

			accOffsetX = accOffsetXSum>>4;				
    2394:	80 91 1a 04 	lds	r24, 0x041A
    2398:	90 91 1b 04 	lds	r25, 0x041B
    239c:	95 95       	asr	r25
    239e:	87 95       	ror	r24
    23a0:	95 95       	asr	r25
    23a2:	87 95       	ror	r24
    23a4:	95 95       	asr	r25
    23a6:	87 95       	ror	r24
    23a8:	95 95       	asr	r25
    23aa:	87 95       	ror	r24
    23ac:	90 93 13 04 	sts	0x0413, r25
    23b0:	80 93 12 04 	sts	0x0412, r24
			accOffsetY = accOffsetYSum>>4;
    23b4:	80 91 1c 04 	lds	r24, 0x041C
    23b8:	90 91 1d 04 	lds	r25, 0x041D
    23bc:	95 95       	asr	r25
    23be:	87 95       	ror	r24
    23c0:	95 95       	asr	r25
    23c2:	87 95       	ror	r24
    23c4:	95 95       	asr	r25
    23c6:	87 95       	ror	r24
    23c8:	95 95       	asr	r25
    23ca:	87 95       	ror	r24
    23cc:	90 93 15 04 	sts	0x0415, r25
    23d0:	80 93 14 04 	sts	0x0414, r24
			accOffsetZ = accOffsetZSum>>4;
    23d4:	80 91 1e 04 	lds	r24, 0x041E
    23d8:	90 91 1f 04 	lds	r25, 0x041F
    23dc:	95 95       	asr	r25
    23de:	87 95       	ror	r24
    23e0:	95 95       	asr	r25
    23e2:	87 95       	ror	r24
    23e4:	95 95       	asr	r25
    23e6:	87 95       	ror	r24
    23e8:	95 95       	asr	r25
    23ea:	87 95       	ror	r24
    23ec:	90 93 17 04 	sts	0x0417, r25
    23f0:	80 93 16 04 	sts	0x0416, r24

			startCalibration = 0;
    23f4:	10 92 25 04 	sts	0x0425, r1
			calibrationCycle = 0;
    23f8:	10 92 27 04 	sts	0x0427, r1
    23fc:	10 92 26 04 	sts	0x0426, r1
    2400:	a9 cb       	rjmp	.-2222   	; 0x1b54 <main+0x6e6>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    2402:	10 92 17 02 	sts	0x0217, r1
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    2406:	94 ff       	sbrs	r25, 4
    2408:	37 ce       	rjmp	.-914    	; 0x2078 <main+0xc0a>
				startCalibration = 1;
    240a:	d0 92 25 04 	sts	0x0425, r13
				calibrationCycle = 0;
    240e:	10 92 27 04 	sts	0x0427, r1
    2412:	10 92 26 04 	sts	0x0426, r1
				pwm_red = 0;
    2416:	10 92 12 02 	sts	0x0212, r1
				pwm_green = 0;
    241a:	10 92 13 02 	sts	0x0213, r1
				pwm_blue = 0;
    241e:	10 92 14 02 	sts	0x0214, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    2422:	90 91 80 00 	lds	r25, 0x0080
    2426:	9f 77       	andi	r25, 0x7F	; 127
    2428:	90 93 80 00 	sts	0x0080, r25
		PORTB &= ~(1 << 5);
    242c:	2d 98       	cbi	0x05, 5	; 5
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    242e:	90 91 80 00 	lds	r25, 0x0080
    2432:	9f 7d       	andi	r25, 0xDF	; 223
    2434:	90 93 80 00 	sts	0x0080, r25
		PORTB &= ~(1 << 6);
    2438:	2e 98       	cbi	0x05, 6	; 5
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    243a:	90 91 80 00 	lds	r25, 0x0080
    243e:	97 7f       	andi	r25, 0xF7	; 247
    2440:	90 93 80 00 	sts	0x0080, r25
		PORTB &= ~(1 << 7);
    2444:	2f 98       	cbi	0x05, 7	; 5
    2446:	98 2f       	mov	r25, r24
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2448:	96 fd       	sbrc	r25, 6
    244a:	18 ce       	rjmp	.-976    	; 0x207c <main+0xc0e>
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    244c:	10 92 29 04 	sts	0x0429, r1
    2450:	17 ce       	rjmp	.-978    	; 0x2080 <main+0xc12>
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    2452:	45 9a       	sbi	0x08, 5	; 8
    2454:	0a ce       	rjmp	.-1004   	; 0x206a <main+0xbfc>
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH; 
    2456:	44 9a       	sbi	0x08, 4	; 8
    2458:	05 ce       	rjmp	.-1014   	; 0x2064 <main+0xbf6>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    245a:	20 91 50 04 	lds	r18, 0x0450
    245e:	22 23       	and	r18, r18
    2460:	09 f4       	brne	.+2      	; 0x2464 <__stack+0x265>
    2462:	bf c3       	rjmp	.+1918   	; 0x2be2 <__stack+0x9e3>
    2464:	70 91 53 04 	lds	r23, 0x0453
    2468:	60 91 54 04 	lds	r22, 0x0454
    246c:	e0 91 51 04 	lds	r30, 0x0451
    2470:	44 cd       	rjmp	.-1400   	; 0x1efa <main+0xa8c>

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    2472:	80 91 53 03 	lds	r24, 0x0353
    2476:	90 91 54 03 	lds	r25, 0x0354
    247a:	20 91 55 03 	lds	r18, 0x0355
    247e:	30 91 56 03 	lds	r19, 0x0356
    2482:	82 1b       	sub	r24, r18
    2484:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    2486:	60 91 57 03 	lds	r22, 0x0357
    248a:	70 91 58 03 	lds	r23, 0x0358
    248e:	20 91 59 03 	lds	r18, 0x0359
    2492:	30 91 5a 03 	lds	r19, 0x035A
    2496:	62 1b       	sub	r22, r18
    2498:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    249a:	40 91 5b 03 	lds	r20, 0x035B
    249e:	50 91 5c 03 	lds	r21, 0x035C
    24a2:	20 91 5d 03 	lds	r18, 0x035D
    24a6:	30 91 5e 03 	lds	r19, 0x035E
    24aa:	42 1b       	sub	r20, r18
    24ac:	53 0b       	sbc	r21, r19
    24ae:	57 fd       	sbrc	r21, 7
    24b0:	86 c4       	rjmp	.+2316   	; 0x2dbe <__stack+0xbbf>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    24b2:	20 91 5f 03 	lds	r18, 0x035F
    24b6:	30 91 60 03 	lds	r19, 0x0360
    24ba:	e0 91 61 03 	lds	r30, 0x0361
    24be:	f0 91 62 03 	lds	r31, 0x0362
    24c2:	2e 1b       	sub	r18, r30
    24c4:	3f 0b       	sbc	r19, r31
    24c6:	37 fd       	sbrc	r19, 7
    24c8:	77 c4       	rjmp	.+2286   	; 0x2db8 <__stack+0xbb9>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    24ca:	97 fd       	sbrc	r25, 7
    24cc:	72 c4       	rjmp	.+2276   	; 0x2db2 <__stack+0xbb3>
    24ce:	90 93 30 04 	sts	0x0430, r25
    24d2:	80 93 2f 04 	sts	0x042F, r24
	minGround = GROUND_LEFT;
    24d6:	a3 e0       	ldi	r26, 0x03	; 3
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	b0 93 1e 02 	sts	0x021E, r27
    24de:	a0 93 1d 02 	sts	0x021D, r26
	if(g1 < minGroundValue) {
    24e2:	77 fd       	sbrc	r23, 7
    24e4:	63 c4       	rjmp	.+2246   	; 0x2dac <__stack+0xbad>
    24e6:	68 17       	cp	r22, r24
    24e8:	79 07       	cpc	r23, r25
    24ea:	58 f4       	brcc	.+22     	; 0x2502 <__stack+0x303>
		minGroundValue = g1;
    24ec:	70 93 30 04 	sts	0x0430, r23
    24f0:	60 93 2f 04 	sts	0x042F, r22
		minGround = GROUND_CENTER_LEFT;
    24f4:	e2 e0       	ldi	r30, 0x02	; 2
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	f0 93 1e 02 	sts	0x021E, r31
    24fc:	e0 93 1d 02 	sts	0x021D, r30
    2500:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    2502:	48 17       	cp	r20, r24
    2504:	59 07       	cpc	r21, r25
    2506:	58 f4       	brcc	.+22     	; 0x251e <__stack+0x31f>
		minGroundValue = g2;
    2508:	50 93 30 04 	sts	0x0430, r21
    250c:	40 93 2f 04 	sts	0x042F, r20
		minGround = GROUND_CENTER_RIGHT;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	90 93 1e 02 	sts	0x021E, r25
    2518:	80 93 1d 02 	sts	0x021D, r24
    251c:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    251e:	28 17       	cp	r18, r24
    2520:	39 07       	cpc	r19, r25
    2522:	48 f4       	brcc	.+18     	; 0x2536 <__stack+0x337>
		minGroundValue = g3;
    2524:	30 93 30 04 	sts	0x0430, r19
    2528:	20 93 2f 04 	sts	0x042F, r18
		minGround = GROUND_RIGHT;
    252c:	10 92 1e 02 	sts	0x021E, r1
    2530:	10 92 1d 02 	sts	0x021D, r1
    2534:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    2536:	84 37       	cpi	r24, 0x74	; 116
    2538:	91 05       	cpc	r25, r1
    253a:	08 f0       	brcs	.+2      	; 0x253e <__stack+0x33f>
    253c:	74 cb       	rjmp	.-2328   	; 0x1c26 <main+0x7b8>
		pwm_right_working = 0;
    253e:	10 92 f7 03 	sts	0x03F7, r1
    2542:	10 92 f6 03 	sts	0x03F6, r1
		pwm_left_working = 0;
    2546:	10 92 f9 03 	sts	0x03F9, r1
    254a:	10 92 f8 03 	sts	0x03F8, r1
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	6f cb       	rjmp	.-2338   	; 0x1c36 <main+0x7c8>
			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
			pwm_left_working = pwm_left_desired;
				
			if(obstacleAvoidanceEnabled) {
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
    2558:	0e 94 b1 08 	call	0x1162	; 0x1162 <obstacleAvoidance>
    255c:	5f cb       	rjmp	.-2370   	; 0x1c1c <main+0x7ae>
					OCR3B = (unsigned int)(-pwm_right);
				}
			}
*/

			if(compute_left_vel) {
    255e:	80 91 f2 03 	lds	r24, 0x03F2
    2562:	88 23       	and	r24, r24
    2564:	09 f0       	breq	.+2      	; 0x2568 <__stack+0x369>
    2566:	e4 c3       	rjmp	.+1992   	; 0x2d30 <__stack+0xb31>
				}

				//update_pwm = 1;												
			}

			if(compute_right_vel) {
    2568:	80 91 f3 03 	lds	r24, 0x03F3
    256c:	88 23       	and	r24, r24
    256e:	09 f4       	brne	.+2      	; 0x2572 <__stack+0x373>
    2570:	95 cb       	rjmp	.-2262   	; 0x1c9c <main+0x82e>
				last_right_vel = right_vel_sum>>3;
    2572:	80 91 d8 03 	lds	r24, 0x03D8
    2576:	90 91 d9 03 	lds	r25, 0x03D9
    257a:	96 95       	lsr	r25
    257c:	87 95       	ror	r24
    257e:	96 95       	lsr	r25
    2580:	87 95       	ror	r24
    2582:	96 95       	lsr	r25
    2584:	87 95       	ror	r24
    2586:	90 93 dd 03 	sts	0x03DD, r25
    258a:	80 93 dc 03 	sts	0x03DC, r24
				right_vel_changed = 1;
    258e:	d0 92 f5 03 	sts	0x03F5, r13
				compute_right_vel = 0;
    2592:	10 92 f3 03 	sts	0x03F3, r1
				right_vel_sum = 0;
    2596:	10 92 d9 03 	sts	0x03D9, r1
    259a:	10 92 d8 03 	sts	0x03D8, r1
			
				pwm_right_working = pwm_right_desired;
    259e:	80 91 e2 03 	lds	r24, 0x03E2
    25a2:	90 91 e3 03 	lds	r25, 0x03E3
    25a6:	90 93 f7 03 	sts	0x03F7, r25
    25aa:	80 93 f6 03 	sts	0x03F6, r24

				PORTB &= ~(1 << 5);
    25ae:	2d 98       	cbi	0x05, 5	; 5
				start_orizzontal_speed_control_right(&pwm_right_working);
    25b0:	86 ef       	ldi	r24, 0xF6	; 246
    25b2:	93 e0       	ldi	r25, 0x03	; 3
    25b4:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <start_orizzontal_speed_control_right>
				PORTB |= (1 << 5);
    25b8:	2d 9a       	sbi	0x05, 5	; 5
	
				pwm_right = pwm_right_working;
    25ba:	80 91 f6 03 	lds	r24, 0x03F6
    25be:	90 91 f7 03 	lds	r25, 0x03F7
    25c2:	90 93 df 03 	sts	0x03DF, r25
    25c6:	80 93 de 03 	sts	0x03DE, r24
	
				if(pwm_right >= 0) {
    25ca:	97 fd       	sbrc	r25, 7
    25cc:	08 c4       	rjmp	.+2064   	; 0x2dde <__stack+0xbdf>
					OCR3A = (unsigned int)pwm_right;
    25ce:	90 93 99 00 	sts	0x0099, r25
    25d2:	80 93 98 00 	sts	0x0098, r24
    25d6:	62 cb       	rjmp	.-2364   	; 0x1c9c <main+0x82e>
				OCR3B = (unsigned int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = (unsigned int)pwm_left;
			} else {
				OCR4B =(unsigned int)( -pwm_left);
    25d8:	90 95       	com	r25
    25da:	81 95       	neg	r24
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	90 93 ab 00 	sts	0x00AB, r25
    25e2:	80 93 aa 00 	sts	0x00AA, r24
    25e6:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <main+0x54>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (unsigned int)pwm_right;
			} else {
				OCR3B = (unsigned int)(-pwm_right);
    25ea:	90 95       	com	r25
    25ec:	81 95       	neg	r24
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	90 93 9b 00 	sts	0x009B, r25
    25f4:	80 93 9a 00 	sts	0x009A, r24
    25f8:	2e cb       	rjmp	.-2468   	; 0x1c56 <main+0x7e8>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    25fa:	80 91 80 00 	lds	r24, 0x0080
    25fe:	8f 7d       	andi	r24, 0xDF	; 223
    2600:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    2604:	2e 98       	cbi	0x05, 6	; 5
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    2606:	80 91 14 02 	lds	r24, 0x0214

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    260a:	88 23       	and	r24, r24
    260c:	09 f0       	breq	.+2      	; 0x2610 <__stack+0x411>
    260e:	1b cd       	rjmp	.-1482   	; 0x2046 <main+0xbd8>
		TCCR1A &= ~(1 << COM1C1);
    2610:	80 91 80 00 	lds	r24, 0x0080
    2614:	87 7f       	andi	r24, 0xF7	; 247
    2616:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    261a:	2f 98       	cbi	0x05, 7	; 5
    261c:	1e cd       	rjmp	.-1476   	; 0x205a <main+0xbec>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    261e:	80 91 80 00 	lds	r24, 0x0080
    2622:	8f 77       	andi	r24, 0x7F	; 127
    2624:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    2628:	2d 98       	cbi	0x05, 5	; 5
    262a:	f9 cc       	rjmp	.-1550   	; 0x201e <main+0xbb0>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    262c:	85 30       	cpi	r24, 0x05	; 5
    262e:	09 f4       	brne	.+2      	; 0x2632 <__stack+0x433>
    2630:	e3 c2       	rjmp	.+1478   	; 0x2bf8 <__stack+0x9f9>
    2632:	86 30       	cpi	r24, 0x06	; 6
    2634:	09 f0       	breq	.+2      	; 0x2638 <__stack+0x439>
    2636:	92 cd       	rjmp	.-1244   	; 0x215c <main+0xcee>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2638:	80 91 43 03 	lds	r24, 0x0343
    263c:	90 91 44 03 	lds	r25, 0x0344
    2640:	80 93 38 04 	sts	0x0438, r24
					ackPayload[2] = proximityValue[8]>>8;
    2644:	80 91 43 03 	lds	r24, 0x0343
    2648:	90 91 44 03 	lds	r25, 0x0344
    264c:	90 93 39 04 	sts	0x0439, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2650:	80 91 53 03 	lds	r24, 0x0353
    2654:	90 91 54 03 	lds	r25, 0x0354
    2658:	80 93 3a 04 	sts	0x043A, r24
					ackPayload[4] = proximityValue[16]>>8;
    265c:	80 91 53 03 	lds	r24, 0x0353
    2660:	90 91 54 03 	lds	r25, 0x0354
    2664:	90 93 3b 04 	sts	0x043B, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    2668:	80 91 57 03 	lds	r24, 0x0357
    266c:	90 91 58 03 	lds	r25, 0x0358
    2670:	80 93 3c 04 	sts	0x043C, r24
					ackPayload[6] = proximityValue[18]>>8;
    2674:	80 91 57 03 	lds	r24, 0x0357
    2678:	90 91 58 03 	lds	r25, 0x0358
    267c:	90 93 3d 04 	sts	0x043D, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    2680:	80 91 5b 03 	lds	r24, 0x035B
    2684:	90 91 5c 03 	lds	r25, 0x035C
    2688:	80 93 3e 04 	sts	0x043E, r24
					ackPayload[8] = proximityValue[20]>>8;
    268c:	80 91 5b 03 	lds	r24, 0x035B
    2690:	90 91 5c 03 	lds	r25, 0x035C
    2694:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    2698:	80 91 5f 03 	lds	r24, 0x035F
    269c:	90 91 60 03 	lds	r25, 0x0360
    26a0:	80 93 40 04 	sts	0x0440, r24
					ackPayload[10] = proximityValue[22]>>8;
    26a4:	80 91 5f 03 	lds	r24, 0x035F
    26a8:	90 91 60 03 	lds	r25, 0x0360
    26ac:	90 93 41 04 	sts	0x0441, r25
					ackPayload[11] = accZ&0xFF;
    26b0:	90 91 0a 04 	lds	r25, 0x040A
    26b4:	80 91 0b 04 	lds	r24, 0x040B
    26b8:	90 93 42 04 	sts	0x0442, r25
					ackPayload[12] = accZ>>8;
    26bc:	80 93 43 04 	sts	0x0443, r24
					ackPayload[13] = batteryLevel&0xFF;
    26c0:	90 91 97 03 	lds	r25, 0x0397
    26c4:	80 91 98 03 	lds	r24, 0x0398
    26c8:	90 93 44 04 	sts	0x0444, r25
					ackPayload[14] = batteryLevel>>8;
    26cc:	80 93 45 04 	sts	0x0445, r24
					ackPayload[15] = 0;				
    26d0:	10 92 46 04 	sts	0x0446, r1
					packetId = 3;
    26d4:	e3 e0       	ldi	r30, 0x03	; 3
    26d6:	e0 93 11 02 	sts	0x0211, r30
					break;											
    26da:	40 cd       	rjmp	.-1408   	; 0x215c <main+0xcee>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    26dc:	10 92 68 03 	sts	0x0368, r1
    26e0:	10 92 67 03 	sts	0x0367, r1
    26e4:	0c 94 15 0b 	jmp	0x162a	; 0x162a <main+0x1bc>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    26e8:	10 92 66 03 	sts	0x0366, r1
    26ec:	10 92 65 03 	sts	0x0365, r1
    26f0:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <main+0x198>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    26f4:	10 92 70 03 	sts	0x0370, r1
    26f8:	10 92 6f 03 	sts	0x036F, r1
    26fc:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <main+0x24c>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    2700:	10 92 6e 03 	sts	0x036E, r1
    2704:	10 92 6d 03 	sts	0x036D, r1
    2708:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <main+0x228>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    270c:	10 92 6c 03 	sts	0x036C, r1
    2710:	10 92 6b 03 	sts	0x036B, r1
    2714:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <main+0x204>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    2718:	10 92 6a 03 	sts	0x036A, r1
    271c:	10 92 69 03 	sts	0x0369, r1
    2720:	0c 94 27 0b 	jmp	0x164e	; 0x164e <main+0x1e0>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    2724:	10 92 78 03 	sts	0x0378, r1
    2728:	10 92 77 03 	sts	0x0377, r1
    272c:	b4 cb       	rjmp	.-2200   	; 0x1e96 <main+0xa28>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    272e:	10 92 76 03 	sts	0x0376, r1
    2732:	10 92 75 03 	sts	0x0375, r1
    2736:	99 cb       	rjmp	.-2254   	; 0x1e6a <main+0x9fc>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    2738:	10 92 74 03 	sts	0x0374, r1
    273c:	10 92 73 03 	sts	0x0373, r1
    2740:	7e cb       	rjmp	.-2308   	; 0x1e3e <main+0x9d0>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    2742:	10 92 72 03 	sts	0x0372, r1
    2746:	10 92 71 03 	sts	0x0371, r1
    274a:	63 cb       	rjmp	.-2362   	; 0x1e12 <main+0x9a4>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    274c:	10 92 70 03 	sts	0x0370, r1
    2750:	10 92 6f 03 	sts	0x036F, r1
    2754:	48 cb       	rjmp	.-2416   	; 0x1de6 <main+0x978>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    2756:	10 92 6e 03 	sts	0x036E, r1
    275a:	10 92 6d 03 	sts	0x036D, r1
    275e:	2d cb       	rjmp	.-2470   	; 0x1dba <main+0x94c>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    2760:	10 92 6c 03 	sts	0x036C, r1
    2764:	10 92 6b 03 	sts	0x036B, r1
    2768:	12 cb       	rjmp	.-2524   	; 0x1d8e <main+0x920>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    276a:	10 92 6a 03 	sts	0x036A, r1
    276e:	10 92 69 03 	sts	0x0369, r1
    2772:	f7 ca       	rjmp	.-2578   	; 0x1d62 <main+0x8f4>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    2774:	10 92 68 03 	sts	0x0368, r1
    2778:	10 92 67 03 	sts	0x0367, r1
    277c:	dc ca       	rjmp	.-2632   	; 0x1d36 <main+0x8c8>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    277e:	10 92 66 03 	sts	0x0366, r1
    2782:	10 92 65 03 	sts	0x0365, r1
    2786:	c1 ca       	rjmp	.-2686   	; 0x1d0a <main+0x89c>

			} else { 

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    2788:	10 92 64 03 	sts	0x0364, r1
    278c:	10 92 63 03 	sts	0x0363, r1
    2790:	a6 ca       	rjmp	.-2740   	; 0x1cde <main+0x870>
			updateProx = 0;
			if(startCalibration) {

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    2792:	10 92 64 03 	sts	0x0364, r1
    2796:	10 92 63 03 	sts	0x0363, r1
    279a:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <main+0x174>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    279e:	10 92 78 03 	sts	0x0378, r1
    27a2:	10 92 77 03 	sts	0x0377, r1
    27a6:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <main+0x2dc>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    27aa:	10 92 76 03 	sts	0x0376, r1
    27ae:	10 92 75 03 	sts	0x0375, r1
    27b2:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <main+0x2b8>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    27b6:	10 92 74 03 	sts	0x0374, r1
    27ba:	10 92 73 03 	sts	0x0373, r1
    27be:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <main+0x294>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    27c2:	10 92 72 03 	sts	0x0372, r1
    27c6:	10 92 71 03 	sts	0x0371, r1
    27ca:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <main+0x270>

			if(proxUpdated) {

				proxUpdated = 0;
				
				if(calibrationCycle==0) {
    27ce:	1f 8e       	std	Y+31, r1	; 0x1f
    27d0:	18 a2       	std	Y+32, r1	; 0x20
    27d2:	19 a2       	std	Y+33, r1	; 0x21
    27d4:	1a a2       	std	Y+34, r1	; 0x22
    27d6:	1b 8e       	std	Y+27, r1	; 0x1b
    27d8:	1c 8e       	std	Y+28, r1	; 0x1c
    27da:	1d 8e       	std	Y+29, r1	; 0x1d
    27dc:	1e 8e       	std	Y+30, r1	; 0x1e
    27de:	1f 8a       	std	Y+23, r1	; 0x17
    27e0:	18 8e       	std	Y+24, r1	; 0x18
    27e2:	19 8e       	std	Y+25, r1	; 0x19
    27e4:	1a 8e       	std	Y+26, r1	; 0x1a
    27e6:	1b 8a       	std	Y+19, r1	; 0x13
    27e8:	1c 8a       	std	Y+20, r1	; 0x14
    27ea:	1d 8a       	std	Y+21, r1	; 0x15
    27ec:	1e 8a       	std	Y+22, r1	; 0x16
    27ee:	1f 86       	std	Y+15, r1	; 0x0f
    27f0:	18 8a       	std	Y+16, r1	; 0x10
    27f2:	19 8a       	std	Y+17, r1	; 0x11
    27f4:	1a 8a       	std	Y+18, r1	; 0x12
    27f6:	1b 86       	std	Y+11, r1	; 0x0b
    27f8:	1c 86       	std	Y+12, r1	; 0x0c
    27fa:	1d 86       	std	Y+13, r1	; 0x0d
    27fc:	1e 86       	std	Y+14, r1	; 0x0e
    27fe:	1f 82       	std	Y+7, r1	; 0x07
    2800:	18 86       	std	Y+8, r1	; 0x08
    2802:	19 86       	std	Y+9, r1	; 0x09
    2804:	1a 86       	std	Y+10, r1	; 0x0a
    2806:	1b 82       	std	Y+3, r1	; 0x03
    2808:	1c 82       	std	Y+4, r1	; 0x04
    280a:	1d 82       	std	Y+5, r1	; 0x05
    280c:	1e 82       	std	Y+6, r1	; 0x06
    280e:	44 24       	eor	r4, r4
    2810:	55 24       	eor	r5, r5
    2812:	32 01       	movw	r6, r4
    2814:	88 24       	eor	r8, r8
    2816:	99 24       	eor	r9, r9
    2818:	54 01       	movw	r10, r8
    281a:	ee 24       	eor	r14, r14
    281c:	ff 24       	eor	r15, r15
    281e:	87 01       	movw	r16, r14
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	a9 01       	movw	r20, r18
    2826:	1a 82       	std	Y+2, r1	; 0x02
    2828:	19 82       	std	Y+1, r1	; 0x01
    282a:	22 24       	eor	r2, r2
    282c:	33 24       	eor	r3, r3
    282e:	1c a2       	std	Y+36, r1	; 0x24
    2830:	1b a2       	std	Y+35, r1	; 0x23
    2832:	4f c8       	rjmp	.-3938   	; 0x18d2 <main+0x464>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	90 93 e5 03 	sts	0x03E5, r25
    2840:	80 93 e4 03 	sts	0x03E4, r24
    2844:	84 cb       	rjmp	.-2296   	; 0x1f4e <main+0xae0>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    2846:	44 0f       	add	r20, r20
    2848:	55 1f       	adc	r21, r21
    284a:	44 0f       	add	r20, r20
    284c:	55 1f       	adc	r21, r21
    284e:	50 93 e3 03 	sts	0x03E3, r21
    2852:	40 93 e2 03 	sts	0x03E2, r20
    2856:	6e cb       	rjmp	.-2340   	; 0x1f34 <main+0xac6>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    2858:	ee 58       	subi	r30, 0x8E	; 142
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	05 90       	lpm	r0, Z+
    2862:	f4 91       	lpm	r31, Z+
    2864:	e0 2d       	mov	r30, r0
    2866:	19 94       	eijmp
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;
					
					case 52:
						behaviorState = (behaviorState+1)%4;
    2868:	80 91 04 04 	lds	r24, 0x0404
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	83 70       	andi	r24, 0x03	; 3
    2872:	90 70       	andi	r25, 0x00	; 0
    2874:	80 93 04 04 	sts	0x0404, r24
						switch(behaviorState) {
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	c1 f0       	breq	.+48     	; 0x28ac <__stack+0x6ad>
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	09 f4       	brne	.+2      	; 0x2882 <__stack+0x683>
    2880:	a1 c2       	rjmp	.+1346   	; 0x2dc4 <__stack+0xbc5>
    2882:	81 30       	cpi	r24, 0x01	; 1
    2884:	09 f4       	brne	.+2      	; 0x2888 <__stack+0x689>
    2886:	03 c3       	rjmp	.+1542   	; 0x2e8e <__stack+0xc8f>
							case 0: 
								obstacleAvoidanceEnabled = 0;
    2888:	10 92 29 04 	sts	0x0429, r1
								cliffAvoidanceEnabled = 0;
    288c:	10 92 2e 04 	sts	0x042E, r1
    2890:	20 91 e2 03 	lds	r18, 0x03E2
    2894:	30 91 e3 03 	lds	r19, 0x03E3
    2898:	80 91 e4 03 	lds	r24, 0x03E4
    289c:	90 91 e5 03 	lds	r25, 0x03E5
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    28a0:	37 ff       	sbrs	r19, 7
    28a2:	7d cc       	rjmp	.-1798   	; 0x219e <main+0xd30>
					speedr = pwm_right_desired >> 2;
    28a4:	30 95       	com	r19
    28a6:	21 95       	neg	r18
    28a8:	3f 4f       	sbci	r19, 0xFF	; 255
    28aa:	79 cc       	rjmp	.-1806   	; 0x219e <main+0xd30>
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    28ac:	10 92 29 04 	sts	0x0429, r1
								cliffAvoidanceEnabled = 1;
    28b0:	d0 92 2e 04 	sts	0x042E, r13
    28b4:	6a cc       	rjmp	.-1836   	; 0x218a <main+0xd1c>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;
					
					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    28b6:	10 92 29 04 	sts	0x0429, r1
    28ba:	20 91 e2 03 	lds	r18, 0x03E2
    28be:	30 91 e3 03 	lds	r19, 0x03E3
    28c2:	80 91 e4 03 	lds	r24, 0x03E4
    28c6:	90 91 e5 03 	lds	r25, 0x03E5
						break;
    28ca:	67 cc       	rjmp	.-1842   	; 0x219a <main+0xd2c>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    28cc:	d0 92 29 04 	sts	0x0429, r13
    28d0:	20 91 e2 03 	lds	r18, 0x03E2
    28d4:	30 91 e3 03 	lds	r19, 0x03E3
    28d8:	80 91 e4 03 	lds	r24, 0x03E4
    28dc:	90 91 e5 03 	lds	r25, 0x03E5
						break;
    28e0:	5c cc       	rjmp	.-1864   	; 0x219a <main+0xd2c>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    28e2:	80 91 e4 03 	lds	r24, 0x03E4
    28e6:	90 91 e5 03 	lds	r25, 0x03E5
    28ea:	4e 97       	sbiw	r24, 0x1e	; 30
    28ec:	90 93 e5 03 	sts	0x03E5, r25
    28f0:	80 93 e4 03 	sts	0x03E4, r24
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    28f4:	bd ef       	ldi	r27, 0xFD	; 253
    28f6:	8a 39       	cpi	r24, 0x9A	; 154
    28f8:	9b 07       	cpc	r25, r27
    28fa:	ac f5       	brge	.+106    	; 0x2966 <__stack+0x767>
    28fc:	ea e9       	ldi	r30, 0x9A	; 154
    28fe:	fd ef       	ldi	r31, 0xFD	; 253
    2900:	f0 93 e5 03 	sts	0x03E5, r31
    2904:	e0 93 e4 03 	sts	0x03E4, r30
    2908:	20 91 e2 03 	lds	r18, 0x03E2
    290c:	30 91 e3 03 	lds	r19, 0x03E3
    2910:	8a e9       	ldi	r24, 0x9A	; 154
    2912:	9d ef       	ldi	r25, 0xFD	; 253
    2914:	42 cc       	rjmp	.-1916   	; 0x219a <main+0xd2c>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    2916:	20 91 e2 03 	lds	r18, 0x03E2
    291a:	30 91 e3 03 	lds	r19, 0x03E3
    291e:	80 91 e0 03 	lds	r24, 0x03E0
    2922:	90 91 e1 03 	lds	r25, 0x03E1
    2926:	28 17       	cp	r18, r24
    2928:	39 07       	cpc	r19, r25
    292a:	24 f0       	brlt	.+8      	; 0x2934 <__stack+0x735>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    292c:	20 91 e4 03 	lds	r18, 0x03E4
    2930:	30 91 e5 03 	lds	r19, 0x03E5
						}
						pwm_right_desired -= STEP_MOTORS;
    2934:	2e 51       	subi	r18, 0x1E	; 30
    2936:	30 40       	sbci	r19, 0x00	; 0
    2938:	30 93 e3 03 	sts	0x03E3, r19
    293c:	20 93 e2 03 	sts	0x03E2, r18
						pwm_left_desired -= STEP_MOTORS;
    2940:	c9 01       	movw	r24, r18
    2942:	30 93 e5 03 	sts	0x03E5, r19
    2946:	20 93 e4 03 	sts	0x03E4, r18
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    294a:	4d ef       	ldi	r20, 0xFD	; 253
    294c:	2a 39       	cpi	r18, 0x9A	; 154
    294e:	34 07       	cpc	r19, r20
    2950:	34 f4       	brge	.+12     	; 0x295e <__stack+0x75f>
    2952:	aa e9       	ldi	r26, 0x9A	; 154
    2954:	bd ef       	ldi	r27, 0xFD	; 253
    2956:	b0 93 e3 03 	sts	0x03E3, r27
    295a:	a0 93 e2 03 	sts	0x03E2, r26
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    295e:	bd ef       	ldi	r27, 0xFD	; 253
    2960:	2a 39       	cpi	r18, 0x9A	; 154
    2962:	3b 07       	cpc	r19, r27
    2964:	5c f2       	brlt	.-106    	; 0x28fc <__stack+0x6fd>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    2966:	20 91 e2 03 	lds	r18, 0x03E2
    296a:	30 91 e3 03 	lds	r19, 0x03E3
    296e:	15 cc       	rjmp	.-2006   	; 0x219a <main+0xd2c>
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    2970:	20 91 e2 03 	lds	r18, 0x03E2
    2974:	30 91 e3 03 	lds	r19, 0x03E3
    2978:	2e 51       	subi	r18, 0x1E	; 30
    297a:	30 40       	sbci	r19, 0x00	; 0
    297c:	30 93 e3 03 	sts	0x03E3, r19
    2980:	20 93 e2 03 	sts	0x03E2, r18
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    2984:	fd ef       	ldi	r31, 0xFD	; 253
    2986:	2a 39       	cpi	r18, 0x9A	; 154
    2988:	3f 07       	cpc	r19, r31
    298a:	0c f0       	brlt	.+2      	; 0x298e <__stack+0x78f>
    298c:	23 c2       	rjmp	.+1094   	; 0x2dd4 <__stack+0xbd5>
    298e:	2a e9       	ldi	r18, 0x9A	; 154
    2990:	3d ef       	ldi	r19, 0xFD	; 253
    2992:	30 93 e3 03 	sts	0x03E3, r19
    2996:	20 93 e2 03 	sts	0x03E2, r18
    299a:	80 91 e4 03 	lds	r24, 0x03E4
    299e:	90 91 e5 03 	lds	r25, 0x03E5
    29a2:	29 e9       	ldi	r18, 0x99	; 153
    29a4:	30 e0       	ldi	r19, 0x00	; 0
	            }	// switch
				
				if(pwm_right_desired >= 0) {
					speedr = pwm_right_desired >> 2;
				} else {
					speedr = (-pwm_right_desired) >> 2;
    29a6:	30 93 fe 03 	sts	0x03FE, r19
    29aa:	20 93 fd 03 	sts	0x03FD, r18
				}
				if(pwm_left_desired >= 0) {
    29ae:	97 ff       	sbrs	r25, 7
    29b0:	00 cc       	rjmp	.-2048   	; 0x21b2 <main+0xd44>
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
    29b2:	90 95       	com	r25
    29b4:	81 95       	neg	r24
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	fc cb       	rjmp	.-2056   	; 0x21b2 <main+0xd44>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    29ba:	20 91 e2 03 	lds	r18, 0x03E2
    29be:	30 91 e3 03 	lds	r19, 0x03E3
    29c2:	2e 51       	subi	r18, 0x1E	; 30
    29c4:	30 40       	sbci	r19, 0x00	; 0
    29c6:	30 93 e3 03 	sts	0x03E3, r19
    29ca:	20 93 e2 03 	sts	0x03E2, r18
						pwm_left_desired += STEP_MOTORS;
    29ce:	80 91 e4 03 	lds	r24, 0x03E4
    29d2:	90 91 e5 03 	lds	r25, 0x03E5
    29d6:	4e 96       	adiw	r24, 0x1e	; 30
    29d8:	90 93 e5 03 	sts	0x03E5, r25
    29dc:	80 93 e4 03 	sts	0x03E4, r24
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    29e0:	fd ef       	ldi	r31, 0xFD	; 253
    29e2:	2a 39       	cpi	r18, 0x9A	; 154
    29e4:	3f 07       	cpc	r19, r31
    29e6:	34 f4       	brge	.+12     	; 0x29f4 <__stack+0x7f5>
    29e8:	2a e9       	ldi	r18, 0x9A	; 154
    29ea:	3d ef       	ldi	r19, 0xFD	; 253
    29ec:	30 93 e3 03 	sts	0x03E3, r19
    29f0:	20 93 e2 03 	sts	0x03E2, r18
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    29f4:	42 e0       	ldi	r20, 0x02	; 2
    29f6:	87 36       	cpi	r24, 0x67	; 103
    29f8:	94 07       	cpc	r25, r20
    29fa:	0c f4       	brge	.+2      	; 0x29fe <__stack+0x7ff>
    29fc:	ce cb       	rjmp	.-2148   	; 0x219a <main+0xd2c>
    29fe:	86 e6       	ldi	r24, 0x66	; 102
    2a00:	92 e0       	ldi	r25, 0x02	; 2
    2a02:	90 93 e5 03 	sts	0x03E5, r25
    2a06:	80 93 e4 03 	sts	0x03E4, r24
    2a0a:	c7 cb       	rjmp	.-2162   	; 0x219a <main+0xd2c>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    2a0c:	10 92 e3 03 	sts	0x03E3, r1
    2a10:	10 92 e2 03 	sts	0x03E2, r1
						pwm_left_desired = 0;
    2a14:	10 92 e5 03 	sts	0x03E5, r1
    2a18:	10 92 e4 03 	sts	0x03E4, r1
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	bc cb       	rjmp	.-2184   	; 0x219e <main+0xd30>
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    2a26:	20 91 e2 03 	lds	r18, 0x03E2
    2a2a:	30 91 e3 03 	lds	r19, 0x03E3
    2a2e:	22 5e       	subi	r18, 0xE2	; 226
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	30 93 e3 03 	sts	0x03E3, r19
    2a36:	20 93 e2 03 	sts	0x03E2, r18
						pwm_left_desired -= STEP_MOTORS;
    2a3a:	80 91 e4 03 	lds	r24, 0x03E4
    2a3e:	90 91 e5 03 	lds	r25, 0x03E5
    2a42:	4e 97       	sbiw	r24, 0x1e	; 30
    2a44:	90 93 e5 03 	sts	0x03E5, r25
    2a48:	80 93 e4 03 	sts	0x03E4, r24
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    2a4c:	a2 e0       	ldi	r26, 0x02	; 2
    2a4e:	27 36       	cpi	r18, 0x67	; 103
    2a50:	3a 07       	cpc	r19, r26
    2a52:	44 f0       	brlt	.+16     	; 0x2a64 <__stack+0x865>
    2a54:	e6 e6       	ldi	r30, 0x66	; 102
    2a56:	f2 e0       	ldi	r31, 0x02	; 2
    2a58:	f0 93 e3 03 	sts	0x03E3, r31
    2a5c:	e0 93 e2 03 	sts	0x03E2, r30
    2a60:	26 e6       	ldi	r18, 0x66	; 102
    2a62:	32 e0       	ldi	r19, 0x02	; 2
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    2a64:	fd ef       	ldi	r31, 0xFD	; 253
    2a66:	8a 39       	cpi	r24, 0x9A	; 154
    2a68:	9f 07       	cpc	r25, r31
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <__stack+0x86f>
    2a6c:	96 cb       	rjmp	.-2260   	; 0x219a <main+0xd2c>
    2a6e:	4a e9       	ldi	r20, 0x9A	; 154
    2a70:	5d ef       	ldi	r21, 0xFD	; 253
    2a72:	50 93 e5 03 	sts	0x03E5, r21
    2a76:	40 93 e4 03 	sts	0x03E4, r20
    2a7a:	8a e9       	ldi	r24, 0x9A	; 154
    2a7c:	9d ef       	ldi	r25, 0xFD	; 253
    2a7e:	8d cb       	rjmp	.-2278   	; 0x219a <main+0xd2c>
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    2a80:	80 91 e4 03 	lds	r24, 0x03E4
    2a84:	90 91 e5 03 	lds	r25, 0x03E5
    2a88:	4e 96       	adiw	r24, 0x1e	; 30
    2a8a:	90 93 e5 03 	sts	0x03E5, r25
    2a8e:	80 93 e4 03 	sts	0x03E4, r24
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    2a92:	52 e0       	ldi	r21, 0x02	; 2
    2a94:	87 36       	cpi	r24, 0x67	; 103
    2a96:	95 07       	cpc	r25, r21
    2a98:	0c f4       	brge	.+2      	; 0x2a9c <__stack+0x89d>
    2a9a:	65 cf       	rjmp	.-310    	; 0x2966 <__stack+0x767>
    2a9c:	86 e6       	ldi	r24, 0x66	; 102
    2a9e:	92 e0       	ldi	r25, 0x02	; 2
    2aa0:	90 93 e5 03 	sts	0x03E5, r25
    2aa4:	80 93 e4 03 	sts	0x03E4, r24
    2aa8:	20 91 e2 03 	lds	r18, 0x03E2
    2aac:	30 91 e3 03 	lds	r19, 0x03E3
    2ab0:	74 cb       	rjmp	.-2328   	; 0x219a <main+0xd2c>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    2ab2:	20 91 e2 03 	lds	r18, 0x03E2
    2ab6:	30 91 e3 03 	lds	r19, 0x03E3
    2aba:	80 91 e4 03 	lds	r24, 0x03E4
    2abe:	90 91 e5 03 	lds	r25, 0x03E5
    2ac2:	82 17       	cp	r24, r18
    2ac4:	93 07       	cpc	r25, r19
    2ac6:	0c f4       	brge	.+2      	; 0x2aca <__stack+0x8cb>
    2ac8:	ba c1       	rjmp	.+884    	; 0x2e3e <__stack+0xc3f>
    2aca:	9c 01       	movw	r18, r24
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    2acc:	22 5e       	subi	r18, 0xE2	; 226
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	30 93 e3 03 	sts	0x03E3, r19
    2ad4:	20 93 e2 03 	sts	0x03E2, r18
						pwm_left_desired += STEP_MOTORS;
    2ad8:	4e 96       	adiw	r24, 0x1e	; 30
    2ada:	90 93 e5 03 	sts	0x03E5, r25
    2ade:	80 93 e4 03 	sts	0x03E4, r24
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    2ae2:	b2 e0       	ldi	r27, 0x02	; 2
    2ae4:	27 36       	cpi	r18, 0x67	; 103
    2ae6:	3b 07       	cpc	r19, r27
    2ae8:	34 f0       	brlt	.+12     	; 0x2af6 <__stack+0x8f7>
    2aea:	e6 e6       	ldi	r30, 0x66	; 102
    2aec:	f2 e0       	ldi	r31, 0x02	; 2
    2aee:	f0 93 e3 03 	sts	0x03E3, r31
    2af2:	e0 93 e2 03 	sts	0x03E2, r30
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    2af6:	f2 e0       	ldi	r31, 0x02	; 2
    2af8:	87 36       	cpi	r24, 0x67	; 103
    2afa:	9f 07       	cpc	r25, r31
    2afc:	0c f4       	brge	.+2      	; 0x2b00 <__stack+0x901>
    2afe:	33 cf       	rjmp	.-410    	; 0x2966 <__stack+0x767>
    2b00:	26 e6       	ldi	r18, 0x66	; 102
    2b02:	32 e0       	ldi	r19, 0x02	; 2
    2b04:	30 93 e5 03 	sts	0x03E5, r19
    2b08:	20 93 e4 03 	sts	0x03E4, r18
    2b0c:	20 91 e2 03 	lds	r18, 0x03E2
    2b10:	30 91 e3 03 	lds	r19, 0x03E3
    2b14:	86 e6       	ldi	r24, 0x66	; 102
    2b16:	92 e0       	ldi	r25, 0x02	; 2
    2b18:	40 cb       	rjmp	.-2432   	; 0x219a <main+0xd2c>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    2b1a:	20 91 e2 03 	lds	r18, 0x03E2
    2b1e:	30 91 e3 03 	lds	r19, 0x03E3
    2b22:	22 5e       	subi	r18, 0xE2	; 226
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
    2b26:	30 93 e3 03 	sts	0x03E3, r19
    2b2a:	20 93 e2 03 	sts	0x03E2, r18
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    2b2e:	92 e0       	ldi	r25, 0x02	; 2
    2b30:	27 36       	cpi	r18, 0x67	; 103
    2b32:	39 07       	cpc	r19, r25
    2b34:	0c f4       	brge	.+2      	; 0x2b38 <__stack+0x939>
    2b36:	4e c1       	rjmp	.+668    	; 0x2dd4 <__stack+0xbd5>
    2b38:	a6 e6       	ldi	r26, 0x66	; 102
    2b3a:	b2 e0       	ldi	r27, 0x02	; 2
    2b3c:	b0 93 e3 03 	sts	0x03E3, r27
    2b40:	a0 93 e2 03 	sts	0x03E2, r26
    2b44:	80 91 e4 03 	lds	r24, 0x03E4
    2b48:	90 91 e5 03 	lds	r25, 0x03E5
    2b4c:	29 e9       	ldi	r18, 0x99	; 153
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	2a cb       	rjmp	.-2476   	; 0x21a6 <main+0xd38>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    2b52:	80 91 03 04 	lds	r24, 0x0403
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	65 e0       	ldi	r22, 0x05	; 5
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	0e 94 75 27 	call	0x4eea	; 0x4eea <__divmodhi4>
    2b62:	80 93 03 04 	sts	0x0403, r24

						if(colorState==0) {		// turn on blue
    2b66:	88 23       	and	r24, r24
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <__stack+0x96d>
    2b6a:	6b c1       	rjmp	.+726    	; 0x2e42 <__stack+0xc43>
							LED_IR1_HIGH;
    2b6c:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    2b6e:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    2b70:	10 92 14 02 	sts	0x0214, r1
							pwm_green = MAX_LEDS_PWM;
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	30 93 13 02 	sts	0x0213, r19
							pwm_red = MAX_LEDS_PWM;					
    2b7a:	30 93 12 02 	sts	0x0212, r19

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    2b7e:	80 91 80 00 	lds	r24, 0x0080
    2b82:	80 68       	ori	r24, 0x80	; 128
    2b84:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    2b88:	8f ef       	ldi	r24, 0xFF	; 255
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	90 93 89 00 	sts	0x0089, r25
    2b90:	80 93 88 00 	sts	0x0088, r24
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
    2b94:	80 91 13 02 	lds	r24, 0x0213

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <__stack+0x99f>
    2b9c:	71 c1       	rjmp	.+738    	; 0x2e80 <__stack+0xc81>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    2b9e:	90 91 80 00 	lds	r25, 0x0080
    2ba2:	90 62       	ori	r25, 0x20	; 32
    2ba4:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	90 93 8b 00 	sts	0x008B, r25
    2bae:	80 93 8a 00 	sts	0x008A, r24
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    2bb2:	80 91 14 02 	lds	r24, 0x0214

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    2bb6:	88 23       	and	r24, r24
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <__stack+0x9bd>
    2bba:	53 c1       	rjmp	.+678    	; 0x2e62 <__stack+0xc63>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    2bbc:	90 91 80 00 	lds	r25, 0x0080
    2bc0:	98 60       	ori	r25, 0x08	; 8
    2bc2:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	90 93 8d 00 	sts	0x008D, r25
    2bcc:	80 93 8c 00 	sts	0x008C, r24
    2bd0:	20 91 e2 03 	lds	r18, 0x03E2
    2bd4:	30 91 e3 03 	lds	r19, 0x03E3
    2bd8:	80 91 e4 03 	lds	r24, 0x03E4
    2bdc:	90 91 e5 03 	lds	r25, 0x03E5
    2be0:	dc ca       	rjmp	.-2632   	; 0x219a <main+0xd2c>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2be2:	e0 91 51 04 	lds	r30, 0x0451
    2be6:	ee 23       	and	r30, r30
    2be8:	09 f4       	brne	.+2      	; 0x2bec <__stack+0x9ed>
    2bea:	d5 c0       	rjmp	.+426    	; 0x2d96 <__stack+0xb97>
    2bec:	70 91 53 04 	lds	r23, 0x0453
    2bf0:	60 91 54 04 	lds	r22, 0x0454
    2bf4:	32 2f       	mov	r19, r18
    2bf6:	81 c9       	rjmp	.-3326   	; 0x1efa <main+0xa8c>
					ackPayload[15] = ir_move;			
					packetId = 5;
					break;
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    2bf8:	80 91 33 03 	lds	r24, 0x0333
    2bfc:	90 91 34 03 	lds	r25, 0x0334
    2c00:	80 93 38 04 	sts	0x0438, r24
					ackPayload[2] = proximityValue[0]>>8;
    2c04:	80 91 33 03 	lds	r24, 0x0333
    2c08:	90 91 34 03 	lds	r25, 0x0334
    2c0c:	90 93 39 04 	sts	0x0439, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    2c10:	80 91 37 03 	lds	r24, 0x0337
    2c14:	90 91 38 03 	lds	r25, 0x0338
    2c18:	80 93 3a 04 	sts	0x043A, r24
					ackPayload[4] = proximityValue[2]>>8;
    2c1c:	80 91 37 03 	lds	r24, 0x0337
    2c20:	90 91 38 03 	lds	r25, 0x0338
    2c24:	90 93 3b 04 	sts	0x043B, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2c28:	80 91 3b 03 	lds	r24, 0x033B
    2c2c:	90 91 3c 03 	lds	r25, 0x033C
    2c30:	80 93 3c 04 	sts	0x043C, r24
					ackPayload[6] = proximityValue[4]>>8;
    2c34:	80 91 3b 03 	lds	r24, 0x033B
    2c38:	90 91 3c 03 	lds	r25, 0x033C
    2c3c:	90 93 3d 04 	sts	0x043D, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2c40:	80 91 3f 03 	lds	r24, 0x033F
    2c44:	90 91 40 03 	lds	r25, 0x0340
    2c48:	80 93 3e 04 	sts	0x043E, r24
					ackPayload[8] = proximityValue[6]>>8;
    2c4c:	80 91 3f 03 	lds	r24, 0x033F
    2c50:	90 91 40 03 	lds	r25, 0x0340
    2c54:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2c58:	80 91 47 03 	lds	r24, 0x0347
    2c5c:	90 91 48 03 	lds	r25, 0x0348
    2c60:	80 93 40 04 	sts	0x0440, r24
					ackPayload[10] = proximityValue[10]>>8;
    2c64:	80 91 47 03 	lds	r24, 0x0347
    2c68:	90 91 48 03 	lds	r25, 0x0348
    2c6c:	90 93 41 04 	sts	0x0441, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2c70:	80 91 4b 03 	lds	r24, 0x034B
    2c74:	90 91 4c 03 	lds	r25, 0x034C
    2c78:	80 93 42 04 	sts	0x0442, r24
					ackPayload[12] = proximityValue[12]>>8;
    2c7c:	80 91 4b 03 	lds	r24, 0x034B
    2c80:	90 91 4c 03 	lds	r25, 0x034C
    2c84:	90 93 43 04 	sts	0x0443, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2c88:	80 91 4f 03 	lds	r24, 0x034F
    2c8c:	90 91 50 03 	lds	r25, 0x0350
    2c90:	80 93 44 04 	sts	0x0444, r24
					ackPayload[14] = proximityValue[14]>>8;
    2c94:	80 91 4f 03 	lds	r24, 0x034F
    2c98:	90 91 50 03 	lds	r25, 0x0350
    2c9c:	90 93 45 04 	sts	0x0445, r25
					ackPayload[15] = currentSelector;
    2ca0:	80 91 24 04 	lds	r24, 0x0424
    2ca4:	80 93 46 04 	sts	0x0446, r24
					packetId = 6;
    2ca8:	b6 e0       	ldi	r27, 0x06	; 6
    2caa:	b0 93 11 02 	sts	0x0211, r27
					break;	
    2cae:	56 ca       	rjmp	.-2900   	; 0x215c <main+0xcee>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    2cb0:	90 91 6b 03 	lds	r25, 0x036B
    2cb4:	80 91 6c 03 	lds	r24, 0x036C
    2cb8:	90 93 38 04 	sts	0x0438, r25
					ackPayload[2] = proximityResult[4]>>8;
    2cbc:	80 93 39 04 	sts	0x0439, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    2cc0:	90 91 73 03 	lds	r25, 0x0373
    2cc4:	80 91 74 03 	lds	r24, 0x0374
    2cc8:	90 93 3a 04 	sts	0x043A, r25
					ackPayload[4] = proximityResult[8]>>8;
    2ccc:	80 93 3b 04 	sts	0x043B, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    2cd0:	90 91 75 03 	lds	r25, 0x0375
    2cd4:	80 91 76 03 	lds	r24, 0x0376
    2cd8:	90 93 3c 04 	sts	0x043C, r25
					ackPayload[6] = proximityResult[9]>>8;
    2cdc:	80 93 3d 04 	sts	0x043D, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    2ce0:	90 91 77 03 	lds	r25, 0x0377
    2ce4:	80 91 78 03 	lds	r24, 0x0378
    2ce8:	90 93 3e 04 	sts	0x043E, r25
					ackPayload[8] = proximityResult[10]>>8;
    2cec:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    2cf0:	90 91 79 03 	lds	r25, 0x0379
    2cf4:	80 91 7a 03 	lds	r24, 0x037A
    2cf8:	90 93 40 04 	sts	0x0440, r25
					ackPayload[10] = proximityResult[11]>>8;
    2cfc:	80 93 41 04 	sts	0x0441, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    2d00:	90 91 06 04 	lds	r25, 0x0406
    2d04:	80 91 07 04 	lds	r24, 0x0407
    2d08:	90 93 42 04 	sts	0x0442, r25
					ackPayload[12] = accX>>8;
    2d0c:	80 93 43 04 	sts	0x0443, r24
					ackPayload[13] = accY&0xFF;
    2d10:	90 91 08 04 	lds	r25, 0x0408
    2d14:	80 91 09 04 	lds	r24, 0x0409
    2d18:	90 93 44 04 	sts	0x0444, r25
					ackPayload[14] = accY>>8;
    2d1c:	80 93 45 04 	sts	0x0445, r24
					ackPayload[15] = ir_move;			
    2d20:	80 91 01 04 	lds	r24, 0x0401
    2d24:	80 93 46 04 	sts	0x0446, r24
					packetId = 5;
    2d28:	a5 e0       	ldi	r26, 0x05	; 5
    2d2a:	a0 93 11 02 	sts	0x0211, r26
					break;
    2d2e:	16 ca       	rjmp	.-3028   	; 0x215c <main+0xcee>
				}
			}
*/

			if(compute_left_vel) {
				last_left_vel = left_vel_sum>>3;
    2d30:	80 91 d6 03 	lds	r24, 0x03D6
    2d34:	90 91 d7 03 	lds	r25, 0x03D7
    2d38:	96 95       	lsr	r25
    2d3a:	87 95       	ror	r24
    2d3c:	96 95       	lsr	r25
    2d3e:	87 95       	ror	r24
    2d40:	96 95       	lsr	r25
    2d42:	87 95       	ror	r24
    2d44:	90 93 db 03 	sts	0x03DB, r25
    2d48:	80 93 da 03 	sts	0x03DA, r24
				left_vel_changed = 1;
    2d4c:	d0 92 f4 03 	sts	0x03F4, r13
				compute_left_vel = 0;
    2d50:	10 92 f2 03 	sts	0x03F2, r1
				left_vel_sum = 0;
    2d54:	10 92 d7 03 	sts	0x03D7, r1
    2d58:	10 92 d6 03 	sts	0x03D6, r1
			
				pwm_left_working = pwm_left_desired;
    2d5c:	80 91 e4 03 	lds	r24, 0x03E4
    2d60:	90 91 e5 03 	lds	r25, 0x03E5
    2d64:	90 93 f9 03 	sts	0x03F9, r25
    2d68:	80 93 f8 03 	sts	0x03F8, r24

				PORTB &= ~(1 << 5);
    2d6c:	2d 98       	cbi	0x05, 5	; 5
				start_orizzontal_speed_control_left(&pwm_left_working);
    2d6e:	88 ef       	ldi	r24, 0xF8	; 248
    2d70:	93 e0       	ldi	r25, 0x03	; 3
    2d72:	0e 94 77 1e 	call	0x3cee	; 0x3cee <start_orizzontal_speed_control_left>
				PORTB |= (1 << 5);
    2d76:	2d 9a       	sbi	0x05, 5	; 5

				pwm_left = pwm_left_working;
    2d78:	80 91 f8 03 	lds	r24, 0x03F8
    2d7c:	90 91 f9 03 	lds	r25, 0x03F9
    2d80:	90 93 e1 03 	sts	0x03E1, r25
    2d84:	80 93 e0 03 	sts	0x03E0, r24

				if(pwm_left >= 0) {
    2d88:	97 fd       	sbrc	r25, 7
    2d8a:	32 c0       	rjmp	.+100    	; 0x2df0 <__stack+0xbf1>
					OCR4A = (unsigned int)pwm_left;
    2d8c:	90 93 a9 00 	sts	0x00A9, r25
    2d90:	80 93 a8 00 	sts	0x00A8, r24
    2d94:	e9 cb       	rjmp	.-2094   	; 0x2568 <__stack+0x369>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2d96:	80 91 52 04 	lds	r24, 0x0452
    2d9a:	88 30       	cpi	r24, 0x08	; 8
    2d9c:	89 f1       	breq	.+98     	; 0x2e00 <__stack+0xc01>
    2d9e:	70 91 53 04 	lds	r23, 0x0453
    2da2:	60 91 54 04 	lds	r22, 0x0454
    2da6:	2e 2f       	mov	r18, r30
    2da8:	3e 2f       	mov	r19, r30
    2daa:	a7 c8       	rjmp	.-3762   	; 0x1efa <main+0xa8c>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	9a cb       	rjmp	.-2252   	; 0x24e6 <__stack+0x2e7>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	8b cb       	rjmp	.-2282   	; 0x24ce <__stack+0x2cf>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	86 cb       	rjmp	.-2292   	; 0x24ca <__stack+0x2cb>
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	77 cb       	rjmp	.-2322   	; 0x24b2 <__stack+0x2b3>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    2dc4:	d0 92 29 04 	sts	0x0429, r13
								cliffAvoidanceEnabled = 1;
    2dc8:	d0 92 2e 04 	sts	0x042E, r13
    2dcc:	20 91 e2 03 	lds	r18, 0x03E2
    2dd0:	30 91 e3 03 	lds	r19, 0x03E3
    2dd4:	80 91 e4 03 	lds	r24, 0x03E4
    2dd8:	90 91 e5 03 	lds	r25, 0x03E5
								break;
    2ddc:	de c9       	rjmp	.-3140   	; 0x219a <main+0xd2c>
				pwm_right = pwm_right_working;
	
				if(pwm_right >= 0) {
					OCR3A = (unsigned int)pwm_right;
				} else {
					OCR3B = (unsigned int)(-pwm_right);
    2dde:	90 95       	com	r25
    2de0:	81 95       	neg	r24
    2de2:	9f 4f       	sbci	r25, 0xFF	; 255
    2de4:	90 93 9b 00 	sts	0x009B, r25
    2de8:	80 93 9a 00 	sts	0x009A, r24
    2dec:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <main+0x82e>
				pwm_left = pwm_left_working;

				if(pwm_left >= 0) {
					OCR4A = (unsigned int)pwm_left;
				} else {
					OCR4B =(unsigned int)( -pwm_left);
    2df0:	90 95       	com	r25
    2df2:	81 95       	neg	r24
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	90 93 ab 00 	sts	0x00AB, r25
    2dfa:	80 93 aa 00 	sts	0x00AA, r24
    2dfe:	b4 cb       	rjmp	.-2200   	; 0x2568 <__stack+0x369>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    2e00:	70 91 53 04 	lds	r23, 0x0453
    2e04:	77 23       	and	r23, r23
    2e06:	29 f0       	breq	.+10     	; 0x2e12 <__stack+0xc13>
    2e08:	60 91 54 04 	lds	r22, 0x0454
    2e0c:	2e 2f       	mov	r18, r30
    2e0e:	3e 2f       	mov	r19, r30
    2e10:	74 c8       	rjmp	.-3864   	; 0x1efa <main+0xa8c>
    2e12:	60 91 54 04 	lds	r22, 0x0454
    2e16:	66 23       	and	r22, r22
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <__stack+0xc1d>
    2e1a:	46 c0       	rjmp	.+140    	; 0x2ea8 <__stack+0xca9>

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2e1c:	10 92 fe 03 	sts	0x03FE, r1
    2e20:	10 92 fd 03 	sts	0x03FD, r1
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    2e24:	86 2f       	mov	r24, r22
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	8f 77       	andi	r24, 0x7F	; 127
    2e2a:	90 70       	andi	r25, 0x00	; 0
    2e2c:	90 93 fc 03 	sts	0x03FC, r25
    2e30:	80 93 fb 03 	sts	0x03FB, r24
    2e34:	e2 2f       	mov	r30, r18
    2e36:	32 2f       	mov	r19, r18

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	70 c8       	rjmp	.-3872   	; 0x1f1e <main+0xab0>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    2e3e:	c9 01       	movw	r24, r18
    2e40:	45 ce       	rjmp	.-886    	; 0x2acc <__stack+0x8cd>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
    2e42:	81 30       	cpi	r24, 0x01	; 1
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <__stack+0xc49>
    2e46:	4d c0       	rjmp	.+154    	; 0x2ee2 <__stack+0xce3>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    2e48:	82 30       	cpi	r24, 0x02	; 2
    2e4a:	d9 f1       	breq	.+118    	; 0x2ec2 <__stack+0xcc3>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    2e4c:	83 30       	cpi	r24, 0x03	; 3
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <__stack+0xc53>
    2e50:	50 c0       	rjmp	.+160    	; 0x2ef2 <__stack+0xcf3>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    2e52:	6f ef       	ldi	r22, 0xFF	; 255
    2e54:	60 93 14 02 	sts	0x0214, r22
							pwm_green = MAX_LEDS_PWM;
    2e58:	60 93 13 02 	sts	0x0213, r22
							pwm_red = MAX_LEDS_PWM;
    2e5c:	60 93 12 02 	sts	0x0212, r22
    2e60:	8e ce       	rjmp	.-740    	; 0x2b7e <__stack+0x97f>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    2e62:	80 91 80 00 	lds	r24, 0x0080
    2e66:	87 7f       	andi	r24, 0xF7	; 247
    2e68:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    2e6c:	2f 98       	cbi	0x05, 7	; 5
    2e6e:	20 91 e2 03 	lds	r18, 0x03E2
    2e72:	30 91 e3 03 	lds	r19, 0x03E3
    2e76:	80 91 e4 03 	lds	r24, 0x03E4
    2e7a:	90 91 e5 03 	lds	r25, 0x03E5
    2e7e:	8d c9       	rjmp	.-3302   	; 0x219a <main+0xd2c>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    2e80:	80 91 80 00 	lds	r24, 0x0080
    2e84:	8f 7d       	andi	r24, 0xDF	; 223
    2e86:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    2e8a:	2e 98       	cbi	0x05, 6	; 5
    2e8c:	92 ce       	rjmp	.-732    	; 0x2bb2 <__stack+0x9b3>
							case 0: 
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    2e8e:	80 93 29 04 	sts	0x0429, r24
								cliffAvoidanceEnabled = 0;
    2e92:	10 92 2e 04 	sts	0x042E, r1
    2e96:	20 91 e2 03 	lds	r18, 0x03E2
    2e9a:	30 91 e3 03 	lds	r19, 0x03E3
    2e9e:	80 91 e4 03 	lds	r24, 0x03E4
    2ea2:	90 91 e5 03 	lds	r25, 0x03E5
								break;
    2ea6:	79 c9       	rjmp	.-3342   	; 0x219a <main+0xd2c>
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the 
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    2ea8:	0e 94 b0 01 	call	0x360	; 0x360 <sleep.clone.0>
    2eac:	70 91 53 04 	lds	r23, 0x0453
    2eb0:	60 91 54 04 	lds	r22, 0x0454
    2eb4:	30 91 4f 04 	lds	r19, 0x044F
    2eb8:	20 91 50 04 	lds	r18, 0x0450
    2ebc:	e0 91 51 04 	lds	r30, 0x0451
    2ec0:	1c c8       	rjmp	.-4040   	; 0x1efa <main+0xa8c>
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    2ec2:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    2ec4:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    2ec6:	5f ef       	ldi	r21, 0xFF	; 255
    2ec8:	50 93 14 02 	sts	0x0214, r21
							pwm_green = MAX_LEDS_PWM;
    2ecc:	50 93 13 02 	sts	0x0213, r21
							pwm_red = 0;
    2ed0:	10 92 12 02 	sts	0x0212, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    2ed4:	80 91 80 00 	lds	r24, 0x0080
    2ed8:	8f 77       	andi	r24, 0x7F	; 127
    2eda:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    2ede:	2d 98       	cbi	0x05, 5	; 5
    2ee0:	59 ce       	rjmp	.-846    	; 0x2b94 <__stack+0x995>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    2ee2:	4f ef       	ldi	r20, 0xFF	; 255
    2ee4:	40 93 14 02 	sts	0x0214, r20
							pwm_green = 0;
    2ee8:	10 92 13 02 	sts	0x0213, r1
							pwm_red = MAX_LEDS_PWM;
    2eec:	40 93 12 02 	sts	0x0212, r20
    2ef0:	46 ce       	rjmp	.-884    	; 0x2b7e <__stack+0x97f>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    2ef2:	10 92 14 02 	sts	0x0214, r1
							pwm_green = 0;
    2ef6:	10 92 13 02 	sts	0x0213, r1
							pwm_red = 0;
    2efa:	10 92 12 02 	sts	0x0212, r1
    2efe:	ea cf       	rjmp	.-44     	; 0x2ed4 <__stack+0xcd5>

00002f00 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    2f00:	84 b1       	in	r24, 0x04	; 4
    2f02:	80 7f       	andi	r24, 0xF0	; 240
    2f04:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    2f06:	84 b1       	in	r24, 0x04	; 4
    2f08:	87 60       	ori	r24, 0x07	; 7
    2f0a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    2f0c:	80 e5       	ldi	r24, 0x50	; 80
    2f0e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    2f10:	8d b5       	in	r24, 0x2d	; 45
    2f12:	81 60       	ori	r24, 0x01	; 1
    2f14:	8d bd       	out	0x2d, r24	; 45

}
    2f16:	08 95       	ret

00002f18 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    2f18:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    2f1a:	1d bc       	out	0x2d, r1	; 45
}
    2f1c:	08 95       	ret

00002f1e <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f1e:	44 23       	and	r20, r20
    2f20:	79 f0       	breq	.+30     	; 0x2f40 <SPI_ReadWrite_Block+0x22>
    2f22:	a8 2f       	mov	r26, r24
    2f24:	b9 2f       	mov	r27, r25
    2f26:	e6 2f       	mov	r30, r22
    2f28:	f7 2f       	mov	r31, r23
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    2f2c:	9d 91       	ld	r25, X+
    2f2e:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    2f30:	0d b4       	in	r0, 0x2d	; 45
    2f32:	07 fe       	sbrs	r0, 7
    2f34:	fd cf       	rjmp	.-6      	; 0x2f30 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    2f36:	9e b5       	in	r25, 0x2e	; 46
    2f38:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	84 17       	cp	r24, r20
    2f3e:	b0 f3       	brcs	.-20     	; 0x2f2c <SPI_ReadWrite_Block+0xe>
    2f40:	08 95       	ret

00002f42 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f42:	66 23       	and	r22, r22
    2f44:	59 f0       	breq	.+22     	; 0x2f5c <SPI_Write_Block+0x1a>
    2f46:	e8 2f       	mov	r30, r24
    2f48:	f9 2f       	mov	r31, r25
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    2f4c:	91 91       	ld	r25, Z+
    2f4e:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    2f50:	0d b4       	in	r0, 0x2d	; 45
    2f52:	07 fe       	sbrs	r0, 7
    2f54:	fd cf       	rjmp	.-6      	; 0x2f50 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	86 17       	cp	r24, r22
    2f5a:	c0 f3       	brcs	.-16     	; 0x2f4c <SPI_Write_Block+0xa>
    2f5c:	08 95       	ret

00002f5e <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    2f5e:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    2f60:	0d b4       	in	r0, 0x2d	; 45
    2f62:	07 fe       	sbrs	r0, 7
    2f64:	fd cf       	rjmp	.-6      	; 0x2f60 <SPI_Write_Byte+0x2>
    return SPDR;
    2f66:	8e b5       	in	r24, 0x2e	; 46
}
    2f68:	08 95       	ret

00002f6a <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <mirf_config+0xa>
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2f78:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2f7a:	80 e2       	ldi	r24, 0x20	; 32
    2f7c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2f80:	8d e0       	ldi	r24, 0x0D	; 13
    2f82:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    2f86:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2f88:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2f8a:	83 e2       	ldi	r24, 0x23	; 35
    2f8c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    2f96:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    2f98:	8c e0       	ldi	r24, 0x0C	; 12
    2f9a:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    2f9c:	80 e8       	ldi	r24, 0x80	; 128
    2f9e:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2fa0:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2fa2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fa4:	80 e3       	ldi	r24, 0x30	; 48
    2fa6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2faa:	8e 01       	movw	r16, r28
    2fac:	0f 5f       	subi	r16, 0xFF	; 255
    2fae:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb0:	c8 01       	movw	r24, r16
    2fb2:	63 e0       	ldi	r22, 0x03	; 3
    2fb4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SPI_Write_Block>
    mirf_CSN_hi;
    2fb8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2fba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fbc:	8a e2       	ldi	r24, 0x2A	; 42
    2fbe:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2fc2:	c8 01       	movw	r24, r16
    2fc4:	63 e0       	ldi	r22, 0x03	; 3
    2fc6:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SPI_Write_Block>
    mirf_CSN_hi;
    2fca:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2fcc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fce:	81 e2       	ldi	r24, 0x21	; 33
    2fd0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    2fda:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2fdc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fde:	82 e2       	ldi	r24, 0x22	; 34
    2fe0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    2fea:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2fec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fee:	84 e2       	ldi	r24, 0x24	; 36
    2ff0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2ff4:	82 e1       	ldi	r24, 0x12	; 18
    2ff6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    2ffa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2ffc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2ffe:	85 e2       	ldi	r24, 0x25	; 37
    3000:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3004:	88 e2       	ldi	r24, 0x28	; 40
    3006:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    300a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    300c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    300e:	81 e3       	ldi	r24, 0x31	; 49
    3010:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3014:	86 e0       	ldi	r24, 0x06	; 6
    3016:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    301a:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    301c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    301e:	80 e5       	ldi	r24, 0x50	; 80
    3020:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    3024:	83 e7       	ldi	r24, 0x73	; 115
    3026:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    302a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    302c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    302e:	8c e3       	ldi	r24, 0x3C	; 60
    3030:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    303a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    303c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    303e:	8d e3       	ldi	r24, 0x3D	; 61
    3040:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3044:	86 e0       	ldi	r24, 0x06	; 6
    3046:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    304a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    304c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    304e:	80 e2       	ldi	r24, 0x20	; 32
    3050:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3054:	8f e0       	ldi	r24, 0x0F	; 15
    3056:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    305a:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    306c:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    306e:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    3070:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <mirf_config>
}
    3074:	08 95       	ret

00003076 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    307c:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    307e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3080:	8a e2       	ldi	r24, 0x2A	; 42
    3082:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    3086:	ce 01       	movw	r24, r28
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SPI_Write_Block>
    mirf_CSN_hi;
    308e:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    3090:	2c 9a       	sbi	0x05, 4	; 5
}
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    309e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    30a0:	80 e3       	ldi	r24, 0x30	; 48
    30a2:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    30a6:	ce 01       	movw	r24, r28
    30a8:	65 e0       	ldi	r22, 0x05	; 5
    30aa:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SPI_Write_Block>
    mirf_CSN_hi;
    30ae:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    30b6:	80 91 32 04 	lds	r24, 0x0432
    30ba:	88 23       	and	r24, r24
    30bc:	11 f0       	breq	.+4      	; 0x30c2 <mirf_data_ready+0xc>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    30c0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    30c2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    30ca:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    30cc:	80 74       	andi	r24, 0x40	; 64
    30ce:	08 95       	ret

000030d0 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	0f 92       	push	r0
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    30da:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    30dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    30de:	87 e1       	ldi	r24, 0x17	; 23
    30e0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    30e4:	be 01       	movw	r22, r28
    30e6:	6f 5f       	subi	r22, 0xFF	; 255
    30e8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ea:	cb 01       	movw	r24, r22
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    30f2:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    30f6:	81 70       	andi	r24, 0x01	; 1
    30f8:	0f 90       	pop	r0
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    3100:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    3102:	82 ee       	ldi	r24, 0xE2	; 226
    3104:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    3108:	28 9a       	sbi	0x05, 0	; 5

}
    310a:	08 95       	ret

0000310c <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    3112:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    3114:	81 e6       	ldi	r24, 0x61	; 97
    3116:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    311a:	ce 01       	movw	r24, r28
    311c:	be 01       	movw	r22, r28
    311e:	46 e0       	ldi	r20, 0x06	; 6
    3120:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    3124:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3126:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3128:	87 e2       	ldi	r24, 0x27	; 39
    312a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    312e:	80 e4       	ldi	r24, 0x40	; 64
    3130:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    3134:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	08 95       	ret

0000313c <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	0f 92       	push	r0
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    3146:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3148:	8f 71       	andi	r24, 0x1F	; 31
    314a:	80 62       	ori	r24, 0x20	; 32
    314c:	69 83       	std	Y+1, r22	; 0x01
    314e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3152:	69 81       	ldd	r22, Y+1	; 0x01
    3154:	86 2f       	mov	r24, r22
    3156:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    315a:	28 9a       	sbi	0x05, 0	; 5
}
    315c:	0f 90       	pop	r0
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	0f 92       	push	r0
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    3174:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    3176:	8f 71       	andi	r24, 0x1F	; 31
    3178:	49 83       	std	Y+1, r20	; 0x01
    317a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    317e:	c8 01       	movw	r24, r16
    3180:	b8 01       	movw	r22, r16
    3182:	49 81       	ldd	r20, Y+1	; 0x01
    3184:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    3188:	28 9a       	sbi	0x05, 0	; 5
}
    318a:	0f 90       	pop	r0
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	0f 92       	push	r0
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    31a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    31a8:	8f 71       	andi	r24, 0x1F	; 31
    31aa:	80 62       	ori	r24, 0x20	; 32
    31ac:	49 83       	std	Y+1, r20	; 0x01
    31ae:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    31b2:	c8 01       	movw	r24, r16
    31b4:	49 81       	ldd	r20, Y+1	; 0x01
    31b6:	64 2f       	mov	r22, r20
    31b8:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SPI_Write_Block>
    mirf_CSN_hi;
    31bc:	28 9a       	sbi	0x05, 0	; 5
}
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	08 95       	ret

000031ca <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    31ca:	0f 93       	push	r16
    31cc:	1f 93       	push	r17
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	0f 92       	push	r0
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    31da:	80 91 32 04 	lds	r24, 0x0432
    31de:	88 23       	and	r24, r24
    31e0:	e1 f7       	brne	.-8      	; 0x31da <mirf_send+0x10>

    mirf_CE_lo;
    31e2:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	80 93 32 04 	sts	0x0432, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    31ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    31ec:	80 e2       	ldi	r24, 0x20	; 32
    31ee:	69 83       	std	Y+1, r22	; 0x01
    31f0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    31f4:	8a e4       	ldi	r24, 0x4A	; 74
    31f6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    31fa:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    31fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    31fe:	81 ee       	ldi	r24, 0xE1	; 225
    3200:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    3204:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    3206:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    3208:	80 ea       	ldi	r24, 0xA0	; 160
    320a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    320e:	c8 01       	movw	r24, r16
    3210:	69 81       	ldd	r22, Y+1	; 0x01
    3212:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    3216:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    3218:	2c 9a       	sbi	0x05, 4	; 5
}
    321a:	0f 90       	pop	r0
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	1f 91       	pop	r17
    3222:	0f 91       	pop	r16
    3224:	08 95       	ret

00003226 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	0f 92       	push	r0
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	18 2f       	mov	r17, r24
    323a:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    323c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    323e:	81 ee       	ldi	r24, 0xE1	; 225
    3240:	99 83       	std	Y+1, r25	; 0x01
    3242:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    3246:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    3248:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    324a:	88 ea       	ldi	r24, 0xA8	; 168
    324c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    3250:	99 81       	ldd	r25, Y+1	; 0x01
    3252:	00 23       	and	r16, r16
    3254:	61 f0       	breq	.+24     	; 0x326e <writeAckPayload+0x48>
    3256:	61 2f       	mov	r22, r17
    3258:	79 2f       	mov	r23, r25
    325a:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    325c:	f7 01       	movw	r30, r14
    325e:	81 91       	ld	r24, Z+
    3260:	7f 01       	movw	r14, r30
    3262:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    3266:	8e 2d       	mov	r24, r14
    3268:	81 1b       	sub	r24, r17
    326a:	80 17       	cp	r24, r16
    326c:	b8 f3       	brcs	.-18     	; 0x325c <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    326e:	28 9a       	sbi	0x05, 0	; 5


}
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	08 95       	ret

00003280 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    3280:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    3282:	81 ee       	ldi	r24, 0xE1	; 225
    3284:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <SPI_Write_Byte>
    mirf_CSN_hi;
    3288:	28 9a       	sbi	0x05, 0	; 5

}
    328a:	08 95       	ret

0000328c <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    328c:	e8 e6       	ldi	r30, 0x68	; 104
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	82 60       	ori	r24, 0x02	; 2
    3294:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    3296:	ec e6       	ldi	r30, 0x6C	; 108
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	80 68       	ori	r24, 0x80	; 128
    329e:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    32a0:	e0 eb       	ldi	r30, 0xB0	; 176
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	82 60       	ori	r24, 0x02	; 2
    32a8:	80 83       	st	Z, r24

}
    32aa:	08 95       	ret

000032ac <__vector_10>:

ISR(PCINT1_vect) {
    32ac:	1f 92       	push	r1
    32ae:	0f 92       	push	r0
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	0f 92       	push	r0
    32b4:	11 24       	eor	r1, r1
    32b6:	8f 93       	push	r24

	if(irEnabled) {
    32b8:	80 91 17 02 	lds	r24, 0x0217
    32bc:	88 23       	and	r24, r24
    32be:	21 f1       	breq	.+72     	; 0x3308 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {
    32c0:	80 91 03 01 	lds	r24, 0x0103
    32c4:	86 fd       	sbrc	r24, 6
    32c6:	20 c0       	rjmp	.+64     	; 0x3308 <__vector_10+0x5c>

			//PORTB ^= (1 << 5);
			//PORTB &= ~(1 << 6);
   			
			PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    32c8:	80 91 68 00 	lds	r24, 0x0068
    32cc:	8d 7f       	andi	r24, 0xFD	; 253
    32ce:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    32d2:	80 91 6c 00 	lds	r24, 0x006C
    32d6:	8f 77       	andi	r24, 0x7F	; 127
    32d8:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	80 93 18 02 	sts	0x0218, r24
			OCR2A = 13;
    32e2:	8d e0       	ldi	r24, 0x0D	; 13
    32e4:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    32e8:	80 91 b1 00 	lds	r24, 0x00B1
    32ec:	86 60       	ori	r24, 0x06	; 6
    32ee:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    32f2:	80 91 70 00 	lds	r24, 0x0070
    32f6:	82 60       	ori	r24, 0x02	; 2
    32f8:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    32fc:	10 92 2a 03 	sts	0x032A, r1
    3300:	10 92 2b 03 	sts	0x032B, r1
    3304:	10 92 2c 03 	sts	0x032C, r1

		}

	}
	
}
    3308:	8f 91       	pop	r24
    330a:	0f 90       	pop	r0
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	0f 90       	pop	r0
    3310:	1f 90       	pop	r1
    3312:	18 95       	reti

00003314 <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    3314:	80 91 00 02 	lds	r24, 0x0200
    3318:	08 95       	ret

0000331a <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    331a:	80 91 28 03 	lds	r24, 0x0328
    331e:	08 95       	ret

00003320 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    3320:	80 91 29 03 	lds	r24, 0x0329
    3324:	08 95       	ret

00003326 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    3326:	1f 92       	push	r1
    3328:	0f 92       	push	r0
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	0f 92       	push	r0
    332e:	11 24       	eor	r1, r1
    3330:	2f 93       	push	r18
    3332:	3f 93       	push	r19
    3334:	4f 93       	push	r20
    3336:	5f 93       	push	r21
    3338:	8f 93       	push	r24
    333a:	9f 93       	push	r25

		static int i = -1;

		//PORTB ^= (1 << 5);

		TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    333c:	80 91 b1 00 	lds	r24, 0x00B1
    3340:	88 7f       	andi	r24, 0xF8	; 248
    3342:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {
    3346:	80 91 18 02 	lds	r24, 0x0218
    334a:	88 23       	and	r24, r24
    334c:	a9 f0       	breq	.+42     	; 0x3378 <__vector_13+0x52>
			if(REMOTE) {	// if high it is a glitch
    334e:	80 91 03 01 	lds	r24, 0x0103
    3352:	86 ff       	sbrs	r24, 6
    3354:	65 c0       	rjmp	.+202    	; 0x3420 <__vector_13+0xfa>
				PCICR |= (1 << PCIE1);		// enable external interrupt
    3356:	80 91 68 00 	lds	r24, 0x0068
    335a:	82 60       	ori	r24, 0x02	; 2
    335c:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    3360:	80 91 6c 00 	lds	r24, 0x006C
    3364:	80 68       	ori	r24, 0x80	; 128
    3366:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    336a:	8f ef       	ldi	r24, 0xFF	; 255
    336c:	9f ef       	ldi	r25, 0xFF	; 255
    336e:	90 93 02 02 	sts	0x0202, r25
    3372:	80 93 01 02 	sts	0x0201, r24
    3376:	49 c0       	rjmp	.+146    	; 0x340a <__vector_13+0xe4>

			}
		} else {


			if (i == -1) { // start bit confirm  change timer period
    3378:	80 91 01 02 	lds	r24, 0x0201
    337c:	90 91 02 02 	lds	r25, 0x0202
    3380:	2f ef       	ldi	r18, 0xFF	; 255
    3382:	8f 3f       	cpi	r24, 0xFF	; 255
    3384:	92 07       	cpc	r25, r18
    3386:	09 f4       	brne	.+2      	; 0x338a <__vector_13+0x64>
    3388:	63 c0       	rjmp	.+198    	; 0x3450 <__vector_13+0x12a>
					TIMSK2 |= (1 << OCIE2A);									

					check_temp = address_temp = data_temp = 0;
					i=0;
				}
			} else if (i == 1)	{ // check bit read and change timer period
    338a:	81 30       	cpi	r24, 0x01	; 1
    338c:	91 05       	cpc	r25, r1
    338e:	09 f4       	brne	.+2      	; 0x3392 <__vector_13+0x6c>
    3390:	98 c0       	rjmp	.+304    	; 0x34c2 <__vector_13+0x19c>
				// 1.778/0.032 = 54 => 1.728
				OCR2A = 54;
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);

			} else if ((i > 1) && (i < 7)) { // we read address
    3392:	9c 01       	movw	r18, r24
    3394:	22 50       	subi	r18, 0x02	; 2
    3396:	30 40       	sbci	r19, 0x00	; 0
    3398:	25 30       	cpi	r18, 0x05	; 5
    339a:	31 05       	cpc	r19, r1
    339c:	08 f4       	brcc	.+2      	; 0x33a0 <__vector_13+0x7a>
    339e:	67 c0       	rjmp	.+206    	; 0x346e <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { // we read data
    33a0:	9c 01       	movw	r18, r24
    33a2:	27 50       	subi	r18, 0x07	; 7
    33a4:	30 40       	sbci	r19, 0x00	; 0
    33a6:	26 30       	cpi	r18, 0x06	; 6
    33a8:	31 05       	cpc	r19, r1
    33aa:	08 f0       	brcs	.+2      	; 0x33ae <__vector_13+0x88>
    33ac:	bd c0       	rjmp	.+378    	; 0x3528 <__vector_13+0x202>

				//OCR2A = 14;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 1.778/0.032 = 54
				OCR2A = 54;
    33ae:	26 e3       	ldi	r18, 0x36	; 54
    33b0:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    33b4:	20 91 b1 00 	lds	r18, 0x00B1
    33b8:	26 60       	ori	r18, 0x06	; 6
    33ba:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    33be:	20 91 70 00 	lds	r18, 0x0070
    33c2:	22 60       	ori	r18, 0x02	; 2
    33c4:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    33c8:	20 91 03 01 	lds	r18, 0x0103
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	20 74       	andi	r18, 0x40	; 64
    33d0:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    33d2:	00 24       	eor	r0, r0
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	00 1c       	adc	r0, r0
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	00 1c       	adc	r0, r0
    33e0:	23 2f       	mov	r18, r19
    33e2:	30 2d       	mov	r19, r0
    33e4:	4c e0       	ldi	r20, 0x0C	; 12
    33e6:	50 e0       	ldi	r21, 0x00	; 0
    33e8:	48 1b       	sub	r20, r24
    33ea:	59 0b       	sbc	r21, r25
    33ec:	02 c0       	rjmp	.+4      	; 0x33f2 <__vector_13+0xcc>
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	4a 95       	dec	r20
    33f4:	e2 f7       	brpl	.-8      	; 0x33ee <__vector_13+0xc8>
				data_temp += temp;
    33f6:	40 91 2a 03 	lds	r20, 0x032A
    33fa:	42 0f       	add	r20, r18
    33fc:	40 93 2a 03 	sts	0x032A, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    3400:	01 96       	adiw	r24, 0x01	; 1
			} 

		}
	
		if(i!=-1)
			i++;
    3402:	90 93 02 02 	sts	0x0202, r25
    3406:	80 93 01 02 	sts	0x0201, r24

}
    340a:	9f 91       	pop	r25
    340c:	8f 91       	pop	r24
    340e:	5f 91       	pop	r21
    3410:	4f 91       	pop	r20
    3412:	3f 91       	pop	r19
    3414:	2f 91       	pop	r18
    3416:	0f 90       	pop	r0
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	0f 90       	pop	r0
    341c:	1f 90       	pop	r1
    341e:	18 95       	reti
			if(REMOTE) {	// if high it is a glitch
				PCICR |= (1 << PCIE1);		// enable external interrupt
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			
			} else {
				checkGlitch = 0;
    3420:	10 92 18 02 	sts	0x0218, r1
				// 2/0.128 = 15.6
				//OCR2A = 16;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 2.1/0.032 = 64 => 2.048 ms
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;
    3424:	83 e3       	ldi	r24, 0x33	; 51
    3426:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    342a:	80 91 b1 00 	lds	r24, 0x00B1
    342e:	86 60       	ori	r24, 0x06	; 6
    3430:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    3434:	80 91 70 00 	lds	r24, 0x0070
    3438:	82 60       	ori	r24, 0x02	; 2
    343a:	80 93 70 00 	sts	0x0070, r24
    343e:	80 91 01 02 	lds	r24, 0x0201
    3442:	90 91 02 02 	lds	r25, 0x0202
				//PORTB |= (1 << 6);
			} 

		}
	
		if(i!=-1)
    3446:	2f ef       	ldi	r18, 0xFF	; 255
    3448:	8f 3f       	cpi	r24, 0xFF	; 255
    344a:	92 07       	cpc	r25, r18
    344c:	c9 f6       	brne	.-78     	; 0x3400 <__vector_13+0xda>
    344e:	dd cf       	rjmp	.-70     	; 0x340a <__vector_13+0xe4>
		} else {


			if (i == -1) { // start bit confirm  change timer period

				if(REMOTE) {	//if high it is only a noise
    3450:	20 91 03 01 	lds	r18, 0x0103
    3454:	26 ff       	sbrs	r18, 6
    3456:	52 c0       	rjmp	.+164    	; 0x34fc <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// enable external interrupt
    3458:	20 91 68 00 	lds	r18, 0x0068
    345c:	22 60       	ori	r18, 0x02	; 2
    345e:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    3462:	20 91 6c 00 	lds	r18, 0x006C
    3466:	20 68       	ori	r18, 0x80	; 128
    3468:	20 93 6c 00 	sts	0x006C, r18
    346c:	ce cf       	rjmp	.-100    	; 0x340a <__vector_13+0xe4>
			} else if ((i > 1) && (i < 7)) { // we read address
		
				//OCR2A = 14;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 1.778/0.032 = 54
				OCR2A = 54;
    346e:	26 e3       	ldi	r18, 0x36	; 54
    3470:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    3474:	20 91 b1 00 	lds	r18, 0x00B1
    3478:	26 60       	ori	r18, 0x06	; 6
    347a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    347e:	20 91 70 00 	lds	r18, 0x0070
    3482:	22 60       	ori	r18, 0x02	; 2
    3484:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    3488:	20 91 03 01 	lds	r18, 0x0103
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	20 74       	andi	r18, 0x40	; 64
    3490:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    3492:	00 24       	eor	r0, r0
    3494:	22 0f       	add	r18, r18
    3496:	33 1f       	adc	r19, r19
    3498:	00 1c       	adc	r0, r0
    349a:	22 0f       	add	r18, r18
    349c:	33 1f       	adc	r19, r19
    349e:	00 1c       	adc	r0, r0
    34a0:	23 2f       	mov	r18, r19
    34a2:	30 2d       	mov	r19, r0
    34a4:	46 e0       	ldi	r20, 0x06	; 6
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	48 1b       	sub	r20, r24
    34aa:	59 0b       	sbc	r21, r25
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <__vector_13+0x18c>
    34ae:	22 0f       	add	r18, r18
    34b0:	33 1f       	adc	r19, r19
    34b2:	4a 95       	dec	r20
    34b4:	e2 f7       	brpl	.-8      	; 0x34ae <__vector_13+0x188>
				address_temp += temp;
    34b6:	40 91 2b 03 	lds	r20, 0x032B
    34ba:	42 0f       	add	r20, r18
    34bc:	40 93 2b 03 	sts	0x032B, r20
    34c0:	9f cf       	rjmp	.-194    	; 0x3400 <__vector_13+0xda>
					check_temp = address_temp = data_temp = 0;
					i=0;
				}
			} else if (i == 1)	{ // check bit read and change timer period

				check_temp = REMOTE;	   // read the check bit
    34c2:	20 91 03 01 	lds	r18, 0x0103
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	20 74       	andi	r18, 0x40	; 64
    34ca:	30 70       	andi	r19, 0x00	; 0
    34cc:	02 2e       	mov	r0, r18
    34ce:	23 2f       	mov	r18, r19
    34d0:	00 0c       	add	r0, r0
    34d2:	22 1f       	adc	r18, r18
    34d4:	33 0b       	sbc	r19, r19
    34d6:	00 0c       	add	r0, r0
    34d8:	22 1f       	adc	r18, r18
    34da:	33 1f       	adc	r19, r19
    34dc:	20 93 2c 03 	sts	0x032C, r18
				//cycle value is 1.778[ms]
				// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
				//OCR2A = 14;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 1.778/0.032 = 54 => 1.728
				OCR2A = 54;
    34e0:	26 e3       	ldi	r18, 0x36	; 54
    34e2:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    34e6:	20 91 b1 00 	lds	r18, 0x00B1
    34ea:	26 60       	ori	r18, 0x06	; 6
    34ec:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    34f0:	20 91 70 00 	lds	r18, 0x0070
    34f4:	22 60       	ori	r18, 0x02	; 2
    34f6:	20 93 70 00 	sts	0x0070, r18
    34fa:	82 cf       	rjmp	.-252    	; 0x3400 <__vector_13+0xda>
					//cycle value is 0.6 to go to check bit[ms]
					// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
					//OCR2A = 5;
					//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
					// 0.9/0.032 = 28 => 0.896
					OCR2A = 28;
    34fc:	8c e1       	ldi	r24, 0x1C	; 28
    34fe:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    3502:	80 91 b1 00 	lds	r24, 0x00B1
    3506:	86 60       	ori	r24, 0x06	; 6
    3508:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);									
    350c:	80 91 70 00 	lds	r24, 0x0070
    3510:	82 60       	ori	r24, 0x02	; 2
    3512:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    3516:	10 92 2a 03 	sts	0x032A, r1
    351a:	10 92 2b 03 	sts	0x032B, r1
    351e:	10 92 2c 03 	sts	0x032C, r1
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	6d cf       	rjmp	.-294    	; 0x3402 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { // last bit read
    3528:	8d 30       	cpi	r24, 0x0D	; 13
    352a:	91 05       	cpc	r25, r1
    352c:	09 f0       	breq	.+2      	; 0x3530 <__vector_13+0x20a>
    352e:	68 cf       	rjmp	.-304    	; 0x3400 <__vector_13+0xda>
				
				TIMSK2 = 0;					// disable all interrupt for timer2
    3530:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);		// enable interrupt
    3534:	80 91 68 00 	lds	r24, 0x0068
    3538:	82 60       	ori	r24, 0x02	; 2
    353a:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    353e:	80 91 6c 00 	lds	r24, 0x006C
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    3548:	8f ef       	ldi	r24, 0xFF	; 255
    354a:	9f ef       	ldi	r25, 0xFF	; 255
    354c:	90 93 02 02 	sts	0x0202, r25
    3550:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    3554:	80 91 2c 03 	lds	r24, 0x032C
    3558:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    355c:	80 91 2b 03 	lds	r24, 0x032B
    3560:	80 93 28 03 	sts	0x0328, r24
				data_ir = data_temp;
    3564:	80 91 2a 03 	lds	r24, 0x032A
    3568:	80 93 29 03 	sts	0x0329, r24
				command_received=1;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	80 93 02 04 	sts	0x0402, r24
    3572:	4b cf       	rjmp	.-362    	; 0x340a <__vector_13+0xe4>

00003574 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    3574:	08 95       	ret

00003576 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	ec 01       	movw	r28, r24

	if(*pwm_left==0) {
    3580:	88 81       	ld	r24, Y
    3582:	99 81       	ldd	r25, Y+1	; 0x01
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	09 f4       	brne	.+2      	; 0x358a <start_vertical_speed_control_left+0x14>
    3588:	da c0       	rjmp	.+436    	; 0x373e <start_vertical_speed_control_left+0x1c8>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    358a:	20 91 18 04 	lds	r18, 0x0418
    358e:	30 91 19 04 	lds	r19, 0x0419
    3592:	41 e0       	ldi	r20, 0x01	; 1
    3594:	2e 30       	cpi	r18, 0x0E	; 14
    3596:	34 07       	cpc	r19, r20
    3598:	0c f4       	brge	.+2      	; 0x359c <start_vertical_speed_control_left+0x26>
    359a:	a0 c0       	rjmp	.+320    	; 0x36dc <start_vertical_speed_control_left+0x166>
		if(*pwm_left > 0) {
    359c:	18 16       	cp	r1, r24
    359e:	19 06       	cpc	r1, r25
    35a0:	0c f0       	brlt	.+2      	; 0x35a4 <start_vertical_speed_control_left+0x2e>
    35a2:	44 c1       	rjmp	.+648    	; 0x382c <start_vertical_speed_control_left+0x2b6>
			//k_contr_speed = 150 - (360 - currentAngle);
			//k_contr_speed_int = 300 - ((360 - currentAngle)*300/90);
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)*1.5);
    35a4:	68 e6       	ldi	r22, 0x68	; 104
    35a6:	71 e0       	ldi	r23, 0x01	; 1
    35a8:	62 1b       	sub	r22, r18
    35aa:	73 0b       	sbc	r23, r19
    35ac:	88 27       	eor	r24, r24
    35ae:	77 fd       	sbrc	r23, 7
    35b0:	80 95       	com	r24
    35b2:	98 2f       	mov	r25, r24
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_left = INIT_KFF + (currentAngle*1.5);
			//k_contr_speed_int = picwatch_808*100 + (currentAngle*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle*1.5);
    35b4:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 ec       	ldi	r20, 0xC0	; 192
    35be:	5f e3       	ldi	r21, 0x3F	; 63
    35c0:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsf3>
    35c4:	9b 01       	movw	r18, r22
    35c6:	ac 01       	movw	r20, r24
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	86 e1       	ldi	r24, 0x16	; 22
    35ce:	93 e4       	ldi	r25, 0x43	; 67
    35d0:	0e 94 b6 23 	call	0x476c	; 0x476c <__subsf3>
    35d4:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__fixsfsi>
    35d8:	70 93 0c 02 	sts	0x020C, r23
    35dc:	60 93 0b 02 	sts	0x020B, r22
		}
	}

	delta_left_speed_prev = delta_left_speed_current; 
    35e0:	40 91 33 04 	lds	r20, 0x0433
    35e4:	50 91 34 04 	lds	r21, 0x0434
    35e8:	50 93 4e 04 	sts	0x044E, r21
    35ec:	40 93 4d 04 	sts	0x044D, r20
	if(*pwm_left >= 0) {
    35f0:	88 81       	ld	r24, Y
    35f2:	99 81       	ldd	r25, Y+1	; 0x01
    35f4:	97 fd       	sbrc	r25, 7
    35f6:	f7 c0       	rjmp	.+494    	; 0x37e6 <start_vertical_speed_control_left+0x270>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    35f8:	20 91 da 03 	lds	r18, 0x03DA
    35fc:	30 91 db 03 	lds	r19, 0x03DB
    3600:	bc 01       	movw	r22, r24
    3602:	62 1b       	sub	r22, r18
    3604:	73 0b       	sbc	r23, r19
    3606:	9b 01       	movw	r18, r22
    3608:	70 93 34 04 	sts	0x0434, r23
    360c:	60 93 33 04 	sts	0x0433, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    3610:	80 91 ee 03 	lds	r24, 0x03EE
    3614:	90 91 ef 03 	lds	r25, 0x03EF
    3618:	82 0f       	add	r24, r18
    361a:	93 1f       	adc	r25, r19
    361c:	90 93 ef 03 	sts	0x03EF, r25
    3620:	80 93 ee 03 	sts	0x03EE, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    3624:	73 e0       	ldi	r23, 0x03	; 3
    3626:	81 32       	cpi	r24, 0x21	; 33
    3628:	97 07       	cpc	r25, r23
    362a:	0c f4       	brge	.+2      	; 0x362e <start_vertical_speed_control_left+0xb8>
    362c:	99 c0       	rjmp	.+306    	; 0x3760 <start_vertical_speed_control_left+0x1ea>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    362e:	80 e2       	ldi	r24, 0x20	; 32
    3630:	93 e0       	ldi	r25, 0x03	; 3
    3632:	90 93 ef 03 	sts	0x03EF, r25
    3636:	80 93 ee 03 	sts	0x03EE, r24
    363a:	60 e6       	ldi	r22, 0x60	; 96
    363c:	79 e0       	ldi	r23, 0x09	; 9
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    363e:	c9 01       	movw	r24, r18
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	f9 01       	movw	r30, r18
    3646:	ee 0f       	add	r30, r30
    3648:	ff 1f       	adc	r31, r31
    364a:	ee 0f       	add	r30, r30
    364c:	ff 1f       	adc	r31, r31
    364e:	ee 0f       	add	r30, r30
    3650:	ff 1f       	adc	r31, r31
    3652:	8e 0f       	add	r24, r30
    3654:	9f 1f       	adc	r25, r31
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
    3656:	08 81       	ld	r16, Y
    3658:	19 81       	ldd	r17, Y+1	; 0x01
    365a:	a0 91 0b 02 	lds	r26, 0x020B
    365e:	b0 91 0c 02 	lds	r27, 0x020C
    3662:	0a 9f       	mul	r16, r26
    3664:	f0 01       	movw	r30, r0
    3666:	0b 9f       	mul	r16, r27
    3668:	f0 0d       	add	r31, r0
    366a:	1a 9f       	mul	r17, r26
    366c:	f0 0d       	add	r31, r0
    366e:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    3670:	8e 0f       	add	r24, r30
    3672:	9f 1f       	adc	r25, r31
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    3674:	42 1b       	sub	r20, r18
    3676:	53 0b       	sbc	r21, r19
    3678:	44 0f       	add	r20, r20
    367a:	55 1f       	adc	r21, r21
    367c:	84 0f       	add	r24, r20
    367e:	95 1f       	adc	r25, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    3680:	86 0f       	add	r24, r22
    3682:	97 1f       	adc	r25, r23
    3684:	90 93 e9 03 	sts	0x03E9, r25
    3688:	80 93 e8 03 	sts	0x03E8, r24

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    368c:	97 fd       	sbrc	r25, 7
    368e:	84 c0       	rjmp	.+264    	; 0x3798 <start_vertical_speed_control_left+0x222>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3690:	18 16       	cp	r1, r24
    3692:	19 06       	cpc	r1, r25
    3694:	0c f0       	brlt	.+2      	; 0x3698 <start_vertical_speed_control_left+0x122>
    3696:	8a c0       	rjmp	.+276    	; 0x37ac <start_vertical_speed_control_left+0x236>
    3698:	28 81       	ld	r18, Y
    369a:	39 81       	ldd	r19, Y+1	; 0x01
    369c:	37 fd       	sbrc	r19, 7
    369e:	ae c0       	rjmp	.+348    	; 0x37fc <start_vertical_speed_control_left+0x286>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    36a0:	7d e5       	ldi	r23, 0x5D	; 93
    36a2:	81 3c       	cpi	r24, 0xC1	; 193
    36a4:	97 07       	cpc	r25, r23
    36a6:	0c f4       	brge	.+2      	; 0x36aa <start_vertical_speed_control_left+0x134>
    36a8:	81 c0       	rjmp	.+258    	; 0x37ac <start_vertical_speed_control_left+0x236>
    36aa:	80 ec       	ldi	r24, 0xC0	; 192
    36ac:	9d e5       	ldi	r25, 0x5D	; 93
    36ae:	90 93 e9 03 	sts	0x03E9, r25
    36b2:	80 93 e8 03 	sts	0x03E8, r24
    36b6:	8c ed       	ldi	r24, 0xDC	; 220
    36b8:	95 e0       	ldi	r25, 0x05	; 5
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if(*pwm_left > 0) {
		*pwm_left += 30;
    36ba:	4e 96       	adiw	r24, 0x1e	; 30
    36bc:	99 83       	std	Y+1, r25	; 0x01
    36be:	88 83       	st	Y, r24
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	84 33       	cpi	r24, 0x34	; 52
    36c4:	94 07       	cpc	r25, r20
    36c6:	0c f4       	brge	.+2      	; 0x36ca <start_vertical_speed_control_left+0x154>
    36c8:	80 c0       	rjmp	.+256    	; 0x37ca <start_vertical_speed_control_left+0x254>
    36ca:	83 e3       	ldi	r24, 0x33	; 51
    36cc:	91 e0       	ldi	r25, 0x01	; 1
    36ce:	99 83       	std	Y+1, r25	; 0x01
    36d0:	88 83       	st	Y, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	1f 91       	pop	r17
    36d8:	0f 91       	pop	r16
    36da:	08 95       	ret
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 - ((360 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)*1.5);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    36dc:	24 3b       	cpi	r18, 0xB4	; 180
    36de:	31 05       	cpc	r19, r1
    36e0:	6c f4       	brge	.+26     	; 0x36fc <start_vertical_speed_control_left+0x186>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)*1.5);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    36e2:	2a 35       	cpi	r18, 0x5A	; 90
    36e4:	31 05       	cpc	r19, r1
    36e6:	54 f4       	brge	.+20     	; 0x36fc <start_vertical_speed_control_left+0x186>
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)*1.5);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    36e8:	18 16       	cp	r1, r24
    36ea:	19 06       	cpc	r1, r25
    36ec:	0c f0       	brlt	.+2      	; 0x36f0 <start_vertical_speed_control_left+0x17a>
    36ee:	a7 c0       	rjmp	.+334    	; 0x383e <start_vertical_speed_control_left+0x2c8>
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_left = INIT_KFF + (currentAngle*1.5);
    36f0:	b9 01       	movw	r22, r18
    36f2:	88 27       	eor	r24, r24
    36f4:	77 fd       	sbrc	r23, 7
    36f6:	80 95       	com	r24
    36f8:	98 2f       	mov	r25, r24
    36fa:	0c c0       	rjmp	.+24     	; 0x3714 <start_vertical_speed_control_left+0x19e>
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)*1.5);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
    36fc:	18 16       	cp	r1, r24
    36fe:	19 06       	cpc	r1, r25
    3700:	0c f0       	brlt	.+2      	; 0x3704 <start_vertical_speed_control_left+0x18e>
    3702:	41 c0       	rjmp	.+130    	; 0x3786 <start_vertical_speed_control_left+0x210>
			//k_contr_speed = 150 + (180 - currentAngle);
			//k_contr_speed_int = 300 + ((180 - currentAngle)*300/90);
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)*1.5);
    3704:	64 eb       	ldi	r22, 0xB4	; 180
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	62 1b       	sub	r22, r18
    370a:	73 0b       	sbc	r23, r19
    370c:	88 27       	eor	r24, r24
    370e:	77 fd       	sbrc	r23, 7
    3710:	80 95       	com	r24
    3712:	98 2f       	mov	r25, r24
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_left = INIT_KFF + (currentAngle*1.5);
    3714:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 ec       	ldi	r20, 0xC0	; 192
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsf3>
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	46 e1       	ldi	r20, 0x16	; 22
    372a:	53 e4       	ldi	r21, 0x43	; 67
    372c:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__addsf3>
    3730:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__fixsfsi>
    3734:	70 93 0c 02 	sts	0x020C, r23
    3738:	60 93 0b 02 	sts	0x020B, r22
    373c:	51 cf       	rjmp	.-350    	; 0x35e0 <start_vertical_speed_control_left+0x6a>
}

void start_vertical_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_right_speed_sum = 0;
    373e:	10 92 f1 03 	sts	0x03F1, r1
    3742:	10 92 f0 03 	sts	0x03F0, r1
		delta_right_speed_current = 0;
    3746:	10 92 56 04 	sts	0x0456, r1
    374a:	10 92 55 04 	sts	0x0455, r1
		delta_right_speed_prev = 0;
    374e:	10 92 36 04 	sts	0x0436, r1
    3752:	10 92 35 04 	sts	0x0435, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    375e:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    3760:	6c ef       	ldi	r22, 0xFC	; 252
    3762:	80 3e       	cpi	r24, 0xE0	; 224
    3764:	96 07       	cpc	r25, r22
    3766:	4c f4       	brge	.+18     	; 0x377a <start_vertical_speed_control_left+0x204>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    3768:	80 ee       	ldi	r24, 0xE0	; 224
    376a:	9c ef       	ldi	r25, 0xFC	; 252
    376c:	90 93 ef 03 	sts	0x03EF, r25
    3770:	80 93 ee 03 	sts	0x03EE, r24
    3774:	60 ea       	ldi	r22, 0xA0	; 160
    3776:	76 ef       	ldi	r23, 0xF6	; 246
    3778:	62 cf       	rjmp	.-316    	; 0x363e <start_vertical_speed_control_left+0xc8>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    377a:	bc 01       	movw	r22, r24
    377c:	66 0f       	add	r22, r22
    377e:	77 1f       	adc	r23, r23
    3780:	68 0f       	add	r22, r24
    3782:	79 1f       	adc	r23, r25
    3784:	5c cf       	rjmp	.-328    	; 0x363e <start_vertical_speed_control_left+0xc8>
			//k_contr_speed = 150 + (180 - currentAngle);
			//k_contr_speed_int = 300 + ((180 - currentAngle)*300/90);
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)*1.5);
    3786:	64 eb       	ldi	r22, 0xB4	; 180
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	62 1b       	sub	r22, r18
    378c:	73 0b       	sbc	r23, r19
    378e:	88 27       	eor	r24, r24
    3790:	77 fd       	sbrc	r23, 7
    3792:	80 95       	com	r24
    3794:	98 2f       	mov	r25, r24
    3796:	0e cf       	rjmp	.-484    	; 0x35b4 <start_vertical_speed_control_left+0x3e>
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3798:	28 81       	ld	r18, Y
    379a:	39 81       	ldd	r19, Y+1	; 0x01
    379c:	37 fd       	sbrc	r19, 7
    379e:	06 c0       	rjmp	.+12     	; 0x37ac <start_vertical_speed_control_left+0x236>
		pwm_left_speed_controller = 0;
    37a0:	10 92 e9 03 	sts	0x03E9, r1
    37a4:	10 92 e8 03 	sts	0x03E8, r1
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    37ac:	22 ea       	ldi	r18, 0xA2	; 162
    37ae:	80 34       	cpi	r24, 0x40	; 64
    37b0:	92 07       	cpc	r25, r18
    37b2:	54 f5       	brge	.+84     	; 0x3808 <start_vertical_speed_control_left+0x292>
    37b4:	80 e4       	ldi	r24, 0x40	; 64
    37b6:	92 ea       	ldi	r25, 0xA2	; 162
    37b8:	90 93 e9 03 	sts	0x03E9, r25
    37bc:	80 93 e8 03 	sts	0x03E8, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    37c0:	84 e2       	ldi	r24, 0x24	; 36
    37c2:	9a ef       	ldi	r25, 0xFA	; 250

	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    37c4:	4e 97       	sbiw	r24, 0x1e	; 30
    37c6:	99 83       	std	Y+1, r25	; 0x01
    37c8:	88 83       	st	Y, r24
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    37ca:	6e ef       	ldi	r22, 0xFE	; 254
    37cc:	8d 3c       	cpi	r24, 0xCD	; 205
    37ce:	96 07       	cpc	r25, r22
    37d0:	0c f0       	brlt	.+2      	; 0x37d4 <start_vertical_speed_control_left+0x25e>
    37d2:	7f cf       	rjmp	.-258    	; 0x36d2 <start_vertical_speed_control_left+0x15c>
    37d4:	8d ec       	ldi	r24, 0xCD	; 205
    37d6:	9e ef       	ldi	r25, 0xFE	; 254
    37d8:	99 83       	std	Y+1, r25	; 0x01
    37da:	88 83       	st	Y, r24


}
    37dc:	df 91       	pop	r29
    37de:	cf 91       	pop	r28
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	08 95       	ret

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    37e6:	20 91 da 03 	lds	r18, 0x03DA
    37ea:	30 91 db 03 	lds	r19, 0x03DB
    37ee:	28 0f       	add	r18, r24
    37f0:	39 1f       	adc	r19, r25
    37f2:	30 93 34 04 	sts	0x0434, r19
    37f6:	20 93 33 04 	sts	0x0433, r18
    37fa:	0a cf       	rjmp	.-492    	; 0x3610 <start_vertical_speed_control_left+0x9a>

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    37fc:	10 92 e9 03 	sts	0x03E9, r1
    3800:	10 92 e8 03 	sts	0x03E8, r1
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3808:	95 95       	asr	r25
    380a:	87 95       	ror	r24
    380c:	95 95       	asr	r25
    380e:	87 95       	ror	r24
    3810:	95 95       	asr	r25
    3812:	87 95       	ror	r24
    3814:	95 95       	asr	r25
    3816:	87 95       	ror	r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    3818:	99 83       	std	Y+1, r25	; 0x01
    381a:	88 83       	st	Y, r24

	if(*pwm_left > 0) {
    381c:	18 16       	cp	r1, r24
    381e:	19 06       	cpc	r1, r25
    3820:	0c f4       	brge	.+2      	; 0x3824 <start_vertical_speed_control_left+0x2ae>
    3822:	4b cf       	rjmp	.-362    	; 0x36ba <start_vertical_speed_control_left+0x144>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	09 f4       	brne	.+2      	; 0x382a <start_vertical_speed_control_left+0x2b4>
    3828:	54 cf       	rjmp	.-344    	; 0x36d2 <start_vertical_speed_control_left+0x15c>
    382a:	cc cf       	rjmp	.-104    	; 0x37c4 <start_vertical_speed_control_left+0x24e>
			//k_contr_speed = 150 - (360 - currentAngle);
			//k_contr_speed_int = 300 - ((360 - currentAngle)*300/90);
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 - ((360 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)*1.5);
    382c:	68 e6       	ldi	r22, 0x68	; 104
    382e:	71 e0       	ldi	r23, 0x01	; 1
    3830:	62 1b       	sub	r22, r18
    3832:	73 0b       	sbc	r23, r19
    3834:	88 27       	eor	r24, r24
    3836:	77 fd       	sbrc	r23, 7
    3838:	80 95       	com	r24
    383a:	98 2f       	mov	r25, r24
    383c:	6b cf       	rjmp	.-298    	; 0x3714 <start_vertical_speed_control_left+0x19e>
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_left = INIT_KFF + (currentAngle*1.5);
			//k_contr_speed_int = picwatch_808*100 + (currentAngle*picwatch_808*100/90);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle*1.5);
    383e:	b9 01       	movw	r22, r18
    3840:	88 27       	eor	r24, r24
    3842:	77 fd       	sbrc	r23, 7
    3844:	80 95       	com	r24
    3846:	98 2f       	mov	r25, r24
    3848:	b5 ce       	rjmp	.-662    	; 0x35b4 <start_vertical_speed_control_left+0x3e>

0000384a <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	ec 01       	movw	r28, r24

	if(*pwm_right==0) {
    3854:	88 81       	ld	r24, Y
    3856:	99 81       	ldd	r25, Y+1	; 0x01
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	09 f4       	brne	.+2      	; 0x385e <start_vertical_speed_control_right+0x14>
    385c:	df c0       	rjmp	.+446    	; 0x3a1c <start_vertical_speed_control_right+0x1d2>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    385e:	20 91 18 04 	lds	r18, 0x0418
    3862:	30 91 19 04 	lds	r19, 0x0419
    3866:	41 e0       	ldi	r20, 0x01	; 1
    3868:	2e 30       	cpi	r18, 0x0E	; 14
    386a:	34 07       	cpc	r19, r20
    386c:	0c f4       	brge	.+2      	; 0x3870 <start_vertical_speed_control_right+0x26>
    386e:	a5 c0       	rjmp	.+330    	; 0x39ba <start_vertical_speed_control_right+0x170>
		if(*pwm_right > 0) {
    3870:	18 16       	cp	r1, r24
    3872:	19 06       	cpc	r1, r25
    3874:	0c f0       	brlt	.+2      	; 0x3878 <start_vertical_speed_control_right+0x2e>
    3876:	46 c1       	rjmp	.+652    	; 0x3b04 <start_vertical_speed_control_right+0x2ba>
			//k_contr_speed = 150 - (360 - currentAngle);
			//k_contr_speed_int = 300 - ((360 - currentAngle)*300/90);
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)*1.5);
    3878:	68 e6       	ldi	r22, 0x68	; 104
    387a:	71 e0       	ldi	r23, 0x01	; 1
    387c:	62 1b       	sub	r22, r18
    387e:	73 0b       	sbc	r23, r19
    3880:	88 27       	eor	r24, r24
    3882:	77 fd       	sbrc	r23, 7
    3884:	80 95       	com	r24
    3886:	98 2f       	mov	r25, r24
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_right = INIT_KFF + (currentAngle*1.5);
			//k_contr_speed_int = picwatch_808*100 + (currentAngle*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle*1.5);
    3888:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 ec       	ldi	r20, 0xC0	; 192
    3892:	5f e3       	ldi	r21, 0x3F	; 63
    3894:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsf3>
    3898:	9b 01       	movw	r18, r22
    389a:	ac 01       	movw	r20, r24
    389c:	60 e0       	ldi	r22, 0x00	; 0
    389e:	70 e0       	ldi	r23, 0x00	; 0
    38a0:	86 e1       	ldi	r24, 0x16	; 22
    38a2:	93 e4       	ldi	r25, 0x43	; 67
    38a4:	0e 94 b6 23 	call	0x476c	; 0x476c <__subsf3>
    38a8:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__fixsfsi>
    38ac:	70 93 0e 02 	sts	0x020E, r23
    38b0:	60 93 0d 02 	sts	0x020D, r22
		}
	}

	delta_right_speed_prev = delta_right_speed_current;
    38b4:	40 91 55 04 	lds	r20, 0x0455
    38b8:	50 91 56 04 	lds	r21, 0x0456
    38bc:	50 93 36 04 	sts	0x0436, r21
    38c0:	40 93 35 04 	sts	0x0435, r20
	if(*pwm_right >= 0) {
    38c4:	88 81       	ld	r24, Y
    38c6:	99 81       	ldd	r25, Y+1	; 0x01
    38c8:	97 fd       	sbrc	r25, 7
    38ca:	fa c0       	rjmp	.+500    	; 0x3ac0 <start_vertical_speed_control_right+0x276>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    38cc:	20 91 dc 03 	lds	r18, 0x03DC
    38d0:	30 91 dd 03 	lds	r19, 0x03DD
    38d4:	bc 01       	movw	r22, r24
    38d6:	62 1b       	sub	r22, r18
    38d8:	73 0b       	sbc	r23, r19
    38da:	9b 01       	movw	r18, r22
    38dc:	70 93 56 04 	sts	0x0456, r23
    38e0:	60 93 55 04 	sts	0x0455, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    38e4:	80 91 f0 03 	lds	r24, 0x03F0
    38e8:	90 91 f1 03 	lds	r25, 0x03F1
    38ec:	82 0f       	add	r24, r18
    38ee:	93 1f       	adc	r25, r19
    38f0:	90 93 f1 03 	sts	0x03F1, r25
    38f4:	80 93 f0 03 	sts	0x03F0, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    38f8:	73 e0       	ldi	r23, 0x03	; 3
    38fa:	81 32       	cpi	r24, 0x21	; 33
    38fc:	97 07       	cpc	r25, r23
    38fe:	0c f4       	brge	.+2      	; 0x3902 <start_vertical_speed_control_right+0xb8>
    3900:	ac c0       	rjmp	.+344    	; 0x3a5a <start_vertical_speed_control_right+0x210>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    3902:	80 e2       	ldi	r24, 0x20	; 32
    3904:	93 e0       	ldi	r25, 0x03	; 3
    3906:	90 93 f1 03 	sts	0x03F1, r25
    390a:	80 93 f0 03 	sts	0x03F0, r24
    390e:	60 e6       	ldi	r22, 0x60	; 96
    3910:	79 e0       	ldi	r23, 0x09	; 9
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    3912:	c9 01       	movw	r24, r18
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	f9 01       	movw	r30, r18
    391a:	ee 0f       	add	r30, r30
    391c:	ff 1f       	adc	r31, r31
    391e:	ee 0f       	add	r30, r30
    3920:	ff 1f       	adc	r31, r31
    3922:	ee 0f       	add	r30, r30
    3924:	ff 1f       	adc	r31, r31
    3926:	8e 0f       	add	r24, r30
    3928:	9f 1f       	adc	r25, r31
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    392a:	08 81       	ld	r16, Y
    392c:	19 81       	ldd	r17, Y+1	; 0x01
    392e:	a0 91 0d 02 	lds	r26, 0x020D
    3932:	b0 91 0e 02 	lds	r27, 0x020E
    3936:	0a 9f       	mul	r16, r26
    3938:	f0 01       	movw	r30, r0
    393a:	0b 9f       	mul	r16, r27
    393c:	f0 0d       	add	r31, r0
    393e:	1a 9f       	mul	r17, r26
    3940:	f0 0d       	add	r31, r0
    3942:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    3944:	8e 0f       	add	r24, r30
    3946:	9f 1f       	adc	r25, r31
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    3948:	42 1b       	sub	r20, r18
    394a:	53 0b       	sbc	r21, r19
    394c:	44 0f       	add	r20, r20
    394e:	55 1f       	adc	r21, r21
    3950:	84 0f       	add	r24, r20
    3952:	95 1f       	adc	r25, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    3954:	86 0f       	add	r24, r22
    3956:	97 1f       	adc	r25, r23
    3958:	90 93 e7 03 	sts	0x03E7, r25
    395c:	80 93 e6 03 	sts	0x03E6, r24

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    3960:	97 fd       	sbrc	r25, 7
    3962:	97 c0       	rjmp	.+302    	; 0x3a92 <start_vertical_speed_control_right+0x248>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3964:	18 16       	cp	r1, r24
    3966:	19 06       	cpc	r1, r25
    3968:	0c f0       	brlt	.+2      	; 0x396c <start_vertical_speed_control_right+0x122>
    396a:	9d c0       	rjmp	.+314    	; 0x3aa6 <start_vertical_speed_control_right+0x25c>
    396c:	28 81       	ld	r18, Y
    396e:	39 81       	ldd	r19, Y+1	; 0x01
    3970:	37 fd       	sbrc	r19, 7
    3972:	b1 c0       	rjmp	.+354    	; 0x3ad6 <start_vertical_speed_control_right+0x28c>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3974:	7d e5       	ldi	r23, 0x5D	; 93
    3976:	81 3c       	cpi	r24, 0xC1	; 193
    3978:	97 07       	cpc	r25, r23
    397a:	0c f4       	brge	.+2      	; 0x397e <start_vertical_speed_control_right+0x134>
    397c:	94 c0       	rjmp	.+296    	; 0x3aa6 <start_vertical_speed_control_right+0x25c>
    397e:	80 ec       	ldi	r24, 0xC0	; 192
    3980:	9d e5       	ldi	r25, 0x5D	; 93
    3982:	90 93 e7 03 	sts	0x03E7, r25
    3986:	80 93 e6 03 	sts	0x03E6, r24
    398a:	8c ed       	ldi	r24, 0xDC	; 220
    398c:	95 e0       	ldi	r25, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    398e:	99 83       	std	Y+1, r25	; 0x01
    3990:	88 83       	st	Y, r24
	if(pwm_right > 0) {
    3992:	20 97       	sbiw	r28, 0x00	; 0
    3994:	09 f4       	brne	.+2      	; 0x3998 <start_vertical_speed_control_right+0x14e>
    3996:	ae c0       	rjmp	.+348    	; 0x3af4 <start_vertical_speed_control_right+0x2aa>
		*pwm_right += 30;
    3998:	4e 96       	adiw	r24, 0x1e	; 30
    399a:	99 83       	std	Y+1, r25	; 0x01
    399c:	88 83       	st	Y, r24
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    399e:	41 e0       	ldi	r20, 0x01	; 1
    39a0:	84 33       	cpi	r24, 0x34	; 52
    39a2:	94 07       	cpc	r25, r20
    39a4:	0c f4       	brge	.+2      	; 0x39a8 <start_vertical_speed_control_right+0x15e>
    39a6:	4b c0       	rjmp	.+150    	; 0x3a3e <start_vertical_speed_control_right+0x1f4>
    39a8:	83 e3       	ldi	r24, 0x33	; 51
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	99 83       	std	Y+1, r25	; 0x01
    39ae:	88 83       	st	Y, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	08 95       	ret
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 - ((360 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)*1.5);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    39ba:	24 3b       	cpi	r18, 0xB4	; 180
    39bc:	31 05       	cpc	r19, r1
    39be:	6c f4       	brge	.+26     	; 0x39da <start_vertical_speed_control_right+0x190>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)*1.5);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    39c0:	2a 35       	cpi	r18, 0x5A	; 90
    39c2:	31 05       	cpc	r19, r1
    39c4:	54 f4       	brge	.+20     	; 0x39da <start_vertical_speed_control_right+0x190>
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)*1.5);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    39c6:	18 16       	cp	r1, r24
    39c8:	19 06       	cpc	r1, r25
    39ca:	0c f0       	brlt	.+2      	; 0x39ce <start_vertical_speed_control_right+0x184>
    39cc:	a4 c0       	rjmp	.+328    	; 0x3b16 <start_vertical_speed_control_right+0x2cc>
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_right = INIT_KFF + (currentAngle*1.5);
    39ce:	b9 01       	movw	r22, r18
    39d0:	88 27       	eor	r24, r24
    39d2:	77 fd       	sbrc	r23, 7
    39d4:	80 95       	com	r24
    39d6:	98 2f       	mov	r25, r24
    39d8:	0c c0       	rjmp	.+24     	; 0x39f2 <start_vertical_speed_control_right+0x1a8>
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)*1.5);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
    39da:	18 16       	cp	r1, r24
    39dc:	19 06       	cpc	r1, r25
    39de:	0c f0       	brlt	.+2      	; 0x39e2 <start_vertical_speed_control_right+0x198>
    39e0:	4f c0       	rjmp	.+158    	; 0x3a80 <start_vertical_speed_control_right+0x236>
			//k_contr_speed = 150 + (180 - currentAngle);
			//k_contr_speed_int = 300 + ((180 - currentAngle)*300/90);
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)*1.5);
    39e2:	64 eb       	ldi	r22, 0xB4	; 180
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	62 1b       	sub	r22, r18
    39e8:	73 0b       	sbc	r23, r19
    39ea:	88 27       	eor	r24, r24
    39ec:	77 fd       	sbrc	r23, 7
    39ee:	80 95       	com	r24
    39f0:	98 2f       	mov	r25, r24
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_right = INIT_KFF + (currentAngle*1.5);
    39f2:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 ec       	ldi	r20, 0xC0	; 192
    39fc:	5f e3       	ldi	r21, 0x3F	; 63
    39fe:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsf3>
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	46 e1       	ldi	r20, 0x16	; 22
    3a08:	53 e4       	ldi	r21, 0x43	; 67
    3a0a:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__addsf3>
    3a0e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__fixsfsi>
    3a12:	70 93 0e 02 	sts	0x020E, r23
    3a16:	60 93 0d 02 	sts	0x020D, r22
    3a1a:	4c cf       	rjmp	.-360    	; 0x38b4 <start_vertical_speed_control_right+0x6a>


void start_vertical_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    3a1c:	10 92 f1 03 	sts	0x03F1, r1
    3a20:	10 92 f0 03 	sts	0x03F0, r1
		delta_right_speed_current = 0;
    3a24:	10 92 56 04 	sts	0x0456, r1
    3a28:	10 92 55 04 	sts	0x0455, r1
		delta_right_speed_prev = 0;
    3a2c:	10 92 36 04 	sts	0x0436, r1
    3a30:	10 92 35 04 	sts	0x0435, r1
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3a3e:	6e ef       	ldi	r22, 0xFE	; 254
    3a40:	8d 3c       	cpi	r24, 0xCD	; 205
    3a42:	96 07       	cpc	r25, r22
    3a44:	0c f0       	brlt	.+2      	; 0x3a48 <start_vertical_speed_control_right+0x1fe>
    3a46:	b4 cf       	rjmp	.-152    	; 0x39b0 <start_vertical_speed_control_right+0x166>
    3a48:	8d ec       	ldi	r24, 0xCD	; 205
    3a4a:	9e ef       	ldi	r25, 0xFE	; 254
    3a4c:	99 83       	std	Y+1, r25	; 0x01
    3a4e:	88 83       	st	Y, r24

}
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3a5a:	6c ef       	ldi	r22, 0xFC	; 252
    3a5c:	80 3e       	cpi	r24, 0xE0	; 224
    3a5e:	96 07       	cpc	r25, r22
    3a60:	4c f4       	brge	.+18     	; 0x3a74 <start_vertical_speed_control_right+0x22a>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    3a62:	80 ee       	ldi	r24, 0xE0	; 224
    3a64:	9c ef       	ldi	r25, 0xFC	; 252
    3a66:	90 93 f1 03 	sts	0x03F1, r25
    3a6a:	80 93 f0 03 	sts	0x03F0, r24
    3a6e:	60 ea       	ldi	r22, 0xA0	; 160
    3a70:	76 ef       	ldi	r23, 0xF6	; 246
    3a72:	4f cf       	rjmp	.-354    	; 0x3912 <start_vertical_speed_control_right+0xc8>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    3a74:	bc 01       	movw	r22, r24
    3a76:	66 0f       	add	r22, r22
    3a78:	77 1f       	adc	r23, r23
    3a7a:	68 0f       	add	r22, r24
    3a7c:	79 1f       	adc	r23, r25
    3a7e:	49 cf       	rjmp	.-366    	; 0x3912 <start_vertical_speed_control_right+0xc8>
			//k_contr_speed = 150 + (180 - currentAngle);
			//k_contr_speed_int = 300 + ((180 - currentAngle)*300/90);
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 + ((180 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)*1.5);
    3a80:	64 eb       	ldi	r22, 0xB4	; 180
    3a82:	70 e0       	ldi	r23, 0x00	; 0
    3a84:	62 1b       	sub	r22, r18
    3a86:	73 0b       	sbc	r23, r19
    3a88:	88 27       	eor	r24, r24
    3a8a:	77 fd       	sbrc	r23, 7
    3a8c:	80 95       	com	r24
    3a8e:	98 2f       	mov	r25, r24
    3a90:	fb ce       	rjmp	.-522    	; 0x3888 <start_vertical_speed_control_right+0x3e>
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    3a92:	28 81       	ld	r18, Y
    3a94:	39 81       	ldd	r19, Y+1	; 0x01
    3a96:	37 fd       	sbrc	r19, 7
    3a98:	06 c0       	rjmp	.+12     	; 0x3aa6 <start_vertical_speed_control_right+0x25c>
		pwm_right_speed_controller = 0;
    3a9a:	10 92 e7 03 	sts	0x03E7, r1
    3a9e:	10 92 e6 03 	sts	0x03E6, r1
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3aa6:	22 ea       	ldi	r18, 0xA2	; 162
    3aa8:	80 34       	cpi	r24, 0x40	; 64
    3aaa:	92 07       	cpc	r25, r18
    3aac:	d4 f4       	brge	.+52     	; 0x3ae2 <start_vertical_speed_control_right+0x298>
    3aae:	80 e4       	ldi	r24, 0x40	; 64
    3ab0:	92 ea       	ldi	r25, 0xA2	; 162
    3ab2:	90 93 e7 03 	sts	0x03E7, r25
    3ab6:	80 93 e6 03 	sts	0x03E6, r24
    3aba:	84 e2       	ldi	r24, 0x24	; 36
    3abc:	9a ef       	ldi	r25, 0xFA	; 250
    3abe:	67 cf       	rjmp	.-306    	; 0x398e <start_vertical_speed_control_right+0x144>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3ac0:	20 91 dc 03 	lds	r18, 0x03DC
    3ac4:	30 91 dd 03 	lds	r19, 0x03DD
    3ac8:	28 0f       	add	r18, r24
    3aca:	39 1f       	adc	r19, r25
    3acc:	30 93 56 04 	sts	0x0456, r19
    3ad0:	20 93 55 04 	sts	0x0455, r18
    3ad4:	07 cf       	rjmp	.-498    	; 0x38e4 <start_vertical_speed_control_right+0x9a>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3ad6:	10 92 e7 03 	sts	0x03E7, r1
    3ada:	10 92 e6 03 	sts	0x03E6, r1
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3ae2:	95 95       	asr	r25
    3ae4:	87 95       	ror	r24
    3ae6:	95 95       	asr	r25
    3ae8:	87 95       	ror	r24
    3aea:	95 95       	asr	r25
    3aec:	87 95       	ror	r24
    3aee:	95 95       	asr	r25
    3af0:	87 95       	ror	r24
    3af2:	4d cf       	rjmp	.-358    	; 0x398e <start_vertical_speed_control_right+0x144>

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3af4:	97 ff       	sbrs	r25, 7
    3af6:	53 cf       	rjmp	.-346    	; 0x399e <start_vertical_speed_control_right+0x154>
		*pwm_right -= 30;
    3af8:	4e 97       	sbiw	r24, 0x1e	; 30
    3afa:	90 93 01 00 	sts	0x0001, r25
    3afe:	80 93 00 00 	sts	0x0000, r24
    3b02:	4d cf       	rjmp	.-358    	; 0x399e <start_vertical_speed_control_right+0x154>
			//k_contr_speed = 150 - (360 - currentAngle);
			//k_contr_speed_int = 300 - ((360 - currentAngle)*300/90);
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)*1.5);
			//k_contr_speed_int = picwatch_808*100 - ((360 - currentAngle)*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)*1.5);
    3b04:	68 e6       	ldi	r22, 0x68	; 104
    3b06:	71 e0       	ldi	r23, 0x01	; 1
    3b08:	62 1b       	sub	r22, r18
    3b0a:	73 0b       	sbc	r23, r19
    3b0c:	88 27       	eor	r24, r24
    3b0e:	77 fd       	sbrc	r23, 7
    3b10:	80 95       	com	r24
    3b12:	98 2f       	mov	r25, r24
    3b14:	6e cf       	rjmp	.-292    	; 0x39f2 <start_vertical_speed_control_right+0x1a8>
			//k_contr_speed = 150 + currentAngle;
			//k_contr_speed_int = 300 + (currentAngle*300/90);
			k_ff_speed_control_right = INIT_KFF + (currentAngle*1.5);
			//k_contr_speed_int = picwatch_808*100 + (currentAngle*picwatch_808*100/90);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle*1.5);
    3b16:	b9 01       	movw	r22, r18
    3b18:	88 27       	eor	r24, r24
    3b1a:	77 fd       	sbrc	r23, 7
    3b1c:	80 95       	com	r24
    3b1e:	98 2f       	mov	r25, r24
    3b20:	b3 ce       	rjmp	.-666    	; 0x3888 <start_vertical_speed_control_right+0x3e>

00003b22 <start_orizzontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_right(signed int *pwm_right) {
    3b22:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <start_orizzontal_speed_control_right+0xc>
    3b2c:	7f c0       	rjmp	.+254    	; 0x3c2c <start_orizzontal_speed_control_right+0x10a>
		delta_right_speed_current = 0;
		delta_right_speed_prev = 0;
		return;
	}

	delta_right_speed_prev = delta_right_speed_current;
    3b2e:	a0 91 55 04 	lds	r26, 0x0455
    3b32:	b0 91 56 04 	lds	r27, 0x0456
    3b36:	b0 93 36 04 	sts	0x0436, r27
    3b3a:	a0 93 35 04 	sts	0x0435, r26
	if(*pwm_right >= 0) {
    3b3e:	20 81       	ld	r18, Z
    3b40:	31 81       	ldd	r19, Z+1	; 0x01
    3b42:	37 fd       	sbrc	r19, 7
    3b44:	96 c0       	rjmp	.+300    	; 0x3c72 <start_orizzontal_speed_control_right+0x150>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3b46:	80 91 dc 03 	lds	r24, 0x03DC
    3b4a:	90 91 dd 03 	lds	r25, 0x03DD
    3b4e:	a9 01       	movw	r20, r18
    3b50:	48 1b       	sub	r20, r24
    3b52:	59 0b       	sbc	r21, r25
    3b54:	ca 01       	movw	r24, r20
    3b56:	50 93 56 04 	sts	0x0456, r21
    3b5a:	40 93 55 04 	sts	0x0455, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    3b5e:	20 91 f0 03 	lds	r18, 0x03F0
    3b62:	30 91 f1 03 	lds	r19, 0x03F1
    3b66:	28 0f       	add	r18, r24
    3b68:	39 1f       	adc	r19, r25
    3b6a:	30 93 f1 03 	sts	0x03F1, r19
    3b6e:	20 93 f0 03 	sts	0x03F0, r18

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
    3b72:	53 e0       	ldi	r21, 0x03	; 3
    3b74:	21 32       	cpi	r18, 0x21	; 33
    3b76:	35 07       	cpc	r19, r21
    3b78:	0c f4       	brge	.+2      	; 0x3b7c <start_orizzontal_speed_control_right+0x5a>
    3b7a:	6e c0       	rjmp	.+220    	; 0x3c58 <start_orizzontal_speed_control_right+0x136>
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
    3b7c:	20 e2       	ldi	r18, 0x20	; 32
    3b7e:	33 e0       	ldi	r19, 0x03	; 3
    3b80:	30 93 f1 03 	sts	0x03F1, r19
    3b84:	20 93 f0 03 	sts	0x03F0, r18
    3b88:	60 e4       	ldi	r22, 0x40	; 64
    3b8a:	76 e0       	ldi	r23, 0x06	; 6
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_ORIZZONTAL * delta_right_speed_current);
    3b8c:	9c 01       	movw	r18, r24
    3b8e:	22 0f       	add	r18, r18
    3b90:	33 1f       	adc	r19, r19
    3b92:	28 0f       	add	r18, r24
    3b94:	39 1f       	adc	r19, r25
    3b96:	22 0f       	add	r18, r18
    3b98:	33 1f       	adc	r19, r19
    3b9a:	22 0f       	add	r18, r18
    3b9c:	33 1f       	adc	r19, r19
    3b9e:	22 0f       	add	r18, r18
    3ba0:	33 1f       	adc	r19, r19
    3ba2:	28 0f       	add	r18, r24
    3ba4:	39 1f       	adc	r19, r25
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
    3ba6:	40 81       	ld	r20, Z
    3ba8:	51 81       	ldd	r21, Z+1	; 0x01
    3baa:	44 0f       	add	r20, r20
    3bac:	55 1f       	adc	r21, r21
    3bae:	44 0f       	add	r20, r20
    3bb0:	55 1f       	adc	r21, r21
    3bb2:	44 0f       	add	r20, r20
    3bb4:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(P_ORIZZONTAL * delta_right_speed_current);
    3bb6:	24 0f       	add	r18, r20
    3bb8:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
    3bba:	ad 01       	movw	r20, r26
    3bbc:	48 1b       	sub	r20, r24
    3bbe:	59 0b       	sbc	r21, r25
    3bc0:	ca 01       	movw	r24, r20
    3bc2:	88 0f       	add	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	84 0f       	add	r24, r20
    3bc8:	95 1f       	adc	r25, r21
    3bca:	28 0f       	add	r18, r24
    3bcc:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(I_ORIZZONTAL*delta_right_speed_sum);
    3bce:	26 0f       	add	r18, r22
    3bd0:	37 1f       	adc	r19, r23
    3bd2:	30 93 e7 03 	sts	0x03E7, r19
    3bd6:	20 93 e6 03 	sts	0x03E6, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    3bda:	37 fd       	sbrc	r19, 7
    3bdc:	59 c0       	rjmp	.+178    	; 0x3c90 <start_orizzontal_speed_control_right+0x16e>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    3bde:	12 16       	cp	r1, r18
    3be0:	13 06       	cpc	r1, r19
    3be2:	0c f0       	brlt	.+2      	; 0x3be6 <start_orizzontal_speed_control_right+0xc4>
    3be4:	5f c0       	rjmp	.+190    	; 0x3ca4 <start_orizzontal_speed_control_right+0x182>
    3be6:	80 81       	ld	r24, Z
    3be8:	91 81       	ldd	r25, Z+1	; 0x01
    3bea:	97 fd       	sbrc	r25, 7
    3bec:	68 c0       	rjmp	.+208    	; 0x3cbe <start_orizzontal_speed_control_right+0x19c>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3bee:	5d e5       	ldi	r21, 0x5D	; 93
    3bf0:	21 3c       	cpi	r18, 0xC1	; 193
    3bf2:	35 07       	cpc	r19, r21
    3bf4:	0c f4       	brge	.+2      	; 0x3bf8 <start_orizzontal_speed_control_right+0xd6>
    3bf6:	56 c0       	rjmp	.+172    	; 0x3ca4 <start_orizzontal_speed_control_right+0x182>
    3bf8:	80 ec       	ldi	r24, 0xC0	; 192
    3bfa:	9d e5       	ldi	r25, 0x5D	; 93
    3bfc:	90 93 e7 03 	sts	0x03E7, r25
    3c00:	80 93 e6 03 	sts	0x03E6, r24
    3c04:	2c ed       	ldi	r18, 0xDC	; 220
    3c06:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    3c08:	31 83       	std	Z+1, r19	; 0x01
    3c0a:	20 83       	st	Z, r18
	if(pwm_right > 0) {
    3c0c:	30 97       	sbiw	r30, 0x00	; 0
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <start_orizzontal_speed_control_right+0xf0>
    3c10:	65 c0       	rjmp	.+202    	; 0x3cdc <start_orizzontal_speed_control_right+0x1ba>
		*pwm_right += 30;
    3c12:	22 5e       	subi	r18, 0xE2	; 226
    3c14:	3f 4f       	sbci	r19, 0xFF	; 255
    3c16:	31 83       	std	Z+1, r19	; 0x01
    3c18:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	24 33       	cpi	r18, 0x34	; 52
    3c1e:	34 07       	cpc	r19, r20
    3c20:	94 f0       	brlt	.+36     	; 0x3c46 <start_orizzontal_speed_control_right+0x124>
    3c22:	83 e3       	ldi	r24, 0x33	; 51
    3c24:	91 e0       	ldi	r25, 0x01	; 1
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
    3c2a:	08 95       	ret
}

void start_orizzontal_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    3c2c:	10 92 f1 03 	sts	0x03F1, r1
    3c30:	10 92 f0 03 	sts	0x03F0, r1
		delta_right_speed_current = 0;
    3c34:	10 92 56 04 	sts	0x0456, r1
    3c38:	10 92 55 04 	sts	0x0455, r1
		delta_right_speed_prev = 0;
    3c3c:	10 92 36 04 	sts	0x0436, r1
    3c40:	10 92 35 04 	sts	0x0435, r1
		return;
    3c44:	08 95       	ret
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3c46:	5e ef       	ldi	r21, 0xFE	; 254
    3c48:	2d 3c       	cpi	r18, 0xCD	; 205
    3c4a:	35 07       	cpc	r19, r21
    3c4c:	24 f4       	brge	.+8      	; 0x3c56 <start_orizzontal_speed_control_right+0x134>
    3c4e:	8d ec       	ldi	r24, 0xCD	; 205
    3c50:	9e ef       	ldi	r25, 0xFE	; 254
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	80 83       	st	Z, r24
    3c56:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    3c58:	4c ef       	ldi	r20, 0xFC	; 252
    3c5a:	20 3e       	cpi	r18, 0xE0	; 224
    3c5c:	34 07       	cpc	r19, r20
    3c5e:	a4 f4       	brge	.+40     	; 0x3c88 <start_orizzontal_speed_control_right+0x166>
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
    3c60:	20 ee       	ldi	r18, 0xE0	; 224
    3c62:	3c ef       	ldi	r19, 0xFC	; 252
    3c64:	30 93 f1 03 	sts	0x03F1, r19
    3c68:	20 93 f0 03 	sts	0x03F0, r18
    3c6c:	60 ec       	ldi	r22, 0xC0	; 192
    3c6e:	79 ef       	ldi	r23, 0xF9	; 249
    3c70:	8d cf       	rjmp	.-230    	; 0x3b8c <start_orizzontal_speed_control_right+0x6a>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3c72:	80 91 dc 03 	lds	r24, 0x03DC
    3c76:	90 91 dd 03 	lds	r25, 0x03DD
    3c7a:	82 0f       	add	r24, r18
    3c7c:	93 1f       	adc	r25, r19
    3c7e:	90 93 56 04 	sts	0x0456, r25
    3c82:	80 93 55 04 	sts	0x0455, r24
    3c86:	6b cf       	rjmp	.-298    	; 0x3b5e <start_orizzontal_speed_control_right+0x3c>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    3c88:	b9 01       	movw	r22, r18
    3c8a:	66 0f       	add	r22, r22
    3c8c:	77 1f       	adc	r23, r23
    3c8e:	7e cf       	rjmp	.-260    	; 0x3b8c <start_orizzontal_speed_control_right+0x6a>
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_ORIZZONTAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
	pwm_right_speed_controller += (signed int)(I_ORIZZONTAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	97 fd       	sbrc	r25, 7
    3c96:	06 c0       	rjmp	.+12     	; 0x3ca4 <start_orizzontal_speed_control_right+0x182>
		pwm_right_speed_controller = 0;
    3c98:	10 92 e7 03 	sts	0x03E7, r1
    3c9c:	10 92 e6 03 	sts	0x03E6, r1
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3ca4:	82 ea       	ldi	r24, 0xA2	; 162
    3ca6:	20 34       	cpi	r18, 0x40	; 64
    3ca8:	38 07       	cpc	r19, r24
    3caa:	7c f4       	brge	.+30     	; 0x3cca <start_orizzontal_speed_control_right+0x1a8>
    3cac:	80 e4       	ldi	r24, 0x40	; 64
    3cae:	92 ea       	ldi	r25, 0xA2	; 162
    3cb0:	90 93 e7 03 	sts	0x03E7, r25
    3cb4:	80 93 e6 03 	sts	0x03E6, r24
    3cb8:	24 e2       	ldi	r18, 0x24	; 36
    3cba:	3a ef       	ldi	r19, 0xFA	; 250
    3cbc:	a5 cf       	rjmp	.-182    	; 0x3c08 <start_orizzontal_speed_control_right+0xe6>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3cbe:	10 92 e7 03 	sts	0x03E7, r1
    3cc2:	10 92 e6 03 	sts	0x03E6, r1
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3cca:	35 95       	asr	r19
    3ccc:	27 95       	ror	r18
    3cce:	35 95       	asr	r19
    3cd0:	27 95       	ror	r18
    3cd2:	35 95       	asr	r19
    3cd4:	27 95       	ror	r18
    3cd6:	35 95       	asr	r19
    3cd8:	27 95       	ror	r18
    3cda:	96 cf       	rjmp	.-212    	; 0x3c08 <start_orizzontal_speed_control_right+0xe6>

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3cdc:	37 ff       	sbrs	r19, 7
    3cde:	9d cf       	rjmp	.-198    	; 0x3c1a <start_orizzontal_speed_control_right+0xf8>
		*pwm_right -= 30;
    3ce0:	2e 51       	subi	r18, 0x1E	; 30
    3ce2:	30 40       	sbci	r19, 0x00	; 0
    3ce4:	30 93 01 00 	sts	0x0001, r19
    3ce8:	20 93 00 00 	sts	0x0000, r18
    3cec:	96 cf       	rjmp	.-212    	; 0x3c1a <start_orizzontal_speed_control_right+0xf8>

00003cee <start_orizzontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_left(signed int *pwm_left) {
    3cee:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <start_orizzontal_speed_control_left+0xc>
    3cf8:	7b c0       	rjmp	.+246    	; 0x3df0 <start_orizzontal_speed_control_left+0x102>
		delta_left_speed_current = 0;
		delta_left_speed_prev = 0;
		return;
	}

	delta_left_speed_prev = delta_left_speed_current; 
    3cfa:	a0 91 33 04 	lds	r26, 0x0433
    3cfe:	b0 91 34 04 	lds	r27, 0x0434
    3d02:	b0 93 4e 04 	sts	0x044E, r27
    3d06:	a0 93 4d 04 	sts	0x044D, r26
	if(*pwm_left >= 0) {
    3d0a:	20 81       	ld	r18, Z
    3d0c:	31 81       	ldd	r19, Z+1	; 0x01
    3d0e:	37 fd       	sbrc	r19, 7
    3d10:	89 c0       	rjmp	.+274    	; 0x3e24 <start_orizzontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3d12:	80 91 da 03 	lds	r24, 0x03DA
    3d16:	90 91 db 03 	lds	r25, 0x03DB
    3d1a:	a9 01       	movw	r20, r18
    3d1c:	48 1b       	sub	r20, r24
    3d1e:	59 0b       	sbc	r21, r25
    3d20:	ca 01       	movw	r24, r20
    3d22:	50 93 34 04 	sts	0x0434, r21
    3d26:	40 93 33 04 	sts	0x0433, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    3d2a:	20 91 ee 03 	lds	r18, 0x03EE
    3d2e:	30 91 ef 03 	lds	r19, 0x03EF
    3d32:	28 0f       	add	r18, r24
    3d34:	39 1f       	adc	r19, r25
    3d36:	30 93 ef 03 	sts	0x03EF, r19
    3d3a:	20 93 ee 03 	sts	0x03EE, r18

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
    3d3e:	53 e0       	ldi	r21, 0x03	; 3
    3d40:	21 32       	cpi	r18, 0x21	; 33
    3d42:	35 07       	cpc	r19, r21
    3d44:	0c f4       	brge	.+2      	; 0x3d48 <start_orizzontal_speed_control_left+0x5a>
    3d46:	61 c0       	rjmp	.+194    	; 0x3e0a <start_orizzontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
    3d48:	20 e2       	ldi	r18, 0x20	; 32
    3d4a:	33 e0       	ldi	r19, 0x03	; 3
    3d4c:	30 93 ef 03 	sts	0x03EF, r19
    3d50:	20 93 ee 03 	sts	0x03EE, r18
    3d54:	60 e4       	ldi	r22, 0x40	; 64
    3d56:	76 e0       	ldi	r23, 0x06	; 6
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_ORIZZONTAL * delta_left_speed_current);
    3d58:	9c 01       	movw	r18, r24
    3d5a:	22 0f       	add	r18, r18
    3d5c:	33 1f       	adc	r19, r19
    3d5e:	28 0f       	add	r18, r24
    3d60:	39 1f       	adc	r19, r25
    3d62:	22 0f       	add	r18, r18
    3d64:	33 1f       	adc	r19, r19
    3d66:	22 0f       	add	r18, r18
    3d68:	33 1f       	adc	r19, r19
    3d6a:	22 0f       	add	r18, r18
    3d6c:	33 1f       	adc	r19, r19
    3d6e:	28 0f       	add	r18, r24
    3d70:	39 1f       	adc	r19, r25
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
    3d72:	40 81       	ld	r20, Z
    3d74:	51 81       	ldd	r21, Z+1	; 0x01
    3d76:	44 0f       	add	r20, r20
    3d78:	55 1f       	adc	r21, r21
    3d7a:	44 0f       	add	r20, r20
    3d7c:	55 1f       	adc	r21, r21
    3d7e:	44 0f       	add	r20, r20
    3d80:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(P_ORIZZONTAL * delta_left_speed_current);
    3d82:	24 0f       	add	r18, r20
    3d84:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
    3d86:	ad 01       	movw	r20, r26
    3d88:	48 1b       	sub	r20, r24
    3d8a:	59 0b       	sbc	r21, r25
    3d8c:	ca 01       	movw	r24, r20
    3d8e:	88 0f       	add	r24, r24
    3d90:	99 1f       	adc	r25, r25
    3d92:	84 0f       	add	r24, r20
    3d94:	95 1f       	adc	r25, r21
    3d96:	28 0f       	add	r18, r24
    3d98:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(I_ORIZZONTAL*delta_left_speed_sum);
    3d9a:	26 0f       	add	r18, r22
    3d9c:	37 1f       	adc	r19, r23
    3d9e:	30 93 e9 03 	sts	0x03E9, r19
    3da2:	20 93 e8 03 	sts	0x03E8, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3da6:	37 fd       	sbrc	r19, 7
    3da8:	4c c0       	rjmp	.+152    	; 0x3e42 <start_orizzontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3daa:	12 16       	cp	r1, r18
    3dac:	13 06       	cpc	r1, r19
    3dae:	0c f0       	brlt	.+2      	; 0x3db2 <start_orizzontal_speed_control_left+0xc4>
    3db0:	52 c0       	rjmp	.+164    	; 0x3e56 <start_orizzontal_speed_control_left+0x168>
    3db2:	80 81       	ld	r24, Z
    3db4:	91 81       	ldd	r25, Z+1	; 0x01
    3db6:	97 fd       	sbrc	r25, 7
    3db8:	67 c0       	rjmp	.+206    	; 0x3e88 <start_orizzontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3dba:	5d e5       	ldi	r21, 0x5D	; 93
    3dbc:	21 3c       	cpi	r18, 0xC1	; 193
    3dbe:	35 07       	cpc	r19, r21
    3dc0:	0c f4       	brge	.+2      	; 0x3dc4 <start_orizzontal_speed_control_left+0xd6>
    3dc2:	49 c0       	rjmp	.+146    	; 0x3e56 <start_orizzontal_speed_control_left+0x168>
    3dc4:	80 ec       	ldi	r24, 0xC0	; 192
    3dc6:	9d e5       	ldi	r25, 0x5D	; 93
    3dc8:	90 93 e9 03 	sts	0x03E9, r25
    3dcc:	80 93 e8 03 	sts	0x03E8, r24
    3dd0:	2c ed       	ldi	r18, 0xDC	; 220
    3dd2:	35 e0       	ldi	r19, 0x05	; 5
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
	if(*pwm_left > 0) {
		*pwm_left += 30;
    3dd4:	22 5e       	subi	r18, 0xE2	; 226
    3dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd8:	31 83       	std	Z+1, r19	; 0x01
    3dda:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3ddc:	41 e0       	ldi	r20, 0x01	; 1
    3dde:	24 33       	cpi	r18, 0x34	; 52
    3de0:	34 07       	cpc	r19, r20
    3de2:	0c f4       	brge	.+2      	; 0x3de6 <start_orizzontal_speed_control_left+0xf8>
    3de4:	48 c0       	rjmp	.+144    	; 0x3e76 <start_orizzontal_speed_control_left+0x188>
    3de6:	83 e3       	ldi	r24, 0x33	; 51
    3de8:	91 e0       	ldi	r25, 0x01	; 1
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
    3dee:	08 95       	ret
}

void start_orizzontal_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    3df0:	10 92 ef 03 	sts	0x03EF, r1
    3df4:	10 92 ee 03 	sts	0x03EE, r1
		delta_left_speed_current = 0;
    3df8:	10 92 34 04 	sts	0x0434, r1
    3dfc:	10 92 33 04 	sts	0x0433, r1
		delta_left_speed_prev = 0;
    3e00:	10 92 4e 04 	sts	0x044E, r1
    3e04:	10 92 4d 04 	sts	0x044D, r1
		return;
    3e08:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    3e0a:	4c ef       	ldi	r20, 0xFC	; 252
    3e0c:	20 3e       	cpi	r18, 0xE0	; 224
    3e0e:	34 07       	cpc	r19, r20
    3e10:	a4 f4       	brge	.+40     	; 0x3e3a <start_orizzontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
    3e12:	20 ee       	ldi	r18, 0xE0	; 224
    3e14:	3c ef       	ldi	r19, 0xFC	; 252
    3e16:	30 93 ef 03 	sts	0x03EF, r19
    3e1a:	20 93 ee 03 	sts	0x03EE, r18
    3e1e:	60 ec       	ldi	r22, 0xC0	; 192
    3e20:	79 ef       	ldi	r23, 0xF9	; 249
    3e22:	9a cf       	rjmp	.-204    	; 0x3d58 <start_orizzontal_speed_control_left+0x6a>

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3e24:	80 91 da 03 	lds	r24, 0x03DA
    3e28:	90 91 db 03 	lds	r25, 0x03DB
    3e2c:	82 0f       	add	r24, r18
    3e2e:	93 1f       	adc	r25, r19
    3e30:	90 93 34 04 	sts	0x0434, r25
    3e34:	80 93 33 04 	sts	0x0433, r24
    3e38:	78 cf       	rjmp	.-272    	; 0x3d2a <start_orizzontal_speed_control_left+0x3c>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	66 0f       	add	r22, r22
    3e3e:	77 1f       	adc	r23, r23
    3e40:	8b cf       	rjmp	.-234    	; 0x3d58 <start_orizzontal_speed_control_left+0x6a>
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_ORIZZONTAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
	pwm_left_speed_controller += (signed int)(I_ORIZZONTAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3e42:	80 81       	ld	r24, Z
    3e44:	91 81       	ldd	r25, Z+1	; 0x01
    3e46:	97 fd       	sbrc	r25, 7
    3e48:	06 c0       	rjmp	.+12     	; 0x3e56 <start_orizzontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    3e4a:	10 92 e9 03 	sts	0x03E9, r1
    3e4e:	10 92 e8 03 	sts	0x03E8, r1
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3e56:	82 ea       	ldi	r24, 0xA2	; 162
    3e58:	20 34       	cpi	r18, 0x40	; 64
    3e5a:	38 07       	cpc	r19, r24
    3e5c:	dc f4       	brge	.+54     	; 0x3e94 <start_orizzontal_speed_control_left+0x1a6>
    3e5e:	80 e4       	ldi	r24, 0x40	; 64
    3e60:	92 ea       	ldi	r25, 0xA2	; 162
    3e62:	90 93 e9 03 	sts	0x03E9, r25
    3e66:	80 93 e8 03 	sts	0x03E8, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    3e6a:	24 e2       	ldi	r18, 0x24	; 36
    3e6c:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    3e6e:	2e 51       	subi	r18, 0x1E	; 30
    3e70:	30 40       	sbci	r19, 0x00	; 0
    3e72:	31 83       	std	Z+1, r19	; 0x01
    3e74:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3e76:	5e ef       	ldi	r21, 0xFE	; 254
    3e78:	2d 3c       	cpi	r18, 0xCD	; 205
    3e7a:	35 07       	cpc	r19, r21
    3e7c:	24 f4       	brge	.+8      	; 0x3e86 <start_orizzontal_speed_control_left+0x198>
    3e7e:	8d ec       	ldi	r24, 0xCD	; 205
    3e80:	9e ef       	ldi	r25, 0xFE	; 254
    3e82:	91 83       	std	Z+1, r25	; 0x01
    3e84:	80 83       	st	Z, r24
    3e86:	08 95       	ret

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3e88:	10 92 e9 03 	sts	0x03E9, r1
    3e8c:	10 92 e8 03 	sts	0x03E8, r1
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3e94:	35 95       	asr	r19
    3e96:	27 95       	ror	r18
    3e98:	35 95       	asr	r19
    3e9a:	27 95       	ror	r18
    3e9c:	35 95       	asr	r19
    3e9e:	27 95       	ror	r18
    3ea0:	35 95       	asr	r19
    3ea2:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    3ea4:	31 83       	std	Z+1, r19	; 0x01
    3ea6:	20 83       	st	Z, r18
	if(*pwm_left > 0) {
    3ea8:	12 16       	cp	r1, r18
    3eaa:	13 06       	cpc	r1, r19
    3eac:	0c f4       	brge	.+2      	; 0x3eb0 <start_orizzontal_speed_control_left+0x1c2>
    3eae:	92 cf       	rjmp	.-220    	; 0x3dd4 <start_orizzontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3eb0:	21 15       	cp	r18, r1
    3eb2:	31 05       	cpc	r19, r1
    3eb4:	e1 f6       	brne	.-72     	; 0x3e6e <start_orizzontal_speed_control_left+0x180>
    3eb6:	08 95       	ret

00003eb8 <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    3eb8:	8f ef       	ldi	r24, 0xFF	; 255
    3eba:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    3ebc:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3ebe:	97 ef       	ldi	r25, 0xF7	; 247
    3ec0:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    3ec2:	90 ee       	ldi	r25, 0xE0	; 224
    3ec4:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    3ec6:	90 ef       	ldi	r25, 0xF0	; 240
    3ec8:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    3eca:	90 eb       	ldi	r25, 0xB0	; 176
    3ecc:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3ece:	9c ef       	ldi	r25, 0xFC	; 252
    3ed0:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    3ed2:	93 e0       	ldi	r25, 0x03	; 3
    3ed4:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    3ed6:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3ed8:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    3eda:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    3edc:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    3ede:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    3ee0:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3ee4:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    3ee8:	9f e8       	ldi	r25, 0x8F	; 143
    3eea:	90 93 04 01 	sts	0x0104, r25
	#endif
	#ifdef HE_REV_3_1
	PORTJ = 0x0F;
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    3eee:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    3ef2:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    3ef6:	10 92 0b 01 	sts	0x010B, r1

		
}
    3efa:	08 95       	ret

00003efc <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    3efc:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3f00:	10 92 bc 00 	sts	0x00BC, r1
}
    3f04:	08 95       	ret

00003f06 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3f06:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3f08:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3f0a:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3f0e:	80 e2       	ldi	r24, 0x20	; 32
    3f10:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3f14:	08 95       	ret

00003f16 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f16:	94 ea       	ldi	r25, 0xA4	; 164
    3f18:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3f1c:	90 91 bc 00 	lds	r25, 0x00BC
    3f20:	97 ff       	sbrs	r25, 7
    3f22:	fc cf       	rjmp	.-8      	; 0x3f1c <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f24:	90 91 b9 00 	lds	r25, 0x00B9
    3f28:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3f2a:	98 30       	cpi	r25, 0x08	; 8
    3f2c:	21 f0       	breq	.+8      	; 0x3f36 <i2c_start+0x20>
    3f2e:	90 31       	cpi	r25, 0x10	; 16
    3f30:	11 f0       	breq	.+4      	; 0x3f36 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3f36:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3f3a:	84 e8       	ldi	r24, 0x84	; 132
    3f3c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3f40:	80 91 bc 00 	lds	r24, 0x00BC
    3f44:	87 ff       	sbrs	r24, 7
    3f46:	fc cf       	rjmp	.-8      	; 0x3f40 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3f48:	90 91 b9 00 	lds	r25, 0x00B9
    3f4c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3f4e:	98 31       	cpi	r25, 0x18	; 24
    3f50:	21 f0       	breq	.+8      	; 0x3f5a <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 34       	cpi	r25, 0x40	; 64
    3f56:	19 f0       	breq	.+6      	; 0x3f5e <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3f58:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3f5a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3f5c:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	08 95       	ret

00003f62 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f62:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3f64:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3f66:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3f68:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3f6c:	90 91 bc 00 	lds	r25, 0x00BC
    3f70:	97 ff       	sbrs	r25, 7
    3f72:	fc cf       	rjmp	.-8      	; 0x3f6c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3f74:	90 91 b9 00 	lds	r25, 0x00B9
    3f78:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3f7a:	98 30       	cpi	r25, 0x08	; 8
    3f7c:	11 f0       	breq	.+4      	; 0x3f82 <i2c_start_wait+0x20>
    3f7e:	90 31       	cpi	r25, 0x10	; 16
    3f80:	99 f7       	brne	.-26     	; 0x3f68 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3f82:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3f86:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3f8a:	90 91 bc 00 	lds	r25, 0x00BC
    3f8e:	97 ff       	sbrs	r25, 7
    3f90:	fc cf       	rjmp	.-8      	; 0x3f8a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3f92:	90 91 b9 00 	lds	r25, 0x00B9
    3f96:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3f98:	90 32       	cpi	r25, 0x20	; 32
    3f9a:	19 f0       	breq	.+6      	; 0x3fa2 <i2c_start_wait+0x40>
    3f9c:	98 35       	cpi	r25, 0x58	; 88
    3f9e:	09 f0       	breq	.+2      	; 0x3fa2 <i2c_start_wait+0x40>
    3fa0:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3fa2:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3fa6:	90 91 bc 00 	lds	r25, 0x00BC
    3faa:	94 fd       	sbrc	r25, 4
    3fac:	fc cf       	rjmp	.-8      	; 0x3fa6 <i2c_start_wait+0x44>
    3fae:	dc cf       	rjmp	.-72     	; 0x3f68 <i2c_start_wait+0x6>

00003fb0 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3fb0:	94 ea       	ldi	r25, 0xA4	; 164
    3fb2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3fb6:	90 91 bc 00 	lds	r25, 0x00BC
    3fba:	97 ff       	sbrs	r25, 7
    3fbc:	fc cf       	rjmp	.-8      	; 0x3fb6 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3fbe:	90 91 b9 00 	lds	r25, 0x00B9
    3fc2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3fc4:	98 30       	cpi	r25, 0x08	; 8
    3fc6:	21 f0       	breq	.+8      	; 0x3fd0 <i2c_rep_start+0x20>
    3fc8:	90 31       	cpi	r25, 0x10	; 16
    3fca:	11 f0       	breq	.+4      	; 0x3fd0 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3fd0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3fd4:	84 e8       	ldi	r24, 0x84	; 132
    3fd6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3fda:	80 91 bc 00 	lds	r24, 0x00BC
    3fde:	87 ff       	sbrs	r24, 7
    3fe0:	fc cf       	rjmp	.-8      	; 0x3fda <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3fe2:	90 91 b9 00 	lds	r25, 0x00B9
    3fe6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3fe8:	98 31       	cpi	r25, 0x18	; 24
    3fea:	21 f0       	breq	.+8      	; 0x3ff4 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	90 34       	cpi	r25, 0x40	; 64
    3ff0:	19 f0       	breq	.+6      	; 0x3ff8 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3ff2:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3ff6:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	08 95       	ret

00003ffc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3ffc:	84 e9       	ldi	r24, 0x94	; 148
    3ffe:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    4002:	80 91 bc 00 	lds	r24, 0x00BC
    4006:	84 fd       	sbrc	r24, 4
    4008:	fc cf       	rjmp	.-8      	; 0x4002 <i2c_stop+0x6>

}/* i2c_stop */
    400a:	08 95       	ret

0000400c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    400c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    4010:	84 e8       	ldi	r24, 0x84	; 132
    4012:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4016:	80 91 bc 00 	lds	r24, 0x00BC
    401a:	87 ff       	sbrs	r24, 7
    401c:	fc cf       	rjmp	.-8      	; 0x4016 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    401e:	90 91 b9 00 	lds	r25, 0x00B9
    4022:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	98 32       	cpi	r25, 0x28	; 40
    4028:	09 f0       	breq	.+2      	; 0x402c <i2c_write+0x20>
	return 0;

}/* i2c_write */
    402a:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    402c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    402e:	08 95       	ret

00004030 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4030:	84 ec       	ldi	r24, 0xC4	; 196
    4032:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    4036:	80 91 bc 00 	lds	r24, 0x00BC
    403a:	87 ff       	sbrs	r24, 7
    403c:	fc cf       	rjmp	.-8      	; 0x4036 <i2c_readAck+0x6>

    return TWDR;
    403e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    4042:	08 95       	ret

00004044 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    4044:	84 e8       	ldi	r24, 0x84	; 132
    4046:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    404a:	80 91 bc 00 	lds	r24, 0x00BC
    404e:	87 ff       	sbrs	r24, 7
    4050:	fc cf       	rjmp	.-8      	; 0x404a <i2c_readNak+0x6>
	
    return TWDR;
    4052:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    4056:	08 95       	ret

00004058 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    4058:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    405c:	80 e1       	ldi	r24, 0x10	; 16
    405e:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    4062:	e0 ec       	ldi	r30, 0xC0	; 192
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	80 81       	ld	r24, Z
    4068:	82 60       	ori	r24, 0x02	; 2
    406a:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    406c:	e1 ec       	ldi	r30, 0xC1	; 193
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	88 69       	ori	r24, 0x98	; 152
    4074:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    4076:	e2 ec       	ldi	r30, 0xC2	; 194
    4078:	f0 e0       	ldi	r31, 0x00	; 0
    407a:	80 81       	ld	r24, Z
    407c:	86 60       	ori	r24, 0x06	; 6
    407e:	80 83       	st	Z, r24

}
    4080:	08 95       	ret

00004082 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;
    4082:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    4086:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    408a:	10 92 c2 00 	sts	0x00C2, r1

}
    408e:	08 95       	ret

00004090 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    4090:	90 91 c0 00 	lds	r25, 0x00C0
    4094:	95 ff       	sbrs	r25, 5
    4096:	fc cf       	rjmp	.-8      	; 0x4090 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    4098:	80 93 c6 00 	sts	0x00C6, r24

}
    409c:	08 95       	ret

0000409e <__vector_25>:

ISR(USART0_RX_vect) {
    409e:	1f 92       	push	r1
    40a0:	0f 92       	push	r0
    40a2:	0f b6       	in	r0, 0x3f	; 63
    40a4:	0f 92       	push	r0
    40a6:	11 24       	eor	r1, r1
    40a8:	2f 93       	push	r18
    40aa:	8f 93       	push	r24
    40ac:	9f 93       	push	r25
    40ae:	af 93       	push	r26
    40b0:	bf 93       	push	r27

	char receivedByte = UDR0;
    40b2:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    40b6:	90 91 16 02 	lds	r25, 0x0216
    40ba:	99 23       	and	r25, r25
    40bc:	c9 f0       	breq	.+50     	; 0x40f0 <__vector_25+0x52>
		switch(receivedByte) {
    40be:	82 33       	cpi	r24, 0x32	; 50
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <__vector_25+0x26>
    40c2:	56 c0       	rjmp	.+172    	; 0x4170 <__vector_25+0xd2>
    40c4:	83 33       	cpi	r24, 0x33	; 51
    40c6:	58 f5       	brcc	.+86     	; 0x411e <__vector_25+0x80>
    40c8:	80 33       	cpi	r24, 0x30	; 48
    40ca:	09 f4       	brne	.+2      	; 0x40ce <__vector_25+0x30>
    40cc:	79 c0       	rjmp	.+242    	; 0x41c0 <__vector_25+0x122>
    40ce:	81 33       	cpi	r24, 0x31	; 49
    40d0:	29 f4       	brne	.+10     	; 0x40dc <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    40d8:	10 92 16 02 	sts	0x0216, r1

	}



}
    40dc:	bf 91       	pop	r27
    40de:	af 91       	pop	r26
    40e0:	9f 91       	pop	r25
    40e2:	8f 91       	pop	r24
    40e4:	2f 91       	pop	r18
    40e6:	0f 90       	pop	r0
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	0f 90       	pop	r0
    40ec:	1f 90       	pop	r1
    40ee:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    40f0:	90 91 15 02 	lds	r25, 0x0215
    40f4:	92 30       	cpi	r25, 0x02	; 2
    40f6:	09 f4       	brne	.+2      	; 0x40fa <__vector_25+0x5c>
    40f8:	41 c0       	rjmp	.+130    	; 0x417c <__vector_25+0xde>
    40fa:	93 30       	cpi	r25, 0x03	; 3
    40fc:	08 f1       	brcs	.+66     	; 0x4140 <__vector_25+0xa2>
    40fe:	94 30       	cpi	r25, 0x04	; 4
    4100:	09 f4       	brne	.+2      	; 0x4104 <__vector_25+0x66>
    4102:	89 c0       	rjmp	.+274    	; 0x4216 <__vector_25+0x178>
    4104:	94 30       	cpi	r25, 0x04	; 4
    4106:	08 f4       	brcc	.+2      	; 0x410a <__vector_25+0x6c>
    4108:	6c c0       	rjmp	.+216    	; 0x41e2 <__vector_25+0x144>
    410a:	95 30       	cpi	r25, 0x05	; 5
    410c:	39 f7       	brne	.-50     	; 0x40dc <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    410e:	83 37       	cpi	r24, 0x73	; 115
    4110:	29 f7       	brne	.-54     	; 0x40dc <__vector_25+0x3e>
					sendAdcValues = 0;
    4112:	10 92 00 04 	sts	0x0400, r1
					choosePeripheral = 1;
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	80 93 16 02 	sts	0x0216, r24
    411c:	df cf       	rjmp	.-66     	; 0x40dc <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    411e:	84 33       	cpi	r24, 0x34	; 52
    4120:	09 f4       	brne	.+2      	; 0x4124 <__vector_25+0x86>
    4122:	59 c0       	rjmp	.+178    	; 0x41d6 <__vector_25+0x138>
    4124:	84 33       	cpi	r24, 0x34	; 52
    4126:	08 f4       	brcc	.+2      	; 0x412a <__vector_25+0x8c>
    4128:	50 c0       	rjmp	.+160    	; 0x41ca <__vector_25+0x12c>
    412a:	85 33       	cpi	r24, 0x35	; 53
    412c:	b9 f6       	brne	.-82     	; 0x40dc <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    412e:	85 e0       	ldi	r24, 0x05	; 5
    4130:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    4134:	10 92 16 02 	sts	0x0216, r1
				sendAdcValues = 1;
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	80 93 00 04 	sts	0x0400, r24
				break;
    413e:	ce cf       	rjmp	.-100    	; 0x40dc <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    4140:	99 23       	and	r25, r25
    4142:	91 f5       	brne	.+100    	; 0x41a8 <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    4144:	8d 32       	cpi	r24, 0x2D	; 45
    4146:	09 f4       	brne	.+2      	; 0x414a <__vector_25+0xac>
    4148:	05 c1       	rjmp	.+522    	; 0x4354 <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    414a:	8b 32       	cpi	r24, 0x2B	; 43
    414c:	21 f7       	brne	.-56     	; 0x4116 <__vector_25+0x78>
					current_pwm = pwm_red-10;
    414e:	80 91 12 02 	lds	r24, 0x0212
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    4156:	97 fd       	sbrc	r25, 7
    4158:	9c c1       	rjmp	.+824    	; 0x4492 <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    415a:	80 93 12 02 	sts	0x0212, r24
					if(pwm_red == 0) {
    415e:	88 23       	and	r24, r24
    4160:	09 f4       	brne	.+2      	; 0x4164 <__vector_25+0xc6>
    4162:	99 c1       	rjmp	.+818    	; 0x4496 <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	90 93 89 00 	sts	0x0089, r25
    416a:	80 93 88 00 	sts	0x0088, r24
    416e:	b6 cf       	rjmp	.-148    	; 0x40dc <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    4170:	82 e0       	ldi	r24, 0x02	; 2
    4172:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    4176:	10 92 16 02 	sts	0x0216, r1
				break;
    417a:	b0 cf       	rjmp	.-160    	; 0x40dc <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    417c:	8d 32       	cpi	r24, 0x2D	; 45
    417e:	09 f4       	brne	.+2      	; 0x4182 <__vector_25+0xe4>
    4180:	2f c1       	rjmp	.+606    	; 0x43e0 <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    4182:	8b 32       	cpi	r24, 0x2B	; 43
    4184:	41 f6       	brne	.-112    	; 0x4116 <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    4186:	80 91 14 02 	lds	r24, 0x0214
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    418e:	97 fd       	sbrc	r25, 7
    4190:	92 c1       	rjmp	.+804    	; 0x44b6 <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    4192:	80 93 14 02 	sts	0x0214, r24
					if(pwm_blue == 0) {
    4196:	88 23       	and	r24, r24
    4198:	09 f4       	brne	.+2      	; 0x419c <__vector_25+0xfe>
    419a:	8f c1       	rjmp	.+798    	; 0x44ba <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	90 93 8d 00 	sts	0x008D, r25
    41a2:	80 93 8c 00 	sts	0x008C, r24
    41a6:	9a cf       	rjmp	.-204    	; 0x40dc <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    41a8:	91 30       	cpi	r25, 0x01	; 1
    41aa:	09 f0       	breq	.+2      	; 0x41ae <__vector_25+0x110>
    41ac:	97 cf       	rjmp	.-210    	; 0x40dc <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    41ae:	8d 32       	cpi	r24, 0x2D	; 45
    41b0:	09 f4       	brne	.+2      	; 0x41b4 <__vector_25+0x116>
    41b2:	b9 c0       	rjmp	.+370    	; 0x4326 <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    41b4:	8b 32       	cpi	r24, 0x2B	; 43
    41b6:	09 f4       	brne	.+2      	; 0x41ba <__vector_25+0x11c>
    41b8:	47 c0       	rjmp	.+142    	; 0x4248 <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    41ba:	90 93 16 02 	sts	0x0216, r25
    41be:	8e cf       	rjmp	.-228    	; 0x40dc <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    41c0:	10 92 15 02 	sts	0x0215, r1
				choosePeripheral = 0;
    41c4:	10 92 16 02 	sts	0x0216, r1
				break;
    41c8:	89 cf       	rjmp	.-238    	; 0x40dc <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    41ca:	83 e0       	ldi	r24, 0x03	; 3
    41cc:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    41d0:	10 92 16 02 	sts	0x0216, r1
				break;
    41d4:	83 cf       	rjmp	.-250    	; 0x40dc <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    41d6:	84 e0       	ldi	r24, 0x04	; 4
    41d8:	80 93 15 02 	sts	0x0215, r24
				choosePeripheral = 0;
    41dc:	10 92 16 02 	sts	0x0216, r1
				break;
    41e0:	7d cf       	rjmp	.-262    	; 0x40dc <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    41e2:	8b 32       	cpi	r24, 0x2B	; 43
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <__vector_25+0x14a>
    41e6:	13 c1       	rjmp	.+550    	; 0x440e <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    41e8:	8d 32       	cpi	r24, 0x2D	; 45
    41ea:	09 f4       	brne	.+2      	; 0x41ee <__vector_25+0x150>
    41ec:	6d c0       	rjmp	.+218    	; 0x42c8 <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    41ee:	83 37       	cpi	r24, 0x73	; 115
    41f0:	09 f0       	breq	.+2      	; 0x41f4 <__vector_25+0x156>
    41f2:	91 cf       	rjmp	.-222    	; 0x4116 <__vector_25+0x78>
					pwm_right = 0;
    41f4:	10 92 de 03 	sts	0x03DE, r1
    41f8:	10 92 df 03 	sts	0x03DF, r1
    41fc:	10 92 e0 03 	sts	0x03E0, r1
    4200:	10 92 e1 03 	sts	0x03E1, r1
					OCR3A = 0;
    4204:	10 92 99 00 	sts	0x0099, r1
    4208:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    420c:	10 92 9b 00 	sts	0x009B, r1
    4210:	10 92 9a 00 	sts	0x009A, r1
    4214:	63 cf       	rjmp	.-314    	; 0x40dc <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    4216:	8b 32       	cpi	r24, 0x2B	; 43
    4218:	09 f4       	brne	.+2      	; 0x421c <__vector_25+0x17e>
    421a:	b3 c0       	rjmp	.+358    	; 0x4382 <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    421c:	8d 32       	cpi	r24, 0x2D	; 45
    421e:	29 f1       	breq	.+74     	; 0x426a <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    4220:	83 37       	cpi	r24, 0x73	; 115
    4222:	09 f0       	breq	.+2      	; 0x4226 <__vector_25+0x188>
    4224:	78 cf       	rjmp	.-272    	; 0x4116 <__vector_25+0x78>
					pwm_left = 0;
    4226:	10 92 e0 03 	sts	0x03E0, r1
    422a:	10 92 e1 03 	sts	0x03E1, r1
    422e:	10 92 e2 03 	sts	0x03E2, r1
    4232:	10 92 e3 03 	sts	0x03E3, r1
					OCR4A = 0;
    4236:	10 92 a9 00 	sts	0x00A9, r1
    423a:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    423e:	10 92 ab 00 	sts	0x00AB, r1
    4242:	10 92 aa 00 	sts	0x00AA, r1
    4246:	4a cf       	rjmp	.-364    	; 0x40dc <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    4248:	80 91 13 02 	lds	r24, 0x0213
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    4250:	97 fd       	sbrc	r25, 7
    4252:	28 c1       	rjmp	.+592    	; 0x44a4 <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    4254:	80 93 13 02 	sts	0x0213, r24
					if(pwm_green == 0) {
    4258:	88 23       	and	r24, r24
    425a:	09 f4       	brne	.+2      	; 0x425e <__vector_25+0x1c0>
    425c:	25 c1       	rjmp	.+586    	; 0x44a8 <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	90 93 8b 00 	sts	0x008B, r25
    4264:	80 93 8a 00 	sts	0x008A, r24
    4268:	39 cf       	rjmp	.-398    	; 0x40dc <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    426a:	80 91 e0 03 	lds	r24, 0x03E0
    426e:	90 91 e1 03 	lds	r25, 0x03E1
    4272:	a0 91 e2 03 	lds	r26, 0x03E2
    4276:	b0 91 e3 03 	lds	r27, 0x03E3
    427a:	4e 97       	sbiw	r24, 0x1e	; 30
    427c:	a1 09       	sbc	r26, r1
    427e:	b1 09       	sbc	r27, r1
    4280:	80 93 e0 03 	sts	0x03E0, r24
    4284:	90 93 e1 03 	sts	0x03E1, r25
    4288:	a0 93 e2 03 	sts	0x03E2, r26
    428c:	b0 93 e3 03 	sts	0x03E3, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    4290:	8a 39       	cpi	r24, 0x9A	; 154
    4292:	2d ef       	ldi	r18, 0xFD	; 253
    4294:	92 07       	cpc	r25, r18
    4296:	2f ef       	ldi	r18, 0xFF	; 255
    4298:	a2 07       	cpc	r26, r18
    429a:	2f ef       	ldi	r18, 0xFF	; 255
    429c:	b2 07       	cpc	r27, r18
    429e:	0c f0       	brlt	.+2      	; 0x42a2 <__vector_25+0x204>
    42a0:	13 c1       	rjmp	.+550    	; 0x44c8 <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    42a2:	8a e9       	ldi	r24, 0x9A	; 154
    42a4:	9d ef       	ldi	r25, 0xFD	; 253
    42a6:	af ef       	ldi	r26, 0xFF	; 255
    42a8:	bf ef       	ldi	r27, 0xFF	; 255
    42aa:	80 93 e0 03 	sts	0x03E0, r24
    42ae:	90 93 e1 03 	sts	0x03E1, r25
    42b2:	a0 93 e2 03 	sts	0x03E2, r26
    42b6:	b0 93 e3 03 	sts	0x03E3, r27
    42ba:	86 e6       	ldi	r24, 0x66	; 102
    42bc:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    42be:	90 93 ab 00 	sts	0x00AB, r25
    42c2:	80 93 aa 00 	sts	0x00AA, r24
    42c6:	0a cf       	rjmp	.-492    	; 0x40dc <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    42c8:	80 91 de 03 	lds	r24, 0x03DE
    42cc:	90 91 df 03 	lds	r25, 0x03DF
    42d0:	a0 91 e0 03 	lds	r26, 0x03E0
    42d4:	b0 91 e1 03 	lds	r27, 0x03E1
    42d8:	4e 97       	sbiw	r24, 0x1e	; 30
    42da:	a1 09       	sbc	r26, r1
    42dc:	b1 09       	sbc	r27, r1
    42de:	80 93 de 03 	sts	0x03DE, r24
    42e2:	90 93 df 03 	sts	0x03DF, r25
    42e6:	a0 93 e0 03 	sts	0x03E0, r26
    42ea:	b0 93 e1 03 	sts	0x03E1, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    42ee:	8a 39       	cpi	r24, 0x9A	; 154
    42f0:	2d ef       	ldi	r18, 0xFD	; 253
    42f2:	92 07       	cpc	r25, r18
    42f4:	2f ef       	ldi	r18, 0xFF	; 255
    42f6:	a2 07       	cpc	r26, r18
    42f8:	2f ef       	ldi	r18, 0xFF	; 255
    42fa:	b2 07       	cpc	r27, r18
    42fc:	0c f0       	brlt	.+2      	; 0x4300 <__vector_25+0x262>
    42fe:	ea c0       	rjmp	.+468    	; 0x44d4 <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    4300:	8a e9       	ldi	r24, 0x9A	; 154
    4302:	9d ef       	ldi	r25, 0xFD	; 253
    4304:	af ef       	ldi	r26, 0xFF	; 255
    4306:	bf ef       	ldi	r27, 0xFF	; 255
    4308:	80 93 de 03 	sts	0x03DE, r24
    430c:	90 93 df 03 	sts	0x03DF, r25
    4310:	a0 93 e0 03 	sts	0x03E0, r26
    4314:	b0 93 e1 03 	sts	0x03E1, r27
    4318:	86 e6       	ldi	r24, 0x66	; 102
    431a:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    431c:	90 93 9b 00 	sts	0x009B, r25
    4320:	80 93 9a 00 	sts	0x009A, r24
    4324:	db ce       	rjmp	.-586    	; 0x40dc <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    4326:	80 91 80 00 	lds	r24, 0x0080
    432a:	80 62       	ori	r24, 0x20	; 32
    432c:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    4330:	80 91 13 02 	lds	r24, 0x0213
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    4338:	8f 3f       	cpi	r24, 0xFF	; 255
    433a:	91 05       	cpc	r25, r1
    433c:	19 f0       	breq	.+6      	; 0x4344 <__vector_25+0x2a6>
    433e:	14 f0       	brlt	.+4      	; 0x4344 <__vector_25+0x2a6>
    4340:	8f ef       	ldi	r24, 0xFF	; 255
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	80 93 13 02 	sts	0x0213, r24
					OCR1B = pwm_green;
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	90 93 8b 00 	sts	0x008B, r25
    434e:	80 93 8a 00 	sts	0x008A, r24
    4352:	c4 ce       	rjmp	.-632    	; 0x40dc <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    4354:	80 91 80 00 	lds	r24, 0x0080
    4358:	80 68       	ori	r24, 0x80	; 128
    435a:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    435e:	80 91 12 02 	lds	r24, 0x0212
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    4366:	8f 3f       	cpi	r24, 0xFF	; 255
    4368:	91 05       	cpc	r25, r1
    436a:	19 f0       	breq	.+6      	; 0x4372 <__vector_25+0x2d4>
    436c:	14 f0       	brlt	.+4      	; 0x4372 <__vector_25+0x2d4>
    436e:	8f ef       	ldi	r24, 0xFF	; 255
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	80 93 12 02 	sts	0x0212, r24
					OCR1A = pwm_red;
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	90 93 89 00 	sts	0x0089, r25
    437c:	80 93 88 00 	sts	0x0088, r24
    4380:	ad ce       	rjmp	.-678    	; 0x40dc <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    4382:	80 91 e0 03 	lds	r24, 0x03E0
    4386:	90 91 e1 03 	lds	r25, 0x03E1
    438a:	a0 91 e2 03 	lds	r26, 0x03E2
    438e:	b0 91 e3 03 	lds	r27, 0x03E3
    4392:	4e 96       	adiw	r24, 0x1e	; 30
    4394:	a1 1d       	adc	r26, r1
    4396:	b1 1d       	adc	r27, r1
    4398:	80 93 e0 03 	sts	0x03E0, r24
    439c:	90 93 e1 03 	sts	0x03E1, r25
    43a0:	a0 93 e2 03 	sts	0x03E2, r26
    43a4:	b0 93 e3 03 	sts	0x03E3, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    43a8:	87 36       	cpi	r24, 0x67	; 103
    43aa:	22 e0       	ldi	r18, 0x02	; 2
    43ac:	92 07       	cpc	r25, r18
    43ae:	20 e0       	ldi	r18, 0x00	; 0
    43b0:	a2 07       	cpc	r26, r18
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	b2 07       	cpc	r27, r18
    43b6:	0c f4       	brge	.+2      	; 0x43ba <__vector_25+0x31c>
    43b8:	58 c0       	rjmp	.+176    	; 0x446a <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    43ba:	86 e6       	ldi	r24, 0x66	; 102
    43bc:	92 e0       	ldi	r25, 0x02	; 2
    43be:	a0 e0       	ldi	r26, 0x00	; 0
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	80 93 e0 03 	sts	0x03E0, r24
    43c6:	90 93 e1 03 	sts	0x03E1, r25
    43ca:	a0 93 e2 03 	sts	0x03E2, r26
    43ce:	b0 93 e3 03 	sts	0x03E3, r27
    43d2:	86 e6       	ldi	r24, 0x66	; 102
    43d4:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    43d6:	90 93 a9 00 	sts	0x00A9, r25
    43da:	80 93 a8 00 	sts	0x00A8, r24
    43de:	7e ce       	rjmp	.-772    	; 0x40dc <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    43e0:	80 91 80 00 	lds	r24, 0x0080
    43e4:	88 60       	ori	r24, 0x08	; 8
    43e6:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    43ea:	80 91 14 02 	lds	r24, 0x0214
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    43f2:	8f 3f       	cpi	r24, 0xFF	; 255
    43f4:	91 05       	cpc	r25, r1
    43f6:	19 f0       	breq	.+6      	; 0x43fe <__vector_25+0x360>
    43f8:	14 f0       	brlt	.+4      	; 0x43fe <__vector_25+0x360>
    43fa:	8f ef       	ldi	r24, 0xFF	; 255
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	80 93 14 02 	sts	0x0214, r24
					OCR1C = pwm_blue;
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	90 93 8d 00 	sts	0x008D, r25
    4408:	80 93 8c 00 	sts	0x008C, r24
    440c:	67 ce       	rjmp	.-818    	; 0x40dc <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    440e:	80 91 de 03 	lds	r24, 0x03DE
    4412:	90 91 df 03 	lds	r25, 0x03DF
    4416:	a0 91 e0 03 	lds	r26, 0x03E0
    441a:	b0 91 e1 03 	lds	r27, 0x03E1
    441e:	4e 96       	adiw	r24, 0x1e	; 30
    4420:	a1 1d       	adc	r26, r1
    4422:	b1 1d       	adc	r27, r1
    4424:	80 93 de 03 	sts	0x03DE, r24
    4428:	90 93 df 03 	sts	0x03DF, r25
    442c:	a0 93 e0 03 	sts	0x03E0, r26
    4430:	b0 93 e1 03 	sts	0x03E1, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    4434:	87 36       	cpi	r24, 0x67	; 103
    4436:	22 e0       	ldi	r18, 0x02	; 2
    4438:	92 07       	cpc	r25, r18
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	a2 07       	cpc	r26, r18
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	b2 07       	cpc	r27, r18
    4442:	ec f0       	brlt	.+58     	; 0x447e <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    4444:	86 e6       	ldi	r24, 0x66	; 102
    4446:	92 e0       	ldi	r25, 0x02	; 2
    4448:	a0 e0       	ldi	r26, 0x00	; 0
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	80 93 de 03 	sts	0x03DE, r24
    4450:	90 93 df 03 	sts	0x03DF, r25
    4454:	a0 93 e0 03 	sts	0x03E0, r26
    4458:	b0 93 e1 03 	sts	0x03E1, r27
    445c:	86 e6       	ldi	r24, 0x66	; 102
    445e:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    4460:	90 93 99 00 	sts	0x0099, r25
    4464:	80 93 98 00 	sts	0x0098, r24
    4468:	39 ce       	rjmp	.-910    	; 0x40dc <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    446a:	b7 ff       	sbrs	r27, 7
    446c:	b4 cf       	rjmp	.-152    	; 0x43d6 <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    446e:	90 95       	com	r25
    4470:	81 95       	neg	r24
    4472:	9f 4f       	sbci	r25, 0xFF	; 255
    4474:	90 93 ab 00 	sts	0x00AB, r25
    4478:	80 93 aa 00 	sts	0x00AA, r24
    447c:	2f ce       	rjmp	.-930    	; 0x40dc <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    447e:	b7 ff       	sbrs	r27, 7
    4480:	ef cf       	rjmp	.-34     	; 0x4460 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    4482:	90 95       	com	r25
    4484:	81 95       	neg	r24
    4486:	9f 4f       	sbci	r25, 0xFF	; 255
    4488:	90 93 9b 00 	sts	0x009B, r25
    448c:	80 93 9a 00 	sts	0x009A, r24
    4490:	25 ce       	rjmp	.-950    	; 0x40dc <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    4492:	10 92 12 02 	sts	0x0212, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    4496:	80 91 80 00 	lds	r24, 0x0080
    449a:	8f 77       	andi	r24, 0x7F	; 127
    449c:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    44a0:	2d 98       	cbi	0x05, 5	; 5
    44a2:	1c ce       	rjmp	.-968    	; 0x40dc <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    44a4:	10 92 13 02 	sts	0x0213, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    44a8:	80 91 80 00 	lds	r24, 0x0080
    44ac:	8f 7d       	andi	r24, 0xDF	; 223
    44ae:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    44b2:	2e 98       	cbi	0x05, 6	; 5
    44b4:	13 ce       	rjmp	.-986    	; 0x40dc <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    44b6:	10 92 14 02 	sts	0x0214, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    44ba:	80 91 80 00 	lds	r24, 0x0080
    44be:	87 7f       	andi	r24, 0xF7	; 247
    44c0:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    44c4:	2f 98       	cbi	0x05, 7	; 5
    44c6:	0a ce       	rjmp	.-1004   	; 0x40dc <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    44c8:	b7 ff       	sbrs	r27, 7
    44ca:	85 cf       	rjmp	.-246    	; 0x43d6 <__vector_25+0x338>
						OCR4A = pwm_left;
    44cc:	90 95       	com	r25
    44ce:	81 95       	neg	r24
    44d0:	9f 4f       	sbci	r25, 0xFF	; 255
    44d2:	f5 ce       	rjmp	.-534    	; 0x42be <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    44d4:	b7 ff       	sbrs	r27, 7
    44d6:	c4 cf       	rjmp	.-120    	; 0x4460 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    44d8:	90 95       	com	r25
    44da:	81 95       	neg	r24
    44dc:	9f 4f       	sbci	r25, 0xFF	; 255
    44de:	1e cf       	rjmp	.-452    	; 0x431c <__vector_25+0x27e>

000044e0 <_fpadd_parts>:
    44e0:	a0 e0       	ldi	r26, 0x00	; 0
    44e2:	b0 e0       	ldi	r27, 0x00	; 0
    44e4:	e6 e7       	ldi	r30, 0x76	; 118
    44e6:	f2 e2       	ldi	r31, 0x22	; 34
    44e8:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <__prologue_saves__+0x4>
    44ec:	2c 01       	movw	r4, r24
    44ee:	5b 01       	movw	r10, r22
    44f0:	fa 01       	movw	r30, r20
    44f2:	dc 01       	movw	r26, r24
    44f4:	9c 91       	ld	r25, X
    44f6:	92 30       	cpi	r25, 0x02	; 2
    44f8:	08 f4       	brcc	.+2      	; 0x44fc <_fpadd_parts+0x1c>
    44fa:	32 c1       	rjmp	.+612    	; 0x4760 <_fpadd_parts+0x280>
    44fc:	eb 01       	movw	r28, r22
    44fe:	88 81       	ld	r24, Y
    4500:	82 30       	cpi	r24, 0x02	; 2
    4502:	08 f4       	brcc	.+2      	; 0x4506 <_fpadd_parts+0x26>
    4504:	2c c1       	rjmp	.+600    	; 0x475e <_fpadd_parts+0x27e>
    4506:	94 30       	cpi	r25, 0x04	; 4
    4508:	71 f4       	brne	.+28     	; 0x4526 <_fpadd_parts+0x46>
    450a:	84 30       	cpi	r24, 0x04	; 4
    450c:	09 f0       	breq	.+2      	; 0x4510 <_fpadd_parts+0x30>
    450e:	28 c1       	rjmp	.+592    	; 0x4760 <_fpadd_parts+0x280>
    4510:	f2 01       	movw	r30, r4
    4512:	91 81       	ldd	r25, Z+1	; 0x01
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	98 17       	cp	r25, r24
    4518:	09 f4       	brne	.+2      	; 0x451c <_fpadd_parts+0x3c>
    451a:	22 c1       	rjmp	.+580    	; 0x4760 <_fpadd_parts+0x280>
    451c:	1f e1       	ldi	r17, 0x1F	; 31
    451e:	41 2e       	mov	r4, r17
    4520:	12 e0       	ldi	r17, 0x02	; 2
    4522:	51 2e       	mov	r5, r17
    4524:	1d c1       	rjmp	.+570    	; 0x4760 <_fpadd_parts+0x280>
    4526:	84 30       	cpi	r24, 0x04	; 4
    4528:	09 f4       	brne	.+2      	; 0x452c <_fpadd_parts+0x4c>
    452a:	19 c1       	rjmp	.+562    	; 0x475e <_fpadd_parts+0x27e>
    452c:	82 30       	cpi	r24, 0x02	; 2
    452e:	a9 f4       	brne	.+42     	; 0x455a <_fpadd_parts+0x7a>
    4530:	92 30       	cpi	r25, 0x02	; 2
    4532:	09 f0       	breq	.+2      	; 0x4536 <_fpadd_parts+0x56>
    4534:	15 c1       	rjmp	.+554    	; 0x4760 <_fpadd_parts+0x280>
    4536:	ca 01       	movw	r24, r20
    4538:	a2 01       	movw	r20, r4
    453a:	28 e0       	ldi	r18, 0x08	; 8
    453c:	da 01       	movw	r26, r20
    453e:	0d 90       	ld	r0, X+
    4540:	ad 01       	movw	r20, r26
    4542:	ec 01       	movw	r28, r24
    4544:	09 92       	st	Y+, r0
    4546:	ce 01       	movw	r24, r28
    4548:	21 50       	subi	r18, 0x01	; 1
    454a:	c1 f7       	brne	.-16     	; 0x453c <_fpadd_parts+0x5c>
    454c:	e5 01       	movw	r28, r10
    454e:	89 81       	ldd	r24, Y+1	; 0x01
    4550:	e2 01       	movw	r28, r4
    4552:	99 81       	ldd	r25, Y+1	; 0x01
    4554:	89 23       	and	r24, r25
    4556:	81 83       	std	Z+1, r24	; 0x01
    4558:	00 c1       	rjmp	.+512    	; 0x475a <_fpadd_parts+0x27a>
    455a:	92 30       	cpi	r25, 0x02	; 2
    455c:	09 f4       	brne	.+2      	; 0x4560 <_fpadd_parts+0x80>
    455e:	ff c0       	rjmp	.+510    	; 0x475e <_fpadd_parts+0x27e>
    4560:	e2 01       	movw	r28, r4
    4562:	ca 80       	ldd	r12, Y+2	; 0x02
    4564:	db 80       	ldd	r13, Y+3	; 0x03
    4566:	eb 01       	movw	r28, r22
    4568:	8a 81       	ldd	r24, Y+2	; 0x02
    456a:	9b 81       	ldd	r25, Y+3	; 0x03
    456c:	e2 01       	movw	r28, r4
    456e:	2c 81       	ldd	r18, Y+4	; 0x04
    4570:	3d 81       	ldd	r19, Y+5	; 0x05
    4572:	4e 81       	ldd	r20, Y+6	; 0x06
    4574:	5f 81       	ldd	r21, Y+7	; 0x07
    4576:	eb 01       	movw	r28, r22
    4578:	ec 80       	ldd	r14, Y+4	; 0x04
    457a:	fd 80       	ldd	r15, Y+5	; 0x05
    457c:	0e 81       	ldd	r16, Y+6	; 0x06
    457e:	1f 81       	ldd	r17, Y+7	; 0x07
    4580:	b6 01       	movw	r22, r12
    4582:	68 1b       	sub	r22, r24
    4584:	79 0b       	sbc	r23, r25
    4586:	db 01       	movw	r26, r22
    4588:	77 ff       	sbrs	r23, 7
    458a:	03 c0       	rjmp	.+6      	; 0x4592 <_fpadd_parts+0xb2>
    458c:	70 95       	com	r23
    458e:	61 95       	neg	r22
    4590:	7f 4f       	sbci	r23, 0xFF	; 255
    4592:	60 32       	cpi	r22, 0x20	; 32
    4594:	71 05       	cpc	r23, r1
    4596:	0c f0       	brlt	.+2      	; 0x459a <_fpadd_parts+0xba>
    4598:	5d c0       	rjmp	.+186    	; 0x4654 <_fpadd_parts+0x174>
    459a:	1a 16       	cp	r1, r26
    459c:	1b 06       	cpc	r1, r27
    459e:	5c f5       	brge	.+86     	; 0x45f6 <_fpadd_parts+0x116>
    45a0:	66 24       	eor	r6, r6
    45a2:	77 24       	eor	r7, r7
    45a4:	43 01       	movw	r8, r6
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	a0 e0       	ldi	r26, 0x00	; 0
    45ac:	b0 e0       	ldi	r27, 0x00	; 0
    45ae:	06 2e       	mov	r0, r22
    45b0:	04 c0       	rjmp	.+8      	; 0x45ba <_fpadd_parts+0xda>
    45b2:	88 0f       	add	r24, r24
    45b4:	99 1f       	adc	r25, r25
    45b6:	aa 1f       	adc	r26, r26
    45b8:	bb 1f       	adc	r27, r27
    45ba:	0a 94       	dec	r0
    45bc:	d2 f7       	brpl	.-12     	; 0x45b2 <_fpadd_parts+0xd2>
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	a1 09       	sbc	r26, r1
    45c2:	b1 09       	sbc	r27, r1
    45c4:	8e 21       	and	r24, r14
    45c6:	9f 21       	and	r25, r15
    45c8:	a0 23       	and	r26, r16
    45ca:	b1 23       	and	r27, r17
    45cc:	00 97       	sbiw	r24, 0x00	; 0
    45ce:	a1 05       	cpc	r26, r1
    45d0:	b1 05       	cpc	r27, r1
    45d2:	29 f0       	breq	.+10     	; 0x45de <_fpadd_parts+0xfe>
    45d4:	b1 e0       	ldi	r27, 0x01	; 1
    45d6:	6b 2e       	mov	r6, r27
    45d8:	71 2c       	mov	r7, r1
    45da:	81 2c       	mov	r8, r1
    45dc:	91 2c       	mov	r9, r1
    45de:	04 c0       	rjmp	.+8      	; 0x45e8 <_fpadd_parts+0x108>
    45e0:	16 95       	lsr	r17
    45e2:	07 95       	ror	r16
    45e4:	f7 94       	ror	r15
    45e6:	e7 94       	ror	r14
    45e8:	6a 95       	dec	r22
    45ea:	d2 f7       	brpl	.-12     	; 0x45e0 <_fpadd_parts+0x100>
    45ec:	e6 28       	or	r14, r6
    45ee:	f7 28       	or	r15, r7
    45f0:	08 29       	or	r16, r8
    45f2:	19 29       	or	r17, r9
    45f4:	3b c0       	rjmp	.+118    	; 0x466c <_fpadd_parts+0x18c>
    45f6:	ab 2b       	or	r26, r27
    45f8:	c9 f1       	breq	.+114    	; 0x466c <_fpadd_parts+0x18c>
    45fa:	c6 0e       	add	r12, r22
    45fc:	d7 1e       	adc	r13, r23
    45fe:	66 24       	eor	r6, r6
    4600:	77 24       	eor	r7, r7
    4602:	43 01       	movw	r8, r6
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	a0 e0       	ldi	r26, 0x00	; 0
    460a:	b0 e0       	ldi	r27, 0x00	; 0
    460c:	06 2e       	mov	r0, r22
    460e:	04 c0       	rjmp	.+8      	; 0x4618 <_fpadd_parts+0x138>
    4610:	88 0f       	add	r24, r24
    4612:	99 1f       	adc	r25, r25
    4614:	aa 1f       	adc	r26, r26
    4616:	bb 1f       	adc	r27, r27
    4618:	0a 94       	dec	r0
    461a:	d2 f7       	brpl	.-12     	; 0x4610 <_fpadd_parts+0x130>
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	a1 09       	sbc	r26, r1
    4620:	b1 09       	sbc	r27, r1
    4622:	82 23       	and	r24, r18
    4624:	93 23       	and	r25, r19
    4626:	a4 23       	and	r26, r20
    4628:	b5 23       	and	r27, r21
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	a1 05       	cpc	r26, r1
    462e:	b1 05       	cpc	r27, r1
    4630:	29 f0       	breq	.+10     	; 0x463c <_fpadd_parts+0x15c>
    4632:	a1 e0       	ldi	r26, 0x01	; 1
    4634:	6a 2e       	mov	r6, r26
    4636:	71 2c       	mov	r7, r1
    4638:	81 2c       	mov	r8, r1
    463a:	91 2c       	mov	r9, r1
    463c:	04 c0       	rjmp	.+8      	; 0x4646 <_fpadd_parts+0x166>
    463e:	56 95       	lsr	r21
    4640:	47 95       	ror	r20
    4642:	37 95       	ror	r19
    4644:	27 95       	ror	r18
    4646:	6a 95       	dec	r22
    4648:	d2 f7       	brpl	.-12     	; 0x463e <_fpadd_parts+0x15e>
    464a:	26 29       	or	r18, r6
    464c:	37 29       	or	r19, r7
    464e:	48 29       	or	r20, r8
    4650:	59 29       	or	r21, r9
    4652:	0c c0       	rjmp	.+24     	; 0x466c <_fpadd_parts+0x18c>
    4654:	8c 15       	cp	r24, r12
    4656:	9d 05       	cpc	r25, r13
    4658:	34 f0       	brlt	.+12     	; 0x4666 <_fpadd_parts+0x186>
    465a:	6c 01       	movw	r12, r24
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e0       	ldi	r20, 0x00	; 0
    4662:	50 e0       	ldi	r21, 0x00	; 0
    4664:	03 c0       	rjmp	.+6      	; 0x466c <_fpadd_parts+0x18c>
    4666:	ee 24       	eor	r14, r14
    4668:	ff 24       	eor	r15, r15
    466a:	87 01       	movw	r16, r14
    466c:	e2 01       	movw	r28, r4
    466e:	99 81       	ldd	r25, Y+1	; 0x01
    4670:	e5 01       	movw	r28, r10
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	98 17       	cp	r25, r24
    4676:	09 f4       	brne	.+2      	; 0x467a <_fpadd_parts+0x19a>
    4678:	43 c0       	rjmp	.+134    	; 0x4700 <_fpadd_parts+0x220>
    467a:	99 23       	and	r25, r25
    467c:	39 f0       	breq	.+14     	; 0x468c <_fpadd_parts+0x1ac>
    467e:	e2 1a       	sub	r14, r18
    4680:	f3 0a       	sbc	r15, r19
    4682:	04 0b       	sbc	r16, r20
    4684:	15 0b       	sbc	r17, r21
    4686:	a8 01       	movw	r20, r16
    4688:	97 01       	movw	r18, r14
    468a:	04 c0       	rjmp	.+8      	; 0x4694 <_fpadd_parts+0x1b4>
    468c:	2e 19       	sub	r18, r14
    468e:	3f 09       	sbc	r19, r15
    4690:	40 0b       	sbc	r20, r16
    4692:	51 0b       	sbc	r21, r17
    4694:	57 fd       	sbrc	r21, 7
    4696:	08 c0       	rjmp	.+16     	; 0x46a8 <_fpadd_parts+0x1c8>
    4698:	11 82       	std	Z+1, r1	; 0x01
    469a:	d3 82       	std	Z+3, r13	; 0x03
    469c:	c2 82       	std	Z+2, r12	; 0x02
    469e:	24 83       	std	Z+4, r18	; 0x04
    46a0:	35 83       	std	Z+5, r19	; 0x05
    46a2:	46 83       	std	Z+6, r20	; 0x06
    46a4:	57 83       	std	Z+7, r21	; 0x07
    46a6:	1d c0       	rjmp	.+58     	; 0x46e2 <_fpadd_parts+0x202>
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	81 83       	std	Z+1, r24	; 0x01
    46ac:	d3 82       	std	Z+3, r13	; 0x03
    46ae:	c2 82       	std	Z+2, r12	; 0x02
    46b0:	88 27       	eor	r24, r24
    46b2:	99 27       	eor	r25, r25
    46b4:	dc 01       	movw	r26, r24
    46b6:	82 1b       	sub	r24, r18
    46b8:	93 0b       	sbc	r25, r19
    46ba:	a4 0b       	sbc	r26, r20
    46bc:	b5 0b       	sbc	r27, r21
    46be:	84 83       	std	Z+4, r24	; 0x04
    46c0:	95 83       	std	Z+5, r25	; 0x05
    46c2:	a6 83       	std	Z+6, r26	; 0x06
    46c4:	b7 83       	std	Z+7, r27	; 0x07
    46c6:	0d c0       	rjmp	.+26     	; 0x46e2 <_fpadd_parts+0x202>
    46c8:	22 0f       	add	r18, r18
    46ca:	33 1f       	adc	r19, r19
    46cc:	44 1f       	adc	r20, r20
    46ce:	55 1f       	adc	r21, r21
    46d0:	24 83       	std	Z+4, r18	; 0x04
    46d2:	35 83       	std	Z+5, r19	; 0x05
    46d4:	46 83       	std	Z+6, r20	; 0x06
    46d6:	57 83       	std	Z+7, r21	; 0x07
    46d8:	82 81       	ldd	r24, Z+2	; 0x02
    46da:	93 81       	ldd	r25, Z+3	; 0x03
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	93 83       	std	Z+3, r25	; 0x03
    46e0:	82 83       	std	Z+2, r24	; 0x02
    46e2:	24 81       	ldd	r18, Z+4	; 0x04
    46e4:	35 81       	ldd	r19, Z+5	; 0x05
    46e6:	46 81       	ldd	r20, Z+6	; 0x06
    46e8:	57 81       	ldd	r21, Z+7	; 0x07
    46ea:	da 01       	movw	r26, r20
    46ec:	c9 01       	movw	r24, r18
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	a1 09       	sbc	r26, r1
    46f2:	b1 09       	sbc	r27, r1
    46f4:	8f 5f       	subi	r24, 0xFF	; 255
    46f6:	9f 4f       	sbci	r25, 0xFF	; 255
    46f8:	af 4f       	sbci	r26, 0xFF	; 255
    46fa:	bf 43       	sbci	r27, 0x3F	; 63
    46fc:	28 f3       	brcs	.-54     	; 0x46c8 <_fpadd_parts+0x1e8>
    46fe:	0b c0       	rjmp	.+22     	; 0x4716 <_fpadd_parts+0x236>
    4700:	91 83       	std	Z+1, r25	; 0x01
    4702:	d3 82       	std	Z+3, r13	; 0x03
    4704:	c2 82       	std	Z+2, r12	; 0x02
    4706:	2e 0d       	add	r18, r14
    4708:	3f 1d       	adc	r19, r15
    470a:	40 1f       	adc	r20, r16
    470c:	51 1f       	adc	r21, r17
    470e:	24 83       	std	Z+4, r18	; 0x04
    4710:	35 83       	std	Z+5, r19	; 0x05
    4712:	46 83       	std	Z+6, r20	; 0x06
    4714:	57 83       	std	Z+7, r21	; 0x07
    4716:	83 e0       	ldi	r24, 0x03	; 3
    4718:	80 83       	st	Z, r24
    471a:	24 81       	ldd	r18, Z+4	; 0x04
    471c:	35 81       	ldd	r19, Z+5	; 0x05
    471e:	46 81       	ldd	r20, Z+6	; 0x06
    4720:	57 81       	ldd	r21, Z+7	; 0x07
    4722:	55 23       	and	r21, r21
    4724:	d4 f4       	brge	.+52     	; 0x475a <_fpadd_parts+0x27a>
    4726:	c9 01       	movw	r24, r18
    4728:	aa 27       	eor	r26, r26
    472a:	97 fd       	sbrc	r25, 7
    472c:	a0 95       	com	r26
    472e:	ba 2f       	mov	r27, r26
    4730:	81 70       	andi	r24, 0x01	; 1
    4732:	90 70       	andi	r25, 0x00	; 0
    4734:	a0 70       	andi	r26, 0x00	; 0
    4736:	b0 70       	andi	r27, 0x00	; 0
    4738:	56 95       	lsr	r21
    473a:	47 95       	ror	r20
    473c:	37 95       	ror	r19
    473e:	27 95       	ror	r18
    4740:	82 2b       	or	r24, r18
    4742:	93 2b       	or	r25, r19
    4744:	a4 2b       	or	r26, r20
    4746:	b5 2b       	or	r27, r21
    4748:	84 83       	std	Z+4, r24	; 0x04
    474a:	95 83       	std	Z+5, r25	; 0x05
    474c:	a6 83       	std	Z+6, r26	; 0x06
    474e:	b7 83       	std	Z+7, r27	; 0x07
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	93 83       	std	Z+3, r25	; 0x03
    4758:	82 83       	std	Z+2, r24	; 0x02
    475a:	2f 01       	movw	r4, r30
    475c:	01 c0       	rjmp	.+2      	; 0x4760 <_fpadd_parts+0x280>
    475e:	25 01       	movw	r4, r10
    4760:	c2 01       	movw	r24, r4
    4762:	e0 e1       	ldi	r30, 0x10	; 16
    4764:	cd b7       	in	r28, 0x3d	; 61
    4766:	de b7       	in	r29, 0x3e	; 62
    4768:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <__epilogue_restores__+0x4>

0000476c <__subsf3>:
    476c:	a0 e2       	ldi	r26, 0x20	; 32
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	ec eb       	ldi	r30, 0xBC	; 188
    4772:	f3 e2       	ldi	r31, 0x23	; 35
    4774:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__prologue_saves__+0x18>
    4778:	69 83       	std	Y+1, r22	; 0x01
    477a:	7a 83       	std	Y+2, r23	; 0x02
    477c:	8b 83       	std	Y+3, r24	; 0x03
    477e:	9c 83       	std	Y+4, r25	; 0x04
    4780:	2d 83       	std	Y+5, r18	; 0x05
    4782:	3e 83       	std	Y+6, r19	; 0x06
    4784:	4f 83       	std	Y+7, r20	; 0x07
    4786:	58 87       	std	Y+8, r21	; 0x08
    4788:	09 e0       	ldi	r16, 0x09	; 9
    478a:	e0 2e       	mov	r14, r16
    478c:	f1 2c       	mov	r15, r1
    478e:	ec 0e       	add	r14, r28
    4790:	fd 1e       	adc	r15, r29
    4792:	b7 01       	movw	r22, r14
    4794:	ce 01       	movw	r24, r28
    4796:	01 96       	adiw	r24, 0x01	; 1
    4798:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    479c:	8e 01       	movw	r16, r28
    479e:	0f 5e       	subi	r16, 0xEF	; 239
    47a0:	1f 4f       	sbci	r17, 0xFF	; 255
    47a2:	b8 01       	movw	r22, r16
    47a4:	ce 01       	movw	r24, r28
    47a6:	05 96       	adiw	r24, 0x05	; 5
    47a8:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    47ac:	8a 89       	ldd	r24, Y+18	; 0x12
    47ae:	91 e0       	ldi	r25, 0x01	; 1
    47b0:	89 27       	eor	r24, r25
    47b2:	8a 8b       	std	Y+18, r24	; 0x12
    47b4:	ae 01       	movw	r20, r28
    47b6:	47 5e       	subi	r20, 0xE7	; 231
    47b8:	5f 4f       	sbci	r21, 0xFF	; 255
    47ba:	b8 01       	movw	r22, r16
    47bc:	c7 01       	movw	r24, r14
    47be:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_fpadd_parts>
    47c2:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__pack_f>
    47c6:	e6 e0       	ldi	r30, 0x06	; 6
    47c8:	a0 96       	adiw	r28, 0x20	; 32
    47ca:	0c 94 b0 27 	jmp	0x4f60	; 0x4f60 <__epilogue_restores__+0x18>

000047ce <__addsf3>:
    47ce:	a0 e2       	ldi	r26, 0x20	; 32
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	ed ee       	ldi	r30, 0xED	; 237
    47d4:	f3 e2       	ldi	r31, 0x23	; 35
    47d6:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__prologue_saves__+0x18>
    47da:	69 83       	std	Y+1, r22	; 0x01
    47dc:	7a 83       	std	Y+2, r23	; 0x02
    47de:	8b 83       	std	Y+3, r24	; 0x03
    47e0:	9c 83       	std	Y+4, r25	; 0x04
    47e2:	2d 83       	std	Y+5, r18	; 0x05
    47e4:	3e 83       	std	Y+6, r19	; 0x06
    47e6:	4f 83       	std	Y+7, r20	; 0x07
    47e8:	58 87       	std	Y+8, r21	; 0x08
    47ea:	89 e0       	ldi	r24, 0x09	; 9
    47ec:	e8 2e       	mov	r14, r24
    47ee:	f1 2c       	mov	r15, r1
    47f0:	ec 0e       	add	r14, r28
    47f2:	fd 1e       	adc	r15, r29
    47f4:	b7 01       	movw	r22, r14
    47f6:	ce 01       	movw	r24, r28
    47f8:	01 96       	adiw	r24, 0x01	; 1
    47fa:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    47fe:	8e 01       	movw	r16, r28
    4800:	0f 5e       	subi	r16, 0xEF	; 239
    4802:	1f 4f       	sbci	r17, 0xFF	; 255
    4804:	b8 01       	movw	r22, r16
    4806:	ce 01       	movw	r24, r28
    4808:	05 96       	adiw	r24, 0x05	; 5
    480a:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    480e:	ae 01       	movw	r20, r28
    4810:	47 5e       	subi	r20, 0xE7	; 231
    4812:	5f 4f       	sbci	r21, 0xFF	; 255
    4814:	b8 01       	movw	r22, r16
    4816:	c7 01       	movw	r24, r14
    4818:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_fpadd_parts>
    481c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__pack_f>
    4820:	e6 e0       	ldi	r30, 0x06	; 6
    4822:	a0 96       	adiw	r28, 0x20	; 32
    4824:	0c 94 b0 27 	jmp	0x4f60	; 0x4f60 <__epilogue_restores__+0x18>

00004828 <__mulsf3>:
    4828:	a0 e2       	ldi	r26, 0x20	; 32
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	ea e1       	ldi	r30, 0x1A	; 26
    482e:	f4 e2       	ldi	r31, 0x24	; 36
    4830:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <__prologue_saves__+0x4>
    4834:	69 83       	std	Y+1, r22	; 0x01
    4836:	7a 83       	std	Y+2, r23	; 0x02
    4838:	8b 83       	std	Y+3, r24	; 0x03
    483a:	9c 83       	std	Y+4, r25	; 0x04
    483c:	2d 83       	std	Y+5, r18	; 0x05
    483e:	3e 83       	std	Y+6, r19	; 0x06
    4840:	4f 83       	std	Y+7, r20	; 0x07
    4842:	58 87       	std	Y+8, r21	; 0x08
    4844:	99 e0       	ldi	r25, 0x09	; 9
    4846:	e9 2e       	mov	r14, r25
    4848:	f1 2c       	mov	r15, r1
    484a:	ec 0e       	add	r14, r28
    484c:	fd 1e       	adc	r15, r29
    484e:	b7 01       	movw	r22, r14
    4850:	ce 01       	movw	r24, r28
    4852:	01 96       	adiw	r24, 0x01	; 1
    4854:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    4858:	8e 01       	movw	r16, r28
    485a:	0f 5e       	subi	r16, 0xEF	; 239
    485c:	1f 4f       	sbci	r17, 0xFF	; 255
    485e:	b8 01       	movw	r22, r16
    4860:	ce 01       	movw	r24, r28
    4862:	05 96       	adiw	r24, 0x05	; 5
    4864:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    4868:	99 85       	ldd	r25, Y+9	; 0x09
    486a:	92 30       	cpi	r25, 0x02	; 2
    486c:	88 f0       	brcs	.+34     	; 0x4890 <__mulsf3+0x68>
    486e:	89 89       	ldd	r24, Y+17	; 0x11
    4870:	82 30       	cpi	r24, 0x02	; 2
    4872:	c0 f0       	brcs	.+48     	; 0x48a4 <__mulsf3+0x7c>
    4874:	94 30       	cpi	r25, 0x04	; 4
    4876:	19 f4       	brne	.+6      	; 0x487e <__mulsf3+0x56>
    4878:	82 30       	cpi	r24, 0x02	; 2
    487a:	29 f0       	breq	.+10     	; 0x4886 <__mulsf3+0x5e>
    487c:	09 c0       	rjmp	.+18     	; 0x4890 <__mulsf3+0x68>
    487e:	84 30       	cpi	r24, 0x04	; 4
    4880:	29 f4       	brne	.+10     	; 0x488c <__mulsf3+0x64>
    4882:	92 30       	cpi	r25, 0x02	; 2
    4884:	79 f4       	brne	.+30     	; 0x48a4 <__mulsf3+0x7c>
    4886:	6f e1       	ldi	r22, 0x1F	; 31
    4888:	72 e0       	ldi	r23, 0x02	; 2
    488a:	c6 c0       	rjmp	.+396    	; 0x4a18 <__mulsf3+0x1f0>
    488c:	92 30       	cpi	r25, 0x02	; 2
    488e:	41 f4       	brne	.+16     	; 0x48a0 <__mulsf3+0x78>
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	9a 85       	ldd	r25, Y+10	; 0x0a
    4894:	8a 89       	ldd	r24, Y+18	; 0x12
    4896:	98 13       	cpse	r25, r24
    4898:	21 e0       	ldi	r18, 0x01	; 1
    489a:	2a 87       	std	Y+10, r18	; 0x0a
    489c:	b7 01       	movw	r22, r14
    489e:	bc c0       	rjmp	.+376    	; 0x4a18 <__mulsf3+0x1f0>
    48a0:	82 30       	cpi	r24, 0x02	; 2
    48a2:	41 f4       	brne	.+16     	; 0x48b4 <__mulsf3+0x8c>
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a8:	8a 89       	ldd	r24, Y+18	; 0x12
    48aa:	98 13       	cpse	r25, r24
    48ac:	21 e0       	ldi	r18, 0x01	; 1
    48ae:	2a 8b       	std	Y+18, r18	; 0x12
    48b0:	b8 01       	movw	r22, r16
    48b2:	b2 c0       	rjmp	.+356    	; 0x4a18 <__mulsf3+0x1f0>
    48b4:	cd 84       	ldd	r12, Y+13	; 0x0d
    48b6:	de 84       	ldd	r13, Y+14	; 0x0e
    48b8:	ef 84       	ldd	r14, Y+15	; 0x0f
    48ba:	f8 88       	ldd	r15, Y+16	; 0x10
    48bc:	0d 89       	ldd	r16, Y+21	; 0x15
    48be:	1e 89       	ldd	r17, Y+22	; 0x16
    48c0:	2f 89       	ldd	r18, Y+23	; 0x17
    48c2:	38 8d       	ldd	r19, Y+24	; 0x18
    48c4:	88 24       	eor	r8, r8
    48c6:	99 24       	eor	r9, r9
    48c8:	54 01       	movw	r10, r8
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	60 e0       	ldi	r22, 0x00	; 0
    48d0:	70 e0       	ldi	r23, 0x00	; 0
    48d2:	44 24       	eor	r4, r4
    48d4:	55 24       	eor	r5, r5
    48d6:	32 01       	movw	r6, r4
    48d8:	e0 e0       	ldi	r30, 0x00	; 0
    48da:	f0 e0       	ldi	r31, 0x00	; 0
    48dc:	c6 01       	movw	r24, r12
    48de:	81 70       	andi	r24, 0x01	; 1
    48e0:	90 70       	andi	r25, 0x00	; 0
    48e2:	89 2b       	or	r24, r25
    48e4:	d9 f0       	breq	.+54     	; 0x491c <__mulsf3+0xf4>
    48e6:	80 0e       	add	r8, r16
    48e8:	91 1e       	adc	r9, r17
    48ea:	a2 1e       	adc	r10, r18
    48ec:	b3 1e       	adc	r11, r19
    48ee:	db 01       	movw	r26, r22
    48f0:	ca 01       	movw	r24, r20
    48f2:	84 0d       	add	r24, r4
    48f4:	95 1d       	adc	r25, r5
    48f6:	a6 1d       	adc	r26, r6
    48f8:	b7 1d       	adc	r27, r7
    48fa:	40 e0       	ldi	r20, 0x00	; 0
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	60 e0       	ldi	r22, 0x00	; 0
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	80 16       	cp	r8, r16
    4904:	91 06       	cpc	r9, r17
    4906:	a2 06       	cpc	r10, r18
    4908:	b3 06       	cpc	r11, r19
    490a:	20 f4       	brcc	.+8      	; 0x4914 <__mulsf3+0xec>
    490c:	41 e0       	ldi	r20, 0x01	; 1
    490e:	50 e0       	ldi	r21, 0x00	; 0
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	48 0f       	add	r20, r24
    4916:	59 1f       	adc	r21, r25
    4918:	6a 1f       	adc	r22, r26
    491a:	7b 1f       	adc	r23, r27
    491c:	44 0c       	add	r4, r4
    491e:	55 1c       	adc	r5, r5
    4920:	66 1c       	adc	r6, r6
    4922:	77 1c       	adc	r7, r7
    4924:	37 ff       	sbrs	r19, 7
    4926:	08 c0       	rjmp	.+16     	; 0x4938 <__mulsf3+0x110>
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	a0 e0       	ldi	r26, 0x00	; 0
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	48 2a       	or	r4, r24
    4932:	59 2a       	or	r5, r25
    4934:	6a 2a       	or	r6, r26
    4936:	7b 2a       	or	r7, r27
    4938:	31 96       	adiw	r30, 0x01	; 1
    493a:	e0 32       	cpi	r30, 0x20	; 32
    493c:	f1 05       	cpc	r31, r1
    493e:	49 f0       	breq	.+18     	; 0x4952 <__mulsf3+0x12a>
    4940:	00 0f       	add	r16, r16
    4942:	11 1f       	adc	r17, r17
    4944:	22 1f       	adc	r18, r18
    4946:	33 1f       	adc	r19, r19
    4948:	f6 94       	lsr	r15
    494a:	e7 94       	ror	r14
    494c:	d7 94       	ror	r13
    494e:	c7 94       	ror	r12
    4950:	c5 cf       	rjmp	.-118    	; 0x48dc <__mulsf3+0xb4>
    4952:	8b 89       	ldd	r24, Y+19	; 0x13
    4954:	9c 89       	ldd	r25, Y+20	; 0x14
    4956:	2b 85       	ldd	r18, Y+11	; 0x0b
    4958:	3c 85       	ldd	r19, Y+12	; 0x0c
    495a:	82 0f       	add	r24, r18
    495c:	93 1f       	adc	r25, r19
    495e:	02 96       	adiw	r24, 0x02	; 2
    4960:	9c 8f       	std	Y+28, r25	; 0x1c
    4962:	8b 8f       	std	Y+27, r24	; 0x1b
    4964:	1a 8e       	std	Y+26, r1	; 0x1a
    4966:	9a 85       	ldd	r25, Y+10	; 0x0a
    4968:	8a 89       	ldd	r24, Y+18	; 0x12
    496a:	98 17       	cp	r25, r24
    496c:	11 f0       	breq	.+4      	; 0x4972 <__mulsf3+0x14a>
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	8a 8f       	std	Y+26, r24	; 0x1a
    4972:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4974:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4976:	17 c0       	rjmp	.+46     	; 0x49a6 <__mulsf3+0x17e>
    4978:	ca 01       	movw	r24, r20
    497a:	81 70       	andi	r24, 0x01	; 1
    497c:	90 70       	andi	r25, 0x00	; 0
    497e:	89 2b       	or	r24, r25
    4980:	61 f0       	breq	.+24     	; 0x499a <__mulsf3+0x172>
    4982:	b6 94       	lsr	r11
    4984:	a7 94       	ror	r10
    4986:	97 94       	ror	r9
    4988:	87 94       	ror	r8
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	a0 e0       	ldi	r26, 0x00	; 0
    4990:	b0 e8       	ldi	r27, 0x80	; 128
    4992:	88 2a       	or	r8, r24
    4994:	99 2a       	or	r9, r25
    4996:	aa 2a       	or	r10, r26
    4998:	bb 2a       	or	r11, r27
    499a:	76 95       	lsr	r23
    499c:	67 95       	ror	r22
    499e:	57 95       	ror	r21
    49a0:	47 95       	ror	r20
    49a2:	2f 5f       	subi	r18, 0xFF	; 255
    49a4:	3f 4f       	sbci	r19, 0xFF	; 255
    49a6:	77 fd       	sbrc	r23, 7
    49a8:	e7 cf       	rjmp	.-50     	; 0x4978 <__mulsf3+0x150>
    49aa:	c9 01       	movw	r24, r18
    49ac:	0b c0       	rjmp	.+22     	; 0x49c4 <__mulsf3+0x19c>
    49ae:	44 0f       	add	r20, r20
    49b0:	55 1f       	adc	r21, r21
    49b2:	66 1f       	adc	r22, r22
    49b4:	77 1f       	adc	r23, r23
    49b6:	b7 fc       	sbrc	r11, 7
    49b8:	41 60       	ori	r20, 0x01	; 1
    49ba:	88 0c       	add	r8, r8
    49bc:	99 1c       	adc	r9, r9
    49be:	aa 1c       	adc	r10, r10
    49c0:	bb 1c       	adc	r11, r11
    49c2:	01 97       	sbiw	r24, 0x01	; 1
    49c4:	40 30       	cpi	r20, 0x00	; 0
    49c6:	a0 e0       	ldi	r26, 0x00	; 0
    49c8:	5a 07       	cpc	r21, r26
    49ca:	a0 e0       	ldi	r26, 0x00	; 0
    49cc:	6a 07       	cpc	r22, r26
    49ce:	a0 e4       	ldi	r26, 0x40	; 64
    49d0:	7a 07       	cpc	r23, r26
    49d2:	68 f3       	brcs	.-38     	; 0x49ae <__mulsf3+0x186>
    49d4:	9c 8f       	std	Y+28, r25	; 0x1c
    49d6:	8b 8f       	std	Y+27, r24	; 0x1b
    49d8:	db 01       	movw	r26, r22
    49da:	ca 01       	movw	r24, r20
    49dc:	8f 77       	andi	r24, 0x7F	; 127
    49de:	90 70       	andi	r25, 0x00	; 0
    49e0:	a0 70       	andi	r26, 0x00	; 0
    49e2:	b0 70       	andi	r27, 0x00	; 0
    49e4:	80 34       	cpi	r24, 0x40	; 64
    49e6:	91 05       	cpc	r25, r1
    49e8:	a1 05       	cpc	r26, r1
    49ea:	b1 05       	cpc	r27, r1
    49ec:	61 f4       	brne	.+24     	; 0x4a06 <__mulsf3+0x1de>
    49ee:	47 fd       	sbrc	r20, 7
    49f0:	0a c0       	rjmp	.+20     	; 0x4a06 <__mulsf3+0x1de>
    49f2:	81 14       	cp	r8, r1
    49f4:	91 04       	cpc	r9, r1
    49f6:	a1 04       	cpc	r10, r1
    49f8:	b1 04       	cpc	r11, r1
    49fa:	29 f0       	breq	.+10     	; 0x4a06 <__mulsf3+0x1de>
    49fc:	40 5c       	subi	r20, 0xC0	; 192
    49fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4a00:	6f 4f       	sbci	r22, 0xFF	; 255
    4a02:	7f 4f       	sbci	r23, 0xFF	; 255
    4a04:	40 78       	andi	r20, 0x80	; 128
    4a06:	4d 8f       	std	Y+29, r20	; 0x1d
    4a08:	5e 8f       	std	Y+30, r21	; 0x1e
    4a0a:	6f 8f       	std	Y+31, r22	; 0x1f
    4a0c:	78 a3       	std	Y+32, r23	; 0x20
    4a0e:	83 e0       	ldi	r24, 0x03	; 3
    4a10:	89 8f       	std	Y+25, r24	; 0x19
    4a12:	be 01       	movw	r22, r28
    4a14:	67 5e       	subi	r22, 0xE7	; 231
    4a16:	7f 4f       	sbci	r23, 0xFF	; 255
    4a18:	cb 01       	movw	r24, r22
    4a1a:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__pack_f>
    4a1e:	e0 e1       	ldi	r30, 0x10	; 16
    4a20:	a0 96       	adiw	r28, 0x20	; 32
    4a22:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <__epilogue_restores__+0x4>

00004a26 <__floatsisf>:
    4a26:	a8 e0       	ldi	r26, 0x08	; 8
    4a28:	b0 e0       	ldi	r27, 0x00	; 0
    4a2a:	e9 e1       	ldi	r30, 0x19	; 25
    4a2c:	f5 e2       	ldi	r31, 0x25	; 37
    4a2e:	0c 94 91 27 	jmp	0x4f22	; 0x4f22 <__prologue_saves__+0x12>
    4a32:	9b 01       	movw	r18, r22
    4a34:	ac 01       	movw	r20, r24
    4a36:	83 e0       	ldi	r24, 0x03	; 3
    4a38:	89 83       	std	Y+1, r24	; 0x01
    4a3a:	da 01       	movw	r26, r20
    4a3c:	c9 01       	movw	r24, r18
    4a3e:	88 27       	eor	r24, r24
    4a40:	b7 fd       	sbrc	r27, 7
    4a42:	83 95       	inc	r24
    4a44:	99 27       	eor	r25, r25
    4a46:	aa 27       	eor	r26, r26
    4a48:	bb 27       	eor	r27, r27
    4a4a:	b8 2e       	mov	r11, r24
    4a4c:	21 15       	cp	r18, r1
    4a4e:	31 05       	cpc	r19, r1
    4a50:	41 05       	cpc	r20, r1
    4a52:	51 05       	cpc	r21, r1
    4a54:	19 f4       	brne	.+6      	; 0x4a5c <__floatsisf+0x36>
    4a56:	82 e0       	ldi	r24, 0x02	; 2
    4a58:	89 83       	std	Y+1, r24	; 0x01
    4a5a:	3a c0       	rjmp	.+116    	; 0x4ad0 <__floatsisf+0xaa>
    4a5c:	88 23       	and	r24, r24
    4a5e:	a9 f0       	breq	.+42     	; 0x4a8a <__floatsisf+0x64>
    4a60:	20 30       	cpi	r18, 0x00	; 0
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	38 07       	cpc	r19, r24
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	48 07       	cpc	r20, r24
    4a6a:	80 e8       	ldi	r24, 0x80	; 128
    4a6c:	58 07       	cpc	r21, r24
    4a6e:	29 f4       	brne	.+10     	; 0x4a7a <__floatsisf+0x54>
    4a70:	60 e0       	ldi	r22, 0x00	; 0
    4a72:	70 e0       	ldi	r23, 0x00	; 0
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	9f ec       	ldi	r25, 0xCF	; 207
    4a78:	30 c0       	rjmp	.+96     	; 0x4ada <__floatsisf+0xb4>
    4a7a:	ee 24       	eor	r14, r14
    4a7c:	ff 24       	eor	r15, r15
    4a7e:	87 01       	movw	r16, r14
    4a80:	e2 1a       	sub	r14, r18
    4a82:	f3 0a       	sbc	r15, r19
    4a84:	04 0b       	sbc	r16, r20
    4a86:	15 0b       	sbc	r17, r21
    4a88:	02 c0       	rjmp	.+4      	; 0x4a8e <__floatsisf+0x68>
    4a8a:	79 01       	movw	r14, r18
    4a8c:	8a 01       	movw	r16, r20
    4a8e:	8e e1       	ldi	r24, 0x1E	; 30
    4a90:	c8 2e       	mov	r12, r24
    4a92:	d1 2c       	mov	r13, r1
    4a94:	dc 82       	std	Y+4, r13	; 0x04
    4a96:	cb 82       	std	Y+3, r12	; 0x03
    4a98:	ed 82       	std	Y+5, r14	; 0x05
    4a9a:	fe 82       	std	Y+6, r15	; 0x06
    4a9c:	0f 83       	std	Y+7, r16	; 0x07
    4a9e:	18 87       	std	Y+8, r17	; 0x08
    4aa0:	c8 01       	movw	r24, r16
    4aa2:	b7 01       	movw	r22, r14
    4aa4:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <__clzsi2>
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	18 16       	cp	r1, r24
    4aac:	19 06       	cpc	r1, r25
    4aae:	84 f4       	brge	.+32     	; 0x4ad0 <__floatsisf+0xaa>
    4ab0:	08 2e       	mov	r0, r24
    4ab2:	04 c0       	rjmp	.+8      	; 0x4abc <__floatsisf+0x96>
    4ab4:	ee 0c       	add	r14, r14
    4ab6:	ff 1c       	adc	r15, r15
    4ab8:	00 1f       	adc	r16, r16
    4aba:	11 1f       	adc	r17, r17
    4abc:	0a 94       	dec	r0
    4abe:	d2 f7       	brpl	.-12     	; 0x4ab4 <__floatsisf+0x8e>
    4ac0:	ed 82       	std	Y+5, r14	; 0x05
    4ac2:	fe 82       	std	Y+6, r15	; 0x06
    4ac4:	0f 83       	std	Y+7, r16	; 0x07
    4ac6:	18 87       	std	Y+8, r17	; 0x08
    4ac8:	c8 1a       	sub	r12, r24
    4aca:	d9 0a       	sbc	r13, r25
    4acc:	dc 82       	std	Y+4, r13	; 0x04
    4ace:	cb 82       	std	Y+3, r12	; 0x03
    4ad0:	ba 82       	std	Y+2, r11	; 0x02
    4ad2:	ce 01       	movw	r24, r28
    4ad4:	01 96       	adiw	r24, 0x01	; 1
    4ad6:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__pack_f>
    4ada:	e9 e0       	ldi	r30, 0x09	; 9
    4adc:	28 96       	adiw	r28, 0x08	; 8
    4ade:	0c 94 ad 27 	jmp	0x4f5a	; 0x4f5a <__epilogue_restores__+0x12>

00004ae2 <__fixsfsi>:
    4ae2:	ac e0       	ldi	r26, 0x0C	; 12
    4ae4:	b0 e0       	ldi	r27, 0x00	; 0
    4ae6:	e7 e7       	ldi	r30, 0x77	; 119
    4ae8:	f5 e2       	ldi	r31, 0x25	; 37
    4aea:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <__prologue_saves__+0x20>
    4aee:	69 83       	std	Y+1, r22	; 0x01
    4af0:	7a 83       	std	Y+2, r23	; 0x02
    4af2:	8b 83       	std	Y+3, r24	; 0x03
    4af4:	9c 83       	std	Y+4, r25	; 0x04
    4af6:	be 01       	movw	r22, r28
    4af8:	6b 5f       	subi	r22, 0xFB	; 251
    4afa:	7f 4f       	sbci	r23, 0xFF	; 255
    4afc:	ce 01       	movw	r24, r28
    4afe:	01 96       	adiw	r24, 0x01	; 1
    4b00:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__unpack_f>
    4b04:	8d 81       	ldd	r24, Y+5	; 0x05
    4b06:	82 30       	cpi	r24, 0x02	; 2
    4b08:	a9 f1       	breq	.+106    	; 0x4b74 <__fixsfsi+0x92>
    4b0a:	82 30       	cpi	r24, 0x02	; 2
    4b0c:	98 f1       	brcs	.+102    	; 0x4b74 <__fixsfsi+0x92>
    4b0e:	84 30       	cpi	r24, 0x04	; 4
    4b10:	21 f4       	brne	.+8      	; 0x4b1a <__fixsfsi+0x38>
    4b12:	8e 81       	ldd	r24, Y+6	; 0x06
    4b14:	88 23       	and	r24, r24
    4b16:	59 f4       	brne	.+22     	; 0x4b2e <__fixsfsi+0x4c>
    4b18:	0f c0       	rjmp	.+30     	; 0x4b38 <__fixsfsi+0x56>
    4b1a:	2f 81       	ldd	r18, Y+7	; 0x07
    4b1c:	38 85       	ldd	r19, Y+8	; 0x08
    4b1e:	37 fd       	sbrc	r19, 7
    4b20:	29 c0       	rjmp	.+82     	; 0x4b74 <__fixsfsi+0x92>
    4b22:	6e 81       	ldd	r22, Y+6	; 0x06
    4b24:	2f 31       	cpi	r18, 0x1F	; 31
    4b26:	31 05       	cpc	r19, r1
    4b28:	64 f0       	brlt	.+24     	; 0x4b42 <__fixsfsi+0x60>
    4b2a:	66 23       	and	r22, r22
    4b2c:	29 f0       	breq	.+10     	; 0x4b38 <__fixsfsi+0x56>
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	40 e0       	ldi	r20, 0x00	; 0
    4b34:	50 e8       	ldi	r21, 0x80	; 128
    4b36:	22 c0       	rjmp	.+68     	; 0x4b7c <__fixsfsi+0x9a>
    4b38:	2f ef       	ldi	r18, 0xFF	; 255
    4b3a:	3f ef       	ldi	r19, 0xFF	; 255
    4b3c:	4f ef       	ldi	r20, 0xFF	; 255
    4b3e:	5f e7       	ldi	r21, 0x7F	; 127
    4b40:	1d c0       	rjmp	.+58     	; 0x4b7c <__fixsfsi+0x9a>
    4b42:	8e e1       	ldi	r24, 0x1E	; 30
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	82 1b       	sub	r24, r18
    4b48:	93 0b       	sbc	r25, r19
    4b4a:	29 85       	ldd	r18, Y+9	; 0x09
    4b4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b50:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b52:	04 c0       	rjmp	.+8      	; 0x4b5c <__fixsfsi+0x7a>
    4b54:	56 95       	lsr	r21
    4b56:	47 95       	ror	r20
    4b58:	37 95       	ror	r19
    4b5a:	27 95       	ror	r18
    4b5c:	8a 95       	dec	r24
    4b5e:	d2 f7       	brpl	.-12     	; 0x4b54 <__fixsfsi+0x72>
    4b60:	66 23       	and	r22, r22
    4b62:	61 f0       	breq	.+24     	; 0x4b7c <__fixsfsi+0x9a>
    4b64:	50 95       	com	r21
    4b66:	40 95       	com	r20
    4b68:	30 95       	com	r19
    4b6a:	21 95       	neg	r18
    4b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6e:	4f 4f       	sbci	r20, 0xFF	; 255
    4b70:	5f 4f       	sbci	r21, 0xFF	; 255
    4b72:	04 c0       	rjmp	.+8      	; 0x4b7c <__fixsfsi+0x9a>
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e0       	ldi	r20, 0x00	; 0
    4b7a:	50 e0       	ldi	r21, 0x00	; 0
    4b7c:	ca 01       	movw	r24, r20
    4b7e:	b9 01       	movw	r22, r18
    4b80:	e2 e0       	ldi	r30, 0x02	; 2
    4b82:	2c 96       	adiw	r28, 0x0c	; 12
    4b84:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__epilogue_restores__+0x20>

00004b88 <__clzsi2>:
    4b88:	ef 92       	push	r14
    4b8a:	ff 92       	push	r15
    4b8c:	0f 93       	push	r16
    4b8e:	1f 93       	push	r17
    4b90:	9b 01       	movw	r18, r22
    4b92:	ac 01       	movw	r20, r24
    4b94:	20 30       	cpi	r18, 0x00	; 0
    4b96:	80 e0       	ldi	r24, 0x00	; 0
    4b98:	38 07       	cpc	r19, r24
    4b9a:	81 e0       	ldi	r24, 0x01	; 1
    4b9c:	48 07       	cpc	r20, r24
    4b9e:	80 e0       	ldi	r24, 0x00	; 0
    4ba0:	58 07       	cpc	r21, r24
    4ba2:	80 f4       	brcc	.+32     	; 0x4bc4 <__clzsi2+0x3c>
    4ba4:	2f 3f       	cpi	r18, 0xFF	; 255
    4ba6:	31 05       	cpc	r19, r1
    4ba8:	41 05       	cpc	r20, r1
    4baa:	51 05       	cpc	r21, r1
    4bac:	09 f0       	breq	.+2      	; 0x4bb0 <__clzsi2+0x28>
    4bae:	20 f4       	brcc	.+8      	; 0x4bb8 <__clzsi2+0x30>
    4bb0:	ee 24       	eor	r14, r14
    4bb2:	ff 24       	eor	r15, r15
    4bb4:	87 01       	movw	r16, r14
    4bb6:	19 c0       	rjmp	.+50     	; 0x4bea <__clzsi2+0x62>
    4bb8:	68 e0       	ldi	r22, 0x08	; 8
    4bba:	e6 2e       	mov	r14, r22
    4bbc:	f1 2c       	mov	r15, r1
    4bbe:	01 2d       	mov	r16, r1
    4bc0:	11 2d       	mov	r17, r1
    4bc2:	13 c0       	rjmp	.+38     	; 0x4bea <__clzsi2+0x62>
    4bc4:	20 30       	cpi	r18, 0x00	; 0
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	38 07       	cpc	r19, r24
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	48 07       	cpc	r20, r24
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	58 07       	cpc	r21, r24
    4bd2:	30 f4       	brcc	.+12     	; 0x4be0 <__clzsi2+0x58>
    4bd4:	90 e1       	ldi	r25, 0x10	; 16
    4bd6:	e9 2e       	mov	r14, r25
    4bd8:	f1 2c       	mov	r15, r1
    4bda:	01 2d       	mov	r16, r1
    4bdc:	11 2d       	mov	r17, r1
    4bde:	05 c0       	rjmp	.+10     	; 0x4bea <__clzsi2+0x62>
    4be0:	88 e1       	ldi	r24, 0x18	; 24
    4be2:	e8 2e       	mov	r14, r24
    4be4:	f1 2c       	mov	r15, r1
    4be6:	01 2d       	mov	r16, r1
    4be8:	11 2d       	mov	r17, r1
    4bea:	80 e2       	ldi	r24, 0x20	; 32
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	a0 e0       	ldi	r26, 0x00	; 0
    4bf0:	b0 e0       	ldi	r27, 0x00	; 0
    4bf2:	8e 19       	sub	r24, r14
    4bf4:	9f 09       	sbc	r25, r15
    4bf6:	a0 0b       	sbc	r26, r16
    4bf8:	b1 0b       	sbc	r27, r17
    4bfa:	04 c0       	rjmp	.+8      	; 0x4c04 <__clzsi2+0x7c>
    4bfc:	56 95       	lsr	r21
    4bfe:	47 95       	ror	r20
    4c00:	37 95       	ror	r19
    4c02:	27 95       	ror	r18
    4c04:	ea 94       	dec	r14
    4c06:	d2 f7       	brpl	.-12     	; 0x4bfc <__clzsi2+0x74>
    4c08:	f9 01       	movw	r30, r18
    4c0a:	e9 5d       	subi	r30, 0xD9	; 217
    4c0c:	fd 4f       	sbci	r31, 0xFD	; 253
    4c0e:	20 81       	ld	r18, Z
    4c10:	82 1b       	sub	r24, r18
    4c12:	91 09       	sbc	r25, r1
    4c14:	a1 09       	sbc	r26, r1
    4c16:	b1 09       	sbc	r27, r1
    4c18:	1f 91       	pop	r17
    4c1a:	0f 91       	pop	r16
    4c1c:	ff 90       	pop	r15
    4c1e:	ef 90       	pop	r14
    4c20:	08 95       	ret

00004c22 <__pack_f>:
    4c22:	9f 92       	push	r9
    4c24:	af 92       	push	r10
    4c26:	bf 92       	push	r11
    4c28:	cf 92       	push	r12
    4c2a:	df 92       	push	r13
    4c2c:	ef 92       	push	r14
    4c2e:	ff 92       	push	r15
    4c30:	0f 93       	push	r16
    4c32:	1f 93       	push	r17
    4c34:	ee 24       	eor	r14, r14
    4c36:	ff 24       	eor	r15, r15
    4c38:	87 01       	movw	r16, r14
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	24 81       	ldd	r18, Z+4	; 0x04
    4c3e:	35 81       	ldd	r19, Z+5	; 0x05
    4c40:	46 81       	ldd	r20, Z+6	; 0x06
    4c42:	57 81       	ldd	r21, Z+7	; 0x07
    4c44:	91 80       	ldd	r9, Z+1	; 0x01
    4c46:	80 81       	ld	r24, Z
    4c48:	82 30       	cpi	r24, 0x02	; 2
    4c4a:	10 f4       	brcc	.+4      	; 0x4c50 <__pack_f+0x2e>
    4c4c:	40 61       	ori	r20, 0x10	; 16
    4c4e:	a2 c0       	rjmp	.+324    	; 0x4d94 <__pack_f+0x172>
    4c50:	84 30       	cpi	r24, 0x04	; 4
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <__pack_f+0x34>
    4c54:	9b c0       	rjmp	.+310    	; 0x4d8c <__pack_f+0x16a>
    4c56:	82 30       	cpi	r24, 0x02	; 2
    4c58:	29 f4       	brne	.+10     	; 0x4c64 <__pack_f+0x42>
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e0       	ldi	r20, 0x00	; 0
    4c60:	50 e0       	ldi	r21, 0x00	; 0
    4c62:	05 c0       	rjmp	.+10     	; 0x4c6e <__pack_f+0x4c>
    4c64:	21 15       	cp	r18, r1
    4c66:	31 05       	cpc	r19, r1
    4c68:	41 05       	cpc	r20, r1
    4c6a:	51 05       	cpc	r21, r1
    4c6c:	19 f4       	brne	.+6      	; 0x4c74 <__pack_f+0x52>
    4c6e:	e0 e0       	ldi	r30, 0x00	; 0
    4c70:	f0 e0       	ldi	r31, 0x00	; 0
    4c72:	92 c0       	rjmp	.+292    	; 0x4d98 <__pack_f+0x176>
    4c74:	82 81       	ldd	r24, Z+2	; 0x02
    4c76:	93 81       	ldd	r25, Z+3	; 0x03
    4c78:	6f ef       	ldi	r22, 0xFF	; 255
    4c7a:	82 38       	cpi	r24, 0x82	; 130
    4c7c:	96 07       	cpc	r25, r22
    4c7e:	0c f0       	brlt	.+2      	; 0x4c82 <__pack_f+0x60>
    4c80:	5a c0       	rjmp	.+180    	; 0x4d36 <__pack_f+0x114>
    4c82:	62 e8       	ldi	r22, 0x82	; 130
    4c84:	7f ef       	ldi	r23, 0xFF	; 255
    4c86:	68 1b       	sub	r22, r24
    4c88:	79 0b       	sbc	r23, r25
    4c8a:	6a 31       	cpi	r22, 0x1A	; 26
    4c8c:	71 05       	cpc	r23, r1
    4c8e:	2c f0       	brlt	.+10     	; 0x4c9a <__pack_f+0x78>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e0       	ldi	r20, 0x00	; 0
    4c96:	50 e0       	ldi	r21, 0x00	; 0
    4c98:	2a c0       	rjmp	.+84     	; 0x4cee <__pack_f+0xcc>
    4c9a:	aa 24       	eor	r10, r10
    4c9c:	bb 24       	eor	r11, r11
    4c9e:	65 01       	movw	r12, r10
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	a0 e0       	ldi	r26, 0x00	; 0
    4ca6:	b0 e0       	ldi	r27, 0x00	; 0
    4ca8:	06 2e       	mov	r0, r22
    4caa:	04 c0       	rjmp	.+8      	; 0x4cb4 <__pack_f+0x92>
    4cac:	88 0f       	add	r24, r24
    4cae:	99 1f       	adc	r25, r25
    4cb0:	aa 1f       	adc	r26, r26
    4cb2:	bb 1f       	adc	r27, r27
    4cb4:	0a 94       	dec	r0
    4cb6:	d2 f7       	brpl	.-12     	; 0x4cac <__pack_f+0x8a>
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	a1 09       	sbc	r26, r1
    4cbc:	b1 09       	sbc	r27, r1
    4cbe:	82 23       	and	r24, r18
    4cc0:	93 23       	and	r25, r19
    4cc2:	a4 23       	and	r26, r20
    4cc4:	b5 23       	and	r27, r21
    4cc6:	00 97       	sbiw	r24, 0x00	; 0
    4cc8:	a1 05       	cpc	r26, r1
    4cca:	b1 05       	cpc	r27, r1
    4ccc:	29 f0       	breq	.+10     	; 0x4cd8 <__pack_f+0xb6>
    4cce:	71 e0       	ldi	r23, 0x01	; 1
    4cd0:	a7 2e       	mov	r10, r23
    4cd2:	b1 2c       	mov	r11, r1
    4cd4:	c1 2c       	mov	r12, r1
    4cd6:	d1 2c       	mov	r13, r1
    4cd8:	04 c0       	rjmp	.+8      	; 0x4ce2 <__pack_f+0xc0>
    4cda:	56 95       	lsr	r21
    4cdc:	47 95       	ror	r20
    4cde:	37 95       	ror	r19
    4ce0:	27 95       	ror	r18
    4ce2:	6a 95       	dec	r22
    4ce4:	d2 f7       	brpl	.-12     	; 0x4cda <__pack_f+0xb8>
    4ce6:	2a 29       	or	r18, r10
    4ce8:	3b 29       	or	r19, r11
    4cea:	4c 29       	or	r20, r12
    4cec:	5d 29       	or	r21, r13
    4cee:	da 01       	movw	r26, r20
    4cf0:	c9 01       	movw	r24, r18
    4cf2:	8f 77       	andi	r24, 0x7F	; 127
    4cf4:	90 70       	andi	r25, 0x00	; 0
    4cf6:	a0 70       	andi	r26, 0x00	; 0
    4cf8:	b0 70       	andi	r27, 0x00	; 0
    4cfa:	80 34       	cpi	r24, 0x40	; 64
    4cfc:	91 05       	cpc	r25, r1
    4cfe:	a1 05       	cpc	r26, r1
    4d00:	b1 05       	cpc	r27, r1
    4d02:	39 f4       	brne	.+14     	; 0x4d12 <__pack_f+0xf0>
    4d04:	27 ff       	sbrs	r18, 7
    4d06:	09 c0       	rjmp	.+18     	; 0x4d1a <__pack_f+0xf8>
    4d08:	20 5c       	subi	r18, 0xC0	; 192
    4d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0c:	4f 4f       	sbci	r20, 0xFF	; 255
    4d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d10:	04 c0       	rjmp	.+8      	; 0x4d1a <__pack_f+0xf8>
    4d12:	21 5c       	subi	r18, 0xC1	; 193
    4d14:	3f 4f       	sbci	r19, 0xFF	; 255
    4d16:	4f 4f       	sbci	r20, 0xFF	; 255
    4d18:	5f 4f       	sbci	r21, 0xFF	; 255
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	20 30       	cpi	r18, 0x00	; 0
    4d20:	60 e0       	ldi	r22, 0x00	; 0
    4d22:	36 07       	cpc	r19, r22
    4d24:	60 e0       	ldi	r22, 0x00	; 0
    4d26:	46 07       	cpc	r20, r22
    4d28:	60 e4       	ldi	r22, 0x40	; 64
    4d2a:	56 07       	cpc	r21, r22
    4d2c:	10 f0       	brcs	.+4      	; 0x4d32 <__pack_f+0x110>
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	fc 01       	movw	r30, r24
    4d34:	23 c0       	rjmp	.+70     	; 0x4d7c <__pack_f+0x15a>
    4d36:	80 38       	cpi	r24, 0x80	; 128
    4d38:	91 05       	cpc	r25, r1
    4d3a:	44 f5       	brge	.+80     	; 0x4d8c <__pack_f+0x16a>
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	e1 58       	subi	r30, 0x81	; 129
    4d40:	ff 4f       	sbci	r31, 0xFF	; 255
    4d42:	da 01       	movw	r26, r20
    4d44:	c9 01       	movw	r24, r18
    4d46:	8f 77       	andi	r24, 0x7F	; 127
    4d48:	90 70       	andi	r25, 0x00	; 0
    4d4a:	a0 70       	andi	r26, 0x00	; 0
    4d4c:	b0 70       	andi	r27, 0x00	; 0
    4d4e:	80 34       	cpi	r24, 0x40	; 64
    4d50:	91 05       	cpc	r25, r1
    4d52:	a1 05       	cpc	r26, r1
    4d54:	b1 05       	cpc	r27, r1
    4d56:	39 f4       	brne	.+14     	; 0x4d66 <__pack_f+0x144>
    4d58:	27 ff       	sbrs	r18, 7
    4d5a:	09 c0       	rjmp	.+18     	; 0x4d6e <__pack_f+0x14c>
    4d5c:	20 5c       	subi	r18, 0xC0	; 192
    4d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d60:	4f 4f       	sbci	r20, 0xFF	; 255
    4d62:	5f 4f       	sbci	r21, 0xFF	; 255
    4d64:	04 c0       	rjmp	.+8      	; 0x4d6e <__pack_f+0x14c>
    4d66:	21 5c       	subi	r18, 0xC1	; 193
    4d68:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6a:	4f 4f       	sbci	r20, 0xFF	; 255
    4d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d6e:	57 ff       	sbrs	r21, 7
    4d70:	05 c0       	rjmp	.+10     	; 0x4d7c <__pack_f+0x15a>
    4d72:	56 95       	lsr	r21
    4d74:	47 95       	ror	r20
    4d76:	37 95       	ror	r19
    4d78:	27 95       	ror	r18
    4d7a:	31 96       	adiw	r30, 0x01	; 1
    4d7c:	87 e0       	ldi	r24, 0x07	; 7
    4d7e:	56 95       	lsr	r21
    4d80:	47 95       	ror	r20
    4d82:	37 95       	ror	r19
    4d84:	27 95       	ror	r18
    4d86:	8a 95       	dec	r24
    4d88:	d1 f7       	brne	.-12     	; 0x4d7e <__pack_f+0x15c>
    4d8a:	06 c0       	rjmp	.+12     	; 0x4d98 <__pack_f+0x176>
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	40 e0       	ldi	r20, 0x00	; 0
    4d92:	50 e0       	ldi	r21, 0x00	; 0
    4d94:	ef ef       	ldi	r30, 0xFF	; 255
    4d96:	f0 e0       	ldi	r31, 0x00	; 0
    4d98:	e2 2e       	mov	r14, r18
    4d9a:	f3 2e       	mov	r15, r19
    4d9c:	94 2f       	mov	r25, r20
    4d9e:	9f 77       	andi	r25, 0x7F	; 127
    4da0:	80 2f       	mov	r24, r16
    4da2:	80 78       	andi	r24, 0x80	; 128
    4da4:	89 2b       	or	r24, r25
    4da6:	9e 2f       	mov	r25, r30
    4da8:	97 95       	ror	r25
    4daa:	99 27       	eor	r25, r25
    4dac:	97 95       	ror	r25
    4dae:	8f 77       	andi	r24, 0x7F	; 127
    4db0:	08 2f       	mov	r16, r24
    4db2:	09 2b       	or	r16, r25
    4db4:	9e 2f       	mov	r25, r30
    4db6:	96 95       	lsr	r25
    4db8:	81 2f       	mov	r24, r17
    4dba:	80 78       	andi	r24, 0x80	; 128
    4dbc:	89 2b       	or	r24, r25
    4dbe:	97 94       	ror	r9
    4dc0:	99 24       	eor	r9, r9
    4dc2:	97 94       	ror	r9
    4dc4:	8f 77       	andi	r24, 0x7F	; 127
    4dc6:	18 2f       	mov	r17, r24
    4dc8:	19 29       	or	r17, r9
    4dca:	c8 01       	movw	r24, r16
    4dcc:	b7 01       	movw	r22, r14
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	df 90       	pop	r13
    4dd8:	cf 90       	pop	r12
    4dda:	bf 90       	pop	r11
    4ddc:	af 90       	pop	r10
    4dde:	9f 90       	pop	r9
    4de0:	08 95       	ret

00004de2 <__unpack_f>:
    4de2:	cf 93       	push	r28
    4de4:	df 93       	push	r29
    4de6:	fc 01       	movw	r30, r24
    4de8:	db 01       	movw	r26, r22
    4dea:	20 81       	ld	r18, Z
    4dec:	31 81       	ldd	r19, Z+1	; 0x01
    4dee:	92 81       	ldd	r25, Z+2	; 0x02
    4df0:	49 2f       	mov	r20, r25
    4df2:	4f 77       	andi	r20, 0x7F	; 127
    4df4:	50 e0       	ldi	r21, 0x00	; 0
    4df6:	99 1f       	adc	r25, r25
    4df8:	99 27       	eor	r25, r25
    4dfa:	99 1f       	adc	r25, r25
    4dfc:	83 81       	ldd	r24, Z+3	; 0x03
    4dfe:	e8 2f       	mov	r30, r24
    4e00:	ee 0f       	add	r30, r30
    4e02:	e9 2b       	or	r30, r25
    4e04:	6e 2f       	mov	r22, r30
    4e06:	70 e0       	ldi	r23, 0x00	; 0
    4e08:	88 1f       	adc	r24, r24
    4e0a:	88 27       	eor	r24, r24
    4e0c:	88 1f       	adc	r24, r24
    4e0e:	ed 01       	movw	r28, r26
    4e10:	89 83       	std	Y+1, r24	; 0x01
    4e12:	ee 23       	and	r30, r30
    4e14:	71 f5       	brne	.+92     	; 0x4e72 <__unpack_f+0x90>
    4e16:	21 15       	cp	r18, r1
    4e18:	31 05       	cpc	r19, r1
    4e1a:	41 05       	cpc	r20, r1
    4e1c:	51 05       	cpc	r21, r1
    4e1e:	11 f4       	brne	.+4      	; 0x4e24 <__unpack_f+0x42>
    4e20:	82 e0       	ldi	r24, 0x02	; 2
    4e22:	2f c0       	rjmp	.+94     	; 0x4e82 <__unpack_f+0xa0>
    4e24:	6e 57       	subi	r22, 0x7E	; 126
    4e26:	70 40       	sbci	r23, 0x00	; 0
    4e28:	fd 01       	movw	r30, r26
    4e2a:	73 83       	std	Z+3, r23	; 0x03
    4e2c:	62 83       	std	Z+2, r22	; 0x02
    4e2e:	67 e0       	ldi	r22, 0x07	; 7
    4e30:	22 0f       	add	r18, r18
    4e32:	33 1f       	adc	r19, r19
    4e34:	44 1f       	adc	r20, r20
    4e36:	55 1f       	adc	r21, r21
    4e38:	6a 95       	dec	r22
    4e3a:	d1 f7       	brne	.-12     	; 0x4e30 <__unpack_f+0x4e>
    4e3c:	83 e0       	ldi	r24, 0x03	; 3
    4e3e:	8c 93       	st	X, r24
    4e40:	0a c0       	rjmp	.+20     	; 0x4e56 <__unpack_f+0x74>
    4e42:	22 0f       	add	r18, r18
    4e44:	33 1f       	adc	r19, r19
    4e46:	44 1f       	adc	r20, r20
    4e48:	55 1f       	adc	r21, r21
    4e4a:	ed 01       	movw	r28, r26
    4e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e50:	01 97       	sbiw	r24, 0x01	; 1
    4e52:	9b 83       	std	Y+3, r25	; 0x03
    4e54:	8a 83       	std	Y+2, r24	; 0x02
    4e56:	20 30       	cpi	r18, 0x00	; 0
    4e58:	e0 e0       	ldi	r30, 0x00	; 0
    4e5a:	3e 07       	cpc	r19, r30
    4e5c:	e0 e0       	ldi	r30, 0x00	; 0
    4e5e:	4e 07       	cpc	r20, r30
    4e60:	e0 e4       	ldi	r30, 0x40	; 64
    4e62:	5e 07       	cpc	r21, r30
    4e64:	70 f3       	brcs	.-36     	; 0x4e42 <__unpack_f+0x60>
    4e66:	ed 01       	movw	r28, r26
    4e68:	2c 83       	std	Y+4, r18	; 0x04
    4e6a:	3d 83       	std	Y+5, r19	; 0x05
    4e6c:	4e 83       	std	Y+6, r20	; 0x06
    4e6e:	5f 83       	std	Y+7, r21	; 0x07
    4e70:	25 c0       	rjmp	.+74     	; 0x4ebc <__unpack_f+0xda>
    4e72:	ef 3f       	cpi	r30, 0xFF	; 255
    4e74:	79 f4       	brne	.+30     	; 0x4e94 <__unpack_f+0xb2>
    4e76:	21 15       	cp	r18, r1
    4e78:	31 05       	cpc	r19, r1
    4e7a:	41 05       	cpc	r20, r1
    4e7c:	51 05       	cpc	r21, r1
    4e7e:	19 f4       	brne	.+6      	; 0x4e86 <__unpack_f+0xa4>
    4e80:	84 e0       	ldi	r24, 0x04	; 4
    4e82:	8c 93       	st	X, r24
    4e84:	1b c0       	rjmp	.+54     	; 0x4ebc <__unpack_f+0xda>
    4e86:	44 ff       	sbrs	r20, 4
    4e88:	03 c0       	rjmp	.+6      	; 0x4e90 <__unpack_f+0xae>
    4e8a:	81 e0       	ldi	r24, 0x01	; 1
    4e8c:	8c 93       	st	X, r24
    4e8e:	11 c0       	rjmp	.+34     	; 0x4eb2 <__unpack_f+0xd0>
    4e90:	1c 92       	st	X, r1
    4e92:	0f c0       	rjmp	.+30     	; 0x4eb2 <__unpack_f+0xd0>
    4e94:	6f 57       	subi	r22, 0x7F	; 127
    4e96:	70 40       	sbci	r23, 0x00	; 0
    4e98:	ed 01       	movw	r28, r26
    4e9a:	7b 83       	std	Y+3, r23	; 0x03
    4e9c:	6a 83       	std	Y+2, r22	; 0x02
    4e9e:	83 e0       	ldi	r24, 0x03	; 3
    4ea0:	8c 93       	st	X, r24
    4ea2:	87 e0       	ldi	r24, 0x07	; 7
    4ea4:	22 0f       	add	r18, r18
    4ea6:	33 1f       	adc	r19, r19
    4ea8:	44 1f       	adc	r20, r20
    4eaa:	55 1f       	adc	r21, r21
    4eac:	8a 95       	dec	r24
    4eae:	d1 f7       	brne	.-12     	; 0x4ea4 <__unpack_f+0xc2>
    4eb0:	50 64       	ori	r21, 0x40	; 64
    4eb2:	fd 01       	movw	r30, r26
    4eb4:	24 83       	std	Z+4, r18	; 0x04
    4eb6:	35 83       	std	Z+5, r19	; 0x05
    4eb8:	46 83       	std	Z+6, r20	; 0x06
    4eba:	57 83       	std	Z+7, r21	; 0x07
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	08 95       	ret

00004ec2 <__udivmodhi4>:
    4ec2:	aa 1b       	sub	r26, r26
    4ec4:	bb 1b       	sub	r27, r27
    4ec6:	51 e1       	ldi	r21, 0x11	; 17
    4ec8:	07 c0       	rjmp	.+14     	; 0x4ed8 <__udivmodhi4_ep>

00004eca <__udivmodhi4_loop>:
    4eca:	aa 1f       	adc	r26, r26
    4ecc:	bb 1f       	adc	r27, r27
    4ece:	a6 17       	cp	r26, r22
    4ed0:	b7 07       	cpc	r27, r23
    4ed2:	10 f0       	brcs	.+4      	; 0x4ed8 <__udivmodhi4_ep>
    4ed4:	a6 1b       	sub	r26, r22
    4ed6:	b7 0b       	sbc	r27, r23

00004ed8 <__udivmodhi4_ep>:
    4ed8:	88 1f       	adc	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	5a 95       	dec	r21
    4ede:	a9 f7       	brne	.-22     	; 0x4eca <__udivmodhi4_loop>
    4ee0:	80 95       	com	r24
    4ee2:	90 95       	com	r25
    4ee4:	bc 01       	movw	r22, r24
    4ee6:	cd 01       	movw	r24, r26
    4ee8:	08 95       	ret

00004eea <__divmodhi4>:
    4eea:	97 fb       	bst	r25, 7
    4eec:	09 2e       	mov	r0, r25
    4eee:	07 26       	eor	r0, r23
    4ef0:	0a d0       	rcall	.+20     	; 0x4f06 <__divmodhi4_neg1>
    4ef2:	77 fd       	sbrc	r23, 7
    4ef4:	04 d0       	rcall	.+8      	; 0x4efe <__divmodhi4_neg2>
    4ef6:	e5 df       	rcall	.-54     	; 0x4ec2 <__udivmodhi4>
    4ef8:	06 d0       	rcall	.+12     	; 0x4f06 <__divmodhi4_neg1>
    4efa:	00 20       	and	r0, r0
    4efc:	1a f4       	brpl	.+6      	; 0x4f04 <__divmodhi4_exit>

00004efe <__divmodhi4_neg2>:
    4efe:	70 95       	com	r23
    4f00:	61 95       	neg	r22
    4f02:	7f 4f       	sbci	r23, 0xFF	; 255

00004f04 <__divmodhi4_exit>:
    4f04:	08 95       	ret

00004f06 <__divmodhi4_neg1>:
    4f06:	f6 f7       	brtc	.-4      	; 0x4f04 <__divmodhi4_exit>
    4f08:	90 95       	com	r25
    4f0a:	81 95       	neg	r24
    4f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0e:	08 95       	ret

00004f10 <__prologue_saves__>:
    4f10:	2f 92       	push	r2
    4f12:	3f 92       	push	r3
    4f14:	4f 92       	push	r4
    4f16:	5f 92       	push	r5
    4f18:	6f 92       	push	r6
    4f1a:	7f 92       	push	r7
    4f1c:	8f 92       	push	r8
    4f1e:	9f 92       	push	r9
    4f20:	af 92       	push	r10
    4f22:	bf 92       	push	r11
    4f24:	cf 92       	push	r12
    4f26:	df 92       	push	r13
    4f28:	ef 92       	push	r14
    4f2a:	ff 92       	push	r15
    4f2c:	0f 93       	push	r16
    4f2e:	1f 93       	push	r17
    4f30:	cf 93       	push	r28
    4f32:	df 93       	push	r29
    4f34:	cd b7       	in	r28, 0x3d	; 61
    4f36:	de b7       	in	r29, 0x3e	; 62
    4f38:	ca 1b       	sub	r28, r26
    4f3a:	db 0b       	sbc	r29, r27
    4f3c:	0f b6       	in	r0, 0x3f	; 63
    4f3e:	f8 94       	cli
    4f40:	de bf       	out	0x3e, r29	; 62
    4f42:	0f be       	out	0x3f, r0	; 63
    4f44:	cd bf       	out	0x3d, r28	; 61
    4f46:	19 94       	eijmp

00004f48 <__epilogue_restores__>:
    4f48:	2a 88       	ldd	r2, Y+18	; 0x12
    4f4a:	39 88       	ldd	r3, Y+17	; 0x11
    4f4c:	48 88       	ldd	r4, Y+16	; 0x10
    4f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f50:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f52:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f54:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f56:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f58:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f5a:	b9 84       	ldd	r11, Y+9	; 0x09
    4f5c:	c8 84       	ldd	r12, Y+8	; 0x08
    4f5e:	df 80       	ldd	r13, Y+7	; 0x07
    4f60:	ee 80       	ldd	r14, Y+6	; 0x06
    4f62:	fd 80       	ldd	r15, Y+5	; 0x05
    4f64:	0c 81       	ldd	r16, Y+4	; 0x04
    4f66:	1b 81       	ldd	r17, Y+3	; 0x03
    4f68:	aa 81       	ldd	r26, Y+2	; 0x02
    4f6a:	b9 81       	ldd	r27, Y+1	; 0x01
    4f6c:	ce 0f       	add	r28, r30
    4f6e:	d1 1d       	adc	r29, r1
    4f70:	0f b6       	in	r0, 0x3f	; 63
    4f72:	f8 94       	cli
    4f74:	de bf       	out	0x3e, r29	; 62
    4f76:	0f be       	out	0x3f, r0	; 63
    4f78:	cd bf       	out	0x3d, r28	; 61
    4f7a:	ed 01       	movw	r28, r26
    4f7c:	08 95       	ret
    4f7e:	f5 d0       	rcall	.+490    	; 0x516a <__fp_pscA>
    4f80:	58 f0       	brcs	.+22     	; 0x4f98 <__epilogue_restores__+0x50>
    4f82:	80 e8       	ldi	r24, 0x80	; 128
    4f84:	91 e0       	ldi	r25, 0x01	; 1
    4f86:	09 f4       	brne	.+2      	; 0x4f8a <__epilogue_restores__+0x42>
    4f88:	9e ef       	ldi	r25, 0xFE	; 254
    4f8a:	f6 d0       	rcall	.+492    	; 0x5178 <__fp_pscB>
    4f8c:	28 f0       	brcs	.+10     	; 0x4f98 <__epilogue_restores__+0x50>
    4f8e:	40 e8       	ldi	r20, 0x80	; 128
    4f90:	51 e0       	ldi	r21, 0x01	; 1
    4f92:	59 f4       	brne	.+22     	; 0x4faa <atan2+0xe>
    4f94:	5e ef       	ldi	r21, 0xFE	; 254
    4f96:	09 c0       	rjmp	.+18     	; 0x4faa <atan2+0xe>
    4f98:	c0 c0       	rjmp	.+384    	; 0x511a <__fp_nan>
    4f9a:	28 c1       	rjmp	.+592    	; 0x51ec <__fp_zero>

00004f9c <atan2>:
    4f9c:	e9 2f       	mov	r30, r25
    4f9e:	e0 78       	andi	r30, 0x80	; 128
    4fa0:	03 d1       	rcall	.+518    	; 0x51a8 <__fp_split3>
    4fa2:	68 f3       	brcs	.-38     	; 0x4f7e <__epilogue_restores__+0x36>
    4fa4:	09 2e       	mov	r0, r25
    4fa6:	05 2a       	or	r0, r21
    4fa8:	c1 f3       	breq	.-16     	; 0x4f9a <__epilogue_restores__+0x52>
    4faa:	26 17       	cp	r18, r22
    4fac:	37 07       	cpc	r19, r23
    4fae:	48 07       	cpc	r20, r24
    4fb0:	59 07       	cpc	r21, r25
    4fb2:	38 f0       	brcs	.+14     	; 0x4fc2 <atan2+0x26>
    4fb4:	0e 2e       	mov	r0, r30
    4fb6:	07 f8       	bld	r0, 7
    4fb8:	e0 25       	eor	r30, r0
    4fba:	69 f0       	breq	.+26     	; 0x4fd6 <atan2+0x3a>
    4fbc:	e0 25       	eor	r30, r0
    4fbe:	e0 64       	ori	r30, 0x40	; 64
    4fc0:	0a c0       	rjmp	.+20     	; 0x4fd6 <atan2+0x3a>
    4fc2:	ef 63       	ori	r30, 0x3F	; 63
    4fc4:	07 f8       	bld	r0, 7
    4fc6:	00 94       	com	r0
    4fc8:	07 fa       	bst	r0, 7
    4fca:	db 01       	movw	r26, r22
    4fcc:	b9 01       	movw	r22, r18
    4fce:	9d 01       	movw	r18, r26
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	ca 01       	movw	r24, r20
    4fd4:	ad 01       	movw	r20, r26
    4fd6:	ef 93       	push	r30
    4fd8:	41 d0       	rcall	.+130    	; 0x505c <__divsf3_pse>
    4fda:	d5 d0       	rcall	.+426    	; 0x5186 <__fp_round>
    4fdc:	0a d0       	rcall	.+20     	; 0x4ff2 <atan>
    4fde:	5f 91       	pop	r21
    4fe0:	55 23       	and	r21, r21
    4fe2:	31 f0       	breq	.+12     	; 0x4ff0 <atan2+0x54>
    4fe4:	2b ed       	ldi	r18, 0xDB	; 219
    4fe6:	3f e0       	ldi	r19, 0x0F	; 15
    4fe8:	49 e4       	ldi	r20, 0x49	; 73
    4fea:	50 fd       	sbrc	r21, 0
    4fec:	49 ec       	ldi	r20, 0xC9	; 201
    4fee:	ef cb       	rjmp	.-2082   	; 0x47ce <__addsf3>
    4ff0:	08 95       	ret

00004ff2 <atan>:
    4ff2:	df 93       	push	r29
    4ff4:	dd 27       	eor	r29, r29
    4ff6:	b9 2f       	mov	r27, r25
    4ff8:	bf 77       	andi	r27, 0x7F	; 127
    4ffa:	40 e8       	ldi	r20, 0x80	; 128
    4ffc:	5f e3       	ldi	r21, 0x3F	; 63
    4ffe:	16 16       	cp	r1, r22
    5000:	17 06       	cpc	r1, r23
    5002:	48 07       	cpc	r20, r24
    5004:	5b 07       	cpc	r21, r27
    5006:	10 f4       	brcc	.+4      	; 0x500c <atan+0x1a>
    5008:	d9 2f       	mov	r29, r25
    500a:	f7 d0       	rcall	.+494    	; 0x51fa <inverse>
    500c:	9f 93       	push	r25
    500e:	8f 93       	push	r24
    5010:	7f 93       	push	r23
    5012:	6f 93       	push	r22
    5014:	5a d1       	rcall	.+692    	; 0x52ca <square>
    5016:	ee e4       	ldi	r30, 0x4E	; 78
    5018:	f1 e0       	ldi	r31, 0x01	; 1
    501a:	82 d0       	rcall	.+260    	; 0x5120 <__fp_powser>
    501c:	b4 d0       	rcall	.+360    	; 0x5186 <__fp_round>
    501e:	2f 91       	pop	r18
    5020:	3f 91       	pop	r19
    5022:	4f 91       	pop	r20
    5024:	5f 91       	pop	r21
    5026:	fa d0       	rcall	.+500    	; 0x521c <__mulsf3x>
    5028:	dd 23       	and	r29, r29
    502a:	49 f0       	breq	.+18     	; 0x503e <atan+0x4c>
    502c:	90 58       	subi	r25, 0x80	; 128
    502e:	a2 ea       	ldi	r26, 0xA2	; 162
    5030:	2a ed       	ldi	r18, 0xDA	; 218
    5032:	3f e0       	ldi	r19, 0x0F	; 15
    5034:	49 ec       	ldi	r20, 0xC9	; 201
    5036:	5f e3       	ldi	r21, 0x3F	; 63
    5038:	d0 78       	andi	r29, 0x80	; 128
    503a:	5d 27       	eor	r21, r29
    503c:	56 d1       	rcall	.+684    	; 0x52ea <__addsf3x>
    503e:	df 91       	pop	r29
    5040:	a2 c0       	rjmp	.+324    	; 0x5186 <__fp_round>
    5042:	9a d0       	rcall	.+308    	; 0x5178 <__fp_pscB>
    5044:	40 f0       	brcs	.+16     	; 0x5056 <atan+0x64>
    5046:	91 d0       	rcall	.+290    	; 0x516a <__fp_pscA>
    5048:	30 f0       	brcs	.+12     	; 0x5056 <atan+0x64>
    504a:	21 f4       	brne	.+8      	; 0x5054 <atan+0x62>
    504c:	5f 3f       	cpi	r21, 0xFF	; 255
    504e:	19 f0       	breq	.+6      	; 0x5056 <atan+0x64>
    5050:	5e c0       	rjmp	.+188    	; 0x510e <__fp_inf>
    5052:	51 11       	cpse	r21, r1
    5054:	cc c0       	rjmp	.+408    	; 0x51ee <__fp_szero>
    5056:	61 c0       	rjmp	.+194    	; 0x511a <__fp_nan>

00005058 <__divsf3x>:
    5058:	a7 d0       	rcall	.+334    	; 0x51a8 <__fp_split3>
    505a:	98 f3       	brcs	.-26     	; 0x5042 <atan+0x50>

0000505c <__divsf3_pse>:
    505c:	99 23       	and	r25, r25
    505e:	c9 f3       	breq	.-14     	; 0x5052 <atan+0x60>
    5060:	55 23       	and	r21, r21
    5062:	b1 f3       	breq	.-20     	; 0x5050 <atan+0x5e>
    5064:	95 1b       	sub	r25, r21
    5066:	55 0b       	sbc	r21, r21
    5068:	bb 27       	eor	r27, r27
    506a:	aa 27       	eor	r26, r26
    506c:	62 17       	cp	r22, r18
    506e:	73 07       	cpc	r23, r19
    5070:	84 07       	cpc	r24, r20
    5072:	38 f0       	brcs	.+14     	; 0x5082 <__divsf3_pse+0x26>
    5074:	9f 5f       	subi	r25, 0xFF	; 255
    5076:	5f 4f       	sbci	r21, 0xFF	; 255
    5078:	22 0f       	add	r18, r18
    507a:	33 1f       	adc	r19, r19
    507c:	44 1f       	adc	r20, r20
    507e:	aa 1f       	adc	r26, r26
    5080:	a9 f3       	breq	.-22     	; 0x506c <__divsf3_pse+0x10>
    5082:	33 d0       	rcall	.+102    	; 0x50ea <__divsf3_pse+0x8e>
    5084:	0e 2e       	mov	r0, r30
    5086:	3a f0       	brmi	.+14     	; 0x5096 <__divsf3_pse+0x3a>
    5088:	e0 e8       	ldi	r30, 0x80	; 128
    508a:	30 d0       	rcall	.+96     	; 0x50ec <__divsf3_pse+0x90>
    508c:	91 50       	subi	r25, 0x01	; 1
    508e:	50 40       	sbci	r21, 0x00	; 0
    5090:	e6 95       	lsr	r30
    5092:	00 1c       	adc	r0, r0
    5094:	ca f7       	brpl	.-14     	; 0x5088 <__divsf3_pse+0x2c>
    5096:	29 d0       	rcall	.+82     	; 0x50ea <__divsf3_pse+0x8e>
    5098:	fe 2f       	mov	r31, r30
    509a:	27 d0       	rcall	.+78     	; 0x50ea <__divsf3_pse+0x8e>
    509c:	66 0f       	add	r22, r22
    509e:	77 1f       	adc	r23, r23
    50a0:	88 1f       	adc	r24, r24
    50a2:	bb 1f       	adc	r27, r27
    50a4:	26 17       	cp	r18, r22
    50a6:	37 07       	cpc	r19, r23
    50a8:	48 07       	cpc	r20, r24
    50aa:	ab 07       	cpc	r26, r27
    50ac:	b0 e8       	ldi	r27, 0x80	; 128
    50ae:	09 f0       	breq	.+2      	; 0x50b2 <__divsf3_pse+0x56>
    50b0:	bb 0b       	sbc	r27, r27
    50b2:	80 2d       	mov	r24, r0
    50b4:	bf 01       	movw	r22, r30
    50b6:	ff 27       	eor	r31, r31
    50b8:	93 58       	subi	r25, 0x83	; 131
    50ba:	5f 4f       	sbci	r21, 0xFF	; 255
    50bc:	2a f0       	brmi	.+10     	; 0x50c8 <__divsf3_pse+0x6c>
    50be:	9e 3f       	cpi	r25, 0xFE	; 254
    50c0:	51 05       	cpc	r21, r1
    50c2:	68 f0       	brcs	.+26     	; 0x50de <__divsf3_pse+0x82>
    50c4:	24 c0       	rjmp	.+72     	; 0x510e <__fp_inf>
    50c6:	93 c0       	rjmp	.+294    	; 0x51ee <__fp_szero>
    50c8:	5f 3f       	cpi	r21, 0xFF	; 255
    50ca:	ec f3       	brlt	.-6      	; 0x50c6 <__divsf3_pse+0x6a>
    50cc:	98 3e       	cpi	r25, 0xE8	; 232
    50ce:	dc f3       	brlt	.-10     	; 0x50c6 <__divsf3_pse+0x6a>
    50d0:	86 95       	lsr	r24
    50d2:	77 95       	ror	r23
    50d4:	67 95       	ror	r22
    50d6:	b7 95       	ror	r27
    50d8:	f7 95       	ror	r31
    50da:	9f 5f       	subi	r25, 0xFF	; 255
    50dc:	c9 f7       	brne	.-14     	; 0x50d0 <__divsf3_pse+0x74>
    50de:	88 0f       	add	r24, r24
    50e0:	91 1d       	adc	r25, r1
    50e2:	96 95       	lsr	r25
    50e4:	87 95       	ror	r24
    50e6:	97 f9       	bld	r25, 7
    50e8:	08 95       	ret
    50ea:	e1 e0       	ldi	r30, 0x01	; 1
    50ec:	66 0f       	add	r22, r22
    50ee:	77 1f       	adc	r23, r23
    50f0:	88 1f       	adc	r24, r24
    50f2:	bb 1f       	adc	r27, r27
    50f4:	62 17       	cp	r22, r18
    50f6:	73 07       	cpc	r23, r19
    50f8:	84 07       	cpc	r24, r20
    50fa:	ba 07       	cpc	r27, r26
    50fc:	20 f0       	brcs	.+8      	; 0x5106 <__divsf3_pse+0xaa>
    50fe:	62 1b       	sub	r22, r18
    5100:	73 0b       	sbc	r23, r19
    5102:	84 0b       	sbc	r24, r20
    5104:	ba 0b       	sbc	r27, r26
    5106:	ee 1f       	adc	r30, r30
    5108:	88 f7       	brcc	.-30     	; 0x50ec <__divsf3_pse+0x90>
    510a:	e0 95       	com	r30
    510c:	08 95       	ret

0000510e <__fp_inf>:
    510e:	97 f9       	bld	r25, 7
    5110:	9f 67       	ori	r25, 0x7F	; 127
    5112:	80 e8       	ldi	r24, 0x80	; 128
    5114:	70 e0       	ldi	r23, 0x00	; 0
    5116:	60 e0       	ldi	r22, 0x00	; 0
    5118:	08 95       	ret

0000511a <__fp_nan>:
    511a:	9f ef       	ldi	r25, 0xFF	; 255
    511c:	80 ec       	ldi	r24, 0xC0	; 192
    511e:	08 95       	ret

00005120 <__fp_powser>:
    5120:	df 93       	push	r29
    5122:	cf 93       	push	r28
    5124:	1f 93       	push	r17
    5126:	0f 93       	push	r16
    5128:	ff 92       	push	r15
    512a:	ef 92       	push	r14
    512c:	df 92       	push	r13
    512e:	7b 01       	movw	r14, r22
    5130:	8c 01       	movw	r16, r24
    5132:	68 94       	set
    5134:	05 c0       	rjmp	.+10     	; 0x5140 <__fp_powser+0x20>
    5136:	da 2e       	mov	r13, r26
    5138:	ef 01       	movw	r28, r30
    513a:	70 d0       	rcall	.+224    	; 0x521c <__mulsf3x>
    513c:	fe 01       	movw	r30, r28
    513e:	e8 94       	clt
    5140:	a5 91       	lpm	r26, Z+
    5142:	25 91       	lpm	r18, Z+
    5144:	35 91       	lpm	r19, Z+
    5146:	45 91       	lpm	r20, Z+
    5148:	55 91       	lpm	r21, Z+
    514a:	ae f3       	brts	.-22     	; 0x5136 <__fp_powser+0x16>
    514c:	ef 01       	movw	r28, r30
    514e:	cd d0       	rcall	.+410    	; 0x52ea <__addsf3x>
    5150:	fe 01       	movw	r30, r28
    5152:	97 01       	movw	r18, r14
    5154:	a8 01       	movw	r20, r16
    5156:	da 94       	dec	r13
    5158:	79 f7       	brne	.-34     	; 0x5138 <__fp_powser+0x18>
    515a:	df 90       	pop	r13
    515c:	ef 90       	pop	r14
    515e:	ff 90       	pop	r15
    5160:	0f 91       	pop	r16
    5162:	1f 91       	pop	r17
    5164:	cf 91       	pop	r28
    5166:	df 91       	pop	r29
    5168:	08 95       	ret

0000516a <__fp_pscA>:
    516a:	00 24       	eor	r0, r0
    516c:	0a 94       	dec	r0
    516e:	16 16       	cp	r1, r22
    5170:	17 06       	cpc	r1, r23
    5172:	18 06       	cpc	r1, r24
    5174:	09 06       	cpc	r0, r25
    5176:	08 95       	ret

00005178 <__fp_pscB>:
    5178:	00 24       	eor	r0, r0
    517a:	0a 94       	dec	r0
    517c:	12 16       	cp	r1, r18
    517e:	13 06       	cpc	r1, r19
    5180:	14 06       	cpc	r1, r20
    5182:	05 06       	cpc	r0, r21
    5184:	08 95       	ret

00005186 <__fp_round>:
    5186:	09 2e       	mov	r0, r25
    5188:	03 94       	inc	r0
    518a:	00 0c       	add	r0, r0
    518c:	11 f4       	brne	.+4      	; 0x5192 <__fp_round+0xc>
    518e:	88 23       	and	r24, r24
    5190:	52 f0       	brmi	.+20     	; 0x51a6 <__fp_round+0x20>
    5192:	bb 0f       	add	r27, r27
    5194:	40 f4       	brcc	.+16     	; 0x51a6 <__fp_round+0x20>
    5196:	bf 2b       	or	r27, r31
    5198:	11 f4       	brne	.+4      	; 0x519e <__fp_round+0x18>
    519a:	60 ff       	sbrs	r22, 0
    519c:	04 c0       	rjmp	.+8      	; 0x51a6 <__fp_round+0x20>
    519e:	6f 5f       	subi	r22, 0xFF	; 255
    51a0:	7f 4f       	sbci	r23, 0xFF	; 255
    51a2:	8f 4f       	sbci	r24, 0xFF	; 255
    51a4:	9f 4f       	sbci	r25, 0xFF	; 255
    51a6:	08 95       	ret

000051a8 <__fp_split3>:
    51a8:	57 fd       	sbrc	r21, 7
    51aa:	90 58       	subi	r25, 0x80	; 128
    51ac:	44 0f       	add	r20, r20
    51ae:	55 1f       	adc	r21, r21
    51b0:	59 f0       	breq	.+22     	; 0x51c8 <__fp_splitA+0x10>
    51b2:	5f 3f       	cpi	r21, 0xFF	; 255
    51b4:	71 f0       	breq	.+28     	; 0x51d2 <__fp_splitA+0x1a>
    51b6:	47 95       	ror	r20

000051b8 <__fp_splitA>:
    51b8:	88 0f       	add	r24, r24
    51ba:	97 fb       	bst	r25, 7
    51bc:	99 1f       	adc	r25, r25
    51be:	61 f0       	breq	.+24     	; 0x51d8 <__fp_splitA+0x20>
    51c0:	9f 3f       	cpi	r25, 0xFF	; 255
    51c2:	79 f0       	breq	.+30     	; 0x51e2 <__fp_splitA+0x2a>
    51c4:	87 95       	ror	r24
    51c6:	08 95       	ret
    51c8:	12 16       	cp	r1, r18
    51ca:	13 06       	cpc	r1, r19
    51cc:	14 06       	cpc	r1, r20
    51ce:	55 1f       	adc	r21, r21
    51d0:	f2 cf       	rjmp	.-28     	; 0x51b6 <__fp_split3+0xe>
    51d2:	46 95       	lsr	r20
    51d4:	f1 df       	rcall	.-30     	; 0x51b8 <__fp_splitA>
    51d6:	08 c0       	rjmp	.+16     	; 0x51e8 <__fp_splitA+0x30>
    51d8:	16 16       	cp	r1, r22
    51da:	17 06       	cpc	r1, r23
    51dc:	18 06       	cpc	r1, r24
    51de:	99 1f       	adc	r25, r25
    51e0:	f1 cf       	rjmp	.-30     	; 0x51c4 <__fp_splitA+0xc>
    51e2:	86 95       	lsr	r24
    51e4:	71 05       	cpc	r23, r1
    51e6:	61 05       	cpc	r22, r1
    51e8:	08 94       	sec
    51ea:	08 95       	ret

000051ec <__fp_zero>:
    51ec:	e8 94       	clt

000051ee <__fp_szero>:
    51ee:	bb 27       	eor	r27, r27
    51f0:	66 27       	eor	r22, r22
    51f2:	77 27       	eor	r23, r23
    51f4:	cb 01       	movw	r24, r22
    51f6:	97 f9       	bld	r25, 7
    51f8:	08 95       	ret

000051fa <inverse>:
    51fa:	9b 01       	movw	r18, r22
    51fc:	ac 01       	movw	r20, r24
    51fe:	60 e0       	ldi	r22, 0x00	; 0
    5200:	70 e0       	ldi	r23, 0x00	; 0
    5202:	80 e8       	ldi	r24, 0x80	; 128
    5204:	9f e3       	ldi	r25, 0x3F	; 63
    5206:	c4 c0       	rjmp	.+392    	; 0x5390 <__divsf3>
    5208:	b0 df       	rcall	.-160    	; 0x516a <__fp_pscA>
    520a:	28 f0       	brcs	.+10     	; 0x5216 <inverse+0x1c>
    520c:	b5 df       	rcall	.-150    	; 0x5178 <__fp_pscB>
    520e:	18 f0       	brcs	.+6      	; 0x5216 <inverse+0x1c>
    5210:	95 23       	and	r25, r21
    5212:	09 f0       	breq	.+2      	; 0x5216 <inverse+0x1c>
    5214:	7c cf       	rjmp	.-264    	; 0x510e <__fp_inf>
    5216:	81 cf       	rjmp	.-254    	; 0x511a <__fp_nan>
    5218:	11 24       	eor	r1, r1
    521a:	e9 cf       	rjmp	.-46     	; 0x51ee <__fp_szero>

0000521c <__mulsf3x>:
    521c:	c5 df       	rcall	.-118    	; 0x51a8 <__fp_split3>
    521e:	a0 f3       	brcs	.-24     	; 0x5208 <inverse+0xe>

00005220 <__mulsf3_pse>:
    5220:	95 9f       	mul	r25, r21
    5222:	d1 f3       	breq	.-12     	; 0x5218 <inverse+0x1e>
    5224:	95 0f       	add	r25, r21
    5226:	50 e0       	ldi	r21, 0x00	; 0
    5228:	55 1f       	adc	r21, r21
    522a:	62 9f       	mul	r22, r18
    522c:	f0 01       	movw	r30, r0
    522e:	72 9f       	mul	r23, r18
    5230:	bb 27       	eor	r27, r27
    5232:	f0 0d       	add	r31, r0
    5234:	b1 1d       	adc	r27, r1
    5236:	63 9f       	mul	r22, r19
    5238:	aa 27       	eor	r26, r26
    523a:	f0 0d       	add	r31, r0
    523c:	b1 1d       	adc	r27, r1
    523e:	aa 1f       	adc	r26, r26
    5240:	64 9f       	mul	r22, r20
    5242:	66 27       	eor	r22, r22
    5244:	b0 0d       	add	r27, r0
    5246:	a1 1d       	adc	r26, r1
    5248:	66 1f       	adc	r22, r22
    524a:	82 9f       	mul	r24, r18
    524c:	22 27       	eor	r18, r18
    524e:	b0 0d       	add	r27, r0
    5250:	a1 1d       	adc	r26, r1
    5252:	62 1f       	adc	r22, r18
    5254:	73 9f       	mul	r23, r19
    5256:	b0 0d       	add	r27, r0
    5258:	a1 1d       	adc	r26, r1
    525a:	62 1f       	adc	r22, r18
    525c:	83 9f       	mul	r24, r19
    525e:	a0 0d       	add	r26, r0
    5260:	61 1d       	adc	r22, r1
    5262:	22 1f       	adc	r18, r18
    5264:	74 9f       	mul	r23, r20
    5266:	33 27       	eor	r19, r19
    5268:	a0 0d       	add	r26, r0
    526a:	61 1d       	adc	r22, r1
    526c:	23 1f       	adc	r18, r19
    526e:	84 9f       	mul	r24, r20
    5270:	60 0d       	add	r22, r0
    5272:	21 1d       	adc	r18, r1
    5274:	82 2f       	mov	r24, r18
    5276:	76 2f       	mov	r23, r22
    5278:	6a 2f       	mov	r22, r26
    527a:	11 24       	eor	r1, r1
    527c:	9f 57       	subi	r25, 0x7F	; 127
    527e:	50 40       	sbci	r21, 0x00	; 0
    5280:	8a f0       	brmi	.+34     	; 0x52a4 <__mulsf3_pse+0x84>
    5282:	e1 f0       	breq	.+56     	; 0x52bc <__mulsf3_pse+0x9c>
    5284:	88 23       	and	r24, r24
    5286:	4a f0       	brmi	.+18     	; 0x529a <__mulsf3_pse+0x7a>
    5288:	ee 0f       	add	r30, r30
    528a:	ff 1f       	adc	r31, r31
    528c:	bb 1f       	adc	r27, r27
    528e:	66 1f       	adc	r22, r22
    5290:	77 1f       	adc	r23, r23
    5292:	88 1f       	adc	r24, r24
    5294:	91 50       	subi	r25, 0x01	; 1
    5296:	50 40       	sbci	r21, 0x00	; 0
    5298:	a9 f7       	brne	.-22     	; 0x5284 <__mulsf3_pse+0x64>
    529a:	9e 3f       	cpi	r25, 0xFE	; 254
    529c:	51 05       	cpc	r21, r1
    529e:	70 f0       	brcs	.+28     	; 0x52bc <__mulsf3_pse+0x9c>
    52a0:	36 cf       	rjmp	.-404    	; 0x510e <__fp_inf>
    52a2:	a5 cf       	rjmp	.-182    	; 0x51ee <__fp_szero>
    52a4:	5f 3f       	cpi	r21, 0xFF	; 255
    52a6:	ec f3       	brlt	.-6      	; 0x52a2 <__mulsf3_pse+0x82>
    52a8:	98 3e       	cpi	r25, 0xE8	; 232
    52aa:	dc f3       	brlt	.-10     	; 0x52a2 <__mulsf3_pse+0x82>
    52ac:	86 95       	lsr	r24
    52ae:	77 95       	ror	r23
    52b0:	67 95       	ror	r22
    52b2:	b7 95       	ror	r27
    52b4:	f7 95       	ror	r31
    52b6:	e7 95       	ror	r30
    52b8:	9f 5f       	subi	r25, 0xFF	; 255
    52ba:	c1 f7       	brne	.-16     	; 0x52ac <__mulsf3_pse+0x8c>
    52bc:	fe 2b       	or	r31, r30
    52be:	88 0f       	add	r24, r24
    52c0:	91 1d       	adc	r25, r1
    52c2:	96 95       	lsr	r25
    52c4:	87 95       	ror	r24
    52c6:	97 f9       	bld	r25, 7
    52c8:	08 95       	ret

000052ca <square>:
    52ca:	9b 01       	movw	r18, r22
    52cc:	ac 01       	movw	r20, r24
    52ce:	ac ca       	rjmp	.-2728   	; 0x4828 <__mulsf3>
    52d0:	4c df       	rcall	.-360    	; 0x516a <__fp_pscA>
    52d2:	30 f0       	brcs	.+12     	; 0x52e0 <square+0x16>
    52d4:	51 df       	rcall	.-350    	; 0x5178 <__fp_pscB>
    52d6:	20 f0       	brcs	.+8      	; 0x52e0 <square+0x16>
    52d8:	31 f4       	brne	.+12     	; 0x52e6 <square+0x1c>
    52da:	9f 3f       	cpi	r25, 0xFF	; 255
    52dc:	11 f4       	brne	.+4      	; 0x52e2 <square+0x18>
    52de:	1e f4       	brtc	.+6      	; 0x52e6 <square+0x1c>
    52e0:	1c cf       	rjmp	.-456    	; 0x511a <__fp_nan>
    52e2:	0e f4       	brtc	.+2      	; 0x52e6 <square+0x1c>
    52e4:	e0 95       	com	r30
    52e6:	e7 fb       	bst	r30, 7
    52e8:	12 cf       	rjmp	.-476    	; 0x510e <__fp_inf>

000052ea <__addsf3x>:
    52ea:	e9 2f       	mov	r30, r25
    52ec:	5d df       	rcall	.-326    	; 0x51a8 <__fp_split3>
    52ee:	80 f3       	brcs	.-32     	; 0x52d0 <square+0x6>
    52f0:	ba 17       	cp	r27, r26
    52f2:	62 07       	cpc	r22, r18
    52f4:	73 07       	cpc	r23, r19
    52f6:	84 07       	cpc	r24, r20
    52f8:	95 07       	cpc	r25, r21
    52fa:	18 f0       	brcs	.+6      	; 0x5302 <__addsf3x+0x18>
    52fc:	71 f4       	brne	.+28     	; 0x531a <__addsf3x+0x30>
    52fe:	9e f5       	brtc	.+102    	; 0x5366 <__addsf3x+0x7c>
    5300:	75 cf       	rjmp	.-278    	; 0x51ec <__fp_zero>
    5302:	0e f4       	brtc	.+2      	; 0x5306 <__addsf3x+0x1c>
    5304:	e0 95       	com	r30
    5306:	0b 2e       	mov	r0, r27
    5308:	ba 2f       	mov	r27, r26
    530a:	a0 2d       	mov	r26, r0
    530c:	0b 01       	movw	r0, r22
    530e:	b9 01       	movw	r22, r18
    5310:	90 01       	movw	r18, r0
    5312:	0c 01       	movw	r0, r24
    5314:	ca 01       	movw	r24, r20
    5316:	a0 01       	movw	r20, r0
    5318:	11 24       	eor	r1, r1
    531a:	ff 27       	eor	r31, r31
    531c:	59 1b       	sub	r21, r25
    531e:	99 f0       	breq	.+38     	; 0x5346 <__addsf3x+0x5c>
    5320:	59 3f       	cpi	r21, 0xF9	; 249
    5322:	50 f4       	brcc	.+20     	; 0x5338 <__addsf3x+0x4e>
    5324:	50 3e       	cpi	r21, 0xE0	; 224
    5326:	68 f1       	brcs	.+90     	; 0x5382 <__addsf3x+0x98>
    5328:	1a 16       	cp	r1, r26
    532a:	f0 40       	sbci	r31, 0x00	; 0
    532c:	a2 2f       	mov	r26, r18
    532e:	23 2f       	mov	r18, r19
    5330:	34 2f       	mov	r19, r20
    5332:	44 27       	eor	r20, r20
    5334:	58 5f       	subi	r21, 0xF8	; 248
    5336:	f3 cf       	rjmp	.-26     	; 0x531e <__addsf3x+0x34>
    5338:	46 95       	lsr	r20
    533a:	37 95       	ror	r19
    533c:	27 95       	ror	r18
    533e:	a7 95       	ror	r26
    5340:	f0 40       	sbci	r31, 0x00	; 0
    5342:	53 95       	inc	r21
    5344:	c9 f7       	brne	.-14     	; 0x5338 <__addsf3x+0x4e>
    5346:	7e f4       	brtc	.+30     	; 0x5366 <__addsf3x+0x7c>
    5348:	1f 16       	cp	r1, r31
    534a:	ba 0b       	sbc	r27, r26
    534c:	62 0b       	sbc	r22, r18
    534e:	73 0b       	sbc	r23, r19
    5350:	84 0b       	sbc	r24, r20
    5352:	ba f0       	brmi	.+46     	; 0x5382 <__addsf3x+0x98>
    5354:	91 50       	subi	r25, 0x01	; 1
    5356:	a1 f0       	breq	.+40     	; 0x5380 <__addsf3x+0x96>
    5358:	ff 0f       	add	r31, r31
    535a:	bb 1f       	adc	r27, r27
    535c:	66 1f       	adc	r22, r22
    535e:	77 1f       	adc	r23, r23
    5360:	88 1f       	adc	r24, r24
    5362:	c2 f7       	brpl	.-16     	; 0x5354 <__addsf3x+0x6a>
    5364:	0e c0       	rjmp	.+28     	; 0x5382 <__addsf3x+0x98>
    5366:	ba 0f       	add	r27, r26
    5368:	62 1f       	adc	r22, r18
    536a:	73 1f       	adc	r23, r19
    536c:	84 1f       	adc	r24, r20
    536e:	48 f4       	brcc	.+18     	; 0x5382 <__addsf3x+0x98>
    5370:	87 95       	ror	r24
    5372:	77 95       	ror	r23
    5374:	67 95       	ror	r22
    5376:	b7 95       	ror	r27
    5378:	f7 95       	ror	r31
    537a:	9e 3f       	cpi	r25, 0xFE	; 254
    537c:	08 f0       	brcs	.+2      	; 0x5380 <__addsf3x+0x96>
    537e:	b3 cf       	rjmp	.-154    	; 0x52e6 <square+0x1c>
    5380:	93 95       	inc	r25
    5382:	88 0f       	add	r24, r24
    5384:	08 f0       	brcs	.+2      	; 0x5388 <__addsf3x+0x9e>
    5386:	99 27       	eor	r25, r25
    5388:	ee 0f       	add	r30, r30
    538a:	97 95       	ror	r25
    538c:	87 95       	ror	r24
    538e:	08 95       	ret

00005390 <__divsf3>:
    5390:	63 de       	rcall	.-826    	; 0x5058 <__divsf3x>
    5392:	f9 ce       	rjmp	.-526    	; 0x5186 <__fp_round>

00005394 <_exit>:
    5394:	ff cf       	rjmp	.-2      	; 0x5394 <_exit>
