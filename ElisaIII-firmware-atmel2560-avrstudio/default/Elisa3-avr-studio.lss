
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00004cbe  00004d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800324  00800324  00004e76  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  000071b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  000078ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000eb4  00000000  00000000  00007b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000040f1  00000000  00000000  00008a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000164c  00000000  00000000  0000cb17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000048a3  00000000  00000000  0000e163  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000690  00000000  00000000  00012a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e94  00000000  00000000  00013098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014d2  00000000  00000000  00013f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f3  00000000  00000000  000153fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000140  00000000  00000000  000155f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__vector_32>
      84:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__vector_42>
      ac:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	96 0a       	sbc	r9, r22
      e6:	7a 0a       	sbc	r7, r26
      e8:	48 0a       	sbc	r4, r24
      ea:	0b 0b       	sbc	r16, r27
      ec:	d5 0a       	sbc	r13, r21
      ee:	fe 0a       	sbc	r15, r30
      f0:	1f 0a       	sbc	r1, r31
      f2:	03 0a       	sbc	r0, r19
      f4:	d6 09       	sbc	r29, r6
      f6:	be 09       	sbc	r27, r14
      f8:	5f 09       	sbc	r21, r15
      fa:	5f 09       	sbc	r21, r15
      fc:	5f 09       	sbc	r21, r15
      fe:	5f 09       	sbc	r21, r15
     100:	5f 09       	sbc	r21, r15
     102:	5f 09       	sbc	r21, r15
     104:	b2 09       	sbc	r27, r2
     106:	a7 09       	sbc	r26, r7
     108:	5f 09       	sbc	r21, r15
     10a:	5f 09       	sbc	r21, r15
     10c:	5f 09       	sbc	r21, r15
     10e:	5f 09       	sbc	r21, r15
     110:	5f 09       	sbc	r21, r15
     112:	5f 09       	sbc	r21, r15
     114:	5f 09       	sbc	r21, r15
     116:	5f 09       	sbc	r21, r15
     118:	5f 09       	sbc	r21, r15
     11a:	5f 09       	sbc	r21, r15
     11c:	5f 09       	sbc	r21, r15
     11e:	5f 09       	sbc	r21, r15
     120:	d6 09       	sbc	r29, r6
     122:	48 0a       	sbc	r4, r24
     124:	9b 09       	sbc	r25, r11
     126:	96 09       	sbc	r25, r6
     128:	5f 09       	sbc	r21, r15
     12a:	5f 09       	sbc	r21, r15
     12c:	5f 09       	sbc	r21, r15
     12e:	5f 09       	sbc	r21, r15
     130:	5f 09       	sbc	r21, r15
     132:	5f 09       	sbc	r21, r15
     134:	5f 09       	sbc	r21, r15
     136:	5f 09       	sbc	r21, r15
     138:	5f 09       	sbc	r21, r15
     13a:	5f 09       	sbc	r21, r15
     13c:	5f 09       	sbc	r21, r15
     13e:	5f 09       	sbc	r21, r15
     140:	d5 0a       	sbc	r13, r21
     142:	1f 0a       	sbc	r1, r31
     144:	5f 09       	sbc	r21, r15
     146:	5f 09       	sbc	r21, r15
     148:	96 0a       	sbc	r9, r22
     14a:	fe 0a       	sbc	r15, r30
     14c:	bf 0a       	sbc	r11, r31
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ee eb       	ldi	r30, 0xBE	; 190
     194:	fc e4       	ldi	r31, 0x4C	; 76
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a4 35       	cpi	r26, 0x54	; 84
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29

	choosePeripheral = 1;					// usart menu
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
     1ce:	0e 94 92 12 	call	0x2524	; 0x2524 <initPeripherals>

	calibrateSensors();
     1d2:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <calibrateSensors>

	srand(TCNT3);
     1d6:	80 91 94 00 	lds	r24, 0x0094
     1da:	90 91 95 00 	lds	r25, 0x0095
     1de:	0e 94 06 24 	call	0x480c	; 0x480c <srand>

		if(delayCounter >= (PAUSE_2_SEC)) {
			
			delayCounter = 0;
			
			measBattery = 1;
     1e2:	ff 24       	eor	r15, r15
     1e4:	f3 94       	inc	r15
			usartTransmit(CHARGE_ON);
*/

			//sleep(20);

			pwm_red = rand() % 255;
     1e6:	0f ef       	ldi	r16, 0xFF	; 255
     1e8:	10 e0       	ldi	r17, 0x00	; 0
		handleIRRemoteCommands();


		handleRFCommands();

		pwm_left_desired = 100;
     1ea:	c4 e6       	ldi	r28, 0x64	; 100
     1ec:	d0 e0       	ldi	r29, 0x00	; 0

	while(1) {

		//PORTB ^= (1 << 6); 				// toggle the green led

		currentSelector = getSelector();	// update selector position
     1ee:	0e 94 6d 12 	call	0x24da	; 0x24da <getSelector>
     1f2:	80 93 21 04 	sts	0x0421, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1f6:	0e 94 31 1b 	call	0x3662	; 0x3662 <readAccelXYZ>

		computeAngle();
     1fa:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <computeAngle>
		if(delayCounter%(PAUSE_10_MSEC) == 0) {
			// do something every 10 milliseconds
		}
*/

		if(delayCounter >= (PAUSE_2_SEC)) {
     1fe:	80 91 1f 04 	lds	r24, 0x041F
     202:	90 91 20 04 	lds	r25, 0x0420
     206:	2b e4       	ldi	r18, 0x4B	; 75
     208:	8e 31       	cpi	r24, 0x1E	; 30
     20a:	92 07       	cpc	r25, r18
     20c:	08 f0       	brcs	.+2      	; 0x210 <main+0x52>
     20e:	fe c0       	rjmp	.+508    	; 0x40c <main+0x24e>
			updateBlueLed(pwm_blue);

		}


		handleIRRemoteCommands();
     210:	0e 94 4d 09 	call	0x129a	; 0x129a <handleIRRemoteCommands>


		handleRFCommands();
     214:	0e 94 ce 04 	call	0x99c	; 0x99c <handleRFCommands>

		pwm_left_desired = 100;
     218:	d0 93 f2 03 	sts	0x03F2, r29
     21c:	c0 93 f1 03 	sts	0x03F1, r28
		pwm_right_desired = 100;
     220:	d0 93 f0 03 	sts	0x03F0, r29
     224:	c0 93 ef 03 	sts	0x03EF, r28
		obstacleAvoidanceEnabled = 1;
     228:	f0 92 24 04 	sts	0x0424, r15


		if(currentSelector == 0) {	// no control
     22c:	80 91 21 04 	lds	r24, 0x0421
     230:	88 23       	and	r24, r24
     232:	09 f0       	breq	.+2      	; 0x236 <main+0x78>
     234:	67 c0       	rjmp	.+206    	; 0x304 <main+0x146>

			// compute velocities even if they aren't used
			if(compute_left_vel) {
     236:	80 91 07 02 	lds	r24, 0x0207
     23a:	88 23       	and	r24, r24
     23c:	91 f0       	breq	.+36     	; 0x262 <main+0xa4>
				last_left_vel = left_vel_sum>>2;
     23e:	80 91 e3 03 	lds	r24, 0x03E3
     242:	90 91 e4 03 	lds	r25, 0x03E4
     246:	96 95       	lsr	r25
     248:	87 95       	ror	r24
     24a:	96 95       	lsr	r25
     24c:	87 95       	ror	r24
     24e:	90 93 e8 03 	sts	0x03E8, r25
     252:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     256:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     25a:	10 92 e4 03 	sts	0x03E4, r1
     25e:	10 92 e3 03 	sts	0x03E3, r1
			}

			if(compute_right_vel) {
     262:	80 91 08 02 	lds	r24, 0x0208
     266:	88 23       	and	r24, r24
     268:	91 f0       	breq	.+36     	; 0x28e <main+0xd0>
				last_right_vel = right_vel_sum>>2;
     26a:	80 91 e5 03 	lds	r24, 0x03E5
     26e:	90 91 e6 03 	lds	r25, 0x03E6
     272:	96 95       	lsr	r25
     274:	87 95       	ror	r24
     276:	96 95       	lsr	r25
     278:	87 95       	ror	r24
     27a:	90 93 ea 03 	sts	0x03EA, r25
     27e:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     282:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     286:	10 92 e6 03 	sts	0x03E6, r1
     28a:	10 92 e5 03 	sts	0x03E5, r1
			}


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     28e:	d0 93 fc 03 	sts	0x03FC, r29
     292:	c0 93 fb 03 	sts	0x03FB, r28
			pwm_left_working = pwm_left_desired;
     296:	d0 93 fe 03 	sts	0x03FE, r29
     29a:	c0 93 fd 03 	sts	0x03FD, r28
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     29e:	8d ef       	ldi	r24, 0xFD	; 253
     2a0:	93 e0       	ldi	r25, 0x03	; 3
     2a2:	6b ef       	ldi	r22, 0xFB	; 251
     2a4:	73 e0       	ldi	r23, 0x03	; 3
     2a6:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <obstacleAvoidance>
			}
	        pwm_left_desired_to_control = pwm_left_working;
     2aa:	20 91 fd 03 	lds	r18, 0x03FD
     2ae:	30 91 fe 03 	lds	r19, 0x03FE
     2b2:	30 93 e2 03 	sts	0x03E2, r19
     2b6:	20 93 e1 03 	sts	0x03E1, r18
	        pwm_right_desired_to_control = pwm_right_working;
     2ba:	80 91 fb 03 	lds	r24, 0x03FB
     2be:	90 91 fc 03 	lds	r25, 0x03FC
     2c2:	90 93 e0 03 	sts	0x03E0, r25
     2c6:	80 93 df 03 	sts	0x03DF, r24

			pwm_left = pwm_left_working;
     2ca:	30 93 ee 03 	sts	0x03EE, r19
     2ce:	20 93 ed 03 	sts	0x03ED, r18
			pwm_right = pwm_right_working;
     2d2:	90 93 ec 03 	sts	0x03EC, r25
     2d6:	80 93 eb 03 	sts	0x03EB, r24

			if(pwm_right > 0) {
     2da:	18 16       	cp	r1, r24
     2dc:	19 06       	cpc	r1, r25
     2de:	0c f0       	brlt	.+2      	; 0x2e2 <main+0x124>
     2e0:	1e c1       	rjmp	.+572    	; 0x51e <main+0x360>
				OCR3A = (unsigned int)pwm_right;
     2e2:	90 93 99 00 	sts	0x0099, r25
     2e6:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     2ea:	80 91 ed 03 	lds	r24, 0x03ED
     2ee:	90 91 ee 03 	lds	r25, 0x03EE
     2f2:	18 16       	cp	r1, r24
     2f4:	19 06       	cpc	r1, r25
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <main+0x13c>
     2f8:	07 c1       	rjmp	.+526    	; 0x508 <main+0x34a>
				OCR4A = (unsigned int)pwm_left;
     2fa:	90 93 a9 00 	sts	0x00A9, r25
     2fe:	80 93 a8 00 	sts	0x00A8, r24
     302:	75 cf       	rjmp	.-278    	; 0x1ee <main+0x30>
				OCR4A = 0;
				OCR4B = 0;
			}


		} else if(currentSelector == 1) {		// only horizontal speed control
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	09 f4       	brne	.+2      	; 0x30a <main+0x14c>
     308:	a9 c0       	rjmp	.+338    	; 0x45c <main+0x29e>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both horizontal and vertical speed control
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	09 f0       	breq	.+2      	; 0x310 <main+0x152>
     30e:	6f cf       	rjmp	.-290    	; 0x1ee <main+0x30>

			pwm_left_working = pwm_left_desired;
     310:	d0 93 fe 03 	sts	0x03FE, r29
     314:	c0 93 fd 03 	sts	0x03FD, r28
			pwm_right_working = pwm_right_desired;
     318:	d0 93 fc 03 	sts	0x03FC, r29
     31c:	c0 93 fb 03 	sts	0x03FB, r28
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     320:	8d ef       	ldi	r24, 0xFD	; 253
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	6b ef       	ldi	r22, 0xFB	; 251
     326:	73 e0       	ldi	r23, 0x03	; 3
     328:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <obstacleAvoidance>
			}
			pwm_left_desired_to_control = pwm_left_working;
     32c:	80 91 fd 03 	lds	r24, 0x03FD
     330:	90 91 fe 03 	lds	r25, 0x03FE
     334:	90 93 e2 03 	sts	0x03E2, r25
     338:	80 93 e1 03 	sts	0x03E1, r24
			pwm_right_desired_to_control = pwm_right_working;
     33c:	80 91 fb 03 	lds	r24, 0x03FB
     340:	90 91 fc 03 	lds	r25, 0x03FC
     344:	90 93 e0 03 	sts	0x03E0, r25
     348:	80 93 df 03 	sts	0x03DF, r24

			if(compute_left_vel) {
     34c:	80 91 07 02 	lds	r24, 0x0207
     350:	88 23       	and	r24, r24
     352:	59 f1       	breq	.+86     	; 0x3aa <main+0x1ec>

				last_left_vel = left_vel_sum>>2;
     354:	80 91 e3 03 	lds	r24, 0x03E3
     358:	90 91 e4 03 	lds	r25, 0x03E4
     35c:	96 95       	lsr	r25
     35e:	87 95       	ror	r24
     360:	96 95       	lsr	r25
     362:	87 95       	ror	r24
     364:	90 93 e8 03 	sts	0x03E8, r25
     368:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     36c:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     370:	10 92 e4 03 	sts	0x03E4, r1
     374:	10 92 e3 03 	sts	0x03E3, r1

				if(robotPosition == HORIZONTAL_POS) {
     378:	80 91 16 02 	lds	r24, 0x0216
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	09 f4       	brne	.+2      	; 0x382 <main+0x1c4>
     380:	14 c1       	rjmp	.+552    	; 0x5aa <main+0x3ec>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
     382:	8d ef       	ldi	r24, 0xFD	; 253
     384:	93 e0       	ldi	r25, 0x03	; 3
     386:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
     38a:	80 91 fd 03 	lds	r24, 0x03FD
     38e:	90 91 fe 03 	lds	r25, 0x03FE
     392:	90 93 ee 03 	sts	0x03EE, r25
     396:	80 93 ed 03 	sts	0x03ED, r24

				if(pwm_left > 0) {
     39a:	18 16       	cp	r1, r24
     39c:	19 06       	cpc	r1, r25
     39e:	0c f0       	brlt	.+2      	; 0x3a2 <main+0x1e4>
     3a0:	09 c1       	rjmp	.+530    	; 0x5b4 <main+0x3f6>
					OCR4A = (unsigned int)pwm_left;
     3a2:	90 93 a9 00 	sts	0x00A9, r25
     3a6:	80 93 a8 00 	sts	0x00A8, r24
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     3aa:	80 91 08 02 	lds	r24, 0x0208
     3ae:	88 23       	and	r24, r24
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <main+0x1f6>
     3b2:	1d cf       	rjmp	.-454    	; 0x1ee <main+0x30>

				last_right_vel = right_vel_sum>>2;
     3b4:	80 91 e5 03 	lds	r24, 0x03E5
     3b8:	90 91 e6 03 	lds	r25, 0x03E6
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	90 93 ea 03 	sts	0x03EA, r25
     3c8:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     3cc:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     3d0:	10 92 e6 03 	sts	0x03E6, r1
     3d4:	10 92 e5 03 	sts	0x03E5, r1

				if(robotPosition == HORIZONTAL_POS) {
     3d8:	80 91 16 02 	lds	r24, 0x0216
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	09 f4       	brne	.+2      	; 0x3e2 <main+0x224>
     3e0:	df c0       	rjmp	.+446    	; 0x5a0 <main+0x3e2>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
     3e2:	8b ef       	ldi	r24, 0xFB	; 251
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	0e 94 9f 0c 	call	0x193e	; 0x193e <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
     3ea:	80 91 fb 03 	lds	r24, 0x03FB
     3ee:	90 91 fc 03 	lds	r25, 0x03FC
     3f2:	90 93 ec 03 	sts	0x03EC, r25
     3f6:	80 93 eb 03 	sts	0x03EB, r24

				if(pwm_right > 0) {
     3fa:	18 16       	cp	r1, r24
     3fc:	19 06       	cpc	r1, r25
     3fe:	0c f0       	brlt	.+2      	; 0x402 <main+0x244>
     400:	77 c0       	rjmp	.+238    	; 0x4f0 <main+0x332>
					OCR3A = (unsigned int)pwm_right;
     402:	90 93 99 00 	sts	0x0099, r25
     406:	80 93 98 00 	sts	0x0098, r24
     40a:	f1 ce       	rjmp	.-542    	; 0x1ee <main+0x30>
		}
*/

		if(delayCounter >= (PAUSE_2_SEC)) {
			
			delayCounter = 0;
     40c:	10 92 20 04 	sts	0x0420, r1
     410:	10 92 1f 04 	sts	0x041F, r1
			
			measBattery = 1;
     414:	f0 92 c5 03 	sts	0x03C5, r15
			usartTransmit(CHARGE_ON);
*/

			//sleep(20);

			pwm_red = rand() % 255;
     418:	0e 94 01 24 	call	0x4802	; 0x4802 <rand>
     41c:	b8 01       	movw	r22, r16
     41e:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
     422:	80 93 0c 02 	sts	0x020C, r24
			pwm_green = rand() % 255;
     426:	0e 94 01 24 	call	0x4802	; 0x4802 <rand>
     42a:	b8 01       	movw	r22, r16
     42c:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
     430:	80 93 0d 02 	sts	0x020D, r24
			pwm_blue = rand() % 255;
     434:	0e 94 01 24 	call	0x4802	; 0x4802 <rand>
     438:	b8 01       	movw	r22, r16
     43a:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
     43e:	80 93 0e 02 	sts	0x020E, r24
			updateRedLed(pwm_red);
     442:	80 91 0c 02 	lds	r24, 0x020C
     446:	0e 94 c8 19 	call	0x3390	; 0x3390 <updateRedLed>
			updateGreenLed(pwm_green);
     44a:	80 91 0d 02 	lds	r24, 0x020D
     44e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <updateGreenLed>
			updateBlueLed(pwm_blue);
     452:	80 91 0e 02 	lds	r24, 0x020E
     456:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <updateBlueLed>
     45a:	da ce       	rjmp	.-588    	; 0x210 <main+0x52>
			}


		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
     45c:	d0 93 fe 03 	sts	0x03FE, r29
     460:	c0 93 fd 03 	sts	0x03FD, r28
			pwm_right_working = pwm_right_desired;
     464:	d0 93 fc 03 	sts	0x03FC, r29
     468:	c0 93 fb 03 	sts	0x03FB, r28
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     46c:	8d ef       	ldi	r24, 0xFD	; 253
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	6b ef       	ldi	r22, 0xFB	; 251
     472:	73 e0       	ldi	r23, 0x03	; 3
     474:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <obstacleAvoidance>
			}
			pwm_left_desired_to_control = pwm_left_working;
     478:	80 91 fd 03 	lds	r24, 0x03FD
     47c:	90 91 fe 03 	lds	r25, 0x03FE
     480:	90 93 e2 03 	sts	0x03E2, r25
     484:	80 93 e1 03 	sts	0x03E1, r24
			pwm_right_desired_to_control = pwm_right_working;
     488:	80 91 fb 03 	lds	r24, 0x03FB
     48c:	90 91 fc 03 	lds	r25, 0x03FC
     490:	90 93 e0 03 	sts	0x03E0, r25
     494:	80 93 df 03 	sts	0x03DF, r24

			if(compute_left_vel) {
     498:	80 91 07 02 	lds	r24, 0x0207
     49c:	88 23       	and	r24, r24
     49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0x2e4>
     4a0:	49 c0       	rjmp	.+146    	; 0x534 <main+0x376>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     4a2:	80 91 08 02 	lds	r24, 0x0208
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <main+0x2ee>
     4aa:	a1 ce       	rjmp	.-702    	; 0x1ee <main+0x30>

				last_right_vel = right_vel_sum>>2;
     4ac:	80 91 e5 03 	lds	r24, 0x03E5
     4b0:	90 91 e6 03 	lds	r25, 0x03E6
     4b4:	96 95       	lsr	r25
     4b6:	87 95       	ror	r24
     4b8:	96 95       	lsr	r25
     4ba:	87 95       	ror	r24
     4bc:	90 93 ea 03 	sts	0x03EA, r25
     4c0:	80 93 e9 03 	sts	0x03E9, r24
				compute_right_vel = 0;
     4c4:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     4c8:	10 92 e6 03 	sts	0x03E6, r1
     4cc:	10 92 e5 03 	sts	0x03E5, r1

				start_horizontal_speed_control_right(&pwm_right_working);
     4d0:	8b ef       	ldi	r24, 0xFB	; 251
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <start_horizontal_speed_control_right>

				pwm_right = pwm_right_working;
     4d8:	80 91 fb 03 	lds	r24, 0x03FB
     4dc:	90 91 fc 03 	lds	r25, 0x03FC
     4e0:	90 93 ec 03 	sts	0x03EC, r25
     4e4:	80 93 eb 03 	sts	0x03EB, r24

				if(pwm_right > 0) {
     4e8:	18 16       	cp	r1, r24
     4ea:	19 06       	cpc	r1, r25
     4ec:	0c f4       	brge	.+2      	; 0x4f0 <main+0x332>
     4ee:	89 cf       	rjmp	.-238    	; 0x402 <main+0x244>

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <main+0x338>
     4f4:	75 c0       	rjmp	.+234    	; 0x5e0 <main+0x422>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
     4f6:	10 92 99 00 	sts	0x0099, r1
     4fa:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
     4fe:	10 92 9b 00 	sts	0x009B, r1
     502:	10 92 9a 00 	sts	0x009A, r1
     506:	73 ce       	rjmp	.-794    	; 0x1ee <main+0x30>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	d1 f5       	brne	.+116    	; 0x580 <main+0x3c2>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
     50c:	10 92 a9 00 	sts	0x00A9, r1
     510:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
     514:	10 92 ab 00 	sts	0x00AB, r1
     518:	10 92 aa 00 	sts	0x00AA, r1
     51c:	68 ce       	rjmp	.-816    	; 0x1ee <main+0x30>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	b9 f5       	brne	.+110    	; 0x590 <main+0x3d2>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
     522:	10 92 99 00 	sts	0x0099, r1
     526:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
     52a:	10 92 9b 00 	sts	0x009B, r1
     52e:	10 92 9a 00 	sts	0x009A, r1
     532:	db ce       	rjmp	.-586    	; 0x2ea <main+0x12c>
			pwm_left_desired_to_control = pwm_left_working;
			pwm_right_desired_to_control = pwm_right_working;

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;	// 4 samples taken for measuring velocity
     534:	80 91 e3 03 	lds	r24, 0x03E3
     538:	90 91 e4 03 	lds	r25, 0x03E4
     53c:	96 95       	lsr	r25
     53e:	87 95       	ror	r24
     540:	96 95       	lsr	r25
     542:	87 95       	ror	r24
     544:	90 93 e8 03 	sts	0x03E8, r25
     548:	80 93 e7 03 	sts	0x03E7, r24
				compute_left_vel = 0;
     54c:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     550:	10 92 e4 03 	sts	0x03E4, r1
     554:	10 92 e3 03 	sts	0x03E3, r1

				start_horizontal_speed_control_left(&pwm_left_working);
     558:	8d ef       	ldi	r24, 0xFD	; 253
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <start_horizontal_speed_control_left>

				pwm_left = pwm_left_working;
     560:	80 91 fd 03 	lds	r24, 0x03FD
     564:	90 91 fe 03 	lds	r25, 0x03FE
     568:	90 93 ee 03 	sts	0x03EE, r25
     56c:	80 93 ed 03 	sts	0x03ED, r24

				if(pwm_left > 0) {
     570:	18 16       	cp	r1, r24
     572:	19 06       	cpc	r1, r25
     574:	54 f5       	brge	.+84     	; 0x5ca <main+0x40c>
					OCR4A = (unsigned int)pwm_left;
     576:	90 93 a9 00 	sts	0x00A9, r25
     57a:	80 93 a8 00 	sts	0x00A8, r24
     57e:	91 cf       	rjmp	.-222    	; 0x4a2 <main+0x2e4>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
     580:	90 95       	com	r25
     582:	81 95       	neg	r24
     584:	9f 4f       	sbci	r25, 0xFF	; 255
     586:	90 93 ab 00 	sts	0x00AB, r25
     58a:	80 93 aa 00 	sts	0x00AA, r24
     58e:	2f ce       	rjmp	.-930    	; 0x1ee <main+0x30>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
     590:	90 95       	com	r25
     592:	81 95       	neg	r24
     594:	9f 4f       	sbci	r25, 0xFF	; 255
     596:	90 93 9b 00 	sts	0x009B, r25
     59a:	80 93 9a 00 	sts	0x009A, r24
     59e:	a5 ce       	rjmp	.-694    	; 0x2ea <main+0x12c>
				compute_right_vel = 0;
				right_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
     5a0:	8b ef       	ldi	r24, 0xFB	; 251
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <start_horizontal_speed_control_right>
     5a8:	20 cf       	rjmp	.-448    	; 0x3ea <main+0x22c>
				compute_left_vel = 0;
				left_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
     5aa:	8d ef       	ldi	r24, 0xFD	; 253
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <start_horizontal_speed_control_left>
     5b2:	eb ce       	rjmp	.-554    	; 0x38a <main+0x1cc>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	e1 f4       	brne	.+56     	; 0x5f0 <main+0x432>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5b8:	10 92 a9 00 	sts	0x00A9, r1
     5bc:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5c0:	10 92 ab 00 	sts	0x00AB, r1
     5c4:	10 92 aa 00 	sts	0x00AA, r1
     5c8:	f0 ce       	rjmp	.-544    	; 0x3aa <main+0x1ec>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	c9 f4       	brne	.+50     	; 0x600 <main+0x442>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5ce:	10 92 a9 00 	sts	0x00A9, r1
     5d2:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5d6:	10 92 ab 00 	sts	0x00AB, r1
     5da:	10 92 aa 00 	sts	0x00AA, r1
     5de:	61 cf       	rjmp	.-318    	; 0x4a2 <main+0x2e4>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
     5e0:	90 95       	com	r25
     5e2:	81 95       	neg	r24
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	90 93 9b 00 	sts	0x009B, r25
     5ea:	80 93 9a 00 	sts	0x009A, r24
     5ee:	ff cd       	rjmp	.-1026   	; 0x1ee <main+0x30>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5f0:	90 95       	com	r25
     5f2:	81 95       	neg	r24
     5f4:	9f 4f       	sbci	r25, 0xFF	; 255
     5f6:	90 93 ab 00 	sts	0x00AB, r25
     5fa:	80 93 aa 00 	sts	0x00AA, r24
     5fe:	d5 ce       	rjmp	.-598    	; 0x3aa <main+0x1ec>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     600:	90 95       	com	r25
     602:	81 95       	neg	r24
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	90 93 ab 00 	sts	0x00AB, r25
     60a:	80 93 aa 00 	sts	0x00AA, r24
     60e:	49 cf       	rjmp	.-366    	; 0x4a2 <main+0x2e4>

00000610 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     610:	84 b1       	in	r24, 0x04	; 4
     612:	80 7f       	andi	r24, 0xF0	; 240
     614:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     616:	84 b1       	in	r24, 0x04	; 4
     618:	87 60       	ori	r24, 0x07	; 7
     61a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     61c:	80 e5       	ldi	r24, 0x50	; 80
     61e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     620:	8d b5       	in	r24, 0x2d	; 45
     622:	81 60       	ori	r24, 0x01	; 1
     624:	8d bd       	out	0x2d, r24	; 45

}
     626:	08 95       	ret

00000628 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     628:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     62a:	1d bc       	out	0x2d, r1	; 45
}
     62c:	08 95       	ret

0000062e <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     62e:	44 23       	and	r20, r20
     630:	79 f0       	breq	.+30     	; 0x650 <SPI_ReadWrite_Block+0x22>
     632:	a8 2f       	mov	r26, r24
     634:	b9 2f       	mov	r27, r25
     636:	e6 2f       	mov	r30, r22
     638:	f7 2f       	mov	r31, r23
     63a:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     63c:	9d 91       	ld	r25, X+
     63e:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     640:	0d b4       	in	r0, 0x2d	; 45
     642:	07 fe       	sbrs	r0, 7
     644:	fd cf       	rjmp	.-6      	; 0x640 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     646:	9e b5       	in	r25, 0x2e	; 46
     648:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	84 17       	cp	r24, r20
     64e:	b0 f3       	brcs	.-20     	; 0x63c <SPI_ReadWrite_Block+0xe>
     650:	08 95       	ret

00000652 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     652:	66 23       	and	r22, r22
     654:	59 f0       	breq	.+22     	; 0x66c <SPI_Write_Block+0x1a>
     656:	e8 2f       	mov	r30, r24
     658:	f9 2f       	mov	r31, r25
     65a:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     65c:	91 91       	ld	r25, Z+
     65e:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     660:	0d b4       	in	r0, 0x2d	; 45
     662:	07 fe       	sbrs	r0, 7
     664:	fd cf       	rjmp	.-6      	; 0x660 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	86 17       	cp	r24, r22
     66a:	c0 f3       	brcs	.-16     	; 0x65c <SPI_Write_Block+0xa>
     66c:	08 95       	ret

0000066e <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     66e:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <SPI_Write_Byte+0x2>
    return SPDR;
     676:	8e b5       	in	r24, 0x2e	; 46
}
     678:	08 95       	ret

0000067a <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	00 d0       	rcall	.+0      	; 0x684 <mirf_config+0xa>
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     688:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     68a:	80 e2       	ldi	r24, 0x20	; 32
     68c:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     690:	8d e0       	ldi	r24, 0x0D	; 13
     692:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     696:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     698:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     69a:	83 e2       	ldi	r24, 0x23	; 35
     69c:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     6a6:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
     6a8:	8c e0       	ldi	r24, 0x0C	; 12
     6aa:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
     6ac:	80 e8       	ldi	r24, 0x80	; 128
     6ae:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     6b0:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6b4:	80 e3       	ldi	r24, 0x30	; 48
     6b6:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6ba:	8e 01       	movw	r16, r28
     6bc:	0f 5f       	subi	r16, 0xFF	; 255
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	c8 01       	movw	r24, r16
     6c2:	63 e0       	ldi	r22, 0x03	; 3
     6c4:	0e 94 29 03 	call	0x652	; 0x652 <SPI_Write_Block>
    mirf_CSN_hi;
     6c8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6cc:	8a e2       	ldi	r24, 0x2A	; 42
     6ce:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6d2:	c8 01       	movw	r24, r16
     6d4:	63 e0       	ldi	r22, 0x03	; 3
     6d6:	0e 94 29 03 	call	0x652	; 0x652 <SPI_Write_Block>
    mirf_CSN_hi;
     6da:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6de:	81 e2       	ldi	r24, 0x21	; 33
     6e0:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     6ea:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6ee:	82 e2       	ldi	r24, 0x22	; 34
     6f0:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     6fa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6fe:	84 e2       	ldi	r24, 0x24	; 36
     700:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     704:	82 e1       	ldi	r24, 0x12	; 18
     706:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     70a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     70c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     70e:	85 e2       	ldi	r24, 0x25	; 37
     710:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     714:	88 e2       	ldi	r24, 0x28	; 40
     716:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     71a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     71c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     71e:	81 e3       	ldi	r24, 0x31	; 49
     720:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     724:	8d e0       	ldi	r24, 0x0D	; 13
     726:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     72a:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     72c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     72e:	80 e5       	ldi	r24, 0x50	; 80
     730:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     734:	83 e7       	ldi	r24, 0x73	; 115
     736:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     73a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     73c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     73e:	8c e3       	ldi	r24, 0x3C	; 60
     740:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     74a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     74c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     74e:	8d e3       	ldi	r24, 0x3D	; 61
     750:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     754:	86 e0       	ldi	r24, 0x06	; 6
     756:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     75a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     75c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     75e:	80 e2       	ldi	r24, 0x20	; 32
     760:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     764:	8f e0       	ldi	r24, 0x0F	; 15
     766:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     76a:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     77c:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     77e:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     780:	0e 94 3d 03 	call	0x67a	; 0x67a <mirf_config>
}
     784:	08 95       	ret

00000786 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     78c:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     78e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     790:	8a e2       	ldi	r24, 0x2A	; 42
     792:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     796:	ce 01       	movw	r24, r28
     798:	65 e0       	ldi	r22, 0x05	; 5
     79a:	0e 94 29 03 	call	0x652	; 0x652 <SPI_Write_Block>
    mirf_CSN_hi;
     79e:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     7a0:	2c 9a       	sbi	0x05, 4	; 5
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     7ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     7b0:	80 e3       	ldi	r24, 0x30	; 48
     7b2:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     7b6:	ce 01       	movw	r24, r28
     7b8:	65 e0       	ldi	r22, 0x05	; 5
     7ba:	0e 94 29 03 	call	0x652	; 0x652 <SPI_Write_Block>
    mirf_CSN_hi;
     7be:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     7c6:	80 91 27 04 	lds	r24, 0x0427
     7ca:	88 23       	and	r24, r24
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <mirf_data_ready+0xc>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     7d0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     7d2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     7da:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     7dc:	80 74       	andi	r24, 0x40	; 64
     7de:	08 95       	ret

000007e0 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	0f 92       	push	r0
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     7ea:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     7ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     7ee:	87 e1       	ldi	r24, 0x17	; 23
     7f0:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     7f4:	be 01       	movw	r22, r28
     7f6:	6f 5f       	subi	r22, 0xFF	; 255
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255
     7fa:	cb 01       	movw	r24, r22
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	0e 94 17 03 	call	0x62e	; 0x62e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     802:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     804:	89 81       	ldd	r24, Y+1	; 0x01
}
     806:	81 70       	andi	r24, 0x01	; 1
     808:	0f 90       	pop	r0
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	08 95       	ret

00000810 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     810:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     812:	82 ee       	ldi	r24, 0xE2	; 226
     814:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     818:	28 9a       	sbi	0x05, 0	; 5

}
     81a:	08 95       	ret

0000081c <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     822:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     824:	81 e6       	ldi	r24, 0x61	; 97
     826:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     82a:	ce 01       	movw	r24, r28
     82c:	be 01       	movw	r22, r28
     82e:	4d e0       	ldi	r20, 0x0D	; 13
     830:	0e 94 17 03 	call	0x62e	; 0x62e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     834:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     836:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     838:	87 e2       	ldi	r24, 0x27	; 39
     83a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     844:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	0f 92       	push	r0
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     856:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     858:	8f 71       	andi	r24, 0x1F	; 31
     85a:	80 62       	ori	r24, 0x20	; 32
     85c:	69 83       	std	Y+1, r22	; 0x01
     85e:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	86 2f       	mov	r24, r22
     866:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     86a:	28 9a       	sbi	0x05, 0	; 5
}
     86c:	0f 90       	pop	r0
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	0f 92       	push	r0
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     884:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     886:	8f 71       	andi	r24, 0x1F	; 31
     888:	49 83       	std	Y+1, r20	; 0x01
     88a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     88e:	c8 01       	movw	r24, r16
     890:	b8 01       	movw	r22, r16
     892:	49 81       	ldd	r20, Y+1	; 0x01
     894:	0e 94 17 03 	call	0x62e	; 0x62e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     898:	28 9a       	sbi	0x05, 0	; 5
}
     89a:	0f 90       	pop	r0
     89c:	cf 91       	pop	r28
     89e:	df 91       	pop	r29
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	0f 92       	push	r0
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     8b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8b8:	8f 71       	andi	r24, 0x1F	; 31
     8ba:	80 62       	ori	r24, 0x20	; 32
     8bc:	49 83       	std	Y+1, r20	; 0x01
     8be:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     8c2:	c8 01       	movw	r24, r16
     8c4:	49 81       	ldd	r20, Y+1	; 0x01
     8c6:	64 2f       	mov	r22, r20
     8c8:	0e 94 29 03 	call	0x652	; 0x652 <SPI_Write_Block>
    mirf_CSN_hi;
     8cc:	28 9a       	sbi	0x05, 0	; 5
}
     8ce:	0f 90       	pop	r0
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	0f 92       	push	r0
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     8ea:	80 91 27 04 	lds	r24, 0x0427
     8ee:	88 23       	and	r24, r24
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <mirf_send+0x10>

    mirf_CE_lo;
     8f2:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 27 04 	sts	0x0427, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     8fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8fc:	80 e2       	ldi	r24, 0x20	; 32
     8fe:	69 83       	std	Y+1, r22	; 0x01
     900:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     904:	8a e4       	ldi	r24, 0x4A	; 74
     906:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     90a:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     90c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     90e:	81 ee       	ldi	r24, 0xE1	; 225
     910:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     914:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     916:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     918:	80 ea       	ldi	r24, 0xA0	; 160
     91a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     91e:	c8 01       	movw	r24, r16
     920:	69 81       	ldd	r22, Y+1	; 0x01
     922:	0e 94 29 03 	call	0x652	; 0x652 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     926:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     928:	2c 9a       	sbi	0x05, 4	; 5
}
     92a:	0f 90       	pop	r0
     92c:	cf 91       	pop	r28
     92e:	df 91       	pop	r29
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	0f 92       	push	r0
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	18 2f       	mov	r17, r24
     94a:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     94c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     94e:	81 ee       	ldi	r24, 0xE1	; 225
     950:	99 83       	std	Y+1, r25	; 0x01
     952:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     956:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     958:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     95a:	88 ea       	ldi	r24, 0xA8	; 168
     95c:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     960:	99 81       	ldd	r25, Y+1	; 0x01
     962:	00 23       	and	r16, r16
     964:	61 f0       	breq	.+24     	; 0x97e <writeAckPayload+0x48>
     966:	61 2f       	mov	r22, r17
     968:	79 2f       	mov	r23, r25
     96a:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     96c:	f7 01       	movw	r30, r14
     96e:	81 91       	ld	r24, Z+
     970:	7f 01       	movw	r14, r30
     972:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     976:	8e 2d       	mov	r24, r14
     978:	81 1b       	sub	r24, r17
     97a:	80 17       	cp	r24, r16
     97c:	b8 f3       	brcs	.-18     	; 0x96c <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     97e:	28 9a       	sbi	0x05, 0	; 5


}
     980:	0f 90       	pop	r0
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	08 95       	ret

00000990 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     990:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     992:	81 ee       	ldi	r24, 0xE1	; 225
     994:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     998:	28 9a       	sbi	0x05, 0	; 5

}
     99a:	08 95       	ret

0000099c <handleRFCommands>:

void handleRFCommands() {
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     9a2:	80 91 27 04 	lds	r24, 0x0427
     9a6:	88 23       	and	r24, r24
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     9b2:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     9ba:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     9bc:	86 ff       	sbrs	r24, 6
     9be:	f5 cf       	rjmp	.-22     	; 0x9aa <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9c2:	87 e2       	ldi	r24, 0x27	; 39
     9c4:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9c8:	80 e7       	ldi	r24, 0x70	; 112
     9ca:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     9ce:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     9d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     9d2:	81 e6       	ldi	r24, 0x61	; 97
     9d4:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     9d8:	84 e4       	ldi	r24, 0x44	; 68
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	bc 01       	movw	r22, r24
     9de:	4d e0       	ldi	r20, 0x0D	; 13
     9e0:	0e 94 17 03 	call	0x62e	; 0x62e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     9e4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9e8:	87 e2       	ldi	r24, 0x27	; 39
     9ea:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9ee:	80 e4       	ldi	r24, 0x40	; 64
     9f0:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     9f4:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     9f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     9f8:	82 ee       	ldi	r24, 0xE2	; 226
     9fa:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     9fe:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     a00:	60 91 44 04 	lds	r22, 0x0444
     a04:	66 23       	and	r22, r22
     a06:	09 f4       	brne	.+2      	; 0xa0a <handleRFCommands+0x6e>
     a08:	6b c1       	rjmp	.+726    	; 0xce0 <handleRFCommands+0x344>
     a0a:	50 91 48 04 	lds	r21, 0x0448
     a0e:	40 91 49 04 	lds	r20, 0x0449
     a12:	e0 91 45 04 	lds	r30, 0x0445
     a16:	70 91 46 04 	lds	r23, 0x0446

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     a1a:	25 2f       	mov	r18, r21
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	2f 77       	andi	r18, 0x7F	; 127
     a20:	30 70       	andi	r19, 0x00	; 0
     a22:	30 93 02 04 	sts	0x0402, r19
     a26:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     a2a:	84 2f       	mov	r24, r20
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	8f 77       	andi	r24, 0x7F	; 127
     a30:	90 70       	andi	r25, 0x00	; 0
     a32:	90 93 00 04 	sts	0x0400, r25
     a36:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     a3a:	57 fd       	sbrc	r21, 7
     a3c:	15 c2       	rjmp	.+1066   	; 0xe68 <handleRFCommands+0x4cc>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	30 95       	com	r19
     a48:	21 95       	neg	r18
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	30 93 f0 03 	sts	0x03F0, r19
     a50:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     a54:	47 fd       	sbrc	r20, 7
     a56:	12 c2       	rjmp	.+1060   	; 0xe7c <handleRFCommands+0x4e0>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	90 95       	com	r25
     a62:	81 95       	neg	r24
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	90 93 f2 03 	sts	0x03F2, r25
     a6a:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     a6e:	42 e0       	ldi	r20, 0x02	; 2
     a70:	21 30       	cpi	r18, 0x01	; 1
     a72:	34 07       	cpc	r19, r20
     a74:	44 f0       	brlt	.+16     	; 0xa86 <handleRFCommands+0xea>
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	52 e0       	ldi	r21, 0x02	; 2
     a7a:	50 93 f0 03 	sts	0x03F0, r21
     a7e:	40 93 ef 03 	sts	0x03EF, r20
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     a86:	42 e0       	ldi	r20, 0x02	; 2
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	94 07       	cpc	r25, r20
     a8c:	34 f0       	brlt	.+12     	; 0xa9a <handleRFCommands+0xfe>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	90 93 f2 03 	sts	0x03F2, r25
     a96:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     a9a:	4e ef       	ldi	r20, 0xFE	; 254
     a9c:	20 30       	cpi	r18, 0x00	; 0
     a9e:	34 07       	cpc	r19, r20
     aa0:	34 f4       	brge	.+12     	; 0xaae <handleRFCommands+0x112>
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	5e ef       	ldi	r21, 0xFE	; 254
     aa6:	50 93 f0 03 	sts	0x03F0, r21
     aaa:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     aae:	2e ef       	ldi	r18, 0xFE	; 254
     ab0:	80 30       	cpi	r24, 0x00	; 0
     ab2:	92 07       	cpc	r25, r18
     ab4:	34 f4       	brge	.+12     	; 0xac2 <handleRFCommands+0x126>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	9e ef       	ldi	r25, 0xFE	; 254
     aba:	90 93 f2 03 	sts	0x03F2, r25
     abe:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     ac2:	26 2f       	mov	r18, r22
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	30 93 3d 04 	sts	0x043D, r19
     aca:	20 93 3c 04 	sts	0x043C, r18
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	f0 93 3f 04 	sts	0x043F, r31
     ad4:	e0 93 3e 04 	sts	0x043E, r30
     ad8:	c7 2f       	mov	r28, r23
     ada:	d0 e0       	ldi	r29, 0x00	; 0
     adc:	d0 93 41 04 	sts	0x0441, r29
     ae0:	c0 93 40 04 	sts	0x0440, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     ae4:	92 2f       	mov	r25, r18
     ae6:	88 27       	eor	r24, r24
     ae8:	82 1b       	sub	r24, r18
     aea:	93 0b       	sbc	r25, r19
     aec:	24 e6       	ldi	r18, 0x64	; 100
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	b9 01       	movw	r22, r18
     af2:	0e 94 55 23 	call	0x46aa	; 0x46aa <__udivmodhi4>
     af6:	16 2f       	mov	r17, r22
     af8:	10 95       	com	r17
     afa:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     afe:	5e 2f       	mov	r21, r30
     b00:	44 27       	eor	r20, r20
     b02:	4e 1b       	sub	r20, r30
     b04:	5f 0b       	sbc	r21, r31
     b06:	ca 01       	movw	r24, r20
     b08:	b9 01       	movw	r22, r18
     b0a:	0e 94 55 23 	call	0x46aa	; 0x46aa <__udivmodhi4>
     b0e:	60 95       	com	r22
     b10:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     b14:	5c 2f       	mov	r21, r28
     b16:	44 27       	eor	r20, r20
     b18:	4c 1b       	sub	r20, r28
     b1a:	5d 0b       	sbc	r21, r29
     b1c:	ca 01       	movw	r24, r20
     b1e:	b9 01       	movw	r22, r18
     b20:	0e 94 55 23 	call	0x46aa	; 0x46aa <__udivmodhi4>
     b24:	60 95       	com	r22
     b26:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     b2a:	81 2f       	mov	r24, r17
     b2c:	0e 94 c8 19 	call	0x3390	; 0x3390 <updateRedLed>
		updateGreenLed(pwm_green);
     b30:	80 91 0d 02 	lds	r24, 0x020D
     b34:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <updateGreenLed>
		updateBlueLed(pwm_blue);
     b38:	80 91 0e 02 	lds	r24, 0x020E
     b3c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     b40:	80 91 47 04 	lds	r24, 0x0447
     b44:	80 ff       	sbrs	r24, 0
     b46:	d8 c0       	rjmp	.+432    	; 0xcf8 <handleRFCommands+0x35c>
			LED_IR1_LOW;
     b48:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     b4a:	81 ff       	sbrs	r24, 1
     b4c:	d8 c0       	rjmp	.+432    	; 0xcfe <handleRFCommands+0x362>
			LED_IR2_LOW;
     b4e:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     b50:	98 2f       	mov	r25, r24
     b52:	82 ff       	sbrs	r24, 2
     b54:	d8 c0       	rjmp	.+432    	; 0xd06 <handleRFCommands+0x36a>
			irEnabled = 1;
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     b5c:	84 fd       	sbrc	r24, 4
     b5e:	d7 c0       	rjmp	.+430    	; 0xd0e <handleRFCommands+0x372>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b60:	86 ff       	sbrs	r24, 6
     b62:	dc c0       	rjmp	.+440    	; 0xd1c <handleRFCommands+0x380>
			obstacleAvoidanceEnabled = 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 24 04 	sts	0x0424, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     b6a:	97 fd       	sbrc	r25, 7
     b6c:	db c0       	rjmp	.+438    	; 0xd24 <handleRFCommands+0x388>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     b6e:	10 92 25 04 	sts	0x0425, r1
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     b72:	80 91 0b 02 	lds	r24, 0x020B
     b76:	80 93 2c 04 	sts	0x042C, r24

		switch(packetId) {
     b7a:	84 30       	cpi	r24, 0x04	; 4
     b7c:	09 f4       	brne	.+2      	; 0xb80 <handleRFCommands+0x1e4>
     b7e:	dc c0       	rjmp	.+440    	; 0xd38 <handleRFCommands+0x39c>
     b80:	85 30       	cpi	r24, 0x05	; 5
     b82:	08 f0       	brcs	.+2      	; 0xb86 <handleRFCommands+0x1ea>
     b84:	19 c1       	rjmp	.+562    	; 0xdb8 <handleRFCommands+0x41c>
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	09 f0       	breq	.+2      	; 0xb8c <handleRFCommands+0x1f0>
     b8a:	5c c0       	rjmp	.+184    	; 0xc44 <handleRFCommands+0x2a8>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     b8c:	90 91 5f 03 	lds	r25, 0x035F
     b90:	80 91 60 03 	lds	r24, 0x0360
     b94:	90 93 2d 04 	sts	0x042D, r25
				ackPayload[2] = proximityResult[0]>>8;
     b98:	80 93 2e 04 	sts	0x042E, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     b9c:	90 91 61 03 	lds	r25, 0x0361
     ba0:	80 91 62 03 	lds	r24, 0x0362
     ba4:	90 93 2f 04 	sts	0x042F, r25
				ackPayload[4] = proximityResult[1]>>8;
     ba8:	80 93 30 04 	sts	0x0430, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     bac:	90 91 63 03 	lds	r25, 0x0363
     bb0:	80 91 64 03 	lds	r24, 0x0364
     bb4:	90 93 31 04 	sts	0x0431, r25
				ackPayload[6] = proximityResult[2]>>8;
     bb8:	80 93 32 04 	sts	0x0432, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     bbc:	90 91 65 03 	lds	r25, 0x0365
     bc0:	80 91 66 03 	lds	r24, 0x0366
     bc4:	90 93 33 04 	sts	0x0433, r25
				ackPayload[8] = proximityResult[3]>>8;
     bc8:	80 93 34 04 	sts	0x0434, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     bcc:	90 91 69 03 	lds	r25, 0x0369
     bd0:	80 91 6a 03 	lds	r24, 0x036A
     bd4:	90 93 35 04 	sts	0x0435, r25
				ackPayload[10] = proximityResult[5]>>8;
     bd8:	80 93 36 04 	sts	0x0436, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     bdc:	90 91 6b 03 	lds	r25, 0x036B
     be0:	80 91 6c 03 	lds	r24, 0x036C
     be4:	90 93 37 04 	sts	0x0437, r25
				ackPayload[12] = proximityResult[6]>>8;
     be8:	80 93 38 04 	sts	0x0438, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     bec:	90 91 6d 03 	lds	r25, 0x036D
     bf0:	80 91 6e 03 	lds	r24, 0x036E
     bf4:	90 93 39 04 	sts	0x0439, r25
				ackPayload[14] = proximityResult[7]>>8;
     bf8:	80 93 3a 04 	sts	0x043A, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
     bfc:	20 91 03 01 	lds	r18, 0x0103
     c00:	80 91 03 01 	lds	r24, 0x0103
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	80 72       	andi	r24, 0x20	; 32
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	95 95       	asr	r25
     c10:	87 95       	ror	r24
     c12:	95 95       	asr	r25
     c14:	87 95       	ror	r24
     c16:	95 95       	asr	r25
     c18:	87 95       	ror	r24
     c1a:	95 95       	asr	r25
     c1c:	87 95       	ror	r24
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	20 71       	andi	r18, 0x10	; 16
     c26:	30 70       	andi	r19, 0x00	; 0
     c28:	35 95       	asr	r19
     c2a:	27 95       	ror	r18
     c2c:	35 95       	asr	r19
     c2e:	27 95       	ror	r18
     c30:	35 95       	asr	r19
     c32:	27 95       	ror	r18
     c34:	35 95       	asr	r19
     c36:	27 95       	ror	r18
     c38:	82 2b       	or	r24, r18
     c3a:	80 93 3b 04 	sts	0x043B, r24
				#endif
				packetId = 4;
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     c44:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     c46:	81 ee       	ldi	r24, 0xE1	; 225
     c48:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
    mirf_CSN_hi;
     c4c:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     c4e:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     c50:	88 ea       	ldi	r24, 0xA8	; 168
     c52:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     c56:	80 91 2c 04 	lds	r24, 0x042C
     c5a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c5e:	80 91 2d 04 	lds	r24, 0x042D
     c62:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c66:	80 91 2e 04 	lds	r24, 0x042E
     c6a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c6e:	80 91 2f 04 	lds	r24, 0x042F
     c72:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c76:	80 91 30 04 	lds	r24, 0x0430
     c7a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c7e:	80 91 31 04 	lds	r24, 0x0431
     c82:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c86:	80 91 32 04 	lds	r24, 0x0432
     c8a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c8e:	80 91 33 04 	lds	r24, 0x0433
     c92:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c96:	80 91 34 04 	lds	r24, 0x0434
     c9a:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     c9e:	80 91 35 04 	lds	r24, 0x0435
     ca2:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     ca6:	80 91 36 04 	lds	r24, 0x0436
     caa:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     cae:	80 91 37 04 	lds	r24, 0x0437
     cb2:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     cb6:	80 91 38 04 	lds	r24, 0x0438
     cba:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     cbe:	80 91 39 04 	lds	r24, 0x0439
     cc2:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     cc6:	80 91 3a 04 	lds	r24, 0x043A
     cca:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
     cce:	80 91 3b 04 	lds	r24, 0x043B
     cd2:	0e 94 37 03 	call	0x66e	; 0x66e <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     cd6:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     ce0:	e0 91 45 04 	lds	r30, 0x0445
     ce4:	ee 23       	and	r30, r30
     ce6:	09 f4       	brne	.+2      	; 0xcea <handleRFCommands+0x34e>
     ce8:	d2 c0       	rjmp	.+420    	; 0xe8e <handleRFCommands+0x4f2>
     cea:	50 91 48 04 	lds	r21, 0x0448
     cee:	40 91 49 04 	lds	r20, 0x0449
     cf2:	70 91 46 04 	lds	r23, 0x0446
     cf6:	91 ce       	rjmp	.-734    	; 0xa1a <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     cf8:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     cfa:	81 fd       	sbrc	r24, 1
     cfc:	28 cf       	rjmp	.-432    	; 0xb4e <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     cfe:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     d00:	98 2f       	mov	r25, r24
     d02:	82 fd       	sbrc	r24, 2
     d04:	28 cf       	rjmp	.-432    	; 0xb56 <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     d06:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     d0a:	84 ff       	sbrs	r24, 4
     d0c:	29 cf       	rjmp	.-430    	; 0xb60 <handleRFCommands+0x1c4>
			calibrateSensors();
     d0e:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <calibrateSensors>
     d12:	90 91 47 04 	lds	r25, 0x0447
     d16:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     d18:	86 fd       	sbrc	r24, 6
     d1a:	24 cf       	rjmp	.-440    	; 0xb64 <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     d1c:	10 92 24 04 	sts	0x0424, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     d20:	97 ff       	sbrs	r25, 7
     d22:	25 cf       	rjmp	.-438    	; 0xb6e <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	80 93 25 04 	sts	0x0425, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     d2a:	80 91 0b 02 	lds	r24, 0x020B
     d2e:	80 93 2c 04 	sts	0x042C, r24

		switch(packetId) {
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	09 f0       	breq	.+2      	; 0xd38 <handleRFCommands+0x39c>
     d36:	24 cf       	rjmp	.-440    	; 0xb80 <handleRFCommands+0x1e4>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     d38:	90 91 67 03 	lds	r25, 0x0367
     d3c:	80 91 68 03 	lds	r24, 0x0368
     d40:	90 93 2d 04 	sts	0x042D, r25
				ackPayload[2] = proximityResult[4]>>8;
     d44:	80 93 2e 04 	sts	0x042E, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     d48:	90 91 6f 03 	lds	r25, 0x036F
     d4c:	80 91 70 03 	lds	r24, 0x0370
     d50:	90 93 2f 04 	sts	0x042F, r25
				ackPayload[4] = proximityResult[8]>>8;
     d54:	80 93 30 04 	sts	0x0430, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     d58:	90 91 71 03 	lds	r25, 0x0371
     d5c:	80 91 72 03 	lds	r24, 0x0372
     d60:	90 93 31 04 	sts	0x0431, r25
				ackPayload[6] = proximityResult[9]>>8;
     d64:	80 93 32 04 	sts	0x0432, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     d68:	90 91 73 03 	lds	r25, 0x0373
     d6c:	80 91 74 03 	lds	r24, 0x0374
     d70:	90 93 33 04 	sts	0x0433, r25
				ackPayload[8] = proximityResult[10]>>8;
     d74:	80 93 34 04 	sts	0x0434, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     d78:	90 91 75 03 	lds	r25, 0x0375
     d7c:	80 91 76 03 	lds	r24, 0x0376
     d80:	90 93 35 04 	sts	0x0435, r25
				ackPayload[10] = proximityResult[11]>>8;
     d84:	80 93 36 04 	sts	0x0436, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     d88:	90 91 0a 04 	lds	r25, 0x040A
     d8c:	80 91 0b 04 	lds	r24, 0x040B
     d90:	90 93 37 04 	sts	0x0437, r25
				ackPayload[12] = accX>>8;
     d94:	80 93 38 04 	sts	0x0438, r24
				ackPayload[13] = accY&0xFF;
     d98:	90 91 0c 04 	lds	r25, 0x040C
     d9c:	80 91 0d 04 	lds	r24, 0x040D
     da0:	90 93 39 04 	sts	0x0439, r25
				ackPayload[14] = accY>>8;
     da4:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[15] = irCommand;
     da8:	80 91 05 04 	lds	r24, 0x0405
     dac:	80 93 3b 04 	sts	0x043B, r24
				packetId = 5;
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	80 93 0b 02 	sts	0x020B, r24
				break;
     db6:	46 cf       	rjmp	.-372    	; 0xc44 <handleRFCommands+0x2a8>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     db8:	85 30       	cpi	r24, 0x05	; 5
     dba:	09 f4       	brne	.+2      	; 0xdbe <handleRFCommands+0x422>
     dbc:	7d c0       	rjmp	.+250    	; 0xeb8 <handleRFCommands+0x51c>
     dbe:	86 30       	cpi	r24, 0x06	; 6
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <handleRFCommands+0x428>
     dc2:	40 cf       	rjmp	.-384    	; 0xc44 <handleRFCommands+0x2a8>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     dc4:	80 91 3f 03 	lds	r24, 0x033F
     dc8:	90 91 40 03 	lds	r25, 0x0340
     dcc:	80 93 2d 04 	sts	0x042D, r24
				ackPayload[2] = proximityValue[8]>>8;
     dd0:	80 91 3f 03 	lds	r24, 0x033F
     dd4:	90 91 40 03 	lds	r25, 0x0340
     dd8:	90 93 2e 04 	sts	0x042E, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     ddc:	80 91 4f 03 	lds	r24, 0x034F
     de0:	90 91 50 03 	lds	r25, 0x0350
     de4:	80 93 2f 04 	sts	0x042F, r24
				ackPayload[4] = proximityValue[16]>>8;
     de8:	80 91 4f 03 	lds	r24, 0x034F
     dec:	90 91 50 03 	lds	r25, 0x0350
     df0:	90 93 30 04 	sts	0x0430, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     df4:	80 91 53 03 	lds	r24, 0x0353
     df8:	90 91 54 03 	lds	r25, 0x0354
     dfc:	80 93 31 04 	sts	0x0431, r24
				ackPayload[6] = proximityValue[18]>>8;
     e00:	80 91 53 03 	lds	r24, 0x0353
     e04:	90 91 54 03 	lds	r25, 0x0354
     e08:	90 93 32 04 	sts	0x0432, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     e0c:	80 91 57 03 	lds	r24, 0x0357
     e10:	90 91 58 03 	lds	r25, 0x0358
     e14:	80 93 33 04 	sts	0x0433, r24
				ackPayload[8] = proximityValue[20]>>8;
     e18:	80 91 57 03 	lds	r24, 0x0357
     e1c:	90 91 58 03 	lds	r25, 0x0358
     e20:	90 93 34 04 	sts	0x0434, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     e24:	80 91 5b 03 	lds	r24, 0x035B
     e28:	90 91 5c 03 	lds	r25, 0x035C
     e2c:	80 93 35 04 	sts	0x0435, r24
				ackPayload[10] = proximityValue[22]>>8;
     e30:	80 91 5b 03 	lds	r24, 0x035B
     e34:	90 91 5c 03 	lds	r25, 0x035C
     e38:	90 93 36 04 	sts	0x0436, r25
				ackPayload[11] = accZ&0xFF;
     e3c:	90 91 0e 04 	lds	r25, 0x040E
     e40:	80 91 0f 04 	lds	r24, 0x040F
     e44:	90 93 37 04 	sts	0x0437, r25
				ackPayload[12] = accZ>>8;
     e48:	80 93 38 04 	sts	0x0438, r24
				ackPayload[13] = batteryLevel&0xFF;
     e4c:	90 91 c3 03 	lds	r25, 0x03C3
     e50:	80 91 c4 03 	lds	r24, 0x03C4
     e54:	90 93 39 04 	sts	0x0439, r25
				ackPayload[14] = batteryLevel>>8;
     e58:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[15] = 0;
     e5c:	10 92 3b 04 	sts	0x043B, r1
				packetId = 3;
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	80 93 0b 02 	sts	0x020B, r24
				break;
     e66:	ee ce       	rjmp	.-548    	; 0xc44 <handleRFCommands+0x2a8>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	30 93 f0 03 	sts	0x03F0, r19
     e74:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     e78:	47 ff       	sbrs	r20, 7
     e7a:	ee cd       	rjmp	.-1060   	; 0xa58 <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	90 93 f2 03 	sts	0x03F2, r25
     e88:	80 93 f1 03 	sts	0x03F1, r24
     e8c:	f0 cd       	rjmp	.-1056   	; 0xa6e <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     e8e:	70 91 46 04 	lds	r23, 0x0446
     e92:	77 23       	and	r23, r23
     e94:	61 f4       	brne	.+24     	; 0xeae <handleRFCommands+0x512>
     e96:	80 91 47 04 	lds	r24, 0x0447
     e9a:	88 30       	cpi	r24, 0x08	; 8
     e9c:	41 f4       	brne	.+16     	; 0xeae <handleRFCommands+0x512>
     e9e:	50 91 48 04 	lds	r21, 0x0448
     ea2:	55 23       	and	r21, r21
     ea4:	09 f4       	brne	.+2      	; 0xea8 <handleRFCommands+0x50c>
     ea6:	64 c0       	rjmp	.+200    	; 0xf70 <handleRFCommands+0x5d4>
     ea8:	40 91 49 04 	lds	r20, 0x0449
     eac:	b6 cd       	rjmp	.-1172   	; 0xa1a <handleRFCommands+0x7e>
     eae:	50 91 48 04 	lds	r21, 0x0448
     eb2:	40 91 49 04 	lds	r20, 0x0449
     eb6:	b1 cd       	rjmp	.-1182   	; 0xa1a <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     eb8:	80 91 2f 03 	lds	r24, 0x032F
     ebc:	90 91 30 03 	lds	r25, 0x0330
     ec0:	80 93 2d 04 	sts	0x042D, r24
				ackPayload[2] = proximityValue[0]>>8;
     ec4:	80 91 2f 03 	lds	r24, 0x032F
     ec8:	90 91 30 03 	lds	r25, 0x0330
     ecc:	90 93 2e 04 	sts	0x042E, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     ed0:	80 91 33 03 	lds	r24, 0x0333
     ed4:	90 91 34 03 	lds	r25, 0x0334
     ed8:	80 93 2f 04 	sts	0x042F, r24
				ackPayload[4] = proximityValue[2]>>8;
     edc:	80 91 33 03 	lds	r24, 0x0333
     ee0:	90 91 34 03 	lds	r25, 0x0334
     ee4:	90 93 30 04 	sts	0x0430, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     ee8:	80 91 37 03 	lds	r24, 0x0337
     eec:	90 91 38 03 	lds	r25, 0x0338
     ef0:	80 93 31 04 	sts	0x0431, r24
				ackPayload[6] = proximityValue[4]>>8;
     ef4:	80 91 37 03 	lds	r24, 0x0337
     ef8:	90 91 38 03 	lds	r25, 0x0338
     efc:	90 93 32 04 	sts	0x0432, r25
				ackPayload[7] = proximityValue[6]&0xFF;
     f00:	80 91 3b 03 	lds	r24, 0x033B
     f04:	90 91 3c 03 	lds	r25, 0x033C
     f08:	80 93 33 04 	sts	0x0433, r24
				ackPayload[8] = proximityValue[6]>>8;
     f0c:	80 91 3b 03 	lds	r24, 0x033B
     f10:	90 91 3c 03 	lds	r25, 0x033C
     f14:	90 93 34 04 	sts	0x0434, r25
				ackPayload[9] = proximityValue[10]&0xFF;
     f18:	80 91 43 03 	lds	r24, 0x0343
     f1c:	90 91 44 03 	lds	r25, 0x0344
     f20:	80 93 35 04 	sts	0x0435, r24
				ackPayload[10] = proximityValue[10]>>8;
     f24:	80 91 43 03 	lds	r24, 0x0343
     f28:	90 91 44 03 	lds	r25, 0x0344
     f2c:	90 93 36 04 	sts	0x0436, r25
				ackPayload[11] = proximityValue[12]&0xFF;
     f30:	80 91 47 03 	lds	r24, 0x0347
     f34:	90 91 48 03 	lds	r25, 0x0348
     f38:	80 93 37 04 	sts	0x0437, r24
				ackPayload[12] = proximityValue[12]>>8;
     f3c:	80 91 47 03 	lds	r24, 0x0347
     f40:	90 91 48 03 	lds	r25, 0x0348
     f44:	90 93 38 04 	sts	0x0438, r25
				ackPayload[13] = proximityValue[14]&0xFF;
     f48:	80 91 4b 03 	lds	r24, 0x034B
     f4c:	90 91 4c 03 	lds	r25, 0x034C
     f50:	80 93 39 04 	sts	0x0439, r24
				ackPayload[14] = proximityValue[14]>>8;
     f54:	80 91 4b 03 	lds	r24, 0x034B
     f58:	90 91 4c 03 	lds	r25, 0x034C
     f5c:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[15] = currentSelector;
     f60:	80 91 21 04 	lds	r24, 0x0421
     f64:	80 93 3b 04 	sts	0x043B, r24
				packetId = 6;
     f68:	86 e0       	ldi	r24, 0x06	; 6
     f6a:	80 93 0b 02 	sts	0x020B, r24
				break;
     f6e:	6a ce       	rjmp	.-812    	; 0xc44 <handleRFCommands+0x2a8>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     f70:	40 91 49 04 	lds	r20, 0x0449
     f74:	44 23       	and	r20, r20
     f76:	79 f0       	breq	.+30     	; 0xf96 <handleRFCommands+0x5fa>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     f78:	10 92 02 04 	sts	0x0402, r1
     f7c:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     f80:	84 2f       	mov	r24, r20
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	8f 77       	andi	r24, 0x7F	; 127
     f86:	90 70       	andi	r25, 0x00	; 0
     f88:	90 93 00 04 	sts	0x0400, r25
     f8c:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	54 cd       	rjmp	.-1368   	; 0xa3e <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
     f96:	8c e3       	ldi	r24, 0x3C	; 60
     f98:	0e 94 b1 12 	call	0x2562	; 0x2562 <sleep>
     f9c:	50 91 48 04 	lds	r21, 0x0448
     fa0:	40 91 49 04 	lds	r20, 0x0449
     fa4:	60 91 44 04 	lds	r22, 0x0444
     fa8:	e0 91 45 04 	lds	r30, 0x0445
     fac:	70 91 46 04 	lds	r23, 0x0446
     fb0:	34 cd       	rjmp	.-1432   	; 0xa1a <handleRFCommands+0x7e>

00000fb2 <init_ir_remote_control>:
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     fb2:	e8 e6       	ldi	r30, 0x68	; 104
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     fbc:	ec e6       	ldi	r30, 0x6C	; 108
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     fc6:	e0 eb       	ldi	r30, 0xB0	; 176
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	80 83       	st	Z, r24

}
     fd0:	08 95       	ret

00000fd2 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     fde:	80 91 11 02 	lds	r24, 0x0211
     fe2:	88 23       	and	r24, r24
     fe4:	21 f1       	breq	.+72     	; 0x102e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     fe6:	80 91 03 01 	lds	r24, 0x0103
     fea:	86 fd       	sbrc	r24, 6
     fec:	20 c0       	rjmp	.+64     	; 0x102e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     fee:	80 91 68 00 	lds	r24, 0x0068
     ff2:	8d 7f       	andi	r24, 0xFD	; 253
     ff4:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     ff8:	80 91 6c 00 	lds	r24, 0x006C
     ffc:	8f 77       	andi	r24, 0x7F	; 127
     ffe:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
    1008:	8d e0       	ldi	r24, 0x0D	; 13
    100a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    100e:	80 91 b1 00 	lds	r24, 0x00B1
    1012:	86 60       	ori	r24, 0x06	; 6
    1014:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1018:	80 91 70 00 	lds	r24, 0x0070
    101c:	82 60       	ori	r24, 0x02	; 2
    101e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1022:	10 92 26 03 	sts	0x0326, r1
    1026:	10 92 27 03 	sts	0x0327, r1
    102a:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    102e:	8f 91       	pop	r24
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1050:	80 91 b1 00 	lds	r24, 0x00B1
    1054:	88 7f       	andi	r24, 0xF8	; 248
    1056:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    105a:	80 91 12 02 	lds	r24, 0x0212
    105e:	88 23       	and	r24, r24
    1060:	a9 f0       	breq	.+42     	; 0x108c <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1062:	80 91 03 01 	lds	r24, 0x0103
    1066:	86 ff       	sbrs	r24, 6
    1068:	65 c0       	rjmp	.+202    	; 0x1134 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    106a:	80 91 68 00 	lds	r24, 0x0068
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1074:	80 91 6c 00 	lds	r24, 0x006C
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	90 93 02 02 	sts	0x0202, r25
    1086:	80 93 01 02 	sts	0x0201, r24
    108a:	49 c0       	rjmp	.+146    	; 0x111e <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    108c:	80 91 01 02 	lds	r24, 0x0201
    1090:	90 91 02 02 	lds	r25, 0x0202
    1094:	2f ef       	ldi	r18, 0xFF	; 255
    1096:	8f 3f       	cpi	r24, 0xFF	; 255
    1098:	92 07       	cpc	r25, r18
    109a:	09 f4       	brne	.+2      	; 0x109e <__vector_13+0x64>
    109c:	63 c0       	rjmp	.+198    	; 0x1164 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__vector_13+0x6c>
    10a4:	98 c0       	rjmp	.+304    	; 0x11d6 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    10a6:	9c 01       	movw	r18, r24
    10a8:	22 50       	subi	r18, 0x02	; 2
    10aa:	30 40       	sbci	r19, 0x00	; 0
    10ac:	25 30       	cpi	r18, 0x05	; 5
    10ae:	31 05       	cpc	r19, r1
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <__vector_13+0x7a>
    10b2:	67 c0       	rjmp	.+206    	; 0x1182 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    10b4:	9c 01       	movw	r18, r24
    10b6:	27 50       	subi	r18, 0x07	; 7
    10b8:	30 40       	sbci	r19, 0x00	; 0
    10ba:	26 30       	cpi	r18, 0x06	; 6
    10bc:	31 05       	cpc	r19, r1
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <__vector_13+0x88>
    10c0:	bd c0       	rjmp	.+378    	; 0x123c <__vector_13+0x202>

				OCR2A = 54;
    10c2:	26 e3       	ldi	r18, 0x36	; 54
    10c4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    10c8:	20 91 b1 00 	lds	r18, 0x00B1
    10cc:	26 60       	ori	r18, 0x06	; 6
    10ce:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    10d2:	20 91 70 00 	lds	r18, 0x0070
    10d6:	22 60       	ori	r18, 0x02	; 2
    10d8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    10dc:	20 91 03 01 	lds	r18, 0x0103
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	20 74       	andi	r18, 0x40	; 64
    10e4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    10e6:	00 24       	eor	r0, r0
    10e8:	22 0f       	add	r18, r18
    10ea:	33 1f       	adc	r19, r19
    10ec:	00 1c       	adc	r0, r0
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	00 1c       	adc	r0, r0
    10f4:	23 2f       	mov	r18, r19
    10f6:	30 2d       	mov	r19, r0
    10f8:	4c e0       	ldi	r20, 0x0C	; 12
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	48 1b       	sub	r20, r24
    10fe:	59 0b       	sbc	r21, r25
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <__vector_13+0xcc>
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	4a 95       	dec	r20
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <__vector_13+0xc8>
				data_temp += temp;
    110a:	40 91 26 03 	lds	r20, 0x0326
    110e:	42 0f       	add	r20, r18
    1110:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1114:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1116:	90 93 02 02 	sts	0x0202, r25
    111a:	80 93 01 02 	sts	0x0201, r24

		}

}
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1134:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1138:	83 e3       	ldi	r24, 0x33	; 51
    113a:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    113e:	80 91 b1 00 	lds	r24, 0x00B1
    1142:	86 60       	ori	r24, 0x06	; 6
    1144:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1148:	80 91 70 00 	lds	r24, 0x0070
    114c:	82 60       	ori	r24, 0x02	; 2
    114e:	80 93 70 00 	sts	0x0070, r24
    1152:	80 91 01 02 	lds	r24, 0x0201
    1156:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	8f 3f       	cpi	r24, 0xFF	; 255
    115e:	92 07       	cpc	r25, r18
    1160:	c9 f6       	brne	.-78     	; 0x1114 <__vector_13+0xda>
    1162:	dd cf       	rjmp	.-70     	; 0x111e <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1164:	20 91 03 01 	lds	r18, 0x0103
    1168:	26 ff       	sbrs	r18, 6
    116a:	52 c0       	rjmp	.+164    	; 0x1210 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    116c:	20 91 68 00 	lds	r18, 0x0068
    1170:	22 60       	ori	r18, 0x02	; 2
    1172:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1176:	20 91 6c 00 	lds	r18, 0x006C
    117a:	20 68       	ori	r18, 0x80	; 128
    117c:	20 93 6c 00 	sts	0x006C, r18
    1180:	ce cf       	rjmp	.-100    	; 0x111e <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1182:	26 e3       	ldi	r18, 0x36	; 54
    1184:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1188:	20 91 b1 00 	lds	r18, 0x00B1
    118c:	26 60       	ori	r18, 0x06	; 6
    118e:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1192:	20 91 70 00 	lds	r18, 0x0070
    1196:	22 60       	ori	r18, 0x02	; 2
    1198:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    119c:	20 91 03 01 	lds	r18, 0x0103
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	20 74       	andi	r18, 0x40	; 64
    11a4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    11a6:	00 24       	eor	r0, r0
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	00 1c       	adc	r0, r0
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	00 1c       	adc	r0, r0
    11b4:	23 2f       	mov	r18, r19
    11b6:	30 2d       	mov	r19, r0
    11b8:	46 e0       	ldi	r20, 0x06	; 6
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	48 1b       	sub	r20, r24
    11be:	59 0b       	sbc	r21, r25
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <__vector_13+0x18c>
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	4a 95       	dec	r20
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <__vector_13+0x188>
				address_temp += temp;
    11ca:	40 91 27 03 	lds	r20, 0x0327
    11ce:	42 0f       	add	r20, r18
    11d0:	40 93 27 03 	sts	0x0327, r20
    11d4:	9f cf       	rjmp	.-194    	; 0x1114 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    11d6:	20 91 03 01 	lds	r18, 0x0103
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	20 74       	andi	r18, 0x40	; 64
    11de:	30 70       	andi	r19, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	23 2f       	mov	r18, r19
    11e4:	00 0c       	add	r0, r0
    11e6:	22 1f       	adc	r18, r18
    11e8:	33 0b       	sbc	r19, r19
    11ea:	00 0c       	add	r0, r0
    11ec:	22 1f       	adc	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    11f4:	26 e3       	ldi	r18, 0x36	; 54
    11f6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    11fa:	20 91 b1 00 	lds	r18, 0x00B1
    11fe:	26 60       	ori	r18, 0x06	; 6
    1200:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1204:	20 91 70 00 	lds	r18, 0x0070
    1208:	22 60       	ori	r18, 0x02	; 2
    120a:	20 93 70 00 	sts	0x0070, r18
    120e:	82 cf       	rjmp	.-252    	; 0x1114 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1210:	8c e1       	ldi	r24, 0x1C	; 28
    1212:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1216:	80 91 b1 00 	lds	r24, 0x00B1
    121a:	86 60       	ori	r24, 0x06	; 6
    121c:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1220:	80 91 70 00 	lds	r24, 0x0070
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    122a:	10 92 26 03 	sts	0x0326, r1
    122e:	10 92 27 03 	sts	0x0327, r1
    1232:	10 92 28 03 	sts	0x0328, r1
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	6d cf       	rjmp	.-294    	; 0x1116 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    123c:	8d 30       	cpi	r24, 0x0D	; 13
    123e:	91 05       	cpc	r25, r1
    1240:	09 f0       	breq	.+2      	; 0x1244 <__vector_13+0x20a>
    1242:	68 cf       	rjmp	.-304    	; 0x1114 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1244:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1248:	80 91 68 00 	lds	r24, 0x0068
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1252:	80 91 6c 00 	lds	r24, 0x006C
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	90 93 02 02 	sts	0x0202, r25
    1264:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1268:	80 91 28 03 	lds	r24, 0x0328
    126c:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1270:	80 91 27 03 	lds	r24, 0x0327
    1274:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1278:	80 91 26 03 	lds	r24, 0x0326
    127c:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 06 04 	sts	0x0406, r24
    1286:	4b cf       	rjmp	.-362    	; 0x111e <__vector_13+0xe4>

00001288 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1288:	80 91 00 02 	lds	r24, 0x0200
    128c:	08 95       	ret

0000128e <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    128e:	80 91 24 03 	lds	r24, 0x0324
    1292:	08 95       	ret

00001294 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1294:	80 91 25 03 	lds	r24, 0x0325
    1298:	08 95       	ret

0000129a <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    129a:	80 91 11 02 	lds	r24, 0x0211
    129e:	88 23       	and	r24, r24
    12a0:	b1 f1       	breq	.+108    	; 0x130e <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    12a2:	e0 91 25 03 	lds	r30, 0x0325

void handleIRRemoteCommands() {

	if(irEnabled) {

		irCommand = ir_remote_get_data();
    12a6:	e0 93 05 04 	sts	0x0405, r30

		if(command_received) {
    12aa:	80 91 06 04 	lds	r24, 0x0406
    12ae:	88 23       	and	r24, r24
    12b0:	71 f1       	breq	.+92     	; 0x130e <handleIRRemoteCommands+0x74>

			command_received = 0;
    12b2:	10 92 06 04 	sts	0x0406, r1

			switch(irCommand) {
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	e5 33       	cpi	r30, 0x35	; 53
    12ba:	f1 05       	cpc	r31, r1
    12bc:	48 f1       	brcs	.+82     	; 0x1310 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    12be:	20 91 ef 03 	lds	r18, 0x03EF
    12c2:	30 91 f0 03 	lds	r19, 0x03F0
    12c6:	80 91 f1 03 	lds	r24, 0x03F1
    12ca:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    12ce:	37 fd       	sbrc	r19, 7
    12d0:	27 c0       	rjmp	.+78     	; 0x1320 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    12d2:	35 95       	asr	r19
    12d4:	27 95       	ror	r18
    12d6:	35 95       	asr	r19
    12d8:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    12da:	30 93 02 04 	sts	0x0402, r19
    12de:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    12e2:	97 fd       	sbrc	r25, 7
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    12e6:	95 95       	asr	r25
    12e8:	87 95       	ror	r24
    12ea:	95 95       	asr	r25
    12ec:	87 95       	ror	r24
    12ee:	90 93 00 04 	sts	0x0400, r25
    12f2:	80 93 ff 03 	sts	0x03FF, r24
    12f6:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    12f8:	90 95       	com	r25
    12fa:	81 95       	neg	r24
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	95 95       	asr	r25
    1300:	87 95       	ror	r24
    1302:	95 95       	asr	r25
    1304:	87 95       	ror	r24
    1306:	90 93 00 04 	sts	0x0400, r25
    130a:	80 93 ff 03 	sts	0x03FF, r24
    130e:	08 95       	ret

		if(command_received) {

			command_received = 0;

			switch(irCommand) {
    1310:	ee 58       	subi	r30, 0x8E	; 142
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	05 90       	lpm	r0, Z+
    131a:	f4 91       	lpm	r31, Z+
    131c:	e0 2d       	mov	r30, r0
    131e:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1320:	30 95       	com	r19
    1322:	21 95       	neg	r18
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	d5 cf       	rjmp	.-86     	; 0x12d2 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1328:	80 93 24 04 	sts	0x0424, r24
							cliffAvoidanceEnabled = 0;
    132c:	10 92 25 04 	sts	0x0425, r1
    1330:	c6 cf       	rjmp	.-116    	; 0x12be <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1332:	10 92 24 04 	sts	0x0424, r1
							cliffAvoidanceEnabled = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 93 25 04 	sts	0x0425, r24
    133c:	20 91 ef 03 	lds	r18, 0x03EF
    1340:	30 91 f0 03 	lds	r19, 0x03F0
    1344:	80 91 f1 03 	lds	r24, 0x03F1
    1348:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    134c:	c0 cf       	rjmp	.-128    	; 0x12ce <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    134e:	10 92 24 04 	sts	0x0424, r1
    1352:	20 91 ef 03 	lds	r18, 0x03EF
    1356:	30 91 f0 03 	lds	r19, 0x03F0
    135a:	80 91 f1 03 	lds	r24, 0x03F1
    135e:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1362:	b5 cf       	rjmp	.-150    	; 0x12ce <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 24 04 	sts	0x0424, r24
    136a:	20 91 ef 03 	lds	r18, 0x03EF
    136e:	30 91 f0 03 	lds	r19, 0x03F0
    1372:	80 91 f1 03 	lds	r24, 0x03F1
    1376:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    137a:	a9 cf       	rjmp	.-174    	; 0x12ce <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    137c:	80 91 f1 03 	lds	r24, 0x03F1
    1380:	90 91 f2 03 	lds	r25, 0x03F2
    1384:	4e 97       	sbiw	r24, 0x1e	; 30
    1386:	90 93 f2 03 	sts	0x03F2, r25
    138a:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    138e:	2e ef       	ldi	r18, 0xFE	; 254
    1390:	80 30       	cpi	r24, 0x00	; 0
    1392:	92 07       	cpc	r25, r18
    1394:	9c f5       	brge	.+102    	; 0x13fc <handleIRRemoteCommands+0x162>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	9e ef       	ldi	r25, 0xFE	; 254
    139a:	90 93 f2 03 	sts	0x03F2, r25
    139e:	80 93 f1 03 	sts	0x03F1, r24
    13a2:	20 91 ef 03 	lds	r18, 0x03EF
    13a6:	30 91 f0 03 	lds	r19, 0x03F0
    13aa:	91 cf       	rjmp	.-222    	; 0x12ce <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    13ac:	20 91 ef 03 	lds	r18, 0x03EF
    13b0:	30 91 f0 03 	lds	r19, 0x03F0
    13b4:	80 91 ed 03 	lds	r24, 0x03ED
    13b8:	90 91 ee 03 	lds	r25, 0x03EE
    13bc:	28 17       	cp	r18, r24
    13be:	39 07       	cpc	r19, r25
    13c0:	24 f0       	brlt	.+8      	; 0x13ca <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    13c2:	20 91 f1 03 	lds	r18, 0x03F1
    13c6:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    13ca:	2e 51       	subi	r18, 0x1E	; 30
    13cc:	30 40       	sbci	r19, 0x00	; 0
    13ce:	30 93 f0 03 	sts	0x03F0, r19
    13d2:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    13d6:	c9 01       	movw	r24, r18
    13d8:	30 93 f2 03 	sts	0x03F2, r19
    13dc:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    13e0:	4e ef       	ldi	r20, 0xFE	; 254
    13e2:	20 30       	cpi	r18, 0x00	; 0
    13e4:	34 07       	cpc	r19, r20
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <handleIRRemoteCommands+0x15a>
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	5e ef       	ldi	r21, 0xFE	; 254
    13ec:	50 93 f0 03 	sts	0x03F0, r21
    13f0:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    13f4:	4e ef       	ldi	r20, 0xFE	; 254
    13f6:	20 30       	cpi	r18, 0x00	; 0
    13f8:	34 07       	cpc	r19, r20
    13fa:	6c f2       	brlt	.-102    	; 0x1396 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    13fc:	20 91 ef 03 	lds	r18, 0x03EF
    1400:	30 91 f0 03 	lds	r19, 0x03F0
    1404:	64 cf       	rjmp	.-312    	; 0x12ce <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1406:	20 91 ef 03 	lds	r18, 0x03EF
    140a:	30 91 f0 03 	lds	r19, 0x03F0
    140e:	2e 51       	subi	r18, 0x1E	; 30
    1410:	30 40       	sbci	r19, 0x00	; 0
    1412:	30 93 f0 03 	sts	0x03F0, r19
    1416:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    141a:	4e ef       	ldi	r20, 0xFE	; 254
    141c:	20 30       	cpi	r18, 0x00	; 0
    141e:	34 07       	cpc	r19, r20
    1420:	0c f0       	brlt	.+2      	; 0x1424 <handleIRRemoteCommands+0x18a>
    1422:	17 c1       	rjmp	.+558    	; 0x1652 <handleIRRemoteCommands+0x3b8>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	9e ef       	ldi	r25, 0xFE	; 254
    1428:	90 93 f0 03 	sts	0x03F0, r25
    142c:	80 93 ef 03 	sts	0x03EF, r24
    1430:	80 91 f1 03 	lds	r24, 0x03F1
    1434:	90 91 f2 03 	lds	r25, 0x03F2
    1438:	20 e8       	ldi	r18, 0x80	; 128
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	4e cf       	rjmp	.-356    	; 0x12da <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    143e:	20 91 ef 03 	lds	r18, 0x03EF
    1442:	30 91 f0 03 	lds	r19, 0x03F0
    1446:	2e 51       	subi	r18, 0x1E	; 30
    1448:	30 40       	sbci	r19, 0x00	; 0
    144a:	30 93 f0 03 	sts	0x03F0, r19
    144e:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1452:	80 91 f1 03 	lds	r24, 0x03F1
    1456:	90 91 f2 03 	lds	r25, 0x03F2
    145a:	4e 96       	adiw	r24, 0x1e	; 30
    145c:	90 93 f2 03 	sts	0x03F2, r25
    1460:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1464:	4e ef       	ldi	r20, 0xFE	; 254
    1466:	20 30       	cpi	r18, 0x00	; 0
    1468:	34 07       	cpc	r19, r20
    146a:	34 f4       	brge	.+12     	; 0x1478 <handleIRRemoteCommands+0x1de>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3e ef       	ldi	r19, 0xFE	; 254
    1470:	30 93 f0 03 	sts	0x03F0, r19
    1474:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1478:	42 e0       	ldi	r20, 0x02	; 2
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	94 07       	cpc	r25, r20
    147e:	0c f4       	brge	.+2      	; 0x1482 <handleIRRemoteCommands+0x1e8>
    1480:	26 cf       	rjmp	.-436    	; 0x12ce <handleIRRemoteCommands+0x34>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	90 93 f2 03 	sts	0x03F2, r25
    148a:	80 93 f1 03 	sts	0x03F1, r24
    148e:	1f cf       	rjmp	.-450    	; 0x12ce <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1490:	20 91 ef 03 	lds	r18, 0x03EF
    1494:	30 91 f0 03 	lds	r19, 0x03F0
    1498:	80 91 f1 03 	lds	r24, 0x03F1
    149c:	90 91 f2 03 	lds	r25, 0x03F2
    14a0:	82 17       	cp	r24, r18
    14a2:	93 07       	cpc	r25, r19
    14a4:	0c f4       	brge	.+2      	; 0x14a8 <handleIRRemoteCommands+0x20e>
    14a6:	da c0       	rjmp	.+436    	; 0x165c <handleIRRemoteCommands+0x3c2>
    14a8:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    14aa:	22 5e       	subi	r18, 0xE2	; 226
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	30 93 f0 03 	sts	0x03F0, r19
    14b2:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    14b6:	4e 96       	adiw	r24, 0x1e	; 30
    14b8:	90 93 f2 03 	sts	0x03F2, r25
    14bc:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    14c0:	42 e0       	ldi	r20, 0x02	; 2
    14c2:	21 30       	cpi	r18, 0x01	; 1
    14c4:	34 07       	cpc	r19, r20
    14c6:	34 f0       	brlt	.+12     	; 0x14d4 <handleIRRemoteCommands+0x23a>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	32 e0       	ldi	r19, 0x02	; 2
    14cc:	30 93 f0 03 	sts	0x03F0, r19
    14d0:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	92 07       	cpc	r25, r18
    14da:	0c f4       	brge	.+2      	; 0x14de <handleIRRemoteCommands+0x244>
    14dc:	8f cf       	rjmp	.-226    	; 0x13fc <handleIRRemoteCommands+0x162>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	90 93 f2 03 	sts	0x03F2, r25
    14e6:	80 93 f1 03 	sts	0x03F1, r24
    14ea:	20 91 ef 03 	lds	r18, 0x03EF
    14ee:	30 91 f0 03 	lds	r19, 0x03F0
    14f2:	ed ce       	rjmp	.-550    	; 0x12ce <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    14f4:	20 91 ef 03 	lds	r18, 0x03EF
    14f8:	30 91 f0 03 	lds	r19, 0x03F0
    14fc:	22 5e       	subi	r18, 0xE2	; 226
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	30 93 f0 03 	sts	0x03F0, r19
    1504:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1508:	42 e0       	ldi	r20, 0x02	; 2
    150a:	21 30       	cpi	r18, 0x01	; 1
    150c:	34 07       	cpc	r19, r20
    150e:	0c f4       	brge	.+2      	; 0x1512 <handleIRRemoteCommands+0x278>
    1510:	a0 c0       	rjmp	.+320    	; 0x1652 <handleIRRemoteCommands+0x3b8>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	90 93 f0 03 	sts	0x03F0, r25
    151a:	80 93 ef 03 	sts	0x03EF, r24
    151e:	80 91 f1 03 	lds	r24, 0x03F1
    1522:	90 91 f2 03 	lds	r25, 0x03F2
    1526:	20 e8       	ldi	r18, 0x80	; 128
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	d7 ce       	rjmp	.-594    	; 0x12da <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    152c:	80 91 07 04 	lds	r24, 0x0407
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	65 e0       	ldi	r22, 0x05	; 5
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
    153c:	80 93 07 04 	sts	0x0407, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1540:	88 23       	and	r24, r24
    1542:	09 f0       	breq	.+2      	; 0x1546 <handleIRRemoteCommands+0x2ac>
    1544:	8d c0       	rjmp	.+282    	; 0x1660 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1546:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1548:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    154a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1554:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1558:	0e 94 c8 19 	call	0x3390	; 0x3390 <updateRedLed>
					updateGreenLed(pwm_green);
    155c:	80 91 0d 02 	lds	r24, 0x020D
    1560:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1564:	80 91 0e 02 	lds	r24, 0x020E
    1568:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <updateBlueLed>
    156c:	20 91 ef 03 	lds	r18, 0x03EF
    1570:	30 91 f0 03 	lds	r19, 0x03F0
    1574:	80 91 f1 03 	lds	r24, 0x03F1
    1578:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    157c:	a8 ce       	rjmp	.-688    	; 0x12ce <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    157e:	80 91 08 04 	lds	r24, 0x0408
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	83 70       	andi	r24, 0x03	; 3
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	80 93 08 04 	sts	0x0408, r24
					switch(behaviorState) {
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	09 f4       	brne	.+2      	; 0x1594 <handleIRRemoteCommands+0x2fa>
    1592:	cf ce       	rjmp	.-610    	; 0x1332 <handleIRRemoteCommands+0x98>
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	09 f4       	brne	.+2      	; 0x159a <handleIRRemoteCommands+0x300>
    1598:	53 c0       	rjmp	.+166    	; 0x1640 <handleIRRemoteCommands+0x3a6>
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <handleIRRemoteCommands+0x306>
    159e:	c4 ce       	rjmp	.-632    	; 0x1328 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    15a0:	10 92 24 04 	sts	0x0424, r1
							cliffAvoidanceEnabled = 0;
    15a4:	10 92 25 04 	sts	0x0425, r1
    15a8:	8a ce       	rjmp	.-748    	; 0x12be <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    15aa:	20 91 ef 03 	lds	r18, 0x03EF
    15ae:	30 91 f0 03 	lds	r19, 0x03F0
    15b2:	22 5e       	subi	r18, 0xE2	; 226
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	30 93 f0 03 	sts	0x03F0, r19
    15ba:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    15be:	80 91 f1 03 	lds	r24, 0x03F1
    15c2:	90 91 f2 03 	lds	r25, 0x03F2
    15c6:	4e 97       	sbiw	r24, 0x1e	; 30
    15c8:	90 93 f2 03 	sts	0x03F2, r25
    15cc:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    15d0:	42 e0       	ldi	r20, 0x02	; 2
    15d2:	21 30       	cpi	r18, 0x01	; 1
    15d4:	34 07       	cpc	r19, r20
    15d6:	34 f0       	brlt	.+12     	; 0x15e4 <handleIRRemoteCommands+0x34a>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	32 e0       	ldi	r19, 0x02	; 2
    15dc:	30 93 f0 03 	sts	0x03F0, r19
    15e0:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    15e4:	4e ef       	ldi	r20, 0xFE	; 254
    15e6:	80 30       	cpi	r24, 0x00	; 0
    15e8:	94 07       	cpc	r25, r20
    15ea:	0c f0       	brlt	.+2      	; 0x15ee <handleIRRemoteCommands+0x354>
    15ec:	70 ce       	rjmp	.-800    	; 0x12ce <handleIRRemoteCommands+0x34>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	9e ef       	ldi	r25, 0xFE	; 254
    15f2:	90 93 f2 03 	sts	0x03F2, r25
    15f6:	80 93 f1 03 	sts	0x03F1, r24
    15fa:	69 ce       	rjmp	.-814    	; 0x12ce <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    15fc:	10 92 f0 03 	sts	0x03F0, r1
    1600:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    1604:	10 92 f2 03 	sts	0x03F2, r1
    1608:	10 92 f1 03 	sts	0x03F1, r1
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	5e ce       	rjmp	.-836    	; 0x12d2 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1616:	80 91 f1 03 	lds	r24, 0x03F1
    161a:	90 91 f2 03 	lds	r25, 0x03F2
    161e:	4e 96       	adiw	r24, 0x1e	; 30
    1620:	90 93 f2 03 	sts	0x03F2, r25
    1624:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1628:	22 e0       	ldi	r18, 0x02	; 2
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	92 07       	cpc	r25, r18
    162e:	0c f4       	brge	.+2      	; 0x1632 <handleIRRemoteCommands+0x398>
    1630:	e5 ce       	rjmp	.-566    	; 0x13fc <handleIRRemoteCommands+0x162>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	90 93 f2 03 	sts	0x03F2, r25
    163a:	80 93 f1 03 	sts	0x03F1, r24
    163e:	de ce       	rjmp	.-580    	; 0x13fc <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 24 04 	sts	0x0424, r24
							cliffAvoidanceEnabled = 1;
    1646:	80 93 25 04 	sts	0x0425, r24
    164a:	20 91 ef 03 	lds	r18, 0x03EF
    164e:	30 91 f0 03 	lds	r19, 0x03F0
    1652:	80 91 f1 03 	lds	r24, 0x03F1
    1656:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    165a:	39 ce       	rjmp	.-910    	; 0x12ce <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    165c:	c9 01       	movw	r24, r18
    165e:	25 cf       	rjmp	.-438    	; 0x14aa <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	61 f0       	breq	.+24     	; 0x167c <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	91 f0       	breq	.+36     	; 0x168c <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	d9 f0       	breq	.+54     	; 0x16a2 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1672:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1676:	80 93 0c 02 	sts	0x020C, r24
    167a:	6e cf       	rjmp	.-292    	; 0x1558 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1682:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1686:	80 93 0c 02 	sts	0x020C, r24
    168a:	66 cf       	rjmp	.-308    	; 0x1558 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    168c:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    168e:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1696:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    169a:	10 92 0c 02 	sts	0x020C, r1
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	5b cf       	rjmp	.-330    	; 0x1558 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    16a2:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    16a6:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    16aa:	10 92 0c 02 	sts	0x020C, r1
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	53 cf       	rjmp	.-346    	; 0x1558 <handleIRRemoteCommands+0x2be>

000016b2 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    16b2:	08 95       	ret

000016b4 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <start_vertical_speed_control_left+0x14>
    16c6:	b7 c0       	rjmp	.+366    	; 0x1836 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    16c8:	20 91 1c 04 	lds	r18, 0x041C
    16cc:	30 91 1d 04 	lds	r19, 0x041D
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	2e 30       	cpi	r18, 0x0E	; 14
    16d4:	34 07       	cpc	r19, r20
    16d6:	0c f4       	brge	.+2      	; 0x16da <start_vertical_speed_control_left+0x26>
    16d8:	88 c0       	rjmp	.+272    	; 0x17ea <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    16da:	18 16       	cp	r1, r24
    16dc:	19 06       	cpc	r1, r25
    16de:	0c f0       	brlt	.+2      	; 0x16e2 <start_vertical_speed_control_left+0x2e>
    16e0:	13 c1       	rjmp	.+550    	; 0x1908 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    16e2:	88 e6       	ldi	r24, 0x68	; 104
    16e4:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    16e6:	82 1b       	sub	r24, r18
    16e8:	93 0b       	sbc	r25, r19
    16ea:	95 95       	asr	r25
    16ec:	87 95       	ror	r24
    16ee:	95 95       	asr	r25
    16f0:	87 95       	ror	r24
    16f2:	29 e1       	ldi	r18, 0x19	; 25
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	28 1b       	sub	r18, r24
    16f8:	39 0b       	sbc	r19, r25
    16fa:	30 93 04 02 	sts	0x0204, r19
    16fe:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1702:	40 91 28 04 	lds	r20, 0x0428
    1706:	50 91 29 04 	lds	r21, 0x0429
    170a:	50 93 43 04 	sts	0x0443, r21
    170e:	40 93 42 04 	sts	0x0442, r20
	if(*pwm_left >= 0) {
    1712:	20 81       	ld	r18, Z
    1714:	31 81       	ldd	r19, Z+1	; 0x01
    1716:	37 fd       	sbrc	r19, 7
    1718:	d2 c0       	rjmp	.+420    	; 0x18be <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    171a:	80 91 e7 03 	lds	r24, 0x03E7
    171e:	90 91 e8 03 	lds	r25, 0x03E8
    1722:	b9 01       	movw	r22, r18
    1724:	68 1b       	sub	r22, r24
    1726:	79 0b       	sbc	r23, r25
    1728:	cb 01       	movw	r24, r22
    172a:	70 93 29 04 	sts	0x0429, r23
    172e:	60 93 28 04 	sts	0x0428, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1732:	20 91 f7 03 	lds	r18, 0x03F7
    1736:	30 91 f8 03 	lds	r19, 0x03F8
    173a:	28 0f       	add	r18, r24
    173c:	39 1f       	adc	r19, r25
    173e:	30 93 f8 03 	sts	0x03F8, r19
    1742:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1746:	76 e0       	ldi	r23, 0x06	; 6
    1748:	21 34       	cpi	r18, 0x41	; 65
    174a:	37 07       	cpc	r19, r23
    174c:	0c f4       	brge	.+2      	; 0x1750 <start_vertical_speed_control_left+0x9c>
    174e:	84 c0       	rjmp	.+264    	; 0x1858 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1750:	20 e4       	ldi	r18, 0x40	; 64
    1752:	36 e0       	ldi	r19, 0x06	; 6
    1754:	30 93 f8 03 	sts	0x03F8, r19
    1758:	20 93 f7 03 	sts	0x03F7, r18
    175c:	60 ec       	ldi	r22, 0xC0	; 192
    175e:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1760:	9c 01       	movw	r18, r24
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	dc 01       	movw	r26, r24
    1768:	aa 0f       	add	r26, r26
    176a:	bb 1f       	adc	r27, r27
    176c:	aa 0f       	add	r26, r26
    176e:	bb 1f       	adc	r27, r27
    1770:	aa 0f       	add	r26, r26
    1772:	bb 1f       	adc	r27, r27
    1774:	2a 0f       	add	r18, r26
    1776:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1778:	00 81       	ld	r16, Z
    177a:	11 81       	ldd	r17, Z+1	; 0x01
    177c:	c0 91 03 02 	lds	r28, 0x0203
    1780:	d0 91 04 02 	lds	r29, 0x0204
    1784:	0c 9f       	mul	r16, r28
    1786:	d0 01       	movw	r26, r0
    1788:	0d 9f       	mul	r16, r29
    178a:	b0 0d       	add	r27, r0
    178c:	1c 9f       	mul	r17, r28
    178e:	b0 0d       	add	r27, r0
    1790:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1792:	2a 0f       	add	r18, r26
    1794:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    1796:	48 1b       	sub	r20, r24
    1798:	59 0b       	sbc	r21, r25
    179a:	44 0f       	add	r20, r20
    179c:	55 1f       	adc	r21, r21
    179e:	24 0f       	add	r18, r20
    17a0:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    17a2:	26 0f       	add	r18, r22
    17a4:	37 1f       	adc	r19, r23
    17a6:	30 93 f6 03 	sts	0x03F6, r19
    17aa:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    17ae:	37 fd       	sbrc	r19, 7
    17b0:	69 c0       	rjmp	.+210    	; 0x1884 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    17b2:	12 16       	cp	r1, r18
    17b4:	13 06       	cpc	r1, r19
    17b6:	0c f0       	brlt	.+2      	; 0x17ba <start_vertical_speed_control_left+0x106>
    17b8:	6f c0       	rjmp	.+222    	; 0x1898 <start_vertical_speed_control_left+0x1e4>
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	97 fd       	sbrc	r25, 7
    17c0:	89 c0       	rjmp	.+274    	; 0x18d4 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    17c2:	7d e5       	ldi	r23, 0x5D	; 93
    17c4:	21 3c       	cpi	r18, 0xC1	; 193
    17c6:	37 07       	cpc	r19, r23
    17c8:	0c f4       	brge	.+2      	; 0x17cc <start_vertical_speed_control_left+0x118>
    17ca:	66 c0       	rjmp	.+204    	; 0x1898 <start_vertical_speed_control_left+0x1e4>
    17cc:	80 ec       	ldi	r24, 0xC0	; 192
    17ce:	9d e5       	ldi	r25, 0x5D	; 93
    17d0:	90 93 f6 03 	sts	0x03F6, r25
    17d4:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    17ea:	24 3b       	cpi	r18, 0xB4	; 180
    17ec:	31 05       	cpc	r19, r1
    17ee:	94 f4       	brge	.+36     	; 0x1814 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    17f0:	2a 35       	cpi	r18, 0x5A	; 90
    17f2:	31 05       	cpc	r19, r1
    17f4:	7c f4       	brge	.+30     	; 0x1814 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    17f6:	18 16       	cp	r1, r24
    17f8:	19 06       	cpc	r1, r25
    17fa:	0c f0       	brlt	.+2      	; 0x17fe <start_vertical_speed_control_left+0x14a>
    17fc:	93 c0       	rjmp	.+294    	; 0x1924 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    17fe:	35 95       	asr	r19
    1800:	27 95       	ror	r18
    1802:	35 95       	asr	r19
    1804:	27 95       	ror	r18
    1806:	27 5e       	subi	r18, 0xE7	; 231
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	30 93 04 02 	sts	0x0204, r19
    180e:	20 93 03 02 	sts	0x0203, r18
    1812:	77 cf       	rjmp	.-274    	; 0x1702 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1814:	18 16       	cp	r1, r24
    1816:	19 06       	cpc	r1, r25
    1818:	94 f5       	brge	.+100    	; 0x187e <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    181a:	84 eb       	ldi	r24, 0xB4	; 180
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	82 1b       	sub	r24, r18
    1820:	93 0b       	sbc	r25, r19
    1822:	95 95       	asr	r25
    1824:	87 95       	ror	r24
    1826:	95 95       	asr	r25
    1828:	87 95       	ror	r24
    182a:	49 96       	adiw	r24, 0x19	; 25
    182c:	90 93 04 02 	sts	0x0204, r25
    1830:	80 93 03 02 	sts	0x0203, r24
    1834:	66 cf       	rjmp	.-308    	; 0x1702 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1836:	10 92 f8 03 	sts	0x03F8, r1
    183a:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    183e:	10 92 29 04 	sts	0x0429, r1
    1842:	10 92 28 04 	sts	0x0428, r1
		delta_left_speed_prev = 0;
    1846:	10 92 43 04 	sts	0x0443, r1
    184a:	10 92 42 04 	sts	0x0442, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1858:	69 ef       	ldi	r22, 0xF9	; 249
    185a:	20 3c       	cpi	r18, 0xC0	; 192
    185c:	36 07       	cpc	r19, r22
    185e:	4c f4       	brge	.+18     	; 0x1872 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1860:	20 ec       	ldi	r18, 0xC0	; 192
    1862:	39 ef       	ldi	r19, 0xF9	; 249
    1864:	30 93 f8 03 	sts	0x03F8, r19
    1868:	20 93 f7 03 	sts	0x03F7, r18
    186c:	60 e4       	ldi	r22, 0x40	; 64
    186e:	7d ee       	ldi	r23, 0xED	; 237
    1870:	77 cf       	rjmp	.-274    	; 0x1760 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1872:	b9 01       	movw	r22, r18
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	62 0f       	add	r22, r18
    187a:	73 1f       	adc	r23, r19
    187c:	71 cf       	rjmp	.-286    	; 0x1760 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    187e:	84 eb       	ldi	r24, 0xB4	; 180
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	31 cf       	rjmp	.-414    	; 0x16e6 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	97 fd       	sbrc	r25, 7
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    188c:	10 92 f6 03 	sts	0x03F6, r1
    1890:	10 92 f5 03 	sts	0x03F5, r1
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1898:	82 ea       	ldi	r24, 0xA2	; 162
    189a:	20 34       	cpi	r18, 0x40	; 64
    189c:	38 07       	cpc	r19, r24
    189e:	04 f5       	brge	.+64     	; 0x18e0 <start_vertical_speed_control_left+0x22c>
    18a0:	80 e4       	ldi	r24, 0x40	; 64
    18a2:	92 ea       	ldi	r25, 0xA2	; 162
    18a4:	90 93 f6 03 	sts	0x03F6, r25
    18a8:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	9e ef       	ldi	r25, 0xFE	; 254
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24


}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    18be:	80 91 e7 03 	lds	r24, 0x03E7
    18c2:	90 91 e8 03 	lds	r25, 0x03E8
    18c6:	82 0f       	add	r24, r18
    18c8:	93 1f       	adc	r25, r19
    18ca:	90 93 29 04 	sts	0x0429, r25
    18ce:	80 93 28 04 	sts	0x0428, r24
    18d2:	2f cf       	rjmp	.-418    	; 0x1732 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    18d4:	10 92 f6 03 	sts	0x03F6, r1
    18d8:	10 92 f5 03 	sts	0x03F5, r1
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    18e0:	35 95       	asr	r19
    18e2:	27 95       	ror	r18
    18e4:	35 95       	asr	r19
    18e6:	27 95       	ror	r18
    18e8:	35 95       	asr	r19
    18ea:	27 95       	ror	r18
    18ec:	35 95       	asr	r19
    18ee:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    18f0:	31 83       	std	Z+1, r19	; 0x01
    18f2:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    18f4:	42 e0       	ldi	r20, 0x02	; 2
    18f6:	21 30       	cpi	r18, 0x01	; 1
    18f8:	34 07       	cpc	r19, r20
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <start_vertical_speed_control_left+0x24a>
    18fc:	6d cf       	rjmp	.-294    	; 0x17d8 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    18fe:	6e ef       	ldi	r22, 0xFE	; 254
    1900:	20 30       	cpi	r18, 0x00	; 0
    1902:	36 07       	cpc	r19, r22
    1904:	9c f2       	brlt	.-90     	; 0x18ac <start_vertical_speed_control_left+0x1f8>
    1906:	6c cf       	rjmp	.-296    	; 0x17e0 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1908:	88 e6       	ldi	r24, 0x68	; 104
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	82 1b       	sub	r24, r18
    190e:	93 0b       	sbc	r25, r19
    1910:	95 95       	asr	r25
    1912:	87 95       	ror	r24
    1914:	95 95       	asr	r25
    1916:	87 95       	ror	r24
    1918:	49 96       	adiw	r24, 0x19	; 25
    191a:	90 93 04 02 	sts	0x0204, r25
    191e:	80 93 03 02 	sts	0x0203, r24
    1922:	ef ce       	rjmp	.-546    	; 0x1702 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1924:	35 95       	asr	r19
    1926:	27 95       	ror	r18
    1928:	35 95       	asr	r19
    192a:	27 95       	ror	r18
    192c:	89 e1       	ldi	r24, 0x19	; 25
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	82 1b       	sub	r24, r18
    1932:	93 0b       	sbc	r25, r19
    1934:	90 93 04 02 	sts	0x0204, r25
    1938:	80 93 03 02 	sts	0x0203, r24
    193c:	e2 ce       	rjmp	.-572    	; 0x1702 <start_vertical_speed_control_left+0x4e>

0000193e <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1948:	80 81       	ld	r24, Z
    194a:	91 81       	ldd	r25, Z+1	; 0x01
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	09 f4       	brne	.+2      	; 0x1952 <start_vertical_speed_control_right+0x14>
    1950:	b7 c0       	rjmp	.+366    	; 0x1ac0 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1952:	20 91 1c 04 	lds	r18, 0x041C
    1956:	30 91 1d 04 	lds	r19, 0x041D
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	2e 30       	cpi	r18, 0x0E	; 14
    195e:	34 07       	cpc	r19, r20
    1960:	0c f4       	brge	.+2      	; 0x1964 <start_vertical_speed_control_right+0x26>
    1962:	88 c0       	rjmp	.+272    	; 0x1a74 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1964:	18 16       	cp	r1, r24
    1966:	19 06       	cpc	r1, r25
    1968:	0c f0       	brlt	.+2      	; 0x196c <start_vertical_speed_control_right+0x2e>
    196a:	13 c1       	rjmp	.+550    	; 0x1b92 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    196c:	88 e6       	ldi	r24, 0x68	; 104
    196e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1970:	82 1b       	sub	r24, r18
    1972:	93 0b       	sbc	r25, r19
    1974:	95 95       	asr	r25
    1976:	87 95       	ror	r24
    1978:	95 95       	asr	r25
    197a:	87 95       	ror	r24
    197c:	29 e1       	ldi	r18, 0x19	; 25
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	28 1b       	sub	r18, r24
    1982:	39 0b       	sbc	r19, r25
    1984:	30 93 06 02 	sts	0x0206, r19
    1988:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    198c:	40 91 51 04 	lds	r20, 0x0451
    1990:	50 91 52 04 	lds	r21, 0x0452
    1994:	50 93 2b 04 	sts	0x042B, r21
    1998:	40 93 2a 04 	sts	0x042A, r20
	if(*pwm_right >= 0) {
    199c:	20 81       	ld	r18, Z
    199e:	31 81       	ldd	r19, Z+1	; 0x01
    19a0:	37 fd       	sbrc	r19, 7
    19a2:	d2 c0       	rjmp	.+420    	; 0x1b48 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    19a4:	80 91 e9 03 	lds	r24, 0x03E9
    19a8:	90 91 ea 03 	lds	r25, 0x03EA
    19ac:	b9 01       	movw	r22, r18
    19ae:	68 1b       	sub	r22, r24
    19b0:	79 0b       	sbc	r23, r25
    19b2:	cb 01       	movw	r24, r22
    19b4:	70 93 52 04 	sts	0x0452, r23
    19b8:	60 93 51 04 	sts	0x0451, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    19bc:	20 91 f9 03 	lds	r18, 0x03F9
    19c0:	30 91 fa 03 	lds	r19, 0x03FA
    19c4:	28 0f       	add	r18, r24
    19c6:	39 1f       	adc	r19, r25
    19c8:	30 93 fa 03 	sts	0x03FA, r19
    19cc:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    19d0:	76 e0       	ldi	r23, 0x06	; 6
    19d2:	21 34       	cpi	r18, 0x41	; 65
    19d4:	37 07       	cpc	r19, r23
    19d6:	0c f4       	brge	.+2      	; 0x19da <start_vertical_speed_control_right+0x9c>
    19d8:	84 c0       	rjmp	.+264    	; 0x1ae2 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    19da:	20 e4       	ldi	r18, 0x40	; 64
    19dc:	36 e0       	ldi	r19, 0x06	; 6
    19de:	30 93 fa 03 	sts	0x03FA, r19
    19e2:	20 93 f9 03 	sts	0x03F9, r18
    19e6:	60 ec       	ldi	r22, 0xC0	; 192
    19e8:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    19ea:	9c 01       	movw	r18, r24
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	dc 01       	movw	r26, r24
    19f2:	aa 0f       	add	r26, r26
    19f4:	bb 1f       	adc	r27, r27
    19f6:	aa 0f       	add	r26, r26
    19f8:	bb 1f       	adc	r27, r27
    19fa:	aa 0f       	add	r26, r26
    19fc:	bb 1f       	adc	r27, r27
    19fe:	2a 0f       	add	r18, r26
    1a00:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1a02:	00 81       	ld	r16, Z
    1a04:	11 81       	ldd	r17, Z+1	; 0x01
    1a06:	c0 91 05 02 	lds	r28, 0x0205
    1a0a:	d0 91 06 02 	lds	r29, 0x0206
    1a0e:	0c 9f       	mul	r16, r28
    1a10:	d0 01       	movw	r26, r0
    1a12:	0d 9f       	mul	r16, r29
    1a14:	b0 0d       	add	r27, r0
    1a16:	1c 9f       	mul	r17, r28
    1a18:	b0 0d       	add	r27, r0
    1a1a:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1a1c:	2a 0f       	add	r18, r26
    1a1e:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1a20:	48 1b       	sub	r20, r24
    1a22:	59 0b       	sbc	r21, r25
    1a24:	44 0f       	add	r20, r20
    1a26:	55 1f       	adc	r21, r21
    1a28:	24 0f       	add	r18, r20
    1a2a:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1a2c:	26 0f       	add	r18, r22
    1a2e:	37 1f       	adc	r19, r23
    1a30:	30 93 f4 03 	sts	0x03F4, r19
    1a34:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1a38:	37 fd       	sbrc	r19, 7
    1a3a:	69 c0       	rjmp	.+210    	; 0x1b0e <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1a3c:	12 16       	cp	r1, r18
    1a3e:	13 06       	cpc	r1, r19
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <start_vertical_speed_control_right+0x106>
    1a42:	6f c0       	rjmp	.+222    	; 0x1b22 <start_vertical_speed_control_right+0x1e4>
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	97 fd       	sbrc	r25, 7
    1a4a:	89 c0       	rjmp	.+274    	; 0x1b5e <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1a4c:	7d e5       	ldi	r23, 0x5D	; 93
    1a4e:	21 3c       	cpi	r18, 0xC1	; 193
    1a50:	37 07       	cpc	r19, r23
    1a52:	0c f4       	brge	.+2      	; 0x1a56 <start_vertical_speed_control_right+0x118>
    1a54:	66 c0       	rjmp	.+204    	; 0x1b22 <start_vertical_speed_control_right+0x1e4>
    1a56:	80 ec       	ldi	r24, 0xC0	; 192
    1a58:	9d e5       	ldi	r25, 0x5D	; 93
    1a5a:	90 93 f4 03 	sts	0x03F4, r25
    1a5e:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	92 e0       	ldi	r25, 0x02	; 2
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1a74:	24 3b       	cpi	r18, 0xB4	; 180
    1a76:	31 05       	cpc	r19, r1
    1a78:	94 f4       	brge	.+36     	; 0x1a9e <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1a7a:	2a 35       	cpi	r18, 0x5A	; 90
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	7c f4       	brge	.+30     	; 0x1a9e <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1a80:	18 16       	cp	r1, r24
    1a82:	19 06       	cpc	r1, r25
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <start_vertical_speed_control_right+0x14a>
    1a86:	93 c0       	rjmp	.+294    	; 0x1bae <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1a88:	35 95       	asr	r19
    1a8a:	27 95       	ror	r18
    1a8c:	35 95       	asr	r19
    1a8e:	27 95       	ror	r18
    1a90:	27 5e       	subi	r18, 0xE7	; 231
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	30 93 06 02 	sts	0x0206, r19
    1a98:	20 93 05 02 	sts	0x0205, r18
    1a9c:	77 cf       	rjmp	.-274    	; 0x198c <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    1a9e:	18 16       	cp	r1, r24
    1aa0:	19 06       	cpc	r1, r25
    1aa2:	94 f5       	brge	.+100    	; 0x1b08 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    1aa4:	84 eb       	ldi	r24, 0xB4	; 180
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	82 1b       	sub	r24, r18
    1aaa:	93 0b       	sbc	r25, r19
    1aac:	95 95       	asr	r25
    1aae:	87 95       	ror	r24
    1ab0:	95 95       	asr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	49 96       	adiw	r24, 0x19	; 25
    1ab6:	90 93 06 02 	sts	0x0206, r25
    1aba:	80 93 05 02 	sts	0x0205, r24
    1abe:	66 cf       	rjmp	.-308    	; 0x198c <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1ac0:	10 92 fa 03 	sts	0x03FA, r1
    1ac4:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1ac8:	10 92 52 04 	sts	0x0452, r1
    1acc:	10 92 51 04 	sts	0x0451, r1
		delta_right_speed_prev = 0;
    1ad0:	10 92 2b 04 	sts	0x042B, r1
    1ad4:	10 92 2a 04 	sts	0x042A, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1ae2:	69 ef       	ldi	r22, 0xF9	; 249
    1ae4:	20 3c       	cpi	r18, 0xC0	; 192
    1ae6:	36 07       	cpc	r19, r22
    1ae8:	4c f4       	brge	.+18     	; 0x1afc <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1aea:	20 ec       	ldi	r18, 0xC0	; 192
    1aec:	39 ef       	ldi	r19, 0xF9	; 249
    1aee:	30 93 fa 03 	sts	0x03FA, r19
    1af2:	20 93 f9 03 	sts	0x03F9, r18
    1af6:	60 e4       	ldi	r22, 0x40	; 64
    1af8:	7d ee       	ldi	r23, 0xED	; 237
    1afa:	77 cf       	rjmp	.-274    	; 0x19ea <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1afc:	b9 01       	movw	r22, r18
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	62 0f       	add	r22, r18
    1b04:	73 1f       	adc	r23, r19
    1b06:	71 cf       	rjmp	.-286    	; 0x19ea <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1b08:	84 eb       	ldi	r24, 0xB4	; 180
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	31 cf       	rjmp	.-414    	; 0x1970 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	97 fd       	sbrc	r25, 7
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1b16:	10 92 f4 03 	sts	0x03F4, r1
    1b1a:	10 92 f3 03 	sts	0x03F3, r1
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1b22:	82 ea       	ldi	r24, 0xA2	; 162
    1b24:	20 34       	cpi	r18, 0x40	; 64
    1b26:	38 07       	cpc	r19, r24
    1b28:	04 f5       	brge	.+64     	; 0x1b6a <start_vertical_speed_control_right+0x22c>
    1b2a:	80 e4       	ldi	r24, 0x40	; 64
    1b2c:	92 ea       	ldi	r25, 0xA2	; 162
    1b2e:	90 93 f4 03 	sts	0x03F4, r25
    1b32:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	9e ef       	ldi	r25, 0xFE	; 254
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24

}
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1b48:	80 91 e9 03 	lds	r24, 0x03E9
    1b4c:	90 91 ea 03 	lds	r25, 0x03EA
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	90 93 52 04 	sts	0x0452, r25
    1b58:	80 93 51 04 	sts	0x0451, r24
    1b5c:	2f cf       	rjmp	.-418    	; 0x19bc <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1b5e:	10 92 f4 03 	sts	0x03F4, r1
    1b62:	10 92 f3 03 	sts	0x03F3, r1
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1b6a:	35 95       	asr	r19
    1b6c:	27 95       	ror	r18
    1b6e:	35 95       	asr	r19
    1b70:	27 95       	ror	r18
    1b72:	35 95       	asr	r19
    1b74:	27 95       	ror	r18
    1b76:	35 95       	asr	r19
    1b78:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1b7a:	31 83       	std	Z+1, r19	; 0x01
    1b7c:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1b7e:	42 e0       	ldi	r20, 0x02	; 2
    1b80:	21 30       	cpi	r18, 0x01	; 1
    1b82:	34 07       	cpc	r19, r20
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <start_vertical_speed_control_right+0x24a>
    1b86:	6d cf       	rjmp	.-294    	; 0x1a62 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1b88:	6e ef       	ldi	r22, 0xFE	; 254
    1b8a:	20 30       	cpi	r18, 0x00	; 0
    1b8c:	36 07       	cpc	r19, r22
    1b8e:	9c f2       	brlt	.-90     	; 0x1b36 <start_vertical_speed_control_right+0x1f8>
    1b90:	6c cf       	rjmp	.-296    	; 0x1a6a <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1b92:	88 e6       	ldi	r24, 0x68	; 104
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	82 1b       	sub	r24, r18
    1b98:	93 0b       	sbc	r25, r19
    1b9a:	95 95       	asr	r25
    1b9c:	87 95       	ror	r24
    1b9e:	95 95       	asr	r25
    1ba0:	87 95       	ror	r24
    1ba2:	49 96       	adiw	r24, 0x19	; 25
    1ba4:	90 93 06 02 	sts	0x0206, r25
    1ba8:	80 93 05 02 	sts	0x0205, r24
    1bac:	ef ce       	rjmp	.-546    	; 0x198c <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1bae:	35 95       	asr	r19
    1bb0:	27 95       	ror	r18
    1bb2:	35 95       	asr	r19
    1bb4:	27 95       	ror	r18
    1bb6:	89 e1       	ldi	r24, 0x19	; 25
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	82 1b       	sub	r24, r18
    1bbc:	93 0b       	sbc	r25, r19
    1bbe:	90 93 06 02 	sts	0x0206, r25
    1bc2:	80 93 05 02 	sts	0x0205, r24
    1bc6:	e2 ce       	rjmp	.-572    	; 0x198c <start_vertical_speed_control_right+0x4e>

00001bc8 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1bc8:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <start_horizontal_speed_control_right+0xc>
    1bd2:	7b c0       	rjmp	.+246    	; 0x1cca <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1bd4:	a0 91 51 04 	lds	r26, 0x0451
    1bd8:	b0 91 52 04 	lds	r27, 0x0452
    1bdc:	b0 93 2b 04 	sts	0x042B, r27
    1be0:	a0 93 2a 04 	sts	0x042A, r26
	if(*pwm_right >= 0) {
    1be4:	20 81       	ld	r18, Z
    1be6:	31 81       	ldd	r19, Z+1	; 0x01
    1be8:	37 fd       	sbrc	r19, 7
    1bea:	89 c0       	rjmp	.+274    	; 0x1cfe <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1bec:	80 91 e9 03 	lds	r24, 0x03E9
    1bf0:	90 91 ea 03 	lds	r25, 0x03EA
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	48 1b       	sub	r20, r24
    1bf8:	59 0b       	sbc	r21, r25
    1bfa:	ca 01       	movw	r24, r20
    1bfc:	50 93 52 04 	sts	0x0452, r21
    1c00:	40 93 51 04 	sts	0x0451, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1c04:	20 91 f9 03 	lds	r18, 0x03F9
    1c08:	30 91 fa 03 	lds	r19, 0x03FA
    1c0c:	28 0f       	add	r18, r24
    1c0e:	39 1f       	adc	r19, r25
    1c10:	30 93 fa 03 	sts	0x03FA, r19
    1c14:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1c18:	56 e0       	ldi	r21, 0x06	; 6
    1c1a:	21 34       	cpi	r18, 0x41	; 65
    1c1c:	35 07       	cpc	r19, r21
    1c1e:	0c f4       	brge	.+2      	; 0x1c22 <start_horizontal_speed_control_right+0x5a>
    1c20:	61 c0       	rjmp	.+194    	; 0x1ce4 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1c22:	20 e4       	ldi	r18, 0x40	; 64
    1c24:	36 e0       	ldi	r19, 0x06	; 6
    1c26:	30 93 fa 03 	sts	0x03FA, r19
    1c2a:	20 93 f9 03 	sts	0x03F9, r18
    1c2e:	60 e8       	ldi	r22, 0x80	; 128
    1c30:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1c32:	9c 01       	movw	r18, r24
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	28 0f       	add	r18, r24
    1c3a:	39 1f       	adc	r19, r25
    1c3c:	22 0f       	add	r18, r18
    1c3e:	33 1f       	adc	r19, r19
    1c40:	22 0f       	add	r18, r18
    1c42:	33 1f       	adc	r19, r19
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	28 0f       	add	r18, r24
    1c4a:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1c4c:	40 81       	ld	r20, Z
    1c4e:	51 81       	ldd	r21, Z+1	; 0x01
    1c50:	44 0f       	add	r20, r20
    1c52:	55 1f       	adc	r21, r21
    1c54:	44 0f       	add	r20, r20
    1c56:	55 1f       	adc	r21, r21
    1c58:	44 0f       	add	r20, r20
    1c5a:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1c5c:	24 0f       	add	r18, r20
    1c5e:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1c60:	ad 01       	movw	r20, r26
    1c62:	48 1b       	sub	r20, r24
    1c64:	59 0b       	sbc	r21, r25
    1c66:	ca 01       	movw	r24, r20
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	84 0f       	add	r24, r20
    1c6e:	95 1f       	adc	r25, r21
    1c70:	28 0f       	add	r18, r24
    1c72:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1c74:	26 0f       	add	r18, r22
    1c76:	37 1f       	adc	r19, r23
    1c78:	30 93 f4 03 	sts	0x03F4, r19
    1c7c:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c80:	37 fd       	sbrc	r19, 7
    1c82:	4c c0       	rjmp	.+152    	; 0x1d1c <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1c84:	12 16       	cp	r1, r18
    1c86:	13 06       	cpc	r1, r19
    1c88:	0c f0       	brlt	.+2      	; 0x1c8c <start_horizontal_speed_control_right+0xc4>
    1c8a:	52 c0       	rjmp	.+164    	; 0x1d30 <start_horizontal_speed_control_right+0x168>
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	97 fd       	sbrc	r25, 7
    1c92:	67 c0       	rjmp	.+206    	; 0x1d62 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1c94:	5d e5       	ldi	r21, 0x5D	; 93
    1c96:	21 3c       	cpi	r18, 0xC1	; 193
    1c98:	35 07       	cpc	r19, r21
    1c9a:	0c f4       	brge	.+2      	; 0x1c9e <start_horizontal_speed_control_right+0xd6>
    1c9c:	49 c0       	rjmp	.+146    	; 0x1d30 <start_horizontal_speed_control_right+0x168>
    1c9e:	80 ec       	ldi	r24, 0xC0	; 192
    1ca0:	9d e5       	ldi	r25, 0x5D	; 93
    1ca2:	90 93 f4 03 	sts	0x03F4, r25
    1ca6:	80 93 f3 03 	sts	0x03F3, r24
    1caa:	2c ed       	ldi	r18, 0xDC	; 220
    1cac:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1cae:	22 5e       	subi	r18, 0xE2	; 226
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	31 83       	std	Z+1, r19	; 0x01
    1cb4:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1cb6:	42 e0       	ldi	r20, 0x02	; 2
    1cb8:	21 30       	cpi	r18, 0x01	; 1
    1cba:	34 07       	cpc	r19, r20
    1cbc:	0c f4       	brge	.+2      	; 0x1cc0 <start_horizontal_speed_control_right+0xf8>
    1cbe:	48 c0       	rjmp	.+144    	; 0x1d50 <start_horizontal_speed_control_right+0x188>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	92 e0       	ldi	r25, 0x02	; 2
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1cca:	10 92 fa 03 	sts	0x03FA, r1
    1cce:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1cd2:	10 92 52 04 	sts	0x0452, r1
    1cd6:	10 92 51 04 	sts	0x0451, r1
		delta_right_speed_prev = 0;
    1cda:	10 92 2b 04 	sts	0x042B, r1
    1cde:	10 92 2a 04 	sts	0x042A, r1
		return;
    1ce2:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1ce4:	49 ef       	ldi	r20, 0xF9	; 249
    1ce6:	20 3c       	cpi	r18, 0xC0	; 192
    1ce8:	34 07       	cpc	r19, r20
    1cea:	a4 f4       	brge	.+40     	; 0x1d14 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1cec:	20 ec       	ldi	r18, 0xC0	; 192
    1cee:	39 ef       	ldi	r19, 0xF9	; 249
    1cf0:	30 93 fa 03 	sts	0x03FA, r19
    1cf4:	20 93 f9 03 	sts	0x03F9, r18
    1cf8:	60 e8       	ldi	r22, 0x80	; 128
    1cfa:	73 ef       	ldi	r23, 0xF3	; 243
    1cfc:	9a cf       	rjmp	.-204    	; 0x1c32 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1cfe:	80 91 e9 03 	lds	r24, 0x03E9
    1d02:	90 91 ea 03 	lds	r25, 0x03EA
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	90 93 52 04 	sts	0x0452, r25
    1d0e:	80 93 51 04 	sts	0x0451, r24
    1d12:	78 cf       	rjmp	.-272    	; 0x1c04 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1d14:	b9 01       	movw	r22, r18
    1d16:	66 0f       	add	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	8b cf       	rjmp	.-234    	; 0x1c32 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	97 fd       	sbrc	r25, 7
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1d24:	10 92 f4 03 	sts	0x03F4, r1
    1d28:	10 92 f3 03 	sts	0x03F3, r1
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1d30:	82 ea       	ldi	r24, 0xA2	; 162
    1d32:	20 34       	cpi	r18, 0x40	; 64
    1d34:	38 07       	cpc	r19, r24
    1d36:	dc f4       	brge	.+54     	; 0x1d6e <start_horizontal_speed_control_right+0x1a6>
    1d38:	80 e4       	ldi	r24, 0x40	; 64
    1d3a:	92 ea       	ldi	r25, 0xA2	; 162
    1d3c:	90 93 f4 03 	sts	0x03F4, r25
    1d40:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1d44:	24 e2       	ldi	r18, 0x24	; 36
    1d46:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1d48:	2e 51       	subi	r18, 0x1E	; 30
    1d4a:	30 40       	sbci	r19, 0x00	; 0
    1d4c:	31 83       	std	Z+1, r19	; 0x01
    1d4e:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1d50:	5e ef       	ldi	r21, 0xFE	; 254
    1d52:	20 30       	cpi	r18, 0x00	; 0
    1d54:	35 07       	cpc	r19, r21
    1d56:	24 f4       	brge	.+8      	; 0x1d60 <start_horizontal_speed_control_right+0x198>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	9e ef       	ldi	r25, 0xFE	; 254
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1d62:	10 92 f4 03 	sts	0x03F4, r1
    1d66:	10 92 f3 03 	sts	0x03F3, r1
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1d6e:	35 95       	asr	r19
    1d70:	27 95       	ror	r18
    1d72:	35 95       	asr	r19
    1d74:	27 95       	ror	r18
    1d76:	35 95       	asr	r19
    1d78:	27 95       	ror	r18
    1d7a:	35 95       	asr	r19
    1d7c:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1d7e:	31 83       	std	Z+1, r19	; 0x01
    1d80:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1d82:	12 16       	cp	r1, r18
    1d84:	13 06       	cpc	r1, r19
    1d86:	0c f4       	brge	.+2      	; 0x1d8a <start_horizontal_speed_control_right+0x1c2>
    1d88:	92 cf       	rjmp	.-220    	; 0x1cae <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1d8a:	21 15       	cp	r18, r1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	e1 f6       	brne	.-72     	; 0x1d48 <start_horizontal_speed_control_right+0x180>
    1d90:	08 95       	ret

00001d92 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1d92:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <start_horizontal_speed_control_left+0xc>
    1d9c:	7b c0       	rjmp	.+246    	; 0x1e94 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1d9e:	a0 91 28 04 	lds	r26, 0x0428
    1da2:	b0 91 29 04 	lds	r27, 0x0429
    1da6:	b0 93 43 04 	sts	0x0443, r27
    1daa:	a0 93 42 04 	sts	0x0442, r26
	if(*pwm_left >= 0) {
    1dae:	20 81       	ld	r18, Z
    1db0:	31 81       	ldd	r19, Z+1	; 0x01
    1db2:	37 fd       	sbrc	r19, 7
    1db4:	89 c0       	rjmp	.+274    	; 0x1ec8 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1db6:	80 91 e7 03 	lds	r24, 0x03E7
    1dba:	90 91 e8 03 	lds	r25, 0x03E8
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	48 1b       	sub	r20, r24
    1dc2:	59 0b       	sbc	r21, r25
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	50 93 29 04 	sts	0x0429, r21
    1dca:	40 93 28 04 	sts	0x0428, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1dce:	20 91 f7 03 	lds	r18, 0x03F7
    1dd2:	30 91 f8 03 	lds	r19, 0x03F8
    1dd6:	28 0f       	add	r18, r24
    1dd8:	39 1f       	adc	r19, r25
    1dda:	30 93 f8 03 	sts	0x03F8, r19
    1dde:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1de2:	56 e0       	ldi	r21, 0x06	; 6
    1de4:	21 34       	cpi	r18, 0x41	; 65
    1de6:	35 07       	cpc	r19, r21
    1de8:	0c f4       	brge	.+2      	; 0x1dec <start_horizontal_speed_control_left+0x5a>
    1dea:	61 c0       	rjmp	.+194    	; 0x1eae <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1dec:	20 e4       	ldi	r18, 0x40	; 64
    1dee:	36 e0       	ldi	r19, 0x06	; 6
    1df0:	30 93 f8 03 	sts	0x03F8, r19
    1df4:	20 93 f7 03 	sts	0x03F7, r18
    1df8:	60 e8       	ldi	r22, 0x80	; 128
    1dfa:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	28 0f       	add	r18, r24
    1e04:	39 1f       	adc	r19, r25
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	28 0f       	add	r18, r24
    1e14:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1e16:	40 81       	ld	r20, Z
    1e18:	51 81       	ldd	r21, Z+1	; 0x01
    1e1a:	44 0f       	add	r20, r20
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	44 0f       	add	r20, r20
    1e20:	55 1f       	adc	r21, r21
    1e22:	44 0f       	add	r20, r20
    1e24:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1e26:	24 0f       	add	r18, r20
    1e28:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1e2a:	ad 01       	movw	r20, r26
    1e2c:	48 1b       	sub	r20, r24
    1e2e:	59 0b       	sbc	r21, r25
    1e30:	ca 01       	movw	r24, r20
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	84 0f       	add	r24, r20
    1e38:	95 1f       	adc	r25, r21
    1e3a:	28 0f       	add	r18, r24
    1e3c:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1e3e:	26 0f       	add	r18, r22
    1e40:	37 1f       	adc	r19, r23
    1e42:	30 93 f6 03 	sts	0x03F6, r19
    1e46:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1e4a:	37 fd       	sbrc	r19, 7
    1e4c:	4c c0       	rjmp	.+152    	; 0x1ee6 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1e4e:	12 16       	cp	r1, r18
    1e50:	13 06       	cpc	r1, r19
    1e52:	0c f0       	brlt	.+2      	; 0x1e56 <start_horizontal_speed_control_left+0xc4>
    1e54:	52 c0       	rjmp	.+164    	; 0x1efa <start_horizontal_speed_control_left+0x168>
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	97 fd       	sbrc	r25, 7
    1e5c:	67 c0       	rjmp	.+206    	; 0x1f2c <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1e5e:	5d e5       	ldi	r21, 0x5D	; 93
    1e60:	21 3c       	cpi	r18, 0xC1	; 193
    1e62:	35 07       	cpc	r19, r21
    1e64:	0c f4       	brge	.+2      	; 0x1e68 <start_horizontal_speed_control_left+0xd6>
    1e66:	49 c0       	rjmp	.+146    	; 0x1efa <start_horizontal_speed_control_left+0x168>
    1e68:	80 ec       	ldi	r24, 0xC0	; 192
    1e6a:	9d e5       	ldi	r25, 0x5D	; 93
    1e6c:	90 93 f6 03 	sts	0x03F6, r25
    1e70:	80 93 f5 03 	sts	0x03F5, r24
    1e74:	2c ed       	ldi	r18, 0xDC	; 220
    1e76:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1e78:	22 5e       	subi	r18, 0xE2	; 226
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	31 83       	std	Z+1, r19	; 0x01
    1e7e:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1e80:	42 e0       	ldi	r20, 0x02	; 2
    1e82:	21 30       	cpi	r18, 0x01	; 1
    1e84:	34 07       	cpc	r19, r20
    1e86:	0c f4       	brge	.+2      	; 0x1e8a <start_horizontal_speed_control_left+0xf8>
    1e88:	48 c0       	rjmp	.+144    	; 0x1f1a <start_horizontal_speed_control_left+0x188>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
    1e92:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1e94:	10 92 f8 03 	sts	0x03F8, r1
    1e98:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1e9c:	10 92 29 04 	sts	0x0429, r1
    1ea0:	10 92 28 04 	sts	0x0428, r1
		delta_left_speed_prev = 0;
    1ea4:	10 92 43 04 	sts	0x0443, r1
    1ea8:	10 92 42 04 	sts	0x0442, r1
		return;
    1eac:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1eae:	49 ef       	ldi	r20, 0xF9	; 249
    1eb0:	20 3c       	cpi	r18, 0xC0	; 192
    1eb2:	34 07       	cpc	r19, r20
    1eb4:	a4 f4       	brge	.+40     	; 0x1ede <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1eb6:	20 ec       	ldi	r18, 0xC0	; 192
    1eb8:	39 ef       	ldi	r19, 0xF9	; 249
    1eba:	30 93 f8 03 	sts	0x03F8, r19
    1ebe:	20 93 f7 03 	sts	0x03F7, r18
    1ec2:	60 e8       	ldi	r22, 0x80	; 128
    1ec4:	73 ef       	ldi	r23, 0xF3	; 243
    1ec6:	9a cf       	rjmp	.-204    	; 0x1dfc <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1ec8:	80 91 e7 03 	lds	r24, 0x03E7
    1ecc:	90 91 e8 03 	lds	r25, 0x03E8
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	90 93 29 04 	sts	0x0429, r25
    1ed8:	80 93 28 04 	sts	0x0428, r24
    1edc:	78 cf       	rjmp	.-272    	; 0x1dce <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1ede:	b9 01       	movw	r22, r18
    1ee0:	66 0f       	add	r22, r22
    1ee2:	77 1f       	adc	r23, r23
    1ee4:	8b cf       	rjmp	.-234    	; 0x1dfc <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	97 fd       	sbrc	r25, 7
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1eee:	10 92 f6 03 	sts	0x03F6, r1
    1ef2:	10 92 f5 03 	sts	0x03F5, r1
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1efa:	82 ea       	ldi	r24, 0xA2	; 162
    1efc:	20 34       	cpi	r18, 0x40	; 64
    1efe:	38 07       	cpc	r19, r24
    1f00:	dc f4       	brge	.+54     	; 0x1f38 <start_horizontal_speed_control_left+0x1a6>
    1f02:	80 e4       	ldi	r24, 0x40	; 64
    1f04:	92 ea       	ldi	r25, 0xA2	; 162
    1f06:	90 93 f6 03 	sts	0x03F6, r25
    1f0a:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1f0e:	24 e2       	ldi	r18, 0x24	; 36
    1f10:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    1f12:	2e 51       	subi	r18, 0x1E	; 30
    1f14:	30 40       	sbci	r19, 0x00	; 0
    1f16:	31 83       	std	Z+1, r19	; 0x01
    1f18:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1f1a:	5e ef       	ldi	r21, 0xFE	; 254
    1f1c:	20 30       	cpi	r18, 0x00	; 0
    1f1e:	35 07       	cpc	r19, r21
    1f20:	24 f4       	brge	.+8      	; 0x1f2a <start_horizontal_speed_control_left+0x198>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	9e ef       	ldi	r25, 0xFE	; 254
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1f2c:	10 92 f6 03 	sts	0x03F6, r1
    1f30:	10 92 f5 03 	sts	0x03F5, r1
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1f38:	35 95       	asr	r19
    1f3a:	27 95       	ror	r18
    1f3c:	35 95       	asr	r19
    1f3e:	27 95       	ror	r18
    1f40:	35 95       	asr	r19
    1f42:	27 95       	ror	r18
    1f44:	35 95       	asr	r19
    1f46:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1f48:	31 83       	std	Z+1, r19	; 0x01
    1f4a:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    1f4c:	12 16       	cp	r1, r18
    1f4e:	13 06       	cpc	r1, r19
    1f50:	0c f4       	brge	.+2      	; 0x1f54 <start_horizontal_speed_control_left+0x1c2>
    1f52:	92 cf       	rjmp	.-220    	; 0x1e78 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    1f54:	21 15       	cp	r18, r1
    1f56:	31 05       	cpc	r19, r1
    1f58:	e1 f6       	brne	.-72     	; 0x1f12 <start_horizontal_speed_control_left+0x180>
    1f5a:	08 95       	ret

00001f5c <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1f5c:	85 b7       	in	r24, 0x35	; 53
    1f5e:	80 61       	ori	r24, 0x10	; 16
    1f60:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1f62:	8f ef       	ldi	r24, 0xFF	; 255
    1f64:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1f66:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1f68:	97 ef       	ldi	r25, 0xF7	; 247
    1f6a:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1f6c:	90 ee       	ldi	r25, 0xE0	; 224
    1f6e:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1f70:	90 ef       	ldi	r25, 0xF0	; 240
    1f72:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1f74:	90 eb       	ldi	r25, 0xB0	; 176
    1f76:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1f78:	9c ef       	ldi	r25, 0xFC	; 252
    1f7a:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1f80:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1f82:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1f84:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1f86:	83 bb       	out	0x13, r24	; 19
	#ifdef HW_REV_3_0
		PORTG = 0x00;		// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;		// default for unused pins is 0
    1f88:	14 ba       	out	0x14, r1	; 20
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	#endif	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1f8a:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1f8e:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1f92:	9f e0       	ldi	r25, 0x0F	; 15
    1f94:	90 93 04 01 	sts	0x0104, r25
	#ifdef HW_REV_3_0
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	#endif
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
    1f98:	90 93 05 01 	sts	0x0105, r25
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;			// adc channel pins as input
    1f9c:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1fa0:	80 93 0a 01 	sts	0x010A, r24
	#ifdef HW_REV_3_0
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1fa4:	10 92 0b 01 	sts	0x010B, r1
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
	#endif
		
}
    1fa8:	08 95       	ret

00001faa <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    1faa:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1fae:	10 92 bc 00 	sts	0x00BC, r1
}
    1fb2:	08 95       	ret

00001fb4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1fb4:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1fb6:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1fb8:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1fc2:	08 95       	ret

00001fc4 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1fc4:	94 ea       	ldi	r25, 0xA4	; 164
    1fc6:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1fca:	90 91 bc 00 	lds	r25, 0x00BC
    1fce:	97 ff       	sbrs	r25, 7
    1fd0:	fc cf       	rjmp	.-8      	; 0x1fca <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fd2:	90 91 b9 00 	lds	r25, 0x00B9
    1fd6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1fd8:	98 30       	cpi	r25, 0x08	; 8
    1fda:	21 f0       	breq	.+8      	; 0x1fe4 <i2c_start+0x20>
    1fdc:	90 31       	cpi	r25, 0x10	; 16
    1fde:	11 f0       	breq	.+4      	; 0x1fe4 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1fe4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1fe8:	84 e8       	ldi	r24, 0x84	; 132
    1fea:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1fee:	80 91 bc 00 	lds	r24, 0x00BC
    1ff2:	87 ff       	sbrs	r24, 7
    1ff4:	fc cf       	rjmp	.-8      	; 0x1fee <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1ff6:	90 91 b9 00 	lds	r25, 0x00B9
    1ffa:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1ffc:	98 31       	cpi	r25, 0x18	; 24
    1ffe:	21 f0       	breq	.+8      	; 0x2008 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 34       	cpi	r25, 0x40	; 64
    2004:	19 f0       	breq	.+6      	; 0x200c <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2006:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2008:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    200a:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	08 95       	ret

00002010 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2010:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2012:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2014:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2016:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    201a:	90 91 bc 00 	lds	r25, 0x00BC
    201e:	97 ff       	sbrs	r25, 7
    2020:	fc cf       	rjmp	.-8      	; 0x201a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2022:	90 91 b9 00 	lds	r25, 0x00B9
    2026:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2028:	98 30       	cpi	r25, 0x08	; 8
    202a:	11 f0       	breq	.+4      	; 0x2030 <i2c_start_wait+0x20>
    202c:	90 31       	cpi	r25, 0x10	; 16
    202e:	99 f7       	brne	.-26     	; 0x2016 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2030:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2034:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2038:	90 91 bc 00 	lds	r25, 0x00BC
    203c:	97 ff       	sbrs	r25, 7
    203e:	fc cf       	rjmp	.-8      	; 0x2038 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2040:	90 91 b9 00 	lds	r25, 0x00B9
    2044:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2046:	90 32       	cpi	r25, 0x20	; 32
    2048:	19 f0       	breq	.+6      	; 0x2050 <i2c_start_wait+0x40>
    204a:	98 35       	cpi	r25, 0x58	; 88
    204c:	09 f0       	breq	.+2      	; 0x2050 <i2c_start_wait+0x40>
    204e:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2050:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2054:	90 91 bc 00 	lds	r25, 0x00BC
    2058:	94 fd       	sbrc	r25, 4
    205a:	fc cf       	rjmp	.-8      	; 0x2054 <i2c_start_wait+0x44>
    205c:	dc cf       	rjmp	.-72     	; 0x2016 <i2c_start_wait+0x6>

0000205e <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    205e:	94 ea       	ldi	r25, 0xA4	; 164
    2060:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2064:	90 91 bc 00 	lds	r25, 0x00BC
    2068:	97 ff       	sbrs	r25, 7
    206a:	fc cf       	rjmp	.-8      	; 0x2064 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    206c:	90 91 b9 00 	lds	r25, 0x00B9
    2070:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2072:	98 30       	cpi	r25, 0x08	; 8
    2074:	21 f0       	breq	.+8      	; 0x207e <i2c_rep_start+0x20>
    2076:	90 31       	cpi	r25, 0x10	; 16
    2078:	11 f0       	breq	.+4      	; 0x207e <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    207e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2082:	84 e8       	ldi	r24, 0x84	; 132
    2084:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2088:	80 91 bc 00 	lds	r24, 0x00BC
    208c:	87 ff       	sbrs	r24, 7
    208e:	fc cf       	rjmp	.-8      	; 0x2088 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2090:	90 91 b9 00 	lds	r25, 0x00B9
    2094:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2096:	98 31       	cpi	r25, 0x18	; 24
    2098:	21 f0       	breq	.+8      	; 0x20a2 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 34       	cpi	r25, 0x40	; 64
    209e:	19 f0       	breq	.+6      	; 0x20a6 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    20a0:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    20a2:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    20a4:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	08 95       	ret

000020aa <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    20aa:	84 e9       	ldi	r24, 0x94	; 148
    20ac:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    20b0:	80 91 bc 00 	lds	r24, 0x00BC
    20b4:	84 fd       	sbrc	r24, 4
    20b6:	fc cf       	rjmp	.-8      	; 0x20b0 <i2c_stop+0x6>

}/* i2c_stop */
    20b8:	08 95       	ret

000020ba <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    20ba:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    20be:	84 e8       	ldi	r24, 0x84	; 132
    20c0:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    20c4:	80 91 bc 00 	lds	r24, 0x00BC
    20c8:	87 ff       	sbrs	r24, 7
    20ca:	fc cf       	rjmp	.-8      	; 0x20c4 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    20cc:	90 91 b9 00 	lds	r25, 0x00B9
    20d0:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	98 32       	cpi	r25, 0x28	; 40
    20d6:	09 f0       	breq	.+2      	; 0x20da <i2c_write+0x20>
	return 0;

}/* i2c_write */
    20d8:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    20da:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    20dc:	08 95       	ret

000020de <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    20de:	84 ec       	ldi	r24, 0xC4	; 196
    20e0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    20e4:	80 91 bc 00 	lds	r24, 0x00BC
    20e8:	87 ff       	sbrs	r24, 7
    20ea:	fc cf       	rjmp	.-8      	; 0x20e4 <i2c_readAck+0x6>

    return TWDR;
    20ec:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    20f0:	08 95       	ret

000020f2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    20f2:	84 e8       	ldi	r24, 0x84	; 132
    20f4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    20f8:	80 91 bc 00 	lds	r24, 0x00BC
    20fc:	87 ff       	sbrs	r24, 7
    20fe:	fc cf       	rjmp	.-8      	; 0x20f8 <i2c_readNak+0x6>
	
    return TWDR;
    2100:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2104:	08 95       	ret

00002106 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2106:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    210a:	80 e1       	ldi	r24, 0x10	; 16
    210c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2110:	e0 ec       	ldi	r30, 0xC0	; 192
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	82 60       	ori	r24, 0x02	; 2
    2118:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    211a:	e1 ec       	ldi	r30, 0xC1	; 193
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	88 69       	ori	r24, 0x98	; 152
    2122:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2124:	e2 ec       	ldi	r30, 0xC2	; 194
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	86 60       	ori	r24, 0x06	; 6
    212c:	80 83       	st	Z, r24

}
    212e:	08 95       	ret

00002130 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    2130:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2134:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2138:	10 92 c2 00 	sts	0x00C2, r1

}
    213c:	08 95       	ret

0000213e <usartTransmit>:

void usartTransmit(unsigned char data) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    213e:	90 91 c0 00 	lds	r25, 0x00C0
    2142:	95 ff       	sbrs	r25, 5
    2144:	fc cf       	rjmp	.-8      	; 0x213e <usartTransmit>
	UDR0 = data;						// put data into buffer, sends the data
    2146:	80 93 c6 00 	sts	0x00C6, r24

}
    214a:	08 95       	ret

0000214c <__vector_25>:
// for options 0,1,2 there are the commands "+" and "-" that increase or decrease the luminosity of the leds
// for options 3,4 there are the commmands "+", "-" and "s" to increase, decrease and reset to zero the speed respectively
// for options 5 there is the command "s" that stop the sending of the adc values
// if a key is pressed that do not correspond to any commands for that option, then the initial menu is entered.

ISR(USART0_RX_vect) {
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	2f 93       	push	r18
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25

	char receivedByte = UDR0;
    215c:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {						// menu
    2160:	90 91 10 02 	lds	r25, 0x0210
    2164:	99 23       	and	r25, r25
    2166:	b9 f0       	breq	.+46     	; 0x2196 <__vector_25+0x4a>
		switch(receivedByte) {
    2168:	82 33       	cpi	r24, 0x32	; 50
    216a:	09 f4       	brne	.+2      	; 0x216e <__vector_25+0x22>
    216c:	5b c0       	rjmp	.+182    	; 0x2224 <__stack+0x25>
    216e:	83 33       	cpi	r24, 0x33	; 51
    2170:	80 f5       	brcc	.+96     	; 0x21d2 <__vector_25+0x86>
    2172:	80 33       	cpi	r24, 0x30	; 48
    2174:	09 f4       	brne	.+2      	; 0x2178 <__vector_25+0x2c>
    2176:	7e c0       	rjmp	.+252    	; 0x2274 <__stack+0x75>
    2178:	81 33       	cpi	r24, 0x31	; 49
    217a:	29 f4       	brne	.+10     	; 0x2186 <__vector_25+0x3a>
			case '0': 							// red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': 							// green led
				peripheralChoice = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2182:	10 92 10 02 	sts	0x0210, r1

	}



}
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	2f 91       	pop	r18
    218c:	0f 90       	pop	r0
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	0f 90       	pop	r0
    2192:	1f 90       	pop	r1
    2194:	18 95       	reti

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    2196:	90 91 0f 02 	lds	r25, 0x020F
    219a:	92 30       	cpi	r25, 0x02	; 2
    219c:	09 f4       	brne	.+2      	; 0x21a0 <__vector_25+0x54>
    219e:	48 c0       	rjmp	.+144    	; 0x2230 <__stack+0x31>
    21a0:	93 30       	cpi	r25, 0x03	; 3
    21a2:	40 f1       	brcs	.+80     	; 0x21f4 <__vector_25+0xa8>
    21a4:	94 30       	cpi	r25, 0x04	; 4
    21a6:	09 f4       	brne	.+2      	; 0x21aa <__vector_25+0x5e>
    21a8:	8c c0       	rjmp	.+280    	; 0x22c2 <__stack+0xc3>
    21aa:	94 30       	cpi	r25, 0x04	; 4
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <__vector_25+0x64>
    21ae:	73 c0       	rjmp	.+230    	; 0x2296 <__stack+0x97>
    21b0:	95 30       	cpi	r25, 0x05	; 5
    21b2:	49 f7       	brne	.-46     	; 0x2186 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: 								// adc
				if(receivedByte == 's') {
    21b4:	83 37       	cpi	r24, 0x73	; 115
    21b6:	39 f7       	brne	.-50     	; 0x2186 <__vector_25+0x3a>
					sendAdcValues = 0;
    21b8:	10 92 04 04 	sts	0x0404, r1
					choosePeripheral = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	80 93 10 02 	sts	0x0210, r24

	}



}
    21c2:	9f 91       	pop	r25
    21c4:	8f 91       	pop	r24
    21c6:	2f 91       	pop	r18
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
    21d2:	84 33       	cpi	r24, 0x34	; 52
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <__vector_25+0x8c>
    21d6:	59 c0       	rjmp	.+178    	; 0x228a <__stack+0x8b>
    21d8:	84 33       	cpi	r24, 0x34	; 52
    21da:	08 f4       	brcc	.+2      	; 0x21de <__vector_25+0x92>
    21dc:	50 c0       	rjmp	.+160    	; 0x227e <__stack+0x7f>
    21de:	85 33       	cpi	r24, 0x35	; 53
    21e0:	91 f6       	brne	.-92     	; 0x2186 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':							// send adc values
				peripheralChoice = 5;
    21e2:	85 e0       	ldi	r24, 0x05	; 5
    21e4:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    21e8:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 04 04 	sts	0x0404, r24
				break;
    21f2:	c9 cf       	rjmp	.-110    	; 0x2186 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    21f4:	99 23       	and	r25, r25
    21f6:	91 f5       	brne	.+100    	; 0x225c <__stack+0x5d>
			case 0:								// red led
				if(receivedByte == '-') {
    21f8:	8d 32       	cpi	r24, 0x2D	; 45
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_25+0xb2>
    21fc:	d5 c0       	rjmp	.+426    	; 0x23a8 <__stack+0x1a9>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    21fe:	8b 32       	cpi	r24, 0x2B	; 43
    2200:	e9 f6       	brne	.-70     	; 0x21bc <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2202:	80 91 0c 02 	lds	r24, 0x020C
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    220a:	97 fd       	sbrc	r25, 7
    220c:	3f c1       	rjmp	.+638    	; 0x248c <__stack+0x28d>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    220e:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    2212:	88 23       	and	r24, r24
    2214:	09 f4       	brne	.+2      	; 0x2218 <__stack+0x19>
    2216:	3c c1       	rjmp	.+632    	; 0x2490 <__stack+0x291>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	90 93 89 00 	sts	0x0089, r25
    221e:	80 93 88 00 	sts	0x0088, r24
    2222:	b1 cf       	rjmp	.-158    	; 0x2186 <__vector_25+0x3a>
			case '1': 							// green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': 							// blue led
				peripheralChoice = 2;
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    222a:	10 92 10 02 	sts	0x0210, r1
				break;
    222e:	ab cf       	rjmp	.-170    	; 0x2186 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
    2230:	8d 32       	cpi	r24, 0x2D	; 45
    2232:	09 f4       	brne	.+2      	; 0x2236 <__stack+0x37>
    2234:	e8 c0       	rjmp	.+464    	; 0x2406 <__stack+0x207>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2236:	8b 32       	cpi	r24, 0x2B	; 43
    2238:	09 f6       	brne	.-126    	; 0x21bc <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    223a:	80 91 0e 02 	lds	r24, 0x020E
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2242:	97 fd       	sbrc	r25, 7
    2244:	35 c1       	rjmp	.+618    	; 0x24b0 <__stack+0x2b1>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2246:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    224a:	88 23       	and	r24, r24
    224c:	09 f4       	brne	.+2      	; 0x2250 <__stack+0x51>
    224e:	32 c1       	rjmp	.+612    	; 0x24b4 <__stack+0x2b5>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	90 93 8d 00 	sts	0x008D, r25
    2256:	80 93 8c 00 	sts	0x008C, r24
    225a:	95 cf       	rjmp	.-214    	; 0x2186 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    225c:	91 30       	cpi	r25, 0x01	; 1
    225e:	09 f0       	breq	.+2      	; 0x2262 <__stack+0x63>
    2260:	92 cf       	rjmp	.-220    	; 0x2186 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
    2262:	8d 32       	cpi	r24, 0x2D	; 45
    2264:	09 f4       	brne	.+2      	; 0x2268 <__stack+0x69>
    2266:	89 c0       	rjmp	.+274    	; 0x237a <__stack+0x17b>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2268:	8b 32       	cpi	r24, 0x2B	; 43
    226a:	09 f4       	brne	.+2      	; 0x226e <__stack+0x6f>
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <__stack+0xed>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    226e:	90 93 10 02 	sts	0x0210, r25
    2272:	89 cf       	rjmp	.-238    	; 0x2186 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
			case '0': 							// red led
				peripheralChoice = 0;
    2274:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    2278:	10 92 10 02 	sts	0x0210, r1
				break;
    227c:	84 cf       	rjmp	.-248    	; 0x2186 <__vector_25+0x3a>
			case '2': 							// blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': 							// right motor
				peripheralChoice = 3;
    227e:	83 e0       	ldi	r24, 0x03	; 3
    2280:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2284:	10 92 10 02 	sts	0x0210, r1
				break;
    2288:	7e cf       	rjmp	.-260    	; 0x2186 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
    228a:	84 e0       	ldi	r24, 0x04	; 4
    228c:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2290:	10 92 10 02 	sts	0x0210, r1
				break;
    2294:	78 cf       	rjmp	.-272    	; 0x2186 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
    2296:	8b 32       	cpi	r24, 0x2B	; 43
    2298:	09 f4       	brne	.+2      	; 0x229c <__stack+0x9d>
    229a:	cc c0       	rjmp	.+408    	; 0x2434 <__stack+0x235>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    229c:	8d 32       	cpi	r24, 0x2D	; 45
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	51 c0       	rjmp	.+162    	; 0x2344 <__stack+0x145>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    22a2:	83 37       	cpi	r24, 0x73	; 115
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <__stack+0xa9>
    22a6:	8a cf       	rjmp	.-236    	; 0x21bc <__vector_25+0x70>
					pwm_right = 0;
    22a8:	10 92 ec 03 	sts	0x03EC, r1
    22ac:	10 92 eb 03 	sts	0x03EB, r1
					OCR3A = 0;
    22b0:	10 92 99 00 	sts	0x0099, r1
    22b4:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    22b8:	10 92 9b 00 	sts	0x009B, r1
    22bc:	10 92 9a 00 	sts	0x009A, r1
    22c0:	62 cf       	rjmp	.-316    	; 0x2186 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
    22c2:	8b 32       	cpi	r24, 0x2B	; 43
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <__stack+0xc9>
    22c6:	87 c0       	rjmp	.+270    	; 0x23d6 <__stack+0x1d7>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    22c8:	8d 32       	cpi	r24, 0x2D	; 45
    22ca:	09 f1       	breq	.+66     	; 0x230e <__stack+0x10f>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    22cc:	83 37       	cpi	r24, 0x73	; 115
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <__stack+0xd3>
    22d0:	75 cf       	rjmp	.-278    	; 0x21bc <__vector_25+0x70>
					pwm_left = 0;
    22d2:	10 92 ee 03 	sts	0x03EE, r1
    22d6:	10 92 ed 03 	sts	0x03ED, r1
					OCR4A = 0;
    22da:	10 92 a9 00 	sts	0x00A9, r1
    22de:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    22e2:	10 92 ab 00 	sts	0x00AB, r1
    22e6:	10 92 aa 00 	sts	0x00AA, r1
    22ea:	4d cf       	rjmp	.-358    	; 0x2186 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    22ec:	80 91 0d 02 	lds	r24, 0x020D
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    22f4:	97 fd       	sbrc	r25, 7
    22f6:	d3 c0       	rjmp	.+422    	; 0x249e <__stack+0x29f>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    22f8:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    22fc:	88 23       	and	r24, r24
    22fe:	09 f4       	brne	.+2      	; 0x2302 <__stack+0x103>
    2300:	d0 c0       	rjmp	.+416    	; 0x24a2 <__stack+0x2a3>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	90 93 8b 00 	sts	0x008B, r25
    2308:	80 93 8a 00 	sts	0x008A, r24
    230c:	3c cf       	rjmp	.-392    	; 0x2186 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    230e:	80 91 ed 03 	lds	r24, 0x03ED
    2312:	90 91 ee 03 	lds	r25, 0x03EE
    2316:	4e 97       	sbiw	r24, 0x1e	; 30
    2318:	90 93 ee 03 	sts	0x03EE, r25
    231c:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2320:	2c ef       	ldi	r18, 0xFC	; 252
    2322:	80 30       	cpi	r24, 0x00	; 0
    2324:	92 07       	cpc	r25, r18
    2326:	0c f0       	brlt	.+2      	; 0x232a <__stack+0x12b>
    2328:	cc c0       	rjmp	.+408    	; 0x24c2 <__stack+0x2c3>
						pwm_left = -MAX_MOTORS_PWM;
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	9c ef       	ldi	r25, 0xFC	; 252
    232e:	90 93 ee 03 	sts	0x03EE, r25
    2332:	80 93 ed 03 	sts	0x03ED, r24
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    233a:	90 93 ab 00 	sts	0x00AB, r25
    233e:	80 93 aa 00 	sts	0x00AA, r24
    2342:	21 cf       	rjmp	.-446    	; 0x2186 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2344:	80 91 eb 03 	lds	r24, 0x03EB
    2348:	90 91 ec 03 	lds	r25, 0x03EC
    234c:	4e 97       	sbiw	r24, 0x1e	; 30
    234e:	90 93 ec 03 	sts	0x03EC, r25
    2352:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2356:	2c ef       	ldi	r18, 0xFC	; 252
    2358:	80 30       	cpi	r24, 0x00	; 0
    235a:	92 07       	cpc	r25, r18
    235c:	0c f0       	brlt	.+2      	; 0x2360 <__stack+0x161>
    235e:	b7 c0       	rjmp	.+366    	; 0x24ce <__stack+0x2cf>
						pwm_right = -MAX_MOTORS_PWM;
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	9c ef       	ldi	r25, 0xFC	; 252
    2364:	90 93 ec 03 	sts	0x03EC, r25
    2368:	80 93 eb 03 	sts	0x03EB, r24
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2370:	90 93 9b 00 	sts	0x009B, r25
    2374:	80 93 9a 00 	sts	0x009A, r24
    2378:	06 cf       	rjmp	.-500    	; 0x2186 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    237a:	80 91 80 00 	lds	r24, 0x0080
    237e:	80 62       	ori	r24, 0x20	; 32
    2380:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2384:	80 91 0d 02 	lds	r24, 0x020D
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    238c:	8f 3f       	cpi	r24, 0xFF	; 255
    238e:	91 05       	cpc	r25, r1
    2390:	19 f0       	breq	.+6      	; 0x2398 <__stack+0x199>
    2392:	14 f0       	brlt	.+4      	; 0x2398 <__stack+0x199>
    2394:	8f ef       	ldi	r24, 0xFF	; 255
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	90 93 8b 00 	sts	0x008B, r25
    23a2:	80 93 8a 00 	sts	0x008A, r24
    23a6:	ef ce       	rjmp	.-546    	; 0x2186 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:								// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    23a8:	80 91 80 00 	lds	r24, 0x0080
    23ac:	80 68       	ori	r24, 0x80	; 128
    23ae:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    23b2:	80 91 0c 02 	lds	r24, 0x020C
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    23ba:	8f 3f       	cpi	r24, 0xFF	; 255
    23bc:	91 05       	cpc	r25, r1
    23be:	19 f0       	breq	.+6      	; 0x23c6 <__stack+0x1c7>
    23c0:	14 f0       	brlt	.+4      	; 0x23c6 <__stack+0x1c7>
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	90 93 89 00 	sts	0x0089, r25
    23d0:	80 93 88 00 	sts	0x0088, r24
    23d4:	d8 ce       	rjmp	.-592    	; 0x2186 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    23d6:	80 91 ed 03 	lds	r24, 0x03ED
    23da:	90 91 ee 03 	lds	r25, 0x03EE
    23de:	4e 96       	adiw	r24, 0x1e	; 30
    23e0:	90 93 ee 03 	sts	0x03EE, r25
    23e4:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    23e8:	24 e0       	ldi	r18, 0x04	; 4
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	92 07       	cpc	r25, r18
    23ee:	d4 f1       	brlt	.+116    	; 0x2464 <__stack+0x265>
						pwm_left = MAX_MOTORS_PWM;
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	94 e0       	ldi	r25, 0x04	; 4
    23f4:	90 93 ee 03 	sts	0x03EE, r25
    23f8:	80 93 ed 03 	sts	0x03ED, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    23fc:	90 93 a9 00 	sts	0x00A9, r25
    2400:	80 93 a8 00 	sts	0x00A8, r24
    2404:	c0 ce       	rjmp	.-640    	; 0x2186 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2406:	80 91 80 00 	lds	r24, 0x0080
    240a:	88 60       	ori	r24, 0x08	; 8
    240c:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2410:	80 91 0e 02 	lds	r24, 0x020E
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2418:	8f 3f       	cpi	r24, 0xFF	; 255
    241a:	91 05       	cpc	r25, r1
    241c:	19 f0       	breq	.+6      	; 0x2424 <__stack+0x225>
    241e:	14 f0       	brlt	.+4      	; 0x2424 <__stack+0x225>
    2420:	8f ef       	ldi	r24, 0xFF	; 255
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	90 93 8d 00 	sts	0x008D, r25
    242e:	80 93 8c 00 	sts	0x008C, r24
    2432:	a9 ce       	rjmp	.-686    	; 0x2186 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2434:	80 91 eb 03 	lds	r24, 0x03EB
    2438:	90 91 ec 03 	lds	r25, 0x03EC
    243c:	4e 96       	adiw	r24, 0x1e	; 30
    243e:	90 93 ec 03 	sts	0x03EC, r25
    2442:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    2446:	24 e0       	ldi	r18, 0x04	; 4
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	92 07       	cpc	r25, r18
    244c:	ac f0       	brlt	.+42     	; 0x2478 <__stack+0x279>
						pwm_right = MAX_MOTORS_PWM;
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	94 e0       	ldi	r25, 0x04	; 4
    2452:	90 93 ec 03 	sts	0x03EC, r25
    2456:	80 93 eb 03 	sts	0x03EB, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    245a:	90 93 99 00 	sts	0x0099, r25
    245e:	80 93 98 00 	sts	0x0098, r24
    2462:	91 ce       	rjmp	.-734    	; 0x2186 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2464:	97 ff       	sbrs	r25, 7
    2466:	ca cf       	rjmp	.-108    	; 0x23fc <__stack+0x1fd>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2468:	90 95       	com	r25
    246a:	81 95       	neg	r24
    246c:	9f 4f       	sbci	r25, 0xFF	; 255
    246e:	90 93 ab 00 	sts	0x00AB, r25
    2472:	80 93 aa 00 	sts	0x00AA, r24
    2476:	87 ce       	rjmp	.-754    	; 0x2186 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2478:	97 ff       	sbrs	r25, 7
    247a:	ef cf       	rjmp	.-34     	; 0x245a <__stack+0x25b>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    247c:	90 95       	com	r25
    247e:	81 95       	neg	r24
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	90 93 9b 00 	sts	0x009B, r25
    2486:	80 93 9a 00 	sts	0x009A, r24
    248a:	7d ce       	rjmp	.-774    	; 0x2186 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    248c:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2490:	80 91 80 00 	lds	r24, 0x0080
    2494:	8f 77       	andi	r24, 0x7F	; 127
    2496:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    249a:	2d 98       	cbi	0x05, 5	; 5
    249c:	74 ce       	rjmp	.-792    	; 0x2186 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    249e:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    24a2:	80 91 80 00 	lds	r24, 0x0080
    24a6:	8f 7d       	andi	r24, 0xDF	; 223
    24a8:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    24ac:	2e 98       	cbi	0x05, 6	; 5
    24ae:	6b ce       	rjmp	.-810    	; 0x2186 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    24b0:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    24b4:	80 91 80 00 	lds	r24, 0x0080
    24b8:	87 7f       	andi	r24, 0xF7	; 247
    24ba:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    24be:	2f 98       	cbi	0x05, 7	; 5
    24c0:	62 ce       	rjmp	.-828    	; 0x2186 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    24c2:	97 ff       	sbrs	r25, 7
    24c4:	9b cf       	rjmp	.-202    	; 0x23fc <__stack+0x1fd>
						OCR4A = pwm_left;
    24c6:	90 95       	com	r25
    24c8:	81 95       	neg	r24
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	36 cf       	rjmp	.-404    	; 0x233a <__stack+0x13b>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    24ce:	97 ff       	sbrs	r25, 7
    24d0:	c4 cf       	rjmp	.-120    	; 0x245a <__stack+0x25b>
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    24d2:	90 95       	com	r25
    24d4:	81 95       	neg	r24
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	4b cf       	rjmp	.-362    	; 0x2370 <__stack+0x171>

000024da <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    24da:	86 b1       	in	r24, 0x06	; 6
    24dc:	66 b1       	in	r22, 0x06	; 6
    24de:	26 b1       	in	r18, 0x06	; 6
    24e0:	46 b1       	in	r20, 0x06	; 6
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	28 70       	andi	r18, 0x08	; 8
    24e6:	30 70       	andi	r19, 0x00	; 0
    24e8:	35 95       	asr	r19
    24ea:	27 95       	ror	r18
    24ec:	35 95       	asr	r19
    24ee:	27 95       	ror	r18
    24f0:	35 95       	asr	r19
    24f2:	27 95       	ror	r18
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	64 70       	andi	r22, 0x04	; 4
    24fc:	70 70       	andi	r23, 0x00	; 0
    24fe:	75 95       	asr	r23
    2500:	67 95       	ror	r22
    2502:	75 95       	asr	r23
    2504:	67 95       	ror	r22
    2506:	26 0f       	add	r18, r22
    2508:	37 1f       	adc	r19, r23
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	42 70       	andi	r20, 0x02	; 2
    2512:	50 70       	andi	r21, 0x00	; 0
    2514:	55 95       	asr	r21
    2516:	47 95       	ror	r20
    2518:	24 0f       	add	r18, r20
    251a:	35 1f       	adc	r19, r21
    251c:	22 0f       	add	r18, r18
    251e:	81 70       	andi	r24, 0x01	; 1
}
    2520:	82 0f       	add	r24, r18
    2522:	08 95       	ret

00002524 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2524:	f8 94       	cli

	initPortsIO();
    2526:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <initPortsIO>
	initAdc();
    252a:	0e 94 2f 13 	call	0x265e	; 0x265e <initAdc>
	initMotors();
    252e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <initMotors>
	initRGBleds();
    2532:	0e 94 8d 19 	call	0x331a	; 0x331a <initRGBleds>
	initSPI();
    2536:	0e 94 08 03 	call	0x610	; 0x610 <initSPI>
	mirf_init();
    253a:	0e 94 be 03 	call	0x77c	; 0x77c <mirf_init>
	initUsart();
    253e:	0e 94 83 10 	call	0x2106	; 0x2106 <initUsart>
	initAccelerometer();
    2542:	0e 94 04 1a 	call	0x3408	; 0x3408 <initAccelerometer>
	init_ir_remote_control();
    2546:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <init_ir_remote_control>

	sei();			// enable global interrupts
    254a:	78 94       	sei

	
}
    254c:	08 95       	ret

0000254e <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1

}
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <sleep>:

void sleep(unsigned char seconds) {
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2566:	9e e1       	ldi	r25, 0x1E	; 30
    2568:	89 9f       	mul	r24, r25
    256a:	e0 01       	movw	r28, r0
    256c:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    256e:	80 91 68 00 	lds	r24, 0x0068
    2572:	8d 7f       	andi	r24, 0xFD	; 253
    2574:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2578:	80 91 6c 00 	lds	r24, 0x006C
    257c:	8f 77       	andi	r24, 0x7F	; 127
    257e:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2582:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2584:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2588:	80 91 7a 00 	lds	r24, 0x007A
    258c:	80 61       	ori	r24, 0x10	; 16
    258e:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2592:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2596:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    259a:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    259e:	88 b3       	in	r24, 0x18	; 24
    25a0:	87 60       	ori	r24, 0x07	; 7
    25a2:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    25a4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    25a8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    25ac:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    25b0:	89 b3       	in	r24, 0x19	; 25
    25b2:	87 60       	ori	r24, 0x07	; 7
    25b4:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    25b6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    25ba:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    25be:	0e 94 98 10 	call	0x2130	; 0x2130 <closeUsart>
	closeSPI();
    25c2:	0e 94 14 03 	call	0x628	; 0x628 <closeSPI>
	i2c_close();
    25c6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <i2c_close>

	// set port pins
	initPortsIO();
    25ca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    25ce:	83 b7       	in	r24, 0x33	; 51
    25d0:	8f 60       	ori	r24, 0x0F	; 15
    25d2:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    25da:	80 91 b0 00 	lds	r24, 0x00B0
    25de:	8d 7f       	andi	r24, 0xFD	; 253
    25e0:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    25e4:	80 91 b1 00 	lds	r24, 0x00B1
    25e8:	87 60       	ori	r24, 0x07	; 7
    25ea:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    25ee:	20 97       	sbiw	r28, 0x00	; 0
    25f0:	19 f0       	breq	.+6      	; 0x25f8 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    25f2:	88 95       	sleep
		pause--;
    25f4:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    25f6:	e9 f7       	brne	.-6      	; 0x25f2 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    25f8:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    25fa:	80 91 b1 00 	lds	r24, 0x00B1
    25fe:	88 7f       	andi	r24, 0xF8	; 248
    2600:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    2604:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2608:	80 91 b0 00 	lds	r24, 0x00B0
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2612:	8f ef       	ldi	r24, 0xFF	; 255
    2614:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2618:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    261c:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2620:	10 92 ec 03 	sts	0x03EC, r1
    2624:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    2628:	10 92 ee 03 	sts	0x03EE, r1
    262c:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2630:	f8 94       	cli

	initPortsIO();
    2632:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <initPortsIO>
	initAdc();
    2636:	0e 94 2f 13 	call	0x265e	; 0x265e <initAdc>
	initMotors();
    263a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <initMotors>
	initRGBleds();
    263e:	0e 94 8d 19 	call	0x331a	; 0x331a <initRGBleds>
	initSPI();
    2642:	0e 94 08 03 	call	0x610	; 0x610 <initSPI>
	mirf_init();
    2646:	0e 94 be 03 	call	0x77c	; 0x77c <mirf_init>
	initUsart();
    264a:	0e 94 83 10 	call	0x2106	; 0x2106 <initUsart>
	initAccelerometer();
    264e:	0e 94 04 1a 	call	0x3408	; 0x3408 <initAccelerometer>
	init_ir_remote_control();
    2652:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <init_ir_remote_control>

	sei();			// enable global interrupts
    2656:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	08 95       	ret

0000265e <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    265e:	ea e7       	ldi	r30, 0x7A	; 122
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	86 60       	ori	r24, 0x06	; 6
    2666:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    2668:	ac e7       	ldi	r26, 0x7C	; 124
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	8c 91       	ld	r24, X
    266e:	80 64       	ori	r24, 0x40	; 64
    2670:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2672:	80 81       	ld	r24, Z
    2674:	80 62       	ori	r24, 0x20	; 32
    2676:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2678:	ab e7       	ldi	r26, 0x7B	; 123
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	8c 91       	ld	r24, X
    267e:	88 7f       	andi	r24, 0xF8	; 248
    2680:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2682:	80 81       	ld	r24, Z
    2684:	88 60       	ori	r24, 0x08	; 8
    2686:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2688:	80 81       	ld	r24, Z
    268a:	80 68       	ori	r24, 0x80	; 128
    268c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    268e:	80 81       	ld	r24, Z
    2690:	80 64       	ori	r24, 0x40	; 64
    2692:	80 83       	st	Z, r24

}
    2694:	08 95       	ret

00002696 <__vector_29>:

ISR(ADC_vect) {
    2696:	1f 92       	push	r1
    2698:	0f 92       	push	r0
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	0f 92       	push	r0
    269e:	0b b6       	in	r0, 0x3b	; 59
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	2f 93       	push	r18
    26a6:	3f 93       	push	r19
    26a8:	4f 93       	push	r20
    26aa:	5f 93       	push	r21
    26ac:	6f 93       	push	r22
    26ae:	8f 93       	push	r24
    26b0:	9f 93       	push	r25
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    26b6:	80 91 1f 04 	lds	r24, 0x041F
    26ba:	90 91 20 04 	lds	r25, 0x0420
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	90 93 20 04 	sts	0x0420, r25
    26c4:	80 93 1f 04 	sts	0x041F, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    26c8:	20 91 78 00 	lds	r18, 0x0078
    26cc:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    26ce:	40 91 79 00 	lds	r20, 0x0079
    26d2:	94 2f       	mov	r25, r20
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	28 2b       	or	r18, r24
    26d8:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    26da:	80 91 bf 03 	lds	r24, 0x03BF
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <__vector_29+0x4e>
    26e2:	8e c1       	rjmp	.+796    	; 0x2a00 <__vector_29+0x36a>
    26e4:	83 30       	cpi	r24, 0x03	; 3
    26e6:	08 f4       	brcc	.+2      	; 0x26ea <__vector_29+0x54>
    26e8:	46 c0       	rjmp	.+140    	; 0x2776 <__vector_29+0xe0>
    26ea:	83 30       	cpi	r24, 0x03	; 3
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <__vector_29+0x5a>
    26ee:	ab c1       	rjmp	.+854    	; 0x2a46 <__vector_29+0x3b0>
    26f0:	84 30       	cpi	r24, 0x04	; 4
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__vector_29+0x60>
    26f4:	4a c1       	rjmp	.+660    	; 0x298a <__vector_29+0x2f4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    26f6:	80 91 c0 03 	lds	r24, 0x03C0
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	09 f4       	brne	.+2      	; 0x2700 <__vector_29+0x6a>
    26fe:	31 c1       	rjmp	.+610    	; 0x2962 <__vector_29+0x2cc>
    2700:	83 30       	cpi	r24, 0x03	; 3
    2702:	08 f0       	brcs	.+2      	; 0x2706 <__vector_29+0x70>
    2704:	ce c0       	rjmp	.+412    	; 0x28a2 <__vector_29+0x20c>
    2706:	88 23       	and	r24, r24
    2708:	09 f0       	breq	.+2      	; 0x270c <__vector_29+0x76>
    270a:	06 c1       	rjmp	.+524    	; 0x2918 <__vector_29+0x282>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    270c:	80 91 2a 03 	lds	r24, 0x032A
    2710:	86 95       	lsr	r24
    2712:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2716:	80 91 c1 03 	lds	r24, 0x03C1
    271a:	88 23       	and	r24, r24
    271c:	09 f0       	breq	.+2      	; 0x2720 <__vector_29+0x8a>
    271e:	bf c1       	rjmp	.+894    	; 0x2a9e <__vector_29+0x408>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    272c:	90 91 29 03 	lds	r25, 0x0329
    2730:	98 30       	cpi	r25, 0x08	; 8
    2732:	08 f0       	brcs	.+2      	; 0x2736 <__vector_29+0xa0>
    2734:	e6 c0       	rjmp	.+460    	; 0x2902 <__vector_29+0x26c>
		ADCSRB &= ~(1 << MUX5);
    2736:	90 91 7b 00 	lds	r25, 0x007B
    273a:	97 7f       	andi	r25, 0xF7	; 247
    273c:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2740:	90 91 29 03 	lds	r25, 0x0329
    2744:	90 5c       	subi	r25, 0xC0	; 192
    2746:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    274a:	82 30       	cpi	r24, 0x02	; 2
    274c:	21 f4       	brne	.+8      	; 0x2756 <__vector_29+0xc0>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0)"
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    2754:	12 b8       	out	0x02, r1	; 2

	}

	//LED_BLUE_OFF;

}
    2756:	ff 91       	pop	r31
    2758:	ef 91       	pop	r30
    275a:	9f 91       	pop	r25
    275c:	8f 91       	pop	r24
    275e:	6f 91       	pop	r22
    2760:	5f 91       	pop	r21
    2762:	4f 91       	pop	r20
    2764:	3f 91       	pop	r19
    2766:	2f 91       	pop	r18
    2768:	0f 90       	pop	r0
    276a:	0b be       	out	0x3b, r0	; 59
    276c:	0f 90       	pop	r0
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	0f 90       	pop	r0
    2772:	1f 90       	pop	r1
    2774:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2776:	88 23       	and	r24, r24
    2778:	09 f0       	breq	.+2      	; 0x277c <__vector_29+0xe6>
    277a:	df c0       	rjmp	.+446    	; 0x293a <__vector_29+0x2a4>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    277c:	60 91 2a 03 	lds	r22, 0x032A
    2780:	6e 30       	cpi	r22, 0x0E	; 14
    2782:	09 f4       	brne	.+2      	; 0x2786 <__vector_29+0xf0>
    2784:	a1 c1       	rjmp	.+834    	; 0x2ac8 <__vector_29+0x432>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2786:	46 2f       	mov	r20, r22
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	fa 01       	movw	r30, r20
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	e1 5d       	subi	r30, 0xD1	; 209
    2792:	fc 4f       	sbci	r31, 0xFC	; 252
    2794:	31 83       	std	Z+1, r19	; 0x01
    2796:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2798:	40 ff       	sbrs	r20, 0
    279a:	77 c0       	rjmp	.+238    	; 0x288a <__vector_29+0x1f4>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    279c:	fa 01       	movw	r30, r20
    279e:	ee 0f       	add	r30, r30
    27a0:	ff 1f       	adc	r31, r31
    27a2:	e3 5d       	subi	r30, 0xD3	; 211
    27a4:	fc 4f       	sbci	r31, 0xFC	; 252
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	fa 01       	movw	r30, r20
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	e1 5d       	subi	r30, 0xD1	; 209
    27b2:	fc 4f       	sbci	r31, 0xFC	; 252
    27b4:	40 81       	ld	r20, Z
    27b6:	51 81       	ldd	r21, Z+1	; 0x01
    27b8:	26 2f       	mov	r18, r22
    27ba:	26 95       	lsr	r18
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	84 1b       	sub	r24, r20
    27c0:	95 0b       	sbc	r25, r21
    27c2:	22 0f       	add	r18, r18
    27c4:	33 1f       	adc	r19, r19
    27c6:	f9 01       	movw	r30, r18
    27c8:	e9 58       	subi	r30, 0x89	; 137
    27ca:	fc 4f       	sbci	r31, 0xFC	; 252
    27cc:	40 81       	ld	r20, Z
    27ce:	51 81       	ldd	r21, Z+1	; 0x01
    27d0:	84 1b       	sub	r24, r20
    27d2:	95 0b       	sbc	r25, r21
    27d4:	f9 01       	movw	r30, r18
    27d6:	e1 5a       	subi	r30, 0xA1	; 161
    27d8:	fc 4f       	sbci	r31, 0xFC	; 252
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    27de:	97 fd       	sbrc	r25, 7
    27e0:	8e c1       	rjmp	.+796    	; 0x2afe <__vector_29+0x468>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    27e2:	44 e0       	ldi	r20, 0x04	; 4
    27e4:	81 30       	cpi	r24, 0x01	; 1
    27e6:	94 07       	cpc	r25, r20
    27e8:	24 f0       	brlt	.+8      	; 0x27f2 <__vector_29+0x15c>
					proximityResult[currentProx>>1] = 1024;
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	94 e0       	ldi	r25, 0x04	; 4
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    27f2:	60 31       	cpi	r22, 0x10	; 16
    27f4:	48 f4       	brcc	.+18     	; 0x2808 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    27f6:	8c 33       	cpi	r24, 0x3C	; 60
    27f8:	91 05       	cpc	r25, r1
    27fa:	0c f0       	brlt	.+2      	; 0x27fe <__vector_29+0x168>
    27fc:	85 c1       	rjmp	.+778    	; 0x2b08 <__vector_29+0x472>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    27fe:	29 53       	subi	r18, 0x39	; 57
    2800:	3c 4f       	sbci	r19, 0xFC	; 252
    2802:	f9 01       	movw	r30, r18
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2808:	80 91 25 04 	lds	r24, 0x0425
    280c:	88 23       	and	r24, r24
    280e:	09 f4       	brne	.+2      	; 0x2812 <__vector_29+0x17c>
    2810:	52 c1       	rjmp	.+676    	; 0x2ab6 <__vector_29+0x420>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2812:	80 91 6f 03 	lds	r24, 0x036F
    2816:	90 91 70 03 	lds	r25, 0x0370
    281a:	f1 e0       	ldi	r31, 0x01	; 1
    281c:	84 3a       	cpi	r24, 0xA4	; 164
    281e:	9f 07       	cpc	r25, r31
    2820:	cc f0       	brlt	.+50     	; 0x2854 <__vector_29+0x1be>
    2822:	80 91 71 03 	lds	r24, 0x0371
    2826:	90 91 72 03 	lds	r25, 0x0372
    282a:	21 e0       	ldi	r18, 0x01	; 1
    282c:	84 3a       	cpi	r24, 0xA4	; 164
    282e:	92 07       	cpc	r25, r18
    2830:	8c f0       	brlt	.+34     	; 0x2854 <__vector_29+0x1be>
    2832:	80 91 73 03 	lds	r24, 0x0373
    2836:	90 91 74 03 	lds	r25, 0x0374
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	84 3a       	cpi	r24, 0xA4	; 164
    283e:	94 07       	cpc	r25, r20
    2840:	4c f0       	brlt	.+18     	; 0x2854 <__vector_29+0x1be>
    2842:	80 91 75 03 	lds	r24, 0x0375
    2846:	90 91 76 03 	lds	r25, 0x0376
    284a:	e1 e0       	ldi	r30, 0x01	; 1
    284c:	84 3a       	cpi	r24, 0xA4	; 164
    284e:	9e 07       	cpc	r25, r30
    2850:	0c f0       	brlt	.+2      	; 0x2854 <__vector_29+0x1be>
    2852:	31 c1       	rjmp	.+610    	; 0x2ab6 <__vector_29+0x420>
						cliffDetectedFlag = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	80 93 26 04 	sts	0x0426, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    285a:	10 92 ee 03 	sts	0x03EE, r1
    285e:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    2862:	10 92 a9 00 	sts	0x00A9, r1
    2866:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    286a:	10 92 ab 00 	sts	0x00AB, r1
    286e:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    2872:	10 92 ec 03 	sts	0x03EC, r1
    2876:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    287a:	10 92 99 00 	sts	0x0099, r1
    287e:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2882:	10 92 9b 00 	sts	0x009B, r1
    2886:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    288a:	6f 5f       	subi	r22, 0xFF	; 255
    288c:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2890:	68 31       	cpi	r22, 0x18	; 24
    2892:	08 f4       	brcc	.+2      	; 0x2896 <__vector_29+0x200>
    2894:	30 cf       	rjmp	.-416    	; 0x26f6 <__vector_29+0x60>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2896:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	80 93 c6 03 	sts	0x03C6, r24
    28a0:	2a cf       	rjmp	.-428    	; 0x26f6 <__vector_29+0x60>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    28a2:	83 30       	cpi	r24, 0x03	; 3
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <__vector_29+0x212>
    28a6:	98 c0       	rjmp	.+304    	; 0x29d8 <__vector_29+0x342>
    28a8:	84 30       	cpi	r24, 0x04	; 4
    28aa:	09 f0       	breq	.+2      	; 0x28ae <__vector_29+0x218>
    28ac:	3f cf       	rjmp	.-386    	; 0x272c <__vector_29+0x96>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    28ae:	90 91 2c 03 	lds	r25, 0x032C
    28b2:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    28b6:	90 91 2d 03 	lds	r25, 0x032D
    28ba:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    28be:	90 91 c2 03 	lds	r25, 0x03C2
    28c2:	99 23       	and	r25, r25
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <__vector_29+0x232>
    28c6:	e5 c0       	rjmp	.+458    	; 0x2a92 <__vector_29+0x3fc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    28c8:	83 e0       	ldi	r24, 0x03	; 3
    28ca:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    28ce:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    28d2:	20 91 2a 03 	lds	r18, 0x032A
    28d6:	2e 30       	cpi	r18, 0x0E	; 14
    28d8:	09 f4       	brne	.+2      	; 0x28dc <__vector_29+0x246>
    28da:	f0 c0       	rjmp	.+480    	; 0x2abc <__vector_29+0x426>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    28dc:	82 2f       	mov	r24, r18
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	20 ff       	sbrs	r18, 0
    28e2:	ce c0       	rjmp	.+412    	; 0x2a80 <__vector_29+0x3ea>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    28e4:	20 31       	cpi	r18, 0x10	; 16
    28e6:	08 f0       	brcs	.+2      	; 0x28ea <__vector_29+0x254>
    28e8:	bb c0       	rjmp	.+374    	; 0x2a60 <__vector_29+0x3ca>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    28ea:	26 95       	lsr	r18
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <__vector_29+0x260>
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	2a 95       	dec	r18
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <__vector_29+0x25c>
    28fa:	82 b9       	out	0x02, r24	; 2
    28fc:	80 91 c0 03 	lds	r24, 0x03C0
    2900:	15 cf       	rjmp	.-470    	; 0x272c <__vector_29+0x96>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2902:	90 91 7b 00 	lds	r25, 0x007B
    2906:	98 60       	ori	r25, 0x08	; 8
    2908:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    290c:	90 91 29 03 	lds	r25, 0x0329
    2910:	98 5c       	subi	r25, 0xC8	; 200
    2912:	90 93 7c 00 	sts	0x007C, r25
    2916:	19 cf       	rjmp	.-462    	; 0x274a <__vector_29+0xb4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	09 f0       	breq	.+2      	; 0x291e <__vector_29+0x288>
    291c:	07 cf       	rjmp	.-498    	; 0x272c <__vector_29+0x96>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    291e:	80 91 2b 03 	lds	r24, 0x032B
    2922:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2926:	80 91 2e 03 	lds	r24, 0x032E
    292a:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    292e:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2938:	f9 ce       	rjmp	.-526    	; 0x272c <__vector_29+0x96>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	09 f0       	breq	.+2      	; 0x2940 <__vector_29+0x2aa>
    293e:	db ce       	rjmp	.-586    	; 0x26f6 <__vector_29+0x60>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2940:	80 91 d9 03 	lds	r24, 0x03D9
    2944:	90 91 da 03 	lds	r25, 0x03DA
    2948:	82 0f       	add	r24, r18
    294a:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    294c:	96 95       	lsr	r25
    294e:	87 95       	ror	r24
    2950:	90 93 da 03 	sts	0x03DA, r25
    2954:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2958:	80 91 c0 03 	lds	r24, 0x03C0
    295c:	82 30       	cpi	r24, 0x02	; 2
    295e:	09 f0       	breq	.+2      	; 0x2962 <__vector_29+0x2cc>
    2960:	cf ce       	rjmp	.-610    	; 0x2700 <__vector_29+0x6a>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2962:	80 91 2c 03 	lds	r24, 0x032C
    2966:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    296a:	80 91 2d 03 	lds	r24, 0x032D
    296e:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2972:	80 91 c2 03 	lds	r24, 0x03C2
    2976:	88 23       	and	r24, r24
    2978:	09 f0       	breq	.+2      	; 0x297c <__vector_29+0x2e6>
    297a:	97 c0       	rjmp	.+302    	; 0x2aaa <__vector_29+0x414>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2988:	d1 ce       	rjmp	.-606    	; 0x272c <__vector_29+0x96>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    298a:	80 91 0a 02 	lds	r24, 0x020A
    298e:	88 23       	and	r24, r24
    2990:	09 f4       	brne	.+2      	; 0x2994 <__vector_29+0x2fe>
    2992:	b1 ce       	rjmp	.-670    	; 0x26f6 <__vector_29+0x60>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2994:	90 91 00 01 	lds	r25, 0x0100
    2998:	93 fd       	sbrc	r25, 3
    299a:	ad ce       	rjmp	.-678    	; 0x26f6 <__vector_29+0x60>
    299c:	90 91 00 01 	lds	r25, 0x0100
    29a0:	94 fd       	sbrc	r25, 4
    29a2:	a9 ce       	rjmp	.-686    	; 0x26f6 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    29a4:	48 2f       	mov	r20, r24
    29a6:	4f 5f       	subi	r20, 0xFF	; 255
    29a8:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    29ac:	45 30       	cpi	r20, 0x05	; 5
    29ae:	08 f4       	brcc	.+2      	; 0x29b2 <__vector_29+0x31c>
    29b0:	a2 ce       	rjmp	.-700    	; 0x26f6 <__vector_29+0x60>
					left_vel_sum += value;
    29b2:	80 91 e3 03 	lds	r24, 0x03E3
    29b6:	90 91 e4 03 	lds	r25, 0x03E4
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	90 93 e4 03 	sts	0x03E4, r25
    29c2:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    29c6:	48 30       	cpi	r20, 0x08	; 8
    29c8:	09 f0       	breq	.+2      	; 0x29cc <__vector_29+0x336>
    29ca:	95 ce       	rjmp	.-726    	; 0x26f6 <__vector_29+0x60>
						firstSampleLeft = 0;
    29cc:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	80 93 07 02 	sts	0x0207, r24
    29d6:	8f ce       	rjmp	.-738    	; 0x26f6 <__vector_29+0x60>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    29d8:	80 91 2b 03 	lds	r24, 0x032B
    29dc:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    29e0:	80 91 2e 03 	lds	r24, 0x032E
    29e4:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    29e8:	80 91 c1 03 	lds	r24, 0x03C1
    29ec:	88 23       	and	r24, r24
    29ee:	09 f0       	breq	.+2      	; 0x29f2 <__vector_29+0x35c>
    29f0:	4a c0       	rjmp	.+148    	; 0x2a86 <__vector_29+0x3f0>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    29f8:	84 e0       	ldi	r24, 0x04	; 4
    29fa:	80 93 c0 03 	sts	0x03C0, r24
			break;
    29fe:	96 ce       	rjmp	.-724    	; 0x272c <__vector_29+0x96>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    2a00:	80 91 09 02 	lds	r24, 0x0209
    2a04:	88 23       	and	r24, r24
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <__vector_29+0x374>
    2a08:	76 ce       	rjmp	.-788    	; 0x26f6 <__vector_29+0x60>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2a0a:	63 99       	sbic	0x0c, 3	; 12
    2a0c:	74 ce       	rjmp	.-792    	; 0x26f6 <__vector_29+0x60>
    2a0e:	64 99       	sbic	0x0c, 4	; 12
    2a10:	72 ce       	rjmp	.-796    	; 0x26f6 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2a12:	48 2f       	mov	r20, r24
    2a14:	4f 5f       	subi	r20, 0xFF	; 255
    2a16:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2a1a:	45 30       	cpi	r20, 0x05	; 5
    2a1c:	08 f4       	brcc	.+2      	; 0x2a20 <__vector_29+0x38a>
    2a1e:	6b ce       	rjmp	.-810    	; 0x26f6 <__vector_29+0x60>
					right_vel_sum += value;
    2a20:	80 91 e5 03 	lds	r24, 0x03E5
    2a24:	90 91 e6 03 	lds	r25, 0x03E6
    2a28:	82 0f       	add	r24, r18
    2a2a:	93 1f       	adc	r25, r19
    2a2c:	90 93 e6 03 	sts	0x03E6, r25
    2a30:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2a34:	48 30       	cpi	r20, 0x08	; 8
    2a36:	09 f0       	breq	.+2      	; 0x2a3a <__vector_29+0x3a4>
    2a38:	5e ce       	rjmp	.-836    	; 0x26f6 <__vector_29+0x60>
						firstSampleRight = 0;
    2a3a:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 08 02 	sts	0x0208, r24
    2a44:	58 ce       	rjmp	.-848    	; 0x26f6 <__vector_29+0x60>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2a46:	80 91 d7 03 	lds	r24, 0x03D7
    2a4a:	90 91 d8 03 	lds	r25, 0x03D8
    2a4e:	82 0f       	add	r24, r18
    2a50:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2a52:	96 95       	lsr	r25
    2a54:	87 95       	ror	r24
    2a56:	90 93 d8 03 	sts	0x03D8, r25
    2a5a:	80 93 d7 03 	sts	0x03D7, r24
			break;
    2a5e:	4b ce       	rjmp	.-874    	; 0x26f6 <__vector_29+0x60>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif

					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2a60:	40 91 05 01 	lds	r20, 0x0105
    2a64:	40 97       	sbiw	r24, 0x10	; 16
    2a66:	95 95       	asr	r25
    2a68:	87 95       	ror	r24
    2a6a:	21 e0       	ldi	r18, 0x01	; 1
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <__vector_29+0x3de>
    2a70:	22 0f       	add	r18, r18
    2a72:	33 1f       	adc	r19, r19
    2a74:	8a 95       	dec	r24
    2a76:	e2 f7       	brpl	.-8      	; 0x2a70 <__vector_29+0x3da>
    2a78:	20 95       	com	r18
    2a7a:	24 23       	and	r18, r20
    2a7c:	20 93 05 01 	sts	0x0105, r18
    2a80:	80 91 c0 03 	lds	r24, 0x03C0
    2a84:	53 ce       	rjmp	.-858    	; 0x272c <__vector_29+0x96>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	71 f1       	breq	.+92     	; 0x2ae6 <__vector_29+0x450>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2a8a:	85 e0       	ldi	r24, 0x05	; 5
    2a8c:	80 93 bf 03 	sts	0x03BF, r24
    2a90:	b3 cf       	rjmp	.-154    	; 0x29f8 <__vector_29+0x362>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a92:	91 30       	cpi	r25, 0x01	; 1
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <__vector_29+0x402>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	80 93 bf 03 	sts	0x03BF, r24
    2a9c:	18 cf       	rjmp	.-464    	; 0x28ce <__vector_29+0x238>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	51 f1       	breq	.+84     	; 0x2af6 <__vector_29+0x460>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2aa2:	85 e0       	ldi	r24, 0x05	; 5
    2aa4:	80 93 bf 03 	sts	0x03BF, r24
    2aa8:	3e ce       	rjmp	.-900    	; 0x2726 <__vector_29+0x90>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	01 f1       	breq	.+64     	; 0x2aee <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2aae:	85 e0       	ldi	r24, 0x05	; 5
    2ab0:	80 93 bf 03 	sts	0x03BF, r24
    2ab4:	66 cf       	rjmp	.-308    	; 0x2982 <__vector_29+0x2ec>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2ab6:	10 92 26 04 	sts	0x0426, r1
    2aba:	e7 ce       	rjmp	.-562    	; 0x288a <__vector_29+0x1f4>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    2abc:	80 91 c5 03 	lds	r24, 0x03C5
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	a1 f1       	breq	.+104    	; 0x2b2c <__vector_29+0x496>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	32 ce       	rjmp	.-924    	; 0x272c <__vector_29+0x96>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2ac8:	80 91 c5 03 	lds	r24, 0x03C5
    2acc:	82 30       	cpi	r24, 0x02	; 2
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <__vector_29+0x43c>
    2ad0:	5a ce       	rjmp	.-844    	; 0x2786 <__vector_29+0xf0>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2ad2:	30 93 c4 03 	sts	0x03C4, r19
    2ad6:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    2ada:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2ade:	46 98       	cbi	0x08, 6	; 8
    2ae0:	4e e0       	ldi	r20, 0x0E	; 14
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	59 ce       	rjmp	.-846    	; 0x2798 <__vector_29+0x102>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	80 93 bf 03 	sts	0x03BF, r24
    2aec:	85 cf       	rjmp	.-246    	; 0x29f8 <__vector_29+0x362>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2aee:	84 e0       	ldi	r24, 0x04	; 4
    2af0:	80 93 bf 03 	sts	0x03BF, r24
    2af4:	46 cf       	rjmp	.-372    	; 0x2982 <__vector_29+0x2ec>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	80 93 bf 03 	sts	0x03BF, r24
    2afc:	14 ce       	rjmp	.-984    	; 0x2726 <__vector_29+0x90>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2afe:	11 82       	std	Z+1, r1	; 0x01
    2b00:	10 82       	st	Z, r1
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	75 ce       	rjmp	.-790    	; 0x27f2 <__vector_29+0x15c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2b08:	ac 01       	movw	r20, r24
    2b0a:	44 5c       	subi	r20, 0xC4	; 196
    2b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0e:	55 95       	asr	r21
    2b10:	47 95       	ror	r20
    2b12:	48 37       	cpi	r20, 0x78	; 120
    2b14:	51 05       	cpc	r21, r1
    2b16:	7c f4       	brge	.+30     	; 0x2b36 <__vector_29+0x4a0>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2b18:	29 53       	subi	r18, 0x39	; 57
    2b1a:	3c 4f       	sbci	r19, 0xFC	; 252
    2b1c:	cc 97       	sbiw	r24, 0x3c	; 60
    2b1e:	95 95       	asr	r25
    2b20:	87 95       	ror	r24
    2b22:	cc 96       	adiw	r24, 0x3c	; 60
    2b24:	f9 01       	movw	r30, r18
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
    2b2a:	6e ce       	rjmp	.-804    	; 0x2808 <__vector_29+0x172>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2b32:	46 9a       	sbi	0x08, 6	; 8
    2b34:	d3 ce       	rjmp	.-602    	; 0x28dc <__vector_29+0x246>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2b36:	ac 01       	movw	r20, r24
    2b38:	44 5d       	subi	r20, 0xD4	; 212
    2b3a:	5e 4f       	sbci	r21, 0xFE	; 254
    2b3c:	55 95       	asr	r21
    2b3e:	47 95       	ror	r20
    2b40:	55 95       	asr	r21
    2b42:	47 95       	ror	r20
    2b44:	44 3b       	cpi	r20, 0xB4	; 180
    2b46:	51 05       	cpc	r21, r1
    2b48:	74 f4       	brge	.+28     	; 0x2b66 <__vector_29+0x4d0>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2b4a:	29 53       	subi	r18, 0x39	; 57
    2b4c:	3c 4f       	sbci	r19, 0xFC	; 252
    2b4e:	84 5b       	subi	r24, 0xB4	; 180
    2b50:	90 40       	sbci	r25, 0x00	; 0
    2b52:	95 95       	asr	r25
    2b54:	87 95       	ror	r24
    2b56:	95 95       	asr	r25
    2b58:	87 95       	ror	r24
    2b5a:	88 58       	subi	r24, 0x88	; 136
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	f9 01       	movw	r30, r18
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
    2b64:	51 ce       	rjmp	.-862    	; 0x2808 <__vector_29+0x172>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2b66:	29 53       	subi	r18, 0x39	; 57
    2b68:	3c 4f       	sbci	r19, 0xFC	; 252
    2b6a:	84 5a       	subi	r24, 0xA4	; 164
    2b6c:	91 40       	sbci	r25, 0x01	; 1
    2b6e:	95 95       	asr	r25
    2b70:	87 95       	ror	r24
    2b72:	95 95       	asr	r25
    2b74:	87 95       	ror	r24
    2b76:	95 95       	asr	r25
    2b78:	87 95       	ror	r24
    2b7a:	8c 54       	subi	r24, 0x4C	; 76
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	f9 01       	movw	r30, r18
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	80 83       	st	Z, r24
    2b84:	41 ce       	rjmp	.-894    	; 0x2808 <__vector_29+0x172>

00002b86 <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2b86:	e0 e9       	ldi	r30, 0x90	; 144
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	83 68       	ori	r24, 0x83	; 131
    2b8e:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2b90:	80 81       	ld	r24, Z
    2b92:	83 60       	ori	r24, 0x03	; 3
    2b94:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2b96:	a1 e9       	ldi	r26, 0x91	; 145
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	8c 91       	ld	r24, X
    2b9c:	8b 60       	ori	r24, 0x0B	; 11
    2b9e:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2ba0:	80 91 eb 03 	lds	r24, 0x03EB
    2ba4:	90 91 ec 03 	lds	r25, 0x03EC
    2ba8:	90 93 99 00 	sts	0x0099, r25
    2bac:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2bb0:	10 92 9b 00 	sts	0x009B, r1
    2bb4:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2bb8:	a1 e7       	ldi	r26, 0x71	; 113
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	8c 91       	ld	r24, X
    2bbe:	81 60       	ori	r24, 0x01	; 1
    2bc0:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8f 75       	andi	r24, 0x5F	; 95
    2bc6:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2bc8:	8e b1       	in	r24, 0x0e	; 14
    2bca:	87 7e       	andi	r24, 0xE7	; 231
    2bcc:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2bce:	e0 ea       	ldi	r30, 0xA0	; 160
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	83 68       	ori	r24, 0x83	; 131
    2bd6:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2bd8:	a1 ea       	ldi	r26, 0xA1	; 161
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	8c 91       	ld	r24, X
    2bde:	8b 60       	ori	r24, 0x0B	; 11
    2be0:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2be2:	80 91 ed 03 	lds	r24, 0x03ED
    2be6:	90 91 ee 03 	lds	r25, 0x03EE
    2bea:	90 93 a9 00 	sts	0x00A9, r25
    2bee:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2bf2:	10 92 ab 00 	sts	0x00AB, r1
    2bf6:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2bfa:	a2 e7       	ldi	r26, 0x72	; 114
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	8c 91       	ld	r24, X
    2c00:	81 60       	ori	r24, 0x01	; 1
    2c02:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2c04:	80 81       	ld	r24, Z
    2c06:	8f 75       	andi	r24, 0x5F	; 95
    2c08:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2c0a:	e2 e0       	ldi	r30, 0x02	; 2
    2c0c:	f1 e0       	ldi	r31, 0x01	; 1
    2c0e:	80 81       	ld	r24, Z
    2c10:	87 7e       	andi	r24, 0xE7	; 231
    2c12:	80 83       	st	Z, r24


}
    2c14:	08 95       	ret

00002c16 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    2c16:	1f 92       	push	r1
    2c18:	0f 92       	push	r0
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	0f 92       	push	r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	8f 93       	push	r24
    2c22:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    2c24:	80 91 26 04 	lds	r24, 0x0426
    2c28:	88 23       	and	r24, r24
    2c2a:	61 f0       	breq	.+24     	; 0x2c44 <__vector_45+0x2e>
		pwm_left = 0;
    2c2c:	10 92 ee 03 	sts	0x03EE, r1
    2c30:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    2c34:	10 92 a9 00 	sts	0x00A9, r1
    2c38:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2c3c:	10 92 ab 00 	sts	0x00AB, r1
    2c40:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    2c44:	10 92 d8 03 	sts	0x03D8, r1
    2c48:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    2c4c:	80 91 ed 03 	lds	r24, 0x03ED
    2c50:	90 91 ee 03 	lds	r25, 0x03EE
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	41 f5       	brne	.+80     	; 0x2ca8 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    2c58:	80 91 e1 03 	lds	r24, 0x03E1
    2c5c:	90 91 e2 03 	lds	r25, 0x03E2
    2c60:	97 fd       	sbrc	r25, 7
    2c62:	69 c0       	rjmp	.+210    	; 0x2d36 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    2c6a:	8e e0       	ldi	r24, 0x0E	; 14
    2c6c:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2c76:	80 91 a0 00 	lds	r24, 0x00A0
    2c7a:	8f 75       	andi	r24, 0x5F	; 95
    2c7c:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2c80:	80 91 02 01 	lds	r24, 0x0102
    2c84:	87 7e       	andi	r24, 0xE7	; 231
    2c86:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    2c8a:	80 91 72 00 	lds	r24, 0x0072
    2c8e:	89 7f       	andi	r24, 0xF9	; 249
    2c90:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    2c94:	89 b3       	in	r24, 0x19	; 25
    2c96:	86 60       	ori	r24, 0x06	; 6
    2c98:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    2c9a:	9f 91       	pop	r25
    2c9c:	8f 91       	pop	r24
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	0f 90       	pop	r0
    2ca4:	1f 90       	pop	r1
    2ca6:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    2ca8:	18 16       	cp	r1, r24
    2caa:	19 06       	cpc	r1, r25
    2cac:	2c f5       	brge	.+74     	; 0x2cf8 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    2cae:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    2cb2:	8f e0       	ldi	r24, 0x0F	; 15
    2cb4:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2cb8:	80 91 a0 00 	lds	r24, 0x00A0
    2cbc:	8f 7d       	andi	r24, 0xDF	; 223
    2cbe:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2cc2:	80 91 72 00 	lds	r24, 0x0072
    2cc6:	8b 7f       	andi	r24, 0xFB	; 251
    2cc8:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    2ccc:	80 91 02 01 	lds	r24, 0x0102
    2cd0:	8f 7e       	andi	r24, 0xEF	; 239
    2cd2:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    2cd6:	80 91 a0 00 	lds	r24, 0x00A0
    2cda:	80 68       	ori	r24, 0x80	; 128
    2cdc:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2ce0:	80 91 72 00 	lds	r24, 0x0072
    2ce4:	82 60       	ori	r24, 0x02	; 2
    2ce6:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	0f 90       	pop	r0
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	0f 90       	pop	r0
    2cf4:	1f 90       	pop	r1
    2cf6:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    2cf8:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    2cfc:	8e e0       	ldi	r24, 0x0E	; 14
    2cfe:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    2d02:	80 91 a0 00 	lds	r24, 0x00A0
    2d06:	8f 77       	andi	r24, 0x7F	; 127
    2d08:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2d0c:	80 91 72 00 	lds	r24, 0x0072
    2d10:	8d 7f       	andi	r24, 0xFD	; 253
    2d12:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    2d16:	80 91 02 01 	lds	r24, 0x0102
    2d1a:	87 7f       	andi	r24, 0xF7	; 247
    2d1c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    2d20:	80 91 a0 00 	lds	r24, 0x00A0
    2d24:	80 62       	ori	r24, 0x20	; 32
    2d26:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2d2a:	80 91 72 00 	lds	r24, 0x0072
    2d2e:	84 60       	ori	r24, 0x04	; 4
    2d30:	80 93 72 00 	sts	0x0072, r24
    2d34:	b2 cf       	rjmp	.-156    	; 0x2c9a <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    2d3c:	8f e0       	ldi	r24, 0x0F	; 15
    2d3e:	80 93 2b 03 	sts	0x032B, r24
    2d42:	96 cf       	rjmp	.-212    	; 0x2c70 <__vector_45+0x5a>

00002d44 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    2d44:	1f 92       	push	r1
    2d46:	0f 92       	push	r0
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	0f 92       	push	r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	8f 93       	push	r24
    2d50:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    2d58:	9e e0       	ldi	r25, 0x0E	; 14
    2d5a:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2d5e:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2d62:	9f 91       	pop	r25
    2d64:	8f 91       	pop	r24
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	0f 90       	pop	r0
    2d6c:	1f 90       	pop	r1
    2d6e:	18 95       	reti

00002d70 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    2d70:	1f 92       	push	r1
    2d72:	0f 92       	push	r0
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	0f 92       	push	r0
    2d78:	11 24       	eor	r1, r1
    2d7a:	8f 93       	push	r24
    2d7c:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    2d84:	9f e0       	ldi	r25, 0x0F	; 15
    2d86:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2d8a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2d8e:	9f 91       	pop	r25
    2d90:	8f 91       	pop	r24
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    2d9c:	1f 92       	push	r1
    2d9e:	0f 92       	push	r0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	0f 92       	push	r0
    2da4:	11 24       	eor	r1, r1
    2da6:	8f 93       	push	r24
    2da8:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    2daa:	80 91 26 04 	lds	r24, 0x0426
    2dae:	88 23       	and	r24, r24
    2db0:	61 f0       	breq	.+24     	; 0x2dca <__vector_35+0x2e>
		pwm_right = 0;
    2db2:	10 92 ec 03 	sts	0x03EC, r1
    2db6:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    2dba:	10 92 99 00 	sts	0x0099, r1
    2dbe:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2dc2:	10 92 9b 00 	sts	0x009B, r1
    2dc6:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    2dca:	10 92 da 03 	sts	0x03DA, r1
    2dce:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    2dd2:	80 91 eb 03 	lds	r24, 0x03EB
    2dd6:	90 91 ec 03 	lds	r25, 0x03EC
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	31 f5       	brne	.+76     	; 0x2e2a <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    2dde:	80 91 df 03 	lds	r24, 0x03DF
    2de2:	90 91 e0 03 	lds	r25, 0x03E0
    2de6:	97 fd       	sbrc	r25, 7
    2de8:	5f c0       	rjmp	.+190    	; 0x2ea8 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    2df0:	8c e0       	ldi	r24, 0x0C	; 12
    2df2:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2dfc:	80 91 90 00 	lds	r24, 0x0090
    2e00:	8f 75       	andi	r24, 0x5F	; 95
    2e02:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2e06:	8e b1       	in	r24, 0x0e	; 14
    2e08:	87 7e       	andi	r24, 0xE7	; 231
    2e0a:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    2e0c:	80 91 71 00 	lds	r24, 0x0071
    2e10:	89 7f       	andi	r24, 0xF9	; 249
    2e12:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    2e16:	88 b3       	in	r24, 0x18	; 24
    2e18:	86 60       	ori	r24, 0x06	; 6
    2e1a:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2e1c:	9f 91       	pop	r25
    2e1e:	8f 91       	pop	r24
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	0f 90       	pop	r0
    2e26:	1f 90       	pop	r1
    2e28:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    2e2a:	18 16       	cp	r1, r24
    2e2c:	19 06       	cpc	r1, r25
    2e2e:	0c f5       	brge	.+66     	; 0x2e72 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    2e30:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    2e34:	8d e0       	ldi	r24, 0x0D	; 13
    2e36:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    2e3a:	80 91 90 00 	lds	r24, 0x0090
    2e3e:	8f 7d       	andi	r24, 0xDF	; 223
    2e40:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    2e44:	80 91 71 00 	lds	r24, 0x0071
    2e48:	8b 7f       	andi	r24, 0xFB	; 251
    2e4a:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    2e4e:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    2e50:	80 91 90 00 	lds	r24, 0x0090
    2e54:	80 68       	ori	r24, 0x80	; 128
    2e56:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    2e5a:	80 91 71 00 	lds	r24, 0x0071
    2e5e:	82 60       	ori	r24, 0x02	; 2
    2e60:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2e64:	9f 91       	pop	r25
    2e66:	8f 91       	pop	r24
    2e68:	0f 90       	pop	r0
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	0f 90       	pop	r0
    2e6e:	1f 90       	pop	r1
    2e70:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    2e72:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    2e76:	8c e0       	ldi	r24, 0x0C	; 12
    2e78:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    2e7c:	80 91 90 00 	lds	r24, 0x0090
    2e80:	8f 77       	andi	r24, 0x7F	; 127
    2e82:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    2e86:	80 91 71 00 	lds	r24, 0x0071
    2e8a:	8d 7f       	andi	r24, 0xFD	; 253
    2e8c:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    2e90:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    2e92:	80 91 90 00 	lds	r24, 0x0090
    2e96:	80 62       	ori	r24, 0x20	; 32
    2e98:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    2e9c:	80 91 71 00 	lds	r24, 0x0071
    2ea0:	84 60       	ori	r24, 0x04	; 4
    2ea2:	80 93 71 00 	sts	0x0071, r24
    2ea6:	ba cf       	rjmp	.-140    	; 0x2e1c <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    2eae:	8d e0       	ldi	r24, 0x0D	; 13
    2eb0:	80 93 2c 03 	sts	0x032C, r24
    2eb4:	a0 cf       	rjmp	.-192    	; 0x2df6 <__vector_35+0x5a>

00002eb6 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    2eb6:	1f 92       	push	r1
    2eb8:	0f 92       	push	r0
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	0f 92       	push	r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	8f 93       	push	r24
    2ec2:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    2eca:	9c e0       	ldi	r25, 0x0C	; 12
    2ecc:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    2ed0:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    2ed4:	9f 91       	pop	r25
    2ed6:	8f 91       	pop	r24
    2ed8:	0f 90       	pop	r0
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	0f 90       	pop	r0
    2ede:	1f 90       	pop	r1
    2ee0:	18 95       	reti

00002ee2 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    2ee2:	1f 92       	push	r1
    2ee4:	0f 92       	push	r0
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	8f 93       	push	r24
    2eee:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    2ef6:	9d e0       	ldi	r25, 0x0D	; 13
    2ef8:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    2efc:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	0f 90       	pop	r0
    2f0a:	1f 90       	pop	r1
    2f0c:	18 95       	reti

00002f0e <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    2f0e:	2f 92       	push	r2
    2f10:	3f 92       	push	r3
    2f12:	4f 92       	push	r4
    2f14:	5f 92       	push	r5
    2f16:	6f 92       	push	r6
    2f18:	7f 92       	push	r7
    2f1a:	8f 92       	push	r8
    2f1c:	9f 92       	push	r9
    2f1e:	af 92       	push	r10
    2f20:	bf 92       	push	r11
    2f22:	cf 92       	push	r12
    2f24:	df 92       	push	r13
    2f26:	ef 92       	push	r14
    2f28:	ff 92       	push	r15
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	28 97       	sbiw	r28, 0x08	; 8
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	2c 01       	movw	r4, r24
    2f44:	7a 83       	std	Y+2, r23	; 0x02
    2f46:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    2f48:	fc 01       	movw	r30, r24
    2f4a:	01 90       	ld	r0, Z+
    2f4c:	f0 81       	ld	r31, Z
    2f4e:	e0 2d       	mov	r30, r0
    2f50:	fc 83       	std	Y+4, r31	; 0x04
    2f52:	eb 83       	std	Y+3, r30	; 0x03
    2f54:	fb 01       	movw	r30, r22
    2f56:	01 90       	ld	r0, Z+
    2f58:	f0 81       	ld	r31, Z
    2f5a:	e0 2d       	mov	r30, r0
    2f5c:	fe 83       	std	Y+6, r31	; 0x06
    2f5e:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f60:	60 91 c7 03 	lds	r22, 0x03C7
    2f64:	70 91 c8 03 	lds	r23, 0x03C8
    2f68:	65 30       	cpi	r22, 0x05	; 5
    2f6a:	71 05       	cpc	r23, r1
    2f6c:	34 f4       	brge	.+12     	; 0x2f7a <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    2f6e:	10 92 c8 03 	sts	0x03C8, r1
    2f72:	10 92 c7 03 	sts	0x03C7, r1
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f7a:	40 91 c9 03 	lds	r20, 0x03C9
    2f7e:	50 91 ca 03 	lds	r21, 0x03CA
    2f82:	45 30       	cpi	r20, 0x05	; 5
    2f84:	51 05       	cpc	r21, r1
    2f86:	34 f4       	brge	.+12     	; 0x2f94 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    2f88:	10 92 ca 03 	sts	0x03CA, r1
    2f8c:	10 92 c9 03 	sts	0x03C9, r1
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2f94:	80 91 cb 03 	lds	r24, 0x03CB
    2f98:	90 91 cc 03 	lds	r25, 0x03CC
    2f9c:	85 30       	cpi	r24, 0x05	; 5
    2f9e:	91 05       	cpc	r25, r1
    2fa0:	24 f4       	brge	.+8      	; 0x2faa <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    2fa2:	10 92 cc 03 	sts	0x03CC, r1
    2fa6:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2faa:	00 91 cd 03 	lds	r16, 0x03CD
    2fae:	10 91 ce 03 	lds	r17, 0x03CE
    2fb2:	05 30       	cpi	r16, 0x05	; 5
    2fb4:	11 05       	cpc	r17, r1
    2fb6:	34 f4       	brge	.+12     	; 0x2fc4 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    2fb8:	10 92 ce 03 	sts	0x03CE, r1
    2fbc:	10 92 cd 03 	sts	0x03CD, r1
    2fc0:	00 e0       	ldi	r16, 0x00	; 0
    2fc2:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2fc4:	60 90 cf 03 	lds	r6, 0x03CF
    2fc8:	70 90 d0 03 	lds	r7, 0x03D0
    2fcc:	f5 e0       	ldi	r31, 0x05	; 5
    2fce:	6f 16       	cp	r6, r31
    2fd0:	71 04       	cpc	r7, r1
    2fd2:	34 f4       	brge	.+12     	; 0x2fe0 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    2fd4:	10 92 d0 03 	sts	0x03D0, r1
    2fd8:	10 92 cf 03 	sts	0x03CF, r1
    2fdc:	66 24       	eor	r6, r6
    2fde:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2fe0:	20 91 d1 03 	lds	r18, 0x03D1
    2fe4:	30 91 d2 03 	lds	r19, 0x03D2
    2fe8:	25 30       	cpi	r18, 0x05	; 5
    2fea:	31 05       	cpc	r19, r1
    2fec:	34 f4       	brge	.+12     	; 0x2ffa <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    2fee:	10 92 d2 03 	sts	0x03D2, r1
    2ff2:	10 92 d1 03 	sts	0x03D1, r1
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    2ffa:	80 91 d3 03 	lds	r24, 0x03D3
    2ffe:	90 91 d4 03 	lds	r25, 0x03D4
    3002:	85 30       	cpi	r24, 0x05	; 5
    3004:	91 05       	cpc	r25, r1
    3006:	24 f4       	brge	.+8      	; 0x3010 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    3008:	10 92 d4 03 	sts	0x03D4, r1
    300c:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3010:	80 91 d5 03 	lds	r24, 0x03D5
    3014:	90 91 d6 03 	lds	r25, 0x03D6
    3018:	85 30       	cpi	r24, 0x05	; 5
    301a:	91 05       	cpc	r25, r1
    301c:	34 f4       	brge	.+12     	; 0x302a <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    301e:	10 92 d6 03 	sts	0x03D6, r1
    3022:	10 92 d5 03 	sts	0x03D5, r1
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    302a:	ee 24       	eor	r14, r14
    302c:	ff 24       	eor	r15, r15
    302e:	e6 1a       	sub	r14, r22
    3030:	f7 0a       	sbc	r15, r23
    3032:	5a 01       	movw	r10, r20
    3034:	b5 94       	asr	r11
    3036:	a7 94       	ror	r10
    3038:	15 95       	asr	r17
    303a:	07 95       	ror	r16
    303c:	69 01       	movw	r12, r18
    303e:	d5 94       	asr	r13
    3040:	c7 94       	ror	r12
    3042:	4c 01       	movw	r8, r24
    3044:	95 94       	asr	r9
    3046:	87 94       	ror	r8
    3048:	0e 94 01 24 	call	0x4802	; 0x4802 <rand>
    304c:	93 01       	movw	r18, r6
    304e:	2e 51       	subi	r18, 0x1E	; 30
    3050:	30 40       	sbci	r19, 0x00	; 0
    3052:	2e 0d       	add	r18, r14
    3054:	3f 1d       	adc	r19, r15
    3056:	20 0f       	add	r18, r16
    3058:	31 1f       	adc	r19, r17
    305a:	2c 0d       	add	r18, r12
    305c:	3d 1d       	adc	r19, r13
    305e:	2a 19       	sub	r18, r10
    3060:	3b 09       	sbc	r19, r11
    3062:	28 19       	sub	r18, r8
    3064:	39 09       	sbc	r19, r9
    3066:	4c e3       	ldi	r20, 0x3C	; 60
    3068:	24 2e       	mov	r2, r20
    306a:	31 2c       	mov	r3, r1
    306c:	b1 01       	movw	r22, r2
    306e:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
    3072:	28 0f       	add	r18, r24
    3074:	39 1f       	adc	r19, r25
    3076:	38 87       	std	Y+8, r19	; 0x08
    3078:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    307a:	e0 90 c9 03 	lds	r14, 0x03C9
    307e:	f0 90 ca 03 	lds	r15, 0x03CA
    3082:	f5 94       	asr	r15
    3084:	e7 94       	ror	r14
    3086:	00 91 cb 03 	lds	r16, 0x03CB
    308a:	10 91 cc 03 	lds	r17, 0x03CC
    308e:	15 95       	asr	r17
    3090:	07 95       	ror	r16
    3092:	15 95       	asr	r17
    3094:	07 95       	ror	r16
    3096:	c0 90 cd 03 	lds	r12, 0x03CD
    309a:	d0 90 ce 03 	lds	r13, 0x03CE
    309e:	d5 94       	asr	r13
    30a0:	c7 94       	ror	r12
    30a2:	80 90 d1 03 	lds	r8, 0x03D1
    30a6:	90 90 d2 03 	lds	r9, 0x03D2
    30aa:	95 94       	asr	r9
    30ac:	87 94       	ror	r8
    30ae:	60 90 d3 03 	lds	r6, 0x03D3
    30b2:	70 90 d4 03 	lds	r7, 0x03D4
    30b6:	75 94       	asr	r7
    30b8:	67 94       	ror	r6
    30ba:	75 94       	asr	r7
    30bc:	67 94       	ror	r6
    30be:	a0 90 d5 03 	lds	r10, 0x03D5
    30c2:	b0 90 d6 03 	lds	r11, 0x03D6
    30c6:	b5 94       	asr	r11
    30c8:	a7 94       	ror	r10
    30ca:	0e 94 01 24 	call	0x4802	; 0x4802 <rand>
    30ce:	97 01       	movw	r18, r14
    30d0:	20 0f       	add	r18, r16
    30d2:	31 1f       	adc	r19, r17
    30d4:	2e 51       	subi	r18, 0x1E	; 30
    30d6:	30 40       	sbci	r19, 0x00	; 0
    30d8:	2c 0d       	add	r18, r12
    30da:	3d 1d       	adc	r19, r13
    30dc:	2a 19       	sub	r18, r10
    30de:	3b 09       	sbc	r19, r11
    30e0:	28 19       	sub	r18, r8
    30e2:	39 09       	sbc	r19, r9
    30e4:	26 19       	sub	r18, r6
    30e6:	37 09       	sbc	r19, r7
    30e8:	b1 01       	movw	r22, r2
    30ea:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
    30ee:	28 0f       	add	r18, r24
    30f0:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    30f2:	4b 81       	ldd	r20, Y+3	; 0x03
    30f4:	5c 81       	ldd	r21, Y+4	; 0x04
    30f6:	57 fd       	sbrc	r21, 7
    30f8:	97 c0       	rjmp	.+302    	; 0x3228 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    30fa:	5a 01       	movw	r10, r20
    30fc:	cc 24       	eor	r12, r12
    30fe:	b7 fc       	sbrc	r11, 7
    3100:	c0 94       	com	r12
    3102:	dc 2c       	mov	r13, r12
    3104:	8f 81       	ldd	r24, Y+7	; 0x07
    3106:	98 85       	ldd	r25, Y+8	; 0x08
    3108:	3c 01       	movw	r6, r24
    310a:	88 24       	eor	r8, r8
    310c:	77 fc       	sbrc	r7, 7
    310e:	80 94       	com	r8
    3110:	98 2c       	mov	r9, r8
    3112:	79 01       	movw	r14, r18
    3114:	00 27       	eor	r16, r16
    3116:	f7 fc       	sbrc	r15, 7
    3118:	00 95       	com	r16
    311a:	10 2f       	mov	r17, r16
    311c:	c4 01       	movw	r24, r8
    311e:	b3 01       	movw	r22, r6
    3120:	6e 19       	sub	r22, r14
    3122:	7f 09       	sbc	r23, r15
    3124:	80 0b       	sbc	r24, r16
    3126:	91 0b       	sbc	r25, r17
    3128:	a6 01       	movw	r20, r12
    312a:	95 01       	movw	r18, r10
    312c:	0e 94 36 23 	call	0x466c	; 0x466c <__mulsi3>
    3130:	f7 e0       	ldi	r31, 0x07	; 7
    3132:	95 95       	asr	r25
    3134:	87 95       	ror	r24
    3136:	77 95       	ror	r23
    3138:	67 95       	ror	r22
    313a:	fa 95       	dec	r31
    313c:	d1 f7       	brne	.-12     	; 0x3132 <obstacleAvoidance+0x224>
    313e:	6a 0d       	add	r22, r10
    3140:	7b 1d       	adc	r23, r11
    3142:	8c 1d       	adc	r24, r12
    3144:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    3146:	f2 01       	movw	r30, r4
    3148:	71 83       	std	Z+1, r23	; 0x01
    314a:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    314c:	2d 81       	ldd	r18, Y+5	; 0x05
    314e:	3e 81       	ldd	r19, Y+6	; 0x06
    3150:	37 fd       	sbrc	r19, 7
    3152:	99 c0       	rjmp	.+306    	; 0x3286 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3154:	59 01       	movw	r10, r18
    3156:	cc 24       	eor	r12, r12
    3158:	b7 fc       	sbrc	r11, 7
    315a:	c0 94       	com	r12
    315c:	dc 2c       	mov	r13, r12
    315e:	c8 01       	movw	r24, r16
    3160:	b7 01       	movw	r22, r14
    3162:	66 0d       	add	r22, r6
    3164:	77 1d       	adc	r23, r7
    3166:	88 1d       	adc	r24, r8
    3168:	99 1d       	adc	r25, r9
    316a:	a6 01       	movw	r20, r12
    316c:	95 01       	movw	r18, r10
    316e:	0e 94 36 23 	call	0x466c	; 0x466c <__mulsi3>
    3172:	37 e0       	ldi	r19, 0x07	; 7
    3174:	95 95       	asr	r25
    3176:	87 95       	ror	r24
    3178:	77 95       	ror	r23
    317a:	67 95       	ror	r22
    317c:	3a 95       	dec	r19
    317e:	d1 f7       	brne	.-12     	; 0x3174 <obstacleAvoidance+0x266>
    3180:	6a 0d       	add	r22, r10
    3182:	7b 1d       	adc	r23, r11
    3184:	8c 1d       	adc	r24, r12
    3186:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3188:	9b 01       	movw	r18, r22
    318a:	e9 81       	ldd	r30, Y+1	; 0x01
    318c:	fa 81       	ldd	r31, Y+2	; 0x02
    318e:	71 83       	std	Z+1, r23	; 0x01
    3190:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    3192:	f2 e0       	ldi	r31, 0x02	; 2
    3194:	21 30       	cpi	r18, 0x01	; 1
    3196:	3f 07       	cpc	r19, r31
    3198:	44 f0       	brlt	.+16     	; 0x31aa <obstacleAvoidance+0x29c>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	92 e0       	ldi	r25, 0x02	; 2
    319e:	e9 81       	ldd	r30, Y+1	; 0x01
    31a0:	fa 81       	ldd	r31, Y+2	; 0x02
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	80 83       	st	Z, r24
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    31aa:	f2 01       	movw	r30, r4
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	f2 e0       	ldi	r31, 0x02	; 2
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	9f 07       	cpc	r25, r31
    31b6:	4c f0       	brlt	.+18     	; 0x31ca <obstacleAvoidance+0x2bc>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	92 e0       	ldi	r25, 0x02	; 2
    31bc:	f2 01       	movw	r30, r4
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	80 83       	st	Z, r24
    31c2:	e9 81       	ldd	r30, Y+1	; 0x01
    31c4:	fa 81       	ldd	r31, Y+2	; 0x02
    31c6:	20 81       	ld	r18, Z
    31c8:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    31ca:	fe ef       	ldi	r31, 0xFE	; 254
    31cc:	20 30       	cpi	r18, 0x00	; 0
    31ce:	3f 07       	cpc	r19, r31
    31d0:	4c f4       	brge	.+18     	; 0x31e4 <obstacleAvoidance+0x2d6>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	9e ef       	ldi	r25, 0xFE	; 254
    31d6:	e9 81       	ldd	r30, Y+1	; 0x01
    31d8:	fa 81       	ldd	r31, Y+2	; 0x02
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	f2 01       	movw	r30, r4
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    31e4:	fe ef       	ldi	r31, 0xFE	; 254
    31e6:	80 30       	cpi	r24, 0x00	; 0
    31e8:	9f 07       	cpc	r25, r31
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <obstacleAvoidance+0x2e8>
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	9e ef       	ldi	r25, 0xFE	; 254
    31f0:	f2 01       	movw	r30, r4
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24

}
    31f6:	28 96       	adiw	r28, 0x08	; 8
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	cf 91       	pop	r28
    3204:	df 91       	pop	r29
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	9f 90       	pop	r9
    3218:	8f 90       	pop	r8
    321a:	7f 90       	pop	r7
    321c:	6f 90       	pop	r6
    321e:	5f 90       	pop	r5
    3220:	4f 90       	pop	r4
    3222:	3f 90       	pop	r3
    3224:	2f 90       	pop	r2
    3226:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3228:	4d 81       	ldd	r20, Y+5	; 0x05
    322a:	5e 81       	ldd	r21, Y+6	; 0x06
    322c:	5a 01       	movw	r10, r20
    322e:	cc 24       	eor	r12, r12
    3230:	b7 fc       	sbrc	r11, 7
    3232:	c0 94       	com	r12
    3234:	dc 2c       	mov	r13, r12
    3236:	8f 81       	ldd	r24, Y+7	; 0x07
    3238:	98 85       	ldd	r25, Y+8	; 0x08
    323a:	3c 01       	movw	r6, r24
    323c:	88 24       	eor	r8, r8
    323e:	77 fc       	sbrc	r7, 7
    3240:	80 94       	com	r8
    3242:	98 2c       	mov	r9, r8
    3244:	79 01       	movw	r14, r18
    3246:	00 27       	eor	r16, r16
    3248:	f7 fc       	sbrc	r15, 7
    324a:	00 95       	com	r16
    324c:	10 2f       	mov	r17, r16
    324e:	c8 01       	movw	r24, r16
    3250:	b7 01       	movw	r22, r14
    3252:	66 0d       	add	r22, r6
    3254:	77 1d       	adc	r23, r7
    3256:	88 1d       	adc	r24, r8
    3258:	99 1d       	adc	r25, r9
    325a:	a6 01       	movw	r20, r12
    325c:	95 01       	movw	r18, r10
    325e:	0e 94 36 23 	call	0x466c	; 0x466c <__mulsi3>
    3262:	e7 e0       	ldi	r30, 0x07	; 7
    3264:	95 95       	asr	r25
    3266:	87 95       	ror	r24
    3268:	77 95       	ror	r23
    326a:	67 95       	ror	r22
    326c:	ea 95       	dec	r30
    326e:	d1 f7       	brne	.-12     	; 0x3264 <obstacleAvoidance+0x356>
    3270:	26 1b       	sub	r18, r22
    3272:	37 0b       	sbc	r19, r23
    3274:	48 0b       	sbc	r20, r24
    3276:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    3278:	f2 01       	movw	r30, r4
    327a:	31 83       	std	Z+1, r19	; 0x01
    327c:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    327e:	2d 81       	ldd	r18, Y+5	; 0x05
    3280:	3e 81       	ldd	r19, Y+6	; 0x06
    3282:	37 ff       	sbrs	r19, 7
    3284:	67 cf       	rjmp	.-306    	; 0x3154 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3286:	2b 81       	ldd	r18, Y+3	; 0x03
    3288:	3c 81       	ldd	r19, Y+4	; 0x04
    328a:	59 01       	movw	r10, r18
    328c:	cc 24       	eor	r12, r12
    328e:	b7 fc       	sbrc	r11, 7
    3290:	c0 94       	com	r12
    3292:	dc 2c       	mov	r13, r12
    3294:	c4 01       	movw	r24, r8
    3296:	b3 01       	movw	r22, r6
    3298:	6e 19       	sub	r22, r14
    329a:	7f 09       	sbc	r23, r15
    329c:	80 0b       	sbc	r24, r16
    329e:	91 0b       	sbc	r25, r17
    32a0:	a6 01       	movw	r20, r12
    32a2:	95 01       	movw	r18, r10
    32a4:	0e 94 36 23 	call	0x466c	; 0x466c <__mulsi3>
    32a8:	27 e0       	ldi	r18, 0x07	; 7
    32aa:	95 95       	asr	r25
    32ac:	87 95       	ror	r24
    32ae:	77 95       	ror	r23
    32b0:	67 95       	ror	r22
    32b2:	2a 95       	dec	r18
    32b4:	d1 f7       	brne	.-12     	; 0x32aa <obstacleAvoidance+0x39c>
    32b6:	a6 1a       	sub	r10, r22
    32b8:	b7 0a       	sbc	r11, r23
    32ba:	c8 0a       	sbc	r12, r24
    32bc:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    32be:	95 01       	movw	r18, r10
    32c0:	e9 81       	ldd	r30, Y+1	; 0x01
    32c2:	fa 81       	ldd	r31, Y+2	; 0x02
    32c4:	b1 82       	std	Z+1, r11	; 0x01
    32c6:	a0 82       	st	Z, r10
    32c8:	64 cf       	rjmp	.-312    	; 0x3192 <obstacleAvoidance+0x284>

000032ca <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    32ca:	80 91 6f 03 	lds	r24, 0x036F
    32ce:	90 91 70 03 	lds	r25, 0x0370
    32d2:	21 e0       	ldi	r18, 0x01	; 1
    32d4:	84 3a       	cpi	r24, 0xA4	; 164
    32d6:	92 07       	cpc	r25, r18
    32d8:	d4 f0       	brlt	.+52     	; 0x330e <cliffDetected+0x44>
    32da:	80 91 71 03 	lds	r24, 0x0371
    32de:	90 91 72 03 	lds	r25, 0x0372
    32e2:	21 e0       	ldi	r18, 0x01	; 1
    32e4:	84 3a       	cpi	r24, 0xA4	; 164
    32e6:	92 07       	cpc	r25, r18
    32e8:	94 f0       	brlt	.+36     	; 0x330e <cliffDetected+0x44>
    32ea:	80 91 73 03 	lds	r24, 0x0373
    32ee:	90 91 74 03 	lds	r25, 0x0374
    32f2:	21 e0       	ldi	r18, 0x01	; 1
    32f4:	84 3a       	cpi	r24, 0xA4	; 164
    32f6:	92 07       	cpc	r25, r18
    32f8:	74 f0       	brlt	.+28     	; 0x3316 <cliffDetected+0x4c>
		return 1;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	20 91 75 03 	lds	r18, 0x0375
    3300:	30 91 76 03 	lds	r19, 0x0376
    3304:	91 e0       	ldi	r25, 0x01	; 1
    3306:	24 3a       	cpi	r18, 0xA4	; 164
    3308:	39 07       	cpc	r19, r25
    330a:	1c f4       	brge	.+6      	; 0x3312 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    330c:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	08 95       	ret
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	08 95       	ret
    3316:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    3318:	08 95       	ret

0000331a <initRGBleds>:
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    331a:	e0 e8       	ldi	r30, 0x80	; 128
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	89 6a       	ori	r24, 0xA9	; 169
    3322:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3324:	e1 e8       	ldi	r30, 0x81	; 129
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	89 60       	ori	r24, 0x09	; 9
    332c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    332e:	80 91 0c 02 	lds	r24, 0x020C
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	90 93 89 00 	sts	0x0089, r25
    3338:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    333c:	80 91 0d 02 	lds	r24, 0x020D
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	90 93 8b 00 	sts	0x008B, r25
    3346:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    334a:	80 91 0e 02 	lds	r24, 0x020E
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	90 93 8d 00 	sts	0x008D, r25
    3354:	80 93 8c 00 	sts	0x008C, r24

}
    3358:	08 95       	ret

0000335a <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 91 03 04 	lds	r25, 0x0403
    3360:	89 1b       	sub	r24, r25
    3362:	80 93 03 04 	sts	0x0403, r24

	if(blinkState) {
    3366:	88 23       	and	r24, r24
    3368:	39 f4       	brne	.+14     	; 0x3378 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    336a:	80 91 80 00 	lds	r24, 0x0080
    336e:	87 7f       	andi	r24, 0xF7	; 247
    3370:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    3374:	2f 98       	cbi	0x05, 7	; 5
    3376:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    3378:	80 91 80 00 	lds	r24, 0x0080
    337c:	88 60       	ori	r24, 0x08	; 8
    337e:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3382:	8f ef       	ldi	r24, 0xFF	; 255
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	90 93 8d 00 	sts	0x008D, r25
    338a:	80 93 8c 00 	sts	0x008C, r24
    338e:	08 95       	ret

00003390 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3390:	88 23       	and	r24, r24
    3392:	59 f0       	breq	.+22     	; 0x33aa <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    3394:	90 91 80 00 	lds	r25, 0x0080
    3398:	90 68       	ori	r25, 0x80	; 128
    339a:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	90 93 89 00 	sts	0x0089, r25
    33a4:	80 93 88 00 	sts	0x0088, r24
    33a8:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    33aa:	80 91 80 00 	lds	r24, 0x0080
    33ae:	8f 77       	andi	r24, 0x7F	; 127
    33b0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    33b4:	2d 98       	cbi	0x05, 5	; 5
    33b6:	08 95       	ret

000033b8 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    33b8:	88 23       	and	r24, r24
    33ba:	59 f0       	breq	.+22     	; 0x33d2 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    33bc:	90 91 80 00 	lds	r25, 0x0080
    33c0:	90 62       	ori	r25, 0x20	; 32
    33c2:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	90 93 8b 00 	sts	0x008B, r25
    33cc:	80 93 8a 00 	sts	0x008A, r24
    33d0:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    33d2:	80 91 80 00 	lds	r24, 0x0080
    33d6:	8f 7d       	andi	r24, 0xDF	; 223
    33d8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    33dc:	2e 98       	cbi	0x05, 6	; 5
    33de:	08 95       	ret

000033e0 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    33e0:	88 23       	and	r24, r24
    33e2:	59 f0       	breq	.+22     	; 0x33fa <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    33e4:	90 91 80 00 	lds	r25, 0x0080
    33e8:	98 60       	ori	r25, 0x08	; 8
    33ea:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	90 93 8d 00 	sts	0x008D, r25
    33f4:	80 93 8c 00 	sts	0x008C, r24
    33f8:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    33fa:	80 91 80 00 	lds	r24, 0x0080
    33fe:	87 7f       	andi	r24, 0xF7	; 247
    3400:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    3404:	2f 98       	cbi	0x05, 7	; 5
    3406:	08 95       	ret

00003408 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    3408:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    340c:	80 91 13 02 	lds	r24, 0x0213
    3410:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3414:	88 23       	and	r24, r24
    3416:	49 f4       	brne	.+18     	; 0x342a <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3418:	86 e1       	ldi	r24, 0x16	; 22
    341a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    341e:	85 e4       	ldi	r24, 0x45	; 69
    3420:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3424:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    3428:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    342a:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    342e:	86 ea       	ldi	r24, 0xA6	; 166
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	90 93 14 02 	sts	0x0214, r25
    3436:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    343a:	86 ea       	ldi	r24, 0xA6	; 166
    343c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3440:	88 23       	and	r24, r24
    3442:	41 f5       	brne	.+80     	; 0x3494 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3444:	8d e2       	ldi	r24, 0x2D	; 45
    3446:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x08);	// measurement mode
    344a:	88 e0       	ldi	r24, 0x08	; 8
    344c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3450:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3454:	80 91 13 02 	lds	r24, 0x0213
    3458:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    345c:	88 23       	and	r24, r24
    345e:	d1 f4       	brne	.+52     	; 0x3494 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3460:	81 e3       	ldi	r24, 0x31	; 49
    3462:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    346c:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3470:	80 91 13 02 	lds	r24, 0x0213
    3474:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3478:	88 23       	and	r24, r24
    347a:	61 f4       	brne	.+24     	; 0x3494 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    347c:	8c e2       	ldi	r24, 0x2C	; 44
    347e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3482:	89 e0       	ldi	r24, 0x09	; 9
    3484:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3488:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	80 93 09 04 	sts	0x0409, r24
    3492:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3494:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3498:	82 e0       	ldi	r24, 0x02	; 2
    349a:	80 93 09 04 	sts	0x0409, r24
    349e:	08 95       	ret

000034a0 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34a0:	80 91 13 02 	lds	r24, 0x0213
    34a4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34a8:	88 23       	and	r24, r24
    34aa:	51 f4       	brne	.+20     	; 0x34c0 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    34ac:	86 e1       	ldi	r24, 0x16	; 22
    34ae:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    34b2:	85 e4       	ldi	r24, 0x45	; 69
    34b4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34b8:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    }

	return 0;				// configuration ok
    34bc:	80 e0       	ldi	r24, 0x00	; 0

}
    34be:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    34c0:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
		return 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	08 95       	ret

000034c8 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34c8:	80 91 13 02 	lds	r24, 0x0213
    34cc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34d0:	88 23       	and	r24, r24
    34d2:	31 f5       	brne	.+76     	; 0x3520 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    34d4:	8d e2       	ldi	r24, 0x2D	; 45
    34d6:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x08);	// measurement mode
    34da:	88 e0       	ldi	r24, 0x08	; 8
    34dc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34e0:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34e4:	80 91 13 02 	lds	r24, 0x0213
    34e8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34ec:	88 23       	and	r24, r24
    34ee:	c1 f4       	brne	.+48     	; 0x3520 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    34f0:	81 e3       	ldi	r24, 0x31	; 49
    34f2:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34fc:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3500:	80 91 13 02 	lds	r24, 0x0213
    3504:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3508:	88 23       	and	r24, r24
    350a:	51 f4       	brne	.+20     	; 0x3520 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    350c:	8c e2       	ldi	r24, 0x2C	; 44
    350e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3512:	89 e0       	ldi	r24, 0x09	; 9
    3514:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3518:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
    }

	return 0;
    351c:	80 e0       	ldi	r24, 0x00	; 0

}
    351e:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3520:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>
		return 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	08 95       	ret

00003528 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	0f 92       	push	r0
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    3538:	80 91 09 04 	lds	r24, 0x0409
    353c:	88 23       	and	r24, r24
    353e:	91 f0       	breq	.+36     	; 0x3564 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    3540:	81 30       	cpi	r24, 0x01	; 1
    3542:	09 f4       	brne	.+2      	; 0x3546 <readAccelXY+0x1e>
    3544:	88 c0       	rjmp	.+272    	; 0x3656 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    3546:	10 92 0b 04 	sts	0x040B, r1
    354a:	10 92 0a 04 	sts	0x040A, r1
		accY = 0;
    354e:	10 92 0d 04 	sts	0x040D, r1
    3552:	10 92 0c 04 	sts	0x040C, r1

	}

}
    3556:	0f 90       	pop	r0
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	1f 91       	pop	r17
    355e:	0f 91       	pop	r16
    3560:	ff 90       	pop	r15
    3562:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3564:	80 91 13 02 	lds	r24, 0x0213
    3568:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    356c:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    356e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3572:	80 91 13 02 	lds	r24, 0x0213
    3576:	8f 5f       	subi	r24, 0xFF	; 255
    3578:	0e 94 2f 10 	call	0x205e	; 0x205e <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    357c:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    3580:	08 2f       	mov	r16, r24
    3582:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    3586:	f8 2e       	mov	r15, r24
    3588:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    358c:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    358e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3592:	89 83       	std	Y+1, r24	; 0x01
    3594:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3598:	90 91 53 04 	lds	r25, 0x0453
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	99 23       	and	r25, r25
    35a0:	39 f1       	breq	.+78     	; 0x35f0 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    35a2:	4f 2d       	mov	r20, r15
    35a4:	55 27       	eor	r21, r21
    35a6:	47 fd       	sbrc	r20, 7
    35a8:	50 95       	com	r21
    35aa:	54 2f       	mov	r21, r20
    35ac:	44 27       	eor	r20, r20
    35ae:	60 2f       	mov	r22, r16
    35b0:	77 27       	eor	r23, r23
    35b2:	67 fd       	sbrc	r22, 7
    35b4:	70 95       	com	r23
    35b6:	46 2b       	or	r20, r22
    35b8:	57 2b       	or	r21, r23
    35ba:	50 93 0b 04 	sts	0x040B, r21
    35be:	40 93 0a 04 	sts	0x040A, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    35c2:	28 2f       	mov	r18, r24
    35c4:	33 27       	eor	r19, r19
    35c6:	27 fd       	sbrc	r18, 7
    35c8:	30 95       	com	r19
    35ca:	32 2f       	mov	r19, r18
    35cc:	22 27       	eor	r18, r18
    35ce:	81 2f       	mov	r24, r17
    35d0:	99 27       	eor	r25, r25
    35d2:	87 fd       	sbrc	r24, 7
    35d4:	90 95       	com	r25
    35d6:	28 2b       	or	r18, r24
    35d8:	39 2b       	or	r19, r25
    35da:	30 93 0d 04 	sts	0x040D, r19
    35de:	20 93 0c 04 	sts	0x040C, r18
		accX = 0;
		accY = 0;

	}

}
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	ff 90       	pop	r15
    35ee:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    35f0:	4f 2d       	mov	r20, r15
    35f2:	55 27       	eor	r21, r21
    35f4:	47 fd       	sbrc	r20, 7
    35f6:	50 95       	com	r21
    35f8:	54 2f       	mov	r21, r20
    35fa:	44 27       	eor	r20, r20
    35fc:	60 2f       	mov	r22, r16
    35fe:	77 27       	eor	r23, r23
    3600:	67 fd       	sbrc	r22, 7
    3602:	70 95       	com	r23
    3604:	46 2b       	or	r20, r22
    3606:	57 2b       	or	r21, r23
    3608:	60 91 10 04 	lds	r22, 0x0410
    360c:	70 91 11 04 	lds	r23, 0x0411
    3610:	46 1b       	sub	r20, r22
    3612:	57 0b       	sbc	r21, r23
    3614:	50 93 0b 04 	sts	0x040B, r21
    3618:	40 93 0a 04 	sts	0x040A, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    361c:	28 2f       	mov	r18, r24
    361e:	33 27       	eor	r19, r19
    3620:	27 fd       	sbrc	r18, 7
    3622:	30 95       	com	r19
    3624:	32 2f       	mov	r19, r18
    3626:	22 27       	eor	r18, r18
    3628:	81 2f       	mov	r24, r17
    362a:	99 27       	eor	r25, r25
    362c:	87 fd       	sbrc	r24, 7
    362e:	90 95       	com	r25
    3630:	28 2b       	or	r18, r24
    3632:	39 2b       	or	r19, r25
    3634:	80 91 12 04 	lds	r24, 0x0412
    3638:	90 91 13 04 	lds	r25, 0x0413
    363c:	28 1b       	sub	r18, r24
    363e:	39 0b       	sbc	r19, r25
    3640:	30 93 0d 04 	sts	0x040D, r19
    3644:	20 93 0c 04 	sts	0x040C, r18
		accX = 0;
		accY = 0;

	}

}
    3648:	0f 90       	pop	r0
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3656:	80 91 13 02 	lds	r24, 0x0213
    365a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    365e:	82 e3       	ldi	r24, 0x32	; 50
    3660:	86 cf       	rjmp	.-244    	; 0x356e <readAccelXY+0x46>

00003662 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <readAccelXYZ+0x6>
    3668:	00 d0       	rcall	.+0      	; 0x366a <readAccelXYZ+0x8>
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    366e:	80 91 09 04 	lds	r24, 0x0409
    3672:	88 23       	and	r24, r24
    3674:	c1 f0       	breq	.+48     	; 0x36a6 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	09 f4       	brne	.+2      	; 0x367c <readAccelXYZ+0x1a>
    367a:	ad c0       	rjmp	.+346    	; 0x37d6 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    367c:	10 92 0b 04 	sts	0x040B, r1
    3680:	10 92 0a 04 	sts	0x040A, r1
		accY = 0;
    3684:	10 92 0d 04 	sts	0x040D, r1
    3688:	10 92 0c 04 	sts	0x040C, r1
		accZ = 0;
    368c:	10 92 0f 04 	sts	0x040F, r1
    3690:	10 92 0e 04 	sts	0x040E, r1

	}

}
    3694:	26 96       	adiw	r28, 0x06	; 6
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    36a6:	80 91 13 02 	lds	r24, 0x0213
    36aa:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    36ae:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    36b0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    36b4:	80 91 13 02 	lds	r24, 0x0213
    36b8:	8f 5f       	subi	r24, 0xFF	; 255
    36ba:	0e 94 2f 10 	call	0x205e	; 0x205e <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    36be:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    36c8:	8a 83       	std	Y+2, r24	; 0x02
    36ca:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    36ce:	8b 83       	std	Y+3, r24	; 0x03
    36d0:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    36d4:	8c 83       	std	Y+4, r24	; 0x04
    36d6:	0e 94 6f 10 	call	0x20de	; 0x20de <i2c_readAck>
    36da:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    36dc:	0e 94 79 10 	call	0x20f2	; 0x20f2 <i2c_readNak>
    36e0:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    36e2:	0e 94 55 10 	call	0x20aa	; 0x20aa <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    36e6:	80 91 53 04 	lds	r24, 0x0453
    36ea:	88 23       	and	r24, r24
    36ec:	89 f1       	breq	.+98     	; 0x3750 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	99 27       	eor	r25, r25
    36f2:	87 fd       	sbrc	r24, 7
    36f4:	90 95       	com	r25
    36f6:	98 2f       	mov	r25, r24
    36f8:	88 27       	eor	r24, r24
    36fa:	29 81       	ldd	r18, Y+1	; 0x01
    36fc:	33 27       	eor	r19, r19
    36fe:	27 fd       	sbrc	r18, 7
    3700:	30 95       	com	r19
    3702:	82 2b       	or	r24, r18
    3704:	93 2b       	or	r25, r19
    3706:	90 93 0b 04 	sts	0x040B, r25
    370a:	80 93 0a 04 	sts	0x040A, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    370e:	8c 81       	ldd	r24, Y+4	; 0x04
    3710:	99 27       	eor	r25, r25
    3712:	87 fd       	sbrc	r24, 7
    3714:	90 95       	com	r25
    3716:	98 2f       	mov	r25, r24
    3718:	88 27       	eor	r24, r24
    371a:	2b 81       	ldd	r18, Y+3	; 0x03
    371c:	33 27       	eor	r19, r19
    371e:	27 fd       	sbrc	r18, 7
    3720:	30 95       	com	r19
    3722:	82 2b       	or	r24, r18
    3724:	93 2b       	or	r25, r19
    3726:	90 93 0d 04 	sts	0x040D, r25
    372a:	80 93 0c 04 	sts	0x040C, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    372e:	8e 81       	ldd	r24, Y+6	; 0x06
    3730:	99 27       	eor	r25, r25
    3732:	87 fd       	sbrc	r24, 7
    3734:	90 95       	com	r25
    3736:	98 2f       	mov	r25, r24
    3738:	88 27       	eor	r24, r24
    373a:	2d 81       	ldd	r18, Y+5	; 0x05
    373c:	33 27       	eor	r19, r19
    373e:	27 fd       	sbrc	r18, 7
    3740:	30 95       	com	r19
    3742:	82 2b       	or	r24, r18
    3744:	93 2b       	or	r25, r19
    3746:	90 93 0f 04 	sts	0x040F, r25
    374a:	80 93 0e 04 	sts	0x040E, r24
    374e:	a2 cf       	rjmp	.-188    	; 0x3694 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
    3752:	99 27       	eor	r25, r25
    3754:	87 fd       	sbrc	r24, 7
    3756:	90 95       	com	r25
    3758:	98 2f       	mov	r25, r24
    375a:	88 27       	eor	r24, r24
    375c:	29 81       	ldd	r18, Y+1	; 0x01
    375e:	33 27       	eor	r19, r19
    3760:	27 fd       	sbrc	r18, 7
    3762:	30 95       	com	r19
    3764:	82 2b       	or	r24, r18
    3766:	93 2b       	or	r25, r19
    3768:	20 91 10 04 	lds	r18, 0x0410
    376c:	30 91 11 04 	lds	r19, 0x0411
    3770:	82 1b       	sub	r24, r18
    3772:	93 0b       	sbc	r25, r19
    3774:	90 93 0b 04 	sts	0x040B, r25
    3778:	80 93 0a 04 	sts	0x040A, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    377c:	8c 81       	ldd	r24, Y+4	; 0x04
    377e:	99 27       	eor	r25, r25
    3780:	87 fd       	sbrc	r24, 7
    3782:	90 95       	com	r25
    3784:	98 2f       	mov	r25, r24
    3786:	88 27       	eor	r24, r24
    3788:	2b 81       	ldd	r18, Y+3	; 0x03
    378a:	33 27       	eor	r19, r19
    378c:	27 fd       	sbrc	r18, 7
    378e:	30 95       	com	r19
    3790:	82 2b       	or	r24, r18
    3792:	93 2b       	or	r25, r19
    3794:	20 91 12 04 	lds	r18, 0x0412
    3798:	30 91 13 04 	lds	r19, 0x0413
    379c:	82 1b       	sub	r24, r18
    379e:	93 0b       	sbc	r25, r19
    37a0:	90 93 0d 04 	sts	0x040D, r25
    37a4:	80 93 0c 04 	sts	0x040C, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    37a8:	8e 81       	ldd	r24, Y+6	; 0x06
    37aa:	99 27       	eor	r25, r25
    37ac:	87 fd       	sbrc	r24, 7
    37ae:	90 95       	com	r25
    37b0:	98 2f       	mov	r25, r24
    37b2:	88 27       	eor	r24, r24
    37b4:	2d 81       	ldd	r18, Y+5	; 0x05
    37b6:	33 27       	eor	r19, r19
    37b8:	27 fd       	sbrc	r18, 7
    37ba:	30 95       	com	r19
    37bc:	82 2b       	or	r24, r18
    37be:	93 2b       	or	r25, r19
    37c0:	20 91 14 04 	lds	r18, 0x0414
    37c4:	30 91 15 04 	lds	r19, 0x0415
    37c8:	82 1b       	sub	r24, r18
    37ca:	93 0b       	sbc	r25, r19
    37cc:	90 93 0f 04 	sts	0x040F, r25
    37d0:	80 93 0e 04 	sts	0x040E, r24
    37d4:	5f cf       	rjmp	.-322    	; 0x3694 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    37d6:	80 91 13 02 	lds	r24, 0x0213
    37da:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    37de:	82 e3       	ldi	r24, 0x32	; 50
    37e0:	67 cf       	rjmp	.-306    	; 0x36b0 <readAccelXYZ+0x4e>

000037e2 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    37e6:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    37ea:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    37ee:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	0e 94 c8 19 	call	0x3390	; 0x3390 <updateRedLed>
	updateGreenLed(pwm_green);
    37f8:	80 91 0d 02 	lds	r24, 0x020D
    37fc:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <updateGreenLed>
	updateBlueLed(pwm_blue);
    3800:	80 91 0e 02 	lds	r24, 0x020E
    3804:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <updateBlueLed>

	calibrationCycle = 0;
    3808:	10 92 23 04 	sts	0x0423, r1
    380c:	10 92 22 04 	sts	0x0422, r1
	startCalibration = 1;
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	80 93 53 04 	sts	0x0453, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3816:	c1 e0       	ldi	r28, 0x01	; 1
    3818:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    381a:	0e 94 31 1b 	call	0x3662	; 0x3662 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    381e:	20 91 22 04 	lds	r18, 0x0422
    3822:	30 91 23 04 	lds	r19, 0x0423
    3826:	21 31       	cpi	r18, 0x11	; 17
    3828:	31 05       	cpc	r19, r1
    382a:	0c f4       	brge	.+2      	; 0x382e <calibrateSensors+0x4c>
    382c:	35 c1       	rjmp	.+618    	; 0x3a98 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    382e:	80 91 8f 03 	lds	r24, 0x038F
    3832:	90 91 90 03 	lds	r25, 0x0390
    3836:	a0 91 91 03 	lds	r26, 0x0391
    383a:	b0 91 92 03 	lds	r27, 0x0392
    383e:	54 e0       	ldi	r21, 0x04	; 4
    3840:	b6 95       	lsr	r27
    3842:	a7 95       	ror	r26
    3844:	97 95       	ror	r25
    3846:	87 95       	ror	r24
    3848:	5a 95       	dec	r21
    384a:	d1 f7       	brne	.-12     	; 0x3840 <calibrateSensors+0x5e>
    384c:	90 93 78 03 	sts	0x0378, r25
    3850:	80 93 77 03 	sts	0x0377, r24
    3854:	80 91 93 03 	lds	r24, 0x0393
    3858:	90 91 94 03 	lds	r25, 0x0394
    385c:	a0 91 95 03 	lds	r26, 0x0395
    3860:	b0 91 96 03 	lds	r27, 0x0396
    3864:	44 e0       	ldi	r20, 0x04	; 4
    3866:	b6 95       	lsr	r27
    3868:	a7 95       	ror	r26
    386a:	97 95       	ror	r25
    386c:	87 95       	ror	r24
    386e:	4a 95       	dec	r20
    3870:	d1 f7       	brne	.-12     	; 0x3866 <calibrateSensors+0x84>
    3872:	90 93 7a 03 	sts	0x037A, r25
    3876:	80 93 79 03 	sts	0x0379, r24
    387a:	80 91 97 03 	lds	r24, 0x0397
    387e:	90 91 98 03 	lds	r25, 0x0398
    3882:	a0 91 99 03 	lds	r26, 0x0399
    3886:	b0 91 9a 03 	lds	r27, 0x039A
    388a:	34 e0       	ldi	r19, 0x04	; 4
    388c:	b6 95       	lsr	r27
    388e:	a7 95       	ror	r26
    3890:	97 95       	ror	r25
    3892:	87 95       	ror	r24
    3894:	3a 95       	dec	r19
    3896:	d1 f7       	brne	.-12     	; 0x388c <calibrateSensors+0xaa>
    3898:	90 93 7c 03 	sts	0x037C, r25
    389c:	80 93 7b 03 	sts	0x037B, r24
    38a0:	80 91 9b 03 	lds	r24, 0x039B
    38a4:	90 91 9c 03 	lds	r25, 0x039C
    38a8:	a0 91 9d 03 	lds	r26, 0x039D
    38ac:	b0 91 9e 03 	lds	r27, 0x039E
    38b0:	24 e0       	ldi	r18, 0x04	; 4
    38b2:	b6 95       	lsr	r27
    38b4:	a7 95       	ror	r26
    38b6:	97 95       	ror	r25
    38b8:	87 95       	ror	r24
    38ba:	2a 95       	dec	r18
    38bc:	d1 f7       	brne	.-12     	; 0x38b2 <calibrateSensors+0xd0>
    38be:	90 93 7e 03 	sts	0x037E, r25
    38c2:	80 93 7d 03 	sts	0x037D, r24
    38c6:	80 91 9f 03 	lds	r24, 0x039F
    38ca:	90 91 a0 03 	lds	r25, 0x03A0
    38ce:	a0 91 a1 03 	lds	r26, 0x03A1
    38d2:	b0 91 a2 03 	lds	r27, 0x03A2
    38d6:	f4 e0       	ldi	r31, 0x04	; 4
    38d8:	b6 95       	lsr	r27
    38da:	a7 95       	ror	r26
    38dc:	97 95       	ror	r25
    38de:	87 95       	ror	r24
    38e0:	fa 95       	dec	r31
    38e2:	d1 f7       	brne	.-12     	; 0x38d8 <calibrateSensors+0xf6>
    38e4:	90 93 80 03 	sts	0x0380, r25
    38e8:	80 93 7f 03 	sts	0x037F, r24
    38ec:	80 91 a3 03 	lds	r24, 0x03A3
    38f0:	90 91 a4 03 	lds	r25, 0x03A4
    38f4:	a0 91 a5 03 	lds	r26, 0x03A5
    38f8:	b0 91 a6 03 	lds	r27, 0x03A6
    38fc:	e4 e0       	ldi	r30, 0x04	; 4
    38fe:	b6 95       	lsr	r27
    3900:	a7 95       	ror	r26
    3902:	97 95       	ror	r25
    3904:	87 95       	ror	r24
    3906:	ea 95       	dec	r30
    3908:	d1 f7       	brne	.-12     	; 0x38fe <calibrateSensors+0x11c>
    390a:	90 93 82 03 	sts	0x0382, r25
    390e:	80 93 81 03 	sts	0x0381, r24
    3912:	80 91 a7 03 	lds	r24, 0x03A7
    3916:	90 91 a8 03 	lds	r25, 0x03A8
    391a:	a0 91 a9 03 	lds	r26, 0x03A9
    391e:	b0 91 aa 03 	lds	r27, 0x03AA
    3922:	74 e0       	ldi	r23, 0x04	; 4
    3924:	b6 95       	lsr	r27
    3926:	a7 95       	ror	r26
    3928:	97 95       	ror	r25
    392a:	87 95       	ror	r24
    392c:	7a 95       	dec	r23
    392e:	d1 f7       	brne	.-12     	; 0x3924 <calibrateSensors+0x142>
    3930:	90 93 84 03 	sts	0x0384, r25
    3934:	80 93 83 03 	sts	0x0383, r24
    3938:	80 91 ab 03 	lds	r24, 0x03AB
    393c:	90 91 ac 03 	lds	r25, 0x03AC
    3940:	a0 91 ad 03 	lds	r26, 0x03AD
    3944:	b0 91 ae 03 	lds	r27, 0x03AE
    3948:	64 e0       	ldi	r22, 0x04	; 4
    394a:	b6 95       	lsr	r27
    394c:	a7 95       	ror	r26
    394e:	97 95       	ror	r25
    3950:	87 95       	ror	r24
    3952:	6a 95       	dec	r22
    3954:	d1 f7       	brne	.-12     	; 0x394a <calibrateSensors+0x168>
    3956:	90 93 86 03 	sts	0x0386, r25
    395a:	80 93 85 03 	sts	0x0385, r24
    395e:	80 91 b3 03 	lds	r24, 0x03B3
    3962:	90 91 b4 03 	lds	r25, 0x03B4
    3966:	a0 91 b5 03 	lds	r26, 0x03B5
    396a:	b0 91 b6 03 	lds	r27, 0x03B6
    396e:	54 e0       	ldi	r21, 0x04	; 4
    3970:	b6 95       	lsr	r27
    3972:	a7 95       	ror	r26
    3974:	97 95       	ror	r25
    3976:	87 95       	ror	r24
    3978:	5a 95       	dec	r21
    397a:	d1 f7       	brne	.-12     	; 0x3970 <calibrateSensors+0x18e>
    397c:	9c 01       	movw	r18, r24
    397e:	80 91 b7 03 	lds	r24, 0x03B7
    3982:	90 91 b8 03 	lds	r25, 0x03B8
    3986:	a0 91 b9 03 	lds	r26, 0x03B9
    398a:	b0 91 ba 03 	lds	r27, 0x03BA
    398e:	44 e0       	ldi	r20, 0x04	; 4
    3990:	b6 95       	lsr	r27
    3992:	a7 95       	ror	r26
    3994:	97 95       	ror	r25
    3996:	87 95       	ror	r24
    3998:	4a 95       	dec	r20
    399a:	d1 f7       	brne	.-12     	; 0x3990 <calibrateSensors+0x1ae>
    399c:	bc 01       	movw	r22, r24
    399e:	80 91 bb 03 	lds	r24, 0x03BB
    39a2:	90 91 bc 03 	lds	r25, 0x03BC
    39a6:	a0 91 bd 03 	lds	r26, 0x03BD
    39aa:	b0 91 be 03 	lds	r27, 0x03BE
    39ae:	f4 e0       	ldi	r31, 0x04	; 4
    39b0:	b6 95       	lsr	r27
    39b2:	a7 95       	ror	r26
    39b4:	97 95       	ror	r25
    39b6:	87 95       	ror	r24
    39b8:	fa 95       	dec	r31
    39ba:	d1 f7       	brne	.-12     	; 0x39b0 <calibrateSensors+0x1ce>
    39bc:	ac 01       	movw	r20, r24
    39be:	80 91 af 03 	lds	r24, 0x03AF
    39c2:	90 91 b0 03 	lds	r25, 0x03B0
    39c6:	a0 91 b1 03 	lds	r26, 0x03B1
    39ca:	b0 91 b2 03 	lds	r27, 0x03B2
    39ce:	e4 e0       	ldi	r30, 0x04	; 4
    39d0:	b6 95       	lsr	r27
    39d2:	a7 95       	ror	r26
    39d4:	97 95       	ror	r25
    39d6:	87 95       	ror	r24
    39d8:	ea 95       	dec	r30
    39da:	d1 f7       	brne	.-12     	; 0x39d0 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    39dc:	80 50       	subi	r24, 0x00	; 0
    39de:	92 40       	sbci	r25, 0x02	; 2
    39e0:	90 93 88 03 	sts	0x0388, r25
    39e4:	80 93 87 03 	sts	0x0387, r24
    39e8:	20 50       	subi	r18, 0x00	; 0
    39ea:	32 40       	sbci	r19, 0x02	; 2
    39ec:	30 93 8a 03 	sts	0x038A, r19
    39f0:	20 93 89 03 	sts	0x0389, r18
    39f4:	60 50       	subi	r22, 0x00	; 0
    39f6:	72 40       	sbci	r23, 0x02	; 2
    39f8:	70 93 8c 03 	sts	0x038C, r23
    39fc:	60 93 8b 03 	sts	0x038B, r22
    3a00:	40 50       	subi	r20, 0x00	; 0
    3a02:	52 40       	sbci	r21, 0x02	; 2
    3a04:	50 93 8e 03 	sts	0x038E, r21
    3a08:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    3a0c:	80 91 16 04 	lds	r24, 0x0416
    3a10:	90 91 17 04 	lds	r25, 0x0417
    3a14:	95 95       	asr	r25
    3a16:	87 95       	ror	r24
    3a18:	95 95       	asr	r25
    3a1a:	87 95       	ror	r24
    3a1c:	95 95       	asr	r25
    3a1e:	87 95       	ror	r24
    3a20:	95 95       	asr	r25
    3a22:	87 95       	ror	r24
    3a24:	90 93 11 04 	sts	0x0411, r25
    3a28:	80 93 10 04 	sts	0x0410, r24
			accOffsetY = accOffsetYSum>>4;
    3a2c:	80 91 18 04 	lds	r24, 0x0418
    3a30:	90 91 19 04 	lds	r25, 0x0419
    3a34:	95 95       	asr	r25
    3a36:	87 95       	ror	r24
    3a38:	95 95       	asr	r25
    3a3a:	87 95       	ror	r24
    3a3c:	95 95       	asr	r25
    3a3e:	87 95       	ror	r24
    3a40:	95 95       	asr	r25
    3a42:	87 95       	ror	r24
    3a44:	90 93 13 04 	sts	0x0413, r25
    3a48:	80 93 12 04 	sts	0x0412, r24
			accOffsetZ = accOffsetZSum>>4;
    3a4c:	80 91 1a 04 	lds	r24, 0x041A
    3a50:	90 91 1b 04 	lds	r25, 0x041B
    3a54:	95 95       	asr	r25
    3a56:	87 95       	ror	r24
    3a58:	95 95       	asr	r25
    3a5a:	87 95       	ror	r24
    3a5c:	95 95       	asr	r25
    3a5e:	87 95       	ror	r24
    3a60:	95 95       	asr	r25
    3a62:	87 95       	ror	r24
    3a64:	90 93 15 04 	sts	0x0415, r25
    3a68:	80 93 14 04 	sts	0x0414, r24

			startCalibration = 0;
    3a6c:	10 92 53 04 	sts	0x0453, r1

		}

	}

	pwm_red = 255;
    3a70:	8f ef       	ldi	r24, 0xFF	; 255
    3a72:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3a76:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3a7a:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3a7e:	0e 94 c8 19 	call	0x3390	; 0x3390 <updateRedLed>
	updateGreenLed(pwm_green);
    3a82:	80 91 0d 02 	lds	r24, 0x020D
    3a86:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <updateGreenLed>
	updateBlueLed(pwm_blue);
    3a8a:	80 91 0e 02 	lds	r24, 0x020E
    3a8e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <updateBlueLed>

}
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3a98:	80 91 c6 03 	lds	r24, 0x03C6
    3a9c:	88 23       	and	r24, r24
    3a9e:	09 f4       	brne	.+2      	; 0x3aa2 <calibrateSensors+0x2c0>
    3aa0:	86 c1       	rjmp	.+780    	; 0x3dae <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3aa2:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    3aa6:	21 15       	cp	r18, r1
    3aa8:	31 05       	cpc	r19, r1
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <calibrateSensors+0x2cc>
    3aac:	86 c1       	rjmp	.+780    	; 0x3dba <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3aae:	80 91 5f 03 	lds	r24, 0x035F
    3ab2:	90 91 60 03 	lds	r25, 0x0360
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	97 fd       	sbrc	r25, 7
    3aba:	a0 95       	com	r26
    3abc:	ba 2f       	mov	r27, r26
    3abe:	40 91 8f 03 	lds	r20, 0x038F
    3ac2:	50 91 90 03 	lds	r21, 0x0390
    3ac6:	60 91 91 03 	lds	r22, 0x0391
    3aca:	70 91 92 03 	lds	r23, 0x0392
    3ace:	84 0f       	add	r24, r20
    3ad0:	95 1f       	adc	r25, r21
    3ad2:	a6 1f       	adc	r26, r22
    3ad4:	b7 1f       	adc	r27, r23
    3ad6:	80 93 8f 03 	sts	0x038F, r24
    3ada:	90 93 90 03 	sts	0x0390, r25
    3ade:	a0 93 91 03 	sts	0x0391, r26
    3ae2:	b0 93 92 03 	sts	0x0392, r27
    3ae6:	80 91 61 03 	lds	r24, 0x0361
    3aea:	90 91 62 03 	lds	r25, 0x0362
    3aee:	aa 27       	eor	r26, r26
    3af0:	97 fd       	sbrc	r25, 7
    3af2:	a0 95       	com	r26
    3af4:	ba 2f       	mov	r27, r26
    3af6:	40 91 93 03 	lds	r20, 0x0393
    3afa:	50 91 94 03 	lds	r21, 0x0394
    3afe:	60 91 95 03 	lds	r22, 0x0395
    3b02:	70 91 96 03 	lds	r23, 0x0396
    3b06:	84 0f       	add	r24, r20
    3b08:	95 1f       	adc	r25, r21
    3b0a:	a6 1f       	adc	r26, r22
    3b0c:	b7 1f       	adc	r27, r23
    3b0e:	80 93 93 03 	sts	0x0393, r24
    3b12:	90 93 94 03 	sts	0x0394, r25
    3b16:	a0 93 95 03 	sts	0x0395, r26
    3b1a:	b0 93 96 03 	sts	0x0396, r27
    3b1e:	80 91 63 03 	lds	r24, 0x0363
    3b22:	90 91 64 03 	lds	r25, 0x0364
    3b26:	aa 27       	eor	r26, r26
    3b28:	97 fd       	sbrc	r25, 7
    3b2a:	a0 95       	com	r26
    3b2c:	ba 2f       	mov	r27, r26
    3b2e:	40 91 97 03 	lds	r20, 0x0397
    3b32:	50 91 98 03 	lds	r21, 0x0398
    3b36:	60 91 99 03 	lds	r22, 0x0399
    3b3a:	70 91 9a 03 	lds	r23, 0x039A
    3b3e:	84 0f       	add	r24, r20
    3b40:	95 1f       	adc	r25, r21
    3b42:	a6 1f       	adc	r26, r22
    3b44:	b7 1f       	adc	r27, r23
    3b46:	80 93 97 03 	sts	0x0397, r24
    3b4a:	90 93 98 03 	sts	0x0398, r25
    3b4e:	a0 93 99 03 	sts	0x0399, r26
    3b52:	b0 93 9a 03 	sts	0x039A, r27
    3b56:	80 91 65 03 	lds	r24, 0x0365
    3b5a:	90 91 66 03 	lds	r25, 0x0366
    3b5e:	aa 27       	eor	r26, r26
    3b60:	97 fd       	sbrc	r25, 7
    3b62:	a0 95       	com	r26
    3b64:	ba 2f       	mov	r27, r26
    3b66:	40 91 9b 03 	lds	r20, 0x039B
    3b6a:	50 91 9c 03 	lds	r21, 0x039C
    3b6e:	60 91 9d 03 	lds	r22, 0x039D
    3b72:	70 91 9e 03 	lds	r23, 0x039E
    3b76:	84 0f       	add	r24, r20
    3b78:	95 1f       	adc	r25, r21
    3b7a:	a6 1f       	adc	r26, r22
    3b7c:	b7 1f       	adc	r27, r23
    3b7e:	80 93 9b 03 	sts	0x039B, r24
    3b82:	90 93 9c 03 	sts	0x039C, r25
    3b86:	a0 93 9d 03 	sts	0x039D, r26
    3b8a:	b0 93 9e 03 	sts	0x039E, r27
    3b8e:	80 91 67 03 	lds	r24, 0x0367
    3b92:	90 91 68 03 	lds	r25, 0x0368
    3b96:	aa 27       	eor	r26, r26
    3b98:	97 fd       	sbrc	r25, 7
    3b9a:	a0 95       	com	r26
    3b9c:	ba 2f       	mov	r27, r26
    3b9e:	40 91 9f 03 	lds	r20, 0x039F
    3ba2:	50 91 a0 03 	lds	r21, 0x03A0
    3ba6:	60 91 a1 03 	lds	r22, 0x03A1
    3baa:	70 91 a2 03 	lds	r23, 0x03A2
    3bae:	84 0f       	add	r24, r20
    3bb0:	95 1f       	adc	r25, r21
    3bb2:	a6 1f       	adc	r26, r22
    3bb4:	b7 1f       	adc	r27, r23
    3bb6:	80 93 9f 03 	sts	0x039F, r24
    3bba:	90 93 a0 03 	sts	0x03A0, r25
    3bbe:	a0 93 a1 03 	sts	0x03A1, r26
    3bc2:	b0 93 a2 03 	sts	0x03A2, r27
    3bc6:	80 91 69 03 	lds	r24, 0x0369
    3bca:	90 91 6a 03 	lds	r25, 0x036A
    3bce:	aa 27       	eor	r26, r26
    3bd0:	97 fd       	sbrc	r25, 7
    3bd2:	a0 95       	com	r26
    3bd4:	ba 2f       	mov	r27, r26
    3bd6:	40 91 a3 03 	lds	r20, 0x03A3
    3bda:	50 91 a4 03 	lds	r21, 0x03A4
    3bde:	60 91 a5 03 	lds	r22, 0x03A5
    3be2:	70 91 a6 03 	lds	r23, 0x03A6
    3be6:	84 0f       	add	r24, r20
    3be8:	95 1f       	adc	r25, r21
    3bea:	a6 1f       	adc	r26, r22
    3bec:	b7 1f       	adc	r27, r23
    3bee:	80 93 a3 03 	sts	0x03A3, r24
    3bf2:	90 93 a4 03 	sts	0x03A4, r25
    3bf6:	a0 93 a5 03 	sts	0x03A5, r26
    3bfa:	b0 93 a6 03 	sts	0x03A6, r27
    3bfe:	80 91 6b 03 	lds	r24, 0x036B
    3c02:	90 91 6c 03 	lds	r25, 0x036C
    3c06:	aa 27       	eor	r26, r26
    3c08:	97 fd       	sbrc	r25, 7
    3c0a:	a0 95       	com	r26
    3c0c:	ba 2f       	mov	r27, r26
    3c0e:	40 91 a7 03 	lds	r20, 0x03A7
    3c12:	50 91 a8 03 	lds	r21, 0x03A8
    3c16:	60 91 a9 03 	lds	r22, 0x03A9
    3c1a:	70 91 aa 03 	lds	r23, 0x03AA
    3c1e:	84 0f       	add	r24, r20
    3c20:	95 1f       	adc	r25, r21
    3c22:	a6 1f       	adc	r26, r22
    3c24:	b7 1f       	adc	r27, r23
    3c26:	80 93 a7 03 	sts	0x03A7, r24
    3c2a:	90 93 a8 03 	sts	0x03A8, r25
    3c2e:	a0 93 a9 03 	sts	0x03A9, r26
    3c32:	b0 93 aa 03 	sts	0x03AA, r27
    3c36:	80 91 6d 03 	lds	r24, 0x036D
    3c3a:	90 91 6e 03 	lds	r25, 0x036E
    3c3e:	aa 27       	eor	r26, r26
    3c40:	97 fd       	sbrc	r25, 7
    3c42:	a0 95       	com	r26
    3c44:	ba 2f       	mov	r27, r26
    3c46:	40 91 ab 03 	lds	r20, 0x03AB
    3c4a:	50 91 ac 03 	lds	r21, 0x03AC
    3c4e:	60 91 ad 03 	lds	r22, 0x03AD
    3c52:	70 91 ae 03 	lds	r23, 0x03AE
    3c56:	84 0f       	add	r24, r20
    3c58:	95 1f       	adc	r25, r21
    3c5a:	a6 1f       	adc	r26, r22
    3c5c:	b7 1f       	adc	r27, r23
    3c5e:	80 93 ab 03 	sts	0x03AB, r24
    3c62:	90 93 ac 03 	sts	0x03AC, r25
    3c66:	a0 93 ad 03 	sts	0x03AD, r26
    3c6a:	b0 93 ae 03 	sts	0x03AE, r27
    3c6e:	80 91 6f 03 	lds	r24, 0x036F
    3c72:	90 91 70 03 	lds	r25, 0x0370
    3c76:	aa 27       	eor	r26, r26
    3c78:	97 fd       	sbrc	r25, 7
    3c7a:	a0 95       	com	r26
    3c7c:	ba 2f       	mov	r27, r26
    3c7e:	40 91 af 03 	lds	r20, 0x03AF
    3c82:	50 91 b0 03 	lds	r21, 0x03B0
    3c86:	60 91 b1 03 	lds	r22, 0x03B1
    3c8a:	70 91 b2 03 	lds	r23, 0x03B2
    3c8e:	84 0f       	add	r24, r20
    3c90:	95 1f       	adc	r25, r21
    3c92:	a6 1f       	adc	r26, r22
    3c94:	b7 1f       	adc	r27, r23
    3c96:	80 93 af 03 	sts	0x03AF, r24
    3c9a:	90 93 b0 03 	sts	0x03B0, r25
    3c9e:	a0 93 b1 03 	sts	0x03B1, r26
    3ca2:	b0 93 b2 03 	sts	0x03B2, r27
    3ca6:	80 91 71 03 	lds	r24, 0x0371
    3caa:	90 91 72 03 	lds	r25, 0x0372
    3cae:	aa 27       	eor	r26, r26
    3cb0:	97 fd       	sbrc	r25, 7
    3cb2:	a0 95       	com	r26
    3cb4:	ba 2f       	mov	r27, r26
    3cb6:	40 91 b3 03 	lds	r20, 0x03B3
    3cba:	50 91 b4 03 	lds	r21, 0x03B4
    3cbe:	60 91 b5 03 	lds	r22, 0x03B5
    3cc2:	70 91 b6 03 	lds	r23, 0x03B6
    3cc6:	84 0f       	add	r24, r20
    3cc8:	95 1f       	adc	r25, r21
    3cca:	a6 1f       	adc	r26, r22
    3ccc:	b7 1f       	adc	r27, r23
    3cce:	80 93 b3 03 	sts	0x03B3, r24
    3cd2:	90 93 b4 03 	sts	0x03B4, r25
    3cd6:	a0 93 b5 03 	sts	0x03B5, r26
    3cda:	b0 93 b6 03 	sts	0x03B6, r27
    3cde:	80 91 73 03 	lds	r24, 0x0373
    3ce2:	90 91 74 03 	lds	r25, 0x0374
    3ce6:	aa 27       	eor	r26, r26
    3ce8:	97 fd       	sbrc	r25, 7
    3cea:	a0 95       	com	r26
    3cec:	ba 2f       	mov	r27, r26
    3cee:	40 91 b7 03 	lds	r20, 0x03B7
    3cf2:	50 91 b8 03 	lds	r21, 0x03B8
    3cf6:	60 91 b9 03 	lds	r22, 0x03B9
    3cfa:	70 91 ba 03 	lds	r23, 0x03BA
    3cfe:	84 0f       	add	r24, r20
    3d00:	95 1f       	adc	r25, r21
    3d02:	a6 1f       	adc	r26, r22
    3d04:	b7 1f       	adc	r27, r23
    3d06:	80 93 b7 03 	sts	0x03B7, r24
    3d0a:	90 93 b8 03 	sts	0x03B8, r25
    3d0e:	a0 93 b9 03 	sts	0x03B9, r26
    3d12:	b0 93 ba 03 	sts	0x03BA, r27
    3d16:	80 91 75 03 	lds	r24, 0x0375
    3d1a:	90 91 76 03 	lds	r25, 0x0376
    3d1e:	aa 27       	eor	r26, r26
    3d20:	97 fd       	sbrc	r25, 7
    3d22:	a0 95       	com	r26
    3d24:	ba 2f       	mov	r27, r26
    3d26:	40 91 bb 03 	lds	r20, 0x03BB
    3d2a:	50 91 bc 03 	lds	r21, 0x03BC
    3d2e:	60 91 bd 03 	lds	r22, 0x03BD
    3d32:	70 91 be 03 	lds	r23, 0x03BE
    3d36:	84 0f       	add	r24, r20
    3d38:	95 1f       	adc	r25, r21
    3d3a:	a6 1f       	adc	r26, r22
    3d3c:	b7 1f       	adc	r27, r23
    3d3e:	80 93 bb 03 	sts	0x03BB, r24
    3d42:	90 93 bc 03 	sts	0x03BC, r25
    3d46:	a0 93 bd 03 	sts	0x03BD, r26
    3d4a:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    3d4e:	80 91 16 04 	lds	r24, 0x0416
    3d52:	90 91 17 04 	lds	r25, 0x0417
    3d56:	40 91 0a 04 	lds	r20, 0x040A
    3d5a:	50 91 0b 04 	lds	r21, 0x040B
    3d5e:	84 0f       	add	r24, r20
    3d60:	95 1f       	adc	r25, r21
    3d62:	90 93 17 04 	sts	0x0417, r25
    3d66:	80 93 16 04 	sts	0x0416, r24
				accOffsetYSum += accY;
    3d6a:	80 91 18 04 	lds	r24, 0x0418
    3d6e:	90 91 19 04 	lds	r25, 0x0419
    3d72:	40 91 0c 04 	lds	r20, 0x040C
    3d76:	50 91 0d 04 	lds	r21, 0x040D
    3d7a:	84 0f       	add	r24, r20
    3d7c:	95 1f       	adc	r25, r21
    3d7e:	90 93 19 04 	sts	0x0419, r25
    3d82:	80 93 18 04 	sts	0x0418, r24
				accOffsetZSum += accZ;
    3d86:	80 91 1a 04 	lds	r24, 0x041A
    3d8a:	90 91 1b 04 	lds	r25, 0x041B
    3d8e:	40 91 0e 04 	lds	r20, 0x040E
    3d92:	50 91 0f 04 	lds	r21, 0x040F
    3d96:	84 0f       	add	r24, r20
    3d98:	95 1f       	adc	r25, r21
    3d9a:	90 93 1b 04 	sts	0x041B, r25
    3d9e:	80 93 1a 04 	sts	0x041A, r24

				calibrationCycle++;
    3da2:	2f 5f       	subi	r18, 0xFF	; 255
    3da4:	3f 4f       	sbci	r19, 0xFF	; 255
    3da6:	30 93 23 04 	sts	0x0423, r19
    3daa:	20 93 22 04 	sts	0x0422, r18
    3dae:	80 91 53 04 	lds	r24, 0x0453
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    3db2:	88 23       	and	r24, r24
    3db4:	09 f0       	breq	.+2      	; 0x3db8 <calibrateSensors+0x5d6>
    3db6:	31 cd       	rjmp	.-1438   	; 0x381a <calibrateSensors+0x38>
    3db8:	5b ce       	rjmp	.-842    	; 0x3a70 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3dba:	10 92 8f 03 	sts	0x038F, r1
    3dbe:	10 92 90 03 	sts	0x0390, r1
    3dc2:	10 92 91 03 	sts	0x0391, r1
    3dc6:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    3dca:	10 92 78 03 	sts	0x0378, r1
    3dce:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3dd2:	10 92 93 03 	sts	0x0393, r1
    3dd6:	10 92 94 03 	sts	0x0394, r1
    3dda:	10 92 95 03 	sts	0x0395, r1
    3dde:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    3de2:	10 92 7a 03 	sts	0x037A, r1
    3de6:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3dea:	10 92 97 03 	sts	0x0397, r1
    3dee:	10 92 98 03 	sts	0x0398, r1
    3df2:	10 92 99 03 	sts	0x0399, r1
    3df6:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    3dfa:	10 92 7c 03 	sts	0x037C, r1
    3dfe:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e02:	10 92 9b 03 	sts	0x039B, r1
    3e06:	10 92 9c 03 	sts	0x039C, r1
    3e0a:	10 92 9d 03 	sts	0x039D, r1
    3e0e:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    3e12:	10 92 7e 03 	sts	0x037E, r1
    3e16:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e1a:	10 92 9f 03 	sts	0x039F, r1
    3e1e:	10 92 a0 03 	sts	0x03A0, r1
    3e22:	10 92 a1 03 	sts	0x03A1, r1
    3e26:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    3e2a:	10 92 80 03 	sts	0x0380, r1
    3e2e:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e32:	10 92 a3 03 	sts	0x03A3, r1
    3e36:	10 92 a4 03 	sts	0x03A4, r1
    3e3a:	10 92 a5 03 	sts	0x03A5, r1
    3e3e:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    3e42:	10 92 82 03 	sts	0x0382, r1
    3e46:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e4a:	10 92 a7 03 	sts	0x03A7, r1
    3e4e:	10 92 a8 03 	sts	0x03A8, r1
    3e52:	10 92 a9 03 	sts	0x03A9, r1
    3e56:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    3e5a:	10 92 84 03 	sts	0x0384, r1
    3e5e:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e62:	10 92 ab 03 	sts	0x03AB, r1
    3e66:	10 92 ac 03 	sts	0x03AC, r1
    3e6a:	10 92 ad 03 	sts	0x03AD, r1
    3e6e:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    3e72:	10 92 86 03 	sts	0x0386, r1
    3e76:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e7a:	10 92 af 03 	sts	0x03AF, r1
    3e7e:	10 92 b0 03 	sts	0x03B0, r1
    3e82:	10 92 b1 03 	sts	0x03B1, r1
    3e86:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    3e8a:	10 92 88 03 	sts	0x0388, r1
    3e8e:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e92:	10 92 b3 03 	sts	0x03B3, r1
    3e96:	10 92 b4 03 	sts	0x03B4, r1
    3e9a:	10 92 b5 03 	sts	0x03B5, r1
    3e9e:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    3ea2:	10 92 8a 03 	sts	0x038A, r1
    3ea6:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3eaa:	10 92 b7 03 	sts	0x03B7, r1
    3eae:	10 92 b8 03 	sts	0x03B8, r1
    3eb2:	10 92 b9 03 	sts	0x03B9, r1
    3eb6:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    3eba:	10 92 8c 03 	sts	0x038C, r1
    3ebe:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3ec2:	10 92 bb 03 	sts	0x03BB, r1
    3ec6:	10 92 bc 03 	sts	0x03BC, r1
    3eca:	10 92 bd 03 	sts	0x03BD, r1
    3ece:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    3ed2:	10 92 8e 03 	sts	0x038E, r1
    3ed6:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    3eda:	10 92 17 04 	sts	0x0417, r1
    3ede:	10 92 16 04 	sts	0x0416, r1
					accOffsetYSum = 0;
    3ee2:	10 92 19 04 	sts	0x0419, r1
    3ee6:	10 92 18 04 	sts	0x0418, r1
					accOffsetZSum = 0;
    3eea:	10 92 1b 04 	sts	0x041B, r1
    3eee:	10 92 1a 04 	sts	0x041A, r1

					calibrationCycle++;
    3ef2:	d0 93 23 04 	sts	0x0423, r29
    3ef6:	c0 93 22 04 	sts	0x0422, r28
    3efa:	80 91 53 04 	lds	r24, 0x0453

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    3efe:	59 cf       	rjmp	.-334    	; 0x3db2 <calibrateSensors+0x5d0>

00003f00 <computeAngle>:

	}

}

void computeAngle() {
    3f00:	ef 92       	push	r14
    3f02:	ff 92       	push	r15
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3f08:	80 91 0e 04 	lds	r24, 0x040E
    3f0c:	90 91 0f 04 	lds	r25, 0x040F
    3f10:	97 fd       	sbrc	r25, 7
    3f12:	5b c0       	rjmp	.+182    	; 0x3fca <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    3f14:	80 31       	cpi	r24, 0x10	; 16
    3f16:	91 05       	cpc	r25, r1
    3f18:	08 f0       	brcs	.+2      	; 0x3f1c <computeAngle+0x1c>
    3f1a:	42 c0       	rjmp	.+132    	; 0x3fa0 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    3f22:	90 91 14 02 	lds	r25, 0x0214
    3f26:	98 17       	cp	r25, r24
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <computeAngle+0x2c>
    3f2a:	42 c0       	rjmp	.+132    	; 0x3fb0 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    3f2c:	10 92 1e 04 	sts	0x041E, r1
	}
	prevPosition = currPosition;
    3f30:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    3f34:	60 91 0a 04 	lds	r22, 0x040A
    3f38:	70 91 0b 04 	lds	r23, 0x040B
    3f3c:	88 27       	eor	r24, r24
    3f3e:	77 fd       	sbrc	r23, 7
    3f40:	80 95       	com	r24
    3f42:	98 2f       	mov	r25, r24
    3f44:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <__floatsisf>
    3f48:	7b 01       	movw	r14, r22
    3f4a:	8c 01       	movw	r16, r24
    3f4c:	60 91 0c 04 	lds	r22, 0x040C
    3f50:	70 91 0d 04 	lds	r23, 0x040D
    3f54:	88 27       	eor	r24, r24
    3f56:	77 fd       	sbrc	r23, 7
    3f58:	80 95       	com	r24
    3f5a:	98 2f       	mov	r25, r24
    3f5c:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <__floatsisf>
    3f60:	9b 01       	movw	r18, r22
    3f62:	ac 01       	movw	r20, r24
    3f64:	c8 01       	movw	r24, r16
    3f66:	b7 01       	movw	r22, r14
    3f68:	0e 94 20 24 	call	0x4840	; 0x4840 <atan2>
    3f6c:	21 ee       	ldi	r18, 0xE1	; 225
    3f6e:	3e e2       	ldi	r19, 0x2E	; 46
    3f70:	45 e6       	ldi	r20, 0x65	; 101
    3f72:	52 e4       	ldi	r21, 0x42	; 66
    3f74:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__mulsf3>
    3f78:	0e 94 46 21 	call	0x428c	; 0x428c <__fixsfsi>
    3f7c:	9b 01       	movw	r18, r22
    3f7e:	70 93 1d 04 	sts	0x041D, r23
    3f82:	60 93 1c 04 	sts	0x041C, r22

	if(currentAngle < 0) {
    3f86:	77 ff       	sbrs	r23, 7
    3f88:	06 c0       	rjmp	.+12     	; 0x3f96 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    3f8a:	28 59       	subi	r18, 0x98	; 152
    3f8c:	3e 4f       	sbci	r19, 0xFE	; 254
    3f8e:	30 93 1d 04 	sts	0x041D, r19
    3f92:	20 93 1c 04 	sts	0x041C, r18
	}

}
    3f96:	1f 91       	pop	r17
    3f98:	0f 91       	pop	r16
    3f9a:	ff 90       	pop	r15
    3f9c:	ef 90       	pop	r14
    3f9e:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    3fa0:	10 92 15 02 	sts	0x0215, r1
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    3fa6:	90 91 14 02 	lds	r25, 0x0214
    3faa:	98 17       	cp	r25, r24
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <computeAngle+0xb0>
    3fae:	be cf       	rjmp	.-132    	; 0x3f2c <computeAngle+0x2c>
		timesInSamePos++;
    3fb0:	90 91 1e 04 	lds	r25, 0x041E
    3fb4:	9f 5f       	subi	r25, 0xFF	; 255
    3fb6:	90 93 1e 04 	sts	0x041E, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    3fba:	95 30       	cpi	r25, 0x05	; 5
    3fbc:	08 f4       	brcc	.+2      	; 0x3fc0 <computeAngle+0xc0>
    3fbe:	b8 cf       	rjmp	.-144    	; 0x3f30 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    3fc0:	10 92 1e 04 	sts	0x041E, r1
			robotPosition = currPosition;
    3fc4:	80 93 16 02 	sts	0x0216, r24
    3fc8:	b3 cf       	rjmp	.-154    	; 0x3f30 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3fca:	90 95       	com	r25
    3fcc:	81 95       	neg	r24
    3fce:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd0:	a1 cf       	rjmp	.-190    	; 0x3f14 <computeAngle+0x14>

00003fd2 <__mulsf3>:
    3fd2:	a0 e2       	ldi	r26, 0x20	; 32
    3fd4:	b0 e0       	ldi	r27, 0x00	; 0
    3fd6:	ef ee       	ldi	r30, 0xEF	; 239
    3fd8:	ff e1       	ldi	r31, 0x1F	; 31
    3fda:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__prologue_saves__+0x4>
    3fde:	69 83       	std	Y+1, r22	; 0x01
    3fe0:	7a 83       	std	Y+2, r23	; 0x02
    3fe2:	8b 83       	std	Y+3, r24	; 0x03
    3fe4:	9c 83       	std	Y+4, r25	; 0x04
    3fe6:	2d 83       	std	Y+5, r18	; 0x05
    3fe8:	3e 83       	std	Y+6, r19	; 0x06
    3fea:	4f 83       	std	Y+7, r20	; 0x07
    3fec:	58 87       	std	Y+8, r21	; 0x08
    3fee:	99 e0       	ldi	r25, 0x09	; 9
    3ff0:	e9 2e       	mov	r14, r25
    3ff2:	f1 2c       	mov	r15, r1
    3ff4:	ec 0e       	add	r14, r28
    3ff6:	fd 1e       	adc	r15, r29
    3ff8:	b7 01       	movw	r22, r14
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	01 96       	adiw	r24, 0x01	; 1
    3ffe:	0e 94 c6 22 	call	0x458c	; 0x458c <__unpack_f>
    4002:	8e 01       	movw	r16, r28
    4004:	0f 5e       	subi	r16, 0xEF	; 239
    4006:	1f 4f       	sbci	r17, 0xFF	; 255
    4008:	b8 01       	movw	r22, r16
    400a:	ce 01       	movw	r24, r28
    400c:	05 96       	adiw	r24, 0x05	; 5
    400e:	0e 94 c6 22 	call	0x458c	; 0x458c <__unpack_f>
    4012:	99 85       	ldd	r25, Y+9	; 0x09
    4014:	92 30       	cpi	r25, 0x02	; 2
    4016:	88 f0       	brcs	.+34     	; 0x403a <__mulsf3+0x68>
    4018:	89 89       	ldd	r24, Y+17	; 0x11
    401a:	82 30       	cpi	r24, 0x02	; 2
    401c:	c0 f0       	brcs	.+48     	; 0x404e <__mulsf3+0x7c>
    401e:	94 30       	cpi	r25, 0x04	; 4
    4020:	19 f4       	brne	.+6      	; 0x4028 <__mulsf3+0x56>
    4022:	82 30       	cpi	r24, 0x02	; 2
    4024:	29 f0       	breq	.+10     	; 0x4030 <__mulsf3+0x5e>
    4026:	09 c0       	rjmp	.+18     	; 0x403a <__mulsf3+0x68>
    4028:	84 30       	cpi	r24, 0x04	; 4
    402a:	29 f4       	brne	.+10     	; 0x4036 <__mulsf3+0x64>
    402c:	92 30       	cpi	r25, 0x02	; 2
    402e:	79 f4       	brne	.+30     	; 0x404e <__mulsf3+0x7c>
    4030:	67 e1       	ldi	r22, 0x17	; 23
    4032:	72 e0       	ldi	r23, 0x02	; 2
    4034:	c6 c0       	rjmp	.+396    	; 0x41c2 <__mulsf3+0x1f0>
    4036:	92 30       	cpi	r25, 0x02	; 2
    4038:	41 f4       	brne	.+16     	; 0x404a <__mulsf3+0x78>
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	9a 85       	ldd	r25, Y+10	; 0x0a
    403e:	8a 89       	ldd	r24, Y+18	; 0x12
    4040:	98 13       	cpse	r25, r24
    4042:	21 e0       	ldi	r18, 0x01	; 1
    4044:	2a 87       	std	Y+10, r18	; 0x0a
    4046:	b7 01       	movw	r22, r14
    4048:	bc c0       	rjmp	.+376    	; 0x41c2 <__mulsf3+0x1f0>
    404a:	82 30       	cpi	r24, 0x02	; 2
    404c:	41 f4       	brne	.+16     	; 0x405e <__mulsf3+0x8c>
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	9a 85       	ldd	r25, Y+10	; 0x0a
    4052:	8a 89       	ldd	r24, Y+18	; 0x12
    4054:	98 13       	cpse	r25, r24
    4056:	21 e0       	ldi	r18, 0x01	; 1
    4058:	2a 8b       	std	Y+18, r18	; 0x12
    405a:	b8 01       	movw	r22, r16
    405c:	b2 c0       	rjmp	.+356    	; 0x41c2 <__mulsf3+0x1f0>
    405e:	cd 84       	ldd	r12, Y+13	; 0x0d
    4060:	de 84       	ldd	r13, Y+14	; 0x0e
    4062:	ef 84       	ldd	r14, Y+15	; 0x0f
    4064:	f8 88       	ldd	r15, Y+16	; 0x10
    4066:	0d 89       	ldd	r16, Y+21	; 0x15
    4068:	1e 89       	ldd	r17, Y+22	; 0x16
    406a:	2f 89       	ldd	r18, Y+23	; 0x17
    406c:	38 8d       	ldd	r19, Y+24	; 0x18
    406e:	88 24       	eor	r8, r8
    4070:	99 24       	eor	r9, r9
    4072:	54 01       	movw	r10, r8
    4074:	40 e0       	ldi	r20, 0x00	; 0
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	44 24       	eor	r4, r4
    407e:	55 24       	eor	r5, r5
    4080:	32 01       	movw	r6, r4
    4082:	e0 e0       	ldi	r30, 0x00	; 0
    4084:	f0 e0       	ldi	r31, 0x00	; 0
    4086:	c6 01       	movw	r24, r12
    4088:	81 70       	andi	r24, 0x01	; 1
    408a:	90 70       	andi	r25, 0x00	; 0
    408c:	89 2b       	or	r24, r25
    408e:	d9 f0       	breq	.+54     	; 0x40c6 <__mulsf3+0xf4>
    4090:	80 0e       	add	r8, r16
    4092:	91 1e       	adc	r9, r17
    4094:	a2 1e       	adc	r10, r18
    4096:	b3 1e       	adc	r11, r19
    4098:	db 01       	movw	r26, r22
    409a:	ca 01       	movw	r24, r20
    409c:	84 0d       	add	r24, r4
    409e:	95 1d       	adc	r25, r5
    40a0:	a6 1d       	adc	r26, r6
    40a2:	b7 1d       	adc	r27, r7
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	80 16       	cp	r8, r16
    40ae:	91 06       	cpc	r9, r17
    40b0:	a2 06       	cpc	r10, r18
    40b2:	b3 06       	cpc	r11, r19
    40b4:	20 f4       	brcc	.+8      	; 0x40be <__mulsf3+0xec>
    40b6:	41 e0       	ldi	r20, 0x01	; 1
    40b8:	50 e0       	ldi	r21, 0x00	; 0
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	70 e0       	ldi	r23, 0x00	; 0
    40be:	48 0f       	add	r20, r24
    40c0:	59 1f       	adc	r21, r25
    40c2:	6a 1f       	adc	r22, r26
    40c4:	7b 1f       	adc	r23, r27
    40c6:	44 0c       	add	r4, r4
    40c8:	55 1c       	adc	r5, r5
    40ca:	66 1c       	adc	r6, r6
    40cc:	77 1c       	adc	r7, r7
    40ce:	37 ff       	sbrs	r19, 7
    40d0:	08 c0       	rjmp	.+16     	; 0x40e2 <__mulsf3+0x110>
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	a0 e0       	ldi	r26, 0x00	; 0
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	48 2a       	or	r4, r24
    40dc:	59 2a       	or	r5, r25
    40de:	6a 2a       	or	r6, r26
    40e0:	7b 2a       	or	r7, r27
    40e2:	31 96       	adiw	r30, 0x01	; 1
    40e4:	e0 32       	cpi	r30, 0x20	; 32
    40e6:	f1 05       	cpc	r31, r1
    40e8:	49 f0       	breq	.+18     	; 0x40fc <__mulsf3+0x12a>
    40ea:	00 0f       	add	r16, r16
    40ec:	11 1f       	adc	r17, r17
    40ee:	22 1f       	adc	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	f6 94       	lsr	r15
    40f4:	e7 94       	ror	r14
    40f6:	d7 94       	ror	r13
    40f8:	c7 94       	ror	r12
    40fa:	c5 cf       	rjmp	.-118    	; 0x4086 <__mulsf3+0xb4>
    40fc:	8b 89       	ldd	r24, Y+19	; 0x13
    40fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4100:	2b 85       	ldd	r18, Y+11	; 0x0b
    4102:	3c 85       	ldd	r19, Y+12	; 0x0c
    4104:	82 0f       	add	r24, r18
    4106:	93 1f       	adc	r25, r19
    4108:	02 96       	adiw	r24, 0x02	; 2
    410a:	9c 8f       	std	Y+28, r25	; 0x1c
    410c:	8b 8f       	std	Y+27, r24	; 0x1b
    410e:	1a 8e       	std	Y+26, r1	; 0x1a
    4110:	9a 85       	ldd	r25, Y+10	; 0x0a
    4112:	8a 89       	ldd	r24, Y+18	; 0x12
    4114:	98 17       	cp	r25, r24
    4116:	11 f0       	breq	.+4      	; 0x411c <__mulsf3+0x14a>
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	8a 8f       	std	Y+26, r24	; 0x1a
    411c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    411e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4120:	17 c0       	rjmp	.+46     	; 0x4150 <__mulsf3+0x17e>
    4122:	ca 01       	movw	r24, r20
    4124:	81 70       	andi	r24, 0x01	; 1
    4126:	90 70       	andi	r25, 0x00	; 0
    4128:	89 2b       	or	r24, r25
    412a:	61 f0       	breq	.+24     	; 0x4144 <__mulsf3+0x172>
    412c:	b6 94       	lsr	r11
    412e:	a7 94       	ror	r10
    4130:	97 94       	ror	r9
    4132:	87 94       	ror	r8
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	a0 e0       	ldi	r26, 0x00	; 0
    413a:	b0 e8       	ldi	r27, 0x80	; 128
    413c:	88 2a       	or	r8, r24
    413e:	99 2a       	or	r9, r25
    4140:	aa 2a       	or	r10, r26
    4142:	bb 2a       	or	r11, r27
    4144:	76 95       	lsr	r23
    4146:	67 95       	ror	r22
    4148:	57 95       	ror	r21
    414a:	47 95       	ror	r20
    414c:	2f 5f       	subi	r18, 0xFF	; 255
    414e:	3f 4f       	sbci	r19, 0xFF	; 255
    4150:	77 fd       	sbrc	r23, 7
    4152:	e7 cf       	rjmp	.-50     	; 0x4122 <__mulsf3+0x150>
    4154:	c9 01       	movw	r24, r18
    4156:	0b c0       	rjmp	.+22     	; 0x416e <__mulsf3+0x19c>
    4158:	44 0f       	add	r20, r20
    415a:	55 1f       	adc	r21, r21
    415c:	66 1f       	adc	r22, r22
    415e:	77 1f       	adc	r23, r23
    4160:	b7 fc       	sbrc	r11, 7
    4162:	41 60       	ori	r20, 0x01	; 1
    4164:	88 0c       	add	r8, r8
    4166:	99 1c       	adc	r9, r9
    4168:	aa 1c       	adc	r10, r10
    416a:	bb 1c       	adc	r11, r11
    416c:	01 97       	sbiw	r24, 0x01	; 1
    416e:	40 30       	cpi	r20, 0x00	; 0
    4170:	a0 e0       	ldi	r26, 0x00	; 0
    4172:	5a 07       	cpc	r21, r26
    4174:	a0 e0       	ldi	r26, 0x00	; 0
    4176:	6a 07       	cpc	r22, r26
    4178:	a0 e4       	ldi	r26, 0x40	; 64
    417a:	7a 07       	cpc	r23, r26
    417c:	68 f3       	brcs	.-38     	; 0x4158 <__mulsf3+0x186>
    417e:	9c 8f       	std	Y+28, r25	; 0x1c
    4180:	8b 8f       	std	Y+27, r24	; 0x1b
    4182:	db 01       	movw	r26, r22
    4184:	ca 01       	movw	r24, r20
    4186:	8f 77       	andi	r24, 0x7F	; 127
    4188:	90 70       	andi	r25, 0x00	; 0
    418a:	a0 70       	andi	r26, 0x00	; 0
    418c:	b0 70       	andi	r27, 0x00	; 0
    418e:	80 34       	cpi	r24, 0x40	; 64
    4190:	91 05       	cpc	r25, r1
    4192:	a1 05       	cpc	r26, r1
    4194:	b1 05       	cpc	r27, r1
    4196:	61 f4       	brne	.+24     	; 0x41b0 <__mulsf3+0x1de>
    4198:	47 fd       	sbrc	r20, 7
    419a:	0a c0       	rjmp	.+20     	; 0x41b0 <__mulsf3+0x1de>
    419c:	81 14       	cp	r8, r1
    419e:	91 04       	cpc	r9, r1
    41a0:	a1 04       	cpc	r10, r1
    41a2:	b1 04       	cpc	r11, r1
    41a4:	29 f0       	breq	.+10     	; 0x41b0 <__mulsf3+0x1de>
    41a6:	40 5c       	subi	r20, 0xC0	; 192
    41a8:	5f 4f       	sbci	r21, 0xFF	; 255
    41aa:	6f 4f       	sbci	r22, 0xFF	; 255
    41ac:	7f 4f       	sbci	r23, 0xFF	; 255
    41ae:	40 78       	andi	r20, 0x80	; 128
    41b0:	4d 8f       	std	Y+29, r20	; 0x1d
    41b2:	5e 8f       	std	Y+30, r21	; 0x1e
    41b4:	6f 8f       	std	Y+31, r22	; 0x1f
    41b6:	78 a3       	std	Y+32, r23	; 0x20
    41b8:	83 e0       	ldi	r24, 0x03	; 3
    41ba:	89 8f       	std	Y+25, r24	; 0x19
    41bc:	be 01       	movw	r22, r28
    41be:	67 5e       	subi	r22, 0xE7	; 231
    41c0:	7f 4f       	sbci	r23, 0xFF	; 255
    41c2:	cb 01       	movw	r24, r22
    41c4:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__pack_f>
    41c8:	e0 e1       	ldi	r30, 0x10	; 16
    41ca:	a0 96       	adiw	r28, 0x20	; 32
    41cc:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <__epilogue_restores__+0x4>

000041d0 <__floatsisf>:
    41d0:	a8 e0       	ldi	r26, 0x08	; 8
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	ee ee       	ldi	r30, 0xEE	; 238
    41d6:	f0 e2       	ldi	r31, 0x20	; 32
    41d8:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x12>
    41dc:	9b 01       	movw	r18, r22
    41de:	ac 01       	movw	r20, r24
    41e0:	83 e0       	ldi	r24, 0x03	; 3
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	da 01       	movw	r26, r20
    41e6:	c9 01       	movw	r24, r18
    41e8:	88 27       	eor	r24, r24
    41ea:	b7 fd       	sbrc	r27, 7
    41ec:	83 95       	inc	r24
    41ee:	99 27       	eor	r25, r25
    41f0:	aa 27       	eor	r26, r26
    41f2:	bb 27       	eor	r27, r27
    41f4:	b8 2e       	mov	r11, r24
    41f6:	21 15       	cp	r18, r1
    41f8:	31 05       	cpc	r19, r1
    41fa:	41 05       	cpc	r20, r1
    41fc:	51 05       	cpc	r21, r1
    41fe:	19 f4       	brne	.+6      	; 0x4206 <__floatsisf+0x36>
    4200:	82 e0       	ldi	r24, 0x02	; 2
    4202:	89 83       	std	Y+1, r24	; 0x01
    4204:	3a c0       	rjmp	.+116    	; 0x427a <__floatsisf+0xaa>
    4206:	88 23       	and	r24, r24
    4208:	a9 f0       	breq	.+42     	; 0x4234 <__floatsisf+0x64>
    420a:	20 30       	cpi	r18, 0x00	; 0
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	38 07       	cpc	r19, r24
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	48 07       	cpc	r20, r24
    4214:	80 e8       	ldi	r24, 0x80	; 128
    4216:	58 07       	cpc	r21, r24
    4218:	29 f4       	brne	.+10     	; 0x4224 <__floatsisf+0x54>
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	70 e0       	ldi	r23, 0x00	; 0
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	9f ec       	ldi	r25, 0xCF	; 207
    4222:	30 c0       	rjmp	.+96     	; 0x4284 <__floatsisf+0xb4>
    4224:	ee 24       	eor	r14, r14
    4226:	ff 24       	eor	r15, r15
    4228:	87 01       	movw	r16, r14
    422a:	e2 1a       	sub	r14, r18
    422c:	f3 0a       	sbc	r15, r19
    422e:	04 0b       	sbc	r16, r20
    4230:	15 0b       	sbc	r17, r21
    4232:	02 c0       	rjmp	.+4      	; 0x4238 <__floatsisf+0x68>
    4234:	79 01       	movw	r14, r18
    4236:	8a 01       	movw	r16, r20
    4238:	8e e1       	ldi	r24, 0x1E	; 30
    423a:	c8 2e       	mov	r12, r24
    423c:	d1 2c       	mov	r13, r1
    423e:	dc 82       	std	Y+4, r13	; 0x04
    4240:	cb 82       	std	Y+3, r12	; 0x03
    4242:	ed 82       	std	Y+5, r14	; 0x05
    4244:	fe 82       	std	Y+6, r15	; 0x06
    4246:	0f 83       	std	Y+7, r16	; 0x07
    4248:	18 87       	std	Y+8, r17	; 0x08
    424a:	c8 01       	movw	r24, r16
    424c:	b7 01       	movw	r22, r14
    424e:	0e 94 99 21 	call	0x4332	; 0x4332 <__clzsi2>
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	18 16       	cp	r1, r24
    4256:	19 06       	cpc	r1, r25
    4258:	84 f4       	brge	.+32     	; 0x427a <__floatsisf+0xaa>
    425a:	08 2e       	mov	r0, r24
    425c:	04 c0       	rjmp	.+8      	; 0x4266 <__floatsisf+0x96>
    425e:	ee 0c       	add	r14, r14
    4260:	ff 1c       	adc	r15, r15
    4262:	00 1f       	adc	r16, r16
    4264:	11 1f       	adc	r17, r17
    4266:	0a 94       	dec	r0
    4268:	d2 f7       	brpl	.-12     	; 0x425e <__floatsisf+0x8e>
    426a:	ed 82       	std	Y+5, r14	; 0x05
    426c:	fe 82       	std	Y+6, r15	; 0x06
    426e:	0f 83       	std	Y+7, r16	; 0x07
    4270:	18 87       	std	Y+8, r17	; 0x08
    4272:	c8 1a       	sub	r12, r24
    4274:	d9 0a       	sbc	r13, r25
    4276:	dc 82       	std	Y+4, r13	; 0x04
    4278:	cb 82       	std	Y+3, r12	; 0x03
    427a:	ba 82       	std	Y+2, r11	; 0x02
    427c:	ce 01       	movw	r24, r28
    427e:	01 96       	adiw	r24, 0x01	; 1
    4280:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__pack_f>
    4284:	e9 e0       	ldi	r30, 0x09	; 9
    4286:	28 96       	adiw	r28, 0x08	; 8
    4288:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x12>

0000428c <__fixsfsi>:
    428c:	ac e0       	ldi	r26, 0x0C	; 12
    428e:	b0 e0       	ldi	r27, 0x00	; 0
    4290:	ec e4       	ldi	r30, 0x4C	; 76
    4292:	f1 e2       	ldi	r31, 0x21	; 33
    4294:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__prologue_saves__+0x20>
    4298:	69 83       	std	Y+1, r22	; 0x01
    429a:	7a 83       	std	Y+2, r23	; 0x02
    429c:	8b 83       	std	Y+3, r24	; 0x03
    429e:	9c 83       	std	Y+4, r25	; 0x04
    42a0:	be 01       	movw	r22, r28
    42a2:	6b 5f       	subi	r22, 0xFB	; 251
    42a4:	7f 4f       	sbci	r23, 0xFF	; 255
    42a6:	ce 01       	movw	r24, r28
    42a8:	01 96       	adiw	r24, 0x01	; 1
    42aa:	0e 94 c6 22 	call	0x458c	; 0x458c <__unpack_f>
    42ae:	8d 81       	ldd	r24, Y+5	; 0x05
    42b0:	82 30       	cpi	r24, 0x02	; 2
    42b2:	a9 f1       	breq	.+106    	; 0x431e <__fixsfsi+0x92>
    42b4:	82 30       	cpi	r24, 0x02	; 2
    42b6:	98 f1       	brcs	.+102    	; 0x431e <__fixsfsi+0x92>
    42b8:	84 30       	cpi	r24, 0x04	; 4
    42ba:	21 f4       	brne	.+8      	; 0x42c4 <__fixsfsi+0x38>
    42bc:	8e 81       	ldd	r24, Y+6	; 0x06
    42be:	88 23       	and	r24, r24
    42c0:	59 f4       	brne	.+22     	; 0x42d8 <__fixsfsi+0x4c>
    42c2:	0f c0       	rjmp	.+30     	; 0x42e2 <__fixsfsi+0x56>
    42c4:	2f 81       	ldd	r18, Y+7	; 0x07
    42c6:	38 85       	ldd	r19, Y+8	; 0x08
    42c8:	37 fd       	sbrc	r19, 7
    42ca:	29 c0       	rjmp	.+82     	; 0x431e <__fixsfsi+0x92>
    42cc:	6e 81       	ldd	r22, Y+6	; 0x06
    42ce:	2f 31       	cpi	r18, 0x1F	; 31
    42d0:	31 05       	cpc	r19, r1
    42d2:	64 f0       	brlt	.+24     	; 0x42ec <__fixsfsi+0x60>
    42d4:	66 23       	and	r22, r22
    42d6:	29 f0       	breq	.+10     	; 0x42e2 <__fixsfsi+0x56>
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	40 e0       	ldi	r20, 0x00	; 0
    42de:	50 e8       	ldi	r21, 0x80	; 128
    42e0:	22 c0       	rjmp	.+68     	; 0x4326 <__fixsfsi+0x9a>
    42e2:	2f ef       	ldi	r18, 0xFF	; 255
    42e4:	3f ef       	ldi	r19, 0xFF	; 255
    42e6:	4f ef       	ldi	r20, 0xFF	; 255
    42e8:	5f e7       	ldi	r21, 0x7F	; 127
    42ea:	1d c0       	rjmp	.+58     	; 0x4326 <__fixsfsi+0x9a>
    42ec:	8e e1       	ldi	r24, 0x1E	; 30
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	82 1b       	sub	r24, r18
    42f2:	93 0b       	sbc	r25, r19
    42f4:	29 85       	ldd	r18, Y+9	; 0x09
    42f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    42f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    42fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    42fc:	04 c0       	rjmp	.+8      	; 0x4306 <__fixsfsi+0x7a>
    42fe:	56 95       	lsr	r21
    4300:	47 95       	ror	r20
    4302:	37 95       	ror	r19
    4304:	27 95       	ror	r18
    4306:	8a 95       	dec	r24
    4308:	d2 f7       	brpl	.-12     	; 0x42fe <__fixsfsi+0x72>
    430a:	66 23       	and	r22, r22
    430c:	61 f0       	breq	.+24     	; 0x4326 <__fixsfsi+0x9a>
    430e:	50 95       	com	r21
    4310:	40 95       	com	r20
    4312:	30 95       	com	r19
    4314:	21 95       	neg	r18
    4316:	3f 4f       	sbci	r19, 0xFF	; 255
    4318:	4f 4f       	sbci	r20, 0xFF	; 255
    431a:	5f 4f       	sbci	r21, 0xFF	; 255
    431c:	04 c0       	rjmp	.+8      	; 0x4326 <__fixsfsi+0x9a>
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e0       	ldi	r20, 0x00	; 0
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	ca 01       	movw	r24, r20
    4328:	b9 01       	movw	r22, r18
    432a:	e2 e0       	ldi	r30, 0x02	; 2
    432c:	2c 96       	adiw	r28, 0x0c	; 12
    432e:	0c 94 a8 23 	jmp	0x4750	; 0x4750 <__epilogue_restores__+0x20>

00004332 <__clzsi2>:
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	9b 01       	movw	r18, r22
    433c:	ac 01       	movw	r20, r24
    433e:	20 30       	cpi	r18, 0x00	; 0
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	38 07       	cpc	r19, r24
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	48 07       	cpc	r20, r24
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	58 07       	cpc	r21, r24
    434c:	80 f4       	brcc	.+32     	; 0x436e <__clzsi2+0x3c>
    434e:	2f 3f       	cpi	r18, 0xFF	; 255
    4350:	31 05       	cpc	r19, r1
    4352:	41 05       	cpc	r20, r1
    4354:	51 05       	cpc	r21, r1
    4356:	09 f0       	breq	.+2      	; 0x435a <__clzsi2+0x28>
    4358:	20 f4       	brcc	.+8      	; 0x4362 <__clzsi2+0x30>
    435a:	ee 24       	eor	r14, r14
    435c:	ff 24       	eor	r15, r15
    435e:	87 01       	movw	r16, r14
    4360:	19 c0       	rjmp	.+50     	; 0x4394 <__clzsi2+0x62>
    4362:	68 e0       	ldi	r22, 0x08	; 8
    4364:	e6 2e       	mov	r14, r22
    4366:	f1 2c       	mov	r15, r1
    4368:	01 2d       	mov	r16, r1
    436a:	11 2d       	mov	r17, r1
    436c:	13 c0       	rjmp	.+38     	; 0x4394 <__clzsi2+0x62>
    436e:	20 30       	cpi	r18, 0x00	; 0
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	38 07       	cpc	r19, r24
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	48 07       	cpc	r20, r24
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	58 07       	cpc	r21, r24
    437c:	30 f4       	brcc	.+12     	; 0x438a <__clzsi2+0x58>
    437e:	90 e1       	ldi	r25, 0x10	; 16
    4380:	e9 2e       	mov	r14, r25
    4382:	f1 2c       	mov	r15, r1
    4384:	01 2d       	mov	r16, r1
    4386:	11 2d       	mov	r17, r1
    4388:	05 c0       	rjmp	.+10     	; 0x4394 <__clzsi2+0x62>
    438a:	88 e1       	ldi	r24, 0x18	; 24
    438c:	e8 2e       	mov	r14, r24
    438e:	f1 2c       	mov	r15, r1
    4390:	01 2d       	mov	r16, r1
    4392:	11 2d       	mov	r17, r1
    4394:	80 e2       	ldi	r24, 0x20	; 32
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	a0 e0       	ldi	r26, 0x00	; 0
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	8e 19       	sub	r24, r14
    439e:	9f 09       	sbc	r25, r15
    43a0:	a0 0b       	sbc	r26, r16
    43a2:	b1 0b       	sbc	r27, r17
    43a4:	04 c0       	rjmp	.+8      	; 0x43ae <__clzsi2+0x7c>
    43a6:	56 95       	lsr	r21
    43a8:	47 95       	ror	r20
    43aa:	37 95       	ror	r19
    43ac:	27 95       	ror	r18
    43ae:	ea 94       	dec	r14
    43b0:	d2 f7       	brpl	.-12     	; 0x43a6 <__clzsi2+0x74>
    43b2:	f9 01       	movw	r30, r18
    43b4:	e1 5e       	subi	r30, 0xE1	; 225
    43b6:	fd 4f       	sbci	r31, 0xFD	; 253
    43b8:	20 81       	ld	r18, Z
    43ba:	82 1b       	sub	r24, r18
    43bc:	91 09       	sbc	r25, r1
    43be:	a1 09       	sbc	r26, r1
    43c0:	b1 09       	sbc	r27, r1
    43c2:	1f 91       	pop	r17
    43c4:	0f 91       	pop	r16
    43c6:	ff 90       	pop	r15
    43c8:	ef 90       	pop	r14
    43ca:	08 95       	ret

000043cc <__pack_f>:
    43cc:	9f 92       	push	r9
    43ce:	af 92       	push	r10
    43d0:	bf 92       	push	r11
    43d2:	cf 92       	push	r12
    43d4:	df 92       	push	r13
    43d6:	ef 92       	push	r14
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	ee 24       	eor	r14, r14
    43e0:	ff 24       	eor	r15, r15
    43e2:	87 01       	movw	r16, r14
    43e4:	fc 01       	movw	r30, r24
    43e6:	24 81       	ldd	r18, Z+4	; 0x04
    43e8:	35 81       	ldd	r19, Z+5	; 0x05
    43ea:	46 81       	ldd	r20, Z+6	; 0x06
    43ec:	57 81       	ldd	r21, Z+7	; 0x07
    43ee:	91 80       	ldd	r9, Z+1	; 0x01
    43f0:	80 81       	ld	r24, Z
    43f2:	82 30       	cpi	r24, 0x02	; 2
    43f4:	10 f4       	brcc	.+4      	; 0x43fa <__pack_f+0x2e>
    43f6:	40 61       	ori	r20, 0x10	; 16
    43f8:	a2 c0       	rjmp	.+324    	; 0x453e <__pack_f+0x172>
    43fa:	84 30       	cpi	r24, 0x04	; 4
    43fc:	09 f4       	brne	.+2      	; 0x4400 <__pack_f+0x34>
    43fe:	9b c0       	rjmp	.+310    	; 0x4536 <__pack_f+0x16a>
    4400:	82 30       	cpi	r24, 0x02	; 2
    4402:	29 f4       	brne	.+10     	; 0x440e <__pack_f+0x42>
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	50 e0       	ldi	r21, 0x00	; 0
    440c:	05 c0       	rjmp	.+10     	; 0x4418 <__pack_f+0x4c>
    440e:	21 15       	cp	r18, r1
    4410:	31 05       	cpc	r19, r1
    4412:	41 05       	cpc	r20, r1
    4414:	51 05       	cpc	r21, r1
    4416:	19 f4       	brne	.+6      	; 0x441e <__pack_f+0x52>
    4418:	e0 e0       	ldi	r30, 0x00	; 0
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	92 c0       	rjmp	.+292    	; 0x4542 <__pack_f+0x176>
    441e:	82 81       	ldd	r24, Z+2	; 0x02
    4420:	93 81       	ldd	r25, Z+3	; 0x03
    4422:	6f ef       	ldi	r22, 0xFF	; 255
    4424:	82 38       	cpi	r24, 0x82	; 130
    4426:	96 07       	cpc	r25, r22
    4428:	0c f0       	brlt	.+2      	; 0x442c <__pack_f+0x60>
    442a:	5a c0       	rjmp	.+180    	; 0x44e0 <__pack_f+0x114>
    442c:	62 e8       	ldi	r22, 0x82	; 130
    442e:	7f ef       	ldi	r23, 0xFF	; 255
    4430:	68 1b       	sub	r22, r24
    4432:	79 0b       	sbc	r23, r25
    4434:	6a 31       	cpi	r22, 0x1A	; 26
    4436:	71 05       	cpc	r23, r1
    4438:	2c f0       	brlt	.+10     	; 0x4444 <__pack_f+0x78>
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	40 e0       	ldi	r20, 0x00	; 0
    4440:	50 e0       	ldi	r21, 0x00	; 0
    4442:	2a c0       	rjmp	.+84     	; 0x4498 <__pack_f+0xcc>
    4444:	aa 24       	eor	r10, r10
    4446:	bb 24       	eor	r11, r11
    4448:	65 01       	movw	r12, r10
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	a0 e0       	ldi	r26, 0x00	; 0
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	06 2e       	mov	r0, r22
    4454:	04 c0       	rjmp	.+8      	; 0x445e <__pack_f+0x92>
    4456:	88 0f       	add	r24, r24
    4458:	99 1f       	adc	r25, r25
    445a:	aa 1f       	adc	r26, r26
    445c:	bb 1f       	adc	r27, r27
    445e:	0a 94       	dec	r0
    4460:	d2 f7       	brpl	.-12     	; 0x4456 <__pack_f+0x8a>
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	a1 09       	sbc	r26, r1
    4466:	b1 09       	sbc	r27, r1
    4468:	82 23       	and	r24, r18
    446a:	93 23       	and	r25, r19
    446c:	a4 23       	and	r26, r20
    446e:	b5 23       	and	r27, r21
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	a1 05       	cpc	r26, r1
    4474:	b1 05       	cpc	r27, r1
    4476:	29 f0       	breq	.+10     	; 0x4482 <__pack_f+0xb6>
    4478:	71 e0       	ldi	r23, 0x01	; 1
    447a:	a7 2e       	mov	r10, r23
    447c:	b1 2c       	mov	r11, r1
    447e:	c1 2c       	mov	r12, r1
    4480:	d1 2c       	mov	r13, r1
    4482:	04 c0       	rjmp	.+8      	; 0x448c <__pack_f+0xc0>
    4484:	56 95       	lsr	r21
    4486:	47 95       	ror	r20
    4488:	37 95       	ror	r19
    448a:	27 95       	ror	r18
    448c:	6a 95       	dec	r22
    448e:	d2 f7       	brpl	.-12     	; 0x4484 <__pack_f+0xb8>
    4490:	2a 29       	or	r18, r10
    4492:	3b 29       	or	r19, r11
    4494:	4c 29       	or	r20, r12
    4496:	5d 29       	or	r21, r13
    4498:	da 01       	movw	r26, r20
    449a:	c9 01       	movw	r24, r18
    449c:	8f 77       	andi	r24, 0x7F	; 127
    449e:	90 70       	andi	r25, 0x00	; 0
    44a0:	a0 70       	andi	r26, 0x00	; 0
    44a2:	b0 70       	andi	r27, 0x00	; 0
    44a4:	80 34       	cpi	r24, 0x40	; 64
    44a6:	91 05       	cpc	r25, r1
    44a8:	a1 05       	cpc	r26, r1
    44aa:	b1 05       	cpc	r27, r1
    44ac:	39 f4       	brne	.+14     	; 0x44bc <__pack_f+0xf0>
    44ae:	27 ff       	sbrs	r18, 7
    44b0:	09 c0       	rjmp	.+18     	; 0x44c4 <__pack_f+0xf8>
    44b2:	20 5c       	subi	r18, 0xC0	; 192
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	4f 4f       	sbci	r20, 0xFF	; 255
    44b8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ba:	04 c0       	rjmp	.+8      	; 0x44c4 <__pack_f+0xf8>
    44bc:	21 5c       	subi	r18, 0xC1	; 193
    44be:	3f 4f       	sbci	r19, 0xFF	; 255
    44c0:	4f 4f       	sbci	r20, 0xFF	; 255
    44c2:	5f 4f       	sbci	r21, 0xFF	; 255
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	20 30       	cpi	r18, 0x00	; 0
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	36 07       	cpc	r19, r22
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	46 07       	cpc	r20, r22
    44d2:	60 e4       	ldi	r22, 0x40	; 64
    44d4:	56 07       	cpc	r21, r22
    44d6:	10 f0       	brcs	.+4      	; 0x44dc <__pack_f+0x110>
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	fc 01       	movw	r30, r24
    44de:	23 c0       	rjmp	.+70     	; 0x4526 <__pack_f+0x15a>
    44e0:	80 38       	cpi	r24, 0x80	; 128
    44e2:	91 05       	cpc	r25, r1
    44e4:	44 f5       	brge	.+80     	; 0x4536 <__pack_f+0x16a>
    44e6:	fc 01       	movw	r30, r24
    44e8:	e1 58       	subi	r30, 0x81	; 129
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	da 01       	movw	r26, r20
    44ee:	c9 01       	movw	r24, r18
    44f0:	8f 77       	andi	r24, 0x7F	; 127
    44f2:	90 70       	andi	r25, 0x00	; 0
    44f4:	a0 70       	andi	r26, 0x00	; 0
    44f6:	b0 70       	andi	r27, 0x00	; 0
    44f8:	80 34       	cpi	r24, 0x40	; 64
    44fa:	91 05       	cpc	r25, r1
    44fc:	a1 05       	cpc	r26, r1
    44fe:	b1 05       	cpc	r27, r1
    4500:	39 f4       	brne	.+14     	; 0x4510 <__pack_f+0x144>
    4502:	27 ff       	sbrs	r18, 7
    4504:	09 c0       	rjmp	.+18     	; 0x4518 <__pack_f+0x14c>
    4506:	20 5c       	subi	r18, 0xC0	; 192
    4508:	3f 4f       	sbci	r19, 0xFF	; 255
    450a:	4f 4f       	sbci	r20, 0xFF	; 255
    450c:	5f 4f       	sbci	r21, 0xFF	; 255
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <__pack_f+0x14c>
    4510:	21 5c       	subi	r18, 0xC1	; 193
    4512:	3f 4f       	sbci	r19, 0xFF	; 255
    4514:	4f 4f       	sbci	r20, 0xFF	; 255
    4516:	5f 4f       	sbci	r21, 0xFF	; 255
    4518:	57 ff       	sbrs	r21, 7
    451a:	05 c0       	rjmp	.+10     	; 0x4526 <__pack_f+0x15a>
    451c:	56 95       	lsr	r21
    451e:	47 95       	ror	r20
    4520:	37 95       	ror	r19
    4522:	27 95       	ror	r18
    4524:	31 96       	adiw	r30, 0x01	; 1
    4526:	87 e0       	ldi	r24, 0x07	; 7
    4528:	56 95       	lsr	r21
    452a:	47 95       	ror	r20
    452c:	37 95       	ror	r19
    452e:	27 95       	ror	r18
    4530:	8a 95       	dec	r24
    4532:	d1 f7       	brne	.-12     	; 0x4528 <__pack_f+0x15c>
    4534:	06 c0       	rjmp	.+12     	; 0x4542 <__pack_f+0x176>
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e0       	ldi	r20, 0x00	; 0
    453c:	50 e0       	ldi	r21, 0x00	; 0
    453e:	ef ef       	ldi	r30, 0xFF	; 255
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	e2 2e       	mov	r14, r18
    4544:	f3 2e       	mov	r15, r19
    4546:	94 2f       	mov	r25, r20
    4548:	9f 77       	andi	r25, 0x7F	; 127
    454a:	80 2f       	mov	r24, r16
    454c:	80 78       	andi	r24, 0x80	; 128
    454e:	89 2b       	or	r24, r25
    4550:	9e 2f       	mov	r25, r30
    4552:	97 95       	ror	r25
    4554:	99 27       	eor	r25, r25
    4556:	97 95       	ror	r25
    4558:	8f 77       	andi	r24, 0x7F	; 127
    455a:	08 2f       	mov	r16, r24
    455c:	09 2b       	or	r16, r25
    455e:	9e 2f       	mov	r25, r30
    4560:	96 95       	lsr	r25
    4562:	81 2f       	mov	r24, r17
    4564:	80 78       	andi	r24, 0x80	; 128
    4566:	89 2b       	or	r24, r25
    4568:	97 94       	ror	r9
    456a:	99 24       	eor	r9, r9
    456c:	97 94       	ror	r9
    456e:	8f 77       	andi	r24, 0x7F	; 127
    4570:	18 2f       	mov	r17, r24
    4572:	19 29       	or	r17, r9
    4574:	c8 01       	movw	r24, r16
    4576:	b7 01       	movw	r22, r14
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	df 90       	pop	r13
    4582:	cf 90       	pop	r12
    4584:	bf 90       	pop	r11
    4586:	af 90       	pop	r10
    4588:	9f 90       	pop	r9
    458a:	08 95       	ret

0000458c <__unpack_f>:
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	fc 01       	movw	r30, r24
    4592:	db 01       	movw	r26, r22
    4594:	20 81       	ld	r18, Z
    4596:	31 81       	ldd	r19, Z+1	; 0x01
    4598:	92 81       	ldd	r25, Z+2	; 0x02
    459a:	49 2f       	mov	r20, r25
    459c:	4f 77       	andi	r20, 0x7F	; 127
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	99 1f       	adc	r25, r25
    45a2:	99 27       	eor	r25, r25
    45a4:	99 1f       	adc	r25, r25
    45a6:	83 81       	ldd	r24, Z+3	; 0x03
    45a8:	e8 2f       	mov	r30, r24
    45aa:	ee 0f       	add	r30, r30
    45ac:	e9 2b       	or	r30, r25
    45ae:	6e 2f       	mov	r22, r30
    45b0:	70 e0       	ldi	r23, 0x00	; 0
    45b2:	88 1f       	adc	r24, r24
    45b4:	88 27       	eor	r24, r24
    45b6:	88 1f       	adc	r24, r24
    45b8:	ed 01       	movw	r28, r26
    45ba:	89 83       	std	Y+1, r24	; 0x01
    45bc:	ee 23       	and	r30, r30
    45be:	71 f5       	brne	.+92     	; 0x461c <__unpack_f+0x90>
    45c0:	21 15       	cp	r18, r1
    45c2:	31 05       	cpc	r19, r1
    45c4:	41 05       	cpc	r20, r1
    45c6:	51 05       	cpc	r21, r1
    45c8:	11 f4       	brne	.+4      	; 0x45ce <__unpack_f+0x42>
    45ca:	82 e0       	ldi	r24, 0x02	; 2
    45cc:	2f c0       	rjmp	.+94     	; 0x462c <__unpack_f+0xa0>
    45ce:	6e 57       	subi	r22, 0x7E	; 126
    45d0:	70 40       	sbci	r23, 0x00	; 0
    45d2:	fd 01       	movw	r30, r26
    45d4:	73 83       	std	Z+3, r23	; 0x03
    45d6:	62 83       	std	Z+2, r22	; 0x02
    45d8:	67 e0       	ldi	r22, 0x07	; 7
    45da:	22 0f       	add	r18, r18
    45dc:	33 1f       	adc	r19, r19
    45de:	44 1f       	adc	r20, r20
    45e0:	55 1f       	adc	r21, r21
    45e2:	6a 95       	dec	r22
    45e4:	d1 f7       	brne	.-12     	; 0x45da <__unpack_f+0x4e>
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	8c 93       	st	X, r24
    45ea:	0a c0       	rjmp	.+20     	; 0x4600 <__unpack_f+0x74>
    45ec:	22 0f       	add	r18, r18
    45ee:	33 1f       	adc	r19, r19
    45f0:	44 1f       	adc	r20, r20
    45f2:	55 1f       	adc	r21, r21
    45f4:	ed 01       	movw	r28, r26
    45f6:	8a 81       	ldd	r24, Y+2	; 0x02
    45f8:	9b 81       	ldd	r25, Y+3	; 0x03
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	9b 83       	std	Y+3, r25	; 0x03
    45fe:	8a 83       	std	Y+2, r24	; 0x02
    4600:	20 30       	cpi	r18, 0x00	; 0
    4602:	e0 e0       	ldi	r30, 0x00	; 0
    4604:	3e 07       	cpc	r19, r30
    4606:	e0 e0       	ldi	r30, 0x00	; 0
    4608:	4e 07       	cpc	r20, r30
    460a:	e0 e4       	ldi	r30, 0x40	; 64
    460c:	5e 07       	cpc	r21, r30
    460e:	70 f3       	brcs	.-36     	; 0x45ec <__unpack_f+0x60>
    4610:	ed 01       	movw	r28, r26
    4612:	2c 83       	std	Y+4, r18	; 0x04
    4614:	3d 83       	std	Y+5, r19	; 0x05
    4616:	4e 83       	std	Y+6, r20	; 0x06
    4618:	5f 83       	std	Y+7, r21	; 0x07
    461a:	25 c0       	rjmp	.+74     	; 0x4666 <__unpack_f+0xda>
    461c:	ef 3f       	cpi	r30, 0xFF	; 255
    461e:	79 f4       	brne	.+30     	; 0x463e <__unpack_f+0xb2>
    4620:	21 15       	cp	r18, r1
    4622:	31 05       	cpc	r19, r1
    4624:	41 05       	cpc	r20, r1
    4626:	51 05       	cpc	r21, r1
    4628:	19 f4       	brne	.+6      	; 0x4630 <__unpack_f+0xa4>
    462a:	84 e0       	ldi	r24, 0x04	; 4
    462c:	8c 93       	st	X, r24
    462e:	1b c0       	rjmp	.+54     	; 0x4666 <__unpack_f+0xda>
    4630:	44 ff       	sbrs	r20, 4
    4632:	03 c0       	rjmp	.+6      	; 0x463a <__unpack_f+0xae>
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	8c 93       	st	X, r24
    4638:	11 c0       	rjmp	.+34     	; 0x465c <__unpack_f+0xd0>
    463a:	1c 92       	st	X, r1
    463c:	0f c0       	rjmp	.+30     	; 0x465c <__unpack_f+0xd0>
    463e:	6f 57       	subi	r22, 0x7F	; 127
    4640:	70 40       	sbci	r23, 0x00	; 0
    4642:	ed 01       	movw	r28, r26
    4644:	7b 83       	std	Y+3, r23	; 0x03
    4646:	6a 83       	std	Y+2, r22	; 0x02
    4648:	83 e0       	ldi	r24, 0x03	; 3
    464a:	8c 93       	st	X, r24
    464c:	87 e0       	ldi	r24, 0x07	; 7
    464e:	22 0f       	add	r18, r18
    4650:	33 1f       	adc	r19, r19
    4652:	44 1f       	adc	r20, r20
    4654:	55 1f       	adc	r21, r21
    4656:	8a 95       	dec	r24
    4658:	d1 f7       	brne	.-12     	; 0x464e <__unpack_f+0xc2>
    465a:	50 64       	ori	r21, 0x40	; 64
    465c:	fd 01       	movw	r30, r26
    465e:	24 83       	std	Z+4, r18	; 0x04
    4660:	35 83       	std	Z+5, r19	; 0x05
    4662:	46 83       	std	Z+6, r20	; 0x06
    4664:	57 83       	std	Z+7, r21	; 0x07
    4666:	df 91       	pop	r29
    4668:	cf 91       	pop	r28
    466a:	08 95       	ret

0000466c <__mulsi3>:
    466c:	62 9f       	mul	r22, r18
    466e:	d0 01       	movw	r26, r0
    4670:	73 9f       	mul	r23, r19
    4672:	f0 01       	movw	r30, r0
    4674:	82 9f       	mul	r24, r18
    4676:	e0 0d       	add	r30, r0
    4678:	f1 1d       	adc	r31, r1
    467a:	64 9f       	mul	r22, r20
    467c:	e0 0d       	add	r30, r0
    467e:	f1 1d       	adc	r31, r1
    4680:	92 9f       	mul	r25, r18
    4682:	f0 0d       	add	r31, r0
    4684:	83 9f       	mul	r24, r19
    4686:	f0 0d       	add	r31, r0
    4688:	74 9f       	mul	r23, r20
    468a:	f0 0d       	add	r31, r0
    468c:	65 9f       	mul	r22, r21
    468e:	f0 0d       	add	r31, r0
    4690:	99 27       	eor	r25, r25
    4692:	72 9f       	mul	r23, r18
    4694:	b0 0d       	add	r27, r0
    4696:	e1 1d       	adc	r30, r1
    4698:	f9 1f       	adc	r31, r25
    469a:	63 9f       	mul	r22, r19
    469c:	b0 0d       	add	r27, r0
    469e:	e1 1d       	adc	r30, r1
    46a0:	f9 1f       	adc	r31, r25
    46a2:	bd 01       	movw	r22, r26
    46a4:	cf 01       	movw	r24, r30
    46a6:	11 24       	eor	r1, r1
    46a8:	08 95       	ret

000046aa <__udivmodhi4>:
    46aa:	aa 1b       	sub	r26, r26
    46ac:	bb 1b       	sub	r27, r27
    46ae:	51 e1       	ldi	r21, 0x11	; 17
    46b0:	07 c0       	rjmp	.+14     	; 0x46c0 <__udivmodhi4_ep>

000046b2 <__udivmodhi4_loop>:
    46b2:	aa 1f       	adc	r26, r26
    46b4:	bb 1f       	adc	r27, r27
    46b6:	a6 17       	cp	r26, r22
    46b8:	b7 07       	cpc	r27, r23
    46ba:	10 f0       	brcs	.+4      	; 0x46c0 <__udivmodhi4_ep>
    46bc:	a6 1b       	sub	r26, r22
    46be:	b7 0b       	sbc	r27, r23

000046c0 <__udivmodhi4_ep>:
    46c0:	88 1f       	adc	r24, r24
    46c2:	99 1f       	adc	r25, r25
    46c4:	5a 95       	dec	r21
    46c6:	a9 f7       	brne	.-22     	; 0x46b2 <__udivmodhi4_loop>
    46c8:	80 95       	com	r24
    46ca:	90 95       	com	r25
    46cc:	bc 01       	movw	r22, r24
    46ce:	cd 01       	movw	r24, r26
    46d0:	08 95       	ret

000046d2 <__divmodhi4>:
    46d2:	97 fb       	bst	r25, 7
    46d4:	09 2e       	mov	r0, r25
    46d6:	07 26       	eor	r0, r23
    46d8:	0a d0       	rcall	.+20     	; 0x46ee <__divmodhi4_neg1>
    46da:	77 fd       	sbrc	r23, 7
    46dc:	04 d0       	rcall	.+8      	; 0x46e6 <__divmodhi4_neg2>
    46de:	e5 df       	rcall	.-54     	; 0x46aa <__udivmodhi4>
    46e0:	06 d0       	rcall	.+12     	; 0x46ee <__divmodhi4_neg1>
    46e2:	00 20       	and	r0, r0
    46e4:	1a f4       	brpl	.+6      	; 0x46ec <__divmodhi4_exit>

000046e6 <__divmodhi4_neg2>:
    46e6:	70 95       	com	r23
    46e8:	61 95       	neg	r22
    46ea:	7f 4f       	sbci	r23, 0xFF	; 255

000046ec <__divmodhi4_exit>:
    46ec:	08 95       	ret

000046ee <__divmodhi4_neg1>:
    46ee:	f6 f7       	brtc	.-4      	; 0x46ec <__divmodhi4_exit>
    46f0:	90 95       	com	r25
    46f2:	81 95       	neg	r24
    46f4:	9f 4f       	sbci	r25, 0xFF	; 255
    46f6:	08 95       	ret

000046f8 <__prologue_saves__>:
    46f8:	2f 92       	push	r2
    46fa:	3f 92       	push	r3
    46fc:	4f 92       	push	r4
    46fe:	5f 92       	push	r5
    4700:	6f 92       	push	r6
    4702:	7f 92       	push	r7
    4704:	8f 92       	push	r8
    4706:	9f 92       	push	r9
    4708:	af 92       	push	r10
    470a:	bf 92       	push	r11
    470c:	cf 92       	push	r12
    470e:	df 92       	push	r13
    4710:	ef 92       	push	r14
    4712:	ff 92       	push	r15
    4714:	0f 93       	push	r16
    4716:	1f 93       	push	r17
    4718:	cf 93       	push	r28
    471a:	df 93       	push	r29
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
    4720:	ca 1b       	sub	r28, r26
    4722:	db 0b       	sbc	r29, r27
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	19 94       	eijmp

00004730 <__epilogue_restores__>:
    4730:	2a 88       	ldd	r2, Y+18	; 0x12
    4732:	39 88       	ldd	r3, Y+17	; 0x11
    4734:	48 88       	ldd	r4, Y+16	; 0x10
    4736:	5f 84       	ldd	r5, Y+15	; 0x0f
    4738:	6e 84       	ldd	r6, Y+14	; 0x0e
    473a:	7d 84       	ldd	r7, Y+13	; 0x0d
    473c:	8c 84       	ldd	r8, Y+12	; 0x0c
    473e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4740:	aa 84       	ldd	r10, Y+10	; 0x0a
    4742:	b9 84       	ldd	r11, Y+9	; 0x09
    4744:	c8 84       	ldd	r12, Y+8	; 0x08
    4746:	df 80       	ldd	r13, Y+7	; 0x07
    4748:	ee 80       	ldd	r14, Y+6	; 0x06
    474a:	fd 80       	ldd	r15, Y+5	; 0x05
    474c:	0c 81       	ldd	r16, Y+4	; 0x04
    474e:	1b 81       	ldd	r17, Y+3	; 0x03
    4750:	aa 81       	ldd	r26, Y+2	; 0x02
    4752:	b9 81       	ldd	r27, Y+1	; 0x01
    4754:	ce 0f       	add	r28, r30
    4756:	d1 1d       	adc	r29, r1
    4758:	0f b6       	in	r0, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	de bf       	out	0x3e, r29	; 62
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	cd bf       	out	0x3d, r28	; 61
    4762:	ed 01       	movw	r28, r26
    4764:	08 95       	ret

00004766 <do_rand>:
    4766:	af 92       	push	r10
    4768:	bf 92       	push	r11
    476a:	cf 92       	push	r12
    476c:	df 92       	push	r13
    476e:	ef 92       	push	r14
    4770:	ff 92       	push	r15
    4772:	0f 93       	push	r16
    4774:	1f 93       	push	r17
    4776:	cf 93       	push	r28
    4778:	df 93       	push	r29
    477a:	ec 01       	movw	r28, r24
    477c:	68 81       	ld	r22, Y
    477e:	79 81       	ldd	r23, Y+1	; 0x01
    4780:	8a 81       	ldd	r24, Y+2	; 0x02
    4782:	9b 81       	ldd	r25, Y+3	; 0x03
    4784:	61 15       	cp	r22, r1
    4786:	71 05       	cpc	r23, r1
    4788:	81 05       	cpc	r24, r1
    478a:	91 05       	cpc	r25, r1
    478c:	21 f4       	brne	.+8      	; 0x4796 <do_rand+0x30>
    478e:	64 e2       	ldi	r22, 0x24	; 36
    4790:	79 ed       	ldi	r23, 0xD9	; 217
    4792:	8b e5       	ldi	r24, 0x5B	; 91
    4794:	97 e0       	ldi	r25, 0x07	; 7
    4796:	2d e1       	ldi	r18, 0x1D	; 29
    4798:	33 ef       	ldi	r19, 0xF3	; 243
    479a:	41 e0       	ldi	r20, 0x01	; 1
    479c:	50 e0       	ldi	r21, 0x00	; 0
    479e:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__divmodsi4>
    47a2:	79 01       	movw	r14, r18
    47a4:	8a 01       	movw	r16, r20
    47a6:	27 ea       	ldi	r18, 0xA7	; 167
    47a8:	31 e4       	ldi	r19, 0x41	; 65
    47aa:	40 e0       	ldi	r20, 0x00	; 0
    47ac:	50 e0       	ldi	r21, 0x00	; 0
    47ae:	0e 94 36 23 	call	0x466c	; 0x466c <__mulsi3>
    47b2:	5b 01       	movw	r10, r22
    47b4:	6c 01       	movw	r12, r24
    47b6:	c8 01       	movw	r24, r16
    47b8:	b7 01       	movw	r22, r14
    47ba:	2c ee       	ldi	r18, 0xEC	; 236
    47bc:	34 ef       	ldi	r19, 0xF4	; 244
    47be:	4f ef       	ldi	r20, 0xFF	; 255
    47c0:	5f ef       	ldi	r21, 0xFF	; 255
    47c2:	0e 94 36 23 	call	0x466c	; 0x466c <__mulsi3>
    47c6:	6a 0d       	add	r22, r10
    47c8:	7b 1d       	adc	r23, r11
    47ca:	8c 1d       	adc	r24, r12
    47cc:	9d 1d       	adc	r25, r13
    47ce:	97 ff       	sbrs	r25, 7
    47d0:	04 c0       	rjmp	.+8      	; 0x47da <do_rand+0x74>
    47d2:	61 50       	subi	r22, 0x01	; 1
    47d4:	70 40       	sbci	r23, 0x00	; 0
    47d6:	80 40       	sbci	r24, 0x00	; 0
    47d8:	90 48       	sbci	r25, 0x80	; 128
    47da:	68 83       	st	Y, r22
    47dc:	79 83       	std	Y+1, r23	; 0x01
    47de:	8a 83       	std	Y+2, r24	; 0x02
    47e0:	9b 83       	std	Y+3, r25	; 0x03
    47e2:	7f 77       	andi	r23, 0x7F	; 127
    47e4:	cb 01       	movw	r24, r22
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	08 95       	ret

000047fc <rand_r>:
    47fc:	0e 94 b3 23 	call	0x4766	; 0x4766 <do_rand>
    4800:	08 95       	ret

00004802 <rand>:
    4802:	8f e1       	ldi	r24, 0x1F	; 31
    4804:	93 e0       	ldi	r25, 0x03	; 3
    4806:	0e 94 b3 23 	call	0x4766	; 0x4766 <do_rand>
    480a:	08 95       	ret

0000480c <srand>:
    480c:	a0 e0       	ldi	r26, 0x00	; 0
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	80 93 1f 03 	sts	0x031F, r24
    4814:	90 93 20 03 	sts	0x0320, r25
    4818:	a0 93 21 03 	sts	0x0321, r26
    481c:	b0 93 22 03 	sts	0x0322, r27
    4820:	08 95       	ret
    4822:	f5 d0       	rcall	.+490    	; 0x4a0e <__fp_pscA>
    4824:	58 f0       	brcs	.+22     	; 0x483c <srand+0x30>
    4826:	80 e8       	ldi	r24, 0x80	; 128
    4828:	91 e0       	ldi	r25, 0x01	; 1
    482a:	09 f4       	brne	.+2      	; 0x482e <srand+0x22>
    482c:	9e ef       	ldi	r25, 0xFE	; 254
    482e:	f6 d0       	rcall	.+492    	; 0x4a1c <__fp_pscB>
    4830:	28 f0       	brcs	.+10     	; 0x483c <srand+0x30>
    4832:	40 e8       	ldi	r20, 0x80	; 128
    4834:	51 e0       	ldi	r21, 0x01	; 1
    4836:	59 f4       	brne	.+22     	; 0x484e <atan2+0xe>
    4838:	5e ef       	ldi	r21, 0xFE	; 254
    483a:	09 c0       	rjmp	.+18     	; 0x484e <atan2+0xe>
    483c:	c0 c0       	rjmp	.+384    	; 0x49be <__fp_nan>
    483e:	28 c1       	rjmp	.+592    	; 0x4a90 <__fp_zero>

00004840 <atan2>:
    4840:	e9 2f       	mov	r30, r25
    4842:	e0 78       	andi	r30, 0x80	; 128
    4844:	03 d1       	rcall	.+518    	; 0x4a4c <__fp_split3>
    4846:	68 f3       	brcs	.-38     	; 0x4822 <srand+0x16>
    4848:	09 2e       	mov	r0, r25
    484a:	05 2a       	or	r0, r21
    484c:	c1 f3       	breq	.-16     	; 0x483e <srand+0x32>
    484e:	26 17       	cp	r18, r22
    4850:	37 07       	cpc	r19, r23
    4852:	48 07       	cpc	r20, r24
    4854:	59 07       	cpc	r21, r25
    4856:	38 f0       	brcs	.+14     	; 0x4866 <atan2+0x26>
    4858:	0e 2e       	mov	r0, r30
    485a:	07 f8       	bld	r0, 7
    485c:	e0 25       	eor	r30, r0
    485e:	69 f0       	breq	.+26     	; 0x487a <atan2+0x3a>
    4860:	e0 25       	eor	r30, r0
    4862:	e0 64       	ori	r30, 0x40	; 64
    4864:	0a c0       	rjmp	.+20     	; 0x487a <atan2+0x3a>
    4866:	ef 63       	ori	r30, 0x3F	; 63
    4868:	07 f8       	bld	r0, 7
    486a:	00 94       	com	r0
    486c:	07 fa       	bst	r0, 7
    486e:	db 01       	movw	r26, r22
    4870:	b9 01       	movw	r22, r18
    4872:	9d 01       	movw	r18, r26
    4874:	dc 01       	movw	r26, r24
    4876:	ca 01       	movw	r24, r20
    4878:	ad 01       	movw	r20, r26
    487a:	ef 93       	push	r30
    487c:	41 d0       	rcall	.+130    	; 0x4900 <__divsf3_pse>
    487e:	d5 d0       	rcall	.+426    	; 0x4a2a <__fp_round>
    4880:	0a d0       	rcall	.+20     	; 0x4896 <atan>
    4882:	5f 91       	pop	r21
    4884:	55 23       	and	r21, r21
    4886:	31 f0       	breq	.+12     	; 0x4894 <atan2+0x54>
    4888:	2b ed       	ldi	r18, 0xDB	; 219
    488a:	3f e0       	ldi	r19, 0x0F	; 15
    488c:	49 e4       	ldi	r20, 0x49	; 73
    488e:	50 fd       	sbrc	r21, 0
    4890:	49 ec       	ldi	r20, 0xC9	; 201
    4892:	71 c1       	rjmp	.+738    	; 0x4b76 <__addsf3>
    4894:	08 95       	ret

00004896 <atan>:
    4896:	df 93       	push	r29
    4898:	dd 27       	eor	r29, r29
    489a:	b9 2f       	mov	r27, r25
    489c:	bf 77       	andi	r27, 0x7F	; 127
    489e:	40 e8       	ldi	r20, 0x80	; 128
    48a0:	5f e3       	ldi	r21, 0x3F	; 63
    48a2:	16 16       	cp	r1, r22
    48a4:	17 06       	cpc	r1, r23
    48a6:	48 07       	cpc	r20, r24
    48a8:	5b 07       	cpc	r21, r27
    48aa:	10 f4       	brcc	.+4      	; 0x48b0 <atan+0x1a>
    48ac:	d9 2f       	mov	r29, r25
    48ae:	f7 d0       	rcall	.+494    	; 0x4a9e <inverse>
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	7f 93       	push	r23
    48b6:	6f 93       	push	r22
    48b8:	5a d1       	rcall	.+692    	; 0x4b6e <square>
    48ba:	ee e4       	ldi	r30, 0x4E	; 78
    48bc:	f1 e0       	ldi	r31, 0x01	; 1
    48be:	82 d0       	rcall	.+260    	; 0x49c4 <__fp_powser>
    48c0:	b4 d0       	rcall	.+360    	; 0x4a2a <__fp_round>
    48c2:	2f 91       	pop	r18
    48c4:	3f 91       	pop	r19
    48c6:	4f 91       	pop	r20
    48c8:	5f 91       	pop	r21
    48ca:	fa d0       	rcall	.+500    	; 0x4ac0 <__mulsf3x>
    48cc:	dd 23       	and	r29, r29
    48ce:	49 f0       	breq	.+18     	; 0x48e2 <atan+0x4c>
    48d0:	90 58       	subi	r25, 0x80	; 128
    48d2:	a2 ea       	ldi	r26, 0xA2	; 162
    48d4:	2a ed       	ldi	r18, 0xDA	; 218
    48d6:	3f e0       	ldi	r19, 0x0F	; 15
    48d8:	49 ec       	ldi	r20, 0xC9	; 201
    48da:	5f e3       	ldi	r21, 0x3F	; 63
    48dc:	d0 78       	andi	r29, 0x80	; 128
    48de:	5d 27       	eor	r21, r29
    48e0:	5b d1       	rcall	.+694    	; 0x4b98 <__addsf3x>
    48e2:	df 91       	pop	r29
    48e4:	a2 c0       	rjmp	.+324    	; 0x4a2a <__fp_round>
    48e6:	9a d0       	rcall	.+308    	; 0x4a1c <__fp_pscB>
    48e8:	40 f0       	brcs	.+16     	; 0x48fa <atan+0x64>
    48ea:	91 d0       	rcall	.+290    	; 0x4a0e <__fp_pscA>
    48ec:	30 f0       	brcs	.+12     	; 0x48fa <atan+0x64>
    48ee:	21 f4       	brne	.+8      	; 0x48f8 <atan+0x62>
    48f0:	5f 3f       	cpi	r21, 0xFF	; 255
    48f2:	19 f0       	breq	.+6      	; 0x48fa <atan+0x64>
    48f4:	5e c0       	rjmp	.+188    	; 0x49b2 <__fp_inf>
    48f6:	51 11       	cpse	r21, r1
    48f8:	cc c0       	rjmp	.+408    	; 0x4a92 <__fp_szero>
    48fa:	61 c0       	rjmp	.+194    	; 0x49be <__fp_nan>

000048fc <__divsf3x>:
    48fc:	a7 d0       	rcall	.+334    	; 0x4a4c <__fp_split3>
    48fe:	98 f3       	brcs	.-26     	; 0x48e6 <atan+0x50>

00004900 <__divsf3_pse>:
    4900:	99 23       	and	r25, r25
    4902:	c9 f3       	breq	.-14     	; 0x48f6 <atan+0x60>
    4904:	55 23       	and	r21, r21
    4906:	b1 f3       	breq	.-20     	; 0x48f4 <atan+0x5e>
    4908:	95 1b       	sub	r25, r21
    490a:	55 0b       	sbc	r21, r21
    490c:	bb 27       	eor	r27, r27
    490e:	aa 27       	eor	r26, r26
    4910:	62 17       	cp	r22, r18
    4912:	73 07       	cpc	r23, r19
    4914:	84 07       	cpc	r24, r20
    4916:	38 f0       	brcs	.+14     	; 0x4926 <__divsf3_pse+0x26>
    4918:	9f 5f       	subi	r25, 0xFF	; 255
    491a:	5f 4f       	sbci	r21, 0xFF	; 255
    491c:	22 0f       	add	r18, r18
    491e:	33 1f       	adc	r19, r19
    4920:	44 1f       	adc	r20, r20
    4922:	aa 1f       	adc	r26, r26
    4924:	a9 f3       	breq	.-22     	; 0x4910 <__divsf3_pse+0x10>
    4926:	33 d0       	rcall	.+102    	; 0x498e <__divsf3_pse+0x8e>
    4928:	0e 2e       	mov	r0, r30
    492a:	3a f0       	brmi	.+14     	; 0x493a <__divsf3_pse+0x3a>
    492c:	e0 e8       	ldi	r30, 0x80	; 128
    492e:	30 d0       	rcall	.+96     	; 0x4990 <__divsf3_pse+0x90>
    4930:	91 50       	subi	r25, 0x01	; 1
    4932:	50 40       	sbci	r21, 0x00	; 0
    4934:	e6 95       	lsr	r30
    4936:	00 1c       	adc	r0, r0
    4938:	ca f7       	brpl	.-14     	; 0x492c <__divsf3_pse+0x2c>
    493a:	29 d0       	rcall	.+82     	; 0x498e <__divsf3_pse+0x8e>
    493c:	fe 2f       	mov	r31, r30
    493e:	27 d0       	rcall	.+78     	; 0x498e <__divsf3_pse+0x8e>
    4940:	66 0f       	add	r22, r22
    4942:	77 1f       	adc	r23, r23
    4944:	88 1f       	adc	r24, r24
    4946:	bb 1f       	adc	r27, r27
    4948:	26 17       	cp	r18, r22
    494a:	37 07       	cpc	r19, r23
    494c:	48 07       	cpc	r20, r24
    494e:	ab 07       	cpc	r26, r27
    4950:	b0 e8       	ldi	r27, 0x80	; 128
    4952:	09 f0       	breq	.+2      	; 0x4956 <__divsf3_pse+0x56>
    4954:	bb 0b       	sbc	r27, r27
    4956:	80 2d       	mov	r24, r0
    4958:	bf 01       	movw	r22, r30
    495a:	ff 27       	eor	r31, r31
    495c:	93 58       	subi	r25, 0x83	; 131
    495e:	5f 4f       	sbci	r21, 0xFF	; 255
    4960:	2a f0       	brmi	.+10     	; 0x496c <__divsf3_pse+0x6c>
    4962:	9e 3f       	cpi	r25, 0xFE	; 254
    4964:	51 05       	cpc	r21, r1
    4966:	68 f0       	brcs	.+26     	; 0x4982 <__divsf3_pse+0x82>
    4968:	24 c0       	rjmp	.+72     	; 0x49b2 <__fp_inf>
    496a:	93 c0       	rjmp	.+294    	; 0x4a92 <__fp_szero>
    496c:	5f 3f       	cpi	r21, 0xFF	; 255
    496e:	ec f3       	brlt	.-6      	; 0x496a <__divsf3_pse+0x6a>
    4970:	98 3e       	cpi	r25, 0xE8	; 232
    4972:	dc f3       	brlt	.-10     	; 0x496a <__divsf3_pse+0x6a>
    4974:	86 95       	lsr	r24
    4976:	77 95       	ror	r23
    4978:	67 95       	ror	r22
    497a:	b7 95       	ror	r27
    497c:	f7 95       	ror	r31
    497e:	9f 5f       	subi	r25, 0xFF	; 255
    4980:	c9 f7       	brne	.-14     	; 0x4974 <__divsf3_pse+0x74>
    4982:	88 0f       	add	r24, r24
    4984:	91 1d       	adc	r25, r1
    4986:	96 95       	lsr	r25
    4988:	87 95       	ror	r24
    498a:	97 f9       	bld	r25, 7
    498c:	08 95       	ret
    498e:	e1 e0       	ldi	r30, 0x01	; 1
    4990:	66 0f       	add	r22, r22
    4992:	77 1f       	adc	r23, r23
    4994:	88 1f       	adc	r24, r24
    4996:	bb 1f       	adc	r27, r27
    4998:	62 17       	cp	r22, r18
    499a:	73 07       	cpc	r23, r19
    499c:	84 07       	cpc	r24, r20
    499e:	ba 07       	cpc	r27, r26
    49a0:	20 f0       	brcs	.+8      	; 0x49aa <__divsf3_pse+0xaa>
    49a2:	62 1b       	sub	r22, r18
    49a4:	73 0b       	sbc	r23, r19
    49a6:	84 0b       	sbc	r24, r20
    49a8:	ba 0b       	sbc	r27, r26
    49aa:	ee 1f       	adc	r30, r30
    49ac:	88 f7       	brcc	.-30     	; 0x4990 <__divsf3_pse+0x90>
    49ae:	e0 95       	com	r30
    49b0:	08 95       	ret

000049b2 <__fp_inf>:
    49b2:	97 f9       	bld	r25, 7
    49b4:	9f 67       	ori	r25, 0x7F	; 127
    49b6:	80 e8       	ldi	r24, 0x80	; 128
    49b8:	70 e0       	ldi	r23, 0x00	; 0
    49ba:	60 e0       	ldi	r22, 0x00	; 0
    49bc:	08 95       	ret

000049be <__fp_nan>:
    49be:	9f ef       	ldi	r25, 0xFF	; 255
    49c0:	80 ec       	ldi	r24, 0xC0	; 192
    49c2:	08 95       	ret

000049c4 <__fp_powser>:
    49c4:	df 93       	push	r29
    49c6:	cf 93       	push	r28
    49c8:	1f 93       	push	r17
    49ca:	0f 93       	push	r16
    49cc:	ff 92       	push	r15
    49ce:	ef 92       	push	r14
    49d0:	df 92       	push	r13
    49d2:	7b 01       	movw	r14, r22
    49d4:	8c 01       	movw	r16, r24
    49d6:	68 94       	set
    49d8:	05 c0       	rjmp	.+10     	; 0x49e4 <__fp_powser+0x20>
    49da:	da 2e       	mov	r13, r26
    49dc:	ef 01       	movw	r28, r30
    49de:	70 d0       	rcall	.+224    	; 0x4ac0 <__mulsf3x>
    49e0:	fe 01       	movw	r30, r28
    49e2:	e8 94       	clt
    49e4:	a5 91       	lpm	r26, Z+
    49e6:	25 91       	lpm	r18, Z+
    49e8:	35 91       	lpm	r19, Z+
    49ea:	45 91       	lpm	r20, Z+
    49ec:	55 91       	lpm	r21, Z+
    49ee:	ae f3       	brts	.-22     	; 0x49da <__fp_powser+0x16>
    49f0:	ef 01       	movw	r28, r30
    49f2:	d2 d0       	rcall	.+420    	; 0x4b98 <__addsf3x>
    49f4:	fe 01       	movw	r30, r28
    49f6:	97 01       	movw	r18, r14
    49f8:	a8 01       	movw	r20, r16
    49fa:	da 94       	dec	r13
    49fc:	79 f7       	brne	.-34     	; 0x49dc <__fp_powser+0x18>
    49fe:	df 90       	pop	r13
    4a00:	ef 90       	pop	r14
    4a02:	ff 90       	pop	r15
    4a04:	0f 91       	pop	r16
    4a06:	1f 91       	pop	r17
    4a08:	cf 91       	pop	r28
    4a0a:	df 91       	pop	r29
    4a0c:	08 95       	ret

00004a0e <__fp_pscA>:
    4a0e:	00 24       	eor	r0, r0
    4a10:	0a 94       	dec	r0
    4a12:	16 16       	cp	r1, r22
    4a14:	17 06       	cpc	r1, r23
    4a16:	18 06       	cpc	r1, r24
    4a18:	09 06       	cpc	r0, r25
    4a1a:	08 95       	ret

00004a1c <__fp_pscB>:
    4a1c:	00 24       	eor	r0, r0
    4a1e:	0a 94       	dec	r0
    4a20:	12 16       	cp	r1, r18
    4a22:	13 06       	cpc	r1, r19
    4a24:	14 06       	cpc	r1, r20
    4a26:	05 06       	cpc	r0, r21
    4a28:	08 95       	ret

00004a2a <__fp_round>:
    4a2a:	09 2e       	mov	r0, r25
    4a2c:	03 94       	inc	r0
    4a2e:	00 0c       	add	r0, r0
    4a30:	11 f4       	brne	.+4      	; 0x4a36 <__fp_round+0xc>
    4a32:	88 23       	and	r24, r24
    4a34:	52 f0       	brmi	.+20     	; 0x4a4a <__fp_round+0x20>
    4a36:	bb 0f       	add	r27, r27
    4a38:	40 f4       	brcc	.+16     	; 0x4a4a <__fp_round+0x20>
    4a3a:	bf 2b       	or	r27, r31
    4a3c:	11 f4       	brne	.+4      	; 0x4a42 <__fp_round+0x18>
    4a3e:	60 ff       	sbrs	r22, 0
    4a40:	04 c0       	rjmp	.+8      	; 0x4a4a <__fp_round+0x20>
    4a42:	6f 5f       	subi	r22, 0xFF	; 255
    4a44:	7f 4f       	sbci	r23, 0xFF	; 255
    4a46:	8f 4f       	sbci	r24, 0xFF	; 255
    4a48:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4a:	08 95       	ret

00004a4c <__fp_split3>:
    4a4c:	57 fd       	sbrc	r21, 7
    4a4e:	90 58       	subi	r25, 0x80	; 128
    4a50:	44 0f       	add	r20, r20
    4a52:	55 1f       	adc	r21, r21
    4a54:	59 f0       	breq	.+22     	; 0x4a6c <__fp_splitA+0x10>
    4a56:	5f 3f       	cpi	r21, 0xFF	; 255
    4a58:	71 f0       	breq	.+28     	; 0x4a76 <__fp_splitA+0x1a>
    4a5a:	47 95       	ror	r20

00004a5c <__fp_splitA>:
    4a5c:	88 0f       	add	r24, r24
    4a5e:	97 fb       	bst	r25, 7
    4a60:	99 1f       	adc	r25, r25
    4a62:	61 f0       	breq	.+24     	; 0x4a7c <__fp_splitA+0x20>
    4a64:	9f 3f       	cpi	r25, 0xFF	; 255
    4a66:	79 f0       	breq	.+30     	; 0x4a86 <__fp_splitA+0x2a>
    4a68:	87 95       	ror	r24
    4a6a:	08 95       	ret
    4a6c:	12 16       	cp	r1, r18
    4a6e:	13 06       	cpc	r1, r19
    4a70:	14 06       	cpc	r1, r20
    4a72:	55 1f       	adc	r21, r21
    4a74:	f2 cf       	rjmp	.-28     	; 0x4a5a <__fp_split3+0xe>
    4a76:	46 95       	lsr	r20
    4a78:	f1 df       	rcall	.-30     	; 0x4a5c <__fp_splitA>
    4a7a:	08 c0       	rjmp	.+16     	; 0x4a8c <__fp_splitA+0x30>
    4a7c:	16 16       	cp	r1, r22
    4a7e:	17 06       	cpc	r1, r23
    4a80:	18 06       	cpc	r1, r24
    4a82:	99 1f       	adc	r25, r25
    4a84:	f1 cf       	rjmp	.-30     	; 0x4a68 <__fp_splitA+0xc>
    4a86:	86 95       	lsr	r24
    4a88:	71 05       	cpc	r23, r1
    4a8a:	61 05       	cpc	r22, r1
    4a8c:	08 94       	sec
    4a8e:	08 95       	ret

00004a90 <__fp_zero>:
    4a90:	e8 94       	clt

00004a92 <__fp_szero>:
    4a92:	bb 27       	eor	r27, r27
    4a94:	66 27       	eor	r22, r22
    4a96:	77 27       	eor	r23, r23
    4a98:	cb 01       	movw	r24, r22
    4a9a:	97 f9       	bld	r25, 7
    4a9c:	08 95       	ret

00004a9e <inverse>:
    4a9e:	9b 01       	movw	r18, r22
    4aa0:	ac 01       	movw	r20, r24
    4aa2:	60 e0       	ldi	r22, 0x00	; 0
    4aa4:	70 e0       	ldi	r23, 0x00	; 0
    4aa6:	80 e8       	ldi	r24, 0x80	; 128
    4aa8:	9f e3       	ldi	r25, 0x3F	; 63
    4aaa:	c9 c0       	rjmp	.+402    	; 0x4c3e <__divsf3>
    4aac:	b0 df       	rcall	.-160    	; 0x4a0e <__fp_pscA>
    4aae:	28 f0       	brcs	.+10     	; 0x4aba <inverse+0x1c>
    4ab0:	b5 df       	rcall	.-150    	; 0x4a1c <__fp_pscB>
    4ab2:	18 f0       	brcs	.+6      	; 0x4aba <inverse+0x1c>
    4ab4:	95 23       	and	r25, r21
    4ab6:	09 f0       	breq	.+2      	; 0x4aba <inverse+0x1c>
    4ab8:	7c cf       	rjmp	.-264    	; 0x49b2 <__fp_inf>
    4aba:	81 cf       	rjmp	.-254    	; 0x49be <__fp_nan>
    4abc:	11 24       	eor	r1, r1
    4abe:	e9 cf       	rjmp	.-46     	; 0x4a92 <__fp_szero>

00004ac0 <__mulsf3x>:
    4ac0:	c5 df       	rcall	.-118    	; 0x4a4c <__fp_split3>
    4ac2:	a0 f3       	brcs	.-24     	; 0x4aac <inverse+0xe>

00004ac4 <__mulsf3_pse>:
    4ac4:	95 9f       	mul	r25, r21
    4ac6:	d1 f3       	breq	.-12     	; 0x4abc <inverse+0x1e>
    4ac8:	95 0f       	add	r25, r21
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	55 1f       	adc	r21, r21
    4ace:	62 9f       	mul	r22, r18
    4ad0:	f0 01       	movw	r30, r0
    4ad2:	72 9f       	mul	r23, r18
    4ad4:	bb 27       	eor	r27, r27
    4ad6:	f0 0d       	add	r31, r0
    4ad8:	b1 1d       	adc	r27, r1
    4ada:	63 9f       	mul	r22, r19
    4adc:	aa 27       	eor	r26, r26
    4ade:	f0 0d       	add	r31, r0
    4ae0:	b1 1d       	adc	r27, r1
    4ae2:	aa 1f       	adc	r26, r26
    4ae4:	64 9f       	mul	r22, r20
    4ae6:	66 27       	eor	r22, r22
    4ae8:	b0 0d       	add	r27, r0
    4aea:	a1 1d       	adc	r26, r1
    4aec:	66 1f       	adc	r22, r22
    4aee:	82 9f       	mul	r24, r18
    4af0:	22 27       	eor	r18, r18
    4af2:	b0 0d       	add	r27, r0
    4af4:	a1 1d       	adc	r26, r1
    4af6:	62 1f       	adc	r22, r18
    4af8:	73 9f       	mul	r23, r19
    4afa:	b0 0d       	add	r27, r0
    4afc:	a1 1d       	adc	r26, r1
    4afe:	62 1f       	adc	r22, r18
    4b00:	83 9f       	mul	r24, r19
    4b02:	a0 0d       	add	r26, r0
    4b04:	61 1d       	adc	r22, r1
    4b06:	22 1f       	adc	r18, r18
    4b08:	74 9f       	mul	r23, r20
    4b0a:	33 27       	eor	r19, r19
    4b0c:	a0 0d       	add	r26, r0
    4b0e:	61 1d       	adc	r22, r1
    4b10:	23 1f       	adc	r18, r19
    4b12:	84 9f       	mul	r24, r20
    4b14:	60 0d       	add	r22, r0
    4b16:	21 1d       	adc	r18, r1
    4b18:	82 2f       	mov	r24, r18
    4b1a:	76 2f       	mov	r23, r22
    4b1c:	6a 2f       	mov	r22, r26
    4b1e:	11 24       	eor	r1, r1
    4b20:	9f 57       	subi	r25, 0x7F	; 127
    4b22:	50 40       	sbci	r21, 0x00	; 0
    4b24:	8a f0       	brmi	.+34     	; 0x4b48 <__mulsf3_pse+0x84>
    4b26:	e1 f0       	breq	.+56     	; 0x4b60 <__mulsf3_pse+0x9c>
    4b28:	88 23       	and	r24, r24
    4b2a:	4a f0       	brmi	.+18     	; 0x4b3e <__mulsf3_pse+0x7a>
    4b2c:	ee 0f       	add	r30, r30
    4b2e:	ff 1f       	adc	r31, r31
    4b30:	bb 1f       	adc	r27, r27
    4b32:	66 1f       	adc	r22, r22
    4b34:	77 1f       	adc	r23, r23
    4b36:	88 1f       	adc	r24, r24
    4b38:	91 50       	subi	r25, 0x01	; 1
    4b3a:	50 40       	sbci	r21, 0x00	; 0
    4b3c:	a9 f7       	brne	.-22     	; 0x4b28 <__mulsf3_pse+0x64>
    4b3e:	9e 3f       	cpi	r25, 0xFE	; 254
    4b40:	51 05       	cpc	r21, r1
    4b42:	70 f0       	brcs	.+28     	; 0x4b60 <__mulsf3_pse+0x9c>
    4b44:	36 cf       	rjmp	.-404    	; 0x49b2 <__fp_inf>
    4b46:	a5 cf       	rjmp	.-182    	; 0x4a92 <__fp_szero>
    4b48:	5f 3f       	cpi	r21, 0xFF	; 255
    4b4a:	ec f3       	brlt	.-6      	; 0x4b46 <__mulsf3_pse+0x82>
    4b4c:	98 3e       	cpi	r25, 0xE8	; 232
    4b4e:	dc f3       	brlt	.-10     	; 0x4b46 <__mulsf3_pse+0x82>
    4b50:	86 95       	lsr	r24
    4b52:	77 95       	ror	r23
    4b54:	67 95       	ror	r22
    4b56:	b7 95       	ror	r27
    4b58:	f7 95       	ror	r31
    4b5a:	e7 95       	ror	r30
    4b5c:	9f 5f       	subi	r25, 0xFF	; 255
    4b5e:	c1 f7       	brne	.-16     	; 0x4b50 <__mulsf3_pse+0x8c>
    4b60:	fe 2b       	or	r31, r30
    4b62:	88 0f       	add	r24, r24
    4b64:	91 1d       	adc	r25, r1
    4b66:	96 95       	lsr	r25
    4b68:	87 95       	ror	r24
    4b6a:	97 f9       	bld	r25, 7
    4b6c:	08 95       	ret

00004b6e <square>:
    4b6e:	9b 01       	movw	r18, r22
    4b70:	ac 01       	movw	r20, r24
    4b72:	2f ca       	rjmp	.-2978   	; 0x3fd2 <__mulsf3>

00004b74 <__subsf3>:
    4b74:	50 58       	subi	r21, 0x80	; 128

00004b76 <__addsf3>:
    4b76:	bb 27       	eor	r27, r27
    4b78:	aa 27       	eor	r26, r26
    4b7a:	0e d0       	rcall	.+28     	; 0x4b98 <__addsf3x>
    4b7c:	56 cf       	rjmp	.-340    	; 0x4a2a <__fp_round>
    4b7e:	47 df       	rcall	.-370    	; 0x4a0e <__fp_pscA>
    4b80:	30 f0       	brcs	.+12     	; 0x4b8e <__addsf3+0x18>
    4b82:	4c df       	rcall	.-360    	; 0x4a1c <__fp_pscB>
    4b84:	20 f0       	brcs	.+8      	; 0x4b8e <__addsf3+0x18>
    4b86:	31 f4       	brne	.+12     	; 0x4b94 <__addsf3+0x1e>
    4b88:	9f 3f       	cpi	r25, 0xFF	; 255
    4b8a:	11 f4       	brne	.+4      	; 0x4b90 <__addsf3+0x1a>
    4b8c:	1e f4       	brtc	.+6      	; 0x4b94 <__addsf3+0x1e>
    4b8e:	17 cf       	rjmp	.-466    	; 0x49be <__fp_nan>
    4b90:	0e f4       	brtc	.+2      	; 0x4b94 <__addsf3+0x1e>
    4b92:	e0 95       	com	r30
    4b94:	e7 fb       	bst	r30, 7
    4b96:	0d cf       	rjmp	.-486    	; 0x49b2 <__fp_inf>

00004b98 <__addsf3x>:
    4b98:	e9 2f       	mov	r30, r25
    4b9a:	58 df       	rcall	.-336    	; 0x4a4c <__fp_split3>
    4b9c:	80 f3       	brcs	.-32     	; 0x4b7e <__addsf3+0x8>
    4b9e:	ba 17       	cp	r27, r26
    4ba0:	62 07       	cpc	r22, r18
    4ba2:	73 07       	cpc	r23, r19
    4ba4:	84 07       	cpc	r24, r20
    4ba6:	95 07       	cpc	r25, r21
    4ba8:	18 f0       	brcs	.+6      	; 0x4bb0 <__addsf3x+0x18>
    4baa:	71 f4       	brne	.+28     	; 0x4bc8 <__addsf3x+0x30>
    4bac:	9e f5       	brtc	.+102    	; 0x4c14 <__addsf3x+0x7c>
    4bae:	70 cf       	rjmp	.-288    	; 0x4a90 <__fp_zero>
    4bb0:	0e f4       	brtc	.+2      	; 0x4bb4 <__addsf3x+0x1c>
    4bb2:	e0 95       	com	r30
    4bb4:	0b 2e       	mov	r0, r27
    4bb6:	ba 2f       	mov	r27, r26
    4bb8:	a0 2d       	mov	r26, r0
    4bba:	0b 01       	movw	r0, r22
    4bbc:	b9 01       	movw	r22, r18
    4bbe:	90 01       	movw	r18, r0
    4bc0:	0c 01       	movw	r0, r24
    4bc2:	ca 01       	movw	r24, r20
    4bc4:	a0 01       	movw	r20, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	ff 27       	eor	r31, r31
    4bca:	59 1b       	sub	r21, r25
    4bcc:	99 f0       	breq	.+38     	; 0x4bf4 <__addsf3x+0x5c>
    4bce:	59 3f       	cpi	r21, 0xF9	; 249
    4bd0:	50 f4       	brcc	.+20     	; 0x4be6 <__addsf3x+0x4e>
    4bd2:	50 3e       	cpi	r21, 0xE0	; 224
    4bd4:	68 f1       	brcs	.+90     	; 0x4c30 <__addsf3x+0x98>
    4bd6:	1a 16       	cp	r1, r26
    4bd8:	f0 40       	sbci	r31, 0x00	; 0
    4bda:	a2 2f       	mov	r26, r18
    4bdc:	23 2f       	mov	r18, r19
    4bde:	34 2f       	mov	r19, r20
    4be0:	44 27       	eor	r20, r20
    4be2:	58 5f       	subi	r21, 0xF8	; 248
    4be4:	f3 cf       	rjmp	.-26     	; 0x4bcc <__addsf3x+0x34>
    4be6:	46 95       	lsr	r20
    4be8:	37 95       	ror	r19
    4bea:	27 95       	ror	r18
    4bec:	a7 95       	ror	r26
    4bee:	f0 40       	sbci	r31, 0x00	; 0
    4bf0:	53 95       	inc	r21
    4bf2:	c9 f7       	brne	.-14     	; 0x4be6 <__addsf3x+0x4e>
    4bf4:	7e f4       	brtc	.+30     	; 0x4c14 <__addsf3x+0x7c>
    4bf6:	1f 16       	cp	r1, r31
    4bf8:	ba 0b       	sbc	r27, r26
    4bfa:	62 0b       	sbc	r22, r18
    4bfc:	73 0b       	sbc	r23, r19
    4bfe:	84 0b       	sbc	r24, r20
    4c00:	ba f0       	brmi	.+46     	; 0x4c30 <__addsf3x+0x98>
    4c02:	91 50       	subi	r25, 0x01	; 1
    4c04:	a1 f0       	breq	.+40     	; 0x4c2e <__addsf3x+0x96>
    4c06:	ff 0f       	add	r31, r31
    4c08:	bb 1f       	adc	r27, r27
    4c0a:	66 1f       	adc	r22, r22
    4c0c:	77 1f       	adc	r23, r23
    4c0e:	88 1f       	adc	r24, r24
    4c10:	c2 f7       	brpl	.-16     	; 0x4c02 <__addsf3x+0x6a>
    4c12:	0e c0       	rjmp	.+28     	; 0x4c30 <__addsf3x+0x98>
    4c14:	ba 0f       	add	r27, r26
    4c16:	62 1f       	adc	r22, r18
    4c18:	73 1f       	adc	r23, r19
    4c1a:	84 1f       	adc	r24, r20
    4c1c:	48 f4       	brcc	.+18     	; 0x4c30 <__addsf3x+0x98>
    4c1e:	87 95       	ror	r24
    4c20:	77 95       	ror	r23
    4c22:	67 95       	ror	r22
    4c24:	b7 95       	ror	r27
    4c26:	f7 95       	ror	r31
    4c28:	9e 3f       	cpi	r25, 0xFE	; 254
    4c2a:	08 f0       	brcs	.+2      	; 0x4c2e <__addsf3x+0x96>
    4c2c:	b3 cf       	rjmp	.-154    	; 0x4b94 <__addsf3+0x1e>
    4c2e:	93 95       	inc	r25
    4c30:	88 0f       	add	r24, r24
    4c32:	08 f0       	brcs	.+2      	; 0x4c36 <__addsf3x+0x9e>
    4c34:	99 27       	eor	r25, r25
    4c36:	ee 0f       	add	r30, r30
    4c38:	97 95       	ror	r25
    4c3a:	87 95       	ror	r24
    4c3c:	08 95       	ret

00004c3e <__divsf3>:
    4c3e:	5e de       	rcall	.-836    	; 0x48fc <__divsf3x>
    4c40:	f4 ce       	rjmp	.-536    	; 0x4a2a <__fp_round>

00004c42 <__divmodsi4>:
    4c42:	97 fb       	bst	r25, 7
    4c44:	09 2e       	mov	r0, r25
    4c46:	05 26       	eor	r0, r21
    4c48:	0e d0       	rcall	.+28     	; 0x4c66 <__divmodsi4_neg1>
    4c4a:	57 fd       	sbrc	r21, 7
    4c4c:	04 d0       	rcall	.+8      	; 0x4c56 <__divmodsi4_neg2>
    4c4e:	14 d0       	rcall	.+40     	; 0x4c78 <__udivmodsi4>
    4c50:	0a d0       	rcall	.+20     	; 0x4c66 <__divmodsi4_neg1>
    4c52:	00 1c       	adc	r0, r0
    4c54:	38 f4       	brcc	.+14     	; 0x4c64 <__divmodsi4_exit>

00004c56 <__divmodsi4_neg2>:
    4c56:	50 95       	com	r21
    4c58:	40 95       	com	r20
    4c5a:	30 95       	com	r19
    4c5c:	21 95       	neg	r18
    4c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c60:	4f 4f       	sbci	r20, 0xFF	; 255
    4c62:	5f 4f       	sbci	r21, 0xFF	; 255

00004c64 <__divmodsi4_exit>:
    4c64:	08 95       	ret

00004c66 <__divmodsi4_neg1>:
    4c66:	f6 f7       	brtc	.-4      	; 0x4c64 <__divmodsi4_exit>
    4c68:	90 95       	com	r25
    4c6a:	80 95       	com	r24
    4c6c:	70 95       	com	r23
    4c6e:	61 95       	neg	r22
    4c70:	7f 4f       	sbci	r23, 0xFF	; 255
    4c72:	8f 4f       	sbci	r24, 0xFF	; 255
    4c74:	9f 4f       	sbci	r25, 0xFF	; 255
    4c76:	08 95       	ret

00004c78 <__udivmodsi4>:
    4c78:	a1 e2       	ldi	r26, 0x21	; 33
    4c7a:	1a 2e       	mov	r1, r26
    4c7c:	aa 1b       	sub	r26, r26
    4c7e:	bb 1b       	sub	r27, r27
    4c80:	fd 01       	movw	r30, r26
    4c82:	0d c0       	rjmp	.+26     	; 0x4c9e <__udivmodsi4_ep>

00004c84 <__udivmodsi4_loop>:
    4c84:	aa 1f       	adc	r26, r26
    4c86:	bb 1f       	adc	r27, r27
    4c88:	ee 1f       	adc	r30, r30
    4c8a:	ff 1f       	adc	r31, r31
    4c8c:	a2 17       	cp	r26, r18
    4c8e:	b3 07       	cpc	r27, r19
    4c90:	e4 07       	cpc	r30, r20
    4c92:	f5 07       	cpc	r31, r21
    4c94:	20 f0       	brcs	.+8      	; 0x4c9e <__udivmodsi4_ep>
    4c96:	a2 1b       	sub	r26, r18
    4c98:	b3 0b       	sbc	r27, r19
    4c9a:	e4 0b       	sbc	r30, r20
    4c9c:	f5 0b       	sbc	r31, r21

00004c9e <__udivmodsi4_ep>:
    4c9e:	66 1f       	adc	r22, r22
    4ca0:	77 1f       	adc	r23, r23
    4ca2:	88 1f       	adc	r24, r24
    4ca4:	99 1f       	adc	r25, r25
    4ca6:	1a 94       	dec	r1
    4ca8:	69 f7       	brne	.-38     	; 0x4c84 <__udivmodsi4_loop>
    4caa:	60 95       	com	r22
    4cac:	70 95       	com	r23
    4cae:	80 95       	com	r24
    4cb0:	90 95       	com	r25
    4cb2:	9b 01       	movw	r18, r22
    4cb4:	ac 01       	movw	r20, r24
    4cb6:	bd 01       	movw	r22, r26
    4cb8:	cf 01       	movw	r24, r30
    4cba:	08 95       	ret

00004cbc <_exit>:
    4cbc:	ff cf       	rjmp	.-2      	; 0x4cbc <_exit>
