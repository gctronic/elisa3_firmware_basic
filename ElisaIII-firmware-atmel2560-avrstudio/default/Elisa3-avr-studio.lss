
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00004f90  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000135  00800324  00800324  00005148  2**0
                  ALLOC
  3 .stab         000024b4  00000000  00000000  00005148  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007c9  00000000  00000000  000075fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00007dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f7a  00000000  00000000  0000807d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000041f2  00000000  00000000  00008ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016ba  00000000  00000000  0000d1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b8c  00000000  00000000  0000e8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000700  00000000  00000000  00013430  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f48  00000000  00000000  00013b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015a8  00000000  00000000  00014a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000020d  00000000  00000000  00016020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000158  00000000  00000000  0001622d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_32>
      84:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__vector_42>
      ac:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	43 09       	sbc	r20, r3
      e6:	27 09       	sbc	r18, r7
      e8:	f5 08       	sbc	r15, r5
      ea:	b8 09       	sbc	r27, r8
      ec:	82 09       	sbc	r24, r2
      ee:	ab 09       	sbc	r26, r11
      f0:	cc 08       	sbc	r12, r12
      f2:	b0 08       	sbc	r11, r0
      f4:	83 08       	sbc	r8, r3
      f6:	6b 08       	sbc	r6, r11
      f8:	0c 08       	sbc	r0, r12
      fa:	0c 08       	sbc	r0, r12
      fc:	0c 08       	sbc	r0, r12
      fe:	0c 08       	sbc	r0, r12
     100:	0c 08       	sbc	r0, r12
     102:	0c 08       	sbc	r0, r12
     104:	5f 08       	sbc	r5, r15
     106:	54 08       	sbc	r5, r4
     108:	0c 08       	sbc	r0, r12
     10a:	0c 08       	sbc	r0, r12
     10c:	0c 08       	sbc	r0, r12
     10e:	0c 08       	sbc	r0, r12
     110:	0c 08       	sbc	r0, r12
     112:	0c 08       	sbc	r0, r12
     114:	0c 08       	sbc	r0, r12
     116:	0c 08       	sbc	r0, r12
     118:	0c 08       	sbc	r0, r12
     11a:	0c 08       	sbc	r0, r12
     11c:	0c 08       	sbc	r0, r12
     11e:	0c 08       	sbc	r0, r12
     120:	83 08       	sbc	r8, r3
     122:	f5 08       	sbc	r15, r5
     124:	48 08       	sbc	r4, r8
     126:	43 08       	sbc	r4, r3
     128:	0c 08       	sbc	r0, r12
     12a:	0c 08       	sbc	r0, r12
     12c:	0c 08       	sbc	r0, r12
     12e:	0c 08       	sbc	r0, r12
     130:	0c 08       	sbc	r0, r12
     132:	0c 08       	sbc	r0, r12
     134:	0c 08       	sbc	r0, r12
     136:	0c 08       	sbc	r0, r12
     138:	0c 08       	sbc	r0, r12
     13a:	0c 08       	sbc	r0, r12
     13c:	0c 08       	sbc	r0, r12
     13e:	0c 08       	sbc	r0, r12
     140:	82 09       	sbc	r24, r2
     142:	cc 08       	sbc	r12, r12
     144:	0c 08       	sbc	r0, r12
     146:	0c 08       	sbc	r0, r12
     148:	43 09       	sbc	r20, r3
     14a:	ab 09       	sbc	r26, r11
     14c:	6c 09       	sbc	r22, r12
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e0 e9       	ldi	r30, 0x90	; 144
     194:	ff e4       	ldi	r31, 0x4F	; 79
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a9 35       	cpi	r26, 0x59	; 89
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	0f 93       	push	r16
     1c4:	1f 93       	push	r17

	unsigned long int startTime = 0, endTime = 0;

	initPeripherals();
     1c6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <initPeripherals>

	calibrateSensors();
     1ca:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <calibrateSensors>

	initBehaviors();
     1ce:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <initBehaviors>

	startTime = getTime100MicroSec();
     1d2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <getTime100MicroSec>
     1d6:	7b 01       	movw	r14, r22
     1d8:	8c 01       	movw	r16, r24

	setRightSpeed(50);
     1da:	82 e3       	ldi	r24, 0x32	; 50
     1dc:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <setRightSpeed>
     1e0:	06 c0       	rjmp	.+12     	; 0x1ee <main+0x30>
			startTime = getTime100MicroSec();
			setRightSpeed(-50);
		}


		handleIRRemoteCommands();
     1e2:	0e 94 fa 07 	call	0xff4	; 0xff4 <handleIRRemoteCommands>


		handleRFCommands();
     1e6:	0e 94 df 02 	call	0x5be	; 0x5be <handleRFCommands>


		handleMotorsWithSpeedController();
     1ea:	0e 94 28 16 	call	0x2c50	; 0x2c50 <handleMotorsWithSpeedController>

	setRightSpeed(50);

	while(1) {

		currentSelector = getSelector();	// update selector position
     1ee:	0e 94 3e 11 	call	0x227c	; 0x227c <getSelector>
     1f2:	80 93 25 04 	sts	0x0425, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1f6:	0e 94 84 1c 	call	0x3908	; 0x3908 <readAccelXYZ>

		computeAngle();
     1fa:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <computeAngle>
	
		endTime = getTime100MicroSec();
     1fe:	0e 94 50 12 	call	0x24a0	; 0x24a0 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     202:	6e 19       	sub	r22, r14
     204:	7f 09       	sbc	r23, r15
     206:	80 0b       	sbc	r24, r16
     208:	91 0b       	sbc	r25, r17
     20a:	6e 31       	cpi	r22, 0x1E	; 30
     20c:	2b e4       	ldi	r18, 0x4B	; 75
     20e:	72 07       	cpc	r23, r18
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	82 07       	cpc	r24, r18
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	92 07       	cpc	r25, r18
     218:	20 f3       	brcs	.-56     	; 0x1e2 <main+0x24>
			readBatteryLevel();				// the battery level is updated every two seconds
     21a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <readBatteryLevel>
			startTime = getTime100MicroSec();
     21e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <getTime100MicroSec>
     222:	7b 01       	movw	r14, r22
     224:	8c 01       	movw	r16, r24
			setRightSpeed(-50);
     226:	8e ec       	ldi	r24, 0xCE	; 206
     228:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <setRightSpeed>
     22c:	da cf       	rjmp	.-76     	; 0x1e2 <main+0x24>

0000022e <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     22e:	84 b1       	in	r24, 0x04	; 4
     230:	80 7f       	andi	r24, 0xF0	; 240
     232:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     234:	84 b1       	in	r24, 0x04	; 4
     236:	87 60       	ori	r24, 0x07	; 7
     238:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     23a:	80 e5       	ldi	r24, 0x50	; 80
     23c:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     23e:	8d b5       	in	r24, 0x2d	; 45
     240:	81 60       	ori	r24, 0x01	; 1
     242:	8d bd       	out	0x2d, r24	; 45

}
     244:	08 95       	ret

00000246 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     246:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     248:	1d bc       	out	0x2d, r1	; 45
}
     24a:	08 95       	ret

0000024c <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     24c:	44 23       	and	r20, r20
     24e:	79 f0       	breq	.+30     	; 0x26e <SPI_ReadWrite_Block+0x22>
     250:	a8 2f       	mov	r26, r24
     252:	b9 2f       	mov	r27, r25
     254:	e6 2f       	mov	r30, r22
     256:	f7 2f       	mov	r31, r23
     258:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     25a:	9d 91       	ld	r25, X+
     25c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     25e:	0d b4       	in	r0, 0x2d	; 45
     260:	07 fe       	sbrs	r0, 7
     262:	fd cf       	rjmp	.-6      	; 0x25e <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     264:	9e b5       	in	r25, 0x2e	; 46
     266:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	84 17       	cp	r24, r20
     26c:	b0 f3       	brcs	.-20     	; 0x25a <SPI_ReadWrite_Block+0xe>
     26e:	08 95       	ret

00000270 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     270:	66 23       	and	r22, r22
     272:	59 f0       	breq	.+22     	; 0x28a <SPI_Write_Block+0x1a>
     274:	e8 2f       	mov	r30, r24
     276:	f9 2f       	mov	r31, r25
     278:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     27a:	91 91       	ld	r25, Z+
     27c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     284:	8f 5f       	subi	r24, 0xFF	; 255
     286:	86 17       	cp	r24, r22
     288:	c0 f3       	brcs	.-16     	; 0x27a <SPI_Write_Block+0xa>
     28a:	08 95       	ret

0000028c <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     28c:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     28e:	0d b4       	in	r0, 0x2d	; 45
     290:	07 fe       	sbrs	r0, 7
     292:	fd cf       	rjmp	.-6      	; 0x28e <SPI_Write_Byte+0x2>
    return SPDR;
     294:	8e b5       	in	r24, 0x2e	; 46
}
     296:	08 95       	ret

00000298 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	df 93       	push	r29
     29e:	cf 93       	push	r28
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <mirf_config+0xa>
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     2a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     2a8:	80 e2       	ldi	r24, 0x20	; 32
     2aa:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     2ae:	8d e0       	ldi	r24, 0x0D	; 13
     2b0:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     2b4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     2b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     2b8:	83 e2       	ldi	r24, 0x23	; 35
     2ba:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     2c4:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     2c6:	80 91 03 04 	lds	r24, 0x0403
     2ca:	90 91 04 04 	lds	r25, 0x0404
     2ce:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     2d0:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     2d2:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     2d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     2d6:	80 e3       	ldi	r24, 0x30	; 48
     2d8:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     2dc:	8e 01       	movw	r16, r28
     2de:	0f 5f       	subi	r16, 0xFF	; 255
     2e0:	1f 4f       	sbci	r17, 0xFF	; 255
     2e2:	c8 01       	movw	r24, r16
     2e4:	63 e0       	ldi	r22, 0x03	; 3
     2e6:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Write_Block>
    mirf_CSN_hi;
     2ea:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     2ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     2ee:	8a e2       	ldi	r24, 0x2A	; 42
     2f0:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     2f4:	c8 01       	movw	r24, r16
     2f6:	63 e0       	ldi	r22, 0x03	; 3
     2f8:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Write_Block>
    mirf_CSN_hi;
     2fc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     2fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     300:	81 e2       	ldi	r24, 0x21	; 33
     302:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     30c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     30e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     310:	82 e2       	ldi	r24, 0x22	; 34
     312:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     31c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     31e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     320:	84 e2       	ldi	r24, 0x24	; 36
     322:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     326:	82 e1       	ldi	r24, 0x12	; 18
     328:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     32c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     32e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     330:	85 e2       	ldi	r24, 0x25	; 37
     332:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     336:	88 e2       	ldi	r24, 0x28	; 40
     338:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     33c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     33e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     340:	81 e3       	ldi	r24, 0x31	; 49
     342:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     346:	8d e0       	ldi	r24, 0x0D	; 13
     348:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     34c:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     34e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     350:	80 e5       	ldi	r24, 0x50	; 80
     352:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     356:	83 e7       	ldi	r24, 0x73	; 115
     358:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     35c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     35e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     360:	8c e3       	ldi	r24, 0x3C	; 60
     362:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     36c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     36e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     370:	8d e3       	ldi	r24, 0x3D	; 61
     372:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     37c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     37e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     380:	80 e2       	ldi	r24, 0x20	; 32
     382:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     386:	8f e0       	ldi	r24, 0x0F	; 15
     388:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     38c:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     39e:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     3a0:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     3a2:	0e 94 4c 01 	call	0x298	; 0x298 <mirf_config>
}
     3a6:	08 95       	ret

000003a8 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     3ae:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     3b0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     3b2:	8a e2       	ldi	r24, 0x2A	; 42
     3b4:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     3b8:	ce 01       	movw	r24, r28
     3ba:	65 e0       	ldi	r22, 0x05	; 5
     3bc:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Write_Block>
    mirf_CSN_hi;
     3c0:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     3c2:	2c 9a       	sbi	0x05, 4	; 5
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     3d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     3d2:	80 e3       	ldi	r24, 0x30	; 48
     3d4:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     3d8:	ce 01       	movw	r24, r28
     3da:	65 e0       	ldi	r22, 0x05	; 5
     3dc:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Write_Block>
    mirf_CSN_hi;
     3e0:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     3e8:	80 91 2c 04 	lds	r24, 0x042C
     3ec:	88 23       	and	r24, r24
     3ee:	11 f0       	breq	.+4      	; 0x3f4 <mirf_data_ready+0xc>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     3f2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     3f4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     3fc:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     3fe:	80 74       	andi	r24, 0x40	; 64
     400:	08 95       	ret

00000402 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	0f 92       	push	r0
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     40c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     40e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     410:	87 e1       	ldi	r24, 0x17	; 23
     412:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     416:	be 01       	movw	r22, r28
     418:	6f 5f       	subi	r22, 0xFF	; 255
     41a:	7f 4f       	sbci	r23, 0xFF	; 255
     41c:	cb 01       	movw	r24, r22
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     424:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     426:	89 81       	ldd	r24, Y+1	; 0x01
}
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	0f 90       	pop	r0
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     432:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     434:	82 ee       	ldi	r24, 0xE2	; 226
     436:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     43a:	28 9a       	sbi	0x05, 0	; 5

}
     43c:	08 95       	ret

0000043e <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     444:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     446:	81 e6       	ldi	r24, 0x61	; 97
     448:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     44c:	ce 01       	movw	r24, r28
     44e:	be 01       	movw	r22, r28
     450:	4d e0       	ldi	r20, 0x0D	; 13
     452:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     456:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     458:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     45a:	87 e2       	ldi	r24, 0x27	; 39
     45c:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     466:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0f 92       	push	r0
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     478:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     47a:	8f 71       	andi	r24, 0x1F	; 31
     47c:	80 62       	ori	r24, 0x20	; 32
     47e:	69 83       	std	Y+1, r22	; 0x01
     480:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     484:	69 81       	ldd	r22, Y+1	; 0x01
     486:	86 2f       	mov	r24, r22
     488:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     48c:	28 9a       	sbi	0x05, 0	; 5
}
     48e:	0f 90       	pop	r0
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	0f 92       	push	r0
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     4a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     4a8:	8f 71       	andi	r24, 0x1F	; 31
     4aa:	49 83       	std	Y+1, r20	; 0x01
     4ac:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     4b0:	c8 01       	movw	r24, r16
     4b2:	b8 01       	movw	r22, r16
     4b4:	49 81       	ldd	r20, Y+1	; 0x01
     4b6:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     4ba:	28 9a       	sbi	0x05, 0	; 5
}
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	0f 92       	push	r0
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     4d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4da:	8f 71       	andi	r24, 0x1F	; 31
     4dc:	80 62       	ori	r24, 0x20	; 32
     4de:	49 83       	std	Y+1, r20	; 0x01
     4e0:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     4e4:	c8 01       	movw	r24, r16
     4e6:	49 81       	ldd	r20, Y+1	; 0x01
     4e8:	64 2f       	mov	r22, r20
     4ea:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Write_Block>
    mirf_CSN_hi;
     4ee:	28 9a       	sbi	0x05, 0	; 5
}
     4f0:	0f 90       	pop	r0
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     50c:	80 91 2c 04 	lds	r24, 0x042C
     510:	88 23       	and	r24, r24
     512:	e1 f7       	brne	.-8      	; 0x50c <mirf_send+0x10>

    mirf_CE_lo;
     514:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 2c 04 	sts	0x042C, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     51c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     51e:	80 e2       	ldi	r24, 0x20	; 32
     520:	69 83       	std	Y+1, r22	; 0x01
     522:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     526:	8a e4       	ldi	r24, 0x4A	; 74
     528:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     52c:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     52e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     530:	81 ee       	ldi	r24, 0xE1	; 225
     532:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     536:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     538:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     53a:	80 ea       	ldi	r24, 0xA0	; 160
     53c:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     540:	c8 01       	movw	r24, r16
     542:	69 81       	ldd	r22, Y+1	; 0x01
     544:	0e 94 38 01 	call	0x270	; 0x270 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     548:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     54a:	2c 9a       	sbi	0x05, 4	; 5
}
     54c:	0f 90       	pop	r0
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	08 95       	ret

00000558 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	0f 92       	push	r0
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	18 2f       	mov	r17, r24
     56c:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     56e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     570:	81 ee       	ldi	r24, 0xE1	; 225
     572:	99 83       	std	Y+1, r25	; 0x01
     574:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     578:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     57a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     57c:	88 ea       	ldi	r24, 0xA8	; 168
     57e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     582:	99 81       	ldd	r25, Y+1	; 0x01
     584:	00 23       	and	r16, r16
     586:	61 f0       	breq	.+24     	; 0x5a0 <writeAckPayload+0x48>
     588:	61 2f       	mov	r22, r17
     58a:	79 2f       	mov	r23, r25
     58c:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     58e:	f7 01       	movw	r30, r14
     590:	81 91       	ld	r24, Z+
     592:	7f 01       	movw	r14, r30
     594:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     598:	8e 2d       	mov	r24, r14
     59a:	81 1b       	sub	r24, r17
     59c:	80 17       	cp	r24, r16
     59e:	b8 f3       	brcs	.-18     	; 0x58e <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     5a0:	28 9a       	sbi	0x05, 0	; 5


}
     5a2:	0f 90       	pop	r0
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     5b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     5b4:	81 ee       	ldi	r24, 0xE1	; 225
     5b6:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     5ba:	28 9a       	sbi	0x05, 0	; 5

}
     5bc:	08 95       	ret

000005be <handleRFCommands>:

void handleRFCommands() {
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     5c4:	80 91 2c 04 	lds	r24, 0x042C
     5c8:	88 23       	and	r24, r24
     5ca:	21 f0       	breq	.+8      	; 0x5d4 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     5d4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     5dc:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     5de:	86 ff       	sbrs	r24, 6
     5e0:	f5 cf       	rjmp	.-22     	; 0x5cc <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5e2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5e4:	87 e2       	ldi	r24, 0x27	; 39
     5e6:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ea:	80 e7       	ldi	r24, 0x70	; 112
     5ec:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     5f0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     5f2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     5f4:	81 e6       	ldi	r24, 0x61	; 97
     5f6:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     5fa:	89 e4       	ldi	r24, 0x49	; 73
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	bc 01       	movw	r22, r24
     600:	4d e0       	ldi	r20, 0x0D	; 13
     602:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     606:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     608:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     60a:	87 e2       	ldi	r24, 0x27	; 39
     60c:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    SPI_Write_Byte(value);
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     616:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     618:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     61a:	82 ee       	ldi	r24, 0xE2	; 226
     61c:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     620:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     622:	60 91 49 04 	lds	r22, 0x0449
     626:	66 23       	and	r22, r22
     628:	09 f4       	brne	.+2      	; 0x62c <handleRFCommands+0x6e>
     62a:	b8 c1       	rjmp	.+880    	; 0x99c <handleRFCommands+0x3de>
     62c:	50 91 4d 04 	lds	r21, 0x044D
     630:	40 91 4e 04 	lds	r20, 0x044E
     634:	e0 91 4a 04 	lds	r30, 0x044A
     638:	70 91 4b 04 	lds	r23, 0x044B

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     63c:	25 2f       	mov	r18, r21
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	2f 77       	andi	r18, 0x7F	; 127
     642:	30 70       	andi	r19, 0x00	; 0
     644:	30 93 02 04 	sts	0x0402, r19
     648:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     64c:	84 2f       	mov	r24, r20
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8f 77       	andi	r24, 0x7F	; 127
     652:	90 70       	andi	r25, 0x00	; 0
     654:	90 93 00 04 	sts	0x0400, r25
     658:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     65c:	57 fd       	sbrc	r21, 7
     65e:	a6 c2       	rjmp	.+1356   	; 0xbac <handleRFCommands+0x5ee>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	30 95       	com	r19
     66a:	21 95       	neg	r18
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	30 93 f0 03 	sts	0x03F0, r19
     672:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     676:	47 fd       	sbrc	r20, 7
     678:	a3 c2       	rjmp	.+1350   	; 0xbc0 <handleRFCommands+0x602>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	90 95       	com	r25
     684:	81 95       	neg	r24
     686:	9f 4f       	sbci	r25, 0xFF	; 255
     688:	90 93 f2 03 	sts	0x03F2, r25
     68c:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     690:	42 e0       	ldi	r20, 0x02	; 2
     692:	21 30       	cpi	r18, 0x01	; 1
     694:	34 07       	cpc	r19, r20
     696:	44 f0       	brlt	.+16     	; 0x6a8 <handleRFCommands+0xea>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	52 e0       	ldi	r21, 0x02	; 2
     69c:	50 93 f0 03 	sts	0x03F0, r21
     6a0:	40 93 ef 03 	sts	0x03EF, r20
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     6a8:	42 e0       	ldi	r20, 0x02	; 2
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	94 07       	cpc	r25, r20
     6ae:	34 f0       	brlt	.+12     	; 0x6bc <handleRFCommands+0xfe>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	90 93 f2 03 	sts	0x03F2, r25
     6b8:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     6bc:	4e ef       	ldi	r20, 0xFE	; 254
     6be:	20 30       	cpi	r18, 0x00	; 0
     6c0:	34 07       	cpc	r19, r20
     6c2:	34 f4       	brge	.+12     	; 0x6d0 <handleRFCommands+0x112>
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	5e ef       	ldi	r21, 0xFE	; 254
     6c8:	50 93 f0 03 	sts	0x03F0, r21
     6cc:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     6d0:	2e ef       	ldi	r18, 0xFE	; 254
     6d2:	80 30       	cpi	r24, 0x00	; 0
     6d4:	92 07       	cpc	r25, r18
     6d6:	34 f4       	brge	.+12     	; 0x6e4 <handleRFCommands+0x126>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	9e ef       	ldi	r25, 0xFE	; 254
     6dc:	90 93 f2 03 	sts	0x03F2, r25
     6e0:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     6e4:	26 2f       	mov	r18, r22
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	30 93 42 04 	sts	0x0442, r19
     6ec:	20 93 41 04 	sts	0x0441, r18
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	f0 93 44 04 	sts	0x0444, r31
     6f6:	e0 93 43 04 	sts	0x0443, r30
     6fa:	c7 2f       	mov	r28, r23
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
     6fe:	d0 93 46 04 	sts	0x0446, r29
     702:	c0 93 45 04 	sts	0x0445, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     706:	92 2f       	mov	r25, r18
     708:	88 27       	eor	r24, r24
     70a:	82 1b       	sub	r24, r18
     70c:	93 0b       	sbc	r25, r19
     70e:	24 e6       	ldi	r18, 0x64	; 100
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	b9 01       	movw	r22, r18
     714:	0e 94 a8 24 	call	0x4950	; 0x4950 <__udivmodhi4>
     718:	16 2f       	mov	r17, r22
     71a:	10 95       	com	r17
     71c:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     720:	5e 2f       	mov	r21, r30
     722:	44 27       	eor	r20, r20
     724:	4e 1b       	sub	r20, r30
     726:	5f 0b       	sbc	r21, r31
     728:	ca 01       	movw	r24, r20
     72a:	b9 01       	movw	r22, r18
     72c:	0e 94 a8 24 	call	0x4950	; 0x4950 <__udivmodhi4>
     730:	60 95       	com	r22
     732:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     736:	5c 2f       	mov	r21, r28
     738:	44 27       	eor	r20, r20
     73a:	4c 1b       	sub	r20, r28
     73c:	5d 0b       	sbc	r21, r29
     73e:	ca 01       	movw	r24, r20
     740:	b9 01       	movw	r22, r18
     742:	0e 94 a8 24 	call	0x4950	; 0x4950 <__udivmodhi4>
     746:	60 95       	com	r22
     748:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     74c:	81 2f       	mov	r24, r17
     74e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <updateRedLed>
		updateGreenLed(pwm_green);
     752:	80 91 0d 02 	lds	r24, 0x020D
     756:	0e 94 2f 1b 	call	0x365e	; 0x365e <updateGreenLed>
		updateBlueLed(pwm_blue);
     75a:	80 91 0e 02 	lds	r24, 0x020E
     75e:	0e 94 43 1b 	call	0x3686	; 0x3686 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     762:	80 91 4c 04 	lds	r24, 0x044C
     766:	80 ff       	sbrs	r24, 0
     768:	25 c1       	rjmp	.+586    	; 0x9b4 <handleRFCommands+0x3f6>
			LED_IR1_LOW;
     76a:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     76c:	81 ff       	sbrs	r24, 1
     76e:	25 c1       	rjmp	.+586    	; 0x9ba <handleRFCommands+0x3fc>
			LED_IR2_LOW;
     770:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     772:	98 2f       	mov	r25, r24
     774:	82 ff       	sbrs	r24, 2
     776:	25 c1       	rjmp	.+586    	; 0x9c2 <handleRFCommands+0x404>
			irEnabled = 1;
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     77e:	84 fd       	sbrc	r24, 4
     780:	24 c1       	rjmp	.+584    	; 0x9ca <handleRFCommands+0x40c>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     782:	86 ff       	sbrs	r24, 6
     784:	29 c1       	rjmp	.+594    	; 0x9d8 <handleRFCommands+0x41a>
			obstacleAvoidanceEnabled = 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 29 04 	sts	0x0429, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     78c:	97 fd       	sbrc	r25, 7
     78e:	28 c1       	rjmp	.+592    	; 0x9e0 <handleRFCommands+0x422>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     790:	10 92 2a 04 	sts	0x042A, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     794:	80 91 4f 04 	lds	r24, 0x044F
     798:	80 ff       	sbrs	r24, 0
     79a:	29 c1       	rjmp	.+594    	; 0x9ee <handleRFCommands+0x430>
				GRREEN_LED0_ON;
     79c:	80 91 0b 01 	lds	r24, 0x010B
     7a0:	8e 7f       	andi	r24, 0xFE	; 254
     7a2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     7a6:	80 91 4f 04 	lds	r24, 0x044F
     7aa:	81 ff       	sbrs	r24, 1
     7ac:	29 c1       	rjmp	.+594    	; 0xa00 <handleRFCommands+0x442>
				GRREEN_LED1_ON;
     7ae:	80 91 0b 01 	lds	r24, 0x010B
     7b2:	8d 7f       	andi	r24, 0xFD	; 253
     7b4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     7b8:	80 91 4f 04 	lds	r24, 0x044F
     7bc:	82 ff       	sbrs	r24, 2
     7be:	29 c1       	rjmp	.+594    	; 0xa12 <handleRFCommands+0x454>
				GRREEN_LED2_ON;
     7c0:	80 91 0b 01 	lds	r24, 0x010B
     7c4:	8b 7f       	andi	r24, 0xFB	; 251
     7c6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     7ca:	80 91 4f 04 	lds	r24, 0x044F
     7ce:	83 ff       	sbrs	r24, 3
     7d0:	29 c1       	rjmp	.+594    	; 0xa24 <handleRFCommands+0x466>
				GRREEN_LED3_ON;
     7d2:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GRREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     7d4:	80 91 4f 04 	lds	r24, 0x044F
     7d8:	84 ff       	sbrs	r24, 4
     7da:	29 c1       	rjmp	.+594    	; 0xa2e <handleRFCommands+0x470>
				GRREEN_LED4_ON;
     7dc:	80 91 0b 01 	lds	r24, 0x010B
     7e0:	8f 7e       	andi	r24, 0xEF	; 239
     7e2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     7e6:	80 91 4f 04 	lds	r24, 0x044F
     7ea:	85 ff       	sbrs	r24, 5
     7ec:	29 c1       	rjmp	.+594    	; 0xa40 <handleRFCommands+0x482>
				GRREEN_LED5_ON;
     7ee:	80 91 0b 01 	lds	r24, 0x010B
     7f2:	8f 7d       	andi	r24, 0xDF	; 223
     7f4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     7f8:	80 91 4f 04 	lds	r24, 0x044F
     7fc:	86 ff       	sbrs	r24, 6
     7fe:	29 c1       	rjmp	.+594    	; 0xa52 <handleRFCommands+0x494>
				GRREEN_LED6_ON;
     800:	80 91 0b 01 	lds	r24, 0x010B
     804:	8f 7b       	andi	r24, 0xBF	; 191
     806:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     80a:	80 91 4f 04 	lds	r24, 0x044F
     80e:	87 fd       	sbrc	r24, 7
     810:	29 c1       	rjmp	.+594    	; 0xa64 <handleRFCommands+0x4a6>
				GRREEN_LED7_ON;
			} else {
				GRREEN_LED7_OFF;
     812:	80 91 0b 01 	lds	r24, 0x010B
     816:	80 68       	ori	r24, 0x80	; 128
     818:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     81c:	80 91 0b 02 	lds	r24, 0x020B
     820:	80 93 31 04 	sts	0x0431, r24

		switch(packetId) {
     824:	84 30       	cpi	r24, 0x04	; 4
     826:	09 f4       	brne	.+2      	; 0x82a <handleRFCommands+0x26c>
     828:	29 c1       	rjmp	.+594    	; 0xa7c <handleRFCommands+0x4be>
     82a:	85 30       	cpi	r24, 0x05	; 5
     82c:	08 f0       	brcs	.+2      	; 0x830 <handleRFCommands+0x272>
     82e:	66 c1       	rjmp	.+716    	; 0xafc <handleRFCommands+0x53e>
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	09 f0       	breq	.+2      	; 0x836 <handleRFCommands+0x278>
     834:	65 c0       	rjmp	.+202    	; 0x900 <handleRFCommands+0x342>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     836:	90 91 5f 03 	lds	r25, 0x035F
     83a:	80 91 60 03 	lds	r24, 0x0360
     83e:	90 93 32 04 	sts	0x0432, r25
				ackPayload[2] = proximityResult[0]>>8;
     842:	80 93 33 04 	sts	0x0433, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     846:	90 91 61 03 	lds	r25, 0x0361
     84a:	80 91 62 03 	lds	r24, 0x0362
     84e:	90 93 34 04 	sts	0x0434, r25
				ackPayload[4] = proximityResult[1]>>8;
     852:	80 93 35 04 	sts	0x0435, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     856:	90 91 63 03 	lds	r25, 0x0363
     85a:	80 91 64 03 	lds	r24, 0x0364
     85e:	90 93 36 04 	sts	0x0436, r25
				ackPayload[6] = proximityResult[2]>>8;
     862:	80 93 37 04 	sts	0x0437, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     866:	90 91 65 03 	lds	r25, 0x0365
     86a:	80 91 66 03 	lds	r24, 0x0366
     86e:	90 93 38 04 	sts	0x0438, r25
				ackPayload[8] = proximityResult[3]>>8;
     872:	80 93 39 04 	sts	0x0439, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     876:	90 91 69 03 	lds	r25, 0x0369
     87a:	80 91 6a 03 	lds	r24, 0x036A
     87e:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[10] = proximityResult[5]>>8;
     882:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     886:	90 91 6b 03 	lds	r25, 0x036B
     88a:	80 91 6c 03 	lds	r24, 0x036C
     88e:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[12] = proximityResult[6]>>8;
     892:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     896:	90 91 6d 03 	lds	r25, 0x036D
     89a:	80 91 6e 03 	lds	r24, 0x036E
     89e:	90 93 3e 04 	sts	0x043E, r25
				ackPayload[14] = proximityResult[7]>>8;
     8a2:	80 93 3f 04 	sts	0x043F, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     8a6:	30 91 03 01 	lds	r19, 0x0103
     8aa:	80 91 03 01 	lds	r24, 0x0103
     8ae:	20 91 03 01 	lds	r18, 0x0103
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	80 72       	andi	r24, 0x20	; 32
     8b6:	90 70       	andi	r25, 0x00	; 0
     8b8:	95 95       	asr	r25
     8ba:	87 95       	ror	r24
     8bc:	95 95       	asr	r25
     8be:	87 95       	ror	r24
     8c0:	95 95       	asr	r25
     8c2:	87 95       	ror	r24
     8c4:	95 95       	asr	r25
     8c6:	87 95       	ror	r24
     8c8:	95 95       	asr	r25
     8ca:	87 95       	ror	r24
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	22 1f       	adc	r18, r18
     8d2:	22 27       	eor	r18, r18
     8d4:	22 1f       	adc	r18, r18
     8d6:	22 0f       	add	r18, r18
     8d8:	22 0f       	add	r18, r18
     8da:	28 2b       	or	r18, r24
     8dc:	83 2f       	mov	r24, r19
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 71       	andi	r24, 0x10	; 16
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	95 95       	asr	r25
     8e6:	87 95       	ror	r24
     8e8:	95 95       	asr	r25
     8ea:	87 95       	ror	r24
     8ec:	95 95       	asr	r25
     8ee:	87 95       	ror	r24
     8f0:	95 95       	asr	r25
     8f2:	87 95       	ror	r24
     8f4:	28 2b       	or	r18, r24
     8f6:	20 93 40 04 	sts	0x0440, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     900:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     902:	81 ee       	ldi	r24, 0xE1	; 225
     904:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
    mirf_CSN_hi;
     908:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     90a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     90c:	88 ea       	ldi	r24, 0xA8	; 168
     90e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     912:	80 91 31 04 	lds	r24, 0x0431
     916:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     91a:	80 91 32 04 	lds	r24, 0x0432
     91e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     922:	80 91 33 04 	lds	r24, 0x0433
     926:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     92a:	80 91 34 04 	lds	r24, 0x0434
     92e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     932:	80 91 35 04 	lds	r24, 0x0435
     936:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     93a:	80 91 36 04 	lds	r24, 0x0436
     93e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     942:	80 91 37 04 	lds	r24, 0x0437
     946:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     94a:	80 91 38 04 	lds	r24, 0x0438
     94e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     952:	80 91 39 04 	lds	r24, 0x0439
     956:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     95a:	80 91 3a 04 	lds	r24, 0x043A
     95e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     962:	80 91 3b 04 	lds	r24, 0x043B
     966:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     96a:	80 91 3c 04 	lds	r24, 0x043C
     96e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     972:	80 91 3d 04 	lds	r24, 0x043D
     976:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     97a:	80 91 3e 04 	lds	r24, 0x043E
     97e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     982:	80 91 3f 04 	lds	r24, 0x043F
     986:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
     98a:	80 91 40 04 	lds	r24, 0x0440
     98e:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     992:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     99c:	e0 91 4a 04 	lds	r30, 0x044A
     9a0:	ee 23       	and	r30, r30
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <handleRFCommands+0x3e8>
     9a4:	16 c1       	rjmp	.+556    	; 0xbd2 <handleRFCommands+0x614>
     9a6:	50 91 4d 04 	lds	r21, 0x044D
     9aa:	40 91 4e 04 	lds	r20, 0x044E
     9ae:	70 91 4b 04 	lds	r23, 0x044B
     9b2:	44 ce       	rjmp	.-888    	; 0x63c <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     9b4:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     9b6:	81 fd       	sbrc	r24, 1
     9b8:	db ce       	rjmp	.-586    	; 0x770 <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     9ba:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     9bc:	98 2f       	mov	r25, r24
     9be:	82 fd       	sbrc	r24, 2
     9c0:	db ce       	rjmp	.-586    	; 0x778 <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     9c2:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     9c6:	84 ff       	sbrs	r24, 4
     9c8:	dc ce       	rjmp	.-584    	; 0x782 <handleRFCommands+0x1c4>
			calibrateSensors();
     9ca:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <calibrateSensors>
     9ce:	90 91 4c 04 	lds	r25, 0x044C
     9d2:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     9d4:	86 fd       	sbrc	r24, 6
     9d6:	d7 ce       	rjmp	.-594    	; 0x786 <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     9d8:	10 92 29 04 	sts	0x0429, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     9dc:	97 ff       	sbrs	r25, 7
     9de:	d8 ce       	rjmp	.-592    	; 0x790 <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 2a 04 	sts	0x042A, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     9e6:	80 91 4f 04 	lds	r24, 0x044F
     9ea:	80 fd       	sbrc	r24, 0
     9ec:	d7 ce       	rjmp	.-594    	; 0x79c <handleRFCommands+0x1de>
				GRREEN_LED0_ON;
			} else {
				GRREEN_LED0_OFF;
     9ee:	80 91 0b 01 	lds	r24, 0x010B
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     9f8:	80 91 4f 04 	lds	r24, 0x044F
     9fc:	81 fd       	sbrc	r24, 1
     9fe:	d7 ce       	rjmp	.-594    	; 0x7ae <handleRFCommands+0x1f0>
				GRREEN_LED1_ON;
			} else {
				GRREEN_LED1_OFF;
     a00:	80 91 0b 01 	lds	r24, 0x010B
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     a0a:	80 91 4f 04 	lds	r24, 0x044F
     a0e:	82 fd       	sbrc	r24, 2
     a10:	d7 ce       	rjmp	.-594    	; 0x7c0 <handleRFCommands+0x202>
				GRREEN_LED2_ON;
			} else {
				GRREEN_LED2_OFF;
     a12:	80 91 0b 01 	lds	r24, 0x010B
     a16:	84 60       	ori	r24, 0x04	; 4
     a18:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
     a1c:	80 91 4f 04 	lds	r24, 0x044F
     a20:	83 fd       	sbrc	r24, 3
     a22:	d7 ce       	rjmp	.-594    	; 0x7d2 <handleRFCommands+0x214>
				GRREEN_LED3_ON;
			} else {
				GRREEN_LED3_OFF;
     a24:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
     a26:	80 91 4f 04 	lds	r24, 0x044F
     a2a:	84 fd       	sbrc	r24, 4
     a2c:	d7 ce       	rjmp	.-594    	; 0x7dc <handleRFCommands+0x21e>
				GRREEN_LED4_ON;
			} else {
				GRREEN_LED4_OFF;
     a2e:	80 91 0b 01 	lds	r24, 0x010B
     a32:	80 61       	ori	r24, 0x10	; 16
     a34:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
     a38:	80 91 4f 04 	lds	r24, 0x044F
     a3c:	85 fd       	sbrc	r24, 5
     a3e:	d7 ce       	rjmp	.-594    	; 0x7ee <handleRFCommands+0x230>
				GRREEN_LED5_ON;
			} else {
				GRREEN_LED5_OFF;
     a40:	80 91 0b 01 	lds	r24, 0x010B
     a44:	80 62       	ori	r24, 0x20	; 32
     a46:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
     a4a:	80 91 4f 04 	lds	r24, 0x044F
     a4e:	86 fd       	sbrc	r24, 6
     a50:	d7 ce       	rjmp	.-594    	; 0x800 <handleRFCommands+0x242>
				GRREEN_LED6_ON;
			} else {
				GRREEN_LED6_OFF;
     a52:	80 91 0b 01 	lds	r24, 0x010B
     a56:	80 64       	ori	r24, 0x40	; 64
     a58:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
     a5c:	80 91 4f 04 	lds	r24, 0x044F
     a60:	87 ff       	sbrs	r24, 7
     a62:	d7 ce       	rjmp	.-594    	; 0x812 <handleRFCommands+0x254>
				GRREEN_LED7_ON;
     a64:	80 91 0b 01 	lds	r24, 0x010B
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     a6e:	80 91 0b 02 	lds	r24, 0x020B
     a72:	80 93 31 04 	sts	0x0431, r24

		switch(packetId) {
     a76:	84 30       	cpi	r24, 0x04	; 4
     a78:	09 f0       	breq	.+2      	; 0xa7c <handleRFCommands+0x4be>
     a7a:	d7 ce       	rjmp	.-594    	; 0x82a <handleRFCommands+0x26c>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     a7c:	90 91 67 03 	lds	r25, 0x0367
     a80:	80 91 68 03 	lds	r24, 0x0368
     a84:	90 93 32 04 	sts	0x0432, r25
				ackPayload[2] = proximityResult[4]>>8;
     a88:	80 93 33 04 	sts	0x0433, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     a8c:	90 91 6f 03 	lds	r25, 0x036F
     a90:	80 91 70 03 	lds	r24, 0x0370
     a94:	90 93 34 04 	sts	0x0434, r25
				ackPayload[4] = proximityResult[8]>>8;
     a98:	80 93 35 04 	sts	0x0435, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     a9c:	90 91 71 03 	lds	r25, 0x0371
     aa0:	80 91 72 03 	lds	r24, 0x0372
     aa4:	90 93 36 04 	sts	0x0436, r25
				ackPayload[6] = proximityResult[9]>>8;
     aa8:	80 93 37 04 	sts	0x0437, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     aac:	90 91 73 03 	lds	r25, 0x0373
     ab0:	80 91 74 03 	lds	r24, 0x0374
     ab4:	90 93 38 04 	sts	0x0438, r25
				ackPayload[8] = proximityResult[10]>>8;
     ab8:	80 93 39 04 	sts	0x0439, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     abc:	90 91 75 03 	lds	r25, 0x0375
     ac0:	80 91 76 03 	lds	r24, 0x0376
     ac4:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[10] = proximityResult[11]>>8;
     ac8:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     acc:	90 91 0c 04 	lds	r25, 0x040C
     ad0:	80 91 0d 04 	lds	r24, 0x040D
     ad4:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[12] = accX>>8;
     ad8:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[13] = accY&0xFF;
     adc:	90 91 0e 04 	lds	r25, 0x040E
     ae0:	80 91 0f 04 	lds	r24, 0x040F
     ae4:	90 93 3e 04 	sts	0x043E, r25
				ackPayload[14] = accY>>8;
     ae8:	80 93 3f 04 	sts	0x043F, r24
				ackPayload[15] = irCommand;
     aec:	80 91 07 04 	lds	r24, 0x0407
     af0:	80 93 40 04 	sts	0x0440, r24
				packetId = 5;
     af4:	85 e0       	ldi	r24, 0x05	; 5
     af6:	80 93 0b 02 	sts	0x020B, r24
				break;
     afa:	02 cf       	rjmp	.-508    	; 0x900 <handleRFCommands+0x342>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     afc:	85 30       	cpi	r24, 0x05	; 5
     afe:	09 f4       	brne	.+2      	; 0xb02 <handleRFCommands+0x544>
     b00:	7d c0       	rjmp	.+250    	; 0xbfc <handleRFCommands+0x63e>
     b02:	86 30       	cpi	r24, 0x06	; 6
     b04:	09 f0       	breq	.+2      	; 0xb08 <handleRFCommands+0x54a>
     b06:	fc ce       	rjmp	.-520    	; 0x900 <handleRFCommands+0x342>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     b08:	80 91 3f 03 	lds	r24, 0x033F
     b0c:	90 91 40 03 	lds	r25, 0x0340
     b10:	80 93 32 04 	sts	0x0432, r24
				ackPayload[2] = proximityValue[8]>>8;
     b14:	80 91 3f 03 	lds	r24, 0x033F
     b18:	90 91 40 03 	lds	r25, 0x0340
     b1c:	90 93 33 04 	sts	0x0433, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     b20:	80 91 4f 03 	lds	r24, 0x034F
     b24:	90 91 50 03 	lds	r25, 0x0350
     b28:	80 93 34 04 	sts	0x0434, r24
				ackPayload[4] = proximityValue[16]>>8;
     b2c:	80 91 4f 03 	lds	r24, 0x034F
     b30:	90 91 50 03 	lds	r25, 0x0350
     b34:	90 93 35 04 	sts	0x0435, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     b38:	80 91 53 03 	lds	r24, 0x0353
     b3c:	90 91 54 03 	lds	r25, 0x0354
     b40:	80 93 36 04 	sts	0x0436, r24
				ackPayload[6] = proximityValue[18]>>8;
     b44:	80 91 53 03 	lds	r24, 0x0353
     b48:	90 91 54 03 	lds	r25, 0x0354
     b4c:	90 93 37 04 	sts	0x0437, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     b50:	80 91 57 03 	lds	r24, 0x0357
     b54:	90 91 58 03 	lds	r25, 0x0358
     b58:	80 93 38 04 	sts	0x0438, r24
				ackPayload[8] = proximityValue[20]>>8;
     b5c:	80 91 57 03 	lds	r24, 0x0357
     b60:	90 91 58 03 	lds	r25, 0x0358
     b64:	90 93 39 04 	sts	0x0439, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     b68:	80 91 5b 03 	lds	r24, 0x035B
     b6c:	90 91 5c 03 	lds	r25, 0x035C
     b70:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[10] = proximityValue[22]>>8;
     b74:	80 91 5b 03 	lds	r24, 0x035B
     b78:	90 91 5c 03 	lds	r25, 0x035C
     b7c:	90 93 3b 04 	sts	0x043B, r25
				ackPayload[11] = accZ&0xFF;
     b80:	90 91 10 04 	lds	r25, 0x0410
     b84:	80 91 11 04 	lds	r24, 0x0411
     b88:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[12] = accZ>>8;
     b8c:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[13] = batteryLevel&0xFF;
     b90:	90 91 c3 03 	lds	r25, 0x03C3
     b94:	80 91 c4 03 	lds	r24, 0x03C4
     b98:	90 93 3e 04 	sts	0x043E, r25
				ackPayload[14] = batteryLevel>>8;
     b9c:	80 93 3f 04 	sts	0x043F, r24
				ackPayload[15] = 0;
     ba0:	10 92 40 04 	sts	0x0440, r1
				packetId = 3;
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	80 93 0b 02 	sts	0x020B, r24
				break;
     baa:	aa ce       	rjmp	.-684    	; 0x900 <handleRFCommands+0x342>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	30 93 f0 03 	sts	0x03F0, r19
     bb8:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     bbc:	47 ff       	sbrs	r20, 7
     bbe:	5d cd       	rjmp	.-1350   	; 0x67a <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	90 93 f2 03 	sts	0x03F2, r25
     bcc:	80 93 f1 03 	sts	0x03F1, r24
     bd0:	5f cd       	rjmp	.-1346   	; 0x690 <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     bd2:	70 91 4b 04 	lds	r23, 0x044B
     bd6:	77 23       	and	r23, r23
     bd8:	61 f4       	brne	.+24     	; 0xbf2 <handleRFCommands+0x634>
     bda:	80 91 4c 04 	lds	r24, 0x044C
     bde:	88 30       	cpi	r24, 0x08	; 8
     be0:	41 f4       	brne	.+16     	; 0xbf2 <handleRFCommands+0x634>
     be2:	50 91 4d 04 	lds	r21, 0x044D
     be6:	55 23       	and	r21, r21
     be8:	09 f4       	brne	.+2      	; 0xbec <handleRFCommands+0x62e>
     bea:	64 c0       	rjmp	.+200    	; 0xcb4 <handleRFCommands+0x6f6>
     bec:	40 91 4e 04 	lds	r20, 0x044E
     bf0:	25 cd       	rjmp	.-1462   	; 0x63c <handleRFCommands+0x7e>
     bf2:	50 91 4d 04 	lds	r21, 0x044D
     bf6:	40 91 4e 04 	lds	r20, 0x044E
     bfa:	20 cd       	rjmp	.-1472   	; 0x63c <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     bfc:	80 91 2f 03 	lds	r24, 0x032F
     c00:	90 91 30 03 	lds	r25, 0x0330
     c04:	80 93 32 04 	sts	0x0432, r24
				ackPayload[2] = proximityValue[0]>>8;
     c08:	80 91 2f 03 	lds	r24, 0x032F
     c0c:	90 91 30 03 	lds	r25, 0x0330
     c10:	90 93 33 04 	sts	0x0433, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     c14:	80 91 33 03 	lds	r24, 0x0333
     c18:	90 91 34 03 	lds	r25, 0x0334
     c1c:	80 93 34 04 	sts	0x0434, r24
				ackPayload[4] = proximityValue[2]>>8;
     c20:	80 91 33 03 	lds	r24, 0x0333
     c24:	90 91 34 03 	lds	r25, 0x0334
     c28:	90 93 35 04 	sts	0x0435, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     c2c:	80 91 37 03 	lds	r24, 0x0337
     c30:	90 91 38 03 	lds	r25, 0x0338
     c34:	80 93 36 04 	sts	0x0436, r24
				ackPayload[6] = proximityValue[4]>>8;
     c38:	80 91 37 03 	lds	r24, 0x0337
     c3c:	90 91 38 03 	lds	r25, 0x0338
     c40:	90 93 37 04 	sts	0x0437, r25
				ackPayload[7] = proximityValue[6]&0xFF;
     c44:	80 91 3b 03 	lds	r24, 0x033B
     c48:	90 91 3c 03 	lds	r25, 0x033C
     c4c:	80 93 38 04 	sts	0x0438, r24
				ackPayload[8] = proximityValue[6]>>8;
     c50:	80 91 3b 03 	lds	r24, 0x033B
     c54:	90 91 3c 03 	lds	r25, 0x033C
     c58:	90 93 39 04 	sts	0x0439, r25
				ackPayload[9] = proximityValue[10]&0xFF;
     c5c:	80 91 43 03 	lds	r24, 0x0343
     c60:	90 91 44 03 	lds	r25, 0x0344
     c64:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[10] = proximityValue[10]>>8;
     c68:	80 91 43 03 	lds	r24, 0x0343
     c6c:	90 91 44 03 	lds	r25, 0x0344
     c70:	90 93 3b 04 	sts	0x043B, r25
				ackPayload[11] = proximityValue[12]&0xFF;
     c74:	80 91 47 03 	lds	r24, 0x0347
     c78:	90 91 48 03 	lds	r25, 0x0348
     c7c:	80 93 3c 04 	sts	0x043C, r24
				ackPayload[12] = proximityValue[12]>>8;
     c80:	80 91 47 03 	lds	r24, 0x0347
     c84:	90 91 48 03 	lds	r25, 0x0348
     c88:	90 93 3d 04 	sts	0x043D, r25
				ackPayload[13] = proximityValue[14]&0xFF;
     c8c:	80 91 4b 03 	lds	r24, 0x034B
     c90:	90 91 4c 03 	lds	r25, 0x034C
     c94:	80 93 3e 04 	sts	0x043E, r24
				ackPayload[14] = proximityValue[14]>>8;
     c98:	80 91 4b 03 	lds	r24, 0x034B
     c9c:	90 91 4c 03 	lds	r25, 0x034C
     ca0:	90 93 3f 04 	sts	0x043F, r25
				ackPayload[15] = currentSelector;
     ca4:	80 91 25 04 	lds	r24, 0x0425
     ca8:	80 93 40 04 	sts	0x0440, r24
				packetId = 6;
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	80 93 0b 02 	sts	0x020B, r24
				break;
     cb2:	26 ce       	rjmp	.-948    	; 0x900 <handleRFCommands+0x342>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     cb4:	40 91 4e 04 	lds	r20, 0x044E
     cb8:	44 23       	and	r20, r20
     cba:	79 f0       	breq	.+30     	; 0xcda <handleRFCommands+0x71c>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     cbc:	10 92 02 04 	sts	0x0402, r1
     cc0:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     cc4:	84 2f       	mov	r24, r20
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	8f 77       	andi	r24, 0x7F	; 127
     cca:	90 70       	andi	r25, 0x00	; 0
     ccc:	90 93 00 04 	sts	0x0400, r25
     cd0:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	c3 cc       	rjmp	.-1658   	; 0x660 <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
     cda:	8c e3       	ldi	r24, 0x3C	; 60
     cdc:	0e 94 aa 11 	call	0x2354	; 0x2354 <sleep>
     ce0:	50 91 4d 04 	lds	r21, 0x044D
     ce4:	40 91 4e 04 	lds	r20, 0x044E
     ce8:	60 91 49 04 	lds	r22, 0x0449
     cec:	e0 91 4a 04 	lds	r30, 0x044A
     cf0:	70 91 4b 04 	lds	r23, 0x044B
     cf4:	a3 cc       	rjmp	.-1722   	; 0x63c <handleRFCommands+0x7e>

00000cf6 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29

	PCICR = 0;
     cfa:	c8 e6       	ldi	r28, 0x68	; 104
     cfc:	d0 e0       	ldi	r29, 0x00	; 0
     cfe:	18 82       	st	Y, r1
	PCMSK1 = 0;
     d00:	ac e6       	ldi	r26, 0x6C	; 108
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	1c 92       	st	X, r1
	TCCR2A = 0;
     d06:	e0 eb       	ldi	r30, 0xB0	; 176
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	10 82       	st	Z, r1
	TCCR2B = 0;
     d0c:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     d10:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     d14:	88 81       	ld	r24, Y
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     d1a:	8c 91       	ld	r24, X
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     d20:	80 81       	ld	r24, Z
     d22:	82 60       	ori	r24, 0x02	; 2
     d24:	80 83       	st	Z, r24

}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     d2c:	1f 92       	push	r1
     d2e:	0f 92       	push	r0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     d38:	80 91 11 02 	lds	r24, 0x0211
     d3c:	88 23       	and	r24, r24
     d3e:	21 f1       	breq	.+72     	; 0xd88 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     d40:	80 91 03 01 	lds	r24, 0x0103
     d44:	86 fd       	sbrc	r24, 6
     d46:	20 c0       	rjmp	.+64     	; 0xd88 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     d48:	80 91 68 00 	lds	r24, 0x0068
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     d52:	80 91 6c 00 	lds	r24, 0x006C
     d56:	8f 77       	andi	r24, 0x7F	; 127
     d58:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
     d62:	8d e0       	ldi	r24, 0x0D	; 13
     d64:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     d68:	80 91 b1 00 	lds	r24, 0x00B1
     d6c:	86 60       	ori	r24, 0x06	; 6
     d6e:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
     d72:	80 91 70 00 	lds	r24, 0x0070
     d76:	82 60       	ori	r24, 0x02	; 2
     d78:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
     d7c:	10 92 26 03 	sts	0x0326, r1
     d80:	10 92 27 03 	sts	0x0327, r1
     d84:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
     d88:	8f 91       	pop	r24
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	0f 90       	pop	r0
     d90:	1f 90       	pop	r1
     d92:	18 95       	reti

00000d94 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
     daa:	80 91 b1 00 	lds	r24, 0x00B1
     dae:	88 7f       	andi	r24, 0xF8	; 248
     db0:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
     db4:	80 91 12 02 	lds	r24, 0x0212
     db8:	88 23       	and	r24, r24
     dba:	a9 f0       	breq	.+42     	; 0xde6 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
     dbc:	80 91 03 01 	lds	r24, 0x0103
     dc0:	86 ff       	sbrs	r24, 6
     dc2:	65 c0       	rjmp	.+202    	; 0xe8e <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
     dc4:	80 91 68 00 	lds	r24, 0x0068
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
     dce:	80 91 6c 00 	lds	r24, 0x006C
     dd2:	80 68       	ori	r24, 0x80	; 128
     dd4:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	9f ef       	ldi	r25, 0xFF	; 255
     ddc:	90 93 02 02 	sts	0x0202, r25
     de0:	80 93 01 02 	sts	0x0201, r24
     de4:	49 c0       	rjmp	.+146    	; 0xe78 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
     de6:	80 91 01 02 	lds	r24, 0x0201
     dea:	90 91 02 02 	lds	r25, 0x0202
     dee:	2f ef       	ldi	r18, 0xFF	; 255
     df0:	8f 3f       	cpi	r24, 0xFF	; 255
     df2:	92 07       	cpc	r25, r18
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__vector_13+0x64>
     df6:	63 c0       	rjmp	.+198    	; 0xebe <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <__vector_13+0x6c>
     dfe:	98 c0       	rjmp	.+304    	; 0xf30 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
     e00:	9c 01       	movw	r18, r24
     e02:	22 50       	subi	r18, 0x02	; 2
     e04:	30 40       	sbci	r19, 0x00	; 0
     e06:	25 30       	cpi	r18, 0x05	; 5
     e08:	31 05       	cpc	r19, r1
     e0a:	08 f4       	brcc	.+2      	; 0xe0e <__vector_13+0x7a>
     e0c:	67 c0       	rjmp	.+206    	; 0xedc <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
     e0e:	9c 01       	movw	r18, r24
     e10:	27 50       	subi	r18, 0x07	; 7
     e12:	30 40       	sbci	r19, 0x00	; 0
     e14:	26 30       	cpi	r18, 0x06	; 6
     e16:	31 05       	cpc	r19, r1
     e18:	08 f0       	brcs	.+2      	; 0xe1c <__vector_13+0x88>
     e1a:	bd c0       	rjmp	.+378    	; 0xf96 <__vector_13+0x202>

				OCR2A = 54;
     e1c:	26 e3       	ldi	r18, 0x36	; 54
     e1e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
     e22:	20 91 b1 00 	lds	r18, 0x00B1
     e26:	26 60       	ori	r18, 0x06	; 6
     e28:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
     e2c:	20 91 70 00 	lds	r18, 0x0070
     e30:	22 60       	ori	r18, 0x02	; 2
     e32:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
     e36:	20 91 03 01 	lds	r18, 0x0103
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	20 74       	andi	r18, 0x40	; 64
     e3e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
     e40:	00 24       	eor	r0, r0
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	00 1c       	adc	r0, r0
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	00 1c       	adc	r0, r0
     e4e:	23 2f       	mov	r18, r19
     e50:	30 2d       	mov	r19, r0
     e52:	4c e0       	ldi	r20, 0x0C	; 12
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	48 1b       	sub	r20, r24
     e58:	59 0b       	sbc	r21, r25
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <__vector_13+0xcc>
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	4a 95       	dec	r20
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <__vector_13+0xc8>
				data_temp += temp;
     e64:	40 91 26 03 	lds	r20, 0x0326
     e68:	42 0f       	add	r20, r18
     e6a:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
     e6e:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
     e70:	90 93 02 02 	sts	0x0202, r25
     e74:	80 93 01 02 	sts	0x0201, r24

		}

}
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
     e8e:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
     e92:	83 e3       	ldi	r24, 0x33	; 51
     e94:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     e98:	80 91 b1 00 	lds	r24, 0x00B1
     e9c:	86 60       	ori	r24, 0x06	; 6
     e9e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
     ea2:	80 91 70 00 	lds	r24, 0x0070
     ea6:	82 60       	ori	r24, 0x02	; 2
     ea8:	80 93 70 00 	sts	0x0070, r24
     eac:	80 91 01 02 	lds	r24, 0x0201
     eb0:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
     eb4:	2f ef       	ldi	r18, 0xFF	; 255
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	92 07       	cpc	r25, r18
     eba:	c9 f6       	brne	.-78     	; 0xe6e <__vector_13+0xda>
     ebc:	dd cf       	rjmp	.-70     	; 0xe78 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
     ebe:	20 91 03 01 	lds	r18, 0x0103
     ec2:	26 ff       	sbrs	r18, 6
     ec4:	52 c0       	rjmp	.+164    	; 0xf6a <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
     ec6:	20 91 68 00 	lds	r18, 0x0068
     eca:	22 60       	ori	r18, 0x02	; 2
     ecc:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
     ed0:	20 91 6c 00 	lds	r18, 0x006C
     ed4:	20 68       	ori	r18, 0x80	; 128
     ed6:	20 93 6c 00 	sts	0x006C, r18
     eda:	ce cf       	rjmp	.-100    	; 0xe78 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
     edc:	26 e3       	ldi	r18, 0x36	; 54
     ede:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
     ee2:	20 91 b1 00 	lds	r18, 0x00B1
     ee6:	26 60       	ori	r18, 0x06	; 6
     ee8:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
     eec:	20 91 70 00 	lds	r18, 0x0070
     ef0:	22 60       	ori	r18, 0x02	; 2
     ef2:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
     ef6:	20 91 03 01 	lds	r18, 0x0103
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	20 74       	andi	r18, 0x40	; 64
     efe:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
     f00:	00 24       	eor	r0, r0
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	00 1c       	adc	r0, r0
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	00 1c       	adc	r0, r0
     f0e:	23 2f       	mov	r18, r19
     f10:	30 2d       	mov	r19, r0
     f12:	46 e0       	ldi	r20, 0x06	; 6
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	48 1b       	sub	r20, r24
     f18:	59 0b       	sbc	r21, r25
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <__vector_13+0x18c>
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	4a 95       	dec	r20
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <__vector_13+0x188>
				address_temp += temp;
     f24:	40 91 27 03 	lds	r20, 0x0327
     f28:	42 0f       	add	r20, r18
     f2a:	40 93 27 03 	sts	0x0327, r20
     f2e:	9f cf       	rjmp	.-194    	; 0xe6e <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
     f30:	20 91 03 01 	lds	r18, 0x0103
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	20 74       	andi	r18, 0x40	; 64
     f38:	30 70       	andi	r19, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	23 2f       	mov	r18, r19
     f3e:	00 0c       	add	r0, r0
     f40:	22 1f       	adc	r18, r18
     f42:	33 0b       	sbc	r19, r19
     f44:	00 0c       	add	r0, r0
     f46:	22 1f       	adc	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
     f4e:	26 e3       	ldi	r18, 0x36	; 54
     f50:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
     f54:	20 91 b1 00 	lds	r18, 0x00B1
     f58:	26 60       	ori	r18, 0x06	; 6
     f5a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
     f5e:	20 91 70 00 	lds	r18, 0x0070
     f62:	22 60       	ori	r18, 0x02	; 2
     f64:	20 93 70 00 	sts	0x0070, r18
     f68:	82 cf       	rjmp	.-252    	; 0xe6e <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
     f6a:	8c e1       	ldi	r24, 0x1C	; 28
     f6c:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
     f70:	80 91 b1 00 	lds	r24, 0x00B1
     f74:	86 60       	ori	r24, 0x06	; 6
     f76:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
     f7a:	80 91 70 00 	lds	r24, 0x0070
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
     f84:	10 92 26 03 	sts	0x0326, r1
     f88:	10 92 27 03 	sts	0x0327, r1
     f8c:	10 92 28 03 	sts	0x0328, r1
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	6d cf       	rjmp	.-294    	; 0xe70 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
     f96:	8d 30       	cpi	r24, 0x0D	; 13
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f0       	breq	.+2      	; 0xf9e <__vector_13+0x20a>
     f9c:	68 cf       	rjmp	.-304    	; 0xe6e <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
     f9e:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
     fa2:	80 91 68 00 	lds	r24, 0x0068
     fa6:	82 60       	ori	r24, 0x02	; 2
     fa8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
     fac:	80 91 6c 00 	lds	r24, 0x006C
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	9f ef       	ldi	r25, 0xFF	; 255
     fba:	90 93 02 02 	sts	0x0202, r25
     fbe:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
     fc2:	80 91 28 03 	lds	r24, 0x0328
     fc6:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
     fca:	80 91 27 03 	lds	r24, 0x0327
     fce:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
     fd2:	80 91 26 03 	lds	r24, 0x0326
     fd6:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 08 04 	sts	0x0408, r24
     fe0:	4b cf       	rjmp	.-362    	; 0xe78 <__vector_13+0xe4>

00000fe2 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
     fe2:	80 91 00 02 	lds	r24, 0x0200
     fe6:	08 95       	ret

00000fe8 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
     fe8:	80 91 24 03 	lds	r24, 0x0324
     fec:	08 95       	ret

00000fee <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
     fee:	80 91 25 03 	lds	r24, 0x0325
     ff2:	08 95       	ret

00000ff4 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
     ff4:	80 91 11 02 	lds	r24, 0x0211
     ff8:	88 23       	and	r24, r24
     ffa:	b1 f1       	breq	.+108    	; 0x1068 <handleIRRemoteCommands+0x74>

		if(command_received) {
     ffc:	80 91 08 04 	lds	r24, 0x0408
    1000:	88 23       	and	r24, r24
    1002:	91 f1       	breq	.+100    	; 0x1068 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1004:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    1008:	e0 93 07 04 	sts	0x0407, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    100c:	10 92 08 04 	sts	0x0408, r1

			switch(irCommand) {
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	e5 33       	cpi	r30, 0x35	; 53
    1014:	f1 05       	cpc	r31, r1
    1016:	48 f1       	brcs	.+82     	; 0x106a <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    1018:	20 91 ef 03 	lds	r18, 0x03EF
    101c:	30 91 f0 03 	lds	r19, 0x03F0
    1020:	80 91 f1 03 	lds	r24, 0x03F1
    1024:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1028:	37 fd       	sbrc	r19, 7
    102a:	27 c0       	rjmp	.+78     	; 0x107a <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    102c:	35 95       	asr	r19
    102e:	27 95       	ror	r18
    1030:	35 95       	asr	r19
    1032:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    1034:	30 93 02 04 	sts	0x0402, r19
    1038:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    103c:	97 fd       	sbrc	r25, 7
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    1040:	95 95       	asr	r25
    1042:	87 95       	ror	r24
    1044:	95 95       	asr	r25
    1046:	87 95       	ror	r24
    1048:	90 93 00 04 	sts	0x0400, r25
    104c:	80 93 ff 03 	sts	0x03FF, r24
    1050:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1052:	90 95       	com	r25
    1054:	81 95       	neg	r24
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	95 95       	asr	r25
    105a:	87 95       	ror	r24
    105c:	95 95       	asr	r25
    105e:	87 95       	ror	r24
    1060:	90 93 00 04 	sts	0x0400, r25
    1064:	80 93 ff 03 	sts	0x03FF, r24
    1068:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    106a:	ee 58       	subi	r30, 0x8E	; 142
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	05 90       	lpm	r0, Z+
    1074:	f4 91       	lpm	r31, Z+
    1076:	e0 2d       	mov	r30, r0
    1078:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    107a:	30 95       	com	r19
    107c:	21 95       	neg	r18
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	d5 cf       	rjmp	.-86     	; 0x102c <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1082:	80 93 29 04 	sts	0x0429, r24
							cliffAvoidanceEnabled = 0;
    1086:	10 92 2a 04 	sts	0x042A, r1
    108a:	c6 cf       	rjmp	.-116    	; 0x1018 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    108c:	10 92 29 04 	sts	0x0429, r1
							cliffAvoidanceEnabled = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 2a 04 	sts	0x042A, r24
    1096:	20 91 ef 03 	lds	r18, 0x03EF
    109a:	30 91 f0 03 	lds	r19, 0x03F0
    109e:	80 91 f1 03 	lds	r24, 0x03F1
    10a2:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    10a6:	c0 cf       	rjmp	.-128    	; 0x1028 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    10a8:	10 92 29 04 	sts	0x0429, r1
    10ac:	20 91 ef 03 	lds	r18, 0x03EF
    10b0:	30 91 f0 03 	lds	r19, 0x03F0
    10b4:	80 91 f1 03 	lds	r24, 0x03F1
    10b8:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    10bc:	b5 cf       	rjmp	.-150    	; 0x1028 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 29 04 	sts	0x0429, r24
    10c4:	20 91 ef 03 	lds	r18, 0x03EF
    10c8:	30 91 f0 03 	lds	r19, 0x03F0
    10cc:	80 91 f1 03 	lds	r24, 0x03F1
    10d0:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    10d4:	a9 cf       	rjmp	.-174    	; 0x1028 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    10d6:	80 91 f1 03 	lds	r24, 0x03F1
    10da:	90 91 f2 03 	lds	r25, 0x03F2
    10de:	4e 97       	sbiw	r24, 0x1e	; 30
    10e0:	90 93 f2 03 	sts	0x03F2, r25
    10e4:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    10e8:	2e ef       	ldi	r18, 0xFE	; 254
    10ea:	80 30       	cpi	r24, 0x00	; 0
    10ec:	92 07       	cpc	r25, r18
    10ee:	9c f5       	brge	.+102    	; 0x1156 <handleIRRemoteCommands+0x162>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	9e ef       	ldi	r25, 0xFE	; 254
    10f4:	90 93 f2 03 	sts	0x03F2, r25
    10f8:	80 93 f1 03 	sts	0x03F1, r24
    10fc:	20 91 ef 03 	lds	r18, 0x03EF
    1100:	30 91 f0 03 	lds	r19, 0x03F0
    1104:	91 cf       	rjmp	.-222    	; 0x1028 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1106:	20 91 ef 03 	lds	r18, 0x03EF
    110a:	30 91 f0 03 	lds	r19, 0x03F0
    110e:	80 91 ed 03 	lds	r24, 0x03ED
    1112:	90 91 ee 03 	lds	r25, 0x03EE
    1116:	28 17       	cp	r18, r24
    1118:	39 07       	cpc	r19, r25
    111a:	24 f0       	brlt	.+8      	; 0x1124 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    111c:	20 91 f1 03 	lds	r18, 0x03F1
    1120:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    1124:	2e 51       	subi	r18, 0x1E	; 30
    1126:	30 40       	sbci	r19, 0x00	; 0
    1128:	30 93 f0 03 	sts	0x03F0, r19
    112c:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    1130:	c9 01       	movw	r24, r18
    1132:	30 93 f2 03 	sts	0x03F2, r19
    1136:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    113a:	4e ef       	ldi	r20, 0xFE	; 254
    113c:	20 30       	cpi	r18, 0x00	; 0
    113e:	34 07       	cpc	r19, r20
    1140:	34 f4       	brge	.+12     	; 0x114e <handleIRRemoteCommands+0x15a>
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	5e ef       	ldi	r21, 0xFE	; 254
    1146:	50 93 f0 03 	sts	0x03F0, r21
    114a:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    114e:	4e ef       	ldi	r20, 0xFE	; 254
    1150:	20 30       	cpi	r18, 0x00	; 0
    1152:	34 07       	cpc	r19, r20
    1154:	6c f2       	brlt	.-102    	; 0x10f0 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1156:	20 91 ef 03 	lds	r18, 0x03EF
    115a:	30 91 f0 03 	lds	r19, 0x03F0
    115e:	64 cf       	rjmp	.-312    	; 0x1028 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1160:	20 91 ef 03 	lds	r18, 0x03EF
    1164:	30 91 f0 03 	lds	r19, 0x03F0
    1168:	2e 51       	subi	r18, 0x1E	; 30
    116a:	30 40       	sbci	r19, 0x00	; 0
    116c:	30 93 f0 03 	sts	0x03F0, r19
    1170:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1174:	4e ef       	ldi	r20, 0xFE	; 254
    1176:	20 30       	cpi	r18, 0x00	; 0
    1178:	34 07       	cpc	r19, r20
    117a:	0c f0       	brlt	.+2      	; 0x117e <handleIRRemoteCommands+0x18a>
    117c:	17 c1       	rjmp	.+558    	; 0x13ac <handleIRRemoteCommands+0x3b8>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	9e ef       	ldi	r25, 0xFE	; 254
    1182:	90 93 f0 03 	sts	0x03F0, r25
    1186:	80 93 ef 03 	sts	0x03EF, r24
    118a:	80 91 f1 03 	lds	r24, 0x03F1
    118e:	90 91 f2 03 	lds	r25, 0x03F2
    1192:	20 e8       	ldi	r18, 0x80	; 128
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4e cf       	rjmp	.-356    	; 0x1034 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1198:	20 91 ef 03 	lds	r18, 0x03EF
    119c:	30 91 f0 03 	lds	r19, 0x03F0
    11a0:	2e 51       	subi	r18, 0x1E	; 30
    11a2:	30 40       	sbci	r19, 0x00	; 0
    11a4:	30 93 f0 03 	sts	0x03F0, r19
    11a8:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    11ac:	80 91 f1 03 	lds	r24, 0x03F1
    11b0:	90 91 f2 03 	lds	r25, 0x03F2
    11b4:	4e 96       	adiw	r24, 0x1e	; 30
    11b6:	90 93 f2 03 	sts	0x03F2, r25
    11ba:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    11be:	4e ef       	ldi	r20, 0xFE	; 254
    11c0:	20 30       	cpi	r18, 0x00	; 0
    11c2:	34 07       	cpc	r19, r20
    11c4:	34 f4       	brge	.+12     	; 0x11d2 <handleIRRemoteCommands+0x1de>
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	3e ef       	ldi	r19, 0xFE	; 254
    11ca:	30 93 f0 03 	sts	0x03F0, r19
    11ce:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    11d2:	42 e0       	ldi	r20, 0x02	; 2
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	94 07       	cpc	r25, r20
    11d8:	0c f4       	brge	.+2      	; 0x11dc <handleIRRemoteCommands+0x1e8>
    11da:	26 cf       	rjmp	.-436    	; 0x1028 <handleIRRemoteCommands+0x34>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	90 93 f2 03 	sts	0x03F2, r25
    11e4:	80 93 f1 03 	sts	0x03F1, r24
    11e8:	1f cf       	rjmp	.-450    	; 0x1028 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    11ea:	20 91 ef 03 	lds	r18, 0x03EF
    11ee:	30 91 f0 03 	lds	r19, 0x03F0
    11f2:	80 91 f1 03 	lds	r24, 0x03F1
    11f6:	90 91 f2 03 	lds	r25, 0x03F2
    11fa:	82 17       	cp	r24, r18
    11fc:	93 07       	cpc	r25, r19
    11fe:	0c f4       	brge	.+2      	; 0x1202 <handleIRRemoteCommands+0x20e>
    1200:	da c0       	rjmp	.+436    	; 0x13b6 <handleIRRemoteCommands+0x3c2>
    1202:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1204:	22 5e       	subi	r18, 0xE2	; 226
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	30 93 f0 03 	sts	0x03F0, r19
    120c:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1210:	4e 96       	adiw	r24, 0x1e	; 30
    1212:	90 93 f2 03 	sts	0x03F2, r25
    1216:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    121a:	42 e0       	ldi	r20, 0x02	; 2
    121c:	21 30       	cpi	r18, 0x01	; 1
    121e:	34 07       	cpc	r19, r20
    1220:	34 f0       	brlt	.+12     	; 0x122e <handleIRRemoteCommands+0x23a>
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	32 e0       	ldi	r19, 0x02	; 2
    1226:	30 93 f0 03 	sts	0x03F0, r19
    122a:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    122e:	22 e0       	ldi	r18, 0x02	; 2
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	92 07       	cpc	r25, r18
    1234:	0c f4       	brge	.+2      	; 0x1238 <handleIRRemoteCommands+0x244>
    1236:	8f cf       	rjmp	.-226    	; 0x1156 <handleIRRemoteCommands+0x162>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	90 93 f2 03 	sts	0x03F2, r25
    1240:	80 93 f1 03 	sts	0x03F1, r24
    1244:	20 91 ef 03 	lds	r18, 0x03EF
    1248:	30 91 f0 03 	lds	r19, 0x03F0
    124c:	ed ce       	rjmp	.-550    	; 0x1028 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    124e:	20 91 ef 03 	lds	r18, 0x03EF
    1252:	30 91 f0 03 	lds	r19, 0x03F0
    1256:	22 5e       	subi	r18, 0xE2	; 226
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	30 93 f0 03 	sts	0x03F0, r19
    125e:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1262:	42 e0       	ldi	r20, 0x02	; 2
    1264:	21 30       	cpi	r18, 0x01	; 1
    1266:	34 07       	cpc	r19, r20
    1268:	0c f4       	brge	.+2      	; 0x126c <handleIRRemoteCommands+0x278>
    126a:	a0 c0       	rjmp	.+320    	; 0x13ac <handleIRRemoteCommands+0x3b8>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	90 93 f0 03 	sts	0x03F0, r25
    1274:	80 93 ef 03 	sts	0x03EF, r24
    1278:	80 91 f1 03 	lds	r24, 0x03F1
    127c:	90 91 f2 03 	lds	r25, 0x03F2
    1280:	20 e8       	ldi	r18, 0x80	; 128
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	d7 ce       	rjmp	.-594    	; 0x1034 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1286:	80 91 09 04 	lds	r24, 0x0409
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	65 e0       	ldi	r22, 0x05	; 5
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	0e 94 bc 24 	call	0x4978	; 0x4978 <__divmodhi4>
    1296:	80 93 09 04 	sts	0x0409, r24

					if(colorState==0) {			// turn on blue and off all IRs
    129a:	88 23       	and	r24, r24
    129c:	09 f0       	breq	.+2      	; 0x12a0 <handleIRRemoteCommands+0x2ac>
    129e:	8d c0       	rjmp	.+282    	; 0x13ba <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    12a0:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    12a2:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    12a4:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    12ae:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    12b2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <updateRedLed>
					updateGreenLed(pwm_green);
    12b6:	80 91 0d 02 	lds	r24, 0x020D
    12ba:	0e 94 2f 1b 	call	0x365e	; 0x365e <updateGreenLed>
					updateBlueLed(pwm_blue);
    12be:	80 91 0e 02 	lds	r24, 0x020E
    12c2:	0e 94 43 1b 	call	0x3686	; 0x3686 <updateBlueLed>
    12c6:	20 91 ef 03 	lds	r18, 0x03EF
    12ca:	30 91 f0 03 	lds	r19, 0x03F0
    12ce:	80 91 f1 03 	lds	r24, 0x03F1
    12d2:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    12d6:	a8 ce       	rjmp	.-688    	; 0x1028 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    12d8:	80 91 0a 04 	lds	r24, 0x040A
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	83 70       	andi	r24, 0x03	; 3
    12e2:	90 70       	andi	r25, 0x00	; 0
    12e4:	80 93 0a 04 	sts	0x040A, r24
					switch(behaviorState) {
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	09 f4       	brne	.+2      	; 0x12ee <handleIRRemoteCommands+0x2fa>
    12ec:	cf ce       	rjmp	.-610    	; 0x108c <handleIRRemoteCommands+0x98>
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <handleIRRemoteCommands+0x300>
    12f2:	53 c0       	rjmp	.+166    	; 0x139a <handleIRRemoteCommands+0x3a6>
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <handleIRRemoteCommands+0x306>
    12f8:	c4 ce       	rjmp	.-632    	; 0x1082 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    12fa:	10 92 29 04 	sts	0x0429, r1
							cliffAvoidanceEnabled = 0;
    12fe:	10 92 2a 04 	sts	0x042A, r1
    1302:	8a ce       	rjmp	.-748    	; 0x1018 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1304:	20 91 ef 03 	lds	r18, 0x03EF
    1308:	30 91 f0 03 	lds	r19, 0x03F0
    130c:	22 5e       	subi	r18, 0xE2	; 226
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	30 93 f0 03 	sts	0x03F0, r19
    1314:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    1318:	80 91 f1 03 	lds	r24, 0x03F1
    131c:	90 91 f2 03 	lds	r25, 0x03F2
    1320:	4e 97       	sbiw	r24, 0x1e	; 30
    1322:	90 93 f2 03 	sts	0x03F2, r25
    1326:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    132a:	42 e0       	ldi	r20, 0x02	; 2
    132c:	21 30       	cpi	r18, 0x01	; 1
    132e:	34 07       	cpc	r19, r20
    1330:	34 f0       	brlt	.+12     	; 0x133e <handleIRRemoteCommands+0x34a>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	32 e0       	ldi	r19, 0x02	; 2
    1336:	30 93 f0 03 	sts	0x03F0, r19
    133a:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    133e:	4e ef       	ldi	r20, 0xFE	; 254
    1340:	80 30       	cpi	r24, 0x00	; 0
    1342:	94 07       	cpc	r25, r20
    1344:	0c f0       	brlt	.+2      	; 0x1348 <handleIRRemoteCommands+0x354>
    1346:	70 ce       	rjmp	.-800    	; 0x1028 <handleIRRemoteCommands+0x34>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	9e ef       	ldi	r25, 0xFE	; 254
    134c:	90 93 f2 03 	sts	0x03F2, r25
    1350:	80 93 f1 03 	sts	0x03F1, r24
    1354:	69 ce       	rjmp	.-814    	; 0x1028 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1356:	10 92 f0 03 	sts	0x03F0, r1
    135a:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    135e:	10 92 f2 03 	sts	0x03F2, r1
    1362:	10 92 f1 03 	sts	0x03F1, r1
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	5e ce       	rjmp	.-836    	; 0x102c <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1370:	80 91 f1 03 	lds	r24, 0x03F1
    1374:	90 91 f2 03 	lds	r25, 0x03F2
    1378:	4e 96       	adiw	r24, 0x1e	; 30
    137a:	90 93 f2 03 	sts	0x03F2, r25
    137e:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1382:	22 e0       	ldi	r18, 0x02	; 2
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	92 07       	cpc	r25, r18
    1388:	0c f4       	brge	.+2      	; 0x138c <handleIRRemoteCommands+0x398>
    138a:	e5 ce       	rjmp	.-566    	; 0x1156 <handleIRRemoteCommands+0x162>
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	90 93 f2 03 	sts	0x03F2, r25
    1394:	80 93 f1 03 	sts	0x03F1, r24
    1398:	de ce       	rjmp	.-580    	; 0x1156 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 29 04 	sts	0x0429, r24
							cliffAvoidanceEnabled = 1;
    13a0:	80 93 2a 04 	sts	0x042A, r24
    13a4:	20 91 ef 03 	lds	r18, 0x03EF
    13a8:	30 91 f0 03 	lds	r19, 0x03F0
    13ac:	80 91 f1 03 	lds	r24, 0x03F1
    13b0:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    13b4:	39 ce       	rjmp	.-910    	; 0x1028 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    13b6:	c9 01       	movw	r24, r18
    13b8:	25 cf       	rjmp	.-438    	; 0x1204 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	91 f0       	breq	.+36     	; 0x13e6 <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	d9 f0       	breq	.+54     	; 0x13fc <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    13cc:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    13d0:	80 93 0c 02 	sts	0x020C, r24
    13d4:	6e cf       	rjmp	.-292    	; 0x12b2 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    13dc:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    13e0:	80 93 0c 02 	sts	0x020C, r24
    13e4:	66 cf       	rjmp	.-308    	; 0x12b2 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    13e6:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    13e8:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    13f0:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    13f4:	10 92 0c 02 	sts	0x020C, r1
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	5b cf       	rjmp	.-330    	; 0x12b2 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    13fc:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    1400:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    1404:	10 92 0c 02 	sts	0x020C, r1
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	53 cf       	rjmp	.-346    	; 0x12b2 <handleIRRemoteCommands+0x2be>

0000140c <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    140c:	08 95       	ret

0000140e <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	09 f4       	brne	.+2      	; 0x1422 <start_vertical_speed_control_left+0x14>
    1420:	b7 c0       	rjmp	.+366    	; 0x1590 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1422:	20 91 1e 04 	lds	r18, 0x041E
    1426:	30 91 1f 04 	lds	r19, 0x041F
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	2e 30       	cpi	r18, 0x0E	; 14
    142e:	34 07       	cpc	r19, r20
    1430:	0c f4       	brge	.+2      	; 0x1434 <start_vertical_speed_control_left+0x26>
    1432:	88 c0       	rjmp	.+272    	; 0x1544 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    1434:	18 16       	cp	r1, r24
    1436:	19 06       	cpc	r1, r25
    1438:	0c f0       	brlt	.+2      	; 0x143c <start_vertical_speed_control_left+0x2e>
    143a:	13 c1       	rjmp	.+550    	; 0x1662 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    143c:	88 e6       	ldi	r24, 0x68	; 104
    143e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1440:	82 1b       	sub	r24, r18
    1442:	93 0b       	sbc	r25, r19
    1444:	95 95       	asr	r25
    1446:	87 95       	ror	r24
    1448:	95 95       	asr	r25
    144a:	87 95       	ror	r24
    144c:	29 e1       	ldi	r18, 0x19	; 25
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	28 1b       	sub	r18, r24
    1452:	39 0b       	sbc	r19, r25
    1454:	30 93 04 02 	sts	0x0204, r19
    1458:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    145c:	40 91 2d 04 	lds	r20, 0x042D
    1460:	50 91 2e 04 	lds	r21, 0x042E
    1464:	50 93 48 04 	sts	0x0448, r21
    1468:	40 93 47 04 	sts	0x0447, r20
	if(*pwm_left >= 0) {
    146c:	20 81       	ld	r18, Z
    146e:	31 81       	ldd	r19, Z+1	; 0x01
    1470:	37 fd       	sbrc	r19, 7
    1472:	d2 c0       	rjmp	.+420    	; 0x1618 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1474:	80 91 e7 03 	lds	r24, 0x03E7
    1478:	90 91 e8 03 	lds	r25, 0x03E8
    147c:	b9 01       	movw	r22, r18
    147e:	68 1b       	sub	r22, r24
    1480:	79 0b       	sbc	r23, r25
    1482:	cb 01       	movw	r24, r22
    1484:	70 93 2e 04 	sts	0x042E, r23
    1488:	60 93 2d 04 	sts	0x042D, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    148c:	20 91 f7 03 	lds	r18, 0x03F7
    1490:	30 91 f8 03 	lds	r19, 0x03F8
    1494:	28 0f       	add	r18, r24
    1496:	39 1f       	adc	r19, r25
    1498:	30 93 f8 03 	sts	0x03F8, r19
    149c:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    14a0:	76 e0       	ldi	r23, 0x06	; 6
    14a2:	21 34       	cpi	r18, 0x41	; 65
    14a4:	37 07       	cpc	r19, r23
    14a6:	0c f4       	brge	.+2      	; 0x14aa <start_vertical_speed_control_left+0x9c>
    14a8:	84 c0       	rjmp	.+264    	; 0x15b2 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    14aa:	20 e4       	ldi	r18, 0x40	; 64
    14ac:	36 e0       	ldi	r19, 0x06	; 6
    14ae:	30 93 f8 03 	sts	0x03F8, r19
    14b2:	20 93 f7 03 	sts	0x03F7, r18
    14b6:	60 ec       	ldi	r22, 0xC0	; 192
    14b8:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    14ba:	9c 01       	movw	r18, r24
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	dc 01       	movw	r26, r24
    14c2:	aa 0f       	add	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	aa 0f       	add	r26, r26
    14c8:	bb 1f       	adc	r27, r27
    14ca:	aa 0f       	add	r26, r26
    14cc:	bb 1f       	adc	r27, r27
    14ce:	2a 0f       	add	r18, r26
    14d0:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    14d2:	00 81       	ld	r16, Z
    14d4:	11 81       	ldd	r17, Z+1	; 0x01
    14d6:	c0 91 03 02 	lds	r28, 0x0203
    14da:	d0 91 04 02 	lds	r29, 0x0204
    14de:	0c 9f       	mul	r16, r28
    14e0:	d0 01       	movw	r26, r0
    14e2:	0d 9f       	mul	r16, r29
    14e4:	b0 0d       	add	r27, r0
    14e6:	1c 9f       	mul	r17, r28
    14e8:	b0 0d       	add	r27, r0
    14ea:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    14ec:	2a 0f       	add	r18, r26
    14ee:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    14f0:	48 1b       	sub	r20, r24
    14f2:	59 0b       	sbc	r21, r25
    14f4:	44 0f       	add	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	24 0f       	add	r18, r20
    14fa:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    14fc:	26 0f       	add	r18, r22
    14fe:	37 1f       	adc	r19, r23
    1500:	30 93 f6 03 	sts	0x03F6, r19
    1504:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1508:	37 fd       	sbrc	r19, 7
    150a:	69 c0       	rjmp	.+210    	; 0x15de <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    150c:	12 16       	cp	r1, r18
    150e:	13 06       	cpc	r1, r19
    1510:	0c f0       	brlt	.+2      	; 0x1514 <start_vertical_speed_control_left+0x106>
    1512:	6f c0       	rjmp	.+222    	; 0x15f2 <start_vertical_speed_control_left+0x1e4>
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	97 fd       	sbrc	r25, 7
    151a:	89 c0       	rjmp	.+274    	; 0x162e <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    151c:	7d e5       	ldi	r23, 0x5D	; 93
    151e:	21 3c       	cpi	r18, 0xC1	; 193
    1520:	37 07       	cpc	r19, r23
    1522:	0c f4       	brge	.+2      	; 0x1526 <start_vertical_speed_control_left+0x118>
    1524:	66 c0       	rjmp	.+204    	; 0x15f2 <start_vertical_speed_control_left+0x1e4>
    1526:	80 ec       	ldi	r24, 0xC0	; 192
    1528:	9d e5       	ldi	r25, 0x5D	; 93
    152a:	90 93 f6 03 	sts	0x03F6, r25
    152e:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1544:	24 3b       	cpi	r18, 0xB4	; 180
    1546:	31 05       	cpc	r19, r1
    1548:	94 f4       	brge	.+36     	; 0x156e <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    154a:	2a 35       	cpi	r18, 0x5A	; 90
    154c:	31 05       	cpc	r19, r1
    154e:	7c f4       	brge	.+30     	; 0x156e <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    1550:	18 16       	cp	r1, r24
    1552:	19 06       	cpc	r1, r25
    1554:	0c f0       	brlt	.+2      	; 0x1558 <start_vertical_speed_control_left+0x14a>
    1556:	93 c0       	rjmp	.+294    	; 0x167e <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1558:	35 95       	asr	r19
    155a:	27 95       	ror	r18
    155c:	35 95       	asr	r19
    155e:	27 95       	ror	r18
    1560:	27 5e       	subi	r18, 0xE7	; 231
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	30 93 04 02 	sts	0x0204, r19
    1568:	20 93 03 02 	sts	0x0203, r18
    156c:	77 cf       	rjmp	.-274    	; 0x145c <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    156e:	18 16       	cp	r1, r24
    1570:	19 06       	cpc	r1, r25
    1572:	94 f5       	brge	.+100    	; 0x15d8 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1574:	84 eb       	ldi	r24, 0xB4	; 180
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	82 1b       	sub	r24, r18
    157a:	93 0b       	sbc	r25, r19
    157c:	95 95       	asr	r25
    157e:	87 95       	ror	r24
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	49 96       	adiw	r24, 0x19	; 25
    1586:	90 93 04 02 	sts	0x0204, r25
    158a:	80 93 03 02 	sts	0x0203, r24
    158e:	66 cf       	rjmp	.-308    	; 0x145c <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1590:	10 92 f8 03 	sts	0x03F8, r1
    1594:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1598:	10 92 2e 04 	sts	0x042E, r1
    159c:	10 92 2d 04 	sts	0x042D, r1
		delta_left_speed_prev = 0;
    15a0:	10 92 48 04 	sts	0x0448, r1
    15a4:	10 92 47 04 	sts	0x0447, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    15b2:	69 ef       	ldi	r22, 0xF9	; 249
    15b4:	20 3c       	cpi	r18, 0xC0	; 192
    15b6:	36 07       	cpc	r19, r22
    15b8:	4c f4       	brge	.+18     	; 0x15cc <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    15ba:	20 ec       	ldi	r18, 0xC0	; 192
    15bc:	39 ef       	ldi	r19, 0xF9	; 249
    15be:	30 93 f8 03 	sts	0x03F8, r19
    15c2:	20 93 f7 03 	sts	0x03F7, r18
    15c6:	60 e4       	ldi	r22, 0x40	; 64
    15c8:	7d ee       	ldi	r23, 0xED	; 237
    15ca:	77 cf       	rjmp	.-274    	; 0x14ba <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    15cc:	b9 01       	movw	r22, r18
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	62 0f       	add	r22, r18
    15d4:	73 1f       	adc	r23, r19
    15d6:	71 cf       	rjmp	.-286    	; 0x14ba <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    15d8:	84 eb       	ldi	r24, 0xB4	; 180
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	31 cf       	rjmp	.-414    	; 0x1440 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	97 fd       	sbrc	r25, 7
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    15e6:	10 92 f6 03 	sts	0x03F6, r1
    15ea:	10 92 f5 03 	sts	0x03F5, r1
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    15f2:	82 ea       	ldi	r24, 0xA2	; 162
    15f4:	20 34       	cpi	r18, 0x40	; 64
    15f6:	38 07       	cpc	r19, r24
    15f8:	04 f5       	brge	.+64     	; 0x163a <start_vertical_speed_control_left+0x22c>
    15fa:	80 e4       	ldi	r24, 0x40	; 64
    15fc:	92 ea       	ldi	r25, 0xA2	; 162
    15fe:	90 93 f6 03 	sts	0x03F6, r25
    1602:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	9e ef       	ldi	r25, 0xFE	; 254
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24


}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1618:	80 91 e7 03 	lds	r24, 0x03E7
    161c:	90 91 e8 03 	lds	r25, 0x03E8
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	90 93 2e 04 	sts	0x042E, r25
    1628:	80 93 2d 04 	sts	0x042D, r24
    162c:	2f cf       	rjmp	.-418    	; 0x148c <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    162e:	10 92 f6 03 	sts	0x03F6, r1
    1632:	10 92 f5 03 	sts	0x03F5, r1
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    163a:	35 95       	asr	r19
    163c:	27 95       	ror	r18
    163e:	35 95       	asr	r19
    1640:	27 95       	ror	r18
    1642:	35 95       	asr	r19
    1644:	27 95       	ror	r18
    1646:	35 95       	asr	r19
    1648:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    164a:	31 83       	std	Z+1, r19	; 0x01
    164c:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    164e:	42 e0       	ldi	r20, 0x02	; 2
    1650:	21 30       	cpi	r18, 0x01	; 1
    1652:	34 07       	cpc	r19, r20
    1654:	0c f0       	brlt	.+2      	; 0x1658 <start_vertical_speed_control_left+0x24a>
    1656:	6d cf       	rjmp	.-294    	; 0x1532 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1658:	6e ef       	ldi	r22, 0xFE	; 254
    165a:	20 30       	cpi	r18, 0x00	; 0
    165c:	36 07       	cpc	r19, r22
    165e:	9c f2       	brlt	.-90     	; 0x1606 <start_vertical_speed_control_left+0x1f8>
    1660:	6c cf       	rjmp	.-296    	; 0x153a <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1662:	88 e6       	ldi	r24, 0x68	; 104
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	82 1b       	sub	r24, r18
    1668:	93 0b       	sbc	r25, r19
    166a:	95 95       	asr	r25
    166c:	87 95       	ror	r24
    166e:	95 95       	asr	r25
    1670:	87 95       	ror	r24
    1672:	49 96       	adiw	r24, 0x19	; 25
    1674:	90 93 04 02 	sts	0x0204, r25
    1678:	80 93 03 02 	sts	0x0203, r24
    167c:	ef ce       	rjmp	.-546    	; 0x145c <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    167e:	35 95       	asr	r19
    1680:	27 95       	ror	r18
    1682:	35 95       	asr	r19
    1684:	27 95       	ror	r18
    1686:	89 e1       	ldi	r24, 0x19	; 25
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	82 1b       	sub	r24, r18
    168c:	93 0b       	sbc	r25, r19
    168e:	90 93 04 02 	sts	0x0204, r25
    1692:	80 93 03 02 	sts	0x0203, r24
    1696:	e2 ce       	rjmp	.-572    	; 0x145c <start_vertical_speed_control_left+0x4e>

00001698 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	09 f4       	brne	.+2      	; 0x16ac <start_vertical_speed_control_right+0x14>
    16aa:	b7 c0       	rjmp	.+366    	; 0x181a <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    16ac:	20 91 1e 04 	lds	r18, 0x041E
    16b0:	30 91 1f 04 	lds	r19, 0x041F
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	2e 30       	cpi	r18, 0x0E	; 14
    16b8:	34 07       	cpc	r19, r20
    16ba:	0c f4       	brge	.+2      	; 0x16be <start_vertical_speed_control_right+0x26>
    16bc:	88 c0       	rjmp	.+272    	; 0x17ce <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    16be:	18 16       	cp	r1, r24
    16c0:	19 06       	cpc	r1, r25
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <start_vertical_speed_control_right+0x2e>
    16c4:	13 c1       	rjmp	.+550    	; 0x18ec <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    16c6:	88 e6       	ldi	r24, 0x68	; 104
    16c8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    16ca:	82 1b       	sub	r24, r18
    16cc:	93 0b       	sbc	r25, r19
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	95 95       	asr	r25
    16d4:	87 95       	ror	r24
    16d6:	29 e1       	ldi	r18, 0x19	; 25
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	28 1b       	sub	r18, r24
    16dc:	39 0b       	sbc	r19, r25
    16de:	30 93 06 02 	sts	0x0206, r19
    16e2:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    16e6:	40 91 56 04 	lds	r20, 0x0456
    16ea:	50 91 57 04 	lds	r21, 0x0457
    16ee:	50 93 30 04 	sts	0x0430, r21
    16f2:	40 93 2f 04 	sts	0x042F, r20
	if(*pwm_right >= 0) {
    16f6:	20 81       	ld	r18, Z
    16f8:	31 81       	ldd	r19, Z+1	; 0x01
    16fa:	37 fd       	sbrc	r19, 7
    16fc:	d2 c0       	rjmp	.+420    	; 0x18a2 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    16fe:	80 91 e9 03 	lds	r24, 0x03E9
    1702:	90 91 ea 03 	lds	r25, 0x03EA
    1706:	b9 01       	movw	r22, r18
    1708:	68 1b       	sub	r22, r24
    170a:	79 0b       	sbc	r23, r25
    170c:	cb 01       	movw	r24, r22
    170e:	70 93 57 04 	sts	0x0457, r23
    1712:	60 93 56 04 	sts	0x0456, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1716:	20 91 f9 03 	lds	r18, 0x03F9
    171a:	30 91 fa 03 	lds	r19, 0x03FA
    171e:	28 0f       	add	r18, r24
    1720:	39 1f       	adc	r19, r25
    1722:	30 93 fa 03 	sts	0x03FA, r19
    1726:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    172a:	76 e0       	ldi	r23, 0x06	; 6
    172c:	21 34       	cpi	r18, 0x41	; 65
    172e:	37 07       	cpc	r19, r23
    1730:	0c f4       	brge	.+2      	; 0x1734 <start_vertical_speed_control_right+0x9c>
    1732:	84 c0       	rjmp	.+264    	; 0x183c <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    1734:	20 e4       	ldi	r18, 0x40	; 64
    1736:	36 e0       	ldi	r19, 0x06	; 6
    1738:	30 93 fa 03 	sts	0x03FA, r19
    173c:	20 93 f9 03 	sts	0x03F9, r18
    1740:	60 ec       	ldi	r22, 0xC0	; 192
    1742:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1744:	9c 01       	movw	r18, r24
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	dc 01       	movw	r26, r24
    174c:	aa 0f       	add	r26, r26
    174e:	bb 1f       	adc	r27, r27
    1750:	aa 0f       	add	r26, r26
    1752:	bb 1f       	adc	r27, r27
    1754:	aa 0f       	add	r26, r26
    1756:	bb 1f       	adc	r27, r27
    1758:	2a 0f       	add	r18, r26
    175a:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    175c:	00 81       	ld	r16, Z
    175e:	11 81       	ldd	r17, Z+1	; 0x01
    1760:	c0 91 05 02 	lds	r28, 0x0205
    1764:	d0 91 06 02 	lds	r29, 0x0206
    1768:	0c 9f       	mul	r16, r28
    176a:	d0 01       	movw	r26, r0
    176c:	0d 9f       	mul	r16, r29
    176e:	b0 0d       	add	r27, r0
    1770:	1c 9f       	mul	r17, r28
    1772:	b0 0d       	add	r27, r0
    1774:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1776:	2a 0f       	add	r18, r26
    1778:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    177a:	48 1b       	sub	r20, r24
    177c:	59 0b       	sbc	r21, r25
    177e:	44 0f       	add	r20, r20
    1780:	55 1f       	adc	r21, r21
    1782:	24 0f       	add	r18, r20
    1784:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1786:	26 0f       	add	r18, r22
    1788:	37 1f       	adc	r19, r23
    178a:	30 93 f4 03 	sts	0x03F4, r19
    178e:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1792:	37 fd       	sbrc	r19, 7
    1794:	69 c0       	rjmp	.+210    	; 0x1868 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	0c f0       	brlt	.+2      	; 0x179e <start_vertical_speed_control_right+0x106>
    179c:	6f c0       	rjmp	.+222    	; 0x187c <start_vertical_speed_control_right+0x1e4>
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	97 fd       	sbrc	r25, 7
    17a4:	89 c0       	rjmp	.+274    	; 0x18b8 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    17a6:	7d e5       	ldi	r23, 0x5D	; 93
    17a8:	21 3c       	cpi	r18, 0xC1	; 193
    17aa:	37 07       	cpc	r19, r23
    17ac:	0c f4       	brge	.+2      	; 0x17b0 <start_vertical_speed_control_right+0x118>
    17ae:	66 c0       	rjmp	.+204    	; 0x187c <start_vertical_speed_control_right+0x1e4>
    17b0:	80 ec       	ldi	r24, 0xC0	; 192
    17b2:	9d e5       	ldi	r25, 0x5D	; 93
    17b4:	90 93 f4 03 	sts	0x03F4, r25
    17b8:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    17ce:	24 3b       	cpi	r18, 0xB4	; 180
    17d0:	31 05       	cpc	r19, r1
    17d2:	94 f4       	brge	.+36     	; 0x17f8 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    17d4:	2a 35       	cpi	r18, 0x5A	; 90
    17d6:	31 05       	cpc	r19, r1
    17d8:	7c f4       	brge	.+30     	; 0x17f8 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    17da:	18 16       	cp	r1, r24
    17dc:	19 06       	cpc	r1, r25
    17de:	0c f0       	brlt	.+2      	; 0x17e2 <start_vertical_speed_control_right+0x14a>
    17e0:	93 c0       	rjmp	.+294    	; 0x1908 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    17e2:	35 95       	asr	r19
    17e4:	27 95       	ror	r18
    17e6:	35 95       	asr	r19
    17e8:	27 95       	ror	r18
    17ea:	27 5e       	subi	r18, 0xE7	; 231
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	30 93 06 02 	sts	0x0206, r19
    17f2:	20 93 05 02 	sts	0x0205, r18
    17f6:	77 cf       	rjmp	.-274    	; 0x16e6 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    17f8:	18 16       	cp	r1, r24
    17fa:	19 06       	cpc	r1, r25
    17fc:	94 f5       	brge	.+100    	; 0x1862 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    17fe:	84 eb       	ldi	r24, 0xB4	; 180
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	82 1b       	sub	r24, r18
    1804:	93 0b       	sbc	r25, r19
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	49 96       	adiw	r24, 0x19	; 25
    1810:	90 93 06 02 	sts	0x0206, r25
    1814:	80 93 05 02 	sts	0x0205, r24
    1818:	66 cf       	rjmp	.-308    	; 0x16e6 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    181a:	10 92 fa 03 	sts	0x03FA, r1
    181e:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1822:	10 92 57 04 	sts	0x0457, r1
    1826:	10 92 56 04 	sts	0x0456, r1
		delta_right_speed_prev = 0;
    182a:	10 92 30 04 	sts	0x0430, r1
    182e:	10 92 2f 04 	sts	0x042F, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    183c:	69 ef       	ldi	r22, 0xF9	; 249
    183e:	20 3c       	cpi	r18, 0xC0	; 192
    1840:	36 07       	cpc	r19, r22
    1842:	4c f4       	brge	.+18     	; 0x1856 <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1844:	20 ec       	ldi	r18, 0xC0	; 192
    1846:	39 ef       	ldi	r19, 0xF9	; 249
    1848:	30 93 fa 03 	sts	0x03FA, r19
    184c:	20 93 f9 03 	sts	0x03F9, r18
    1850:	60 e4       	ldi	r22, 0x40	; 64
    1852:	7d ee       	ldi	r23, 0xED	; 237
    1854:	77 cf       	rjmp	.-274    	; 0x1744 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1856:	b9 01       	movw	r22, r18
    1858:	66 0f       	add	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	62 0f       	add	r22, r18
    185e:	73 1f       	adc	r23, r19
    1860:	71 cf       	rjmp	.-286    	; 0x1744 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1862:	84 eb       	ldi	r24, 0xB4	; 180
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	31 cf       	rjmp	.-414    	; 0x16ca <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	97 fd       	sbrc	r25, 7
    186e:	06 c0       	rjmp	.+12     	; 0x187c <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1870:	10 92 f4 03 	sts	0x03F4, r1
    1874:	10 92 f3 03 	sts	0x03F3, r1
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    187c:	82 ea       	ldi	r24, 0xA2	; 162
    187e:	20 34       	cpi	r18, 0x40	; 64
    1880:	38 07       	cpc	r19, r24
    1882:	04 f5       	brge	.+64     	; 0x18c4 <start_vertical_speed_control_right+0x22c>
    1884:	80 e4       	ldi	r24, 0x40	; 64
    1886:	92 ea       	ldi	r25, 0xA2	; 162
    1888:	90 93 f4 03 	sts	0x03F4, r25
    188c:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	9e ef       	ldi	r25, 0xFE	; 254
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24

}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    18a2:	80 91 e9 03 	lds	r24, 0x03E9
    18a6:	90 91 ea 03 	lds	r25, 0x03EA
    18aa:	82 0f       	add	r24, r18
    18ac:	93 1f       	adc	r25, r19
    18ae:	90 93 57 04 	sts	0x0457, r25
    18b2:	80 93 56 04 	sts	0x0456, r24
    18b6:	2f cf       	rjmp	.-418    	; 0x1716 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    18b8:	10 92 f4 03 	sts	0x03F4, r1
    18bc:	10 92 f3 03 	sts	0x03F3, r1
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    18c4:	35 95       	asr	r19
    18c6:	27 95       	ror	r18
    18c8:	35 95       	asr	r19
    18ca:	27 95       	ror	r18
    18cc:	35 95       	asr	r19
    18ce:	27 95       	ror	r18
    18d0:	35 95       	asr	r19
    18d2:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    18d4:	31 83       	std	Z+1, r19	; 0x01
    18d6:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    18d8:	42 e0       	ldi	r20, 0x02	; 2
    18da:	21 30       	cpi	r18, 0x01	; 1
    18dc:	34 07       	cpc	r19, r20
    18de:	0c f0       	brlt	.+2      	; 0x18e2 <start_vertical_speed_control_right+0x24a>
    18e0:	6d cf       	rjmp	.-294    	; 0x17bc <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    18e2:	6e ef       	ldi	r22, 0xFE	; 254
    18e4:	20 30       	cpi	r18, 0x00	; 0
    18e6:	36 07       	cpc	r19, r22
    18e8:	9c f2       	brlt	.-90     	; 0x1890 <start_vertical_speed_control_right+0x1f8>
    18ea:	6c cf       	rjmp	.-296    	; 0x17c4 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    18ec:	88 e6       	ldi	r24, 0x68	; 104
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	82 1b       	sub	r24, r18
    18f2:	93 0b       	sbc	r25, r19
    18f4:	95 95       	asr	r25
    18f6:	87 95       	ror	r24
    18f8:	95 95       	asr	r25
    18fa:	87 95       	ror	r24
    18fc:	49 96       	adiw	r24, 0x19	; 25
    18fe:	90 93 06 02 	sts	0x0206, r25
    1902:	80 93 05 02 	sts	0x0205, r24
    1906:	ef ce       	rjmp	.-546    	; 0x16e6 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1908:	35 95       	asr	r19
    190a:	27 95       	ror	r18
    190c:	35 95       	asr	r19
    190e:	27 95       	ror	r18
    1910:	89 e1       	ldi	r24, 0x19	; 25
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	82 1b       	sub	r24, r18
    1916:	93 0b       	sbc	r25, r19
    1918:	90 93 06 02 	sts	0x0206, r25
    191c:	80 93 05 02 	sts	0x0205, r24
    1920:	e2 ce       	rjmp	.-572    	; 0x16e6 <start_vertical_speed_control_right+0x4e>

00001922 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1922:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1924:	80 81       	ld	r24, Z
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	09 f4       	brne	.+2      	; 0x192e <start_horizontal_speed_control_right+0xc>
    192c:	7b c0       	rjmp	.+246    	; 0x1a24 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    192e:	a0 91 56 04 	lds	r26, 0x0456
    1932:	b0 91 57 04 	lds	r27, 0x0457
    1936:	b0 93 30 04 	sts	0x0430, r27
    193a:	a0 93 2f 04 	sts	0x042F, r26
	if(*pwm_right >= 0) {
    193e:	20 81       	ld	r18, Z
    1940:	31 81       	ldd	r19, Z+1	; 0x01
    1942:	37 fd       	sbrc	r19, 7
    1944:	89 c0       	rjmp	.+274    	; 0x1a58 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1946:	80 91 e9 03 	lds	r24, 0x03E9
    194a:	90 91 ea 03 	lds	r25, 0x03EA
    194e:	a9 01       	movw	r20, r18
    1950:	48 1b       	sub	r20, r24
    1952:	59 0b       	sbc	r21, r25
    1954:	ca 01       	movw	r24, r20
    1956:	50 93 57 04 	sts	0x0457, r21
    195a:	40 93 56 04 	sts	0x0456, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    195e:	20 91 f9 03 	lds	r18, 0x03F9
    1962:	30 91 fa 03 	lds	r19, 0x03FA
    1966:	28 0f       	add	r18, r24
    1968:	39 1f       	adc	r19, r25
    196a:	30 93 fa 03 	sts	0x03FA, r19
    196e:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1972:	56 e0       	ldi	r21, 0x06	; 6
    1974:	21 34       	cpi	r18, 0x41	; 65
    1976:	35 07       	cpc	r19, r21
    1978:	0c f4       	brge	.+2      	; 0x197c <start_horizontal_speed_control_right+0x5a>
    197a:	61 c0       	rjmp	.+194    	; 0x1a3e <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    197c:	20 e4       	ldi	r18, 0x40	; 64
    197e:	36 e0       	ldi	r19, 0x06	; 6
    1980:	30 93 fa 03 	sts	0x03FA, r19
    1984:	20 93 f9 03 	sts	0x03F9, r18
    1988:	60 e8       	ldi	r22, 0x80	; 128
    198a:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    198c:	9c 01       	movw	r18, r24
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	28 0f       	add	r18, r24
    1994:	39 1f       	adc	r19, r25
    1996:	22 0f       	add	r18, r18
    1998:	33 1f       	adc	r19, r19
    199a:	22 0f       	add	r18, r18
    199c:	33 1f       	adc	r19, r19
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	28 0f       	add	r18, r24
    19a4:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    19a6:	40 81       	ld	r20, Z
    19a8:	51 81       	ldd	r21, Z+1	; 0x01
    19aa:	44 0f       	add	r20, r20
    19ac:	55 1f       	adc	r21, r21
    19ae:	44 0f       	add	r20, r20
    19b0:	55 1f       	adc	r21, r21
    19b2:	44 0f       	add	r20, r20
    19b4:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    19b6:	24 0f       	add	r18, r20
    19b8:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    19ba:	ad 01       	movw	r20, r26
    19bc:	48 1b       	sub	r20, r24
    19be:	59 0b       	sbc	r21, r25
    19c0:	ca 01       	movw	r24, r20
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	84 0f       	add	r24, r20
    19c8:	95 1f       	adc	r25, r21
    19ca:	28 0f       	add	r18, r24
    19cc:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    19ce:	26 0f       	add	r18, r22
    19d0:	37 1f       	adc	r19, r23
    19d2:	30 93 f4 03 	sts	0x03F4, r19
    19d6:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    19da:	37 fd       	sbrc	r19, 7
    19dc:	4c c0       	rjmp	.+152    	; 0x1a76 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    19de:	12 16       	cp	r1, r18
    19e0:	13 06       	cpc	r1, r19
    19e2:	0c f0       	brlt	.+2      	; 0x19e6 <start_horizontal_speed_control_right+0xc4>
    19e4:	52 c0       	rjmp	.+164    	; 0x1a8a <start_horizontal_speed_control_right+0x168>
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	97 fd       	sbrc	r25, 7
    19ec:	67 c0       	rjmp	.+206    	; 0x1abc <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    19ee:	5d e5       	ldi	r21, 0x5D	; 93
    19f0:	21 3c       	cpi	r18, 0xC1	; 193
    19f2:	35 07       	cpc	r19, r21
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <start_horizontal_speed_control_right+0xd6>
    19f6:	49 c0       	rjmp	.+146    	; 0x1a8a <start_horizontal_speed_control_right+0x168>
    19f8:	80 ec       	ldi	r24, 0xC0	; 192
    19fa:	9d e5       	ldi	r25, 0x5D	; 93
    19fc:	90 93 f4 03 	sts	0x03F4, r25
    1a00:	80 93 f3 03 	sts	0x03F3, r24
    1a04:	2c ed       	ldi	r18, 0xDC	; 220
    1a06:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1a08:	22 5e       	subi	r18, 0xE2	; 226
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	31 83       	std	Z+1, r19	; 0x01
    1a0e:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1a10:	42 e0       	ldi	r20, 0x02	; 2
    1a12:	21 30       	cpi	r18, 0x01	; 1
    1a14:	34 07       	cpc	r19, r20
    1a16:	0c f4       	brge	.+2      	; 0x1a1a <start_horizontal_speed_control_right+0xf8>
    1a18:	48 c0       	rjmp	.+144    	; 0x1aaa <start_horizontal_speed_control_right+0x188>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	92 e0       	ldi	r25, 0x02	; 2
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
    1a22:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1a24:	10 92 fa 03 	sts	0x03FA, r1
    1a28:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1a2c:	10 92 57 04 	sts	0x0457, r1
    1a30:	10 92 56 04 	sts	0x0456, r1
		delta_right_speed_prev = 0;
    1a34:	10 92 30 04 	sts	0x0430, r1
    1a38:	10 92 2f 04 	sts	0x042F, r1
		return;
    1a3c:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1a3e:	49 ef       	ldi	r20, 0xF9	; 249
    1a40:	20 3c       	cpi	r18, 0xC0	; 192
    1a42:	34 07       	cpc	r19, r20
    1a44:	a4 f4       	brge	.+40     	; 0x1a6e <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1a46:	20 ec       	ldi	r18, 0xC0	; 192
    1a48:	39 ef       	ldi	r19, 0xF9	; 249
    1a4a:	30 93 fa 03 	sts	0x03FA, r19
    1a4e:	20 93 f9 03 	sts	0x03F9, r18
    1a52:	60 e8       	ldi	r22, 0x80	; 128
    1a54:	73 ef       	ldi	r23, 0xF3	; 243
    1a56:	9a cf       	rjmp	.-204    	; 0x198c <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1a58:	80 91 e9 03 	lds	r24, 0x03E9
    1a5c:	90 91 ea 03 	lds	r25, 0x03EA
    1a60:	82 0f       	add	r24, r18
    1a62:	93 1f       	adc	r25, r19
    1a64:	90 93 57 04 	sts	0x0457, r25
    1a68:	80 93 56 04 	sts	0x0456, r24
    1a6c:	78 cf       	rjmp	.-272    	; 0x195e <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1a6e:	b9 01       	movw	r22, r18
    1a70:	66 0f       	add	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	8b cf       	rjmp	.-234    	; 0x198c <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	97 fd       	sbrc	r25, 7
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1a7e:	10 92 f4 03 	sts	0x03F4, r1
    1a82:	10 92 f3 03 	sts	0x03F3, r1
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1a8a:	82 ea       	ldi	r24, 0xA2	; 162
    1a8c:	20 34       	cpi	r18, 0x40	; 64
    1a8e:	38 07       	cpc	r19, r24
    1a90:	dc f4       	brge	.+54     	; 0x1ac8 <start_horizontal_speed_control_right+0x1a6>
    1a92:	80 e4       	ldi	r24, 0x40	; 64
    1a94:	92 ea       	ldi	r25, 0xA2	; 162
    1a96:	90 93 f4 03 	sts	0x03F4, r25
    1a9a:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1a9e:	24 e2       	ldi	r18, 0x24	; 36
    1aa0:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1aa2:	2e 51       	subi	r18, 0x1E	; 30
    1aa4:	30 40       	sbci	r19, 0x00	; 0
    1aa6:	31 83       	std	Z+1, r19	; 0x01
    1aa8:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1aaa:	5e ef       	ldi	r21, 0xFE	; 254
    1aac:	20 30       	cpi	r18, 0x00	; 0
    1aae:	35 07       	cpc	r19, r21
    1ab0:	24 f4       	brge	.+8      	; 0x1aba <start_horizontal_speed_control_right+0x198>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	9e ef       	ldi	r25, 0xFE	; 254
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1abc:	10 92 f4 03 	sts	0x03F4, r1
    1ac0:	10 92 f3 03 	sts	0x03F3, r1
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1ac8:	35 95       	asr	r19
    1aca:	27 95       	ror	r18
    1acc:	35 95       	asr	r19
    1ace:	27 95       	ror	r18
    1ad0:	35 95       	asr	r19
    1ad2:	27 95       	ror	r18
    1ad4:	35 95       	asr	r19
    1ad6:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1ad8:	31 83       	std	Z+1, r19	; 0x01
    1ada:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1adc:	12 16       	cp	r1, r18
    1ade:	13 06       	cpc	r1, r19
    1ae0:	0c f4       	brge	.+2      	; 0x1ae4 <start_horizontal_speed_control_right+0x1c2>
    1ae2:	92 cf       	rjmp	.-220    	; 0x1a08 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1ae4:	21 15       	cp	r18, r1
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	e1 f6       	brne	.-72     	; 0x1aa2 <start_horizontal_speed_control_right+0x180>
    1aea:	08 95       	ret

00001aec <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1aec:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1aee:	80 81       	ld	r24, Z
    1af0:	91 81       	ldd	r25, Z+1	; 0x01
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <start_horizontal_speed_control_left+0xc>
    1af6:	7b c0       	rjmp	.+246    	; 0x1bee <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1af8:	a0 91 2d 04 	lds	r26, 0x042D
    1afc:	b0 91 2e 04 	lds	r27, 0x042E
    1b00:	b0 93 48 04 	sts	0x0448, r27
    1b04:	a0 93 47 04 	sts	0x0447, r26
	if(*pwm_left >= 0) {
    1b08:	20 81       	ld	r18, Z
    1b0a:	31 81       	ldd	r19, Z+1	; 0x01
    1b0c:	37 fd       	sbrc	r19, 7
    1b0e:	89 c0       	rjmp	.+274    	; 0x1c22 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1b10:	80 91 e7 03 	lds	r24, 0x03E7
    1b14:	90 91 e8 03 	lds	r25, 0x03E8
    1b18:	a9 01       	movw	r20, r18
    1b1a:	48 1b       	sub	r20, r24
    1b1c:	59 0b       	sbc	r21, r25
    1b1e:	ca 01       	movw	r24, r20
    1b20:	50 93 2e 04 	sts	0x042E, r21
    1b24:	40 93 2d 04 	sts	0x042D, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1b28:	20 91 f7 03 	lds	r18, 0x03F7
    1b2c:	30 91 f8 03 	lds	r19, 0x03F8
    1b30:	28 0f       	add	r18, r24
    1b32:	39 1f       	adc	r19, r25
    1b34:	30 93 f8 03 	sts	0x03F8, r19
    1b38:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1b3c:	56 e0       	ldi	r21, 0x06	; 6
    1b3e:	21 34       	cpi	r18, 0x41	; 65
    1b40:	35 07       	cpc	r19, r21
    1b42:	0c f4       	brge	.+2      	; 0x1b46 <start_horizontal_speed_control_left+0x5a>
    1b44:	61 c0       	rjmp	.+194    	; 0x1c08 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1b46:	20 e4       	ldi	r18, 0x40	; 64
    1b48:	36 e0       	ldi	r19, 0x06	; 6
    1b4a:	30 93 f8 03 	sts	0x03F8, r19
    1b4e:	20 93 f7 03 	sts	0x03F7, r18
    1b52:	60 e8       	ldi	r22, 0x80	; 128
    1b54:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1b56:	9c 01       	movw	r18, r24
    1b58:	22 0f       	add	r18, r18
    1b5a:	33 1f       	adc	r19, r19
    1b5c:	28 0f       	add	r18, r24
    1b5e:	39 1f       	adc	r19, r25
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	22 0f       	add	r18, r18
    1b66:	33 1f       	adc	r19, r19
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	28 0f       	add	r18, r24
    1b6e:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1b70:	40 81       	ld	r20, Z
    1b72:	51 81       	ldd	r21, Z+1	; 0x01
    1b74:	44 0f       	add	r20, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	44 0f       	add	r20, r20
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	44 0f       	add	r20, r20
    1b7e:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1b80:	24 0f       	add	r18, r20
    1b82:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1b84:	ad 01       	movw	r20, r26
    1b86:	48 1b       	sub	r20, r24
    1b88:	59 0b       	sbc	r21, r25
    1b8a:	ca 01       	movw	r24, r20
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	84 0f       	add	r24, r20
    1b92:	95 1f       	adc	r25, r21
    1b94:	28 0f       	add	r18, r24
    1b96:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1b98:	26 0f       	add	r18, r22
    1b9a:	37 1f       	adc	r19, r23
    1b9c:	30 93 f6 03 	sts	0x03F6, r19
    1ba0:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1ba4:	37 fd       	sbrc	r19, 7
    1ba6:	4c c0       	rjmp	.+152    	; 0x1c40 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	0c f0       	brlt	.+2      	; 0x1bb0 <start_horizontal_speed_control_left+0xc4>
    1bae:	52 c0       	rjmp	.+164    	; 0x1c54 <start_horizontal_speed_control_left+0x168>
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	97 fd       	sbrc	r25, 7
    1bb6:	67 c0       	rjmp	.+206    	; 0x1c86 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1bb8:	5d e5       	ldi	r21, 0x5D	; 93
    1bba:	21 3c       	cpi	r18, 0xC1	; 193
    1bbc:	35 07       	cpc	r19, r21
    1bbe:	0c f4       	brge	.+2      	; 0x1bc2 <start_horizontal_speed_control_left+0xd6>
    1bc0:	49 c0       	rjmp	.+146    	; 0x1c54 <start_horizontal_speed_control_left+0x168>
    1bc2:	80 ec       	ldi	r24, 0xC0	; 192
    1bc4:	9d e5       	ldi	r25, 0x5D	; 93
    1bc6:	90 93 f6 03 	sts	0x03F6, r25
    1bca:	80 93 f5 03 	sts	0x03F5, r24
    1bce:	2c ed       	ldi	r18, 0xDC	; 220
    1bd0:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1bd2:	22 5e       	subi	r18, 0xE2	; 226
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	31 83       	std	Z+1, r19	; 0x01
    1bd8:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1bda:	42 e0       	ldi	r20, 0x02	; 2
    1bdc:	21 30       	cpi	r18, 0x01	; 1
    1bde:	34 07       	cpc	r19, r20
    1be0:	0c f4       	brge	.+2      	; 0x1be4 <start_horizontal_speed_control_left+0xf8>
    1be2:	48 c0       	rjmp	.+144    	; 0x1c74 <start_horizontal_speed_control_left+0x188>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1bee:	10 92 f8 03 	sts	0x03F8, r1
    1bf2:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1bf6:	10 92 2e 04 	sts	0x042E, r1
    1bfa:	10 92 2d 04 	sts	0x042D, r1
		delta_left_speed_prev = 0;
    1bfe:	10 92 48 04 	sts	0x0448, r1
    1c02:	10 92 47 04 	sts	0x0447, r1
		return;
    1c06:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1c08:	49 ef       	ldi	r20, 0xF9	; 249
    1c0a:	20 3c       	cpi	r18, 0xC0	; 192
    1c0c:	34 07       	cpc	r19, r20
    1c0e:	a4 f4       	brge	.+40     	; 0x1c38 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1c10:	20 ec       	ldi	r18, 0xC0	; 192
    1c12:	39 ef       	ldi	r19, 0xF9	; 249
    1c14:	30 93 f8 03 	sts	0x03F8, r19
    1c18:	20 93 f7 03 	sts	0x03F7, r18
    1c1c:	60 e8       	ldi	r22, 0x80	; 128
    1c1e:	73 ef       	ldi	r23, 0xF3	; 243
    1c20:	9a cf       	rjmp	.-204    	; 0x1b56 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1c22:	80 91 e7 03 	lds	r24, 0x03E7
    1c26:	90 91 e8 03 	lds	r25, 0x03E8
    1c2a:	82 0f       	add	r24, r18
    1c2c:	93 1f       	adc	r25, r19
    1c2e:	90 93 2e 04 	sts	0x042E, r25
    1c32:	80 93 2d 04 	sts	0x042D, r24
    1c36:	78 cf       	rjmp	.-272    	; 0x1b28 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1c38:	b9 01       	movw	r22, r18
    1c3a:	66 0f       	add	r22, r22
    1c3c:	77 1f       	adc	r23, r23
    1c3e:	8b cf       	rjmp	.-234    	; 0x1b56 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	97 fd       	sbrc	r25, 7
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1c48:	10 92 f6 03 	sts	0x03F6, r1
    1c4c:	10 92 f5 03 	sts	0x03F5, r1
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1c54:	82 ea       	ldi	r24, 0xA2	; 162
    1c56:	20 34       	cpi	r18, 0x40	; 64
    1c58:	38 07       	cpc	r19, r24
    1c5a:	dc f4       	brge	.+54     	; 0x1c92 <start_horizontal_speed_control_left+0x1a6>
    1c5c:	80 e4       	ldi	r24, 0x40	; 64
    1c5e:	92 ea       	ldi	r25, 0xA2	; 162
    1c60:	90 93 f6 03 	sts	0x03F6, r25
    1c64:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1c68:	24 e2       	ldi	r18, 0x24	; 36
    1c6a:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    1c6c:	2e 51       	subi	r18, 0x1E	; 30
    1c6e:	30 40       	sbci	r19, 0x00	; 0
    1c70:	31 83       	std	Z+1, r19	; 0x01
    1c72:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1c74:	5e ef       	ldi	r21, 0xFE	; 254
    1c76:	20 30       	cpi	r18, 0x00	; 0
    1c78:	35 07       	cpc	r19, r21
    1c7a:	24 f4       	brge	.+8      	; 0x1c84 <start_horizontal_speed_control_left+0x198>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	9e ef       	ldi	r25, 0xFE	; 254
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1c86:	10 92 f6 03 	sts	0x03F6, r1
    1c8a:	10 92 f5 03 	sts	0x03F5, r1
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1c92:	35 95       	asr	r19
    1c94:	27 95       	ror	r18
    1c96:	35 95       	asr	r19
    1c98:	27 95       	ror	r18
    1c9a:	35 95       	asr	r19
    1c9c:	27 95       	ror	r18
    1c9e:	35 95       	asr	r19
    1ca0:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1ca2:	31 83       	std	Z+1, r19	; 0x01
    1ca4:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    1ca6:	12 16       	cp	r1, r18
    1ca8:	13 06       	cpc	r1, r19
    1caa:	0c f4       	brge	.+2      	; 0x1cae <start_horizontal_speed_control_left+0x1c2>
    1cac:	92 cf       	rjmp	.-220    	; 0x1bd2 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    1cae:	21 15       	cp	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	e1 f6       	brne	.-72     	; 0x1c6c <start_horizontal_speed_control_left+0x180>
    1cb4:	08 95       	ret

00001cb6 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1cb6:	85 b7       	in	r24, 0x35	; 53
    1cb8:	80 61       	ori	r24, 0x10	; 16
    1cba:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1cc0:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1cc2:	97 ef       	ldi	r25, 0xF7	; 247
    1cc4:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1cc6:	90 ee       	ldi	r25, 0xE0	; 224
    1cc8:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1cca:	90 ef       	ldi	r25, 0xF0	; 240
    1ccc:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1cce:	90 eb       	ldi	r25, 0xB0	; 176
    1cd0:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1cd2:	9c ef       	ldi	r25, 0xFC	; 252
    1cd4:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1cd6:	93 e0       	ldi	r25, 0x03	; 3
    1cd8:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1cda:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1cdc:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1cde:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1ce0:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1ce2:	80 91 28 04 	lds	r24, 0x0428
    1ce6:	88 23       	and	r24, r24
    1ce8:	e1 f0       	breq	.+56     	; 0x1d22 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	d1 f0       	breq	.+52     	; 0x1d22 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	51 f1       	breq	.+84     	; 0x1d46 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1cf2:	9f ef       	ldi	r25, 0xFF	; 255
    1cf4:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1cf8:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1cfc:	9f e0       	ldi	r25, 0x0F	; 15
    1cfe:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    1d02:	88 23       	and	r24, r24
    1d04:	a9 f4       	brne	.+42     	; 0x1d30 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    1d06:	90 91 05 01 	lds	r25, 0x0105
    1d0a:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1d0e:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1d12:	9f ef       	ldi	r25, 0xFF	; 255
    1d14:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    1d18:	88 23       	and	r24, r24
    1d1a:	29 f4       	brne	.+10     	; 0x1d26 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1d1c:	10 92 0b 01 	sts	0x010B, r1
    1d20:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    1d22:	14 ba       	out	0x14, r1	; 20
    1d24:	e6 cf       	rjmp	.-52     	; 0x1cf2 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	c9 f3       	breq	.-14     	; 0x1d1c <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	41 f0       	breq	.+16     	; 0x1d3e <initPortsIO+0x88>
    1d2e:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	59 f7       	brne	.-42     	; 0x1d0e <initPortsIO+0x58>
		PORTJ = 0x0F;
    1d38:	90 93 05 01 	sts	0x0105, r25
    1d3c:	e8 cf       	rjmp	.-48     	; 0x1d0e <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1d3e:	87 ef       	ldi	r24, 0xF7	; 247
    1d40:	80 93 0b 01 	sts	0x010B, r24
    1d44:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1d46:	98 e0       	ldi	r25, 0x08	; 8
    1d48:	94 bb       	out	0x14, r25	; 20
    1d4a:	d3 cf       	rjmp	.-90     	; 0x1cf2 <initPortsIO+0x3c>

00001d4c <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    1d4c:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1d50:	10 92 bc 00 	sts	0x00BC, r1
}
    1d54:	08 95       	ret

00001d56 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1d56:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1d58:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1d5a:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1d5e:	80 e2       	ldi	r24, 0x20	; 32
    1d60:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1d64:	08 95       	ret

00001d66 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1d66:	94 ea       	ldi	r25, 0xA4	; 164
    1d68:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1d6c:	90 91 bc 00 	lds	r25, 0x00BC
    1d70:	97 ff       	sbrs	r25, 7
    1d72:	fc cf       	rjmp	.-8      	; 0x1d6c <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d74:	90 91 b9 00 	lds	r25, 0x00B9
    1d78:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1d7a:	98 30       	cpi	r25, 0x08	; 8
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <i2c_start+0x20>
    1d7e:	90 31       	cpi	r25, 0x10	; 16
    1d80:	11 f0       	breq	.+4      	; 0x1d86 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1d86:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d8a:	84 e8       	ldi	r24, 0x84	; 132
    1d8c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1d90:	80 91 bc 00 	lds	r24, 0x00BC
    1d94:	87 ff       	sbrs	r24, 7
    1d96:	fc cf       	rjmp	.-8      	; 0x1d90 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d98:	90 91 b9 00 	lds	r25, 0x00B9
    1d9c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d9e:	98 31       	cpi	r25, 0x18	; 24
    1da0:	21 f0       	breq	.+8      	; 0x1daa <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 34       	cpi	r25, 0x40	; 64
    1da6:	19 f0       	breq	.+6      	; 0x1dae <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    1da8:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1daa:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1dac:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	08 95       	ret

00001db2 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1db2:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1db4:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1db6:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1db8:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1dbc:	90 91 bc 00 	lds	r25, 0x00BC
    1dc0:	97 ff       	sbrs	r25, 7
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1dc4:	90 91 b9 00 	lds	r25, 0x00B9
    1dc8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1dca:	98 30       	cpi	r25, 0x08	; 8
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <i2c_start_wait+0x20>
    1dce:	90 31       	cpi	r25, 0x10	; 16
    1dd0:	99 f7       	brne	.-26     	; 0x1db8 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1dd2:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1dd6:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1dda:	90 91 bc 00 	lds	r25, 0x00BC
    1dde:	97 ff       	sbrs	r25, 7
    1de0:	fc cf       	rjmp	.-8      	; 0x1dda <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1de2:	90 91 b9 00 	lds	r25, 0x00B9
    1de6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1de8:	90 32       	cpi	r25, 0x20	; 32
    1dea:	19 f0       	breq	.+6      	; 0x1df2 <i2c_start_wait+0x40>
    1dec:	98 35       	cpi	r25, 0x58	; 88
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <i2c_start_wait+0x40>
    1df0:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1df2:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1df6:	90 91 bc 00 	lds	r25, 0x00BC
    1dfa:	94 fd       	sbrc	r25, 4
    1dfc:	fc cf       	rjmp	.-8      	; 0x1df6 <i2c_start_wait+0x44>
    1dfe:	dc cf       	rjmp	.-72     	; 0x1db8 <i2c_start_wait+0x6>

00001e00 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1e00:	94 ea       	ldi	r25, 0xA4	; 164
    1e02:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1e06:	90 91 bc 00 	lds	r25, 0x00BC
    1e0a:	97 ff       	sbrs	r25, 7
    1e0c:	fc cf       	rjmp	.-8      	; 0x1e06 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1e0e:	90 91 b9 00 	lds	r25, 0x00B9
    1e12:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1e14:	98 30       	cpi	r25, 0x08	; 8
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <i2c_rep_start+0x20>
    1e18:	90 31       	cpi	r25, 0x10	; 16
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1e20:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e24:	84 e8       	ldi	r24, 0x84	; 132
    1e26:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1e2a:	80 91 bc 00 	lds	r24, 0x00BC
    1e2e:	87 ff       	sbrs	r24, 7
    1e30:	fc cf       	rjmp	.-8      	; 0x1e2a <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1e32:	90 91 b9 00 	lds	r25, 0x00B9
    1e36:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1e38:	98 31       	cpi	r25, 0x18	; 24
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 34       	cpi	r25, 0x40	; 64
    1e40:	19 f0       	breq	.+6      	; 0x1e48 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    1e42:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1e46:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	08 95       	ret

00001e4c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1e4c:	84 e9       	ldi	r24, 0x94	; 148
    1e4e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1e52:	80 91 bc 00 	lds	r24, 0x00BC
    1e56:	84 fd       	sbrc	r24, 4
    1e58:	fc cf       	rjmp	.-8      	; 0x1e52 <i2c_stop+0x6>

}/* i2c_stop */
    1e5a:	08 95       	ret

00001e5c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1e5c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e60:	84 e8       	ldi	r24, 0x84	; 132
    1e62:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1e66:	80 91 bc 00 	lds	r24, 0x00BC
    1e6a:	87 ff       	sbrs	r24, 7
    1e6c:	fc cf       	rjmp	.-8      	; 0x1e66 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1e6e:	90 91 b9 00 	lds	r25, 0x00B9
    1e72:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	98 32       	cpi	r25, 0x28	; 40
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <i2c_write+0x20>
	return 0;

}/* i2c_write */
    1e7a:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1e7e:	08 95       	ret

00001e80 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1e80:	84 ec       	ldi	r24, 0xC4	; 196
    1e82:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1e86:	80 91 bc 00 	lds	r24, 0x00BC
    1e8a:	87 ff       	sbrs	r24, 7
    1e8c:	fc cf       	rjmp	.-8      	; 0x1e86 <i2c_readAck+0x6>

    return TWDR;
    1e8e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1e92:	08 95       	ret

00001e94 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e94:	84 e8       	ldi	r24, 0x84	; 132
    1e96:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1e9a:	80 91 bc 00 	lds	r24, 0x00BC
    1e9e:	87 ff       	sbrs	r24, 7
    1ea0:	fc cf       	rjmp	.-8      	; 0x1e9a <i2c_readNak+0x6>
	
    return TWDR;
    1ea2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1ea6:	08 95       	ret

00001ea8 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    1ea8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    1eac:	80 e1       	ldi	r24, 0x10	; 16
    1eae:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    1eb2:	e0 ec       	ldi	r30, 0xC0	; 192
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	82 60       	ori	r24, 0x02	; 2
    1eba:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    1ebc:	e1 ec       	ldi	r30, 0xC1	; 193
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 69       	ori	r24, 0x98	; 152
    1ec4:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    1ec6:	e2 ec       	ldi	r30, 0xC2	; 194
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	86 60       	ori	r24, 0x06	; 6
    1ece:	80 83       	st	Z, r24

}
    1ed0:	08 95       	ret

00001ed2 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    1ed2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    1ed6:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    1eda:	10 92 c2 00 	sts	0x00C2, r1

}
    1ede:	08 95       	ret

00001ee0 <usartTransmit>:

void usartTransmit(unsigned char data) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    1ee0:	90 91 c0 00 	lds	r25, 0x00C0
    1ee4:	95 ff       	sbrs	r25, 5
    1ee6:	fc cf       	rjmp	.-8      	; 0x1ee0 <usartTransmit>
	UDR0 = data;						// put data into buffer, sends the data
    1ee8:	80 93 c6 00 	sts	0x00C6, r24

}
    1eec:	08 95       	ret

00001eee <__vector_25>:
// for options 0,1,2 there are the commands "+" and "-" that increase or decrease the luminosity of the leds
// for options 3,4 there are the commmands "+", "-" and "s" to increase, decrease and reset to zero the speed respectively
// for options 5 there is the command "s" that stop the sending of the adc values
// if a key is pressed that do not correspond to any commands for that option, then the initial menu is entered.

ISR(USART0_RX_vect) {
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	2f 93       	push	r18
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25

	char receivedByte = UDR0;
    1efe:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {						// menu
    1f02:	90 91 10 02 	lds	r25, 0x0210
    1f06:	99 23       	and	r25, r25
    1f08:	b9 f0       	breq	.+46     	; 0x1f38 <__vector_25+0x4a>
		switch(receivedByte) {
    1f0a:	82 33       	cpi	r24, 0x32	; 50
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <__vector_25+0x22>
    1f0e:	5b c0       	rjmp	.+182    	; 0x1fc6 <__vector_25+0xd8>
    1f10:	83 33       	cpi	r24, 0x33	; 51
    1f12:	80 f5       	brcc	.+96     	; 0x1f74 <__vector_25+0x86>
    1f14:	80 33       	cpi	r24, 0x30	; 48
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <__vector_25+0x2c>
    1f18:	7e c0       	rjmp	.+252    	; 0x2016 <__vector_25+0x128>
    1f1a:	81 33       	cpi	r24, 0x31	; 49
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <__vector_25+0x3a>
			case '0': 							// red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': 							// green led
				peripheralChoice = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    1f24:	10 92 10 02 	sts	0x0210, r1

	}



}
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	2f 91       	pop	r18
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	0f 90       	pop	r0
    1f34:	1f 90       	pop	r1
    1f36:	18 95       	reti

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    1f38:	90 91 0f 02 	lds	r25, 0x020F
    1f3c:	92 30       	cpi	r25, 0x02	; 2
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <__vector_25+0x54>
    1f40:	48 c0       	rjmp	.+144    	; 0x1fd2 <__vector_25+0xe4>
    1f42:	93 30       	cpi	r25, 0x03	; 3
    1f44:	40 f1       	brcs	.+80     	; 0x1f96 <__vector_25+0xa8>
    1f46:	94 30       	cpi	r25, 0x04	; 4
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <__vector_25+0x5e>
    1f4a:	8c c0       	rjmp	.+280    	; 0x2064 <__vector_25+0x176>
    1f4c:	94 30       	cpi	r25, 0x04	; 4
    1f4e:	08 f4       	brcc	.+2      	; 0x1f52 <__vector_25+0x64>
    1f50:	73 c0       	rjmp	.+230    	; 0x2038 <__vector_25+0x14a>
    1f52:	95 30       	cpi	r25, 0x05	; 5
    1f54:	49 f7       	brne	.-46     	; 0x1f28 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: 								// adc
				if(receivedByte == 's') {
    1f56:	83 37       	cpi	r24, 0x73	; 115
    1f58:	39 f7       	brne	.-50     	; 0x1f28 <__vector_25+0x3a>
					sendAdcValues = 0;
    1f5a:	10 92 06 04 	sts	0x0406, r1
					choosePeripheral = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	80 93 10 02 	sts	0x0210, r24

	}



}
    1f64:	9f 91       	pop	r25
    1f66:	8f 91       	pop	r24
    1f68:	2f 91       	pop	r18
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
    1f74:	84 33       	cpi	r24, 0x34	; 52
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <__vector_25+0x8c>
    1f78:	59 c0       	rjmp	.+178    	; 0x202c <__vector_25+0x13e>
    1f7a:	84 33       	cpi	r24, 0x34	; 52
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <__vector_25+0x92>
    1f7e:	50 c0       	rjmp	.+160    	; 0x2020 <__vector_25+0x132>
    1f80:	85 33       	cpi	r24, 0x35	; 53
    1f82:	91 f6       	brne	.-92     	; 0x1f28 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':							// send adc values
				peripheralChoice = 5;
    1f84:	85 e0       	ldi	r24, 0x05	; 5
    1f86:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    1f8a:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	80 93 06 04 	sts	0x0406, r24
				break;
    1f94:	c9 cf       	rjmp	.-110    	; 0x1f28 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    1f96:	99 23       	and	r25, r25
    1f98:	91 f5       	brne	.+100    	; 0x1ffe <__vector_25+0x110>
			case 0:								// red led
				if(receivedByte == '-') {
    1f9a:	8d 32       	cpi	r24, 0x2D	; 45
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <__vector_25+0xb2>
    1f9e:	d5 c0       	rjmp	.+426    	; 0x214a <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    1fa0:	8b 32       	cpi	r24, 0x2B	; 43
    1fa2:	e9 f6       	brne	.-70     	; 0x1f5e <__vector_25+0x70>
					current_pwm = pwm_red-10;
    1fa4:	80 91 0c 02 	lds	r24, 0x020C
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    1fac:	97 fd       	sbrc	r25, 7
    1fae:	3f c1       	rjmp	.+638    	; 0x222e <__stack+0x2f>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    1fb0:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <__vector_25+0xcc>
    1fb8:	3c c1       	rjmp	.+632    	; 0x2232 <__stack+0x33>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	90 93 89 00 	sts	0x0089, r25
    1fc0:	80 93 88 00 	sts	0x0088, r24
    1fc4:	b1 cf       	rjmp	.-158    	; 0x1f28 <__vector_25+0x3a>
			case '1': 							// green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': 							// blue led
				peripheralChoice = 2;
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    1fcc:	10 92 10 02 	sts	0x0210, r1
				break;
    1fd0:	ab cf       	rjmp	.-170    	; 0x1f28 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
    1fd2:	8d 32       	cpi	r24, 0x2D	; 45
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <__vector_25+0xea>
    1fd6:	e8 c0       	rjmp	.+464    	; 0x21a8 <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    1fd8:	8b 32       	cpi	r24, 0x2B	; 43
    1fda:	09 f6       	brne	.-126    	; 0x1f5e <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    1fdc:	80 91 0e 02 	lds	r24, 0x020E
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    1fe4:	97 fd       	sbrc	r25, 7
    1fe6:	35 c1       	rjmp	.+618    	; 0x2252 <__stack+0x53>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    1fe8:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    1fec:	88 23       	and	r24, r24
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <__vector_25+0x104>
    1ff0:	32 c1       	rjmp	.+612    	; 0x2256 <__stack+0x57>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	90 93 8d 00 	sts	0x008D, r25
    1ff8:	80 93 8c 00 	sts	0x008C, r24
    1ffc:	95 cf       	rjmp	.-214    	; 0x1f28 <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    1ffe:	91 30       	cpi	r25, 0x01	; 1
    2000:	09 f0       	breq	.+2      	; 0x2004 <__vector_25+0x116>
    2002:	92 cf       	rjmp	.-220    	; 0x1f28 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
    2004:	8d 32       	cpi	r24, 0x2D	; 45
    2006:	09 f4       	brne	.+2      	; 0x200a <__vector_25+0x11c>
    2008:	89 c0       	rjmp	.+274    	; 0x211c <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    200a:	8b 32       	cpi	r24, 0x2B	; 43
    200c:	09 f4       	brne	.+2      	; 0x2010 <__vector_25+0x122>
    200e:	3f c0       	rjmp	.+126    	; 0x208e <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2010:	90 93 10 02 	sts	0x0210, r25
    2014:	89 cf       	rjmp	.-238    	; 0x1f28 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
			case '0': 							// red led
				peripheralChoice = 0;
    2016:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    201a:	10 92 10 02 	sts	0x0210, r1
				break;
    201e:	84 cf       	rjmp	.-248    	; 0x1f28 <__vector_25+0x3a>
			case '2': 							// blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': 							// right motor
				peripheralChoice = 3;
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2026:	10 92 10 02 	sts	0x0210, r1
				break;
    202a:	7e cf       	rjmp	.-260    	; 0x1f28 <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2032:	10 92 10 02 	sts	0x0210, r1
				break;
    2036:	78 cf       	rjmp	.-272    	; 0x1f28 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
    2038:	8b 32       	cpi	r24, 0x2B	; 43
    203a:	09 f4       	brne	.+2      	; 0x203e <__vector_25+0x150>
    203c:	cc c0       	rjmp	.+408    	; 0x21d6 <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    203e:	8d 32       	cpi	r24, 0x2D	; 45
    2040:	09 f4       	brne	.+2      	; 0x2044 <__vector_25+0x156>
    2042:	51 c0       	rjmp	.+162    	; 0x20e6 <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2044:	83 37       	cpi	r24, 0x73	; 115
    2046:	09 f0       	breq	.+2      	; 0x204a <__vector_25+0x15c>
    2048:	8a cf       	rjmp	.-236    	; 0x1f5e <__vector_25+0x70>
					pwm_right = 0;
    204a:	10 92 ec 03 	sts	0x03EC, r1
    204e:	10 92 eb 03 	sts	0x03EB, r1
					OCR3A = 0;
    2052:	10 92 99 00 	sts	0x0099, r1
    2056:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    205a:	10 92 9b 00 	sts	0x009B, r1
    205e:	10 92 9a 00 	sts	0x009A, r1
    2062:	62 cf       	rjmp	.-316    	; 0x1f28 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
    2064:	8b 32       	cpi	r24, 0x2B	; 43
    2066:	09 f4       	brne	.+2      	; 0x206a <__vector_25+0x17c>
    2068:	87 c0       	rjmp	.+270    	; 0x2178 <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    206a:	8d 32       	cpi	r24, 0x2D	; 45
    206c:	09 f1       	breq	.+66     	; 0x20b0 <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    206e:	83 37       	cpi	r24, 0x73	; 115
    2070:	09 f0       	breq	.+2      	; 0x2074 <__vector_25+0x186>
    2072:	75 cf       	rjmp	.-278    	; 0x1f5e <__vector_25+0x70>
					pwm_left = 0;
    2074:	10 92 ee 03 	sts	0x03EE, r1
    2078:	10 92 ed 03 	sts	0x03ED, r1
					OCR4A = 0;
    207c:	10 92 a9 00 	sts	0x00A9, r1
    2080:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2084:	10 92 ab 00 	sts	0x00AB, r1
    2088:	10 92 aa 00 	sts	0x00AA, r1
    208c:	4d cf       	rjmp	.-358    	; 0x1f28 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    208e:	80 91 0d 02 	lds	r24, 0x020D
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2096:	97 fd       	sbrc	r25, 7
    2098:	d3 c0       	rjmp	.+422    	; 0x2240 <__stack+0x41>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    209a:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    209e:	88 23       	and	r24, r24
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <__vector_25+0x1b6>
    20a2:	d0 c0       	rjmp	.+416    	; 0x2244 <__stack+0x45>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	90 93 8b 00 	sts	0x008B, r25
    20aa:	80 93 8a 00 	sts	0x008A, r24
    20ae:	3c cf       	rjmp	.-392    	; 0x1f28 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    20b0:	80 91 ed 03 	lds	r24, 0x03ED
    20b4:	90 91 ee 03 	lds	r25, 0x03EE
    20b8:	4e 97       	sbiw	r24, 0x1e	; 30
    20ba:	90 93 ee 03 	sts	0x03EE, r25
    20be:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    20c2:	2c ef       	ldi	r18, 0xFC	; 252
    20c4:	80 30       	cpi	r24, 0x00	; 0
    20c6:	92 07       	cpc	r25, r18
    20c8:	0c f0       	brlt	.+2      	; 0x20cc <__vector_25+0x1de>
    20ca:	cc c0       	rjmp	.+408    	; 0x2264 <__stack+0x65>
						pwm_left = -MAX_MOTORS_PWM;
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	9c ef       	ldi	r25, 0xFC	; 252
    20d0:	90 93 ee 03 	sts	0x03EE, r25
    20d4:	80 93 ed 03 	sts	0x03ED, r24
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    20dc:	90 93 ab 00 	sts	0x00AB, r25
    20e0:	80 93 aa 00 	sts	0x00AA, r24
    20e4:	21 cf       	rjmp	.-446    	; 0x1f28 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    20e6:	80 91 eb 03 	lds	r24, 0x03EB
    20ea:	90 91 ec 03 	lds	r25, 0x03EC
    20ee:	4e 97       	sbiw	r24, 0x1e	; 30
    20f0:	90 93 ec 03 	sts	0x03EC, r25
    20f4:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    20f8:	2c ef       	ldi	r18, 0xFC	; 252
    20fa:	80 30       	cpi	r24, 0x00	; 0
    20fc:	92 07       	cpc	r25, r18
    20fe:	0c f0       	brlt	.+2      	; 0x2102 <__vector_25+0x214>
    2100:	b7 c0       	rjmp	.+366    	; 0x2270 <__stack+0x71>
						pwm_right = -MAX_MOTORS_PWM;
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	9c ef       	ldi	r25, 0xFC	; 252
    2106:	90 93 ec 03 	sts	0x03EC, r25
    210a:	80 93 eb 03 	sts	0x03EB, r24
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2112:	90 93 9b 00 	sts	0x009B, r25
    2116:	80 93 9a 00 	sts	0x009A, r24
    211a:	06 cf       	rjmp	.-500    	; 0x1f28 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    211c:	80 91 80 00 	lds	r24, 0x0080
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2126:	80 91 0d 02 	lds	r24, 0x020D
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    212e:	8f 3f       	cpi	r24, 0xFF	; 255
    2130:	91 05       	cpc	r25, r1
    2132:	19 f0       	breq	.+6      	; 0x213a <__vector_25+0x24c>
    2134:	14 f0       	brlt	.+4      	; 0x213a <__vector_25+0x24c>
    2136:	8f ef       	ldi	r24, 0xFF	; 255
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	90 93 8b 00 	sts	0x008B, r25
    2144:	80 93 8a 00 	sts	0x008A, r24
    2148:	ef ce       	rjmp	.-546    	; 0x1f28 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:								// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    214a:	80 91 80 00 	lds	r24, 0x0080
    214e:	80 68       	ori	r24, 0x80	; 128
    2150:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2154:	80 91 0c 02 	lds	r24, 0x020C
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    215c:	8f 3f       	cpi	r24, 0xFF	; 255
    215e:	91 05       	cpc	r25, r1
    2160:	19 f0       	breq	.+6      	; 0x2168 <__vector_25+0x27a>
    2162:	14 f0       	brlt	.+4      	; 0x2168 <__vector_25+0x27a>
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	90 93 89 00 	sts	0x0089, r25
    2172:	80 93 88 00 	sts	0x0088, r24
    2176:	d8 ce       	rjmp	.-592    	; 0x1f28 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2178:	80 91 ed 03 	lds	r24, 0x03ED
    217c:	90 91 ee 03 	lds	r25, 0x03EE
    2180:	4e 96       	adiw	r24, 0x1e	; 30
    2182:	90 93 ee 03 	sts	0x03EE, r25
    2186:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    218a:	24 e0       	ldi	r18, 0x04	; 4
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	92 07       	cpc	r25, r18
    2190:	d4 f1       	brlt	.+116    	; 0x2206 <__stack+0x7>
						pwm_left = MAX_MOTORS_PWM;
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	94 e0       	ldi	r25, 0x04	; 4
    2196:	90 93 ee 03 	sts	0x03EE, r25
    219a:	80 93 ed 03 	sts	0x03ED, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    219e:	90 93 a9 00 	sts	0x00A9, r25
    21a2:	80 93 a8 00 	sts	0x00A8, r24
    21a6:	c0 ce       	rjmp	.-640    	; 0x1f28 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    21a8:	80 91 80 00 	lds	r24, 0x0080
    21ac:	88 60       	ori	r24, 0x08	; 8
    21ae:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    21b2:	80 91 0e 02 	lds	r24, 0x020E
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    21ba:	8f 3f       	cpi	r24, 0xFF	; 255
    21bc:	91 05       	cpc	r25, r1
    21be:	19 f0       	breq	.+6      	; 0x21c6 <__vector_25+0x2d8>
    21c0:	14 f0       	brlt	.+4      	; 0x21c6 <__vector_25+0x2d8>
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	90 93 8d 00 	sts	0x008D, r25
    21d0:	80 93 8c 00 	sts	0x008C, r24
    21d4:	a9 ce       	rjmp	.-686    	; 0x1f28 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    21d6:	80 91 eb 03 	lds	r24, 0x03EB
    21da:	90 91 ec 03 	lds	r25, 0x03EC
    21de:	4e 96       	adiw	r24, 0x1e	; 30
    21e0:	90 93 ec 03 	sts	0x03EC, r25
    21e4:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    21e8:	24 e0       	ldi	r18, 0x04	; 4
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	92 07       	cpc	r25, r18
    21ee:	ac f0       	brlt	.+42     	; 0x221a <__stack+0x1b>
						pwm_right = MAX_MOTORS_PWM;
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	94 e0       	ldi	r25, 0x04	; 4
    21f4:	90 93 ec 03 	sts	0x03EC, r25
    21f8:	80 93 eb 03 	sts	0x03EB, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    21fc:	90 93 99 00 	sts	0x0099, r25
    2200:	80 93 98 00 	sts	0x0098, r24
    2204:	91 ce       	rjmp	.-734    	; 0x1f28 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2206:	97 ff       	sbrs	r25, 7
    2208:	ca cf       	rjmp	.-108    	; 0x219e <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    220a:	90 95       	com	r25
    220c:	81 95       	neg	r24
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	90 93 ab 00 	sts	0x00AB, r25
    2214:	80 93 aa 00 	sts	0x00AA, r24
    2218:	87 ce       	rjmp	.-754    	; 0x1f28 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    221a:	97 ff       	sbrs	r25, 7
    221c:	ef cf       	rjmp	.-34     	; 0x21fc <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    221e:	90 95       	com	r25
    2220:	81 95       	neg	r24
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	90 93 9b 00 	sts	0x009B, r25
    2228:	80 93 9a 00 	sts	0x009A, r24
    222c:	7d ce       	rjmp	.-774    	; 0x1f28 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    222e:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2232:	80 91 80 00 	lds	r24, 0x0080
    2236:	8f 77       	andi	r24, 0x7F	; 127
    2238:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    223c:	2d 98       	cbi	0x05, 5	; 5
    223e:	74 ce       	rjmp	.-792    	; 0x1f28 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2240:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2244:	80 91 80 00 	lds	r24, 0x0080
    2248:	8f 7d       	andi	r24, 0xDF	; 223
    224a:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    224e:	2e 98       	cbi	0x05, 6	; 5
    2250:	6b ce       	rjmp	.-810    	; 0x1f28 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2252:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2256:	80 91 80 00 	lds	r24, 0x0080
    225a:	87 7f       	andi	r24, 0xF7	; 247
    225c:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    2260:	2f 98       	cbi	0x05, 7	; 5
    2262:	62 ce       	rjmp	.-828    	; 0x1f28 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2264:	97 ff       	sbrs	r25, 7
    2266:	9b cf       	rjmp	.-202    	; 0x219e <__vector_25+0x2b0>
						OCR4A = pwm_left;
    2268:	90 95       	com	r25
    226a:	81 95       	neg	r24
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	36 cf       	rjmp	.-404    	; 0x20dc <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2270:	97 ff       	sbrs	r25, 7
    2272:	c4 cf       	rjmp	.-120    	; 0x21fc <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    2274:	90 95       	com	r25
    2276:	81 95       	neg	r24
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	4b cf       	rjmp	.-362    	; 0x2112 <__vector_25+0x224>

0000227c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    227c:	86 b1       	in	r24, 0x06	; 6
    227e:	66 b1       	in	r22, 0x06	; 6
    2280:	26 b1       	in	r18, 0x06	; 6
    2282:	46 b1       	in	r20, 0x06	; 6
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	28 70       	andi	r18, 0x08	; 8
    2288:	30 70       	andi	r19, 0x00	; 0
    228a:	35 95       	asr	r19
    228c:	27 95       	ror	r18
    228e:	35 95       	asr	r19
    2290:	27 95       	ror	r18
    2292:	35 95       	asr	r19
    2294:	27 95       	ror	r18
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	64 70       	andi	r22, 0x04	; 4
    229e:	70 70       	andi	r23, 0x00	; 0
    22a0:	75 95       	asr	r23
    22a2:	67 95       	ror	r22
    22a4:	75 95       	asr	r23
    22a6:	67 95       	ror	r22
    22a8:	26 0f       	add	r18, r22
    22aa:	37 1f       	adc	r19, r23
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	42 70       	andi	r20, 0x02	; 2
    22b4:	50 70       	andi	r21, 0x00	; 0
    22b6:	55 95       	asr	r21
    22b8:	47 95       	ror	r20
    22ba:	24 0f       	add	r18, r20
    22bc:	35 1f       	adc	r19, r21
    22be:	22 0f       	add	r18, r18
    22c0:	81 70       	andi	r24, 0x01	; 1
}
    22c2:	82 0f       	add	r24, r18
    22c4:	08 95       	ret

000022c6 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    22c6:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    22c8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    22ca:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    22cc:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    22d0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    22d4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    22d8:	8e ef       	ldi	r24, 0xFE	; 254
    22da:	9f e0       	ldi	r25, 0x0F	; 15
    22dc:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__eerd_word_m2560>
    22e0:	90 93 04 04 	sts	0x0404, r25
    22e4:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    22e8:	9c 01       	movw	r18, r24
    22ea:	21 58       	subi	r18, 0x81	; 129
    22ec:	3c 40       	sbci	r19, 0x0C	; 12
    22ee:	23 30       	cpi	r18, 0x03	; 3
    22f0:	31 05       	cpc	r19, r1
    22f2:	b0 f4       	brcc	.+44     	; 0x2320 <initPeripherals+0x5a>
		hardwareRevision = HW_REV_3_0;
    22f4:	10 92 28 04 	sts	0x0428, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    22f8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <initPortsIO>
	initAdc();
    22fc:	0e 94 5d 12 	call	0x24ba	; 0x24ba <initAdc>
	initMotors();
    2300:	0e 94 32 15 	call	0x2a64	; 0x2a64 <initMotors>
	initRGBleds();
    2304:	0e 94 de 1a 	call	0x35bc	; 0x35bc <initRGBleds>
	initSPI();
    2308:	0e 94 17 01 	call	0x22e	; 0x22e <initSPI>
	mirf_init();
    230c:	0e 94 cf 01 	call	0x39e	; 0x39e <mirf_init>
	initUsart();
    2310:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <initUsart>
	initAccelerometer();
    2314:	0e 94 57 1b 	call	0x36ae	; 0x36ae <initAccelerometer>
	init_ir_remote_control();
    2318:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <init_ir_remote_control>

	sei();			// enable global interrupts
    231c:	78 94       	sei

	
}
    231e:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2320:	2c e0       	ldi	r18, 0x0C	; 12
    2322:	80 38       	cpi	r24, 0x80	; 128
    2324:	92 07       	cpc	r25, r18
    2326:	21 f4       	brne	.+8      	; 0x2330 <initPeripherals+0x6a>
		hardwareRevision = HW_REV_3_0_1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	80 93 28 04 	sts	0x0428, r24
    232e:	e4 cf       	rjmp	.-56     	; 0x22f8 <initPeripherals+0x32>
	}

	if(rfAddress > 3203) {
    2330:	2c e0       	ldi	r18, 0x0C	; 12
    2332:	84 38       	cpi	r24, 0x84	; 132
    2334:	92 07       	cpc	r25, r18
    2336:	00 f3       	brcs	.-64     	; 0x22f8 <initPeripherals+0x32>
		hardwareRevision = HW_REV_3_1;
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	80 93 28 04 	sts	0x0428, r24
    233e:	dc cf       	rjmp	.-72     	; 0x22f8 <initPeripherals+0x32>

00002340 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2340:	1f 92       	push	r1
    2342:	0f 92       	push	r0
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1

}
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	0f 90       	pop	r0
    2350:	1f 90       	pop	r1
    2352:	18 95       	reti

00002354 <sleep>:

void sleep(unsigned char seconds) {
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2358:	9e e1       	ldi	r25, 0x1E	; 30
    235a:	89 9f       	mul	r24, r25
    235c:	e0 01       	movw	r28, r0
    235e:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2360:	80 91 68 00 	lds	r24, 0x0068
    2364:	8d 7f       	andi	r24, 0xFD	; 253
    2366:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    236a:	80 91 6c 00 	lds	r24, 0x006C
    236e:	8f 77       	andi	r24, 0x7F	; 127
    2370:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2374:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2376:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    237a:	80 91 7a 00 	lds	r24, 0x007A
    237e:	80 61       	ori	r24, 0x10	; 16
    2380:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2384:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2388:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    238c:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2390:	88 b3       	in	r24, 0x18	; 24
    2392:	87 60       	ori	r24, 0x07	; 7
    2394:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2396:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    239a:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    239e:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    23a2:	89 b3       	in	r24, 0x19	; 25
    23a4:	87 60       	ori	r24, 0x07	; 7
    23a6:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    23a8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    23ac:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    23b0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <closeUsart>
	closeSPI();
    23b4:	0e 94 23 01 	call	0x246	; 0x246 <closeSPI>
	i2c_close();
    23b8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <i2c_close>

	// set port pins
	initPortsIO();
    23bc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    23c0:	83 b7       	in	r24, 0x33	; 51
    23c2:	8f 60       	ori	r24, 0x0F	; 15
    23c4:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    23cc:	80 91 b0 00 	lds	r24, 0x00B0
    23d0:	8d 7f       	andi	r24, 0xFD	; 253
    23d2:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    23d6:	80 91 b1 00 	lds	r24, 0x00B1
    23da:	87 60       	ori	r24, 0x07	; 7
    23dc:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    23e0:	20 97       	sbiw	r28, 0x00	; 0
    23e2:	19 f0       	breq	.+6      	; 0x23ea <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    23e4:	88 95       	sleep
		pause--;
    23e6:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    23ea:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    23ec:	80 91 b1 00 	lds	r24, 0x00B1
    23f0:	88 7f       	andi	r24, 0xF8	; 248
    23f2:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    23f6:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    23fa:	80 91 b0 00 	lds	r24, 0x00B0
    23fe:	82 60       	ori	r24, 0x02	; 2
    2400:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2404:	8f ef       	ldi	r24, 0xFF	; 255
    2406:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    240a:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    240e:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2412:	10 92 ec 03 	sts	0x03EC, r1
    2416:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    241a:	10 92 ee 03 	sts	0x03EE, r1
    241e:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2422:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2424:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2426:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2428:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    242c:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2430:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2434:	8e ef       	ldi	r24, 0xFE	; 254
    2436:	9f e0       	ldi	r25, 0x0F	; 15
    2438:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__eerd_word_m2560>
    243c:	90 93 04 04 	sts	0x0404, r25
    2440:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2444:	9c 01       	movw	r18, r24
    2446:	21 58       	subi	r18, 0x81	; 129
    2448:	3c 40       	sbci	r19, 0x0C	; 12
    244a:	23 30       	cpi	r18, 0x03	; 3
    244c:	31 05       	cpc	r19, r1
    244e:	c0 f4       	brcc	.+48     	; 0x2480 <sleep+0x12c>
		hardwareRevision = HW_REV_3_0;
    2450:	10 92 28 04 	sts	0x0428, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2454:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <initPortsIO>
	initAdc();
    2458:	0e 94 5d 12 	call	0x24ba	; 0x24ba <initAdc>
	initMotors();
    245c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <initMotors>
	initRGBleds();
    2460:	0e 94 de 1a 	call	0x35bc	; 0x35bc <initRGBleds>
	initSPI();
    2464:	0e 94 17 01 	call	0x22e	; 0x22e <initSPI>
	mirf_init();
    2468:	0e 94 cf 01 	call	0x39e	; 0x39e <mirf_init>
	initUsart();
    246c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <initUsart>
	initAccelerometer();
    2470:	0e 94 57 1b 	call	0x36ae	; 0x36ae <initAccelerometer>
	init_ir_remote_control();
    2474:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <init_ir_remote_control>

	sei();			// enable global interrupts
    2478:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2480:	2c e0       	ldi	r18, 0x0C	; 12
    2482:	80 38       	cpi	r24, 0x80	; 128
    2484:	92 07       	cpc	r25, r18
    2486:	21 f4       	brne	.+8      	; 0x2490 <sleep+0x13c>
		hardwareRevision = HW_REV_3_0_1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	80 93 28 04 	sts	0x0428, r24
    248e:	e2 cf       	rjmp	.-60     	; 0x2454 <sleep+0x100>
	}

	if(rfAddress > 3203) {
    2490:	2c e0       	ldi	r18, 0x0C	; 12
    2492:	84 38       	cpi	r24, 0x84	; 132
    2494:	92 07       	cpc	r25, r18
    2496:	f0 f2       	brcs	.-68     	; 0x2454 <sleep+0x100>
		hardwareRevision = HW_REV_3_1;
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	80 93 28 04 	sts	0x0428, r24
    249e:	da cf       	rjmp	.-76     	; 0x2454 <sleep+0x100>

000024a0 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    24a0:	60 91 21 04 	lds	r22, 0x0421
    24a4:	70 91 22 04 	lds	r23, 0x0422
	return clockTick;
}
    24a8:	80 91 23 04 	lds	r24, 0x0423
    24ac:	90 91 24 04 	lds	r25, 0x0424
    24b0:	08 95       	ret

000024b2 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	80 93 c5 03 	sts	0x03C5, r24
}
    24b8:	08 95       	ret

000024ba <initAdc>:

#include "adc.h"


void initAdc(void) {
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    24be:	ea e7       	ldi	r30, 0x7A	; 122
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	10 82       	st	Z, r1
	ADCSRB = 0;
    24c4:	ab e7       	ldi	r26, 0x7B	; 123
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	1c 92       	st	X, r1
	ADMUX = 0;
    24ca:	cc e7       	ldi	r28, 0x7C	; 124
    24cc:	d0 e0       	ldi	r29, 0x00	; 0
    24ce:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    24d0:	80 81       	ld	r24, Z
    24d2:	86 60       	ori	r24, 0x06	; 6
    24d4:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    24d6:	88 81       	ld	r24, Y
    24d8:	80 64       	ori	r24, 0x40	; 64
    24da:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    24dc:	80 81       	ld	r24, Z
    24de:	80 62       	ori	r24, 0x20	; 32
    24e0:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    24e2:	8c 91       	ld	r24, X
    24e4:	88 7f       	andi	r24, 0xF8	; 248
    24e6:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    24e8:	80 81       	ld	r24, Z
    24ea:	88 60       	ori	r24, 0x08	; 8
    24ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    24ee:	80 81       	ld	r24, Z
    24f0:	80 68       	ori	r24, 0x80	; 128
    24f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    24f4:	80 81       	ld	r24, Z
    24f6:	80 64       	ori	r24, 0x40	; 64
    24f8:	80 83       	st	Z, r24

}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	08 95       	ret

00002500 <__vector_29>:

ISR(ADC_vect) {
    2500:	1f 92       	push	r1
    2502:	0f 92       	push	r0
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	0f 92       	push	r0
    2508:	0b b6       	in	r0, 0x3b	; 59
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	2f 93       	push	r18
    2510:	3f 93       	push	r19
    2512:	4f 93       	push	r20
    2514:	5f 93       	push	r21
    2516:	6f 93       	push	r22
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	af 93       	push	r26
    251e:	bf 93       	push	r27
    2520:	ef 93       	push	r30
    2522:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    2524:	80 91 21 04 	lds	r24, 0x0421
    2528:	90 91 22 04 	lds	r25, 0x0422
    252c:	a0 91 23 04 	lds	r26, 0x0423
    2530:	b0 91 24 04 	lds	r27, 0x0424
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	a1 1d       	adc	r26, r1
    2538:	b1 1d       	adc	r27, r1
    253a:	80 93 21 04 	sts	0x0421, r24
    253e:	90 93 22 04 	sts	0x0422, r25
    2542:	a0 93 23 04 	sts	0x0423, r26
    2546:	b0 93 24 04 	sts	0x0424, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    254a:	20 91 78 00 	lds	r18, 0x0078
    254e:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2550:	40 91 79 00 	lds	r20, 0x0079
    2554:	94 2f       	mov	r25, r20
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	28 2b       	or	r18, r24
    255a:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    255c:	80 91 bf 03 	lds	r24, 0x03BF
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	09 f4       	brne	.+2      	; 0x2566 <__vector_29+0x66>
    2564:	ac c1       	rjmp	.+856    	; 0x28be <__vector_29+0x3be>
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	08 f4       	brcc	.+2      	; 0x256c <__vector_29+0x6c>
    256a:	45 c0       	rjmp	.+138    	; 0x25f6 <__vector_29+0xf6>
    256c:	83 30       	cpi	r24, 0x03	; 3
    256e:	09 f4       	brne	.+2      	; 0x2572 <__vector_29+0x72>
    2570:	c9 c1       	rjmp	.+914    	; 0x2904 <__vector_29+0x404>
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	09 f4       	brne	.+2      	; 0x2578 <__vector_29+0x78>
    2576:	68 c1       	rjmp	.+720    	; 0x2848 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2578:	80 91 c0 03 	lds	r24, 0x03C0
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	09 f4       	brne	.+2      	; 0x2582 <__vector_29+0x82>
    2580:	4f c1       	rjmp	.+670    	; 0x2820 <__vector_29+0x320>
    2582:	83 30       	cpi	r24, 0x03	; 3
    2584:	08 f0       	brcs	.+2      	; 0x2588 <__vector_29+0x88>
    2586:	cd c0       	rjmp	.+410    	; 0x2722 <__vector_29+0x222>
    2588:	88 23       	and	r24, r24
    258a:	09 f0       	breq	.+2      	; 0x258e <__vector_29+0x8e>
    258c:	24 c1       	rjmp	.+584    	; 0x27d6 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    258e:	80 91 2a 03 	lds	r24, 0x032A
    2592:	86 95       	lsr	r24
    2594:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2598:	80 91 c1 03 	lds	r24, 0x03C1
    259c:	88 23       	and	r24, r24
    259e:	09 f0       	breq	.+2      	; 0x25a2 <__vector_29+0xa2>
    25a0:	e1 c1       	rjmp	.+962    	; 0x2964 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    25ae:	90 91 29 03 	lds	r25, 0x0329
    25b2:	98 30       	cpi	r25, 0x08	; 8
    25b4:	08 f0       	brcs	.+2      	; 0x25b8 <__vector_29+0xb8>
    25b6:	ed c0       	rjmp	.+474    	; 0x2792 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    25b8:	90 91 7b 00 	lds	r25, 0x007B
    25bc:	97 7f       	andi	r25, 0xF7	; 247
    25be:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    25c2:	90 91 29 03 	lds	r25, 0x0329
    25c6:	90 5c       	subi	r25, 0xC0	; 192
    25c8:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    25cc:	82 30       	cpi	r24, 0x02	; 2
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <__vector_29+0xd2>
    25d0:	ed c0       	rjmp	.+474    	; 0x27ac <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    25d2:	ff 91       	pop	r31
    25d4:	ef 91       	pop	r30
    25d6:	bf 91       	pop	r27
    25d8:	af 91       	pop	r26
    25da:	9f 91       	pop	r25
    25dc:	8f 91       	pop	r24
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0b be       	out	0x3b, r0	; 59
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    25f6:	88 23       	and	r24, r24
    25f8:	09 f0       	breq	.+2      	; 0x25fc <__vector_29+0xfc>
    25fa:	fe c0       	rjmp	.+508    	; 0x27f8 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    25fc:	60 91 2a 03 	lds	r22, 0x032A
    2600:	6e 30       	cpi	r22, 0x0E	; 14
    2602:	09 f4       	brne	.+2      	; 0x2606 <__vector_29+0x106>
    2604:	d0 c1       	rjmp	.+928    	; 0x29a6 <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2606:	46 2f       	mov	r20, r22
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	fa 01       	movw	r30, r20
    260c:	ee 0f       	add	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	e1 5d       	subi	r30, 0xD1	; 209
    2612:	fc 4f       	sbci	r31, 0xFC	; 252
    2614:	31 83       	std	Z+1, r19	; 0x01
    2616:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2618:	40 ff       	sbrs	r20, 0
    261a:	77 c0       	rjmp	.+238    	; 0x270a <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    261c:	fa 01       	movw	r30, r20
    261e:	ee 0f       	add	r30, r30
    2620:	ff 1f       	adc	r31, r31
    2622:	e3 5d       	subi	r30, 0xD3	; 211
    2624:	fc 4f       	sbci	r31, 0xFC	; 252
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	fa 01       	movw	r30, r20
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	e1 5d       	subi	r30, 0xD1	; 209
    2632:	fc 4f       	sbci	r31, 0xFC	; 252
    2634:	40 81       	ld	r20, Z
    2636:	51 81       	ldd	r21, Z+1	; 0x01
    2638:	26 2f       	mov	r18, r22
    263a:	26 95       	lsr	r18
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	84 1b       	sub	r24, r20
    2640:	95 0b       	sbc	r25, r21
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	f9 01       	movw	r30, r18
    2648:	e9 58       	subi	r30, 0x89	; 137
    264a:	fc 4f       	sbci	r31, 0xFC	; 252
    264c:	40 81       	ld	r20, Z
    264e:	51 81       	ldd	r21, Z+1	; 0x01
    2650:	84 1b       	sub	r24, r20
    2652:	95 0b       	sbc	r25, r21
    2654:	f9 01       	movw	r30, r18
    2656:	e1 5a       	subi	r30, 0xA1	; 161
    2658:	fc 4f       	sbci	r31, 0xFC	; 252
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    265e:	97 fd       	sbrc	r25, 7
    2660:	bd c1       	rjmp	.+890    	; 0x29dc <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2662:	44 e0       	ldi	r20, 0x04	; 4
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	94 07       	cpc	r25, r20
    2668:	24 f0       	brlt	.+8      	; 0x2672 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	94 e0       	ldi	r25, 0x04	; 4
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2672:	60 31       	cpi	r22, 0x10	; 16
    2674:	48 f4       	brcc	.+18     	; 0x2688 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2676:	8c 33       	cpi	r24, 0x3C	; 60
    2678:	91 05       	cpc	r25, r1
    267a:	0c f0       	brlt	.+2      	; 0x267e <__vector_29+0x17e>
    267c:	b4 c1       	rjmp	.+872    	; 0x29e6 <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    267e:	29 53       	subi	r18, 0x39	; 57
    2680:	3c 4f       	sbci	r19, 0xFC	; 252
    2682:	f9 01       	movw	r30, r18
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2688:	80 91 2a 04 	lds	r24, 0x042A
    268c:	88 23       	and	r24, r24
    268e:	09 f4       	brne	.+2      	; 0x2692 <__vector_29+0x192>
    2690:	75 c1       	rjmp	.+746    	; 0x297c <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2692:	80 91 6f 03 	lds	r24, 0x036F
    2696:	90 91 70 03 	lds	r25, 0x0370
    269a:	f1 e0       	ldi	r31, 0x01	; 1
    269c:	84 3a       	cpi	r24, 0xA4	; 164
    269e:	9f 07       	cpc	r25, r31
    26a0:	cc f0       	brlt	.+50     	; 0x26d4 <__vector_29+0x1d4>
    26a2:	80 91 71 03 	lds	r24, 0x0371
    26a6:	90 91 72 03 	lds	r25, 0x0372
    26aa:	21 e0       	ldi	r18, 0x01	; 1
    26ac:	84 3a       	cpi	r24, 0xA4	; 164
    26ae:	92 07       	cpc	r25, r18
    26b0:	8c f0       	brlt	.+34     	; 0x26d4 <__vector_29+0x1d4>
    26b2:	80 91 73 03 	lds	r24, 0x0373
    26b6:	90 91 74 03 	lds	r25, 0x0374
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	84 3a       	cpi	r24, 0xA4	; 164
    26be:	94 07       	cpc	r25, r20
    26c0:	4c f0       	brlt	.+18     	; 0x26d4 <__vector_29+0x1d4>
    26c2:	80 91 75 03 	lds	r24, 0x0375
    26c6:	90 91 76 03 	lds	r25, 0x0376
    26ca:	e1 e0       	ldi	r30, 0x01	; 1
    26cc:	84 3a       	cpi	r24, 0xA4	; 164
    26ce:	9e 07       	cpc	r25, r30
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <__vector_29+0x1d4>
    26d2:	54 c1       	rjmp	.+680    	; 0x297c <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	80 93 2b 04 	sts	0x042B, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    26da:	10 92 ee 03 	sts	0x03EE, r1
    26de:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    26e2:	10 92 a9 00 	sts	0x00A9, r1
    26e6:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    26ea:	10 92 ab 00 	sts	0x00AB, r1
    26ee:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    26f2:	10 92 ec 03 	sts	0x03EC, r1
    26f6:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    26fa:	10 92 99 00 	sts	0x0099, r1
    26fe:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2702:	10 92 9b 00 	sts	0x009B, r1
    2706:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    270a:	6f 5f       	subi	r22, 0xFF	; 255
    270c:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2710:	68 31       	cpi	r22, 0x18	; 24
    2712:	08 f4       	brcc	.+2      	; 0x2716 <__vector_29+0x216>
    2714:	31 cf       	rjmp	.-414    	; 0x2578 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2716:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 93 c6 03 	sts	0x03C6, r24
    2720:	2b cf       	rjmp	.-426    	; 0x2578 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	09 f4       	brne	.+2      	; 0x2728 <__vector_29+0x228>
    2726:	b7 c0       	rjmp	.+366    	; 0x2896 <__vector_29+0x396>
    2728:	84 30       	cpi	r24, 0x04	; 4
    272a:	09 f0       	breq	.+2      	; 0x272e <__vector_29+0x22e>
    272c:	40 cf       	rjmp	.-384    	; 0x25ae <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    272e:	90 91 2c 03 	lds	r25, 0x032C
    2732:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    2736:	90 91 2d 03 	lds	r25, 0x032D
    273a:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    273e:	90 91 c2 03 	lds	r25, 0x03C2
    2742:	99 23       	and	r25, r25
    2744:	09 f0       	breq	.+2      	; 0x2748 <__vector_29+0x248>
    2746:	08 c1       	rjmp	.+528    	; 0x2958 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    274e:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    2752:	60 91 2a 03 	lds	r22, 0x032A
    2756:	6e 30       	cpi	r22, 0x0E	; 14
    2758:	09 f4       	brne	.+2      	; 0x275c <__vector_29+0x25c>
    275a:	1f c1       	rjmp	.+574    	; 0x299a <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    275c:	86 2f       	mov	r24, r22
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	60 ff       	sbrs	r22, 0
    2762:	f1 c0       	rjmp	.+482    	; 0x2946 <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2764:	60 31       	cpi	r22, 0x10	; 16
    2766:	08 f4       	brcc	.+2      	; 0x276a <__vector_29+0x26a>
    2768:	0c c1       	rjmp	.+536    	; 0x2982 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    276a:	20 91 28 04 	lds	r18, 0x0428
    276e:	22 23       	and	r18, r18
    2770:	09 f0       	breq	.+2      	; 0x2774 <__vector_29+0x274>
    2772:	d5 c0       	rjmp	.+426    	; 0x291e <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2774:	40 97       	sbiw	r24, 0x10	; 16
    2776:	95 95       	asr	r25
    2778:	87 95       	ror	r24
    277a:	21 e0       	ldi	r18, 0x01	; 1
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <__vector_29+0x284>
    2780:	22 0f       	add	r18, r18
    2782:	33 1f       	adc	r19, r19
    2784:	8a 95       	dec	r24
    2786:	e2 f7       	brpl	.-8      	; 0x2780 <__vector_29+0x280>
    2788:	20 93 05 01 	sts	0x0105, r18
    278c:	80 91 c0 03 	lds	r24, 0x03C0
    2790:	0e cf       	rjmp	.-484    	; 0x25ae <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2792:	90 91 7b 00 	lds	r25, 0x007B
    2796:	98 60       	ori	r25, 0x08	; 8
    2798:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    279c:	90 91 29 03 	lds	r25, 0x0329
    27a0:	98 5c       	subi	r25, 0xC8	; 200
    27a2:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	09 f0       	breq	.+2      	; 0x27ac <__vector_29+0x2ac>
    27aa:	13 cf       	rjmp	.-474    	; 0x25d2 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    27ac:	20 91 28 04 	lds	r18, 0x0428
    27b0:	22 23       	and	r18, r18
    27b2:	51 f0       	breq	.+20     	; 0x27c8 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    27b4:	21 30       	cpi	r18, 0x01	; 1
    27b6:	19 f0       	breq	.+6      	; 0x27be <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	09 f0       	breq	.+2      	; 0x27be <__vector_29+0x2be>
    27bc:	0a cf       	rjmp	.-492    	; 0x25d2 <__vector_29+0xd2>
			PORTJ = 0xFF;
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    27c4:	12 b8       	out	0x02, r1	; 2
    27c6:	05 cf       	rjmp	.-502    	; 0x25d2 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    27c8:	80 91 05 01 	lds	r24, 0x0105
    27cc:	80 7f       	andi	r24, 0xF0	; 240
    27ce:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    27d2:	12 b8       	out	0x02, r1	; 2
    27d4:	fe ce       	rjmp	.-516    	; 0x25d2 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	09 f0       	breq	.+2      	; 0x27dc <__vector_29+0x2dc>
    27da:	e9 ce       	rjmp	.-558    	; 0x25ae <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    27dc:	80 91 2b 03 	lds	r24, 0x032B
    27e0:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    27e4:	80 91 2e 03 	lds	r24, 0x032E
    27e8:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    27ec:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	80 93 c0 03 	sts	0x03C0, r24
			break;
    27f6:	db ce       	rjmp	.-586    	; 0x25ae <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	09 f0       	breq	.+2      	; 0x27fe <__vector_29+0x2fe>
    27fc:	bd ce       	rjmp	.-646    	; 0x2578 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    27fe:	80 91 d9 03 	lds	r24, 0x03D9
    2802:	90 91 da 03 	lds	r25, 0x03DA
    2806:	82 0f       	add	r24, r18
    2808:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    280a:	96 95       	lsr	r25
    280c:	87 95       	ror	r24
    280e:	90 93 da 03 	sts	0x03DA, r25
    2812:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2816:	80 91 c0 03 	lds	r24, 0x03C0
    281a:	82 30       	cpi	r24, 0x02	; 2
    281c:	09 f0       	breq	.+2      	; 0x2820 <__vector_29+0x320>
    281e:	b1 ce       	rjmp	.-670    	; 0x2582 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2820:	80 91 2c 03 	lds	r24, 0x032C
    2824:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    2828:	80 91 2d 03 	lds	r24, 0x032D
    282c:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2830:	80 91 c2 03 	lds	r24, 0x03C2
    2834:	88 23       	and	r24, r24
    2836:	09 f0       	breq	.+2      	; 0x283a <__vector_29+0x33a>
    2838:	9b c0       	rjmp	.+310    	; 0x2970 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2846:	b3 ce       	rjmp	.-666    	; 0x25ae <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2848:	80 91 0a 02 	lds	r24, 0x020A
    284c:	88 23       	and	r24, r24
    284e:	09 f4       	brne	.+2      	; 0x2852 <__vector_29+0x352>
    2850:	93 ce       	rjmp	.-730    	; 0x2578 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2852:	90 91 00 01 	lds	r25, 0x0100
    2856:	93 fd       	sbrc	r25, 3
    2858:	8f ce       	rjmp	.-738    	; 0x2578 <__vector_29+0x78>
    285a:	90 91 00 01 	lds	r25, 0x0100
    285e:	94 fd       	sbrc	r25, 4
    2860:	8b ce       	rjmp	.-746    	; 0x2578 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2862:	48 2f       	mov	r20, r24
    2864:	4f 5f       	subi	r20, 0xFF	; 255
    2866:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    286a:	45 30       	cpi	r20, 0x05	; 5
    286c:	08 f4       	brcc	.+2      	; 0x2870 <__vector_29+0x370>
    286e:	84 ce       	rjmp	.-760    	; 0x2578 <__vector_29+0x78>
					left_vel_sum += value;
    2870:	80 91 e3 03 	lds	r24, 0x03E3
    2874:	90 91 e4 03 	lds	r25, 0x03E4
    2878:	82 0f       	add	r24, r18
    287a:	93 1f       	adc	r25, r19
    287c:	90 93 e4 03 	sts	0x03E4, r25
    2880:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    2884:	48 30       	cpi	r20, 0x08	; 8
    2886:	09 f0       	breq	.+2      	; 0x288a <__vector_29+0x38a>
    2888:	77 ce       	rjmp	.-786    	; 0x2578 <__vector_29+0x78>
						firstSampleLeft = 0;
    288a:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	80 93 07 02 	sts	0x0207, r24
    2894:	71 ce       	rjmp	.-798    	; 0x2578 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2896:	80 91 2b 03 	lds	r24, 0x032B
    289a:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    289e:	80 91 2e 03 	lds	r24, 0x032E
    28a2:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    28a6:	80 91 c1 03 	lds	r24, 0x03C1
    28aa:	88 23       	and	r24, r24
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <__vector_29+0x3b0>
    28ae:	4e c0       	rjmp	.+156    	; 0x294c <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    28b6:	84 e0       	ldi	r24, 0x04	; 4
    28b8:	80 93 c0 03 	sts	0x03C0, r24
			break;
    28bc:	78 ce       	rjmp	.-784    	; 0x25ae <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    28be:	80 91 09 02 	lds	r24, 0x0209
    28c2:	88 23       	and	r24, r24
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <__vector_29+0x3c8>
    28c6:	58 ce       	rjmp	.-848    	; 0x2578 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    28c8:	63 99       	sbic	0x0c, 3	; 12
    28ca:	56 ce       	rjmp	.-852    	; 0x2578 <__vector_29+0x78>
    28cc:	64 99       	sbic	0x0c, 4	; 12
    28ce:	54 ce       	rjmp	.-856    	; 0x2578 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    28d0:	48 2f       	mov	r20, r24
    28d2:	4f 5f       	subi	r20, 0xFF	; 255
    28d4:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    28d8:	45 30       	cpi	r20, 0x05	; 5
    28da:	08 f4       	brcc	.+2      	; 0x28de <__vector_29+0x3de>
    28dc:	4d ce       	rjmp	.-870    	; 0x2578 <__vector_29+0x78>
					right_vel_sum += value;
    28de:	80 91 e5 03 	lds	r24, 0x03E5
    28e2:	90 91 e6 03 	lds	r25, 0x03E6
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	90 93 e6 03 	sts	0x03E6, r25
    28ee:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    28f2:	48 30       	cpi	r20, 0x08	; 8
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <__vector_29+0x3f8>
    28f6:	40 ce       	rjmp	.-896    	; 0x2578 <__vector_29+0x78>
						firstSampleRight = 0;
    28f8:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	80 93 08 02 	sts	0x0208, r24
    2902:	3a ce       	rjmp	.-908    	; 0x2578 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2904:	80 91 d7 03 	lds	r24, 0x03D7
    2908:	90 91 d8 03 	lds	r25, 0x03D8
    290c:	82 0f       	add	r24, r18
    290e:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2910:	96 95       	lsr	r25
    2912:	87 95       	ror	r24
    2914:	90 93 d8 03 	sts	0x03D8, r25
    2918:	80 93 d7 03 	sts	0x03D7, r24
			break;
    291c:	2d ce       	rjmp	.-934    	; 0x2578 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    291e:	21 30       	cpi	r18, 0x01	; 1
    2920:	11 f0       	breq	.+4      	; 0x2926 <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    2922:	22 30       	cpi	r18, 0x02	; 2
    2924:	81 f4       	brne	.+32     	; 0x2946 <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2926:	40 91 05 01 	lds	r20, 0x0105
    292a:	40 97       	sbiw	r24, 0x10	; 16
    292c:	95 95       	asr	r25
    292e:	87 95       	ror	r24
    2930:	21 e0       	ldi	r18, 0x01	; 1
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	02 c0       	rjmp	.+4      	; 0x293a <__vector_29+0x43a>
    2936:	22 0f       	add	r18, r18
    2938:	33 1f       	adc	r19, r19
    293a:	8a 95       	dec	r24
    293c:	e2 f7       	brpl	.-8      	; 0x2936 <__vector_29+0x436>
    293e:	20 95       	com	r18
    2940:	24 23       	and	r18, r20
    2942:	20 93 05 01 	sts	0x0105, r18
    2946:	80 91 c0 03 	lds	r24, 0x03C0
    294a:	31 ce       	rjmp	.-926    	; 0x25ae <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    294c:	81 30       	cpi	r24, 0x01	; 1
    294e:	d1 f1       	breq	.+116    	; 0x29c4 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2950:	85 e0       	ldi	r24, 0x05	; 5
    2952:	80 93 bf 03 	sts	0x03BF, r24
    2956:	af cf       	rjmp	.-162    	; 0x28b6 <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2958:	91 30       	cpi	r25, 0x01	; 1
    295a:	09 f0       	breq	.+2      	; 0x295e <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    295c:	85 e0       	ldi	r24, 0x05	; 5
    295e:	80 93 bf 03 	sts	0x03BF, r24
    2962:	f5 ce       	rjmp	.-534    	; 0x274e <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	b1 f1       	breq	.+108    	; 0x29d4 <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2968:	85 e0       	ldi	r24, 0x05	; 5
    296a:	80 93 bf 03 	sts	0x03BF, r24
    296e:	1c ce       	rjmp	.-968    	; 0x25a8 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2970:	81 30       	cpi	r24, 0x01	; 1
    2972:	61 f1       	breq	.+88     	; 0x29cc <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2974:	85 e0       	ldi	r24, 0x05	; 5
    2976:	80 93 bf 03 	sts	0x03BF, r24
    297a:	62 cf       	rjmp	.-316    	; 0x2840 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    297c:	10 92 2b 04 	sts	0x042B, r1
    2980:	c4 ce       	rjmp	.-632    	; 0x270a <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    2982:	66 95       	lsr	r22
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	02 c0       	rjmp	.+4      	; 0x298e <__vector_29+0x48e>
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	6a 95       	dec	r22
    2990:	e2 f7       	brpl	.-8      	; 0x298a <__vector_29+0x48a>
    2992:	82 b9       	out	0x02, r24	; 2
    2994:	80 91 c0 03 	lds	r24, 0x03C0
    2998:	0a ce       	rjmp	.-1004   	; 0x25ae <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    299a:	80 91 c5 03 	lds	r24, 0x03C5
    299e:	81 30       	cpi	r24, 0x01	; 1
    29a0:	a1 f1       	breq	.+104    	; 0x2a0a <__vector_29+0x50a>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	04 ce       	rjmp	.-1016   	; 0x25ae <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    29a6:	80 91 c5 03 	lds	r24, 0x03C5
    29aa:	82 30       	cpi	r24, 0x02	; 2
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <__vector_29+0x4b0>
    29ae:	2b ce       	rjmp	.-938    	; 0x2606 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    29b0:	30 93 c4 03 	sts	0x03C4, r19
    29b4:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    29b8:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    29bc:	46 98       	cbi	0x08, 6	; 8
    29be:	4e e0       	ldi	r20, 0x0E	; 14
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	2a ce       	rjmp	.-940    	; 0x2618 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	80 93 bf 03 	sts	0x03BF, r24
    29ca:	75 cf       	rjmp	.-278    	; 0x28b6 <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    29cc:	84 e0       	ldi	r24, 0x04	; 4
    29ce:	80 93 bf 03 	sts	0x03BF, r24
    29d2:	36 cf       	rjmp	.-404    	; 0x2840 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	80 93 bf 03 	sts	0x03BF, r24
    29da:	e6 cd       	rjmp	.-1076   	; 0x25a8 <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    29dc:	11 82       	std	Z+1, r1	; 0x01
    29de:	10 82       	st	Z, r1
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	46 ce       	rjmp	.-884    	; 0x2672 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    29e6:	ac 01       	movw	r20, r24
    29e8:	44 5c       	subi	r20, 0xC4	; 196
    29ea:	5f 4f       	sbci	r21, 0xFF	; 255
    29ec:	55 95       	asr	r21
    29ee:	47 95       	ror	r20
    29f0:	48 37       	cpi	r20, 0x78	; 120
    29f2:	51 05       	cpc	r21, r1
    29f4:	7c f4       	brge	.+30     	; 0x2a14 <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    29f6:	29 53       	subi	r18, 0x39	; 57
    29f8:	3c 4f       	sbci	r19, 0xFC	; 252
    29fa:	cc 97       	sbiw	r24, 0x3c	; 60
    29fc:	95 95       	asr	r25
    29fe:	87 95       	ror	r24
    2a00:	cc 96       	adiw	r24, 0x3c	; 60
    2a02:	f9 01       	movw	r30, r18
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	3f ce       	rjmp	.-898    	; 0x2688 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2a10:	46 9a       	sbi	0x08, 6	; 8
    2a12:	a4 ce       	rjmp	.-696    	; 0x275c <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2a14:	ac 01       	movw	r20, r24
    2a16:	44 5d       	subi	r20, 0xD4	; 212
    2a18:	5e 4f       	sbci	r21, 0xFE	; 254
    2a1a:	55 95       	asr	r21
    2a1c:	47 95       	ror	r20
    2a1e:	55 95       	asr	r21
    2a20:	47 95       	ror	r20
    2a22:	44 3b       	cpi	r20, 0xB4	; 180
    2a24:	51 05       	cpc	r21, r1
    2a26:	74 f4       	brge	.+28     	; 0x2a44 <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2a28:	29 53       	subi	r18, 0x39	; 57
    2a2a:	3c 4f       	sbci	r19, 0xFC	; 252
    2a2c:	84 5b       	subi	r24, 0xB4	; 180
    2a2e:	90 40       	sbci	r25, 0x00	; 0
    2a30:	95 95       	asr	r25
    2a32:	87 95       	ror	r24
    2a34:	95 95       	asr	r25
    2a36:	87 95       	ror	r24
    2a38:	88 58       	subi	r24, 0x88	; 136
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	f9 01       	movw	r30, r18
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	22 ce       	rjmp	.-956    	; 0x2688 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2a44:	29 53       	subi	r18, 0x39	; 57
    2a46:	3c 4f       	sbci	r19, 0xFC	; 252
    2a48:	84 5a       	subi	r24, 0xA4	; 164
    2a4a:	91 40       	sbci	r25, 0x01	; 1
    2a4c:	95 95       	asr	r25
    2a4e:	87 95       	ror	r24
    2a50:	95 95       	asr	r25
    2a52:	87 95       	ror	r24
    2a54:	95 95       	asr	r25
    2a56:	87 95       	ror	r24
    2a58:	8c 54       	subi	r24, 0x4C	; 76
    2a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	12 ce       	rjmp	.-988    	; 0x2688 <__vector_29+0x188>

00002a64 <initMotors>:

#include "motors.h"

void initMotors() {
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2a6c:	e0 e9       	ldi	r30, 0x90	; 144
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	10 82       	st	Z, r1
	TCCR3B = 0;
    2a72:	41 e9       	ldi	r20, 0x91	; 145
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	da 01       	movw	r26, r20
    2a78:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2a7a:	21 e7       	ldi	r18, 0x71	; 113
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	e9 01       	movw	r28, r18
    2a80:	18 82       	st	Y, r1
	TCCR4A = 0;
    2a82:	a0 ea       	ldi	r26, 0xA0	; 160
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	1c 92       	st	X, r1
	TCCR4B = 0;
    2a88:	81 ea       	ldi	r24, 0xA1	; 161
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	ec 01       	movw	r28, r24
    2a8e:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2a90:	02 e7       	ldi	r16, 0x72	; 114
    2a92:	10 e0       	ldi	r17, 0x00	; 0
    2a94:	e8 01       	movw	r28, r16
    2a96:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2a98:	60 81       	ld	r22, Z
    2a9a:	63 68       	ori	r22, 0x83	; 131
    2a9c:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2a9e:	60 81       	ld	r22, Z
    2aa0:	63 60       	ori	r22, 0x03	; 3
    2aa2:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2aa4:	ea 01       	movw	r28, r20
    2aa6:	68 81       	ld	r22, Y
    2aa8:	6b 60       	ori	r22, 0x0B	; 11
    2aaa:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2aac:	40 91 eb 03 	lds	r20, 0x03EB
    2ab0:	50 91 ec 03 	lds	r21, 0x03EC
    2ab4:	50 93 99 00 	sts	0x0099, r21
    2ab8:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    2abc:	10 92 9b 00 	sts	0x009B, r1
    2ac0:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2ac4:	e9 01       	movw	r28, r18
    2ac6:	48 81       	ld	r20, Y
    2ac8:	41 60       	ori	r20, 0x01	; 1
    2aca:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2acc:	20 81       	ld	r18, Z
    2ace:	2f 75       	andi	r18, 0x5F	; 95
    2ad0:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2ad2:	2e b1       	in	r18, 0x0e	; 14
    2ad4:	27 7e       	andi	r18, 0xE7	; 231
    2ad6:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2ad8:	2c 91       	ld	r18, X
    2ada:	23 68       	ori	r18, 0x83	; 131
    2adc:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2ade:	fc 01       	movw	r30, r24
    2ae0:	20 81       	ld	r18, Z
    2ae2:	2b 60       	ori	r18, 0x0B	; 11
    2ae4:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2ae6:	80 91 ed 03 	lds	r24, 0x03ED
    2aea:	90 91 ee 03 	lds	r25, 0x03EE
    2aee:	90 93 a9 00 	sts	0x00A9, r25
    2af2:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2af6:	10 92 ab 00 	sts	0x00AB, r1
    2afa:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2afe:	e8 01       	movw	r28, r16
    2b00:	88 81       	ld	r24, Y
    2b02:	81 60       	ori	r24, 0x01	; 1
    2b04:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2b06:	8c 91       	ld	r24, X
    2b08:	8f 75       	andi	r24, 0x5F	; 95
    2b0a:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2b0c:	e2 e0       	ldi	r30, 0x02	; 2
    2b0e:	f1 e0       	ldi	r31, 0x01	; 1
    2b10:	80 81       	ld	r24, Z
    2b12:	87 7e       	andi	r24, 0xE7	; 231
    2b14:	80 83       	st	Z, r24


}
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	08 95       	ret

00002b20 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    2b20:	80 91 07 02 	lds	r24, 0x0207
    2b24:	88 23       	and	r24, r24
    2b26:	91 f0       	breq	.+36     	; 0x2b4c <handleMotorsWithNoController+0x2c>
		last_left_vel = left_vel_sum>>2;
    2b28:	80 91 e3 03 	lds	r24, 0x03E3
    2b2c:	90 91 e4 03 	lds	r25, 0x03E4
    2b30:	96 95       	lsr	r25
    2b32:	87 95       	ror	r24
    2b34:	96 95       	lsr	r25
    2b36:	87 95       	ror	r24
    2b38:	90 93 e8 03 	sts	0x03E8, r25
    2b3c:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2b40:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2b44:	10 92 e4 03 	sts	0x03E4, r1
    2b48:	10 92 e3 03 	sts	0x03E3, r1
	}

	if(compute_right_vel) {
    2b4c:	80 91 08 02 	lds	r24, 0x0208
    2b50:	88 23       	and	r24, r24
    2b52:	91 f0       	breq	.+36     	; 0x2b78 <handleMotorsWithNoController+0x58>
		last_right_vel = right_vel_sum>>2;
    2b54:	80 91 e5 03 	lds	r24, 0x03E5
    2b58:	90 91 e6 03 	lds	r25, 0x03E6
    2b5c:	96 95       	lsr	r25
    2b5e:	87 95       	ror	r24
    2b60:	96 95       	lsr	r25
    2b62:	87 95       	ror	r24
    2b64:	90 93 ea 03 	sts	0x03EA, r25
    2b68:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2b6c:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2b70:	10 92 e6 03 	sts	0x03E6, r1
    2b74:	10 92 e5 03 	sts	0x03E5, r1
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    2b78:	80 91 ef 03 	lds	r24, 0x03EF
    2b7c:	90 91 f0 03 	lds	r25, 0x03F0
    2b80:	90 93 fc 03 	sts	0x03FC, r25
    2b84:	80 93 fb 03 	sts	0x03FB, r24
	pwm_left_working = pwm_left_desired;
    2b88:	20 91 f1 03 	lds	r18, 0x03F1
    2b8c:	30 91 f2 03 	lds	r19, 0x03F2
    2b90:	30 93 fe 03 	sts	0x03FE, r19
    2b94:	20 93 fd 03 	sts	0x03FD, r18
	if(obstacleAvoidanceEnabled) {
    2b98:	40 91 29 04 	lds	r20, 0x0429
    2b9c:	44 23       	and	r20, r20
    2b9e:	71 f5       	brne	.+92     	; 0x2bfc <handleMotorsWithNoController+0xdc>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2ba0:	30 93 e2 03 	sts	0x03E2, r19
    2ba4:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2ba8:	90 93 e0 03 	sts	0x03E0, r25
    2bac:	80 93 df 03 	sts	0x03DF, r24

	pwm_left = pwm_left_working;
    2bb0:	30 93 ee 03 	sts	0x03EE, r19
    2bb4:	20 93 ed 03 	sts	0x03ED, r18
	pwm_right = pwm_right_working;
    2bb8:	90 93 ec 03 	sts	0x03EC, r25
    2bbc:	80 93 eb 03 	sts	0x03EB, r24

	if(pwm_right > 0) {
    2bc0:	18 16       	cp	r1, r24
    2bc2:	19 06       	cpc	r1, r25
    2bc4:	54 f5       	brge	.+84     	; 0x2c1a <handleMotorsWithNoController+0xfa>
		OCR3A = (unsigned int)pwm_right;
    2bc6:	90 93 99 00 	sts	0x0099, r25
    2bca:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    2bce:	80 91 ed 03 	lds	r24, 0x03ED
    2bd2:	90 91 ee 03 	lds	r25, 0x03EE
    2bd6:	18 16       	cp	r1, r24
    2bd8:	19 06       	cpc	r1, r25
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <handleMotorsWithNoController+0xc6>
		OCR4A = (unsigned int)pwm_left;
    2bdc:	90 93 a9 00 	sts	0x00A9, r25
    2be0:	80 93 a8 00 	sts	0x00A8, r24
    2be4:	08 95       	ret
	} else if(pwm_left < 0) {
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	59 f5       	brne	.+86     	; 0x2c40 <handleMotorsWithNoController+0x120>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    2bea:	10 92 a9 00 	sts	0x00A9, r1
    2bee:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2bf2:	10 92 ab 00 	sts	0x00AB, r1
    2bf6:	10 92 aa 00 	sts	0x00AA, r1
    2bfa:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2bfc:	8d ef       	ldi	r24, 0xFD	; 253
    2bfe:	93 e0       	ldi	r25, 0x03	; 3
    2c00:	6b ef       	ldi	r22, 0xFB	; 251
    2c02:	73 e0       	ldi	r23, 0x03	; 3
    2c04:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <obstacleAvoidance>
    2c08:	20 91 fd 03 	lds	r18, 0x03FD
    2c0c:	30 91 fe 03 	lds	r19, 0x03FE
    2c10:	80 91 fb 03 	lds	r24, 0x03FB
    2c14:	90 91 fc 03 	lds	r25, 0x03FC
    2c18:	c3 cf       	rjmp	.-122    	; 0x2ba0 <handleMotorsWithNoController+0x80>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	49 f4       	brne	.+18     	; 0x2c30 <handleMotorsWithNoController+0x110>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    2c1e:	10 92 99 00 	sts	0x0099, r1
    2c22:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2c26:	10 92 9b 00 	sts	0x009B, r1
    2c2a:	10 92 9a 00 	sts	0x009A, r1
    2c2e:	cf cf       	rjmp	.-98     	; 0x2bce <handleMotorsWithNoController+0xae>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    2c30:	90 95       	com	r25
    2c32:	81 95       	neg	r24
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	90 93 9b 00 	sts	0x009B, r25
    2c3a:	80 93 9a 00 	sts	0x009A, r24
    2c3e:	c7 cf       	rjmp	.-114    	; 0x2bce <handleMotorsWithNoController+0xae>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    2c40:	90 95       	com	r25
    2c42:	81 95       	neg	r24
    2c44:	9f 4f       	sbci	r25, 0xFF	; 255
    2c46:	90 93 ab 00 	sts	0x00AB, r25
    2c4a:	80 93 aa 00 	sts	0x00AA, r24
    2c4e:	08 95       	ret

00002c50 <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    2c50:	20 91 f1 03 	lds	r18, 0x03F1
    2c54:	30 91 f2 03 	lds	r19, 0x03F2
    2c58:	30 93 fe 03 	sts	0x03FE, r19
    2c5c:	20 93 fd 03 	sts	0x03FD, r18
	pwm_right_working = pwm_right_desired;
    2c60:	80 91 ef 03 	lds	r24, 0x03EF
    2c64:	90 91 f0 03 	lds	r25, 0x03F0
    2c68:	90 93 fc 03 	sts	0x03FC, r25
    2c6c:	80 93 fb 03 	sts	0x03FB, r24
	if(obstacleAvoidanceEnabled) {
    2c70:	40 91 29 04 	lds	r20, 0x0429
    2c74:	44 23       	and	r20, r20
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <handleMotorsWithSpeedController+0x2a>
    2c78:	70 c0       	rjmp	.+224    	; 0x2d5a <handleMotorsWithSpeedController+0x10a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2c7a:	30 93 e2 03 	sts	0x03E2, r19
    2c7e:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2c82:	90 93 e0 03 	sts	0x03E0, r25
    2c86:	80 93 df 03 	sts	0x03DF, r24

	if(compute_left_vel) {
    2c8a:	80 91 07 02 	lds	r24, 0x0207
    2c8e:	88 23       	and	r24, r24
    2c90:	59 f1       	breq	.+86     	; 0x2ce8 <handleMotorsWithSpeedController+0x98>

		last_left_vel = left_vel_sum>>2;
    2c92:	80 91 e3 03 	lds	r24, 0x03E3
    2c96:	90 91 e4 03 	lds	r25, 0x03E4
    2c9a:	96 95       	lsr	r25
    2c9c:	87 95       	ror	r24
    2c9e:	96 95       	lsr	r25
    2ca0:	87 95       	ror	r24
    2ca2:	90 93 e8 03 	sts	0x03E8, r25
    2ca6:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2caa:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2cae:	10 92 e4 03 	sts	0x03E4, r1
    2cb2:	10 92 e3 03 	sts	0x03E3, r1

		if(robotPosition == HORIZONTAL_POS) {
    2cb6:	80 91 16 02 	lds	r24, 0x0216
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <handleMotorsWithSpeedController+0x70>
    2cbe:	61 c0       	rjmp	.+194    	; 0x2d82 <handleMotorsWithSpeedController+0x132>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    2cc0:	8d ef       	ldi	r24, 0xFD	; 253
    2cc2:	93 e0       	ldi	r25, 0x03	; 3
    2cc4:	0e 94 07 0a 	call	0x140e	; 0x140e <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    2cc8:	80 91 fd 03 	lds	r24, 0x03FD
    2ccc:	90 91 fe 03 	lds	r25, 0x03FE
    2cd0:	90 93 ee 03 	sts	0x03EE, r25
    2cd4:	80 93 ed 03 	sts	0x03ED, r24

		if(pwm_left > 0) {
    2cd8:	18 16       	cp	r1, r24
    2cda:	19 06       	cpc	r1, r25
    2cdc:	0c f0       	brlt	.+2      	; 0x2ce0 <handleMotorsWithSpeedController+0x90>
    2cde:	56 c0       	rjmp	.+172    	; 0x2d8c <handleMotorsWithSpeedController+0x13c>
			OCR4A = (unsigned int)pwm_left;
    2ce0:	90 93 a9 00 	sts	0x00A9, r25
    2ce4:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    2ce8:	80 91 08 02 	lds	r24, 0x0208
    2cec:	88 23       	and	r24, r24
    2cee:	a1 f1       	breq	.+104    	; 0x2d58 <handleMotorsWithSpeedController+0x108>

		last_right_vel = right_vel_sum>>2;
    2cf0:	80 91 e5 03 	lds	r24, 0x03E5
    2cf4:	90 91 e6 03 	lds	r25, 0x03E6
    2cf8:	96 95       	lsr	r25
    2cfa:	87 95       	ror	r24
    2cfc:	96 95       	lsr	r25
    2cfe:	87 95       	ror	r24
    2d00:	90 93 ea 03 	sts	0x03EA, r25
    2d04:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2d08:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2d0c:	10 92 e6 03 	sts	0x03E6, r1
    2d10:	10 92 e5 03 	sts	0x03E5, r1

		if(robotPosition == HORIZONTAL_POS) {
    2d14:	80 91 16 02 	lds	r24, 0x0216
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	71 f1       	breq	.+92     	; 0x2d78 <handleMotorsWithSpeedController+0x128>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    2d1c:	8b ef       	ldi	r24, 0xFB	; 251
    2d1e:	93 e0       	ldi	r25, 0x03	; 3
    2d20:	0e 94 4c 0b 	call	0x1698	; 0x1698 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    2d24:	80 91 fb 03 	lds	r24, 0x03FB
    2d28:	90 91 fc 03 	lds	r25, 0x03FC
    2d2c:	90 93 ec 03 	sts	0x03EC, r25
    2d30:	80 93 eb 03 	sts	0x03EB, r24

		if(pwm_right > 0) {
    2d34:	18 16       	cp	r1, r24
    2d36:	19 06       	cpc	r1, r25
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <handleMotorsWithSpeedController+0xf4>
			OCR3A = (unsigned int)pwm_right;
    2d3a:	90 93 99 00 	sts	0x0099, r25
    2d3e:	80 93 98 00 	sts	0x0098, r24
    2d42:	08 95       	ret
		} else if(pwm_right < 0) {
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	69 f5       	brne	.+90     	; 0x2da2 <handleMotorsWithSpeedController+0x152>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    2d48:	10 92 99 00 	sts	0x0099, r1
    2d4c:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    2d50:	10 92 9b 00 	sts	0x009B, r1
    2d54:	10 92 9a 00 	sts	0x009A, r1
    2d58:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2d5a:	8d ef       	ldi	r24, 0xFD	; 253
    2d5c:	93 e0       	ldi	r25, 0x03	; 3
    2d5e:	6b ef       	ldi	r22, 0xFB	; 251
    2d60:	73 e0       	ldi	r23, 0x03	; 3
    2d62:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <obstacleAvoidance>
    2d66:	20 91 fd 03 	lds	r18, 0x03FD
    2d6a:	30 91 fe 03 	lds	r19, 0x03FE
    2d6e:	80 91 fb 03 	lds	r24, 0x03FB
    2d72:	90 91 fc 03 	lds	r25, 0x03FC
    2d76:	81 cf       	rjmp	.-254    	; 0x2c7a <handleMotorsWithSpeedController+0x2a>
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    2d78:	8b ef       	ldi	r24, 0xFB	; 251
    2d7a:	93 e0       	ldi	r25, 0x03	; 3
    2d7c:	0e 94 91 0c 	call	0x1922	; 0x1922 <start_horizontal_speed_control_right>
    2d80:	d1 cf       	rjmp	.-94     	; 0x2d24 <handleMotorsWithSpeedController+0xd4>
		compute_left_vel = 0;
		left_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    2d82:	8d ef       	ldi	r24, 0xFD	; 253
    2d84:	93 e0       	ldi	r25, 0x03	; 3
    2d86:	0e 94 76 0d 	call	0x1aec	; 0x1aec <start_horizontal_speed_control_left>
    2d8a:	9e cf       	rjmp	.-196    	; 0x2cc8 <handleMotorsWithSpeedController+0x78>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	89 f4       	brne	.+34     	; 0x2db2 <handleMotorsWithSpeedController+0x162>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    2d90:	10 92 a9 00 	sts	0x00A9, r1
    2d94:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    2d98:	10 92 ab 00 	sts	0x00AB, r1
    2d9c:	10 92 aa 00 	sts	0x00AA, r1
    2da0:	a3 cf       	rjmp	.-186    	; 0x2ce8 <handleMotorsWithSpeedController+0x98>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    2da2:	90 95       	com	r25
    2da4:	81 95       	neg	r24
    2da6:	9f 4f       	sbci	r25, 0xFF	; 255
    2da8:	90 93 9b 00 	sts	0x009B, r25
    2dac:	80 93 9a 00 	sts	0x009A, r24
    2db0:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    2db2:	90 95       	com	r25
    2db4:	81 95       	neg	r24
    2db6:	9f 4f       	sbci	r25, 0xFF	; 255
    2db8:	90 93 ab 00 	sts	0x00AB, r25
    2dbc:	80 93 aa 00 	sts	0x00AA, r24
    2dc0:	93 cf       	rjmp	.-218    	; 0x2ce8 <handleMotorsWithSpeedController+0x98>

00002dc2 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	33 27       	eor	r19, r19
    2dc6:	27 fd       	sbrc	r18, 7
    2dc8:	30 95       	com	r19
    2dca:	37 fd       	sbrc	r19, 7
    2dcc:	30 c0       	rjmp	.+96     	; 0x2e2e <setLeftSpeed+0x6c>
    2dce:	30 93 00 04 	sts	0x0400, r19
    2dd2:	20 93 ff 03 	sts	0x03FF, r18

    if(vel >= 0) {
    2dd6:	87 fd       	sbrc	r24, 7
    2dd8:	1e c0       	rjmp	.+60     	; 0x2e16 <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    2dda:	22 0f       	add	r18, r18
    2ddc:	33 1f       	adc	r19, r19
    2dde:	22 0f       	add	r18, r18
    2de0:	33 1f       	adc	r19, r19
    2de2:	30 93 f2 03 	sts	0x03F2, r19
    2de6:	20 93 f1 03 	sts	0x03F1, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	21 30       	cpi	r18, 0x01	; 1
    2dee:	38 07       	cpc	r19, r24
    2df0:	3c f0       	brlt	.+14     	; 0x2e00 <setLeftSpeed+0x3e>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	92 e0       	ldi	r25, 0x02	; 2
    2df6:	90 93 f2 03 	sts	0x03F2, r25
    2dfa:	80 93 f1 03 	sts	0x03F1, r24
    2dfe:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2e00:	8e ef       	ldi	r24, 0xFE	; 254
    2e02:	20 30       	cpi	r18, 0x00	; 0
    2e04:	38 07       	cpc	r19, r24
    2e06:	34 f4       	brge	.+12     	; 0x2e14 <setLeftSpeed+0x52>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	9e ef       	ldi	r25, 0xFE	; 254
    2e0c:	90 93 f2 03 	sts	0x03F2, r25
    2e10:	80 93 f1 03 	sts	0x03F1, r24
    2e14:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    2e16:	22 0f       	add	r18, r18
    2e18:	33 1f       	adc	r19, r19
    2e1a:	22 0f       	add	r18, r18
    2e1c:	33 1f       	adc	r19, r19
    2e1e:	30 95       	com	r19
    2e20:	21 95       	neg	r18
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	30 93 f2 03 	sts	0x03F2, r19
    2e28:	20 93 f1 03 	sts	0x03F1, r18
    2e2c:	de cf       	rjmp	.-68     	; 0x2dea <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2e2e:	30 95       	com	r19
    2e30:	21 95       	neg	r18
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	cc cf       	rjmp	.-104    	; 0x2dce <setLeftSpeed+0xc>

00002e36 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2e36:	28 2f       	mov	r18, r24
    2e38:	33 27       	eor	r19, r19
    2e3a:	27 fd       	sbrc	r18, 7
    2e3c:	30 95       	com	r19
    2e3e:	37 fd       	sbrc	r19, 7
    2e40:	30 c0       	rjmp	.+96     	; 0x2ea2 <setRightSpeed+0x6c>
    2e42:	30 93 02 04 	sts	0x0402, r19
    2e46:	20 93 01 04 	sts	0x0401, r18

    if(vel >= 0) {
    2e4a:	87 fd       	sbrc	r24, 7
    2e4c:	1e c0       	rjmp	.+60     	; 0x2e8a <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    2e4e:	22 0f       	add	r18, r18
    2e50:	33 1f       	adc	r19, r19
    2e52:	22 0f       	add	r18, r18
    2e54:	33 1f       	adc	r19, r19
    2e56:	30 93 f0 03 	sts	0x03F0, r19
    2e5a:	20 93 ef 03 	sts	0x03EF, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	21 30       	cpi	r18, 0x01	; 1
    2e62:	38 07       	cpc	r19, r24
    2e64:	3c f0       	brlt	.+14     	; 0x2e74 <setRightSpeed+0x3e>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	92 e0       	ldi	r25, 0x02	; 2
    2e6a:	90 93 f0 03 	sts	0x03F0, r25
    2e6e:	80 93 ef 03 	sts	0x03EF, r24
    2e72:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2e74:	8e ef       	ldi	r24, 0xFE	; 254
    2e76:	20 30       	cpi	r18, 0x00	; 0
    2e78:	38 07       	cpc	r19, r24
    2e7a:	34 f4       	brge	.+12     	; 0x2e88 <setRightSpeed+0x52>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	9e ef       	ldi	r25, 0xFE	; 254
    2e80:	90 93 f0 03 	sts	0x03F0, r25
    2e84:	80 93 ef 03 	sts	0x03EF, r24
    2e88:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    2e8a:	22 0f       	add	r18, r18
    2e8c:	33 1f       	adc	r19, r19
    2e8e:	22 0f       	add	r18, r18
    2e90:	33 1f       	adc	r19, r19
    2e92:	30 95       	com	r19
    2e94:	21 95       	neg	r18
    2e96:	3f 4f       	sbci	r19, 0xFF	; 255
    2e98:	30 93 f0 03 	sts	0x03F0, r19
    2e9c:	20 93 ef 03 	sts	0x03EF, r18
    2ea0:	de cf       	rjmp	.-68     	; 0x2e5e <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2ea2:	30 95       	com	r19
    2ea4:	21 95       	neg	r18
    2ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea8:	cc cf       	rjmp	.-104    	; 0x2e42 <setRightSpeed+0xc>

00002eaa <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    2eaa:	1f 92       	push	r1
    2eac:	0f 92       	push	r0
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	0f 92       	push	r0
    2eb2:	11 24       	eor	r1, r1
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    2eb8:	80 91 2b 04 	lds	r24, 0x042B
    2ebc:	88 23       	and	r24, r24
    2ebe:	61 f0       	breq	.+24     	; 0x2ed8 <__vector_45+0x2e>
		pwm_left = 0;
    2ec0:	10 92 ee 03 	sts	0x03EE, r1
    2ec4:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    2ec8:	10 92 a9 00 	sts	0x00A9, r1
    2ecc:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2ed0:	10 92 ab 00 	sts	0x00AB, r1
    2ed4:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    2ed8:	10 92 d8 03 	sts	0x03D8, r1
    2edc:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    2ee0:	80 91 ed 03 	lds	r24, 0x03ED
    2ee4:	90 91 ee 03 	lds	r25, 0x03EE
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	41 f5       	brne	.+80     	; 0x2f3c <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    2eec:	80 91 e1 03 	lds	r24, 0x03E1
    2ef0:	90 91 e2 03 	lds	r25, 0x03E2
    2ef4:	97 fd       	sbrc	r25, 7
    2ef6:	69 c0       	rjmp	.+210    	; 0x2fca <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    2efe:	8e e0       	ldi	r24, 0x0E	; 14
    2f00:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2f0a:	80 91 a0 00 	lds	r24, 0x00A0
    2f0e:	8f 75       	andi	r24, 0x5F	; 95
    2f10:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f14:	80 91 02 01 	lds	r24, 0x0102
    2f18:	87 7e       	andi	r24, 0xE7	; 231
    2f1a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    2f1e:	80 91 72 00 	lds	r24, 0x0072
    2f22:	89 7f       	andi	r24, 0xF9	; 249
    2f24:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    2f28:	89 b3       	in	r24, 0x19	; 25
    2f2a:	86 60       	ori	r24, 0x06	; 6
    2f2c:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    2f2e:	9f 91       	pop	r25
    2f30:	8f 91       	pop	r24
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    2f3c:	18 16       	cp	r1, r24
    2f3e:	19 06       	cpc	r1, r25
    2f40:	2c f5       	brge	.+74     	; 0x2f8c <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    2f42:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    2f46:	8f e0       	ldi	r24, 0x0F	; 15
    2f48:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2f4c:	80 91 a0 00 	lds	r24, 0x00A0
    2f50:	8f 7d       	andi	r24, 0xDF	; 223
    2f52:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2f56:	80 91 72 00 	lds	r24, 0x0072
    2f5a:	8b 7f       	andi	r24, 0xFB	; 251
    2f5c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    2f60:	80 91 02 01 	lds	r24, 0x0102
    2f64:	8f 7e       	andi	r24, 0xEF	; 239
    2f66:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    2f6a:	80 91 a0 00 	lds	r24, 0x00A0
    2f6e:	80 68       	ori	r24, 0x80	; 128
    2f70:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2f74:	80 91 72 00 	lds	r24, 0x0072
    2f78:	82 60       	ori	r24, 0x02	; 2
    2f7a:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    2f7e:	9f 91       	pop	r25
    2f80:	8f 91       	pop	r24
    2f82:	0f 90       	pop	r0
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	0f 90       	pop	r0
    2f88:	1f 90       	pop	r1
    2f8a:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    2f8c:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    2f90:	8e e0       	ldi	r24, 0x0E	; 14
    2f92:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    2f96:	80 91 a0 00 	lds	r24, 0x00A0
    2f9a:	8f 77       	andi	r24, 0x7F	; 127
    2f9c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2fa0:	80 91 72 00 	lds	r24, 0x0072
    2fa4:	8d 7f       	andi	r24, 0xFD	; 253
    2fa6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    2faa:	80 91 02 01 	lds	r24, 0x0102
    2fae:	87 7f       	andi	r24, 0xF7	; 247
    2fb0:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    2fb4:	80 91 a0 00 	lds	r24, 0x00A0
    2fb8:	80 62       	ori	r24, 0x20	; 32
    2fba:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2fbe:	80 91 72 00 	lds	r24, 0x0072
    2fc2:	84 60       	ori	r24, 0x04	; 4
    2fc4:	80 93 72 00 	sts	0x0072, r24
    2fc8:	b2 cf       	rjmp	.-156    	; 0x2f2e <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    2fd0:	8f e0       	ldi	r24, 0x0F	; 15
    2fd2:	80 93 2b 03 	sts	0x032B, r24
    2fd6:	96 cf       	rjmp	.-212    	; 0x2f04 <__vector_45+0x5a>

00002fd8 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    2fd8:	1f 92       	push	r1
    2fda:	0f 92       	push	r0
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	0f 92       	push	r0
    2fe0:	11 24       	eor	r1, r1
    2fe2:	8f 93       	push	r24
    2fe4:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    2fec:	9e e0       	ldi	r25, 0x0E	; 14
    2fee:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    2ff2:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2ff6:	9f 91       	pop	r25
    2ff8:	8f 91       	pop	r24
    2ffa:	0f 90       	pop	r0
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	0f 90       	pop	r0
    3000:	1f 90       	pop	r1
    3002:	18 95       	reti

00003004 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3004:	1f 92       	push	r1
    3006:	0f 92       	push	r0
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	0f 92       	push	r0
    300c:	11 24       	eor	r1, r1
    300e:	8f 93       	push	r24
    3010:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3018:	9f e0       	ldi	r25, 0x0F	; 15
    301a:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    301e:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3022:	9f 91       	pop	r25
    3024:	8f 91       	pop	r24
    3026:	0f 90       	pop	r0
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	0f 90       	pop	r0
    302c:	1f 90       	pop	r1
    302e:	18 95       	reti

00003030 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3030:	1f 92       	push	r1
    3032:	0f 92       	push	r0
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	0f 92       	push	r0
    3038:	11 24       	eor	r1, r1
    303a:	8f 93       	push	r24
    303c:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    303e:	80 91 2b 04 	lds	r24, 0x042B
    3042:	88 23       	and	r24, r24
    3044:	61 f0       	breq	.+24     	; 0x305e <__vector_35+0x2e>
		pwm_right = 0;
    3046:	10 92 ec 03 	sts	0x03EC, r1
    304a:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    304e:	10 92 99 00 	sts	0x0099, r1
    3052:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3056:	10 92 9b 00 	sts	0x009B, r1
    305a:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    305e:	10 92 da 03 	sts	0x03DA, r1
    3062:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    3066:	80 91 eb 03 	lds	r24, 0x03EB
    306a:	90 91 ec 03 	lds	r25, 0x03EC
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	31 f5       	brne	.+76     	; 0x30be <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3072:	80 91 df 03 	lds	r24, 0x03DF
    3076:	90 91 e0 03 	lds	r25, 0x03E0
    307a:	97 fd       	sbrc	r25, 7
    307c:	5f c0       	rjmp	.+190    	; 0x313c <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3084:	8c e0       	ldi	r24, 0x0C	; 12
    3086:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3090:	80 91 90 00 	lds	r24, 0x0090
    3094:	8f 75       	andi	r24, 0x5F	; 95
    3096:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    309a:	8e b1       	in	r24, 0x0e	; 14
    309c:	87 7e       	andi	r24, 0xE7	; 231
    309e:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    30a0:	80 91 71 00 	lds	r24, 0x0071
    30a4:	89 7f       	andi	r24, 0xF9	; 249
    30a6:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    30aa:	88 b3       	in	r24, 0x18	; 24
    30ac:	86 60       	ori	r24, 0x06	; 6
    30ae:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    30b0:	9f 91       	pop	r25
    30b2:	8f 91       	pop	r24
    30b4:	0f 90       	pop	r0
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	0f 90       	pop	r0
    30ba:	1f 90       	pop	r1
    30bc:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    30be:	18 16       	cp	r1, r24
    30c0:	19 06       	cpc	r1, r25
    30c2:	0c f5       	brge	.+66     	; 0x3106 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    30c4:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    30c8:	8d e0       	ldi	r24, 0x0D	; 13
    30ca:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    30ce:	80 91 90 00 	lds	r24, 0x0090
    30d2:	8f 7d       	andi	r24, 0xDF	; 223
    30d4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    30d8:	80 91 71 00 	lds	r24, 0x0071
    30dc:	8b 7f       	andi	r24, 0xFB	; 251
    30de:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    30e2:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    30e4:	80 91 90 00 	lds	r24, 0x0090
    30e8:	80 68       	ori	r24, 0x80	; 128
    30ea:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    30ee:	80 91 71 00 	lds	r24, 0x0071
    30f2:	82 60       	ori	r24, 0x02	; 2
    30f4:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    30f8:	9f 91       	pop	r25
    30fa:	8f 91       	pop	r24
    30fc:	0f 90       	pop	r0
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	0f 90       	pop	r0
    3102:	1f 90       	pop	r1
    3104:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3106:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    310a:	8c e0       	ldi	r24, 0x0C	; 12
    310c:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3110:	80 91 90 00 	lds	r24, 0x0090
    3114:	8f 77       	andi	r24, 0x7F	; 127
    3116:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    311a:	80 91 71 00 	lds	r24, 0x0071
    311e:	8d 7f       	andi	r24, 0xFD	; 253
    3120:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3124:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3126:	80 91 90 00 	lds	r24, 0x0090
    312a:	80 62       	ori	r24, 0x20	; 32
    312c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3130:	80 91 71 00 	lds	r24, 0x0071
    3134:	84 60       	ori	r24, 0x04	; 4
    3136:	80 93 71 00 	sts	0x0071, r24
    313a:	ba cf       	rjmp	.-140    	; 0x30b0 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3142:	8d e0       	ldi	r24, 0x0D	; 13
    3144:	80 93 2c 03 	sts	0x032C, r24
    3148:	a0 cf       	rjmp	.-192    	; 0x308a <__vector_35+0x5a>

0000314a <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	8f 93       	push	r24
    3156:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    315e:	9c e0       	ldi	r25, 0x0C	; 12
    3160:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3164:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    3168:	9f 91       	pop	r25
    316a:	8f 91       	pop	r24
    316c:	0f 90       	pop	r0
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	0f 90       	pop	r0
    3172:	1f 90       	pop	r1
    3174:	18 95       	reti

00003176 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3176:	1f 92       	push	r1
    3178:	0f 92       	push	r0
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	0f 92       	push	r0
    317e:	11 24       	eor	r1, r1
    3180:	8f 93       	push	r24
    3182:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    318a:	9d e0       	ldi	r25, 0x0D	; 13
    318c:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3190:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    3194:	9f 91       	pop	r25
    3196:	8f 91       	pop	r24
    3198:	0f 90       	pop	r0
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	0f 90       	pop	r0
    319e:	1f 90       	pop	r1
    31a0:	18 95       	reti

000031a2 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    31a2:	80 91 94 00 	lds	r24, 0x0094
    31a6:	90 91 95 00 	lds	r25, 0x0095
    31aa:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <srand>

}
    31ae:	08 95       	ret

000031b0 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    31b0:	2f 92       	push	r2
    31b2:	3f 92       	push	r3
    31b4:	4f 92       	push	r4
    31b6:	5f 92       	push	r5
    31b8:	6f 92       	push	r6
    31ba:	7f 92       	push	r7
    31bc:	8f 92       	push	r8
    31be:	9f 92       	push	r9
    31c0:	af 92       	push	r10
    31c2:	bf 92       	push	r11
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	28 97       	sbiw	r28, 0x08	; 8
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	2c 01       	movw	r4, r24
    31e6:	7a 83       	std	Y+2, r23	; 0x02
    31e8:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    31ea:	fc 01       	movw	r30, r24
    31ec:	01 90       	ld	r0, Z+
    31ee:	f0 81       	ld	r31, Z
    31f0:	e0 2d       	mov	r30, r0
    31f2:	fc 83       	std	Y+4, r31	; 0x04
    31f4:	eb 83       	std	Y+3, r30	; 0x03
    31f6:	fb 01       	movw	r30, r22
    31f8:	01 90       	ld	r0, Z+
    31fa:	f0 81       	ld	r31, Z
    31fc:	e0 2d       	mov	r30, r0
    31fe:	fe 83       	std	Y+6, r31	; 0x06
    3200:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3202:	60 91 c7 03 	lds	r22, 0x03C7
    3206:	70 91 c8 03 	lds	r23, 0x03C8
    320a:	65 30       	cpi	r22, 0x05	; 5
    320c:	71 05       	cpc	r23, r1
    320e:	34 f4       	brge	.+12     	; 0x321c <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    3210:	10 92 c8 03 	sts	0x03C8, r1
    3214:	10 92 c7 03 	sts	0x03C7, r1
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    321c:	40 91 c9 03 	lds	r20, 0x03C9
    3220:	50 91 ca 03 	lds	r21, 0x03CA
    3224:	45 30       	cpi	r20, 0x05	; 5
    3226:	51 05       	cpc	r21, r1
    3228:	34 f4       	brge	.+12     	; 0x3236 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    322a:	10 92 ca 03 	sts	0x03CA, r1
    322e:	10 92 c9 03 	sts	0x03C9, r1
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3236:	80 91 cb 03 	lds	r24, 0x03CB
    323a:	90 91 cc 03 	lds	r25, 0x03CC
    323e:	85 30       	cpi	r24, 0x05	; 5
    3240:	91 05       	cpc	r25, r1
    3242:	24 f4       	brge	.+8      	; 0x324c <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    3244:	10 92 cc 03 	sts	0x03CC, r1
    3248:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    324c:	00 91 cd 03 	lds	r16, 0x03CD
    3250:	10 91 ce 03 	lds	r17, 0x03CE
    3254:	05 30       	cpi	r16, 0x05	; 5
    3256:	11 05       	cpc	r17, r1
    3258:	34 f4       	brge	.+12     	; 0x3266 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    325a:	10 92 ce 03 	sts	0x03CE, r1
    325e:	10 92 cd 03 	sts	0x03CD, r1
    3262:	00 e0       	ldi	r16, 0x00	; 0
    3264:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3266:	60 90 cf 03 	lds	r6, 0x03CF
    326a:	70 90 d0 03 	lds	r7, 0x03D0
    326e:	f5 e0       	ldi	r31, 0x05	; 5
    3270:	6f 16       	cp	r6, r31
    3272:	71 04       	cpc	r7, r1
    3274:	34 f4       	brge	.+12     	; 0x3282 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    3276:	10 92 d0 03 	sts	0x03D0, r1
    327a:	10 92 cf 03 	sts	0x03CF, r1
    327e:	66 24       	eor	r6, r6
    3280:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3282:	20 91 d1 03 	lds	r18, 0x03D1
    3286:	30 91 d2 03 	lds	r19, 0x03D2
    328a:	25 30       	cpi	r18, 0x05	; 5
    328c:	31 05       	cpc	r19, r1
    328e:	34 f4       	brge	.+12     	; 0x329c <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3290:	10 92 d2 03 	sts	0x03D2, r1
    3294:	10 92 d1 03 	sts	0x03D1, r1
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    329c:	80 91 d3 03 	lds	r24, 0x03D3
    32a0:	90 91 d4 03 	lds	r25, 0x03D4
    32a4:	85 30       	cpi	r24, 0x05	; 5
    32a6:	91 05       	cpc	r25, r1
    32a8:	24 f4       	brge	.+8      	; 0x32b2 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    32aa:	10 92 d4 03 	sts	0x03D4, r1
    32ae:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    32b2:	80 91 d5 03 	lds	r24, 0x03D5
    32b6:	90 91 d6 03 	lds	r25, 0x03D6
    32ba:	85 30       	cpi	r24, 0x05	; 5
    32bc:	91 05       	cpc	r25, r1
    32be:	34 f4       	brge	.+12     	; 0x32cc <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    32c0:	10 92 d6 03 	sts	0x03D6, r1
    32c4:	10 92 d5 03 	sts	0x03D5, r1
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    32cc:	ee 24       	eor	r14, r14
    32ce:	ff 24       	eor	r15, r15
    32d0:	e6 1a       	sub	r14, r22
    32d2:	f7 0a       	sbc	r15, r23
    32d4:	5a 01       	movw	r10, r20
    32d6:	b5 94       	asr	r11
    32d8:	a7 94       	ror	r10
    32da:	15 95       	asr	r17
    32dc:	07 95       	ror	r16
    32de:	69 01       	movw	r12, r18
    32e0:	d5 94       	asr	r13
    32e2:	c7 94       	ror	r12
    32e4:	4c 01       	movw	r8, r24
    32e6:	95 94       	asr	r9
    32e8:	87 94       	ror	r8
    32ea:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <rand>
    32ee:	93 01       	movw	r18, r6
    32f0:	2e 51       	subi	r18, 0x1E	; 30
    32f2:	30 40       	sbci	r19, 0x00	; 0
    32f4:	2e 0d       	add	r18, r14
    32f6:	3f 1d       	adc	r19, r15
    32f8:	20 0f       	add	r18, r16
    32fa:	31 1f       	adc	r19, r17
    32fc:	2c 0d       	add	r18, r12
    32fe:	3d 1d       	adc	r19, r13
    3300:	2a 19       	sub	r18, r10
    3302:	3b 09       	sbc	r19, r11
    3304:	28 19       	sub	r18, r8
    3306:	39 09       	sbc	r19, r9
    3308:	4c e3       	ldi	r20, 0x3C	; 60
    330a:	24 2e       	mov	r2, r20
    330c:	31 2c       	mov	r3, r1
    330e:	b1 01       	movw	r22, r2
    3310:	0e 94 bc 24 	call	0x4978	; 0x4978 <__divmodhi4>
    3314:	28 0f       	add	r18, r24
    3316:	39 1f       	adc	r19, r25
    3318:	38 87       	std	Y+8, r19	; 0x08
    331a:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    331c:	e0 90 c9 03 	lds	r14, 0x03C9
    3320:	f0 90 ca 03 	lds	r15, 0x03CA
    3324:	f5 94       	asr	r15
    3326:	e7 94       	ror	r14
    3328:	00 91 cb 03 	lds	r16, 0x03CB
    332c:	10 91 cc 03 	lds	r17, 0x03CC
    3330:	15 95       	asr	r17
    3332:	07 95       	ror	r16
    3334:	15 95       	asr	r17
    3336:	07 95       	ror	r16
    3338:	c0 90 cd 03 	lds	r12, 0x03CD
    333c:	d0 90 ce 03 	lds	r13, 0x03CE
    3340:	d5 94       	asr	r13
    3342:	c7 94       	ror	r12
    3344:	80 90 d1 03 	lds	r8, 0x03D1
    3348:	90 90 d2 03 	lds	r9, 0x03D2
    334c:	95 94       	asr	r9
    334e:	87 94       	ror	r8
    3350:	60 90 d3 03 	lds	r6, 0x03D3
    3354:	70 90 d4 03 	lds	r7, 0x03D4
    3358:	75 94       	asr	r7
    335a:	67 94       	ror	r6
    335c:	75 94       	asr	r7
    335e:	67 94       	ror	r6
    3360:	a0 90 d5 03 	lds	r10, 0x03D5
    3364:	b0 90 d6 03 	lds	r11, 0x03D6
    3368:	b5 94       	asr	r11
    336a:	a7 94       	ror	r10
    336c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <rand>
    3370:	97 01       	movw	r18, r14
    3372:	20 0f       	add	r18, r16
    3374:	31 1f       	adc	r19, r17
    3376:	2e 51       	subi	r18, 0x1E	; 30
    3378:	30 40       	sbci	r19, 0x00	; 0
    337a:	2c 0d       	add	r18, r12
    337c:	3d 1d       	adc	r19, r13
    337e:	2a 19       	sub	r18, r10
    3380:	3b 09       	sbc	r19, r11
    3382:	28 19       	sub	r18, r8
    3384:	39 09       	sbc	r19, r9
    3386:	26 19       	sub	r18, r6
    3388:	37 09       	sbc	r19, r7
    338a:	b1 01       	movw	r22, r2
    338c:	0e 94 bc 24 	call	0x4978	; 0x4978 <__divmodhi4>
    3390:	28 0f       	add	r18, r24
    3392:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    3394:	4b 81       	ldd	r20, Y+3	; 0x03
    3396:	5c 81       	ldd	r21, Y+4	; 0x04
    3398:	57 fd       	sbrc	r21, 7
    339a:	97 c0       	rjmp	.+302    	; 0x34ca <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    339c:	5a 01       	movw	r10, r20
    339e:	cc 24       	eor	r12, r12
    33a0:	b7 fc       	sbrc	r11, 7
    33a2:	c0 94       	com	r12
    33a4:	dc 2c       	mov	r13, r12
    33a6:	8f 81       	ldd	r24, Y+7	; 0x07
    33a8:	98 85       	ldd	r25, Y+8	; 0x08
    33aa:	3c 01       	movw	r6, r24
    33ac:	88 24       	eor	r8, r8
    33ae:	77 fc       	sbrc	r7, 7
    33b0:	80 94       	com	r8
    33b2:	98 2c       	mov	r9, r8
    33b4:	79 01       	movw	r14, r18
    33b6:	00 27       	eor	r16, r16
    33b8:	f7 fc       	sbrc	r15, 7
    33ba:	00 95       	com	r16
    33bc:	10 2f       	mov	r17, r16
    33be:	c4 01       	movw	r24, r8
    33c0:	b3 01       	movw	r22, r6
    33c2:	6e 19       	sub	r22, r14
    33c4:	7f 09       	sbc	r23, r15
    33c6:	80 0b       	sbc	r24, r16
    33c8:	91 0b       	sbc	r25, r17
    33ca:	a6 01       	movw	r20, r12
    33cc:	95 01       	movw	r18, r10
    33ce:	0e 94 89 24 	call	0x4912	; 0x4912 <__mulsi3>
    33d2:	f7 e0       	ldi	r31, 0x07	; 7
    33d4:	95 95       	asr	r25
    33d6:	87 95       	ror	r24
    33d8:	77 95       	ror	r23
    33da:	67 95       	ror	r22
    33dc:	fa 95       	dec	r31
    33de:	d1 f7       	brne	.-12     	; 0x33d4 <obstacleAvoidance+0x224>
    33e0:	6a 0d       	add	r22, r10
    33e2:	7b 1d       	adc	r23, r11
    33e4:	8c 1d       	adc	r24, r12
    33e6:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    33e8:	f2 01       	movw	r30, r4
    33ea:	71 83       	std	Z+1, r23	; 0x01
    33ec:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    33ee:	2d 81       	ldd	r18, Y+5	; 0x05
    33f0:	3e 81       	ldd	r19, Y+6	; 0x06
    33f2:	37 fd       	sbrc	r19, 7
    33f4:	99 c0       	rjmp	.+306    	; 0x3528 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    33f6:	59 01       	movw	r10, r18
    33f8:	cc 24       	eor	r12, r12
    33fa:	b7 fc       	sbrc	r11, 7
    33fc:	c0 94       	com	r12
    33fe:	dc 2c       	mov	r13, r12
    3400:	c8 01       	movw	r24, r16
    3402:	b7 01       	movw	r22, r14
    3404:	66 0d       	add	r22, r6
    3406:	77 1d       	adc	r23, r7
    3408:	88 1d       	adc	r24, r8
    340a:	99 1d       	adc	r25, r9
    340c:	a6 01       	movw	r20, r12
    340e:	95 01       	movw	r18, r10
    3410:	0e 94 89 24 	call	0x4912	; 0x4912 <__mulsi3>
    3414:	37 e0       	ldi	r19, 0x07	; 7
    3416:	95 95       	asr	r25
    3418:	87 95       	ror	r24
    341a:	77 95       	ror	r23
    341c:	67 95       	ror	r22
    341e:	3a 95       	dec	r19
    3420:	d1 f7       	brne	.-12     	; 0x3416 <obstacleAvoidance+0x266>
    3422:	6a 0d       	add	r22, r10
    3424:	7b 1d       	adc	r23, r11
    3426:	8c 1d       	adc	r24, r12
    3428:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    342a:	9b 01       	movw	r18, r22
    342c:	e9 81       	ldd	r30, Y+1	; 0x01
    342e:	fa 81       	ldd	r31, Y+2	; 0x02
    3430:	71 83       	std	Z+1, r23	; 0x01
    3432:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    3434:	f2 e0       	ldi	r31, 0x02	; 2
    3436:	21 30       	cpi	r18, 0x01	; 1
    3438:	3f 07       	cpc	r19, r31
    343a:	44 f0       	brlt	.+16     	; 0x344c <obstacleAvoidance+0x29c>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	92 e0       	ldi	r25, 0x02	; 2
    3440:	e9 81       	ldd	r30, Y+1	; 0x01
    3442:	fa 81       	ldd	r31, Y+2	; 0x02
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    344c:	f2 01       	movw	r30, r4
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	f2 e0       	ldi	r31, 0x02	; 2
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	9f 07       	cpc	r25, r31
    3458:	4c f0       	brlt	.+18     	; 0x346c <obstacleAvoidance+0x2bc>
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	92 e0       	ldi	r25, 0x02	; 2
    345e:	f2 01       	movw	r30, r4
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
    3464:	e9 81       	ldd	r30, Y+1	; 0x01
    3466:	fa 81       	ldd	r31, Y+2	; 0x02
    3468:	20 81       	ld	r18, Z
    346a:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    346c:	fe ef       	ldi	r31, 0xFE	; 254
    346e:	20 30       	cpi	r18, 0x00	; 0
    3470:	3f 07       	cpc	r19, r31
    3472:	4c f4       	brge	.+18     	; 0x3486 <obstacleAvoidance+0x2d6>
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	9e ef       	ldi	r25, 0xFE	; 254
    3478:	e9 81       	ldd	r30, Y+1	; 0x01
    347a:	fa 81       	ldd	r31, Y+2	; 0x02
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	f2 01       	movw	r30, r4
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    3486:	fe ef       	ldi	r31, 0xFE	; 254
    3488:	80 30       	cpi	r24, 0x00	; 0
    348a:	9f 07       	cpc	r25, r31
    348c:	2c f4       	brge	.+10     	; 0x3498 <obstacleAvoidance+0x2e8>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	9e ef       	ldi	r25, 0xFE	; 254
    3492:	f2 01       	movw	r30, r4
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24

}
    3498:	28 96       	adiw	r28, 0x08	; 8
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    34b4:	bf 90       	pop	r11
    34b6:	af 90       	pop	r10
    34b8:	9f 90       	pop	r9
    34ba:	8f 90       	pop	r8
    34bc:	7f 90       	pop	r7
    34be:	6f 90       	pop	r6
    34c0:	5f 90       	pop	r5
    34c2:	4f 90       	pop	r4
    34c4:	3f 90       	pop	r3
    34c6:	2f 90       	pop	r2
    34c8:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    34ca:	4d 81       	ldd	r20, Y+5	; 0x05
    34cc:	5e 81       	ldd	r21, Y+6	; 0x06
    34ce:	5a 01       	movw	r10, r20
    34d0:	cc 24       	eor	r12, r12
    34d2:	b7 fc       	sbrc	r11, 7
    34d4:	c0 94       	com	r12
    34d6:	dc 2c       	mov	r13, r12
    34d8:	8f 81       	ldd	r24, Y+7	; 0x07
    34da:	98 85       	ldd	r25, Y+8	; 0x08
    34dc:	3c 01       	movw	r6, r24
    34de:	88 24       	eor	r8, r8
    34e0:	77 fc       	sbrc	r7, 7
    34e2:	80 94       	com	r8
    34e4:	98 2c       	mov	r9, r8
    34e6:	79 01       	movw	r14, r18
    34e8:	00 27       	eor	r16, r16
    34ea:	f7 fc       	sbrc	r15, 7
    34ec:	00 95       	com	r16
    34ee:	10 2f       	mov	r17, r16
    34f0:	c8 01       	movw	r24, r16
    34f2:	b7 01       	movw	r22, r14
    34f4:	66 0d       	add	r22, r6
    34f6:	77 1d       	adc	r23, r7
    34f8:	88 1d       	adc	r24, r8
    34fa:	99 1d       	adc	r25, r9
    34fc:	a6 01       	movw	r20, r12
    34fe:	95 01       	movw	r18, r10
    3500:	0e 94 89 24 	call	0x4912	; 0x4912 <__mulsi3>
    3504:	e7 e0       	ldi	r30, 0x07	; 7
    3506:	95 95       	asr	r25
    3508:	87 95       	ror	r24
    350a:	77 95       	ror	r23
    350c:	67 95       	ror	r22
    350e:	ea 95       	dec	r30
    3510:	d1 f7       	brne	.-12     	; 0x3506 <obstacleAvoidance+0x356>
    3512:	26 1b       	sub	r18, r22
    3514:	37 0b       	sbc	r19, r23
    3516:	48 0b       	sbc	r20, r24
    3518:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    351a:	f2 01       	movw	r30, r4
    351c:	31 83       	std	Z+1, r19	; 0x01
    351e:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    3520:	2d 81       	ldd	r18, Y+5	; 0x05
    3522:	3e 81       	ldd	r19, Y+6	; 0x06
    3524:	37 ff       	sbrs	r19, 7
    3526:	67 cf       	rjmp	.-306    	; 0x33f6 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3528:	2b 81       	ldd	r18, Y+3	; 0x03
    352a:	3c 81       	ldd	r19, Y+4	; 0x04
    352c:	59 01       	movw	r10, r18
    352e:	cc 24       	eor	r12, r12
    3530:	b7 fc       	sbrc	r11, 7
    3532:	c0 94       	com	r12
    3534:	dc 2c       	mov	r13, r12
    3536:	c4 01       	movw	r24, r8
    3538:	b3 01       	movw	r22, r6
    353a:	6e 19       	sub	r22, r14
    353c:	7f 09       	sbc	r23, r15
    353e:	80 0b       	sbc	r24, r16
    3540:	91 0b       	sbc	r25, r17
    3542:	a6 01       	movw	r20, r12
    3544:	95 01       	movw	r18, r10
    3546:	0e 94 89 24 	call	0x4912	; 0x4912 <__mulsi3>
    354a:	27 e0       	ldi	r18, 0x07	; 7
    354c:	95 95       	asr	r25
    354e:	87 95       	ror	r24
    3550:	77 95       	ror	r23
    3552:	67 95       	ror	r22
    3554:	2a 95       	dec	r18
    3556:	d1 f7       	brne	.-12     	; 0x354c <obstacleAvoidance+0x39c>
    3558:	a6 1a       	sub	r10, r22
    355a:	b7 0a       	sbc	r11, r23
    355c:	c8 0a       	sbc	r12, r24
    355e:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    3560:	95 01       	movw	r18, r10
    3562:	e9 81       	ldd	r30, Y+1	; 0x01
    3564:	fa 81       	ldd	r31, Y+2	; 0x02
    3566:	b1 82       	std	Z+1, r11	; 0x01
    3568:	a0 82       	st	Z, r10
    356a:	64 cf       	rjmp	.-312    	; 0x3434 <obstacleAvoidance+0x284>

0000356c <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    356c:	80 91 6f 03 	lds	r24, 0x036F
    3570:	90 91 70 03 	lds	r25, 0x0370
    3574:	21 e0       	ldi	r18, 0x01	; 1
    3576:	84 3a       	cpi	r24, 0xA4	; 164
    3578:	92 07       	cpc	r25, r18
    357a:	d4 f0       	brlt	.+52     	; 0x35b0 <cliffDetected+0x44>
    357c:	80 91 71 03 	lds	r24, 0x0371
    3580:	90 91 72 03 	lds	r25, 0x0372
    3584:	21 e0       	ldi	r18, 0x01	; 1
    3586:	84 3a       	cpi	r24, 0xA4	; 164
    3588:	92 07       	cpc	r25, r18
    358a:	94 f0       	brlt	.+36     	; 0x35b0 <cliffDetected+0x44>
    358c:	80 91 73 03 	lds	r24, 0x0373
    3590:	90 91 74 03 	lds	r25, 0x0374
    3594:	21 e0       	ldi	r18, 0x01	; 1
    3596:	84 3a       	cpi	r24, 0xA4	; 164
    3598:	92 07       	cpc	r25, r18
    359a:	74 f0       	brlt	.+28     	; 0x35b8 <cliffDetected+0x4c>
		return 1;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	20 91 75 03 	lds	r18, 0x0375
    35a2:	30 91 76 03 	lds	r19, 0x0376
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	24 3a       	cpi	r18, 0xA4	; 164
    35aa:	39 07       	cpc	r19, r25
    35ac:	1c f4       	brge	.+6      	; 0x35b4 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    35ae:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	08 95       	ret
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	08 95       	ret
    35b8:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    35ba:	08 95       	ret

000035bc <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    35bc:	a0 e8       	ldi	r26, 0x80	; 128
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	1c 92       	st	X, r1
	TCCR1B = 0;
    35c2:	e1 e8       	ldi	r30, 0x81	; 129
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    35c8:	8c 91       	ld	r24, X
    35ca:	89 6a       	ori	r24, 0xA9	; 169
    35cc:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    35ce:	80 81       	ld	r24, Z
    35d0:	89 60       	ori	r24, 0x09	; 9
    35d2:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    35d4:	80 91 0c 02 	lds	r24, 0x020C
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	90 93 89 00 	sts	0x0089, r25
    35de:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    35e2:	80 91 0d 02 	lds	r24, 0x020D
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	90 93 8b 00 	sts	0x008B, r25
    35ec:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    35f0:	80 91 0e 02 	lds	r24, 0x020E
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	90 93 8d 00 	sts	0x008D, r25
    35fa:	80 93 8c 00 	sts	0x008C, r24

}
    35fe:	08 95       	ret

00003600 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 91 05 04 	lds	r25, 0x0405
    3606:	89 1b       	sub	r24, r25
    3608:	80 93 05 04 	sts	0x0405, r24

	if(blinkState) {
    360c:	88 23       	and	r24, r24
    360e:	39 f4       	brne	.+14     	; 0x361e <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    3610:	80 91 80 00 	lds	r24, 0x0080
    3614:	87 7f       	andi	r24, 0xF7	; 247
    3616:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    361a:	2f 98       	cbi	0x05, 7	; 5
    361c:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    361e:	80 91 80 00 	lds	r24, 0x0080
    3622:	88 60       	ori	r24, 0x08	; 8
    3624:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3628:	8f ef       	ldi	r24, 0xFF	; 255
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	90 93 8d 00 	sts	0x008D, r25
    3630:	80 93 8c 00 	sts	0x008C, r24
    3634:	08 95       	ret

00003636 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3636:	88 23       	and	r24, r24
    3638:	59 f0       	breq	.+22     	; 0x3650 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    363a:	90 91 80 00 	lds	r25, 0x0080
    363e:	90 68       	ori	r25, 0x80	; 128
    3640:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	90 93 89 00 	sts	0x0089, r25
    364a:	80 93 88 00 	sts	0x0088, r24
    364e:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3650:	80 91 80 00 	lds	r24, 0x0080
    3654:	8f 77       	andi	r24, 0x7F	; 127
    3656:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    365a:	2d 98       	cbi	0x05, 5	; 5
    365c:	08 95       	ret

0000365e <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    365e:	88 23       	and	r24, r24
    3660:	59 f0       	breq	.+22     	; 0x3678 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3662:	90 91 80 00 	lds	r25, 0x0080
    3666:	90 62       	ori	r25, 0x20	; 32
    3668:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	90 93 8b 00 	sts	0x008B, r25
    3672:	80 93 8a 00 	sts	0x008A, r24
    3676:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    3678:	80 91 80 00 	lds	r24, 0x0080
    367c:	8f 7d       	andi	r24, 0xDF	; 223
    367e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3682:	2e 98       	cbi	0x05, 6	; 5
    3684:	08 95       	ret

00003686 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3686:	88 23       	and	r24, r24
    3688:	59 f0       	breq	.+22     	; 0x36a0 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    368a:	90 91 80 00 	lds	r25, 0x0080
    368e:	98 60       	ori	r25, 0x08	; 8
    3690:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	90 93 8d 00 	sts	0x008D, r25
    369a:	80 93 8c 00 	sts	0x008C, r24
    369e:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    36a0:	80 91 80 00 	lds	r24, 0x0080
    36a4:	87 7f       	andi	r24, 0xF7	; 247
    36a6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    36aa:	2f 98       	cbi	0x05, 7	; 5
    36ac:	08 95       	ret

000036ae <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    36ae:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    36b2:	80 91 13 02 	lds	r24, 0x0213
    36b6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    36ba:	88 23       	and	r24, r24
    36bc:	49 f4       	brne	.+18     	; 0x36d0 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    36be:	86 e1       	ldi	r24, 0x16	; 22
    36c0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    36c4:	85 e4       	ldi	r24, 0x45	; 69
    36c6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    36ca:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    36ce:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    36d0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    36d4:	86 ea       	ldi	r24, 0xA6	; 166
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	90 93 14 02 	sts	0x0214, r25
    36dc:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    36e0:	86 ea       	ldi	r24, 0xA6	; 166
    36e2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    36e6:	88 23       	and	r24, r24
    36e8:	41 f5       	brne	.+80     	; 0x373a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    36ea:	8d e2       	ldi	r24, 0x2D	; 45
    36ec:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x08);	// measurement mode
    36f0:	88 e0       	ldi	r24, 0x08	; 8
    36f2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    36f6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    36fa:	80 91 13 02 	lds	r24, 0x0213
    36fe:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3702:	88 23       	and	r24, r24
    3704:	d1 f4       	brne	.+52     	; 0x373a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3706:	81 e3       	ldi	r24, 0x31	; 49
    3708:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3712:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3716:	80 91 13 02 	lds	r24, 0x0213
    371a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    371e:	88 23       	and	r24, r24
    3720:	61 f4       	brne	.+24     	; 0x373a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3722:	8c e2       	ldi	r24, 0x2C	; 44
    3724:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3728:	89 e0       	ldi	r24, 0x09	; 9
    372a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    372e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	80 93 0b 04 	sts	0x040B, r24
    3738:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    373a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    373e:	82 e0       	ldi	r24, 0x02	; 2
    3740:	80 93 0b 04 	sts	0x040B, r24
    3744:	08 95       	ret

00003746 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3746:	80 91 13 02 	lds	r24, 0x0213
    374a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    374e:	88 23       	and	r24, r24
    3750:	51 f4       	brne	.+20     	; 0x3766 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3752:	86 e1       	ldi	r24, 0x16	; 22
    3754:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3758:	85 e4       	ldi	r24, 0x45	; 69
    375a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    375e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    }

	return 0;				// configuration ok
    3762:	80 e0       	ldi	r24, 0x00	; 0

}
    3764:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3766:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
		return 1;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	08 95       	ret

0000376e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    376e:	80 91 13 02 	lds	r24, 0x0213
    3772:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3776:	88 23       	and	r24, r24
    3778:	31 f5       	brne	.+76     	; 0x37c6 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    377a:	8d e2       	ldi	r24, 0x2D	; 45
    377c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x08);	// measurement mode
    3780:	88 e0       	ldi	r24, 0x08	; 8
    3782:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3786:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    378a:	80 91 13 02 	lds	r24, 0x0213
    378e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3792:	88 23       	and	r24, r24
    3794:	c1 f4       	brne	.+48     	; 0x37c6 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3796:	81 e3       	ldi	r24, 0x31	; 49
    3798:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    37a2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    37a6:	80 91 13 02 	lds	r24, 0x0213
    37aa:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    37ae:	88 23       	and	r24, r24
    37b0:	51 f4       	brne	.+20     	; 0x37c6 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    37b2:	8c e2       	ldi	r24, 0x2C	; 44
    37b4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    37b8:	89 e0       	ldi	r24, 0x09	; 9
    37ba:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    37be:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
    }

	return 0;
    37c2:	80 e0       	ldi	r24, 0x00	; 0

}
    37c4:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    37c6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>
		return 1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	08 95       	ret

000037ce <readAccelXY>:

	return 0;

}

void readAccelXY() {
    37ce:	ff 92       	push	r15
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	df 93       	push	r29
    37d6:	cf 93       	push	r28
    37d8:	0f 92       	push	r0
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    37de:	80 91 0b 04 	lds	r24, 0x040B
    37e2:	88 23       	and	r24, r24
    37e4:	91 f0       	breq	.+36     	; 0x380a <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    37e6:	81 30       	cpi	r24, 0x01	; 1
    37e8:	09 f4       	brne	.+2      	; 0x37ec <readAccelXY+0x1e>
    37ea:	88 c0       	rjmp	.+272    	; 0x38fc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    37ec:	10 92 0d 04 	sts	0x040D, r1
    37f0:	10 92 0c 04 	sts	0x040C, r1
		accY = 0;
    37f4:	10 92 0f 04 	sts	0x040F, r1
    37f8:	10 92 0e 04 	sts	0x040E, r1

	}

}
    37fc:	0f 90       	pop	r0
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	ff 90       	pop	r15
    3808:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    380a:	80 91 13 02 	lds	r24, 0x0213
    380e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3812:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    3814:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3818:	80 91 13 02 	lds	r24, 0x0213
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3822:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    3826:	08 2f       	mov	r16, r24
    3828:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    382c:	f8 2e       	mov	r15, r24
    382e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    3832:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3834:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    383e:	90 91 58 04 	lds	r25, 0x0458
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	99 23       	and	r25, r25
    3846:	39 f1       	breq	.+78     	; 0x3896 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3848:	4f 2d       	mov	r20, r15
    384a:	55 27       	eor	r21, r21
    384c:	47 fd       	sbrc	r20, 7
    384e:	50 95       	com	r21
    3850:	54 2f       	mov	r21, r20
    3852:	44 27       	eor	r20, r20
    3854:	60 2f       	mov	r22, r16
    3856:	77 27       	eor	r23, r23
    3858:	67 fd       	sbrc	r22, 7
    385a:	70 95       	com	r23
    385c:	46 2b       	or	r20, r22
    385e:	57 2b       	or	r21, r23
    3860:	50 93 0d 04 	sts	0x040D, r21
    3864:	40 93 0c 04 	sts	0x040C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3868:	28 2f       	mov	r18, r24
    386a:	33 27       	eor	r19, r19
    386c:	27 fd       	sbrc	r18, 7
    386e:	30 95       	com	r19
    3870:	32 2f       	mov	r19, r18
    3872:	22 27       	eor	r18, r18
    3874:	81 2f       	mov	r24, r17
    3876:	99 27       	eor	r25, r25
    3878:	87 fd       	sbrc	r24, 7
    387a:	90 95       	com	r25
    387c:	28 2b       	or	r18, r24
    387e:	39 2b       	or	r19, r25
    3880:	30 93 0f 04 	sts	0x040F, r19
    3884:	20 93 0e 04 	sts	0x040E, r18
		accX = 0;
		accY = 0;

	}

}
    3888:	0f 90       	pop	r0
    388a:	cf 91       	pop	r28
    388c:	df 91       	pop	r29
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	ff 90       	pop	r15
    3894:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3896:	4f 2d       	mov	r20, r15
    3898:	55 27       	eor	r21, r21
    389a:	47 fd       	sbrc	r20, 7
    389c:	50 95       	com	r21
    389e:	54 2f       	mov	r21, r20
    38a0:	44 27       	eor	r20, r20
    38a2:	60 2f       	mov	r22, r16
    38a4:	77 27       	eor	r23, r23
    38a6:	67 fd       	sbrc	r22, 7
    38a8:	70 95       	com	r23
    38aa:	46 2b       	or	r20, r22
    38ac:	57 2b       	or	r21, r23
    38ae:	60 91 12 04 	lds	r22, 0x0412
    38b2:	70 91 13 04 	lds	r23, 0x0413
    38b6:	46 1b       	sub	r20, r22
    38b8:	57 0b       	sbc	r21, r23
    38ba:	50 93 0d 04 	sts	0x040D, r21
    38be:	40 93 0c 04 	sts	0x040C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    38c2:	28 2f       	mov	r18, r24
    38c4:	33 27       	eor	r19, r19
    38c6:	27 fd       	sbrc	r18, 7
    38c8:	30 95       	com	r19
    38ca:	32 2f       	mov	r19, r18
    38cc:	22 27       	eor	r18, r18
    38ce:	81 2f       	mov	r24, r17
    38d0:	99 27       	eor	r25, r25
    38d2:	87 fd       	sbrc	r24, 7
    38d4:	90 95       	com	r25
    38d6:	28 2b       	or	r18, r24
    38d8:	39 2b       	or	r19, r25
    38da:	80 91 14 04 	lds	r24, 0x0414
    38de:	90 91 15 04 	lds	r25, 0x0415
    38e2:	28 1b       	sub	r18, r24
    38e4:	39 0b       	sbc	r19, r25
    38e6:	30 93 0f 04 	sts	0x040F, r19
    38ea:	20 93 0e 04 	sts	0x040E, r18
		accX = 0;
		accY = 0;

	}

}
    38ee:	0f 90       	pop	r0
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	ff 90       	pop	r15
    38fa:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    38fc:	80 91 13 02 	lds	r24, 0x0213
    3900:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3904:	82 e3       	ldi	r24, 0x32	; 50
    3906:	86 cf       	rjmp	.-244    	; 0x3814 <readAccelXY+0x46>

00003908 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3908:	df 93       	push	r29
    390a:	cf 93       	push	r28
    390c:	00 d0       	rcall	.+0      	; 0x390e <readAccelXYZ+0x6>
    390e:	00 d0       	rcall	.+0      	; 0x3910 <readAccelXYZ+0x8>
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    3914:	80 91 0b 04 	lds	r24, 0x040B
    3918:	88 23       	and	r24, r24
    391a:	c1 f0       	breq	.+48     	; 0x394c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    391c:	81 30       	cpi	r24, 0x01	; 1
    391e:	09 f4       	brne	.+2      	; 0x3922 <readAccelXYZ+0x1a>
    3920:	ad c0       	rjmp	.+346    	; 0x3a7c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    3922:	10 92 0d 04 	sts	0x040D, r1
    3926:	10 92 0c 04 	sts	0x040C, r1
		accY = 0;
    392a:	10 92 0f 04 	sts	0x040F, r1
    392e:	10 92 0e 04 	sts	0x040E, r1
		accZ = 0;
    3932:	10 92 11 04 	sts	0x0411, r1
    3936:	10 92 10 04 	sts	0x0410, r1

	}

}
    393a:	26 96       	adiw	r28, 0x06	; 6
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    394c:	80 91 13 02 	lds	r24, 0x0213
    3950:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3954:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3956:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    395a:	80 91 13 02 	lds	r24, 0x0213
    395e:	8f 5f       	subi	r24, 0xFF	; 255
    3960:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3964:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    3968:	89 83       	std	Y+1, r24	; 0x01
    396a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    396e:	8a 83       	std	Y+2, r24	; 0x02
    3970:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    3974:	8b 83       	std	Y+3, r24	; 0x03
    3976:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    397a:	8c 83       	std	Y+4, r24	; 0x04
    397c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <i2c_readAck>
    3980:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3982:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <i2c_readNak>
    3986:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3988:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    398c:	80 91 58 04 	lds	r24, 0x0458
    3990:	88 23       	and	r24, r24
    3992:	89 f1       	breq	.+98     	; 0x39f6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3994:	8a 81       	ldd	r24, Y+2	; 0x02
    3996:	99 27       	eor	r25, r25
    3998:	87 fd       	sbrc	r24, 7
    399a:	90 95       	com	r25
    399c:	98 2f       	mov	r25, r24
    399e:	88 27       	eor	r24, r24
    39a0:	29 81       	ldd	r18, Y+1	; 0x01
    39a2:	33 27       	eor	r19, r19
    39a4:	27 fd       	sbrc	r18, 7
    39a6:	30 95       	com	r19
    39a8:	82 2b       	or	r24, r18
    39aa:	93 2b       	or	r25, r19
    39ac:	90 93 0d 04 	sts	0x040D, r25
    39b0:	80 93 0c 04 	sts	0x040C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    39b4:	8c 81       	ldd	r24, Y+4	; 0x04
    39b6:	99 27       	eor	r25, r25
    39b8:	87 fd       	sbrc	r24, 7
    39ba:	90 95       	com	r25
    39bc:	98 2f       	mov	r25, r24
    39be:	88 27       	eor	r24, r24
    39c0:	2b 81       	ldd	r18, Y+3	; 0x03
    39c2:	33 27       	eor	r19, r19
    39c4:	27 fd       	sbrc	r18, 7
    39c6:	30 95       	com	r19
    39c8:	82 2b       	or	r24, r18
    39ca:	93 2b       	or	r25, r19
    39cc:	90 93 0f 04 	sts	0x040F, r25
    39d0:	80 93 0e 04 	sts	0x040E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    39d4:	8e 81       	ldd	r24, Y+6	; 0x06
    39d6:	99 27       	eor	r25, r25
    39d8:	87 fd       	sbrc	r24, 7
    39da:	90 95       	com	r25
    39dc:	98 2f       	mov	r25, r24
    39de:	88 27       	eor	r24, r24
    39e0:	2d 81       	ldd	r18, Y+5	; 0x05
    39e2:	33 27       	eor	r19, r19
    39e4:	27 fd       	sbrc	r18, 7
    39e6:	30 95       	com	r19
    39e8:	82 2b       	or	r24, r18
    39ea:	93 2b       	or	r25, r19
    39ec:	90 93 11 04 	sts	0x0411, r25
    39f0:	80 93 10 04 	sts	0x0410, r24
    39f4:	a2 cf       	rjmp	.-188    	; 0x393a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	99 27       	eor	r25, r25
    39fa:	87 fd       	sbrc	r24, 7
    39fc:	90 95       	com	r25
    39fe:	98 2f       	mov	r25, r24
    3a00:	88 27       	eor	r24, r24
    3a02:	29 81       	ldd	r18, Y+1	; 0x01
    3a04:	33 27       	eor	r19, r19
    3a06:	27 fd       	sbrc	r18, 7
    3a08:	30 95       	com	r19
    3a0a:	82 2b       	or	r24, r18
    3a0c:	93 2b       	or	r25, r19
    3a0e:	20 91 12 04 	lds	r18, 0x0412
    3a12:	30 91 13 04 	lds	r19, 0x0413
    3a16:	82 1b       	sub	r24, r18
    3a18:	93 0b       	sbc	r25, r19
    3a1a:	90 93 0d 04 	sts	0x040D, r25
    3a1e:	80 93 0c 04 	sts	0x040C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3a22:	8c 81       	ldd	r24, Y+4	; 0x04
    3a24:	99 27       	eor	r25, r25
    3a26:	87 fd       	sbrc	r24, 7
    3a28:	90 95       	com	r25
    3a2a:	98 2f       	mov	r25, r24
    3a2c:	88 27       	eor	r24, r24
    3a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a30:	33 27       	eor	r19, r19
    3a32:	27 fd       	sbrc	r18, 7
    3a34:	30 95       	com	r19
    3a36:	82 2b       	or	r24, r18
    3a38:	93 2b       	or	r25, r19
    3a3a:	20 91 14 04 	lds	r18, 0x0414
    3a3e:	30 91 15 04 	lds	r19, 0x0415
    3a42:	82 1b       	sub	r24, r18
    3a44:	93 0b       	sbc	r25, r19
    3a46:	90 93 0f 04 	sts	0x040F, r25
    3a4a:	80 93 0e 04 	sts	0x040E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a50:	99 27       	eor	r25, r25
    3a52:	87 fd       	sbrc	r24, 7
    3a54:	90 95       	com	r25
    3a56:	98 2f       	mov	r25, r24
    3a58:	88 27       	eor	r24, r24
    3a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a5c:	33 27       	eor	r19, r19
    3a5e:	27 fd       	sbrc	r18, 7
    3a60:	30 95       	com	r19
    3a62:	82 2b       	or	r24, r18
    3a64:	93 2b       	or	r25, r19
    3a66:	20 91 16 04 	lds	r18, 0x0416
    3a6a:	30 91 17 04 	lds	r19, 0x0417
    3a6e:	82 1b       	sub	r24, r18
    3a70:	93 0b       	sbc	r25, r19
    3a72:	90 93 11 04 	sts	0x0411, r25
    3a76:	80 93 10 04 	sts	0x0410, r24
    3a7a:	5f cf       	rjmp	.-322    	; 0x393a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    3a7c:	80 91 13 02 	lds	r24, 0x0213
    3a80:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3a84:	82 e3       	ldi	r24, 0x32	; 50
    3a86:	67 cf       	rjmp	.-306    	; 0x3956 <readAccelXYZ+0x4e>

00003a88 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    3a8c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    3a90:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    3a94:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <updateRedLed>
	updateGreenLed(pwm_green);
    3a9e:	80 91 0d 02 	lds	r24, 0x020D
    3aa2:	0e 94 2f 1b 	call	0x365e	; 0x365e <updateGreenLed>
	updateBlueLed(pwm_blue);
    3aa6:	80 91 0e 02 	lds	r24, 0x020E
    3aaa:	0e 94 43 1b 	call	0x3686	; 0x3686 <updateBlueLed>

	calibrationCycle = 0;
    3aae:	10 92 27 04 	sts	0x0427, r1
    3ab2:	10 92 26 04 	sts	0x0426, r1
	startCalibration = 1;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	80 93 58 04 	sts	0x0458, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3abc:	c1 e0       	ldi	r28, 0x01	; 1
    3abe:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3ac0:	0e 94 84 1c 	call	0x3908	; 0x3908 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    3ac4:	20 91 26 04 	lds	r18, 0x0426
    3ac8:	30 91 27 04 	lds	r19, 0x0427
    3acc:	21 31       	cpi	r18, 0x11	; 17
    3ace:	31 05       	cpc	r19, r1
    3ad0:	0c f4       	brge	.+2      	; 0x3ad4 <calibrateSensors+0x4c>
    3ad2:	35 c1       	rjmp	.+618    	; 0x3d3e <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    3ad4:	80 91 8f 03 	lds	r24, 0x038F
    3ad8:	90 91 90 03 	lds	r25, 0x0390
    3adc:	a0 91 91 03 	lds	r26, 0x0391
    3ae0:	b0 91 92 03 	lds	r27, 0x0392
    3ae4:	54 e0       	ldi	r21, 0x04	; 4
    3ae6:	b6 95       	lsr	r27
    3ae8:	a7 95       	ror	r26
    3aea:	97 95       	ror	r25
    3aec:	87 95       	ror	r24
    3aee:	5a 95       	dec	r21
    3af0:	d1 f7       	brne	.-12     	; 0x3ae6 <calibrateSensors+0x5e>
    3af2:	90 93 78 03 	sts	0x0378, r25
    3af6:	80 93 77 03 	sts	0x0377, r24
    3afa:	80 91 93 03 	lds	r24, 0x0393
    3afe:	90 91 94 03 	lds	r25, 0x0394
    3b02:	a0 91 95 03 	lds	r26, 0x0395
    3b06:	b0 91 96 03 	lds	r27, 0x0396
    3b0a:	44 e0       	ldi	r20, 0x04	; 4
    3b0c:	b6 95       	lsr	r27
    3b0e:	a7 95       	ror	r26
    3b10:	97 95       	ror	r25
    3b12:	87 95       	ror	r24
    3b14:	4a 95       	dec	r20
    3b16:	d1 f7       	brne	.-12     	; 0x3b0c <calibrateSensors+0x84>
    3b18:	90 93 7a 03 	sts	0x037A, r25
    3b1c:	80 93 79 03 	sts	0x0379, r24
    3b20:	80 91 97 03 	lds	r24, 0x0397
    3b24:	90 91 98 03 	lds	r25, 0x0398
    3b28:	a0 91 99 03 	lds	r26, 0x0399
    3b2c:	b0 91 9a 03 	lds	r27, 0x039A
    3b30:	34 e0       	ldi	r19, 0x04	; 4
    3b32:	b6 95       	lsr	r27
    3b34:	a7 95       	ror	r26
    3b36:	97 95       	ror	r25
    3b38:	87 95       	ror	r24
    3b3a:	3a 95       	dec	r19
    3b3c:	d1 f7       	brne	.-12     	; 0x3b32 <calibrateSensors+0xaa>
    3b3e:	90 93 7c 03 	sts	0x037C, r25
    3b42:	80 93 7b 03 	sts	0x037B, r24
    3b46:	80 91 9b 03 	lds	r24, 0x039B
    3b4a:	90 91 9c 03 	lds	r25, 0x039C
    3b4e:	a0 91 9d 03 	lds	r26, 0x039D
    3b52:	b0 91 9e 03 	lds	r27, 0x039E
    3b56:	24 e0       	ldi	r18, 0x04	; 4
    3b58:	b6 95       	lsr	r27
    3b5a:	a7 95       	ror	r26
    3b5c:	97 95       	ror	r25
    3b5e:	87 95       	ror	r24
    3b60:	2a 95       	dec	r18
    3b62:	d1 f7       	brne	.-12     	; 0x3b58 <calibrateSensors+0xd0>
    3b64:	90 93 7e 03 	sts	0x037E, r25
    3b68:	80 93 7d 03 	sts	0x037D, r24
    3b6c:	80 91 9f 03 	lds	r24, 0x039F
    3b70:	90 91 a0 03 	lds	r25, 0x03A0
    3b74:	a0 91 a1 03 	lds	r26, 0x03A1
    3b78:	b0 91 a2 03 	lds	r27, 0x03A2
    3b7c:	f4 e0       	ldi	r31, 0x04	; 4
    3b7e:	b6 95       	lsr	r27
    3b80:	a7 95       	ror	r26
    3b82:	97 95       	ror	r25
    3b84:	87 95       	ror	r24
    3b86:	fa 95       	dec	r31
    3b88:	d1 f7       	brne	.-12     	; 0x3b7e <calibrateSensors+0xf6>
    3b8a:	90 93 80 03 	sts	0x0380, r25
    3b8e:	80 93 7f 03 	sts	0x037F, r24
    3b92:	80 91 a3 03 	lds	r24, 0x03A3
    3b96:	90 91 a4 03 	lds	r25, 0x03A4
    3b9a:	a0 91 a5 03 	lds	r26, 0x03A5
    3b9e:	b0 91 a6 03 	lds	r27, 0x03A6
    3ba2:	e4 e0       	ldi	r30, 0x04	; 4
    3ba4:	b6 95       	lsr	r27
    3ba6:	a7 95       	ror	r26
    3ba8:	97 95       	ror	r25
    3baa:	87 95       	ror	r24
    3bac:	ea 95       	dec	r30
    3bae:	d1 f7       	brne	.-12     	; 0x3ba4 <calibrateSensors+0x11c>
    3bb0:	90 93 82 03 	sts	0x0382, r25
    3bb4:	80 93 81 03 	sts	0x0381, r24
    3bb8:	80 91 a7 03 	lds	r24, 0x03A7
    3bbc:	90 91 a8 03 	lds	r25, 0x03A8
    3bc0:	a0 91 a9 03 	lds	r26, 0x03A9
    3bc4:	b0 91 aa 03 	lds	r27, 0x03AA
    3bc8:	74 e0       	ldi	r23, 0x04	; 4
    3bca:	b6 95       	lsr	r27
    3bcc:	a7 95       	ror	r26
    3bce:	97 95       	ror	r25
    3bd0:	87 95       	ror	r24
    3bd2:	7a 95       	dec	r23
    3bd4:	d1 f7       	brne	.-12     	; 0x3bca <calibrateSensors+0x142>
    3bd6:	90 93 84 03 	sts	0x0384, r25
    3bda:	80 93 83 03 	sts	0x0383, r24
    3bde:	80 91 ab 03 	lds	r24, 0x03AB
    3be2:	90 91 ac 03 	lds	r25, 0x03AC
    3be6:	a0 91 ad 03 	lds	r26, 0x03AD
    3bea:	b0 91 ae 03 	lds	r27, 0x03AE
    3bee:	64 e0       	ldi	r22, 0x04	; 4
    3bf0:	b6 95       	lsr	r27
    3bf2:	a7 95       	ror	r26
    3bf4:	97 95       	ror	r25
    3bf6:	87 95       	ror	r24
    3bf8:	6a 95       	dec	r22
    3bfa:	d1 f7       	brne	.-12     	; 0x3bf0 <calibrateSensors+0x168>
    3bfc:	90 93 86 03 	sts	0x0386, r25
    3c00:	80 93 85 03 	sts	0x0385, r24
    3c04:	80 91 b3 03 	lds	r24, 0x03B3
    3c08:	90 91 b4 03 	lds	r25, 0x03B4
    3c0c:	a0 91 b5 03 	lds	r26, 0x03B5
    3c10:	b0 91 b6 03 	lds	r27, 0x03B6
    3c14:	54 e0       	ldi	r21, 0x04	; 4
    3c16:	b6 95       	lsr	r27
    3c18:	a7 95       	ror	r26
    3c1a:	97 95       	ror	r25
    3c1c:	87 95       	ror	r24
    3c1e:	5a 95       	dec	r21
    3c20:	d1 f7       	brne	.-12     	; 0x3c16 <calibrateSensors+0x18e>
    3c22:	9c 01       	movw	r18, r24
    3c24:	80 91 b7 03 	lds	r24, 0x03B7
    3c28:	90 91 b8 03 	lds	r25, 0x03B8
    3c2c:	a0 91 b9 03 	lds	r26, 0x03B9
    3c30:	b0 91 ba 03 	lds	r27, 0x03BA
    3c34:	44 e0       	ldi	r20, 0x04	; 4
    3c36:	b6 95       	lsr	r27
    3c38:	a7 95       	ror	r26
    3c3a:	97 95       	ror	r25
    3c3c:	87 95       	ror	r24
    3c3e:	4a 95       	dec	r20
    3c40:	d1 f7       	brne	.-12     	; 0x3c36 <calibrateSensors+0x1ae>
    3c42:	bc 01       	movw	r22, r24
    3c44:	80 91 bb 03 	lds	r24, 0x03BB
    3c48:	90 91 bc 03 	lds	r25, 0x03BC
    3c4c:	a0 91 bd 03 	lds	r26, 0x03BD
    3c50:	b0 91 be 03 	lds	r27, 0x03BE
    3c54:	f4 e0       	ldi	r31, 0x04	; 4
    3c56:	b6 95       	lsr	r27
    3c58:	a7 95       	ror	r26
    3c5a:	97 95       	ror	r25
    3c5c:	87 95       	ror	r24
    3c5e:	fa 95       	dec	r31
    3c60:	d1 f7       	brne	.-12     	; 0x3c56 <calibrateSensors+0x1ce>
    3c62:	ac 01       	movw	r20, r24
    3c64:	80 91 af 03 	lds	r24, 0x03AF
    3c68:	90 91 b0 03 	lds	r25, 0x03B0
    3c6c:	a0 91 b1 03 	lds	r26, 0x03B1
    3c70:	b0 91 b2 03 	lds	r27, 0x03B2
    3c74:	e4 e0       	ldi	r30, 0x04	; 4
    3c76:	b6 95       	lsr	r27
    3c78:	a7 95       	ror	r26
    3c7a:	97 95       	ror	r25
    3c7c:	87 95       	ror	r24
    3c7e:	ea 95       	dec	r30
    3c80:	d1 f7       	brne	.-12     	; 0x3c76 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    3c82:	80 50       	subi	r24, 0x00	; 0
    3c84:	92 40       	sbci	r25, 0x02	; 2
    3c86:	90 93 88 03 	sts	0x0388, r25
    3c8a:	80 93 87 03 	sts	0x0387, r24
    3c8e:	20 50       	subi	r18, 0x00	; 0
    3c90:	32 40       	sbci	r19, 0x02	; 2
    3c92:	30 93 8a 03 	sts	0x038A, r19
    3c96:	20 93 89 03 	sts	0x0389, r18
    3c9a:	60 50       	subi	r22, 0x00	; 0
    3c9c:	72 40       	sbci	r23, 0x02	; 2
    3c9e:	70 93 8c 03 	sts	0x038C, r23
    3ca2:	60 93 8b 03 	sts	0x038B, r22
    3ca6:	40 50       	subi	r20, 0x00	; 0
    3ca8:	52 40       	sbci	r21, 0x02	; 2
    3caa:	50 93 8e 03 	sts	0x038E, r21
    3cae:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    3cb2:	80 91 18 04 	lds	r24, 0x0418
    3cb6:	90 91 19 04 	lds	r25, 0x0419
    3cba:	95 95       	asr	r25
    3cbc:	87 95       	ror	r24
    3cbe:	95 95       	asr	r25
    3cc0:	87 95       	ror	r24
    3cc2:	95 95       	asr	r25
    3cc4:	87 95       	ror	r24
    3cc6:	95 95       	asr	r25
    3cc8:	87 95       	ror	r24
    3cca:	90 93 13 04 	sts	0x0413, r25
    3cce:	80 93 12 04 	sts	0x0412, r24
			accOffsetY = accOffsetYSum>>4;
    3cd2:	80 91 1a 04 	lds	r24, 0x041A
    3cd6:	90 91 1b 04 	lds	r25, 0x041B
    3cda:	95 95       	asr	r25
    3cdc:	87 95       	ror	r24
    3cde:	95 95       	asr	r25
    3ce0:	87 95       	ror	r24
    3ce2:	95 95       	asr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	95 95       	asr	r25
    3ce8:	87 95       	ror	r24
    3cea:	90 93 15 04 	sts	0x0415, r25
    3cee:	80 93 14 04 	sts	0x0414, r24
			accOffsetZ = accOffsetZSum>>4;
    3cf2:	80 91 1c 04 	lds	r24, 0x041C
    3cf6:	90 91 1d 04 	lds	r25, 0x041D
    3cfa:	95 95       	asr	r25
    3cfc:	87 95       	ror	r24
    3cfe:	95 95       	asr	r25
    3d00:	87 95       	ror	r24
    3d02:	95 95       	asr	r25
    3d04:	87 95       	ror	r24
    3d06:	95 95       	asr	r25
    3d08:	87 95       	ror	r24
    3d0a:	90 93 17 04 	sts	0x0417, r25
    3d0e:	80 93 16 04 	sts	0x0416, r24

			startCalibration = 0;
    3d12:	10 92 58 04 	sts	0x0458, r1

		}

	}

	pwm_red = 255;
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
    3d18:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3d1c:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3d20:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3d24:	0e 94 1b 1b 	call	0x3636	; 0x3636 <updateRedLed>
	updateGreenLed(pwm_green);
    3d28:	80 91 0d 02 	lds	r24, 0x020D
    3d2c:	0e 94 2f 1b 	call	0x365e	; 0x365e <updateGreenLed>
	updateBlueLed(pwm_blue);
    3d30:	80 91 0e 02 	lds	r24, 0x020E
    3d34:	0e 94 43 1b 	call	0x3686	; 0x3686 <updateBlueLed>

}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3d3e:	80 91 c6 03 	lds	r24, 0x03C6
    3d42:	88 23       	and	r24, r24
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <calibrateSensors+0x2c0>
    3d46:	86 c1       	rjmp	.+780    	; 0x4054 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3d48:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    3d4c:	21 15       	cp	r18, r1
    3d4e:	31 05       	cpc	r19, r1
    3d50:	09 f4       	brne	.+2      	; 0x3d54 <calibrateSensors+0x2cc>
    3d52:	86 c1       	rjmp	.+780    	; 0x4060 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3d54:	80 91 5f 03 	lds	r24, 0x035F
    3d58:	90 91 60 03 	lds	r25, 0x0360
    3d5c:	aa 27       	eor	r26, r26
    3d5e:	97 fd       	sbrc	r25, 7
    3d60:	a0 95       	com	r26
    3d62:	ba 2f       	mov	r27, r26
    3d64:	40 91 8f 03 	lds	r20, 0x038F
    3d68:	50 91 90 03 	lds	r21, 0x0390
    3d6c:	60 91 91 03 	lds	r22, 0x0391
    3d70:	70 91 92 03 	lds	r23, 0x0392
    3d74:	84 0f       	add	r24, r20
    3d76:	95 1f       	adc	r25, r21
    3d78:	a6 1f       	adc	r26, r22
    3d7a:	b7 1f       	adc	r27, r23
    3d7c:	80 93 8f 03 	sts	0x038F, r24
    3d80:	90 93 90 03 	sts	0x0390, r25
    3d84:	a0 93 91 03 	sts	0x0391, r26
    3d88:	b0 93 92 03 	sts	0x0392, r27
    3d8c:	80 91 61 03 	lds	r24, 0x0361
    3d90:	90 91 62 03 	lds	r25, 0x0362
    3d94:	aa 27       	eor	r26, r26
    3d96:	97 fd       	sbrc	r25, 7
    3d98:	a0 95       	com	r26
    3d9a:	ba 2f       	mov	r27, r26
    3d9c:	40 91 93 03 	lds	r20, 0x0393
    3da0:	50 91 94 03 	lds	r21, 0x0394
    3da4:	60 91 95 03 	lds	r22, 0x0395
    3da8:	70 91 96 03 	lds	r23, 0x0396
    3dac:	84 0f       	add	r24, r20
    3dae:	95 1f       	adc	r25, r21
    3db0:	a6 1f       	adc	r26, r22
    3db2:	b7 1f       	adc	r27, r23
    3db4:	80 93 93 03 	sts	0x0393, r24
    3db8:	90 93 94 03 	sts	0x0394, r25
    3dbc:	a0 93 95 03 	sts	0x0395, r26
    3dc0:	b0 93 96 03 	sts	0x0396, r27
    3dc4:	80 91 63 03 	lds	r24, 0x0363
    3dc8:	90 91 64 03 	lds	r25, 0x0364
    3dcc:	aa 27       	eor	r26, r26
    3dce:	97 fd       	sbrc	r25, 7
    3dd0:	a0 95       	com	r26
    3dd2:	ba 2f       	mov	r27, r26
    3dd4:	40 91 97 03 	lds	r20, 0x0397
    3dd8:	50 91 98 03 	lds	r21, 0x0398
    3ddc:	60 91 99 03 	lds	r22, 0x0399
    3de0:	70 91 9a 03 	lds	r23, 0x039A
    3de4:	84 0f       	add	r24, r20
    3de6:	95 1f       	adc	r25, r21
    3de8:	a6 1f       	adc	r26, r22
    3dea:	b7 1f       	adc	r27, r23
    3dec:	80 93 97 03 	sts	0x0397, r24
    3df0:	90 93 98 03 	sts	0x0398, r25
    3df4:	a0 93 99 03 	sts	0x0399, r26
    3df8:	b0 93 9a 03 	sts	0x039A, r27
    3dfc:	80 91 65 03 	lds	r24, 0x0365
    3e00:	90 91 66 03 	lds	r25, 0x0366
    3e04:	aa 27       	eor	r26, r26
    3e06:	97 fd       	sbrc	r25, 7
    3e08:	a0 95       	com	r26
    3e0a:	ba 2f       	mov	r27, r26
    3e0c:	40 91 9b 03 	lds	r20, 0x039B
    3e10:	50 91 9c 03 	lds	r21, 0x039C
    3e14:	60 91 9d 03 	lds	r22, 0x039D
    3e18:	70 91 9e 03 	lds	r23, 0x039E
    3e1c:	84 0f       	add	r24, r20
    3e1e:	95 1f       	adc	r25, r21
    3e20:	a6 1f       	adc	r26, r22
    3e22:	b7 1f       	adc	r27, r23
    3e24:	80 93 9b 03 	sts	0x039B, r24
    3e28:	90 93 9c 03 	sts	0x039C, r25
    3e2c:	a0 93 9d 03 	sts	0x039D, r26
    3e30:	b0 93 9e 03 	sts	0x039E, r27
    3e34:	80 91 67 03 	lds	r24, 0x0367
    3e38:	90 91 68 03 	lds	r25, 0x0368
    3e3c:	aa 27       	eor	r26, r26
    3e3e:	97 fd       	sbrc	r25, 7
    3e40:	a0 95       	com	r26
    3e42:	ba 2f       	mov	r27, r26
    3e44:	40 91 9f 03 	lds	r20, 0x039F
    3e48:	50 91 a0 03 	lds	r21, 0x03A0
    3e4c:	60 91 a1 03 	lds	r22, 0x03A1
    3e50:	70 91 a2 03 	lds	r23, 0x03A2
    3e54:	84 0f       	add	r24, r20
    3e56:	95 1f       	adc	r25, r21
    3e58:	a6 1f       	adc	r26, r22
    3e5a:	b7 1f       	adc	r27, r23
    3e5c:	80 93 9f 03 	sts	0x039F, r24
    3e60:	90 93 a0 03 	sts	0x03A0, r25
    3e64:	a0 93 a1 03 	sts	0x03A1, r26
    3e68:	b0 93 a2 03 	sts	0x03A2, r27
    3e6c:	80 91 69 03 	lds	r24, 0x0369
    3e70:	90 91 6a 03 	lds	r25, 0x036A
    3e74:	aa 27       	eor	r26, r26
    3e76:	97 fd       	sbrc	r25, 7
    3e78:	a0 95       	com	r26
    3e7a:	ba 2f       	mov	r27, r26
    3e7c:	40 91 a3 03 	lds	r20, 0x03A3
    3e80:	50 91 a4 03 	lds	r21, 0x03A4
    3e84:	60 91 a5 03 	lds	r22, 0x03A5
    3e88:	70 91 a6 03 	lds	r23, 0x03A6
    3e8c:	84 0f       	add	r24, r20
    3e8e:	95 1f       	adc	r25, r21
    3e90:	a6 1f       	adc	r26, r22
    3e92:	b7 1f       	adc	r27, r23
    3e94:	80 93 a3 03 	sts	0x03A3, r24
    3e98:	90 93 a4 03 	sts	0x03A4, r25
    3e9c:	a0 93 a5 03 	sts	0x03A5, r26
    3ea0:	b0 93 a6 03 	sts	0x03A6, r27
    3ea4:	80 91 6b 03 	lds	r24, 0x036B
    3ea8:	90 91 6c 03 	lds	r25, 0x036C
    3eac:	aa 27       	eor	r26, r26
    3eae:	97 fd       	sbrc	r25, 7
    3eb0:	a0 95       	com	r26
    3eb2:	ba 2f       	mov	r27, r26
    3eb4:	40 91 a7 03 	lds	r20, 0x03A7
    3eb8:	50 91 a8 03 	lds	r21, 0x03A8
    3ebc:	60 91 a9 03 	lds	r22, 0x03A9
    3ec0:	70 91 aa 03 	lds	r23, 0x03AA
    3ec4:	84 0f       	add	r24, r20
    3ec6:	95 1f       	adc	r25, r21
    3ec8:	a6 1f       	adc	r26, r22
    3eca:	b7 1f       	adc	r27, r23
    3ecc:	80 93 a7 03 	sts	0x03A7, r24
    3ed0:	90 93 a8 03 	sts	0x03A8, r25
    3ed4:	a0 93 a9 03 	sts	0x03A9, r26
    3ed8:	b0 93 aa 03 	sts	0x03AA, r27
    3edc:	80 91 6d 03 	lds	r24, 0x036D
    3ee0:	90 91 6e 03 	lds	r25, 0x036E
    3ee4:	aa 27       	eor	r26, r26
    3ee6:	97 fd       	sbrc	r25, 7
    3ee8:	a0 95       	com	r26
    3eea:	ba 2f       	mov	r27, r26
    3eec:	40 91 ab 03 	lds	r20, 0x03AB
    3ef0:	50 91 ac 03 	lds	r21, 0x03AC
    3ef4:	60 91 ad 03 	lds	r22, 0x03AD
    3ef8:	70 91 ae 03 	lds	r23, 0x03AE
    3efc:	84 0f       	add	r24, r20
    3efe:	95 1f       	adc	r25, r21
    3f00:	a6 1f       	adc	r26, r22
    3f02:	b7 1f       	adc	r27, r23
    3f04:	80 93 ab 03 	sts	0x03AB, r24
    3f08:	90 93 ac 03 	sts	0x03AC, r25
    3f0c:	a0 93 ad 03 	sts	0x03AD, r26
    3f10:	b0 93 ae 03 	sts	0x03AE, r27
    3f14:	80 91 6f 03 	lds	r24, 0x036F
    3f18:	90 91 70 03 	lds	r25, 0x0370
    3f1c:	aa 27       	eor	r26, r26
    3f1e:	97 fd       	sbrc	r25, 7
    3f20:	a0 95       	com	r26
    3f22:	ba 2f       	mov	r27, r26
    3f24:	40 91 af 03 	lds	r20, 0x03AF
    3f28:	50 91 b0 03 	lds	r21, 0x03B0
    3f2c:	60 91 b1 03 	lds	r22, 0x03B1
    3f30:	70 91 b2 03 	lds	r23, 0x03B2
    3f34:	84 0f       	add	r24, r20
    3f36:	95 1f       	adc	r25, r21
    3f38:	a6 1f       	adc	r26, r22
    3f3a:	b7 1f       	adc	r27, r23
    3f3c:	80 93 af 03 	sts	0x03AF, r24
    3f40:	90 93 b0 03 	sts	0x03B0, r25
    3f44:	a0 93 b1 03 	sts	0x03B1, r26
    3f48:	b0 93 b2 03 	sts	0x03B2, r27
    3f4c:	80 91 71 03 	lds	r24, 0x0371
    3f50:	90 91 72 03 	lds	r25, 0x0372
    3f54:	aa 27       	eor	r26, r26
    3f56:	97 fd       	sbrc	r25, 7
    3f58:	a0 95       	com	r26
    3f5a:	ba 2f       	mov	r27, r26
    3f5c:	40 91 b3 03 	lds	r20, 0x03B3
    3f60:	50 91 b4 03 	lds	r21, 0x03B4
    3f64:	60 91 b5 03 	lds	r22, 0x03B5
    3f68:	70 91 b6 03 	lds	r23, 0x03B6
    3f6c:	84 0f       	add	r24, r20
    3f6e:	95 1f       	adc	r25, r21
    3f70:	a6 1f       	adc	r26, r22
    3f72:	b7 1f       	adc	r27, r23
    3f74:	80 93 b3 03 	sts	0x03B3, r24
    3f78:	90 93 b4 03 	sts	0x03B4, r25
    3f7c:	a0 93 b5 03 	sts	0x03B5, r26
    3f80:	b0 93 b6 03 	sts	0x03B6, r27
    3f84:	80 91 73 03 	lds	r24, 0x0373
    3f88:	90 91 74 03 	lds	r25, 0x0374
    3f8c:	aa 27       	eor	r26, r26
    3f8e:	97 fd       	sbrc	r25, 7
    3f90:	a0 95       	com	r26
    3f92:	ba 2f       	mov	r27, r26
    3f94:	40 91 b7 03 	lds	r20, 0x03B7
    3f98:	50 91 b8 03 	lds	r21, 0x03B8
    3f9c:	60 91 b9 03 	lds	r22, 0x03B9
    3fa0:	70 91 ba 03 	lds	r23, 0x03BA
    3fa4:	84 0f       	add	r24, r20
    3fa6:	95 1f       	adc	r25, r21
    3fa8:	a6 1f       	adc	r26, r22
    3faa:	b7 1f       	adc	r27, r23
    3fac:	80 93 b7 03 	sts	0x03B7, r24
    3fb0:	90 93 b8 03 	sts	0x03B8, r25
    3fb4:	a0 93 b9 03 	sts	0x03B9, r26
    3fb8:	b0 93 ba 03 	sts	0x03BA, r27
    3fbc:	80 91 75 03 	lds	r24, 0x0375
    3fc0:	90 91 76 03 	lds	r25, 0x0376
    3fc4:	aa 27       	eor	r26, r26
    3fc6:	97 fd       	sbrc	r25, 7
    3fc8:	a0 95       	com	r26
    3fca:	ba 2f       	mov	r27, r26
    3fcc:	40 91 bb 03 	lds	r20, 0x03BB
    3fd0:	50 91 bc 03 	lds	r21, 0x03BC
    3fd4:	60 91 bd 03 	lds	r22, 0x03BD
    3fd8:	70 91 be 03 	lds	r23, 0x03BE
    3fdc:	84 0f       	add	r24, r20
    3fde:	95 1f       	adc	r25, r21
    3fe0:	a6 1f       	adc	r26, r22
    3fe2:	b7 1f       	adc	r27, r23
    3fe4:	80 93 bb 03 	sts	0x03BB, r24
    3fe8:	90 93 bc 03 	sts	0x03BC, r25
    3fec:	a0 93 bd 03 	sts	0x03BD, r26
    3ff0:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    3ff4:	80 91 18 04 	lds	r24, 0x0418
    3ff8:	90 91 19 04 	lds	r25, 0x0419
    3ffc:	40 91 0c 04 	lds	r20, 0x040C
    4000:	50 91 0d 04 	lds	r21, 0x040D
    4004:	84 0f       	add	r24, r20
    4006:	95 1f       	adc	r25, r21
    4008:	90 93 19 04 	sts	0x0419, r25
    400c:	80 93 18 04 	sts	0x0418, r24
				accOffsetYSum += accY;
    4010:	80 91 1a 04 	lds	r24, 0x041A
    4014:	90 91 1b 04 	lds	r25, 0x041B
    4018:	40 91 0e 04 	lds	r20, 0x040E
    401c:	50 91 0f 04 	lds	r21, 0x040F
    4020:	84 0f       	add	r24, r20
    4022:	95 1f       	adc	r25, r21
    4024:	90 93 1b 04 	sts	0x041B, r25
    4028:	80 93 1a 04 	sts	0x041A, r24
				accOffsetZSum += accZ;
    402c:	80 91 1c 04 	lds	r24, 0x041C
    4030:	90 91 1d 04 	lds	r25, 0x041D
    4034:	40 91 10 04 	lds	r20, 0x0410
    4038:	50 91 11 04 	lds	r21, 0x0411
    403c:	84 0f       	add	r24, r20
    403e:	95 1f       	adc	r25, r21
    4040:	90 93 1d 04 	sts	0x041D, r25
    4044:	80 93 1c 04 	sts	0x041C, r24

				calibrationCycle++;
    4048:	2f 5f       	subi	r18, 0xFF	; 255
    404a:	3f 4f       	sbci	r19, 0xFF	; 255
    404c:	30 93 27 04 	sts	0x0427, r19
    4050:	20 93 26 04 	sts	0x0426, r18
    4054:	80 91 58 04 	lds	r24, 0x0458
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    4058:	88 23       	and	r24, r24
    405a:	09 f0       	breq	.+2      	; 0x405e <calibrateSensors+0x5d6>
    405c:	31 cd       	rjmp	.-1438   	; 0x3ac0 <calibrateSensors+0x38>
    405e:	5b ce       	rjmp	.-842    	; 0x3d16 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4060:	10 92 8f 03 	sts	0x038F, r1
    4064:	10 92 90 03 	sts	0x0390, r1
    4068:	10 92 91 03 	sts	0x0391, r1
    406c:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4070:	10 92 78 03 	sts	0x0378, r1
    4074:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4078:	10 92 93 03 	sts	0x0393, r1
    407c:	10 92 94 03 	sts	0x0394, r1
    4080:	10 92 95 03 	sts	0x0395, r1
    4084:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4088:	10 92 7a 03 	sts	0x037A, r1
    408c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4090:	10 92 97 03 	sts	0x0397, r1
    4094:	10 92 98 03 	sts	0x0398, r1
    4098:	10 92 99 03 	sts	0x0399, r1
    409c:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    40a0:	10 92 7c 03 	sts	0x037C, r1
    40a4:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40a8:	10 92 9b 03 	sts	0x039B, r1
    40ac:	10 92 9c 03 	sts	0x039C, r1
    40b0:	10 92 9d 03 	sts	0x039D, r1
    40b4:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    40b8:	10 92 7e 03 	sts	0x037E, r1
    40bc:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40c0:	10 92 9f 03 	sts	0x039F, r1
    40c4:	10 92 a0 03 	sts	0x03A0, r1
    40c8:	10 92 a1 03 	sts	0x03A1, r1
    40cc:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    40d0:	10 92 80 03 	sts	0x0380, r1
    40d4:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40d8:	10 92 a3 03 	sts	0x03A3, r1
    40dc:	10 92 a4 03 	sts	0x03A4, r1
    40e0:	10 92 a5 03 	sts	0x03A5, r1
    40e4:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    40e8:	10 92 82 03 	sts	0x0382, r1
    40ec:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    40f0:	10 92 a7 03 	sts	0x03A7, r1
    40f4:	10 92 a8 03 	sts	0x03A8, r1
    40f8:	10 92 a9 03 	sts	0x03A9, r1
    40fc:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    4100:	10 92 84 03 	sts	0x0384, r1
    4104:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4108:	10 92 ab 03 	sts	0x03AB, r1
    410c:	10 92 ac 03 	sts	0x03AC, r1
    4110:	10 92 ad 03 	sts	0x03AD, r1
    4114:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    4118:	10 92 86 03 	sts	0x0386, r1
    411c:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4120:	10 92 af 03 	sts	0x03AF, r1
    4124:	10 92 b0 03 	sts	0x03B0, r1
    4128:	10 92 b1 03 	sts	0x03B1, r1
    412c:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4130:	10 92 88 03 	sts	0x0388, r1
    4134:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4138:	10 92 b3 03 	sts	0x03B3, r1
    413c:	10 92 b4 03 	sts	0x03B4, r1
    4140:	10 92 b5 03 	sts	0x03B5, r1
    4144:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    4148:	10 92 8a 03 	sts	0x038A, r1
    414c:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4150:	10 92 b7 03 	sts	0x03B7, r1
    4154:	10 92 b8 03 	sts	0x03B8, r1
    4158:	10 92 b9 03 	sts	0x03B9, r1
    415c:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4160:	10 92 8c 03 	sts	0x038C, r1
    4164:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4168:	10 92 bb 03 	sts	0x03BB, r1
    416c:	10 92 bc 03 	sts	0x03BC, r1
    4170:	10 92 bd 03 	sts	0x03BD, r1
    4174:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4178:	10 92 8e 03 	sts	0x038E, r1
    417c:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4180:	10 92 19 04 	sts	0x0419, r1
    4184:	10 92 18 04 	sts	0x0418, r1
					accOffsetYSum = 0;
    4188:	10 92 1b 04 	sts	0x041B, r1
    418c:	10 92 1a 04 	sts	0x041A, r1
					accOffsetZSum = 0;
    4190:	10 92 1d 04 	sts	0x041D, r1
    4194:	10 92 1c 04 	sts	0x041C, r1

					calibrationCycle++;
    4198:	d0 93 27 04 	sts	0x0427, r29
    419c:	c0 93 26 04 	sts	0x0426, r28
    41a0:	80 91 58 04 	lds	r24, 0x0458

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    41a4:	59 cf       	rjmp	.-334    	; 0x4058 <calibrateSensors+0x5d0>

000041a6 <computeAngle>:

	}

}

void computeAngle() {
    41a6:	ef 92       	push	r14
    41a8:	ff 92       	push	r15
    41aa:	0f 93       	push	r16
    41ac:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    41ae:	80 91 10 04 	lds	r24, 0x0410
    41b2:	90 91 11 04 	lds	r25, 0x0411
    41b6:	97 fd       	sbrc	r25, 7
    41b8:	5b c0       	rjmp	.+182    	; 0x4270 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    41ba:	80 31       	cpi	r24, 0x10	; 16
    41bc:	91 05       	cpc	r25, r1
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <computeAngle+0x1c>
    41c0:	42 c0       	rjmp	.+132    	; 0x4246 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    41c8:	90 91 14 02 	lds	r25, 0x0214
    41cc:	98 17       	cp	r25, r24
    41ce:	09 f4       	brne	.+2      	; 0x41d2 <computeAngle+0x2c>
    41d0:	42 c0       	rjmp	.+132    	; 0x4256 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    41d2:	10 92 20 04 	sts	0x0420, r1
	}
	prevPosition = currPosition;
    41d6:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    41da:	60 91 0c 04 	lds	r22, 0x040C
    41de:	70 91 0d 04 	lds	r23, 0x040D
    41e2:	88 27       	eor	r24, r24
    41e4:	77 fd       	sbrc	r23, 7
    41e6:	80 95       	com	r24
    41e8:	98 2f       	mov	r25, r24
    41ea:	0e 94 3b 22 	call	0x4476	; 0x4476 <__floatsisf>
    41ee:	7b 01       	movw	r14, r22
    41f0:	8c 01       	movw	r16, r24
    41f2:	60 91 0e 04 	lds	r22, 0x040E
    41f6:	70 91 0f 04 	lds	r23, 0x040F
    41fa:	88 27       	eor	r24, r24
    41fc:	77 fd       	sbrc	r23, 7
    41fe:	80 95       	com	r24
    4200:	98 2f       	mov	r25, r24
    4202:	0e 94 3b 22 	call	0x4476	; 0x4476 <__floatsisf>
    4206:	9b 01       	movw	r18, r22
    4208:	ac 01       	movw	r20, r24
    420a:	c8 01       	movw	r24, r16
    420c:	b7 01       	movw	r22, r14
    420e:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <atan2>
    4212:	21 ee       	ldi	r18, 0xE1	; 225
    4214:	3e e2       	ldi	r19, 0x2E	; 46
    4216:	45 e6       	ldi	r20, 0x65	; 101
    4218:	52 e4       	ldi	r21, 0x42	; 66
    421a:	0e 94 3c 21 	call	0x4278	; 0x4278 <__mulsf3>
    421e:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    4222:	9b 01       	movw	r18, r22
    4224:	70 93 1f 04 	sts	0x041F, r23
    4228:	60 93 1e 04 	sts	0x041E, r22

	if(currentAngle < 0) {
    422c:	77 ff       	sbrs	r23, 7
    422e:	06 c0       	rjmp	.+12     	; 0x423c <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    4230:	28 59       	subi	r18, 0x98	; 152
    4232:	3e 4f       	sbci	r19, 0xFE	; 254
    4234:	30 93 1f 04 	sts	0x041F, r19
    4238:	20 93 1e 04 	sts	0x041E, r18
	}

}
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	ff 90       	pop	r15
    4242:	ef 90       	pop	r14
    4244:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    4246:	10 92 15 02 	sts	0x0215, r1
    424a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    424c:	90 91 14 02 	lds	r25, 0x0214
    4250:	98 17       	cp	r25, r24
    4252:	09 f0       	breq	.+2      	; 0x4256 <computeAngle+0xb0>
    4254:	be cf       	rjmp	.-132    	; 0x41d2 <computeAngle+0x2c>
		timesInSamePos++;
    4256:	90 91 20 04 	lds	r25, 0x0420
    425a:	9f 5f       	subi	r25, 0xFF	; 255
    425c:	90 93 20 04 	sts	0x0420, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    4260:	95 30       	cpi	r25, 0x05	; 5
    4262:	08 f4       	brcc	.+2      	; 0x4266 <computeAngle+0xc0>
    4264:	b8 cf       	rjmp	.-144    	; 0x41d6 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4266:	10 92 20 04 	sts	0x0420, r1
			robotPosition = currPosition;
    426a:	80 93 16 02 	sts	0x0216, r24
    426e:	b3 cf       	rjmp	.-154    	; 0x41d6 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    4270:	90 95       	com	r25
    4272:	81 95       	neg	r24
    4274:	9f 4f       	sbci	r25, 0xFF	; 255
    4276:	a1 cf       	rjmp	.-190    	; 0x41ba <computeAngle+0x14>

00004278 <__mulsf3>:
    4278:	a0 e2       	ldi	r26, 0x20	; 32
    427a:	b0 e0       	ldi	r27, 0x00	; 0
    427c:	e2 e4       	ldi	r30, 0x42	; 66
    427e:	f1 e2       	ldi	r31, 0x21	; 33
    4280:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__prologue_saves__+0x4>
    4284:	69 83       	std	Y+1, r22	; 0x01
    4286:	7a 83       	std	Y+2, r23	; 0x02
    4288:	8b 83       	std	Y+3, r24	; 0x03
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	2d 83       	std	Y+5, r18	; 0x05
    428e:	3e 83       	std	Y+6, r19	; 0x06
    4290:	4f 83       	std	Y+7, r20	; 0x07
    4292:	58 87       	std	Y+8, r21	; 0x08
    4294:	99 e0       	ldi	r25, 0x09	; 9
    4296:	e9 2e       	mov	r14, r25
    4298:	f1 2c       	mov	r15, r1
    429a:	ec 0e       	add	r14, r28
    429c:	fd 1e       	adc	r15, r29
    429e:	b7 01       	movw	r22, r14
    42a0:	ce 01       	movw	r24, r28
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	0e 94 19 24 	call	0x4832	; 0x4832 <__unpack_f>
    42a8:	8e 01       	movw	r16, r28
    42aa:	0f 5e       	subi	r16, 0xEF	; 239
    42ac:	1f 4f       	sbci	r17, 0xFF	; 255
    42ae:	b8 01       	movw	r22, r16
    42b0:	ce 01       	movw	r24, r28
    42b2:	05 96       	adiw	r24, 0x05	; 5
    42b4:	0e 94 19 24 	call	0x4832	; 0x4832 <__unpack_f>
    42b8:	99 85       	ldd	r25, Y+9	; 0x09
    42ba:	92 30       	cpi	r25, 0x02	; 2
    42bc:	88 f0       	brcs	.+34     	; 0x42e0 <__mulsf3+0x68>
    42be:	89 89       	ldd	r24, Y+17	; 0x11
    42c0:	82 30       	cpi	r24, 0x02	; 2
    42c2:	c0 f0       	brcs	.+48     	; 0x42f4 <__mulsf3+0x7c>
    42c4:	94 30       	cpi	r25, 0x04	; 4
    42c6:	19 f4       	brne	.+6      	; 0x42ce <__mulsf3+0x56>
    42c8:	82 30       	cpi	r24, 0x02	; 2
    42ca:	29 f0       	breq	.+10     	; 0x42d6 <__mulsf3+0x5e>
    42cc:	09 c0       	rjmp	.+18     	; 0x42e0 <__mulsf3+0x68>
    42ce:	84 30       	cpi	r24, 0x04	; 4
    42d0:	29 f4       	brne	.+10     	; 0x42dc <__mulsf3+0x64>
    42d2:	92 30       	cpi	r25, 0x02	; 2
    42d4:	79 f4       	brne	.+30     	; 0x42f4 <__mulsf3+0x7c>
    42d6:	67 e1       	ldi	r22, 0x17	; 23
    42d8:	72 e0       	ldi	r23, 0x02	; 2
    42da:	c6 c0       	rjmp	.+396    	; 0x4468 <__mulsf3+0x1f0>
    42dc:	92 30       	cpi	r25, 0x02	; 2
    42de:	41 f4       	brne	.+16     	; 0x42f0 <__mulsf3+0x78>
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e4:	8a 89       	ldd	r24, Y+18	; 0x12
    42e6:	98 13       	cpse	r25, r24
    42e8:	21 e0       	ldi	r18, 0x01	; 1
    42ea:	2a 87       	std	Y+10, r18	; 0x0a
    42ec:	b7 01       	movw	r22, r14
    42ee:	bc c0       	rjmp	.+376    	; 0x4468 <__mulsf3+0x1f0>
    42f0:	82 30       	cpi	r24, 0x02	; 2
    42f2:	41 f4       	brne	.+16     	; 0x4304 <__mulsf3+0x8c>
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f8:	8a 89       	ldd	r24, Y+18	; 0x12
    42fa:	98 13       	cpse	r25, r24
    42fc:	21 e0       	ldi	r18, 0x01	; 1
    42fe:	2a 8b       	std	Y+18, r18	; 0x12
    4300:	b8 01       	movw	r22, r16
    4302:	b2 c0       	rjmp	.+356    	; 0x4468 <__mulsf3+0x1f0>
    4304:	cd 84       	ldd	r12, Y+13	; 0x0d
    4306:	de 84       	ldd	r13, Y+14	; 0x0e
    4308:	ef 84       	ldd	r14, Y+15	; 0x0f
    430a:	f8 88       	ldd	r15, Y+16	; 0x10
    430c:	0d 89       	ldd	r16, Y+21	; 0x15
    430e:	1e 89       	ldd	r17, Y+22	; 0x16
    4310:	2f 89       	ldd	r18, Y+23	; 0x17
    4312:	38 8d       	ldd	r19, Y+24	; 0x18
    4314:	88 24       	eor	r8, r8
    4316:	99 24       	eor	r9, r9
    4318:	54 01       	movw	r10, r8
    431a:	40 e0       	ldi	r20, 0x00	; 0
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	60 e0       	ldi	r22, 0x00	; 0
    4320:	70 e0       	ldi	r23, 0x00	; 0
    4322:	44 24       	eor	r4, r4
    4324:	55 24       	eor	r5, r5
    4326:	32 01       	movw	r6, r4
    4328:	e0 e0       	ldi	r30, 0x00	; 0
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	c6 01       	movw	r24, r12
    432e:	81 70       	andi	r24, 0x01	; 1
    4330:	90 70       	andi	r25, 0x00	; 0
    4332:	89 2b       	or	r24, r25
    4334:	d9 f0       	breq	.+54     	; 0x436c <__mulsf3+0xf4>
    4336:	80 0e       	add	r8, r16
    4338:	91 1e       	adc	r9, r17
    433a:	a2 1e       	adc	r10, r18
    433c:	b3 1e       	adc	r11, r19
    433e:	db 01       	movw	r26, r22
    4340:	ca 01       	movw	r24, r20
    4342:	84 0d       	add	r24, r4
    4344:	95 1d       	adc	r25, r5
    4346:	a6 1d       	adc	r26, r6
    4348:	b7 1d       	adc	r27, r7
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	80 16       	cp	r8, r16
    4354:	91 06       	cpc	r9, r17
    4356:	a2 06       	cpc	r10, r18
    4358:	b3 06       	cpc	r11, r19
    435a:	20 f4       	brcc	.+8      	; 0x4364 <__mulsf3+0xec>
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	50 e0       	ldi	r21, 0x00	; 0
    4360:	60 e0       	ldi	r22, 0x00	; 0
    4362:	70 e0       	ldi	r23, 0x00	; 0
    4364:	48 0f       	add	r20, r24
    4366:	59 1f       	adc	r21, r25
    4368:	6a 1f       	adc	r22, r26
    436a:	7b 1f       	adc	r23, r27
    436c:	44 0c       	add	r4, r4
    436e:	55 1c       	adc	r5, r5
    4370:	66 1c       	adc	r6, r6
    4372:	77 1c       	adc	r7, r7
    4374:	37 ff       	sbrs	r19, 7
    4376:	08 c0       	rjmp	.+16     	; 0x4388 <__mulsf3+0x110>
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	a0 e0       	ldi	r26, 0x00	; 0
    437e:	b0 e0       	ldi	r27, 0x00	; 0
    4380:	48 2a       	or	r4, r24
    4382:	59 2a       	or	r5, r25
    4384:	6a 2a       	or	r6, r26
    4386:	7b 2a       	or	r7, r27
    4388:	31 96       	adiw	r30, 0x01	; 1
    438a:	e0 32       	cpi	r30, 0x20	; 32
    438c:	f1 05       	cpc	r31, r1
    438e:	49 f0       	breq	.+18     	; 0x43a2 <__mulsf3+0x12a>
    4390:	00 0f       	add	r16, r16
    4392:	11 1f       	adc	r17, r17
    4394:	22 1f       	adc	r18, r18
    4396:	33 1f       	adc	r19, r19
    4398:	f6 94       	lsr	r15
    439a:	e7 94       	ror	r14
    439c:	d7 94       	ror	r13
    439e:	c7 94       	ror	r12
    43a0:	c5 cf       	rjmp	.-118    	; 0x432c <__mulsf3+0xb4>
    43a2:	8b 89       	ldd	r24, Y+19	; 0x13
    43a4:	9c 89       	ldd	r25, Y+20	; 0x14
    43a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    43a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    43aa:	82 0f       	add	r24, r18
    43ac:	93 1f       	adc	r25, r19
    43ae:	02 96       	adiw	r24, 0x02	; 2
    43b0:	9c 8f       	std	Y+28, r25	; 0x1c
    43b2:	8b 8f       	std	Y+27, r24	; 0x1b
    43b4:	1a 8e       	std	Y+26, r1	; 0x1a
    43b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b8:	8a 89       	ldd	r24, Y+18	; 0x12
    43ba:	98 17       	cp	r25, r24
    43bc:	11 f0       	breq	.+4      	; 0x43c2 <__mulsf3+0x14a>
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	8a 8f       	std	Y+26, r24	; 0x1a
    43c2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    43c4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    43c6:	17 c0       	rjmp	.+46     	; 0x43f6 <__mulsf3+0x17e>
    43c8:	ca 01       	movw	r24, r20
    43ca:	81 70       	andi	r24, 0x01	; 1
    43cc:	90 70       	andi	r25, 0x00	; 0
    43ce:	89 2b       	or	r24, r25
    43d0:	61 f0       	breq	.+24     	; 0x43ea <__mulsf3+0x172>
    43d2:	b6 94       	lsr	r11
    43d4:	a7 94       	ror	r10
    43d6:	97 94       	ror	r9
    43d8:	87 94       	ror	r8
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	a0 e0       	ldi	r26, 0x00	; 0
    43e0:	b0 e8       	ldi	r27, 0x80	; 128
    43e2:	88 2a       	or	r8, r24
    43e4:	99 2a       	or	r9, r25
    43e6:	aa 2a       	or	r10, r26
    43e8:	bb 2a       	or	r11, r27
    43ea:	76 95       	lsr	r23
    43ec:	67 95       	ror	r22
    43ee:	57 95       	ror	r21
    43f0:	47 95       	ror	r20
    43f2:	2f 5f       	subi	r18, 0xFF	; 255
    43f4:	3f 4f       	sbci	r19, 0xFF	; 255
    43f6:	77 fd       	sbrc	r23, 7
    43f8:	e7 cf       	rjmp	.-50     	; 0x43c8 <__mulsf3+0x150>
    43fa:	c9 01       	movw	r24, r18
    43fc:	0b c0       	rjmp	.+22     	; 0x4414 <__mulsf3+0x19c>
    43fe:	44 0f       	add	r20, r20
    4400:	55 1f       	adc	r21, r21
    4402:	66 1f       	adc	r22, r22
    4404:	77 1f       	adc	r23, r23
    4406:	b7 fc       	sbrc	r11, 7
    4408:	41 60       	ori	r20, 0x01	; 1
    440a:	88 0c       	add	r8, r8
    440c:	99 1c       	adc	r9, r9
    440e:	aa 1c       	adc	r10, r10
    4410:	bb 1c       	adc	r11, r11
    4412:	01 97       	sbiw	r24, 0x01	; 1
    4414:	40 30       	cpi	r20, 0x00	; 0
    4416:	a0 e0       	ldi	r26, 0x00	; 0
    4418:	5a 07       	cpc	r21, r26
    441a:	a0 e0       	ldi	r26, 0x00	; 0
    441c:	6a 07       	cpc	r22, r26
    441e:	a0 e4       	ldi	r26, 0x40	; 64
    4420:	7a 07       	cpc	r23, r26
    4422:	68 f3       	brcs	.-38     	; 0x43fe <__mulsf3+0x186>
    4424:	9c 8f       	std	Y+28, r25	; 0x1c
    4426:	8b 8f       	std	Y+27, r24	; 0x1b
    4428:	db 01       	movw	r26, r22
    442a:	ca 01       	movw	r24, r20
    442c:	8f 77       	andi	r24, 0x7F	; 127
    442e:	90 70       	andi	r25, 0x00	; 0
    4430:	a0 70       	andi	r26, 0x00	; 0
    4432:	b0 70       	andi	r27, 0x00	; 0
    4434:	80 34       	cpi	r24, 0x40	; 64
    4436:	91 05       	cpc	r25, r1
    4438:	a1 05       	cpc	r26, r1
    443a:	b1 05       	cpc	r27, r1
    443c:	61 f4       	brne	.+24     	; 0x4456 <__mulsf3+0x1de>
    443e:	47 fd       	sbrc	r20, 7
    4440:	0a c0       	rjmp	.+20     	; 0x4456 <__mulsf3+0x1de>
    4442:	81 14       	cp	r8, r1
    4444:	91 04       	cpc	r9, r1
    4446:	a1 04       	cpc	r10, r1
    4448:	b1 04       	cpc	r11, r1
    444a:	29 f0       	breq	.+10     	; 0x4456 <__mulsf3+0x1de>
    444c:	40 5c       	subi	r20, 0xC0	; 192
    444e:	5f 4f       	sbci	r21, 0xFF	; 255
    4450:	6f 4f       	sbci	r22, 0xFF	; 255
    4452:	7f 4f       	sbci	r23, 0xFF	; 255
    4454:	40 78       	andi	r20, 0x80	; 128
    4456:	4d 8f       	std	Y+29, r20	; 0x1d
    4458:	5e 8f       	std	Y+30, r21	; 0x1e
    445a:	6f 8f       	std	Y+31, r22	; 0x1f
    445c:	78 a3       	std	Y+32, r23	; 0x20
    445e:	83 e0       	ldi	r24, 0x03	; 3
    4460:	89 8f       	std	Y+25, r24	; 0x19
    4462:	be 01       	movw	r22, r28
    4464:	67 5e       	subi	r22, 0xE7	; 231
    4466:	7f 4f       	sbci	r23, 0xFF	; 255
    4468:	cb 01       	movw	r24, r22
    446a:	0e 94 39 23 	call	0x4672	; 0x4672 <__pack_f>
    446e:	e0 e1       	ldi	r30, 0x10	; 16
    4470:	a0 96       	adiw	r28, 0x20	; 32
    4472:	0c 94 ed 24 	jmp	0x49da	; 0x49da <__epilogue_restores__+0x4>

00004476 <__floatsisf>:
    4476:	a8 e0       	ldi	r26, 0x08	; 8
    4478:	b0 e0       	ldi	r27, 0x00	; 0
    447a:	e1 e4       	ldi	r30, 0x41	; 65
    447c:	f2 e2       	ldi	r31, 0x22	; 34
    447e:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__prologue_saves__+0x12>
    4482:	9b 01       	movw	r18, r22
    4484:	ac 01       	movw	r20, r24
    4486:	83 e0       	ldi	r24, 0x03	; 3
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	da 01       	movw	r26, r20
    448c:	c9 01       	movw	r24, r18
    448e:	88 27       	eor	r24, r24
    4490:	b7 fd       	sbrc	r27, 7
    4492:	83 95       	inc	r24
    4494:	99 27       	eor	r25, r25
    4496:	aa 27       	eor	r26, r26
    4498:	bb 27       	eor	r27, r27
    449a:	b8 2e       	mov	r11, r24
    449c:	21 15       	cp	r18, r1
    449e:	31 05       	cpc	r19, r1
    44a0:	41 05       	cpc	r20, r1
    44a2:	51 05       	cpc	r21, r1
    44a4:	19 f4       	brne	.+6      	; 0x44ac <__floatsisf+0x36>
    44a6:	82 e0       	ldi	r24, 0x02	; 2
    44a8:	89 83       	std	Y+1, r24	; 0x01
    44aa:	3a c0       	rjmp	.+116    	; 0x4520 <__floatsisf+0xaa>
    44ac:	88 23       	and	r24, r24
    44ae:	a9 f0       	breq	.+42     	; 0x44da <__floatsisf+0x64>
    44b0:	20 30       	cpi	r18, 0x00	; 0
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	38 07       	cpc	r19, r24
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	48 07       	cpc	r20, r24
    44ba:	80 e8       	ldi	r24, 0x80	; 128
    44bc:	58 07       	cpc	r21, r24
    44be:	29 f4       	brne	.+10     	; 0x44ca <__floatsisf+0x54>
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	9f ec       	ldi	r25, 0xCF	; 207
    44c8:	30 c0       	rjmp	.+96     	; 0x452a <__floatsisf+0xb4>
    44ca:	ee 24       	eor	r14, r14
    44cc:	ff 24       	eor	r15, r15
    44ce:	87 01       	movw	r16, r14
    44d0:	e2 1a       	sub	r14, r18
    44d2:	f3 0a       	sbc	r15, r19
    44d4:	04 0b       	sbc	r16, r20
    44d6:	15 0b       	sbc	r17, r21
    44d8:	02 c0       	rjmp	.+4      	; 0x44de <__floatsisf+0x68>
    44da:	79 01       	movw	r14, r18
    44dc:	8a 01       	movw	r16, r20
    44de:	8e e1       	ldi	r24, 0x1E	; 30
    44e0:	c8 2e       	mov	r12, r24
    44e2:	d1 2c       	mov	r13, r1
    44e4:	dc 82       	std	Y+4, r13	; 0x04
    44e6:	cb 82       	std	Y+3, r12	; 0x03
    44e8:	ed 82       	std	Y+5, r14	; 0x05
    44ea:	fe 82       	std	Y+6, r15	; 0x06
    44ec:	0f 83       	std	Y+7, r16	; 0x07
    44ee:	18 87       	std	Y+8, r17	; 0x08
    44f0:	c8 01       	movw	r24, r16
    44f2:	b7 01       	movw	r22, r14
    44f4:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__clzsi2>
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	18 16       	cp	r1, r24
    44fc:	19 06       	cpc	r1, r25
    44fe:	84 f4       	brge	.+32     	; 0x4520 <__floatsisf+0xaa>
    4500:	08 2e       	mov	r0, r24
    4502:	04 c0       	rjmp	.+8      	; 0x450c <__floatsisf+0x96>
    4504:	ee 0c       	add	r14, r14
    4506:	ff 1c       	adc	r15, r15
    4508:	00 1f       	adc	r16, r16
    450a:	11 1f       	adc	r17, r17
    450c:	0a 94       	dec	r0
    450e:	d2 f7       	brpl	.-12     	; 0x4504 <__floatsisf+0x8e>
    4510:	ed 82       	std	Y+5, r14	; 0x05
    4512:	fe 82       	std	Y+6, r15	; 0x06
    4514:	0f 83       	std	Y+7, r16	; 0x07
    4516:	18 87       	std	Y+8, r17	; 0x08
    4518:	c8 1a       	sub	r12, r24
    451a:	d9 0a       	sbc	r13, r25
    451c:	dc 82       	std	Y+4, r13	; 0x04
    451e:	cb 82       	std	Y+3, r12	; 0x03
    4520:	ba 82       	std	Y+2, r11	; 0x02
    4522:	ce 01       	movw	r24, r28
    4524:	01 96       	adiw	r24, 0x01	; 1
    4526:	0e 94 39 23 	call	0x4672	; 0x4672 <__pack_f>
    452a:	e9 e0       	ldi	r30, 0x09	; 9
    452c:	28 96       	adiw	r28, 0x08	; 8
    452e:	0c 94 f4 24 	jmp	0x49e8	; 0x49e8 <__epilogue_restores__+0x12>

00004532 <__fixsfsi>:
    4532:	ac e0       	ldi	r26, 0x0C	; 12
    4534:	b0 e0       	ldi	r27, 0x00	; 0
    4536:	ef e9       	ldi	r30, 0x9F	; 159
    4538:	f2 e2       	ldi	r31, 0x22	; 34
    453a:	0c 94 df 24 	jmp	0x49be	; 0x49be <__prologue_saves__+0x20>
    453e:	69 83       	std	Y+1, r22	; 0x01
    4540:	7a 83       	std	Y+2, r23	; 0x02
    4542:	8b 83       	std	Y+3, r24	; 0x03
    4544:	9c 83       	std	Y+4, r25	; 0x04
    4546:	be 01       	movw	r22, r28
    4548:	6b 5f       	subi	r22, 0xFB	; 251
    454a:	7f 4f       	sbci	r23, 0xFF	; 255
    454c:	ce 01       	movw	r24, r28
    454e:	01 96       	adiw	r24, 0x01	; 1
    4550:	0e 94 19 24 	call	0x4832	; 0x4832 <__unpack_f>
    4554:	8d 81       	ldd	r24, Y+5	; 0x05
    4556:	82 30       	cpi	r24, 0x02	; 2
    4558:	a9 f1       	breq	.+106    	; 0x45c4 <__fixsfsi+0x92>
    455a:	82 30       	cpi	r24, 0x02	; 2
    455c:	98 f1       	brcs	.+102    	; 0x45c4 <__fixsfsi+0x92>
    455e:	84 30       	cpi	r24, 0x04	; 4
    4560:	21 f4       	brne	.+8      	; 0x456a <__fixsfsi+0x38>
    4562:	8e 81       	ldd	r24, Y+6	; 0x06
    4564:	88 23       	and	r24, r24
    4566:	59 f4       	brne	.+22     	; 0x457e <__fixsfsi+0x4c>
    4568:	0f c0       	rjmp	.+30     	; 0x4588 <__fixsfsi+0x56>
    456a:	2f 81       	ldd	r18, Y+7	; 0x07
    456c:	38 85       	ldd	r19, Y+8	; 0x08
    456e:	37 fd       	sbrc	r19, 7
    4570:	29 c0       	rjmp	.+82     	; 0x45c4 <__fixsfsi+0x92>
    4572:	6e 81       	ldd	r22, Y+6	; 0x06
    4574:	2f 31       	cpi	r18, 0x1F	; 31
    4576:	31 05       	cpc	r19, r1
    4578:	64 f0       	brlt	.+24     	; 0x4592 <__fixsfsi+0x60>
    457a:	66 23       	and	r22, r22
    457c:	29 f0       	breq	.+10     	; 0x4588 <__fixsfsi+0x56>
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	40 e0       	ldi	r20, 0x00	; 0
    4584:	50 e8       	ldi	r21, 0x80	; 128
    4586:	22 c0       	rjmp	.+68     	; 0x45cc <__fixsfsi+0x9a>
    4588:	2f ef       	ldi	r18, 0xFF	; 255
    458a:	3f ef       	ldi	r19, 0xFF	; 255
    458c:	4f ef       	ldi	r20, 0xFF	; 255
    458e:	5f e7       	ldi	r21, 0x7F	; 127
    4590:	1d c0       	rjmp	.+58     	; 0x45cc <__fixsfsi+0x9a>
    4592:	8e e1       	ldi	r24, 0x1E	; 30
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	82 1b       	sub	r24, r18
    4598:	93 0b       	sbc	r25, r19
    459a:	29 85       	ldd	r18, Y+9	; 0x09
    459c:	3a 85       	ldd	r19, Y+10	; 0x0a
    459e:	4b 85       	ldd	r20, Y+11	; 0x0b
    45a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    45a2:	04 c0       	rjmp	.+8      	; 0x45ac <__fixsfsi+0x7a>
    45a4:	56 95       	lsr	r21
    45a6:	47 95       	ror	r20
    45a8:	37 95       	ror	r19
    45aa:	27 95       	ror	r18
    45ac:	8a 95       	dec	r24
    45ae:	d2 f7       	brpl	.-12     	; 0x45a4 <__fixsfsi+0x72>
    45b0:	66 23       	and	r22, r22
    45b2:	61 f0       	breq	.+24     	; 0x45cc <__fixsfsi+0x9a>
    45b4:	50 95       	com	r21
    45b6:	40 95       	com	r20
    45b8:	30 95       	com	r19
    45ba:	21 95       	neg	r18
    45bc:	3f 4f       	sbci	r19, 0xFF	; 255
    45be:	4f 4f       	sbci	r20, 0xFF	; 255
    45c0:	5f 4f       	sbci	r21, 0xFF	; 255
    45c2:	04 c0       	rjmp	.+8      	; 0x45cc <__fixsfsi+0x9a>
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e0       	ldi	r20, 0x00	; 0
    45ca:	50 e0       	ldi	r21, 0x00	; 0
    45cc:	ca 01       	movw	r24, r20
    45ce:	b9 01       	movw	r22, r18
    45d0:	e2 e0       	ldi	r30, 0x02	; 2
    45d2:	2c 96       	adiw	r28, 0x0c	; 12
    45d4:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__epilogue_restores__+0x20>

000045d8 <__clzsi2>:
    45d8:	ef 92       	push	r14
    45da:	ff 92       	push	r15
    45dc:	0f 93       	push	r16
    45de:	1f 93       	push	r17
    45e0:	9b 01       	movw	r18, r22
    45e2:	ac 01       	movw	r20, r24
    45e4:	20 30       	cpi	r18, 0x00	; 0
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	38 07       	cpc	r19, r24
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	48 07       	cpc	r20, r24
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	58 07       	cpc	r21, r24
    45f2:	80 f4       	brcc	.+32     	; 0x4614 <__clzsi2+0x3c>
    45f4:	2f 3f       	cpi	r18, 0xFF	; 255
    45f6:	31 05       	cpc	r19, r1
    45f8:	41 05       	cpc	r20, r1
    45fa:	51 05       	cpc	r21, r1
    45fc:	09 f0       	breq	.+2      	; 0x4600 <__clzsi2+0x28>
    45fe:	20 f4       	brcc	.+8      	; 0x4608 <__clzsi2+0x30>
    4600:	ee 24       	eor	r14, r14
    4602:	ff 24       	eor	r15, r15
    4604:	87 01       	movw	r16, r14
    4606:	19 c0       	rjmp	.+50     	; 0x463a <__clzsi2+0x62>
    4608:	68 e0       	ldi	r22, 0x08	; 8
    460a:	e6 2e       	mov	r14, r22
    460c:	f1 2c       	mov	r15, r1
    460e:	01 2d       	mov	r16, r1
    4610:	11 2d       	mov	r17, r1
    4612:	13 c0       	rjmp	.+38     	; 0x463a <__clzsi2+0x62>
    4614:	20 30       	cpi	r18, 0x00	; 0
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	38 07       	cpc	r19, r24
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	48 07       	cpc	r20, r24
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	58 07       	cpc	r21, r24
    4622:	30 f4       	brcc	.+12     	; 0x4630 <__clzsi2+0x58>
    4624:	90 e1       	ldi	r25, 0x10	; 16
    4626:	e9 2e       	mov	r14, r25
    4628:	f1 2c       	mov	r15, r1
    462a:	01 2d       	mov	r16, r1
    462c:	11 2d       	mov	r17, r1
    462e:	05 c0       	rjmp	.+10     	; 0x463a <__clzsi2+0x62>
    4630:	88 e1       	ldi	r24, 0x18	; 24
    4632:	e8 2e       	mov	r14, r24
    4634:	f1 2c       	mov	r15, r1
    4636:	01 2d       	mov	r16, r1
    4638:	11 2d       	mov	r17, r1
    463a:	80 e2       	ldi	r24, 0x20	; 32
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	a0 e0       	ldi	r26, 0x00	; 0
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	8e 19       	sub	r24, r14
    4644:	9f 09       	sbc	r25, r15
    4646:	a0 0b       	sbc	r26, r16
    4648:	b1 0b       	sbc	r27, r17
    464a:	04 c0       	rjmp	.+8      	; 0x4654 <__clzsi2+0x7c>
    464c:	56 95       	lsr	r21
    464e:	47 95       	ror	r20
    4650:	37 95       	ror	r19
    4652:	27 95       	ror	r18
    4654:	ea 94       	dec	r14
    4656:	d2 f7       	brpl	.-12     	; 0x464c <__clzsi2+0x74>
    4658:	f9 01       	movw	r30, r18
    465a:	e1 5e       	subi	r30, 0xE1	; 225
    465c:	fd 4f       	sbci	r31, 0xFD	; 253
    465e:	20 81       	ld	r18, Z
    4660:	82 1b       	sub	r24, r18
    4662:	91 09       	sbc	r25, r1
    4664:	a1 09       	sbc	r26, r1
    4666:	b1 09       	sbc	r27, r1
    4668:	1f 91       	pop	r17
    466a:	0f 91       	pop	r16
    466c:	ff 90       	pop	r15
    466e:	ef 90       	pop	r14
    4670:	08 95       	ret

00004672 <__pack_f>:
    4672:	9f 92       	push	r9
    4674:	af 92       	push	r10
    4676:	bf 92       	push	r11
    4678:	cf 92       	push	r12
    467a:	df 92       	push	r13
    467c:	ef 92       	push	r14
    467e:	ff 92       	push	r15
    4680:	0f 93       	push	r16
    4682:	1f 93       	push	r17
    4684:	ee 24       	eor	r14, r14
    4686:	ff 24       	eor	r15, r15
    4688:	87 01       	movw	r16, r14
    468a:	fc 01       	movw	r30, r24
    468c:	24 81       	ldd	r18, Z+4	; 0x04
    468e:	35 81       	ldd	r19, Z+5	; 0x05
    4690:	46 81       	ldd	r20, Z+6	; 0x06
    4692:	57 81       	ldd	r21, Z+7	; 0x07
    4694:	91 80       	ldd	r9, Z+1	; 0x01
    4696:	80 81       	ld	r24, Z
    4698:	82 30       	cpi	r24, 0x02	; 2
    469a:	10 f4       	brcc	.+4      	; 0x46a0 <__pack_f+0x2e>
    469c:	40 61       	ori	r20, 0x10	; 16
    469e:	a2 c0       	rjmp	.+324    	; 0x47e4 <__pack_f+0x172>
    46a0:	84 30       	cpi	r24, 0x04	; 4
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <__pack_f+0x34>
    46a4:	9b c0       	rjmp	.+310    	; 0x47dc <__pack_f+0x16a>
    46a6:	82 30       	cpi	r24, 0x02	; 2
    46a8:	29 f4       	brne	.+10     	; 0x46b4 <__pack_f+0x42>
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	40 e0       	ldi	r20, 0x00	; 0
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	05 c0       	rjmp	.+10     	; 0x46be <__pack_f+0x4c>
    46b4:	21 15       	cp	r18, r1
    46b6:	31 05       	cpc	r19, r1
    46b8:	41 05       	cpc	r20, r1
    46ba:	51 05       	cpc	r21, r1
    46bc:	19 f4       	brne	.+6      	; 0x46c4 <__pack_f+0x52>
    46be:	e0 e0       	ldi	r30, 0x00	; 0
    46c0:	f0 e0       	ldi	r31, 0x00	; 0
    46c2:	92 c0       	rjmp	.+292    	; 0x47e8 <__pack_f+0x176>
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	93 81       	ldd	r25, Z+3	; 0x03
    46c8:	6f ef       	ldi	r22, 0xFF	; 255
    46ca:	82 38       	cpi	r24, 0x82	; 130
    46cc:	96 07       	cpc	r25, r22
    46ce:	0c f0       	brlt	.+2      	; 0x46d2 <__pack_f+0x60>
    46d0:	5a c0       	rjmp	.+180    	; 0x4786 <__pack_f+0x114>
    46d2:	62 e8       	ldi	r22, 0x82	; 130
    46d4:	7f ef       	ldi	r23, 0xFF	; 255
    46d6:	68 1b       	sub	r22, r24
    46d8:	79 0b       	sbc	r23, r25
    46da:	6a 31       	cpi	r22, 0x1A	; 26
    46dc:	71 05       	cpc	r23, r1
    46de:	2c f0       	brlt	.+10     	; 0x46ea <__pack_f+0x78>
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e0       	ldi	r20, 0x00	; 0
    46e6:	50 e0       	ldi	r21, 0x00	; 0
    46e8:	2a c0       	rjmp	.+84     	; 0x473e <__pack_f+0xcc>
    46ea:	aa 24       	eor	r10, r10
    46ec:	bb 24       	eor	r11, r11
    46ee:	65 01       	movw	r12, r10
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	a0 e0       	ldi	r26, 0x00	; 0
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	06 2e       	mov	r0, r22
    46fa:	04 c0       	rjmp	.+8      	; 0x4704 <__pack_f+0x92>
    46fc:	88 0f       	add	r24, r24
    46fe:	99 1f       	adc	r25, r25
    4700:	aa 1f       	adc	r26, r26
    4702:	bb 1f       	adc	r27, r27
    4704:	0a 94       	dec	r0
    4706:	d2 f7       	brpl	.-12     	; 0x46fc <__pack_f+0x8a>
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	a1 09       	sbc	r26, r1
    470c:	b1 09       	sbc	r27, r1
    470e:	82 23       	and	r24, r18
    4710:	93 23       	and	r25, r19
    4712:	a4 23       	and	r26, r20
    4714:	b5 23       	and	r27, r21
    4716:	00 97       	sbiw	r24, 0x00	; 0
    4718:	a1 05       	cpc	r26, r1
    471a:	b1 05       	cpc	r27, r1
    471c:	29 f0       	breq	.+10     	; 0x4728 <__pack_f+0xb6>
    471e:	71 e0       	ldi	r23, 0x01	; 1
    4720:	a7 2e       	mov	r10, r23
    4722:	b1 2c       	mov	r11, r1
    4724:	c1 2c       	mov	r12, r1
    4726:	d1 2c       	mov	r13, r1
    4728:	04 c0       	rjmp	.+8      	; 0x4732 <__pack_f+0xc0>
    472a:	56 95       	lsr	r21
    472c:	47 95       	ror	r20
    472e:	37 95       	ror	r19
    4730:	27 95       	ror	r18
    4732:	6a 95       	dec	r22
    4734:	d2 f7       	brpl	.-12     	; 0x472a <__pack_f+0xb8>
    4736:	2a 29       	or	r18, r10
    4738:	3b 29       	or	r19, r11
    473a:	4c 29       	or	r20, r12
    473c:	5d 29       	or	r21, r13
    473e:	da 01       	movw	r26, r20
    4740:	c9 01       	movw	r24, r18
    4742:	8f 77       	andi	r24, 0x7F	; 127
    4744:	90 70       	andi	r25, 0x00	; 0
    4746:	a0 70       	andi	r26, 0x00	; 0
    4748:	b0 70       	andi	r27, 0x00	; 0
    474a:	80 34       	cpi	r24, 0x40	; 64
    474c:	91 05       	cpc	r25, r1
    474e:	a1 05       	cpc	r26, r1
    4750:	b1 05       	cpc	r27, r1
    4752:	39 f4       	brne	.+14     	; 0x4762 <__pack_f+0xf0>
    4754:	27 ff       	sbrs	r18, 7
    4756:	09 c0       	rjmp	.+18     	; 0x476a <__pack_f+0xf8>
    4758:	20 5c       	subi	r18, 0xC0	; 192
    475a:	3f 4f       	sbci	r19, 0xFF	; 255
    475c:	4f 4f       	sbci	r20, 0xFF	; 255
    475e:	5f 4f       	sbci	r21, 0xFF	; 255
    4760:	04 c0       	rjmp	.+8      	; 0x476a <__pack_f+0xf8>
    4762:	21 5c       	subi	r18, 0xC1	; 193
    4764:	3f 4f       	sbci	r19, 0xFF	; 255
    4766:	4f 4f       	sbci	r20, 0xFF	; 255
    4768:	5f 4f       	sbci	r21, 0xFF	; 255
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	20 30       	cpi	r18, 0x00	; 0
    4770:	60 e0       	ldi	r22, 0x00	; 0
    4772:	36 07       	cpc	r19, r22
    4774:	60 e0       	ldi	r22, 0x00	; 0
    4776:	46 07       	cpc	r20, r22
    4778:	60 e4       	ldi	r22, 0x40	; 64
    477a:	56 07       	cpc	r21, r22
    477c:	10 f0       	brcs	.+4      	; 0x4782 <__pack_f+0x110>
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	fc 01       	movw	r30, r24
    4784:	23 c0       	rjmp	.+70     	; 0x47cc <__pack_f+0x15a>
    4786:	80 38       	cpi	r24, 0x80	; 128
    4788:	91 05       	cpc	r25, r1
    478a:	44 f5       	brge	.+80     	; 0x47dc <__pack_f+0x16a>
    478c:	fc 01       	movw	r30, r24
    478e:	e1 58       	subi	r30, 0x81	; 129
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	da 01       	movw	r26, r20
    4794:	c9 01       	movw	r24, r18
    4796:	8f 77       	andi	r24, 0x7F	; 127
    4798:	90 70       	andi	r25, 0x00	; 0
    479a:	a0 70       	andi	r26, 0x00	; 0
    479c:	b0 70       	andi	r27, 0x00	; 0
    479e:	80 34       	cpi	r24, 0x40	; 64
    47a0:	91 05       	cpc	r25, r1
    47a2:	a1 05       	cpc	r26, r1
    47a4:	b1 05       	cpc	r27, r1
    47a6:	39 f4       	brne	.+14     	; 0x47b6 <__pack_f+0x144>
    47a8:	27 ff       	sbrs	r18, 7
    47aa:	09 c0       	rjmp	.+18     	; 0x47be <__pack_f+0x14c>
    47ac:	20 5c       	subi	r18, 0xC0	; 192
    47ae:	3f 4f       	sbci	r19, 0xFF	; 255
    47b0:	4f 4f       	sbci	r20, 0xFF	; 255
    47b2:	5f 4f       	sbci	r21, 0xFF	; 255
    47b4:	04 c0       	rjmp	.+8      	; 0x47be <__pack_f+0x14c>
    47b6:	21 5c       	subi	r18, 0xC1	; 193
    47b8:	3f 4f       	sbci	r19, 0xFF	; 255
    47ba:	4f 4f       	sbci	r20, 0xFF	; 255
    47bc:	5f 4f       	sbci	r21, 0xFF	; 255
    47be:	57 ff       	sbrs	r21, 7
    47c0:	05 c0       	rjmp	.+10     	; 0x47cc <__pack_f+0x15a>
    47c2:	56 95       	lsr	r21
    47c4:	47 95       	ror	r20
    47c6:	37 95       	ror	r19
    47c8:	27 95       	ror	r18
    47ca:	31 96       	adiw	r30, 0x01	; 1
    47cc:	87 e0       	ldi	r24, 0x07	; 7
    47ce:	56 95       	lsr	r21
    47d0:	47 95       	ror	r20
    47d2:	37 95       	ror	r19
    47d4:	27 95       	ror	r18
    47d6:	8a 95       	dec	r24
    47d8:	d1 f7       	brne	.-12     	; 0x47ce <__pack_f+0x15c>
    47da:	06 c0       	rjmp	.+12     	; 0x47e8 <__pack_f+0x176>
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e0       	ldi	r20, 0x00	; 0
    47e2:	50 e0       	ldi	r21, 0x00	; 0
    47e4:	ef ef       	ldi	r30, 0xFF	; 255
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	e2 2e       	mov	r14, r18
    47ea:	f3 2e       	mov	r15, r19
    47ec:	94 2f       	mov	r25, r20
    47ee:	9f 77       	andi	r25, 0x7F	; 127
    47f0:	80 2f       	mov	r24, r16
    47f2:	80 78       	andi	r24, 0x80	; 128
    47f4:	89 2b       	or	r24, r25
    47f6:	9e 2f       	mov	r25, r30
    47f8:	97 95       	ror	r25
    47fa:	99 27       	eor	r25, r25
    47fc:	97 95       	ror	r25
    47fe:	8f 77       	andi	r24, 0x7F	; 127
    4800:	08 2f       	mov	r16, r24
    4802:	09 2b       	or	r16, r25
    4804:	9e 2f       	mov	r25, r30
    4806:	96 95       	lsr	r25
    4808:	81 2f       	mov	r24, r17
    480a:	80 78       	andi	r24, 0x80	; 128
    480c:	89 2b       	or	r24, r25
    480e:	97 94       	ror	r9
    4810:	99 24       	eor	r9, r9
    4812:	97 94       	ror	r9
    4814:	8f 77       	andi	r24, 0x7F	; 127
    4816:	18 2f       	mov	r17, r24
    4818:	19 29       	or	r17, r9
    481a:	c8 01       	movw	r24, r16
    481c:	b7 01       	movw	r22, r14
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	ff 90       	pop	r15
    4824:	ef 90       	pop	r14
    4826:	df 90       	pop	r13
    4828:	cf 90       	pop	r12
    482a:	bf 90       	pop	r11
    482c:	af 90       	pop	r10
    482e:	9f 90       	pop	r9
    4830:	08 95       	ret

00004832 <__unpack_f>:
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	fc 01       	movw	r30, r24
    4838:	db 01       	movw	r26, r22
    483a:	20 81       	ld	r18, Z
    483c:	31 81       	ldd	r19, Z+1	; 0x01
    483e:	92 81       	ldd	r25, Z+2	; 0x02
    4840:	49 2f       	mov	r20, r25
    4842:	4f 77       	andi	r20, 0x7F	; 127
    4844:	50 e0       	ldi	r21, 0x00	; 0
    4846:	99 1f       	adc	r25, r25
    4848:	99 27       	eor	r25, r25
    484a:	99 1f       	adc	r25, r25
    484c:	83 81       	ldd	r24, Z+3	; 0x03
    484e:	e8 2f       	mov	r30, r24
    4850:	ee 0f       	add	r30, r30
    4852:	e9 2b       	or	r30, r25
    4854:	6e 2f       	mov	r22, r30
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	88 1f       	adc	r24, r24
    485a:	88 27       	eor	r24, r24
    485c:	88 1f       	adc	r24, r24
    485e:	ed 01       	movw	r28, r26
    4860:	89 83       	std	Y+1, r24	; 0x01
    4862:	ee 23       	and	r30, r30
    4864:	71 f5       	brne	.+92     	; 0x48c2 <__unpack_f+0x90>
    4866:	21 15       	cp	r18, r1
    4868:	31 05       	cpc	r19, r1
    486a:	41 05       	cpc	r20, r1
    486c:	51 05       	cpc	r21, r1
    486e:	11 f4       	brne	.+4      	; 0x4874 <__unpack_f+0x42>
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	2f c0       	rjmp	.+94     	; 0x48d2 <__unpack_f+0xa0>
    4874:	6e 57       	subi	r22, 0x7E	; 126
    4876:	70 40       	sbci	r23, 0x00	; 0
    4878:	fd 01       	movw	r30, r26
    487a:	73 83       	std	Z+3, r23	; 0x03
    487c:	62 83       	std	Z+2, r22	; 0x02
    487e:	67 e0       	ldi	r22, 0x07	; 7
    4880:	22 0f       	add	r18, r18
    4882:	33 1f       	adc	r19, r19
    4884:	44 1f       	adc	r20, r20
    4886:	55 1f       	adc	r21, r21
    4888:	6a 95       	dec	r22
    488a:	d1 f7       	brne	.-12     	; 0x4880 <__unpack_f+0x4e>
    488c:	83 e0       	ldi	r24, 0x03	; 3
    488e:	8c 93       	st	X, r24
    4890:	0a c0       	rjmp	.+20     	; 0x48a6 <__unpack_f+0x74>
    4892:	22 0f       	add	r18, r18
    4894:	33 1f       	adc	r19, r19
    4896:	44 1f       	adc	r20, r20
    4898:	55 1f       	adc	r21, r21
    489a:	ed 01       	movw	r28, r26
    489c:	8a 81       	ldd	r24, Y+2	; 0x02
    489e:	9b 81       	ldd	r25, Y+3	; 0x03
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	9b 83       	std	Y+3, r25	; 0x03
    48a4:	8a 83       	std	Y+2, r24	; 0x02
    48a6:	20 30       	cpi	r18, 0x00	; 0
    48a8:	e0 e0       	ldi	r30, 0x00	; 0
    48aa:	3e 07       	cpc	r19, r30
    48ac:	e0 e0       	ldi	r30, 0x00	; 0
    48ae:	4e 07       	cpc	r20, r30
    48b0:	e0 e4       	ldi	r30, 0x40	; 64
    48b2:	5e 07       	cpc	r21, r30
    48b4:	70 f3       	brcs	.-36     	; 0x4892 <__unpack_f+0x60>
    48b6:	ed 01       	movw	r28, r26
    48b8:	2c 83       	std	Y+4, r18	; 0x04
    48ba:	3d 83       	std	Y+5, r19	; 0x05
    48bc:	4e 83       	std	Y+6, r20	; 0x06
    48be:	5f 83       	std	Y+7, r21	; 0x07
    48c0:	25 c0       	rjmp	.+74     	; 0x490c <__unpack_f+0xda>
    48c2:	ef 3f       	cpi	r30, 0xFF	; 255
    48c4:	79 f4       	brne	.+30     	; 0x48e4 <__unpack_f+0xb2>
    48c6:	21 15       	cp	r18, r1
    48c8:	31 05       	cpc	r19, r1
    48ca:	41 05       	cpc	r20, r1
    48cc:	51 05       	cpc	r21, r1
    48ce:	19 f4       	brne	.+6      	; 0x48d6 <__unpack_f+0xa4>
    48d0:	84 e0       	ldi	r24, 0x04	; 4
    48d2:	8c 93       	st	X, r24
    48d4:	1b c0       	rjmp	.+54     	; 0x490c <__unpack_f+0xda>
    48d6:	44 ff       	sbrs	r20, 4
    48d8:	03 c0       	rjmp	.+6      	; 0x48e0 <__unpack_f+0xae>
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	8c 93       	st	X, r24
    48de:	11 c0       	rjmp	.+34     	; 0x4902 <__unpack_f+0xd0>
    48e0:	1c 92       	st	X, r1
    48e2:	0f c0       	rjmp	.+30     	; 0x4902 <__unpack_f+0xd0>
    48e4:	6f 57       	subi	r22, 0x7F	; 127
    48e6:	70 40       	sbci	r23, 0x00	; 0
    48e8:	ed 01       	movw	r28, r26
    48ea:	7b 83       	std	Y+3, r23	; 0x03
    48ec:	6a 83       	std	Y+2, r22	; 0x02
    48ee:	83 e0       	ldi	r24, 0x03	; 3
    48f0:	8c 93       	st	X, r24
    48f2:	87 e0       	ldi	r24, 0x07	; 7
    48f4:	22 0f       	add	r18, r18
    48f6:	33 1f       	adc	r19, r19
    48f8:	44 1f       	adc	r20, r20
    48fa:	55 1f       	adc	r21, r21
    48fc:	8a 95       	dec	r24
    48fe:	d1 f7       	brne	.-12     	; 0x48f4 <__unpack_f+0xc2>
    4900:	50 64       	ori	r21, 0x40	; 64
    4902:	fd 01       	movw	r30, r26
    4904:	24 83       	std	Z+4, r18	; 0x04
    4906:	35 83       	std	Z+5, r19	; 0x05
    4908:	46 83       	std	Z+6, r20	; 0x06
    490a:	57 83       	std	Z+7, r21	; 0x07
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	08 95       	ret

00004912 <__mulsi3>:
    4912:	62 9f       	mul	r22, r18
    4914:	d0 01       	movw	r26, r0
    4916:	73 9f       	mul	r23, r19
    4918:	f0 01       	movw	r30, r0
    491a:	82 9f       	mul	r24, r18
    491c:	e0 0d       	add	r30, r0
    491e:	f1 1d       	adc	r31, r1
    4920:	64 9f       	mul	r22, r20
    4922:	e0 0d       	add	r30, r0
    4924:	f1 1d       	adc	r31, r1
    4926:	92 9f       	mul	r25, r18
    4928:	f0 0d       	add	r31, r0
    492a:	83 9f       	mul	r24, r19
    492c:	f0 0d       	add	r31, r0
    492e:	74 9f       	mul	r23, r20
    4930:	f0 0d       	add	r31, r0
    4932:	65 9f       	mul	r22, r21
    4934:	f0 0d       	add	r31, r0
    4936:	99 27       	eor	r25, r25
    4938:	72 9f       	mul	r23, r18
    493a:	b0 0d       	add	r27, r0
    493c:	e1 1d       	adc	r30, r1
    493e:	f9 1f       	adc	r31, r25
    4940:	63 9f       	mul	r22, r19
    4942:	b0 0d       	add	r27, r0
    4944:	e1 1d       	adc	r30, r1
    4946:	f9 1f       	adc	r31, r25
    4948:	bd 01       	movw	r22, r26
    494a:	cf 01       	movw	r24, r30
    494c:	11 24       	eor	r1, r1
    494e:	08 95       	ret

00004950 <__udivmodhi4>:
    4950:	aa 1b       	sub	r26, r26
    4952:	bb 1b       	sub	r27, r27
    4954:	51 e1       	ldi	r21, 0x11	; 17
    4956:	07 c0       	rjmp	.+14     	; 0x4966 <__udivmodhi4_ep>

00004958 <__udivmodhi4_loop>:
    4958:	aa 1f       	adc	r26, r26
    495a:	bb 1f       	adc	r27, r27
    495c:	a6 17       	cp	r26, r22
    495e:	b7 07       	cpc	r27, r23
    4960:	10 f0       	brcs	.+4      	; 0x4966 <__udivmodhi4_ep>
    4962:	a6 1b       	sub	r26, r22
    4964:	b7 0b       	sbc	r27, r23

00004966 <__udivmodhi4_ep>:
    4966:	88 1f       	adc	r24, r24
    4968:	99 1f       	adc	r25, r25
    496a:	5a 95       	dec	r21
    496c:	a9 f7       	brne	.-22     	; 0x4958 <__udivmodhi4_loop>
    496e:	80 95       	com	r24
    4970:	90 95       	com	r25
    4972:	bc 01       	movw	r22, r24
    4974:	cd 01       	movw	r24, r26
    4976:	08 95       	ret

00004978 <__divmodhi4>:
    4978:	97 fb       	bst	r25, 7
    497a:	09 2e       	mov	r0, r25
    497c:	07 26       	eor	r0, r23
    497e:	0a d0       	rcall	.+20     	; 0x4994 <__divmodhi4_neg1>
    4980:	77 fd       	sbrc	r23, 7
    4982:	04 d0       	rcall	.+8      	; 0x498c <__divmodhi4_neg2>
    4984:	e5 df       	rcall	.-54     	; 0x4950 <__udivmodhi4>
    4986:	06 d0       	rcall	.+12     	; 0x4994 <__divmodhi4_neg1>
    4988:	00 20       	and	r0, r0
    498a:	1a f4       	brpl	.+6      	; 0x4992 <__divmodhi4_exit>

0000498c <__divmodhi4_neg2>:
    498c:	70 95       	com	r23
    498e:	61 95       	neg	r22
    4990:	7f 4f       	sbci	r23, 0xFF	; 255

00004992 <__divmodhi4_exit>:
    4992:	08 95       	ret

00004994 <__divmodhi4_neg1>:
    4994:	f6 f7       	brtc	.-4      	; 0x4992 <__divmodhi4_exit>
    4996:	90 95       	com	r25
    4998:	81 95       	neg	r24
    499a:	9f 4f       	sbci	r25, 0xFF	; 255
    499c:	08 95       	ret

0000499e <__prologue_saves__>:
    499e:	2f 92       	push	r2
    49a0:	3f 92       	push	r3
    49a2:	4f 92       	push	r4
    49a4:	5f 92       	push	r5
    49a6:	6f 92       	push	r6
    49a8:	7f 92       	push	r7
    49aa:	8f 92       	push	r8
    49ac:	9f 92       	push	r9
    49ae:	af 92       	push	r10
    49b0:	bf 92       	push	r11
    49b2:	cf 92       	push	r12
    49b4:	df 92       	push	r13
    49b6:	ef 92       	push	r14
    49b8:	ff 92       	push	r15
    49ba:	0f 93       	push	r16
    49bc:	1f 93       	push	r17
    49be:	cf 93       	push	r28
    49c0:	df 93       	push	r29
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	ca 1b       	sub	r28, r26
    49c8:	db 0b       	sbc	r29, r27
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	f8 94       	cli
    49ce:	de bf       	out	0x3e, r29	; 62
    49d0:	0f be       	out	0x3f, r0	; 63
    49d2:	cd bf       	out	0x3d, r28	; 61
    49d4:	19 94       	eijmp

000049d6 <__epilogue_restores__>:
    49d6:	2a 88       	ldd	r2, Y+18	; 0x12
    49d8:	39 88       	ldd	r3, Y+17	; 0x11
    49da:	48 88       	ldd	r4, Y+16	; 0x10
    49dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    49de:	6e 84       	ldd	r6, Y+14	; 0x0e
    49e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    49e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    49e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    49e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    49e8:	b9 84       	ldd	r11, Y+9	; 0x09
    49ea:	c8 84       	ldd	r12, Y+8	; 0x08
    49ec:	df 80       	ldd	r13, Y+7	; 0x07
    49ee:	ee 80       	ldd	r14, Y+6	; 0x06
    49f0:	fd 80       	ldd	r15, Y+5	; 0x05
    49f2:	0c 81       	ldd	r16, Y+4	; 0x04
    49f4:	1b 81       	ldd	r17, Y+3	; 0x03
    49f6:	aa 81       	ldd	r26, Y+2	; 0x02
    49f8:	b9 81       	ldd	r27, Y+1	; 0x01
    49fa:	ce 0f       	add	r28, r30
    49fc:	d1 1d       	adc	r29, r1
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	ed 01       	movw	r28, r26
    4a0a:	08 95       	ret

00004a0c <do_rand>:
    4a0c:	af 92       	push	r10
    4a0e:	bf 92       	push	r11
    4a10:	cf 92       	push	r12
    4a12:	df 92       	push	r13
    4a14:	ef 92       	push	r14
    4a16:	ff 92       	push	r15
    4a18:	0f 93       	push	r16
    4a1a:	1f 93       	push	r17
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	ec 01       	movw	r28, r24
    4a22:	68 81       	ld	r22, Y
    4a24:	79 81       	ldd	r23, Y+1	; 0x01
    4a26:	8a 81       	ldd	r24, Y+2	; 0x02
    4a28:	9b 81       	ldd	r25, Y+3	; 0x03
    4a2a:	61 15       	cp	r22, r1
    4a2c:	71 05       	cpc	r23, r1
    4a2e:	81 05       	cpc	r24, r1
    4a30:	91 05       	cpc	r25, r1
    4a32:	21 f4       	brne	.+8      	; 0x4a3c <do_rand+0x30>
    4a34:	64 e2       	ldi	r22, 0x24	; 36
    4a36:	79 ed       	ldi	r23, 0xD9	; 217
    4a38:	8b e5       	ldi	r24, 0x5B	; 91
    4a3a:	97 e0       	ldi	r25, 0x07	; 7
    4a3c:	2d e1       	ldi	r18, 0x1D	; 29
    4a3e:	33 ef       	ldi	r19, 0xF3	; 243
    4a40:	41 e0       	ldi	r20, 0x01	; 1
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__divmodsi4>
    4a48:	79 01       	movw	r14, r18
    4a4a:	8a 01       	movw	r16, r20
    4a4c:	27 ea       	ldi	r18, 0xA7	; 167
    4a4e:	31 e4       	ldi	r19, 0x41	; 65
    4a50:	40 e0       	ldi	r20, 0x00	; 0
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	0e 94 89 24 	call	0x4912	; 0x4912 <__mulsi3>
    4a58:	5b 01       	movw	r10, r22
    4a5a:	6c 01       	movw	r12, r24
    4a5c:	c8 01       	movw	r24, r16
    4a5e:	b7 01       	movw	r22, r14
    4a60:	2c ee       	ldi	r18, 0xEC	; 236
    4a62:	34 ef       	ldi	r19, 0xF4	; 244
    4a64:	4f ef       	ldi	r20, 0xFF	; 255
    4a66:	5f ef       	ldi	r21, 0xFF	; 255
    4a68:	0e 94 89 24 	call	0x4912	; 0x4912 <__mulsi3>
    4a6c:	6a 0d       	add	r22, r10
    4a6e:	7b 1d       	adc	r23, r11
    4a70:	8c 1d       	adc	r24, r12
    4a72:	9d 1d       	adc	r25, r13
    4a74:	97 ff       	sbrs	r25, 7
    4a76:	04 c0       	rjmp	.+8      	; 0x4a80 <do_rand+0x74>
    4a78:	61 50       	subi	r22, 0x01	; 1
    4a7a:	70 40       	sbci	r23, 0x00	; 0
    4a7c:	80 40       	sbci	r24, 0x00	; 0
    4a7e:	90 48       	sbci	r25, 0x80	; 128
    4a80:	68 83       	st	Y, r22
    4a82:	79 83       	std	Y+1, r23	; 0x01
    4a84:	8a 83       	std	Y+2, r24	; 0x02
    4a86:	9b 83       	std	Y+3, r25	; 0x03
    4a88:	7f 77       	andi	r23, 0x7F	; 127
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	0f 91       	pop	r16
    4a94:	ff 90       	pop	r15
    4a96:	ef 90       	pop	r14
    4a98:	df 90       	pop	r13
    4a9a:	cf 90       	pop	r12
    4a9c:	bf 90       	pop	r11
    4a9e:	af 90       	pop	r10
    4aa0:	08 95       	ret

00004aa2 <rand_r>:
    4aa2:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <do_rand>
    4aa6:	08 95       	ret

00004aa8 <rand>:
    4aa8:	8f e1       	ldi	r24, 0x1F	; 31
    4aaa:	93 e0       	ldi	r25, 0x03	; 3
    4aac:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <do_rand>
    4ab0:	08 95       	ret

00004ab2 <srand>:
    4ab2:	a0 e0       	ldi	r26, 0x00	; 0
    4ab4:	b0 e0       	ldi	r27, 0x00	; 0
    4ab6:	80 93 1f 03 	sts	0x031F, r24
    4aba:	90 93 20 03 	sts	0x0320, r25
    4abe:	a0 93 21 03 	sts	0x0321, r26
    4ac2:	b0 93 22 03 	sts	0x0322, r27
    4ac6:	08 95       	ret
    4ac8:	f5 d0       	rcall	.+490    	; 0x4cb4 <__fp_pscA>
    4aca:	58 f0       	brcs	.+22     	; 0x4ae2 <srand+0x30>
    4acc:	80 e8       	ldi	r24, 0x80	; 128
    4ace:	91 e0       	ldi	r25, 0x01	; 1
    4ad0:	09 f4       	brne	.+2      	; 0x4ad4 <srand+0x22>
    4ad2:	9e ef       	ldi	r25, 0xFE	; 254
    4ad4:	f6 d0       	rcall	.+492    	; 0x4cc2 <__fp_pscB>
    4ad6:	28 f0       	brcs	.+10     	; 0x4ae2 <srand+0x30>
    4ad8:	40 e8       	ldi	r20, 0x80	; 128
    4ada:	51 e0       	ldi	r21, 0x01	; 1
    4adc:	59 f4       	brne	.+22     	; 0x4af4 <atan2+0xe>
    4ade:	5e ef       	ldi	r21, 0xFE	; 254
    4ae0:	09 c0       	rjmp	.+18     	; 0x4af4 <atan2+0xe>
    4ae2:	c0 c0       	rjmp	.+384    	; 0x4c64 <__fp_nan>
    4ae4:	28 c1       	rjmp	.+592    	; 0x4d36 <__fp_zero>

00004ae6 <atan2>:
    4ae6:	e9 2f       	mov	r30, r25
    4ae8:	e0 78       	andi	r30, 0x80	; 128
    4aea:	03 d1       	rcall	.+518    	; 0x4cf2 <__fp_split3>
    4aec:	68 f3       	brcs	.-38     	; 0x4ac8 <srand+0x16>
    4aee:	09 2e       	mov	r0, r25
    4af0:	05 2a       	or	r0, r21
    4af2:	c1 f3       	breq	.-16     	; 0x4ae4 <srand+0x32>
    4af4:	26 17       	cp	r18, r22
    4af6:	37 07       	cpc	r19, r23
    4af8:	48 07       	cpc	r20, r24
    4afa:	59 07       	cpc	r21, r25
    4afc:	38 f0       	brcs	.+14     	; 0x4b0c <atan2+0x26>
    4afe:	0e 2e       	mov	r0, r30
    4b00:	07 f8       	bld	r0, 7
    4b02:	e0 25       	eor	r30, r0
    4b04:	69 f0       	breq	.+26     	; 0x4b20 <atan2+0x3a>
    4b06:	e0 25       	eor	r30, r0
    4b08:	e0 64       	ori	r30, 0x40	; 64
    4b0a:	0a c0       	rjmp	.+20     	; 0x4b20 <atan2+0x3a>
    4b0c:	ef 63       	ori	r30, 0x3F	; 63
    4b0e:	07 f8       	bld	r0, 7
    4b10:	00 94       	com	r0
    4b12:	07 fa       	bst	r0, 7
    4b14:	db 01       	movw	r26, r22
    4b16:	b9 01       	movw	r22, r18
    4b18:	9d 01       	movw	r18, r26
    4b1a:	dc 01       	movw	r26, r24
    4b1c:	ca 01       	movw	r24, r20
    4b1e:	ad 01       	movw	r20, r26
    4b20:	ef 93       	push	r30
    4b22:	41 d0       	rcall	.+130    	; 0x4ba6 <__divsf3_pse>
    4b24:	d5 d0       	rcall	.+426    	; 0x4cd0 <__fp_round>
    4b26:	0a d0       	rcall	.+20     	; 0x4b3c <atan>
    4b28:	5f 91       	pop	r21
    4b2a:	55 23       	and	r21, r21
    4b2c:	31 f0       	breq	.+12     	; 0x4b3a <atan2+0x54>
    4b2e:	2b ed       	ldi	r18, 0xDB	; 219
    4b30:	3f e0       	ldi	r19, 0x0F	; 15
    4b32:	49 e4       	ldi	r20, 0x49	; 73
    4b34:	50 fd       	sbrc	r21, 0
    4b36:	49 ec       	ldi	r20, 0xC9	; 201
    4b38:	77 c1       	rjmp	.+750    	; 0x4e28 <__addsf3>
    4b3a:	08 95       	ret

00004b3c <atan>:
    4b3c:	df 93       	push	r29
    4b3e:	dd 27       	eor	r29, r29
    4b40:	b9 2f       	mov	r27, r25
    4b42:	bf 77       	andi	r27, 0x7F	; 127
    4b44:	40 e8       	ldi	r20, 0x80	; 128
    4b46:	5f e3       	ldi	r21, 0x3F	; 63
    4b48:	16 16       	cp	r1, r22
    4b4a:	17 06       	cpc	r1, r23
    4b4c:	48 07       	cpc	r20, r24
    4b4e:	5b 07       	cpc	r21, r27
    4b50:	10 f4       	brcc	.+4      	; 0x4b56 <atan+0x1a>
    4b52:	d9 2f       	mov	r29, r25
    4b54:	f7 d0       	rcall	.+494    	; 0x4d44 <inverse>
    4b56:	9f 93       	push	r25
    4b58:	8f 93       	push	r24
    4b5a:	7f 93       	push	r23
    4b5c:	6f 93       	push	r22
    4b5e:	5a d1       	rcall	.+692    	; 0x4e14 <square>
    4b60:	ee e4       	ldi	r30, 0x4E	; 78
    4b62:	f1 e0       	ldi	r31, 0x01	; 1
    4b64:	82 d0       	rcall	.+260    	; 0x4c6a <__fp_powser>
    4b66:	b4 d0       	rcall	.+360    	; 0x4cd0 <__fp_round>
    4b68:	2f 91       	pop	r18
    4b6a:	3f 91       	pop	r19
    4b6c:	4f 91       	pop	r20
    4b6e:	5f 91       	pop	r21
    4b70:	fa d0       	rcall	.+500    	; 0x4d66 <__mulsf3x>
    4b72:	dd 23       	and	r29, r29
    4b74:	49 f0       	breq	.+18     	; 0x4b88 <atan+0x4c>
    4b76:	90 58       	subi	r25, 0x80	; 128
    4b78:	a2 ea       	ldi	r26, 0xA2	; 162
    4b7a:	2a ed       	ldi	r18, 0xDA	; 218
    4b7c:	3f e0       	ldi	r19, 0x0F	; 15
    4b7e:	49 ec       	ldi	r20, 0xC9	; 201
    4b80:	5f e3       	ldi	r21, 0x3F	; 63
    4b82:	d0 78       	andi	r29, 0x80	; 128
    4b84:	5d 27       	eor	r21, r29
    4b86:	61 d1       	rcall	.+706    	; 0x4e4a <__addsf3x>
    4b88:	df 91       	pop	r29
    4b8a:	a2 c0       	rjmp	.+324    	; 0x4cd0 <__fp_round>
    4b8c:	9a d0       	rcall	.+308    	; 0x4cc2 <__fp_pscB>
    4b8e:	40 f0       	brcs	.+16     	; 0x4ba0 <atan+0x64>
    4b90:	91 d0       	rcall	.+290    	; 0x4cb4 <__fp_pscA>
    4b92:	30 f0       	brcs	.+12     	; 0x4ba0 <atan+0x64>
    4b94:	21 f4       	brne	.+8      	; 0x4b9e <atan+0x62>
    4b96:	5f 3f       	cpi	r21, 0xFF	; 255
    4b98:	19 f0       	breq	.+6      	; 0x4ba0 <atan+0x64>
    4b9a:	5e c0       	rjmp	.+188    	; 0x4c58 <__fp_inf>
    4b9c:	51 11       	cpse	r21, r1
    4b9e:	cc c0       	rjmp	.+408    	; 0x4d38 <__fp_szero>
    4ba0:	61 c0       	rjmp	.+194    	; 0x4c64 <__fp_nan>

00004ba2 <__divsf3x>:
    4ba2:	a7 d0       	rcall	.+334    	; 0x4cf2 <__fp_split3>
    4ba4:	98 f3       	brcs	.-26     	; 0x4b8c <atan+0x50>

00004ba6 <__divsf3_pse>:
    4ba6:	99 23       	and	r25, r25
    4ba8:	c9 f3       	breq	.-14     	; 0x4b9c <atan+0x60>
    4baa:	55 23       	and	r21, r21
    4bac:	b1 f3       	breq	.-20     	; 0x4b9a <atan+0x5e>
    4bae:	95 1b       	sub	r25, r21
    4bb0:	55 0b       	sbc	r21, r21
    4bb2:	bb 27       	eor	r27, r27
    4bb4:	aa 27       	eor	r26, r26
    4bb6:	62 17       	cp	r22, r18
    4bb8:	73 07       	cpc	r23, r19
    4bba:	84 07       	cpc	r24, r20
    4bbc:	38 f0       	brcs	.+14     	; 0x4bcc <__divsf3_pse+0x26>
    4bbe:	9f 5f       	subi	r25, 0xFF	; 255
    4bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc2:	22 0f       	add	r18, r18
    4bc4:	33 1f       	adc	r19, r19
    4bc6:	44 1f       	adc	r20, r20
    4bc8:	aa 1f       	adc	r26, r26
    4bca:	a9 f3       	breq	.-22     	; 0x4bb6 <__divsf3_pse+0x10>
    4bcc:	33 d0       	rcall	.+102    	; 0x4c34 <__divsf3_pse+0x8e>
    4bce:	0e 2e       	mov	r0, r30
    4bd0:	3a f0       	brmi	.+14     	; 0x4be0 <__divsf3_pse+0x3a>
    4bd2:	e0 e8       	ldi	r30, 0x80	; 128
    4bd4:	30 d0       	rcall	.+96     	; 0x4c36 <__divsf3_pse+0x90>
    4bd6:	91 50       	subi	r25, 0x01	; 1
    4bd8:	50 40       	sbci	r21, 0x00	; 0
    4bda:	e6 95       	lsr	r30
    4bdc:	00 1c       	adc	r0, r0
    4bde:	ca f7       	brpl	.-14     	; 0x4bd2 <__divsf3_pse+0x2c>
    4be0:	29 d0       	rcall	.+82     	; 0x4c34 <__divsf3_pse+0x8e>
    4be2:	fe 2f       	mov	r31, r30
    4be4:	27 d0       	rcall	.+78     	; 0x4c34 <__divsf3_pse+0x8e>
    4be6:	66 0f       	add	r22, r22
    4be8:	77 1f       	adc	r23, r23
    4bea:	88 1f       	adc	r24, r24
    4bec:	bb 1f       	adc	r27, r27
    4bee:	26 17       	cp	r18, r22
    4bf0:	37 07       	cpc	r19, r23
    4bf2:	48 07       	cpc	r20, r24
    4bf4:	ab 07       	cpc	r26, r27
    4bf6:	b0 e8       	ldi	r27, 0x80	; 128
    4bf8:	09 f0       	breq	.+2      	; 0x4bfc <__divsf3_pse+0x56>
    4bfa:	bb 0b       	sbc	r27, r27
    4bfc:	80 2d       	mov	r24, r0
    4bfe:	bf 01       	movw	r22, r30
    4c00:	ff 27       	eor	r31, r31
    4c02:	93 58       	subi	r25, 0x83	; 131
    4c04:	5f 4f       	sbci	r21, 0xFF	; 255
    4c06:	2a f0       	brmi	.+10     	; 0x4c12 <__divsf3_pse+0x6c>
    4c08:	9e 3f       	cpi	r25, 0xFE	; 254
    4c0a:	51 05       	cpc	r21, r1
    4c0c:	68 f0       	brcs	.+26     	; 0x4c28 <__divsf3_pse+0x82>
    4c0e:	24 c0       	rjmp	.+72     	; 0x4c58 <__fp_inf>
    4c10:	93 c0       	rjmp	.+294    	; 0x4d38 <__fp_szero>
    4c12:	5f 3f       	cpi	r21, 0xFF	; 255
    4c14:	ec f3       	brlt	.-6      	; 0x4c10 <__divsf3_pse+0x6a>
    4c16:	98 3e       	cpi	r25, 0xE8	; 232
    4c18:	dc f3       	brlt	.-10     	; 0x4c10 <__divsf3_pse+0x6a>
    4c1a:	86 95       	lsr	r24
    4c1c:	77 95       	ror	r23
    4c1e:	67 95       	ror	r22
    4c20:	b7 95       	ror	r27
    4c22:	f7 95       	ror	r31
    4c24:	9f 5f       	subi	r25, 0xFF	; 255
    4c26:	c9 f7       	brne	.-14     	; 0x4c1a <__divsf3_pse+0x74>
    4c28:	88 0f       	add	r24, r24
    4c2a:	91 1d       	adc	r25, r1
    4c2c:	96 95       	lsr	r25
    4c2e:	87 95       	ror	r24
    4c30:	97 f9       	bld	r25, 7
    4c32:	08 95       	ret
    4c34:	e1 e0       	ldi	r30, 0x01	; 1
    4c36:	66 0f       	add	r22, r22
    4c38:	77 1f       	adc	r23, r23
    4c3a:	88 1f       	adc	r24, r24
    4c3c:	bb 1f       	adc	r27, r27
    4c3e:	62 17       	cp	r22, r18
    4c40:	73 07       	cpc	r23, r19
    4c42:	84 07       	cpc	r24, r20
    4c44:	ba 07       	cpc	r27, r26
    4c46:	20 f0       	brcs	.+8      	; 0x4c50 <__divsf3_pse+0xaa>
    4c48:	62 1b       	sub	r22, r18
    4c4a:	73 0b       	sbc	r23, r19
    4c4c:	84 0b       	sbc	r24, r20
    4c4e:	ba 0b       	sbc	r27, r26
    4c50:	ee 1f       	adc	r30, r30
    4c52:	88 f7       	brcc	.-30     	; 0x4c36 <__divsf3_pse+0x90>
    4c54:	e0 95       	com	r30
    4c56:	08 95       	ret

00004c58 <__fp_inf>:
    4c58:	97 f9       	bld	r25, 7
    4c5a:	9f 67       	ori	r25, 0x7F	; 127
    4c5c:	80 e8       	ldi	r24, 0x80	; 128
    4c5e:	70 e0       	ldi	r23, 0x00	; 0
    4c60:	60 e0       	ldi	r22, 0x00	; 0
    4c62:	08 95       	ret

00004c64 <__fp_nan>:
    4c64:	9f ef       	ldi	r25, 0xFF	; 255
    4c66:	80 ec       	ldi	r24, 0xC0	; 192
    4c68:	08 95       	ret

00004c6a <__fp_powser>:
    4c6a:	df 93       	push	r29
    4c6c:	cf 93       	push	r28
    4c6e:	1f 93       	push	r17
    4c70:	0f 93       	push	r16
    4c72:	ff 92       	push	r15
    4c74:	ef 92       	push	r14
    4c76:	df 92       	push	r13
    4c78:	7b 01       	movw	r14, r22
    4c7a:	8c 01       	movw	r16, r24
    4c7c:	68 94       	set
    4c7e:	05 c0       	rjmp	.+10     	; 0x4c8a <__fp_powser+0x20>
    4c80:	da 2e       	mov	r13, r26
    4c82:	ef 01       	movw	r28, r30
    4c84:	70 d0       	rcall	.+224    	; 0x4d66 <__mulsf3x>
    4c86:	fe 01       	movw	r30, r28
    4c88:	e8 94       	clt
    4c8a:	a5 91       	lpm	r26, Z+
    4c8c:	25 91       	lpm	r18, Z+
    4c8e:	35 91       	lpm	r19, Z+
    4c90:	45 91       	lpm	r20, Z+
    4c92:	55 91       	lpm	r21, Z+
    4c94:	ae f3       	brts	.-22     	; 0x4c80 <__fp_powser+0x16>
    4c96:	ef 01       	movw	r28, r30
    4c98:	d8 d0       	rcall	.+432    	; 0x4e4a <__addsf3x>
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	97 01       	movw	r18, r14
    4c9e:	a8 01       	movw	r20, r16
    4ca0:	da 94       	dec	r13
    4ca2:	79 f7       	brne	.-34     	; 0x4c82 <__fp_powser+0x18>
    4ca4:	df 90       	pop	r13
    4ca6:	ef 90       	pop	r14
    4ca8:	ff 90       	pop	r15
    4caa:	0f 91       	pop	r16
    4cac:	1f 91       	pop	r17
    4cae:	cf 91       	pop	r28
    4cb0:	df 91       	pop	r29
    4cb2:	08 95       	ret

00004cb4 <__fp_pscA>:
    4cb4:	00 24       	eor	r0, r0
    4cb6:	0a 94       	dec	r0
    4cb8:	16 16       	cp	r1, r22
    4cba:	17 06       	cpc	r1, r23
    4cbc:	18 06       	cpc	r1, r24
    4cbe:	09 06       	cpc	r0, r25
    4cc0:	08 95       	ret

00004cc2 <__fp_pscB>:
    4cc2:	00 24       	eor	r0, r0
    4cc4:	0a 94       	dec	r0
    4cc6:	12 16       	cp	r1, r18
    4cc8:	13 06       	cpc	r1, r19
    4cca:	14 06       	cpc	r1, r20
    4ccc:	05 06       	cpc	r0, r21
    4cce:	08 95       	ret

00004cd0 <__fp_round>:
    4cd0:	09 2e       	mov	r0, r25
    4cd2:	03 94       	inc	r0
    4cd4:	00 0c       	add	r0, r0
    4cd6:	11 f4       	brne	.+4      	; 0x4cdc <__fp_round+0xc>
    4cd8:	88 23       	and	r24, r24
    4cda:	52 f0       	brmi	.+20     	; 0x4cf0 <__fp_round+0x20>
    4cdc:	bb 0f       	add	r27, r27
    4cde:	40 f4       	brcc	.+16     	; 0x4cf0 <__fp_round+0x20>
    4ce0:	bf 2b       	or	r27, r31
    4ce2:	11 f4       	brne	.+4      	; 0x4ce8 <__fp_round+0x18>
    4ce4:	60 ff       	sbrs	r22, 0
    4ce6:	04 c0       	rjmp	.+8      	; 0x4cf0 <__fp_round+0x20>
    4ce8:	6f 5f       	subi	r22, 0xFF	; 255
    4cea:	7f 4f       	sbci	r23, 0xFF	; 255
    4cec:	8f 4f       	sbci	r24, 0xFF	; 255
    4cee:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf0:	08 95       	ret

00004cf2 <__fp_split3>:
    4cf2:	57 fd       	sbrc	r21, 7
    4cf4:	90 58       	subi	r25, 0x80	; 128
    4cf6:	44 0f       	add	r20, r20
    4cf8:	55 1f       	adc	r21, r21
    4cfa:	59 f0       	breq	.+22     	; 0x4d12 <__fp_splitA+0x10>
    4cfc:	5f 3f       	cpi	r21, 0xFF	; 255
    4cfe:	71 f0       	breq	.+28     	; 0x4d1c <__fp_splitA+0x1a>
    4d00:	47 95       	ror	r20

00004d02 <__fp_splitA>:
    4d02:	88 0f       	add	r24, r24
    4d04:	97 fb       	bst	r25, 7
    4d06:	99 1f       	adc	r25, r25
    4d08:	61 f0       	breq	.+24     	; 0x4d22 <__fp_splitA+0x20>
    4d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    4d0c:	79 f0       	breq	.+30     	; 0x4d2c <__fp_splitA+0x2a>
    4d0e:	87 95       	ror	r24
    4d10:	08 95       	ret
    4d12:	12 16       	cp	r1, r18
    4d14:	13 06       	cpc	r1, r19
    4d16:	14 06       	cpc	r1, r20
    4d18:	55 1f       	adc	r21, r21
    4d1a:	f2 cf       	rjmp	.-28     	; 0x4d00 <__fp_split3+0xe>
    4d1c:	46 95       	lsr	r20
    4d1e:	f1 df       	rcall	.-30     	; 0x4d02 <__fp_splitA>
    4d20:	08 c0       	rjmp	.+16     	; 0x4d32 <__fp_splitA+0x30>
    4d22:	16 16       	cp	r1, r22
    4d24:	17 06       	cpc	r1, r23
    4d26:	18 06       	cpc	r1, r24
    4d28:	99 1f       	adc	r25, r25
    4d2a:	f1 cf       	rjmp	.-30     	; 0x4d0e <__fp_splitA+0xc>
    4d2c:	86 95       	lsr	r24
    4d2e:	71 05       	cpc	r23, r1
    4d30:	61 05       	cpc	r22, r1
    4d32:	08 94       	sec
    4d34:	08 95       	ret

00004d36 <__fp_zero>:
    4d36:	e8 94       	clt

00004d38 <__fp_szero>:
    4d38:	bb 27       	eor	r27, r27
    4d3a:	66 27       	eor	r22, r22
    4d3c:	77 27       	eor	r23, r23
    4d3e:	cb 01       	movw	r24, r22
    4d40:	97 f9       	bld	r25, 7
    4d42:	08 95       	ret

00004d44 <inverse>:
    4d44:	9b 01       	movw	r18, r22
    4d46:	ac 01       	movw	r20, r24
    4d48:	60 e0       	ldi	r22, 0x00	; 0
    4d4a:	70 e0       	ldi	r23, 0x00	; 0
    4d4c:	80 e8       	ldi	r24, 0x80	; 128
    4d4e:	9f e3       	ldi	r25, 0x3F	; 63
    4d50:	cf c0       	rjmp	.+414    	; 0x4ef0 <__divsf3>
    4d52:	b0 df       	rcall	.-160    	; 0x4cb4 <__fp_pscA>
    4d54:	28 f0       	brcs	.+10     	; 0x4d60 <inverse+0x1c>
    4d56:	b5 df       	rcall	.-150    	; 0x4cc2 <__fp_pscB>
    4d58:	18 f0       	brcs	.+6      	; 0x4d60 <inverse+0x1c>
    4d5a:	95 23       	and	r25, r21
    4d5c:	09 f0       	breq	.+2      	; 0x4d60 <inverse+0x1c>
    4d5e:	7c cf       	rjmp	.-264    	; 0x4c58 <__fp_inf>
    4d60:	81 cf       	rjmp	.-254    	; 0x4c64 <__fp_nan>
    4d62:	11 24       	eor	r1, r1
    4d64:	e9 cf       	rjmp	.-46     	; 0x4d38 <__fp_szero>

00004d66 <__mulsf3x>:
    4d66:	c5 df       	rcall	.-118    	; 0x4cf2 <__fp_split3>
    4d68:	a0 f3       	brcs	.-24     	; 0x4d52 <inverse+0xe>

00004d6a <__mulsf3_pse>:
    4d6a:	95 9f       	mul	r25, r21
    4d6c:	d1 f3       	breq	.-12     	; 0x4d62 <inverse+0x1e>
    4d6e:	95 0f       	add	r25, r21
    4d70:	50 e0       	ldi	r21, 0x00	; 0
    4d72:	55 1f       	adc	r21, r21
    4d74:	62 9f       	mul	r22, r18
    4d76:	f0 01       	movw	r30, r0
    4d78:	72 9f       	mul	r23, r18
    4d7a:	bb 27       	eor	r27, r27
    4d7c:	f0 0d       	add	r31, r0
    4d7e:	b1 1d       	adc	r27, r1
    4d80:	63 9f       	mul	r22, r19
    4d82:	aa 27       	eor	r26, r26
    4d84:	f0 0d       	add	r31, r0
    4d86:	b1 1d       	adc	r27, r1
    4d88:	aa 1f       	adc	r26, r26
    4d8a:	64 9f       	mul	r22, r20
    4d8c:	66 27       	eor	r22, r22
    4d8e:	b0 0d       	add	r27, r0
    4d90:	a1 1d       	adc	r26, r1
    4d92:	66 1f       	adc	r22, r22
    4d94:	82 9f       	mul	r24, r18
    4d96:	22 27       	eor	r18, r18
    4d98:	b0 0d       	add	r27, r0
    4d9a:	a1 1d       	adc	r26, r1
    4d9c:	62 1f       	adc	r22, r18
    4d9e:	73 9f       	mul	r23, r19
    4da0:	b0 0d       	add	r27, r0
    4da2:	a1 1d       	adc	r26, r1
    4da4:	62 1f       	adc	r22, r18
    4da6:	83 9f       	mul	r24, r19
    4da8:	a0 0d       	add	r26, r0
    4daa:	61 1d       	adc	r22, r1
    4dac:	22 1f       	adc	r18, r18
    4dae:	74 9f       	mul	r23, r20
    4db0:	33 27       	eor	r19, r19
    4db2:	a0 0d       	add	r26, r0
    4db4:	61 1d       	adc	r22, r1
    4db6:	23 1f       	adc	r18, r19
    4db8:	84 9f       	mul	r24, r20
    4dba:	60 0d       	add	r22, r0
    4dbc:	21 1d       	adc	r18, r1
    4dbe:	82 2f       	mov	r24, r18
    4dc0:	76 2f       	mov	r23, r22
    4dc2:	6a 2f       	mov	r22, r26
    4dc4:	11 24       	eor	r1, r1
    4dc6:	9f 57       	subi	r25, 0x7F	; 127
    4dc8:	50 40       	sbci	r21, 0x00	; 0
    4dca:	8a f0       	brmi	.+34     	; 0x4dee <__mulsf3_pse+0x84>
    4dcc:	e1 f0       	breq	.+56     	; 0x4e06 <__mulsf3_pse+0x9c>
    4dce:	88 23       	and	r24, r24
    4dd0:	4a f0       	brmi	.+18     	; 0x4de4 <__mulsf3_pse+0x7a>
    4dd2:	ee 0f       	add	r30, r30
    4dd4:	ff 1f       	adc	r31, r31
    4dd6:	bb 1f       	adc	r27, r27
    4dd8:	66 1f       	adc	r22, r22
    4dda:	77 1f       	adc	r23, r23
    4ddc:	88 1f       	adc	r24, r24
    4dde:	91 50       	subi	r25, 0x01	; 1
    4de0:	50 40       	sbci	r21, 0x00	; 0
    4de2:	a9 f7       	brne	.-22     	; 0x4dce <__mulsf3_pse+0x64>
    4de4:	9e 3f       	cpi	r25, 0xFE	; 254
    4de6:	51 05       	cpc	r21, r1
    4de8:	70 f0       	brcs	.+28     	; 0x4e06 <__mulsf3_pse+0x9c>
    4dea:	36 cf       	rjmp	.-404    	; 0x4c58 <__fp_inf>
    4dec:	a5 cf       	rjmp	.-182    	; 0x4d38 <__fp_szero>
    4dee:	5f 3f       	cpi	r21, 0xFF	; 255
    4df0:	ec f3       	brlt	.-6      	; 0x4dec <__mulsf3_pse+0x82>
    4df2:	98 3e       	cpi	r25, 0xE8	; 232
    4df4:	dc f3       	brlt	.-10     	; 0x4dec <__mulsf3_pse+0x82>
    4df6:	86 95       	lsr	r24
    4df8:	77 95       	ror	r23
    4dfa:	67 95       	ror	r22
    4dfc:	b7 95       	ror	r27
    4dfe:	f7 95       	ror	r31
    4e00:	e7 95       	ror	r30
    4e02:	9f 5f       	subi	r25, 0xFF	; 255
    4e04:	c1 f7       	brne	.-16     	; 0x4df6 <__mulsf3_pse+0x8c>
    4e06:	fe 2b       	or	r31, r30
    4e08:	88 0f       	add	r24, r24
    4e0a:	91 1d       	adc	r25, r1
    4e0c:	96 95       	lsr	r25
    4e0e:	87 95       	ror	r24
    4e10:	97 f9       	bld	r25, 7
    4e12:	08 95       	ret

00004e14 <square>:
    4e14:	9b 01       	movw	r18, r22
    4e16:	ac 01       	movw	r20, r24
    4e18:	2f ca       	rjmp	.-2978   	; 0x4278 <__mulsf3>

00004e1a <__eerd_word_m2560>:
    4e1a:	a8 e1       	ldi	r26, 0x18	; 24
    4e1c:	b0 e0       	ldi	r27, 0x00	; 0
    4e1e:	42 e0       	ldi	r20, 0x02	; 2
    4e20:	50 e0       	ldi	r21, 0x00	; 0
    4e22:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <__eerd_blraw_m2560>

00004e26 <__subsf3>:
    4e26:	50 58       	subi	r21, 0x80	; 128

00004e28 <__addsf3>:
    4e28:	bb 27       	eor	r27, r27
    4e2a:	aa 27       	eor	r26, r26
    4e2c:	0e d0       	rcall	.+28     	; 0x4e4a <__addsf3x>
    4e2e:	50 cf       	rjmp	.-352    	; 0x4cd0 <__fp_round>
    4e30:	41 df       	rcall	.-382    	; 0x4cb4 <__fp_pscA>
    4e32:	30 f0       	brcs	.+12     	; 0x4e40 <__addsf3+0x18>
    4e34:	46 df       	rcall	.-372    	; 0x4cc2 <__fp_pscB>
    4e36:	20 f0       	brcs	.+8      	; 0x4e40 <__addsf3+0x18>
    4e38:	31 f4       	brne	.+12     	; 0x4e46 <__addsf3+0x1e>
    4e3a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e3c:	11 f4       	brne	.+4      	; 0x4e42 <__addsf3+0x1a>
    4e3e:	1e f4       	brtc	.+6      	; 0x4e46 <__addsf3+0x1e>
    4e40:	11 cf       	rjmp	.-478    	; 0x4c64 <__fp_nan>
    4e42:	0e f4       	brtc	.+2      	; 0x4e46 <__addsf3+0x1e>
    4e44:	e0 95       	com	r30
    4e46:	e7 fb       	bst	r30, 7
    4e48:	07 cf       	rjmp	.-498    	; 0x4c58 <__fp_inf>

00004e4a <__addsf3x>:
    4e4a:	e9 2f       	mov	r30, r25
    4e4c:	52 df       	rcall	.-348    	; 0x4cf2 <__fp_split3>
    4e4e:	80 f3       	brcs	.-32     	; 0x4e30 <__addsf3+0x8>
    4e50:	ba 17       	cp	r27, r26
    4e52:	62 07       	cpc	r22, r18
    4e54:	73 07       	cpc	r23, r19
    4e56:	84 07       	cpc	r24, r20
    4e58:	95 07       	cpc	r25, r21
    4e5a:	18 f0       	brcs	.+6      	; 0x4e62 <__addsf3x+0x18>
    4e5c:	71 f4       	brne	.+28     	; 0x4e7a <__addsf3x+0x30>
    4e5e:	9e f5       	brtc	.+102    	; 0x4ec6 <__addsf3x+0x7c>
    4e60:	6a cf       	rjmp	.-300    	; 0x4d36 <__fp_zero>
    4e62:	0e f4       	brtc	.+2      	; 0x4e66 <__addsf3x+0x1c>
    4e64:	e0 95       	com	r30
    4e66:	0b 2e       	mov	r0, r27
    4e68:	ba 2f       	mov	r27, r26
    4e6a:	a0 2d       	mov	r26, r0
    4e6c:	0b 01       	movw	r0, r22
    4e6e:	b9 01       	movw	r22, r18
    4e70:	90 01       	movw	r18, r0
    4e72:	0c 01       	movw	r0, r24
    4e74:	ca 01       	movw	r24, r20
    4e76:	a0 01       	movw	r20, r0
    4e78:	11 24       	eor	r1, r1
    4e7a:	ff 27       	eor	r31, r31
    4e7c:	59 1b       	sub	r21, r25
    4e7e:	99 f0       	breq	.+38     	; 0x4ea6 <__addsf3x+0x5c>
    4e80:	59 3f       	cpi	r21, 0xF9	; 249
    4e82:	50 f4       	brcc	.+20     	; 0x4e98 <__addsf3x+0x4e>
    4e84:	50 3e       	cpi	r21, 0xE0	; 224
    4e86:	68 f1       	brcs	.+90     	; 0x4ee2 <__addsf3x+0x98>
    4e88:	1a 16       	cp	r1, r26
    4e8a:	f0 40       	sbci	r31, 0x00	; 0
    4e8c:	a2 2f       	mov	r26, r18
    4e8e:	23 2f       	mov	r18, r19
    4e90:	34 2f       	mov	r19, r20
    4e92:	44 27       	eor	r20, r20
    4e94:	58 5f       	subi	r21, 0xF8	; 248
    4e96:	f3 cf       	rjmp	.-26     	; 0x4e7e <__addsf3x+0x34>
    4e98:	46 95       	lsr	r20
    4e9a:	37 95       	ror	r19
    4e9c:	27 95       	ror	r18
    4e9e:	a7 95       	ror	r26
    4ea0:	f0 40       	sbci	r31, 0x00	; 0
    4ea2:	53 95       	inc	r21
    4ea4:	c9 f7       	brne	.-14     	; 0x4e98 <__addsf3x+0x4e>
    4ea6:	7e f4       	brtc	.+30     	; 0x4ec6 <__addsf3x+0x7c>
    4ea8:	1f 16       	cp	r1, r31
    4eaa:	ba 0b       	sbc	r27, r26
    4eac:	62 0b       	sbc	r22, r18
    4eae:	73 0b       	sbc	r23, r19
    4eb0:	84 0b       	sbc	r24, r20
    4eb2:	ba f0       	brmi	.+46     	; 0x4ee2 <__addsf3x+0x98>
    4eb4:	91 50       	subi	r25, 0x01	; 1
    4eb6:	a1 f0       	breq	.+40     	; 0x4ee0 <__addsf3x+0x96>
    4eb8:	ff 0f       	add	r31, r31
    4eba:	bb 1f       	adc	r27, r27
    4ebc:	66 1f       	adc	r22, r22
    4ebe:	77 1f       	adc	r23, r23
    4ec0:	88 1f       	adc	r24, r24
    4ec2:	c2 f7       	brpl	.-16     	; 0x4eb4 <__addsf3x+0x6a>
    4ec4:	0e c0       	rjmp	.+28     	; 0x4ee2 <__addsf3x+0x98>
    4ec6:	ba 0f       	add	r27, r26
    4ec8:	62 1f       	adc	r22, r18
    4eca:	73 1f       	adc	r23, r19
    4ecc:	84 1f       	adc	r24, r20
    4ece:	48 f4       	brcc	.+18     	; 0x4ee2 <__addsf3x+0x98>
    4ed0:	87 95       	ror	r24
    4ed2:	77 95       	ror	r23
    4ed4:	67 95       	ror	r22
    4ed6:	b7 95       	ror	r27
    4ed8:	f7 95       	ror	r31
    4eda:	9e 3f       	cpi	r25, 0xFE	; 254
    4edc:	08 f0       	brcs	.+2      	; 0x4ee0 <__addsf3x+0x96>
    4ede:	b3 cf       	rjmp	.-154    	; 0x4e46 <__addsf3+0x1e>
    4ee0:	93 95       	inc	r25
    4ee2:	88 0f       	add	r24, r24
    4ee4:	08 f0       	brcs	.+2      	; 0x4ee8 <__addsf3x+0x9e>
    4ee6:	99 27       	eor	r25, r25
    4ee8:	ee 0f       	add	r30, r30
    4eea:	97 95       	ror	r25
    4eec:	87 95       	ror	r24
    4eee:	08 95       	ret

00004ef0 <__divsf3>:
    4ef0:	58 de       	rcall	.-848    	; 0x4ba2 <__divsf3x>
    4ef2:	ee ce       	rjmp	.-548    	; 0x4cd0 <__fp_round>

00004ef4 <__eerd_block_m2560>:
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22

00004ef8 <__eerd_blraw_m2560>:
    4ef8:	fc 01       	movw	r30, r24
    4efa:	f9 99       	sbic	0x1f, 1	; 31
    4efc:	fe cf       	rjmp	.-4      	; 0x4efa <__eerd_blraw_m2560+0x2>
    4efe:	06 c0       	rjmp	.+12     	; 0x4f0c <__eerd_blraw_m2560+0x14>
    4f00:	f2 bd       	out	0x22, r31	; 34
    4f02:	e1 bd       	out	0x21, r30	; 33
    4f04:	f8 9a       	sbi	0x1f, 0	; 31
    4f06:	31 96       	adiw	r30, 0x01	; 1
    4f08:	00 b4       	in	r0, 0x20	; 32
    4f0a:	0d 92       	st	X+, r0
    4f0c:	41 50       	subi	r20, 0x01	; 1
    4f0e:	50 40       	sbci	r21, 0x00	; 0
    4f10:	b8 f7       	brcc	.-18     	; 0x4f00 <__eerd_blraw_m2560+0x8>
    4f12:	08 95       	ret

00004f14 <__divmodsi4>:
    4f14:	97 fb       	bst	r25, 7
    4f16:	09 2e       	mov	r0, r25
    4f18:	05 26       	eor	r0, r21
    4f1a:	0e d0       	rcall	.+28     	; 0x4f38 <__divmodsi4_neg1>
    4f1c:	57 fd       	sbrc	r21, 7
    4f1e:	04 d0       	rcall	.+8      	; 0x4f28 <__divmodsi4_neg2>
    4f20:	14 d0       	rcall	.+40     	; 0x4f4a <__udivmodsi4>
    4f22:	0a d0       	rcall	.+20     	; 0x4f38 <__divmodsi4_neg1>
    4f24:	00 1c       	adc	r0, r0
    4f26:	38 f4       	brcc	.+14     	; 0x4f36 <__divmodsi4_exit>

00004f28 <__divmodsi4_neg2>:
    4f28:	50 95       	com	r21
    4f2a:	40 95       	com	r20
    4f2c:	30 95       	com	r19
    4f2e:	21 95       	neg	r18
    4f30:	3f 4f       	sbci	r19, 0xFF	; 255
    4f32:	4f 4f       	sbci	r20, 0xFF	; 255
    4f34:	5f 4f       	sbci	r21, 0xFF	; 255

00004f36 <__divmodsi4_exit>:
    4f36:	08 95       	ret

00004f38 <__divmodsi4_neg1>:
    4f38:	f6 f7       	brtc	.-4      	; 0x4f36 <__divmodsi4_exit>
    4f3a:	90 95       	com	r25
    4f3c:	80 95       	com	r24
    4f3e:	70 95       	com	r23
    4f40:	61 95       	neg	r22
    4f42:	7f 4f       	sbci	r23, 0xFF	; 255
    4f44:	8f 4f       	sbci	r24, 0xFF	; 255
    4f46:	9f 4f       	sbci	r25, 0xFF	; 255
    4f48:	08 95       	ret

00004f4a <__udivmodsi4>:
    4f4a:	a1 e2       	ldi	r26, 0x21	; 33
    4f4c:	1a 2e       	mov	r1, r26
    4f4e:	aa 1b       	sub	r26, r26
    4f50:	bb 1b       	sub	r27, r27
    4f52:	fd 01       	movw	r30, r26
    4f54:	0d c0       	rjmp	.+26     	; 0x4f70 <__udivmodsi4_ep>

00004f56 <__udivmodsi4_loop>:
    4f56:	aa 1f       	adc	r26, r26
    4f58:	bb 1f       	adc	r27, r27
    4f5a:	ee 1f       	adc	r30, r30
    4f5c:	ff 1f       	adc	r31, r31
    4f5e:	a2 17       	cp	r26, r18
    4f60:	b3 07       	cpc	r27, r19
    4f62:	e4 07       	cpc	r30, r20
    4f64:	f5 07       	cpc	r31, r21
    4f66:	20 f0       	brcs	.+8      	; 0x4f70 <__udivmodsi4_ep>
    4f68:	a2 1b       	sub	r26, r18
    4f6a:	b3 0b       	sbc	r27, r19
    4f6c:	e4 0b       	sbc	r30, r20
    4f6e:	f5 0b       	sbc	r31, r21

00004f70 <__udivmodsi4_ep>:
    4f70:	66 1f       	adc	r22, r22
    4f72:	77 1f       	adc	r23, r23
    4f74:	88 1f       	adc	r24, r24
    4f76:	99 1f       	adc	r25, r25
    4f78:	1a 94       	dec	r1
    4f7a:	69 f7       	brne	.-38     	; 0x4f56 <__udivmodsi4_loop>
    4f7c:	60 95       	com	r22
    4f7e:	70 95       	com	r23
    4f80:	80 95       	com	r24
    4f82:	90 95       	com	r25
    4f84:	9b 01       	movw	r18, r22
    4f86:	ac 01       	movw	r20, r24
    4f88:	bd 01       	movw	r22, r26
    4f8a:	cf 01       	movw	r24, r30
    4f8c:	08 95       	ret

00004f8e <_exit>:
    4f8e:	ff cf       	rjmp	.-2      	; 0x4f8e <_exit>
