
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800200  0000549a  0000552e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000549a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000164  0080031e  0080031e  0000564c  2**0
                  ALLOC
  3 .stab         00002280  00000000  00000000  0000564c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000640  00000000  00000000  000078cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00007f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ee9  00000000  00000000  0000818c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004868  00000000  00000000  00009075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a70  00000000  00000000  0000d8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000043cc  00000000  00000000  0000f34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000640  00000000  00000000  0001371c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000dff  00000000  00000000  00013d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000191e  00000000  00000000  00014b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000106  00000000  00000000  00016479  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000240  00000000  00000000  0001657f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_32>
      84:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_42>
      ac:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	63 15       	cp	r22, r3
      e6:	2f 15       	cp	r18, r15
      e8:	c8 14       	cp	r12, r8
      ea:	47 16       	cp	r4, r23
      ec:	d6 15       	cp	r29, r6
      ee:	2f 16       	cp	r2, r31
      f0:	69 14       	cp	r6, r9
      f2:	33 14       	cp	r3, r3
      f4:	d5 13       	cpse	r29, r21
      f6:	9f 13       	cpse	r25, r31
      f8:	2b 0e       	add	r2, r27
      fa:	2b 0e       	add	r2, r27
      fc:	2b 0e       	add	r2, r27
      fe:	2b 0e       	add	r2, r27
     100:	2b 0e       	add	r2, r27
     102:	2b 0e       	add	r2, r27
     104:	8c 13       	cpse	r24, r28
     106:	79 13       	cpse	r23, r25
     108:	2b 0e       	add	r2, r27
     10a:	2b 0e       	add	r2, r27
     10c:	2b 0e       	add	r2, r27
     10e:	2b 0e       	add	r2, r27
     110:	2b 0e       	add	r2, r27
     112:	2b 0e       	add	r2, r27
     114:	2b 0e       	add	r2, r27
     116:	2b 0e       	add	r2, r27
     118:	2b 0e       	add	r2, r27
     11a:	2b 0e       	add	r2, r27
     11c:	2b 0e       	add	r2, r27
     11e:	2b 0e       	add	r2, r27
     120:	d5 13       	cpse	r29, r21
     122:	c8 14       	cp	r12, r8
     124:	76 13       	cpse	r23, r22
     126:	58 13       	cpse	r21, r24
     128:	2b 0e       	add	r2, r27
     12a:	2b 0e       	add	r2, r27
     12c:	2b 0e       	add	r2, r27
     12e:	2b 0e       	add	r2, r27
     130:	2b 0e       	add	r2, r27
     132:	2b 0e       	add	r2, r27
     134:	2b 0e       	add	r2, r27
     136:	2b 0e       	add	r2, r27
     138:	2b 0e       	add	r2, r27
     13a:	2b 0e       	add	r2, r27
     13c:	2b 0e       	add	r2, r27
     13e:	2b 0e       	add	r2, r27
     140:	d6 15       	cp	r29, r6
     142:	69 14       	cp	r6, r9
     144:	2b 0e       	add	r2, r27
     146:	2b 0e       	add	r2, r27
     148:	63 15       	cp	r22, r3
     14a:	2f 16       	cp	r2, r31
     14c:	b0 15       	cp	r27, r0
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ea e9       	ldi	r30, 0x9A	; 154
     194:	f4 e5       	ldi	r31, 0x54	; 84
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	ae 31       	cpi	r26, 0x1E	; 30
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	ae e1       	ldi	r26, 0x1E	; 30
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a2 38       	cpi	r26, 0x82	; 130
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <main>
     1b6:	0c 94 4c 2a 	jmp	0x5498	; 0x5498 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <myAbs>:

unsigned int myAbs(int i) {
	if(i < 0) {
		return i*(-1);
	} else {
		return -i;
     1be:	22 27       	eor	r18, r18
     1c0:	33 27       	eor	r19, r19
     1c2:	28 1b       	sub	r18, r24
     1c4:	39 0b       	sbc	r19, r25
	}
}
     1c6:	c9 01       	movw	r24, r18
     1c8:	08 95       	ret

000001ca <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     1ca:	ea e7       	ldi	r30, 0x7A	; 122
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	86 60       	ori	r24, 0x06	; 6
     1d2:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     1d4:	ac e7       	ldi	r26, 0x7C	; 124
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	8c 91       	ld	r24, X
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     1de:	80 81       	ld	r24, Z
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     1e4:	ab e7       	ldi	r26, 0x7B	; 123
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	8c 91       	ld	r24, X
     1ea:	88 7f       	andi	r24, 0xF8	; 248
     1ec:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     1ee:	80 81       	ld	r24, Z
     1f0:	88 60       	ori	r24, 0x08	; 8
     1f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     1f4:	80 81       	ld	r24, Z
     1f6:	80 68       	ori	r24, 0x80	; 128
     1f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     1fa:	80 81       	ld	r24, Z
     1fc:	80 64       	ori	r24, 0x40	; 64
     1fe:	80 83       	st	Z, r24

}
     200:	08 95       	ret

00000202 <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	0b b6       	in	r0, 0x3b	; 59
     20c:	0f 92       	push	r0
     20e:	11 24       	eor	r1, r1
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;		// this variable is used to have basic delays based on the adc interrupt timing (one interrupt every 104 us)
     21e:	80 91 46 04 	lds	r24, 0x0446
     222:	90 91 47 04 	lds	r25, 0x0447
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	90 93 47 04 	sts	0x0447, r25
     22c:	80 93 46 04 	sts	0x0446, r24

	int value = ADCL;			// must be read first!!
     230:	80 91 78 00 	lds	r24, 0x0078
     234:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
     236:	40 91 79 00 	lds	r20, 0x0079
     23a:	34 2f       	mov	r19, r20
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	82 2b       	or	r24, r18
     240:	93 2b       	or	r25, r19

	// save the last data
	switch(adcSaveDataTo) {
     242:	20 91 89 03 	lds	r18, 0x0389
     246:	22 30       	cpi	r18, 0x02	; 2
     248:	09 f4       	brne	.+2      	; 0x24c <__vector_29+0x4a>
     24a:	12 c1       	rjmp	.+548    	; 0x470 <__vector_29+0x26e>
     24c:	23 30       	cpi	r18, 0x03	; 3
     24e:	08 f4       	brcc	.+2      	; 0x252 <__vector_29+0x50>
     250:	44 c0       	rjmp	.+136    	; 0x2da <__vector_29+0xd8>
     252:	23 30       	cpi	r18, 0x03	; 3
     254:	09 f4       	brne	.+2      	; 0x258 <__vector_29+0x56>
     256:	ff c0       	rjmp	.+510    	; 0x456 <__vector_29+0x254>
     258:	24 30       	cpi	r18, 0x04	; 4
     25a:	09 f4       	brne	.+2      	; 0x25e <__vector_29+0x5c>
     25c:	d1 c0       	rjmp	.+418    	; 0x400 <__vector_29+0x1fe>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     25e:	80 91 8a 03 	lds	r24, 0x038A
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	09 f4       	brne	.+2      	; 0x268 <__vector_29+0x66>
     266:	b8 c0       	rjmp	.+368    	; 0x3d8 <__vector_29+0x1d6>
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	08 f0       	brcs	.+2      	; 0x26e <__vector_29+0x6c>
     26c:	52 c0       	rjmp	.+164    	; 0x312 <__vector_29+0x110>
     26e:	88 23       	and	r24, r24
     270:	09 f0       	breq	.+2      	; 0x274 <__vector_29+0x72>
     272:	8d c0       	rjmp	.+282    	; 0x38e <__vector_29+0x18c>

		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
     274:	80 91 24 03 	lds	r24, 0x0324
     278:	86 95       	lsr	r24
     27a:	80 93 23 03 	sts	0x0323, r24
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
     27e:	80 91 8b 03 	lds	r24, 0x038B
     282:	88 23       	and	r24, r24
     284:	09 f0       	breq	.+2      	; 0x288 <__vector_29+0x86>
     286:	25 c1       	rjmp	.+586    	; 0x4d2 <__vector_29+0x2d0>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 89 03 	sts	0x0389, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 8a 03 	sts	0x038A, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     294:	90 91 23 03 	lds	r25, 0x0323
     298:	98 30       	cpi	r25, 0x08	; 8
     29a:	08 f0       	brcs	.+2      	; 0x29e <__vector_29+0x9c>
     29c:	6d c0       	rjmp	.+218    	; 0x378 <__vector_29+0x176>
		ADCSRB &= ~(1 << MUX5);
     29e:	90 91 7b 00 	lds	r25, 0x007B
     2a2:	97 7f       	andi	r25, 0xF7	; 247
     2a4:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
     2a8:	90 91 23 03 	lds	r25, 0x0323
     2ac:	90 5c       	subi	r25, 0xC0	; 192
     2ae:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	21 f4       	brne	.+8      	; 0x2be <__vector_29+0xbc>
		PORTJ &= 0xF0;
		PORTA = 0x00;
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
     2bc:	12 b8       	out	0x02, r1	; 2

	}

//	PORTB |= (1 << 7);

}
     2be:	ff 91       	pop	r31
     2c0:	ef 91       	pop	r30
     2c2:	9f 91       	pop	r25
     2c4:	8f 91       	pop	r24
     2c6:	4f 91       	pop	r20
     2c8:	3f 91       	pop	r19
     2ca:	2f 91       	pop	r18
     2cc:	0f 90       	pop	r0
     2ce:	0b be       	out	0x3b, r0	; 59
     2d0:	0f 90       	pop	r0
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     2da:	22 23       	and	r18, r18
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <__vector_29+0xde>
     2de:	68 c0       	rjmp	.+208    	; 0x3b0 <__vector_29+0x1ae>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     2e0:	20 91 24 03 	lds	r18, 0x0324
     2e4:	2e 30       	cpi	r18, 0x0E	; 14
     2e6:	09 f4       	brne	.+2      	; 0x2ea <__vector_29+0xe8>
     2e8:	02 c1       	rjmp	.+516    	; 0x4ee <__vector_29+0x2ec>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     2ea:	e2 2f       	mov	r30, r18
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e7 5d       	subi	r30, 0xD7	; 215
     2f4:	fc 4f       	sbci	r31, 0xFC	; 252
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24
			}
			currentProx++;
     2fa:	2f 5f       	subi	r18, 0xFF	; 255
     2fc:	20 93 24 03 	sts	0x0324, r18
			if(currentProx > 23) {
     300:	28 31       	cpi	r18, 0x18	; 24
     302:	08 f4       	brcc	.+2      	; 0x306 <__vector_29+0x104>
     304:	ac cf       	rjmp	.-168    	; 0x25e <__vector_29+0x5c>
				currentProx = 0;
     306:	10 92 24 03 	sts	0x0324, r1
				updateProx = 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 92 03 	sts	0x0392, r24
     310:	a6 cf       	rjmp	.-180    	; 0x25e <__vector_29+0x5c>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	09 f4       	brne	.+2      	; 0x318 <__vector_29+0x116>
     316:	8b c0       	rjmp	.+278    	; 0x42e <__vector_29+0x22c>
     318:	84 30       	cpi	r24, 0x04	; 4
     31a:	09 f0       	breq	.+2      	; 0x31e <__vector_29+0x11c>
     31c:	bb cf       	rjmp	.-138    	; 0x294 <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
     31e:	90 91 26 03 	lds	r25, 0x0326
     322:	90 93 23 03 	sts	0x0323, r25
			rightChannelPhase = rightMotorPhase;	
     326:	90 91 27 03 	lds	r25, 0x0327
     32a:	90 93 8b 03 	sts	0x038B, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     32e:	90 91 8c 03 	lds	r25, 0x038C
     332:	99 23       	and	r25, r25
     334:	09 f0       	breq	.+2      	; 0x338 <__vector_29+0x136>
     336:	ca c0       	rjmp	.+404    	; 0x4cc <__vector_29+0x2ca>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	80 93 89 03 	sts	0x0389, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     33e:	10 92 8a 03 	sts	0x038A, r1

			if(currentProx==14 && measBattery==1) {
     342:	20 91 24 03 	lds	r18, 0x0324
     346:	2e 30       	cpi	r18, 0x0E	; 14
     348:	09 f4       	brne	.+2      	; 0x34c <__vector_29+0x14a>
     34a:	cb c0       	rjmp	.+406    	; 0x4e2 <__vector_29+0x2e0>
				measBattery=2;
				PORTC |= (1 << 6);	// sense enable on
			}

			if(currentProx & 0x01) {	// if active phase
     34c:	82 2f       	mov	r24, r18
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	20 ff       	sbrs	r18, 0
     352:	b5 c0       	rjmp	.+362    	; 0x4be <__vector_29+0x2bc>
				if(currentProx < 16) {
     354:	20 31       	cpi	r18, 0x10	; 16
     356:	08 f0       	brcs	.+2      	; 0x35a <__vector_29+0x158>
     358:	a2 c0       	rjmp	.+324    	; 0x49e <__vector_29+0x29c>
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     35a:	2e 30       	cpi	r18, 0x0E	; 14
     35c:	09 f4       	brne	.+2      	; 0x360 <__vector_29+0x15e>
     35e:	d9 c0       	rjmp	.+434    	; 0x512 <__vector_29+0x310>
						measBattery=2;
						PORTC |= (1 << 6);	// sense enable on
					} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
     360:	26 95       	lsr	r18
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <__vector_29+0x16a>
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	2a 95       	dec	r18
     36e:	e2 f7       	brpl	.-8      	; 0x368 <__vector_29+0x166>
     370:	82 b9       	out	0x02, r24	; 2
     372:	80 91 8a 03 	lds	r24, 0x038A
     376:	8e cf       	rjmp	.-228    	; 0x294 <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     378:	90 91 7b 00 	lds	r25, 0x007B
     37c:	98 60       	ori	r25, 0x08	; 8
     37e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
     382:	90 91 23 03 	lds	r25, 0x0323
     386:	98 5c       	subi	r25, 0xC8	; 200
     388:	90 93 7c 00 	sts	0x007C, r25
     38c:	92 cf       	rjmp	.-220    	; 0x2b2 <__vector_29+0xb0>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	09 f0       	breq	.+2      	; 0x394 <__vector_29+0x192>
     392:	80 cf       	rjmp	.-256    	; 0x294 <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
     394:	80 91 25 03 	lds	r24, 0x0325
     398:	80 93 23 03 	sts	0x0323, r24
			leftChannelPhase = leftMotorPhase;
     39c:	80 91 28 03 	lds	r24, 0x0328
     3a0:	80 93 8c 03 	sts	0x038C, r24
			adcSaveDataTo = SAVE_TO_PROX;
     3a4:	10 92 89 03 	sts	0x0389, r1
			adcSamplingState = 2;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	80 93 8a 03 	sts	0x038A, r24
			break;
     3ae:	72 cf       	rjmp	.-284    	; 0x294 <__vector_29+0x92>

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     3b0:	21 30       	cpi	r18, 0x01	; 1
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_29+0x1b4>
     3b4:	54 cf       	rjmp	.-344    	; 0x25e <__vector_29+0x5c>
				updateProx = 1;
			}
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     3b6:	20 91 c6 03 	lds	r18, 0x03C6
     3ba:	30 91 c7 03 	lds	r19, 0x03C7
     3be:	28 0f       	add	r18, r24
     3c0:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;
     3c2:	36 95       	lsr	r19
     3c4:	27 95       	ror	r18
     3c6:	30 93 c7 03 	sts	0x03C7, r19
     3ca:	20 93 c6 03 	sts	0x03C6, r18
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     3ce:	80 91 8a 03 	lds	r24, 0x038A
     3d2:	82 30       	cpi	r24, 0x02	; 2
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <__vector_29+0x1d6>
     3d6:	48 cf       	rjmp	.-368    	; 0x268 <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
     3d8:	80 91 26 03 	lds	r24, 0x0326
     3dc:	80 93 23 03 	sts	0x0323, r24
			rightChannelPhase = rightMotorPhase;			// save the phase (active/passive) when the channel is selected
     3e0:	80 91 27 03 	lds	r24, 0x0327
     3e4:	80 93 8b 03 	sts	0x038B, r24
			if(leftChannelPhase == ACTIVE_PHASE) {			// check the phase when the channel was selected, not the current one that could be changed in the meantime
     3e8:	80 91 8c 03 	lds	r24, 0x038C
     3ec:	88 23       	and	r24, r24
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <__vector_29+0x1f0>
     3f0:	74 c0       	rjmp	.+232    	; 0x4da <__vector_29+0x2d8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	80 93 89 03 	sts	0x0389, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	80 93 8a 03 	sts	0x038A, r24
			break;
     3fe:	4a cf       	rjmp	.-364    	; 0x294 <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     400:	20 91 d4 03 	lds	r18, 0x03D4
     404:	30 91 d5 03 	lds	r19, 0x03D5
     408:	28 0f       	add	r18, r24
     40a:	39 1f       	adc	r19, r25
     40c:	30 93 d5 03 	sts	0x03D5, r19
     410:	20 93 d4 03 	sts	0x03D4, r18
			num_lvel_samples_avg++;
     414:	20 91 cc 03 	lds	r18, 0x03CC
     418:	30 91 cd 03 	lds	r19, 0x03CD
     41c:	2f 5f       	subi	r18, 0xFF	; 255
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	30 93 cd 03 	sts	0x03CD, r19
     424:	20 93 cc 03 	sts	0x03CC, r18
			last_right_vel_value = value;
     428:	80 93 1f 04 	sts	0x041F, r24
			break;
     42c:	18 cf       	rjmp	.-464    	; 0x25e <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
     42e:	80 91 25 03 	lds	r24, 0x0325
     432:	80 93 23 03 	sts	0x0323, r24
			leftChannelPhase = leftMotorPhase;
     436:	80 91 28 03 	lds	r24, 0x0328
     43a:	80 93 8c 03 	sts	0x038C, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     43e:	80 91 8b 03 	lds	r24, 0x038B
     442:	88 23       	and	r24, r24
     444:	09 f0       	breq	.+2      	; 0x448 <__vector_29+0x246>
     446:	3e c0       	rjmp	.+124    	; 0x4c4 <__vector_29+0x2c2>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 89 03 	sts	0x0389, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     44e:	84 e0       	ldi	r24, 0x04	; 4
     450:	80 93 8a 03 	sts	0x038A, r24
			break;
     454:	1f cf       	rjmp	.-450    	; 0x294 <__vector_29+0x92>
			num_rvel_samples_avg++;
			last_left_vel_value = value;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     456:	20 91 c4 03 	lds	r18, 0x03C4
     45a:	30 91 c5 03 	lds	r19, 0x03C5
     45e:	28 0f       	add	r18, r24
     460:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
     462:	36 95       	lsr	r19
     464:	27 95       	ror	r18
     466:	30 93 c5 03 	sts	0x03C5, r19
     46a:	20 93 c4 03 	sts	0x03C4, r18
			break;
     46e:	f7 ce       	rjmp	.-530    	; 0x25e <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     470:	20 91 d8 03 	lds	r18, 0x03D8
     474:	30 91 d9 03 	lds	r19, 0x03D9
     478:	28 0f       	add	r18, r24
     47a:	39 1f       	adc	r19, r25
     47c:	30 93 d9 03 	sts	0x03D9, r19
     480:	20 93 d8 03 	sts	0x03D8, r18
			num_rvel_samples_avg++;
     484:	20 91 d0 03 	lds	r18, 0x03D0
     488:	30 91 d1 03 	lds	r19, 0x03D1
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	30 93 d1 03 	sts	0x03D1, r19
     494:	20 93 d0 03 	sts	0x03D0, r18
			last_left_vel_value = value;
     498:	80 93 1e 04 	sts	0x041E, r24
			break;
     49c:	e0 ce       	rjmp	.-576    	; 0x25e <__vector_29+0x5c>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif
					
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));
     49e:	40 91 05 01 	lds	r20, 0x0105
     4a2:	40 97       	sbiw	r24, 0x10	; 16
     4a4:	95 95       	asr	r25
     4a6:	87 95       	ror	r24
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__vector_29+0x2b0>
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	8a 95       	dec	r24
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__vector_29+0x2ac>
     4b6:	20 95       	com	r18
     4b8:	24 23       	and	r18, r20
     4ba:	20 93 05 01 	sts	0x0105, r18
     4be:	80 91 8a 03 	lds	r24, 0x038A
     4c2:	e8 ce       	rjmp	.-560    	; 0x294 <__vector_29+0x92>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 89 03 	sts	0x0389, r24
     4ca:	c1 cf       	rjmp	.-126    	; 0x44e <__vector_29+0x24c>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     4cc:	80 93 89 03 	sts	0x0389, r24
     4d0:	36 cf       	rjmp	.-404    	; 0x33e <__vector_29+0x13c>
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	80 93 89 03 	sts	0x0389, r24
     4d8:	da ce       	rjmp	.-588    	; 0x28e <__vector_29+0x8c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;			// save the phase (active/passive) when the channel is selected
			if(leftChannelPhase == ACTIVE_PHASE) {			// check the phase when the channel was selected, not the current one that could be changed in the meantime
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	80 93 89 03 	sts	0x0389, r24
     4e0:	8b cf       	rjmp	.-234    	; 0x3f8 <__vector_29+0x1f6>
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
     4e2:	80 91 8f 03 	lds	r24, 0x038F
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	79 f0       	breq	.+30     	; 0x508 <__vector_29+0x306>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	d3 ce       	rjmp	.-602    	; 0x294 <__vector_29+0x92>

	// save the last data
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     4ee:	30 91 8f 03 	lds	r19, 0x038F
     4f2:	32 30       	cpi	r19, 0x02	; 2
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <__vector_29+0x2f6>
     4f6:	f9 ce       	rjmp	.-526    	; 0x2ea <__vector_29+0xe8>
				batteryLevel = value;
     4f8:	90 93 8e 03 	sts	0x038E, r25
     4fc:	80 93 8d 03 	sts	0x038D, r24
				measBattery = 0;
     500:	10 92 8f 03 	sts	0x038F, r1
				PORTC &= ~(1 << 6);
     504:	46 98       	cbi	0x08, 6	; 8
     506:	f9 ce       	rjmp	.-526    	; 0x2fa <__vector_29+0xf8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	80 93 8f 03 	sts	0x038F, r24
				PORTC |= (1 << 6);	// sense enable on
     50e:	46 9a       	sbi	0x08, 6	; 8
     510:	1d cf       	rjmp	.-454    	; 0x34c <__vector_29+0x14a>
			}

			if(currentProx & 0x01) {	// if active phase
				if(currentProx < 16) {
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     512:	80 91 8f 03 	lds	r24, 0x038F
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	09 f0       	breq	.+2      	; 0x51c <__vector_29+0x31a>
     51a:	22 cf       	rjmp	.-444    	; 0x360 <__vector_29+0x15e>
						measBattery=2;
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	80 93 8f 03 	sts	0x038F, r24
						PORTC |= (1 << 6);	// sense enable on
     522:	46 9a       	sbi	0x08, 6	; 8
     524:	80 91 8a 03 	lds	r24, 0x038A
     528:	b5 ce       	rjmp	.-662    	; 0x294 <__vector_29+0x92>

0000052a <initPwm>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
     52a:	e0 e8       	ldi	r30, 0x80	; 128
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	89 6a       	ori	r24, 0xA9	; 169
     532:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
     534:	e1 e8       	ldi	r30, 0x81	; 129
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	89 60       	ori	r24, 0x09	; 9
     53c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
     53e:	80 91 0c 02 	lds	r24, 0x020C
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	90 93 89 00 	sts	0x0089, r25
     548:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
     54c:	80 91 0d 02 	lds	r24, 0x020D
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 8b 00 	sts	0x008B, r25
     556:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
     55a:	80 91 0e 02 	lds	r24, 0x020E
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 8d 00 	sts	0x008D, r25
     564:	80 93 8c 00 	sts	0x008C, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     568:	e0 e9       	ldi	r30, 0x90	; 144
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	83 68       	ori	r24, 0x83	; 131
     570:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     572:	80 81       	ld	r24, Z
     574:	83 60       	ori	r24, 0x03	; 3
     576:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     578:	a1 e9       	ldi	r26, 0x91	; 145
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	8c 91       	ld	r24, X
     57e:	8b 60       	ori	r24, 0x0B	; 11
     580:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     582:	80 91 e0 03 	lds	r24, 0x03E0
     586:	90 91 e1 03 	lds	r25, 0x03E1
     58a:	90 93 99 00 	sts	0x0099, r25
     58e:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     592:	10 92 9b 00 	sts	0x009B, r1
     596:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     59a:	a1 e7       	ldi	r26, 0x71	; 113
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	8c 91       	ld	r24, X
     5a0:	81 60       	ori	r24, 0x01	; 1
     5a2:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     5a4:	80 81       	ld	r24, Z
     5a6:	8f 75       	andi	r24, 0x5F	; 95
     5a8:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     5aa:	8e b1       	in	r24, 0x0e	; 14
     5ac:	87 7e       	andi	r24, 0xE7	; 231
     5ae:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     5b0:	e0 ea       	ldi	r30, 0xA0	; 160
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	83 68       	ori	r24, 0x83	; 131
     5b8:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     5ba:	a1 ea       	ldi	r26, 0xA1	; 161
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	8c 91       	ld	r24, X
     5c0:	8b 60       	ori	r24, 0x0B	; 11
     5c2:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     5c4:	80 91 e4 03 	lds	r24, 0x03E4
     5c8:	90 91 e5 03 	lds	r25, 0x03E5
     5cc:	90 93 a9 00 	sts	0x00A9, r25
     5d0:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     5d4:	10 92 ab 00 	sts	0x00AB, r1
     5d8:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     5dc:	a2 e7       	ldi	r26, 0x72	; 114
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	8c 91       	ld	r24, X
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     5e6:	80 81       	ld	r24, Z
     5e8:	8f 75       	andi	r24, 0x5F	; 95
     5ea:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     5ec:	e2 e0       	ldi	r30, 0x02	; 2
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	80 81       	ld	r24, Z
     5f2:	87 7e       	andi	r24, 0xE7	; 231
     5f4:	80 83       	st	Z, r24


}
     5f6:	08 95       	ret

000005f8 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	leftMotorPhase = ACTIVE_PHASE;
     60a:	10 92 28 03 	sts	0x0328, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     60e:	80 91 c4 03 	lds	r24, 0x03C4
     612:	90 91 c5 03 	lds	r25, 0x03C5
     616:	90 93 c9 03 	sts	0x03C9, r25
     61a:	80 93 c8 03 	sts	0x03C8, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     61e:	80 91 cc 03 	lds	r24, 0x03CC
     622:	90 91 cd 03 	lds	r25, 0x03CD
     626:	90 93 cf 03 	sts	0x03CF, r25
     62a:	80 93 ce 03 	sts	0x03CE, r24
	last_left_vel_sum = left_vel_sum;
     62e:	80 91 d4 03 	lds	r24, 0x03D4
     632:	90 91 d5 03 	lds	r25, 0x03D5
     636:	90 93 d7 03 	sts	0x03D7, r25
     63a:	80 93 d6 03 	sts	0x03D6, r24

	// reset sampling variables
	left_current_avg = 0;
     63e:	10 92 c5 03 	sts	0x03C5, r1
     642:	10 92 c4 03 	sts	0x03C4, r1
	num_lvel_samples_avg = 0;
     646:	10 92 cd 03 	sts	0x03CD, r1
     64a:	10 92 cc 03 	sts	0x03CC, r1
	left_vel_sum = 0;
     64e:	10 92 d5 03 	sts	0x03D5, r1
     652:	10 92 d4 03 	sts	0x03D4, r1

	// start control
	compute_left_vel = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 10 04 	sts	0x0410, r24
	start_control = 1;
     65c:	80 93 12 04 	sts	0x0412, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     660:	80 91 e4 03 	lds	r24, 0x03E4
     664:	90 91 e5 03 	lds	r25, 0x03E5
     668:	a0 91 e6 03 	lds	r26, 0x03E6
     66c:	b0 91 e7 03 	lds	r27, 0x03E7
     670:	00 97       	sbiw	r24, 0x00	; 0
     672:	a1 05       	cpc	r26, r1
     674:	b1 05       	cpc	r27, r1
     676:	29 f0       	breq	.+10     	; 0x682 <__vector_45+0x8a>
//		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
//		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     678:	18 16       	cp	r1, r24
     67a:	19 06       	cpc	r1, r25
     67c:	1a 06       	cpc	r1, r26
     67e:	1b 06       	cpc	r1, r27
     680:	64 f4       	brge	.+24     	; 0x69a <__vector_45+0xa2>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     682:	8f e0       	ldi	r24, 0x0F	; 15
     684:	80 93 25 03 	sts	0x0325, r24
//		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti
//		PORTH &= ~(1 << 4);				// output to 0
//		TCCR4A |= (1 << COM4A1);		// enable OCA
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     69a:	8e e0       	ldi	r24, 0x0E	; 14
     69c:	80 93 25 03 	sts	0x0325, r24
     6a0:	f3 cf       	rjmp	.-26     	; 0x688 <__vector_45+0x90>

000006a2 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 28 03 	sts	0x0328, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     6b4:	8e e0       	ldi	r24, 0x0E	; 14
     6b6:	80 93 25 03 	sts	0x0325, r24

//	PORTB |= (1 << 6);

}
     6ba:	8f 91       	pop	r24
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
     6d0:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 28 03 	sts	0x0328, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     6d8:	8f e0       	ldi	r24, 0x0F	; 15
     6da:	80 93 25 03 	sts	0x0325, r24

//	PORTB |= (1 << 6);

}
     6de:	8f 91       	pop	r24
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	rightMotorPhase = ACTIVE_PHASE;
     6fc:	10 92 27 03 	sts	0x0327, r1

	// copy sampling variables
	last_right_current = right_current_avg;
     700:	80 91 c6 03 	lds	r24, 0x03C6
     704:	90 91 c7 03 	lds	r25, 0x03C7
     708:	90 93 cb 03 	sts	0x03CB, r25
     70c:	80 93 ca 03 	sts	0x03CA, r24
	last_right_vel_sum = right_vel_sum;
     710:	80 91 d8 03 	lds	r24, 0x03D8
     714:	90 91 d9 03 	lds	r25, 0x03D9
     718:	90 93 db 03 	sts	0x03DB, r25
     71c:	80 93 da 03 	sts	0x03DA, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     720:	80 91 d0 03 	lds	r24, 0x03D0
     724:	90 91 d1 03 	lds	r25, 0x03D1
     728:	90 93 d3 03 	sts	0x03D3, r25
     72c:	80 93 d2 03 	sts	0x03D2, r24

	// reset sampling variables
	right_current_avg = 0;
     730:	10 92 c7 03 	sts	0x03C7, r1
     734:	10 92 c6 03 	sts	0x03C6, r1
	right_vel_sum = 0;
     738:	10 92 d9 03 	sts	0x03D9, r1
     73c:	10 92 d8 03 	sts	0x03D8, r1
	num_rvel_samples_avg = 0;
     740:	10 92 d1 03 	sts	0x03D1, r1
     744:	10 92 d0 03 	sts	0x03D0, r1

	// start control
	compute_right_vel = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 11 04 	sts	0x0411, r24

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     74e:	80 91 e0 03 	lds	r24, 0x03E0
     752:	90 91 e1 03 	lds	r25, 0x03E1
     756:	a0 91 e2 03 	lds	r26, 0x03E2
     75a:	b0 91 e3 03 	lds	r27, 0x03E3
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	a1 05       	cpc	r26, r1
     762:	b1 05       	cpc	r27, r1
     764:	29 f0       	breq	.+10     	; 0x770 <__vector_35+0x86>
//		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
//		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     766:	18 16       	cp	r1, r24
     768:	19 06       	cpc	r1, r25
     76a:	1a 06       	cpc	r1, r26
     76c:	1b 06       	cpc	r1, r27
     76e:	64 f4       	brge	.+24     	; 0x788 <__vector_35+0x9e>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     770:	8d e0       	ldi	r24, 0x0D	; 13
     772:	80 93 26 03 	sts	0x0326, r24
//		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti
//		PORTE &= ~(1 << 4);				// output to 0
//		TCCR3A |= (1 << COM3A1);		// enable OCA
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     788:	8c e0       	ldi	r24, 0x0C	; 12
     78a:	80 93 26 03 	sts	0x0326, r24
     78e:	f3 cf       	rjmp	.-26     	; 0x776 <__vector_35+0x8c>

00000790 <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 27 03 	sts	0x0327, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     7a2:	8c e0       	ldi	r24, 0x0C	; 12
     7a4:	80 93 26 03 	sts	0x0326, r24

//	PORTB |= (1 << 6);
}
     7a8:	8f 91       	pop	r24
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 27 03 	sts	0x0327, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     7c6:	8d e0       	ldi	r24, 0x0D	; 13
     7c8:	80 93 26 03 	sts	0x0326, r24

//	PORTB |= (1 << 6);
}
     7cc:	8f 91       	pop	r24
     7ce:	0f 90       	pop	r0
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	0f 90       	pop	r0
     7d4:	1f 90       	pop	r1
     7d6:	18 95       	reti

000007d8 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	00 d0       	rcall	.+0      	; 0x7de <readAccelXYZ+0x6>
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <readAccelXYZ+0x8>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[6];

	if(useAccel == USE_MMAX7455L) {
     7e4:	80 91 2a 04 	lds	r24, 0x042A
     7e8:	88 23       	and	r24, r24
     7ea:	c1 f0       	breq	.+48     	; 0x81c <readAccelXYZ+0x44>
				accZ = ((((int)buff[5]) << 8) | buff[4]) + ((-accOffsetZ)&0x03FF);    // Z axis
			}
			*/
		}

	} else if(useAccel == USE_ADXL345) {	
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <readAccelXYZ+0x1a>
     7f0:	89 c0       	rjmp	.+274    	; 0x904 <readAccelXYZ+0x12c>
			accZ = ((((int)buff[5]) << 8) | buff[4]) - accOffsetZ;    // Z axis
		}

	} else {

		accX = 0;
     7f2:	10 92 2c 04 	sts	0x042C, r1
     7f6:	10 92 2b 04 	sts	0x042B, r1
		accY = 0;
     7fa:	10 92 2e 04 	sts	0x042E, r1
     7fe:	10 92 2d 04 	sts	0x042D, r1
		accZ = 0;
     802:	10 92 30 04 	sts	0x0430, r1
     806:	10 92 2f 04 	sts	0x042F, r1

	}

}
     80a:	26 96       	adiw	r28, 0x06	; 6
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	cf 91       	pop	r28
     818:	df 91       	pop	r29
     81a:	08 95       	ret
	unsigned char buff[6];

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     81c:	80 91 13 02 	lds	r24, 0x0213
     820:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
		i2c_write(0x00);							// sends address to read from
     824:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     826:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     82a:	80 91 13 02 	lds	r24, 0x0213
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
     834:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     83e:	8a 83       	std	Y+2, r24	; 0x02
     840:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     844:	8b 83       	std	Y+3, r24	; 0x03
     846:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     850:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
     852:	0e 94 77 1e 	call	0x3cee	; 0x3cee <i2c_readNak>
     856:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
     858:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>

		if(startCalibration) {
     85c:	80 91 49 04 	lds	r24, 0x0449
     860:	88 23       	and	r24, r24
     862:	f9 f0       	breq	.+62     	; 0x8a2 <readAccelXYZ+0xca>
			// 10 bits valus in 2's complement
			accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     864:	3a 81       	ldd	r19, Y+2	; 0x02
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	82 2b       	or	r24, r18
     86e:	93 2b       	or	r25, r19
     870:	90 93 2c 04 	sts	0x042C, r25
     874:	80 93 2b 04 	sts	0x042B, r24
			accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     878:	3c 81       	ldd	r19, Y+4	; 0x04
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	82 2b       	or	r24, r18
     882:	93 2b       	or	r25, r19
     884:	90 93 2e 04 	sts	0x042E, r25
     888:	80 93 2d 04 	sts	0x042D, r24
			accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     88c:	3e 81       	ldd	r19, Y+6	; 0x06
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	82 2b       	or	r24, r18
     896:	93 2b       	or	r25, r19
     898:	90 93 30 04 	sts	0x0430, r25
     89c:	80 93 2f 04 	sts	0x042F, r24
     8a0:	b4 cf       	rjmp	.-152    	; 0x80a <readAccelXYZ+0x32>
		} else {
			accX = ((((int)buff[1]) << 8) | buff[0]) - accOffsetX;    // X axis
     8a2:	3a 81       	ldd	r19, Y+2	; 0x02
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	82 2b       	or	r24, r18
     8ac:	93 2b       	or	r25, r19
     8ae:	20 91 37 04 	lds	r18, 0x0437
     8b2:	30 91 38 04 	lds	r19, 0x0438
     8b6:	82 1b       	sub	r24, r18
     8b8:	93 0b       	sbc	r25, r19
     8ba:	90 93 2c 04 	sts	0x042C, r25
     8be:	80 93 2b 04 	sts	0x042B, r24
			accY = ((((int)buff[3]) << 8) | buff[2]) - accOffsetY;    // Y axis
     8c2:	3c 81       	ldd	r19, Y+4	; 0x04
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	82 2b       	or	r24, r18
     8cc:	93 2b       	or	r25, r19
     8ce:	20 91 39 04 	lds	r18, 0x0439
     8d2:	30 91 3a 04 	lds	r19, 0x043A
     8d6:	82 1b       	sub	r24, r18
     8d8:	93 0b       	sbc	r25, r19
     8da:	90 93 2e 04 	sts	0x042E, r25
     8de:	80 93 2d 04 	sts	0x042D, r24
			accZ = ((((int)buff[5]) << 8) | buff[4]) - accOffsetZ;    // Z axis
     8e2:	3e 81       	ldd	r19, Y+6	; 0x06
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	82 2b       	or	r24, r18
     8ec:	93 2b       	or	r25, r19
     8ee:	20 91 3b 04 	lds	r18, 0x043B
     8f2:	30 91 3c 04 	lds	r19, 0x043C
     8f6:	82 1b       	sub	r24, r18
     8f8:	93 0b       	sbc	r25, r19
     8fa:	90 93 30 04 	sts	0x0430, r25
     8fe:	80 93 2f 04 	sts	0x042F, r24
     902:	83 cf       	rjmp	.-250    	; 0x80a <readAccelXYZ+0x32>
		}

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     904:	80 91 13 02 	lds	r24, 0x0213
     908:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
		i2c_write(0x32);							// sends address to read from
     90c:	82 e3       	ldi	r24, 0x32	; 50
     90e:	8b cf       	rjmp	.-234    	; 0x826 <readAccelXYZ+0x4e>

00000910 <readAccelXY>:

	}

}

void readAccelXY() {
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	0f 92       	push	r0
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[4];


	if(useAccel == USE_MMAX7455L) {
     920:	80 91 2a 04 	lds	r24, 0x042A
     924:	88 23       	and	r24, r24
     926:	91 f0       	breq	.+36     	; 0x94c <readAccelXY+0x3c>
		if(accY & 0x02000) {
			accY |= 0xFC00;
		}
*/

	} else if(useAccel == USE_ADXL345) {
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	09 f4       	brne	.+2      	; 0x92e <readAccelXY+0x1e>
     92c:	70 c0       	rjmp	.+224    	; 0xa0e <readAccelXY+0xfe>
			accY = ((((int)buff[3]) << 8) | buff[2]) - accOffsetY;    // Y axis
		}

	} else {

		accX = 0;
     92e:	10 92 2c 04 	sts	0x042C, r1
     932:	10 92 2b 04 	sts	0x042B, r1
		accY = 0;
     936:	10 92 2e 04 	sts	0x042E, r1
     93a:	10 92 2d 04 	sts	0x042D, r1

	}


}
     93e:	0f 90       	pop	r0
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     94c:	80 91 13 02 	lds	r24, 0x0213
     950:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
		i2c_write(0x00);							// sends address to read from
     954:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     956:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     95a:	80 91 13 02 	lds	r24, 0x0213
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
     964:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     968:	08 2f       	mov	r16, r24
     96a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     96e:	f8 2e       	mov	r15, r24
     970:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <i2c_readAck>
     974:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
     976:	0e 94 77 1e 	call	0x3cee	; 0x3cee <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>

		if(startCalibration) {
     980:	90 91 49 04 	lds	r25, 0x0449
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	99 23       	and	r25, r25
     988:	d9 f0       	breq	.+54     	; 0x9c0 <readAccelXY+0xb0>
			accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     98a:	5f 2d       	mov	r21, r15
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	20 2f       	mov	r18, r16
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	24 2b       	or	r18, r20
     994:	35 2b       	or	r19, r21
     996:	30 93 2c 04 	sts	0x042C, r19
     99a:	20 93 2b 04 	sts	0x042B, r18
			accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     99e:	38 2f       	mov	r19, r24
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	81 2f       	mov	r24, r17
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	82 2b       	or	r24, r18
     9a8:	93 2b       	or	r25, r19
     9aa:	90 93 2e 04 	sts	0x042E, r25
     9ae:	80 93 2d 04 	sts	0x042D, r24
		accY = 0;

	}


}
     9b2:	0f 90       	pop	r0
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	08 95       	ret

		if(startCalibration) {
			accX = (((int)buff[1]) << 8) | buff[0];    // X axis
			accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		} else {
			accX = ((((int)buff[1]) << 8) | buff[0]) - accOffsetX;    // X axis
     9c0:	5f 2d       	mov	r21, r15
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	20 2f       	mov	r18, r16
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	24 2b       	or	r18, r20
     9ca:	35 2b       	or	r19, r21
     9cc:	40 91 37 04 	lds	r20, 0x0437
     9d0:	50 91 38 04 	lds	r21, 0x0438
     9d4:	24 1b       	sub	r18, r20
     9d6:	35 0b       	sbc	r19, r21
     9d8:	30 93 2c 04 	sts	0x042C, r19
     9dc:	20 93 2b 04 	sts	0x042B, r18
			accY = ((((int)buff[3]) << 8) | buff[2]) - accOffsetY;    // Y axis
     9e0:	38 2f       	mov	r19, r24
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	81 2f       	mov	r24, r17
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	82 2b       	or	r24, r18
     9ea:	93 2b       	or	r25, r19
     9ec:	20 91 39 04 	lds	r18, 0x0439
     9f0:	30 91 3a 04 	lds	r19, 0x043A
     9f4:	82 1b       	sub	r24, r18
     9f6:	93 0b       	sbc	r25, r19
     9f8:	90 93 2e 04 	sts	0x042E, r25
     9fc:	80 93 2d 04 	sts	0x042D, r24
		accY = 0;

	}


}
     a00:	0f 90       	pop	r0
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	08 95       	ret
*/

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     a0e:	80 91 13 02 	lds	r24, 0x0213
     a12:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
		i2c_write(0x32);							// sends address to read from
     a16:	82 e3       	ldi	r24, 0x32	; 50
     a18:	9e cf       	rjmp	.-196    	; 0x956 <readAccelXY+0x46>

00000a1a <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     a1a:	80 91 13 02 	lds	r24, 0x0213
     a1e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     a22:	88 23       	and	r24, r24
     a24:	51 f4       	brne	.+20     	; 0xa3a <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     a26:	86 e1       	ldi	r24, 0x16	; 22
     a28:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     a2c:	85 e4       	ldi	r24, 0x45	; 69
     a2e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a32:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	return 0;
     a36:	80 e0       	ldi	r24, 0x00	; 0

}
     a38:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     a3a:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
		return 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	08 95       	ret

00000a42 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     a42:	80 91 13 02 	lds	r24, 0x0213
     a46:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     a4a:	88 23       	and	r24, r24
     a4c:	31 f5       	brne	.+76     	; 0xa9a <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     a4e:	8d e2       	ldi	r24, 0x2D	; 45
     a50:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     a54:	88 e0       	ldi	r24, 0x08	; 8
     a56:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a5a:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     a5e:	80 91 13 02 	lds	r24, 0x0213
     a62:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     a66:	88 23       	and	r24, r24
     a68:	c1 f4       	brne	.+48     	; 0xa9a <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     a6a:	81 e3       	ldi	r24, 0x31	; 49
     a6c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a76:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     a7a:	80 91 13 02 	lds	r24, 0x0213
     a7e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     a82:	88 23       	and	r24, r24
     a84:	51 f4       	brne	.+20     	; 0xa9a <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     a86:	8c e2       	ldi	r24, 0x2C	; 44
     a88:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     a8c:	89 e0       	ldi	r24, 0x09	; 9
     a8e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a92:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	return 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0

}
     a98:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     a9a:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
		return 1;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	08 95       	ret

00000aa2 <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     aa2:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     aa6:	80 91 13 02 	lds	r24, 0x0213
     aaa:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     aae:	88 23       	and	r24, r24
     ab0:	49 f4       	brne	.+18     	; 0xac4 <initI2C+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     ab2:	86 e1       	ldi	r24, 0x16	; 22
     ab4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     ab8:	85 e4       	ldi	r24, 0x45	; 69
     aba:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     abe:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
     ac2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     ac4:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     ac8:	86 ea       	ldi	r24, 0xA6	; 166
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 14 02 	sts	0x0214, r25
     ad0:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     ad4:	86 ea       	ldi	r24, 0xA6	; 166
     ad6:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     ada:	88 23       	and	r24, r24
     adc:	41 f5       	brne	.+80     	; 0xb2e <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     ade:	8d e2       	ldi	r24, 0x2D	; 45
     ae0:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     aea:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     aee:	80 91 13 02 	lds	r24, 0x0213
     af2:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     af6:	88 23       	and	r24, r24
     af8:	d1 f4       	brne	.+52     	; 0xb2e <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     afa:	81 e3       	ldi	r24, 0x31	; 49
     afc:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     b06:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     b0a:	80 91 13 02 	lds	r24, 0x0213
     b0e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     b12:	88 23       	and	r24, r24
     b14:	61 f4       	brne	.+24     	; 0xb2e <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     b16:	8c e2       	ldi	r24, 0x2C	; 44
     b18:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     b1c:	89 e0       	ldi	r24, 0x09	; 9
     b1e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     b22:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 2a 04 	sts	0x042A, r24
     b2c:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     b2e:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	80 93 2a 04 	sts	0x042A, r24
     b38:	08 95       	ret

00000b3a <calibrateAccelerometer>:
		}
	}

}

void calibrateAccelerometer() {
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29

	int j=0;
	accOffsetX = 0;
     b3e:	10 92 38 04 	sts	0x0438, r1
     b42:	10 92 37 04 	sts	0x0437, r1
	accOffsetY = 0;
     b46:	10 92 3a 04 	sts	0x043A, r1
     b4a:	10 92 39 04 	sts	0x0439, r1
	accOffsetZ = 0;
     b4e:	10 92 3c 04 	sts	0x043C, r1
     b52:	10 92 3b 04 	sts	0x043B, r1
     b56:	c2 e3       	ldi	r28, 0x32	; 50
     b58:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     b5a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <readAccelXYZ>
		accOffsetX += accX;
     b5e:	80 91 2b 04 	lds	r24, 0x042B
     b62:	90 91 2c 04 	lds	r25, 0x042C
     b66:	20 91 37 04 	lds	r18, 0x0437
     b6a:	30 91 38 04 	lds	r19, 0x0438
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	90 93 38 04 	sts	0x0438, r25
     b76:	80 93 37 04 	sts	0x0437, r24
		accOffsetY += accY;
     b7a:	e0 91 2d 04 	lds	r30, 0x042D
     b7e:	f0 91 2e 04 	lds	r31, 0x042E
     b82:	20 91 39 04 	lds	r18, 0x0439
     b86:	30 91 3a 04 	lds	r19, 0x043A
     b8a:	e2 0f       	add	r30, r18
     b8c:	f3 1f       	adc	r31, r19
     b8e:	f0 93 3a 04 	sts	0x043A, r31
     b92:	e0 93 39 04 	sts	0x0439, r30
		accOffsetZ += accZ;
     b96:	20 91 2f 04 	lds	r18, 0x042F
     b9a:	30 91 30 04 	lds	r19, 0x0430
     b9e:	40 91 3b 04 	lds	r20, 0x043B
     ba2:	50 91 3c 04 	lds	r21, 0x043C
     ba6:	24 0f       	add	r18, r20
     ba8:	35 1f       	adc	r19, r21
     baa:	30 93 3c 04 	sts	0x043C, r19
     bae:	20 93 3b 04 	sts	0x043B, r18
     bb2:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     bb4:	91 f6       	brne	.-92     	; 0xb5a <calibrateAccelerometer+0x20>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     bb6:	c2 e3       	ldi	r28, 0x32	; 50
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
     bba:	be 01       	movw	r22, r28
     bbc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__divmodhi4>
     bc0:	70 93 38 04 	sts	0x0438, r23
     bc4:	60 93 37 04 	sts	0x0437, r22
	accOffsetY = accOffsetY/50;
     bc8:	cf 01       	movw	r24, r30
     bca:	be 01       	movw	r22, r28
     bcc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__divmodhi4>
     bd0:	70 93 3a 04 	sts	0x043A, r23
     bd4:	60 93 39 04 	sts	0x0439, r22
	accOffsetZ = accOffsetZ/50;
     bd8:	c9 01       	movw	r24, r18
     bda:	be 01       	movw	r22, r28
     bdc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__divmodhi4>
     be0:	70 93 3c 04 	sts	0x043C, r23
     be4:	60 93 3b 04 	sts	0x043B, r22

}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <computeAngle>:

void computeAngle() {
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17

	readAccelXY();
     bf6:	0e 94 88 04 	call	0x910	; 0x910 <readAccelXY>
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     bfa:	60 91 2b 04 	lds	r22, 0x042B
     bfe:	70 91 2c 04 	lds	r23, 0x042C
     c02:	88 27       	eor	r24, r24
     c04:	77 fd       	sbrc	r23, 7
     c06:	80 95       	com	r24
     c08:	98 2f       	mov	r25, r24
     c0a:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
     c0e:	7b 01       	movw	r14, r22
     c10:	8c 01       	movw	r16, r24
     c12:	60 91 2d 04 	lds	r22, 0x042D
     c16:	70 91 2e 04 	lds	r23, 0x042E
     c1a:	88 27       	eor	r24, r24
     c1c:	77 fd       	sbrc	r23, 7
     c1e:	80 95       	com	r24
     c20:	98 2f       	mov	r25, r24
     c22:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	c8 01       	movw	r24, r16
     c2c:	b7 01       	movw	r22, r14
     c2e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <atan2>
     c32:	21 ee       	ldi	r18, 0xE1	; 225
     c34:	3e e2       	ldi	r19, 0x2E	; 46
     c36:	45 e6       	ldi	r20, 0x65	; 101
     c38:	52 e4       	ldi	r21, 0x42	; 66
     c3a:	0e 94 88 22 	call	0x4510	; 0x4510 <__mulsf3>
     c3e:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
     c42:	9b 01       	movw	r18, r22
     c44:	70 93 3e 04 	sts	0x043E, r23
     c48:	60 93 3d 04 	sts	0x043D, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     c4c:	77 ff       	sbrs	r23, 7
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <computeAngle+0x6e>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     c50:	28 59       	subi	r18, 0x98	; 152
     c52:	3e 4f       	sbci	r19, 0xFE	; 254
     c54:	30 93 3e 04 	sts	0x043E, r19
     c58:	20 93 3d 04 	sts	0x043D, r18
	}

}
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	08 95       	ret

00000c66 <initPeripherals>:

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     c66:	f8 94       	cli

	initPortsIO();
     c68:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     c6c:	80 91 7a 00 	lds	r24, 0x007A
     c70:	86 60       	ori	r24, 0x06	; 6
     c72:	80 93 7a 00 	sts	0x007A, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     c76:	80 91 7c 00 	lds	r24, 0x007C
     c7a:	80 64       	ori	r24, 0x40	; 64
     c7c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     c80:	80 91 7a 00 	lds	r24, 0x007A
     c84:	80 62       	ori	r24, 0x20	; 32
     c86:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     c8a:	80 91 7b 00 	lds	r24, 0x007B
     c8e:	88 7f       	andi	r24, 0xF8	; 248
     c90:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     c94:	80 91 7a 00 	lds	r24, 0x007A
     c98:	88 60       	ori	r24, 0x08	; 8
     c9a:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     c9e:	80 91 7a 00 	lds	r24, 0x007A
     ca2:	80 68       	ori	r24, 0x80	; 128
     ca4:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     ca8:	80 91 7a 00 	lds	r24, 0x007A
     cac:	80 64       	ori	r24, 0x40	; 64
     cae:	80 93 7a 00 	sts	0x007A, r24

	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
     cb2:	0e 94 95 02 	call	0x52a	; 0x52a <initPwm>
	initSPI();
     cb6:	0e 94 90 17 	call	0x2f20	; 0x2f20 <initSPI>
	mirf_init();
     cba:	0e 94 43 18 	call	0x3086	; 0x3086 <mirf_init>
	initUsart();
     cbe:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <initUsart>
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     cc2:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     cc6:	80 91 13 02 	lds	r24, 0x0213
     cca:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     cce:	88 23       	and	r24, r24
     cd0:	51 f4       	brne	.+20     	; 0xce6 <initPeripherals+0x80>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     cd2:	86 e1       	ldi	r24, 0x16	; 22
     cd4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     cd8:	85 e4       	ldi	r24, 0x45	; 69
     cda:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     cde:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     ce2:	78 94       	sei

	

}
     ce4:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     ce6:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     cea:	86 ea       	ldi	r24, 0xA6	; 166
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 14 02 	sts	0x0214, r25
     cf2:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     cf6:	86 ea       	ldi	r24, 0xA6	; 166
     cf8:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     cfc:	88 23       	and	r24, r24
     cfe:	41 f5       	brne	.+80     	; 0xd50 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     d00:	8d e2       	ldi	r24, 0x2D	; 45
     d02:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     d0c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     d10:	80 91 13 02 	lds	r24, 0x0213
     d14:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     d18:	88 23       	and	r24, r24
     d1a:	d1 f4       	brne	.+52     	; 0xd50 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     d1c:	81 e3       	ldi	r24, 0x31	; 49
     d1e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     d28:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     d2c:	80 91 13 02 	lds	r24, 0x0213
     d30:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     d34:	88 23       	and	r24, r24
     d36:	61 f4       	brne	.+24     	; 0xd50 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     d38:	8c e2       	ldi	r24, 0x2C	; 44
     d3a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     d3e:	89 e0       	ldi	r24, 0x09	; 9
     d40:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     d44:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 2a 04 	sts	0x042A, r24
     d4e:	c9 cf       	rjmp	.-110    	; 0xce2 <initPeripherals+0x7c>
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     d50:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	80 93 2a 04 	sts	0x042A, r24
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     d5a:	78 94       	sei

	

}
     d5c:	08 95       	ret

00000d5e <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 91 24 04 	lds	r25, 0x0424
     d64:	89 1b       	sub	r24, r25
     d66:	80 93 24 04 	sts	0x0424, r24

	if(blinkState) {
     d6a:	88 23       	and	r24, r24
     d6c:	39 f4       	brne	.+14     	; 0xd7c <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     d6e:	80 91 80 00 	lds	r24, 0x0080
     d72:	87 7f       	andi	r24, 0xF7	; 247
     d74:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     d78:	2f 98       	cbi	0x05, 7	; 5
     d7a:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     d7c:	80 91 80 00 	lds	r24, 0x0080
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	90 93 8d 00 	sts	0x008D, r25
     d8e:	80 93 8c 00 	sts	0x008C, r24
     d92:	08 95       	ret

00000d94 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     d94:	88 23       	and	r24, r24
     d96:	59 f0       	breq	.+22     	; 0xdae <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     d98:	90 91 80 00 	lds	r25, 0x0080
     d9c:	90 68       	ori	r25, 0x80	; 128
     d9e:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	90 93 89 00 	sts	0x0089, r25
     da8:	80 93 88 00 	sts	0x0088, r24
     dac:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     dae:	80 91 80 00 	lds	r24, 0x0080
     db2:	8f 77       	andi	r24, 0x7F	; 127
     db4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     db8:	2d 98       	cbi	0x05, 5	; 5
     dba:	08 95       	ret

00000dbc <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     dbc:	88 23       	and	r24, r24
     dbe:	59 f0       	breq	.+22     	; 0xdd6 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     dc0:	90 91 80 00 	lds	r25, 0x0080
     dc4:	90 62       	ori	r25, 0x20	; 32
     dc6:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 8b 00 	sts	0x008B, r25
     dd0:	80 93 8a 00 	sts	0x008A, r24
     dd4:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     dd6:	80 91 80 00 	lds	r24, 0x0080
     dda:	8f 7d       	andi	r24, 0xDF	; 223
     ddc:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     de0:	2e 98       	cbi	0x05, 6	; 5
     de2:	08 95       	ret

00000de4 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     de4:	88 23       	and	r24, r24
     de6:	59 f0       	breq	.+22     	; 0xdfe <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     de8:	90 91 80 00 	lds	r25, 0x0080
     dec:	98 60       	ori	r25, 0x08	; 8
     dee:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	90 93 8d 00 	sts	0x008D, r25
     df8:	80 93 8c 00 	sts	0x008C, r24
     dfc:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     dfe:	80 91 80 00 	lds	r24, 0x0080
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     e08:	2f 98       	cbi	0x05, 7	; 5
     e0a:	08 95       	ret

00000e0c <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 45 04 	sts	0x0445, r24
}
     e12:	08 95       	ret

00000e14 <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     e14:	86 b1       	in	r24, 0x06	; 6
     e16:	66 b1       	in	r22, 0x06	; 6
     e18:	26 b1       	in	r18, 0x06	; 6
     e1a:	46 b1       	in	r20, 0x06	; 6
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	28 70       	andi	r18, 0x08	; 8
     e20:	30 70       	andi	r19, 0x00	; 0
     e22:	35 95       	asr	r19
     e24:	27 95       	ror	r18
     e26:	35 95       	asr	r19
     e28:	27 95       	ror	r18
     e2a:	35 95       	asr	r19
     e2c:	27 95       	ror	r18
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	64 70       	andi	r22, 0x04	; 4
     e36:	70 70       	andi	r23, 0x00	; 0
     e38:	75 95       	asr	r23
     e3a:	67 95       	ror	r22
     e3c:	75 95       	asr	r23
     e3e:	67 95       	ror	r22
     e40:	26 0f       	add	r18, r22
     e42:	37 1f       	adc	r19, r23
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	42 70       	andi	r20, 0x02	; 2
     e4c:	50 70       	andi	r21, 0x00	; 0
     e4e:	55 95       	asr	r21
     e50:	47 95       	ror	r20
     e52:	24 0f       	add	r18, r20
     e54:	35 1f       	adc	r19, r21
     e56:	22 0f       	add	r18, r18
     e58:	81 70       	andi	r24, 0x01	; 1
}
     e5a:	82 0f       	add	r24, r18
     e5c:	08 95       	ret

00000e5e <obstacleAvoidance>:

void obstacleAvoidance() {
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
	signed int velX=0, velY=0;
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
     e6e:	80 91 e8 03 	lds	r24, 0x03E8
     e72:	90 91 e9 03 	lds	r25, 0x03E9
     e76:	a0 91 ea 03 	lds	r26, 0x03EA
     e7a:	b0 91 eb 03 	lds	r27, 0x03EB
     e7e:	b7 fd       	sbrc	r27, 7
     e80:	03 c1       	rjmp	.+518    	; 0x1088 <obstacleAvoidance+0x22a>
     e82:	20 91 23 04 	lds	r18, 0x0423
		speedr = -speedr;
	}
	if(pwm_left_desired < 0) {
     e86:	80 91 ec 03 	lds	r24, 0x03EC
     e8a:	90 91 ed 03 	lds	r25, 0x03ED
     e8e:	a0 91 ee 03 	lds	r26, 0x03EE
     e92:	b0 91 ef 03 	lds	r27, 0x03EF
     e96:	b7 fd       	sbrc	r27, 7
     e98:	fd c0       	rjmp	.+506    	; 0x1094 <obstacleAvoidance+0x236>
     e9a:	a0 91 22 04 	lds	r26, 0x0422
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
     e9e:	c2 2f       	mov	r28, r18
     ea0:	d0 e0       	ldi	r29, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
     ea4:	f0 90 5b 03 	lds	r15, 0x035B
     ea8:	00 91 5c 03 	lds	r16, 0x035C
     eac:	90 91 5f 03 	lds	r25, 0x035F
     eb0:	80 91 60 03 	lds	r24, 0x0360
     eb4:	e9 2f       	mov	r30, r25
     eb6:	f8 2f       	mov	r31, r24
     eb8:	f7 fd       	sbrc	r31, 7
     eba:	f2 c0       	rjmp	.+484    	; 0x10a0 <obstacleAvoidance+0x242>
     ebc:	f5 95       	asr	r31
     ebe:	e7 95       	ror	r30
     ec0:	10 91 63 03 	lds	r17, 0x0363
     ec4:	e0 90 64 03 	lds	r14, 0x0364
     ec8:	90 91 67 03 	lds	r25, 0x0367
     ecc:	80 91 68 03 	lds	r24, 0x0368
     ed0:	69 2f       	mov	r22, r25
     ed2:	78 2f       	mov	r23, r24
     ed4:	77 fd       	sbrc	r23, 7
     ed6:	e8 c0       	rjmp	.+464    	; 0x10a8 <obstacleAvoidance+0x24a>
     ed8:	75 95       	asr	r23
     eda:	67 95       	ror	r22
     edc:	70 95       	com	r23
     ede:	61 95       	neg	r22
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
     ee2:	9d 01       	movw	r18, r26
     ee4:	2c 0f       	add	r18, r28
     ee6:	3d 1f       	adc	r19, r29
     ee8:	35 95       	asr	r19
     eea:	27 95       	ror	r18
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
     eec:	8f 2d       	mov	r24, r15
     eee:	90 2f       	mov	r25, r16
     ef0:	97 fd       	sbrc	r25, 7
     ef2:	d8 c0       	rjmp	.+432    	; 0x10a4 <obstacleAvoidance+0x246>
     ef4:	95 95       	asr	r25
     ef6:	87 95       	ror	r24
     ef8:	af 01       	movw	r20, r30
     efa:	48 1b       	sub	r20, r24
     efc:	59 0b       	sbc	r21, r25
     efe:	80 91 61 03 	lds	r24, 0x0361
     f02:	90 91 62 03 	lds	r25, 0x0362
     f06:	48 0f       	add	r20, r24
     f08:	59 1f       	adc	r21, r25
     f0a:	c1 2e       	mov	r12, r17
     f0c:	de 2c       	mov	r13, r14
     f0e:	c6 01       	movw	r24, r12
     f10:	97 fd       	sbrc	r25, 7
     f12:	d5 c0       	rjmp	.+426    	; 0x10be <obstacleAvoidance+0x260>
     f14:	95 95       	asr	r25
     f16:	87 95       	ror	r24
     f18:	84 0f       	add	r24, r20
     f1a:	95 1f       	adc	r25, r21
     f1c:	86 0f       	add	r24, r22
     f1e:	97 1f       	adc	r25, r23
     f20:	40 91 59 03 	lds	r20, 0x0359
     f24:	50 91 5a 03 	lds	r21, 0x035A
     f28:	84 1b       	sub	r24, r20
     f2a:	95 0b       	sbc	r25, r21
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	velX += sumSensorsX/4;
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	96 95       	lsr	r25
     f32:	87 95       	ror	r24
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
     f38:	ca 1b       	sub	r28, r26
     f3a:	db 0b       	sbc	r29, r27
     f3c:	d7 fd       	sbrc	r29, 7
     f3e:	bd c0       	rjmp	.+378    	; 0x10ba <obstacleAvoidance+0x25c>
     f40:	d5 95       	asr	r29
     f42:	c7 95       	ror	r28

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
     f44:	6e 0f       	add	r22, r30
     f46:	7f 1f       	adc	r23, r31
     f48:	20 91 5d 03 	lds	r18, 0x035D
     f4c:	30 91 5e 03 	lds	r19, 0x035E
     f50:	62 0f       	add	r22, r18
     f52:	73 1f       	adc	r23, r19
     f54:	4f 2d       	mov	r20, r15
     f56:	50 2f       	mov	r21, r16
     f58:	57 fd       	sbrc	r21, 7
     f5a:	ac c0       	rjmp	.+344    	; 0x10b4 <obstacleAvoidance+0x256>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	46 0f       	add	r20, r22
     f62:	57 1f       	adc	r21, r23
     f64:	21 2f       	mov	r18, r17
     f66:	3e 2d       	mov	r19, r14
     f68:	37 fd       	sbrc	r19, 7
     f6a:	a1 c0       	rjmp	.+322    	; 0x10ae <obstacleAvoidance+0x250>
     f6c:	35 95       	asr	r19
     f6e:	27 95       	ror	r18
     f70:	42 1b       	sub	r20, r18
     f72:	53 0b       	sbc	r21, r19
     f74:	20 91 65 03 	lds	r18, 0x0365
     f78:	30 91 66 03 	lds	r19, 0x0366
     f7c:	42 1b       	sub	r20, r18
     f7e:	53 0b       	sbc	r21, r19

	velX += sumSensorsX/4;
	velY += sumSensorsY/4;
     f80:	56 95       	lsr	r21
     f82:	47 95       	ror	r20
     f84:	56 95       	lsr	r21
     f86:	47 95       	ror	r20
     f88:	4c 0f       	add	r20, r28
     f8a:	5d 1f       	adc	r21, r29

	speedR = (velX + velY);
     f8c:	9a 01       	movw	r18, r20
     f8e:	28 0f       	add	r18, r24
     f90:	39 1f       	adc	r19, r25
	speedL = (velX - velY);
     f92:	84 1b       	sub	r24, r20
     f94:	95 0b       	sbc	r25, r21

	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL<<2);
	} else {
		pwm_left_working = speedL<<2;
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	aa 27       	eor	r26, r26
     fa0:	97 fd       	sbrc	r25, 7
     fa2:	a0 95       	com	r26
     fa4:	ba 2f       	mov	r27, r26
     fa6:	80 93 19 04 	sts	0x0419, r24
     faa:	90 93 1a 04 	sts	0x041A, r25
     fae:	a0 93 1b 04 	sts	0x041B, r26
     fb2:	b0 93 1c 04 	sts	0x041C, r27

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR<<2);
	} else {
		pwm_right_working = speedR<<2;
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	44 27       	eor	r20, r20
     fc0:	37 fd       	sbrc	r19, 7
     fc2:	40 95       	com	r20
     fc4:	54 2f       	mov	r21, r20
     fc6:	20 93 15 04 	sts	0x0415, r18
     fca:	30 93 16 04 	sts	0x0416, r19
     fce:	40 93 17 04 	sts	0x0417, r20
     fd2:	50 93 18 04 	sts	0x0418, r21
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
     fd6:	24 33       	cpi	r18, 0x34	; 52
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	36 07       	cpc	r19, r22
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	46 07       	cpc	r20, r22
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	56 07       	cpc	r21, r22
     fe4:	64 f0       	brlt	.+24     	; 0xffe <obstacleAvoidance+0x1a0>
     fe6:	23 e3       	ldi	r18, 0x33	; 51
     fe8:	31 e0       	ldi	r19, 0x01	; 1
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	20 93 15 04 	sts	0x0415, r18
     ff2:	30 93 16 04 	sts	0x0416, r19
     ff6:	40 93 17 04 	sts	0x0417, r20
     ffa:	50 93 18 04 	sts	0x0418, r21
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
     ffe:	84 33       	cpi	r24, 0x34	; 52
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	96 07       	cpc	r25, r22
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	a6 07       	cpc	r26, r22
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	b6 07       	cpc	r27, r22
    100c:	64 f0       	brlt	.+24     	; 0x1026 <obstacleAvoidance+0x1c8>
    100e:	83 e3       	ldi	r24, 0x33	; 51
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	80 93 19 04 	sts	0x0419, r24
    101a:	90 93 1a 04 	sts	0x041A, r25
    101e:	a0 93 1b 04 	sts	0x041B, r26
    1022:	b0 93 1c 04 	sts	0x041C, r27
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
    1026:	2d 3c       	cpi	r18, 0xCD	; 205
    1028:	6e ef       	ldi	r22, 0xFE	; 254
    102a:	36 07       	cpc	r19, r22
    102c:	6f ef       	ldi	r22, 0xFF	; 255
    102e:	46 07       	cpc	r20, r22
    1030:	6f ef       	ldi	r22, 0xFF	; 255
    1032:	56 07       	cpc	r21, r22
    1034:	64 f4       	brge	.+24     	; 0x104e <obstacleAvoidance+0x1f0>
    1036:	2d ec       	ldi	r18, 0xCD	; 205
    1038:	3e ef       	ldi	r19, 0xFE	; 254
    103a:	4f ef       	ldi	r20, 0xFF	; 255
    103c:	5f ef       	ldi	r21, 0xFF	; 255
    103e:	20 93 15 04 	sts	0x0415, r18
    1042:	30 93 16 04 	sts	0x0416, r19
    1046:	40 93 17 04 	sts	0x0417, r20
    104a:	50 93 18 04 	sts	0x0418, r21
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    104e:	8d 3c       	cpi	r24, 0xCD	; 205
    1050:	2e ef       	ldi	r18, 0xFE	; 254
    1052:	92 07       	cpc	r25, r18
    1054:	2f ef       	ldi	r18, 0xFF	; 255
    1056:	a2 07       	cpc	r26, r18
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	b2 07       	cpc	r27, r18
    105c:	64 f4       	brge	.+24     	; 0x1076 <obstacleAvoidance+0x218>
    105e:	8d ec       	ldi	r24, 0xCD	; 205
    1060:	9e ef       	ldi	r25, 0xFE	; 254
    1062:	af ef       	ldi	r26, 0xFF	; 255
    1064:	bf ef       	ldi	r27, 0xFF	; 255
    1066:	80 93 19 04 	sts	0x0419, r24
    106a:	90 93 1a 04 	sts	0x041A, r25
    106e:	a0 93 1b 04 	sts	0x041B, r26
    1072:	b0 93 1c 04 	sts	0x041C, r27
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	08 95       	ret
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
		speedr = -speedr;
    1088:	20 91 23 04 	lds	r18, 0x0423
    108c:	21 95       	neg	r18
    108e:	20 93 23 04 	sts	0x0423, r18
    1092:	f9 ce       	rjmp	.-526    	; 0xe86 <obstacleAvoidance+0x28>
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
    1094:	a0 91 22 04 	lds	r26, 0x0422
    1098:	a1 95       	neg	r26
    109a:	a0 93 22 04 	sts	0x0422, r26
    109e:	ff ce       	rjmp	.-514    	; 0xe9e <obstacleAvoidance+0x40>
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    10a0:	31 96       	adiw	r30, 0x01	; 1
    10a2:	0c cf       	rjmp	.-488    	; 0xebc <obstacleAvoidance+0x5e>
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	26 cf       	rjmp	.-436    	; 0xef4 <obstacleAvoidance+0x96>
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	15 cf       	rjmp	.-470    	; 0xed8 <obstacleAvoidance+0x7a>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	5c cf       	rjmp	.-328    	; 0xf6c <obstacleAvoidance+0x10e>
    10b4:	4f 5f       	subi	r20, 0xFF	; 255
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	51 cf       	rjmp	.-350    	; 0xf5c <obstacleAvoidance+0xfe>
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    10ba:	21 96       	adiw	r28, 0x01	; 1
    10bc:	41 cf       	rjmp	.-382    	; 0xf40 <obstacleAvoidance+0xe2>

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	29 cf       	rjmp	.-430    	; 0xf14 <obstacleAvoidance+0xb6>

000010c2 <cliffAvoidance>:

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    10c2:	80 91 49 03 	lds	r24, 0x0349
    10c6:	90 91 4a 03 	lds	r25, 0x034A
    10ca:	20 91 4b 03 	lds	r18, 0x034B
    10ce:	30 91 4c 03 	lds	r19, 0x034C
    10d2:	82 1b       	sub	r24, r18
    10d4:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    10d6:	60 91 4d 03 	lds	r22, 0x034D
    10da:	70 91 4e 03 	lds	r23, 0x034E
    10de:	20 91 4f 03 	lds	r18, 0x034F
    10e2:	30 91 50 03 	lds	r19, 0x0350
    10e6:	62 1b       	sub	r22, r18
    10e8:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    10ea:	40 91 51 03 	lds	r20, 0x0351
    10ee:	50 91 52 03 	lds	r21, 0x0352
    10f2:	20 91 53 03 	lds	r18, 0x0353
    10f6:	30 91 54 03 	lds	r19, 0x0354
    10fa:	42 1b       	sub	r20, r18
    10fc:	53 0b       	sbc	r21, r19
    10fe:	57 fd       	sbrc	r21, 7
    1100:	56 c0       	rjmp	.+172    	; 0x11ae <cliffAvoidance+0xec>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    1102:	20 91 55 03 	lds	r18, 0x0355
    1106:	30 91 56 03 	lds	r19, 0x0356
    110a:	e0 91 57 03 	lds	r30, 0x0357
    110e:	f0 91 58 03 	lds	r31, 0x0358
    1112:	2e 1b       	sub	r18, r30
    1114:	3f 0b       	sbc	r19, r31
    1116:	37 fd       	sbrc	r19, 7
    1118:	53 c0       	rjmp	.+166    	; 0x11c0 <cliffAvoidance+0xfe>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    111a:	97 fd       	sbrc	r25, 7
    111c:	4e c0       	rjmp	.+156    	; 0x11ba <cliffAvoidance+0xf8>
    111e:	90 93 53 04 	sts	0x0453, r25
    1122:	80 93 52 04 	sts	0x0452, r24
	minGround = GROUND_LEFT;
    1126:	e3 e0       	ldi	r30, 0x03	; 3
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	f0 93 15 02 	sts	0x0215, r31
    112e:	e0 93 14 02 	sts	0x0214, r30
	if(g1 < minGroundValue) {
    1132:	77 fd       	sbrc	r23, 7
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <cliffAvoidance+0xf2>
    1136:	68 17       	cp	r22, r24
    1138:	79 07       	cpc	r23, r25
    113a:	58 f4       	brcc	.+22     	; 0x1152 <cliffAvoidance+0x90>
		minGroundValue = g1;
    113c:	70 93 53 04 	sts	0x0453, r23
    1140:	60 93 52 04 	sts	0x0452, r22
		minGround = GROUND_CENTER_LEFT;
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	90 93 15 02 	sts	0x0215, r25
    114c:	80 93 14 02 	sts	0x0214, r24
    1150:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    1152:	48 17       	cp	r20, r24
    1154:	59 07       	cpc	r21, r25
    1156:	58 f4       	brcc	.+22     	; 0x116e <cliffAvoidance+0xac>
		minGroundValue = g2;
    1158:	50 93 53 04 	sts	0x0453, r21
    115c:	40 93 52 04 	sts	0x0452, r20
		minGround = GROUND_CENTER_RIGHT;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	90 93 15 02 	sts	0x0215, r25
    1168:	80 93 14 02 	sts	0x0214, r24
    116c:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	48 f4       	brcc	.+18     	; 0x1186 <cliffAvoidance+0xc4>
		minGroundValue = g3;
    1174:	30 93 53 04 	sts	0x0453, r19
    1178:	20 93 52 04 	sts	0x0452, r18
		minGround = GROUND_RIGHT;
    117c:	10 92 15 02 	sts	0x0215, r1
    1180:	10 92 14 02 	sts	0x0214, r1
    1184:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    1186:	84 37       	cpi	r24, 0x74	; 116
    1188:	91 05       	cpc	r25, r1
    118a:	80 f4       	brcc	.+32     	; 0x11ac <cliffAvoidance+0xea>
		pwm_right_working = 0;
    118c:	10 92 15 04 	sts	0x0415, r1
    1190:	10 92 16 04 	sts	0x0416, r1
    1194:	10 92 17 04 	sts	0x0417, r1
    1198:	10 92 18 04 	sts	0x0418, r1
		pwm_left_working = 0;
    119c:	10 92 19 04 	sts	0x0419, r1
    11a0:	10 92 1a 04 	sts	0x041A, r1
    11a4:	10 92 1b 04 	sts	0x041B, r1
    11a8:	10 92 1c 04 	sts	0x041C, r1
    11ac:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	a7 cf       	rjmp	.-178    	; 0x1102 <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	be cf       	rjmp	.-132    	; 0x1136 <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	af cf       	rjmp	.-162    	; 0x111e <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	aa cf       	rjmp	.-172    	; 0x111a <cliffAvoidance+0x58>

000011c6 <main>:
		pwm_left_working = 0;
	}

}

int main(void) {
    11c6:	2f 92       	push	r2
    11c8:	3f 92       	push	r3
    11ca:	4f 92       	push	r4
    11cc:	5f 92       	push	r5
    11ce:	6f 92       	push	r6
    11d0:	7f 92       	push	r7
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	a8 97       	sbiw	r28, 0x28	; 40
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	choosePeripheral = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
    1200:	0e 94 33 06 	call	0xc66	; 0xc66 <initPeripherals>
//PORTB &= ~(1 << 5);
//	calibrateAccelerometer();
//PORTB |= (1 << 5);


	e_init_remote_control();
    1204:	0e 94 53 19 	call	0x32a6	; 0x32a6 <e_init_remote_control>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
    1208:	ff 24       	eor	r15, r15
    120a:	f3 94       	inc	r15
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    120c:	94 e6       	ldi	r25, 0x64	; 100
    120e:	c9 2e       	mov	r12, r25
    1210:	d1 2c       	mov	r13, r1
	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
		OCR1A = value;
    1212:	8f ef       	ldi	r24, 0xFF	; 255
    1214:	28 2e       	mov	r2, r24
    1216:	31 2c       	mov	r3, r1
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    1218:	ee 24       	eor	r14, r14
    121a:	ea 94       	dec	r14
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    121c:	66 b1       	in	r22, 0x06	; 6
    121e:	46 b1       	in	r20, 0x06	; 6
    1220:	86 b1       	in	r24, 0x06	; 6
    1222:	26 b1       	in	r18, 0x06	; 6
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	88 70       	andi	r24, 0x08	; 8
    1228:	90 70       	andi	r25, 0x00	; 0
    122a:	95 95       	asr	r25
    122c:	87 95       	ror	r24
    122e:	95 95       	asr	r25
    1230:	87 95       	ror	r24
    1232:	95 95       	asr	r25
    1234:	87 95       	ror	r24
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	44 70       	andi	r20, 0x04	; 4
    123e:	50 70       	andi	r21, 0x00	; 0
    1240:	55 95       	asr	r21
    1242:	47 95       	ror	r20
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	84 0f       	add	r24, r20
    124a:	95 1f       	adc	r25, r21
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	22 70       	andi	r18, 0x02	; 2
    1254:	30 70       	andi	r19, 0x00	; 0
    1256:	35 95       	asr	r19
    1258:	27 95       	ror	r18
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	88 0f       	add	r24, r24
    1260:	61 70       	andi	r22, 0x01	; 1
    1262:	86 0f       	add	r24, r22

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		currentSelector = getSelector();
    1264:	80 93 48 04 	sts	0x0448, r24
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
    1268:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <readAccelXYZ>
		//PORTB |= (1 << 6);

		if(updateProx) {
    126c:	80 91 92 03 	lds	r24, 0x0392
    1270:	88 23       	and	r24, r24
    1272:	09 f0       	breq	.+2      	; 0x1276 <main+0xb0>
    1274:	c9 c2       	rjmp	.+1426   	; 0x1808 <main+0x642>
    1276:	20 91 49 04 	lds	r18, 0x0449
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
    127a:	80 90 46 04 	lds	r8, 0x0446
    127e:	90 90 47 04 	lds	r9, 0x0447
    1282:	30 e2       	ldi	r19, 0x20	; 32
    1284:	83 16       	cp	r8, r19
    1286:	3e e4       	ldi	r19, 0x4E	; 78
    1288:	93 06       	cpc	r9, r19
    128a:	10 f0       	brcs	.+4      	; 0x1290 <main+0xca>
			measBattery = 1;
    128c:	f0 92 8f 03 	sts	0x038F, r15
			}
			*/
		}


		if(startCalibration && calibrationCycle<CALIBRATION_CYCLES) {
    1290:	22 23       	and	r18, r18
    1292:	09 f4       	brne	.+2      	; 0x1296 <main+0xd0>
    1294:	e5 c1       	rjmp	.+970    	; 0x1660 <main+0x49a>
    1296:	00 91 4a 04 	lds	r16, 0x044A
    129a:	10 91 4b 04 	lds	r17, 0x044B
    129e:	0f 30       	cpi	r16, 0x0F	; 15
    12a0:	11 05       	cpc	r17, r1
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <main+0xe0>
    12a4:	e1 c1       	rjmp	.+962    	; 0x1668 <main+0x4a2>

			if(proxUpdated) {
    12a6:	80 91 c3 03 	lds	r24, 0x03C3
    12aa:	88 23       	and	r24, r24
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <main+0xea>
    12ae:	b6 cf       	rjmp	.-148    	; 0x121c <main+0x56>

				proxUpdated = 0;
    12b0:	10 92 c3 03 	sts	0x03C3, r1
				
				if(calibrationCycle==0) {
    12b4:	01 15       	cp	r16, r1
    12b6:	11 05       	cpc	r17, r1
    12b8:	11 f4       	brne	.+4      	; 0x12be <main+0xf8>
    12ba:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__stack+0x2f7>
    12be:	60 91 3f 04 	lds	r22, 0x043F
    12c2:	70 91 40 04 	lds	r23, 0x0440
    12c6:	40 91 41 04 	lds	r20, 0x0441
    12ca:	50 91 42 04 	lds	r21, 0x0442
    12ce:	5e a3       	std	Y+38, r21	; 0x26
    12d0:	4d a3       	std	Y+37, r20	; 0x25
    12d2:	80 91 43 04 	lds	r24, 0x0443
    12d6:	90 91 44 04 	lds	r25, 0x0444
    12da:	98 a7       	std	Y+40, r25	; 0x28
    12dc:	8f a3       	std	Y+39, r24	; 0x27
    12de:	20 91 93 03 	lds	r18, 0x0393
    12e2:	30 91 94 03 	lds	r19, 0x0394
    12e6:	40 91 95 03 	lds	r20, 0x0395
    12ea:	50 91 96 03 	lds	r21, 0x0396
    12ee:	80 90 97 03 	lds	r8, 0x0397
    12f2:	90 90 98 03 	lds	r9, 0x0398
    12f6:	a0 90 99 03 	lds	r10, 0x0399
    12fa:	b0 90 9a 03 	lds	r11, 0x039A
    12fe:	40 90 9b 03 	lds	r4, 0x039B
    1302:	50 90 9c 03 	lds	r5, 0x039C
    1306:	60 90 9d 03 	lds	r6, 0x039D
    130a:	70 90 9e 03 	lds	r7, 0x039E
    130e:	80 91 9f 03 	lds	r24, 0x039F
    1312:	90 91 a0 03 	lds	r25, 0x03A0
    1316:	a0 91 a1 03 	lds	r26, 0x03A1
    131a:	b0 91 a2 03 	lds	r27, 0x03A2
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	ab 83       	std	Y+3, r26	; 0x03
    1324:	bc 83       	std	Y+4, r27	; 0x04
    1326:	80 91 a3 03 	lds	r24, 0x03A3
    132a:	90 91 a4 03 	lds	r25, 0x03A4
    132e:	a0 91 a5 03 	lds	r26, 0x03A5
    1332:	b0 91 a6 03 	lds	r27, 0x03A6
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	af 83       	std	Y+7, r26	; 0x07
    133c:	b8 87       	std	Y+8, r27	; 0x08
    133e:	80 91 a7 03 	lds	r24, 0x03A7
    1342:	90 91 a8 03 	lds	r25, 0x03A8
    1346:	a0 91 a9 03 	lds	r26, 0x03A9
    134a:	b0 91 aa 03 	lds	r27, 0x03AA
    134e:	89 87       	std	Y+9, r24	; 0x09
    1350:	9a 87       	std	Y+10, r25	; 0x0a
    1352:	ab 87       	std	Y+11, r26	; 0x0b
    1354:	bc 87       	std	Y+12, r27	; 0x0c
    1356:	80 91 ab 03 	lds	r24, 0x03AB
    135a:	90 91 ac 03 	lds	r25, 0x03AC
    135e:	a0 91 ad 03 	lds	r26, 0x03AD
    1362:	b0 91 ae 03 	lds	r27, 0x03AE
    1366:	8d 87       	std	Y+13, r24	; 0x0d
    1368:	9e 87       	std	Y+14, r25	; 0x0e
    136a:	af 87       	std	Y+15, r26	; 0x0f
    136c:	b8 8b       	std	Y+16, r27	; 0x10
    136e:	80 91 af 03 	lds	r24, 0x03AF
    1372:	90 91 b0 03 	lds	r25, 0x03B0
    1376:	a0 91 b1 03 	lds	r26, 0x03B1
    137a:	b0 91 b2 03 	lds	r27, 0x03B2
    137e:	89 8b       	std	Y+17, r24	; 0x11
    1380:	9a 8b       	std	Y+18, r25	; 0x12
    1382:	ab 8b       	std	Y+19, r26	; 0x13
    1384:	bc 8b       	std	Y+20, r27	; 0x14
    1386:	80 91 b3 03 	lds	r24, 0x03B3
    138a:	90 91 b4 03 	lds	r25, 0x03B4
    138e:	a0 91 b5 03 	lds	r26, 0x03B5
    1392:	b0 91 b6 03 	lds	r27, 0x03B6
    1396:	8d 8b       	std	Y+21, r24	; 0x15
    1398:	9e 8b       	std	Y+22, r25	; 0x16
    139a:	af 8b       	std	Y+23, r26	; 0x17
    139c:	b8 8f       	std	Y+24, r27	; 0x18
    139e:	80 91 b7 03 	lds	r24, 0x03B7
    13a2:	90 91 b8 03 	lds	r25, 0x03B8
    13a6:	a0 91 b9 03 	lds	r26, 0x03B9
    13aa:	b0 91 ba 03 	lds	r27, 0x03BA
    13ae:	89 8f       	std	Y+25, r24	; 0x19
    13b0:	9a 8f       	std	Y+26, r25	; 0x1a
    13b2:	ab 8f       	std	Y+27, r26	; 0x1b
    13b4:	bc 8f       	std	Y+28, r27	; 0x1c
    13b6:	80 91 bb 03 	lds	r24, 0x03BB
    13ba:	90 91 bc 03 	lds	r25, 0x03BC
    13be:	a0 91 bd 03 	lds	r26, 0x03BD
    13c2:	b0 91 be 03 	lds	r27, 0x03BE
    13c6:	8d 8f       	std	Y+29, r24	; 0x1d
    13c8:	9e 8f       	std	Y+30, r25	; 0x1e
    13ca:	af 8f       	std	Y+31, r26	; 0x1f
    13cc:	b8 a3       	std	Y+32, r27	; 0x20
    13ce:	80 91 bf 03 	lds	r24, 0x03BF
    13d2:	90 91 c0 03 	lds	r25, 0x03C0
    13d6:	a0 91 c1 03 	lds	r26, 0x03C1
    13da:	b0 91 c2 03 	lds	r27, 0x03C2
    13de:	89 a3       	std	Y+33, r24	; 0x21
    13e0:	9a a3       	std	Y+34, r25	; 0x22
    13e2:	ab a3       	std	Y+35, r26	; 0x23
    13e4:	bc a3       	std	Y+36, r27	; 0x24
					accOffsetYSum = 0;
					accOffsetZSum = 0;
				}
			
				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    13e6:	80 91 59 03 	lds	r24, 0x0359
    13ea:	90 91 5a 03 	lds	r25, 0x035A
    13ee:	aa 27       	eor	r26, r26
    13f0:	97 fd       	sbrc	r25, 7
    13f2:	a0 95       	com	r26
    13f4:	ba 2f       	mov	r27, r26
    13f6:	82 0f       	add	r24, r18
    13f8:	93 1f       	adc	r25, r19
    13fa:	a4 1f       	adc	r26, r20
    13fc:	b5 1f       	adc	r27, r21
    13fe:	80 93 93 03 	sts	0x0393, r24
    1402:	90 93 94 03 	sts	0x0394, r25
    1406:	a0 93 95 03 	sts	0x0395, r26
    140a:	b0 93 96 03 	sts	0x0396, r27
    140e:	80 91 5b 03 	lds	r24, 0x035B
    1412:	90 91 5c 03 	lds	r25, 0x035C
    1416:	aa 27       	eor	r26, r26
    1418:	97 fd       	sbrc	r25, 7
    141a:	a0 95       	com	r26
    141c:	ba 2f       	mov	r27, r26
    141e:	88 0d       	add	r24, r8
    1420:	99 1d       	adc	r25, r9
    1422:	aa 1d       	adc	r26, r10
    1424:	bb 1d       	adc	r27, r11
    1426:	80 93 97 03 	sts	0x0397, r24
    142a:	90 93 98 03 	sts	0x0398, r25
    142e:	a0 93 99 03 	sts	0x0399, r26
    1432:	b0 93 9a 03 	sts	0x039A, r27
    1436:	80 91 5d 03 	lds	r24, 0x035D
    143a:	90 91 5e 03 	lds	r25, 0x035E
    143e:	aa 27       	eor	r26, r26
    1440:	97 fd       	sbrc	r25, 7
    1442:	a0 95       	com	r26
    1444:	ba 2f       	mov	r27, r26
    1446:	84 0d       	add	r24, r4
    1448:	95 1d       	adc	r25, r5
    144a:	a6 1d       	adc	r26, r6
    144c:	b7 1d       	adc	r27, r7
    144e:	80 93 9b 03 	sts	0x039B, r24
    1452:	90 93 9c 03 	sts	0x039C, r25
    1456:	a0 93 9d 03 	sts	0x039D, r26
    145a:	b0 93 9e 03 	sts	0x039E, r27
    145e:	80 91 5f 03 	lds	r24, 0x035F
    1462:	90 91 60 03 	lds	r25, 0x0360
    1466:	aa 27       	eor	r26, r26
    1468:	97 fd       	sbrc	r25, 7
    146a:	a0 95       	com	r26
    146c:	ba 2f       	mov	r27, r26
    146e:	89 80       	ldd	r8, Y+1	; 0x01
    1470:	9a 80       	ldd	r9, Y+2	; 0x02
    1472:	ab 80       	ldd	r10, Y+3	; 0x03
    1474:	bc 80       	ldd	r11, Y+4	; 0x04
    1476:	88 0d       	add	r24, r8
    1478:	99 1d       	adc	r25, r9
    147a:	aa 1d       	adc	r26, r10
    147c:	bb 1d       	adc	r27, r11
    147e:	80 93 9f 03 	sts	0x039F, r24
    1482:	90 93 a0 03 	sts	0x03A0, r25
    1486:	a0 93 a1 03 	sts	0x03A1, r26
    148a:	b0 93 a2 03 	sts	0x03A2, r27
    148e:	80 91 61 03 	lds	r24, 0x0361
    1492:	90 91 62 03 	lds	r25, 0x0362
    1496:	aa 27       	eor	r26, r26
    1498:	97 fd       	sbrc	r25, 7
    149a:	a0 95       	com	r26
    149c:	ba 2f       	mov	r27, r26
    149e:	2d 81       	ldd	r18, Y+5	; 0x05
    14a0:	3e 81       	ldd	r19, Y+6	; 0x06
    14a2:	4f 81       	ldd	r20, Y+7	; 0x07
    14a4:	58 85       	ldd	r21, Y+8	; 0x08
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	a4 1f       	adc	r26, r20
    14ac:	b5 1f       	adc	r27, r21
    14ae:	80 93 a3 03 	sts	0x03A3, r24
    14b2:	90 93 a4 03 	sts	0x03A4, r25
    14b6:	a0 93 a5 03 	sts	0x03A5, r26
    14ba:	b0 93 a6 03 	sts	0x03A6, r27
    14be:	80 91 63 03 	lds	r24, 0x0363
    14c2:	90 91 64 03 	lds	r25, 0x0364
    14c6:	aa 27       	eor	r26, r26
    14c8:	97 fd       	sbrc	r25, 7
    14ca:	a0 95       	com	r26
    14cc:	ba 2f       	mov	r27, r26
    14ce:	89 84       	ldd	r8, Y+9	; 0x09
    14d0:	9a 84       	ldd	r9, Y+10	; 0x0a
    14d2:	ab 84       	ldd	r10, Y+11	; 0x0b
    14d4:	bc 84       	ldd	r11, Y+12	; 0x0c
    14d6:	88 0d       	add	r24, r8
    14d8:	99 1d       	adc	r25, r9
    14da:	aa 1d       	adc	r26, r10
    14dc:	bb 1d       	adc	r27, r11
    14de:	80 93 a7 03 	sts	0x03A7, r24
    14e2:	90 93 a8 03 	sts	0x03A8, r25
    14e6:	a0 93 a9 03 	sts	0x03A9, r26
    14ea:	b0 93 aa 03 	sts	0x03AA, r27
    14ee:	80 91 65 03 	lds	r24, 0x0365
    14f2:	90 91 66 03 	lds	r25, 0x0366
    14f6:	aa 27       	eor	r26, r26
    14f8:	97 fd       	sbrc	r25, 7
    14fa:	a0 95       	com	r26
    14fc:	ba 2f       	mov	r27, r26
    14fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1500:	3e 85       	ldd	r19, Y+14	; 0x0e
    1502:	4f 85       	ldd	r20, Y+15	; 0x0f
    1504:	58 89       	ldd	r21, Y+16	; 0x10
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	a4 1f       	adc	r26, r20
    150c:	b5 1f       	adc	r27, r21
    150e:	80 93 ab 03 	sts	0x03AB, r24
    1512:	90 93 ac 03 	sts	0x03AC, r25
    1516:	a0 93 ad 03 	sts	0x03AD, r26
    151a:	b0 93 ae 03 	sts	0x03AE, r27
    151e:	80 91 67 03 	lds	r24, 0x0367
    1522:	90 91 68 03 	lds	r25, 0x0368
    1526:	aa 27       	eor	r26, r26
    1528:	97 fd       	sbrc	r25, 7
    152a:	a0 95       	com	r26
    152c:	ba 2f       	mov	r27, r26
    152e:	89 88       	ldd	r8, Y+17	; 0x11
    1530:	9a 88       	ldd	r9, Y+18	; 0x12
    1532:	ab 88       	ldd	r10, Y+19	; 0x13
    1534:	bc 88       	ldd	r11, Y+20	; 0x14
    1536:	88 0d       	add	r24, r8
    1538:	99 1d       	adc	r25, r9
    153a:	aa 1d       	adc	r26, r10
    153c:	bb 1d       	adc	r27, r11
    153e:	80 93 af 03 	sts	0x03AF, r24
    1542:	90 93 b0 03 	sts	0x03B0, r25
    1546:	a0 93 b1 03 	sts	0x03B1, r26
    154a:	b0 93 b2 03 	sts	0x03B2, r27
    154e:	80 91 69 03 	lds	r24, 0x0369
    1552:	90 91 6a 03 	lds	r25, 0x036A
    1556:	aa 27       	eor	r26, r26
    1558:	97 fd       	sbrc	r25, 7
    155a:	a0 95       	com	r26
    155c:	ba 2f       	mov	r27, r26
    155e:	2d 89       	ldd	r18, Y+21	; 0x15
    1560:	3e 89       	ldd	r19, Y+22	; 0x16
    1562:	4f 89       	ldd	r20, Y+23	; 0x17
    1564:	58 8d       	ldd	r21, Y+24	; 0x18
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	a4 1f       	adc	r26, r20
    156c:	b5 1f       	adc	r27, r21
    156e:	80 93 b3 03 	sts	0x03B3, r24
    1572:	90 93 b4 03 	sts	0x03B4, r25
    1576:	a0 93 b5 03 	sts	0x03B5, r26
    157a:	b0 93 b6 03 	sts	0x03B6, r27
    157e:	80 91 6b 03 	lds	r24, 0x036B
    1582:	90 91 6c 03 	lds	r25, 0x036C
    1586:	aa 27       	eor	r26, r26
    1588:	97 fd       	sbrc	r25, 7
    158a:	a0 95       	com	r26
    158c:	ba 2f       	mov	r27, r26
    158e:	89 8c       	ldd	r8, Y+25	; 0x19
    1590:	9a 8c       	ldd	r9, Y+26	; 0x1a
    1592:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1594:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1596:	88 0d       	add	r24, r8
    1598:	99 1d       	adc	r25, r9
    159a:	aa 1d       	adc	r26, r10
    159c:	bb 1d       	adc	r27, r11
    159e:	80 93 b7 03 	sts	0x03B7, r24
    15a2:	90 93 b8 03 	sts	0x03B8, r25
    15a6:	a0 93 b9 03 	sts	0x03B9, r26
    15aa:	b0 93 ba 03 	sts	0x03BA, r27
    15ae:	80 91 6d 03 	lds	r24, 0x036D
    15b2:	90 91 6e 03 	lds	r25, 0x036E
    15b6:	aa 27       	eor	r26, r26
    15b8:	97 fd       	sbrc	r25, 7
    15ba:	a0 95       	com	r26
    15bc:	ba 2f       	mov	r27, r26
    15be:	2d 8d       	ldd	r18, Y+29	; 0x1d
    15c0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    15c2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    15c4:	58 a1       	ldd	r21, Y+32	; 0x20
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	a4 1f       	adc	r26, r20
    15cc:	b5 1f       	adc	r27, r21
    15ce:	80 93 bb 03 	sts	0x03BB, r24
    15d2:	90 93 bc 03 	sts	0x03BC, r25
    15d6:	a0 93 bd 03 	sts	0x03BD, r26
    15da:	b0 93 be 03 	sts	0x03BE, r27
    15de:	80 91 6f 03 	lds	r24, 0x036F
    15e2:	90 91 70 03 	lds	r25, 0x0370
    15e6:	aa 27       	eor	r26, r26
    15e8:	97 fd       	sbrc	r25, 7
    15ea:	a0 95       	com	r26
    15ec:	ba 2f       	mov	r27, r26
    15ee:	89 a0       	ldd	r8, Y+33	; 0x21
    15f0:	9a a0       	ldd	r9, Y+34	; 0x22
    15f2:	ab a0       	ldd	r10, Y+35	; 0x23
    15f4:	bc a0       	ldd	r11, Y+36	; 0x24
    15f6:	88 0d       	add	r24, r8
    15f8:	99 1d       	adc	r25, r9
    15fa:	aa 1d       	adc	r26, r10
    15fc:	bb 1d       	adc	r27, r11
    15fe:	80 93 bf 03 	sts	0x03BF, r24
    1602:	90 93 c0 03 	sts	0x03C0, r25
    1606:	a0 93 c1 03 	sts	0x03C1, r26
    160a:	b0 93 c2 03 	sts	0x03C2, r27
				}		

				accOffsetXSum += accX;
    160e:	80 91 2b 04 	lds	r24, 0x042B
    1612:	90 91 2c 04 	lds	r25, 0x042C
    1616:	86 0f       	add	r24, r22
    1618:	97 1f       	adc	r25, r23
    161a:	90 93 40 04 	sts	0x0440, r25
    161e:	80 93 3f 04 	sts	0x043F, r24
				accOffsetYSum += accY;
    1622:	80 91 2d 04 	lds	r24, 0x042D
    1626:	90 91 2e 04 	lds	r25, 0x042E
    162a:	ad a0       	ldd	r10, Y+37	; 0x25
    162c:	be a0       	ldd	r11, Y+38	; 0x26
    162e:	8a 0d       	add	r24, r10
    1630:	9b 1d       	adc	r25, r11
    1632:	90 93 42 04 	sts	0x0442, r25
    1636:	80 93 41 04 	sts	0x0441, r24
				accOffsetZSum += accZ;
    163a:	80 91 2f 04 	lds	r24, 0x042F
    163e:	90 91 30 04 	lds	r25, 0x0430
    1642:	2f a1       	ldd	r18, Y+39	; 0x27
    1644:	38 a5       	ldd	r19, Y+40	; 0x28
    1646:	82 0f       	add	r24, r18
    1648:	93 1f       	adc	r25, r19
    164a:	90 93 44 04 	sts	0x0444, r25
    164e:	80 93 43 04 	sts	0x0443, r24
				
				calibrationCycle++;
    1652:	0f 5f       	subi	r16, 0xFF	; 255
    1654:	1f 4f       	sbci	r17, 0xFF	; 255
    1656:	10 93 4b 04 	sts	0x044B, r17
    165a:	00 93 4a 04 	sts	0x044A, r16
    165e:	de cd       	rjmp	.-1092   	; 0x121c <main+0x56>
    1660:	00 91 4a 04 	lds	r16, 0x044A
    1664:	10 91 4b 04 	lds	r17, 0x044B
	
			}

			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {
    1668:	0f 30       	cpi	r16, 0x0F	; 15
    166a:	11 05       	cpc	r17, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <main+0x4aa>
    166e:	a3 c4       	rjmp	.+2374   	; 0x1fb6 <main+0xdf0>
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);

		}

		if(irEnabled) {
    1670:	80 91 11 02 	lds	r24, 0x0211
    1674:	88 23       	and	r24, r24
    1676:	09 f0       	breq	.+2      	; 0x167a <main+0x4b4>
    1678:	dd c2       	rjmp	.+1466   	; 0x1c34 <main+0xa6e>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
    167a:	20 e2       	ldi	r18, 0x20	; 32
    167c:	82 16       	cp	r8, r18
    167e:	2e e4       	ldi	r18, 0x4E	; 78
    1680:	92 06       	cpc	r9, r18
    1682:	20 f0       	brcs	.+8      	; 0x168c <main+0x4c6>
			delayCounter = 0;
    1684:	10 92 47 04 	sts	0x0447, r1
    1688:	10 92 46 04 	sts	0x0446, r1
			usartTransmit(CHARGE_ON);								
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
    168c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <mirf_data_ready>
    1690:	88 23       	and	r24, r24
    1692:	09 f0       	breq	.+2      	; 0x1696 <main+0x4d0>
    1694:	0d c3       	rjmp	.+1562   	; 0x1cb0 <main+0xaea>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
    1696:	80 91 48 04 	lds	r24, 0x0448
    169a:	88 23       	and	r24, r24
    169c:	09 f0       	breq	.+2      	; 0x16a0 <main+0x4da>
    169e:	ae c0       	rjmp	.+348    	; 0x17fc <main+0x636>

			if(start_control) {
    16a0:	80 91 12 04 	lds	r24, 0x0412
    16a4:	88 23       	and	r24, r24
    16a6:	09 f4       	brne	.+2      	; 0x16aa <main+0x4e4>
    16a8:	ac c0       	rjmp	.+344    	; 0x1802 <main+0x63c>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    16aa:	80 91 e8 03 	lds	r24, 0x03E8
    16ae:	90 91 e9 03 	lds	r25, 0x03E9
    16b2:	a0 91 ea 03 	lds	r26, 0x03EA
    16b6:	b0 91 eb 03 	lds	r27, 0x03EB
    16ba:	80 93 15 04 	sts	0x0415, r24
    16be:	90 93 16 04 	sts	0x0416, r25
    16c2:	a0 93 17 04 	sts	0x0417, r26
    16c6:	b0 93 18 04 	sts	0x0418, r27
				pwm_left_working = pwm_left_desired;
    16ca:	80 91 ec 03 	lds	r24, 0x03EC
    16ce:	90 91 ed 03 	lds	r25, 0x03ED
    16d2:	a0 91 ee 03 	lds	r26, 0x03EE
    16d6:	b0 91 ef 03 	lds	r27, 0x03EF
    16da:	80 93 19 04 	sts	0x0419, r24
    16de:	90 93 1a 04 	sts	0x041A, r25
    16e2:	a0 93 1b 04 	sts	0x041B, r26
    16e6:	b0 93 1c 04 	sts	0x041C, r27
				
				if(obstacleAvoidanceEnabled) {
    16ea:	80 91 4c 04 	lds	r24, 0x044C
    16ee:	88 23       	and	r24, r24
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <main+0x52e>
    16f2:	d1 c7       	rjmp	.+4002   	; 0x2696 <__stack+0x497>
					//PORTB &= ~(1 << 7);
					obstacleAvoidance();
					//PORTB |= (1 << 7);				
				}
				
				if(cliffAvoidanceEnabled) {
    16f4:	80 91 51 04 	lds	r24, 0x0451
    16f8:	88 23       	and	r24, r24
    16fa:	09 f0       	breq	.+2      	; 0x16fe <main+0x538>
    16fc:	55 c7       	rjmp	.+3754   	; 0x25a8 <__stack+0x3a9>
					cliffAvoidance();
				}
				start_control = 0;
    16fe:	10 92 12 04 	sts	0x0412, r1
				update_pwm = 1;
    1702:	f0 92 1d 04 	sts	0x041D, r15
    1706:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
    1708:	80 91 10 04 	lds	r24, 0x0410
    170c:	88 23       	and	r24, r24
    170e:	01 f1       	breq	.+64     	; 0x1750 <main+0x58a>
			if(last_num_lvel_samples_avg > 1) {
    1710:	80 91 ce 03 	lds	r24, 0x03CE
    1714:	90 91 cf 03 	lds	r25, 0x03CF
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	91 05       	cpc	r25, r1
    171c:	08 f4       	brcc	.+2      	; 0x1720 <main+0x55a>
    171e:	f5 c5       	rjmp	.+3050   	; 0x230a <__stack+0x10b>
				last_left_vel = (unsigned int)((last_left_vel_sum-last_left_vel_value)/(last_num_lvel_samples_avg-1));
    1720:	80 91 d6 03 	lds	r24, 0x03D6
    1724:	90 91 d7 03 	lds	r25, 0x03D7
    1728:	60 91 ce 03 	lds	r22, 0x03CE
    172c:	70 91 cf 03 	lds	r23, 0x03CF
    1730:	30 91 1e 04 	lds	r19, 0x041E
    1734:	83 1b       	sub	r24, r19
    1736:	91 09       	sbc	r25, r1
    1738:	61 50       	subi	r22, 0x01	; 1
    173a:	70 40       	sbci	r23, 0x00	; 0
    173c:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__udivmodhi4>
    1740:	70 93 dd 03 	sts	0x03DD, r23
    1744:	60 93 dc 03 	sts	0x03DC, r22
			} else {
				last_left_vel = 0;
			}
			left_vel_changed = 1;
    1748:	f0 92 13 04 	sts	0x0413, r15
			compute_left_vel = 0;
    174c:	10 92 10 04 	sts	0x0410, r1
		}

		if(compute_right_vel) {
    1750:	80 91 11 04 	lds	r24, 0x0411
    1754:	88 23       	and	r24, r24
    1756:	01 f1       	breq	.+64     	; 0x1798 <main+0x5d2>
			if(last_num_rvel_samples_avg > 1) {
    1758:	80 91 d2 03 	lds	r24, 0x03D2
    175c:	90 91 d3 03 	lds	r25, 0x03D3
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	91 05       	cpc	r25, r1
    1764:	08 f4       	brcc	.+2      	; 0x1768 <main+0x5a2>
    1766:	d6 c5       	rjmp	.+2988   	; 0x2314 <__stack+0x115>
				last_right_vel = (unsigned int)((last_right_vel_sum-last_right_vel_value)/(last_num_rvel_samples_avg-1));
    1768:	80 91 da 03 	lds	r24, 0x03DA
    176c:	90 91 db 03 	lds	r25, 0x03DB
    1770:	60 91 d2 03 	lds	r22, 0x03D2
    1774:	70 91 d3 03 	lds	r23, 0x03D3
    1778:	30 91 1f 04 	lds	r19, 0x041F
    177c:	83 1b       	sub	r24, r19
    177e:	91 09       	sbc	r25, r1
    1780:	61 50       	subi	r22, 0x01	; 1
    1782:	70 40       	sbci	r23, 0x00	; 0
    1784:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__udivmodhi4>
    1788:	70 93 df 03 	sts	0x03DF, r23
    178c:	60 93 de 03 	sts	0x03DE, r22
			} else {
				last_right_vel = 0;
			}	
			right_vel_changed = 1;
    1790:	f0 92 14 04 	sts	0x0414, r15
			compute_right_vel = 0;
    1794:	10 92 11 04 	sts	0x0411, r1
		}

		if(update_pwm) {
    1798:	22 23       	and	r18, r18
    179a:	09 f4       	brne	.+2      	; 0x179e <main+0x5d8>
    179c:	3f cd       	rjmp	.-1410   	; 0x121c <main+0x56>

			update_pwm = 0;
    179e:	10 92 1d 04 	sts	0x041D, r1
			pwm_left = pwm_left_working;
    17a2:	20 91 19 04 	lds	r18, 0x0419
    17a6:	30 91 1a 04 	lds	r19, 0x041A
    17aa:	40 91 1b 04 	lds	r20, 0x041B
    17ae:	50 91 1c 04 	lds	r21, 0x041C
    17b2:	20 93 e4 03 	sts	0x03E4, r18
    17b6:	30 93 e5 03 	sts	0x03E5, r19
    17ba:	40 93 e6 03 	sts	0x03E6, r20
    17be:	50 93 e7 03 	sts	0x03E7, r21
			pwm_right = pwm_right_working;
    17c2:	80 91 15 04 	lds	r24, 0x0415
    17c6:	90 91 16 04 	lds	r25, 0x0416
    17ca:	a0 91 17 04 	lds	r26, 0x0417
    17ce:	b0 91 18 04 	lds	r27, 0x0418
    17d2:	80 93 e0 03 	sts	0x03E0, r24
    17d6:	90 93 e1 03 	sts	0x03E1, r25
    17da:	a0 93 e2 03 	sts	0x03E2, r26
    17de:	b0 93 e3 03 	sts	0x03E3, r27

			if(pwm_right >= 0) {
    17e2:	b7 fd       	sbrc	r27, 7
    17e4:	a5 c5       	rjmp	.+2890   	; 0x2330 <__stack+0x131>
				OCR3A = (int)pwm_right;
    17e6:	90 93 99 00 	sts	0x0099, r25
    17ea:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    17ee:	57 fd       	sbrc	r21, 7
    17f0:	96 c5       	rjmp	.+2860   	; 0x231e <__stack+0x11f>
				OCR4A = pwm_left;
    17f2:	30 93 a9 00 	sts	0x00A9, r19
    17f6:	20 93 a8 00 	sts	0x00A8, r18
    17fa:	10 cd       	rjmp	.-1504   	; 0x121c <main+0x56>
				}
				start_control = 0;
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	09 f4       	brne	.+2      	; 0x1802 <main+0x63c>
    1800:	cd c0       	rjmp	.+410    	; 0x199c <main+0x7d6>

			if(start_control && left_vel_changed && right_vel_changed) {
    1802:	20 91 1d 04 	lds	r18, 0x041D
    1806:	80 cf       	rjmp	.-256    	; 0x1708 <main+0x542>
		readAccelXYZ();
		//PORTB |= (1 << 6);

		if(updateProx) {

			updateProx = 0;
    1808:	10 92 92 03 	sts	0x0392, r1
			if(startCalibration) {
    180c:	20 91 49 04 	lds	r18, 0x0449
    1810:	22 23       	and	r18, r18
    1812:	09 f4       	brne	.+2      	; 0x1816 <main+0x650>
    1814:	02 c1       	rjmp	.+516    	; 0x1a1a <main+0x854>

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
    1816:	80 91 29 03 	lds	r24, 0x0329
    181a:	90 91 2a 03 	lds	r25, 0x032A
    181e:	40 91 2b 03 	lds	r20, 0x032B
    1822:	50 91 2c 03 	lds	r21, 0x032C
    1826:	84 1b       	sub	r24, r20
    1828:	95 0b       	sbc	r25, r21
    182a:	90 93 5a 03 	sts	0x035A, r25
    182e:	80 93 59 03 	sts	0x0359, r24
				if(proximityResult[0] < 0) {
    1832:	97 fd       	sbrc	r25, 7
    1834:	3d c6       	rjmp	.+3194   	; 0x24b0 <__stack+0x2b1>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
    1836:	80 91 2d 03 	lds	r24, 0x032D
    183a:	90 91 2e 03 	lds	r25, 0x032E
    183e:	40 91 2f 03 	lds	r20, 0x032F
    1842:	50 91 30 03 	lds	r21, 0x0330
    1846:	84 1b       	sub	r24, r20
    1848:	95 0b       	sbc	r25, r21
    184a:	90 93 5c 03 	sts	0x035C, r25
    184e:	80 93 5b 03 	sts	0x035B, r24
				if(proximityResult[1] < 0) {
    1852:	97 fd       	sbrc	r25, 7
    1854:	37 c6       	rjmp	.+3182   	; 0x24c4 <__stack+0x2c5>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
    1856:	80 91 31 03 	lds	r24, 0x0331
    185a:	90 91 32 03 	lds	r25, 0x0332
    185e:	40 91 33 03 	lds	r20, 0x0333
    1862:	50 91 34 03 	lds	r21, 0x0334
    1866:	84 1b       	sub	r24, r20
    1868:	95 0b       	sbc	r25, r21
    186a:	90 93 5e 03 	sts	0x035E, r25
    186e:	80 93 5d 03 	sts	0x035D, r24
				if(proximityResult[2] < 0) {
    1872:	97 fd       	sbrc	r25, 7
    1874:	22 c6       	rjmp	.+3140   	; 0x24ba <__stack+0x2bb>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
    1876:	80 91 35 03 	lds	r24, 0x0335
    187a:	90 91 36 03 	lds	r25, 0x0336
    187e:	40 91 37 03 	lds	r20, 0x0337
    1882:	50 91 38 03 	lds	r21, 0x0338
    1886:	84 1b       	sub	r24, r20
    1888:	95 0b       	sbc	r25, r21
    188a:	90 93 60 03 	sts	0x0360, r25
    188e:	80 93 5f 03 	sts	0x035F, r24
				if(proximityResult[3] < 0) {
    1892:	97 fd       	sbrc	r25, 7
    1894:	2b c6       	rjmp	.+3158   	; 0x24ec <__stack+0x2ed>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
    1896:	80 91 39 03 	lds	r24, 0x0339
    189a:	90 91 3a 03 	lds	r25, 0x033A
    189e:	40 91 3b 03 	lds	r20, 0x033B
    18a2:	50 91 3c 03 	lds	r21, 0x033C
    18a6:	84 1b       	sub	r24, r20
    18a8:	95 0b       	sbc	r25, r21
    18aa:	90 93 62 03 	sts	0x0362, r25
    18ae:	80 93 61 03 	sts	0x0361, r24
				if(proximityResult[4] < 0) {
    18b2:	97 fd       	sbrc	r25, 7
    18b4:	16 c6       	rjmp	.+3116   	; 0x24e2 <__stack+0x2e3>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
    18b6:	80 91 3d 03 	lds	r24, 0x033D
    18ba:	90 91 3e 03 	lds	r25, 0x033E
    18be:	40 91 3f 03 	lds	r20, 0x033F
    18c2:	50 91 40 03 	lds	r21, 0x0340
    18c6:	84 1b       	sub	r24, r20
    18c8:	95 0b       	sbc	r25, r21
    18ca:	90 93 64 03 	sts	0x0364, r25
    18ce:	80 93 63 03 	sts	0x0363, r24
				if(proximityResult[5] < 0) {
    18d2:	97 fd       	sbrc	r25, 7
    18d4:	01 c6       	rjmp	.+3074   	; 0x24d8 <__stack+0x2d9>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
    18d6:	80 91 41 03 	lds	r24, 0x0341
    18da:	90 91 42 03 	lds	r25, 0x0342
    18de:	40 91 43 03 	lds	r20, 0x0343
    18e2:	50 91 44 03 	lds	r21, 0x0344
    18e6:	84 1b       	sub	r24, r20
    18e8:	95 0b       	sbc	r25, r21
    18ea:	90 93 66 03 	sts	0x0366, r25
    18ee:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[6] < 0) {
    18f2:	97 fd       	sbrc	r25, 7
    18f4:	ec c5       	rjmp	.+3032   	; 0x24ce <__stack+0x2cf>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
    18f6:	80 91 45 03 	lds	r24, 0x0345
    18fa:	90 91 46 03 	lds	r25, 0x0346
    18fe:	40 91 47 03 	lds	r20, 0x0347
    1902:	50 91 48 03 	lds	r21, 0x0348
    1906:	84 1b       	sub	r24, r20
    1908:	95 0b       	sbc	r25, r21
    190a:	90 93 68 03 	sts	0x0368, r25
    190e:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[7] < 0) {
    1912:	97 fd       	sbrc	r25, 7
    1914:	c8 c5       	rjmp	.+2960   	; 0x24a6 <__stack+0x2a7>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    1916:	80 91 49 03 	lds	r24, 0x0349
    191a:	90 91 4a 03 	lds	r25, 0x034A
    191e:	40 91 4b 03 	lds	r20, 0x034B
    1922:	50 91 4c 03 	lds	r21, 0x034C
    1926:	84 1b       	sub	r24, r20
    1928:	95 0b       	sbc	r25, r21
    192a:	90 93 6a 03 	sts	0x036A, r25
    192e:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[8] < 0) {
    1932:	97 fd       	sbrc	r25, 7
    1934:	b3 c5       	rjmp	.+2918   	; 0x249c <__stack+0x29d>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    1936:	80 91 4d 03 	lds	r24, 0x034D
    193a:	90 91 4e 03 	lds	r25, 0x034E
    193e:	40 91 4f 03 	lds	r20, 0x034F
    1942:	50 91 50 03 	lds	r21, 0x0350
    1946:	84 1b       	sub	r24, r20
    1948:	95 0b       	sbc	r25, r21
    194a:	90 93 6c 03 	sts	0x036C, r25
    194e:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[9] < 0) {
    1952:	97 fd       	sbrc	r25, 7
    1954:	9e c5       	rjmp	.+2876   	; 0x2492 <__stack+0x293>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1956:	80 91 51 03 	lds	r24, 0x0351
    195a:	90 91 52 03 	lds	r25, 0x0352
    195e:	40 91 53 03 	lds	r20, 0x0353
    1962:	50 91 54 03 	lds	r21, 0x0354
    1966:	84 1b       	sub	r24, r20
    1968:	95 0b       	sbc	r25, r21
    196a:	90 93 6e 03 	sts	0x036E, r25
    196e:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[10] < 0) {
    1972:	97 fd       	sbrc	r25, 7
    1974:	89 c5       	rjmp	.+2834   	; 0x2488 <__stack+0x289>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    1976:	80 91 55 03 	lds	r24, 0x0355
    197a:	90 91 56 03 	lds	r25, 0x0356
    197e:	40 91 57 03 	lds	r20, 0x0357
    1982:	50 91 58 03 	lds	r21, 0x0358
    1986:	84 1b       	sub	r24, r20
    1988:	95 0b       	sbc	r25, r21
    198a:	90 93 70 03 	sts	0x0370, r25
    198e:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[11] < 0) {
    1992:	97 fd       	sbrc	r25, 7
    1994:	4a c1       	rjmp	.+660    	; 0x1c2a <main+0xa64>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
    1996:	f0 92 c3 03 	sts	0x03C3, r15
    199a:	6f cc       	rjmp	.-1826   	; 0x127a <main+0xb4>
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control

			if(start_control && left_vel_changed && right_vel_changed) {
    199c:	80 91 12 04 	lds	r24, 0x0412
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <main+0x7e0>
    19a4:	2e cf       	rjmp	.-420    	; 0x1802 <main+0x63c>
    19a6:	80 91 13 04 	lds	r24, 0x0413
    19aa:	88 23       	and	r24, r24
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <main+0x7ea>
    19ae:	29 cf       	rjmp	.-430    	; 0x1802 <main+0x63c>
    19b0:	80 91 14 04 	lds	r24, 0x0414
    19b4:	88 23       	and	r24, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <main+0x7f4>
    19b8:	24 cf       	rjmp	.-440    	; 0x1802 <main+0x63c>
				pwm_right_working = pwm_right_desired;
    19ba:	80 91 e8 03 	lds	r24, 0x03E8
    19be:	90 91 e9 03 	lds	r25, 0x03E9
    19c2:	a0 91 ea 03 	lds	r26, 0x03EA
    19c6:	b0 91 eb 03 	lds	r27, 0x03EB
    19ca:	80 93 15 04 	sts	0x0415, r24
    19ce:	90 93 16 04 	sts	0x0416, r25
    19d2:	a0 93 17 04 	sts	0x0417, r26
    19d6:	b0 93 18 04 	sts	0x0418, r27
				pwm_left_working = pwm_left_desired;
    19da:	80 91 ec 03 	lds	r24, 0x03EC
    19de:	90 91 ed 03 	lds	r25, 0x03ED
    19e2:	a0 91 ee 03 	lds	r26, 0x03EE
    19e6:	b0 91 ef 03 	lds	r27, 0x03EF
    19ea:	80 93 19 04 	sts	0x0419, r24
    19ee:	90 93 1a 04 	sts	0x041A, r25
    19f2:	a0 93 1b 04 	sts	0x041B, r26
    19f6:	b0 93 1c 04 	sts	0x041C, r27
				start_control = 0;
    19fa:	10 92 12 04 	sts	0x0412, r1
				left_vel_changed = 0;
    19fe:	10 92 13 04 	sts	0x0413, r1
				right_vel_changed = 0;
    1a02:	10 92 14 04 	sts	0x0414, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    1a06:	89 e1       	ldi	r24, 0x19	; 25
    1a08:	94 e0       	ldi	r25, 0x04	; 4
    1a0a:	65 e1       	ldi	r22, 0x15	; 21
    1a0c:	74 e0       	ldi	r23, 0x04	; 4
    1a0e:	0e 94 c7 1a 	call	0x358e	; 0x358e <start_orizzontal_speed_control>
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    1a12:	f0 92 1d 04 	sts	0x041D, r15
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	77 ce       	rjmp	.-786    	; 0x1708 <main+0x542>
					proximityResult[11] = 0;
				}

			} else { 

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
    1a1a:	80 91 29 03 	lds	r24, 0x0329
    1a1e:	90 91 2a 03 	lds	r25, 0x032A
    1a22:	40 91 2b 03 	lds	r20, 0x032B
    1a26:	50 91 2c 03 	lds	r21, 0x032C
    1a2a:	84 1b       	sub	r24, r20
    1a2c:	95 0b       	sbc	r25, r21
    1a2e:	40 91 71 03 	lds	r20, 0x0371
    1a32:	50 91 72 03 	lds	r21, 0x0372
    1a36:	84 1b       	sub	r24, r20
    1a38:	95 0b       	sbc	r25, r21
    1a3a:	90 93 5a 03 	sts	0x035A, r25
    1a3e:	80 93 59 03 	sts	0x0359, r24
				if(proximityResult[0] < 0) {
    1a42:	97 fd       	sbrc	r25, 7
    1a44:	ef c4       	rjmp	.+2526   	; 0x2424 <__stack+0x225>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
    1a46:	80 91 2d 03 	lds	r24, 0x032D
    1a4a:	90 91 2e 03 	lds	r25, 0x032E
    1a4e:	40 91 2f 03 	lds	r20, 0x032F
    1a52:	50 91 30 03 	lds	r21, 0x0330
    1a56:	84 1b       	sub	r24, r20
    1a58:	95 0b       	sbc	r25, r21
    1a5a:	40 91 73 03 	lds	r20, 0x0373
    1a5e:	50 91 74 03 	lds	r21, 0x0374
    1a62:	84 1b       	sub	r24, r20
    1a64:	95 0b       	sbc	r25, r21
    1a66:	90 93 5c 03 	sts	0x035C, r25
    1a6a:	80 93 5b 03 	sts	0x035B, r24
				if(proximityResult[1] < 0) {
    1a6e:	97 fd       	sbrc	r25, 7
    1a70:	d4 c4       	rjmp	.+2472   	; 0x241a <__stack+0x21b>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
    1a72:	80 91 31 03 	lds	r24, 0x0331
    1a76:	90 91 32 03 	lds	r25, 0x0332
    1a7a:	40 91 33 03 	lds	r20, 0x0333
    1a7e:	50 91 34 03 	lds	r21, 0x0334
    1a82:	84 1b       	sub	r24, r20
    1a84:	95 0b       	sbc	r25, r21
    1a86:	40 91 75 03 	lds	r20, 0x0375
    1a8a:	50 91 76 03 	lds	r21, 0x0376
    1a8e:	84 1b       	sub	r24, r20
    1a90:	95 0b       	sbc	r25, r21
    1a92:	90 93 5e 03 	sts	0x035E, r25
    1a96:	80 93 5d 03 	sts	0x035D, r24
				if(proximityResult[2] < 0) {
    1a9a:	97 fd       	sbrc	r25, 7
    1a9c:	f0 c4       	rjmp	.+2528   	; 0x247e <__stack+0x27f>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
    1a9e:	80 91 35 03 	lds	r24, 0x0335
    1aa2:	90 91 36 03 	lds	r25, 0x0336
    1aa6:	40 91 37 03 	lds	r20, 0x0337
    1aaa:	50 91 38 03 	lds	r21, 0x0338
    1aae:	84 1b       	sub	r24, r20
    1ab0:	95 0b       	sbc	r25, r21
    1ab2:	40 91 77 03 	lds	r20, 0x0377
    1ab6:	50 91 78 03 	lds	r21, 0x0378
    1aba:	84 1b       	sub	r24, r20
    1abc:	95 0b       	sbc	r25, r21
    1abe:	90 93 60 03 	sts	0x0360, r25
    1ac2:	80 93 5f 03 	sts	0x035F, r24
				if(proximityResult[3] < 0) {
    1ac6:	97 fd       	sbrc	r25, 7
    1ac8:	d5 c4       	rjmp	.+2474   	; 0x2474 <__stack+0x275>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
    1aca:	80 91 39 03 	lds	r24, 0x0339
    1ace:	90 91 3a 03 	lds	r25, 0x033A
    1ad2:	40 91 3b 03 	lds	r20, 0x033B
    1ad6:	50 91 3c 03 	lds	r21, 0x033C
    1ada:	84 1b       	sub	r24, r20
    1adc:	95 0b       	sbc	r25, r21
    1ade:	40 91 79 03 	lds	r20, 0x0379
    1ae2:	50 91 7a 03 	lds	r21, 0x037A
    1ae6:	84 1b       	sub	r24, r20
    1ae8:	95 0b       	sbc	r25, r21
    1aea:	90 93 62 03 	sts	0x0362, r25
    1aee:	80 93 61 03 	sts	0x0361, r24
				if(proximityResult[4] < 0) {
    1af2:	97 fd       	sbrc	r25, 7
    1af4:	ba c4       	rjmp	.+2420   	; 0x246a <__stack+0x26b>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
    1af6:	80 91 3d 03 	lds	r24, 0x033D
    1afa:	90 91 3e 03 	lds	r25, 0x033E
    1afe:	40 91 3f 03 	lds	r20, 0x033F
    1b02:	50 91 40 03 	lds	r21, 0x0340
    1b06:	84 1b       	sub	r24, r20
    1b08:	95 0b       	sbc	r25, r21
    1b0a:	40 91 7b 03 	lds	r20, 0x037B
    1b0e:	50 91 7c 03 	lds	r21, 0x037C
    1b12:	84 1b       	sub	r24, r20
    1b14:	95 0b       	sbc	r25, r21
    1b16:	90 93 64 03 	sts	0x0364, r25
    1b1a:	80 93 63 03 	sts	0x0363, r24
				if(proximityResult[5] < 0) {
    1b1e:	97 fd       	sbrc	r25, 7
    1b20:	9f c4       	rjmp	.+2366   	; 0x2460 <__stack+0x261>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
    1b22:	80 91 41 03 	lds	r24, 0x0341
    1b26:	90 91 42 03 	lds	r25, 0x0342
    1b2a:	40 91 43 03 	lds	r20, 0x0343
    1b2e:	50 91 44 03 	lds	r21, 0x0344
    1b32:	84 1b       	sub	r24, r20
    1b34:	95 0b       	sbc	r25, r21
    1b36:	40 91 7d 03 	lds	r20, 0x037D
    1b3a:	50 91 7e 03 	lds	r21, 0x037E
    1b3e:	84 1b       	sub	r24, r20
    1b40:	95 0b       	sbc	r25, r21
    1b42:	90 93 66 03 	sts	0x0366, r25
    1b46:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[6] < 0) {
    1b4a:	97 fd       	sbrc	r25, 7
    1b4c:	84 c4       	rjmp	.+2312   	; 0x2456 <__stack+0x257>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
    1b4e:	80 91 45 03 	lds	r24, 0x0345
    1b52:	90 91 46 03 	lds	r25, 0x0346
    1b56:	40 91 47 03 	lds	r20, 0x0347
    1b5a:	50 91 48 03 	lds	r21, 0x0348
    1b5e:	84 1b       	sub	r24, r20
    1b60:	95 0b       	sbc	r25, r21
    1b62:	40 91 7f 03 	lds	r20, 0x037F
    1b66:	50 91 80 03 	lds	r21, 0x0380
    1b6a:	84 1b       	sub	r24, r20
    1b6c:	95 0b       	sbc	r25, r21
    1b6e:	90 93 68 03 	sts	0x0368, r25
    1b72:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[7] < 0) {
    1b76:	97 fd       	sbrc	r25, 7
    1b78:	69 c4       	rjmp	.+2258   	; 0x244c <__stack+0x24d>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
    1b7a:	80 91 49 03 	lds	r24, 0x0349
    1b7e:	90 91 4a 03 	lds	r25, 0x034A
    1b82:	40 91 4b 03 	lds	r20, 0x034B
    1b86:	50 91 4c 03 	lds	r21, 0x034C
    1b8a:	84 1b       	sub	r24, r20
    1b8c:	95 0b       	sbc	r25, r21
    1b8e:	40 91 81 03 	lds	r20, 0x0381
    1b92:	50 91 82 03 	lds	r21, 0x0382
    1b96:	84 1b       	sub	r24, r20
    1b98:	95 0b       	sbc	r25, r21
    1b9a:	90 93 6a 03 	sts	0x036A, r25
    1b9e:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[8] < 0) {
    1ba2:	97 fd       	sbrc	r25, 7
    1ba4:	4e c4       	rjmp	.+2204   	; 0x2442 <__stack+0x243>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
    1ba6:	80 91 4d 03 	lds	r24, 0x034D
    1baa:	90 91 4e 03 	lds	r25, 0x034E
    1bae:	40 91 4f 03 	lds	r20, 0x034F
    1bb2:	50 91 50 03 	lds	r21, 0x0350
    1bb6:	84 1b       	sub	r24, r20
    1bb8:	95 0b       	sbc	r25, r21
    1bba:	40 91 83 03 	lds	r20, 0x0383
    1bbe:	50 91 84 03 	lds	r21, 0x0384
    1bc2:	84 1b       	sub	r24, r20
    1bc4:	95 0b       	sbc	r25, r21
    1bc6:	90 93 6c 03 	sts	0x036C, r25
    1bca:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[9] < 0) {
    1bce:	97 fd       	sbrc	r25, 7
    1bd0:	33 c4       	rjmp	.+2150   	; 0x2438 <__stack+0x239>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
    1bd2:	80 91 51 03 	lds	r24, 0x0351
    1bd6:	90 91 52 03 	lds	r25, 0x0352
    1bda:	40 91 53 03 	lds	r20, 0x0353
    1bde:	50 91 54 03 	lds	r21, 0x0354
    1be2:	84 1b       	sub	r24, r20
    1be4:	95 0b       	sbc	r25, r21
    1be6:	40 91 85 03 	lds	r20, 0x0385
    1bea:	50 91 86 03 	lds	r21, 0x0386
    1bee:	84 1b       	sub	r24, r20
    1bf0:	95 0b       	sbc	r25, r21
    1bf2:	90 93 6e 03 	sts	0x036E, r25
    1bf6:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[10] < 0) {
    1bfa:	97 fd       	sbrc	r25, 7
    1bfc:	18 c4       	rjmp	.+2096   	; 0x242e <__stack+0x22f>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23] - proximityOffset[11];	// ambient - (ambient+reflected) - offset
    1bfe:	80 91 55 03 	lds	r24, 0x0355
    1c02:	90 91 56 03 	lds	r25, 0x0356
    1c06:	40 91 57 03 	lds	r20, 0x0357
    1c0a:	50 91 58 03 	lds	r21, 0x0358
    1c0e:	84 1b       	sub	r24, r20
    1c10:	95 0b       	sbc	r25, r21
    1c12:	40 91 87 03 	lds	r20, 0x0387
    1c16:	50 91 88 03 	lds	r21, 0x0388
    1c1a:	84 1b       	sub	r24, r20
    1c1c:	95 0b       	sbc	r25, r21
    1c1e:	90 93 70 03 	sts	0x0370, r25
    1c22:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[11] < 0) {
    1c26:	97 ff       	sbrs	r25, 7
    1c28:	b6 ce       	rjmp	.-660    	; 0x1996 <main+0x7d0>
					proximityResult[11] = 0;
    1c2a:	10 92 70 03 	sts	0x0370, r1
    1c2e:	10 92 6f 03 	sts	0x036F, r1
    1c32:	b1 ce       	rjmp	.-670    	; 0x1996 <main+0x7d0>

		}

		if(irEnabled) {

			ir_move = e_get_data();
    1c34:	0e 94 9d 19 	call	0x333a	; 0x333a <e_get_data>
    1c38:	80 93 26 04 	sts	0x0426, r24

			if(command_received) {
    1c3c:	90 91 27 04 	lds	r25, 0x0427
    1c40:	99 23       	and	r25, r25
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <main+0xa80>
    1c44:	32 c3       	rjmp	.+1636   	; 0x22aa <__stack+0xab>

				command_received = 0;
    1c46:	10 92 27 04 	sts	0x0427, r1

				switch(ir_move) {
    1c4a:	e8 2f       	mov	r30, r24
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	e5 33       	cpi	r30, 0x35	; 53
    1c50:	f1 05       	cpc	r31, r1
    1c52:	08 f4       	brcc	.+2      	; 0x1c56 <main+0xa90>
    1c54:	23 c5       	rjmp	.+2630   	; 0x269c <__stack+0x49d>
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
    1c56:	80 91 e8 03 	lds	r24, 0x03E8
    1c5a:	90 91 e9 03 	lds	r25, 0x03E9
    1c5e:	a0 91 ea 03 	lds	r26, 0x03EA
    1c62:	b0 91 eb 03 	lds	r27, 0x03EB
    1c66:	20 91 ec 03 	lds	r18, 0x03EC
    1c6a:	30 91 ed 03 	lds	r19, 0x03ED
    1c6e:	40 91 ee 03 	lds	r20, 0x03EE
    1c72:	50 91 ef 03 	lds	r21, 0x03EF
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    1c76:	b7 fd       	sbrc	r27, 7
    1c78:	2f c5       	rjmp	.+2654   	; 0x26d8 <__stack+0x4d9>
					speedr = pwm_right_desired >> 2;
    1c7a:	b5 95       	asr	r27
    1c7c:	a7 95       	ror	r26
    1c7e:	97 95       	ror	r25
    1c80:	87 95       	ror	r24
    1c82:	b5 95       	asr	r27
    1c84:	a7 95       	ror	r26
    1c86:	97 95       	ror	r25
    1c88:	87 95       	ror	r24
				} else {
					speedr = (-pwm_right_desired) >> 2;
    1c8a:	80 93 23 04 	sts	0x0423, r24
				}
				if(pwm_left_desired >= 0) {
    1c8e:	57 fd       	sbrc	r21, 7
    1c90:	fb c2       	rjmp	.+1526   	; 0x2288 <__stack+0x89>
					speedl = pwm_left_desired >> 2;
    1c92:	55 95       	asr	r21
    1c94:	47 95       	ror	r20
    1c96:	37 95       	ror	r19
    1c98:	27 95       	ror	r18
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	37 95       	ror	r19
    1ca0:	27 95       	ror	r18
    1ca2:	20 93 22 04 	sts	0x0422, r18
    1ca6:	80 90 46 04 	lds	r8, 0x0446
    1caa:	90 90 47 04 	lds	r9, 0x0447
    1cae:	e5 cc       	rjmp	.-1590   	; 0x167a <main+0x4b4>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    1cb0:	87 e0       	ldi	r24, 0x07	; 7
    1cb2:	60 e7       	ldi	r22, 0x70	; 112
    1cb4:	0e 94 ab 18 	call	0x3156	; 0x3156 <mirf_config_register>

			mirf_get_data(rfData);
    1cb8:	8c e6       	ldi	r24, 0x6C	; 108
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	0e 94 93 18 	call	0x3126	; 0x3126 <mirf_get_data>
			flush_rx_fifo();
    1cc0:	0e 94 8d 18 	call	0x311a	; 0x311a <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1cc4:	90 91 70 04 	lds	r25, 0x0470
    1cc8:	89 2f       	mov	r24, r25
    1cca:	8f 77       	andi	r24, 0x7F	; 127
    1ccc:	80 93 23 04 	sts	0x0423, r24
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1cd0:	30 91 71 04 	lds	r19, 0x0471
    1cd4:	23 2f       	mov	r18, r19
    1cd6:	2f 77       	andi	r18, 0x7F	; 127
    1cd8:	20 93 22 04 	sts	0x0422, r18
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1cdc:	97 fd       	sbrc	r25, 7
    1cde:	52 c4       	rjmp	.+2212   	; 0x2584 <__stack+0x385>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	90 95       	com	r25
    1cec:	81 95       	neg	r24
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	97 fd       	sbrc	r25, 7
    1cf4:	a0 95       	com	r26
    1cf6:	ba 2f       	mov	r27, r26
    1cf8:	80 93 e8 03 	sts	0x03E8, r24
    1cfc:	90 93 e9 03 	sts	0x03E9, r25
    1d00:	a0 93 ea 03 	sts	0x03EA, r26
    1d04:	b0 93 eb 03 	sts	0x03EB, r27
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1d08:	37 fd       	sbrc	r19, 7
    1d0a:	2a c4       	rjmp	.+2132   	; 0x2560 <__stack+0x361>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	22 0f       	add	r18, r18
    1d10:	33 1f       	adc	r19, r19
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	30 95       	com	r19
    1d18:	21 95       	neg	r18
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	44 27       	eor	r20, r20
    1d1e:	37 fd       	sbrc	r19, 7
    1d20:	40 95       	com	r20
    1d22:	54 2f       	mov	r21, r20
    1d24:	20 93 ec 03 	sts	0x03EC, r18
    1d28:	30 93 ed 03 	sts	0x03ED, r19
    1d2c:	40 93 ee 03 	sts	0x03EE, r20
    1d30:	50 93 ef 03 	sts	0x03EF, r21
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1d34:	84 33       	cpi	r24, 0x34	; 52
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	96 07       	cpc	r25, r22
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	a6 07       	cpc	r26, r22
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	b6 07       	cpc	r27, r22
    1d42:	64 f0       	brlt	.+24     	; 0x1d5c <main+0xb96>
    1d44:	83 e3       	ldi	r24, 0x33	; 51
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	80 93 e8 03 	sts	0x03E8, r24
    1d50:	90 93 e9 03 	sts	0x03E9, r25
    1d54:	a0 93 ea 03 	sts	0x03EA, r26
    1d58:	b0 93 eb 03 	sts	0x03EB, r27
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1d5c:	24 33       	cpi	r18, 0x34	; 52
    1d5e:	e1 e0       	ldi	r30, 0x01	; 1
    1d60:	3e 07       	cpc	r19, r30
    1d62:	e0 e0       	ldi	r30, 0x00	; 0
    1d64:	4e 07       	cpc	r20, r30
    1d66:	e0 e0       	ldi	r30, 0x00	; 0
    1d68:	5e 07       	cpc	r21, r30
    1d6a:	94 f0       	brlt	.+36     	; 0x1d90 <main+0xbca>
    1d6c:	23 e3       	ldi	r18, 0x33	; 51
    1d6e:	82 2e       	mov	r8, r18
    1d70:	21 e0       	ldi	r18, 0x01	; 1
    1d72:	92 2e       	mov	r9, r18
    1d74:	a1 2c       	mov	r10, r1
    1d76:	b1 2c       	mov	r11, r1
    1d78:	80 92 ec 03 	sts	0x03EC, r8
    1d7c:	90 92 ed 03 	sts	0x03ED, r9
    1d80:	a0 92 ee 03 	sts	0x03EE, r10
    1d84:	b0 92 ef 03 	sts	0x03EF, r11
    1d88:	23 e3       	ldi	r18, 0x33	; 51
    1d8a:	31 e0       	ldi	r19, 0x01	; 1
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1d90:	8d 3c       	cpi	r24, 0xCD	; 205
    1d92:	6e ef       	ldi	r22, 0xFE	; 254
    1d94:	96 07       	cpc	r25, r22
    1d96:	6f ef       	ldi	r22, 0xFF	; 255
    1d98:	a6 07       	cpc	r26, r22
    1d9a:	6f ef       	ldi	r22, 0xFF	; 255
    1d9c:	b6 07       	cpc	r27, r22
    1d9e:	64 f4       	brge	.+24     	; 0x1db8 <main+0xbf2>
    1da0:	8d ec       	ldi	r24, 0xCD	; 205
    1da2:	9e ef       	ldi	r25, 0xFE	; 254
    1da4:	af ef       	ldi	r26, 0xFF	; 255
    1da6:	bf ef       	ldi	r27, 0xFF	; 255
    1da8:	80 93 e8 03 	sts	0x03E8, r24
    1dac:	90 93 e9 03 	sts	0x03E9, r25
    1db0:	a0 93 ea 03 	sts	0x03EA, r26
    1db4:	b0 93 eb 03 	sts	0x03EB, r27
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1db8:	2d 3c       	cpi	r18, 0xCD	; 205
    1dba:	9e ef       	ldi	r25, 0xFE	; 254
    1dbc:	39 07       	cpc	r19, r25
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	49 07       	cpc	r20, r25
    1dc2:	9f ef       	ldi	r25, 0xFF	; 255
    1dc4:	59 07       	cpc	r21, r25
    1dc6:	84 f4       	brge	.+32     	; 0x1de8 <main+0xc22>
    1dc8:	0d ec       	ldi	r16, 0xCD	; 205
    1dca:	80 2e       	mov	r8, r16
    1dcc:	0e ef       	ldi	r16, 0xFE	; 254
    1dce:	90 2e       	mov	r9, r16
    1dd0:	0f ef       	ldi	r16, 0xFF	; 255
    1dd2:	a0 2e       	mov	r10, r16
    1dd4:	0f ef       	ldi	r16, 0xFF	; 255
    1dd6:	b0 2e       	mov	r11, r16
    1dd8:	80 92 ec 03 	sts	0x03EC, r8
    1ddc:	90 92 ed 03 	sts	0x03ED, r9
    1de0:	a0 92 ee 03 	sts	0x03EE, r10
    1de4:	b0 92 ef 03 	sts	0x03EF, r11
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    1de8:	40 91 6c 04 	lds	r20, 0x046C
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	50 93 67 04 	sts	0x0467, r21
    1df2:	40 93 66 04 	sts	0x0466, r20
    1df6:	20 91 6d 04 	lds	r18, 0x046D
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	30 93 69 04 	sts	0x0469, r19
    1e00:	20 93 68 04 	sts	0x0468, r18
    1e04:	e0 91 6e 04 	lds	r30, 0x046E
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	f0 93 6b 04 	sts	0x046B, r31
    1e0e:	e0 93 6a 04 	sts	0x046A, r30
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1e12:	94 2f       	mov	r25, r20
    1e14:	88 27       	eor	r24, r24
    1e16:	84 1b       	sub	r24, r20
    1e18:	95 0b       	sbc	r25, r21
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__udivmodhi4>
    1e20:	46 2f       	mov	r20, r22
    1e22:	40 95       	com	r20
    1e24:	40 93 0c 02 	sts	0x020C, r20
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1e28:	92 2f       	mov	r25, r18
    1e2a:	88 27       	eor	r24, r24
    1e2c:	82 1b       	sub	r24, r18
    1e2e:	93 0b       	sbc	r25, r19
    1e30:	b6 01       	movw	r22, r12
    1e32:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__udivmodhi4>
    1e36:	60 95       	com	r22
    1e38:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1e3c:	9e 2f       	mov	r25, r30
    1e3e:	88 27       	eor	r24, r24
    1e40:	8e 1b       	sub	r24, r30
    1e42:	9f 0b       	sbc	r25, r31
    1e44:	b6 01       	movw	r22, r12
    1e46:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__udivmodhi4>
    1e4a:	60 95       	com	r22
    1e4c:	60 93 0d 02 	sts	0x020D, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    1e50:	44 23       	and	r20, r20
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <main+0xc90>
    1e54:	83 c2       	rjmp	.+1286   	; 0x235c <__stack+0x15d>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1e56:	80 91 80 00 	lds	r24, 0x0080
    1e5a:	80 68       	ori	r24, 0x80	; 128
    1e5c:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	50 93 89 00 	sts	0x0089, r21
    1e66:	40 93 88 00 	sts	0x0088, r20
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    1e6a:	80 91 0d 02 	lds	r24, 0x020D

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    1e6e:	88 23       	and	r24, r24
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <main+0xcae>
    1e72:	6d c2       	rjmp	.+1242   	; 0x234e <__stack+0x14f>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    1e74:	90 91 80 00 	lds	r25, 0x0080
    1e78:	90 62       	ori	r25, 0x20	; 32
    1e7a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	90 93 8b 00 	sts	0x008B, r25
    1e84:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    1e88:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1e8c:	88 23       	and	r24, r24
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <main+0xccc>
    1e90:	57 c2       	rjmp	.+1198   	; 0x2340 <__stack+0x141>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    1e92:	90 91 80 00 	lds	r25, 0x0080
    1e96:	98 60       	ori	r25, 0x08	; 8
    1e98:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	90 93 8d 00 	sts	0x008D, r25
    1ea2:	80 93 8c 00 	sts	0x008C, r24
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1ea6:	80 91 6f 04 	lds	r24, 0x046F
    1eaa:	80 ff       	sbrs	r24, 0
    1eac:	2c c2       	rjmp	.+1112   	; 0x2306 <__stack+0x107>
				LED_IR1_LOW;
    1eae:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH; 
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1eb0:	81 ff       	sbrs	r24, 1
    1eb2:	27 c2       	rjmp	.+1102   	; 0x2302 <__stack+0x103>
				LED_IR2_LOW;
    1eb4:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	82 ff       	sbrs	r24, 2
    1eba:	ff c1       	rjmp	.+1022   	; 0x22ba <__stack+0xbb>
				irEnabled = 1;
    1ebc:	f0 92 11 02 	sts	0x0211, r15
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1ec0:	94 fd       	sbrc	r25, 4
    1ec2:	ff c1       	rjmp	.+1022   	; 0x22c2 <__stack+0xc3>
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1ec4:	96 ff       	sbrs	r25, 6
    1ec6:	f6 c1       	rjmp	.+1004   	; 0x22b4 <__stack+0xb5>
				obstacleAvoidanceEnabled = 1;
    1ec8:	f0 92 4c 04 	sts	0x044C, r15
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    1ecc:	88 0f       	add	r24, r24
    1ece:	88 0b       	sbc	r24, r24
    1ed0:	8f 21       	and	r24, r15
    1ed2:	80 93 51 04 	sts	0x0451, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    1ed6:	80 91 0b 02 	lds	r24, 0x020B
    1eda:	80 93 56 04 	sts	0x0456, r24

			switch(packetId) {
    1ede:	84 30       	cpi	r24, 0x04	; 4
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <main+0xd1e>
    1ee2:	0c c7       	rjmp	.+3608   	; 0x2cfc <__stack+0xafd>
    1ee4:	85 30       	cpi	r24, 0x05	; 5
    1ee6:	08 f0       	brcs	.+2      	; 0x1eea <main+0xd24>
    1ee8:	40 c2       	rjmp	.+1152   	; 0x236a <__stack+0x16b>
    1eea:	83 30       	cpi	r24, 0x03	; 3
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <main+0xd2a>
    1eee:	5d c0       	rjmp	.+186    	; 0x1faa <main+0xde4>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    1ef0:	90 91 59 03 	lds	r25, 0x0359
    1ef4:	80 91 5a 03 	lds	r24, 0x035A
    1ef8:	90 93 57 04 	sts	0x0457, r25
					ackPayload[2] = proximityResult[0]>>8;					
    1efc:	80 93 58 04 	sts	0x0458, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    1f00:	90 91 5b 03 	lds	r25, 0x035B
    1f04:	80 91 5c 03 	lds	r24, 0x035C
    1f08:	90 93 59 04 	sts	0x0459, r25
					ackPayload[4] = proximityResult[1]>>8;
    1f0c:	80 93 5a 04 	sts	0x045A, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    1f10:	90 91 5d 03 	lds	r25, 0x035D
    1f14:	80 91 5e 03 	lds	r24, 0x035E
    1f18:	90 93 5b 04 	sts	0x045B, r25
					ackPayload[6] = proximityResult[2]>>8;
    1f1c:	80 93 5c 04 	sts	0x045C, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    1f20:	90 91 5f 03 	lds	r25, 0x035F
    1f24:	80 91 60 03 	lds	r24, 0x0360
    1f28:	90 93 5d 04 	sts	0x045D, r25
					ackPayload[8] = proximityResult[3]>>8;
    1f2c:	80 93 5e 04 	sts	0x045E, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    1f30:	90 91 63 03 	lds	r25, 0x0363
    1f34:	80 91 64 03 	lds	r24, 0x0364
    1f38:	90 93 5f 04 	sts	0x045F, r25
					ackPayload[10] = proximityResult[5]>>8;
    1f3c:	80 93 60 04 	sts	0x0460, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    1f40:	90 91 65 03 	lds	r25, 0x0365
    1f44:	80 91 66 03 	lds	r24, 0x0366
    1f48:	90 93 61 04 	sts	0x0461, r25
					ackPayload[12] = proximityResult[6]>>8;
    1f4c:	80 93 62 04 	sts	0x0462, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    1f50:	90 91 67 03 	lds	r25, 0x0367
    1f54:	80 91 68 03 	lds	r24, 0x0368
    1f58:	90 93 63 04 	sts	0x0463, r25
					ackPayload[14] = proximityResult[7]>>8;	
    1f5c:	80 93 64 04 	sts	0x0464, r24
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
    1f60:	20 91 03 01 	lds	r18, 0x0103
    1f64:	80 91 03 01 	lds	r24, 0x0103
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	80 72       	andi	r24, 0x20	; 32
    1f6c:	90 70       	andi	r25, 0x00	; 0
    1f6e:	95 95       	asr	r25
    1f70:	87 95       	ror	r24
    1f72:	95 95       	asr	r25
    1f74:	87 95       	ror	r24
    1f76:	95 95       	asr	r25
    1f78:	87 95       	ror	r24
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	20 71       	andi	r18, 0x10	; 16
    1f8a:	30 70       	andi	r19, 0x00	; 0
    1f8c:	35 95       	asr	r19
    1f8e:	27 95       	ror	r18
    1f90:	35 95       	asr	r19
    1f92:	27 95       	ror	r18
    1f94:	35 95       	asr	r19
    1f96:	27 95       	ror	r18
    1f98:	35 95       	asr	r19
    1f9a:	27 95       	ror	r18
    1f9c:	82 2b       	or	r24, r18
    1f9e:	80 93 65 04 	sts	0x0465, r24
					packetId = 4;
    1fa2:	44 e0       	ldi	r20, 0x04	; 4
    1fa4:	94 2e       	mov	r9, r20
    1fa6:	90 92 0b 02 	sts	0x020B, r9
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
    1faa:	86 e5       	ldi	r24, 0x56	; 86
    1fac:	94 e0       	ldi	r25, 0x04	; 4
    1fae:	60 e1       	ldi	r22, 0x10	; 16
    1fb0:	0e 94 20 19 	call	0x3240	; 0x3240 <writeAckPayload>
    1fb4:	70 cb       	rjmp	.-2336   	; 0x1696 <main+0x4d0>
			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {

			for (i=0;i<12;i++) {
				proximityOffset[i]=(unsigned int)((float)proximitySum[i]/(float)calibrationCycle);
    1fb6:	60 91 93 03 	lds	r22, 0x0393
    1fba:	70 91 94 03 	lds	r23, 0x0394
    1fbe:	80 91 95 03 	lds	r24, 0x0395
    1fc2:	90 91 96 03 	lds	r25, 0x0396
    1fc6:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e7       	ldi	r20, 0x70	; 112
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    1fd6:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    1fda:	70 93 72 03 	sts	0x0372, r23
    1fde:	60 93 71 03 	sts	0x0371, r22
    1fe2:	60 91 97 03 	lds	r22, 0x0397
    1fe6:	70 91 98 03 	lds	r23, 0x0398
    1fea:	80 91 99 03 	lds	r24, 0x0399
    1fee:	90 91 9a 03 	lds	r25, 0x039A
    1ff2:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e7       	ldi	r20, 0x70	; 112
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    2002:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    2006:	70 93 74 03 	sts	0x0374, r23
    200a:	60 93 73 03 	sts	0x0373, r22
    200e:	60 91 9b 03 	lds	r22, 0x039B
    2012:	70 91 9c 03 	lds	r23, 0x039C
    2016:	80 91 9d 03 	lds	r24, 0x039D
    201a:	90 91 9e 03 	lds	r25, 0x039E
    201e:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e7       	ldi	r20, 0x70	; 112
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    202e:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    2032:	70 93 76 03 	sts	0x0376, r23
    2036:	60 93 75 03 	sts	0x0375, r22
    203a:	60 91 9f 03 	lds	r22, 0x039F
    203e:	70 91 a0 03 	lds	r23, 0x03A0
    2042:	80 91 a1 03 	lds	r24, 0x03A1
    2046:	90 91 a2 03 	lds	r25, 0x03A2
    204a:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e7       	ldi	r20, 0x70	; 112
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    205a:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    205e:	70 93 78 03 	sts	0x0378, r23
    2062:	60 93 77 03 	sts	0x0377, r22
    2066:	60 91 a3 03 	lds	r22, 0x03A3
    206a:	70 91 a4 03 	lds	r23, 0x03A4
    206e:	80 91 a5 03 	lds	r24, 0x03A5
    2072:	90 91 a6 03 	lds	r25, 0x03A6
    2076:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e7       	ldi	r20, 0x70	; 112
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    2086:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    208a:	70 93 7a 03 	sts	0x037A, r23
    208e:	60 93 79 03 	sts	0x0379, r22
    2092:	60 91 a7 03 	lds	r22, 0x03A7
    2096:	70 91 a8 03 	lds	r23, 0x03A8
    209a:	80 91 a9 03 	lds	r24, 0x03A9
    209e:	90 91 aa 03 	lds	r25, 0x03AA
    20a2:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e7       	ldi	r20, 0x70	; 112
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    20b2:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    20b6:	70 93 7c 03 	sts	0x037C, r23
    20ba:	60 93 7b 03 	sts	0x037B, r22
    20be:	60 91 ab 03 	lds	r22, 0x03AB
    20c2:	70 91 ac 03 	lds	r23, 0x03AC
    20c6:	80 91 ad 03 	lds	r24, 0x03AD
    20ca:	90 91 ae 03 	lds	r25, 0x03AE
    20ce:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e7       	ldi	r20, 0x70	; 112
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    20de:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    20e2:	70 93 7e 03 	sts	0x037E, r23
    20e6:	60 93 7d 03 	sts	0x037D, r22
    20ea:	60 91 af 03 	lds	r22, 0x03AF
    20ee:	70 91 b0 03 	lds	r23, 0x03B0
    20f2:	80 91 b1 03 	lds	r24, 0x03B1
    20f6:	90 91 b2 03 	lds	r25, 0x03B2
    20fa:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e7       	ldi	r20, 0x70	; 112
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    210a:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    210e:	70 93 80 03 	sts	0x0380, r23
    2112:	60 93 7f 03 	sts	0x037F, r22
    2116:	60 91 b3 03 	lds	r22, 0x03B3
    211a:	70 91 b4 03 	lds	r23, 0x03B4
    211e:	80 91 b5 03 	lds	r24, 0x03B5
    2122:	90 91 b6 03 	lds	r25, 0x03B6
    2126:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e7       	ldi	r20, 0x70	; 112
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    2136:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    213a:	70 93 82 03 	sts	0x0382, r23
    213e:	60 93 81 03 	sts	0x0381, r22
    2142:	60 91 b7 03 	lds	r22, 0x03B7
    2146:	70 91 b8 03 	lds	r23, 0x03B8
    214a:	80 91 b9 03 	lds	r24, 0x03B9
    214e:	90 91 ba 03 	lds	r25, 0x03BA
    2152:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e7       	ldi	r20, 0x70	; 112
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    2162:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    2166:	70 93 84 03 	sts	0x0384, r23
    216a:	60 93 83 03 	sts	0x0383, r22
    216e:	60 91 bb 03 	lds	r22, 0x03BB
    2172:	70 91 bc 03 	lds	r23, 0x03BC
    2176:	80 91 bd 03 	lds	r24, 0x03BD
    217a:	90 91 be 03 	lds	r25, 0x03BE
    217e:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e7       	ldi	r20, 0x70	; 112
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    218e:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    2192:	70 93 86 03 	sts	0x0386, r23
    2196:	60 93 85 03 	sts	0x0385, r22
    219a:	60 91 bf 03 	lds	r22, 0x03BF
    219e:	70 91 c0 03 	lds	r23, 0x03C0
    21a2:	80 91 c1 03 	lds	r24, 0x03C1
    21a6:	90 91 c2 03 	lds	r25, 0x03C2
    21aa:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatunsisf>
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e7       	ldi	r20, 0x70	; 112
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    21ba:	0e 94 be 20 	call	0x417c	; 0x417c <__fixunssfsi>
    21be:	70 93 88 03 	sts	0x0388, r23
    21c2:	60 93 87 03 	sts	0x0387, r22
			}

			accOffsetX = (signed int)((float)accOffsetXSum/(float)calibrationCycle);				
    21c6:	60 91 3f 04 	lds	r22, 0x043F
    21ca:	70 91 40 04 	lds	r23, 0x0440
    21ce:	88 27       	eor	r24, r24
    21d0:	77 fd       	sbrc	r23, 7
    21d2:	80 95       	com	r24
    21d4:	98 2f       	mov	r25, r24
    21d6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e7       	ldi	r20, 0x70	; 112
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    21e6:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
    21ea:	70 93 38 04 	sts	0x0438, r23
    21ee:	60 93 37 04 	sts	0x0437, r22
			accOffsetY = (signed int)(accOffsetYSum/calibrationCycle);
    21f2:	80 91 41 04 	lds	r24, 0x0441
    21f6:	90 91 42 04 	lds	r25, 0x0442
    21fa:	b8 01       	movw	r22, r16
    21fc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__divmodhi4>
    2200:	70 93 3a 04 	sts	0x043A, r23
    2204:	60 93 39 04 	sts	0x0439, r22
			accOffsetZ = (signed int)((float)accOffsetZSum/(float)calibrationCycle);
    2208:	60 91 43 04 	lds	r22, 0x0443
    220c:	70 91 44 04 	lds	r23, 0x0444
    2210:	88 27       	eor	r24, r24
    2212:	77 fd       	sbrc	r23, 7
    2214:	80 95       	com	r24
    2216:	98 2f       	mov	r25, r24
    2218:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e7       	ldi	r20, 0x70	; 112
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 87 23 	call	0x470e	; 0x470e <__divsf3>
    2228:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
    222c:	70 93 3c 04 	sts	0x043C, r23
    2230:	60 93 3b 04 	sts	0x043B, r22

			startCalibration = 0;
    2234:	10 92 49 04 	sts	0x0449, r1
			calibrationCycle = 0;
    2238:	10 92 4b 04 	sts	0x044B, r1
    223c:	10 92 4a 04 	sts	0x044A, r1

			pwm_red = 255;
    2240:	e0 92 0c 02 	sts	0x020C, r14
			pwm_green = 255;
    2244:	e0 92 0d 02 	sts	0x020D, r14
			pwm_blue = 255;
    2248:	e0 92 0e 02 	sts	0x020E, r14

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    224c:	80 91 80 00 	lds	r24, 0x0080
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    2256:	30 92 89 00 	sts	0x0089, r3
    225a:	20 92 88 00 	sts	0x0088, r2

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    225e:	80 91 80 00 	lds	r24, 0x0080
    2262:	80 62       	ori	r24, 0x20	; 32
    2264:	80 93 80 00 	sts	0x0080, r24
		OCR1B = value;
    2268:	30 92 8b 00 	sts	0x008B, r3
    226c:	20 92 8a 00 	sts	0x008A, r2

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    2270:	80 91 80 00 	lds	r24, 0x0080
    2274:	88 60       	ori	r24, 0x08	; 8
    2276:	80 93 80 00 	sts	0x0080, r24
		OCR1C = value;
    227a:	4f ef       	ldi	r20, 0xFF	; 255
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	50 93 8d 00 	sts	0x008D, r21
    2282:	40 93 8c 00 	sts	0x008C, r20
    2286:	f4 c9       	rjmp	.-3096   	; 0x1670 <main+0x4aa>
					speedr = (-pwm_right_desired) >> 2;
				}
				if(pwm_left_desired >= 0) {
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
    2288:	50 95       	com	r21
    228a:	40 95       	com	r20
    228c:	30 95       	com	r19
    228e:	21 95       	neg	r18
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	4f 4f       	sbci	r20, 0xFF	; 255
    2294:	5f 4f       	sbci	r21, 0xFF	; 255
    2296:	55 95       	asr	r21
    2298:	47 95       	ror	r20
    229a:	37 95       	ror	r19
    229c:	27 95       	ror	r18
    229e:	55 95       	asr	r21
    22a0:	47 95       	ror	r20
    22a2:	37 95       	ror	r19
    22a4:	27 95       	ror	r18
    22a6:	20 93 22 04 	sts	0x0422, r18
    22aa:	80 90 46 04 	lds	r8, 0x0446
    22ae:	90 90 47 04 	lds	r9, 0x0447
    22b2:	e3 c9       	rjmp	.-3130   	; 0x167a <main+0x4b4>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    22b4:	10 92 4c 04 	sts	0x044C, r1
    22b8:	09 ce       	rjmp	.-1006   	; 0x1ecc <main+0xd06>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    22ba:	10 92 11 02 	sts	0x0211, r1
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    22be:	94 ff       	sbrs	r25, 4
    22c0:	01 ce       	rjmp	.-1022   	; 0x1ec4 <main+0xcfe>
				startCalibration = 1;
    22c2:	f0 92 49 04 	sts	0x0449, r15
				calibrationCycle = 0;
    22c6:	10 92 4b 04 	sts	0x044B, r1
    22ca:	10 92 4a 04 	sts	0x044A, r1
				pwm_red = 0;
    22ce:	10 92 0c 02 	sts	0x020C, r1
				pwm_green = 0;
    22d2:	10 92 0d 02 	sts	0x020D, r1
				pwm_blue = 0;
    22d6:	10 92 0e 02 	sts	0x020E, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    22da:	90 91 80 00 	lds	r25, 0x0080
    22de:	9f 77       	andi	r25, 0x7F	; 127
    22e0:	90 93 80 00 	sts	0x0080, r25
		PORTB &= ~(1 << 5);
    22e4:	2d 98       	cbi	0x05, 5	; 5
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    22e6:	90 91 80 00 	lds	r25, 0x0080
    22ea:	9f 7d       	andi	r25, 0xDF	; 223
    22ec:	90 93 80 00 	sts	0x0080, r25
		PORTB &= ~(1 << 6);
    22f0:	2e 98       	cbi	0x05, 6	; 5
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    22f2:	90 91 80 00 	lds	r25, 0x0080
    22f6:	97 7f       	andi	r25, 0xF7	; 247
    22f8:	90 93 80 00 	sts	0x0080, r25
		PORTB &= ~(1 << 7);
    22fc:	2f 98       	cbi	0x05, 7	; 5
    22fe:	98 2f       	mov	r25, r24
    2300:	e1 cd       	rjmp	.-1086   	; 0x1ec4 <main+0xcfe>
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    2302:	45 9a       	sbi	0x08, 5	; 8
    2304:	d8 cd       	rjmp	.-1104   	; 0x1eb6 <main+0xcf0>
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH; 
    2306:	44 9a       	sbi	0x08, 4	; 8
    2308:	d3 cd       	rjmp	.-1114   	; 0x1eb0 <main+0xcea>

		if(compute_left_vel) {
			if(last_num_lvel_samples_avg > 1) {
				last_left_vel = (unsigned int)((last_left_vel_sum-last_left_vel_value)/(last_num_lvel_samples_avg-1));
			} else {
				last_left_vel = 0;
    230a:	10 92 dd 03 	sts	0x03DD, r1
    230e:	10 92 dc 03 	sts	0x03DC, r1
    2312:	1a ca       	rjmp	.-3020   	; 0x1748 <main+0x582>

		if(compute_right_vel) {
			if(last_num_rvel_samples_avg > 1) {
				last_right_vel = (unsigned int)((last_right_vel_sum-last_right_vel_value)/(last_num_rvel_samples_avg-1));
			} else {
				last_right_vel = 0;
    2314:	10 92 df 03 	sts	0x03DF, r1
    2318:	10 92 de 03 	sts	0x03DE, r1
    231c:	39 ca       	rjmp	.-2958   	; 0x1790 <main+0x5ca>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    231e:	30 95       	com	r19
    2320:	21 95       	neg	r18
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
    2324:	30 93 ab 00 	sts	0x00AB, r19
    2328:	20 93 aa 00 	sts	0x00AA, r18
    232c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <main+0x56>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    2330:	90 95       	com	r25
    2332:	81 95       	neg	r24
    2334:	9f 4f       	sbci	r25, 0xFF	; 255
    2336:	90 93 9b 00 	sts	0x009B, r25
    233a:	80 93 9a 00 	sts	0x009A, r24
    233e:	57 ca       	rjmp	.-2898   	; 0x17ee <main+0x628>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    2340:	80 91 80 00 	lds	r24, 0x0080
    2344:	87 7f       	andi	r24, 0xF7	; 247
    2346:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    234a:	2f 98       	cbi	0x05, 7	; 5
    234c:	ac cd       	rjmp	.-1192   	; 0x1ea6 <main+0xce0>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    234e:	80 91 80 00 	lds	r24, 0x0080
    2352:	8f 7d       	andi	r24, 0xDF	; 223
    2354:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    2358:	2e 98       	cbi	0x05, 6	; 5
    235a:	96 cd       	rjmp	.-1236   	; 0x1e88 <main+0xcc2>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    235c:	80 91 80 00 	lds	r24, 0x0080
    2360:	8f 77       	andi	r24, 0x7F	; 127
    2362:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    2366:	2d 98       	cbi	0x05, 5	; 5
    2368:	80 cd       	rjmp	.-1280   	; 0x1e6a <main+0xca4>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    236a:	85 30       	cpi	r24, 0x05	; 5
    236c:	09 f4       	brne	.+2      	; 0x2370 <__stack+0x171>
    236e:	07 c5       	rjmp	.+2574   	; 0x2d7e <__stack+0xb7f>
    2370:	86 30       	cpi	r24, 0x06	; 6
    2372:	09 f0       	breq	.+2      	; 0x2376 <__stack+0x177>
    2374:	1a ce       	rjmp	.-972    	; 0x1faa <main+0xde4>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2376:	80 91 39 03 	lds	r24, 0x0339
    237a:	90 91 3a 03 	lds	r25, 0x033A
    237e:	80 93 57 04 	sts	0x0457, r24
					ackPayload[2] = proximityValue[8]>>8;
    2382:	80 91 39 03 	lds	r24, 0x0339
    2386:	90 91 3a 03 	lds	r25, 0x033A
    238a:	90 93 58 04 	sts	0x0458, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    238e:	80 91 49 03 	lds	r24, 0x0349
    2392:	90 91 4a 03 	lds	r25, 0x034A
    2396:	80 93 59 04 	sts	0x0459, r24
					ackPayload[4] = proximityValue[16]>>8;
    239a:	80 91 49 03 	lds	r24, 0x0349
    239e:	90 91 4a 03 	lds	r25, 0x034A
    23a2:	90 93 5a 04 	sts	0x045A, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    23a6:	80 91 4d 03 	lds	r24, 0x034D
    23aa:	90 91 4e 03 	lds	r25, 0x034E
    23ae:	80 93 5b 04 	sts	0x045B, r24
					ackPayload[6] = proximityValue[18]>>8;
    23b2:	80 91 4d 03 	lds	r24, 0x034D
    23b6:	90 91 4e 03 	lds	r25, 0x034E
    23ba:	90 93 5c 04 	sts	0x045C, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    23be:	80 91 51 03 	lds	r24, 0x0351
    23c2:	90 91 52 03 	lds	r25, 0x0352
    23c6:	80 93 5d 04 	sts	0x045D, r24
					ackPayload[8] = proximityValue[20]>>8;
    23ca:	80 91 51 03 	lds	r24, 0x0351
    23ce:	90 91 52 03 	lds	r25, 0x0352
    23d2:	90 93 5e 04 	sts	0x045E, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    23d6:	80 91 55 03 	lds	r24, 0x0355
    23da:	90 91 56 03 	lds	r25, 0x0356
    23de:	80 93 5f 04 	sts	0x045F, r24
					ackPayload[10] = proximityValue[22]>>8;
    23e2:	80 91 55 03 	lds	r24, 0x0355
    23e6:	90 91 56 03 	lds	r25, 0x0356
    23ea:	90 93 60 04 	sts	0x0460, r25
					ackPayload[11] = accZ&0xFF;
    23ee:	90 91 2f 04 	lds	r25, 0x042F
    23f2:	80 91 30 04 	lds	r24, 0x0430
    23f6:	90 93 61 04 	sts	0x0461, r25
					ackPayload[12] = accZ>>8;
    23fa:	80 93 62 04 	sts	0x0462, r24
					ackPayload[13] = batteryLevel&0xFF;
    23fe:	90 91 8d 03 	lds	r25, 0x038D
    2402:	80 91 8e 03 	lds	r24, 0x038E
    2406:	90 93 63 04 	sts	0x0463, r25
					ackPayload[14] = batteryLevel>>8;
    240a:	80 93 64 04 	sts	0x0464, r24
					ackPayload[15] = 0;				
    240e:	10 92 65 04 	sts	0x0465, r1
					packetId = 3;
    2412:	23 e0       	ldi	r18, 0x03	; 3
    2414:	20 93 0b 02 	sts	0x020B, r18
					break;											
    2418:	c8 cd       	rjmp	.-1136   	; 0x1faa <main+0xde4>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    241a:	10 92 5c 03 	sts	0x035C, r1
    241e:	10 92 5b 03 	sts	0x035B, r1
    2422:	27 cb       	rjmp	.-2482   	; 0x1a72 <main+0x8ac>

			} else { 

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    2424:	10 92 5a 03 	sts	0x035A, r1
    2428:	10 92 59 03 	sts	0x0359, r1
    242c:	0c cb       	rjmp	.-2536   	; 0x1a46 <main+0x880>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    242e:	10 92 6e 03 	sts	0x036E, r1
    2432:	10 92 6d 03 	sts	0x036D, r1
    2436:	e3 cb       	rjmp	.-2106   	; 0x1bfe <main+0xa38>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    2438:	10 92 6c 03 	sts	0x036C, r1
    243c:	10 92 6b 03 	sts	0x036B, r1
    2440:	c8 cb       	rjmp	.-2160   	; 0x1bd2 <main+0xa0c>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    2442:	10 92 6a 03 	sts	0x036A, r1
    2446:	10 92 69 03 	sts	0x0369, r1
    244a:	ad cb       	rjmp	.-2214   	; 0x1ba6 <main+0x9e0>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    244c:	10 92 68 03 	sts	0x0368, r1
    2450:	10 92 67 03 	sts	0x0367, r1
    2454:	92 cb       	rjmp	.-2268   	; 0x1b7a <main+0x9b4>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    2456:	10 92 66 03 	sts	0x0366, r1
    245a:	10 92 65 03 	sts	0x0365, r1
    245e:	77 cb       	rjmp	.-2322   	; 0x1b4e <main+0x988>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    2460:	10 92 64 03 	sts	0x0364, r1
    2464:	10 92 63 03 	sts	0x0363, r1
    2468:	5c cb       	rjmp	.-2376   	; 0x1b22 <main+0x95c>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    246a:	10 92 62 03 	sts	0x0362, r1
    246e:	10 92 61 03 	sts	0x0361, r1
    2472:	41 cb       	rjmp	.-2430   	; 0x1af6 <main+0x930>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    2474:	10 92 60 03 	sts	0x0360, r1
    2478:	10 92 5f 03 	sts	0x035F, r1
    247c:	26 cb       	rjmp	.-2484   	; 0x1aca <main+0x904>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    247e:	10 92 5e 03 	sts	0x035E, r1
    2482:	10 92 5d 03 	sts	0x035D, r1
    2486:	0b cb       	rjmp	.-2538   	; 0x1a9e <main+0x8d8>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    2488:	10 92 6e 03 	sts	0x036E, r1
    248c:	10 92 6d 03 	sts	0x036D, r1
    2490:	72 ca       	rjmp	.-2844   	; 0x1976 <main+0x7b0>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    2492:	10 92 6c 03 	sts	0x036C, r1
    2496:	10 92 6b 03 	sts	0x036B, r1
    249a:	5d ca       	rjmp	.-2886   	; 0x1956 <main+0x790>
					proximityResult[7] = 0;
				}	

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    249c:	10 92 6a 03 	sts	0x036A, r1
    24a0:	10 92 69 03 	sts	0x0369, r1
    24a4:	48 ca       	rjmp	.-2928   	; 0x1936 <main+0x770>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    24a6:	10 92 68 03 	sts	0x0368, r1
    24aa:	10 92 67 03 	sts	0x0367, r1
    24ae:	33 ca       	rjmp	.-2970   	; 0x1916 <main+0x750>
			updateProx = 0;
			if(startCalibration) {

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    24b0:	10 92 5a 03 	sts	0x035A, r1
    24b4:	10 92 59 03 	sts	0x0359, r1
    24b8:	be c9       	rjmp	.-3204   	; 0x1836 <main+0x670>
					proximityResult[1] = 0;
				}					

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    24ba:	10 92 5e 03 	sts	0x035E, r1
    24be:	10 92 5d 03 	sts	0x035D, r1
    24c2:	d9 c9       	rjmp	.-3150   	; 0x1876 <main+0x6b0>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    24c4:	10 92 5c 03 	sts	0x035C, r1
    24c8:	10 92 5b 03 	sts	0x035B, r1
    24cc:	c4 c9       	rjmp	.-3192   	; 0x1856 <main+0x690>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    24ce:	10 92 66 03 	sts	0x0366, r1
    24d2:	10 92 65 03 	sts	0x0365, r1
    24d6:	0f ca       	rjmp	.-3042   	; 0x18f6 <main+0x730>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    24d8:	10 92 64 03 	sts	0x0364, r1
    24dc:	10 92 63 03 	sts	0x0363, r1
    24e0:	fa c9       	rjmp	.-3084   	; 0x18d6 <main+0x710>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    24e2:	10 92 62 03 	sts	0x0362, r1
    24e6:	10 92 61 03 	sts	0x0361, r1
    24ea:	e5 c9       	rjmp	.-3126   	; 0x18b6 <main+0x6f0>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    24ec:	10 92 60 03 	sts	0x0360, r1
    24f0:	10 92 5f 03 	sts	0x035F, r1
    24f4:	d0 c9       	rjmp	.-3168   	; 0x1896 <main+0x6d0>

			if(proxUpdated) {

				proxUpdated = 0;
				
				if(calibrationCycle==0) {
    24f6:	19 a2       	std	Y+33, r1	; 0x21
    24f8:	1a a2       	std	Y+34, r1	; 0x22
    24fa:	1b a2       	std	Y+35, r1	; 0x23
    24fc:	1c a2       	std	Y+36, r1	; 0x24
    24fe:	1d 8e       	std	Y+29, r1	; 0x1d
    2500:	1e 8e       	std	Y+30, r1	; 0x1e
    2502:	1f 8e       	std	Y+31, r1	; 0x1f
    2504:	18 a2       	std	Y+32, r1	; 0x20
    2506:	19 8e       	std	Y+25, r1	; 0x19
    2508:	1a 8e       	std	Y+26, r1	; 0x1a
    250a:	1b 8e       	std	Y+27, r1	; 0x1b
    250c:	1c 8e       	std	Y+28, r1	; 0x1c
    250e:	1d 8a       	std	Y+21, r1	; 0x15
    2510:	1e 8a       	std	Y+22, r1	; 0x16
    2512:	1f 8a       	std	Y+23, r1	; 0x17
    2514:	18 8e       	std	Y+24, r1	; 0x18
    2516:	19 8a       	std	Y+17, r1	; 0x11
    2518:	1a 8a       	std	Y+18, r1	; 0x12
    251a:	1b 8a       	std	Y+19, r1	; 0x13
    251c:	1c 8a       	std	Y+20, r1	; 0x14
    251e:	1d 86       	std	Y+13, r1	; 0x0d
    2520:	1e 86       	std	Y+14, r1	; 0x0e
    2522:	1f 86       	std	Y+15, r1	; 0x0f
    2524:	18 8a       	std	Y+16, r1	; 0x10
    2526:	19 86       	std	Y+9, r1	; 0x09
    2528:	1a 86       	std	Y+10, r1	; 0x0a
    252a:	1b 86       	std	Y+11, r1	; 0x0b
    252c:	1c 86       	std	Y+12, r1	; 0x0c
    252e:	1d 82       	std	Y+5, r1	; 0x05
    2530:	1e 82       	std	Y+6, r1	; 0x06
    2532:	1f 82       	std	Y+7, r1	; 0x07
    2534:	18 86       	std	Y+8, r1	; 0x08
    2536:	19 82       	std	Y+1, r1	; 0x01
    2538:	1a 82       	std	Y+2, r1	; 0x02
    253a:	1b 82       	std	Y+3, r1	; 0x03
    253c:	1c 82       	std	Y+4, r1	; 0x04
    253e:	44 24       	eor	r4, r4
    2540:	55 24       	eor	r5, r5
    2542:	32 01       	movw	r6, r4
    2544:	88 24       	eor	r8, r8
    2546:	99 24       	eor	r9, r9
    2548:	54 01       	movw	r10, r8
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	a9 01       	movw	r20, r18
    2550:	18 a6       	std	Y+40, r1	; 0x28
    2552:	1f a2       	std	Y+39, r1	; 0x27
    2554:	1e a2       	std	Y+38, r1	; 0x26
    2556:	1d a2       	std	Y+37, r1	; 0x25
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <main+0x220>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	22 0f       	add	r18, r18
    2568:	33 1f       	adc	r19, r19
    256a:	44 27       	eor	r20, r20
    256c:	37 fd       	sbrc	r19, 7
    256e:	40 95       	com	r20
    2570:	54 2f       	mov	r21, r20
    2572:	20 93 ec 03 	sts	0x03EC, r18
    2576:	30 93 ed 03 	sts	0x03ED, r19
    257a:	40 93 ee 03 	sts	0x03EE, r20
    257e:	50 93 ef 03 	sts	0x03EF, r21
    2582:	d8 cb       	rjmp	.-2128   	; 0x1d34 <main+0xb6e>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	aa 27       	eor	r26, r26
    2590:	97 fd       	sbrc	r25, 7
    2592:	a0 95       	com	r26
    2594:	ba 2f       	mov	r27, r26
    2596:	80 93 e8 03 	sts	0x03E8, r24
    259a:	90 93 e9 03 	sts	0x03E9, r25
    259e:	a0 93 ea 03 	sts	0x03EA, r26
    25a2:	b0 93 eb 03 	sts	0x03EB, r27
    25a6:	b0 cb       	rjmp	.-2208   	; 0x1d08 <main+0xb42>

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    25a8:	40 91 49 03 	lds	r20, 0x0349
    25ac:	50 91 4a 03 	lds	r21, 0x034A
    25b0:	80 91 4b 03 	lds	r24, 0x034B
    25b4:	90 91 4c 03 	lds	r25, 0x034C
    25b8:	48 1b       	sub	r20, r24
    25ba:	59 0b       	sbc	r21, r25
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    25bc:	e0 91 4d 03 	lds	r30, 0x034D
    25c0:	f0 91 4e 03 	lds	r31, 0x034E
    25c4:	80 91 4f 03 	lds	r24, 0x034F
    25c8:	90 91 50 03 	lds	r25, 0x0350
    25cc:	e8 1b       	sub	r30, r24
    25ce:	f9 0b       	sbc	r31, r25
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    25d0:	20 91 51 03 	lds	r18, 0x0351
    25d4:	30 91 52 03 	lds	r19, 0x0352
    25d8:	80 91 53 03 	lds	r24, 0x0353
    25dc:	90 91 54 03 	lds	r25, 0x0354
    25e0:	28 1b       	sub	r18, r24
    25e2:	39 0b       	sbc	r19, r25
    25e4:	37 fd       	sbrc	r19, 7
    25e6:	2f c4       	rjmp	.+2142   	; 0x2e46 <__stack+0xc47>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    25e8:	80 91 55 03 	lds	r24, 0x0355
    25ec:	90 91 56 03 	lds	r25, 0x0356
    25f0:	60 91 57 03 	lds	r22, 0x0357
    25f4:	70 91 58 03 	lds	r23, 0x0358
    25f8:	86 1b       	sub	r24, r22
    25fa:	97 0b       	sbc	r25, r23
    25fc:	97 fd       	sbrc	r25, 7
    25fe:	1c c4       	rjmp	.+2104   	; 0x2e38 <__stack+0xc39>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    2600:	57 fd       	sbrc	r21, 7
    2602:	1e c4       	rjmp	.+2108   	; 0x2e40 <__stack+0xc41>
    2604:	50 93 53 04 	sts	0x0453, r21
    2608:	40 93 52 04 	sts	0x0452, r20
	minGround = GROUND_LEFT;
    260c:	63 e0       	ldi	r22, 0x03	; 3
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	70 93 15 02 	sts	0x0215, r23
    2614:	60 93 14 02 	sts	0x0214, r22
	if(g1 < minGroundValue) {
    2618:	f7 fd       	sbrc	r31, 7
    261a:	18 c4       	rjmp	.+2096   	; 0x2e4c <__stack+0xc4d>
    261c:	e4 17       	cp	r30, r20
    261e:	f5 07       	cpc	r31, r21
    2620:	58 f4       	brcc	.+22     	; 0x2638 <__stack+0x439>
		minGroundValue = g1;
    2622:	f0 93 53 04 	sts	0x0453, r31
    2626:	e0 93 52 04 	sts	0x0452, r30
		minGround = GROUND_CENTER_LEFT;
    262a:	a2 e0       	ldi	r26, 0x02	; 2
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	b0 93 15 02 	sts	0x0215, r27
    2632:	a0 93 14 02 	sts	0x0214, r26
    2636:	af 01       	movw	r20, r30
	}
	if(g2 < minGroundValue) {
    2638:	24 17       	cp	r18, r20
    263a:	35 07       	cpc	r19, r21
    263c:	58 f4       	brcc	.+22     	; 0x2654 <__stack+0x455>
		minGroundValue = g2;
    263e:	30 93 53 04 	sts	0x0453, r19
    2642:	20 93 52 04 	sts	0x0452, r18
		minGround = GROUND_CENTER_RIGHT;
    2646:	e1 e0       	ldi	r30, 0x01	; 1
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	f0 93 15 02 	sts	0x0215, r31
    264e:	e0 93 14 02 	sts	0x0214, r30
    2652:	a9 01       	movw	r20, r18
	}
	if(g3 < minGroundValue) {
    2654:	84 17       	cp	r24, r20
    2656:	95 07       	cpc	r25, r21
    2658:	48 f4       	brcc	.+18     	; 0x266c <__stack+0x46d>
		minGroundValue = g3;
    265a:	90 93 53 04 	sts	0x0453, r25
    265e:	80 93 52 04 	sts	0x0452, r24
		minGround = GROUND_RIGHT;
    2662:	10 92 15 02 	sts	0x0215, r1
    2666:	10 92 14 02 	sts	0x0214, r1
    266a:	ac 01       	movw	r20, r24
	}

	if(minGroundValue <= CLIFF_THR) {
    266c:	44 37       	cpi	r20, 0x74	; 116
    266e:	51 05       	cpc	r21, r1
    2670:	08 f0       	brcs	.+2      	; 0x2674 <__stack+0x475>
    2672:	45 c8       	rjmp	.-3958   	; 0x16fe <main+0x538>
		pwm_right_working = 0;
    2674:	10 92 15 04 	sts	0x0415, r1
    2678:	10 92 16 04 	sts	0x0416, r1
    267c:	10 92 17 04 	sts	0x0417, r1
    2680:	10 92 18 04 	sts	0x0418, r1
		pwm_left_working = 0;
    2684:	10 92 19 04 	sts	0x0419, r1
    2688:	10 92 1a 04 	sts	0x041A, r1
    268c:	10 92 1b 04 	sts	0x041B, r1
    2690:	10 92 1c 04 	sts	0x041C, r1
    2694:	34 c8       	rjmp	.-3992   	; 0x16fe <main+0x538>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
				pwm_left_working = pwm_left_desired;
				
				if(obstacleAvoidanceEnabled) {
					//PORTB &= ~(1 << 7);
					obstacleAvoidance();
    2696:	0e 94 2f 07 	call	0xe5e	; 0xe5e <obstacleAvoidance>
    269a:	2c c8       	rjmp	.-4008   	; 0x16f4 <main+0x52e>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    269c:	ee 58       	subi	r30, 0x8E	; 142
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	05 90       	lpm	r0, Z+
    26a6:	f4 91       	lpm	r31, Z+
    26a8:	e0 2d       	mov	r30, r0
    26aa:	19 94       	eijmp
							case 0: 
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    26ac:	80 93 4c 04 	sts	0x044C, r24
								cliffAvoidanceEnabled = 0;
    26b0:	10 92 51 04 	sts	0x0451, r1
    26b4:	80 91 e8 03 	lds	r24, 0x03E8
    26b8:	90 91 e9 03 	lds	r25, 0x03E9
    26bc:	a0 91 ea 03 	lds	r26, 0x03EA
    26c0:	b0 91 eb 03 	lds	r27, 0x03EB
    26c4:	20 91 ec 03 	lds	r18, 0x03EC
    26c8:	30 91 ed 03 	lds	r19, 0x03ED
    26cc:	40 91 ee 03 	lds	r20, 0x03EE
    26d0:	50 91 ef 03 	lds	r21, 0x03EF
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    26d4:	b7 ff       	sbrs	r27, 7
    26d6:	d1 ca       	rjmp	.-2654   	; 0x1c7a <main+0xab4>
					speedr = pwm_right_desired >> 2;
    26d8:	b0 95       	com	r27
    26da:	a0 95       	com	r26
    26dc:	90 95       	com	r25
    26de:	81 95       	neg	r24
    26e0:	9f 4f       	sbci	r25, 0xFF	; 255
    26e2:	af 4f       	sbci	r26, 0xFF	; 255
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	c9 ca       	rjmp	.-2670   	; 0x1c7a <main+0xab4>
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    26e8:	10 92 4c 04 	sts	0x044C, r1
								cliffAvoidanceEnabled = 1;
    26ec:	f0 92 51 04 	sts	0x0451, r15
    26f0:	b2 ca       	rjmp	.-2716   	; 0x1c56 <main+0xa90>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;
					
					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    26f2:	10 92 4c 04 	sts	0x044C, r1
    26f6:	80 91 e8 03 	lds	r24, 0x03E8
    26fa:	90 91 e9 03 	lds	r25, 0x03E9
    26fe:	a0 91 ea 03 	lds	r26, 0x03EA
    2702:	b0 91 eb 03 	lds	r27, 0x03EB
    2706:	20 91 ec 03 	lds	r18, 0x03EC
    270a:	30 91 ed 03 	lds	r19, 0x03ED
    270e:	40 91 ee 03 	lds	r20, 0x03EE
    2712:	50 91 ef 03 	lds	r21, 0x03EF
						break;
    2716:	af ca       	rjmp	.-2722   	; 0x1c76 <main+0xab0>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    2718:	f0 92 4c 04 	sts	0x044C, r15
    271c:	80 91 e8 03 	lds	r24, 0x03E8
    2720:	90 91 e9 03 	lds	r25, 0x03E9
    2724:	a0 91 ea 03 	lds	r26, 0x03EA
    2728:	b0 91 eb 03 	lds	r27, 0x03EB
    272c:	20 91 ec 03 	lds	r18, 0x03EC
    2730:	30 91 ed 03 	lds	r19, 0x03ED
    2734:	40 91 ee 03 	lds	r20, 0x03EE
    2738:	50 91 ef 03 	lds	r21, 0x03EF
						break;
    273c:	9c ca       	rjmp	.-2760   	; 0x1c76 <main+0xab0>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    273e:	20 91 ec 03 	lds	r18, 0x03EC
    2742:	30 91 ed 03 	lds	r19, 0x03ED
    2746:	40 91 ee 03 	lds	r20, 0x03EE
    274a:	50 91 ef 03 	lds	r21, 0x03EF
    274e:	2e 51       	subi	r18, 0x1E	; 30
    2750:	30 40       	sbci	r19, 0x00	; 0
    2752:	40 40       	sbci	r20, 0x00	; 0
    2754:	50 40       	sbci	r21, 0x00	; 0
    2756:	20 93 ec 03 	sts	0x03EC, r18
    275a:	30 93 ed 03 	sts	0x03ED, r19
    275e:	40 93 ee 03 	sts	0x03EE, r20
    2762:	50 93 ef 03 	sts	0x03EF, r21
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    2766:	2a 39       	cpi	r18, 0x9A	; 154
    2768:	6d ef       	ldi	r22, 0xFD	; 253
    276a:	36 07       	cpc	r19, r22
    276c:	6f ef       	ldi	r22, 0xFF	; 255
    276e:	46 07       	cpc	r20, r22
    2770:	6f ef       	ldi	r22, 0xFF	; 255
    2772:	56 07       	cpc	r21, r22
    2774:	0c f0       	brlt	.+2      	; 0x2778 <__stack+0x579>
    2776:	6e c0       	rjmp	.+220    	; 0x2854 <__stack+0x655>
    2778:	8a e9       	ldi	r24, 0x9A	; 154
    277a:	9d ef       	ldi	r25, 0xFD	; 253
    277c:	af ef       	ldi	r26, 0xFF	; 255
    277e:	bf ef       	ldi	r27, 0xFF	; 255
    2780:	80 93 ec 03 	sts	0x03EC, r24
    2784:	90 93 ed 03 	sts	0x03ED, r25
    2788:	a0 93 ee 03 	sts	0x03EE, r26
    278c:	b0 93 ef 03 	sts	0x03EF, r27
    2790:	80 91 e8 03 	lds	r24, 0x03E8
    2794:	90 91 e9 03 	lds	r25, 0x03E9
    2798:	a0 91 ea 03 	lds	r26, 0x03EA
    279c:	b0 91 eb 03 	lds	r27, 0x03EB
    27a0:	2a e9       	ldi	r18, 0x9A	; 154
    27a2:	3d ef       	ldi	r19, 0xFD	; 253
    27a4:	4f ef       	ldi	r20, 0xFF	; 255
    27a6:	5f ef       	ldi	r21, 0xFF	; 255
    27a8:	66 ca       	rjmp	.-2868   	; 0x1c76 <main+0xab0>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    27aa:	20 91 e8 03 	lds	r18, 0x03E8
    27ae:	30 91 e9 03 	lds	r19, 0x03E9
    27b2:	40 91 ea 03 	lds	r20, 0x03EA
    27b6:	50 91 eb 03 	lds	r21, 0x03EB
    27ba:	80 91 e4 03 	lds	r24, 0x03E4
    27be:	90 91 e5 03 	lds	r25, 0x03E5
    27c2:	a0 91 e6 03 	lds	r26, 0x03E6
    27c6:	b0 91 e7 03 	lds	r27, 0x03E7
    27ca:	28 17       	cp	r18, r24
    27cc:	39 07       	cpc	r19, r25
    27ce:	4a 07       	cpc	r20, r26
    27d0:	5b 07       	cpc	r21, r27
    27d2:	44 f0       	brlt	.+16     	; 0x27e4 <__stack+0x5e5>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    27d4:	20 91 ec 03 	lds	r18, 0x03EC
    27d8:	30 91 ed 03 	lds	r19, 0x03ED
    27dc:	40 91 ee 03 	lds	r20, 0x03EE
    27e0:	50 91 ef 03 	lds	r21, 0x03EF
						}
						pwm_right_desired -= STEP_MOTORS;
    27e4:	da 01       	movw	r26, r20
    27e6:	c9 01       	movw	r24, r18
    27e8:	4e 97       	sbiw	r24, 0x1e	; 30
    27ea:	a1 09       	sbc	r26, r1
    27ec:	b1 09       	sbc	r27, r1
    27ee:	80 93 e8 03 	sts	0x03E8, r24
    27f2:	90 93 e9 03 	sts	0x03E9, r25
    27f6:	a0 93 ea 03 	sts	0x03EA, r26
    27fa:	b0 93 eb 03 	sts	0x03EB, r27
						pwm_left_desired -= STEP_MOTORS;
    27fe:	9c 01       	movw	r18, r24
    2800:	ad 01       	movw	r20, r26
    2802:	80 93 ec 03 	sts	0x03EC, r24
    2806:	90 93 ed 03 	sts	0x03ED, r25
    280a:	a0 93 ee 03 	sts	0x03EE, r26
    280e:	b0 93 ef 03 	sts	0x03EF, r27
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    2812:	8a 39       	cpi	r24, 0x9A	; 154
    2814:	6d ef       	ldi	r22, 0xFD	; 253
    2816:	96 07       	cpc	r25, r22
    2818:	6f ef       	ldi	r22, 0xFF	; 255
    281a:	a6 07       	cpc	r26, r22
    281c:	6f ef       	ldi	r22, 0xFF	; 255
    281e:	b6 07       	cpc	r27, r22
    2820:	84 f4       	brge	.+32     	; 0x2842 <__stack+0x643>
    2822:	7a e9       	ldi	r23, 0x9A	; 154
    2824:	87 2e       	mov	r8, r23
    2826:	7d ef       	ldi	r23, 0xFD	; 253
    2828:	97 2e       	mov	r9, r23
    282a:	7f ef       	ldi	r23, 0xFF	; 255
    282c:	a7 2e       	mov	r10, r23
    282e:	7f ef       	ldi	r23, 0xFF	; 255
    2830:	b7 2e       	mov	r11, r23
    2832:	80 92 e8 03 	sts	0x03E8, r8
    2836:	90 92 e9 03 	sts	0x03E9, r9
    283a:	a0 92 ea 03 	sts	0x03EA, r10
    283e:	b0 92 eb 03 	sts	0x03EB, r11
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    2842:	8a 39       	cpi	r24, 0x9A	; 154
    2844:	6d ef       	ldi	r22, 0xFD	; 253
    2846:	96 07       	cpc	r25, r22
    2848:	6f ef       	ldi	r22, 0xFF	; 255
    284a:	a6 07       	cpc	r26, r22
    284c:	6f ef       	ldi	r22, 0xFF	; 255
    284e:	b6 07       	cpc	r27, r22
    2850:	0c f4       	brge	.+2      	; 0x2854 <__stack+0x655>
    2852:	92 cf       	rjmp	.-220    	; 0x2778 <__stack+0x579>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    2854:	80 91 e8 03 	lds	r24, 0x03E8
    2858:	90 91 e9 03 	lds	r25, 0x03E9
    285c:	a0 91 ea 03 	lds	r26, 0x03EA
    2860:	b0 91 eb 03 	lds	r27, 0x03EB
    2864:	08 ca       	rjmp	.-3056   	; 0x1c76 <main+0xab0>
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    2866:	80 91 e8 03 	lds	r24, 0x03E8
    286a:	90 91 e9 03 	lds	r25, 0x03E9
    286e:	a0 91 ea 03 	lds	r26, 0x03EA
    2872:	b0 91 eb 03 	lds	r27, 0x03EB
    2876:	4e 97       	sbiw	r24, 0x1e	; 30
    2878:	a1 09       	sbc	r26, r1
    287a:	b1 09       	sbc	r27, r1
    287c:	80 93 e8 03 	sts	0x03E8, r24
    2880:	90 93 e9 03 	sts	0x03E9, r25
    2884:	a0 93 ea 03 	sts	0x03EA, r26
    2888:	b0 93 eb 03 	sts	0x03EB, r27
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    288c:	8a 39       	cpi	r24, 0x9A	; 154
    288e:	ed ef       	ldi	r30, 0xFD	; 253
    2890:	9e 07       	cpc	r25, r30
    2892:	ef ef       	ldi	r30, 0xFF	; 255
    2894:	ae 07       	cpc	r26, r30
    2896:	ef ef       	ldi	r30, 0xFF	; 255
    2898:	be 07       	cpc	r27, r30
    289a:	0c f0       	brlt	.+2      	; 0x289e <__stack+0x69f>
    289c:	e6 c2       	rjmp	.+1484   	; 0x2e6a <__stack+0xc6b>
    289e:	0a e9       	ldi	r16, 0x9A	; 154
    28a0:	80 2e       	mov	r8, r16
    28a2:	0d ef       	ldi	r16, 0xFD	; 253
    28a4:	90 2e       	mov	r9, r16
    28a6:	0f ef       	ldi	r16, 0xFF	; 255
    28a8:	a0 2e       	mov	r10, r16
    28aa:	0f ef       	ldi	r16, 0xFF	; 255
    28ac:	b0 2e       	mov	r11, r16
    28ae:	80 92 e8 03 	sts	0x03E8, r8
    28b2:	90 92 e9 03 	sts	0x03E9, r9
    28b6:	a0 92 ea 03 	sts	0x03EA, r10
    28ba:	b0 92 eb 03 	sts	0x03EB, r11
    28be:	20 91 ec 03 	lds	r18, 0x03EC
    28c2:	30 91 ed 03 	lds	r19, 0x03ED
    28c6:	40 91 ee 03 	lds	r20, 0x03EE
    28ca:	50 91 ef 03 	lds	r21, 0x03EF
    28ce:	89 e9       	ldi	r24, 0x99	; 153
    28d0:	dc c9       	rjmp	.-3144   	; 0x1c8a <main+0xac4>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    28d2:	80 91 e8 03 	lds	r24, 0x03E8
    28d6:	90 91 e9 03 	lds	r25, 0x03E9
    28da:	a0 91 ea 03 	lds	r26, 0x03EA
    28de:	b0 91 eb 03 	lds	r27, 0x03EB
    28e2:	4e 97       	sbiw	r24, 0x1e	; 30
    28e4:	a1 09       	sbc	r26, r1
    28e6:	b1 09       	sbc	r27, r1
    28e8:	80 93 e8 03 	sts	0x03E8, r24
    28ec:	90 93 e9 03 	sts	0x03E9, r25
    28f0:	a0 93 ea 03 	sts	0x03EA, r26
    28f4:	b0 93 eb 03 	sts	0x03EB, r27
						pwm_left_desired += STEP_MOTORS;
    28f8:	20 91 ec 03 	lds	r18, 0x03EC
    28fc:	30 91 ed 03 	lds	r19, 0x03ED
    2900:	40 91 ee 03 	lds	r20, 0x03EE
    2904:	50 91 ef 03 	lds	r21, 0x03EF
    2908:	22 5e       	subi	r18, 0xE2	; 226
    290a:	3f 4f       	sbci	r19, 0xFF	; 255
    290c:	4f 4f       	sbci	r20, 0xFF	; 255
    290e:	5f 4f       	sbci	r21, 0xFF	; 255
    2910:	20 93 ec 03 	sts	0x03EC, r18
    2914:	30 93 ed 03 	sts	0x03ED, r19
    2918:	40 93 ee 03 	sts	0x03EE, r20
    291c:	50 93 ef 03 	sts	0x03EF, r21
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    2920:	8a 39       	cpi	r24, 0x9A	; 154
    2922:	ed ef       	ldi	r30, 0xFD	; 253
    2924:	9e 07       	cpc	r25, r30
    2926:	ef ef       	ldi	r30, 0xFF	; 255
    2928:	ae 07       	cpc	r26, r30
    292a:	ef ef       	ldi	r30, 0xFF	; 255
    292c:	be 07       	cpc	r27, r30
    292e:	a4 f4       	brge	.+40     	; 0x2958 <__stack+0x759>
    2930:	6a e9       	ldi	r22, 0x9A	; 154
    2932:	86 2e       	mov	r8, r22
    2934:	6d ef       	ldi	r22, 0xFD	; 253
    2936:	96 2e       	mov	r9, r22
    2938:	6f ef       	ldi	r22, 0xFF	; 255
    293a:	a6 2e       	mov	r10, r22
    293c:	6f ef       	ldi	r22, 0xFF	; 255
    293e:	b6 2e       	mov	r11, r22
    2940:	80 92 e8 03 	sts	0x03E8, r8
    2944:	90 92 e9 03 	sts	0x03E9, r9
    2948:	a0 92 ea 03 	sts	0x03EA, r10
    294c:	b0 92 eb 03 	sts	0x03EB, r11
    2950:	8a e9       	ldi	r24, 0x9A	; 154
    2952:	9d ef       	ldi	r25, 0xFD	; 253
    2954:	af ef       	ldi	r26, 0xFF	; 255
    2956:	bf ef       	ldi	r27, 0xFF	; 255
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    2958:	27 36       	cpi	r18, 0x67	; 103
    295a:	62 e0       	ldi	r22, 0x02	; 2
    295c:	36 07       	cpc	r19, r22
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	46 07       	cpc	r20, r22
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	56 07       	cpc	r21, r22
    2966:	0c f4       	brge	.+2      	; 0x296a <__stack+0x76b>
    2968:	86 c9       	rjmp	.-3316   	; 0x1c76 <main+0xab0>
    296a:	36 e6       	ldi	r19, 0x66	; 102
    296c:	83 2e       	mov	r8, r19
    296e:	32 e0       	ldi	r19, 0x02	; 2
    2970:	93 2e       	mov	r9, r19
    2972:	a1 2c       	mov	r10, r1
    2974:	b1 2c       	mov	r11, r1
    2976:	80 92 ec 03 	sts	0x03EC, r8
    297a:	90 92 ed 03 	sts	0x03ED, r9
    297e:	a0 92 ee 03 	sts	0x03EE, r10
    2982:	b0 92 ef 03 	sts	0x03EF, r11
    2986:	26 e6       	ldi	r18, 0x66	; 102
    2988:	32 e0       	ldi	r19, 0x02	; 2
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	73 c9       	rjmp	.-3354   	; 0x1c76 <main+0xab0>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    2990:	80 91 e8 03 	lds	r24, 0x03E8
    2994:	90 91 e9 03 	lds	r25, 0x03E9
    2998:	a0 91 ea 03 	lds	r26, 0x03EA
    299c:	b0 91 eb 03 	lds	r27, 0x03EB
    29a0:	20 91 ec 03 	lds	r18, 0x03EC
    29a4:	30 91 ed 03 	lds	r19, 0x03ED
    29a8:	40 91 ee 03 	lds	r20, 0x03EE
    29ac:	50 91 ef 03 	lds	r21, 0x03EF
    29b0:	28 17       	cp	r18, r24
    29b2:	39 07       	cpc	r19, r25
    29b4:	4a 07       	cpc	r20, r26
    29b6:	5b 07       	cpc	r21, r27
    29b8:	0c f4       	brge	.+2      	; 0x29bc <__stack+0x7bd>
    29ba:	61 c2       	rjmp	.+1218   	; 0x2e7e <__stack+0xc7f>
    29bc:	da 01       	movw	r26, r20
    29be:	c9 01       	movw	r24, r18
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    29c0:	4e 96       	adiw	r24, 0x1e	; 30
    29c2:	a1 1d       	adc	r26, r1
    29c4:	b1 1d       	adc	r27, r1
    29c6:	80 93 e8 03 	sts	0x03E8, r24
    29ca:	90 93 e9 03 	sts	0x03E9, r25
    29ce:	a0 93 ea 03 	sts	0x03EA, r26
    29d2:	b0 93 eb 03 	sts	0x03EB, r27
						pwm_left_desired += STEP_MOTORS;
    29d6:	22 5e       	subi	r18, 0xE2	; 226
    29d8:	3f 4f       	sbci	r19, 0xFF	; 255
    29da:	4f 4f       	sbci	r20, 0xFF	; 255
    29dc:	5f 4f       	sbci	r21, 0xFF	; 255
    29de:	20 93 ec 03 	sts	0x03EC, r18
    29e2:	30 93 ed 03 	sts	0x03ED, r19
    29e6:	40 93 ee 03 	sts	0x03EE, r20
    29ea:	50 93 ef 03 	sts	0x03EF, r21
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    29ee:	87 36       	cpi	r24, 0x67	; 103
    29f0:	62 e0       	ldi	r22, 0x02	; 2
    29f2:	96 07       	cpc	r25, r22
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	a6 07       	cpc	r26, r22
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	b6 07       	cpc	r27, r22
    29fc:	64 f0       	brlt	.+24     	; 0x2a16 <__stack+0x817>
    29fe:	86 e6       	ldi	r24, 0x66	; 102
    2a00:	92 e0       	ldi	r25, 0x02	; 2
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	80 93 e8 03 	sts	0x03E8, r24
    2a0a:	90 93 e9 03 	sts	0x03E9, r25
    2a0e:	a0 93 ea 03 	sts	0x03EA, r26
    2a12:	b0 93 eb 03 	sts	0x03EB, r27
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    2a16:	27 36       	cpi	r18, 0x67	; 103
    2a18:	92 e0       	ldi	r25, 0x02	; 2
    2a1a:	39 07       	cpc	r19, r25
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	49 07       	cpc	r20, r25
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	59 07       	cpc	r21, r25
    2a24:	0c f4       	brge	.+2      	; 0x2a28 <__stack+0x829>
    2a26:	16 cf       	rjmp	.-468    	; 0x2854 <__stack+0x655>
    2a28:	e6 e6       	ldi	r30, 0x66	; 102
    2a2a:	8e 2e       	mov	r8, r30
    2a2c:	e2 e0       	ldi	r30, 0x02	; 2
    2a2e:	9e 2e       	mov	r9, r30
    2a30:	a1 2c       	mov	r10, r1
    2a32:	b1 2c       	mov	r11, r1
    2a34:	80 92 ec 03 	sts	0x03EC, r8
    2a38:	90 92 ed 03 	sts	0x03ED, r9
    2a3c:	a0 92 ee 03 	sts	0x03EE, r10
    2a40:	b0 92 ef 03 	sts	0x03EF, r11
    2a44:	80 91 e8 03 	lds	r24, 0x03E8
    2a48:	90 91 e9 03 	lds	r25, 0x03E9
    2a4c:	a0 91 ea 03 	lds	r26, 0x03EA
    2a50:	b0 91 eb 03 	lds	r27, 0x03EB
    2a54:	26 e6       	ldi	r18, 0x66	; 102
    2a56:	32 e0       	ldi	r19, 0x02	; 2
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	0c c9       	rjmp	.-3560   	; 0x1c76 <main+0xab0>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    2a5e:	80 91 e8 03 	lds	r24, 0x03E8
    2a62:	90 91 e9 03 	lds	r25, 0x03E9
    2a66:	a0 91 ea 03 	lds	r26, 0x03EA
    2a6a:	b0 91 eb 03 	lds	r27, 0x03EB
    2a6e:	4e 96       	adiw	r24, 0x1e	; 30
    2a70:	a1 1d       	adc	r26, r1
    2a72:	b1 1d       	adc	r27, r1
    2a74:	80 93 e8 03 	sts	0x03E8, r24
    2a78:	90 93 e9 03 	sts	0x03E9, r25
    2a7c:	a0 93 ea 03 	sts	0x03EA, r26
    2a80:	b0 93 eb 03 	sts	0x03EB, r27
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    2a84:	87 36       	cpi	r24, 0x67	; 103
    2a86:	e2 e0       	ldi	r30, 0x02	; 2
    2a88:	9e 07       	cpc	r25, r30
    2a8a:	e0 e0       	ldi	r30, 0x00	; 0
    2a8c:	ae 07       	cpc	r26, r30
    2a8e:	e0 e0       	ldi	r30, 0x00	; 0
    2a90:	be 07       	cpc	r27, r30
    2a92:	0c f4       	brge	.+2      	; 0x2a96 <__stack+0x897>
    2a94:	ea c1       	rjmp	.+980    	; 0x2e6a <__stack+0xc6b>
    2a96:	86 e6       	ldi	r24, 0x66	; 102
    2a98:	88 2e       	mov	r8, r24
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	98 2e       	mov	r9, r24
    2a9e:	a1 2c       	mov	r10, r1
    2aa0:	b1 2c       	mov	r11, r1
    2aa2:	80 92 e8 03 	sts	0x03E8, r8
    2aa6:	90 92 e9 03 	sts	0x03E9, r9
    2aaa:	a0 92 ea 03 	sts	0x03EA, r10
    2aae:	b0 92 eb 03 	sts	0x03EB, r11
    2ab2:	20 91 ec 03 	lds	r18, 0x03EC
    2ab6:	30 91 ed 03 	lds	r19, 0x03ED
    2aba:	40 91 ee 03 	lds	r20, 0x03EE
    2abe:	50 91 ef 03 	lds	r21, 0x03EF
    2ac2:	89 e9       	ldi	r24, 0x99	; 153
    2ac4:	e2 c8       	rjmp	.-3644   	; 0x1c8a <main+0xac4>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    2ac6:	80 91 28 04 	lds	r24, 0x0428
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	65 e0       	ldi	r22, 0x05	; 5
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__divmodhi4>
    2ad6:	80 93 28 04 	sts	0x0428, r24

						if(colorState==0) {		// turn on blue
    2ada:	88 23       	and	r24, r24
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <__stack+0x8e1>
    2ade:	d2 c1       	rjmp	.+932    	; 0x2e84 <__stack+0xc85>
							LED_IR1_HIGH;
    2ae0:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    2ae2:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    2ae4:	10 92 0e 02 	sts	0x020E, r1
							pwm_green = MAX_LEDS_PWM;
    2ae8:	e0 92 0d 02 	sts	0x020D, r14
							pwm_red = MAX_LEDS_PWM;					
    2aec:	e0 92 0c 02 	sts	0x020C, r14

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    2af0:	80 91 80 00 	lds	r24, 0x0080
    2af4:	80 68       	ori	r24, 0x80	; 128
    2af6:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    2afa:	30 92 89 00 	sts	0x0089, r3
    2afe:	20 92 88 00 	sts	0x0088, r2
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
    2b02:	80 91 0d 02 	lds	r24, 0x020D

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    2b06:	88 23       	and	r24, r24
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <__stack+0x90d>
    2b0a:	ca c1       	rjmp	.+916    	; 0x2ea0 <__stack+0xca1>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    2b0c:	90 91 80 00 	lds	r25, 0x0080
    2b10:	90 62       	ori	r25, 0x20	; 32
    2b12:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	90 93 8b 00 	sts	0x008B, r25
    2b1c:	80 93 8a 00 	sts	0x008A, r24
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    2b20:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    2b24:	88 23       	and	r24, r24
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <__stack+0x92b>
    2b28:	c6 c1       	rjmp	.+908    	; 0x2eb6 <__stack+0xcb7>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    2b2a:	90 91 80 00 	lds	r25, 0x0080
    2b2e:	98 60       	ori	r25, 0x08	; 8
    2b30:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	90 93 8d 00 	sts	0x008D, r25
    2b3a:	80 93 8c 00 	sts	0x008C, r24
    2b3e:	80 91 e8 03 	lds	r24, 0x03E8
    2b42:	90 91 e9 03 	lds	r25, 0x03E9
    2b46:	a0 91 ea 03 	lds	r26, 0x03EA
    2b4a:	b0 91 eb 03 	lds	r27, 0x03EB
    2b4e:	20 91 ec 03 	lds	r18, 0x03EC
    2b52:	30 91 ed 03 	lds	r19, 0x03ED
    2b56:	40 91 ee 03 	lds	r20, 0x03EE
    2b5a:	50 91 ef 03 	lds	r21, 0x03EF
    2b5e:	8b c8       	rjmp	.-3818   	; 0x1c76 <main+0xab0>
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;
					
					case 52:
						behaviorState = (behaviorState+1)%4;
    2b60:	80 91 29 04 	lds	r24, 0x0429
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	83 70       	andi	r24, 0x03	; 3
    2b6a:	90 70       	andi	r25, 0x00	; 0
    2b6c:	80 93 29 04 	sts	0x0429, r24
						switch(behaviorState) {
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__stack+0x977>
    2b74:	b9 cd       	rjmp	.-1166   	; 0x26e8 <__stack+0x4e9>
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <__stack+0x97d>
    2b7a:	6b c1       	rjmp	.+726    	; 0x2e52 <__stack+0xc53>
    2b7c:	81 30       	cpi	r24, 0x01	; 1
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <__stack+0x983>
    2b80:	95 cd       	rjmp	.-1238   	; 0x26ac <__stack+0x4ad>
							case 0: 
								obstacleAvoidanceEnabled = 0;
    2b82:	10 92 4c 04 	sts	0x044C, r1
								cliffAvoidanceEnabled = 0;
    2b86:	10 92 51 04 	sts	0x0451, r1
    2b8a:	80 91 e8 03 	lds	r24, 0x03E8
    2b8e:	90 91 e9 03 	lds	r25, 0x03E9
    2b92:	a0 91 ea 03 	lds	r26, 0x03EA
    2b96:	b0 91 eb 03 	lds	r27, 0x03EB
    2b9a:	20 91 ec 03 	lds	r18, 0x03EC
    2b9e:	30 91 ed 03 	lds	r19, 0x03ED
    2ba2:	40 91 ee 03 	lds	r20, 0x03EE
    2ba6:	50 91 ef 03 	lds	r21, 0x03EF
								break;
    2baa:	65 c8       	rjmp	.-3894   	; 0x1c76 <main+0xab0>
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    2bac:	80 91 e8 03 	lds	r24, 0x03E8
    2bb0:	90 91 e9 03 	lds	r25, 0x03E9
    2bb4:	a0 91 ea 03 	lds	r26, 0x03EA
    2bb8:	b0 91 eb 03 	lds	r27, 0x03EB
    2bbc:	4e 96       	adiw	r24, 0x1e	; 30
    2bbe:	a1 1d       	adc	r26, r1
    2bc0:	b1 1d       	adc	r27, r1
    2bc2:	80 93 e8 03 	sts	0x03E8, r24
    2bc6:	90 93 e9 03 	sts	0x03E9, r25
    2bca:	a0 93 ea 03 	sts	0x03EA, r26
    2bce:	b0 93 eb 03 	sts	0x03EB, r27
						pwm_left_desired -= STEP_MOTORS;
    2bd2:	20 91 ec 03 	lds	r18, 0x03EC
    2bd6:	30 91 ed 03 	lds	r19, 0x03ED
    2bda:	40 91 ee 03 	lds	r20, 0x03EE
    2bde:	50 91 ef 03 	lds	r21, 0x03EF
    2be2:	2e 51       	subi	r18, 0x1E	; 30
    2be4:	30 40       	sbci	r19, 0x00	; 0
    2be6:	40 40       	sbci	r20, 0x00	; 0
    2be8:	50 40       	sbci	r21, 0x00	; 0
    2bea:	20 93 ec 03 	sts	0x03EC, r18
    2bee:	30 93 ed 03 	sts	0x03ED, r19
    2bf2:	40 93 ee 03 	sts	0x03EE, r20
    2bf6:	50 93 ef 03 	sts	0x03EF, r21
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    2bfa:	87 36       	cpi	r24, 0x67	; 103
    2bfc:	62 e0       	ldi	r22, 0x02	; 2
    2bfe:	96 07       	cpc	r25, r22
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	a6 07       	cpc	r26, r22
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	b6 07       	cpc	r27, r22
    2c08:	64 f0       	brlt	.+24     	; 0x2c22 <__stack+0xa23>
    2c0a:	86 e6       	ldi	r24, 0x66	; 102
    2c0c:	92 e0       	ldi	r25, 0x02	; 2
    2c0e:	a0 e0       	ldi	r26, 0x00	; 0
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	80 93 e8 03 	sts	0x03E8, r24
    2c16:	90 93 e9 03 	sts	0x03E9, r25
    2c1a:	a0 93 ea 03 	sts	0x03EA, r26
    2c1e:	b0 93 eb 03 	sts	0x03EB, r27
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    2c22:	2a 39       	cpi	r18, 0x9A	; 154
    2c24:	ed ef       	ldi	r30, 0xFD	; 253
    2c26:	3e 07       	cpc	r19, r30
    2c28:	ef ef       	ldi	r30, 0xFF	; 255
    2c2a:	4e 07       	cpc	r20, r30
    2c2c:	ef ef       	ldi	r30, 0xFF	; 255
    2c2e:	5e 07       	cpc	r21, r30
    2c30:	0c f0       	brlt	.+2      	; 0x2c34 <__stack+0xa35>
    2c32:	21 c8       	rjmp	.-4030   	; 0x1c76 <main+0xab0>
    2c34:	2a e9       	ldi	r18, 0x9A	; 154
    2c36:	82 2e       	mov	r8, r18
    2c38:	2d ef       	ldi	r18, 0xFD	; 253
    2c3a:	92 2e       	mov	r9, r18
    2c3c:	2f ef       	ldi	r18, 0xFF	; 255
    2c3e:	a2 2e       	mov	r10, r18
    2c40:	2f ef       	ldi	r18, 0xFF	; 255
    2c42:	b2 2e       	mov	r11, r18
    2c44:	80 92 ec 03 	sts	0x03EC, r8
    2c48:	90 92 ed 03 	sts	0x03ED, r9
    2c4c:	a0 92 ee 03 	sts	0x03EE, r10
    2c50:	b0 92 ef 03 	sts	0x03EF, r11
    2c54:	2a e9       	ldi	r18, 0x9A	; 154
    2c56:	3d ef       	ldi	r19, 0xFD	; 253
    2c58:	4f ef       	ldi	r20, 0xFF	; 255
    2c5a:	5f ef       	ldi	r21, 0xFF	; 255
    2c5c:	0c c8       	rjmp	.-4072   	; 0x1c76 <main+0xab0>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    2c5e:	10 92 e8 03 	sts	0x03E8, r1
    2c62:	10 92 e9 03 	sts	0x03E9, r1
    2c66:	10 92 ea 03 	sts	0x03EA, r1
    2c6a:	10 92 eb 03 	sts	0x03EB, r1
						pwm_left_desired = 0;
    2c6e:	10 92 ec 03 	sts	0x03EC, r1
    2c72:	10 92 ed 03 	sts	0x03ED, r1
    2c76:	10 92 ee 03 	sts	0x03EE, r1
    2c7a:	10 92 ef 03 	sts	0x03EF, r1
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	a9 01       	movw	r20, r18
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	dc 01       	movw	r26, r24
    2c8a:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <main+0xab4>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    2c8e:	20 91 ec 03 	lds	r18, 0x03EC
    2c92:	30 91 ed 03 	lds	r19, 0x03ED
    2c96:	40 91 ee 03 	lds	r20, 0x03EE
    2c9a:	50 91 ef 03 	lds	r21, 0x03EF
    2c9e:	22 5e       	subi	r18, 0xE2	; 226
    2ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca6:	20 93 ec 03 	sts	0x03EC, r18
    2caa:	30 93 ed 03 	sts	0x03ED, r19
    2cae:	40 93 ee 03 	sts	0x03EE, r20
    2cb2:	50 93 ef 03 	sts	0x03EF, r21
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    2cb6:	27 36       	cpi	r18, 0x67	; 103
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	36 07       	cpc	r19, r22
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	46 07       	cpc	r20, r22
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	56 07       	cpc	r21, r22
    2cc4:	0c f4       	brge	.+2      	; 0x2cc8 <__stack+0xac9>
    2cc6:	c6 cd       	rjmp	.-1140   	; 0x2854 <__stack+0x655>
    2cc8:	86 e6       	ldi	r24, 0x66	; 102
    2cca:	92 e0       	ldi	r25, 0x02	; 2
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	80 93 ec 03 	sts	0x03EC, r24
    2cd4:	90 93 ed 03 	sts	0x03ED, r25
    2cd8:	a0 93 ee 03 	sts	0x03EE, r26
    2cdc:	b0 93 ef 03 	sts	0x03EF, r27
    2ce0:	80 91 e8 03 	lds	r24, 0x03E8
    2ce4:	90 91 e9 03 	lds	r25, 0x03E9
    2ce8:	a0 91 ea 03 	lds	r26, 0x03EA
    2cec:	b0 91 eb 03 	lds	r27, 0x03EB
    2cf0:	26 e6       	ldi	r18, 0x66	; 102
    2cf2:	32 e0       	ldi	r19, 0x02	; 2
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <main+0xab0>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    2cfc:	90 91 61 03 	lds	r25, 0x0361
    2d00:	80 91 62 03 	lds	r24, 0x0362
    2d04:	90 93 57 04 	sts	0x0457, r25
					ackPayload[2] = proximityResult[4]>>8;
    2d08:	80 93 58 04 	sts	0x0458, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    2d0c:	90 91 69 03 	lds	r25, 0x0369
    2d10:	80 91 6a 03 	lds	r24, 0x036A
    2d14:	90 93 59 04 	sts	0x0459, r25
					ackPayload[4] = proximityResult[8]>>8;
    2d18:	80 93 5a 04 	sts	0x045A, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    2d1c:	90 91 6b 03 	lds	r25, 0x036B
    2d20:	80 91 6c 03 	lds	r24, 0x036C
    2d24:	90 93 5b 04 	sts	0x045B, r25
					ackPayload[6] = proximityResult[9]>>8;
    2d28:	80 93 5c 04 	sts	0x045C, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    2d2c:	90 91 6d 03 	lds	r25, 0x036D
    2d30:	80 91 6e 03 	lds	r24, 0x036E
    2d34:	90 93 5d 04 	sts	0x045D, r25
					ackPayload[8] = proximityResult[10]>>8;
    2d38:	80 93 5e 04 	sts	0x045E, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    2d3c:	90 91 6f 03 	lds	r25, 0x036F
    2d40:	80 91 70 03 	lds	r24, 0x0370
    2d44:	90 93 5f 04 	sts	0x045F, r25
					ackPayload[10] = proximityResult[11]>>8;
    2d48:	80 93 60 04 	sts	0x0460, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    2d4c:	90 91 2b 04 	lds	r25, 0x042B
    2d50:	80 91 2c 04 	lds	r24, 0x042C
    2d54:	90 93 61 04 	sts	0x0461, r25
					ackPayload[12] = accX>>8;
    2d58:	80 93 62 04 	sts	0x0462, r24
					ackPayload[13] = accY&0xFF;
    2d5c:	90 91 2d 04 	lds	r25, 0x042D
    2d60:	80 91 2e 04 	lds	r24, 0x042E
    2d64:	90 93 63 04 	sts	0x0463, r25
					ackPayload[14] = accY>>8;
    2d68:	80 93 64 04 	sts	0x0464, r24
					ackPayload[15] = ir_move;			
    2d6c:	80 91 26 04 	lds	r24, 0x0426
    2d70:	80 93 65 04 	sts	0x0465, r24
					packetId = 5;
    2d74:	35 e0       	ldi	r19, 0x05	; 5
    2d76:	a3 2e       	mov	r10, r19
    2d78:	a0 92 0b 02 	sts	0x020B, r10
					break;
    2d7c:	16 c9       	rjmp	.-3540   	; 0x1faa <main+0xde4>
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    2d7e:	80 91 29 03 	lds	r24, 0x0329
    2d82:	90 91 2a 03 	lds	r25, 0x032A
    2d86:	80 93 57 04 	sts	0x0457, r24
					ackPayload[2] = proximityValue[0]>>8;
    2d8a:	80 91 29 03 	lds	r24, 0x0329
    2d8e:	90 91 2a 03 	lds	r25, 0x032A
    2d92:	90 93 58 04 	sts	0x0458, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    2d96:	80 91 2d 03 	lds	r24, 0x032D
    2d9a:	90 91 2e 03 	lds	r25, 0x032E
    2d9e:	80 93 59 04 	sts	0x0459, r24
					ackPayload[4] = proximityValue[2]>>8;
    2da2:	80 91 2d 03 	lds	r24, 0x032D
    2da6:	90 91 2e 03 	lds	r25, 0x032E
    2daa:	90 93 5a 04 	sts	0x045A, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2dae:	80 91 31 03 	lds	r24, 0x0331
    2db2:	90 91 32 03 	lds	r25, 0x0332
    2db6:	80 93 5b 04 	sts	0x045B, r24
					ackPayload[6] = proximityValue[4]>>8;
    2dba:	80 91 31 03 	lds	r24, 0x0331
    2dbe:	90 91 32 03 	lds	r25, 0x0332
    2dc2:	90 93 5c 04 	sts	0x045C, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2dc6:	80 91 35 03 	lds	r24, 0x0335
    2dca:	90 91 36 03 	lds	r25, 0x0336
    2dce:	80 93 5d 04 	sts	0x045D, r24
					ackPayload[8] = proximityValue[6]>>8;
    2dd2:	80 91 35 03 	lds	r24, 0x0335
    2dd6:	90 91 36 03 	lds	r25, 0x0336
    2dda:	90 93 5e 04 	sts	0x045E, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2dde:	80 91 3d 03 	lds	r24, 0x033D
    2de2:	90 91 3e 03 	lds	r25, 0x033E
    2de6:	80 93 5f 04 	sts	0x045F, r24
					ackPayload[10] = proximityValue[10]>>8;
    2dea:	80 91 3d 03 	lds	r24, 0x033D
    2dee:	90 91 3e 03 	lds	r25, 0x033E
    2df2:	90 93 60 04 	sts	0x0460, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2df6:	80 91 41 03 	lds	r24, 0x0341
    2dfa:	90 91 42 03 	lds	r25, 0x0342
    2dfe:	80 93 61 04 	sts	0x0461, r24
					ackPayload[12] = proximityValue[12]>>8;
    2e02:	80 91 41 03 	lds	r24, 0x0341
    2e06:	90 91 42 03 	lds	r25, 0x0342
    2e0a:	90 93 62 04 	sts	0x0462, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2e0e:	80 91 45 03 	lds	r24, 0x0345
    2e12:	90 91 46 03 	lds	r25, 0x0346
    2e16:	80 93 63 04 	sts	0x0463, r24
					ackPayload[14] = proximityValue[14]>>8;
    2e1a:	80 91 45 03 	lds	r24, 0x0345
    2e1e:	90 91 46 03 	lds	r25, 0x0346
    2e22:	90 93 64 04 	sts	0x0464, r25
					ackPayload[15] = currentSelector;
    2e26:	80 91 48 04 	lds	r24, 0x0448
    2e2a:	80 93 65 04 	sts	0x0465, r24
					packetId = 6;
    2e2e:	26 e0       	ldi	r18, 0x06	; 6
    2e30:	b2 2e       	mov	r11, r18
    2e32:	b0 92 0b 02 	sts	0x020B, r11
					break;	
    2e36:	b9 c8       	rjmp	.-3726   	; 0x1faa <main+0xde4>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    2e3c:	57 ff       	sbrs	r21, 7
    2e3e:	e2 cb       	rjmp	.-2108   	; 0x2604 <__stack+0x405>
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	df cb       	rjmp	.-2114   	; 0x2604 <__stack+0x405>
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	ce cb       	rjmp	.-2148   	; 0x25e8 <__stack+0x3e9>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    2e4c:	e0 e0       	ldi	r30, 0x00	; 0
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	e5 cb       	rjmp	.-2102   	; 0x261c <__stack+0x41d>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    2e52:	f0 92 4c 04 	sts	0x044C, r15
								cliffAvoidanceEnabled = 1;
    2e56:	f0 92 51 04 	sts	0x0451, r15
    2e5a:	80 91 e8 03 	lds	r24, 0x03E8
    2e5e:	90 91 e9 03 	lds	r25, 0x03E9
    2e62:	a0 91 ea 03 	lds	r26, 0x03EA
    2e66:	b0 91 eb 03 	lds	r27, 0x03EB
    2e6a:	20 91 ec 03 	lds	r18, 0x03EC
    2e6e:	30 91 ed 03 	lds	r19, 0x03ED
    2e72:	40 91 ee 03 	lds	r20, 0x03EE
    2e76:	50 91 ef 03 	lds	r21, 0x03EF
								break;
    2e7a:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <main+0xab0>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    2e7e:	9c 01       	movw	r18, r24
    2e80:	ad 01       	movw	r20, r26
    2e82:	9e cd       	rjmp	.-1220   	; 0x29c0 <__stack+0x7c1>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	f1 f1       	breq	.+124    	; 0x2f04 <__stack+0xd05>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	69 f1       	breq	.+90     	; 0x2ee6 <__stack+0xce7>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    2e8c:	83 30       	cpi	r24, 0x03	; 3
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <__stack+0xc93>
    2e90:	40 c0       	rjmp	.+128    	; 0x2f12 <__stack+0xd13>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    2e92:	e0 92 0e 02 	sts	0x020E, r14
							pwm_green = MAX_LEDS_PWM;
    2e96:	e0 92 0d 02 	sts	0x020D, r14
							pwm_red = MAX_LEDS_PWM;
    2e9a:	e0 92 0c 02 	sts	0x020C, r14
    2e9e:	28 ce       	rjmp	.-944    	; 0x2af0 <__stack+0x8f1>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    2ea0:	80 91 80 00 	lds	r24, 0x0080
    2ea4:	8f 7d       	andi	r24, 0xDF	; 223
    2ea6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    2eaa:	2e 98       	cbi	0x05, 6	; 5
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    2eac:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    2eb0:	88 23       	and	r24, r24
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <__stack+0xcb7>
    2eb4:	3a ce       	rjmp	.-908    	; 0x2b2a <__stack+0x92b>
		TCCR1A &= ~(1 << COM1C1);
    2eb6:	80 91 80 00 	lds	r24, 0x0080
    2eba:	87 7f       	andi	r24, 0xF7	; 247
    2ebc:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    2ec0:	2f 98       	cbi	0x05, 7	; 5
    2ec2:	80 91 e8 03 	lds	r24, 0x03E8
    2ec6:	90 91 e9 03 	lds	r25, 0x03E9
    2eca:	a0 91 ea 03 	lds	r26, 0x03EA
    2ece:	b0 91 eb 03 	lds	r27, 0x03EB
    2ed2:	20 91 ec 03 	lds	r18, 0x03EC
    2ed6:	30 91 ed 03 	lds	r19, 0x03ED
    2eda:	40 91 ee 03 	lds	r20, 0x03EE
    2ede:	50 91 ef 03 	lds	r21, 0x03EF
    2ee2:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <main+0xab0>
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    2ee6:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    2ee8:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    2eea:	e0 92 0e 02 	sts	0x020E, r14
							pwm_green = MAX_LEDS_PWM;
    2eee:	e0 92 0d 02 	sts	0x020D, r14
							pwm_red = 0;
    2ef2:	10 92 0c 02 	sts	0x020C, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    2ef6:	80 91 80 00 	lds	r24, 0x0080
    2efa:	8f 77       	andi	r24, 0x7F	; 127
    2efc:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    2f00:	2d 98       	cbi	0x05, 5	; 5
    2f02:	ff cd       	rjmp	.-1026   	; 0x2b02 <__stack+0x903>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    2f04:	e0 92 0e 02 	sts	0x020E, r14
							pwm_green = 0;
    2f08:	10 92 0d 02 	sts	0x020D, r1
							pwm_red = MAX_LEDS_PWM;
    2f0c:	e0 92 0c 02 	sts	0x020C, r14
    2f10:	ef cd       	rjmp	.-1058   	; 0x2af0 <__stack+0x8f1>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    2f12:	10 92 0e 02 	sts	0x020E, r1
							pwm_green = 0;
    2f16:	10 92 0d 02 	sts	0x020D, r1
							pwm_red = 0;
    2f1a:	10 92 0c 02 	sts	0x020C, r1
    2f1e:	eb cf       	rjmp	.-42     	; 0x2ef6 <__stack+0xcf7>

00002f20 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    2f20:	84 b1       	in	r24, 0x04	; 4
    2f22:	80 7f       	andi	r24, 0xF0	; 240
    2f24:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    2f26:	84 b1       	in	r24, 0x04	; 4
    2f28:	87 60       	ori	r24, 0x07	; 7
    2f2a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    2f2c:	80 e5       	ldi	r24, 0x50	; 80
    2f2e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    2f30:	8d b5       	in	r24, 0x2d	; 45
    2f32:	81 60       	ori	r24, 0x01	; 1
    2f34:	8d bd       	out	0x2d, r24	; 45

}
    2f36:	08 95       	ret

00002f38 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f38:	44 23       	and	r20, r20
    2f3a:	79 f0       	breq	.+30     	; 0x2f5a <SPI_ReadWrite_Block+0x22>
    2f3c:	a8 2f       	mov	r26, r24
    2f3e:	b9 2f       	mov	r27, r25
    2f40:	e6 2f       	mov	r30, r22
    2f42:	f7 2f       	mov	r31, r23
    2f44:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    2f46:	9d 91       	ld	r25, X+
    2f48:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    2f4a:	0d b4       	in	r0, 0x2d	; 45
    2f4c:	07 fe       	sbrs	r0, 7
    2f4e:	fd cf       	rjmp	.-6      	; 0x2f4a <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    2f50:	9e b5       	in	r25, 0x2e	; 46
    2f52:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f54:	8f 5f       	subi	r24, 0xFF	; 255
    2f56:	84 17       	cp	r24, r20
    2f58:	b0 f3       	brcs	.-20     	; 0x2f46 <SPI_ReadWrite_Block+0xe>
    2f5a:	08 95       	ret

00002f5c <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f5c:	66 23       	and	r22, r22
    2f5e:	59 f0       	breq	.+22     	; 0x2f76 <SPI_Write_Block+0x1a>
    2f60:	e8 2f       	mov	r30, r24
    2f62:	f9 2f       	mov	r31, r25
    2f64:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    2f66:	91 91       	ld	r25, Z+
    2f68:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    2f6a:	0d b4       	in	r0, 0x2d	; 45
    2f6c:	07 fe       	sbrs	r0, 7
    2f6e:	fd cf       	rjmp	.-6      	; 0x2f6a <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	86 17       	cp	r24, r22
    2f74:	c0 f3       	brcs	.-16     	; 0x2f66 <SPI_Write_Block+0xa>
    2f76:	08 95       	ret

00002f78 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    2f78:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    2f7a:	0d b4       	in	r0, 0x2d	; 45
    2f7c:	07 fe       	sbrs	r0, 7
    2f7e:	fd cf       	rjmp	.-6      	; 0x2f7a <SPI_Write_Byte+0x2>
    return SPDR;
    2f80:	8e b5       	in	r24, 0x2e	; 46
}
    2f82:	08 95       	ret

00002f84 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <mirf_config+0xa>
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2f92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2f94:	80 e2       	ldi	r24, 0x20	; 32
    2f96:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2f9a:	8d e0       	ldi	r24, 0x0D	; 13
    2f9c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    2fa0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2fa2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fa4:	83 e2       	ldi	r24, 0x23	; 35
    2fa6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    2fb0:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    2fb2:	8c e0       	ldi	r24, 0x0C	; 12
    2fb4:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    2fb6:	80 e8       	ldi	r24, 0x80	; 128
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2fba:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2fbc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fbe:	80 e3       	ldi	r24, 0x30	; 48
    2fc0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2fc4:	8e 01       	movw	r16, r28
    2fc6:	0f 5f       	subi	r16, 0xFF	; 255
    2fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fca:	c8 01       	movw	r24, r16
    2fcc:	63 e0       	ldi	r22, 0x03	; 3
    2fce:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <SPI_Write_Block>
    mirf_CSN_hi;
    2fd2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2fd4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fd6:	8a e2       	ldi	r24, 0x2A	; 42
    2fd8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2fdc:	c8 01       	movw	r24, r16
    2fde:	63 e0       	ldi	r22, 0x03	; 3
    2fe0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <SPI_Write_Block>
    mirf_CSN_hi;
    2fe4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2fe6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2fe8:	81 e2       	ldi	r24, 0x21	; 33
    2fea:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    2ff4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2ff6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2ff8:	82 e2       	ldi	r24, 0x22	; 34
    2ffa:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3004:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3006:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3008:	84 e2       	ldi	r24, 0x24	; 36
    300a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    300e:	82 e1       	ldi	r24, 0x12	; 18
    3010:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3014:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3016:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3018:	85 e2       	ldi	r24, 0x25	; 37
    301a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    301e:	88 e2       	ldi	r24, 0x28	; 40
    3020:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3024:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3026:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3028:	81 e3       	ldi	r24, 0x31	; 49
    302a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    302e:	86 e0       	ldi	r24, 0x06	; 6
    3030:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3034:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    3036:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    3038:	80 e5       	ldi	r24, 0x50	; 80
    303a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    303e:	83 e7       	ldi	r24, 0x73	; 115
    3040:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3044:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3046:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3048:	8c e3       	ldi	r24, 0x3C	; 60
    304a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3054:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3056:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3058:	8d e3       	ldi	r24, 0x3D	; 61
    305a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    305e:	86 e0       	ldi	r24, 0x06	; 6
    3060:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3064:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3066:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3068:	80 e2       	ldi	r24, 0x20	; 32
    306a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    306e:	8f e0       	ldi	r24, 0x0F	; 15
    3070:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3074:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	1f 91       	pop	r17
    3082:	0f 91       	pop	r16
    3084:	08 95       	ret

00003086 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    3086:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    3088:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    308a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <mirf_config>
}
    308e:	08 95       	ret

00003090 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    3096:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    3098:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    309a:	8a e2       	ldi	r24, 0x2A	; 42
    309c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    30a0:	ce 01       	movw	r24, r28
    30a2:	65 e0       	ldi	r22, 0x05	; 5
    30a4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <SPI_Write_Block>
    mirf_CSN_hi;
    30a8:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    30aa:	2c 9a       	sbi	0x05, 4	; 5
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	08 95       	ret

000030b2 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    30b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    30ba:	80 e3       	ldi	r24, 0x30	; 48
    30bc:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    30c0:	ce 01       	movw	r24, r28
    30c2:	65 e0       	ldi	r22, 0x05	; 5
    30c4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <SPI_Write_Block>
    mirf_CSN_hi;
    30c8:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret

000030d0 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    30d0:	80 91 55 04 	lds	r24, 0x0455
    30d4:	88 23       	and	r24, r24
    30d6:	11 f0       	breq	.+4      	; 0x30dc <mirf_data_ready+0xc>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    30da:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    30dc:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    30e4:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    30e6:	80 74       	andi	r24, 0x40	; 64
    30e8:	08 95       	ret

000030ea <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	0f 92       	push	r0
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    30f4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    30f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    30f8:	87 e1       	ldi	r24, 0x17	; 23
    30fa:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    30fe:	be 01       	movw	r22, r28
    3100:	6f 5f       	subi	r22, 0xFF	; 255
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	cb 01       	movw	r24, r22
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    310c:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    310e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3110:	81 70       	andi	r24, 0x01	; 1
    3112:	0f 90       	pop	r0
    3114:	cf 91       	pop	r28
    3116:	df 91       	pop	r29
    3118:	08 95       	ret

0000311a <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    311a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    311c:	82 ee       	ldi	r24, 0xE2	; 226
    311e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3122:	28 9a       	sbi	0x05, 0	; 5

}
    3124:	08 95       	ret

00003126 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    312c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    312e:	81 e6       	ldi	r24, 0x61	; 97
    3130:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    3134:	ce 01       	movw	r24, r28
    3136:	be 01       	movw	r22, r28
    3138:	46 e0       	ldi	r20, 0x06	; 6
    313a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    313e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3140:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3142:	87 e2       	ldi	r24, 0x27	; 39
    3144:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    3148:	80 e4       	ldi	r24, 0x40	; 64
    314a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    314e:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	08 95       	ret

00003156 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	0f 92       	push	r0
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    3160:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3162:	8f 71       	andi	r24, 0x1F	; 31
    3164:	80 62       	ori	r24, 0x20	; 32
    3166:	69 83       	std	Y+1, r22	; 0x01
    3168:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    316c:	69 81       	ldd	r22, Y+1	; 0x01
    316e:	86 2f       	mov	r24, r22
    3170:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3174:	28 9a       	sbi	0x05, 0	; 5
}
    3176:	0f 90       	pop	r0
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	0f 92       	push	r0
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    318e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    3190:	8f 71       	andi	r24, 0x1F	; 31
    3192:	49 83       	std	Y+1, r20	; 0x01
    3194:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    3198:	c8 01       	movw	r24, r16
    319a:	b8 01       	movw	r22, r16
    319c:	49 81       	ldd	r20, Y+1	; 0x01
    319e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    31a2:	28 9a       	sbi	0x05, 0	; 5
}
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	1f 91       	pop	r17
    31ac:	0f 91       	pop	r16
    31ae:	08 95       	ret

000031b0 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	0f 92       	push	r0
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    31c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    31c2:	8f 71       	andi	r24, 0x1F	; 31
    31c4:	80 62       	ori	r24, 0x20	; 32
    31c6:	49 83       	std	Y+1, r20	; 0x01
    31c8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    31cc:	c8 01       	movw	r24, r16
    31ce:	49 81       	ldd	r20, Y+1	; 0x01
    31d0:	64 2f       	mov	r22, r20
    31d2:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <SPI_Write_Block>
    mirf_CSN_hi;
    31d6:	28 9a       	sbi	0x05, 0	; 5
}
    31d8:	0f 90       	pop	r0
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	08 95       	ret

000031e4 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	0f 92       	push	r0
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    31f4:	80 91 55 04 	lds	r24, 0x0455
    31f8:	88 23       	and	r24, r24
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <mirf_send+0x10>

    mirf_CE_lo;
    31fc:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	80 93 55 04 	sts	0x0455, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    3204:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    3206:	80 e2       	ldi	r24, 0x20	; 32
    3208:	69 83       	std	Y+1, r22	; 0x01
    320a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    320e:	8a e4       	ldi	r24, 0x4A	; 74
    3210:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3214:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    3216:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    3218:	81 ee       	ldi	r24, 0xE1	; 225
    321a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    321e:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    3220:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    3222:	80 ea       	ldi	r24, 0xA0	; 160
    3224:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    3228:	c8 01       	movw	r24, r16
    322a:	69 81       	ldd	r22, Y+1	; 0x01
    322c:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    3230:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    3232:	2c 9a       	sbi	0x05, 4	; 5
}
    3234:	0f 90       	pop	r0
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	08 95       	ret

00003240 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    3240:	ef 92       	push	r14
    3242:	ff 92       	push	r15
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	0f 92       	push	r0
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	18 2f       	mov	r17, r24
    3254:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    3256:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    3258:	81 ee       	ldi	r24, 0xE1	; 225
    325a:	99 83       	std	Y+1, r25	; 0x01
    325c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    3260:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    3262:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    3264:	88 ea       	ldi	r24, 0xA8	; 168
    3266:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    326a:	99 81       	ldd	r25, Y+1	; 0x01
    326c:	00 23       	and	r16, r16
    326e:	61 f0       	breq	.+24     	; 0x3288 <writeAckPayload+0x48>
    3270:	61 2f       	mov	r22, r17
    3272:	79 2f       	mov	r23, r25
    3274:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    3276:	f7 01       	movw	r30, r14
    3278:	81 91       	ld	r24, Z+
    327a:	7f 01       	movw	r14, r30
    327c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    3280:	8e 2d       	mov	r24, r14
    3282:	81 1b       	sub	r24, r17
    3284:	80 17       	cp	r24, r16
    3286:	b8 f3       	brcs	.-18     	; 0x3276 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    3288:	28 9a       	sbi	0x05, 0	; 5


}
    328a:	0f 90       	pop	r0
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	ff 90       	pop	r15
    3296:	ef 90       	pop	r14
    3298:	08 95       	ret

0000329a <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    329a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    329c:	81 ee       	ldi	r24, 0xE1	; 225
    329e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <SPI_Write_Byte>
    mirf_CSN_hi;
    32a2:	28 9a       	sbi	0x05, 0	; 5

}
    32a4:	08 95       	ret

000032a6 <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    32a6:	e8 e6       	ldi	r30, 0x68	; 104
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	82 60       	ori	r24, 0x02	; 2
    32ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    32b0:	ec e6       	ldi	r30, 0x6C	; 108
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	80 68       	ori	r24, 0x80	; 128
    32b8:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    32ba:	e0 eb       	ldi	r30, 0xB0	; 176
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	82 60       	ori	r24, 0x02	; 2
    32c2:	80 83       	st	Z, r24

}
    32c4:	08 95       	ret

000032c6 <__vector_10>:

ISR(PCINT1_vect) {
    32c6:	1f 92       	push	r1
    32c8:	0f 92       	push	r0
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	0f 92       	push	r0
    32ce:	11 24       	eor	r1, r1
    32d0:	8f 93       	push	r24

	if(irEnabled) {
    32d2:	80 91 11 02 	lds	r24, 0x0211
    32d6:	88 23       	and	r24, r24
    32d8:	21 f1       	breq	.+72     	; 0x3322 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {
    32da:	80 91 03 01 	lds	r24, 0x0103
    32de:	86 fd       	sbrc	r24, 6
    32e0:	20 c0       	rjmp	.+64     	; 0x3322 <__vector_10+0x5c>

			//PORTB ^= (1 << 5);
			//PORTB &= ~(1 << 6);
   			
			PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    32e2:	80 91 68 00 	lds	r24, 0x0068
    32e6:	8d 7f       	andi	r24, 0xFD	; 253
    32e8:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    32ec:	80 91 6c 00 	lds	r24, 0x006C
    32f0:	8f 77       	andi	r24, 0x7F	; 127
    32f2:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;
    32fc:	8d e0       	ldi	r24, 0x0D	; 13
    32fe:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    3302:	80 91 b1 00 	lds	r24, 0x00B1
    3306:	86 60       	ori	r24, 0x06	; 6
    3308:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    330c:	80 91 70 00 	lds	r24, 0x0070
    3310:	82 60       	ori	r24, 0x02	; 2
    3312:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    3316:	10 92 20 03 	sts	0x0320, r1
    331a:	10 92 21 03 	sts	0x0321, r1
    331e:	10 92 22 03 	sts	0x0322, r1

		}

	}
	
}
    3322:	8f 91       	pop	r24
    3324:	0f 90       	pop	r0
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	0f 90       	pop	r0
    332a:	1f 90       	pop	r1
    332c:	18 95       	reti

0000332e <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    332e:	80 91 00 02 	lds	r24, 0x0200
    3332:	08 95       	ret

00003334 <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    3334:	80 91 1e 03 	lds	r24, 0x031E
    3338:	08 95       	ret

0000333a <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    333a:	80 91 1f 03 	lds	r24, 0x031F
    333e:	08 95       	ret

00003340 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    3340:	1f 92       	push	r1
    3342:	0f 92       	push	r0
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	0f 92       	push	r0
    3348:	11 24       	eor	r1, r1
    334a:	2f 93       	push	r18
    334c:	3f 93       	push	r19
    334e:	4f 93       	push	r20
    3350:	5f 93       	push	r21
    3352:	8f 93       	push	r24
    3354:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3356:	80 91 b1 00 	lds	r24, 0x00B1
    335a:	88 7f       	andi	r24, 0xF8	; 248
    335c:	80 93 b1 00 	sts	0x00B1, r24
	
	if(checkGlitch) {
    3360:	80 91 12 02 	lds	r24, 0x0212
    3364:	88 23       	and	r24, r24
    3366:	a9 f0       	breq	.+42     	; 0x3392 <__vector_13+0x52>
		if(REMOTE) {	// if high it is a glitch
    3368:	80 91 03 01 	lds	r24, 0x0103
    336c:	86 ff       	sbrs	r24, 6
    336e:	65 c0       	rjmp	.+202    	; 0x343a <__vector_13+0xfa>
			PCICR |= (1 << PCIE1);		// enable external interrupt
    3370:	80 91 68 00 	lds	r24, 0x0068
    3374:	82 60       	ori	r24, 0x02	; 2
    3376:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    337a:	80 91 6c 00 	lds	r24, 0x006C
    337e:	80 68       	ori	r24, 0x80	; 128
    3380:	80 93 6c 00 	sts	0x006C, r24
			i = -1;			
    3384:	8f ef       	ldi	r24, 0xFF	; 255
    3386:	9f ef       	ldi	r25, 0xFF	; 255
    3388:	90 93 02 02 	sts	0x0202, r25
    338c:	80 93 01 02 	sts	0x0201, r24
    3390:	49 c0       	rjmp	.+146    	; 0x3424 <__vector_13+0xe4>

		}
	} else {


		if (i == -1) { // start bit confirm  change timer period
    3392:	80 91 01 02 	lds	r24, 0x0201
    3396:	90 91 02 02 	lds	r25, 0x0202
    339a:	2f ef       	ldi	r18, 0xFF	; 255
    339c:	8f 3f       	cpi	r24, 0xFF	; 255
    339e:	92 07       	cpc	r25, r18
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <__vector_13+0x64>
    33a2:	63 c0       	rjmp	.+198    	; 0x346a <__vector_13+0x12a>
				TIMSK2 |= (1 << OCIE2A);									

				check_temp = address_temp = data_temp = 0;
				i=0;
			}
		} else if (i == 1)	{ // check bit read and change timer period
    33a4:	81 30       	cpi	r24, 0x01	; 1
    33a6:	91 05       	cpc	r25, r1
    33a8:	09 f4       	brne	.+2      	; 0x33ac <__vector_13+0x6c>
    33aa:	98 c0       	rjmp	.+304    	; 0x34dc <__vector_13+0x19c>
			// 1.778/0.032 = 54 => 1.728
			OCR2A = 54;
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
			TIMSK2 |= (1 << OCIE2A);

		} else if ((i > 1) && (i < 7)) { // we read address
    33ac:	9c 01       	movw	r18, r24
    33ae:	22 50       	subi	r18, 0x02	; 2
    33b0:	30 40       	sbci	r19, 0x00	; 0
    33b2:	25 30       	cpi	r18, 0x05	; 5
    33b4:	31 05       	cpc	r19, r1
    33b6:	08 f4       	brcc	.+2      	; 0x33ba <__vector_13+0x7a>
    33b8:	67 c0       	rjmp	.+206    	; 0x3488 <__vector_13+0x148>

			unsigned char temp = REMOTE;
			temp <<= 6-i;
			address_temp += temp;

		} else if ((i > 6) && (i < 13 )) { // we read data
    33ba:	9c 01       	movw	r18, r24
    33bc:	27 50       	subi	r18, 0x07	; 7
    33be:	30 40       	sbci	r19, 0x00	; 0
    33c0:	26 30       	cpi	r18, 0x06	; 6
    33c2:	31 05       	cpc	r19, r1
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <__vector_13+0x88>
    33c6:	bd c0       	rjmp	.+378    	; 0x3542 <__vector_13+0x202>

			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54
			OCR2A = 54;
    33c8:	26 e3       	ldi	r18, 0x36	; 54
    33ca:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    33ce:	20 91 b1 00 	lds	r18, 0x00B1
    33d2:	26 60       	ori	r18, 0x06	; 6
    33d4:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    33d8:	20 91 70 00 	lds	r18, 0x0070
    33dc:	22 60       	ori	r18, 0x02	; 2
    33de:	20 93 70 00 	sts	0x0070, r18

			unsigned char temp = REMOTE;
    33e2:	20 91 03 01 	lds	r18, 0x0103
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	20 74       	andi	r18, 0x40	; 64
    33ea:	30 70       	andi	r19, 0x00	; 0
			temp <<= 6+6-i;
    33ec:	00 24       	eor	r0, r0
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	00 1c       	adc	r0, r0
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	00 1c       	adc	r0, r0
    33fa:	23 2f       	mov	r18, r19
    33fc:	30 2d       	mov	r19, r0
    33fe:	4c e0       	ldi	r20, 0x0C	; 12
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	48 1b       	sub	r20, r24
    3404:	59 0b       	sbc	r21, r25
    3406:	02 c0       	rjmp	.+4      	; 0x340c <__vector_13+0xcc>
    3408:	22 0f       	add	r18, r18
    340a:	33 1f       	adc	r19, r19
    340c:	4a 95       	dec	r20
    340e:	e2 f7       	brpl	.-8      	; 0x3408 <__vector_13+0xc8>
			data_temp += temp;
    3410:	40 91 20 03 	lds	r20, 0x0320
    3414:	42 0f       	add	r20, r18
    3416:	40 93 20 03 	sts	0x0320, r20

			i = -1;
			check = check_temp;
			address = address_temp;
			data_ir = data_temp;
			command_received=1;
    341a:	01 96       	adiw	r24, 0x01	; 1
		} 

	}
	
	if(i!=-1)
		i++;
    341c:	90 93 02 02 	sts	0x0202, r25
    3420:	80 93 01 02 	sts	0x0201, r24


}
    3424:	9f 91       	pop	r25
    3426:	8f 91       	pop	r24
    3428:	5f 91       	pop	r21
    342a:	4f 91       	pop	r20
    342c:	3f 91       	pop	r19
    342e:	2f 91       	pop	r18
    3430:	0f 90       	pop	r0
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	0f 90       	pop	r0
    3436:	1f 90       	pop	r1
    3438:	18 95       	reti
		if(REMOTE) {	// if high it is a glitch
			PCICR |= (1 << PCIE1);		// enable external interrupt
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
			i = -1;			
		} else {
			checkGlitch = 0;
    343a:	10 92 12 02 	sts	0x0212, r1
			// 2/0.128 = 15.6
			//OCR2A = 16;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 2.1/0.032 = 64 => 2.048 ms
			// but we already wait 0.416 us => 13, so 64-13=51
			OCR2A = 51;
    343e:	83 e3       	ldi	r24, 0x33	; 51
    3440:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    3444:	80 91 b1 00 	lds	r24, 0x00B1
    3448:	86 60       	ori	r24, 0x06	; 6
    344a:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    344e:	80 91 70 00 	lds	r24, 0x0070
    3452:	82 60       	ori	r24, 0x02	; 2
    3454:	80 93 70 00 	sts	0x0070, r24
    3458:	80 91 01 02 	lds	r24, 0x0201
    345c:	90 91 02 02 	lds	r25, 0x0202
			//PORTB |= (1 << 6);
		} 

	}
	
	if(i!=-1)
    3460:	2f ef       	ldi	r18, 0xFF	; 255
    3462:	8f 3f       	cpi	r24, 0xFF	; 255
    3464:	92 07       	cpc	r25, r18
    3466:	c9 f6       	brne	.-78     	; 0x341a <__vector_13+0xda>
    3468:	dd cf       	rjmp	.-70     	; 0x3424 <__vector_13+0xe4>
	} else {


		if (i == -1) { // start bit confirm  change timer period

			if(REMOTE) {	//if high it is only a noise
    346a:	20 91 03 01 	lds	r18, 0x0103
    346e:	26 ff       	sbrs	r18, 6
    3470:	52 c0       	rjmp	.+164    	; 0x3516 <__vector_13+0x1d6>

				PCICR |= (1 << PCIE1);		// enable external interrupt
    3472:	20 91 68 00 	lds	r18, 0x0068
    3476:	22 60       	ori	r18, 0x02	; 2
    3478:	20 93 68 00 	sts	0x0068, r18
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    347c:	20 91 6c 00 	lds	r18, 0x006C
    3480:	20 68       	ori	r18, 0x80	; 128
    3482:	20 93 6c 00 	sts	0x006C, r18
    3486:	ce cf       	rjmp	.-100    	; 0x3424 <__vector_13+0xe4>
		} else if ((i > 1) && (i < 7)) { // we read address
		
			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54
			OCR2A = 54;
    3488:	26 e3       	ldi	r18, 0x36	; 54
    348a:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    348e:	20 91 b1 00 	lds	r18, 0x00B1
    3492:	26 60       	ori	r18, 0x06	; 6
    3494:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    3498:	20 91 70 00 	lds	r18, 0x0070
    349c:	22 60       	ori	r18, 0x02	; 2
    349e:	20 93 70 00 	sts	0x0070, r18

			unsigned char temp = REMOTE;
    34a2:	20 91 03 01 	lds	r18, 0x0103
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	20 74       	andi	r18, 0x40	; 64
    34aa:	30 70       	andi	r19, 0x00	; 0
			temp <<= 6-i;
    34ac:	00 24       	eor	r0, r0
    34ae:	22 0f       	add	r18, r18
    34b0:	33 1f       	adc	r19, r19
    34b2:	00 1c       	adc	r0, r0
    34b4:	22 0f       	add	r18, r18
    34b6:	33 1f       	adc	r19, r19
    34b8:	00 1c       	adc	r0, r0
    34ba:	23 2f       	mov	r18, r19
    34bc:	30 2d       	mov	r19, r0
    34be:	46 e0       	ldi	r20, 0x06	; 6
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	48 1b       	sub	r20, r24
    34c4:	59 0b       	sbc	r21, r25
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <__vector_13+0x18c>
    34c8:	22 0f       	add	r18, r18
    34ca:	33 1f       	adc	r19, r19
    34cc:	4a 95       	dec	r20
    34ce:	e2 f7       	brpl	.-8      	; 0x34c8 <__vector_13+0x188>
			address_temp += temp;
    34d0:	40 91 21 03 	lds	r20, 0x0321
    34d4:	42 0f       	add	r20, r18
    34d6:	40 93 21 03 	sts	0x0321, r20
    34da:	9f cf       	rjmp	.-194    	; 0x341a <__vector_13+0xda>
				check_temp = address_temp = data_temp = 0;
				i=0;
			}
		} else if (i == 1)	{ // check bit read and change timer period

			check_temp = REMOTE;	   // read the check bit
    34dc:	20 91 03 01 	lds	r18, 0x0103
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	20 74       	andi	r18, 0x40	; 64
    34e4:	30 70       	andi	r19, 0x00	; 0
    34e6:	02 2e       	mov	r0, r18
    34e8:	23 2f       	mov	r18, r19
    34ea:	00 0c       	add	r0, r0
    34ec:	22 1f       	adc	r18, r18
    34ee:	33 0b       	sbc	r19, r19
    34f0:	00 0c       	add	r0, r0
    34f2:	22 1f       	adc	r18, r18
    34f4:	33 1f       	adc	r19, r19
    34f6:	20 93 22 03 	sts	0x0322, r18
			//cycle value is 1.778[ms]
			// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54 => 1.728
			OCR2A = 54;
    34fa:	26 e3       	ldi	r18, 0x36	; 54
    34fc:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    3500:	20 91 b1 00 	lds	r18, 0x00B1
    3504:	26 60       	ori	r18, 0x06	; 6
    3506:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    350a:	20 91 70 00 	lds	r18, 0x0070
    350e:	22 60       	ori	r18, 0x02	; 2
    3510:	20 93 70 00 	sts	0x0070, r18
    3514:	82 cf       	rjmp	.-252    	; 0x341a <__vector_13+0xda>
				//cycle value is 0.6 to go to check bit[ms]
				// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
				//OCR2A = 5;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 0.9/0.032 = 28 => 0.896
				OCR2A = 28;
    3516:	8c e1       	ldi	r24, 0x1C	; 28
    3518:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    351c:	80 91 b1 00 	lds	r24, 0x00B1
    3520:	86 60       	ori	r24, 0x06	; 6
    3522:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);									
    3526:	80 91 70 00 	lds	r24, 0x0070
    352a:	82 60       	ori	r24, 0x02	; 2
    352c:	80 93 70 00 	sts	0x0070, r24

				check_temp = address_temp = data_temp = 0;
    3530:	10 92 20 03 	sts	0x0320, r1
    3534:	10 92 21 03 	sts	0x0321, r1
    3538:	10 92 22 03 	sts	0x0322, r1
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	6d cf       	rjmp	.-294    	; 0x341c <__vector_13+0xdc>

			unsigned char temp = REMOTE;
			temp <<= 6+6-i;
			data_temp += temp;

		} else if (i == 13) { // last bit read
    3542:	8d 30       	cpi	r24, 0x0D	; 13
    3544:	91 05       	cpc	r25, r1
    3546:	09 f0       	breq	.+2      	; 0x354a <__vector_13+0x20a>
    3548:	68 cf       	rjmp	.-304    	; 0x341a <__vector_13+0xda>

			PCICR |= (1 << PCIE1);		// enable interrupt
    354a:	80 91 68 00 	lds	r24, 0x0068
    354e:	82 60       	ori	r24, 0x02	; 2
    3550:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    3554:	80 91 6c 00 	lds	r24, 0x006C
    3558:	80 68       	ori	r24, 0x80	; 128
    355a:	80 93 6c 00 	sts	0x006C, r24

			i = -1;
    355e:	8f ef       	ldi	r24, 0xFF	; 255
    3560:	9f ef       	ldi	r25, 0xFF	; 255
    3562:	90 93 02 02 	sts	0x0202, r25
    3566:	80 93 01 02 	sts	0x0201, r24
			check = check_temp;
    356a:	80 91 22 03 	lds	r24, 0x0322
    356e:	80 93 00 02 	sts	0x0200, r24
			address = address_temp;
    3572:	80 91 21 03 	lds	r24, 0x0321
    3576:	80 93 1e 03 	sts	0x031E, r24
			data_ir = data_temp;
    357a:	80 91 20 03 	lds	r24, 0x0320
    357e:	80 93 1f 03 	sts	0x031F, r24
			command_received=1;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	80 93 27 04 	sts	0x0427, r24
    3588:	4d cf       	rjmp	.-358    	; 0x3424 <__vector_13+0xe4>

0000358a <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    358a:	08 95       	ret

0000358c <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    358c:	08 95       	ret

0000358e <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    358e:	2f 92       	push	r2
    3590:	3f 92       	push	r3
    3592:	4f 92       	push	r4
    3594:	5f 92       	push	r5
    3596:	6f 92       	push	r6
    3598:	7f 92       	push	r7
    359a:	8f 92       	push	r8
    359c:	9f 92       	push	r9
    359e:	af 92       	push	r10
    35a0:	bf 92       	push	r11
    35a2:	cf 92       	push	r12
    35a4:	df 92       	push	r13
    35a6:	ef 92       	push	r14
    35a8:	ff 92       	push	r15
    35aa:	0f 93       	push	r16
    35ac:	1f 93       	push	r17
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	2c 97       	sbiw	r28, 0x0c	; 12
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	9c 87       	std	Y+12, r25	; 0x0c
    35c4:	8b 87       	std	Y+11, r24	; 0x0b
    35c6:	79 87       	std	Y+9, r23	; 0x09
    35c8:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    35ca:	fc 01       	movw	r30, r24
    35cc:	20 80       	ld	r2, Z
    35ce:	31 80       	ldd	r3, Z+1	; 0x01
    35d0:	42 80       	ldd	r4, Z+2	; 0x02
    35d2:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    35d4:	fb 01       	movw	r30, r22
    35d6:	a0 80       	ld	r10, Z
    35d8:	b1 80       	ldd	r11, Z+1	; 0x01
    35da:	c2 80       	ldd	r12, Z+2	; 0x02
    35dc:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    35de:	21 14       	cp	r2, r1
    35e0:	31 04       	cpc	r3, r1
    35e2:	41 04       	cpc	r4, r1
    35e4:	51 04       	cpc	r5, r1
    35e6:	31 f4       	brne	.+12     	; 0x35f4 <start_orizzontal_speed_control+0x66>
    35e8:	a1 14       	cp	r10, r1
    35ea:	b1 04       	cpc	r11, r1
    35ec:	c1 04       	cpc	r12, r1
    35ee:	d1 04       	cpc	r13, r1
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <start_orizzontal_speed_control+0x66>
    35f2:	bd c1       	rjmp	.+890    	; 0x396e <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    35f4:	60 90 7a 04 	lds	r6, 0x047A
    35f8:	70 90 7b 04 	lds	r7, 0x047B
    35fc:	80 90 7c 04 	lds	r8, 0x047C
    3600:	90 90 7d 04 	lds	r9, 0x047D
    3604:	60 92 7e 04 	sts	0x047E, r6
    3608:	70 92 7f 04 	sts	0x047F, r7
    360c:	80 92 80 04 	sts	0x0480, r8
    3610:	90 92 81 04 	sts	0x0481, r9
	if(pwm_right_working >= 0) {
    3614:	d7 fc       	sbrc	r13, 7
    3616:	35 c2       	rjmp	.+1130   	; 0x3a82 <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    3618:	80 91 de 03 	lds	r24, 0x03DE
    361c:	90 91 df 03 	lds	r25, 0x03DF
    3620:	a0 e0       	ldi	r26, 0x00	; 0
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	86 01       	movw	r16, r12
    3626:	75 01       	movw	r14, r10
    3628:	e8 1a       	sub	r14, r24
    362a:	f9 0a       	sbc	r15, r25
    362c:	0a 0b       	sbc	r16, r26
    362e:	1b 0b       	sbc	r17, r27
    3630:	e0 92 fc 03 	sts	0x03FC, r14
    3634:	f0 92 fd 03 	sts	0x03FD, r15
    3638:	00 93 fe 03 	sts	0x03FE, r16
    363c:	10 93 ff 03 	sts	0x03FF, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    3640:	e0 92 7a 04 	sts	0x047A, r14
    3644:	f0 92 7b 04 	sts	0x047B, r15
    3648:	00 93 7c 04 	sts	0x047C, r16
    364c:	10 93 7d 04 	sts	0x047D, r17
	delta_right_speed_sum += delta_right_speed;
    3650:	60 91 04 04 	lds	r22, 0x0404
    3654:	70 91 05 04 	lds	r23, 0x0405
    3658:	80 91 06 04 	lds	r24, 0x0406
    365c:	90 91 07 04 	lds	r25, 0x0407
    3660:	6e 0d       	add	r22, r14
    3662:	7f 1d       	adc	r23, r15
    3664:	80 1f       	adc	r24, r16
    3666:	91 1f       	adc	r25, r17
    3668:	60 93 04 04 	sts	0x0404, r22
    366c:	70 93 05 04 	sts	0x0405, r23
    3670:	80 93 06 04 	sts	0x0406, r24
    3674:	90 93 07 04 	sts	0x0407, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    3678:	61 38       	cpi	r22, 0x81	; 129
    367a:	fc e0       	ldi	r31, 0x0C	; 12
    367c:	7f 07       	cpc	r23, r31
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	8f 07       	cpc	r24, r31
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	9f 07       	cpc	r25, r31
    3686:	0c f0       	brlt	.+2      	; 0x368a <start_orizzontal_speed_control+0xfc>
    3688:	8b c1       	rjmp	.+790    	; 0x39a0 <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    368a:	60 38       	cpi	r22, 0x80	; 128
    368c:	e3 ef       	ldi	r30, 0xF3	; 243
    368e:	7e 07       	cpc	r23, r30
    3690:	ef ef       	ldi	r30, 0xFF	; 255
    3692:	8e 07       	cpc	r24, r30
    3694:	ef ef       	ldi	r30, 0xFF	; 255
    3696:	9e 07       	cpc	r25, r30
    3698:	0c f4       	brge	.+2      	; 0x369c <start_orizzontal_speed_control+0x10e>
    369a:	2c c2       	rjmp	.+1112   	; 0x3af4 <start_orizzontal_speed_control+0x566>
    369c:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__addsf3>
    36a8:	6d 83       	std	Y+5, r22	; 0x05
    36aa:	7e 83       	std	Y+6, r23	; 0x06
    36ac:	8f 83       	std	Y+7, r24	; 0x07
    36ae:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    36b0:	c8 01       	movw	r24, r16
    36b2:	b7 01       	movw	r22, r14
    36b4:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	48 ec       	ldi	r20, 0xC8	; 200
    36be:	52 e4       	ldi	r21, 0x42	; 66
    36c0:	0e 94 88 22 	call	0x4510	; 0x4510 <__mulsf3>
    36c4:	69 83       	std	Y+1, r22	; 0x01
    36c6:	7a 83       	std	Y+2, r23	; 0x02
    36c8:	8b 83       	std	Y+3, r24	; 0x03
    36ca:	9c 83       	std	Y+4, r25	; 0x04
    36cc:	c8 01       	movw	r24, r16
    36ce:	b7 01       	movw	r22, r14
    36d0:	66 19       	sub	r22, r6
    36d2:	77 09       	sbc	r23, r7
    36d4:	88 09       	sbc	r24, r8
    36d6:	99 09       	sbc	r25, r9
    36d8:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	0e 94 88 22 	call	0x4510	; 0x4510 <__mulsf3>
    36e8:	9b 01       	movw	r18, r22
    36ea:	ac 01       	movw	r20, r24
    36ec:	69 81       	ldd	r22, Y+1	; 0x01
    36ee:	7a 81       	ldd	r23, Y+2	; 0x02
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	9c 81       	ldd	r25, Y+4	; 0x04
    36f4:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__addsf3>
    36f8:	bd 81       	ldd	r27, Y+5	; 0x05
    36fa:	ae 81       	ldd	r26, Y+6	; 0x06
    36fc:	ef 80       	ldd	r14, Y+7	; 0x07
    36fe:	6a 84       	ldd	r6, Y+10	; 0x0a
    3700:	2b 2f       	mov	r18, r27
    3702:	3a 2f       	mov	r19, r26
    3704:	4e 2d       	mov	r20, r14
    3706:	56 2d       	mov	r21, r6
    3708:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__addsf3>
    370c:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
    3710:	7b 01       	movw	r14, r22
    3712:	8c 01       	movw	r16, r24
    3714:	60 93 0c 04 	sts	0x040C, r22
    3718:	70 93 0d 04 	sts	0x040D, r23
    371c:	80 93 0e 04 	sts	0x040E, r24
    3720:	90 93 0f 04 	sts	0x040F, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    3724:	c6 01       	movw	r24, r12
    3726:	b5 01       	movw	r22, r10
    3728:	28 e7       	ldi	r18, 0x78	; 120
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__mulsi3>
    3734:	6e 0d       	add	r22, r14
    3736:	7f 1d       	adc	r23, r15
    3738:	80 1f       	adc	r24, r16
    373a:	91 1f       	adc	r25, r17
    373c:	60 93 f0 03 	sts	0x03F0, r22
    3740:	70 93 f1 03 	sts	0x03F1, r23
    3744:	80 93 f2 03 	sts	0x03F2, r24
    3748:	90 93 f3 03 	sts	0x03F3, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    374c:	97 fd       	sbrc	r25, 7
    374e:	76 c1       	rjmp	.+748    	; 0x3a3c <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    3750:	16 16       	cp	r1, r22
    3752:	17 06       	cpc	r1, r23
    3754:	18 06       	cpc	r1, r24
    3756:	19 06       	cpc	r1, r25
    3758:	0c f0       	brlt	.+2      	; 0x375c <start_orizzontal_speed_control+0x1ce>
    375a:	7d c1       	rjmp	.+762    	; 0x3a56 <start_orizzontal_speed_control+0x4c8>
    375c:	d7 fc       	sbrc	r13, 7
    375e:	fd c1       	rjmp	.+1018   	; 0x3b5a <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    3760:	61 3c       	cpi	r22, 0xC1	; 193
    3762:	ed e5       	ldi	r30, 0x5D	; 93
    3764:	7e 07       	cpc	r23, r30
    3766:	e0 e0       	ldi	r30, 0x00	; 0
    3768:	8e 07       	cpc	r24, r30
    376a:	e0 e0       	ldi	r30, 0x00	; 0
    376c:	9e 07       	cpc	r25, r30
    376e:	0c f4       	brge	.+2      	; 0x3772 <start_orizzontal_speed_control+0x1e4>
    3770:	72 c1       	rjmp	.+740    	; 0x3a56 <start_orizzontal_speed_control+0x4c8>
    3772:	80 ec       	ldi	r24, 0xC0	; 192
    3774:	9d e5       	ldi	r25, 0x5D	; 93
    3776:	a0 e0       	ldi	r26, 0x00	; 0
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	80 93 f0 03 	sts	0x03F0, r24
    377e:	90 93 f1 03 	sts	0x03F1, r25
    3782:	a0 93 f2 03 	sts	0x03F2, r26
    3786:	b0 93 f3 03 	sts	0x03F3, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    378a:	a0 90 72 04 	lds	r10, 0x0472
    378e:	b0 90 73 04 	lds	r11, 0x0473
    3792:	c0 90 74 04 	lds	r12, 0x0474
    3796:	d0 90 75 04 	lds	r13, 0x0475
    379a:	a0 92 76 04 	sts	0x0476, r10
    379e:	b0 92 77 04 	sts	0x0477, r11
    37a2:	c0 92 78 04 	sts	0x0478, r12
    37a6:	d0 92 79 04 	sts	0x0479, r13
	if(pwm_left_working >= 0) {
    37aa:	57 fc       	sbrc	r5, 7
    37ac:	7d c1       	rjmp	.+762    	; 0x3aa8 <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    37ae:	80 91 dc 03 	lds	r24, 0x03DC
    37b2:	90 91 dd 03 	lds	r25, 0x03DD
    37b6:	a0 e0       	ldi	r26, 0x00	; 0
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	82 01       	movw	r16, r4
    37bc:	71 01       	movw	r14, r2
    37be:	e8 1a       	sub	r14, r24
    37c0:	f9 0a       	sbc	r15, r25
    37c2:	0a 0b       	sbc	r16, r26
    37c4:	1b 0b       	sbc	r17, r27
    37c6:	e0 92 f8 03 	sts	0x03F8, r14
    37ca:	f0 92 f9 03 	sts	0x03F9, r15
    37ce:	00 93 fa 03 	sts	0x03FA, r16
    37d2:	10 93 fb 03 	sts	0x03FB, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    37d6:	e0 92 72 04 	sts	0x0472, r14
    37da:	f0 92 73 04 	sts	0x0473, r15
    37de:	00 93 74 04 	sts	0x0474, r16
    37e2:	10 93 75 04 	sts	0x0475, r17
	delta_left_speed_sum += delta_left_speed;
    37e6:	60 91 00 04 	lds	r22, 0x0400
    37ea:	70 91 01 04 	lds	r23, 0x0401
    37ee:	80 91 02 04 	lds	r24, 0x0402
    37f2:	90 91 03 04 	lds	r25, 0x0403
    37f6:	6e 0d       	add	r22, r14
    37f8:	7f 1d       	adc	r23, r15
    37fa:	80 1f       	adc	r24, r16
    37fc:	91 1f       	adc	r25, r17
    37fe:	60 93 00 04 	sts	0x0400, r22
    3802:	70 93 01 04 	sts	0x0401, r23
    3806:	80 93 02 04 	sts	0x0402, r24
    380a:	90 93 03 04 	sts	0x0403, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    380e:	61 38       	cpi	r22, 0x81	; 129
    3810:	2c e0       	ldi	r18, 0x0C	; 12
    3812:	72 07       	cpc	r23, r18
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	82 07       	cpc	r24, r18
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	92 07       	cpc	r25, r18
    381c:	0c f4       	brge	.+2      	; 0x3820 <start_orizzontal_speed_control+0x292>
    381e:	d3 c0       	rjmp	.+422    	; 0x39c6 <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    3820:	80 e8       	ldi	r24, 0x80	; 128
    3822:	9c e0       	ldi	r25, 0x0C	; 12
    3824:	a0 e0       	ldi	r26, 0x00	; 0
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	80 93 00 04 	sts	0x0400, r24
    382c:	90 93 01 04 	sts	0x0401, r25
    3830:	a0 93 02 04 	sts	0x0402, r26
    3834:	b0 93 03 04 	sts	0x0403, r27
    3838:	19 82       	std	Y+1, r1	; 0x01
    383a:	1d 82       	std	Y+5, r1	; 0x05
    383c:	88 ec       	ldi	r24, 0xC8	; 200
    383e:	8e 83       	std	Y+6, r24	; 0x06
    3840:	e5 e4       	ldi	r30, 0x45	; 69
    3842:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    3844:	c8 01       	movw	r24, r16
    3846:	b7 01       	movw	r22, r14
    3848:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	48 ec       	ldi	r20, 0xC8	; 200
    3852:	52 e4       	ldi	r21, 0x42	; 66
    3854:	0e 94 88 22 	call	0x4510	; 0x4510 <__mulsf3>
    3858:	3b 01       	movw	r6, r22
    385a:	4c 01       	movw	r8, r24
    385c:	c8 01       	movw	r24, r16
    385e:	b7 01       	movw	r22, r14
    3860:	6a 19       	sub	r22, r10
    3862:	7b 09       	sbc	r23, r11
    3864:	8c 09       	sbc	r24, r12
    3866:	9d 09       	sbc	r25, r13
    3868:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 88 22 	call	0x4510	; 0x4510 <__mulsf3>
    3878:	9b 01       	movw	r18, r22
    387a:	ac 01       	movw	r20, r24
    387c:	c4 01       	movw	r24, r8
    387e:	b3 01       	movw	r22, r6
    3880:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__addsf3>
    3884:	b9 81       	ldd	r27, Y+1	; 0x01
    3886:	ad 81       	ldd	r26, Y+5	; 0x05
    3888:	ee 80       	ldd	r14, Y+6	; 0x06
    388a:	af 80       	ldd	r10, Y+7	; 0x07
    388c:	2b 2f       	mov	r18, r27
    388e:	3a 2f       	mov	r19, r26
    3890:	4e 2d       	mov	r20, r14
    3892:	5a 2d       	mov	r21, r10
    3894:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__addsf3>
    3898:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
    389c:	7b 01       	movw	r14, r22
    389e:	8c 01       	movw	r16, r24
    38a0:	60 93 08 04 	sts	0x0408, r22
    38a4:	70 93 09 04 	sts	0x0409, r23
    38a8:	80 93 0a 04 	sts	0x040A, r24
    38ac:	90 93 0b 04 	sts	0x040B, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    38b0:	c2 01       	movw	r24, r4
    38b2:	b1 01       	movw	r22, r2
    38b4:	28 e7       	ldi	r18, 0x78	; 120
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e0       	ldi	r20, 0x00	; 0
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__mulsi3>
    38c0:	6e 0d       	add	r22, r14
    38c2:	7f 1d       	adc	r23, r15
    38c4:	80 1f       	adc	r24, r16
    38c6:	91 1f       	adc	r25, r17
    38c8:	60 93 f4 03 	sts	0x03F4, r22
    38cc:	70 93 f5 03 	sts	0x03F5, r23
    38d0:	80 93 f6 03 	sts	0x03F6, r24
    38d4:	90 93 f7 03 	sts	0x03F7, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    38d8:	97 fd       	sbrc	r25, 7
    38da:	89 c0       	rjmp	.+274    	; 0x39ee <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    38dc:	16 16       	cp	r1, r22
    38de:	17 06       	cpc	r1, r23
    38e0:	18 06       	cpc	r1, r24
    38e2:	19 06       	cpc	r1, r25
    38e4:	0c f0       	brlt	.+2      	; 0x38e8 <start_orizzontal_speed_control+0x35a>
    38e6:	90 c0       	rjmp	.+288    	; 0x3a08 <start_orizzontal_speed_control+0x47a>
    38e8:	57 fc       	sbrc	r5, 7
    38ea:	17 c1       	rjmp	.+558    	; 0x3b1a <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    38ec:	61 3c       	cpi	r22, 0xC1	; 193
    38ee:	ed e5       	ldi	r30, 0x5D	; 93
    38f0:	7e 07       	cpc	r23, r30
    38f2:	e0 e0       	ldi	r30, 0x00	; 0
    38f4:	8e 07       	cpc	r24, r30
    38f6:	e0 e0       	ldi	r30, 0x00	; 0
    38f8:	9e 07       	cpc	r25, r30
    38fa:	0c f4       	brge	.+2      	; 0x38fe <start_orizzontal_speed_control+0x370>
    38fc:	85 c0       	rjmp	.+266    	; 0x3a08 <start_orizzontal_speed_control+0x47a>
    38fe:	80 ec       	ldi	r24, 0xC0	; 192
    3900:	9d e5       	ldi	r25, 0x5D	; 93
    3902:	a0 e0       	ldi	r26, 0x00	; 0
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	80 93 f4 03 	sts	0x03F4, r24
    390a:	90 93 f5 03 	sts	0x03F5, r25
    390e:	a0 93 f6 03 	sts	0x03F6, r26
    3912:	b0 93 f7 03 	sts	0x03F7, r27
    3916:	64 eb       	ldi	r22, 0xB4	; 180
    3918:	70 e0       	ldi	r23, 0x00	; 0
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    391e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3920:	fc 85       	ldd	r31, Y+12	; 0x0c
    3922:	60 83       	st	Z, r22
    3924:	71 83       	std	Z+1, r23	; 0x01
    3926:	82 83       	std	Z+2, r24	; 0x02
    3928:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    392a:	60 91 f0 03 	lds	r22, 0x03F0
    392e:	70 91 f1 03 	lds	r23, 0x03F1
    3932:	80 91 f2 03 	lds	r24, 0x03F2
    3936:	90 91 f3 03 	lds	r25, 0x03F3
    393a:	26 e6       	ldi	r18, 0x66	; 102
    393c:	32 e0       	ldi	r19, 0x02	; 2
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__mulsi3>
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	39 e0       	ldi	r19, 0x09	; 9
    394a:	4d e3       	ldi	r20, 0x3D	; 61
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__divmodsi4>
    3952:	ca 01       	movw	r24, r20
    3954:	b9 01       	movw	r22, r18
    3956:	2c e3       	ldi	r18, 0x3C	; 60
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__mulsi3>
    3962:	e8 85       	ldd	r30, Y+8	; 0x08
    3964:	f9 85       	ldd	r31, Y+9	; 0x09
    3966:	60 83       	st	Z, r22
    3968:	71 83       	std	Z+1, r23	; 0x01
    396a:	82 83       	std	Z+2, r24	; 0x02
    396c:	93 83       	std	Z+3, r25	; 0x03

}
    396e:	2c 96       	adiw	r28, 0x0c	; 12
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	1f 91       	pop	r17
    3980:	0f 91       	pop	r16
    3982:	ff 90       	pop	r15
    3984:	ef 90       	pop	r14
    3986:	df 90       	pop	r13
    3988:	cf 90       	pop	r12
    398a:	bf 90       	pop	r11
    398c:	af 90       	pop	r10
    398e:	9f 90       	pop	r9
    3990:	8f 90       	pop	r8
    3992:	7f 90       	pop	r7
    3994:	6f 90       	pop	r6
    3996:	5f 90       	pop	r5
    3998:	4f 90       	pop	r4
    399a:	3f 90       	pop	r3
    399c:	2f 90       	pop	r2
    399e:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    39a0:	80 e8       	ldi	r24, 0x80	; 128
    39a2:	9c e0       	ldi	r25, 0x0C	; 12
    39a4:	a0 e0       	ldi	r26, 0x00	; 0
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	80 93 04 04 	sts	0x0404, r24
    39ac:	90 93 05 04 	sts	0x0405, r25
    39b0:	a0 93 06 04 	sts	0x0406, r26
    39b4:	b0 93 07 04 	sts	0x0407, r27
    39b8:	1d 82       	std	Y+5, r1	; 0x05
    39ba:	1e 82       	std	Y+6, r1	; 0x06
    39bc:	28 ec       	ldi	r18, 0xC8	; 200
    39be:	2f 83       	std	Y+7, r18	; 0x07
    39c0:	85 e4       	ldi	r24, 0x45	; 69
    39c2:	8a 87       	std	Y+10, r24	; 0x0a
    39c4:	75 ce       	rjmp	.-790    	; 0x36b0 <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    39c6:	60 38       	cpi	r22, 0x80	; 128
    39c8:	f3 ef       	ldi	r31, 0xF3	; 243
    39ca:	7f 07       	cpc	r23, r31
    39cc:	ff ef       	ldi	r31, 0xFF	; 255
    39ce:	8f 07       	cpc	r24, r31
    39d0:	ff ef       	ldi	r31, 0xFF	; 255
    39d2:	9f 07       	cpc	r25, r31
    39d4:	0c f4       	brge	.+2      	; 0x39d8 <start_orizzontal_speed_control+0x44a>
    39d6:	7b c0       	rjmp	.+246    	; 0x3ace <start_orizzontal_speed_control+0x540>
    39d8:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatsisf>
    39dc:	9b 01       	movw	r18, r22
    39de:	ac 01       	movw	r20, r24
    39e0:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__addsf3>
    39e4:	69 83       	std	Y+1, r22	; 0x01
    39e6:	7d 83       	std	Y+5, r23	; 0x05
    39e8:	8e 83       	std	Y+6, r24	; 0x06
    39ea:	9f 83       	std	Y+7, r25	; 0x07
    39ec:	2b cf       	rjmp	.-426    	; 0x3844 <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    39ee:	57 fc       	sbrc	r5, 7
    39f0:	0b c0       	rjmp	.+22     	; 0x3a08 <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    39f2:	10 92 f4 03 	sts	0x03F4, r1
    39f6:	10 92 f5 03 	sts	0x03F5, r1
    39fa:	10 92 f6 03 	sts	0x03F6, r1
    39fe:	10 92 f7 03 	sts	0x03F7, r1
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3a08:	60 34       	cpi	r22, 0x40	; 64
    3a0a:	f2 ea       	ldi	r31, 0xA2	; 162
    3a0c:	7f 07       	cpc	r23, r31
    3a0e:	ff ef       	ldi	r31, 0xFF	; 255
    3a10:	8f 07       	cpc	r24, r31
    3a12:	ff ef       	ldi	r31, 0xFF	; 255
    3a14:	9f 07       	cpc	r25, r31
    3a16:	0c f0       	brlt	.+2      	; 0x3a1a <start_orizzontal_speed_control+0x48c>
    3a18:	8b c0       	rjmp	.+278    	; 0x3b30 <start_orizzontal_speed_control+0x5a2>
    3a1a:	80 e4       	ldi	r24, 0x40	; 64
    3a1c:	92 ea       	ldi	r25, 0xA2	; 162
    3a1e:	af ef       	ldi	r26, 0xFF	; 255
    3a20:	bf ef       	ldi	r27, 0xFF	; 255
    3a22:	80 93 f4 03 	sts	0x03F4, r24
    3a26:	90 93 f5 03 	sts	0x03F5, r25
    3a2a:	a0 93 f6 03 	sts	0x03F6, r26
    3a2e:	b0 93 f7 03 	sts	0x03F7, r27
    3a32:	6c e4       	ldi	r22, 0x4C	; 76
    3a34:	7f ef       	ldi	r23, 0xFF	; 255
    3a36:	8f ef       	ldi	r24, 0xFF	; 255
    3a38:	9f ef       	ldi	r25, 0xFF	; 255
    3a3a:	71 cf       	rjmp	.-286    	; 0x391e <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    3a3c:	d7 fc       	sbrc	r13, 7
    3a3e:	0b c0       	rjmp	.+22     	; 0x3a56 <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    3a40:	10 92 f0 03 	sts	0x03F0, r1
    3a44:	10 92 f1 03 	sts	0x03F1, r1
    3a48:	10 92 f2 03 	sts	0x03F2, r1
    3a4c:	10 92 f3 03 	sts	0x03F3, r1
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	70 e0       	ldi	r23, 0x00	; 0
    3a54:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3a56:	60 34       	cpi	r22, 0x40	; 64
    3a58:	f2 ea       	ldi	r31, 0xA2	; 162
    3a5a:	7f 07       	cpc	r23, r31
    3a5c:	ff ef       	ldi	r31, 0xFF	; 255
    3a5e:	8f 07       	cpc	r24, r31
    3a60:	ff ef       	ldi	r31, 0xFF	; 255
    3a62:	9f 07       	cpc	r25, r31
    3a64:	0c f0       	brlt	.+2      	; 0x3a68 <start_orizzontal_speed_control+0x4da>
    3a66:	91 ce       	rjmp	.-734    	; 0x378a <start_orizzontal_speed_control+0x1fc>
    3a68:	80 e4       	ldi	r24, 0x40	; 64
    3a6a:	92 ea       	ldi	r25, 0xA2	; 162
    3a6c:	af ef       	ldi	r26, 0xFF	; 255
    3a6e:	bf ef       	ldi	r27, 0xFF	; 255
    3a70:	80 93 f0 03 	sts	0x03F0, r24
    3a74:	90 93 f1 03 	sts	0x03F1, r25
    3a78:	a0 93 f2 03 	sts	0x03F2, r26
    3a7c:	b0 93 f3 03 	sts	0x03F3, r27
    3a80:	84 ce       	rjmp	.-760    	; 0x378a <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    3a82:	e0 90 de 03 	lds	r14, 0x03DE
    3a86:	f0 90 df 03 	lds	r15, 0x03DF
    3a8a:	00 e0       	ldi	r16, 0x00	; 0
    3a8c:	10 e0       	ldi	r17, 0x00	; 0
    3a8e:	ea 0c       	add	r14, r10
    3a90:	fb 1c       	adc	r15, r11
    3a92:	0c 1d       	adc	r16, r12
    3a94:	1d 1d       	adc	r17, r13
    3a96:	e0 92 fc 03 	sts	0x03FC, r14
    3a9a:	f0 92 fd 03 	sts	0x03FD, r15
    3a9e:	00 93 fe 03 	sts	0x03FE, r16
    3aa2:	10 93 ff 03 	sts	0x03FF, r17
    3aa6:	cc cd       	rjmp	.-1128   	; 0x3640 <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    3aa8:	e0 90 dc 03 	lds	r14, 0x03DC
    3aac:	f0 90 dd 03 	lds	r15, 0x03DD
    3ab0:	00 e0       	ldi	r16, 0x00	; 0
    3ab2:	10 e0       	ldi	r17, 0x00	; 0
    3ab4:	e2 0c       	add	r14, r2
    3ab6:	f3 1c       	adc	r15, r3
    3ab8:	04 1d       	adc	r16, r4
    3aba:	15 1d       	adc	r17, r5
    3abc:	e0 92 f8 03 	sts	0x03F8, r14
    3ac0:	f0 92 f9 03 	sts	0x03F9, r15
    3ac4:	00 93 fa 03 	sts	0x03FA, r16
    3ac8:	10 93 fb 03 	sts	0x03FB, r17
    3acc:	84 ce       	rjmp	.-760    	; 0x37d6 <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    3ace:	80 e8       	ldi	r24, 0x80	; 128
    3ad0:	93 ef       	ldi	r25, 0xF3	; 243
    3ad2:	af ef       	ldi	r26, 0xFF	; 255
    3ad4:	bf ef       	ldi	r27, 0xFF	; 255
    3ad6:	80 93 00 04 	sts	0x0400, r24
    3ada:	90 93 01 04 	sts	0x0401, r25
    3ade:	a0 93 02 04 	sts	0x0402, r26
    3ae2:	b0 93 03 04 	sts	0x0403, r27
    3ae6:	19 82       	std	Y+1, r1	; 0x01
    3ae8:	1d 82       	std	Y+5, r1	; 0x05
    3aea:	28 ec       	ldi	r18, 0xC8	; 200
    3aec:	2e 83       	std	Y+6, r18	; 0x06
    3aee:	85 ec       	ldi	r24, 0xC5	; 197
    3af0:	8f 83       	std	Y+7, r24	; 0x07
    3af2:	a8 ce       	rjmp	.-688    	; 0x3844 <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    3af4:	80 e8       	ldi	r24, 0x80	; 128
    3af6:	93 ef       	ldi	r25, 0xF3	; 243
    3af8:	af ef       	ldi	r26, 0xFF	; 255
    3afa:	bf ef       	ldi	r27, 0xFF	; 255
    3afc:	80 93 04 04 	sts	0x0404, r24
    3b00:	90 93 05 04 	sts	0x0405, r25
    3b04:	a0 93 06 04 	sts	0x0406, r26
    3b08:	b0 93 07 04 	sts	0x0407, r27
    3b0c:	1d 82       	std	Y+5, r1	; 0x05
    3b0e:	1e 82       	std	Y+6, r1	; 0x06
    3b10:	f8 ec       	ldi	r31, 0xC8	; 200
    3b12:	ff 83       	std	Y+7, r31	; 0x07
    3b14:	25 ec       	ldi	r18, 0xC5	; 197
    3b16:	2a 87       	std	Y+10, r18	; 0x0a
    3b18:	cb cd       	rjmp	.-1130   	; 0x36b0 <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    3b1a:	10 92 f4 03 	sts	0x03F4, r1
    3b1e:	10 92 f5 03 	sts	0x03F5, r1
    3b22:	10 92 f6 03 	sts	0x03F6, r1
    3b26:	10 92 f7 03 	sts	0x03F7, r1
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3b30:	26 e6       	ldi	r18, 0x66	; 102
    3b32:	32 e0       	ldi	r19, 0x02	; 2
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__mulsi3>
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	39 e0       	ldi	r19, 0x09	; 9
    3b40:	4d e3       	ldi	r20, 0x3D	; 61
    3b42:	50 e0       	ldi	r21, 0x00	; 0
    3b44:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__divmodsi4>
    3b48:	ca 01       	movw	r24, r20
    3b4a:	b9 01       	movw	r22, r18
    3b4c:	2c e3       	ldi	r18, 0x3C	; 60
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__mulsi3>
    3b58:	e2 ce       	rjmp	.-572    	; 0x391e <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    3b5a:	10 92 f0 03 	sts	0x03F0, r1
    3b5e:	10 92 f1 03 	sts	0x03F1, r1
    3b62:	10 92 f2 03 	sts	0x03F2, r1
    3b66:	10 92 f3 03 	sts	0x03F3, r1
    3b6a:	0f ce       	rjmp	.-994    	; 0x378a <start_orizzontal_speed_control+0x1fc>

00003b6c <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    3b6c:	8f ef       	ldi	r24, 0xFF	; 255
    3b6e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    3b70:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3b72:	97 ef       	ldi	r25, 0xF7	; 247
    3b74:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    3b76:	90 ee       	ldi	r25, 0xE0	; 224
    3b78:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    3b7a:	90 ef       	ldi	r25, 0xF0	; 240
    3b7c:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    3b7e:	90 eb       	ldi	r25, 0xB0	; 176
    3b80:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3b82:	9c ef       	ldi	r25, 0xFC	; 252
    3b84:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    3b86:	93 e0       	ldi	r25, 0x03	; 3
    3b88:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    3b8a:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3b8c:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    3b8e:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    3b90:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    3b92:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    3b94:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3b98:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    3b9c:	9f e8       	ldi	r25, 0x8F	; 143
    3b9e:	90 93 04 01 	sts	0x0104, r25
	#endif
	#ifdef HE_REV_3_1
	PORTJ = 0x0F;
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    3ba2:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    3ba6:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    3baa:	10 92 0b 01 	sts	0x010B, r1

		
}
    3bae:	08 95       	ret

00003bb0 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3bb0:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3bb2:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3bb4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3bb8:	80 e2       	ldi	r24, 0x20	; 32
    3bba:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3bbe:	08 95       	ret

00003bc0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3bc0:	94 ea       	ldi	r25, 0xA4	; 164
    3bc2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3bc6:	90 91 bc 00 	lds	r25, 0x00BC
    3bca:	97 ff       	sbrs	r25, 7
    3bcc:	fc cf       	rjmp	.-8      	; 0x3bc6 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3bce:	90 91 b9 00 	lds	r25, 0x00B9
    3bd2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3bd4:	98 30       	cpi	r25, 0x08	; 8
    3bd6:	21 f0       	breq	.+8      	; 0x3be0 <i2c_start+0x20>
    3bd8:	90 31       	cpi	r25, 0x10	; 16
    3bda:	11 f0       	breq	.+4      	; 0x3be0 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3be0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3be4:	84 e8       	ldi	r24, 0x84	; 132
    3be6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3bea:	80 91 bc 00 	lds	r24, 0x00BC
    3bee:	87 ff       	sbrs	r24, 7
    3bf0:	fc cf       	rjmp	.-8      	; 0x3bea <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3bf2:	90 91 b9 00 	lds	r25, 0x00B9
    3bf6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3bf8:	98 31       	cpi	r25, 0x18	; 24
    3bfa:	21 f0       	breq	.+8      	; 0x3c04 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 34       	cpi	r25, 0x40	; 64
    3c00:	19 f0       	breq	.+6      	; 0x3c08 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3c02:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3c04:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3c06:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	08 95       	ret

00003c0c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3c0c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3c0e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3c10:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3c12:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3c16:	90 91 bc 00 	lds	r25, 0x00BC
    3c1a:	97 ff       	sbrs	r25, 7
    3c1c:	fc cf       	rjmp	.-8      	; 0x3c16 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3c1e:	90 91 b9 00 	lds	r25, 0x00B9
    3c22:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    3c24:	98 30       	cpi	r25, 0x08	; 8
    3c26:	11 f0       	breq	.+4      	; 0x3c2c <i2c_start_wait+0x20>
    3c28:	90 31       	cpi	r25, 0x10	; 16
    3c2a:	99 f7       	brne	.-26     	; 0x3c12 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3c2c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3c30:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3c34:	90 91 bc 00 	lds	r25, 0x00BC
    3c38:	97 ff       	sbrs	r25, 7
    3c3a:	fc cf       	rjmp	.-8      	; 0x3c34 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3c3c:	90 91 b9 00 	lds	r25, 0x00B9
    3c40:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3c42:	90 32       	cpi	r25, 0x20	; 32
    3c44:	19 f0       	breq	.+6      	; 0x3c4c <i2c_start_wait+0x40>
    3c46:	98 35       	cpi	r25, 0x58	; 88
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <i2c_start_wait+0x40>
    3c4a:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3c4c:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3c50:	90 91 bc 00 	lds	r25, 0x00BC
    3c54:	94 fd       	sbrc	r25, 4
    3c56:	fc cf       	rjmp	.-8      	; 0x3c50 <i2c_start_wait+0x44>
    3c58:	dc cf       	rjmp	.-72     	; 0x3c12 <i2c_start_wait+0x6>

00003c5a <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3c5a:	94 ea       	ldi	r25, 0xA4	; 164
    3c5c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3c60:	90 91 bc 00 	lds	r25, 0x00BC
    3c64:	97 ff       	sbrs	r25, 7
    3c66:	fc cf       	rjmp	.-8      	; 0x3c60 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3c68:	90 91 b9 00 	lds	r25, 0x00B9
    3c6c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3c6e:	98 30       	cpi	r25, 0x08	; 8
    3c70:	21 f0       	breq	.+8      	; 0x3c7a <i2c_rep_start+0x20>
    3c72:	90 31       	cpi	r25, 0x10	; 16
    3c74:	11 f0       	breq	.+4      	; 0x3c7a <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3c7a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c7e:	84 e8       	ldi	r24, 0x84	; 132
    3c80:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3c84:	80 91 bc 00 	lds	r24, 0x00BC
    3c88:	87 ff       	sbrs	r24, 7
    3c8a:	fc cf       	rjmp	.-8      	; 0x3c84 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3c8c:	90 91 b9 00 	lds	r25, 0x00B9
    3c90:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3c92:	98 31       	cpi	r25, 0x18	; 24
    3c94:	21 f0       	breq	.+8      	; 0x3c9e <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	90 34       	cpi	r25, 0x40	; 64
    3c9a:	19 f0       	breq	.+6      	; 0x3ca2 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3c9c:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3ca0:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	08 95       	ret

00003ca6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3ca6:	84 e9       	ldi	r24, 0x94	; 148
    3ca8:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3cac:	80 91 bc 00 	lds	r24, 0x00BC
    3cb0:	84 fd       	sbrc	r24, 4
    3cb2:	fc cf       	rjmp	.-8      	; 0x3cac <i2c_stop+0x6>

}/* i2c_stop */
    3cb4:	08 95       	ret

00003cb6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3cb6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3cba:	84 e8       	ldi	r24, 0x84	; 132
    3cbc:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3cc0:	80 91 bc 00 	lds	r24, 0x00BC
    3cc4:	87 ff       	sbrs	r24, 7
    3cc6:	fc cf       	rjmp	.-8      	; 0x3cc0 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3cc8:	90 91 b9 00 	lds	r25, 0x00B9
    3ccc:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	98 32       	cpi	r25, 0x28	; 40
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3cd4:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3cd8:	08 95       	ret

00003cda <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3cda:	84 ec       	ldi	r24, 0xC4	; 196
    3cdc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3ce0:	80 91 bc 00 	lds	r24, 0x00BC
    3ce4:	87 ff       	sbrs	r24, 7
    3ce6:	fc cf       	rjmp	.-8      	; 0x3ce0 <i2c_readAck+0x6>

    return TWDR;
    3ce8:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3cec:	08 95       	ret

00003cee <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3cee:	84 e8       	ldi	r24, 0x84	; 132
    3cf0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3cf4:	80 91 bc 00 	lds	r24, 0x00BC
    3cf8:	87 ff       	sbrs	r24, 7
    3cfa:	fc cf       	rjmp	.-8      	; 0x3cf4 <i2c_readNak+0x6>
	
    return TWDR;
    3cfc:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3d00:	08 95       	ret

00003d02 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    3d02:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3d06:	80 e1       	ldi	r24, 0x10	; 16
    3d08:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3d0c:	e0 ec       	ldi	r30, 0xC0	; 192
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	80 81       	ld	r24, Z
    3d12:	82 60       	ori	r24, 0x02	; 2
    3d14:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    3d16:	e1 ec       	ldi	r30, 0xC1	; 193
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	88 69       	ori	r24, 0x98	; 152
    3d1e:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    3d20:	e2 ec       	ldi	r30, 0xC2	; 194
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	80 81       	ld	r24, Z
    3d26:	86 60       	ori	r24, 0x06	; 6
    3d28:	80 83       	st	Z, r24

}
    3d2a:	08 95       	ret

00003d2c <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    3d2c:	90 91 c0 00 	lds	r25, 0x00C0
    3d30:	95 ff       	sbrs	r25, 5
    3d32:	fc cf       	rjmp	.-8      	; 0x3d2c <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    3d34:	80 93 c6 00 	sts	0x00C6, r24

}
    3d38:	08 95       	ret

00003d3a <__vector_25>:

ISR(USART0_RX_vect) {
    3d3a:	1f 92       	push	r1
    3d3c:	0f 92       	push	r0
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	0f 92       	push	r0
    3d42:	11 24       	eor	r1, r1
    3d44:	2f 93       	push	r18
    3d46:	8f 93       	push	r24
    3d48:	9f 93       	push	r25
    3d4a:	af 93       	push	r26
    3d4c:	bf 93       	push	r27

	char receivedByte = UDR0;
    3d4e:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    3d52:	90 91 10 02 	lds	r25, 0x0210
    3d56:	99 23       	and	r25, r25
    3d58:	c9 f0       	breq	.+50     	; 0x3d8c <__vector_25+0x52>
		switch(receivedByte) {
    3d5a:	82 33       	cpi	r24, 0x32	; 50
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <__vector_25+0x26>
    3d5e:	56 c0       	rjmp	.+172    	; 0x3e0c <__vector_25+0xd2>
    3d60:	83 33       	cpi	r24, 0x33	; 51
    3d62:	58 f5       	brcc	.+86     	; 0x3dba <__vector_25+0x80>
    3d64:	80 33       	cpi	r24, 0x30	; 48
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <__vector_25+0x30>
    3d68:	79 c0       	rjmp	.+242    	; 0x3e5c <__vector_25+0x122>
    3d6a:	81 33       	cpi	r24, 0x31	; 49
    3d6c:	29 f4       	brne	.+10     	; 0x3d78 <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    3d74:	10 92 10 02 	sts	0x0210, r1

	}



}
    3d78:	bf 91       	pop	r27
    3d7a:	af 91       	pop	r26
    3d7c:	9f 91       	pop	r25
    3d7e:	8f 91       	pop	r24
    3d80:	2f 91       	pop	r18
    3d82:	0f 90       	pop	r0
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	0f 90       	pop	r0
    3d88:	1f 90       	pop	r1
    3d8a:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3d8c:	90 91 0f 02 	lds	r25, 0x020F
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <__vector_25+0x5c>
    3d94:	41 c0       	rjmp	.+130    	; 0x3e18 <__vector_25+0xde>
    3d96:	93 30       	cpi	r25, 0x03	; 3
    3d98:	08 f1       	brcs	.+66     	; 0x3ddc <__vector_25+0xa2>
    3d9a:	94 30       	cpi	r25, 0x04	; 4
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <__vector_25+0x66>
    3d9e:	89 c0       	rjmp	.+274    	; 0x3eb2 <__vector_25+0x178>
    3da0:	94 30       	cpi	r25, 0x04	; 4
    3da2:	08 f4       	brcc	.+2      	; 0x3da6 <__vector_25+0x6c>
    3da4:	6c c0       	rjmp	.+216    	; 0x3e7e <__vector_25+0x144>
    3da6:	95 30       	cpi	r25, 0x05	; 5
    3da8:	39 f7       	brne	.-50     	; 0x3d78 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    3daa:	83 37       	cpi	r24, 0x73	; 115
    3dac:	29 f7       	brne	.-54     	; 0x3d78 <__vector_25+0x3e>
					sendAdcValues = 0;
    3dae:	10 92 25 04 	sts	0x0425, r1
					choosePeripheral = 1;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	80 93 10 02 	sts	0x0210, r24
    3db8:	df cf       	rjmp	.-66     	; 0x3d78 <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    3dba:	84 33       	cpi	r24, 0x34	; 52
    3dbc:	09 f4       	brne	.+2      	; 0x3dc0 <__vector_25+0x86>
    3dbe:	59 c0       	rjmp	.+178    	; 0x3e72 <__vector_25+0x138>
    3dc0:	84 33       	cpi	r24, 0x34	; 52
    3dc2:	08 f4       	brcc	.+2      	; 0x3dc6 <__vector_25+0x8c>
    3dc4:	50 c0       	rjmp	.+160    	; 0x3e66 <__vector_25+0x12c>
    3dc6:	85 33       	cpi	r24, 0x35	; 53
    3dc8:	b9 f6       	brne	.-82     	; 0x3d78 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    3dca:	85 e0       	ldi	r24, 0x05	; 5
    3dcc:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    3dd0:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	80 93 25 04 	sts	0x0425, r24
				break;
    3dda:	ce cf       	rjmp	.-100    	; 0x3d78 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3ddc:	99 23       	and	r25, r25
    3dde:	91 f5       	brne	.+100    	; 0x3e44 <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    3de0:	8d 32       	cpi	r24, 0x2D	; 45
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <__vector_25+0xac>
    3de4:	05 c1       	rjmp	.+522    	; 0x3ff0 <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    3de6:	8b 32       	cpi	r24, 0x2B	; 43
    3de8:	21 f7       	brne	.-56     	; 0x3db2 <__vector_25+0x78>
					current_pwm = pwm_red-10;
    3dea:	80 91 0c 02 	lds	r24, 0x020C
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3df2:	97 fd       	sbrc	r25, 7
    3df4:	9c c1       	rjmp	.+824    	; 0x412e <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    3df6:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    3dfa:	88 23       	and	r24, r24
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <__vector_25+0xc6>
    3dfe:	99 c1       	rjmp	.+818    	; 0x4132 <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	90 93 89 00 	sts	0x0089, r25
    3e06:	80 93 88 00 	sts	0x0088, r24
    3e0a:	b6 cf       	rjmp	.-148    	; 0x3d78 <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    3e0c:	82 e0       	ldi	r24, 0x02	; 2
    3e0e:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    3e12:	10 92 10 02 	sts	0x0210, r1
				break;
    3e16:	b0 cf       	rjmp	.-160    	; 0x3d78 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    3e18:	8d 32       	cpi	r24, 0x2D	; 45
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <__vector_25+0xe4>
    3e1c:	2f c1       	rjmp	.+606    	; 0x407c <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    3e1e:	8b 32       	cpi	r24, 0x2B	; 43
    3e20:	41 f6       	brne	.-112    	; 0x3db2 <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    3e22:	80 91 0e 02 	lds	r24, 0x020E
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3e2a:	97 fd       	sbrc	r25, 7
    3e2c:	92 c1       	rjmp	.+804    	; 0x4152 <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    3e2e:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    3e32:	88 23       	and	r24, r24
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <__vector_25+0xfe>
    3e36:	8f c1       	rjmp	.+798    	; 0x4156 <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	90 93 8d 00 	sts	0x008D, r25
    3e3e:	80 93 8c 00 	sts	0x008C, r24
    3e42:	9a cf       	rjmp	.-204    	; 0x3d78 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3e44:	91 30       	cpi	r25, 0x01	; 1
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <__vector_25+0x110>
    3e48:	97 cf       	rjmp	.-210    	; 0x3d78 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    3e4a:	8d 32       	cpi	r24, 0x2D	; 45
    3e4c:	09 f4       	brne	.+2      	; 0x3e50 <__vector_25+0x116>
    3e4e:	b9 c0       	rjmp	.+370    	; 0x3fc2 <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    3e50:	8b 32       	cpi	r24, 0x2B	; 43
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <__vector_25+0x11c>
    3e54:	47 c0       	rjmp	.+142    	; 0x3ee4 <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    3e56:	90 93 10 02 	sts	0x0210, r25
    3e5a:	8e cf       	rjmp	.-228    	; 0x3d78 <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    3e5c:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    3e60:	10 92 10 02 	sts	0x0210, r1
				break;
    3e64:	89 cf       	rjmp	.-238    	; 0x3d78 <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    3e66:	83 e0       	ldi	r24, 0x03	; 3
    3e68:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    3e6c:	10 92 10 02 	sts	0x0210, r1
				break;
    3e70:	83 cf       	rjmp	.-250    	; 0x3d78 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    3e72:	84 e0       	ldi	r24, 0x04	; 4
    3e74:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    3e78:	10 92 10 02 	sts	0x0210, r1
				break;
    3e7c:	7d cf       	rjmp	.-262    	; 0x3d78 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    3e7e:	8b 32       	cpi	r24, 0x2B	; 43
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <__vector_25+0x14a>
    3e82:	13 c1       	rjmp	.+550    	; 0x40aa <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    3e84:	8d 32       	cpi	r24, 0x2D	; 45
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <__vector_25+0x150>
    3e88:	6d c0       	rjmp	.+218    	; 0x3f64 <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    3e8a:	83 37       	cpi	r24, 0x73	; 115
    3e8c:	09 f0       	breq	.+2      	; 0x3e90 <__vector_25+0x156>
    3e8e:	91 cf       	rjmp	.-222    	; 0x3db2 <__vector_25+0x78>
					pwm_right = 0;
    3e90:	10 92 e0 03 	sts	0x03E0, r1
    3e94:	10 92 e1 03 	sts	0x03E1, r1
    3e98:	10 92 e2 03 	sts	0x03E2, r1
    3e9c:	10 92 e3 03 	sts	0x03E3, r1
					OCR3A = 0;
    3ea0:	10 92 99 00 	sts	0x0099, r1
    3ea4:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    3ea8:	10 92 9b 00 	sts	0x009B, r1
    3eac:	10 92 9a 00 	sts	0x009A, r1
    3eb0:	63 cf       	rjmp	.-314    	; 0x3d78 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    3eb2:	8b 32       	cpi	r24, 0x2B	; 43
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <__vector_25+0x17e>
    3eb6:	b3 c0       	rjmp	.+358    	; 0x401e <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    3eb8:	8d 32       	cpi	r24, 0x2D	; 45
    3eba:	29 f1       	breq	.+74     	; 0x3f06 <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    3ebc:	83 37       	cpi	r24, 0x73	; 115
    3ebe:	09 f0       	breq	.+2      	; 0x3ec2 <__vector_25+0x188>
    3ec0:	78 cf       	rjmp	.-272    	; 0x3db2 <__vector_25+0x78>
					pwm_left = 0;
    3ec2:	10 92 e4 03 	sts	0x03E4, r1
    3ec6:	10 92 e5 03 	sts	0x03E5, r1
    3eca:	10 92 e6 03 	sts	0x03E6, r1
    3ece:	10 92 e7 03 	sts	0x03E7, r1
					OCR4A = 0;
    3ed2:	10 92 a9 00 	sts	0x00A9, r1
    3ed6:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    3eda:	10 92 ab 00 	sts	0x00AB, r1
    3ede:	10 92 aa 00 	sts	0x00AA, r1
    3ee2:	4a cf       	rjmp	.-364    	; 0x3d78 <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    3ee4:	80 91 0d 02 	lds	r24, 0x020D
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3eec:	97 fd       	sbrc	r25, 7
    3eee:	28 c1       	rjmp	.+592    	; 0x4140 <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    3ef0:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    3ef4:	88 23       	and	r24, r24
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <__vector_25+0x1c0>
    3ef8:	25 c1       	rjmp	.+586    	; 0x4144 <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	90 93 8b 00 	sts	0x008B, r25
    3f00:	80 93 8a 00 	sts	0x008A, r24
    3f04:	39 cf       	rjmp	.-398    	; 0x3d78 <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    3f06:	80 91 e4 03 	lds	r24, 0x03E4
    3f0a:	90 91 e5 03 	lds	r25, 0x03E5
    3f0e:	a0 91 e6 03 	lds	r26, 0x03E6
    3f12:	b0 91 e7 03 	lds	r27, 0x03E7
    3f16:	4e 97       	sbiw	r24, 0x1e	; 30
    3f18:	a1 09       	sbc	r26, r1
    3f1a:	b1 09       	sbc	r27, r1
    3f1c:	80 93 e4 03 	sts	0x03E4, r24
    3f20:	90 93 e5 03 	sts	0x03E5, r25
    3f24:	a0 93 e6 03 	sts	0x03E6, r26
    3f28:	b0 93 e7 03 	sts	0x03E7, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    3f2c:	8a 39       	cpi	r24, 0x9A	; 154
    3f2e:	2d ef       	ldi	r18, 0xFD	; 253
    3f30:	92 07       	cpc	r25, r18
    3f32:	2f ef       	ldi	r18, 0xFF	; 255
    3f34:	a2 07       	cpc	r26, r18
    3f36:	2f ef       	ldi	r18, 0xFF	; 255
    3f38:	b2 07       	cpc	r27, r18
    3f3a:	0c f0       	brlt	.+2      	; 0x3f3e <__vector_25+0x204>
    3f3c:	13 c1       	rjmp	.+550    	; 0x4164 <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    3f3e:	8a e9       	ldi	r24, 0x9A	; 154
    3f40:	9d ef       	ldi	r25, 0xFD	; 253
    3f42:	af ef       	ldi	r26, 0xFF	; 255
    3f44:	bf ef       	ldi	r27, 0xFF	; 255
    3f46:	80 93 e4 03 	sts	0x03E4, r24
    3f4a:	90 93 e5 03 	sts	0x03E5, r25
    3f4e:	a0 93 e6 03 	sts	0x03E6, r26
    3f52:	b0 93 e7 03 	sts	0x03E7, r27
    3f56:	86 e6       	ldi	r24, 0x66	; 102
    3f58:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3f5a:	90 93 ab 00 	sts	0x00AB, r25
    3f5e:	80 93 aa 00 	sts	0x00AA, r24
    3f62:	0a cf       	rjmp	.-492    	; 0x3d78 <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    3f64:	80 91 e0 03 	lds	r24, 0x03E0
    3f68:	90 91 e1 03 	lds	r25, 0x03E1
    3f6c:	a0 91 e2 03 	lds	r26, 0x03E2
    3f70:	b0 91 e3 03 	lds	r27, 0x03E3
    3f74:	4e 97       	sbiw	r24, 0x1e	; 30
    3f76:	a1 09       	sbc	r26, r1
    3f78:	b1 09       	sbc	r27, r1
    3f7a:	80 93 e0 03 	sts	0x03E0, r24
    3f7e:	90 93 e1 03 	sts	0x03E1, r25
    3f82:	a0 93 e2 03 	sts	0x03E2, r26
    3f86:	b0 93 e3 03 	sts	0x03E3, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    3f8a:	8a 39       	cpi	r24, 0x9A	; 154
    3f8c:	2d ef       	ldi	r18, 0xFD	; 253
    3f8e:	92 07       	cpc	r25, r18
    3f90:	2f ef       	ldi	r18, 0xFF	; 255
    3f92:	a2 07       	cpc	r26, r18
    3f94:	2f ef       	ldi	r18, 0xFF	; 255
    3f96:	b2 07       	cpc	r27, r18
    3f98:	0c f0       	brlt	.+2      	; 0x3f9c <__vector_25+0x262>
    3f9a:	ea c0       	rjmp	.+468    	; 0x4170 <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    3f9c:	8a e9       	ldi	r24, 0x9A	; 154
    3f9e:	9d ef       	ldi	r25, 0xFD	; 253
    3fa0:	af ef       	ldi	r26, 0xFF	; 255
    3fa2:	bf ef       	ldi	r27, 0xFF	; 255
    3fa4:	80 93 e0 03 	sts	0x03E0, r24
    3fa8:	90 93 e1 03 	sts	0x03E1, r25
    3fac:	a0 93 e2 03 	sts	0x03E2, r26
    3fb0:	b0 93 e3 03 	sts	0x03E3, r27
    3fb4:	86 e6       	ldi	r24, 0x66	; 102
    3fb6:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    3fb8:	90 93 9b 00 	sts	0x009B, r25
    3fbc:	80 93 9a 00 	sts	0x009A, r24
    3fc0:	db ce       	rjmp	.-586    	; 0x3d78 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    3fc2:	80 91 80 00 	lds	r24, 0x0080
    3fc6:	80 62       	ori	r24, 0x20	; 32
    3fc8:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    3fcc:	80 91 0d 02 	lds	r24, 0x020D
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    3fd4:	8f 3f       	cpi	r24, 0xFF	; 255
    3fd6:	91 05       	cpc	r25, r1
    3fd8:	19 f0       	breq	.+6      	; 0x3fe0 <__vector_25+0x2a6>
    3fda:	14 f0       	brlt	.+4      	; 0x3fe0 <__vector_25+0x2a6>
    3fdc:	8f ef       	ldi	r24, 0xFF	; 255
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	90 93 8b 00 	sts	0x008B, r25
    3fea:	80 93 8a 00 	sts	0x008A, r24
    3fee:	c4 ce       	rjmp	.-632    	; 0x3d78 <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    3ff0:	80 91 80 00 	lds	r24, 0x0080
    3ff4:	80 68       	ori	r24, 0x80	; 128
    3ff6:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    3ffa:	80 91 0c 02 	lds	r24, 0x020C
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    4002:	8f 3f       	cpi	r24, 0xFF	; 255
    4004:	91 05       	cpc	r25, r1
    4006:	19 f0       	breq	.+6      	; 0x400e <__vector_25+0x2d4>
    4008:	14 f0       	brlt	.+4      	; 0x400e <__vector_25+0x2d4>
    400a:	8f ef       	ldi	r24, 0xFF	; 255
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	90 93 89 00 	sts	0x0089, r25
    4018:	80 93 88 00 	sts	0x0088, r24
    401c:	ad ce       	rjmp	.-678    	; 0x3d78 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    401e:	80 91 e4 03 	lds	r24, 0x03E4
    4022:	90 91 e5 03 	lds	r25, 0x03E5
    4026:	a0 91 e6 03 	lds	r26, 0x03E6
    402a:	b0 91 e7 03 	lds	r27, 0x03E7
    402e:	4e 96       	adiw	r24, 0x1e	; 30
    4030:	a1 1d       	adc	r26, r1
    4032:	b1 1d       	adc	r27, r1
    4034:	80 93 e4 03 	sts	0x03E4, r24
    4038:	90 93 e5 03 	sts	0x03E5, r25
    403c:	a0 93 e6 03 	sts	0x03E6, r26
    4040:	b0 93 e7 03 	sts	0x03E7, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    4044:	87 36       	cpi	r24, 0x67	; 103
    4046:	22 e0       	ldi	r18, 0x02	; 2
    4048:	92 07       	cpc	r25, r18
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	a2 07       	cpc	r26, r18
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	b2 07       	cpc	r27, r18
    4052:	0c f4       	brge	.+2      	; 0x4056 <__vector_25+0x31c>
    4054:	58 c0       	rjmp	.+176    	; 0x4106 <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    4056:	86 e6       	ldi	r24, 0x66	; 102
    4058:	92 e0       	ldi	r25, 0x02	; 2
    405a:	a0 e0       	ldi	r26, 0x00	; 0
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	80 93 e4 03 	sts	0x03E4, r24
    4062:	90 93 e5 03 	sts	0x03E5, r25
    4066:	a0 93 e6 03 	sts	0x03E6, r26
    406a:	b0 93 e7 03 	sts	0x03E7, r27
    406e:	86 e6       	ldi	r24, 0x66	; 102
    4070:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    4072:	90 93 a9 00 	sts	0x00A9, r25
    4076:	80 93 a8 00 	sts	0x00A8, r24
    407a:	7e ce       	rjmp	.-772    	; 0x3d78 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    407c:	80 91 80 00 	lds	r24, 0x0080
    4080:	88 60       	ori	r24, 0x08	; 8
    4082:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    4086:	80 91 0e 02 	lds	r24, 0x020E
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    408e:	8f 3f       	cpi	r24, 0xFF	; 255
    4090:	91 05       	cpc	r25, r1
    4092:	19 f0       	breq	.+6      	; 0x409a <__vector_25+0x360>
    4094:	14 f0       	brlt	.+4      	; 0x409a <__vector_25+0x360>
    4096:	8f ef       	ldi	r24, 0xFF	; 255
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	90 93 8d 00 	sts	0x008D, r25
    40a4:	80 93 8c 00 	sts	0x008C, r24
    40a8:	67 ce       	rjmp	.-818    	; 0x3d78 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    40aa:	80 91 e0 03 	lds	r24, 0x03E0
    40ae:	90 91 e1 03 	lds	r25, 0x03E1
    40b2:	a0 91 e2 03 	lds	r26, 0x03E2
    40b6:	b0 91 e3 03 	lds	r27, 0x03E3
    40ba:	4e 96       	adiw	r24, 0x1e	; 30
    40bc:	a1 1d       	adc	r26, r1
    40be:	b1 1d       	adc	r27, r1
    40c0:	80 93 e0 03 	sts	0x03E0, r24
    40c4:	90 93 e1 03 	sts	0x03E1, r25
    40c8:	a0 93 e2 03 	sts	0x03E2, r26
    40cc:	b0 93 e3 03 	sts	0x03E3, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    40d0:	87 36       	cpi	r24, 0x67	; 103
    40d2:	22 e0       	ldi	r18, 0x02	; 2
    40d4:	92 07       	cpc	r25, r18
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	a2 07       	cpc	r26, r18
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	b2 07       	cpc	r27, r18
    40de:	ec f0       	brlt	.+58     	; 0x411a <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    40e0:	86 e6       	ldi	r24, 0x66	; 102
    40e2:	92 e0       	ldi	r25, 0x02	; 2
    40e4:	a0 e0       	ldi	r26, 0x00	; 0
    40e6:	b0 e0       	ldi	r27, 0x00	; 0
    40e8:	80 93 e0 03 	sts	0x03E0, r24
    40ec:	90 93 e1 03 	sts	0x03E1, r25
    40f0:	a0 93 e2 03 	sts	0x03E2, r26
    40f4:	b0 93 e3 03 	sts	0x03E3, r27
    40f8:	86 e6       	ldi	r24, 0x66	; 102
    40fa:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    40fc:	90 93 99 00 	sts	0x0099, r25
    4100:	80 93 98 00 	sts	0x0098, r24
    4104:	39 ce       	rjmp	.-910    	; 0x3d78 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    4106:	b7 ff       	sbrs	r27, 7
    4108:	b4 cf       	rjmp	.-152    	; 0x4072 <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    410a:	90 95       	com	r25
    410c:	81 95       	neg	r24
    410e:	9f 4f       	sbci	r25, 0xFF	; 255
    4110:	90 93 ab 00 	sts	0x00AB, r25
    4114:	80 93 aa 00 	sts	0x00AA, r24
    4118:	2f ce       	rjmp	.-930    	; 0x3d78 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    411a:	b7 ff       	sbrs	r27, 7
    411c:	ef cf       	rjmp	.-34     	; 0x40fc <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    411e:	90 95       	com	r25
    4120:	81 95       	neg	r24
    4122:	9f 4f       	sbci	r25, 0xFF	; 255
    4124:	90 93 9b 00 	sts	0x009B, r25
    4128:	80 93 9a 00 	sts	0x009A, r24
    412c:	25 ce       	rjmp	.-950    	; 0x3d78 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    412e:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    4132:	80 91 80 00 	lds	r24, 0x0080
    4136:	8f 77       	andi	r24, 0x7F	; 127
    4138:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    413c:	2d 98       	cbi	0x05, 5	; 5
    413e:	1c ce       	rjmp	.-968    	; 0x3d78 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    4140:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    4144:	80 91 80 00 	lds	r24, 0x0080
    4148:	8f 7d       	andi	r24, 0xDF	; 223
    414a:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    414e:	2e 98       	cbi	0x05, 6	; 5
    4150:	13 ce       	rjmp	.-986    	; 0x3d78 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    4152:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    4156:	80 91 80 00 	lds	r24, 0x0080
    415a:	87 7f       	andi	r24, 0xF7	; 247
    415c:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    4160:	2f 98       	cbi	0x05, 7	; 5
    4162:	0a ce       	rjmp	.-1004   	; 0x3d78 <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    4164:	b7 ff       	sbrs	r27, 7
    4166:	85 cf       	rjmp	.-246    	; 0x4072 <__vector_25+0x338>
						OCR4A = pwm_left;
    4168:	90 95       	com	r25
    416a:	81 95       	neg	r24
    416c:	9f 4f       	sbci	r25, 0xFF	; 255
    416e:	f5 ce       	rjmp	.-534    	; 0x3f5a <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    4170:	b7 ff       	sbrs	r27, 7
    4172:	c4 cf       	rjmp	.-120    	; 0x40fc <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    4174:	90 95       	com	r25
    4176:	81 95       	neg	r24
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	1e cf       	rjmp	.-452    	; 0x3fb8 <__vector_25+0x27e>

0000417c <__fixunssfsi>:
    417c:	ef 92       	push	r14
    417e:	ff 92       	push	r15
    4180:	0f 93       	push	r16
    4182:	1f 93       	push	r17
    4184:	7b 01       	movw	r14, r22
    4186:	8c 01       	movw	r16, r24
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	5f e4       	ldi	r21, 0x4F	; 79
    4190:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    4194:	88 23       	and	r24, r24
    4196:	7c f0       	brlt	.+30     	; 0x41b6 <__fixunssfsi+0x3a>
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	40 e0       	ldi	r20, 0x00	; 0
    419e:	5f e4       	ldi	r21, 0x4F	; 79
    41a0:	c8 01       	movw	r24, r16
    41a2:	b7 01       	movw	r22, r14
    41a4:	0e 94 2a 22 	call	0x4454	; 0x4454 <__subsf3>
    41a8:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
    41ac:	60 50       	subi	r22, 0x00	; 0
    41ae:	70 40       	sbci	r23, 0x00	; 0
    41b0:	80 40       	sbci	r24, 0x00	; 0
    41b2:	90 48       	sbci	r25, 0x80	; 128
    41b4:	04 c0       	rjmp	.+8      	; 0x41be <__fixunssfsi+0x42>
    41b6:	c8 01       	movw	r24, r16
    41b8:	b7 01       	movw	r22, r14
    41ba:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__fixsfsi>
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	08 95       	ret

000041c8 <_fpadd_parts>:
    41c8:	a0 e0       	ldi	r26, 0x00	; 0
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	ea ee       	ldi	r30, 0xEA	; 234
    41ce:	f0 e2       	ldi	r31, 0x20	; 32
    41d0:	0c 94 0e 28 	jmp	0x501c	; 0x501c <__prologue_saves__+0x4>
    41d4:	2c 01       	movw	r4, r24
    41d6:	5b 01       	movw	r10, r22
    41d8:	fa 01       	movw	r30, r20
    41da:	dc 01       	movw	r26, r24
    41dc:	9c 91       	ld	r25, X
    41de:	92 30       	cpi	r25, 0x02	; 2
    41e0:	08 f4       	brcc	.+2      	; 0x41e4 <_fpadd_parts+0x1c>
    41e2:	32 c1       	rjmp	.+612    	; 0x4448 <_fpadd_parts+0x280>
    41e4:	eb 01       	movw	r28, r22
    41e6:	88 81       	ld	r24, Y
    41e8:	82 30       	cpi	r24, 0x02	; 2
    41ea:	08 f4       	brcc	.+2      	; 0x41ee <_fpadd_parts+0x26>
    41ec:	2c c1       	rjmp	.+600    	; 0x4446 <_fpadd_parts+0x27e>
    41ee:	94 30       	cpi	r25, 0x04	; 4
    41f0:	71 f4       	brne	.+28     	; 0x420e <_fpadd_parts+0x46>
    41f2:	84 30       	cpi	r24, 0x04	; 4
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <_fpadd_parts+0x30>
    41f6:	28 c1       	rjmp	.+592    	; 0x4448 <_fpadd_parts+0x280>
    41f8:	f2 01       	movw	r30, r4
    41fa:	91 81       	ldd	r25, Z+1	; 0x01
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	98 17       	cp	r25, r24
    4200:	09 f4       	brne	.+2      	; 0x4204 <_fpadd_parts+0x3c>
    4202:	22 c1       	rjmp	.+580    	; 0x4448 <_fpadd_parts+0x280>
    4204:	16 e1       	ldi	r17, 0x16	; 22
    4206:	41 2e       	mov	r4, r17
    4208:	12 e0       	ldi	r17, 0x02	; 2
    420a:	51 2e       	mov	r5, r17
    420c:	1d c1       	rjmp	.+570    	; 0x4448 <_fpadd_parts+0x280>
    420e:	84 30       	cpi	r24, 0x04	; 4
    4210:	09 f4       	brne	.+2      	; 0x4214 <_fpadd_parts+0x4c>
    4212:	19 c1       	rjmp	.+562    	; 0x4446 <_fpadd_parts+0x27e>
    4214:	82 30       	cpi	r24, 0x02	; 2
    4216:	a9 f4       	brne	.+42     	; 0x4242 <_fpadd_parts+0x7a>
    4218:	92 30       	cpi	r25, 0x02	; 2
    421a:	09 f0       	breq	.+2      	; 0x421e <_fpadd_parts+0x56>
    421c:	15 c1       	rjmp	.+554    	; 0x4448 <_fpadd_parts+0x280>
    421e:	ca 01       	movw	r24, r20
    4220:	a2 01       	movw	r20, r4
    4222:	28 e0       	ldi	r18, 0x08	; 8
    4224:	da 01       	movw	r26, r20
    4226:	0d 90       	ld	r0, X+
    4228:	ad 01       	movw	r20, r26
    422a:	ec 01       	movw	r28, r24
    422c:	09 92       	st	Y+, r0
    422e:	ce 01       	movw	r24, r28
    4230:	21 50       	subi	r18, 0x01	; 1
    4232:	c1 f7       	brne	.-16     	; 0x4224 <_fpadd_parts+0x5c>
    4234:	e5 01       	movw	r28, r10
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	e2 01       	movw	r28, r4
    423a:	99 81       	ldd	r25, Y+1	; 0x01
    423c:	89 23       	and	r24, r25
    423e:	81 83       	std	Z+1, r24	; 0x01
    4240:	00 c1       	rjmp	.+512    	; 0x4442 <_fpadd_parts+0x27a>
    4242:	92 30       	cpi	r25, 0x02	; 2
    4244:	09 f4       	brne	.+2      	; 0x4248 <_fpadd_parts+0x80>
    4246:	ff c0       	rjmp	.+510    	; 0x4446 <_fpadd_parts+0x27e>
    4248:	e2 01       	movw	r28, r4
    424a:	ca 80       	ldd	r12, Y+2	; 0x02
    424c:	db 80       	ldd	r13, Y+3	; 0x03
    424e:	eb 01       	movw	r28, r22
    4250:	8a 81       	ldd	r24, Y+2	; 0x02
    4252:	9b 81       	ldd	r25, Y+3	; 0x03
    4254:	e2 01       	movw	r28, r4
    4256:	2c 81       	ldd	r18, Y+4	; 0x04
    4258:	3d 81       	ldd	r19, Y+5	; 0x05
    425a:	4e 81       	ldd	r20, Y+6	; 0x06
    425c:	5f 81       	ldd	r21, Y+7	; 0x07
    425e:	eb 01       	movw	r28, r22
    4260:	ec 80       	ldd	r14, Y+4	; 0x04
    4262:	fd 80       	ldd	r15, Y+5	; 0x05
    4264:	0e 81       	ldd	r16, Y+6	; 0x06
    4266:	1f 81       	ldd	r17, Y+7	; 0x07
    4268:	b6 01       	movw	r22, r12
    426a:	68 1b       	sub	r22, r24
    426c:	79 0b       	sbc	r23, r25
    426e:	db 01       	movw	r26, r22
    4270:	77 ff       	sbrs	r23, 7
    4272:	03 c0       	rjmp	.+6      	; 0x427a <_fpadd_parts+0xb2>
    4274:	70 95       	com	r23
    4276:	61 95       	neg	r22
    4278:	7f 4f       	sbci	r23, 0xFF	; 255
    427a:	60 32       	cpi	r22, 0x20	; 32
    427c:	71 05       	cpc	r23, r1
    427e:	0c f0       	brlt	.+2      	; 0x4282 <_fpadd_parts+0xba>
    4280:	5d c0       	rjmp	.+186    	; 0x433c <_fpadd_parts+0x174>
    4282:	1a 16       	cp	r1, r26
    4284:	1b 06       	cpc	r1, r27
    4286:	5c f5       	brge	.+86     	; 0x42de <_fpadd_parts+0x116>
    4288:	66 24       	eor	r6, r6
    428a:	77 24       	eor	r7, r7
    428c:	43 01       	movw	r8, r6
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	a0 e0       	ldi	r26, 0x00	; 0
    4294:	b0 e0       	ldi	r27, 0x00	; 0
    4296:	06 2e       	mov	r0, r22
    4298:	04 c0       	rjmp	.+8      	; 0x42a2 <_fpadd_parts+0xda>
    429a:	88 0f       	add	r24, r24
    429c:	99 1f       	adc	r25, r25
    429e:	aa 1f       	adc	r26, r26
    42a0:	bb 1f       	adc	r27, r27
    42a2:	0a 94       	dec	r0
    42a4:	d2 f7       	brpl	.-12     	; 0x429a <_fpadd_parts+0xd2>
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	a1 09       	sbc	r26, r1
    42aa:	b1 09       	sbc	r27, r1
    42ac:	8e 21       	and	r24, r14
    42ae:	9f 21       	and	r25, r15
    42b0:	a0 23       	and	r26, r16
    42b2:	b1 23       	and	r27, r17
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	a1 05       	cpc	r26, r1
    42b8:	b1 05       	cpc	r27, r1
    42ba:	29 f0       	breq	.+10     	; 0x42c6 <_fpadd_parts+0xfe>
    42bc:	b1 e0       	ldi	r27, 0x01	; 1
    42be:	6b 2e       	mov	r6, r27
    42c0:	71 2c       	mov	r7, r1
    42c2:	81 2c       	mov	r8, r1
    42c4:	91 2c       	mov	r9, r1
    42c6:	04 c0       	rjmp	.+8      	; 0x42d0 <_fpadd_parts+0x108>
    42c8:	16 95       	lsr	r17
    42ca:	07 95       	ror	r16
    42cc:	f7 94       	ror	r15
    42ce:	e7 94       	ror	r14
    42d0:	6a 95       	dec	r22
    42d2:	d2 f7       	brpl	.-12     	; 0x42c8 <_fpadd_parts+0x100>
    42d4:	e6 28       	or	r14, r6
    42d6:	f7 28       	or	r15, r7
    42d8:	08 29       	or	r16, r8
    42da:	19 29       	or	r17, r9
    42dc:	3b c0       	rjmp	.+118    	; 0x4354 <_fpadd_parts+0x18c>
    42de:	ab 2b       	or	r26, r27
    42e0:	c9 f1       	breq	.+114    	; 0x4354 <_fpadd_parts+0x18c>
    42e2:	c6 0e       	add	r12, r22
    42e4:	d7 1e       	adc	r13, r23
    42e6:	66 24       	eor	r6, r6
    42e8:	77 24       	eor	r7, r7
    42ea:	43 01       	movw	r8, r6
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	a0 e0       	ldi	r26, 0x00	; 0
    42f2:	b0 e0       	ldi	r27, 0x00	; 0
    42f4:	06 2e       	mov	r0, r22
    42f6:	04 c0       	rjmp	.+8      	; 0x4300 <_fpadd_parts+0x138>
    42f8:	88 0f       	add	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	aa 1f       	adc	r26, r26
    42fe:	bb 1f       	adc	r27, r27
    4300:	0a 94       	dec	r0
    4302:	d2 f7       	brpl	.-12     	; 0x42f8 <_fpadd_parts+0x130>
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	a1 09       	sbc	r26, r1
    4308:	b1 09       	sbc	r27, r1
    430a:	82 23       	and	r24, r18
    430c:	93 23       	and	r25, r19
    430e:	a4 23       	and	r26, r20
    4310:	b5 23       	and	r27, r21
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	a1 05       	cpc	r26, r1
    4316:	b1 05       	cpc	r27, r1
    4318:	29 f0       	breq	.+10     	; 0x4324 <_fpadd_parts+0x15c>
    431a:	a1 e0       	ldi	r26, 0x01	; 1
    431c:	6a 2e       	mov	r6, r26
    431e:	71 2c       	mov	r7, r1
    4320:	81 2c       	mov	r8, r1
    4322:	91 2c       	mov	r9, r1
    4324:	04 c0       	rjmp	.+8      	; 0x432e <_fpadd_parts+0x166>
    4326:	56 95       	lsr	r21
    4328:	47 95       	ror	r20
    432a:	37 95       	ror	r19
    432c:	27 95       	ror	r18
    432e:	6a 95       	dec	r22
    4330:	d2 f7       	brpl	.-12     	; 0x4326 <_fpadd_parts+0x15e>
    4332:	26 29       	or	r18, r6
    4334:	37 29       	or	r19, r7
    4336:	48 29       	or	r20, r8
    4338:	59 29       	or	r21, r9
    433a:	0c c0       	rjmp	.+24     	; 0x4354 <_fpadd_parts+0x18c>
    433c:	8c 15       	cp	r24, r12
    433e:	9d 05       	cpc	r25, r13
    4340:	34 f0       	brlt	.+12     	; 0x434e <_fpadd_parts+0x186>
    4342:	6c 01       	movw	r12, r24
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	03 c0       	rjmp	.+6      	; 0x4354 <_fpadd_parts+0x18c>
    434e:	ee 24       	eor	r14, r14
    4350:	ff 24       	eor	r15, r15
    4352:	87 01       	movw	r16, r14
    4354:	e2 01       	movw	r28, r4
    4356:	99 81       	ldd	r25, Y+1	; 0x01
    4358:	e5 01       	movw	r28, r10
    435a:	89 81       	ldd	r24, Y+1	; 0x01
    435c:	98 17       	cp	r25, r24
    435e:	09 f4       	brne	.+2      	; 0x4362 <_fpadd_parts+0x19a>
    4360:	43 c0       	rjmp	.+134    	; 0x43e8 <_fpadd_parts+0x220>
    4362:	99 23       	and	r25, r25
    4364:	39 f0       	breq	.+14     	; 0x4374 <_fpadd_parts+0x1ac>
    4366:	e2 1a       	sub	r14, r18
    4368:	f3 0a       	sbc	r15, r19
    436a:	04 0b       	sbc	r16, r20
    436c:	15 0b       	sbc	r17, r21
    436e:	a8 01       	movw	r20, r16
    4370:	97 01       	movw	r18, r14
    4372:	04 c0       	rjmp	.+8      	; 0x437c <_fpadd_parts+0x1b4>
    4374:	2e 19       	sub	r18, r14
    4376:	3f 09       	sbc	r19, r15
    4378:	40 0b       	sbc	r20, r16
    437a:	51 0b       	sbc	r21, r17
    437c:	57 fd       	sbrc	r21, 7
    437e:	08 c0       	rjmp	.+16     	; 0x4390 <_fpadd_parts+0x1c8>
    4380:	11 82       	std	Z+1, r1	; 0x01
    4382:	d3 82       	std	Z+3, r13	; 0x03
    4384:	c2 82       	std	Z+2, r12	; 0x02
    4386:	24 83       	std	Z+4, r18	; 0x04
    4388:	35 83       	std	Z+5, r19	; 0x05
    438a:	46 83       	std	Z+6, r20	; 0x06
    438c:	57 83       	std	Z+7, r21	; 0x07
    438e:	1d c0       	rjmp	.+58     	; 0x43ca <_fpadd_parts+0x202>
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	81 83       	std	Z+1, r24	; 0x01
    4394:	d3 82       	std	Z+3, r13	; 0x03
    4396:	c2 82       	std	Z+2, r12	; 0x02
    4398:	88 27       	eor	r24, r24
    439a:	99 27       	eor	r25, r25
    439c:	dc 01       	movw	r26, r24
    439e:	82 1b       	sub	r24, r18
    43a0:	93 0b       	sbc	r25, r19
    43a2:	a4 0b       	sbc	r26, r20
    43a4:	b5 0b       	sbc	r27, r21
    43a6:	84 83       	std	Z+4, r24	; 0x04
    43a8:	95 83       	std	Z+5, r25	; 0x05
    43aa:	a6 83       	std	Z+6, r26	; 0x06
    43ac:	b7 83       	std	Z+7, r27	; 0x07
    43ae:	0d c0       	rjmp	.+26     	; 0x43ca <_fpadd_parts+0x202>
    43b0:	22 0f       	add	r18, r18
    43b2:	33 1f       	adc	r19, r19
    43b4:	44 1f       	adc	r20, r20
    43b6:	55 1f       	adc	r21, r21
    43b8:	24 83       	std	Z+4, r18	; 0x04
    43ba:	35 83       	std	Z+5, r19	; 0x05
    43bc:	46 83       	std	Z+6, r20	; 0x06
    43be:	57 83       	std	Z+7, r21	; 0x07
    43c0:	82 81       	ldd	r24, Z+2	; 0x02
    43c2:	93 81       	ldd	r25, Z+3	; 0x03
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	93 83       	std	Z+3, r25	; 0x03
    43c8:	82 83       	std	Z+2, r24	; 0x02
    43ca:	24 81       	ldd	r18, Z+4	; 0x04
    43cc:	35 81       	ldd	r19, Z+5	; 0x05
    43ce:	46 81       	ldd	r20, Z+6	; 0x06
    43d0:	57 81       	ldd	r21, Z+7	; 0x07
    43d2:	da 01       	movw	r26, r20
    43d4:	c9 01       	movw	r24, r18
    43d6:	01 97       	sbiw	r24, 0x01	; 1
    43d8:	a1 09       	sbc	r26, r1
    43da:	b1 09       	sbc	r27, r1
    43dc:	8f 5f       	subi	r24, 0xFF	; 255
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	af 4f       	sbci	r26, 0xFF	; 255
    43e2:	bf 43       	sbci	r27, 0x3F	; 63
    43e4:	28 f3       	brcs	.-54     	; 0x43b0 <_fpadd_parts+0x1e8>
    43e6:	0b c0       	rjmp	.+22     	; 0x43fe <_fpadd_parts+0x236>
    43e8:	91 83       	std	Z+1, r25	; 0x01
    43ea:	d3 82       	std	Z+3, r13	; 0x03
    43ec:	c2 82       	std	Z+2, r12	; 0x02
    43ee:	2e 0d       	add	r18, r14
    43f0:	3f 1d       	adc	r19, r15
    43f2:	40 1f       	adc	r20, r16
    43f4:	51 1f       	adc	r21, r17
    43f6:	24 83       	std	Z+4, r18	; 0x04
    43f8:	35 83       	std	Z+5, r19	; 0x05
    43fa:	46 83       	std	Z+6, r20	; 0x06
    43fc:	57 83       	std	Z+7, r21	; 0x07
    43fe:	83 e0       	ldi	r24, 0x03	; 3
    4400:	80 83       	st	Z, r24
    4402:	24 81       	ldd	r18, Z+4	; 0x04
    4404:	35 81       	ldd	r19, Z+5	; 0x05
    4406:	46 81       	ldd	r20, Z+6	; 0x06
    4408:	57 81       	ldd	r21, Z+7	; 0x07
    440a:	55 23       	and	r21, r21
    440c:	d4 f4       	brge	.+52     	; 0x4442 <_fpadd_parts+0x27a>
    440e:	c9 01       	movw	r24, r18
    4410:	aa 27       	eor	r26, r26
    4412:	97 fd       	sbrc	r25, 7
    4414:	a0 95       	com	r26
    4416:	ba 2f       	mov	r27, r26
    4418:	81 70       	andi	r24, 0x01	; 1
    441a:	90 70       	andi	r25, 0x00	; 0
    441c:	a0 70       	andi	r26, 0x00	; 0
    441e:	b0 70       	andi	r27, 0x00	; 0
    4420:	56 95       	lsr	r21
    4422:	47 95       	ror	r20
    4424:	37 95       	ror	r19
    4426:	27 95       	ror	r18
    4428:	82 2b       	or	r24, r18
    442a:	93 2b       	or	r25, r19
    442c:	a4 2b       	or	r26, r20
    442e:	b5 2b       	or	r27, r21
    4430:	84 83       	std	Z+4, r24	; 0x04
    4432:	95 83       	std	Z+5, r25	; 0x05
    4434:	a6 83       	std	Z+6, r26	; 0x06
    4436:	b7 83       	std	Z+7, r27	; 0x07
    4438:	82 81       	ldd	r24, Z+2	; 0x02
    443a:	93 81       	ldd	r25, Z+3	; 0x03
    443c:	01 96       	adiw	r24, 0x01	; 1
    443e:	93 83       	std	Z+3, r25	; 0x03
    4440:	82 83       	std	Z+2, r24	; 0x02
    4442:	2f 01       	movw	r4, r30
    4444:	01 c0       	rjmp	.+2      	; 0x4448 <_fpadd_parts+0x280>
    4446:	25 01       	movw	r4, r10
    4448:	c2 01       	movw	r24, r4
    444a:	e0 e1       	ldi	r30, 0x10	; 16
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	0c 94 2a 28 	jmp	0x5054	; 0x5054 <__epilogue_restores__+0x4>

00004454 <__subsf3>:
    4454:	a0 e2       	ldi	r26, 0x20	; 32
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	e0 e3       	ldi	r30, 0x30	; 48
    445a:	f2 e2       	ldi	r31, 0x22	; 34
    445c:	0c 94 18 28 	jmp	0x5030	; 0x5030 <__prologue_saves__+0x18>
    4460:	69 83       	std	Y+1, r22	; 0x01
    4462:	7a 83       	std	Y+2, r23	; 0x02
    4464:	8b 83       	std	Y+3, r24	; 0x03
    4466:	9c 83       	std	Y+4, r25	; 0x04
    4468:	2d 83       	std	Y+5, r18	; 0x05
    446a:	3e 83       	std	Y+6, r19	; 0x06
    446c:	4f 83       	std	Y+7, r20	; 0x07
    446e:	58 87       	std	Y+8, r21	; 0x08
    4470:	09 e0       	ldi	r16, 0x09	; 9
    4472:	e0 2e       	mov	r14, r16
    4474:	f1 2c       	mov	r15, r1
    4476:	ec 0e       	add	r14, r28
    4478:	fd 1e       	adc	r15, r29
    447a:	b7 01       	movw	r22, r14
    447c:	ce 01       	movw	r24, r28
    447e:	01 96       	adiw	r24, 0x01	; 1
    4480:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    4484:	8e 01       	movw	r16, r28
    4486:	0f 5e       	subi	r16, 0xEF	; 239
    4488:	1f 4f       	sbci	r17, 0xFF	; 255
    448a:	b8 01       	movw	r22, r16
    448c:	ce 01       	movw	r24, r28
    448e:	05 96       	adiw	r24, 0x05	; 5
    4490:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    4494:	8a 89       	ldd	r24, Y+18	; 0x12
    4496:	91 e0       	ldi	r25, 0x01	; 1
    4498:	89 27       	eor	r24, r25
    449a:	8a 8b       	std	Y+18, r24	; 0x12
    449c:	ae 01       	movw	r20, r28
    449e:	47 5e       	subi	r20, 0xE7	; 231
    44a0:	5f 4f       	sbci	r21, 0xFF	; 255
    44a2:	b8 01       	movw	r22, r16
    44a4:	c7 01       	movw	r24, r14
    44a6:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_fpadd_parts>
    44aa:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__pack_f>
    44ae:	e6 e0       	ldi	r30, 0x06	; 6
    44b0:	a0 96       	adiw	r28, 0x20	; 32
    44b2:	0c 94 34 28 	jmp	0x5068	; 0x5068 <__epilogue_restores__+0x18>

000044b6 <__addsf3>:
    44b6:	a0 e2       	ldi	r26, 0x20	; 32
    44b8:	b0 e0       	ldi	r27, 0x00	; 0
    44ba:	e1 e6       	ldi	r30, 0x61	; 97
    44bc:	f2 e2       	ldi	r31, 0x22	; 34
    44be:	0c 94 18 28 	jmp	0x5030	; 0x5030 <__prologue_saves__+0x18>
    44c2:	69 83       	std	Y+1, r22	; 0x01
    44c4:	7a 83       	std	Y+2, r23	; 0x02
    44c6:	8b 83       	std	Y+3, r24	; 0x03
    44c8:	9c 83       	std	Y+4, r25	; 0x04
    44ca:	2d 83       	std	Y+5, r18	; 0x05
    44cc:	3e 83       	std	Y+6, r19	; 0x06
    44ce:	4f 83       	std	Y+7, r20	; 0x07
    44d0:	58 87       	std	Y+8, r21	; 0x08
    44d2:	89 e0       	ldi	r24, 0x09	; 9
    44d4:	e8 2e       	mov	r14, r24
    44d6:	f1 2c       	mov	r15, r1
    44d8:	ec 0e       	add	r14, r28
    44da:	fd 1e       	adc	r15, r29
    44dc:	b7 01       	movw	r22, r14
    44de:	ce 01       	movw	r24, r28
    44e0:	01 96       	adiw	r24, 0x01	; 1
    44e2:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    44e6:	8e 01       	movw	r16, r28
    44e8:	0f 5e       	subi	r16, 0xEF	; 239
    44ea:	1f 4f       	sbci	r17, 0xFF	; 255
    44ec:	b8 01       	movw	r22, r16
    44ee:	ce 01       	movw	r24, r28
    44f0:	05 96       	adiw	r24, 0x05	; 5
    44f2:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    44f6:	ae 01       	movw	r20, r28
    44f8:	47 5e       	subi	r20, 0xE7	; 231
    44fa:	5f 4f       	sbci	r21, 0xFF	; 255
    44fc:	b8 01       	movw	r22, r16
    44fe:	c7 01       	movw	r24, r14
    4500:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_fpadd_parts>
    4504:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__pack_f>
    4508:	e6 e0       	ldi	r30, 0x06	; 6
    450a:	a0 96       	adiw	r28, 0x20	; 32
    450c:	0c 94 34 28 	jmp	0x5068	; 0x5068 <__epilogue_restores__+0x18>

00004510 <__mulsf3>:
    4510:	a0 e2       	ldi	r26, 0x20	; 32
    4512:	b0 e0       	ldi	r27, 0x00	; 0
    4514:	ee e8       	ldi	r30, 0x8E	; 142
    4516:	f2 e2       	ldi	r31, 0x22	; 34
    4518:	0c 94 0e 28 	jmp	0x501c	; 0x501c <__prologue_saves__+0x4>
    451c:	69 83       	std	Y+1, r22	; 0x01
    451e:	7a 83       	std	Y+2, r23	; 0x02
    4520:	8b 83       	std	Y+3, r24	; 0x03
    4522:	9c 83       	std	Y+4, r25	; 0x04
    4524:	2d 83       	std	Y+5, r18	; 0x05
    4526:	3e 83       	std	Y+6, r19	; 0x06
    4528:	4f 83       	std	Y+7, r20	; 0x07
    452a:	58 87       	std	Y+8, r21	; 0x08
    452c:	99 e0       	ldi	r25, 0x09	; 9
    452e:	e9 2e       	mov	r14, r25
    4530:	f1 2c       	mov	r15, r1
    4532:	ec 0e       	add	r14, r28
    4534:	fd 1e       	adc	r15, r29
    4536:	b7 01       	movw	r22, r14
    4538:	ce 01       	movw	r24, r28
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    4540:	8e 01       	movw	r16, r28
    4542:	0f 5e       	subi	r16, 0xEF	; 239
    4544:	1f 4f       	sbci	r17, 0xFF	; 255
    4546:	b8 01       	movw	r22, r16
    4548:	ce 01       	movw	r24, r28
    454a:	05 96       	adiw	r24, 0x05	; 5
    454c:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    4550:	99 85       	ldd	r25, Y+9	; 0x09
    4552:	92 30       	cpi	r25, 0x02	; 2
    4554:	88 f0       	brcs	.+34     	; 0x4578 <__mulsf3+0x68>
    4556:	89 89       	ldd	r24, Y+17	; 0x11
    4558:	82 30       	cpi	r24, 0x02	; 2
    455a:	c0 f0       	brcs	.+48     	; 0x458c <__mulsf3+0x7c>
    455c:	94 30       	cpi	r25, 0x04	; 4
    455e:	19 f4       	brne	.+6      	; 0x4566 <__mulsf3+0x56>
    4560:	82 30       	cpi	r24, 0x02	; 2
    4562:	29 f0       	breq	.+10     	; 0x456e <__mulsf3+0x5e>
    4564:	09 c0       	rjmp	.+18     	; 0x4578 <__mulsf3+0x68>
    4566:	84 30       	cpi	r24, 0x04	; 4
    4568:	29 f4       	brne	.+10     	; 0x4574 <__mulsf3+0x64>
    456a:	92 30       	cpi	r25, 0x02	; 2
    456c:	79 f4       	brne	.+30     	; 0x458c <__mulsf3+0x7c>
    456e:	66 e1       	ldi	r22, 0x16	; 22
    4570:	72 e0       	ldi	r23, 0x02	; 2
    4572:	c6 c0       	rjmp	.+396    	; 0x4700 <__mulsf3+0x1f0>
    4574:	92 30       	cpi	r25, 0x02	; 2
    4576:	41 f4       	brne	.+16     	; 0x4588 <__mulsf3+0x78>
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	9a 85       	ldd	r25, Y+10	; 0x0a
    457c:	8a 89       	ldd	r24, Y+18	; 0x12
    457e:	98 13       	cpse	r25, r24
    4580:	21 e0       	ldi	r18, 0x01	; 1
    4582:	2a 87       	std	Y+10, r18	; 0x0a
    4584:	b7 01       	movw	r22, r14
    4586:	bc c0       	rjmp	.+376    	; 0x4700 <__mulsf3+0x1f0>
    4588:	82 30       	cpi	r24, 0x02	; 2
    458a:	41 f4       	brne	.+16     	; 0x459c <__mulsf3+0x8c>
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4590:	8a 89       	ldd	r24, Y+18	; 0x12
    4592:	98 13       	cpse	r25, r24
    4594:	21 e0       	ldi	r18, 0x01	; 1
    4596:	2a 8b       	std	Y+18, r18	; 0x12
    4598:	b8 01       	movw	r22, r16
    459a:	b2 c0       	rjmp	.+356    	; 0x4700 <__mulsf3+0x1f0>
    459c:	cd 84       	ldd	r12, Y+13	; 0x0d
    459e:	de 84       	ldd	r13, Y+14	; 0x0e
    45a0:	ef 84       	ldd	r14, Y+15	; 0x0f
    45a2:	f8 88       	ldd	r15, Y+16	; 0x10
    45a4:	0d 89       	ldd	r16, Y+21	; 0x15
    45a6:	1e 89       	ldd	r17, Y+22	; 0x16
    45a8:	2f 89       	ldd	r18, Y+23	; 0x17
    45aa:	38 8d       	ldd	r19, Y+24	; 0x18
    45ac:	88 24       	eor	r8, r8
    45ae:	99 24       	eor	r9, r9
    45b0:	54 01       	movw	r10, r8
    45b2:	40 e0       	ldi	r20, 0x00	; 0
    45b4:	50 e0       	ldi	r21, 0x00	; 0
    45b6:	60 e0       	ldi	r22, 0x00	; 0
    45b8:	70 e0       	ldi	r23, 0x00	; 0
    45ba:	44 24       	eor	r4, r4
    45bc:	55 24       	eor	r5, r5
    45be:	32 01       	movw	r6, r4
    45c0:	e0 e0       	ldi	r30, 0x00	; 0
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	c6 01       	movw	r24, r12
    45c6:	81 70       	andi	r24, 0x01	; 1
    45c8:	90 70       	andi	r25, 0x00	; 0
    45ca:	89 2b       	or	r24, r25
    45cc:	d9 f0       	breq	.+54     	; 0x4604 <__mulsf3+0xf4>
    45ce:	80 0e       	add	r8, r16
    45d0:	91 1e       	adc	r9, r17
    45d2:	a2 1e       	adc	r10, r18
    45d4:	b3 1e       	adc	r11, r19
    45d6:	db 01       	movw	r26, r22
    45d8:	ca 01       	movw	r24, r20
    45da:	84 0d       	add	r24, r4
    45dc:	95 1d       	adc	r25, r5
    45de:	a6 1d       	adc	r26, r6
    45e0:	b7 1d       	adc	r27, r7
    45e2:	40 e0       	ldi	r20, 0x00	; 0
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	60 e0       	ldi	r22, 0x00	; 0
    45e8:	70 e0       	ldi	r23, 0x00	; 0
    45ea:	80 16       	cp	r8, r16
    45ec:	91 06       	cpc	r9, r17
    45ee:	a2 06       	cpc	r10, r18
    45f0:	b3 06       	cpc	r11, r19
    45f2:	20 f4       	brcc	.+8      	; 0x45fc <__mulsf3+0xec>
    45f4:	41 e0       	ldi	r20, 0x01	; 1
    45f6:	50 e0       	ldi	r21, 0x00	; 0
    45f8:	60 e0       	ldi	r22, 0x00	; 0
    45fa:	70 e0       	ldi	r23, 0x00	; 0
    45fc:	48 0f       	add	r20, r24
    45fe:	59 1f       	adc	r21, r25
    4600:	6a 1f       	adc	r22, r26
    4602:	7b 1f       	adc	r23, r27
    4604:	44 0c       	add	r4, r4
    4606:	55 1c       	adc	r5, r5
    4608:	66 1c       	adc	r6, r6
    460a:	77 1c       	adc	r7, r7
    460c:	37 ff       	sbrs	r19, 7
    460e:	08 c0       	rjmp	.+16     	; 0x4620 <__mulsf3+0x110>
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	a0 e0       	ldi	r26, 0x00	; 0
    4616:	b0 e0       	ldi	r27, 0x00	; 0
    4618:	48 2a       	or	r4, r24
    461a:	59 2a       	or	r5, r25
    461c:	6a 2a       	or	r6, r26
    461e:	7b 2a       	or	r7, r27
    4620:	31 96       	adiw	r30, 0x01	; 1
    4622:	e0 32       	cpi	r30, 0x20	; 32
    4624:	f1 05       	cpc	r31, r1
    4626:	49 f0       	breq	.+18     	; 0x463a <__mulsf3+0x12a>
    4628:	00 0f       	add	r16, r16
    462a:	11 1f       	adc	r17, r17
    462c:	22 1f       	adc	r18, r18
    462e:	33 1f       	adc	r19, r19
    4630:	f6 94       	lsr	r15
    4632:	e7 94       	ror	r14
    4634:	d7 94       	ror	r13
    4636:	c7 94       	ror	r12
    4638:	c5 cf       	rjmp	.-118    	; 0x45c4 <__mulsf3+0xb4>
    463a:	8b 89       	ldd	r24, Y+19	; 0x13
    463c:	9c 89       	ldd	r25, Y+20	; 0x14
    463e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4640:	3c 85       	ldd	r19, Y+12	; 0x0c
    4642:	82 0f       	add	r24, r18
    4644:	93 1f       	adc	r25, r19
    4646:	02 96       	adiw	r24, 0x02	; 2
    4648:	9c 8f       	std	Y+28, r25	; 0x1c
    464a:	8b 8f       	std	Y+27, r24	; 0x1b
    464c:	1a 8e       	std	Y+26, r1	; 0x1a
    464e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4650:	8a 89       	ldd	r24, Y+18	; 0x12
    4652:	98 17       	cp	r25, r24
    4654:	11 f0       	breq	.+4      	; 0x465a <__mulsf3+0x14a>
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	8a 8f       	std	Y+26, r24	; 0x1a
    465a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    465c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    465e:	17 c0       	rjmp	.+46     	; 0x468e <__mulsf3+0x17e>
    4660:	ca 01       	movw	r24, r20
    4662:	81 70       	andi	r24, 0x01	; 1
    4664:	90 70       	andi	r25, 0x00	; 0
    4666:	89 2b       	or	r24, r25
    4668:	61 f0       	breq	.+24     	; 0x4682 <__mulsf3+0x172>
    466a:	b6 94       	lsr	r11
    466c:	a7 94       	ror	r10
    466e:	97 94       	ror	r9
    4670:	87 94       	ror	r8
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	a0 e0       	ldi	r26, 0x00	; 0
    4678:	b0 e8       	ldi	r27, 0x80	; 128
    467a:	88 2a       	or	r8, r24
    467c:	99 2a       	or	r9, r25
    467e:	aa 2a       	or	r10, r26
    4680:	bb 2a       	or	r11, r27
    4682:	76 95       	lsr	r23
    4684:	67 95       	ror	r22
    4686:	57 95       	ror	r21
    4688:	47 95       	ror	r20
    468a:	2f 5f       	subi	r18, 0xFF	; 255
    468c:	3f 4f       	sbci	r19, 0xFF	; 255
    468e:	77 fd       	sbrc	r23, 7
    4690:	e7 cf       	rjmp	.-50     	; 0x4660 <__mulsf3+0x150>
    4692:	c9 01       	movw	r24, r18
    4694:	0b c0       	rjmp	.+22     	; 0x46ac <__mulsf3+0x19c>
    4696:	44 0f       	add	r20, r20
    4698:	55 1f       	adc	r21, r21
    469a:	66 1f       	adc	r22, r22
    469c:	77 1f       	adc	r23, r23
    469e:	b7 fc       	sbrc	r11, 7
    46a0:	41 60       	ori	r20, 0x01	; 1
    46a2:	88 0c       	add	r8, r8
    46a4:	99 1c       	adc	r9, r9
    46a6:	aa 1c       	adc	r10, r10
    46a8:	bb 1c       	adc	r11, r11
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	40 30       	cpi	r20, 0x00	; 0
    46ae:	a0 e0       	ldi	r26, 0x00	; 0
    46b0:	5a 07       	cpc	r21, r26
    46b2:	a0 e0       	ldi	r26, 0x00	; 0
    46b4:	6a 07       	cpc	r22, r26
    46b6:	a0 e4       	ldi	r26, 0x40	; 64
    46b8:	7a 07       	cpc	r23, r26
    46ba:	68 f3       	brcs	.-38     	; 0x4696 <__mulsf3+0x186>
    46bc:	9c 8f       	std	Y+28, r25	; 0x1c
    46be:	8b 8f       	std	Y+27, r24	; 0x1b
    46c0:	db 01       	movw	r26, r22
    46c2:	ca 01       	movw	r24, r20
    46c4:	8f 77       	andi	r24, 0x7F	; 127
    46c6:	90 70       	andi	r25, 0x00	; 0
    46c8:	a0 70       	andi	r26, 0x00	; 0
    46ca:	b0 70       	andi	r27, 0x00	; 0
    46cc:	80 34       	cpi	r24, 0x40	; 64
    46ce:	91 05       	cpc	r25, r1
    46d0:	a1 05       	cpc	r26, r1
    46d2:	b1 05       	cpc	r27, r1
    46d4:	61 f4       	brne	.+24     	; 0x46ee <__mulsf3+0x1de>
    46d6:	47 fd       	sbrc	r20, 7
    46d8:	0a c0       	rjmp	.+20     	; 0x46ee <__mulsf3+0x1de>
    46da:	81 14       	cp	r8, r1
    46dc:	91 04       	cpc	r9, r1
    46de:	a1 04       	cpc	r10, r1
    46e0:	b1 04       	cpc	r11, r1
    46e2:	29 f0       	breq	.+10     	; 0x46ee <__mulsf3+0x1de>
    46e4:	40 5c       	subi	r20, 0xC0	; 192
    46e6:	5f 4f       	sbci	r21, 0xFF	; 255
    46e8:	6f 4f       	sbci	r22, 0xFF	; 255
    46ea:	7f 4f       	sbci	r23, 0xFF	; 255
    46ec:	40 78       	andi	r20, 0x80	; 128
    46ee:	4d 8f       	std	Y+29, r20	; 0x1d
    46f0:	5e 8f       	std	Y+30, r21	; 0x1e
    46f2:	6f 8f       	std	Y+31, r22	; 0x1f
    46f4:	78 a3       	std	Y+32, r23	; 0x20
    46f6:	83 e0       	ldi	r24, 0x03	; 3
    46f8:	89 8f       	std	Y+25, r24	; 0x19
    46fa:	be 01       	movw	r22, r28
    46fc:	67 5e       	subi	r22, 0xE7	; 231
    46fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4700:	cb 01       	movw	r24, r22
    4702:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__pack_f>
    4706:	e0 e1       	ldi	r30, 0x10	; 16
    4708:	a0 96       	adiw	r28, 0x20	; 32
    470a:	0c 94 2a 28 	jmp	0x5054	; 0x5054 <__epilogue_restores__+0x4>

0000470e <__divsf3>:
    470e:	a8 e1       	ldi	r26, 0x18	; 24
    4710:	b0 e0       	ldi	r27, 0x00	; 0
    4712:	ed e8       	ldi	r30, 0x8D	; 141
    4714:	f3 e2       	ldi	r31, 0x23	; 35
    4716:	0c 94 14 28 	jmp	0x5028	; 0x5028 <__prologue_saves__+0x10>
    471a:	69 83       	std	Y+1, r22	; 0x01
    471c:	7a 83       	std	Y+2, r23	; 0x02
    471e:	8b 83       	std	Y+3, r24	; 0x03
    4720:	9c 83       	std	Y+4, r25	; 0x04
    4722:	2d 83       	std	Y+5, r18	; 0x05
    4724:	3e 83       	std	Y+6, r19	; 0x06
    4726:	4f 83       	std	Y+7, r20	; 0x07
    4728:	58 87       	std	Y+8, r21	; 0x08
    472a:	8e 01       	movw	r16, r28
    472c:	07 5f       	subi	r16, 0xF7	; 247
    472e:	1f 4f       	sbci	r17, 0xFF	; 255
    4730:	b8 01       	movw	r22, r16
    4732:	ce 01       	movw	r24, r28
    4734:	01 96       	adiw	r24, 0x01	; 1
    4736:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    473a:	81 e1       	ldi	r24, 0x11	; 17
    473c:	e8 2e       	mov	r14, r24
    473e:	f1 2c       	mov	r15, r1
    4740:	ec 0e       	add	r14, r28
    4742:	fd 1e       	adc	r15, r29
    4744:	b7 01       	movw	r22, r14
    4746:	ce 01       	movw	r24, r28
    4748:	05 96       	adiw	r24, 0x05	; 5
    474a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    474e:	39 85       	ldd	r19, Y+9	; 0x09
    4750:	32 30       	cpi	r19, 0x02	; 2
    4752:	f8 f0       	brcs	.+62     	; 0x4792 <__divsf3+0x84>
    4754:	29 89       	ldd	r18, Y+17	; 0x11
    4756:	22 30       	cpi	r18, 0x02	; 2
    4758:	10 f4       	brcc	.+4      	; 0x475e <__divsf3+0x50>
    475a:	b7 01       	movw	r22, r14
    475c:	86 c0       	rjmp	.+268    	; 0x486a <__divsf3+0x15c>
    475e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4760:	9a 89       	ldd	r25, Y+18	; 0x12
    4762:	89 27       	eor	r24, r25
    4764:	8a 87       	std	Y+10, r24	; 0x0a
    4766:	34 30       	cpi	r19, 0x04	; 4
    4768:	11 f0       	breq	.+4      	; 0x476e <__divsf3+0x60>
    476a:	32 30       	cpi	r19, 0x02	; 2
    476c:	29 f4       	brne	.+10     	; 0x4778 <__divsf3+0x6a>
    476e:	32 17       	cp	r19, r18
    4770:	81 f4       	brne	.+32     	; 0x4792 <__divsf3+0x84>
    4772:	66 e1       	ldi	r22, 0x16	; 22
    4774:	72 e0       	ldi	r23, 0x02	; 2
    4776:	79 c0       	rjmp	.+242    	; 0x486a <__divsf3+0x15c>
    4778:	24 30       	cpi	r18, 0x04	; 4
    477a:	39 f4       	brne	.+14     	; 0x478a <__divsf3+0x7c>
    477c:	1d 86       	std	Y+13, r1	; 0x0d
    477e:	1e 86       	std	Y+14, r1	; 0x0e
    4780:	1f 86       	std	Y+15, r1	; 0x0f
    4782:	18 8a       	std	Y+16, r1	; 0x10
    4784:	1c 86       	std	Y+12, r1	; 0x0c
    4786:	1b 86       	std	Y+11, r1	; 0x0b
    4788:	04 c0       	rjmp	.+8      	; 0x4792 <__divsf3+0x84>
    478a:	22 30       	cpi	r18, 0x02	; 2
    478c:	21 f4       	brne	.+8      	; 0x4796 <__divsf3+0x88>
    478e:	84 e0       	ldi	r24, 0x04	; 4
    4790:	89 87       	std	Y+9, r24	; 0x09
    4792:	b8 01       	movw	r22, r16
    4794:	6a c0       	rjmp	.+212    	; 0x486a <__divsf3+0x15c>
    4796:	6b 85       	ldd	r22, Y+11	; 0x0b
    4798:	7c 85       	ldd	r23, Y+12	; 0x0c
    479a:	8b 89       	ldd	r24, Y+19	; 0x13
    479c:	9c 89       	ldd	r25, Y+20	; 0x14
    479e:	68 1b       	sub	r22, r24
    47a0:	79 0b       	sbc	r23, r25
    47a2:	7c 87       	std	Y+12, r23	; 0x0c
    47a4:	6b 87       	std	Y+11, r22	; 0x0b
    47a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    47a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    47aa:	4f 85       	ldd	r20, Y+15	; 0x0f
    47ac:	58 89       	ldd	r21, Y+16	; 0x10
    47ae:	8d 89       	ldd	r24, Y+21	; 0x15
    47b0:	9e 89       	ldd	r25, Y+22	; 0x16
    47b2:	af 89       	ldd	r26, Y+23	; 0x17
    47b4:	b8 8d       	ldd	r27, Y+24	; 0x18
    47b6:	28 17       	cp	r18, r24
    47b8:	39 07       	cpc	r19, r25
    47ba:	4a 07       	cpc	r20, r26
    47bc:	5b 07       	cpc	r21, r27
    47be:	40 f4       	brcc	.+16     	; 0x47d0 <__divsf3+0xc2>
    47c0:	22 0f       	add	r18, r18
    47c2:	33 1f       	adc	r19, r19
    47c4:	44 1f       	adc	r20, r20
    47c6:	55 1f       	adc	r21, r21
    47c8:	61 50       	subi	r22, 0x01	; 1
    47ca:	70 40       	sbci	r23, 0x00	; 0
    47cc:	7c 87       	std	Y+12, r23	; 0x0c
    47ce:	6b 87       	std	Y+11, r22	; 0x0b
    47d0:	a1 2c       	mov	r10, r1
    47d2:	b1 2c       	mov	r11, r1
    47d4:	c1 2c       	mov	r12, r1
    47d6:	10 e4       	ldi	r17, 0x40	; 64
    47d8:	d1 2e       	mov	r13, r17
    47da:	ee 24       	eor	r14, r14
    47dc:	ff 24       	eor	r15, r15
    47de:	87 01       	movw	r16, r14
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	28 17       	cp	r18, r24
    47e6:	39 07       	cpc	r19, r25
    47e8:	4a 07       	cpc	r20, r26
    47ea:	5b 07       	cpc	r21, r27
    47ec:	40 f0       	brcs	.+16     	; 0x47fe <__divsf3+0xf0>
    47ee:	ea 28       	or	r14, r10
    47f0:	fb 28       	or	r15, r11
    47f2:	0c 29       	or	r16, r12
    47f4:	1d 29       	or	r17, r13
    47f6:	28 1b       	sub	r18, r24
    47f8:	39 0b       	sbc	r19, r25
    47fa:	4a 0b       	sbc	r20, r26
    47fc:	5b 0b       	sbc	r21, r27
    47fe:	d6 94       	lsr	r13
    4800:	c7 94       	ror	r12
    4802:	b7 94       	ror	r11
    4804:	a7 94       	ror	r10
    4806:	22 0f       	add	r18, r18
    4808:	33 1f       	adc	r19, r19
    480a:	44 1f       	adc	r20, r20
    480c:	55 1f       	adc	r21, r21
    480e:	6f 5f       	subi	r22, 0xFF	; 255
    4810:	7f 4f       	sbci	r23, 0xFF	; 255
    4812:	6f 31       	cpi	r22, 0x1F	; 31
    4814:	71 05       	cpc	r23, r1
    4816:	31 f7       	brne	.-52     	; 0x47e4 <__divsf3+0xd6>
    4818:	d8 01       	movw	r26, r16
    481a:	c7 01       	movw	r24, r14
    481c:	8f 77       	andi	r24, 0x7F	; 127
    481e:	90 70       	andi	r25, 0x00	; 0
    4820:	a0 70       	andi	r26, 0x00	; 0
    4822:	b0 70       	andi	r27, 0x00	; 0
    4824:	80 34       	cpi	r24, 0x40	; 64
    4826:	91 05       	cpc	r25, r1
    4828:	a1 05       	cpc	r26, r1
    482a:	b1 05       	cpc	r27, r1
    482c:	b9 f4       	brne	.+46     	; 0x485c <__divsf3+0x14e>
    482e:	e7 fc       	sbrc	r14, 7
    4830:	15 c0       	rjmp	.+42     	; 0x485c <__divsf3+0x14e>
    4832:	21 15       	cp	r18, r1
    4834:	31 05       	cpc	r19, r1
    4836:	41 05       	cpc	r20, r1
    4838:	51 05       	cpc	r21, r1
    483a:	81 f0       	breq	.+32     	; 0x485c <__divsf3+0x14e>
    483c:	80 e4       	ldi	r24, 0x40	; 64
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	a0 e0       	ldi	r26, 0x00	; 0
    4842:	b0 e0       	ldi	r27, 0x00	; 0
    4844:	e8 0e       	add	r14, r24
    4846:	f9 1e       	adc	r15, r25
    4848:	0a 1f       	adc	r16, r26
    484a:	1b 1f       	adc	r17, r27
    484c:	80 e8       	ldi	r24, 0x80	; 128
    484e:	9f ef       	ldi	r25, 0xFF	; 255
    4850:	af ef       	ldi	r26, 0xFF	; 255
    4852:	bf ef       	ldi	r27, 0xFF	; 255
    4854:	e8 22       	and	r14, r24
    4856:	f9 22       	and	r15, r25
    4858:	0a 23       	and	r16, r26
    485a:	1b 23       	and	r17, r27
    485c:	ed 86       	std	Y+13, r14	; 0x0d
    485e:	fe 86       	std	Y+14, r15	; 0x0e
    4860:	0f 87       	std	Y+15, r16	; 0x0f
    4862:	18 8b       	std	Y+16, r17	; 0x10
    4864:	be 01       	movw	r22, r28
    4866:	67 5f       	subi	r22, 0xF7	; 247
    4868:	7f 4f       	sbci	r23, 0xFF	; 255
    486a:	cb 01       	movw	r24, r22
    486c:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__pack_f>
    4870:	ea e0       	ldi	r30, 0x0A	; 10
    4872:	68 96       	adiw	r28, 0x18	; 24
    4874:	0c 94 30 28 	jmp	0x5060	; 0x5060 <__epilogue_restores__+0x10>

00004878 <__gesf2>:
    4878:	a8 e1       	ldi	r26, 0x18	; 24
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	e2 e4       	ldi	r30, 0x42	; 66
    487e:	f4 e2       	ldi	r31, 0x24	; 36
    4880:	0c 94 18 28 	jmp	0x5030	; 0x5030 <__prologue_saves__+0x18>
    4884:	69 83       	std	Y+1, r22	; 0x01
    4886:	7a 83       	std	Y+2, r23	; 0x02
    4888:	8b 83       	std	Y+3, r24	; 0x03
    488a:	9c 83       	std	Y+4, r25	; 0x04
    488c:	2d 83       	std	Y+5, r18	; 0x05
    488e:	3e 83       	std	Y+6, r19	; 0x06
    4890:	4f 83       	std	Y+7, r20	; 0x07
    4892:	58 87       	std	Y+8, r21	; 0x08
    4894:	89 e0       	ldi	r24, 0x09	; 9
    4896:	e8 2e       	mov	r14, r24
    4898:	f1 2c       	mov	r15, r1
    489a:	ec 0e       	add	r14, r28
    489c:	fd 1e       	adc	r15, r29
    489e:	b7 01       	movw	r22, r14
    48a0:	ce 01       	movw	r24, r28
    48a2:	01 96       	adiw	r24, 0x01	; 1
    48a4:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    48a8:	8e 01       	movw	r16, r28
    48aa:	0f 5e       	subi	r16, 0xEF	; 239
    48ac:	1f 4f       	sbci	r17, 0xFF	; 255
    48ae:	b8 01       	movw	r22, r16
    48b0:	ce 01       	movw	r24, r28
    48b2:	05 96       	adiw	r24, 0x05	; 5
    48b4:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    48b8:	89 85       	ldd	r24, Y+9	; 0x09
    48ba:	82 30       	cpi	r24, 0x02	; 2
    48bc:	60 f0       	brcs	.+24     	; 0x48d6 <__gesf2+0x5e>
    48be:	89 89       	ldd	r24, Y+17	; 0x11
    48c0:	82 30       	cpi	r24, 0x02	; 2
    48c2:	48 f0       	brcs	.+18     	; 0x48d6 <__gesf2+0x5e>
    48c4:	b8 01       	movw	r22, r16
    48c6:	c7 01       	movw	r24, r14
    48c8:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__fpcmp_parts_f>
    48cc:	28 2f       	mov	r18, r24
    48ce:	33 27       	eor	r19, r19
    48d0:	27 fd       	sbrc	r18, 7
    48d2:	30 95       	com	r19
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <__gesf2+0x62>
    48d6:	2f ef       	ldi	r18, 0xFF	; 255
    48d8:	3f ef       	ldi	r19, 0xFF	; 255
    48da:	c9 01       	movw	r24, r18
    48dc:	e6 e0       	ldi	r30, 0x06	; 6
    48de:	68 96       	adiw	r28, 0x18	; 24
    48e0:	0c 94 34 28 	jmp	0x5068	; 0x5068 <__epilogue_restores__+0x18>

000048e4 <__floatsisf>:
    48e4:	a8 e0       	ldi	r26, 0x08	; 8
    48e6:	b0 e0       	ldi	r27, 0x00	; 0
    48e8:	e8 e7       	ldi	r30, 0x78	; 120
    48ea:	f4 e2       	ldi	r31, 0x24	; 36
    48ec:	0c 94 15 28 	jmp	0x502a	; 0x502a <__prologue_saves__+0x12>
    48f0:	9b 01       	movw	r18, r22
    48f2:	ac 01       	movw	r20, r24
    48f4:	83 e0       	ldi	r24, 0x03	; 3
    48f6:	89 83       	std	Y+1, r24	; 0x01
    48f8:	da 01       	movw	r26, r20
    48fa:	c9 01       	movw	r24, r18
    48fc:	88 27       	eor	r24, r24
    48fe:	b7 fd       	sbrc	r27, 7
    4900:	83 95       	inc	r24
    4902:	99 27       	eor	r25, r25
    4904:	aa 27       	eor	r26, r26
    4906:	bb 27       	eor	r27, r27
    4908:	b8 2e       	mov	r11, r24
    490a:	21 15       	cp	r18, r1
    490c:	31 05       	cpc	r19, r1
    490e:	41 05       	cpc	r20, r1
    4910:	51 05       	cpc	r21, r1
    4912:	19 f4       	brne	.+6      	; 0x491a <__floatsisf+0x36>
    4914:	82 e0       	ldi	r24, 0x02	; 2
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	3a c0       	rjmp	.+116    	; 0x498e <__floatsisf+0xaa>
    491a:	88 23       	and	r24, r24
    491c:	a9 f0       	breq	.+42     	; 0x4948 <__floatsisf+0x64>
    491e:	20 30       	cpi	r18, 0x00	; 0
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	38 07       	cpc	r19, r24
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	48 07       	cpc	r20, r24
    4928:	80 e8       	ldi	r24, 0x80	; 128
    492a:	58 07       	cpc	r21, r24
    492c:	29 f4       	brne	.+10     	; 0x4938 <__floatsisf+0x54>
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	70 e0       	ldi	r23, 0x00	; 0
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	9f ec       	ldi	r25, 0xCF	; 207
    4936:	30 c0       	rjmp	.+96     	; 0x4998 <__floatsisf+0xb4>
    4938:	ee 24       	eor	r14, r14
    493a:	ff 24       	eor	r15, r15
    493c:	87 01       	movw	r16, r14
    493e:	e2 1a       	sub	r14, r18
    4940:	f3 0a       	sbc	r15, r19
    4942:	04 0b       	sbc	r16, r20
    4944:	15 0b       	sbc	r17, r21
    4946:	02 c0       	rjmp	.+4      	; 0x494c <__floatsisf+0x68>
    4948:	79 01       	movw	r14, r18
    494a:	8a 01       	movw	r16, r20
    494c:	8e e1       	ldi	r24, 0x1E	; 30
    494e:	c8 2e       	mov	r12, r24
    4950:	d1 2c       	mov	r13, r1
    4952:	dc 82       	std	Y+4, r13	; 0x04
    4954:	cb 82       	std	Y+3, r12	; 0x03
    4956:	ed 82       	std	Y+5, r14	; 0x05
    4958:	fe 82       	std	Y+6, r15	; 0x06
    495a:	0f 83       	std	Y+7, r16	; 0x07
    495c:	18 87       	std	Y+8, r17	; 0x08
    495e:	c8 01       	movw	r24, r16
    4960:	b7 01       	movw	r22, r14
    4962:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__clzsi2>
    4966:	01 97       	sbiw	r24, 0x01	; 1
    4968:	18 16       	cp	r1, r24
    496a:	19 06       	cpc	r1, r25
    496c:	84 f4       	brge	.+32     	; 0x498e <__floatsisf+0xaa>
    496e:	08 2e       	mov	r0, r24
    4970:	04 c0       	rjmp	.+8      	; 0x497a <__floatsisf+0x96>
    4972:	ee 0c       	add	r14, r14
    4974:	ff 1c       	adc	r15, r15
    4976:	00 1f       	adc	r16, r16
    4978:	11 1f       	adc	r17, r17
    497a:	0a 94       	dec	r0
    497c:	d2 f7       	brpl	.-12     	; 0x4972 <__floatsisf+0x8e>
    497e:	ed 82       	std	Y+5, r14	; 0x05
    4980:	fe 82       	std	Y+6, r15	; 0x06
    4982:	0f 83       	std	Y+7, r16	; 0x07
    4984:	18 87       	std	Y+8, r17	; 0x08
    4986:	c8 1a       	sub	r12, r24
    4988:	d9 0a       	sbc	r13, r25
    498a:	dc 82       	std	Y+4, r13	; 0x04
    498c:	cb 82       	std	Y+3, r12	; 0x03
    498e:	ba 82       	std	Y+2, r11	; 0x02
    4990:	ce 01       	movw	r24, r28
    4992:	01 96       	adiw	r24, 0x01	; 1
    4994:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__pack_f>
    4998:	e9 e0       	ldi	r30, 0x09	; 9
    499a:	28 96       	adiw	r28, 0x08	; 8
    499c:	0c 94 31 28 	jmp	0x5062	; 0x5062 <__epilogue_restores__+0x12>

000049a0 <__fixsfsi>:
    49a0:	ac e0       	ldi	r26, 0x0C	; 12
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	e6 ed       	ldi	r30, 0xD6	; 214
    49a6:	f4 e2       	ldi	r31, 0x24	; 36
    49a8:	0c 94 1c 28 	jmp	0x5038	; 0x5038 <__prologue_saves__+0x20>
    49ac:	69 83       	std	Y+1, r22	; 0x01
    49ae:	7a 83       	std	Y+2, r23	; 0x02
    49b0:	8b 83       	std	Y+3, r24	; 0x03
    49b2:	9c 83       	std	Y+4, r25	; 0x04
    49b4:	be 01       	movw	r22, r28
    49b6:	6b 5f       	subi	r22, 0xFB	; 251
    49b8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ba:	ce 01       	movw	r24, r28
    49bc:	01 96       	adiw	r24, 0x01	; 1
    49be:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__unpack_f>
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	82 30       	cpi	r24, 0x02	; 2
    49c6:	a9 f1       	breq	.+106    	; 0x4a32 <__fixsfsi+0x92>
    49c8:	82 30       	cpi	r24, 0x02	; 2
    49ca:	98 f1       	brcs	.+102    	; 0x4a32 <__fixsfsi+0x92>
    49cc:	84 30       	cpi	r24, 0x04	; 4
    49ce:	21 f4       	brne	.+8      	; 0x49d8 <__fixsfsi+0x38>
    49d0:	8e 81       	ldd	r24, Y+6	; 0x06
    49d2:	88 23       	and	r24, r24
    49d4:	59 f4       	brne	.+22     	; 0x49ec <__fixsfsi+0x4c>
    49d6:	0f c0       	rjmp	.+30     	; 0x49f6 <__fixsfsi+0x56>
    49d8:	2f 81       	ldd	r18, Y+7	; 0x07
    49da:	38 85       	ldd	r19, Y+8	; 0x08
    49dc:	37 fd       	sbrc	r19, 7
    49de:	29 c0       	rjmp	.+82     	; 0x4a32 <__fixsfsi+0x92>
    49e0:	6e 81       	ldd	r22, Y+6	; 0x06
    49e2:	2f 31       	cpi	r18, 0x1F	; 31
    49e4:	31 05       	cpc	r19, r1
    49e6:	64 f0       	brlt	.+24     	; 0x4a00 <__fixsfsi+0x60>
    49e8:	66 23       	and	r22, r22
    49ea:	29 f0       	breq	.+10     	; 0x49f6 <__fixsfsi+0x56>
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	40 e0       	ldi	r20, 0x00	; 0
    49f2:	50 e8       	ldi	r21, 0x80	; 128
    49f4:	22 c0       	rjmp	.+68     	; 0x4a3a <__fixsfsi+0x9a>
    49f6:	2f ef       	ldi	r18, 0xFF	; 255
    49f8:	3f ef       	ldi	r19, 0xFF	; 255
    49fa:	4f ef       	ldi	r20, 0xFF	; 255
    49fc:	5f e7       	ldi	r21, 0x7F	; 127
    49fe:	1d c0       	rjmp	.+58     	; 0x4a3a <__fixsfsi+0x9a>
    4a00:	8e e1       	ldi	r24, 0x1E	; 30
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	82 1b       	sub	r24, r18
    4a06:	93 0b       	sbc	r25, r19
    4a08:	29 85       	ldd	r18, Y+9	; 0x09
    4a0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a0c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a10:	04 c0       	rjmp	.+8      	; 0x4a1a <__fixsfsi+0x7a>
    4a12:	56 95       	lsr	r21
    4a14:	47 95       	ror	r20
    4a16:	37 95       	ror	r19
    4a18:	27 95       	ror	r18
    4a1a:	8a 95       	dec	r24
    4a1c:	d2 f7       	brpl	.-12     	; 0x4a12 <__fixsfsi+0x72>
    4a1e:	66 23       	and	r22, r22
    4a20:	61 f0       	breq	.+24     	; 0x4a3a <__fixsfsi+0x9a>
    4a22:	50 95       	com	r21
    4a24:	40 95       	com	r20
    4a26:	30 95       	com	r19
    4a28:	21 95       	neg	r18
    4a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2c:	4f 4f       	sbci	r20, 0xFF	; 255
    4a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a30:	04 c0       	rjmp	.+8      	; 0x4a3a <__fixsfsi+0x9a>
    4a32:	20 e0       	ldi	r18, 0x00	; 0
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	40 e0       	ldi	r20, 0x00	; 0
    4a38:	50 e0       	ldi	r21, 0x00	; 0
    4a3a:	ca 01       	movw	r24, r20
    4a3c:	b9 01       	movw	r22, r18
    4a3e:	e2 e0       	ldi	r30, 0x02	; 2
    4a40:	2c 96       	adiw	r28, 0x0c	; 12
    4a42:	0c 94 38 28 	jmp	0x5070	; 0x5070 <__epilogue_restores__+0x20>

00004a46 <__floatunsisf>:
    4a46:	a8 e0       	ldi	r26, 0x08	; 8
    4a48:	b0 e0       	ldi	r27, 0x00	; 0
    4a4a:	e9 e2       	ldi	r30, 0x29	; 41
    4a4c:	f5 e2       	ldi	r31, 0x25	; 37
    4a4e:	0c 94 16 28 	jmp	0x502c	; 0x502c <__prologue_saves__+0x14>
    4a52:	7b 01       	movw	r14, r22
    4a54:	8c 01       	movw	r16, r24
    4a56:	61 15       	cp	r22, r1
    4a58:	71 05       	cpc	r23, r1
    4a5a:	81 05       	cpc	r24, r1
    4a5c:	91 05       	cpc	r25, r1
    4a5e:	19 f4       	brne	.+6      	; 0x4a66 <__floatunsisf+0x20>
    4a60:	82 e0       	ldi	r24, 0x02	; 2
    4a62:	89 83       	std	Y+1, r24	; 0x01
    4a64:	5a c0       	rjmp	.+180    	; 0x4b1a <__floatunsisf+0xd4>
    4a66:	83 e0       	ldi	r24, 0x03	; 3
    4a68:	89 83       	std	Y+1, r24	; 0x01
    4a6a:	8e e1       	ldi	r24, 0x1E	; 30
    4a6c:	c8 2e       	mov	r12, r24
    4a6e:	d1 2c       	mov	r13, r1
    4a70:	dc 82       	std	Y+4, r13	; 0x04
    4a72:	cb 82       	std	Y+3, r12	; 0x03
    4a74:	ed 82       	std	Y+5, r14	; 0x05
    4a76:	fe 82       	std	Y+6, r15	; 0x06
    4a78:	0f 83       	std	Y+7, r16	; 0x07
    4a7a:	18 87       	std	Y+8, r17	; 0x08
    4a7c:	c8 01       	movw	r24, r16
    4a7e:	b7 01       	movw	r22, r14
    4a80:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__clzsi2>
    4a84:	bc 01       	movw	r22, r24
    4a86:	61 50       	subi	r22, 0x01	; 1
    4a88:	70 40       	sbci	r23, 0x00	; 0
    4a8a:	77 ff       	sbrs	r23, 7
    4a8c:	33 c0       	rjmp	.+102    	; 0x4af4 <__floatunsisf+0xae>
    4a8e:	ee 27       	eor	r30, r30
    4a90:	ff 27       	eor	r31, r31
    4a92:	e6 1b       	sub	r30, r22
    4a94:	f7 0b       	sbc	r31, r23
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	50 e0       	ldi	r21, 0x00	; 0
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	a0 e0       	ldi	r26, 0x00	; 0
    4aa4:	b0 e0       	ldi	r27, 0x00	; 0
    4aa6:	0e 2e       	mov	r0, r30
    4aa8:	04 c0       	rjmp	.+8      	; 0x4ab2 <__floatunsisf+0x6c>
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	aa 1f       	adc	r26, r26
    4ab0:	bb 1f       	adc	r27, r27
    4ab2:	0a 94       	dec	r0
    4ab4:	d2 f7       	brpl	.-12     	; 0x4aaa <__floatunsisf+0x64>
    4ab6:	01 97       	sbiw	r24, 0x01	; 1
    4ab8:	a1 09       	sbc	r26, r1
    4aba:	b1 09       	sbc	r27, r1
    4abc:	8e 21       	and	r24, r14
    4abe:	9f 21       	and	r25, r15
    4ac0:	a0 23       	and	r26, r16
    4ac2:	b1 23       	and	r27, r17
    4ac4:	00 97       	sbiw	r24, 0x00	; 0
    4ac6:	a1 05       	cpc	r26, r1
    4ac8:	b1 05       	cpc	r27, r1
    4aca:	21 f0       	breq	.+8      	; 0x4ad4 <__floatunsisf+0x8e>
    4acc:	21 e0       	ldi	r18, 0x01	; 1
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e0       	ldi	r20, 0x00	; 0
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	04 c0       	rjmp	.+8      	; 0x4ade <__floatunsisf+0x98>
    4ad6:	16 95       	lsr	r17
    4ad8:	07 95       	ror	r16
    4ada:	f7 94       	ror	r15
    4adc:	e7 94       	ror	r14
    4ade:	ea 95       	dec	r30
    4ae0:	d2 f7       	brpl	.-12     	; 0x4ad6 <__floatunsisf+0x90>
    4ae2:	2e 29       	or	r18, r14
    4ae4:	3f 29       	or	r19, r15
    4ae6:	40 2b       	or	r20, r16
    4ae8:	51 2b       	or	r21, r17
    4aea:	2d 83       	std	Y+5, r18	; 0x05
    4aec:	3e 83       	std	Y+6, r19	; 0x06
    4aee:	4f 83       	std	Y+7, r20	; 0x07
    4af0:	58 87       	std	Y+8, r21	; 0x08
    4af2:	0f c0       	rjmp	.+30     	; 0x4b12 <__floatunsisf+0xcc>
    4af4:	61 15       	cp	r22, r1
    4af6:	71 05       	cpc	r23, r1
    4af8:	81 f0       	breq	.+32     	; 0x4b1a <__floatunsisf+0xd4>
    4afa:	06 2e       	mov	r0, r22
    4afc:	04 c0       	rjmp	.+8      	; 0x4b06 <__floatunsisf+0xc0>
    4afe:	ee 0c       	add	r14, r14
    4b00:	ff 1c       	adc	r15, r15
    4b02:	00 1f       	adc	r16, r16
    4b04:	11 1f       	adc	r17, r17
    4b06:	0a 94       	dec	r0
    4b08:	d2 f7       	brpl	.-12     	; 0x4afe <__floatunsisf+0xb8>
    4b0a:	ed 82       	std	Y+5, r14	; 0x05
    4b0c:	fe 82       	std	Y+6, r15	; 0x06
    4b0e:	0f 83       	std	Y+7, r16	; 0x07
    4b10:	18 87       	std	Y+8, r17	; 0x08
    4b12:	c6 1a       	sub	r12, r22
    4b14:	d7 0a       	sbc	r13, r23
    4b16:	dc 82       	std	Y+4, r13	; 0x04
    4b18:	cb 82       	std	Y+3, r12	; 0x03
    4b1a:	1a 82       	std	Y+2, r1	; 0x02
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	01 96       	adiw	r24, 0x01	; 1
    4b20:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__pack_f>
    4b24:	e8 e0       	ldi	r30, 0x08	; 8
    4b26:	28 96       	adiw	r28, 0x08	; 8
    4b28:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__epilogue_restores__+0x14>

00004b2c <__clzsi2>:
    4b2c:	ef 92       	push	r14
    4b2e:	ff 92       	push	r15
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	9b 01       	movw	r18, r22
    4b36:	ac 01       	movw	r20, r24
    4b38:	20 30       	cpi	r18, 0x00	; 0
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	38 07       	cpc	r19, r24
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	48 07       	cpc	r20, r24
    4b42:	80 e0       	ldi	r24, 0x00	; 0
    4b44:	58 07       	cpc	r21, r24
    4b46:	80 f4       	brcc	.+32     	; 0x4b68 <__clzsi2+0x3c>
    4b48:	2f 3f       	cpi	r18, 0xFF	; 255
    4b4a:	31 05       	cpc	r19, r1
    4b4c:	41 05       	cpc	r20, r1
    4b4e:	51 05       	cpc	r21, r1
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <__clzsi2+0x28>
    4b52:	20 f4       	brcc	.+8      	; 0x4b5c <__clzsi2+0x30>
    4b54:	ee 24       	eor	r14, r14
    4b56:	ff 24       	eor	r15, r15
    4b58:	87 01       	movw	r16, r14
    4b5a:	19 c0       	rjmp	.+50     	; 0x4b8e <__clzsi2+0x62>
    4b5c:	68 e0       	ldi	r22, 0x08	; 8
    4b5e:	e6 2e       	mov	r14, r22
    4b60:	f1 2c       	mov	r15, r1
    4b62:	01 2d       	mov	r16, r1
    4b64:	11 2d       	mov	r17, r1
    4b66:	13 c0       	rjmp	.+38     	; 0x4b8e <__clzsi2+0x62>
    4b68:	20 30       	cpi	r18, 0x00	; 0
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	38 07       	cpc	r19, r24
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	48 07       	cpc	r20, r24
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	58 07       	cpc	r21, r24
    4b76:	30 f4       	brcc	.+12     	; 0x4b84 <__clzsi2+0x58>
    4b78:	90 e1       	ldi	r25, 0x10	; 16
    4b7a:	e9 2e       	mov	r14, r25
    4b7c:	f1 2c       	mov	r15, r1
    4b7e:	01 2d       	mov	r16, r1
    4b80:	11 2d       	mov	r17, r1
    4b82:	05 c0       	rjmp	.+10     	; 0x4b8e <__clzsi2+0x62>
    4b84:	88 e1       	ldi	r24, 0x18	; 24
    4b86:	e8 2e       	mov	r14, r24
    4b88:	f1 2c       	mov	r15, r1
    4b8a:	01 2d       	mov	r16, r1
    4b8c:	11 2d       	mov	r17, r1
    4b8e:	80 e2       	ldi	r24, 0x20	; 32
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	a0 e0       	ldi	r26, 0x00	; 0
    4b94:	b0 e0       	ldi	r27, 0x00	; 0
    4b96:	8e 19       	sub	r24, r14
    4b98:	9f 09       	sbc	r25, r15
    4b9a:	a0 0b       	sbc	r26, r16
    4b9c:	b1 0b       	sbc	r27, r17
    4b9e:	04 c0       	rjmp	.+8      	; 0x4ba8 <__clzsi2+0x7c>
    4ba0:	56 95       	lsr	r21
    4ba2:	47 95       	ror	r20
    4ba4:	37 95       	ror	r19
    4ba6:	27 95       	ror	r18
    4ba8:	ea 94       	dec	r14
    4baa:	d2 f7       	brpl	.-12     	; 0x4ba0 <__clzsi2+0x74>
    4bac:	f9 01       	movw	r30, r18
    4bae:	e2 5e       	subi	r30, 0xE2	; 226
    4bb0:	fd 4f       	sbci	r31, 0xFD	; 253
    4bb2:	20 81       	ld	r18, Z
    4bb4:	82 1b       	sub	r24, r18
    4bb6:	91 09       	sbc	r25, r1
    4bb8:	a1 09       	sbc	r26, r1
    4bba:	b1 09       	sbc	r27, r1
    4bbc:	1f 91       	pop	r17
    4bbe:	0f 91       	pop	r16
    4bc0:	ff 90       	pop	r15
    4bc2:	ef 90       	pop	r14
    4bc4:	08 95       	ret

00004bc6 <__pack_f>:
    4bc6:	9f 92       	push	r9
    4bc8:	af 92       	push	r10
    4bca:	bf 92       	push	r11
    4bcc:	cf 92       	push	r12
    4bce:	df 92       	push	r13
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	ee 24       	eor	r14, r14
    4bda:	ff 24       	eor	r15, r15
    4bdc:	87 01       	movw	r16, r14
    4bde:	fc 01       	movw	r30, r24
    4be0:	24 81       	ldd	r18, Z+4	; 0x04
    4be2:	35 81       	ldd	r19, Z+5	; 0x05
    4be4:	46 81       	ldd	r20, Z+6	; 0x06
    4be6:	57 81       	ldd	r21, Z+7	; 0x07
    4be8:	91 80       	ldd	r9, Z+1	; 0x01
    4bea:	80 81       	ld	r24, Z
    4bec:	82 30       	cpi	r24, 0x02	; 2
    4bee:	10 f4       	brcc	.+4      	; 0x4bf4 <__pack_f+0x2e>
    4bf0:	40 61       	ori	r20, 0x10	; 16
    4bf2:	a2 c0       	rjmp	.+324    	; 0x4d38 <__pack_f+0x172>
    4bf4:	84 30       	cpi	r24, 0x04	; 4
    4bf6:	09 f4       	brne	.+2      	; 0x4bfa <__pack_f+0x34>
    4bf8:	9b c0       	rjmp	.+310    	; 0x4d30 <__pack_f+0x16a>
    4bfa:	82 30       	cpi	r24, 0x02	; 2
    4bfc:	29 f4       	brne	.+10     	; 0x4c08 <__pack_f+0x42>
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	40 e0       	ldi	r20, 0x00	; 0
    4c04:	50 e0       	ldi	r21, 0x00	; 0
    4c06:	05 c0       	rjmp	.+10     	; 0x4c12 <__pack_f+0x4c>
    4c08:	21 15       	cp	r18, r1
    4c0a:	31 05       	cpc	r19, r1
    4c0c:	41 05       	cpc	r20, r1
    4c0e:	51 05       	cpc	r21, r1
    4c10:	19 f4       	brne	.+6      	; 0x4c18 <__pack_f+0x52>
    4c12:	e0 e0       	ldi	r30, 0x00	; 0
    4c14:	f0 e0       	ldi	r31, 0x00	; 0
    4c16:	92 c0       	rjmp	.+292    	; 0x4d3c <__pack_f+0x176>
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	6f ef       	ldi	r22, 0xFF	; 255
    4c1e:	82 38       	cpi	r24, 0x82	; 130
    4c20:	96 07       	cpc	r25, r22
    4c22:	0c f0       	brlt	.+2      	; 0x4c26 <__pack_f+0x60>
    4c24:	5a c0       	rjmp	.+180    	; 0x4cda <__pack_f+0x114>
    4c26:	62 e8       	ldi	r22, 0x82	; 130
    4c28:	7f ef       	ldi	r23, 0xFF	; 255
    4c2a:	68 1b       	sub	r22, r24
    4c2c:	79 0b       	sbc	r23, r25
    4c2e:	6a 31       	cpi	r22, 0x1A	; 26
    4c30:	71 05       	cpc	r23, r1
    4c32:	2c f0       	brlt	.+10     	; 0x4c3e <__pack_f+0x78>
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	2a c0       	rjmp	.+84     	; 0x4c92 <__pack_f+0xcc>
    4c3e:	aa 24       	eor	r10, r10
    4c40:	bb 24       	eor	r11, r11
    4c42:	65 01       	movw	r12, r10
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	a0 e0       	ldi	r26, 0x00	; 0
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	06 2e       	mov	r0, r22
    4c4e:	04 c0       	rjmp	.+8      	; 0x4c58 <__pack_f+0x92>
    4c50:	88 0f       	add	r24, r24
    4c52:	99 1f       	adc	r25, r25
    4c54:	aa 1f       	adc	r26, r26
    4c56:	bb 1f       	adc	r27, r27
    4c58:	0a 94       	dec	r0
    4c5a:	d2 f7       	brpl	.-12     	; 0x4c50 <__pack_f+0x8a>
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	a1 09       	sbc	r26, r1
    4c60:	b1 09       	sbc	r27, r1
    4c62:	82 23       	and	r24, r18
    4c64:	93 23       	and	r25, r19
    4c66:	a4 23       	and	r26, r20
    4c68:	b5 23       	and	r27, r21
    4c6a:	00 97       	sbiw	r24, 0x00	; 0
    4c6c:	a1 05       	cpc	r26, r1
    4c6e:	b1 05       	cpc	r27, r1
    4c70:	29 f0       	breq	.+10     	; 0x4c7c <__pack_f+0xb6>
    4c72:	71 e0       	ldi	r23, 0x01	; 1
    4c74:	a7 2e       	mov	r10, r23
    4c76:	b1 2c       	mov	r11, r1
    4c78:	c1 2c       	mov	r12, r1
    4c7a:	d1 2c       	mov	r13, r1
    4c7c:	04 c0       	rjmp	.+8      	; 0x4c86 <__pack_f+0xc0>
    4c7e:	56 95       	lsr	r21
    4c80:	47 95       	ror	r20
    4c82:	37 95       	ror	r19
    4c84:	27 95       	ror	r18
    4c86:	6a 95       	dec	r22
    4c88:	d2 f7       	brpl	.-12     	; 0x4c7e <__pack_f+0xb8>
    4c8a:	2a 29       	or	r18, r10
    4c8c:	3b 29       	or	r19, r11
    4c8e:	4c 29       	or	r20, r12
    4c90:	5d 29       	or	r21, r13
    4c92:	da 01       	movw	r26, r20
    4c94:	c9 01       	movw	r24, r18
    4c96:	8f 77       	andi	r24, 0x7F	; 127
    4c98:	90 70       	andi	r25, 0x00	; 0
    4c9a:	a0 70       	andi	r26, 0x00	; 0
    4c9c:	b0 70       	andi	r27, 0x00	; 0
    4c9e:	80 34       	cpi	r24, 0x40	; 64
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	a1 05       	cpc	r26, r1
    4ca4:	b1 05       	cpc	r27, r1
    4ca6:	39 f4       	brne	.+14     	; 0x4cb6 <__pack_f+0xf0>
    4ca8:	27 ff       	sbrs	r18, 7
    4caa:	09 c0       	rjmp	.+18     	; 0x4cbe <__pack_f+0xf8>
    4cac:	20 5c       	subi	r18, 0xC0	; 192
    4cae:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb0:	4f 4f       	sbci	r20, 0xFF	; 255
    4cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb4:	04 c0       	rjmp	.+8      	; 0x4cbe <__pack_f+0xf8>
    4cb6:	21 5c       	subi	r18, 0xC1	; 193
    4cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cba:	4f 4f       	sbci	r20, 0xFF	; 255
    4cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	20 30       	cpi	r18, 0x00	; 0
    4cc4:	60 e0       	ldi	r22, 0x00	; 0
    4cc6:	36 07       	cpc	r19, r22
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	46 07       	cpc	r20, r22
    4ccc:	60 e4       	ldi	r22, 0x40	; 64
    4cce:	56 07       	cpc	r21, r22
    4cd0:	10 f0       	brcs	.+4      	; 0x4cd6 <__pack_f+0x110>
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	23 c0       	rjmp	.+70     	; 0x4d20 <__pack_f+0x15a>
    4cda:	80 38       	cpi	r24, 0x80	; 128
    4cdc:	91 05       	cpc	r25, r1
    4cde:	44 f5       	brge	.+80     	; 0x4d30 <__pack_f+0x16a>
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	e1 58       	subi	r30, 0x81	; 129
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	da 01       	movw	r26, r20
    4ce8:	c9 01       	movw	r24, r18
    4cea:	8f 77       	andi	r24, 0x7F	; 127
    4cec:	90 70       	andi	r25, 0x00	; 0
    4cee:	a0 70       	andi	r26, 0x00	; 0
    4cf0:	b0 70       	andi	r27, 0x00	; 0
    4cf2:	80 34       	cpi	r24, 0x40	; 64
    4cf4:	91 05       	cpc	r25, r1
    4cf6:	a1 05       	cpc	r26, r1
    4cf8:	b1 05       	cpc	r27, r1
    4cfa:	39 f4       	brne	.+14     	; 0x4d0a <__pack_f+0x144>
    4cfc:	27 ff       	sbrs	r18, 7
    4cfe:	09 c0       	rjmp	.+18     	; 0x4d12 <__pack_f+0x14c>
    4d00:	20 5c       	subi	r18, 0xC0	; 192
    4d02:	3f 4f       	sbci	r19, 0xFF	; 255
    4d04:	4f 4f       	sbci	r20, 0xFF	; 255
    4d06:	5f 4f       	sbci	r21, 0xFF	; 255
    4d08:	04 c0       	rjmp	.+8      	; 0x4d12 <__pack_f+0x14c>
    4d0a:	21 5c       	subi	r18, 0xC1	; 193
    4d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0e:	4f 4f       	sbci	r20, 0xFF	; 255
    4d10:	5f 4f       	sbci	r21, 0xFF	; 255
    4d12:	57 ff       	sbrs	r21, 7
    4d14:	05 c0       	rjmp	.+10     	; 0x4d20 <__pack_f+0x15a>
    4d16:	56 95       	lsr	r21
    4d18:	47 95       	ror	r20
    4d1a:	37 95       	ror	r19
    4d1c:	27 95       	ror	r18
    4d1e:	31 96       	adiw	r30, 0x01	; 1
    4d20:	87 e0       	ldi	r24, 0x07	; 7
    4d22:	56 95       	lsr	r21
    4d24:	47 95       	ror	r20
    4d26:	37 95       	ror	r19
    4d28:	27 95       	ror	r18
    4d2a:	8a 95       	dec	r24
    4d2c:	d1 f7       	brne	.-12     	; 0x4d22 <__pack_f+0x15c>
    4d2e:	06 c0       	rjmp	.+12     	; 0x4d3c <__pack_f+0x176>
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	40 e0       	ldi	r20, 0x00	; 0
    4d36:	50 e0       	ldi	r21, 0x00	; 0
    4d38:	ef ef       	ldi	r30, 0xFF	; 255
    4d3a:	f0 e0       	ldi	r31, 0x00	; 0
    4d3c:	e2 2e       	mov	r14, r18
    4d3e:	f3 2e       	mov	r15, r19
    4d40:	94 2f       	mov	r25, r20
    4d42:	9f 77       	andi	r25, 0x7F	; 127
    4d44:	80 2f       	mov	r24, r16
    4d46:	80 78       	andi	r24, 0x80	; 128
    4d48:	89 2b       	or	r24, r25
    4d4a:	9e 2f       	mov	r25, r30
    4d4c:	97 95       	ror	r25
    4d4e:	99 27       	eor	r25, r25
    4d50:	97 95       	ror	r25
    4d52:	8f 77       	andi	r24, 0x7F	; 127
    4d54:	08 2f       	mov	r16, r24
    4d56:	09 2b       	or	r16, r25
    4d58:	9e 2f       	mov	r25, r30
    4d5a:	96 95       	lsr	r25
    4d5c:	81 2f       	mov	r24, r17
    4d5e:	80 78       	andi	r24, 0x80	; 128
    4d60:	89 2b       	or	r24, r25
    4d62:	97 94       	ror	r9
    4d64:	99 24       	eor	r9, r9
    4d66:	97 94       	ror	r9
    4d68:	8f 77       	andi	r24, 0x7F	; 127
    4d6a:	18 2f       	mov	r17, r24
    4d6c:	19 29       	or	r17, r9
    4d6e:	c8 01       	movw	r24, r16
    4d70:	b7 01       	movw	r22, r14
    4d72:	1f 91       	pop	r17
    4d74:	0f 91       	pop	r16
    4d76:	ff 90       	pop	r15
    4d78:	ef 90       	pop	r14
    4d7a:	df 90       	pop	r13
    4d7c:	cf 90       	pop	r12
    4d7e:	bf 90       	pop	r11
    4d80:	af 90       	pop	r10
    4d82:	9f 90       	pop	r9
    4d84:	08 95       	ret

00004d86 <__unpack_f>:
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	db 01       	movw	r26, r22
    4d8e:	20 81       	ld	r18, Z
    4d90:	31 81       	ldd	r19, Z+1	; 0x01
    4d92:	92 81       	ldd	r25, Z+2	; 0x02
    4d94:	49 2f       	mov	r20, r25
    4d96:	4f 77       	andi	r20, 0x7F	; 127
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	99 1f       	adc	r25, r25
    4d9c:	99 27       	eor	r25, r25
    4d9e:	99 1f       	adc	r25, r25
    4da0:	83 81       	ldd	r24, Z+3	; 0x03
    4da2:	e8 2f       	mov	r30, r24
    4da4:	ee 0f       	add	r30, r30
    4da6:	e9 2b       	or	r30, r25
    4da8:	6e 2f       	mov	r22, r30
    4daa:	70 e0       	ldi	r23, 0x00	; 0
    4dac:	88 1f       	adc	r24, r24
    4dae:	88 27       	eor	r24, r24
    4db0:	88 1f       	adc	r24, r24
    4db2:	ed 01       	movw	r28, r26
    4db4:	89 83       	std	Y+1, r24	; 0x01
    4db6:	ee 23       	and	r30, r30
    4db8:	71 f5       	brne	.+92     	; 0x4e16 <__unpack_f+0x90>
    4dba:	21 15       	cp	r18, r1
    4dbc:	31 05       	cpc	r19, r1
    4dbe:	41 05       	cpc	r20, r1
    4dc0:	51 05       	cpc	r21, r1
    4dc2:	11 f4       	brne	.+4      	; 0x4dc8 <__unpack_f+0x42>
    4dc4:	82 e0       	ldi	r24, 0x02	; 2
    4dc6:	2f c0       	rjmp	.+94     	; 0x4e26 <__unpack_f+0xa0>
    4dc8:	6e 57       	subi	r22, 0x7E	; 126
    4dca:	70 40       	sbci	r23, 0x00	; 0
    4dcc:	fd 01       	movw	r30, r26
    4dce:	73 83       	std	Z+3, r23	; 0x03
    4dd0:	62 83       	std	Z+2, r22	; 0x02
    4dd2:	67 e0       	ldi	r22, 0x07	; 7
    4dd4:	22 0f       	add	r18, r18
    4dd6:	33 1f       	adc	r19, r19
    4dd8:	44 1f       	adc	r20, r20
    4dda:	55 1f       	adc	r21, r21
    4ddc:	6a 95       	dec	r22
    4dde:	d1 f7       	brne	.-12     	; 0x4dd4 <__unpack_f+0x4e>
    4de0:	83 e0       	ldi	r24, 0x03	; 3
    4de2:	8c 93       	st	X, r24
    4de4:	0a c0       	rjmp	.+20     	; 0x4dfa <__unpack_f+0x74>
    4de6:	22 0f       	add	r18, r18
    4de8:	33 1f       	adc	r19, r19
    4dea:	44 1f       	adc	r20, r20
    4dec:	55 1f       	adc	r21, r21
    4dee:	ed 01       	movw	r28, r26
    4df0:	8a 81       	ldd	r24, Y+2	; 0x02
    4df2:	9b 81       	ldd	r25, Y+3	; 0x03
    4df4:	01 97       	sbiw	r24, 0x01	; 1
    4df6:	9b 83       	std	Y+3, r25	; 0x03
    4df8:	8a 83       	std	Y+2, r24	; 0x02
    4dfa:	20 30       	cpi	r18, 0x00	; 0
    4dfc:	e0 e0       	ldi	r30, 0x00	; 0
    4dfe:	3e 07       	cpc	r19, r30
    4e00:	e0 e0       	ldi	r30, 0x00	; 0
    4e02:	4e 07       	cpc	r20, r30
    4e04:	e0 e4       	ldi	r30, 0x40	; 64
    4e06:	5e 07       	cpc	r21, r30
    4e08:	70 f3       	brcs	.-36     	; 0x4de6 <__unpack_f+0x60>
    4e0a:	ed 01       	movw	r28, r26
    4e0c:	2c 83       	std	Y+4, r18	; 0x04
    4e0e:	3d 83       	std	Y+5, r19	; 0x05
    4e10:	4e 83       	std	Y+6, r20	; 0x06
    4e12:	5f 83       	std	Y+7, r21	; 0x07
    4e14:	25 c0       	rjmp	.+74     	; 0x4e60 <__unpack_f+0xda>
    4e16:	ef 3f       	cpi	r30, 0xFF	; 255
    4e18:	79 f4       	brne	.+30     	; 0x4e38 <__unpack_f+0xb2>
    4e1a:	21 15       	cp	r18, r1
    4e1c:	31 05       	cpc	r19, r1
    4e1e:	41 05       	cpc	r20, r1
    4e20:	51 05       	cpc	r21, r1
    4e22:	19 f4       	brne	.+6      	; 0x4e2a <__unpack_f+0xa4>
    4e24:	84 e0       	ldi	r24, 0x04	; 4
    4e26:	8c 93       	st	X, r24
    4e28:	1b c0       	rjmp	.+54     	; 0x4e60 <__unpack_f+0xda>
    4e2a:	44 ff       	sbrs	r20, 4
    4e2c:	03 c0       	rjmp	.+6      	; 0x4e34 <__unpack_f+0xae>
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	8c 93       	st	X, r24
    4e32:	11 c0       	rjmp	.+34     	; 0x4e56 <__unpack_f+0xd0>
    4e34:	1c 92       	st	X, r1
    4e36:	0f c0       	rjmp	.+30     	; 0x4e56 <__unpack_f+0xd0>
    4e38:	6f 57       	subi	r22, 0x7F	; 127
    4e3a:	70 40       	sbci	r23, 0x00	; 0
    4e3c:	ed 01       	movw	r28, r26
    4e3e:	7b 83       	std	Y+3, r23	; 0x03
    4e40:	6a 83       	std	Y+2, r22	; 0x02
    4e42:	83 e0       	ldi	r24, 0x03	; 3
    4e44:	8c 93       	st	X, r24
    4e46:	87 e0       	ldi	r24, 0x07	; 7
    4e48:	22 0f       	add	r18, r18
    4e4a:	33 1f       	adc	r19, r19
    4e4c:	44 1f       	adc	r20, r20
    4e4e:	55 1f       	adc	r21, r21
    4e50:	8a 95       	dec	r24
    4e52:	d1 f7       	brne	.-12     	; 0x4e48 <__unpack_f+0xc2>
    4e54:	50 64       	ori	r21, 0x40	; 64
    4e56:	fd 01       	movw	r30, r26
    4e58:	24 83       	std	Z+4, r18	; 0x04
    4e5a:	35 83       	std	Z+5, r19	; 0x05
    4e5c:	46 83       	std	Z+6, r20	; 0x06
    4e5e:	57 83       	std	Z+7, r21	; 0x07
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	08 95       	ret

00004e66 <__fpcmp_parts_f>:
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	fb 01       	movw	r30, r22
    4e6e:	9c 91       	ld	r25, X
    4e70:	92 30       	cpi	r25, 0x02	; 2
    4e72:	08 f4       	brcc	.+2      	; 0x4e76 <__fpcmp_parts_f+0x10>
    4e74:	46 c0       	rjmp	.+140    	; 0x4f02 <__fpcmp_parts_f+0x9c>
    4e76:	80 81       	ld	r24, Z
    4e78:	82 30       	cpi	r24, 0x02	; 2
    4e7a:	08 f4       	brcc	.+2      	; 0x4e7e <__fpcmp_parts_f+0x18>
    4e7c:	42 c0       	rjmp	.+132    	; 0x4f02 <__fpcmp_parts_f+0x9c>
    4e7e:	94 30       	cpi	r25, 0x04	; 4
    4e80:	49 f4       	brne	.+18     	; 0x4e94 <__fpcmp_parts_f+0x2e>
    4e82:	ed 01       	movw	r28, r26
    4e84:	69 81       	ldd	r22, Y+1	; 0x01
    4e86:	84 30       	cpi	r24, 0x04	; 4
    4e88:	79 f5       	brne	.+94     	; 0x4ee8 <__fpcmp_parts_f+0x82>
    4e8a:	81 81       	ldd	r24, Z+1	; 0x01
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	86 1b       	sub	r24, r22
    4e90:	91 09       	sbc	r25, r1
    4e92:	3c c0       	rjmp	.+120    	; 0x4f0c <__fpcmp_parts_f+0xa6>
    4e94:	84 30       	cpi	r24, 0x04	; 4
    4e96:	21 f0       	breq	.+8      	; 0x4ea0 <__fpcmp_parts_f+0x3a>
    4e98:	92 30       	cpi	r25, 0x02	; 2
    4e9a:	31 f4       	brne	.+12     	; 0x4ea8 <__fpcmp_parts_f+0x42>
    4e9c:	82 30       	cpi	r24, 0x02	; 2
    4e9e:	a1 f1       	breq	.+104    	; 0x4f08 <__fpcmp_parts_f+0xa2>
    4ea0:	81 81       	ldd	r24, Z+1	; 0x01
    4ea2:	88 23       	and	r24, r24
    4ea4:	71 f5       	brne	.+92     	; 0x4f02 <__fpcmp_parts_f+0x9c>
    4ea6:	2a c0       	rjmp	.+84     	; 0x4efc <__fpcmp_parts_f+0x96>
    4ea8:	ed 01       	movw	r28, r26
    4eaa:	69 81       	ldd	r22, Y+1	; 0x01
    4eac:	82 30       	cpi	r24, 0x02	; 2
    4eae:	e1 f0       	breq	.+56     	; 0x4ee8 <__fpcmp_parts_f+0x82>
    4eb0:	81 81       	ldd	r24, Z+1	; 0x01
    4eb2:	68 17       	cp	r22, r24
    4eb4:	c9 f4       	brne	.+50     	; 0x4ee8 <__fpcmp_parts_f+0x82>
    4eb6:	ed 01       	movw	r28, r26
    4eb8:	2a 81       	ldd	r18, Y+2	; 0x02
    4eba:	3b 81       	ldd	r19, Y+3	; 0x03
    4ebc:	82 81       	ldd	r24, Z+2	; 0x02
    4ebe:	93 81       	ldd	r25, Z+3	; 0x03
    4ec0:	82 17       	cp	r24, r18
    4ec2:	93 07       	cpc	r25, r19
    4ec4:	8c f0       	brlt	.+34     	; 0x4ee8 <__fpcmp_parts_f+0x82>
    4ec6:	28 17       	cp	r18, r24
    4ec8:	39 07       	cpc	r19, r25
    4eca:	b4 f0       	brlt	.+44     	; 0x4ef8 <__fpcmp_parts_f+0x92>
    4ecc:	ed 01       	movw	r28, r26
    4ece:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed2:	ae 81       	ldd	r26, Y+6	; 0x06
    4ed4:	bf 81       	ldd	r27, Y+7	; 0x07
    4ed6:	24 81       	ldd	r18, Z+4	; 0x04
    4ed8:	35 81       	ldd	r19, Z+5	; 0x05
    4eda:	46 81       	ldd	r20, Z+6	; 0x06
    4edc:	57 81       	ldd	r21, Z+7	; 0x07
    4ede:	28 17       	cp	r18, r24
    4ee0:	39 07       	cpc	r19, r25
    4ee2:	4a 07       	cpc	r20, r26
    4ee4:	5b 07       	cpc	r21, r27
    4ee6:	18 f4       	brcc	.+6      	; 0x4eee <__fpcmp_parts_f+0x88>
    4ee8:	66 23       	and	r22, r22
    4eea:	41 f4       	brne	.+16     	; 0x4efc <__fpcmp_parts_f+0x96>
    4eec:	0a c0       	rjmp	.+20     	; 0x4f02 <__fpcmp_parts_f+0x9c>
    4eee:	82 17       	cp	r24, r18
    4ef0:	93 07       	cpc	r25, r19
    4ef2:	a4 07       	cpc	r26, r20
    4ef4:	b5 07       	cpc	r27, r21
    4ef6:	40 f4       	brcc	.+16     	; 0x4f08 <__fpcmp_parts_f+0xa2>
    4ef8:	66 23       	and	r22, r22
    4efa:	19 f4       	brne	.+6      	; 0x4f02 <__fpcmp_parts_f+0x9c>
    4efc:	8f ef       	ldi	r24, 0xFF	; 255
    4efe:	9f ef       	ldi	r25, 0xFF	; 255
    4f00:	05 c0       	rjmp	.+10     	; 0x4f0c <__fpcmp_parts_f+0xa6>
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	02 c0       	rjmp	.+4      	; 0x4f0c <__fpcmp_parts_f+0xa6>
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	df 91       	pop	r29
    4f0e:	cf 91       	pop	r28
    4f10:	08 95       	ret

00004f12 <__mulsi3>:
    4f12:	62 9f       	mul	r22, r18
    4f14:	d0 01       	movw	r26, r0
    4f16:	73 9f       	mul	r23, r19
    4f18:	f0 01       	movw	r30, r0
    4f1a:	82 9f       	mul	r24, r18
    4f1c:	e0 0d       	add	r30, r0
    4f1e:	f1 1d       	adc	r31, r1
    4f20:	64 9f       	mul	r22, r20
    4f22:	e0 0d       	add	r30, r0
    4f24:	f1 1d       	adc	r31, r1
    4f26:	92 9f       	mul	r25, r18
    4f28:	f0 0d       	add	r31, r0
    4f2a:	83 9f       	mul	r24, r19
    4f2c:	f0 0d       	add	r31, r0
    4f2e:	74 9f       	mul	r23, r20
    4f30:	f0 0d       	add	r31, r0
    4f32:	65 9f       	mul	r22, r21
    4f34:	f0 0d       	add	r31, r0
    4f36:	99 27       	eor	r25, r25
    4f38:	72 9f       	mul	r23, r18
    4f3a:	b0 0d       	add	r27, r0
    4f3c:	e1 1d       	adc	r30, r1
    4f3e:	f9 1f       	adc	r31, r25
    4f40:	63 9f       	mul	r22, r19
    4f42:	b0 0d       	add	r27, r0
    4f44:	e1 1d       	adc	r30, r1
    4f46:	f9 1f       	adc	r31, r25
    4f48:	bd 01       	movw	r22, r26
    4f4a:	cf 01       	movw	r24, r30
    4f4c:	11 24       	eor	r1, r1
    4f4e:	08 95       	ret

00004f50 <__udivmodhi4>:
    4f50:	aa 1b       	sub	r26, r26
    4f52:	bb 1b       	sub	r27, r27
    4f54:	51 e1       	ldi	r21, 0x11	; 17
    4f56:	07 c0       	rjmp	.+14     	; 0x4f66 <__udivmodhi4_ep>

00004f58 <__udivmodhi4_loop>:
    4f58:	aa 1f       	adc	r26, r26
    4f5a:	bb 1f       	adc	r27, r27
    4f5c:	a6 17       	cp	r26, r22
    4f5e:	b7 07       	cpc	r27, r23
    4f60:	10 f0       	brcs	.+4      	; 0x4f66 <__udivmodhi4_ep>
    4f62:	a6 1b       	sub	r26, r22
    4f64:	b7 0b       	sbc	r27, r23

00004f66 <__udivmodhi4_ep>:
    4f66:	88 1f       	adc	r24, r24
    4f68:	99 1f       	adc	r25, r25
    4f6a:	5a 95       	dec	r21
    4f6c:	a9 f7       	brne	.-22     	; 0x4f58 <__udivmodhi4_loop>
    4f6e:	80 95       	com	r24
    4f70:	90 95       	com	r25
    4f72:	bc 01       	movw	r22, r24
    4f74:	cd 01       	movw	r24, r26
    4f76:	08 95       	ret

00004f78 <__divmodhi4>:
    4f78:	97 fb       	bst	r25, 7
    4f7a:	09 2e       	mov	r0, r25
    4f7c:	07 26       	eor	r0, r23
    4f7e:	0a d0       	rcall	.+20     	; 0x4f94 <__divmodhi4_neg1>
    4f80:	77 fd       	sbrc	r23, 7
    4f82:	04 d0       	rcall	.+8      	; 0x4f8c <__divmodhi4_neg2>
    4f84:	e5 df       	rcall	.-54     	; 0x4f50 <__udivmodhi4>
    4f86:	06 d0       	rcall	.+12     	; 0x4f94 <__divmodhi4_neg1>
    4f88:	00 20       	and	r0, r0
    4f8a:	1a f4       	brpl	.+6      	; 0x4f92 <__divmodhi4_exit>

00004f8c <__divmodhi4_neg2>:
    4f8c:	70 95       	com	r23
    4f8e:	61 95       	neg	r22
    4f90:	7f 4f       	sbci	r23, 0xFF	; 255

00004f92 <__divmodhi4_exit>:
    4f92:	08 95       	ret

00004f94 <__divmodhi4_neg1>:
    4f94:	f6 f7       	brtc	.-4      	; 0x4f92 <__divmodhi4_exit>
    4f96:	90 95       	com	r25
    4f98:	81 95       	neg	r24
    4f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f9c:	08 95       	ret

00004f9e <__divmodsi4>:
    4f9e:	97 fb       	bst	r25, 7
    4fa0:	09 2e       	mov	r0, r25
    4fa2:	05 26       	eor	r0, r21
    4fa4:	0e d0       	rcall	.+28     	; 0x4fc2 <__divmodsi4_neg1>
    4fa6:	57 fd       	sbrc	r21, 7
    4fa8:	04 d0       	rcall	.+8      	; 0x4fb2 <__divmodsi4_neg2>
    4faa:	14 d0       	rcall	.+40     	; 0x4fd4 <__udivmodsi4>
    4fac:	0a d0       	rcall	.+20     	; 0x4fc2 <__divmodsi4_neg1>
    4fae:	00 1c       	adc	r0, r0
    4fb0:	38 f4       	brcc	.+14     	; 0x4fc0 <__divmodsi4_exit>

00004fb2 <__divmodsi4_neg2>:
    4fb2:	50 95       	com	r21
    4fb4:	40 95       	com	r20
    4fb6:	30 95       	com	r19
    4fb8:	21 95       	neg	r18
    4fba:	3f 4f       	sbci	r19, 0xFF	; 255
    4fbc:	4f 4f       	sbci	r20, 0xFF	; 255
    4fbe:	5f 4f       	sbci	r21, 0xFF	; 255

00004fc0 <__divmodsi4_exit>:
    4fc0:	08 95       	ret

00004fc2 <__divmodsi4_neg1>:
    4fc2:	f6 f7       	brtc	.-4      	; 0x4fc0 <__divmodsi4_exit>
    4fc4:	90 95       	com	r25
    4fc6:	80 95       	com	r24
    4fc8:	70 95       	com	r23
    4fca:	61 95       	neg	r22
    4fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fce:	8f 4f       	sbci	r24, 0xFF	; 255
    4fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd2:	08 95       	ret

00004fd4 <__udivmodsi4>:
    4fd4:	a1 e2       	ldi	r26, 0x21	; 33
    4fd6:	1a 2e       	mov	r1, r26
    4fd8:	aa 1b       	sub	r26, r26
    4fda:	bb 1b       	sub	r27, r27
    4fdc:	fd 01       	movw	r30, r26
    4fde:	0d c0       	rjmp	.+26     	; 0x4ffa <__udivmodsi4_ep>

00004fe0 <__udivmodsi4_loop>:
    4fe0:	aa 1f       	adc	r26, r26
    4fe2:	bb 1f       	adc	r27, r27
    4fe4:	ee 1f       	adc	r30, r30
    4fe6:	ff 1f       	adc	r31, r31
    4fe8:	a2 17       	cp	r26, r18
    4fea:	b3 07       	cpc	r27, r19
    4fec:	e4 07       	cpc	r30, r20
    4fee:	f5 07       	cpc	r31, r21
    4ff0:	20 f0       	brcs	.+8      	; 0x4ffa <__udivmodsi4_ep>
    4ff2:	a2 1b       	sub	r26, r18
    4ff4:	b3 0b       	sbc	r27, r19
    4ff6:	e4 0b       	sbc	r30, r20
    4ff8:	f5 0b       	sbc	r31, r21

00004ffa <__udivmodsi4_ep>:
    4ffa:	66 1f       	adc	r22, r22
    4ffc:	77 1f       	adc	r23, r23
    4ffe:	88 1f       	adc	r24, r24
    5000:	99 1f       	adc	r25, r25
    5002:	1a 94       	dec	r1
    5004:	69 f7       	brne	.-38     	; 0x4fe0 <__udivmodsi4_loop>
    5006:	60 95       	com	r22
    5008:	70 95       	com	r23
    500a:	80 95       	com	r24
    500c:	90 95       	com	r25
    500e:	9b 01       	movw	r18, r22
    5010:	ac 01       	movw	r20, r24
    5012:	bd 01       	movw	r22, r26
    5014:	cf 01       	movw	r24, r30
    5016:	08 95       	ret

00005018 <__prologue_saves__>:
    5018:	2f 92       	push	r2
    501a:	3f 92       	push	r3
    501c:	4f 92       	push	r4
    501e:	5f 92       	push	r5
    5020:	6f 92       	push	r6
    5022:	7f 92       	push	r7
    5024:	8f 92       	push	r8
    5026:	9f 92       	push	r9
    5028:	af 92       	push	r10
    502a:	bf 92       	push	r11
    502c:	cf 92       	push	r12
    502e:	df 92       	push	r13
    5030:	ef 92       	push	r14
    5032:	ff 92       	push	r15
    5034:	0f 93       	push	r16
    5036:	1f 93       	push	r17
    5038:	cf 93       	push	r28
    503a:	df 93       	push	r29
    503c:	cd b7       	in	r28, 0x3d	; 61
    503e:	de b7       	in	r29, 0x3e	; 62
    5040:	ca 1b       	sub	r28, r26
    5042:	db 0b       	sbc	r29, r27
    5044:	0f b6       	in	r0, 0x3f	; 63
    5046:	f8 94       	cli
    5048:	de bf       	out	0x3e, r29	; 62
    504a:	0f be       	out	0x3f, r0	; 63
    504c:	cd bf       	out	0x3d, r28	; 61
    504e:	19 94       	eijmp

00005050 <__epilogue_restores__>:
    5050:	2a 88       	ldd	r2, Y+18	; 0x12
    5052:	39 88       	ldd	r3, Y+17	; 0x11
    5054:	48 88       	ldd	r4, Y+16	; 0x10
    5056:	5f 84       	ldd	r5, Y+15	; 0x0f
    5058:	6e 84       	ldd	r6, Y+14	; 0x0e
    505a:	7d 84       	ldd	r7, Y+13	; 0x0d
    505c:	8c 84       	ldd	r8, Y+12	; 0x0c
    505e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5060:	aa 84       	ldd	r10, Y+10	; 0x0a
    5062:	b9 84       	ldd	r11, Y+9	; 0x09
    5064:	c8 84       	ldd	r12, Y+8	; 0x08
    5066:	df 80       	ldd	r13, Y+7	; 0x07
    5068:	ee 80       	ldd	r14, Y+6	; 0x06
    506a:	fd 80       	ldd	r15, Y+5	; 0x05
    506c:	0c 81       	ldd	r16, Y+4	; 0x04
    506e:	1b 81       	ldd	r17, Y+3	; 0x03
    5070:	aa 81       	ldd	r26, Y+2	; 0x02
    5072:	b9 81       	ldd	r27, Y+1	; 0x01
    5074:	ce 0f       	add	r28, r30
    5076:	d1 1d       	adc	r29, r1
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	f8 94       	cli
    507c:	de bf       	out	0x3e, r29	; 62
    507e:	0f be       	out	0x3f, r0	; 63
    5080:	cd bf       	out	0x3d, r28	; 61
    5082:	ed 01       	movw	r28, r26
    5084:	08 95       	ret
    5086:	f5 d0       	rcall	.+490    	; 0x5272 <__fp_pscA>
    5088:	58 f0       	brcs	.+22     	; 0x50a0 <__epilogue_restores__+0x50>
    508a:	80 e8       	ldi	r24, 0x80	; 128
    508c:	91 e0       	ldi	r25, 0x01	; 1
    508e:	09 f4       	brne	.+2      	; 0x5092 <__epilogue_restores__+0x42>
    5090:	9e ef       	ldi	r25, 0xFE	; 254
    5092:	f6 d0       	rcall	.+492    	; 0x5280 <__fp_pscB>
    5094:	28 f0       	brcs	.+10     	; 0x50a0 <__epilogue_restores__+0x50>
    5096:	40 e8       	ldi	r20, 0x80	; 128
    5098:	51 e0       	ldi	r21, 0x01	; 1
    509a:	59 f4       	brne	.+22     	; 0x50b2 <atan2+0xe>
    509c:	5e ef       	ldi	r21, 0xFE	; 254
    509e:	09 c0       	rjmp	.+18     	; 0x50b2 <atan2+0xe>
    50a0:	c0 c0       	rjmp	.+384    	; 0x5222 <__fp_nan>
    50a2:	28 c1       	rjmp	.+592    	; 0x52f4 <__fp_zero>

000050a4 <atan2>:
    50a4:	e9 2f       	mov	r30, r25
    50a6:	e0 78       	andi	r30, 0x80	; 128
    50a8:	03 d1       	rcall	.+518    	; 0x52b0 <__fp_split3>
    50aa:	68 f3       	brcs	.-38     	; 0x5086 <__epilogue_restores__+0x36>
    50ac:	09 2e       	mov	r0, r25
    50ae:	05 2a       	or	r0, r21
    50b0:	c1 f3       	breq	.-16     	; 0x50a2 <__epilogue_restores__+0x52>
    50b2:	26 17       	cp	r18, r22
    50b4:	37 07       	cpc	r19, r23
    50b6:	48 07       	cpc	r20, r24
    50b8:	59 07       	cpc	r21, r25
    50ba:	38 f0       	brcs	.+14     	; 0x50ca <atan2+0x26>
    50bc:	0e 2e       	mov	r0, r30
    50be:	07 f8       	bld	r0, 7
    50c0:	e0 25       	eor	r30, r0
    50c2:	69 f0       	breq	.+26     	; 0x50de <atan2+0x3a>
    50c4:	e0 25       	eor	r30, r0
    50c6:	e0 64       	ori	r30, 0x40	; 64
    50c8:	0a c0       	rjmp	.+20     	; 0x50de <atan2+0x3a>
    50ca:	ef 63       	ori	r30, 0x3F	; 63
    50cc:	07 f8       	bld	r0, 7
    50ce:	00 94       	com	r0
    50d0:	07 fa       	bst	r0, 7
    50d2:	db 01       	movw	r26, r22
    50d4:	b9 01       	movw	r22, r18
    50d6:	9d 01       	movw	r18, r26
    50d8:	dc 01       	movw	r26, r24
    50da:	ca 01       	movw	r24, r20
    50dc:	ad 01       	movw	r20, r26
    50de:	ef 93       	push	r30
    50e0:	41 d0       	rcall	.+130    	; 0x5164 <__divsf3_pse>
    50e2:	d5 d0       	rcall	.+426    	; 0x528e <__fp_round>
    50e4:	0a d0       	rcall	.+20     	; 0x50fa <atan>
    50e6:	5f 91       	pop	r21
    50e8:	55 23       	and	r21, r21
    50ea:	31 f0       	breq	.+12     	; 0x50f8 <atan2+0x54>
    50ec:	2b ed       	ldi	r18, 0xDB	; 219
    50ee:	3f e0       	ldi	r19, 0x0F	; 15
    50f0:	49 e4       	ldi	r20, 0x49	; 73
    50f2:	50 fd       	sbrc	r21, 0
    50f4:	49 ec       	ldi	r20, 0xC9	; 201
    50f6:	df c9       	rjmp	.-3138   	; 0x44b6 <__addsf3>
    50f8:	08 95       	ret

000050fa <atan>:
    50fa:	df 93       	push	r29
    50fc:	dd 27       	eor	r29, r29
    50fe:	b9 2f       	mov	r27, r25
    5100:	bf 77       	andi	r27, 0x7F	; 127
    5102:	40 e8       	ldi	r20, 0x80	; 128
    5104:	5f e3       	ldi	r21, 0x3F	; 63
    5106:	16 16       	cp	r1, r22
    5108:	17 06       	cpc	r1, r23
    510a:	48 07       	cpc	r20, r24
    510c:	5b 07       	cpc	r21, r27
    510e:	10 f4       	brcc	.+4      	; 0x5114 <atan+0x1a>
    5110:	d9 2f       	mov	r29, r25
    5112:	f7 d0       	rcall	.+494    	; 0x5302 <inverse>
    5114:	9f 93       	push	r25
    5116:	8f 93       	push	r24
    5118:	7f 93       	push	r23
    511a:	6f 93       	push	r22
    511c:	5a d1       	rcall	.+692    	; 0x53d2 <square>
    511e:	ee e4       	ldi	r30, 0x4E	; 78
    5120:	f1 e0       	ldi	r31, 0x01	; 1
    5122:	82 d0       	rcall	.+260    	; 0x5228 <__fp_powser>
    5124:	b4 d0       	rcall	.+360    	; 0x528e <__fp_round>
    5126:	2f 91       	pop	r18
    5128:	3f 91       	pop	r19
    512a:	4f 91       	pop	r20
    512c:	5f 91       	pop	r21
    512e:	fa d0       	rcall	.+500    	; 0x5324 <__mulsf3x>
    5130:	dd 23       	and	r29, r29
    5132:	49 f0       	breq	.+18     	; 0x5146 <atan+0x4c>
    5134:	90 58       	subi	r25, 0x80	; 128
    5136:	a2 ea       	ldi	r26, 0xA2	; 162
    5138:	2a ed       	ldi	r18, 0xDA	; 218
    513a:	3f e0       	ldi	r19, 0x0F	; 15
    513c:	49 ec       	ldi	r20, 0xC9	; 201
    513e:	5f e3       	ldi	r21, 0x3F	; 63
    5140:	d0 78       	andi	r29, 0x80	; 128
    5142:	5d 27       	eor	r21, r29
    5144:	56 d1       	rcall	.+684    	; 0x53f2 <__addsf3x>
    5146:	df 91       	pop	r29
    5148:	a2 c0       	rjmp	.+324    	; 0x528e <__fp_round>
    514a:	9a d0       	rcall	.+308    	; 0x5280 <__fp_pscB>
    514c:	40 f0       	brcs	.+16     	; 0x515e <atan+0x64>
    514e:	91 d0       	rcall	.+290    	; 0x5272 <__fp_pscA>
    5150:	30 f0       	brcs	.+12     	; 0x515e <atan+0x64>
    5152:	21 f4       	brne	.+8      	; 0x515c <atan+0x62>
    5154:	5f 3f       	cpi	r21, 0xFF	; 255
    5156:	19 f0       	breq	.+6      	; 0x515e <atan+0x64>
    5158:	5e c0       	rjmp	.+188    	; 0x5216 <__fp_inf>
    515a:	51 11       	cpse	r21, r1
    515c:	cc c0       	rjmp	.+408    	; 0x52f6 <__fp_szero>
    515e:	61 c0       	rjmp	.+194    	; 0x5222 <__fp_nan>

00005160 <__divsf3x>:
    5160:	a7 d0       	rcall	.+334    	; 0x52b0 <__fp_split3>
    5162:	98 f3       	brcs	.-26     	; 0x514a <atan+0x50>

00005164 <__divsf3_pse>:
    5164:	99 23       	and	r25, r25
    5166:	c9 f3       	breq	.-14     	; 0x515a <atan+0x60>
    5168:	55 23       	and	r21, r21
    516a:	b1 f3       	breq	.-20     	; 0x5158 <atan+0x5e>
    516c:	95 1b       	sub	r25, r21
    516e:	55 0b       	sbc	r21, r21
    5170:	bb 27       	eor	r27, r27
    5172:	aa 27       	eor	r26, r26
    5174:	62 17       	cp	r22, r18
    5176:	73 07       	cpc	r23, r19
    5178:	84 07       	cpc	r24, r20
    517a:	38 f0       	brcs	.+14     	; 0x518a <__divsf3_pse+0x26>
    517c:	9f 5f       	subi	r25, 0xFF	; 255
    517e:	5f 4f       	sbci	r21, 0xFF	; 255
    5180:	22 0f       	add	r18, r18
    5182:	33 1f       	adc	r19, r19
    5184:	44 1f       	adc	r20, r20
    5186:	aa 1f       	adc	r26, r26
    5188:	a9 f3       	breq	.-22     	; 0x5174 <__divsf3_pse+0x10>
    518a:	33 d0       	rcall	.+102    	; 0x51f2 <__divsf3_pse+0x8e>
    518c:	0e 2e       	mov	r0, r30
    518e:	3a f0       	brmi	.+14     	; 0x519e <__divsf3_pse+0x3a>
    5190:	e0 e8       	ldi	r30, 0x80	; 128
    5192:	30 d0       	rcall	.+96     	; 0x51f4 <__divsf3_pse+0x90>
    5194:	91 50       	subi	r25, 0x01	; 1
    5196:	50 40       	sbci	r21, 0x00	; 0
    5198:	e6 95       	lsr	r30
    519a:	00 1c       	adc	r0, r0
    519c:	ca f7       	brpl	.-14     	; 0x5190 <__divsf3_pse+0x2c>
    519e:	29 d0       	rcall	.+82     	; 0x51f2 <__divsf3_pse+0x8e>
    51a0:	fe 2f       	mov	r31, r30
    51a2:	27 d0       	rcall	.+78     	; 0x51f2 <__divsf3_pse+0x8e>
    51a4:	66 0f       	add	r22, r22
    51a6:	77 1f       	adc	r23, r23
    51a8:	88 1f       	adc	r24, r24
    51aa:	bb 1f       	adc	r27, r27
    51ac:	26 17       	cp	r18, r22
    51ae:	37 07       	cpc	r19, r23
    51b0:	48 07       	cpc	r20, r24
    51b2:	ab 07       	cpc	r26, r27
    51b4:	b0 e8       	ldi	r27, 0x80	; 128
    51b6:	09 f0       	breq	.+2      	; 0x51ba <__divsf3_pse+0x56>
    51b8:	bb 0b       	sbc	r27, r27
    51ba:	80 2d       	mov	r24, r0
    51bc:	bf 01       	movw	r22, r30
    51be:	ff 27       	eor	r31, r31
    51c0:	93 58       	subi	r25, 0x83	; 131
    51c2:	5f 4f       	sbci	r21, 0xFF	; 255
    51c4:	2a f0       	brmi	.+10     	; 0x51d0 <__divsf3_pse+0x6c>
    51c6:	9e 3f       	cpi	r25, 0xFE	; 254
    51c8:	51 05       	cpc	r21, r1
    51ca:	68 f0       	brcs	.+26     	; 0x51e6 <__divsf3_pse+0x82>
    51cc:	24 c0       	rjmp	.+72     	; 0x5216 <__fp_inf>
    51ce:	93 c0       	rjmp	.+294    	; 0x52f6 <__fp_szero>
    51d0:	5f 3f       	cpi	r21, 0xFF	; 255
    51d2:	ec f3       	brlt	.-6      	; 0x51ce <__divsf3_pse+0x6a>
    51d4:	98 3e       	cpi	r25, 0xE8	; 232
    51d6:	dc f3       	brlt	.-10     	; 0x51ce <__divsf3_pse+0x6a>
    51d8:	86 95       	lsr	r24
    51da:	77 95       	ror	r23
    51dc:	67 95       	ror	r22
    51de:	b7 95       	ror	r27
    51e0:	f7 95       	ror	r31
    51e2:	9f 5f       	subi	r25, 0xFF	; 255
    51e4:	c9 f7       	brne	.-14     	; 0x51d8 <__divsf3_pse+0x74>
    51e6:	88 0f       	add	r24, r24
    51e8:	91 1d       	adc	r25, r1
    51ea:	96 95       	lsr	r25
    51ec:	87 95       	ror	r24
    51ee:	97 f9       	bld	r25, 7
    51f0:	08 95       	ret
    51f2:	e1 e0       	ldi	r30, 0x01	; 1
    51f4:	66 0f       	add	r22, r22
    51f6:	77 1f       	adc	r23, r23
    51f8:	88 1f       	adc	r24, r24
    51fa:	bb 1f       	adc	r27, r27
    51fc:	62 17       	cp	r22, r18
    51fe:	73 07       	cpc	r23, r19
    5200:	84 07       	cpc	r24, r20
    5202:	ba 07       	cpc	r27, r26
    5204:	20 f0       	brcs	.+8      	; 0x520e <__divsf3_pse+0xaa>
    5206:	62 1b       	sub	r22, r18
    5208:	73 0b       	sbc	r23, r19
    520a:	84 0b       	sbc	r24, r20
    520c:	ba 0b       	sbc	r27, r26
    520e:	ee 1f       	adc	r30, r30
    5210:	88 f7       	brcc	.-30     	; 0x51f4 <__divsf3_pse+0x90>
    5212:	e0 95       	com	r30
    5214:	08 95       	ret

00005216 <__fp_inf>:
    5216:	97 f9       	bld	r25, 7
    5218:	9f 67       	ori	r25, 0x7F	; 127
    521a:	80 e8       	ldi	r24, 0x80	; 128
    521c:	70 e0       	ldi	r23, 0x00	; 0
    521e:	60 e0       	ldi	r22, 0x00	; 0
    5220:	08 95       	ret

00005222 <__fp_nan>:
    5222:	9f ef       	ldi	r25, 0xFF	; 255
    5224:	80 ec       	ldi	r24, 0xC0	; 192
    5226:	08 95       	ret

00005228 <__fp_powser>:
    5228:	df 93       	push	r29
    522a:	cf 93       	push	r28
    522c:	1f 93       	push	r17
    522e:	0f 93       	push	r16
    5230:	ff 92       	push	r15
    5232:	ef 92       	push	r14
    5234:	df 92       	push	r13
    5236:	7b 01       	movw	r14, r22
    5238:	8c 01       	movw	r16, r24
    523a:	68 94       	set
    523c:	05 c0       	rjmp	.+10     	; 0x5248 <__fp_powser+0x20>
    523e:	da 2e       	mov	r13, r26
    5240:	ef 01       	movw	r28, r30
    5242:	70 d0       	rcall	.+224    	; 0x5324 <__mulsf3x>
    5244:	fe 01       	movw	r30, r28
    5246:	e8 94       	clt
    5248:	a5 91       	lpm	r26, Z+
    524a:	25 91       	lpm	r18, Z+
    524c:	35 91       	lpm	r19, Z+
    524e:	45 91       	lpm	r20, Z+
    5250:	55 91       	lpm	r21, Z+
    5252:	ae f3       	brts	.-22     	; 0x523e <__fp_powser+0x16>
    5254:	ef 01       	movw	r28, r30
    5256:	cd d0       	rcall	.+410    	; 0x53f2 <__addsf3x>
    5258:	fe 01       	movw	r30, r28
    525a:	97 01       	movw	r18, r14
    525c:	a8 01       	movw	r20, r16
    525e:	da 94       	dec	r13
    5260:	79 f7       	brne	.-34     	; 0x5240 <__fp_powser+0x18>
    5262:	df 90       	pop	r13
    5264:	ef 90       	pop	r14
    5266:	ff 90       	pop	r15
    5268:	0f 91       	pop	r16
    526a:	1f 91       	pop	r17
    526c:	cf 91       	pop	r28
    526e:	df 91       	pop	r29
    5270:	08 95       	ret

00005272 <__fp_pscA>:
    5272:	00 24       	eor	r0, r0
    5274:	0a 94       	dec	r0
    5276:	16 16       	cp	r1, r22
    5278:	17 06       	cpc	r1, r23
    527a:	18 06       	cpc	r1, r24
    527c:	09 06       	cpc	r0, r25
    527e:	08 95       	ret

00005280 <__fp_pscB>:
    5280:	00 24       	eor	r0, r0
    5282:	0a 94       	dec	r0
    5284:	12 16       	cp	r1, r18
    5286:	13 06       	cpc	r1, r19
    5288:	14 06       	cpc	r1, r20
    528a:	05 06       	cpc	r0, r21
    528c:	08 95       	ret

0000528e <__fp_round>:
    528e:	09 2e       	mov	r0, r25
    5290:	03 94       	inc	r0
    5292:	00 0c       	add	r0, r0
    5294:	11 f4       	brne	.+4      	; 0x529a <__fp_round+0xc>
    5296:	88 23       	and	r24, r24
    5298:	52 f0       	brmi	.+20     	; 0x52ae <__fp_round+0x20>
    529a:	bb 0f       	add	r27, r27
    529c:	40 f4       	brcc	.+16     	; 0x52ae <__fp_round+0x20>
    529e:	bf 2b       	or	r27, r31
    52a0:	11 f4       	brne	.+4      	; 0x52a6 <__fp_round+0x18>
    52a2:	60 ff       	sbrs	r22, 0
    52a4:	04 c0       	rjmp	.+8      	; 0x52ae <__fp_round+0x20>
    52a6:	6f 5f       	subi	r22, 0xFF	; 255
    52a8:	7f 4f       	sbci	r23, 0xFF	; 255
    52aa:	8f 4f       	sbci	r24, 0xFF	; 255
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	08 95       	ret

000052b0 <__fp_split3>:
    52b0:	57 fd       	sbrc	r21, 7
    52b2:	90 58       	subi	r25, 0x80	; 128
    52b4:	44 0f       	add	r20, r20
    52b6:	55 1f       	adc	r21, r21
    52b8:	59 f0       	breq	.+22     	; 0x52d0 <__fp_splitA+0x10>
    52ba:	5f 3f       	cpi	r21, 0xFF	; 255
    52bc:	71 f0       	breq	.+28     	; 0x52da <__fp_splitA+0x1a>
    52be:	47 95       	ror	r20

000052c0 <__fp_splitA>:
    52c0:	88 0f       	add	r24, r24
    52c2:	97 fb       	bst	r25, 7
    52c4:	99 1f       	adc	r25, r25
    52c6:	61 f0       	breq	.+24     	; 0x52e0 <__fp_splitA+0x20>
    52c8:	9f 3f       	cpi	r25, 0xFF	; 255
    52ca:	79 f0       	breq	.+30     	; 0x52ea <__fp_splitA+0x2a>
    52cc:	87 95       	ror	r24
    52ce:	08 95       	ret
    52d0:	12 16       	cp	r1, r18
    52d2:	13 06       	cpc	r1, r19
    52d4:	14 06       	cpc	r1, r20
    52d6:	55 1f       	adc	r21, r21
    52d8:	f2 cf       	rjmp	.-28     	; 0x52be <__fp_split3+0xe>
    52da:	46 95       	lsr	r20
    52dc:	f1 df       	rcall	.-30     	; 0x52c0 <__fp_splitA>
    52de:	08 c0       	rjmp	.+16     	; 0x52f0 <__fp_splitA+0x30>
    52e0:	16 16       	cp	r1, r22
    52e2:	17 06       	cpc	r1, r23
    52e4:	18 06       	cpc	r1, r24
    52e6:	99 1f       	adc	r25, r25
    52e8:	f1 cf       	rjmp	.-30     	; 0x52cc <__fp_splitA+0xc>
    52ea:	86 95       	lsr	r24
    52ec:	71 05       	cpc	r23, r1
    52ee:	61 05       	cpc	r22, r1
    52f0:	08 94       	sec
    52f2:	08 95       	ret

000052f4 <__fp_zero>:
    52f4:	e8 94       	clt

000052f6 <__fp_szero>:
    52f6:	bb 27       	eor	r27, r27
    52f8:	66 27       	eor	r22, r22
    52fa:	77 27       	eor	r23, r23
    52fc:	cb 01       	movw	r24, r22
    52fe:	97 f9       	bld	r25, 7
    5300:	08 95       	ret

00005302 <inverse>:
    5302:	9b 01       	movw	r18, r22
    5304:	ac 01       	movw	r20, r24
    5306:	60 e0       	ldi	r22, 0x00	; 0
    5308:	70 e0       	ldi	r23, 0x00	; 0
    530a:	80 e8       	ldi	r24, 0x80	; 128
    530c:	9f e3       	ldi	r25, 0x3F	; 63
    530e:	ff c9       	rjmp	.-3074   	; 0x470e <__divsf3>
    5310:	b0 df       	rcall	.-160    	; 0x5272 <__fp_pscA>
    5312:	28 f0       	brcs	.+10     	; 0x531e <inverse+0x1c>
    5314:	b5 df       	rcall	.-150    	; 0x5280 <__fp_pscB>
    5316:	18 f0       	brcs	.+6      	; 0x531e <inverse+0x1c>
    5318:	95 23       	and	r25, r21
    531a:	09 f0       	breq	.+2      	; 0x531e <inverse+0x1c>
    531c:	7c cf       	rjmp	.-264    	; 0x5216 <__fp_inf>
    531e:	81 cf       	rjmp	.-254    	; 0x5222 <__fp_nan>
    5320:	11 24       	eor	r1, r1
    5322:	e9 cf       	rjmp	.-46     	; 0x52f6 <__fp_szero>

00005324 <__mulsf3x>:
    5324:	c5 df       	rcall	.-118    	; 0x52b0 <__fp_split3>
    5326:	a0 f3       	brcs	.-24     	; 0x5310 <inverse+0xe>

00005328 <__mulsf3_pse>:
    5328:	95 9f       	mul	r25, r21
    532a:	d1 f3       	breq	.-12     	; 0x5320 <inverse+0x1e>
    532c:	95 0f       	add	r25, r21
    532e:	50 e0       	ldi	r21, 0x00	; 0
    5330:	55 1f       	adc	r21, r21
    5332:	62 9f       	mul	r22, r18
    5334:	f0 01       	movw	r30, r0
    5336:	72 9f       	mul	r23, r18
    5338:	bb 27       	eor	r27, r27
    533a:	f0 0d       	add	r31, r0
    533c:	b1 1d       	adc	r27, r1
    533e:	63 9f       	mul	r22, r19
    5340:	aa 27       	eor	r26, r26
    5342:	f0 0d       	add	r31, r0
    5344:	b1 1d       	adc	r27, r1
    5346:	aa 1f       	adc	r26, r26
    5348:	64 9f       	mul	r22, r20
    534a:	66 27       	eor	r22, r22
    534c:	b0 0d       	add	r27, r0
    534e:	a1 1d       	adc	r26, r1
    5350:	66 1f       	adc	r22, r22
    5352:	82 9f       	mul	r24, r18
    5354:	22 27       	eor	r18, r18
    5356:	b0 0d       	add	r27, r0
    5358:	a1 1d       	adc	r26, r1
    535a:	62 1f       	adc	r22, r18
    535c:	73 9f       	mul	r23, r19
    535e:	b0 0d       	add	r27, r0
    5360:	a1 1d       	adc	r26, r1
    5362:	62 1f       	adc	r22, r18
    5364:	83 9f       	mul	r24, r19
    5366:	a0 0d       	add	r26, r0
    5368:	61 1d       	adc	r22, r1
    536a:	22 1f       	adc	r18, r18
    536c:	74 9f       	mul	r23, r20
    536e:	33 27       	eor	r19, r19
    5370:	a0 0d       	add	r26, r0
    5372:	61 1d       	adc	r22, r1
    5374:	23 1f       	adc	r18, r19
    5376:	84 9f       	mul	r24, r20
    5378:	60 0d       	add	r22, r0
    537a:	21 1d       	adc	r18, r1
    537c:	82 2f       	mov	r24, r18
    537e:	76 2f       	mov	r23, r22
    5380:	6a 2f       	mov	r22, r26
    5382:	11 24       	eor	r1, r1
    5384:	9f 57       	subi	r25, 0x7F	; 127
    5386:	50 40       	sbci	r21, 0x00	; 0
    5388:	8a f0       	brmi	.+34     	; 0x53ac <__mulsf3_pse+0x84>
    538a:	e1 f0       	breq	.+56     	; 0x53c4 <__mulsf3_pse+0x9c>
    538c:	88 23       	and	r24, r24
    538e:	4a f0       	brmi	.+18     	; 0x53a2 <__mulsf3_pse+0x7a>
    5390:	ee 0f       	add	r30, r30
    5392:	ff 1f       	adc	r31, r31
    5394:	bb 1f       	adc	r27, r27
    5396:	66 1f       	adc	r22, r22
    5398:	77 1f       	adc	r23, r23
    539a:	88 1f       	adc	r24, r24
    539c:	91 50       	subi	r25, 0x01	; 1
    539e:	50 40       	sbci	r21, 0x00	; 0
    53a0:	a9 f7       	brne	.-22     	; 0x538c <__mulsf3_pse+0x64>
    53a2:	9e 3f       	cpi	r25, 0xFE	; 254
    53a4:	51 05       	cpc	r21, r1
    53a6:	70 f0       	brcs	.+28     	; 0x53c4 <__mulsf3_pse+0x9c>
    53a8:	36 cf       	rjmp	.-404    	; 0x5216 <__fp_inf>
    53aa:	a5 cf       	rjmp	.-182    	; 0x52f6 <__fp_szero>
    53ac:	5f 3f       	cpi	r21, 0xFF	; 255
    53ae:	ec f3       	brlt	.-6      	; 0x53aa <__mulsf3_pse+0x82>
    53b0:	98 3e       	cpi	r25, 0xE8	; 232
    53b2:	dc f3       	brlt	.-10     	; 0x53aa <__mulsf3_pse+0x82>
    53b4:	86 95       	lsr	r24
    53b6:	77 95       	ror	r23
    53b8:	67 95       	ror	r22
    53ba:	b7 95       	ror	r27
    53bc:	f7 95       	ror	r31
    53be:	e7 95       	ror	r30
    53c0:	9f 5f       	subi	r25, 0xFF	; 255
    53c2:	c1 f7       	brne	.-16     	; 0x53b4 <__mulsf3_pse+0x8c>
    53c4:	fe 2b       	or	r31, r30
    53c6:	88 0f       	add	r24, r24
    53c8:	91 1d       	adc	r25, r1
    53ca:	96 95       	lsr	r25
    53cc:	87 95       	ror	r24
    53ce:	97 f9       	bld	r25, 7
    53d0:	08 95       	ret

000053d2 <square>:
    53d2:	9b 01       	movw	r18, r22
    53d4:	ac 01       	movw	r20, r24
    53d6:	9c c8       	rjmp	.-3784   	; 0x4510 <__mulsf3>
    53d8:	4c df       	rcall	.-360    	; 0x5272 <__fp_pscA>
    53da:	30 f0       	brcs	.+12     	; 0x53e8 <square+0x16>
    53dc:	51 df       	rcall	.-350    	; 0x5280 <__fp_pscB>
    53de:	20 f0       	brcs	.+8      	; 0x53e8 <square+0x16>
    53e0:	31 f4       	brne	.+12     	; 0x53ee <square+0x1c>
    53e2:	9f 3f       	cpi	r25, 0xFF	; 255
    53e4:	11 f4       	brne	.+4      	; 0x53ea <square+0x18>
    53e6:	1e f4       	brtc	.+6      	; 0x53ee <square+0x1c>
    53e8:	1c cf       	rjmp	.-456    	; 0x5222 <__fp_nan>
    53ea:	0e f4       	brtc	.+2      	; 0x53ee <square+0x1c>
    53ec:	e0 95       	com	r30
    53ee:	e7 fb       	bst	r30, 7
    53f0:	12 cf       	rjmp	.-476    	; 0x5216 <__fp_inf>

000053f2 <__addsf3x>:
    53f2:	e9 2f       	mov	r30, r25
    53f4:	5d df       	rcall	.-326    	; 0x52b0 <__fp_split3>
    53f6:	80 f3       	brcs	.-32     	; 0x53d8 <square+0x6>
    53f8:	ba 17       	cp	r27, r26
    53fa:	62 07       	cpc	r22, r18
    53fc:	73 07       	cpc	r23, r19
    53fe:	84 07       	cpc	r24, r20
    5400:	95 07       	cpc	r25, r21
    5402:	18 f0       	brcs	.+6      	; 0x540a <__addsf3x+0x18>
    5404:	71 f4       	brne	.+28     	; 0x5422 <__addsf3x+0x30>
    5406:	9e f5       	brtc	.+102    	; 0x546e <__addsf3x+0x7c>
    5408:	75 cf       	rjmp	.-278    	; 0x52f4 <__fp_zero>
    540a:	0e f4       	brtc	.+2      	; 0x540e <__addsf3x+0x1c>
    540c:	e0 95       	com	r30
    540e:	0b 2e       	mov	r0, r27
    5410:	ba 2f       	mov	r27, r26
    5412:	a0 2d       	mov	r26, r0
    5414:	0b 01       	movw	r0, r22
    5416:	b9 01       	movw	r22, r18
    5418:	90 01       	movw	r18, r0
    541a:	0c 01       	movw	r0, r24
    541c:	ca 01       	movw	r24, r20
    541e:	a0 01       	movw	r20, r0
    5420:	11 24       	eor	r1, r1
    5422:	ff 27       	eor	r31, r31
    5424:	59 1b       	sub	r21, r25
    5426:	99 f0       	breq	.+38     	; 0x544e <__addsf3x+0x5c>
    5428:	59 3f       	cpi	r21, 0xF9	; 249
    542a:	50 f4       	brcc	.+20     	; 0x5440 <__addsf3x+0x4e>
    542c:	50 3e       	cpi	r21, 0xE0	; 224
    542e:	68 f1       	brcs	.+90     	; 0x548a <__addsf3x+0x98>
    5430:	1a 16       	cp	r1, r26
    5432:	f0 40       	sbci	r31, 0x00	; 0
    5434:	a2 2f       	mov	r26, r18
    5436:	23 2f       	mov	r18, r19
    5438:	34 2f       	mov	r19, r20
    543a:	44 27       	eor	r20, r20
    543c:	58 5f       	subi	r21, 0xF8	; 248
    543e:	f3 cf       	rjmp	.-26     	; 0x5426 <__addsf3x+0x34>
    5440:	46 95       	lsr	r20
    5442:	37 95       	ror	r19
    5444:	27 95       	ror	r18
    5446:	a7 95       	ror	r26
    5448:	f0 40       	sbci	r31, 0x00	; 0
    544a:	53 95       	inc	r21
    544c:	c9 f7       	brne	.-14     	; 0x5440 <__addsf3x+0x4e>
    544e:	7e f4       	brtc	.+30     	; 0x546e <__addsf3x+0x7c>
    5450:	1f 16       	cp	r1, r31
    5452:	ba 0b       	sbc	r27, r26
    5454:	62 0b       	sbc	r22, r18
    5456:	73 0b       	sbc	r23, r19
    5458:	84 0b       	sbc	r24, r20
    545a:	ba f0       	brmi	.+46     	; 0x548a <__addsf3x+0x98>
    545c:	91 50       	subi	r25, 0x01	; 1
    545e:	a1 f0       	breq	.+40     	; 0x5488 <__addsf3x+0x96>
    5460:	ff 0f       	add	r31, r31
    5462:	bb 1f       	adc	r27, r27
    5464:	66 1f       	adc	r22, r22
    5466:	77 1f       	adc	r23, r23
    5468:	88 1f       	adc	r24, r24
    546a:	c2 f7       	brpl	.-16     	; 0x545c <__addsf3x+0x6a>
    546c:	0e c0       	rjmp	.+28     	; 0x548a <__addsf3x+0x98>
    546e:	ba 0f       	add	r27, r26
    5470:	62 1f       	adc	r22, r18
    5472:	73 1f       	adc	r23, r19
    5474:	84 1f       	adc	r24, r20
    5476:	48 f4       	brcc	.+18     	; 0x548a <__addsf3x+0x98>
    5478:	87 95       	ror	r24
    547a:	77 95       	ror	r23
    547c:	67 95       	ror	r22
    547e:	b7 95       	ror	r27
    5480:	f7 95       	ror	r31
    5482:	9e 3f       	cpi	r25, 0xFE	; 254
    5484:	08 f0       	brcs	.+2      	; 0x5488 <__addsf3x+0x96>
    5486:	b3 cf       	rjmp	.-154    	; 0x53ee <square+0x1c>
    5488:	93 95       	inc	r25
    548a:	88 0f       	add	r24, r24
    548c:	08 f0       	brcs	.+2      	; 0x5490 <__addsf3x+0x9e>
    548e:	99 27       	eor	r25, r25
    5490:	ee 0f       	add	r30, r30
    5492:	97 95       	ror	r25
    5494:	87 95       	ror	r24
    5496:	08 95       	ret

00005498 <_exit>:
    5498:	ff cf       	rjmp	.-2      	; 0x5498 <_exit>
