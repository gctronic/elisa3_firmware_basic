
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00005160  000051f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000135  00800324  00800324  00005318  2**0
                  ALLOC
  3 .stab         000024b4  00000000  00000000  00005318  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007c9  00000000  00000000  000077cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00007f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000fe6  00000000  00000000  0000824d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000042de  00000000  00000000  00009233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016c7  00000000  00000000  0000d511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004e09  00000000  00000000  0000ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000740  00000000  00000000  000139e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000fb1  00000000  00000000  00014124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015d2  00000000  00000000  000150d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  000166a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000158  00000000  00000000  000168c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__vector_32>
      84:	0c 94 95 19 	jmp	0x332a	; 0x332a <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_42>
      ac:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	1d 0a       	sbc	r1, r29
      e6:	01 0a       	sbc	r0, r17
      e8:	cf 09       	sbc	r28, r15
      ea:	92 0a       	sbc	r9, r18
      ec:	5c 0a       	sbc	r5, r28
      ee:	85 0a       	sbc	r8, r21
      f0:	a6 09       	sbc	r26, r6
      f2:	8a 09       	sbc	r24, r10
      f4:	5d 09       	sbc	r21, r13
      f6:	45 09       	sbc	r20, r5
      f8:	e6 08       	sbc	r14, r6
      fa:	e6 08       	sbc	r14, r6
      fc:	e6 08       	sbc	r14, r6
      fe:	e6 08       	sbc	r14, r6
     100:	e6 08       	sbc	r14, r6
     102:	e6 08       	sbc	r14, r6
     104:	39 09       	sbc	r19, r9
     106:	2e 09       	sbc	r18, r14
     108:	e6 08       	sbc	r14, r6
     10a:	e6 08       	sbc	r14, r6
     10c:	e6 08       	sbc	r14, r6
     10e:	e6 08       	sbc	r14, r6
     110:	e6 08       	sbc	r14, r6
     112:	e6 08       	sbc	r14, r6
     114:	e6 08       	sbc	r14, r6
     116:	e6 08       	sbc	r14, r6
     118:	e6 08       	sbc	r14, r6
     11a:	e6 08       	sbc	r14, r6
     11c:	e6 08       	sbc	r14, r6
     11e:	e6 08       	sbc	r14, r6
     120:	5d 09       	sbc	r21, r13
     122:	cf 09       	sbc	r28, r15
     124:	22 09       	sbc	r18, r2
     126:	1d 09       	sbc	r17, r13
     128:	e6 08       	sbc	r14, r6
     12a:	e6 08       	sbc	r14, r6
     12c:	e6 08       	sbc	r14, r6
     12e:	e6 08       	sbc	r14, r6
     130:	e6 08       	sbc	r14, r6
     132:	e6 08       	sbc	r14, r6
     134:	e6 08       	sbc	r14, r6
     136:	e6 08       	sbc	r14, r6
     138:	e6 08       	sbc	r14, r6
     13a:	e6 08       	sbc	r14, r6
     13c:	e6 08       	sbc	r14, r6
     13e:	e6 08       	sbc	r14, r6
     140:	5c 0a       	sbc	r5, r28
     142:	a6 09       	sbc	r26, r6
     144:	e6 08       	sbc	r14, r6
     146:	e6 08       	sbc	r14, r6
     148:	1d 0a       	sbc	r1, r29
     14a:	85 0a       	sbc	r8, r21
     14c:	46 0a       	sbc	r4, r22
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e0 e6       	ldi	r30, 0x60	; 96
     194:	f1 e5       	ldi	r31, 0x51	; 81
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a9 35       	cpi	r26, 0x59	; 89
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 af 28 	jmp	0x515e	; 0x515e <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;

	initPeripherals();
     1ce:	0e 94 3d 12 	call	0x247a	; 0x247a <initPeripherals>

	calibrateSensors();
     1d2:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <calibrateSensors>

	initBehaviors();
     1d6:	0e 94 ab 19 	call	0x3356	; 0x3356 <initBehaviors>

	startTime = getTime100MicroSec();
     1da:	0e 94 2a 13 	call	0x2654	; 0x2654 <getTime100MicroSec>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1e2:	cc 24       	eor	r12, r12
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
			GRREEN_LED3_OFF;
			GRREEN_LED4_OFF;
			GRREEN_LED5_OFF;
			GRREEN_LED6_OFF;
			GRREEN_LED7_OFF;
			pwm_red = 255;
     1e8:	dd 24       	eor	r13, r13
     1ea:	da 94       	dec	r13
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     1ec:	0e 94 18 12 	call	0x2430	; 0x2430 <getSelector>
     1f0:	80 93 25 04 	sts	0x0425, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1f4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <readAccelXYZ>

		computeAngle();
     1f8:	0e 94 bb 21 	call	0x4376	; 0x4376 <computeAngle>
	
		endTime = getTime100MicroSec();
     1fc:	0e 94 2a 13 	call	0x2654	; 0x2654 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     200:	6e 19       	sub	r22, r14
     202:	7f 09       	sbc	r23, r15
     204:	80 0b       	sbc	r24, r16
     206:	91 0b       	sbc	r25, r17
     208:	6e 31       	cpi	r22, 0x1E	; 30
     20a:	2b e4       	ldi	r18, 0x4B	; 75
     20c:	72 07       	cpc	r23, r18
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	82 07       	cpc	r24, r18
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	92 07       	cpc	r25, r18
     216:	08 f0       	brcs	.+2      	; 0x21a <main+0x5c>
     218:	7f c0       	rjmp	.+254    	; 0x318 <main+0x15a>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     21a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <handleIRRemoteCommands>


		handleRFCommands();
     21e:	0e 94 b9 03 	call	0x772	; 0x772 <handleRFCommands>


		usartTransmit(currentSelector);		// send the current selector position through uart as debug info
     222:	80 91 25 04 	lds	r24, 0x0425
     226:	0e 94 4a 10 	call	0x2094	; 0x2094 <usartTransmit>


		switch(currentSelector) {
     22a:	80 91 25 04 	lds	r24, 0x0425
     22e:	82 30       	cpi	r24, 0x02	; 2
     230:	09 f4       	brne	.+2      	; 0x234 <main+0x76>
     232:	81 c0       	rjmp	.+258    	; 0x336 <main+0x178>
     234:	83 30       	cpi	r24, 0x03	; 3
     236:	08 f0       	brcs	.+2      	; 0x23a <main+0x7c>
     238:	49 c0       	rjmp	.+146    	; 0x2cc <main+0x10e>
     23a:	88 23       	and	r24, r24
     23c:	09 f0       	breq	.+2      	; 0x240 <main+0x82>
     23e:	80 c0       	rjmp	.+256    	; 0x340 <main+0x182>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     240:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <handleMotorsWithNoController>
     244:	80 91 25 04 	lds	r24, 0x0425
					setRightSpeed(25);
					break;
  
		}

		if(currentSelector != 0) {
     248:	88 23       	and	r24, r24
     24a:	09 f0       	breq	.+2      	; 0x24e <main+0x90>
     24c:	60 c0       	rjmp	.+192    	; 0x30e <main+0x150>
     24e:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     250:	c8 16       	cp	r12, r24
     252:	61 f2       	breq	.-104    	; 0x1ec <main+0x2e>
			disableObstacleAvoidance();
     254:	0e 94 bc 1b 	call	0x3778	; 0x3778 <disableObstacleAvoidance>
			disableCliffAvoidance();
     258:	0e 94 c3 1b 	call	0x3786	; 0x3786 <disableCliffAvoidance>
			GRREEN_LED0_OFF;
     25c:	80 91 0b 01 	lds	r24, 0x010B
     260:	81 60       	ori	r24, 0x01	; 1
     262:	80 93 0b 01 	sts	0x010B, r24
			GRREEN_LED1_OFF;
     266:	80 91 0b 01 	lds	r24, 0x010B
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	80 93 0b 01 	sts	0x010B, r24
			GRREEN_LED2_OFF;
     270:	80 91 0b 01 	lds	r24, 0x010B
     274:	84 60       	ori	r24, 0x04	; 4
     276:	80 93 0b 01 	sts	0x010B, r24
			GRREEN_LED3_OFF;
     27a:	a3 9a       	sbi	0x14, 3	; 20
			GRREEN_LED4_OFF;
     27c:	80 91 0b 01 	lds	r24, 0x010B
     280:	80 61       	ori	r24, 0x10	; 16
     282:	80 93 0b 01 	sts	0x010B, r24
			GRREEN_LED5_OFF;
     286:	80 91 0b 01 	lds	r24, 0x010B
     28a:	80 62       	ori	r24, 0x20	; 32
     28c:	80 93 0b 01 	sts	0x010B, r24
			GRREEN_LED6_OFF;
     290:	80 91 0b 01 	lds	r24, 0x010B
     294:	80 64       	ori	r24, 0x40	; 64
     296:	80 93 0b 01 	sts	0x010B, r24
			GRREEN_LED7_OFF;
     29a:	80 91 0b 01 	lds	r24, 0x010B
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2a4:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2a8:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2ac:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
			updateGreenLed(pwm_green);
     2b6:	80 91 0d 02 	lds	r24, 0x020D
     2ba:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
			updateBlueLed(pwm_blue);
     2be:	80 91 0e 02 	lds	r24, 0x020E
     2c2:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>
     2c6:	c0 90 25 04 	lds	r12, 0x0425
     2ca:	90 cf       	rjmp	.-224    	; 0x1ec <main+0x2e>


		usartTransmit(currentSelector);		// send the current selector position through uart as debug info


		switch(currentSelector) {
     2cc:	84 30       	cpi	r24, 0x04	; 4
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0x114>
     2d0:	3f c0       	rjmp	.+126    	; 0x350 <main+0x192>
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	70 f1       	brcs	.+92     	; 0x332 <main+0x174>
     2d6:	85 30       	cpi	r24, 0x05	; 5
     2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x11e>
     2da:	b6 cf       	rjmp	.-148    	; 0x248 <main+0x8a>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     2dc:	80 91 0c 02 	lds	r24, 0x020C
     2e0:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
					updateGreenLed(pwm_green);
     2e4:	80 91 0d 02 	lds	r24, 0x020D
     2e8:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
					updateBlueLed(pwm_blue);
     2ec:	80 91 0e 02 	lds	r24, 0x020E
     2f0:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>
					enableObstacleAvoidance();
     2f4:	0e 94 b8 1b 	call	0x3770	; 0x3770 <enableObstacleAvoidance>
					setLeftSpeed(25);
     2f8:	89 e1       	ldi	r24, 0x19	; 25
     2fa:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <setLeftSpeed>
					setRightSpeed(25);
     2fe:	89 e1       	ldi	r24, 0x19	; 25
     300:	0e 94 f5 17 	call	0x2fea	; 0x2fea <setRightSpeed>
     304:	80 91 25 04 	lds	r24, 0x0425
					break;
  
		}

		if(currentSelector != 0) {
     308:	88 23       	and	r24, r24
     30a:	09 f4       	brne	.+2      	; 0x30e <main+0x150>
     30c:	a0 cf       	rjmp	.-192    	; 0x24e <main+0x90>
			handleMotorsWithSpeedController();  
     30e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <handleMotorsWithSpeedController>
     312:	80 91 25 04 	lds	r24, 0x0425
     316:	9c cf       	rjmp	.-200    	; 0x250 <main+0x92>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     318:	0e 94 33 13 	call	0x2666	; 0x2666 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     31c:	80 91 25 04 	lds	r24, 0x0425
     320:	84 50       	subi	r24, 0x04	; 4
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	08 f4       	brcc	.+2      	; 0x328 <main+0x16a>
     326:	47 c0       	rjmp	.+142    	; 0x3b6 <main+0x1f8>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			}

			startTime = getTime100MicroSec();
     328:	0e 94 2a 13 	call	0x2654	; 0x2654 <getTime100MicroSec>
     32c:	7b 01       	movw	r14, r22
     32e:	8c 01       	movw	r16, r24
     330:	74 cf       	rjmp	.-280    	; 0x21a <main+0x5c>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     332:	0e 94 b8 1b 	call	0x3770	; 0x3770 <enableObstacleAvoidance>
					enableCliffAvoidance();
     336:	0e 94 bf 1b 	call	0x377e	; 0x377e <enableCliffAvoidance>
     33a:	80 91 25 04 	lds	r24, 0x0425
					break;
     33e:	84 cf       	rjmp	.-248    	; 0x248 <main+0x8a>


		usartTransmit(currentSelector);		// send the current selector position through uart as debug info


		switch(currentSelector) {
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	09 f0       	breq	.+2      	; 0x346 <main+0x188>
     344:	81 cf       	rjmp	.-254    	; 0x248 <main+0x8a>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     346:	0e 94 b8 1b 	call	0x3770	; 0x3770 <enableObstacleAvoidance>
     34a:	80 91 25 04 	lds	r24, 0x0425
					break;
     34e:	7c cf       	rjmp	.-264    	; 0x248 <main+0x8a>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GRREEN_LED0_ON;
     350:	80 91 0b 01 	lds	r24, 0x010B
     354:	8e 7f       	andi	r24, 0xFE	; 254
     356:	80 93 0b 01 	sts	0x010B, r24
					GRREEN_LED1_ON;
     35a:	80 91 0b 01 	lds	r24, 0x010B
     35e:	8d 7f       	andi	r24, 0xFD	; 253
     360:	80 93 0b 01 	sts	0x010B, r24
					GRREEN_LED2_ON;
     364:	80 91 0b 01 	lds	r24, 0x010B
     368:	8b 7f       	andi	r24, 0xFB	; 251
     36a:	80 93 0b 01 	sts	0x010B, r24
					GRREEN_LED3_ON;
     36e:	a3 98       	cbi	0x14, 3	; 20
					GRREEN_LED4_ON;
     370:	80 91 0b 01 	lds	r24, 0x010B
     374:	8f 7e       	andi	r24, 0xEF	; 239
     376:	80 93 0b 01 	sts	0x010B, r24
					GRREEN_LED5_ON;
     37a:	80 91 0b 01 	lds	r24, 0x010B
     37e:	8f 7d       	andi	r24, 0xDF	; 223
     380:	80 93 0b 01 	sts	0x010B, r24
					GRREEN_LED6_ON;
     384:	80 91 0b 01 	lds	r24, 0x010B
     388:	8f 7b       	andi	r24, 0xBF	; 191
     38a:	80 93 0b 01 	sts	0x010B, r24
					GRREEN_LED7_ON;
     38e:	80 91 0b 01 	lds	r24, 0x010B
     392:	8f 77       	andi	r24, 0x7F	; 127
     394:	80 93 0b 01 	sts	0x010B, r24
					updateRedLed(pwm_red);
     398:	80 91 0c 02 	lds	r24, 0x020C
     39c:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
					updateGreenLed(pwm_green);
     3a0:	80 91 0d 02 	lds	r24, 0x020D
     3a4:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
					updateBlueLed(pwm_blue);
     3a8:	80 91 0e 02 	lds	r24, 0x020E
     3ac:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>
     3b0:	80 91 25 04 	lds	r24, 0x0425
					break;
     3b4:	49 cf       	rjmp	.-366    	; 0x248 <main+0x8a>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     3b6:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <rand>
     3ba:	be 01       	movw	r22, r28
     3bc:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__divmodhi4>
     3c0:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     3c4:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <rand>
     3c8:	be 01       	movw	r22, r28
     3ca:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__divmodhi4>
     3ce:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     3d2:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <rand>
     3d6:	be 01       	movw	r22, r28
     3d8:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__divmodhi4>
     3dc:	80 93 0e 02 	sts	0x020E, r24
     3e0:	a3 cf       	rjmp	.-186    	; 0x328 <main+0x16a>

000003e2 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     3e2:	84 b1       	in	r24, 0x04	; 4
     3e4:	80 7f       	andi	r24, 0xF0	; 240
     3e6:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     3e8:	84 b1       	in	r24, 0x04	; 4
     3ea:	87 60       	ori	r24, 0x07	; 7
     3ec:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     3ee:	80 e5       	ldi	r24, 0x50	; 80
     3f0:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     3f2:	8d b5       	in	r24, 0x2d	; 45
     3f4:	81 60       	ori	r24, 0x01	; 1
     3f6:	8d bd       	out	0x2d, r24	; 45

}
     3f8:	08 95       	ret

000003fa <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     3fa:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     3fc:	1d bc       	out	0x2d, r1	; 45
}
     3fe:	08 95       	ret

00000400 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     400:	44 23       	and	r20, r20
     402:	79 f0       	breq	.+30     	; 0x422 <SPI_ReadWrite_Block+0x22>
     404:	a8 2f       	mov	r26, r24
     406:	b9 2f       	mov	r27, r25
     408:	e6 2f       	mov	r30, r22
     40a:	f7 2f       	mov	r31, r23
     40c:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     40e:	9d 91       	ld	r25, X+
     410:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     412:	0d b4       	in	r0, 0x2d	; 45
     414:	07 fe       	sbrs	r0, 7
     416:	fd cf       	rjmp	.-6      	; 0x412 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     418:	9e b5       	in	r25, 0x2e	; 46
     41a:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	84 17       	cp	r24, r20
     420:	b0 f3       	brcs	.-20     	; 0x40e <SPI_ReadWrite_Block+0xe>
     422:	08 95       	ret

00000424 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     424:	66 23       	and	r22, r22
     426:	59 f0       	breq	.+22     	; 0x43e <SPI_Write_Block+0x1a>
     428:	e8 2f       	mov	r30, r24
     42a:	f9 2f       	mov	r31, r25
     42c:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     42e:	91 91       	ld	r25, Z+
     430:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     432:	0d b4       	in	r0, 0x2d	; 45
     434:	07 fe       	sbrs	r0, 7
     436:	fd cf       	rjmp	.-6      	; 0x432 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	86 17       	cp	r24, r22
     43c:	c0 f3       	brcs	.-16     	; 0x42e <SPI_Write_Block+0xa>
     43e:	08 95       	ret

00000440 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     440:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     442:	0d b4       	in	r0, 0x2d	; 45
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <SPI_Write_Byte+0x2>
    return SPDR;
     448:	8e b5       	in	r24, 0x2e	; 46
}
     44a:	08 95       	ret

0000044c <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	00 d0       	rcall	.+0      	; 0x456 <mirf_config+0xa>
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     45a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     45c:	80 e2       	ldi	r24, 0x20	; 32
     45e:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     462:	8d e0       	ldi	r24, 0x0D	; 13
     464:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     468:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     46a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     46c:	83 e2       	ldi	r24, 0x23	; 35
     46e:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     478:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     47a:	80 91 03 04 	lds	r24, 0x0403
     47e:	90 91 04 04 	lds	r25, 0x0404
     482:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     484:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     486:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     488:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     48a:	80 e3       	ldi	r24, 0x30	; 48
     48c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     490:	8e 01       	movw	r16, r28
     492:	0f 5f       	subi	r16, 0xFF	; 255
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	c8 01       	movw	r24, r16
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	0e 94 12 02 	call	0x424	; 0x424 <SPI_Write_Block>
    mirf_CSN_hi;
     49e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     4a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4a2:	8a e2       	ldi	r24, 0x2A	; 42
     4a4:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     4a8:	c8 01       	movw	r24, r16
     4aa:	63 e0       	ldi	r22, 0x03	; 3
     4ac:	0e 94 12 02 	call	0x424	; 0x424 <SPI_Write_Block>
    mirf_CSN_hi;
     4b0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4b4:	81 e2       	ldi	r24, 0x21	; 33
     4b6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     4c0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4c4:	82 e2       	ldi	r24, 0x22	; 34
     4c6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     4d0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4d4:	84 e2       	ldi	r24, 0x24	; 36
     4d6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4da:	82 e1       	ldi	r24, 0x12	; 18
     4dc:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     4e0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4e2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4e4:	85 e2       	ldi	r24, 0x25	; 37
     4e6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4ea:	88 e2       	ldi	r24, 0x28	; 40
     4ec:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     4f0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4f2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4f4:	81 e3       	ldi	r24, 0x31	; 49
     4f6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4fa:	8d e0       	ldi	r24, 0x0D	; 13
     4fc:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     500:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     502:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     504:	80 e5       	ldi	r24, 0x50	; 80
     506:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     50a:	83 e7       	ldi	r24, 0x73	; 115
     50c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     510:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     512:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     514:	8c e3       	ldi	r24, 0x3C	; 60
     516:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     520:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     522:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     524:	8d e3       	ldi	r24, 0x3D	; 61
     526:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     52a:	86 e0       	ldi	r24, 0x06	; 6
     52c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     530:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     532:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     53a:	8f e0       	ldi	r24, 0x0F	; 15
     53c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     540:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     552:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     554:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     556:	0e 94 26 02 	call	0x44c	; 0x44c <mirf_config>
}
     55a:	08 95       	ret

0000055c <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     562:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     564:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     566:	8a e2       	ldi	r24, 0x2A	; 42
     568:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     56c:	ce 01       	movw	r24, r28
     56e:	65 e0       	ldi	r22, 0x05	; 5
     570:	0e 94 12 02 	call	0x424	; 0x424 <SPI_Write_Block>
    mirf_CSN_hi;
     574:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     576:	2c 9a       	sbi	0x05, 4	; 5
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     584:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     586:	80 e3       	ldi	r24, 0x30	; 48
     588:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     58c:	ce 01       	movw	r24, r28
     58e:	65 e0       	ldi	r22, 0x05	; 5
     590:	0e 94 12 02 	call	0x424	; 0x424 <SPI_Write_Block>
    mirf_CSN_hi;
     594:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     59c:	80 91 2c 04 	lds	r24, 0x042C
     5a0:	88 23       	and	r24, r24
     5a2:	11 f0       	breq	.+4      	; 0x5a8 <mirf_data_ready+0xc>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     5a6:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     5a8:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     5b0:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     5b2:	80 74       	andi	r24, 0x40	; 64
     5b4:	08 95       	ret

000005b6 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     5b6:	df 93       	push	r29
     5b8:	cf 93       	push	r28
     5ba:	0f 92       	push	r0
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     5c0:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     5c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     5c4:	87 e1       	ldi	r24, 0x17	; 23
     5c6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     5ca:	be 01       	movw	r22, r28
     5cc:	6f 5f       	subi	r22, 0xFF	; 255
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	cb 01       	movw	r24, r22
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	0e 94 00 02 	call	0x400	; 0x400 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     5d8:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     5da:	89 81       	ldd	r24, Y+1	; 0x01
}
     5dc:	81 70       	andi	r24, 0x01	; 1
     5de:	0f 90       	pop	r0
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     5e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     5e8:	82 ee       	ldi	r24, 0xE2	; 226
     5ea:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     5ee:	28 9a       	sbi	0x05, 0	; 5

}
     5f0:	08 95       	ret

000005f2 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     5f8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     5fa:	81 e6       	ldi	r24, 0x61	; 97
     5fc:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     600:	ce 01       	movw	r24, r28
     602:	be 01       	movw	r22, r28
     604:	4d e0       	ldi	r20, 0x0D	; 13
     606:	0e 94 00 02 	call	0x400	; 0x400 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     60a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     60c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     60e:	87 e2       	ldi	r24, 0x27	; 39
     610:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     614:	80 e4       	ldi	r24, 0x40	; 64
     616:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     61a:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     62c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     62e:	8f 71       	andi	r24, 0x1F	; 31
     630:	80 62       	ori	r24, 0x20	; 32
     632:	69 83       	std	Y+1, r22	; 0x01
     634:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     638:	69 81       	ldd	r22, Y+1	; 0x01
     63a:	86 2f       	mov	r24, r22
     63c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     640:	28 9a       	sbi	0x05, 0	; 5
}
     642:	0f 90       	pop	r0
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     65a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     65c:	8f 71       	andi	r24, 0x1F	; 31
     65e:	49 83       	std	Y+1, r20	; 0x01
     660:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     664:	c8 01       	movw	r24, r16
     666:	b8 01       	movw	r22, r16
     668:	49 81       	ldd	r20, Y+1	; 0x01
     66a:	0e 94 00 02 	call	0x400	; 0x400 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     66e:	28 9a       	sbi	0x05, 0	; 5
}
     670:	0f 90       	pop	r0
     672:	cf 91       	pop	r28
     674:	df 91       	pop	r29
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	0f 92       	push	r0
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     68c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     68e:	8f 71       	andi	r24, 0x1F	; 31
     690:	80 62       	ori	r24, 0x20	; 32
     692:	49 83       	std	Y+1, r20	; 0x01
     694:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     698:	c8 01       	movw	r24, r16
     69a:	49 81       	ldd	r20, Y+1	; 0x01
     69c:	64 2f       	mov	r22, r20
     69e:	0e 94 12 02 	call	0x424	; 0x424 <SPI_Write_Block>
    mirf_CSN_hi;
     6a2:	28 9a       	sbi	0x05, 0	; 5
}
     6a4:	0f 90       	pop	r0
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	0f 92       	push	r0
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     6c0:	80 91 2c 04 	lds	r24, 0x042C
     6c4:	88 23       	and	r24, r24
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <mirf_send+0x10>

    mirf_CE_lo;
     6c8:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 2c 04 	sts	0x042C, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	69 83       	std	Y+1, r22	; 0x01
     6d6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6da:	8a e4       	ldi	r24, 0x4A	; 74
     6dc:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     6e0:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     6e2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     6e4:	81 ee       	ldi	r24, 0xE1	; 225
     6e6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     6ea:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     6ec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     6ee:	80 ea       	ldi	r24, 0xA0	; 160
     6f0:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     6f4:	c8 01       	movw	r24, r16
     6f6:	69 81       	ldd	r22, Y+1	; 0x01
     6f8:	0e 94 12 02 	call	0x424	; 0x424 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     6fc:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     6fe:	2c 9a       	sbi	0x05, 4	; 5
}
     700:	0f 90       	pop	r0
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	0f 92       	push	r0
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	18 2f       	mov	r17, r24
     720:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     722:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     724:	81 ee       	ldi	r24, 0xE1	; 225
     726:	99 83       	std	Y+1, r25	; 0x01
     728:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     72c:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     72e:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     730:	88 ea       	ldi	r24, 0xA8	; 168
     732:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     736:	99 81       	ldd	r25, Y+1	; 0x01
     738:	00 23       	and	r16, r16
     73a:	61 f0       	breq	.+24     	; 0x754 <writeAckPayload+0x48>
     73c:	61 2f       	mov	r22, r17
     73e:	79 2f       	mov	r23, r25
     740:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     742:	f7 01       	movw	r30, r14
     744:	81 91       	ld	r24, Z+
     746:	7f 01       	movw	r14, r30
     748:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     74c:	8e 2d       	mov	r24, r14
     74e:	81 1b       	sub	r24, r17
     750:	80 17       	cp	r24, r16
     752:	b8 f3       	brcs	.-18     	; 0x742 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     754:	28 9a       	sbi	0x05, 0	; 5


}
     756:	0f 90       	pop	r0
     758:	cf 91       	pop	r28
     75a:	df 91       	pop	r29
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	08 95       	ret

00000766 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     766:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     768:	81 ee       	ldi	r24, 0xE1	; 225
     76a:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     76e:	28 9a       	sbi	0x05, 0	; 5

}
     770:	08 95       	ret

00000772 <handleRFCommands>:

void handleRFCommands() {
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     778:	80 91 2c 04 	lds	r24, 0x042C
     77c:	88 23       	and	r24, r24
     77e:	21 f0       	breq	.+8      	; 0x788 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     788:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     790:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     792:	86 ff       	sbrs	r24, 6
     794:	f5 cf       	rjmp	.-22     	; 0x780 <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     796:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     798:	87 e2       	ldi	r24, 0x27	; 39
     79a:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     79e:	80 e7       	ldi	r24, 0x70	; 112
     7a0:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     7a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     7a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     7a8:	81 e6       	ldi	r24, 0x61	; 97
     7aa:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     7ae:	89 e4       	ldi	r24, 0x49	; 73
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	bc 01       	movw	r22, r24
     7b4:	4d e0       	ldi	r20, 0x0D	; 13
     7b6:	0e 94 00 02 	call	0x400	; 0x400 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     7ba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     7bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     7be:	87 e2       	ldi	r24, 0x27	; 39
     7c0:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     7ca:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     7cc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     7ce:	82 ee       	ldi	r24, 0xE2	; 226
     7d0:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     7d4:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     7d6:	60 91 49 04 	lds	r22, 0x0449
     7da:	66 23       	and	r22, r22
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <handleRFCommands+0x6e>
     7de:	b8 c1       	rjmp	.+880    	; 0xb50 <handleRFCommands+0x3de>
     7e0:	50 91 4d 04 	lds	r21, 0x044D
     7e4:	40 91 4e 04 	lds	r20, 0x044E
     7e8:	e0 91 4a 04 	lds	r30, 0x044A
     7ec:	70 91 4b 04 	lds	r23, 0x044B

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     7f0:	25 2f       	mov	r18, r21
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	2f 77       	andi	r18, 0x7F	; 127
     7f6:	30 70       	andi	r19, 0x00	; 0
     7f8:	30 93 02 04 	sts	0x0402, r19
     7fc:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     800:	84 2f       	mov	r24, r20
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	8f 77       	andi	r24, 0x7F	; 127
     806:	90 70       	andi	r25, 0x00	; 0
     808:	90 93 00 04 	sts	0x0400, r25
     80c:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     810:	57 fd       	sbrc	r21, 7
     812:	a6 c2       	rjmp	.+1356   	; 0xd60 <handleRFCommands+0x5ee>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     814:	22 0f       	add	r18, r18
     816:	33 1f       	adc	r19, r19
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	30 95       	com	r19
     81e:	21 95       	neg	r18
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	30 93 f0 03 	sts	0x03F0, r19
     826:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     82a:	47 fd       	sbrc	r20, 7
     82c:	a3 c2       	rjmp	.+1350   	; 0xd74 <handleRFCommands+0x602>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	90 95       	com	r25
     838:	81 95       	neg	r24
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	90 93 f2 03 	sts	0x03F2, r25
     840:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     844:	42 e0       	ldi	r20, 0x02	; 2
     846:	21 30       	cpi	r18, 0x01	; 1
     848:	34 07       	cpc	r19, r20
     84a:	44 f0       	brlt	.+16     	; 0x85c <handleRFCommands+0xea>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	52 e0       	ldi	r21, 0x02	; 2
     850:	50 93 f0 03 	sts	0x03F0, r21
     854:	40 93 ef 03 	sts	0x03EF, r20
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     85c:	42 e0       	ldi	r20, 0x02	; 2
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	94 07       	cpc	r25, r20
     862:	34 f0       	brlt	.+12     	; 0x870 <handleRFCommands+0xfe>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	90 93 f2 03 	sts	0x03F2, r25
     86c:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     870:	4e ef       	ldi	r20, 0xFE	; 254
     872:	20 30       	cpi	r18, 0x00	; 0
     874:	34 07       	cpc	r19, r20
     876:	34 f4       	brge	.+12     	; 0x884 <handleRFCommands+0x112>
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	5e ef       	ldi	r21, 0xFE	; 254
     87c:	50 93 f0 03 	sts	0x03F0, r21
     880:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     884:	2e ef       	ldi	r18, 0xFE	; 254
     886:	80 30       	cpi	r24, 0x00	; 0
     888:	92 07       	cpc	r25, r18
     88a:	34 f4       	brge	.+12     	; 0x898 <handleRFCommands+0x126>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	9e ef       	ldi	r25, 0xFE	; 254
     890:	90 93 f2 03 	sts	0x03F2, r25
     894:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     898:	26 2f       	mov	r18, r22
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	30 93 42 04 	sts	0x0442, r19
     8a0:	20 93 41 04 	sts	0x0441, r18
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	f0 93 44 04 	sts	0x0444, r31
     8aa:	e0 93 43 04 	sts	0x0443, r30
     8ae:	c7 2f       	mov	r28, r23
     8b0:	d0 e0       	ldi	r29, 0x00	; 0
     8b2:	d0 93 46 04 	sts	0x0446, r29
     8b6:	c0 93 45 04 	sts	0x0445, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     8ba:	92 2f       	mov	r25, r18
     8bc:	88 27       	eor	r24, r24
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	24 e6       	ldi	r18, 0x64	; 100
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	b9 01       	movw	r22, r18
     8c8:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__udivmodhi4>
     8cc:	16 2f       	mov	r17, r22
     8ce:	10 95       	com	r17
     8d0:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     8d4:	5e 2f       	mov	r21, r30
     8d6:	44 27       	eor	r20, r20
     8d8:	4e 1b       	sub	r20, r30
     8da:	5f 0b       	sbc	r21, r31
     8dc:	ca 01       	movw	r24, r20
     8de:	b9 01       	movw	r22, r18
     8e0:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__udivmodhi4>
     8e4:	60 95       	com	r22
     8e6:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     8ea:	5c 2f       	mov	r21, r28
     8ec:	44 27       	eor	r20, r20
     8ee:	4c 1b       	sub	r20, r28
     8f0:	5d 0b       	sbc	r21, r29
     8f2:	ca 01       	movw	r24, r20
     8f4:	b9 01       	movw	r22, r18
     8f6:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__udivmodhi4>
     8fa:	60 95       	com	r22
     8fc:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     900:	81 2f       	mov	r24, r17
     902:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
		updateGreenLed(pwm_green);
     906:	80 91 0d 02 	lds	r24, 0x020D
     90a:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
		updateBlueLed(pwm_blue);
     90e:	80 91 0e 02 	lds	r24, 0x020E
     912:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     916:	80 91 4c 04 	lds	r24, 0x044C
     91a:	80 ff       	sbrs	r24, 0
     91c:	25 c1       	rjmp	.+586    	; 0xb68 <handleRFCommands+0x3f6>
			LED_IR1_LOW;
     91e:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     920:	81 ff       	sbrs	r24, 1
     922:	25 c1       	rjmp	.+586    	; 0xb6e <handleRFCommands+0x3fc>
			LED_IR2_LOW;
     924:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     926:	98 2f       	mov	r25, r24
     928:	82 ff       	sbrs	r24, 2
     92a:	25 c1       	rjmp	.+586    	; 0xb76 <handleRFCommands+0x404>
			irEnabled = 1;
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     932:	84 fd       	sbrc	r24, 4
     934:	24 c1       	rjmp	.+584    	; 0xb7e <handleRFCommands+0x40c>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     936:	86 ff       	sbrs	r24, 6
     938:	29 c1       	rjmp	.+594    	; 0xb8c <handleRFCommands+0x41a>
			obstacleAvoidanceEnabled = 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 29 04 	sts	0x0429, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     940:	97 fd       	sbrc	r25, 7
     942:	28 c1       	rjmp	.+592    	; 0xb94 <handleRFCommands+0x422>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     944:	10 92 2a 04 	sts	0x042A, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     948:	80 91 4f 04 	lds	r24, 0x044F
     94c:	80 ff       	sbrs	r24, 0
     94e:	29 c1       	rjmp	.+594    	; 0xba2 <handleRFCommands+0x430>
				GRREEN_LED0_ON;
     950:	80 91 0b 01 	lds	r24, 0x010B
     954:	8e 7f       	andi	r24, 0xFE	; 254
     956:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     95a:	80 91 4f 04 	lds	r24, 0x044F
     95e:	81 ff       	sbrs	r24, 1
     960:	29 c1       	rjmp	.+594    	; 0xbb4 <handleRFCommands+0x442>
				GRREEN_LED1_ON;
     962:	80 91 0b 01 	lds	r24, 0x010B
     966:	8d 7f       	andi	r24, 0xFD	; 253
     968:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     96c:	80 91 4f 04 	lds	r24, 0x044F
     970:	82 ff       	sbrs	r24, 2
     972:	29 c1       	rjmp	.+594    	; 0xbc6 <handleRFCommands+0x454>
				GRREEN_LED2_ON;
     974:	80 91 0b 01 	lds	r24, 0x010B
     978:	8b 7f       	andi	r24, 0xFB	; 251
     97a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     97e:	80 91 4f 04 	lds	r24, 0x044F
     982:	83 ff       	sbrs	r24, 3
     984:	29 c1       	rjmp	.+594    	; 0xbd8 <handleRFCommands+0x466>
				GRREEN_LED3_ON;
     986:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GRREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     988:	80 91 4f 04 	lds	r24, 0x044F
     98c:	84 ff       	sbrs	r24, 4
     98e:	29 c1       	rjmp	.+594    	; 0xbe2 <handleRFCommands+0x470>
				GRREEN_LED4_ON;
     990:	80 91 0b 01 	lds	r24, 0x010B
     994:	8f 7e       	andi	r24, 0xEF	; 239
     996:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     99a:	80 91 4f 04 	lds	r24, 0x044F
     99e:	85 ff       	sbrs	r24, 5
     9a0:	29 c1       	rjmp	.+594    	; 0xbf4 <handleRFCommands+0x482>
				GRREEN_LED5_ON;
     9a2:	80 91 0b 01 	lds	r24, 0x010B
     9a6:	8f 7d       	andi	r24, 0xDF	; 223
     9a8:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     9ac:	80 91 4f 04 	lds	r24, 0x044F
     9b0:	86 ff       	sbrs	r24, 6
     9b2:	29 c1       	rjmp	.+594    	; 0xc06 <handleRFCommands+0x494>
				GRREEN_LED6_ON;
     9b4:	80 91 0b 01 	lds	r24, 0x010B
     9b8:	8f 7b       	andi	r24, 0xBF	; 191
     9ba:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     9be:	80 91 4f 04 	lds	r24, 0x044F
     9c2:	87 fd       	sbrc	r24, 7
     9c4:	29 c1       	rjmp	.+594    	; 0xc18 <handleRFCommands+0x4a6>
				GRREEN_LED7_ON;
			} else {
				GRREEN_LED7_OFF;
     9c6:	80 91 0b 01 	lds	r24, 0x010B
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     9d0:	80 91 0b 02 	lds	r24, 0x020B
     9d4:	80 93 31 04 	sts	0x0431, r24

		switch(packetId) {
     9d8:	84 30       	cpi	r24, 0x04	; 4
     9da:	09 f4       	brne	.+2      	; 0x9de <handleRFCommands+0x26c>
     9dc:	29 c1       	rjmp	.+594    	; 0xc30 <handleRFCommands+0x4be>
     9de:	85 30       	cpi	r24, 0x05	; 5
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <handleRFCommands+0x272>
     9e2:	66 c1       	rjmp	.+716    	; 0xcb0 <handleRFCommands+0x53e>
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	09 f0       	breq	.+2      	; 0x9ea <handleRFCommands+0x278>
     9e8:	65 c0       	rjmp	.+202    	; 0xab4 <handleRFCommands+0x342>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     9ea:	90 91 5f 03 	lds	r25, 0x035F
     9ee:	80 91 60 03 	lds	r24, 0x0360
     9f2:	90 93 32 04 	sts	0x0432, r25
				ackPayload[2] = proximityResult[0]>>8;
     9f6:	80 93 33 04 	sts	0x0433, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     9fa:	90 91 61 03 	lds	r25, 0x0361
     9fe:	80 91 62 03 	lds	r24, 0x0362
     a02:	90 93 34 04 	sts	0x0434, r25
				ackPayload[4] = proximityResult[1]>>8;
     a06:	80 93 35 04 	sts	0x0435, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     a0a:	90 91 63 03 	lds	r25, 0x0363
     a0e:	80 91 64 03 	lds	r24, 0x0364
     a12:	90 93 36 04 	sts	0x0436, r25
				ackPayload[6] = proximityResult[2]>>8;
     a16:	80 93 37 04 	sts	0x0437, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     a1a:	90 91 65 03 	lds	r25, 0x0365
     a1e:	80 91 66 03 	lds	r24, 0x0366
     a22:	90 93 38 04 	sts	0x0438, r25
				ackPayload[8] = proximityResult[3]>>8;
     a26:	80 93 39 04 	sts	0x0439, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     a2a:	90 91 69 03 	lds	r25, 0x0369
     a2e:	80 91 6a 03 	lds	r24, 0x036A
     a32:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[10] = proximityResult[5]>>8;
     a36:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     a3a:	90 91 6b 03 	lds	r25, 0x036B
     a3e:	80 91 6c 03 	lds	r24, 0x036C
     a42:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[12] = proximityResult[6]>>8;
     a46:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     a4a:	90 91 6d 03 	lds	r25, 0x036D
     a4e:	80 91 6e 03 	lds	r24, 0x036E
     a52:	90 93 3e 04 	sts	0x043E, r25
				ackPayload[14] = proximityResult[7]>>8;
     a56:	80 93 3f 04 	sts	0x043F, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     a5a:	30 91 03 01 	lds	r19, 0x0103
     a5e:	80 91 03 01 	lds	r24, 0x0103
     a62:	20 91 03 01 	lds	r18, 0x0103
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	80 72       	andi	r24, 0x20	; 32
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	95 95       	asr	r25
     a6e:	87 95       	ror	r24
     a70:	95 95       	asr	r25
     a72:	87 95       	ror	r24
     a74:	95 95       	asr	r25
     a76:	87 95       	ror	r24
     a78:	95 95       	asr	r25
     a7a:	87 95       	ror	r24
     a7c:	95 95       	asr	r25
     a7e:	87 95       	ror	r24
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	22 0f       	add	r18, r18
     a8c:	22 0f       	add	r18, r18
     a8e:	28 2b       	or	r18, r24
     a90:	83 2f       	mov	r24, r19
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	80 71       	andi	r24, 0x10	; 16
     a96:	90 70       	andi	r25, 0x00	; 0
     a98:	95 95       	asr	r25
     a9a:	87 95       	ror	r24
     a9c:	95 95       	asr	r25
     a9e:	87 95       	ror	r24
     aa0:	95 95       	asr	r25
     aa2:	87 95       	ror	r24
     aa4:	95 95       	asr	r25
     aa6:	87 95       	ror	r24
     aa8:	28 2b       	or	r18, r24
     aaa:	20 93 40 04 	sts	0x0440, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     ab4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     ab6:	81 ee       	ldi	r24, 0xE1	; 225
     ab8:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
    mirf_CSN_hi;
     abc:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     abe:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     ac0:	88 ea       	ldi	r24, 0xA8	; 168
     ac2:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     ac6:	80 91 31 04 	lds	r24, 0x0431
     aca:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     ace:	80 91 32 04 	lds	r24, 0x0432
     ad2:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     ad6:	80 91 33 04 	lds	r24, 0x0433
     ada:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     ade:	80 91 34 04 	lds	r24, 0x0434
     ae2:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     ae6:	80 91 35 04 	lds	r24, 0x0435
     aea:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     aee:	80 91 36 04 	lds	r24, 0x0436
     af2:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     af6:	80 91 37 04 	lds	r24, 0x0437
     afa:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     afe:	80 91 38 04 	lds	r24, 0x0438
     b02:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b06:	80 91 39 04 	lds	r24, 0x0439
     b0a:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b0e:	80 91 3a 04 	lds	r24, 0x043A
     b12:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b16:	80 91 3b 04 	lds	r24, 0x043B
     b1a:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b1e:	80 91 3c 04 	lds	r24, 0x043C
     b22:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b26:	80 91 3d 04 	lds	r24, 0x043D
     b2a:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b2e:	80 91 3e 04 	lds	r24, 0x043E
     b32:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b36:	80 91 3f 04 	lds	r24, 0x043F
     b3a:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
     b3e:	80 91 40 04 	lds	r24, 0x0440
     b42:	0e 94 20 02 	call	0x440	; 0x440 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     b46:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     b50:	e0 91 4a 04 	lds	r30, 0x044A
     b54:	ee 23       	and	r30, r30
     b56:	09 f4       	brne	.+2      	; 0xb5a <handleRFCommands+0x3e8>
     b58:	16 c1       	rjmp	.+556    	; 0xd86 <handleRFCommands+0x614>
     b5a:	50 91 4d 04 	lds	r21, 0x044D
     b5e:	40 91 4e 04 	lds	r20, 0x044E
     b62:	70 91 4b 04 	lds	r23, 0x044B
     b66:	44 ce       	rjmp	.-888    	; 0x7f0 <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     b68:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     b6a:	81 fd       	sbrc	r24, 1
     b6c:	db ce       	rjmp	.-586    	; 0x924 <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     b6e:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     b70:	98 2f       	mov	r25, r24
     b72:	82 fd       	sbrc	r24, 2
     b74:	db ce       	rjmp	.-586    	; 0x92c <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     b76:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     b7a:	84 ff       	sbrs	r24, 4
     b7c:	dc ce       	rjmp	.-584    	; 0x936 <handleRFCommands+0x1c4>
			calibrateSensors();
     b7e:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <calibrateSensors>
     b82:	90 91 4c 04 	lds	r25, 0x044C
     b86:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b88:	86 fd       	sbrc	r24, 6
     b8a:	d7 ce       	rjmp	.-594    	; 0x93a <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     b8c:	10 92 29 04 	sts	0x0429, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     b90:	97 ff       	sbrs	r25, 7
     b92:	d8 ce       	rjmp	.-592    	; 0x944 <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	80 93 2a 04 	sts	0x042A, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     b9a:	80 91 4f 04 	lds	r24, 0x044F
     b9e:	80 fd       	sbrc	r24, 0
     ba0:	d7 ce       	rjmp	.-594    	; 0x950 <handleRFCommands+0x1de>
				GRREEN_LED0_ON;
			} else {
				GRREEN_LED0_OFF;
     ba2:	80 91 0b 01 	lds	r24, 0x010B
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     bac:	80 91 4f 04 	lds	r24, 0x044F
     bb0:	81 fd       	sbrc	r24, 1
     bb2:	d7 ce       	rjmp	.-594    	; 0x962 <handleRFCommands+0x1f0>
				GRREEN_LED1_ON;
			} else {
				GRREEN_LED1_OFF;
     bb4:	80 91 0b 01 	lds	r24, 0x010B
     bb8:	82 60       	ori	r24, 0x02	; 2
     bba:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     bbe:	80 91 4f 04 	lds	r24, 0x044F
     bc2:	82 fd       	sbrc	r24, 2
     bc4:	d7 ce       	rjmp	.-594    	; 0x974 <handleRFCommands+0x202>
				GRREEN_LED2_ON;
			} else {
				GRREEN_LED2_OFF;
     bc6:	80 91 0b 01 	lds	r24, 0x010B
     bca:	84 60       	ori	r24, 0x04	; 4
     bcc:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
     bd0:	80 91 4f 04 	lds	r24, 0x044F
     bd4:	83 fd       	sbrc	r24, 3
     bd6:	d7 ce       	rjmp	.-594    	; 0x986 <handleRFCommands+0x214>
				GRREEN_LED3_ON;
			} else {
				GRREEN_LED3_OFF;
     bd8:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
     bda:	80 91 4f 04 	lds	r24, 0x044F
     bde:	84 fd       	sbrc	r24, 4
     be0:	d7 ce       	rjmp	.-594    	; 0x990 <handleRFCommands+0x21e>
				GRREEN_LED4_ON;
			} else {
				GRREEN_LED4_OFF;
     be2:	80 91 0b 01 	lds	r24, 0x010B
     be6:	80 61       	ori	r24, 0x10	; 16
     be8:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
     bec:	80 91 4f 04 	lds	r24, 0x044F
     bf0:	85 fd       	sbrc	r24, 5
     bf2:	d7 ce       	rjmp	.-594    	; 0x9a2 <handleRFCommands+0x230>
				GRREEN_LED5_ON;
			} else {
				GRREEN_LED5_OFF;
     bf4:	80 91 0b 01 	lds	r24, 0x010B
     bf8:	80 62       	ori	r24, 0x20	; 32
     bfa:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
     bfe:	80 91 4f 04 	lds	r24, 0x044F
     c02:	86 fd       	sbrc	r24, 6
     c04:	d7 ce       	rjmp	.-594    	; 0x9b4 <handleRFCommands+0x242>
				GRREEN_LED6_ON;
			} else {
				GRREEN_LED6_OFF;
     c06:	80 91 0b 01 	lds	r24, 0x010B
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
     c10:	80 91 4f 04 	lds	r24, 0x044F
     c14:	87 ff       	sbrs	r24, 7
     c16:	d7 ce       	rjmp	.-594    	; 0x9c6 <handleRFCommands+0x254>
				GRREEN_LED7_ON;
     c18:	80 91 0b 01 	lds	r24, 0x010B
     c1c:	8f 77       	andi	r24, 0x7F	; 127
     c1e:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     c22:	80 91 0b 02 	lds	r24, 0x020B
     c26:	80 93 31 04 	sts	0x0431, r24

		switch(packetId) {
     c2a:	84 30       	cpi	r24, 0x04	; 4
     c2c:	09 f0       	breq	.+2      	; 0xc30 <handleRFCommands+0x4be>
     c2e:	d7 ce       	rjmp	.-594    	; 0x9de <handleRFCommands+0x26c>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     c30:	90 91 67 03 	lds	r25, 0x0367
     c34:	80 91 68 03 	lds	r24, 0x0368
     c38:	90 93 32 04 	sts	0x0432, r25
				ackPayload[2] = proximityResult[4]>>8;
     c3c:	80 93 33 04 	sts	0x0433, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     c40:	90 91 6f 03 	lds	r25, 0x036F
     c44:	80 91 70 03 	lds	r24, 0x0370
     c48:	90 93 34 04 	sts	0x0434, r25
				ackPayload[4] = proximityResult[8]>>8;
     c4c:	80 93 35 04 	sts	0x0435, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     c50:	90 91 71 03 	lds	r25, 0x0371
     c54:	80 91 72 03 	lds	r24, 0x0372
     c58:	90 93 36 04 	sts	0x0436, r25
				ackPayload[6] = proximityResult[9]>>8;
     c5c:	80 93 37 04 	sts	0x0437, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     c60:	90 91 73 03 	lds	r25, 0x0373
     c64:	80 91 74 03 	lds	r24, 0x0374
     c68:	90 93 38 04 	sts	0x0438, r25
				ackPayload[8] = proximityResult[10]>>8;
     c6c:	80 93 39 04 	sts	0x0439, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     c70:	90 91 75 03 	lds	r25, 0x0375
     c74:	80 91 76 03 	lds	r24, 0x0376
     c78:	90 93 3a 04 	sts	0x043A, r25
				ackPayload[10] = proximityResult[11]>>8;
     c7c:	80 93 3b 04 	sts	0x043B, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     c80:	90 91 0c 04 	lds	r25, 0x040C
     c84:	80 91 0d 04 	lds	r24, 0x040D
     c88:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[12] = accX>>8;
     c8c:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[13] = accY&0xFF;
     c90:	90 91 0e 04 	lds	r25, 0x040E
     c94:	80 91 0f 04 	lds	r24, 0x040F
     c98:	90 93 3e 04 	sts	0x043E, r25
				ackPayload[14] = accY>>8;
     c9c:	80 93 3f 04 	sts	0x043F, r24
				ackPayload[15] = irCommand;
     ca0:	80 91 07 04 	lds	r24, 0x0407
     ca4:	80 93 40 04 	sts	0x0440, r24
				packetId = 5;
     ca8:	85 e0       	ldi	r24, 0x05	; 5
     caa:	80 93 0b 02 	sts	0x020B, r24
				break;
     cae:	02 cf       	rjmp	.-508    	; 0xab4 <handleRFCommands+0x342>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     cb0:	85 30       	cpi	r24, 0x05	; 5
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <handleRFCommands+0x544>
     cb4:	7d c0       	rjmp	.+250    	; 0xdb0 <handleRFCommands+0x63e>
     cb6:	86 30       	cpi	r24, 0x06	; 6
     cb8:	09 f0       	breq	.+2      	; 0xcbc <handleRFCommands+0x54a>
     cba:	fc ce       	rjmp	.-520    	; 0xab4 <handleRFCommands+0x342>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     cbc:	80 91 3f 03 	lds	r24, 0x033F
     cc0:	90 91 40 03 	lds	r25, 0x0340
     cc4:	80 93 32 04 	sts	0x0432, r24
				ackPayload[2] = proximityValue[8]>>8;
     cc8:	80 91 3f 03 	lds	r24, 0x033F
     ccc:	90 91 40 03 	lds	r25, 0x0340
     cd0:	90 93 33 04 	sts	0x0433, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     cd4:	80 91 4f 03 	lds	r24, 0x034F
     cd8:	90 91 50 03 	lds	r25, 0x0350
     cdc:	80 93 34 04 	sts	0x0434, r24
				ackPayload[4] = proximityValue[16]>>8;
     ce0:	80 91 4f 03 	lds	r24, 0x034F
     ce4:	90 91 50 03 	lds	r25, 0x0350
     ce8:	90 93 35 04 	sts	0x0435, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     cec:	80 91 53 03 	lds	r24, 0x0353
     cf0:	90 91 54 03 	lds	r25, 0x0354
     cf4:	80 93 36 04 	sts	0x0436, r24
				ackPayload[6] = proximityValue[18]>>8;
     cf8:	80 91 53 03 	lds	r24, 0x0353
     cfc:	90 91 54 03 	lds	r25, 0x0354
     d00:	90 93 37 04 	sts	0x0437, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     d04:	80 91 57 03 	lds	r24, 0x0357
     d08:	90 91 58 03 	lds	r25, 0x0358
     d0c:	80 93 38 04 	sts	0x0438, r24
				ackPayload[8] = proximityValue[20]>>8;
     d10:	80 91 57 03 	lds	r24, 0x0357
     d14:	90 91 58 03 	lds	r25, 0x0358
     d18:	90 93 39 04 	sts	0x0439, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     d1c:	80 91 5b 03 	lds	r24, 0x035B
     d20:	90 91 5c 03 	lds	r25, 0x035C
     d24:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[10] = proximityValue[22]>>8;
     d28:	80 91 5b 03 	lds	r24, 0x035B
     d2c:	90 91 5c 03 	lds	r25, 0x035C
     d30:	90 93 3b 04 	sts	0x043B, r25
				ackPayload[11] = accZ&0xFF;
     d34:	90 91 10 04 	lds	r25, 0x0410
     d38:	80 91 11 04 	lds	r24, 0x0411
     d3c:	90 93 3c 04 	sts	0x043C, r25
				ackPayload[12] = accZ>>8;
     d40:	80 93 3d 04 	sts	0x043D, r24
				ackPayload[13] = batteryLevel&0xFF;
     d44:	90 91 c3 03 	lds	r25, 0x03C3
     d48:	80 91 c4 03 	lds	r24, 0x03C4
     d4c:	90 93 3e 04 	sts	0x043E, r25
				ackPayload[14] = batteryLevel>>8;
     d50:	80 93 3f 04 	sts	0x043F, r24
				ackPayload[15] = 0;
     d54:	10 92 40 04 	sts	0x0440, r1
				packetId = 3;
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	80 93 0b 02 	sts	0x020B, r24
				break;
     d5e:	aa ce       	rjmp	.-684    	; 0xab4 <handleRFCommands+0x342>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	30 93 f0 03 	sts	0x03F0, r19
     d6c:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     d70:	47 ff       	sbrs	r20, 7
     d72:	5d cd       	rjmp	.-1350   	; 0x82e <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	90 93 f2 03 	sts	0x03F2, r25
     d80:	80 93 f1 03 	sts	0x03F1, r24
     d84:	5f cd       	rjmp	.-1346   	; 0x844 <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     d86:	70 91 4b 04 	lds	r23, 0x044B
     d8a:	77 23       	and	r23, r23
     d8c:	61 f4       	brne	.+24     	; 0xda6 <handleRFCommands+0x634>
     d8e:	80 91 4c 04 	lds	r24, 0x044C
     d92:	88 30       	cpi	r24, 0x08	; 8
     d94:	41 f4       	brne	.+16     	; 0xda6 <handleRFCommands+0x634>
     d96:	50 91 4d 04 	lds	r21, 0x044D
     d9a:	55 23       	and	r21, r21
     d9c:	09 f4       	brne	.+2      	; 0xda0 <handleRFCommands+0x62e>
     d9e:	64 c0       	rjmp	.+200    	; 0xe68 <handleRFCommands+0x6f6>
     da0:	40 91 4e 04 	lds	r20, 0x044E
     da4:	25 cd       	rjmp	.-1462   	; 0x7f0 <handleRFCommands+0x7e>
     da6:	50 91 4d 04 	lds	r21, 0x044D
     daa:	40 91 4e 04 	lds	r20, 0x044E
     dae:	20 cd       	rjmp	.-1472   	; 0x7f0 <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     db0:	80 91 2f 03 	lds	r24, 0x032F
     db4:	90 91 30 03 	lds	r25, 0x0330
     db8:	80 93 32 04 	sts	0x0432, r24
				ackPayload[2] = proximityValue[0]>>8;
     dbc:	80 91 2f 03 	lds	r24, 0x032F
     dc0:	90 91 30 03 	lds	r25, 0x0330
     dc4:	90 93 33 04 	sts	0x0433, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     dc8:	80 91 33 03 	lds	r24, 0x0333
     dcc:	90 91 34 03 	lds	r25, 0x0334
     dd0:	80 93 34 04 	sts	0x0434, r24
				ackPayload[4] = proximityValue[2]>>8;
     dd4:	80 91 33 03 	lds	r24, 0x0333
     dd8:	90 91 34 03 	lds	r25, 0x0334
     ddc:	90 93 35 04 	sts	0x0435, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     de0:	80 91 37 03 	lds	r24, 0x0337
     de4:	90 91 38 03 	lds	r25, 0x0338
     de8:	80 93 36 04 	sts	0x0436, r24
				ackPayload[6] = proximityValue[4]>>8;
     dec:	80 91 37 03 	lds	r24, 0x0337
     df0:	90 91 38 03 	lds	r25, 0x0338
     df4:	90 93 37 04 	sts	0x0437, r25
				ackPayload[7] = proximityValue[6]&0xFF;
     df8:	80 91 3b 03 	lds	r24, 0x033B
     dfc:	90 91 3c 03 	lds	r25, 0x033C
     e00:	80 93 38 04 	sts	0x0438, r24
				ackPayload[8] = proximityValue[6]>>8;
     e04:	80 91 3b 03 	lds	r24, 0x033B
     e08:	90 91 3c 03 	lds	r25, 0x033C
     e0c:	90 93 39 04 	sts	0x0439, r25
				ackPayload[9] = proximityValue[10]&0xFF;
     e10:	80 91 43 03 	lds	r24, 0x0343
     e14:	90 91 44 03 	lds	r25, 0x0344
     e18:	80 93 3a 04 	sts	0x043A, r24
				ackPayload[10] = proximityValue[10]>>8;
     e1c:	80 91 43 03 	lds	r24, 0x0343
     e20:	90 91 44 03 	lds	r25, 0x0344
     e24:	90 93 3b 04 	sts	0x043B, r25
				ackPayload[11] = proximityValue[12]&0xFF;
     e28:	80 91 47 03 	lds	r24, 0x0347
     e2c:	90 91 48 03 	lds	r25, 0x0348
     e30:	80 93 3c 04 	sts	0x043C, r24
				ackPayload[12] = proximityValue[12]>>8;
     e34:	80 91 47 03 	lds	r24, 0x0347
     e38:	90 91 48 03 	lds	r25, 0x0348
     e3c:	90 93 3d 04 	sts	0x043D, r25
				ackPayload[13] = proximityValue[14]&0xFF;
     e40:	80 91 4b 03 	lds	r24, 0x034B
     e44:	90 91 4c 03 	lds	r25, 0x034C
     e48:	80 93 3e 04 	sts	0x043E, r24
				ackPayload[14] = proximityValue[14]>>8;
     e4c:	80 91 4b 03 	lds	r24, 0x034B
     e50:	90 91 4c 03 	lds	r25, 0x034C
     e54:	90 93 3f 04 	sts	0x043F, r25
				ackPayload[15] = currentSelector;
     e58:	80 91 25 04 	lds	r24, 0x0425
     e5c:	80 93 40 04 	sts	0x0440, r24
				packetId = 6;
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	80 93 0b 02 	sts	0x020B, r24
				break;
     e66:	26 ce       	rjmp	.-948    	; 0xab4 <handleRFCommands+0x342>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     e68:	40 91 4e 04 	lds	r20, 0x044E
     e6c:	44 23       	and	r20, r20
     e6e:	79 f0       	breq	.+30     	; 0xe8e <handleRFCommands+0x71c>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     e70:	10 92 02 04 	sts	0x0402, r1
     e74:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     e78:	84 2f       	mov	r24, r20
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	90 70       	andi	r25, 0x00	; 0
     e80:	90 93 00 04 	sts	0x0400, r25
     e84:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	c3 cc       	rjmp	.-1658   	; 0x814 <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
     e8e:	8c e3       	ldi	r24, 0x3C	; 60
     e90:	0e 94 84 12 	call	0x2508	; 0x2508 <sleep>
     e94:	50 91 4d 04 	lds	r21, 0x044D
     e98:	40 91 4e 04 	lds	r20, 0x044E
     e9c:	60 91 49 04 	lds	r22, 0x0449
     ea0:	e0 91 4a 04 	lds	r30, 0x044A
     ea4:	70 91 4b 04 	lds	r23, 0x044B
     ea8:	a3 cc       	rjmp	.-1722   	; 0x7f0 <handleRFCommands+0x7e>

00000eaa <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29

	PCICR = 0;
     eae:	c8 e6       	ldi	r28, 0x68	; 104
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
     eb2:	18 82       	st	Y, r1
	PCMSK1 = 0;
     eb4:	ac e6       	ldi	r26, 0x6C	; 108
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	1c 92       	st	X, r1
	TCCR2A = 0;
     eba:	e0 eb       	ldi	r30, 0xB0	; 176
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	10 82       	st	Z, r1
	TCCR2B = 0;
     ec0:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     ec4:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     ec8:	88 81       	ld	r24, Y
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     ece:	8c 91       	ld	r24, X
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     ed4:	80 81       	ld	r24, Z
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	80 83       	st	Z, r24

}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     eec:	80 91 11 02 	lds	r24, 0x0211
     ef0:	88 23       	and	r24, r24
     ef2:	21 f1       	breq	.+72     	; 0xf3c <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     ef4:	80 91 03 01 	lds	r24, 0x0103
     ef8:	86 fd       	sbrc	r24, 6
     efa:	20 c0       	rjmp	.+64     	; 0xf3c <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     efc:	80 91 68 00 	lds	r24, 0x0068
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     f06:	80 91 6c 00 	lds	r24, 0x006C
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
     f16:	8d e0       	ldi	r24, 0x0D	; 13
     f18:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f1c:	80 91 b1 00 	lds	r24, 0x00B1
     f20:	86 60       	ori	r24, 0x06	; 6
     f22:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
     f26:	80 91 70 00 	lds	r24, 0x0070
     f2a:	82 60       	ori	r24, 0x02	; 2
     f2c:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
     f30:	10 92 26 03 	sts	0x0326, r1
     f34:	10 92 27 03 	sts	0x0327, r1
     f38:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
     f3c:	8f 91       	pop	r24
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
     f5e:	80 91 b1 00 	lds	r24, 0x00B1
     f62:	88 7f       	andi	r24, 0xF8	; 248
     f64:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
     f68:	80 91 12 02 	lds	r24, 0x0212
     f6c:	88 23       	and	r24, r24
     f6e:	a9 f0       	breq	.+42     	; 0xf9a <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
     f70:	80 91 03 01 	lds	r24, 0x0103
     f74:	86 ff       	sbrs	r24, 6
     f76:	65 c0       	rjmp	.+202    	; 0x1042 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
     f78:	80 91 68 00 	lds	r24, 0x0068
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
     f82:	80 91 6c 00 	lds	r24, 0x006C
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	9f ef       	ldi	r25, 0xFF	; 255
     f90:	90 93 02 02 	sts	0x0202, r25
     f94:	80 93 01 02 	sts	0x0201, r24
     f98:	49 c0       	rjmp	.+146    	; 0x102c <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
     f9a:	80 91 01 02 	lds	r24, 0x0201
     f9e:	90 91 02 02 	lds	r25, 0x0202
     fa2:	2f ef       	ldi	r18, 0xFF	; 255
     fa4:	8f 3f       	cpi	r24, 0xFF	; 255
     fa6:	92 07       	cpc	r25, r18
     fa8:	09 f4       	brne	.+2      	; 0xfac <__vector_13+0x64>
     faa:	63 c0       	rjmp	.+198    	; 0x1072 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__vector_13+0x6c>
     fb2:	98 c0       	rjmp	.+304    	; 0x10e4 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
     fb4:	9c 01       	movw	r18, r24
     fb6:	22 50       	subi	r18, 0x02	; 2
     fb8:	30 40       	sbci	r19, 0x00	; 0
     fba:	25 30       	cpi	r18, 0x05	; 5
     fbc:	31 05       	cpc	r19, r1
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <__vector_13+0x7a>
     fc0:	67 c0       	rjmp	.+206    	; 0x1090 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
     fc2:	9c 01       	movw	r18, r24
     fc4:	27 50       	subi	r18, 0x07	; 7
     fc6:	30 40       	sbci	r19, 0x00	; 0
     fc8:	26 30       	cpi	r18, 0x06	; 6
     fca:	31 05       	cpc	r19, r1
     fcc:	08 f0       	brcs	.+2      	; 0xfd0 <__vector_13+0x88>
     fce:	bd c0       	rjmp	.+378    	; 0x114a <__vector_13+0x202>

				OCR2A = 54;
     fd0:	26 e3       	ldi	r18, 0x36	; 54
     fd2:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
     fd6:	20 91 b1 00 	lds	r18, 0x00B1
     fda:	26 60       	ori	r18, 0x06	; 6
     fdc:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
     fe0:	20 91 70 00 	lds	r18, 0x0070
     fe4:	22 60       	ori	r18, 0x02	; 2
     fe6:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
     fea:	20 91 03 01 	lds	r18, 0x0103
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	20 74       	andi	r18, 0x40	; 64
     ff2:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
     ff4:	00 24       	eor	r0, r0
     ff6:	22 0f       	add	r18, r18
     ff8:	33 1f       	adc	r19, r19
     ffa:	00 1c       	adc	r0, r0
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	00 1c       	adc	r0, r0
    1002:	23 2f       	mov	r18, r19
    1004:	30 2d       	mov	r19, r0
    1006:	4c e0       	ldi	r20, 0x0C	; 12
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	48 1b       	sub	r20, r24
    100c:	59 0b       	sbc	r21, r25
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <__vector_13+0xcc>
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	4a 95       	dec	r20
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <__vector_13+0xc8>
				data_temp += temp;
    1018:	40 91 26 03 	lds	r20, 0x0326
    101c:	42 0f       	add	r20, r18
    101e:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1022:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1024:	90 93 02 02 	sts	0x0202, r25
    1028:	80 93 01 02 	sts	0x0201, r24

		}

}
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1042:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1046:	83 e3       	ldi	r24, 0x33	; 51
    1048:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    104c:	80 91 b1 00 	lds	r24, 0x00B1
    1050:	86 60       	ori	r24, 0x06	; 6
    1052:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1056:	80 91 70 00 	lds	r24, 0x0070
    105a:	82 60       	ori	r24, 0x02	; 2
    105c:	80 93 70 00 	sts	0x0070, r24
    1060:	80 91 01 02 	lds	r24, 0x0201
    1064:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1068:	2f ef       	ldi	r18, 0xFF	; 255
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	92 07       	cpc	r25, r18
    106e:	c9 f6       	brne	.-78     	; 0x1022 <__vector_13+0xda>
    1070:	dd cf       	rjmp	.-70     	; 0x102c <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1072:	20 91 03 01 	lds	r18, 0x0103
    1076:	26 ff       	sbrs	r18, 6
    1078:	52 c0       	rjmp	.+164    	; 0x111e <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    107a:	20 91 68 00 	lds	r18, 0x0068
    107e:	22 60       	ori	r18, 0x02	; 2
    1080:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1084:	20 91 6c 00 	lds	r18, 0x006C
    1088:	20 68       	ori	r18, 0x80	; 128
    108a:	20 93 6c 00 	sts	0x006C, r18
    108e:	ce cf       	rjmp	.-100    	; 0x102c <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1090:	26 e3       	ldi	r18, 0x36	; 54
    1092:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1096:	20 91 b1 00 	lds	r18, 0x00B1
    109a:	26 60       	ori	r18, 0x06	; 6
    109c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    10a0:	20 91 70 00 	lds	r18, 0x0070
    10a4:	22 60       	ori	r18, 0x02	; 2
    10a6:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    10aa:	20 91 03 01 	lds	r18, 0x0103
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	20 74       	andi	r18, 0x40	; 64
    10b2:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    10b4:	00 24       	eor	r0, r0
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	00 1c       	adc	r0, r0
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	00 1c       	adc	r0, r0
    10c2:	23 2f       	mov	r18, r19
    10c4:	30 2d       	mov	r19, r0
    10c6:	46 e0       	ldi	r20, 0x06	; 6
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	48 1b       	sub	r20, r24
    10cc:	59 0b       	sbc	r21, r25
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <__vector_13+0x18c>
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	4a 95       	dec	r20
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <__vector_13+0x188>
				address_temp += temp;
    10d8:	40 91 27 03 	lds	r20, 0x0327
    10dc:	42 0f       	add	r20, r18
    10de:	40 93 27 03 	sts	0x0327, r20
    10e2:	9f cf       	rjmp	.-194    	; 0x1022 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    10e4:	20 91 03 01 	lds	r18, 0x0103
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	20 74       	andi	r18, 0x40	; 64
    10ec:	30 70       	andi	r19, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	23 2f       	mov	r18, r19
    10f2:	00 0c       	add	r0, r0
    10f4:	22 1f       	adc	r18, r18
    10f6:	33 0b       	sbc	r19, r19
    10f8:	00 0c       	add	r0, r0
    10fa:	22 1f       	adc	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1102:	26 e3       	ldi	r18, 0x36	; 54
    1104:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1108:	20 91 b1 00 	lds	r18, 0x00B1
    110c:	26 60       	ori	r18, 0x06	; 6
    110e:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1112:	20 91 70 00 	lds	r18, 0x0070
    1116:	22 60       	ori	r18, 0x02	; 2
    1118:	20 93 70 00 	sts	0x0070, r18
    111c:	82 cf       	rjmp	.-252    	; 0x1022 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    111e:	8c e1       	ldi	r24, 0x1C	; 28
    1120:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1124:	80 91 b1 00 	lds	r24, 0x00B1
    1128:	86 60       	ori	r24, 0x06	; 6
    112a:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    112e:	80 91 70 00 	lds	r24, 0x0070
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1138:	10 92 26 03 	sts	0x0326, r1
    113c:	10 92 27 03 	sts	0x0327, r1
    1140:	10 92 28 03 	sts	0x0328, r1
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	6d cf       	rjmp	.-294    	; 0x1024 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    114a:	8d 30       	cpi	r24, 0x0D	; 13
    114c:	91 05       	cpc	r25, r1
    114e:	09 f0       	breq	.+2      	; 0x1152 <__vector_13+0x20a>
    1150:	68 cf       	rjmp	.-304    	; 0x1022 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1152:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1156:	80 91 68 00 	lds	r24, 0x0068
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1160:	80 91 6c 00 	lds	r24, 0x006C
    1164:	80 68       	ori	r24, 0x80	; 128
    1166:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	90 93 02 02 	sts	0x0202, r25
    1172:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1176:	80 91 28 03 	lds	r24, 0x0328
    117a:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    117e:	80 91 27 03 	lds	r24, 0x0327
    1182:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1186:	80 91 26 03 	lds	r24, 0x0326
    118a:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 08 04 	sts	0x0408, r24
    1194:	4b cf       	rjmp	.-362    	; 0x102c <__vector_13+0xe4>

00001196 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1196:	80 91 00 02 	lds	r24, 0x0200
    119a:	08 95       	ret

0000119c <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    119c:	80 91 24 03 	lds	r24, 0x0324
    11a0:	08 95       	ret

000011a2 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    11a2:	80 91 25 03 	lds	r24, 0x0325
    11a6:	08 95       	ret

000011a8 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    11a8:	80 91 11 02 	lds	r24, 0x0211
    11ac:	88 23       	and	r24, r24
    11ae:	b1 f1       	breq	.+108    	; 0x121c <handleIRRemoteCommands+0x74>

		if(command_received) {
    11b0:	80 91 08 04 	lds	r24, 0x0408
    11b4:	88 23       	and	r24, r24
    11b6:	91 f1       	breq	.+100    	; 0x121c <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    11b8:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    11bc:	e0 93 07 04 	sts	0x0407, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    11c0:	10 92 08 04 	sts	0x0408, r1

			switch(irCommand) {
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	e5 33       	cpi	r30, 0x35	; 53
    11c8:	f1 05       	cpc	r31, r1
    11ca:	48 f1       	brcs	.+82     	; 0x121e <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    11cc:	20 91 ef 03 	lds	r18, 0x03EF
    11d0:	30 91 f0 03 	lds	r19, 0x03F0
    11d4:	80 91 f1 03 	lds	r24, 0x03F1
    11d8:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    11dc:	37 fd       	sbrc	r19, 7
    11de:	27 c0       	rjmp	.+78     	; 0x122e <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    11e0:	35 95       	asr	r19
    11e2:	27 95       	ror	r18
    11e4:	35 95       	asr	r19
    11e6:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    11e8:	30 93 02 04 	sts	0x0402, r19
    11ec:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    11f0:	97 fd       	sbrc	r25, 7
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    11f4:	95 95       	asr	r25
    11f6:	87 95       	ror	r24
    11f8:	95 95       	asr	r25
    11fa:	87 95       	ror	r24
    11fc:	90 93 00 04 	sts	0x0400, r25
    1200:	80 93 ff 03 	sts	0x03FF, r24
    1204:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1206:	90 95       	com	r25
    1208:	81 95       	neg	r24
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	95 95       	asr	r25
    120e:	87 95       	ror	r24
    1210:	95 95       	asr	r25
    1212:	87 95       	ror	r24
    1214:	90 93 00 04 	sts	0x0400, r25
    1218:	80 93 ff 03 	sts	0x03FF, r24
    121c:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    121e:	ee 58       	subi	r30, 0x8E	; 142
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	05 90       	lpm	r0, Z+
    1228:	f4 91       	lpm	r31, Z+
    122a:	e0 2d       	mov	r30, r0
    122c:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    122e:	30 95       	com	r19
    1230:	21 95       	neg	r18
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	d5 cf       	rjmp	.-86     	; 0x11e0 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1236:	80 93 29 04 	sts	0x0429, r24
							cliffAvoidanceEnabled = 0;
    123a:	10 92 2a 04 	sts	0x042A, r1
    123e:	c6 cf       	rjmp	.-116    	; 0x11cc <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1240:	10 92 29 04 	sts	0x0429, r1
							cliffAvoidanceEnabled = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 2a 04 	sts	0x042A, r24
    124a:	20 91 ef 03 	lds	r18, 0x03EF
    124e:	30 91 f0 03 	lds	r19, 0x03F0
    1252:	80 91 f1 03 	lds	r24, 0x03F1
    1256:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    125a:	c0 cf       	rjmp	.-128    	; 0x11dc <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    125c:	10 92 29 04 	sts	0x0429, r1
    1260:	20 91 ef 03 	lds	r18, 0x03EF
    1264:	30 91 f0 03 	lds	r19, 0x03F0
    1268:	80 91 f1 03 	lds	r24, 0x03F1
    126c:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1270:	b5 cf       	rjmp	.-150    	; 0x11dc <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 29 04 	sts	0x0429, r24
    1278:	20 91 ef 03 	lds	r18, 0x03EF
    127c:	30 91 f0 03 	lds	r19, 0x03F0
    1280:	80 91 f1 03 	lds	r24, 0x03F1
    1284:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1288:	a9 cf       	rjmp	.-174    	; 0x11dc <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    128a:	80 91 f1 03 	lds	r24, 0x03F1
    128e:	90 91 f2 03 	lds	r25, 0x03F2
    1292:	4e 97       	sbiw	r24, 0x1e	; 30
    1294:	90 93 f2 03 	sts	0x03F2, r25
    1298:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    129c:	2e ef       	ldi	r18, 0xFE	; 254
    129e:	80 30       	cpi	r24, 0x00	; 0
    12a0:	92 07       	cpc	r25, r18
    12a2:	9c f5       	brge	.+102    	; 0x130a <handleIRRemoteCommands+0x162>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	9e ef       	ldi	r25, 0xFE	; 254
    12a8:	90 93 f2 03 	sts	0x03F2, r25
    12ac:	80 93 f1 03 	sts	0x03F1, r24
    12b0:	20 91 ef 03 	lds	r18, 0x03EF
    12b4:	30 91 f0 03 	lds	r19, 0x03F0
    12b8:	91 cf       	rjmp	.-222    	; 0x11dc <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    12ba:	20 91 ef 03 	lds	r18, 0x03EF
    12be:	30 91 f0 03 	lds	r19, 0x03F0
    12c2:	80 91 ed 03 	lds	r24, 0x03ED
    12c6:	90 91 ee 03 	lds	r25, 0x03EE
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	24 f0       	brlt	.+8      	; 0x12d8 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    12d0:	20 91 f1 03 	lds	r18, 0x03F1
    12d4:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    12d8:	2e 51       	subi	r18, 0x1E	; 30
    12da:	30 40       	sbci	r19, 0x00	; 0
    12dc:	30 93 f0 03 	sts	0x03F0, r19
    12e0:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    12e4:	c9 01       	movw	r24, r18
    12e6:	30 93 f2 03 	sts	0x03F2, r19
    12ea:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    12ee:	4e ef       	ldi	r20, 0xFE	; 254
    12f0:	20 30       	cpi	r18, 0x00	; 0
    12f2:	34 07       	cpc	r19, r20
    12f4:	34 f4       	brge	.+12     	; 0x1302 <handleIRRemoteCommands+0x15a>
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	5e ef       	ldi	r21, 0xFE	; 254
    12fa:	50 93 f0 03 	sts	0x03F0, r21
    12fe:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    1302:	4e ef       	ldi	r20, 0xFE	; 254
    1304:	20 30       	cpi	r18, 0x00	; 0
    1306:	34 07       	cpc	r19, r20
    1308:	6c f2       	brlt	.-102    	; 0x12a4 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    130a:	20 91 ef 03 	lds	r18, 0x03EF
    130e:	30 91 f0 03 	lds	r19, 0x03F0
    1312:	64 cf       	rjmp	.-312    	; 0x11dc <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1314:	20 91 ef 03 	lds	r18, 0x03EF
    1318:	30 91 f0 03 	lds	r19, 0x03F0
    131c:	2e 51       	subi	r18, 0x1E	; 30
    131e:	30 40       	sbci	r19, 0x00	; 0
    1320:	30 93 f0 03 	sts	0x03F0, r19
    1324:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1328:	4e ef       	ldi	r20, 0xFE	; 254
    132a:	20 30       	cpi	r18, 0x00	; 0
    132c:	34 07       	cpc	r19, r20
    132e:	0c f0       	brlt	.+2      	; 0x1332 <handleIRRemoteCommands+0x18a>
    1330:	17 c1       	rjmp	.+558    	; 0x1560 <handleIRRemoteCommands+0x3b8>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	9e ef       	ldi	r25, 0xFE	; 254
    1336:	90 93 f0 03 	sts	0x03F0, r25
    133a:	80 93 ef 03 	sts	0x03EF, r24
    133e:	80 91 f1 03 	lds	r24, 0x03F1
    1342:	90 91 f2 03 	lds	r25, 0x03F2
    1346:	20 e8       	ldi	r18, 0x80	; 128
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4e cf       	rjmp	.-356    	; 0x11e8 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    134c:	20 91 ef 03 	lds	r18, 0x03EF
    1350:	30 91 f0 03 	lds	r19, 0x03F0
    1354:	2e 51       	subi	r18, 0x1E	; 30
    1356:	30 40       	sbci	r19, 0x00	; 0
    1358:	30 93 f0 03 	sts	0x03F0, r19
    135c:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1360:	80 91 f1 03 	lds	r24, 0x03F1
    1364:	90 91 f2 03 	lds	r25, 0x03F2
    1368:	4e 96       	adiw	r24, 0x1e	; 30
    136a:	90 93 f2 03 	sts	0x03F2, r25
    136e:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1372:	4e ef       	ldi	r20, 0xFE	; 254
    1374:	20 30       	cpi	r18, 0x00	; 0
    1376:	34 07       	cpc	r19, r20
    1378:	34 f4       	brge	.+12     	; 0x1386 <handleIRRemoteCommands+0x1de>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3e ef       	ldi	r19, 0xFE	; 254
    137e:	30 93 f0 03 	sts	0x03F0, r19
    1382:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1386:	42 e0       	ldi	r20, 0x02	; 2
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	94 07       	cpc	r25, r20
    138c:	0c f4       	brge	.+2      	; 0x1390 <handleIRRemoteCommands+0x1e8>
    138e:	26 cf       	rjmp	.-436    	; 0x11dc <handleIRRemoteCommands+0x34>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	90 93 f2 03 	sts	0x03F2, r25
    1398:	80 93 f1 03 	sts	0x03F1, r24
    139c:	1f cf       	rjmp	.-450    	; 0x11dc <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    139e:	20 91 ef 03 	lds	r18, 0x03EF
    13a2:	30 91 f0 03 	lds	r19, 0x03F0
    13a6:	80 91 f1 03 	lds	r24, 0x03F1
    13aa:	90 91 f2 03 	lds	r25, 0x03F2
    13ae:	82 17       	cp	r24, r18
    13b0:	93 07       	cpc	r25, r19
    13b2:	0c f4       	brge	.+2      	; 0x13b6 <handleIRRemoteCommands+0x20e>
    13b4:	da c0       	rjmp	.+436    	; 0x156a <handleIRRemoteCommands+0x3c2>
    13b6:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    13b8:	22 5e       	subi	r18, 0xE2	; 226
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	30 93 f0 03 	sts	0x03F0, r19
    13c0:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    13c4:	4e 96       	adiw	r24, 0x1e	; 30
    13c6:	90 93 f2 03 	sts	0x03F2, r25
    13ca:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    13ce:	42 e0       	ldi	r20, 0x02	; 2
    13d0:	21 30       	cpi	r18, 0x01	; 1
    13d2:	34 07       	cpc	r19, r20
    13d4:	34 f0       	brlt	.+12     	; 0x13e2 <handleIRRemoteCommands+0x23a>
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	32 e0       	ldi	r19, 0x02	; 2
    13da:	30 93 f0 03 	sts	0x03F0, r19
    13de:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    13e2:	22 e0       	ldi	r18, 0x02	; 2
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	92 07       	cpc	r25, r18
    13e8:	0c f4       	brge	.+2      	; 0x13ec <handleIRRemoteCommands+0x244>
    13ea:	8f cf       	rjmp	.-226    	; 0x130a <handleIRRemoteCommands+0x162>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	90 93 f2 03 	sts	0x03F2, r25
    13f4:	80 93 f1 03 	sts	0x03F1, r24
    13f8:	20 91 ef 03 	lds	r18, 0x03EF
    13fc:	30 91 f0 03 	lds	r19, 0x03F0
    1400:	ed ce       	rjmp	.-550    	; 0x11dc <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1402:	20 91 ef 03 	lds	r18, 0x03EF
    1406:	30 91 f0 03 	lds	r19, 0x03F0
    140a:	22 5e       	subi	r18, 0xE2	; 226
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	30 93 f0 03 	sts	0x03F0, r19
    1412:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1416:	42 e0       	ldi	r20, 0x02	; 2
    1418:	21 30       	cpi	r18, 0x01	; 1
    141a:	34 07       	cpc	r19, r20
    141c:	0c f4       	brge	.+2      	; 0x1420 <handleIRRemoteCommands+0x278>
    141e:	a0 c0       	rjmp	.+320    	; 0x1560 <handleIRRemoteCommands+0x3b8>
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	90 93 f0 03 	sts	0x03F0, r25
    1428:	80 93 ef 03 	sts	0x03EF, r24
    142c:	80 91 f1 03 	lds	r24, 0x03F1
    1430:	90 91 f2 03 	lds	r25, 0x03F2
    1434:	20 e8       	ldi	r18, 0x80	; 128
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	d7 ce       	rjmp	.-594    	; 0x11e8 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    143a:	80 91 09 04 	lds	r24, 0x0409
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	65 e0       	ldi	r22, 0x05	; 5
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__divmodhi4>
    144a:	80 93 09 04 	sts	0x0409, r24

					if(colorState==0) {			// turn on blue and off all IRs
    144e:	88 23       	and	r24, r24
    1450:	09 f0       	breq	.+2      	; 0x1454 <handleIRRemoteCommands+0x2ac>
    1452:	8d c0       	rjmp	.+282    	; 0x156e <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1454:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1456:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1458:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1462:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1466:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
					updateGreenLed(pwm_green);
    146a:	80 91 0d 02 	lds	r24, 0x020D
    146e:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
					updateBlueLed(pwm_blue);
    1472:	80 91 0e 02 	lds	r24, 0x020E
    1476:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>
    147a:	20 91 ef 03 	lds	r18, 0x03EF
    147e:	30 91 f0 03 	lds	r19, 0x03F0
    1482:	80 91 f1 03 	lds	r24, 0x03F1
    1486:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    148a:	a8 ce       	rjmp	.-688    	; 0x11dc <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    148c:	80 91 0a 04 	lds	r24, 0x040A
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	83 70       	andi	r24, 0x03	; 3
    1496:	90 70       	andi	r25, 0x00	; 0
    1498:	80 93 0a 04 	sts	0x040A, r24
					switch(behaviorState) {
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	09 f4       	brne	.+2      	; 0x14a2 <handleIRRemoteCommands+0x2fa>
    14a0:	cf ce       	rjmp	.-610    	; 0x1240 <handleIRRemoteCommands+0x98>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <handleIRRemoteCommands+0x300>
    14a6:	53 c0       	rjmp	.+166    	; 0x154e <handleIRRemoteCommands+0x3a6>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <handleIRRemoteCommands+0x306>
    14ac:	c4 ce       	rjmp	.-632    	; 0x1236 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    14ae:	10 92 29 04 	sts	0x0429, r1
							cliffAvoidanceEnabled = 0;
    14b2:	10 92 2a 04 	sts	0x042A, r1
    14b6:	8a ce       	rjmp	.-748    	; 0x11cc <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    14b8:	20 91 ef 03 	lds	r18, 0x03EF
    14bc:	30 91 f0 03 	lds	r19, 0x03F0
    14c0:	22 5e       	subi	r18, 0xE2	; 226
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	30 93 f0 03 	sts	0x03F0, r19
    14c8:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    14cc:	80 91 f1 03 	lds	r24, 0x03F1
    14d0:	90 91 f2 03 	lds	r25, 0x03F2
    14d4:	4e 97       	sbiw	r24, 0x1e	; 30
    14d6:	90 93 f2 03 	sts	0x03F2, r25
    14da:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    14de:	42 e0       	ldi	r20, 0x02	; 2
    14e0:	21 30       	cpi	r18, 0x01	; 1
    14e2:	34 07       	cpc	r19, r20
    14e4:	34 f0       	brlt	.+12     	; 0x14f2 <handleIRRemoteCommands+0x34a>
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	32 e0       	ldi	r19, 0x02	; 2
    14ea:	30 93 f0 03 	sts	0x03F0, r19
    14ee:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    14f2:	4e ef       	ldi	r20, 0xFE	; 254
    14f4:	80 30       	cpi	r24, 0x00	; 0
    14f6:	94 07       	cpc	r25, r20
    14f8:	0c f0       	brlt	.+2      	; 0x14fc <handleIRRemoteCommands+0x354>
    14fa:	70 ce       	rjmp	.-800    	; 0x11dc <handleIRRemoteCommands+0x34>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	9e ef       	ldi	r25, 0xFE	; 254
    1500:	90 93 f2 03 	sts	0x03F2, r25
    1504:	80 93 f1 03 	sts	0x03F1, r24
    1508:	69 ce       	rjmp	.-814    	; 0x11dc <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    150a:	10 92 f0 03 	sts	0x03F0, r1
    150e:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    1512:	10 92 f2 03 	sts	0x03F2, r1
    1516:	10 92 f1 03 	sts	0x03F1, r1
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	5e ce       	rjmp	.-836    	; 0x11e0 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1524:	80 91 f1 03 	lds	r24, 0x03F1
    1528:	90 91 f2 03 	lds	r25, 0x03F2
    152c:	4e 96       	adiw	r24, 0x1e	; 30
    152e:	90 93 f2 03 	sts	0x03F2, r25
    1532:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1536:	22 e0       	ldi	r18, 0x02	; 2
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	92 07       	cpc	r25, r18
    153c:	0c f4       	brge	.+2      	; 0x1540 <handleIRRemoteCommands+0x398>
    153e:	e5 ce       	rjmp	.-566    	; 0x130a <handleIRRemoteCommands+0x162>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	90 93 f2 03 	sts	0x03F2, r25
    1548:	80 93 f1 03 	sts	0x03F1, r24
    154c:	de ce       	rjmp	.-580    	; 0x130a <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 93 29 04 	sts	0x0429, r24
							cliffAvoidanceEnabled = 1;
    1554:	80 93 2a 04 	sts	0x042A, r24
    1558:	20 91 ef 03 	lds	r18, 0x03EF
    155c:	30 91 f0 03 	lds	r19, 0x03F0
    1560:	80 91 f1 03 	lds	r24, 0x03F1
    1564:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1568:	39 ce       	rjmp	.-910    	; 0x11dc <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    156a:	c9 01       	movw	r24, r18
    156c:	25 cf       	rjmp	.-438    	; 0x13b8 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	61 f0       	breq	.+24     	; 0x158a <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	91 f0       	breq	.+36     	; 0x159a <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	d9 f0       	breq	.+54     	; 0x15b0 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1580:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1584:	80 93 0c 02 	sts	0x020C, r24
    1588:	6e cf       	rjmp	.-292    	; 0x1466 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1590:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1594:	80 93 0c 02 	sts	0x020C, r24
    1598:	66 cf       	rjmp	.-308    	; 0x1466 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    159a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    159c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    15a4:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    15a8:	10 92 0c 02 	sts	0x020C, r1
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	5b cf       	rjmp	.-330    	; 0x1466 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    15b0:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    15b4:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    15b8:	10 92 0c 02 	sts	0x020C, r1
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	53 cf       	rjmp	.-346    	; 0x1466 <handleIRRemoteCommands+0x2be>

000015c0 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    15c0:	08 95       	ret

000015c2 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <start_vertical_speed_control_left+0x14>
    15d4:	b7 c0       	rjmp	.+366    	; 0x1744 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    15d6:	20 91 1e 04 	lds	r18, 0x041E
    15da:	30 91 1f 04 	lds	r19, 0x041F
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	2e 30       	cpi	r18, 0x0E	; 14
    15e2:	34 07       	cpc	r19, r20
    15e4:	0c f4       	brge	.+2      	; 0x15e8 <start_vertical_speed_control_left+0x26>
    15e6:	88 c0       	rjmp	.+272    	; 0x16f8 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    15e8:	18 16       	cp	r1, r24
    15ea:	19 06       	cpc	r1, r25
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <start_vertical_speed_control_left+0x2e>
    15ee:	13 c1       	rjmp	.+550    	; 0x1816 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    15f0:	88 e6       	ldi	r24, 0x68	; 104
    15f2:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    15f4:	82 1b       	sub	r24, r18
    15f6:	93 0b       	sbc	r25, r19
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	29 e1       	ldi	r18, 0x19	; 25
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	28 1b       	sub	r18, r24
    1606:	39 0b       	sbc	r19, r25
    1608:	30 93 04 02 	sts	0x0204, r19
    160c:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1610:	40 91 2d 04 	lds	r20, 0x042D
    1614:	50 91 2e 04 	lds	r21, 0x042E
    1618:	50 93 48 04 	sts	0x0448, r21
    161c:	40 93 47 04 	sts	0x0447, r20
	if(*pwm_left >= 0) {
    1620:	20 81       	ld	r18, Z
    1622:	31 81       	ldd	r19, Z+1	; 0x01
    1624:	37 fd       	sbrc	r19, 7
    1626:	d2 c0       	rjmp	.+420    	; 0x17cc <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1628:	80 91 e7 03 	lds	r24, 0x03E7
    162c:	90 91 e8 03 	lds	r25, 0x03E8
    1630:	b9 01       	movw	r22, r18
    1632:	68 1b       	sub	r22, r24
    1634:	79 0b       	sbc	r23, r25
    1636:	cb 01       	movw	r24, r22
    1638:	70 93 2e 04 	sts	0x042E, r23
    163c:	60 93 2d 04 	sts	0x042D, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1640:	20 91 f7 03 	lds	r18, 0x03F7
    1644:	30 91 f8 03 	lds	r19, 0x03F8
    1648:	28 0f       	add	r18, r24
    164a:	39 1f       	adc	r19, r25
    164c:	30 93 f8 03 	sts	0x03F8, r19
    1650:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1654:	76 e0       	ldi	r23, 0x06	; 6
    1656:	21 34       	cpi	r18, 0x41	; 65
    1658:	37 07       	cpc	r19, r23
    165a:	0c f4       	brge	.+2      	; 0x165e <start_vertical_speed_control_left+0x9c>
    165c:	84 c0       	rjmp	.+264    	; 0x1766 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    165e:	20 e4       	ldi	r18, 0x40	; 64
    1660:	36 e0       	ldi	r19, 0x06	; 6
    1662:	30 93 f8 03 	sts	0x03F8, r19
    1666:	20 93 f7 03 	sts	0x03F7, r18
    166a:	60 ec       	ldi	r22, 0xC0	; 192
    166c:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    166e:	9c 01       	movw	r18, r24
    1670:	22 0f       	add	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	dc 01       	movw	r26, r24
    1676:	aa 0f       	add	r26, r26
    1678:	bb 1f       	adc	r27, r27
    167a:	aa 0f       	add	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	aa 0f       	add	r26, r26
    1680:	bb 1f       	adc	r27, r27
    1682:	2a 0f       	add	r18, r26
    1684:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1686:	00 81       	ld	r16, Z
    1688:	11 81       	ldd	r17, Z+1	; 0x01
    168a:	c0 91 03 02 	lds	r28, 0x0203
    168e:	d0 91 04 02 	lds	r29, 0x0204
    1692:	0c 9f       	mul	r16, r28
    1694:	d0 01       	movw	r26, r0
    1696:	0d 9f       	mul	r16, r29
    1698:	b0 0d       	add	r27, r0
    169a:	1c 9f       	mul	r17, r28
    169c:	b0 0d       	add	r27, r0
    169e:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    16a0:	2a 0f       	add	r18, r26
    16a2:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    16a4:	48 1b       	sub	r20, r24
    16a6:	59 0b       	sbc	r21, r25
    16a8:	44 0f       	add	r20, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	24 0f       	add	r18, r20
    16ae:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    16b0:	26 0f       	add	r18, r22
    16b2:	37 1f       	adc	r19, r23
    16b4:	30 93 f6 03 	sts	0x03F6, r19
    16b8:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    16bc:	37 fd       	sbrc	r19, 7
    16be:	69 c0       	rjmp	.+210    	; 0x1792 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    16c0:	12 16       	cp	r1, r18
    16c2:	13 06       	cpc	r1, r19
    16c4:	0c f0       	brlt	.+2      	; 0x16c8 <start_vertical_speed_control_left+0x106>
    16c6:	6f c0       	rjmp	.+222    	; 0x17a6 <start_vertical_speed_control_left+0x1e4>
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	97 fd       	sbrc	r25, 7
    16ce:	89 c0       	rjmp	.+274    	; 0x17e2 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    16d0:	7d e5       	ldi	r23, 0x5D	; 93
    16d2:	21 3c       	cpi	r18, 0xC1	; 193
    16d4:	37 07       	cpc	r19, r23
    16d6:	0c f4       	brge	.+2      	; 0x16da <start_vertical_speed_control_left+0x118>
    16d8:	66 c0       	rjmp	.+204    	; 0x17a6 <start_vertical_speed_control_left+0x1e4>
    16da:	80 ec       	ldi	r24, 0xC0	; 192
    16dc:	9d e5       	ldi	r25, 0x5D	; 93
    16de:	90 93 f6 03 	sts	0x03F6, r25
    16e2:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	92 e0       	ldi	r25, 0x02	; 2
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    16f8:	24 3b       	cpi	r18, 0xB4	; 180
    16fa:	31 05       	cpc	r19, r1
    16fc:	94 f4       	brge	.+36     	; 0x1722 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    16fe:	2a 35       	cpi	r18, 0x5A	; 90
    1700:	31 05       	cpc	r19, r1
    1702:	7c f4       	brge	.+30     	; 0x1722 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    1704:	18 16       	cp	r1, r24
    1706:	19 06       	cpc	r1, r25
    1708:	0c f0       	brlt	.+2      	; 0x170c <start_vertical_speed_control_left+0x14a>
    170a:	93 c0       	rjmp	.+294    	; 0x1832 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    170c:	35 95       	asr	r19
    170e:	27 95       	ror	r18
    1710:	35 95       	asr	r19
    1712:	27 95       	ror	r18
    1714:	27 5e       	subi	r18, 0xE7	; 231
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	30 93 04 02 	sts	0x0204, r19
    171c:	20 93 03 02 	sts	0x0203, r18
    1720:	77 cf       	rjmp	.-274    	; 0x1610 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1722:	18 16       	cp	r1, r24
    1724:	19 06       	cpc	r1, r25
    1726:	94 f5       	brge	.+100    	; 0x178c <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1728:	84 eb       	ldi	r24, 0xB4	; 180
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	82 1b       	sub	r24, r18
    172e:	93 0b       	sbc	r25, r19
    1730:	95 95       	asr	r25
    1732:	87 95       	ror	r24
    1734:	95 95       	asr	r25
    1736:	87 95       	ror	r24
    1738:	49 96       	adiw	r24, 0x19	; 25
    173a:	90 93 04 02 	sts	0x0204, r25
    173e:	80 93 03 02 	sts	0x0203, r24
    1742:	66 cf       	rjmp	.-308    	; 0x1610 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1744:	10 92 f8 03 	sts	0x03F8, r1
    1748:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    174c:	10 92 2e 04 	sts	0x042E, r1
    1750:	10 92 2d 04 	sts	0x042D, r1
		delta_left_speed_prev = 0;
    1754:	10 92 48 04 	sts	0x0448, r1
    1758:	10 92 47 04 	sts	0x0447, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1766:	69 ef       	ldi	r22, 0xF9	; 249
    1768:	20 3c       	cpi	r18, 0xC0	; 192
    176a:	36 07       	cpc	r19, r22
    176c:	4c f4       	brge	.+18     	; 0x1780 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    176e:	20 ec       	ldi	r18, 0xC0	; 192
    1770:	39 ef       	ldi	r19, 0xF9	; 249
    1772:	30 93 f8 03 	sts	0x03F8, r19
    1776:	20 93 f7 03 	sts	0x03F7, r18
    177a:	60 e4       	ldi	r22, 0x40	; 64
    177c:	7d ee       	ldi	r23, 0xED	; 237
    177e:	77 cf       	rjmp	.-274    	; 0x166e <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1780:	b9 01       	movw	r22, r18
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	62 0f       	add	r22, r18
    1788:	73 1f       	adc	r23, r19
    178a:	71 cf       	rjmp	.-286    	; 0x166e <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    178c:	84 eb       	ldi	r24, 0xB4	; 180
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	31 cf       	rjmp	.-414    	; 0x15f4 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	97 fd       	sbrc	r25, 7
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    179a:	10 92 f6 03 	sts	0x03F6, r1
    179e:	10 92 f5 03 	sts	0x03F5, r1
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    17a6:	82 ea       	ldi	r24, 0xA2	; 162
    17a8:	20 34       	cpi	r18, 0x40	; 64
    17aa:	38 07       	cpc	r19, r24
    17ac:	04 f5       	brge	.+64     	; 0x17ee <start_vertical_speed_control_left+0x22c>
    17ae:	80 e4       	ldi	r24, 0x40	; 64
    17b0:	92 ea       	ldi	r25, 0xA2	; 162
    17b2:	90 93 f6 03 	sts	0x03F6, r25
    17b6:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	9e ef       	ldi	r25, 0xFE	; 254
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24


}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    17cc:	80 91 e7 03 	lds	r24, 0x03E7
    17d0:	90 91 e8 03 	lds	r25, 0x03E8
    17d4:	82 0f       	add	r24, r18
    17d6:	93 1f       	adc	r25, r19
    17d8:	90 93 2e 04 	sts	0x042E, r25
    17dc:	80 93 2d 04 	sts	0x042D, r24
    17e0:	2f cf       	rjmp	.-418    	; 0x1640 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    17e2:	10 92 f6 03 	sts	0x03F6, r1
    17e6:	10 92 f5 03 	sts	0x03F5, r1
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    17ee:	35 95       	asr	r19
    17f0:	27 95       	ror	r18
    17f2:	35 95       	asr	r19
    17f4:	27 95       	ror	r18
    17f6:	35 95       	asr	r19
    17f8:	27 95       	ror	r18
    17fa:	35 95       	asr	r19
    17fc:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    17fe:	31 83       	std	Z+1, r19	; 0x01
    1800:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1802:	42 e0       	ldi	r20, 0x02	; 2
    1804:	21 30       	cpi	r18, 0x01	; 1
    1806:	34 07       	cpc	r19, r20
    1808:	0c f0       	brlt	.+2      	; 0x180c <start_vertical_speed_control_left+0x24a>
    180a:	6d cf       	rjmp	.-294    	; 0x16e6 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    180c:	6e ef       	ldi	r22, 0xFE	; 254
    180e:	20 30       	cpi	r18, 0x00	; 0
    1810:	36 07       	cpc	r19, r22
    1812:	9c f2       	brlt	.-90     	; 0x17ba <start_vertical_speed_control_left+0x1f8>
    1814:	6c cf       	rjmp	.-296    	; 0x16ee <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1816:	88 e6       	ldi	r24, 0x68	; 104
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	82 1b       	sub	r24, r18
    181c:	93 0b       	sbc	r25, r19
    181e:	95 95       	asr	r25
    1820:	87 95       	ror	r24
    1822:	95 95       	asr	r25
    1824:	87 95       	ror	r24
    1826:	49 96       	adiw	r24, 0x19	; 25
    1828:	90 93 04 02 	sts	0x0204, r25
    182c:	80 93 03 02 	sts	0x0203, r24
    1830:	ef ce       	rjmp	.-546    	; 0x1610 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1832:	35 95       	asr	r19
    1834:	27 95       	ror	r18
    1836:	35 95       	asr	r19
    1838:	27 95       	ror	r18
    183a:	89 e1       	ldi	r24, 0x19	; 25
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	82 1b       	sub	r24, r18
    1840:	93 0b       	sbc	r25, r19
    1842:	90 93 04 02 	sts	0x0204, r25
    1846:	80 93 03 02 	sts	0x0203, r24
    184a:	e2 ce       	rjmp	.-572    	; 0x1610 <start_vertical_speed_control_left+0x4e>

0000184c <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <start_vertical_speed_control_right+0x14>
    185e:	b7 c0       	rjmp	.+366    	; 0x19ce <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1860:	20 91 1e 04 	lds	r18, 0x041E
    1864:	30 91 1f 04 	lds	r19, 0x041F
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	2e 30       	cpi	r18, 0x0E	; 14
    186c:	34 07       	cpc	r19, r20
    186e:	0c f4       	brge	.+2      	; 0x1872 <start_vertical_speed_control_right+0x26>
    1870:	88 c0       	rjmp	.+272    	; 0x1982 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1872:	18 16       	cp	r1, r24
    1874:	19 06       	cpc	r1, r25
    1876:	0c f0       	brlt	.+2      	; 0x187a <start_vertical_speed_control_right+0x2e>
    1878:	13 c1       	rjmp	.+550    	; 0x1aa0 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    187a:	88 e6       	ldi	r24, 0x68	; 104
    187c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    187e:	82 1b       	sub	r24, r18
    1880:	93 0b       	sbc	r25, r19
    1882:	95 95       	asr	r25
    1884:	87 95       	ror	r24
    1886:	95 95       	asr	r25
    1888:	87 95       	ror	r24
    188a:	29 e1       	ldi	r18, 0x19	; 25
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	28 1b       	sub	r18, r24
    1890:	39 0b       	sbc	r19, r25
    1892:	30 93 06 02 	sts	0x0206, r19
    1896:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    189a:	40 91 56 04 	lds	r20, 0x0456
    189e:	50 91 57 04 	lds	r21, 0x0457
    18a2:	50 93 30 04 	sts	0x0430, r21
    18a6:	40 93 2f 04 	sts	0x042F, r20
	if(*pwm_right >= 0) {
    18aa:	20 81       	ld	r18, Z
    18ac:	31 81       	ldd	r19, Z+1	; 0x01
    18ae:	37 fd       	sbrc	r19, 7
    18b0:	d2 c0       	rjmp	.+420    	; 0x1a56 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    18b2:	80 91 e9 03 	lds	r24, 0x03E9
    18b6:	90 91 ea 03 	lds	r25, 0x03EA
    18ba:	b9 01       	movw	r22, r18
    18bc:	68 1b       	sub	r22, r24
    18be:	79 0b       	sbc	r23, r25
    18c0:	cb 01       	movw	r24, r22
    18c2:	70 93 57 04 	sts	0x0457, r23
    18c6:	60 93 56 04 	sts	0x0456, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    18ca:	20 91 f9 03 	lds	r18, 0x03F9
    18ce:	30 91 fa 03 	lds	r19, 0x03FA
    18d2:	28 0f       	add	r18, r24
    18d4:	39 1f       	adc	r19, r25
    18d6:	30 93 fa 03 	sts	0x03FA, r19
    18da:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    18de:	76 e0       	ldi	r23, 0x06	; 6
    18e0:	21 34       	cpi	r18, 0x41	; 65
    18e2:	37 07       	cpc	r19, r23
    18e4:	0c f4       	brge	.+2      	; 0x18e8 <start_vertical_speed_control_right+0x9c>
    18e6:	84 c0       	rjmp	.+264    	; 0x19f0 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    18e8:	20 e4       	ldi	r18, 0x40	; 64
    18ea:	36 e0       	ldi	r19, 0x06	; 6
    18ec:	30 93 fa 03 	sts	0x03FA, r19
    18f0:	20 93 f9 03 	sts	0x03F9, r18
    18f4:	60 ec       	ldi	r22, 0xC0	; 192
    18f6:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    18f8:	9c 01       	movw	r18, r24
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	dc 01       	movw	r26, r24
    1900:	aa 0f       	add	r26, r26
    1902:	bb 1f       	adc	r27, r27
    1904:	aa 0f       	add	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	aa 0f       	add	r26, r26
    190a:	bb 1f       	adc	r27, r27
    190c:	2a 0f       	add	r18, r26
    190e:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1910:	00 81       	ld	r16, Z
    1912:	11 81       	ldd	r17, Z+1	; 0x01
    1914:	c0 91 05 02 	lds	r28, 0x0205
    1918:	d0 91 06 02 	lds	r29, 0x0206
    191c:	0c 9f       	mul	r16, r28
    191e:	d0 01       	movw	r26, r0
    1920:	0d 9f       	mul	r16, r29
    1922:	b0 0d       	add	r27, r0
    1924:	1c 9f       	mul	r17, r28
    1926:	b0 0d       	add	r27, r0
    1928:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    192a:	2a 0f       	add	r18, r26
    192c:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    192e:	48 1b       	sub	r20, r24
    1930:	59 0b       	sbc	r21, r25
    1932:	44 0f       	add	r20, r20
    1934:	55 1f       	adc	r21, r21
    1936:	24 0f       	add	r18, r20
    1938:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    193a:	26 0f       	add	r18, r22
    193c:	37 1f       	adc	r19, r23
    193e:	30 93 f4 03 	sts	0x03F4, r19
    1942:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1946:	37 fd       	sbrc	r19, 7
    1948:	69 c0       	rjmp	.+210    	; 0x1a1c <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    194a:	12 16       	cp	r1, r18
    194c:	13 06       	cpc	r1, r19
    194e:	0c f0       	brlt	.+2      	; 0x1952 <start_vertical_speed_control_right+0x106>
    1950:	6f c0       	rjmp	.+222    	; 0x1a30 <start_vertical_speed_control_right+0x1e4>
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	97 fd       	sbrc	r25, 7
    1958:	89 c0       	rjmp	.+274    	; 0x1a6c <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    195a:	7d e5       	ldi	r23, 0x5D	; 93
    195c:	21 3c       	cpi	r18, 0xC1	; 193
    195e:	37 07       	cpc	r19, r23
    1960:	0c f4       	brge	.+2      	; 0x1964 <start_vertical_speed_control_right+0x118>
    1962:	66 c0       	rjmp	.+204    	; 0x1a30 <start_vertical_speed_control_right+0x1e4>
    1964:	80 ec       	ldi	r24, 0xC0	; 192
    1966:	9d e5       	ldi	r25, 0x5D	; 93
    1968:	90 93 f4 03 	sts	0x03F4, r25
    196c:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	92 e0       	ldi	r25, 0x02	; 2
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1982:	24 3b       	cpi	r18, 0xB4	; 180
    1984:	31 05       	cpc	r19, r1
    1986:	94 f4       	brge	.+36     	; 0x19ac <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1988:	2a 35       	cpi	r18, 0x5A	; 90
    198a:	31 05       	cpc	r19, r1
    198c:	7c f4       	brge	.+30     	; 0x19ac <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    198e:	18 16       	cp	r1, r24
    1990:	19 06       	cpc	r1, r25
    1992:	0c f0       	brlt	.+2      	; 0x1996 <start_vertical_speed_control_right+0x14a>
    1994:	93 c0       	rjmp	.+294    	; 0x1abc <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1996:	35 95       	asr	r19
    1998:	27 95       	ror	r18
    199a:	35 95       	asr	r19
    199c:	27 95       	ror	r18
    199e:	27 5e       	subi	r18, 0xE7	; 231
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	30 93 06 02 	sts	0x0206, r19
    19a6:	20 93 05 02 	sts	0x0205, r18
    19aa:	77 cf       	rjmp	.-274    	; 0x189a <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    19ac:	18 16       	cp	r1, r24
    19ae:	19 06       	cpc	r1, r25
    19b0:	94 f5       	brge	.+100    	; 0x1a16 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    19b2:	84 eb       	ldi	r24, 0xB4	; 180
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	82 1b       	sub	r24, r18
    19b8:	93 0b       	sbc	r25, r19
    19ba:	95 95       	asr	r25
    19bc:	87 95       	ror	r24
    19be:	95 95       	asr	r25
    19c0:	87 95       	ror	r24
    19c2:	49 96       	adiw	r24, 0x19	; 25
    19c4:	90 93 06 02 	sts	0x0206, r25
    19c8:	80 93 05 02 	sts	0x0205, r24
    19cc:	66 cf       	rjmp	.-308    	; 0x189a <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    19ce:	10 92 fa 03 	sts	0x03FA, r1
    19d2:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    19d6:	10 92 57 04 	sts	0x0457, r1
    19da:	10 92 56 04 	sts	0x0456, r1
		delta_right_speed_prev = 0;
    19de:	10 92 30 04 	sts	0x0430, r1
    19e2:	10 92 2f 04 	sts	0x042F, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    19f0:	69 ef       	ldi	r22, 0xF9	; 249
    19f2:	20 3c       	cpi	r18, 0xC0	; 192
    19f4:	36 07       	cpc	r19, r22
    19f6:	4c f4       	brge	.+18     	; 0x1a0a <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    19f8:	20 ec       	ldi	r18, 0xC0	; 192
    19fa:	39 ef       	ldi	r19, 0xF9	; 249
    19fc:	30 93 fa 03 	sts	0x03FA, r19
    1a00:	20 93 f9 03 	sts	0x03F9, r18
    1a04:	60 e4       	ldi	r22, 0x40	; 64
    1a06:	7d ee       	ldi	r23, 0xED	; 237
    1a08:	77 cf       	rjmp	.-274    	; 0x18f8 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	62 0f       	add	r22, r18
    1a12:	73 1f       	adc	r23, r19
    1a14:	71 cf       	rjmp	.-286    	; 0x18f8 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1a16:	84 eb       	ldi	r24, 0xB4	; 180
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	31 cf       	rjmp	.-414    	; 0x187e <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	97 fd       	sbrc	r25, 7
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1a24:	10 92 f4 03 	sts	0x03F4, r1
    1a28:	10 92 f3 03 	sts	0x03F3, r1
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1a30:	82 ea       	ldi	r24, 0xA2	; 162
    1a32:	20 34       	cpi	r18, 0x40	; 64
    1a34:	38 07       	cpc	r19, r24
    1a36:	04 f5       	brge	.+64     	; 0x1a78 <start_vertical_speed_control_right+0x22c>
    1a38:	80 e4       	ldi	r24, 0x40	; 64
    1a3a:	92 ea       	ldi	r25, 0xA2	; 162
    1a3c:	90 93 f4 03 	sts	0x03F4, r25
    1a40:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	9e ef       	ldi	r25, 0xFE	; 254
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24

}
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1a56:	80 91 e9 03 	lds	r24, 0x03E9
    1a5a:	90 91 ea 03 	lds	r25, 0x03EA
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	90 93 57 04 	sts	0x0457, r25
    1a66:	80 93 56 04 	sts	0x0456, r24
    1a6a:	2f cf       	rjmp	.-418    	; 0x18ca <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1a6c:	10 92 f4 03 	sts	0x03F4, r1
    1a70:	10 92 f3 03 	sts	0x03F3, r1
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1a78:	35 95       	asr	r19
    1a7a:	27 95       	ror	r18
    1a7c:	35 95       	asr	r19
    1a7e:	27 95       	ror	r18
    1a80:	35 95       	asr	r19
    1a82:	27 95       	ror	r18
    1a84:	35 95       	asr	r19
    1a86:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1a88:	31 83       	std	Z+1, r19	; 0x01
    1a8a:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1a8c:	42 e0       	ldi	r20, 0x02	; 2
    1a8e:	21 30       	cpi	r18, 0x01	; 1
    1a90:	34 07       	cpc	r19, r20
    1a92:	0c f0       	brlt	.+2      	; 0x1a96 <start_vertical_speed_control_right+0x24a>
    1a94:	6d cf       	rjmp	.-294    	; 0x1970 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1a96:	6e ef       	ldi	r22, 0xFE	; 254
    1a98:	20 30       	cpi	r18, 0x00	; 0
    1a9a:	36 07       	cpc	r19, r22
    1a9c:	9c f2       	brlt	.-90     	; 0x1a44 <start_vertical_speed_control_right+0x1f8>
    1a9e:	6c cf       	rjmp	.-296    	; 0x1978 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1aa0:	88 e6       	ldi	r24, 0x68	; 104
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	82 1b       	sub	r24, r18
    1aa6:	93 0b       	sbc	r25, r19
    1aa8:	95 95       	asr	r25
    1aaa:	87 95       	ror	r24
    1aac:	95 95       	asr	r25
    1aae:	87 95       	ror	r24
    1ab0:	49 96       	adiw	r24, 0x19	; 25
    1ab2:	90 93 06 02 	sts	0x0206, r25
    1ab6:	80 93 05 02 	sts	0x0205, r24
    1aba:	ef ce       	rjmp	.-546    	; 0x189a <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1abc:	35 95       	asr	r19
    1abe:	27 95       	ror	r18
    1ac0:	35 95       	asr	r19
    1ac2:	27 95       	ror	r18
    1ac4:	89 e1       	ldi	r24, 0x19	; 25
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	82 1b       	sub	r24, r18
    1aca:	93 0b       	sbc	r25, r19
    1acc:	90 93 06 02 	sts	0x0206, r25
    1ad0:	80 93 05 02 	sts	0x0205, r24
    1ad4:	e2 ce       	rjmp	.-572    	; 0x189a <start_vertical_speed_control_right+0x4e>

00001ad6 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1ad6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <start_horizontal_speed_control_right+0xc>
    1ae0:	7b c0       	rjmp	.+246    	; 0x1bd8 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1ae2:	a0 91 56 04 	lds	r26, 0x0456
    1ae6:	b0 91 57 04 	lds	r27, 0x0457
    1aea:	b0 93 30 04 	sts	0x0430, r27
    1aee:	a0 93 2f 04 	sts	0x042F, r26
	if(*pwm_right >= 0) {
    1af2:	20 81       	ld	r18, Z
    1af4:	31 81       	ldd	r19, Z+1	; 0x01
    1af6:	37 fd       	sbrc	r19, 7
    1af8:	89 c0       	rjmp	.+274    	; 0x1c0c <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1afa:	80 91 e9 03 	lds	r24, 0x03E9
    1afe:	90 91 ea 03 	lds	r25, 0x03EA
    1b02:	a9 01       	movw	r20, r18
    1b04:	48 1b       	sub	r20, r24
    1b06:	59 0b       	sbc	r21, r25
    1b08:	ca 01       	movw	r24, r20
    1b0a:	50 93 57 04 	sts	0x0457, r21
    1b0e:	40 93 56 04 	sts	0x0456, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1b12:	20 91 f9 03 	lds	r18, 0x03F9
    1b16:	30 91 fa 03 	lds	r19, 0x03FA
    1b1a:	28 0f       	add	r18, r24
    1b1c:	39 1f       	adc	r19, r25
    1b1e:	30 93 fa 03 	sts	0x03FA, r19
    1b22:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1b26:	56 e0       	ldi	r21, 0x06	; 6
    1b28:	21 34       	cpi	r18, 0x41	; 65
    1b2a:	35 07       	cpc	r19, r21
    1b2c:	0c f4       	brge	.+2      	; 0x1b30 <start_horizontal_speed_control_right+0x5a>
    1b2e:	61 c0       	rjmp	.+194    	; 0x1bf2 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1b30:	20 e4       	ldi	r18, 0x40	; 64
    1b32:	36 e0       	ldi	r19, 0x06	; 6
    1b34:	30 93 fa 03 	sts	0x03FA, r19
    1b38:	20 93 f9 03 	sts	0x03F9, r18
    1b3c:	60 e8       	ldi	r22, 0x80	; 128
    1b3e:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1b40:	9c 01       	movw	r18, r24
    1b42:	22 0f       	add	r18, r18
    1b44:	33 1f       	adc	r19, r19
    1b46:	28 0f       	add	r18, r24
    1b48:	39 1f       	adc	r19, r25
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	22 0f       	add	r18, r18
    1b50:	33 1f       	adc	r19, r19
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	28 0f       	add	r18, r24
    1b58:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1b5a:	40 81       	ld	r20, Z
    1b5c:	51 81       	ldd	r21, Z+1	; 0x01
    1b5e:	44 0f       	add	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	44 0f       	add	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	44 0f       	add	r20, r20
    1b68:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1b6a:	24 0f       	add	r18, r20
    1b6c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1b6e:	ad 01       	movw	r20, r26
    1b70:	48 1b       	sub	r20, r24
    1b72:	59 0b       	sbc	r21, r25
    1b74:	ca 01       	movw	r24, r20
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	84 0f       	add	r24, r20
    1b7c:	95 1f       	adc	r25, r21
    1b7e:	28 0f       	add	r18, r24
    1b80:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1b82:	26 0f       	add	r18, r22
    1b84:	37 1f       	adc	r19, r23
    1b86:	30 93 f4 03 	sts	0x03F4, r19
    1b8a:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1b8e:	37 fd       	sbrc	r19, 7
    1b90:	4c c0       	rjmp	.+152    	; 0x1c2a <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1b92:	12 16       	cp	r1, r18
    1b94:	13 06       	cpc	r1, r19
    1b96:	0c f0       	brlt	.+2      	; 0x1b9a <start_horizontal_speed_control_right+0xc4>
    1b98:	52 c0       	rjmp	.+164    	; 0x1c3e <start_horizontal_speed_control_right+0x168>
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	97 fd       	sbrc	r25, 7
    1ba0:	67 c0       	rjmp	.+206    	; 0x1c70 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1ba2:	5d e5       	ldi	r21, 0x5D	; 93
    1ba4:	21 3c       	cpi	r18, 0xC1	; 193
    1ba6:	35 07       	cpc	r19, r21
    1ba8:	0c f4       	brge	.+2      	; 0x1bac <start_horizontal_speed_control_right+0xd6>
    1baa:	49 c0       	rjmp	.+146    	; 0x1c3e <start_horizontal_speed_control_right+0x168>
    1bac:	80 ec       	ldi	r24, 0xC0	; 192
    1bae:	9d e5       	ldi	r25, 0x5D	; 93
    1bb0:	90 93 f4 03 	sts	0x03F4, r25
    1bb4:	80 93 f3 03 	sts	0x03F3, r24
    1bb8:	2c ed       	ldi	r18, 0xDC	; 220
    1bba:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1bbc:	22 5e       	subi	r18, 0xE2	; 226
    1bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc0:	31 83       	std	Z+1, r19	; 0x01
    1bc2:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1bc4:	42 e0       	ldi	r20, 0x02	; 2
    1bc6:	21 30       	cpi	r18, 0x01	; 1
    1bc8:	34 07       	cpc	r19, r20
    1bca:	0c f4       	brge	.+2      	; 0x1bce <start_horizontal_speed_control_right+0xf8>
    1bcc:	48 c0       	rjmp	.+144    	; 0x1c5e <start_horizontal_speed_control_right+0x188>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
    1bd6:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1bd8:	10 92 fa 03 	sts	0x03FA, r1
    1bdc:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1be0:	10 92 57 04 	sts	0x0457, r1
    1be4:	10 92 56 04 	sts	0x0456, r1
		delta_right_speed_prev = 0;
    1be8:	10 92 30 04 	sts	0x0430, r1
    1bec:	10 92 2f 04 	sts	0x042F, r1
		return;
    1bf0:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1bf2:	49 ef       	ldi	r20, 0xF9	; 249
    1bf4:	20 3c       	cpi	r18, 0xC0	; 192
    1bf6:	34 07       	cpc	r19, r20
    1bf8:	a4 f4       	brge	.+40     	; 0x1c22 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1bfa:	20 ec       	ldi	r18, 0xC0	; 192
    1bfc:	39 ef       	ldi	r19, 0xF9	; 249
    1bfe:	30 93 fa 03 	sts	0x03FA, r19
    1c02:	20 93 f9 03 	sts	0x03F9, r18
    1c06:	60 e8       	ldi	r22, 0x80	; 128
    1c08:	73 ef       	ldi	r23, 0xF3	; 243
    1c0a:	9a cf       	rjmp	.-204    	; 0x1b40 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1c0c:	80 91 e9 03 	lds	r24, 0x03E9
    1c10:	90 91 ea 03 	lds	r25, 0x03EA
    1c14:	82 0f       	add	r24, r18
    1c16:	93 1f       	adc	r25, r19
    1c18:	90 93 57 04 	sts	0x0457, r25
    1c1c:	80 93 56 04 	sts	0x0456, r24
    1c20:	78 cf       	rjmp	.-272    	; 0x1b12 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1c22:	b9 01       	movw	r22, r18
    1c24:	66 0f       	add	r22, r22
    1c26:	77 1f       	adc	r23, r23
    1c28:	8b cf       	rjmp	.-234    	; 0x1b40 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	97 fd       	sbrc	r25, 7
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1c32:	10 92 f4 03 	sts	0x03F4, r1
    1c36:	10 92 f3 03 	sts	0x03F3, r1
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c3e:	82 ea       	ldi	r24, 0xA2	; 162
    1c40:	20 34       	cpi	r18, 0x40	; 64
    1c42:	38 07       	cpc	r19, r24
    1c44:	dc f4       	brge	.+54     	; 0x1c7c <start_horizontal_speed_control_right+0x1a6>
    1c46:	80 e4       	ldi	r24, 0x40	; 64
    1c48:	92 ea       	ldi	r25, 0xA2	; 162
    1c4a:	90 93 f4 03 	sts	0x03F4, r25
    1c4e:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1c52:	24 e2       	ldi	r18, 0x24	; 36
    1c54:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1c56:	2e 51       	subi	r18, 0x1E	; 30
    1c58:	30 40       	sbci	r19, 0x00	; 0
    1c5a:	31 83       	std	Z+1, r19	; 0x01
    1c5c:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1c5e:	5e ef       	ldi	r21, 0xFE	; 254
    1c60:	20 30       	cpi	r18, 0x00	; 0
    1c62:	35 07       	cpc	r19, r21
    1c64:	24 f4       	brge	.+8      	; 0x1c6e <start_horizontal_speed_control_right+0x198>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	9e ef       	ldi	r25, 0xFE	; 254
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1c70:	10 92 f4 03 	sts	0x03F4, r1
    1c74:	10 92 f3 03 	sts	0x03F3, r1
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c7c:	35 95       	asr	r19
    1c7e:	27 95       	ror	r18
    1c80:	35 95       	asr	r19
    1c82:	27 95       	ror	r18
    1c84:	35 95       	asr	r19
    1c86:	27 95       	ror	r18
    1c88:	35 95       	asr	r19
    1c8a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1c8c:	31 83       	std	Z+1, r19	; 0x01
    1c8e:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1c90:	12 16       	cp	r1, r18
    1c92:	13 06       	cpc	r1, r19
    1c94:	0c f4       	brge	.+2      	; 0x1c98 <start_horizontal_speed_control_right+0x1c2>
    1c96:	92 cf       	rjmp	.-220    	; 0x1bbc <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1c98:	21 15       	cp	r18, r1
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	e1 f6       	brne	.-72     	; 0x1c56 <start_horizontal_speed_control_right+0x180>
    1c9e:	08 95       	ret

00001ca0 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1ca0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <start_horizontal_speed_control_left+0xc>
    1caa:	7b c0       	rjmp	.+246    	; 0x1da2 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1cac:	a0 91 2d 04 	lds	r26, 0x042D
    1cb0:	b0 91 2e 04 	lds	r27, 0x042E
    1cb4:	b0 93 48 04 	sts	0x0448, r27
    1cb8:	a0 93 47 04 	sts	0x0447, r26
	if(*pwm_left >= 0) {
    1cbc:	20 81       	ld	r18, Z
    1cbe:	31 81       	ldd	r19, Z+1	; 0x01
    1cc0:	37 fd       	sbrc	r19, 7
    1cc2:	89 c0       	rjmp	.+274    	; 0x1dd6 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1cc4:	80 91 e7 03 	lds	r24, 0x03E7
    1cc8:	90 91 e8 03 	lds	r25, 0x03E8
    1ccc:	a9 01       	movw	r20, r18
    1cce:	48 1b       	sub	r20, r24
    1cd0:	59 0b       	sbc	r21, r25
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	50 93 2e 04 	sts	0x042E, r21
    1cd8:	40 93 2d 04 	sts	0x042D, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1cdc:	20 91 f7 03 	lds	r18, 0x03F7
    1ce0:	30 91 f8 03 	lds	r19, 0x03F8
    1ce4:	28 0f       	add	r18, r24
    1ce6:	39 1f       	adc	r19, r25
    1ce8:	30 93 f8 03 	sts	0x03F8, r19
    1cec:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1cf0:	56 e0       	ldi	r21, 0x06	; 6
    1cf2:	21 34       	cpi	r18, 0x41	; 65
    1cf4:	35 07       	cpc	r19, r21
    1cf6:	0c f4       	brge	.+2      	; 0x1cfa <start_horizontal_speed_control_left+0x5a>
    1cf8:	61 c0       	rjmp	.+194    	; 0x1dbc <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1cfa:	20 e4       	ldi	r18, 0x40	; 64
    1cfc:	36 e0       	ldi	r19, 0x06	; 6
    1cfe:	30 93 f8 03 	sts	0x03F8, r19
    1d02:	20 93 f7 03 	sts	0x03F7, r18
    1d06:	60 e8       	ldi	r22, 0x80	; 128
    1d08:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1d0a:	9c 01       	movw	r18, r24
    1d0c:	22 0f       	add	r18, r18
    1d0e:	33 1f       	adc	r19, r19
    1d10:	28 0f       	add	r18, r24
    1d12:	39 1f       	adc	r19, r25
    1d14:	22 0f       	add	r18, r18
    1d16:	33 1f       	adc	r19, r19
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	22 0f       	add	r18, r18
    1d1e:	33 1f       	adc	r19, r19
    1d20:	28 0f       	add	r18, r24
    1d22:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1d24:	40 81       	ld	r20, Z
    1d26:	51 81       	ldd	r21, Z+1	; 0x01
    1d28:	44 0f       	add	r20, r20
    1d2a:	55 1f       	adc	r21, r21
    1d2c:	44 0f       	add	r20, r20
    1d2e:	55 1f       	adc	r21, r21
    1d30:	44 0f       	add	r20, r20
    1d32:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1d34:	24 0f       	add	r18, r20
    1d36:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1d38:	ad 01       	movw	r20, r26
    1d3a:	48 1b       	sub	r20, r24
    1d3c:	59 0b       	sbc	r21, r25
    1d3e:	ca 01       	movw	r24, r20
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	84 0f       	add	r24, r20
    1d46:	95 1f       	adc	r25, r21
    1d48:	28 0f       	add	r18, r24
    1d4a:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1d4c:	26 0f       	add	r18, r22
    1d4e:	37 1f       	adc	r19, r23
    1d50:	30 93 f6 03 	sts	0x03F6, r19
    1d54:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1d58:	37 fd       	sbrc	r19, 7
    1d5a:	4c c0       	rjmp	.+152    	; 0x1df4 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1d5c:	12 16       	cp	r1, r18
    1d5e:	13 06       	cpc	r1, r19
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <start_horizontal_speed_control_left+0xc4>
    1d62:	52 c0       	rjmp	.+164    	; 0x1e08 <start_horizontal_speed_control_left+0x168>
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	97 fd       	sbrc	r25, 7
    1d6a:	67 c0       	rjmp	.+206    	; 0x1e3a <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1d6c:	5d e5       	ldi	r21, 0x5D	; 93
    1d6e:	21 3c       	cpi	r18, 0xC1	; 193
    1d70:	35 07       	cpc	r19, r21
    1d72:	0c f4       	brge	.+2      	; 0x1d76 <start_horizontal_speed_control_left+0xd6>
    1d74:	49 c0       	rjmp	.+146    	; 0x1e08 <start_horizontal_speed_control_left+0x168>
    1d76:	80 ec       	ldi	r24, 0xC0	; 192
    1d78:	9d e5       	ldi	r25, 0x5D	; 93
    1d7a:	90 93 f6 03 	sts	0x03F6, r25
    1d7e:	80 93 f5 03 	sts	0x03F5, r24
    1d82:	2c ed       	ldi	r18, 0xDC	; 220
    1d84:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1d86:	22 5e       	subi	r18, 0xE2	; 226
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	31 83       	std	Z+1, r19	; 0x01
    1d8c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1d8e:	42 e0       	ldi	r20, 0x02	; 2
    1d90:	21 30       	cpi	r18, 0x01	; 1
    1d92:	34 07       	cpc	r19, r20
    1d94:	0c f4       	brge	.+2      	; 0x1d98 <start_horizontal_speed_control_left+0xf8>
    1d96:	48 c0       	rjmp	.+144    	; 0x1e28 <start_horizontal_speed_control_left+0x188>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1da2:	10 92 f8 03 	sts	0x03F8, r1
    1da6:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1daa:	10 92 2e 04 	sts	0x042E, r1
    1dae:	10 92 2d 04 	sts	0x042D, r1
		delta_left_speed_prev = 0;
    1db2:	10 92 48 04 	sts	0x0448, r1
    1db6:	10 92 47 04 	sts	0x0447, r1
		return;
    1dba:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1dbc:	49 ef       	ldi	r20, 0xF9	; 249
    1dbe:	20 3c       	cpi	r18, 0xC0	; 192
    1dc0:	34 07       	cpc	r19, r20
    1dc2:	a4 f4       	brge	.+40     	; 0x1dec <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1dc4:	20 ec       	ldi	r18, 0xC0	; 192
    1dc6:	39 ef       	ldi	r19, 0xF9	; 249
    1dc8:	30 93 f8 03 	sts	0x03F8, r19
    1dcc:	20 93 f7 03 	sts	0x03F7, r18
    1dd0:	60 e8       	ldi	r22, 0x80	; 128
    1dd2:	73 ef       	ldi	r23, 0xF3	; 243
    1dd4:	9a cf       	rjmp	.-204    	; 0x1d0a <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1dd6:	80 91 e7 03 	lds	r24, 0x03E7
    1dda:	90 91 e8 03 	lds	r25, 0x03E8
    1dde:	82 0f       	add	r24, r18
    1de0:	93 1f       	adc	r25, r19
    1de2:	90 93 2e 04 	sts	0x042E, r25
    1de6:	80 93 2d 04 	sts	0x042D, r24
    1dea:	78 cf       	rjmp	.-272    	; 0x1cdc <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1dec:	b9 01       	movw	r22, r18
    1dee:	66 0f       	add	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	8b cf       	rjmp	.-234    	; 0x1d0a <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	97 fd       	sbrc	r25, 7
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1dfc:	10 92 f6 03 	sts	0x03F6, r1
    1e00:	10 92 f5 03 	sts	0x03F5, r1
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1e08:	82 ea       	ldi	r24, 0xA2	; 162
    1e0a:	20 34       	cpi	r18, 0x40	; 64
    1e0c:	38 07       	cpc	r19, r24
    1e0e:	dc f4       	brge	.+54     	; 0x1e46 <start_horizontal_speed_control_left+0x1a6>
    1e10:	80 e4       	ldi	r24, 0x40	; 64
    1e12:	92 ea       	ldi	r25, 0xA2	; 162
    1e14:	90 93 f6 03 	sts	0x03F6, r25
    1e18:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1e1c:	24 e2       	ldi	r18, 0x24	; 36
    1e1e:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    1e20:	2e 51       	subi	r18, 0x1E	; 30
    1e22:	30 40       	sbci	r19, 0x00	; 0
    1e24:	31 83       	std	Z+1, r19	; 0x01
    1e26:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1e28:	5e ef       	ldi	r21, 0xFE	; 254
    1e2a:	20 30       	cpi	r18, 0x00	; 0
    1e2c:	35 07       	cpc	r19, r21
    1e2e:	24 f4       	brge	.+8      	; 0x1e38 <start_horizontal_speed_control_left+0x198>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	9e ef       	ldi	r25, 0xFE	; 254
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1e3a:	10 92 f6 03 	sts	0x03F6, r1
    1e3e:	10 92 f5 03 	sts	0x03F5, r1
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1e46:	35 95       	asr	r19
    1e48:	27 95       	ror	r18
    1e4a:	35 95       	asr	r19
    1e4c:	27 95       	ror	r18
    1e4e:	35 95       	asr	r19
    1e50:	27 95       	ror	r18
    1e52:	35 95       	asr	r19
    1e54:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1e56:	31 83       	std	Z+1, r19	; 0x01
    1e58:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    1e5a:	12 16       	cp	r1, r18
    1e5c:	13 06       	cpc	r1, r19
    1e5e:	0c f4       	brge	.+2      	; 0x1e62 <start_horizontal_speed_control_left+0x1c2>
    1e60:	92 cf       	rjmp	.-220    	; 0x1d86 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    1e62:	21 15       	cp	r18, r1
    1e64:	31 05       	cpc	r19, r1
    1e66:	e1 f6       	brne	.-72     	; 0x1e20 <start_horizontal_speed_control_left+0x180>
    1e68:	08 95       	ret

00001e6a <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1e6a:	85 b7       	in	r24, 0x35	; 53
    1e6c:	80 61       	ori	r24, 0x10	; 16
    1e6e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1e74:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1e76:	97 ef       	ldi	r25, 0xF7	; 247
    1e78:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1e7a:	90 ee       	ldi	r25, 0xE0	; 224
    1e7c:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1e7e:	90 ef       	ldi	r25, 0xF0	; 240
    1e80:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1e82:	90 eb       	ldi	r25, 0xB0	; 176
    1e84:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1e86:	9c ef       	ldi	r25, 0xFC	; 252
    1e88:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1e8a:	93 e0       	ldi	r25, 0x03	; 3
    1e8c:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1e8e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1e90:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1e92:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1e94:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1e96:	80 91 28 04 	lds	r24, 0x0428
    1e9a:	88 23       	and	r24, r24
    1e9c:	e1 f0       	breq	.+56     	; 0x1ed6 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	d1 f0       	breq	.+52     	; 0x1ed6 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	51 f1       	breq	.+84     	; 0x1efa <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1eac:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1eb0:	9f e0       	ldi	r25, 0x0F	; 15
    1eb2:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    1eb6:	88 23       	and	r24, r24
    1eb8:	a9 f4       	brne	.+42     	; 0x1ee4 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    1eba:	90 91 05 01 	lds	r25, 0x0105
    1ebe:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1ec2:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1ec6:	9f ef       	ldi	r25, 0xFF	; 255
    1ec8:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    1ecc:	88 23       	and	r24, r24
    1ece:	29 f4       	brne	.+10     	; 0x1eda <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1ed0:	10 92 0b 01 	sts	0x010B, r1
    1ed4:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    1ed6:	14 ba       	out	0x14, r1	; 20
    1ed8:	e6 cf       	rjmp	.-52     	; 0x1ea6 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	c9 f3       	breq	.-14     	; 0x1ed0 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	41 f0       	breq	.+16     	; 0x1ef2 <initPortsIO+0x88>
    1ee2:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	11 f0       	breq	.+4      	; 0x1eec <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	59 f7       	brne	.-42     	; 0x1ec2 <initPortsIO+0x58>
		PORTJ = 0x0F;
    1eec:	90 93 05 01 	sts	0x0105, r25
    1ef0:	e8 cf       	rjmp	.-48     	; 0x1ec2 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1ef2:	87 ef       	ldi	r24, 0xF7	; 247
    1ef4:	80 93 0b 01 	sts	0x010B, r24
    1ef8:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1efa:	98 e0       	ldi	r25, 0x08	; 8
    1efc:	94 bb       	out	0x14, r25	; 20
    1efe:	d3 cf       	rjmp	.-90     	; 0x1ea6 <initPortsIO+0x3c>

00001f00 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    1f00:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1f04:	10 92 bc 00 	sts	0x00BC, r1
}
    1f08:	08 95       	ret

00001f0a <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1f0a:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1f0c:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1f0e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1f12:	80 e2       	ldi	r24, 0x20	; 32
    1f14:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1f18:	08 95       	ret

00001f1a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f1a:	94 ea       	ldi	r25, 0xA4	; 164
    1f1c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f20:	90 91 bc 00 	lds	r25, 0x00BC
    1f24:	97 ff       	sbrs	r25, 7
    1f26:	fc cf       	rjmp	.-8      	; 0x1f20 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1f28:	90 91 b9 00 	lds	r25, 0x00B9
    1f2c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1f2e:	98 30       	cpi	r25, 0x08	; 8
    1f30:	21 f0       	breq	.+8      	; 0x1f3a <i2c_start+0x20>
    1f32:	90 31       	cpi	r25, 0x10	; 16
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1f3a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f3e:	84 e8       	ldi	r24, 0x84	; 132
    1f40:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1f44:	80 91 bc 00 	lds	r24, 0x00BC
    1f48:	87 ff       	sbrs	r24, 7
    1f4a:	fc cf       	rjmp	.-8      	; 0x1f44 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1f4c:	90 91 b9 00 	lds	r25, 0x00B9
    1f50:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1f52:	98 31       	cpi	r25, 0x18	; 24
    1f54:	21 f0       	breq	.+8      	; 0x1f5e <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 34       	cpi	r25, 0x40	; 64
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    1f5c:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1f5e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1f60:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	08 95       	ret

00001f66 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f66:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1f68:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f6a:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f6c:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1f70:	90 91 bc 00 	lds	r25, 0x00BC
    1f74:	97 ff       	sbrs	r25, 7
    1f76:	fc cf       	rjmp	.-8      	; 0x1f70 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1f78:	90 91 b9 00 	lds	r25, 0x00B9
    1f7c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1f7e:	98 30       	cpi	r25, 0x08	; 8
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <i2c_start_wait+0x20>
    1f82:	90 31       	cpi	r25, 0x10	; 16
    1f84:	99 f7       	brne	.-26     	; 0x1f6c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1f86:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1f8a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1f8e:	90 91 bc 00 	lds	r25, 0x00BC
    1f92:	97 ff       	sbrs	r25, 7
    1f94:	fc cf       	rjmp	.-8      	; 0x1f8e <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1f96:	90 91 b9 00 	lds	r25, 0x00B9
    1f9a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1f9c:	90 32       	cpi	r25, 0x20	; 32
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <i2c_start_wait+0x40>
    1fa0:	98 35       	cpi	r25, 0x58	; 88
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <i2c_start_wait+0x40>
    1fa4:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1fa6:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1faa:	90 91 bc 00 	lds	r25, 0x00BC
    1fae:	94 fd       	sbrc	r25, 4
    1fb0:	fc cf       	rjmp	.-8      	; 0x1faa <i2c_start_wait+0x44>
    1fb2:	dc cf       	rjmp	.-72     	; 0x1f6c <i2c_start_wait+0x6>

00001fb4 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1fb4:	94 ea       	ldi	r25, 0xA4	; 164
    1fb6:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1fba:	90 91 bc 00 	lds	r25, 0x00BC
    1fbe:	97 ff       	sbrs	r25, 7
    1fc0:	fc cf       	rjmp	.-8      	; 0x1fba <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fc2:	90 91 b9 00 	lds	r25, 0x00B9
    1fc6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1fc8:	98 30       	cpi	r25, 0x08	; 8
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <i2c_rep_start+0x20>
    1fcc:	90 31       	cpi	r25, 0x10	; 16
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	08 95       	ret
	}

	// send device address
	TWDR = address;
    1fd4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1fd8:	84 e8       	ldi	r24, 0x84	; 132
    1fda:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1fde:	80 91 bc 00 	lds	r24, 0x00BC
    1fe2:	87 ff       	sbrs	r24, 7
    1fe4:	fc cf       	rjmp	.-8      	; 0x1fde <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1fe6:	90 91 b9 00 	lds	r25, 0x00B9
    1fea:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1fec:	98 31       	cpi	r25, 0x18	; 24
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 34       	cpi	r25, 0x40	; 64
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    1ff6:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1ffa:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	08 95       	ret

00002000 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2000:	84 e9       	ldi	r24, 0x94	; 148
    2002:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2006:	80 91 bc 00 	lds	r24, 0x00BC
    200a:	84 fd       	sbrc	r24, 4
    200c:	fc cf       	rjmp	.-8      	; 0x2006 <i2c_stop+0x6>

}/* i2c_stop */
    200e:	08 95       	ret

00002010 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2010:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2014:	84 e8       	ldi	r24, 0x84	; 132
    2016:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    201a:	80 91 bc 00 	lds	r24, 0x00BC
    201e:	87 ff       	sbrs	r24, 7
    2020:	fc cf       	rjmp	.-8      	; 0x201a <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2022:	90 91 b9 00 	lds	r25, 0x00B9
    2026:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	98 32       	cpi	r25, 0x28	; 40
    202c:	09 f0       	breq	.+2      	; 0x2030 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    202e:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2030:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2032:	08 95       	ret

00002034 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2034:	84 ec       	ldi	r24, 0xC4	; 196
    2036:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    203a:	80 91 bc 00 	lds	r24, 0x00BC
    203e:	87 ff       	sbrs	r24, 7
    2040:	fc cf       	rjmp	.-8      	; 0x203a <i2c_readAck+0x6>

    return TWDR;
    2042:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2046:	08 95       	ret

00002048 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2048:	84 e8       	ldi	r24, 0x84	; 132
    204a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    204e:	80 91 bc 00 	lds	r24, 0x00BC
    2052:	87 ff       	sbrs	r24, 7
    2054:	fc cf       	rjmp	.-8      	; 0x204e <i2c_readNak+0x6>
	
    return TWDR;
    2056:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    205a:	08 95       	ret

0000205c <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    205c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2060:	80 e1       	ldi	r24, 0x10	; 16
    2062:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2066:	e0 ec       	ldi	r30, 0xC0	; 192
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	82 60       	ori	r24, 0x02	; 2
    206e:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2070:	e1 ec       	ldi	r30, 0xC1	; 193
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	88 69       	ori	r24, 0x98	; 152
    2078:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    207a:	e2 ec       	ldi	r30, 0xC2	; 194
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	86 60       	ori	r24, 0x06	; 6
    2082:	80 83       	st	Z, r24

}
    2084:	08 95       	ret

00002086 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    2086:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    208a:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    208e:	10 92 c2 00 	sts	0x00C2, r1

}
    2092:	08 95       	ret

00002094 <usartTransmit>:

void usartTransmit(unsigned char data) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2094:	90 91 c0 00 	lds	r25, 0x00C0
    2098:	95 ff       	sbrs	r25, 5
    209a:	fc cf       	rjmp	.-8      	; 0x2094 <usartTransmit>
	UDR0 = data;						// put data into buffer, sends the data
    209c:	80 93 c6 00 	sts	0x00C6, r24

}
    20a0:	08 95       	ret

000020a2 <__vector_25>:
// for options 0,1,2 there are the commands "+" and "-" that increase or decrease the luminosity of the leds
// for options 3,4 there are the commmands "+", "-" and "s" to increase, decrease and reset to zero the speed respectively
// for options 5 there is the command "s" that stop the sending of the adc values
// if a key is pressed that do not correspond to any commands for that option, then the initial menu is entered.

ISR(USART0_RX_vect) {
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	2f 93       	push	r18
    20ae:	8f 93       	push	r24
    20b0:	9f 93       	push	r25

	char receivedByte = UDR0;
    20b2:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {						// menu
    20b6:	90 91 10 02 	lds	r25, 0x0210
    20ba:	99 23       	and	r25, r25
    20bc:	b9 f0       	breq	.+46     	; 0x20ec <__vector_25+0x4a>
		switch(receivedByte) {
    20be:	82 33       	cpi	r24, 0x32	; 50
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <__vector_25+0x22>
    20c2:	5b c0       	rjmp	.+182    	; 0x217a <__vector_25+0xd8>
    20c4:	83 33       	cpi	r24, 0x33	; 51
    20c6:	80 f5       	brcc	.+96     	; 0x2128 <__vector_25+0x86>
    20c8:	80 33       	cpi	r24, 0x30	; 48
    20ca:	09 f4       	brne	.+2      	; 0x20ce <__vector_25+0x2c>
    20cc:	7e c0       	rjmp	.+252    	; 0x21ca <__vector_25+0x128>
    20ce:	81 33       	cpi	r24, 0x31	; 49
    20d0:	29 f4       	brne	.+10     	; 0x20dc <__vector_25+0x3a>
			case '0': 							// red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': 							// green led
				peripheralChoice = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    20d8:	10 92 10 02 	sts	0x0210, r1

	}



}
    20dc:	9f 91       	pop	r25
    20de:	8f 91       	pop	r24
    20e0:	2f 91       	pop	r18
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    20ec:	90 91 0f 02 	lds	r25, 0x020F
    20f0:	92 30       	cpi	r25, 0x02	; 2
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <__vector_25+0x54>
    20f4:	48 c0       	rjmp	.+144    	; 0x2186 <__vector_25+0xe4>
    20f6:	93 30       	cpi	r25, 0x03	; 3
    20f8:	40 f1       	brcs	.+80     	; 0x214a <__vector_25+0xa8>
    20fa:	94 30       	cpi	r25, 0x04	; 4
    20fc:	09 f4       	brne	.+2      	; 0x2100 <__vector_25+0x5e>
    20fe:	8c c0       	rjmp	.+280    	; 0x2218 <__stack+0x19>
    2100:	94 30       	cpi	r25, 0x04	; 4
    2102:	08 f4       	brcc	.+2      	; 0x2106 <__vector_25+0x64>
    2104:	73 c0       	rjmp	.+230    	; 0x21ec <__vector_25+0x14a>
    2106:	95 30       	cpi	r25, 0x05	; 5
    2108:	49 f7       	brne	.-46     	; 0x20dc <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: 								// adc
				if(receivedByte == 's') {
    210a:	83 37       	cpi	r24, 0x73	; 115
    210c:	39 f7       	brne	.-50     	; 0x20dc <__vector_25+0x3a>
					sendAdcValues = 0;
    210e:	10 92 06 04 	sts	0x0406, r1
					choosePeripheral = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 10 02 	sts	0x0210, r24

	}



}
    2118:	9f 91       	pop	r25
    211a:	8f 91       	pop	r24
    211c:	2f 91       	pop	r18
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	0f 90       	pop	r0
    2124:	1f 90       	pop	r1
    2126:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
    2128:	84 33       	cpi	r24, 0x34	; 52
    212a:	09 f4       	brne	.+2      	; 0x212e <__vector_25+0x8c>
    212c:	59 c0       	rjmp	.+178    	; 0x21e0 <__vector_25+0x13e>
    212e:	84 33       	cpi	r24, 0x34	; 52
    2130:	08 f4       	brcc	.+2      	; 0x2134 <__vector_25+0x92>
    2132:	50 c0       	rjmp	.+160    	; 0x21d4 <__vector_25+0x132>
    2134:	85 33       	cpi	r24, 0x35	; 53
    2136:	91 f6       	brne	.-92     	; 0x20dc <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':							// send adc values
				peripheralChoice = 5;
    2138:	85 e0       	ldi	r24, 0x05	; 5
    213a:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    213e:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 06 04 	sts	0x0406, r24
				break;
    2148:	c9 cf       	rjmp	.-110    	; 0x20dc <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    214a:	99 23       	and	r25, r25
    214c:	91 f5       	brne	.+100    	; 0x21b2 <__vector_25+0x110>
			case 0:								// red led
				if(receivedByte == '-') {
    214e:	8d 32       	cpi	r24, 0x2D	; 45
    2150:	09 f4       	brne	.+2      	; 0x2154 <__vector_25+0xb2>
    2152:	d5 c0       	rjmp	.+426    	; 0x22fe <__stack+0xff>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2154:	8b 32       	cpi	r24, 0x2B	; 43
    2156:	e9 f6       	brne	.-70     	; 0x2112 <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2158:	80 91 0c 02 	lds	r24, 0x020C
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2160:	97 fd       	sbrc	r25, 7
    2162:	3f c1       	rjmp	.+638    	; 0x23e2 <__stack+0x1e3>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2164:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    2168:	88 23       	and	r24, r24
    216a:	09 f4       	brne	.+2      	; 0x216e <__vector_25+0xcc>
    216c:	3c c1       	rjmp	.+632    	; 0x23e6 <__stack+0x1e7>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	90 93 89 00 	sts	0x0089, r25
    2174:	80 93 88 00 	sts	0x0088, r24
    2178:	b1 cf       	rjmp	.-158    	; 0x20dc <__vector_25+0x3a>
			case '1': 							// green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': 							// blue led
				peripheralChoice = 2;
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2180:	10 92 10 02 	sts	0x0210, r1
				break;
    2184:	ab cf       	rjmp	.-170    	; 0x20dc <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
    2186:	8d 32       	cpi	r24, 0x2D	; 45
    2188:	09 f4       	brne	.+2      	; 0x218c <__vector_25+0xea>
    218a:	e8 c0       	rjmp	.+464    	; 0x235c <__stack+0x15d>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    218c:	8b 32       	cpi	r24, 0x2B	; 43
    218e:	09 f6       	brne	.-126    	; 0x2112 <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2190:	80 91 0e 02 	lds	r24, 0x020E
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2198:	97 fd       	sbrc	r25, 7
    219a:	35 c1       	rjmp	.+618    	; 0x2406 <__stack+0x207>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    219c:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    21a0:	88 23       	and	r24, r24
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <__vector_25+0x104>
    21a4:	32 c1       	rjmp	.+612    	; 0x240a <__stack+0x20b>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	90 93 8d 00 	sts	0x008D, r25
    21ac:	80 93 8c 00 	sts	0x008C, r24
    21b0:	95 cf       	rjmp	.-214    	; 0x20dc <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    21b2:	91 30       	cpi	r25, 0x01	; 1
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <__vector_25+0x116>
    21b6:	92 cf       	rjmp	.-220    	; 0x20dc <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
    21b8:	8d 32       	cpi	r24, 0x2D	; 45
    21ba:	09 f4       	brne	.+2      	; 0x21be <__vector_25+0x11c>
    21bc:	89 c0       	rjmp	.+274    	; 0x22d0 <__stack+0xd1>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    21be:	8b 32       	cpi	r24, 0x2B	; 43
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_25+0x122>
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <__stack+0x43>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    21c4:	90 93 10 02 	sts	0x0210, r25
    21c8:	89 cf       	rjmp	.-238    	; 0x20dc <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
			case '0': 							// red led
				peripheralChoice = 0;
    21ca:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    21ce:	10 92 10 02 	sts	0x0210, r1
				break;
    21d2:	84 cf       	rjmp	.-248    	; 0x20dc <__vector_25+0x3a>
			case '2': 							// blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': 							// right motor
				peripheralChoice = 3;
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    21da:	10 92 10 02 	sts	0x0210, r1
				break;
    21de:	7e cf       	rjmp	.-260    	; 0x20dc <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    21e6:	10 92 10 02 	sts	0x0210, r1
				break;
    21ea:	78 cf       	rjmp	.-272    	; 0x20dc <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
    21ec:	8b 32       	cpi	r24, 0x2B	; 43
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <__vector_25+0x150>
    21f0:	cc c0       	rjmp	.+408    	; 0x238a <__stack+0x18b>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    21f2:	8d 32       	cpi	r24, 0x2D	; 45
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_25+0x156>
    21f6:	51 c0       	rjmp	.+162    	; 0x229a <__stack+0x9b>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    21f8:	83 37       	cpi	r24, 0x73	; 115
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_25+0x15c>
    21fc:	8a cf       	rjmp	.-236    	; 0x2112 <__vector_25+0x70>
					pwm_right = 0;
    21fe:	10 92 ec 03 	sts	0x03EC, r1
    2202:	10 92 eb 03 	sts	0x03EB, r1
					OCR3A = 0;
    2206:	10 92 99 00 	sts	0x0099, r1
    220a:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    220e:	10 92 9b 00 	sts	0x009B, r1
    2212:	10 92 9a 00 	sts	0x009A, r1
    2216:	62 cf       	rjmp	.-316    	; 0x20dc <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
    2218:	8b 32       	cpi	r24, 0x2B	; 43
    221a:	09 f4       	brne	.+2      	; 0x221e <__stack+0x1f>
    221c:	87 c0       	rjmp	.+270    	; 0x232c <__stack+0x12d>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    221e:	8d 32       	cpi	r24, 0x2D	; 45
    2220:	09 f1       	breq	.+66     	; 0x2264 <__stack+0x65>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2222:	83 37       	cpi	r24, 0x73	; 115
    2224:	09 f0       	breq	.+2      	; 0x2228 <__stack+0x29>
    2226:	75 cf       	rjmp	.-278    	; 0x2112 <__vector_25+0x70>
					pwm_left = 0;
    2228:	10 92 ee 03 	sts	0x03EE, r1
    222c:	10 92 ed 03 	sts	0x03ED, r1
					OCR4A = 0;
    2230:	10 92 a9 00 	sts	0x00A9, r1
    2234:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2238:	10 92 ab 00 	sts	0x00AB, r1
    223c:	10 92 aa 00 	sts	0x00AA, r1
    2240:	4d cf       	rjmp	.-358    	; 0x20dc <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2242:	80 91 0d 02 	lds	r24, 0x020D
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    224a:	97 fd       	sbrc	r25, 7
    224c:	d3 c0       	rjmp	.+422    	; 0x23f4 <__stack+0x1f5>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    224e:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    2252:	88 23       	and	r24, r24
    2254:	09 f4       	brne	.+2      	; 0x2258 <__stack+0x59>
    2256:	d0 c0       	rjmp	.+416    	; 0x23f8 <__stack+0x1f9>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	90 93 8b 00 	sts	0x008B, r25
    225e:	80 93 8a 00 	sts	0x008A, r24
    2262:	3c cf       	rjmp	.-392    	; 0x20dc <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2264:	80 91 ed 03 	lds	r24, 0x03ED
    2268:	90 91 ee 03 	lds	r25, 0x03EE
    226c:	4e 97       	sbiw	r24, 0x1e	; 30
    226e:	90 93 ee 03 	sts	0x03EE, r25
    2272:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2276:	2c ef       	ldi	r18, 0xFC	; 252
    2278:	80 30       	cpi	r24, 0x00	; 0
    227a:	92 07       	cpc	r25, r18
    227c:	0c f0       	brlt	.+2      	; 0x2280 <__stack+0x81>
    227e:	cc c0       	rjmp	.+408    	; 0x2418 <__stack+0x219>
						pwm_left = -MAX_MOTORS_PWM;
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	9c ef       	ldi	r25, 0xFC	; 252
    2284:	90 93 ee 03 	sts	0x03EE, r25
    2288:	80 93 ed 03 	sts	0x03ED, r24
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2290:	90 93 ab 00 	sts	0x00AB, r25
    2294:	80 93 aa 00 	sts	0x00AA, r24
    2298:	21 cf       	rjmp	.-446    	; 0x20dc <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    229a:	80 91 eb 03 	lds	r24, 0x03EB
    229e:	90 91 ec 03 	lds	r25, 0x03EC
    22a2:	4e 97       	sbiw	r24, 0x1e	; 30
    22a4:	90 93 ec 03 	sts	0x03EC, r25
    22a8:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    22ac:	2c ef       	ldi	r18, 0xFC	; 252
    22ae:	80 30       	cpi	r24, 0x00	; 0
    22b0:	92 07       	cpc	r25, r18
    22b2:	0c f0       	brlt	.+2      	; 0x22b6 <__stack+0xb7>
    22b4:	b7 c0       	rjmp	.+366    	; 0x2424 <__stack+0x225>
						pwm_right = -MAX_MOTORS_PWM;
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	9c ef       	ldi	r25, 0xFC	; 252
    22ba:	90 93 ec 03 	sts	0x03EC, r25
    22be:	80 93 eb 03 	sts	0x03EB, r24
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    22c6:	90 93 9b 00 	sts	0x009B, r25
    22ca:	80 93 9a 00 	sts	0x009A, r24
    22ce:	06 cf       	rjmp	.-500    	; 0x20dc <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    22d0:	80 91 80 00 	lds	r24, 0x0080
    22d4:	80 62       	ori	r24, 0x20	; 32
    22d6:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    22da:	80 91 0d 02 	lds	r24, 0x020D
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    22e2:	8f 3f       	cpi	r24, 0xFF	; 255
    22e4:	91 05       	cpc	r25, r1
    22e6:	19 f0       	breq	.+6      	; 0x22ee <__stack+0xef>
    22e8:	14 f0       	brlt	.+4      	; 0x22ee <__stack+0xef>
    22ea:	8f ef       	ldi	r24, 0xFF	; 255
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	90 93 8b 00 	sts	0x008B, r25
    22f8:	80 93 8a 00 	sts	0x008A, r24
    22fc:	ef ce       	rjmp	.-546    	; 0x20dc <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:								// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    22fe:	80 91 80 00 	lds	r24, 0x0080
    2302:	80 68       	ori	r24, 0x80	; 128
    2304:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2308:	80 91 0c 02 	lds	r24, 0x020C
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2310:	8f 3f       	cpi	r24, 0xFF	; 255
    2312:	91 05       	cpc	r25, r1
    2314:	19 f0       	breq	.+6      	; 0x231c <__stack+0x11d>
    2316:	14 f0       	brlt	.+4      	; 0x231c <__stack+0x11d>
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	90 93 89 00 	sts	0x0089, r25
    2326:	80 93 88 00 	sts	0x0088, r24
    232a:	d8 ce       	rjmp	.-592    	; 0x20dc <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    232c:	80 91 ed 03 	lds	r24, 0x03ED
    2330:	90 91 ee 03 	lds	r25, 0x03EE
    2334:	4e 96       	adiw	r24, 0x1e	; 30
    2336:	90 93 ee 03 	sts	0x03EE, r25
    233a:	80 93 ed 03 	sts	0x03ED, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    233e:	24 e0       	ldi	r18, 0x04	; 4
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	92 07       	cpc	r25, r18
    2344:	d4 f1       	brlt	.+116    	; 0x23ba <__stack+0x1bb>
						pwm_left = MAX_MOTORS_PWM;
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	94 e0       	ldi	r25, 0x04	; 4
    234a:	90 93 ee 03 	sts	0x03EE, r25
    234e:	80 93 ed 03 	sts	0x03ED, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2352:	90 93 a9 00 	sts	0x00A9, r25
    2356:	80 93 a8 00 	sts	0x00A8, r24
    235a:	c0 ce       	rjmp	.-640    	; 0x20dc <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    235c:	80 91 80 00 	lds	r24, 0x0080
    2360:	88 60       	ori	r24, 0x08	; 8
    2362:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2366:	80 91 0e 02 	lds	r24, 0x020E
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    236e:	8f 3f       	cpi	r24, 0xFF	; 255
    2370:	91 05       	cpc	r25, r1
    2372:	19 f0       	breq	.+6      	; 0x237a <__stack+0x17b>
    2374:	14 f0       	brlt	.+4      	; 0x237a <__stack+0x17b>
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	90 93 8d 00 	sts	0x008D, r25
    2384:	80 93 8c 00 	sts	0x008C, r24
    2388:	a9 ce       	rjmp	.-686    	; 0x20dc <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    238a:	80 91 eb 03 	lds	r24, 0x03EB
    238e:	90 91 ec 03 	lds	r25, 0x03EC
    2392:	4e 96       	adiw	r24, 0x1e	; 30
    2394:	90 93 ec 03 	sts	0x03EC, r25
    2398:	80 93 eb 03 	sts	0x03EB, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    239c:	24 e0       	ldi	r18, 0x04	; 4
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	92 07       	cpc	r25, r18
    23a2:	ac f0       	brlt	.+42     	; 0x23ce <__stack+0x1cf>
						pwm_right = MAX_MOTORS_PWM;
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	94 e0       	ldi	r25, 0x04	; 4
    23a8:	90 93 ec 03 	sts	0x03EC, r25
    23ac:	80 93 eb 03 	sts	0x03EB, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    23b0:	90 93 99 00 	sts	0x0099, r25
    23b4:	80 93 98 00 	sts	0x0098, r24
    23b8:	91 ce       	rjmp	.-734    	; 0x20dc <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    23ba:	97 ff       	sbrs	r25, 7
    23bc:	ca cf       	rjmp	.-108    	; 0x2352 <__stack+0x153>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    23be:	90 95       	com	r25
    23c0:	81 95       	neg	r24
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	90 93 ab 00 	sts	0x00AB, r25
    23c8:	80 93 aa 00 	sts	0x00AA, r24
    23cc:	87 ce       	rjmp	.-754    	; 0x20dc <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    23ce:	97 ff       	sbrs	r25, 7
    23d0:	ef cf       	rjmp	.-34     	; 0x23b0 <__stack+0x1b1>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    23d2:	90 95       	com	r25
    23d4:	81 95       	neg	r24
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	90 93 9b 00 	sts	0x009B, r25
    23dc:	80 93 9a 00 	sts	0x009A, r24
    23e0:	7d ce       	rjmp	.-774    	; 0x20dc <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    23e2:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    23e6:	80 91 80 00 	lds	r24, 0x0080
    23ea:	8f 77       	andi	r24, 0x7F	; 127
    23ec:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    23f0:	2d 98       	cbi	0x05, 5	; 5
    23f2:	74 ce       	rjmp	.-792    	; 0x20dc <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    23f4:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    23f8:	80 91 80 00 	lds	r24, 0x0080
    23fc:	8f 7d       	andi	r24, 0xDF	; 223
    23fe:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2402:	2e 98       	cbi	0x05, 6	; 5
    2404:	6b ce       	rjmp	.-810    	; 0x20dc <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2406:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    240a:	80 91 80 00 	lds	r24, 0x0080
    240e:	87 7f       	andi	r24, 0xF7	; 247
    2410:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    2414:	2f 98       	cbi	0x05, 7	; 5
    2416:	62 ce       	rjmp	.-828    	; 0x20dc <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2418:	97 ff       	sbrs	r25, 7
    241a:	9b cf       	rjmp	.-202    	; 0x2352 <__stack+0x153>
						OCR4A = pwm_left;
    241c:	90 95       	com	r25
    241e:	81 95       	neg	r24
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	36 cf       	rjmp	.-404    	; 0x2290 <__stack+0x91>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2424:	97 ff       	sbrs	r25, 7
    2426:	c4 cf       	rjmp	.-120    	; 0x23b0 <__stack+0x1b1>
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    2428:	90 95       	com	r25
    242a:	81 95       	neg	r24
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	4b cf       	rjmp	.-362    	; 0x22c6 <__stack+0xc7>

00002430 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2430:	86 b1       	in	r24, 0x06	; 6
    2432:	66 b1       	in	r22, 0x06	; 6
    2434:	26 b1       	in	r18, 0x06	; 6
    2436:	46 b1       	in	r20, 0x06	; 6
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	28 70       	andi	r18, 0x08	; 8
    243c:	30 70       	andi	r19, 0x00	; 0
    243e:	35 95       	asr	r19
    2440:	27 95       	ror	r18
    2442:	35 95       	asr	r19
    2444:	27 95       	ror	r18
    2446:	35 95       	asr	r19
    2448:	27 95       	ror	r18
    244a:	22 0f       	add	r18, r18
    244c:	33 1f       	adc	r19, r19
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	64 70       	andi	r22, 0x04	; 4
    2452:	70 70       	andi	r23, 0x00	; 0
    2454:	75 95       	asr	r23
    2456:	67 95       	ror	r22
    2458:	75 95       	asr	r23
    245a:	67 95       	ror	r22
    245c:	26 0f       	add	r18, r22
    245e:	37 1f       	adc	r19, r23
    2460:	22 0f       	add	r18, r18
    2462:	33 1f       	adc	r19, r19
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	42 70       	andi	r20, 0x02	; 2
    2468:	50 70       	andi	r21, 0x00	; 0
    246a:	55 95       	asr	r21
    246c:	47 95       	ror	r20
    246e:	24 0f       	add	r18, r20
    2470:	35 1f       	adc	r19, r21
    2472:	22 0f       	add	r18, r18
    2474:	81 70       	andi	r24, 0x01	; 1
}
    2476:	82 0f       	add	r24, r18
    2478:	08 95       	ret

0000247a <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    247a:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    247c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    247e:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2480:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2484:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2488:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    248c:	8e ef       	ldi	r24, 0xFE	; 254
    248e:	9f e0       	ldi	r25, 0x0F	; 15
    2490:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__eerd_word_m2560>
    2494:	90 93 04 04 	sts	0x0404, r25
    2498:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    249c:	9c 01       	movw	r18, r24
    249e:	21 58       	subi	r18, 0x81	; 129
    24a0:	3c 40       	sbci	r19, 0x0C	; 12
    24a2:	23 30       	cpi	r18, 0x03	; 3
    24a4:	31 05       	cpc	r19, r1
    24a6:	b0 f4       	brcc	.+44     	; 0x24d4 <initPeripherals+0x5a>
		hardwareRevision = HW_REV_3_0;
    24a8:	10 92 28 04 	sts	0x0428, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    24ac:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <initPortsIO>
	initAdc();
    24b0:	0e 94 37 13 	call	0x266e	; 0x266e <initAdc>
	initMotors();
    24b4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <initMotors>
	initRGBleds();
    24b8:	0e 94 c6 1b 	call	0x378c	; 0x378c <initRGBleds>
	initSPI();
    24bc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <initSPI>
	mirf_init();
    24c0:	0e 94 a9 02 	call	0x552	; 0x552 <mirf_init>
	initUsart();
    24c4:	0e 94 2e 10 	call	0x205c	; 0x205c <initUsart>
	initAccelerometer();
    24c8:	0e 94 3f 1c 	call	0x387e	; 0x387e <initAccelerometer>
	init_ir_remote_control();
    24cc:	0e 94 55 07 	call	0xeaa	; 0xeaa <init_ir_remote_control>

	sei();			// enable global interrupts
    24d0:	78 94       	sei

	
}
    24d2:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    24d4:	2c e0       	ldi	r18, 0x0C	; 12
    24d6:	80 38       	cpi	r24, 0x80	; 128
    24d8:	92 07       	cpc	r25, r18
    24da:	21 f4       	brne	.+8      	; 0x24e4 <initPeripherals+0x6a>
		hardwareRevision = HW_REV_3_0_1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	80 93 28 04 	sts	0x0428, r24
    24e2:	e4 cf       	rjmp	.-56     	; 0x24ac <initPeripherals+0x32>
	}

	if(rfAddress > 3203) {
    24e4:	2c e0       	ldi	r18, 0x0C	; 12
    24e6:	84 38       	cpi	r24, 0x84	; 132
    24e8:	92 07       	cpc	r25, r18
    24ea:	00 f3       	brcs	.-64     	; 0x24ac <initPeripherals+0x32>
		hardwareRevision = HW_REV_3_1;
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	80 93 28 04 	sts	0x0428, r24
    24f2:	dc cf       	rjmp	.-72     	; 0x24ac <initPeripherals+0x32>

000024f4 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    24f4:	1f 92       	push	r1
    24f6:	0f 92       	push	r0
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1

}
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
    2504:	1f 90       	pop	r1
    2506:	18 95       	reti

00002508 <sleep>:

void sleep(unsigned char seconds) {
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    250c:	9e e1       	ldi	r25, 0x1E	; 30
    250e:	89 9f       	mul	r24, r25
    2510:	e0 01       	movw	r28, r0
    2512:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2514:	80 91 68 00 	lds	r24, 0x0068
    2518:	8d 7f       	andi	r24, 0xFD	; 253
    251a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    251e:	80 91 6c 00 	lds	r24, 0x006C
    2522:	8f 77       	andi	r24, 0x7F	; 127
    2524:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2528:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    252a:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    252e:	80 91 7a 00 	lds	r24, 0x007A
    2532:	80 61       	ori	r24, 0x10	; 16
    2534:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2538:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    253c:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2540:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2544:	88 b3       	in	r24, 0x18	; 24
    2546:	87 60       	ori	r24, 0x07	; 7
    2548:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    254a:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    254e:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2552:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    2556:	89 b3       	in	r24, 0x19	; 25
    2558:	87 60       	ori	r24, 0x07	; 7
    255a:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    255c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2560:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2564:	0e 94 43 10 	call	0x2086	; 0x2086 <closeUsart>
	closeSPI();
    2568:	0e 94 fd 01 	call	0x3fa	; 0x3fa <closeSPI>
	i2c_close();
    256c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <i2c_close>

	// set port pins
	initPortsIO();
    2570:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2574:	83 b7       	in	r24, 0x33	; 51
    2576:	8f 60       	ori	r24, 0x0F	; 15
    2578:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2580:	80 91 b0 00 	lds	r24, 0x00B0
    2584:	8d 7f       	andi	r24, 0xFD	; 253
    2586:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    258a:	80 91 b1 00 	lds	r24, 0x00B1
    258e:	87 60       	ori	r24, 0x07	; 7
    2590:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    2594:	20 97       	sbiw	r28, 0x00	; 0
    2596:	19 f0       	breq	.+6      	; 0x259e <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2598:	88 95       	sleep
		pause--;
    259a:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    259c:	e9 f7       	brne	.-6      	; 0x2598 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    259e:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    25a0:	80 91 b1 00 	lds	r24, 0x00B1
    25a4:	88 7f       	andi	r24, 0xF8	; 248
    25a6:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    25aa:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    25ae:	80 91 b0 00 	lds	r24, 0x00B0
    25b2:	82 60       	ori	r24, 0x02	; 2
    25b4:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    25be:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    25c2:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    25c6:	10 92 ec 03 	sts	0x03EC, r1
    25ca:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    25ce:	10 92 ee 03 	sts	0x03EE, r1
    25d2:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    25d6:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    25d8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    25da:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    25dc:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    25e0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    25e4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    25e8:	8e ef       	ldi	r24, 0xFE	; 254
    25ea:	9f e0       	ldi	r25, 0x0F	; 15
    25ec:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__eerd_word_m2560>
    25f0:	90 93 04 04 	sts	0x0404, r25
    25f4:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    25f8:	9c 01       	movw	r18, r24
    25fa:	21 58       	subi	r18, 0x81	; 129
    25fc:	3c 40       	sbci	r19, 0x0C	; 12
    25fe:	23 30       	cpi	r18, 0x03	; 3
    2600:	31 05       	cpc	r19, r1
    2602:	c0 f4       	brcc	.+48     	; 0x2634 <sleep+0x12c>
		hardwareRevision = HW_REV_3_0;
    2604:	10 92 28 04 	sts	0x0428, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2608:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <initPortsIO>
	initAdc();
    260c:	0e 94 37 13 	call	0x266e	; 0x266e <initAdc>
	initMotors();
    2610:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <initMotors>
	initRGBleds();
    2614:	0e 94 c6 1b 	call	0x378c	; 0x378c <initRGBleds>
	initSPI();
    2618:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <initSPI>
	mirf_init();
    261c:	0e 94 a9 02 	call	0x552	; 0x552 <mirf_init>
	initUsart();
    2620:	0e 94 2e 10 	call	0x205c	; 0x205c <initUsart>
	initAccelerometer();
    2624:	0e 94 3f 1c 	call	0x387e	; 0x387e <initAccelerometer>
	init_ir_remote_control();
    2628:	0e 94 55 07 	call	0xeaa	; 0xeaa <init_ir_remote_control>

	sei();			// enable global interrupts
    262c:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2634:	2c e0       	ldi	r18, 0x0C	; 12
    2636:	80 38       	cpi	r24, 0x80	; 128
    2638:	92 07       	cpc	r25, r18
    263a:	21 f4       	brne	.+8      	; 0x2644 <sleep+0x13c>
		hardwareRevision = HW_REV_3_0_1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	80 93 28 04 	sts	0x0428, r24
    2642:	e2 cf       	rjmp	.-60     	; 0x2608 <sleep+0x100>
	}

	if(rfAddress > 3203) {
    2644:	2c e0       	ldi	r18, 0x0C	; 12
    2646:	84 38       	cpi	r24, 0x84	; 132
    2648:	92 07       	cpc	r25, r18
    264a:	f0 f2       	brcs	.-68     	; 0x2608 <sleep+0x100>
		hardwareRevision = HW_REV_3_1;
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	80 93 28 04 	sts	0x0428, r24
    2652:	da cf       	rjmp	.-76     	; 0x2608 <sleep+0x100>

00002654 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    2654:	60 91 21 04 	lds	r22, 0x0421
    2658:	70 91 22 04 	lds	r23, 0x0422
	return clockTick;
}
    265c:	80 91 23 04 	lds	r24, 0x0423
    2660:	90 91 24 04 	lds	r25, 0x0424
    2664:	08 95       	ret

00002666 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	80 93 c5 03 	sts	0x03C5, r24
}
    266c:	08 95       	ret

0000266e <initAdc>:

#include "adc.h"


void initAdc(void) {
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    2672:	ea e7       	ldi	r30, 0x7A	; 122
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	10 82       	st	Z, r1
	ADCSRB = 0;
    2678:	ab e7       	ldi	r26, 0x7B	; 123
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	1c 92       	st	X, r1
	ADMUX = 0;
    267e:	cc e7       	ldi	r28, 0x7C	; 124
    2680:	d0 e0       	ldi	r29, 0x00	; 0
    2682:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2684:	80 81       	ld	r24, Z
    2686:	86 60       	ori	r24, 0x06	; 6
    2688:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    268a:	88 81       	ld	r24, Y
    268c:	80 64       	ori	r24, 0x40	; 64
    268e:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2690:	80 81       	ld	r24, Z
    2692:	80 62       	ori	r24, 0x20	; 32
    2694:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2696:	8c 91       	ld	r24, X
    2698:	88 7f       	andi	r24, 0xF8	; 248
    269a:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    269c:	80 81       	ld	r24, Z
    269e:	88 60       	ori	r24, 0x08	; 8
    26a0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    26a2:	80 81       	ld	r24, Z
    26a4:	80 68       	ori	r24, 0x80	; 128
    26a6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    26a8:	80 81       	ld	r24, Z
    26aa:	80 64       	ori	r24, 0x40	; 64
    26ac:	80 83       	st	Z, r24

}
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <__vector_29>:

ISR(ADC_vect) {
    26b4:	1f 92       	push	r1
    26b6:	0f 92       	push	r0
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	0f 92       	push	r0
    26bc:	0b b6       	in	r0, 0x3b	; 59
    26be:	0f 92       	push	r0
    26c0:	11 24       	eor	r1, r1
    26c2:	2f 93       	push	r18
    26c4:	3f 93       	push	r19
    26c6:	4f 93       	push	r20
    26c8:	5f 93       	push	r21
    26ca:	6f 93       	push	r22
    26cc:	8f 93       	push	r24
    26ce:	9f 93       	push	r25
    26d0:	af 93       	push	r26
    26d2:	bf 93       	push	r27
    26d4:	ef 93       	push	r30
    26d6:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    26d8:	80 91 21 04 	lds	r24, 0x0421
    26dc:	90 91 22 04 	lds	r25, 0x0422
    26e0:	a0 91 23 04 	lds	r26, 0x0423
    26e4:	b0 91 24 04 	lds	r27, 0x0424
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	a1 1d       	adc	r26, r1
    26ec:	b1 1d       	adc	r27, r1
    26ee:	80 93 21 04 	sts	0x0421, r24
    26f2:	90 93 22 04 	sts	0x0422, r25
    26f6:	a0 93 23 04 	sts	0x0423, r26
    26fa:	b0 93 24 04 	sts	0x0424, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    26fe:	20 91 78 00 	lds	r18, 0x0078
    2702:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2704:	40 91 79 00 	lds	r20, 0x0079
    2708:	94 2f       	mov	r25, r20
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	28 2b       	or	r18, r24
    270e:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2710:	80 91 bf 03 	lds	r24, 0x03BF
    2714:	82 30       	cpi	r24, 0x02	; 2
    2716:	09 f4       	brne	.+2      	; 0x271a <__vector_29+0x66>
    2718:	ac c1       	rjmp	.+856    	; 0x2a72 <__vector_29+0x3be>
    271a:	83 30       	cpi	r24, 0x03	; 3
    271c:	08 f4       	brcc	.+2      	; 0x2720 <__vector_29+0x6c>
    271e:	45 c0       	rjmp	.+138    	; 0x27aa <__vector_29+0xf6>
    2720:	83 30       	cpi	r24, 0x03	; 3
    2722:	09 f4       	brne	.+2      	; 0x2726 <__vector_29+0x72>
    2724:	c9 c1       	rjmp	.+914    	; 0x2ab8 <__vector_29+0x404>
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	09 f4       	brne	.+2      	; 0x272c <__vector_29+0x78>
    272a:	68 c1       	rjmp	.+720    	; 0x29fc <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    272c:	80 91 c0 03 	lds	r24, 0x03C0
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	09 f4       	brne	.+2      	; 0x2736 <__vector_29+0x82>
    2734:	4f c1       	rjmp	.+670    	; 0x29d4 <__vector_29+0x320>
    2736:	83 30       	cpi	r24, 0x03	; 3
    2738:	08 f0       	brcs	.+2      	; 0x273c <__vector_29+0x88>
    273a:	cd c0       	rjmp	.+410    	; 0x28d6 <__vector_29+0x222>
    273c:	88 23       	and	r24, r24
    273e:	09 f0       	breq	.+2      	; 0x2742 <__vector_29+0x8e>
    2740:	24 c1       	rjmp	.+584    	; 0x298a <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2742:	80 91 2a 03 	lds	r24, 0x032A
    2746:	86 95       	lsr	r24
    2748:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    274c:	80 91 c1 03 	lds	r24, 0x03C1
    2750:	88 23       	and	r24, r24
    2752:	09 f0       	breq	.+2      	; 0x2756 <__vector_29+0xa2>
    2754:	e1 c1       	rjmp	.+962    	; 0x2b18 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2762:	90 91 29 03 	lds	r25, 0x0329
    2766:	98 30       	cpi	r25, 0x08	; 8
    2768:	08 f0       	brcs	.+2      	; 0x276c <__vector_29+0xb8>
    276a:	ed c0       	rjmp	.+474    	; 0x2946 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    276c:	90 91 7b 00 	lds	r25, 0x007B
    2770:	97 7f       	andi	r25, 0xF7	; 247
    2772:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2776:	90 91 29 03 	lds	r25, 0x0329
    277a:	90 5c       	subi	r25, 0xC0	; 192
    277c:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	09 f4       	brne	.+2      	; 0x2786 <__vector_29+0xd2>
    2784:	ed c0       	rjmp	.+474    	; 0x2960 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    2786:	ff 91       	pop	r31
    2788:	ef 91       	pop	r30
    278a:	bf 91       	pop	r27
    278c:	af 91       	pop	r26
    278e:	9f 91       	pop	r25
    2790:	8f 91       	pop	r24
    2792:	6f 91       	pop	r22
    2794:	5f 91       	pop	r21
    2796:	4f 91       	pop	r20
    2798:	3f 91       	pop	r19
    279a:	2f 91       	pop	r18
    279c:	0f 90       	pop	r0
    279e:	0b be       	out	0x3b, r0	; 59
    27a0:	0f 90       	pop	r0
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	0f 90       	pop	r0
    27a6:	1f 90       	pop	r1
    27a8:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    27aa:	88 23       	and	r24, r24
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <__vector_29+0xfc>
    27ae:	fe c0       	rjmp	.+508    	; 0x29ac <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    27b0:	60 91 2a 03 	lds	r22, 0x032A
    27b4:	6e 30       	cpi	r22, 0x0E	; 14
    27b6:	09 f4       	brne	.+2      	; 0x27ba <__vector_29+0x106>
    27b8:	d0 c1       	rjmp	.+928    	; 0x2b5a <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    27ba:	46 2f       	mov	r20, r22
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	fa 01       	movw	r30, r20
    27c0:	ee 0f       	add	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	e1 5d       	subi	r30, 0xD1	; 209
    27c6:	fc 4f       	sbci	r31, 0xFC	; 252
    27c8:	31 83       	std	Z+1, r19	; 0x01
    27ca:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    27cc:	40 ff       	sbrs	r20, 0
    27ce:	77 c0       	rjmp	.+238    	; 0x28be <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    27d0:	fa 01       	movw	r30, r20
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	e3 5d       	subi	r30, 0xD3	; 211
    27d8:	fc 4f       	sbci	r31, 0xFC	; 252
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	fa 01       	movw	r30, r20
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	e1 5d       	subi	r30, 0xD1	; 209
    27e6:	fc 4f       	sbci	r31, 0xFC	; 252
    27e8:	40 81       	ld	r20, Z
    27ea:	51 81       	ldd	r21, Z+1	; 0x01
    27ec:	26 2f       	mov	r18, r22
    27ee:	26 95       	lsr	r18
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	84 1b       	sub	r24, r20
    27f4:	95 0b       	sbc	r25, r21
    27f6:	22 0f       	add	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	f9 01       	movw	r30, r18
    27fc:	e9 58       	subi	r30, 0x89	; 137
    27fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2800:	40 81       	ld	r20, Z
    2802:	51 81       	ldd	r21, Z+1	; 0x01
    2804:	84 1b       	sub	r24, r20
    2806:	95 0b       	sbc	r25, r21
    2808:	f9 01       	movw	r30, r18
    280a:	e1 5a       	subi	r30, 0xA1	; 161
    280c:	fc 4f       	sbci	r31, 0xFC	; 252
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    2812:	97 fd       	sbrc	r25, 7
    2814:	bd c1       	rjmp	.+890    	; 0x2b90 <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2816:	44 e0       	ldi	r20, 0x04	; 4
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	94 07       	cpc	r25, r20
    281c:	24 f0       	brlt	.+8      	; 0x2826 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	94 e0       	ldi	r25, 0x04	; 4
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2826:	60 31       	cpi	r22, 0x10	; 16
    2828:	48 f4       	brcc	.+18     	; 0x283c <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    282a:	8c 33       	cpi	r24, 0x3C	; 60
    282c:	91 05       	cpc	r25, r1
    282e:	0c f0       	brlt	.+2      	; 0x2832 <__vector_29+0x17e>
    2830:	b4 c1       	rjmp	.+872    	; 0x2b9a <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2832:	29 53       	subi	r18, 0x39	; 57
    2834:	3c 4f       	sbci	r19, 0xFC	; 252
    2836:	f9 01       	movw	r30, r18
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    283c:	80 91 2a 04 	lds	r24, 0x042A
    2840:	88 23       	and	r24, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <__vector_29+0x192>
    2844:	75 c1       	rjmp	.+746    	; 0x2b30 <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2846:	80 91 6f 03 	lds	r24, 0x036F
    284a:	90 91 70 03 	lds	r25, 0x0370
    284e:	f1 e0       	ldi	r31, 0x01	; 1
    2850:	84 3a       	cpi	r24, 0xA4	; 164
    2852:	9f 07       	cpc	r25, r31
    2854:	cc f0       	brlt	.+50     	; 0x2888 <__vector_29+0x1d4>
    2856:	80 91 71 03 	lds	r24, 0x0371
    285a:	90 91 72 03 	lds	r25, 0x0372
    285e:	21 e0       	ldi	r18, 0x01	; 1
    2860:	84 3a       	cpi	r24, 0xA4	; 164
    2862:	92 07       	cpc	r25, r18
    2864:	8c f0       	brlt	.+34     	; 0x2888 <__vector_29+0x1d4>
    2866:	80 91 73 03 	lds	r24, 0x0373
    286a:	90 91 74 03 	lds	r25, 0x0374
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	84 3a       	cpi	r24, 0xA4	; 164
    2872:	94 07       	cpc	r25, r20
    2874:	4c f0       	brlt	.+18     	; 0x2888 <__vector_29+0x1d4>
    2876:	80 91 75 03 	lds	r24, 0x0375
    287a:	90 91 76 03 	lds	r25, 0x0376
    287e:	e1 e0       	ldi	r30, 0x01	; 1
    2880:	84 3a       	cpi	r24, 0xA4	; 164
    2882:	9e 07       	cpc	r25, r30
    2884:	0c f0       	brlt	.+2      	; 0x2888 <__vector_29+0x1d4>
    2886:	54 c1       	rjmp	.+680    	; 0x2b30 <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 2b 04 	sts	0x042B, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    288e:	10 92 ee 03 	sts	0x03EE, r1
    2892:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    2896:	10 92 a9 00 	sts	0x00A9, r1
    289a:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    289e:	10 92 ab 00 	sts	0x00AB, r1
    28a2:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    28a6:	10 92 ec 03 	sts	0x03EC, r1
    28aa:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    28ae:	10 92 99 00 	sts	0x0099, r1
    28b2:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    28b6:	10 92 9b 00 	sts	0x009B, r1
    28ba:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    28be:	6f 5f       	subi	r22, 0xFF	; 255
    28c0:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    28c4:	68 31       	cpi	r22, 0x18	; 24
    28c6:	08 f4       	brcc	.+2      	; 0x28ca <__vector_29+0x216>
    28c8:	31 cf       	rjmp	.-414    	; 0x272c <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    28ca:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	80 93 c6 03 	sts	0x03C6, r24
    28d4:	2b cf       	rjmp	.-426    	; 0x272c <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	09 f4       	brne	.+2      	; 0x28dc <__vector_29+0x228>
    28da:	b7 c0       	rjmp	.+366    	; 0x2a4a <__vector_29+0x396>
    28dc:	84 30       	cpi	r24, 0x04	; 4
    28de:	09 f0       	breq	.+2      	; 0x28e2 <__vector_29+0x22e>
    28e0:	40 cf       	rjmp	.-384    	; 0x2762 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    28e2:	90 91 2c 03 	lds	r25, 0x032C
    28e6:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    28ea:	90 91 2d 03 	lds	r25, 0x032D
    28ee:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    28f2:	90 91 c2 03 	lds	r25, 0x03C2
    28f6:	99 23       	and	r25, r25
    28f8:	09 f0       	breq	.+2      	; 0x28fc <__vector_29+0x248>
    28fa:	08 c1       	rjmp	.+528    	; 0x2b0c <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    2902:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    2906:	60 91 2a 03 	lds	r22, 0x032A
    290a:	6e 30       	cpi	r22, 0x0E	; 14
    290c:	09 f4       	brne	.+2      	; 0x2910 <__vector_29+0x25c>
    290e:	1f c1       	rjmp	.+574    	; 0x2b4e <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    2910:	86 2f       	mov	r24, r22
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	60 ff       	sbrs	r22, 0
    2916:	f1 c0       	rjmp	.+482    	; 0x2afa <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2918:	60 31       	cpi	r22, 0x10	; 16
    291a:	08 f4       	brcc	.+2      	; 0x291e <__vector_29+0x26a>
    291c:	0c c1       	rjmp	.+536    	; 0x2b36 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    291e:	20 91 28 04 	lds	r18, 0x0428
    2922:	22 23       	and	r18, r18
    2924:	09 f0       	breq	.+2      	; 0x2928 <__vector_29+0x274>
    2926:	d5 c0       	rjmp	.+426    	; 0x2ad2 <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2928:	40 97       	sbiw	r24, 0x10	; 16
    292a:	95 95       	asr	r25
    292c:	87 95       	ror	r24
    292e:	21 e0       	ldi	r18, 0x01	; 1
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <__vector_29+0x284>
    2934:	22 0f       	add	r18, r18
    2936:	33 1f       	adc	r19, r19
    2938:	8a 95       	dec	r24
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <__vector_29+0x280>
    293c:	20 93 05 01 	sts	0x0105, r18
    2940:	80 91 c0 03 	lds	r24, 0x03C0
    2944:	0e cf       	rjmp	.-484    	; 0x2762 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2946:	90 91 7b 00 	lds	r25, 0x007B
    294a:	98 60       	ori	r25, 0x08	; 8
    294c:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    2950:	90 91 29 03 	lds	r25, 0x0329
    2954:	98 5c       	subi	r25, 0xC8	; 200
    2956:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	09 f0       	breq	.+2      	; 0x2960 <__vector_29+0x2ac>
    295e:	13 cf       	rjmp	.-474    	; 0x2786 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    2960:	20 91 28 04 	lds	r18, 0x0428
    2964:	22 23       	and	r18, r18
    2966:	51 f0       	breq	.+20     	; 0x297c <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2968:	21 30       	cpi	r18, 0x01	; 1
    296a:	19 f0       	breq	.+6      	; 0x2972 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    296c:	22 30       	cpi	r18, 0x02	; 2
    296e:	09 f0       	breq	.+2      	; 0x2972 <__vector_29+0x2be>
    2970:	0a cf       	rjmp	.-492    	; 0x2786 <__vector_29+0xd2>
			PORTJ = 0xFF;
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2978:	12 b8       	out	0x02, r1	; 2
    297a:	05 cf       	rjmp	.-502    	; 0x2786 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    297c:	80 91 05 01 	lds	r24, 0x0105
    2980:	80 7f       	andi	r24, 0xF0	; 240
    2982:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2986:	12 b8       	out	0x02, r1	; 2
    2988:	fe ce       	rjmp	.-516    	; 0x2786 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	09 f0       	breq	.+2      	; 0x2990 <__vector_29+0x2dc>
    298e:	e9 ce       	rjmp	.-558    	; 0x2762 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2990:	80 91 2b 03 	lds	r24, 0x032B
    2994:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2998:	80 91 2e 03 	lds	r24, 0x032E
    299c:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    29a0:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	80 93 c0 03 	sts	0x03C0, r24
			break;
    29aa:	db ce       	rjmp	.-586    	; 0x2762 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <__vector_29+0x2fe>
    29b0:	bd ce       	rjmp	.-646    	; 0x272c <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    29b2:	80 91 d9 03 	lds	r24, 0x03D9
    29b6:	90 91 da 03 	lds	r25, 0x03DA
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    29be:	96 95       	lsr	r25
    29c0:	87 95       	ror	r24
    29c2:	90 93 da 03 	sts	0x03DA, r25
    29c6:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    29ca:	80 91 c0 03 	lds	r24, 0x03C0
    29ce:	82 30       	cpi	r24, 0x02	; 2
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <__vector_29+0x320>
    29d2:	b1 ce       	rjmp	.-670    	; 0x2736 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    29d4:	80 91 2c 03 	lds	r24, 0x032C
    29d8:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    29dc:	80 91 2d 03 	lds	r24, 0x032D
    29e0:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    29e4:	80 91 c2 03 	lds	r24, 0x03C2
    29e8:	88 23       	and	r24, r24
    29ea:	09 f0       	breq	.+2      	; 0x29ee <__vector_29+0x33a>
    29ec:	9b c0       	rjmp	.+310    	; 0x2b24 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	80 93 c0 03 	sts	0x03C0, r24
			break;
    29fa:	b3 ce       	rjmp	.-666    	; 0x2762 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    29fc:	80 91 0a 02 	lds	r24, 0x020A
    2a00:	88 23       	and	r24, r24
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <__vector_29+0x352>
    2a04:	93 ce       	rjmp	.-730    	; 0x272c <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2a06:	90 91 00 01 	lds	r25, 0x0100
    2a0a:	93 fd       	sbrc	r25, 3
    2a0c:	8f ce       	rjmp	.-738    	; 0x272c <__vector_29+0x78>
    2a0e:	90 91 00 01 	lds	r25, 0x0100
    2a12:	94 fd       	sbrc	r25, 4
    2a14:	8b ce       	rjmp	.-746    	; 0x272c <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2a16:	48 2f       	mov	r20, r24
    2a18:	4f 5f       	subi	r20, 0xFF	; 255
    2a1a:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    2a1e:	45 30       	cpi	r20, 0x05	; 5
    2a20:	08 f4       	brcc	.+2      	; 0x2a24 <__vector_29+0x370>
    2a22:	84 ce       	rjmp	.-760    	; 0x272c <__vector_29+0x78>
					left_vel_sum += value;
    2a24:	80 91 e3 03 	lds	r24, 0x03E3
    2a28:	90 91 e4 03 	lds	r25, 0x03E4
    2a2c:	82 0f       	add	r24, r18
    2a2e:	93 1f       	adc	r25, r19
    2a30:	90 93 e4 03 	sts	0x03E4, r25
    2a34:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    2a38:	48 30       	cpi	r20, 0x08	; 8
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <__vector_29+0x38a>
    2a3c:	77 ce       	rjmp	.-786    	; 0x272c <__vector_29+0x78>
						firstSampleLeft = 0;
    2a3e:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	80 93 07 02 	sts	0x0207, r24
    2a48:	71 ce       	rjmp	.-798    	; 0x272c <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2a4a:	80 91 2b 03 	lds	r24, 0x032B
    2a4e:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2a52:	80 91 2e 03 	lds	r24, 0x032E
    2a56:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    2a5a:	80 91 c1 03 	lds	r24, 0x03C1
    2a5e:	88 23       	and	r24, r24
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <__vector_29+0x3b0>
    2a62:	4e c0       	rjmp	.+156    	; 0x2b00 <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    2a6a:	84 e0       	ldi	r24, 0x04	; 4
    2a6c:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2a70:	78 ce       	rjmp	.-784    	; 0x2762 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    2a72:	80 91 09 02 	lds	r24, 0x0209
    2a76:	88 23       	and	r24, r24
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <__vector_29+0x3c8>
    2a7a:	58 ce       	rjmp	.-848    	; 0x272c <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2a7c:	63 99       	sbic	0x0c, 3	; 12
    2a7e:	56 ce       	rjmp	.-852    	; 0x272c <__vector_29+0x78>
    2a80:	64 99       	sbic	0x0c, 4	; 12
    2a82:	54 ce       	rjmp	.-856    	; 0x272c <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2a84:	48 2f       	mov	r20, r24
    2a86:	4f 5f       	subi	r20, 0xFF	; 255
    2a88:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2a8c:	45 30       	cpi	r20, 0x05	; 5
    2a8e:	08 f4       	brcc	.+2      	; 0x2a92 <__vector_29+0x3de>
    2a90:	4d ce       	rjmp	.-870    	; 0x272c <__vector_29+0x78>
					right_vel_sum += value;
    2a92:	80 91 e5 03 	lds	r24, 0x03E5
    2a96:	90 91 e6 03 	lds	r25, 0x03E6
    2a9a:	82 0f       	add	r24, r18
    2a9c:	93 1f       	adc	r25, r19
    2a9e:	90 93 e6 03 	sts	0x03E6, r25
    2aa2:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2aa6:	48 30       	cpi	r20, 0x08	; 8
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <__vector_29+0x3f8>
    2aaa:	40 ce       	rjmp	.-896    	; 0x272c <__vector_29+0x78>
						firstSampleRight = 0;
    2aac:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	80 93 08 02 	sts	0x0208, r24
    2ab6:	3a ce       	rjmp	.-908    	; 0x272c <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2ab8:	80 91 d7 03 	lds	r24, 0x03D7
    2abc:	90 91 d8 03 	lds	r25, 0x03D8
    2ac0:	82 0f       	add	r24, r18
    2ac2:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2ac4:	96 95       	lsr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	90 93 d8 03 	sts	0x03D8, r25
    2acc:	80 93 d7 03 	sts	0x03D7, r24
			break;
    2ad0:	2d ce       	rjmp	.-934    	; 0x272c <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    2ad2:	21 30       	cpi	r18, 0x01	; 1
    2ad4:	11 f0       	breq	.+4      	; 0x2ada <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    2ad6:	22 30       	cpi	r18, 0x02	; 2
    2ad8:	81 f4       	brne	.+32     	; 0x2afa <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2ada:	40 91 05 01 	lds	r20, 0x0105
    2ade:	40 97       	sbiw	r24, 0x10	; 16
    2ae0:	95 95       	asr	r25
    2ae2:	87 95       	ror	r24
    2ae4:	21 e0       	ldi	r18, 0x01	; 1
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <__vector_29+0x43a>
    2aea:	22 0f       	add	r18, r18
    2aec:	33 1f       	adc	r19, r19
    2aee:	8a 95       	dec	r24
    2af0:	e2 f7       	brpl	.-8      	; 0x2aea <__vector_29+0x436>
    2af2:	20 95       	com	r18
    2af4:	24 23       	and	r18, r20
    2af6:	20 93 05 01 	sts	0x0105, r18
    2afa:	80 91 c0 03 	lds	r24, 0x03C0
    2afe:	31 ce       	rjmp	.-926    	; 0x2762 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	d1 f1       	breq	.+116    	; 0x2b78 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2b04:	85 e0       	ldi	r24, 0x05	; 5
    2b06:	80 93 bf 03 	sts	0x03BF, r24
    2b0a:	af cf       	rjmp	.-162    	; 0x2a6a <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2b0c:	91 30       	cpi	r25, 0x01	; 1
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2b10:	85 e0       	ldi	r24, 0x05	; 5
    2b12:	80 93 bf 03 	sts	0x03BF, r24
    2b16:	f5 ce       	rjmp	.-534    	; 0x2902 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	b1 f1       	breq	.+108    	; 0x2b88 <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2b1c:	85 e0       	ldi	r24, 0x05	; 5
    2b1e:	80 93 bf 03 	sts	0x03BF, r24
    2b22:	1c ce       	rjmp	.-968    	; 0x275c <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	61 f1       	breq	.+88     	; 0x2b80 <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2b28:	85 e0       	ldi	r24, 0x05	; 5
    2b2a:	80 93 bf 03 	sts	0x03BF, r24
    2b2e:	62 cf       	rjmp	.-316    	; 0x29f4 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2b30:	10 92 2b 04 	sts	0x042B, r1
    2b34:	c4 ce       	rjmp	.-632    	; 0x28be <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    2b36:	66 95       	lsr	r22
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <__vector_29+0x48e>
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	6a 95       	dec	r22
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <__vector_29+0x48a>
    2b46:	82 b9       	out	0x02, r24	; 2
    2b48:	80 91 c0 03 	lds	r24, 0x03C0
    2b4c:	0a ce       	rjmp	.-1004   	; 0x2762 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    2b4e:	80 91 c5 03 	lds	r24, 0x03C5
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	a1 f1       	breq	.+104    	; 0x2bbe <__vector_29+0x50a>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	04 ce       	rjmp	.-1016   	; 0x2762 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2b5a:	80 91 c5 03 	lds	r24, 0x03C5
    2b5e:	82 30       	cpi	r24, 0x02	; 2
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <__vector_29+0x4b0>
    2b62:	2b ce       	rjmp	.-938    	; 0x27ba <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2b64:	30 93 c4 03 	sts	0x03C4, r19
    2b68:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    2b6c:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2b70:	46 98       	cbi	0x08, 6	; 8
    2b72:	4e e0       	ldi	r20, 0x0E	; 14
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	2a ce       	rjmp	.-940    	; 0x27cc <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	80 93 bf 03 	sts	0x03BF, r24
    2b7e:	75 cf       	rjmp	.-278    	; 0x2a6a <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2b80:	84 e0       	ldi	r24, 0x04	; 4
    2b82:	80 93 bf 03 	sts	0x03BF, r24
    2b86:	36 cf       	rjmp	.-404    	; 0x29f4 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	80 93 bf 03 	sts	0x03BF, r24
    2b8e:	e6 cd       	rjmp	.-1076   	; 0x275c <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2b90:	11 82       	std	Z+1, r1	; 0x01
    2b92:	10 82       	st	Z, r1
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	46 ce       	rjmp	.-884    	; 0x2826 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	44 5c       	subi	r20, 0xC4	; 196
    2b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba0:	55 95       	asr	r21
    2ba2:	47 95       	ror	r20
    2ba4:	48 37       	cpi	r20, 0x78	; 120
    2ba6:	51 05       	cpc	r21, r1
    2ba8:	7c f4       	brge	.+30     	; 0x2bc8 <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2baa:	29 53       	subi	r18, 0x39	; 57
    2bac:	3c 4f       	sbci	r19, 0xFC	; 252
    2bae:	cc 97       	sbiw	r24, 0x3c	; 60
    2bb0:	95 95       	asr	r25
    2bb2:	87 95       	ror	r24
    2bb4:	cc 96       	adiw	r24, 0x3c	; 60
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	3f ce       	rjmp	.-898    	; 0x283c <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2bc4:	46 9a       	sbi	0x08, 6	; 8
    2bc6:	a4 ce       	rjmp	.-696    	; 0x2910 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2bc8:	ac 01       	movw	r20, r24
    2bca:	44 5d       	subi	r20, 0xD4	; 212
    2bcc:	5e 4f       	sbci	r21, 0xFE	; 254
    2bce:	55 95       	asr	r21
    2bd0:	47 95       	ror	r20
    2bd2:	55 95       	asr	r21
    2bd4:	47 95       	ror	r20
    2bd6:	44 3b       	cpi	r20, 0xB4	; 180
    2bd8:	51 05       	cpc	r21, r1
    2bda:	74 f4       	brge	.+28     	; 0x2bf8 <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2bdc:	29 53       	subi	r18, 0x39	; 57
    2bde:	3c 4f       	sbci	r19, 0xFC	; 252
    2be0:	84 5b       	subi	r24, 0xB4	; 180
    2be2:	90 40       	sbci	r25, 0x00	; 0
    2be4:	95 95       	asr	r25
    2be6:	87 95       	ror	r24
    2be8:	95 95       	asr	r25
    2bea:	87 95       	ror	r24
    2bec:	88 58       	subi	r24, 0x88	; 136
    2bee:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf0:	f9 01       	movw	r30, r18
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	80 83       	st	Z, r24
    2bf6:	22 ce       	rjmp	.-956    	; 0x283c <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2bf8:	29 53       	subi	r18, 0x39	; 57
    2bfa:	3c 4f       	sbci	r19, 0xFC	; 252
    2bfc:	84 5a       	subi	r24, 0xA4	; 164
    2bfe:	91 40       	sbci	r25, 0x01	; 1
    2c00:	95 95       	asr	r25
    2c02:	87 95       	ror	r24
    2c04:	95 95       	asr	r25
    2c06:	87 95       	ror	r24
    2c08:	95 95       	asr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	8c 54       	subi	r24, 0x4C	; 76
    2c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c10:	f9 01       	movw	r30, r18
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	12 ce       	rjmp	.-988    	; 0x283c <__vector_29+0x188>

00002c18 <initMotors>:

#include "motors.h"

void initMotors() {
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2c20:	e0 e9       	ldi	r30, 0x90	; 144
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	10 82       	st	Z, r1
	TCCR3B = 0;
    2c26:	41 e9       	ldi	r20, 0x91	; 145
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	da 01       	movw	r26, r20
    2c2c:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2c2e:	21 e7       	ldi	r18, 0x71	; 113
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	e9 01       	movw	r28, r18
    2c34:	18 82       	st	Y, r1
	TCCR4A = 0;
    2c36:	a0 ea       	ldi	r26, 0xA0	; 160
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	1c 92       	st	X, r1
	TCCR4B = 0;
    2c3c:	81 ea       	ldi	r24, 0xA1	; 161
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	ec 01       	movw	r28, r24
    2c42:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2c44:	02 e7       	ldi	r16, 0x72	; 114
    2c46:	10 e0       	ldi	r17, 0x00	; 0
    2c48:	e8 01       	movw	r28, r16
    2c4a:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2c4c:	60 81       	ld	r22, Z
    2c4e:	63 68       	ori	r22, 0x83	; 131
    2c50:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2c52:	60 81       	ld	r22, Z
    2c54:	63 60       	ori	r22, 0x03	; 3
    2c56:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2c58:	ea 01       	movw	r28, r20
    2c5a:	68 81       	ld	r22, Y
    2c5c:	6b 60       	ori	r22, 0x0B	; 11
    2c5e:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2c60:	40 91 eb 03 	lds	r20, 0x03EB
    2c64:	50 91 ec 03 	lds	r21, 0x03EC
    2c68:	50 93 99 00 	sts	0x0099, r21
    2c6c:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    2c70:	10 92 9b 00 	sts	0x009B, r1
    2c74:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2c78:	e9 01       	movw	r28, r18
    2c7a:	48 81       	ld	r20, Y
    2c7c:	41 60       	ori	r20, 0x01	; 1
    2c7e:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2c80:	20 81       	ld	r18, Z
    2c82:	2f 75       	andi	r18, 0x5F	; 95
    2c84:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2c86:	2e b1       	in	r18, 0x0e	; 14
    2c88:	27 7e       	andi	r18, 0xE7	; 231
    2c8a:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2c8c:	2c 91       	ld	r18, X
    2c8e:	23 68       	ori	r18, 0x83	; 131
    2c90:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2c92:	fc 01       	movw	r30, r24
    2c94:	20 81       	ld	r18, Z
    2c96:	2b 60       	ori	r18, 0x0B	; 11
    2c98:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2c9a:	80 91 ed 03 	lds	r24, 0x03ED
    2c9e:	90 91 ee 03 	lds	r25, 0x03EE
    2ca2:	90 93 a9 00 	sts	0x00A9, r25
    2ca6:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2caa:	10 92 ab 00 	sts	0x00AB, r1
    2cae:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2cb2:	e8 01       	movw	r28, r16
    2cb4:	88 81       	ld	r24, Y
    2cb6:	81 60       	ori	r24, 0x01	; 1
    2cb8:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2cba:	8c 91       	ld	r24, X
    2cbc:	8f 75       	andi	r24, 0x5F	; 95
    2cbe:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2cc0:	e2 e0       	ldi	r30, 0x02	; 2
    2cc2:	f1 e0       	ldi	r31, 0x01	; 1
    2cc4:	80 81       	ld	r24, Z
    2cc6:	87 7e       	andi	r24, 0xE7	; 231
    2cc8:	80 83       	st	Z, r24


}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    2cd4:	80 91 07 02 	lds	r24, 0x0207
    2cd8:	88 23       	and	r24, r24
    2cda:	91 f0       	breq	.+36     	; 0x2d00 <handleMotorsWithNoController+0x2c>
		last_left_vel = left_vel_sum>>2;
    2cdc:	80 91 e3 03 	lds	r24, 0x03E3
    2ce0:	90 91 e4 03 	lds	r25, 0x03E4
    2ce4:	96 95       	lsr	r25
    2ce6:	87 95       	ror	r24
    2ce8:	96 95       	lsr	r25
    2cea:	87 95       	ror	r24
    2cec:	90 93 e8 03 	sts	0x03E8, r25
    2cf0:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2cf4:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2cf8:	10 92 e4 03 	sts	0x03E4, r1
    2cfc:	10 92 e3 03 	sts	0x03E3, r1
	}

	if(compute_right_vel) {
    2d00:	80 91 08 02 	lds	r24, 0x0208
    2d04:	88 23       	and	r24, r24
    2d06:	91 f0       	breq	.+36     	; 0x2d2c <handleMotorsWithNoController+0x58>
		last_right_vel = right_vel_sum>>2;
    2d08:	80 91 e5 03 	lds	r24, 0x03E5
    2d0c:	90 91 e6 03 	lds	r25, 0x03E6
    2d10:	96 95       	lsr	r25
    2d12:	87 95       	ror	r24
    2d14:	96 95       	lsr	r25
    2d16:	87 95       	ror	r24
    2d18:	90 93 ea 03 	sts	0x03EA, r25
    2d1c:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2d20:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2d24:	10 92 e6 03 	sts	0x03E6, r1
    2d28:	10 92 e5 03 	sts	0x03E5, r1
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    2d2c:	80 91 ef 03 	lds	r24, 0x03EF
    2d30:	90 91 f0 03 	lds	r25, 0x03F0
    2d34:	90 93 fc 03 	sts	0x03FC, r25
    2d38:	80 93 fb 03 	sts	0x03FB, r24
	pwm_left_working = pwm_left_desired;
    2d3c:	20 91 f1 03 	lds	r18, 0x03F1
    2d40:	30 91 f2 03 	lds	r19, 0x03F2
    2d44:	30 93 fe 03 	sts	0x03FE, r19
    2d48:	20 93 fd 03 	sts	0x03FD, r18
	if(obstacleAvoidanceEnabled) {
    2d4c:	40 91 29 04 	lds	r20, 0x0429
    2d50:	44 23       	and	r20, r20
    2d52:	71 f5       	brne	.+92     	; 0x2db0 <handleMotorsWithNoController+0xdc>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2d54:	30 93 e2 03 	sts	0x03E2, r19
    2d58:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2d5c:	90 93 e0 03 	sts	0x03E0, r25
    2d60:	80 93 df 03 	sts	0x03DF, r24

	pwm_left = pwm_left_working;
    2d64:	30 93 ee 03 	sts	0x03EE, r19
    2d68:	20 93 ed 03 	sts	0x03ED, r18
	pwm_right = pwm_right_working;
    2d6c:	90 93 ec 03 	sts	0x03EC, r25
    2d70:	80 93 eb 03 	sts	0x03EB, r24

	if(pwm_right > 0) {
    2d74:	18 16       	cp	r1, r24
    2d76:	19 06       	cpc	r1, r25
    2d78:	54 f5       	brge	.+84     	; 0x2dce <handleMotorsWithNoController+0xfa>
		OCR3A = (unsigned int)pwm_right;
    2d7a:	90 93 99 00 	sts	0x0099, r25
    2d7e:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    2d82:	80 91 ed 03 	lds	r24, 0x03ED
    2d86:	90 91 ee 03 	lds	r25, 0x03EE
    2d8a:	18 16       	cp	r1, r24
    2d8c:	19 06       	cpc	r1, r25
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <handleMotorsWithNoController+0xc6>
		OCR4A = (unsigned int)pwm_left;
    2d90:	90 93 a9 00 	sts	0x00A9, r25
    2d94:	80 93 a8 00 	sts	0x00A8, r24
    2d98:	08 95       	ret
	} else if(pwm_left < 0) {
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	59 f5       	brne	.+86     	; 0x2df4 <handleMotorsWithNoController+0x120>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    2d9e:	10 92 a9 00 	sts	0x00A9, r1
    2da2:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2da6:	10 92 ab 00 	sts	0x00AB, r1
    2daa:	10 92 aa 00 	sts	0x00AA, r1
    2dae:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2db0:	8d ef       	ldi	r24, 0xFD	; 253
    2db2:	93 e0       	ldi	r25, 0x03	; 3
    2db4:	6b ef       	ldi	r22, 0xFB	; 251
    2db6:	73 e0       	ldi	r23, 0x03	; 3
    2db8:	0e 94 b2 19 	call	0x3364	; 0x3364 <obstacleAvoidance>
    2dbc:	20 91 fd 03 	lds	r18, 0x03FD
    2dc0:	30 91 fe 03 	lds	r19, 0x03FE
    2dc4:	80 91 fb 03 	lds	r24, 0x03FB
    2dc8:	90 91 fc 03 	lds	r25, 0x03FC
    2dcc:	c3 cf       	rjmp	.-122    	; 0x2d54 <handleMotorsWithNoController+0x80>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	49 f4       	brne	.+18     	; 0x2de4 <handleMotorsWithNoController+0x110>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    2dd2:	10 92 99 00 	sts	0x0099, r1
    2dd6:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2dda:	10 92 9b 00 	sts	0x009B, r1
    2dde:	10 92 9a 00 	sts	0x009A, r1
    2de2:	cf cf       	rjmp	.-98     	; 0x2d82 <handleMotorsWithNoController+0xae>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    2de4:	90 95       	com	r25
    2de6:	81 95       	neg	r24
    2de8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dea:	90 93 9b 00 	sts	0x009B, r25
    2dee:	80 93 9a 00 	sts	0x009A, r24
    2df2:	c7 cf       	rjmp	.-114    	; 0x2d82 <handleMotorsWithNoController+0xae>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    2df4:	90 95       	com	r25
    2df6:	81 95       	neg	r24
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	90 93 ab 00 	sts	0x00AB, r25
    2dfe:	80 93 aa 00 	sts	0x00AA, r24
    2e02:	08 95       	ret

00002e04 <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    2e04:	20 91 f1 03 	lds	r18, 0x03F1
    2e08:	30 91 f2 03 	lds	r19, 0x03F2
    2e0c:	30 93 fe 03 	sts	0x03FE, r19
    2e10:	20 93 fd 03 	sts	0x03FD, r18
	pwm_right_working = pwm_right_desired;
    2e14:	80 91 ef 03 	lds	r24, 0x03EF
    2e18:	90 91 f0 03 	lds	r25, 0x03F0
    2e1c:	90 93 fc 03 	sts	0x03FC, r25
    2e20:	80 93 fb 03 	sts	0x03FB, r24
	if(obstacleAvoidanceEnabled) {
    2e24:	40 91 29 04 	lds	r20, 0x0429
    2e28:	44 23       	and	r20, r20
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <handleMotorsWithSpeedController+0x2a>
    2e2c:	70 c0       	rjmp	.+224    	; 0x2f0e <handleMotorsWithSpeedController+0x10a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2e2e:	30 93 e2 03 	sts	0x03E2, r19
    2e32:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2e36:	90 93 e0 03 	sts	0x03E0, r25
    2e3a:	80 93 df 03 	sts	0x03DF, r24

	if(compute_left_vel) {
    2e3e:	80 91 07 02 	lds	r24, 0x0207
    2e42:	88 23       	and	r24, r24
    2e44:	59 f1       	breq	.+86     	; 0x2e9c <handleMotorsWithSpeedController+0x98>

		last_left_vel = left_vel_sum>>2;
    2e46:	80 91 e3 03 	lds	r24, 0x03E3
    2e4a:	90 91 e4 03 	lds	r25, 0x03E4
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	96 95       	lsr	r25
    2e54:	87 95       	ror	r24
    2e56:	90 93 e8 03 	sts	0x03E8, r25
    2e5a:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2e5e:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2e62:	10 92 e4 03 	sts	0x03E4, r1
    2e66:	10 92 e3 03 	sts	0x03E3, r1

		if(robotPosition == HORIZONTAL_POS) {
    2e6a:	80 91 16 02 	lds	r24, 0x0216
    2e6e:	81 30       	cpi	r24, 0x01	; 1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <handleMotorsWithSpeedController+0x70>
    2e72:	61 c0       	rjmp	.+194    	; 0x2f36 <handleMotorsWithSpeedController+0x132>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    2e74:	8d ef       	ldi	r24, 0xFD	; 253
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    2e7c:	80 91 fd 03 	lds	r24, 0x03FD
    2e80:	90 91 fe 03 	lds	r25, 0x03FE
    2e84:	90 93 ee 03 	sts	0x03EE, r25
    2e88:	80 93 ed 03 	sts	0x03ED, r24

		if(pwm_left > 0) {
    2e8c:	18 16       	cp	r1, r24
    2e8e:	19 06       	cpc	r1, r25
    2e90:	0c f0       	brlt	.+2      	; 0x2e94 <handleMotorsWithSpeedController+0x90>
    2e92:	56 c0       	rjmp	.+172    	; 0x2f40 <handleMotorsWithSpeedController+0x13c>
			OCR4A = (unsigned int)pwm_left;
    2e94:	90 93 a9 00 	sts	0x00A9, r25
    2e98:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    2e9c:	80 91 08 02 	lds	r24, 0x0208
    2ea0:	88 23       	and	r24, r24
    2ea2:	a1 f1       	breq	.+104    	; 0x2f0c <handleMotorsWithSpeedController+0x108>

		last_right_vel = right_vel_sum>>2;
    2ea4:	80 91 e5 03 	lds	r24, 0x03E5
    2ea8:	90 91 e6 03 	lds	r25, 0x03E6
    2eac:	96 95       	lsr	r25
    2eae:	87 95       	ror	r24
    2eb0:	96 95       	lsr	r25
    2eb2:	87 95       	ror	r24
    2eb4:	90 93 ea 03 	sts	0x03EA, r25
    2eb8:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2ebc:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2ec0:	10 92 e6 03 	sts	0x03E6, r1
    2ec4:	10 92 e5 03 	sts	0x03E5, r1

		if(robotPosition == HORIZONTAL_POS) {
    2ec8:	80 91 16 02 	lds	r24, 0x0216
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	71 f1       	breq	.+92     	; 0x2f2c <handleMotorsWithSpeedController+0x128>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    2ed0:	8b ef       	ldi	r24, 0xFB	; 251
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	0e 94 26 0c 	call	0x184c	; 0x184c <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    2ed8:	80 91 fb 03 	lds	r24, 0x03FB
    2edc:	90 91 fc 03 	lds	r25, 0x03FC
    2ee0:	90 93 ec 03 	sts	0x03EC, r25
    2ee4:	80 93 eb 03 	sts	0x03EB, r24

		if(pwm_right > 0) {
    2ee8:	18 16       	cp	r1, r24
    2eea:	19 06       	cpc	r1, r25
    2eec:	2c f4       	brge	.+10     	; 0x2ef8 <handleMotorsWithSpeedController+0xf4>
			OCR3A = (unsigned int)pwm_right;
    2eee:	90 93 99 00 	sts	0x0099, r25
    2ef2:	80 93 98 00 	sts	0x0098, r24
    2ef6:	08 95       	ret
		} else if(pwm_right < 0) {
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	69 f5       	brne	.+90     	; 0x2f56 <handleMotorsWithSpeedController+0x152>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    2efc:	10 92 99 00 	sts	0x0099, r1
    2f00:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    2f04:	10 92 9b 00 	sts	0x009B, r1
    2f08:	10 92 9a 00 	sts	0x009A, r1
    2f0c:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    2f0e:	8d ef       	ldi	r24, 0xFD	; 253
    2f10:	93 e0       	ldi	r25, 0x03	; 3
    2f12:	6b ef       	ldi	r22, 0xFB	; 251
    2f14:	73 e0       	ldi	r23, 0x03	; 3
    2f16:	0e 94 b2 19 	call	0x3364	; 0x3364 <obstacleAvoidance>
    2f1a:	20 91 fd 03 	lds	r18, 0x03FD
    2f1e:	30 91 fe 03 	lds	r19, 0x03FE
    2f22:	80 91 fb 03 	lds	r24, 0x03FB
    2f26:	90 91 fc 03 	lds	r25, 0x03FC
    2f2a:	81 cf       	rjmp	.-254    	; 0x2e2e <handleMotorsWithSpeedController+0x2a>
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    2f2c:	8b ef       	ldi	r24, 0xFB	; 251
    2f2e:	93 e0       	ldi	r25, 0x03	; 3
    2f30:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <start_horizontal_speed_control_right>
    2f34:	d1 cf       	rjmp	.-94     	; 0x2ed8 <handleMotorsWithSpeedController+0xd4>
		compute_left_vel = 0;
		left_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    2f36:	8d ef       	ldi	r24, 0xFD	; 253
    2f38:	93 e0       	ldi	r25, 0x03	; 3
    2f3a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <start_horizontal_speed_control_left>
    2f3e:	9e cf       	rjmp	.-196    	; 0x2e7c <handleMotorsWithSpeedController+0x78>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	89 f4       	brne	.+34     	; 0x2f66 <handleMotorsWithSpeedController+0x162>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    2f44:	10 92 a9 00 	sts	0x00A9, r1
    2f48:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    2f4c:	10 92 ab 00 	sts	0x00AB, r1
    2f50:	10 92 aa 00 	sts	0x00AA, r1
    2f54:	a3 cf       	rjmp	.-186    	; 0x2e9c <handleMotorsWithSpeedController+0x98>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    2f56:	90 95       	com	r25
    2f58:	81 95       	neg	r24
    2f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5c:	90 93 9b 00 	sts	0x009B, r25
    2f60:	80 93 9a 00 	sts	0x009A, r24
    2f64:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    2f66:	90 95       	com	r25
    2f68:	81 95       	neg	r24
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	90 93 ab 00 	sts	0x00AB, r25
    2f70:	80 93 aa 00 	sts	0x00AA, r24
    2f74:	93 cf       	rjmp	.-218    	; 0x2e9c <handleMotorsWithSpeedController+0x98>

00002f76 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2f76:	28 2f       	mov	r18, r24
    2f78:	33 27       	eor	r19, r19
    2f7a:	27 fd       	sbrc	r18, 7
    2f7c:	30 95       	com	r19
    2f7e:	37 fd       	sbrc	r19, 7
    2f80:	30 c0       	rjmp	.+96     	; 0x2fe2 <setLeftSpeed+0x6c>
    2f82:	30 93 00 04 	sts	0x0400, r19
    2f86:	20 93 ff 03 	sts	0x03FF, r18

    if(vel >= 0) {
    2f8a:	87 fd       	sbrc	r24, 7
    2f8c:	1e c0       	rjmp	.+60     	; 0x2fca <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    2f8e:	22 0f       	add	r18, r18
    2f90:	33 1f       	adc	r19, r19
    2f92:	22 0f       	add	r18, r18
    2f94:	33 1f       	adc	r19, r19
    2f96:	30 93 f2 03 	sts	0x03F2, r19
    2f9a:	20 93 f1 03 	sts	0x03F1, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	21 30       	cpi	r18, 0x01	; 1
    2fa2:	38 07       	cpc	r19, r24
    2fa4:	3c f0       	brlt	.+14     	; 0x2fb4 <setLeftSpeed+0x3e>
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	92 e0       	ldi	r25, 0x02	; 2
    2faa:	90 93 f2 03 	sts	0x03F2, r25
    2fae:	80 93 f1 03 	sts	0x03F1, r24
    2fb2:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2fb4:	8e ef       	ldi	r24, 0xFE	; 254
    2fb6:	20 30       	cpi	r18, 0x00	; 0
    2fb8:	38 07       	cpc	r19, r24
    2fba:	34 f4       	brge	.+12     	; 0x2fc8 <setLeftSpeed+0x52>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	9e ef       	ldi	r25, 0xFE	; 254
    2fc0:	90 93 f2 03 	sts	0x03F2, r25
    2fc4:	80 93 f1 03 	sts	0x03F1, r24
    2fc8:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	22 0f       	add	r18, r18
    2fd0:	33 1f       	adc	r19, r19
    2fd2:	30 95       	com	r19
    2fd4:	21 95       	neg	r18
    2fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd8:	30 93 f2 03 	sts	0x03F2, r19
    2fdc:	20 93 f1 03 	sts	0x03F1, r18
    2fe0:	de cf       	rjmp	.-68     	; 0x2f9e <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2fe2:	30 95       	com	r19
    2fe4:	21 95       	neg	r18
    2fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe8:	cc cf       	rjmp	.-104    	; 0x2f82 <setLeftSpeed+0xc>

00002fea <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2fea:	28 2f       	mov	r18, r24
    2fec:	33 27       	eor	r19, r19
    2fee:	27 fd       	sbrc	r18, 7
    2ff0:	30 95       	com	r19
    2ff2:	37 fd       	sbrc	r19, 7
    2ff4:	30 c0       	rjmp	.+96     	; 0x3056 <setRightSpeed+0x6c>
    2ff6:	30 93 02 04 	sts	0x0402, r19
    2ffa:	20 93 01 04 	sts	0x0401, r18

    if(vel >= 0) {
    2ffe:	87 fd       	sbrc	r24, 7
    3000:	1e c0       	rjmp	.+60     	; 0x303e <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    3002:	22 0f       	add	r18, r18
    3004:	33 1f       	adc	r19, r19
    3006:	22 0f       	add	r18, r18
    3008:	33 1f       	adc	r19, r19
    300a:	30 93 f0 03 	sts	0x03F0, r19
    300e:	20 93 ef 03 	sts	0x03EF, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	21 30       	cpi	r18, 0x01	; 1
    3016:	38 07       	cpc	r19, r24
    3018:	3c f0       	brlt	.+14     	; 0x3028 <setRightSpeed+0x3e>
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	92 e0       	ldi	r25, 0x02	; 2
    301e:	90 93 f0 03 	sts	0x03F0, r25
    3022:	80 93 ef 03 	sts	0x03EF, r24
    3026:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3028:	8e ef       	ldi	r24, 0xFE	; 254
    302a:	20 30       	cpi	r18, 0x00	; 0
    302c:	38 07       	cpc	r19, r24
    302e:	34 f4       	brge	.+12     	; 0x303c <setRightSpeed+0x52>
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	9e ef       	ldi	r25, 0xFE	; 254
    3034:	90 93 f0 03 	sts	0x03F0, r25
    3038:	80 93 ef 03 	sts	0x03EF, r24
    303c:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    303e:	22 0f       	add	r18, r18
    3040:	33 1f       	adc	r19, r19
    3042:	22 0f       	add	r18, r18
    3044:	33 1f       	adc	r19, r19
    3046:	30 95       	com	r19
    3048:	21 95       	neg	r18
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	30 93 f0 03 	sts	0x03F0, r19
    3050:	20 93 ef 03 	sts	0x03EF, r18
    3054:	de cf       	rjmp	.-68     	; 0x3012 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3056:	30 95       	com	r19
    3058:	21 95       	neg	r18
    305a:	3f 4f       	sbci	r19, 0xFF	; 255
    305c:	cc cf       	rjmp	.-104    	; 0x2ff6 <setRightSpeed+0xc>

0000305e <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    305e:	1f 92       	push	r1
    3060:	0f 92       	push	r0
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	0f 92       	push	r0
    3066:	11 24       	eor	r1, r1
    3068:	8f 93       	push	r24
    306a:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    306c:	80 91 2b 04 	lds	r24, 0x042B
    3070:	88 23       	and	r24, r24
    3072:	61 f0       	breq	.+24     	; 0x308c <__vector_45+0x2e>
		pwm_left = 0;
    3074:	10 92 ee 03 	sts	0x03EE, r1
    3078:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    307c:	10 92 a9 00 	sts	0x00A9, r1
    3080:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3084:	10 92 ab 00 	sts	0x00AB, r1
    3088:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    308c:	10 92 d8 03 	sts	0x03D8, r1
    3090:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3094:	80 91 ed 03 	lds	r24, 0x03ED
    3098:	90 91 ee 03 	lds	r25, 0x03EE
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	41 f5       	brne	.+80     	; 0x30f0 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    30a0:	80 91 e1 03 	lds	r24, 0x03E1
    30a4:	90 91 e2 03 	lds	r25, 0x03E2
    30a8:	97 fd       	sbrc	r25, 7
    30aa:	69 c0       	rjmp	.+210    	; 0x317e <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    30b2:	8e e0       	ldi	r24, 0x0E	; 14
    30b4:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    30be:	80 91 a0 00 	lds	r24, 0x00A0
    30c2:	8f 75       	andi	r24, 0x5F	; 95
    30c4:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    30c8:	80 91 02 01 	lds	r24, 0x0102
    30cc:	87 7e       	andi	r24, 0xE7	; 231
    30ce:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    30d2:	80 91 72 00 	lds	r24, 0x0072
    30d6:	89 7f       	andi	r24, 0xF9	; 249
    30d8:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    30dc:	89 b3       	in	r24, 0x19	; 25
    30de:	86 60       	ori	r24, 0x06	; 6
    30e0:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    30f0:	18 16       	cp	r1, r24
    30f2:	19 06       	cpc	r1, r25
    30f4:	2c f5       	brge	.+74     	; 0x3140 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    30f6:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    30fa:	8f e0       	ldi	r24, 0x0F	; 15
    30fc:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3100:	80 91 a0 00 	lds	r24, 0x00A0
    3104:	8f 7d       	andi	r24, 0xDF	; 223
    3106:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    310a:	80 91 72 00 	lds	r24, 0x0072
    310e:	8b 7f       	andi	r24, 0xFB	; 251
    3110:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3114:	80 91 02 01 	lds	r24, 0x0102
    3118:	8f 7e       	andi	r24, 0xEF	; 239
    311a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    311e:	80 91 a0 00 	lds	r24, 0x00A0
    3122:	80 68       	ori	r24, 0x80	; 128
    3124:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3128:	80 91 72 00 	lds	r24, 0x0072
    312c:	82 60       	ori	r24, 0x02	; 2
    312e:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3140:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3144:	8e e0       	ldi	r24, 0x0E	; 14
    3146:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    314a:	80 91 a0 00 	lds	r24, 0x00A0
    314e:	8f 77       	andi	r24, 0x7F	; 127
    3150:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3154:	80 91 72 00 	lds	r24, 0x0072
    3158:	8d 7f       	andi	r24, 0xFD	; 253
    315a:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    315e:	80 91 02 01 	lds	r24, 0x0102
    3162:	87 7f       	andi	r24, 0xF7	; 247
    3164:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3168:	80 91 a0 00 	lds	r24, 0x00A0
    316c:	80 62       	ori	r24, 0x20	; 32
    316e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3172:	80 91 72 00 	lds	r24, 0x0072
    3176:	84 60       	ori	r24, 0x04	; 4
    3178:	80 93 72 00 	sts	0x0072, r24
    317c:	b2 cf       	rjmp	.-156    	; 0x30e2 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    3184:	8f e0       	ldi	r24, 0x0F	; 15
    3186:	80 93 2b 03 	sts	0x032B, r24
    318a:	96 cf       	rjmp	.-212    	; 0x30b8 <__vector_45+0x5a>

0000318c <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	11 24       	eor	r1, r1
    3196:	8f 93       	push	r24
    3198:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    31a0:	9e e0       	ldi	r25, 0x0E	; 14
    31a2:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    31a6:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    31aa:	9f 91       	pop	r25
    31ac:	8f 91       	pop	r24
    31ae:	0f 90       	pop	r0
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	0f 90       	pop	r0
    31b4:	1f 90       	pop	r1
    31b6:	18 95       	reti

000031b8 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    31b8:	1f 92       	push	r1
    31ba:	0f 92       	push	r0
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	0f 92       	push	r0
    31c0:	11 24       	eor	r1, r1
    31c2:	8f 93       	push	r24
    31c4:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    31cc:	9f e0       	ldi	r25, 0x0F	; 15
    31ce:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    31d2:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	0f 90       	pop	r0
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	0f 90       	pop	r0
    31e0:	1f 90       	pop	r1
    31e2:	18 95       	reti

000031e4 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    31e4:	1f 92       	push	r1
    31e6:	0f 92       	push	r0
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	0f 92       	push	r0
    31ec:	11 24       	eor	r1, r1
    31ee:	8f 93       	push	r24
    31f0:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    31f2:	80 91 2b 04 	lds	r24, 0x042B
    31f6:	88 23       	and	r24, r24
    31f8:	61 f0       	breq	.+24     	; 0x3212 <__vector_35+0x2e>
		pwm_right = 0;
    31fa:	10 92 ec 03 	sts	0x03EC, r1
    31fe:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    3202:	10 92 99 00 	sts	0x0099, r1
    3206:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    320a:	10 92 9b 00 	sts	0x009B, r1
    320e:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3212:	10 92 da 03 	sts	0x03DA, r1
    3216:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    321a:	80 91 eb 03 	lds	r24, 0x03EB
    321e:	90 91 ec 03 	lds	r25, 0x03EC
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	31 f5       	brne	.+76     	; 0x3272 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3226:	80 91 df 03 	lds	r24, 0x03DF
    322a:	90 91 e0 03 	lds	r25, 0x03E0
    322e:	97 fd       	sbrc	r25, 7
    3230:	5f c0       	rjmp	.+190    	; 0x32f0 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3238:	8c e0       	ldi	r24, 0x0C	; 12
    323a:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3244:	80 91 90 00 	lds	r24, 0x0090
    3248:	8f 75       	andi	r24, 0x5F	; 95
    324a:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    324e:	8e b1       	in	r24, 0x0e	; 14
    3250:	87 7e       	andi	r24, 0xE7	; 231
    3252:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3254:	80 91 71 00 	lds	r24, 0x0071
    3258:	89 7f       	andi	r24, 0xF9	; 249
    325a:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    325e:	88 b3       	in	r24, 0x18	; 24
    3260:	86 60       	ori	r24, 0x06	; 6
    3262:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3264:	9f 91       	pop	r25
    3266:	8f 91       	pop	r24
    3268:	0f 90       	pop	r0
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	0f 90       	pop	r0
    326e:	1f 90       	pop	r1
    3270:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3272:	18 16       	cp	r1, r24
    3274:	19 06       	cpc	r1, r25
    3276:	0c f5       	brge	.+66     	; 0x32ba <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    3278:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    327c:	8d e0       	ldi	r24, 0x0D	; 13
    327e:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3282:	80 91 90 00 	lds	r24, 0x0090
    3286:	8f 7d       	andi	r24, 0xDF	; 223
    3288:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    328c:	80 91 71 00 	lds	r24, 0x0071
    3290:	8b 7f       	andi	r24, 0xFB	; 251
    3292:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3296:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3298:	80 91 90 00 	lds	r24, 0x0090
    329c:	80 68       	ori	r24, 0x80	; 128
    329e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    32a2:	80 91 71 00 	lds	r24, 0x0071
    32a6:	82 60       	ori	r24, 0x02	; 2
    32a8:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    32ac:	9f 91       	pop	r25
    32ae:	8f 91       	pop	r24
    32b0:	0f 90       	pop	r0
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	0f 90       	pop	r0
    32b6:	1f 90       	pop	r1
    32b8:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    32ba:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    32be:	8c e0       	ldi	r24, 0x0C	; 12
    32c0:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    32c4:	80 91 90 00 	lds	r24, 0x0090
    32c8:	8f 77       	andi	r24, 0x7F	; 127
    32ca:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    32ce:	80 91 71 00 	lds	r24, 0x0071
    32d2:	8d 7f       	andi	r24, 0xFD	; 253
    32d4:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    32d8:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    32da:	80 91 90 00 	lds	r24, 0x0090
    32de:	80 62       	ori	r24, 0x20	; 32
    32e0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    32e4:	80 91 71 00 	lds	r24, 0x0071
    32e8:	84 60       	ori	r24, 0x04	; 4
    32ea:	80 93 71 00 	sts	0x0071, r24
    32ee:	ba cf       	rjmp	.-140    	; 0x3264 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    32f6:	8d e0       	ldi	r24, 0x0D	; 13
    32f8:	80 93 2c 03 	sts	0x032C, r24
    32fc:	a0 cf       	rjmp	.-192    	; 0x323e <__vector_35+0x5a>

000032fe <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    32fe:	1f 92       	push	r1
    3300:	0f 92       	push	r0
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	0f 92       	push	r0
    3306:	11 24       	eor	r1, r1
    3308:	8f 93       	push	r24
    330a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3312:	9c e0       	ldi	r25, 0x0C	; 12
    3314:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3318:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	0f 90       	pop	r0
    3326:	1f 90       	pop	r1
    3328:	18 95       	reti

0000332a <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    332a:	1f 92       	push	r1
    332c:	0f 92       	push	r0
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	0f 92       	push	r0
    3332:	11 24       	eor	r1, r1
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    333e:	9d e0       	ldi	r25, 0x0D	; 13
    3340:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3344:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    3348:	9f 91       	pop	r25
    334a:	8f 91       	pop	r24
    334c:	0f 90       	pop	r0
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	0f 90       	pop	r0
    3352:	1f 90       	pop	r1
    3354:	18 95       	reti

00003356 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    3356:	80 91 94 00 	lds	r24, 0x0094
    335a:	90 91 95 00 	lds	r25, 0x0095
    335e:	0e 94 41 26 	call	0x4c82	; 0x4c82 <srand>

}
    3362:	08 95       	ret

00003364 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    3364:	2f 92       	push	r2
    3366:	3f 92       	push	r3
    3368:	4f 92       	push	r4
    336a:	5f 92       	push	r5
    336c:	6f 92       	push	r6
    336e:	7f 92       	push	r7
    3370:	8f 92       	push	r8
    3372:	9f 92       	push	r9
    3374:	af 92       	push	r10
    3376:	bf 92       	push	r11
    3378:	cf 92       	push	r12
    337a:	df 92       	push	r13
    337c:	ef 92       	push	r14
    337e:	ff 92       	push	r15
    3380:	0f 93       	push	r16
    3382:	1f 93       	push	r17
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
    338c:	28 97       	sbiw	r28, 0x08	; 8
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	2c 01       	movw	r4, r24
    339a:	7a 83       	std	Y+2, r23	; 0x02
    339c:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    339e:	fc 01       	movw	r30, r24
    33a0:	01 90       	ld	r0, Z+
    33a2:	f0 81       	ld	r31, Z
    33a4:	e0 2d       	mov	r30, r0
    33a6:	fc 83       	std	Y+4, r31	; 0x04
    33a8:	eb 83       	std	Y+3, r30	; 0x03
    33aa:	fb 01       	movw	r30, r22
    33ac:	01 90       	ld	r0, Z+
    33ae:	f0 81       	ld	r31, Z
    33b0:	e0 2d       	mov	r30, r0
    33b2:	fe 83       	std	Y+6, r31	; 0x06
    33b4:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    33b6:	60 91 c7 03 	lds	r22, 0x03C7
    33ba:	70 91 c8 03 	lds	r23, 0x03C8
    33be:	65 30       	cpi	r22, 0x05	; 5
    33c0:	71 05       	cpc	r23, r1
    33c2:	34 f4       	brge	.+12     	; 0x33d0 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    33c4:	10 92 c8 03 	sts	0x03C8, r1
    33c8:	10 92 c7 03 	sts	0x03C7, r1
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    33d0:	40 91 c9 03 	lds	r20, 0x03C9
    33d4:	50 91 ca 03 	lds	r21, 0x03CA
    33d8:	45 30       	cpi	r20, 0x05	; 5
    33da:	51 05       	cpc	r21, r1
    33dc:	34 f4       	brge	.+12     	; 0x33ea <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    33de:	10 92 ca 03 	sts	0x03CA, r1
    33e2:	10 92 c9 03 	sts	0x03C9, r1
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    33ea:	80 91 cb 03 	lds	r24, 0x03CB
    33ee:	90 91 cc 03 	lds	r25, 0x03CC
    33f2:	85 30       	cpi	r24, 0x05	; 5
    33f4:	91 05       	cpc	r25, r1
    33f6:	24 f4       	brge	.+8      	; 0x3400 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    33f8:	10 92 cc 03 	sts	0x03CC, r1
    33fc:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3400:	00 91 cd 03 	lds	r16, 0x03CD
    3404:	10 91 ce 03 	lds	r17, 0x03CE
    3408:	05 30       	cpi	r16, 0x05	; 5
    340a:	11 05       	cpc	r17, r1
    340c:	34 f4       	brge	.+12     	; 0x341a <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    340e:	10 92 ce 03 	sts	0x03CE, r1
    3412:	10 92 cd 03 	sts	0x03CD, r1
    3416:	00 e0       	ldi	r16, 0x00	; 0
    3418:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    341a:	60 90 cf 03 	lds	r6, 0x03CF
    341e:	70 90 d0 03 	lds	r7, 0x03D0
    3422:	f5 e0       	ldi	r31, 0x05	; 5
    3424:	6f 16       	cp	r6, r31
    3426:	71 04       	cpc	r7, r1
    3428:	34 f4       	brge	.+12     	; 0x3436 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    342a:	10 92 d0 03 	sts	0x03D0, r1
    342e:	10 92 cf 03 	sts	0x03CF, r1
    3432:	66 24       	eor	r6, r6
    3434:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3436:	20 91 d1 03 	lds	r18, 0x03D1
    343a:	30 91 d2 03 	lds	r19, 0x03D2
    343e:	25 30       	cpi	r18, 0x05	; 5
    3440:	31 05       	cpc	r19, r1
    3442:	34 f4       	brge	.+12     	; 0x3450 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3444:	10 92 d2 03 	sts	0x03D2, r1
    3448:	10 92 d1 03 	sts	0x03D1, r1
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3450:	80 91 d3 03 	lds	r24, 0x03D3
    3454:	90 91 d4 03 	lds	r25, 0x03D4
    3458:	85 30       	cpi	r24, 0x05	; 5
    345a:	91 05       	cpc	r25, r1
    345c:	24 f4       	brge	.+8      	; 0x3466 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    345e:	10 92 d4 03 	sts	0x03D4, r1
    3462:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3466:	80 91 d5 03 	lds	r24, 0x03D5
    346a:	90 91 d6 03 	lds	r25, 0x03D6
    346e:	85 30       	cpi	r24, 0x05	; 5
    3470:	91 05       	cpc	r25, r1
    3472:	34 f4       	brge	.+12     	; 0x3480 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    3474:	10 92 d6 03 	sts	0x03D6, r1
    3478:	10 92 d5 03 	sts	0x03D5, r1
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    3480:	ee 24       	eor	r14, r14
    3482:	ff 24       	eor	r15, r15
    3484:	e6 1a       	sub	r14, r22
    3486:	f7 0a       	sbc	r15, r23
    3488:	5a 01       	movw	r10, r20
    348a:	b5 94       	asr	r11
    348c:	a7 94       	ror	r10
    348e:	15 95       	asr	r17
    3490:	07 95       	ror	r16
    3492:	69 01       	movw	r12, r18
    3494:	d5 94       	asr	r13
    3496:	c7 94       	ror	r12
    3498:	4c 01       	movw	r8, r24
    349a:	95 94       	asr	r9
    349c:	87 94       	ror	r8
    349e:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <rand>
    34a2:	93 01       	movw	r18, r6
    34a4:	2e 51       	subi	r18, 0x1E	; 30
    34a6:	30 40       	sbci	r19, 0x00	; 0
    34a8:	2e 0d       	add	r18, r14
    34aa:	3f 1d       	adc	r19, r15
    34ac:	20 0f       	add	r18, r16
    34ae:	31 1f       	adc	r19, r17
    34b0:	2c 0d       	add	r18, r12
    34b2:	3d 1d       	adc	r19, r13
    34b4:	2a 19       	sub	r18, r10
    34b6:	3b 09       	sbc	r19, r11
    34b8:	28 19       	sub	r18, r8
    34ba:	39 09       	sbc	r19, r9
    34bc:	4c e3       	ldi	r20, 0x3C	; 60
    34be:	24 2e       	mov	r2, r20
    34c0:	31 2c       	mov	r3, r1
    34c2:	b1 01       	movw	r22, r2
    34c4:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__divmodhi4>
    34c8:	28 0f       	add	r18, r24
    34ca:	39 1f       	adc	r19, r25
    34cc:	38 87       	std	Y+8, r19	; 0x08
    34ce:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    34d0:	e0 90 c9 03 	lds	r14, 0x03C9
    34d4:	f0 90 ca 03 	lds	r15, 0x03CA
    34d8:	f5 94       	asr	r15
    34da:	e7 94       	ror	r14
    34dc:	00 91 cb 03 	lds	r16, 0x03CB
    34e0:	10 91 cc 03 	lds	r17, 0x03CC
    34e4:	15 95       	asr	r17
    34e6:	07 95       	ror	r16
    34e8:	15 95       	asr	r17
    34ea:	07 95       	ror	r16
    34ec:	c0 90 cd 03 	lds	r12, 0x03CD
    34f0:	d0 90 ce 03 	lds	r13, 0x03CE
    34f4:	d5 94       	asr	r13
    34f6:	c7 94       	ror	r12
    34f8:	80 90 d1 03 	lds	r8, 0x03D1
    34fc:	90 90 d2 03 	lds	r9, 0x03D2
    3500:	95 94       	asr	r9
    3502:	87 94       	ror	r8
    3504:	60 90 d3 03 	lds	r6, 0x03D3
    3508:	70 90 d4 03 	lds	r7, 0x03D4
    350c:	75 94       	asr	r7
    350e:	67 94       	ror	r6
    3510:	75 94       	asr	r7
    3512:	67 94       	ror	r6
    3514:	a0 90 d5 03 	lds	r10, 0x03D5
    3518:	b0 90 d6 03 	lds	r11, 0x03D6
    351c:	b5 94       	asr	r11
    351e:	a7 94       	ror	r10
    3520:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <rand>
    3524:	97 01       	movw	r18, r14
    3526:	20 0f       	add	r18, r16
    3528:	31 1f       	adc	r19, r17
    352a:	2e 51       	subi	r18, 0x1E	; 30
    352c:	30 40       	sbci	r19, 0x00	; 0
    352e:	2c 0d       	add	r18, r12
    3530:	3d 1d       	adc	r19, r13
    3532:	2a 19       	sub	r18, r10
    3534:	3b 09       	sbc	r19, r11
    3536:	28 19       	sub	r18, r8
    3538:	39 09       	sbc	r19, r9
    353a:	26 19       	sub	r18, r6
    353c:	37 09       	sbc	r19, r7
    353e:	b1 01       	movw	r22, r2
    3540:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__divmodhi4>
    3544:	28 0f       	add	r18, r24
    3546:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    3548:	4b 81       	ldd	r20, Y+3	; 0x03
    354a:	5c 81       	ldd	r21, Y+4	; 0x04
    354c:	57 fd       	sbrc	r21, 7
    354e:	97 c0       	rjmp	.+302    	; 0x367e <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3550:	5a 01       	movw	r10, r20
    3552:	cc 24       	eor	r12, r12
    3554:	b7 fc       	sbrc	r11, 7
    3556:	c0 94       	com	r12
    3558:	dc 2c       	mov	r13, r12
    355a:	8f 81       	ldd	r24, Y+7	; 0x07
    355c:	98 85       	ldd	r25, Y+8	; 0x08
    355e:	3c 01       	movw	r6, r24
    3560:	88 24       	eor	r8, r8
    3562:	77 fc       	sbrc	r7, 7
    3564:	80 94       	com	r8
    3566:	98 2c       	mov	r9, r8
    3568:	79 01       	movw	r14, r18
    356a:	00 27       	eor	r16, r16
    356c:	f7 fc       	sbrc	r15, 7
    356e:	00 95       	com	r16
    3570:	10 2f       	mov	r17, r16
    3572:	c4 01       	movw	r24, r8
    3574:	b3 01       	movw	r22, r6
    3576:	6e 19       	sub	r22, r14
    3578:	7f 09       	sbc	r23, r15
    357a:	80 0b       	sbc	r24, r16
    357c:	91 0b       	sbc	r25, r17
    357e:	a6 01       	movw	r20, r12
    3580:	95 01       	movw	r18, r10
    3582:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__mulsi3>
    3586:	f7 e0       	ldi	r31, 0x07	; 7
    3588:	95 95       	asr	r25
    358a:	87 95       	ror	r24
    358c:	77 95       	ror	r23
    358e:	67 95       	ror	r22
    3590:	fa 95       	dec	r31
    3592:	d1 f7       	brne	.-12     	; 0x3588 <obstacleAvoidance+0x224>
    3594:	6a 0d       	add	r22, r10
    3596:	7b 1d       	adc	r23, r11
    3598:	8c 1d       	adc	r24, r12
    359a:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    359c:	f2 01       	movw	r30, r4
    359e:	71 83       	std	Z+1, r23	; 0x01
    35a0:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    35a2:	2d 81       	ldd	r18, Y+5	; 0x05
    35a4:	3e 81       	ldd	r19, Y+6	; 0x06
    35a6:	37 fd       	sbrc	r19, 7
    35a8:	99 c0       	rjmp	.+306    	; 0x36dc <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    35aa:	59 01       	movw	r10, r18
    35ac:	cc 24       	eor	r12, r12
    35ae:	b7 fc       	sbrc	r11, 7
    35b0:	c0 94       	com	r12
    35b2:	dc 2c       	mov	r13, r12
    35b4:	c8 01       	movw	r24, r16
    35b6:	b7 01       	movw	r22, r14
    35b8:	66 0d       	add	r22, r6
    35ba:	77 1d       	adc	r23, r7
    35bc:	88 1d       	adc	r24, r8
    35be:	99 1d       	adc	r25, r9
    35c0:	a6 01       	movw	r20, r12
    35c2:	95 01       	movw	r18, r10
    35c4:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__mulsi3>
    35c8:	37 e0       	ldi	r19, 0x07	; 7
    35ca:	95 95       	asr	r25
    35cc:	87 95       	ror	r24
    35ce:	77 95       	ror	r23
    35d0:	67 95       	ror	r22
    35d2:	3a 95       	dec	r19
    35d4:	d1 f7       	brne	.-12     	; 0x35ca <obstacleAvoidance+0x266>
    35d6:	6a 0d       	add	r22, r10
    35d8:	7b 1d       	adc	r23, r11
    35da:	8c 1d       	adc	r24, r12
    35dc:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    35de:	9b 01       	movw	r18, r22
    35e0:	e9 81       	ldd	r30, Y+1	; 0x01
    35e2:	fa 81       	ldd	r31, Y+2	; 0x02
    35e4:	71 83       	std	Z+1, r23	; 0x01
    35e6:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    35e8:	f2 e0       	ldi	r31, 0x02	; 2
    35ea:	21 30       	cpi	r18, 0x01	; 1
    35ec:	3f 07       	cpc	r19, r31
    35ee:	44 f0       	brlt	.+16     	; 0x3600 <obstacleAvoidance+0x29c>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	92 e0       	ldi	r25, 0x02	; 2
    35f4:	e9 81       	ldd	r30, Y+1	; 0x01
    35f6:	fa 81       	ldd	r31, Y+2	; 0x02
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	80 83       	st	Z, r24
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3600:	f2 01       	movw	r30, r4
    3602:	80 81       	ld	r24, Z
    3604:	91 81       	ldd	r25, Z+1	; 0x01
    3606:	f2 e0       	ldi	r31, 0x02	; 2
    3608:	81 30       	cpi	r24, 0x01	; 1
    360a:	9f 07       	cpc	r25, r31
    360c:	4c f0       	brlt	.+18     	; 0x3620 <obstacleAvoidance+0x2bc>
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	92 e0       	ldi	r25, 0x02	; 2
    3612:	f2 01       	movw	r30, r4
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
    3618:	e9 81       	ldd	r30, Y+1	; 0x01
    361a:	fa 81       	ldd	r31, Y+2	; 0x02
    361c:	20 81       	ld	r18, Z
    361e:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    3620:	fe ef       	ldi	r31, 0xFE	; 254
    3622:	20 30       	cpi	r18, 0x00	; 0
    3624:	3f 07       	cpc	r19, r31
    3626:	4c f4       	brge	.+18     	; 0x363a <obstacleAvoidance+0x2d6>
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	9e ef       	ldi	r25, 0xFE	; 254
    362c:	e9 81       	ldd	r30, Y+1	; 0x01
    362e:	fa 81       	ldd	r31, Y+2	; 0x02
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	80 83       	st	Z, r24
    3634:	f2 01       	movw	r30, r4
    3636:	80 81       	ld	r24, Z
    3638:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    363a:	fe ef       	ldi	r31, 0xFE	; 254
    363c:	80 30       	cpi	r24, 0x00	; 0
    363e:	9f 07       	cpc	r25, r31
    3640:	2c f4       	brge	.+10     	; 0x364c <obstacleAvoidance+0x2e8>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	9e ef       	ldi	r25, 0xFE	; 254
    3646:	f2 01       	movw	r30, r4
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24

}
    364c:	28 96       	adiw	r28, 0x08	; 8
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	bf 90       	pop	r11
    366a:	af 90       	pop	r10
    366c:	9f 90       	pop	r9
    366e:	8f 90       	pop	r8
    3670:	7f 90       	pop	r7
    3672:	6f 90       	pop	r6
    3674:	5f 90       	pop	r5
    3676:	4f 90       	pop	r4
    3678:	3f 90       	pop	r3
    367a:	2f 90       	pop	r2
    367c:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    367e:	4d 81       	ldd	r20, Y+5	; 0x05
    3680:	5e 81       	ldd	r21, Y+6	; 0x06
    3682:	5a 01       	movw	r10, r20
    3684:	cc 24       	eor	r12, r12
    3686:	b7 fc       	sbrc	r11, 7
    3688:	c0 94       	com	r12
    368a:	dc 2c       	mov	r13, r12
    368c:	8f 81       	ldd	r24, Y+7	; 0x07
    368e:	98 85       	ldd	r25, Y+8	; 0x08
    3690:	3c 01       	movw	r6, r24
    3692:	88 24       	eor	r8, r8
    3694:	77 fc       	sbrc	r7, 7
    3696:	80 94       	com	r8
    3698:	98 2c       	mov	r9, r8
    369a:	79 01       	movw	r14, r18
    369c:	00 27       	eor	r16, r16
    369e:	f7 fc       	sbrc	r15, 7
    36a0:	00 95       	com	r16
    36a2:	10 2f       	mov	r17, r16
    36a4:	c8 01       	movw	r24, r16
    36a6:	b7 01       	movw	r22, r14
    36a8:	66 0d       	add	r22, r6
    36aa:	77 1d       	adc	r23, r7
    36ac:	88 1d       	adc	r24, r8
    36ae:	99 1d       	adc	r25, r9
    36b0:	a6 01       	movw	r20, r12
    36b2:	95 01       	movw	r18, r10
    36b4:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__mulsi3>
    36b8:	e7 e0       	ldi	r30, 0x07	; 7
    36ba:	95 95       	asr	r25
    36bc:	87 95       	ror	r24
    36be:	77 95       	ror	r23
    36c0:	67 95       	ror	r22
    36c2:	ea 95       	dec	r30
    36c4:	d1 f7       	brne	.-12     	; 0x36ba <obstacleAvoidance+0x356>
    36c6:	26 1b       	sub	r18, r22
    36c8:	37 0b       	sbc	r19, r23
    36ca:	48 0b       	sbc	r20, r24
    36cc:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    36ce:	f2 01       	movw	r30, r4
    36d0:	31 83       	std	Z+1, r19	; 0x01
    36d2:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    36d4:	2d 81       	ldd	r18, Y+5	; 0x05
    36d6:	3e 81       	ldd	r19, Y+6	; 0x06
    36d8:	37 ff       	sbrs	r19, 7
    36da:	67 cf       	rjmp	.-306    	; 0x35aa <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    36dc:	2b 81       	ldd	r18, Y+3	; 0x03
    36de:	3c 81       	ldd	r19, Y+4	; 0x04
    36e0:	59 01       	movw	r10, r18
    36e2:	cc 24       	eor	r12, r12
    36e4:	b7 fc       	sbrc	r11, 7
    36e6:	c0 94       	com	r12
    36e8:	dc 2c       	mov	r13, r12
    36ea:	c4 01       	movw	r24, r8
    36ec:	b3 01       	movw	r22, r6
    36ee:	6e 19       	sub	r22, r14
    36f0:	7f 09       	sbc	r23, r15
    36f2:	80 0b       	sbc	r24, r16
    36f4:	91 0b       	sbc	r25, r17
    36f6:	a6 01       	movw	r20, r12
    36f8:	95 01       	movw	r18, r10
    36fa:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__mulsi3>
    36fe:	27 e0       	ldi	r18, 0x07	; 7
    3700:	95 95       	asr	r25
    3702:	87 95       	ror	r24
    3704:	77 95       	ror	r23
    3706:	67 95       	ror	r22
    3708:	2a 95       	dec	r18
    370a:	d1 f7       	brne	.-12     	; 0x3700 <obstacleAvoidance+0x39c>
    370c:	a6 1a       	sub	r10, r22
    370e:	b7 0a       	sbc	r11, r23
    3710:	c8 0a       	sbc	r12, r24
    3712:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    3714:	95 01       	movw	r18, r10
    3716:	e9 81       	ldd	r30, Y+1	; 0x01
    3718:	fa 81       	ldd	r31, Y+2	; 0x02
    371a:	b1 82       	std	Z+1, r11	; 0x01
    371c:	a0 82       	st	Z, r10
    371e:	64 cf       	rjmp	.-312    	; 0x35e8 <obstacleAvoidance+0x284>

00003720 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3720:	80 91 6f 03 	lds	r24, 0x036F
    3724:	90 91 70 03 	lds	r25, 0x0370
    3728:	21 e0       	ldi	r18, 0x01	; 1
    372a:	84 3a       	cpi	r24, 0xA4	; 164
    372c:	92 07       	cpc	r25, r18
    372e:	d4 f0       	brlt	.+52     	; 0x3764 <cliffDetected+0x44>
    3730:	80 91 71 03 	lds	r24, 0x0371
    3734:	90 91 72 03 	lds	r25, 0x0372
    3738:	21 e0       	ldi	r18, 0x01	; 1
    373a:	84 3a       	cpi	r24, 0xA4	; 164
    373c:	92 07       	cpc	r25, r18
    373e:	94 f0       	brlt	.+36     	; 0x3764 <cliffDetected+0x44>
    3740:	80 91 73 03 	lds	r24, 0x0373
    3744:	90 91 74 03 	lds	r25, 0x0374
    3748:	21 e0       	ldi	r18, 0x01	; 1
    374a:	84 3a       	cpi	r24, 0xA4	; 164
    374c:	92 07       	cpc	r25, r18
    374e:	74 f0       	brlt	.+28     	; 0x376c <cliffDetected+0x4c>
		return 1;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	20 91 75 03 	lds	r18, 0x0375
    3756:	30 91 76 03 	lds	r19, 0x0376
    375a:	91 e0       	ldi	r25, 0x01	; 1
    375c:	24 3a       	cpi	r18, 0xA4	; 164
    375e:	39 07       	cpc	r19, r25
    3760:	1c f4       	brge	.+6      	; 0x3768 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    3762:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	08 95       	ret
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	08 95       	ret
    376c:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    376e:	08 95       	ret

00003770 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	80 93 29 04 	sts	0x0429, r24
}
    3776:	08 95       	ret

00003778 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    3778:	10 92 29 04 	sts	0x0429, r1
}
    377c:	08 95       	ret

0000377e <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	80 93 2a 04 	sts	0x042A, r24
}
    3784:	08 95       	ret

00003786 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    3786:	10 92 2a 04 	sts	0x042A, r1
}
    378a:	08 95       	ret

0000378c <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    378c:	a0 e8       	ldi	r26, 0x80	; 128
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	1c 92       	st	X, r1
	TCCR1B = 0;
    3792:	e1 e8       	ldi	r30, 0x81	; 129
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    3798:	8c 91       	ld	r24, X
    379a:	89 6a       	ori	r24, 0xA9	; 169
    379c:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    379e:	80 81       	ld	r24, Z
    37a0:	89 60       	ori	r24, 0x09	; 9
    37a2:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    37a4:	80 91 0c 02 	lds	r24, 0x020C
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	90 93 89 00 	sts	0x0089, r25
    37ae:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    37b2:	80 91 0d 02 	lds	r24, 0x020D
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	90 93 8b 00 	sts	0x008B, r25
    37bc:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    37c0:	80 91 0e 02 	lds	r24, 0x020E
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	90 93 8d 00 	sts	0x008D, r25
    37ca:	80 93 8c 00 	sts	0x008C, r24

}
    37ce:	08 95       	ret

000037d0 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 91 05 04 	lds	r25, 0x0405
    37d6:	89 1b       	sub	r24, r25
    37d8:	80 93 05 04 	sts	0x0405, r24

	if(blinkState) {
    37dc:	88 23       	and	r24, r24
    37de:	39 f4       	brne	.+14     	; 0x37ee <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    37e0:	80 91 80 00 	lds	r24, 0x0080
    37e4:	87 7f       	andi	r24, 0xF7	; 247
    37e6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    37ea:	2f 98       	cbi	0x05, 7	; 5
    37ec:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    37ee:	80 91 80 00 	lds	r24, 0x0080
    37f2:	88 60       	ori	r24, 0x08	; 8
    37f4:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	90 93 8d 00 	sts	0x008D, r25
    3800:	80 93 8c 00 	sts	0x008C, r24
    3804:	08 95       	ret

00003806 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3806:	88 23       	and	r24, r24
    3808:	59 f0       	breq	.+22     	; 0x3820 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    380a:	90 91 80 00 	lds	r25, 0x0080
    380e:	90 68       	ori	r25, 0x80	; 128
    3810:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	90 93 89 00 	sts	0x0089, r25
    381a:	80 93 88 00 	sts	0x0088, r24
    381e:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3820:	80 91 80 00 	lds	r24, 0x0080
    3824:	8f 77       	andi	r24, 0x7F	; 127
    3826:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    382a:	2d 98       	cbi	0x05, 5	; 5
    382c:	08 95       	ret

0000382e <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    382e:	88 23       	and	r24, r24
    3830:	59 f0       	breq	.+22     	; 0x3848 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3832:	90 91 80 00 	lds	r25, 0x0080
    3836:	90 62       	ori	r25, 0x20	; 32
    3838:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	90 93 8b 00 	sts	0x008B, r25
    3842:	80 93 8a 00 	sts	0x008A, r24
    3846:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    3848:	80 91 80 00 	lds	r24, 0x0080
    384c:	8f 7d       	andi	r24, 0xDF	; 223
    384e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3852:	2e 98       	cbi	0x05, 6	; 5
    3854:	08 95       	ret

00003856 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3856:	88 23       	and	r24, r24
    3858:	59 f0       	breq	.+22     	; 0x3870 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    385a:	90 91 80 00 	lds	r25, 0x0080
    385e:	98 60       	ori	r25, 0x08	; 8
    3860:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	90 93 8d 00 	sts	0x008D, r25
    386a:	80 93 8c 00 	sts	0x008C, r24
    386e:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    3870:	80 91 80 00 	lds	r24, 0x0080
    3874:	87 7f       	andi	r24, 0xF7	; 247
    3876:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    387a:	2f 98       	cbi	0x05, 7	; 5
    387c:	08 95       	ret

0000387e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    387e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3882:	80 91 13 02 	lds	r24, 0x0213
    3886:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    388a:	88 23       	and	r24, r24
    388c:	49 f4       	brne	.+18     	; 0x38a0 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    388e:	86 e1       	ldi	r24, 0x16	; 22
    3890:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3894:	85 e4       	ldi	r24, 0x45	; 69
    3896:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    389a:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    389e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    38a0:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    38a4:	86 ea       	ldi	r24, 0xA6	; 166
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	90 93 14 02 	sts	0x0214, r25
    38ac:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    38b0:	86 ea       	ldi	r24, 0xA6	; 166
    38b2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    38b6:	88 23       	and	r24, r24
    38b8:	41 f5       	brne	.+80     	; 0x390a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    38ba:	8d e2       	ldi	r24, 0x2D	; 45
    38bc:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x08);	// measurement mode
    38c0:	88 e0       	ldi	r24, 0x08	; 8
    38c2:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    38c6:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    38ca:	80 91 13 02 	lds	r24, 0x0213
    38ce:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    38d2:	88 23       	and	r24, r24
    38d4:	d1 f4       	brne	.+52     	; 0x390a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    38d6:	81 e3       	ldi	r24, 0x31	; 49
    38d8:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    38e2:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    38e6:	80 91 13 02 	lds	r24, 0x0213
    38ea:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    38ee:	88 23       	and	r24, r24
    38f0:	61 f4       	brne	.+24     	; 0x390a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    38f2:	8c e2       	ldi	r24, 0x2C	; 44
    38f4:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    38f8:	89 e0       	ldi	r24, 0x09	; 9
    38fa:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    38fe:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	80 93 0b 04 	sts	0x040B, r24
    3908:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    390a:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    390e:	82 e0       	ldi	r24, 0x02	; 2
    3910:	80 93 0b 04 	sts	0x040B, r24
    3914:	08 95       	ret

00003916 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3916:	80 91 13 02 	lds	r24, 0x0213
    391a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    391e:	88 23       	and	r24, r24
    3920:	51 f4       	brne	.+20     	; 0x3936 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3922:	86 e1       	ldi	r24, 0x16	; 22
    3924:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3928:	85 e4       	ldi	r24, 0x45	; 69
    392a:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    392e:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    }

	return 0;				// configuration ok
    3932:	80 e0       	ldi	r24, 0x00	; 0

}
    3934:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3936:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
		return 1;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	08 95       	ret

0000393e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    393e:	80 91 13 02 	lds	r24, 0x0213
    3942:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3946:	88 23       	and	r24, r24
    3948:	31 f5       	brne	.+76     	; 0x3996 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    394a:	8d e2       	ldi	r24, 0x2D	; 45
    394c:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x08);	// measurement mode
    3950:	88 e0       	ldi	r24, 0x08	; 8
    3952:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3956:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    395a:	80 91 13 02 	lds	r24, 0x0213
    395e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3962:	88 23       	and	r24, r24
    3964:	c1 f4       	brne	.+48     	; 0x3996 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3966:	81 e3       	ldi	r24, 0x31	; 49
    3968:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3972:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3976:	80 91 13 02 	lds	r24, 0x0213
    397a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    397e:	88 23       	and	r24, r24
    3980:	51 f4       	brne	.+20     	; 0x3996 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3982:	8c e2       	ldi	r24, 0x2C	; 44
    3984:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3988:	89 e0       	ldi	r24, 0x09	; 9
    398a:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    398e:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
    }

	return 0;
    3992:	80 e0       	ldi	r24, 0x00	; 0

}
    3994:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3996:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>
		return 1;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	08 95       	ret

0000399e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    399e:	ff 92       	push	r15
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	0f 92       	push	r0
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    39ae:	80 91 0b 04 	lds	r24, 0x040B
    39b2:	88 23       	and	r24, r24
    39b4:	91 f0       	breq	.+36     	; 0x39da <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    39b6:	81 30       	cpi	r24, 0x01	; 1
    39b8:	09 f4       	brne	.+2      	; 0x39bc <readAccelXY+0x1e>
    39ba:	88 c0       	rjmp	.+272    	; 0x3acc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    39bc:	10 92 0d 04 	sts	0x040D, r1
    39c0:	10 92 0c 04 	sts	0x040C, r1
		accY = 0;
    39c4:	10 92 0f 04 	sts	0x040F, r1
    39c8:	10 92 0e 04 	sts	0x040E, r1

	}

}
    39cc:	0f 90       	pop	r0
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	1f 91       	pop	r17
    39d4:	0f 91       	pop	r16
    39d6:	ff 90       	pop	r15
    39d8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    39da:	80 91 13 02 	lds	r24, 0x0213
    39de:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    39e2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    39e4:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    39e8:	80 91 13 02 	lds	r24, 0x0213
    39ec:	8f 5f       	subi	r24, 0xFF	; 255
    39ee:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    39f2:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    39f6:	08 2f       	mov	r16, r24
    39f8:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    39fc:	f8 2e       	mov	r15, r24
    39fe:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    3a02:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3a04:	0e 94 24 10 	call	0x2048	; 0x2048 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3a08:	89 83       	std	Y+1, r24	; 0x01
    3a0a:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3a0e:	90 91 58 04 	lds	r25, 0x0458
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	99 23       	and	r25, r25
    3a16:	39 f1       	breq	.+78     	; 0x3a66 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3a18:	4f 2d       	mov	r20, r15
    3a1a:	55 27       	eor	r21, r21
    3a1c:	47 fd       	sbrc	r20, 7
    3a1e:	50 95       	com	r21
    3a20:	54 2f       	mov	r21, r20
    3a22:	44 27       	eor	r20, r20
    3a24:	60 2f       	mov	r22, r16
    3a26:	77 27       	eor	r23, r23
    3a28:	67 fd       	sbrc	r22, 7
    3a2a:	70 95       	com	r23
    3a2c:	46 2b       	or	r20, r22
    3a2e:	57 2b       	or	r21, r23
    3a30:	50 93 0d 04 	sts	0x040D, r21
    3a34:	40 93 0c 04 	sts	0x040C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3a38:	28 2f       	mov	r18, r24
    3a3a:	33 27       	eor	r19, r19
    3a3c:	27 fd       	sbrc	r18, 7
    3a3e:	30 95       	com	r19
    3a40:	32 2f       	mov	r19, r18
    3a42:	22 27       	eor	r18, r18
    3a44:	81 2f       	mov	r24, r17
    3a46:	99 27       	eor	r25, r25
    3a48:	87 fd       	sbrc	r24, 7
    3a4a:	90 95       	com	r25
    3a4c:	28 2b       	or	r18, r24
    3a4e:	39 2b       	or	r19, r25
    3a50:	30 93 0f 04 	sts	0x040F, r19
    3a54:	20 93 0e 04 	sts	0x040E, r18
		accX = 0;
		accY = 0;

	}

}
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	1f 91       	pop	r17
    3a60:	0f 91       	pop	r16
    3a62:	ff 90       	pop	r15
    3a64:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3a66:	4f 2d       	mov	r20, r15
    3a68:	55 27       	eor	r21, r21
    3a6a:	47 fd       	sbrc	r20, 7
    3a6c:	50 95       	com	r21
    3a6e:	54 2f       	mov	r21, r20
    3a70:	44 27       	eor	r20, r20
    3a72:	60 2f       	mov	r22, r16
    3a74:	77 27       	eor	r23, r23
    3a76:	67 fd       	sbrc	r22, 7
    3a78:	70 95       	com	r23
    3a7a:	46 2b       	or	r20, r22
    3a7c:	57 2b       	or	r21, r23
    3a7e:	60 91 12 04 	lds	r22, 0x0412
    3a82:	70 91 13 04 	lds	r23, 0x0413
    3a86:	46 1b       	sub	r20, r22
    3a88:	57 0b       	sbc	r21, r23
    3a8a:	50 93 0d 04 	sts	0x040D, r21
    3a8e:	40 93 0c 04 	sts	0x040C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3a92:	28 2f       	mov	r18, r24
    3a94:	33 27       	eor	r19, r19
    3a96:	27 fd       	sbrc	r18, 7
    3a98:	30 95       	com	r19
    3a9a:	32 2f       	mov	r19, r18
    3a9c:	22 27       	eor	r18, r18
    3a9e:	81 2f       	mov	r24, r17
    3aa0:	99 27       	eor	r25, r25
    3aa2:	87 fd       	sbrc	r24, 7
    3aa4:	90 95       	com	r25
    3aa6:	28 2b       	or	r18, r24
    3aa8:	39 2b       	or	r19, r25
    3aaa:	80 91 14 04 	lds	r24, 0x0414
    3aae:	90 91 15 04 	lds	r25, 0x0415
    3ab2:	28 1b       	sub	r18, r24
    3ab4:	39 0b       	sbc	r19, r25
    3ab6:	30 93 0f 04 	sts	0x040F, r19
    3aba:	20 93 0e 04 	sts	0x040E, r18
		accX = 0;
		accY = 0;

	}

}
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	ff 90       	pop	r15
    3aca:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3acc:	80 91 13 02 	lds	r24, 0x0213
    3ad0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3ad4:	82 e3       	ldi	r24, 0x32	; 50
    3ad6:	86 cf       	rjmp	.-244    	; 0x39e4 <readAccelXY+0x46>

00003ad8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <readAccelXYZ+0x6>
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <readAccelXYZ+0x8>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    3ae4:	80 91 0b 04 	lds	r24, 0x040B
    3ae8:	88 23       	and	r24, r24
    3aea:	c1 f0       	breq	.+48     	; 0x3b1c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    3aec:	81 30       	cpi	r24, 0x01	; 1
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <readAccelXYZ+0x1a>
    3af0:	ad c0       	rjmp	.+346    	; 0x3c4c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    3af2:	10 92 0d 04 	sts	0x040D, r1
    3af6:	10 92 0c 04 	sts	0x040C, r1
		accY = 0;
    3afa:	10 92 0f 04 	sts	0x040F, r1
    3afe:	10 92 0e 04 	sts	0x040E, r1
		accZ = 0;
    3b02:	10 92 11 04 	sts	0x0411, r1
    3b06:	10 92 10 04 	sts	0x0410, r1

	}

}
    3b0a:	26 96       	adiw	r28, 0x06	; 6
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3b1c:	80 91 13 02 	lds	r24, 0x0213
    3b20:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3b24:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3b26:	0e 94 08 10 	call	0x2010	; 0x2010 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3b2a:	80 91 13 02 	lds	r24, 0x0213
    3b2e:	8f 5f       	subi	r24, 0xFF	; 255
    3b30:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3b34:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    3b38:	89 83       	std	Y+1, r24	; 0x01
    3b3a:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    3b3e:	8a 83       	std	Y+2, r24	; 0x02
    3b40:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    3b44:	8b 83       	std	Y+3, r24	; 0x03
    3b46:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    3b4a:	8c 83       	std	Y+4, r24	; 0x04
    3b4c:	0e 94 1a 10 	call	0x2034	; 0x2034 <i2c_readAck>
    3b50:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3b52:	0e 94 24 10 	call	0x2048	; 0x2048 <i2c_readNak>
    3b56:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3b58:	0e 94 00 10 	call	0x2000	; 0x2000 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3b5c:	80 91 58 04 	lds	r24, 0x0458
    3b60:	88 23       	and	r24, r24
    3b62:	89 f1       	breq	.+98     	; 0x3bc6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	99 27       	eor	r25, r25
    3b68:	87 fd       	sbrc	r24, 7
    3b6a:	90 95       	com	r25
    3b6c:	98 2f       	mov	r25, r24
    3b6e:	88 27       	eor	r24, r24
    3b70:	29 81       	ldd	r18, Y+1	; 0x01
    3b72:	33 27       	eor	r19, r19
    3b74:	27 fd       	sbrc	r18, 7
    3b76:	30 95       	com	r19
    3b78:	82 2b       	or	r24, r18
    3b7a:	93 2b       	or	r25, r19
    3b7c:	90 93 0d 04 	sts	0x040D, r25
    3b80:	80 93 0c 04 	sts	0x040C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3b84:	8c 81       	ldd	r24, Y+4	; 0x04
    3b86:	99 27       	eor	r25, r25
    3b88:	87 fd       	sbrc	r24, 7
    3b8a:	90 95       	com	r25
    3b8c:	98 2f       	mov	r25, r24
    3b8e:	88 27       	eor	r24, r24
    3b90:	2b 81       	ldd	r18, Y+3	; 0x03
    3b92:	33 27       	eor	r19, r19
    3b94:	27 fd       	sbrc	r18, 7
    3b96:	30 95       	com	r19
    3b98:	82 2b       	or	r24, r18
    3b9a:	93 2b       	or	r25, r19
    3b9c:	90 93 0f 04 	sts	0x040F, r25
    3ba0:	80 93 0e 04 	sts	0x040E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    3ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba6:	99 27       	eor	r25, r25
    3ba8:	87 fd       	sbrc	r24, 7
    3baa:	90 95       	com	r25
    3bac:	98 2f       	mov	r25, r24
    3bae:	88 27       	eor	r24, r24
    3bb0:	2d 81       	ldd	r18, Y+5	; 0x05
    3bb2:	33 27       	eor	r19, r19
    3bb4:	27 fd       	sbrc	r18, 7
    3bb6:	30 95       	com	r19
    3bb8:	82 2b       	or	r24, r18
    3bba:	93 2b       	or	r25, r19
    3bbc:	90 93 11 04 	sts	0x0411, r25
    3bc0:	80 93 10 04 	sts	0x0410, r24
    3bc4:	a2 cf       	rjmp	.-188    	; 0x3b0a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	99 27       	eor	r25, r25
    3bca:	87 fd       	sbrc	r24, 7
    3bcc:	90 95       	com	r25
    3bce:	98 2f       	mov	r25, r24
    3bd0:	88 27       	eor	r24, r24
    3bd2:	29 81       	ldd	r18, Y+1	; 0x01
    3bd4:	33 27       	eor	r19, r19
    3bd6:	27 fd       	sbrc	r18, 7
    3bd8:	30 95       	com	r19
    3bda:	82 2b       	or	r24, r18
    3bdc:	93 2b       	or	r25, r19
    3bde:	20 91 12 04 	lds	r18, 0x0412
    3be2:	30 91 13 04 	lds	r19, 0x0413
    3be6:	82 1b       	sub	r24, r18
    3be8:	93 0b       	sbc	r25, r19
    3bea:	90 93 0d 04 	sts	0x040D, r25
    3bee:	80 93 0c 04 	sts	0x040C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf4:	99 27       	eor	r25, r25
    3bf6:	87 fd       	sbrc	r24, 7
    3bf8:	90 95       	com	r25
    3bfa:	98 2f       	mov	r25, r24
    3bfc:	88 27       	eor	r24, r24
    3bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    3c00:	33 27       	eor	r19, r19
    3c02:	27 fd       	sbrc	r18, 7
    3c04:	30 95       	com	r19
    3c06:	82 2b       	or	r24, r18
    3c08:	93 2b       	or	r25, r19
    3c0a:	20 91 14 04 	lds	r18, 0x0414
    3c0e:	30 91 15 04 	lds	r19, 0x0415
    3c12:	82 1b       	sub	r24, r18
    3c14:	93 0b       	sbc	r25, r19
    3c16:	90 93 0f 04 	sts	0x040F, r25
    3c1a:	80 93 0e 04 	sts	0x040E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c20:	99 27       	eor	r25, r25
    3c22:	87 fd       	sbrc	r24, 7
    3c24:	90 95       	com	r25
    3c26:	98 2f       	mov	r25, r24
    3c28:	88 27       	eor	r24, r24
    3c2a:	2d 81       	ldd	r18, Y+5	; 0x05
    3c2c:	33 27       	eor	r19, r19
    3c2e:	27 fd       	sbrc	r18, 7
    3c30:	30 95       	com	r19
    3c32:	82 2b       	or	r24, r18
    3c34:	93 2b       	or	r25, r19
    3c36:	20 91 16 04 	lds	r18, 0x0416
    3c3a:	30 91 17 04 	lds	r19, 0x0417
    3c3e:	82 1b       	sub	r24, r18
    3c40:	93 0b       	sbc	r25, r19
    3c42:	90 93 11 04 	sts	0x0411, r25
    3c46:	80 93 10 04 	sts	0x0410, r24
    3c4a:	5f cf       	rjmp	.-322    	; 0x3b0a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    3c4c:	80 91 13 02 	lds	r24, 0x0213
    3c50:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3c54:	82 e3       	ldi	r24, 0x32	; 50
    3c56:	67 cf       	rjmp	.-306    	; 0x3b26 <readAccelXYZ+0x4e>

00003c58 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    3c5c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    3c60:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    3c64:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
	updateGreenLed(pwm_green);
    3c6e:	80 91 0d 02 	lds	r24, 0x020D
    3c72:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
	updateBlueLed(pwm_blue);
    3c76:	80 91 0e 02 	lds	r24, 0x020E
    3c7a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>

	calibrationCycle = 0;
    3c7e:	10 92 27 04 	sts	0x0427, r1
    3c82:	10 92 26 04 	sts	0x0426, r1
	startCalibration = 1;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	80 93 58 04 	sts	0x0458, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    3c8c:	c1 e0       	ldi	r28, 0x01	; 1
    3c8e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3c90:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    3c94:	20 91 26 04 	lds	r18, 0x0426
    3c98:	30 91 27 04 	lds	r19, 0x0427
    3c9c:	21 31       	cpi	r18, 0x11	; 17
    3c9e:	31 05       	cpc	r19, r1
    3ca0:	0c f4       	brge	.+2      	; 0x3ca4 <calibrateSensors+0x4c>
    3ca2:	35 c1       	rjmp	.+618    	; 0x3f0e <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    3ca4:	80 91 8f 03 	lds	r24, 0x038F
    3ca8:	90 91 90 03 	lds	r25, 0x0390
    3cac:	a0 91 91 03 	lds	r26, 0x0391
    3cb0:	b0 91 92 03 	lds	r27, 0x0392
    3cb4:	54 e0       	ldi	r21, 0x04	; 4
    3cb6:	b6 95       	lsr	r27
    3cb8:	a7 95       	ror	r26
    3cba:	97 95       	ror	r25
    3cbc:	87 95       	ror	r24
    3cbe:	5a 95       	dec	r21
    3cc0:	d1 f7       	brne	.-12     	; 0x3cb6 <calibrateSensors+0x5e>
    3cc2:	90 93 78 03 	sts	0x0378, r25
    3cc6:	80 93 77 03 	sts	0x0377, r24
    3cca:	80 91 93 03 	lds	r24, 0x0393
    3cce:	90 91 94 03 	lds	r25, 0x0394
    3cd2:	a0 91 95 03 	lds	r26, 0x0395
    3cd6:	b0 91 96 03 	lds	r27, 0x0396
    3cda:	44 e0       	ldi	r20, 0x04	; 4
    3cdc:	b6 95       	lsr	r27
    3cde:	a7 95       	ror	r26
    3ce0:	97 95       	ror	r25
    3ce2:	87 95       	ror	r24
    3ce4:	4a 95       	dec	r20
    3ce6:	d1 f7       	brne	.-12     	; 0x3cdc <calibrateSensors+0x84>
    3ce8:	90 93 7a 03 	sts	0x037A, r25
    3cec:	80 93 79 03 	sts	0x0379, r24
    3cf0:	80 91 97 03 	lds	r24, 0x0397
    3cf4:	90 91 98 03 	lds	r25, 0x0398
    3cf8:	a0 91 99 03 	lds	r26, 0x0399
    3cfc:	b0 91 9a 03 	lds	r27, 0x039A
    3d00:	34 e0       	ldi	r19, 0x04	; 4
    3d02:	b6 95       	lsr	r27
    3d04:	a7 95       	ror	r26
    3d06:	97 95       	ror	r25
    3d08:	87 95       	ror	r24
    3d0a:	3a 95       	dec	r19
    3d0c:	d1 f7       	brne	.-12     	; 0x3d02 <calibrateSensors+0xaa>
    3d0e:	90 93 7c 03 	sts	0x037C, r25
    3d12:	80 93 7b 03 	sts	0x037B, r24
    3d16:	80 91 9b 03 	lds	r24, 0x039B
    3d1a:	90 91 9c 03 	lds	r25, 0x039C
    3d1e:	a0 91 9d 03 	lds	r26, 0x039D
    3d22:	b0 91 9e 03 	lds	r27, 0x039E
    3d26:	24 e0       	ldi	r18, 0x04	; 4
    3d28:	b6 95       	lsr	r27
    3d2a:	a7 95       	ror	r26
    3d2c:	97 95       	ror	r25
    3d2e:	87 95       	ror	r24
    3d30:	2a 95       	dec	r18
    3d32:	d1 f7       	brne	.-12     	; 0x3d28 <calibrateSensors+0xd0>
    3d34:	90 93 7e 03 	sts	0x037E, r25
    3d38:	80 93 7d 03 	sts	0x037D, r24
    3d3c:	80 91 9f 03 	lds	r24, 0x039F
    3d40:	90 91 a0 03 	lds	r25, 0x03A0
    3d44:	a0 91 a1 03 	lds	r26, 0x03A1
    3d48:	b0 91 a2 03 	lds	r27, 0x03A2
    3d4c:	f4 e0       	ldi	r31, 0x04	; 4
    3d4e:	b6 95       	lsr	r27
    3d50:	a7 95       	ror	r26
    3d52:	97 95       	ror	r25
    3d54:	87 95       	ror	r24
    3d56:	fa 95       	dec	r31
    3d58:	d1 f7       	brne	.-12     	; 0x3d4e <calibrateSensors+0xf6>
    3d5a:	90 93 80 03 	sts	0x0380, r25
    3d5e:	80 93 7f 03 	sts	0x037F, r24
    3d62:	80 91 a3 03 	lds	r24, 0x03A3
    3d66:	90 91 a4 03 	lds	r25, 0x03A4
    3d6a:	a0 91 a5 03 	lds	r26, 0x03A5
    3d6e:	b0 91 a6 03 	lds	r27, 0x03A6
    3d72:	e4 e0       	ldi	r30, 0x04	; 4
    3d74:	b6 95       	lsr	r27
    3d76:	a7 95       	ror	r26
    3d78:	97 95       	ror	r25
    3d7a:	87 95       	ror	r24
    3d7c:	ea 95       	dec	r30
    3d7e:	d1 f7       	brne	.-12     	; 0x3d74 <calibrateSensors+0x11c>
    3d80:	90 93 82 03 	sts	0x0382, r25
    3d84:	80 93 81 03 	sts	0x0381, r24
    3d88:	80 91 a7 03 	lds	r24, 0x03A7
    3d8c:	90 91 a8 03 	lds	r25, 0x03A8
    3d90:	a0 91 a9 03 	lds	r26, 0x03A9
    3d94:	b0 91 aa 03 	lds	r27, 0x03AA
    3d98:	74 e0       	ldi	r23, 0x04	; 4
    3d9a:	b6 95       	lsr	r27
    3d9c:	a7 95       	ror	r26
    3d9e:	97 95       	ror	r25
    3da0:	87 95       	ror	r24
    3da2:	7a 95       	dec	r23
    3da4:	d1 f7       	brne	.-12     	; 0x3d9a <calibrateSensors+0x142>
    3da6:	90 93 84 03 	sts	0x0384, r25
    3daa:	80 93 83 03 	sts	0x0383, r24
    3dae:	80 91 ab 03 	lds	r24, 0x03AB
    3db2:	90 91 ac 03 	lds	r25, 0x03AC
    3db6:	a0 91 ad 03 	lds	r26, 0x03AD
    3dba:	b0 91 ae 03 	lds	r27, 0x03AE
    3dbe:	64 e0       	ldi	r22, 0x04	; 4
    3dc0:	b6 95       	lsr	r27
    3dc2:	a7 95       	ror	r26
    3dc4:	97 95       	ror	r25
    3dc6:	87 95       	ror	r24
    3dc8:	6a 95       	dec	r22
    3dca:	d1 f7       	brne	.-12     	; 0x3dc0 <calibrateSensors+0x168>
    3dcc:	90 93 86 03 	sts	0x0386, r25
    3dd0:	80 93 85 03 	sts	0x0385, r24
    3dd4:	80 91 b3 03 	lds	r24, 0x03B3
    3dd8:	90 91 b4 03 	lds	r25, 0x03B4
    3ddc:	a0 91 b5 03 	lds	r26, 0x03B5
    3de0:	b0 91 b6 03 	lds	r27, 0x03B6
    3de4:	54 e0       	ldi	r21, 0x04	; 4
    3de6:	b6 95       	lsr	r27
    3de8:	a7 95       	ror	r26
    3dea:	97 95       	ror	r25
    3dec:	87 95       	ror	r24
    3dee:	5a 95       	dec	r21
    3df0:	d1 f7       	brne	.-12     	; 0x3de6 <calibrateSensors+0x18e>
    3df2:	9c 01       	movw	r18, r24
    3df4:	80 91 b7 03 	lds	r24, 0x03B7
    3df8:	90 91 b8 03 	lds	r25, 0x03B8
    3dfc:	a0 91 b9 03 	lds	r26, 0x03B9
    3e00:	b0 91 ba 03 	lds	r27, 0x03BA
    3e04:	44 e0       	ldi	r20, 0x04	; 4
    3e06:	b6 95       	lsr	r27
    3e08:	a7 95       	ror	r26
    3e0a:	97 95       	ror	r25
    3e0c:	87 95       	ror	r24
    3e0e:	4a 95       	dec	r20
    3e10:	d1 f7       	brne	.-12     	; 0x3e06 <calibrateSensors+0x1ae>
    3e12:	bc 01       	movw	r22, r24
    3e14:	80 91 bb 03 	lds	r24, 0x03BB
    3e18:	90 91 bc 03 	lds	r25, 0x03BC
    3e1c:	a0 91 bd 03 	lds	r26, 0x03BD
    3e20:	b0 91 be 03 	lds	r27, 0x03BE
    3e24:	f4 e0       	ldi	r31, 0x04	; 4
    3e26:	b6 95       	lsr	r27
    3e28:	a7 95       	ror	r26
    3e2a:	97 95       	ror	r25
    3e2c:	87 95       	ror	r24
    3e2e:	fa 95       	dec	r31
    3e30:	d1 f7       	brne	.-12     	; 0x3e26 <calibrateSensors+0x1ce>
    3e32:	ac 01       	movw	r20, r24
    3e34:	80 91 af 03 	lds	r24, 0x03AF
    3e38:	90 91 b0 03 	lds	r25, 0x03B0
    3e3c:	a0 91 b1 03 	lds	r26, 0x03B1
    3e40:	b0 91 b2 03 	lds	r27, 0x03B2
    3e44:	e4 e0       	ldi	r30, 0x04	; 4
    3e46:	b6 95       	lsr	r27
    3e48:	a7 95       	ror	r26
    3e4a:	97 95       	ror	r25
    3e4c:	87 95       	ror	r24
    3e4e:	ea 95       	dec	r30
    3e50:	d1 f7       	brne	.-12     	; 0x3e46 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    3e52:	80 50       	subi	r24, 0x00	; 0
    3e54:	92 40       	sbci	r25, 0x02	; 2
    3e56:	90 93 88 03 	sts	0x0388, r25
    3e5a:	80 93 87 03 	sts	0x0387, r24
    3e5e:	20 50       	subi	r18, 0x00	; 0
    3e60:	32 40       	sbci	r19, 0x02	; 2
    3e62:	30 93 8a 03 	sts	0x038A, r19
    3e66:	20 93 89 03 	sts	0x0389, r18
    3e6a:	60 50       	subi	r22, 0x00	; 0
    3e6c:	72 40       	sbci	r23, 0x02	; 2
    3e6e:	70 93 8c 03 	sts	0x038C, r23
    3e72:	60 93 8b 03 	sts	0x038B, r22
    3e76:	40 50       	subi	r20, 0x00	; 0
    3e78:	52 40       	sbci	r21, 0x02	; 2
    3e7a:	50 93 8e 03 	sts	0x038E, r21
    3e7e:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    3e82:	80 91 18 04 	lds	r24, 0x0418
    3e86:	90 91 19 04 	lds	r25, 0x0419
    3e8a:	95 95       	asr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	95 95       	asr	r25
    3e90:	87 95       	ror	r24
    3e92:	95 95       	asr	r25
    3e94:	87 95       	ror	r24
    3e96:	95 95       	asr	r25
    3e98:	87 95       	ror	r24
    3e9a:	90 93 13 04 	sts	0x0413, r25
    3e9e:	80 93 12 04 	sts	0x0412, r24
			accOffsetY = accOffsetYSum>>4;
    3ea2:	80 91 1a 04 	lds	r24, 0x041A
    3ea6:	90 91 1b 04 	lds	r25, 0x041B
    3eaa:	95 95       	asr	r25
    3eac:	87 95       	ror	r24
    3eae:	95 95       	asr	r25
    3eb0:	87 95       	ror	r24
    3eb2:	95 95       	asr	r25
    3eb4:	87 95       	ror	r24
    3eb6:	95 95       	asr	r25
    3eb8:	87 95       	ror	r24
    3eba:	90 93 15 04 	sts	0x0415, r25
    3ebe:	80 93 14 04 	sts	0x0414, r24
			accOffsetZ = accOffsetZSum>>4;
    3ec2:	80 91 1c 04 	lds	r24, 0x041C
    3ec6:	90 91 1d 04 	lds	r25, 0x041D
    3eca:	95 95       	asr	r25
    3ecc:	87 95       	ror	r24
    3ece:	95 95       	asr	r25
    3ed0:	87 95       	ror	r24
    3ed2:	95 95       	asr	r25
    3ed4:	87 95       	ror	r24
    3ed6:	95 95       	asr	r25
    3ed8:	87 95       	ror	r24
    3eda:	90 93 17 04 	sts	0x0417, r25
    3ede:	80 93 16 04 	sts	0x0416, r24

			startCalibration = 0;
    3ee2:	10 92 58 04 	sts	0x0458, r1

		}

	}

	pwm_red = 255;
    3ee6:	8f ef       	ldi	r24, 0xFF	; 255
    3ee8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3eec:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3ef0:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3ef4:	0e 94 03 1c 	call	0x3806	; 0x3806 <updateRedLed>
	updateGreenLed(pwm_green);
    3ef8:	80 91 0d 02 	lds	r24, 0x020D
    3efc:	0e 94 17 1c 	call	0x382e	; 0x382e <updateGreenLed>
	updateBlueLed(pwm_blue);
    3f00:	80 91 0e 02 	lds	r24, 0x020E
    3f04:	0e 94 2b 1c 	call	0x3856	; 0x3856 <updateBlueLed>

}
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3f0e:	80 91 c6 03 	lds	r24, 0x03C6
    3f12:	88 23       	and	r24, r24
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <calibrateSensors+0x2c0>
    3f16:	86 c1       	rjmp	.+780    	; 0x4224 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3f18:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    3f1c:	21 15       	cp	r18, r1
    3f1e:	31 05       	cpc	r19, r1
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <calibrateSensors+0x2cc>
    3f22:	86 c1       	rjmp	.+780    	; 0x4230 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3f24:	80 91 5f 03 	lds	r24, 0x035F
    3f28:	90 91 60 03 	lds	r25, 0x0360
    3f2c:	aa 27       	eor	r26, r26
    3f2e:	97 fd       	sbrc	r25, 7
    3f30:	a0 95       	com	r26
    3f32:	ba 2f       	mov	r27, r26
    3f34:	40 91 8f 03 	lds	r20, 0x038F
    3f38:	50 91 90 03 	lds	r21, 0x0390
    3f3c:	60 91 91 03 	lds	r22, 0x0391
    3f40:	70 91 92 03 	lds	r23, 0x0392
    3f44:	84 0f       	add	r24, r20
    3f46:	95 1f       	adc	r25, r21
    3f48:	a6 1f       	adc	r26, r22
    3f4a:	b7 1f       	adc	r27, r23
    3f4c:	80 93 8f 03 	sts	0x038F, r24
    3f50:	90 93 90 03 	sts	0x0390, r25
    3f54:	a0 93 91 03 	sts	0x0391, r26
    3f58:	b0 93 92 03 	sts	0x0392, r27
    3f5c:	80 91 61 03 	lds	r24, 0x0361
    3f60:	90 91 62 03 	lds	r25, 0x0362
    3f64:	aa 27       	eor	r26, r26
    3f66:	97 fd       	sbrc	r25, 7
    3f68:	a0 95       	com	r26
    3f6a:	ba 2f       	mov	r27, r26
    3f6c:	40 91 93 03 	lds	r20, 0x0393
    3f70:	50 91 94 03 	lds	r21, 0x0394
    3f74:	60 91 95 03 	lds	r22, 0x0395
    3f78:	70 91 96 03 	lds	r23, 0x0396
    3f7c:	84 0f       	add	r24, r20
    3f7e:	95 1f       	adc	r25, r21
    3f80:	a6 1f       	adc	r26, r22
    3f82:	b7 1f       	adc	r27, r23
    3f84:	80 93 93 03 	sts	0x0393, r24
    3f88:	90 93 94 03 	sts	0x0394, r25
    3f8c:	a0 93 95 03 	sts	0x0395, r26
    3f90:	b0 93 96 03 	sts	0x0396, r27
    3f94:	80 91 63 03 	lds	r24, 0x0363
    3f98:	90 91 64 03 	lds	r25, 0x0364
    3f9c:	aa 27       	eor	r26, r26
    3f9e:	97 fd       	sbrc	r25, 7
    3fa0:	a0 95       	com	r26
    3fa2:	ba 2f       	mov	r27, r26
    3fa4:	40 91 97 03 	lds	r20, 0x0397
    3fa8:	50 91 98 03 	lds	r21, 0x0398
    3fac:	60 91 99 03 	lds	r22, 0x0399
    3fb0:	70 91 9a 03 	lds	r23, 0x039A
    3fb4:	84 0f       	add	r24, r20
    3fb6:	95 1f       	adc	r25, r21
    3fb8:	a6 1f       	adc	r26, r22
    3fba:	b7 1f       	adc	r27, r23
    3fbc:	80 93 97 03 	sts	0x0397, r24
    3fc0:	90 93 98 03 	sts	0x0398, r25
    3fc4:	a0 93 99 03 	sts	0x0399, r26
    3fc8:	b0 93 9a 03 	sts	0x039A, r27
    3fcc:	80 91 65 03 	lds	r24, 0x0365
    3fd0:	90 91 66 03 	lds	r25, 0x0366
    3fd4:	aa 27       	eor	r26, r26
    3fd6:	97 fd       	sbrc	r25, 7
    3fd8:	a0 95       	com	r26
    3fda:	ba 2f       	mov	r27, r26
    3fdc:	40 91 9b 03 	lds	r20, 0x039B
    3fe0:	50 91 9c 03 	lds	r21, 0x039C
    3fe4:	60 91 9d 03 	lds	r22, 0x039D
    3fe8:	70 91 9e 03 	lds	r23, 0x039E
    3fec:	84 0f       	add	r24, r20
    3fee:	95 1f       	adc	r25, r21
    3ff0:	a6 1f       	adc	r26, r22
    3ff2:	b7 1f       	adc	r27, r23
    3ff4:	80 93 9b 03 	sts	0x039B, r24
    3ff8:	90 93 9c 03 	sts	0x039C, r25
    3ffc:	a0 93 9d 03 	sts	0x039D, r26
    4000:	b0 93 9e 03 	sts	0x039E, r27
    4004:	80 91 67 03 	lds	r24, 0x0367
    4008:	90 91 68 03 	lds	r25, 0x0368
    400c:	aa 27       	eor	r26, r26
    400e:	97 fd       	sbrc	r25, 7
    4010:	a0 95       	com	r26
    4012:	ba 2f       	mov	r27, r26
    4014:	40 91 9f 03 	lds	r20, 0x039F
    4018:	50 91 a0 03 	lds	r21, 0x03A0
    401c:	60 91 a1 03 	lds	r22, 0x03A1
    4020:	70 91 a2 03 	lds	r23, 0x03A2
    4024:	84 0f       	add	r24, r20
    4026:	95 1f       	adc	r25, r21
    4028:	a6 1f       	adc	r26, r22
    402a:	b7 1f       	adc	r27, r23
    402c:	80 93 9f 03 	sts	0x039F, r24
    4030:	90 93 a0 03 	sts	0x03A0, r25
    4034:	a0 93 a1 03 	sts	0x03A1, r26
    4038:	b0 93 a2 03 	sts	0x03A2, r27
    403c:	80 91 69 03 	lds	r24, 0x0369
    4040:	90 91 6a 03 	lds	r25, 0x036A
    4044:	aa 27       	eor	r26, r26
    4046:	97 fd       	sbrc	r25, 7
    4048:	a0 95       	com	r26
    404a:	ba 2f       	mov	r27, r26
    404c:	40 91 a3 03 	lds	r20, 0x03A3
    4050:	50 91 a4 03 	lds	r21, 0x03A4
    4054:	60 91 a5 03 	lds	r22, 0x03A5
    4058:	70 91 a6 03 	lds	r23, 0x03A6
    405c:	84 0f       	add	r24, r20
    405e:	95 1f       	adc	r25, r21
    4060:	a6 1f       	adc	r26, r22
    4062:	b7 1f       	adc	r27, r23
    4064:	80 93 a3 03 	sts	0x03A3, r24
    4068:	90 93 a4 03 	sts	0x03A4, r25
    406c:	a0 93 a5 03 	sts	0x03A5, r26
    4070:	b0 93 a6 03 	sts	0x03A6, r27
    4074:	80 91 6b 03 	lds	r24, 0x036B
    4078:	90 91 6c 03 	lds	r25, 0x036C
    407c:	aa 27       	eor	r26, r26
    407e:	97 fd       	sbrc	r25, 7
    4080:	a0 95       	com	r26
    4082:	ba 2f       	mov	r27, r26
    4084:	40 91 a7 03 	lds	r20, 0x03A7
    4088:	50 91 a8 03 	lds	r21, 0x03A8
    408c:	60 91 a9 03 	lds	r22, 0x03A9
    4090:	70 91 aa 03 	lds	r23, 0x03AA
    4094:	84 0f       	add	r24, r20
    4096:	95 1f       	adc	r25, r21
    4098:	a6 1f       	adc	r26, r22
    409a:	b7 1f       	adc	r27, r23
    409c:	80 93 a7 03 	sts	0x03A7, r24
    40a0:	90 93 a8 03 	sts	0x03A8, r25
    40a4:	a0 93 a9 03 	sts	0x03A9, r26
    40a8:	b0 93 aa 03 	sts	0x03AA, r27
    40ac:	80 91 6d 03 	lds	r24, 0x036D
    40b0:	90 91 6e 03 	lds	r25, 0x036E
    40b4:	aa 27       	eor	r26, r26
    40b6:	97 fd       	sbrc	r25, 7
    40b8:	a0 95       	com	r26
    40ba:	ba 2f       	mov	r27, r26
    40bc:	40 91 ab 03 	lds	r20, 0x03AB
    40c0:	50 91 ac 03 	lds	r21, 0x03AC
    40c4:	60 91 ad 03 	lds	r22, 0x03AD
    40c8:	70 91 ae 03 	lds	r23, 0x03AE
    40cc:	84 0f       	add	r24, r20
    40ce:	95 1f       	adc	r25, r21
    40d0:	a6 1f       	adc	r26, r22
    40d2:	b7 1f       	adc	r27, r23
    40d4:	80 93 ab 03 	sts	0x03AB, r24
    40d8:	90 93 ac 03 	sts	0x03AC, r25
    40dc:	a0 93 ad 03 	sts	0x03AD, r26
    40e0:	b0 93 ae 03 	sts	0x03AE, r27
    40e4:	80 91 6f 03 	lds	r24, 0x036F
    40e8:	90 91 70 03 	lds	r25, 0x0370
    40ec:	aa 27       	eor	r26, r26
    40ee:	97 fd       	sbrc	r25, 7
    40f0:	a0 95       	com	r26
    40f2:	ba 2f       	mov	r27, r26
    40f4:	40 91 af 03 	lds	r20, 0x03AF
    40f8:	50 91 b0 03 	lds	r21, 0x03B0
    40fc:	60 91 b1 03 	lds	r22, 0x03B1
    4100:	70 91 b2 03 	lds	r23, 0x03B2
    4104:	84 0f       	add	r24, r20
    4106:	95 1f       	adc	r25, r21
    4108:	a6 1f       	adc	r26, r22
    410a:	b7 1f       	adc	r27, r23
    410c:	80 93 af 03 	sts	0x03AF, r24
    4110:	90 93 b0 03 	sts	0x03B0, r25
    4114:	a0 93 b1 03 	sts	0x03B1, r26
    4118:	b0 93 b2 03 	sts	0x03B2, r27
    411c:	80 91 71 03 	lds	r24, 0x0371
    4120:	90 91 72 03 	lds	r25, 0x0372
    4124:	aa 27       	eor	r26, r26
    4126:	97 fd       	sbrc	r25, 7
    4128:	a0 95       	com	r26
    412a:	ba 2f       	mov	r27, r26
    412c:	40 91 b3 03 	lds	r20, 0x03B3
    4130:	50 91 b4 03 	lds	r21, 0x03B4
    4134:	60 91 b5 03 	lds	r22, 0x03B5
    4138:	70 91 b6 03 	lds	r23, 0x03B6
    413c:	84 0f       	add	r24, r20
    413e:	95 1f       	adc	r25, r21
    4140:	a6 1f       	adc	r26, r22
    4142:	b7 1f       	adc	r27, r23
    4144:	80 93 b3 03 	sts	0x03B3, r24
    4148:	90 93 b4 03 	sts	0x03B4, r25
    414c:	a0 93 b5 03 	sts	0x03B5, r26
    4150:	b0 93 b6 03 	sts	0x03B6, r27
    4154:	80 91 73 03 	lds	r24, 0x0373
    4158:	90 91 74 03 	lds	r25, 0x0374
    415c:	aa 27       	eor	r26, r26
    415e:	97 fd       	sbrc	r25, 7
    4160:	a0 95       	com	r26
    4162:	ba 2f       	mov	r27, r26
    4164:	40 91 b7 03 	lds	r20, 0x03B7
    4168:	50 91 b8 03 	lds	r21, 0x03B8
    416c:	60 91 b9 03 	lds	r22, 0x03B9
    4170:	70 91 ba 03 	lds	r23, 0x03BA
    4174:	84 0f       	add	r24, r20
    4176:	95 1f       	adc	r25, r21
    4178:	a6 1f       	adc	r26, r22
    417a:	b7 1f       	adc	r27, r23
    417c:	80 93 b7 03 	sts	0x03B7, r24
    4180:	90 93 b8 03 	sts	0x03B8, r25
    4184:	a0 93 b9 03 	sts	0x03B9, r26
    4188:	b0 93 ba 03 	sts	0x03BA, r27
    418c:	80 91 75 03 	lds	r24, 0x0375
    4190:	90 91 76 03 	lds	r25, 0x0376
    4194:	aa 27       	eor	r26, r26
    4196:	97 fd       	sbrc	r25, 7
    4198:	a0 95       	com	r26
    419a:	ba 2f       	mov	r27, r26
    419c:	40 91 bb 03 	lds	r20, 0x03BB
    41a0:	50 91 bc 03 	lds	r21, 0x03BC
    41a4:	60 91 bd 03 	lds	r22, 0x03BD
    41a8:	70 91 be 03 	lds	r23, 0x03BE
    41ac:	84 0f       	add	r24, r20
    41ae:	95 1f       	adc	r25, r21
    41b0:	a6 1f       	adc	r26, r22
    41b2:	b7 1f       	adc	r27, r23
    41b4:	80 93 bb 03 	sts	0x03BB, r24
    41b8:	90 93 bc 03 	sts	0x03BC, r25
    41bc:	a0 93 bd 03 	sts	0x03BD, r26
    41c0:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    41c4:	80 91 18 04 	lds	r24, 0x0418
    41c8:	90 91 19 04 	lds	r25, 0x0419
    41cc:	40 91 0c 04 	lds	r20, 0x040C
    41d0:	50 91 0d 04 	lds	r21, 0x040D
    41d4:	84 0f       	add	r24, r20
    41d6:	95 1f       	adc	r25, r21
    41d8:	90 93 19 04 	sts	0x0419, r25
    41dc:	80 93 18 04 	sts	0x0418, r24
				accOffsetYSum += accY;
    41e0:	80 91 1a 04 	lds	r24, 0x041A
    41e4:	90 91 1b 04 	lds	r25, 0x041B
    41e8:	40 91 0e 04 	lds	r20, 0x040E
    41ec:	50 91 0f 04 	lds	r21, 0x040F
    41f0:	84 0f       	add	r24, r20
    41f2:	95 1f       	adc	r25, r21
    41f4:	90 93 1b 04 	sts	0x041B, r25
    41f8:	80 93 1a 04 	sts	0x041A, r24
				accOffsetZSum += accZ;
    41fc:	80 91 1c 04 	lds	r24, 0x041C
    4200:	90 91 1d 04 	lds	r25, 0x041D
    4204:	40 91 10 04 	lds	r20, 0x0410
    4208:	50 91 11 04 	lds	r21, 0x0411
    420c:	84 0f       	add	r24, r20
    420e:	95 1f       	adc	r25, r21
    4210:	90 93 1d 04 	sts	0x041D, r25
    4214:	80 93 1c 04 	sts	0x041C, r24

				calibrationCycle++;
    4218:	2f 5f       	subi	r18, 0xFF	; 255
    421a:	3f 4f       	sbci	r19, 0xFF	; 255
    421c:	30 93 27 04 	sts	0x0427, r19
    4220:	20 93 26 04 	sts	0x0426, r18
    4224:	80 91 58 04 	lds	r24, 0x0458
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    4228:	88 23       	and	r24, r24
    422a:	09 f0       	breq	.+2      	; 0x422e <calibrateSensors+0x5d6>
    422c:	31 cd       	rjmp	.-1438   	; 0x3c90 <calibrateSensors+0x38>
    422e:	5b ce       	rjmp	.-842    	; 0x3ee6 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4230:	10 92 8f 03 	sts	0x038F, r1
    4234:	10 92 90 03 	sts	0x0390, r1
    4238:	10 92 91 03 	sts	0x0391, r1
    423c:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4240:	10 92 78 03 	sts	0x0378, r1
    4244:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4248:	10 92 93 03 	sts	0x0393, r1
    424c:	10 92 94 03 	sts	0x0394, r1
    4250:	10 92 95 03 	sts	0x0395, r1
    4254:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4258:	10 92 7a 03 	sts	0x037A, r1
    425c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4260:	10 92 97 03 	sts	0x0397, r1
    4264:	10 92 98 03 	sts	0x0398, r1
    4268:	10 92 99 03 	sts	0x0399, r1
    426c:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4270:	10 92 7c 03 	sts	0x037C, r1
    4274:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4278:	10 92 9b 03 	sts	0x039B, r1
    427c:	10 92 9c 03 	sts	0x039C, r1
    4280:	10 92 9d 03 	sts	0x039D, r1
    4284:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    4288:	10 92 7e 03 	sts	0x037E, r1
    428c:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4290:	10 92 9f 03 	sts	0x039F, r1
    4294:	10 92 a0 03 	sts	0x03A0, r1
    4298:	10 92 a1 03 	sts	0x03A1, r1
    429c:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    42a0:	10 92 80 03 	sts	0x0380, r1
    42a4:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    42a8:	10 92 a3 03 	sts	0x03A3, r1
    42ac:	10 92 a4 03 	sts	0x03A4, r1
    42b0:	10 92 a5 03 	sts	0x03A5, r1
    42b4:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    42b8:	10 92 82 03 	sts	0x0382, r1
    42bc:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    42c0:	10 92 a7 03 	sts	0x03A7, r1
    42c4:	10 92 a8 03 	sts	0x03A8, r1
    42c8:	10 92 a9 03 	sts	0x03A9, r1
    42cc:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    42d0:	10 92 84 03 	sts	0x0384, r1
    42d4:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    42d8:	10 92 ab 03 	sts	0x03AB, r1
    42dc:	10 92 ac 03 	sts	0x03AC, r1
    42e0:	10 92 ad 03 	sts	0x03AD, r1
    42e4:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    42e8:	10 92 86 03 	sts	0x0386, r1
    42ec:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    42f0:	10 92 af 03 	sts	0x03AF, r1
    42f4:	10 92 b0 03 	sts	0x03B0, r1
    42f8:	10 92 b1 03 	sts	0x03B1, r1
    42fc:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4300:	10 92 88 03 	sts	0x0388, r1
    4304:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4308:	10 92 b3 03 	sts	0x03B3, r1
    430c:	10 92 b4 03 	sts	0x03B4, r1
    4310:	10 92 b5 03 	sts	0x03B5, r1
    4314:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    4318:	10 92 8a 03 	sts	0x038A, r1
    431c:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4320:	10 92 b7 03 	sts	0x03B7, r1
    4324:	10 92 b8 03 	sts	0x03B8, r1
    4328:	10 92 b9 03 	sts	0x03B9, r1
    432c:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4330:	10 92 8c 03 	sts	0x038C, r1
    4334:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4338:	10 92 bb 03 	sts	0x03BB, r1
    433c:	10 92 bc 03 	sts	0x03BC, r1
    4340:	10 92 bd 03 	sts	0x03BD, r1
    4344:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4348:	10 92 8e 03 	sts	0x038E, r1
    434c:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4350:	10 92 19 04 	sts	0x0419, r1
    4354:	10 92 18 04 	sts	0x0418, r1
					accOffsetYSum = 0;
    4358:	10 92 1b 04 	sts	0x041B, r1
    435c:	10 92 1a 04 	sts	0x041A, r1
					accOffsetZSum = 0;
    4360:	10 92 1d 04 	sts	0x041D, r1
    4364:	10 92 1c 04 	sts	0x041C, r1

					calibrationCycle++;
    4368:	d0 93 27 04 	sts	0x0427, r29
    436c:	c0 93 26 04 	sts	0x0426, r28
    4370:	80 91 58 04 	lds	r24, 0x0458

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4374:	59 cf       	rjmp	.-334    	; 0x4228 <calibrateSensors+0x5d0>

00004376 <computeAngle>:

	}

}

void computeAngle() {
    4376:	ef 92       	push	r14
    4378:	ff 92       	push	r15
    437a:	0f 93       	push	r16
    437c:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    437e:	80 91 10 04 	lds	r24, 0x0410
    4382:	90 91 11 04 	lds	r25, 0x0411
    4386:	97 fd       	sbrc	r25, 7
    4388:	5b c0       	rjmp	.+182    	; 0x4440 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    438a:	80 31       	cpi	r24, 0x10	; 16
    438c:	91 05       	cpc	r25, r1
    438e:	08 f0       	brcs	.+2      	; 0x4392 <computeAngle+0x1c>
    4390:	42 c0       	rjmp	.+132    	; 0x4416 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    4398:	90 91 14 02 	lds	r25, 0x0214
    439c:	98 17       	cp	r25, r24
    439e:	09 f4       	brne	.+2      	; 0x43a2 <computeAngle+0x2c>
    43a0:	42 c0       	rjmp	.+132    	; 0x4426 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    43a2:	10 92 20 04 	sts	0x0420, r1
	}
	prevPosition = currPosition;
    43a6:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    43aa:	60 91 0c 04 	lds	r22, 0x040C
    43ae:	70 91 0d 04 	lds	r23, 0x040D
    43b2:	88 27       	eor	r24, r24
    43b4:	77 fd       	sbrc	r23, 7
    43b6:	80 95       	com	r24
    43b8:	98 2f       	mov	r25, r24
    43ba:	0e 94 23 23 	call	0x4646	; 0x4646 <__floatsisf>
    43be:	7b 01       	movw	r14, r22
    43c0:	8c 01       	movw	r16, r24
    43c2:	60 91 0e 04 	lds	r22, 0x040E
    43c6:	70 91 0f 04 	lds	r23, 0x040F
    43ca:	88 27       	eor	r24, r24
    43cc:	77 fd       	sbrc	r23, 7
    43ce:	80 95       	com	r24
    43d0:	98 2f       	mov	r25, r24
    43d2:	0e 94 23 23 	call	0x4646	; 0x4646 <__floatsisf>
    43d6:	9b 01       	movw	r18, r22
    43d8:	ac 01       	movw	r20, r24
    43da:	c8 01       	movw	r24, r16
    43dc:	b7 01       	movw	r22, r14
    43de:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <atan2>
    43e2:	21 ee       	ldi	r18, 0xE1	; 225
    43e4:	3e e2       	ldi	r19, 0x2E	; 46
    43e6:	45 e6       	ldi	r20, 0x65	; 101
    43e8:	52 e4       	ldi	r21, 0x42	; 66
    43ea:	0e 94 24 22 	call	0x4448	; 0x4448 <__mulsf3>
    43ee:	0e 94 81 23 	call	0x4702	; 0x4702 <__fixsfsi>
    43f2:	9b 01       	movw	r18, r22
    43f4:	70 93 1f 04 	sts	0x041F, r23
    43f8:	60 93 1e 04 	sts	0x041E, r22

	if(currentAngle < 0) {
    43fc:	77 ff       	sbrs	r23, 7
    43fe:	06 c0       	rjmp	.+12     	; 0x440c <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    4400:	28 59       	subi	r18, 0x98	; 152
    4402:	3e 4f       	sbci	r19, 0xFE	; 254
    4404:	30 93 1f 04 	sts	0x041F, r19
    4408:	20 93 1e 04 	sts	0x041E, r18
	}

}
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
    4410:	ff 90       	pop	r15
    4412:	ef 90       	pop	r14
    4414:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    4416:	10 92 15 02 	sts	0x0215, r1
    441a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    441c:	90 91 14 02 	lds	r25, 0x0214
    4420:	98 17       	cp	r25, r24
    4422:	09 f0       	breq	.+2      	; 0x4426 <computeAngle+0xb0>
    4424:	be cf       	rjmp	.-132    	; 0x43a2 <computeAngle+0x2c>
		timesInSamePos++;
    4426:	90 91 20 04 	lds	r25, 0x0420
    442a:	9f 5f       	subi	r25, 0xFF	; 255
    442c:	90 93 20 04 	sts	0x0420, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    4430:	95 30       	cpi	r25, 0x05	; 5
    4432:	08 f4       	brcc	.+2      	; 0x4436 <computeAngle+0xc0>
    4434:	b8 cf       	rjmp	.-144    	; 0x43a6 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4436:	10 92 20 04 	sts	0x0420, r1
			robotPosition = currPosition;
    443a:	80 93 16 02 	sts	0x0216, r24
    443e:	b3 cf       	rjmp	.-154    	; 0x43a6 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    4440:	90 95       	com	r25
    4442:	81 95       	neg	r24
    4444:	9f 4f       	sbci	r25, 0xFF	; 255
    4446:	a1 cf       	rjmp	.-190    	; 0x438a <computeAngle+0x14>

00004448 <__mulsf3>:
    4448:	a0 e2       	ldi	r26, 0x20	; 32
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	ea e2       	ldi	r30, 0x2A	; 42
    444e:	f2 e2       	ldi	r31, 0x22	; 34
    4450:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <__prologue_saves__+0x4>
    4454:	69 83       	std	Y+1, r22	; 0x01
    4456:	7a 83       	std	Y+2, r23	; 0x02
    4458:	8b 83       	std	Y+3, r24	; 0x03
    445a:	9c 83       	std	Y+4, r25	; 0x04
    445c:	2d 83       	std	Y+5, r18	; 0x05
    445e:	3e 83       	std	Y+6, r19	; 0x06
    4460:	4f 83       	std	Y+7, r20	; 0x07
    4462:	58 87       	std	Y+8, r21	; 0x08
    4464:	99 e0       	ldi	r25, 0x09	; 9
    4466:	e9 2e       	mov	r14, r25
    4468:	f1 2c       	mov	r15, r1
    446a:	ec 0e       	add	r14, r28
    446c:	fd 1e       	adc	r15, r29
    446e:	b7 01       	movw	r22, r14
    4470:	ce 01       	movw	r24, r28
    4472:	01 96       	adiw	r24, 0x01	; 1
    4474:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__unpack_f>
    4478:	8e 01       	movw	r16, r28
    447a:	0f 5e       	subi	r16, 0xEF	; 239
    447c:	1f 4f       	sbci	r17, 0xFF	; 255
    447e:	b8 01       	movw	r22, r16
    4480:	ce 01       	movw	r24, r28
    4482:	05 96       	adiw	r24, 0x05	; 5
    4484:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__unpack_f>
    4488:	99 85       	ldd	r25, Y+9	; 0x09
    448a:	92 30       	cpi	r25, 0x02	; 2
    448c:	88 f0       	brcs	.+34     	; 0x44b0 <__mulsf3+0x68>
    448e:	89 89       	ldd	r24, Y+17	; 0x11
    4490:	82 30       	cpi	r24, 0x02	; 2
    4492:	c0 f0       	brcs	.+48     	; 0x44c4 <__mulsf3+0x7c>
    4494:	94 30       	cpi	r25, 0x04	; 4
    4496:	19 f4       	brne	.+6      	; 0x449e <__mulsf3+0x56>
    4498:	82 30       	cpi	r24, 0x02	; 2
    449a:	29 f0       	breq	.+10     	; 0x44a6 <__mulsf3+0x5e>
    449c:	09 c0       	rjmp	.+18     	; 0x44b0 <__mulsf3+0x68>
    449e:	84 30       	cpi	r24, 0x04	; 4
    44a0:	29 f4       	brne	.+10     	; 0x44ac <__mulsf3+0x64>
    44a2:	92 30       	cpi	r25, 0x02	; 2
    44a4:	79 f4       	brne	.+30     	; 0x44c4 <__mulsf3+0x7c>
    44a6:	67 e1       	ldi	r22, 0x17	; 23
    44a8:	72 e0       	ldi	r23, 0x02	; 2
    44aa:	c6 c0       	rjmp	.+396    	; 0x4638 <__mulsf3+0x1f0>
    44ac:	92 30       	cpi	r25, 0x02	; 2
    44ae:	41 f4       	brne	.+16     	; 0x44c0 <__mulsf3+0x78>
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b4:	8a 89       	ldd	r24, Y+18	; 0x12
    44b6:	98 13       	cpse	r25, r24
    44b8:	21 e0       	ldi	r18, 0x01	; 1
    44ba:	2a 87       	std	Y+10, r18	; 0x0a
    44bc:	b7 01       	movw	r22, r14
    44be:	bc c0       	rjmp	.+376    	; 0x4638 <__mulsf3+0x1f0>
    44c0:	82 30       	cpi	r24, 0x02	; 2
    44c2:	41 f4       	brne	.+16     	; 0x44d4 <__mulsf3+0x8c>
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c8:	8a 89       	ldd	r24, Y+18	; 0x12
    44ca:	98 13       	cpse	r25, r24
    44cc:	21 e0       	ldi	r18, 0x01	; 1
    44ce:	2a 8b       	std	Y+18, r18	; 0x12
    44d0:	b8 01       	movw	r22, r16
    44d2:	b2 c0       	rjmp	.+356    	; 0x4638 <__mulsf3+0x1f0>
    44d4:	cd 84       	ldd	r12, Y+13	; 0x0d
    44d6:	de 84       	ldd	r13, Y+14	; 0x0e
    44d8:	ef 84       	ldd	r14, Y+15	; 0x0f
    44da:	f8 88       	ldd	r15, Y+16	; 0x10
    44dc:	0d 89       	ldd	r16, Y+21	; 0x15
    44de:	1e 89       	ldd	r17, Y+22	; 0x16
    44e0:	2f 89       	ldd	r18, Y+23	; 0x17
    44e2:	38 8d       	ldd	r19, Y+24	; 0x18
    44e4:	88 24       	eor	r8, r8
    44e6:	99 24       	eor	r9, r9
    44e8:	54 01       	movw	r10, r8
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	60 e0       	ldi	r22, 0x00	; 0
    44f0:	70 e0       	ldi	r23, 0x00	; 0
    44f2:	44 24       	eor	r4, r4
    44f4:	55 24       	eor	r5, r5
    44f6:	32 01       	movw	r6, r4
    44f8:	e0 e0       	ldi	r30, 0x00	; 0
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	c6 01       	movw	r24, r12
    44fe:	81 70       	andi	r24, 0x01	; 1
    4500:	90 70       	andi	r25, 0x00	; 0
    4502:	89 2b       	or	r24, r25
    4504:	d9 f0       	breq	.+54     	; 0x453c <__mulsf3+0xf4>
    4506:	80 0e       	add	r8, r16
    4508:	91 1e       	adc	r9, r17
    450a:	a2 1e       	adc	r10, r18
    450c:	b3 1e       	adc	r11, r19
    450e:	db 01       	movw	r26, r22
    4510:	ca 01       	movw	r24, r20
    4512:	84 0d       	add	r24, r4
    4514:	95 1d       	adc	r25, r5
    4516:	a6 1d       	adc	r26, r6
    4518:	b7 1d       	adc	r27, r7
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	50 e0       	ldi	r21, 0x00	; 0
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	80 16       	cp	r8, r16
    4524:	91 06       	cpc	r9, r17
    4526:	a2 06       	cpc	r10, r18
    4528:	b3 06       	cpc	r11, r19
    452a:	20 f4       	brcc	.+8      	; 0x4534 <__mulsf3+0xec>
    452c:	41 e0       	ldi	r20, 0x01	; 1
    452e:	50 e0       	ldi	r21, 0x00	; 0
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	70 e0       	ldi	r23, 0x00	; 0
    4534:	48 0f       	add	r20, r24
    4536:	59 1f       	adc	r21, r25
    4538:	6a 1f       	adc	r22, r26
    453a:	7b 1f       	adc	r23, r27
    453c:	44 0c       	add	r4, r4
    453e:	55 1c       	adc	r5, r5
    4540:	66 1c       	adc	r6, r6
    4542:	77 1c       	adc	r7, r7
    4544:	37 ff       	sbrs	r19, 7
    4546:	08 c0       	rjmp	.+16     	; 0x4558 <__mulsf3+0x110>
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	a0 e0       	ldi	r26, 0x00	; 0
    454e:	b0 e0       	ldi	r27, 0x00	; 0
    4550:	48 2a       	or	r4, r24
    4552:	59 2a       	or	r5, r25
    4554:	6a 2a       	or	r6, r26
    4556:	7b 2a       	or	r7, r27
    4558:	31 96       	adiw	r30, 0x01	; 1
    455a:	e0 32       	cpi	r30, 0x20	; 32
    455c:	f1 05       	cpc	r31, r1
    455e:	49 f0       	breq	.+18     	; 0x4572 <__mulsf3+0x12a>
    4560:	00 0f       	add	r16, r16
    4562:	11 1f       	adc	r17, r17
    4564:	22 1f       	adc	r18, r18
    4566:	33 1f       	adc	r19, r19
    4568:	f6 94       	lsr	r15
    456a:	e7 94       	ror	r14
    456c:	d7 94       	ror	r13
    456e:	c7 94       	ror	r12
    4570:	c5 cf       	rjmp	.-118    	; 0x44fc <__mulsf3+0xb4>
    4572:	8b 89       	ldd	r24, Y+19	; 0x13
    4574:	9c 89       	ldd	r25, Y+20	; 0x14
    4576:	2b 85       	ldd	r18, Y+11	; 0x0b
    4578:	3c 85       	ldd	r19, Y+12	; 0x0c
    457a:	82 0f       	add	r24, r18
    457c:	93 1f       	adc	r25, r19
    457e:	02 96       	adiw	r24, 0x02	; 2
    4580:	9c 8f       	std	Y+28, r25	; 0x1c
    4582:	8b 8f       	std	Y+27, r24	; 0x1b
    4584:	1a 8e       	std	Y+26, r1	; 0x1a
    4586:	9a 85       	ldd	r25, Y+10	; 0x0a
    4588:	8a 89       	ldd	r24, Y+18	; 0x12
    458a:	98 17       	cp	r25, r24
    458c:	11 f0       	breq	.+4      	; 0x4592 <__mulsf3+0x14a>
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	8a 8f       	std	Y+26, r24	; 0x1a
    4592:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4594:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4596:	17 c0       	rjmp	.+46     	; 0x45c6 <__mulsf3+0x17e>
    4598:	ca 01       	movw	r24, r20
    459a:	81 70       	andi	r24, 0x01	; 1
    459c:	90 70       	andi	r25, 0x00	; 0
    459e:	89 2b       	or	r24, r25
    45a0:	61 f0       	breq	.+24     	; 0x45ba <__mulsf3+0x172>
    45a2:	b6 94       	lsr	r11
    45a4:	a7 94       	ror	r10
    45a6:	97 94       	ror	r9
    45a8:	87 94       	ror	r8
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	a0 e0       	ldi	r26, 0x00	; 0
    45b0:	b0 e8       	ldi	r27, 0x80	; 128
    45b2:	88 2a       	or	r8, r24
    45b4:	99 2a       	or	r9, r25
    45b6:	aa 2a       	or	r10, r26
    45b8:	bb 2a       	or	r11, r27
    45ba:	76 95       	lsr	r23
    45bc:	67 95       	ror	r22
    45be:	57 95       	ror	r21
    45c0:	47 95       	ror	r20
    45c2:	2f 5f       	subi	r18, 0xFF	; 255
    45c4:	3f 4f       	sbci	r19, 0xFF	; 255
    45c6:	77 fd       	sbrc	r23, 7
    45c8:	e7 cf       	rjmp	.-50     	; 0x4598 <__mulsf3+0x150>
    45ca:	c9 01       	movw	r24, r18
    45cc:	0b c0       	rjmp	.+22     	; 0x45e4 <__mulsf3+0x19c>
    45ce:	44 0f       	add	r20, r20
    45d0:	55 1f       	adc	r21, r21
    45d2:	66 1f       	adc	r22, r22
    45d4:	77 1f       	adc	r23, r23
    45d6:	b7 fc       	sbrc	r11, 7
    45d8:	41 60       	ori	r20, 0x01	; 1
    45da:	88 0c       	add	r8, r8
    45dc:	99 1c       	adc	r9, r9
    45de:	aa 1c       	adc	r10, r10
    45e0:	bb 1c       	adc	r11, r11
    45e2:	01 97       	sbiw	r24, 0x01	; 1
    45e4:	40 30       	cpi	r20, 0x00	; 0
    45e6:	a0 e0       	ldi	r26, 0x00	; 0
    45e8:	5a 07       	cpc	r21, r26
    45ea:	a0 e0       	ldi	r26, 0x00	; 0
    45ec:	6a 07       	cpc	r22, r26
    45ee:	a0 e4       	ldi	r26, 0x40	; 64
    45f0:	7a 07       	cpc	r23, r26
    45f2:	68 f3       	brcs	.-38     	; 0x45ce <__mulsf3+0x186>
    45f4:	9c 8f       	std	Y+28, r25	; 0x1c
    45f6:	8b 8f       	std	Y+27, r24	; 0x1b
    45f8:	db 01       	movw	r26, r22
    45fa:	ca 01       	movw	r24, r20
    45fc:	8f 77       	andi	r24, 0x7F	; 127
    45fe:	90 70       	andi	r25, 0x00	; 0
    4600:	a0 70       	andi	r26, 0x00	; 0
    4602:	b0 70       	andi	r27, 0x00	; 0
    4604:	80 34       	cpi	r24, 0x40	; 64
    4606:	91 05       	cpc	r25, r1
    4608:	a1 05       	cpc	r26, r1
    460a:	b1 05       	cpc	r27, r1
    460c:	61 f4       	brne	.+24     	; 0x4626 <__mulsf3+0x1de>
    460e:	47 fd       	sbrc	r20, 7
    4610:	0a c0       	rjmp	.+20     	; 0x4626 <__mulsf3+0x1de>
    4612:	81 14       	cp	r8, r1
    4614:	91 04       	cpc	r9, r1
    4616:	a1 04       	cpc	r10, r1
    4618:	b1 04       	cpc	r11, r1
    461a:	29 f0       	breq	.+10     	; 0x4626 <__mulsf3+0x1de>
    461c:	40 5c       	subi	r20, 0xC0	; 192
    461e:	5f 4f       	sbci	r21, 0xFF	; 255
    4620:	6f 4f       	sbci	r22, 0xFF	; 255
    4622:	7f 4f       	sbci	r23, 0xFF	; 255
    4624:	40 78       	andi	r20, 0x80	; 128
    4626:	4d 8f       	std	Y+29, r20	; 0x1d
    4628:	5e 8f       	std	Y+30, r21	; 0x1e
    462a:	6f 8f       	std	Y+31, r22	; 0x1f
    462c:	78 a3       	std	Y+32, r23	; 0x20
    462e:	83 e0       	ldi	r24, 0x03	; 3
    4630:	89 8f       	std	Y+25, r24	; 0x19
    4632:	be 01       	movw	r22, r28
    4634:	67 5e       	subi	r22, 0xE7	; 231
    4636:	7f 4f       	sbci	r23, 0xFF	; 255
    4638:	cb 01       	movw	r24, r22
    463a:	0e 94 21 24 	call	0x4842	; 0x4842 <__pack_f>
    463e:	e0 e1       	ldi	r30, 0x10	; 16
    4640:	a0 96       	adiw	r28, 0x20	; 32
    4642:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__epilogue_restores__+0x4>

00004646 <__floatsisf>:
    4646:	a8 e0       	ldi	r26, 0x08	; 8
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	e9 e2       	ldi	r30, 0x29	; 41
    464c:	f3 e2       	ldi	r31, 0x23	; 35
    464e:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <__prologue_saves__+0x12>
    4652:	9b 01       	movw	r18, r22
    4654:	ac 01       	movw	r20, r24
    4656:	83 e0       	ldi	r24, 0x03	; 3
    4658:	89 83       	std	Y+1, r24	; 0x01
    465a:	da 01       	movw	r26, r20
    465c:	c9 01       	movw	r24, r18
    465e:	88 27       	eor	r24, r24
    4660:	b7 fd       	sbrc	r27, 7
    4662:	83 95       	inc	r24
    4664:	99 27       	eor	r25, r25
    4666:	aa 27       	eor	r26, r26
    4668:	bb 27       	eor	r27, r27
    466a:	b8 2e       	mov	r11, r24
    466c:	21 15       	cp	r18, r1
    466e:	31 05       	cpc	r19, r1
    4670:	41 05       	cpc	r20, r1
    4672:	51 05       	cpc	r21, r1
    4674:	19 f4       	brne	.+6      	; 0x467c <__floatsisf+0x36>
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	89 83       	std	Y+1, r24	; 0x01
    467a:	3a c0       	rjmp	.+116    	; 0x46f0 <__floatsisf+0xaa>
    467c:	88 23       	and	r24, r24
    467e:	a9 f0       	breq	.+42     	; 0x46aa <__floatsisf+0x64>
    4680:	20 30       	cpi	r18, 0x00	; 0
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	38 07       	cpc	r19, r24
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	48 07       	cpc	r20, r24
    468a:	80 e8       	ldi	r24, 0x80	; 128
    468c:	58 07       	cpc	r21, r24
    468e:	29 f4       	brne	.+10     	; 0x469a <__floatsisf+0x54>
    4690:	60 e0       	ldi	r22, 0x00	; 0
    4692:	70 e0       	ldi	r23, 0x00	; 0
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	9f ec       	ldi	r25, 0xCF	; 207
    4698:	30 c0       	rjmp	.+96     	; 0x46fa <__floatsisf+0xb4>
    469a:	ee 24       	eor	r14, r14
    469c:	ff 24       	eor	r15, r15
    469e:	87 01       	movw	r16, r14
    46a0:	e2 1a       	sub	r14, r18
    46a2:	f3 0a       	sbc	r15, r19
    46a4:	04 0b       	sbc	r16, r20
    46a6:	15 0b       	sbc	r17, r21
    46a8:	02 c0       	rjmp	.+4      	; 0x46ae <__floatsisf+0x68>
    46aa:	79 01       	movw	r14, r18
    46ac:	8a 01       	movw	r16, r20
    46ae:	8e e1       	ldi	r24, 0x1E	; 30
    46b0:	c8 2e       	mov	r12, r24
    46b2:	d1 2c       	mov	r13, r1
    46b4:	dc 82       	std	Y+4, r13	; 0x04
    46b6:	cb 82       	std	Y+3, r12	; 0x03
    46b8:	ed 82       	std	Y+5, r14	; 0x05
    46ba:	fe 82       	std	Y+6, r15	; 0x06
    46bc:	0f 83       	std	Y+7, r16	; 0x07
    46be:	18 87       	std	Y+8, r17	; 0x08
    46c0:	c8 01       	movw	r24, r16
    46c2:	b7 01       	movw	r22, r14
    46c4:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__clzsi2>
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	18 16       	cp	r1, r24
    46cc:	19 06       	cpc	r1, r25
    46ce:	84 f4       	brge	.+32     	; 0x46f0 <__floatsisf+0xaa>
    46d0:	08 2e       	mov	r0, r24
    46d2:	04 c0       	rjmp	.+8      	; 0x46dc <__floatsisf+0x96>
    46d4:	ee 0c       	add	r14, r14
    46d6:	ff 1c       	adc	r15, r15
    46d8:	00 1f       	adc	r16, r16
    46da:	11 1f       	adc	r17, r17
    46dc:	0a 94       	dec	r0
    46de:	d2 f7       	brpl	.-12     	; 0x46d4 <__floatsisf+0x8e>
    46e0:	ed 82       	std	Y+5, r14	; 0x05
    46e2:	fe 82       	std	Y+6, r15	; 0x06
    46e4:	0f 83       	std	Y+7, r16	; 0x07
    46e6:	18 87       	std	Y+8, r17	; 0x08
    46e8:	c8 1a       	sub	r12, r24
    46ea:	d9 0a       	sbc	r13, r25
    46ec:	dc 82       	std	Y+4, r13	; 0x04
    46ee:	cb 82       	std	Y+3, r12	; 0x03
    46f0:	ba 82       	std	Y+2, r11	; 0x02
    46f2:	ce 01       	movw	r24, r28
    46f4:	01 96       	adiw	r24, 0x01	; 1
    46f6:	0e 94 21 24 	call	0x4842	; 0x4842 <__pack_f>
    46fa:	e9 e0       	ldi	r30, 0x09	; 9
    46fc:	28 96       	adiw	r28, 0x08	; 8
    46fe:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <__epilogue_restores__+0x12>

00004702 <__fixsfsi>:
    4702:	ac e0       	ldi	r26, 0x0C	; 12
    4704:	b0 e0       	ldi	r27, 0x00	; 0
    4706:	e7 e8       	ldi	r30, 0x87	; 135
    4708:	f3 e2       	ldi	r31, 0x23	; 35
    470a:	0c 94 c7 25 	jmp	0x4b8e	; 0x4b8e <__prologue_saves__+0x20>
    470e:	69 83       	std	Y+1, r22	; 0x01
    4710:	7a 83       	std	Y+2, r23	; 0x02
    4712:	8b 83       	std	Y+3, r24	; 0x03
    4714:	9c 83       	std	Y+4, r25	; 0x04
    4716:	be 01       	movw	r22, r28
    4718:	6b 5f       	subi	r22, 0xFB	; 251
    471a:	7f 4f       	sbci	r23, 0xFF	; 255
    471c:	ce 01       	movw	r24, r28
    471e:	01 96       	adiw	r24, 0x01	; 1
    4720:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__unpack_f>
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	82 30       	cpi	r24, 0x02	; 2
    4728:	a9 f1       	breq	.+106    	; 0x4794 <__fixsfsi+0x92>
    472a:	82 30       	cpi	r24, 0x02	; 2
    472c:	98 f1       	brcs	.+102    	; 0x4794 <__fixsfsi+0x92>
    472e:	84 30       	cpi	r24, 0x04	; 4
    4730:	21 f4       	brne	.+8      	; 0x473a <__fixsfsi+0x38>
    4732:	8e 81       	ldd	r24, Y+6	; 0x06
    4734:	88 23       	and	r24, r24
    4736:	59 f4       	brne	.+22     	; 0x474e <__fixsfsi+0x4c>
    4738:	0f c0       	rjmp	.+30     	; 0x4758 <__fixsfsi+0x56>
    473a:	2f 81       	ldd	r18, Y+7	; 0x07
    473c:	38 85       	ldd	r19, Y+8	; 0x08
    473e:	37 fd       	sbrc	r19, 7
    4740:	29 c0       	rjmp	.+82     	; 0x4794 <__fixsfsi+0x92>
    4742:	6e 81       	ldd	r22, Y+6	; 0x06
    4744:	2f 31       	cpi	r18, 0x1F	; 31
    4746:	31 05       	cpc	r19, r1
    4748:	64 f0       	brlt	.+24     	; 0x4762 <__fixsfsi+0x60>
    474a:	66 23       	and	r22, r22
    474c:	29 f0       	breq	.+10     	; 0x4758 <__fixsfsi+0x56>
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	50 e8       	ldi	r21, 0x80	; 128
    4756:	22 c0       	rjmp	.+68     	; 0x479c <__fixsfsi+0x9a>
    4758:	2f ef       	ldi	r18, 0xFF	; 255
    475a:	3f ef       	ldi	r19, 0xFF	; 255
    475c:	4f ef       	ldi	r20, 0xFF	; 255
    475e:	5f e7       	ldi	r21, 0x7F	; 127
    4760:	1d c0       	rjmp	.+58     	; 0x479c <__fixsfsi+0x9a>
    4762:	8e e1       	ldi	r24, 0x1E	; 30
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	82 1b       	sub	r24, r18
    4768:	93 0b       	sbc	r25, r19
    476a:	29 85       	ldd	r18, Y+9	; 0x09
    476c:	3a 85       	ldd	r19, Y+10	; 0x0a
    476e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4770:	5c 85       	ldd	r21, Y+12	; 0x0c
    4772:	04 c0       	rjmp	.+8      	; 0x477c <__fixsfsi+0x7a>
    4774:	56 95       	lsr	r21
    4776:	47 95       	ror	r20
    4778:	37 95       	ror	r19
    477a:	27 95       	ror	r18
    477c:	8a 95       	dec	r24
    477e:	d2 f7       	brpl	.-12     	; 0x4774 <__fixsfsi+0x72>
    4780:	66 23       	and	r22, r22
    4782:	61 f0       	breq	.+24     	; 0x479c <__fixsfsi+0x9a>
    4784:	50 95       	com	r21
    4786:	40 95       	com	r20
    4788:	30 95       	com	r19
    478a:	21 95       	neg	r18
    478c:	3f 4f       	sbci	r19, 0xFF	; 255
    478e:	4f 4f       	sbci	r20, 0xFF	; 255
    4790:	5f 4f       	sbci	r21, 0xFF	; 255
    4792:	04 c0       	rjmp	.+8      	; 0x479c <__fixsfsi+0x9a>
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	ca 01       	movw	r24, r20
    479e:	b9 01       	movw	r22, r18
    47a0:	e2 e0       	ldi	r30, 0x02	; 2
    47a2:	2c 96       	adiw	r28, 0x0c	; 12
    47a4:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <__epilogue_restores__+0x20>

000047a8 <__clzsi2>:
    47a8:	ef 92       	push	r14
    47aa:	ff 92       	push	r15
    47ac:	0f 93       	push	r16
    47ae:	1f 93       	push	r17
    47b0:	9b 01       	movw	r18, r22
    47b2:	ac 01       	movw	r20, r24
    47b4:	20 30       	cpi	r18, 0x00	; 0
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	38 07       	cpc	r19, r24
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	48 07       	cpc	r20, r24
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	58 07       	cpc	r21, r24
    47c2:	80 f4       	brcc	.+32     	; 0x47e4 <__clzsi2+0x3c>
    47c4:	2f 3f       	cpi	r18, 0xFF	; 255
    47c6:	31 05       	cpc	r19, r1
    47c8:	41 05       	cpc	r20, r1
    47ca:	51 05       	cpc	r21, r1
    47cc:	09 f0       	breq	.+2      	; 0x47d0 <__clzsi2+0x28>
    47ce:	20 f4       	brcc	.+8      	; 0x47d8 <__clzsi2+0x30>
    47d0:	ee 24       	eor	r14, r14
    47d2:	ff 24       	eor	r15, r15
    47d4:	87 01       	movw	r16, r14
    47d6:	19 c0       	rjmp	.+50     	; 0x480a <__clzsi2+0x62>
    47d8:	68 e0       	ldi	r22, 0x08	; 8
    47da:	e6 2e       	mov	r14, r22
    47dc:	f1 2c       	mov	r15, r1
    47de:	01 2d       	mov	r16, r1
    47e0:	11 2d       	mov	r17, r1
    47e2:	13 c0       	rjmp	.+38     	; 0x480a <__clzsi2+0x62>
    47e4:	20 30       	cpi	r18, 0x00	; 0
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	38 07       	cpc	r19, r24
    47ea:	80 e0       	ldi	r24, 0x00	; 0
    47ec:	48 07       	cpc	r20, r24
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	58 07       	cpc	r21, r24
    47f2:	30 f4       	brcc	.+12     	; 0x4800 <__clzsi2+0x58>
    47f4:	90 e1       	ldi	r25, 0x10	; 16
    47f6:	e9 2e       	mov	r14, r25
    47f8:	f1 2c       	mov	r15, r1
    47fa:	01 2d       	mov	r16, r1
    47fc:	11 2d       	mov	r17, r1
    47fe:	05 c0       	rjmp	.+10     	; 0x480a <__clzsi2+0x62>
    4800:	88 e1       	ldi	r24, 0x18	; 24
    4802:	e8 2e       	mov	r14, r24
    4804:	f1 2c       	mov	r15, r1
    4806:	01 2d       	mov	r16, r1
    4808:	11 2d       	mov	r17, r1
    480a:	80 e2       	ldi	r24, 0x20	; 32
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	a0 e0       	ldi	r26, 0x00	; 0
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	8e 19       	sub	r24, r14
    4814:	9f 09       	sbc	r25, r15
    4816:	a0 0b       	sbc	r26, r16
    4818:	b1 0b       	sbc	r27, r17
    481a:	04 c0       	rjmp	.+8      	; 0x4824 <__clzsi2+0x7c>
    481c:	56 95       	lsr	r21
    481e:	47 95       	ror	r20
    4820:	37 95       	ror	r19
    4822:	27 95       	ror	r18
    4824:	ea 94       	dec	r14
    4826:	d2 f7       	brpl	.-12     	; 0x481c <__clzsi2+0x74>
    4828:	f9 01       	movw	r30, r18
    482a:	e1 5e       	subi	r30, 0xE1	; 225
    482c:	fd 4f       	sbci	r31, 0xFD	; 253
    482e:	20 81       	ld	r18, Z
    4830:	82 1b       	sub	r24, r18
    4832:	91 09       	sbc	r25, r1
    4834:	a1 09       	sbc	r26, r1
    4836:	b1 09       	sbc	r27, r1
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	ff 90       	pop	r15
    483e:	ef 90       	pop	r14
    4840:	08 95       	ret

00004842 <__pack_f>:
    4842:	9f 92       	push	r9
    4844:	af 92       	push	r10
    4846:	bf 92       	push	r11
    4848:	cf 92       	push	r12
    484a:	df 92       	push	r13
    484c:	ef 92       	push	r14
    484e:	ff 92       	push	r15
    4850:	0f 93       	push	r16
    4852:	1f 93       	push	r17
    4854:	ee 24       	eor	r14, r14
    4856:	ff 24       	eor	r15, r15
    4858:	87 01       	movw	r16, r14
    485a:	fc 01       	movw	r30, r24
    485c:	24 81       	ldd	r18, Z+4	; 0x04
    485e:	35 81       	ldd	r19, Z+5	; 0x05
    4860:	46 81       	ldd	r20, Z+6	; 0x06
    4862:	57 81       	ldd	r21, Z+7	; 0x07
    4864:	91 80       	ldd	r9, Z+1	; 0x01
    4866:	80 81       	ld	r24, Z
    4868:	82 30       	cpi	r24, 0x02	; 2
    486a:	10 f4       	brcc	.+4      	; 0x4870 <__pack_f+0x2e>
    486c:	40 61       	ori	r20, 0x10	; 16
    486e:	a2 c0       	rjmp	.+324    	; 0x49b4 <__pack_f+0x172>
    4870:	84 30       	cpi	r24, 0x04	; 4
    4872:	09 f4       	brne	.+2      	; 0x4876 <__pack_f+0x34>
    4874:	9b c0       	rjmp	.+310    	; 0x49ac <__pack_f+0x16a>
    4876:	82 30       	cpi	r24, 0x02	; 2
    4878:	29 f4       	brne	.+10     	; 0x4884 <__pack_f+0x42>
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	40 e0       	ldi	r20, 0x00	; 0
    4880:	50 e0       	ldi	r21, 0x00	; 0
    4882:	05 c0       	rjmp	.+10     	; 0x488e <__pack_f+0x4c>
    4884:	21 15       	cp	r18, r1
    4886:	31 05       	cpc	r19, r1
    4888:	41 05       	cpc	r20, r1
    488a:	51 05       	cpc	r21, r1
    488c:	19 f4       	brne	.+6      	; 0x4894 <__pack_f+0x52>
    488e:	e0 e0       	ldi	r30, 0x00	; 0
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	92 c0       	rjmp	.+292    	; 0x49b8 <__pack_f+0x176>
    4894:	82 81       	ldd	r24, Z+2	; 0x02
    4896:	93 81       	ldd	r25, Z+3	; 0x03
    4898:	6f ef       	ldi	r22, 0xFF	; 255
    489a:	82 38       	cpi	r24, 0x82	; 130
    489c:	96 07       	cpc	r25, r22
    489e:	0c f0       	brlt	.+2      	; 0x48a2 <__pack_f+0x60>
    48a0:	5a c0       	rjmp	.+180    	; 0x4956 <__pack_f+0x114>
    48a2:	62 e8       	ldi	r22, 0x82	; 130
    48a4:	7f ef       	ldi	r23, 0xFF	; 255
    48a6:	68 1b       	sub	r22, r24
    48a8:	79 0b       	sbc	r23, r25
    48aa:	6a 31       	cpi	r22, 0x1A	; 26
    48ac:	71 05       	cpc	r23, r1
    48ae:	2c f0       	brlt	.+10     	; 0x48ba <__pack_f+0x78>
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	40 e0       	ldi	r20, 0x00	; 0
    48b6:	50 e0       	ldi	r21, 0x00	; 0
    48b8:	2a c0       	rjmp	.+84     	; 0x490e <__pack_f+0xcc>
    48ba:	aa 24       	eor	r10, r10
    48bc:	bb 24       	eor	r11, r11
    48be:	65 01       	movw	r12, r10
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	a0 e0       	ldi	r26, 0x00	; 0
    48c6:	b0 e0       	ldi	r27, 0x00	; 0
    48c8:	06 2e       	mov	r0, r22
    48ca:	04 c0       	rjmp	.+8      	; 0x48d4 <__pack_f+0x92>
    48cc:	88 0f       	add	r24, r24
    48ce:	99 1f       	adc	r25, r25
    48d0:	aa 1f       	adc	r26, r26
    48d2:	bb 1f       	adc	r27, r27
    48d4:	0a 94       	dec	r0
    48d6:	d2 f7       	brpl	.-12     	; 0x48cc <__pack_f+0x8a>
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	a1 09       	sbc	r26, r1
    48dc:	b1 09       	sbc	r27, r1
    48de:	82 23       	and	r24, r18
    48e0:	93 23       	and	r25, r19
    48e2:	a4 23       	and	r26, r20
    48e4:	b5 23       	and	r27, r21
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	a1 05       	cpc	r26, r1
    48ea:	b1 05       	cpc	r27, r1
    48ec:	29 f0       	breq	.+10     	; 0x48f8 <__pack_f+0xb6>
    48ee:	71 e0       	ldi	r23, 0x01	; 1
    48f0:	a7 2e       	mov	r10, r23
    48f2:	b1 2c       	mov	r11, r1
    48f4:	c1 2c       	mov	r12, r1
    48f6:	d1 2c       	mov	r13, r1
    48f8:	04 c0       	rjmp	.+8      	; 0x4902 <__pack_f+0xc0>
    48fa:	56 95       	lsr	r21
    48fc:	47 95       	ror	r20
    48fe:	37 95       	ror	r19
    4900:	27 95       	ror	r18
    4902:	6a 95       	dec	r22
    4904:	d2 f7       	brpl	.-12     	; 0x48fa <__pack_f+0xb8>
    4906:	2a 29       	or	r18, r10
    4908:	3b 29       	or	r19, r11
    490a:	4c 29       	or	r20, r12
    490c:	5d 29       	or	r21, r13
    490e:	da 01       	movw	r26, r20
    4910:	c9 01       	movw	r24, r18
    4912:	8f 77       	andi	r24, 0x7F	; 127
    4914:	90 70       	andi	r25, 0x00	; 0
    4916:	a0 70       	andi	r26, 0x00	; 0
    4918:	b0 70       	andi	r27, 0x00	; 0
    491a:	80 34       	cpi	r24, 0x40	; 64
    491c:	91 05       	cpc	r25, r1
    491e:	a1 05       	cpc	r26, r1
    4920:	b1 05       	cpc	r27, r1
    4922:	39 f4       	brne	.+14     	; 0x4932 <__pack_f+0xf0>
    4924:	27 ff       	sbrs	r18, 7
    4926:	09 c0       	rjmp	.+18     	; 0x493a <__pack_f+0xf8>
    4928:	20 5c       	subi	r18, 0xC0	; 192
    492a:	3f 4f       	sbci	r19, 0xFF	; 255
    492c:	4f 4f       	sbci	r20, 0xFF	; 255
    492e:	5f 4f       	sbci	r21, 0xFF	; 255
    4930:	04 c0       	rjmp	.+8      	; 0x493a <__pack_f+0xf8>
    4932:	21 5c       	subi	r18, 0xC1	; 193
    4934:	3f 4f       	sbci	r19, 0xFF	; 255
    4936:	4f 4f       	sbci	r20, 0xFF	; 255
    4938:	5f 4f       	sbci	r21, 0xFF	; 255
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	20 30       	cpi	r18, 0x00	; 0
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	36 07       	cpc	r19, r22
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	46 07       	cpc	r20, r22
    4948:	60 e4       	ldi	r22, 0x40	; 64
    494a:	56 07       	cpc	r21, r22
    494c:	10 f0       	brcs	.+4      	; 0x4952 <__pack_f+0x110>
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	fc 01       	movw	r30, r24
    4954:	23 c0       	rjmp	.+70     	; 0x499c <__pack_f+0x15a>
    4956:	80 38       	cpi	r24, 0x80	; 128
    4958:	91 05       	cpc	r25, r1
    495a:	44 f5       	brge	.+80     	; 0x49ac <__pack_f+0x16a>
    495c:	fc 01       	movw	r30, r24
    495e:	e1 58       	subi	r30, 0x81	; 129
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	da 01       	movw	r26, r20
    4964:	c9 01       	movw	r24, r18
    4966:	8f 77       	andi	r24, 0x7F	; 127
    4968:	90 70       	andi	r25, 0x00	; 0
    496a:	a0 70       	andi	r26, 0x00	; 0
    496c:	b0 70       	andi	r27, 0x00	; 0
    496e:	80 34       	cpi	r24, 0x40	; 64
    4970:	91 05       	cpc	r25, r1
    4972:	a1 05       	cpc	r26, r1
    4974:	b1 05       	cpc	r27, r1
    4976:	39 f4       	brne	.+14     	; 0x4986 <__pack_f+0x144>
    4978:	27 ff       	sbrs	r18, 7
    497a:	09 c0       	rjmp	.+18     	; 0x498e <__pack_f+0x14c>
    497c:	20 5c       	subi	r18, 0xC0	; 192
    497e:	3f 4f       	sbci	r19, 0xFF	; 255
    4980:	4f 4f       	sbci	r20, 0xFF	; 255
    4982:	5f 4f       	sbci	r21, 0xFF	; 255
    4984:	04 c0       	rjmp	.+8      	; 0x498e <__pack_f+0x14c>
    4986:	21 5c       	subi	r18, 0xC1	; 193
    4988:	3f 4f       	sbci	r19, 0xFF	; 255
    498a:	4f 4f       	sbci	r20, 0xFF	; 255
    498c:	5f 4f       	sbci	r21, 0xFF	; 255
    498e:	57 ff       	sbrs	r21, 7
    4990:	05 c0       	rjmp	.+10     	; 0x499c <__pack_f+0x15a>
    4992:	56 95       	lsr	r21
    4994:	47 95       	ror	r20
    4996:	37 95       	ror	r19
    4998:	27 95       	ror	r18
    499a:	31 96       	adiw	r30, 0x01	; 1
    499c:	87 e0       	ldi	r24, 0x07	; 7
    499e:	56 95       	lsr	r21
    49a0:	47 95       	ror	r20
    49a2:	37 95       	ror	r19
    49a4:	27 95       	ror	r18
    49a6:	8a 95       	dec	r24
    49a8:	d1 f7       	brne	.-12     	; 0x499e <__pack_f+0x15c>
    49aa:	06 c0       	rjmp	.+12     	; 0x49b8 <__pack_f+0x176>
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	40 e0       	ldi	r20, 0x00	; 0
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	ef ef       	ldi	r30, 0xFF	; 255
    49b6:	f0 e0       	ldi	r31, 0x00	; 0
    49b8:	e2 2e       	mov	r14, r18
    49ba:	f3 2e       	mov	r15, r19
    49bc:	94 2f       	mov	r25, r20
    49be:	9f 77       	andi	r25, 0x7F	; 127
    49c0:	80 2f       	mov	r24, r16
    49c2:	80 78       	andi	r24, 0x80	; 128
    49c4:	89 2b       	or	r24, r25
    49c6:	9e 2f       	mov	r25, r30
    49c8:	97 95       	ror	r25
    49ca:	99 27       	eor	r25, r25
    49cc:	97 95       	ror	r25
    49ce:	8f 77       	andi	r24, 0x7F	; 127
    49d0:	08 2f       	mov	r16, r24
    49d2:	09 2b       	or	r16, r25
    49d4:	9e 2f       	mov	r25, r30
    49d6:	96 95       	lsr	r25
    49d8:	81 2f       	mov	r24, r17
    49da:	80 78       	andi	r24, 0x80	; 128
    49dc:	89 2b       	or	r24, r25
    49de:	97 94       	ror	r9
    49e0:	99 24       	eor	r9, r9
    49e2:	97 94       	ror	r9
    49e4:	8f 77       	andi	r24, 0x7F	; 127
    49e6:	18 2f       	mov	r17, r24
    49e8:	19 29       	or	r17, r9
    49ea:	c8 01       	movw	r24, r16
    49ec:	b7 01       	movw	r22, r14
    49ee:	1f 91       	pop	r17
    49f0:	0f 91       	pop	r16
    49f2:	ff 90       	pop	r15
    49f4:	ef 90       	pop	r14
    49f6:	df 90       	pop	r13
    49f8:	cf 90       	pop	r12
    49fa:	bf 90       	pop	r11
    49fc:	af 90       	pop	r10
    49fe:	9f 90       	pop	r9
    4a00:	08 95       	ret

00004a02 <__unpack_f>:
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	fc 01       	movw	r30, r24
    4a08:	db 01       	movw	r26, r22
    4a0a:	20 81       	ld	r18, Z
    4a0c:	31 81       	ldd	r19, Z+1	; 0x01
    4a0e:	92 81       	ldd	r25, Z+2	; 0x02
    4a10:	49 2f       	mov	r20, r25
    4a12:	4f 77       	andi	r20, 0x7F	; 127
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	99 1f       	adc	r25, r25
    4a18:	99 27       	eor	r25, r25
    4a1a:	99 1f       	adc	r25, r25
    4a1c:	83 81       	ldd	r24, Z+3	; 0x03
    4a1e:	e8 2f       	mov	r30, r24
    4a20:	ee 0f       	add	r30, r30
    4a22:	e9 2b       	or	r30, r25
    4a24:	6e 2f       	mov	r22, r30
    4a26:	70 e0       	ldi	r23, 0x00	; 0
    4a28:	88 1f       	adc	r24, r24
    4a2a:	88 27       	eor	r24, r24
    4a2c:	88 1f       	adc	r24, r24
    4a2e:	ed 01       	movw	r28, r26
    4a30:	89 83       	std	Y+1, r24	; 0x01
    4a32:	ee 23       	and	r30, r30
    4a34:	71 f5       	brne	.+92     	; 0x4a92 <__unpack_f+0x90>
    4a36:	21 15       	cp	r18, r1
    4a38:	31 05       	cpc	r19, r1
    4a3a:	41 05       	cpc	r20, r1
    4a3c:	51 05       	cpc	r21, r1
    4a3e:	11 f4       	brne	.+4      	; 0x4a44 <__unpack_f+0x42>
    4a40:	82 e0       	ldi	r24, 0x02	; 2
    4a42:	2f c0       	rjmp	.+94     	; 0x4aa2 <__unpack_f+0xa0>
    4a44:	6e 57       	subi	r22, 0x7E	; 126
    4a46:	70 40       	sbci	r23, 0x00	; 0
    4a48:	fd 01       	movw	r30, r26
    4a4a:	73 83       	std	Z+3, r23	; 0x03
    4a4c:	62 83       	std	Z+2, r22	; 0x02
    4a4e:	67 e0       	ldi	r22, 0x07	; 7
    4a50:	22 0f       	add	r18, r18
    4a52:	33 1f       	adc	r19, r19
    4a54:	44 1f       	adc	r20, r20
    4a56:	55 1f       	adc	r21, r21
    4a58:	6a 95       	dec	r22
    4a5a:	d1 f7       	brne	.-12     	; 0x4a50 <__unpack_f+0x4e>
    4a5c:	83 e0       	ldi	r24, 0x03	; 3
    4a5e:	8c 93       	st	X, r24
    4a60:	0a c0       	rjmp	.+20     	; 0x4a76 <__unpack_f+0x74>
    4a62:	22 0f       	add	r18, r18
    4a64:	33 1f       	adc	r19, r19
    4a66:	44 1f       	adc	r20, r20
    4a68:	55 1f       	adc	r21, r21
    4a6a:	ed 01       	movw	r28, r26
    4a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	9b 83       	std	Y+3, r25	; 0x03
    4a74:	8a 83       	std	Y+2, r24	; 0x02
    4a76:	20 30       	cpi	r18, 0x00	; 0
    4a78:	e0 e0       	ldi	r30, 0x00	; 0
    4a7a:	3e 07       	cpc	r19, r30
    4a7c:	e0 e0       	ldi	r30, 0x00	; 0
    4a7e:	4e 07       	cpc	r20, r30
    4a80:	e0 e4       	ldi	r30, 0x40	; 64
    4a82:	5e 07       	cpc	r21, r30
    4a84:	70 f3       	brcs	.-36     	; 0x4a62 <__unpack_f+0x60>
    4a86:	ed 01       	movw	r28, r26
    4a88:	2c 83       	std	Y+4, r18	; 0x04
    4a8a:	3d 83       	std	Y+5, r19	; 0x05
    4a8c:	4e 83       	std	Y+6, r20	; 0x06
    4a8e:	5f 83       	std	Y+7, r21	; 0x07
    4a90:	25 c0       	rjmp	.+74     	; 0x4adc <__unpack_f+0xda>
    4a92:	ef 3f       	cpi	r30, 0xFF	; 255
    4a94:	79 f4       	brne	.+30     	; 0x4ab4 <__unpack_f+0xb2>
    4a96:	21 15       	cp	r18, r1
    4a98:	31 05       	cpc	r19, r1
    4a9a:	41 05       	cpc	r20, r1
    4a9c:	51 05       	cpc	r21, r1
    4a9e:	19 f4       	brne	.+6      	; 0x4aa6 <__unpack_f+0xa4>
    4aa0:	84 e0       	ldi	r24, 0x04	; 4
    4aa2:	8c 93       	st	X, r24
    4aa4:	1b c0       	rjmp	.+54     	; 0x4adc <__unpack_f+0xda>
    4aa6:	44 ff       	sbrs	r20, 4
    4aa8:	03 c0       	rjmp	.+6      	; 0x4ab0 <__unpack_f+0xae>
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	8c 93       	st	X, r24
    4aae:	11 c0       	rjmp	.+34     	; 0x4ad2 <__unpack_f+0xd0>
    4ab0:	1c 92       	st	X, r1
    4ab2:	0f c0       	rjmp	.+30     	; 0x4ad2 <__unpack_f+0xd0>
    4ab4:	6f 57       	subi	r22, 0x7F	; 127
    4ab6:	70 40       	sbci	r23, 0x00	; 0
    4ab8:	ed 01       	movw	r28, r26
    4aba:	7b 83       	std	Y+3, r23	; 0x03
    4abc:	6a 83       	std	Y+2, r22	; 0x02
    4abe:	83 e0       	ldi	r24, 0x03	; 3
    4ac0:	8c 93       	st	X, r24
    4ac2:	87 e0       	ldi	r24, 0x07	; 7
    4ac4:	22 0f       	add	r18, r18
    4ac6:	33 1f       	adc	r19, r19
    4ac8:	44 1f       	adc	r20, r20
    4aca:	55 1f       	adc	r21, r21
    4acc:	8a 95       	dec	r24
    4ace:	d1 f7       	brne	.-12     	; 0x4ac4 <__unpack_f+0xc2>
    4ad0:	50 64       	ori	r21, 0x40	; 64
    4ad2:	fd 01       	movw	r30, r26
    4ad4:	24 83       	std	Z+4, r18	; 0x04
    4ad6:	35 83       	std	Z+5, r19	; 0x05
    4ad8:	46 83       	std	Z+6, r20	; 0x06
    4ada:	57 83       	std	Z+7, r21	; 0x07
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	08 95       	ret

00004ae2 <__mulsi3>:
    4ae2:	62 9f       	mul	r22, r18
    4ae4:	d0 01       	movw	r26, r0
    4ae6:	73 9f       	mul	r23, r19
    4ae8:	f0 01       	movw	r30, r0
    4aea:	82 9f       	mul	r24, r18
    4aec:	e0 0d       	add	r30, r0
    4aee:	f1 1d       	adc	r31, r1
    4af0:	64 9f       	mul	r22, r20
    4af2:	e0 0d       	add	r30, r0
    4af4:	f1 1d       	adc	r31, r1
    4af6:	92 9f       	mul	r25, r18
    4af8:	f0 0d       	add	r31, r0
    4afa:	83 9f       	mul	r24, r19
    4afc:	f0 0d       	add	r31, r0
    4afe:	74 9f       	mul	r23, r20
    4b00:	f0 0d       	add	r31, r0
    4b02:	65 9f       	mul	r22, r21
    4b04:	f0 0d       	add	r31, r0
    4b06:	99 27       	eor	r25, r25
    4b08:	72 9f       	mul	r23, r18
    4b0a:	b0 0d       	add	r27, r0
    4b0c:	e1 1d       	adc	r30, r1
    4b0e:	f9 1f       	adc	r31, r25
    4b10:	63 9f       	mul	r22, r19
    4b12:	b0 0d       	add	r27, r0
    4b14:	e1 1d       	adc	r30, r1
    4b16:	f9 1f       	adc	r31, r25
    4b18:	bd 01       	movw	r22, r26
    4b1a:	cf 01       	movw	r24, r30
    4b1c:	11 24       	eor	r1, r1
    4b1e:	08 95       	ret

00004b20 <__udivmodhi4>:
    4b20:	aa 1b       	sub	r26, r26
    4b22:	bb 1b       	sub	r27, r27
    4b24:	51 e1       	ldi	r21, 0x11	; 17
    4b26:	07 c0       	rjmp	.+14     	; 0x4b36 <__udivmodhi4_ep>

00004b28 <__udivmodhi4_loop>:
    4b28:	aa 1f       	adc	r26, r26
    4b2a:	bb 1f       	adc	r27, r27
    4b2c:	a6 17       	cp	r26, r22
    4b2e:	b7 07       	cpc	r27, r23
    4b30:	10 f0       	brcs	.+4      	; 0x4b36 <__udivmodhi4_ep>
    4b32:	a6 1b       	sub	r26, r22
    4b34:	b7 0b       	sbc	r27, r23

00004b36 <__udivmodhi4_ep>:
    4b36:	88 1f       	adc	r24, r24
    4b38:	99 1f       	adc	r25, r25
    4b3a:	5a 95       	dec	r21
    4b3c:	a9 f7       	brne	.-22     	; 0x4b28 <__udivmodhi4_loop>
    4b3e:	80 95       	com	r24
    4b40:	90 95       	com	r25
    4b42:	bc 01       	movw	r22, r24
    4b44:	cd 01       	movw	r24, r26
    4b46:	08 95       	ret

00004b48 <__divmodhi4>:
    4b48:	97 fb       	bst	r25, 7
    4b4a:	09 2e       	mov	r0, r25
    4b4c:	07 26       	eor	r0, r23
    4b4e:	0a d0       	rcall	.+20     	; 0x4b64 <__divmodhi4_neg1>
    4b50:	77 fd       	sbrc	r23, 7
    4b52:	04 d0       	rcall	.+8      	; 0x4b5c <__divmodhi4_neg2>
    4b54:	e5 df       	rcall	.-54     	; 0x4b20 <__udivmodhi4>
    4b56:	06 d0       	rcall	.+12     	; 0x4b64 <__divmodhi4_neg1>
    4b58:	00 20       	and	r0, r0
    4b5a:	1a f4       	brpl	.+6      	; 0x4b62 <__divmodhi4_exit>

00004b5c <__divmodhi4_neg2>:
    4b5c:	70 95       	com	r23
    4b5e:	61 95       	neg	r22
    4b60:	7f 4f       	sbci	r23, 0xFF	; 255

00004b62 <__divmodhi4_exit>:
    4b62:	08 95       	ret

00004b64 <__divmodhi4_neg1>:
    4b64:	f6 f7       	brtc	.-4      	; 0x4b62 <__divmodhi4_exit>
    4b66:	90 95       	com	r25
    4b68:	81 95       	neg	r24
    4b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6c:	08 95       	ret

00004b6e <__prologue_saves__>:
    4b6e:	2f 92       	push	r2
    4b70:	3f 92       	push	r3
    4b72:	4f 92       	push	r4
    4b74:	5f 92       	push	r5
    4b76:	6f 92       	push	r6
    4b78:	7f 92       	push	r7
    4b7a:	8f 92       	push	r8
    4b7c:	9f 92       	push	r9
    4b7e:	af 92       	push	r10
    4b80:	bf 92       	push	r11
    4b82:	cf 92       	push	r12
    4b84:	df 92       	push	r13
    4b86:	ef 92       	push	r14
    4b88:	ff 92       	push	r15
    4b8a:	0f 93       	push	r16
    4b8c:	1f 93       	push	r17
    4b8e:	cf 93       	push	r28
    4b90:	df 93       	push	r29
    4b92:	cd b7       	in	r28, 0x3d	; 61
    4b94:	de b7       	in	r29, 0x3e	; 62
    4b96:	ca 1b       	sub	r28, r26
    4b98:	db 0b       	sbc	r29, r27
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	de bf       	out	0x3e, r29	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	cd bf       	out	0x3d, r28	; 61
    4ba4:	19 94       	eijmp

00004ba6 <__epilogue_restores__>:
    4ba6:	2a 88       	ldd	r2, Y+18	; 0x12
    4ba8:	39 88       	ldd	r3, Y+17	; 0x11
    4baa:	48 88       	ldd	r4, Y+16	; 0x10
    4bac:	5f 84       	ldd	r5, Y+15	; 0x0f
    4bae:	6e 84       	ldd	r6, Y+14	; 0x0e
    4bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4bb8:	b9 84       	ldd	r11, Y+9	; 0x09
    4bba:	c8 84       	ldd	r12, Y+8	; 0x08
    4bbc:	df 80       	ldd	r13, Y+7	; 0x07
    4bbe:	ee 80       	ldd	r14, Y+6	; 0x06
    4bc0:	fd 80       	ldd	r15, Y+5	; 0x05
    4bc2:	0c 81       	ldd	r16, Y+4	; 0x04
    4bc4:	1b 81       	ldd	r17, Y+3	; 0x03
    4bc6:	aa 81       	ldd	r26, Y+2	; 0x02
    4bc8:	b9 81       	ldd	r27, Y+1	; 0x01
    4bca:	ce 0f       	add	r28, r30
    4bcc:	d1 1d       	adc	r29, r1
    4bce:	0f b6       	in	r0, 0x3f	; 63
    4bd0:	f8 94       	cli
    4bd2:	de bf       	out	0x3e, r29	; 62
    4bd4:	0f be       	out	0x3f, r0	; 63
    4bd6:	cd bf       	out	0x3d, r28	; 61
    4bd8:	ed 01       	movw	r28, r26
    4bda:	08 95       	ret

00004bdc <do_rand>:
    4bdc:	af 92       	push	r10
    4bde:	bf 92       	push	r11
    4be0:	cf 92       	push	r12
    4be2:	df 92       	push	r13
    4be4:	ef 92       	push	r14
    4be6:	ff 92       	push	r15
    4be8:	0f 93       	push	r16
    4bea:	1f 93       	push	r17
    4bec:	cf 93       	push	r28
    4bee:	df 93       	push	r29
    4bf0:	ec 01       	movw	r28, r24
    4bf2:	68 81       	ld	r22, Y
    4bf4:	79 81       	ldd	r23, Y+1	; 0x01
    4bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bfa:	61 15       	cp	r22, r1
    4bfc:	71 05       	cpc	r23, r1
    4bfe:	81 05       	cpc	r24, r1
    4c00:	91 05       	cpc	r25, r1
    4c02:	21 f4       	brne	.+8      	; 0x4c0c <do_rand+0x30>
    4c04:	64 e2       	ldi	r22, 0x24	; 36
    4c06:	79 ed       	ldi	r23, 0xD9	; 217
    4c08:	8b e5       	ldi	r24, 0x5B	; 91
    4c0a:	97 e0       	ldi	r25, 0x07	; 7
    4c0c:	2d e1       	ldi	r18, 0x1D	; 29
    4c0e:	33 ef       	ldi	r19, 0xF3	; 243
    4c10:	41 e0       	ldi	r20, 0x01	; 1
    4c12:	50 e0       	ldi	r21, 0x00	; 0
    4c14:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divmodsi4>
    4c18:	79 01       	movw	r14, r18
    4c1a:	8a 01       	movw	r16, r20
    4c1c:	27 ea       	ldi	r18, 0xA7	; 167
    4c1e:	31 e4       	ldi	r19, 0x41	; 65
    4c20:	40 e0       	ldi	r20, 0x00	; 0
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__mulsi3>
    4c28:	5b 01       	movw	r10, r22
    4c2a:	6c 01       	movw	r12, r24
    4c2c:	c8 01       	movw	r24, r16
    4c2e:	b7 01       	movw	r22, r14
    4c30:	2c ee       	ldi	r18, 0xEC	; 236
    4c32:	34 ef       	ldi	r19, 0xF4	; 244
    4c34:	4f ef       	ldi	r20, 0xFF	; 255
    4c36:	5f ef       	ldi	r21, 0xFF	; 255
    4c38:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__mulsi3>
    4c3c:	6a 0d       	add	r22, r10
    4c3e:	7b 1d       	adc	r23, r11
    4c40:	8c 1d       	adc	r24, r12
    4c42:	9d 1d       	adc	r25, r13
    4c44:	97 ff       	sbrs	r25, 7
    4c46:	04 c0       	rjmp	.+8      	; 0x4c50 <do_rand+0x74>
    4c48:	61 50       	subi	r22, 0x01	; 1
    4c4a:	70 40       	sbci	r23, 0x00	; 0
    4c4c:	80 40       	sbci	r24, 0x00	; 0
    4c4e:	90 48       	sbci	r25, 0x80	; 128
    4c50:	68 83       	st	Y, r22
    4c52:	79 83       	std	Y+1, r23	; 0x01
    4c54:	8a 83       	std	Y+2, r24	; 0x02
    4c56:	9b 83       	std	Y+3, r25	; 0x03
    4c58:	7f 77       	andi	r23, 0x7F	; 127
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	1f 91       	pop	r17
    4c62:	0f 91       	pop	r16
    4c64:	ff 90       	pop	r15
    4c66:	ef 90       	pop	r14
    4c68:	df 90       	pop	r13
    4c6a:	cf 90       	pop	r12
    4c6c:	bf 90       	pop	r11
    4c6e:	af 90       	pop	r10
    4c70:	08 95       	ret

00004c72 <rand_r>:
    4c72:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <do_rand>
    4c76:	08 95       	ret

00004c78 <rand>:
    4c78:	8f e1       	ldi	r24, 0x1F	; 31
    4c7a:	93 e0       	ldi	r25, 0x03	; 3
    4c7c:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <do_rand>
    4c80:	08 95       	ret

00004c82 <srand>:
    4c82:	a0 e0       	ldi	r26, 0x00	; 0
    4c84:	b0 e0       	ldi	r27, 0x00	; 0
    4c86:	80 93 1f 03 	sts	0x031F, r24
    4c8a:	90 93 20 03 	sts	0x0320, r25
    4c8e:	a0 93 21 03 	sts	0x0321, r26
    4c92:	b0 93 22 03 	sts	0x0322, r27
    4c96:	08 95       	ret
    4c98:	f5 d0       	rcall	.+490    	; 0x4e84 <__fp_pscA>
    4c9a:	58 f0       	brcs	.+22     	; 0x4cb2 <srand+0x30>
    4c9c:	80 e8       	ldi	r24, 0x80	; 128
    4c9e:	91 e0       	ldi	r25, 0x01	; 1
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <srand+0x22>
    4ca2:	9e ef       	ldi	r25, 0xFE	; 254
    4ca4:	f6 d0       	rcall	.+492    	; 0x4e92 <__fp_pscB>
    4ca6:	28 f0       	brcs	.+10     	; 0x4cb2 <srand+0x30>
    4ca8:	40 e8       	ldi	r20, 0x80	; 128
    4caa:	51 e0       	ldi	r21, 0x01	; 1
    4cac:	59 f4       	brne	.+22     	; 0x4cc4 <atan2+0xe>
    4cae:	5e ef       	ldi	r21, 0xFE	; 254
    4cb0:	09 c0       	rjmp	.+18     	; 0x4cc4 <atan2+0xe>
    4cb2:	c0 c0       	rjmp	.+384    	; 0x4e34 <__fp_nan>
    4cb4:	28 c1       	rjmp	.+592    	; 0x4f06 <__fp_zero>

00004cb6 <atan2>:
    4cb6:	e9 2f       	mov	r30, r25
    4cb8:	e0 78       	andi	r30, 0x80	; 128
    4cba:	03 d1       	rcall	.+518    	; 0x4ec2 <__fp_split3>
    4cbc:	68 f3       	brcs	.-38     	; 0x4c98 <srand+0x16>
    4cbe:	09 2e       	mov	r0, r25
    4cc0:	05 2a       	or	r0, r21
    4cc2:	c1 f3       	breq	.-16     	; 0x4cb4 <srand+0x32>
    4cc4:	26 17       	cp	r18, r22
    4cc6:	37 07       	cpc	r19, r23
    4cc8:	48 07       	cpc	r20, r24
    4cca:	59 07       	cpc	r21, r25
    4ccc:	38 f0       	brcs	.+14     	; 0x4cdc <atan2+0x26>
    4cce:	0e 2e       	mov	r0, r30
    4cd0:	07 f8       	bld	r0, 7
    4cd2:	e0 25       	eor	r30, r0
    4cd4:	69 f0       	breq	.+26     	; 0x4cf0 <atan2+0x3a>
    4cd6:	e0 25       	eor	r30, r0
    4cd8:	e0 64       	ori	r30, 0x40	; 64
    4cda:	0a c0       	rjmp	.+20     	; 0x4cf0 <atan2+0x3a>
    4cdc:	ef 63       	ori	r30, 0x3F	; 63
    4cde:	07 f8       	bld	r0, 7
    4ce0:	00 94       	com	r0
    4ce2:	07 fa       	bst	r0, 7
    4ce4:	db 01       	movw	r26, r22
    4ce6:	b9 01       	movw	r22, r18
    4ce8:	9d 01       	movw	r18, r26
    4cea:	dc 01       	movw	r26, r24
    4cec:	ca 01       	movw	r24, r20
    4cee:	ad 01       	movw	r20, r26
    4cf0:	ef 93       	push	r30
    4cf2:	41 d0       	rcall	.+130    	; 0x4d76 <__divsf3_pse>
    4cf4:	d5 d0       	rcall	.+426    	; 0x4ea0 <__fp_round>
    4cf6:	0a d0       	rcall	.+20     	; 0x4d0c <atan>
    4cf8:	5f 91       	pop	r21
    4cfa:	55 23       	and	r21, r21
    4cfc:	31 f0       	breq	.+12     	; 0x4d0a <atan2+0x54>
    4cfe:	2b ed       	ldi	r18, 0xDB	; 219
    4d00:	3f e0       	ldi	r19, 0x0F	; 15
    4d02:	49 e4       	ldi	r20, 0x49	; 73
    4d04:	50 fd       	sbrc	r21, 0
    4d06:	49 ec       	ldi	r20, 0xC9	; 201
    4d08:	77 c1       	rjmp	.+750    	; 0x4ff8 <__addsf3>
    4d0a:	08 95       	ret

00004d0c <atan>:
    4d0c:	df 93       	push	r29
    4d0e:	dd 27       	eor	r29, r29
    4d10:	b9 2f       	mov	r27, r25
    4d12:	bf 77       	andi	r27, 0x7F	; 127
    4d14:	40 e8       	ldi	r20, 0x80	; 128
    4d16:	5f e3       	ldi	r21, 0x3F	; 63
    4d18:	16 16       	cp	r1, r22
    4d1a:	17 06       	cpc	r1, r23
    4d1c:	48 07       	cpc	r20, r24
    4d1e:	5b 07       	cpc	r21, r27
    4d20:	10 f4       	brcc	.+4      	; 0x4d26 <atan+0x1a>
    4d22:	d9 2f       	mov	r29, r25
    4d24:	f7 d0       	rcall	.+494    	; 0x4f14 <inverse>
    4d26:	9f 93       	push	r25
    4d28:	8f 93       	push	r24
    4d2a:	7f 93       	push	r23
    4d2c:	6f 93       	push	r22
    4d2e:	5a d1       	rcall	.+692    	; 0x4fe4 <square>
    4d30:	ee e4       	ldi	r30, 0x4E	; 78
    4d32:	f1 e0       	ldi	r31, 0x01	; 1
    4d34:	82 d0       	rcall	.+260    	; 0x4e3a <__fp_powser>
    4d36:	b4 d0       	rcall	.+360    	; 0x4ea0 <__fp_round>
    4d38:	2f 91       	pop	r18
    4d3a:	3f 91       	pop	r19
    4d3c:	4f 91       	pop	r20
    4d3e:	5f 91       	pop	r21
    4d40:	fa d0       	rcall	.+500    	; 0x4f36 <__mulsf3x>
    4d42:	dd 23       	and	r29, r29
    4d44:	49 f0       	breq	.+18     	; 0x4d58 <atan+0x4c>
    4d46:	90 58       	subi	r25, 0x80	; 128
    4d48:	a2 ea       	ldi	r26, 0xA2	; 162
    4d4a:	2a ed       	ldi	r18, 0xDA	; 218
    4d4c:	3f e0       	ldi	r19, 0x0F	; 15
    4d4e:	49 ec       	ldi	r20, 0xC9	; 201
    4d50:	5f e3       	ldi	r21, 0x3F	; 63
    4d52:	d0 78       	andi	r29, 0x80	; 128
    4d54:	5d 27       	eor	r21, r29
    4d56:	61 d1       	rcall	.+706    	; 0x501a <__addsf3x>
    4d58:	df 91       	pop	r29
    4d5a:	a2 c0       	rjmp	.+324    	; 0x4ea0 <__fp_round>
    4d5c:	9a d0       	rcall	.+308    	; 0x4e92 <__fp_pscB>
    4d5e:	40 f0       	brcs	.+16     	; 0x4d70 <atan+0x64>
    4d60:	91 d0       	rcall	.+290    	; 0x4e84 <__fp_pscA>
    4d62:	30 f0       	brcs	.+12     	; 0x4d70 <atan+0x64>
    4d64:	21 f4       	brne	.+8      	; 0x4d6e <atan+0x62>
    4d66:	5f 3f       	cpi	r21, 0xFF	; 255
    4d68:	19 f0       	breq	.+6      	; 0x4d70 <atan+0x64>
    4d6a:	5e c0       	rjmp	.+188    	; 0x4e28 <__fp_inf>
    4d6c:	51 11       	cpse	r21, r1
    4d6e:	cc c0       	rjmp	.+408    	; 0x4f08 <__fp_szero>
    4d70:	61 c0       	rjmp	.+194    	; 0x4e34 <__fp_nan>

00004d72 <__divsf3x>:
    4d72:	a7 d0       	rcall	.+334    	; 0x4ec2 <__fp_split3>
    4d74:	98 f3       	brcs	.-26     	; 0x4d5c <atan+0x50>

00004d76 <__divsf3_pse>:
    4d76:	99 23       	and	r25, r25
    4d78:	c9 f3       	breq	.-14     	; 0x4d6c <atan+0x60>
    4d7a:	55 23       	and	r21, r21
    4d7c:	b1 f3       	breq	.-20     	; 0x4d6a <atan+0x5e>
    4d7e:	95 1b       	sub	r25, r21
    4d80:	55 0b       	sbc	r21, r21
    4d82:	bb 27       	eor	r27, r27
    4d84:	aa 27       	eor	r26, r26
    4d86:	62 17       	cp	r22, r18
    4d88:	73 07       	cpc	r23, r19
    4d8a:	84 07       	cpc	r24, r20
    4d8c:	38 f0       	brcs	.+14     	; 0x4d9c <__divsf3_pse+0x26>
    4d8e:	9f 5f       	subi	r25, 0xFF	; 255
    4d90:	5f 4f       	sbci	r21, 0xFF	; 255
    4d92:	22 0f       	add	r18, r18
    4d94:	33 1f       	adc	r19, r19
    4d96:	44 1f       	adc	r20, r20
    4d98:	aa 1f       	adc	r26, r26
    4d9a:	a9 f3       	breq	.-22     	; 0x4d86 <__divsf3_pse+0x10>
    4d9c:	33 d0       	rcall	.+102    	; 0x4e04 <__divsf3_pse+0x8e>
    4d9e:	0e 2e       	mov	r0, r30
    4da0:	3a f0       	brmi	.+14     	; 0x4db0 <__divsf3_pse+0x3a>
    4da2:	e0 e8       	ldi	r30, 0x80	; 128
    4da4:	30 d0       	rcall	.+96     	; 0x4e06 <__divsf3_pse+0x90>
    4da6:	91 50       	subi	r25, 0x01	; 1
    4da8:	50 40       	sbci	r21, 0x00	; 0
    4daa:	e6 95       	lsr	r30
    4dac:	00 1c       	adc	r0, r0
    4dae:	ca f7       	brpl	.-14     	; 0x4da2 <__divsf3_pse+0x2c>
    4db0:	29 d0       	rcall	.+82     	; 0x4e04 <__divsf3_pse+0x8e>
    4db2:	fe 2f       	mov	r31, r30
    4db4:	27 d0       	rcall	.+78     	; 0x4e04 <__divsf3_pse+0x8e>
    4db6:	66 0f       	add	r22, r22
    4db8:	77 1f       	adc	r23, r23
    4dba:	88 1f       	adc	r24, r24
    4dbc:	bb 1f       	adc	r27, r27
    4dbe:	26 17       	cp	r18, r22
    4dc0:	37 07       	cpc	r19, r23
    4dc2:	48 07       	cpc	r20, r24
    4dc4:	ab 07       	cpc	r26, r27
    4dc6:	b0 e8       	ldi	r27, 0x80	; 128
    4dc8:	09 f0       	breq	.+2      	; 0x4dcc <__divsf3_pse+0x56>
    4dca:	bb 0b       	sbc	r27, r27
    4dcc:	80 2d       	mov	r24, r0
    4dce:	bf 01       	movw	r22, r30
    4dd0:	ff 27       	eor	r31, r31
    4dd2:	93 58       	subi	r25, 0x83	; 131
    4dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd6:	2a f0       	brmi	.+10     	; 0x4de2 <__divsf3_pse+0x6c>
    4dd8:	9e 3f       	cpi	r25, 0xFE	; 254
    4dda:	51 05       	cpc	r21, r1
    4ddc:	68 f0       	brcs	.+26     	; 0x4df8 <__divsf3_pse+0x82>
    4dde:	24 c0       	rjmp	.+72     	; 0x4e28 <__fp_inf>
    4de0:	93 c0       	rjmp	.+294    	; 0x4f08 <__fp_szero>
    4de2:	5f 3f       	cpi	r21, 0xFF	; 255
    4de4:	ec f3       	brlt	.-6      	; 0x4de0 <__divsf3_pse+0x6a>
    4de6:	98 3e       	cpi	r25, 0xE8	; 232
    4de8:	dc f3       	brlt	.-10     	; 0x4de0 <__divsf3_pse+0x6a>
    4dea:	86 95       	lsr	r24
    4dec:	77 95       	ror	r23
    4dee:	67 95       	ror	r22
    4df0:	b7 95       	ror	r27
    4df2:	f7 95       	ror	r31
    4df4:	9f 5f       	subi	r25, 0xFF	; 255
    4df6:	c9 f7       	brne	.-14     	; 0x4dea <__divsf3_pse+0x74>
    4df8:	88 0f       	add	r24, r24
    4dfa:	91 1d       	adc	r25, r1
    4dfc:	96 95       	lsr	r25
    4dfe:	87 95       	ror	r24
    4e00:	97 f9       	bld	r25, 7
    4e02:	08 95       	ret
    4e04:	e1 e0       	ldi	r30, 0x01	; 1
    4e06:	66 0f       	add	r22, r22
    4e08:	77 1f       	adc	r23, r23
    4e0a:	88 1f       	adc	r24, r24
    4e0c:	bb 1f       	adc	r27, r27
    4e0e:	62 17       	cp	r22, r18
    4e10:	73 07       	cpc	r23, r19
    4e12:	84 07       	cpc	r24, r20
    4e14:	ba 07       	cpc	r27, r26
    4e16:	20 f0       	brcs	.+8      	; 0x4e20 <__divsf3_pse+0xaa>
    4e18:	62 1b       	sub	r22, r18
    4e1a:	73 0b       	sbc	r23, r19
    4e1c:	84 0b       	sbc	r24, r20
    4e1e:	ba 0b       	sbc	r27, r26
    4e20:	ee 1f       	adc	r30, r30
    4e22:	88 f7       	brcc	.-30     	; 0x4e06 <__divsf3_pse+0x90>
    4e24:	e0 95       	com	r30
    4e26:	08 95       	ret

00004e28 <__fp_inf>:
    4e28:	97 f9       	bld	r25, 7
    4e2a:	9f 67       	ori	r25, 0x7F	; 127
    4e2c:	80 e8       	ldi	r24, 0x80	; 128
    4e2e:	70 e0       	ldi	r23, 0x00	; 0
    4e30:	60 e0       	ldi	r22, 0x00	; 0
    4e32:	08 95       	ret

00004e34 <__fp_nan>:
    4e34:	9f ef       	ldi	r25, 0xFF	; 255
    4e36:	80 ec       	ldi	r24, 0xC0	; 192
    4e38:	08 95       	ret

00004e3a <__fp_powser>:
    4e3a:	df 93       	push	r29
    4e3c:	cf 93       	push	r28
    4e3e:	1f 93       	push	r17
    4e40:	0f 93       	push	r16
    4e42:	ff 92       	push	r15
    4e44:	ef 92       	push	r14
    4e46:	df 92       	push	r13
    4e48:	7b 01       	movw	r14, r22
    4e4a:	8c 01       	movw	r16, r24
    4e4c:	68 94       	set
    4e4e:	05 c0       	rjmp	.+10     	; 0x4e5a <__fp_powser+0x20>
    4e50:	da 2e       	mov	r13, r26
    4e52:	ef 01       	movw	r28, r30
    4e54:	70 d0       	rcall	.+224    	; 0x4f36 <__mulsf3x>
    4e56:	fe 01       	movw	r30, r28
    4e58:	e8 94       	clt
    4e5a:	a5 91       	lpm	r26, Z+
    4e5c:	25 91       	lpm	r18, Z+
    4e5e:	35 91       	lpm	r19, Z+
    4e60:	45 91       	lpm	r20, Z+
    4e62:	55 91       	lpm	r21, Z+
    4e64:	ae f3       	brts	.-22     	; 0x4e50 <__fp_powser+0x16>
    4e66:	ef 01       	movw	r28, r30
    4e68:	d8 d0       	rcall	.+432    	; 0x501a <__addsf3x>
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	97 01       	movw	r18, r14
    4e6e:	a8 01       	movw	r20, r16
    4e70:	da 94       	dec	r13
    4e72:	79 f7       	brne	.-34     	; 0x4e52 <__fp_powser+0x18>
    4e74:	df 90       	pop	r13
    4e76:	ef 90       	pop	r14
    4e78:	ff 90       	pop	r15
    4e7a:	0f 91       	pop	r16
    4e7c:	1f 91       	pop	r17
    4e7e:	cf 91       	pop	r28
    4e80:	df 91       	pop	r29
    4e82:	08 95       	ret

00004e84 <__fp_pscA>:
    4e84:	00 24       	eor	r0, r0
    4e86:	0a 94       	dec	r0
    4e88:	16 16       	cp	r1, r22
    4e8a:	17 06       	cpc	r1, r23
    4e8c:	18 06       	cpc	r1, r24
    4e8e:	09 06       	cpc	r0, r25
    4e90:	08 95       	ret

00004e92 <__fp_pscB>:
    4e92:	00 24       	eor	r0, r0
    4e94:	0a 94       	dec	r0
    4e96:	12 16       	cp	r1, r18
    4e98:	13 06       	cpc	r1, r19
    4e9a:	14 06       	cpc	r1, r20
    4e9c:	05 06       	cpc	r0, r21
    4e9e:	08 95       	ret

00004ea0 <__fp_round>:
    4ea0:	09 2e       	mov	r0, r25
    4ea2:	03 94       	inc	r0
    4ea4:	00 0c       	add	r0, r0
    4ea6:	11 f4       	brne	.+4      	; 0x4eac <__fp_round+0xc>
    4ea8:	88 23       	and	r24, r24
    4eaa:	52 f0       	brmi	.+20     	; 0x4ec0 <__fp_round+0x20>
    4eac:	bb 0f       	add	r27, r27
    4eae:	40 f4       	brcc	.+16     	; 0x4ec0 <__fp_round+0x20>
    4eb0:	bf 2b       	or	r27, r31
    4eb2:	11 f4       	brne	.+4      	; 0x4eb8 <__fp_round+0x18>
    4eb4:	60 ff       	sbrs	r22, 0
    4eb6:	04 c0       	rjmp	.+8      	; 0x4ec0 <__fp_round+0x20>
    4eb8:	6f 5f       	subi	r22, 0xFF	; 255
    4eba:	7f 4f       	sbci	r23, 0xFF	; 255
    4ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    4ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec0:	08 95       	ret

00004ec2 <__fp_split3>:
    4ec2:	57 fd       	sbrc	r21, 7
    4ec4:	90 58       	subi	r25, 0x80	; 128
    4ec6:	44 0f       	add	r20, r20
    4ec8:	55 1f       	adc	r21, r21
    4eca:	59 f0       	breq	.+22     	; 0x4ee2 <__fp_splitA+0x10>
    4ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    4ece:	71 f0       	breq	.+28     	; 0x4eec <__fp_splitA+0x1a>
    4ed0:	47 95       	ror	r20

00004ed2 <__fp_splitA>:
    4ed2:	88 0f       	add	r24, r24
    4ed4:	97 fb       	bst	r25, 7
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	61 f0       	breq	.+24     	; 0x4ef2 <__fp_splitA+0x20>
    4eda:	9f 3f       	cpi	r25, 0xFF	; 255
    4edc:	79 f0       	breq	.+30     	; 0x4efc <__fp_splitA+0x2a>
    4ede:	87 95       	ror	r24
    4ee0:	08 95       	ret
    4ee2:	12 16       	cp	r1, r18
    4ee4:	13 06       	cpc	r1, r19
    4ee6:	14 06       	cpc	r1, r20
    4ee8:	55 1f       	adc	r21, r21
    4eea:	f2 cf       	rjmp	.-28     	; 0x4ed0 <__fp_split3+0xe>
    4eec:	46 95       	lsr	r20
    4eee:	f1 df       	rcall	.-30     	; 0x4ed2 <__fp_splitA>
    4ef0:	08 c0       	rjmp	.+16     	; 0x4f02 <__fp_splitA+0x30>
    4ef2:	16 16       	cp	r1, r22
    4ef4:	17 06       	cpc	r1, r23
    4ef6:	18 06       	cpc	r1, r24
    4ef8:	99 1f       	adc	r25, r25
    4efa:	f1 cf       	rjmp	.-30     	; 0x4ede <__fp_splitA+0xc>
    4efc:	86 95       	lsr	r24
    4efe:	71 05       	cpc	r23, r1
    4f00:	61 05       	cpc	r22, r1
    4f02:	08 94       	sec
    4f04:	08 95       	ret

00004f06 <__fp_zero>:
    4f06:	e8 94       	clt

00004f08 <__fp_szero>:
    4f08:	bb 27       	eor	r27, r27
    4f0a:	66 27       	eor	r22, r22
    4f0c:	77 27       	eor	r23, r23
    4f0e:	cb 01       	movw	r24, r22
    4f10:	97 f9       	bld	r25, 7
    4f12:	08 95       	ret

00004f14 <inverse>:
    4f14:	9b 01       	movw	r18, r22
    4f16:	ac 01       	movw	r20, r24
    4f18:	60 e0       	ldi	r22, 0x00	; 0
    4f1a:	70 e0       	ldi	r23, 0x00	; 0
    4f1c:	80 e8       	ldi	r24, 0x80	; 128
    4f1e:	9f e3       	ldi	r25, 0x3F	; 63
    4f20:	cf c0       	rjmp	.+414    	; 0x50c0 <__divsf3>
    4f22:	b0 df       	rcall	.-160    	; 0x4e84 <__fp_pscA>
    4f24:	28 f0       	brcs	.+10     	; 0x4f30 <inverse+0x1c>
    4f26:	b5 df       	rcall	.-150    	; 0x4e92 <__fp_pscB>
    4f28:	18 f0       	brcs	.+6      	; 0x4f30 <inverse+0x1c>
    4f2a:	95 23       	and	r25, r21
    4f2c:	09 f0       	breq	.+2      	; 0x4f30 <inverse+0x1c>
    4f2e:	7c cf       	rjmp	.-264    	; 0x4e28 <__fp_inf>
    4f30:	81 cf       	rjmp	.-254    	; 0x4e34 <__fp_nan>
    4f32:	11 24       	eor	r1, r1
    4f34:	e9 cf       	rjmp	.-46     	; 0x4f08 <__fp_szero>

00004f36 <__mulsf3x>:
    4f36:	c5 df       	rcall	.-118    	; 0x4ec2 <__fp_split3>
    4f38:	a0 f3       	brcs	.-24     	; 0x4f22 <inverse+0xe>

00004f3a <__mulsf3_pse>:
    4f3a:	95 9f       	mul	r25, r21
    4f3c:	d1 f3       	breq	.-12     	; 0x4f32 <inverse+0x1e>
    4f3e:	95 0f       	add	r25, r21
    4f40:	50 e0       	ldi	r21, 0x00	; 0
    4f42:	55 1f       	adc	r21, r21
    4f44:	62 9f       	mul	r22, r18
    4f46:	f0 01       	movw	r30, r0
    4f48:	72 9f       	mul	r23, r18
    4f4a:	bb 27       	eor	r27, r27
    4f4c:	f0 0d       	add	r31, r0
    4f4e:	b1 1d       	adc	r27, r1
    4f50:	63 9f       	mul	r22, r19
    4f52:	aa 27       	eor	r26, r26
    4f54:	f0 0d       	add	r31, r0
    4f56:	b1 1d       	adc	r27, r1
    4f58:	aa 1f       	adc	r26, r26
    4f5a:	64 9f       	mul	r22, r20
    4f5c:	66 27       	eor	r22, r22
    4f5e:	b0 0d       	add	r27, r0
    4f60:	a1 1d       	adc	r26, r1
    4f62:	66 1f       	adc	r22, r22
    4f64:	82 9f       	mul	r24, r18
    4f66:	22 27       	eor	r18, r18
    4f68:	b0 0d       	add	r27, r0
    4f6a:	a1 1d       	adc	r26, r1
    4f6c:	62 1f       	adc	r22, r18
    4f6e:	73 9f       	mul	r23, r19
    4f70:	b0 0d       	add	r27, r0
    4f72:	a1 1d       	adc	r26, r1
    4f74:	62 1f       	adc	r22, r18
    4f76:	83 9f       	mul	r24, r19
    4f78:	a0 0d       	add	r26, r0
    4f7a:	61 1d       	adc	r22, r1
    4f7c:	22 1f       	adc	r18, r18
    4f7e:	74 9f       	mul	r23, r20
    4f80:	33 27       	eor	r19, r19
    4f82:	a0 0d       	add	r26, r0
    4f84:	61 1d       	adc	r22, r1
    4f86:	23 1f       	adc	r18, r19
    4f88:	84 9f       	mul	r24, r20
    4f8a:	60 0d       	add	r22, r0
    4f8c:	21 1d       	adc	r18, r1
    4f8e:	82 2f       	mov	r24, r18
    4f90:	76 2f       	mov	r23, r22
    4f92:	6a 2f       	mov	r22, r26
    4f94:	11 24       	eor	r1, r1
    4f96:	9f 57       	subi	r25, 0x7F	; 127
    4f98:	50 40       	sbci	r21, 0x00	; 0
    4f9a:	8a f0       	brmi	.+34     	; 0x4fbe <__mulsf3_pse+0x84>
    4f9c:	e1 f0       	breq	.+56     	; 0x4fd6 <__mulsf3_pse+0x9c>
    4f9e:	88 23       	and	r24, r24
    4fa0:	4a f0       	brmi	.+18     	; 0x4fb4 <__mulsf3_pse+0x7a>
    4fa2:	ee 0f       	add	r30, r30
    4fa4:	ff 1f       	adc	r31, r31
    4fa6:	bb 1f       	adc	r27, r27
    4fa8:	66 1f       	adc	r22, r22
    4faa:	77 1f       	adc	r23, r23
    4fac:	88 1f       	adc	r24, r24
    4fae:	91 50       	subi	r25, 0x01	; 1
    4fb0:	50 40       	sbci	r21, 0x00	; 0
    4fb2:	a9 f7       	brne	.-22     	; 0x4f9e <__mulsf3_pse+0x64>
    4fb4:	9e 3f       	cpi	r25, 0xFE	; 254
    4fb6:	51 05       	cpc	r21, r1
    4fb8:	70 f0       	brcs	.+28     	; 0x4fd6 <__mulsf3_pse+0x9c>
    4fba:	36 cf       	rjmp	.-404    	; 0x4e28 <__fp_inf>
    4fbc:	a5 cf       	rjmp	.-182    	; 0x4f08 <__fp_szero>
    4fbe:	5f 3f       	cpi	r21, 0xFF	; 255
    4fc0:	ec f3       	brlt	.-6      	; 0x4fbc <__mulsf3_pse+0x82>
    4fc2:	98 3e       	cpi	r25, 0xE8	; 232
    4fc4:	dc f3       	brlt	.-10     	; 0x4fbc <__mulsf3_pse+0x82>
    4fc6:	86 95       	lsr	r24
    4fc8:	77 95       	ror	r23
    4fca:	67 95       	ror	r22
    4fcc:	b7 95       	ror	r27
    4fce:	f7 95       	ror	r31
    4fd0:	e7 95       	ror	r30
    4fd2:	9f 5f       	subi	r25, 0xFF	; 255
    4fd4:	c1 f7       	brne	.-16     	; 0x4fc6 <__mulsf3_pse+0x8c>
    4fd6:	fe 2b       	or	r31, r30
    4fd8:	88 0f       	add	r24, r24
    4fda:	91 1d       	adc	r25, r1
    4fdc:	96 95       	lsr	r25
    4fde:	87 95       	ror	r24
    4fe0:	97 f9       	bld	r25, 7
    4fe2:	08 95       	ret

00004fe4 <square>:
    4fe4:	9b 01       	movw	r18, r22
    4fe6:	ac 01       	movw	r20, r24
    4fe8:	2f ca       	rjmp	.-2978   	; 0x4448 <__mulsf3>

00004fea <__eerd_word_m2560>:
    4fea:	a8 e1       	ldi	r26, 0x18	; 24
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	42 e0       	ldi	r20, 0x02	; 2
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	0c 94 64 28 	jmp	0x50c8	; 0x50c8 <__eerd_blraw_m2560>

00004ff6 <__subsf3>:
    4ff6:	50 58       	subi	r21, 0x80	; 128

00004ff8 <__addsf3>:
    4ff8:	bb 27       	eor	r27, r27
    4ffa:	aa 27       	eor	r26, r26
    4ffc:	0e d0       	rcall	.+28     	; 0x501a <__addsf3x>
    4ffe:	50 cf       	rjmp	.-352    	; 0x4ea0 <__fp_round>
    5000:	41 df       	rcall	.-382    	; 0x4e84 <__fp_pscA>
    5002:	30 f0       	brcs	.+12     	; 0x5010 <__addsf3+0x18>
    5004:	46 df       	rcall	.-372    	; 0x4e92 <__fp_pscB>
    5006:	20 f0       	brcs	.+8      	; 0x5010 <__addsf3+0x18>
    5008:	31 f4       	brne	.+12     	; 0x5016 <__addsf3+0x1e>
    500a:	9f 3f       	cpi	r25, 0xFF	; 255
    500c:	11 f4       	brne	.+4      	; 0x5012 <__addsf3+0x1a>
    500e:	1e f4       	brtc	.+6      	; 0x5016 <__addsf3+0x1e>
    5010:	11 cf       	rjmp	.-478    	; 0x4e34 <__fp_nan>
    5012:	0e f4       	brtc	.+2      	; 0x5016 <__addsf3+0x1e>
    5014:	e0 95       	com	r30
    5016:	e7 fb       	bst	r30, 7
    5018:	07 cf       	rjmp	.-498    	; 0x4e28 <__fp_inf>

0000501a <__addsf3x>:
    501a:	e9 2f       	mov	r30, r25
    501c:	52 df       	rcall	.-348    	; 0x4ec2 <__fp_split3>
    501e:	80 f3       	brcs	.-32     	; 0x5000 <__addsf3+0x8>
    5020:	ba 17       	cp	r27, r26
    5022:	62 07       	cpc	r22, r18
    5024:	73 07       	cpc	r23, r19
    5026:	84 07       	cpc	r24, r20
    5028:	95 07       	cpc	r25, r21
    502a:	18 f0       	brcs	.+6      	; 0x5032 <__addsf3x+0x18>
    502c:	71 f4       	brne	.+28     	; 0x504a <__addsf3x+0x30>
    502e:	9e f5       	brtc	.+102    	; 0x5096 <__addsf3x+0x7c>
    5030:	6a cf       	rjmp	.-300    	; 0x4f06 <__fp_zero>
    5032:	0e f4       	brtc	.+2      	; 0x5036 <__addsf3x+0x1c>
    5034:	e0 95       	com	r30
    5036:	0b 2e       	mov	r0, r27
    5038:	ba 2f       	mov	r27, r26
    503a:	a0 2d       	mov	r26, r0
    503c:	0b 01       	movw	r0, r22
    503e:	b9 01       	movw	r22, r18
    5040:	90 01       	movw	r18, r0
    5042:	0c 01       	movw	r0, r24
    5044:	ca 01       	movw	r24, r20
    5046:	a0 01       	movw	r20, r0
    5048:	11 24       	eor	r1, r1
    504a:	ff 27       	eor	r31, r31
    504c:	59 1b       	sub	r21, r25
    504e:	99 f0       	breq	.+38     	; 0x5076 <__addsf3x+0x5c>
    5050:	59 3f       	cpi	r21, 0xF9	; 249
    5052:	50 f4       	brcc	.+20     	; 0x5068 <__addsf3x+0x4e>
    5054:	50 3e       	cpi	r21, 0xE0	; 224
    5056:	68 f1       	brcs	.+90     	; 0x50b2 <__addsf3x+0x98>
    5058:	1a 16       	cp	r1, r26
    505a:	f0 40       	sbci	r31, 0x00	; 0
    505c:	a2 2f       	mov	r26, r18
    505e:	23 2f       	mov	r18, r19
    5060:	34 2f       	mov	r19, r20
    5062:	44 27       	eor	r20, r20
    5064:	58 5f       	subi	r21, 0xF8	; 248
    5066:	f3 cf       	rjmp	.-26     	; 0x504e <__addsf3x+0x34>
    5068:	46 95       	lsr	r20
    506a:	37 95       	ror	r19
    506c:	27 95       	ror	r18
    506e:	a7 95       	ror	r26
    5070:	f0 40       	sbci	r31, 0x00	; 0
    5072:	53 95       	inc	r21
    5074:	c9 f7       	brne	.-14     	; 0x5068 <__addsf3x+0x4e>
    5076:	7e f4       	brtc	.+30     	; 0x5096 <__addsf3x+0x7c>
    5078:	1f 16       	cp	r1, r31
    507a:	ba 0b       	sbc	r27, r26
    507c:	62 0b       	sbc	r22, r18
    507e:	73 0b       	sbc	r23, r19
    5080:	84 0b       	sbc	r24, r20
    5082:	ba f0       	brmi	.+46     	; 0x50b2 <__addsf3x+0x98>
    5084:	91 50       	subi	r25, 0x01	; 1
    5086:	a1 f0       	breq	.+40     	; 0x50b0 <__addsf3x+0x96>
    5088:	ff 0f       	add	r31, r31
    508a:	bb 1f       	adc	r27, r27
    508c:	66 1f       	adc	r22, r22
    508e:	77 1f       	adc	r23, r23
    5090:	88 1f       	adc	r24, r24
    5092:	c2 f7       	brpl	.-16     	; 0x5084 <__addsf3x+0x6a>
    5094:	0e c0       	rjmp	.+28     	; 0x50b2 <__addsf3x+0x98>
    5096:	ba 0f       	add	r27, r26
    5098:	62 1f       	adc	r22, r18
    509a:	73 1f       	adc	r23, r19
    509c:	84 1f       	adc	r24, r20
    509e:	48 f4       	brcc	.+18     	; 0x50b2 <__addsf3x+0x98>
    50a0:	87 95       	ror	r24
    50a2:	77 95       	ror	r23
    50a4:	67 95       	ror	r22
    50a6:	b7 95       	ror	r27
    50a8:	f7 95       	ror	r31
    50aa:	9e 3f       	cpi	r25, 0xFE	; 254
    50ac:	08 f0       	brcs	.+2      	; 0x50b0 <__addsf3x+0x96>
    50ae:	b3 cf       	rjmp	.-154    	; 0x5016 <__addsf3+0x1e>
    50b0:	93 95       	inc	r25
    50b2:	88 0f       	add	r24, r24
    50b4:	08 f0       	brcs	.+2      	; 0x50b8 <__addsf3x+0x9e>
    50b6:	99 27       	eor	r25, r25
    50b8:	ee 0f       	add	r30, r30
    50ba:	97 95       	ror	r25
    50bc:	87 95       	ror	r24
    50be:	08 95       	ret

000050c0 <__divsf3>:
    50c0:	58 de       	rcall	.-848    	; 0x4d72 <__divsf3x>
    50c2:	ee ce       	rjmp	.-548    	; 0x4ea0 <__fp_round>

000050c4 <__eerd_block_m2560>:
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22

000050c8 <__eerd_blraw_m2560>:
    50c8:	fc 01       	movw	r30, r24
    50ca:	f9 99       	sbic	0x1f, 1	; 31
    50cc:	fe cf       	rjmp	.-4      	; 0x50ca <__eerd_blraw_m2560+0x2>
    50ce:	06 c0       	rjmp	.+12     	; 0x50dc <__eerd_blraw_m2560+0x14>
    50d0:	f2 bd       	out	0x22, r31	; 34
    50d2:	e1 bd       	out	0x21, r30	; 33
    50d4:	f8 9a       	sbi	0x1f, 0	; 31
    50d6:	31 96       	adiw	r30, 0x01	; 1
    50d8:	00 b4       	in	r0, 0x20	; 32
    50da:	0d 92       	st	X+, r0
    50dc:	41 50       	subi	r20, 0x01	; 1
    50de:	50 40       	sbci	r21, 0x00	; 0
    50e0:	b8 f7       	brcc	.-18     	; 0x50d0 <__eerd_blraw_m2560+0x8>
    50e2:	08 95       	ret

000050e4 <__divmodsi4>:
    50e4:	97 fb       	bst	r25, 7
    50e6:	09 2e       	mov	r0, r25
    50e8:	05 26       	eor	r0, r21
    50ea:	0e d0       	rcall	.+28     	; 0x5108 <__divmodsi4_neg1>
    50ec:	57 fd       	sbrc	r21, 7
    50ee:	04 d0       	rcall	.+8      	; 0x50f8 <__divmodsi4_neg2>
    50f0:	14 d0       	rcall	.+40     	; 0x511a <__udivmodsi4>
    50f2:	0a d0       	rcall	.+20     	; 0x5108 <__divmodsi4_neg1>
    50f4:	00 1c       	adc	r0, r0
    50f6:	38 f4       	brcc	.+14     	; 0x5106 <__divmodsi4_exit>

000050f8 <__divmodsi4_neg2>:
    50f8:	50 95       	com	r21
    50fa:	40 95       	com	r20
    50fc:	30 95       	com	r19
    50fe:	21 95       	neg	r18
    5100:	3f 4f       	sbci	r19, 0xFF	; 255
    5102:	4f 4f       	sbci	r20, 0xFF	; 255
    5104:	5f 4f       	sbci	r21, 0xFF	; 255

00005106 <__divmodsi4_exit>:
    5106:	08 95       	ret

00005108 <__divmodsi4_neg1>:
    5108:	f6 f7       	brtc	.-4      	; 0x5106 <__divmodsi4_exit>
    510a:	90 95       	com	r25
    510c:	80 95       	com	r24
    510e:	70 95       	com	r23
    5110:	61 95       	neg	r22
    5112:	7f 4f       	sbci	r23, 0xFF	; 255
    5114:	8f 4f       	sbci	r24, 0xFF	; 255
    5116:	9f 4f       	sbci	r25, 0xFF	; 255
    5118:	08 95       	ret

0000511a <__udivmodsi4>:
    511a:	a1 e2       	ldi	r26, 0x21	; 33
    511c:	1a 2e       	mov	r1, r26
    511e:	aa 1b       	sub	r26, r26
    5120:	bb 1b       	sub	r27, r27
    5122:	fd 01       	movw	r30, r26
    5124:	0d c0       	rjmp	.+26     	; 0x5140 <__udivmodsi4_ep>

00005126 <__udivmodsi4_loop>:
    5126:	aa 1f       	adc	r26, r26
    5128:	bb 1f       	adc	r27, r27
    512a:	ee 1f       	adc	r30, r30
    512c:	ff 1f       	adc	r31, r31
    512e:	a2 17       	cp	r26, r18
    5130:	b3 07       	cpc	r27, r19
    5132:	e4 07       	cpc	r30, r20
    5134:	f5 07       	cpc	r31, r21
    5136:	20 f0       	brcs	.+8      	; 0x5140 <__udivmodsi4_ep>
    5138:	a2 1b       	sub	r26, r18
    513a:	b3 0b       	sbc	r27, r19
    513c:	e4 0b       	sbc	r30, r20
    513e:	f5 0b       	sbc	r31, r21

00005140 <__udivmodsi4_ep>:
    5140:	66 1f       	adc	r22, r22
    5142:	77 1f       	adc	r23, r23
    5144:	88 1f       	adc	r24, r24
    5146:	99 1f       	adc	r25, r25
    5148:	1a 94       	dec	r1
    514a:	69 f7       	brne	.-38     	; 0x5126 <__udivmodsi4_loop>
    514c:	60 95       	com	r22
    514e:	70 95       	com	r23
    5150:	80 95       	com	r24
    5152:	90 95       	com	r25
    5154:	9b 01       	movw	r18, r22
    5156:	ac 01       	movw	r20, r24
    5158:	bd 01       	movw	r22, r26
    515a:	cf 01       	movw	r24, r30
    515c:	08 95       	ret

0000515e <_exit>:
    515e:	ff cf       	rjmp	.-2      	; 0x515e <_exit>
