
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  000048dc  00004970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013b  0080032a  0080032a  00004a9a  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  00006ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  000074de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f65  00000000  00000000  0000775e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e95  00000000  00000000  000086c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014a1  00000000  00000000  0000c558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004629  00000000  00000000  0000d9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  00012024  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ec7  00000000  00000000  00012634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011cd  00000000  00000000  000134fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001ff  00000000  00000000  000146c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  000148c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 36 14 	jmp	0x286c	; 0x286c <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__vector_32>
      84:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__vector_42>
      ac:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	1b 0a       	sbc	r1, r27
      e6:	02 0a       	sbc	r0, r18
      e8:	dd 09       	sbc	r29, r13
      ea:	c3 09       	sbc	r28, r3
      ec:	a3 09       	sbc	r26, r3
      ee:	96 09       	sbc	r25, r6
      f0:	6b 09       	sbc	r22, r11
      f2:	4f 09       	sbc	r20, r15
      f4:	1f 09       	sbc	r17, r15
      f6:	05 09       	sbc	r16, r5
      f8:	a3 04       	cpc	r10, r3
      fa:	a3 04       	cpc	r10, r3
      fc:	a3 04       	cpc	r10, r3
      fe:	a3 04       	cpc	r10, r3
     100:	a3 04       	cpc	r10, r3
     102:	a3 04       	cpc	r10, r3
     104:	fa 08       	sbc	r15, r10
     106:	ef 08       	sbc	r14, r15
     108:	a3 04       	cpc	r10, r3
     10a:	a3 04       	cpc	r10, r3
     10c:	a3 04       	cpc	r10, r3
     10e:	a3 04       	cpc	r10, r3
     110:	a3 04       	cpc	r10, r3
     112:	a3 04       	cpc	r10, r3
     114:	a3 04       	cpc	r10, r3
     116:	a3 04       	cpc	r10, r3
     118:	a3 04       	cpc	r10, r3
     11a:	a3 04       	cpc	r10, r3
     11c:	a3 04       	cpc	r10, r3
     11e:	a3 04       	cpc	r10, r3
     120:	1f 09       	sbc	r17, r15
     122:	dd 09       	sbc	r29, r13
     124:	ec 08       	sbc	r14, r12
     126:	e7 08       	sbc	r14, r7
     128:	a3 04       	cpc	r10, r3
     12a:	a3 04       	cpc	r10, r3
     12c:	a3 04       	cpc	r10, r3
     12e:	a3 04       	cpc	r10, r3
     130:	a3 04       	cpc	r10, r3
     132:	a3 04       	cpc	r10, r3
     134:	a3 04       	cpc	r10, r3
     136:	a3 04       	cpc	r10, r3
     138:	a3 04       	cpc	r10, r3
     13a:	a3 04       	cpc	r10, r3
     13c:	a3 04       	cpc	r10, r3
     13e:	a3 04       	cpc	r10, r3
     140:	a3 09       	sbc	r26, r3
     142:	6b 09       	sbc	r22, r11
     144:	a3 04       	cpc	r10, r3
     146:	a3 04       	cpc	r10, r3
     148:	1b 0a       	sbc	r1, r27
     14a:	96 09       	sbc	r25, r6
     14c:	44 0a       	sbc	r4, r20
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ec ed       	ldi	r30, 0xDC	; 220
     194:	f8 e4       	ldi	r31, 0x48	; 72
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	aa 32       	cpi	r26, 0x2A	; 42
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	aa e2       	ldi	r26, 0x2A	; 42
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a5 36       	cpi	r26, 0x65	; 101
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 6d 24 	jmp	0x48da	; 0x48da <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "utility.h"
#include "speed_control.h"
#include "nRF24L01.h"
#include "behaviors.h"

int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29

	unsigned int i = 0;
	choosePeripheral = 1;
     1e2:	11 e0       	ldi	r17, 0x01	; 1
     1e4:	10 93 18 02 	sts	0x0218, r17

	initPeripherals();
     1e8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <initPeripherals>

	startCalibration = 1;
     1ec:	10 93 2c 04 	sts	0x042C, r17
	calibrationCycle = 0;
     1f0:	10 92 2e 04 	sts	0x042E, r1
     1f4:	10 92 2d 04 	sts	0x042D, r1


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     1f8:	c4 e6       	ldi	r28, 0x64	; 100
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
					ackPayload[11] = accZ&0xFF;
					ackPayload[12] = accZ>>8;
					ackPayload[13] = batteryLevel&0xFF;
					ackPayload[14] = batteryLevel>>8;
					ackPayload[15] = 0;
					packetId = 3;
     1fc:	83 e0       	ldi	r24, 0x03	; 3
     1fe:	e8 2e       	mov	r14, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     200:	04 e0       	ldi	r16, 0x04	; 4
     202:	f0 2e       	mov	r15, r16
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     204:	a1 2c       	mov	r10, r1
     206:	be ef       	ldi	r27, 0xFE	; 254
     208:	bb 2e       	mov	r11, r27
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     20a:	81 2c       	mov	r8, r1
     20c:	a2 e0       	ldi	r26, 0x02	; 2
     20e:	9a 2e       	mov	r9, r26
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
     210:	0f ef       	ldi	r16, 0xFF	; 255
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
     212:	41 2c       	mov	r4, r1
     214:	fc ef       	ldi	r31, 0xFC	; 252
     216:	5f 2e       	mov	r5, r31
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
     218:	21 2c       	mov	r2, r1
     21a:	e4 e0       	ldi	r30, 0x04	; 4
     21c:	3e 2e       	mov	r3, r30
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
     21e:	71 e0       	ldi	r23, 0x01	; 1
     220:	67 2e       	mov	r6, r23
     222:	71 2c       	mov	r7, r1

	while(1) {

		//PORTB ^= (1 << 6); 	// toggle the green led

		currentSelector = getSelector();
     224:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <getSelector>
     228:	80 93 2b 04 	sts	0x042B, r24

		readAccelXYZ();
     22c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <readAccelXYZ>

		computeAngle();
     230:	0e 94 ac 18 	call	0x3158	; 0x3158 <computeAngle>
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
     234:	e0 91 29 04 	lds	r30, 0x0429
     238:	f0 91 2a 04 	lds	r31, 0x042A
     23c:	2e e4       	ldi	r18, 0x4E	; 78
     23e:	e0 32       	cpi	r30, 0x20	; 32
     240:	f2 07       	cpc	r31, r18
     242:	10 f0       	brcs	.+4      	; 0x248 <main+0x8a>
			measBattery = 1;
     244:	10 93 9b 03 	sts	0x039B, r17
			//sleep(20);
			//delayCounter = 0;
		}


		if(startCalibration && calibrationCycle<=CALIBRATION_CYCLES) {
     248:	80 91 2c 04 	lds	r24, 0x042C
     24c:	88 23       	and	r24, r24
     24e:	09 f4       	brne	.+2      	; 0x252 <main+0x94>
     250:	9f c1       	rjmp	.+830    	; 0x590 <main+0x3d2>
     252:	60 91 2d 04 	lds	r22, 0x042D
     256:	70 91 2e 04 	lds	r23, 0x042E
     25a:	61 31       	cpi	r22, 0x11	; 17
     25c:	71 05       	cpc	r23, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <main+0xa4>
     260:	36 c2       	rjmp	.+1132   	; 0x6ce <main+0x510>

			if(proxUpdated) {
     262:	80 91 ce 03 	lds	r24, 0x03CE
     266:	88 23       	and	r24, r24
     268:	e9 f2       	breq	.-70     	; 0x224 <main+0x66>

				proxUpdated = 0;
     26a:	10 92 ce 03 	sts	0x03CE, r1

				if(calibrationCycle==0) {		// reset all variables
     26e:	61 15       	cp	r22, r1
     270:	71 05       	cpc	r23, r1
     272:	09 f4       	brne	.+2      	; 0x276 <main+0xb8>
     274:	ec c6       	rjmp	.+3544   	; 0x104e <main+0xe90>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
     276:	80 91 65 03 	lds	r24, 0x0365
     27a:	90 91 66 03 	lds	r25, 0x0366
     27e:	9c 01       	movw	r18, r24
     280:	44 27       	eor	r20, r20
     282:	37 fd       	sbrc	r19, 7
     284:	40 95       	com	r20
     286:	54 2f       	mov	r21, r20
     288:	80 91 9e 03 	lds	r24, 0x039E
     28c:	90 91 9f 03 	lds	r25, 0x039F
     290:	a0 91 a0 03 	lds	r26, 0x03A0
     294:	b0 91 a1 03 	lds	r27, 0x03A1
     298:	28 0f       	add	r18, r24
     29a:	39 1f       	adc	r19, r25
     29c:	4a 1f       	adc	r20, r26
     29e:	5b 1f       	adc	r21, r27
     2a0:	20 93 9e 03 	sts	0x039E, r18
     2a4:	30 93 9f 03 	sts	0x039F, r19
     2a8:	40 93 a0 03 	sts	0x03A0, r20
     2ac:	50 93 a1 03 	sts	0x03A1, r21
     2b0:	80 91 67 03 	lds	r24, 0x0367
     2b4:	90 91 68 03 	lds	r25, 0x0368
     2b8:	9c 01       	movw	r18, r24
     2ba:	44 27       	eor	r20, r20
     2bc:	37 fd       	sbrc	r19, 7
     2be:	40 95       	com	r20
     2c0:	54 2f       	mov	r21, r20
     2c2:	80 91 a2 03 	lds	r24, 0x03A2
     2c6:	90 91 a3 03 	lds	r25, 0x03A3
     2ca:	a0 91 a4 03 	lds	r26, 0x03A4
     2ce:	b0 91 a5 03 	lds	r27, 0x03A5
     2d2:	28 0f       	add	r18, r24
     2d4:	39 1f       	adc	r19, r25
     2d6:	4a 1f       	adc	r20, r26
     2d8:	5b 1f       	adc	r21, r27
     2da:	20 93 a2 03 	sts	0x03A2, r18
     2de:	30 93 a3 03 	sts	0x03A3, r19
     2e2:	40 93 a4 03 	sts	0x03A4, r20
     2e6:	50 93 a5 03 	sts	0x03A5, r21
     2ea:	80 91 69 03 	lds	r24, 0x0369
     2ee:	90 91 6a 03 	lds	r25, 0x036A
     2f2:	9c 01       	movw	r18, r24
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	80 91 a6 03 	lds	r24, 0x03A6
     300:	90 91 a7 03 	lds	r25, 0x03A7
     304:	a0 91 a8 03 	lds	r26, 0x03A8
     308:	b0 91 a9 03 	lds	r27, 0x03A9
     30c:	28 0f       	add	r18, r24
     30e:	39 1f       	adc	r19, r25
     310:	4a 1f       	adc	r20, r26
     312:	5b 1f       	adc	r21, r27
     314:	20 93 a6 03 	sts	0x03A6, r18
     318:	30 93 a7 03 	sts	0x03A7, r19
     31c:	40 93 a8 03 	sts	0x03A8, r20
     320:	50 93 a9 03 	sts	0x03A9, r21
     324:	80 91 6b 03 	lds	r24, 0x036B
     328:	90 91 6c 03 	lds	r25, 0x036C
     32c:	9c 01       	movw	r18, r24
     32e:	44 27       	eor	r20, r20
     330:	37 fd       	sbrc	r19, 7
     332:	40 95       	com	r20
     334:	54 2f       	mov	r21, r20
     336:	80 91 aa 03 	lds	r24, 0x03AA
     33a:	90 91 ab 03 	lds	r25, 0x03AB
     33e:	a0 91 ac 03 	lds	r26, 0x03AC
     342:	b0 91 ad 03 	lds	r27, 0x03AD
     346:	28 0f       	add	r18, r24
     348:	39 1f       	adc	r19, r25
     34a:	4a 1f       	adc	r20, r26
     34c:	5b 1f       	adc	r21, r27
     34e:	20 93 aa 03 	sts	0x03AA, r18
     352:	30 93 ab 03 	sts	0x03AB, r19
     356:	40 93 ac 03 	sts	0x03AC, r20
     35a:	50 93 ad 03 	sts	0x03AD, r21
     35e:	80 91 6d 03 	lds	r24, 0x036D
     362:	90 91 6e 03 	lds	r25, 0x036E
     366:	9c 01       	movw	r18, r24
     368:	44 27       	eor	r20, r20
     36a:	37 fd       	sbrc	r19, 7
     36c:	40 95       	com	r20
     36e:	54 2f       	mov	r21, r20
     370:	80 91 ae 03 	lds	r24, 0x03AE
     374:	90 91 af 03 	lds	r25, 0x03AF
     378:	a0 91 b0 03 	lds	r26, 0x03B0
     37c:	b0 91 b1 03 	lds	r27, 0x03B1
     380:	28 0f       	add	r18, r24
     382:	39 1f       	adc	r19, r25
     384:	4a 1f       	adc	r20, r26
     386:	5b 1f       	adc	r21, r27
     388:	20 93 ae 03 	sts	0x03AE, r18
     38c:	30 93 af 03 	sts	0x03AF, r19
     390:	40 93 b0 03 	sts	0x03B0, r20
     394:	50 93 b1 03 	sts	0x03B1, r21
     398:	80 91 6f 03 	lds	r24, 0x036F
     39c:	90 91 70 03 	lds	r25, 0x0370
     3a0:	9c 01       	movw	r18, r24
     3a2:	44 27       	eor	r20, r20
     3a4:	37 fd       	sbrc	r19, 7
     3a6:	40 95       	com	r20
     3a8:	54 2f       	mov	r21, r20
     3aa:	80 91 b2 03 	lds	r24, 0x03B2
     3ae:	90 91 b3 03 	lds	r25, 0x03B3
     3b2:	a0 91 b4 03 	lds	r26, 0x03B4
     3b6:	b0 91 b5 03 	lds	r27, 0x03B5
     3ba:	28 0f       	add	r18, r24
     3bc:	39 1f       	adc	r19, r25
     3be:	4a 1f       	adc	r20, r26
     3c0:	5b 1f       	adc	r21, r27
     3c2:	20 93 b2 03 	sts	0x03B2, r18
     3c6:	30 93 b3 03 	sts	0x03B3, r19
     3ca:	40 93 b4 03 	sts	0x03B4, r20
     3ce:	50 93 b5 03 	sts	0x03B5, r21
     3d2:	80 91 71 03 	lds	r24, 0x0371
     3d6:	90 91 72 03 	lds	r25, 0x0372
     3da:	9c 01       	movw	r18, r24
     3dc:	44 27       	eor	r20, r20
     3de:	37 fd       	sbrc	r19, 7
     3e0:	40 95       	com	r20
     3e2:	54 2f       	mov	r21, r20
     3e4:	80 91 b6 03 	lds	r24, 0x03B6
     3e8:	90 91 b7 03 	lds	r25, 0x03B7
     3ec:	a0 91 b8 03 	lds	r26, 0x03B8
     3f0:	b0 91 b9 03 	lds	r27, 0x03B9
     3f4:	28 0f       	add	r18, r24
     3f6:	39 1f       	adc	r19, r25
     3f8:	4a 1f       	adc	r20, r26
     3fa:	5b 1f       	adc	r21, r27
     3fc:	20 93 b6 03 	sts	0x03B6, r18
     400:	30 93 b7 03 	sts	0x03B7, r19
     404:	40 93 b8 03 	sts	0x03B8, r20
     408:	50 93 b9 03 	sts	0x03B9, r21
     40c:	80 91 73 03 	lds	r24, 0x0373
     410:	90 91 74 03 	lds	r25, 0x0374
     414:	9c 01       	movw	r18, r24
     416:	44 27       	eor	r20, r20
     418:	37 fd       	sbrc	r19, 7
     41a:	40 95       	com	r20
     41c:	54 2f       	mov	r21, r20
     41e:	80 91 ba 03 	lds	r24, 0x03BA
     422:	90 91 bb 03 	lds	r25, 0x03BB
     426:	a0 91 bc 03 	lds	r26, 0x03BC
     42a:	b0 91 bd 03 	lds	r27, 0x03BD
     42e:	28 0f       	add	r18, r24
     430:	39 1f       	adc	r19, r25
     432:	4a 1f       	adc	r20, r26
     434:	5b 1f       	adc	r21, r27
     436:	20 93 ba 03 	sts	0x03BA, r18
     43a:	30 93 bb 03 	sts	0x03BB, r19
     43e:	40 93 bc 03 	sts	0x03BC, r20
     442:	50 93 bd 03 	sts	0x03BD, r21
     446:	80 91 75 03 	lds	r24, 0x0375
     44a:	90 91 76 03 	lds	r25, 0x0376
     44e:	9c 01       	movw	r18, r24
     450:	44 27       	eor	r20, r20
     452:	37 fd       	sbrc	r19, 7
     454:	40 95       	com	r20
     456:	54 2f       	mov	r21, r20
     458:	80 91 be 03 	lds	r24, 0x03BE
     45c:	90 91 bf 03 	lds	r25, 0x03BF
     460:	a0 91 c0 03 	lds	r26, 0x03C0
     464:	b0 91 c1 03 	lds	r27, 0x03C1
     468:	28 0f       	add	r18, r24
     46a:	39 1f       	adc	r19, r25
     46c:	4a 1f       	adc	r20, r26
     46e:	5b 1f       	adc	r21, r27
     470:	20 93 be 03 	sts	0x03BE, r18
     474:	30 93 bf 03 	sts	0x03BF, r19
     478:	40 93 c0 03 	sts	0x03C0, r20
     47c:	50 93 c1 03 	sts	0x03C1, r21
     480:	80 91 77 03 	lds	r24, 0x0377
     484:	90 91 78 03 	lds	r25, 0x0378
     488:	9c 01       	movw	r18, r24
     48a:	44 27       	eor	r20, r20
     48c:	37 fd       	sbrc	r19, 7
     48e:	40 95       	com	r20
     490:	54 2f       	mov	r21, r20
     492:	80 91 c2 03 	lds	r24, 0x03C2
     496:	90 91 c3 03 	lds	r25, 0x03C3
     49a:	a0 91 c4 03 	lds	r26, 0x03C4
     49e:	b0 91 c5 03 	lds	r27, 0x03C5
     4a2:	28 0f       	add	r18, r24
     4a4:	39 1f       	adc	r19, r25
     4a6:	4a 1f       	adc	r20, r26
     4a8:	5b 1f       	adc	r21, r27
     4aa:	20 93 c2 03 	sts	0x03C2, r18
     4ae:	30 93 c3 03 	sts	0x03C3, r19
     4b2:	40 93 c4 03 	sts	0x03C4, r20
     4b6:	50 93 c5 03 	sts	0x03C5, r21
     4ba:	80 91 79 03 	lds	r24, 0x0379
     4be:	90 91 7a 03 	lds	r25, 0x037A
     4c2:	9c 01       	movw	r18, r24
     4c4:	44 27       	eor	r20, r20
     4c6:	37 fd       	sbrc	r19, 7
     4c8:	40 95       	com	r20
     4ca:	54 2f       	mov	r21, r20
     4cc:	80 91 c6 03 	lds	r24, 0x03C6
     4d0:	90 91 c7 03 	lds	r25, 0x03C7
     4d4:	a0 91 c8 03 	lds	r26, 0x03C8
     4d8:	b0 91 c9 03 	lds	r27, 0x03C9
     4dc:	28 0f       	add	r18, r24
     4de:	39 1f       	adc	r19, r25
     4e0:	4a 1f       	adc	r20, r26
     4e2:	5b 1f       	adc	r21, r27
     4e4:	20 93 c6 03 	sts	0x03C6, r18
     4e8:	30 93 c7 03 	sts	0x03C7, r19
     4ec:	40 93 c8 03 	sts	0x03C8, r20
     4f0:	50 93 c9 03 	sts	0x03C9, r21
     4f4:	80 91 7b 03 	lds	r24, 0x037B
     4f8:	90 91 7c 03 	lds	r25, 0x037C
     4fc:	9c 01       	movw	r18, r24
     4fe:	44 27       	eor	r20, r20
     500:	37 fd       	sbrc	r19, 7
     502:	40 95       	com	r20
     504:	54 2f       	mov	r21, r20
     506:	80 91 ca 03 	lds	r24, 0x03CA
     50a:	90 91 cb 03 	lds	r25, 0x03CB
     50e:	a0 91 cc 03 	lds	r26, 0x03CC
     512:	b0 91 cd 03 	lds	r27, 0x03CD
     516:	28 0f       	add	r18, r24
     518:	39 1f       	adc	r19, r25
     51a:	4a 1f       	adc	r20, r26
     51c:	5b 1f       	adc	r21, r27
     51e:	20 93 ca 03 	sts	0x03CA, r18
     522:	30 93 cb 03 	sts	0x03CB, r19
     526:	40 93 cc 03 	sts	0x03CC, r20
     52a:	50 93 cd 03 	sts	0x03CD, r21
				}

				accOffsetXSum += accX;
     52e:	20 91 21 04 	lds	r18, 0x0421
     532:	30 91 22 04 	lds	r19, 0x0422
     536:	80 91 0d 04 	lds	r24, 0x040D
     53a:	90 91 0e 04 	lds	r25, 0x040E
     53e:	28 0f       	add	r18, r24
     540:	39 1f       	adc	r19, r25
     542:	30 93 22 04 	sts	0x0422, r19
     546:	20 93 21 04 	sts	0x0421, r18
				accOffsetYSum += accY;
     54a:	20 91 23 04 	lds	r18, 0x0423
     54e:	30 91 24 04 	lds	r19, 0x0424
     552:	80 91 0f 04 	lds	r24, 0x040F
     556:	90 91 10 04 	lds	r25, 0x0410
     55a:	28 0f       	add	r18, r24
     55c:	39 1f       	adc	r19, r25
     55e:	30 93 24 04 	sts	0x0424, r19
     562:	20 93 23 04 	sts	0x0423, r18
				accOffsetZSum += accZ;
     566:	20 91 25 04 	lds	r18, 0x0425
     56a:	30 91 26 04 	lds	r19, 0x0426
     56e:	80 91 11 04 	lds	r24, 0x0411
     572:	90 91 12 04 	lds	r25, 0x0412
     576:	28 0f       	add	r18, r24
     578:	39 1f       	adc	r19, r25
     57a:	30 93 26 04 	sts	0x0426, r19
     57e:	20 93 25 04 	sts	0x0425, r18

				calibrationCycle++;
     582:	cb 01       	movw	r24, r22
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	90 93 2e 04 	sts	0x042E, r25
     58a:	80 93 2d 04 	sts	0x042D, r24
     58e:	4a ce       	rjmp	.-876    	; 0x224 <main+0x66>

			}

			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {
     590:	80 91 2d 04 	lds	r24, 0x042D
     594:	90 91 2e 04 	lds	r25, 0x042E
     598:	81 31       	cpi	r24, 0x11	; 17
     59a:	91 05       	cpc	r25, r1
     59c:	0c f0       	brlt	.+2      	; 0x5a0 <main+0x3e2>
     59e:	97 c0       	rjmp	.+302    	; 0x6ce <main+0x510>
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
     5a0:	80 91 19 02 	lds	r24, 0x0219
     5a4:	88 23       	and	r24, r24
     5a6:	09 f0       	breq	.+2      	; 0x5aa <main+0x3ec>
     5a8:	bd c1       	rjmp	.+890    	; 0x924 <main+0x766>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
     5aa:	8e e4       	ldi	r24, 0x4E	; 78
     5ac:	e0 32       	cpi	r30, 0x20	; 32
     5ae:	f8 07       	cpc	r31, r24
     5b0:	20 f0       	brcs	.+8      	; 0x5ba <main+0x3fc>
			delayCounter = 0;
     5b2:	10 92 2a 04 	sts	0x042A, r1
     5b6:	10 92 29 04 	sts	0x0429, r1
			usartTransmit(CHARGE_ON);
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
     5ba:	0e 94 89 0c 	call	0x1912	; 0x1912 <mirf_data_ready>
     5be:	88 23       	and	r24, r24
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <main+0x406>
     5c2:	e3 c1       	rjmp	.+966    	; 0x98a <main+0x7cc>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
     5c4:	80 91 2b 04 	lds	r24, 0x042B
     5c8:	88 23       	and	r24, r24
     5ca:	09 f0       	breq	.+2      	; 0x5ce <main+0x410>
     5cc:	6c c0       	rjmp	.+216    	; 0x6a6 <main+0x4e8>

			// compute velocities even if they aren't used...
			if(compute_left_vel) {
     5ce:	80 91 0f 02 	lds	r24, 0x020F
     5d2:	88 23       	and	r24, r24
     5d4:	a1 f0       	breq	.+40     	; 0x5fe <main+0x440>
				last_left_vel = left_vel_sum>>2;
     5d6:	80 91 db 03 	lds	r24, 0x03DB
     5da:	90 91 dc 03 	lds	r25, 0x03DC
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	96 95       	lsr	r25
     5e4:	87 95       	ror	r24
     5e6:	90 93 e0 03 	sts	0x03E0, r25
     5ea:	80 93 df 03 	sts	0x03DF, r24
				left_vel_changed = 1;
     5ee:	10 93 fb 03 	sts	0x03FB, r17
				compute_left_vel = 0;
     5f2:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
     5f6:	10 92 dc 03 	sts	0x03DC, r1
     5fa:	10 92 db 03 	sts	0x03DB, r1
			}

			if(compute_right_vel) {
     5fe:	80 91 10 02 	lds	r24, 0x0210
     602:	88 23       	and	r24, r24
     604:	a1 f0       	breq	.+40     	; 0x62e <main+0x470>
				last_right_vel = right_vel_sum>>2;
     606:	80 91 dd 03 	lds	r24, 0x03DD
     60a:	90 91 de 03 	lds	r25, 0x03DE
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	96 95       	lsr	r25
     614:	87 95       	ror	r24
     616:	90 93 e2 03 	sts	0x03E2, r25
     61a:	80 93 e1 03 	sts	0x03E1, r24
				right_vel_changed = 1;
     61e:	10 93 fc 03 	sts	0x03FC, r17
				compute_right_vel = 0;
     622:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
     626:	10 92 de 03 	sts	0x03DE, r1
     62a:	10 92 dd 03 	sts	0x03DD, r1
			}


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     62e:	80 91 eb 03 	lds	r24, 0x03EB
     632:	90 91 ec 03 	lds	r25, 0x03EC
     636:	90 93 fe 03 	sts	0x03FE, r25
     63a:	80 93 fd 03 	sts	0x03FD, r24
			pwm_left_working = pwm_left_desired;
     63e:	20 91 ed 03 	lds	r18, 0x03ED
     642:	30 91 ee 03 	lds	r19, 0x03EE
     646:	30 93 00 04 	sts	0x0400, r19
     64a:	20 93 ff 03 	sts	0x03FF, r18
	        pwm_left_desired_to_control = pwm_left_desired;
     64e:	30 93 da 03 	sts	0x03DA, r19
     652:	20 93 d9 03 	sts	0x03D9, r18
	        pwm_right_desired_to_control = pwm_right_desired;
     656:	90 93 d8 03 	sts	0x03D8, r25
     65a:	80 93 d7 03 	sts	0x03D7, r24

			if(obstacleAvoidanceEnabled) {
     65e:	40 91 2f 04 	lds	r20, 0x042F
     662:	44 23       	and	r20, r20
     664:	09 f0       	breq	.+2      	; 0x668 <main+0x4aa>
     666:	9c c3       	rjmp	.+1848   	; 0xda0 <main+0xbe2>

		}

		if(update_pwm) {

			update_pwm = 0;
     668:	10 92 01 04 	sts	0x0401, r1
			pwm_left = pwm_left_working;
     66c:	30 93 e6 03 	sts	0x03E6, r19
     670:	20 93 e5 03 	sts	0x03E5, r18
			pwm_right = pwm_right_working;
     674:	90 93 e4 03 	sts	0x03E4, r25
     678:	80 93 e3 03 	sts	0x03E3, r24

			if(pwm_right > 0) {
     67c:	18 16       	cp	r1, r24
     67e:	19 06       	cpc	r1, r25
     680:	0c f0       	brlt	.+2      	; 0x684 <main+0x4c6>
     682:	e7 c3       	rjmp	.+1998   	; 0xe52 <main+0xc94>
				OCR3A = (unsigned int)pwm_right;
     684:	90 93 99 00 	sts	0x0099, r25
     688:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     68c:	80 91 e5 03 	lds	r24, 0x03E5
     690:	90 91 e6 03 	lds	r25, 0x03E6
     694:	18 16       	cp	r1, r24
     696:	19 06       	cpc	r1, r25
     698:	0c f0       	brlt	.+2      	; 0x69c <main+0x4de>
     69a:	ee c3       	rjmp	.+2012   	; 0xe78 <main+0xcba>
				OCR4A = (unsigned int)pwm_left;
     69c:	90 93 a9 00 	sts	0x00A9, r25
     6a0:	80 93 a8 00 	sts	0x00A8, r24
     6a4:	bf cd       	rjmp	.-1154   	; 0x224 <main+0x66>
			}

			update_pwm = 1;


		} else if(currentSelector == 1) {		// only horizontal speed control
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <main+0x4ee>
     6aa:	8f c3       	rjmp	.+1822   	; 0xdca <main+0xc0c>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both speed control horizontal and vertical
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <main+0x4f4>
     6b0:	46 c4       	rjmp	.+2188   	; 0xf3e <main+0xd80>
			}


		}

		if(update_pwm) {
     6b2:	80 91 01 04 	lds	r24, 0x0401
     6b6:	88 23       	and	r24, r24
     6b8:	09 f4       	brne	.+2      	; 0x6bc <main+0x4fe>
     6ba:	b4 cd       	rjmp	.-1176   	; 0x224 <main+0x66>
     6bc:	20 91 ff 03 	lds	r18, 0x03FF
     6c0:	30 91 00 04 	lds	r19, 0x0400
     6c4:	80 91 fd 03 	lds	r24, 0x03FD
     6c8:	90 91 fe 03 	lds	r25, 0x03FE
     6cc:	cd cf       	rjmp	.-102    	; 0x668 <main+0x4aa>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
     6ce:	80 91 9e 03 	lds	r24, 0x039E
     6d2:	90 91 9f 03 	lds	r25, 0x039F
     6d6:	a0 91 a0 03 	lds	r26, 0x03A0
     6da:	b0 91 a1 03 	lds	r27, 0x03A1
     6de:	64 e0       	ldi	r22, 0x04	; 4
     6e0:	b6 95       	lsr	r27
     6e2:	a7 95       	ror	r26
     6e4:	97 95       	ror	r25
     6e6:	87 95       	ror	r24
     6e8:	6a 95       	dec	r22
     6ea:	d1 f7       	brne	.-12     	; 0x6e0 <main+0x522>
     6ec:	90 93 7e 03 	sts	0x037E, r25
     6f0:	80 93 7d 03 	sts	0x037D, r24
     6f4:	80 91 a2 03 	lds	r24, 0x03A2
     6f8:	90 91 a3 03 	lds	r25, 0x03A3
     6fc:	a0 91 a4 03 	lds	r26, 0x03A4
     700:	b0 91 a5 03 	lds	r27, 0x03A5
     704:	54 e0       	ldi	r21, 0x04	; 4
     706:	b6 95       	lsr	r27
     708:	a7 95       	ror	r26
     70a:	97 95       	ror	r25
     70c:	87 95       	ror	r24
     70e:	5a 95       	dec	r21
     710:	d1 f7       	brne	.-12     	; 0x706 <main+0x548>
     712:	90 93 80 03 	sts	0x0380, r25
     716:	80 93 7f 03 	sts	0x037F, r24
     71a:	80 91 a6 03 	lds	r24, 0x03A6
     71e:	90 91 a7 03 	lds	r25, 0x03A7
     722:	a0 91 a8 03 	lds	r26, 0x03A8
     726:	b0 91 a9 03 	lds	r27, 0x03A9
     72a:	44 e0       	ldi	r20, 0x04	; 4
     72c:	b6 95       	lsr	r27
     72e:	a7 95       	ror	r26
     730:	97 95       	ror	r25
     732:	87 95       	ror	r24
     734:	4a 95       	dec	r20
     736:	d1 f7       	brne	.-12     	; 0x72c <main+0x56e>
     738:	90 93 82 03 	sts	0x0382, r25
     73c:	80 93 81 03 	sts	0x0381, r24
     740:	80 91 aa 03 	lds	r24, 0x03AA
     744:	90 91 ab 03 	lds	r25, 0x03AB
     748:	a0 91 ac 03 	lds	r26, 0x03AC
     74c:	b0 91 ad 03 	lds	r27, 0x03AD
     750:	34 e0       	ldi	r19, 0x04	; 4
     752:	b6 95       	lsr	r27
     754:	a7 95       	ror	r26
     756:	97 95       	ror	r25
     758:	87 95       	ror	r24
     75a:	3a 95       	dec	r19
     75c:	d1 f7       	brne	.-12     	; 0x752 <main+0x594>
     75e:	90 93 84 03 	sts	0x0384, r25
     762:	80 93 83 03 	sts	0x0383, r24
     766:	80 91 ae 03 	lds	r24, 0x03AE
     76a:	90 91 af 03 	lds	r25, 0x03AF
     76e:	a0 91 b0 03 	lds	r26, 0x03B0
     772:	b0 91 b1 03 	lds	r27, 0x03B1
     776:	24 e0       	ldi	r18, 0x04	; 4
     778:	b6 95       	lsr	r27
     77a:	a7 95       	ror	r26
     77c:	97 95       	ror	r25
     77e:	87 95       	ror	r24
     780:	2a 95       	dec	r18
     782:	d1 f7       	brne	.-12     	; 0x778 <main+0x5ba>
     784:	90 93 86 03 	sts	0x0386, r25
     788:	80 93 85 03 	sts	0x0385, r24
     78c:	80 91 b2 03 	lds	r24, 0x03B2
     790:	90 91 b3 03 	lds	r25, 0x03B3
     794:	a0 91 b4 03 	lds	r26, 0x03B4
     798:	b0 91 b5 03 	lds	r27, 0x03B5
     79c:	74 e0       	ldi	r23, 0x04	; 4
     79e:	b6 95       	lsr	r27
     7a0:	a7 95       	ror	r26
     7a2:	97 95       	ror	r25
     7a4:	87 95       	ror	r24
     7a6:	7a 95       	dec	r23
     7a8:	d1 f7       	brne	.-12     	; 0x79e <main+0x5e0>
     7aa:	90 93 88 03 	sts	0x0388, r25
     7ae:	80 93 87 03 	sts	0x0387, r24
     7b2:	80 91 b6 03 	lds	r24, 0x03B6
     7b6:	90 91 b7 03 	lds	r25, 0x03B7
     7ba:	a0 91 b8 03 	lds	r26, 0x03B8
     7be:	b0 91 b9 03 	lds	r27, 0x03B9
     7c2:	64 e0       	ldi	r22, 0x04	; 4
     7c4:	b6 95       	lsr	r27
     7c6:	a7 95       	ror	r26
     7c8:	97 95       	ror	r25
     7ca:	87 95       	ror	r24
     7cc:	6a 95       	dec	r22
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <main+0x606>
     7d0:	90 93 8a 03 	sts	0x038A, r25
     7d4:	80 93 89 03 	sts	0x0389, r24
     7d8:	80 91 ba 03 	lds	r24, 0x03BA
     7dc:	90 91 bb 03 	lds	r25, 0x03BB
     7e0:	a0 91 bc 03 	lds	r26, 0x03BC
     7e4:	b0 91 bd 03 	lds	r27, 0x03BD
     7e8:	54 e0       	ldi	r21, 0x04	; 4
     7ea:	b6 95       	lsr	r27
     7ec:	a7 95       	ror	r26
     7ee:	97 95       	ror	r25
     7f0:	87 95       	ror	r24
     7f2:	5a 95       	dec	r21
     7f4:	d1 f7       	brne	.-12     	; 0x7ea <main+0x62c>
     7f6:	90 93 8c 03 	sts	0x038C, r25
     7fa:	80 93 8b 03 	sts	0x038B, r24
     7fe:	80 91 c2 03 	lds	r24, 0x03C2
     802:	90 91 c3 03 	lds	r25, 0x03C3
     806:	a0 91 c4 03 	lds	r26, 0x03C4
     80a:	b0 91 c5 03 	lds	r27, 0x03C5
     80e:	44 e0       	ldi	r20, 0x04	; 4
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	4a 95       	dec	r20
     81a:	d1 f7       	brne	.-12     	; 0x810 <main+0x652>
     81c:	bc 01       	movw	r22, r24
     81e:	80 91 c6 03 	lds	r24, 0x03C6
     822:	90 91 c7 03 	lds	r25, 0x03C7
     826:	a0 91 c8 03 	lds	r26, 0x03C8
     82a:	b0 91 c9 03 	lds	r27, 0x03C9
     82e:	34 e0       	ldi	r19, 0x04	; 4
     830:	b6 95       	lsr	r27
     832:	a7 95       	ror	r26
     834:	97 95       	ror	r25
     836:	87 95       	ror	r24
     838:	3a 95       	dec	r19
     83a:	d1 f7       	brne	.-12     	; 0x830 <main+0x672>
     83c:	ac 01       	movw	r20, r24
     83e:	80 91 ca 03 	lds	r24, 0x03CA
     842:	90 91 cb 03 	lds	r25, 0x03CB
     846:	a0 91 cc 03 	lds	r26, 0x03CC
     84a:	b0 91 cd 03 	lds	r27, 0x03CD
     84e:	24 e0       	ldi	r18, 0x04	; 4
     850:	b6 95       	lsr	r27
     852:	a7 95       	ror	r26
     854:	97 95       	ror	r25
     856:	87 95       	ror	r24
     858:	2a 95       	dec	r18
     85a:	d1 f7       	brne	.-12     	; 0x850 <main+0x692>
     85c:	9c 01       	movw	r18, r24
     85e:	80 91 be 03 	lds	r24, 0x03BE
     862:	90 91 bf 03 	lds	r25, 0x03BF
     866:	a0 91 c0 03 	lds	r26, 0x03C0
     86a:	b0 91 c1 03 	lds	r27, 0x03C1
     86e:	68 94       	set
     870:	13 f8       	bld	r1, 3
     872:	b6 95       	lsr	r27
     874:	a7 95       	ror	r26
     876:	97 95       	ror	r25
     878:	87 95       	ror	r24
     87a:	16 94       	lsr	r1
     87c:	d1 f7       	brne	.-12     	; 0x872 <main+0x6b4>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
     87e:	80 50       	subi	r24, 0x00	; 0
     880:	92 40       	sbci	r25, 0x02	; 2
     882:	90 93 8e 03 	sts	0x038E, r25
     886:	80 93 8d 03 	sts	0x038D, r24
     88a:	60 50       	subi	r22, 0x00	; 0
     88c:	72 40       	sbci	r23, 0x02	; 2
     88e:	70 93 90 03 	sts	0x0390, r23
     892:	60 93 8f 03 	sts	0x038F, r22
     896:	40 50       	subi	r20, 0x00	; 0
     898:	52 40       	sbci	r21, 0x02	; 2
     89a:	50 93 92 03 	sts	0x0392, r21
     89e:	40 93 91 03 	sts	0x0391, r20
     8a2:	20 50       	subi	r18, 0x00	; 0
     8a4:	32 40       	sbci	r19, 0x02	; 2
     8a6:	30 93 94 03 	sts	0x0394, r19
     8aa:	20 93 93 03 	sts	0x0393, r18
			}

			accOffsetX = accOffsetXSum>>4;
     8ae:	80 91 21 04 	lds	r24, 0x0421
     8b2:	90 91 22 04 	lds	r25, 0x0422
     8b6:	95 95       	asr	r25
     8b8:	87 95       	ror	r24
     8ba:	95 95       	asr	r25
     8bc:	87 95       	ror	r24
     8be:	95 95       	asr	r25
     8c0:	87 95       	ror	r24
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
     8c6:	90 93 1a 04 	sts	0x041A, r25
     8ca:	80 93 19 04 	sts	0x0419, r24
			accOffsetY = accOffsetYSum>>4;
     8ce:	80 91 23 04 	lds	r24, 0x0423
     8d2:	90 91 24 04 	lds	r25, 0x0424
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	95 95       	asr	r25
     8e0:	87 95       	ror	r24
     8e2:	95 95       	asr	r25
     8e4:	87 95       	ror	r24
     8e6:	90 93 1c 04 	sts	0x041C, r25
     8ea:	80 93 1b 04 	sts	0x041B, r24
			accOffsetZ = accOffsetZSum>>4;
     8ee:	80 91 25 04 	lds	r24, 0x0425
     8f2:	90 91 26 04 	lds	r25, 0x0426
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	95 95       	asr	r25
     8fc:	87 95       	ror	r24
     8fe:	95 95       	asr	r25
     900:	87 95       	ror	r24
     902:	95 95       	asr	r25
     904:	87 95       	ror	r24
     906:	90 93 1e 04 	sts	0x041E, r25
     90a:	80 93 1d 04 	sts	0x041D, r24

			startCalibration = 0;
     90e:	10 92 2c 04 	sts	0x042C, r1
			calibrationCycle = 0;
     912:	10 92 2e 04 	sts	0x042E, r1
     916:	10 92 2d 04 	sts	0x042D, r1
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
     91a:	80 91 19 02 	lds	r24, 0x0219
     91e:	88 23       	and	r24, r24
     920:	09 f4       	brne	.+2      	; 0x924 <main+0x766>
     922:	43 ce       	rjmp	.-890    	; 0x5aa <main+0x3ec>

			ir_move = ir_remote_get_data();
     924:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <ir_remote_get_data>
     928:	80 93 08 04 	sts	0x0408, r24

			if(command_received) {
     92c:	90 91 09 04 	lds	r25, 0x0409
     930:	99 23       	and	r25, r25
     932:	09 f4       	brne	.+2      	; 0x936 <main+0x778>
     934:	bb c1       	rjmp	.+886    	; 0xcac <main+0xaee>

				command_received = 0;
     936:	10 92 09 04 	sts	0x0409, r1

				switch(ir_move) {
     93a:	e8 2f       	mov	r30, r24
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	e5 33       	cpi	r30, 0x35	; 53
     940:	f1 05       	cpc	r31, r1
     942:	08 f4       	brcc	.+2      	; 0x946 <main+0x788>
     944:	3a c4       	rjmp	.+2164   	; 0x11ba <main+0xffc>
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
     946:	80 91 eb 03 	lds	r24, 0x03EB
     94a:	90 91 ec 03 	lds	r25, 0x03EC
     94e:	20 91 ed 03 	lds	r18, 0x03ED
     952:	30 91 ee 03 	lds	r19, 0x03EE
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
     956:	97 fd       	sbrc	r25, 7
     958:	ba c4       	rjmp	.+2420   	; 0x12ce <main+0x1110>
					speedr = pwm_right_desired >> 2;
				} else {
					speedr = (-pwm_right_desired) >> 2;
     95a:	95 95       	asr	r25
     95c:	87 95       	ror	r24
     95e:	95 95       	asr	r25
     960:	87 95       	ror	r24
     962:	90 93 05 04 	sts	0x0405, r25
     966:	80 93 04 04 	sts	0x0404, r24
				}
				if(pwm_left_desired >= 0) {
     96a:	37 fd       	sbrc	r19, 7
     96c:	93 c1       	rjmp	.+806    	; 0xc94 <main+0xad6>
					speedl = pwm_left_desired >> 2;
     96e:	c9 01       	movw	r24, r18
     970:	95 95       	asr	r25
     972:	87 95       	ror	r24
     974:	95 95       	asr	r25
     976:	87 95       	ror	r24
     978:	90 93 03 04 	sts	0x0403, r25
     97c:	80 93 02 04 	sts	0x0402, r24
     980:	e0 91 29 04 	lds	r30, 0x0429
     984:	f0 91 2a 04 	lds	r31, 0x042A
     988:	10 ce       	rjmp	.-992    	; 0x5aa <main+0x3ec>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
     98a:	87 e0       	ldi	r24, 0x07	; 7
     98c:	60 e7       	ldi	r22, 0x70	; 112
     98e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <mirf_config_register>

			mirf_get_data(rfData);
     992:	86 e5       	ldi	r24, 0x56	; 86
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 b4 0c 	call	0x1968	; 0x1968 <mirf_get_data>
			flush_rx_fifo();
     99a:	0e 94 ae 0c 	call	0x195c	; 0x195c <flush_rx_fifo>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     99e:	60 91 56 04 	lds	r22, 0x0456
     9a2:	66 23       	and	r22, r22
     9a4:	69 f4       	brne	.+26     	; 0x9c0 <main+0x802>
     9a6:	80 91 57 04 	lds	r24, 0x0457
     9aa:	88 23       	and	r24, r24
     9ac:	49 f4       	brne	.+18     	; 0x9c0 <main+0x802>
     9ae:	80 91 58 04 	lds	r24, 0x0458
     9b2:	88 23       	and	r24, r24
     9b4:	29 f4       	brne	.+10     	; 0x9c0 <main+0x802>
     9b6:	80 91 59 04 	lds	r24, 0x0459
     9ba:	88 30       	cpi	r24, 0x08	; 8
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <main+0x802>
     9be:	6e c6       	rjmp	.+3292   	; 0x169c <main+0x14de>

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     9c0:	40 91 5a 04 	lds	r20, 0x045A
     9c4:	84 2f       	mov	r24, r20
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8f 77       	andi	r24, 0x7F	; 127
     9ca:	90 70       	andi	r25, 0x00	; 0
     9cc:	90 93 05 04 	sts	0x0405, r25
     9d0:	80 93 04 04 	sts	0x0404, r24
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     9d4:	70 91 5b 04 	lds	r23, 0x045B
     9d8:	27 2f       	mov	r18, r23
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	2f 77       	andi	r18, 0x7F	; 127
     9de:	30 70       	andi	r19, 0x00	; 0
     9e0:	30 93 03 04 	sts	0x0403, r19
     9e4:	20 93 02 04 	sts	0x0402, r18
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
     9e8:	47 fd       	sbrc	r20, 7
     9ea:	d2 c3       	rjmp	.+1956   	; 0x1190 <main+0xfd2>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	44 27       	eor	r20, r20
     9f6:	55 27       	eor	r21, r21
     9f8:	48 1b       	sub	r20, r24
     9fa:	59 0b       	sbc	r21, r25
     9fc:	50 93 ec 03 	sts	0x03EC, r21
     a00:	40 93 eb 03 	sts	0x03EB, r20
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
     a04:	77 fd       	sbrc	r23, 7
     a06:	cf c3       	rjmp	.+1950   	; 0x11a6 <main+0xfe8>
				pwm_left_desired = speedl<<2;
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
     a08:	c9 01       	movw	r24, r18
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	90 95       	com	r25
     a14:	81 95       	neg	r24
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	90 93 ee 03 	sts	0x03EE, r25
     a1c:	80 93 ed 03 	sts	0x03ED, r24
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     a20:	22 e0       	ldi	r18, 0x02	; 2
     a22:	41 30       	cpi	r20, 0x01	; 1
     a24:	52 07       	cpc	r21, r18
     a26:	34 f0       	brlt	.+12     	; 0xa34 <main+0x876>
     a28:	90 92 ec 03 	sts	0x03EC, r9
     a2c:	80 92 eb 03 	sts	0x03EB, r8
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	52 e0       	ldi	r21, 0x02	; 2
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     a34:	22 e0       	ldi	r18, 0x02	; 2
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	92 07       	cpc	r25, r18
     a3a:	34 f0       	brlt	.+12     	; 0xa48 <main+0x88a>
     a3c:	90 92 ee 03 	sts	0x03EE, r9
     a40:	80 92 ed 03 	sts	0x03ED, r8
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	92 e0       	ldi	r25, 0x02	; 2
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     a48:	2e ef       	ldi	r18, 0xFE	; 254
     a4a:	40 30       	cpi	r20, 0x00	; 0
     a4c:	52 07       	cpc	r21, r18
     a4e:	24 f4       	brge	.+8      	; 0xa58 <main+0x89a>
     a50:	b0 92 ec 03 	sts	0x03EC, r11
     a54:	a0 92 eb 03 	sts	0x03EB, r10
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     a58:	2e ef       	ldi	r18, 0xFE	; 254
     a5a:	80 30       	cpi	r24, 0x00	; 0
     a5c:	92 07       	cpc	r25, r18
     a5e:	24 f4       	brge	.+8      	; 0xa68 <main+0x8aa>
     a60:	b0 92 ee 03 	sts	0x03EE, r11
     a64:	a0 92 ed 03 	sts	0x03ED, r10


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     a68:	26 2f       	mov	r18, r22
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	30 93 4f 04 	sts	0x044F, r19
     a70:	20 93 4e 04 	sts	0x044E, r18
     a74:	e0 91 57 04 	lds	r30, 0x0457
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	f0 93 51 04 	sts	0x0451, r31
     a7e:	e0 93 50 04 	sts	0x0450, r30
     a82:	c0 90 58 04 	lds	r12, 0x0458
     a86:	dd 24       	eor	r13, r13
     a88:	d0 92 53 04 	sts	0x0453, r13
     a8c:	c0 92 52 04 	sts	0x0452, r12
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     a90:	92 2f       	mov	r25, r18
     a92:	88 27       	eor	r24, r24
     a94:	82 1b       	sub	r24, r18
     a96:	93 0b       	sbc	r25, r19
     a98:	be 01       	movw	r22, r28
     a9a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__udivmodhi4>
     a9e:	26 2f       	mov	r18, r22
     aa0:	20 95       	com	r18
     aa2:	20 93 14 02 	sts	0x0214, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     aa6:	9e 2f       	mov	r25, r30
     aa8:	88 27       	eor	r24, r24
     aaa:	8e 1b       	sub	r24, r30
     aac:	9f 0b       	sbc	r25, r31
     aae:	be 01       	movw	r22, r28
     ab0:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__udivmodhi4>
     ab4:	60 95       	com	r22
     ab6:	60 93 16 02 	sts	0x0216, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     aba:	9c 2d       	mov	r25, r12
     abc:	88 27       	eor	r24, r24
     abe:	8c 19       	sub	r24, r12
     ac0:	9d 09       	sbc	r25, r13
     ac2:	be 01       	movw	r22, r28
     ac4:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__udivmodhi4>
     ac8:	60 95       	com	r22
     aca:	60 93 15 02 	sts	0x0215, r22
			updateRedLed(pwm_red);
     ace:	82 2f       	mov	r24, r18
     ad0:	0e 94 76 1e 	call	0x3cec	; 0x3cec <updateRedLed>
			updateGreenLed(pwm_green);
     ad4:	80 91 15 02 	lds	r24, 0x0215
     ad8:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <updateGreenLed>
			updateBlueLed(pwm_blue);
     adc:	80 91 16 02 	lds	r24, 0x0216
     ae0:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     ae4:	80 91 59 04 	lds	r24, 0x0459
     ae8:	80 ff       	sbrs	r24, 0
     aea:	6d c1       	rjmp	.+730    	; 0xdc6 <main+0xc08>
				LED_IR1_LOW;
     aec:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     aee:	81 ff       	sbrs	r24, 1
     af0:	68 c1       	rjmp	.+720    	; 0xdc2 <main+0xc04>
				LED_IR2_LOW;
     af2:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     af4:	98 2f       	mov	r25, r24
     af6:	82 ff       	sbrs	r24, 2
     af8:	61 c1       	rjmp	.+706    	; 0xdbc <main+0xbfe>
				irEnabled = 1;
     afa:	10 93 19 02 	sts	0x0219, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     afe:	94 ff       	sbrs	r25, 4
     b00:	05 c0       	rjmp	.+10     	; 0xb0c <main+0x94e>
				if(!startCalibration) {					// if not already calibrating the sensors
     b02:	20 91 2c 04 	lds	r18, 0x042C
     b06:	22 23       	and	r18, r18
     b08:	09 f4       	brne	.+2      	; 0xb0c <main+0x94e>
     b0a:	30 c5       	rjmp	.+2656   	; 0x156c <main+0x13ae>
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);
				}
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b0c:	96 ff       	sbrs	r25, 6
     b0e:	53 c1       	rjmp	.+678    	; 0xdb6 <main+0xbf8>
				obstacleAvoidanceEnabled = 1;
     b10:	10 93 2f 04 	sts	0x042F, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     b14:	88 0f       	add	r24, r24
     b16:	88 0b       	sbc	r24, r24
     b18:	81 23       	and	r24, r17
     b1a:	80 93 34 04 	sts	0x0434, r24
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
     b1e:	80 91 5c 04 	lds	r24, 0x045C
     b22:	80 ff       	sbrs	r24, 0
     b24:	37 c1       	rjmp	.+622    	; 0xd94 <main+0xbd6>
					GRREEN_LED0_ON;
     b26:	80 91 0b 01 	lds	r24, 0x010B
     b2a:	8e 7f       	andi	r24, 0xFE	; 254
     b2c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
     b30:	80 91 5c 04 	lds	r24, 0x045C
     b34:	81 ff       	sbrs	r24, 1
     b36:	28 c1       	rjmp	.+592    	; 0xd88 <main+0xbca>
					GRREEN_LED1_ON;
     b38:	80 91 0b 01 	lds	r24, 0x010B
     b3c:	8d 7f       	andi	r24, 0xFD	; 253
     b3e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
     b42:	80 91 5c 04 	lds	r24, 0x045C
     b46:	82 ff       	sbrs	r24, 2
     b48:	19 c1       	rjmp	.+562    	; 0xd7c <main+0xbbe>
					GRREEN_LED2_ON;
     b4a:	80 91 0b 01 	lds	r24, 0x010B
     b4e:	8b 7f       	andi	r24, 0xFB	; 251
     b50:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
     b54:	80 91 5c 04 	lds	r24, 0x045C
     b58:	83 ff       	sbrs	r24, 3
     b5a:	0e c1       	rjmp	.+540    	; 0xd78 <main+0xbba>
					GRREEN_LED3_ON;
     b5c:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GRREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
     b5e:	80 91 5c 04 	lds	r24, 0x045C
     b62:	84 ff       	sbrs	r24, 4
     b64:	03 c1       	rjmp	.+518    	; 0xd6c <main+0xbae>
					GRREEN_LED4_ON;
     b66:	80 91 0b 01 	lds	r24, 0x010B
     b6a:	8f 7e       	andi	r24, 0xEF	; 239
     b6c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
     b70:	80 91 5c 04 	lds	r24, 0x045C
     b74:	85 ff       	sbrs	r24, 5
     b76:	f4 c0       	rjmp	.+488    	; 0xd60 <main+0xba2>
					GRREEN_LED5_ON;
     b78:	80 91 0b 01 	lds	r24, 0x010B
     b7c:	8f 7d       	andi	r24, 0xDF	; 223
     b7e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
     b82:	80 91 5c 04 	lds	r24, 0x045C
     b86:	86 ff       	sbrs	r24, 6
     b88:	96 c0       	rjmp	.+300    	; 0xcb6 <main+0xaf8>
					GRREEN_LED6_ON;
     b8a:	80 91 0b 01 	lds	r24, 0x010B
     b8e:	8f 7b       	andi	r24, 0xBF	; 191
     b90:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
     b94:	80 91 5c 04 	lds	r24, 0x045C
     b98:	87 fd       	sbrc	r24, 7
     b9a:	96 c0       	rjmp	.+300    	; 0xcc8 <main+0xb0a>
					GRREEN_LED7_ON;
				} else {
					GRREEN_LED7_OFF;
     b9c:	80 91 0b 01 	lds	r24, 0x010B
     ba0:	80 68       	ori	r24, 0x80	; 128
     ba2:	80 93 0b 01 	sts	0x010B, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
     ba6:	80 91 13 02 	lds	r24, 0x0213
     baa:	80 93 3e 04 	sts	0x043E, r24

			switch(packetId) {
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <main+0x9f6>
     bb2:	96 c0       	rjmp	.+300    	; 0xce0 <main+0xb22>
     bb4:	85 30       	cpi	r24, 0x05	; 5
     bb6:	08 f0       	brcs	.+2      	; 0xbba <main+0x9fc>
     bb8:	6b c1       	rjmp	.+726    	; 0xe90 <main+0xcd2>
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <main+0xa02>
     bbe:	64 c0       	rjmp	.+200    	; 0xc88 <main+0xaca>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     bc0:	90 91 65 03 	lds	r25, 0x0365
     bc4:	80 91 66 03 	lds	r24, 0x0366
     bc8:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[2] = proximityResult[0]>>8;
     bcc:	80 93 40 04 	sts	0x0440, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     bd0:	90 91 67 03 	lds	r25, 0x0367
     bd4:	80 91 68 03 	lds	r24, 0x0368
     bd8:	90 93 41 04 	sts	0x0441, r25
					ackPayload[4] = proximityResult[1]>>8;
     bdc:	80 93 42 04 	sts	0x0442, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     be0:	90 91 69 03 	lds	r25, 0x0369
     be4:	80 91 6a 03 	lds	r24, 0x036A
     be8:	90 93 43 04 	sts	0x0443, r25
					ackPayload[6] = proximityResult[2]>>8;
     bec:	80 93 44 04 	sts	0x0444, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     bf0:	90 91 6b 03 	lds	r25, 0x036B
     bf4:	80 91 6c 03 	lds	r24, 0x036C
     bf8:	90 93 45 04 	sts	0x0445, r25
					ackPayload[8] = proximityResult[3]>>8;
     bfc:	80 93 46 04 	sts	0x0446, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     c00:	90 91 6f 03 	lds	r25, 0x036F
     c04:	80 91 70 03 	lds	r24, 0x0370
     c08:	90 93 47 04 	sts	0x0447, r25
					ackPayload[10] = proximityResult[5]>>8;
     c0c:	80 93 48 04 	sts	0x0448, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     c10:	90 91 71 03 	lds	r25, 0x0371
     c14:	80 91 72 03 	lds	r24, 0x0372
     c18:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = proximityResult[6]>>8;
     c1c:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     c20:	90 91 73 03 	lds	r25, 0x0373
     c24:	80 91 74 03 	lds	r24, 0x0374
     c28:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = proximityResult[7]>>8;
     c2c:	80 93 4c 04 	sts	0x044C, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     c30:	30 91 03 01 	lds	r19, 0x0103
     c34:	80 91 03 01 	lds	r24, 0x0103
     c38:	20 91 03 01 	lds	r18, 0x0103
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	80 72       	andi	r24, 0x20	; 32
     c40:	90 70       	andi	r25, 0x00	; 0
     c42:	95 95       	asr	r25
     c44:	87 95       	ror	r24
     c46:	95 95       	asr	r25
     c48:	87 95       	ror	r24
     c4a:	95 95       	asr	r25
     c4c:	87 95       	ror	r24
     c4e:	95 95       	asr	r25
     c50:	87 95       	ror	r24
     c52:	95 95       	asr	r25
     c54:	87 95       	ror	r24
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	22 1f       	adc	r18, r18
     c5c:	22 27       	eor	r18, r18
     c5e:	22 1f       	adc	r18, r18
     c60:	22 0f       	add	r18, r18
     c62:	22 0f       	add	r18, r18
     c64:	28 2b       	or	r18, r24
     c66:	83 2f       	mov	r24, r19
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	80 71       	andi	r24, 0x10	; 16
     c6c:	90 70       	andi	r25, 0x00	; 0
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	95 95       	asr	r25
     c78:	87 95       	ror	r24
     c7a:	95 95       	asr	r25
     c7c:	87 95       	ror	r24
     c7e:	28 2b       	or	r18, r24
     c80:	20 93 4d 04 	sts	0x044D, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     c84:	f0 92 13 02 	sts	0x0213, r15
					break;


			}

			writeAckPayload(ackPayload, 16);
     c88:	8e e3       	ldi	r24, 0x3E	; 62
     c8a:	94 e0       	ldi	r25, 0x04	; 4
     c8c:	60 e1       	ldi	r22, 0x10	; 16
     c8e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <writeAckPayload>
     c92:	98 cc       	rjmp	.-1744   	; 0x5c4 <main+0x406>
					speedr = (-pwm_right_desired) >> 2;
				}
				if(pwm_left_desired >= 0) {
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
     c94:	88 27       	eor	r24, r24
     c96:	99 27       	eor	r25, r25
     c98:	82 1b       	sub	r24, r18
     c9a:	93 0b       	sbc	r25, r19
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	95 95       	asr	r25
     ca2:	87 95       	ror	r24
     ca4:	90 93 03 04 	sts	0x0403, r25
     ca8:	80 93 02 04 	sts	0x0402, r24
     cac:	e0 91 29 04 	lds	r30, 0x0429
     cb0:	f0 91 2a 04 	lds	r31, 0x042A
     cb4:	7a cc       	rjmp	.-1804   	; 0x5aa <main+0x3ec>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GRREEN_LED6_ON;
				} else {
					GRREEN_LED6_OFF;
     cb6:	80 91 0b 01 	lds	r24, 0x010B
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	80 93 0b 01 	sts	0x010B, r24
				}

				if(bit_is_set(rfData[6], 7) ) {
     cc0:	80 91 5c 04 	lds	r24, 0x045C
     cc4:	87 ff       	sbrs	r24, 7
     cc6:	6a cf       	rjmp	.-300    	; 0xb9c <main+0x9de>
					GRREEN_LED7_ON;
     cc8:	80 91 0b 01 	lds	r24, 0x010B
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	80 93 0b 01 	sts	0x010B, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
     cd2:	80 91 13 02 	lds	r24, 0x0213
     cd6:	80 93 3e 04 	sts	0x043E, r24

			switch(packetId) {
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	09 f0       	breq	.+2      	; 0xce0 <main+0xb22>
     cde:	6a cf       	rjmp	.-300    	; 0xbb4 <main+0x9f6>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
     ce0:	90 91 6d 03 	lds	r25, 0x036D
     ce4:	80 91 6e 03 	lds	r24, 0x036E
     ce8:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[2] = proximityResult[4]>>8;
     cec:	80 93 40 04 	sts	0x0440, r24
					ackPayload[3] = proximityResult[8]&0xFF;
     cf0:	90 91 75 03 	lds	r25, 0x0375
     cf4:	80 91 76 03 	lds	r24, 0x0376
     cf8:	90 93 41 04 	sts	0x0441, r25
					ackPayload[4] = proximityResult[8]>>8;
     cfc:	80 93 42 04 	sts	0x0442, r24
					ackPayload[5] = proximityResult[9]&0xFF;
     d00:	90 91 77 03 	lds	r25, 0x0377
     d04:	80 91 78 03 	lds	r24, 0x0378
     d08:	90 93 43 04 	sts	0x0443, r25
					ackPayload[6] = proximityResult[9]>>8;
     d0c:	80 93 44 04 	sts	0x0444, r24
					ackPayload[7] = proximityResult[10]&0xFF;
     d10:	90 91 79 03 	lds	r25, 0x0379
     d14:	80 91 7a 03 	lds	r24, 0x037A
     d18:	90 93 45 04 	sts	0x0445, r25
					ackPayload[8] = proximityResult[10]>>8;
     d1c:	80 93 46 04 	sts	0x0446, r24
					ackPayload[9] = proximityResult[11]&0xFF;
     d20:	90 91 7b 03 	lds	r25, 0x037B
     d24:	80 91 7c 03 	lds	r24, 0x037C
     d28:	90 93 47 04 	sts	0x0447, r25
					ackPayload[10] = proximityResult[11]>>8;
     d2c:	80 93 48 04 	sts	0x0448, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     d30:	90 91 0d 04 	lds	r25, 0x040D
     d34:	80 91 0e 04 	lds	r24, 0x040E
     d38:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = accX>>8;
     d3c:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = accY&0xFF;
     d40:	90 91 0f 04 	lds	r25, 0x040F
     d44:	80 91 10 04 	lds	r24, 0x0410
     d48:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = accY>>8;
     d4c:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = ir_move;
     d50:	80 91 08 04 	lds	r24, 0x0408
     d54:	80 93 4d 04 	sts	0x044D, r24
					packetId = 5;
     d58:	85 e0       	ldi	r24, 0x05	; 5
     d5a:	80 93 13 02 	sts	0x0213, r24
					break;
     d5e:	94 cf       	rjmp	.-216    	; 0xc88 <main+0xaca>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GRREEN_LED5_ON;
				} else {
					GRREEN_LED5_OFF;
     d60:	80 91 0b 01 	lds	r24, 0x010B
     d64:	80 62       	ori	r24, 0x20	; 32
     d66:	80 93 0b 01 	sts	0x010B, r24
     d6a:	0b cf       	rjmp	.-490    	; 0xb82 <main+0x9c4>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GRREEN_LED4_ON;
				} else {
					GRREEN_LED4_OFF;
     d6c:	80 91 0b 01 	lds	r24, 0x010B
     d70:	80 61       	ori	r24, 0x10	; 16
     d72:	80 93 0b 01 	sts	0x010B, r24
     d76:	fc ce       	rjmp	.-520    	; 0xb70 <main+0x9b2>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GRREEN_LED3_ON;
				} else {
					GRREEN_LED3_OFF;
     d78:	a3 9a       	sbi	0x14, 3	; 20
     d7a:	f1 ce       	rjmp	.-542    	; 0xb5e <main+0x9a0>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GRREEN_LED2_ON;
				} else {
					GRREEN_LED2_OFF;
     d7c:	80 91 0b 01 	lds	r24, 0x010B
     d80:	84 60       	ori	r24, 0x04	; 4
     d82:	80 93 0b 01 	sts	0x010B, r24
     d86:	e6 ce       	rjmp	.-564    	; 0xb54 <main+0x996>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GRREEN_LED1_ON;
				} else {
					GRREEN_LED1_OFF;
     d88:	80 91 0b 01 	lds	r24, 0x010B
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	80 93 0b 01 	sts	0x010B, r24
     d92:	d7 ce       	rjmp	.-594    	; 0xb42 <main+0x984>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GRREEN_LED0_ON;
				} else {
					GRREEN_LED0_OFF;
     d94:	80 91 0b 01 	lds	r24, 0x010B
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	80 93 0b 01 	sts	0x010B, r24
     d9e:	c8 ce       	rjmp	.-624    	; 0xb30 <main+0x972>
			pwm_left_working = pwm_left_desired;
	        pwm_left_desired_to_control = pwm_left_desired;
	        pwm_right_desired_to_control = pwm_right_desired;

			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
     da0:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <obstacleAvoidance>
     da4:	20 91 ff 03 	lds	r18, 0x03FF
     da8:	30 91 00 04 	lds	r19, 0x0400
     dac:	80 91 fd 03 	lds	r24, 0x03FD
     db0:	90 91 fe 03 	lds	r25, 0x03FE
     db4:	59 cc       	rjmp	.-1870   	; 0x668 <main+0x4aa>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
     db6:	10 92 2f 04 	sts	0x042F, r1
     dba:	ac ce       	rjmp	.-680    	; 0xb14 <main+0x956>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
     dbc:	10 92 19 02 	sts	0x0219, r1
     dc0:	9e ce       	rjmp	.-708    	; 0xafe <main+0x940>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
     dc2:	45 9a       	sbi	0x08, 5	; 8
     dc4:	97 ce       	rjmp	.-722    	; 0xaf4 <main+0x936>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
     dc6:	44 9a       	sbi	0x08, 4	; 8
     dc8:	92 ce       	rjmp	.-732    	; 0xaee <main+0x930>
			update_pwm = 1;


		} else if(currentSelector == 1) {		// only horizontal speed control

			if(obstacleAvoidanceEnabled) {
     dca:	80 91 2f 04 	lds	r24, 0x042F
     dce:	88 23       	and	r24, r24
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <main+0xc16>
     dd2:	1c c4       	rjmp	.+2104   	; 0x160c <main+0x144e>
				obstacleAvoidance();
			}

			if(compute_left_vel) {
     dd4:	80 91 0f 02 	lds	r24, 0x020F
     dd8:	88 23       	and	r24, r24
     dda:	09 f0       	breq	.+2      	; 0xdde <main+0xc20>
     ddc:	e2 c3       	rjmp	.+1988   	; 0x15a2 <main+0x13e4>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     dde:	80 91 10 02 	lds	r24, 0x0210
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <main+0xc2a>
     de6:	65 cc       	rjmp	.-1846   	; 0x6b2 <main+0x4f4>

				last_right_vel = right_vel_sum>>2;
     de8:	80 91 dd 03 	lds	r24, 0x03DD
     dec:	90 91 de 03 	lds	r25, 0x03DE
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	96 95       	lsr	r25
     df6:	87 95       	ror	r24
     df8:	90 93 e2 03 	sts	0x03E2, r25
     dfc:	80 93 e1 03 	sts	0x03E1, r24
				right_vel_changed = 1;
     e00:	10 93 fc 03 	sts	0x03FC, r17
				compute_right_vel = 0;
     e04:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
     e08:	10 92 de 03 	sts	0x03DE, r1
     e0c:	10 92 dd 03 	sts	0x03DD, r1

				pwm_right_working = pwm_right_desired;
     e10:	80 91 eb 03 	lds	r24, 0x03EB
     e14:	90 91 ec 03 	lds	r25, 0x03EC
     e18:	90 93 fe 03 	sts	0x03FE, r25
     e1c:	80 93 fd 03 	sts	0x03FD, r24
				pwm_right_desired_to_control = pwm_right_desired;
     e20:	90 93 d8 03 	sts	0x03D8, r25
     e24:	80 93 d7 03 	sts	0x03D7, r24

				start_horizontal_speed_control_right(&pwm_right_working);
     e28:	8d ef       	ldi	r24, 0xFD	; 253
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <start_horizontal_speed_control_right>

				pwm_right = pwm_right_working;
     e30:	80 91 fd 03 	lds	r24, 0x03FD
     e34:	90 91 fe 03 	lds	r25, 0x03FE
     e38:	90 93 e4 03 	sts	0x03E4, r25
     e3c:	80 93 e3 03 	sts	0x03E3, r24

				if(pwm_right > 0) {
     e40:	18 16       	cp	r1, r24
     e42:	19 06       	cpc	r1, r25
     e44:	0c f0       	brlt	.+2      	; 0xe48 <main+0xc8a>
     e46:	f7 c0       	rjmp	.+494    	; 0x1036 <main+0xe78>
				}

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
     e48:	90 93 99 00 	sts	0x0099, r25
     e4c:	80 93 98 00 	sts	0x0098, r24
     e50:	30 cc       	rjmp	.-1952   	; 0x6b2 <main+0x4f4>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	09 f0       	breq	.+2      	; 0xe58 <main+0xc9a>
     e56:	dd c3       	rjmp	.+1978   	; 0x1612 <main+0x1454>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
     e58:	10 92 99 00 	sts	0x0099, r1
     e5c:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
     e60:	10 92 9b 00 	sts	0x009B, r1
     e64:	10 92 9a 00 	sts	0x009A, r1
			}
            if(pwm_left > 0) {
     e68:	80 91 e5 03 	lds	r24, 0x03E5
     e6c:	90 91 e6 03 	lds	r25, 0x03E6
     e70:	18 16       	cp	r1, r24
     e72:	19 06       	cpc	r1, r25
     e74:	0c f4       	brge	.+2      	; 0xe78 <main+0xcba>
     e76:	12 cc       	rjmp	.-2012   	; 0x69c <main+0x4de>
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	09 f0       	breq	.+2      	; 0xe7e <main+0xcc0>
     e7c:	d2 c3       	rjmp	.+1956   	; 0x1622 <main+0x1464>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
     e7e:	10 92 a9 00 	sts	0x00A9, r1
     e82:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
     e86:	10 92 ab 00 	sts	0x00AB, r1
     e8a:	10 92 aa 00 	sts	0x00AA, r1
     e8e:	ca c9       	rjmp	.-3180   	; 0x224 <main+0x66>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
     e90:	85 30       	cpi	r24, 0x05	; 5
     e92:	09 f4       	brne	.+2      	; 0xe96 <main+0xcd8>
     e94:	0f c3       	rjmp	.+1566   	; 0x14b4 <main+0x12f6>
     e96:	86 30       	cpi	r24, 0x06	; 6
     e98:	09 f0       	breq	.+2      	; 0xe9c <main+0xcde>
     e9a:	f6 ce       	rjmp	.-532    	; 0xc88 <main+0xaca>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
     e9c:	80 91 45 03 	lds	r24, 0x0345
     ea0:	90 91 46 03 	lds	r25, 0x0346
     ea4:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[2] = proximityValue[8]>>8;
     ea8:	80 91 45 03 	lds	r24, 0x0345
     eac:	90 91 46 03 	lds	r25, 0x0346
     eb0:	90 93 40 04 	sts	0x0440, r25
					ackPayload[3] = proximityValue[16]&0xFF;
     eb4:	80 91 55 03 	lds	r24, 0x0355
     eb8:	90 91 56 03 	lds	r25, 0x0356
     ebc:	80 93 41 04 	sts	0x0441, r24
					ackPayload[4] = proximityValue[16]>>8;
     ec0:	80 91 55 03 	lds	r24, 0x0355
     ec4:	90 91 56 03 	lds	r25, 0x0356
     ec8:	90 93 42 04 	sts	0x0442, r25
					ackPayload[5] = proximityValue[18]&0xFF;
     ecc:	80 91 59 03 	lds	r24, 0x0359
     ed0:	90 91 5a 03 	lds	r25, 0x035A
     ed4:	80 93 43 04 	sts	0x0443, r24
					ackPayload[6] = proximityValue[18]>>8;
     ed8:	80 91 59 03 	lds	r24, 0x0359
     edc:	90 91 5a 03 	lds	r25, 0x035A
     ee0:	90 93 44 04 	sts	0x0444, r25
					ackPayload[7] = proximityValue[20]&0xFF;
     ee4:	80 91 5d 03 	lds	r24, 0x035D
     ee8:	90 91 5e 03 	lds	r25, 0x035E
     eec:	80 93 45 04 	sts	0x0445, r24
					ackPayload[8] = proximityValue[20]>>8;
     ef0:	80 91 5d 03 	lds	r24, 0x035D
     ef4:	90 91 5e 03 	lds	r25, 0x035E
     ef8:	90 93 46 04 	sts	0x0446, r25
					ackPayload[9] = proximityValue[22]&0xFF;
     efc:	80 91 61 03 	lds	r24, 0x0361
     f00:	90 91 62 03 	lds	r25, 0x0362
     f04:	80 93 47 04 	sts	0x0447, r24
					ackPayload[10] = proximityValue[22]>>8;
     f08:	80 91 61 03 	lds	r24, 0x0361
     f0c:	90 91 62 03 	lds	r25, 0x0362
     f10:	90 93 48 04 	sts	0x0448, r25
					ackPayload[11] = accZ&0xFF;
     f14:	90 91 11 04 	lds	r25, 0x0411
     f18:	80 91 12 04 	lds	r24, 0x0412
     f1c:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = accZ>>8;
     f20:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = batteryLevel&0xFF;
     f24:	90 91 99 03 	lds	r25, 0x0399
     f28:	80 91 9a 03 	lds	r24, 0x039A
     f2c:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = batteryLevel>>8;
     f30:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = 0;
     f34:	10 92 4d 04 	sts	0x044D, r1
					packetId = 3;
     f38:	e0 92 13 02 	sts	0x0213, r14
					break;
     f3c:	a5 ce       	rjmp	.-694    	; 0xc88 <main+0xaca>
			}

		} else if(currentSelector == 2) {		// both speed control horizontal and vertical


			if(obstacleAvoidanceEnabled) {
     f3e:	80 91 2f 04 	lds	r24, 0x042F
     f42:	88 23       	and	r24, r24
     f44:	09 f0       	breq	.+2      	; 0xf48 <main+0xd8a>
     f46:	76 c3       	rjmp	.+1772   	; 0x1634 <main+0x1476>
				obstacleAvoidance();
			}

			if(compute_left_vel) {
     f48:	80 91 0f 02 	lds	r24, 0x020F
     f4c:	88 23       	and	r24, r24
     f4e:	c9 f1       	breq	.+114    	; 0xfc2 <main+0xe04>

				last_left_vel = left_vel_sum>>2;
     f50:	80 91 db 03 	lds	r24, 0x03DB
     f54:	90 91 dc 03 	lds	r25, 0x03DC
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	90 93 e0 03 	sts	0x03E0, r25
     f64:	80 93 df 03 	sts	0x03DF, r24
				left_vel_changed = 1;
     f68:	10 93 fb 03 	sts	0x03FB, r17
				compute_left_vel = 0;
     f6c:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
     f70:	10 92 dc 03 	sts	0x03DC, r1
     f74:	10 92 db 03 	sts	0x03DB, r1

				pwm_left_working = pwm_left_desired;
     f78:	80 91 ed 03 	lds	r24, 0x03ED
     f7c:	90 91 ee 03 	lds	r25, 0x03EE
     f80:	90 93 00 04 	sts	0x0400, r25
     f84:	80 93 ff 03 	sts	0x03FF, r24
				pwm_left_desired_to_control = pwm_left_desired;
     f88:	90 93 da 03 	sts	0x03DA, r25
     f8c:	80 93 d9 03 	sts	0x03D9, r24

				if(robotPosition == HORIZONTAL_POS) {
     f90:	80 91 1e 02 	lds	r24, 0x021E
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	09 f4       	brne	.+2      	; 0xf9a <main+0xddc>
     f98:	57 c3       	rjmp	.+1710   	; 0x1648 <main+0x148a>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
     fa2:	80 91 ff 03 	lds	r24, 0x03FF
     fa6:	90 91 00 04 	lds	r25, 0x0400
     faa:	90 93 e6 03 	sts	0x03E6, r25
     fae:	80 93 e5 03 	sts	0x03E5, r24

				if(pwm_left > 0) {
     fb2:	18 16       	cp	r1, r24
     fb4:	19 06       	cpc	r1, r25
     fb6:	0c f0       	brlt	.+2      	; 0xfba <main+0xdfc>
     fb8:	4c c3       	rjmp	.+1688   	; 0x1652 <main+0x1494>
					OCR4A = (unsigned int)pwm_left;
     fba:	90 93 a9 00 	sts	0x00A9, r25
     fbe:	80 93 a8 00 	sts	0x00A8, r24
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     fc2:	80 91 10 02 	lds	r24, 0x0210
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <main+0xe0e>
     fca:	73 cb       	rjmp	.-2330   	; 0x6b2 <main+0x4f4>

				last_right_vel = right_vel_sum>>2;
     fcc:	80 91 dd 03 	lds	r24, 0x03DD
     fd0:	90 91 de 03 	lds	r25, 0x03DE
     fd4:	96 95       	lsr	r25
     fd6:	87 95       	ror	r24
     fd8:	96 95       	lsr	r25
     fda:	87 95       	ror	r24
     fdc:	90 93 e2 03 	sts	0x03E2, r25
     fe0:	80 93 e1 03 	sts	0x03E1, r24
				right_vel_changed = 1;
     fe4:	10 93 fc 03 	sts	0x03FC, r17
				compute_right_vel = 0;
     fe8:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
     fec:	10 92 de 03 	sts	0x03DE, r1
     ff0:	10 92 dd 03 	sts	0x03DD, r1


				pwm_right_working = pwm_right_desired;
     ff4:	80 91 eb 03 	lds	r24, 0x03EB
     ff8:	90 91 ec 03 	lds	r25, 0x03EC
     ffc:	90 93 fe 03 	sts	0x03FE, r25
    1000:	80 93 fd 03 	sts	0x03FD, r24
				pwm_right_desired_to_control = pwm_right_desired;
    1004:	90 93 d8 03 	sts	0x03D8, r25
    1008:	80 93 d7 03 	sts	0x03D7, r24

				if(robotPosition == HORIZONTAL_POS) {
    100c:	80 91 1e 02 	lds	r24, 0x021E
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	09 f4       	brne	.+2      	; 0x1016 <main+0xe58>
    1014:	14 c3       	rjmp	.+1576   	; 0x163e <main+0x1480>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
    1016:	8d ef       	ldi	r24, 0xFD	; 253
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	0e 94 2e 10 	call	0x205c	; 0x205c <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
    101e:	80 91 fd 03 	lds	r24, 0x03FD
    1022:	90 91 fe 03 	lds	r25, 0x03FE
    1026:	90 93 e4 03 	sts	0x03E4, r25
    102a:	80 93 e3 03 	sts	0x03E3, r24

				if(pwm_right > 0) {
    102e:	18 16       	cp	r1, r24
    1030:	19 06       	cpc	r1, r25
    1032:	0c f4       	brge	.+2      	; 0x1036 <main+0xe78>
    1034:	09 cf       	rjmp	.-494    	; 0xe48 <main+0xc8a>
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	09 f0       	breq	.+2      	; 0x103c <main+0xe7e>
    103a:	45 c3       	rjmp	.+1674   	; 0x16c6 <main+0x1508>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
    103c:	10 92 99 00 	sts	0x0099, r1
    1040:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    1044:	10 92 9b 00 	sts	0x009B, r1
    1048:	10 92 9a 00 	sts	0x009A, r1
    104c:	32 cb       	rjmp	.-2460   	; 0x6b2 <main+0x4f4>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    104e:	10 92 9e 03 	sts	0x039E, r1
    1052:	10 92 9f 03 	sts	0x039F, r1
    1056:	10 92 a0 03 	sts	0x03A0, r1
    105a:	10 92 a1 03 	sts	0x03A1, r1
						proximityOffset[i] = 0;
    105e:	10 92 7e 03 	sts	0x037E, r1
    1062:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    1066:	10 92 a2 03 	sts	0x03A2, r1
    106a:	10 92 a3 03 	sts	0x03A3, r1
    106e:	10 92 a4 03 	sts	0x03A4, r1
    1072:	10 92 a5 03 	sts	0x03A5, r1
						proximityOffset[i] = 0;
    1076:	10 92 80 03 	sts	0x0380, r1
    107a:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    107e:	10 92 a6 03 	sts	0x03A6, r1
    1082:	10 92 a7 03 	sts	0x03A7, r1
    1086:	10 92 a8 03 	sts	0x03A8, r1
    108a:	10 92 a9 03 	sts	0x03A9, r1
						proximityOffset[i] = 0;
    108e:	10 92 82 03 	sts	0x0382, r1
    1092:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    1096:	10 92 aa 03 	sts	0x03AA, r1
    109a:	10 92 ab 03 	sts	0x03AB, r1
    109e:	10 92 ac 03 	sts	0x03AC, r1
    10a2:	10 92 ad 03 	sts	0x03AD, r1
						proximityOffset[i] = 0;
    10a6:	10 92 84 03 	sts	0x0384, r1
    10aa:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    10ae:	10 92 ae 03 	sts	0x03AE, r1
    10b2:	10 92 af 03 	sts	0x03AF, r1
    10b6:	10 92 b0 03 	sts	0x03B0, r1
    10ba:	10 92 b1 03 	sts	0x03B1, r1
						proximityOffset[i] = 0;
    10be:	10 92 86 03 	sts	0x0386, r1
    10c2:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    10c6:	10 92 b2 03 	sts	0x03B2, r1
    10ca:	10 92 b3 03 	sts	0x03B3, r1
    10ce:	10 92 b4 03 	sts	0x03B4, r1
    10d2:	10 92 b5 03 	sts	0x03B5, r1
						proximityOffset[i] = 0;
    10d6:	10 92 88 03 	sts	0x0388, r1
    10da:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    10de:	10 92 b6 03 	sts	0x03B6, r1
    10e2:	10 92 b7 03 	sts	0x03B7, r1
    10e6:	10 92 b8 03 	sts	0x03B8, r1
    10ea:	10 92 b9 03 	sts	0x03B9, r1
						proximityOffset[i] = 0;
    10ee:	10 92 8a 03 	sts	0x038A, r1
    10f2:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    10f6:	10 92 ba 03 	sts	0x03BA, r1
    10fa:	10 92 bb 03 	sts	0x03BB, r1
    10fe:	10 92 bc 03 	sts	0x03BC, r1
    1102:	10 92 bd 03 	sts	0x03BD, r1
						proximityOffset[i] = 0;
    1106:	10 92 8c 03 	sts	0x038C, r1
    110a:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    110e:	10 92 be 03 	sts	0x03BE, r1
    1112:	10 92 bf 03 	sts	0x03BF, r1
    1116:	10 92 c0 03 	sts	0x03C0, r1
    111a:	10 92 c1 03 	sts	0x03C1, r1
						proximityOffset[i] = 0;
    111e:	10 92 8e 03 	sts	0x038E, r1
    1122:	10 92 8d 03 	sts	0x038D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    1126:	10 92 c2 03 	sts	0x03C2, r1
    112a:	10 92 c3 03 	sts	0x03C3, r1
    112e:	10 92 c4 03 	sts	0x03C4, r1
    1132:	10 92 c5 03 	sts	0x03C5, r1
						proximityOffset[i] = 0;
    1136:	10 92 90 03 	sts	0x0390, r1
    113a:	10 92 8f 03 	sts	0x038F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    113e:	10 92 c6 03 	sts	0x03C6, r1
    1142:	10 92 c7 03 	sts	0x03C7, r1
    1146:	10 92 c8 03 	sts	0x03C8, r1
    114a:	10 92 c9 03 	sts	0x03C9, r1
						proximityOffset[i] = 0;
    114e:	10 92 92 03 	sts	0x0392, r1
    1152:	10 92 91 03 	sts	0x0391, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    1156:	10 92 ca 03 	sts	0x03CA, r1
    115a:	10 92 cb 03 	sts	0x03CB, r1
    115e:	10 92 cc 03 	sts	0x03CC, r1
    1162:	10 92 cd 03 	sts	0x03CD, r1
						proximityOffset[i] = 0;
    1166:	10 92 94 03 	sts	0x0394, r1
    116a:	10 92 93 03 	sts	0x0393, r1
					}
					accOffsetXSum = 0;
    116e:	10 92 22 04 	sts	0x0422, r1
    1172:	10 92 21 04 	sts	0x0421, r1
					accOffsetYSum = 0;
    1176:	10 92 24 04 	sts	0x0424, r1
    117a:	10 92 23 04 	sts	0x0423, r1
					accOffsetZSum = 0;
    117e:	10 92 26 04 	sts	0x0426, r1
    1182:	10 92 25 04 	sts	0x0425, r1

					calibrationCycle++;
    1186:	70 92 2e 04 	sts	0x042E, r7
    118a:	60 92 2d 04 	sts	0x042D, r6

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    118e:	4a c8       	rjmp	.-3948   	; 0x224 <main+0x66>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1190:	ac 01       	movw	r20, r24
    1192:	44 0f       	add	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	44 0f       	add	r20, r20
    1198:	55 1f       	adc	r21, r21
    119a:	50 93 ec 03 	sts	0x03EC, r21
    119e:	40 93 eb 03 	sts	0x03EB, r20
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    11a2:	77 ff       	sbrs	r23, 7
    11a4:	31 cc       	rjmp	.-1950   	; 0xa08 <main+0x84a>
				pwm_left_desired = speedl<<2;
    11a6:	c9 01       	movw	r24, r18
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	90 93 ee 03 	sts	0x03EE, r25
    11b4:	80 93 ed 03 	sts	0x03ED, r24
    11b8:	33 cc       	rjmp	.-1946   	; 0xa20 <main+0x862>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    11ba:	ee 58       	subi	r30, 0x8E	; 142
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	05 90       	lpm	r0, Z+
    11c4:	f4 91       	lpm	r31, Z+
    11c6:	e0 2d       	mov	r30, r0
    11c8:	19 94       	eijmp
							case 0:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    11ca:	80 93 2f 04 	sts	0x042F, r24
								cliffAvoidanceEnabled = 0;
    11ce:	10 92 34 04 	sts	0x0434, r1
    11d2:	b9 cb       	rjmp	.-2190   	; 0x946 <main+0x788>
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    11d4:	10 92 2f 04 	sts	0x042F, r1
								cliffAvoidanceEnabled = 1;
    11d8:	10 93 34 04 	sts	0x0434, r17
    11dc:	b4 cb       	rjmp	.-2200   	; 0x946 <main+0x788>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;

					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    11de:	10 92 2f 04 	sts	0x042F, r1
    11e2:	80 91 eb 03 	lds	r24, 0x03EB
    11e6:	90 91 ec 03 	lds	r25, 0x03EC
    11ea:	20 91 ed 03 	lds	r18, 0x03ED
    11ee:	30 91 ee 03 	lds	r19, 0x03EE
						break;
    11f2:	b1 cb       	rjmp	.-2206   	; 0x956 <main+0x798>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    11f4:	10 93 2f 04 	sts	0x042F, r17
    11f8:	80 91 eb 03 	lds	r24, 0x03EB
    11fc:	90 91 ec 03 	lds	r25, 0x03EC
    1200:	20 91 ed 03 	lds	r18, 0x03ED
    1204:	30 91 ee 03 	lds	r19, 0x03EE
						break;
    1208:	a6 cb       	rjmp	.-2228   	; 0x956 <main+0x798>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    120a:	20 91 ed 03 	lds	r18, 0x03ED
    120e:	30 91 ee 03 	lds	r19, 0x03EE
    1212:	2e 51       	subi	r18, 0x1E	; 30
    1214:	30 40       	sbci	r19, 0x00	; 0
    1216:	30 93 ee 03 	sts	0x03EE, r19
    121a:	20 93 ed 03 	sts	0x03ED, r18
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    121e:	8c ef       	ldi	r24, 0xFC	; 252
    1220:	20 30       	cpi	r18, 0x00	; 0
    1222:	38 07       	cpc	r19, r24
    1224:	0c f0       	brlt	.+2      	; 0x1228 <main+0x106a>
    1226:	4a c2       	rjmp	.+1172   	; 0x16bc <main+0x14fe>
    1228:	50 92 ee 03 	sts	0x03EE, r5
    122c:	40 92 ed 03 	sts	0x03ED, r4
    1230:	80 91 eb 03 	lds	r24, 0x03EB
    1234:	90 91 ec 03 	lds	r25, 0x03EC
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3c ef       	ldi	r19, 0xFC	; 252
    123c:	8c cb       	rjmp	.-2280   	; 0x956 <main+0x798>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    123e:	40 91 eb 03 	lds	r20, 0x03EB
    1242:	50 91 ec 03 	lds	r21, 0x03EC
    1246:	80 91 e5 03 	lds	r24, 0x03E5
    124a:	90 91 e6 03 	lds	r25, 0x03E6
    124e:	48 17       	cp	r20, r24
    1250:	59 07       	cpc	r21, r25
    1252:	0c f0       	brlt	.+2      	; 0x1256 <main+0x1098>
    1254:	41 c2       	rjmp	.+1154   	; 0x16d8 <main+0x151a>
    1256:	9a 01       	movw	r18, r20
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired -= STEP_MOTORS;
    1258:	4e 51       	subi	r20, 0x1E	; 30
    125a:	50 40       	sbci	r21, 0x00	; 0
    125c:	50 93 ec 03 	sts	0x03EC, r21
    1260:	40 93 eb 03 	sts	0x03EB, r20
						pwm_left_desired -= STEP_MOTORS;
    1264:	2e 51       	subi	r18, 0x1E	; 30
    1266:	30 40       	sbci	r19, 0x00	; 0
    1268:	30 93 ee 03 	sts	0x03EE, r19
    126c:	20 93 ed 03 	sts	0x03ED, r18
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1270:	8c ef       	ldi	r24, 0xFC	; 252
    1272:	40 30       	cpi	r20, 0x00	; 0
    1274:	58 07       	cpc	r21, r24
    1276:	34 f4       	brge	.+12     	; 0x1284 <main+0x10c6>
    1278:	50 92 ec 03 	sts	0x03EC, r5
    127c:	40 92 eb 03 	sts	0x03EB, r4
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	5c ef       	ldi	r21, 0xFC	; 252
					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
						pwm_left_desired -= STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1284:	8c ef       	ldi	r24, 0xFC	; 252
    1286:	20 30       	cpi	r18, 0x00	; 0
    1288:	38 07       	cpc	r19, r24
    128a:	0c f0       	brlt	.+2      	; 0x128e <main+0x10d0>
    128c:	d6 c1       	rjmp	.+940    	; 0x163a <main+0x147c>
    128e:	50 92 ee 03 	sts	0x03EE, r5
    1292:	40 92 ed 03 	sts	0x03ED, r4
    1296:	ca 01       	movw	r24, r20
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	3c ef       	ldi	r19, 0xFC	; 252
    129c:	5c cb       	rjmp	.-2376   	; 0x956 <main+0x798>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    129e:	80 91 eb 03 	lds	r24, 0x03EB
    12a2:	90 91 ec 03 	lds	r25, 0x03EC
    12a6:	4e 97       	sbiw	r24, 0x1e	; 30
    12a8:	90 93 ec 03 	sts	0x03EC, r25
    12ac:	80 93 eb 03 	sts	0x03EB, r24
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    12b0:	2c ef       	ldi	r18, 0xFC	; 252
    12b2:	80 30       	cpi	r24, 0x00	; 0
    12b4:	92 07       	cpc	r25, r18
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <main+0x10fc>
    12b8:	e0 c1       	rjmp	.+960    	; 0x167a <main+0x14bc>
    12ba:	50 92 ec 03 	sts	0x03EC, r5
    12be:	40 92 eb 03 	sts	0x03EB, r4
    12c2:	20 91 ed 03 	lds	r18, 0x03ED
    12c6:	30 91 ee 03 	lds	r19, 0x03EE
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	9c ef       	ldi	r25, 0xFC	; 252
					speedr = pwm_right_desired >> 2;
				} else {
					speedr = (-pwm_right_desired) >> 2;
    12ce:	90 95       	com	r25
    12d0:	81 95       	neg	r24
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	42 cb       	rjmp	.-2428   	; 0x95a <main+0x79c>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    12d6:	40 91 eb 03 	lds	r20, 0x03EB
    12da:	50 91 ec 03 	lds	r21, 0x03EC
    12de:	4e 51       	subi	r20, 0x1E	; 30
    12e0:	50 40       	sbci	r21, 0x00	; 0
    12e2:	50 93 ec 03 	sts	0x03EC, r21
    12e6:	40 93 eb 03 	sts	0x03EB, r20
						pwm_left_desired += STEP_MOTORS;
    12ea:	20 91 ed 03 	lds	r18, 0x03ED
    12ee:	30 91 ee 03 	lds	r19, 0x03EE
    12f2:	22 5e       	subi	r18, 0xE2	; 226
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	30 93 ee 03 	sts	0x03EE, r19
    12fa:	20 93 ed 03 	sts	0x03ED, r18
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    12fe:	8c ef       	ldi	r24, 0xFC	; 252
    1300:	40 30       	cpi	r20, 0x00	; 0
    1302:	58 07       	cpc	r21, r24
    1304:	34 f4       	brge	.+12     	; 0x1312 <main+0x1154>
    1306:	50 92 ec 03 	sts	0x03EC, r5
    130a:	40 92 eb 03 	sts	0x03EB, r4
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	5c ef       	ldi	r21, 0xFC	; 252
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1312:	84 e0       	ldi	r24, 0x04	; 4
    1314:	21 30       	cpi	r18, 0x01	; 1
    1316:	38 07       	cpc	r19, r24
    1318:	0c f4       	brge	.+2      	; 0x131c <main+0x115e>
    131a:	8f c1       	rjmp	.+798    	; 0x163a <main+0x147c>
    131c:	30 92 ee 03 	sts	0x03EE, r3
    1320:	20 92 ed 03 	sts	0x03ED, r2
    1324:	ca 01       	movw	r24, r20
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	34 e0       	ldi	r19, 0x04	; 4
    132a:	15 cb       	rjmp	.-2518   	; 0x956 <main+0x798>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    132c:	10 92 ec 03 	sts	0x03EC, r1
    1330:	10 92 eb 03 	sts	0x03EB, r1
						pwm_left_desired = 0;
    1334:	10 92 ee 03 	sts	0x03EE, r1
    1338:	10 92 ed 03 	sts	0x03ED, r1
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0a cb       	rjmp	.-2540   	; 0x95a <main+0x79c>
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    1346:	40 91 eb 03 	lds	r20, 0x03EB
    134a:	50 91 ec 03 	lds	r21, 0x03EC
    134e:	42 5e       	subi	r20, 0xE2	; 226
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	50 93 ec 03 	sts	0x03EC, r21
    1356:	40 93 eb 03 	sts	0x03EB, r20
						pwm_left_desired -= STEP_MOTORS;
    135a:	20 91 ed 03 	lds	r18, 0x03ED
    135e:	30 91 ee 03 	lds	r19, 0x03EE
    1362:	2e 51       	subi	r18, 0x1E	; 30
    1364:	30 40       	sbci	r19, 0x00	; 0
    1366:	30 93 ee 03 	sts	0x03EE, r19
    136a:	20 93 ed 03 	sts	0x03ED, r18
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	41 30       	cpi	r20, 0x01	; 1
    1372:	58 07       	cpc	r21, r24
    1374:	0c f4       	brge	.+2      	; 0x1378 <main+0x11ba>
    1376:	86 cf       	rjmp	.-244    	; 0x1284 <main+0x10c6>
    1378:	30 92 ec 03 	sts	0x03EC, r3
    137c:	20 92 eb 03 	sts	0x03EB, r2
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	54 e0       	ldi	r21, 0x04	; 4
    1384:	7f cf       	rjmp	.-258    	; 0x1284 <main+0x10c6>
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    1386:	20 91 ed 03 	lds	r18, 0x03ED
    138a:	30 91 ee 03 	lds	r19, 0x03EE
    138e:	22 5e       	subi	r18, 0xE2	; 226
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	30 93 ee 03 	sts	0x03EE, r19
    1396:	20 93 ed 03 	sts	0x03ED, r18
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    139a:	84 e0       	ldi	r24, 0x04	; 4
    139c:	21 30       	cpi	r18, 0x01	; 1
    139e:	38 07       	cpc	r19, r24
    13a0:	0c f4       	brge	.+2      	; 0x13a4 <main+0x11e6>
    13a2:	8c c1       	rjmp	.+792    	; 0x16bc <main+0x14fe>
    13a4:	30 92 ee 03 	sts	0x03EE, r3
    13a8:	20 92 ed 03 	sts	0x03ED, r2
    13ac:	80 91 eb 03 	lds	r24, 0x03EB
    13b0:	90 91 ec 03 	lds	r25, 0x03EC
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	34 e0       	ldi	r19, 0x04	; 4
    13b8:	ce ca       	rjmp	.-2660   	; 0x956 <main+0x798>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    13ba:	40 91 eb 03 	lds	r20, 0x03EB
    13be:	50 91 ec 03 	lds	r21, 0x03EC
    13c2:	20 91 ed 03 	lds	r18, 0x03ED
    13c6:	30 91 ee 03 	lds	r19, 0x03EE
    13ca:	24 17       	cp	r18, r20
    13cc:	35 07       	cpc	r19, r21
    13ce:	0c f0       	brlt	.+2      	; 0x13d2 <main+0x1214>
    13d0:	89 c1       	rjmp	.+786    	; 0x16e4 <main+0x1526>
    13d2:	9a 01       	movw	r18, r20
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    13d4:	42 5e       	subi	r20, 0xE2	; 226
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	50 93 ec 03 	sts	0x03EC, r21
    13dc:	40 93 eb 03 	sts	0x03EB, r20
						pwm_left_desired += STEP_MOTORS;
    13e0:	22 5e       	subi	r18, 0xE2	; 226
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	30 93 ee 03 	sts	0x03EE, r19
    13e8:	20 93 ed 03 	sts	0x03ED, r18
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    13ec:	84 e0       	ldi	r24, 0x04	; 4
    13ee:	41 30       	cpi	r20, 0x01	; 1
    13f0:	58 07       	cpc	r21, r24
    13f2:	0c f4       	brge	.+2      	; 0x13f6 <main+0x1238>
    13f4:	8e cf       	rjmp	.-228    	; 0x1312 <main+0x1154>
    13f6:	30 92 ec 03 	sts	0x03EC, r3
    13fa:	20 92 eb 03 	sts	0x03EB, r2
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	54 e0       	ldi	r21, 0x04	; 4
    1402:	87 cf       	rjmp	.-242    	; 0x1312 <main+0x1154>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1404:	80 91 eb 03 	lds	r24, 0x03EB
    1408:	90 91 ec 03 	lds	r25, 0x03EC
    140c:	4e 96       	adiw	r24, 0x1e	; 30
    140e:	90 93 ec 03 	sts	0x03EC, r25
    1412:	80 93 eb 03 	sts	0x03EB, r24
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1416:	24 e0       	ldi	r18, 0x04	; 4
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	92 07       	cpc	r25, r18
    141c:	0c f4       	brge	.+2      	; 0x1420 <main+0x1262>
    141e:	2d c1       	rjmp	.+602    	; 0x167a <main+0x14bc>
    1420:	30 92 ec 03 	sts	0x03EC, r3
    1424:	20 92 eb 03 	sts	0x03EB, r2
    1428:	20 91 ed 03 	lds	r18, 0x03ED
    142c:	30 91 ee 03 	lds	r19, 0x03EE
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	94 e0       	ldi	r25, 0x04	; 4
    1434:	92 ca       	rjmp	.-2780   	; 0x95a <main+0x79c>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    1436:	80 91 0a 04 	lds	r24, 0x040A
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	65 e0       	ldi	r22, 0x05	; 5
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	0e 94 13 22 	call	0x4426	; 0x4426 <__divmodhi4>
    1446:	80 93 0a 04 	sts	0x040A, r24

						if(colorState==0) {		// turn on blue
    144a:	88 23       	and	r24, r24
    144c:	09 f0       	breq	.+2      	; 0x1450 <main+0x1292>
    144e:	4c c1       	rjmp	.+664    	; 0x16e8 <main+0x152a>
							LED_IR1_HIGH;
    1450:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    1452:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    1454:	10 92 16 02 	sts	0x0216, r1
							pwm_green = MAX_LEDS_PWM;
    1458:	00 93 15 02 	sts	0x0215, r16
							pwm_red = MAX_LEDS_PWM;
    145c:	00 93 14 02 	sts	0x0214, r16
    1460:	80 2f       	mov	r24, r16
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}

						updateRedLed(pwm_red);
    1462:	0e 94 76 1e 	call	0x3cec	; 0x3cec <updateRedLed>
						updateGreenLed(pwm_green);
    1466:	80 91 15 02 	lds	r24, 0x0215
    146a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <updateGreenLed>
						updateBlueLed(pwm_blue);
    146e:	80 91 16 02 	lds	r24, 0x0216
    1472:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <updateBlueLed>
    1476:	80 91 eb 03 	lds	r24, 0x03EB
    147a:	90 91 ec 03 	lds	r25, 0x03EC
    147e:	20 91 ed 03 	lds	r18, 0x03ED
    1482:	30 91 ee 03 	lds	r19, 0x03EE

	                  	break;
    1486:	67 ca       	rjmp	.-2866   	; 0x956 <main+0x798>
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;

					case 52:
						behaviorState = (behaviorState+1)%4;
    1488:	80 91 0b 04 	lds	r24, 0x040B
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	83 70       	andi	r24, 0x03	; 3
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	80 93 0b 04 	sts	0x040B, r24
						switch(behaviorState) {
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	09 f4       	brne	.+2      	; 0x149e <main+0x12e0>
    149c:	9b ce       	rjmp	.-714    	; 0x11d4 <main+0x1016>
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <main+0x12e6>
    14a2:	e3 c0       	rjmp	.+454    	; 0x166a <main+0x14ac>
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <main+0x12ec>
    14a8:	90 ce       	rjmp	.-736    	; 0x11ca <main+0x100c>
							case 0:
								obstacleAvoidanceEnabled = 0;
    14aa:	10 92 2f 04 	sts	0x042F, r1
								cliffAvoidanceEnabled = 0;
    14ae:	10 92 34 04 	sts	0x0434, r1
    14b2:	49 ca       	rjmp	.-2926   	; 0x946 <main+0x788>
					ackPayload[15] = ir_move;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    14b4:	80 91 35 03 	lds	r24, 0x0335
    14b8:	90 91 36 03 	lds	r25, 0x0336
    14bc:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[2] = proximityValue[0]>>8;
    14c0:	80 91 35 03 	lds	r24, 0x0335
    14c4:	90 91 36 03 	lds	r25, 0x0336
    14c8:	90 93 40 04 	sts	0x0440, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    14cc:	80 91 39 03 	lds	r24, 0x0339
    14d0:	90 91 3a 03 	lds	r25, 0x033A
    14d4:	80 93 41 04 	sts	0x0441, r24
					ackPayload[4] = proximityValue[2]>>8;
    14d8:	80 91 39 03 	lds	r24, 0x0339
    14dc:	90 91 3a 03 	lds	r25, 0x033A
    14e0:	90 93 42 04 	sts	0x0442, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    14e4:	80 91 3d 03 	lds	r24, 0x033D
    14e8:	90 91 3e 03 	lds	r25, 0x033E
    14ec:	80 93 43 04 	sts	0x0443, r24
					ackPayload[6] = proximityValue[4]>>8;
    14f0:	80 91 3d 03 	lds	r24, 0x033D
    14f4:	90 91 3e 03 	lds	r25, 0x033E
    14f8:	90 93 44 04 	sts	0x0444, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    14fc:	80 91 41 03 	lds	r24, 0x0341
    1500:	90 91 42 03 	lds	r25, 0x0342
    1504:	80 93 45 04 	sts	0x0445, r24
					ackPayload[8] = proximityValue[6]>>8;
    1508:	80 91 41 03 	lds	r24, 0x0341
    150c:	90 91 42 03 	lds	r25, 0x0342
    1510:	90 93 46 04 	sts	0x0446, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    1514:	80 91 49 03 	lds	r24, 0x0349
    1518:	90 91 4a 03 	lds	r25, 0x034A
    151c:	80 93 47 04 	sts	0x0447, r24
					ackPayload[10] = proximityValue[10]>>8;
    1520:	80 91 49 03 	lds	r24, 0x0349
    1524:	90 91 4a 03 	lds	r25, 0x034A
    1528:	90 93 48 04 	sts	0x0448, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    152c:	80 91 4d 03 	lds	r24, 0x034D
    1530:	90 91 4e 03 	lds	r25, 0x034E
    1534:	80 93 49 04 	sts	0x0449, r24
					ackPayload[12] = proximityValue[12]>>8;
    1538:	80 91 4d 03 	lds	r24, 0x034D
    153c:	90 91 4e 03 	lds	r25, 0x034E
    1540:	90 93 4a 04 	sts	0x044A, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    1544:	80 91 51 03 	lds	r24, 0x0351
    1548:	90 91 52 03 	lds	r25, 0x0352
    154c:	80 93 4b 04 	sts	0x044B, r24
					ackPayload[14] = proximityValue[14]>>8;
    1550:	80 91 51 03 	lds	r24, 0x0351
    1554:	90 91 52 03 	lds	r25, 0x0352
    1558:	90 93 4c 04 	sts	0x044C, r25
					ackPayload[15] = currentSelector;
    155c:	80 91 2b 04 	lds	r24, 0x042B
    1560:	80 93 4d 04 	sts	0x044D, r24
					packetId = 6;
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	20 93 13 02 	sts	0x0213, r18
					break;
    156a:	8e cb       	rjmp	.-2276   	; 0xc88 <main+0xaca>
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				if(!startCalibration) {					// if not already calibrating the sensors
					startCalibration = 1;
    156c:	10 93 2c 04 	sts	0x042C, r17
					calibrationCycle = 0;
    1570:	10 92 2e 04 	sts	0x042E, r1
    1574:	10 92 2d 04 	sts	0x042D, r1
					pwm_red = 0;
    1578:	10 92 14 02 	sts	0x0214, r1
					pwm_green = 0;
    157c:	10 92 15 02 	sts	0x0215, r1
					pwm_blue = 0;
    1580:	10 92 16 02 	sts	0x0216, r1
					updateRedLed(pwm_red);
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 76 1e 	call	0x3cec	; 0x3cec <updateRedLed>
					updateGreenLed(pwm_green);
    158a:	80 91 15 02 	lds	r24, 0x0215
    158e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1592:	80 91 16 02 	lds	r24, 0x0216
    1596:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <updateBlueLed>
    159a:	80 91 59 04 	lds	r24, 0x0459
    159e:	98 2f       	mov	r25, r24
    15a0:	b5 ca       	rjmp	.-2710   	; 0xb0c <main+0x94e>
				obstacleAvoidance();
			}

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;
    15a2:	80 91 db 03 	lds	r24, 0x03DB
    15a6:	90 91 dc 03 	lds	r25, 0x03DC
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	90 93 e0 03 	sts	0x03E0, r25
    15b6:	80 93 df 03 	sts	0x03DF, r24
				left_vel_changed = 1;
    15ba:	10 93 fb 03 	sts	0x03FB, r17
				compute_left_vel = 0;
    15be:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    15c2:	10 92 dc 03 	sts	0x03DC, r1
    15c6:	10 92 db 03 	sts	0x03DB, r1

				pwm_left_working = pwm_left_desired;
    15ca:	80 91 ed 03 	lds	r24, 0x03ED
    15ce:	90 91 ee 03 	lds	r25, 0x03EE
    15d2:	90 93 00 04 	sts	0x0400, r25
    15d6:	80 93 ff 03 	sts	0x03FF, r24
				pwm_left_desired_to_control = pwm_left_desired;
    15da:	90 93 da 03 	sts	0x03DA, r25
    15de:	80 93 d9 03 	sts	0x03D9, r24

				start_horizontal_speed_control_left(&pwm_left_working);
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	93 e0       	ldi	r25, 0x03	; 3
    15e6:	0e 94 58 12 	call	0x24b0	; 0x24b0 <start_horizontal_speed_control_left>

				pwm_left = pwm_left_working;
    15ea:	80 91 ff 03 	lds	r24, 0x03FF
    15ee:	90 91 00 04 	lds	r25, 0x0400
    15f2:	90 93 e6 03 	sts	0x03E6, r25
    15f6:	80 93 e5 03 	sts	0x03E5, r24

				if(pwm_left > 0) {
    15fa:	18 16       	cp	r1, r24
    15fc:	19 06       	cpc	r1, r25
    15fe:	0c f0       	brlt	.+2      	; 0x1602 <main+0x1444>
    1600:	41 c0       	rjmp	.+130    	; 0x1684 <main+0x14c6>
					OCR4A = (unsigned int)pwm_left;
    1602:	90 93 a9 00 	sts	0x00A9, r25
    1606:	80 93 a8 00 	sts	0x00A8, r24
    160a:	e9 cb       	rjmp	.-2094   	; 0xdde <main+0xc20>


		} else if(currentSelector == 1) {		// only horizontal speed control

			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
    160c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <obstacleAvoidance>
    1610:	e1 cb       	rjmp	.-2110   	; 0xdd4 <main+0xc16>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
    1612:	90 95       	com	r25
    1614:	81 95       	neg	r24
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	90 93 9b 00 	sts	0x009B, r25
    161c:	80 93 9a 00 	sts	0x009A, r24
    1620:	35 c8       	rjmp	.-3990   	; 0x68c <main+0x4ce>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
    1622:	90 95       	com	r25
    1624:	81 95       	neg	r24
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	90 93 ab 00 	sts	0x00AB, r25
    162c:	80 93 aa 00 	sts	0x00AA, r24
    1630:	0c 94 12 01 	jmp	0x224	; 0x224 <main+0x66>

		} else if(currentSelector == 2) {		// both speed control horizontal and vertical


			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
    1634:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <obstacleAvoidance>
    1638:	87 cc       	rjmp	.-1778   	; 0xf48 <main+0xd8a>
					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
						pwm_left_desired -= STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    163a:	ca 01       	movw	r24, r20
    163c:	8c c9       	rjmp	.-3304   	; 0x956 <main+0x798>
				pwm_right_working = pwm_right_desired;
				pwm_right_desired_to_control = pwm_right_desired;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
    163e:	8d ef       	ldi	r24, 0xFD	; 253
    1640:	93 e0       	ldi	r25, 0x03	; 3
    1642:	0e 94 73 11 	call	0x22e6	; 0x22e6 <start_horizontal_speed_control_right>
    1646:	eb cc       	rjmp	.-1578   	; 0x101e <main+0xe60>
				pwm_left_working = pwm_left_desired;
				pwm_left_desired_to_control = pwm_left_desired;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <start_horizontal_speed_control_left>
    1650:	a8 cc       	rjmp	.-1712   	; 0xfa2 <main+0xde4>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	09 f0       	breq	.+2      	; 0x1658 <main+0x149a>
    1656:	56 c0       	rjmp	.+172    	; 0x1704 <main+0x1546>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1658:	10 92 a9 00 	sts	0x00A9, r1
    165c:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    1660:	10 92 ab 00 	sts	0x00AB, r1
    1664:	10 92 aa 00 	sts	0x00AA, r1
    1668:	ac cc       	rjmp	.-1704   	; 0xfc2 <main+0xe04>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    166a:	10 93 2f 04 	sts	0x042F, r17
								cliffAvoidanceEnabled = 1;
    166e:	10 93 34 04 	sts	0x0434, r17
    1672:	80 91 eb 03 	lds	r24, 0x03EB
    1676:	90 91 ec 03 	lds	r25, 0x03EC
    167a:	20 91 ed 03 	lds	r18, 0x03ED
    167e:	30 91 ee 03 	lds	r19, 0x03EE
								break;
    1682:	69 c9       	rjmp	.-3374   	; 0x956 <main+0x798>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	09 f0       	breq	.+2      	; 0x168a <main+0x14cc>
    1688:	45 c0       	rjmp	.+138    	; 0x1714 <main+0x1556>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    168a:	10 92 a9 00 	sts	0x00A9, r1
    168e:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    1692:	10 92 ab 00 	sts	0x00AB, r1
    1696:	10 92 aa 00 	sts	0x00AA, r1
    169a:	a1 cb       	rjmp	.-2238   	; 0xdde <main+0xc20>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    169c:	80 91 5a 04 	lds	r24, 0x045A
    16a0:	88 23       	and	r24, r24
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <main+0x14e8>
    16a4:	8d c9       	rjmp	.-3302   	; 0x9c0 <main+0x802>
    16a6:	80 91 5b 04 	lds	r24, 0x045B
    16aa:	88 23       	and	r24, r24
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <main+0x14f2>
    16ae:	88 c9       	rjmp	.-3312   	; 0x9c0 <main+0x802>

				sleep(60);
    16b0:	8c e3       	ldi	r24, 0x3C	; 60
    16b2:	0e 94 41 16 	call	0x2c82	; 0x2c82 <sleep>
    16b6:	60 91 56 04 	lds	r22, 0x0456
    16ba:	82 c9       	rjmp	.-3324   	; 0x9c0 <main+0x802>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    16bc:	80 91 eb 03 	lds	r24, 0x03EB
    16c0:	90 91 ec 03 	lds	r25, 0x03EC
    16c4:	48 c9       	rjmp	.-3440   	; 0x956 <main+0x798>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
    16c6:	90 95       	com	r25
    16c8:	81 95       	neg	r24
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	90 93 9b 00 	sts	0x009B, r25
    16d0:	80 93 9a 00 	sts	0x009A, r24
    16d4:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <main+0x4f4>
					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    16d8:	20 91 ed 03 	lds	r18, 0x03ED
    16dc:	30 91 ee 03 	lds	r19, 0x03EE
    16e0:	a9 01       	movw	r20, r18
    16e2:	ba cd       	rjmp	.-1164   	; 0x1258 <main+0x109a>
    16e4:	a9 01       	movw	r20, r18
    16e6:	76 ce       	rjmp	.-788    	; 0x13d4 <main+0x1216>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	e1 f0       	breq	.+56     	; 0x1724 <main+0x1566>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	11 f1       	breq	.+68     	; 0x1734 <main+0x1576>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	59 f1       	breq	.+86     	; 0x174a <main+0x158c>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    16f4:	00 93 16 02 	sts	0x0216, r16
							pwm_green = MAX_LEDS_PWM;
    16f8:	00 93 15 02 	sts	0x0215, r16
							pwm_red = MAX_LEDS_PWM;
    16fc:	00 93 14 02 	sts	0x0214, r16
    1700:	80 2f       	mov	r24, r16
    1702:	af ce       	rjmp	.-674    	; 0x1462 <main+0x12a4>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1704:	90 95       	com	r25
    1706:	81 95       	neg	r24
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	90 93 ab 00 	sts	0x00AB, r25
    170e:	80 93 aa 00 	sts	0x00AA, r24
    1712:	57 cc       	rjmp	.-1874   	; 0xfc2 <main+0xe04>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1714:	90 95       	com	r25
    1716:	81 95       	neg	r24
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	90 93 ab 00 	sts	0x00AB, r25
    171e:	80 93 aa 00 	sts	0x00AA, r24
    1722:	5d cb       	rjmp	.-2374   	; 0xdde <main+0xc20>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    1724:	00 93 16 02 	sts	0x0216, r16
							pwm_green = 0;
    1728:	10 92 15 02 	sts	0x0215, r1
							pwm_red = MAX_LEDS_PWM;
    172c:	00 93 14 02 	sts	0x0214, r16
    1730:	80 2f       	mov	r24, r16
    1732:	97 ce       	rjmp	.-722    	; 0x1462 <main+0x12a4>
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    1734:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    1736:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    1738:	00 93 16 02 	sts	0x0216, r16
							pwm_green = MAX_LEDS_PWM;
    173c:	00 93 15 02 	sts	0x0215, r16
							pwm_red = 0;
    1740:	10 92 14 02 	sts	0x0214, r1
    1744:	80 91 14 02 	lds	r24, 0x0214
    1748:	8c ce       	rjmp	.-744    	; 0x1462 <main+0x12a4>
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    174a:	10 92 16 02 	sts	0x0216, r1
							pwm_green = 0;
    174e:	10 92 15 02 	sts	0x0215, r1
							pwm_red = 0;
    1752:	10 92 14 02 	sts	0x0214, r1
    1756:	80 91 14 02 	lds	r24, 0x0214
    175a:	83 ce       	rjmp	.-762    	; 0x1462 <main+0x12a4>

0000175c <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    175c:	84 b1       	in	r24, 0x04	; 4
    175e:	80 7f       	andi	r24, 0xF0	; 240
    1760:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1762:	84 b1       	in	r24, 0x04	; 4
    1764:	87 60       	ori	r24, 0x07	; 7
    1766:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1768:	80 e5       	ldi	r24, 0x50	; 80
    176a:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    176c:	8d b5       	in	r24, 0x2d	; 45
    176e:	81 60       	ori	r24, 0x01	; 1
    1770:	8d bd       	out	0x2d, r24	; 45

}
    1772:	08 95       	ret

00001774 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1774:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1776:	1d bc       	out	0x2d, r1	; 45
}
    1778:	08 95       	ret

0000177a <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    177a:	44 23       	and	r20, r20
    177c:	79 f0       	breq	.+30     	; 0x179c <SPI_ReadWrite_Block+0x22>
    177e:	a8 2f       	mov	r26, r24
    1780:	b9 2f       	mov	r27, r25
    1782:	e6 2f       	mov	r30, r22
    1784:	f7 2f       	mov	r31, r23
    1786:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1788:	9d 91       	ld	r25, X+
    178a:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    178c:	0d b4       	in	r0, 0x2d	; 45
    178e:	07 fe       	sbrs	r0, 7
    1790:	fd cf       	rjmp	.-6      	; 0x178c <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1792:	9e b5       	in	r25, 0x2e	; 46
    1794:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	84 17       	cp	r24, r20
    179a:	b0 f3       	brcs	.-20     	; 0x1788 <SPI_ReadWrite_Block+0xe>
    179c:	08 95       	ret

0000179e <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    179e:	66 23       	and	r22, r22
    17a0:	59 f0       	breq	.+22     	; 0x17b8 <SPI_Write_Block+0x1a>
    17a2:	e8 2f       	mov	r30, r24
    17a4:	f9 2f       	mov	r31, r25
    17a6:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    17a8:	91 91       	ld	r25, Z+
    17aa:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    17ac:	0d b4       	in	r0, 0x2d	; 45
    17ae:	07 fe       	sbrs	r0, 7
    17b0:	fd cf       	rjmp	.-6      	; 0x17ac <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	86 17       	cp	r24, r22
    17b6:	c0 f3       	brcs	.-16     	; 0x17a8 <SPI_Write_Block+0xa>
    17b8:	08 95       	ret

000017ba <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    17ba:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    17bc:	0d b4       	in	r0, 0x2d	; 45
    17be:	07 fe       	sbrs	r0, 7
    17c0:	fd cf       	rjmp	.-6      	; 0x17bc <SPI_Write_Byte+0x2>
    return SPDR;
    17c2:	8e b5       	in	r24, 0x2e	; 46
}
    17c4:	08 95       	ret

000017c6 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <mirf_config+0xa>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    17d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    17dc:	8d e0       	ldi	r24, 0x0D	; 13
    17de:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    17e2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    17e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    17e6:	83 e2       	ldi	r24, 0x23	; 35
    17e8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    17f2:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    17f4:	8c e0       	ldi	r24, 0x0C	; 12
    17f6:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    17f8:	85 e8       	ldi	r24, 0x85	; 133
    17fa:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    17fc:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    17fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1800:	80 e3       	ldi	r24, 0x30	; 48
    1802:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1806:	8e 01       	movw	r16, r28
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	c8 01       	movw	r24, r16
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	0e 94 cf 0b 	call	0x179e	; 0x179e <SPI_Write_Block>
    mirf_CSN_hi;
    1814:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1816:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1818:	8a e2       	ldi	r24, 0x2A	; 42
    181a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    181e:	c8 01       	movw	r24, r16
    1820:	63 e0       	ldi	r22, 0x03	; 3
    1822:	0e 94 cf 0b 	call	0x179e	; 0x179e <SPI_Write_Block>
    mirf_CSN_hi;
    1826:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1828:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    182a:	81 e2       	ldi	r24, 0x21	; 33
    182c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1836:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1838:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    183a:	82 e2       	ldi	r24, 0x22	; 34
    183c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1846:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1848:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    184a:	84 e2       	ldi	r24, 0x24	; 36
    184c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1850:	82 e1       	ldi	r24, 0x12	; 18
    1852:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1856:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1858:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    185a:	85 e2       	ldi	r24, 0x25	; 37
    185c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1860:	88 e2       	ldi	r24, 0x28	; 40
    1862:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1866:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1868:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    186a:	81 e3       	ldi	r24, 0x31	; 49
    186c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1870:	8d e0       	ldi	r24, 0x0D	; 13
    1872:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1876:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1878:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    187a:	80 e5       	ldi	r24, 0x50	; 80
    187c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1880:	83 e7       	ldi	r24, 0x73	; 115
    1882:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1886:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1888:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    188a:	8c e3       	ldi	r24, 0x3C	; 60
    188c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1896:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1898:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    189a:	8d e3       	ldi	r24, 0x3D	; 61
    189c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    18a6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18b0:	8f e0       	ldi	r24, 0x0F	; 15
    18b2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    18b6:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    18c8:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    18ca:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    18cc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <mirf_config>
}
    18d0:	08 95       	ret

000018d2 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    18d8:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    18da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18dc:	8a e2       	ldi	r24, 0x2A	; 42
    18de:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    18e2:	ce 01       	movw	r24, r28
    18e4:	65 e0       	ldi	r22, 0x05	; 5
    18e6:	0e 94 cf 0b 	call	0x179e	; 0x179e <SPI_Write_Block>
    mirf_CSN_hi;
    18ea:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    18ec:	2c 9a       	sbi	0x05, 4	; 5
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    18fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18fc:	80 e3       	ldi	r24, 0x30	; 48
    18fe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1902:	ce 01       	movw	r24, r28
    1904:	65 e0       	ldi	r22, 0x05	; 5
    1906:	0e 94 cf 0b 	call	0x179e	; 0x179e <SPI_Write_Block>
    mirf_CSN_hi;
    190a:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1912:	80 91 39 04 	lds	r24, 0x0439
    1916:	88 23       	and	r24, r24
    1918:	11 f0       	breq	.+4      	; 0x191e <mirf_data_ready+0xc>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    191c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    191e:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1926:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1928:	80 74       	andi	r24, 0x40	; 64
    192a:	08 95       	ret

0000192c <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1936:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1938:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    193a:	87 e1       	ldi	r24, 0x17	; 23
    193c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1940:	be 01       	movw	r22, r28
    1942:	6f 5f       	subi	r22, 0xFF	; 255
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	cb 01       	movw	r24, r22
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 bd 0b 	call	0x177a	; 0x177a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    194e:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1950:	89 81       	ldd	r24, Y+1	; 0x01
}
    1952:	81 70       	andi	r24, 0x01	; 1
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    195c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    195e:	82 ee       	ldi	r24, 0xE2	; 226
    1960:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1964:	28 9a       	sbi	0x05, 0	; 5

}
    1966:	08 95       	ret

00001968 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    196e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1970:	81 e6       	ldi	r24, 0x61	; 97
    1972:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1976:	ce 01       	movw	r24, r28
    1978:	be 01       	movw	r22, r28
    197a:	4d e0       	ldi	r20, 0x0D	; 13
    197c:	0e 94 bd 0b 	call	0x177a	; 0x177a <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1980:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1982:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1984:	87 e2       	ldi	r24, 0x27	; 39
    1986:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    198a:	80 e4       	ldi	r24, 0x40	; 64
    198c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1990:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    19a2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19a4:	8f 71       	andi	r24, 0x1F	; 31
    19a6:	80 62       	ori	r24, 0x20	; 32
    19a8:	69 83       	std	Y+1, r22	; 0x01
    19aa:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19ae:	69 81       	ldd	r22, Y+1	; 0x01
    19b0:	86 2f       	mov	r24, r22
    19b2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    19b6:	28 9a       	sbi	0x05, 0	; 5
}
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    19d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    19d2:	8f 71       	andi	r24, 0x1F	; 31
    19d4:	49 83       	std	Y+1, r20	; 0x01
    19d6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    19da:	c8 01       	movw	r24, r16
    19dc:	b8 01       	movw	r22, r16
    19de:	49 81       	ldd	r20, Y+1	; 0x01
    19e0:	0e 94 bd 0b 	call	0x177a	; 0x177a <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    19e4:	28 9a       	sbi	0x05, 0	; 5
}
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1a02:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a04:	8f 71       	andi	r24, 0x1F	; 31
    1a06:	80 62       	ori	r24, 0x20	; 32
    1a08:	49 83       	std	Y+1, r20	; 0x01
    1a0a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a0e:	c8 01       	movw	r24, r16
    1a10:	49 81       	ldd	r20, Y+1	; 0x01
    1a12:	64 2f       	mov	r22, r20
    1a14:	0e 94 cf 0b 	call	0x179e	; 0x179e <SPI_Write_Block>
    mirf_CSN_hi;
    1a18:	28 9a       	sbi	0x05, 0	; 5
}
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	08 95       	ret

00001a26 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	0f 92       	push	r0
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1a36:	80 91 39 04 	lds	r24, 0x0439
    1a3a:	88 23       	and	r24, r24
    1a3c:	e1 f7       	brne	.-8      	; 0x1a36 <mirf_send+0x10>

    mirf_CE_lo;
    1a3e:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 39 04 	sts	0x0439, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a46:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a48:	80 e2       	ldi	r24, 0x20	; 32
    1a4a:	69 83       	std	Y+1, r22	; 0x01
    1a4c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a50:	8a e4       	ldi	r24, 0x4A	; 74
    1a52:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1a56:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1a58:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1a5a:	81 ee       	ldi	r24, 0xE1	; 225
    1a5c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1a60:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1a62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1a64:	80 ea       	ldi	r24, 0xA0	; 160
    1a66:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	69 81       	ldd	r22, Y+1	; 0x01
    1a6e:	0e 94 cf 0b 	call	0x179e	; 0x179e <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1a72:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1a74:	2c 9a       	sbi	0x05, 4	; 5
}
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	18 2f       	mov	r17, r24
    1a96:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1a98:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1a9a:	81 ee       	ldi	r24, 0xE1	; 225
    1a9c:	99 83       	std	Y+1, r25	; 0x01
    1a9e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1aa2:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1aa4:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1aa6:	88 ea       	ldi	r24, 0xA8	; 168
    1aa8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1aac:	99 81       	ldd	r25, Y+1	; 0x01
    1aae:	00 23       	and	r16, r16
    1ab0:	61 f0       	breq	.+24     	; 0x1aca <writeAckPayload+0x48>
    1ab2:	61 2f       	mov	r22, r17
    1ab4:	79 2f       	mov	r23, r25
    1ab6:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1ab8:	f7 01       	movw	r30, r14
    1aba:	81 91       	ld	r24, Z+
    1abc:	7f 01       	movw	r14, r30
    1abe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1ac2:	8e 2d       	mov	r24, r14
    1ac4:	81 1b       	sub	r24, r17
    1ac6:	80 17       	cp	r24, r16
    1ac8:	b8 f3       	brcs	.-18     	; 0x1ab8 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1aca:	28 9a       	sbi	0x05, 0	; 5


}
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	08 95       	ret

00001adc <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1adc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1ade:	81 ee       	ldi	r24, 0xE1	; 225
    1ae0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Byte>
    mirf_CSN_hi;
    1ae4:	28 9a       	sbi	0x05, 0	; 5

}
    1ae6:	08 95       	ret

00001ae8 <init_ir_remote_control>:
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1ae8:	e8 e6       	ldi	r30, 0x68	; 104
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1af2:	ec e6       	ldi	r30, 0x6C	; 108
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 68       	ori	r24, 0x80	; 128
    1afa:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1afc:	e0 eb       	ldi	r30, 0xB0	; 176
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	82 60       	ori	r24, 0x02	; 2
    1b04:	80 83       	st	Z, r24

}
    1b06:	08 95       	ret

00001b08 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1b14:	80 91 19 02 	lds	r24, 0x0219
    1b18:	88 23       	and	r24, r24
    1b1a:	21 f1       	breq	.+72     	; 0x1b64 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1b1c:	80 91 03 01 	lds	r24, 0x0103
    1b20:	86 fd       	sbrc	r24, 6
    1b22:	20 c0       	rjmp	.+64     	; 0x1b64 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1b24:	80 91 68 00 	lds	r24, 0x0068
    1b28:	8d 7f       	andi	r24, 0xFD	; 253
    1b2a:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1b2e:	80 91 6c 00 	lds	r24, 0x006C
    1b32:	8f 77       	andi	r24, 0x7F	; 127
    1b34:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 1a 02 	sts	0x021A, r24
			OCR2A = 13;									// output compare register
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1b44:	80 91 b1 00 	lds	r24, 0x00B1
    1b48:	86 60       	ori	r24, 0x06	; 6
    1b4a:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1b4e:	80 91 70 00 	lds	r24, 0x0070
    1b52:	82 60       	ori	r24, 0x02	; 2
    1b54:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1b58:	10 92 2c 03 	sts	0x032C, r1
    1b5c:	10 92 2d 03 	sts	0x032D, r1
    1b60:	10 92 2e 03 	sts	0x032E, r1

		}

	}
	
}
    1b64:	8f 91       	pop	r24
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1b86:	80 91 b1 00 	lds	r24, 0x00B1
    1b8a:	88 7f       	andi	r24, 0xF8	; 248
    1b8c:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1b90:	80 91 1a 02 	lds	r24, 0x021A
    1b94:	88 23       	and	r24, r24
    1b96:	a9 f0       	breq	.+42     	; 0x1bc2 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1b98:	80 91 03 01 	lds	r24, 0x0103
    1b9c:	86 ff       	sbrs	r24, 6
    1b9e:	65 c0       	rjmp	.+202    	; 0x1c6a <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1ba0:	80 91 68 00 	lds	r24, 0x0068
    1ba4:	82 60       	ori	r24, 0x02	; 2
    1ba6:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1baa:	80 91 6c 00 	lds	r24, 0x006C
    1bae:	80 68       	ori	r24, 0x80	; 128
    1bb0:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	9f ef       	ldi	r25, 0xFF	; 255
    1bb8:	90 93 02 02 	sts	0x0202, r25
    1bbc:	80 93 01 02 	sts	0x0201, r24
    1bc0:	49 c0       	rjmp	.+146    	; 0x1c54 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1bc2:	80 91 01 02 	lds	r24, 0x0201
    1bc6:	90 91 02 02 	lds	r25, 0x0202
    1bca:	2f ef       	ldi	r18, 0xFF	; 255
    1bcc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bce:	92 07       	cpc	r25, r18
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <__vector_13+0x64>
    1bd2:	63 c0       	rjmp	.+198    	; 0x1c9a <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__vector_13+0x6c>
    1bda:	98 c0       	rjmp	.+304    	; 0x1d0c <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1bdc:	9c 01       	movw	r18, r24
    1bde:	22 50       	subi	r18, 0x02	; 2
    1be0:	30 40       	sbci	r19, 0x00	; 0
    1be2:	25 30       	cpi	r18, 0x05	; 5
    1be4:	31 05       	cpc	r19, r1
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <__vector_13+0x7a>
    1be8:	67 c0       	rjmp	.+206    	; 0x1cb8 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    1bea:	9c 01       	movw	r18, r24
    1bec:	27 50       	subi	r18, 0x07	; 7
    1bee:	30 40       	sbci	r19, 0x00	; 0
    1bf0:	26 30       	cpi	r18, 0x06	; 6
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <__vector_13+0x88>
    1bf6:	bd c0       	rjmp	.+378    	; 0x1d72 <__vector_13+0x202>

				OCR2A = 54;
    1bf8:	26 e3       	ldi	r18, 0x36	; 54
    1bfa:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1bfe:	20 91 b1 00 	lds	r18, 0x00B1
    1c02:	26 60       	ori	r18, 0x06	; 6
    1c04:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1c08:	20 91 70 00 	lds	r18, 0x0070
    1c0c:	22 60       	ori	r18, 0x02	; 2
    1c0e:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1c12:	20 91 03 01 	lds	r18, 0x0103
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	20 74       	andi	r18, 0x40	; 64
    1c1a:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1c1c:	00 24       	eor	r0, r0
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	00 1c       	adc	r0, r0
    1c24:	22 0f       	add	r18, r18
    1c26:	33 1f       	adc	r19, r19
    1c28:	00 1c       	adc	r0, r0
    1c2a:	23 2f       	mov	r18, r19
    1c2c:	30 2d       	mov	r19, r0
    1c2e:	4c e0       	ldi	r20, 0x0C	; 12
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	48 1b       	sub	r20, r24
    1c34:	59 0b       	sbc	r21, r25
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <__vector_13+0xcc>
    1c38:	22 0f       	add	r18, r18
    1c3a:	33 1f       	adc	r19, r19
    1c3c:	4a 95       	dec	r20
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <__vector_13+0xc8>
				data_temp += temp;
    1c40:	40 91 2c 03 	lds	r20, 0x032C
    1c44:	42 0f       	add	r20, r18
    1c46:	40 93 2c 03 	sts	0x032C, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1c4a:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1c4c:	90 93 02 02 	sts	0x0202, r25
    1c50:	80 93 01 02 	sts	0x0201, r24

		}

}
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	5f 91       	pop	r21
    1c5a:	4f 91       	pop	r20
    1c5c:	3f 91       	pop	r19
    1c5e:	2f 91       	pop	r18
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1c6a:	10 92 1a 02 	sts	0x021A, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1c6e:	83 e3       	ldi	r24, 0x33	; 51
    1c70:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1c74:	80 91 b1 00 	lds	r24, 0x00B1
    1c78:	86 60       	ori	r24, 0x06	; 6
    1c7a:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1c7e:	80 91 70 00 	lds	r24, 0x0070
    1c82:	82 60       	ori	r24, 0x02	; 2
    1c84:	80 93 70 00 	sts	0x0070, r24
    1c88:	80 91 01 02 	lds	r24, 0x0201
    1c8c:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1c90:	2f ef       	ldi	r18, 0xFF	; 255
    1c92:	8f 3f       	cpi	r24, 0xFF	; 255
    1c94:	92 07       	cpc	r25, r18
    1c96:	c9 f6       	brne	.-78     	; 0x1c4a <__vector_13+0xda>
    1c98:	dd cf       	rjmp	.-70     	; 0x1c54 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1c9a:	20 91 03 01 	lds	r18, 0x0103
    1c9e:	26 ff       	sbrs	r18, 6
    1ca0:	52 c0       	rjmp	.+164    	; 0x1d46 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1ca2:	20 91 68 00 	lds	r18, 0x0068
    1ca6:	22 60       	ori	r18, 0x02	; 2
    1ca8:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1cac:	20 91 6c 00 	lds	r18, 0x006C
    1cb0:	20 68       	ori	r18, 0x80	; 128
    1cb2:	20 93 6c 00 	sts	0x006C, r18
    1cb6:	ce cf       	rjmp	.-100    	; 0x1c54 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1cb8:	26 e3       	ldi	r18, 0x36	; 54
    1cba:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1cbe:	20 91 b1 00 	lds	r18, 0x00B1
    1cc2:	26 60       	ori	r18, 0x06	; 6
    1cc4:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1cc8:	20 91 70 00 	lds	r18, 0x0070
    1ccc:	22 60       	ori	r18, 0x02	; 2
    1cce:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1cd2:	20 91 03 01 	lds	r18, 0x0103
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	20 74       	andi	r18, 0x40	; 64
    1cda:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1cdc:	00 24       	eor	r0, r0
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	00 1c       	adc	r0, r0
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	00 1c       	adc	r0, r0
    1cea:	23 2f       	mov	r18, r19
    1cec:	30 2d       	mov	r19, r0
    1cee:	46 e0       	ldi	r20, 0x06	; 6
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	48 1b       	sub	r20, r24
    1cf4:	59 0b       	sbc	r21, r25
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <__vector_13+0x18c>
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	4a 95       	dec	r20
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <__vector_13+0x188>
				address_temp += temp;
    1d00:	40 91 2d 03 	lds	r20, 0x032D
    1d04:	42 0f       	add	r20, r18
    1d06:	40 93 2d 03 	sts	0x032D, r20
    1d0a:	9f cf       	rjmp	.-194    	; 0x1c4a <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    1d0c:	20 91 03 01 	lds	r18, 0x0103
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	20 74       	andi	r18, 0x40	; 64
    1d14:	30 70       	andi	r19, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	23 2f       	mov	r18, r19
    1d1a:	00 0c       	add	r0, r0
    1d1c:	22 1f       	adc	r18, r18
    1d1e:	33 0b       	sbc	r19, r19
    1d20:	00 0c       	add	r0, r0
    1d22:	22 1f       	adc	r18, r18
    1d24:	33 1f       	adc	r19, r19
    1d26:	20 93 2e 03 	sts	0x032E, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1d2a:	26 e3       	ldi	r18, 0x36	; 54
    1d2c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1d30:	20 91 b1 00 	lds	r18, 0x00B1
    1d34:	26 60       	ori	r18, 0x06	; 6
    1d36:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1d3a:	20 91 70 00 	lds	r18, 0x0070
    1d3e:	22 60       	ori	r18, 0x02	; 2
    1d40:	20 93 70 00 	sts	0x0070, r18
    1d44:	82 cf       	rjmp	.-252    	; 0x1c4a <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1d46:	8c e1       	ldi	r24, 0x1C	; 28
    1d48:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1d4c:	80 91 b1 00 	lds	r24, 0x00B1
    1d50:	86 60       	ori	r24, 0x06	; 6
    1d52:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1d56:	80 91 70 00 	lds	r24, 0x0070
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1d60:	10 92 2c 03 	sts	0x032C, r1
    1d64:	10 92 2d 03 	sts	0x032D, r1
    1d68:	10 92 2e 03 	sts	0x032E, r1
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	6d cf       	rjmp	.-294    	; 0x1c4c <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1d72:	8d 30       	cpi	r24, 0x0D	; 13
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <__vector_13+0x20a>
    1d78:	68 cf       	rjmp	.-304    	; 0x1c4a <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1d7a:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1d7e:	80 91 68 00 	lds	r24, 0x0068
    1d82:	82 60       	ori	r24, 0x02	; 2
    1d84:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1d88:	80 91 6c 00 	lds	r24, 0x006C
    1d8c:	80 68       	ori	r24, 0x80	; 128
    1d8e:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	9f ef       	ldi	r25, 0xFF	; 255
    1d96:	90 93 02 02 	sts	0x0202, r25
    1d9a:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1d9e:	80 91 2e 03 	lds	r24, 0x032E
    1da2:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1da6:	80 91 2d 03 	lds	r24, 0x032D
    1daa:	80 93 2a 03 	sts	0x032A, r24
				data_ir = data_temp;
    1dae:	80 91 2c 03 	lds	r24, 0x032C
    1db2:	80 93 2b 03 	sts	0x032B, r24
				command_received=1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	80 93 09 04 	sts	0x0409, r24
    1dbc:	4b cf       	rjmp	.-362    	; 0x1c54 <__vector_13+0xe4>

00001dbe <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1dbe:	80 91 00 02 	lds	r24, 0x0200
    1dc2:	08 95       	ret

00001dc4 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1dc4:	80 91 2a 03 	lds	r24, 0x032A
    1dc8:	08 95       	ret

00001dca <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1dca:	80 91 2b 03 	lds	r24, 0x032B
    1dce:	08 95       	ret

00001dd0 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1dd0:	08 95       	ret

00001dd2 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <start_vertical_speed_control_left+0x14>
    1de4:	b7 c0       	rjmp	.+366    	; 0x1f54 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1de6:	20 91 1f 04 	lds	r18, 0x041F
    1dea:	30 91 20 04 	lds	r19, 0x0420
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	2e 30       	cpi	r18, 0x0E	; 14
    1df2:	34 07       	cpc	r19, r20
    1df4:	0c f4       	brge	.+2      	; 0x1df8 <start_vertical_speed_control_left+0x26>
    1df6:	88 c0       	rjmp	.+272    	; 0x1f08 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    1df8:	18 16       	cp	r1, r24
    1dfa:	19 06       	cpc	r1, r25
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <start_vertical_speed_control_left+0x2e>
    1dfe:	13 c1       	rjmp	.+550    	; 0x2026 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    1e00:	88 e6       	ldi	r24, 0x68	; 104
    1e02:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1e04:	82 1b       	sub	r24, r18
    1e06:	93 0b       	sbc	r25, r19
    1e08:	95 95       	asr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	95 95       	asr	r25
    1e0e:	87 95       	ror	r24
    1e10:	29 e1       	ldi	r18, 0x19	; 25
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	28 1b       	sub	r18, r24
    1e16:	39 0b       	sbc	r19, r25
    1e18:	30 93 0c 02 	sts	0x020C, r19
    1e1c:	20 93 0b 02 	sts	0x020B, r18
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_left_speed_prev = delta_left_speed_current; 
    1e20:	40 91 3a 04 	lds	r20, 0x043A
    1e24:	50 91 3b 04 	lds	r21, 0x043B
    1e28:	50 93 55 04 	sts	0x0455, r21
    1e2c:	40 93 54 04 	sts	0x0454, r20
	if(*pwm_left >= 0) {
    1e30:	20 81       	ld	r18, Z
    1e32:	31 81       	ldd	r19, Z+1	; 0x01
    1e34:	37 fd       	sbrc	r19, 7
    1e36:	d2 c0       	rjmp	.+420    	; 0x1fdc <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1e38:	80 91 df 03 	lds	r24, 0x03DF
    1e3c:	90 91 e0 03 	lds	r25, 0x03E0
    1e40:	b9 01       	movw	r22, r18
    1e42:	68 1b       	sub	r22, r24
    1e44:	79 0b       	sbc	r23, r25
    1e46:	cb 01       	movw	r24, r22
    1e48:	70 93 3b 04 	sts	0x043B, r23
    1e4c:	60 93 3a 04 	sts	0x043A, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    1e50:	20 91 f7 03 	lds	r18, 0x03F7
    1e54:	30 91 f8 03 	lds	r19, 0x03F8
    1e58:	28 0f       	add	r18, r24
    1e5a:	39 1f       	adc	r19, r25
    1e5c:	30 93 f8 03 	sts	0x03F8, r19
    1e60:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1e64:	76 e0       	ldi	r23, 0x06	; 6
    1e66:	21 34       	cpi	r18, 0x41	; 65
    1e68:	37 07       	cpc	r19, r23
    1e6a:	0c f4       	brge	.+2      	; 0x1e6e <start_vertical_speed_control_left+0x9c>
    1e6c:	84 c0       	rjmp	.+264    	; 0x1f76 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1e6e:	20 e4       	ldi	r18, 0x40	; 64
    1e70:	36 e0       	ldi	r19, 0x06	; 6
    1e72:	30 93 f8 03 	sts	0x03F8, r19
    1e76:	20 93 f7 03 	sts	0x03F7, r18
    1e7a:	60 ec       	ldi	r22, 0xC0	; 192
    1e7c:	72 e1       	ldi	r23, 0x12	; 18
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1e7e:	9c 01       	movw	r18, r24
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	dc 01       	movw	r26, r24
    1e86:	aa 0f       	add	r26, r26
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	aa 0f       	add	r26, r26
    1e8c:	bb 1f       	adc	r27, r27
    1e8e:	aa 0f       	add	r26, r26
    1e90:	bb 1f       	adc	r27, r27
    1e92:	2a 0f       	add	r18, r26
    1e94:	3b 1f       	adc	r19, r27
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
    1e96:	00 81       	ld	r16, Z
    1e98:	11 81       	ldd	r17, Z+1	; 0x01
    1e9a:	c0 91 0b 02 	lds	r28, 0x020B
    1e9e:	d0 91 0c 02 	lds	r29, 0x020C
    1ea2:	0c 9f       	mul	r16, r28
    1ea4:	d0 01       	movw	r26, r0
    1ea6:	0d 9f       	mul	r16, r29
    1ea8:	b0 0d       	add	r27, r0
    1eaa:	1c 9f       	mul	r17, r28
    1eac:	b0 0d       	add	r27, r0
    1eae:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1eb0:	2a 0f       	add	r18, r26
    1eb2:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    1eb4:	48 1b       	sub	r20, r24
    1eb6:	59 0b       	sbc	r21, r25
    1eb8:	44 0f       	add	r20, r20
    1eba:	55 1f       	adc	r21, r21
    1ebc:	24 0f       	add	r18, r20
    1ebe:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    1ec0:	26 0f       	add	r18, r22
    1ec2:	37 1f       	adc	r19, r23
    1ec4:	30 93 f2 03 	sts	0x03F2, r19
    1ec8:	20 93 f1 03 	sts	0x03F1, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1ecc:	37 fd       	sbrc	r19, 7
    1ece:	69 c0       	rjmp	.+210    	; 0x1fa2 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1ed0:	12 16       	cp	r1, r18
    1ed2:	13 06       	cpc	r1, r19
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <start_vertical_speed_control_left+0x106>
    1ed6:	6f c0       	rjmp	.+222    	; 0x1fb6 <start_vertical_speed_control_left+0x1e4>
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	97 fd       	sbrc	r25, 7
    1ede:	89 c0       	rjmp	.+274    	; 0x1ff2 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1ee0:	7d e5       	ldi	r23, 0x5D	; 93
    1ee2:	21 3c       	cpi	r18, 0xC1	; 193
    1ee4:	37 07       	cpc	r19, r23
    1ee6:	0c f4       	brge	.+2      	; 0x1eea <start_vertical_speed_control_left+0x118>
    1ee8:	66 c0       	rjmp	.+204    	; 0x1fb6 <start_vertical_speed_control_left+0x1e4>
    1eea:	80 ec       	ldi	r24, 0xC0	; 192
    1eec:	9d e5       	ldi	r25, 0x5D	; 93
    1eee:	90 93 f2 03 	sts	0x03F2, r25
    1ef2:	80 93 f1 03 	sts	0x03F1, r24
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1f08:	24 3b       	cpi	r18, 0xB4	; 180
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	94 f4       	brge	.+36     	; 0x1f32 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    1f0e:	2a 35       	cpi	r18, 0x5A	; 90
    1f10:	31 05       	cpc	r19, r1
    1f12:	7c f4       	brge	.+30     	; 0x1f32 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    1f14:	18 16       	cp	r1, r24
    1f16:	19 06       	cpc	r1, r25
    1f18:	0c f0       	brlt	.+2      	; 0x1f1c <start_vertical_speed_control_left+0x14a>
    1f1a:	93 c0       	rjmp	.+294    	; 0x2042 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1f1c:	35 95       	asr	r19
    1f1e:	27 95       	ror	r18
    1f20:	35 95       	asr	r19
    1f22:	27 95       	ror	r18
    1f24:	27 5e       	subi	r18, 0xE7	; 231
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	30 93 0c 02 	sts	0x020C, r19
    1f2c:	20 93 0b 02 	sts	0x020B, r18
    1f30:	77 cf       	rjmp	.-274    	; 0x1e20 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
    1f32:	18 16       	cp	r1, r24
    1f34:	19 06       	cpc	r1, r25
    1f36:	94 f5       	brge	.+100    	; 0x1f9c <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1f38:	84 eb       	ldi	r24, 0xB4	; 180
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	82 1b       	sub	r24, r18
    1f3e:	93 0b       	sbc	r25, r19
    1f40:	95 95       	asr	r25
    1f42:	87 95       	ror	r24
    1f44:	95 95       	asr	r25
    1f46:	87 95       	ror	r24
    1f48:	49 96       	adiw	r24, 0x19	; 25
    1f4a:	90 93 0c 02 	sts	0x020C, r25
    1f4e:	80 93 0b 02 	sts	0x020B, r24
    1f52:	66 cf       	rjmp	.-308    	; 0x1e20 <start_vertical_speed_control_left+0x4e>
}

void start_vertical_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    1f54:	10 92 f8 03 	sts	0x03F8, r1
    1f58:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1f5c:	10 92 3b 04 	sts	0x043B, r1
    1f60:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    1f64:	10 92 55 04 	sts	0x0455, r1
    1f68:	10 92 54 04 	sts	0x0454, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1f76:	69 ef       	ldi	r22, 0xF9	; 249
    1f78:	20 3c       	cpi	r18, 0xC0	; 192
    1f7a:	36 07       	cpc	r19, r22
    1f7c:	4c f4       	brge	.+18     	; 0x1f90 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1f7e:	20 ec       	ldi	r18, 0xC0	; 192
    1f80:	39 ef       	ldi	r19, 0xF9	; 249
    1f82:	30 93 f8 03 	sts	0x03F8, r19
    1f86:	20 93 f7 03 	sts	0x03F7, r18
    1f8a:	60 e4       	ldi	r22, 0x40	; 64
    1f8c:	7d ee       	ldi	r23, 0xED	; 237
    1f8e:	77 cf       	rjmp	.-274    	; 0x1e7e <start_vertical_speed_control_left+0xac>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1f90:	b9 01       	movw	r22, r18
    1f92:	66 0f       	add	r22, r22
    1f94:	77 1f       	adc	r23, r23
    1f96:	62 0f       	add	r22, r18
    1f98:	73 1f       	adc	r23, r19
    1f9a:	71 cf       	rjmp	.-286    	; 0x1e7e <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1f9c:	84 eb       	ldi	r24, 0xB4	; 180
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	31 cf       	rjmp	.-414    	; 0x1e04 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	97 fd       	sbrc	r25, 7
    1fa8:	06 c0       	rjmp	.+12     	; 0x1fb6 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    1faa:	10 92 f2 03 	sts	0x03F2, r1
    1fae:	10 92 f1 03 	sts	0x03F1, r1
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1fb6:	82 ea       	ldi	r24, 0xA2	; 162
    1fb8:	20 34       	cpi	r18, 0x40	; 64
    1fba:	38 07       	cpc	r19, r24
    1fbc:	04 f5       	brge	.+64     	; 0x1ffe <start_vertical_speed_control_left+0x22c>
    1fbe:	80 e4       	ldi	r24, 0x40	; 64
    1fc0:	92 ea       	ldi	r25, 0xA2	; 162
    1fc2:	90 93 f2 03 	sts	0x03F2, r25
    1fc6:	80 93 f1 03 	sts	0x03F1, r24
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	9e ef       	ldi	r25, 0xFE	; 254
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24


}
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1fdc:	80 91 df 03 	lds	r24, 0x03DF
    1fe0:	90 91 e0 03 	lds	r25, 0x03E0
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	90 93 3b 04 	sts	0x043B, r25
    1fec:	80 93 3a 04 	sts	0x043A, r24
    1ff0:	2f cf       	rjmp	.-418    	; 0x1e50 <start_vertical_speed_control_left+0x7e>

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1ff2:	10 92 f2 03 	sts	0x03F2, r1
    1ff6:	10 92 f1 03 	sts	0x03F1, r1
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1ffe:	35 95       	asr	r19
    2000:	27 95       	ror	r18
    2002:	35 95       	asr	r19
    2004:	27 95       	ror	r18
    2006:	35 95       	asr	r19
    2008:	27 95       	ror	r18
    200a:	35 95       	asr	r19
    200c:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    200e:	31 83       	std	Z+1, r19	; 0x01
    2010:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2012:	42 e0       	ldi	r20, 0x02	; 2
    2014:	21 30       	cpi	r18, 0x01	; 1
    2016:	34 07       	cpc	r19, r20
    2018:	0c f0       	brlt	.+2      	; 0x201c <start_vertical_speed_control_left+0x24a>
    201a:	6d cf       	rjmp	.-294    	; 0x1ef6 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    201c:	6e ef       	ldi	r22, 0xFE	; 254
    201e:	20 30       	cpi	r18, 0x00	; 0
    2020:	36 07       	cpc	r19, r22
    2022:	9c f2       	brlt	.-90     	; 0x1fca <start_vertical_speed_control_left+0x1f8>
    2024:	6c cf       	rjmp	.-296    	; 0x1efe <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2026:	88 e6       	ldi	r24, 0x68	; 104
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	82 1b       	sub	r24, r18
    202c:	93 0b       	sbc	r25, r19
    202e:	95 95       	asr	r25
    2030:	87 95       	ror	r24
    2032:	95 95       	asr	r25
    2034:	87 95       	ror	r24
    2036:	49 96       	adiw	r24, 0x19	; 25
    2038:	90 93 0c 02 	sts	0x020C, r25
    203c:	80 93 0b 02 	sts	0x020B, r24
    2040:	ef ce       	rjmp	.-546    	; 0x1e20 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2042:	35 95       	asr	r19
    2044:	27 95       	ror	r18
    2046:	35 95       	asr	r19
    2048:	27 95       	ror	r18
    204a:	89 e1       	ldi	r24, 0x19	; 25
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	82 1b       	sub	r24, r18
    2050:	93 0b       	sbc	r25, r19
    2052:	90 93 0c 02 	sts	0x020C, r25
    2056:	80 93 0b 02 	sts	0x020B, r24
    205a:	e2 ce       	rjmp	.-572    	; 0x1e20 <start_vertical_speed_control_left+0x4e>

0000205c <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	09 f4       	brne	.+2      	; 0x2070 <start_vertical_speed_control_right+0x14>
    206e:	b7 c0       	rjmp	.+366    	; 0x21de <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2070:	20 91 1f 04 	lds	r18, 0x041F
    2074:	30 91 20 04 	lds	r19, 0x0420
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	2e 30       	cpi	r18, 0x0E	; 14
    207c:	34 07       	cpc	r19, r20
    207e:	0c f4       	brge	.+2      	; 0x2082 <start_vertical_speed_control_right+0x26>
    2080:	88 c0       	rjmp	.+272    	; 0x2192 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    2082:	18 16       	cp	r1, r24
    2084:	19 06       	cpc	r1, r25
    2086:	0c f0       	brlt	.+2      	; 0x208a <start_vertical_speed_control_right+0x2e>
    2088:	13 c1       	rjmp	.+550    	; 0x22b0 <__stack+0xb1>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    208a:	88 e6       	ldi	r24, 0x68	; 104
    208c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    208e:	82 1b       	sub	r24, r18
    2090:	93 0b       	sbc	r25, r19
    2092:	95 95       	asr	r25
    2094:	87 95       	ror	r24
    2096:	95 95       	asr	r25
    2098:	87 95       	ror	r24
    209a:	29 e1       	ldi	r18, 0x19	; 25
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	28 1b       	sub	r18, r24
    20a0:	39 0b       	sbc	r19, r25
    20a2:	30 93 0e 02 	sts	0x020E, r19
    20a6:	20 93 0d 02 	sts	0x020D, r18
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_right_speed_prev = delta_right_speed_current;
    20aa:	40 91 63 04 	lds	r20, 0x0463
    20ae:	50 91 64 04 	lds	r21, 0x0464
    20b2:	50 93 3d 04 	sts	0x043D, r21
    20b6:	40 93 3c 04 	sts	0x043C, r20
	if(*pwm_right >= 0) {
    20ba:	20 81       	ld	r18, Z
    20bc:	31 81       	ldd	r19, Z+1	; 0x01
    20be:	37 fd       	sbrc	r19, 7
    20c0:	d2 c0       	rjmp	.+420    	; 0x2266 <__stack+0x67>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    20c2:	80 91 e1 03 	lds	r24, 0x03E1
    20c6:	90 91 e2 03 	lds	r25, 0x03E2
    20ca:	b9 01       	movw	r22, r18
    20cc:	68 1b       	sub	r22, r24
    20ce:	79 0b       	sbc	r23, r25
    20d0:	cb 01       	movw	r24, r22
    20d2:	70 93 64 04 	sts	0x0464, r23
    20d6:	60 93 63 04 	sts	0x0463, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    20da:	20 91 f9 03 	lds	r18, 0x03F9
    20de:	30 91 fa 03 	lds	r19, 0x03FA
    20e2:	28 0f       	add	r18, r24
    20e4:	39 1f       	adc	r19, r25
    20e6:	30 93 fa 03 	sts	0x03FA, r19
    20ea:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    20ee:	76 e0       	ldi	r23, 0x06	; 6
    20f0:	21 34       	cpi	r18, 0x41	; 65
    20f2:	37 07       	cpc	r19, r23
    20f4:	0c f4       	brge	.+2      	; 0x20f8 <start_vertical_speed_control_right+0x9c>
    20f6:	84 c0       	rjmp	.+264    	; 0x2200 <__stack+0x1>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    20f8:	20 e4       	ldi	r18, 0x40	; 64
    20fa:	36 e0       	ldi	r19, 0x06	; 6
    20fc:	30 93 fa 03 	sts	0x03FA, r19
    2100:	20 93 f9 03 	sts	0x03F9, r18
    2104:	60 ec       	ldi	r22, 0xC0	; 192
    2106:	72 e1       	ldi	r23, 0x12	; 18
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2108:	9c 01       	movw	r18, r24
    210a:	22 0f       	add	r18, r18
    210c:	33 1f       	adc	r19, r19
    210e:	dc 01       	movw	r26, r24
    2110:	aa 0f       	add	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	aa 0f       	add	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	aa 0f       	add	r26, r26
    211a:	bb 1f       	adc	r27, r27
    211c:	2a 0f       	add	r18, r26
    211e:	3b 1f       	adc	r19, r27
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2120:	00 81       	ld	r16, Z
    2122:	11 81       	ldd	r17, Z+1	; 0x01
    2124:	c0 91 0d 02 	lds	r28, 0x020D
    2128:	d0 91 0e 02 	lds	r29, 0x020E
    212c:	0c 9f       	mul	r16, r28
    212e:	d0 01       	movw	r26, r0
    2130:	0d 9f       	mul	r16, r29
    2132:	b0 0d       	add	r27, r0
    2134:	1c 9f       	mul	r17, r28
    2136:	b0 0d       	add	r27, r0
    2138:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    213a:	2a 0f       	add	r18, r26
    213c:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    213e:	48 1b       	sub	r20, r24
    2140:	59 0b       	sbc	r21, r25
    2142:	44 0f       	add	r20, r20
    2144:	55 1f       	adc	r21, r21
    2146:	24 0f       	add	r18, r20
    2148:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    214a:	26 0f       	add	r18, r22
    214c:	37 1f       	adc	r19, r23
    214e:	30 93 f0 03 	sts	0x03F0, r19
    2152:	20 93 ef 03 	sts	0x03EF, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2156:	37 fd       	sbrc	r19, 7
    2158:	69 c0       	rjmp	.+210    	; 0x222c <__stack+0x2d>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    215a:	12 16       	cp	r1, r18
    215c:	13 06       	cpc	r1, r19
    215e:	0c f0       	brlt	.+2      	; 0x2162 <start_vertical_speed_control_right+0x106>
    2160:	6f c0       	rjmp	.+222    	; 0x2240 <__stack+0x41>
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	97 fd       	sbrc	r25, 7
    2168:	89 c0       	rjmp	.+274    	; 0x227c <__stack+0x7d>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    216a:	7d e5       	ldi	r23, 0x5D	; 93
    216c:	21 3c       	cpi	r18, 0xC1	; 193
    216e:	37 07       	cpc	r19, r23
    2170:	0c f4       	brge	.+2      	; 0x2174 <start_vertical_speed_control_right+0x118>
    2172:	66 c0       	rjmp	.+204    	; 0x2240 <__stack+0x41>
    2174:	80 ec       	ldi	r24, 0xC0	; 192
    2176:	9d e5       	ldi	r25, 0x5D	; 93
    2178:	90 93 f0 03 	sts	0x03F0, r25
    217c:	80 93 ef 03 	sts	0x03EF, r24
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	92 e0       	ldi	r25, 0x02	; 2
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2192:	24 3b       	cpi	r18, 0xB4	; 180
    2194:	31 05       	cpc	r19, r1
    2196:	94 f4       	brge	.+36     	; 0x21bc <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    2198:	2a 35       	cpi	r18, 0x5A	; 90
    219a:	31 05       	cpc	r19, r1
    219c:	7c f4       	brge	.+30     	; 0x21bc <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    219e:	18 16       	cp	r1, r24
    21a0:	19 06       	cpc	r1, r25
    21a2:	0c f0       	brlt	.+2      	; 0x21a6 <start_vertical_speed_control_right+0x14a>
    21a4:	93 c0       	rjmp	.+294    	; 0x22cc <__stack+0xcd>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    21a6:	35 95       	asr	r19
    21a8:	27 95       	ror	r18
    21aa:	35 95       	asr	r19
    21ac:	27 95       	ror	r18
    21ae:	27 5e       	subi	r18, 0xE7	; 231
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	30 93 0e 02 	sts	0x020E, r19
    21b6:	20 93 0d 02 	sts	0x020D, r18
    21ba:	77 cf       	rjmp	.-274    	; 0x20aa <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
    21bc:	18 16       	cp	r1, r24
    21be:	19 06       	cpc	r1, r25
    21c0:	94 f5       	brge	.+100    	; 0x2226 <__stack+0x27>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    21c2:	84 eb       	ldi	r24, 0xB4	; 180
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	82 1b       	sub	r24, r18
    21c8:	93 0b       	sbc	r25, r19
    21ca:	95 95       	asr	r25
    21cc:	87 95       	ror	r24
    21ce:	95 95       	asr	r25
    21d0:	87 95       	ror	r24
    21d2:	49 96       	adiw	r24, 0x19	; 25
    21d4:	90 93 0e 02 	sts	0x020E, r25
    21d8:	80 93 0d 02 	sts	0x020D, r24
    21dc:	66 cf       	rjmp	.-308    	; 0x20aa <start_vertical_speed_control_right+0x4e>


void start_vertical_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    21de:	10 92 fa 03 	sts	0x03FA, r1
    21e2:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    21e6:	10 92 64 04 	sts	0x0464, r1
    21ea:	10 92 63 04 	sts	0x0463, r1
		delta_right_speed_prev = 0;
    21ee:	10 92 3d 04 	sts	0x043D, r1
    21f2:	10 92 3c 04 	sts	0x043C, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2200:	69 ef       	ldi	r22, 0xF9	; 249
    2202:	20 3c       	cpi	r18, 0xC0	; 192
    2204:	36 07       	cpc	r19, r22
    2206:	4c f4       	brge	.+18     	; 0x221a <__stack+0x1b>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2208:	20 ec       	ldi	r18, 0xC0	; 192
    220a:	39 ef       	ldi	r19, 0xF9	; 249
    220c:	30 93 fa 03 	sts	0x03FA, r19
    2210:	20 93 f9 03 	sts	0x03F9, r18
    2214:	60 e4       	ldi	r22, 0x40	; 64
    2216:	7d ee       	ldi	r23, 0xED	; 237
    2218:	77 cf       	rjmp	.-274    	; 0x2108 <start_vertical_speed_control_right+0xac>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    221a:	b9 01       	movw	r22, r18
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	62 0f       	add	r22, r18
    2222:	73 1f       	adc	r23, r19
    2224:	71 cf       	rjmp	.-286    	; 0x2108 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2226:	84 eb       	ldi	r24, 0xB4	; 180
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	31 cf       	rjmp	.-414    	; 0x208e <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	97 fd       	sbrc	r25, 7
    2232:	06 c0       	rjmp	.+12     	; 0x2240 <__stack+0x41>
		pwm_right_speed_controller = 0;
    2234:	10 92 f0 03 	sts	0x03F0, r1
    2238:	10 92 ef 03 	sts	0x03EF, r1
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2240:	82 ea       	ldi	r24, 0xA2	; 162
    2242:	20 34       	cpi	r18, 0x40	; 64
    2244:	38 07       	cpc	r19, r24
    2246:	04 f5       	brge	.+64     	; 0x2288 <__stack+0x89>
    2248:	80 e4       	ldi	r24, 0x40	; 64
    224a:	92 ea       	ldi	r25, 0xA2	; 162
    224c:	90 93 f0 03 	sts	0x03F0, r25
    2250:	80 93 ef 03 	sts	0x03EF, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	9e ef       	ldi	r25, 0xFE	; 254
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	80 83       	st	Z, r24

}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	08 95       	ret

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2266:	80 91 e1 03 	lds	r24, 0x03E1
    226a:	90 91 e2 03 	lds	r25, 0x03E2
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	90 93 64 04 	sts	0x0464, r25
    2276:	80 93 63 04 	sts	0x0463, r24
    227a:	2f cf       	rjmp	.-418    	; 0x20da <start_vertical_speed_control_right+0x7e>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    227c:	10 92 f0 03 	sts	0x03F0, r1
    2280:	10 92 ef 03 	sts	0x03EF, r1
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2288:	35 95       	asr	r19
    228a:	27 95       	ror	r18
    228c:	35 95       	asr	r19
    228e:	27 95       	ror	r18
    2290:	35 95       	asr	r19
    2292:	27 95       	ror	r18
    2294:	35 95       	asr	r19
    2296:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    2298:	31 83       	std	Z+1, r19	; 0x01
    229a:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    229c:	42 e0       	ldi	r20, 0x02	; 2
    229e:	21 30       	cpi	r18, 0x01	; 1
    22a0:	34 07       	cpc	r19, r20
    22a2:	0c f0       	brlt	.+2      	; 0x22a6 <__stack+0xa7>
    22a4:	6d cf       	rjmp	.-294    	; 0x2180 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    22a6:	6e ef       	ldi	r22, 0xFE	; 254
    22a8:	20 30       	cpi	r18, 0x00	; 0
    22aa:	36 07       	cpc	r19, r22
    22ac:	9c f2       	brlt	.-90     	; 0x2254 <__stack+0x55>
    22ae:	6c cf       	rjmp	.-296    	; 0x2188 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    22b0:	88 e6       	ldi	r24, 0x68	; 104
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	82 1b       	sub	r24, r18
    22b6:	93 0b       	sbc	r25, r19
    22b8:	95 95       	asr	r25
    22ba:	87 95       	ror	r24
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	49 96       	adiw	r24, 0x19	; 25
    22c2:	90 93 0e 02 	sts	0x020E, r25
    22c6:	80 93 0d 02 	sts	0x020D, r24
    22ca:	ef ce       	rjmp	.-546    	; 0x20aa <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    22cc:	35 95       	asr	r19
    22ce:	27 95       	ror	r18
    22d0:	35 95       	asr	r19
    22d2:	27 95       	ror	r18
    22d4:	89 e1       	ldi	r24, 0x19	; 25
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	82 1b       	sub	r24, r18
    22da:	93 0b       	sbc	r25, r19
    22dc:	90 93 0e 02 	sts	0x020E, r25
    22e0:	80 93 0d 02 	sts	0x020D, r24
    22e4:	e2 ce       	rjmp	.-572    	; 0x20aa <start_vertical_speed_control_right+0x4e>

000022e6 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    22e6:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <start_horizontal_speed_control_right+0xc>
    22f0:	7b c0       	rjmp	.+246    	; 0x23e8 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_current = 0;
		delta_right_speed_prev = 0;
		return;
	}

	delta_right_speed_prev = delta_right_speed_current;
    22f2:	a0 91 63 04 	lds	r26, 0x0463
    22f6:	b0 91 64 04 	lds	r27, 0x0464
    22fa:	b0 93 3d 04 	sts	0x043D, r27
    22fe:	a0 93 3c 04 	sts	0x043C, r26
	if(*pwm_right >= 0) {
    2302:	20 81       	ld	r18, Z
    2304:	31 81       	ldd	r19, Z+1	; 0x01
    2306:	37 fd       	sbrc	r19, 7
    2308:	89 c0       	rjmp	.+274    	; 0x241c <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    230a:	80 91 e1 03 	lds	r24, 0x03E1
    230e:	90 91 e2 03 	lds	r25, 0x03E2
    2312:	a9 01       	movw	r20, r18
    2314:	48 1b       	sub	r20, r24
    2316:	59 0b       	sbc	r21, r25
    2318:	ca 01       	movw	r24, r20
    231a:	50 93 64 04 	sts	0x0464, r21
    231e:	40 93 63 04 	sts	0x0463, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    2322:	20 91 f9 03 	lds	r18, 0x03F9
    2326:	30 91 fa 03 	lds	r19, 0x03FA
    232a:	28 0f       	add	r18, r24
    232c:	39 1f       	adc	r19, r25
    232e:	30 93 fa 03 	sts	0x03FA, r19
    2332:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2336:	56 e0       	ldi	r21, 0x06	; 6
    2338:	21 34       	cpi	r18, 0x41	; 65
    233a:	35 07       	cpc	r19, r21
    233c:	0c f4       	brge	.+2      	; 0x2340 <start_horizontal_speed_control_right+0x5a>
    233e:	61 c0       	rjmp	.+194    	; 0x2402 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2340:	20 e4       	ldi	r18, 0x40	; 64
    2342:	36 e0       	ldi	r19, 0x06	; 6
    2344:	30 93 fa 03 	sts	0x03FA, r19
    2348:	20 93 f9 03 	sts	0x03F9, r18
    234c:	60 e8       	ldi	r22, 0x80	; 128
    234e:	7c e0       	ldi	r23, 0x0C	; 12
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2350:	9c 01       	movw	r18, r24
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	28 0f       	add	r18, r24
    2358:	39 1f       	adc	r19, r25
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	22 0f       	add	r18, r18
    2360:	33 1f       	adc	r19, r19
    2362:	22 0f       	add	r18, r18
    2364:	33 1f       	adc	r19, r19
    2366:	28 0f       	add	r18, r24
    2368:	39 1f       	adc	r19, r25
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
    236a:	40 81       	ld	r20, Z
    236c:	51 81       	ldd	r21, Z+1	; 0x01
    236e:	44 0f       	add	r20, r20
    2370:	55 1f       	adc	r21, r21
    2372:	44 0f       	add	r20, r20
    2374:	55 1f       	adc	r21, r21
    2376:	44 0f       	add	r20, r20
    2378:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    237a:	24 0f       	add	r18, r20
    237c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    237e:	ad 01       	movw	r20, r26
    2380:	48 1b       	sub	r20, r24
    2382:	59 0b       	sbc	r21, r25
    2384:	ca 01       	movw	r24, r20
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	84 0f       	add	r24, r20
    238c:	95 1f       	adc	r25, r21
    238e:	28 0f       	add	r18, r24
    2390:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    2392:	26 0f       	add	r18, r22
    2394:	37 1f       	adc	r19, r23
    2396:	30 93 f0 03 	sts	0x03F0, r19
    239a:	20 93 ef 03 	sts	0x03EF, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    239e:	37 fd       	sbrc	r19, 7
    23a0:	4c c0       	rjmp	.+152    	; 0x243a <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    23a2:	12 16       	cp	r1, r18
    23a4:	13 06       	cpc	r1, r19
    23a6:	0c f0       	brlt	.+2      	; 0x23aa <start_horizontal_speed_control_right+0xc4>
    23a8:	52 c0       	rjmp	.+164    	; 0x244e <start_horizontal_speed_control_right+0x168>
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	97 fd       	sbrc	r25, 7
    23b0:	67 c0       	rjmp	.+206    	; 0x2480 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    23b2:	5d e5       	ldi	r21, 0x5D	; 93
    23b4:	21 3c       	cpi	r18, 0xC1	; 193
    23b6:	35 07       	cpc	r19, r21
    23b8:	0c f4       	brge	.+2      	; 0x23bc <start_horizontal_speed_control_right+0xd6>
    23ba:	49 c0       	rjmp	.+146    	; 0x244e <start_horizontal_speed_control_right+0x168>
    23bc:	80 ec       	ldi	r24, 0xC0	; 192
    23be:	9d e5       	ldi	r25, 0x5D	; 93
    23c0:	90 93 f0 03 	sts	0x03F0, r25
    23c4:	80 93 ef 03 	sts	0x03EF, r24
    23c8:	2c ed       	ldi	r18, 0xDC	; 220
    23ca:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(*pwm_right > 0) {
		*pwm_right += 30;
    23cc:	22 5e       	subi	r18, 0xE2	; 226
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	31 83       	std	Z+1, r19	; 0x01
    23d2:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    23d4:	42 e0       	ldi	r20, 0x02	; 2
    23d6:	21 30       	cpi	r18, 0x01	; 1
    23d8:	34 07       	cpc	r19, r20
    23da:	0c f4       	brge	.+2      	; 0x23de <start_horizontal_speed_control_right+0xf8>
    23dc:	48 c0       	rjmp	.+144    	; 0x246e <start_horizontal_speed_control_right+0x188>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	92 e0       	ldi	r25, 0x02	; 2
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	08 95       	ret
}

void start_horizontal_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    23e8:	10 92 fa 03 	sts	0x03FA, r1
    23ec:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    23f0:	10 92 64 04 	sts	0x0464, r1
    23f4:	10 92 63 04 	sts	0x0463, r1
		delta_right_speed_prev = 0;
    23f8:	10 92 3d 04 	sts	0x043D, r1
    23fc:	10 92 3c 04 	sts	0x043C, r1
		return;
    2400:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2402:	49 ef       	ldi	r20, 0xF9	; 249
    2404:	20 3c       	cpi	r18, 0xC0	; 192
    2406:	34 07       	cpc	r19, r20
    2408:	a4 f4       	brge	.+40     	; 0x2432 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    240a:	20 ec       	ldi	r18, 0xC0	; 192
    240c:	39 ef       	ldi	r19, 0xF9	; 249
    240e:	30 93 fa 03 	sts	0x03FA, r19
    2412:	20 93 f9 03 	sts	0x03F9, r18
    2416:	60 e8       	ldi	r22, 0x80	; 128
    2418:	73 ef       	ldi	r23, 0xF3	; 243
    241a:	9a cf       	rjmp	.-204    	; 0x2350 <start_horizontal_speed_control_right+0x6a>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    241c:	80 91 e1 03 	lds	r24, 0x03E1
    2420:	90 91 e2 03 	lds	r25, 0x03E2
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	90 93 64 04 	sts	0x0464, r25
    242c:	80 93 63 04 	sts	0x0463, r24
    2430:	78 cf       	rjmp	.-272    	; 0x2322 <start_horizontal_speed_control_right+0x3c>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2432:	b9 01       	movw	r22, r18
    2434:	66 0f       	add	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	8b cf       	rjmp	.-234    	; 0x2350 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	97 fd       	sbrc	r25, 7
    2440:	06 c0       	rjmp	.+12     	; 0x244e <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2442:	10 92 f0 03 	sts	0x03F0, r1
    2446:	10 92 ef 03 	sts	0x03EF, r1
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    244e:	82 ea       	ldi	r24, 0xA2	; 162
    2450:	20 34       	cpi	r18, 0x40	; 64
    2452:	38 07       	cpc	r19, r24
    2454:	dc f4       	brge	.+54     	; 0x248c <start_horizontal_speed_control_right+0x1a6>
    2456:	80 e4       	ldi	r24, 0x40	; 64
    2458:	92 ea       	ldi	r25, 0xA2	; 162
    245a:	90 93 f0 03 	sts	0x03F0, r25
    245e:	80 93 ef 03 	sts	0x03EF, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    2462:	24 e2       	ldi	r18, 0x24	; 36
    2464:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2466:	2e 51       	subi	r18, 0x1E	; 30
    2468:	30 40       	sbci	r19, 0x00	; 0
    246a:	31 83       	std	Z+1, r19	; 0x01
    246c:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    246e:	5e ef       	ldi	r21, 0xFE	; 254
    2470:	20 30       	cpi	r18, 0x00	; 0
    2472:	35 07       	cpc	r19, r21
    2474:	24 f4       	brge	.+8      	; 0x247e <start_horizontal_speed_control_right+0x198>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	9e ef       	ldi	r25, 0xFE	; 254
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	08 95       	ret

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2480:	10 92 f0 03 	sts	0x03F0, r1
    2484:	10 92 ef 03 	sts	0x03EF, r1
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    248c:	35 95       	asr	r19
    248e:	27 95       	ror	r18
    2490:	35 95       	asr	r19
    2492:	27 95       	ror	r18
    2494:	35 95       	asr	r19
    2496:	27 95       	ror	r18
    2498:	35 95       	asr	r19
    249a:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    249c:	31 83       	std	Z+1, r19	; 0x01
    249e:	20 83       	st	Z, r18
	if(*pwm_right > 0) {
    24a0:	12 16       	cp	r1, r18
    24a2:	13 06       	cpc	r1, r19
    24a4:	0c f4       	brge	.+2      	; 0x24a8 <start_horizontal_speed_control_right+0x1c2>
    24a6:	92 cf       	rjmp	.-220    	; 0x23cc <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    24a8:	21 15       	cp	r18, r1
    24aa:	31 05       	cpc	r19, r1
    24ac:	e1 f6       	brne	.-72     	; 0x2466 <start_horizontal_speed_control_right+0x180>
    24ae:	08 95       	ret

000024b0 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    24b0:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	09 f4       	brne	.+2      	; 0x24bc <start_horizontal_speed_control_left+0xc>
    24ba:	7b c0       	rjmp	.+246    	; 0x25b2 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_current = 0;
		delta_left_speed_prev = 0;
		return;
	}

	delta_left_speed_prev = delta_left_speed_current; 
    24bc:	a0 91 3a 04 	lds	r26, 0x043A
    24c0:	b0 91 3b 04 	lds	r27, 0x043B
    24c4:	b0 93 55 04 	sts	0x0455, r27
    24c8:	a0 93 54 04 	sts	0x0454, r26
	if(*pwm_left >= 0) {
    24cc:	20 81       	ld	r18, Z
    24ce:	31 81       	ldd	r19, Z+1	; 0x01
    24d0:	37 fd       	sbrc	r19, 7
    24d2:	89 c0       	rjmp	.+274    	; 0x25e6 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    24d4:	80 91 df 03 	lds	r24, 0x03DF
    24d8:	90 91 e0 03 	lds	r25, 0x03E0
    24dc:	a9 01       	movw	r20, r18
    24de:	48 1b       	sub	r20, r24
    24e0:	59 0b       	sbc	r21, r25
    24e2:	ca 01       	movw	r24, r20
    24e4:	50 93 3b 04 	sts	0x043B, r21
    24e8:	40 93 3a 04 	sts	0x043A, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    24ec:	20 91 f7 03 	lds	r18, 0x03F7
    24f0:	30 91 f8 03 	lds	r19, 0x03F8
    24f4:	28 0f       	add	r18, r24
    24f6:	39 1f       	adc	r19, r25
    24f8:	30 93 f8 03 	sts	0x03F8, r19
    24fc:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    2500:	56 e0       	ldi	r21, 0x06	; 6
    2502:	21 34       	cpi	r18, 0x41	; 65
    2504:	35 07       	cpc	r19, r21
    2506:	0c f4       	brge	.+2      	; 0x250a <start_horizontal_speed_control_left+0x5a>
    2508:	61 c0       	rjmp	.+194    	; 0x25cc <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    250a:	20 e4       	ldi	r18, 0x40	; 64
    250c:	36 e0       	ldi	r19, 0x06	; 6
    250e:	30 93 f8 03 	sts	0x03F8, r19
    2512:	20 93 f7 03 	sts	0x03F7, r18
    2516:	60 e8       	ldi	r22, 0x80	; 128
    2518:	7c e0       	ldi	r23, 0x0C	; 12
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    251a:	9c 01       	movw	r18, r24
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	28 0f       	add	r18, r24
    2522:	39 1f       	adc	r19, r25
    2524:	22 0f       	add	r18, r18
    2526:	33 1f       	adc	r19, r19
    2528:	22 0f       	add	r18, r18
    252a:	33 1f       	adc	r19, r19
    252c:	22 0f       	add	r18, r18
    252e:	33 1f       	adc	r19, r19
    2530:	28 0f       	add	r18, r24
    2532:	39 1f       	adc	r19, r25
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
    2534:	40 81       	ld	r20, Z
    2536:	51 81       	ldd	r21, Z+1	; 0x01
    2538:	44 0f       	add	r20, r20
    253a:	55 1f       	adc	r21, r21
    253c:	44 0f       	add	r20, r20
    253e:	55 1f       	adc	r21, r21
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2544:	24 0f       	add	r18, r20
    2546:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    2548:	ad 01       	movw	r20, r26
    254a:	48 1b       	sub	r20, r24
    254c:	59 0b       	sbc	r21, r25
    254e:	ca 01       	movw	r24, r20
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	84 0f       	add	r24, r20
    2556:	95 1f       	adc	r25, r21
    2558:	28 0f       	add	r18, r24
    255a:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    255c:	26 0f       	add	r18, r22
    255e:	37 1f       	adc	r19, r23
    2560:	30 93 f2 03 	sts	0x03F2, r19
    2564:	20 93 f1 03 	sts	0x03F1, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2568:	37 fd       	sbrc	r19, 7
    256a:	4c c0       	rjmp	.+152    	; 0x2604 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    256c:	12 16       	cp	r1, r18
    256e:	13 06       	cpc	r1, r19
    2570:	0c f0       	brlt	.+2      	; 0x2574 <start_horizontal_speed_control_left+0xc4>
    2572:	52 c0       	rjmp	.+164    	; 0x2618 <start_horizontal_speed_control_left+0x168>
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	97 fd       	sbrc	r25, 7
    257a:	67 c0       	rjmp	.+206    	; 0x264a <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    257c:	5d e5       	ldi	r21, 0x5D	; 93
    257e:	21 3c       	cpi	r18, 0xC1	; 193
    2580:	35 07       	cpc	r19, r21
    2582:	0c f4       	brge	.+2      	; 0x2586 <start_horizontal_speed_control_left+0xd6>
    2584:	49 c0       	rjmp	.+146    	; 0x2618 <start_horizontal_speed_control_left+0x168>
    2586:	80 ec       	ldi	r24, 0xC0	; 192
    2588:	9d e5       	ldi	r25, 0x5D	; 93
    258a:	90 93 f2 03 	sts	0x03F2, r25
    258e:	80 93 f1 03 	sts	0x03F1, r24
    2592:	2c ed       	ldi	r18, 0xDC	; 220
    2594:	35 e0       	ldi	r19, 0x05	; 5
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
	if(*pwm_left > 0) {
		*pwm_left += 30;
    2596:	22 5e       	subi	r18, 0xE2	; 226
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	31 83       	std	Z+1, r19	; 0x01
    259c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    259e:	42 e0       	ldi	r20, 0x02	; 2
    25a0:	21 30       	cpi	r18, 0x01	; 1
    25a2:	34 07       	cpc	r19, r20
    25a4:	0c f4       	brge	.+2      	; 0x25a8 <start_horizontal_speed_control_left+0xf8>
    25a6:	48 c0       	rjmp	.+144    	; 0x2638 <start_horizontal_speed_control_left+0x188>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	92 e0       	ldi	r25, 0x02	; 2
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	08 95       	ret
}

void start_horizontal_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    25b2:	10 92 f8 03 	sts	0x03F8, r1
    25b6:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    25ba:	10 92 3b 04 	sts	0x043B, r1
    25be:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    25c2:	10 92 55 04 	sts	0x0455, r1
    25c6:	10 92 54 04 	sts	0x0454, r1
		return;
    25ca:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    25cc:	49 ef       	ldi	r20, 0xF9	; 249
    25ce:	20 3c       	cpi	r18, 0xC0	; 192
    25d0:	34 07       	cpc	r19, r20
    25d2:	a4 f4       	brge	.+40     	; 0x25fc <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    25d4:	20 ec       	ldi	r18, 0xC0	; 192
    25d6:	39 ef       	ldi	r19, 0xF9	; 249
    25d8:	30 93 f8 03 	sts	0x03F8, r19
    25dc:	20 93 f7 03 	sts	0x03F7, r18
    25e0:	60 e8       	ldi	r22, 0x80	; 128
    25e2:	73 ef       	ldi	r23, 0xF3	; 243
    25e4:	9a cf       	rjmp	.-204    	; 0x251a <start_horizontal_speed_control_left+0x6a>

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    25e6:	80 91 df 03 	lds	r24, 0x03DF
    25ea:	90 91 e0 03 	lds	r25, 0x03E0
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	90 93 3b 04 	sts	0x043B, r25
    25f6:	80 93 3a 04 	sts	0x043A, r24
    25fa:	78 cf       	rjmp	.-272    	; 0x24ec <start_horizontal_speed_control_left+0x3c>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    25fc:	b9 01       	movw	r22, r18
    25fe:	66 0f       	add	r22, r22
    2600:	77 1f       	adc	r23, r23
    2602:	8b cf       	rjmp	.-234    	; 0x251a <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	97 fd       	sbrc	r25, 7
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    260c:	10 92 f2 03 	sts	0x03F2, r1
    2610:	10 92 f1 03 	sts	0x03F1, r1
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2618:	82 ea       	ldi	r24, 0xA2	; 162
    261a:	20 34       	cpi	r18, 0x40	; 64
    261c:	38 07       	cpc	r19, r24
    261e:	dc f4       	brge	.+54     	; 0x2656 <start_horizontal_speed_control_left+0x1a6>
    2620:	80 e4       	ldi	r24, 0x40	; 64
    2622:	92 ea       	ldi	r25, 0xA2	; 162
    2624:	90 93 f2 03 	sts	0x03F2, r25
    2628:	80 93 f1 03 	sts	0x03F1, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    262c:	24 e2       	ldi	r18, 0x24	; 36
    262e:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2630:	2e 51       	subi	r18, 0x1E	; 30
    2632:	30 40       	sbci	r19, 0x00	; 0
    2634:	31 83       	std	Z+1, r19	; 0x01
    2636:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2638:	5e ef       	ldi	r21, 0xFE	; 254
    263a:	20 30       	cpi	r18, 0x00	; 0
    263c:	35 07       	cpc	r19, r21
    263e:	24 f4       	brge	.+8      	; 0x2648 <start_horizontal_speed_control_left+0x198>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	9e ef       	ldi	r25, 0xFE	; 254
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	08 95       	ret

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    264a:	10 92 f2 03 	sts	0x03F2, r1
    264e:	10 92 f1 03 	sts	0x03F1, r1
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2656:	35 95       	asr	r19
    2658:	27 95       	ror	r18
    265a:	35 95       	asr	r19
    265c:	27 95       	ror	r18
    265e:	35 95       	asr	r19
    2660:	27 95       	ror	r18
    2662:	35 95       	asr	r19
    2664:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2666:	31 83       	std	Z+1, r19	; 0x01
    2668:	20 83       	st	Z, r18
	if(*pwm_left > 0) {
    266a:	12 16       	cp	r1, r18
    266c:	13 06       	cpc	r1, r19
    266e:	0c f4       	brge	.+2      	; 0x2672 <start_horizontal_speed_control_left+0x1c2>
    2670:	92 cf       	rjmp	.-220    	; 0x2596 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2672:	21 15       	cp	r18, r1
    2674:	31 05       	cpc	r19, r1
    2676:	e1 f6       	brne	.-72     	; 0x2630 <start_horizontal_speed_control_left+0x180>
    2678:	08 95       	ret

0000267a <initPortsIO>:
#include <avr\io.h>
#include "ports_io.h"

void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    267a:	85 b7       	in	r24, 0x35	; 53
    267c:	80 61       	ori	r24, 0x10	; 16
    267e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;	// proximity pulses as output
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    2684:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2686:	97 ef       	ldi	r25, 0xF7	; 247
    2688:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    268a:	20 ee       	ldi	r18, 0xE0	; 224
    268c:	25 b9       	out	0x05, r18	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    268e:	20 ef       	ldi	r18, 0xF0	; 240
    2690:	27 b9       	out	0x07, r18	; 7
	PORTC = 0xB0;	// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2692:	20 eb       	ldi	r18, 0xB0	; 176
    2694:	28 b9       	out	0x08, r18	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2696:	2c ef       	ldi	r18, 0xFC	; 252
    2698:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0x03;	// default for unused pins is 0
    269a:	23 e0       	ldi	r18, 0x03	; 3
    269c:	2b b9       	out	0x0b, r18	; 11

	DDRE = 0xFF;	// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    269e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    26a0:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    26a2:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    26a4:	83 bb       	out	0x13, r24	; 19
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;	// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;	// default for unused pins is 0, led3 to 1
    26a6:	28 e0       	ldi	r18, 0x08	; 8
    26a8:	24 bb       	out	0x14, r18	; 20
	#endif	

	DDRH = 0xFF;	// all pins to output; when usart is activated it changes the pins direction accordingly
    26aa:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    26ae:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;	// cliff pulses as output; charge-on, button0, remote, charge status as input
    26b2:	2f e0       	ldi	r18, 0x0F	; 15
    26b4:	20 93 04 01 	sts	0x0104, r18
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	#endif
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
    26b8:	20 93 05 01 	sts	0x0105, r18
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    26bc:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    26c0:	80 93 0a 01 	sts	0x010A, r24
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;	// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;	// pwm (unused) to 0, leds to 1
    26c4:	90 93 0b 01 	sts	0x010B, r25
	#endif
		
}
    26c8:	08 95       	ret

000026ca <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    26ca:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    26ce:	10 92 bc 00 	sts	0x00BC, r1
}
    26d2:	08 95       	ret

000026d4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    26d4:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    26d6:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    26d8:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    26dc:	80 e2       	ldi	r24, 0x20	; 32
    26de:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    26e2:	08 95       	ret

000026e4 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    26e4:	94 ea       	ldi	r25, 0xA4	; 164
    26e6:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    26ea:	90 91 bc 00 	lds	r25, 0x00BC
    26ee:	97 ff       	sbrs	r25, 7
    26f0:	fc cf       	rjmp	.-8      	; 0x26ea <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    26f2:	90 91 b9 00 	lds	r25, 0x00B9
    26f6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    26f8:	98 30       	cpi	r25, 0x08	; 8
    26fa:	21 f0       	breq	.+8      	; 0x2704 <i2c_start+0x20>
    26fc:	90 31       	cpi	r25, 0x10	; 16
    26fe:	11 f0       	breq	.+4      	; 0x2704 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2704:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2708:	84 e8       	ldi	r24, 0x84	; 132
    270a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    270e:	80 91 bc 00 	lds	r24, 0x00BC
    2712:	87 ff       	sbrs	r24, 7
    2714:	fc cf       	rjmp	.-8      	; 0x270e <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2716:	90 91 b9 00 	lds	r25, 0x00B9
    271a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    271c:	98 31       	cpi	r25, 0x18	; 24
    271e:	21 f0       	breq	.+8      	; 0x2728 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 34       	cpi	r25, 0x40	; 64
    2724:	19 f0       	breq	.+6      	; 0x272c <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2726:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2728:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    272a:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	08 95       	ret

00002730 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2730:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2732:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2734:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2736:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    273a:	90 91 bc 00 	lds	r25, 0x00BC
    273e:	97 ff       	sbrs	r25, 7
    2740:	fc cf       	rjmp	.-8      	; 0x273a <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2742:	90 91 b9 00 	lds	r25, 0x00B9
    2746:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2748:	98 30       	cpi	r25, 0x08	; 8
    274a:	11 f0       	breq	.+4      	; 0x2750 <i2c_start_wait+0x20>
    274c:	90 31       	cpi	r25, 0x10	; 16
    274e:	99 f7       	brne	.-26     	; 0x2736 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2750:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2754:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2758:	90 91 bc 00 	lds	r25, 0x00BC
    275c:	97 ff       	sbrs	r25, 7
    275e:	fc cf       	rjmp	.-8      	; 0x2758 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2760:	90 91 b9 00 	lds	r25, 0x00B9
    2764:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2766:	90 32       	cpi	r25, 0x20	; 32
    2768:	19 f0       	breq	.+6      	; 0x2770 <i2c_start_wait+0x40>
    276a:	98 35       	cpi	r25, 0x58	; 88
    276c:	09 f0       	breq	.+2      	; 0x2770 <i2c_start_wait+0x40>
    276e:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2770:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2774:	90 91 bc 00 	lds	r25, 0x00BC
    2778:	94 fd       	sbrc	r25, 4
    277a:	fc cf       	rjmp	.-8      	; 0x2774 <i2c_start_wait+0x44>
    277c:	dc cf       	rjmp	.-72     	; 0x2736 <i2c_start_wait+0x6>

0000277e <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    277e:	94 ea       	ldi	r25, 0xA4	; 164
    2780:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2784:	90 91 bc 00 	lds	r25, 0x00BC
    2788:	97 ff       	sbrs	r25, 7
    278a:	fc cf       	rjmp	.-8      	; 0x2784 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    278c:	90 91 b9 00 	lds	r25, 0x00B9
    2790:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2792:	98 30       	cpi	r25, 0x08	; 8
    2794:	21 f0       	breq	.+8      	; 0x279e <i2c_rep_start+0x20>
    2796:	90 31       	cpi	r25, 0x10	; 16
    2798:	11 f0       	breq	.+4      	; 0x279e <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    279e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    27a2:	84 e8       	ldi	r24, 0x84	; 132
    27a4:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    27a8:	80 91 bc 00 	lds	r24, 0x00BC
    27ac:	87 ff       	sbrs	r24, 7
    27ae:	fc cf       	rjmp	.-8      	; 0x27a8 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    27b0:	90 91 b9 00 	lds	r25, 0x00B9
    27b4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    27b6:	98 31       	cpi	r25, 0x18	; 24
    27b8:	21 f0       	breq	.+8      	; 0x27c2 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 34       	cpi	r25, 0x40	; 64
    27be:	19 f0       	breq	.+6      	; 0x27c6 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    27c0:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    27c2:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    27c4:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	08 95       	ret

000027ca <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    27ca:	84 e9       	ldi	r24, 0x94	; 148
    27cc:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    27d0:	80 91 bc 00 	lds	r24, 0x00BC
    27d4:	84 fd       	sbrc	r24, 4
    27d6:	fc cf       	rjmp	.-8      	; 0x27d0 <i2c_stop+0x6>

}/* i2c_stop */
    27d8:	08 95       	ret

000027da <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    27da:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    27de:	84 e8       	ldi	r24, 0x84	; 132
    27e0:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    27e4:	80 91 bc 00 	lds	r24, 0x00BC
    27e8:	87 ff       	sbrs	r24, 7
    27ea:	fc cf       	rjmp	.-8      	; 0x27e4 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    27ec:	90 91 b9 00 	lds	r25, 0x00B9
    27f0:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	98 32       	cpi	r25, 0x28	; 40
    27f6:	09 f0       	breq	.+2      	; 0x27fa <i2c_write+0x20>
	return 0;

}/* i2c_write */
    27f8:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    27fa:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    27fc:	08 95       	ret

000027fe <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    27fe:	84 ec       	ldi	r24, 0xC4	; 196
    2800:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2804:	80 91 bc 00 	lds	r24, 0x00BC
    2808:	87 ff       	sbrs	r24, 7
    280a:	fc cf       	rjmp	.-8      	; 0x2804 <i2c_readAck+0x6>

    return TWDR;
    280c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2810:	08 95       	ret

00002812 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2812:	84 e8       	ldi	r24, 0x84	; 132
    2814:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2818:	80 91 bc 00 	lds	r24, 0x00BC
    281c:	87 ff       	sbrs	r24, 7
    281e:	fc cf       	rjmp	.-8      	; 0x2818 <i2c_readNak+0x6>
	
    return TWDR;
    2820:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2824:	08 95       	ret

00002826 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    2826:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    282a:	80 e1       	ldi	r24, 0x10	; 16
    282c:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2830:	e0 ec       	ldi	r30, 0xC0	; 192
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	82 60       	ori	r24, 0x02	; 2
    2838:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    283a:	e1 ec       	ldi	r30, 0xC1	; 193
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	88 69       	ori	r24, 0x98	; 152
    2842:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    2844:	e2 ec       	ldi	r30, 0xC2	; 194
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	86 60       	ori	r24, 0x06	; 6
    284c:	80 83       	st	Z, r24

}
    284e:	08 95       	ret

00002850 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;
    2850:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2854:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2858:	10 92 c2 00 	sts	0x00C2, r1

}
    285c:	08 95       	ret

0000285e <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    285e:	90 91 c0 00 	lds	r25, 0x00C0
    2862:	95 ff       	sbrs	r25, 5
    2864:	fc cf       	rjmp	.-8      	; 0x285e <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    2866:	80 93 c6 00 	sts	0x00C6, r24

}
    286a:	08 95       	ret

0000286c <__vector_25>:

ISR(USART0_RX_vect) {
    286c:	1f 92       	push	r1
    286e:	0f 92       	push	r0
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	0f 92       	push	r0
    2874:	11 24       	eor	r1, r1
    2876:	2f 93       	push	r18
    2878:	8f 93       	push	r24
    287a:	9f 93       	push	r25

	char receivedByte = UDR0;
    287c:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    2880:	90 91 18 02 	lds	r25, 0x0218
    2884:	99 23       	and	r25, r25
    2886:	b9 f0       	breq	.+46     	; 0x28b6 <__vector_25+0x4a>
		switch(receivedByte) {
    2888:	82 33       	cpi	r24, 0x32	; 50
    288a:	09 f4       	brne	.+2      	; 0x288e <__vector_25+0x22>
    288c:	5b c0       	rjmp	.+182    	; 0x2944 <__vector_25+0xd8>
    288e:	83 33       	cpi	r24, 0x33	; 51
    2890:	80 f5       	brcc	.+96     	; 0x28f2 <__vector_25+0x86>
    2892:	80 33       	cpi	r24, 0x30	; 48
    2894:	09 f4       	brne	.+2      	; 0x2898 <__vector_25+0x2c>
    2896:	7e c0       	rjmp	.+252    	; 0x2994 <__vector_25+0x128>
    2898:	81 33       	cpi	r24, 0x31	; 49
    289a:	29 f4       	brne	.+10     	; 0x28a6 <__vector_25+0x3a>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    28a2:	10 92 18 02 	sts	0x0218, r1

	}



}
    28a6:	9f 91       	pop	r25
    28a8:	8f 91       	pop	r24
    28aa:	2f 91       	pop	r18
    28ac:	0f 90       	pop	r0
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	0f 90       	pop	r0
    28b2:	1f 90       	pop	r1
    28b4:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    28b6:	90 91 17 02 	lds	r25, 0x0217
    28ba:	92 30       	cpi	r25, 0x02	; 2
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <__vector_25+0x54>
    28be:	48 c0       	rjmp	.+144    	; 0x2950 <__vector_25+0xe4>
    28c0:	93 30       	cpi	r25, 0x03	; 3
    28c2:	40 f1       	brcs	.+80     	; 0x2914 <__vector_25+0xa8>
    28c4:	94 30       	cpi	r25, 0x04	; 4
    28c6:	09 f4       	brne	.+2      	; 0x28ca <__vector_25+0x5e>
    28c8:	8c c0       	rjmp	.+280    	; 0x29e2 <__vector_25+0x176>
    28ca:	94 30       	cpi	r25, 0x04	; 4
    28cc:	08 f4       	brcc	.+2      	; 0x28d0 <__vector_25+0x64>
    28ce:	73 c0       	rjmp	.+230    	; 0x29b6 <__vector_25+0x14a>
    28d0:	95 30       	cpi	r25, 0x05	; 5
    28d2:	49 f7       	brne	.-46     	; 0x28a6 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    28d4:	83 37       	cpi	r24, 0x73	; 115
    28d6:	39 f7       	brne	.-50     	; 0x28a6 <__vector_25+0x3a>
					sendAdcValues = 0;
    28d8:	10 92 07 04 	sts	0x0407, r1
					choosePeripheral = 1;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 18 02 	sts	0x0218, r24

	}



}
    28e2:	9f 91       	pop	r25
    28e4:	8f 91       	pop	r24
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	0f 90       	pop	r0
    28ee:	1f 90       	pop	r1
    28f0:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    28f2:	84 33       	cpi	r24, 0x34	; 52
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__vector_25+0x8c>
    28f6:	59 c0       	rjmp	.+178    	; 0x29aa <__vector_25+0x13e>
    28f8:	84 33       	cpi	r24, 0x34	; 52
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <__vector_25+0x92>
    28fc:	50 c0       	rjmp	.+160    	; 0x299e <__vector_25+0x132>
    28fe:	85 33       	cpi	r24, 0x35	; 53
    2900:	91 f6       	brne	.-92     	; 0x28a6 <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2902:	85 e0       	ldi	r24, 0x05	; 5
    2904:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2908:	10 92 18 02 	sts	0x0218, r1
				sendAdcValues = 1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	80 93 07 04 	sts	0x0407, r24
				break;
    2912:	c9 cf       	rjmp	.-110    	; 0x28a6 <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2914:	99 23       	and	r25, r25
    2916:	91 f5       	brne	.+100    	; 0x297c <__vector_25+0x110>
			case 0:	// red led
				if(receivedByte == '-') {
    2918:	8d 32       	cpi	r24, 0x2D	; 45
    291a:	09 f4       	brne	.+2      	; 0x291e <__vector_25+0xb2>
    291c:	d5 c0       	rjmp	.+426    	; 0x2ac8 <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    291e:	8b 32       	cpi	r24, 0x2B	; 43
    2920:	e9 f6       	brne	.-70     	; 0x28dc <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2922:	80 91 14 02 	lds	r24, 0x0214
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    292a:	97 fd       	sbrc	r25, 7
    292c:	3f c1       	rjmp	.+638    	; 0x2bac <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    292e:	80 93 14 02 	sts	0x0214, r24
					if(pwm_red == 0) {
    2932:	88 23       	and	r24, r24
    2934:	09 f4       	brne	.+2      	; 0x2938 <__vector_25+0xcc>
    2936:	3c c1       	rjmp	.+632    	; 0x2bb0 <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	90 93 89 00 	sts	0x0089, r25
    293e:	80 93 88 00 	sts	0x0088, r24
    2942:	b1 cf       	rjmp	.-158    	; 0x28a6 <__vector_25+0x3a>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    294a:	10 92 18 02 	sts	0x0218, r1
				break;
    294e:	ab cf       	rjmp	.-170    	; 0x28a6 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2950:	8d 32       	cpi	r24, 0x2D	; 45
    2952:	09 f4       	brne	.+2      	; 0x2956 <__vector_25+0xea>
    2954:	e8 c0       	rjmp	.+464    	; 0x2b26 <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2956:	8b 32       	cpi	r24, 0x2B	; 43
    2958:	09 f6       	brne	.-126    	; 0x28dc <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    295a:	80 91 16 02 	lds	r24, 0x0216
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2962:	97 fd       	sbrc	r25, 7
    2964:	35 c1       	rjmp	.+618    	; 0x2bd0 <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2966:	80 93 16 02 	sts	0x0216, r24
					if(pwm_blue == 0) {
    296a:	88 23       	and	r24, r24
    296c:	09 f4       	brne	.+2      	; 0x2970 <__vector_25+0x104>
    296e:	32 c1       	rjmp	.+612    	; 0x2bd4 <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	90 93 8d 00 	sts	0x008D, r25
    2976:	80 93 8c 00 	sts	0x008C, r24
    297a:	95 cf       	rjmp	.-214    	; 0x28a6 <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    297c:	91 30       	cpi	r25, 0x01	; 1
    297e:	09 f0       	breq	.+2      	; 0x2982 <__vector_25+0x116>
    2980:	92 cf       	rjmp	.-220    	; 0x28a6 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2982:	8d 32       	cpi	r24, 0x2D	; 45
    2984:	09 f4       	brne	.+2      	; 0x2988 <__vector_25+0x11c>
    2986:	89 c0       	rjmp	.+274    	; 0x2a9a <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2988:	8b 32       	cpi	r24, 0x2B	; 43
    298a:	09 f4       	brne	.+2      	; 0x298e <__vector_25+0x122>
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    298e:	90 93 18 02 	sts	0x0218, r25
    2992:	89 cf       	rjmp	.-238    	; 0x28a6 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2994:	10 92 17 02 	sts	0x0217, r1
				choosePeripheral = 0;
    2998:	10 92 18 02 	sts	0x0218, r1
				break;
    299c:	84 cf       	rjmp	.-248    	; 0x28a6 <__vector_25+0x3a>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    299e:	83 e0       	ldi	r24, 0x03	; 3
    29a0:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    29a4:	10 92 18 02 	sts	0x0218, r1
				break;
    29a8:	7e cf       	rjmp	.-260    	; 0x28a6 <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
    29aa:	84 e0       	ldi	r24, 0x04	; 4
    29ac:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    29b0:	10 92 18 02 	sts	0x0218, r1
				break;
    29b4:	78 cf       	rjmp	.-272    	; 0x28a6 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    29b6:	8b 32       	cpi	r24, 0x2B	; 43
    29b8:	09 f4       	brne	.+2      	; 0x29bc <__vector_25+0x150>
    29ba:	cc c0       	rjmp	.+408    	; 0x2b54 <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    29bc:	8d 32       	cpi	r24, 0x2D	; 45
    29be:	09 f4       	brne	.+2      	; 0x29c2 <__vector_25+0x156>
    29c0:	51 c0       	rjmp	.+162    	; 0x2a64 <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    29c2:	83 37       	cpi	r24, 0x73	; 115
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <__vector_25+0x15c>
    29c6:	8a cf       	rjmp	.-236    	; 0x28dc <__vector_25+0x70>
					pwm_right = 0;
    29c8:	10 92 e4 03 	sts	0x03E4, r1
    29cc:	10 92 e3 03 	sts	0x03E3, r1
					OCR3A = 0;
    29d0:	10 92 99 00 	sts	0x0099, r1
    29d4:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    29d8:	10 92 9b 00 	sts	0x009B, r1
    29dc:	10 92 9a 00 	sts	0x009A, r1
    29e0:	62 cf       	rjmp	.-316    	; 0x28a6 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    29e2:	8b 32       	cpi	r24, 0x2B	; 43
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <__vector_25+0x17c>
    29e6:	87 c0       	rjmp	.+270    	; 0x2af6 <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    29e8:	8d 32       	cpi	r24, 0x2D	; 45
    29ea:	09 f1       	breq	.+66     	; 0x2a2e <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    29ec:	83 37       	cpi	r24, 0x73	; 115
    29ee:	09 f0       	breq	.+2      	; 0x29f2 <__vector_25+0x186>
    29f0:	75 cf       	rjmp	.-278    	; 0x28dc <__vector_25+0x70>
					pwm_left = 0;
    29f2:	10 92 e6 03 	sts	0x03E6, r1
    29f6:	10 92 e5 03 	sts	0x03E5, r1
					OCR4A = 0;
    29fa:	10 92 a9 00 	sts	0x00A9, r1
    29fe:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2a02:	10 92 ab 00 	sts	0x00AB, r1
    2a06:	10 92 aa 00 	sts	0x00AA, r1
    2a0a:	4d cf       	rjmp	.-358    	; 0x28a6 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2a0c:	80 91 15 02 	lds	r24, 0x0215
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2a14:	97 fd       	sbrc	r25, 7
    2a16:	d3 c0       	rjmp	.+422    	; 0x2bbe <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2a18:	80 93 15 02 	sts	0x0215, r24
					if(pwm_green == 0) {
    2a1c:	88 23       	and	r24, r24
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__vector_25+0x1b6>
    2a20:	d0 c0       	rjmp	.+416    	; 0x2bc2 <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	90 93 8b 00 	sts	0x008B, r25
    2a28:	80 93 8a 00 	sts	0x008A, r24
    2a2c:	3c cf       	rjmp	.-392    	; 0x28a6 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2a2e:	80 91 e5 03 	lds	r24, 0x03E5
    2a32:	90 91 e6 03 	lds	r25, 0x03E6
    2a36:	4e 97       	sbiw	r24, 0x1e	; 30
    2a38:	90 93 e6 03 	sts	0x03E6, r25
    2a3c:	80 93 e5 03 	sts	0x03E5, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2a40:	2c ef       	ldi	r18, 0xFC	; 252
    2a42:	80 30       	cpi	r24, 0x00	; 0
    2a44:	92 07       	cpc	r25, r18
    2a46:	0c f0       	brlt	.+2      	; 0x2a4a <__vector_25+0x1de>
    2a48:	cc c0       	rjmp	.+408    	; 0x2be2 <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	9c ef       	ldi	r25, 0xFC	; 252
    2a4e:	90 93 e6 03 	sts	0x03E6, r25
    2a52:	80 93 e5 03 	sts	0x03E5, r24
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2a5a:	90 93 ab 00 	sts	0x00AB, r25
    2a5e:	80 93 aa 00 	sts	0x00AA, r24
    2a62:	21 cf       	rjmp	.-446    	; 0x28a6 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2a64:	80 91 e3 03 	lds	r24, 0x03E3
    2a68:	90 91 e4 03 	lds	r25, 0x03E4
    2a6c:	4e 97       	sbiw	r24, 0x1e	; 30
    2a6e:	90 93 e4 03 	sts	0x03E4, r25
    2a72:	80 93 e3 03 	sts	0x03E3, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2a76:	2c ef       	ldi	r18, 0xFC	; 252
    2a78:	80 30       	cpi	r24, 0x00	; 0
    2a7a:	92 07       	cpc	r25, r18
    2a7c:	0c f0       	brlt	.+2      	; 0x2a80 <__vector_25+0x214>
    2a7e:	b7 c0       	rjmp	.+366    	; 0x2bee <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	9c ef       	ldi	r25, 0xFC	; 252
    2a84:	90 93 e4 03 	sts	0x03E4, r25
    2a88:	80 93 e3 03 	sts	0x03E3, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2a90:	90 93 9b 00 	sts	0x009B, r25
    2a94:	80 93 9a 00 	sts	0x009A, r24
    2a98:	06 cf       	rjmp	.-500    	; 0x28a6 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2a9a:	80 91 80 00 	lds	r24, 0x0080
    2a9e:	80 62       	ori	r24, 0x20	; 32
    2aa0:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2aa4:	80 91 15 02 	lds	r24, 0x0215
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2aac:	8f 3f       	cpi	r24, 0xFF	; 255
    2aae:	91 05       	cpc	r25, r1
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <__vector_25+0x24c>
    2ab2:	14 f0       	brlt	.+4      	; 0x2ab8 <__vector_25+0x24c>
    2ab4:	8f ef       	ldi	r24, 0xFF	; 255
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	80 93 15 02 	sts	0x0215, r24
					OCR1B = pwm_green;
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	90 93 8b 00 	sts	0x008B, r25
    2ac2:	80 93 8a 00 	sts	0x008A, r24
    2ac6:	ef ce       	rjmp	.-546    	; 0x28a6 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2ac8:	80 91 80 00 	lds	r24, 0x0080
    2acc:	80 68       	ori	r24, 0x80	; 128
    2ace:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2ad2:	80 91 14 02 	lds	r24, 0x0214
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2ada:	8f 3f       	cpi	r24, 0xFF	; 255
    2adc:	91 05       	cpc	r25, r1
    2ade:	19 f0       	breq	.+6      	; 0x2ae6 <__vector_25+0x27a>
    2ae0:	14 f0       	brlt	.+4      	; 0x2ae6 <__vector_25+0x27a>
    2ae2:	8f ef       	ldi	r24, 0xFF	; 255
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	80 93 14 02 	sts	0x0214, r24
					OCR1A = pwm_red;
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	90 93 89 00 	sts	0x0089, r25
    2af0:	80 93 88 00 	sts	0x0088, r24
    2af4:	d8 ce       	rjmp	.-592    	; 0x28a6 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2af6:	80 91 e5 03 	lds	r24, 0x03E5
    2afa:	90 91 e6 03 	lds	r25, 0x03E6
    2afe:	4e 96       	adiw	r24, 0x1e	; 30
    2b00:	90 93 e6 03 	sts	0x03E6, r25
    2b04:	80 93 e5 03 	sts	0x03E5, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    2b08:	24 e0       	ldi	r18, 0x04	; 4
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	92 07       	cpc	r25, r18
    2b0e:	d4 f1       	brlt	.+116    	; 0x2b84 <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	94 e0       	ldi	r25, 0x04	; 4
    2b14:	90 93 e6 03 	sts	0x03E6, r25
    2b18:	80 93 e5 03 	sts	0x03E5, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2b1c:	90 93 a9 00 	sts	0x00A9, r25
    2b20:	80 93 a8 00 	sts	0x00A8, r24
    2b24:	c0 ce       	rjmp	.-640    	; 0x28a6 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2b26:	80 91 80 00 	lds	r24, 0x0080
    2b2a:	88 60       	ori	r24, 0x08	; 8
    2b2c:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2b30:	80 91 16 02 	lds	r24, 0x0216
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2b38:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	19 f0       	breq	.+6      	; 0x2b44 <__vector_25+0x2d8>
    2b3e:	14 f0       	brlt	.+4      	; 0x2b44 <__vector_25+0x2d8>
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	80 93 16 02 	sts	0x0216, r24
					OCR1C = pwm_blue;
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	90 93 8d 00 	sts	0x008D, r25
    2b4e:	80 93 8c 00 	sts	0x008C, r24
    2b52:	a9 ce       	rjmp	.-686    	; 0x28a6 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2b54:	80 91 e3 03 	lds	r24, 0x03E3
    2b58:	90 91 e4 03 	lds	r25, 0x03E4
    2b5c:	4e 96       	adiw	r24, 0x1e	; 30
    2b5e:	90 93 e4 03 	sts	0x03E4, r25
    2b62:	80 93 e3 03 	sts	0x03E3, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    2b66:	24 e0       	ldi	r18, 0x04	; 4
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	92 07       	cpc	r25, r18
    2b6c:	ac f0       	brlt	.+42     	; 0x2b98 <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	94 e0       	ldi	r25, 0x04	; 4
    2b72:	90 93 e4 03 	sts	0x03E4, r25
    2b76:	80 93 e3 03 	sts	0x03E3, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2b7a:	90 93 99 00 	sts	0x0099, r25
    2b7e:	80 93 98 00 	sts	0x0098, r24
    2b82:	91 ce       	rjmp	.-734    	; 0x28a6 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2b84:	97 ff       	sbrs	r25, 7
    2b86:	ca cf       	rjmp	.-108    	; 0x2b1c <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2b88:	90 95       	com	r25
    2b8a:	81 95       	neg	r24
    2b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8e:	90 93 ab 00 	sts	0x00AB, r25
    2b92:	80 93 aa 00 	sts	0x00AA, r24
    2b96:	87 ce       	rjmp	.-754    	; 0x28a6 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2b98:	97 ff       	sbrs	r25, 7
    2b9a:	ef cf       	rjmp	.-34     	; 0x2b7a <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    2b9c:	90 95       	com	r25
    2b9e:	81 95       	neg	r24
    2ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba2:	90 93 9b 00 	sts	0x009B, r25
    2ba6:	80 93 9a 00 	sts	0x009A, r24
    2baa:	7d ce       	rjmp	.-774    	; 0x28a6 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2bac:	10 92 14 02 	sts	0x0214, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2bb0:	80 91 80 00 	lds	r24, 0x0080
    2bb4:	8f 77       	andi	r24, 0x7F	; 127
    2bb6:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    2bba:	2d 98       	cbi	0x05, 5	; 5
    2bbc:	74 ce       	rjmp	.-792    	; 0x28a6 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2bbe:	10 92 15 02 	sts	0x0215, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2bc2:	80 91 80 00 	lds	r24, 0x0080
    2bc6:	8f 7d       	andi	r24, 0xDF	; 223
    2bc8:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2bcc:	2e 98       	cbi	0x05, 6	; 5
    2bce:	6b ce       	rjmp	.-810    	; 0x28a6 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2bd0:	10 92 16 02 	sts	0x0216, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2bd4:	80 91 80 00 	lds	r24, 0x0080
    2bd8:	87 7f       	andi	r24, 0xF7	; 247
    2bda:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    2bde:	2f 98       	cbi	0x05, 7	; 5
    2be0:	62 ce       	rjmp	.-828    	; 0x28a6 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2be2:	97 ff       	sbrs	r25, 7
    2be4:	9b cf       	rjmp	.-202    	; 0x2b1c <__vector_25+0x2b0>
						OCR4A = pwm_left;
    2be6:	90 95       	com	r25
    2be8:	81 95       	neg	r24
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	36 cf       	rjmp	.-404    	; 0x2a5a <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2bee:	97 ff       	sbrs	r25, 7
    2bf0:	c4 cf       	rjmp	.-120    	; 0x2b7a <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2bf2:	90 95       	com	r25
    2bf4:	81 95       	neg	r24
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	4b cf       	rjmp	.-362    	; 0x2a90 <__vector_25+0x224>

00002bfa <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2bfa:	86 b1       	in	r24, 0x06	; 6
    2bfc:	66 b1       	in	r22, 0x06	; 6
    2bfe:	26 b1       	in	r18, 0x06	; 6
    2c00:	46 b1       	in	r20, 0x06	; 6
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	28 70       	andi	r18, 0x08	; 8
    2c06:	30 70       	andi	r19, 0x00	; 0
    2c08:	35 95       	asr	r19
    2c0a:	27 95       	ror	r18
    2c0c:	35 95       	asr	r19
    2c0e:	27 95       	ror	r18
    2c10:	35 95       	asr	r19
    2c12:	27 95       	ror	r18
    2c14:	22 0f       	add	r18, r18
    2c16:	33 1f       	adc	r19, r19
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	64 70       	andi	r22, 0x04	; 4
    2c1c:	70 70       	andi	r23, 0x00	; 0
    2c1e:	75 95       	asr	r23
    2c20:	67 95       	ror	r22
    2c22:	75 95       	asr	r23
    2c24:	67 95       	ror	r22
    2c26:	26 0f       	add	r18, r22
    2c28:	37 1f       	adc	r19, r23
    2c2a:	22 0f       	add	r18, r18
    2c2c:	33 1f       	adc	r19, r19
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	42 70       	andi	r20, 0x02	; 2
    2c32:	50 70       	andi	r21, 0x00	; 0
    2c34:	55 95       	asr	r21
    2c36:	47 95       	ror	r20
    2c38:	24 0f       	add	r18, r20
    2c3a:	35 1f       	adc	r19, r21
    2c3c:	22 0f       	add	r18, r18
    2c3e:	81 70       	andi	r24, 0x01	; 1
}
    2c40:	82 0f       	add	r24, r18
    2c42:	08 95       	ret

00002c44 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2c44:	f8 94       	cli

	initPortsIO();
    2c46:	0e 94 3d 13 	call	0x267a	; 0x267a <initPortsIO>
	initAdc();
    2c4a:	0e 94 15 19 	call	0x322a	; 0x322a <initAdc>
	initMotors();
    2c4e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <initMotors>
	initRGBleds();
    2c52:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <initRGBleds>
	initSPI();
    2c56:	0e 94 ae 0b 	call	0x175c	; 0x175c <initSPI>
	mirf_init();
    2c5a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <mirf_init>
	initUsart();
    2c5e:	0e 94 13 14 	call	0x2826	; 0x2826 <initUsart>
	initAccelerometer();
    2c62:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <initAccelerometer>
	init_ir_remote_control();
    2c66:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <init_ir_remote_control>

	sei();			// enable global interrupts
    2c6a:	78 94       	sei

	
}
    2c6c:	08 95       	ret

00002c6e <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2c6e:	1f 92       	push	r1
    2c70:	0f 92       	push	r0
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	0f 92       	push	r0
    2c76:	11 24       	eor	r1, r1

}
    2c78:	0f 90       	pop	r0
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	0f 90       	pop	r0
    2c7e:	1f 90       	pop	r1
    2c80:	18 95       	reti

00002c82 <sleep>:

void sleep(unsigned char seconds) {
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2c86:	9e e1       	ldi	r25, 0x1E	; 30
    2c88:	89 9f       	mul	r24, r25
    2c8a:	e0 01       	movw	r28, r0
    2c8c:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2c8e:	80 91 68 00 	lds	r24, 0x0068
    2c92:	8d 7f       	andi	r24, 0xFD	; 253
    2c94:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2c98:	80 91 6c 00 	lds	r24, 0x006C
    2c9c:	8f 77       	andi	r24, 0x7F	; 127
    2c9e:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2ca2:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2ca4:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2ca8:	80 91 7a 00 	lds	r24, 0x007A
    2cac:	80 61       	ori	r24, 0x10	; 16
    2cae:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2cb2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2cb6:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2cba:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2cbe:	88 b3       	in	r24, 0x18	; 24
    2cc0:	87 60       	ori	r24, 0x07	; 7
    2cc2:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2cc4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2cc8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2ccc:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    2cd0:	89 b3       	in	r24, 0x19	; 25
    2cd2:	87 60       	ori	r24, 0x07	; 7
    2cd4:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2cd6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2cda:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2cde:	0e 94 28 14 	call	0x2850	; 0x2850 <closeUsart>
	closeSPI();
    2ce2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <closeSPI>
	i2c_close();
    2ce6:	0e 94 65 13 	call	0x26ca	; 0x26ca <i2c_close>

	// set port pins
	initPortsIO();
    2cea:	0e 94 3d 13 	call	0x267a	; 0x267a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2cee:	83 b7       	in	r24, 0x33	; 51
    2cf0:	8f 60       	ori	r24, 0x0F	; 15
    2cf2:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2cfa:	80 91 b0 00 	lds	r24, 0x00B0
    2cfe:	8d 7f       	andi	r24, 0xFD	; 253
    2d00:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2d04:	80 91 b1 00 	lds	r24, 0x00B1
    2d08:	87 60       	ori	r24, 0x07	; 7
    2d0a:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    2d0e:	20 97       	sbiw	r28, 0x00	; 0
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2d12:	88 95       	sleep
		pause--;
    2d14:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    2d16:	e9 f7       	brne	.-6      	; 0x2d12 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2d18:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2d1a:	80 91 b1 00 	lds	r24, 0x00B1
    2d1e:	88 7f       	andi	r24, 0xF8	; 248
    2d20:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    2d24:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2d28:	80 91 b0 00 	lds	r24, 0x00B0
    2d2c:	82 60       	ori	r24, 0x02	; 2
    2d2e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	80 93 14 02 	sts	0x0214, r24
	pwm_green = 255;
    2d38:	80 93 15 02 	sts	0x0215, r24
	pwm_blue = 255;
    2d3c:	80 93 16 02 	sts	0x0216, r24
	pwm_right = 0;
    2d40:	10 92 e4 03 	sts	0x03E4, r1
    2d44:	10 92 e3 03 	sts	0x03E3, r1
	pwm_left = 0;
    2d48:	10 92 e6 03 	sts	0x03E6, r1
    2d4c:	10 92 e5 03 	sts	0x03E5, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2d50:	f8 94       	cli

	initPortsIO();
    2d52:	0e 94 3d 13 	call	0x267a	; 0x267a <initPortsIO>
	initAdc();
    2d56:	0e 94 15 19 	call	0x322a	; 0x322a <initAdc>
	initMotors();
    2d5a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <initMotors>
	initRGBleds();
    2d5e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <initRGBleds>
	initSPI();
    2d62:	0e 94 ae 0b 	call	0x175c	; 0x175c <initSPI>
	mirf_init();
    2d66:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <mirf_init>
	initUsart();
    2d6a:	0e 94 13 14 	call	0x2826	; 0x2826 <initUsart>
	initAccelerometer();
    2d6e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <initAccelerometer>
	init_ir_remote_control();
    2d72:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <init_ir_remote_control>

	sei();			// enable global interrupts
    2d76:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    2d7e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2d82:	80 91 1b 02 	lds	r24, 0x021B
    2d86:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2d8a:	88 23       	and	r24, r24
    2d8c:	49 f4       	brne	.+18     	; 0x2da0 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    2d8e:	86 e1       	ldi	r24, 0x16	; 22
    2d90:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    2d94:	85 e4       	ldi	r24, 0x45	; 69
    2d96:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2d9a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    2d9e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    2da0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    2da4:	86 ea       	ldi	r24, 0xA6	; 166
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	90 93 1c 02 	sts	0x021C, r25
    2dac:	80 93 1b 02 	sts	0x021B, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2db0:	86 ea       	ldi	r24, 0xA6	; 166
    2db2:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2db6:	88 23       	and	r24, r24
    2db8:	41 f5       	brne	.+80     	; 0x2e0a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    2dba:	8d e2       	ldi	r24, 0x2D	; 45
    2dbc:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x08);	// measurement mode
    2dc0:	88 e0       	ldi	r24, 0x08	; 8
    2dc2:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2dc6:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2dca:	80 91 1b 02 	lds	r24, 0x021B
    2dce:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2dd2:	88 23       	and	r24, r24
    2dd4:	d1 f4       	brne	.+52     	; 0x2e0a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    2dd6:	81 e3       	ldi	r24, 0x31	; 49
    2dd8:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2de2:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2de6:	80 91 1b 02 	lds	r24, 0x021B
    2dea:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2dee:	88 23       	and	r24, r24
    2df0:	61 f4       	brne	.+24     	; 0x2e0a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    2df2:	8c e2       	ldi	r24, 0x2C	; 44
    2df4:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    2df8:	89 e0       	ldi	r24, 0x09	; 9
    2dfa:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2dfe:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	80 93 0c 04 	sts	0x040C, r24
    2e08:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    2e0a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	80 93 0c 04 	sts	0x040C, r24
    2e14:	08 95       	ret

00002e16 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2e16:	80 91 1b 02 	lds	r24, 0x021B
    2e1a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2e1e:	88 23       	and	r24, r24
    2e20:	51 f4       	brne	.+20     	; 0x2e36 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    2e22:	86 e1       	ldi	r24, 0x16	; 22
    2e24:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    2e28:	85 e4       	ldi	r24, 0x45	; 69
    2e2a:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2e2e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    }

	return 0;				// configuration ok
    2e32:	80 e0       	ldi	r24, 0x00	; 0

}
    2e34:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    2e36:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
		return 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	08 95       	ret

00002e3e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2e3e:	80 91 1b 02 	lds	r24, 0x021B
    2e42:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2e46:	88 23       	and	r24, r24
    2e48:	31 f5       	brne	.+76     	; 0x2e96 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    2e4a:	8d e2       	ldi	r24, 0x2D	; 45
    2e4c:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x08);	// measurement mode
    2e50:	88 e0       	ldi	r24, 0x08	; 8
    2e52:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2e56:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2e5a:	80 91 1b 02 	lds	r24, 0x021B
    2e5e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2e62:	88 23       	and	r24, r24
    2e64:	c1 f4       	brne	.+48     	; 0x2e96 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    2e66:	81 e3       	ldi	r24, 0x31	; 49
    2e68:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2e72:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    2e76:	80 91 1b 02 	lds	r24, 0x021B
    2e7a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    2e7e:	88 23       	and	r24, r24
    2e80:	51 f4       	brne	.+20     	; 0x2e96 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    2e82:	8c e2       	ldi	r24, 0x2C	; 44
    2e84:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    2e88:	89 e0       	ldi	r24, 0x09	; 9
    2e8a:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    2e8e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
    }

	return 0;
    2e92:	80 e0       	ldi	r24, 0x00	; 0

}
    2e94:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    2e96:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>
		return 1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	08 95       	ret

00002e9e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    2e9e:	ff 92       	push	r15
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	0f 92       	push	r0
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    2eae:	80 91 0c 04 	lds	r24, 0x040C
    2eb2:	88 23       	and	r24, r24
    2eb4:	91 f0       	breq	.+36     	; 0x2eda <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <readAccelXY+0x1e>
    2eba:	88 c0       	rjmp	.+272    	; 0x2fcc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    2ebc:	10 92 0e 04 	sts	0x040E, r1
    2ec0:	10 92 0d 04 	sts	0x040D, r1
		accY = 0;
    2ec4:	10 92 10 04 	sts	0x0410, r1
    2ec8:	10 92 0f 04 	sts	0x040F, r1

	}

}
    2ecc:	0f 90       	pop	r0
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    2eda:	80 91 1b 02 	lds	r24, 0x021B
    2ede:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    2ee4:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    2ee8:	80 91 1b 02 	lds	r24, 0x021B
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	0e 94 bf 13 	call	0x277e	; 0x277e <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    2ef2:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    2ef6:	08 2f       	mov	r16, r24
    2ef8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    2efc:	f8 2e       	mov	r15, r24
    2efe:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    2f02:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    2f04:	0e 94 09 14 	call	0x2812	; 0x2812 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    2f0e:	90 91 2c 04 	lds	r25, 0x042C
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	99 23       	and	r25, r25
    2f16:	39 f1       	breq	.+78     	; 0x2f66 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    2f18:	4f 2d       	mov	r20, r15
    2f1a:	55 27       	eor	r21, r21
    2f1c:	47 fd       	sbrc	r20, 7
    2f1e:	50 95       	com	r21
    2f20:	54 2f       	mov	r21, r20
    2f22:	44 27       	eor	r20, r20
    2f24:	60 2f       	mov	r22, r16
    2f26:	77 27       	eor	r23, r23
    2f28:	67 fd       	sbrc	r22, 7
    2f2a:	70 95       	com	r23
    2f2c:	46 2b       	or	r20, r22
    2f2e:	57 2b       	or	r21, r23
    2f30:	50 93 0e 04 	sts	0x040E, r21
    2f34:	40 93 0d 04 	sts	0x040D, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    2f38:	28 2f       	mov	r18, r24
    2f3a:	33 27       	eor	r19, r19
    2f3c:	27 fd       	sbrc	r18, 7
    2f3e:	30 95       	com	r19
    2f40:	32 2f       	mov	r19, r18
    2f42:	22 27       	eor	r18, r18
    2f44:	81 2f       	mov	r24, r17
    2f46:	99 27       	eor	r25, r25
    2f48:	87 fd       	sbrc	r24, 7
    2f4a:	90 95       	com	r25
    2f4c:	28 2b       	or	r18, r24
    2f4e:	39 2b       	or	r19, r25
    2f50:	30 93 10 04 	sts	0x0410, r19
    2f54:	20 93 0f 04 	sts	0x040F, r18
		accX = 0;
		accY = 0;

	}

}
    2f58:	0f 90       	pop	r0
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	ff 90       	pop	r15
    2f64:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    2f66:	4f 2d       	mov	r20, r15
    2f68:	55 27       	eor	r21, r21
    2f6a:	47 fd       	sbrc	r20, 7
    2f6c:	50 95       	com	r21
    2f6e:	54 2f       	mov	r21, r20
    2f70:	44 27       	eor	r20, r20
    2f72:	60 2f       	mov	r22, r16
    2f74:	77 27       	eor	r23, r23
    2f76:	67 fd       	sbrc	r22, 7
    2f78:	70 95       	com	r23
    2f7a:	46 2b       	or	r20, r22
    2f7c:	57 2b       	or	r21, r23
    2f7e:	60 91 19 04 	lds	r22, 0x0419
    2f82:	70 91 1a 04 	lds	r23, 0x041A
    2f86:	46 1b       	sub	r20, r22
    2f88:	57 0b       	sbc	r21, r23
    2f8a:	50 93 0e 04 	sts	0x040E, r21
    2f8e:	40 93 0d 04 	sts	0x040D, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    2f92:	28 2f       	mov	r18, r24
    2f94:	33 27       	eor	r19, r19
    2f96:	27 fd       	sbrc	r18, 7
    2f98:	30 95       	com	r19
    2f9a:	32 2f       	mov	r19, r18
    2f9c:	22 27       	eor	r18, r18
    2f9e:	81 2f       	mov	r24, r17
    2fa0:	99 27       	eor	r25, r25
    2fa2:	87 fd       	sbrc	r24, 7
    2fa4:	90 95       	com	r25
    2fa6:	28 2b       	or	r18, r24
    2fa8:	39 2b       	or	r19, r25
    2faa:	80 91 1b 04 	lds	r24, 0x041B
    2fae:	90 91 1c 04 	lds	r25, 0x041C
    2fb2:	28 1b       	sub	r18, r24
    2fb4:	39 0b       	sbc	r19, r25
    2fb6:	30 93 10 04 	sts	0x0410, r19
    2fba:	20 93 0f 04 	sts	0x040F, r18
		accX = 0;
		accY = 0;

	}

}
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    2fcc:	80 91 1b 02 	lds	r24, 0x021B
    2fd0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    2fd4:	82 e3       	ldi	r24, 0x32	; 50
    2fd6:	86 cf       	rjmp	.-244    	; 0x2ee4 <readAccelXY+0x46>

00002fd8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <readAccelXYZ+0x6>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <readAccelXYZ+0x8>
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    2fe4:	80 91 0c 04 	lds	r24, 0x040C
    2fe8:	88 23       	and	r24, r24
    2fea:	c1 f0       	breq	.+48     	; 0x301c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    2fec:	81 30       	cpi	r24, 0x01	; 1
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <readAccelXYZ+0x1a>
    2ff0:	ad c0       	rjmp	.+346    	; 0x314c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    2ff2:	10 92 0e 04 	sts	0x040E, r1
    2ff6:	10 92 0d 04 	sts	0x040D, r1
		accY = 0;
    2ffa:	10 92 10 04 	sts	0x0410, r1
    2ffe:	10 92 0f 04 	sts	0x040F, r1
		accZ = 0;
    3002:	10 92 12 04 	sts	0x0412, r1
    3006:	10 92 11 04 	sts	0x0411, r1

	}

}
    300a:	26 96       	adiw	r28, 0x06	; 6
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    301c:	80 91 1b 02 	lds	r24, 0x021B
    3020:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3024:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3026:	0e 94 ed 13 	call	0x27da	; 0x27da <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    302a:	80 91 1b 02 	lds	r24, 0x021B
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	0e 94 bf 13 	call	0x277e	; 0x277e <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3034:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    303e:	8a 83       	std	Y+2, r24	; 0x02
    3040:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    304a:	8c 83       	std	Y+4, r24	; 0x04
    304c:	0e 94 ff 13 	call	0x27fe	; 0x27fe <i2c_readAck>
    3050:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3052:	0e 94 09 14 	call	0x2812	; 0x2812 <i2c_readNak>
    3056:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3058:	0e 94 e5 13 	call	0x27ca	; 0x27ca <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    305c:	80 91 2c 04 	lds	r24, 0x042C
    3060:	88 23       	and	r24, r24
    3062:	89 f1       	breq	.+98     	; 0x30c6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	99 27       	eor	r25, r25
    3068:	87 fd       	sbrc	r24, 7
    306a:	90 95       	com	r25
    306c:	98 2f       	mov	r25, r24
    306e:	88 27       	eor	r24, r24
    3070:	29 81       	ldd	r18, Y+1	; 0x01
    3072:	33 27       	eor	r19, r19
    3074:	27 fd       	sbrc	r18, 7
    3076:	30 95       	com	r19
    3078:	82 2b       	or	r24, r18
    307a:	93 2b       	or	r25, r19
    307c:	90 93 0e 04 	sts	0x040E, r25
    3080:	80 93 0d 04 	sts	0x040D, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	99 27       	eor	r25, r25
    3088:	87 fd       	sbrc	r24, 7
    308a:	90 95       	com	r25
    308c:	98 2f       	mov	r25, r24
    308e:	88 27       	eor	r24, r24
    3090:	2b 81       	ldd	r18, Y+3	; 0x03
    3092:	33 27       	eor	r19, r19
    3094:	27 fd       	sbrc	r18, 7
    3096:	30 95       	com	r19
    3098:	82 2b       	or	r24, r18
    309a:	93 2b       	or	r25, r19
    309c:	90 93 10 04 	sts	0x0410, r25
    30a0:	80 93 0f 04 	sts	0x040F, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    30a4:	8e 81       	ldd	r24, Y+6	; 0x06
    30a6:	99 27       	eor	r25, r25
    30a8:	87 fd       	sbrc	r24, 7
    30aa:	90 95       	com	r25
    30ac:	98 2f       	mov	r25, r24
    30ae:	88 27       	eor	r24, r24
    30b0:	2d 81       	ldd	r18, Y+5	; 0x05
    30b2:	33 27       	eor	r19, r19
    30b4:	27 fd       	sbrc	r18, 7
    30b6:	30 95       	com	r19
    30b8:	82 2b       	or	r24, r18
    30ba:	93 2b       	or	r25, r19
    30bc:	90 93 12 04 	sts	0x0412, r25
    30c0:	80 93 11 04 	sts	0x0411, r24
    30c4:	a2 cf       	rjmp	.-188    	; 0x300a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	99 27       	eor	r25, r25
    30ca:	87 fd       	sbrc	r24, 7
    30cc:	90 95       	com	r25
    30ce:	98 2f       	mov	r25, r24
    30d0:	88 27       	eor	r24, r24
    30d2:	29 81       	ldd	r18, Y+1	; 0x01
    30d4:	33 27       	eor	r19, r19
    30d6:	27 fd       	sbrc	r18, 7
    30d8:	30 95       	com	r19
    30da:	82 2b       	or	r24, r18
    30dc:	93 2b       	or	r25, r19
    30de:	20 91 19 04 	lds	r18, 0x0419
    30e2:	30 91 1a 04 	lds	r19, 0x041A
    30e6:	82 1b       	sub	r24, r18
    30e8:	93 0b       	sbc	r25, r19
    30ea:	90 93 0e 04 	sts	0x040E, r25
    30ee:	80 93 0d 04 	sts	0x040D, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    30f2:	8c 81       	ldd	r24, Y+4	; 0x04
    30f4:	99 27       	eor	r25, r25
    30f6:	87 fd       	sbrc	r24, 7
    30f8:	90 95       	com	r25
    30fa:	98 2f       	mov	r25, r24
    30fc:	88 27       	eor	r24, r24
    30fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3100:	33 27       	eor	r19, r19
    3102:	27 fd       	sbrc	r18, 7
    3104:	30 95       	com	r19
    3106:	82 2b       	or	r24, r18
    3108:	93 2b       	or	r25, r19
    310a:	20 91 1b 04 	lds	r18, 0x041B
    310e:	30 91 1c 04 	lds	r19, 0x041C
    3112:	82 1b       	sub	r24, r18
    3114:	93 0b       	sbc	r25, r19
    3116:	90 93 10 04 	sts	0x0410, r25
    311a:	80 93 0f 04 	sts	0x040F, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    311e:	8e 81       	ldd	r24, Y+6	; 0x06
    3120:	99 27       	eor	r25, r25
    3122:	87 fd       	sbrc	r24, 7
    3124:	90 95       	com	r25
    3126:	98 2f       	mov	r25, r24
    3128:	88 27       	eor	r24, r24
    312a:	2d 81       	ldd	r18, Y+5	; 0x05
    312c:	33 27       	eor	r19, r19
    312e:	27 fd       	sbrc	r18, 7
    3130:	30 95       	com	r19
    3132:	82 2b       	or	r24, r18
    3134:	93 2b       	or	r25, r19
    3136:	20 91 1d 04 	lds	r18, 0x041D
    313a:	30 91 1e 04 	lds	r19, 0x041E
    313e:	82 1b       	sub	r24, r18
    3140:	93 0b       	sbc	r25, r19
    3142:	90 93 12 04 	sts	0x0412, r25
    3146:	80 93 11 04 	sts	0x0411, r24
    314a:	5f cf       	rjmp	.-322    	; 0x300a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    314c:	80 91 1b 02 	lds	r24, 0x021B
    3150:	0e 94 72 13 	call	0x26e4	; 0x26e4 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3154:	82 e3       	ldi	r24, 0x32	; 50
    3156:	67 cf       	rjmp	.-306    	; 0x3026 <readAccelXYZ+0x4e>

00003158 <computeAngle>:

	}

}

void computeAngle() {
    3158:	ef 92       	push	r14
    315a:	ff 92       	push	r15
    315c:	0f 93       	push	r16
    315e:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3160:	80 91 11 04 	lds	r24, 0x0411
    3164:	90 91 12 04 	lds	r25, 0x0412
    3168:	97 fd       	sbrc	r25, 7
    316a:	5b c0       	rjmp	.+182    	; 0x3222 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    316c:	80 31       	cpi	r24, 0x10	; 16
    316e:	91 05       	cpc	r25, r1
    3170:	08 f0       	brcs	.+2      	; 0x3174 <computeAngle+0x1c>
    3172:	42 c0       	rjmp	.+132    	; 0x31f8 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	80 93 1d 02 	sts	0x021D, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    317a:	90 91 1c 02 	lds	r25, 0x021C
    317e:	98 17       	cp	r25, r24
    3180:	09 f4       	brne	.+2      	; 0x3184 <computeAngle+0x2c>
    3182:	42 c0       	rjmp	.+132    	; 0x3208 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    3184:	10 92 27 04 	sts	0x0427, r1
	}
	prevPosition = currPosition;
    3188:	80 93 1c 02 	sts	0x021C, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    318c:	60 91 0d 04 	lds	r22, 0x040D
    3190:	70 91 0e 04 	lds	r23, 0x040E
    3194:	88 27       	eor	r24, r24
    3196:	77 fd       	sbrc	r23, 7
    3198:	80 95       	com	r24
    319a:	98 2f       	mov	r25, r24
    319c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__floatsisf>
    31a0:	7b 01       	movw	r14, r22
    31a2:	8c 01       	movw	r16, r24
    31a4:	60 91 0f 04 	lds	r22, 0x040F
    31a8:	70 91 10 04 	lds	r23, 0x0410
    31ac:	88 27       	eor	r24, r24
    31ae:	77 fd       	sbrc	r23, 7
    31b0:	80 95       	com	r24
    31b2:	98 2f       	mov	r25, r24
    31b4:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__floatsisf>
    31b8:	9b 01       	movw	r18, r22
    31ba:	ac 01       	movw	r20, r24
    31bc:	c8 01       	movw	r24, r16
    31be:	b7 01       	movw	r22, r14
    31c0:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <atan2>
    31c4:	21 ee       	ldi	r18, 0xE1	; 225
    31c6:	3e e2       	ldi	r19, 0x2E	; 46
    31c8:	45 e6       	ldi	r20, 0x65	; 101
    31ca:	52 e4       	ldi	r21, 0x42	; 66
    31cc:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__mulsf3>
    31d0:	0e 94 0f 20 	call	0x401e	; 0x401e <__fixsfsi>
    31d4:	9b 01       	movw	r18, r22
    31d6:	70 93 20 04 	sts	0x0420, r23
    31da:	60 93 1f 04 	sts	0x041F, r22

	if(currentAngle < 0) {
    31de:	77 ff       	sbrs	r23, 7
    31e0:	06 c0       	rjmp	.+12     	; 0x31ee <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    31e2:	28 59       	subi	r18, 0x98	; 152
    31e4:	3e 4f       	sbci	r19, 0xFE	; 254
    31e6:	30 93 20 04 	sts	0x0420, r19
    31ea:	20 93 1f 04 	sts	0x041F, r18
	}

}
    31ee:	1f 91       	pop	r17
    31f0:	0f 91       	pop	r16
    31f2:	ff 90       	pop	r15
    31f4:	ef 90       	pop	r14
    31f6:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    31f8:	10 92 1d 02 	sts	0x021D, r1
    31fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    31fe:	90 91 1c 02 	lds	r25, 0x021C
    3202:	98 17       	cp	r25, r24
    3204:	09 f0       	breq	.+2      	; 0x3208 <computeAngle+0xb0>
    3206:	be cf       	rjmp	.-132    	; 0x3184 <computeAngle+0x2c>
		timesInSamePos++;
    3208:	90 91 27 04 	lds	r25, 0x0427
    320c:	9f 5f       	subi	r25, 0xFF	; 255
    320e:	90 93 27 04 	sts	0x0427, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    3212:	95 30       	cpi	r25, 0x05	; 5
    3214:	08 f4       	brcc	.+2      	; 0x3218 <computeAngle+0xc0>
    3216:	b8 cf       	rjmp	.-144    	; 0x3188 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    3218:	10 92 27 04 	sts	0x0427, r1
			robotPosition = currPosition;
    321c:	80 93 1e 02 	sts	0x021E, r24
    3220:	b3 cf       	rjmp	.-154    	; 0x3188 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3222:	90 95       	com	r25
    3224:	81 95       	neg	r24
    3226:	9f 4f       	sbci	r25, 0xFF	; 255
    3228:	a1 cf       	rjmp	.-190    	; 0x316c <computeAngle+0x14>

0000322a <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    322a:	ea e7       	ldi	r30, 0x7A	; 122
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	86 60       	ori	r24, 0x06	; 6
    3232:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3234:	ac e7       	ldi	r26, 0x7C	; 124
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	8c 91       	ld	r24, X
    323a:	80 64       	ori	r24, 0x40	; 64
    323c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    323e:	80 81       	ld	r24, Z
    3240:	80 62       	ori	r24, 0x20	; 32
    3242:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3244:	ab e7       	ldi	r26, 0x7B	; 123
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	8c 91       	ld	r24, X
    324a:	88 7f       	andi	r24, 0xF8	; 248
    324c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    324e:	80 81       	ld	r24, Z
    3250:	88 60       	ori	r24, 0x08	; 8
    3252:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3254:	80 81       	ld	r24, Z
    3256:	80 68       	ori	r24, 0x80	; 128
    3258:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    325a:	80 81       	ld	r24, Z
    325c:	80 64       	ori	r24, 0x40	; 64
    325e:	80 83       	st	Z, r24

}
    3260:	08 95       	ret

00003262 <__vector_29>:

ISR(ADC_vect) {
    3262:	1f 92       	push	r1
    3264:	0f 92       	push	r0
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	0f 92       	push	r0
    326a:	0b b6       	in	r0, 0x3b	; 59
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	2f 93       	push	r18
    3272:	3f 93       	push	r19
    3274:	4f 93       	push	r20
    3276:	5f 93       	push	r21
    3278:	6f 93       	push	r22
    327a:	8f 93       	push	r24
    327c:	9f 93       	push	r25
    327e:	ef 93       	push	r30
    3280:	ff 93       	push	r31

	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector

//	LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3282:	80 91 29 04 	lds	r24, 0x0429
    3286:	90 91 2a 04 	lds	r25, 0x042A
    328a:	01 96       	adiw	r24, 0x01	; 1
    328c:	90 93 2a 04 	sts	0x042A, r25
    3290:	80 93 29 04 	sts	0x0429, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    3294:	20 91 78 00 	lds	r18, 0x0078
    3298:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    329a:	40 91 79 00 	lds	r20, 0x0079
    329e:	94 2f       	mov	r25, r20
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	28 2b       	or	r18, r24
    32a4:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    32a6:	80 91 95 03 	lds	r24, 0x0395
    32aa:	82 30       	cpi	r24, 0x02	; 2
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <__vector_29+0x4e>
    32ae:	7b c1       	rjmp	.+758    	; 0x35a6 <__vector_29+0x344>
    32b0:	83 30       	cpi	r24, 0x03	; 3
    32b2:	08 f4       	brcc	.+2      	; 0x32b6 <__vector_29+0x54>
    32b4:	46 c0       	rjmp	.+140    	; 0x3342 <__vector_29+0xe0>
    32b6:	83 30       	cpi	r24, 0x03	; 3
    32b8:	09 f4       	brne	.+2      	; 0x32bc <__vector_29+0x5a>
    32ba:	98 c1       	rjmp	.+816    	; 0x35ec <__vector_29+0x38a>
    32bc:	84 30       	cpi	r24, 0x04	; 4
    32be:	09 f4       	brne	.+2      	; 0x32c2 <__vector_29+0x60>
    32c0:	37 c1       	rjmp	.+622    	; 0x3530 <__vector_29+0x2ce>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    32c2:	80 91 96 03 	lds	r24, 0x0396
    32c6:	82 30       	cpi	r24, 0x02	; 2
    32c8:	09 f4       	brne	.+2      	; 0x32cc <__vector_29+0x6a>
    32ca:	1e c1       	rjmp	.+572    	; 0x3508 <__vector_29+0x2a6>
    32cc:	83 30       	cpi	r24, 0x03	; 3
    32ce:	08 f0       	brcs	.+2      	; 0x32d2 <__vector_29+0x70>
    32d0:	bb c0       	rjmp	.+374    	; 0x3448 <__vector_29+0x1e6>
    32d2:	88 23       	and	r24, r24
    32d4:	09 f0       	breq	.+2      	; 0x32d8 <__vector_29+0x76>
    32d6:	f3 c0       	rjmp	.+486    	; 0x34be <__vector_29+0x25c>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    32d8:	80 91 30 03 	lds	r24, 0x0330
    32dc:	86 95       	lsr	r24
    32de:	80 93 2f 03 	sts	0x032F, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    32e2:	80 91 97 03 	lds	r24, 0x0397
    32e6:	88 23       	and	r24, r24
    32e8:	09 f0       	breq	.+2      	; 0x32ec <__vector_29+0x8a>
    32ea:	a0 c1       	rjmp	.+832    	; 0x362c <__vector_29+0x3ca>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	80 93 96 03 	sts	0x0396, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    32f8:	90 91 2f 03 	lds	r25, 0x032F
    32fc:	98 30       	cpi	r25, 0x08	; 8
    32fe:	08 f0       	brcs	.+2      	; 0x3302 <__vector_29+0xa0>
    3300:	d3 c0       	rjmp	.+422    	; 0x34a8 <__vector_29+0x246>
		ADCSRB &= ~(1 << MUX5);
    3302:	90 91 7b 00 	lds	r25, 0x007B
    3306:	97 7f       	andi	r25, 0xF7	; 247
    3308:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    330c:	90 91 2f 03 	lds	r25, 0x032F
    3310:	90 5c       	subi	r25, 0xC0	; 192
    3312:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3316:	82 30       	cpi	r24, 0x02	; 2
    3318:	21 f4       	brne	.+8      	; 0x3322 <__vector_29+0xc0>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		#endif

		#ifdef HW_REV_3_1
		PORTJ = 0xFF;
    331a:	8f ef       	ldi	r24, 0xFF	; 255
    331c:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    3320:	12 b8       	out	0x02, r1	; 2

	}

//	LED_BLUE_OFF;

}
    3322:	ff 91       	pop	r31
    3324:	ef 91       	pop	r30
    3326:	9f 91       	pop	r25
    3328:	8f 91       	pop	r24
    332a:	6f 91       	pop	r22
    332c:	5f 91       	pop	r21
    332e:	4f 91       	pop	r20
    3330:	3f 91       	pop	r19
    3332:	2f 91       	pop	r18
    3334:	0f 90       	pop	r0
    3336:	0b be       	out	0x3b, r0	; 59
    3338:	0f 90       	pop	r0
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	0f 90       	pop	r0
    333e:	1f 90       	pop	r1
    3340:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3342:	88 23       	and	r24, r24
    3344:	09 f0       	breq	.+2      	; 0x3348 <__vector_29+0xe6>
    3346:	cc c0       	rjmp	.+408    	; 0x34e0 <__vector_29+0x27e>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3348:	60 91 30 03 	lds	r22, 0x0330
    334c:	6e 30       	cpi	r22, 0x0E	; 14
    334e:	09 f4       	brne	.+2      	; 0x3352 <__vector_29+0xf0>
    3350:	8e c1       	rjmp	.+796    	; 0x366e <__vector_29+0x40c>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3352:	86 2f       	mov	r24, r22
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	fc 01       	movw	r30, r24
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	eb 5c       	subi	r30, 0xCB	; 203
    335e:	fc 4f       	sbci	r31, 0xFC	; 252
    3360:	31 83       	std	Z+1, r19	; 0x01
    3362:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    3364:	80 ff       	sbrs	r24, 0
    3366:	64 c0       	rjmp	.+200    	; 0x3430 <__vector_29+0x1ce>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3368:	fc 01       	movw	r30, r24
    336a:	ee 0f       	add	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	ed 5c       	subi	r30, 0xCD	; 205
    3370:	fc 4f       	sbci	r31, 0xFC	; 252
    3372:	20 81       	ld	r18, Z
    3374:	31 81       	ldd	r19, Z+1	; 0x01
    3376:	fc 01       	movw	r30, r24
    3378:	ee 0f       	add	r30, r30
    337a:	ff 1f       	adc	r31, r31
    337c:	eb 5c       	subi	r30, 0xCB	; 203
    337e:	fc 4f       	sbci	r31, 0xFC	; 252
    3380:	40 81       	ld	r20, Z
    3382:	51 81       	ldd	r21, Z+1	; 0x01
    3384:	86 2f       	mov	r24, r22
    3386:	86 95       	lsr	r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	24 1b       	sub	r18, r20
    338c:	35 0b       	sbc	r19, r21
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	fc 01       	movw	r30, r24
    3394:	e3 58       	subi	r30, 0x83	; 131
    3396:	fc 4f       	sbci	r31, 0xFC	; 252
    3398:	40 81       	ld	r20, Z
    339a:	51 81       	ldd	r21, Z+1	; 0x01
    339c:	24 1b       	sub	r18, r20
    339e:	35 0b       	sbc	r19, r21
    33a0:	fc 01       	movw	r30, r24
    33a2:	eb 59       	subi	r30, 0x9B	; 155
    33a4:	fc 4f       	sbci	r31, 0xFC	; 252
    33a6:	31 83       	std	Z+1, r19	; 0x01
    33a8:	20 83       	st	Z, r18
				if(proximityResult[currentProx>>1] < 0) {
    33aa:	37 fd       	sbrc	r19, 7
    33ac:	7b c1       	rjmp	.+758    	; 0x36a4 <__vector_29+0x442>
					proximityResult[currentProx>>1] = 0;
				}

				if(cliffAvoidanceEnabled) {
    33ae:	80 91 34 04 	lds	r24, 0x0434
    33b2:	88 23       	and	r24, r24
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <__vector_29+0x156>
    33b6:	52 c1       	rjmp	.+676    	; 0x365c <__vector_29+0x3fa>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    33b8:	80 91 75 03 	lds	r24, 0x0375
    33bc:	90 91 76 03 	lds	r25, 0x0376
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	84 3a       	cpi	r24, 0xA4	; 164
    33c4:	92 07       	cpc	r25, r18
    33c6:	cc f0       	brlt	.+50     	; 0x33fa <__vector_29+0x198>
    33c8:	80 91 77 03 	lds	r24, 0x0377
    33cc:	90 91 78 03 	lds	r25, 0x0378
    33d0:	21 e0       	ldi	r18, 0x01	; 1
    33d2:	84 3a       	cpi	r24, 0xA4	; 164
    33d4:	92 07       	cpc	r25, r18
    33d6:	8c f0       	brlt	.+34     	; 0x33fa <__vector_29+0x198>
    33d8:	80 91 79 03 	lds	r24, 0x0379
    33dc:	90 91 7a 03 	lds	r25, 0x037A
    33e0:	21 e0       	ldi	r18, 0x01	; 1
    33e2:	84 3a       	cpi	r24, 0xA4	; 164
    33e4:	92 07       	cpc	r25, r18
    33e6:	4c f0       	brlt	.+18     	; 0x33fa <__vector_29+0x198>
    33e8:	80 91 7b 03 	lds	r24, 0x037B
    33ec:	90 91 7c 03 	lds	r25, 0x037C
    33f0:	21 e0       	ldi	r18, 0x01	; 1
    33f2:	84 3a       	cpi	r24, 0xA4	; 164
    33f4:	92 07       	cpc	r25, r18
    33f6:	0c f0       	brlt	.+2      	; 0x33fa <__vector_29+0x198>
    33f8:	31 c1       	rjmp	.+610    	; 0x365c <__vector_29+0x3fa>
						cliffDetectedFlag = 1;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	80 93 38 04 	sts	0x0438, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3400:	10 92 e6 03 	sts	0x03E6, r1
    3404:	10 92 e5 03 	sts	0x03E5, r1
						OCR4A = 0;
    3408:	10 92 a9 00 	sts	0x00A9, r1
    340c:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3410:	10 92 ab 00 	sts	0x00AB, r1
    3414:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3418:	10 92 e4 03 	sts	0x03E4, r1
    341c:	10 92 e3 03 	sts	0x03E3, r1
						OCR3A = 0;
    3420:	10 92 99 00 	sts	0x0099, r1
    3424:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3428:	10 92 9b 00 	sts	0x009B, r1
    342c:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3430:	6f 5f       	subi	r22, 0xFF	; 255
    3432:	60 93 30 03 	sts	0x0330, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3436:	68 31       	cpi	r22, 0x18	; 24
    3438:	08 f4       	brcc	.+2      	; 0x343c <__vector_29+0x1da>
    343a:	43 cf       	rjmp	.-378    	; 0x32c2 <__vector_29+0x60>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    343c:	10 92 30 03 	sts	0x0330, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 ce 03 	sts	0x03CE, r24
    3446:	3d cf       	rjmp	.-390    	; 0x32c2 <__vector_29+0x60>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3448:	83 30       	cpi	r24, 0x03	; 3
    344a:	09 f4       	brne	.+2      	; 0x344e <__vector_29+0x1ec>
    344c:	98 c0       	rjmp	.+304    	; 0x357e <__vector_29+0x31c>
    344e:	84 30       	cpi	r24, 0x04	; 4
    3450:	09 f0       	breq	.+2      	; 0x3454 <__vector_29+0x1f2>
    3452:	52 cf       	rjmp	.-348    	; 0x32f8 <__vector_29+0x96>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3454:	90 91 32 03 	lds	r25, 0x0332
    3458:	90 93 2f 03 	sts	0x032F, r25
			rightChannelPhase = rightMotorPhase;
    345c:	90 91 33 03 	lds	r25, 0x0333
    3460:	90 93 97 03 	sts	0x0397, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3464:	90 91 98 03 	lds	r25, 0x0398
    3468:	99 23       	and	r25, r25
    346a:	09 f0       	breq	.+2      	; 0x346e <__vector_29+0x20c>
    346c:	e5 c0       	rjmp	.+458    	; 0x3638 <__vector_29+0x3d6>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    346e:	83 e0       	ldi	r24, 0x03	; 3
    3470:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3474:	10 92 96 03 	sts	0x0396, r1

			if(currentProx==14 && measBattery==1) {
    3478:	20 91 30 03 	lds	r18, 0x0330
    347c:	2e 30       	cpi	r18, 0x0E	; 14
    347e:	09 f4       	brne	.+2      	; 0x3482 <__vector_29+0x220>
    3480:	f0 c0       	rjmp	.+480    	; 0x3662 <__vector_29+0x400>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3482:	82 2f       	mov	r24, r18
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	20 ff       	sbrs	r18, 0
    3488:	ce c0       	rjmp	.+412    	; 0x3626 <__vector_29+0x3c4>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    348a:	20 31       	cpi	r18, 0x10	; 16
    348c:	08 f0       	brcs	.+2      	; 0x3490 <__vector_29+0x22e>
    348e:	bb c0       	rjmp	.+374    	; 0x3606 <__vector_29+0x3a4>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3490:	26 95       	lsr	r18
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	02 c0       	rjmp	.+4      	; 0x349c <__vector_29+0x23a>
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	2a 95       	dec	r18
    349e:	e2 f7       	brpl	.-8      	; 0x3498 <__vector_29+0x236>
    34a0:	82 b9       	out	0x02, r24	; 2
    34a2:	80 91 96 03 	lds	r24, 0x0396
    34a6:	28 cf       	rjmp	.-432    	; 0x32f8 <__vector_29+0x96>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    34a8:	90 91 7b 00 	lds	r25, 0x007B
    34ac:	98 60       	ori	r25, 0x08	; 8
    34ae:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    34b2:	90 91 2f 03 	lds	r25, 0x032F
    34b6:	98 5c       	subi	r25, 0xC8	; 200
    34b8:	90 93 7c 00 	sts	0x007C, r25
    34bc:	2c cf       	rjmp	.-424    	; 0x3316 <__vector_29+0xb4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    34be:	81 30       	cpi	r24, 0x01	; 1
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <__vector_29+0x262>
    34c2:	1a cf       	rjmp	.-460    	; 0x32f8 <__vector_29+0x96>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    34c4:	80 91 31 03 	lds	r24, 0x0331
    34c8:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    34cc:	80 91 34 03 	lds	r24, 0x0334
    34d0:	80 93 98 03 	sts	0x0398, r24
			adcSaveDataTo = SAVE_TO_PROX;
    34d4:	10 92 95 03 	sts	0x0395, r1
			adcSamplingState = 2;
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	80 93 96 03 	sts	0x0396, r24
			break;
    34de:	0c cf       	rjmp	.-488    	; 0x32f8 <__vector_29+0x96>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    34e0:	81 30       	cpi	r24, 0x01	; 1
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <__vector_29+0x284>
    34e4:	ee ce       	rjmp	.-548    	; 0x32c2 <__vector_29+0x60>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    34e6:	80 91 d1 03 	lds	r24, 0x03D1
    34ea:	90 91 d2 03 	lds	r25, 0x03D2
    34ee:	82 0f       	add	r24, r18
    34f0:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    34f2:	96 95       	lsr	r25
    34f4:	87 95       	ror	r24
    34f6:	90 93 d2 03 	sts	0x03D2, r25
    34fa:	80 93 d1 03 	sts	0x03D1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    34fe:	80 91 96 03 	lds	r24, 0x0396
    3502:	82 30       	cpi	r24, 0x02	; 2
    3504:	09 f0       	breq	.+2      	; 0x3508 <__vector_29+0x2a6>
    3506:	e2 ce       	rjmp	.-572    	; 0x32cc <__vector_29+0x6a>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3508:	80 91 32 03 	lds	r24, 0x0332
    350c:	80 93 2f 03 	sts	0x032F, r24
			rightChannelPhase = rightMotorPhase;
    3510:	80 91 33 03 	lds	r24, 0x0333
    3514:	80 93 97 03 	sts	0x0397, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3518:	80 91 98 03 	lds	r24, 0x0398
    351c:	88 23       	and	r24, r24
    351e:	09 f0       	breq	.+2      	; 0x3522 <__vector_29+0x2c0>
    3520:	97 c0       	rjmp	.+302    	; 0x3650 <__vector_29+0x3ee>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	80 93 96 03 	sts	0x0396, r24
			break;
    352e:	e4 ce       	rjmp	.-568    	; 0x32f8 <__vector_29+0x96>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3530:	80 91 12 02 	lds	r24, 0x0212
    3534:	88 23       	and	r24, r24
    3536:	09 f4       	brne	.+2      	; 0x353a <__vector_29+0x2d8>
    3538:	c4 ce       	rjmp	.-632    	; 0x32c2 <__vector_29+0x60>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    353a:	90 91 00 01 	lds	r25, 0x0100
    353e:	93 fd       	sbrc	r25, 3
    3540:	c0 ce       	rjmp	.-640    	; 0x32c2 <__vector_29+0x60>
    3542:	90 91 00 01 	lds	r25, 0x0100
    3546:	94 fd       	sbrc	r25, 4
    3548:	bc ce       	rjmp	.-648    	; 0x32c2 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    354a:	48 2f       	mov	r20, r24
    354c:	4f 5f       	subi	r20, 0xFF	; 255
    354e:	40 93 12 02 	sts	0x0212, r20
				if(firstSampleLeft > 4) {
    3552:	45 30       	cpi	r20, 0x05	; 5
    3554:	08 f4       	brcc	.+2      	; 0x3558 <__vector_29+0x2f6>
    3556:	b5 ce       	rjmp	.-662    	; 0x32c2 <__vector_29+0x60>
					left_vel_sum += value;
    3558:	80 91 db 03 	lds	r24, 0x03DB
    355c:	90 91 dc 03 	lds	r25, 0x03DC
    3560:	82 0f       	add	r24, r18
    3562:	93 1f       	adc	r25, r19
    3564:	90 93 dc 03 	sts	0x03DC, r25
    3568:	80 93 db 03 	sts	0x03DB, r24
					if(firstSampleLeft==8) {
    356c:	48 30       	cpi	r20, 0x08	; 8
    356e:	09 f0       	breq	.+2      	; 0x3572 <__vector_29+0x310>
    3570:	a8 ce       	rjmp	.-688    	; 0x32c2 <__vector_29+0x60>
						firstSampleLeft = 0;
    3572:	10 92 12 02 	sts	0x0212, r1
						compute_left_vel = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	80 93 0f 02 	sts	0x020F, r24
    357c:	a2 ce       	rjmp	.-700    	; 0x32c2 <__vector_29+0x60>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    357e:	80 91 31 03 	lds	r24, 0x0331
    3582:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    3586:	80 91 34 03 	lds	r24, 0x0334
    358a:	80 93 98 03 	sts	0x0398, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    358e:	80 91 97 03 	lds	r24, 0x0397
    3592:	88 23       	and	r24, r24
    3594:	09 f0       	breq	.+2      	; 0x3598 <__vector_29+0x336>
    3596:	56 c0       	rjmp	.+172    	; 0x3644 <__vector_29+0x3e2>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    359e:	84 e0       	ldi	r24, 0x04	; 4
    35a0:	80 93 96 03 	sts	0x0396, r24
			break;
    35a4:	a9 ce       	rjmp	.-686    	; 0x32f8 <__vector_29+0x96>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    35a6:	80 91 11 02 	lds	r24, 0x0211
    35aa:	88 23       	and	r24, r24
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <__vector_29+0x34e>
    35ae:	89 ce       	rjmp	.-750    	; 0x32c2 <__vector_29+0x60>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    35b0:	63 99       	sbic	0x0c, 3	; 12
    35b2:	87 ce       	rjmp	.-754    	; 0x32c2 <__vector_29+0x60>
    35b4:	64 99       	sbic	0x0c, 4	; 12
    35b6:	85 ce       	rjmp	.-758    	; 0x32c2 <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    35b8:	48 2f       	mov	r20, r24
    35ba:	4f 5f       	subi	r20, 0xFF	; 255
    35bc:	40 93 11 02 	sts	0x0211, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    35c0:	45 30       	cpi	r20, 0x05	; 5
    35c2:	08 f4       	brcc	.+2      	; 0x35c6 <__vector_29+0x364>
    35c4:	7e ce       	rjmp	.-772    	; 0x32c2 <__vector_29+0x60>
					right_vel_sum += value;
    35c6:	80 91 dd 03 	lds	r24, 0x03DD
    35ca:	90 91 de 03 	lds	r25, 0x03DE
    35ce:	82 0f       	add	r24, r18
    35d0:	93 1f       	adc	r25, r19
    35d2:	90 93 de 03 	sts	0x03DE, r25
    35d6:	80 93 dd 03 	sts	0x03DD, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    35da:	48 30       	cpi	r20, 0x08	; 8
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <__vector_29+0x37e>
    35de:	71 ce       	rjmp	.-798    	; 0x32c2 <__vector_29+0x60>
						firstSampleRight = 0;
    35e0:	10 92 11 02 	sts	0x0211, r1
						compute_right_vel = 1;
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	80 93 10 02 	sts	0x0210, r24
    35ea:	6b ce       	rjmp	.-810    	; 0x32c2 <__vector_29+0x60>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    35ec:	80 91 cf 03 	lds	r24, 0x03CF
    35f0:	90 91 d0 03 	lds	r25, 0x03D0
    35f4:	82 0f       	add	r24, r18
    35f6:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    35f8:	96 95       	lsr	r25
    35fa:	87 95       	ror	r24
    35fc:	90 93 d0 03 	sts	0x03D0, r25
    3600:	80 93 cf 03 	sts	0x03CF, r24
			break;
    3604:	5e ce       	rjmp	.-836    	; 0x32c2 <__vector_29+0x60>
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					#endif

					#ifdef HW_REV_3_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3606:	40 91 05 01 	lds	r20, 0x0105
    360a:	40 97       	sbiw	r24, 0x10	; 16
    360c:	95 95       	asr	r25
    360e:	87 95       	ror	r24
    3610:	21 e0       	ldi	r18, 0x01	; 1
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	02 c0       	rjmp	.+4      	; 0x361a <__vector_29+0x3b8>
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	8a 95       	dec	r24
    361c:	e2 f7       	brpl	.-8      	; 0x3616 <__vector_29+0x3b4>
    361e:	20 95       	com	r18
    3620:	24 23       	and	r18, r20
    3622:	20 93 05 01 	sts	0x0105, r18
    3626:	80 91 96 03 	lds	r24, 0x0396
    362a:	66 ce       	rjmp	.-820    	; 0x32f8 <__vector_29+0x96>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	71 f1       	breq	.+92     	; 0x368c <__vector_29+0x42a>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3630:	85 e0       	ldi	r24, 0x05	; 5
    3632:	80 93 95 03 	sts	0x0395, r24
    3636:	5d ce       	rjmp	.-838    	; 0x32f2 <__vector_29+0x90>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3638:	91 30       	cpi	r25, 0x01	; 1
    363a:	09 f0       	breq	.+2      	; 0x363e <__vector_29+0x3dc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    363c:	85 e0       	ldi	r24, 0x05	; 5
    363e:	80 93 95 03 	sts	0x0395, r24
    3642:	18 cf       	rjmp	.-464    	; 0x3474 <__vector_29+0x212>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	51 f1       	breq	.+84     	; 0x369c <__vector_29+0x43a>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3648:	85 e0       	ldi	r24, 0x05	; 5
    364a:	80 93 95 03 	sts	0x0395, r24
    364e:	a7 cf       	rjmp	.-178    	; 0x359e <__vector_29+0x33c>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3650:	81 30       	cpi	r24, 0x01	; 1
    3652:	01 f1       	breq	.+64     	; 0x3694 <__vector_29+0x432>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3654:	85 e0       	ldi	r24, 0x05	; 5
    3656:	80 93 95 03 	sts	0x0395, r24
    365a:	66 cf       	rjmp	.-308    	; 0x3528 <__vector_29+0x2c6>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    365c:	10 92 38 04 	sts	0x0438, r1
    3660:	e7 ce       	rjmp	.-562    	; 0x3430 <__vector_29+0x1ce>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3662:	80 91 9b 03 	lds	r24, 0x039B
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	01 f1       	breq	.+64     	; 0x36aa <__vector_29+0x448>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	45 ce       	rjmp	.-886    	; 0x32f8 <__vector_29+0x96>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    366e:	80 91 9b 03 	lds	r24, 0x039B
    3672:	82 30       	cpi	r24, 0x02	; 2
    3674:	09 f0       	breq	.+2      	; 0x3678 <__vector_29+0x416>
    3676:	6d ce       	rjmp	.-806    	; 0x3352 <__vector_29+0xf0>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3678:	30 93 9a 03 	sts	0x039A, r19
    367c:	20 93 99 03 	sts	0x0399, r18
				measBattery = 0;
    3680:	10 92 9b 03 	sts	0x039B, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    3684:	46 98       	cbi	0x08, 6	; 8
    3686:	8e e0       	ldi	r24, 0x0E	; 14
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	6c ce       	rjmp	.-808    	; 0x3364 <__vector_29+0x102>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    368c:	82 e0       	ldi	r24, 0x02	; 2
    368e:	80 93 95 03 	sts	0x0395, r24
    3692:	2f ce       	rjmp	.-930    	; 0x32f2 <__vector_29+0x90>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3694:	84 e0       	ldi	r24, 0x04	; 4
    3696:	80 93 95 03 	sts	0x0395, r24
    369a:	46 cf       	rjmp	.-372    	; 0x3528 <__vector_29+0x2c6>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	80 93 95 03 	sts	0x0395, r24
    36a2:	7d cf       	rjmp	.-262    	; 0x359e <__vector_29+0x33c>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    36a4:	11 82       	std	Z+1, r1	; 0x01
    36a6:	10 82       	st	Z, r1
    36a8:	82 ce       	rjmp	.-764    	; 0x33ae <__vector_29+0x14c>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	80 93 9b 03 	sts	0x039B, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    36b0:	46 9a       	sbi	0x08, 6	; 8
    36b2:	e7 ce       	rjmp	.-562    	; 0x3482 <__vector_29+0x220>

000036b4 <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    36b4:	e0 e9       	ldi	r30, 0x90	; 144
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	83 68       	ori	r24, 0x83	; 131
    36bc:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    36be:	80 81       	ld	r24, Z
    36c0:	83 60       	ori	r24, 0x03	; 3
    36c2:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    36c4:	a1 e9       	ldi	r26, 0x91	; 145
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	8c 91       	ld	r24, X
    36ca:	8b 60       	ori	r24, 0x0B	; 11
    36cc:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    36ce:	80 91 e3 03 	lds	r24, 0x03E3
    36d2:	90 91 e4 03 	lds	r25, 0x03E4
    36d6:	90 93 99 00 	sts	0x0099, r25
    36da:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    36de:	10 92 9b 00 	sts	0x009B, r1
    36e2:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    36e6:	a1 e7       	ldi	r26, 0x71	; 113
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	8c 91       	ld	r24, X
    36ec:	81 60       	ori	r24, 0x01	; 1
    36ee:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    36f0:	80 81       	ld	r24, Z
    36f2:	8f 75       	andi	r24, 0x5F	; 95
    36f4:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    36f6:	8e b1       	in	r24, 0x0e	; 14
    36f8:	87 7e       	andi	r24, 0xE7	; 231
    36fa:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    36fc:	e0 ea       	ldi	r30, 0xA0	; 160
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	83 68       	ori	r24, 0x83	; 131
    3704:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3706:	a1 ea       	ldi	r26, 0xA1	; 161
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	8c 91       	ld	r24, X
    370c:	8b 60       	ori	r24, 0x0B	; 11
    370e:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3710:	80 91 e5 03 	lds	r24, 0x03E5
    3714:	90 91 e6 03 	lds	r25, 0x03E6
    3718:	90 93 a9 00 	sts	0x00A9, r25
    371c:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3720:	10 92 ab 00 	sts	0x00AB, r1
    3724:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3728:	a2 e7       	ldi	r26, 0x72	; 114
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	8c 91       	ld	r24, X
    372e:	81 60       	ori	r24, 0x01	; 1
    3730:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3732:	80 81       	ld	r24, Z
    3734:	8f 75       	andi	r24, 0x5F	; 95
    3736:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3738:	e2 e0       	ldi	r30, 0x02	; 2
    373a:	f1 e0       	ldi	r31, 0x01	; 1
    373c:	80 81       	ld	r24, Z
    373e:	87 7e       	andi	r24, 0xE7	; 231
    3740:	80 83       	st	Z, r24


}
    3742:	08 95       	ret

00003744 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    3744:	1f 92       	push	r1
    3746:	0f 92       	push	r0
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	0f 92       	push	r0
    374c:	11 24       	eor	r1, r1
    374e:	8f 93       	push	r24
    3750:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	if(cliffDetectedFlag) {
    3752:	80 91 38 04 	lds	r24, 0x0438
    3756:	88 23       	and	r24, r24
    3758:	61 f0       	breq	.+24     	; 0x3772 <__vector_45+0x2e>
		pwm_left = 0;
    375a:	10 92 e6 03 	sts	0x03E6, r1
    375e:	10 92 e5 03 	sts	0x03E5, r1
		OCR4A = 0;
    3762:	10 92 a9 00 	sts	0x00A9, r1
    3766:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    376a:	10 92 ab 00 	sts	0x00AB, r1
    376e:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    3772:	10 92 d0 03 	sts	0x03D0, r1
    3776:	10 92 cf 03 	sts	0x03CF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    377a:	80 91 e5 03 	lds	r24, 0x03E5
    377e:	90 91 e6 03 	lds	r25, 0x03E6
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	41 f5       	brne	.+80     	; 0x37d6 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3786:	80 91 d9 03 	lds	r24, 0x03D9
    378a:	90 91 da 03 	lds	r25, 0x03DA
    378e:	97 fd       	sbrc	r25, 7
    3790:	69 c0       	rjmp	.+210    	; 0x3864 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 14;
    3798:	8e e0       	ldi	r24, 0x0E	; 14
    379a:	80 93 31 03 	sts	0x0331, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	80 93 12 02 	sts	0x0212, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    37a4:	80 91 a0 00 	lds	r24, 0x00A0
    37a8:	8f 75       	andi	r24, 0x5F	; 95
    37aa:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    37ae:	80 91 02 01 	lds	r24, 0x0102
    37b2:	87 7e       	andi	r24, 0xE7	; 231
    37b4:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    37b8:	80 91 72 00 	lds	r24, 0x0072
    37bc:	89 7f       	andi	r24, 0xF9	; 249
    37be:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    37c2:	89 b3       	in	r24, 0x19	; 25
    37c4:	86 60       	ori	r24, 0x06	; 6
    37c6:	89 bb       	out	0x19, r24	; 25
	}
*/

//	PORTB |= (1 << 6);

}
    37c8:	9f 91       	pop	r25
    37ca:	8f 91       	pop	r24
    37cc:	0f 90       	pop	r0
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	0f 90       	pop	r0
    37d2:	1f 90       	pop	r1
    37d4:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    37d6:	18 16       	cp	r1, r24
    37d8:	19 06       	cpc	r1, r25
    37da:	2c f5       	brge	.+74     	; 0x3826 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    37dc:	10 92 34 03 	sts	0x0334, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    37e0:	8f e0       	ldi	r24, 0x0F	; 15
    37e2:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    37e6:	80 91 a0 00 	lds	r24, 0x00A0
    37ea:	8f 7d       	andi	r24, 0xDF	; 223
    37ec:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    37f0:	80 91 72 00 	lds	r24, 0x0072
    37f4:	8b 7f       	andi	r24, 0xFB	; 251
    37f6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    37fa:	80 91 02 01 	lds	r24, 0x0102
    37fe:	8f 7e       	andi	r24, 0xEF	; 239
    3800:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3804:	80 91 a0 00 	lds	r24, 0x00A0
    3808:	80 68       	ori	r24, 0x80	; 128
    380a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    380e:	80 91 72 00 	lds	r24, 0x0072
    3812:	82 60       	ori	r24, 0x02	; 2
    3814:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	PORTB |= (1 << 6);

}
    3818:	9f 91       	pop	r25
    381a:	8f 91       	pop	r24
    381c:	0f 90       	pop	r0
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	0f 90       	pop	r0
    3822:	1f 90       	pop	r1
    3824:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3826:	10 92 34 03 	sts	0x0334, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    382a:	8e e0       	ldi	r24, 0x0E	; 14
    382c:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3830:	80 91 a0 00 	lds	r24, 0x00A0
    3834:	8f 77       	andi	r24, 0x7F	; 127
    3836:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    383a:	80 91 72 00 	lds	r24, 0x0072
    383e:	8d 7f       	andi	r24, 0xFD	; 253
    3840:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3844:	80 91 02 01 	lds	r24, 0x0102
    3848:	87 7f       	andi	r24, 0xF7	; 247
    384a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    384e:	80 91 a0 00 	lds	r24, 0x00A0
    3852:	80 62       	ori	r24, 0x20	; 32
    3854:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3858:	80 91 72 00 	lds	r24, 0x0072
    385c:	84 60       	ori	r24, 0x04	; 4
    385e:	80 93 72 00 	sts	0x0072, r24
    3862:	b2 cf       	rjmp	.-156    	; 0x37c8 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 15;
    386a:	8f e0       	ldi	r24, 0x0F	; 15
    386c:	80 93 31 03 	sts	0x0331, r24
    3870:	96 cf       	rjmp	.-212    	; 0x379e <__vector_45+0x5a>

00003872 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3872:	1f 92       	push	r1
    3874:	0f 92       	push	r0
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	0f 92       	push	r0
    387a:	11 24       	eor	r1, r1
    387c:	8f 93       	push	r24
    387e:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	80 93 34 03 	sts	0x0334, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3886:	9e e0       	ldi	r25, 0x0E	; 14
    3888:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    388c:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3890:	9f 91       	pop	r25
    3892:	8f 91       	pop	r24
    3894:	0f 90       	pop	r0
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	0f 90       	pop	r0
    389a:	1f 90       	pop	r1
    389c:	18 95       	reti

0000389e <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    389e:	1f 92       	push	r1
    38a0:	0f 92       	push	r0
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	0f 92       	push	r0
    38a6:	11 24       	eor	r1, r1
    38a8:	8f 93       	push	r24
    38aa:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 34 03 	sts	0x0334, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    38b2:	9f e0       	ldi	r25, 0x0F	; 15
    38b4:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    38b8:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    38bc:	9f 91       	pop	r25
    38be:	8f 91       	pop	r24
    38c0:	0f 90       	pop	r0
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	0f 90       	pop	r0
    38c6:	1f 90       	pop	r1
    38c8:	18 95       	reti

000038ca <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    38ca:	1f 92       	push	r1
    38cc:	0f 92       	push	r0
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	0f 92       	push	r0
    38d2:	11 24       	eor	r1, r1
    38d4:	8f 93       	push	r24
    38d6:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    38d8:	80 91 38 04 	lds	r24, 0x0438
    38dc:	88 23       	and	r24, r24
    38de:	61 f0       	breq	.+24     	; 0x38f8 <__vector_35+0x2e>
		pwm_right = 0;
    38e0:	10 92 e4 03 	sts	0x03E4, r1
    38e4:	10 92 e3 03 	sts	0x03E3, r1
		OCR3A = 0;
    38e8:	10 92 99 00 	sts	0x0099, r1
    38ec:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    38f0:	10 92 9b 00 	sts	0x009B, r1
    38f4:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    38f8:	10 92 d2 03 	sts	0x03D2, r1
    38fc:	10 92 d1 03 	sts	0x03D1, r1


	if(pwm_right == 0) {
    3900:	80 91 e3 03 	lds	r24, 0x03E3
    3904:	90 91 e4 03 	lds	r25, 0x03E4
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	31 f5       	brne	.+76     	; 0x3958 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    390c:	80 91 d7 03 	lds	r24, 0x03D7
    3910:	90 91 d8 03 	lds	r25, 0x03D8
    3914:	97 fd       	sbrc	r25, 7
    3916:	5f c0       	rjmp	.+190    	; 0x39d6 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	80 93 33 03 	sts	0x0333, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    391e:	8c e0       	ldi	r24, 0x0C	; 12
    3920:	80 93 32 03 	sts	0x0332, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 93 11 02 	sts	0x0211, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    392a:	80 91 90 00 	lds	r24, 0x0090
    392e:	8f 75       	andi	r24, 0x5F	; 95
    3930:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3934:	8e b1       	in	r24, 0x0e	; 14
    3936:	87 7e       	andi	r24, 0xE7	; 231
    3938:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    393a:	80 91 71 00 	lds	r24, 0x0071
    393e:	89 7f       	andi	r24, 0xF9	; 249
    3940:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3944:	88 b3       	in	r24, 0x18	; 24
    3946:	86 60       	ori	r24, 0x06	; 6
    3948:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    394a:	9f 91       	pop	r25
    394c:	8f 91       	pop	r24
    394e:	0f 90       	pop	r0
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	0f 90       	pop	r0
    3954:	1f 90       	pop	r1
    3956:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3958:	18 16       	cp	r1, r24
    395a:	19 06       	cpc	r1, r25
    395c:	0c f5       	brge	.+66     	; 0x39a0 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    395e:	10 92 33 03 	sts	0x0333, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3962:	8d e0       	ldi	r24, 0x0D	; 13
    3964:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3968:	80 91 90 00 	lds	r24, 0x0090
    396c:	8f 7d       	andi	r24, 0xDF	; 223
    396e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3972:	80 91 71 00 	lds	r24, 0x0071
    3976:	8b 7f       	andi	r24, 0xFB	; 251
    3978:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    397c:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    397e:	80 91 90 00 	lds	r24, 0x0090
    3982:	80 68       	ori	r24, 0x80	; 128
    3984:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3988:	80 91 71 00 	lds	r24, 0x0071
    398c:	82 60       	ori	r24, 0x02	; 2
    398e:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3992:	9f 91       	pop	r25
    3994:	8f 91       	pop	r24
    3996:	0f 90       	pop	r0
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	0f 90       	pop	r0
    399c:	1f 90       	pop	r1
    399e:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    39a0:	10 92 33 03 	sts	0x0333, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    39a4:	8c e0       	ldi	r24, 0x0C	; 12
    39a6:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    39aa:	80 91 90 00 	lds	r24, 0x0090
    39ae:	8f 77       	andi	r24, 0x7F	; 127
    39b0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    39b4:	80 91 71 00 	lds	r24, 0x0071
    39b8:	8d 7f       	andi	r24, 0xFD	; 253
    39ba:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    39be:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    39c0:	80 91 90 00 	lds	r24, 0x0090
    39c4:	80 62       	ori	r24, 0x20	; 32
    39c6:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    39ca:	80 91 71 00 	lds	r24, 0x0071
    39ce:	84 60       	ori	r24, 0x04	; 4
    39d0:	80 93 71 00 	sts	0x0071, r24
    39d4:	ba cf       	rjmp	.-140    	; 0x394a <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	80 93 33 03 	sts	0x0333, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    39dc:	8d e0       	ldi	r24, 0x0D	; 13
    39de:	80 93 32 03 	sts	0x0332, r24
    39e2:	a0 cf       	rjmp	.-192    	; 0x3924 <__vector_35+0x5a>

000039e4 <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    39e4:	1f 92       	push	r1
    39e6:	0f 92       	push	r0
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	0f 92       	push	r0
    39ec:	11 24       	eor	r1, r1
    39ee:	8f 93       	push	r24
    39f0:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	80 93 33 03 	sts	0x0333, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    39f8:	9c e0       	ldi	r25, 0x0C	; 12
    39fa:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    39fe:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);

}
    3a02:	9f 91       	pop	r25
    3a04:	8f 91       	pop	r24
    3a06:	0f 90       	pop	r0
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	0f 90       	pop	r0
    3a0c:	1f 90       	pop	r1
    3a0e:	18 95       	reti

00003a10 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3a10:	1f 92       	push	r1
    3a12:	0f 92       	push	r0
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	0f 92       	push	r0
    3a18:	11 24       	eor	r1, r1
    3a1a:	8f 93       	push	r24
    3a1c:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	80 93 33 03 	sts	0x0333, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3a24:	9d e0       	ldi	r25, 0x0D	; 13
    3a26:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3a2a:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);
}
    3a2e:	9f 91       	pop	r25
    3a30:	8f 91       	pop	r24
    3a32:	0f 90       	pop	r0
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	0f 90       	pop	r0
    3a38:	1f 90       	pop	r1
    3a3a:	18 95       	reti

00003a3c <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance() {
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17

	signed int velX=0, velY=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;

	speedL = speedl;	// save the speeds in temporary variables
    3a48:	80 91 02 04 	lds	r24, 0x0402
    3a4c:	90 91 03 04 	lds	r25, 0x0403
	speedR = speedr;
    3a50:	60 91 04 04 	lds	r22, 0x0404
    3a54:	70 91 05 04 	lds	r23, 0x0405

	// speedr and speedl goes from 0 to 127 (usually 0..100), absolute value for both
	// forward and backward directions; we need a negative value for backward direction
	if(pwm_right_desired < 0) {
    3a58:	20 91 eb 03 	lds	r18, 0x03EB
    3a5c:	30 91 ec 03 	lds	r19, 0x03EC
    3a60:	37 fd       	sbrc	r19, 7
    3a62:	b2 c0       	rjmp	.+356    	; 0x3bc8 <obstacleAvoidance+0x18c>
		speedR = -speedR; 
	}
	if(pwm_left_desired < 0) {
    3a64:	20 91 ed 03 	lds	r18, 0x03ED
    3a68:	30 91 ee 03 	lds	r19, 0x03EE
    3a6c:	37 fd       	sbrc	r19, 7
    3a6e:	b5 c0       	rjmp	.+362    	; 0x3bda <obstacleAvoidance+0x19e>
		speedL = -speedL;
	}

	// compute the velocity components
	velX = (speedR + speedL)/2;
    3a70:	dc 01       	movw	r26, r24
    3a72:	a6 0f       	add	r26, r22
    3a74:	b7 1f       	adc	r27, r23
    3a76:	b7 fd       	sbrc	r27, 7
    3a78:	b8 c0       	rjmp	.+368    	; 0x3bea <obstacleAvoidance+0x1ae>
    3a7a:	b5 95       	asr	r27
    3a7c:	a7 95       	ror	r26
	velY = (speedR - speedL)/2;
    3a7e:	68 1b       	sub	r22, r24
    3a80:	79 0b       	sbc	r23, r25
    3a82:	77 fd       	sbrc	r23, 7
    3a84:	b9 c0       	rjmp	.+370    	; 0x3bf8 <obstacleAvoidance+0x1bc>
    3a86:	75 95       	asr	r23
    3a88:	67 95       	ror	r22

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3a8a:	e0 90 67 03 	lds	r14, 0x0367
    3a8e:	f0 90 68 03 	lds	r15, 0x0368
    3a92:	90 91 6b 03 	lds	r25, 0x036B
    3a96:	80 91 6c 03 	lds	r24, 0x036C
    3a9a:	e9 2f       	mov	r30, r25
    3a9c:	f8 2f       	mov	r31, r24
    3a9e:	f7 fd       	sbrc	r31, 7
    3aa0:	b6 c0       	rjmp	.+364    	; 0x3c0e <obstacleAvoidance+0x1d2>
    3aa2:	f5 95       	asr	r31
    3aa4:	e7 95       	ror	r30
    3aa6:	00 91 6f 03 	lds	r16, 0x036F
    3aaa:	10 91 70 03 	lds	r17, 0x0370
    3aae:	90 91 73 03 	lds	r25, 0x0373
    3ab2:	80 91 74 03 	lds	r24, 0x0374
    3ab6:	49 2f       	mov	r20, r25
    3ab8:	58 2f       	mov	r21, r24
    3aba:	57 fd       	sbrc	r21, 7
    3abc:	b1 c0       	rjmp	.+354    	; 0x3c20 <obstacleAvoidance+0x1e4>
    3abe:	55 95       	asr	r21
    3ac0:	47 95       	ror	r20
    3ac2:	50 95       	com	r21
    3ac4:	41 95       	neg	r20
    3ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac8:	8e 2d       	mov	r24, r14
    3aca:	9f 2d       	mov	r25, r15
    3acc:	97 fd       	sbrc	r25, 7
    3ace:	a6 c0       	rjmp	.+332    	; 0x3c1c <obstacleAvoidance+0x1e0>
    3ad0:	95 95       	asr	r25
    3ad2:	87 95       	ror	r24
    3ad4:	9f 01       	movw	r18, r30
    3ad6:	28 1b       	sub	r18, r24
    3ad8:	39 0b       	sbc	r19, r25
    3ada:	80 91 6d 03 	lds	r24, 0x036D
    3ade:	90 91 6e 03 	lds	r25, 0x036E
    3ae2:	28 0f       	add	r18, r24
    3ae4:	39 1f       	adc	r19, r25
    3ae6:	c8 01       	movw	r24, r16
    3ae8:	17 fd       	sbrc	r17, 7
    3aea:	96 c0       	rjmp	.+300    	; 0x3c18 <obstacleAvoidance+0x1dc>
    3aec:	95 95       	asr	r25
    3aee:	87 95       	ror	r24
    3af0:	82 0f       	add	r24, r18
    3af2:	93 1f       	adc	r25, r19
    3af4:	84 0f       	add	r24, r20
    3af6:	95 1f       	adc	r25, r21
    3af8:	20 91 65 03 	lds	r18, 0x0365
    3afc:	30 91 66 03 	lds	r19, 0x0366
    3b00:	82 1b       	sub	r24, r18
    3b02:	93 0b       	sbc	r25, r19
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	// modify the velocity components based on sensor values
	velX += sumSensorsX;	//4
    3b04:	8a 0f       	add	r24, r26
    3b06:	9b 1f       	adc	r25, r27
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3b08:	4e 0f       	add	r20, r30
    3b0a:	5f 1f       	adc	r21, r31
    3b0c:	20 91 69 03 	lds	r18, 0x0369
    3b10:	30 91 6a 03 	lds	r19, 0x036A
    3b14:	42 0f       	add	r20, r18
    3b16:	53 1f       	adc	r21, r19
    3b18:	2e 2d       	mov	r18, r14
    3b1a:	3f 2d       	mov	r19, r15
    3b1c:	37 fd       	sbrc	r19, 7
    3b1e:	79 c0       	rjmp	.+242    	; 0x3c12 <obstacleAvoidance+0x1d6>
    3b20:	35 95       	asr	r19
    3b22:	27 95       	ror	r18
    3b24:	24 0f       	add	r18, r20
    3b26:	35 1f       	adc	r19, r21
    3b28:	40 2f       	mov	r20, r16
    3b2a:	51 2f       	mov	r21, r17
    3b2c:	57 fd       	sbrc	r21, 7
    3b2e:	6c c0       	rjmp	.+216    	; 0x3c08 <obstacleAvoidance+0x1cc>
    3b30:	55 95       	asr	r21
    3b32:	47 95       	ror	r20
    3b34:	24 1b       	sub	r18, r20
    3b36:	35 0b       	sbc	r19, r21
    3b38:	40 91 71 03 	lds	r20, 0x0371
    3b3c:	50 91 72 03 	lds	r21, 0x0372
    3b40:	24 1b       	sub	r18, r20
    3b42:	35 0b       	sbc	r19, r21

	// modify the velocity components based on sensor values
	velX += sumSensorsX;	//4
	velY += sumSensorsY;	//4
    3b44:	26 0f       	add	r18, r22
    3b46:	37 1f       	adc	r19, r23

	// extract the left and right speeds from the velocity components
	speedR = (velX + velY);
    3b48:	a9 01       	movw	r20, r18
    3b4a:	48 0f       	add	r20, r24
    3b4c:	59 1f       	adc	r21, r25
	speedL = (velX - velY);
    3b4e:	82 1b       	sub	r24, r18
    3b50:	93 0b       	sbc	r25, r19
	// set the pwm value that will be placed in the motors pwm
	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL);	//<<2
	} else {
		pwm_left_working = speedL;		//<<2
    3b52:	90 93 00 04 	sts	0x0400, r25
    3b56:	80 93 ff 03 	sts	0x03FF, r24
	}

	if(speedR < 0) {
    3b5a:	57 fd       	sbrc	r21, 7
    3b5c:	50 c0       	rjmp	.+160    	; 0x3bfe <obstacleAvoidance+0x1c2>
		speedR = -speedR;
		pwm_right_working = -(speedR);	//<<2
	} else {
		pwm_right_working = speedR;		//<<2
    3b5e:	50 93 fe 03 	sts	0x03FE, r21
    3b62:	40 93 fd 03 	sts	0x03FD, r20
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
    3b66:	22 e0       	ldi	r18, 0x02	; 2
    3b68:	41 30       	cpi	r20, 0x01	; 1
    3b6a:	52 07       	cpc	r21, r18
    3b6c:	44 f0       	brlt	.+16     	; 0x3b7e <obstacleAvoidance+0x142>
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	32 e0       	ldi	r19, 0x02	; 2
    3b72:	30 93 fe 03 	sts	0x03FE, r19
    3b76:	20 93 fd 03 	sts	0x03FD, r18
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	52 e0       	ldi	r21, 0x02	; 2
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
    3b7e:	22 e0       	ldi	r18, 0x02	; 2
    3b80:	81 30       	cpi	r24, 0x01	; 1
    3b82:	92 07       	cpc	r25, r18
    3b84:	34 f0       	brlt	.+12     	; 0x3b92 <obstacleAvoidance+0x156>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	92 e0       	ldi	r25, 0x02	; 2
    3b8a:	90 93 00 04 	sts	0x0400, r25
    3b8e:	80 93 ff 03 	sts	0x03FF, r24
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
    3b92:	2e ef       	ldi	r18, 0xFE	; 254
    3b94:	40 30       	cpi	r20, 0x00	; 0
    3b96:	52 07       	cpc	r21, r18
    3b98:	34 f4       	brge	.+12     	; 0x3ba6 <obstacleAvoidance+0x16a>
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	3e ef       	ldi	r19, 0xFE	; 254
    3b9e:	30 93 fe 03 	sts	0x03FE, r19
    3ba2:	20 93 fd 03 	sts	0x03FD, r18
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    3ba6:	2e ef       	ldi	r18, 0xFE	; 254
    3ba8:	80 30       	cpi	r24, 0x00	; 0
    3baa:	92 07       	cpc	r25, r18
    3bac:	34 f4       	brge	.+12     	; 0x3bba <obstacleAvoidance+0x17e>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	9e ef       	ldi	r25, 0xFE	; 254
    3bb2:	90 93 00 04 	sts	0x0400, r25
    3bb6:	80 93 ff 03 	sts	0x03FF, r24
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
    3bbe:	ff 90       	pop	r15
    3bc0:	ef 90       	pop	r14
    3bc2:	df 90       	pop	r13
    3bc4:	cf 90       	pop	r12
    3bc6:	08 95       	ret
	speedR = speedr;

	// speedr and speedl goes from 0 to 127 (usually 0..100), absolute value for both
	// forward and backward directions; we need a negative value for backward direction
	if(pwm_right_desired < 0) {
		speedR = -speedR; 
    3bc8:	70 95       	com	r23
    3bca:	61 95       	neg	r22
    3bcc:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
    3bce:	20 91 ed 03 	lds	r18, 0x03ED
    3bd2:	30 91 ee 03 	lds	r19, 0x03EE
    3bd6:	37 ff       	sbrs	r19, 7
    3bd8:	4b cf       	rjmp	.-362    	; 0x3a70 <obstacleAvoidance+0x34>
		speedL = -speedL;
    3bda:	90 95       	com	r25
    3bdc:	81 95       	neg	r24
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// compute the velocity components
	velX = (speedR + speedL)/2;
    3be0:	dc 01       	movw	r26, r24
    3be2:	a6 0f       	add	r26, r22
    3be4:	b7 1f       	adc	r27, r23
    3be6:	b7 ff       	sbrs	r27, 7
    3be8:	48 cf       	rjmp	.-368    	; 0x3a7a <obstacleAvoidance+0x3e>
    3bea:	11 96       	adiw	r26, 0x01	; 1
    3bec:	b5 95       	asr	r27
    3bee:	a7 95       	ror	r26
	velY = (speedR - speedL)/2;
    3bf0:	68 1b       	sub	r22, r24
    3bf2:	79 0b       	sbc	r23, r25
    3bf4:	77 ff       	sbrs	r23, 7
    3bf6:	47 cf       	rjmp	.-370    	; 0x3a86 <obstacleAvoidance+0x4a>
    3bf8:	6f 5f       	subi	r22, 0xFF	; 255
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	44 cf       	rjmp	.-376    	; 0x3a86 <obstacleAvoidance+0x4a>
		pwm_left_working = speedL;		//<<2
	}

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR);	//<<2
    3bfe:	50 93 fe 03 	sts	0x03FE, r21
    3c02:	40 93 fd 03 	sts	0x03FD, r20
    3c06:	bb cf       	rjmp	.-138    	; 0x3b7e <obstacleAvoidance+0x142>
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3c08:	4f 5f       	subi	r20, 0xFF	; 255
    3c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c0c:	91 cf       	rjmp	.-222    	; 0x3b30 <obstacleAvoidance+0xf4>
	// compute the velocity components
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3c0e:	31 96       	adiw	r30, 0x01	; 1
    3c10:	48 cf       	rjmp	.-368    	; 0x3aa2 <obstacleAvoidance+0x66>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3c12:	2f 5f       	subi	r18, 0xFF	; 255
    3c14:	3f 4f       	sbci	r19, 0xFF	; 255
    3c16:	84 cf       	rjmp	.-248    	; 0x3b20 <obstacleAvoidance+0xe4>
	// compute the velocity components
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3c18:	01 96       	adiw	r24, 0x01	; 1
    3c1a:	68 cf       	rjmp	.-304    	; 0x3aec <obstacleAvoidance+0xb0>
    3c1c:	01 96       	adiw	r24, 0x01	; 1
    3c1e:	58 cf       	rjmp	.-336    	; 0x3ad0 <obstacleAvoidance+0x94>
    3c20:	4f 5f       	subi	r20, 0xFF	; 255
    3c22:	5f 4f       	sbci	r21, 0xFF	; 255
    3c24:	4c cf       	rjmp	.-360    	; 0x3abe <obstacleAvoidance+0x82>

00003c26 <cliffDetected>:
	} else {
		return 0;
	}
*/

	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3c26:	80 91 75 03 	lds	r24, 0x0375
    3c2a:	90 91 76 03 	lds	r25, 0x0376
    3c2e:	21 e0       	ldi	r18, 0x01	; 1
    3c30:	84 3a       	cpi	r24, 0xA4	; 164
    3c32:	92 07       	cpc	r25, r18
    3c34:	d4 f0       	brlt	.+52     	; 0x3c6a <cliffDetected+0x44>
    3c36:	80 91 77 03 	lds	r24, 0x0377
    3c3a:	90 91 78 03 	lds	r25, 0x0378
    3c3e:	21 e0       	ldi	r18, 0x01	; 1
    3c40:	84 3a       	cpi	r24, 0xA4	; 164
    3c42:	92 07       	cpc	r25, r18
    3c44:	94 f0       	brlt	.+36     	; 0x3c6a <cliffDetected+0x44>
    3c46:	80 91 79 03 	lds	r24, 0x0379
    3c4a:	90 91 7a 03 	lds	r25, 0x037A
    3c4e:	21 e0       	ldi	r18, 0x01	; 1
    3c50:	84 3a       	cpi	r24, 0xA4	; 164
    3c52:	92 07       	cpc	r25, r18
    3c54:	74 f0       	brlt	.+28     	; 0x3c72 <cliffDetected+0x4c>
		return 1;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	20 91 7b 03 	lds	r18, 0x037B
    3c5c:	30 91 7c 03 	lds	r19, 0x037C
    3c60:	91 e0       	ldi	r25, 0x01	; 1
    3c62:	24 3a       	cpi	r18, 0xA4	; 164
    3c64:	39 07       	cpc	r19, r25
    3c66:	1c f4       	brge	.+6      	; 0x3c6e <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    3c68:	08 95       	ret
		return 0;
	}
*/

	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	08 95       	ret
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	08 95       	ret
    3c72:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    3c74:	08 95       	ret

00003c76 <initRGBleds>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
    3c76:	e0 e8       	ldi	r30, 0x80	; 128
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	89 6a       	ori	r24, 0xA9	; 169
    3c7e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
    3c80:	e1 e8       	ldi	r30, 0x81	; 129
    3c82:	f0 e0       	ldi	r31, 0x00	; 0
    3c84:	80 81       	ld	r24, Z
    3c86:	89 60       	ori	r24, 0x09	; 9
    3c88:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3c8a:	80 91 14 02 	lds	r24, 0x0214
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	90 93 89 00 	sts	0x0089, r25
    3c94:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3c98:	80 91 15 02 	lds	r24, 0x0215
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	90 93 8b 00 	sts	0x008B, r25
    3ca2:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3ca6:	80 91 16 02 	lds	r24, 0x0216
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	90 93 8d 00 	sts	0x008D, r25
    3cb0:	80 93 8c 00 	sts	0x008C, r24
	//TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1B1) & ~(1 << COM1C1);	// disable OCA, OCB, OCC to turn them off
	//TIMSK1 |= (1 << OCIE1A); 	// Enable output compare match interrupt
	//TIMSK1 |= (1 << TOIE1);	// Enable timer overflow interrupt


}
    3cb4:	08 95       	ret

00003cb6 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	90 91 06 04 	lds	r25, 0x0406
    3cbc:	89 1b       	sub	r24, r25
    3cbe:	80 93 06 04 	sts	0x0406, r24

	if(blinkState) {
    3cc2:	88 23       	and	r24, r24
    3cc4:	39 f4       	brne	.+14     	; 0x3cd4 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
    3cc6:	80 91 80 00 	lds	r24, 0x0080
    3cca:	87 7f       	andi	r24, 0xF7	; 247
    3ccc:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3cd0:	2f 98       	cbi	0x05, 7	; 5
    3cd2:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
    3cd4:	80 91 80 00 	lds	r24, 0x0080
    3cd8:	88 60       	ori	r24, 0x08	; 8
    3cda:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3cde:	8f ef       	ldi	r24, 0xFF	; 255
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	90 93 8d 00 	sts	0x008D, r25
    3ce6:	80 93 8c 00 	sts	0x008C, r24
    3cea:	08 95       	ret

00003cec <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3cec:	88 23       	and	r24, r24
    3cee:	59 f0       	breq	.+22     	; 0x3d06 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    3cf0:	90 91 80 00 	lds	r25, 0x0080
    3cf4:	90 68       	ori	r25, 0x80	; 128
    3cf6:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	90 93 89 00 	sts	0x0089, r25
    3d00:	80 93 88 00 	sts	0x0088, r24
    3d04:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    3d06:	80 91 80 00 	lds	r24, 0x0080
    3d0a:	8f 77       	andi	r24, 0x7F	; 127
    3d0c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    3d10:	2d 98       	cbi	0x05, 5	; 5
    3d12:	08 95       	ret

00003d14 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3d14:	88 23       	and	r24, r24
    3d16:	59 f0       	breq	.+22     	; 0x3d2e <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    3d18:	90 91 80 00 	lds	r25, 0x0080
    3d1c:	90 62       	ori	r25, 0x20	; 32
    3d1e:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	90 93 8b 00 	sts	0x008B, r25
    3d28:	80 93 8a 00 	sts	0x008A, r24
    3d2c:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    3d2e:	80 91 80 00 	lds	r24, 0x0080
    3d32:	8f 7d       	andi	r24, 0xDF	; 223
    3d34:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    3d38:	2e 98       	cbi	0x05, 6	; 5
    3d3a:	08 95       	ret

00003d3c <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3d3c:	88 23       	and	r24, r24
    3d3e:	59 f0       	breq	.+22     	; 0x3d56 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    3d40:	90 91 80 00 	lds	r25, 0x0080
    3d44:	98 60       	ori	r25, 0x08	; 8
    3d46:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	90 93 8d 00 	sts	0x008D, r25
    3d50:	80 93 8c 00 	sts	0x008C, r24
    3d54:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    3d56:	80 91 80 00 	lds	r24, 0x0080
    3d5a:	87 7f       	andi	r24, 0xF7	; 247
    3d5c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3d60:	2f 98       	cbi	0x05, 7	; 5
    3d62:	08 95       	ret

00003d64 <__mulsf3>:
    3d64:	a0 e2       	ldi	r26, 0x20	; 32
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	e8 eb       	ldi	r30, 0xB8	; 184
    3d6a:	fe e1       	ldi	r31, 0x1E	; 30
    3d6c:	0c 94 28 22 	jmp	0x4450	; 0x4450 <__prologue_saves__+0x4>
    3d70:	69 83       	std	Y+1, r22	; 0x01
    3d72:	7a 83       	std	Y+2, r23	; 0x02
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	2d 83       	std	Y+5, r18	; 0x05
    3d7a:	3e 83       	std	Y+6, r19	; 0x06
    3d7c:	4f 83       	std	Y+7, r20	; 0x07
    3d7e:	58 87       	std	Y+8, r21	; 0x08
    3d80:	99 e0       	ldi	r25, 0x09	; 9
    3d82:	e9 2e       	mov	r14, r25
    3d84:	f1 2c       	mov	r15, r1
    3d86:	ec 0e       	add	r14, r28
    3d88:	fd 1e       	adc	r15, r29
    3d8a:	b7 01       	movw	r22, r14
    3d8c:	ce 01       	movw	r24, r28
    3d8e:	01 96       	adiw	r24, 0x01	; 1
    3d90:	0e 94 8f 21 	call	0x431e	; 0x431e <__unpack_f>
    3d94:	8e 01       	movw	r16, r28
    3d96:	0f 5e       	subi	r16, 0xEF	; 239
    3d98:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9a:	b8 01       	movw	r22, r16
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	05 96       	adiw	r24, 0x05	; 5
    3da0:	0e 94 8f 21 	call	0x431e	; 0x431e <__unpack_f>
    3da4:	99 85       	ldd	r25, Y+9	; 0x09
    3da6:	92 30       	cpi	r25, 0x02	; 2
    3da8:	88 f0       	brcs	.+34     	; 0x3dcc <__mulsf3+0x68>
    3daa:	89 89       	ldd	r24, Y+17	; 0x11
    3dac:	82 30       	cpi	r24, 0x02	; 2
    3dae:	c0 f0       	brcs	.+48     	; 0x3de0 <__mulsf3+0x7c>
    3db0:	94 30       	cpi	r25, 0x04	; 4
    3db2:	19 f4       	brne	.+6      	; 0x3dba <__mulsf3+0x56>
    3db4:	82 30       	cpi	r24, 0x02	; 2
    3db6:	29 f0       	breq	.+10     	; 0x3dc2 <__mulsf3+0x5e>
    3db8:	09 c0       	rjmp	.+18     	; 0x3dcc <__mulsf3+0x68>
    3dba:	84 30       	cpi	r24, 0x04	; 4
    3dbc:	29 f4       	brne	.+10     	; 0x3dc8 <__mulsf3+0x64>
    3dbe:	92 30       	cpi	r25, 0x02	; 2
    3dc0:	79 f4       	brne	.+30     	; 0x3de0 <__mulsf3+0x7c>
    3dc2:	61 e2       	ldi	r22, 0x21	; 33
    3dc4:	72 e0       	ldi	r23, 0x02	; 2
    3dc6:	c6 c0       	rjmp	.+396    	; 0x3f54 <__mulsf3+0x1f0>
    3dc8:	92 30       	cpi	r25, 0x02	; 2
    3dca:	41 f4       	brne	.+16     	; 0x3ddc <__mulsf3+0x78>
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	8a 89       	ldd	r24, Y+18	; 0x12
    3dd2:	98 13       	cpse	r25, r24
    3dd4:	21 e0       	ldi	r18, 0x01	; 1
    3dd6:	2a 87       	std	Y+10, r18	; 0x0a
    3dd8:	b7 01       	movw	r22, r14
    3dda:	bc c0       	rjmp	.+376    	; 0x3f54 <__mulsf3+0x1f0>
    3ddc:	82 30       	cpi	r24, 0x02	; 2
    3dde:	41 f4       	brne	.+16     	; 0x3df0 <__mulsf3+0x8c>
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de4:	8a 89       	ldd	r24, Y+18	; 0x12
    3de6:	98 13       	cpse	r25, r24
    3de8:	21 e0       	ldi	r18, 0x01	; 1
    3dea:	2a 8b       	std	Y+18, r18	; 0x12
    3dec:	b8 01       	movw	r22, r16
    3dee:	b2 c0       	rjmp	.+356    	; 0x3f54 <__mulsf3+0x1f0>
    3df0:	cd 84       	ldd	r12, Y+13	; 0x0d
    3df2:	de 84       	ldd	r13, Y+14	; 0x0e
    3df4:	ef 84       	ldd	r14, Y+15	; 0x0f
    3df6:	f8 88       	ldd	r15, Y+16	; 0x10
    3df8:	0d 89       	ldd	r16, Y+21	; 0x15
    3dfa:	1e 89       	ldd	r17, Y+22	; 0x16
    3dfc:	2f 89       	ldd	r18, Y+23	; 0x17
    3dfe:	38 8d       	ldd	r19, Y+24	; 0x18
    3e00:	88 24       	eor	r8, r8
    3e02:	99 24       	eor	r9, r9
    3e04:	54 01       	movw	r10, r8
    3e06:	40 e0       	ldi	r20, 0x00	; 0
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	70 e0       	ldi	r23, 0x00	; 0
    3e0e:	44 24       	eor	r4, r4
    3e10:	55 24       	eor	r5, r5
    3e12:	32 01       	movw	r6, r4
    3e14:	e0 e0       	ldi	r30, 0x00	; 0
    3e16:	f0 e0       	ldi	r31, 0x00	; 0
    3e18:	c6 01       	movw	r24, r12
    3e1a:	81 70       	andi	r24, 0x01	; 1
    3e1c:	90 70       	andi	r25, 0x00	; 0
    3e1e:	89 2b       	or	r24, r25
    3e20:	d9 f0       	breq	.+54     	; 0x3e58 <__mulsf3+0xf4>
    3e22:	80 0e       	add	r8, r16
    3e24:	91 1e       	adc	r9, r17
    3e26:	a2 1e       	adc	r10, r18
    3e28:	b3 1e       	adc	r11, r19
    3e2a:	db 01       	movw	r26, r22
    3e2c:	ca 01       	movw	r24, r20
    3e2e:	84 0d       	add	r24, r4
    3e30:	95 1d       	adc	r25, r5
    3e32:	a6 1d       	adc	r26, r6
    3e34:	b7 1d       	adc	r27, r7
    3e36:	40 e0       	ldi	r20, 0x00	; 0
    3e38:	50 e0       	ldi	r21, 0x00	; 0
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	70 e0       	ldi	r23, 0x00	; 0
    3e3e:	80 16       	cp	r8, r16
    3e40:	91 06       	cpc	r9, r17
    3e42:	a2 06       	cpc	r10, r18
    3e44:	b3 06       	cpc	r11, r19
    3e46:	20 f4       	brcc	.+8      	; 0x3e50 <__mulsf3+0xec>
    3e48:	41 e0       	ldi	r20, 0x01	; 1
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	60 e0       	ldi	r22, 0x00	; 0
    3e4e:	70 e0       	ldi	r23, 0x00	; 0
    3e50:	48 0f       	add	r20, r24
    3e52:	59 1f       	adc	r21, r25
    3e54:	6a 1f       	adc	r22, r26
    3e56:	7b 1f       	adc	r23, r27
    3e58:	44 0c       	add	r4, r4
    3e5a:	55 1c       	adc	r5, r5
    3e5c:	66 1c       	adc	r6, r6
    3e5e:	77 1c       	adc	r7, r7
    3e60:	37 ff       	sbrs	r19, 7
    3e62:	08 c0       	rjmp	.+16     	; 0x3e74 <__mulsf3+0x110>
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	a0 e0       	ldi	r26, 0x00	; 0
    3e6a:	b0 e0       	ldi	r27, 0x00	; 0
    3e6c:	48 2a       	or	r4, r24
    3e6e:	59 2a       	or	r5, r25
    3e70:	6a 2a       	or	r6, r26
    3e72:	7b 2a       	or	r7, r27
    3e74:	31 96       	adiw	r30, 0x01	; 1
    3e76:	e0 32       	cpi	r30, 0x20	; 32
    3e78:	f1 05       	cpc	r31, r1
    3e7a:	49 f0       	breq	.+18     	; 0x3e8e <__mulsf3+0x12a>
    3e7c:	00 0f       	add	r16, r16
    3e7e:	11 1f       	adc	r17, r17
    3e80:	22 1f       	adc	r18, r18
    3e82:	33 1f       	adc	r19, r19
    3e84:	f6 94       	lsr	r15
    3e86:	e7 94       	ror	r14
    3e88:	d7 94       	ror	r13
    3e8a:	c7 94       	ror	r12
    3e8c:	c5 cf       	rjmp	.-118    	; 0x3e18 <__mulsf3+0xb4>
    3e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e90:	9c 89       	ldd	r25, Y+20	; 0x14
    3e92:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e94:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e96:	82 0f       	add	r24, r18
    3e98:	93 1f       	adc	r25, r19
    3e9a:	02 96       	adiw	r24, 0x02	; 2
    3e9c:	9c 8f       	std	Y+28, r25	; 0x1c
    3e9e:	8b 8f       	std	Y+27, r24	; 0x1b
    3ea0:	1a 8e       	std	Y+26, r1	; 0x1a
    3ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ea6:	98 17       	cp	r25, r24
    3ea8:	11 f0       	breq	.+4      	; 0x3eae <__mulsf3+0x14a>
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	8a 8f       	std	Y+26, r24	; 0x1a
    3eae:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3eb0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3eb2:	17 c0       	rjmp	.+46     	; 0x3ee2 <__mulsf3+0x17e>
    3eb4:	ca 01       	movw	r24, r20
    3eb6:	81 70       	andi	r24, 0x01	; 1
    3eb8:	90 70       	andi	r25, 0x00	; 0
    3eba:	89 2b       	or	r24, r25
    3ebc:	61 f0       	breq	.+24     	; 0x3ed6 <__mulsf3+0x172>
    3ebe:	b6 94       	lsr	r11
    3ec0:	a7 94       	ror	r10
    3ec2:	97 94       	ror	r9
    3ec4:	87 94       	ror	r8
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	a0 e0       	ldi	r26, 0x00	; 0
    3ecc:	b0 e8       	ldi	r27, 0x80	; 128
    3ece:	88 2a       	or	r8, r24
    3ed0:	99 2a       	or	r9, r25
    3ed2:	aa 2a       	or	r10, r26
    3ed4:	bb 2a       	or	r11, r27
    3ed6:	76 95       	lsr	r23
    3ed8:	67 95       	ror	r22
    3eda:	57 95       	ror	r21
    3edc:	47 95       	ror	r20
    3ede:	2f 5f       	subi	r18, 0xFF	; 255
    3ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee2:	77 fd       	sbrc	r23, 7
    3ee4:	e7 cf       	rjmp	.-50     	; 0x3eb4 <__mulsf3+0x150>
    3ee6:	c9 01       	movw	r24, r18
    3ee8:	0b c0       	rjmp	.+22     	; 0x3f00 <__mulsf3+0x19c>
    3eea:	44 0f       	add	r20, r20
    3eec:	55 1f       	adc	r21, r21
    3eee:	66 1f       	adc	r22, r22
    3ef0:	77 1f       	adc	r23, r23
    3ef2:	b7 fc       	sbrc	r11, 7
    3ef4:	41 60       	ori	r20, 0x01	; 1
    3ef6:	88 0c       	add	r8, r8
    3ef8:	99 1c       	adc	r9, r9
    3efa:	aa 1c       	adc	r10, r10
    3efc:	bb 1c       	adc	r11, r11
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	40 30       	cpi	r20, 0x00	; 0
    3f02:	a0 e0       	ldi	r26, 0x00	; 0
    3f04:	5a 07       	cpc	r21, r26
    3f06:	a0 e0       	ldi	r26, 0x00	; 0
    3f08:	6a 07       	cpc	r22, r26
    3f0a:	a0 e4       	ldi	r26, 0x40	; 64
    3f0c:	7a 07       	cpc	r23, r26
    3f0e:	68 f3       	brcs	.-38     	; 0x3eea <__mulsf3+0x186>
    3f10:	9c 8f       	std	Y+28, r25	; 0x1c
    3f12:	8b 8f       	std	Y+27, r24	; 0x1b
    3f14:	db 01       	movw	r26, r22
    3f16:	ca 01       	movw	r24, r20
    3f18:	8f 77       	andi	r24, 0x7F	; 127
    3f1a:	90 70       	andi	r25, 0x00	; 0
    3f1c:	a0 70       	andi	r26, 0x00	; 0
    3f1e:	b0 70       	andi	r27, 0x00	; 0
    3f20:	80 34       	cpi	r24, 0x40	; 64
    3f22:	91 05       	cpc	r25, r1
    3f24:	a1 05       	cpc	r26, r1
    3f26:	b1 05       	cpc	r27, r1
    3f28:	61 f4       	brne	.+24     	; 0x3f42 <__mulsf3+0x1de>
    3f2a:	47 fd       	sbrc	r20, 7
    3f2c:	0a c0       	rjmp	.+20     	; 0x3f42 <__mulsf3+0x1de>
    3f2e:	81 14       	cp	r8, r1
    3f30:	91 04       	cpc	r9, r1
    3f32:	a1 04       	cpc	r10, r1
    3f34:	b1 04       	cpc	r11, r1
    3f36:	29 f0       	breq	.+10     	; 0x3f42 <__mulsf3+0x1de>
    3f38:	40 5c       	subi	r20, 0xC0	; 192
    3f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3c:	6f 4f       	sbci	r22, 0xFF	; 255
    3f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f40:	40 78       	andi	r20, 0x80	; 128
    3f42:	4d 8f       	std	Y+29, r20	; 0x1d
    3f44:	5e 8f       	std	Y+30, r21	; 0x1e
    3f46:	6f 8f       	std	Y+31, r22	; 0x1f
    3f48:	78 a3       	std	Y+32, r23	; 0x20
    3f4a:	83 e0       	ldi	r24, 0x03	; 3
    3f4c:	89 8f       	std	Y+25, r24	; 0x19
    3f4e:	be 01       	movw	r22, r28
    3f50:	67 5e       	subi	r22, 0xE7	; 231
    3f52:	7f 4f       	sbci	r23, 0xFF	; 255
    3f54:	cb 01       	movw	r24, r22
    3f56:	0e 94 af 20 	call	0x415e	; 0x415e <__pack_f>
    3f5a:	e0 e1       	ldi	r30, 0x10	; 16
    3f5c:	a0 96       	adiw	r28, 0x20	; 32
    3f5e:	0c 94 44 22 	jmp	0x4488	; 0x4488 <__epilogue_restores__+0x4>

00003f62 <__floatsisf>:
    3f62:	a8 e0       	ldi	r26, 0x08	; 8
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	e7 eb       	ldi	r30, 0xB7	; 183
    3f68:	ff e1       	ldi	r31, 0x1F	; 31
    3f6a:	0c 94 2f 22 	jmp	0x445e	; 0x445e <__prologue_saves__+0x12>
    3f6e:	9b 01       	movw	r18, r22
    3f70:	ac 01       	movw	r20, r24
    3f72:	83 e0       	ldi	r24, 0x03	; 3
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	da 01       	movw	r26, r20
    3f78:	c9 01       	movw	r24, r18
    3f7a:	88 27       	eor	r24, r24
    3f7c:	b7 fd       	sbrc	r27, 7
    3f7e:	83 95       	inc	r24
    3f80:	99 27       	eor	r25, r25
    3f82:	aa 27       	eor	r26, r26
    3f84:	bb 27       	eor	r27, r27
    3f86:	b8 2e       	mov	r11, r24
    3f88:	21 15       	cp	r18, r1
    3f8a:	31 05       	cpc	r19, r1
    3f8c:	41 05       	cpc	r20, r1
    3f8e:	51 05       	cpc	r21, r1
    3f90:	19 f4       	brne	.+6      	; 0x3f98 <__floatsisf+0x36>
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	3a c0       	rjmp	.+116    	; 0x400c <__floatsisf+0xaa>
    3f98:	88 23       	and	r24, r24
    3f9a:	a9 f0       	breq	.+42     	; 0x3fc6 <__floatsisf+0x64>
    3f9c:	20 30       	cpi	r18, 0x00	; 0
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	38 07       	cpc	r19, r24
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	48 07       	cpc	r20, r24
    3fa6:	80 e8       	ldi	r24, 0x80	; 128
    3fa8:	58 07       	cpc	r21, r24
    3faa:	29 f4       	brne	.+10     	; 0x3fb6 <__floatsisf+0x54>
    3fac:	60 e0       	ldi	r22, 0x00	; 0
    3fae:	70 e0       	ldi	r23, 0x00	; 0
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	9f ec       	ldi	r25, 0xCF	; 207
    3fb4:	30 c0       	rjmp	.+96     	; 0x4016 <__floatsisf+0xb4>
    3fb6:	ee 24       	eor	r14, r14
    3fb8:	ff 24       	eor	r15, r15
    3fba:	87 01       	movw	r16, r14
    3fbc:	e2 1a       	sub	r14, r18
    3fbe:	f3 0a       	sbc	r15, r19
    3fc0:	04 0b       	sbc	r16, r20
    3fc2:	15 0b       	sbc	r17, r21
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <__floatsisf+0x68>
    3fc6:	79 01       	movw	r14, r18
    3fc8:	8a 01       	movw	r16, r20
    3fca:	8e e1       	ldi	r24, 0x1E	; 30
    3fcc:	c8 2e       	mov	r12, r24
    3fce:	d1 2c       	mov	r13, r1
    3fd0:	dc 82       	std	Y+4, r13	; 0x04
    3fd2:	cb 82       	std	Y+3, r12	; 0x03
    3fd4:	ed 82       	std	Y+5, r14	; 0x05
    3fd6:	fe 82       	std	Y+6, r15	; 0x06
    3fd8:	0f 83       	std	Y+7, r16	; 0x07
    3fda:	18 87       	std	Y+8, r17	; 0x08
    3fdc:	c8 01       	movw	r24, r16
    3fde:	b7 01       	movw	r22, r14
    3fe0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__clzsi2>
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	18 16       	cp	r1, r24
    3fe8:	19 06       	cpc	r1, r25
    3fea:	84 f4       	brge	.+32     	; 0x400c <__floatsisf+0xaa>
    3fec:	08 2e       	mov	r0, r24
    3fee:	04 c0       	rjmp	.+8      	; 0x3ff8 <__floatsisf+0x96>
    3ff0:	ee 0c       	add	r14, r14
    3ff2:	ff 1c       	adc	r15, r15
    3ff4:	00 1f       	adc	r16, r16
    3ff6:	11 1f       	adc	r17, r17
    3ff8:	0a 94       	dec	r0
    3ffa:	d2 f7       	brpl	.-12     	; 0x3ff0 <__floatsisf+0x8e>
    3ffc:	ed 82       	std	Y+5, r14	; 0x05
    3ffe:	fe 82       	std	Y+6, r15	; 0x06
    4000:	0f 83       	std	Y+7, r16	; 0x07
    4002:	18 87       	std	Y+8, r17	; 0x08
    4004:	c8 1a       	sub	r12, r24
    4006:	d9 0a       	sbc	r13, r25
    4008:	dc 82       	std	Y+4, r13	; 0x04
    400a:	cb 82       	std	Y+3, r12	; 0x03
    400c:	ba 82       	std	Y+2, r11	; 0x02
    400e:	ce 01       	movw	r24, r28
    4010:	01 96       	adiw	r24, 0x01	; 1
    4012:	0e 94 af 20 	call	0x415e	; 0x415e <__pack_f>
    4016:	e9 e0       	ldi	r30, 0x09	; 9
    4018:	28 96       	adiw	r28, 0x08	; 8
    401a:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__epilogue_restores__+0x12>

0000401e <__fixsfsi>:
    401e:	ac e0       	ldi	r26, 0x0C	; 12
    4020:	b0 e0       	ldi	r27, 0x00	; 0
    4022:	e5 e1       	ldi	r30, 0x15	; 21
    4024:	f0 e2       	ldi	r31, 0x20	; 32
    4026:	0c 94 36 22 	jmp	0x446c	; 0x446c <__prologue_saves__+0x20>
    402a:	69 83       	std	Y+1, r22	; 0x01
    402c:	7a 83       	std	Y+2, r23	; 0x02
    402e:	8b 83       	std	Y+3, r24	; 0x03
    4030:	9c 83       	std	Y+4, r25	; 0x04
    4032:	be 01       	movw	r22, r28
    4034:	6b 5f       	subi	r22, 0xFB	; 251
    4036:	7f 4f       	sbci	r23, 0xFF	; 255
    4038:	ce 01       	movw	r24, r28
    403a:	01 96       	adiw	r24, 0x01	; 1
    403c:	0e 94 8f 21 	call	0x431e	; 0x431e <__unpack_f>
    4040:	8d 81       	ldd	r24, Y+5	; 0x05
    4042:	82 30       	cpi	r24, 0x02	; 2
    4044:	a9 f1       	breq	.+106    	; 0x40b0 <__fixsfsi+0x92>
    4046:	82 30       	cpi	r24, 0x02	; 2
    4048:	98 f1       	brcs	.+102    	; 0x40b0 <__fixsfsi+0x92>
    404a:	84 30       	cpi	r24, 0x04	; 4
    404c:	21 f4       	brne	.+8      	; 0x4056 <__fixsfsi+0x38>
    404e:	8e 81       	ldd	r24, Y+6	; 0x06
    4050:	88 23       	and	r24, r24
    4052:	59 f4       	brne	.+22     	; 0x406a <__fixsfsi+0x4c>
    4054:	0f c0       	rjmp	.+30     	; 0x4074 <__fixsfsi+0x56>
    4056:	2f 81       	ldd	r18, Y+7	; 0x07
    4058:	38 85       	ldd	r19, Y+8	; 0x08
    405a:	37 fd       	sbrc	r19, 7
    405c:	29 c0       	rjmp	.+82     	; 0x40b0 <__fixsfsi+0x92>
    405e:	6e 81       	ldd	r22, Y+6	; 0x06
    4060:	2f 31       	cpi	r18, 0x1F	; 31
    4062:	31 05       	cpc	r19, r1
    4064:	64 f0       	brlt	.+24     	; 0x407e <__fixsfsi+0x60>
    4066:	66 23       	and	r22, r22
    4068:	29 f0       	breq	.+10     	; 0x4074 <__fixsfsi+0x56>
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	40 e0       	ldi	r20, 0x00	; 0
    4070:	50 e8       	ldi	r21, 0x80	; 128
    4072:	22 c0       	rjmp	.+68     	; 0x40b8 <__fixsfsi+0x9a>
    4074:	2f ef       	ldi	r18, 0xFF	; 255
    4076:	3f ef       	ldi	r19, 0xFF	; 255
    4078:	4f ef       	ldi	r20, 0xFF	; 255
    407a:	5f e7       	ldi	r21, 0x7F	; 127
    407c:	1d c0       	rjmp	.+58     	; 0x40b8 <__fixsfsi+0x9a>
    407e:	8e e1       	ldi	r24, 0x1E	; 30
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	82 1b       	sub	r24, r18
    4084:	93 0b       	sbc	r25, r19
    4086:	29 85       	ldd	r18, Y+9	; 0x09
    4088:	3a 85       	ldd	r19, Y+10	; 0x0a
    408a:	4b 85       	ldd	r20, Y+11	; 0x0b
    408c:	5c 85       	ldd	r21, Y+12	; 0x0c
    408e:	04 c0       	rjmp	.+8      	; 0x4098 <__fixsfsi+0x7a>
    4090:	56 95       	lsr	r21
    4092:	47 95       	ror	r20
    4094:	37 95       	ror	r19
    4096:	27 95       	ror	r18
    4098:	8a 95       	dec	r24
    409a:	d2 f7       	brpl	.-12     	; 0x4090 <__fixsfsi+0x72>
    409c:	66 23       	and	r22, r22
    409e:	61 f0       	breq	.+24     	; 0x40b8 <__fixsfsi+0x9a>
    40a0:	50 95       	com	r21
    40a2:	40 95       	com	r20
    40a4:	30 95       	com	r19
    40a6:	21 95       	neg	r18
    40a8:	3f 4f       	sbci	r19, 0xFF	; 255
    40aa:	4f 4f       	sbci	r20, 0xFF	; 255
    40ac:	5f 4f       	sbci	r21, 0xFF	; 255
    40ae:	04 c0       	rjmp	.+8      	; 0x40b8 <__fixsfsi+0x9a>
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e0       	ldi	r20, 0x00	; 0
    40b6:	50 e0       	ldi	r21, 0x00	; 0
    40b8:	ca 01       	movw	r24, r20
    40ba:	b9 01       	movw	r22, r18
    40bc:	e2 e0       	ldi	r30, 0x02	; 2
    40be:	2c 96       	adiw	r28, 0x0c	; 12
    40c0:	0c 94 52 22 	jmp	0x44a4	; 0x44a4 <__epilogue_restores__+0x20>

000040c4 <__clzsi2>:
    40c4:	ef 92       	push	r14
    40c6:	ff 92       	push	r15
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	9b 01       	movw	r18, r22
    40ce:	ac 01       	movw	r20, r24
    40d0:	20 30       	cpi	r18, 0x00	; 0
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	38 07       	cpc	r19, r24
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	48 07       	cpc	r20, r24
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	58 07       	cpc	r21, r24
    40de:	80 f4       	brcc	.+32     	; 0x4100 <__clzsi2+0x3c>
    40e0:	2f 3f       	cpi	r18, 0xFF	; 255
    40e2:	31 05       	cpc	r19, r1
    40e4:	41 05       	cpc	r20, r1
    40e6:	51 05       	cpc	r21, r1
    40e8:	09 f0       	breq	.+2      	; 0x40ec <__clzsi2+0x28>
    40ea:	20 f4       	brcc	.+8      	; 0x40f4 <__clzsi2+0x30>
    40ec:	ee 24       	eor	r14, r14
    40ee:	ff 24       	eor	r15, r15
    40f0:	87 01       	movw	r16, r14
    40f2:	19 c0       	rjmp	.+50     	; 0x4126 <__clzsi2+0x62>
    40f4:	68 e0       	ldi	r22, 0x08	; 8
    40f6:	e6 2e       	mov	r14, r22
    40f8:	f1 2c       	mov	r15, r1
    40fa:	01 2d       	mov	r16, r1
    40fc:	11 2d       	mov	r17, r1
    40fe:	13 c0       	rjmp	.+38     	; 0x4126 <__clzsi2+0x62>
    4100:	20 30       	cpi	r18, 0x00	; 0
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	38 07       	cpc	r19, r24
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	48 07       	cpc	r20, r24
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	58 07       	cpc	r21, r24
    410e:	30 f4       	brcc	.+12     	; 0x411c <__clzsi2+0x58>
    4110:	90 e1       	ldi	r25, 0x10	; 16
    4112:	e9 2e       	mov	r14, r25
    4114:	f1 2c       	mov	r15, r1
    4116:	01 2d       	mov	r16, r1
    4118:	11 2d       	mov	r17, r1
    411a:	05 c0       	rjmp	.+10     	; 0x4126 <__clzsi2+0x62>
    411c:	88 e1       	ldi	r24, 0x18	; 24
    411e:	e8 2e       	mov	r14, r24
    4120:	f1 2c       	mov	r15, r1
    4122:	01 2d       	mov	r16, r1
    4124:	11 2d       	mov	r17, r1
    4126:	80 e2       	ldi	r24, 0x20	; 32
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	a0 e0       	ldi	r26, 0x00	; 0
    412c:	b0 e0       	ldi	r27, 0x00	; 0
    412e:	8e 19       	sub	r24, r14
    4130:	9f 09       	sbc	r25, r15
    4132:	a0 0b       	sbc	r26, r16
    4134:	b1 0b       	sbc	r27, r17
    4136:	04 c0       	rjmp	.+8      	; 0x4140 <__clzsi2+0x7c>
    4138:	56 95       	lsr	r21
    413a:	47 95       	ror	r20
    413c:	37 95       	ror	r19
    413e:	27 95       	ror	r18
    4140:	ea 94       	dec	r14
    4142:	d2 f7       	brpl	.-12     	; 0x4138 <__clzsi2+0x74>
    4144:	f9 01       	movw	r30, r18
    4146:	e7 5d       	subi	r30, 0xD7	; 215
    4148:	fd 4f       	sbci	r31, 0xFD	; 253
    414a:	20 81       	ld	r18, Z
    414c:	82 1b       	sub	r24, r18
    414e:	91 09       	sbc	r25, r1
    4150:	a1 09       	sbc	r26, r1
    4152:	b1 09       	sbc	r27, r1
    4154:	1f 91       	pop	r17
    4156:	0f 91       	pop	r16
    4158:	ff 90       	pop	r15
    415a:	ef 90       	pop	r14
    415c:	08 95       	ret

0000415e <__pack_f>:
    415e:	9f 92       	push	r9
    4160:	af 92       	push	r10
    4162:	bf 92       	push	r11
    4164:	cf 92       	push	r12
    4166:	df 92       	push	r13
    4168:	ef 92       	push	r14
    416a:	ff 92       	push	r15
    416c:	0f 93       	push	r16
    416e:	1f 93       	push	r17
    4170:	ee 24       	eor	r14, r14
    4172:	ff 24       	eor	r15, r15
    4174:	87 01       	movw	r16, r14
    4176:	fc 01       	movw	r30, r24
    4178:	24 81       	ldd	r18, Z+4	; 0x04
    417a:	35 81       	ldd	r19, Z+5	; 0x05
    417c:	46 81       	ldd	r20, Z+6	; 0x06
    417e:	57 81       	ldd	r21, Z+7	; 0x07
    4180:	91 80       	ldd	r9, Z+1	; 0x01
    4182:	80 81       	ld	r24, Z
    4184:	82 30       	cpi	r24, 0x02	; 2
    4186:	10 f4       	brcc	.+4      	; 0x418c <__pack_f+0x2e>
    4188:	40 61       	ori	r20, 0x10	; 16
    418a:	a2 c0       	rjmp	.+324    	; 0x42d0 <__pack_f+0x172>
    418c:	84 30       	cpi	r24, 0x04	; 4
    418e:	09 f4       	brne	.+2      	; 0x4192 <__pack_f+0x34>
    4190:	9b c0       	rjmp	.+310    	; 0x42c8 <__pack_f+0x16a>
    4192:	82 30       	cpi	r24, 0x02	; 2
    4194:	29 f4       	brne	.+10     	; 0x41a0 <__pack_f+0x42>
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e0       	ldi	r20, 0x00	; 0
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	05 c0       	rjmp	.+10     	; 0x41aa <__pack_f+0x4c>
    41a0:	21 15       	cp	r18, r1
    41a2:	31 05       	cpc	r19, r1
    41a4:	41 05       	cpc	r20, r1
    41a6:	51 05       	cpc	r21, r1
    41a8:	19 f4       	brne	.+6      	; 0x41b0 <__pack_f+0x52>
    41aa:	e0 e0       	ldi	r30, 0x00	; 0
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	92 c0       	rjmp	.+292    	; 0x42d4 <__pack_f+0x176>
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	6f ef       	ldi	r22, 0xFF	; 255
    41b6:	82 38       	cpi	r24, 0x82	; 130
    41b8:	96 07       	cpc	r25, r22
    41ba:	0c f0       	brlt	.+2      	; 0x41be <__pack_f+0x60>
    41bc:	5a c0       	rjmp	.+180    	; 0x4272 <__pack_f+0x114>
    41be:	62 e8       	ldi	r22, 0x82	; 130
    41c0:	7f ef       	ldi	r23, 0xFF	; 255
    41c2:	68 1b       	sub	r22, r24
    41c4:	79 0b       	sbc	r23, r25
    41c6:	6a 31       	cpi	r22, 0x1A	; 26
    41c8:	71 05       	cpc	r23, r1
    41ca:	2c f0       	brlt	.+10     	; 0x41d6 <__pack_f+0x78>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e0       	ldi	r20, 0x00	; 0
    41d2:	50 e0       	ldi	r21, 0x00	; 0
    41d4:	2a c0       	rjmp	.+84     	; 0x422a <__pack_f+0xcc>
    41d6:	aa 24       	eor	r10, r10
    41d8:	bb 24       	eor	r11, r11
    41da:	65 01       	movw	r12, r10
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	a0 e0       	ldi	r26, 0x00	; 0
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	06 2e       	mov	r0, r22
    41e6:	04 c0       	rjmp	.+8      	; 0x41f0 <__pack_f+0x92>
    41e8:	88 0f       	add	r24, r24
    41ea:	99 1f       	adc	r25, r25
    41ec:	aa 1f       	adc	r26, r26
    41ee:	bb 1f       	adc	r27, r27
    41f0:	0a 94       	dec	r0
    41f2:	d2 f7       	brpl	.-12     	; 0x41e8 <__pack_f+0x8a>
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	a1 09       	sbc	r26, r1
    41f8:	b1 09       	sbc	r27, r1
    41fa:	82 23       	and	r24, r18
    41fc:	93 23       	and	r25, r19
    41fe:	a4 23       	and	r26, r20
    4200:	b5 23       	and	r27, r21
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	a1 05       	cpc	r26, r1
    4206:	b1 05       	cpc	r27, r1
    4208:	29 f0       	breq	.+10     	; 0x4214 <__pack_f+0xb6>
    420a:	71 e0       	ldi	r23, 0x01	; 1
    420c:	a7 2e       	mov	r10, r23
    420e:	b1 2c       	mov	r11, r1
    4210:	c1 2c       	mov	r12, r1
    4212:	d1 2c       	mov	r13, r1
    4214:	04 c0       	rjmp	.+8      	; 0x421e <__pack_f+0xc0>
    4216:	56 95       	lsr	r21
    4218:	47 95       	ror	r20
    421a:	37 95       	ror	r19
    421c:	27 95       	ror	r18
    421e:	6a 95       	dec	r22
    4220:	d2 f7       	brpl	.-12     	; 0x4216 <__pack_f+0xb8>
    4222:	2a 29       	or	r18, r10
    4224:	3b 29       	or	r19, r11
    4226:	4c 29       	or	r20, r12
    4228:	5d 29       	or	r21, r13
    422a:	da 01       	movw	r26, r20
    422c:	c9 01       	movw	r24, r18
    422e:	8f 77       	andi	r24, 0x7F	; 127
    4230:	90 70       	andi	r25, 0x00	; 0
    4232:	a0 70       	andi	r26, 0x00	; 0
    4234:	b0 70       	andi	r27, 0x00	; 0
    4236:	80 34       	cpi	r24, 0x40	; 64
    4238:	91 05       	cpc	r25, r1
    423a:	a1 05       	cpc	r26, r1
    423c:	b1 05       	cpc	r27, r1
    423e:	39 f4       	brne	.+14     	; 0x424e <__pack_f+0xf0>
    4240:	27 ff       	sbrs	r18, 7
    4242:	09 c0       	rjmp	.+18     	; 0x4256 <__pack_f+0xf8>
    4244:	20 5c       	subi	r18, 0xC0	; 192
    4246:	3f 4f       	sbci	r19, 0xFF	; 255
    4248:	4f 4f       	sbci	r20, 0xFF	; 255
    424a:	5f 4f       	sbci	r21, 0xFF	; 255
    424c:	04 c0       	rjmp	.+8      	; 0x4256 <__pack_f+0xf8>
    424e:	21 5c       	subi	r18, 0xC1	; 193
    4250:	3f 4f       	sbci	r19, 0xFF	; 255
    4252:	4f 4f       	sbci	r20, 0xFF	; 255
    4254:	5f 4f       	sbci	r21, 0xFF	; 255
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	20 30       	cpi	r18, 0x00	; 0
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	36 07       	cpc	r19, r22
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	46 07       	cpc	r20, r22
    4264:	60 e4       	ldi	r22, 0x40	; 64
    4266:	56 07       	cpc	r21, r22
    4268:	10 f0       	brcs	.+4      	; 0x426e <__pack_f+0x110>
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	fc 01       	movw	r30, r24
    4270:	23 c0       	rjmp	.+70     	; 0x42b8 <__pack_f+0x15a>
    4272:	80 38       	cpi	r24, 0x80	; 128
    4274:	91 05       	cpc	r25, r1
    4276:	44 f5       	brge	.+80     	; 0x42c8 <__pack_f+0x16a>
    4278:	fc 01       	movw	r30, r24
    427a:	e1 58       	subi	r30, 0x81	; 129
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	da 01       	movw	r26, r20
    4280:	c9 01       	movw	r24, r18
    4282:	8f 77       	andi	r24, 0x7F	; 127
    4284:	90 70       	andi	r25, 0x00	; 0
    4286:	a0 70       	andi	r26, 0x00	; 0
    4288:	b0 70       	andi	r27, 0x00	; 0
    428a:	80 34       	cpi	r24, 0x40	; 64
    428c:	91 05       	cpc	r25, r1
    428e:	a1 05       	cpc	r26, r1
    4290:	b1 05       	cpc	r27, r1
    4292:	39 f4       	brne	.+14     	; 0x42a2 <__pack_f+0x144>
    4294:	27 ff       	sbrs	r18, 7
    4296:	09 c0       	rjmp	.+18     	; 0x42aa <__pack_f+0x14c>
    4298:	20 5c       	subi	r18, 0xC0	; 192
    429a:	3f 4f       	sbci	r19, 0xFF	; 255
    429c:	4f 4f       	sbci	r20, 0xFF	; 255
    429e:	5f 4f       	sbci	r21, 0xFF	; 255
    42a0:	04 c0       	rjmp	.+8      	; 0x42aa <__pack_f+0x14c>
    42a2:	21 5c       	subi	r18, 0xC1	; 193
    42a4:	3f 4f       	sbci	r19, 0xFF	; 255
    42a6:	4f 4f       	sbci	r20, 0xFF	; 255
    42a8:	5f 4f       	sbci	r21, 0xFF	; 255
    42aa:	57 ff       	sbrs	r21, 7
    42ac:	05 c0       	rjmp	.+10     	; 0x42b8 <__pack_f+0x15a>
    42ae:	56 95       	lsr	r21
    42b0:	47 95       	ror	r20
    42b2:	37 95       	ror	r19
    42b4:	27 95       	ror	r18
    42b6:	31 96       	adiw	r30, 0x01	; 1
    42b8:	87 e0       	ldi	r24, 0x07	; 7
    42ba:	56 95       	lsr	r21
    42bc:	47 95       	ror	r20
    42be:	37 95       	ror	r19
    42c0:	27 95       	ror	r18
    42c2:	8a 95       	dec	r24
    42c4:	d1 f7       	brne	.-12     	; 0x42ba <__pack_f+0x15c>
    42c6:	06 c0       	rjmp	.+12     	; 0x42d4 <__pack_f+0x176>
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	ef ef       	ldi	r30, 0xFF	; 255
    42d2:	f0 e0       	ldi	r31, 0x00	; 0
    42d4:	e2 2e       	mov	r14, r18
    42d6:	f3 2e       	mov	r15, r19
    42d8:	94 2f       	mov	r25, r20
    42da:	9f 77       	andi	r25, 0x7F	; 127
    42dc:	80 2f       	mov	r24, r16
    42de:	80 78       	andi	r24, 0x80	; 128
    42e0:	89 2b       	or	r24, r25
    42e2:	9e 2f       	mov	r25, r30
    42e4:	97 95       	ror	r25
    42e6:	99 27       	eor	r25, r25
    42e8:	97 95       	ror	r25
    42ea:	8f 77       	andi	r24, 0x7F	; 127
    42ec:	08 2f       	mov	r16, r24
    42ee:	09 2b       	or	r16, r25
    42f0:	9e 2f       	mov	r25, r30
    42f2:	96 95       	lsr	r25
    42f4:	81 2f       	mov	r24, r17
    42f6:	80 78       	andi	r24, 0x80	; 128
    42f8:	89 2b       	or	r24, r25
    42fa:	97 94       	ror	r9
    42fc:	99 24       	eor	r9, r9
    42fe:	97 94       	ror	r9
    4300:	8f 77       	andi	r24, 0x7F	; 127
    4302:	18 2f       	mov	r17, r24
    4304:	19 29       	or	r17, r9
    4306:	c8 01       	movw	r24, r16
    4308:	b7 01       	movw	r22, r14
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	bf 90       	pop	r11
    4318:	af 90       	pop	r10
    431a:	9f 90       	pop	r9
    431c:	08 95       	ret

0000431e <__unpack_f>:
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	fc 01       	movw	r30, r24
    4324:	db 01       	movw	r26, r22
    4326:	20 81       	ld	r18, Z
    4328:	31 81       	ldd	r19, Z+1	; 0x01
    432a:	92 81       	ldd	r25, Z+2	; 0x02
    432c:	49 2f       	mov	r20, r25
    432e:	4f 77       	andi	r20, 0x7F	; 127
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	99 1f       	adc	r25, r25
    4334:	99 27       	eor	r25, r25
    4336:	99 1f       	adc	r25, r25
    4338:	83 81       	ldd	r24, Z+3	; 0x03
    433a:	e8 2f       	mov	r30, r24
    433c:	ee 0f       	add	r30, r30
    433e:	e9 2b       	or	r30, r25
    4340:	6e 2f       	mov	r22, r30
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	88 1f       	adc	r24, r24
    4346:	88 27       	eor	r24, r24
    4348:	88 1f       	adc	r24, r24
    434a:	ed 01       	movw	r28, r26
    434c:	89 83       	std	Y+1, r24	; 0x01
    434e:	ee 23       	and	r30, r30
    4350:	71 f5       	brne	.+92     	; 0x43ae <__unpack_f+0x90>
    4352:	21 15       	cp	r18, r1
    4354:	31 05       	cpc	r19, r1
    4356:	41 05       	cpc	r20, r1
    4358:	51 05       	cpc	r21, r1
    435a:	11 f4       	brne	.+4      	; 0x4360 <__unpack_f+0x42>
    435c:	82 e0       	ldi	r24, 0x02	; 2
    435e:	2f c0       	rjmp	.+94     	; 0x43be <__unpack_f+0xa0>
    4360:	6e 57       	subi	r22, 0x7E	; 126
    4362:	70 40       	sbci	r23, 0x00	; 0
    4364:	fd 01       	movw	r30, r26
    4366:	73 83       	std	Z+3, r23	; 0x03
    4368:	62 83       	std	Z+2, r22	; 0x02
    436a:	67 e0       	ldi	r22, 0x07	; 7
    436c:	22 0f       	add	r18, r18
    436e:	33 1f       	adc	r19, r19
    4370:	44 1f       	adc	r20, r20
    4372:	55 1f       	adc	r21, r21
    4374:	6a 95       	dec	r22
    4376:	d1 f7       	brne	.-12     	; 0x436c <__unpack_f+0x4e>
    4378:	83 e0       	ldi	r24, 0x03	; 3
    437a:	8c 93       	st	X, r24
    437c:	0a c0       	rjmp	.+20     	; 0x4392 <__unpack_f+0x74>
    437e:	22 0f       	add	r18, r18
    4380:	33 1f       	adc	r19, r19
    4382:	44 1f       	adc	r20, r20
    4384:	55 1f       	adc	r21, r21
    4386:	ed 01       	movw	r28, r26
    4388:	8a 81       	ldd	r24, Y+2	; 0x02
    438a:	9b 81       	ldd	r25, Y+3	; 0x03
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	9b 83       	std	Y+3, r25	; 0x03
    4390:	8a 83       	std	Y+2, r24	; 0x02
    4392:	20 30       	cpi	r18, 0x00	; 0
    4394:	e0 e0       	ldi	r30, 0x00	; 0
    4396:	3e 07       	cpc	r19, r30
    4398:	e0 e0       	ldi	r30, 0x00	; 0
    439a:	4e 07       	cpc	r20, r30
    439c:	e0 e4       	ldi	r30, 0x40	; 64
    439e:	5e 07       	cpc	r21, r30
    43a0:	70 f3       	brcs	.-36     	; 0x437e <__unpack_f+0x60>
    43a2:	ed 01       	movw	r28, r26
    43a4:	2c 83       	std	Y+4, r18	; 0x04
    43a6:	3d 83       	std	Y+5, r19	; 0x05
    43a8:	4e 83       	std	Y+6, r20	; 0x06
    43aa:	5f 83       	std	Y+7, r21	; 0x07
    43ac:	25 c0       	rjmp	.+74     	; 0x43f8 <__unpack_f+0xda>
    43ae:	ef 3f       	cpi	r30, 0xFF	; 255
    43b0:	79 f4       	brne	.+30     	; 0x43d0 <__unpack_f+0xb2>
    43b2:	21 15       	cp	r18, r1
    43b4:	31 05       	cpc	r19, r1
    43b6:	41 05       	cpc	r20, r1
    43b8:	51 05       	cpc	r21, r1
    43ba:	19 f4       	brne	.+6      	; 0x43c2 <__unpack_f+0xa4>
    43bc:	84 e0       	ldi	r24, 0x04	; 4
    43be:	8c 93       	st	X, r24
    43c0:	1b c0       	rjmp	.+54     	; 0x43f8 <__unpack_f+0xda>
    43c2:	44 ff       	sbrs	r20, 4
    43c4:	03 c0       	rjmp	.+6      	; 0x43cc <__unpack_f+0xae>
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	8c 93       	st	X, r24
    43ca:	11 c0       	rjmp	.+34     	; 0x43ee <__unpack_f+0xd0>
    43cc:	1c 92       	st	X, r1
    43ce:	0f c0       	rjmp	.+30     	; 0x43ee <__unpack_f+0xd0>
    43d0:	6f 57       	subi	r22, 0x7F	; 127
    43d2:	70 40       	sbci	r23, 0x00	; 0
    43d4:	ed 01       	movw	r28, r26
    43d6:	7b 83       	std	Y+3, r23	; 0x03
    43d8:	6a 83       	std	Y+2, r22	; 0x02
    43da:	83 e0       	ldi	r24, 0x03	; 3
    43dc:	8c 93       	st	X, r24
    43de:	87 e0       	ldi	r24, 0x07	; 7
    43e0:	22 0f       	add	r18, r18
    43e2:	33 1f       	adc	r19, r19
    43e4:	44 1f       	adc	r20, r20
    43e6:	55 1f       	adc	r21, r21
    43e8:	8a 95       	dec	r24
    43ea:	d1 f7       	brne	.-12     	; 0x43e0 <__unpack_f+0xc2>
    43ec:	50 64       	ori	r21, 0x40	; 64
    43ee:	fd 01       	movw	r30, r26
    43f0:	24 83       	std	Z+4, r18	; 0x04
    43f2:	35 83       	std	Z+5, r19	; 0x05
    43f4:	46 83       	std	Z+6, r20	; 0x06
    43f6:	57 83       	std	Z+7, r21	; 0x07
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	08 95       	ret

000043fe <__udivmodhi4>:
    43fe:	aa 1b       	sub	r26, r26
    4400:	bb 1b       	sub	r27, r27
    4402:	51 e1       	ldi	r21, 0x11	; 17
    4404:	07 c0       	rjmp	.+14     	; 0x4414 <__udivmodhi4_ep>

00004406 <__udivmodhi4_loop>:
    4406:	aa 1f       	adc	r26, r26
    4408:	bb 1f       	adc	r27, r27
    440a:	a6 17       	cp	r26, r22
    440c:	b7 07       	cpc	r27, r23
    440e:	10 f0       	brcs	.+4      	; 0x4414 <__udivmodhi4_ep>
    4410:	a6 1b       	sub	r26, r22
    4412:	b7 0b       	sbc	r27, r23

00004414 <__udivmodhi4_ep>:
    4414:	88 1f       	adc	r24, r24
    4416:	99 1f       	adc	r25, r25
    4418:	5a 95       	dec	r21
    441a:	a9 f7       	brne	.-22     	; 0x4406 <__udivmodhi4_loop>
    441c:	80 95       	com	r24
    441e:	90 95       	com	r25
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	08 95       	ret

00004426 <__divmodhi4>:
    4426:	97 fb       	bst	r25, 7
    4428:	09 2e       	mov	r0, r25
    442a:	07 26       	eor	r0, r23
    442c:	0a d0       	rcall	.+20     	; 0x4442 <__divmodhi4_neg1>
    442e:	77 fd       	sbrc	r23, 7
    4430:	04 d0       	rcall	.+8      	; 0x443a <__divmodhi4_neg2>
    4432:	e5 df       	rcall	.-54     	; 0x43fe <__udivmodhi4>
    4434:	06 d0       	rcall	.+12     	; 0x4442 <__divmodhi4_neg1>
    4436:	00 20       	and	r0, r0
    4438:	1a f4       	brpl	.+6      	; 0x4440 <__divmodhi4_exit>

0000443a <__divmodhi4_neg2>:
    443a:	70 95       	com	r23
    443c:	61 95       	neg	r22
    443e:	7f 4f       	sbci	r23, 0xFF	; 255

00004440 <__divmodhi4_exit>:
    4440:	08 95       	ret

00004442 <__divmodhi4_neg1>:
    4442:	f6 f7       	brtc	.-4      	; 0x4440 <__divmodhi4_exit>
    4444:	90 95       	com	r25
    4446:	81 95       	neg	r24
    4448:	9f 4f       	sbci	r25, 0xFF	; 255
    444a:	08 95       	ret

0000444c <__prologue_saves__>:
    444c:	2f 92       	push	r2
    444e:	3f 92       	push	r3
    4450:	4f 92       	push	r4
    4452:	5f 92       	push	r5
    4454:	6f 92       	push	r6
    4456:	7f 92       	push	r7
    4458:	8f 92       	push	r8
    445a:	9f 92       	push	r9
    445c:	af 92       	push	r10
    445e:	bf 92       	push	r11
    4460:	cf 92       	push	r12
    4462:	df 92       	push	r13
    4464:	ef 92       	push	r14
    4466:	ff 92       	push	r15
    4468:	0f 93       	push	r16
    446a:	1f 93       	push	r17
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	ca 1b       	sub	r28, r26
    4476:	db 0b       	sbc	r29, r27
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	cd bf       	out	0x3d, r28	; 61
    4482:	19 94       	eijmp

00004484 <__epilogue_restores__>:
    4484:	2a 88       	ldd	r2, Y+18	; 0x12
    4486:	39 88       	ldd	r3, Y+17	; 0x11
    4488:	48 88       	ldd	r4, Y+16	; 0x10
    448a:	5f 84       	ldd	r5, Y+15	; 0x0f
    448c:	6e 84       	ldd	r6, Y+14	; 0x0e
    448e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4490:	8c 84       	ldd	r8, Y+12	; 0x0c
    4492:	9b 84       	ldd	r9, Y+11	; 0x0b
    4494:	aa 84       	ldd	r10, Y+10	; 0x0a
    4496:	b9 84       	ldd	r11, Y+9	; 0x09
    4498:	c8 84       	ldd	r12, Y+8	; 0x08
    449a:	df 80       	ldd	r13, Y+7	; 0x07
    449c:	ee 80       	ldd	r14, Y+6	; 0x06
    449e:	fd 80       	ldd	r15, Y+5	; 0x05
    44a0:	0c 81       	ldd	r16, Y+4	; 0x04
    44a2:	1b 81       	ldd	r17, Y+3	; 0x03
    44a4:	aa 81       	ldd	r26, Y+2	; 0x02
    44a6:	b9 81       	ldd	r27, Y+1	; 0x01
    44a8:	ce 0f       	add	r28, r30
    44aa:	d1 1d       	adc	r29, r1
    44ac:	0f b6       	in	r0, 0x3f	; 63
    44ae:	f8 94       	cli
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	cd bf       	out	0x3d, r28	; 61
    44b6:	ed 01       	movw	r28, r26
    44b8:	08 95       	ret
    44ba:	f5 d0       	rcall	.+490    	; 0x46a6 <__fp_pscA>
    44bc:	58 f0       	brcs	.+22     	; 0x44d4 <__epilogue_restores__+0x50>
    44be:	80 e8       	ldi	r24, 0x80	; 128
    44c0:	91 e0       	ldi	r25, 0x01	; 1
    44c2:	09 f4       	brne	.+2      	; 0x44c6 <__epilogue_restores__+0x42>
    44c4:	9e ef       	ldi	r25, 0xFE	; 254
    44c6:	f6 d0       	rcall	.+492    	; 0x46b4 <__fp_pscB>
    44c8:	28 f0       	brcs	.+10     	; 0x44d4 <__epilogue_restores__+0x50>
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	51 e0       	ldi	r21, 0x01	; 1
    44ce:	59 f4       	brne	.+22     	; 0x44e6 <atan2+0xe>
    44d0:	5e ef       	ldi	r21, 0xFE	; 254
    44d2:	09 c0       	rjmp	.+18     	; 0x44e6 <atan2+0xe>
    44d4:	c0 c0       	rjmp	.+384    	; 0x4656 <__fp_nan>
    44d6:	28 c1       	rjmp	.+592    	; 0x4728 <__fp_zero>

000044d8 <atan2>:
    44d8:	e9 2f       	mov	r30, r25
    44da:	e0 78       	andi	r30, 0x80	; 128
    44dc:	03 d1       	rcall	.+518    	; 0x46e4 <__fp_split3>
    44de:	68 f3       	brcs	.-38     	; 0x44ba <__epilogue_restores__+0x36>
    44e0:	09 2e       	mov	r0, r25
    44e2:	05 2a       	or	r0, r21
    44e4:	c1 f3       	breq	.-16     	; 0x44d6 <__epilogue_restores__+0x52>
    44e6:	26 17       	cp	r18, r22
    44e8:	37 07       	cpc	r19, r23
    44ea:	48 07       	cpc	r20, r24
    44ec:	59 07       	cpc	r21, r25
    44ee:	38 f0       	brcs	.+14     	; 0x44fe <atan2+0x26>
    44f0:	0e 2e       	mov	r0, r30
    44f2:	07 f8       	bld	r0, 7
    44f4:	e0 25       	eor	r30, r0
    44f6:	69 f0       	breq	.+26     	; 0x4512 <atan2+0x3a>
    44f8:	e0 25       	eor	r30, r0
    44fa:	e0 64       	ori	r30, 0x40	; 64
    44fc:	0a c0       	rjmp	.+20     	; 0x4512 <atan2+0x3a>
    44fe:	ef 63       	ori	r30, 0x3F	; 63
    4500:	07 f8       	bld	r0, 7
    4502:	00 94       	com	r0
    4504:	07 fa       	bst	r0, 7
    4506:	db 01       	movw	r26, r22
    4508:	b9 01       	movw	r22, r18
    450a:	9d 01       	movw	r18, r26
    450c:	dc 01       	movw	r26, r24
    450e:	ca 01       	movw	r24, r20
    4510:	ad 01       	movw	r20, r26
    4512:	ef 93       	push	r30
    4514:	41 d0       	rcall	.+130    	; 0x4598 <__divsf3_pse>
    4516:	d5 d0       	rcall	.+426    	; 0x46c2 <__fp_round>
    4518:	0a d0       	rcall	.+20     	; 0x452e <atan>
    451a:	5f 91       	pop	r21
    451c:	55 23       	and	r21, r21
    451e:	31 f0       	breq	.+12     	; 0x452c <atan2+0x54>
    4520:	2b ed       	ldi	r18, 0xDB	; 219
    4522:	3f e0       	ldi	r19, 0x0F	; 15
    4524:	49 e4       	ldi	r20, 0x49	; 73
    4526:	50 fd       	sbrc	r21, 0
    4528:	49 ec       	ldi	r20, 0xC9	; 201
    452a:	71 c1       	rjmp	.+738    	; 0x480e <__addsf3>
    452c:	08 95       	ret

0000452e <atan>:
    452e:	df 93       	push	r29
    4530:	dd 27       	eor	r29, r29
    4532:	b9 2f       	mov	r27, r25
    4534:	bf 77       	andi	r27, 0x7F	; 127
    4536:	40 e8       	ldi	r20, 0x80	; 128
    4538:	5f e3       	ldi	r21, 0x3F	; 63
    453a:	16 16       	cp	r1, r22
    453c:	17 06       	cpc	r1, r23
    453e:	48 07       	cpc	r20, r24
    4540:	5b 07       	cpc	r21, r27
    4542:	10 f4       	brcc	.+4      	; 0x4548 <atan+0x1a>
    4544:	d9 2f       	mov	r29, r25
    4546:	f7 d0       	rcall	.+494    	; 0x4736 <inverse>
    4548:	9f 93       	push	r25
    454a:	8f 93       	push	r24
    454c:	7f 93       	push	r23
    454e:	6f 93       	push	r22
    4550:	5a d1       	rcall	.+692    	; 0x4806 <square>
    4552:	ee e4       	ldi	r30, 0x4E	; 78
    4554:	f1 e0       	ldi	r31, 0x01	; 1
    4556:	82 d0       	rcall	.+260    	; 0x465c <__fp_powser>
    4558:	b4 d0       	rcall	.+360    	; 0x46c2 <__fp_round>
    455a:	2f 91       	pop	r18
    455c:	3f 91       	pop	r19
    455e:	4f 91       	pop	r20
    4560:	5f 91       	pop	r21
    4562:	fa d0       	rcall	.+500    	; 0x4758 <__mulsf3x>
    4564:	dd 23       	and	r29, r29
    4566:	49 f0       	breq	.+18     	; 0x457a <atan+0x4c>
    4568:	90 58       	subi	r25, 0x80	; 128
    456a:	a2 ea       	ldi	r26, 0xA2	; 162
    456c:	2a ed       	ldi	r18, 0xDA	; 218
    456e:	3f e0       	ldi	r19, 0x0F	; 15
    4570:	49 ec       	ldi	r20, 0xC9	; 201
    4572:	5f e3       	ldi	r21, 0x3F	; 63
    4574:	d0 78       	andi	r29, 0x80	; 128
    4576:	5d 27       	eor	r21, r29
    4578:	5b d1       	rcall	.+694    	; 0x4830 <__addsf3x>
    457a:	df 91       	pop	r29
    457c:	a2 c0       	rjmp	.+324    	; 0x46c2 <__fp_round>
    457e:	9a d0       	rcall	.+308    	; 0x46b4 <__fp_pscB>
    4580:	40 f0       	brcs	.+16     	; 0x4592 <atan+0x64>
    4582:	91 d0       	rcall	.+290    	; 0x46a6 <__fp_pscA>
    4584:	30 f0       	brcs	.+12     	; 0x4592 <atan+0x64>
    4586:	21 f4       	brne	.+8      	; 0x4590 <atan+0x62>
    4588:	5f 3f       	cpi	r21, 0xFF	; 255
    458a:	19 f0       	breq	.+6      	; 0x4592 <atan+0x64>
    458c:	5e c0       	rjmp	.+188    	; 0x464a <__fp_inf>
    458e:	51 11       	cpse	r21, r1
    4590:	cc c0       	rjmp	.+408    	; 0x472a <__fp_szero>
    4592:	61 c0       	rjmp	.+194    	; 0x4656 <__fp_nan>

00004594 <__divsf3x>:
    4594:	a7 d0       	rcall	.+334    	; 0x46e4 <__fp_split3>
    4596:	98 f3       	brcs	.-26     	; 0x457e <atan+0x50>

00004598 <__divsf3_pse>:
    4598:	99 23       	and	r25, r25
    459a:	c9 f3       	breq	.-14     	; 0x458e <atan+0x60>
    459c:	55 23       	and	r21, r21
    459e:	b1 f3       	breq	.-20     	; 0x458c <atan+0x5e>
    45a0:	95 1b       	sub	r25, r21
    45a2:	55 0b       	sbc	r21, r21
    45a4:	bb 27       	eor	r27, r27
    45a6:	aa 27       	eor	r26, r26
    45a8:	62 17       	cp	r22, r18
    45aa:	73 07       	cpc	r23, r19
    45ac:	84 07       	cpc	r24, r20
    45ae:	38 f0       	brcs	.+14     	; 0x45be <__divsf3_pse+0x26>
    45b0:	9f 5f       	subi	r25, 0xFF	; 255
    45b2:	5f 4f       	sbci	r21, 0xFF	; 255
    45b4:	22 0f       	add	r18, r18
    45b6:	33 1f       	adc	r19, r19
    45b8:	44 1f       	adc	r20, r20
    45ba:	aa 1f       	adc	r26, r26
    45bc:	a9 f3       	breq	.-22     	; 0x45a8 <__divsf3_pse+0x10>
    45be:	33 d0       	rcall	.+102    	; 0x4626 <__divsf3_pse+0x8e>
    45c0:	0e 2e       	mov	r0, r30
    45c2:	3a f0       	brmi	.+14     	; 0x45d2 <__divsf3_pse+0x3a>
    45c4:	e0 e8       	ldi	r30, 0x80	; 128
    45c6:	30 d0       	rcall	.+96     	; 0x4628 <__divsf3_pse+0x90>
    45c8:	91 50       	subi	r25, 0x01	; 1
    45ca:	50 40       	sbci	r21, 0x00	; 0
    45cc:	e6 95       	lsr	r30
    45ce:	00 1c       	adc	r0, r0
    45d0:	ca f7       	brpl	.-14     	; 0x45c4 <__divsf3_pse+0x2c>
    45d2:	29 d0       	rcall	.+82     	; 0x4626 <__divsf3_pse+0x8e>
    45d4:	fe 2f       	mov	r31, r30
    45d6:	27 d0       	rcall	.+78     	; 0x4626 <__divsf3_pse+0x8e>
    45d8:	66 0f       	add	r22, r22
    45da:	77 1f       	adc	r23, r23
    45dc:	88 1f       	adc	r24, r24
    45de:	bb 1f       	adc	r27, r27
    45e0:	26 17       	cp	r18, r22
    45e2:	37 07       	cpc	r19, r23
    45e4:	48 07       	cpc	r20, r24
    45e6:	ab 07       	cpc	r26, r27
    45e8:	b0 e8       	ldi	r27, 0x80	; 128
    45ea:	09 f0       	breq	.+2      	; 0x45ee <__divsf3_pse+0x56>
    45ec:	bb 0b       	sbc	r27, r27
    45ee:	80 2d       	mov	r24, r0
    45f0:	bf 01       	movw	r22, r30
    45f2:	ff 27       	eor	r31, r31
    45f4:	93 58       	subi	r25, 0x83	; 131
    45f6:	5f 4f       	sbci	r21, 0xFF	; 255
    45f8:	2a f0       	brmi	.+10     	; 0x4604 <__divsf3_pse+0x6c>
    45fa:	9e 3f       	cpi	r25, 0xFE	; 254
    45fc:	51 05       	cpc	r21, r1
    45fe:	68 f0       	brcs	.+26     	; 0x461a <__divsf3_pse+0x82>
    4600:	24 c0       	rjmp	.+72     	; 0x464a <__fp_inf>
    4602:	93 c0       	rjmp	.+294    	; 0x472a <__fp_szero>
    4604:	5f 3f       	cpi	r21, 0xFF	; 255
    4606:	ec f3       	brlt	.-6      	; 0x4602 <__divsf3_pse+0x6a>
    4608:	98 3e       	cpi	r25, 0xE8	; 232
    460a:	dc f3       	brlt	.-10     	; 0x4602 <__divsf3_pse+0x6a>
    460c:	86 95       	lsr	r24
    460e:	77 95       	ror	r23
    4610:	67 95       	ror	r22
    4612:	b7 95       	ror	r27
    4614:	f7 95       	ror	r31
    4616:	9f 5f       	subi	r25, 0xFF	; 255
    4618:	c9 f7       	brne	.-14     	; 0x460c <__divsf3_pse+0x74>
    461a:	88 0f       	add	r24, r24
    461c:	91 1d       	adc	r25, r1
    461e:	96 95       	lsr	r25
    4620:	87 95       	ror	r24
    4622:	97 f9       	bld	r25, 7
    4624:	08 95       	ret
    4626:	e1 e0       	ldi	r30, 0x01	; 1
    4628:	66 0f       	add	r22, r22
    462a:	77 1f       	adc	r23, r23
    462c:	88 1f       	adc	r24, r24
    462e:	bb 1f       	adc	r27, r27
    4630:	62 17       	cp	r22, r18
    4632:	73 07       	cpc	r23, r19
    4634:	84 07       	cpc	r24, r20
    4636:	ba 07       	cpc	r27, r26
    4638:	20 f0       	brcs	.+8      	; 0x4642 <__divsf3_pse+0xaa>
    463a:	62 1b       	sub	r22, r18
    463c:	73 0b       	sbc	r23, r19
    463e:	84 0b       	sbc	r24, r20
    4640:	ba 0b       	sbc	r27, r26
    4642:	ee 1f       	adc	r30, r30
    4644:	88 f7       	brcc	.-30     	; 0x4628 <__divsf3_pse+0x90>
    4646:	e0 95       	com	r30
    4648:	08 95       	ret

0000464a <__fp_inf>:
    464a:	97 f9       	bld	r25, 7
    464c:	9f 67       	ori	r25, 0x7F	; 127
    464e:	80 e8       	ldi	r24, 0x80	; 128
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	08 95       	ret

00004656 <__fp_nan>:
    4656:	9f ef       	ldi	r25, 0xFF	; 255
    4658:	80 ec       	ldi	r24, 0xC0	; 192
    465a:	08 95       	ret

0000465c <__fp_powser>:
    465c:	df 93       	push	r29
    465e:	cf 93       	push	r28
    4660:	1f 93       	push	r17
    4662:	0f 93       	push	r16
    4664:	ff 92       	push	r15
    4666:	ef 92       	push	r14
    4668:	df 92       	push	r13
    466a:	7b 01       	movw	r14, r22
    466c:	8c 01       	movw	r16, r24
    466e:	68 94       	set
    4670:	05 c0       	rjmp	.+10     	; 0x467c <__fp_powser+0x20>
    4672:	da 2e       	mov	r13, r26
    4674:	ef 01       	movw	r28, r30
    4676:	70 d0       	rcall	.+224    	; 0x4758 <__mulsf3x>
    4678:	fe 01       	movw	r30, r28
    467a:	e8 94       	clt
    467c:	a5 91       	lpm	r26, Z+
    467e:	25 91       	lpm	r18, Z+
    4680:	35 91       	lpm	r19, Z+
    4682:	45 91       	lpm	r20, Z+
    4684:	55 91       	lpm	r21, Z+
    4686:	ae f3       	brts	.-22     	; 0x4672 <__fp_powser+0x16>
    4688:	ef 01       	movw	r28, r30
    468a:	d2 d0       	rcall	.+420    	; 0x4830 <__addsf3x>
    468c:	fe 01       	movw	r30, r28
    468e:	97 01       	movw	r18, r14
    4690:	a8 01       	movw	r20, r16
    4692:	da 94       	dec	r13
    4694:	79 f7       	brne	.-34     	; 0x4674 <__fp_powser+0x18>
    4696:	df 90       	pop	r13
    4698:	ef 90       	pop	r14
    469a:	ff 90       	pop	r15
    469c:	0f 91       	pop	r16
    469e:	1f 91       	pop	r17
    46a0:	cf 91       	pop	r28
    46a2:	df 91       	pop	r29
    46a4:	08 95       	ret

000046a6 <__fp_pscA>:
    46a6:	00 24       	eor	r0, r0
    46a8:	0a 94       	dec	r0
    46aa:	16 16       	cp	r1, r22
    46ac:	17 06       	cpc	r1, r23
    46ae:	18 06       	cpc	r1, r24
    46b0:	09 06       	cpc	r0, r25
    46b2:	08 95       	ret

000046b4 <__fp_pscB>:
    46b4:	00 24       	eor	r0, r0
    46b6:	0a 94       	dec	r0
    46b8:	12 16       	cp	r1, r18
    46ba:	13 06       	cpc	r1, r19
    46bc:	14 06       	cpc	r1, r20
    46be:	05 06       	cpc	r0, r21
    46c0:	08 95       	ret

000046c2 <__fp_round>:
    46c2:	09 2e       	mov	r0, r25
    46c4:	03 94       	inc	r0
    46c6:	00 0c       	add	r0, r0
    46c8:	11 f4       	brne	.+4      	; 0x46ce <__fp_round+0xc>
    46ca:	88 23       	and	r24, r24
    46cc:	52 f0       	brmi	.+20     	; 0x46e2 <__fp_round+0x20>
    46ce:	bb 0f       	add	r27, r27
    46d0:	40 f4       	brcc	.+16     	; 0x46e2 <__fp_round+0x20>
    46d2:	bf 2b       	or	r27, r31
    46d4:	11 f4       	brne	.+4      	; 0x46da <__fp_round+0x18>
    46d6:	60 ff       	sbrs	r22, 0
    46d8:	04 c0       	rjmp	.+8      	; 0x46e2 <__fp_round+0x20>
    46da:	6f 5f       	subi	r22, 0xFF	; 255
    46dc:	7f 4f       	sbci	r23, 0xFF	; 255
    46de:	8f 4f       	sbci	r24, 0xFF	; 255
    46e0:	9f 4f       	sbci	r25, 0xFF	; 255
    46e2:	08 95       	ret

000046e4 <__fp_split3>:
    46e4:	57 fd       	sbrc	r21, 7
    46e6:	90 58       	subi	r25, 0x80	; 128
    46e8:	44 0f       	add	r20, r20
    46ea:	55 1f       	adc	r21, r21
    46ec:	59 f0       	breq	.+22     	; 0x4704 <__fp_splitA+0x10>
    46ee:	5f 3f       	cpi	r21, 0xFF	; 255
    46f0:	71 f0       	breq	.+28     	; 0x470e <__fp_splitA+0x1a>
    46f2:	47 95       	ror	r20

000046f4 <__fp_splitA>:
    46f4:	88 0f       	add	r24, r24
    46f6:	97 fb       	bst	r25, 7
    46f8:	99 1f       	adc	r25, r25
    46fa:	61 f0       	breq	.+24     	; 0x4714 <__fp_splitA+0x20>
    46fc:	9f 3f       	cpi	r25, 0xFF	; 255
    46fe:	79 f0       	breq	.+30     	; 0x471e <__fp_splitA+0x2a>
    4700:	87 95       	ror	r24
    4702:	08 95       	ret
    4704:	12 16       	cp	r1, r18
    4706:	13 06       	cpc	r1, r19
    4708:	14 06       	cpc	r1, r20
    470a:	55 1f       	adc	r21, r21
    470c:	f2 cf       	rjmp	.-28     	; 0x46f2 <__fp_split3+0xe>
    470e:	46 95       	lsr	r20
    4710:	f1 df       	rcall	.-30     	; 0x46f4 <__fp_splitA>
    4712:	08 c0       	rjmp	.+16     	; 0x4724 <__fp_splitA+0x30>
    4714:	16 16       	cp	r1, r22
    4716:	17 06       	cpc	r1, r23
    4718:	18 06       	cpc	r1, r24
    471a:	99 1f       	adc	r25, r25
    471c:	f1 cf       	rjmp	.-30     	; 0x4700 <__fp_splitA+0xc>
    471e:	86 95       	lsr	r24
    4720:	71 05       	cpc	r23, r1
    4722:	61 05       	cpc	r22, r1
    4724:	08 94       	sec
    4726:	08 95       	ret

00004728 <__fp_zero>:
    4728:	e8 94       	clt

0000472a <__fp_szero>:
    472a:	bb 27       	eor	r27, r27
    472c:	66 27       	eor	r22, r22
    472e:	77 27       	eor	r23, r23
    4730:	cb 01       	movw	r24, r22
    4732:	97 f9       	bld	r25, 7
    4734:	08 95       	ret

00004736 <inverse>:
    4736:	9b 01       	movw	r18, r22
    4738:	ac 01       	movw	r20, r24
    473a:	60 e0       	ldi	r22, 0x00	; 0
    473c:	70 e0       	ldi	r23, 0x00	; 0
    473e:	80 e8       	ldi	r24, 0x80	; 128
    4740:	9f e3       	ldi	r25, 0x3F	; 63
    4742:	c9 c0       	rjmp	.+402    	; 0x48d6 <__divsf3>
    4744:	b0 df       	rcall	.-160    	; 0x46a6 <__fp_pscA>
    4746:	28 f0       	brcs	.+10     	; 0x4752 <inverse+0x1c>
    4748:	b5 df       	rcall	.-150    	; 0x46b4 <__fp_pscB>
    474a:	18 f0       	brcs	.+6      	; 0x4752 <inverse+0x1c>
    474c:	95 23       	and	r25, r21
    474e:	09 f0       	breq	.+2      	; 0x4752 <inverse+0x1c>
    4750:	7c cf       	rjmp	.-264    	; 0x464a <__fp_inf>
    4752:	81 cf       	rjmp	.-254    	; 0x4656 <__fp_nan>
    4754:	11 24       	eor	r1, r1
    4756:	e9 cf       	rjmp	.-46     	; 0x472a <__fp_szero>

00004758 <__mulsf3x>:
    4758:	c5 df       	rcall	.-118    	; 0x46e4 <__fp_split3>
    475a:	a0 f3       	brcs	.-24     	; 0x4744 <inverse+0xe>

0000475c <__mulsf3_pse>:
    475c:	95 9f       	mul	r25, r21
    475e:	d1 f3       	breq	.-12     	; 0x4754 <inverse+0x1e>
    4760:	95 0f       	add	r25, r21
    4762:	50 e0       	ldi	r21, 0x00	; 0
    4764:	55 1f       	adc	r21, r21
    4766:	62 9f       	mul	r22, r18
    4768:	f0 01       	movw	r30, r0
    476a:	72 9f       	mul	r23, r18
    476c:	bb 27       	eor	r27, r27
    476e:	f0 0d       	add	r31, r0
    4770:	b1 1d       	adc	r27, r1
    4772:	63 9f       	mul	r22, r19
    4774:	aa 27       	eor	r26, r26
    4776:	f0 0d       	add	r31, r0
    4778:	b1 1d       	adc	r27, r1
    477a:	aa 1f       	adc	r26, r26
    477c:	64 9f       	mul	r22, r20
    477e:	66 27       	eor	r22, r22
    4780:	b0 0d       	add	r27, r0
    4782:	a1 1d       	adc	r26, r1
    4784:	66 1f       	adc	r22, r22
    4786:	82 9f       	mul	r24, r18
    4788:	22 27       	eor	r18, r18
    478a:	b0 0d       	add	r27, r0
    478c:	a1 1d       	adc	r26, r1
    478e:	62 1f       	adc	r22, r18
    4790:	73 9f       	mul	r23, r19
    4792:	b0 0d       	add	r27, r0
    4794:	a1 1d       	adc	r26, r1
    4796:	62 1f       	adc	r22, r18
    4798:	83 9f       	mul	r24, r19
    479a:	a0 0d       	add	r26, r0
    479c:	61 1d       	adc	r22, r1
    479e:	22 1f       	adc	r18, r18
    47a0:	74 9f       	mul	r23, r20
    47a2:	33 27       	eor	r19, r19
    47a4:	a0 0d       	add	r26, r0
    47a6:	61 1d       	adc	r22, r1
    47a8:	23 1f       	adc	r18, r19
    47aa:	84 9f       	mul	r24, r20
    47ac:	60 0d       	add	r22, r0
    47ae:	21 1d       	adc	r18, r1
    47b0:	82 2f       	mov	r24, r18
    47b2:	76 2f       	mov	r23, r22
    47b4:	6a 2f       	mov	r22, r26
    47b6:	11 24       	eor	r1, r1
    47b8:	9f 57       	subi	r25, 0x7F	; 127
    47ba:	50 40       	sbci	r21, 0x00	; 0
    47bc:	8a f0       	brmi	.+34     	; 0x47e0 <__mulsf3_pse+0x84>
    47be:	e1 f0       	breq	.+56     	; 0x47f8 <__mulsf3_pse+0x9c>
    47c0:	88 23       	and	r24, r24
    47c2:	4a f0       	brmi	.+18     	; 0x47d6 <__mulsf3_pse+0x7a>
    47c4:	ee 0f       	add	r30, r30
    47c6:	ff 1f       	adc	r31, r31
    47c8:	bb 1f       	adc	r27, r27
    47ca:	66 1f       	adc	r22, r22
    47cc:	77 1f       	adc	r23, r23
    47ce:	88 1f       	adc	r24, r24
    47d0:	91 50       	subi	r25, 0x01	; 1
    47d2:	50 40       	sbci	r21, 0x00	; 0
    47d4:	a9 f7       	brne	.-22     	; 0x47c0 <__mulsf3_pse+0x64>
    47d6:	9e 3f       	cpi	r25, 0xFE	; 254
    47d8:	51 05       	cpc	r21, r1
    47da:	70 f0       	brcs	.+28     	; 0x47f8 <__mulsf3_pse+0x9c>
    47dc:	36 cf       	rjmp	.-404    	; 0x464a <__fp_inf>
    47de:	a5 cf       	rjmp	.-182    	; 0x472a <__fp_szero>
    47e0:	5f 3f       	cpi	r21, 0xFF	; 255
    47e2:	ec f3       	brlt	.-6      	; 0x47de <__mulsf3_pse+0x82>
    47e4:	98 3e       	cpi	r25, 0xE8	; 232
    47e6:	dc f3       	brlt	.-10     	; 0x47de <__mulsf3_pse+0x82>
    47e8:	86 95       	lsr	r24
    47ea:	77 95       	ror	r23
    47ec:	67 95       	ror	r22
    47ee:	b7 95       	ror	r27
    47f0:	f7 95       	ror	r31
    47f2:	e7 95       	ror	r30
    47f4:	9f 5f       	subi	r25, 0xFF	; 255
    47f6:	c1 f7       	brne	.-16     	; 0x47e8 <__mulsf3_pse+0x8c>
    47f8:	fe 2b       	or	r31, r30
    47fa:	88 0f       	add	r24, r24
    47fc:	91 1d       	adc	r25, r1
    47fe:	96 95       	lsr	r25
    4800:	87 95       	ror	r24
    4802:	97 f9       	bld	r25, 7
    4804:	08 95       	ret

00004806 <square>:
    4806:	9b 01       	movw	r18, r22
    4808:	ac 01       	movw	r20, r24
    480a:	ac ca       	rjmp	.-2728   	; 0x3d64 <__mulsf3>

0000480c <__subsf3>:
    480c:	50 58       	subi	r21, 0x80	; 128

0000480e <__addsf3>:
    480e:	bb 27       	eor	r27, r27
    4810:	aa 27       	eor	r26, r26
    4812:	0e d0       	rcall	.+28     	; 0x4830 <__addsf3x>
    4814:	56 cf       	rjmp	.-340    	; 0x46c2 <__fp_round>
    4816:	47 df       	rcall	.-370    	; 0x46a6 <__fp_pscA>
    4818:	30 f0       	brcs	.+12     	; 0x4826 <__addsf3+0x18>
    481a:	4c df       	rcall	.-360    	; 0x46b4 <__fp_pscB>
    481c:	20 f0       	brcs	.+8      	; 0x4826 <__addsf3+0x18>
    481e:	31 f4       	brne	.+12     	; 0x482c <__addsf3+0x1e>
    4820:	9f 3f       	cpi	r25, 0xFF	; 255
    4822:	11 f4       	brne	.+4      	; 0x4828 <__addsf3+0x1a>
    4824:	1e f4       	brtc	.+6      	; 0x482c <__addsf3+0x1e>
    4826:	17 cf       	rjmp	.-466    	; 0x4656 <__fp_nan>
    4828:	0e f4       	brtc	.+2      	; 0x482c <__addsf3+0x1e>
    482a:	e0 95       	com	r30
    482c:	e7 fb       	bst	r30, 7
    482e:	0d cf       	rjmp	.-486    	; 0x464a <__fp_inf>

00004830 <__addsf3x>:
    4830:	e9 2f       	mov	r30, r25
    4832:	58 df       	rcall	.-336    	; 0x46e4 <__fp_split3>
    4834:	80 f3       	brcs	.-32     	; 0x4816 <__addsf3+0x8>
    4836:	ba 17       	cp	r27, r26
    4838:	62 07       	cpc	r22, r18
    483a:	73 07       	cpc	r23, r19
    483c:	84 07       	cpc	r24, r20
    483e:	95 07       	cpc	r25, r21
    4840:	18 f0       	brcs	.+6      	; 0x4848 <__addsf3x+0x18>
    4842:	71 f4       	brne	.+28     	; 0x4860 <__addsf3x+0x30>
    4844:	9e f5       	brtc	.+102    	; 0x48ac <__addsf3x+0x7c>
    4846:	70 cf       	rjmp	.-288    	; 0x4728 <__fp_zero>
    4848:	0e f4       	brtc	.+2      	; 0x484c <__addsf3x+0x1c>
    484a:	e0 95       	com	r30
    484c:	0b 2e       	mov	r0, r27
    484e:	ba 2f       	mov	r27, r26
    4850:	a0 2d       	mov	r26, r0
    4852:	0b 01       	movw	r0, r22
    4854:	b9 01       	movw	r22, r18
    4856:	90 01       	movw	r18, r0
    4858:	0c 01       	movw	r0, r24
    485a:	ca 01       	movw	r24, r20
    485c:	a0 01       	movw	r20, r0
    485e:	11 24       	eor	r1, r1
    4860:	ff 27       	eor	r31, r31
    4862:	59 1b       	sub	r21, r25
    4864:	99 f0       	breq	.+38     	; 0x488c <__addsf3x+0x5c>
    4866:	59 3f       	cpi	r21, 0xF9	; 249
    4868:	50 f4       	brcc	.+20     	; 0x487e <__addsf3x+0x4e>
    486a:	50 3e       	cpi	r21, 0xE0	; 224
    486c:	68 f1       	brcs	.+90     	; 0x48c8 <__addsf3x+0x98>
    486e:	1a 16       	cp	r1, r26
    4870:	f0 40       	sbci	r31, 0x00	; 0
    4872:	a2 2f       	mov	r26, r18
    4874:	23 2f       	mov	r18, r19
    4876:	34 2f       	mov	r19, r20
    4878:	44 27       	eor	r20, r20
    487a:	58 5f       	subi	r21, 0xF8	; 248
    487c:	f3 cf       	rjmp	.-26     	; 0x4864 <__addsf3x+0x34>
    487e:	46 95       	lsr	r20
    4880:	37 95       	ror	r19
    4882:	27 95       	ror	r18
    4884:	a7 95       	ror	r26
    4886:	f0 40       	sbci	r31, 0x00	; 0
    4888:	53 95       	inc	r21
    488a:	c9 f7       	brne	.-14     	; 0x487e <__addsf3x+0x4e>
    488c:	7e f4       	brtc	.+30     	; 0x48ac <__addsf3x+0x7c>
    488e:	1f 16       	cp	r1, r31
    4890:	ba 0b       	sbc	r27, r26
    4892:	62 0b       	sbc	r22, r18
    4894:	73 0b       	sbc	r23, r19
    4896:	84 0b       	sbc	r24, r20
    4898:	ba f0       	brmi	.+46     	; 0x48c8 <__addsf3x+0x98>
    489a:	91 50       	subi	r25, 0x01	; 1
    489c:	a1 f0       	breq	.+40     	; 0x48c6 <__addsf3x+0x96>
    489e:	ff 0f       	add	r31, r31
    48a0:	bb 1f       	adc	r27, r27
    48a2:	66 1f       	adc	r22, r22
    48a4:	77 1f       	adc	r23, r23
    48a6:	88 1f       	adc	r24, r24
    48a8:	c2 f7       	brpl	.-16     	; 0x489a <__addsf3x+0x6a>
    48aa:	0e c0       	rjmp	.+28     	; 0x48c8 <__addsf3x+0x98>
    48ac:	ba 0f       	add	r27, r26
    48ae:	62 1f       	adc	r22, r18
    48b0:	73 1f       	adc	r23, r19
    48b2:	84 1f       	adc	r24, r20
    48b4:	48 f4       	brcc	.+18     	; 0x48c8 <__addsf3x+0x98>
    48b6:	87 95       	ror	r24
    48b8:	77 95       	ror	r23
    48ba:	67 95       	ror	r22
    48bc:	b7 95       	ror	r27
    48be:	f7 95       	ror	r31
    48c0:	9e 3f       	cpi	r25, 0xFE	; 254
    48c2:	08 f0       	brcs	.+2      	; 0x48c6 <__addsf3x+0x96>
    48c4:	b3 cf       	rjmp	.-154    	; 0x482c <__addsf3+0x1e>
    48c6:	93 95       	inc	r25
    48c8:	88 0f       	add	r24, r24
    48ca:	08 f0       	brcs	.+2      	; 0x48ce <__addsf3x+0x9e>
    48cc:	99 27       	eor	r25, r25
    48ce:	ee 0f       	add	r30, r30
    48d0:	97 95       	ror	r25
    48d2:	87 95       	ror	r24
    48d4:	08 95       	ret

000048d6 <__divsf3>:
    48d6:	5e de       	rcall	.-836    	; 0x4594 <__divsf3x>
    48d8:	f4 ce       	rjmp	.-536    	; 0x46c2 <__fp_round>

000048da <_exit>:
    48da:	ff cf       	rjmp	.-2      	; 0x48da <_exit>
