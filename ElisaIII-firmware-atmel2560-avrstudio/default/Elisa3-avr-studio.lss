
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800200  00004866  000048fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  0080031e  0080031e  00004a18  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  00004a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007381  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d53  00000000  00000000  00007561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003adb  00000000  00000000  000082b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001417  00000000  00000000  0000bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003caf  00000000  00000000  0000d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000590  00000000  00000000  00010e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cdf  00000000  00000000  000113e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015db  00000000  00000000  000120c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000106  00000000  00000000  000136a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000248  00000000  00000000  000137a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_32>
      84:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_42>
      ac:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	f8 0f       	add	r31, r24
      e6:	c6 0f       	add	r28, r22
      e8:	5f 0f       	add	r21, r31
      ea:	29 0f       	add	r18, r25
      ec:	d0 0e       	add	r13, r16
      ee:	b9 0e       	add	r11, r25
      f0:	62 0e       	add	r6, r18
      f2:	30 0e       	add	r3, r16
      f4:	c2 0d       	add	r28, r2
      f6:	88 0d       	add	r24, r8
      f8:	24 0b       	sbc	r18, r20
      fa:	24 0b       	sbc	r18, r20
      fc:	24 0b       	sbc	r18, r20
      fe:	24 0b       	sbc	r18, r20
     100:	24 0b       	sbc	r18, r20
     102:	24 0b       	sbc	r18, r20
     104:	75 0d       	add	r23, r5
     106:	62 0d       	add	r22, r2
     108:	24 0b       	sbc	r18, r20
     10a:	24 0b       	sbc	r18, r20
     10c:	24 0b       	sbc	r18, r20
     10e:	24 0b       	sbc	r18, r20
     110:	24 0b       	sbc	r18, r20
     112:	24 0b       	sbc	r18, r20
     114:	24 0b       	sbc	r18, r20
     116:	24 0b       	sbc	r18, r20
     118:	24 0b       	sbc	r18, r20
     11a:	24 0b       	sbc	r18, r20
     11c:	24 0b       	sbc	r18, r20
     11e:	24 0b       	sbc	r18, r20
     120:	c2 0d       	add	r28, r2
     122:	5f 0f       	add	r21, r31
     124:	5f 0d       	add	r21, r15
     126:	41 0d       	add	r20, r1
     128:	24 0b       	sbc	r18, r20
     12a:	24 0b       	sbc	r18, r20
     12c:	24 0b       	sbc	r18, r20
     12e:	24 0b       	sbc	r18, r20
     130:	24 0b       	sbc	r18, r20
     132:	24 0b       	sbc	r18, r20
     134:	24 0b       	sbc	r18, r20
     136:	24 0b       	sbc	r18, r20
     138:	24 0b       	sbc	r18, r20
     13a:	24 0b       	sbc	r18, r20
     13c:	24 0b       	sbc	r18, r20
     13e:	24 0b       	sbc	r18, r20
     140:	d0 0e       	add	r13, r16
     142:	62 0e       	add	r6, r18
     144:	24 0b       	sbc	r18, r20
     146:	24 0b       	sbc	r18, r20
     148:	f8 0f       	add	r31, r24
     14a:	b9 0e       	add	r11, r25
     14c:	2f 0d       	add	r18, r15
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e6 e6       	ldi	r30, 0x66	; 102
     194:	f8 e4       	ldi	r31, 0x48	; 72
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	ae 31       	cpi	r26, 0x1E	; 30
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	ae e1       	ldi	r26, 0x1E	; 30
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	ab 32       	cpi	r26, 0x2B	; 43
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 c8 08 	call	0x1190	; 0x1190 <main>
     1b6:	0c 94 32 24 	jmp	0x4864	; 0x4864 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     1be:	ea e7       	ldi	r30, 0x7A	; 122
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	86 60       	ori	r24, 0x06	; 6
     1c6:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     1c8:	ac e7       	ldi	r26, 0x7C	; 124
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	8c 91       	ld	r24, X
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     1d2:	80 81       	ld	r24, Z
     1d4:	80 62       	ori	r24, 0x20	; 32
     1d6:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     1d8:	ab e7       	ldi	r26, 0x7B	; 123
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	8c 91       	ld	r24, X
     1de:	88 7f       	andi	r24, 0xF8	; 248
     1e0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     1e2:	80 81       	ld	r24, Z
     1e4:	88 60       	ori	r24, 0x08	; 8
     1e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     1e8:	80 81       	ld	r24, Z
     1ea:	80 68       	ori	r24, 0x80	; 128
     1ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     1ee:	80 81       	ld	r24, Z
     1f0:	80 64       	ori	r24, 0x40	; 64
     1f2:	80 83       	st	Z, r24

}
     1f4:	08 95       	ret

000001f6 <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	2f 93       	push	r18
     206:	3f 93       	push	r19
     208:	4f 93       	push	r20
     20a:	8f 93       	push	r24
     20c:	9f 93       	push	r25
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;		// this variable is used to have basic delays based on the adc interrupt timing (one interrupt every 104 us)
     212:	80 91 f2 03 	lds	r24, 0x03F2
     216:	90 91 f3 03 	lds	r25, 0x03F3
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	90 93 f3 03 	sts	0x03F3, r25
     220:	80 93 f2 03 	sts	0x03F2, r24

	int value = ADCL;			// must be read first!!
     224:	20 91 78 00 	lds	r18, 0x0078
     228:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     22a:	40 91 79 00 	lds	r20, 0x0079
     22e:	94 2f       	mov	r25, r20
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	28 2b       	or	r18, r24
     234:	39 2b       	or	r19, r25

	// save the last data
	switch(adcSaveDataTo) {
     236:	80 91 71 03 	lds	r24, 0x0371
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	09 f4       	brne	.+2      	; 0x240 <__vector_29+0x4a>
     23e:	0b c1       	rjmp	.+534    	; 0x456 <__vector_29+0x260>
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	08 f4       	brcc	.+2      	; 0x246 <__vector_29+0x50>
     244:	44 c0       	rjmp	.+136    	; 0x2ce <__vector_29+0xd8>
     246:	83 30       	cpi	r24, 0x03	; 3
     248:	09 f4       	brne	.+2      	; 0x24c <__vector_29+0x56>
     24a:	f8 c0       	rjmp	.+496    	; 0x43c <__vector_29+0x246>
     24c:	84 30       	cpi	r24, 0x04	; 4
     24e:	09 f4       	brne	.+2      	; 0x252 <__vector_29+0x5c>
     250:	ce c0       	rjmp	.+412    	; 0x3ee <__vector_29+0x1f8>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     252:	80 91 72 03 	lds	r24, 0x0372
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	09 f4       	brne	.+2      	; 0x25c <__vector_29+0x66>
     25a:	b5 c0       	rjmp	.+362    	; 0x3c6 <__vector_29+0x1d0>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	08 f0       	brcs	.+2      	; 0x262 <__vector_29+0x6c>
     260:	4f c0       	rjmp	.+158    	; 0x300 <__vector_29+0x10a>
     262:	88 23       	and	r24, r24
     264:	09 f0       	breq	.+2      	; 0x268 <__vector_29+0x72>
     266:	8a c0       	rjmp	.+276    	; 0x37c <__vector_29+0x186>

		case 0:	// proximity
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
     268:	80 91 24 03 	lds	r24, 0x0324
     26c:	86 95       	lsr	r24
     26e:	80 93 23 03 	sts	0x0323, r24
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
     272:	80 91 73 03 	lds	r24, 0x0373
     276:	88 23       	and	r24, r24
     278:	09 f0       	breq	.+2      	; 0x27c <__vector_29+0x86>
     27a:	1b c1       	rjmp	.+566    	; 0x4b2 <__vector_29+0x2bc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 71 03 	sts	0x0371, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 72 03 	sts	0x0372, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     288:	90 91 23 03 	lds	r25, 0x0323
     28c:	98 30       	cpi	r25, 0x08	; 8
     28e:	08 f0       	brcs	.+2      	; 0x292 <__vector_29+0x9c>
     290:	6a c0       	rjmp	.+212    	; 0x366 <__vector_29+0x170>
		ADCSRB &= ~(1 << MUX5);
     292:	90 91 7b 00 	lds	r25, 0x007B
     296:	97 7f       	andi	r25, 0xF7	; 247
     298:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
     29c:	90 91 23 03 	lds	r25, 0x0323
     2a0:	90 5c       	subi	r25, 0xC0	; 192
     2a2:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	21 f4       	brne	.+8      	; 0x2b2 <__vector_29+0xbc>
		PORTJ &= 0xF0;
		PORTA = 0x00;
		#endif

		#ifdef HW_REV_3_0_1
		PORTJ = 0xFF;
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
     2b0:	12 b8       	out	0x02, r1	; 2

	}

//	PORTB |= (1 << 7);

}
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	9f 91       	pop	r25
     2b8:	8f 91       	pop	r24
     2ba:	4f 91       	pop	r20
     2bc:	3f 91       	pop	r19
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0b be       	out	0x3b, r0	; 59
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     2ce:	88 23       	and	r24, r24
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <__vector_29+0xde>
     2d2:	65 c0       	rjmp	.+202    	; 0x39e <__vector_29+0x1a8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     2d4:	80 91 24 03 	lds	r24, 0x0324
     2d8:	8e 30       	cpi	r24, 0x0E	; 14
     2da:	09 f4       	brne	.+2      	; 0x2de <__vector_29+0xe8>
     2dc:	f8 c0       	rjmp	.+496    	; 0x4ce <__vector_29+0x2d8>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     2de:	e8 2f       	mov	r30, r24
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e7 5d       	subi	r30, 0xD7	; 215
     2e8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ea:	31 83       	std	Z+1, r19	; 0x01
     2ec:	20 83       	st	Z, r18
			}
			currentProx++;
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	80 93 24 03 	sts	0x0324, r24
			if(currentProx > 23) {
     2f4:	88 31       	cpi	r24, 0x18	; 24
     2f6:	08 f4       	brcc	.+2      	; 0x2fa <__vector_29+0x104>
     2f8:	ac cf       	rjmp	.-168    	; 0x252 <__vector_29+0x5c>
				currentProx = 0;
     2fa:	10 92 24 03 	sts	0x0324, r1
     2fe:	a9 cf       	rjmp	.-174    	; 0x252 <__vector_29+0x5c>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     300:	83 30       	cpi	r24, 0x03	; 3
     302:	09 f4       	brne	.+2      	; 0x306 <__vector_29+0x110>
     304:	88 c0       	rjmp	.+272    	; 0x416 <__vector_29+0x220>
     306:	84 30       	cpi	r24, 0x04	; 4
     308:	09 f0       	breq	.+2      	; 0x30c <__vector_29+0x116>
     30a:	be cf       	rjmp	.-132    	; 0x288 <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;	
     30c:	90 91 26 03 	lds	r25, 0x0326
     310:	90 93 23 03 	sts	0x0323, r25
			rightChannelPhase = rightMotorPhase;	
     314:	90 91 27 03 	lds	r25, 0x0327
     318:	90 93 73 03 	sts	0x0373, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     31c:	90 91 74 03 	lds	r25, 0x0374
     320:	99 23       	and	r25, r25
     322:	09 f0       	breq	.+2      	; 0x326 <__vector_29+0x130>
     324:	c3 c0       	rjmp	.+390    	; 0x4ac <__vector_29+0x2b6>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	80 93 71 03 	sts	0x0371, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     32c:	10 92 72 03 	sts	0x0372, r1

			if(currentProx==14 && measBattery==1) {
     330:	20 91 24 03 	lds	r18, 0x0324
     334:	2e 30       	cpi	r18, 0x0E	; 14
     336:	09 f4       	brne	.+2      	; 0x33a <__vector_29+0x144>
     338:	c4 c0       	rjmp	.+392    	; 0x4c2 <__vector_29+0x2cc>
				measBattery=2;
				PORTC |= (1 << 6);	// sense enable on
			}

			if(currentProx & 0x01) {	// if active phase
     33a:	82 2f       	mov	r24, r18
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 ff       	sbrs	r18, 0
     340:	ae c0       	rjmp	.+348    	; 0x49e <__vector_29+0x2a8>
				if(currentProx < 16) {
     342:	20 31       	cpi	r18, 0x10	; 16
     344:	08 f0       	brcs	.+2      	; 0x348 <__vector_29+0x152>
     346:	9b c0       	rjmp	.+310    	; 0x47e <__vector_29+0x288>
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     348:	2e 30       	cpi	r18, 0x0E	; 14
     34a:	09 f4       	brne	.+2      	; 0x34e <__vector_29+0x158>
     34c:	d2 c0       	rjmp	.+420    	; 0x4f2 <__vector_29+0x2fc>
						measBattery=2;
						PORTC |= (1 << 6);	// sense enable on
					} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
     34e:	26 95       	lsr	r18
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <__vector_29+0x164>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	2a 95       	dec	r18
     35c:	e2 f7       	brpl	.-8      	; 0x356 <__vector_29+0x160>
     35e:	82 b9       	out	0x02, r24	; 2
     360:	80 91 72 03 	lds	r24, 0x0372
     364:	91 cf       	rjmp	.-222    	; 0x288 <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     366:	90 91 7b 00 	lds	r25, 0x007B
     36a:	98 60       	ori	r25, 0x08	; 8
     36c:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
     370:	90 91 23 03 	lds	r25, 0x0323
     374:	98 5c       	subi	r25, 0xC8	; 200
     376:	90 93 7c 00 	sts	0x007C, r25
     37a:	95 cf       	rjmp	.-214    	; 0x2a6 <__vector_29+0xb0>
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	09 f0       	breq	.+2      	; 0x382 <__vector_29+0x18c>
     380:	83 cf       	rjmp	.-250    	; 0x288 <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
     382:	80 91 25 03 	lds	r24, 0x0325
     386:	80 93 23 03 	sts	0x0323, r24
			leftChannelPhase = leftMotorPhase;
     38a:	80 91 28 03 	lds	r24, 0x0328
     38e:	80 93 74 03 	sts	0x0374, r24
			adcSaveDataTo = SAVE_TO_PROX;
     392:	10 92 71 03 	sts	0x0371, r1
			adcSamplingState = 2;
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	80 93 72 03 	sts	0x0372, r24
			break;
     39c:	75 cf       	rjmp	.-278    	; 0x288 <__vector_29+0x92>

	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data
	switch(adcSaveDataTo) {
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <__vector_29+0x1ae>
     3a2:	57 cf       	rjmp	.-338    	; 0x252 <__vector_29+0x5c>
				currentProx = 0;
			}
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     3a4:	80 91 7c 03 	lds	r24, 0x037C
     3a8:	90 91 7d 03 	lds	r25, 0x037D
     3ac:	82 0f       	add	r24, r18
     3ae:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	90 93 7d 03 	sts	0x037D, r25
     3b8:	80 93 7c 03 	sts	0x037C, r24
			break;

	}

	// select next channel
	switch(adcSamplingState) {
     3bc:	80 91 72 03 	lds	r24, 0x0372
     3c0:	82 30       	cpi	r24, 0x02	; 2
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <__vector_29+0x1d0>
     3c4:	4b cf       	rjmp	.-362    	; 0x25c <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
     3c6:	80 91 26 03 	lds	r24, 0x0326
     3ca:	80 93 23 03 	sts	0x0323, r24
			rightChannelPhase = rightMotorPhase;
     3ce:	80 91 27 03 	lds	r24, 0x0327
     3d2:	80 93 73 03 	sts	0x0373, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     3d6:	80 91 74 03 	lds	r24, 0x0374
     3da:	88 23       	and	r24, r24
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <__vector_29+0x1ea>
     3de:	6d c0       	rjmp	.+218    	; 0x4ba <__vector_29+0x2c4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	80 93 71 03 	sts	0x0371, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	80 93 72 03 	sts	0x0372, r24
			break;
     3ec:	4d cf       	rjmp	.-358    	; 0x288 <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     3ee:	80 91 8a 03 	lds	r24, 0x038A
     3f2:	90 91 8b 03 	lds	r25, 0x038B
     3f6:	82 0f       	add	r24, r18
     3f8:	93 1f       	adc	r25, r19
     3fa:	90 93 8b 03 	sts	0x038B, r25
     3fe:	80 93 8a 03 	sts	0x038A, r24
			num_lvel_samples_avg++;
     402:	80 91 82 03 	lds	r24, 0x0382
     406:	90 91 83 03 	lds	r25, 0x0383
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 83 03 	sts	0x0383, r25
     410:	80 93 82 03 	sts	0x0382, r24
			break;
     414:	1e cf       	rjmp	.-452    	; 0x252 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
     416:	80 91 25 03 	lds	r24, 0x0325
     41a:	80 93 23 03 	sts	0x0323, r24
			leftChannelPhase = leftMotorPhase;
     41e:	80 91 28 03 	lds	r24, 0x0328
     422:	80 93 74 03 	sts	0x0374, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     426:	80 91 73 03 	lds	r24, 0x0373
     42a:	88 23       	and	r24, r24
     42c:	d9 f5       	brne	.+118    	; 0x4a4 <__vector_29+0x2ae>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 71 03 	sts	0x0371, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	80 93 72 03 	sts	0x0372, r24
			break;
     43a:	26 cf       	rjmp	.-436    	; 0x288 <__vector_29+0x92>
			right_vel_sum += value;
			num_rvel_samples_avg++;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     43c:	80 91 7a 03 	lds	r24, 0x037A
     440:	90 91 7b 03 	lds	r25, 0x037B
     444:	82 0f       	add	r24, r18
     446:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	90 93 7b 03 	sts	0x037B, r25
     450:	80 93 7a 03 	sts	0x037A, r24
			break;
     454:	fe ce       	rjmp	.-516    	; 0x252 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     456:	80 91 8e 03 	lds	r24, 0x038E
     45a:	90 91 8f 03 	lds	r25, 0x038F
     45e:	82 0f       	add	r24, r18
     460:	93 1f       	adc	r25, r19
     462:	90 93 8f 03 	sts	0x038F, r25
     466:	80 93 8e 03 	sts	0x038E, r24
			num_rvel_samples_avg++;
     46a:	80 91 86 03 	lds	r24, 0x0386
     46e:	90 91 87 03 	lds	r25, 0x0387
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	90 93 87 03 	sts	0x0387, r25
     478:	80 93 86 03 	sts	0x0386, r24
			break;
     47c:	ea ce       	rjmp	.-556    	; 0x252 <__vector_29+0x5c>
					#ifdef HW_REV_3_0
					PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					#endif
					
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));
     47e:	40 91 05 01 	lds	r20, 0x0105
     482:	40 97       	sbiw	r24, 0x10	; 16
     484:	95 95       	asr	r25
     486:	87 95       	ror	r24
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__vector_29+0x29c>
     48e:	22 0f       	add	r18, r18
     490:	33 1f       	adc	r19, r19
     492:	8a 95       	dec	r24
     494:	e2 f7       	brpl	.-8      	; 0x48e <__vector_29+0x298>
     496:	20 95       	com	r18
     498:	24 23       	and	r18, r20
     49a:	20 93 05 01 	sts	0x0105, r18
     49e:	80 91 72 03 	lds	r24, 0x0372
     4a2:	f2 ce       	rjmp	.-540    	; 0x288 <__vector_29+0x92>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 71 03 	sts	0x0371, r24
     4aa:	c4 cf       	rjmp	.-120    	; 0x434 <__vector_29+0x23e>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     4ac:	80 93 71 03 	sts	0x0371, r24
     4b0:	3d cf       	rjmp	.-390    	; 0x32c <__vector_29+0x136>
			// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			currentAdChannel = currentProx>>1;	// when currentProx is odd it means it is the active phase (pulse on)
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first time this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	80 93 71 03 	sts	0x0371, r24
     4b8:	e4 ce       	rjmp	.-568    	; 0x282 <__vector_29+0x8c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     4ba:	84 e0       	ldi	r24, 0x04	; 4
     4bc:	80 93 71 03 	sts	0x0371, r24
     4c0:	92 cf       	rjmp	.-220    	; 0x3e6 <__vector_29+0x1f0>
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
     4c2:	80 91 77 03 	lds	r24, 0x0377
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	79 f0       	breq	.+30     	; 0x4e8 <__vector_29+0x2f2>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	dd ce       	rjmp	.-582    	; 0x288 <__vector_29+0x92>

	// save the last data
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     4ce:	90 91 77 03 	lds	r25, 0x0377
     4d2:	92 30       	cpi	r25, 0x02	; 2
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <__vector_29+0x2e2>
     4d6:	03 cf       	rjmp	.-506    	; 0x2de <__vector_29+0xe8>
				batteryLevel = value;
     4d8:	30 93 76 03 	sts	0x0376, r19
     4dc:	20 93 75 03 	sts	0x0375, r18
				measBattery = 0;
     4e0:	10 92 77 03 	sts	0x0377, r1
				PORTC &= ~(1 << 6);
     4e4:	46 98       	cbi	0x08, 6	; 8
     4e6:	03 cf       	rjmp	.-506    	; 0x2ee <__vector_29+0xf8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	80 93 77 03 	sts	0x0377, r24
				PORTC |= (1 << 6);	// sense enable on
     4ee:	46 9a       	sbi	0x08, 6	; 8
     4f0:	24 cf       	rjmp	.-440    	; 0x33a <__vector_29+0x144>
			}

			if(currentProx & 0x01) {	// if active phase
				if(currentProx < 16) {
					if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
     4f2:	80 91 77 03 	lds	r24, 0x0377
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	09 f0       	breq	.+2      	; 0x4fc <__vector_29+0x306>
     4fa:	29 cf       	rjmp	.-430    	; 0x34e <__vector_29+0x158>
						measBattery=2;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	80 93 77 03 	sts	0x0377, r24
						PORTC |= (1 << 6);	// sense enable on
     502:	46 9a       	sbi	0x08, 6	; 8
     504:	80 91 72 03 	lds	r24, 0x0372
     508:	bf ce       	rjmp	.-642    	; 0x288 <__vector_29+0x92>

0000050a <initPwm>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
     50a:	e0 e8       	ldi	r30, 0x80	; 128
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	89 6a       	ori	r24, 0xA9	; 169
     512:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
     514:	e1 e8       	ldi	r30, 0x81	; 129
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	89 60       	ori	r24, 0x09	; 9
     51c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
     51e:	80 91 0c 02 	lds	r24, 0x020C
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	90 93 89 00 	sts	0x0089, r25
     528:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
     52c:	80 91 0d 02 	lds	r24, 0x020D
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	90 93 8b 00 	sts	0x008B, r25
     536:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
     53a:	80 91 0e 02 	lds	r24, 0x020E
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 8d 00 	sts	0x008D, r25
     544:	80 93 8c 00 	sts	0x008C, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     548:	e0 e9       	ldi	r30, 0x90	; 144
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	83 68       	ori	r24, 0x83	; 131
     550:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     552:	80 81       	ld	r24, Z
     554:	83 60       	ori	r24, 0x03	; 3
     556:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     558:	a1 e9       	ldi	r26, 0x91	; 145
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	8c 91       	ld	r24, X
     55e:	8b 60       	ori	r24, 0x0B	; 11
     560:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     562:	80 91 96 03 	lds	r24, 0x0396
     566:	90 91 97 03 	lds	r25, 0x0397
     56a:	90 93 99 00 	sts	0x0099, r25
     56e:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     572:	10 92 9b 00 	sts	0x009B, r1
     576:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     57a:	a1 e7       	ldi	r26, 0x71	; 113
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	8c 91       	ld	r24, X
     580:	81 60       	ori	r24, 0x01	; 1
     582:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     584:	80 81       	ld	r24, Z
     586:	8f 75       	andi	r24, 0x5F	; 95
     588:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     58a:	8e b1       	in	r24, 0x0e	; 14
     58c:	87 7e       	andi	r24, 0xE7	; 231
     58e:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     590:	e0 ea       	ldi	r30, 0xA0	; 160
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	83 68       	ori	r24, 0x83	; 131
     598:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     59a:	a1 ea       	ldi	r26, 0xA1	; 161
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	8c 91       	ld	r24, X
     5a0:	8b 60       	ori	r24, 0x0B	; 11
     5a2:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     5a4:	80 91 9a 03 	lds	r24, 0x039A
     5a8:	90 91 9b 03 	lds	r25, 0x039B
     5ac:	90 93 a9 00 	sts	0x00A9, r25
     5b0:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     5b4:	10 92 ab 00 	sts	0x00AB, r1
     5b8:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     5bc:	a2 e7       	ldi	r26, 0x72	; 114
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	8c 91       	ld	r24, X
     5c2:	81 60       	ori	r24, 0x01	; 1
     5c4:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     5c6:	80 81       	ld	r24, Z
     5c8:	8f 75       	andi	r24, 0x5F	; 95
     5ca:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     5cc:	e2 e0       	ldi	r30, 0x02	; 2
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	80 81       	ld	r24, Z
     5d2:	87 7e       	andi	r24, 0xE7	; 231
     5d4:	80 83       	st	Z, r24


}
     5d6:	08 95       	ret

000005d8 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	leftMotorPhase = ACTIVE_PHASE;
     5ea:	10 92 28 03 	sts	0x0328, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     5ee:	80 91 7a 03 	lds	r24, 0x037A
     5f2:	90 91 7b 03 	lds	r25, 0x037B
     5f6:	90 93 7f 03 	sts	0x037F, r25
     5fa:	80 93 7e 03 	sts	0x037E, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     5fe:	80 91 82 03 	lds	r24, 0x0382
     602:	90 91 83 03 	lds	r25, 0x0383
     606:	90 93 85 03 	sts	0x0385, r25
     60a:	80 93 84 03 	sts	0x0384, r24
	last_left_vel_sum = left_vel_sum;
     60e:	80 91 8a 03 	lds	r24, 0x038A
     612:	90 91 8b 03 	lds	r25, 0x038B
     616:	90 93 8d 03 	sts	0x038D, r25
     61a:	80 93 8c 03 	sts	0x038C, r24

	// reset sampling variables
	left_current_avg = 0;
     61e:	10 92 7b 03 	sts	0x037B, r1
     622:	10 92 7a 03 	sts	0x037A, r1
	num_lvel_samples_avg = 0;
     626:	10 92 83 03 	sts	0x0383, r1
     62a:	10 92 82 03 	sts	0x0382, r1
	left_vel_sum = 0;
     62e:	10 92 8b 03 	sts	0x038B, r1
     632:	10 92 8a 03 	sts	0x038A, r1

	// start control
	compute_left_vel = 1;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 c6 03 	sts	0x03C6, r24
	start_control = 1;
     63c:	80 93 c8 03 	sts	0x03C8, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     640:	80 91 9a 03 	lds	r24, 0x039A
     644:	90 91 9b 03 	lds	r25, 0x039B
     648:	a0 91 9c 03 	lds	r26, 0x039C
     64c:	b0 91 9d 03 	lds	r27, 0x039D
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	a1 05       	cpc	r26, r1
     654:	b1 05       	cpc	r27, r1
     656:	29 f0       	breq	.+10     	; 0x662 <__vector_45+0x8a>
//		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
//		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     658:	18 16       	cp	r1, r24
     65a:	19 06       	cpc	r1, r25
     65c:	1a 06       	cpc	r1, r26
     65e:	1b 06       	cpc	r1, r27
     660:	64 f4       	brge	.+24     	; 0x67a <__vector_45+0xa2>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	80 93 25 03 	sts	0x0325, r24
//		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti
//		PORTH &= ~(1 << 4);				// output to 0
//		TCCR4A |= (1 << COM4A1);		// enable OCA
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     67a:	8e e0       	ldi	r24, 0x0E	; 14
     67c:	80 93 25 03 	sts	0x0325, r24
     680:	f3 cf       	rjmp	.-26     	; 0x668 <__vector_45+0x90>

00000682 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     682:	1f 92       	push	r1
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	0f 92       	push	r0
     68a:	11 24       	eor	r1, r1
     68c:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 28 03 	sts	0x0328, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     694:	8e e0       	ldi	r24, 0x0E	; 14
     696:	80 93 25 03 	sts	0x0325, r24

//	PORTB |= (1 << 6);

}
     69a:	8f 91       	pop	r24
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 28 03 	sts	0x0328, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	80 93 25 03 	sts	0x0325, r24

//	PORTB |= (1 << 6);

}
     6be:	8f 91       	pop	r24
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	rightMotorPhase = ACTIVE_PHASE;
     6dc:	10 92 27 03 	sts	0x0327, r1

	// copy sampling variables
	last_right_current = right_current_avg;
     6e0:	80 91 7c 03 	lds	r24, 0x037C
     6e4:	90 91 7d 03 	lds	r25, 0x037D
     6e8:	90 93 81 03 	sts	0x0381, r25
     6ec:	80 93 80 03 	sts	0x0380, r24
	last_right_vel_sum = right_vel_sum;
     6f0:	80 91 8e 03 	lds	r24, 0x038E
     6f4:	90 91 8f 03 	lds	r25, 0x038F
     6f8:	90 93 91 03 	sts	0x0391, r25
     6fc:	80 93 90 03 	sts	0x0390, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     700:	80 91 86 03 	lds	r24, 0x0386
     704:	90 91 87 03 	lds	r25, 0x0387
     708:	90 93 89 03 	sts	0x0389, r25
     70c:	80 93 88 03 	sts	0x0388, r24

	// reset sampling variables
	right_current_avg = 0;
     710:	10 92 7d 03 	sts	0x037D, r1
     714:	10 92 7c 03 	sts	0x037C, r1
	right_vel_sum = 0;
     718:	10 92 8f 03 	sts	0x038F, r1
     71c:	10 92 8e 03 	sts	0x038E, r1
	num_rvel_samples_avg = 0;
     720:	10 92 87 03 	sts	0x0387, r1
     724:	10 92 86 03 	sts	0x0386, r1

	// start control
	compute_right_vel = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 c7 03 	sts	0x03C7, r24

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     72e:	80 91 96 03 	lds	r24, 0x0396
     732:	90 91 97 03 	lds	r25, 0x0397
     736:	a0 91 98 03 	lds	r26, 0x0398
     73a:	b0 91 99 03 	lds	r27, 0x0399
     73e:	00 97       	sbiw	r24, 0x00	; 0
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	29 f0       	breq	.+10     	; 0x750 <__vector_35+0x86>
//		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
//		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     746:	18 16       	cp	r1, r24
     748:	19 06       	cpc	r1, r25
     74a:	1a 06       	cpc	r1, r26
     74c:	1b 06       	cpc	r1, r27
     74e:	64 f4       	brge	.+24     	; 0x768 <__vector_35+0x9e>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     750:	8d e0       	ldi	r24, 0x0D	; 13
     752:	80 93 26 03 	sts	0x0326, r24
//		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti
//		PORTE &= ~(1 << 4);				// output to 0
//		TCCR3A |= (1 << COM3A1);		// enable OCA
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	80 93 26 03 	sts	0x0326, r24
     76e:	f3 cf       	rjmp	.-26     	; 0x756 <__vector_35+0x8c>

00000770 <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 27 03 	sts	0x0327, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     782:	8c e0       	ldi	r24, 0x0C	; 12
     784:	80 93 26 03 	sts	0x0326, r24

//	PORTB |= (1 << 6);
}
     788:	8f 91       	pop	r24
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	0f 90       	pop	r0
     790:	1f 90       	pop	r1
     792:	18 95       	reti

00000794 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     794:	1f 92       	push	r1
     796:	0f 92       	push	r0
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 27 03 	sts	0x0327, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     7a6:	8d e0       	ldi	r24, 0x0D	; 13
     7a8:	80 93 26 03 	sts	0x0326, r24

//	PORTB |= (1 << 6);
}
     7ac:	8f 91       	pop	r24
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	00 d0       	rcall	.+0      	; 0x7be <readAccelXYZ+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <readAccelXYZ+0x8>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {
     7c4:	80 91 dc 03 	lds	r24, 0x03DC
     7c8:	88 23       	and	r24, r24
     7ca:	c1 f0       	breq	.+48     	; 0x7fc <readAccelXYZ+0x44>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis


	} else if(useAccel == USE_ADXL345) {	
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <readAccelXYZ+0x1a>
     7d0:	54 c0       	rjmp	.+168    	; 0x87a <readAccelXYZ+0xc2>
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis

	} else {

		accX = 0;
     7d2:	10 92 de 03 	sts	0x03DE, r1
     7d6:	10 92 dd 03 	sts	0x03DD, r1
		accY = 0;
     7da:	10 92 e0 03 	sts	0x03E0, r1
     7de:	10 92 df 03 	sts	0x03DF, r1
		accZ = 0;
     7e2:	10 92 e2 03 	sts	0x03E2, r1
     7e6:	10 92 e1 03 	sts	0x03E1, r1

	}

}
     7ea:	26 96       	adiw	r28, 0x06	; 6
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	08 95       	ret
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     7fc:	80 91 13 02 	lds	r24, 0x0213
     800:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
		i2c_write(0x00);							// sends address to read from
     804:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     806:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     80a:	80 91 13 02 	lds	r24, 0x0213
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
     814:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     818:	89 83       	std	Y+1, r24	; 0x01
     81a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     824:	8b 83       	std	Y+3, r24	; 0x03
     826:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     82a:	8c 83       	std	Y+4, r24	; 0x04
     82c:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     830:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
     832:	0e 94 35 1a 	call	0x346a	; 0x346a <i2c_readNak>
     836:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
     838:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>

		// 16 bits values in 2's complement
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     83c:	3a 81       	ldd	r19, Y+2	; 0x02
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	82 2b       	or	r24, r18
     846:	93 2b       	or	r25, r19
     848:	90 93 de 03 	sts	0x03DE, r25
     84c:	80 93 dd 03 	sts	0x03DD, r24
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     850:	3c 81       	ldd	r19, Y+4	; 0x04
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	82 2b       	or	r24, r18
     85a:	93 2b       	or	r25, r19
     85c:	90 93 e0 03 	sts	0x03E0, r25
     860:	80 93 df 03 	sts	0x03DF, r24
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     864:	3e 81       	ldd	r19, Y+6	; 0x06
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	8d 81       	ldd	r24, Y+5	; 0x05
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	82 2b       	or	r24, r18
     86e:	93 2b       	or	r25, r19
     870:	90 93 e2 03 	sts	0x03E2, r25
     874:	80 93 e1 03 	sts	0x03E1, r24
     878:	b8 cf       	rjmp	.-144    	; 0x7ea <readAccelXYZ+0x32>


	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     87a:	80 91 13 02 	lds	r24, 0x0213
     87e:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
		i2c_write(0x32);							// sends address to read from
     882:	82 e3       	ldi	r24, 0x32	; 50
     884:	c0 cf       	rjmp	.-128    	; 0x806 <readAccelXYZ+0x4e>

00000886 <readAccelXY>:

	}

}

void readAccelXY() {
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	0f 92       	push	r0
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[4], ret;


	if(useAccel == USE_MMAX7455L) {
     896:	80 91 dc 03 	lds	r24, 0x03DC
     89a:	88 23       	and	r24, r24
     89c:	91 f0       	breq	.+36     	; 0x8c2 <readAccelXY+0x3c>
		i2c_stop();									// set stop conditon = release bus

		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <readAccelXY+0x1e>
     8a2:	45 c0       	rjmp	.+138    	; 0x92e <readAccelXY+0xa8>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else {

		accX = 0;
     8a4:	10 92 de 03 	sts	0x03DE, r1
     8a8:	10 92 dd 03 	sts	0x03DD, r1
		accY = 0;
     8ac:	10 92 e0 03 	sts	0x03E0, r1
     8b0:	10 92 df 03 	sts	0x03DF, r1

	}


}
     8b4:	0f 90       	pop	r0
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     8c2:	80 91 13 02 	lds	r24, 0x0213
     8c6:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
		i2c_write(0x00);							// sends address to read from
     8ca:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     8cc:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     8d0:	80 91 13 02 	lds	r24, 0x0213
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
     8da:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     8de:	08 2f       	mov	r16, r24
     8e0:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     8e4:	f8 2e       	mov	r15, r24
     8e6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <i2c_readAck>
     8ea:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
     8ec:	0e 94 35 1a 	call	0x346a	; 0x346a <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>

		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     8f6:	5f 2d       	mov	r21, r15
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	20 2f       	mov	r18, r16
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	24 2b       	or	r18, r20
     900:	35 2b       	or	r19, r21
     902:	30 93 de 03 	sts	0x03DE, r19
     906:	20 93 dd 03 	sts	0x03DD, r18
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	38 2f       	mov	r19, r24
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	81 2f       	mov	r24, r17
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	82 2b       	or	r24, r18
     916:	93 2b       	or	r25, r19
     918:	90 93 e0 03 	sts	0x03E0, r25
     91c:	80 93 df 03 	sts	0x03DF, r24
		accY = 0;

	}


}
     920:	0f 90       	pop	r0
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	08 95       	ret
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     92e:	80 91 13 02 	lds	r24, 0x0213
     932:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
		i2c_write(0x32);							// sends address to read from
     936:	82 e3       	ldi	r24, 0x32	; 50
     938:	c9 cf       	rjmp	.-110    	; 0x8cc <readAccelXY+0x46>

0000093a <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     93a:	80 91 13 02 	lds	r24, 0x0213
     93e:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     942:	88 23       	and	r24, r24
     944:	51 f4       	brne	.+20     	; 0x95a <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     946:	86 e1       	ldi	r24, 0x16	; 22
     948:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     94c:	85 e4       	ldi	r24, 0x45	; 69
     94e:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     952:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	return 0;
     956:	80 e0       	ldi	r24, 0x00	; 0

}
     958:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     95a:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
		return 1;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	08 95       	ret

00000962 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     962:	80 91 13 02 	lds	r24, 0x0213
     966:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     96a:	88 23       	and	r24, r24
     96c:	31 f5       	brne	.+76     	; 0x9ba <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     96e:	8d e2       	ldi	r24, 0x2D	; 45
     970:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     974:	88 e0       	ldi	r24, 0x08	; 8
     976:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     97a:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     97e:	80 91 13 02 	lds	r24, 0x0213
     982:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     986:	88 23       	and	r24, r24
     988:	c1 f4       	brne	.+48     	; 0x9ba <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     98a:	81 e3       	ldi	r24, 0x31	; 49
     98c:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     996:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     99a:	80 91 13 02 	lds	r24, 0x0213
     99e:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9a2:	88 23       	and	r24, r24
     9a4:	51 f4       	brne	.+20     	; 0x9ba <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     9a6:	8c e2       	ldi	r24, 0x2C	; 44
     9a8:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     9ac:	89 e0       	ldi	r24, 0x09	; 9
     9ae:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9b2:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	return 0;
     9b6:	80 e0       	ldi	r24, 0x00	; 0

}
     9b8:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     9ba:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
		return 1;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	08 95       	ret

000009c2 <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     9c2:	0e 94 96 19 	call	0x332c	; 0x332c <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9c6:	80 91 13 02 	lds	r24, 0x0213
     9ca:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9ce:	88 23       	and	r24, r24
     9d0:	49 f4       	brne	.+18     	; 0x9e4 <initI2C+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     9d2:	86 e1       	ldi	r24, 0x16	; 22
     9d4:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     9d8:	85 e4       	ldi	r24, 0x45	; 69
     9da:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9de:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
     9e2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     9e4:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     9e8:	86 ea       	ldi	r24, 0xA6	; 166
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 14 02 	sts	0x0214, r25
     9f0:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9f4:	86 ea       	ldi	r24, 0xA6	; 166
     9f6:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9fa:	88 23       	and	r24, r24
     9fc:	41 f5       	brne	.+80     	; 0xa4e <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     9fe:	8d e2       	ldi	r24, 0x2D	; 45
     a00:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     a04:	88 e0       	ldi	r24, 0x08	; 8
     a06:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a0a:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     a0e:	80 91 13 02 	lds	r24, 0x0213
     a12:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     a16:	88 23       	and	r24, r24
     a18:	d1 f4       	brne	.+52     	; 0xa4e <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     a1a:	81 e3       	ldi	r24, 0x31	; 49
     a1c:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a26:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     a2a:	80 91 13 02 	lds	r24, 0x0213
     a2e:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     a32:	88 23       	and	r24, r24
     a34:	61 f4       	brne	.+24     	; 0xa4e <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     a36:	8c e2       	ldi	r24, 0x2C	; 44
     a38:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     a3c:	89 e0       	ldi	r24, 0x09	; 9
     a3e:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     a42:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 dc 03 	sts	0x03DC, r24
     a4c:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     a4e:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 dc 03 	sts	0x03DC, r24
     a58:	08 95       	ret

00000a5a <calibrateAccelerometer>:
		}
	}

}

void calibrateAccelerometer() {
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29

	int j=0;
	accOffsetX = 0;
     a5e:	10 92 ea 03 	sts	0x03EA, r1
     a62:	10 92 e9 03 	sts	0x03E9, r1
	accOffsetY = 0;
     a66:	10 92 ec 03 	sts	0x03EC, r1
     a6a:	10 92 eb 03 	sts	0x03EB, r1
	accOffsetZ = 0;
     a6e:	10 92 ee 03 	sts	0x03EE, r1
     a72:	10 92 ed 03 	sts	0x03ED, r1
     a76:	c2 e3       	ldi	r28, 0x32	; 50
     a78:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     a7a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <readAccelXYZ>
		accOffsetX += accX;
     a7e:	80 91 dd 03 	lds	r24, 0x03DD
     a82:	90 91 de 03 	lds	r25, 0x03DE
     a86:	20 91 e9 03 	lds	r18, 0x03E9
     a8a:	30 91 ea 03 	lds	r19, 0x03EA
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	90 93 ea 03 	sts	0x03EA, r25
     a96:	80 93 e9 03 	sts	0x03E9, r24
		accOffsetY += accY;
     a9a:	e0 91 df 03 	lds	r30, 0x03DF
     a9e:	f0 91 e0 03 	lds	r31, 0x03E0
     aa2:	20 91 eb 03 	lds	r18, 0x03EB
     aa6:	30 91 ec 03 	lds	r19, 0x03EC
     aaa:	e2 0f       	add	r30, r18
     aac:	f3 1f       	adc	r31, r19
     aae:	f0 93 ec 03 	sts	0x03EC, r31
     ab2:	e0 93 eb 03 	sts	0x03EB, r30
		accOffsetZ += accZ;
     ab6:	20 91 e1 03 	lds	r18, 0x03E1
     aba:	30 91 e2 03 	lds	r19, 0x03E2
     abe:	40 91 ed 03 	lds	r20, 0x03ED
     ac2:	50 91 ee 03 	lds	r21, 0x03EE
     ac6:	24 0f       	add	r18, r20
     ac8:	35 1f       	adc	r19, r21
     aca:	30 93 ee 03 	sts	0x03EE, r19
     ace:	20 93 ed 03 	sts	0x03ED, r18
     ad2:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     ad4:	91 f6       	brne	.-92     	; 0xa7a <calibrateAccelerometer+0x20>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     ad6:	c2 e3       	ldi	r28, 0x32	; 50
     ad8:	d0 e0       	ldi	r29, 0x00	; 0
     ada:	be 01       	movw	r22, r28
     adc:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
     ae0:	70 93 ea 03 	sts	0x03EA, r23
     ae4:	60 93 e9 03 	sts	0x03E9, r22
	accOffsetY = accOffsetY/50;
     ae8:	cf 01       	movw	r24, r30
     aea:	be 01       	movw	r22, r28
     aec:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
     af0:	70 93 ec 03 	sts	0x03EC, r23
     af4:	60 93 eb 03 	sts	0x03EB, r22
	accOffsetZ = accOffsetZ/50;
     af8:	c9 01       	movw	r24, r18
     afa:	be 01       	movw	r22, r28
     afc:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
     b00:	70 93 ee 03 	sts	0x03EE, r23
     b04:	60 93 ed 03 	sts	0x03ED, r22

}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <computeAngle>:

void computeAngle() {
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29

	readAccelXY();
     b1a:	0e 94 43 04 	call	0x886	; 0x886 <readAccelXY>

	if(useAccel == USE_MMAX7455L) {
     b1e:	80 91 dc 03 	lds	r24, 0x03DC
     b22:	88 23       	and	r24, r24
     b24:	09 f0       	breq	.+2      	; 0xb28 <computeAngle+0x1a>
     b26:	55 c0       	rjmp	.+170    	; 0xbd2 <computeAngle+0xc4>
		if(accX > 511) {
     b28:	60 91 dd 03 	lds	r22, 0x03DD
     b2c:	70 91 de 03 	lds	r23, 0x03DE
     b30:	22 e0       	ldi	r18, 0x02	; 2
     b32:	60 30       	cpi	r22, 0x00	; 0
     b34:	72 07       	cpc	r23, r18
     b36:	34 f0       	brlt	.+12     	; 0xb44 <computeAngle+0x36>
			accX -= 1023;
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	73 40       	sbci	r23, 0x03	; 3
     b3c:	70 93 de 03 	sts	0x03DE, r23
     b40:	60 93 dd 03 	sts	0x03DD, r22
		}
		if(accY > 511) {
     b44:	c0 91 df 03 	lds	r28, 0x03DF
     b48:	d0 91 e0 03 	lds	r29, 0x03E0
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	c0 30       	cpi	r28, 0x00	; 0
     b50:	d8 07       	cpc	r29, r24
     b52:	34 f0       	brlt	.+12     	; 0xb60 <computeAngle+0x52>
			accY -= 1023;
     b54:	cf 5f       	subi	r28, 0xFF	; 255
     b56:	d3 40       	sbci	r29, 0x03	; 3
     b58:	d0 93 e0 03 	sts	0x03E0, r29
     b5c:	c0 93 df 03 	sts	0x03DF, r28
		}
		if(accZ > 511) {
     b60:	80 91 e1 03 	lds	r24, 0x03E1
     b64:	90 91 e2 03 	lds	r25, 0x03E2
     b68:	22 e0       	ldi	r18, 0x02	; 2
     b6a:	80 30       	cpi	r24, 0x00	; 0
     b6c:	92 07       	cpc	r25, r18
     b6e:	e4 f5       	brge	.+120    	; 0xbe8 <computeAngle+0xda>
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     b70:	88 27       	eor	r24, r24
     b72:	77 fd       	sbrc	r23, 7
     b74:	80 95       	com	r24
     b76:	98 2f       	mov	r25, r24
     b78:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	be 01       	movw	r22, r28
     b82:	88 27       	eor	r24, r24
     b84:	77 fd       	sbrc	r23, 7
     b86:	80 95       	com	r24
     b88:	98 2f       	mov	r25, r24
     b8a:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c8 01       	movw	r24, r16
     b94:	b7 01       	movw	r22, r14
     b96:	0e 94 36 22 	call	0x446c	; 0x446c <atan2>
     b9a:	21 ee       	ldi	r18, 0xE1	; 225
     b9c:	3e e2       	ldi	r19, 0x2E	; 46
     b9e:	45 e6       	ldi	r20, 0x65	; 101
     ba0:	52 e4       	ldi	r21, 0x42	; 66
     ba2:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
     ba6:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__fixsfsi>
     baa:	9b 01       	movw	r18, r22
     bac:	70 93 f0 03 	sts	0x03F0, r23
     bb0:	60 93 ef 03 	sts	0x03EF, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     bb4:	77 ff       	sbrs	r23, 7
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <computeAngle+0xb6>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     bb8:	28 59       	subi	r18, 0x98	; 152
     bba:	3e 4f       	sbci	r19, 0xFE	; 254
     bbc:	30 93 f0 03 	sts	0x03F0, r19
     bc0:	20 93 ef 03 	sts	0x03EF, r18
	}

}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	08 95       	ret
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
		}
	} else if(useAccel == USE_ADXL345) {
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	81 f0       	breq	.+32     	; 0xbf6 <computeAngle+0xe8>
     bd6:	60 91 dd 03 	lds	r22, 0x03DD
     bda:	70 91 de 03 	lds	r23, 0x03DE
     bde:	c0 91 df 03 	lds	r28, 0x03DF
     be2:	d0 91 e0 03 	lds	r29, 0x03E0
     be6:	c4 cf       	rjmp	.-120    	; 0xb70 <computeAngle+0x62>
		}
		if(accY > 511) {
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	93 40       	sbci	r25, 0x03	; 3
     bec:	90 93 e2 03 	sts	0x03E2, r25
     bf0:	80 93 e1 03 	sts	0x03E1, r24
     bf4:	bd cf       	rjmp	.-134    	; 0xb70 <computeAngle+0x62>
		}
	} else if(useAccel == USE_ADXL345) {
		accX = accX-accOffsetX;
     bf6:	60 91 dd 03 	lds	r22, 0x03DD
     bfa:	70 91 de 03 	lds	r23, 0x03DE
     bfe:	80 91 e9 03 	lds	r24, 0x03E9
     c02:	90 91 ea 03 	lds	r25, 0x03EA
     c06:	68 1b       	sub	r22, r24
     c08:	79 0b       	sbc	r23, r25
     c0a:	70 93 de 03 	sts	0x03DE, r23
     c0e:	60 93 dd 03 	sts	0x03DD, r22
		accY = accY-accOffsetY;
     c12:	c0 91 df 03 	lds	r28, 0x03DF
     c16:	d0 91 e0 03 	lds	r29, 0x03E0
     c1a:	80 91 eb 03 	lds	r24, 0x03EB
     c1e:	90 91 ec 03 	lds	r25, 0x03EC
     c22:	c8 1b       	sub	r28, r24
     c24:	d9 0b       	sbc	r29, r25
     c26:	d0 93 e0 03 	sts	0x03E0, r29
     c2a:	c0 93 df 03 	sts	0x03DF, r28
     c2e:	a0 cf       	rjmp	.-192    	; 0xb70 <computeAngle+0x62>

00000c30 <initPeripherals>:

}

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     c30:	f8 94       	cli

	initPortsIO();
     c32:	0e 94 74 19 	call	0x32e8	; 0x32e8 <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     c36:	80 91 7a 00 	lds	r24, 0x007A
     c3a:	86 60       	ori	r24, 0x06	; 6
     c3c:	80 93 7a 00 	sts	0x007A, r24
											// one sample need 13 Tad in free running mode, so interrupt frequency is 125/13 = 9.6 KHz (104 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     c40:	80 91 7c 00 	lds	r24, 0x007C
     c44:	80 64       	ori	r24, 0x40	; 64
     c46:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     c4a:	80 91 7a 00 	lds	r24, 0x007A
     c4e:	80 62       	ori	r24, 0x20	; 32
     c50:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB &= 0xF8;			// for safety...ADRTS2:0 in ADCSRB should be already set to free running by default (0b000)
     c54:	80 91 7b 00 	lds	r24, 0x007B
     c58:	88 7f       	andi	r24, 0xF8	; 248
     c5a:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     c5e:	80 91 7a 00 	lds	r24, 0x007A
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     c68:	80 91 7a 00 	lds	r24, 0x007A
     c6c:	80 68       	ori	r24, 0x80	; 128
     c6e:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     c72:	80 91 7a 00 	lds	r24, 0x007A
     c76:	80 64       	ori	r24, 0x40	; 64
     c78:	80 93 7a 00 	sts	0x007A, r24

	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
     c7c:	0e 94 85 02 	call	0x50a	; 0x50a <initPwm>
	initSPI();
     c80:	0e 94 4e 13 	call	0x269c	; 0x269c <initSPI>
	mirf_init();
     c84:	0e 94 01 14 	call	0x2802	; 0x2802 <mirf_init>
	initUsart();
     c88:	0e 94 3f 1a 	call	0x347e	; 0x347e <initUsart>
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     c8c:	0e 94 96 19 	call	0x332c	; 0x332c <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c90:	80 91 13 02 	lds	r24, 0x0213
     c94:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c98:	88 23       	and	r24, r24
     c9a:	51 f4       	brne	.+20     	; 0xcb0 <initPeripherals+0x80>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     c9c:	86 e1       	ldi	r24, 0x16	; 22
     c9e:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     ca2:	85 e4       	ldi	r24, 0x45	; 69
     ca4:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     ca8:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     cac:	78 94       	sei

	

}
     cae:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     cb0:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     cb4:	86 ea       	ldi	r24, 0xA6	; 166
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	90 93 14 02 	sts	0x0214, r25
     cbc:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     cc0:	86 ea       	ldi	r24, 0xA6	; 166
     cc2:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     cc6:	88 23       	and	r24, r24
     cc8:	41 f5       	brne	.+80     	; 0xd1a <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     cca:	8d e2       	ldi	r24, 0x2D	; 45
     ccc:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     cd0:	88 e0       	ldi	r24, 0x08	; 8
     cd2:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     cd6:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     cda:	80 91 13 02 	lds	r24, 0x0213
     cde:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     ce2:	88 23       	and	r24, r24
     ce4:	d1 f4       	brne	.+52     	; 0xd1a <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     ce6:	81 e3       	ldi	r24, 0x31	; 49
     ce8:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     cf2:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     cf6:	80 91 13 02 	lds	r24, 0x0213
     cfa:	0e 94 9e 19 	call	0x333c	; 0x333c <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     cfe:	88 23       	and	r24, r24
     d00:	61 f4       	brne	.+24     	; 0xd1a <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     d02:	8c e2       	ldi	r24, 0x2C	; 44
     d04:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     d08:	89 e0       	ldi	r24, 0x09	; 9
     d0a:	0e 94 19 1a 	call	0x3432	; 0x3432 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     d0e:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 dc 03 	sts	0x03DC, r24
     d18:	c9 cf       	rjmp	.-110    	; 0xcac <initPeripherals+0x7c>
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     d1a:	0e 94 11 1a 	call	0x3422	; 0x3422 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	80 93 dc 03 	sts	0x03DC, r24
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     d24:	78 94       	sei

	

}
     d26:	08 95       	ret

00000d28 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 91 d6 03 	lds	r25, 0x03D6
     d2e:	89 1b       	sub	r24, r25
     d30:	80 93 d6 03 	sts	0x03D6, r24

	if(blinkState) {
     d34:	88 23       	and	r24, r24
     d36:	39 f4       	brne	.+14     	; 0xd46 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     d38:	80 91 80 00 	lds	r24, 0x0080
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     d42:	2f 98       	cbi	0x05, 7	; 5
     d44:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     d46:	80 91 80 00 	lds	r24, 0x0080
     d4a:	88 60       	ori	r24, 0x08	; 8
     d4c:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 8d 00 	sts	0x008D, r25
     d58:	80 93 8c 00 	sts	0x008C, r24
     d5c:	08 95       	ret

00000d5e <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     d5e:	88 23       	and	r24, r24
     d60:	59 f0       	breq	.+22     	; 0xd78 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     d62:	90 91 80 00 	lds	r25, 0x0080
     d66:	90 68       	ori	r25, 0x80	; 128
     d68:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 89 00 	sts	0x0089, r25
     d72:	80 93 88 00 	sts	0x0088, r24
     d76:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     d78:	80 91 80 00 	lds	r24, 0x0080
     d7c:	8f 77       	andi	r24, 0x7F	; 127
     d7e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     d82:	2d 98       	cbi	0x05, 5	; 5
     d84:	08 95       	ret

00000d86 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     d86:	88 23       	and	r24, r24
     d88:	59 f0       	breq	.+22     	; 0xda0 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     d8a:	90 91 80 00 	lds	r25, 0x0080
     d8e:	90 62       	ori	r25, 0x20	; 32
     d90:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	90 93 8b 00 	sts	0x008B, r25
     d9a:	80 93 8a 00 	sts	0x008A, r24
     d9e:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     da0:	80 91 80 00 	lds	r24, 0x0080
     da4:	8f 7d       	andi	r24, 0xDF	; 223
     da6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     daa:	2e 98       	cbi	0x05, 6	; 5
     dac:	08 95       	ret

00000dae <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     dae:	88 23       	and	r24, r24
     db0:	59 f0       	breq	.+22     	; 0xdc8 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     db2:	90 91 80 00 	lds	r25, 0x0080
     db6:	98 60       	ori	r25, 0x08	; 8
     db8:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	90 93 8d 00 	sts	0x008D, r25
     dc2:	80 93 8c 00 	sts	0x008C, r24
     dc6:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     dc8:	80 91 80 00 	lds	r24, 0x0080
     dcc:	87 7f       	andi	r24, 0xF7	; 247
     dce:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     dd2:	2f 98       	cbi	0x05, 7	; 5
     dd4:	08 95       	ret

00000dd6 <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 f1 03 	sts	0x03F1, r24
}
     ddc:	08 95       	ret

00000dde <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     dde:	86 b1       	in	r24, 0x06	; 6
     de0:	66 b1       	in	r22, 0x06	; 6
     de2:	26 b1       	in	r18, 0x06	; 6
     de4:	46 b1       	in	r20, 0x06	; 6
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	28 70       	andi	r18, 0x08	; 8
     dea:	30 70       	andi	r19, 0x00	; 0
     dec:	35 95       	asr	r19
     dee:	27 95       	ror	r18
     df0:	35 95       	asr	r19
     df2:	27 95       	ror	r18
     df4:	35 95       	asr	r19
     df6:	27 95       	ror	r18
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	64 70       	andi	r22, 0x04	; 4
     e00:	70 70       	andi	r23, 0x00	; 0
     e02:	75 95       	asr	r23
     e04:	67 95       	ror	r22
     e06:	75 95       	asr	r23
     e08:	67 95       	ror	r22
     e0a:	26 0f       	add	r18, r22
     e0c:	37 1f       	adc	r19, r23
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	42 70       	andi	r20, 0x02	; 2
     e16:	50 70       	andi	r21, 0x00	; 0
     e18:	55 95       	asr	r21
     e1a:	47 95       	ror	r20
     e1c:	24 0f       	add	r18, r20
     e1e:	35 1f       	adc	r19, r21
     e20:	22 0f       	add	r18, r18
     e22:	81 70       	andi	r24, 0x01	; 1
}
     e24:	82 0f       	add	r24, r18
     e26:	08 95       	ret

00000e28 <obstacleAvoidance>:

void obstacleAvoidance() {
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
	signed int velX=0, velY=0;
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
     e38:	80 91 9e 03 	lds	r24, 0x039E
     e3c:	90 91 9f 03 	lds	r25, 0x039F
     e40:	a0 91 a0 03 	lds	r26, 0x03A0
     e44:	b0 91 a1 03 	lds	r27, 0x03A1
     e48:	b7 fd       	sbrc	r27, 7
     e4a:	03 c1       	rjmp	.+518    	; 0x1052 <obstacleAvoidance+0x22a>
     e4c:	20 91 d5 03 	lds	r18, 0x03D5
		speedr = -speedr;
	}
	if(pwm_left_desired < 0) {
     e50:	80 91 a2 03 	lds	r24, 0x03A2
     e54:	90 91 a3 03 	lds	r25, 0x03A3
     e58:	a0 91 a4 03 	lds	r26, 0x03A4
     e5c:	b0 91 a5 03 	lds	r27, 0x03A5
     e60:	b7 fd       	sbrc	r27, 7
     e62:	fd c0       	rjmp	.+506    	; 0x105e <obstacleAvoidance+0x236>
     e64:	a0 91 d4 03 	lds	r26, 0x03D4
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
     e68:	c2 2f       	mov	r28, r18
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
     e6e:	f0 90 5b 03 	lds	r15, 0x035B
     e72:	00 91 5c 03 	lds	r16, 0x035C
     e76:	90 91 5f 03 	lds	r25, 0x035F
     e7a:	80 91 60 03 	lds	r24, 0x0360
     e7e:	e9 2f       	mov	r30, r25
     e80:	f8 2f       	mov	r31, r24
     e82:	f7 fd       	sbrc	r31, 7
     e84:	f2 c0       	rjmp	.+484    	; 0x106a <obstacleAvoidance+0x242>
     e86:	f5 95       	asr	r31
     e88:	e7 95       	ror	r30
     e8a:	10 91 63 03 	lds	r17, 0x0363
     e8e:	e0 90 64 03 	lds	r14, 0x0364
     e92:	90 91 67 03 	lds	r25, 0x0367
     e96:	80 91 68 03 	lds	r24, 0x0368
     e9a:	69 2f       	mov	r22, r25
     e9c:	78 2f       	mov	r23, r24
     e9e:	77 fd       	sbrc	r23, 7
     ea0:	e8 c0       	rjmp	.+464    	; 0x1072 <obstacleAvoidance+0x24a>
     ea2:	75 95       	asr	r23
     ea4:	67 95       	ror	r22
     ea6:	70 95       	com	r23
     ea8:	61 95       	neg	r22
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
     eac:	9d 01       	movw	r18, r26
     eae:	2c 0f       	add	r18, r28
     eb0:	3d 1f       	adc	r19, r29
     eb2:	35 95       	asr	r19
     eb4:	27 95       	ror	r18
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
     eb6:	8f 2d       	mov	r24, r15
     eb8:	90 2f       	mov	r25, r16
     eba:	97 fd       	sbrc	r25, 7
     ebc:	d8 c0       	rjmp	.+432    	; 0x106e <obstacleAvoidance+0x246>
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	af 01       	movw	r20, r30
     ec4:	48 1b       	sub	r20, r24
     ec6:	59 0b       	sbc	r21, r25
     ec8:	80 91 61 03 	lds	r24, 0x0361
     ecc:	90 91 62 03 	lds	r25, 0x0362
     ed0:	48 0f       	add	r20, r24
     ed2:	59 1f       	adc	r21, r25
     ed4:	c1 2e       	mov	r12, r17
     ed6:	de 2c       	mov	r13, r14
     ed8:	c6 01       	movw	r24, r12
     eda:	97 fd       	sbrc	r25, 7
     edc:	d5 c0       	rjmp	.+426    	; 0x1088 <obstacleAvoidance+0x260>
     ede:	95 95       	asr	r25
     ee0:	87 95       	ror	r24
     ee2:	84 0f       	add	r24, r20
     ee4:	95 1f       	adc	r25, r21
     ee6:	86 0f       	add	r24, r22
     ee8:	97 1f       	adc	r25, r23
     eea:	40 91 59 03 	lds	r20, 0x0359
     eee:	50 91 5a 03 	lds	r21, 0x035A
     ef2:	84 1b       	sub	r24, r20
     ef4:	95 0b       	sbc	r25, r21
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	velX += sumSensorsX/4;
     ef6:	96 95       	lsr	r25
     ef8:	87 95       	ror	r24
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	82 0f       	add	r24, r18
     f00:	93 1f       	adc	r25, r19
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
     f02:	ca 1b       	sub	r28, r26
     f04:	db 0b       	sbc	r29, r27
     f06:	d7 fd       	sbrc	r29, 7
     f08:	bd c0       	rjmp	.+378    	; 0x1084 <obstacleAvoidance+0x25c>
     f0a:	d5 95       	asr	r29
     f0c:	c7 95       	ror	r28

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
     f0e:	6e 0f       	add	r22, r30
     f10:	7f 1f       	adc	r23, r31
     f12:	20 91 5d 03 	lds	r18, 0x035D
     f16:	30 91 5e 03 	lds	r19, 0x035E
     f1a:	62 0f       	add	r22, r18
     f1c:	73 1f       	adc	r23, r19
     f1e:	4f 2d       	mov	r20, r15
     f20:	50 2f       	mov	r21, r16
     f22:	57 fd       	sbrc	r21, 7
     f24:	ac c0       	rjmp	.+344    	; 0x107e <obstacleAvoidance+0x256>
     f26:	55 95       	asr	r21
     f28:	47 95       	ror	r20
     f2a:	46 0f       	add	r20, r22
     f2c:	57 1f       	adc	r21, r23
     f2e:	21 2f       	mov	r18, r17
     f30:	3e 2d       	mov	r19, r14
     f32:	37 fd       	sbrc	r19, 7
     f34:	a1 c0       	rjmp	.+322    	; 0x1078 <obstacleAvoidance+0x250>
     f36:	35 95       	asr	r19
     f38:	27 95       	ror	r18
     f3a:	42 1b       	sub	r20, r18
     f3c:	53 0b       	sbc	r21, r19
     f3e:	20 91 65 03 	lds	r18, 0x0365
     f42:	30 91 66 03 	lds	r19, 0x0366
     f46:	42 1b       	sub	r20, r18
     f48:	53 0b       	sbc	r21, r19

	velX += sumSensorsX/4;
	velY += sumSensorsY/4;
     f4a:	56 95       	lsr	r21
     f4c:	47 95       	ror	r20
     f4e:	56 95       	lsr	r21
     f50:	47 95       	ror	r20
     f52:	4c 0f       	add	r20, r28
     f54:	5d 1f       	adc	r21, r29

	speedR = (velX + velY);
     f56:	9a 01       	movw	r18, r20
     f58:	28 0f       	add	r18, r24
     f5a:	39 1f       	adc	r19, r25
	speedL = (velX - velY);
     f5c:	84 1b       	sub	r24, r20
     f5e:	95 0b       	sbc	r25, r21

	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL<<2);
	} else {
		pwm_left_working = speedL<<2;
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	aa 27       	eor	r26, r26
     f6a:	97 fd       	sbrc	r25, 7
     f6c:	a0 95       	com	r26
     f6e:	ba 2f       	mov	r27, r26
     f70:	80 93 cf 03 	sts	0x03CF, r24
     f74:	90 93 d0 03 	sts	0x03D0, r25
     f78:	a0 93 d1 03 	sts	0x03D1, r26
     f7c:	b0 93 d2 03 	sts	0x03D2, r27

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR<<2);
	} else {
		pwm_right_working = speedR<<2;
     f80:	22 0f       	add	r18, r18
     f82:	33 1f       	adc	r19, r19
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	44 27       	eor	r20, r20
     f8a:	37 fd       	sbrc	r19, 7
     f8c:	40 95       	com	r20
     f8e:	54 2f       	mov	r21, r20
     f90:	20 93 cb 03 	sts	0x03CB, r18
     f94:	30 93 cc 03 	sts	0x03CC, r19
     f98:	40 93 cd 03 	sts	0x03CD, r20
     f9c:	50 93 ce 03 	sts	0x03CE, r21
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
     fa0:	24 33       	cpi	r18, 0x34	; 52
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	36 07       	cpc	r19, r22
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	46 07       	cpc	r20, r22
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	56 07       	cpc	r21, r22
     fae:	64 f0       	brlt	.+24     	; 0xfc8 <obstacleAvoidance+0x1a0>
     fb0:	23 e3       	ldi	r18, 0x33	; 51
     fb2:	31 e0       	ldi	r19, 0x01	; 1
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	20 93 cb 03 	sts	0x03CB, r18
     fbc:	30 93 cc 03 	sts	0x03CC, r19
     fc0:	40 93 cd 03 	sts	0x03CD, r20
     fc4:	50 93 ce 03 	sts	0x03CE, r21
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
     fc8:	84 33       	cpi	r24, 0x34	; 52
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	96 07       	cpc	r25, r22
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	a6 07       	cpc	r26, r22
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	b6 07       	cpc	r27, r22
     fd6:	64 f0       	brlt	.+24     	; 0xff0 <obstacleAvoidance+0x1c8>
     fd8:	83 e3       	ldi	r24, 0x33	; 51
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	80 93 cf 03 	sts	0x03CF, r24
     fe4:	90 93 d0 03 	sts	0x03D0, r25
     fe8:	a0 93 d1 03 	sts	0x03D1, r26
     fec:	b0 93 d2 03 	sts	0x03D2, r27
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
     ff0:	2d 3c       	cpi	r18, 0xCD	; 205
     ff2:	6e ef       	ldi	r22, 0xFE	; 254
     ff4:	36 07       	cpc	r19, r22
     ff6:	6f ef       	ldi	r22, 0xFF	; 255
     ff8:	46 07       	cpc	r20, r22
     ffa:	6f ef       	ldi	r22, 0xFF	; 255
     ffc:	56 07       	cpc	r21, r22
     ffe:	64 f4       	brge	.+24     	; 0x1018 <obstacleAvoidance+0x1f0>
    1000:	2d ec       	ldi	r18, 0xCD	; 205
    1002:	3e ef       	ldi	r19, 0xFE	; 254
    1004:	4f ef       	ldi	r20, 0xFF	; 255
    1006:	5f ef       	ldi	r21, 0xFF	; 255
    1008:	20 93 cb 03 	sts	0x03CB, r18
    100c:	30 93 cc 03 	sts	0x03CC, r19
    1010:	40 93 cd 03 	sts	0x03CD, r20
    1014:	50 93 ce 03 	sts	0x03CE, r21
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    1018:	8d 3c       	cpi	r24, 0xCD	; 205
    101a:	2e ef       	ldi	r18, 0xFE	; 254
    101c:	92 07       	cpc	r25, r18
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	a2 07       	cpc	r26, r18
    1022:	2f ef       	ldi	r18, 0xFF	; 255
    1024:	b2 07       	cpc	r27, r18
    1026:	64 f4       	brge	.+24     	; 0x1040 <obstacleAvoidance+0x218>
    1028:	8d ec       	ldi	r24, 0xCD	; 205
    102a:	9e ef       	ldi	r25, 0xFE	; 254
    102c:	af ef       	ldi	r26, 0xFF	; 255
    102e:	bf ef       	ldi	r27, 0xFF	; 255
    1030:	80 93 cf 03 	sts	0x03CF, r24
    1034:	90 93 d0 03 	sts	0x03D0, r25
    1038:	a0 93 d1 03 	sts	0x03D1, r26
    103c:	b0 93 d2 03 	sts	0x03D2, r27
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret
	unsigned int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;


	if(pwm_right_desired < 0) {
		speedr = -speedr;
    1052:	20 91 d5 03 	lds	r18, 0x03D5
    1056:	21 95       	neg	r18
    1058:	20 93 d5 03 	sts	0x03D5, r18
    105c:	f9 ce       	rjmp	.-526    	; 0xe50 <obstacleAvoidance+0x28>
	}
	if(pwm_left_desired < 0) {
		speedl = - speedl;
    105e:	a0 91 d4 03 	lds	r26, 0x03D4
    1062:	a1 95       	neg	r26
    1064:	a0 93 d4 03 	sts	0x03D4, r26
    1068:	ff ce       	rjmp	.-514    	; 0xe68 <obstacleAvoidance+0x40>
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    106a:	31 96       	adiw	r30, 0x01	; 1
    106c:	0c cf       	rjmp	.-488    	; 0xe86 <obstacleAvoidance+0x5e>
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	26 cf       	rjmp	.-436    	; 0xebe <obstacleAvoidance+0x96>
    1072:	6f 5f       	subi	r22, 0xFF	; 255
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	15 cf       	rjmp	.-470    	; 0xea2 <obstacleAvoidance+0x7a>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    1078:	2f 5f       	subi	r18, 0xFF	; 255
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	5c cf       	rjmp	.-328    	; 0xf36 <obstacleAvoidance+0x10e>
    107e:	4f 5f       	subi	r20, 0xFF	; 255
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	51 cf       	rjmp	.-350    	; 0xf26 <obstacleAvoidance+0xfe>
	if(pwm_left_desired < 0) {
		speedl = - speedl;
	}

	velX = (speedr + speedl)/2;
	velY = (speedr - speedl)/2;
    1084:	21 96       	adiw	r28, 0x01	; 1
    1086:	41 cf       	rjmp	.-382    	; 0xf0a <obstacleAvoidance+0xe2>

	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	29 cf       	rjmp	.-430    	; 0xede <obstacleAvoidance+0xb6>

0000108c <cliffAvoidance>:

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    108c:	80 91 49 03 	lds	r24, 0x0349
    1090:	90 91 4a 03 	lds	r25, 0x034A
    1094:	20 91 4b 03 	lds	r18, 0x034B
    1098:	30 91 4c 03 	lds	r19, 0x034C
    109c:	82 1b       	sub	r24, r18
    109e:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    10a0:	60 91 4d 03 	lds	r22, 0x034D
    10a4:	70 91 4e 03 	lds	r23, 0x034E
    10a8:	20 91 4f 03 	lds	r18, 0x034F
    10ac:	30 91 50 03 	lds	r19, 0x0350
    10b0:	62 1b       	sub	r22, r18
    10b2:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    10b4:	40 91 51 03 	lds	r20, 0x0351
    10b8:	50 91 52 03 	lds	r21, 0x0352
    10bc:	20 91 53 03 	lds	r18, 0x0353
    10c0:	30 91 54 03 	lds	r19, 0x0354
    10c4:	42 1b       	sub	r20, r18
    10c6:	53 0b       	sbc	r21, r19
    10c8:	57 fd       	sbrc	r21, 7
    10ca:	56 c0       	rjmp	.+172    	; 0x1178 <cliffAvoidance+0xec>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    10cc:	20 91 55 03 	lds	r18, 0x0355
    10d0:	30 91 56 03 	lds	r19, 0x0356
    10d4:	e0 91 57 03 	lds	r30, 0x0357
    10d8:	f0 91 58 03 	lds	r31, 0x0358
    10dc:	2e 1b       	sub	r18, r30
    10de:	3f 0b       	sbc	r19, r31
    10e0:	37 fd       	sbrc	r19, 7
    10e2:	53 c0       	rjmp	.+166    	; 0x118a <cliffAvoidance+0xfe>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    10e4:	97 fd       	sbrc	r25, 7
    10e6:	4e c0       	rjmp	.+156    	; 0x1184 <cliffAvoidance+0xf8>
    10e8:	90 93 fc 03 	sts	0x03FC, r25
    10ec:	80 93 fb 03 	sts	0x03FB, r24
	minGround = GROUND_LEFT;
    10f0:	e3 e0       	ldi	r30, 0x03	; 3
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	f0 93 15 02 	sts	0x0215, r31
    10f8:	e0 93 14 02 	sts	0x0214, r30
	if(g1 < minGroundValue) {
    10fc:	77 fd       	sbrc	r23, 7
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <cliffAvoidance+0xf2>
    1100:	68 17       	cp	r22, r24
    1102:	79 07       	cpc	r23, r25
    1104:	58 f4       	brcc	.+22     	; 0x111c <cliffAvoidance+0x90>
		minGroundValue = g1;
    1106:	70 93 fc 03 	sts	0x03FC, r23
    110a:	60 93 fb 03 	sts	0x03FB, r22
		minGround = GROUND_CENTER_LEFT;
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	90 93 15 02 	sts	0x0215, r25
    1116:	80 93 14 02 	sts	0x0214, r24
    111a:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    111c:	48 17       	cp	r20, r24
    111e:	59 07       	cpc	r21, r25
    1120:	58 f4       	brcc	.+22     	; 0x1138 <cliffAvoidance+0xac>
		minGroundValue = g2;
    1122:	50 93 fc 03 	sts	0x03FC, r21
    1126:	40 93 fb 03 	sts	0x03FB, r20
		minGround = GROUND_CENTER_RIGHT;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	90 93 15 02 	sts	0x0215, r25
    1132:	80 93 14 02 	sts	0x0214, r24
    1136:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    1138:	28 17       	cp	r18, r24
    113a:	39 07       	cpc	r19, r25
    113c:	48 f4       	brcc	.+18     	; 0x1150 <cliffAvoidance+0xc4>
		minGroundValue = g3;
    113e:	30 93 fc 03 	sts	0x03FC, r19
    1142:	20 93 fb 03 	sts	0x03FB, r18
		minGround = GROUND_RIGHT;
    1146:	10 92 15 02 	sts	0x0215, r1
    114a:	10 92 14 02 	sts	0x0214, r1
    114e:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    1150:	84 37       	cpi	r24, 0x74	; 116
    1152:	91 05       	cpc	r25, r1
    1154:	80 f4       	brcc	.+32     	; 0x1176 <cliffAvoidance+0xea>
		pwm_right_working = 0;
    1156:	10 92 cb 03 	sts	0x03CB, r1
    115a:	10 92 cc 03 	sts	0x03CC, r1
    115e:	10 92 cd 03 	sts	0x03CD, r1
    1162:	10 92 ce 03 	sts	0x03CE, r1
		pwm_left_working = 0;
    1166:	10 92 cf 03 	sts	0x03CF, r1
    116a:	10 92 d0 03 	sts	0x03D0, r1
    116e:	10 92 d1 03 	sts	0x03D1, r1
    1172:	10 92 d2 03 	sts	0x03D2, r1
    1176:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	a7 cf       	rjmp	.-178    	; 0x10cc <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	be cf       	rjmp	.-132    	; 0x1100 <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	af cf       	rjmp	.-162    	; 0x10e8 <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	aa cf       	rjmp	.-172    	; 0x10e4 <cliffAvoidance+0x58>

00001190 <main>:
		pwm_left_working = 0;
	}

}

int main(void) {
    1190:	2f 92       	push	r2
    1192:	3f 92       	push	r3
    1194:	4f 92       	push	r4
    1196:	5f 92       	push	r5
    1198:	6f 92       	push	r6
    119a:	7f 92       	push	r7
    119c:	8f 92       	push	r8
    119e:	9f 92       	push	r9
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	choosePeripheral = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
    11ba:	0e 94 18 06 	call	0xc30	; 0xc30 <initPeripherals>
}

void calibrateAccelerometer() {

	int j=0;
	accOffsetX = 0;
    11be:	10 92 ea 03 	sts	0x03EA, r1
    11c2:	10 92 e9 03 	sts	0x03E9, r1
	accOffsetY = 0;
    11c6:	10 92 ec 03 	sts	0x03EC, r1
    11ca:	10 92 eb 03 	sts	0x03EB, r1
	accOffsetZ = 0;
    11ce:	10 92 ee 03 	sts	0x03EE, r1
    11d2:	10 92 ed 03 	sts	0x03ED, r1
    11d6:	c2 e3       	ldi	r28, 0x32	; 50
    11d8:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
    11da:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <readAccelXYZ>
		accOffsetX += accX;
    11de:	80 91 dd 03 	lds	r24, 0x03DD
    11e2:	90 91 de 03 	lds	r25, 0x03DE
    11e6:	20 91 e9 03 	lds	r18, 0x03E9
    11ea:	30 91 ea 03 	lds	r19, 0x03EA
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	90 93 ea 03 	sts	0x03EA, r25
    11f6:	80 93 e9 03 	sts	0x03E9, r24
		accOffsetY += accY;
    11fa:	e0 91 df 03 	lds	r30, 0x03DF
    11fe:	f0 91 e0 03 	lds	r31, 0x03E0
    1202:	20 91 eb 03 	lds	r18, 0x03EB
    1206:	30 91 ec 03 	lds	r19, 0x03EC
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	f0 93 ec 03 	sts	0x03EC, r31
    1212:	e0 93 eb 03 	sts	0x03EB, r30
		accOffsetZ += accZ;
    1216:	20 91 e1 03 	lds	r18, 0x03E1
    121a:	30 91 e2 03 	lds	r19, 0x03E2
    121e:	40 91 ed 03 	lds	r20, 0x03ED
    1222:	50 91 ee 03 	lds	r21, 0x03EE
    1226:	24 0f       	add	r18, r20
    1228:	35 1f       	adc	r19, r21
    122a:	30 93 ee 03 	sts	0x03EE, r19
    122e:	20 93 ed 03 	sts	0x03ED, r18
    1232:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
    1234:	91 f6       	brne	.-92     	; 0x11da <main+0x4a>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
    1236:	c2 e3       	ldi	r28, 0x32	; 50
    1238:	d0 e0       	ldi	r29, 0x00	; 0
    123a:	be 01       	movw	r22, r28
    123c:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    1240:	70 93 ea 03 	sts	0x03EA, r23
    1244:	60 93 e9 03 	sts	0x03E9, r22
	accOffsetY = accOffsetY/50;
    1248:	cf 01       	movw	r24, r30
    124a:	be 01       	movw	r22, r28
    124c:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    1250:	70 93 ec 03 	sts	0x03EC, r23
    1254:	60 93 eb 03 	sts	0x03EB, r22
	accOffsetZ = accOffsetZ/50;
    1258:	c9 01       	movw	r24, r18
    125a:	be 01       	movw	r22, r28
    125c:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    1260:	70 93 ee 03 	sts	0x03EE, r23
    1264:	60 93 ed 03 	sts	0x03ED, r22
//PORTB &= ~(1 << 5);
	calibrateAccelerometer();
//PORTB |= (1 << 5);


	e_init_remote_control();
    1268:	0e 94 11 15 	call	0x2a22	; 0x2a22 <e_init_remote_control>
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
		//PORTB |= (1 << 6);

		if(delayCounter >= 20000) {
			measBattery = 1;
    126c:	11 e0       	ldi	r17, 0x01	; 1
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    126e:	c4 e6       	ldi	r28, 0x64	; 100
    1270:	d0 e0       	ldi	r29, 0x00	; 0
					ackPayload[11] = accX&0xFF;
					ackPayload[12] = accX>>8;
					ackPayload[13] = accY&0xFF;
					ackPayload[14] = accY>>8;
					ackPayload[15] = ir_move;			
					packetId = 5;
    1272:	05 e0       	ldi	r16, 0x05	; 5
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1274:	4d ec       	ldi	r20, 0xCD	; 205
    1276:	c4 2e       	mov	r12, r20
    1278:	4e ef       	ldi	r20, 0xFE	; 254
    127a:	d4 2e       	mov	r13, r20
    127c:	4f ef       	ldi	r20, 0xFF	; 255
    127e:	e4 2e       	mov	r14, r20
    1280:	4f ef       	ldi	r20, 0xFF	; 255
    1282:	f4 2e       	mov	r15, r20
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1284:	33 e3       	ldi	r19, 0x33	; 51
    1286:	83 2e       	mov	r8, r19
    1288:	31 e0       	ldi	r19, 0x01	; 1
    128a:	93 2e       	mov	r9, r19
    128c:	a1 2c       	mov	r10, r1
    128e:	b1 2c       	mov	r11, r1
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
    1290:	23 e0       	ldi	r18, 0x03	; 3
    1292:	22 2e       	mov	r2, r18
    1294:	31 2c       	mov	r3, r1
    1296:	63 c0       	rjmp	.+198    	; 0x135e <main+0x1ce>
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control

			if(start_control) {
    1298:	80 91 c8 03 	lds	r24, 0x03C8
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <main+0x112>
    12a0:	aa c0       	rjmp	.+340    	; 0x13f6 <main+0x266>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    12a2:	80 91 9e 03 	lds	r24, 0x039E
    12a6:	90 91 9f 03 	lds	r25, 0x039F
    12aa:	a0 91 a0 03 	lds	r26, 0x03A0
    12ae:	b0 91 a1 03 	lds	r27, 0x03A1
    12b2:	80 93 cb 03 	sts	0x03CB, r24
    12b6:	90 93 cc 03 	sts	0x03CC, r25
    12ba:	a0 93 cd 03 	sts	0x03CD, r26
    12be:	b0 93 ce 03 	sts	0x03CE, r27
				pwm_left_working = pwm_left_desired;
    12c2:	80 91 a2 03 	lds	r24, 0x03A2
    12c6:	90 91 a3 03 	lds	r25, 0x03A3
    12ca:	a0 91 a4 03 	lds	r26, 0x03A4
    12ce:	b0 91 a5 03 	lds	r27, 0x03A5
    12d2:	80 93 cf 03 	sts	0x03CF, r24
    12d6:	90 93 d0 03 	sts	0x03D0, r25
    12da:	a0 93 d1 03 	sts	0x03D1, r26
    12de:	b0 93 d2 03 	sts	0x03D2, r27
				
				if(obstacleAvoidanceEnabled) {
    12e2:	80 91 f5 03 	lds	r24, 0x03F5
    12e6:	88 23       	and	r24, r24
    12e8:	09 f0       	breq	.+2      	; 0x12ec <main+0x15c>
    12ea:	ae c3       	rjmp	.+1884   	; 0x1a48 <main+0x8b8>
					//PORTB &= ~(1 << 7);
					obstacleAvoidance();
					//PORTB |= (1 << 7);				
				}
				
				if(cliffAvoidanceEnabled) {
    12ec:	80 91 fa 03 	lds	r24, 0x03FA
    12f0:	88 23       	and	r24, r24
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <main+0x166>
    12f4:	32 c3       	rjmp	.+1636   	; 0x195a <main+0x7ca>
					cliffAvoidance();
				}
				start_control = 0;
    12f6:	10 92 c8 03 	sts	0x03C8, r1
				update_pwm = 1;
    12fa:	10 93 d3 03 	sts	0x03D3, r17
    12fe:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
    1300:	80 91 c6 03 	lds	r24, 0x03C6
    1304:	88 23       	and	r24, r24
    1306:	91 f0       	breq	.+36     	; 0x132c <main+0x19c>
			last_left_vel = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
    1308:	80 91 8c 03 	lds	r24, 0x038C
    130c:	90 91 8d 03 	lds	r25, 0x038D
    1310:	60 91 84 03 	lds	r22, 0x0384
    1314:	70 91 85 03 	lds	r23, 0x0385
    1318:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    131c:	70 93 93 03 	sts	0x0393, r23
    1320:	60 93 92 03 	sts	0x0392, r22
			left_vel_changed = 1;
    1324:	10 93 c9 03 	sts	0x03C9, r17
			compute_left_vel = 0;
    1328:	10 92 c6 03 	sts	0x03C6, r1
		}

		if(compute_right_vel) {
    132c:	80 91 c7 03 	lds	r24, 0x03C7
    1330:	88 23       	and	r24, r24
    1332:	91 f0       	breq	.+36     	; 0x1358 <main+0x1c8>
			last_right_vel = (unsigned int)(last_right_vel_sum/last_num_rvel_samples_avg);
    1334:	80 91 90 03 	lds	r24, 0x0390
    1338:	90 91 91 03 	lds	r25, 0x0391
    133c:	60 91 88 03 	lds	r22, 0x0388
    1340:	70 91 89 03 	lds	r23, 0x0389
    1344:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    1348:	70 93 95 03 	sts	0x0395, r23
    134c:	60 93 94 03 	sts	0x0394, r22
			right_vel_changed = 1;
    1350:	10 93 ca 03 	sts	0x03CA, r17
			compute_right_vel = 0;
    1354:	10 92 c7 03 	sts	0x03C7, r1
		}

		if(update_pwm) {
    1358:	22 23       	and	r18, r18
    135a:	09 f0       	breq	.+2      	; 0x135e <main+0x1ce>
    135c:	c4 c1       	rjmp	.+904    	; 0x16e6 <main+0x556>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    135e:	46 b1       	in	r20, 0x06	; 6
    1360:	86 b1       	in	r24, 0x06	; 6
    1362:	26 b1       	in	r18, 0x06	; 6
    1364:	56 b1       	in	r21, 0x06	; 6
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	28 70       	andi	r18, 0x08	; 8
    136a:	30 70       	andi	r19, 0x00	; 0
    136c:	35 95       	asr	r19
    136e:	27 95       	ror	r18
    1370:	35 95       	asr	r19
    1372:	27 95       	ror	r18
    1374:	35 95       	asr	r19
    1376:	27 95       	ror	r18
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	84 70       	andi	r24, 0x04	; 4
    1380:	90 70       	andi	r25, 0x00	; 0
    1382:	95 95       	asr	r25
    1384:	87 95       	ror	r24
    1386:	95 95       	asr	r25
    1388:	87 95       	ror	r24
    138a:	28 0f       	add	r18, r24
    138c:	39 1f       	adc	r19, r25
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	85 2f       	mov	r24, r21
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	82 70       	andi	r24, 0x02	; 2
    1398:	90 70       	andi	r25, 0x00	; 0
    139a:	95 95       	asr	r25
    139c:	87 95       	ror	r24
    139e:	28 0f       	add	r18, r24
    13a0:	39 1f       	adc	r19, r25
    13a2:	22 0f       	add	r18, r18
    13a4:	41 70       	andi	r20, 0x01	; 1
    13a6:	24 0f       	add	r18, r20

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		currentSelector = getSelector();
    13a8:	20 93 f4 03 	sts	0x03F4, r18
		//PORTB &= ~(1 << 6);
		readAccelXYZ();
    13ac:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <readAccelXYZ>
		//PORTB |= (1 << 6);

		if(delayCounter >= 20000) {
    13b0:	80 91 f2 03 	lds	r24, 0x03F2
    13b4:	90 91 f3 03 	lds	r25, 0x03F3
    13b8:	2e e4       	ldi	r18, 0x4E	; 78
    13ba:	80 32       	cpi	r24, 0x20	; 32
    13bc:	92 07       	cpc	r25, r18
    13be:	10 f0       	brcs	.+4      	; 0x13c4 <main+0x234>
			measBattery = 1;
    13c0:	10 93 77 03 	sts	0x0377, r17
		}

		if(irEnabled) {
    13c4:	20 91 11 02 	lds	r18, 0x0211
    13c8:	22 23       	and	r18, r18
    13ca:	09 f0       	breq	.+2      	; 0x13ce <main+0x23e>
    13cc:	2c c1       	rjmp	.+600    	; 0x1626 <main+0x496>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
    13ce:	2e e4       	ldi	r18, 0x4E	; 78
    13d0:	80 32       	cpi	r24, 0x20	; 32
    13d2:	92 07       	cpc	r25, r18
    13d4:	20 f0       	brcs	.+8      	; 0x13de <main+0x24e>
			delayCounter = 0;
    13d6:	10 92 f3 03 	sts	0x03F3, r1
    13da:	10 92 f2 03 	sts	0x03F2, r1
			usartTransmit(CHARGE_ON);								
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
    13de:	0e 94 26 14 	call	0x284c	; 0x284c <mirf_data_ready>
    13e2:	88 23       	and	r24, r24
    13e4:	59 f4       	brne	.+22     	; 0x13fc <main+0x26c>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
    13e6:	80 91 f4 03 	lds	r24, 0x03F4
    13ea:	88 23       	and	r24, r24
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <main+0x260>
    13ee:	54 cf       	rjmp	.-344    	; 0x1298 <main+0x108>
				}
				start_control = 0;
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <main+0x266>
    13f4:	e0 c1       	rjmp	.+960    	; 0x17b6 <main+0x626>

			if(start_control && left_vel_changed && right_vel_changed) {
    13f6:	20 91 d3 03 	lds	r18, 0x03D3
    13fa:	82 cf       	rjmp	.-252    	; 0x1300 <main+0x170>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    13fc:	87 e0       	ldi	r24, 0x07	; 7
    13fe:	60 e7       	ldi	r22, 0x70	; 112
    1400:	0e 94 69 14 	call	0x28d2	; 0x28d2 <mirf_config_register>

			mirf_get_data(rfData);
    1404:	85 e1       	ldi	r24, 0x15	; 21
    1406:	94 e0       	ldi	r25, 0x04	; 4
    1408:	0e 94 51 14 	call	0x28a2	; 0x28a2 <mirf_get_data>
			flush_rx_fifo();
    140c:	0e 94 4b 14 	call	0x2896	; 0x2896 <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && (rfData[3]==0b00001000 || rfData[3]==0b00011000) && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1410:	90 91 19 04 	lds	r25, 0x0419
    1414:	89 2f       	mov	r24, r25
    1416:	8f 77       	andi	r24, 0x7F	; 127
    1418:	80 93 d5 03 	sts	0x03D5, r24
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    141c:	60 91 1a 04 	lds	r22, 0x041A
    1420:	76 2f       	mov	r23, r22
    1422:	7f 77       	andi	r23, 0x7F	; 127
    1424:	70 93 d4 03 	sts	0x03D4, r23
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1428:	97 fd       	sbrc	r25, 7
    142a:	84 c2       	rjmp	.+1288   	; 0x1934 <main+0x7a4>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	90 95       	com	r25
    1438:	81 95       	neg	r24
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	9c 01       	movw	r18, r24
    143e:	44 27       	eor	r20, r20
    1440:	37 fd       	sbrc	r19, 7
    1442:	40 95       	com	r20
    1444:	54 2f       	mov	r21, r20
    1446:	20 93 9e 03 	sts	0x039E, r18
    144a:	30 93 9f 03 	sts	0x039F, r19
    144e:	40 93 a0 03 	sts	0x03A0, r20
    1452:	50 93 a1 03 	sts	0x03A1, r21
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1456:	67 fd       	sbrc	r22, 7
    1458:	5a c2       	rjmp	.+1204   	; 0x190e <main+0x77e>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    145a:	87 2f       	mov	r24, r23
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	90 95       	com	r25
    1468:	81 95       	neg	r24
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	aa 27       	eor	r26, r26
    146e:	97 fd       	sbrc	r25, 7
    1470:	a0 95       	com	r26
    1472:	ba 2f       	mov	r27, r26
    1474:	80 93 a2 03 	sts	0x03A2, r24
    1478:	90 93 a3 03 	sts	0x03A3, r25
    147c:	a0 93 a4 03 	sts	0x03A4, r26
    1480:	b0 93 a5 03 	sts	0x03A5, r27
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1484:	24 33       	cpi	r18, 0x34	; 52
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	36 07       	cpc	r19, r22
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	46 07       	cpc	r20, r22
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	56 07       	cpc	r21, r22
    1492:	64 f0       	brlt	.+24     	; 0x14ac <main+0x31c>
    1494:	80 92 9e 03 	sts	0x039E, r8
    1498:	90 92 9f 03 	sts	0x039F, r9
    149c:	a0 92 a0 03 	sts	0x03A0, r10
    14a0:	b0 92 a1 03 	sts	0x03A1, r11
    14a4:	23 e3       	ldi	r18, 0x33	; 51
    14a6:	31 e0       	ldi	r19, 0x01	; 1
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    14ac:	84 33       	cpi	r24, 0x34	; 52
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	96 07       	cpc	r25, r22
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	a6 07       	cpc	r26, r22
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	b6 07       	cpc	r27, r22
    14ba:	64 f0       	brlt	.+24     	; 0x14d4 <main+0x344>
    14bc:	80 92 a2 03 	sts	0x03A2, r8
    14c0:	90 92 a3 03 	sts	0x03A3, r9
    14c4:	a0 92 a4 03 	sts	0x03A4, r10
    14c8:	b0 92 a5 03 	sts	0x03A5, r11
    14cc:	83 e3       	ldi	r24, 0x33	; 51
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    14d4:	2d 3c       	cpi	r18, 0xCD	; 205
    14d6:	6e ef       	ldi	r22, 0xFE	; 254
    14d8:	36 07       	cpc	r19, r22
    14da:	6f ef       	ldi	r22, 0xFF	; 255
    14dc:	46 07       	cpc	r20, r22
    14de:	6f ef       	ldi	r22, 0xFF	; 255
    14e0:	56 07       	cpc	r21, r22
    14e2:	44 f4       	brge	.+16     	; 0x14f4 <main+0x364>
    14e4:	c0 92 9e 03 	sts	0x039E, r12
    14e8:	d0 92 9f 03 	sts	0x039F, r13
    14ec:	e0 92 a0 03 	sts	0x03A0, r14
    14f0:	f0 92 a1 03 	sts	0x03A1, r15
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    14f4:	8d 3c       	cpi	r24, 0xCD	; 205
    14f6:	2e ef       	ldi	r18, 0xFE	; 254
    14f8:	92 07       	cpc	r25, r18
    14fa:	2f ef       	ldi	r18, 0xFF	; 255
    14fc:	a2 07       	cpc	r26, r18
    14fe:	2f ef       	ldi	r18, 0xFF	; 255
    1500:	b2 07       	cpc	r27, r18
    1502:	44 f4       	brge	.+16     	; 0x1514 <main+0x384>
    1504:	c0 92 a2 03 	sts	0x03A2, r12
    1508:	d0 92 a3 03 	sts	0x03A3, r13
    150c:	e0 92 a4 03 	sts	0x03A4, r14
    1510:	f0 92 a5 03 	sts	0x03A5, r15
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    1514:	20 91 15 04 	lds	r18, 0x0415
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	30 93 10 04 	sts	0x0410, r19
    151e:	20 93 0f 04 	sts	0x040F, r18
    1522:	e0 91 16 04 	lds	r30, 0x0416
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	f0 93 12 04 	sts	0x0412, r31
    152c:	e0 93 11 04 	sts	0x0411, r30
    1530:	40 90 17 04 	lds	r4, 0x0417
    1534:	55 24       	eor	r5, r5
    1536:	50 92 14 04 	sts	0x0414, r5
    153a:	40 92 13 04 	sts	0x0413, r4
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    153e:	92 2f       	mov	r25, r18
    1540:	88 27       	eor	r24, r24
    1542:	82 1b       	sub	r24, r18
    1544:	93 0b       	sbc	r25, r19
    1546:	be 01       	movw	r22, r28
    1548:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    154c:	26 2f       	mov	r18, r22
    154e:	20 95       	com	r18
    1550:	20 93 0c 02 	sts	0x020C, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1554:	9e 2f       	mov	r25, r30
    1556:	88 27       	eor	r24, r24
    1558:	8e 1b       	sub	r24, r30
    155a:	9f 0b       	sbc	r25, r31
    155c:	be 01       	movw	r22, r28
    155e:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    1562:	60 95       	com	r22
    1564:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1568:	94 2d       	mov	r25, r4
    156a:	88 27       	eor	r24, r24
    156c:	84 19       	sub	r24, r4
    156e:	95 09       	sbc	r25, r5
    1570:	be 01       	movw	r22, r28
    1572:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
    1576:	60 95       	com	r22
    1578:	60 93 0d 02 	sts	0x020D, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    157c:	22 23       	and	r18, r18
    157e:	09 f4       	brne	.+2      	; 0x1582 <main+0x3f2>
    1580:	67 c1       	rjmp	.+718    	; 0x1850 <main+0x6c0>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1582:	80 91 80 00 	lds	r24, 0x0080
    1586:	80 68       	ori	r24, 0x80	; 128
    1588:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    158c:	82 2f       	mov	r24, r18
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	90 93 89 00 	sts	0x0089, r25
    1594:	80 93 88 00 	sts	0x0088, r24
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    1598:	80 91 0d 02 	lds	r24, 0x020D

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    159c:	88 23       	and	r24, r24
    159e:	09 f4       	brne	.+2      	; 0x15a2 <main+0x412>
    15a0:	50 c1       	rjmp	.+672    	; 0x1842 <main+0x6b2>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    15a2:	90 91 80 00 	lds	r25, 0x0080
    15a6:	90 62       	ori	r25, 0x20	; 32
    15a8:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	90 93 8b 00 	sts	0x008B, r25
    15b2:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    15b6:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <main+0x430>
    15be:	3a c1       	rjmp	.+628    	; 0x1834 <main+0x6a4>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    15c0:	90 91 80 00 	lds	r25, 0x0080
    15c4:	98 60       	ori	r25, 0x08	; 8
    15c6:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	90 93 8d 00 	sts	0x008D, r25
    15d0:	80 93 8c 00 	sts	0x008C, r24
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    15d4:	80 91 18 04 	lds	r24, 0x0418
    15d8:	80 ff       	sbrs	r24, 0
    15da:	83 c0       	rjmp	.+262    	; 0x16e2 <main+0x552>
				LED_IR1_LOW;
    15dc:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH; 
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    15de:	81 ff       	sbrs	r24, 1
    15e0:	7e c0       	rjmp	.+252    	; 0x16de <main+0x54e>
				LED_IR2_LOW;
    15e2:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    15e4:	98 2f       	mov	r25, r24
    15e6:	82 ff       	sbrs	r24, 2
    15e8:	77 c0       	rjmp	.+238    	; 0x16d8 <main+0x548>
				irEnabled = 1;
    15ea:	10 93 11 02 	sts	0x0211, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    15ee:	96 ff       	sbrs	r25, 6
    15f0:	70 c0       	rjmp	.+224    	; 0x16d2 <main+0x542>
				obstacleAvoidanceEnabled = 1;
    15f2:	10 93 f5 03 	sts	0x03F5, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    15f6:	88 0f       	add	r24, r24
    15f8:	88 0b       	sbc	r24, r24
    15fa:	81 23       	and	r24, r17
    15fc:	80 93 fa 03 	sts	0x03FA, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    1600:	80 91 0b 02 	lds	r24, 0x020B
    1604:	80 93 ff 03 	sts	0x03FF, r24

			switch(packetId) {
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	09 f4       	brne	.+2      	; 0x160e <main+0x47e>
    160c:	ba c5       	rjmp	.+2932   	; 0x2182 <main+0xff2>
    160e:	85 30       	cpi	r24, 0x05	; 5
    1610:	08 f0       	brcs	.+2      	; 0x1614 <main+0x484>
    1612:	25 c1       	rjmp	.+586    	; 0x185e <main+0x6ce>
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	09 f4       	brne	.+2      	; 0x161a <main+0x48a>
    1618:	39 c6       	rjmp	.+3186   	; 0x228c <__stack+0x8d>
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	60 e1       	ldi	r22, 0x10	; 16
    1620:	0e 94 de 14 	call	0x29bc	; 0x29bc <writeAckPayload>
    1624:	e0 ce       	rjmp	.-576    	; 0x13e6 <main+0x256>
			measBattery = 1;
		}

		if(irEnabled) {

			ir_move = e_get_data();
    1626:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <e_get_data>
    162a:	80 93 d8 03 	sts	0x03D8, r24

			if(command_received) {
    162e:	90 91 d9 03 	lds	r25, 0x03D9
    1632:	99 23       	and	r25, r25
    1634:	09 f4       	brne	.+2      	; 0x1638 <main+0x4a8>
    1636:	48 c0       	rjmp	.+144    	; 0x16c8 <main+0x538>

				command_received = 0;
    1638:	10 92 d9 03 	sts	0x03D9, r1

				switch(ir_move) {
    163c:	e8 2f       	mov	r30, r24
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	e5 33       	cpi	r30, 0x35	; 53
    1642:	f1 05       	cpc	r31, r1
    1644:	08 f4       	brcc	.+2      	; 0x1648 <main+0x4b8>
    1646:	03 c2       	rjmp	.+1030   	; 0x1a4e <main+0x8be>
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
    1648:	80 91 9e 03 	lds	r24, 0x039E
    164c:	90 91 9f 03 	lds	r25, 0x039F
    1650:	a0 91 a0 03 	lds	r26, 0x03A0
    1654:	b0 91 a1 03 	lds	r27, 0x03A1
    1658:	20 91 a2 03 	lds	r18, 0x03A2
    165c:	30 91 a3 03 	lds	r19, 0x03A3
    1660:	40 91 a4 03 	lds	r20, 0x03A4
    1664:	50 91 a5 03 	lds	r21, 0x03A5
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    1668:	b7 fd       	sbrc	r27, 7
    166a:	1f c2       	rjmp	.+1086   	; 0x1aaa <main+0x91a>
					speedr = pwm_right_desired >> 2;
    166c:	b5 95       	asr	r27
    166e:	a7 95       	ror	r26
    1670:	97 95       	ror	r25
    1672:	87 95       	ror	r24
    1674:	b5 95       	asr	r27
    1676:	a7 95       	ror	r26
    1678:	97 95       	ror	r25
    167a:	87 95       	ror	r24
				} else {
					speedr = (-pwm_right_desired) >> 2;
    167c:	80 93 d5 03 	sts	0x03D5, r24
				}
				if(pwm_left_desired >= 0) {
    1680:	57 fd       	sbrc	r21, 7
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <main+0x516>
					speedl = pwm_left_desired >> 2;
    1684:	da 01       	movw	r26, r20
    1686:	c9 01       	movw	r24, r18
    1688:	b5 95       	asr	r27
    168a:	a7 95       	ror	r26
    168c:	97 95       	ror	r25
    168e:	87 95       	ror	r24
    1690:	b5 95       	asr	r27
    1692:	a7 95       	ror	r26
    1694:	97 95       	ror	r25
    1696:	87 95       	ror	r24
    1698:	80 93 d4 03 	sts	0x03D4, r24
    169c:	80 91 f2 03 	lds	r24, 0x03F2
    16a0:	90 91 f3 03 	lds	r25, 0x03F3
    16a4:	94 ce       	rjmp	.-728    	; 0x13ce <main+0x23e>
				} else {
					speedl = (-pwm_left_desired) >> 2;
    16a6:	88 27       	eor	r24, r24
    16a8:	99 27       	eor	r25, r25
    16aa:	dc 01       	movw	r26, r24
    16ac:	82 1b       	sub	r24, r18
    16ae:	93 0b       	sbc	r25, r19
    16b0:	a4 0b       	sbc	r26, r20
    16b2:	b5 0b       	sbc	r27, r21
    16b4:	b5 95       	asr	r27
    16b6:	a7 95       	ror	r26
    16b8:	97 95       	ror	r25
    16ba:	87 95       	ror	r24
    16bc:	b5 95       	asr	r27
    16be:	a7 95       	ror	r26
    16c0:	97 95       	ror	r25
    16c2:	87 95       	ror	r24
    16c4:	80 93 d4 03 	sts	0x03D4, r24
    16c8:	80 91 f2 03 	lds	r24, 0x03F2
    16cc:	90 91 f3 03 	lds	r25, 0x03F3
    16d0:	7e ce       	rjmp	.-772    	; 0x13ce <main+0x23e>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    16d2:	10 92 f5 03 	sts	0x03F5, r1
    16d6:	8f cf       	rjmp	.-226    	; 0x15f6 <main+0x466>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    16d8:	10 92 11 02 	sts	0x0211, r1
    16dc:	88 cf       	rjmp	.-240    	; 0x15ee <main+0x45e>
			} 
			
			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    16de:	45 9a       	sbi	0x08, 5	; 8
    16e0:	81 cf       	rjmp	.-254    	; 0x15e4 <main+0x454>
			

			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH; 
    16e2:	44 9a       	sbi	0x08, 4	; 8
    16e4:	7c cf       	rjmp	.-264    	; 0x15de <main+0x44e>
			compute_right_vel = 0;
		}

		if(update_pwm) {

			update_pwm = 0;
    16e6:	10 92 d3 03 	sts	0x03D3, r1
			pwm_left = pwm_left_working;
    16ea:	20 91 cf 03 	lds	r18, 0x03CF
    16ee:	30 91 d0 03 	lds	r19, 0x03D0
    16f2:	40 91 d1 03 	lds	r20, 0x03D1
    16f6:	50 91 d2 03 	lds	r21, 0x03D2
    16fa:	20 93 9a 03 	sts	0x039A, r18
    16fe:	30 93 9b 03 	sts	0x039B, r19
    1702:	40 93 9c 03 	sts	0x039C, r20
    1706:	50 93 9d 03 	sts	0x039D, r21
			pwm_right = pwm_right_working;
    170a:	80 91 cb 03 	lds	r24, 0x03CB
    170e:	90 91 cc 03 	lds	r25, 0x03CC
    1712:	a0 91 cd 03 	lds	r26, 0x03CD
    1716:	b0 91 ce 03 	lds	r27, 0x03CE
    171a:	80 93 96 03 	sts	0x0396, r24
    171e:	90 93 97 03 	sts	0x0397, r25
    1722:	a0 93 98 03 	sts	0x0398, r26
    1726:	b0 93 99 03 	sts	0x0399, r27

			if(pwm_right >= 0) {
    172a:	b7 fd       	sbrc	r27, 7
    172c:	90 c6       	rjmp	.+3360   	; 0x244e <__stack+0x24f>
				OCR3A = (int)pwm_right;
    172e:	90 93 99 00 	sts	0x0099, r25
    1732:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    1736:	57 fd       	sbrc	r21, 7
    1738:	68 c6       	rjmp	.+3280   	; 0x240a <__stack+0x20b>
				OCR4A = pwm_left;
    173a:	30 93 a9 00 	sts	0x00A9, r19
    173e:	20 93 a8 00 	sts	0x00A8, r18
			} else {
				OCR4B = -pwm_left;
			}

			if(pwm_left == 0) {
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	41 05       	cpc	r20, r1
    1748:	51 05       	cpc	r21, r1
    174a:	09 f0       	breq	.+2      	; 0x174e <main+0x5be>
    174c:	88 c6       	rjmp	.+3344   	; 0x245e <__stack+0x25f>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    174e:	80 91 a0 00 	lds	r24, 0x00A0
    1752:	8f 75       	andi	r24, 0x5F	; 95
    1754:	80 93 a0 00 	sts	0x00A0, r24
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    1758:	80 91 02 01 	lds	r24, 0x0102
    175c:	87 7e       	andi	r24, 0xE7	; 231
    175e:	80 93 02 01 	sts	0x0102, r24
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    1762:	80 91 72 00 	lds	r24, 0x0072
    1766:	89 7f       	andi	r24, 0xF9	; 249
    1768:	80 93 72 00 	sts	0x0072, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    176c:	80 91 72 00 	lds	r24, 0x0072
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
				TCCR4A |= (1 << COM4B1);		// enable OCB
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
			}

			if(pwm_right == 0) {
    1776:	80 91 96 03 	lds	r24, 0x0396
    177a:	90 91 97 03 	lds	r25, 0x0397
    177e:	a0 91 98 03 	lds	r26, 0x0398
    1782:	b0 91 99 03 	lds	r27, 0x0399
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	a1 05       	cpc	r26, r1
    178a:	b1 05       	cpc	r27, r1
    178c:	09 f0       	breq	.+2      	; 0x1790 <main+0x600>
    178e:	81 c4       	rjmp	.+2306   	; 0x2092 <main+0xf02>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    1790:	80 91 90 00 	lds	r24, 0x0090
    1794:	8f 75       	andi	r24, 0x5F	; 95
    1796:	80 93 90 00 	sts	0x0090, r24
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    179a:	8e b1       	in	r24, 0x0e	; 14
    179c:	87 7e       	andi	r24, 0xE7	; 231
    179e:	8e b9       	out	0x0e, r24	; 14
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    17a0:	80 91 71 00 	lds	r24, 0x0071
    17a4:	89 7f       	andi	r24, 0xF9	; 249
    17a6:	80 93 71 00 	sts	0x0071, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    17aa:	80 91 71 00 	lds	r24, 0x0071
    17ae:	82 60       	ori	r24, 0x02	; 2
    17b0:	80 93 71 00 	sts	0x0071, r24
    17b4:	d4 cd       	rjmp	.-1112   	; 0x135e <main+0x1ce>
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control

			if(start_control && left_vel_changed && right_vel_changed) {
    17b6:	80 91 c8 03 	lds	r24, 0x03C8
    17ba:	88 23       	and	r24, r24
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <main+0x630>
    17be:	1b ce       	rjmp	.-970    	; 0x13f6 <main+0x266>
    17c0:	80 91 c9 03 	lds	r24, 0x03C9
    17c4:	88 23       	and	r24, r24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <main+0x63a>
    17c8:	16 ce       	rjmp	.-980    	; 0x13f6 <main+0x266>
    17ca:	80 91 ca 03 	lds	r24, 0x03CA
    17ce:	88 23       	and	r24, r24
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <main+0x644>
    17d2:	11 ce       	rjmp	.-990    	; 0x13f6 <main+0x266>
				pwm_right_working = pwm_right_desired;
    17d4:	80 91 9e 03 	lds	r24, 0x039E
    17d8:	90 91 9f 03 	lds	r25, 0x039F
    17dc:	a0 91 a0 03 	lds	r26, 0x03A0
    17e0:	b0 91 a1 03 	lds	r27, 0x03A1
    17e4:	80 93 cb 03 	sts	0x03CB, r24
    17e8:	90 93 cc 03 	sts	0x03CC, r25
    17ec:	a0 93 cd 03 	sts	0x03CD, r26
    17f0:	b0 93 ce 03 	sts	0x03CE, r27
				pwm_left_working = pwm_left_desired;
    17f4:	80 91 a2 03 	lds	r24, 0x03A2
    17f8:	90 91 a3 03 	lds	r25, 0x03A3
    17fc:	a0 91 a4 03 	lds	r26, 0x03A4
    1800:	b0 91 a5 03 	lds	r27, 0x03A5
    1804:	80 93 cf 03 	sts	0x03CF, r24
    1808:	90 93 d0 03 	sts	0x03D0, r25
    180c:	a0 93 d1 03 	sts	0x03D1, r26
    1810:	b0 93 d2 03 	sts	0x03D2, r27
				start_control = 0;
    1814:	10 92 c8 03 	sts	0x03C8, r1
				left_vel_changed = 0;
    1818:	10 92 c9 03 	sts	0x03C9, r1
				right_vel_changed = 0;
    181c:	10 92 ca 03 	sts	0x03CA, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    1820:	8f ec       	ldi	r24, 0xCF	; 207
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	6b ec       	ldi	r22, 0xCB	; 203
    1826:	73 e0       	ldi	r23, 0x03	; 3
    1828:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <start_orizzontal_speed_control>
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    182c:	10 93 d3 03 	sts	0x03D3, r17
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	66 cd       	rjmp	.-1332   	; 0x1300 <main+0x170>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    1834:	80 91 80 00 	lds	r24, 0x0080
    1838:	87 7f       	andi	r24, 0xF7	; 247
    183a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    183e:	2f 98       	cbi	0x05, 7	; 5
    1840:	c9 ce       	rjmp	.-622    	; 0x15d4 <main+0x444>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1842:	80 91 80 00 	lds	r24, 0x0080
    1846:	8f 7d       	andi	r24, 0xDF	; 223
    1848:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    184c:	2e 98       	cbi	0x05, 6	; 5
    184e:	b3 ce       	rjmp	.-666    	; 0x15b6 <main+0x426>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    1850:	80 91 80 00 	lds	r24, 0x0080
    1854:	8f 77       	andi	r24, 0x7F	; 127
    1856:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    185a:	2d 98       	cbi	0x05, 5	; 5
    185c:	9d ce       	rjmp	.-710    	; 0x1598 <main+0x408>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    185e:	85 30       	cpi	r24, 0x05	; 5
    1860:	09 f4       	brne	.+2      	; 0x1864 <main+0x6d4>
    1862:	33 c4       	rjmp	.+2150   	; 0x20ca <main+0xf3a>
    1864:	86 30       	cpi	r24, 0x06	; 6
    1866:	09 f0       	breq	.+2      	; 0x186a <main+0x6da>
    1868:	d8 ce       	rjmp	.-592    	; 0x161a <main+0x48a>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    186a:	80 91 39 03 	lds	r24, 0x0339
    186e:	90 91 3a 03 	lds	r25, 0x033A
    1872:	80 93 00 04 	sts	0x0400, r24
					ackPayload[2] = proximityValue[8]>>8;
    1876:	80 91 39 03 	lds	r24, 0x0339
    187a:	90 91 3a 03 	lds	r25, 0x033A
    187e:	90 93 01 04 	sts	0x0401, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    1882:	80 91 49 03 	lds	r24, 0x0349
    1886:	90 91 4a 03 	lds	r25, 0x034A
    188a:	80 93 02 04 	sts	0x0402, r24
					ackPayload[4] = proximityValue[16]>>8;
    188e:	80 91 49 03 	lds	r24, 0x0349
    1892:	90 91 4a 03 	lds	r25, 0x034A
    1896:	90 93 03 04 	sts	0x0403, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    189a:	80 91 4d 03 	lds	r24, 0x034D
    189e:	90 91 4e 03 	lds	r25, 0x034E
    18a2:	80 93 04 04 	sts	0x0404, r24
					ackPayload[6] = proximityValue[18]>>8;
    18a6:	80 91 4d 03 	lds	r24, 0x034D
    18aa:	90 91 4e 03 	lds	r25, 0x034E
    18ae:	90 93 05 04 	sts	0x0405, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    18b2:	80 91 51 03 	lds	r24, 0x0351
    18b6:	90 91 52 03 	lds	r25, 0x0352
    18ba:	80 93 06 04 	sts	0x0406, r24
					ackPayload[8] = proximityValue[20]>>8;
    18be:	80 91 51 03 	lds	r24, 0x0351
    18c2:	90 91 52 03 	lds	r25, 0x0352
    18c6:	90 93 07 04 	sts	0x0407, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    18ca:	80 91 55 03 	lds	r24, 0x0355
    18ce:	90 91 56 03 	lds	r25, 0x0356
    18d2:	80 93 08 04 	sts	0x0408, r24
					ackPayload[10] = proximityValue[22]>>8;
    18d6:	80 91 55 03 	lds	r24, 0x0355
    18da:	90 91 56 03 	lds	r25, 0x0356
    18de:	90 93 09 04 	sts	0x0409, r25
					ackPayload[11] = accZ&0xFF;
    18e2:	90 91 e1 03 	lds	r25, 0x03E1
    18e6:	80 91 e2 03 	lds	r24, 0x03E2
    18ea:	90 93 0a 04 	sts	0x040A, r25
					ackPayload[12] = accZ>>8;
    18ee:	80 93 0b 04 	sts	0x040B, r24
					ackPayload[13] = batteryLevel&0xFF;
    18f2:	90 91 75 03 	lds	r25, 0x0375
    18f6:	80 91 76 03 	lds	r24, 0x0376
    18fa:	90 93 0c 04 	sts	0x040C, r25
					ackPayload[14] = batteryLevel>>8;
    18fe:	80 93 0d 04 	sts	0x040D, r24
					ackPayload[15] = 0;				
    1902:	10 92 0e 04 	sts	0x040E, r1
					packetId = 3;
    1906:	53 e0       	ldi	r21, 0x03	; 3
    1908:	50 93 0b 02 	sts	0x020B, r21
					break;											
    190c:	86 ce       	rjmp	.-756    	; 0x161a <main+0x48a>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    190e:	87 2f       	mov	r24, r23
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	aa 27       	eor	r26, r26
    191c:	97 fd       	sbrc	r25, 7
    191e:	a0 95       	com	r26
    1920:	ba 2f       	mov	r27, r26
    1922:	80 93 a2 03 	sts	0x03A2, r24
    1926:	90 93 a3 03 	sts	0x03A3, r25
    192a:	a0 93 a4 03 	sts	0x03A4, r26
    192e:	b0 93 a5 03 	sts	0x03A5, r27
    1932:	a8 cd       	rjmp	.-1200   	; 0x1484 <main+0x2f4>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	22 0f       	add	r18, r18
    193a:	33 1f       	adc	r19, r19
    193c:	22 0f       	add	r18, r18
    193e:	33 1f       	adc	r19, r19
    1940:	44 27       	eor	r20, r20
    1942:	37 fd       	sbrc	r19, 7
    1944:	40 95       	com	r20
    1946:	54 2f       	mov	r21, r20
    1948:	20 93 9e 03 	sts	0x039E, r18
    194c:	30 93 9f 03 	sts	0x039F, r19
    1950:	40 93 a0 03 	sts	0x03A0, r20
    1954:	50 93 a1 03 	sts	0x03A1, r21
    1958:	7e cd       	rjmp	.-1284   	; 0x1456 <main+0x2c6>

void cliffAvoidance() {

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    195a:	20 91 49 03 	lds	r18, 0x0349
    195e:	30 91 4a 03 	lds	r19, 0x034A
    1962:	80 91 4b 03 	lds	r24, 0x034B
    1966:	90 91 4c 03 	lds	r25, 0x034C
    196a:	28 1b       	sub	r18, r24
    196c:	39 0b       	sbc	r19, r25
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    196e:	e0 91 4d 03 	lds	r30, 0x034D
    1972:	f0 91 4e 03 	lds	r31, 0x034E
    1976:	80 91 4f 03 	lds	r24, 0x034F
    197a:	90 91 50 03 	lds	r25, 0x0350
    197e:	e8 1b       	sub	r30, r24
    1980:	f9 0b       	sbc	r31, r25
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1982:	60 91 51 03 	lds	r22, 0x0351
    1986:	70 91 52 03 	lds	r23, 0x0352
    198a:	80 91 53 03 	lds	r24, 0x0353
    198e:	90 91 54 03 	lds	r25, 0x0354
    1992:	68 1b       	sub	r22, r24
    1994:	79 0b       	sbc	r23, r25
    1996:	77 fd       	sbrc	r23, 7
    1998:	e1 c5       	rjmp	.+3010   	; 0x255c <__stack+0x35d>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    199a:	40 91 55 03 	lds	r20, 0x0355
    199e:	50 91 56 03 	lds	r21, 0x0356
    19a2:	80 91 57 03 	lds	r24, 0x0357
    19a6:	90 91 58 03 	lds	r25, 0x0358
    19aa:	48 1b       	sub	r20, r24
    19ac:	59 0b       	sbc	r21, r25
    19ae:	57 fd       	sbrc	r21, 7
    19b0:	db c5       	rjmp	.+2998   	; 0x2568 <__stack+0x369>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    19b2:	37 fd       	sbrc	r19, 7
    19b4:	d6 c5       	rjmp	.+2988   	; 0x2562 <__stack+0x363>
    19b6:	30 93 fc 03 	sts	0x03FC, r19
    19ba:	20 93 fb 03 	sts	0x03FB, r18
	minGround = GROUND_LEFT;
    19be:	30 92 15 02 	sts	0x0215, r3
    19c2:	20 92 14 02 	sts	0x0214, r2
	if(g1 < minGroundValue) {
    19c6:	cf 01       	movw	r24, r30
    19c8:	f7 fd       	sbrc	r31, 7
    19ca:	c5 c5       	rjmp	.+2954   	; 0x2556 <__stack+0x357>
    19cc:	82 17       	cp	r24, r18
    19ce:	93 07       	cpc	r25, r19
    19d0:	58 f4       	brcc	.+22     	; 0x19e8 <main+0x858>
		minGroundValue = g1;
    19d2:	90 93 fc 03 	sts	0x03FC, r25
    19d6:	80 93 fb 03 	sts	0x03FB, r24
		minGround = GROUND_CENTER_LEFT;
    19da:	a2 e0       	ldi	r26, 0x02	; 2
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	b0 93 15 02 	sts	0x0215, r27
    19e2:	a0 93 14 02 	sts	0x0214, r26
    19e6:	9c 01       	movw	r18, r24
	}
	if(g2 < minGroundValue) {
    19e8:	62 17       	cp	r22, r18
    19ea:	73 07       	cpc	r23, r19
    19ec:	60 f4       	brcc	.+24     	; 0x1a06 <main+0x876>
		minGroundValue = g2;
    19ee:	70 93 fc 03 	sts	0x03FC, r23
    19f2:	60 93 fb 03 	sts	0x03FB, r22
		minGround = GROUND_CENTER_RIGHT;
    19f6:	21 e0       	ldi	r18, 0x01	; 1
    19f8:	42 2e       	mov	r4, r18
    19fa:	51 2c       	mov	r5, r1
    19fc:	50 92 15 02 	sts	0x0215, r5
    1a00:	40 92 14 02 	sts	0x0214, r4
    1a04:	9b 01       	movw	r18, r22
	}
	if(g3 < minGroundValue) {
    1a06:	42 17       	cp	r20, r18
    1a08:	53 07       	cpc	r21, r19
    1a0a:	48 f4       	brcc	.+18     	; 0x1a1e <main+0x88e>
		minGroundValue = g3;
    1a0c:	50 93 fc 03 	sts	0x03FC, r21
    1a10:	40 93 fb 03 	sts	0x03FB, r20
		minGround = GROUND_RIGHT;
    1a14:	10 92 15 02 	sts	0x0215, r1
    1a18:	10 92 14 02 	sts	0x0214, r1
    1a1c:	9a 01       	movw	r18, r20
	}

	if(minGroundValue <= CLIFF_THR) {
    1a1e:	24 37       	cpi	r18, 0x74	; 116
    1a20:	31 05       	cpc	r19, r1
    1a22:	08 f0       	brcs	.+2      	; 0x1a26 <main+0x896>
    1a24:	68 cc       	rjmp	.-1840   	; 0x12f6 <main+0x166>
		pwm_right_working = 0;
    1a26:	10 92 cb 03 	sts	0x03CB, r1
    1a2a:	10 92 cc 03 	sts	0x03CC, r1
    1a2e:	10 92 cd 03 	sts	0x03CD, r1
    1a32:	10 92 ce 03 	sts	0x03CE, r1
		pwm_left_working = 0;
    1a36:	10 92 cf 03 	sts	0x03CF, r1
    1a3a:	10 92 d0 03 	sts	0x03D0, r1
    1a3e:	10 92 d1 03 	sts	0x03D1, r1
    1a42:	10 92 d2 03 	sts	0x03D2, r1
    1a46:	57 cc       	rjmp	.-1874   	; 0x12f6 <main+0x166>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
				pwm_left_working = pwm_left_desired;
				
				if(obstacleAvoidanceEnabled) {
					//PORTB &= ~(1 << 7);
					obstacleAvoidance();
    1a48:	0e 94 14 07 	call	0xe28	; 0xe28 <obstacleAvoidance>
    1a4c:	4f cc       	rjmp	.-1890   	; 0x12ec <main+0x15c>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    1a4e:	ee 58       	subi	r30, 0x8E	; 142
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	05 90       	lpm	r0, Z+
    1a58:	f4 91       	lpm	r31, Z+
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	19 94       	eijmp
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;
					
					case 52:
						behaviorState = (behaviorState+1)%4;
    1a5e:	80 91 db 03 	lds	r24, 0x03DB
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	83 70       	andi	r24, 0x03	; 3
    1a68:	90 70       	andi	r25, 0x00	; 0
    1a6a:	80 93 db 03 	sts	0x03DB, r24
						switch(behaviorState) {
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	21 f1       	breq	.+72     	; 0x1aba <main+0x92a>
    1a72:	83 30       	cpi	r24, 0x03	; 3
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <main+0x8e8>
    1a76:	7b c5       	rjmp	.+2806   	; 0x256e <__stack+0x36f>
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <main+0x8ee>
    1a7c:	db c5       	rjmp	.+2998   	; 0x2634 <__stack+0x435>
							case 0: 
								obstacleAvoidanceEnabled = 0;
    1a7e:	10 92 f5 03 	sts	0x03F5, r1
								cliffAvoidanceEnabled = 0;
    1a82:	10 92 fa 03 	sts	0x03FA, r1
    1a86:	80 91 9e 03 	lds	r24, 0x039E
    1a8a:	90 91 9f 03 	lds	r25, 0x039F
    1a8e:	a0 91 a0 03 	lds	r26, 0x03A0
    1a92:	b0 91 a1 03 	lds	r27, 0x03A1
    1a96:	20 91 a2 03 	lds	r18, 0x03A2
    1a9a:	30 91 a3 03 	lds	r19, 0x03A3
    1a9e:	40 91 a4 03 	lds	r20, 0x03A4
    1aa2:	50 91 a5 03 	lds	r21, 0x03A5
	               	default:
	                 	break;

	            }	// switch
				
				if(pwm_right_desired >= 0) {
    1aa6:	b7 ff       	sbrs	r27, 7
    1aa8:	e1 cd       	rjmp	.-1086   	; 0x166c <main+0x4dc>
					speedr = pwm_right_desired >> 2;
    1aaa:	b0 95       	com	r27
    1aac:	a0 95       	com	r26
    1aae:	90 95       	com	r25
    1ab0:	81 95       	neg	r24
    1ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab4:	af 4f       	sbci	r26, 0xFF	; 255
    1ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab8:	d9 cd       	rjmp	.-1102   	; 0x166c <main+0x4dc>
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    1aba:	10 92 f5 03 	sts	0x03F5, r1
								cliffAvoidanceEnabled = 1;
    1abe:	10 93 fa 03 	sts	0x03FA, r17
    1ac2:	c2 cd       	rjmp	.-1148   	; 0x1648 <main+0x4b8>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;
					
					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    1ac4:	10 92 f5 03 	sts	0x03F5, r1
    1ac8:	80 91 9e 03 	lds	r24, 0x039E
    1acc:	90 91 9f 03 	lds	r25, 0x039F
    1ad0:	a0 91 a0 03 	lds	r26, 0x03A0
    1ad4:	b0 91 a1 03 	lds	r27, 0x03A1
    1ad8:	20 91 a2 03 	lds	r18, 0x03A2
    1adc:	30 91 a3 03 	lds	r19, 0x03A3
    1ae0:	40 91 a4 03 	lds	r20, 0x03A4
    1ae4:	50 91 a5 03 	lds	r21, 0x03A5
						break;
    1ae8:	bf cd       	rjmp	.-1154   	; 0x1668 <main+0x4d8>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    1aea:	10 93 f5 03 	sts	0x03F5, r17
    1aee:	80 91 9e 03 	lds	r24, 0x039E
    1af2:	90 91 9f 03 	lds	r25, 0x039F
    1af6:	a0 91 a0 03 	lds	r26, 0x03A0
    1afa:	b0 91 a1 03 	lds	r27, 0x03A1
    1afe:	20 91 a2 03 	lds	r18, 0x03A2
    1b02:	30 91 a3 03 	lds	r19, 0x03A3
    1b06:	40 91 a4 03 	lds	r20, 0x03A4
    1b0a:	50 91 a5 03 	lds	r21, 0x03A5
						break;
    1b0e:	ac cd       	rjmp	.-1192   	; 0x1668 <main+0x4d8>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    1b10:	20 91 a2 03 	lds	r18, 0x03A2
    1b14:	30 91 a3 03 	lds	r19, 0x03A3
    1b18:	40 91 a4 03 	lds	r20, 0x03A4
    1b1c:	50 91 a5 03 	lds	r21, 0x03A5
    1b20:	2e 51       	subi	r18, 0x1E	; 30
    1b22:	30 40       	sbci	r19, 0x00	; 0
    1b24:	40 40       	sbci	r20, 0x00	; 0
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	20 93 a2 03 	sts	0x03A2, r18
    1b2c:	30 93 a3 03 	sts	0x03A3, r19
    1b30:	40 93 a4 03 	sts	0x03A4, r20
    1b34:	50 93 a5 03 	sts	0x03A5, r21
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1b38:	2a 39       	cpi	r18, 0x9A	; 154
    1b3a:	9d ef       	ldi	r25, 0xFD	; 253
    1b3c:	39 07       	cpc	r19, r25
    1b3e:	9f ef       	ldi	r25, 0xFF	; 255
    1b40:	49 07       	cpc	r20, r25
    1b42:	9f ef       	ldi	r25, 0xFF	; 255
    1b44:	59 07       	cpc	r21, r25
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <main+0x9ba>
    1b48:	a9 c4       	rjmp	.+2386   	; 0x249c <__stack+0x29d>
    1b4a:	ea e9       	ldi	r30, 0x9A	; 154
    1b4c:	4e 2e       	mov	r4, r30
    1b4e:	ed ef       	ldi	r30, 0xFD	; 253
    1b50:	5e 2e       	mov	r5, r30
    1b52:	ef ef       	ldi	r30, 0xFF	; 255
    1b54:	6e 2e       	mov	r6, r30
    1b56:	ef ef       	ldi	r30, 0xFF	; 255
    1b58:	7e 2e       	mov	r7, r30
    1b5a:	40 92 a2 03 	sts	0x03A2, r4
    1b5e:	50 92 a3 03 	sts	0x03A3, r5
    1b62:	60 92 a4 03 	sts	0x03A4, r6
    1b66:	70 92 a5 03 	sts	0x03A5, r7
    1b6a:	80 91 9e 03 	lds	r24, 0x039E
    1b6e:	90 91 9f 03 	lds	r25, 0x039F
    1b72:	a0 91 a0 03 	lds	r26, 0x03A0
    1b76:	b0 91 a1 03 	lds	r27, 0x03A1
    1b7a:	2a e9       	ldi	r18, 0x9A	; 154
    1b7c:	3d ef       	ldi	r19, 0xFD	; 253
    1b7e:	4f ef       	ldi	r20, 0xFF	; 255
    1b80:	5f ef       	ldi	r21, 0xFF	; 255
    1b82:	72 cd       	rjmp	.-1308   	; 0x1668 <main+0x4d8>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    1b84:	20 91 9e 03 	lds	r18, 0x039E
    1b88:	30 91 9f 03 	lds	r19, 0x039F
    1b8c:	40 91 a0 03 	lds	r20, 0x03A0
    1b90:	50 91 a1 03 	lds	r21, 0x03A1
    1b94:	80 91 9a 03 	lds	r24, 0x039A
    1b98:	90 91 9b 03 	lds	r25, 0x039B
    1b9c:	a0 91 9c 03 	lds	r26, 0x039C
    1ba0:	b0 91 9d 03 	lds	r27, 0x039D
    1ba4:	28 17       	cp	r18, r24
    1ba6:	39 07       	cpc	r19, r25
    1ba8:	4a 07       	cpc	r20, r26
    1baa:	5b 07       	cpc	r21, r27
    1bac:	44 f0       	brlt	.+16     	; 0x1bbe <main+0xa2e>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    1bae:	20 91 a2 03 	lds	r18, 0x03A2
    1bb2:	30 91 a3 03 	lds	r19, 0x03A3
    1bb6:	40 91 a4 03 	lds	r20, 0x03A4
    1bba:	50 91 a5 03 	lds	r21, 0x03A5
						}
						pwm_right_desired -= STEP_MOTORS;
    1bbe:	da 01       	movw	r26, r20
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	4e 97       	sbiw	r24, 0x1e	; 30
    1bc4:	a1 09       	sbc	r26, r1
    1bc6:	b1 09       	sbc	r27, r1
    1bc8:	80 93 9e 03 	sts	0x039E, r24
    1bcc:	90 93 9f 03 	sts	0x039F, r25
    1bd0:	a0 93 a0 03 	sts	0x03A0, r26
    1bd4:	b0 93 a1 03 	sts	0x03A1, r27
						pwm_left_desired -= STEP_MOTORS;
    1bd8:	9c 01       	movw	r18, r24
    1bda:	ad 01       	movw	r20, r26
    1bdc:	80 93 a2 03 	sts	0x03A2, r24
    1be0:	90 93 a3 03 	sts	0x03A3, r25
    1be4:	a0 93 a4 03 	sts	0x03A4, r26
    1be8:	b0 93 a5 03 	sts	0x03A5, r27
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1bec:	8a 39       	cpi	r24, 0x9A	; 154
    1bee:	6d ef       	ldi	r22, 0xFD	; 253
    1bf0:	96 07       	cpc	r25, r22
    1bf2:	6f ef       	ldi	r22, 0xFF	; 255
    1bf4:	a6 07       	cpc	r26, r22
    1bf6:	6f ef       	ldi	r22, 0xFF	; 255
    1bf8:	b6 07       	cpc	r27, r22
    1bfa:	84 f4       	brge	.+32     	; 0x1c1c <main+0xa8c>
    1bfc:	6a e9       	ldi	r22, 0x9A	; 154
    1bfe:	46 2e       	mov	r4, r22
    1c00:	6d ef       	ldi	r22, 0xFD	; 253
    1c02:	56 2e       	mov	r5, r22
    1c04:	6f ef       	ldi	r22, 0xFF	; 255
    1c06:	66 2e       	mov	r6, r22
    1c08:	6f ef       	ldi	r22, 0xFF	; 255
    1c0a:	76 2e       	mov	r7, r22
    1c0c:	40 92 9e 03 	sts	0x039E, r4
    1c10:	50 92 9f 03 	sts	0x039F, r5
    1c14:	60 92 a0 03 	sts	0x03A0, r6
    1c18:	70 92 a1 03 	sts	0x03A1, r7
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    1c1c:	8a 39       	cpi	r24, 0x9A	; 154
    1c1e:	6d ef       	ldi	r22, 0xFD	; 253
    1c20:	96 07       	cpc	r25, r22
    1c22:	6f ef       	ldi	r22, 0xFF	; 255
    1c24:	a6 07       	cpc	r26, r22
    1c26:	6f ef       	ldi	r22, 0xFF	; 255
    1c28:	b6 07       	cpc	r27, r22
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <main+0xa9e>
    1c2c:	37 c4       	rjmp	.+2158   	; 0x249c <__stack+0x29d>
    1c2e:	8a e9       	ldi	r24, 0x9A	; 154
    1c30:	9d ef       	ldi	r25, 0xFD	; 253
    1c32:	af ef       	ldi	r26, 0xFF	; 255
    1c34:	bf ef       	ldi	r27, 0xFF	; 255
    1c36:	80 93 a2 03 	sts	0x03A2, r24
    1c3a:	90 93 a3 03 	sts	0x03A3, r25
    1c3e:	a0 93 a4 03 	sts	0x03A4, r26
    1c42:	b0 93 a5 03 	sts	0x03A5, r27
    1c46:	80 91 9e 03 	lds	r24, 0x039E
    1c4a:	90 91 9f 03 	lds	r25, 0x039F
    1c4e:	a0 91 a0 03 	lds	r26, 0x03A0
    1c52:	b0 91 a1 03 	lds	r27, 0x03A1
    1c56:	2a e9       	ldi	r18, 0x9A	; 154
    1c58:	3d ef       	ldi	r19, 0xFD	; 253
    1c5a:	4f ef       	ldi	r20, 0xFF	; 255
    1c5c:	5f ef       	ldi	r21, 0xFF	; 255
    1c5e:	04 cd       	rjmp	.-1528   	; 0x1668 <main+0x4d8>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    1c60:	80 91 9e 03 	lds	r24, 0x039E
    1c64:	90 91 9f 03 	lds	r25, 0x039F
    1c68:	a0 91 a0 03 	lds	r26, 0x03A0
    1c6c:	b0 91 a1 03 	lds	r27, 0x03A1
    1c70:	4e 97       	sbiw	r24, 0x1e	; 30
    1c72:	a1 09       	sbc	r26, r1
    1c74:	b1 09       	sbc	r27, r1
    1c76:	80 93 9e 03 	sts	0x039E, r24
    1c7a:	90 93 9f 03 	sts	0x039F, r25
    1c7e:	a0 93 a0 03 	sts	0x03A0, r26
    1c82:	b0 93 a1 03 	sts	0x03A1, r27
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1c86:	8a 39       	cpi	r24, 0x9A	; 154
    1c88:	2d ef       	ldi	r18, 0xFD	; 253
    1c8a:	92 07       	cpc	r25, r18
    1c8c:	2f ef       	ldi	r18, 0xFF	; 255
    1c8e:	a2 07       	cpc	r26, r18
    1c90:	2f ef       	ldi	r18, 0xFF	; 255
    1c92:	b2 07       	cpc	r27, r18
    1c94:	0c f0       	brlt	.+2      	; 0x1c98 <main+0xb08>
    1c96:	77 c4       	rjmp	.+2286   	; 0x2586 <__stack+0x387>
    1c98:	8a e9       	ldi	r24, 0x9A	; 154
    1c9a:	9d ef       	ldi	r25, 0xFD	; 253
    1c9c:	af ef       	ldi	r26, 0xFF	; 255
    1c9e:	bf ef       	ldi	r27, 0xFF	; 255
    1ca0:	80 93 9e 03 	sts	0x039E, r24
    1ca4:	90 93 9f 03 	sts	0x039F, r25
    1ca8:	a0 93 a0 03 	sts	0x03A0, r26
    1cac:	b0 93 a1 03 	sts	0x03A1, r27
    1cb0:	20 91 a2 03 	lds	r18, 0x03A2
    1cb4:	30 91 a3 03 	lds	r19, 0x03A3
    1cb8:	40 91 a4 03 	lds	r20, 0x03A4
    1cbc:	50 91 a5 03 	lds	r21, 0x03A5
    1cc0:	89 e9       	ldi	r24, 0x99	; 153
    1cc2:	dc cc       	rjmp	.-1608   	; 0x167c <main+0x4ec>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    1cc4:	80 91 9e 03 	lds	r24, 0x039E
    1cc8:	90 91 9f 03 	lds	r25, 0x039F
    1ccc:	a0 91 a0 03 	lds	r26, 0x03A0
    1cd0:	b0 91 a1 03 	lds	r27, 0x03A1
    1cd4:	4e 97       	sbiw	r24, 0x1e	; 30
    1cd6:	a1 09       	sbc	r26, r1
    1cd8:	b1 09       	sbc	r27, r1
    1cda:	80 93 9e 03 	sts	0x039E, r24
    1cde:	90 93 9f 03 	sts	0x039F, r25
    1ce2:	a0 93 a0 03 	sts	0x03A0, r26
    1ce6:	b0 93 a1 03 	sts	0x03A1, r27
						pwm_left_desired += STEP_MOTORS;
    1cea:	20 91 a2 03 	lds	r18, 0x03A2
    1cee:	30 91 a3 03 	lds	r19, 0x03A3
    1cf2:	40 91 a4 03 	lds	r20, 0x03A4
    1cf6:	50 91 a5 03 	lds	r21, 0x03A5
    1cfa:	22 5e       	subi	r18, 0xE2	; 226
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	4f 4f       	sbci	r20, 0xFF	; 255
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	20 93 a2 03 	sts	0x03A2, r18
    1d06:	30 93 a3 03 	sts	0x03A3, r19
    1d0a:	40 93 a4 03 	sts	0x03A4, r20
    1d0e:	50 93 a5 03 	sts	0x03A5, r21
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1d12:	8a 39       	cpi	r24, 0x9A	; 154
    1d14:	6d ef       	ldi	r22, 0xFD	; 253
    1d16:	96 07       	cpc	r25, r22
    1d18:	6f ef       	ldi	r22, 0xFF	; 255
    1d1a:	a6 07       	cpc	r26, r22
    1d1c:	6f ef       	ldi	r22, 0xFF	; 255
    1d1e:	b6 07       	cpc	r27, r22
    1d20:	64 f4       	brge	.+24     	; 0x1d3a <main+0xbaa>
    1d22:	8a e9       	ldi	r24, 0x9A	; 154
    1d24:	9d ef       	ldi	r25, 0xFD	; 253
    1d26:	af ef       	ldi	r26, 0xFF	; 255
    1d28:	bf ef       	ldi	r27, 0xFF	; 255
    1d2a:	80 93 9e 03 	sts	0x039E, r24
    1d2e:	90 93 9f 03 	sts	0x039F, r25
    1d32:	a0 93 a0 03 	sts	0x03A0, r26
    1d36:	b0 93 a1 03 	sts	0x03A1, r27
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1d3a:	27 36       	cpi	r18, 0x67	; 103
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	36 07       	cpc	r19, r22
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	46 07       	cpc	r20, r22
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	56 07       	cpc	r21, r22
    1d48:	0c f4       	brge	.+2      	; 0x1d4c <main+0xbbc>
    1d4a:	8e cc       	rjmp	.-1764   	; 0x1668 <main+0x4d8>
    1d4c:	26 e6       	ldi	r18, 0x66	; 102
    1d4e:	42 2e       	mov	r4, r18
    1d50:	22 e0       	ldi	r18, 0x02	; 2
    1d52:	52 2e       	mov	r5, r18
    1d54:	61 2c       	mov	r6, r1
    1d56:	71 2c       	mov	r7, r1
    1d58:	40 92 a2 03 	sts	0x03A2, r4
    1d5c:	50 92 a3 03 	sts	0x03A3, r5
    1d60:	60 92 a4 03 	sts	0x03A4, r6
    1d64:	70 92 a5 03 	sts	0x03A5, r7
    1d68:	26 e6       	ldi	r18, 0x66	; 102
    1d6a:	32 e0       	ldi	r19, 0x02	; 2
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	7b cc       	rjmp	.-1802   	; 0x1668 <main+0x4d8>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    1d72:	10 92 9e 03 	sts	0x039E, r1
    1d76:	10 92 9f 03 	sts	0x039F, r1
    1d7a:	10 92 a0 03 	sts	0x03A0, r1
    1d7e:	10 92 a1 03 	sts	0x03A1, r1
						pwm_left_desired = 0;
    1d82:	10 92 a2 03 	sts	0x03A2, r1
    1d86:	10 92 a3 03 	sts	0x03A3, r1
    1d8a:	10 92 a4 03 	sts	0x03A4, r1
    1d8e:	10 92 a5 03 	sts	0x03A5, r1
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	66 cc       	rjmp	.-1844   	; 0x166c <main+0x4dc>
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    1da0:	80 91 9e 03 	lds	r24, 0x039E
    1da4:	90 91 9f 03 	lds	r25, 0x039F
    1da8:	a0 91 a0 03 	lds	r26, 0x03A0
    1dac:	b0 91 a1 03 	lds	r27, 0x03A1
    1db0:	4e 96       	adiw	r24, 0x1e	; 30
    1db2:	a1 1d       	adc	r26, r1
    1db4:	b1 1d       	adc	r27, r1
    1db6:	80 93 9e 03 	sts	0x039E, r24
    1dba:	90 93 9f 03 	sts	0x039F, r25
    1dbe:	a0 93 a0 03 	sts	0x03A0, r26
    1dc2:	b0 93 a1 03 	sts	0x03A1, r27
						pwm_left_desired -= STEP_MOTORS;
    1dc6:	20 91 a2 03 	lds	r18, 0x03A2
    1dca:	30 91 a3 03 	lds	r19, 0x03A3
    1dce:	40 91 a4 03 	lds	r20, 0x03A4
    1dd2:	50 91 a5 03 	lds	r21, 0x03A5
    1dd6:	2e 51       	subi	r18, 0x1E	; 30
    1dd8:	30 40       	sbci	r19, 0x00	; 0
    1dda:	40 40       	sbci	r20, 0x00	; 0
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	20 93 a2 03 	sts	0x03A2, r18
    1de2:	30 93 a3 03 	sts	0x03A3, r19
    1de6:	40 93 a4 03 	sts	0x03A4, r20
    1dea:	50 93 a5 03 	sts	0x03A5, r21
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1dee:	87 36       	cpi	r24, 0x67	; 103
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	96 07       	cpc	r25, r22
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	a6 07       	cpc	r26, r22
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	b6 07       	cpc	r27, r22
    1dfc:	64 f0       	brlt	.+24     	; 0x1e16 <main+0xc86>
    1dfe:	86 e6       	ldi	r24, 0x66	; 102
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	a0 e0       	ldi	r26, 0x00	; 0
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	80 93 9e 03 	sts	0x039E, r24
    1e0a:	90 93 9f 03 	sts	0x039F, r25
    1e0e:	a0 93 a0 03 	sts	0x03A0, r26
    1e12:	b0 93 a1 03 	sts	0x03A1, r27
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1e16:	2a 39       	cpi	r18, 0x9A	; 154
    1e18:	6d ef       	ldi	r22, 0xFD	; 253
    1e1a:	36 07       	cpc	r19, r22
    1e1c:	6f ef       	ldi	r22, 0xFF	; 255
    1e1e:	46 07       	cpc	r20, r22
    1e20:	6f ef       	ldi	r22, 0xFF	; 255
    1e22:	56 07       	cpc	r21, r22
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <main+0xc98>
    1e26:	20 cc       	rjmp	.-1984   	; 0x1668 <main+0x4d8>
    1e28:	fa e9       	ldi	r31, 0x9A	; 154
    1e2a:	4f 2e       	mov	r4, r31
    1e2c:	fd ef       	ldi	r31, 0xFD	; 253
    1e2e:	5f 2e       	mov	r5, r31
    1e30:	ff ef       	ldi	r31, 0xFF	; 255
    1e32:	6f 2e       	mov	r6, r31
    1e34:	ff ef       	ldi	r31, 0xFF	; 255
    1e36:	7f 2e       	mov	r7, r31
    1e38:	40 92 a2 03 	sts	0x03A2, r4
    1e3c:	50 92 a3 03 	sts	0x03A3, r5
    1e40:	60 92 a4 03 	sts	0x03A4, r6
    1e44:	70 92 a5 03 	sts	0x03A5, r7
    1e48:	2a e9       	ldi	r18, 0x9A	; 154
    1e4a:	3d ef       	ldi	r19, 0xFD	; 253
    1e4c:	4f ef       	ldi	r20, 0xFF	; 255
    1e4e:	5f ef       	ldi	r21, 0xFF	; 255
    1e50:	0b cc       	rjmp	.-2026   	; 0x1668 <main+0x4d8>
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    1e52:	20 91 a2 03 	lds	r18, 0x03A2
    1e56:	30 91 a3 03 	lds	r19, 0x03A3
    1e5a:	40 91 a4 03 	lds	r20, 0x03A4
    1e5e:	50 91 a5 03 	lds	r21, 0x03A5
    1e62:	22 5e       	subi	r18, 0xE2	; 226
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	4f 4f       	sbci	r20, 0xFF	; 255
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	20 93 a2 03 	sts	0x03A2, r18
    1e6e:	30 93 a3 03 	sts	0x03A3, r19
    1e72:	40 93 a4 03 	sts	0x03A4, r20
    1e76:	50 93 a5 03 	sts	0x03A5, r21
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1e7a:	27 36       	cpi	r18, 0x67	; 103
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	36 07       	cpc	r19, r22
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	46 07       	cpc	r20, r22
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	56 07       	cpc	r21, r22
    1e88:	0c f4       	brge	.+2      	; 0x1e8c <main+0xcfc>
    1e8a:	08 c3       	rjmp	.+1552   	; 0x249c <__stack+0x29d>
    1e8c:	86 e6       	ldi	r24, 0x66	; 102
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	80 93 a2 03 	sts	0x03A2, r24
    1e98:	90 93 a3 03 	sts	0x03A3, r25
    1e9c:	a0 93 a4 03 	sts	0x03A4, r26
    1ea0:	b0 93 a5 03 	sts	0x03A5, r27
    1ea4:	80 91 9e 03 	lds	r24, 0x039E
    1ea8:	90 91 9f 03 	lds	r25, 0x039F
    1eac:	a0 91 a0 03 	lds	r26, 0x03A0
    1eb0:	b0 91 a1 03 	lds	r27, 0x03A1
    1eb4:	26 e6       	ldi	r18, 0x66	; 102
    1eb6:	32 e0       	ldi	r19, 0x02	; 2
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	d5 cb       	rjmp	.-2134   	; 0x1668 <main+0x4d8>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    1ebe:	80 91 9e 03 	lds	r24, 0x039E
    1ec2:	90 91 9f 03 	lds	r25, 0x039F
    1ec6:	a0 91 a0 03 	lds	r26, 0x03A0
    1eca:	b0 91 a1 03 	lds	r27, 0x03A1
    1ece:	20 91 a2 03 	lds	r18, 0x03A2
    1ed2:	30 91 a3 03 	lds	r19, 0x03A3
    1ed6:	40 91 a4 03 	lds	r20, 0x03A4
    1eda:	50 91 a5 03 	lds	r21, 0x03A5
    1ede:	28 17       	cp	r18, r24
    1ee0:	39 07       	cpc	r19, r25
    1ee2:	4a 07       	cpc	r20, r26
    1ee4:	5b 07       	cpc	r21, r27
    1ee6:	0c f4       	brge	.+2      	; 0x1eea <main+0xd5a>
    1ee8:	6e c3       	rjmp	.+1756   	; 0x25c6 <__stack+0x3c7>
    1eea:	da 01       	movw	r26, r20
    1eec:	c9 01       	movw	r24, r18
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    1eee:	4e 96       	adiw	r24, 0x1e	; 30
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	b1 1d       	adc	r27, r1
    1ef4:	80 93 9e 03 	sts	0x039E, r24
    1ef8:	90 93 9f 03 	sts	0x039F, r25
    1efc:	a0 93 a0 03 	sts	0x03A0, r26
    1f00:	b0 93 a1 03 	sts	0x03A1, r27
						pwm_left_desired += STEP_MOTORS;
    1f04:	22 5e       	subi	r18, 0xE2	; 226
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	4f 4f       	sbci	r20, 0xFF	; 255
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	20 93 a2 03 	sts	0x03A2, r18
    1f10:	30 93 a3 03 	sts	0x03A3, r19
    1f14:	40 93 a4 03 	sts	0x03A4, r20
    1f18:	50 93 a5 03 	sts	0x03A5, r21
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    1f1c:	87 36       	cpi	r24, 0x67	; 103
    1f1e:	62 e0       	ldi	r22, 0x02	; 2
    1f20:	96 07       	cpc	r25, r22
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	a6 07       	cpc	r26, r22
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	b6 07       	cpc	r27, r22
    1f2a:	64 f0       	brlt	.+24     	; 0x1f44 <main+0xdb4>
    1f2c:	86 e6       	ldi	r24, 0x66	; 102
    1f2e:	92 e0       	ldi	r25, 0x02	; 2
    1f30:	a0 e0       	ldi	r26, 0x00	; 0
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	80 93 9e 03 	sts	0x039E, r24
    1f38:	90 93 9f 03 	sts	0x039F, r25
    1f3c:	a0 93 a0 03 	sts	0x03A0, r26
    1f40:	b0 93 a1 03 	sts	0x03A1, r27
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    1f44:	27 36       	cpi	r18, 0x67	; 103
    1f46:	92 e0       	ldi	r25, 0x02	; 2
    1f48:	39 07       	cpc	r19, r25
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	49 07       	cpc	r20, r25
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	59 07       	cpc	r21, r25
    1f52:	0c f4       	brge	.+2      	; 0x1f56 <main+0xdc6>
    1f54:	a3 c2       	rjmp	.+1350   	; 0x249c <__stack+0x29d>
    1f56:	76 e6       	ldi	r23, 0x66	; 102
    1f58:	47 2e       	mov	r4, r23
    1f5a:	72 e0       	ldi	r23, 0x02	; 2
    1f5c:	57 2e       	mov	r5, r23
    1f5e:	61 2c       	mov	r6, r1
    1f60:	71 2c       	mov	r7, r1
    1f62:	40 92 a2 03 	sts	0x03A2, r4
    1f66:	50 92 a3 03 	sts	0x03A3, r5
    1f6a:	60 92 a4 03 	sts	0x03A4, r6
    1f6e:	70 92 a5 03 	sts	0x03A5, r7
    1f72:	80 91 9e 03 	lds	r24, 0x039E
    1f76:	90 91 9f 03 	lds	r25, 0x039F
    1f7a:	a0 91 a0 03 	lds	r26, 0x03A0
    1f7e:	b0 91 a1 03 	lds	r27, 0x03A1
    1f82:	26 e6       	ldi	r18, 0x66	; 102
    1f84:	32 e0       	ldi	r19, 0x02	; 2
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	6e cb       	rjmp	.-2340   	; 0x1668 <main+0x4d8>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1f8c:	80 91 9e 03 	lds	r24, 0x039E
    1f90:	90 91 9f 03 	lds	r25, 0x039F
    1f94:	a0 91 a0 03 	lds	r26, 0x03A0
    1f98:	b0 91 a1 03 	lds	r27, 0x03A1
    1f9c:	4e 96       	adiw	r24, 0x1e	; 30
    1f9e:	a1 1d       	adc	r26, r1
    1fa0:	b1 1d       	adc	r27, r1
    1fa2:	80 93 9e 03 	sts	0x039E, r24
    1fa6:	90 93 9f 03 	sts	0x039F, r25
    1faa:	a0 93 a0 03 	sts	0x03A0, r26
    1fae:	b0 93 a1 03 	sts	0x03A1, r27
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1fb2:	87 36       	cpi	r24, 0x67	; 103
    1fb4:	22 e0       	ldi	r18, 0x02	; 2
    1fb6:	92 07       	cpc	r25, r18
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	a2 07       	cpc	r26, r18
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	b2 07       	cpc	r27, r18
    1fc0:	0c f4       	brge	.+2      	; 0x1fc4 <main+0xe34>
    1fc2:	e1 c2       	rjmp	.+1474   	; 0x2586 <__stack+0x387>
    1fc4:	86 e6       	ldi	r24, 0x66	; 102
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	80 93 9e 03 	sts	0x039E, r24
    1fd0:	90 93 9f 03 	sts	0x039F, r25
    1fd4:	a0 93 a0 03 	sts	0x03A0, r26
    1fd8:	b0 93 a1 03 	sts	0x03A1, r27
    1fdc:	20 91 a2 03 	lds	r18, 0x03A2
    1fe0:	30 91 a3 03 	lds	r19, 0x03A3
    1fe4:	40 91 a4 03 	lds	r20, 0x03A4
    1fe8:	50 91 a5 03 	lds	r21, 0x03A5
    1fec:	89 e9       	ldi	r24, 0x99	; 153
    1fee:	46 cb       	rjmp	.-2420   	; 0x167c <main+0x4ec>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    1ff0:	80 91 da 03 	lds	r24, 0x03DA
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	65 e0       	ldi	r22, 0x05	; 5
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	0e 94 a0 21 	call	0x4340	; 0x4340 <__divmodhi4>
    2000:	80 93 da 03 	sts	0x03DA, r24

						if(colorState==0) {		// turn on blue
    2004:	88 23       	and	r24, r24
    2006:	09 f0       	breq	.+2      	; 0x200a <main+0xe7a>
    2008:	e1 c2       	rjmp	.+1474   	; 0x25cc <__stack+0x3cd>
							LED_IR1_HIGH;
    200a:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    200c:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    200e:	10 92 0e 02 	sts	0x020E, r1
							pwm_green = MAX_LEDS_PWM;
    2012:	9f ef       	ldi	r25, 0xFF	; 255
    2014:	90 93 0d 02 	sts	0x020D, r25
							pwm_red = MAX_LEDS_PWM;					
    2018:	90 93 0c 02 	sts	0x020C, r25

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    201c:	80 91 80 00 	lds	r24, 0x0080
    2020:	80 68       	ori	r24, 0x80	; 128
    2022:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    2026:	7f ef       	ldi	r23, 0xFF	; 255
    2028:	67 2e       	mov	r6, r23
    202a:	71 2c       	mov	r7, r1
    202c:	70 92 89 00 	sts	0x0089, r7
    2030:	60 92 88 00 	sts	0x0088, r6
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
    2034:	80 91 0d 02 	lds	r24, 0x020D

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    2038:	88 23       	and	r24, r24
    203a:	09 f4       	brne	.+2      	; 0x203e <main+0xeae>
    203c:	d9 c2       	rjmp	.+1458   	; 0x25f0 <__stack+0x3f1>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    203e:	90 91 80 00 	lds	r25, 0x0080
    2042:	90 62       	ori	r25, 0x20	; 32
    2044:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	90 93 8b 00 	sts	0x008B, r25
    204e:	80 93 8a 00 	sts	0x008A, r24
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    2052:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    2056:	88 23       	and	r24, r24
    2058:	09 f4       	brne	.+2      	; 0x205c <main+0xecc>
    205a:	d5 c2       	rjmp	.+1450   	; 0x2606 <__stack+0x407>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    205c:	90 91 80 00 	lds	r25, 0x0080
    2060:	98 60       	ori	r25, 0x08	; 8
    2062:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	90 93 8d 00 	sts	0x008D, r25
    206c:	80 93 8c 00 	sts	0x008C, r24
    2070:	80 91 9e 03 	lds	r24, 0x039E
    2074:	90 91 9f 03 	lds	r25, 0x039F
    2078:	a0 91 a0 03 	lds	r26, 0x03A0
    207c:	b0 91 a1 03 	lds	r27, 0x03A1
    2080:	20 91 a2 03 	lds	r18, 0x03A2
    2084:	30 91 a3 03 	lds	r19, 0x03A3
    2088:	40 91 a4 03 	lds	r20, 0x03A4
    208c:	50 91 a5 03 	lds	r21, 0x03A5
    2090:	eb ca       	rjmp	.-2602   	; 0x1668 <main+0x4d8>
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			}else if(pwm_right > 0) {   		// move forward
    2092:	18 16       	cp	r1, r24
    2094:	19 06       	cpc	r1, r25
    2096:	1a 06       	cpc	r1, r26
    2098:	1b 06       	cpc	r1, r27
    209a:	0c f0       	brlt	.+2      	; 0x209e <main+0xf0e>
    209c:	7d c2       	rjmp	.+1274   	; 0x2598 <__stack+0x399>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    209e:	80 91 90 00 	lds	r24, 0x0090
    20a2:	8f 7d       	andi	r24, 0xDF	; 223
    20a4:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    20a8:	80 91 71 00 	lds	r24, 0x0071
    20ac:	8b 7f       	andi	r24, 0xFB	; 251
    20ae:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 4);				// output to 0
    20b2:	74 98       	cbi	0x0e, 4	; 14
				TCCR3A |= (1 << COM3A1);		// enable OCA
    20b4:	80 91 90 00 	lds	r24, 0x0090
    20b8:	80 68       	ori	r24, 0x80	; 128
    20ba:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    20be:	80 91 71 00 	lds	r24, 0x0071
    20c2:	82 60       	ori	r24, 0x02	; 2
    20c4:	80 93 71 00 	sts	0x0071, r24
    20c8:	4a c9       	rjmp	.-3436   	; 0x135e <main+0x1ce>
					ackPayload[15] = ir_move;			
					packetId = 5;
					break;
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    20ca:	80 91 29 03 	lds	r24, 0x0329
    20ce:	90 91 2a 03 	lds	r25, 0x032A
    20d2:	80 93 00 04 	sts	0x0400, r24
					ackPayload[2] = proximityValue[0]>>8;
    20d6:	80 91 29 03 	lds	r24, 0x0329
    20da:	90 91 2a 03 	lds	r25, 0x032A
    20de:	90 93 01 04 	sts	0x0401, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    20e2:	80 91 2d 03 	lds	r24, 0x032D
    20e6:	90 91 2e 03 	lds	r25, 0x032E
    20ea:	80 93 02 04 	sts	0x0402, r24
					ackPayload[4] = proximityValue[2]>>8;
    20ee:	80 91 2d 03 	lds	r24, 0x032D
    20f2:	90 91 2e 03 	lds	r25, 0x032E
    20f6:	90 93 03 04 	sts	0x0403, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    20fa:	80 91 31 03 	lds	r24, 0x0331
    20fe:	90 91 32 03 	lds	r25, 0x0332
    2102:	80 93 04 04 	sts	0x0404, r24
					ackPayload[6] = proximityValue[4]>>8;
    2106:	80 91 31 03 	lds	r24, 0x0331
    210a:	90 91 32 03 	lds	r25, 0x0332
    210e:	90 93 05 04 	sts	0x0405, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2112:	80 91 35 03 	lds	r24, 0x0335
    2116:	90 91 36 03 	lds	r25, 0x0336
    211a:	80 93 06 04 	sts	0x0406, r24
					ackPayload[8] = proximityValue[6]>>8;
    211e:	80 91 35 03 	lds	r24, 0x0335
    2122:	90 91 36 03 	lds	r25, 0x0336
    2126:	90 93 07 04 	sts	0x0407, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    212a:	80 91 3d 03 	lds	r24, 0x033D
    212e:	90 91 3e 03 	lds	r25, 0x033E
    2132:	80 93 08 04 	sts	0x0408, r24
					ackPayload[10] = proximityValue[10]>>8;
    2136:	80 91 3d 03 	lds	r24, 0x033D
    213a:	90 91 3e 03 	lds	r25, 0x033E
    213e:	90 93 09 04 	sts	0x0409, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2142:	80 91 41 03 	lds	r24, 0x0341
    2146:	90 91 42 03 	lds	r25, 0x0342
    214a:	80 93 0a 04 	sts	0x040A, r24
					ackPayload[12] = proximityValue[12]>>8;
    214e:	80 91 41 03 	lds	r24, 0x0341
    2152:	90 91 42 03 	lds	r25, 0x0342
    2156:	90 93 0b 04 	sts	0x040B, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    215a:	80 91 45 03 	lds	r24, 0x0345
    215e:	90 91 46 03 	lds	r25, 0x0346
    2162:	80 93 0c 04 	sts	0x040C, r24
					ackPayload[14] = proximityValue[14]>>8;
    2166:	80 91 45 03 	lds	r24, 0x0345
    216a:	90 91 46 03 	lds	r25, 0x0346
    216e:	90 93 0d 04 	sts	0x040D, r25
					ackPayload[15] = currentSelector;
    2172:	80 91 f4 03 	lds	r24, 0x03F4
    2176:	80 93 0e 04 	sts	0x040E, r24
					packetId = 6;
    217a:	46 e0       	ldi	r20, 0x06	; 6
    217c:	40 93 0b 02 	sts	0x020B, r20
					break;	
    2180:	4c ca       	rjmp	.-2920   	; 0x161a <main+0x48a>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
    2182:	20 91 39 03 	lds	r18, 0x0339
    2186:	30 91 3a 03 	lds	r19, 0x033A
    218a:	80 91 3b 03 	lds	r24, 0x033B
    218e:	90 91 3c 03 	lds	r25, 0x033C
    2192:	28 1b       	sub	r18, r24
    2194:	39 0b       	sbc	r19, r25
    2196:	30 93 62 03 	sts	0x0362, r19
    219a:	20 93 61 03 	sts	0x0361, r18
					if(proximityResult[4] < 0) {
    219e:	37 fd       	sbrc	r19, 7
    21a0:	a2 c1       	rjmp	.+836    	; 0x24e6 <__stack+0x2e7>
    21a2:	92 2f       	mov	r25, r18
    21a4:	83 2f       	mov	r24, r19
						proximityResult[4] = 0;
					}
					ackPayload[1] = proximityResult[4]&0xFF;
    21a6:	90 93 00 04 	sts	0x0400, r25
					ackPayload[2] = proximityResult[4]>>8;
    21aa:	80 93 01 04 	sts	0x0401, r24

					proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    21ae:	20 91 49 03 	lds	r18, 0x0349
    21b2:	30 91 4a 03 	lds	r19, 0x034A
    21b6:	80 91 4b 03 	lds	r24, 0x034B
    21ba:	90 91 4c 03 	lds	r25, 0x034C
    21be:	28 1b       	sub	r18, r24
    21c0:	39 0b       	sbc	r19, r25
    21c2:	30 93 6a 03 	sts	0x036A, r19
    21c6:	20 93 69 03 	sts	0x0369, r18
					if(proximityResult[8] < 0) {
    21ca:	37 fd       	sbrc	r19, 7
    21cc:	85 c1       	rjmp	.+778    	; 0x24d8 <__stack+0x2d9>
    21ce:	92 2f       	mov	r25, r18
    21d0:	83 2f       	mov	r24, r19
						proximityResult[8] = 0;
					}
					ackPayload[3] = proximityResult[8]&0xFF;
    21d2:	90 93 02 04 	sts	0x0402, r25
					ackPayload[4] = proximityResult[8]>>8;
    21d6:	80 93 03 04 	sts	0x0403, r24

					proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    21da:	20 91 4d 03 	lds	r18, 0x034D
    21de:	30 91 4e 03 	lds	r19, 0x034E
    21e2:	80 91 4f 03 	lds	r24, 0x034F
    21e6:	90 91 50 03 	lds	r25, 0x0350
    21ea:	28 1b       	sub	r18, r24
    21ec:	39 0b       	sbc	r19, r25
    21ee:	30 93 6c 03 	sts	0x036C, r19
    21f2:	20 93 6b 03 	sts	0x036B, r18
					if(proximityResult[9] < 0) {
    21f6:	37 fd       	sbrc	r19, 7
    21f8:	68 c1       	rjmp	.+720    	; 0x24ca <__stack+0x2cb>
    21fa:	92 2f       	mov	r25, r18
    21fc:	83 2f       	mov	r24, r19
						proximityResult[9] = 0;
					}
					ackPayload[5] = proximityResult[9]&0xFF;
    21fe:	90 93 04 04 	sts	0x0404, r25
					ackPayload[6] = proximityResult[9]>>8;
    2202:	80 93 05 04 	sts	0x0405, r24

					proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    2206:	20 91 51 03 	lds	r18, 0x0351
    220a:	30 91 52 03 	lds	r19, 0x0352
    220e:	80 91 53 03 	lds	r24, 0x0353
    2212:	90 91 54 03 	lds	r25, 0x0354
    2216:	28 1b       	sub	r18, r24
    2218:	39 0b       	sbc	r19, r25
    221a:	30 93 6e 03 	sts	0x036E, r19
    221e:	20 93 6d 03 	sts	0x036D, r18
					if(proximityResult[10] < 0) {
    2222:	37 fd       	sbrc	r19, 7
    2224:	4b c1       	rjmp	.+662    	; 0x24bc <__stack+0x2bd>
    2226:	92 2f       	mov	r25, r18
    2228:	83 2f       	mov	r24, r19
						proximityResult[10] = 0;
					}
					ackPayload[7] = proximityResult[10]&0xFF;
    222a:	90 93 06 04 	sts	0x0406, r25
					ackPayload[8] = proximityResult[10]>>8;
    222e:	80 93 07 04 	sts	0x0407, r24

					proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    2232:	20 91 55 03 	lds	r18, 0x0355
    2236:	30 91 56 03 	lds	r19, 0x0356
    223a:	80 91 57 03 	lds	r24, 0x0357
    223e:	90 91 58 03 	lds	r25, 0x0358
    2242:	28 1b       	sub	r18, r24
    2244:	39 0b       	sbc	r19, r25
    2246:	30 93 70 03 	sts	0x0370, r19
    224a:	20 93 6f 03 	sts	0x036F, r18
					if(proximityResult[11] < 0) {
    224e:	37 fd       	sbrc	r19, 7
    2250:	2e c1       	rjmp	.+604    	; 0x24ae <__stack+0x2af>
    2252:	92 2f       	mov	r25, r18
    2254:	83 2f       	mov	r24, r19
						proximityResult[11] = 0;
					}
					ackPayload[9] = proximityResult[11]&0xFF;
    2256:	90 93 08 04 	sts	0x0408, r25
					ackPayload[10] = proximityResult[11]>>8;
    225a:	80 93 09 04 	sts	0x0409, r24

					ackPayload[11] = accX&0xFF;
    225e:	90 91 dd 03 	lds	r25, 0x03DD
    2262:	80 91 de 03 	lds	r24, 0x03DE
    2266:	90 93 0a 04 	sts	0x040A, r25
					ackPayload[12] = accX>>8;
    226a:	80 93 0b 04 	sts	0x040B, r24
					ackPayload[13] = accY&0xFF;
    226e:	90 91 df 03 	lds	r25, 0x03DF
    2272:	80 91 e0 03 	lds	r24, 0x03E0
    2276:	90 93 0c 04 	sts	0x040C, r25
					ackPayload[14] = accY>>8;
    227a:	80 93 0d 04 	sts	0x040D, r24
					ackPayload[15] = ir_move;			
    227e:	80 91 d8 03 	lds	r24, 0x03D8
    2282:	80 93 0e 04 	sts	0x040E, r24
					packetId = 5;
    2286:	00 93 0b 02 	sts	0x020B, r16
					break;
    228a:	c7 c9       	rjmp	.-3186   	; 0x161a <main+0x48a>

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
    228c:	20 91 29 03 	lds	r18, 0x0329
    2290:	30 91 2a 03 	lds	r19, 0x032A
    2294:	80 91 2b 03 	lds	r24, 0x032B
    2298:	90 91 2c 03 	lds	r25, 0x032C
    229c:	28 1b       	sub	r18, r24
    229e:	39 0b       	sbc	r19, r25
    22a0:	30 93 5a 03 	sts	0x035A, r19
    22a4:	20 93 59 03 	sts	0x0359, r18
					if(proximityResult[0] < 0) {
    22a8:	37 fd       	sbrc	r19, 7
    22aa:	4e c1       	rjmp	.+668    	; 0x2548 <__stack+0x349>
    22ac:	92 2f       	mov	r25, r18
    22ae:	83 2f       	mov	r24, r19
						proximityResult[0] = 0;
					}
					ackPayload[1] = proximityResult[0]&0xFF;
    22b0:	90 93 00 04 	sts	0x0400, r25
					ackPayload[2] = proximityResult[0]>>8;
    22b4:	80 93 01 04 	sts	0x0401, r24

					proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
    22b8:	20 91 2d 03 	lds	r18, 0x032D
    22bc:	30 91 2e 03 	lds	r19, 0x032E
    22c0:	80 91 2f 03 	lds	r24, 0x032F
    22c4:	90 91 30 03 	lds	r25, 0x0330
    22c8:	28 1b       	sub	r18, r24
    22ca:	39 0b       	sbc	r19, r25
    22cc:	30 93 5c 03 	sts	0x035C, r19
    22d0:	20 93 5b 03 	sts	0x035B, r18
					if(proximityResult[1] < 0) {
    22d4:	37 fd       	sbrc	r19, 7
    22d6:	31 c1       	rjmp	.+610    	; 0x253a <__stack+0x33b>
    22d8:	92 2f       	mov	r25, r18
    22da:	83 2f       	mov	r24, r19
						proximityResult[1] = 0;
					}					
					ackPayload[3] = proximityResult[1]&0xFF;
    22dc:	90 93 02 04 	sts	0x0402, r25
					ackPayload[4] = proximityResult[1]>>8;
    22e0:	80 93 03 04 	sts	0x0403, r24

					proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
    22e4:	20 91 31 03 	lds	r18, 0x0331
    22e8:	30 91 32 03 	lds	r19, 0x0332
    22ec:	80 91 33 03 	lds	r24, 0x0333
    22f0:	90 91 34 03 	lds	r25, 0x0334
    22f4:	28 1b       	sub	r18, r24
    22f6:	39 0b       	sbc	r19, r25
    22f8:	30 93 5e 03 	sts	0x035E, r19
    22fc:	20 93 5d 03 	sts	0x035D, r18
					if(proximityResult[2] < 0) {
    2300:	37 fd       	sbrc	r19, 7
    2302:	14 c1       	rjmp	.+552    	; 0x252c <__stack+0x32d>
    2304:	92 2f       	mov	r25, r18
    2306:	83 2f       	mov	r24, r19
						proximityResult[2] = 0;
					}
					ackPayload[5] = proximityResult[2]&0xFF;
    2308:	90 93 04 04 	sts	0x0404, r25
					ackPayload[6] = proximityResult[2]>>8;
    230c:	80 93 05 04 	sts	0x0405, r24

					proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
    2310:	20 91 35 03 	lds	r18, 0x0335
    2314:	30 91 36 03 	lds	r19, 0x0336
    2318:	80 91 37 03 	lds	r24, 0x0337
    231c:	90 91 38 03 	lds	r25, 0x0338
    2320:	28 1b       	sub	r18, r24
    2322:	39 0b       	sbc	r19, r25
    2324:	30 93 60 03 	sts	0x0360, r19
    2328:	20 93 5f 03 	sts	0x035F, r18
					if(proximityResult[3] < 0) {
    232c:	37 fd       	sbrc	r19, 7
    232e:	f7 c0       	rjmp	.+494    	; 0x251e <__stack+0x31f>
    2330:	92 2f       	mov	r25, r18
    2332:	83 2f       	mov	r24, r19
						proximityResult[3] = 0;
					}
					ackPayload[7] = proximityResult[3]&0xFF;
    2334:	90 93 06 04 	sts	0x0406, r25
					ackPayload[8] = proximityResult[3]>>8;
    2338:	80 93 07 04 	sts	0x0407, r24

					proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
    233c:	20 91 3d 03 	lds	r18, 0x033D
    2340:	30 91 3e 03 	lds	r19, 0x033E
    2344:	80 91 3f 03 	lds	r24, 0x033F
    2348:	90 91 40 03 	lds	r25, 0x0340
    234c:	28 1b       	sub	r18, r24
    234e:	39 0b       	sbc	r19, r25
    2350:	30 93 64 03 	sts	0x0364, r19
    2354:	20 93 63 03 	sts	0x0363, r18
					if(proximityResult[5] < 0) {
    2358:	37 fd       	sbrc	r19, 7
    235a:	da c0       	rjmp	.+436    	; 0x2510 <__stack+0x311>
    235c:	92 2f       	mov	r25, r18
    235e:	83 2f       	mov	r24, r19
						proximityResult[5] = 0;
					}
					ackPayload[9] = proximityResult[5]&0xFF;
    2360:	90 93 08 04 	sts	0x0408, r25
					ackPayload[10] = proximityResult[5]>>8;
    2364:	80 93 09 04 	sts	0x0409, r24

					proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
    2368:	20 91 41 03 	lds	r18, 0x0341
    236c:	30 91 42 03 	lds	r19, 0x0342
    2370:	80 91 43 03 	lds	r24, 0x0343
    2374:	90 91 44 03 	lds	r25, 0x0344
    2378:	28 1b       	sub	r18, r24
    237a:	39 0b       	sbc	r19, r25
    237c:	30 93 66 03 	sts	0x0366, r19
    2380:	20 93 65 03 	sts	0x0365, r18
					if(proximityResult[6] < 0) {
    2384:	37 fd       	sbrc	r19, 7
    2386:	bd c0       	rjmp	.+378    	; 0x2502 <__stack+0x303>
    2388:	92 2f       	mov	r25, r18
    238a:	83 2f       	mov	r24, r19
						proximityResult[6] = 0;
					}
					ackPayload[11] = proximityResult[6]&0xFF;
    238c:	90 93 0a 04 	sts	0x040A, r25
					ackPayload[12] = proximityResult[6]>>8;
    2390:	80 93 0b 04 	sts	0x040B, r24

					proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
    2394:	20 91 45 03 	lds	r18, 0x0345
    2398:	30 91 46 03 	lds	r19, 0x0346
    239c:	80 91 47 03 	lds	r24, 0x0347
    23a0:	90 91 48 03 	lds	r25, 0x0348
    23a4:	28 1b       	sub	r18, r24
    23a6:	39 0b       	sbc	r19, r25
    23a8:	30 93 68 03 	sts	0x0368, r19
    23ac:	20 93 67 03 	sts	0x0367, r18
					if(proximityResult[7] < 0) {
    23b0:	37 fd       	sbrc	r19, 7
    23b2:	a0 c0       	rjmp	.+320    	; 0x24f4 <__stack+0x2f5>
    23b4:	92 2f       	mov	r25, r18
    23b6:	83 2f       	mov	r24, r19
						proximityResult[7] = 0;
					}
					ackPayload[13] = proximityResult[7]&0xFF;
    23b8:	90 93 0c 04 	sts	0x040C, r25
					ackPayload[14] = proximityResult[7]>>8;	
    23bc:	80 93 0d 04 	sts	0x040D, r24

					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
    23c0:	80 91 03 01 	lds	r24, 0x0103
    23c4:	20 91 03 01 	lds	r18, 0x0103
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	20 72       	andi	r18, 0x20	; 32
    23cc:	30 70       	andi	r19, 0x00	; 0
    23ce:	35 95       	asr	r19
    23d0:	27 95       	ror	r18
    23d2:	35 95       	asr	r19
    23d4:	27 95       	ror	r18
    23d6:	35 95       	asr	r19
    23d8:	27 95       	ror	r18
    23da:	35 95       	asr	r19
    23dc:	27 95       	ror	r18
    23de:	35 95       	asr	r19
    23e0:	27 95       	ror	r18
    23e2:	22 0f       	add	r18, r18
    23e4:	33 1f       	adc	r19, r19
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	80 71       	andi	r24, 0x10	; 16
    23ea:	90 70       	andi	r25, 0x00	; 0
    23ec:	95 95       	asr	r25
    23ee:	87 95       	ror	r24
    23f0:	95 95       	asr	r25
    23f2:	87 95       	ror	r24
    23f4:	95 95       	asr	r25
    23f6:	87 95       	ror	r24
    23f8:	95 95       	asr	r25
    23fa:	87 95       	ror	r24
    23fc:	82 2b       	or	r24, r18
    23fe:	80 93 0e 04 	sts	0x040E, r24
					packetId = 4;
    2402:	34 e0       	ldi	r19, 0x04	; 4
    2404:	30 93 0b 02 	sts	0x020B, r19
					break;
    2408:	08 c9       	rjmp	.-3568   	; 0x161a <main+0x48a>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    240a:	88 27       	eor	r24, r24
    240c:	99 27       	eor	r25, r25
    240e:	82 1b       	sub	r24, r18
    2410:	93 0b       	sbc	r25, r19
    2412:	90 93 ab 00 	sts	0x00AB, r25
    2416:	80 93 aa 00 	sts	0x00AA, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
			} else if(pwm_left < 0) {      		// move backward
				// select channel 14 to sample left current
				//currentMotLeftChannel = 14;
				TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    241a:	80 91 a0 00 	lds	r24, 0x00A0
    241e:	8f 77       	andi	r24, 0x7F	; 127
    2420:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2424:	80 91 72 00 	lds	r24, 0x0072
    2428:	8d 7f       	andi	r24, 0xFD	; 253
    242a:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
    242e:	80 91 02 01 	lds	r24, 0x0102
    2432:	87 7f       	andi	r24, 0xF7	; 247
    2434:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4B1);		// enable OCB
    2438:	80 91 a0 00 	lds	r24, 0x00A0
    243c:	80 62       	ori	r24, 0x20	; 32
    243e:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2442:	80 91 72 00 	lds	r24, 0x0072
    2446:	84 60       	ori	r24, 0x04	; 4
    2448:	80 93 72 00 	sts	0x0072, r24
    244c:	94 c9       	rjmp	.-3288   	; 0x1776 <main+0x5e6>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    244e:	90 95       	com	r25
    2450:	81 95       	neg	r24
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	90 93 9b 00 	sts	0x009B, r25
    2458:	80 93 9a 00 	sts	0x009A, r24
    245c:	6c c9       	rjmp	.-3368   	; 0x1736 <main+0x5a6>
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			} else if(pwm_left > 0) {   		// move forward
    245e:	12 16       	cp	r1, r18
    2460:	13 06       	cpc	r1, r19
    2462:	14 06       	cpc	r1, r20
    2464:	15 06       	cpc	r1, r21
    2466:	cc f6       	brge	.-78     	; 0x241a <__stack+0x21b>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2468:	80 91 a0 00 	lds	r24, 0x00A0
    246c:	8f 7d       	andi	r24, 0xDF	; 223
    246e:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2472:	80 91 72 00 	lds	r24, 0x0072
    2476:	8b 7f       	andi	r24, 0xFB	; 251
    2478:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 4);				// output to 0
    247c:	80 91 02 01 	lds	r24, 0x0102
    2480:	8f 7e       	andi	r24, 0xEF	; 239
    2482:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
    2486:	80 91 a0 00 	lds	r24, 0x00A0
    248a:	80 68       	ori	r24, 0x80	; 128
    248c:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2490:	80 91 72 00 	lds	r24, 0x0072
    2494:	82 60       	ori	r24, 0x02	; 2
    2496:	80 93 72 00 	sts	0x0072, r24
    249a:	6d c9       	rjmp	.-3366   	; 0x1776 <main+0x5e6>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    249c:	80 91 9e 03 	lds	r24, 0x039E
    24a0:	90 91 9f 03 	lds	r25, 0x039F
    24a4:	a0 91 a0 03 	lds	r26, 0x03A0
    24a8:	b0 91 a1 03 	lds	r27, 0x03A1
    24ac:	dd c8       	rjmp	.-3654   	; 0x1668 <main+0x4d8>
					ackPayload[7] = proximityResult[10]&0xFF;
					ackPayload[8] = proximityResult[10]>>8;

					proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
					if(proximityResult[11] < 0) {
						proximityResult[11] = 0;
    24ae:	10 92 70 03 	sts	0x0370, r1
    24b2:	10 92 6f 03 	sts	0x036F, r1
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	cd ce       	rjmp	.-614    	; 0x2256 <__stack+0x57>
					ackPayload[5] = proximityResult[9]&0xFF;
					ackPayload[6] = proximityResult[9]>>8;

					proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
					if(proximityResult[10] < 0) {
						proximityResult[10] = 0;
    24bc:	10 92 6e 03 	sts	0x036E, r1
    24c0:	10 92 6d 03 	sts	0x036D, r1
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	b0 ce       	rjmp	.-672    	; 0x222a <__stack+0x2b>
					ackPayload[3] = proximityResult[8]&0xFF;
					ackPayload[4] = proximityResult[8]>>8;

					proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
					if(proximityResult[9] < 0) {
						proximityResult[9] = 0;
    24ca:	10 92 6c 03 	sts	0x036C, r1
    24ce:	10 92 6b 03 	sts	0x036B, r1
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	93 ce       	rjmp	.-730    	; 0x21fe <main+0x106e>
					ackPayload[1] = proximityResult[4]&0xFF;
					ackPayload[2] = proximityResult[4]>>8;

					proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
					if(proximityResult[8] < 0) {
						proximityResult[8] = 0;
    24d8:	10 92 6a 03 	sts	0x036A, r1
    24dc:	10 92 69 03 	sts	0x0369, r1
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	76 ce       	rjmp	.-788    	; 0x21d2 <main+0x1042>
					break;

				case 4:
					proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
					if(proximityResult[4] < 0) {
						proximityResult[4] = 0;
    24e6:	10 92 62 03 	sts	0x0362, r1
    24ea:	10 92 61 03 	sts	0x0361, r1
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	59 ce       	rjmp	.-846    	; 0x21a6 <main+0x1016>
					ackPayload[11] = proximityResult[6]&0xFF;
					ackPayload[12] = proximityResult[6]>>8;

					proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
					if(proximityResult[7] < 0) {
						proximityResult[7] = 0;
    24f4:	10 92 68 03 	sts	0x0368, r1
    24f8:	10 92 67 03 	sts	0x0367, r1
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	5b cf       	rjmp	.-330    	; 0x23b8 <__stack+0x1b9>
					ackPayload[9] = proximityResult[5]&0xFF;
					ackPayload[10] = proximityResult[5]>>8;

					proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
					if(proximityResult[6] < 0) {
						proximityResult[6] = 0;
    2502:	10 92 66 03 	sts	0x0366, r1
    2506:	10 92 65 03 	sts	0x0365, r1
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	3e cf       	rjmp	.-388    	; 0x238c <__stack+0x18d>
					ackPayload[7] = proximityResult[3]&0xFF;
					ackPayload[8] = proximityResult[3]>>8;

					proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
					if(proximityResult[5] < 0) {
						proximityResult[5] = 0;
    2510:	10 92 64 03 	sts	0x0364, r1
    2514:	10 92 63 03 	sts	0x0363, r1
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	21 cf       	rjmp	.-446    	; 0x2360 <__stack+0x161>
					ackPayload[5] = proximityResult[2]&0xFF;
					ackPayload[6] = proximityResult[2]>>8;

					proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
					if(proximityResult[3] < 0) {
						proximityResult[3] = 0;
    251e:	10 92 60 03 	sts	0x0360, r1
    2522:	10 92 5f 03 	sts	0x035F, r1
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	04 cf       	rjmp	.-504    	; 0x2334 <__stack+0x135>
					ackPayload[3] = proximityResult[1]&0xFF;
					ackPayload[4] = proximityResult[1]>>8;

					proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
					if(proximityResult[2] < 0) {
						proximityResult[2] = 0;
    252c:	10 92 5e 03 	sts	0x035E, r1
    2530:	10 92 5d 03 	sts	0x035D, r1
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	e7 ce       	rjmp	.-562    	; 0x2308 <__stack+0x109>
					ackPayload[1] = proximityResult[0]&0xFF;
					ackPayload[2] = proximityResult[0]>>8;

					proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
					if(proximityResult[1] < 0) {
						proximityResult[1] = 0;
    253a:	10 92 5c 03 	sts	0x035C, r1
    253e:	10 92 5b 03 	sts	0x035B, r1
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	ca ce       	rjmp	.-620    	; 0x22dc <__stack+0xdd>

			switch(packetId) {
				case 3:
					proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
					if(proximityResult[0] < 0) {
						proximityResult[0] = 0;
    2548:	10 92 5a 03 	sts	0x035A, r1
    254c:	10 92 59 03 	sts	0x0359, r1
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	ad ce       	rjmp	.-678    	; 0x22b0 <__stack+0xb1>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	38 ca       	rjmp	.-2960   	; 0x19cc <main+0x83c>
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	1c ca       	rjmp	.-3016   	; 0x199a <main+0x80a>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	27 ca       	rjmp	.-2994   	; 0x19b6 <main+0x826>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	22 ca       	rjmp	.-3004   	; 0x19b2 <main+0x822>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    256e:	10 93 f5 03 	sts	0x03F5, r17
								cliffAvoidanceEnabled = 1;
    2572:	10 93 fa 03 	sts	0x03FA, r17
    2576:	80 91 9e 03 	lds	r24, 0x039E
    257a:	90 91 9f 03 	lds	r25, 0x039F
    257e:	a0 91 a0 03 	lds	r26, 0x03A0
    2582:	b0 91 a1 03 	lds	r27, 0x03A1
    2586:	20 91 a2 03 	lds	r18, 0x03A2
    258a:	30 91 a3 03 	lds	r19, 0x03A3
    258e:	40 91 a4 03 	lds	r20, 0x03A4
    2592:	50 91 a5 03 	lds	r21, 0x03A5
								break;
    2596:	68 c8       	rjmp	.-3888   	; 0x1668 <main+0x4d8>
				TCCR3A |= (1 << COM3A1);		// enable OCA
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
			} else if(pwm_right < 0) {      	// move backward
				// select channel 12 to sample left current
				//currentMotRightChannel = 12;
				TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    2598:	80 91 90 00 	lds	r24, 0x0090
    259c:	8f 77       	andi	r24, 0x7F	; 127
    259e:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    25a2:	80 91 71 00 	lds	r24, 0x0071
    25a6:	8d 7f       	andi	r24, 0xFD	; 253
    25a8:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 3);				// output to 0
    25ac:	73 98       	cbi	0x0e, 3	; 14
				TCCR3A |= (1 << COM3B1);		// enable OCB
    25ae:	80 91 90 00 	lds	r24, 0x0090
    25b2:	80 62       	ori	r24, 0x20	; 32
    25b4:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    25b8:	80 91 71 00 	lds	r24, 0x0071
    25bc:	84 60       	ori	r24, 0x04	; 4
    25be:	80 93 71 00 	sts	0x0071, r24
    25c2:	0c 94 af 09 	jmp	0x135e	; 0x135e <main+0x1ce>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    25c6:	9c 01       	movw	r18, r24
    25c8:	ad 01       	movw	r20, r26
    25ca:	91 cc       	rjmp	.-1758   	; 0x1eee <main+0xd5e>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <__stack+0x3d3>
    25d0:	46 c0       	rjmp	.+140    	; 0x265e <__stack+0x45f>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <__stack+0x3d9>
    25d6:	4b c0       	rjmp	.+150    	; 0x266e <__stack+0x46f>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	09 f4       	brne	.+2      	; 0x25de <__stack+0x3df>
    25dc:	58 c0       	rjmp	.+176    	; 0x268e <__stack+0x48f>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    25de:	44 24       	eor	r4, r4
    25e0:	4a 94       	dec	r4
    25e2:	40 92 0e 02 	sts	0x020E, r4
							pwm_green = MAX_LEDS_PWM;
    25e6:	40 92 0d 02 	sts	0x020D, r4
							pwm_red = MAX_LEDS_PWM;
    25ea:	40 92 0c 02 	sts	0x020C, r4
    25ee:	16 cd       	rjmp	.-1492   	; 0x201c <main+0xe8c>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    25f0:	80 91 80 00 	lds	r24, 0x0080
    25f4:	8f 7d       	andi	r24, 0xDF	; 223
    25f6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    25fa:	2e 98       	cbi	0x05, 6	; 5
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    25fc:	80 91 0e 02 	lds	r24, 0x020E

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    2600:	88 23       	and	r24, r24
    2602:	09 f0       	breq	.+2      	; 0x2606 <__stack+0x407>
    2604:	2b cd       	rjmp	.-1450   	; 0x205c <main+0xecc>
		TCCR1A &= ~(1 << COM1C1);
    2606:	80 91 80 00 	lds	r24, 0x0080
    260a:	87 7f       	andi	r24, 0xF7	; 247
    260c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    2610:	2f 98       	cbi	0x05, 7	; 5
    2612:	80 91 9e 03 	lds	r24, 0x039E
    2616:	90 91 9f 03 	lds	r25, 0x039F
    261a:	a0 91 a0 03 	lds	r26, 0x03A0
    261e:	b0 91 a1 03 	lds	r27, 0x03A1
    2622:	20 91 a2 03 	lds	r18, 0x03A2
    2626:	30 91 a3 03 	lds	r19, 0x03A3
    262a:	40 91 a4 03 	lds	r20, 0x03A4
    262e:	50 91 a5 03 	lds	r21, 0x03A5
    2632:	1a c8       	rjmp	.-4044   	; 0x1668 <main+0x4d8>
							case 0: 
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    2634:	80 93 f5 03 	sts	0x03F5, r24
								cliffAvoidanceEnabled = 0;
    2638:	10 92 fa 03 	sts	0x03FA, r1
    263c:	80 91 9e 03 	lds	r24, 0x039E
    2640:	90 91 9f 03 	lds	r25, 0x039F
    2644:	a0 91 a0 03 	lds	r26, 0x03A0
    2648:	b0 91 a1 03 	lds	r27, 0x03A1
    264c:	20 91 a2 03 	lds	r18, 0x03A2
    2650:	30 91 a3 03 	lds	r19, 0x03A3
    2654:	40 91 a4 03 	lds	r20, 0x03A4
    2658:	50 91 a5 03 	lds	r21, 0x03A5
								break;
    265c:	05 c8       	rjmp	.-4086   	; 0x1668 <main+0x4d8>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    265e:	af ef       	ldi	r26, 0xFF	; 255
    2660:	a0 93 0e 02 	sts	0x020E, r26
							pwm_green = 0;
    2664:	10 92 0d 02 	sts	0x020D, r1
							pwm_red = MAX_LEDS_PWM;
    2668:	a0 93 0c 02 	sts	0x020C, r26
    266c:	d7 cc       	rjmp	.-1618   	; 0x201c <main+0xe8c>
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    266e:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    2670:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    2672:	bf ef       	ldi	r27, 0xFF	; 255
    2674:	b0 93 0e 02 	sts	0x020E, r27
							pwm_green = MAX_LEDS_PWM;
    2678:	b0 93 0d 02 	sts	0x020D, r27
							pwm_red = 0;
    267c:	10 92 0c 02 	sts	0x020C, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    2680:	80 91 80 00 	lds	r24, 0x0080
    2684:	8f 77       	andi	r24, 0x7F	; 127
    2686:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    268a:	2d 98       	cbi	0x05, 5	; 5
    268c:	d3 cc       	rjmp	.-1626   	; 0x2034 <main+0xea4>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    268e:	10 92 0e 02 	sts	0x020E, r1
							pwm_green = 0;
    2692:	10 92 0d 02 	sts	0x020D, r1
							pwm_red = 0;
    2696:	10 92 0c 02 	sts	0x020C, r1
    269a:	f2 cf       	rjmp	.-28     	; 0x2680 <__stack+0x481>

0000269c <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    269c:	84 b1       	in	r24, 0x04	; 4
    269e:	80 7f       	andi	r24, 0xF0	; 240
    26a0:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    26a2:	84 b1       	in	r24, 0x04	; 4
    26a4:	87 60       	ori	r24, 0x07	; 7
    26a6:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    26a8:	80 e5       	ldi	r24, 0x50	; 80
    26aa:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    26ac:	8d b5       	in	r24, 0x2d	; 45
    26ae:	81 60       	ori	r24, 0x01	; 1
    26b0:	8d bd       	out	0x2d, r24	; 45

}
    26b2:	08 95       	ret

000026b4 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    26b4:	44 23       	and	r20, r20
    26b6:	79 f0       	breq	.+30     	; 0x26d6 <SPI_ReadWrite_Block+0x22>
    26b8:	a8 2f       	mov	r26, r24
    26ba:	b9 2f       	mov	r27, r25
    26bc:	e6 2f       	mov	r30, r22
    26be:	f7 2f       	mov	r31, r23
    26c0:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    26c2:	9d 91       	ld	r25, X+
    26c4:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    26c6:	0d b4       	in	r0, 0x2d	; 45
    26c8:	07 fe       	sbrs	r0, 7
    26ca:	fd cf       	rjmp	.-6      	; 0x26c6 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    26cc:	9e b5       	in	r25, 0x2e	; 46
    26ce:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	84 17       	cp	r24, r20
    26d4:	b0 f3       	brcs	.-20     	; 0x26c2 <SPI_ReadWrite_Block+0xe>
    26d6:	08 95       	ret

000026d8 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    26d8:	66 23       	and	r22, r22
    26da:	59 f0       	breq	.+22     	; 0x26f2 <SPI_Write_Block+0x1a>
    26dc:	e8 2f       	mov	r30, r24
    26de:	f9 2f       	mov	r31, r25
    26e0:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    26e2:	91 91       	ld	r25, Z+
    26e4:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    26e6:	0d b4       	in	r0, 0x2d	; 45
    26e8:	07 fe       	sbrs	r0, 7
    26ea:	fd cf       	rjmp	.-6      	; 0x26e6 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	86 17       	cp	r24, r22
    26f0:	c0 f3       	brcs	.-16     	; 0x26e2 <SPI_Write_Block+0xa>
    26f2:	08 95       	ret

000026f4 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    26f4:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    26f6:	0d b4       	in	r0, 0x2d	; 45
    26f8:	07 fe       	sbrs	r0, 7
    26fa:	fd cf       	rjmp	.-6      	; 0x26f6 <SPI_Write_Byte+0x2>
    return SPDR;
    26fc:	8e b5       	in	r24, 0x2e	; 46
}
    26fe:	08 95       	ret

00002700 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <mirf_config+0xa>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    270e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2710:	80 e2       	ldi	r24, 0x20	; 32
    2712:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2716:	8d e0       	ldi	r24, 0x0D	; 13
    2718:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    271c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    271e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2720:	83 e2       	ldi	r24, 0x23	; 35
    2722:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    272c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    272e:	8c e0       	ldi	r24, 0x0C	; 12
    2730:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    2736:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2738:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    273a:	80 e3       	ldi	r24, 0x30	; 48
    273c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2740:	8e 01       	movw	r16, r28
    2742:	0f 5f       	subi	r16, 0xFF	; 255
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	c8 01       	movw	r24, r16
    2748:	63 e0       	ldi	r22, 0x03	; 3
    274a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <SPI_Write_Block>
    mirf_CSN_hi;
    274e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2750:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2752:	8a e2       	ldi	r24, 0x2A	; 42
    2754:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2758:	c8 01       	movw	r24, r16
    275a:	63 e0       	ldi	r22, 0x03	; 3
    275c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <SPI_Write_Block>
    mirf_CSN_hi;
    2760:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2762:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2764:	81 e2       	ldi	r24, 0x21	; 33
    2766:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    2770:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2772:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2774:	82 e2       	ldi	r24, 0x22	; 34
    2776:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    2780:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2782:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2784:	84 e2       	ldi	r24, 0x24	; 36
    2786:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    278a:	82 e1       	ldi	r24, 0x12	; 18
    278c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    2790:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2792:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2794:	85 e2       	ldi	r24, 0x25	; 37
    2796:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    279a:	88 e2       	ldi	r24, 0x28	; 40
    279c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    27a0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    27a2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    27a4:	81 e3       	ldi	r24, 0x31	; 49
    27a6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    27aa:	86 e0       	ldi	r24, 0x06	; 6
    27ac:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    27b0:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    27b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    27b4:	80 e5       	ldi	r24, 0x50	; 80
    27b6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    27ba:	83 e7       	ldi	r24, 0x73	; 115
    27bc:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    27c0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    27c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    27c4:	8c e3       	ldi	r24, 0x3C	; 60
    27c6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    27d0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    27d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    27d4:	8d e3       	ldi	r24, 0x3D	; 61
    27d6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    27da:	86 e0       	ldi	r24, 0x06	; 6
    27dc:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    27e0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    27e2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    27e4:	80 e2       	ldi	r24, 0x20	; 32
    27e6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    27ea:	8f e0       	ldi	r24, 0x0F	; 15
    27ec:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    27f0:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	08 95       	ret

00002802 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    2802:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    2804:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    2806:	0e 94 80 13 	call	0x2700	; 0x2700 <mirf_config>
}
    280a:	08 95       	ret

0000280c <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    2812:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2814:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2816:	8a e2       	ldi	r24, 0x2A	; 42
    2818:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    281c:	ce 01       	movw	r24, r28
    281e:	65 e0       	ldi	r22, 0x05	; 5
    2820:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <SPI_Write_Block>
    mirf_CSN_hi;
    2824:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    2826:	2c 9a       	sbi	0x05, 4	; 5
}
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2834:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2836:	80 e3       	ldi	r24, 0x30	; 48
    2838:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    283c:	ce 01       	movw	r24, r28
    283e:	65 e0       	ldi	r22, 0x05	; 5
    2840:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <SPI_Write_Block>
    mirf_CSN_hi;
    2844:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    284c:	80 91 fe 03 	lds	r24, 0x03FE
    2850:	88 23       	and	r24, r24
    2852:	11 f0       	breq	.+4      	; 0x2858 <mirf_data_ready+0xc>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    2856:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2858:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    2860:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    2862:	80 74       	andi	r24, 0x40	; 64
    2864:	08 95       	ret

00002866 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	0f 92       	push	r0
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    2870:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2872:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2874:	87 e1       	ldi	r24, 0x17	; 23
    2876:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    287a:	be 01       	movw	r22, r28
    287c:	6f 5f       	subi	r22, 0xFF	; 255
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	cb 01       	movw	r24, r22
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2888:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	81 70       	andi	r24, 0x01	; 1
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    2896:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2898:	82 ee       	ldi	r24, 0xE2	; 226
    289a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    289e:	28 9a       	sbi	0x05, 0	; 5

}
    28a0:	08 95       	ret

000028a2 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    28a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    28aa:	81 e6       	ldi	r24, 0x61	; 97
    28ac:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    28b0:	ce 01       	movw	r24, r28
    28b2:	be 01       	movw	r22, r28
    28b4:	46 e0       	ldi	r20, 0x06	; 6
    28b6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    28ba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    28bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    28be:	87 e2       	ldi	r24, 0x27	; 39
    28c0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    28c4:	80 e4       	ldi	r24, 0x40	; 64
    28c6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    28ca:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	08 95       	ret

000028d2 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	0f 92       	push	r0
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    28dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    28de:	8f 71       	andi	r24, 0x1F	; 31
    28e0:	80 62       	ori	r24, 0x20	; 32
    28e2:	69 83       	std	Y+1, r22	; 0x01
    28e4:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    28e8:	69 81       	ldd	r22, Y+1	; 0x01
    28ea:	86 2f       	mov	r24, r22
    28ec:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    28f0:	28 9a       	sbi	0x05, 0	; 5
}
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	0f 92       	push	r0
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    290a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    290c:	8f 71       	andi	r24, 0x1F	; 31
    290e:	49 83       	std	Y+1, r20	; 0x01
    2910:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2914:	c8 01       	movw	r24, r16
    2916:	b8 01       	movw	r22, r16
    2918:	49 81       	ldd	r20, Y+1	; 0x01
    291a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    291e:	28 9a       	sbi	0x05, 0	; 5
}
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	08 95       	ret

0000292c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	0f 92       	push	r0
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    293c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    293e:	8f 71       	andi	r24, 0x1F	; 31
    2940:	80 62       	ori	r24, 0x20	; 32
    2942:	49 83       	std	Y+1, r20	; 0x01
    2944:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2948:	c8 01       	movw	r24, r16
    294a:	49 81       	ldd	r20, Y+1	; 0x01
    294c:	64 2f       	mov	r22, r20
    294e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <SPI_Write_Block>
    mirf_CSN_hi;
    2952:	28 9a       	sbi	0x05, 0	; 5
}
    2954:	0f 90       	pop	r0
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	08 95       	ret

00002960 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    2970:	80 91 fe 03 	lds	r24, 0x03FE
    2974:	88 23       	and	r24, r24
    2976:	e1 f7       	brne	.-8      	; 0x2970 <mirf_send+0x10>

    mirf_CE_lo;
    2978:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	80 93 fe 03 	sts	0x03FE, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2980:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2982:	80 e2       	ldi	r24, 0x20	; 32
    2984:	69 83       	std	Y+1, r22	; 0x01
    2986:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    298a:	8a e4       	ldi	r24, 0x4A	; 74
    298c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    2990:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    2992:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    2994:	81 ee       	ldi	r24, 0xE1	; 225
    2996:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    299a:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    299c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    299e:	80 ea       	ldi	r24, 0xA0	; 160
    29a0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    29a4:	c8 01       	movw	r24, r16
    29a6:	69 81       	ldd	r22, Y+1	; 0x01
    29a8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    29ac:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    29ae:	2c 9a       	sbi	0x05, 4	; 5
}
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	0f 92       	push	r0
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	18 2f       	mov	r17, r24
    29d0:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    29d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    29d4:	81 ee       	ldi	r24, 0xE1	; 225
    29d6:	99 83       	std	Y+1, r25	; 0x01
    29d8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    29dc:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    29de:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    29e0:	88 ea       	ldi	r24, 0xA8	; 168
    29e2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    29e6:	99 81       	ldd	r25, Y+1	; 0x01
    29e8:	00 23       	and	r16, r16
    29ea:	61 f0       	breq	.+24     	; 0x2a04 <writeAckPayload+0x48>
    29ec:	61 2f       	mov	r22, r17
    29ee:	79 2f       	mov	r23, r25
    29f0:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    29f2:	f7 01       	movw	r30, r14
    29f4:	81 91       	ld	r24, Z+
    29f6:	7f 01       	movw	r14, r30
    29f8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    29fc:	8e 2d       	mov	r24, r14
    29fe:	81 1b       	sub	r24, r17
    2a00:	80 17       	cp	r24, r16
    2a02:	b8 f3       	brcs	.-18     	; 0x29f2 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    2a04:	28 9a       	sbi	0x05, 0	; 5


}
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	08 95       	ret

00002a16 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    2a16:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2a18:	81 ee       	ldi	r24, 0xE1	; 225
    2a1a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SPI_Write_Byte>
    mirf_CSN_hi;
    2a1e:	28 9a       	sbi	0x05, 0	; 5

}
    2a20:	08 95       	ret

00002a22 <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    2a22:	e8 e6       	ldi	r30, 0x68	; 104
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	82 60       	ori	r24, 0x02	; 2
    2a2a:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    2a2c:	ec e6       	ldi	r30, 0x6C	; 108
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	80 68       	ori	r24, 0x80	; 128
    2a34:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    2a36:	e0 eb       	ldi	r30, 0xB0	; 176
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	82 60       	ori	r24, 0x02	; 2
    2a3e:	80 83       	st	Z, r24

}
    2a40:	08 95       	ret

00002a42 <__vector_10>:

ISR(PCINT1_vect) {
    2a42:	1f 92       	push	r1
    2a44:	0f 92       	push	r0
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	0f 92       	push	r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	8f 93       	push	r24

	if(irEnabled) {
    2a4e:	80 91 11 02 	lds	r24, 0x0211
    2a52:	88 23       	and	r24, r24
    2a54:	21 f1       	breq	.+72     	; 0x2a9e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {
    2a56:	80 91 03 01 	lds	r24, 0x0103
    2a5a:	86 fd       	sbrc	r24, 6
    2a5c:	20 c0       	rjmp	.+64     	; 0x2a9e <__vector_10+0x5c>

			//PORTB ^= (1 << 5);
			//PORTB &= ~(1 << 6);
   			
			PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2a5e:	80 91 68 00 	lds	r24, 0x0068
    2a62:	8d 7f       	andi	r24, 0xFD	; 253
    2a64:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2a68:	80 91 6c 00 	lds	r24, 0x006C
    2a6c:	8f 77       	andi	r24, 0x7F	; 127
    2a6e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;
    2a78:	8d e0       	ldi	r24, 0x0D	; 13
    2a7a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2a7e:	80 91 b1 00 	lds	r24, 0x00B1
    2a82:	86 60       	ori	r24, 0x06	; 6
    2a84:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    2a88:	80 91 70 00 	lds	r24, 0x0070
    2a8c:	82 60       	ori	r24, 0x02	; 2
    2a8e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2a92:	10 92 20 03 	sts	0x0320, r1
    2a96:	10 92 21 03 	sts	0x0321, r1
    2a9a:	10 92 22 03 	sts	0x0322, r1

		}

	}
	
}
    2a9e:	8f 91       	pop	r24
    2aa0:	0f 90       	pop	r0
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	0f 90       	pop	r0
    2aa6:	1f 90       	pop	r1
    2aa8:	18 95       	reti

00002aaa <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    2aaa:	80 91 00 02 	lds	r24, 0x0200
    2aae:	08 95       	ret

00002ab0 <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    2ab0:	80 91 1e 03 	lds	r24, 0x031E
    2ab4:	08 95       	ret

00002ab6 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    2ab6:	80 91 1f 03 	lds	r24, 0x031F
    2aba:	08 95       	ret

00002abc <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2abc:	1f 92       	push	r1
    2abe:	0f 92       	push	r0
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	0f 92       	push	r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	2f 93       	push	r18
    2ac8:	3f 93       	push	r19
    2aca:	4f 93       	push	r20
    2acc:	5f 93       	push	r21
    2ace:	8f 93       	push	r24
    2ad0:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2ad2:	80 91 b1 00 	lds	r24, 0x00B1
    2ad6:	88 7f       	andi	r24, 0xF8	; 248
    2ad8:	80 93 b1 00 	sts	0x00B1, r24
	
	if(checkGlitch) {
    2adc:	80 91 12 02 	lds	r24, 0x0212
    2ae0:	88 23       	and	r24, r24
    2ae2:	a9 f0       	breq	.+42     	; 0x2b0e <__vector_13+0x52>
		if(REMOTE) {	// if high it is a glitch
    2ae4:	80 91 03 01 	lds	r24, 0x0103
    2ae8:	86 ff       	sbrs	r24, 6
    2aea:	65 c0       	rjmp	.+202    	; 0x2bb6 <__vector_13+0xfa>
			PCICR |= (1 << PCIE1);		// enable external interrupt
    2aec:	80 91 68 00 	lds	r24, 0x0068
    2af0:	82 60       	ori	r24, 0x02	; 2
    2af2:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2af6:	80 91 6c 00 	lds	r24, 0x006C
    2afa:	80 68       	ori	r24, 0x80	; 128
    2afc:	80 93 6c 00 	sts	0x006C, r24
			i = -1;			
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	9f ef       	ldi	r25, 0xFF	; 255
    2b04:	90 93 02 02 	sts	0x0202, r25
    2b08:	80 93 01 02 	sts	0x0201, r24
    2b0c:	49 c0       	rjmp	.+146    	; 0x2ba0 <__vector_13+0xe4>

		}
	} else {


		if (i == -1) { // start bit confirm  change timer period
    2b0e:	80 91 01 02 	lds	r24, 0x0201
    2b12:	90 91 02 02 	lds	r25, 0x0202
    2b16:	2f ef       	ldi	r18, 0xFF	; 255
    2b18:	8f 3f       	cpi	r24, 0xFF	; 255
    2b1a:	92 07       	cpc	r25, r18
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <__vector_13+0x64>
    2b1e:	63 c0       	rjmp	.+198    	; 0x2be6 <__vector_13+0x12a>
				TIMSK2 |= (1 << OCIE2A);									

				check_temp = address_temp = data_temp = 0;
				i=0;
			}
		} else if (i == 1)	{ // check bit read and change timer period
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	91 05       	cpc	r25, r1
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <__vector_13+0x6c>
    2b26:	98 c0       	rjmp	.+304    	; 0x2c58 <__vector_13+0x19c>
			// 1.778/0.032 = 54 => 1.728
			OCR2A = 54;
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
			TIMSK2 |= (1 << OCIE2A);

		} else if ((i > 1) && (i < 7)) { // we read address
    2b28:	9c 01       	movw	r18, r24
    2b2a:	22 50       	subi	r18, 0x02	; 2
    2b2c:	30 40       	sbci	r19, 0x00	; 0
    2b2e:	25 30       	cpi	r18, 0x05	; 5
    2b30:	31 05       	cpc	r19, r1
    2b32:	08 f4       	brcc	.+2      	; 0x2b36 <__vector_13+0x7a>
    2b34:	67 c0       	rjmp	.+206    	; 0x2c04 <__vector_13+0x148>

			unsigned char temp = REMOTE;
			temp <<= 6-i;
			address_temp += temp;

		} else if ((i > 6) && (i < 13 )) { // we read data
    2b36:	9c 01       	movw	r18, r24
    2b38:	27 50       	subi	r18, 0x07	; 7
    2b3a:	30 40       	sbci	r19, 0x00	; 0
    2b3c:	26 30       	cpi	r18, 0x06	; 6
    2b3e:	31 05       	cpc	r19, r1
    2b40:	08 f0       	brcs	.+2      	; 0x2b44 <__vector_13+0x88>
    2b42:	bd c0       	rjmp	.+378    	; 0x2cbe <__vector_13+0x202>

			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54
			OCR2A = 54;
    2b44:	26 e3       	ldi	r18, 0x36	; 54
    2b46:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2b4a:	20 91 b1 00 	lds	r18, 0x00B1
    2b4e:	26 60       	ori	r18, 0x06	; 6
    2b50:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    2b54:	20 91 70 00 	lds	r18, 0x0070
    2b58:	22 60       	ori	r18, 0x02	; 2
    2b5a:	20 93 70 00 	sts	0x0070, r18

			unsigned char temp = REMOTE;
    2b5e:	20 91 03 01 	lds	r18, 0x0103
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	20 74       	andi	r18, 0x40	; 64
    2b66:	30 70       	andi	r19, 0x00	; 0
			temp <<= 6+6-i;
    2b68:	00 24       	eor	r0, r0
    2b6a:	22 0f       	add	r18, r18
    2b6c:	33 1f       	adc	r19, r19
    2b6e:	00 1c       	adc	r0, r0
    2b70:	22 0f       	add	r18, r18
    2b72:	33 1f       	adc	r19, r19
    2b74:	00 1c       	adc	r0, r0
    2b76:	23 2f       	mov	r18, r19
    2b78:	30 2d       	mov	r19, r0
    2b7a:	4c e0       	ldi	r20, 0x0C	; 12
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	48 1b       	sub	r20, r24
    2b80:	59 0b       	sbc	r21, r25
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <__vector_13+0xcc>
    2b84:	22 0f       	add	r18, r18
    2b86:	33 1f       	adc	r19, r19
    2b88:	4a 95       	dec	r20
    2b8a:	e2 f7       	brpl	.-8      	; 0x2b84 <__vector_13+0xc8>
			data_temp += temp;
    2b8c:	40 91 20 03 	lds	r20, 0x0320
    2b90:	42 0f       	add	r20, r18
    2b92:	40 93 20 03 	sts	0x0320, r20

			i = -1;
			check = check_temp;
			address = address_temp;
			data_ir = data_temp;
			command_received=1;
    2b96:	01 96       	adiw	r24, 0x01	; 1
		} 

	}
	
	if(i!=-1)
		i++;
    2b98:	90 93 02 02 	sts	0x0202, r25
    2b9c:	80 93 01 02 	sts	0x0201, r24


}
    2ba0:	9f 91       	pop	r25
    2ba2:	8f 91       	pop	r24
    2ba4:	5f 91       	pop	r21
    2ba6:	4f 91       	pop	r20
    2ba8:	3f 91       	pop	r19
    2baa:	2f 91       	pop	r18
    2bac:	0f 90       	pop	r0
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	0f 90       	pop	r0
    2bb2:	1f 90       	pop	r1
    2bb4:	18 95       	reti
		if(REMOTE) {	// if high it is a glitch
			PCICR |= (1 << PCIE1);		// enable external interrupt
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
			i = -1;			
		} else {
			checkGlitch = 0;
    2bb6:	10 92 12 02 	sts	0x0212, r1
			// 2/0.128 = 15.6
			//OCR2A = 16;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 2.1/0.032 = 64 => 2.048 ms
			// but we already wait 0.416 us => 13, so 64-13=51
			OCR2A = 51;
    2bba:	83 e3       	ldi	r24, 0x33	; 51
    2bbc:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2bc0:	80 91 b1 00 	lds	r24, 0x00B1
    2bc4:	86 60       	ori	r24, 0x06	; 6
    2bc6:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);
    2bca:	80 91 70 00 	lds	r24, 0x0070
    2bce:	82 60       	ori	r24, 0x02	; 2
    2bd0:	80 93 70 00 	sts	0x0070, r24
    2bd4:	80 91 01 02 	lds	r24, 0x0201
    2bd8:	90 91 02 02 	lds	r25, 0x0202
			//PORTB |= (1 << 6);
		} 

	}
	
	if(i!=-1)
    2bdc:	2f ef       	ldi	r18, 0xFF	; 255
    2bde:	8f 3f       	cpi	r24, 0xFF	; 255
    2be0:	92 07       	cpc	r25, r18
    2be2:	c9 f6       	brne	.-78     	; 0x2b96 <__vector_13+0xda>
    2be4:	dd cf       	rjmp	.-70     	; 0x2ba0 <__vector_13+0xe4>
	} else {


		if (i == -1) { // start bit confirm  change timer period

			if(REMOTE) {	//if high it is only a noise
    2be6:	20 91 03 01 	lds	r18, 0x0103
    2bea:	26 ff       	sbrs	r18, 6
    2bec:	52 c0       	rjmp	.+164    	; 0x2c92 <__vector_13+0x1d6>

				PCICR |= (1 << PCIE1);		// enable external interrupt
    2bee:	20 91 68 00 	lds	r18, 0x0068
    2bf2:	22 60       	ori	r18, 0x02	; 2
    2bf4:	20 93 68 00 	sts	0x0068, r18
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2bf8:	20 91 6c 00 	lds	r18, 0x006C
    2bfc:	20 68       	ori	r18, 0x80	; 128
    2bfe:	20 93 6c 00 	sts	0x006C, r18
    2c02:	ce cf       	rjmp	.-100    	; 0x2ba0 <__vector_13+0xe4>
		} else if ((i > 1) && (i < 7)) { // we read address
		
			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54
			OCR2A = 54;
    2c04:	26 e3       	ldi	r18, 0x36	; 54
    2c06:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2c0a:	20 91 b1 00 	lds	r18, 0x00B1
    2c0e:	26 60       	ori	r18, 0x06	; 6
    2c10:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    2c14:	20 91 70 00 	lds	r18, 0x0070
    2c18:	22 60       	ori	r18, 0x02	; 2
    2c1a:	20 93 70 00 	sts	0x0070, r18

			unsigned char temp = REMOTE;
    2c1e:	20 91 03 01 	lds	r18, 0x0103
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	20 74       	andi	r18, 0x40	; 64
    2c26:	30 70       	andi	r19, 0x00	; 0
			temp <<= 6-i;
    2c28:	00 24       	eor	r0, r0
    2c2a:	22 0f       	add	r18, r18
    2c2c:	33 1f       	adc	r19, r19
    2c2e:	00 1c       	adc	r0, r0
    2c30:	22 0f       	add	r18, r18
    2c32:	33 1f       	adc	r19, r19
    2c34:	00 1c       	adc	r0, r0
    2c36:	23 2f       	mov	r18, r19
    2c38:	30 2d       	mov	r19, r0
    2c3a:	46 e0       	ldi	r20, 0x06	; 6
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	48 1b       	sub	r20, r24
    2c40:	59 0b       	sbc	r21, r25
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <__vector_13+0x18c>
    2c44:	22 0f       	add	r18, r18
    2c46:	33 1f       	adc	r19, r19
    2c48:	4a 95       	dec	r20
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <__vector_13+0x188>
			address_temp += temp;
    2c4c:	40 91 21 03 	lds	r20, 0x0321
    2c50:	42 0f       	add	r20, r18
    2c52:	40 93 21 03 	sts	0x0321, r20
    2c56:	9f cf       	rjmp	.-194    	; 0x2b96 <__vector_13+0xda>
				check_temp = address_temp = data_temp = 0;
				i=0;
			}
		} else if (i == 1)	{ // check bit read and change timer period

			check_temp = REMOTE;	   // read the check bit
    2c58:	20 91 03 01 	lds	r18, 0x0103
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	20 74       	andi	r18, 0x40	; 64
    2c60:	30 70       	andi	r19, 0x00	; 0
    2c62:	02 2e       	mov	r0, r18
    2c64:	23 2f       	mov	r18, r19
    2c66:	00 0c       	add	r0, r0
    2c68:	22 1f       	adc	r18, r18
    2c6a:	33 0b       	sbc	r19, r19
    2c6c:	00 0c       	add	r0, r0
    2c6e:	22 1f       	adc	r18, r18
    2c70:	33 1f       	adc	r19, r19
    2c72:	20 93 22 03 	sts	0x0322, r18
			//cycle value is 1.778[ms]
			// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
			//OCR2A = 14;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 1.778/0.032 = 54 => 1.728
			OCR2A = 54;
    2c76:	26 e3       	ldi	r18, 0x36	; 54
    2c78:	20 93 b3 00 	sts	0x00B3, r18
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2c7c:	20 91 b1 00 	lds	r18, 0x00B1
    2c80:	26 60       	ori	r18, 0x06	; 6
    2c82:	20 93 b1 00 	sts	0x00B1, r18
			TIMSK2 |= (1 << OCIE2A);
    2c86:	20 91 70 00 	lds	r18, 0x0070
    2c8a:	22 60       	ori	r18, 0x02	; 2
    2c8c:	20 93 70 00 	sts	0x0070, r18
    2c90:	82 cf       	rjmp	.-252    	; 0x2b96 <__vector_13+0xda>
				//cycle value is 0.6 to go to check bit[ms]
				// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
				//OCR2A = 5;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 0.9/0.032 = 28 => 0.896
				OCR2A = 28;
    2c92:	8c e1       	ldi	r24, 0x1C	; 28
    2c94:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2c98:	80 91 b1 00 	lds	r24, 0x00B1
    2c9c:	86 60       	ori	r24, 0x06	; 6
    2c9e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);									
    2ca2:	80 91 70 00 	lds	r24, 0x0070
    2ca6:	82 60       	ori	r24, 0x02	; 2
    2ca8:	80 93 70 00 	sts	0x0070, r24

				check_temp = address_temp = data_temp = 0;
    2cac:	10 92 20 03 	sts	0x0320, r1
    2cb0:	10 92 21 03 	sts	0x0321, r1
    2cb4:	10 92 22 03 	sts	0x0322, r1
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	6d cf       	rjmp	.-294    	; 0x2b98 <__vector_13+0xdc>

			unsigned char temp = REMOTE;
			temp <<= 6+6-i;
			data_temp += temp;

		} else if (i == 13) { // last bit read
    2cbe:	8d 30       	cpi	r24, 0x0D	; 13
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <__vector_13+0x20a>
    2cc4:	68 cf       	rjmp	.-304    	; 0x2b96 <__vector_13+0xda>

			PCICR |= (1 << PCIE1);		// enable interrupt
    2cc6:	80 91 68 00 	lds	r24, 0x0068
    2cca:	82 60       	ori	r24, 0x02	; 2
    2ccc:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2cd0:	80 91 6c 00 	lds	r24, 0x006C
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	80 93 6c 00 	sts	0x006C, r24

			i = -1;
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
    2cde:	90 93 02 02 	sts	0x0202, r25
    2ce2:	80 93 01 02 	sts	0x0201, r24
			check = check_temp;
    2ce6:	80 91 22 03 	lds	r24, 0x0322
    2cea:	80 93 00 02 	sts	0x0200, r24
			address = address_temp;
    2cee:	80 91 21 03 	lds	r24, 0x0321
    2cf2:	80 93 1e 03 	sts	0x031E, r24
			data_ir = data_temp;
    2cf6:	80 91 20 03 	lds	r24, 0x0320
    2cfa:	80 93 1f 03 	sts	0x031F, r24
			command_received=1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	80 93 d9 03 	sts	0x03D9, r24
    2d04:	4d cf       	rjmp	.-358    	; 0x2ba0 <__vector_13+0xe4>

00002d06 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2d06:	08 95       	ret

00002d08 <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    2d08:	08 95       	ret

00002d0a <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    2d0a:	2f 92       	push	r2
    2d0c:	3f 92       	push	r3
    2d0e:	4f 92       	push	r4
    2d10:	5f 92       	push	r5
    2d12:	6f 92       	push	r6
    2d14:	7f 92       	push	r7
    2d16:	8f 92       	push	r8
    2d18:	9f 92       	push	r9
    2d1a:	af 92       	push	r10
    2d1c:	bf 92       	push	r11
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	2c 97       	sbiw	r28, 0x0c	; 12
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	9c 87       	std	Y+12, r25	; 0x0c
    2d40:	8b 87       	std	Y+11, r24	; 0x0b
    2d42:	79 87       	std	Y+9, r23	; 0x09
    2d44:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    2d46:	fc 01       	movw	r30, r24
    2d48:	20 80       	ld	r2, Z
    2d4a:	31 80       	ldd	r3, Z+1	; 0x01
    2d4c:	42 80       	ldd	r4, Z+2	; 0x02
    2d4e:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    2d50:	fb 01       	movw	r30, r22
    2d52:	a0 80       	ld	r10, Z
    2d54:	b1 80       	ldd	r11, Z+1	; 0x01
    2d56:	c2 80       	ldd	r12, Z+2	; 0x02
    2d58:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    2d5a:	21 14       	cp	r2, r1
    2d5c:	31 04       	cpc	r3, r1
    2d5e:	41 04       	cpc	r4, r1
    2d60:	51 04       	cpc	r5, r1
    2d62:	31 f4       	brne	.+12     	; 0x2d70 <start_orizzontal_speed_control+0x66>
    2d64:	a1 14       	cp	r10, r1
    2d66:	b1 04       	cpc	r11, r1
    2d68:	c1 04       	cpc	r12, r1
    2d6a:	d1 04       	cpc	r13, r1
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <start_orizzontal_speed_control+0x66>
    2d6e:	bd c1       	rjmp	.+890    	; 0x30ea <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    2d70:	60 90 23 04 	lds	r6, 0x0423
    2d74:	70 90 24 04 	lds	r7, 0x0424
    2d78:	80 90 25 04 	lds	r8, 0x0425
    2d7c:	90 90 26 04 	lds	r9, 0x0426
    2d80:	60 92 27 04 	sts	0x0427, r6
    2d84:	70 92 28 04 	sts	0x0428, r7
    2d88:	80 92 29 04 	sts	0x0429, r8
    2d8c:	90 92 2a 04 	sts	0x042A, r9
	if(pwm_right_working >= 0) {
    2d90:	d7 fc       	sbrc	r13, 7
    2d92:	35 c2       	rjmp	.+1130   	; 0x31fe <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    2d94:	80 91 94 03 	lds	r24, 0x0394
    2d98:	90 91 95 03 	lds	r25, 0x0395
    2d9c:	a0 e0       	ldi	r26, 0x00	; 0
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	86 01       	movw	r16, r12
    2da2:	75 01       	movw	r14, r10
    2da4:	e8 1a       	sub	r14, r24
    2da6:	f9 0a       	sbc	r15, r25
    2da8:	0a 0b       	sbc	r16, r26
    2daa:	1b 0b       	sbc	r17, r27
    2dac:	e0 92 b2 03 	sts	0x03B2, r14
    2db0:	f0 92 b3 03 	sts	0x03B3, r15
    2db4:	00 93 b4 03 	sts	0x03B4, r16
    2db8:	10 93 b5 03 	sts	0x03B5, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    2dbc:	e0 92 23 04 	sts	0x0423, r14
    2dc0:	f0 92 24 04 	sts	0x0424, r15
    2dc4:	00 93 25 04 	sts	0x0425, r16
    2dc8:	10 93 26 04 	sts	0x0426, r17
	delta_right_speed_sum += delta_right_speed;
    2dcc:	60 91 ba 03 	lds	r22, 0x03BA
    2dd0:	70 91 bb 03 	lds	r23, 0x03BB
    2dd4:	80 91 bc 03 	lds	r24, 0x03BC
    2dd8:	90 91 bd 03 	lds	r25, 0x03BD
    2ddc:	6e 0d       	add	r22, r14
    2dde:	7f 1d       	adc	r23, r15
    2de0:	80 1f       	adc	r24, r16
    2de2:	91 1f       	adc	r25, r17
    2de4:	60 93 ba 03 	sts	0x03BA, r22
    2de8:	70 93 bb 03 	sts	0x03BB, r23
    2dec:	80 93 bc 03 	sts	0x03BC, r24
    2df0:	90 93 bd 03 	sts	0x03BD, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    2df4:	61 38       	cpi	r22, 0x81	; 129
    2df6:	fc e0       	ldi	r31, 0x0C	; 12
    2df8:	7f 07       	cpc	r23, r31
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	8f 07       	cpc	r24, r31
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	9f 07       	cpc	r25, r31
    2e02:	0c f0       	brlt	.+2      	; 0x2e06 <start_orizzontal_speed_control+0xfc>
    2e04:	8b c1       	rjmp	.+790    	; 0x311c <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2e06:	60 38       	cpi	r22, 0x80	; 128
    2e08:	e3 ef       	ldi	r30, 0xF3	; 243
    2e0a:	7e 07       	cpc	r23, r30
    2e0c:	ef ef       	ldi	r30, 0xFF	; 255
    2e0e:	8e 07       	cpc	r24, r30
    2e10:	ef ef       	ldi	r30, 0xFF	; 255
    2e12:	9e 07       	cpc	r25, r30
    2e14:	0c f4       	brge	.+2      	; 0x2e18 <start_orizzontal_speed_control+0x10e>
    2e16:	2c c2       	rjmp	.+1112   	; 0x3270 <start_orizzontal_speed_control+0x566>
    2e18:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
    2e1c:	9b 01       	movw	r18, r22
    2e1e:	ac 01       	movw	r20, r24
    2e20:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3>
    2e24:	6d 83       	std	Y+5, r22	; 0x05
    2e26:	7e 83       	std	Y+6, r23	; 0x06
    2e28:	8f 83       	std	Y+7, r24	; 0x07
    2e2a:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    2e2c:	c8 01       	movw	r24, r16
    2e2e:	b7 01       	movw	r22, r14
    2e30:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	48 ec       	ldi	r20, 0xC8	; 200
    2e3a:	52 e4       	ldi	r21, 0x42	; 66
    2e3c:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    2e40:	69 83       	std	Y+1, r22	; 0x01
    2e42:	7a 83       	std	Y+2, r23	; 0x02
    2e44:	8b 83       	std	Y+3, r24	; 0x03
    2e46:	9c 83       	std	Y+4, r25	; 0x04
    2e48:	c8 01       	movw	r24, r16
    2e4a:	b7 01       	movw	r22, r14
    2e4c:	66 19       	sub	r22, r6
    2e4e:	77 09       	sbc	r23, r7
    2e50:	88 09       	sbc	r24, r8
    2e52:	99 09       	sbc	r25, r9
    2e54:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	69 81       	ldd	r22, Y+1	; 0x01
    2e6a:	7a 81       	ldd	r23, Y+2	; 0x02
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3>
    2e74:	bd 81       	ldd	r27, Y+5	; 0x05
    2e76:	ae 81       	ldd	r26, Y+6	; 0x06
    2e78:	ef 80       	ldd	r14, Y+7	; 0x07
    2e7a:	6a 84       	ldd	r6, Y+10	; 0x0a
    2e7c:	2b 2f       	mov	r18, r27
    2e7e:	3a 2f       	mov	r19, r26
    2e80:	4e 2d       	mov	r20, r14
    2e82:	56 2d       	mov	r21, r6
    2e84:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3>
    2e88:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__fixsfsi>
    2e8c:	7b 01       	movw	r14, r22
    2e8e:	8c 01       	movw	r16, r24
    2e90:	60 93 c2 03 	sts	0x03C2, r22
    2e94:	70 93 c3 03 	sts	0x03C3, r23
    2e98:	80 93 c4 03 	sts	0x03C4, r24
    2e9c:	90 93 c5 03 	sts	0x03C5, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    2ea0:	c6 01       	movw	r24, r12
    2ea2:	b5 01       	movw	r22, r10
    2ea4:	28 e7       	ldi	r18, 0x78	; 120
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    2eb0:	6e 0d       	add	r22, r14
    2eb2:	7f 1d       	adc	r23, r15
    2eb4:	80 1f       	adc	r24, r16
    2eb6:	91 1f       	adc	r25, r17
    2eb8:	60 93 a6 03 	sts	0x03A6, r22
    2ebc:	70 93 a7 03 	sts	0x03A7, r23
    2ec0:	80 93 a8 03 	sts	0x03A8, r24
    2ec4:	90 93 a9 03 	sts	0x03A9, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2ec8:	97 fd       	sbrc	r25, 7
    2eca:	76 c1       	rjmp	.+748    	; 0x31b8 <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    2ecc:	16 16       	cp	r1, r22
    2ece:	17 06       	cpc	r1, r23
    2ed0:	18 06       	cpc	r1, r24
    2ed2:	19 06       	cpc	r1, r25
    2ed4:	0c f0       	brlt	.+2      	; 0x2ed8 <start_orizzontal_speed_control+0x1ce>
    2ed6:	7d c1       	rjmp	.+762    	; 0x31d2 <start_orizzontal_speed_control+0x4c8>
    2ed8:	d7 fc       	sbrc	r13, 7
    2eda:	fd c1       	rjmp	.+1018   	; 0x32d6 <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2edc:	61 3c       	cpi	r22, 0xC1	; 193
    2ede:	ed e5       	ldi	r30, 0x5D	; 93
    2ee0:	7e 07       	cpc	r23, r30
    2ee2:	e0 e0       	ldi	r30, 0x00	; 0
    2ee4:	8e 07       	cpc	r24, r30
    2ee6:	e0 e0       	ldi	r30, 0x00	; 0
    2ee8:	9e 07       	cpc	r25, r30
    2eea:	0c f4       	brge	.+2      	; 0x2eee <start_orizzontal_speed_control+0x1e4>
    2eec:	72 c1       	rjmp	.+740    	; 0x31d2 <start_orizzontal_speed_control+0x4c8>
    2eee:	80 ec       	ldi	r24, 0xC0	; 192
    2ef0:	9d e5       	ldi	r25, 0x5D	; 93
    2ef2:	a0 e0       	ldi	r26, 0x00	; 0
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	80 93 a6 03 	sts	0x03A6, r24
    2efa:	90 93 a7 03 	sts	0x03A7, r25
    2efe:	a0 93 a8 03 	sts	0x03A8, r26
    2f02:	b0 93 a9 03 	sts	0x03A9, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    2f06:	a0 90 1b 04 	lds	r10, 0x041B
    2f0a:	b0 90 1c 04 	lds	r11, 0x041C
    2f0e:	c0 90 1d 04 	lds	r12, 0x041D
    2f12:	d0 90 1e 04 	lds	r13, 0x041E
    2f16:	a0 92 1f 04 	sts	0x041F, r10
    2f1a:	b0 92 20 04 	sts	0x0420, r11
    2f1e:	c0 92 21 04 	sts	0x0421, r12
    2f22:	d0 92 22 04 	sts	0x0422, r13
	if(pwm_left_working >= 0) {
    2f26:	57 fc       	sbrc	r5, 7
    2f28:	7d c1       	rjmp	.+762    	; 0x3224 <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    2f2a:	80 91 92 03 	lds	r24, 0x0392
    2f2e:	90 91 93 03 	lds	r25, 0x0393
    2f32:	a0 e0       	ldi	r26, 0x00	; 0
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	82 01       	movw	r16, r4
    2f38:	71 01       	movw	r14, r2
    2f3a:	e8 1a       	sub	r14, r24
    2f3c:	f9 0a       	sbc	r15, r25
    2f3e:	0a 0b       	sbc	r16, r26
    2f40:	1b 0b       	sbc	r17, r27
    2f42:	e0 92 ae 03 	sts	0x03AE, r14
    2f46:	f0 92 af 03 	sts	0x03AF, r15
    2f4a:	00 93 b0 03 	sts	0x03B0, r16
    2f4e:	10 93 b1 03 	sts	0x03B1, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    2f52:	e0 92 1b 04 	sts	0x041B, r14
    2f56:	f0 92 1c 04 	sts	0x041C, r15
    2f5a:	00 93 1d 04 	sts	0x041D, r16
    2f5e:	10 93 1e 04 	sts	0x041E, r17
	delta_left_speed_sum += delta_left_speed;
    2f62:	60 91 b6 03 	lds	r22, 0x03B6
    2f66:	70 91 b7 03 	lds	r23, 0x03B7
    2f6a:	80 91 b8 03 	lds	r24, 0x03B8
    2f6e:	90 91 b9 03 	lds	r25, 0x03B9
    2f72:	6e 0d       	add	r22, r14
    2f74:	7f 1d       	adc	r23, r15
    2f76:	80 1f       	adc	r24, r16
    2f78:	91 1f       	adc	r25, r17
    2f7a:	60 93 b6 03 	sts	0x03B6, r22
    2f7e:	70 93 b7 03 	sts	0x03B7, r23
    2f82:	80 93 b8 03 	sts	0x03B8, r24
    2f86:	90 93 b9 03 	sts	0x03B9, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    2f8a:	61 38       	cpi	r22, 0x81	; 129
    2f8c:	2c e0       	ldi	r18, 0x0C	; 12
    2f8e:	72 07       	cpc	r23, r18
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	82 07       	cpc	r24, r18
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	92 07       	cpc	r25, r18
    2f98:	0c f4       	brge	.+2      	; 0x2f9c <start_orizzontal_speed_control+0x292>
    2f9a:	d3 c0       	rjmp	.+422    	; 0x3142 <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2f9c:	80 e8       	ldi	r24, 0x80	; 128
    2f9e:	9c e0       	ldi	r25, 0x0C	; 12
    2fa0:	a0 e0       	ldi	r26, 0x00	; 0
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	80 93 b6 03 	sts	0x03B6, r24
    2fa8:	90 93 b7 03 	sts	0x03B7, r25
    2fac:	a0 93 b8 03 	sts	0x03B8, r26
    2fb0:	b0 93 b9 03 	sts	0x03B9, r27
    2fb4:	19 82       	std	Y+1, r1	; 0x01
    2fb6:	1d 82       	std	Y+5, r1	; 0x05
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	8e 83       	std	Y+6, r24	; 0x06
    2fbc:	e5 e4       	ldi	r30, 0x45	; 69
    2fbe:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	b7 01       	movw	r22, r14
    2fc4:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	48 ec       	ldi	r20, 0xC8	; 200
    2fce:	52 e4       	ldi	r21, 0x42	; 66
    2fd0:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    2fd4:	3b 01       	movw	r6, r22
    2fd6:	4c 01       	movw	r8, r24
    2fd8:	c8 01       	movw	r24, r16
    2fda:	b7 01       	movw	r22, r14
    2fdc:	6a 19       	sub	r22, r10
    2fde:	7b 09       	sbc	r23, r11
    2fe0:	8c 09       	sbc	r24, r12
    2fe2:	9d 09       	sbc	r25, r13
    2fe4:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e2       	ldi	r20, 0x20	; 32
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__mulsf3>
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	c4 01       	movw	r24, r8
    2ffa:	b3 01       	movw	r22, r6
    2ffc:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3>
    3000:	b9 81       	ldd	r27, Y+1	; 0x01
    3002:	ad 81       	ldd	r26, Y+5	; 0x05
    3004:	ee 80       	ldd	r14, Y+6	; 0x06
    3006:	af 80       	ldd	r10, Y+7	; 0x07
    3008:	2b 2f       	mov	r18, r27
    300a:	3a 2f       	mov	r19, r26
    300c:	4e 2d       	mov	r20, r14
    300e:	5a 2d       	mov	r21, r10
    3010:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3>
    3014:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__fixsfsi>
    3018:	7b 01       	movw	r14, r22
    301a:	8c 01       	movw	r16, r24
    301c:	60 93 be 03 	sts	0x03BE, r22
    3020:	70 93 bf 03 	sts	0x03BF, r23
    3024:	80 93 c0 03 	sts	0x03C0, r24
    3028:	90 93 c1 03 	sts	0x03C1, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    302c:	c2 01       	movw	r24, r4
    302e:	b1 01       	movw	r22, r2
    3030:	28 e7       	ldi	r18, 0x78	; 120
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    303c:	6e 0d       	add	r22, r14
    303e:	7f 1d       	adc	r23, r15
    3040:	80 1f       	adc	r24, r16
    3042:	91 1f       	adc	r25, r17
    3044:	60 93 aa 03 	sts	0x03AA, r22
    3048:	70 93 ab 03 	sts	0x03AB, r23
    304c:	80 93 ac 03 	sts	0x03AC, r24
    3050:	90 93 ad 03 	sts	0x03AD, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    3054:	97 fd       	sbrc	r25, 7
    3056:	89 c0       	rjmp	.+274    	; 0x316a <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    3058:	16 16       	cp	r1, r22
    305a:	17 06       	cpc	r1, r23
    305c:	18 06       	cpc	r1, r24
    305e:	19 06       	cpc	r1, r25
    3060:	0c f0       	brlt	.+2      	; 0x3064 <start_orizzontal_speed_control+0x35a>
    3062:	90 c0       	rjmp	.+288    	; 0x3184 <start_orizzontal_speed_control+0x47a>
    3064:	57 fc       	sbrc	r5, 7
    3066:	17 c1       	rjmp	.+558    	; 0x3296 <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3068:	61 3c       	cpi	r22, 0xC1	; 193
    306a:	ed e5       	ldi	r30, 0x5D	; 93
    306c:	7e 07       	cpc	r23, r30
    306e:	e0 e0       	ldi	r30, 0x00	; 0
    3070:	8e 07       	cpc	r24, r30
    3072:	e0 e0       	ldi	r30, 0x00	; 0
    3074:	9e 07       	cpc	r25, r30
    3076:	0c f4       	brge	.+2      	; 0x307a <start_orizzontal_speed_control+0x370>
    3078:	85 c0       	rjmp	.+266    	; 0x3184 <start_orizzontal_speed_control+0x47a>
    307a:	80 ec       	ldi	r24, 0xC0	; 192
    307c:	9d e5       	ldi	r25, 0x5D	; 93
    307e:	a0 e0       	ldi	r26, 0x00	; 0
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	80 93 aa 03 	sts	0x03AA, r24
    3086:	90 93 ab 03 	sts	0x03AB, r25
    308a:	a0 93 ac 03 	sts	0x03AC, r26
    308e:	b0 93 ad 03 	sts	0x03AD, r27
    3092:	64 eb       	ldi	r22, 0xB4	; 180
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    309a:	eb 85       	ldd	r30, Y+11	; 0x0b
    309c:	fc 85       	ldd	r31, Y+12	; 0x0c
    309e:	60 83       	st	Z, r22
    30a0:	71 83       	std	Z+1, r23	; 0x01
    30a2:	82 83       	std	Z+2, r24	; 0x02
    30a4:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    30a6:	60 91 a6 03 	lds	r22, 0x03A6
    30aa:	70 91 a7 03 	lds	r23, 0x03A7
    30ae:	80 91 a8 03 	lds	r24, 0x03A8
    30b2:	90 91 a9 03 	lds	r25, 0x03A9
    30b6:	26 e6       	ldi	r18, 0x66	; 102
    30b8:	32 e0       	ldi	r19, 0x02	; 2
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	39 e0       	ldi	r19, 0x09	; 9
    30c6:	4d e3       	ldi	r20, 0x3D	; 61
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	0e 94 b3 21 	call	0x4366	; 0x4366 <__divmodsi4>
    30ce:	ca 01       	movw	r24, r20
    30d0:	b9 01       	movw	r22, r18
    30d2:	2c e3       	ldi	r18, 0x3C	; 60
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    30de:	e8 85       	ldd	r30, Y+8	; 0x08
    30e0:	f9 85       	ldd	r31, Y+9	; 0x09
    30e2:	60 83       	st	Z, r22
    30e4:	71 83       	std	Z+1, r23	; 0x01
    30e6:	82 83       	std	Z+2, r24	; 0x02
    30e8:	93 83       	std	Z+3, r25	; 0x03

}
    30ea:	2c 96       	adiw	r28, 0x0c	; 12
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	df 90       	pop	r13
    3104:	cf 90       	pop	r12
    3106:	bf 90       	pop	r11
    3108:	af 90       	pop	r10
    310a:	9f 90       	pop	r9
    310c:	8f 90       	pop	r8
    310e:	7f 90       	pop	r7
    3110:	6f 90       	pop	r6
    3112:	5f 90       	pop	r5
    3114:	4f 90       	pop	r4
    3116:	3f 90       	pop	r3
    3118:	2f 90       	pop	r2
    311a:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    311c:	80 e8       	ldi	r24, 0x80	; 128
    311e:	9c e0       	ldi	r25, 0x0C	; 12
    3120:	a0 e0       	ldi	r26, 0x00	; 0
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	80 93 ba 03 	sts	0x03BA, r24
    3128:	90 93 bb 03 	sts	0x03BB, r25
    312c:	a0 93 bc 03 	sts	0x03BC, r26
    3130:	b0 93 bd 03 	sts	0x03BD, r27
    3134:	1d 82       	std	Y+5, r1	; 0x05
    3136:	1e 82       	std	Y+6, r1	; 0x06
    3138:	28 ec       	ldi	r18, 0xC8	; 200
    313a:	2f 83       	std	Y+7, r18	; 0x07
    313c:	85 e4       	ldi	r24, 0x45	; 69
    313e:	8a 87       	std	Y+10, r24	; 0x0a
    3140:	75 ce       	rjmp	.-790    	; 0x2e2c <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    3142:	60 38       	cpi	r22, 0x80	; 128
    3144:	f3 ef       	ldi	r31, 0xF3	; 243
    3146:	7f 07       	cpc	r23, r31
    3148:	ff ef       	ldi	r31, 0xFF	; 255
    314a:	8f 07       	cpc	r24, r31
    314c:	ff ef       	ldi	r31, 0xFF	; 255
    314e:	9f 07       	cpc	r25, r31
    3150:	0c f4       	brge	.+2      	; 0x3154 <start_orizzontal_speed_control+0x44a>
    3152:	7b c0       	rjmp	.+246    	; 0x324a <start_orizzontal_speed_control+0x540>
    3154:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__floatsisf>
    3158:	9b 01       	movw	r18, r22
    315a:	ac 01       	movw	r20, r24
    315c:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3>
    3160:	69 83       	std	Y+1, r22	; 0x01
    3162:	7d 83       	std	Y+5, r23	; 0x05
    3164:	8e 83       	std	Y+6, r24	; 0x06
    3166:	9f 83       	std	Y+7, r25	; 0x07
    3168:	2b cf       	rjmp	.-426    	; 0x2fc0 <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    316a:	57 fc       	sbrc	r5, 7
    316c:	0b c0       	rjmp	.+22     	; 0x3184 <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    316e:	10 92 aa 03 	sts	0x03AA, r1
    3172:	10 92 ab 03 	sts	0x03AB, r1
    3176:	10 92 ac 03 	sts	0x03AC, r1
    317a:	10 92 ad 03 	sts	0x03AD, r1
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3184:	60 34       	cpi	r22, 0x40	; 64
    3186:	f2 ea       	ldi	r31, 0xA2	; 162
    3188:	7f 07       	cpc	r23, r31
    318a:	ff ef       	ldi	r31, 0xFF	; 255
    318c:	8f 07       	cpc	r24, r31
    318e:	ff ef       	ldi	r31, 0xFF	; 255
    3190:	9f 07       	cpc	r25, r31
    3192:	0c f0       	brlt	.+2      	; 0x3196 <start_orizzontal_speed_control+0x48c>
    3194:	8b c0       	rjmp	.+278    	; 0x32ac <start_orizzontal_speed_control+0x5a2>
    3196:	80 e4       	ldi	r24, 0x40	; 64
    3198:	92 ea       	ldi	r25, 0xA2	; 162
    319a:	af ef       	ldi	r26, 0xFF	; 255
    319c:	bf ef       	ldi	r27, 0xFF	; 255
    319e:	80 93 aa 03 	sts	0x03AA, r24
    31a2:	90 93 ab 03 	sts	0x03AB, r25
    31a6:	a0 93 ac 03 	sts	0x03AC, r26
    31aa:	b0 93 ad 03 	sts	0x03AD, r27
    31ae:	6c e4       	ldi	r22, 0x4C	; 76
    31b0:	7f ef       	ldi	r23, 0xFF	; 255
    31b2:	8f ef       	ldi	r24, 0xFF	; 255
    31b4:	9f ef       	ldi	r25, 0xFF	; 255
    31b6:	71 cf       	rjmp	.-286    	; 0x309a <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    31b8:	d7 fc       	sbrc	r13, 7
    31ba:	0b c0       	rjmp	.+22     	; 0x31d2 <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    31bc:	10 92 a6 03 	sts	0x03A6, r1
    31c0:	10 92 a7 03 	sts	0x03A7, r1
    31c4:	10 92 a8 03 	sts	0x03A8, r1
    31c8:	10 92 a9 03 	sts	0x03A9, r1
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    31d2:	60 34       	cpi	r22, 0x40	; 64
    31d4:	f2 ea       	ldi	r31, 0xA2	; 162
    31d6:	7f 07       	cpc	r23, r31
    31d8:	ff ef       	ldi	r31, 0xFF	; 255
    31da:	8f 07       	cpc	r24, r31
    31dc:	ff ef       	ldi	r31, 0xFF	; 255
    31de:	9f 07       	cpc	r25, r31
    31e0:	0c f0       	brlt	.+2      	; 0x31e4 <start_orizzontal_speed_control+0x4da>
    31e2:	91 ce       	rjmp	.-734    	; 0x2f06 <start_orizzontal_speed_control+0x1fc>
    31e4:	80 e4       	ldi	r24, 0x40	; 64
    31e6:	92 ea       	ldi	r25, 0xA2	; 162
    31e8:	af ef       	ldi	r26, 0xFF	; 255
    31ea:	bf ef       	ldi	r27, 0xFF	; 255
    31ec:	80 93 a6 03 	sts	0x03A6, r24
    31f0:	90 93 a7 03 	sts	0x03A7, r25
    31f4:	a0 93 a8 03 	sts	0x03A8, r26
    31f8:	b0 93 a9 03 	sts	0x03A9, r27
    31fc:	84 ce       	rjmp	.-760    	; 0x2f06 <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    31fe:	e0 90 94 03 	lds	r14, 0x0394
    3202:	f0 90 95 03 	lds	r15, 0x0395
    3206:	00 e0       	ldi	r16, 0x00	; 0
    3208:	10 e0       	ldi	r17, 0x00	; 0
    320a:	ea 0c       	add	r14, r10
    320c:	fb 1c       	adc	r15, r11
    320e:	0c 1d       	adc	r16, r12
    3210:	1d 1d       	adc	r17, r13
    3212:	e0 92 b2 03 	sts	0x03B2, r14
    3216:	f0 92 b3 03 	sts	0x03B3, r15
    321a:	00 93 b4 03 	sts	0x03B4, r16
    321e:	10 93 b5 03 	sts	0x03B5, r17
    3222:	cc cd       	rjmp	.-1128   	; 0x2dbc <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    3224:	e0 90 92 03 	lds	r14, 0x0392
    3228:	f0 90 93 03 	lds	r15, 0x0393
    322c:	00 e0       	ldi	r16, 0x00	; 0
    322e:	10 e0       	ldi	r17, 0x00	; 0
    3230:	e2 0c       	add	r14, r2
    3232:	f3 1c       	adc	r15, r3
    3234:	04 1d       	adc	r16, r4
    3236:	15 1d       	adc	r17, r5
    3238:	e0 92 ae 03 	sts	0x03AE, r14
    323c:	f0 92 af 03 	sts	0x03AF, r15
    3240:	00 93 b0 03 	sts	0x03B0, r16
    3244:	10 93 b1 03 	sts	0x03B1, r17
    3248:	84 ce       	rjmp	.-760    	; 0x2f52 <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    324a:	80 e8       	ldi	r24, 0x80	; 128
    324c:	93 ef       	ldi	r25, 0xF3	; 243
    324e:	af ef       	ldi	r26, 0xFF	; 255
    3250:	bf ef       	ldi	r27, 0xFF	; 255
    3252:	80 93 b6 03 	sts	0x03B6, r24
    3256:	90 93 b7 03 	sts	0x03B7, r25
    325a:	a0 93 b8 03 	sts	0x03B8, r26
    325e:	b0 93 b9 03 	sts	0x03B9, r27
    3262:	19 82       	std	Y+1, r1	; 0x01
    3264:	1d 82       	std	Y+5, r1	; 0x05
    3266:	28 ec       	ldi	r18, 0xC8	; 200
    3268:	2e 83       	std	Y+6, r18	; 0x06
    326a:	85 ec       	ldi	r24, 0xC5	; 197
    326c:	8f 83       	std	Y+7, r24	; 0x07
    326e:	a8 ce       	rjmp	.-688    	; 0x2fc0 <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    3270:	80 e8       	ldi	r24, 0x80	; 128
    3272:	93 ef       	ldi	r25, 0xF3	; 243
    3274:	af ef       	ldi	r26, 0xFF	; 255
    3276:	bf ef       	ldi	r27, 0xFF	; 255
    3278:	80 93 ba 03 	sts	0x03BA, r24
    327c:	90 93 bb 03 	sts	0x03BB, r25
    3280:	a0 93 bc 03 	sts	0x03BC, r26
    3284:	b0 93 bd 03 	sts	0x03BD, r27
    3288:	1d 82       	std	Y+5, r1	; 0x05
    328a:	1e 82       	std	Y+6, r1	; 0x06
    328c:	f8 ec       	ldi	r31, 0xC8	; 200
    328e:	ff 83       	std	Y+7, r31	; 0x07
    3290:	25 ec       	ldi	r18, 0xC5	; 197
    3292:	2a 87       	std	Y+10, r18	; 0x0a
    3294:	cb cd       	rjmp	.-1130   	; 0x2e2c <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    3296:	10 92 aa 03 	sts	0x03AA, r1
    329a:	10 92 ab 03 	sts	0x03AB, r1
    329e:	10 92 ac 03 	sts	0x03AC, r1
    32a2:	10 92 ad 03 	sts	0x03AD, r1
    32a6:	60 e0       	ldi	r22, 0x00	; 0
    32a8:	70 e0       	ldi	r23, 0x00	; 0
    32aa:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    32ac:	26 e6       	ldi	r18, 0x66	; 102
    32ae:	32 e0       	ldi	r19, 0x02	; 2
    32b0:	40 e0       	ldi	r20, 0x00	; 0
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	39 e0       	ldi	r19, 0x09	; 9
    32bc:	4d e3       	ldi	r20, 0x3D	; 61
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	0e 94 b3 21 	call	0x4366	; 0x4366 <__divmodsi4>
    32c4:	ca 01       	movw	r24, r20
    32c6:	b9 01       	movw	r22, r18
    32c8:	2c e3       	ldi	r18, 0x3C	; 60
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    32d4:	e2 ce       	rjmp	.-572    	; 0x309a <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    32d6:	10 92 a6 03 	sts	0x03A6, r1
    32da:	10 92 a7 03 	sts	0x03A7, r1
    32de:	10 92 a8 03 	sts	0x03A8, r1
    32e2:	10 92 a9 03 	sts	0x03A9, r1
    32e6:	0f ce       	rjmp	.-994    	; 0x2f06 <start_orizzontal_speed_control+0x1fc>

000032e8 <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    32e8:	8f ef       	ldi	r24, 0xFF	; 255
    32ea:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    32ec:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    32ee:	97 ef       	ldi	r25, 0xF7	; 247
    32f0:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    32f2:	90 ee       	ldi	r25, 0xE0	; 224
    32f4:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    32f6:	90 ef       	ldi	r25, 0xF0	; 240
    32f8:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    32fa:	90 eb       	ldi	r25, 0xB0	; 176
    32fc:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    32fe:	9c ef       	ldi	r25, 0xFC	; 252
    3300:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    3302:	93 e0       	ldi	r25, 0x03	; 3
    3304:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    3306:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3308:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    330a:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    330c:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    330e:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    3310:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3314:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    3318:	9f e8       	ldi	r25, 0x8F	; 143
    331a:	90 93 04 01 	sts	0x0104, r25
	#endif
	#ifdef HE_REV_3_1
	PORTJ = 0x0F;
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    331e:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    3322:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    3326:	10 92 0b 01 	sts	0x010B, r1

		
}
    332a:	08 95       	ret

0000332c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    332c:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    332e:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3330:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3334:	80 e2       	ldi	r24, 0x20	; 32
    3336:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    333a:	08 95       	ret

0000333c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    333c:	94 ea       	ldi	r25, 0xA4	; 164
    333e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3342:	90 91 bc 00 	lds	r25, 0x00BC
    3346:	97 ff       	sbrs	r25, 7
    3348:	fc cf       	rjmp	.-8      	; 0x3342 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    334a:	90 91 b9 00 	lds	r25, 0x00B9
    334e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3350:	98 30       	cpi	r25, 0x08	; 8
    3352:	21 f0       	breq	.+8      	; 0x335c <i2c_start+0x20>
    3354:	90 31       	cpi	r25, 0x10	; 16
    3356:	11 f0       	breq	.+4      	; 0x335c <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	08 95       	ret
	}

	// send device address
	TWDR = address;
    335c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3360:	84 e8       	ldi	r24, 0x84	; 132
    3362:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3366:	80 91 bc 00 	lds	r24, 0x00BC
    336a:	87 ff       	sbrs	r24, 7
    336c:	fc cf       	rjmp	.-8      	; 0x3366 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    336e:	90 91 b9 00 	lds	r25, 0x00B9
    3372:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3374:	98 31       	cpi	r25, 0x18	; 24
    3376:	21 f0       	breq	.+8      	; 0x3380 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 34       	cpi	r25, 0x40	; 64
    337c:	19 f0       	breq	.+6      	; 0x3384 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    337e:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3380:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3382:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	08 95       	ret

00003388 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3388:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    338a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    338c:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    338e:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3392:	90 91 bc 00 	lds	r25, 0x00BC
    3396:	97 ff       	sbrs	r25, 7
    3398:	fc cf       	rjmp	.-8      	; 0x3392 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    339a:	90 91 b9 00 	lds	r25, 0x00B9
    339e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    33a0:	98 30       	cpi	r25, 0x08	; 8
    33a2:	11 f0       	breq	.+4      	; 0x33a8 <i2c_start_wait+0x20>
    33a4:	90 31       	cpi	r25, 0x10	; 16
    33a6:	99 f7       	brne	.-26     	; 0x338e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    33a8:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    33ac:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    33b0:	90 91 bc 00 	lds	r25, 0x00BC
    33b4:	97 ff       	sbrs	r25, 7
    33b6:	fc cf       	rjmp	.-8      	; 0x33b0 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    33b8:	90 91 b9 00 	lds	r25, 0x00B9
    33bc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    33be:	90 32       	cpi	r25, 0x20	; 32
    33c0:	19 f0       	breq	.+6      	; 0x33c8 <i2c_start_wait+0x40>
    33c2:	98 35       	cpi	r25, 0x58	; 88
    33c4:	09 f0       	breq	.+2      	; 0x33c8 <i2c_start_wait+0x40>
    33c6:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    33c8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    33cc:	90 91 bc 00 	lds	r25, 0x00BC
    33d0:	94 fd       	sbrc	r25, 4
    33d2:	fc cf       	rjmp	.-8      	; 0x33cc <i2c_start_wait+0x44>
    33d4:	dc cf       	rjmp	.-72     	; 0x338e <i2c_start_wait+0x6>

000033d6 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    33d6:	94 ea       	ldi	r25, 0xA4	; 164
    33d8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    33dc:	90 91 bc 00 	lds	r25, 0x00BC
    33e0:	97 ff       	sbrs	r25, 7
    33e2:	fc cf       	rjmp	.-8      	; 0x33dc <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    33e4:	90 91 b9 00 	lds	r25, 0x00B9
    33e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    33ea:	98 30       	cpi	r25, 0x08	; 8
    33ec:	21 f0       	breq	.+8      	; 0x33f6 <i2c_rep_start+0x20>
    33ee:	90 31       	cpi	r25, 0x10	; 16
    33f0:	11 f0       	breq	.+4      	; 0x33f6 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    33f6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    33fa:	84 e8       	ldi	r24, 0x84	; 132
    33fc:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3400:	80 91 bc 00 	lds	r24, 0x00BC
    3404:	87 ff       	sbrs	r24, 7
    3406:	fc cf       	rjmp	.-8      	; 0x3400 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3408:	90 91 b9 00 	lds	r25, 0x00B9
    340c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    340e:	98 31       	cpi	r25, 0x18	; 24
    3410:	21 f0       	breq	.+8      	; 0x341a <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 34       	cpi	r25, 0x40	; 64
    3416:	19 f0       	breq	.+6      	; 0x341e <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3418:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    341a:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    341c:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	08 95       	ret

00003422 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3422:	84 e9       	ldi	r24, 0x94	; 148
    3424:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3428:	80 91 bc 00 	lds	r24, 0x00BC
    342c:	84 fd       	sbrc	r24, 4
    342e:	fc cf       	rjmp	.-8      	; 0x3428 <i2c_stop+0x6>

}/* i2c_stop */
    3430:	08 95       	ret

00003432 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3432:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3436:	84 e8       	ldi	r24, 0x84	; 132
    3438:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    343c:	80 91 bc 00 	lds	r24, 0x00BC
    3440:	87 ff       	sbrs	r24, 7
    3442:	fc cf       	rjmp	.-8      	; 0x343c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3444:	90 91 b9 00 	lds	r25, 0x00B9
    3448:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	98 32       	cpi	r25, 0x28	; 40
    344e:	09 f0       	breq	.+2      	; 0x3452 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3450:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3452:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3454:	08 95       	ret

00003456 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3456:	84 ec       	ldi	r24, 0xC4	; 196
    3458:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    345c:	80 91 bc 00 	lds	r24, 0x00BC
    3460:	87 ff       	sbrs	r24, 7
    3462:	fc cf       	rjmp	.-8      	; 0x345c <i2c_readAck+0x6>

    return TWDR;
    3464:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3468:	08 95       	ret

0000346a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    346a:	84 e8       	ldi	r24, 0x84	; 132
    346c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3470:	80 91 bc 00 	lds	r24, 0x00BC
    3474:	87 ff       	sbrs	r24, 7
    3476:	fc cf       	rjmp	.-8      	; 0x3470 <i2c_readNak+0x6>
	
    return TWDR;
    3478:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    347c:	08 95       	ret

0000347e <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    347e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3482:	80 e1       	ldi	r24, 0x10	; 16
    3484:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3488:	e0 ec       	ldi	r30, 0xC0	; 192
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	82 60       	ori	r24, 0x02	; 2
    3490:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    3492:	e1 ec       	ldi	r30, 0xC1	; 193
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	88 69       	ori	r24, 0x98	; 152
    349a:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    349c:	e2 ec       	ldi	r30, 0xC2	; 194
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	86 60       	ori	r24, 0x06	; 6
    34a4:	80 83       	st	Z, r24

}
    34a6:	08 95       	ret

000034a8 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    34a8:	90 91 c0 00 	lds	r25, 0x00C0
    34ac:	95 ff       	sbrs	r25, 5
    34ae:	fc cf       	rjmp	.-8      	; 0x34a8 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    34b0:	80 93 c6 00 	sts	0x00C6, r24

}
    34b4:	08 95       	ret

000034b6 <__vector_25>:

ISR(USART0_RX_vect) {
    34b6:	1f 92       	push	r1
    34b8:	0f 92       	push	r0
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	0f 92       	push	r0
    34be:	11 24       	eor	r1, r1
    34c0:	2f 93       	push	r18
    34c2:	8f 93       	push	r24
    34c4:	9f 93       	push	r25
    34c6:	af 93       	push	r26
    34c8:	bf 93       	push	r27

	char receivedByte = UDR0;
    34ca:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    34ce:	90 91 10 02 	lds	r25, 0x0210
    34d2:	99 23       	and	r25, r25
    34d4:	c9 f0       	breq	.+50     	; 0x3508 <__vector_25+0x52>
		switch(receivedByte) {
    34d6:	82 33       	cpi	r24, 0x32	; 50
    34d8:	09 f4       	brne	.+2      	; 0x34dc <__vector_25+0x26>
    34da:	56 c0       	rjmp	.+172    	; 0x3588 <__vector_25+0xd2>
    34dc:	83 33       	cpi	r24, 0x33	; 51
    34de:	58 f5       	brcc	.+86     	; 0x3536 <__vector_25+0x80>
    34e0:	80 33       	cpi	r24, 0x30	; 48
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <__vector_25+0x30>
    34e4:	79 c0       	rjmp	.+242    	; 0x35d8 <__vector_25+0x122>
    34e6:	81 33       	cpi	r24, 0x31	; 49
    34e8:	29 f4       	brne	.+10     	; 0x34f4 <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    34f0:	10 92 10 02 	sts	0x0210, r1

	}



}
    34f4:	bf 91       	pop	r27
    34f6:	af 91       	pop	r26
    34f8:	9f 91       	pop	r25
    34fa:	8f 91       	pop	r24
    34fc:	2f 91       	pop	r18
    34fe:	0f 90       	pop	r0
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	0f 90       	pop	r0
    3504:	1f 90       	pop	r1
    3506:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3508:	90 91 0f 02 	lds	r25, 0x020F
    350c:	92 30       	cpi	r25, 0x02	; 2
    350e:	09 f4       	brne	.+2      	; 0x3512 <__vector_25+0x5c>
    3510:	41 c0       	rjmp	.+130    	; 0x3594 <__vector_25+0xde>
    3512:	93 30       	cpi	r25, 0x03	; 3
    3514:	08 f1       	brcs	.+66     	; 0x3558 <__vector_25+0xa2>
    3516:	94 30       	cpi	r25, 0x04	; 4
    3518:	09 f4       	brne	.+2      	; 0x351c <__vector_25+0x66>
    351a:	89 c0       	rjmp	.+274    	; 0x362e <__vector_25+0x178>
    351c:	94 30       	cpi	r25, 0x04	; 4
    351e:	08 f4       	brcc	.+2      	; 0x3522 <__vector_25+0x6c>
    3520:	6c c0       	rjmp	.+216    	; 0x35fa <__vector_25+0x144>
    3522:	95 30       	cpi	r25, 0x05	; 5
    3524:	39 f7       	brne	.-50     	; 0x34f4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    3526:	83 37       	cpi	r24, 0x73	; 115
    3528:	29 f7       	brne	.-54     	; 0x34f4 <__vector_25+0x3e>
					sendAdcValues = 0;
    352a:	10 92 d7 03 	sts	0x03D7, r1
					choosePeripheral = 1;
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	80 93 10 02 	sts	0x0210, r24
    3534:	df cf       	rjmp	.-66     	; 0x34f4 <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    3536:	84 33       	cpi	r24, 0x34	; 52
    3538:	09 f4       	brne	.+2      	; 0x353c <__vector_25+0x86>
    353a:	59 c0       	rjmp	.+178    	; 0x35ee <__vector_25+0x138>
    353c:	84 33       	cpi	r24, 0x34	; 52
    353e:	08 f4       	brcc	.+2      	; 0x3542 <__vector_25+0x8c>
    3540:	50 c0       	rjmp	.+160    	; 0x35e2 <__vector_25+0x12c>
    3542:	85 33       	cpi	r24, 0x35	; 53
    3544:	b9 f6       	brne	.-82     	; 0x34f4 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    3546:	85 e0       	ldi	r24, 0x05	; 5
    3548:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    354c:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	80 93 d7 03 	sts	0x03D7, r24
				break;
    3556:	ce cf       	rjmp	.-100    	; 0x34f4 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3558:	99 23       	and	r25, r25
    355a:	91 f5       	brne	.+100    	; 0x35c0 <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    355c:	8d 32       	cpi	r24, 0x2D	; 45
    355e:	09 f4       	brne	.+2      	; 0x3562 <__vector_25+0xac>
    3560:	05 c1       	rjmp	.+522    	; 0x376c <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    3562:	8b 32       	cpi	r24, 0x2B	; 43
    3564:	21 f7       	brne	.-56     	; 0x352e <__vector_25+0x78>
					current_pwm = pwm_red-10;
    3566:	80 91 0c 02 	lds	r24, 0x020C
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    356e:	97 fd       	sbrc	r25, 7
    3570:	9c c1       	rjmp	.+824    	; 0x38aa <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    3572:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    3576:	88 23       	and	r24, r24
    3578:	09 f4       	brne	.+2      	; 0x357c <__vector_25+0xc6>
    357a:	99 c1       	rjmp	.+818    	; 0x38ae <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	90 93 89 00 	sts	0x0089, r25
    3582:	80 93 88 00 	sts	0x0088, r24
    3586:	b6 cf       	rjmp	.-148    	; 0x34f4 <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    358e:	10 92 10 02 	sts	0x0210, r1
				break;
    3592:	b0 cf       	rjmp	.-160    	; 0x34f4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    3594:	8d 32       	cpi	r24, 0x2D	; 45
    3596:	09 f4       	brne	.+2      	; 0x359a <__vector_25+0xe4>
    3598:	2f c1       	rjmp	.+606    	; 0x37f8 <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    359a:	8b 32       	cpi	r24, 0x2B	; 43
    359c:	41 f6       	brne	.-112    	; 0x352e <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    359e:	80 91 0e 02 	lds	r24, 0x020E
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    35a6:	97 fd       	sbrc	r25, 7
    35a8:	92 c1       	rjmp	.+804    	; 0x38ce <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    35aa:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    35ae:	88 23       	and	r24, r24
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <__vector_25+0xfe>
    35b2:	8f c1       	rjmp	.+798    	; 0x38d2 <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	90 93 8d 00 	sts	0x008D, r25
    35ba:	80 93 8c 00 	sts	0x008C, r24
    35be:	9a cf       	rjmp	.-204    	; 0x34f4 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    35c0:	91 30       	cpi	r25, 0x01	; 1
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <__vector_25+0x110>
    35c4:	97 cf       	rjmp	.-210    	; 0x34f4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    35c6:	8d 32       	cpi	r24, 0x2D	; 45
    35c8:	09 f4       	brne	.+2      	; 0x35cc <__vector_25+0x116>
    35ca:	b9 c0       	rjmp	.+370    	; 0x373e <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    35cc:	8b 32       	cpi	r24, 0x2B	; 43
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <__vector_25+0x11c>
    35d0:	47 c0       	rjmp	.+142    	; 0x3660 <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    35d2:	90 93 10 02 	sts	0x0210, r25
    35d6:	8e cf       	rjmp	.-228    	; 0x34f4 <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    35d8:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    35dc:	10 92 10 02 	sts	0x0210, r1
				break;
    35e0:	89 cf       	rjmp	.-238    	; 0x34f4 <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    35e2:	83 e0       	ldi	r24, 0x03	; 3
    35e4:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    35e8:	10 92 10 02 	sts	0x0210, r1
				break;
    35ec:	83 cf       	rjmp	.-250    	; 0x34f4 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    35ee:	84 e0       	ldi	r24, 0x04	; 4
    35f0:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    35f4:	10 92 10 02 	sts	0x0210, r1
				break;
    35f8:	7d cf       	rjmp	.-262    	; 0x34f4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    35fa:	8b 32       	cpi	r24, 0x2B	; 43
    35fc:	09 f4       	brne	.+2      	; 0x3600 <__vector_25+0x14a>
    35fe:	13 c1       	rjmp	.+550    	; 0x3826 <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    3600:	8d 32       	cpi	r24, 0x2D	; 45
    3602:	09 f4       	brne	.+2      	; 0x3606 <__vector_25+0x150>
    3604:	6d c0       	rjmp	.+218    	; 0x36e0 <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    3606:	83 37       	cpi	r24, 0x73	; 115
    3608:	09 f0       	breq	.+2      	; 0x360c <__vector_25+0x156>
    360a:	91 cf       	rjmp	.-222    	; 0x352e <__vector_25+0x78>
					pwm_right = 0;
    360c:	10 92 96 03 	sts	0x0396, r1
    3610:	10 92 97 03 	sts	0x0397, r1
    3614:	10 92 98 03 	sts	0x0398, r1
    3618:	10 92 99 03 	sts	0x0399, r1
					OCR3A = 0;
    361c:	10 92 99 00 	sts	0x0099, r1
    3620:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    3624:	10 92 9b 00 	sts	0x009B, r1
    3628:	10 92 9a 00 	sts	0x009A, r1
    362c:	63 cf       	rjmp	.-314    	; 0x34f4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    362e:	8b 32       	cpi	r24, 0x2B	; 43
    3630:	09 f4       	brne	.+2      	; 0x3634 <__vector_25+0x17e>
    3632:	b3 c0       	rjmp	.+358    	; 0x379a <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    3634:	8d 32       	cpi	r24, 0x2D	; 45
    3636:	29 f1       	breq	.+74     	; 0x3682 <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    3638:	83 37       	cpi	r24, 0x73	; 115
    363a:	09 f0       	breq	.+2      	; 0x363e <__vector_25+0x188>
    363c:	78 cf       	rjmp	.-272    	; 0x352e <__vector_25+0x78>
					pwm_left = 0;
    363e:	10 92 9a 03 	sts	0x039A, r1
    3642:	10 92 9b 03 	sts	0x039B, r1
    3646:	10 92 9c 03 	sts	0x039C, r1
    364a:	10 92 9d 03 	sts	0x039D, r1
					OCR4A = 0;
    364e:	10 92 a9 00 	sts	0x00A9, r1
    3652:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    3656:	10 92 ab 00 	sts	0x00AB, r1
    365a:	10 92 aa 00 	sts	0x00AA, r1
    365e:	4a cf       	rjmp	.-364    	; 0x34f4 <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    3660:	80 91 0d 02 	lds	r24, 0x020D
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3668:	97 fd       	sbrc	r25, 7
    366a:	28 c1       	rjmp	.+592    	; 0x38bc <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    366c:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    3670:	88 23       	and	r24, r24
    3672:	09 f4       	brne	.+2      	; 0x3676 <__vector_25+0x1c0>
    3674:	25 c1       	rjmp	.+586    	; 0x38c0 <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	90 93 8b 00 	sts	0x008B, r25
    367c:	80 93 8a 00 	sts	0x008A, r24
    3680:	39 cf       	rjmp	.-398    	; 0x34f4 <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    3682:	80 91 9a 03 	lds	r24, 0x039A
    3686:	90 91 9b 03 	lds	r25, 0x039B
    368a:	a0 91 9c 03 	lds	r26, 0x039C
    368e:	b0 91 9d 03 	lds	r27, 0x039D
    3692:	4e 97       	sbiw	r24, 0x1e	; 30
    3694:	a1 09       	sbc	r26, r1
    3696:	b1 09       	sbc	r27, r1
    3698:	80 93 9a 03 	sts	0x039A, r24
    369c:	90 93 9b 03 	sts	0x039B, r25
    36a0:	a0 93 9c 03 	sts	0x039C, r26
    36a4:	b0 93 9d 03 	sts	0x039D, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    36a8:	8a 39       	cpi	r24, 0x9A	; 154
    36aa:	2d ef       	ldi	r18, 0xFD	; 253
    36ac:	92 07       	cpc	r25, r18
    36ae:	2f ef       	ldi	r18, 0xFF	; 255
    36b0:	a2 07       	cpc	r26, r18
    36b2:	2f ef       	ldi	r18, 0xFF	; 255
    36b4:	b2 07       	cpc	r27, r18
    36b6:	0c f0       	brlt	.+2      	; 0x36ba <__vector_25+0x204>
    36b8:	13 c1       	rjmp	.+550    	; 0x38e0 <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    36ba:	8a e9       	ldi	r24, 0x9A	; 154
    36bc:	9d ef       	ldi	r25, 0xFD	; 253
    36be:	af ef       	ldi	r26, 0xFF	; 255
    36c0:	bf ef       	ldi	r27, 0xFF	; 255
    36c2:	80 93 9a 03 	sts	0x039A, r24
    36c6:	90 93 9b 03 	sts	0x039B, r25
    36ca:	a0 93 9c 03 	sts	0x039C, r26
    36ce:	b0 93 9d 03 	sts	0x039D, r27
    36d2:	86 e6       	ldi	r24, 0x66	; 102
    36d4:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    36d6:	90 93 ab 00 	sts	0x00AB, r25
    36da:	80 93 aa 00 	sts	0x00AA, r24
    36de:	0a cf       	rjmp	.-492    	; 0x34f4 <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    36e0:	80 91 96 03 	lds	r24, 0x0396
    36e4:	90 91 97 03 	lds	r25, 0x0397
    36e8:	a0 91 98 03 	lds	r26, 0x0398
    36ec:	b0 91 99 03 	lds	r27, 0x0399
    36f0:	4e 97       	sbiw	r24, 0x1e	; 30
    36f2:	a1 09       	sbc	r26, r1
    36f4:	b1 09       	sbc	r27, r1
    36f6:	80 93 96 03 	sts	0x0396, r24
    36fa:	90 93 97 03 	sts	0x0397, r25
    36fe:	a0 93 98 03 	sts	0x0398, r26
    3702:	b0 93 99 03 	sts	0x0399, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    3706:	8a 39       	cpi	r24, 0x9A	; 154
    3708:	2d ef       	ldi	r18, 0xFD	; 253
    370a:	92 07       	cpc	r25, r18
    370c:	2f ef       	ldi	r18, 0xFF	; 255
    370e:	a2 07       	cpc	r26, r18
    3710:	2f ef       	ldi	r18, 0xFF	; 255
    3712:	b2 07       	cpc	r27, r18
    3714:	0c f0       	brlt	.+2      	; 0x3718 <__vector_25+0x262>
    3716:	ea c0       	rjmp	.+468    	; 0x38ec <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    3718:	8a e9       	ldi	r24, 0x9A	; 154
    371a:	9d ef       	ldi	r25, 0xFD	; 253
    371c:	af ef       	ldi	r26, 0xFF	; 255
    371e:	bf ef       	ldi	r27, 0xFF	; 255
    3720:	80 93 96 03 	sts	0x0396, r24
    3724:	90 93 97 03 	sts	0x0397, r25
    3728:	a0 93 98 03 	sts	0x0398, r26
    372c:	b0 93 99 03 	sts	0x0399, r27
    3730:	86 e6       	ldi	r24, 0x66	; 102
    3732:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    3734:	90 93 9b 00 	sts	0x009B, r25
    3738:	80 93 9a 00 	sts	0x009A, r24
    373c:	db ce       	rjmp	.-586    	; 0x34f4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    373e:	80 91 80 00 	lds	r24, 0x0080
    3742:	80 62       	ori	r24, 0x20	; 32
    3744:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    3748:	80 91 0d 02 	lds	r24, 0x020D
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    3750:	8f 3f       	cpi	r24, 0xFF	; 255
    3752:	91 05       	cpc	r25, r1
    3754:	19 f0       	breq	.+6      	; 0x375c <__vector_25+0x2a6>
    3756:	14 f0       	brlt	.+4      	; 0x375c <__vector_25+0x2a6>
    3758:	8f ef       	ldi	r24, 0xFF	; 255
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	90 93 8b 00 	sts	0x008B, r25
    3766:	80 93 8a 00 	sts	0x008A, r24
    376a:	c4 ce       	rjmp	.-632    	; 0x34f4 <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    376c:	80 91 80 00 	lds	r24, 0x0080
    3770:	80 68       	ori	r24, 0x80	; 128
    3772:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    3776:	80 91 0c 02 	lds	r24, 0x020C
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    377e:	8f 3f       	cpi	r24, 0xFF	; 255
    3780:	91 05       	cpc	r25, r1
    3782:	19 f0       	breq	.+6      	; 0x378a <__vector_25+0x2d4>
    3784:	14 f0       	brlt	.+4      	; 0x378a <__vector_25+0x2d4>
    3786:	8f ef       	ldi	r24, 0xFF	; 255
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	90 93 89 00 	sts	0x0089, r25
    3794:	80 93 88 00 	sts	0x0088, r24
    3798:	ad ce       	rjmp	.-678    	; 0x34f4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    379a:	80 91 9a 03 	lds	r24, 0x039A
    379e:	90 91 9b 03 	lds	r25, 0x039B
    37a2:	a0 91 9c 03 	lds	r26, 0x039C
    37a6:	b0 91 9d 03 	lds	r27, 0x039D
    37aa:	4e 96       	adiw	r24, 0x1e	; 30
    37ac:	a1 1d       	adc	r26, r1
    37ae:	b1 1d       	adc	r27, r1
    37b0:	80 93 9a 03 	sts	0x039A, r24
    37b4:	90 93 9b 03 	sts	0x039B, r25
    37b8:	a0 93 9c 03 	sts	0x039C, r26
    37bc:	b0 93 9d 03 	sts	0x039D, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    37c0:	87 36       	cpi	r24, 0x67	; 103
    37c2:	22 e0       	ldi	r18, 0x02	; 2
    37c4:	92 07       	cpc	r25, r18
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	a2 07       	cpc	r26, r18
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	b2 07       	cpc	r27, r18
    37ce:	0c f4       	brge	.+2      	; 0x37d2 <__vector_25+0x31c>
    37d0:	58 c0       	rjmp	.+176    	; 0x3882 <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    37d2:	86 e6       	ldi	r24, 0x66	; 102
    37d4:	92 e0       	ldi	r25, 0x02	; 2
    37d6:	a0 e0       	ldi	r26, 0x00	; 0
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	80 93 9a 03 	sts	0x039A, r24
    37de:	90 93 9b 03 	sts	0x039B, r25
    37e2:	a0 93 9c 03 	sts	0x039C, r26
    37e6:	b0 93 9d 03 	sts	0x039D, r27
    37ea:	86 e6       	ldi	r24, 0x66	; 102
    37ec:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    37ee:	90 93 a9 00 	sts	0x00A9, r25
    37f2:	80 93 a8 00 	sts	0x00A8, r24
    37f6:	7e ce       	rjmp	.-772    	; 0x34f4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    37f8:	80 91 80 00 	lds	r24, 0x0080
    37fc:	88 60       	ori	r24, 0x08	; 8
    37fe:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    3802:	80 91 0e 02 	lds	r24, 0x020E
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    380a:	8f 3f       	cpi	r24, 0xFF	; 255
    380c:	91 05       	cpc	r25, r1
    380e:	19 f0       	breq	.+6      	; 0x3816 <__vector_25+0x360>
    3810:	14 f0       	brlt	.+4      	; 0x3816 <__vector_25+0x360>
    3812:	8f ef       	ldi	r24, 0xFF	; 255
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	90 93 8d 00 	sts	0x008D, r25
    3820:	80 93 8c 00 	sts	0x008C, r24
    3824:	67 ce       	rjmp	.-818    	; 0x34f4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    3826:	80 91 96 03 	lds	r24, 0x0396
    382a:	90 91 97 03 	lds	r25, 0x0397
    382e:	a0 91 98 03 	lds	r26, 0x0398
    3832:	b0 91 99 03 	lds	r27, 0x0399
    3836:	4e 96       	adiw	r24, 0x1e	; 30
    3838:	a1 1d       	adc	r26, r1
    383a:	b1 1d       	adc	r27, r1
    383c:	80 93 96 03 	sts	0x0396, r24
    3840:	90 93 97 03 	sts	0x0397, r25
    3844:	a0 93 98 03 	sts	0x0398, r26
    3848:	b0 93 99 03 	sts	0x0399, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    384c:	87 36       	cpi	r24, 0x67	; 103
    384e:	22 e0       	ldi	r18, 0x02	; 2
    3850:	92 07       	cpc	r25, r18
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	a2 07       	cpc	r26, r18
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	b2 07       	cpc	r27, r18
    385a:	ec f0       	brlt	.+58     	; 0x3896 <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    385c:	86 e6       	ldi	r24, 0x66	; 102
    385e:	92 e0       	ldi	r25, 0x02	; 2
    3860:	a0 e0       	ldi	r26, 0x00	; 0
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	80 93 96 03 	sts	0x0396, r24
    3868:	90 93 97 03 	sts	0x0397, r25
    386c:	a0 93 98 03 	sts	0x0398, r26
    3870:	b0 93 99 03 	sts	0x0399, r27
    3874:	86 e6       	ldi	r24, 0x66	; 102
    3876:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    3878:	90 93 99 00 	sts	0x0099, r25
    387c:	80 93 98 00 	sts	0x0098, r24
    3880:	39 ce       	rjmp	.-910    	; 0x34f4 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    3882:	b7 ff       	sbrs	r27, 7
    3884:	b4 cf       	rjmp	.-152    	; 0x37ee <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3886:	90 95       	com	r25
    3888:	81 95       	neg	r24
    388a:	9f 4f       	sbci	r25, 0xFF	; 255
    388c:	90 93 ab 00 	sts	0x00AB, r25
    3890:	80 93 aa 00 	sts	0x00AA, r24
    3894:	2f ce       	rjmp	.-930    	; 0x34f4 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3896:	b7 ff       	sbrs	r27, 7
    3898:	ef cf       	rjmp	.-34     	; 0x3878 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    389a:	90 95       	com	r25
    389c:	81 95       	neg	r24
    389e:	9f 4f       	sbci	r25, 0xFF	; 255
    38a0:	90 93 9b 00 	sts	0x009B, r25
    38a4:	80 93 9a 00 	sts	0x009A, r24
    38a8:	25 ce       	rjmp	.-950    	; 0x34f4 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    38aa:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    38ae:	80 91 80 00 	lds	r24, 0x0080
    38b2:	8f 77       	andi	r24, 0x7F	; 127
    38b4:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    38b8:	2d 98       	cbi	0x05, 5	; 5
    38ba:	1c ce       	rjmp	.-968    	; 0x34f4 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    38bc:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    38c0:	80 91 80 00 	lds	r24, 0x0080
    38c4:	8f 7d       	andi	r24, 0xDF	; 223
    38c6:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    38ca:	2e 98       	cbi	0x05, 6	; 5
    38cc:	13 ce       	rjmp	.-986    	; 0x34f4 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    38ce:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    38d2:	80 91 80 00 	lds	r24, 0x0080
    38d6:	87 7f       	andi	r24, 0xF7	; 247
    38d8:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    38dc:	2f 98       	cbi	0x05, 7	; 5
    38de:	0a ce       	rjmp	.-1004   	; 0x34f4 <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    38e0:	b7 ff       	sbrs	r27, 7
    38e2:	85 cf       	rjmp	.-246    	; 0x37ee <__vector_25+0x338>
						OCR4A = pwm_left;
    38e4:	90 95       	com	r25
    38e6:	81 95       	neg	r24
    38e8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ea:	f5 ce       	rjmp	.-534    	; 0x36d6 <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    38ec:	b7 ff       	sbrs	r27, 7
    38ee:	c4 cf       	rjmp	.-120    	; 0x3878 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    38f0:	90 95       	com	r25
    38f2:	81 95       	neg	r24
    38f4:	9f 4f       	sbci	r25, 0xFF	; 255
    38f6:	1e cf       	rjmp	.-452    	; 0x3734 <__vector_25+0x27e>

000038f8 <_fpadd_parts>:
    38f8:	a0 e0       	ldi	r26, 0x00	; 0
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e2 e8       	ldi	r30, 0x82	; 130
    38fe:	fc e1       	ldi	r31, 0x1C	; 28
    3900:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__prologue_saves__+0x4>
    3904:	2c 01       	movw	r4, r24
    3906:	5b 01       	movw	r10, r22
    3908:	fa 01       	movw	r30, r20
    390a:	dc 01       	movw	r26, r24
    390c:	9c 91       	ld	r25, X
    390e:	92 30       	cpi	r25, 0x02	; 2
    3910:	08 f4       	brcc	.+2      	; 0x3914 <_fpadd_parts+0x1c>
    3912:	32 c1       	rjmp	.+612    	; 0x3b78 <_fpadd_parts+0x280>
    3914:	eb 01       	movw	r28, r22
    3916:	88 81       	ld	r24, Y
    3918:	82 30       	cpi	r24, 0x02	; 2
    391a:	08 f4       	brcc	.+2      	; 0x391e <_fpadd_parts+0x26>
    391c:	2c c1       	rjmp	.+600    	; 0x3b76 <_fpadd_parts+0x27e>
    391e:	94 30       	cpi	r25, 0x04	; 4
    3920:	71 f4       	brne	.+28     	; 0x393e <_fpadd_parts+0x46>
    3922:	84 30       	cpi	r24, 0x04	; 4
    3924:	09 f0       	breq	.+2      	; 0x3928 <_fpadd_parts+0x30>
    3926:	28 c1       	rjmp	.+592    	; 0x3b78 <_fpadd_parts+0x280>
    3928:	f2 01       	movw	r30, r4
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	98 17       	cp	r25, r24
    3930:	09 f4       	brne	.+2      	; 0x3934 <_fpadd_parts+0x3c>
    3932:	22 c1       	rjmp	.+580    	; 0x3b78 <_fpadd_parts+0x280>
    3934:	16 e1       	ldi	r17, 0x16	; 22
    3936:	41 2e       	mov	r4, r17
    3938:	12 e0       	ldi	r17, 0x02	; 2
    393a:	51 2e       	mov	r5, r17
    393c:	1d c1       	rjmp	.+570    	; 0x3b78 <_fpadd_parts+0x280>
    393e:	84 30       	cpi	r24, 0x04	; 4
    3940:	09 f4       	brne	.+2      	; 0x3944 <_fpadd_parts+0x4c>
    3942:	19 c1       	rjmp	.+562    	; 0x3b76 <_fpadd_parts+0x27e>
    3944:	82 30       	cpi	r24, 0x02	; 2
    3946:	a9 f4       	brne	.+42     	; 0x3972 <_fpadd_parts+0x7a>
    3948:	92 30       	cpi	r25, 0x02	; 2
    394a:	09 f0       	breq	.+2      	; 0x394e <_fpadd_parts+0x56>
    394c:	15 c1       	rjmp	.+554    	; 0x3b78 <_fpadd_parts+0x280>
    394e:	ca 01       	movw	r24, r20
    3950:	a2 01       	movw	r20, r4
    3952:	28 e0       	ldi	r18, 0x08	; 8
    3954:	da 01       	movw	r26, r20
    3956:	0d 90       	ld	r0, X+
    3958:	ad 01       	movw	r20, r26
    395a:	ec 01       	movw	r28, r24
    395c:	09 92       	st	Y+, r0
    395e:	ce 01       	movw	r24, r28
    3960:	21 50       	subi	r18, 0x01	; 1
    3962:	c1 f7       	brne	.-16     	; 0x3954 <_fpadd_parts+0x5c>
    3964:	e5 01       	movw	r28, r10
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	e2 01       	movw	r28, r4
    396a:	99 81       	ldd	r25, Y+1	; 0x01
    396c:	89 23       	and	r24, r25
    396e:	81 83       	std	Z+1, r24	; 0x01
    3970:	00 c1       	rjmp	.+512    	; 0x3b72 <_fpadd_parts+0x27a>
    3972:	92 30       	cpi	r25, 0x02	; 2
    3974:	09 f4       	brne	.+2      	; 0x3978 <_fpadd_parts+0x80>
    3976:	ff c0       	rjmp	.+510    	; 0x3b76 <_fpadd_parts+0x27e>
    3978:	e2 01       	movw	r28, r4
    397a:	ca 80       	ldd	r12, Y+2	; 0x02
    397c:	db 80       	ldd	r13, Y+3	; 0x03
    397e:	eb 01       	movw	r28, r22
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	9b 81       	ldd	r25, Y+3	; 0x03
    3984:	e2 01       	movw	r28, r4
    3986:	2c 81       	ldd	r18, Y+4	; 0x04
    3988:	3d 81       	ldd	r19, Y+5	; 0x05
    398a:	4e 81       	ldd	r20, Y+6	; 0x06
    398c:	5f 81       	ldd	r21, Y+7	; 0x07
    398e:	eb 01       	movw	r28, r22
    3990:	ec 80       	ldd	r14, Y+4	; 0x04
    3992:	fd 80       	ldd	r15, Y+5	; 0x05
    3994:	0e 81       	ldd	r16, Y+6	; 0x06
    3996:	1f 81       	ldd	r17, Y+7	; 0x07
    3998:	b6 01       	movw	r22, r12
    399a:	68 1b       	sub	r22, r24
    399c:	79 0b       	sbc	r23, r25
    399e:	db 01       	movw	r26, r22
    39a0:	77 ff       	sbrs	r23, 7
    39a2:	03 c0       	rjmp	.+6      	; 0x39aa <_fpadd_parts+0xb2>
    39a4:	70 95       	com	r23
    39a6:	61 95       	neg	r22
    39a8:	7f 4f       	sbci	r23, 0xFF	; 255
    39aa:	60 32       	cpi	r22, 0x20	; 32
    39ac:	71 05       	cpc	r23, r1
    39ae:	0c f0       	brlt	.+2      	; 0x39b2 <_fpadd_parts+0xba>
    39b0:	5d c0       	rjmp	.+186    	; 0x3a6c <_fpadd_parts+0x174>
    39b2:	1a 16       	cp	r1, r26
    39b4:	1b 06       	cpc	r1, r27
    39b6:	5c f5       	brge	.+86     	; 0x3a0e <_fpadd_parts+0x116>
    39b8:	66 24       	eor	r6, r6
    39ba:	77 24       	eor	r7, r7
    39bc:	43 01       	movw	r8, r6
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	a0 e0       	ldi	r26, 0x00	; 0
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	06 2e       	mov	r0, r22
    39c8:	04 c0       	rjmp	.+8      	; 0x39d2 <_fpadd_parts+0xda>
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	aa 1f       	adc	r26, r26
    39d0:	bb 1f       	adc	r27, r27
    39d2:	0a 94       	dec	r0
    39d4:	d2 f7       	brpl	.-12     	; 0x39ca <_fpadd_parts+0xd2>
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	a1 09       	sbc	r26, r1
    39da:	b1 09       	sbc	r27, r1
    39dc:	8e 21       	and	r24, r14
    39de:	9f 21       	and	r25, r15
    39e0:	a0 23       	and	r26, r16
    39e2:	b1 23       	and	r27, r17
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	a1 05       	cpc	r26, r1
    39e8:	b1 05       	cpc	r27, r1
    39ea:	29 f0       	breq	.+10     	; 0x39f6 <_fpadd_parts+0xfe>
    39ec:	b1 e0       	ldi	r27, 0x01	; 1
    39ee:	6b 2e       	mov	r6, r27
    39f0:	71 2c       	mov	r7, r1
    39f2:	81 2c       	mov	r8, r1
    39f4:	91 2c       	mov	r9, r1
    39f6:	04 c0       	rjmp	.+8      	; 0x3a00 <_fpadd_parts+0x108>
    39f8:	16 95       	lsr	r17
    39fa:	07 95       	ror	r16
    39fc:	f7 94       	ror	r15
    39fe:	e7 94       	ror	r14
    3a00:	6a 95       	dec	r22
    3a02:	d2 f7       	brpl	.-12     	; 0x39f8 <_fpadd_parts+0x100>
    3a04:	e6 28       	or	r14, r6
    3a06:	f7 28       	or	r15, r7
    3a08:	08 29       	or	r16, r8
    3a0a:	19 29       	or	r17, r9
    3a0c:	3b c0       	rjmp	.+118    	; 0x3a84 <_fpadd_parts+0x18c>
    3a0e:	ab 2b       	or	r26, r27
    3a10:	c9 f1       	breq	.+114    	; 0x3a84 <_fpadd_parts+0x18c>
    3a12:	c6 0e       	add	r12, r22
    3a14:	d7 1e       	adc	r13, r23
    3a16:	66 24       	eor	r6, r6
    3a18:	77 24       	eor	r7, r7
    3a1a:	43 01       	movw	r8, r6
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	a0 e0       	ldi	r26, 0x00	; 0
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	06 2e       	mov	r0, r22
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <_fpadd_parts+0x138>
    3a28:	88 0f       	add	r24, r24
    3a2a:	99 1f       	adc	r25, r25
    3a2c:	aa 1f       	adc	r26, r26
    3a2e:	bb 1f       	adc	r27, r27
    3a30:	0a 94       	dec	r0
    3a32:	d2 f7       	brpl	.-12     	; 0x3a28 <_fpadd_parts+0x130>
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	a1 09       	sbc	r26, r1
    3a38:	b1 09       	sbc	r27, r1
    3a3a:	82 23       	and	r24, r18
    3a3c:	93 23       	and	r25, r19
    3a3e:	a4 23       	and	r26, r20
    3a40:	b5 23       	and	r27, r21
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	a1 05       	cpc	r26, r1
    3a46:	b1 05       	cpc	r27, r1
    3a48:	29 f0       	breq	.+10     	; 0x3a54 <_fpadd_parts+0x15c>
    3a4a:	a1 e0       	ldi	r26, 0x01	; 1
    3a4c:	6a 2e       	mov	r6, r26
    3a4e:	71 2c       	mov	r7, r1
    3a50:	81 2c       	mov	r8, r1
    3a52:	91 2c       	mov	r9, r1
    3a54:	04 c0       	rjmp	.+8      	; 0x3a5e <_fpadd_parts+0x166>
    3a56:	56 95       	lsr	r21
    3a58:	47 95       	ror	r20
    3a5a:	37 95       	ror	r19
    3a5c:	27 95       	ror	r18
    3a5e:	6a 95       	dec	r22
    3a60:	d2 f7       	brpl	.-12     	; 0x3a56 <_fpadd_parts+0x15e>
    3a62:	26 29       	or	r18, r6
    3a64:	37 29       	or	r19, r7
    3a66:	48 29       	or	r20, r8
    3a68:	59 29       	or	r21, r9
    3a6a:	0c c0       	rjmp	.+24     	; 0x3a84 <_fpadd_parts+0x18c>
    3a6c:	8c 15       	cp	r24, r12
    3a6e:	9d 05       	cpc	r25, r13
    3a70:	34 f0       	brlt	.+12     	; 0x3a7e <_fpadd_parts+0x186>
    3a72:	6c 01       	movw	r12, r24
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e0       	ldi	r20, 0x00	; 0
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	03 c0       	rjmp	.+6      	; 0x3a84 <_fpadd_parts+0x18c>
    3a7e:	ee 24       	eor	r14, r14
    3a80:	ff 24       	eor	r15, r15
    3a82:	87 01       	movw	r16, r14
    3a84:	e2 01       	movw	r28, r4
    3a86:	99 81       	ldd	r25, Y+1	; 0x01
    3a88:	e5 01       	movw	r28, r10
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	98 17       	cp	r25, r24
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <_fpadd_parts+0x19a>
    3a90:	43 c0       	rjmp	.+134    	; 0x3b18 <_fpadd_parts+0x220>
    3a92:	99 23       	and	r25, r25
    3a94:	39 f0       	breq	.+14     	; 0x3aa4 <_fpadd_parts+0x1ac>
    3a96:	e2 1a       	sub	r14, r18
    3a98:	f3 0a       	sbc	r15, r19
    3a9a:	04 0b       	sbc	r16, r20
    3a9c:	15 0b       	sbc	r17, r21
    3a9e:	a8 01       	movw	r20, r16
    3aa0:	97 01       	movw	r18, r14
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <_fpadd_parts+0x1b4>
    3aa4:	2e 19       	sub	r18, r14
    3aa6:	3f 09       	sbc	r19, r15
    3aa8:	40 0b       	sbc	r20, r16
    3aaa:	51 0b       	sbc	r21, r17
    3aac:	57 fd       	sbrc	r21, 7
    3aae:	08 c0       	rjmp	.+16     	; 0x3ac0 <_fpadd_parts+0x1c8>
    3ab0:	11 82       	std	Z+1, r1	; 0x01
    3ab2:	d3 82       	std	Z+3, r13	; 0x03
    3ab4:	c2 82       	std	Z+2, r12	; 0x02
    3ab6:	24 83       	std	Z+4, r18	; 0x04
    3ab8:	35 83       	std	Z+5, r19	; 0x05
    3aba:	46 83       	std	Z+6, r20	; 0x06
    3abc:	57 83       	std	Z+7, r21	; 0x07
    3abe:	1d c0       	rjmp	.+58     	; 0x3afa <_fpadd_parts+0x202>
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	81 83       	std	Z+1, r24	; 0x01
    3ac4:	d3 82       	std	Z+3, r13	; 0x03
    3ac6:	c2 82       	std	Z+2, r12	; 0x02
    3ac8:	88 27       	eor	r24, r24
    3aca:	99 27       	eor	r25, r25
    3acc:	dc 01       	movw	r26, r24
    3ace:	82 1b       	sub	r24, r18
    3ad0:	93 0b       	sbc	r25, r19
    3ad2:	a4 0b       	sbc	r26, r20
    3ad4:	b5 0b       	sbc	r27, r21
    3ad6:	84 83       	std	Z+4, r24	; 0x04
    3ad8:	95 83       	std	Z+5, r25	; 0x05
    3ada:	a6 83       	std	Z+6, r26	; 0x06
    3adc:	b7 83       	std	Z+7, r27	; 0x07
    3ade:	0d c0       	rjmp	.+26     	; 0x3afa <_fpadd_parts+0x202>
    3ae0:	22 0f       	add	r18, r18
    3ae2:	33 1f       	adc	r19, r19
    3ae4:	44 1f       	adc	r20, r20
    3ae6:	55 1f       	adc	r21, r21
    3ae8:	24 83       	std	Z+4, r18	; 0x04
    3aea:	35 83       	std	Z+5, r19	; 0x05
    3aec:	46 83       	std	Z+6, r20	; 0x06
    3aee:	57 83       	std	Z+7, r21	; 0x07
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	93 83       	std	Z+3, r25	; 0x03
    3af8:	82 83       	std	Z+2, r24	; 0x02
    3afa:	24 81       	ldd	r18, Z+4	; 0x04
    3afc:	35 81       	ldd	r19, Z+5	; 0x05
    3afe:	46 81       	ldd	r20, Z+6	; 0x06
    3b00:	57 81       	ldd	r21, Z+7	; 0x07
    3b02:	da 01       	movw	r26, r20
    3b04:	c9 01       	movw	r24, r18
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	a1 09       	sbc	r26, r1
    3b0a:	b1 09       	sbc	r27, r1
    3b0c:	8f 5f       	subi	r24, 0xFF	; 255
    3b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b10:	af 4f       	sbci	r26, 0xFF	; 255
    3b12:	bf 43       	sbci	r27, 0x3F	; 63
    3b14:	28 f3       	brcs	.-54     	; 0x3ae0 <_fpadd_parts+0x1e8>
    3b16:	0b c0       	rjmp	.+22     	; 0x3b2e <_fpadd_parts+0x236>
    3b18:	91 83       	std	Z+1, r25	; 0x01
    3b1a:	d3 82       	std	Z+3, r13	; 0x03
    3b1c:	c2 82       	std	Z+2, r12	; 0x02
    3b1e:	2e 0d       	add	r18, r14
    3b20:	3f 1d       	adc	r19, r15
    3b22:	40 1f       	adc	r20, r16
    3b24:	51 1f       	adc	r21, r17
    3b26:	24 83       	std	Z+4, r18	; 0x04
    3b28:	35 83       	std	Z+5, r19	; 0x05
    3b2a:	46 83       	std	Z+6, r20	; 0x06
    3b2c:	57 83       	std	Z+7, r21	; 0x07
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	80 83       	st	Z, r24
    3b32:	24 81       	ldd	r18, Z+4	; 0x04
    3b34:	35 81       	ldd	r19, Z+5	; 0x05
    3b36:	46 81       	ldd	r20, Z+6	; 0x06
    3b38:	57 81       	ldd	r21, Z+7	; 0x07
    3b3a:	55 23       	and	r21, r21
    3b3c:	d4 f4       	brge	.+52     	; 0x3b72 <_fpadd_parts+0x27a>
    3b3e:	c9 01       	movw	r24, r18
    3b40:	aa 27       	eor	r26, r26
    3b42:	97 fd       	sbrc	r25, 7
    3b44:	a0 95       	com	r26
    3b46:	ba 2f       	mov	r27, r26
    3b48:	81 70       	andi	r24, 0x01	; 1
    3b4a:	90 70       	andi	r25, 0x00	; 0
    3b4c:	a0 70       	andi	r26, 0x00	; 0
    3b4e:	b0 70       	andi	r27, 0x00	; 0
    3b50:	56 95       	lsr	r21
    3b52:	47 95       	ror	r20
    3b54:	37 95       	ror	r19
    3b56:	27 95       	ror	r18
    3b58:	82 2b       	or	r24, r18
    3b5a:	93 2b       	or	r25, r19
    3b5c:	a4 2b       	or	r26, r20
    3b5e:	b5 2b       	or	r27, r21
    3b60:	84 83       	std	Z+4, r24	; 0x04
    3b62:	95 83       	std	Z+5, r25	; 0x05
    3b64:	a6 83       	std	Z+6, r26	; 0x06
    3b66:	b7 83       	std	Z+7, r27	; 0x07
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
    3b6a:	93 81       	ldd	r25, Z+3	; 0x03
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	93 83       	std	Z+3, r25	; 0x03
    3b70:	82 83       	std	Z+2, r24	; 0x02
    3b72:	2f 01       	movw	r4, r30
    3b74:	01 c0       	rjmp	.+2      	; 0x3b78 <_fpadd_parts+0x280>
    3b76:	25 01       	movw	r4, r10
    3b78:	c2 01       	movw	r24, r4
    3b7a:	e0 e1       	ldi	r30, 0x10	; 16
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
    3b80:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__epilogue_restores__+0x4>

00003b84 <__subsf3>:
    3b84:	a0 e2       	ldi	r26, 0x20	; 32
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	e8 ec       	ldi	r30, 0xC8	; 200
    3b8a:	fd e1       	ldi	r31, 0x1D	; 29
    3b8c:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__prologue_saves__+0x18>
    3b90:	69 83       	std	Y+1, r22	; 0x01
    3b92:	7a 83       	std	Y+2, r23	; 0x02
    3b94:	8b 83       	std	Y+3, r24	; 0x03
    3b96:	9c 83       	std	Y+4, r25	; 0x04
    3b98:	2d 83       	std	Y+5, r18	; 0x05
    3b9a:	3e 83       	std	Y+6, r19	; 0x06
    3b9c:	4f 83       	std	Y+7, r20	; 0x07
    3b9e:	58 87       	std	Y+8, r21	; 0x08
    3ba0:	09 e0       	ldi	r16, 0x09	; 9
    3ba2:	e0 2e       	mov	r14, r16
    3ba4:	f1 2c       	mov	r15, r1
    3ba6:	ec 0e       	add	r14, r28
    3ba8:	fd 1e       	adc	r15, r29
    3baa:	b7 01       	movw	r22, r14
    3bac:	ce 01       	movw	r24, r28
    3bae:	01 96       	adiw	r24, 0x01	; 1
    3bb0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3bb4:	8e 01       	movw	r16, r28
    3bb6:	0f 5e       	subi	r16, 0xEF	; 239
    3bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bba:	b8 01       	movw	r22, r16
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	05 96       	adiw	r24, 0x05	; 5
    3bc0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3bc4:	8a 89       	ldd	r24, Y+18	; 0x12
    3bc6:	91 e0       	ldi	r25, 0x01	; 1
    3bc8:	89 27       	eor	r24, r25
    3bca:	8a 8b       	std	Y+18, r24	; 0x12
    3bcc:	ae 01       	movw	r20, r28
    3bce:	47 5e       	subi	r20, 0xE7	; 231
    3bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd2:	b8 01       	movw	r22, r16
    3bd4:	c7 01       	movw	r24, r14
    3bd6:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_fpadd_parts>
    3bda:	0e 94 1d 20 	call	0x403a	; 0x403a <__pack_f>
    3bde:	e6 e0       	ldi	r30, 0x06	; 6
    3be0:	a0 96       	adiw	r28, 0x20	; 32
    3be2:	0c 94 18 22 	jmp	0x4430	; 0x4430 <__epilogue_restores__+0x18>

00003be6 <__addsf3>:
    3be6:	a0 e2       	ldi	r26, 0x20	; 32
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	e9 ef       	ldi	r30, 0xF9	; 249
    3bec:	fd e1       	ldi	r31, 0x1D	; 29
    3bee:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__prologue_saves__+0x18>
    3bf2:	69 83       	std	Y+1, r22	; 0x01
    3bf4:	7a 83       	std	Y+2, r23	; 0x02
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
    3bf8:	9c 83       	std	Y+4, r25	; 0x04
    3bfa:	2d 83       	std	Y+5, r18	; 0x05
    3bfc:	3e 83       	std	Y+6, r19	; 0x06
    3bfe:	4f 83       	std	Y+7, r20	; 0x07
    3c00:	58 87       	std	Y+8, r21	; 0x08
    3c02:	89 e0       	ldi	r24, 0x09	; 9
    3c04:	e8 2e       	mov	r14, r24
    3c06:	f1 2c       	mov	r15, r1
    3c08:	ec 0e       	add	r14, r28
    3c0a:	fd 1e       	adc	r15, r29
    3c0c:	b7 01       	movw	r22, r14
    3c0e:	ce 01       	movw	r24, r28
    3c10:	01 96       	adiw	r24, 0x01	; 1
    3c12:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3c16:	8e 01       	movw	r16, r28
    3c18:	0f 5e       	subi	r16, 0xEF	; 239
    3c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1c:	b8 01       	movw	r22, r16
    3c1e:	ce 01       	movw	r24, r28
    3c20:	05 96       	adiw	r24, 0x05	; 5
    3c22:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3c26:	ae 01       	movw	r20, r28
    3c28:	47 5e       	subi	r20, 0xE7	; 231
    3c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2c:	b8 01       	movw	r22, r16
    3c2e:	c7 01       	movw	r24, r14
    3c30:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_fpadd_parts>
    3c34:	0e 94 1d 20 	call	0x403a	; 0x403a <__pack_f>
    3c38:	e6 e0       	ldi	r30, 0x06	; 6
    3c3a:	a0 96       	adiw	r28, 0x20	; 32
    3c3c:	0c 94 18 22 	jmp	0x4430	; 0x4430 <__epilogue_restores__+0x18>

00003c40 <__mulsf3>:
    3c40:	a0 e2       	ldi	r26, 0x20	; 32
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e6 e2       	ldi	r30, 0x26	; 38
    3c46:	fe e1       	ldi	r31, 0x1E	; 30
    3c48:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__prologue_saves__+0x4>
    3c4c:	69 83       	std	Y+1, r22	; 0x01
    3c4e:	7a 83       	std	Y+2, r23	; 0x02
    3c50:	8b 83       	std	Y+3, r24	; 0x03
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	2d 83       	std	Y+5, r18	; 0x05
    3c56:	3e 83       	std	Y+6, r19	; 0x06
    3c58:	4f 83       	std	Y+7, r20	; 0x07
    3c5a:	58 87       	std	Y+8, r21	; 0x08
    3c5c:	99 e0       	ldi	r25, 0x09	; 9
    3c5e:	e9 2e       	mov	r14, r25
    3c60:	f1 2c       	mov	r15, r1
    3c62:	ec 0e       	add	r14, r28
    3c64:	fd 1e       	adc	r15, r29
    3c66:	b7 01       	movw	r22, r14
    3c68:	ce 01       	movw	r24, r28
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3c70:	8e 01       	movw	r16, r28
    3c72:	0f 5e       	subi	r16, 0xEF	; 239
    3c74:	1f 4f       	sbci	r17, 0xFF	; 255
    3c76:	b8 01       	movw	r22, r16
    3c78:	ce 01       	movw	r24, r28
    3c7a:	05 96       	adiw	r24, 0x05	; 5
    3c7c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3c80:	99 85       	ldd	r25, Y+9	; 0x09
    3c82:	92 30       	cpi	r25, 0x02	; 2
    3c84:	88 f0       	brcs	.+34     	; 0x3ca8 <__mulsf3+0x68>
    3c86:	89 89       	ldd	r24, Y+17	; 0x11
    3c88:	82 30       	cpi	r24, 0x02	; 2
    3c8a:	c0 f0       	brcs	.+48     	; 0x3cbc <__mulsf3+0x7c>
    3c8c:	94 30       	cpi	r25, 0x04	; 4
    3c8e:	19 f4       	brne	.+6      	; 0x3c96 <__mulsf3+0x56>
    3c90:	82 30       	cpi	r24, 0x02	; 2
    3c92:	29 f0       	breq	.+10     	; 0x3c9e <__mulsf3+0x5e>
    3c94:	09 c0       	rjmp	.+18     	; 0x3ca8 <__mulsf3+0x68>
    3c96:	84 30       	cpi	r24, 0x04	; 4
    3c98:	29 f4       	brne	.+10     	; 0x3ca4 <__mulsf3+0x64>
    3c9a:	92 30       	cpi	r25, 0x02	; 2
    3c9c:	79 f4       	brne	.+30     	; 0x3cbc <__mulsf3+0x7c>
    3c9e:	66 e1       	ldi	r22, 0x16	; 22
    3ca0:	72 e0       	ldi	r23, 0x02	; 2
    3ca2:	c6 c0       	rjmp	.+396    	; 0x3e30 <__mulsf3+0x1f0>
    3ca4:	92 30       	cpi	r25, 0x02	; 2
    3ca6:	41 f4       	brne	.+16     	; 0x3cb8 <__mulsf3+0x78>
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	8a 89       	ldd	r24, Y+18	; 0x12
    3cae:	98 13       	cpse	r25, r24
    3cb0:	21 e0       	ldi	r18, 0x01	; 1
    3cb2:	2a 87       	std	Y+10, r18	; 0x0a
    3cb4:	b7 01       	movw	r22, r14
    3cb6:	bc c0       	rjmp	.+376    	; 0x3e30 <__mulsf3+0x1f0>
    3cb8:	82 30       	cpi	r24, 0x02	; 2
    3cba:	41 f4       	brne	.+16     	; 0x3ccc <__mulsf3+0x8c>
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	8a 89       	ldd	r24, Y+18	; 0x12
    3cc2:	98 13       	cpse	r25, r24
    3cc4:	21 e0       	ldi	r18, 0x01	; 1
    3cc6:	2a 8b       	std	Y+18, r18	; 0x12
    3cc8:	b8 01       	movw	r22, r16
    3cca:	b2 c0       	rjmp	.+356    	; 0x3e30 <__mulsf3+0x1f0>
    3ccc:	cd 84       	ldd	r12, Y+13	; 0x0d
    3cce:	de 84       	ldd	r13, Y+14	; 0x0e
    3cd0:	ef 84       	ldd	r14, Y+15	; 0x0f
    3cd2:	f8 88       	ldd	r15, Y+16	; 0x10
    3cd4:	0d 89       	ldd	r16, Y+21	; 0x15
    3cd6:	1e 89       	ldd	r17, Y+22	; 0x16
    3cd8:	2f 89       	ldd	r18, Y+23	; 0x17
    3cda:	38 8d       	ldd	r19, Y+24	; 0x18
    3cdc:	88 24       	eor	r8, r8
    3cde:	99 24       	eor	r9, r9
    3ce0:	54 01       	movw	r10, r8
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	44 24       	eor	r4, r4
    3cec:	55 24       	eor	r5, r5
    3cee:	32 01       	movw	r6, r4
    3cf0:	e0 e0       	ldi	r30, 0x00	; 0
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	c6 01       	movw	r24, r12
    3cf6:	81 70       	andi	r24, 0x01	; 1
    3cf8:	90 70       	andi	r25, 0x00	; 0
    3cfa:	89 2b       	or	r24, r25
    3cfc:	d9 f0       	breq	.+54     	; 0x3d34 <__mulsf3+0xf4>
    3cfe:	80 0e       	add	r8, r16
    3d00:	91 1e       	adc	r9, r17
    3d02:	a2 1e       	adc	r10, r18
    3d04:	b3 1e       	adc	r11, r19
    3d06:	db 01       	movw	r26, r22
    3d08:	ca 01       	movw	r24, r20
    3d0a:	84 0d       	add	r24, r4
    3d0c:	95 1d       	adc	r25, r5
    3d0e:	a6 1d       	adc	r26, r6
    3d10:	b7 1d       	adc	r27, r7
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	50 e0       	ldi	r21, 0x00	; 0
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	80 16       	cp	r8, r16
    3d1c:	91 06       	cpc	r9, r17
    3d1e:	a2 06       	cpc	r10, r18
    3d20:	b3 06       	cpc	r11, r19
    3d22:	20 f4       	brcc	.+8      	; 0x3d2c <__mulsf3+0xec>
    3d24:	41 e0       	ldi	r20, 0x01	; 1
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	70 e0       	ldi	r23, 0x00	; 0
    3d2c:	48 0f       	add	r20, r24
    3d2e:	59 1f       	adc	r21, r25
    3d30:	6a 1f       	adc	r22, r26
    3d32:	7b 1f       	adc	r23, r27
    3d34:	44 0c       	add	r4, r4
    3d36:	55 1c       	adc	r5, r5
    3d38:	66 1c       	adc	r6, r6
    3d3a:	77 1c       	adc	r7, r7
    3d3c:	37 ff       	sbrs	r19, 7
    3d3e:	08 c0       	rjmp	.+16     	; 0x3d50 <__mulsf3+0x110>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	a0 e0       	ldi	r26, 0x00	; 0
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	48 2a       	or	r4, r24
    3d4a:	59 2a       	or	r5, r25
    3d4c:	6a 2a       	or	r6, r26
    3d4e:	7b 2a       	or	r7, r27
    3d50:	31 96       	adiw	r30, 0x01	; 1
    3d52:	e0 32       	cpi	r30, 0x20	; 32
    3d54:	f1 05       	cpc	r31, r1
    3d56:	49 f0       	breq	.+18     	; 0x3d6a <__mulsf3+0x12a>
    3d58:	00 0f       	add	r16, r16
    3d5a:	11 1f       	adc	r17, r17
    3d5c:	22 1f       	adc	r18, r18
    3d5e:	33 1f       	adc	r19, r19
    3d60:	f6 94       	lsr	r15
    3d62:	e7 94       	ror	r14
    3d64:	d7 94       	ror	r13
    3d66:	c7 94       	ror	r12
    3d68:	c5 cf       	rjmp	.-118    	; 0x3cf4 <__mulsf3+0xb4>
    3d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d6e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d70:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d72:	82 0f       	add	r24, r18
    3d74:	93 1f       	adc	r25, r19
    3d76:	02 96       	adiw	r24, 0x02	; 2
    3d78:	9c 8f       	std	Y+28, r25	; 0x1c
    3d7a:	8b 8f       	std	Y+27, r24	; 0x1b
    3d7c:	1a 8e       	std	Y+26, r1	; 0x1a
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	8a 89       	ldd	r24, Y+18	; 0x12
    3d82:	98 17       	cp	r25, r24
    3d84:	11 f0       	breq	.+4      	; 0x3d8a <__mulsf3+0x14a>
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	8a 8f       	std	Y+26, r24	; 0x1a
    3d8a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3d8c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3d8e:	17 c0       	rjmp	.+46     	; 0x3dbe <__mulsf3+0x17e>
    3d90:	ca 01       	movw	r24, r20
    3d92:	81 70       	andi	r24, 0x01	; 1
    3d94:	90 70       	andi	r25, 0x00	; 0
    3d96:	89 2b       	or	r24, r25
    3d98:	61 f0       	breq	.+24     	; 0x3db2 <__mulsf3+0x172>
    3d9a:	b6 94       	lsr	r11
    3d9c:	a7 94       	ror	r10
    3d9e:	97 94       	ror	r9
    3da0:	87 94       	ror	r8
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	a0 e0       	ldi	r26, 0x00	; 0
    3da8:	b0 e8       	ldi	r27, 0x80	; 128
    3daa:	88 2a       	or	r8, r24
    3dac:	99 2a       	or	r9, r25
    3dae:	aa 2a       	or	r10, r26
    3db0:	bb 2a       	or	r11, r27
    3db2:	76 95       	lsr	r23
    3db4:	67 95       	ror	r22
    3db6:	57 95       	ror	r21
    3db8:	47 95       	ror	r20
    3dba:	2f 5f       	subi	r18, 0xFF	; 255
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	77 fd       	sbrc	r23, 7
    3dc0:	e7 cf       	rjmp	.-50     	; 0x3d90 <__mulsf3+0x150>
    3dc2:	c9 01       	movw	r24, r18
    3dc4:	0b c0       	rjmp	.+22     	; 0x3ddc <__mulsf3+0x19c>
    3dc6:	44 0f       	add	r20, r20
    3dc8:	55 1f       	adc	r21, r21
    3dca:	66 1f       	adc	r22, r22
    3dcc:	77 1f       	adc	r23, r23
    3dce:	b7 fc       	sbrc	r11, 7
    3dd0:	41 60       	ori	r20, 0x01	; 1
    3dd2:	88 0c       	add	r8, r8
    3dd4:	99 1c       	adc	r9, r9
    3dd6:	aa 1c       	adc	r10, r10
    3dd8:	bb 1c       	adc	r11, r11
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	40 30       	cpi	r20, 0x00	; 0
    3dde:	a0 e0       	ldi	r26, 0x00	; 0
    3de0:	5a 07       	cpc	r21, r26
    3de2:	a0 e0       	ldi	r26, 0x00	; 0
    3de4:	6a 07       	cpc	r22, r26
    3de6:	a0 e4       	ldi	r26, 0x40	; 64
    3de8:	7a 07       	cpc	r23, r26
    3dea:	68 f3       	brcs	.-38     	; 0x3dc6 <__mulsf3+0x186>
    3dec:	9c 8f       	std	Y+28, r25	; 0x1c
    3dee:	8b 8f       	std	Y+27, r24	; 0x1b
    3df0:	db 01       	movw	r26, r22
    3df2:	ca 01       	movw	r24, r20
    3df4:	8f 77       	andi	r24, 0x7F	; 127
    3df6:	90 70       	andi	r25, 0x00	; 0
    3df8:	a0 70       	andi	r26, 0x00	; 0
    3dfa:	b0 70       	andi	r27, 0x00	; 0
    3dfc:	80 34       	cpi	r24, 0x40	; 64
    3dfe:	91 05       	cpc	r25, r1
    3e00:	a1 05       	cpc	r26, r1
    3e02:	b1 05       	cpc	r27, r1
    3e04:	61 f4       	brne	.+24     	; 0x3e1e <__mulsf3+0x1de>
    3e06:	47 fd       	sbrc	r20, 7
    3e08:	0a c0       	rjmp	.+20     	; 0x3e1e <__mulsf3+0x1de>
    3e0a:	81 14       	cp	r8, r1
    3e0c:	91 04       	cpc	r9, r1
    3e0e:	a1 04       	cpc	r10, r1
    3e10:	b1 04       	cpc	r11, r1
    3e12:	29 f0       	breq	.+10     	; 0x3e1e <__mulsf3+0x1de>
    3e14:	40 5c       	subi	r20, 0xC0	; 192
    3e16:	5f 4f       	sbci	r21, 0xFF	; 255
    3e18:	6f 4f       	sbci	r22, 0xFF	; 255
    3e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1c:	40 78       	andi	r20, 0x80	; 128
    3e1e:	4d 8f       	std	Y+29, r20	; 0x1d
    3e20:	5e 8f       	std	Y+30, r21	; 0x1e
    3e22:	6f 8f       	std	Y+31, r22	; 0x1f
    3e24:	78 a3       	std	Y+32, r23	; 0x20
    3e26:	83 e0       	ldi	r24, 0x03	; 3
    3e28:	89 8f       	std	Y+25, r24	; 0x19
    3e2a:	be 01       	movw	r22, r28
    3e2c:	67 5e       	subi	r22, 0xE7	; 231
    3e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e30:	cb 01       	movw	r24, r22
    3e32:	0e 94 1d 20 	call	0x403a	; 0x403a <__pack_f>
    3e36:	e0 e1       	ldi	r30, 0x10	; 16
    3e38:	a0 96       	adiw	r28, 0x20	; 32
    3e3a:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__epilogue_restores__+0x4>

00003e3e <__floatsisf>:
    3e3e:	a8 e0       	ldi	r26, 0x08	; 8
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	e5 e2       	ldi	r30, 0x25	; 37
    3e44:	ff e1       	ldi	r31, 0x1F	; 31
    3e46:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x12>
    3e4a:	9b 01       	movw	r18, r22
    3e4c:	ac 01       	movw	r20, r24
    3e4e:	83 e0       	ldi	r24, 0x03	; 3
    3e50:	89 83       	std	Y+1, r24	; 0x01
    3e52:	da 01       	movw	r26, r20
    3e54:	c9 01       	movw	r24, r18
    3e56:	88 27       	eor	r24, r24
    3e58:	b7 fd       	sbrc	r27, 7
    3e5a:	83 95       	inc	r24
    3e5c:	99 27       	eor	r25, r25
    3e5e:	aa 27       	eor	r26, r26
    3e60:	bb 27       	eor	r27, r27
    3e62:	b8 2e       	mov	r11, r24
    3e64:	21 15       	cp	r18, r1
    3e66:	31 05       	cpc	r19, r1
    3e68:	41 05       	cpc	r20, r1
    3e6a:	51 05       	cpc	r21, r1
    3e6c:	19 f4       	brne	.+6      	; 0x3e74 <__floatsisf+0x36>
    3e6e:	82 e0       	ldi	r24, 0x02	; 2
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	3a c0       	rjmp	.+116    	; 0x3ee8 <__floatsisf+0xaa>
    3e74:	88 23       	and	r24, r24
    3e76:	a9 f0       	breq	.+42     	; 0x3ea2 <__floatsisf+0x64>
    3e78:	20 30       	cpi	r18, 0x00	; 0
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	38 07       	cpc	r19, r24
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	48 07       	cpc	r20, r24
    3e82:	80 e8       	ldi	r24, 0x80	; 128
    3e84:	58 07       	cpc	r21, r24
    3e86:	29 f4       	brne	.+10     	; 0x3e92 <__floatsisf+0x54>
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	9f ec       	ldi	r25, 0xCF	; 207
    3e90:	30 c0       	rjmp	.+96     	; 0x3ef2 <__floatsisf+0xb4>
    3e92:	ee 24       	eor	r14, r14
    3e94:	ff 24       	eor	r15, r15
    3e96:	87 01       	movw	r16, r14
    3e98:	e2 1a       	sub	r14, r18
    3e9a:	f3 0a       	sbc	r15, r19
    3e9c:	04 0b       	sbc	r16, r20
    3e9e:	15 0b       	sbc	r17, r21
    3ea0:	02 c0       	rjmp	.+4      	; 0x3ea6 <__floatsisf+0x68>
    3ea2:	79 01       	movw	r14, r18
    3ea4:	8a 01       	movw	r16, r20
    3ea6:	8e e1       	ldi	r24, 0x1E	; 30
    3ea8:	c8 2e       	mov	r12, r24
    3eaa:	d1 2c       	mov	r13, r1
    3eac:	dc 82       	std	Y+4, r13	; 0x04
    3eae:	cb 82       	std	Y+3, r12	; 0x03
    3eb0:	ed 82       	std	Y+5, r14	; 0x05
    3eb2:	fe 82       	std	Y+6, r15	; 0x06
    3eb4:	0f 83       	std	Y+7, r16	; 0x07
    3eb6:	18 87       	std	Y+8, r17	; 0x08
    3eb8:	c8 01       	movw	r24, r16
    3eba:	b7 01       	movw	r22, r14
    3ebc:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__clzsi2>
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	18 16       	cp	r1, r24
    3ec4:	19 06       	cpc	r1, r25
    3ec6:	84 f4       	brge	.+32     	; 0x3ee8 <__floatsisf+0xaa>
    3ec8:	08 2e       	mov	r0, r24
    3eca:	04 c0       	rjmp	.+8      	; 0x3ed4 <__floatsisf+0x96>
    3ecc:	ee 0c       	add	r14, r14
    3ece:	ff 1c       	adc	r15, r15
    3ed0:	00 1f       	adc	r16, r16
    3ed2:	11 1f       	adc	r17, r17
    3ed4:	0a 94       	dec	r0
    3ed6:	d2 f7       	brpl	.-12     	; 0x3ecc <__floatsisf+0x8e>
    3ed8:	ed 82       	std	Y+5, r14	; 0x05
    3eda:	fe 82       	std	Y+6, r15	; 0x06
    3edc:	0f 83       	std	Y+7, r16	; 0x07
    3ede:	18 87       	std	Y+8, r17	; 0x08
    3ee0:	c8 1a       	sub	r12, r24
    3ee2:	d9 0a       	sbc	r13, r25
    3ee4:	dc 82       	std	Y+4, r13	; 0x04
    3ee6:	cb 82       	std	Y+3, r12	; 0x03
    3ee8:	ba 82       	std	Y+2, r11	; 0x02
    3eea:	ce 01       	movw	r24, r28
    3eec:	01 96       	adiw	r24, 0x01	; 1
    3eee:	0e 94 1d 20 	call	0x403a	; 0x403a <__pack_f>
    3ef2:	e9 e0       	ldi	r30, 0x09	; 9
    3ef4:	28 96       	adiw	r28, 0x08	; 8
    3ef6:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x12>

00003efa <__fixsfsi>:
    3efa:	ac e0       	ldi	r26, 0x0C	; 12
    3efc:	b0 e0       	ldi	r27, 0x00	; 0
    3efe:	e3 e8       	ldi	r30, 0x83	; 131
    3f00:	ff e1       	ldi	r31, 0x1F	; 31
    3f02:	0c 94 00 22 	jmp	0x4400	; 0x4400 <__prologue_saves__+0x20>
    3f06:	69 83       	std	Y+1, r22	; 0x01
    3f08:	7a 83       	std	Y+2, r23	; 0x02
    3f0a:	8b 83       	std	Y+3, r24	; 0x03
    3f0c:	9c 83       	std	Y+4, r25	; 0x04
    3f0e:	be 01       	movw	r22, r28
    3f10:	6b 5f       	subi	r22, 0xFB	; 251
    3f12:	7f 4f       	sbci	r23, 0xFF	; 255
    3f14:	ce 01       	movw	r24, r28
    3f16:	01 96       	adiw	r24, 0x01	; 1
    3f18:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__unpack_f>
    3f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1e:	82 30       	cpi	r24, 0x02	; 2
    3f20:	a9 f1       	breq	.+106    	; 0x3f8c <__fixsfsi+0x92>
    3f22:	82 30       	cpi	r24, 0x02	; 2
    3f24:	98 f1       	brcs	.+102    	; 0x3f8c <__fixsfsi+0x92>
    3f26:	84 30       	cpi	r24, 0x04	; 4
    3f28:	21 f4       	brne	.+8      	; 0x3f32 <__fixsfsi+0x38>
    3f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f2c:	88 23       	and	r24, r24
    3f2e:	59 f4       	brne	.+22     	; 0x3f46 <__fixsfsi+0x4c>
    3f30:	0f c0       	rjmp	.+30     	; 0x3f50 <__fixsfsi+0x56>
    3f32:	2f 81       	ldd	r18, Y+7	; 0x07
    3f34:	38 85       	ldd	r19, Y+8	; 0x08
    3f36:	37 fd       	sbrc	r19, 7
    3f38:	29 c0       	rjmp	.+82     	; 0x3f8c <__fixsfsi+0x92>
    3f3a:	6e 81       	ldd	r22, Y+6	; 0x06
    3f3c:	2f 31       	cpi	r18, 0x1F	; 31
    3f3e:	31 05       	cpc	r19, r1
    3f40:	64 f0       	brlt	.+24     	; 0x3f5a <__fixsfsi+0x60>
    3f42:	66 23       	and	r22, r22
    3f44:	29 f0       	breq	.+10     	; 0x3f50 <__fixsfsi+0x56>
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e0       	ldi	r20, 0x00	; 0
    3f4c:	50 e8       	ldi	r21, 0x80	; 128
    3f4e:	22 c0       	rjmp	.+68     	; 0x3f94 <__fixsfsi+0x9a>
    3f50:	2f ef       	ldi	r18, 0xFF	; 255
    3f52:	3f ef       	ldi	r19, 0xFF	; 255
    3f54:	4f ef       	ldi	r20, 0xFF	; 255
    3f56:	5f e7       	ldi	r21, 0x7F	; 127
    3f58:	1d c0       	rjmp	.+58     	; 0x3f94 <__fixsfsi+0x9a>
    3f5a:	8e e1       	ldi	r24, 0x1E	; 30
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	82 1b       	sub	r24, r18
    3f60:	93 0b       	sbc	r25, r19
    3f62:	29 85       	ldd	r18, Y+9	; 0x09
    3f64:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f66:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f68:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f6a:	04 c0       	rjmp	.+8      	; 0x3f74 <__fixsfsi+0x7a>
    3f6c:	56 95       	lsr	r21
    3f6e:	47 95       	ror	r20
    3f70:	37 95       	ror	r19
    3f72:	27 95       	ror	r18
    3f74:	8a 95       	dec	r24
    3f76:	d2 f7       	brpl	.-12     	; 0x3f6c <__fixsfsi+0x72>
    3f78:	66 23       	and	r22, r22
    3f7a:	61 f0       	breq	.+24     	; 0x3f94 <__fixsfsi+0x9a>
    3f7c:	50 95       	com	r21
    3f7e:	40 95       	com	r20
    3f80:	30 95       	com	r19
    3f82:	21 95       	neg	r18
    3f84:	3f 4f       	sbci	r19, 0xFF	; 255
    3f86:	4f 4f       	sbci	r20, 0xFF	; 255
    3f88:	5f 4f       	sbci	r21, 0xFF	; 255
    3f8a:	04 c0       	rjmp	.+8      	; 0x3f94 <__fixsfsi+0x9a>
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	50 e0       	ldi	r21, 0x00	; 0
    3f94:	ca 01       	movw	r24, r20
    3f96:	b9 01       	movw	r22, r18
    3f98:	e2 e0       	ldi	r30, 0x02	; 2
    3f9a:	2c 96       	adiw	r28, 0x0c	; 12
    3f9c:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <__epilogue_restores__+0x20>

00003fa0 <__clzsi2>:
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	9b 01       	movw	r18, r22
    3faa:	ac 01       	movw	r20, r24
    3fac:	20 30       	cpi	r18, 0x00	; 0
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	38 07       	cpc	r19, r24
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	48 07       	cpc	r20, r24
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	58 07       	cpc	r21, r24
    3fba:	80 f4       	brcc	.+32     	; 0x3fdc <__clzsi2+0x3c>
    3fbc:	2f 3f       	cpi	r18, 0xFF	; 255
    3fbe:	31 05       	cpc	r19, r1
    3fc0:	41 05       	cpc	r20, r1
    3fc2:	51 05       	cpc	r21, r1
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <__clzsi2+0x28>
    3fc6:	20 f4       	brcc	.+8      	; 0x3fd0 <__clzsi2+0x30>
    3fc8:	ee 24       	eor	r14, r14
    3fca:	ff 24       	eor	r15, r15
    3fcc:	87 01       	movw	r16, r14
    3fce:	19 c0       	rjmp	.+50     	; 0x4002 <__clzsi2+0x62>
    3fd0:	68 e0       	ldi	r22, 0x08	; 8
    3fd2:	e6 2e       	mov	r14, r22
    3fd4:	f1 2c       	mov	r15, r1
    3fd6:	01 2d       	mov	r16, r1
    3fd8:	11 2d       	mov	r17, r1
    3fda:	13 c0       	rjmp	.+38     	; 0x4002 <__clzsi2+0x62>
    3fdc:	20 30       	cpi	r18, 0x00	; 0
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	38 07       	cpc	r19, r24
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	48 07       	cpc	r20, r24
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	58 07       	cpc	r21, r24
    3fea:	30 f4       	brcc	.+12     	; 0x3ff8 <__clzsi2+0x58>
    3fec:	90 e1       	ldi	r25, 0x10	; 16
    3fee:	e9 2e       	mov	r14, r25
    3ff0:	f1 2c       	mov	r15, r1
    3ff2:	01 2d       	mov	r16, r1
    3ff4:	11 2d       	mov	r17, r1
    3ff6:	05 c0       	rjmp	.+10     	; 0x4002 <__clzsi2+0x62>
    3ff8:	88 e1       	ldi	r24, 0x18	; 24
    3ffa:	e8 2e       	mov	r14, r24
    3ffc:	f1 2c       	mov	r15, r1
    3ffe:	01 2d       	mov	r16, r1
    4000:	11 2d       	mov	r17, r1
    4002:	80 e2       	ldi	r24, 0x20	; 32
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	a0 e0       	ldi	r26, 0x00	; 0
    4008:	b0 e0       	ldi	r27, 0x00	; 0
    400a:	8e 19       	sub	r24, r14
    400c:	9f 09       	sbc	r25, r15
    400e:	a0 0b       	sbc	r26, r16
    4010:	b1 0b       	sbc	r27, r17
    4012:	04 c0       	rjmp	.+8      	; 0x401c <__clzsi2+0x7c>
    4014:	56 95       	lsr	r21
    4016:	47 95       	ror	r20
    4018:	37 95       	ror	r19
    401a:	27 95       	ror	r18
    401c:	ea 94       	dec	r14
    401e:	d2 f7       	brpl	.-12     	; 0x4014 <__clzsi2+0x74>
    4020:	f9 01       	movw	r30, r18
    4022:	e2 5e       	subi	r30, 0xE2	; 226
    4024:	fd 4f       	sbci	r31, 0xFD	; 253
    4026:	20 81       	ld	r18, Z
    4028:	82 1b       	sub	r24, r18
    402a:	91 09       	sbc	r25, r1
    402c:	a1 09       	sbc	r26, r1
    402e:	b1 09       	sbc	r27, r1
    4030:	1f 91       	pop	r17
    4032:	0f 91       	pop	r16
    4034:	ff 90       	pop	r15
    4036:	ef 90       	pop	r14
    4038:	08 95       	ret

0000403a <__pack_f>:
    403a:	9f 92       	push	r9
    403c:	af 92       	push	r10
    403e:	bf 92       	push	r11
    4040:	cf 92       	push	r12
    4042:	df 92       	push	r13
    4044:	ef 92       	push	r14
    4046:	ff 92       	push	r15
    4048:	0f 93       	push	r16
    404a:	1f 93       	push	r17
    404c:	ee 24       	eor	r14, r14
    404e:	ff 24       	eor	r15, r15
    4050:	87 01       	movw	r16, r14
    4052:	fc 01       	movw	r30, r24
    4054:	24 81       	ldd	r18, Z+4	; 0x04
    4056:	35 81       	ldd	r19, Z+5	; 0x05
    4058:	46 81       	ldd	r20, Z+6	; 0x06
    405a:	57 81       	ldd	r21, Z+7	; 0x07
    405c:	91 80       	ldd	r9, Z+1	; 0x01
    405e:	80 81       	ld	r24, Z
    4060:	82 30       	cpi	r24, 0x02	; 2
    4062:	10 f4       	brcc	.+4      	; 0x4068 <__pack_f+0x2e>
    4064:	40 61       	ori	r20, 0x10	; 16
    4066:	a2 c0       	rjmp	.+324    	; 0x41ac <__pack_f+0x172>
    4068:	84 30       	cpi	r24, 0x04	; 4
    406a:	09 f4       	brne	.+2      	; 0x406e <__pack_f+0x34>
    406c:	9b c0       	rjmp	.+310    	; 0x41a4 <__pack_f+0x16a>
    406e:	82 30       	cpi	r24, 0x02	; 2
    4070:	29 f4       	brne	.+10     	; 0x407c <__pack_f+0x42>
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e0       	ldi	r20, 0x00	; 0
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	05 c0       	rjmp	.+10     	; 0x4086 <__pack_f+0x4c>
    407c:	21 15       	cp	r18, r1
    407e:	31 05       	cpc	r19, r1
    4080:	41 05       	cpc	r20, r1
    4082:	51 05       	cpc	r21, r1
    4084:	19 f4       	brne	.+6      	; 0x408c <__pack_f+0x52>
    4086:	e0 e0       	ldi	r30, 0x00	; 0
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	92 c0       	rjmp	.+292    	; 0x41b0 <__pack_f+0x176>
    408c:	82 81       	ldd	r24, Z+2	; 0x02
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	6f ef       	ldi	r22, 0xFF	; 255
    4092:	82 38       	cpi	r24, 0x82	; 130
    4094:	96 07       	cpc	r25, r22
    4096:	0c f0       	brlt	.+2      	; 0x409a <__pack_f+0x60>
    4098:	5a c0       	rjmp	.+180    	; 0x414e <__pack_f+0x114>
    409a:	62 e8       	ldi	r22, 0x82	; 130
    409c:	7f ef       	ldi	r23, 0xFF	; 255
    409e:	68 1b       	sub	r22, r24
    40a0:	79 0b       	sbc	r23, r25
    40a2:	6a 31       	cpi	r22, 0x1A	; 26
    40a4:	71 05       	cpc	r23, r1
    40a6:	2c f0       	brlt	.+10     	; 0x40b2 <__pack_f+0x78>
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	2a c0       	rjmp	.+84     	; 0x4106 <__pack_f+0xcc>
    40b2:	aa 24       	eor	r10, r10
    40b4:	bb 24       	eor	r11, r11
    40b6:	65 01       	movw	r12, r10
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	a0 e0       	ldi	r26, 0x00	; 0
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	06 2e       	mov	r0, r22
    40c2:	04 c0       	rjmp	.+8      	; 0x40cc <__pack_f+0x92>
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	aa 1f       	adc	r26, r26
    40ca:	bb 1f       	adc	r27, r27
    40cc:	0a 94       	dec	r0
    40ce:	d2 f7       	brpl	.-12     	; 0x40c4 <__pack_f+0x8a>
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	a1 09       	sbc	r26, r1
    40d4:	b1 09       	sbc	r27, r1
    40d6:	82 23       	and	r24, r18
    40d8:	93 23       	and	r25, r19
    40da:	a4 23       	and	r26, r20
    40dc:	b5 23       	and	r27, r21
    40de:	00 97       	sbiw	r24, 0x00	; 0
    40e0:	a1 05       	cpc	r26, r1
    40e2:	b1 05       	cpc	r27, r1
    40e4:	29 f0       	breq	.+10     	; 0x40f0 <__pack_f+0xb6>
    40e6:	71 e0       	ldi	r23, 0x01	; 1
    40e8:	a7 2e       	mov	r10, r23
    40ea:	b1 2c       	mov	r11, r1
    40ec:	c1 2c       	mov	r12, r1
    40ee:	d1 2c       	mov	r13, r1
    40f0:	04 c0       	rjmp	.+8      	; 0x40fa <__pack_f+0xc0>
    40f2:	56 95       	lsr	r21
    40f4:	47 95       	ror	r20
    40f6:	37 95       	ror	r19
    40f8:	27 95       	ror	r18
    40fa:	6a 95       	dec	r22
    40fc:	d2 f7       	brpl	.-12     	; 0x40f2 <__pack_f+0xb8>
    40fe:	2a 29       	or	r18, r10
    4100:	3b 29       	or	r19, r11
    4102:	4c 29       	or	r20, r12
    4104:	5d 29       	or	r21, r13
    4106:	da 01       	movw	r26, r20
    4108:	c9 01       	movw	r24, r18
    410a:	8f 77       	andi	r24, 0x7F	; 127
    410c:	90 70       	andi	r25, 0x00	; 0
    410e:	a0 70       	andi	r26, 0x00	; 0
    4110:	b0 70       	andi	r27, 0x00	; 0
    4112:	80 34       	cpi	r24, 0x40	; 64
    4114:	91 05       	cpc	r25, r1
    4116:	a1 05       	cpc	r26, r1
    4118:	b1 05       	cpc	r27, r1
    411a:	39 f4       	brne	.+14     	; 0x412a <__pack_f+0xf0>
    411c:	27 ff       	sbrs	r18, 7
    411e:	09 c0       	rjmp	.+18     	; 0x4132 <__pack_f+0xf8>
    4120:	20 5c       	subi	r18, 0xC0	; 192
    4122:	3f 4f       	sbci	r19, 0xFF	; 255
    4124:	4f 4f       	sbci	r20, 0xFF	; 255
    4126:	5f 4f       	sbci	r21, 0xFF	; 255
    4128:	04 c0       	rjmp	.+8      	; 0x4132 <__pack_f+0xf8>
    412a:	21 5c       	subi	r18, 0xC1	; 193
    412c:	3f 4f       	sbci	r19, 0xFF	; 255
    412e:	4f 4f       	sbci	r20, 0xFF	; 255
    4130:	5f 4f       	sbci	r21, 0xFF	; 255
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	20 30       	cpi	r18, 0x00	; 0
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	36 07       	cpc	r19, r22
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	46 07       	cpc	r20, r22
    4140:	60 e4       	ldi	r22, 0x40	; 64
    4142:	56 07       	cpc	r21, r22
    4144:	10 f0       	brcs	.+4      	; 0x414a <__pack_f+0x110>
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	fc 01       	movw	r30, r24
    414c:	23 c0       	rjmp	.+70     	; 0x4194 <__pack_f+0x15a>
    414e:	80 38       	cpi	r24, 0x80	; 128
    4150:	91 05       	cpc	r25, r1
    4152:	44 f5       	brge	.+80     	; 0x41a4 <__pack_f+0x16a>
    4154:	fc 01       	movw	r30, r24
    4156:	e1 58       	subi	r30, 0x81	; 129
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	da 01       	movw	r26, r20
    415c:	c9 01       	movw	r24, r18
    415e:	8f 77       	andi	r24, 0x7F	; 127
    4160:	90 70       	andi	r25, 0x00	; 0
    4162:	a0 70       	andi	r26, 0x00	; 0
    4164:	b0 70       	andi	r27, 0x00	; 0
    4166:	80 34       	cpi	r24, 0x40	; 64
    4168:	91 05       	cpc	r25, r1
    416a:	a1 05       	cpc	r26, r1
    416c:	b1 05       	cpc	r27, r1
    416e:	39 f4       	brne	.+14     	; 0x417e <__pack_f+0x144>
    4170:	27 ff       	sbrs	r18, 7
    4172:	09 c0       	rjmp	.+18     	; 0x4186 <__pack_f+0x14c>
    4174:	20 5c       	subi	r18, 0xC0	; 192
    4176:	3f 4f       	sbci	r19, 0xFF	; 255
    4178:	4f 4f       	sbci	r20, 0xFF	; 255
    417a:	5f 4f       	sbci	r21, 0xFF	; 255
    417c:	04 c0       	rjmp	.+8      	; 0x4186 <__pack_f+0x14c>
    417e:	21 5c       	subi	r18, 0xC1	; 193
    4180:	3f 4f       	sbci	r19, 0xFF	; 255
    4182:	4f 4f       	sbci	r20, 0xFF	; 255
    4184:	5f 4f       	sbci	r21, 0xFF	; 255
    4186:	57 ff       	sbrs	r21, 7
    4188:	05 c0       	rjmp	.+10     	; 0x4194 <__pack_f+0x15a>
    418a:	56 95       	lsr	r21
    418c:	47 95       	ror	r20
    418e:	37 95       	ror	r19
    4190:	27 95       	ror	r18
    4192:	31 96       	adiw	r30, 0x01	; 1
    4194:	87 e0       	ldi	r24, 0x07	; 7
    4196:	56 95       	lsr	r21
    4198:	47 95       	ror	r20
    419a:	37 95       	ror	r19
    419c:	27 95       	ror	r18
    419e:	8a 95       	dec	r24
    41a0:	d1 f7       	brne	.-12     	; 0x4196 <__pack_f+0x15c>
    41a2:	06 c0       	rjmp	.+12     	; 0x41b0 <__pack_f+0x176>
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	ef ef       	ldi	r30, 0xFF	; 255
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	e2 2e       	mov	r14, r18
    41b2:	f3 2e       	mov	r15, r19
    41b4:	94 2f       	mov	r25, r20
    41b6:	9f 77       	andi	r25, 0x7F	; 127
    41b8:	80 2f       	mov	r24, r16
    41ba:	80 78       	andi	r24, 0x80	; 128
    41bc:	89 2b       	or	r24, r25
    41be:	9e 2f       	mov	r25, r30
    41c0:	97 95       	ror	r25
    41c2:	99 27       	eor	r25, r25
    41c4:	97 95       	ror	r25
    41c6:	8f 77       	andi	r24, 0x7F	; 127
    41c8:	08 2f       	mov	r16, r24
    41ca:	09 2b       	or	r16, r25
    41cc:	9e 2f       	mov	r25, r30
    41ce:	96 95       	lsr	r25
    41d0:	81 2f       	mov	r24, r17
    41d2:	80 78       	andi	r24, 0x80	; 128
    41d4:	89 2b       	or	r24, r25
    41d6:	97 94       	ror	r9
    41d8:	99 24       	eor	r9, r9
    41da:	97 94       	ror	r9
    41dc:	8f 77       	andi	r24, 0x7F	; 127
    41de:	18 2f       	mov	r17, r24
    41e0:	19 29       	or	r17, r9
    41e2:	c8 01       	movw	r24, r16
    41e4:	b7 01       	movw	r22, r14
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	ff 90       	pop	r15
    41ec:	ef 90       	pop	r14
    41ee:	df 90       	pop	r13
    41f0:	cf 90       	pop	r12
    41f2:	bf 90       	pop	r11
    41f4:	af 90       	pop	r10
    41f6:	9f 90       	pop	r9
    41f8:	08 95       	ret

000041fa <__unpack_f>:
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	fc 01       	movw	r30, r24
    4200:	db 01       	movw	r26, r22
    4202:	20 81       	ld	r18, Z
    4204:	31 81       	ldd	r19, Z+1	; 0x01
    4206:	92 81       	ldd	r25, Z+2	; 0x02
    4208:	49 2f       	mov	r20, r25
    420a:	4f 77       	andi	r20, 0x7F	; 127
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	99 1f       	adc	r25, r25
    4210:	99 27       	eor	r25, r25
    4212:	99 1f       	adc	r25, r25
    4214:	83 81       	ldd	r24, Z+3	; 0x03
    4216:	e8 2f       	mov	r30, r24
    4218:	ee 0f       	add	r30, r30
    421a:	e9 2b       	or	r30, r25
    421c:	6e 2f       	mov	r22, r30
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	88 1f       	adc	r24, r24
    4222:	88 27       	eor	r24, r24
    4224:	88 1f       	adc	r24, r24
    4226:	ed 01       	movw	r28, r26
    4228:	89 83       	std	Y+1, r24	; 0x01
    422a:	ee 23       	and	r30, r30
    422c:	71 f5       	brne	.+92     	; 0x428a <__unpack_f+0x90>
    422e:	21 15       	cp	r18, r1
    4230:	31 05       	cpc	r19, r1
    4232:	41 05       	cpc	r20, r1
    4234:	51 05       	cpc	r21, r1
    4236:	11 f4       	brne	.+4      	; 0x423c <__unpack_f+0x42>
    4238:	82 e0       	ldi	r24, 0x02	; 2
    423a:	2f c0       	rjmp	.+94     	; 0x429a <__unpack_f+0xa0>
    423c:	6e 57       	subi	r22, 0x7E	; 126
    423e:	70 40       	sbci	r23, 0x00	; 0
    4240:	fd 01       	movw	r30, r26
    4242:	73 83       	std	Z+3, r23	; 0x03
    4244:	62 83       	std	Z+2, r22	; 0x02
    4246:	67 e0       	ldi	r22, 0x07	; 7
    4248:	22 0f       	add	r18, r18
    424a:	33 1f       	adc	r19, r19
    424c:	44 1f       	adc	r20, r20
    424e:	55 1f       	adc	r21, r21
    4250:	6a 95       	dec	r22
    4252:	d1 f7       	brne	.-12     	; 0x4248 <__unpack_f+0x4e>
    4254:	83 e0       	ldi	r24, 0x03	; 3
    4256:	8c 93       	st	X, r24
    4258:	0a c0       	rjmp	.+20     	; 0x426e <__unpack_f+0x74>
    425a:	22 0f       	add	r18, r18
    425c:	33 1f       	adc	r19, r19
    425e:	44 1f       	adc	r20, r20
    4260:	55 1f       	adc	r21, r21
    4262:	ed 01       	movw	r28, r26
    4264:	8a 81       	ldd	r24, Y+2	; 0x02
    4266:	9b 81       	ldd	r25, Y+3	; 0x03
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	9b 83       	std	Y+3, r25	; 0x03
    426c:	8a 83       	std	Y+2, r24	; 0x02
    426e:	20 30       	cpi	r18, 0x00	; 0
    4270:	e0 e0       	ldi	r30, 0x00	; 0
    4272:	3e 07       	cpc	r19, r30
    4274:	e0 e0       	ldi	r30, 0x00	; 0
    4276:	4e 07       	cpc	r20, r30
    4278:	e0 e4       	ldi	r30, 0x40	; 64
    427a:	5e 07       	cpc	r21, r30
    427c:	70 f3       	brcs	.-36     	; 0x425a <__unpack_f+0x60>
    427e:	ed 01       	movw	r28, r26
    4280:	2c 83       	std	Y+4, r18	; 0x04
    4282:	3d 83       	std	Y+5, r19	; 0x05
    4284:	4e 83       	std	Y+6, r20	; 0x06
    4286:	5f 83       	std	Y+7, r21	; 0x07
    4288:	25 c0       	rjmp	.+74     	; 0x42d4 <__unpack_f+0xda>
    428a:	ef 3f       	cpi	r30, 0xFF	; 255
    428c:	79 f4       	brne	.+30     	; 0x42ac <__unpack_f+0xb2>
    428e:	21 15       	cp	r18, r1
    4290:	31 05       	cpc	r19, r1
    4292:	41 05       	cpc	r20, r1
    4294:	51 05       	cpc	r21, r1
    4296:	19 f4       	brne	.+6      	; 0x429e <__unpack_f+0xa4>
    4298:	84 e0       	ldi	r24, 0x04	; 4
    429a:	8c 93       	st	X, r24
    429c:	1b c0       	rjmp	.+54     	; 0x42d4 <__unpack_f+0xda>
    429e:	44 ff       	sbrs	r20, 4
    42a0:	03 c0       	rjmp	.+6      	; 0x42a8 <__unpack_f+0xae>
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	8c 93       	st	X, r24
    42a6:	11 c0       	rjmp	.+34     	; 0x42ca <__unpack_f+0xd0>
    42a8:	1c 92       	st	X, r1
    42aa:	0f c0       	rjmp	.+30     	; 0x42ca <__unpack_f+0xd0>
    42ac:	6f 57       	subi	r22, 0x7F	; 127
    42ae:	70 40       	sbci	r23, 0x00	; 0
    42b0:	ed 01       	movw	r28, r26
    42b2:	7b 83       	std	Y+3, r23	; 0x03
    42b4:	6a 83       	std	Y+2, r22	; 0x02
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	8c 93       	st	X, r24
    42ba:	87 e0       	ldi	r24, 0x07	; 7
    42bc:	22 0f       	add	r18, r18
    42be:	33 1f       	adc	r19, r19
    42c0:	44 1f       	adc	r20, r20
    42c2:	55 1f       	adc	r21, r21
    42c4:	8a 95       	dec	r24
    42c6:	d1 f7       	brne	.-12     	; 0x42bc <__unpack_f+0xc2>
    42c8:	50 64       	ori	r21, 0x40	; 64
    42ca:	fd 01       	movw	r30, r26
    42cc:	24 83       	std	Z+4, r18	; 0x04
    42ce:	35 83       	std	Z+5, r19	; 0x05
    42d0:	46 83       	std	Z+6, r20	; 0x06
    42d2:	57 83       	std	Z+7, r21	; 0x07
    42d4:	df 91       	pop	r29
    42d6:	cf 91       	pop	r28
    42d8:	08 95       	ret

000042da <__mulsi3>:
    42da:	62 9f       	mul	r22, r18
    42dc:	d0 01       	movw	r26, r0
    42de:	73 9f       	mul	r23, r19
    42e0:	f0 01       	movw	r30, r0
    42e2:	82 9f       	mul	r24, r18
    42e4:	e0 0d       	add	r30, r0
    42e6:	f1 1d       	adc	r31, r1
    42e8:	64 9f       	mul	r22, r20
    42ea:	e0 0d       	add	r30, r0
    42ec:	f1 1d       	adc	r31, r1
    42ee:	92 9f       	mul	r25, r18
    42f0:	f0 0d       	add	r31, r0
    42f2:	83 9f       	mul	r24, r19
    42f4:	f0 0d       	add	r31, r0
    42f6:	74 9f       	mul	r23, r20
    42f8:	f0 0d       	add	r31, r0
    42fa:	65 9f       	mul	r22, r21
    42fc:	f0 0d       	add	r31, r0
    42fe:	99 27       	eor	r25, r25
    4300:	72 9f       	mul	r23, r18
    4302:	b0 0d       	add	r27, r0
    4304:	e1 1d       	adc	r30, r1
    4306:	f9 1f       	adc	r31, r25
    4308:	63 9f       	mul	r22, r19
    430a:	b0 0d       	add	r27, r0
    430c:	e1 1d       	adc	r30, r1
    430e:	f9 1f       	adc	r31, r25
    4310:	bd 01       	movw	r22, r26
    4312:	cf 01       	movw	r24, r30
    4314:	11 24       	eor	r1, r1
    4316:	08 95       	ret

00004318 <__udivmodhi4>:
    4318:	aa 1b       	sub	r26, r26
    431a:	bb 1b       	sub	r27, r27
    431c:	51 e1       	ldi	r21, 0x11	; 17
    431e:	07 c0       	rjmp	.+14     	; 0x432e <__udivmodhi4_ep>

00004320 <__udivmodhi4_loop>:
    4320:	aa 1f       	adc	r26, r26
    4322:	bb 1f       	adc	r27, r27
    4324:	a6 17       	cp	r26, r22
    4326:	b7 07       	cpc	r27, r23
    4328:	10 f0       	brcs	.+4      	; 0x432e <__udivmodhi4_ep>
    432a:	a6 1b       	sub	r26, r22
    432c:	b7 0b       	sbc	r27, r23

0000432e <__udivmodhi4_ep>:
    432e:	88 1f       	adc	r24, r24
    4330:	99 1f       	adc	r25, r25
    4332:	5a 95       	dec	r21
    4334:	a9 f7       	brne	.-22     	; 0x4320 <__udivmodhi4_loop>
    4336:	80 95       	com	r24
    4338:	90 95       	com	r25
    433a:	bc 01       	movw	r22, r24
    433c:	cd 01       	movw	r24, r26
    433e:	08 95       	ret

00004340 <__divmodhi4>:
    4340:	97 fb       	bst	r25, 7
    4342:	09 2e       	mov	r0, r25
    4344:	07 26       	eor	r0, r23
    4346:	0a d0       	rcall	.+20     	; 0x435c <__divmodhi4_neg1>
    4348:	77 fd       	sbrc	r23, 7
    434a:	04 d0       	rcall	.+8      	; 0x4354 <__divmodhi4_neg2>
    434c:	e5 df       	rcall	.-54     	; 0x4318 <__udivmodhi4>
    434e:	06 d0       	rcall	.+12     	; 0x435c <__divmodhi4_neg1>
    4350:	00 20       	and	r0, r0
    4352:	1a f4       	brpl	.+6      	; 0x435a <__divmodhi4_exit>

00004354 <__divmodhi4_neg2>:
    4354:	70 95       	com	r23
    4356:	61 95       	neg	r22
    4358:	7f 4f       	sbci	r23, 0xFF	; 255

0000435a <__divmodhi4_exit>:
    435a:	08 95       	ret

0000435c <__divmodhi4_neg1>:
    435c:	f6 f7       	brtc	.-4      	; 0x435a <__divmodhi4_exit>
    435e:	90 95       	com	r25
    4360:	81 95       	neg	r24
    4362:	9f 4f       	sbci	r25, 0xFF	; 255
    4364:	08 95       	ret

00004366 <__divmodsi4>:
    4366:	97 fb       	bst	r25, 7
    4368:	09 2e       	mov	r0, r25
    436a:	05 26       	eor	r0, r21
    436c:	0e d0       	rcall	.+28     	; 0x438a <__divmodsi4_neg1>
    436e:	57 fd       	sbrc	r21, 7
    4370:	04 d0       	rcall	.+8      	; 0x437a <__divmodsi4_neg2>
    4372:	14 d0       	rcall	.+40     	; 0x439c <__udivmodsi4>
    4374:	0a d0       	rcall	.+20     	; 0x438a <__divmodsi4_neg1>
    4376:	00 1c       	adc	r0, r0
    4378:	38 f4       	brcc	.+14     	; 0x4388 <__divmodsi4_exit>

0000437a <__divmodsi4_neg2>:
    437a:	50 95       	com	r21
    437c:	40 95       	com	r20
    437e:	30 95       	com	r19
    4380:	21 95       	neg	r18
    4382:	3f 4f       	sbci	r19, 0xFF	; 255
    4384:	4f 4f       	sbci	r20, 0xFF	; 255
    4386:	5f 4f       	sbci	r21, 0xFF	; 255

00004388 <__divmodsi4_exit>:
    4388:	08 95       	ret

0000438a <__divmodsi4_neg1>:
    438a:	f6 f7       	brtc	.-4      	; 0x4388 <__divmodsi4_exit>
    438c:	90 95       	com	r25
    438e:	80 95       	com	r24
    4390:	70 95       	com	r23
    4392:	61 95       	neg	r22
    4394:	7f 4f       	sbci	r23, 0xFF	; 255
    4396:	8f 4f       	sbci	r24, 0xFF	; 255
    4398:	9f 4f       	sbci	r25, 0xFF	; 255
    439a:	08 95       	ret

0000439c <__udivmodsi4>:
    439c:	a1 e2       	ldi	r26, 0x21	; 33
    439e:	1a 2e       	mov	r1, r26
    43a0:	aa 1b       	sub	r26, r26
    43a2:	bb 1b       	sub	r27, r27
    43a4:	fd 01       	movw	r30, r26
    43a6:	0d c0       	rjmp	.+26     	; 0x43c2 <__udivmodsi4_ep>

000043a8 <__udivmodsi4_loop>:
    43a8:	aa 1f       	adc	r26, r26
    43aa:	bb 1f       	adc	r27, r27
    43ac:	ee 1f       	adc	r30, r30
    43ae:	ff 1f       	adc	r31, r31
    43b0:	a2 17       	cp	r26, r18
    43b2:	b3 07       	cpc	r27, r19
    43b4:	e4 07       	cpc	r30, r20
    43b6:	f5 07       	cpc	r31, r21
    43b8:	20 f0       	brcs	.+8      	; 0x43c2 <__udivmodsi4_ep>
    43ba:	a2 1b       	sub	r26, r18
    43bc:	b3 0b       	sbc	r27, r19
    43be:	e4 0b       	sbc	r30, r20
    43c0:	f5 0b       	sbc	r31, r21

000043c2 <__udivmodsi4_ep>:
    43c2:	66 1f       	adc	r22, r22
    43c4:	77 1f       	adc	r23, r23
    43c6:	88 1f       	adc	r24, r24
    43c8:	99 1f       	adc	r25, r25
    43ca:	1a 94       	dec	r1
    43cc:	69 f7       	brne	.-38     	; 0x43a8 <__udivmodsi4_loop>
    43ce:	60 95       	com	r22
    43d0:	70 95       	com	r23
    43d2:	80 95       	com	r24
    43d4:	90 95       	com	r25
    43d6:	9b 01       	movw	r18, r22
    43d8:	ac 01       	movw	r20, r24
    43da:	bd 01       	movw	r22, r26
    43dc:	cf 01       	movw	r24, r30
    43de:	08 95       	ret

000043e0 <__prologue_saves__>:
    43e0:	2f 92       	push	r2
    43e2:	3f 92       	push	r3
    43e4:	4f 92       	push	r4
    43e6:	5f 92       	push	r5
    43e8:	6f 92       	push	r6
    43ea:	7f 92       	push	r7
    43ec:	8f 92       	push	r8
    43ee:	9f 92       	push	r9
    43f0:	af 92       	push	r10
    43f2:	bf 92       	push	r11
    43f4:	cf 92       	push	r12
    43f6:	df 92       	push	r13
    43f8:	ef 92       	push	r14
    43fa:	ff 92       	push	r15
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	cd b7       	in	r28, 0x3d	; 61
    4406:	de b7       	in	r29, 0x3e	; 62
    4408:	ca 1b       	sub	r28, r26
    440a:	db 0b       	sbc	r29, r27
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	f8 94       	cli
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	cd bf       	out	0x3d, r28	; 61
    4416:	19 94       	eijmp

00004418 <__epilogue_restores__>:
    4418:	2a 88       	ldd	r2, Y+18	; 0x12
    441a:	39 88       	ldd	r3, Y+17	; 0x11
    441c:	48 88       	ldd	r4, Y+16	; 0x10
    441e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4420:	6e 84       	ldd	r6, Y+14	; 0x0e
    4422:	7d 84       	ldd	r7, Y+13	; 0x0d
    4424:	8c 84       	ldd	r8, Y+12	; 0x0c
    4426:	9b 84       	ldd	r9, Y+11	; 0x0b
    4428:	aa 84       	ldd	r10, Y+10	; 0x0a
    442a:	b9 84       	ldd	r11, Y+9	; 0x09
    442c:	c8 84       	ldd	r12, Y+8	; 0x08
    442e:	df 80       	ldd	r13, Y+7	; 0x07
    4430:	ee 80       	ldd	r14, Y+6	; 0x06
    4432:	fd 80       	ldd	r15, Y+5	; 0x05
    4434:	0c 81       	ldd	r16, Y+4	; 0x04
    4436:	1b 81       	ldd	r17, Y+3	; 0x03
    4438:	aa 81       	ldd	r26, Y+2	; 0x02
    443a:	b9 81       	ldd	r27, Y+1	; 0x01
    443c:	ce 0f       	add	r28, r30
    443e:	d1 1d       	adc	r29, r1
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	f8 94       	cli
    4444:	de bf       	out	0x3e, r29	; 62
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	cd bf       	out	0x3d, r28	; 61
    444a:	ed 01       	movw	r28, r26
    444c:	08 95       	ret
    444e:	f5 d0       	rcall	.+490    	; 0x463a <__fp_pscA>
    4450:	58 f0       	brcs	.+22     	; 0x4468 <__epilogue_restores__+0x50>
    4452:	80 e8       	ldi	r24, 0x80	; 128
    4454:	91 e0       	ldi	r25, 0x01	; 1
    4456:	09 f4       	brne	.+2      	; 0x445a <__epilogue_restores__+0x42>
    4458:	9e ef       	ldi	r25, 0xFE	; 254
    445a:	f6 d0       	rcall	.+492    	; 0x4648 <__fp_pscB>
    445c:	28 f0       	brcs	.+10     	; 0x4468 <__epilogue_restores__+0x50>
    445e:	40 e8       	ldi	r20, 0x80	; 128
    4460:	51 e0       	ldi	r21, 0x01	; 1
    4462:	59 f4       	brne	.+22     	; 0x447a <atan2+0xe>
    4464:	5e ef       	ldi	r21, 0xFE	; 254
    4466:	09 c0       	rjmp	.+18     	; 0x447a <atan2+0xe>
    4468:	c0 c0       	rjmp	.+384    	; 0x45ea <__fp_nan>
    446a:	28 c1       	rjmp	.+592    	; 0x46bc <__fp_zero>

0000446c <atan2>:
    446c:	e9 2f       	mov	r30, r25
    446e:	e0 78       	andi	r30, 0x80	; 128
    4470:	03 d1       	rcall	.+518    	; 0x4678 <__fp_split3>
    4472:	68 f3       	brcs	.-38     	; 0x444e <__epilogue_restores__+0x36>
    4474:	09 2e       	mov	r0, r25
    4476:	05 2a       	or	r0, r21
    4478:	c1 f3       	breq	.-16     	; 0x446a <__epilogue_restores__+0x52>
    447a:	26 17       	cp	r18, r22
    447c:	37 07       	cpc	r19, r23
    447e:	48 07       	cpc	r20, r24
    4480:	59 07       	cpc	r21, r25
    4482:	38 f0       	brcs	.+14     	; 0x4492 <atan2+0x26>
    4484:	0e 2e       	mov	r0, r30
    4486:	07 f8       	bld	r0, 7
    4488:	e0 25       	eor	r30, r0
    448a:	69 f0       	breq	.+26     	; 0x44a6 <atan2+0x3a>
    448c:	e0 25       	eor	r30, r0
    448e:	e0 64       	ori	r30, 0x40	; 64
    4490:	0a c0       	rjmp	.+20     	; 0x44a6 <atan2+0x3a>
    4492:	ef 63       	ori	r30, 0x3F	; 63
    4494:	07 f8       	bld	r0, 7
    4496:	00 94       	com	r0
    4498:	07 fa       	bst	r0, 7
    449a:	db 01       	movw	r26, r22
    449c:	b9 01       	movw	r22, r18
    449e:	9d 01       	movw	r18, r26
    44a0:	dc 01       	movw	r26, r24
    44a2:	ca 01       	movw	r24, r20
    44a4:	ad 01       	movw	r20, r26
    44a6:	ef 93       	push	r30
    44a8:	41 d0       	rcall	.+130    	; 0x452c <__divsf3_pse>
    44aa:	d5 d0       	rcall	.+426    	; 0x4656 <__fp_round>
    44ac:	0a d0       	rcall	.+20     	; 0x44c2 <atan>
    44ae:	5f 91       	pop	r21
    44b0:	55 23       	and	r21, r21
    44b2:	31 f0       	breq	.+12     	; 0x44c0 <atan2+0x54>
    44b4:	2b ed       	ldi	r18, 0xDB	; 219
    44b6:	3f e0       	ldi	r19, 0x0F	; 15
    44b8:	49 e4       	ldi	r20, 0x49	; 73
    44ba:	50 fd       	sbrc	r21, 0
    44bc:	49 ec       	ldi	r20, 0xC9	; 201
    44be:	93 cb       	rjmp	.-2266   	; 0x3be6 <__addsf3>
    44c0:	08 95       	ret

000044c2 <atan>:
    44c2:	df 93       	push	r29
    44c4:	dd 27       	eor	r29, r29
    44c6:	b9 2f       	mov	r27, r25
    44c8:	bf 77       	andi	r27, 0x7F	; 127
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	5f e3       	ldi	r21, 0x3F	; 63
    44ce:	16 16       	cp	r1, r22
    44d0:	17 06       	cpc	r1, r23
    44d2:	48 07       	cpc	r20, r24
    44d4:	5b 07       	cpc	r21, r27
    44d6:	10 f4       	brcc	.+4      	; 0x44dc <atan+0x1a>
    44d8:	d9 2f       	mov	r29, r25
    44da:	f7 d0       	rcall	.+494    	; 0x46ca <inverse>
    44dc:	9f 93       	push	r25
    44de:	8f 93       	push	r24
    44e0:	7f 93       	push	r23
    44e2:	6f 93       	push	r22
    44e4:	5a d1       	rcall	.+692    	; 0x479a <square>
    44e6:	ee e4       	ldi	r30, 0x4E	; 78
    44e8:	f1 e0       	ldi	r31, 0x01	; 1
    44ea:	82 d0       	rcall	.+260    	; 0x45f0 <__fp_powser>
    44ec:	b4 d0       	rcall	.+360    	; 0x4656 <__fp_round>
    44ee:	2f 91       	pop	r18
    44f0:	3f 91       	pop	r19
    44f2:	4f 91       	pop	r20
    44f4:	5f 91       	pop	r21
    44f6:	fa d0       	rcall	.+500    	; 0x46ec <__mulsf3x>
    44f8:	dd 23       	and	r29, r29
    44fa:	49 f0       	breq	.+18     	; 0x450e <atan+0x4c>
    44fc:	90 58       	subi	r25, 0x80	; 128
    44fe:	a2 ea       	ldi	r26, 0xA2	; 162
    4500:	2a ed       	ldi	r18, 0xDA	; 218
    4502:	3f e0       	ldi	r19, 0x0F	; 15
    4504:	49 ec       	ldi	r20, 0xC9	; 201
    4506:	5f e3       	ldi	r21, 0x3F	; 63
    4508:	d0 78       	andi	r29, 0x80	; 128
    450a:	5d 27       	eor	r21, r29
    450c:	56 d1       	rcall	.+684    	; 0x47ba <__addsf3x>
    450e:	df 91       	pop	r29
    4510:	a2 c0       	rjmp	.+324    	; 0x4656 <__fp_round>
    4512:	9a d0       	rcall	.+308    	; 0x4648 <__fp_pscB>
    4514:	40 f0       	brcs	.+16     	; 0x4526 <atan+0x64>
    4516:	91 d0       	rcall	.+290    	; 0x463a <__fp_pscA>
    4518:	30 f0       	brcs	.+12     	; 0x4526 <atan+0x64>
    451a:	21 f4       	brne	.+8      	; 0x4524 <atan+0x62>
    451c:	5f 3f       	cpi	r21, 0xFF	; 255
    451e:	19 f0       	breq	.+6      	; 0x4526 <atan+0x64>
    4520:	5e c0       	rjmp	.+188    	; 0x45de <__fp_inf>
    4522:	51 11       	cpse	r21, r1
    4524:	cc c0       	rjmp	.+408    	; 0x46be <__fp_szero>
    4526:	61 c0       	rjmp	.+194    	; 0x45ea <__fp_nan>

00004528 <__divsf3x>:
    4528:	a7 d0       	rcall	.+334    	; 0x4678 <__fp_split3>
    452a:	98 f3       	brcs	.-26     	; 0x4512 <atan+0x50>

0000452c <__divsf3_pse>:
    452c:	99 23       	and	r25, r25
    452e:	c9 f3       	breq	.-14     	; 0x4522 <atan+0x60>
    4530:	55 23       	and	r21, r21
    4532:	b1 f3       	breq	.-20     	; 0x4520 <atan+0x5e>
    4534:	95 1b       	sub	r25, r21
    4536:	55 0b       	sbc	r21, r21
    4538:	bb 27       	eor	r27, r27
    453a:	aa 27       	eor	r26, r26
    453c:	62 17       	cp	r22, r18
    453e:	73 07       	cpc	r23, r19
    4540:	84 07       	cpc	r24, r20
    4542:	38 f0       	brcs	.+14     	; 0x4552 <__divsf3_pse+0x26>
    4544:	9f 5f       	subi	r25, 0xFF	; 255
    4546:	5f 4f       	sbci	r21, 0xFF	; 255
    4548:	22 0f       	add	r18, r18
    454a:	33 1f       	adc	r19, r19
    454c:	44 1f       	adc	r20, r20
    454e:	aa 1f       	adc	r26, r26
    4550:	a9 f3       	breq	.-22     	; 0x453c <__divsf3_pse+0x10>
    4552:	33 d0       	rcall	.+102    	; 0x45ba <__divsf3_pse+0x8e>
    4554:	0e 2e       	mov	r0, r30
    4556:	3a f0       	brmi	.+14     	; 0x4566 <__divsf3_pse+0x3a>
    4558:	e0 e8       	ldi	r30, 0x80	; 128
    455a:	30 d0       	rcall	.+96     	; 0x45bc <__divsf3_pse+0x90>
    455c:	91 50       	subi	r25, 0x01	; 1
    455e:	50 40       	sbci	r21, 0x00	; 0
    4560:	e6 95       	lsr	r30
    4562:	00 1c       	adc	r0, r0
    4564:	ca f7       	brpl	.-14     	; 0x4558 <__divsf3_pse+0x2c>
    4566:	29 d0       	rcall	.+82     	; 0x45ba <__divsf3_pse+0x8e>
    4568:	fe 2f       	mov	r31, r30
    456a:	27 d0       	rcall	.+78     	; 0x45ba <__divsf3_pse+0x8e>
    456c:	66 0f       	add	r22, r22
    456e:	77 1f       	adc	r23, r23
    4570:	88 1f       	adc	r24, r24
    4572:	bb 1f       	adc	r27, r27
    4574:	26 17       	cp	r18, r22
    4576:	37 07       	cpc	r19, r23
    4578:	48 07       	cpc	r20, r24
    457a:	ab 07       	cpc	r26, r27
    457c:	b0 e8       	ldi	r27, 0x80	; 128
    457e:	09 f0       	breq	.+2      	; 0x4582 <__divsf3_pse+0x56>
    4580:	bb 0b       	sbc	r27, r27
    4582:	80 2d       	mov	r24, r0
    4584:	bf 01       	movw	r22, r30
    4586:	ff 27       	eor	r31, r31
    4588:	93 58       	subi	r25, 0x83	; 131
    458a:	5f 4f       	sbci	r21, 0xFF	; 255
    458c:	2a f0       	brmi	.+10     	; 0x4598 <__divsf3_pse+0x6c>
    458e:	9e 3f       	cpi	r25, 0xFE	; 254
    4590:	51 05       	cpc	r21, r1
    4592:	68 f0       	brcs	.+26     	; 0x45ae <__divsf3_pse+0x82>
    4594:	24 c0       	rjmp	.+72     	; 0x45de <__fp_inf>
    4596:	93 c0       	rjmp	.+294    	; 0x46be <__fp_szero>
    4598:	5f 3f       	cpi	r21, 0xFF	; 255
    459a:	ec f3       	brlt	.-6      	; 0x4596 <__divsf3_pse+0x6a>
    459c:	98 3e       	cpi	r25, 0xE8	; 232
    459e:	dc f3       	brlt	.-10     	; 0x4596 <__divsf3_pse+0x6a>
    45a0:	86 95       	lsr	r24
    45a2:	77 95       	ror	r23
    45a4:	67 95       	ror	r22
    45a6:	b7 95       	ror	r27
    45a8:	f7 95       	ror	r31
    45aa:	9f 5f       	subi	r25, 0xFF	; 255
    45ac:	c9 f7       	brne	.-14     	; 0x45a0 <__divsf3_pse+0x74>
    45ae:	88 0f       	add	r24, r24
    45b0:	91 1d       	adc	r25, r1
    45b2:	96 95       	lsr	r25
    45b4:	87 95       	ror	r24
    45b6:	97 f9       	bld	r25, 7
    45b8:	08 95       	ret
    45ba:	e1 e0       	ldi	r30, 0x01	; 1
    45bc:	66 0f       	add	r22, r22
    45be:	77 1f       	adc	r23, r23
    45c0:	88 1f       	adc	r24, r24
    45c2:	bb 1f       	adc	r27, r27
    45c4:	62 17       	cp	r22, r18
    45c6:	73 07       	cpc	r23, r19
    45c8:	84 07       	cpc	r24, r20
    45ca:	ba 07       	cpc	r27, r26
    45cc:	20 f0       	brcs	.+8      	; 0x45d6 <__divsf3_pse+0xaa>
    45ce:	62 1b       	sub	r22, r18
    45d0:	73 0b       	sbc	r23, r19
    45d2:	84 0b       	sbc	r24, r20
    45d4:	ba 0b       	sbc	r27, r26
    45d6:	ee 1f       	adc	r30, r30
    45d8:	88 f7       	brcc	.-30     	; 0x45bc <__divsf3_pse+0x90>
    45da:	e0 95       	com	r30
    45dc:	08 95       	ret

000045de <__fp_inf>:
    45de:	97 f9       	bld	r25, 7
    45e0:	9f 67       	ori	r25, 0x7F	; 127
    45e2:	80 e8       	ldi	r24, 0x80	; 128
    45e4:	70 e0       	ldi	r23, 0x00	; 0
    45e6:	60 e0       	ldi	r22, 0x00	; 0
    45e8:	08 95       	ret

000045ea <__fp_nan>:
    45ea:	9f ef       	ldi	r25, 0xFF	; 255
    45ec:	80 ec       	ldi	r24, 0xC0	; 192
    45ee:	08 95       	ret

000045f0 <__fp_powser>:
    45f0:	df 93       	push	r29
    45f2:	cf 93       	push	r28
    45f4:	1f 93       	push	r17
    45f6:	0f 93       	push	r16
    45f8:	ff 92       	push	r15
    45fa:	ef 92       	push	r14
    45fc:	df 92       	push	r13
    45fe:	7b 01       	movw	r14, r22
    4600:	8c 01       	movw	r16, r24
    4602:	68 94       	set
    4604:	05 c0       	rjmp	.+10     	; 0x4610 <__fp_powser+0x20>
    4606:	da 2e       	mov	r13, r26
    4608:	ef 01       	movw	r28, r30
    460a:	70 d0       	rcall	.+224    	; 0x46ec <__mulsf3x>
    460c:	fe 01       	movw	r30, r28
    460e:	e8 94       	clt
    4610:	a5 91       	lpm	r26, Z+
    4612:	25 91       	lpm	r18, Z+
    4614:	35 91       	lpm	r19, Z+
    4616:	45 91       	lpm	r20, Z+
    4618:	55 91       	lpm	r21, Z+
    461a:	ae f3       	brts	.-22     	; 0x4606 <__fp_powser+0x16>
    461c:	ef 01       	movw	r28, r30
    461e:	cd d0       	rcall	.+410    	; 0x47ba <__addsf3x>
    4620:	fe 01       	movw	r30, r28
    4622:	97 01       	movw	r18, r14
    4624:	a8 01       	movw	r20, r16
    4626:	da 94       	dec	r13
    4628:	79 f7       	brne	.-34     	; 0x4608 <__fp_powser+0x18>
    462a:	df 90       	pop	r13
    462c:	ef 90       	pop	r14
    462e:	ff 90       	pop	r15
    4630:	0f 91       	pop	r16
    4632:	1f 91       	pop	r17
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret

0000463a <__fp_pscA>:
    463a:	00 24       	eor	r0, r0
    463c:	0a 94       	dec	r0
    463e:	16 16       	cp	r1, r22
    4640:	17 06       	cpc	r1, r23
    4642:	18 06       	cpc	r1, r24
    4644:	09 06       	cpc	r0, r25
    4646:	08 95       	ret

00004648 <__fp_pscB>:
    4648:	00 24       	eor	r0, r0
    464a:	0a 94       	dec	r0
    464c:	12 16       	cp	r1, r18
    464e:	13 06       	cpc	r1, r19
    4650:	14 06       	cpc	r1, r20
    4652:	05 06       	cpc	r0, r21
    4654:	08 95       	ret

00004656 <__fp_round>:
    4656:	09 2e       	mov	r0, r25
    4658:	03 94       	inc	r0
    465a:	00 0c       	add	r0, r0
    465c:	11 f4       	brne	.+4      	; 0x4662 <__fp_round+0xc>
    465e:	88 23       	and	r24, r24
    4660:	52 f0       	brmi	.+20     	; 0x4676 <__fp_round+0x20>
    4662:	bb 0f       	add	r27, r27
    4664:	40 f4       	brcc	.+16     	; 0x4676 <__fp_round+0x20>
    4666:	bf 2b       	or	r27, r31
    4668:	11 f4       	brne	.+4      	; 0x466e <__fp_round+0x18>
    466a:	60 ff       	sbrs	r22, 0
    466c:	04 c0       	rjmp	.+8      	; 0x4676 <__fp_round+0x20>
    466e:	6f 5f       	subi	r22, 0xFF	; 255
    4670:	7f 4f       	sbci	r23, 0xFF	; 255
    4672:	8f 4f       	sbci	r24, 0xFF	; 255
    4674:	9f 4f       	sbci	r25, 0xFF	; 255
    4676:	08 95       	ret

00004678 <__fp_split3>:
    4678:	57 fd       	sbrc	r21, 7
    467a:	90 58       	subi	r25, 0x80	; 128
    467c:	44 0f       	add	r20, r20
    467e:	55 1f       	adc	r21, r21
    4680:	59 f0       	breq	.+22     	; 0x4698 <__fp_splitA+0x10>
    4682:	5f 3f       	cpi	r21, 0xFF	; 255
    4684:	71 f0       	breq	.+28     	; 0x46a2 <__fp_splitA+0x1a>
    4686:	47 95       	ror	r20

00004688 <__fp_splitA>:
    4688:	88 0f       	add	r24, r24
    468a:	97 fb       	bst	r25, 7
    468c:	99 1f       	adc	r25, r25
    468e:	61 f0       	breq	.+24     	; 0x46a8 <__fp_splitA+0x20>
    4690:	9f 3f       	cpi	r25, 0xFF	; 255
    4692:	79 f0       	breq	.+30     	; 0x46b2 <__fp_splitA+0x2a>
    4694:	87 95       	ror	r24
    4696:	08 95       	ret
    4698:	12 16       	cp	r1, r18
    469a:	13 06       	cpc	r1, r19
    469c:	14 06       	cpc	r1, r20
    469e:	55 1f       	adc	r21, r21
    46a0:	f2 cf       	rjmp	.-28     	; 0x4686 <__fp_split3+0xe>
    46a2:	46 95       	lsr	r20
    46a4:	f1 df       	rcall	.-30     	; 0x4688 <__fp_splitA>
    46a6:	08 c0       	rjmp	.+16     	; 0x46b8 <__fp_splitA+0x30>
    46a8:	16 16       	cp	r1, r22
    46aa:	17 06       	cpc	r1, r23
    46ac:	18 06       	cpc	r1, r24
    46ae:	99 1f       	adc	r25, r25
    46b0:	f1 cf       	rjmp	.-30     	; 0x4694 <__fp_splitA+0xc>
    46b2:	86 95       	lsr	r24
    46b4:	71 05       	cpc	r23, r1
    46b6:	61 05       	cpc	r22, r1
    46b8:	08 94       	sec
    46ba:	08 95       	ret

000046bc <__fp_zero>:
    46bc:	e8 94       	clt

000046be <__fp_szero>:
    46be:	bb 27       	eor	r27, r27
    46c0:	66 27       	eor	r22, r22
    46c2:	77 27       	eor	r23, r23
    46c4:	cb 01       	movw	r24, r22
    46c6:	97 f9       	bld	r25, 7
    46c8:	08 95       	ret

000046ca <inverse>:
    46ca:	9b 01       	movw	r18, r22
    46cc:	ac 01       	movw	r20, r24
    46ce:	60 e0       	ldi	r22, 0x00	; 0
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    46d2:	80 e8       	ldi	r24, 0x80	; 128
    46d4:	9f e3       	ldi	r25, 0x3F	; 63
    46d6:	c4 c0       	rjmp	.+392    	; 0x4860 <__divsf3>
    46d8:	b0 df       	rcall	.-160    	; 0x463a <__fp_pscA>
    46da:	28 f0       	brcs	.+10     	; 0x46e6 <inverse+0x1c>
    46dc:	b5 df       	rcall	.-150    	; 0x4648 <__fp_pscB>
    46de:	18 f0       	brcs	.+6      	; 0x46e6 <inverse+0x1c>
    46e0:	95 23       	and	r25, r21
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <inverse+0x1c>
    46e4:	7c cf       	rjmp	.-264    	; 0x45de <__fp_inf>
    46e6:	81 cf       	rjmp	.-254    	; 0x45ea <__fp_nan>
    46e8:	11 24       	eor	r1, r1
    46ea:	e9 cf       	rjmp	.-46     	; 0x46be <__fp_szero>

000046ec <__mulsf3x>:
    46ec:	c5 df       	rcall	.-118    	; 0x4678 <__fp_split3>
    46ee:	a0 f3       	brcs	.-24     	; 0x46d8 <inverse+0xe>

000046f0 <__mulsf3_pse>:
    46f0:	95 9f       	mul	r25, r21
    46f2:	d1 f3       	breq	.-12     	; 0x46e8 <inverse+0x1e>
    46f4:	95 0f       	add	r25, r21
    46f6:	50 e0       	ldi	r21, 0x00	; 0
    46f8:	55 1f       	adc	r21, r21
    46fa:	62 9f       	mul	r22, r18
    46fc:	f0 01       	movw	r30, r0
    46fe:	72 9f       	mul	r23, r18
    4700:	bb 27       	eor	r27, r27
    4702:	f0 0d       	add	r31, r0
    4704:	b1 1d       	adc	r27, r1
    4706:	63 9f       	mul	r22, r19
    4708:	aa 27       	eor	r26, r26
    470a:	f0 0d       	add	r31, r0
    470c:	b1 1d       	adc	r27, r1
    470e:	aa 1f       	adc	r26, r26
    4710:	64 9f       	mul	r22, r20
    4712:	66 27       	eor	r22, r22
    4714:	b0 0d       	add	r27, r0
    4716:	a1 1d       	adc	r26, r1
    4718:	66 1f       	adc	r22, r22
    471a:	82 9f       	mul	r24, r18
    471c:	22 27       	eor	r18, r18
    471e:	b0 0d       	add	r27, r0
    4720:	a1 1d       	adc	r26, r1
    4722:	62 1f       	adc	r22, r18
    4724:	73 9f       	mul	r23, r19
    4726:	b0 0d       	add	r27, r0
    4728:	a1 1d       	adc	r26, r1
    472a:	62 1f       	adc	r22, r18
    472c:	83 9f       	mul	r24, r19
    472e:	a0 0d       	add	r26, r0
    4730:	61 1d       	adc	r22, r1
    4732:	22 1f       	adc	r18, r18
    4734:	74 9f       	mul	r23, r20
    4736:	33 27       	eor	r19, r19
    4738:	a0 0d       	add	r26, r0
    473a:	61 1d       	adc	r22, r1
    473c:	23 1f       	adc	r18, r19
    473e:	84 9f       	mul	r24, r20
    4740:	60 0d       	add	r22, r0
    4742:	21 1d       	adc	r18, r1
    4744:	82 2f       	mov	r24, r18
    4746:	76 2f       	mov	r23, r22
    4748:	6a 2f       	mov	r22, r26
    474a:	11 24       	eor	r1, r1
    474c:	9f 57       	subi	r25, 0x7F	; 127
    474e:	50 40       	sbci	r21, 0x00	; 0
    4750:	8a f0       	brmi	.+34     	; 0x4774 <__mulsf3_pse+0x84>
    4752:	e1 f0       	breq	.+56     	; 0x478c <__mulsf3_pse+0x9c>
    4754:	88 23       	and	r24, r24
    4756:	4a f0       	brmi	.+18     	; 0x476a <__mulsf3_pse+0x7a>
    4758:	ee 0f       	add	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	bb 1f       	adc	r27, r27
    475e:	66 1f       	adc	r22, r22
    4760:	77 1f       	adc	r23, r23
    4762:	88 1f       	adc	r24, r24
    4764:	91 50       	subi	r25, 0x01	; 1
    4766:	50 40       	sbci	r21, 0x00	; 0
    4768:	a9 f7       	brne	.-22     	; 0x4754 <__mulsf3_pse+0x64>
    476a:	9e 3f       	cpi	r25, 0xFE	; 254
    476c:	51 05       	cpc	r21, r1
    476e:	70 f0       	brcs	.+28     	; 0x478c <__mulsf3_pse+0x9c>
    4770:	36 cf       	rjmp	.-404    	; 0x45de <__fp_inf>
    4772:	a5 cf       	rjmp	.-182    	; 0x46be <__fp_szero>
    4774:	5f 3f       	cpi	r21, 0xFF	; 255
    4776:	ec f3       	brlt	.-6      	; 0x4772 <__mulsf3_pse+0x82>
    4778:	98 3e       	cpi	r25, 0xE8	; 232
    477a:	dc f3       	brlt	.-10     	; 0x4772 <__mulsf3_pse+0x82>
    477c:	86 95       	lsr	r24
    477e:	77 95       	ror	r23
    4780:	67 95       	ror	r22
    4782:	b7 95       	ror	r27
    4784:	f7 95       	ror	r31
    4786:	e7 95       	ror	r30
    4788:	9f 5f       	subi	r25, 0xFF	; 255
    478a:	c1 f7       	brne	.-16     	; 0x477c <__mulsf3_pse+0x8c>
    478c:	fe 2b       	or	r31, r30
    478e:	88 0f       	add	r24, r24
    4790:	91 1d       	adc	r25, r1
    4792:	96 95       	lsr	r25
    4794:	87 95       	ror	r24
    4796:	97 f9       	bld	r25, 7
    4798:	08 95       	ret

0000479a <square>:
    479a:	9b 01       	movw	r18, r22
    479c:	ac 01       	movw	r20, r24
    479e:	50 ca       	rjmp	.-2912   	; 0x3c40 <__mulsf3>
    47a0:	4c df       	rcall	.-360    	; 0x463a <__fp_pscA>
    47a2:	30 f0       	brcs	.+12     	; 0x47b0 <square+0x16>
    47a4:	51 df       	rcall	.-350    	; 0x4648 <__fp_pscB>
    47a6:	20 f0       	brcs	.+8      	; 0x47b0 <square+0x16>
    47a8:	31 f4       	brne	.+12     	; 0x47b6 <square+0x1c>
    47aa:	9f 3f       	cpi	r25, 0xFF	; 255
    47ac:	11 f4       	brne	.+4      	; 0x47b2 <square+0x18>
    47ae:	1e f4       	brtc	.+6      	; 0x47b6 <square+0x1c>
    47b0:	1c cf       	rjmp	.-456    	; 0x45ea <__fp_nan>
    47b2:	0e f4       	brtc	.+2      	; 0x47b6 <square+0x1c>
    47b4:	e0 95       	com	r30
    47b6:	e7 fb       	bst	r30, 7
    47b8:	12 cf       	rjmp	.-476    	; 0x45de <__fp_inf>

000047ba <__addsf3x>:
    47ba:	e9 2f       	mov	r30, r25
    47bc:	5d df       	rcall	.-326    	; 0x4678 <__fp_split3>
    47be:	80 f3       	brcs	.-32     	; 0x47a0 <square+0x6>
    47c0:	ba 17       	cp	r27, r26
    47c2:	62 07       	cpc	r22, r18
    47c4:	73 07       	cpc	r23, r19
    47c6:	84 07       	cpc	r24, r20
    47c8:	95 07       	cpc	r25, r21
    47ca:	18 f0       	brcs	.+6      	; 0x47d2 <__addsf3x+0x18>
    47cc:	71 f4       	brne	.+28     	; 0x47ea <__addsf3x+0x30>
    47ce:	9e f5       	brtc	.+102    	; 0x4836 <__addsf3x+0x7c>
    47d0:	75 cf       	rjmp	.-278    	; 0x46bc <__fp_zero>
    47d2:	0e f4       	brtc	.+2      	; 0x47d6 <__addsf3x+0x1c>
    47d4:	e0 95       	com	r30
    47d6:	0b 2e       	mov	r0, r27
    47d8:	ba 2f       	mov	r27, r26
    47da:	a0 2d       	mov	r26, r0
    47dc:	0b 01       	movw	r0, r22
    47de:	b9 01       	movw	r22, r18
    47e0:	90 01       	movw	r18, r0
    47e2:	0c 01       	movw	r0, r24
    47e4:	ca 01       	movw	r24, r20
    47e6:	a0 01       	movw	r20, r0
    47e8:	11 24       	eor	r1, r1
    47ea:	ff 27       	eor	r31, r31
    47ec:	59 1b       	sub	r21, r25
    47ee:	99 f0       	breq	.+38     	; 0x4816 <__addsf3x+0x5c>
    47f0:	59 3f       	cpi	r21, 0xF9	; 249
    47f2:	50 f4       	brcc	.+20     	; 0x4808 <__addsf3x+0x4e>
    47f4:	50 3e       	cpi	r21, 0xE0	; 224
    47f6:	68 f1       	brcs	.+90     	; 0x4852 <__addsf3x+0x98>
    47f8:	1a 16       	cp	r1, r26
    47fa:	f0 40       	sbci	r31, 0x00	; 0
    47fc:	a2 2f       	mov	r26, r18
    47fe:	23 2f       	mov	r18, r19
    4800:	34 2f       	mov	r19, r20
    4802:	44 27       	eor	r20, r20
    4804:	58 5f       	subi	r21, 0xF8	; 248
    4806:	f3 cf       	rjmp	.-26     	; 0x47ee <__addsf3x+0x34>
    4808:	46 95       	lsr	r20
    480a:	37 95       	ror	r19
    480c:	27 95       	ror	r18
    480e:	a7 95       	ror	r26
    4810:	f0 40       	sbci	r31, 0x00	; 0
    4812:	53 95       	inc	r21
    4814:	c9 f7       	brne	.-14     	; 0x4808 <__addsf3x+0x4e>
    4816:	7e f4       	brtc	.+30     	; 0x4836 <__addsf3x+0x7c>
    4818:	1f 16       	cp	r1, r31
    481a:	ba 0b       	sbc	r27, r26
    481c:	62 0b       	sbc	r22, r18
    481e:	73 0b       	sbc	r23, r19
    4820:	84 0b       	sbc	r24, r20
    4822:	ba f0       	brmi	.+46     	; 0x4852 <__addsf3x+0x98>
    4824:	91 50       	subi	r25, 0x01	; 1
    4826:	a1 f0       	breq	.+40     	; 0x4850 <__addsf3x+0x96>
    4828:	ff 0f       	add	r31, r31
    482a:	bb 1f       	adc	r27, r27
    482c:	66 1f       	adc	r22, r22
    482e:	77 1f       	adc	r23, r23
    4830:	88 1f       	adc	r24, r24
    4832:	c2 f7       	brpl	.-16     	; 0x4824 <__addsf3x+0x6a>
    4834:	0e c0       	rjmp	.+28     	; 0x4852 <__addsf3x+0x98>
    4836:	ba 0f       	add	r27, r26
    4838:	62 1f       	adc	r22, r18
    483a:	73 1f       	adc	r23, r19
    483c:	84 1f       	adc	r24, r20
    483e:	48 f4       	brcc	.+18     	; 0x4852 <__addsf3x+0x98>
    4840:	87 95       	ror	r24
    4842:	77 95       	ror	r23
    4844:	67 95       	ror	r22
    4846:	b7 95       	ror	r27
    4848:	f7 95       	ror	r31
    484a:	9e 3f       	cpi	r25, 0xFE	; 254
    484c:	08 f0       	brcs	.+2      	; 0x4850 <__addsf3x+0x96>
    484e:	b3 cf       	rjmp	.-154    	; 0x47b6 <square+0x1c>
    4850:	93 95       	inc	r25
    4852:	88 0f       	add	r24, r24
    4854:	08 f0       	brcs	.+2      	; 0x4858 <__addsf3x+0x9e>
    4856:	99 27       	eor	r25, r25
    4858:	ee 0f       	add	r30, r30
    485a:	97 95       	ror	r25
    485c:	87 95       	ror	r24
    485e:	08 95       	ret

00004860 <__divsf3>:
    4860:	63 de       	rcall	.-826    	; 0x4528 <__divsf3x>
    4862:	f9 ce       	rjmp	.-526    	; 0x4656 <__fp_round>

00004864 <_exit>:
    4864:	ff cf       	rjmp	.-2      	; 0x4864 <_exit>
