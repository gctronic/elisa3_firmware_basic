
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  00004bee  00004c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800320  00800320  00004da2  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  000077e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e84  00000000  00000000  00007a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f8e  00000000  00000000  000088ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000157f  00000000  00000000  0000c878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000480b  00000000  00000000  0000ddf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000640  00000000  00000000  00012604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e25  00000000  00000000  00012c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001310  00000000  00000000  00013a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001ee  00000000  00000000  00014d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000118  00000000  00000000  00014f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__vector_32>
      84:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__vector_42>
      ac:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	18 0b       	sbc	r17, r24
      e6:	fc 0a       	sbc	r15, r28
      e8:	ca 0a       	sbc	r12, r26
      ea:	8d 0b       	sbc	r24, r29
      ec:	57 0b       	sbc	r21, r23
      ee:	80 0b       	sbc	r24, r16
      f0:	a1 0a       	sbc	r10, r17
      f2:	85 0a       	sbc	r8, r21
      f4:	58 0a       	sbc	r5, r24
      f6:	40 0a       	sbc	r4, r16
      f8:	e1 09       	sbc	r30, r1
      fa:	e1 09       	sbc	r30, r1
      fc:	e1 09       	sbc	r30, r1
      fe:	e1 09       	sbc	r30, r1
     100:	e1 09       	sbc	r30, r1
     102:	e1 09       	sbc	r30, r1
     104:	34 0a       	sbc	r3, r20
     106:	29 0a       	sbc	r2, r25
     108:	e1 09       	sbc	r30, r1
     10a:	e1 09       	sbc	r30, r1
     10c:	e1 09       	sbc	r30, r1
     10e:	e1 09       	sbc	r30, r1
     110:	e1 09       	sbc	r30, r1
     112:	e1 09       	sbc	r30, r1
     114:	e1 09       	sbc	r30, r1
     116:	e1 09       	sbc	r30, r1
     118:	e1 09       	sbc	r30, r1
     11a:	e1 09       	sbc	r30, r1
     11c:	e1 09       	sbc	r30, r1
     11e:	e1 09       	sbc	r30, r1
     120:	58 0a       	sbc	r5, r24
     122:	ca 0a       	sbc	r12, r26
     124:	1d 0a       	sbc	r1, r29
     126:	18 0a       	sbc	r1, r24
     128:	e1 09       	sbc	r30, r1
     12a:	e1 09       	sbc	r30, r1
     12c:	e1 09       	sbc	r30, r1
     12e:	e1 09       	sbc	r30, r1
     130:	e1 09       	sbc	r30, r1
     132:	e1 09       	sbc	r30, r1
     134:	e1 09       	sbc	r30, r1
     136:	e1 09       	sbc	r30, r1
     138:	e1 09       	sbc	r30, r1
     13a:	e1 09       	sbc	r30, r1
     13c:	e1 09       	sbc	r30, r1
     13e:	e1 09       	sbc	r30, r1
     140:	57 0b       	sbc	r21, r23
     142:	a1 0a       	sbc	r10, r17
     144:	e1 09       	sbc	r30, r1
     146:	e1 09       	sbc	r30, r1
     148:	18 0b       	sbc	r17, r24
     14a:	80 0b       	sbc	r24, r16
     14c:	41 0b       	sbc	r20, r17
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	ee ee       	ldi	r30, 0xEE	; 238
     194:	fb e4       	ldi	r31, 0x4B	; 75
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a0 32       	cpi	r26, 0x20	; 32
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	a0 e2       	ldi	r26, 0x20	; 32
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a0 35       	cpi	r26, 0x50	; 80
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	1f 93       	push	r17

	choosePeripheral = 1;					// usart menu
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 10 02 	sts	0x0210, r24

	initPeripherals();
     1c6:	0e 94 15 13 	call	0x262a	; 0x262a <initPeripherals>

	calibrateSensors();
     1ca:	0e 94 24 1c 	call	0x3848	; 0x3848 <calibrateSensors>

		if(delayCounter >= (PAUSE_2_SEC)) {
			
			delayCounter = 0;
			
			measBattery = 1;
     1ce:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {

		//PORTB ^= (1 << 6); 				// toggle the green led

		currentSelector = getSelector();	// update selector position
     1d0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <getSelector>
     1d4:	80 93 1d 04 	sts	0x041D, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1d8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <readAccelXYZ>

		computeAngle();
     1dc:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <computeAngle>
		if(delayCounter%(PAUSE_10_MSEC) == 0) {
			// do something every 10 milliseconds
		}
*/

		if(delayCounter >= (PAUSE_2_SEC)) {
     1e0:	80 91 1b 04 	lds	r24, 0x041B
     1e4:	90 91 1c 04 	lds	r25, 0x041C
     1e8:	2b e4       	ldi	r18, 0x4B	; 75
     1ea:	8e 31       	cpi	r24, 0x1E	; 30
     1ec:	92 07       	cpc	r25, r18
     1ee:	30 f0       	brcs	.+12     	; 0x1fc <main+0x3e>
			
			delayCounter = 0;
     1f0:	10 92 1c 04 	sts	0x041C, r1
     1f4:	10 92 1b 04 	sts	0x041B, r1
			
			measBattery = 1;
     1f8:	10 93 c1 03 	sts	0x03C1, r17
			//sleep(20);

		}


		handleIRRemoteCommands();
     1fc:	0e 94 cf 09 	call	0x139e	; 0x139e <handleIRRemoteCommands>


		handleRFCommands();
     200:	0e 94 bf 04 	call	0x97e	; 0x97e <handleRFCommands>


		if(currentSelector == 0) {	// no control
     204:	80 91 1d 04 	lds	r24, 0x041D
     208:	88 23       	and	r24, r24
     20a:	09 f0       	breq	.+2      	; 0x20e <main+0x50>
     20c:	66 c0       	rjmp	.+204    	; 0x2da <main+0x11c>

			// compute velocities even if they aren't used
			if(compute_left_vel) {
     20e:	80 91 07 02 	lds	r24, 0x0207
     212:	88 23       	and	r24, r24
     214:	91 f0       	breq	.+36     	; 0x23a <main+0x7c>
				last_left_vel = left_vel_sum>>2;
     216:	80 91 df 03 	lds	r24, 0x03DF
     21a:	90 91 e0 03 	lds	r25, 0x03E0
     21e:	96 95       	lsr	r25
     220:	87 95       	ror	r24
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	90 93 e4 03 	sts	0x03E4, r25
     22a:	80 93 e3 03 	sts	0x03E3, r24
				compute_left_vel = 0;
     22e:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     232:	10 92 e0 03 	sts	0x03E0, r1
     236:	10 92 df 03 	sts	0x03DF, r1
			}

			if(compute_right_vel) {
     23a:	80 91 08 02 	lds	r24, 0x0208
     23e:	88 23       	and	r24, r24
     240:	91 f0       	breq	.+36     	; 0x266 <main+0xa8>
				last_right_vel = right_vel_sum>>2;
     242:	80 91 e1 03 	lds	r24, 0x03E1
     246:	90 91 e2 03 	lds	r25, 0x03E2
     24a:	96 95       	lsr	r25
     24c:	87 95       	ror	r24
     24e:	96 95       	lsr	r25
     250:	87 95       	ror	r24
     252:	90 93 e6 03 	sts	0x03E6, r25
     256:	80 93 e5 03 	sts	0x03E5, r24
				compute_right_vel = 0;
     25a:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     25e:	10 92 e2 03 	sts	0x03E2, r1
     262:	10 92 e1 03 	sts	0x03E1, r1
			}


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     266:	80 91 eb 03 	lds	r24, 0x03EB
     26a:	90 91 ec 03 	lds	r25, 0x03EC
     26e:	90 93 f8 03 	sts	0x03F8, r25
     272:	80 93 f7 03 	sts	0x03F7, r24
			pwm_left_working = pwm_left_desired;
     276:	20 91 ed 03 	lds	r18, 0x03ED
     27a:	30 91 ee 03 	lds	r19, 0x03EE
     27e:	30 93 fa 03 	sts	0x03FA, r19
     282:	20 93 f9 03 	sts	0x03F9, r18
			if(obstacleAvoidanceEnabled) {
     286:	40 91 20 04 	lds	r20, 0x0420
     28a:	44 23       	and	r20, r20
     28c:	09 f0       	breq	.+2      	; 0x290 <main+0xd2>
     28e:	a8 c0       	rjmp	.+336    	; 0x3e0 <main+0x222>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
	        pwm_left_desired_to_control = pwm_left_working;
     290:	30 93 de 03 	sts	0x03DE, r19
     294:	20 93 dd 03 	sts	0x03DD, r18
	        pwm_right_desired_to_control = pwm_right_working;
     298:	90 93 dc 03 	sts	0x03DC, r25
     29c:	80 93 db 03 	sts	0x03DB, r24

			pwm_left = pwm_left_working;
     2a0:	30 93 ea 03 	sts	0x03EA, r19
     2a4:	20 93 e9 03 	sts	0x03E9, r18
			pwm_right = pwm_right_working;
     2a8:	90 93 e8 03 	sts	0x03E8, r25
     2ac:	80 93 e7 03 	sts	0x03E7, r24

			if(pwm_right > 0) {
     2b0:	18 16       	cp	r1, r24
     2b2:	19 06       	cpc	r1, r25
     2b4:	0c f0       	brlt	.+2      	; 0x2b8 <main+0xfa>
     2b6:	04 c1       	rjmp	.+520    	; 0x4c0 <main+0x302>
				OCR3A = (unsigned int)pwm_right;
     2b8:	90 93 99 00 	sts	0x0099, r25
     2bc:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     2c0:	80 91 e9 03 	lds	r24, 0x03E9
     2c4:	90 91 ea 03 	lds	r25, 0x03EA
     2c8:	18 16       	cp	r1, r24
     2ca:	19 06       	cpc	r1, r25
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <main+0x112>
     2ce:	ec c0       	rjmp	.+472    	; 0x4a8 <main+0x2ea>
				OCR4A = (unsigned int)pwm_left;
     2d0:	90 93 a9 00 	sts	0x00A9, r25
     2d4:	80 93 a8 00 	sts	0x00A8, r24
     2d8:	7b cf       	rjmp	.-266    	; 0x1d0 <main+0x12>
				OCR4A = 0;
				OCR4B = 0;
			}


		} else if(currentSelector == 1) {		// only horizontal speed control
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x122>
     2de:	8f c0       	rjmp	.+286    	; 0x3fe <main+0x240>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both horizontal and vertical speed control
     2e0:	82 30       	cpi	r24, 0x02	; 2
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <main+0x128>
     2e4:	75 cf       	rjmp	.-278    	; 0x1d0 <main+0x12>

			pwm_left_working = pwm_left_desired;
     2e6:	20 91 ed 03 	lds	r18, 0x03ED
     2ea:	30 91 ee 03 	lds	r19, 0x03EE
     2ee:	30 93 fa 03 	sts	0x03FA, r19
     2f2:	20 93 f9 03 	sts	0x03F9, r18
			pwm_right_working = pwm_right_desired;
     2f6:	80 91 eb 03 	lds	r24, 0x03EB
     2fa:	90 91 ec 03 	lds	r25, 0x03EC
     2fe:	90 93 f8 03 	sts	0x03F8, r25
     302:	80 93 f7 03 	sts	0x03F7, r24
			if(obstacleAvoidanceEnabled) {
     306:	40 91 20 04 	lds	r20, 0x0420
     30a:	44 23       	and	r20, r20
     30c:	09 f0       	breq	.+2      	; 0x310 <main+0x152>
     30e:	2a c1       	rjmp	.+596    	; 0x564 <main+0x3a6>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
			pwm_left_desired_to_control = pwm_left_working;
     310:	30 93 de 03 	sts	0x03DE, r19
     314:	20 93 dd 03 	sts	0x03DD, r18
			pwm_right_desired_to_control = pwm_right_working;
     318:	90 93 dc 03 	sts	0x03DC, r25
     31c:	80 93 db 03 	sts	0x03DB, r24

			if(compute_left_vel) {
     320:	80 91 07 02 	lds	r24, 0x0207
     324:	88 23       	and	r24, r24
     326:	59 f1       	breq	.+86     	; 0x37e <main+0x1c0>

				last_left_vel = left_vel_sum>>2;
     328:	80 91 df 03 	lds	r24, 0x03DF
     32c:	90 91 e0 03 	lds	r25, 0x03E0
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	96 95       	lsr	r25
     336:	87 95       	ror	r24
     338:	90 93 e4 03 	sts	0x03E4, r25
     33c:	80 93 e3 03 	sts	0x03E3, r24
				compute_left_vel = 0;
     340:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     344:	10 92 e0 03 	sts	0x03E0, r1
     348:	10 92 df 03 	sts	0x03DF, r1

				if(robotPosition == HORIZONTAL_POS) {
     34c:	80 91 16 02 	lds	r24, 0x0216
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	09 f4       	brne	.+2      	; 0x356 <main+0x198>
     354:	1b c1       	rjmp	.+566    	; 0x58c <main+0x3ce>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
     356:	89 ef       	ldi	r24, 0xF9	; 249
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
     35e:	80 91 f9 03 	lds	r24, 0x03F9
     362:	90 91 fa 03 	lds	r25, 0x03FA
     366:	90 93 ea 03 	sts	0x03EA, r25
     36a:	80 93 e9 03 	sts	0x03E9, r24

				if(pwm_left > 0) {
     36e:	18 16       	cp	r1, r24
     370:	19 06       	cpc	r1, r25
     372:	0c f0       	brlt	.+2      	; 0x376 <main+0x1b8>
     374:	10 c1       	rjmp	.+544    	; 0x596 <main+0x3d8>
					OCR4A = (unsigned int)pwm_left;
     376:	90 93 a9 00 	sts	0x00A9, r25
     37a:	80 93 a8 00 	sts	0x00A8, r24
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     37e:	80 91 08 02 	lds	r24, 0x0208
     382:	88 23       	and	r24, r24
     384:	09 f4       	brne	.+2      	; 0x388 <main+0x1ca>
     386:	24 cf       	rjmp	.-440    	; 0x1d0 <main+0x12>

				last_right_vel = right_vel_sum>>2;
     388:	80 91 e1 03 	lds	r24, 0x03E1
     38c:	90 91 e2 03 	lds	r25, 0x03E2
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	96 95       	lsr	r25
     396:	87 95       	ror	r24
     398:	90 93 e6 03 	sts	0x03E6, r25
     39c:	80 93 e5 03 	sts	0x03E5, r24
				compute_right_vel = 0;
     3a0:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     3a4:	10 92 e2 03 	sts	0x03E2, r1
     3a8:	10 92 e1 03 	sts	0x03E1, r1

				if(robotPosition == HORIZONTAL_POS) {
     3ac:	80 91 16 02 	lds	r24, 0x0216
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <main+0x1f8>
     3b4:	e6 c0       	rjmp	.+460    	; 0x582 <main+0x3c4>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
     3b6:	87 ef       	ldi	r24, 0xF7	; 247
     3b8:	93 e0       	ldi	r25, 0x03	; 3
     3ba:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
     3be:	80 91 f7 03 	lds	r24, 0x03F7
     3c2:	90 91 f8 03 	lds	r25, 0x03F8
     3c6:	90 93 e8 03 	sts	0x03E8, r25
     3ca:	80 93 e7 03 	sts	0x03E7, r24

				if(pwm_right > 0) {
     3ce:	18 16       	cp	r1, r24
     3d0:	19 06       	cpc	r1, r25
     3d2:	0c f0       	brlt	.+2      	; 0x3d6 <main+0x218>
     3d4:	5d c0       	rjmp	.+186    	; 0x490 <main+0x2d2>
					OCR3A = (unsigned int)pwm_right;
     3d6:	90 93 99 00 	sts	0x0099, r25
     3da:	80 93 98 00 	sts	0x0098, r24
     3de:	f8 ce       	rjmp	.-528    	; 0x1d0 <main+0x12>


			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
			pwm_left_working = pwm_left_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     3e0:	89 ef       	ldi	r24, 0xF9	; 249
     3e2:	93 e0       	ldi	r25, 0x03	; 3
     3e4:	67 ef       	ldi	r22, 0xF7	; 247
     3e6:	73 e0       	ldi	r23, 0x03	; 3
     3e8:	0e 94 0a 18 	call	0x3014	; 0x3014 <obstacleAvoidance>
     3ec:	20 91 f9 03 	lds	r18, 0x03F9
     3f0:	30 91 fa 03 	lds	r19, 0x03FA
     3f4:	80 91 f7 03 	lds	r24, 0x03F7
     3f8:	90 91 f8 03 	lds	r25, 0x03F8
     3fc:	49 cf       	rjmp	.-366    	; 0x290 <main+0xd2>
			}


		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
     3fe:	20 91 ed 03 	lds	r18, 0x03ED
     402:	30 91 ee 03 	lds	r19, 0x03EE
     406:	30 93 fa 03 	sts	0x03FA, r19
     40a:	20 93 f9 03 	sts	0x03F9, r18
			pwm_right_working = pwm_right_desired;
     40e:	80 91 eb 03 	lds	r24, 0x03EB
     412:	90 91 ec 03 	lds	r25, 0x03EC
     416:	90 93 f8 03 	sts	0x03F8, r25
     41a:	80 93 f7 03 	sts	0x03F7, r24
			if(obstacleAvoidanceEnabled) {
     41e:	40 91 20 04 	lds	r20, 0x0420
     422:	44 23       	and	r20, r20
     424:	09 f0       	breq	.+2      	; 0x428 <main+0x26a>
     426:	7f c0       	rjmp	.+254    	; 0x526 <main+0x368>
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
			}
			pwm_left_desired_to_control = pwm_left_working;
     428:	30 93 de 03 	sts	0x03DE, r19
     42c:	20 93 dd 03 	sts	0x03DD, r18
			pwm_right_desired_to_control = pwm_right_working;
     430:	90 93 dc 03 	sts	0x03DC, r25
     434:	80 93 db 03 	sts	0x03DB, r24

			if(compute_left_vel) {
     438:	80 91 07 02 	lds	r24, 0x0207
     43c:	88 23       	and	r24, r24
     43e:	09 f0       	breq	.+2      	; 0x442 <main+0x284>
     440:	4b c0       	rjmp	.+150    	; 0x4d8 <main+0x31a>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
     442:	80 91 08 02 	lds	r24, 0x0208
     446:	88 23       	and	r24, r24
     448:	09 f4       	brne	.+2      	; 0x44c <main+0x28e>
     44a:	c2 ce       	rjmp	.-636    	; 0x1d0 <main+0x12>

				last_right_vel = right_vel_sum>>2;
     44c:	80 91 e1 03 	lds	r24, 0x03E1
     450:	90 91 e2 03 	lds	r25, 0x03E2
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	96 95       	lsr	r25
     45a:	87 95       	ror	r24
     45c:	90 93 e6 03 	sts	0x03E6, r25
     460:	80 93 e5 03 	sts	0x03E5, r24
				compute_right_vel = 0;
     464:	10 92 08 02 	sts	0x0208, r1
				right_vel_sum = 0;
     468:	10 92 e2 03 	sts	0x03E2, r1
     46c:	10 92 e1 03 	sts	0x03E1, r1

				start_horizontal_speed_control_right(&pwm_right_working);
     470:	87 ef       	ldi	r24, 0xF7	; 247
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <start_horizontal_speed_control_right>

				pwm_right = pwm_right_working;
     478:	80 91 f7 03 	lds	r24, 0x03F7
     47c:	90 91 f8 03 	lds	r25, 0x03F8
     480:	90 93 e8 03 	sts	0x03E8, r25
     484:	80 93 e7 03 	sts	0x03E7, r24

				if(pwm_right > 0) {
     488:	18 16       	cp	r1, r24
     48a:	19 06       	cpc	r1, r25
     48c:	0c f4       	brge	.+2      	; 0x490 <main+0x2d2>
     48e:	a3 cf       	rjmp	.-186    	; 0x3d6 <main+0x218>

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
     490:	00 97       	sbiw	r24, 0x00	; 0
     492:	09 f0       	breq	.+2      	; 0x496 <main+0x2d8>
     494:	96 c0       	rjmp	.+300    	; 0x5c2 <main+0x404>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
     496:	10 92 99 00 	sts	0x0099, r1
     49a:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
     49e:	10 92 9b 00 	sts	0x009B, r1
     4a2:	10 92 9a 00 	sts	0x009A, r1
     4a6:	94 ce       	rjmp	.-728    	; 0x1d0 <main+0x12>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	09 f0       	breq	.+2      	; 0x4ae <main+0x2f0>
     4ac:	4b c0       	rjmp	.+150    	; 0x544 <main+0x386>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
     4ae:	10 92 a9 00 	sts	0x00A9, r1
     4b2:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
     4b6:	10 92 ab 00 	sts	0x00AB, r1
     4ba:	10 92 aa 00 	sts	0x00AA, r1
     4be:	88 ce       	rjmp	.-752    	; 0x1d0 <main+0x12>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <main+0x308>
     4c4:	47 c0       	rjmp	.+142    	; 0x554 <main+0x396>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
     4c6:	10 92 99 00 	sts	0x0099, r1
     4ca:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
     4ce:	10 92 9b 00 	sts	0x009B, r1
     4d2:	10 92 9a 00 	sts	0x009A, r1
     4d6:	f4 ce       	rjmp	.-536    	; 0x2c0 <main+0x102>
			pwm_left_desired_to_control = pwm_left_working;
			pwm_right_desired_to_control = pwm_right_working;

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;	// 4 samples taken for measuring velocity
     4d8:	80 91 df 03 	lds	r24, 0x03DF
     4dc:	90 91 e0 03 	lds	r25, 0x03E0
     4e0:	96 95       	lsr	r25
     4e2:	87 95       	ror	r24
     4e4:	96 95       	lsr	r25
     4e6:	87 95       	ror	r24
     4e8:	90 93 e4 03 	sts	0x03E4, r25
     4ec:	80 93 e3 03 	sts	0x03E3, r24
				compute_left_vel = 0;
     4f0:	10 92 07 02 	sts	0x0207, r1
				left_vel_sum = 0;
     4f4:	10 92 e0 03 	sts	0x03E0, r1
     4f8:	10 92 df 03 	sts	0x03DF, r1

				start_horizontal_speed_control_left(&pwm_left_working);
     4fc:	89 ef       	ldi	r24, 0xF9	; 249
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <start_horizontal_speed_control_left>

				pwm_left = pwm_left_working;
     504:	80 91 f9 03 	lds	r24, 0x03F9
     508:	90 91 fa 03 	lds	r25, 0x03FA
     50c:	90 93 ea 03 	sts	0x03EA, r25
     510:	80 93 e9 03 	sts	0x03E9, r24

				if(pwm_left > 0) {
     514:	18 16       	cp	r1, r24
     516:	19 06       	cpc	r1, r25
     518:	0c f0       	brlt	.+2      	; 0x51c <main+0x35e>
     51a:	48 c0       	rjmp	.+144    	; 0x5ac <main+0x3ee>
					OCR4A = (unsigned int)pwm_left;
     51c:	90 93 a9 00 	sts	0x00A9, r25
     520:	80 93 a8 00 	sts	0x00A8, r24
     524:	8e cf       	rjmp	.-228    	; 0x442 <main+0x284>
		} else if(currentSelector == 1) {		// only horizontal speed control

			pwm_left_working = pwm_left_desired;
			pwm_right_working = pwm_right_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     526:	89 ef       	ldi	r24, 0xF9	; 249
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	67 ef       	ldi	r22, 0xF7	; 247
     52c:	73 e0       	ldi	r23, 0x03	; 3
     52e:	0e 94 0a 18 	call	0x3014	; 0x3014 <obstacleAvoidance>
     532:	20 91 f9 03 	lds	r18, 0x03F9
     536:	30 91 fa 03 	lds	r19, 0x03FA
     53a:	80 91 f7 03 	lds	r24, 0x03F7
     53e:	90 91 f8 03 	lds	r25, 0x03F8
     542:	72 cf       	rjmp	.-284    	; 0x428 <main+0x26a>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
     544:	90 95       	com	r25
     546:	81 95       	neg	r24
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	90 93 ab 00 	sts	0x00AB, r25
     54e:	80 93 aa 00 	sts	0x00AA, r24
     552:	3e ce       	rjmp	.-900    	; 0x1d0 <main+0x12>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
     554:	90 95       	com	r25
     556:	81 95       	neg	r24
     558:	9f 4f       	sbci	r25, 0xFF	; 255
     55a:	90 93 9b 00 	sts	0x009B, r25
     55e:	80 93 9a 00 	sts	0x009A, r24
     562:	ae ce       	rjmp	.-676    	; 0x2c0 <main+0x102>
		} else if(currentSelector == 2) {		// both horizontal and vertical speed control

			pwm_left_working = pwm_left_desired;
			pwm_right_working = pwm_right_desired;
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance(&pwm_left_working, &pwm_right_working);
     564:	89 ef       	ldi	r24, 0xF9	; 249
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	67 ef       	ldi	r22, 0xF7	; 247
     56a:	73 e0       	ldi	r23, 0x03	; 3
     56c:	0e 94 0a 18 	call	0x3014	; 0x3014 <obstacleAvoidance>
     570:	20 91 f9 03 	lds	r18, 0x03F9
     574:	30 91 fa 03 	lds	r19, 0x03FA
     578:	80 91 f7 03 	lds	r24, 0x03F7
     57c:	90 91 f8 03 	lds	r25, 0x03F8
     580:	c7 ce       	rjmp	.-626    	; 0x310 <main+0x152>
				compute_right_vel = 0;
				right_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
     582:	87 ef       	ldi	r24, 0xF7	; 247
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <start_horizontal_speed_control_right>
     58a:	19 cf       	rjmp	.-462    	; 0x3be <main+0x200>
				compute_left_vel = 0;
				left_vel_sum = 0;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
     58c:	89 ef       	ldi	r24, 0xF9	; 249
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <start_horizontal_speed_control_left>
     594:	e4 ce       	rjmp	.-568    	; 0x35e <main+0x1a0>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	e1 f4       	brne	.+56     	; 0x5d2 <main+0x414>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     59a:	10 92 a9 00 	sts	0x00A9, r1
     59e:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5a2:	10 92 ab 00 	sts	0x00AB, r1
     5a6:	10 92 aa 00 	sts	0x00AA, r1
     5aa:	e9 ce       	rjmp	.-558    	; 0x37e <main+0x1c0>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	c9 f4       	brne	.+50     	; 0x5e2 <main+0x424>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
     5b0:	10 92 a9 00 	sts	0x00A9, r1
     5b4:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
     5b8:	10 92 ab 00 	sts	0x00AB, r1
     5bc:	10 92 aa 00 	sts	0x00AA, r1
     5c0:	40 cf       	rjmp	.-384    	; 0x442 <main+0x284>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
     5c2:	90 95       	com	r25
     5c4:	81 95       	neg	r24
     5c6:	9f 4f       	sbci	r25, 0xFF	; 255
     5c8:	90 93 9b 00 	sts	0x009B, r25
     5cc:	80 93 9a 00 	sts	0x009A, r24
     5d0:	ff cd       	rjmp	.-1026   	; 0x1d0 <main+0x12>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5d2:	90 95       	com	r25
     5d4:	81 95       	neg	r24
     5d6:	9f 4f       	sbci	r25, 0xFF	; 255
     5d8:	90 93 ab 00 	sts	0x00AB, r25
     5dc:	80 93 aa 00 	sts	0x00AA, r24
     5e0:	ce ce       	rjmp	.-612    	; 0x37e <main+0x1c0>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
     5e2:	90 95       	com	r25
     5e4:	81 95       	neg	r24
     5e6:	9f 4f       	sbci	r25, 0xFF	; 255
     5e8:	90 93 ab 00 	sts	0x00AB, r25
     5ec:	80 93 aa 00 	sts	0x00AA, r24
     5f0:	28 cf       	rjmp	.-432    	; 0x442 <main+0x284>

000005f2 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     5f2:	84 b1       	in	r24, 0x04	; 4
     5f4:	80 7f       	andi	r24, 0xF0	; 240
     5f6:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     5f8:	84 b1       	in	r24, 0x04	; 4
     5fa:	87 60       	ori	r24, 0x07	; 7
     5fc:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     5fe:	80 e5       	ldi	r24, 0x50	; 80
     600:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     602:	8d b5       	in	r24, 0x2d	; 45
     604:	81 60       	ori	r24, 0x01	; 1
     606:	8d bd       	out	0x2d, r24	; 45

}
     608:	08 95       	ret

0000060a <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     60a:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     60c:	1d bc       	out	0x2d, r1	; 45
}
     60e:	08 95       	ret

00000610 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     610:	44 23       	and	r20, r20
     612:	79 f0       	breq	.+30     	; 0x632 <SPI_ReadWrite_Block+0x22>
     614:	a8 2f       	mov	r26, r24
     616:	b9 2f       	mov	r27, r25
     618:	e6 2f       	mov	r30, r22
     61a:	f7 2f       	mov	r31, r23
     61c:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     61e:	9d 91       	ld	r25, X+
     620:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     622:	0d b4       	in	r0, 0x2d	; 45
     624:	07 fe       	sbrs	r0, 7
     626:	fd cf       	rjmp	.-6      	; 0x622 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
     628:	9e b5       	in	r25, 0x2e	; 46
     62a:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	84 17       	cp	r24, r20
     630:	b0 f3       	brcs	.-20     	; 0x61e <SPI_ReadWrite_Block+0xe>
     632:	08 95       	ret

00000634 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     634:	66 23       	and	r22, r22
     636:	59 f0       	breq	.+22     	; 0x64e <SPI_Write_Block+0x1a>
     638:	e8 2f       	mov	r30, r24
     63a:	f9 2f       	mov	r31, r25
     63c:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
     63e:	91 91       	ld	r25, Z+
     640:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
     642:	0d b4       	in	r0, 0x2d	; 45
     644:	07 fe       	sbrs	r0, 7
     646:	fd cf       	rjmp	.-6      	; 0x642 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     648:	8f 5f       	subi	r24, 0xFF	; 255
     64a:	86 17       	cp	r24, r22
     64c:	c0 f3       	brcs	.-16     	; 0x63e <SPI_Write_Block+0xa>
     64e:	08 95       	ret

00000650 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     650:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     652:	0d b4       	in	r0, 0x2d	; 45
     654:	07 fe       	sbrs	r0, 7
     656:	fd cf       	rjmp	.-6      	; 0x652 <SPI_Write_Byte+0x2>
    return SPDR;
     658:	8e b5       	in	r24, 0x2e	; 46
}
     65a:	08 95       	ret

0000065c <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	00 d0       	rcall	.+0      	; 0x666 <mirf_config+0xa>
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     66a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     66c:	80 e2       	ldi	r24, 0x20	; 32
     66e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     672:	8d e0       	ldi	r24, 0x0D	; 13
     674:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     678:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     67a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     67c:	83 e2       	ldi	r24, 0x23	; 35
     67e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     688:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
     68a:	8c e0       	ldi	r24, 0x0C	; 12
     68c:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
     68e:	85 e8       	ldi	r24, 0x85	; 133
     690:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     692:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     694:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     696:	80 e3       	ldi	r24, 0x30	; 48
     698:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     69c:	8e 01       	movw	r16, r28
     69e:	0f 5f       	subi	r16, 0xFF	; 255
     6a0:	1f 4f       	sbci	r17, 0xFF	; 255
     6a2:	c8 01       	movw	r24, r16
     6a4:	63 e0       	ldi	r22, 0x03	; 3
     6a6:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Write_Block>
    mirf_CSN_hi;
     6aa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     6ac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6ae:	8a e2       	ldi	r24, 0x2A	; 42
     6b0:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     6b4:	c8 01       	movw	r24, r16
     6b6:	63 e0       	ldi	r22, 0x03	; 3
     6b8:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Write_Block>
    mirf_CSN_hi;
     6bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6c0:	81 e2       	ldi	r24, 0x21	; 33
     6c2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     6cc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6d0:	82 e2       	ldi	r24, 0x22	; 34
     6d2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     6dc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6e0:	84 e2       	ldi	r24, 0x24	; 36
     6e2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6e6:	82 e1       	ldi	r24, 0x12	; 18
     6e8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     6ec:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6f0:	85 e2       	ldi	r24, 0x25	; 37
     6f2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6f6:	88 e2       	ldi	r24, 0x28	; 40
     6f8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     6fc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     700:	81 e3       	ldi	r24, 0x31	; 49
     702:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     706:	8d e0       	ldi	r24, 0x0D	; 13
     708:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     70c:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     70e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     710:	80 e5       	ldi	r24, 0x50	; 80
     712:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     716:	83 e7       	ldi	r24, 0x73	; 115
     718:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     71c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     71e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     720:	8c e3       	ldi	r24, 0x3C	; 60
     722:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     72c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     72e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     730:	8d e3       	ldi	r24, 0x3D	; 61
     732:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     736:	86 e0       	ldi	r24, 0x06	; 6
     738:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     73c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     73e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     740:	80 e2       	ldi	r24, 0x20	; 32
     742:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     746:	8f e0       	ldi	r24, 0x0F	; 15
     748:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     74c:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     75e:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     760:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     762:	0e 94 2e 03 	call	0x65c	; 0x65c <mirf_config>
}
     766:	08 95       	ret

00000768 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     76e:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     770:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     772:	8a e2       	ldi	r24, 0x2A	; 42
     774:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     778:	ce 01       	movw	r24, r28
     77a:	65 e0       	ldi	r22, 0x05	; 5
     77c:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Write_Block>
    mirf_CSN_hi;
     780:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     782:	2c 9a       	sbi	0x05, 4	; 5
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     790:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     792:	80 e3       	ldi	r24, 0x30	; 48
     794:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     798:	ce 01       	movw	r24, r28
     79a:	65 e0       	ldi	r22, 0x05	; 5
     79c:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Write_Block>
    mirf_CSN_hi;
     7a0:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     7a8:	80 91 23 04 	lds	r24, 0x0423
     7ac:	88 23       	and	r24, r24
     7ae:	11 f0       	breq	.+4      	; 0x7b4 <mirf_data_ready+0xc>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     7b2:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     7b4:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     7bc:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     7be:	80 74       	andi	r24, 0x40	; 64
     7c0:	08 95       	ret

000007c2 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	0f 92       	push	r0
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     7cc:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     7ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     7d0:	87 e1       	ldi	r24, 0x17	; 23
     7d2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	cb 01       	movw	r24, r22
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	0e 94 08 03 	call	0x610	; 0x610 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     7e4:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
}
     7e8:	81 70       	andi	r24, 0x01	; 1
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     7f2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     7f4:	82 ee       	ldi	r24, 0xE2	; 226
     7f6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     7fa:	28 9a       	sbi	0x05, 0	; 5

}
     7fc:	08 95       	ret

000007fe <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     804:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     806:	81 e6       	ldi	r24, 0x61	; 97
     808:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     80c:	ce 01       	movw	r24, r28
     80e:	be 01       	movw	r22, r28
     810:	4d e0       	ldi	r20, 0x0D	; 13
     812:	0e 94 08 03 	call	0x610	; 0x610 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     816:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     818:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     81a:	87 e2       	ldi	r24, 0x27	; 39
     81c:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     820:	80 e4       	ldi	r24, 0x40	; 64
     822:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     826:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     82e:	df 93       	push	r29
     830:	cf 93       	push	r28
     832:	0f 92       	push	r0
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     838:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     83a:	8f 71       	andi	r24, 0x1F	; 31
     83c:	80 62       	ori	r24, 0x20	; 32
     83e:	69 83       	std	Y+1, r22	; 0x01
     840:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	86 2f       	mov	r24, r22
     848:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     84c:	28 9a       	sbi	0x05, 0	; 5
}
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	08 95       	ret

00000856 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	0f 92       	push	r0
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     866:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     868:	8f 71       	andi	r24, 0x1F	; 31
     86a:	49 83       	std	Y+1, r20	; 0x01
     86c:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     870:	c8 01       	movw	r24, r16
     872:	b8 01       	movw	r22, r16
     874:	49 81       	ldd	r20, Y+1	; 0x01
     876:	0e 94 08 03 	call	0x610	; 0x610 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     87a:	28 9a       	sbi	0x05, 0	; 5
}
     87c:	0f 90       	pop	r0
     87e:	cf 91       	pop	r28
     880:	df 91       	pop	r29
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	0f 92       	push	r0
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     898:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     89a:	8f 71       	andi	r24, 0x1F	; 31
     89c:	80 62       	ori	r24, 0x20	; 32
     89e:	49 83       	std	Y+1, r20	; 0x01
     8a0:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     8a4:	c8 01       	movw	r24, r16
     8a6:	49 81       	ldd	r20, Y+1	; 0x01
     8a8:	64 2f       	mov	r22, r20
     8aa:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Write_Block>
    mirf_CSN_hi;
     8ae:	28 9a       	sbi	0x05, 0	; 5
}
     8b0:	0f 90       	pop	r0
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	0f 92       	push	r0
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     8cc:	80 91 23 04 	lds	r24, 0x0423
     8d0:	88 23       	and	r24, r24
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <mirf_send+0x10>

    mirf_CE_lo;
     8d4:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 23 04 	sts	0x0423, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     8dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8de:	80 e2       	ldi	r24, 0x20	; 32
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     8e6:	8a e4       	ldi	r24, 0x4A	; 74
     8e8:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     8ec:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     8ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     8f0:	81 ee       	ldi	r24, 0xE1	; 225
     8f2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     8f6:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     8f8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     8fa:	80 ea       	ldi	r24, 0xA0	; 160
     8fc:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     900:	c8 01       	movw	r24, r16
     902:	69 81       	ldd	r22, Y+1	; 0x01
     904:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     908:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     90a:	2c 9a       	sbi	0x05, 4	; 5
}
     90c:	0f 90       	pop	r0
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	0f 92       	push	r0
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	18 2f       	mov	r17, r24
     92c:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     92e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     930:	81 ee       	ldi	r24, 0xE1	; 225
     932:	99 83       	std	Y+1, r25	; 0x01
     934:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     938:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     93a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     93c:	88 ea       	ldi	r24, 0xA8	; 168
     93e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     942:	99 81       	ldd	r25, Y+1	; 0x01
     944:	00 23       	and	r16, r16
     946:	61 f0       	breq	.+24     	; 0x960 <writeAckPayload+0x48>
     948:	61 2f       	mov	r22, r17
     94a:	79 2f       	mov	r23, r25
     94c:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     94e:	f7 01       	movw	r30, r14
     950:	81 91       	ld	r24, Z+
     952:	7f 01       	movw	r14, r30
     954:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     958:	8e 2d       	mov	r24, r14
     95a:	81 1b       	sub	r24, r17
     95c:	80 17       	cp	r24, r16
     95e:	b8 f3       	brcs	.-18     	; 0x94e <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     960:	28 9a       	sbi	0x05, 0	; 5


}
     962:	0f 90       	pop	r0
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	08 95       	ret

00000972 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     972:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     974:	81 ee       	ldi	r24, 0xE1	; 225
     976:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     97a:	28 9a       	sbi	0x05, 0	; 5

}
     97c:	08 95       	ret

0000097e <handleRFCommands>:

void handleRFCommands() {
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     984:	80 91 23 04 	lds	r24, 0x0423
     988:	88 23       	and	r24, r24
     98a:	21 f0       	breq	.+8      	; 0x994 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     994:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     99c:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     99e:	86 ff       	sbrs	r24, 6
     9a0:	f5 cf       	rjmp	.-22     	; 0x98c <handleRFCommands+0xe>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9a2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9a4:	87 e2       	ldi	r24, 0x27	; 39
     9a6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9aa:	80 e7       	ldi	r24, 0x70	; 112
     9ac:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     9b0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     9b2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     9b4:	81 e6       	ldi	r24, 0x61	; 97
     9b6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	94 e0       	ldi	r25, 0x04	; 4
     9be:	bc 01       	movw	r22, r24
     9c0:	4d e0       	ldi	r20, 0x0D	; 13
     9c2:	0e 94 08 03 	call	0x610	; 0x610 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     9c6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9c8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9ca:	87 e2       	ldi	r24, 0x27	; 39
     9cc:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9d0:	80 e4       	ldi	r24, 0x40	; 64
     9d2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     9d6:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     9d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     9da:	82 ee       	ldi	r24, 0xE2	; 226
     9dc:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     9e0:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     9e2:	60 91 40 04 	lds	r22, 0x0440
     9e6:	66 23       	and	r22, r22
     9e8:	09 f4       	brne	.+2      	; 0x9ec <handleRFCommands+0x6e>
     9ea:	b8 c1       	rjmp	.+880    	; 0xd5c <handleRFCommands+0x3de>
     9ec:	50 91 44 04 	lds	r21, 0x0444
     9f0:	40 91 45 04 	lds	r20, 0x0445
     9f4:	e0 91 41 04 	lds	r30, 0x0441
     9f8:	70 91 42 04 	lds	r23, 0x0442

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     9fc:	25 2f       	mov	r18, r21
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	2f 77       	andi	r18, 0x7F	; 127
     a02:	30 70       	andi	r19, 0x00	; 0
     a04:	30 93 fe 03 	sts	0x03FE, r19
     a08:	20 93 fd 03 	sts	0x03FD, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     a0c:	84 2f       	mov	r24, r20
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	90 93 fc 03 	sts	0x03FC, r25
     a18:	80 93 fb 03 	sts	0x03FB, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     a1c:	57 fd       	sbrc	r21, 7
     a1e:	a6 c2       	rjmp	.+1356   	; 0xf6c <handleRFCommands+0x5ee>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	30 95       	com	r19
     a2a:	21 95       	neg	r18
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	30 93 ec 03 	sts	0x03EC, r19
     a32:	20 93 eb 03 	sts	0x03EB, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     a36:	47 fd       	sbrc	r20, 7
     a38:	a3 c2       	rjmp	.+1350   	; 0xf80 <handleRFCommands+0x602>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	90 95       	com	r25
     a44:	81 95       	neg	r24
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	90 93 ee 03 	sts	0x03EE, r25
     a4c:	80 93 ed 03 	sts	0x03ED, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     a50:	42 e0       	ldi	r20, 0x02	; 2
     a52:	21 30       	cpi	r18, 0x01	; 1
     a54:	34 07       	cpc	r19, r20
     a56:	44 f0       	brlt	.+16     	; 0xa68 <handleRFCommands+0xea>
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	52 e0       	ldi	r21, 0x02	; 2
     a5c:	50 93 ec 03 	sts	0x03EC, r21
     a60:	40 93 eb 03 	sts	0x03EB, r20
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     a68:	42 e0       	ldi	r20, 0x02	; 2
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	94 07       	cpc	r25, r20
     a6e:	34 f0       	brlt	.+12     	; 0xa7c <handleRFCommands+0xfe>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	90 93 ee 03 	sts	0x03EE, r25
     a78:	80 93 ed 03 	sts	0x03ED, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     a7c:	4e ef       	ldi	r20, 0xFE	; 254
     a7e:	20 30       	cpi	r18, 0x00	; 0
     a80:	34 07       	cpc	r19, r20
     a82:	34 f4       	brge	.+12     	; 0xa90 <handleRFCommands+0x112>
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	5e ef       	ldi	r21, 0xFE	; 254
     a88:	50 93 ec 03 	sts	0x03EC, r21
     a8c:	40 93 eb 03 	sts	0x03EB, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     a90:	2e ef       	ldi	r18, 0xFE	; 254
     a92:	80 30       	cpi	r24, 0x00	; 0
     a94:	92 07       	cpc	r25, r18
     a96:	34 f4       	brge	.+12     	; 0xaa4 <handleRFCommands+0x126>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	9e ef       	ldi	r25, 0xFE	; 254
     a9c:	90 93 ee 03 	sts	0x03EE, r25
     aa0:	80 93 ed 03 	sts	0x03ED, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     aa4:	26 2f       	mov	r18, r22
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	30 93 39 04 	sts	0x0439, r19
     aac:	20 93 38 04 	sts	0x0438, r18
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	f0 93 3b 04 	sts	0x043B, r31
     ab6:	e0 93 3a 04 	sts	0x043A, r30
     aba:	c7 2f       	mov	r28, r23
     abc:	d0 e0       	ldi	r29, 0x00	; 0
     abe:	d0 93 3d 04 	sts	0x043D, r29
     ac2:	c0 93 3c 04 	sts	0x043C, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     ac6:	92 2f       	mov	r25, r18
     ac8:	88 27       	eor	r24, r24
     aca:	82 1b       	sub	r24, r18
     acc:	93 0b       	sbc	r25, r19
     ace:	24 e6       	ldi	r18, 0x64	; 100
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	b9 01       	movw	r22, r18
     ad4:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodhi4>
     ad8:	16 2f       	mov	r17, r22
     ada:	10 95       	com	r17
     adc:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     ae0:	5e 2f       	mov	r21, r30
     ae2:	44 27       	eor	r20, r20
     ae4:	4e 1b       	sub	r20, r30
     ae6:	5f 0b       	sbc	r21, r31
     ae8:	ca 01       	movw	r24, r20
     aea:	b9 01       	movw	r22, r18
     aec:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodhi4>
     af0:	60 95       	com	r22
     af2:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     af6:	5c 2f       	mov	r21, r28
     af8:	44 27       	eor	r20, r20
     afa:	4c 1b       	sub	r20, r28
     afc:	5d 0b       	sbc	r21, r29
     afe:	ca 01       	movw	r24, r20
     b00:	b9 01       	movw	r22, r18
     b02:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodhi4>
     b06:	60 95       	com	r22
     b08:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     b0c:	81 2f       	mov	r24, r17
     b0e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <updateRedLed>
		updateGreenLed(pwm_green);
     b12:	80 91 0d 02 	lds	r24, 0x020D
     b16:	0e 94 0f 1a 	call	0x341e	; 0x341e <updateGreenLed>
		updateBlueLed(pwm_blue);
     b1a:	80 91 0e 02 	lds	r24, 0x020E
     b1e:	0e 94 23 1a 	call	0x3446	; 0x3446 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     b22:	80 91 43 04 	lds	r24, 0x0443
     b26:	80 ff       	sbrs	r24, 0
     b28:	25 c1       	rjmp	.+586    	; 0xd74 <handleRFCommands+0x3f6>
			LED_IR1_LOW;
     b2a:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     b2c:	81 ff       	sbrs	r24, 1
     b2e:	25 c1       	rjmp	.+586    	; 0xd7a <handleRFCommands+0x3fc>
			LED_IR2_LOW;
     b30:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     b32:	98 2f       	mov	r25, r24
     b34:	82 ff       	sbrs	r24, 2
     b36:	25 c1       	rjmp	.+586    	; 0xd82 <handleRFCommands+0x404>
			irEnabled = 1;
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	20 93 11 02 	sts	0x0211, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     b3e:	84 fd       	sbrc	r24, 4
     b40:	24 c1       	rjmp	.+584    	; 0xd8a <handleRFCommands+0x40c>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     b42:	86 ff       	sbrs	r24, 6
     b44:	29 c1       	rjmp	.+594    	; 0xd98 <handleRFCommands+0x41a>
			obstacleAvoidanceEnabled = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	80 93 20 04 	sts	0x0420, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     b4c:	97 fd       	sbrc	r25, 7
     b4e:	28 c1       	rjmp	.+592    	; 0xda0 <handleRFCommands+0x422>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     b50:	10 92 21 04 	sts	0x0421, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     b54:	80 91 46 04 	lds	r24, 0x0446
     b58:	80 ff       	sbrs	r24, 0
     b5a:	29 c1       	rjmp	.+594    	; 0xdae <handleRFCommands+0x430>
				GRREEN_LED0_ON;
     b5c:	80 91 0b 01 	lds	r24, 0x010B
     b60:	8e 7f       	andi	r24, 0xFE	; 254
     b62:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     b66:	80 91 46 04 	lds	r24, 0x0446
     b6a:	81 ff       	sbrs	r24, 1
     b6c:	29 c1       	rjmp	.+594    	; 0xdc0 <handleRFCommands+0x442>
				GRREEN_LED1_ON;
     b6e:	80 91 0b 01 	lds	r24, 0x010B
     b72:	8d 7f       	andi	r24, 0xFD	; 253
     b74:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     b78:	80 91 46 04 	lds	r24, 0x0446
     b7c:	82 ff       	sbrs	r24, 2
     b7e:	29 c1       	rjmp	.+594    	; 0xdd2 <handleRFCommands+0x454>
				GRREEN_LED2_ON;
     b80:	80 91 0b 01 	lds	r24, 0x010B
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     b8a:	80 91 46 04 	lds	r24, 0x0446
     b8e:	83 ff       	sbrs	r24, 3
     b90:	29 c1       	rjmp	.+594    	; 0xde4 <handleRFCommands+0x466>
				GRREEN_LED3_ON;
     b92:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GRREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     b94:	80 91 46 04 	lds	r24, 0x0446
     b98:	84 ff       	sbrs	r24, 4
     b9a:	29 c1       	rjmp	.+594    	; 0xdee <handleRFCommands+0x470>
				GRREEN_LED4_ON;
     b9c:	80 91 0b 01 	lds	r24, 0x010B
     ba0:	8f 7e       	andi	r24, 0xEF	; 239
     ba2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     ba6:	80 91 46 04 	lds	r24, 0x0446
     baa:	85 ff       	sbrs	r24, 5
     bac:	29 c1       	rjmp	.+594    	; 0xe00 <handleRFCommands+0x482>
				GRREEN_LED5_ON;
     bae:	80 91 0b 01 	lds	r24, 0x010B
     bb2:	8f 7d       	andi	r24, 0xDF	; 223
     bb4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     bb8:	80 91 46 04 	lds	r24, 0x0446
     bbc:	86 ff       	sbrs	r24, 6
     bbe:	29 c1       	rjmp	.+594    	; 0xe12 <handleRFCommands+0x494>
				GRREEN_LED6_ON;
     bc0:	80 91 0b 01 	lds	r24, 0x010B
     bc4:	8f 7b       	andi	r24, 0xBF	; 191
     bc6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GRREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     bca:	80 91 46 04 	lds	r24, 0x0446
     bce:	87 fd       	sbrc	r24, 7
     bd0:	29 c1       	rjmp	.+594    	; 0xe24 <handleRFCommands+0x4a6>
				GRREEN_LED7_ON;
			} else {
				GRREEN_LED7_OFF;
     bd2:	80 91 0b 01 	lds	r24, 0x010B
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     bdc:	80 91 0b 02 	lds	r24, 0x020B
     be0:	80 93 28 04 	sts	0x0428, r24

		switch(packetId) {
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	09 f4       	brne	.+2      	; 0xbea <handleRFCommands+0x26c>
     be8:	29 c1       	rjmp	.+594    	; 0xe3c <handleRFCommands+0x4be>
     bea:	85 30       	cpi	r24, 0x05	; 5
     bec:	08 f0       	brcs	.+2      	; 0xbf0 <handleRFCommands+0x272>
     bee:	66 c1       	rjmp	.+716    	; 0xebc <handleRFCommands+0x53e>
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <handleRFCommands+0x278>
     bf4:	65 c0       	rjmp	.+202    	; 0xcc0 <handleRFCommands+0x342>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     bf6:	90 91 5b 03 	lds	r25, 0x035B
     bfa:	80 91 5c 03 	lds	r24, 0x035C
     bfe:	90 93 29 04 	sts	0x0429, r25
				ackPayload[2] = proximityResult[0]>>8;
     c02:	80 93 2a 04 	sts	0x042A, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     c06:	90 91 5d 03 	lds	r25, 0x035D
     c0a:	80 91 5e 03 	lds	r24, 0x035E
     c0e:	90 93 2b 04 	sts	0x042B, r25
				ackPayload[4] = proximityResult[1]>>8;
     c12:	80 93 2c 04 	sts	0x042C, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     c16:	90 91 5f 03 	lds	r25, 0x035F
     c1a:	80 91 60 03 	lds	r24, 0x0360
     c1e:	90 93 2d 04 	sts	0x042D, r25
				ackPayload[6] = proximityResult[2]>>8;
     c22:	80 93 2e 04 	sts	0x042E, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     c26:	90 91 61 03 	lds	r25, 0x0361
     c2a:	80 91 62 03 	lds	r24, 0x0362
     c2e:	90 93 2f 04 	sts	0x042F, r25
				ackPayload[8] = proximityResult[3]>>8;
     c32:	80 93 30 04 	sts	0x0430, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     c36:	90 91 65 03 	lds	r25, 0x0365
     c3a:	80 91 66 03 	lds	r24, 0x0366
     c3e:	90 93 31 04 	sts	0x0431, r25
				ackPayload[10] = proximityResult[5]>>8;
     c42:	80 93 32 04 	sts	0x0432, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     c46:	90 91 67 03 	lds	r25, 0x0367
     c4a:	80 91 68 03 	lds	r24, 0x0368
     c4e:	90 93 33 04 	sts	0x0433, r25
				ackPayload[12] = proximityResult[6]>>8;
     c52:	80 93 34 04 	sts	0x0434, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     c56:	90 91 69 03 	lds	r25, 0x0369
     c5a:	80 91 6a 03 	lds	r24, 0x036A
     c5e:	90 93 35 04 	sts	0x0435, r25
				ackPayload[14] = proximityResult[7]>>8;
     c62:	80 93 36 04 	sts	0x0436, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     c66:	30 91 03 01 	lds	r19, 0x0103
     c6a:	80 91 03 01 	lds	r24, 0x0103
     c6e:	20 91 03 01 	lds	r18, 0x0103
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	80 72       	andi	r24, 0x20	; 32
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	95 95       	asr	r25
     c7e:	87 95       	ror	r24
     c80:	95 95       	asr	r25
     c82:	87 95       	ror	r24
     c84:	95 95       	asr	r25
     c86:	87 95       	ror	r24
     c88:	95 95       	asr	r25
     c8a:	87 95       	ror	r24
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	22 1f       	adc	r18, r18
     c92:	22 27       	eor	r18, r18
     c94:	22 1f       	adc	r18, r18
     c96:	22 0f       	add	r18, r18
     c98:	22 0f       	add	r18, r18
     c9a:	28 2b       	or	r18, r24
     c9c:	83 2f       	mov	r24, r19
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	80 71       	andi	r24, 0x10	; 16
     ca2:	90 70       	andi	r25, 0x00	; 0
     ca4:	95 95       	asr	r25
     ca6:	87 95       	ror	r24
     ca8:	95 95       	asr	r25
     caa:	87 95       	ror	r24
     cac:	95 95       	asr	r25
     cae:	87 95       	ror	r24
     cb0:	95 95       	asr	r25
     cb2:	87 95       	ror	r24
     cb4:	28 2b       	or	r18, r24
     cb6:	20 93 37 04 	sts	0x0437, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     cc0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     cc2:	81 ee       	ldi	r24, 0xE1	; 225
     cc4:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
    mirf_CSN_hi;
     cc8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     cca:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     ccc:	88 ea       	ldi	r24, 0xA8	; 168
     cce:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     cd2:	80 91 28 04 	lds	r24, 0x0428
     cd6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     cda:	80 91 29 04 	lds	r24, 0x0429
     cde:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     ce2:	80 91 2a 04 	lds	r24, 0x042A
     ce6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     cea:	80 91 2b 04 	lds	r24, 0x042B
     cee:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     cf2:	80 91 2c 04 	lds	r24, 0x042C
     cf6:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     cfa:	80 91 2d 04 	lds	r24, 0x042D
     cfe:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d02:	80 91 2e 04 	lds	r24, 0x042E
     d06:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d0a:	80 91 2f 04 	lds	r24, 0x042F
     d0e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d12:	80 91 30 04 	lds	r24, 0x0430
     d16:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d1a:	80 91 31 04 	lds	r24, 0x0431
     d1e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d22:	80 91 32 04 	lds	r24, 0x0432
     d26:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d2a:	80 91 33 04 	lds	r24, 0x0433
     d2e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d32:	80 91 34 04 	lds	r24, 0x0434
     d36:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d3a:	80 91 35 04 	lds	r24, 0x0435
     d3e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d42:	80 91 36 04 	lds	r24, 0x0436
     d46:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
     d4a:	80 91 37 04 	lds	r24, 0x0437
     d4e:	0e 94 28 03 	call	0x650	; 0x650 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     d52:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     d5c:	e0 91 41 04 	lds	r30, 0x0441
     d60:	ee 23       	and	r30, r30
     d62:	09 f4       	brne	.+2      	; 0xd66 <handleRFCommands+0x3e8>
     d64:	16 c1       	rjmp	.+556    	; 0xf92 <handleRFCommands+0x614>
     d66:	50 91 44 04 	lds	r21, 0x0444
     d6a:	40 91 45 04 	lds	r20, 0x0445
     d6e:	70 91 42 04 	lds	r23, 0x0442
     d72:	44 ce       	rjmp	.-888    	; 0x9fc <handleRFCommands+0x7e>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
     d74:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     d76:	81 fd       	sbrc	r24, 1
     d78:	db ce       	rjmp	.-586    	; 0xb30 <handleRFCommands+0x1b2>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
     d7a:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     d7c:	98 2f       	mov	r25, r24
     d7e:	82 fd       	sbrc	r24, 2
     d80:	db ce       	rjmp	.-586    	; 0xb38 <handleRFCommands+0x1ba>
			irEnabled = 1;
		} else {
			irEnabled = 0;
     d82:	10 92 11 02 	sts	0x0211, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     d86:	84 ff       	sbrs	r24, 4
     d88:	dc ce       	rjmp	.-584    	; 0xb42 <handleRFCommands+0x1c4>
			calibrateSensors();
     d8a:	0e 94 24 1c 	call	0x3848	; 0x3848 <calibrateSensors>
     d8e:	90 91 43 04 	lds	r25, 0x0443
     d92:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     d94:	86 fd       	sbrc	r24, 6
     d96:	d7 ce       	rjmp	.-594    	; 0xb46 <handleRFCommands+0x1c8>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
     d98:	10 92 20 04 	sts	0x0420, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     d9c:	97 ff       	sbrs	r25, 7
     d9e:	d8 ce       	rjmp	.-592    	; 0xb50 <handleRFCommands+0x1d2>
			cliffAvoidanceEnabled = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 21 04 	sts	0x0421, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     da6:	80 91 46 04 	lds	r24, 0x0446
     daa:	80 fd       	sbrc	r24, 0
     dac:	d7 ce       	rjmp	.-594    	; 0xb5c <handleRFCommands+0x1de>
				GRREEN_LED0_ON;
			} else {
				GRREEN_LED0_OFF;
     dae:	80 91 0b 01 	lds	r24, 0x010B
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     db8:	80 91 46 04 	lds	r24, 0x0446
     dbc:	81 fd       	sbrc	r24, 1
     dbe:	d7 ce       	rjmp	.-594    	; 0xb6e <handleRFCommands+0x1f0>
				GRREEN_LED1_ON;
			} else {
				GRREEN_LED1_OFF;
     dc0:	80 91 0b 01 	lds	r24, 0x010B
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     dca:	80 91 46 04 	lds	r24, 0x0446
     dce:	82 fd       	sbrc	r24, 2
     dd0:	d7 ce       	rjmp	.-594    	; 0xb80 <handleRFCommands+0x202>
				GRREEN_LED2_ON;
			} else {
				GRREEN_LED2_OFF;
     dd2:	80 91 0b 01 	lds	r24, 0x010B
     dd6:	84 60       	ori	r24, 0x04	; 4
     dd8:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
     ddc:	80 91 46 04 	lds	r24, 0x0446
     de0:	83 fd       	sbrc	r24, 3
     de2:	d7 ce       	rjmp	.-594    	; 0xb92 <handleRFCommands+0x214>
				GRREEN_LED3_ON;
			} else {
				GRREEN_LED3_OFF;
     de4:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
     de6:	80 91 46 04 	lds	r24, 0x0446
     dea:	84 fd       	sbrc	r24, 4
     dec:	d7 ce       	rjmp	.-594    	; 0xb9c <handleRFCommands+0x21e>
				GRREEN_LED4_ON;
			} else {
				GRREEN_LED4_OFF;
     dee:	80 91 0b 01 	lds	r24, 0x010B
     df2:	80 61       	ori	r24, 0x10	; 16
     df4:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
     df8:	80 91 46 04 	lds	r24, 0x0446
     dfc:	85 fd       	sbrc	r24, 5
     dfe:	d7 ce       	rjmp	.-594    	; 0xbae <handleRFCommands+0x230>
				GRREEN_LED5_ON;
			} else {
				GRREEN_LED5_OFF;
     e00:	80 91 0b 01 	lds	r24, 0x010B
     e04:	80 62       	ori	r24, 0x20	; 32
     e06:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
     e0a:	80 91 46 04 	lds	r24, 0x0446
     e0e:	86 fd       	sbrc	r24, 6
     e10:	d7 ce       	rjmp	.-594    	; 0xbc0 <handleRFCommands+0x242>
				GRREEN_LED6_ON;
			} else {
				GRREEN_LED6_OFF;
     e12:	80 91 0b 01 	lds	r24, 0x010B
     e16:	80 64       	ori	r24, 0x40	; 64
     e18:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
     e1c:	80 91 46 04 	lds	r24, 0x0446
     e20:	87 ff       	sbrs	r24, 7
     e22:	d7 ce       	rjmp	.-594    	; 0xbd2 <handleRFCommands+0x254>
				GRREEN_LED7_ON;
     e24:	80 91 0b 01 	lds	r24, 0x010B
     e28:	8f 77       	andi	r24, 0x7F	; 127
     e2a:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     e2e:	80 91 0b 02 	lds	r24, 0x020B
     e32:	80 93 28 04 	sts	0x0428, r24

		switch(packetId) {
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	09 f0       	breq	.+2      	; 0xe3c <handleRFCommands+0x4be>
     e3a:	d7 ce       	rjmp	.-594    	; 0xbea <handleRFCommands+0x26c>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
     e3c:	90 91 63 03 	lds	r25, 0x0363
     e40:	80 91 64 03 	lds	r24, 0x0364
     e44:	90 93 29 04 	sts	0x0429, r25
				ackPayload[2] = proximityResult[4]>>8;
     e48:	80 93 2a 04 	sts	0x042A, r24
				ackPayload[3] = proximityResult[8]&0xFF;
     e4c:	90 91 6b 03 	lds	r25, 0x036B
     e50:	80 91 6c 03 	lds	r24, 0x036C
     e54:	90 93 2b 04 	sts	0x042B, r25
				ackPayload[4] = proximityResult[8]>>8;
     e58:	80 93 2c 04 	sts	0x042C, r24
				ackPayload[5] = proximityResult[9]&0xFF;
     e5c:	90 91 6d 03 	lds	r25, 0x036D
     e60:	80 91 6e 03 	lds	r24, 0x036E
     e64:	90 93 2d 04 	sts	0x042D, r25
				ackPayload[6] = proximityResult[9]>>8;
     e68:	80 93 2e 04 	sts	0x042E, r24
				ackPayload[7] = proximityResult[10]&0xFF;
     e6c:	90 91 6f 03 	lds	r25, 0x036F
     e70:	80 91 70 03 	lds	r24, 0x0370
     e74:	90 93 2f 04 	sts	0x042F, r25
				ackPayload[8] = proximityResult[10]>>8;
     e78:	80 93 30 04 	sts	0x0430, r24
				ackPayload[9] = proximityResult[11]&0xFF;
     e7c:	90 91 71 03 	lds	r25, 0x0371
     e80:	80 91 72 03 	lds	r24, 0x0372
     e84:	90 93 31 04 	sts	0x0431, r25
				ackPayload[10] = proximityResult[11]>>8;
     e88:	80 93 32 04 	sts	0x0432, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
     e8c:	90 91 06 04 	lds	r25, 0x0406
     e90:	80 91 07 04 	lds	r24, 0x0407
     e94:	90 93 33 04 	sts	0x0433, r25
				ackPayload[12] = accX>>8;
     e98:	80 93 34 04 	sts	0x0434, r24
				ackPayload[13] = accY&0xFF;
     e9c:	90 91 08 04 	lds	r25, 0x0408
     ea0:	80 91 09 04 	lds	r24, 0x0409
     ea4:	90 93 35 04 	sts	0x0435, r25
				ackPayload[14] = accY>>8;
     ea8:	80 93 36 04 	sts	0x0436, r24
				ackPayload[15] = irCommand;
     eac:	80 91 01 04 	lds	r24, 0x0401
     eb0:	80 93 37 04 	sts	0x0437, r24
				packetId = 5;
     eb4:	85 e0       	ldi	r24, 0x05	; 5
     eb6:	80 93 0b 02 	sts	0x020B, r24
				break;
     eba:	02 cf       	rjmp	.-508    	; 0xcc0 <handleRFCommands+0x342>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
     ebc:	85 30       	cpi	r24, 0x05	; 5
     ebe:	09 f4       	brne	.+2      	; 0xec2 <handleRFCommands+0x544>
     ec0:	7d c0       	rjmp	.+250    	; 0xfbc <handleRFCommands+0x63e>
     ec2:	86 30       	cpi	r24, 0x06	; 6
     ec4:	09 f0       	breq	.+2      	; 0xec8 <handleRFCommands+0x54a>
     ec6:	fc ce       	rjmp	.-520    	; 0xcc0 <handleRFCommands+0x342>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
     ec8:	80 91 3b 03 	lds	r24, 0x033B
     ecc:	90 91 3c 03 	lds	r25, 0x033C
     ed0:	80 93 29 04 	sts	0x0429, r24
				ackPayload[2] = proximityValue[8]>>8;
     ed4:	80 91 3b 03 	lds	r24, 0x033B
     ed8:	90 91 3c 03 	lds	r25, 0x033C
     edc:	90 93 2a 04 	sts	0x042A, r25
				ackPayload[3] = proximityValue[16]&0xFF;
     ee0:	80 91 4b 03 	lds	r24, 0x034B
     ee4:	90 91 4c 03 	lds	r25, 0x034C
     ee8:	80 93 2b 04 	sts	0x042B, r24
				ackPayload[4] = proximityValue[16]>>8;
     eec:	80 91 4b 03 	lds	r24, 0x034B
     ef0:	90 91 4c 03 	lds	r25, 0x034C
     ef4:	90 93 2c 04 	sts	0x042C, r25
				ackPayload[5] = proximityValue[18]&0xFF;
     ef8:	80 91 4f 03 	lds	r24, 0x034F
     efc:	90 91 50 03 	lds	r25, 0x0350
     f00:	80 93 2d 04 	sts	0x042D, r24
				ackPayload[6] = proximityValue[18]>>8;
     f04:	80 91 4f 03 	lds	r24, 0x034F
     f08:	90 91 50 03 	lds	r25, 0x0350
     f0c:	90 93 2e 04 	sts	0x042E, r25
				ackPayload[7] = proximityValue[20]&0xFF;
     f10:	80 91 53 03 	lds	r24, 0x0353
     f14:	90 91 54 03 	lds	r25, 0x0354
     f18:	80 93 2f 04 	sts	0x042F, r24
				ackPayload[8] = proximityValue[20]>>8;
     f1c:	80 91 53 03 	lds	r24, 0x0353
     f20:	90 91 54 03 	lds	r25, 0x0354
     f24:	90 93 30 04 	sts	0x0430, r25
				ackPayload[9] = proximityValue[22]&0xFF;
     f28:	80 91 57 03 	lds	r24, 0x0357
     f2c:	90 91 58 03 	lds	r25, 0x0358
     f30:	80 93 31 04 	sts	0x0431, r24
				ackPayload[10] = proximityValue[22]>>8;
     f34:	80 91 57 03 	lds	r24, 0x0357
     f38:	90 91 58 03 	lds	r25, 0x0358
     f3c:	90 93 32 04 	sts	0x0432, r25
				ackPayload[11] = accZ&0xFF;
     f40:	90 91 0a 04 	lds	r25, 0x040A
     f44:	80 91 0b 04 	lds	r24, 0x040B
     f48:	90 93 33 04 	sts	0x0433, r25
				ackPayload[12] = accZ>>8;
     f4c:	80 93 34 04 	sts	0x0434, r24
				ackPayload[13] = batteryLevel&0xFF;
     f50:	90 91 bf 03 	lds	r25, 0x03BF
     f54:	80 91 c0 03 	lds	r24, 0x03C0
     f58:	90 93 35 04 	sts	0x0435, r25
				ackPayload[14] = batteryLevel>>8;
     f5c:	80 93 36 04 	sts	0x0436, r24
				ackPayload[15] = 0;
     f60:	10 92 37 04 	sts	0x0437, r1
				packetId = 3;
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	80 93 0b 02 	sts	0x020B, r24
				break;
     f6a:	aa ce       	rjmp	.-684    	; 0xcc0 <handleRFCommands+0x342>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	30 93 ec 03 	sts	0x03EC, r19
     f78:	20 93 eb 03 	sts	0x03EB, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     f7c:	47 ff       	sbrs	r20, 7
     f7e:	5d cd       	rjmp	.-1350   	; 0xa3a <handleRFCommands+0xbc>
			pwm_left_desired = speedl<<2;
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	90 93 ee 03 	sts	0x03EE, r25
     f8c:	80 93 ed 03 	sts	0x03ED, r24
     f90:	5f cd       	rjmp	.-1346   	; 0xa50 <handleRFCommands+0xd2>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     f92:	70 91 42 04 	lds	r23, 0x0442
     f96:	77 23       	and	r23, r23
     f98:	61 f4       	brne	.+24     	; 0xfb2 <handleRFCommands+0x634>
     f9a:	80 91 43 04 	lds	r24, 0x0443
     f9e:	88 30       	cpi	r24, 0x08	; 8
     fa0:	41 f4       	brne	.+16     	; 0xfb2 <handleRFCommands+0x634>
     fa2:	50 91 44 04 	lds	r21, 0x0444
     fa6:	55 23       	and	r21, r21
     fa8:	09 f4       	brne	.+2      	; 0xfac <handleRFCommands+0x62e>
     faa:	64 c0       	rjmp	.+200    	; 0x1074 <handleRFCommands+0x6f6>
     fac:	40 91 45 04 	lds	r20, 0x0445
     fb0:	25 cd       	rjmp	.-1462   	; 0x9fc <handleRFCommands+0x7e>
     fb2:	50 91 44 04 	lds	r21, 0x0444
     fb6:	40 91 45 04 	lds	r20, 0x0445
     fba:	20 cd       	rjmp	.-1472   	; 0x9fc <handleRFCommands+0x7e>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
     fbc:	80 91 2b 03 	lds	r24, 0x032B
     fc0:	90 91 2c 03 	lds	r25, 0x032C
     fc4:	80 93 29 04 	sts	0x0429, r24
				ackPayload[2] = proximityValue[0]>>8;
     fc8:	80 91 2b 03 	lds	r24, 0x032B
     fcc:	90 91 2c 03 	lds	r25, 0x032C
     fd0:	90 93 2a 04 	sts	0x042A, r25
				ackPayload[3] = proximityValue[2]&0xFF;
     fd4:	80 91 2f 03 	lds	r24, 0x032F
     fd8:	90 91 30 03 	lds	r25, 0x0330
     fdc:	80 93 2b 04 	sts	0x042B, r24
				ackPayload[4] = proximityValue[2]>>8;
     fe0:	80 91 2f 03 	lds	r24, 0x032F
     fe4:	90 91 30 03 	lds	r25, 0x0330
     fe8:	90 93 2c 04 	sts	0x042C, r25
				ackPayload[5] = proximityValue[4]&0xFF;
     fec:	80 91 33 03 	lds	r24, 0x0333
     ff0:	90 91 34 03 	lds	r25, 0x0334
     ff4:	80 93 2d 04 	sts	0x042D, r24
				ackPayload[6] = proximityValue[4]>>8;
     ff8:	80 91 33 03 	lds	r24, 0x0333
     ffc:	90 91 34 03 	lds	r25, 0x0334
    1000:	90 93 2e 04 	sts	0x042E, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1004:	80 91 37 03 	lds	r24, 0x0337
    1008:	90 91 38 03 	lds	r25, 0x0338
    100c:	80 93 2f 04 	sts	0x042F, r24
				ackPayload[8] = proximityValue[6]>>8;
    1010:	80 91 37 03 	lds	r24, 0x0337
    1014:	90 91 38 03 	lds	r25, 0x0338
    1018:	90 93 30 04 	sts	0x0430, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    101c:	80 91 3f 03 	lds	r24, 0x033F
    1020:	90 91 40 03 	lds	r25, 0x0340
    1024:	80 93 31 04 	sts	0x0431, r24
				ackPayload[10] = proximityValue[10]>>8;
    1028:	80 91 3f 03 	lds	r24, 0x033F
    102c:	90 91 40 03 	lds	r25, 0x0340
    1030:	90 93 32 04 	sts	0x0432, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1034:	80 91 43 03 	lds	r24, 0x0343
    1038:	90 91 44 03 	lds	r25, 0x0344
    103c:	80 93 33 04 	sts	0x0433, r24
				ackPayload[12] = proximityValue[12]>>8;
    1040:	80 91 43 03 	lds	r24, 0x0343
    1044:	90 91 44 03 	lds	r25, 0x0344
    1048:	90 93 34 04 	sts	0x0434, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    104c:	80 91 47 03 	lds	r24, 0x0347
    1050:	90 91 48 03 	lds	r25, 0x0348
    1054:	80 93 35 04 	sts	0x0435, r24
				ackPayload[14] = proximityValue[14]>>8;
    1058:	80 91 47 03 	lds	r24, 0x0347
    105c:	90 91 48 03 	lds	r25, 0x0348
    1060:	90 93 36 04 	sts	0x0436, r25
				ackPayload[15] = currentSelector;
    1064:	80 91 1d 04 	lds	r24, 0x041D
    1068:	80 93 37 04 	sts	0x0437, r24
				packetId = 6;
    106c:	86 e0       	ldi	r24, 0x06	; 6
    106e:	80 93 0b 02 	sts	0x020B, r24
				break;
    1072:	26 ce       	rjmp	.-948    	; 0xcc0 <handleRFCommands+0x342>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1074:	40 91 45 04 	lds	r20, 0x0445
    1078:	44 23       	and	r20, r20
    107a:	79 f0       	breq	.+30     	; 0x109a <handleRFCommands+0x71c>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    107c:	10 92 fe 03 	sts	0x03FE, r1
    1080:	10 92 fd 03 	sts	0x03FD, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1084:	84 2f       	mov	r24, r20
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	8f 77       	andi	r24, 0x7F	; 127
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	90 93 fc 03 	sts	0x03FC, r25
    1090:	80 93 fb 03 	sts	0x03FB, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	c3 cc       	rjmp	.-1658   	; 0xa20 <handleRFCommands+0xa2>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    109a:	8c e3       	ldi	r24, 0x3C	; 60
    109c:	0e 94 34 13 	call	0x2668	; 0x2668 <sleep>
    10a0:	50 91 44 04 	lds	r21, 0x0444
    10a4:	40 91 45 04 	lds	r20, 0x0445
    10a8:	60 91 40 04 	lds	r22, 0x0440
    10ac:	e0 91 41 04 	lds	r30, 0x0441
    10b0:	70 91 42 04 	lds	r23, 0x0442
    10b4:	a3 cc       	rjmp	.-1722   	; 0x9fc <handleRFCommands+0x7e>

000010b6 <init_ir_remote_control>:
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    10b6:	e8 e6       	ldi	r30, 0x68	; 104
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    10c0:	ec e6       	ldi	r30, 0x6C	; 108
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	80 68       	ori	r24, 0x80	; 128
    10c8:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    10ca:	e0 eb       	ldi	r30, 0xB0	; 176
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	80 83       	st	Z, r24

}
    10d4:	08 95       	ret

000010d6 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    10e2:	80 91 11 02 	lds	r24, 0x0211
    10e6:	88 23       	and	r24, r24
    10e8:	21 f1       	breq	.+72     	; 0x1132 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    10ea:	80 91 03 01 	lds	r24, 0x0103
    10ee:	86 fd       	sbrc	r24, 6
    10f0:	20 c0       	rjmp	.+64     	; 0x1132 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    10f2:	80 91 68 00 	lds	r24, 0x0068
    10f6:	8d 7f       	andi	r24, 0xFD	; 253
    10f8:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    10fc:	80 91 6c 00 	lds	r24, 0x006C
    1100:	8f 77       	andi	r24, 0x7F	; 127
    1102:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 12 02 	sts	0x0212, r24
			OCR2A = 13;									// output compare register
    110c:	8d e0       	ldi	r24, 0x0D	; 13
    110e:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1112:	80 91 b1 00 	lds	r24, 0x00B1
    1116:	86 60       	ori	r24, 0x06	; 6
    1118:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    111c:	80 91 70 00 	lds	r24, 0x0070
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1126:	10 92 22 03 	sts	0x0322, r1
    112a:	10 92 23 03 	sts	0x0323, r1
    112e:	10 92 24 03 	sts	0x0324, r1

		}

	}
	
}
    1132:	8f 91       	pop	r24
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	2f 93       	push	r18
    114a:	3f 93       	push	r19
    114c:	4f 93       	push	r20
    114e:	5f 93       	push	r21
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1154:	80 91 b1 00 	lds	r24, 0x00B1
    1158:	88 7f       	andi	r24, 0xF8	; 248
    115a:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    115e:	80 91 12 02 	lds	r24, 0x0212
    1162:	88 23       	and	r24, r24
    1164:	a9 f0       	breq	.+42     	; 0x1190 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1166:	80 91 03 01 	lds	r24, 0x0103
    116a:	86 ff       	sbrs	r24, 6
    116c:	65 c0       	rjmp	.+202    	; 0x1238 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    116e:	80 91 68 00 	lds	r24, 0x0068
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1178:	80 91 6c 00 	lds	r24, 0x006C
    117c:	80 68       	ori	r24, 0x80	; 128
    117e:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	90 93 02 02 	sts	0x0202, r25
    118a:	80 93 01 02 	sts	0x0201, r24
    118e:	49 c0       	rjmp	.+146    	; 0x1222 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1190:	80 91 01 02 	lds	r24, 0x0201
    1194:	90 91 02 02 	lds	r25, 0x0202
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	92 07       	cpc	r25, r18
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__vector_13+0x64>
    11a0:	63 c0       	rjmp	.+198    	; 0x1268 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <__vector_13+0x6c>
    11a8:	98 c0       	rjmp	.+304    	; 0x12da <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    11aa:	9c 01       	movw	r18, r24
    11ac:	22 50       	subi	r18, 0x02	; 2
    11ae:	30 40       	sbci	r19, 0x00	; 0
    11b0:	25 30       	cpi	r18, 0x05	; 5
    11b2:	31 05       	cpc	r19, r1
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <__vector_13+0x7a>
    11b6:	67 c0       	rjmp	.+206    	; 0x1286 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    11b8:	9c 01       	movw	r18, r24
    11ba:	27 50       	subi	r18, 0x07	; 7
    11bc:	30 40       	sbci	r19, 0x00	; 0
    11be:	26 30       	cpi	r18, 0x06	; 6
    11c0:	31 05       	cpc	r19, r1
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <__vector_13+0x88>
    11c4:	bd c0       	rjmp	.+378    	; 0x1340 <__vector_13+0x202>

				OCR2A = 54;
    11c6:	26 e3       	ldi	r18, 0x36	; 54
    11c8:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    11cc:	20 91 b1 00 	lds	r18, 0x00B1
    11d0:	26 60       	ori	r18, 0x06	; 6
    11d2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    11d6:	20 91 70 00 	lds	r18, 0x0070
    11da:	22 60       	ori	r18, 0x02	; 2
    11dc:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    11e0:	20 91 03 01 	lds	r18, 0x0103
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	20 74       	andi	r18, 0x40	; 64
    11e8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    11ea:	00 24       	eor	r0, r0
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	00 1c       	adc	r0, r0
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	00 1c       	adc	r0, r0
    11f8:	23 2f       	mov	r18, r19
    11fa:	30 2d       	mov	r19, r0
    11fc:	4c e0       	ldi	r20, 0x0C	; 12
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	48 1b       	sub	r20, r24
    1202:	59 0b       	sbc	r21, r25
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__vector_13+0xcc>
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	4a 95       	dec	r20
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <__vector_13+0xc8>
				data_temp += temp;
    120e:	40 91 22 03 	lds	r20, 0x0322
    1212:	42 0f       	add	r20, r18
    1214:	40 93 22 03 	sts	0x0322, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1218:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    121a:	90 93 02 02 	sts	0x0202, r25
    121e:	80 93 01 02 	sts	0x0201, r24

		}

}
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	5f 91       	pop	r21
    1228:	4f 91       	pop	r20
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1238:	10 92 12 02 	sts	0x0212, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    123c:	83 e3       	ldi	r24, 0x33	; 51
    123e:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1242:	80 91 b1 00 	lds	r24, 0x00B1
    1246:	86 60       	ori	r24, 0x06	; 6
    1248:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    124c:	80 91 70 00 	lds	r24, 0x0070
    1250:	82 60       	ori	r24, 0x02	; 2
    1252:	80 93 70 00 	sts	0x0070, r24
    1256:	80 91 01 02 	lds	r24, 0x0201
    125a:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    125e:	2f ef       	ldi	r18, 0xFF	; 255
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	92 07       	cpc	r25, r18
    1264:	c9 f6       	brne	.-78     	; 0x1218 <__vector_13+0xda>
    1266:	dd cf       	rjmp	.-70     	; 0x1222 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1268:	20 91 03 01 	lds	r18, 0x0103
    126c:	26 ff       	sbrs	r18, 6
    126e:	52 c0       	rjmp	.+164    	; 0x1314 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1270:	20 91 68 00 	lds	r18, 0x0068
    1274:	22 60       	ori	r18, 0x02	; 2
    1276:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    127a:	20 91 6c 00 	lds	r18, 0x006C
    127e:	20 68       	ori	r18, 0x80	; 128
    1280:	20 93 6c 00 	sts	0x006C, r18
    1284:	ce cf       	rjmp	.-100    	; 0x1222 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1286:	26 e3       	ldi	r18, 0x36	; 54
    1288:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    128c:	20 91 b1 00 	lds	r18, 0x00B1
    1290:	26 60       	ori	r18, 0x06	; 6
    1292:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1296:	20 91 70 00 	lds	r18, 0x0070
    129a:	22 60       	ori	r18, 0x02	; 2
    129c:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    12a0:	20 91 03 01 	lds	r18, 0x0103
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	20 74       	andi	r18, 0x40	; 64
    12a8:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    12aa:	00 24       	eor	r0, r0
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	00 1c       	adc	r0, r0
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	00 1c       	adc	r0, r0
    12b8:	23 2f       	mov	r18, r19
    12ba:	30 2d       	mov	r19, r0
    12bc:	46 e0       	ldi	r20, 0x06	; 6
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	48 1b       	sub	r20, r24
    12c2:	59 0b       	sbc	r21, r25
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <__vector_13+0x18c>
    12c6:	22 0f       	add	r18, r18
    12c8:	33 1f       	adc	r19, r19
    12ca:	4a 95       	dec	r20
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <__vector_13+0x188>
				address_temp += temp;
    12ce:	40 91 23 03 	lds	r20, 0x0323
    12d2:	42 0f       	add	r20, r18
    12d4:	40 93 23 03 	sts	0x0323, r20
    12d8:	9f cf       	rjmp	.-194    	; 0x1218 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    12da:	20 91 03 01 	lds	r18, 0x0103
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	20 74       	andi	r18, 0x40	; 64
    12e2:	30 70       	andi	r19, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	23 2f       	mov	r18, r19
    12e8:	00 0c       	add	r0, r0
    12ea:	22 1f       	adc	r18, r18
    12ec:	33 0b       	sbc	r19, r19
    12ee:	00 0c       	add	r0, r0
    12f0:	22 1f       	adc	r18, r18
    12f2:	33 1f       	adc	r19, r19
    12f4:	20 93 24 03 	sts	0x0324, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    12f8:	26 e3       	ldi	r18, 0x36	; 54
    12fa:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    12fe:	20 91 b1 00 	lds	r18, 0x00B1
    1302:	26 60       	ori	r18, 0x06	; 6
    1304:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1308:	20 91 70 00 	lds	r18, 0x0070
    130c:	22 60       	ori	r18, 0x02	; 2
    130e:	20 93 70 00 	sts	0x0070, r18
    1312:	82 cf       	rjmp	.-252    	; 0x1218 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1314:	8c e1       	ldi	r24, 0x1C	; 28
    1316:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    131a:	80 91 b1 00 	lds	r24, 0x00B1
    131e:	86 60       	ori	r24, 0x06	; 6
    1320:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1324:	80 91 70 00 	lds	r24, 0x0070
    1328:	82 60       	ori	r24, 0x02	; 2
    132a:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    132e:	10 92 22 03 	sts	0x0322, r1
    1332:	10 92 23 03 	sts	0x0323, r1
    1336:	10 92 24 03 	sts	0x0324, r1
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	6d cf       	rjmp	.-294    	; 0x121a <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1340:	8d 30       	cpi	r24, 0x0D	; 13
    1342:	91 05       	cpc	r25, r1
    1344:	09 f0       	breq	.+2      	; 0x1348 <__vector_13+0x20a>
    1346:	68 cf       	rjmp	.-304    	; 0x1218 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1348:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    134c:	80 91 68 00 	lds	r24, 0x0068
    1350:	82 60       	ori	r24, 0x02	; 2
    1352:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1356:	80 91 6c 00 	lds	r24, 0x006C
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	90 93 02 02 	sts	0x0202, r25
    1368:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    136c:	80 91 24 03 	lds	r24, 0x0324
    1370:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1374:	80 91 23 03 	lds	r24, 0x0323
    1378:	80 93 20 03 	sts	0x0320, r24
				data_ir = data_temp;
    137c:	80 91 22 03 	lds	r24, 0x0322
    1380:	80 93 21 03 	sts	0x0321, r24
				command_received=1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 02 04 	sts	0x0402, r24
    138a:	4b cf       	rjmp	.-362    	; 0x1222 <__vector_13+0xe4>

0000138c <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    138c:	80 91 00 02 	lds	r24, 0x0200
    1390:	08 95       	ret

00001392 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1392:	80 91 20 03 	lds	r24, 0x0320
    1396:	08 95       	ret

00001398 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1398:	80 91 21 03 	lds	r24, 0x0321
    139c:	08 95       	ret

0000139e <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    139e:	80 91 11 02 	lds	r24, 0x0211
    13a2:	88 23       	and	r24, r24
    13a4:	b1 f1       	breq	.+108    	; 0x1412 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    13a6:	e0 91 21 03 	lds	r30, 0x0321

void handleIRRemoteCommands() {

	if(irEnabled) {

		irCommand = ir_remote_get_data();
    13aa:	e0 93 01 04 	sts	0x0401, r30

		if(command_received) {
    13ae:	80 91 02 04 	lds	r24, 0x0402
    13b2:	88 23       	and	r24, r24
    13b4:	71 f1       	breq	.+92     	; 0x1412 <handleIRRemoteCommands+0x74>

			command_received = 0;
    13b6:	10 92 02 04 	sts	0x0402, r1

			switch(irCommand) {
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	e5 33       	cpi	r30, 0x35	; 53
    13be:	f1 05       	cpc	r31, r1
    13c0:	48 f1       	brcs	.+82     	; 0x1414 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    13c2:	20 91 eb 03 	lds	r18, 0x03EB
    13c6:	30 91 ec 03 	lds	r19, 0x03EC
    13ca:	80 91 ed 03 	lds	r24, 0x03ED
    13ce:	90 91 ee 03 	lds	r25, 0x03EE
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    13d2:	37 fd       	sbrc	r19, 7
    13d4:	27 c0       	rjmp	.+78     	; 0x1424 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    13d6:	35 95       	asr	r19
    13d8:	27 95       	ror	r18
    13da:	35 95       	asr	r19
    13dc:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    13de:	30 93 fe 03 	sts	0x03FE, r19
    13e2:	20 93 fd 03 	sts	0x03FD, r18
			}
			if(pwm_left_desired >= 0) {
    13e6:	97 fd       	sbrc	r25, 7
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    13ea:	95 95       	asr	r25
    13ec:	87 95       	ror	r24
    13ee:	95 95       	asr	r25
    13f0:	87 95       	ror	r24
    13f2:	90 93 fc 03 	sts	0x03FC, r25
    13f6:	80 93 fb 03 	sts	0x03FB, r24
    13fa:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    13fc:	90 95       	com	r25
    13fe:	81 95       	neg	r24
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	95 95       	asr	r25
    1404:	87 95       	ror	r24
    1406:	95 95       	asr	r25
    1408:	87 95       	ror	r24
    140a:	90 93 fc 03 	sts	0x03FC, r25
    140e:	80 93 fb 03 	sts	0x03FB, r24
    1412:	08 95       	ret

		if(command_received) {

			command_received = 0;

			switch(irCommand) {
    1414:	ee 58       	subi	r30, 0x8E	; 142
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	05 90       	lpm	r0, Z+
    141e:	f4 91       	lpm	r31, Z+
    1420:	e0 2d       	mov	r30, r0
    1422:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1424:	30 95       	com	r19
    1426:	21 95       	neg	r18
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	d5 cf       	rjmp	.-86     	; 0x13d6 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    142c:	80 93 20 04 	sts	0x0420, r24
							cliffAvoidanceEnabled = 0;
    1430:	10 92 21 04 	sts	0x0421, r1
    1434:	c6 cf       	rjmp	.-116    	; 0x13c2 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1436:	10 92 20 04 	sts	0x0420, r1
							cliffAvoidanceEnabled = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 93 21 04 	sts	0x0421, r24
    1440:	20 91 eb 03 	lds	r18, 0x03EB
    1444:	30 91 ec 03 	lds	r19, 0x03EC
    1448:	80 91 ed 03 	lds	r24, 0x03ED
    144c:	90 91 ee 03 	lds	r25, 0x03EE
							break;
    1450:	c0 cf       	rjmp	.-128    	; 0x13d2 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1452:	10 92 20 04 	sts	0x0420, r1
    1456:	20 91 eb 03 	lds	r18, 0x03EB
    145a:	30 91 ec 03 	lds	r19, 0x03EC
    145e:	80 91 ed 03 	lds	r24, 0x03ED
    1462:	90 91 ee 03 	lds	r25, 0x03EE
					break;
    1466:	b5 cf       	rjmp	.-150    	; 0x13d2 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 20 04 	sts	0x0420, r24
    146e:	20 91 eb 03 	lds	r18, 0x03EB
    1472:	30 91 ec 03 	lds	r19, 0x03EC
    1476:	80 91 ed 03 	lds	r24, 0x03ED
    147a:	90 91 ee 03 	lds	r25, 0x03EE
					break;
    147e:	a9 cf       	rjmp	.-174    	; 0x13d2 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1480:	80 91 ed 03 	lds	r24, 0x03ED
    1484:	90 91 ee 03 	lds	r25, 0x03EE
    1488:	4e 97       	sbiw	r24, 0x1e	; 30
    148a:	90 93 ee 03 	sts	0x03EE, r25
    148e:	80 93 ed 03 	sts	0x03ED, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1492:	2e ef       	ldi	r18, 0xFE	; 254
    1494:	80 30       	cpi	r24, 0x00	; 0
    1496:	92 07       	cpc	r25, r18
    1498:	9c f5       	brge	.+102    	; 0x1500 <handleIRRemoteCommands+0x162>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	9e ef       	ldi	r25, 0xFE	; 254
    149e:	90 93 ee 03 	sts	0x03EE, r25
    14a2:	80 93 ed 03 	sts	0x03ED, r24
    14a6:	20 91 eb 03 	lds	r18, 0x03EB
    14aa:	30 91 ec 03 	lds	r19, 0x03EC
    14ae:	91 cf       	rjmp	.-222    	; 0x13d2 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    14b0:	20 91 eb 03 	lds	r18, 0x03EB
    14b4:	30 91 ec 03 	lds	r19, 0x03EC
    14b8:	80 91 e9 03 	lds	r24, 0x03E9
    14bc:	90 91 ea 03 	lds	r25, 0x03EA
    14c0:	28 17       	cp	r18, r24
    14c2:	39 07       	cpc	r19, r25
    14c4:	24 f0       	brlt	.+8      	; 0x14ce <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    14c6:	20 91 ed 03 	lds	r18, 0x03ED
    14ca:	30 91 ee 03 	lds	r19, 0x03EE
					}
					pwm_right_desired -= STEP_MOTORS;
    14ce:	2e 51       	subi	r18, 0x1E	; 30
    14d0:	30 40       	sbci	r19, 0x00	; 0
    14d2:	30 93 ec 03 	sts	0x03EC, r19
    14d6:	20 93 eb 03 	sts	0x03EB, r18
					pwm_left_desired -= STEP_MOTORS;
    14da:	c9 01       	movw	r24, r18
    14dc:	30 93 ee 03 	sts	0x03EE, r19
    14e0:	20 93 ed 03 	sts	0x03ED, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    14e4:	4e ef       	ldi	r20, 0xFE	; 254
    14e6:	20 30       	cpi	r18, 0x00	; 0
    14e8:	34 07       	cpc	r19, r20
    14ea:	34 f4       	brge	.+12     	; 0x14f8 <handleIRRemoteCommands+0x15a>
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	5e ef       	ldi	r21, 0xFE	; 254
    14f0:	50 93 ec 03 	sts	0x03EC, r21
    14f4:	40 93 eb 03 	sts	0x03EB, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    14f8:	4e ef       	ldi	r20, 0xFE	; 254
    14fa:	20 30       	cpi	r18, 0x00	; 0
    14fc:	34 07       	cpc	r19, r20
    14fe:	6c f2       	brlt	.-102    	; 0x149a <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1500:	20 91 eb 03 	lds	r18, 0x03EB
    1504:	30 91 ec 03 	lds	r19, 0x03EC
    1508:	64 cf       	rjmp	.-312    	; 0x13d2 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    150a:	20 91 eb 03 	lds	r18, 0x03EB
    150e:	30 91 ec 03 	lds	r19, 0x03EC
    1512:	2e 51       	subi	r18, 0x1E	; 30
    1514:	30 40       	sbci	r19, 0x00	; 0
    1516:	30 93 ec 03 	sts	0x03EC, r19
    151a:	20 93 eb 03 	sts	0x03EB, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    151e:	4e ef       	ldi	r20, 0xFE	; 254
    1520:	20 30       	cpi	r18, 0x00	; 0
    1522:	34 07       	cpc	r19, r20
    1524:	0c f0       	brlt	.+2      	; 0x1528 <handleIRRemoteCommands+0x18a>
    1526:	17 c1       	rjmp	.+558    	; 0x1756 <handleIRRemoteCommands+0x3b8>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	9e ef       	ldi	r25, 0xFE	; 254
    152c:	90 93 ec 03 	sts	0x03EC, r25
    1530:	80 93 eb 03 	sts	0x03EB, r24
    1534:	80 91 ed 03 	lds	r24, 0x03ED
    1538:	90 91 ee 03 	lds	r25, 0x03EE
    153c:	20 e8       	ldi	r18, 0x80	; 128
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4e cf       	rjmp	.-356    	; 0x13de <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1542:	20 91 eb 03 	lds	r18, 0x03EB
    1546:	30 91 ec 03 	lds	r19, 0x03EC
    154a:	2e 51       	subi	r18, 0x1E	; 30
    154c:	30 40       	sbci	r19, 0x00	; 0
    154e:	30 93 ec 03 	sts	0x03EC, r19
    1552:	20 93 eb 03 	sts	0x03EB, r18
					pwm_left_desired += STEP_MOTORS;
    1556:	80 91 ed 03 	lds	r24, 0x03ED
    155a:	90 91 ee 03 	lds	r25, 0x03EE
    155e:	4e 96       	adiw	r24, 0x1e	; 30
    1560:	90 93 ee 03 	sts	0x03EE, r25
    1564:	80 93 ed 03 	sts	0x03ED, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1568:	4e ef       	ldi	r20, 0xFE	; 254
    156a:	20 30       	cpi	r18, 0x00	; 0
    156c:	34 07       	cpc	r19, r20
    156e:	34 f4       	brge	.+12     	; 0x157c <handleIRRemoteCommands+0x1de>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3e ef       	ldi	r19, 0xFE	; 254
    1574:	30 93 ec 03 	sts	0x03EC, r19
    1578:	20 93 eb 03 	sts	0x03EB, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	94 07       	cpc	r25, r20
    1582:	0c f4       	brge	.+2      	; 0x1586 <handleIRRemoteCommands+0x1e8>
    1584:	26 cf       	rjmp	.-436    	; 0x13d2 <handleIRRemoteCommands+0x34>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	90 93 ee 03 	sts	0x03EE, r25
    158e:	80 93 ed 03 	sts	0x03ED, r24
    1592:	1f cf       	rjmp	.-450    	; 0x13d2 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1594:	20 91 eb 03 	lds	r18, 0x03EB
    1598:	30 91 ec 03 	lds	r19, 0x03EC
    159c:	80 91 ed 03 	lds	r24, 0x03ED
    15a0:	90 91 ee 03 	lds	r25, 0x03EE
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	0c f4       	brge	.+2      	; 0x15ac <handleIRRemoteCommands+0x20e>
    15aa:	da c0       	rjmp	.+436    	; 0x1760 <handleIRRemoteCommands+0x3c2>
    15ac:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    15ae:	22 5e       	subi	r18, 0xE2	; 226
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	30 93 ec 03 	sts	0x03EC, r19
    15b6:	20 93 eb 03 	sts	0x03EB, r18
					pwm_left_desired += STEP_MOTORS;
    15ba:	4e 96       	adiw	r24, 0x1e	; 30
    15bc:	90 93 ee 03 	sts	0x03EE, r25
    15c0:	80 93 ed 03 	sts	0x03ED, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    15c4:	42 e0       	ldi	r20, 0x02	; 2
    15c6:	21 30       	cpi	r18, 0x01	; 1
    15c8:	34 07       	cpc	r19, r20
    15ca:	34 f0       	brlt	.+12     	; 0x15d8 <handleIRRemoteCommands+0x23a>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	32 e0       	ldi	r19, 0x02	; 2
    15d0:	30 93 ec 03 	sts	0x03EC, r19
    15d4:	20 93 eb 03 	sts	0x03EB, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    15d8:	22 e0       	ldi	r18, 0x02	; 2
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	92 07       	cpc	r25, r18
    15de:	0c f4       	brge	.+2      	; 0x15e2 <handleIRRemoteCommands+0x244>
    15e0:	8f cf       	rjmp	.-226    	; 0x1500 <handleIRRemoteCommands+0x162>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	90 93 ee 03 	sts	0x03EE, r25
    15ea:	80 93 ed 03 	sts	0x03ED, r24
    15ee:	20 91 eb 03 	lds	r18, 0x03EB
    15f2:	30 91 ec 03 	lds	r19, 0x03EC
    15f6:	ed ce       	rjmp	.-550    	; 0x13d2 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    15f8:	20 91 eb 03 	lds	r18, 0x03EB
    15fc:	30 91 ec 03 	lds	r19, 0x03EC
    1600:	22 5e       	subi	r18, 0xE2	; 226
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	30 93 ec 03 	sts	0x03EC, r19
    1608:	20 93 eb 03 	sts	0x03EB, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    160c:	42 e0       	ldi	r20, 0x02	; 2
    160e:	21 30       	cpi	r18, 0x01	; 1
    1610:	34 07       	cpc	r19, r20
    1612:	0c f4       	brge	.+2      	; 0x1616 <handleIRRemoteCommands+0x278>
    1614:	a0 c0       	rjmp	.+320    	; 0x1756 <handleIRRemoteCommands+0x3b8>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	92 e0       	ldi	r25, 0x02	; 2
    161a:	90 93 ec 03 	sts	0x03EC, r25
    161e:	80 93 eb 03 	sts	0x03EB, r24
    1622:	80 91 ed 03 	lds	r24, 0x03ED
    1626:	90 91 ee 03 	lds	r25, 0x03EE
    162a:	20 e8       	ldi	r18, 0x80	; 128
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	d7 ce       	rjmp	.-594    	; 0x13de <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1630:	80 91 03 04 	lds	r24, 0x0403
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	65 e0       	ldi	r22, 0x05	; 5
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	0e 94 9c 23 	call	0x4738	; 0x4738 <__divmodhi4>
    1640:	80 93 03 04 	sts	0x0403, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1644:	88 23       	and	r24, r24
    1646:	09 f0       	breq	.+2      	; 0x164a <handleIRRemoteCommands+0x2ac>
    1648:	8d c0       	rjmp	.+282    	; 0x1764 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    164a:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    164c:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    164e:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1658:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    165c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <updateRedLed>
					updateGreenLed(pwm_green);
    1660:	80 91 0d 02 	lds	r24, 0x020D
    1664:	0e 94 0f 1a 	call	0x341e	; 0x341e <updateGreenLed>
					updateBlueLed(pwm_blue);
    1668:	80 91 0e 02 	lds	r24, 0x020E
    166c:	0e 94 23 1a 	call	0x3446	; 0x3446 <updateBlueLed>
    1670:	20 91 eb 03 	lds	r18, 0x03EB
    1674:	30 91 ec 03 	lds	r19, 0x03EC
    1678:	80 91 ed 03 	lds	r24, 0x03ED
    167c:	90 91 ee 03 	lds	r25, 0x03EE

	               	break;
    1680:	a8 ce       	rjmp	.-688    	; 0x13d2 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1682:	80 91 04 04 	lds	r24, 0x0404
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	83 70       	andi	r24, 0x03	; 3
    168c:	90 70       	andi	r25, 0x00	; 0
    168e:	80 93 04 04 	sts	0x0404, r24
					switch(behaviorState) {
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	09 f4       	brne	.+2      	; 0x1698 <handleIRRemoteCommands+0x2fa>
    1696:	cf ce       	rjmp	.-610    	; 0x1436 <handleIRRemoteCommands+0x98>
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	09 f4       	brne	.+2      	; 0x169e <handleIRRemoteCommands+0x300>
    169c:	53 c0       	rjmp	.+166    	; 0x1744 <handleIRRemoteCommands+0x3a6>
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <handleIRRemoteCommands+0x306>
    16a2:	c4 ce       	rjmp	.-632    	; 0x142c <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    16a4:	10 92 20 04 	sts	0x0420, r1
							cliffAvoidanceEnabled = 0;
    16a8:	10 92 21 04 	sts	0x0421, r1
    16ac:	8a ce       	rjmp	.-748    	; 0x13c2 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    16ae:	20 91 eb 03 	lds	r18, 0x03EB
    16b2:	30 91 ec 03 	lds	r19, 0x03EC
    16b6:	22 5e       	subi	r18, 0xE2	; 226
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	30 93 ec 03 	sts	0x03EC, r19
    16be:	20 93 eb 03 	sts	0x03EB, r18
					pwm_left_desired -= STEP_MOTORS;
    16c2:	80 91 ed 03 	lds	r24, 0x03ED
    16c6:	90 91 ee 03 	lds	r25, 0x03EE
    16ca:	4e 97       	sbiw	r24, 0x1e	; 30
    16cc:	90 93 ee 03 	sts	0x03EE, r25
    16d0:	80 93 ed 03 	sts	0x03ED, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    16d4:	42 e0       	ldi	r20, 0x02	; 2
    16d6:	21 30       	cpi	r18, 0x01	; 1
    16d8:	34 07       	cpc	r19, r20
    16da:	34 f0       	brlt	.+12     	; 0x16e8 <handleIRRemoteCommands+0x34a>
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	32 e0       	ldi	r19, 0x02	; 2
    16e0:	30 93 ec 03 	sts	0x03EC, r19
    16e4:	20 93 eb 03 	sts	0x03EB, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    16e8:	4e ef       	ldi	r20, 0xFE	; 254
    16ea:	80 30       	cpi	r24, 0x00	; 0
    16ec:	94 07       	cpc	r25, r20
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <handleIRRemoteCommands+0x354>
    16f0:	70 ce       	rjmp	.-800    	; 0x13d2 <handleIRRemoteCommands+0x34>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	9e ef       	ldi	r25, 0xFE	; 254
    16f6:	90 93 ee 03 	sts	0x03EE, r25
    16fa:	80 93 ed 03 	sts	0x03ED, r24
    16fe:	69 ce       	rjmp	.-814    	; 0x13d2 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1700:	10 92 ec 03 	sts	0x03EC, r1
    1704:	10 92 eb 03 	sts	0x03EB, r1
					pwm_left_desired = 0;
    1708:	10 92 ee 03 	sts	0x03EE, r1
    170c:	10 92 ed 03 	sts	0x03ED, r1
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	5e ce       	rjmp	.-836    	; 0x13d6 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    171a:	80 91 ed 03 	lds	r24, 0x03ED
    171e:	90 91 ee 03 	lds	r25, 0x03EE
    1722:	4e 96       	adiw	r24, 0x1e	; 30
    1724:	90 93 ee 03 	sts	0x03EE, r25
    1728:	80 93 ed 03 	sts	0x03ED, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    172c:	22 e0       	ldi	r18, 0x02	; 2
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	92 07       	cpc	r25, r18
    1732:	0c f4       	brge	.+2      	; 0x1736 <handleIRRemoteCommands+0x398>
    1734:	e5 ce       	rjmp	.-566    	; 0x1500 <handleIRRemoteCommands+0x162>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	90 93 ee 03 	sts	0x03EE, r25
    173e:	80 93 ed 03 	sts	0x03ED, r24
    1742:	de ce       	rjmp	.-580    	; 0x1500 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 20 04 	sts	0x0420, r24
							cliffAvoidanceEnabled = 1;
    174a:	80 93 21 04 	sts	0x0421, r24
    174e:	20 91 eb 03 	lds	r18, 0x03EB
    1752:	30 91 ec 03 	lds	r19, 0x03EC
    1756:	80 91 ed 03 	lds	r24, 0x03ED
    175a:	90 91 ee 03 	lds	r25, 0x03EE
							break;
    175e:	39 ce       	rjmp	.-910    	; 0x13d2 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1760:	c9 01       	movw	r24, r18
    1762:	25 cf       	rjmp	.-438    	; 0x15ae <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	61 f0       	breq	.+24     	; 0x1780 <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	91 f0       	breq	.+36     	; 0x1790 <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	d9 f0       	breq	.+54     	; 0x17a6 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1776:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    177a:	80 93 0c 02 	sts	0x020C, r24
    177e:	6e cf       	rjmp	.-292    	; 0x165c <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1786:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    178a:	80 93 0c 02 	sts	0x020C, r24
    178e:	66 cf       	rjmp	.-308    	; 0x165c <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1790:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1792:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    179a:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    179e:	10 92 0c 02 	sts	0x020C, r1
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	5b cf       	rjmp	.-330    	; 0x165c <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    17a6:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    17aa:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    17ae:	10 92 0c 02 	sts	0x020C, r1
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	53 cf       	rjmp	.-346    	; 0x165c <handleIRRemoteCommands+0x2be>

000017b6 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    17b6:	08 95       	ret

000017b8 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	09 f4       	brne	.+2      	; 0x17cc <start_vertical_speed_control_left+0x14>
    17ca:	b7 c0       	rjmp	.+366    	; 0x193a <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    17cc:	20 91 18 04 	lds	r18, 0x0418
    17d0:	30 91 19 04 	lds	r19, 0x0419
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	2e 30       	cpi	r18, 0x0E	; 14
    17d8:	34 07       	cpc	r19, r20
    17da:	0c f4       	brge	.+2      	; 0x17de <start_vertical_speed_control_left+0x26>
    17dc:	88 c0       	rjmp	.+272    	; 0x18ee <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    17de:	18 16       	cp	r1, r24
    17e0:	19 06       	cpc	r1, r25
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <start_vertical_speed_control_left+0x2e>
    17e4:	13 c1       	rjmp	.+550    	; 0x1a0c <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    17e6:	88 e6       	ldi	r24, 0x68	; 104
    17e8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    17ea:	82 1b       	sub	r24, r18
    17ec:	93 0b       	sbc	r25, r19
    17ee:	95 95       	asr	r25
    17f0:	87 95       	ror	r24
    17f2:	95 95       	asr	r25
    17f4:	87 95       	ror	r24
    17f6:	29 e1       	ldi	r18, 0x19	; 25
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	28 1b       	sub	r18, r24
    17fc:	39 0b       	sbc	r19, r25
    17fe:	30 93 04 02 	sts	0x0204, r19
    1802:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1806:	40 91 24 04 	lds	r20, 0x0424
    180a:	50 91 25 04 	lds	r21, 0x0425
    180e:	50 93 3f 04 	sts	0x043F, r21
    1812:	40 93 3e 04 	sts	0x043E, r20
	if(*pwm_left >= 0) {
    1816:	20 81       	ld	r18, Z
    1818:	31 81       	ldd	r19, Z+1	; 0x01
    181a:	37 fd       	sbrc	r19, 7
    181c:	d2 c0       	rjmp	.+420    	; 0x19c2 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    181e:	80 91 e3 03 	lds	r24, 0x03E3
    1822:	90 91 e4 03 	lds	r25, 0x03E4
    1826:	b9 01       	movw	r22, r18
    1828:	68 1b       	sub	r22, r24
    182a:	79 0b       	sbc	r23, r25
    182c:	cb 01       	movw	r24, r22
    182e:	70 93 25 04 	sts	0x0425, r23
    1832:	60 93 24 04 	sts	0x0424, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1836:	20 91 f3 03 	lds	r18, 0x03F3
    183a:	30 91 f4 03 	lds	r19, 0x03F4
    183e:	28 0f       	add	r18, r24
    1840:	39 1f       	adc	r19, r25
    1842:	30 93 f4 03 	sts	0x03F4, r19
    1846:	20 93 f3 03 	sts	0x03F3, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    184a:	76 e0       	ldi	r23, 0x06	; 6
    184c:	21 34       	cpi	r18, 0x41	; 65
    184e:	37 07       	cpc	r19, r23
    1850:	0c f4       	brge	.+2      	; 0x1854 <start_vertical_speed_control_left+0x9c>
    1852:	84 c0       	rjmp	.+264    	; 0x195c <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1854:	20 e4       	ldi	r18, 0x40	; 64
    1856:	36 e0       	ldi	r19, 0x06	; 6
    1858:	30 93 f4 03 	sts	0x03F4, r19
    185c:	20 93 f3 03 	sts	0x03F3, r18
    1860:	60 ec       	ldi	r22, 0xC0	; 192
    1862:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1864:	9c 01       	movw	r18, r24
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	dc 01       	movw	r26, r24
    186c:	aa 0f       	add	r26, r26
    186e:	bb 1f       	adc	r27, r27
    1870:	aa 0f       	add	r26, r26
    1872:	bb 1f       	adc	r27, r27
    1874:	aa 0f       	add	r26, r26
    1876:	bb 1f       	adc	r27, r27
    1878:	2a 0f       	add	r18, r26
    187a:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    187c:	00 81       	ld	r16, Z
    187e:	11 81       	ldd	r17, Z+1	; 0x01
    1880:	c0 91 03 02 	lds	r28, 0x0203
    1884:	d0 91 04 02 	lds	r29, 0x0204
    1888:	0c 9f       	mul	r16, r28
    188a:	d0 01       	movw	r26, r0
    188c:	0d 9f       	mul	r16, r29
    188e:	b0 0d       	add	r27, r0
    1890:	1c 9f       	mul	r17, r28
    1892:	b0 0d       	add	r27, r0
    1894:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1896:	2a 0f       	add	r18, r26
    1898:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    189a:	48 1b       	sub	r20, r24
    189c:	59 0b       	sbc	r21, r25
    189e:	44 0f       	add	r20, r20
    18a0:	55 1f       	adc	r21, r21
    18a2:	24 0f       	add	r18, r20
    18a4:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    18a6:	26 0f       	add	r18, r22
    18a8:	37 1f       	adc	r19, r23
    18aa:	30 93 f2 03 	sts	0x03F2, r19
    18ae:	20 93 f1 03 	sts	0x03F1, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    18b2:	37 fd       	sbrc	r19, 7
    18b4:	69 c0       	rjmp	.+210    	; 0x1988 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    18b6:	12 16       	cp	r1, r18
    18b8:	13 06       	cpc	r1, r19
    18ba:	0c f0       	brlt	.+2      	; 0x18be <start_vertical_speed_control_left+0x106>
    18bc:	6f c0       	rjmp	.+222    	; 0x199c <start_vertical_speed_control_left+0x1e4>
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	97 fd       	sbrc	r25, 7
    18c4:	89 c0       	rjmp	.+274    	; 0x19d8 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    18c6:	7d e5       	ldi	r23, 0x5D	; 93
    18c8:	21 3c       	cpi	r18, 0xC1	; 193
    18ca:	37 07       	cpc	r19, r23
    18cc:	0c f4       	brge	.+2      	; 0x18d0 <start_vertical_speed_control_left+0x118>
    18ce:	66 c0       	rjmp	.+204    	; 0x199c <start_vertical_speed_control_left+0x1e4>
    18d0:	80 ec       	ldi	r24, 0xC0	; 192
    18d2:	9d e5       	ldi	r25, 0x5D	; 93
    18d4:	90 93 f2 03 	sts	0x03F2, r25
    18d8:	80 93 f1 03 	sts	0x03F1, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    18ee:	24 3b       	cpi	r18, 0xB4	; 180
    18f0:	31 05       	cpc	r19, r1
    18f2:	94 f4       	brge	.+36     	; 0x1918 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    18f4:	2a 35       	cpi	r18, 0x5A	; 90
    18f6:	31 05       	cpc	r19, r1
    18f8:	7c f4       	brge	.+30     	; 0x1918 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    18fa:	18 16       	cp	r1, r24
    18fc:	19 06       	cpc	r1, r25
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <start_vertical_speed_control_left+0x14a>
    1900:	93 c0       	rjmp	.+294    	; 0x1a28 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1902:	35 95       	asr	r19
    1904:	27 95       	ror	r18
    1906:	35 95       	asr	r19
    1908:	27 95       	ror	r18
    190a:	27 5e       	subi	r18, 0xE7	; 231
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	30 93 04 02 	sts	0x0204, r19
    1912:	20 93 03 02 	sts	0x0203, r18
    1916:	77 cf       	rjmp	.-274    	; 0x1806 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1918:	18 16       	cp	r1, r24
    191a:	19 06       	cpc	r1, r25
    191c:	94 f5       	brge	.+100    	; 0x1982 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    191e:	84 eb       	ldi	r24, 0xB4	; 180
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 1b       	sub	r24, r18
    1924:	93 0b       	sbc	r25, r19
    1926:	95 95       	asr	r25
    1928:	87 95       	ror	r24
    192a:	95 95       	asr	r25
    192c:	87 95       	ror	r24
    192e:	49 96       	adiw	r24, 0x19	; 25
    1930:	90 93 04 02 	sts	0x0204, r25
    1934:	80 93 03 02 	sts	0x0203, r24
    1938:	66 cf       	rjmp	.-308    	; 0x1806 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    193a:	10 92 f4 03 	sts	0x03F4, r1
    193e:	10 92 f3 03 	sts	0x03F3, r1
		delta_left_speed_current = 0;
    1942:	10 92 25 04 	sts	0x0425, r1
    1946:	10 92 24 04 	sts	0x0424, r1
		delta_left_speed_prev = 0;
    194a:	10 92 3f 04 	sts	0x043F, r1
    194e:	10 92 3e 04 	sts	0x043E, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    195c:	69 ef       	ldi	r22, 0xF9	; 249
    195e:	20 3c       	cpi	r18, 0xC0	; 192
    1960:	36 07       	cpc	r19, r22
    1962:	4c f4       	brge	.+18     	; 0x1976 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1964:	20 ec       	ldi	r18, 0xC0	; 192
    1966:	39 ef       	ldi	r19, 0xF9	; 249
    1968:	30 93 f4 03 	sts	0x03F4, r19
    196c:	20 93 f3 03 	sts	0x03F3, r18
    1970:	60 e4       	ldi	r22, 0x40	; 64
    1972:	7d ee       	ldi	r23, 0xED	; 237
    1974:	77 cf       	rjmp	.-274    	; 0x1864 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1976:	b9 01       	movw	r22, r18
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	62 0f       	add	r22, r18
    197e:	73 1f       	adc	r23, r19
    1980:	71 cf       	rjmp	.-286    	; 0x1864 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1982:	84 eb       	ldi	r24, 0xB4	; 180
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	31 cf       	rjmp	.-414    	; 0x17ea <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	97 fd       	sbrc	r25, 7
    198e:	06 c0       	rjmp	.+12     	; 0x199c <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    1990:	10 92 f2 03 	sts	0x03F2, r1
    1994:	10 92 f1 03 	sts	0x03F1, r1
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    199c:	82 ea       	ldi	r24, 0xA2	; 162
    199e:	20 34       	cpi	r18, 0x40	; 64
    19a0:	38 07       	cpc	r19, r24
    19a2:	04 f5       	brge	.+64     	; 0x19e4 <start_vertical_speed_control_left+0x22c>
    19a4:	80 e4       	ldi	r24, 0x40	; 64
    19a6:	92 ea       	ldi	r25, 0xA2	; 162
    19a8:	90 93 f2 03 	sts	0x03F2, r25
    19ac:	80 93 f1 03 	sts	0x03F1, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	9e ef       	ldi	r25, 0xFE	; 254
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24


}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    19c2:	80 91 e3 03 	lds	r24, 0x03E3
    19c6:	90 91 e4 03 	lds	r25, 0x03E4
    19ca:	82 0f       	add	r24, r18
    19cc:	93 1f       	adc	r25, r19
    19ce:	90 93 25 04 	sts	0x0425, r25
    19d2:	80 93 24 04 	sts	0x0424, r24
    19d6:	2f cf       	rjmp	.-418    	; 0x1836 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    19d8:	10 92 f2 03 	sts	0x03F2, r1
    19dc:	10 92 f1 03 	sts	0x03F1, r1
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    19e4:	35 95       	asr	r19
    19e6:	27 95       	ror	r18
    19e8:	35 95       	asr	r19
    19ea:	27 95       	ror	r18
    19ec:	35 95       	asr	r19
    19ee:	27 95       	ror	r18
    19f0:	35 95       	asr	r19
    19f2:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    19f4:	31 83       	std	Z+1, r19	; 0x01
    19f6:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    19f8:	42 e0       	ldi	r20, 0x02	; 2
    19fa:	21 30       	cpi	r18, 0x01	; 1
    19fc:	34 07       	cpc	r19, r20
    19fe:	0c f0       	brlt	.+2      	; 0x1a02 <start_vertical_speed_control_left+0x24a>
    1a00:	6d cf       	rjmp	.-294    	; 0x18dc <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1a02:	6e ef       	ldi	r22, 0xFE	; 254
    1a04:	20 30       	cpi	r18, 0x00	; 0
    1a06:	36 07       	cpc	r19, r22
    1a08:	9c f2       	brlt	.-90     	; 0x19b0 <start_vertical_speed_control_left+0x1f8>
    1a0a:	6c cf       	rjmp	.-296    	; 0x18e4 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1a0c:	88 e6       	ldi	r24, 0x68	; 104
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	82 1b       	sub	r24, r18
    1a12:	93 0b       	sbc	r25, r19
    1a14:	95 95       	asr	r25
    1a16:	87 95       	ror	r24
    1a18:	95 95       	asr	r25
    1a1a:	87 95       	ror	r24
    1a1c:	49 96       	adiw	r24, 0x19	; 25
    1a1e:	90 93 04 02 	sts	0x0204, r25
    1a22:	80 93 03 02 	sts	0x0203, r24
    1a26:	ef ce       	rjmp	.-546    	; 0x1806 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1a28:	35 95       	asr	r19
    1a2a:	27 95       	ror	r18
    1a2c:	35 95       	asr	r19
    1a2e:	27 95       	ror	r18
    1a30:	89 e1       	ldi	r24, 0x19	; 25
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	82 1b       	sub	r24, r18
    1a36:	93 0b       	sbc	r25, r19
    1a38:	90 93 04 02 	sts	0x0204, r25
    1a3c:	80 93 03 02 	sts	0x0203, r24
    1a40:	e2 ce       	rjmp	.-572    	; 0x1806 <start_vertical_speed_control_left+0x4e>

00001a42 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <start_vertical_speed_control_right+0x14>
    1a54:	b7 c0       	rjmp	.+366    	; 0x1bc4 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1a56:	20 91 18 04 	lds	r18, 0x0418
    1a5a:	30 91 19 04 	lds	r19, 0x0419
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	2e 30       	cpi	r18, 0x0E	; 14
    1a62:	34 07       	cpc	r19, r20
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <start_vertical_speed_control_right+0x26>
    1a66:	88 c0       	rjmp	.+272    	; 0x1b78 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1a68:	18 16       	cp	r1, r24
    1a6a:	19 06       	cpc	r1, r25
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <start_vertical_speed_control_right+0x2e>
    1a6e:	13 c1       	rjmp	.+550    	; 0x1c96 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    1a70:	88 e6       	ldi	r24, 0x68	; 104
    1a72:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1a74:	82 1b       	sub	r24, r18
    1a76:	93 0b       	sbc	r25, r19
    1a78:	95 95       	asr	r25
    1a7a:	87 95       	ror	r24
    1a7c:	95 95       	asr	r25
    1a7e:	87 95       	ror	r24
    1a80:	29 e1       	ldi	r18, 0x19	; 25
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	28 1b       	sub	r18, r24
    1a86:	39 0b       	sbc	r19, r25
    1a88:	30 93 06 02 	sts	0x0206, r19
    1a8c:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1a90:	40 91 4d 04 	lds	r20, 0x044D
    1a94:	50 91 4e 04 	lds	r21, 0x044E
    1a98:	50 93 27 04 	sts	0x0427, r21
    1a9c:	40 93 26 04 	sts	0x0426, r20
	if(*pwm_right >= 0) {
    1aa0:	20 81       	ld	r18, Z
    1aa2:	31 81       	ldd	r19, Z+1	; 0x01
    1aa4:	37 fd       	sbrc	r19, 7
    1aa6:	d2 c0       	rjmp	.+420    	; 0x1c4c <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1aa8:	80 91 e5 03 	lds	r24, 0x03E5
    1aac:	90 91 e6 03 	lds	r25, 0x03E6
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	68 1b       	sub	r22, r24
    1ab4:	79 0b       	sbc	r23, r25
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	70 93 4e 04 	sts	0x044E, r23
    1abc:	60 93 4d 04 	sts	0x044D, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1ac0:	20 91 f5 03 	lds	r18, 0x03F5
    1ac4:	30 91 f6 03 	lds	r19, 0x03F6
    1ac8:	28 0f       	add	r18, r24
    1aca:	39 1f       	adc	r19, r25
    1acc:	30 93 f6 03 	sts	0x03F6, r19
    1ad0:	20 93 f5 03 	sts	0x03F5, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    1ad4:	76 e0       	ldi	r23, 0x06	; 6
    1ad6:	21 34       	cpi	r18, 0x41	; 65
    1ad8:	37 07       	cpc	r19, r23
    1ada:	0c f4       	brge	.+2      	; 0x1ade <start_vertical_speed_control_right+0x9c>
    1adc:	84 c0       	rjmp	.+264    	; 0x1be6 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    1ade:	20 e4       	ldi	r18, 0x40	; 64
    1ae0:	36 e0       	ldi	r19, 0x06	; 6
    1ae2:	30 93 f6 03 	sts	0x03F6, r19
    1ae6:	20 93 f5 03 	sts	0x03F5, r18
    1aea:	60 ec       	ldi	r22, 0xC0	; 192
    1aec:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1aee:	9c 01       	movw	r18, r24
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	dc 01       	movw	r26, r24
    1af6:	aa 0f       	add	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	aa 0f       	add	r26, r26
    1afc:	bb 1f       	adc	r27, r27
    1afe:	aa 0f       	add	r26, r26
    1b00:	bb 1f       	adc	r27, r27
    1b02:	2a 0f       	add	r18, r26
    1b04:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1b06:	00 81       	ld	r16, Z
    1b08:	11 81       	ldd	r17, Z+1	; 0x01
    1b0a:	c0 91 05 02 	lds	r28, 0x0205
    1b0e:	d0 91 06 02 	lds	r29, 0x0206
    1b12:	0c 9f       	mul	r16, r28
    1b14:	d0 01       	movw	r26, r0
    1b16:	0d 9f       	mul	r16, r29
    1b18:	b0 0d       	add	r27, r0
    1b1a:	1c 9f       	mul	r17, r28
    1b1c:	b0 0d       	add	r27, r0
    1b1e:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1b20:	2a 0f       	add	r18, r26
    1b22:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1b24:	48 1b       	sub	r20, r24
    1b26:	59 0b       	sbc	r21, r25
    1b28:	44 0f       	add	r20, r20
    1b2a:	55 1f       	adc	r21, r21
    1b2c:	24 0f       	add	r18, r20
    1b2e:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1b30:	26 0f       	add	r18, r22
    1b32:	37 1f       	adc	r19, r23
    1b34:	30 93 f0 03 	sts	0x03F0, r19
    1b38:	20 93 ef 03 	sts	0x03EF, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1b3c:	37 fd       	sbrc	r19, 7
    1b3e:	69 c0       	rjmp	.+210    	; 0x1c12 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1b40:	12 16       	cp	r1, r18
    1b42:	13 06       	cpc	r1, r19
    1b44:	0c f0       	brlt	.+2      	; 0x1b48 <start_vertical_speed_control_right+0x106>
    1b46:	6f c0       	rjmp	.+222    	; 0x1c26 <start_vertical_speed_control_right+0x1e4>
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	97 fd       	sbrc	r25, 7
    1b4e:	89 c0       	rjmp	.+274    	; 0x1c62 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1b50:	7d e5       	ldi	r23, 0x5D	; 93
    1b52:	21 3c       	cpi	r18, 0xC1	; 193
    1b54:	37 07       	cpc	r19, r23
    1b56:	0c f4       	brge	.+2      	; 0x1b5a <start_vertical_speed_control_right+0x118>
    1b58:	66 c0       	rjmp	.+204    	; 0x1c26 <start_vertical_speed_control_right+0x1e4>
    1b5a:	80 ec       	ldi	r24, 0xC0	; 192
    1b5c:	9d e5       	ldi	r25, 0x5D	; 93
    1b5e:	90 93 f0 03 	sts	0x03F0, r25
    1b62:	80 93 ef 03 	sts	0x03EF, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1b78:	24 3b       	cpi	r18, 0xB4	; 180
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	94 f4       	brge	.+36     	; 0x1ba2 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1b7e:	2a 35       	cpi	r18, 0x5A	; 90
    1b80:	31 05       	cpc	r19, r1
    1b82:	7c f4       	brge	.+30     	; 0x1ba2 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1b84:	18 16       	cp	r1, r24
    1b86:	19 06       	cpc	r1, r25
    1b88:	0c f0       	brlt	.+2      	; 0x1b8c <start_vertical_speed_control_right+0x14a>
    1b8a:	93 c0       	rjmp	.+294    	; 0x1cb2 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1b8c:	35 95       	asr	r19
    1b8e:	27 95       	ror	r18
    1b90:	35 95       	asr	r19
    1b92:	27 95       	ror	r18
    1b94:	27 5e       	subi	r18, 0xE7	; 231
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	30 93 06 02 	sts	0x0206, r19
    1b9c:	20 93 05 02 	sts	0x0205, r18
    1ba0:	77 cf       	rjmp	.-274    	; 0x1a90 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    1ba2:	18 16       	cp	r1, r24
    1ba4:	19 06       	cpc	r1, r25
    1ba6:	94 f5       	brge	.+100    	; 0x1c0c <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    1ba8:	84 eb       	ldi	r24, 0xB4	; 180
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	82 1b       	sub	r24, r18
    1bae:	93 0b       	sbc	r25, r19
    1bb0:	95 95       	asr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	95 95       	asr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	49 96       	adiw	r24, 0x19	; 25
    1bba:	90 93 06 02 	sts	0x0206, r25
    1bbe:	80 93 05 02 	sts	0x0205, r24
    1bc2:	66 cf       	rjmp	.-308    	; 0x1a90 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1bc4:	10 92 f6 03 	sts	0x03F6, r1
    1bc8:	10 92 f5 03 	sts	0x03F5, r1
		delta_right_speed_current = 0;
    1bcc:	10 92 4e 04 	sts	0x044E, r1
    1bd0:	10 92 4d 04 	sts	0x044D, r1
		delta_right_speed_prev = 0;
    1bd4:	10 92 27 04 	sts	0x0427, r1
    1bd8:	10 92 26 04 	sts	0x0426, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1be6:	69 ef       	ldi	r22, 0xF9	; 249
    1be8:	20 3c       	cpi	r18, 0xC0	; 192
    1bea:	36 07       	cpc	r19, r22
    1bec:	4c f4       	brge	.+18     	; 0x1c00 <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1bee:	20 ec       	ldi	r18, 0xC0	; 192
    1bf0:	39 ef       	ldi	r19, 0xF9	; 249
    1bf2:	30 93 f6 03 	sts	0x03F6, r19
    1bf6:	20 93 f5 03 	sts	0x03F5, r18
    1bfa:	60 e4       	ldi	r22, 0x40	; 64
    1bfc:	7d ee       	ldi	r23, 0xED	; 237
    1bfe:	77 cf       	rjmp	.-274    	; 0x1aee <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1c00:	b9 01       	movw	r22, r18
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	62 0f       	add	r22, r18
    1c08:	73 1f       	adc	r23, r19
    1c0a:	71 cf       	rjmp	.-286    	; 0x1aee <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1c0c:	84 eb       	ldi	r24, 0xB4	; 180
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	31 cf       	rjmp	.-414    	; 0x1a74 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	97 fd       	sbrc	r25, 7
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1c1a:	10 92 f0 03 	sts	0x03F0, r1
    1c1e:	10 92 ef 03 	sts	0x03EF, r1
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c26:	82 ea       	ldi	r24, 0xA2	; 162
    1c28:	20 34       	cpi	r18, 0x40	; 64
    1c2a:	38 07       	cpc	r19, r24
    1c2c:	04 f5       	brge	.+64     	; 0x1c6e <start_vertical_speed_control_right+0x22c>
    1c2e:	80 e4       	ldi	r24, 0x40	; 64
    1c30:	92 ea       	ldi	r25, 0xA2	; 162
    1c32:	90 93 f0 03 	sts	0x03F0, r25
    1c36:	80 93 ef 03 	sts	0x03EF, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	9e ef       	ldi	r25, 0xFE	; 254
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24

}
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1c4c:	80 91 e5 03 	lds	r24, 0x03E5
    1c50:	90 91 e6 03 	lds	r25, 0x03E6
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	90 93 4e 04 	sts	0x044E, r25
    1c5c:	80 93 4d 04 	sts	0x044D, r24
    1c60:	2f cf       	rjmp	.-418    	; 0x1ac0 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1c62:	10 92 f0 03 	sts	0x03F0, r1
    1c66:	10 92 ef 03 	sts	0x03EF, r1
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1c6e:	35 95       	asr	r19
    1c70:	27 95       	ror	r18
    1c72:	35 95       	asr	r19
    1c74:	27 95       	ror	r18
    1c76:	35 95       	asr	r19
    1c78:	27 95       	ror	r18
    1c7a:	35 95       	asr	r19
    1c7c:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1c7e:	31 83       	std	Z+1, r19	; 0x01
    1c80:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1c82:	42 e0       	ldi	r20, 0x02	; 2
    1c84:	21 30       	cpi	r18, 0x01	; 1
    1c86:	34 07       	cpc	r19, r20
    1c88:	0c f0       	brlt	.+2      	; 0x1c8c <start_vertical_speed_control_right+0x24a>
    1c8a:	6d cf       	rjmp	.-294    	; 0x1b66 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1c8c:	6e ef       	ldi	r22, 0xFE	; 254
    1c8e:	20 30       	cpi	r18, 0x00	; 0
    1c90:	36 07       	cpc	r19, r22
    1c92:	9c f2       	brlt	.-90     	; 0x1c3a <start_vertical_speed_control_right+0x1f8>
    1c94:	6c cf       	rjmp	.-296    	; 0x1b6e <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1c96:	88 e6       	ldi	r24, 0x68	; 104
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	82 1b       	sub	r24, r18
    1c9c:	93 0b       	sbc	r25, r19
    1c9e:	95 95       	asr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	95 95       	asr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	49 96       	adiw	r24, 0x19	; 25
    1ca8:	90 93 06 02 	sts	0x0206, r25
    1cac:	80 93 05 02 	sts	0x0205, r24
    1cb0:	ef ce       	rjmp	.-546    	; 0x1a90 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1cb2:	35 95       	asr	r19
    1cb4:	27 95       	ror	r18
    1cb6:	35 95       	asr	r19
    1cb8:	27 95       	ror	r18
    1cba:	89 e1       	ldi	r24, 0x19	; 25
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	82 1b       	sub	r24, r18
    1cc0:	93 0b       	sbc	r25, r19
    1cc2:	90 93 06 02 	sts	0x0206, r25
    1cc6:	80 93 05 02 	sts	0x0205, r24
    1cca:	e2 ce       	rjmp	.-572    	; 0x1a90 <start_vertical_speed_control_right+0x4e>

00001ccc <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1ccc:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1cce:	80 81       	ld	r24, Z
    1cd0:	91 81       	ldd	r25, Z+1	; 0x01
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <start_horizontal_speed_control_right+0xc>
    1cd6:	7b c0       	rjmp	.+246    	; 0x1dce <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1cd8:	a0 91 4d 04 	lds	r26, 0x044D
    1cdc:	b0 91 4e 04 	lds	r27, 0x044E
    1ce0:	b0 93 27 04 	sts	0x0427, r27
    1ce4:	a0 93 26 04 	sts	0x0426, r26
	if(*pwm_right >= 0) {
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	37 fd       	sbrc	r19, 7
    1cee:	89 c0       	rjmp	.+274    	; 0x1e02 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1cf0:	80 91 e5 03 	lds	r24, 0x03E5
    1cf4:	90 91 e6 03 	lds	r25, 0x03E6
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	48 1b       	sub	r20, r24
    1cfc:	59 0b       	sbc	r21, r25
    1cfe:	ca 01       	movw	r24, r20
    1d00:	50 93 4e 04 	sts	0x044E, r21
    1d04:	40 93 4d 04 	sts	0x044D, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1d08:	20 91 f5 03 	lds	r18, 0x03F5
    1d0c:	30 91 f6 03 	lds	r19, 0x03F6
    1d10:	28 0f       	add	r18, r24
    1d12:	39 1f       	adc	r19, r25
    1d14:	30 93 f6 03 	sts	0x03F6, r19
    1d18:	20 93 f5 03 	sts	0x03F5, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1d1c:	56 e0       	ldi	r21, 0x06	; 6
    1d1e:	21 34       	cpi	r18, 0x41	; 65
    1d20:	35 07       	cpc	r19, r21
    1d22:	0c f4       	brge	.+2      	; 0x1d26 <start_horizontal_speed_control_right+0x5a>
    1d24:	61 c0       	rjmp	.+194    	; 0x1de8 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1d26:	20 e4       	ldi	r18, 0x40	; 64
    1d28:	36 e0       	ldi	r19, 0x06	; 6
    1d2a:	30 93 f6 03 	sts	0x03F6, r19
    1d2e:	20 93 f5 03 	sts	0x03F5, r18
    1d32:	60 e8       	ldi	r22, 0x80	; 128
    1d34:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1d36:	9c 01       	movw	r18, r24
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	28 0f       	add	r18, r24
    1d3e:	39 1f       	adc	r19, r25
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	28 0f       	add	r18, r24
    1d4e:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    1d50:	40 81       	ld	r20, Z
    1d52:	51 81       	ldd	r21, Z+1	; 0x01
    1d54:	44 0f       	add	r20, r20
    1d56:	55 1f       	adc	r21, r21
    1d58:	44 0f       	add	r20, r20
    1d5a:	55 1f       	adc	r21, r21
    1d5c:	44 0f       	add	r20, r20
    1d5e:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1d60:	24 0f       	add	r18, r20
    1d62:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    1d64:	ad 01       	movw	r20, r26
    1d66:	48 1b       	sub	r20, r24
    1d68:	59 0b       	sbc	r21, r25
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	84 0f       	add	r24, r20
    1d72:	95 1f       	adc	r25, r21
    1d74:	28 0f       	add	r18, r24
    1d76:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    1d78:	26 0f       	add	r18, r22
    1d7a:	37 1f       	adc	r19, r23
    1d7c:	30 93 f0 03 	sts	0x03F0, r19
    1d80:	20 93 ef 03 	sts	0x03EF, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1d84:	37 fd       	sbrc	r19, 7
    1d86:	4c c0       	rjmp	.+152    	; 0x1e20 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1d88:	12 16       	cp	r1, r18
    1d8a:	13 06       	cpc	r1, r19
    1d8c:	0c f0       	brlt	.+2      	; 0x1d90 <start_horizontal_speed_control_right+0xc4>
    1d8e:	52 c0       	rjmp	.+164    	; 0x1e34 <start_horizontal_speed_control_right+0x168>
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	97 fd       	sbrc	r25, 7
    1d96:	67 c0       	rjmp	.+206    	; 0x1e66 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1d98:	5d e5       	ldi	r21, 0x5D	; 93
    1d9a:	21 3c       	cpi	r18, 0xC1	; 193
    1d9c:	35 07       	cpc	r19, r21
    1d9e:	0c f4       	brge	.+2      	; 0x1da2 <start_horizontal_speed_control_right+0xd6>
    1da0:	49 c0       	rjmp	.+146    	; 0x1e34 <start_horizontal_speed_control_right+0x168>
    1da2:	80 ec       	ldi	r24, 0xC0	; 192
    1da4:	9d e5       	ldi	r25, 0x5D	; 93
    1da6:	90 93 f0 03 	sts	0x03F0, r25
    1daa:	80 93 ef 03 	sts	0x03EF, r24
    1dae:	2c ed       	ldi	r18, 0xDC	; 220
    1db0:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    1db2:	22 5e       	subi	r18, 0xE2	; 226
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	31 83       	std	Z+1, r19	; 0x01
    1db8:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1dba:	42 e0       	ldi	r20, 0x02	; 2
    1dbc:	21 30       	cpi	r18, 0x01	; 1
    1dbe:	34 07       	cpc	r19, r20
    1dc0:	0c f4       	brge	.+2      	; 0x1dc4 <start_horizontal_speed_control_right+0xf8>
    1dc2:	48 c0       	rjmp	.+144    	; 0x1e54 <start_horizontal_speed_control_right+0x188>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	92 e0       	ldi	r25, 0x02	; 2
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1dce:	10 92 f6 03 	sts	0x03F6, r1
    1dd2:	10 92 f5 03 	sts	0x03F5, r1
		delta_right_speed_current = 0;
    1dd6:	10 92 4e 04 	sts	0x044E, r1
    1dda:	10 92 4d 04 	sts	0x044D, r1
		delta_right_speed_prev = 0;
    1dde:	10 92 27 04 	sts	0x0427, r1
    1de2:	10 92 26 04 	sts	0x0426, r1
		return;
    1de6:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1de8:	49 ef       	ldi	r20, 0xF9	; 249
    1dea:	20 3c       	cpi	r18, 0xC0	; 192
    1dec:	34 07       	cpc	r19, r20
    1dee:	a4 f4       	brge	.+40     	; 0x1e18 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    1df0:	20 ec       	ldi	r18, 0xC0	; 192
    1df2:	39 ef       	ldi	r19, 0xF9	; 249
    1df4:	30 93 f6 03 	sts	0x03F6, r19
    1df8:	20 93 f5 03 	sts	0x03F5, r18
    1dfc:	60 e8       	ldi	r22, 0x80	; 128
    1dfe:	73 ef       	ldi	r23, 0xF3	; 243
    1e00:	9a cf       	rjmp	.-204    	; 0x1d36 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1e02:	80 91 e5 03 	lds	r24, 0x03E5
    1e06:	90 91 e6 03 	lds	r25, 0x03E6
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	90 93 4e 04 	sts	0x044E, r25
    1e12:	80 93 4d 04 	sts	0x044D, r24
    1e16:	78 cf       	rjmp	.-272    	; 0x1d08 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    1e18:	b9 01       	movw	r22, r18
    1e1a:	66 0f       	add	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	8b cf       	rjmp	.-234    	; 0x1d36 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	97 fd       	sbrc	r25, 7
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    1e28:	10 92 f0 03 	sts	0x03F0, r1
    1e2c:	10 92 ef 03 	sts	0x03EF, r1
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1e34:	82 ea       	ldi	r24, 0xA2	; 162
    1e36:	20 34       	cpi	r18, 0x40	; 64
    1e38:	38 07       	cpc	r19, r24
    1e3a:	dc f4       	brge	.+54     	; 0x1e72 <start_horizontal_speed_control_right+0x1a6>
    1e3c:	80 e4       	ldi	r24, 0x40	; 64
    1e3e:	92 ea       	ldi	r25, 0xA2	; 162
    1e40:	90 93 f0 03 	sts	0x03F0, r25
    1e44:	80 93 ef 03 	sts	0x03EF, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1e48:	24 e2       	ldi	r18, 0x24	; 36
    1e4a:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    1e4c:	2e 51       	subi	r18, 0x1E	; 30
    1e4e:	30 40       	sbci	r19, 0x00	; 0
    1e50:	31 83       	std	Z+1, r19	; 0x01
    1e52:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1e54:	5e ef       	ldi	r21, 0xFE	; 254
    1e56:	20 30       	cpi	r18, 0x00	; 0
    1e58:	35 07       	cpc	r19, r21
    1e5a:	24 f4       	brge	.+8      	; 0x1e64 <start_horizontal_speed_control_right+0x198>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	9e ef       	ldi	r25, 0xFE	; 254
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	80 83       	st	Z, r24
    1e64:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1e66:	10 92 f0 03 	sts	0x03F0, r1
    1e6a:	10 92 ef 03 	sts	0x03EF, r1
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1e72:	35 95       	asr	r19
    1e74:	27 95       	ror	r18
    1e76:	35 95       	asr	r19
    1e78:	27 95       	ror	r18
    1e7a:	35 95       	asr	r19
    1e7c:	27 95       	ror	r18
    1e7e:	35 95       	asr	r19
    1e80:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1e82:	31 83       	std	Z+1, r19	; 0x01
    1e84:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    1e86:	12 16       	cp	r1, r18
    1e88:	13 06       	cpc	r1, r19
    1e8a:	0c f4       	brge	.+2      	; 0x1e8e <start_horizontal_speed_control_right+0x1c2>
    1e8c:	92 cf       	rjmp	.-220    	; 0x1db2 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    1e8e:	21 15       	cp	r18, r1
    1e90:	31 05       	cpc	r19, r1
    1e92:	e1 f6       	brne	.-72     	; 0x1e4c <start_horizontal_speed_control_right+0x180>
    1e94:	08 95       	ret

00001e96 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    1e96:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <start_horizontal_speed_control_left+0xc>
    1ea0:	7b c0       	rjmp	.+246    	; 0x1f98 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1ea2:	a0 91 24 04 	lds	r26, 0x0424
    1ea6:	b0 91 25 04 	lds	r27, 0x0425
    1eaa:	b0 93 3f 04 	sts	0x043F, r27
    1eae:	a0 93 3e 04 	sts	0x043E, r26
	if(*pwm_left >= 0) {
    1eb2:	20 81       	ld	r18, Z
    1eb4:	31 81       	ldd	r19, Z+1	; 0x01
    1eb6:	37 fd       	sbrc	r19, 7
    1eb8:	89 c0       	rjmp	.+274    	; 0x1fcc <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1eba:	80 91 e3 03 	lds	r24, 0x03E3
    1ebe:	90 91 e4 03 	lds	r25, 0x03E4
    1ec2:	a9 01       	movw	r20, r18
    1ec4:	48 1b       	sub	r20, r24
    1ec6:	59 0b       	sbc	r21, r25
    1ec8:	ca 01       	movw	r24, r20
    1eca:	50 93 25 04 	sts	0x0425, r21
    1ece:	40 93 24 04 	sts	0x0424, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1ed2:	20 91 f3 03 	lds	r18, 0x03F3
    1ed6:	30 91 f4 03 	lds	r19, 0x03F4
    1eda:	28 0f       	add	r18, r24
    1edc:	39 1f       	adc	r19, r25
    1ede:	30 93 f4 03 	sts	0x03F4, r19
    1ee2:	20 93 f3 03 	sts	0x03F3, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    1ee6:	56 e0       	ldi	r21, 0x06	; 6
    1ee8:	21 34       	cpi	r18, 0x41	; 65
    1eea:	35 07       	cpc	r19, r21
    1eec:	0c f4       	brge	.+2      	; 0x1ef0 <start_horizontal_speed_control_left+0x5a>
    1eee:	61 c0       	rjmp	.+194    	; 0x1fb2 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    1ef0:	20 e4       	ldi	r18, 0x40	; 64
    1ef2:	36 e0       	ldi	r19, 0x06	; 6
    1ef4:	30 93 f4 03 	sts	0x03F4, r19
    1ef8:	20 93 f3 03 	sts	0x03F3, r18
    1efc:	60 e8       	ldi	r22, 0x80	; 128
    1efe:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1f00:	9c 01       	movw	r18, r24
    1f02:	22 0f       	add	r18, r18
    1f04:	33 1f       	adc	r19, r19
    1f06:	28 0f       	add	r18, r24
    1f08:	39 1f       	adc	r19, r25
    1f0a:	22 0f       	add	r18, r18
    1f0c:	33 1f       	adc	r19, r19
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	28 0f       	add	r18, r24
    1f18:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	44 0f       	add	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	44 0f       	add	r20, r20
    1f24:	55 1f       	adc	r21, r21
    1f26:	44 0f       	add	r20, r20
    1f28:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    1f2a:	24 0f       	add	r18, r20
    1f2c:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    1f2e:	ad 01       	movw	r20, r26
    1f30:	48 1b       	sub	r20, r24
    1f32:	59 0b       	sbc	r21, r25
    1f34:	ca 01       	movw	r24, r20
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	84 0f       	add	r24, r20
    1f3c:	95 1f       	adc	r25, r21
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    1f42:	26 0f       	add	r18, r22
    1f44:	37 1f       	adc	r19, r23
    1f46:	30 93 f2 03 	sts	0x03F2, r19
    1f4a:	20 93 f1 03 	sts	0x03F1, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1f4e:	37 fd       	sbrc	r19, 7
    1f50:	4c c0       	rjmp	.+152    	; 0x1fea <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1f52:	12 16       	cp	r1, r18
    1f54:	13 06       	cpc	r1, r19
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <start_horizontal_speed_control_left+0xc4>
    1f58:	52 c0       	rjmp	.+164    	; 0x1ffe <start_horizontal_speed_control_left+0x168>
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	97 fd       	sbrc	r25, 7
    1f60:	67 c0       	rjmp	.+206    	; 0x2030 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1f62:	5d e5       	ldi	r21, 0x5D	; 93
    1f64:	21 3c       	cpi	r18, 0xC1	; 193
    1f66:	35 07       	cpc	r19, r21
    1f68:	0c f4       	brge	.+2      	; 0x1f6c <start_horizontal_speed_control_left+0xd6>
    1f6a:	49 c0       	rjmp	.+146    	; 0x1ffe <start_horizontal_speed_control_left+0x168>
    1f6c:	80 ec       	ldi	r24, 0xC0	; 192
    1f6e:	9d e5       	ldi	r25, 0x5D	; 93
    1f70:	90 93 f2 03 	sts	0x03F2, r25
    1f74:	80 93 f1 03 	sts	0x03F1, r24
    1f78:	2c ed       	ldi	r18, 0xDC	; 220
    1f7a:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    1f7c:	22 5e       	subi	r18, 0xE2	; 226
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	31 83       	std	Z+1, r19	; 0x01
    1f82:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1f84:	42 e0       	ldi	r20, 0x02	; 2
    1f86:	21 30       	cpi	r18, 0x01	; 1
    1f88:	34 07       	cpc	r19, r20
    1f8a:	0c f4       	brge	.+2      	; 0x1f8e <start_horizontal_speed_control_left+0xf8>
    1f8c:	48 c0       	rjmp	.+144    	; 0x201e <start_horizontal_speed_control_left+0x188>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1f98:	10 92 f4 03 	sts	0x03F4, r1
    1f9c:	10 92 f3 03 	sts	0x03F3, r1
		delta_left_speed_current = 0;
    1fa0:	10 92 25 04 	sts	0x0425, r1
    1fa4:	10 92 24 04 	sts	0x0424, r1
		delta_left_speed_prev = 0;
    1fa8:	10 92 3f 04 	sts	0x043F, r1
    1fac:	10 92 3e 04 	sts	0x043E, r1
		return;
    1fb0:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1fb2:	49 ef       	ldi	r20, 0xF9	; 249
    1fb4:	20 3c       	cpi	r18, 0xC0	; 192
    1fb6:	34 07       	cpc	r19, r20
    1fb8:	a4 f4       	brge	.+40     	; 0x1fe2 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    1fba:	20 ec       	ldi	r18, 0xC0	; 192
    1fbc:	39 ef       	ldi	r19, 0xF9	; 249
    1fbe:	30 93 f4 03 	sts	0x03F4, r19
    1fc2:	20 93 f3 03 	sts	0x03F3, r18
    1fc6:	60 e8       	ldi	r22, 0x80	; 128
    1fc8:	73 ef       	ldi	r23, 0xF3	; 243
    1fca:	9a cf       	rjmp	.-204    	; 0x1f00 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1fcc:	80 91 e3 03 	lds	r24, 0x03E3
    1fd0:	90 91 e4 03 	lds	r25, 0x03E4
    1fd4:	82 0f       	add	r24, r18
    1fd6:	93 1f       	adc	r25, r19
    1fd8:	90 93 25 04 	sts	0x0425, r25
    1fdc:	80 93 24 04 	sts	0x0424, r24
    1fe0:	78 cf       	rjmp	.-272    	; 0x1ed2 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	66 0f       	add	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	8b cf       	rjmp	.-234    	; 0x1f00 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	97 fd       	sbrc	r25, 7
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    1ff2:	10 92 f2 03 	sts	0x03F2, r1
    1ff6:	10 92 f1 03 	sts	0x03F1, r1
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1ffe:	82 ea       	ldi	r24, 0xA2	; 162
    2000:	20 34       	cpi	r18, 0x40	; 64
    2002:	38 07       	cpc	r19, r24
    2004:	dc f4       	brge	.+54     	; 0x203c <start_horizontal_speed_control_left+0x1a6>
    2006:	80 e4       	ldi	r24, 0x40	; 64
    2008:	92 ea       	ldi	r25, 0xA2	; 162
    200a:	90 93 f2 03 	sts	0x03F2, r25
    200e:	80 93 f1 03 	sts	0x03F1, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2012:	24 e2       	ldi	r18, 0x24	; 36
    2014:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2016:	2e 51       	subi	r18, 0x1E	; 30
    2018:	30 40       	sbci	r19, 0x00	; 0
    201a:	31 83       	std	Z+1, r19	; 0x01
    201c:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    201e:	5e ef       	ldi	r21, 0xFE	; 254
    2020:	20 30       	cpi	r18, 0x00	; 0
    2022:	35 07       	cpc	r19, r21
    2024:	24 f4       	brge	.+8      	; 0x202e <start_horizontal_speed_control_left+0x198>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	9e ef       	ldi	r25, 0xFE	; 254
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
    202e:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2030:	10 92 f2 03 	sts	0x03F2, r1
    2034:	10 92 f1 03 	sts	0x03F1, r1
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    203c:	35 95       	asr	r19
    203e:	27 95       	ror	r18
    2040:	35 95       	asr	r19
    2042:	27 95       	ror	r18
    2044:	35 95       	asr	r19
    2046:	27 95       	ror	r18
    2048:	35 95       	asr	r19
    204a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    204c:	31 83       	std	Z+1, r19	; 0x01
    204e:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    2050:	12 16       	cp	r1, r18
    2052:	13 06       	cpc	r1, r19
    2054:	0c f4       	brge	.+2      	; 0x2058 <start_horizontal_speed_control_left+0x1c2>
    2056:	92 cf       	rjmp	.-220    	; 0x1f7c <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2058:	21 15       	cp	r18, r1
    205a:	31 05       	cpc	r19, r1
    205c:	e1 f6       	brne	.-72     	; 0x2016 <start_horizontal_speed_control_left+0x180>
    205e:	08 95       	ret

00002060 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2060:	85 b7       	in	r24, 0x35	; 53
    2062:	80 61       	ori	r24, 0x10	; 16
    2064:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    206a:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    206c:	97 ef       	ldi	r25, 0xF7	; 247
    206e:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    2070:	20 ee       	ldi	r18, 0xE0	; 224
    2072:	25 b9       	out	0x05, r18	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    2074:	20 ef       	ldi	r18, 0xF0	; 240
    2076:	27 b9       	out	0x07, r18	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2078:	20 eb       	ldi	r18, 0xB0	; 176
    207a:	28 b9       	out	0x08, r18	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    207c:	2c ef       	ldi	r18, 0xFC	; 252
    207e:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0x03;			// default for unused pins is 0
    2080:	23 e0       	ldi	r18, 0x03	; 3
    2082:	2b b9       	out	0x0b, r18	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2084:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2086:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    2088:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    208a:	83 bb       	out	0x13, r24	; 19
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;		// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    208c:	28 e0       	ldi	r18, 0x08	; 8
    208e:	24 bb       	out	0x14, r18	; 20
	#endif	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    2090:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2094:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    2098:	2f e0       	ldi	r18, 0x0F	; 15
    209a:	20 93 04 01 	sts	0x0104, r18
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	#endif
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
    209e:	20 93 05 01 	sts	0x0105, r18
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;			// adc channel pins as input
    20a2:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    20a6:	80 93 0a 01 	sts	0x010A, r24
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    20aa:	90 93 0b 01 	sts	0x010B, r25
	#endif
		
}
    20ae:	08 95       	ret

000020b0 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    20b0:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    20b4:	10 92 bc 00 	sts	0x00BC, r1
}
    20b8:	08 95       	ret

000020ba <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    20ba:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    20bc:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    20be:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    20c2:	80 e2       	ldi	r24, 0x20	; 32
    20c4:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    20c8:	08 95       	ret

000020ca <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    20ca:	94 ea       	ldi	r25, 0xA4	; 164
    20cc:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    20d0:	90 91 bc 00 	lds	r25, 0x00BC
    20d4:	97 ff       	sbrs	r25, 7
    20d6:	fc cf       	rjmp	.-8      	; 0x20d0 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    20d8:	90 91 b9 00 	lds	r25, 0x00B9
    20dc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    20de:	98 30       	cpi	r25, 0x08	; 8
    20e0:	21 f0       	breq	.+8      	; 0x20ea <i2c_start+0x20>
    20e2:	90 31       	cpi	r25, 0x10	; 16
    20e4:	11 f0       	breq	.+4      	; 0x20ea <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	08 95       	ret
	}

	// send device address
	TWDR = address;
    20ea:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    20ee:	84 e8       	ldi	r24, 0x84	; 132
    20f0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    20f4:	80 91 bc 00 	lds	r24, 0x00BC
    20f8:	87 ff       	sbrs	r24, 7
    20fa:	fc cf       	rjmp	.-8      	; 0x20f4 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    20fc:	90 91 b9 00 	lds	r25, 0x00B9
    2100:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2102:	98 31       	cpi	r25, 0x18	; 24
    2104:	21 f0       	breq	.+8      	; 0x210e <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 34       	cpi	r25, 0x40	; 64
    210a:	19 f0       	breq	.+6      	; 0x2112 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    210c:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    210e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2110:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	08 95       	ret

00002116 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2116:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2118:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    211a:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    211c:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2120:	90 91 bc 00 	lds	r25, 0x00BC
    2124:	97 ff       	sbrs	r25, 7
    2126:	fc cf       	rjmp	.-8      	; 0x2120 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2128:	90 91 b9 00 	lds	r25, 0x00B9
    212c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    212e:	98 30       	cpi	r25, 0x08	; 8
    2130:	11 f0       	breq	.+4      	; 0x2136 <i2c_start_wait+0x20>
    2132:	90 31       	cpi	r25, 0x10	; 16
    2134:	99 f7       	brne	.-26     	; 0x211c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2136:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    213a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    213e:	90 91 bc 00 	lds	r25, 0x00BC
    2142:	97 ff       	sbrs	r25, 7
    2144:	fc cf       	rjmp	.-8      	; 0x213e <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2146:	90 91 b9 00 	lds	r25, 0x00B9
    214a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    214c:	90 32       	cpi	r25, 0x20	; 32
    214e:	19 f0       	breq	.+6      	; 0x2156 <i2c_start_wait+0x40>
    2150:	98 35       	cpi	r25, 0x58	; 88
    2152:	09 f0       	breq	.+2      	; 0x2156 <i2c_start_wait+0x40>
    2154:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2156:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    215a:	90 91 bc 00 	lds	r25, 0x00BC
    215e:	94 fd       	sbrc	r25, 4
    2160:	fc cf       	rjmp	.-8      	; 0x215a <i2c_start_wait+0x44>
    2162:	dc cf       	rjmp	.-72     	; 0x211c <i2c_start_wait+0x6>

00002164 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2164:	94 ea       	ldi	r25, 0xA4	; 164
    2166:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    216a:	90 91 bc 00 	lds	r25, 0x00BC
    216e:	97 ff       	sbrs	r25, 7
    2170:	fc cf       	rjmp	.-8      	; 0x216a <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2172:	90 91 b9 00 	lds	r25, 0x00B9
    2176:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2178:	98 30       	cpi	r25, 0x08	; 8
    217a:	21 f0       	breq	.+8      	; 0x2184 <i2c_rep_start+0x20>
    217c:	90 31       	cpi	r25, 0x10	; 16
    217e:	11 f0       	breq	.+4      	; 0x2184 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2184:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2188:	84 e8       	ldi	r24, 0x84	; 132
    218a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    218e:	80 91 bc 00 	lds	r24, 0x00BC
    2192:	87 ff       	sbrs	r24, 7
    2194:	fc cf       	rjmp	.-8      	; 0x218e <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2196:	90 91 b9 00 	lds	r25, 0x00B9
    219a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    219c:	98 31       	cpi	r25, 0x18	; 24
    219e:	21 f0       	breq	.+8      	; 0x21a8 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 34       	cpi	r25, 0x40	; 64
    21a4:	19 f0       	breq	.+6      	; 0x21ac <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    21a6:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    21a8:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    21aa:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	08 95       	ret

000021b0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    21b0:	84 e9       	ldi	r24, 0x94	; 148
    21b2:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    21b6:	80 91 bc 00 	lds	r24, 0x00BC
    21ba:	84 fd       	sbrc	r24, 4
    21bc:	fc cf       	rjmp	.-8      	; 0x21b6 <i2c_stop+0x6>

}/* i2c_stop */
    21be:	08 95       	ret

000021c0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    21c0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    21c4:	84 e8       	ldi	r24, 0x84	; 132
    21c6:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    21ca:	80 91 bc 00 	lds	r24, 0x00BC
    21ce:	87 ff       	sbrs	r24, 7
    21d0:	fc cf       	rjmp	.-8      	; 0x21ca <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    21d2:	90 91 b9 00 	lds	r25, 0x00B9
    21d6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	98 32       	cpi	r25, 0x28	; 40
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    21de:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    21e0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    21e2:	08 95       	ret

000021e4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    21e4:	84 ec       	ldi	r24, 0xC4	; 196
    21e6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    21ea:	80 91 bc 00 	lds	r24, 0x00BC
    21ee:	87 ff       	sbrs	r24, 7
    21f0:	fc cf       	rjmp	.-8      	; 0x21ea <i2c_readAck+0x6>

    return TWDR;
    21f2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    21f6:	08 95       	ret

000021f8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    21f8:	84 e8       	ldi	r24, 0x84	; 132
    21fa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    21fe:	80 91 bc 00 	lds	r24, 0x00BC
    2202:	87 ff       	sbrs	r24, 7
    2204:	fc cf       	rjmp	.-8      	; 0x21fe <i2c_readNak+0x6>
	
    return TWDR;
    2206:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    220a:	08 95       	ret

0000220c <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    220c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2210:	80 e1       	ldi	r24, 0x10	; 16
    2212:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2216:	e0 ec       	ldi	r30, 0xC0	; 192
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	82 60       	ori	r24, 0x02	; 2
    221e:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2220:	e1 ec       	ldi	r30, 0xC1	; 193
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	88 69       	ori	r24, 0x98	; 152
    2228:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    222a:	e2 ec       	ldi	r30, 0xC2	; 194
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	86 60       	ori	r24, 0x06	; 6
    2232:	80 83       	st	Z, r24

}
    2234:	08 95       	ret

00002236 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    2236:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    223a:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    223e:	10 92 c2 00 	sts	0x00C2, r1

}
    2242:	08 95       	ret

00002244 <usartTransmit>:

void usartTransmit(unsigned char data) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2244:	90 91 c0 00 	lds	r25, 0x00C0
    2248:	95 ff       	sbrs	r25, 5
    224a:	fc cf       	rjmp	.-8      	; 0x2244 <usartTransmit>
	UDR0 = data;						// put data into buffer, sends the data
    224c:	80 93 c6 00 	sts	0x00C6, r24

}
    2250:	08 95       	ret

00002252 <__vector_25>:
// for options 0,1,2 there are the commands "+" and "-" that increase or decrease the luminosity of the leds
// for options 3,4 there are the commmands "+", "-" and "s" to increase, decrease and reset to zero the speed respectively
// for options 5 there is the command "s" that stop the sending of the adc values
// if a key is pressed that do not correspond to any commands for that option, then the initial menu is entered.

ISR(USART0_RX_vect) {
    2252:	1f 92       	push	r1
    2254:	0f 92       	push	r0
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	0f 92       	push	r0
    225a:	11 24       	eor	r1, r1
    225c:	2f 93       	push	r18
    225e:	8f 93       	push	r24
    2260:	9f 93       	push	r25

	char receivedByte = UDR0;
    2262:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {						// menu
    2266:	90 91 10 02 	lds	r25, 0x0210
    226a:	99 23       	and	r25, r25
    226c:	b9 f0       	breq	.+46     	; 0x229c <__vector_25+0x4a>
		switch(receivedByte) {
    226e:	82 33       	cpi	r24, 0x32	; 50
    2270:	09 f4       	brne	.+2      	; 0x2274 <__vector_25+0x22>
    2272:	5b c0       	rjmp	.+182    	; 0x232a <__vector_25+0xd8>
    2274:	83 33       	cpi	r24, 0x33	; 51
    2276:	80 f5       	brcc	.+96     	; 0x22d8 <__vector_25+0x86>
    2278:	80 33       	cpi	r24, 0x30	; 48
    227a:	09 f4       	brne	.+2      	; 0x227e <__vector_25+0x2c>
    227c:	7e c0       	rjmp	.+252    	; 0x237a <__vector_25+0x128>
    227e:	81 33       	cpi	r24, 0x31	; 49
    2280:	29 f4       	brne	.+10     	; 0x228c <__vector_25+0x3a>
			case '0': 							// red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': 							// green led
				peripheralChoice = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2288:	10 92 10 02 	sts	0x0210, r1

	}



}
    228c:	9f 91       	pop	r25
    228e:	8f 91       	pop	r24
    2290:	2f 91       	pop	r18
    2292:	0f 90       	pop	r0
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	0f 90       	pop	r0
    2298:	1f 90       	pop	r1
    229a:	18 95       	reti

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    229c:	90 91 0f 02 	lds	r25, 0x020F
    22a0:	92 30       	cpi	r25, 0x02	; 2
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <__vector_25+0x54>
    22a4:	48 c0       	rjmp	.+144    	; 0x2336 <__vector_25+0xe4>
    22a6:	93 30       	cpi	r25, 0x03	; 3
    22a8:	40 f1       	brcs	.+80     	; 0x22fa <__vector_25+0xa8>
    22aa:	94 30       	cpi	r25, 0x04	; 4
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <__vector_25+0x5e>
    22ae:	8c c0       	rjmp	.+280    	; 0x23c8 <__vector_25+0x176>
    22b0:	94 30       	cpi	r25, 0x04	; 4
    22b2:	08 f4       	brcc	.+2      	; 0x22b6 <__vector_25+0x64>
    22b4:	73 c0       	rjmp	.+230    	; 0x239c <__vector_25+0x14a>
    22b6:	95 30       	cpi	r25, 0x05	; 5
    22b8:	49 f7       	brne	.-46     	; 0x228c <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: 								// adc
				if(receivedByte == 's') {
    22ba:	83 37       	cpi	r24, 0x73	; 115
    22bc:	39 f7       	brne	.-50     	; 0x228c <__vector_25+0x3a>
					sendAdcValues = 0;
    22be:	10 92 00 04 	sts	0x0400, r1
					choosePeripheral = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	80 93 10 02 	sts	0x0210, r24

	}



}
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	2f 91       	pop	r18
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	0f 90       	pop	r0
    22d4:	1f 90       	pop	r1
    22d6:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
    22d8:	84 33       	cpi	r24, 0x34	; 52
    22da:	09 f4       	brne	.+2      	; 0x22de <__vector_25+0x8c>
    22dc:	59 c0       	rjmp	.+178    	; 0x2390 <__vector_25+0x13e>
    22de:	84 33       	cpi	r24, 0x34	; 52
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <__vector_25+0x92>
    22e2:	50 c0       	rjmp	.+160    	; 0x2384 <__vector_25+0x132>
    22e4:	85 33       	cpi	r24, 0x35	; 53
    22e6:	91 f6       	brne	.-92     	; 0x228c <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':							// send adc values
				peripheralChoice = 5;
    22e8:	85 e0       	ldi	r24, 0x05	; 5
    22ea:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    22ee:	10 92 10 02 	sts	0x0210, r1
				sendAdcValues = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 00 04 	sts	0x0400, r24
				break;
    22f8:	c9 cf       	rjmp	.-110    	; 0x228c <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    22fa:	99 23       	and	r25, r25
    22fc:	91 f5       	brne	.+100    	; 0x2362 <__vector_25+0x110>
			case 0:								// red led
				if(receivedByte == '-') {
    22fe:	8d 32       	cpi	r24, 0x2D	; 45
    2300:	09 f4       	brne	.+2      	; 0x2304 <__vector_25+0xb2>
    2302:	d5 c0       	rjmp	.+426    	; 0x24ae <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2304:	8b 32       	cpi	r24, 0x2B	; 43
    2306:	e9 f6       	brne	.-70     	; 0x22c2 <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2308:	80 91 0c 02 	lds	r24, 0x020C
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2310:	97 fd       	sbrc	r25, 7
    2312:	3f c1       	rjmp	.+638    	; 0x2592 <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2314:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_red == 0) {
    2318:	88 23       	and	r24, r24
    231a:	09 f4       	brne	.+2      	; 0x231e <__vector_25+0xcc>
    231c:	3c c1       	rjmp	.+632    	; 0x2596 <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	90 93 89 00 	sts	0x0089, r25
    2324:	80 93 88 00 	sts	0x0088, r24
    2328:	b1 cf       	rjmp	.-158    	; 0x228c <__vector_25+0x3a>
			case '1': 							// green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': 							// blue led
				peripheralChoice = 2;
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2330:	10 92 10 02 	sts	0x0210, r1
				break;
    2334:	ab cf       	rjmp	.-170    	; 0x228c <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
    2336:	8d 32       	cpi	r24, 0x2D	; 45
    2338:	09 f4       	brne	.+2      	; 0x233c <__vector_25+0xea>
    233a:	e8 c0       	rjmp	.+464    	; 0x250c <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    233c:	8b 32       	cpi	r24, 0x2B	; 43
    233e:	09 f6       	brne	.-126    	; 0x22c2 <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2340:	80 91 0e 02 	lds	r24, 0x020E
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2348:	97 fd       	sbrc	r25, 7
    234a:	35 c1       	rjmp	.+618    	; 0x25b6 <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    234c:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_blue == 0) {
    2350:	88 23       	and	r24, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <__vector_25+0x104>
    2354:	32 c1       	rjmp	.+612    	; 0x25ba <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	90 93 8d 00 	sts	0x008D, r25
    235c:	80 93 8c 00 	sts	0x008C, r24
    2360:	95 cf       	rjmp	.-214    	; 0x228c <__vector_25+0x3a>

	} else {									// commands availables for the menu option
	
		int current_pwm=0;

		switch(peripheralChoice) {
    2362:	91 30       	cpi	r25, 0x01	; 1
    2364:	09 f0       	breq	.+2      	; 0x2368 <__vector_25+0x116>
    2366:	92 cf       	rjmp	.-220    	; 0x228c <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
    2368:	8d 32       	cpi	r24, 0x2D	; 45
    236a:	09 f4       	brne	.+2      	; 0x236e <__vector_25+0x11c>
    236c:	89 c0       	rjmp	.+274    	; 0x2480 <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    236e:	8b 32       	cpi	r24, 0x2B	; 43
    2370:	09 f4       	brne	.+2      	; 0x2374 <__vector_25+0x122>
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2374:	90 93 10 02 	sts	0x0210, r25
    2378:	89 cf       	rjmp	.-238    	; 0x228c <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {						// menu
		switch(receivedByte) {
			case '0': 							// red led
				peripheralChoice = 0;
    237a:	10 92 0f 02 	sts	0x020F, r1
				choosePeripheral = 0;
    237e:	10 92 10 02 	sts	0x0210, r1
				break;
    2382:	84 cf       	rjmp	.-248    	; 0x228c <__vector_25+0x3a>
			case '2': 							// blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': 							// right motor
				peripheralChoice = 3;
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    238a:	10 92 10 02 	sts	0x0210, r1
				break;
    238e:	7e cf       	rjmp	.-260    	; 0x228c <__vector_25+0x3a>
			case '4': 							// left motor
				peripheralChoice = 4;
    2390:	84 e0       	ldi	r24, 0x04	; 4
    2392:	80 93 0f 02 	sts	0x020F, r24
				choosePeripheral = 0;
    2396:	10 92 10 02 	sts	0x0210, r1
				break;
    239a:	78 cf       	rjmp	.-272    	; 0x228c <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
    239c:	8b 32       	cpi	r24, 0x2B	; 43
    239e:	09 f4       	brne	.+2      	; 0x23a2 <__vector_25+0x150>
    23a0:	cc c0       	rjmp	.+408    	; 0x253a <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    23a2:	8d 32       	cpi	r24, 0x2D	; 45
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <__vector_25+0x156>
    23a6:	51 c0       	rjmp	.+162    	; 0x244a <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    23a8:	83 37       	cpi	r24, 0x73	; 115
    23aa:	09 f0       	breq	.+2      	; 0x23ae <__vector_25+0x15c>
    23ac:	8a cf       	rjmp	.-236    	; 0x22c2 <__vector_25+0x70>
					pwm_right = 0;
    23ae:	10 92 e8 03 	sts	0x03E8, r1
    23b2:	10 92 e7 03 	sts	0x03E7, r1
					OCR3A = 0;
    23b6:	10 92 99 00 	sts	0x0099, r1
    23ba:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    23be:	10 92 9b 00 	sts	0x009B, r1
    23c2:	10 92 9a 00 	sts	0x009A, r1
    23c6:	62 cf       	rjmp	.-316    	; 0x228c <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
    23c8:	8b 32       	cpi	r24, 0x2B	; 43
    23ca:	09 f4       	brne	.+2      	; 0x23ce <__vector_25+0x17c>
    23cc:	87 c0       	rjmp	.+270    	; 0x24dc <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    23ce:	8d 32       	cpi	r24, 0x2D	; 45
    23d0:	09 f1       	breq	.+66     	; 0x2414 <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    23d2:	83 37       	cpi	r24, 0x73	; 115
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <__vector_25+0x186>
    23d6:	75 cf       	rjmp	.-278    	; 0x22c2 <__vector_25+0x70>
					pwm_left = 0;
    23d8:	10 92 ea 03 	sts	0x03EA, r1
    23dc:	10 92 e9 03 	sts	0x03E9, r1
					OCR4A = 0;
    23e0:	10 92 a9 00 	sts	0x00A9, r1
    23e4:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    23e8:	10 92 ab 00 	sts	0x00AB, r1
    23ec:	10 92 aa 00 	sts	0x00AA, r1
    23f0:	4d cf       	rjmp	.-358    	; 0x228c <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    23f2:	80 91 0d 02 	lds	r24, 0x020D
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    23fa:	97 fd       	sbrc	r25, 7
    23fc:	d3 c0       	rjmp	.+422    	; 0x25a4 <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    23fe:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_green == 0) {
    2402:	88 23       	and	r24, r24
    2404:	09 f4       	brne	.+2      	; 0x2408 <__vector_25+0x1b6>
    2406:	d0 c0       	rjmp	.+416    	; 0x25a8 <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	90 93 8b 00 	sts	0x008B, r25
    240e:	80 93 8a 00 	sts	0x008A, r24
    2412:	3c cf       	rjmp	.-392    	; 0x228c <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2414:	80 91 e9 03 	lds	r24, 0x03E9
    2418:	90 91 ea 03 	lds	r25, 0x03EA
    241c:	4e 97       	sbiw	r24, 0x1e	; 30
    241e:	90 93 ea 03 	sts	0x03EA, r25
    2422:	80 93 e9 03 	sts	0x03E9, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2426:	2c ef       	ldi	r18, 0xFC	; 252
    2428:	80 30       	cpi	r24, 0x00	; 0
    242a:	92 07       	cpc	r25, r18
    242c:	0c f0       	brlt	.+2      	; 0x2430 <__vector_25+0x1de>
    242e:	cc c0       	rjmp	.+408    	; 0x25c8 <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	9c ef       	ldi	r25, 0xFC	; 252
    2434:	90 93 ea 03 	sts	0x03EA, r25
    2438:	80 93 e9 03 	sts	0x03E9, r24
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2440:	90 93 ab 00 	sts	0x00AB, r25
    2444:	80 93 aa 00 	sts	0x00AA, r24
    2448:	21 cf       	rjmp	.-446    	; 0x228c <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    244a:	80 91 e7 03 	lds	r24, 0x03E7
    244e:	90 91 e8 03 	lds	r25, 0x03E8
    2452:	4e 97       	sbiw	r24, 0x1e	; 30
    2454:	90 93 e8 03 	sts	0x03E8, r25
    2458:	80 93 e7 03 	sts	0x03E7, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    245c:	2c ef       	ldi	r18, 0xFC	; 252
    245e:	80 30       	cpi	r24, 0x00	; 0
    2460:	92 07       	cpc	r25, r18
    2462:	0c f0       	brlt	.+2      	; 0x2466 <__vector_25+0x214>
    2464:	b7 c0       	rjmp	.+366    	; 0x25d4 <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	9c ef       	ldi	r25, 0xFC	; 252
    246a:	90 93 e8 03 	sts	0x03E8, r25
    246e:	80 93 e7 03 	sts	0x03E7, r24
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2476:	90 93 9b 00 	sts	0x009B, r25
    247a:	80 93 9a 00 	sts	0x009A, r24
    247e:	06 cf       	rjmp	.-500    	; 0x228c <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:								// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2480:	80 91 80 00 	lds	r24, 0x0080
    2484:	80 62       	ori	r24, 0x20	; 32
    2486:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    248a:	80 91 0d 02 	lds	r24, 0x020D
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2492:	8f 3f       	cpi	r24, 0xFF	; 255
    2494:	91 05       	cpc	r25, r1
    2496:	19 f0       	breq	.+6      	; 0x249e <__vector_25+0x24c>
    2498:	14 f0       	brlt	.+4      	; 0x249e <__vector_25+0x24c>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	80 93 0d 02 	sts	0x020D, r24
					OCR1B = pwm_green;
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	90 93 8b 00 	sts	0x008B, r25
    24a8:	80 93 8a 00 	sts	0x008A, r24
    24ac:	ef ce       	rjmp	.-546    	; 0x228c <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:								// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    24ae:	80 91 80 00 	lds	r24, 0x0080
    24b2:	80 68       	ori	r24, 0x80	; 128
    24b4:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    24b8:	80 91 0c 02 	lds	r24, 0x020C
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    24c0:	8f 3f       	cpi	r24, 0xFF	; 255
    24c2:	91 05       	cpc	r25, r1
    24c4:	19 f0       	breq	.+6      	; 0x24cc <__vector_25+0x27a>
    24c6:	14 f0       	brlt	.+4      	; 0x24cc <__vector_25+0x27a>
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	80 93 0c 02 	sts	0x020C, r24
					OCR1A = pwm_red;
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	90 93 89 00 	sts	0x0089, r25
    24d6:	80 93 88 00 	sts	0x0088, r24
    24da:	d8 ce       	rjmp	.-592    	; 0x228c <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: 								// left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    24dc:	80 91 e9 03 	lds	r24, 0x03E9
    24e0:	90 91 ea 03 	lds	r25, 0x03EA
    24e4:	4e 96       	adiw	r24, 0x1e	; 30
    24e6:	90 93 ea 03 	sts	0x03EA, r25
    24ea:	80 93 e9 03 	sts	0x03E9, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    24ee:	24 e0       	ldi	r18, 0x04	; 4
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	92 07       	cpc	r25, r18
    24f4:	d4 f1       	brlt	.+116    	; 0x256a <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	94 e0       	ldi	r25, 0x04	; 4
    24fa:	90 93 ea 03 	sts	0x03EA, r25
    24fe:	80 93 e9 03 	sts	0x03E9, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2502:	90 93 a9 00 	sts	0x00A9, r25
    2506:	80 93 a8 00 	sts	0x00A8, r24
    250a:	c0 ce       	rjmp	.-640    	; 0x228c <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: 							// blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    250c:	80 91 80 00 	lds	r24, 0x0080
    2510:	88 60       	ori	r24, 0x08	; 8
    2512:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2516:	80 91 0e 02 	lds	r24, 0x020E
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    251e:	8f 3f       	cpi	r24, 0xFF	; 255
    2520:	91 05       	cpc	r25, r1
    2522:	19 f0       	breq	.+6      	; 0x252a <__vector_25+0x2d8>
    2524:	14 f0       	brlt	.+4      	; 0x252a <__vector_25+0x2d8>
    2526:	8f ef       	ldi	r24, 0xFF	; 255
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	80 93 0e 02 	sts	0x020E, r24
					OCR1C = pwm_blue;
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	90 93 8d 00 	sts	0x008D, r25
    2534:	80 93 8c 00 	sts	0x008C, r24
    2538:	a9 ce       	rjmp	.-686    	; 0x228c <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: 								// right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    253a:	80 91 e7 03 	lds	r24, 0x03E7
    253e:	90 91 e8 03 	lds	r25, 0x03E8
    2542:	4e 96       	adiw	r24, 0x1e	; 30
    2544:	90 93 e8 03 	sts	0x03E8, r25
    2548:	80 93 e7 03 	sts	0x03E7, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    254c:	24 e0       	ldi	r18, 0x04	; 4
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	92 07       	cpc	r25, r18
    2552:	ac f0       	brlt	.+42     	; 0x257e <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	94 e0       	ldi	r25, 0x04	; 4
    2558:	90 93 e8 03 	sts	0x03E8, r25
    255c:	80 93 e7 03 	sts	0x03E7, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    2560:	90 93 99 00 	sts	0x0099, r25
    2564:	80 93 98 00 	sts	0x0098, r24
    2568:	91 ce       	rjmp	.-734    	; 0x228c <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    256a:	97 ff       	sbrs	r25, 7
    256c:	ca cf       	rjmp	.-108    	; 0x2502 <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    256e:	90 95       	com	r25
    2570:	81 95       	neg	r24
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	90 93 ab 00 	sts	0x00AB, r25
    2578:	80 93 aa 00 	sts	0x00AA, r24
    257c:	87 ce       	rjmp	.-754    	; 0x228c <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    257e:	97 ff       	sbrs	r25, 7
    2580:	ef cf       	rjmp	.-34     	; 0x2560 <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    2582:	90 95       	com	r25
    2584:	81 95       	neg	r24
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	90 93 9b 00 	sts	0x009B, r25
    258c:	80 93 9a 00 	sts	0x009A, r24
    2590:	7d ce       	rjmp	.-774    	; 0x228c <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2592:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2596:	80 91 80 00 	lds	r24, 0x0080
    259a:	8f 77       	andi	r24, 0x7F	; 127
    259c:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    25a0:	2d 98       	cbi	0x05, 5	; 5
    25a2:	74 ce       	rjmp	.-792    	; 0x228c <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    25a4:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    25a8:	80 91 80 00 	lds	r24, 0x0080
    25ac:	8f 7d       	andi	r24, 0xDF	; 223
    25ae:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    25b2:	2e 98       	cbi	0x05, 6	; 5
    25b4:	6b ce       	rjmp	.-810    	; 0x228c <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    25b6:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    25ba:	80 91 80 00 	lds	r24, 0x0080
    25be:	87 7f       	andi	r24, 0xF7	; 247
    25c0:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    25c4:	2f 98       	cbi	0x05, 7	; 5
    25c6:	62 ce       	rjmp	.-828    	; 0x228c <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    25c8:	97 ff       	sbrs	r25, 7
    25ca:	9b cf       	rjmp	.-202    	; 0x2502 <__vector_25+0x2b0>
						OCR4A = pwm_left;
    25cc:	90 95       	com	r25
    25ce:	81 95       	neg	r24
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	36 cf       	rjmp	.-404    	; 0x2440 <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    25d4:	97 ff       	sbrs	r25, 7
    25d6:	c4 cf       	rjmp	.-120    	; 0x2560 <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// set the new value for the output compares here
    25d8:	90 95       	com	r25
    25da:	81 95       	neg	r24
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	4b cf       	rjmp	.-362    	; 0x2476 <__vector_25+0x224>

000025e0 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    25e0:	86 b1       	in	r24, 0x06	; 6
    25e2:	66 b1       	in	r22, 0x06	; 6
    25e4:	26 b1       	in	r18, 0x06	; 6
    25e6:	46 b1       	in	r20, 0x06	; 6
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	28 70       	andi	r18, 0x08	; 8
    25ec:	30 70       	andi	r19, 0x00	; 0
    25ee:	35 95       	asr	r19
    25f0:	27 95       	ror	r18
    25f2:	35 95       	asr	r19
    25f4:	27 95       	ror	r18
    25f6:	35 95       	asr	r19
    25f8:	27 95       	ror	r18
    25fa:	22 0f       	add	r18, r18
    25fc:	33 1f       	adc	r19, r19
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	64 70       	andi	r22, 0x04	; 4
    2602:	70 70       	andi	r23, 0x00	; 0
    2604:	75 95       	asr	r23
    2606:	67 95       	ror	r22
    2608:	75 95       	asr	r23
    260a:	67 95       	ror	r22
    260c:	26 0f       	add	r18, r22
    260e:	37 1f       	adc	r19, r23
    2610:	22 0f       	add	r18, r18
    2612:	33 1f       	adc	r19, r19
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	42 70       	andi	r20, 0x02	; 2
    2618:	50 70       	andi	r21, 0x00	; 0
    261a:	55 95       	asr	r21
    261c:	47 95       	ror	r20
    261e:	24 0f       	add	r18, r20
    2620:	35 1f       	adc	r19, r21
    2622:	22 0f       	add	r18, r18
    2624:	81 70       	andi	r24, 0x01	; 1
}
    2626:	82 0f       	add	r24, r18
    2628:	08 95       	ret

0000262a <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    262a:	f8 94       	cli

	initPortsIO();
    262c:	0e 94 30 10 	call	0x2060	; 0x2060 <initPortsIO>
	initAdc();
    2630:	0e 94 b2 13 	call	0x2764	; 0x2764 <initAdc>
	initMotors();
    2634:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <initMotors>
	initRGBleds();
    2638:	0e 94 c0 19 	call	0x3380	; 0x3380 <initRGBleds>
	initSPI();
    263c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <initSPI>
	mirf_init();
    2640:	0e 94 af 03 	call	0x75e	; 0x75e <mirf_init>
	initUsart();
    2644:	0e 94 06 11 	call	0x220c	; 0x220c <initUsart>
	initAccelerometer();
    2648:	0e 94 37 1a 	call	0x346e	; 0x346e <initAccelerometer>
	init_ir_remote_control();
    264c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <init_ir_remote_control>

	sei();			// enable global interrupts
    2650:	78 94       	sei

	
}
    2652:	08 95       	ret

00002654 <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2654:	1f 92       	push	r1
    2656:	0f 92       	push	r0
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1

}
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti

00002668 <sleep>:

void sleep(unsigned char seconds) {
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    266c:	9e e1       	ldi	r25, 0x1E	; 30
    266e:	89 9f       	mul	r24, r25
    2670:	e0 01       	movw	r28, r0
    2672:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2674:	80 91 68 00 	lds	r24, 0x0068
    2678:	8d 7f       	andi	r24, 0xFD	; 253
    267a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    267e:	80 91 6c 00 	lds	r24, 0x006C
    2682:	8f 77       	andi	r24, 0x7F	; 127
    2684:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2688:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    268a:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    268e:	80 91 7a 00 	lds	r24, 0x007A
    2692:	80 61       	ori	r24, 0x10	; 16
    2694:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2698:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    269c:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    26a0:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    26a4:	88 b3       	in	r24, 0x18	; 24
    26a6:	87 60       	ori	r24, 0x07	; 7
    26a8:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    26aa:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    26ae:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    26b2:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    26b6:	89 b3       	in	r24, 0x19	; 25
    26b8:	87 60       	ori	r24, 0x07	; 7
    26ba:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    26bc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    26c0:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    26c4:	0e 94 1b 11 	call	0x2236	; 0x2236 <closeUsart>
	closeSPI();
    26c8:	0e 94 05 03 	call	0x60a	; 0x60a <closeSPI>
	i2c_close();
    26cc:	0e 94 58 10 	call	0x20b0	; 0x20b0 <i2c_close>

	// set port pins
	initPortsIO();
    26d0:	0e 94 30 10 	call	0x2060	; 0x2060 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    26d4:	83 b7       	in	r24, 0x33	; 51
    26d6:	8f 60       	ori	r24, 0x0F	; 15
    26d8:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    26e0:	80 91 b0 00 	lds	r24, 0x00B0
    26e4:	8d 7f       	andi	r24, 0xFD	; 253
    26e6:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    26ea:	80 91 b1 00 	lds	r24, 0x00B1
    26ee:	87 60       	ori	r24, 0x07	; 7
    26f0:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    26f4:	20 97       	sbiw	r28, 0x00	; 0
    26f6:	19 f0       	breq	.+6      	; 0x26fe <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    26f8:	88 95       	sleep
		pause--;
    26fa:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    26fc:	e9 f7       	brne	.-6      	; 0x26f8 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    26fe:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2700:	80 91 b1 00 	lds	r24, 0x00B1
    2704:	88 7f       	andi	r24, 0xF8	; 248
    2706:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    270a:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    270e:	80 91 b0 00 	lds	r24, 0x00B0
    2712:	82 60       	ori	r24, 0x02	; 2
    2714:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    271e:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2722:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2726:	10 92 e8 03 	sts	0x03E8, r1
    272a:	10 92 e7 03 	sts	0x03E7, r1
	pwm_left = 0;
    272e:	10 92 ea 03 	sts	0x03EA, r1
    2732:	10 92 e9 03 	sts	0x03E9, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2736:	f8 94       	cli

	initPortsIO();
    2738:	0e 94 30 10 	call	0x2060	; 0x2060 <initPortsIO>
	initAdc();
    273c:	0e 94 b2 13 	call	0x2764	; 0x2764 <initAdc>
	initMotors();
    2740:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <initMotors>
	initRGBleds();
    2744:	0e 94 c0 19 	call	0x3380	; 0x3380 <initRGBleds>
	initSPI();
    2748:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <initSPI>
	mirf_init();
    274c:	0e 94 af 03 	call	0x75e	; 0x75e <mirf_init>
	initUsart();
    2750:	0e 94 06 11 	call	0x220c	; 0x220c <initUsart>
	initAccelerometer();
    2754:	0e 94 37 1a 	call	0x346e	; 0x346e <initAccelerometer>
	init_ir_remote_control();
    2758:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <init_ir_remote_control>

	sei();			// enable global interrupts
    275c:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	08 95       	ret

00002764 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2764:	ea e7       	ldi	r30, 0x7A	; 122
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	86 60       	ori	r24, 0x06	; 6
    276c:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    276e:	ac e7       	ldi	r26, 0x7C	; 124
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	8c 91       	ld	r24, X
    2774:	80 64       	ori	r24, 0x40	; 64
    2776:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2778:	80 81       	ld	r24, Z
    277a:	80 62       	ori	r24, 0x20	; 32
    277c:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    277e:	ab e7       	ldi	r26, 0x7B	; 123
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	8c 91       	ld	r24, X
    2784:	88 7f       	andi	r24, 0xF8	; 248
    2786:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2788:	80 81       	ld	r24, Z
    278a:	88 60       	ori	r24, 0x08	; 8
    278c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    278e:	80 81       	ld	r24, Z
    2790:	80 68       	ori	r24, 0x80	; 128
    2792:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    2794:	80 81       	ld	r24, Z
    2796:	80 64       	ori	r24, 0x40	; 64
    2798:	80 83       	st	Z, r24

}
    279a:	08 95       	ret

0000279c <__vector_29>:

ISR(ADC_vect) {
    279c:	1f 92       	push	r1
    279e:	0f 92       	push	r0
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	0f 92       	push	r0
    27a4:	0b b6       	in	r0, 0x3b	; 59
    27a6:	0f 92       	push	r0
    27a8:	11 24       	eor	r1, r1
    27aa:	2f 93       	push	r18
    27ac:	3f 93       	push	r19
    27ae:	4f 93       	push	r20
    27b0:	5f 93       	push	r21
    27b2:	6f 93       	push	r22
    27b4:	8f 93       	push	r24
    27b6:	9f 93       	push	r25
    27b8:	ef 93       	push	r30
    27ba:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    27bc:	80 91 1b 04 	lds	r24, 0x041B
    27c0:	90 91 1c 04 	lds	r25, 0x041C
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	90 93 1c 04 	sts	0x041C, r25
    27ca:	80 93 1b 04 	sts	0x041B, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    27ce:	20 91 78 00 	lds	r18, 0x0078
    27d2:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    27d4:	40 91 79 00 	lds	r20, 0x0079
    27d8:	94 2f       	mov	r25, r20
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	28 2b       	or	r18, r24
    27de:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    27e0:	80 91 bb 03 	lds	r24, 0x03BB
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	09 f4       	brne	.+2      	; 0x27ea <__vector_29+0x4e>
    27e8:	8e c1       	rjmp	.+796    	; 0x2b06 <__vector_29+0x36a>
    27ea:	83 30       	cpi	r24, 0x03	; 3
    27ec:	08 f4       	brcc	.+2      	; 0x27f0 <__vector_29+0x54>
    27ee:	46 c0       	rjmp	.+140    	; 0x287c <__vector_29+0xe0>
    27f0:	83 30       	cpi	r24, 0x03	; 3
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <__vector_29+0x5a>
    27f4:	ab c1       	rjmp	.+854    	; 0x2b4c <__vector_29+0x3b0>
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	09 f4       	brne	.+2      	; 0x27fc <__vector_29+0x60>
    27fa:	4a c1       	rjmp	.+660    	; 0x2a90 <__vector_29+0x2f4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    27fc:	80 91 bc 03 	lds	r24, 0x03BC
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	09 f4       	brne	.+2      	; 0x2806 <__vector_29+0x6a>
    2804:	31 c1       	rjmp	.+610    	; 0x2a68 <__vector_29+0x2cc>
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	08 f0       	brcs	.+2      	; 0x280c <__vector_29+0x70>
    280a:	ce c0       	rjmp	.+412    	; 0x29a8 <__vector_29+0x20c>
    280c:	88 23       	and	r24, r24
    280e:	09 f0       	breq	.+2      	; 0x2812 <__vector_29+0x76>
    2810:	06 c1       	rjmp	.+524    	; 0x2a1e <__vector_29+0x282>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2812:	80 91 26 03 	lds	r24, 0x0326
    2816:	86 95       	lsr	r24
    2818:	80 93 25 03 	sts	0x0325, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    281c:	80 91 bd 03 	lds	r24, 0x03BD
    2820:	88 23       	and	r24, r24
    2822:	09 f0       	breq	.+2      	; 0x2826 <__vector_29+0x8a>
    2824:	bf c1       	rjmp	.+894    	; 0x2ba4 <__vector_29+0x408>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	80 93 bb 03 	sts	0x03BB, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	80 93 bc 03 	sts	0x03BC, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2832:	90 91 25 03 	lds	r25, 0x0325
    2836:	98 30       	cpi	r25, 0x08	; 8
    2838:	08 f0       	brcs	.+2      	; 0x283c <__vector_29+0xa0>
    283a:	e6 c0       	rjmp	.+460    	; 0x2a08 <__vector_29+0x26c>
		ADCSRB &= ~(1 << MUX5);
    283c:	90 91 7b 00 	lds	r25, 0x007B
    2840:	97 7f       	andi	r25, 0xF7	; 247
    2842:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2846:	90 91 25 03 	lds	r25, 0x0325
    284a:	90 5c       	subi	r25, 0xC0	; 192
    284c:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2850:	82 30       	cpi	r24, 0x02	; 2
    2852:	21 f4       	brne	.+8      	; 0x285c <__vector_29+0xc0>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		#endif

		#ifdef HW_REV_3_1
		PORTJ = 0xFF;
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    285a:	12 b8       	out	0x02, r1	; 2

	}

	//LED_BLUE_OFF;

}
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	9f 91       	pop	r25
    2862:	8f 91       	pop	r24
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    287c:	88 23       	and	r24, r24
    287e:	09 f0       	breq	.+2      	; 0x2882 <__vector_29+0xe6>
    2880:	df c0       	rjmp	.+446    	; 0x2a40 <__vector_29+0x2a4>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2882:	60 91 26 03 	lds	r22, 0x0326
    2886:	6e 30       	cpi	r22, 0x0E	; 14
    2888:	09 f4       	brne	.+2      	; 0x288c <__vector_29+0xf0>
    288a:	a1 c1       	rjmp	.+834    	; 0x2bce <__vector_29+0x432>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    288c:	46 2f       	mov	r20, r22
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	fa 01       	movw	r30, r20
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	e5 5d       	subi	r30, 0xD5	; 213
    2898:	fc 4f       	sbci	r31, 0xFC	; 252
    289a:	31 83       	std	Z+1, r19	; 0x01
    289c:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    289e:	40 ff       	sbrs	r20, 0
    28a0:	77 c0       	rjmp	.+238    	; 0x2990 <__vector_29+0x1f4>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    28a2:	fa 01       	movw	r30, r20
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	e7 5d       	subi	r30, 0xD7	; 215
    28aa:	fc 4f       	sbci	r31, 0xFC	; 252
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	fa 01       	movw	r30, r20
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	e5 5d       	subi	r30, 0xD5	; 213
    28b8:	fc 4f       	sbci	r31, 0xFC	; 252
    28ba:	40 81       	ld	r20, Z
    28bc:	51 81       	ldd	r21, Z+1	; 0x01
    28be:	26 2f       	mov	r18, r22
    28c0:	26 95       	lsr	r18
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	84 1b       	sub	r24, r20
    28c6:	95 0b       	sbc	r25, r21
    28c8:	22 0f       	add	r18, r18
    28ca:	33 1f       	adc	r19, r19
    28cc:	f9 01       	movw	r30, r18
    28ce:	ed 58       	subi	r30, 0x8D	; 141
    28d0:	fc 4f       	sbci	r31, 0xFC	; 252
    28d2:	40 81       	ld	r20, Z
    28d4:	51 81       	ldd	r21, Z+1	; 0x01
    28d6:	84 1b       	sub	r24, r20
    28d8:	95 0b       	sbc	r25, r21
    28da:	f9 01       	movw	r30, r18
    28dc:	e5 5a       	subi	r30, 0xA5	; 165
    28de:	fc 4f       	sbci	r31, 0xFC	; 252
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    28e4:	97 fd       	sbrc	r25, 7
    28e6:	8e c1       	rjmp	.+796    	; 0x2c04 <__vector_29+0x468>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    28e8:	44 e0       	ldi	r20, 0x04	; 4
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	94 07       	cpc	r25, r20
    28ee:	24 f0       	brlt	.+8      	; 0x28f8 <__vector_29+0x15c>
					proximityResult[currentProx>>1] = 1024;
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	94 e0       	ldi	r25, 0x04	; 4
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    28f8:	60 31       	cpi	r22, 0x10	; 16
    28fa:	48 f4       	brcc	.+18     	; 0x290e <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    28fc:	8c 33       	cpi	r24, 0x3C	; 60
    28fe:	91 05       	cpc	r25, r1
    2900:	0c f0       	brlt	.+2      	; 0x2904 <__vector_29+0x168>
    2902:	85 c1       	rjmp	.+778    	; 0x2c0e <__vector_29+0x472>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2904:	2d 53       	subi	r18, 0x3D	; 61
    2906:	3c 4f       	sbci	r19, 0xFC	; 252
    2908:	f9 01       	movw	r30, r18
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    290e:	80 91 21 04 	lds	r24, 0x0421
    2912:	88 23       	and	r24, r24
    2914:	09 f4       	brne	.+2      	; 0x2918 <__vector_29+0x17c>
    2916:	52 c1       	rjmp	.+676    	; 0x2bbc <__vector_29+0x420>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2918:	80 91 6b 03 	lds	r24, 0x036B
    291c:	90 91 6c 03 	lds	r25, 0x036C
    2920:	f1 e0       	ldi	r31, 0x01	; 1
    2922:	84 3a       	cpi	r24, 0xA4	; 164
    2924:	9f 07       	cpc	r25, r31
    2926:	cc f0       	brlt	.+50     	; 0x295a <__vector_29+0x1be>
    2928:	80 91 6d 03 	lds	r24, 0x036D
    292c:	90 91 6e 03 	lds	r25, 0x036E
    2930:	21 e0       	ldi	r18, 0x01	; 1
    2932:	84 3a       	cpi	r24, 0xA4	; 164
    2934:	92 07       	cpc	r25, r18
    2936:	8c f0       	brlt	.+34     	; 0x295a <__vector_29+0x1be>
    2938:	80 91 6f 03 	lds	r24, 0x036F
    293c:	90 91 70 03 	lds	r25, 0x0370
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	84 3a       	cpi	r24, 0xA4	; 164
    2944:	94 07       	cpc	r25, r20
    2946:	4c f0       	brlt	.+18     	; 0x295a <__vector_29+0x1be>
    2948:	80 91 71 03 	lds	r24, 0x0371
    294c:	90 91 72 03 	lds	r25, 0x0372
    2950:	e1 e0       	ldi	r30, 0x01	; 1
    2952:	84 3a       	cpi	r24, 0xA4	; 164
    2954:	9e 07       	cpc	r25, r30
    2956:	0c f0       	brlt	.+2      	; 0x295a <__vector_29+0x1be>
    2958:	31 c1       	rjmp	.+610    	; 0x2bbc <__vector_29+0x420>
						cliffDetectedFlag = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	80 93 22 04 	sts	0x0422, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    2960:	10 92 ea 03 	sts	0x03EA, r1
    2964:	10 92 e9 03 	sts	0x03E9, r1
						OCR4A = 0;
    2968:	10 92 a9 00 	sts	0x00A9, r1
    296c:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    2970:	10 92 ab 00 	sts	0x00AB, r1
    2974:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    2978:	10 92 e8 03 	sts	0x03E8, r1
    297c:	10 92 e7 03 	sts	0x03E7, r1
						OCR3A = 0;
    2980:	10 92 99 00 	sts	0x0099, r1
    2984:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2988:	10 92 9b 00 	sts	0x009B, r1
    298c:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    2990:	6f 5f       	subi	r22, 0xFF	; 255
    2992:	60 93 26 03 	sts	0x0326, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2996:	68 31       	cpi	r22, 0x18	; 24
    2998:	08 f4       	brcc	.+2      	; 0x299c <__vector_29+0x200>
    299a:	30 cf       	rjmp	.-416    	; 0x27fc <__vector_29+0x60>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    299c:	10 92 26 03 	sts	0x0326, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	80 93 c2 03 	sts	0x03C2, r24
    29a6:	2a cf       	rjmp	.-428    	; 0x27fc <__vector_29+0x60>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    29a8:	83 30       	cpi	r24, 0x03	; 3
    29aa:	09 f4       	brne	.+2      	; 0x29ae <__vector_29+0x212>
    29ac:	98 c0       	rjmp	.+304    	; 0x2ade <__vector_29+0x342>
    29ae:	84 30       	cpi	r24, 0x04	; 4
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <__vector_29+0x218>
    29b2:	3f cf       	rjmp	.-386    	; 0x2832 <__vector_29+0x96>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    29b4:	90 91 28 03 	lds	r25, 0x0328
    29b8:	90 93 25 03 	sts	0x0325, r25
			rightChannelPhase = rightMotorPhase;
    29bc:	90 91 29 03 	lds	r25, 0x0329
    29c0:	90 93 bd 03 	sts	0x03BD, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    29c4:	90 91 be 03 	lds	r25, 0x03BE
    29c8:	99 23       	and	r25, r25
    29ca:	09 f0       	breq	.+2      	; 0x29ce <__vector_29+0x232>
    29cc:	e5 c0       	rjmp	.+458    	; 0x2b98 <__vector_29+0x3fc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    29ce:	83 e0       	ldi	r24, 0x03	; 3
    29d0:	80 93 bb 03 	sts	0x03BB, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    29d4:	10 92 bc 03 	sts	0x03BC, r1

			if(currentProx==14 && measBattery==1) {
    29d8:	20 91 26 03 	lds	r18, 0x0326
    29dc:	2e 30       	cpi	r18, 0x0E	; 14
    29de:	09 f4       	brne	.+2      	; 0x29e2 <__vector_29+0x246>
    29e0:	f0 c0       	rjmp	.+480    	; 0x2bc2 <__vector_29+0x426>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    29e2:	82 2f       	mov	r24, r18
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	20 ff       	sbrs	r18, 0
    29e8:	ce c0       	rjmp	.+412    	; 0x2b86 <__vector_29+0x3ea>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    29ea:	20 31       	cpi	r18, 0x10	; 16
    29ec:	08 f0       	brcs	.+2      	; 0x29f0 <__vector_29+0x254>
    29ee:	bb c0       	rjmp	.+374    	; 0x2b66 <__vector_29+0x3ca>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    29f0:	26 95       	lsr	r18
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <__vector_29+0x260>
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	2a 95       	dec	r18
    29fe:	e2 f7       	brpl	.-8      	; 0x29f8 <__vector_29+0x25c>
    2a00:	82 b9       	out	0x02, r24	; 2
    2a02:	80 91 bc 03 	lds	r24, 0x03BC
    2a06:	15 cf       	rjmp	.-470    	; 0x2832 <__vector_29+0x96>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2a08:	90 91 7b 00 	lds	r25, 0x007B
    2a0c:	98 60       	ori	r25, 0x08	; 8
    2a0e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    2a12:	90 91 25 03 	lds	r25, 0x0325
    2a16:	98 5c       	subi	r25, 0xC8	; 200
    2a18:	90 93 7c 00 	sts	0x007C, r25
    2a1c:	19 cf       	rjmp	.-462    	; 0x2850 <__vector_29+0xb4>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	09 f0       	breq	.+2      	; 0x2a24 <__vector_29+0x288>
    2a22:	07 cf       	rjmp	.-498    	; 0x2832 <__vector_29+0x96>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2a24:	80 91 27 03 	lds	r24, 0x0327
    2a28:	80 93 25 03 	sts	0x0325, r24
			leftChannelPhase = leftMotorPhase;
    2a2c:	80 91 2a 03 	lds	r24, 0x032A
    2a30:	80 93 be 03 	sts	0x03BE, r24
			adcSaveDataTo = SAVE_TO_PROX;
    2a34:	10 92 bb 03 	sts	0x03BB, r1
			adcSamplingState = 2;
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	80 93 bc 03 	sts	0x03BC, r24
			break;
    2a3e:	f9 ce       	rjmp	.-526    	; 0x2832 <__vector_29+0x96>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <__vector_29+0x2aa>
    2a44:	db ce       	rjmp	.-586    	; 0x27fc <__vector_29+0x60>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2a46:	80 91 d5 03 	lds	r24, 0x03D5
    2a4a:	90 91 d6 03 	lds	r25, 0x03D6
    2a4e:	82 0f       	add	r24, r18
    2a50:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    2a52:	96 95       	lsr	r25
    2a54:	87 95       	ror	r24
    2a56:	90 93 d6 03 	sts	0x03D6, r25
    2a5a:	80 93 d5 03 	sts	0x03D5, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2a5e:	80 91 bc 03 	lds	r24, 0x03BC
    2a62:	82 30       	cpi	r24, 0x02	; 2
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <__vector_29+0x2cc>
    2a66:	cf ce       	rjmp	.-610    	; 0x2806 <__vector_29+0x6a>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2a68:	80 91 28 03 	lds	r24, 0x0328
    2a6c:	80 93 25 03 	sts	0x0325, r24
			rightChannelPhase = rightMotorPhase;
    2a70:	80 91 29 03 	lds	r24, 0x0329
    2a74:	80 93 bd 03 	sts	0x03BD, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2a78:	80 91 be 03 	lds	r24, 0x03BE
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <__vector_29+0x2e6>
    2a80:	97 c0       	rjmp	.+302    	; 0x2bb0 <__vector_29+0x414>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	80 93 bb 03 	sts	0x03BB, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2a88:	83 e0       	ldi	r24, 0x03	; 3
    2a8a:	80 93 bc 03 	sts	0x03BC, r24
			break;
    2a8e:	d1 ce       	rjmp	.-606    	; 0x2832 <__vector_29+0x96>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2a90:	80 91 0a 02 	lds	r24, 0x020A
    2a94:	88 23       	and	r24, r24
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <__vector_29+0x2fe>
    2a98:	b1 ce       	rjmp	.-670    	; 0x27fc <__vector_29+0x60>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2a9a:	90 91 00 01 	lds	r25, 0x0100
    2a9e:	93 fd       	sbrc	r25, 3
    2aa0:	ad ce       	rjmp	.-678    	; 0x27fc <__vector_29+0x60>
    2aa2:	90 91 00 01 	lds	r25, 0x0100
    2aa6:	94 fd       	sbrc	r25, 4
    2aa8:	a9 ce       	rjmp	.-686    	; 0x27fc <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2aaa:	48 2f       	mov	r20, r24
    2aac:	4f 5f       	subi	r20, 0xFF	; 255
    2aae:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    2ab2:	45 30       	cpi	r20, 0x05	; 5
    2ab4:	08 f4       	brcc	.+2      	; 0x2ab8 <__vector_29+0x31c>
    2ab6:	a2 ce       	rjmp	.-700    	; 0x27fc <__vector_29+0x60>
					left_vel_sum += value;
    2ab8:	80 91 df 03 	lds	r24, 0x03DF
    2abc:	90 91 e0 03 	lds	r25, 0x03E0
    2ac0:	82 0f       	add	r24, r18
    2ac2:	93 1f       	adc	r25, r19
    2ac4:	90 93 e0 03 	sts	0x03E0, r25
    2ac8:	80 93 df 03 	sts	0x03DF, r24
					if(firstSampleLeft==8) {
    2acc:	48 30       	cpi	r20, 0x08	; 8
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <__vector_29+0x336>
    2ad0:	95 ce       	rjmp	.-726    	; 0x27fc <__vector_29+0x60>
						firstSampleLeft = 0;
    2ad2:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 93 07 02 	sts	0x0207, r24
    2adc:	8f ce       	rjmp	.-738    	; 0x27fc <__vector_29+0x60>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2ade:	80 91 27 03 	lds	r24, 0x0327
    2ae2:	80 93 25 03 	sts	0x0325, r24
			leftChannelPhase = leftMotorPhase;
    2ae6:	80 91 2a 03 	lds	r24, 0x032A
    2aea:	80 93 be 03 	sts	0x03BE, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    2aee:	80 91 bd 03 	lds	r24, 0x03BD
    2af2:	88 23       	and	r24, r24
    2af4:	09 f0       	breq	.+2      	; 0x2af8 <__vector_29+0x35c>
    2af6:	4a c0       	rjmp	.+148    	; 0x2b8c <__vector_29+0x3f0>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 93 bb 03 	sts	0x03BB, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    2afe:	84 e0       	ldi	r24, 0x04	; 4
    2b00:	80 93 bc 03 	sts	0x03BC, r24
			break;
    2b04:	96 ce       	rjmp	.-724    	; 0x2832 <__vector_29+0x96>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    2b06:	80 91 09 02 	lds	r24, 0x0209
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <__vector_29+0x374>
    2b0e:	76 ce       	rjmp	.-788    	; 0x27fc <__vector_29+0x60>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2b10:	63 99       	sbic	0x0c, 3	; 12
    2b12:	74 ce       	rjmp	.-792    	; 0x27fc <__vector_29+0x60>
    2b14:	64 99       	sbic	0x0c, 4	; 12
    2b16:	72 ce       	rjmp	.-796    	; 0x27fc <__vector_29+0x60>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2b18:	48 2f       	mov	r20, r24
    2b1a:	4f 5f       	subi	r20, 0xFF	; 255
    2b1c:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2b20:	45 30       	cpi	r20, 0x05	; 5
    2b22:	08 f4       	brcc	.+2      	; 0x2b26 <__vector_29+0x38a>
    2b24:	6b ce       	rjmp	.-810    	; 0x27fc <__vector_29+0x60>
					right_vel_sum += value;
    2b26:	80 91 e1 03 	lds	r24, 0x03E1
    2b2a:	90 91 e2 03 	lds	r25, 0x03E2
    2b2e:	82 0f       	add	r24, r18
    2b30:	93 1f       	adc	r25, r19
    2b32:	90 93 e2 03 	sts	0x03E2, r25
    2b36:	80 93 e1 03 	sts	0x03E1, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2b3a:	48 30       	cpi	r20, 0x08	; 8
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <__vector_29+0x3a4>
    2b3e:	5e ce       	rjmp	.-836    	; 0x27fc <__vector_29+0x60>
						firstSampleRight = 0;
    2b40:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	80 93 08 02 	sts	0x0208, r24
    2b4a:	58 ce       	rjmp	.-848    	; 0x27fc <__vector_29+0x60>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2b4c:	80 91 d3 03 	lds	r24, 0x03D3
    2b50:	90 91 d4 03 	lds	r25, 0x03D4
    2b54:	82 0f       	add	r24, r18
    2b56:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2b58:	96 95       	lsr	r25
    2b5a:	87 95       	ror	r24
    2b5c:	90 93 d4 03 	sts	0x03D4, r25
    2b60:	80 93 d3 03 	sts	0x03D3, r24
			break;
    2b64:	4b ce       	rjmp	.-874    	; 0x27fc <__vector_29+0x60>
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					#endif

					#ifdef HW_REV_3_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2b66:	40 91 05 01 	lds	r20, 0x0105
    2b6a:	40 97       	sbiw	r24, 0x10	; 16
    2b6c:	95 95       	asr	r25
    2b6e:	87 95       	ror	r24
    2b70:	21 e0       	ldi	r18, 0x01	; 1
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <__vector_29+0x3de>
    2b76:	22 0f       	add	r18, r18
    2b78:	33 1f       	adc	r19, r19
    2b7a:	8a 95       	dec	r24
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <__vector_29+0x3da>
    2b7e:	20 95       	com	r18
    2b80:	24 23       	and	r18, r20
    2b82:	20 93 05 01 	sts	0x0105, r18
    2b86:	80 91 bc 03 	lds	r24, 0x03BC
    2b8a:	53 ce       	rjmp	.-858    	; 0x2832 <__vector_29+0x96>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2b8c:	81 30       	cpi	r24, 0x01	; 1
    2b8e:	71 f1       	breq	.+92     	; 0x2bec <__vector_29+0x450>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2b90:	85 e0       	ldi	r24, 0x05	; 5
    2b92:	80 93 bb 03 	sts	0x03BB, r24
    2b96:	b3 cf       	rjmp	.-154    	; 0x2afe <__vector_29+0x362>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2b98:	91 30       	cpi	r25, 0x01	; 1
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <__vector_29+0x402>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2b9c:	85 e0       	ldi	r24, 0x05	; 5
    2b9e:	80 93 bb 03 	sts	0x03BB, r24
    2ba2:	18 cf       	rjmp	.-464    	; 0x29d4 <__vector_29+0x238>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	51 f1       	breq	.+84     	; 0x2bfc <__vector_29+0x460>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2ba8:	85 e0       	ldi	r24, 0x05	; 5
    2baa:	80 93 bb 03 	sts	0x03BB, r24
    2bae:	3e ce       	rjmp	.-900    	; 0x282c <__vector_29+0x90>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	01 f1       	breq	.+64     	; 0x2bf4 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2bb4:	85 e0       	ldi	r24, 0x05	; 5
    2bb6:	80 93 bb 03 	sts	0x03BB, r24
    2bba:	66 cf       	rjmp	.-308    	; 0x2a88 <__vector_29+0x2ec>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2bbc:	10 92 22 04 	sts	0x0422, r1
    2bc0:	e7 ce       	rjmp	.-562    	; 0x2990 <__vector_29+0x1f4>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    2bc2:	80 91 c1 03 	lds	r24, 0x03C1
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	a1 f1       	breq	.+104    	; 0x2c32 <__vector_29+0x496>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	32 ce       	rjmp	.-924    	; 0x2832 <__vector_29+0x96>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2bce:	80 91 c1 03 	lds	r24, 0x03C1
    2bd2:	82 30       	cpi	r24, 0x02	; 2
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <__vector_29+0x43c>
    2bd6:	5a ce       	rjmp	.-844    	; 0x288c <__vector_29+0xf0>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2bd8:	30 93 c0 03 	sts	0x03C0, r19
    2bdc:	20 93 bf 03 	sts	0x03BF, r18
				measBattery = 0;
    2be0:	10 92 c1 03 	sts	0x03C1, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2be4:	46 98       	cbi	0x08, 6	; 8
    2be6:	4e e0       	ldi	r20, 0x0E	; 14
    2be8:	50 e0       	ldi	r21, 0x00	; 0
    2bea:	59 ce       	rjmp	.-846    	; 0x289e <__vector_29+0x102>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	80 93 bb 03 	sts	0x03BB, r24
    2bf2:	85 cf       	rjmp	.-246    	; 0x2afe <__vector_29+0x362>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2bf4:	84 e0       	ldi	r24, 0x04	; 4
    2bf6:	80 93 bb 03 	sts	0x03BB, r24
    2bfa:	46 cf       	rjmp	.-372    	; 0x2a88 <__vector_29+0x2ec>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	80 93 bb 03 	sts	0x03BB, r24
    2c02:	14 ce       	rjmp	.-984    	; 0x282c <__vector_29+0x90>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2c04:	11 82       	std	Z+1, r1	; 0x01
    2c06:	10 82       	st	Z, r1
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	75 ce       	rjmp	.-790    	; 0x28f8 <__vector_29+0x15c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2c0e:	ac 01       	movw	r20, r24
    2c10:	44 5c       	subi	r20, 0xC4	; 196
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	55 95       	asr	r21
    2c16:	47 95       	ror	r20
    2c18:	48 37       	cpi	r20, 0x78	; 120
    2c1a:	51 05       	cpc	r21, r1
    2c1c:	7c f4       	brge	.+30     	; 0x2c3c <__vector_29+0x4a0>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2c1e:	2d 53       	subi	r18, 0x3D	; 61
    2c20:	3c 4f       	sbci	r19, 0xFC	; 252
    2c22:	cc 97       	sbiw	r24, 0x3c	; 60
    2c24:	95 95       	asr	r25
    2c26:	87 95       	ror	r24
    2c28:	cc 96       	adiw	r24, 0x3c	; 60
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    2c30:	6e ce       	rjmp	.-804    	; 0x290e <__vector_29+0x172>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	80 93 c1 03 	sts	0x03C1, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2c38:	46 9a       	sbi	0x08, 6	; 8
    2c3a:	d3 ce       	rjmp	.-602    	; 0x29e2 <__vector_29+0x246>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	44 5d       	subi	r20, 0xD4	; 212
    2c40:	5e 4f       	sbci	r21, 0xFE	; 254
    2c42:	55 95       	asr	r21
    2c44:	47 95       	ror	r20
    2c46:	55 95       	asr	r21
    2c48:	47 95       	ror	r20
    2c4a:	44 3b       	cpi	r20, 0xB4	; 180
    2c4c:	51 05       	cpc	r21, r1
    2c4e:	74 f4       	brge	.+28     	; 0x2c6c <__vector_29+0x4d0>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2c50:	2d 53       	subi	r18, 0x3D	; 61
    2c52:	3c 4f       	sbci	r19, 0xFC	; 252
    2c54:	84 5b       	subi	r24, 0xB4	; 180
    2c56:	90 40       	sbci	r25, 0x00	; 0
    2c58:	95 95       	asr	r25
    2c5a:	87 95       	ror	r24
    2c5c:	95 95       	asr	r25
    2c5e:	87 95       	ror	r24
    2c60:	88 58       	subi	r24, 0x88	; 136
    2c62:	9f 4f       	sbci	r25, 0xFF	; 255
    2c64:	f9 01       	movw	r30, r18
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	51 ce       	rjmp	.-862    	; 0x290e <__vector_29+0x172>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2c6c:	2d 53       	subi	r18, 0x3D	; 61
    2c6e:	3c 4f       	sbci	r19, 0xFC	; 252
    2c70:	84 5a       	subi	r24, 0xA4	; 164
    2c72:	91 40       	sbci	r25, 0x01	; 1
    2c74:	95 95       	asr	r25
    2c76:	87 95       	ror	r24
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	95 95       	asr	r25
    2c7e:	87 95       	ror	r24
    2c80:	8c 54       	subi	r24, 0x4C	; 76
    2c82:	9f 4f       	sbci	r25, 0xFF	; 255
    2c84:	f9 01       	movw	r30, r18
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	41 ce       	rjmp	.-894    	; 0x290e <__vector_29+0x172>

00002c8c <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2c8c:	e0 e9       	ldi	r30, 0x90	; 144
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	83 68       	ori	r24, 0x83	; 131
    2c94:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2c96:	80 81       	ld	r24, Z
    2c98:	83 60       	ori	r24, 0x03	; 3
    2c9a:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2c9c:	a1 e9       	ldi	r26, 0x91	; 145
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	8c 91       	ld	r24, X
    2ca2:	8b 60       	ori	r24, 0x0B	; 11
    2ca4:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2ca6:	80 91 e7 03 	lds	r24, 0x03E7
    2caa:	90 91 e8 03 	lds	r25, 0x03E8
    2cae:	90 93 99 00 	sts	0x0099, r25
    2cb2:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2cb6:	10 92 9b 00 	sts	0x009B, r1
    2cba:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2cbe:	a1 e7       	ldi	r26, 0x71	; 113
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	8c 91       	ld	r24, X
    2cc4:	81 60       	ori	r24, 0x01	; 1
    2cc6:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2cc8:	80 81       	ld	r24, Z
    2cca:	8f 75       	andi	r24, 0x5F	; 95
    2ccc:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2cce:	8e b1       	in	r24, 0x0e	; 14
    2cd0:	87 7e       	andi	r24, 0xE7	; 231
    2cd2:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2cd4:	e0 ea       	ldi	r30, 0xA0	; 160
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	83 68       	ori	r24, 0x83	; 131
    2cdc:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2cde:	a1 ea       	ldi	r26, 0xA1	; 161
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	8c 91       	ld	r24, X
    2ce4:	8b 60       	ori	r24, 0x0B	; 11
    2ce6:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2ce8:	80 91 e9 03 	lds	r24, 0x03E9
    2cec:	90 91 ea 03 	lds	r25, 0x03EA
    2cf0:	90 93 a9 00 	sts	0x00A9, r25
    2cf4:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2cf8:	10 92 ab 00 	sts	0x00AB, r1
    2cfc:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2d00:	a2 e7       	ldi	r26, 0x72	; 114
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	8c 91       	ld	r24, X
    2d06:	81 60       	ori	r24, 0x01	; 1
    2d08:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8f 75       	andi	r24, 0x5F	; 95
    2d0e:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2d10:	e2 e0       	ldi	r30, 0x02	; 2
    2d12:	f1 e0       	ldi	r31, 0x01	; 1
    2d14:	80 81       	ld	r24, Z
    2d16:	87 7e       	andi	r24, 0xE7	; 231
    2d18:	80 83       	st	Z, r24


}
    2d1a:	08 95       	ret

00002d1c <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    2d1c:	1f 92       	push	r1
    2d1e:	0f 92       	push	r0
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	0f 92       	push	r0
    2d24:	11 24       	eor	r1, r1
    2d26:	8f 93       	push	r24
    2d28:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    2d2a:	80 91 22 04 	lds	r24, 0x0422
    2d2e:	88 23       	and	r24, r24
    2d30:	61 f0       	breq	.+24     	; 0x2d4a <__vector_45+0x2e>
		pwm_left = 0;
    2d32:	10 92 ea 03 	sts	0x03EA, r1
    2d36:	10 92 e9 03 	sts	0x03E9, r1
		OCR4A = 0;
    2d3a:	10 92 a9 00 	sts	0x00A9, r1
    2d3e:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    2d42:	10 92 ab 00 	sts	0x00AB, r1
    2d46:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    2d4a:	10 92 d4 03 	sts	0x03D4, r1
    2d4e:	10 92 d3 03 	sts	0x03D3, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    2d52:	80 91 e9 03 	lds	r24, 0x03E9
    2d56:	90 91 ea 03 	lds	r25, 0x03EA
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	41 f5       	brne	.+80     	; 0x2dae <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    2d5e:	80 91 dd 03 	lds	r24, 0x03DD
    2d62:	90 91 de 03 	lds	r25, 0x03DE
    2d66:	97 fd       	sbrc	r25, 7
    2d68:	69 c0       	rjmp	.+210    	; 0x2e3c <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 93 2a 03 	sts	0x032A, r24
			currentMotLeftChannel = 14;
    2d70:	8e e0       	ldi	r24, 0x0E	; 14
    2d72:	80 93 27 03 	sts	0x0327, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2d7c:	80 91 a0 00 	lds	r24, 0x00A0
    2d80:	8f 75       	andi	r24, 0x5F	; 95
    2d82:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2d86:	80 91 02 01 	lds	r24, 0x0102
    2d8a:	87 7e       	andi	r24, 0xE7	; 231
    2d8c:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    2d90:	80 91 72 00 	lds	r24, 0x0072
    2d94:	89 7f       	andi	r24, 0xF9	; 249
    2d96:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    2d9a:	89 b3       	in	r24, 0x19	; 25
    2d9c:	86 60       	ori	r24, 0x06	; 6
    2d9e:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	0f 90       	pop	r0
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	0f 90       	pop	r0
    2daa:	1f 90       	pop	r1
    2dac:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    2dae:	18 16       	cp	r1, r24
    2db0:	19 06       	cpc	r1, r25
    2db2:	2c f5       	brge	.+74     	; 0x2dfe <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    2db4:	10 92 2a 03 	sts	0x032A, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    2db8:	8f e0       	ldi	r24, 0x0F	; 15
    2dba:	80 93 27 03 	sts	0x0327, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    2dbe:	80 91 a0 00 	lds	r24, 0x00A0
    2dc2:	8f 7d       	andi	r24, 0xDF	; 223
    2dc4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    2dc8:	80 91 72 00 	lds	r24, 0x0072
    2dcc:	8b 7f       	andi	r24, 0xFB	; 251
    2dce:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    2dd2:	80 91 02 01 	lds	r24, 0x0102
    2dd6:	8f 7e       	andi	r24, 0xEF	; 239
    2dd8:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    2ddc:	80 91 a0 00 	lds	r24, 0x00A0
    2de0:	80 68       	ori	r24, 0x80	; 128
    2de2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    2de6:	80 91 72 00 	lds	r24, 0x0072
    2dea:	82 60       	ori	r24, 0x02	; 2
    2dec:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    2df0:	9f 91       	pop	r25
    2df2:	8f 91       	pop	r24
    2df4:	0f 90       	pop	r0
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	0f 90       	pop	r0
    2dfa:	1f 90       	pop	r1
    2dfc:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    2dfe:	10 92 2a 03 	sts	0x032A, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    2e02:	8e e0       	ldi	r24, 0x0E	; 14
    2e04:	80 93 27 03 	sts	0x0327, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    2e08:	80 91 a0 00 	lds	r24, 0x00A0
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    2e12:	80 91 72 00 	lds	r24, 0x0072
    2e16:	8d 7f       	andi	r24, 0xFD	; 253
    2e18:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    2e1c:	80 91 02 01 	lds	r24, 0x0102
    2e20:	87 7f       	andi	r24, 0xF7	; 247
    2e22:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    2e26:	80 91 a0 00 	lds	r24, 0x00A0
    2e2a:	80 62       	ori	r24, 0x20	; 32
    2e2c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    2e30:	80 91 72 00 	lds	r24, 0x0072
    2e34:	84 60       	ori	r24, 0x04	; 4
    2e36:	80 93 72 00 	sts	0x0072, r24
    2e3a:	b2 cf       	rjmp	.-156    	; 0x2da0 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	80 93 2a 03 	sts	0x032A, r24
			currentMotLeftChannel = 15;
    2e42:	8f e0       	ldi	r24, 0x0F	; 15
    2e44:	80 93 27 03 	sts	0x0327, r24
    2e48:	96 cf       	rjmp	.-212    	; 0x2d76 <__vector_45+0x5a>

00002e4a <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    2e4a:	1f 92       	push	r1
    2e4c:	0f 92       	push	r0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	80 93 2a 03 	sts	0x032A, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    2e5e:	9e e0       	ldi	r25, 0x0E	; 14
    2e60:	90 93 27 03 	sts	0x0327, r25

	firstSampleLeft = 1;
    2e64:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	0f 90       	pop	r0
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	0f 90       	pop	r0
    2e72:	1f 90       	pop	r1
    2e74:	18 95       	reti

00002e76 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    2e76:	1f 92       	push	r1
    2e78:	0f 92       	push	r0
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	0f 92       	push	r0
    2e7e:	11 24       	eor	r1, r1
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 93 2a 03 	sts	0x032A, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    2e8a:	9f e0       	ldi	r25, 0x0F	; 15
    2e8c:	90 93 27 03 	sts	0x0327, r25

	firstSampleLeft = 1;
    2e90:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    2e94:	9f 91       	pop	r25
    2e96:	8f 91       	pop	r24
    2e98:	0f 90       	pop	r0
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	0f 90       	pop	r0
    2e9e:	1f 90       	pop	r1
    2ea0:	18 95       	reti

00002ea2 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    2ea2:	1f 92       	push	r1
    2ea4:	0f 92       	push	r0
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	0f 92       	push	r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	8f 93       	push	r24
    2eae:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    2eb0:	80 91 22 04 	lds	r24, 0x0422
    2eb4:	88 23       	and	r24, r24
    2eb6:	61 f0       	breq	.+24     	; 0x2ed0 <__vector_35+0x2e>
		pwm_right = 0;
    2eb8:	10 92 e8 03 	sts	0x03E8, r1
    2ebc:	10 92 e7 03 	sts	0x03E7, r1
		OCR3A = 0;
    2ec0:	10 92 99 00 	sts	0x0099, r1
    2ec4:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    2ec8:	10 92 9b 00 	sts	0x009B, r1
    2ecc:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    2ed0:	10 92 d6 03 	sts	0x03D6, r1
    2ed4:	10 92 d5 03 	sts	0x03D5, r1


	if(pwm_right == 0) {
    2ed8:	80 91 e7 03 	lds	r24, 0x03E7
    2edc:	90 91 e8 03 	lds	r25, 0x03E8
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	31 f5       	brne	.+76     	; 0x2f30 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    2ee4:	80 91 db 03 	lds	r24, 0x03DB
    2ee8:	90 91 dc 03 	lds	r25, 0x03DC
    2eec:	97 fd       	sbrc	r25, 7
    2eee:	5f c0       	rjmp	.+190    	; 0x2fae <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	80 93 29 03 	sts	0x0329, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    2ef6:	8c e0       	ldi	r24, 0x0C	; 12
    2ef8:	80 93 28 03 	sts	0x0328, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2f02:	80 91 90 00 	lds	r24, 0x0090
    2f06:	8f 75       	andi	r24, 0x5F	; 95
    2f08:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f0c:	8e b1       	in	r24, 0x0e	; 14
    2f0e:	87 7e       	andi	r24, 0xE7	; 231
    2f10:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    2f12:	80 91 71 00 	lds	r24, 0x0071
    2f16:	89 7f       	andi	r24, 0xF9	; 249
    2f18:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    2f1c:	88 b3       	in	r24, 0x18	; 24
    2f1e:	86 60       	ori	r24, 0x06	; 6
    2f20:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	0f 90       	pop	r0
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	0f 90       	pop	r0
    2f2c:	1f 90       	pop	r1
    2f2e:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    2f30:	18 16       	cp	r1, r24
    2f32:	19 06       	cpc	r1, r25
    2f34:	0c f5       	brge	.+66     	; 0x2f78 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    2f36:	10 92 29 03 	sts	0x0329, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    2f3a:	8d e0       	ldi	r24, 0x0D	; 13
    2f3c:	80 93 28 03 	sts	0x0328, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    2f40:	80 91 90 00 	lds	r24, 0x0090
    2f44:	8f 7d       	andi	r24, 0xDF	; 223
    2f46:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    2f4a:	80 91 71 00 	lds	r24, 0x0071
    2f4e:	8b 7f       	andi	r24, 0xFB	; 251
    2f50:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    2f54:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    2f56:	80 91 90 00 	lds	r24, 0x0090
    2f5a:	80 68       	ori	r24, 0x80	; 128
    2f5c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    2f60:	80 91 71 00 	lds	r24, 0x0071
    2f64:	82 60       	ori	r24, 0x02	; 2
    2f66:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    2f6a:	9f 91       	pop	r25
    2f6c:	8f 91       	pop	r24
    2f6e:	0f 90       	pop	r0
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	0f 90       	pop	r0
    2f74:	1f 90       	pop	r1
    2f76:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    2f78:	10 92 29 03 	sts	0x0329, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    2f7c:	8c e0       	ldi	r24, 0x0C	; 12
    2f7e:	80 93 28 03 	sts	0x0328, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    2f82:	80 91 90 00 	lds	r24, 0x0090
    2f86:	8f 77       	andi	r24, 0x7F	; 127
    2f88:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    2f8c:	80 91 71 00 	lds	r24, 0x0071
    2f90:	8d 7f       	andi	r24, 0xFD	; 253
    2f92:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    2f96:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    2f98:	80 91 90 00 	lds	r24, 0x0090
    2f9c:	80 62       	ori	r24, 0x20	; 32
    2f9e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    2fa2:	80 91 71 00 	lds	r24, 0x0071
    2fa6:	84 60       	ori	r24, 0x04	; 4
    2fa8:	80 93 71 00 	sts	0x0071, r24
    2fac:	ba cf       	rjmp	.-140    	; 0x2f22 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	80 93 29 03 	sts	0x0329, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    2fb4:	8d e0       	ldi	r24, 0x0D	; 13
    2fb6:	80 93 28 03 	sts	0x0328, r24
    2fba:	a0 cf       	rjmp	.-192    	; 0x2efc <__vector_35+0x5a>

00002fbc <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    2fbc:	1f 92       	push	r1
    2fbe:	0f 92       	push	r0
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	0f 92       	push	r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	8f 93       	push	r24
    2fc8:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	80 93 29 03 	sts	0x0329, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    2fd0:	9c e0       	ldi	r25, 0x0C	; 12
    2fd2:	90 93 28 03 	sts	0x0328, r25

	firstSampleRight = 1;
    2fd6:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    2fda:	9f 91       	pop	r25
    2fdc:	8f 91       	pop	r24
    2fde:	0f 90       	pop	r0
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	0f 90       	pop	r0
    2fe4:	1f 90       	pop	r1
    2fe6:	18 95       	reti

00002fe8 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    2fe8:	1f 92       	push	r1
    2fea:	0f 92       	push	r0
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	0f 92       	push	r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	8f 93       	push	r24
    2ff4:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	80 93 29 03 	sts	0x0329, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    2ffc:	9d e0       	ldi	r25, 0x0D	; 13
    2ffe:	90 93 28 03 	sts	0x0328, r25

	firstSampleRight = 1;
    3002:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    3006:	9f 91       	pop	r25
    3008:	8f 91       	pop	r24
    300a:	0f 90       	pop	r0
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	0f 90       	pop	r0
    3010:	1f 90       	pop	r1
    3012:	18 95       	reti

00003014 <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    3014:	2f 92       	push	r2
    3016:	3f 92       	push	r3
    3018:	4f 92       	push	r4
    301a:	5f 92       	push	r5
    301c:	6f 92       	push	r6
    301e:	7f 92       	push	r7
    3020:	8f 92       	push	r8
    3022:	9f 92       	push	r9
    3024:	af 92       	push	r10
    3026:	bf 92       	push	r11
    3028:	cf 92       	push	r12
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	00 d0       	rcall	.+0      	; 0x303a <obstacleAvoidance+0x26>
    303a:	0f 92       	push	r0
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	4c 01       	movw	r8, r24
    3042:	1b 01       	movw	r2, r22
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    3044:	dc 01       	movw	r26, r24
    3046:	0d 90       	ld	r0, X+
    3048:	bc 91       	ld	r27, X
    304a:	a0 2d       	mov	r26, r0
    304c:	ba 83       	std	Y+2, r27	; 0x02
    304e:	a9 83       	std	Y+1, r26	; 0x01
    3050:	fb 01       	movw	r30, r22
    3052:	01 90       	ld	r0, Z+
    3054:	f0 81       	ld	r31, Z
    3056:	e0 2d       	mov	r30, r0
    3058:	fc 83       	std	Y+4, r31	; 0x04
    305a:	eb 83       	std	Y+3, r30	; 0x03

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    305c:	40 91 c3 03 	lds	r20, 0x03C3
    3060:	50 91 c4 03 	lds	r21, 0x03C4
    3064:	44 31       	cpi	r20, 0x14	; 20
    3066:	51 05       	cpc	r21, r1
    3068:	34 f4       	brge	.+12     	; 0x3076 <obstacleAvoidance+0x62>
			proximityResultLinear[i] = 0;
    306a:	10 92 c4 03 	sts	0x03C4, r1
    306e:	10 92 c3 03 	sts	0x03C3, r1
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3076:	e0 90 c5 03 	lds	r14, 0x03C5
    307a:	f0 90 c6 03 	lds	r15, 0x03C6
    307e:	f4 e1       	ldi	r31, 0x14	; 20
    3080:	ef 16       	cp	r14, r31
    3082:	f1 04       	cpc	r15, r1
    3084:	34 f4       	brge	.+12     	; 0x3092 <obstacleAvoidance+0x7e>
			proximityResultLinear[i] = 0;
    3086:	10 92 c6 03 	sts	0x03C6, r1
    308a:	10 92 c5 03 	sts	0x03C5, r1
    308e:	ee 24       	eor	r14, r14
    3090:	ff 24       	eor	r15, r15
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3092:	80 91 c7 03 	lds	r24, 0x03C7
    3096:	90 91 c8 03 	lds	r25, 0x03C8
    309a:	84 31       	cpi	r24, 0x14	; 20
    309c:	91 05       	cpc	r25, r1
    309e:	34 f4       	brge	.+12     	; 0x30ac <obstacleAvoidance+0x98>
			proximityResultLinear[i] = 0;
    30a0:	10 92 c8 03 	sts	0x03C8, r1
    30a4:	10 92 c7 03 	sts	0x03C7, r1
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    30ac:	a0 91 c9 03 	lds	r26, 0x03C9
    30b0:	b0 91 ca 03 	lds	r27, 0x03CA
    30b4:	a4 31       	cpi	r26, 0x14	; 20
    30b6:	b1 05       	cpc	r27, r1
    30b8:	34 f4       	brge	.+12     	; 0x30c6 <obstacleAvoidance+0xb2>
			proximityResultLinear[i] = 0;
    30ba:	10 92 ca 03 	sts	0x03CA, r1
    30be:	10 92 c9 03 	sts	0x03C9, r1
    30c2:	a0 e0       	ldi	r26, 0x00	; 0
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    30c6:	20 91 cb 03 	lds	r18, 0x03CB
    30ca:	30 91 cc 03 	lds	r19, 0x03CC
    30ce:	24 31       	cpi	r18, 0x14	; 20
    30d0:	31 05       	cpc	r19, r1
    30d2:	34 f4       	brge	.+12     	; 0x30e0 <obstacleAvoidance+0xcc>
			proximityResultLinear[i] = 0;
    30d4:	10 92 cc 03 	sts	0x03CC, r1
    30d8:	10 92 cb 03 	sts	0x03CB, r1
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    30e0:	e0 91 cd 03 	lds	r30, 0x03CD
    30e4:	f0 91 ce 03 	lds	r31, 0x03CE
    30e8:	e4 31       	cpi	r30, 0x14	; 20
    30ea:	f1 05       	cpc	r31, r1
    30ec:	34 f4       	brge	.+12     	; 0x30fa <obstacleAvoidance+0xe6>
			proximityResultLinear[i] = 0;
    30ee:	10 92 ce 03 	sts	0x03CE, r1
    30f2:	10 92 cd 03 	sts	0x03CD, r1
    30f6:	e0 e0       	ldi	r30, 0x00	; 0
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    30fa:	00 91 cf 03 	lds	r16, 0x03CF
    30fe:	10 91 d0 03 	lds	r17, 0x03D0
    3102:	04 31       	cpi	r16, 0x14	; 20
    3104:	11 05       	cpc	r17, r1
    3106:	34 f4       	brge	.+12     	; 0x3114 <obstacleAvoidance+0x100>
			proximityResultLinear[i] = 0;
    3108:	10 92 d0 03 	sts	0x03D0, r1
    310c:	10 92 cf 03 	sts	0x03CF, r1
    3110:	00 e0       	ldi	r16, 0x00	; 0
    3112:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3114:	60 91 d1 03 	lds	r22, 0x03D1
    3118:	70 91 d2 03 	lds	r23, 0x03D2
    311c:	64 31       	cpi	r22, 0x14	; 20
    311e:	71 05       	cpc	r23, r1
    3120:	34 f4       	brge	.+12     	; 0x312e <obstacleAvoidance+0x11a>
			proximityResultLinear[i] = 0;
    3122:	10 92 d2 03 	sts	0x03D2, r1
    3126:	10 92 d1 03 	sts	0x03D1, r1
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	70 e0       	ldi	r23, 0x00	; 0
		}
	}

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1);
    312e:	57 01       	movw	r10, r14
    3130:	b5 94       	asr	r11
    3132:	a7 94       	ror	r10
    3134:	7d 01       	movw	r14, r26
    3136:	f5 94       	asr	r15
    3138:	e7 94       	ror	r14
    313a:	f5 95       	asr	r31
    313c:	e7 95       	ror	r30
    313e:	75 95       	asr	r23
    3140:	67 95       	ror	r22
    3142:	d7 01       	movw	r26, r14
    3144:	a4 1b       	sub	r26, r20
    3146:	b5 0b       	sbc	r27, r21
    3148:	ad 01       	movw	r20, r26
    314a:	42 0f       	add	r20, r18
    314c:	53 1f       	adc	r21, r19
    314e:	4e 0f       	add	r20, r30
    3150:	5f 1f       	adc	r21, r31
    3152:	4a 19       	sub	r20, r10
    3154:	5b 09       	sbc	r21, r11
    3156:	46 1b       	sub	r20, r22
    3158:	57 0b       	sbc	r21, r23
	sumSensorsY = (proximityResultLinear[1]>>1) + proximityResultLinear[2] + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - proximityResultLinear[6] - (proximityResultLinear[7]>>1);
    315a:	ea 0c       	add	r14, r10
    315c:	fb 1c       	adc	r15, r11
    315e:	e8 0e       	add	r14, r24
    3160:	f9 1e       	adc	r15, r25
    3162:	e0 1a       	sub	r14, r16
    3164:	f1 0a       	sbc	r15, r17
    3166:	e6 1a       	sub	r14, r22
    3168:	f7 0a       	sbc	r15, r23
    316a:	ee 1a       	sub	r14, r30
    316c:	ff 0a       	sbc	r15, r31

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    316e:	e9 81       	ldd	r30, Y+1	; 0x01
    3170:	fa 81       	ldd	r31, Y+2	; 0x02
    3172:	f7 fd       	sbrc	r31, 7
    3174:	91 c0       	rjmp	.+290    	; 0x3298 <obstacleAvoidance+0x284>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>8);
    3176:	5f 01       	movw	r10, r30
    3178:	cc 24       	eor	r12, r12
    317a:	b7 fc       	sbrc	r11, 7
    317c:	c0 94       	com	r12
    317e:	dc 2c       	mov	r13, r12
    3180:	2a 01       	movw	r4, r20
    3182:	66 24       	eor	r6, r6
    3184:	57 fc       	sbrc	r5, 7
    3186:	60 94       	com	r6
    3188:	76 2c       	mov	r7, r6
    318a:	00 27       	eor	r16, r16
    318c:	f7 fc       	sbrc	r15, 7
    318e:	00 95       	com	r16
    3190:	10 2f       	mov	r17, r16
    3192:	c3 01       	movw	r24, r6
    3194:	b2 01       	movw	r22, r4
    3196:	6e 19       	sub	r22, r14
    3198:	7f 09       	sbc	r23, r15
    319a:	80 0b       	sbc	r24, r16
    319c:	91 0b       	sbc	r25, r17
    319e:	a6 01       	movw	r20, r12
    31a0:	95 01       	movw	r18, r10
    31a2:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__mulsi3>
    31a6:	67 2f       	mov	r22, r23
    31a8:	78 2f       	mov	r23, r24
    31aa:	89 2f       	mov	r24, r25
    31ac:	99 27       	eor	r25, r25
    31ae:	87 fd       	sbrc	r24, 7
    31b0:	9a 95       	dec	r25
    31b2:	6a 0d       	add	r22, r10
    31b4:	7b 1d       	adc	r23, r11
    31b6:	8c 1d       	adc	r24, r12
    31b8:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    31ba:	d4 01       	movw	r26, r8
    31bc:	11 96       	adiw	r26, 0x01	; 1
    31be:	7c 93       	st	X, r23
    31c0:	6e 93       	st	-X, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>8);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    31c2:	2b 81       	ldd	r18, Y+3	; 0x03
    31c4:	3c 81       	ldd	r19, Y+4	; 0x04
    31c6:	37 fd       	sbrc	r19, 7
    31c8:	92 c0       	rjmp	.+292    	; 0x32ee <obstacleAvoidance+0x2da>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>8);
    31ca:	59 01       	movw	r10, r18
    31cc:	cc 24       	eor	r12, r12
    31ce:	b7 fc       	sbrc	r11, 7
    31d0:	c0 94       	com	r12
    31d2:	dc 2c       	mov	r13, r12
    31d4:	c8 01       	movw	r24, r16
    31d6:	b7 01       	movw	r22, r14
    31d8:	64 0d       	add	r22, r4
    31da:	75 1d       	adc	r23, r5
    31dc:	86 1d       	adc	r24, r6
    31de:	97 1d       	adc	r25, r7
    31e0:	a6 01       	movw	r20, r12
    31e2:	95 01       	movw	r18, r10
    31e4:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__mulsi3>
    31e8:	67 2f       	mov	r22, r23
    31ea:	78 2f       	mov	r23, r24
    31ec:	89 2f       	mov	r24, r25
    31ee:	99 27       	eor	r25, r25
    31f0:	87 fd       	sbrc	r24, 7
    31f2:	9a 95       	dec	r25
    31f4:	6a 0d       	add	r22, r10
    31f6:	7b 1d       	adc	r23, r11
    31f8:	8c 1d       	adc	r24, r12
    31fa:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    31fc:	9b 01       	movw	r18, r22
    31fe:	d1 01       	movw	r26, r2
    3200:	11 96       	adiw	r26, 0x01	; 1
    3202:	7c 93       	st	X, r23
    3204:	6e 93       	st	-X, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>8);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    3206:	b2 e0       	ldi	r27, 0x02	; 2
    3208:	21 30       	cpi	r18, 0x01	; 1
    320a:	3b 07       	cpc	r19, r27
    320c:	3c f0       	brlt	.+14     	; 0x321c <obstacleAvoidance+0x208>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	92 e0       	ldi	r25, 0x02	; 2
    3212:	f1 01       	movw	r30, r2
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    321c:	d4 01       	movw	r26, r8
    321e:	8d 91       	ld	r24, X+
    3220:	9c 91       	ld	r25, X
    3222:	11 97       	sbiw	r26, 0x01	; 1
    3224:	b2 e0       	ldi	r27, 0x02	; 2
    3226:	81 30       	cpi	r24, 0x01	; 1
    3228:	9b 07       	cpc	r25, r27
    322a:	4c f0       	brlt	.+18     	; 0x323e <obstacleAvoidance+0x22a>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	92 e0       	ldi	r25, 0x02	; 2
    3230:	f4 01       	movw	r30, r8
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
    3236:	d1 01       	movw	r26, r2
    3238:	2d 91       	ld	r18, X+
    323a:	3c 91       	ld	r19, X
    323c:	11 97       	sbiw	r26, 0x01	; 1
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    323e:	be ef       	ldi	r27, 0xFE	; 254
    3240:	20 30       	cpi	r18, 0x00	; 0
    3242:	3b 07       	cpc	r19, r27
    3244:	4c f4       	brge	.+18     	; 0x3258 <obstacleAvoidance+0x244>
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	9e ef       	ldi	r25, 0xFE	; 254
    324a:	f1 01       	movw	r30, r2
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	d4 01       	movw	r26, r8
    3252:	8d 91       	ld	r24, X+
    3254:	9c 91       	ld	r25, X
    3256:	11 97       	sbiw	r26, 0x01	; 1
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    3258:	be ef       	ldi	r27, 0xFE	; 254
    325a:	80 30       	cpi	r24, 0x00	; 0
    325c:	9b 07       	cpc	r25, r27
    325e:	2c f4       	brge	.+10     	; 0x326a <obstacleAvoidance+0x256>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	9e ef       	ldi	r25, 0xFE	; 254
    3264:	f4 01       	movw	r30, r8
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	80 83       	st	Z, r24

}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	df 90       	pop	r13
    3280:	cf 90       	pop	r12
    3282:	bf 90       	pop	r11
    3284:	af 90       	pop	r10
    3286:	9f 90       	pop	r9
    3288:	8f 90       	pop	r8
    328a:	7f 90       	pop	r7
    328c:	6f 90       	pop	r6
    328e:	5f 90       	pop	r5
    3290:	4f 90       	pop	r4
    3292:	3f 90       	pop	r3
    3294:	2f 90       	pop	r2
    3296:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>8);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>8);
    3298:	eb 81       	ldd	r30, Y+3	; 0x03
    329a:	fc 81       	ldd	r31, Y+4	; 0x04
    329c:	5f 01       	movw	r10, r30
    329e:	cc 24       	eor	r12, r12
    32a0:	b7 fc       	sbrc	r11, 7
    32a2:	c0 94       	com	r12
    32a4:	dc 2c       	mov	r13, r12
    32a6:	2a 01       	movw	r4, r20
    32a8:	66 24       	eor	r6, r6
    32aa:	57 fc       	sbrc	r5, 7
    32ac:	60 94       	com	r6
    32ae:	76 2c       	mov	r7, r6
    32b0:	00 27       	eor	r16, r16
    32b2:	f7 fc       	sbrc	r15, 7
    32b4:	00 95       	com	r16
    32b6:	10 2f       	mov	r17, r16
    32b8:	c8 01       	movw	r24, r16
    32ba:	b7 01       	movw	r22, r14
    32bc:	64 0d       	add	r22, r4
    32be:	75 1d       	adc	r23, r5
    32c0:	86 1d       	adc	r24, r6
    32c2:	97 1d       	adc	r25, r7
    32c4:	a6 01       	movw	r20, r12
    32c6:	95 01       	movw	r18, r10
    32c8:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__mulsi3>
    32cc:	bb 27       	eor	r27, r27
    32ce:	97 fd       	sbrc	r25, 7
    32d0:	ba 95       	dec	r27
    32d2:	a9 2f       	mov	r26, r25
    32d4:	98 2f       	mov	r25, r24
    32d6:	87 2f       	mov	r24, r23
    32d8:	28 1b       	sub	r18, r24
    32da:	39 0b       	sbc	r19, r25
    32dc:	4a 0b       	sbc	r20, r26
    32de:	5b 0b       	sbc	r21, r27
		*pwmLeft = (signed int)res;
    32e0:	f4 01       	movw	r30, r8
    32e2:	31 83       	std	Z+1, r19	; 0x01
    32e4:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    32e6:	2b 81       	ldd	r18, Y+3	; 0x03
    32e8:	3c 81       	ldd	r19, Y+4	; 0x04
    32ea:	37 ff       	sbrs	r19, 7
    32ec:	6e cf       	rjmp	.-292    	; 0x31ca <obstacleAvoidance+0x1b6>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>8);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>8);
    32ee:	e9 81       	ldd	r30, Y+1	; 0x01
    32f0:	fa 81       	ldd	r31, Y+2	; 0x02
    32f2:	5f 01       	movw	r10, r30
    32f4:	cc 24       	eor	r12, r12
    32f6:	b7 fc       	sbrc	r11, 7
    32f8:	c0 94       	com	r12
    32fa:	dc 2c       	mov	r13, r12
    32fc:	c3 01       	movw	r24, r6
    32fe:	b2 01       	movw	r22, r4
    3300:	6e 19       	sub	r22, r14
    3302:	7f 09       	sbc	r23, r15
    3304:	80 0b       	sbc	r24, r16
    3306:	91 0b       	sbc	r25, r17
    3308:	a6 01       	movw	r20, r12
    330a:	95 01       	movw	r18, r10
    330c:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__mulsi3>
    3310:	bb 27       	eor	r27, r27
    3312:	97 fd       	sbrc	r25, 7
    3314:	ba 95       	dec	r27
    3316:	a9 2f       	mov	r26, r25
    3318:	98 2f       	mov	r25, r24
    331a:	87 2f       	mov	r24, r23
    331c:	a8 1a       	sub	r10, r24
    331e:	b9 0a       	sbc	r11, r25
    3320:	ca 0a       	sbc	r12, r26
    3322:	db 0a       	sbc	r13, r27
		*pwmRight = (signed int)res;
    3324:	95 01       	movw	r18, r10
    3326:	d1 01       	movw	r26, r2
    3328:	11 96       	adiw	r26, 0x01	; 1
    332a:	bc 92       	st	X, r11
    332c:	ae 92       	st	-X, r10
    332e:	6b cf       	rjmp	.-298    	; 0x3206 <obstacleAvoidance+0x1f2>

00003330 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3330:	80 91 6b 03 	lds	r24, 0x036B
    3334:	90 91 6c 03 	lds	r25, 0x036C
    3338:	21 e0       	ldi	r18, 0x01	; 1
    333a:	84 3a       	cpi	r24, 0xA4	; 164
    333c:	92 07       	cpc	r25, r18
    333e:	d4 f0       	brlt	.+52     	; 0x3374 <cliffDetected+0x44>
    3340:	80 91 6d 03 	lds	r24, 0x036D
    3344:	90 91 6e 03 	lds	r25, 0x036E
    3348:	21 e0       	ldi	r18, 0x01	; 1
    334a:	84 3a       	cpi	r24, 0xA4	; 164
    334c:	92 07       	cpc	r25, r18
    334e:	94 f0       	brlt	.+36     	; 0x3374 <cliffDetected+0x44>
    3350:	80 91 6f 03 	lds	r24, 0x036F
    3354:	90 91 70 03 	lds	r25, 0x0370
    3358:	21 e0       	ldi	r18, 0x01	; 1
    335a:	84 3a       	cpi	r24, 0xA4	; 164
    335c:	92 07       	cpc	r25, r18
    335e:	74 f0       	brlt	.+28     	; 0x337c <cliffDetected+0x4c>
		return 1;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	20 91 71 03 	lds	r18, 0x0371
    3366:	30 91 72 03 	lds	r19, 0x0372
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	24 3a       	cpi	r18, 0xA4	; 164
    336e:	39 07       	cpc	r19, r25
    3370:	1c f4       	brge	.+6      	; 0x3378 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    3372:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	08 95       	ret
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	08 95       	ret
    337c:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    337e:	08 95       	ret

00003380 <initRGBleds>:
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    3380:	e0 e8       	ldi	r30, 0x80	; 128
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	89 6a       	ori	r24, 0xA9	; 169
    3388:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    338a:	e1 e8       	ldi	r30, 0x81	; 129
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	89 60       	ori	r24, 0x09	; 9
    3392:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3394:	80 91 0c 02 	lds	r24, 0x020C
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	90 93 89 00 	sts	0x0089, r25
    339e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    33a2:	80 91 0d 02 	lds	r24, 0x020D
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	90 93 8b 00 	sts	0x008B, r25
    33ac:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    33b0:	80 91 0e 02 	lds	r24, 0x020E
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	90 93 8d 00 	sts	0x008D, r25
    33ba:	80 93 8c 00 	sts	0x008C, r24

}
    33be:	08 95       	ret

000033c0 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 91 ff 03 	lds	r25, 0x03FF
    33c6:	89 1b       	sub	r24, r25
    33c8:	80 93 ff 03 	sts	0x03FF, r24

	if(blinkState) {
    33cc:	88 23       	and	r24, r24
    33ce:	39 f4       	brne	.+14     	; 0x33de <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    33d0:	80 91 80 00 	lds	r24, 0x0080
    33d4:	87 7f       	andi	r24, 0xF7	; 247
    33d6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    33da:	2f 98       	cbi	0x05, 7	; 5
    33dc:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    33de:	80 91 80 00 	lds	r24, 0x0080
    33e2:	88 60       	ori	r24, 0x08	; 8
    33e4:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	90 93 8d 00 	sts	0x008D, r25
    33f0:	80 93 8c 00 	sts	0x008C, r24
    33f4:	08 95       	ret

000033f6 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    33f6:	88 23       	and	r24, r24
    33f8:	59 f0       	breq	.+22     	; 0x3410 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    33fa:	90 91 80 00 	lds	r25, 0x0080
    33fe:	90 68       	ori	r25, 0x80	; 128
    3400:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	90 93 89 00 	sts	0x0089, r25
    340a:	80 93 88 00 	sts	0x0088, r24
    340e:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3410:	80 91 80 00 	lds	r24, 0x0080
    3414:	8f 77       	andi	r24, 0x7F	; 127
    3416:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    341a:	2d 98       	cbi	0x05, 5	; 5
    341c:	08 95       	ret

0000341e <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    341e:	88 23       	and	r24, r24
    3420:	59 f0       	breq	.+22     	; 0x3438 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3422:	90 91 80 00 	lds	r25, 0x0080
    3426:	90 62       	ori	r25, 0x20	; 32
    3428:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	90 93 8b 00 	sts	0x008B, r25
    3432:	80 93 8a 00 	sts	0x008A, r24
    3436:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    3438:	80 91 80 00 	lds	r24, 0x0080
    343c:	8f 7d       	andi	r24, 0xDF	; 223
    343e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3442:	2e 98       	cbi	0x05, 6	; 5
    3444:	08 95       	ret

00003446 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3446:	88 23       	and	r24, r24
    3448:	59 f0       	breq	.+22     	; 0x3460 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    344a:	90 91 80 00 	lds	r25, 0x0080
    344e:	98 60       	ori	r25, 0x08	; 8
    3450:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	90 93 8d 00 	sts	0x008D, r25
    345a:	80 93 8c 00 	sts	0x008C, r24
    345e:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    3460:	80 91 80 00 	lds	r24, 0x0080
    3464:	87 7f       	andi	r24, 0xF7	; 247
    3466:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    346a:	2f 98       	cbi	0x05, 7	; 5
    346c:	08 95       	ret

0000346e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    346e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3472:	80 91 13 02 	lds	r24, 0x0213
    3476:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    347a:	88 23       	and	r24, r24
    347c:	49 f4       	brne	.+18     	; 0x3490 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    347e:	86 e1       	ldi	r24, 0x16	; 22
    3480:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3484:	85 e4       	ldi	r24, 0x45	; 69
    3486:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    348a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    348e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3490:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    3494:	86 ea       	ldi	r24, 0xA6	; 166
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	90 93 14 02 	sts	0x0214, r25
    349c:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34a0:	86 ea       	ldi	r24, 0xA6	; 166
    34a2:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34a6:	88 23       	and	r24, r24
    34a8:	41 f5       	brne	.+80     	; 0x34fa <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    34aa:	8d e2       	ldi	r24, 0x2D	; 45
    34ac:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x08);	// measurement mode
    34b0:	88 e0       	ldi	r24, 0x08	; 8
    34b2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34b6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34ba:	80 91 13 02 	lds	r24, 0x0213
    34be:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34c2:	88 23       	and	r24, r24
    34c4:	d1 f4       	brne	.+52     	; 0x34fa <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    34c6:	81 e3       	ldi	r24, 0x31	; 49
    34c8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34d2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    34d6:	80 91 13 02 	lds	r24, 0x0213
    34da:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    34de:	88 23       	and	r24, r24
    34e0:	61 f4       	brne	.+24     	; 0x34fa <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    34e2:	8c e2       	ldi	r24, 0x2C	; 44
    34e4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    34e8:	89 e0       	ldi	r24, 0x09	; 9
    34ea:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    34ee:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	80 93 05 04 	sts	0x0405, r24
    34f8:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    34fa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	80 93 05 04 	sts	0x0405, r24
    3504:	08 95       	ret

00003506 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3506:	80 91 13 02 	lds	r24, 0x0213
    350a:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    350e:	88 23       	and	r24, r24
    3510:	51 f4       	brne	.+20     	; 0x3526 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3512:	86 e1       	ldi	r24, 0x16	; 22
    3514:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3518:	85 e4       	ldi	r24, 0x45	; 69
    351a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    351e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    }

	return 0;				// configuration ok
    3522:	80 e0       	ldi	r24, 0x00	; 0

}
    3524:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3526:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
		return 1;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	08 95       	ret

0000352e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    352e:	80 91 13 02 	lds	r24, 0x0213
    3532:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3536:	88 23       	and	r24, r24
    3538:	31 f5       	brne	.+76     	; 0x3586 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    353a:	8d e2       	ldi	r24, 0x2D	; 45
    353c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x08);	// measurement mode
    3540:	88 e0       	ldi	r24, 0x08	; 8
    3542:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3546:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    354a:	80 91 13 02 	lds	r24, 0x0213
    354e:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3552:	88 23       	and	r24, r24
    3554:	c1 f4       	brne	.+48     	; 0x3586 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3556:	81 e3       	ldi	r24, 0x31	; 49
    3558:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3562:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3566:	80 91 13 02 	lds	r24, 0x0213
    356a:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    356e:	88 23       	and	r24, r24
    3570:	51 f4       	brne	.+20     	; 0x3586 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3572:	8c e2       	ldi	r24, 0x2C	; 44
    3574:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3578:	89 e0       	ldi	r24, 0x09	; 9
    357a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    357e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
    }

	return 0;
    3582:	80 e0       	ldi	r24, 0x00	; 0

}
    3584:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3586:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>
		return 1;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	08 95       	ret

0000358e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	0f 92       	push	r0
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    359e:	80 91 05 04 	lds	r24, 0x0405
    35a2:	88 23       	and	r24, r24
    35a4:	91 f0       	breq	.+36     	; 0x35ca <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    35a6:	81 30       	cpi	r24, 0x01	; 1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <readAccelXY+0x1e>
    35aa:	88 c0       	rjmp	.+272    	; 0x36bc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    35ac:	10 92 07 04 	sts	0x0407, r1
    35b0:	10 92 06 04 	sts	0x0406, r1
		accY = 0;
    35b4:	10 92 09 04 	sts	0x0409, r1
    35b8:	10 92 08 04 	sts	0x0408, r1

	}

}
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	ff 90       	pop	r15
    35c8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    35ca:	80 91 13 02 	lds	r24, 0x0213
    35ce:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    35d2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    35d4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    35d8:	80 91 13 02 	lds	r24, 0x0213
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	0e 94 b2 10 	call	0x2164	; 0x2164 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    35e2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    35e6:	08 2f       	mov	r16, r24
    35e8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    35ec:	f8 2e       	mov	r15, r24
    35ee:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    35f2:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    35f4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    35f8:	89 83       	std	Y+1, r24	; 0x01
    35fa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    35fe:	90 91 4f 04 	lds	r25, 0x044F
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	99 23       	and	r25, r25
    3606:	39 f1       	breq	.+78     	; 0x3656 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3608:	4f 2d       	mov	r20, r15
    360a:	55 27       	eor	r21, r21
    360c:	47 fd       	sbrc	r20, 7
    360e:	50 95       	com	r21
    3610:	54 2f       	mov	r21, r20
    3612:	44 27       	eor	r20, r20
    3614:	60 2f       	mov	r22, r16
    3616:	77 27       	eor	r23, r23
    3618:	67 fd       	sbrc	r22, 7
    361a:	70 95       	com	r23
    361c:	46 2b       	or	r20, r22
    361e:	57 2b       	or	r21, r23
    3620:	50 93 07 04 	sts	0x0407, r21
    3624:	40 93 06 04 	sts	0x0406, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3628:	28 2f       	mov	r18, r24
    362a:	33 27       	eor	r19, r19
    362c:	27 fd       	sbrc	r18, 7
    362e:	30 95       	com	r19
    3630:	32 2f       	mov	r19, r18
    3632:	22 27       	eor	r18, r18
    3634:	81 2f       	mov	r24, r17
    3636:	99 27       	eor	r25, r25
    3638:	87 fd       	sbrc	r24, 7
    363a:	90 95       	com	r25
    363c:	28 2b       	or	r18, r24
    363e:	39 2b       	or	r19, r25
    3640:	30 93 09 04 	sts	0x0409, r19
    3644:	20 93 08 04 	sts	0x0408, r18
		accX = 0;
		accY = 0;

	}

}
    3648:	0f 90       	pop	r0
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3656:	4f 2d       	mov	r20, r15
    3658:	55 27       	eor	r21, r21
    365a:	47 fd       	sbrc	r20, 7
    365c:	50 95       	com	r21
    365e:	54 2f       	mov	r21, r20
    3660:	44 27       	eor	r20, r20
    3662:	60 2f       	mov	r22, r16
    3664:	77 27       	eor	r23, r23
    3666:	67 fd       	sbrc	r22, 7
    3668:	70 95       	com	r23
    366a:	46 2b       	or	r20, r22
    366c:	57 2b       	or	r21, r23
    366e:	60 91 0c 04 	lds	r22, 0x040C
    3672:	70 91 0d 04 	lds	r23, 0x040D
    3676:	46 1b       	sub	r20, r22
    3678:	57 0b       	sbc	r21, r23
    367a:	50 93 07 04 	sts	0x0407, r21
    367e:	40 93 06 04 	sts	0x0406, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3682:	28 2f       	mov	r18, r24
    3684:	33 27       	eor	r19, r19
    3686:	27 fd       	sbrc	r18, 7
    3688:	30 95       	com	r19
    368a:	32 2f       	mov	r19, r18
    368c:	22 27       	eor	r18, r18
    368e:	81 2f       	mov	r24, r17
    3690:	99 27       	eor	r25, r25
    3692:	87 fd       	sbrc	r24, 7
    3694:	90 95       	com	r25
    3696:	28 2b       	or	r18, r24
    3698:	39 2b       	or	r19, r25
    369a:	80 91 0e 04 	lds	r24, 0x040E
    369e:	90 91 0f 04 	lds	r25, 0x040F
    36a2:	28 1b       	sub	r18, r24
    36a4:	39 0b       	sbc	r19, r25
    36a6:	30 93 09 04 	sts	0x0409, r19
    36aa:	20 93 08 04 	sts	0x0408, r18
		accX = 0;
		accY = 0;

	}

}
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	ff 90       	pop	r15
    36ba:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    36bc:	80 91 13 02 	lds	r24, 0x0213
    36c0:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    36c4:	82 e3       	ldi	r24, 0x32	; 50
    36c6:	86 cf       	rjmp	.-244    	; 0x35d4 <readAccelXY+0x46>

000036c8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <readAccelXYZ+0x6>
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <readAccelXYZ+0x8>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    36d4:	80 91 05 04 	lds	r24, 0x0405
    36d8:	88 23       	and	r24, r24
    36da:	c1 f0       	breq	.+48     	; 0x370c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    36dc:	81 30       	cpi	r24, 0x01	; 1
    36de:	09 f4       	brne	.+2      	; 0x36e2 <readAccelXYZ+0x1a>
    36e0:	ad c0       	rjmp	.+346    	; 0x383c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    36e2:	10 92 07 04 	sts	0x0407, r1
    36e6:	10 92 06 04 	sts	0x0406, r1
		accY = 0;
    36ea:	10 92 09 04 	sts	0x0409, r1
    36ee:	10 92 08 04 	sts	0x0408, r1
		accZ = 0;
    36f2:	10 92 0b 04 	sts	0x040B, r1
    36f6:	10 92 0a 04 	sts	0x040A, r1

	}

}
    36fa:	26 96       	adiw	r28, 0x06	; 6
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    370c:	80 91 13 02 	lds	r24, 0x0213
    3710:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3714:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3716:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    371a:	80 91 13 02 	lds	r24, 0x0213
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	0e 94 b2 10 	call	0x2164	; 0x2164 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3724:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    372e:	8a 83       	std	Y+2, r24	; 0x02
    3730:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    3734:	8b 83       	std	Y+3, r24	; 0x03
    3736:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    373a:	8c 83       	std	Y+4, r24	; 0x04
    373c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <i2c_readAck>
    3740:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3742:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <i2c_readNak>
    3746:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3748:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    374c:	80 91 4f 04 	lds	r24, 0x044F
    3750:	88 23       	and	r24, r24
    3752:	89 f1       	breq	.+98     	; 0x37b6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	99 27       	eor	r25, r25
    3758:	87 fd       	sbrc	r24, 7
    375a:	90 95       	com	r25
    375c:	98 2f       	mov	r25, r24
    375e:	88 27       	eor	r24, r24
    3760:	29 81       	ldd	r18, Y+1	; 0x01
    3762:	33 27       	eor	r19, r19
    3764:	27 fd       	sbrc	r18, 7
    3766:	30 95       	com	r19
    3768:	82 2b       	or	r24, r18
    376a:	93 2b       	or	r25, r19
    376c:	90 93 07 04 	sts	0x0407, r25
    3770:	80 93 06 04 	sts	0x0406, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3774:	8c 81       	ldd	r24, Y+4	; 0x04
    3776:	99 27       	eor	r25, r25
    3778:	87 fd       	sbrc	r24, 7
    377a:	90 95       	com	r25
    377c:	98 2f       	mov	r25, r24
    377e:	88 27       	eor	r24, r24
    3780:	2b 81       	ldd	r18, Y+3	; 0x03
    3782:	33 27       	eor	r19, r19
    3784:	27 fd       	sbrc	r18, 7
    3786:	30 95       	com	r19
    3788:	82 2b       	or	r24, r18
    378a:	93 2b       	or	r25, r19
    378c:	90 93 09 04 	sts	0x0409, r25
    3790:	80 93 08 04 	sts	0x0408, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    3794:	8e 81       	ldd	r24, Y+6	; 0x06
    3796:	99 27       	eor	r25, r25
    3798:	87 fd       	sbrc	r24, 7
    379a:	90 95       	com	r25
    379c:	98 2f       	mov	r25, r24
    379e:	88 27       	eor	r24, r24
    37a0:	2d 81       	ldd	r18, Y+5	; 0x05
    37a2:	33 27       	eor	r19, r19
    37a4:	27 fd       	sbrc	r18, 7
    37a6:	30 95       	com	r19
    37a8:	82 2b       	or	r24, r18
    37aa:	93 2b       	or	r25, r19
    37ac:	90 93 0b 04 	sts	0x040B, r25
    37b0:	80 93 0a 04 	sts	0x040A, r24
    37b4:	a2 cf       	rjmp	.-188    	; 0x36fa <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	99 27       	eor	r25, r25
    37ba:	87 fd       	sbrc	r24, 7
    37bc:	90 95       	com	r25
    37be:	98 2f       	mov	r25, r24
    37c0:	88 27       	eor	r24, r24
    37c2:	29 81       	ldd	r18, Y+1	; 0x01
    37c4:	33 27       	eor	r19, r19
    37c6:	27 fd       	sbrc	r18, 7
    37c8:	30 95       	com	r19
    37ca:	82 2b       	or	r24, r18
    37cc:	93 2b       	or	r25, r19
    37ce:	20 91 0c 04 	lds	r18, 0x040C
    37d2:	30 91 0d 04 	lds	r19, 0x040D
    37d6:	82 1b       	sub	r24, r18
    37d8:	93 0b       	sbc	r25, r19
    37da:	90 93 07 04 	sts	0x0407, r25
    37de:	80 93 06 04 	sts	0x0406, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    37e2:	8c 81       	ldd	r24, Y+4	; 0x04
    37e4:	99 27       	eor	r25, r25
    37e6:	87 fd       	sbrc	r24, 7
    37e8:	90 95       	com	r25
    37ea:	98 2f       	mov	r25, r24
    37ec:	88 27       	eor	r24, r24
    37ee:	2b 81       	ldd	r18, Y+3	; 0x03
    37f0:	33 27       	eor	r19, r19
    37f2:	27 fd       	sbrc	r18, 7
    37f4:	30 95       	com	r19
    37f6:	82 2b       	or	r24, r18
    37f8:	93 2b       	or	r25, r19
    37fa:	20 91 0e 04 	lds	r18, 0x040E
    37fe:	30 91 0f 04 	lds	r19, 0x040F
    3802:	82 1b       	sub	r24, r18
    3804:	93 0b       	sbc	r25, r19
    3806:	90 93 09 04 	sts	0x0409, r25
    380a:	80 93 08 04 	sts	0x0408, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    380e:	8e 81       	ldd	r24, Y+6	; 0x06
    3810:	99 27       	eor	r25, r25
    3812:	87 fd       	sbrc	r24, 7
    3814:	90 95       	com	r25
    3816:	98 2f       	mov	r25, r24
    3818:	88 27       	eor	r24, r24
    381a:	2d 81       	ldd	r18, Y+5	; 0x05
    381c:	33 27       	eor	r19, r19
    381e:	27 fd       	sbrc	r18, 7
    3820:	30 95       	com	r19
    3822:	82 2b       	or	r24, r18
    3824:	93 2b       	or	r25, r19
    3826:	20 91 10 04 	lds	r18, 0x0410
    382a:	30 91 11 04 	lds	r19, 0x0411
    382e:	82 1b       	sub	r24, r18
    3830:	93 0b       	sbc	r25, r19
    3832:	90 93 0b 04 	sts	0x040B, r25
    3836:	80 93 0a 04 	sts	0x040A, r24
    383a:	5f cf       	rjmp	.-322    	; 0x36fa <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    383c:	80 91 13 02 	lds	r24, 0x0213
    3840:	0e 94 65 10 	call	0x20ca	; 0x20ca <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3844:	82 e3       	ldi	r24, 0x32	; 50
    3846:	67 cf       	rjmp	.-306    	; 0x3716 <readAccelXYZ+0x4e>

00003848 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    384c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    3850:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    3854:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <updateRedLed>
	updateGreenLed(pwm_green);
    385e:	80 91 0d 02 	lds	r24, 0x020D
    3862:	0e 94 0f 1a 	call	0x341e	; 0x341e <updateGreenLed>
	updateBlueLed(pwm_blue);
    3866:	80 91 0e 02 	lds	r24, 0x020E
    386a:	0e 94 23 1a 	call	0x3446	; 0x3446 <updateBlueLed>

	calibrationCycle = 0;
    386e:	10 92 1f 04 	sts	0x041F, r1
    3872:	10 92 1e 04 	sts	0x041E, r1
	startCalibration = 1;
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	80 93 4f 04 	sts	0x044F, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    387c:	c1 e0       	ldi	r28, 0x01	; 1
    387e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    3880:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    3884:	20 91 1e 04 	lds	r18, 0x041E
    3888:	30 91 1f 04 	lds	r19, 0x041F
    388c:	21 31       	cpi	r18, 0x11	; 17
    388e:	31 05       	cpc	r19, r1
    3890:	0c f4       	brge	.+2      	; 0x3894 <calibrateSensors+0x4c>
    3892:	35 c1       	rjmp	.+618    	; 0x3afe <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    3894:	80 91 8b 03 	lds	r24, 0x038B
    3898:	90 91 8c 03 	lds	r25, 0x038C
    389c:	a0 91 8d 03 	lds	r26, 0x038D
    38a0:	b0 91 8e 03 	lds	r27, 0x038E
    38a4:	54 e0       	ldi	r21, 0x04	; 4
    38a6:	b6 95       	lsr	r27
    38a8:	a7 95       	ror	r26
    38aa:	97 95       	ror	r25
    38ac:	87 95       	ror	r24
    38ae:	5a 95       	dec	r21
    38b0:	d1 f7       	brne	.-12     	; 0x38a6 <calibrateSensors+0x5e>
    38b2:	90 93 74 03 	sts	0x0374, r25
    38b6:	80 93 73 03 	sts	0x0373, r24
    38ba:	80 91 8f 03 	lds	r24, 0x038F
    38be:	90 91 90 03 	lds	r25, 0x0390
    38c2:	a0 91 91 03 	lds	r26, 0x0391
    38c6:	b0 91 92 03 	lds	r27, 0x0392
    38ca:	44 e0       	ldi	r20, 0x04	; 4
    38cc:	b6 95       	lsr	r27
    38ce:	a7 95       	ror	r26
    38d0:	97 95       	ror	r25
    38d2:	87 95       	ror	r24
    38d4:	4a 95       	dec	r20
    38d6:	d1 f7       	brne	.-12     	; 0x38cc <calibrateSensors+0x84>
    38d8:	90 93 76 03 	sts	0x0376, r25
    38dc:	80 93 75 03 	sts	0x0375, r24
    38e0:	80 91 93 03 	lds	r24, 0x0393
    38e4:	90 91 94 03 	lds	r25, 0x0394
    38e8:	a0 91 95 03 	lds	r26, 0x0395
    38ec:	b0 91 96 03 	lds	r27, 0x0396
    38f0:	34 e0       	ldi	r19, 0x04	; 4
    38f2:	b6 95       	lsr	r27
    38f4:	a7 95       	ror	r26
    38f6:	97 95       	ror	r25
    38f8:	87 95       	ror	r24
    38fa:	3a 95       	dec	r19
    38fc:	d1 f7       	brne	.-12     	; 0x38f2 <calibrateSensors+0xaa>
    38fe:	90 93 78 03 	sts	0x0378, r25
    3902:	80 93 77 03 	sts	0x0377, r24
    3906:	80 91 97 03 	lds	r24, 0x0397
    390a:	90 91 98 03 	lds	r25, 0x0398
    390e:	a0 91 99 03 	lds	r26, 0x0399
    3912:	b0 91 9a 03 	lds	r27, 0x039A
    3916:	24 e0       	ldi	r18, 0x04	; 4
    3918:	b6 95       	lsr	r27
    391a:	a7 95       	ror	r26
    391c:	97 95       	ror	r25
    391e:	87 95       	ror	r24
    3920:	2a 95       	dec	r18
    3922:	d1 f7       	brne	.-12     	; 0x3918 <calibrateSensors+0xd0>
    3924:	90 93 7a 03 	sts	0x037A, r25
    3928:	80 93 79 03 	sts	0x0379, r24
    392c:	80 91 9b 03 	lds	r24, 0x039B
    3930:	90 91 9c 03 	lds	r25, 0x039C
    3934:	a0 91 9d 03 	lds	r26, 0x039D
    3938:	b0 91 9e 03 	lds	r27, 0x039E
    393c:	f4 e0       	ldi	r31, 0x04	; 4
    393e:	b6 95       	lsr	r27
    3940:	a7 95       	ror	r26
    3942:	97 95       	ror	r25
    3944:	87 95       	ror	r24
    3946:	fa 95       	dec	r31
    3948:	d1 f7       	brne	.-12     	; 0x393e <calibrateSensors+0xf6>
    394a:	90 93 7c 03 	sts	0x037C, r25
    394e:	80 93 7b 03 	sts	0x037B, r24
    3952:	80 91 9f 03 	lds	r24, 0x039F
    3956:	90 91 a0 03 	lds	r25, 0x03A0
    395a:	a0 91 a1 03 	lds	r26, 0x03A1
    395e:	b0 91 a2 03 	lds	r27, 0x03A2
    3962:	e4 e0       	ldi	r30, 0x04	; 4
    3964:	b6 95       	lsr	r27
    3966:	a7 95       	ror	r26
    3968:	97 95       	ror	r25
    396a:	87 95       	ror	r24
    396c:	ea 95       	dec	r30
    396e:	d1 f7       	brne	.-12     	; 0x3964 <calibrateSensors+0x11c>
    3970:	90 93 7e 03 	sts	0x037E, r25
    3974:	80 93 7d 03 	sts	0x037D, r24
    3978:	80 91 a3 03 	lds	r24, 0x03A3
    397c:	90 91 a4 03 	lds	r25, 0x03A4
    3980:	a0 91 a5 03 	lds	r26, 0x03A5
    3984:	b0 91 a6 03 	lds	r27, 0x03A6
    3988:	74 e0       	ldi	r23, 0x04	; 4
    398a:	b6 95       	lsr	r27
    398c:	a7 95       	ror	r26
    398e:	97 95       	ror	r25
    3990:	87 95       	ror	r24
    3992:	7a 95       	dec	r23
    3994:	d1 f7       	brne	.-12     	; 0x398a <calibrateSensors+0x142>
    3996:	90 93 80 03 	sts	0x0380, r25
    399a:	80 93 7f 03 	sts	0x037F, r24
    399e:	80 91 a7 03 	lds	r24, 0x03A7
    39a2:	90 91 a8 03 	lds	r25, 0x03A8
    39a6:	a0 91 a9 03 	lds	r26, 0x03A9
    39aa:	b0 91 aa 03 	lds	r27, 0x03AA
    39ae:	64 e0       	ldi	r22, 0x04	; 4
    39b0:	b6 95       	lsr	r27
    39b2:	a7 95       	ror	r26
    39b4:	97 95       	ror	r25
    39b6:	87 95       	ror	r24
    39b8:	6a 95       	dec	r22
    39ba:	d1 f7       	brne	.-12     	; 0x39b0 <calibrateSensors+0x168>
    39bc:	90 93 82 03 	sts	0x0382, r25
    39c0:	80 93 81 03 	sts	0x0381, r24
    39c4:	80 91 af 03 	lds	r24, 0x03AF
    39c8:	90 91 b0 03 	lds	r25, 0x03B0
    39cc:	a0 91 b1 03 	lds	r26, 0x03B1
    39d0:	b0 91 b2 03 	lds	r27, 0x03B2
    39d4:	54 e0       	ldi	r21, 0x04	; 4
    39d6:	b6 95       	lsr	r27
    39d8:	a7 95       	ror	r26
    39da:	97 95       	ror	r25
    39dc:	87 95       	ror	r24
    39de:	5a 95       	dec	r21
    39e0:	d1 f7       	brne	.-12     	; 0x39d6 <calibrateSensors+0x18e>
    39e2:	9c 01       	movw	r18, r24
    39e4:	80 91 b3 03 	lds	r24, 0x03B3
    39e8:	90 91 b4 03 	lds	r25, 0x03B4
    39ec:	a0 91 b5 03 	lds	r26, 0x03B5
    39f0:	b0 91 b6 03 	lds	r27, 0x03B6
    39f4:	44 e0       	ldi	r20, 0x04	; 4
    39f6:	b6 95       	lsr	r27
    39f8:	a7 95       	ror	r26
    39fa:	97 95       	ror	r25
    39fc:	87 95       	ror	r24
    39fe:	4a 95       	dec	r20
    3a00:	d1 f7       	brne	.-12     	; 0x39f6 <calibrateSensors+0x1ae>
    3a02:	bc 01       	movw	r22, r24
    3a04:	80 91 b7 03 	lds	r24, 0x03B7
    3a08:	90 91 b8 03 	lds	r25, 0x03B8
    3a0c:	a0 91 b9 03 	lds	r26, 0x03B9
    3a10:	b0 91 ba 03 	lds	r27, 0x03BA
    3a14:	f4 e0       	ldi	r31, 0x04	; 4
    3a16:	b6 95       	lsr	r27
    3a18:	a7 95       	ror	r26
    3a1a:	97 95       	ror	r25
    3a1c:	87 95       	ror	r24
    3a1e:	fa 95       	dec	r31
    3a20:	d1 f7       	brne	.-12     	; 0x3a16 <calibrateSensors+0x1ce>
    3a22:	ac 01       	movw	r20, r24
    3a24:	80 91 ab 03 	lds	r24, 0x03AB
    3a28:	90 91 ac 03 	lds	r25, 0x03AC
    3a2c:	a0 91 ad 03 	lds	r26, 0x03AD
    3a30:	b0 91 ae 03 	lds	r27, 0x03AE
    3a34:	e4 e0       	ldi	r30, 0x04	; 4
    3a36:	b6 95       	lsr	r27
    3a38:	a7 95       	ror	r26
    3a3a:	97 95       	ror	r25
    3a3c:	87 95       	ror	r24
    3a3e:	ea 95       	dec	r30
    3a40:	d1 f7       	brne	.-12     	; 0x3a36 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    3a42:	80 50       	subi	r24, 0x00	; 0
    3a44:	92 40       	sbci	r25, 0x02	; 2
    3a46:	90 93 84 03 	sts	0x0384, r25
    3a4a:	80 93 83 03 	sts	0x0383, r24
    3a4e:	20 50       	subi	r18, 0x00	; 0
    3a50:	32 40       	sbci	r19, 0x02	; 2
    3a52:	30 93 86 03 	sts	0x0386, r19
    3a56:	20 93 85 03 	sts	0x0385, r18
    3a5a:	60 50       	subi	r22, 0x00	; 0
    3a5c:	72 40       	sbci	r23, 0x02	; 2
    3a5e:	70 93 88 03 	sts	0x0388, r23
    3a62:	60 93 87 03 	sts	0x0387, r22
    3a66:	40 50       	subi	r20, 0x00	; 0
    3a68:	52 40       	sbci	r21, 0x02	; 2
    3a6a:	50 93 8a 03 	sts	0x038A, r21
    3a6e:	40 93 89 03 	sts	0x0389, r20
			}

			accOffsetX = accOffsetXSum>>4;
    3a72:	80 91 12 04 	lds	r24, 0x0412
    3a76:	90 91 13 04 	lds	r25, 0x0413
    3a7a:	95 95       	asr	r25
    3a7c:	87 95       	ror	r24
    3a7e:	95 95       	asr	r25
    3a80:	87 95       	ror	r24
    3a82:	95 95       	asr	r25
    3a84:	87 95       	ror	r24
    3a86:	95 95       	asr	r25
    3a88:	87 95       	ror	r24
    3a8a:	90 93 0d 04 	sts	0x040D, r25
    3a8e:	80 93 0c 04 	sts	0x040C, r24
			accOffsetY = accOffsetYSum>>4;
    3a92:	80 91 14 04 	lds	r24, 0x0414
    3a96:	90 91 15 04 	lds	r25, 0x0415
    3a9a:	95 95       	asr	r25
    3a9c:	87 95       	ror	r24
    3a9e:	95 95       	asr	r25
    3aa0:	87 95       	ror	r24
    3aa2:	95 95       	asr	r25
    3aa4:	87 95       	ror	r24
    3aa6:	95 95       	asr	r25
    3aa8:	87 95       	ror	r24
    3aaa:	90 93 0f 04 	sts	0x040F, r25
    3aae:	80 93 0e 04 	sts	0x040E, r24
			accOffsetZ = accOffsetZSum>>4;
    3ab2:	80 91 16 04 	lds	r24, 0x0416
    3ab6:	90 91 17 04 	lds	r25, 0x0417
    3aba:	95 95       	asr	r25
    3abc:	87 95       	ror	r24
    3abe:	95 95       	asr	r25
    3ac0:	87 95       	ror	r24
    3ac2:	95 95       	asr	r25
    3ac4:	87 95       	ror	r24
    3ac6:	95 95       	asr	r25
    3ac8:	87 95       	ror	r24
    3aca:	90 93 11 04 	sts	0x0411, r25
    3ace:	80 93 10 04 	sts	0x0410, r24

			startCalibration = 0;
    3ad2:	10 92 4f 04 	sts	0x044F, r1

		}

	}

	pwm_red = 255;
    3ad6:	8f ef       	ldi	r24, 0xFF	; 255
    3ad8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3adc:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3ae0:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    3ae4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <updateRedLed>
	updateGreenLed(pwm_green);
    3ae8:	80 91 0d 02 	lds	r24, 0x020D
    3aec:	0e 94 0f 1a 	call	0x341e	; 0x341e <updateGreenLed>
	updateBlueLed(pwm_blue);
    3af0:	80 91 0e 02 	lds	r24, 0x020E
    3af4:	0e 94 23 1a 	call	0x3446	; 0x3446 <updateBlueLed>

}
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    3afe:	80 91 c2 03 	lds	r24, 0x03C2
    3b02:	88 23       	and	r24, r24
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <calibrateSensors+0x2c0>
    3b06:	86 c1       	rjmp	.+780    	; 0x3e14 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    3b08:	10 92 c2 03 	sts	0x03C2, r1

				if(calibrationCycle==0) {		// reset all variables
    3b0c:	21 15       	cp	r18, r1
    3b0e:	31 05       	cpc	r19, r1
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <calibrateSensors+0x2cc>
    3b12:	86 c1       	rjmp	.+780    	; 0x3e20 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    3b14:	80 91 5b 03 	lds	r24, 0x035B
    3b18:	90 91 5c 03 	lds	r25, 0x035C
    3b1c:	aa 27       	eor	r26, r26
    3b1e:	97 fd       	sbrc	r25, 7
    3b20:	a0 95       	com	r26
    3b22:	ba 2f       	mov	r27, r26
    3b24:	40 91 8b 03 	lds	r20, 0x038B
    3b28:	50 91 8c 03 	lds	r21, 0x038C
    3b2c:	60 91 8d 03 	lds	r22, 0x038D
    3b30:	70 91 8e 03 	lds	r23, 0x038E
    3b34:	84 0f       	add	r24, r20
    3b36:	95 1f       	adc	r25, r21
    3b38:	a6 1f       	adc	r26, r22
    3b3a:	b7 1f       	adc	r27, r23
    3b3c:	80 93 8b 03 	sts	0x038B, r24
    3b40:	90 93 8c 03 	sts	0x038C, r25
    3b44:	a0 93 8d 03 	sts	0x038D, r26
    3b48:	b0 93 8e 03 	sts	0x038E, r27
    3b4c:	80 91 5d 03 	lds	r24, 0x035D
    3b50:	90 91 5e 03 	lds	r25, 0x035E
    3b54:	aa 27       	eor	r26, r26
    3b56:	97 fd       	sbrc	r25, 7
    3b58:	a0 95       	com	r26
    3b5a:	ba 2f       	mov	r27, r26
    3b5c:	40 91 8f 03 	lds	r20, 0x038F
    3b60:	50 91 90 03 	lds	r21, 0x0390
    3b64:	60 91 91 03 	lds	r22, 0x0391
    3b68:	70 91 92 03 	lds	r23, 0x0392
    3b6c:	84 0f       	add	r24, r20
    3b6e:	95 1f       	adc	r25, r21
    3b70:	a6 1f       	adc	r26, r22
    3b72:	b7 1f       	adc	r27, r23
    3b74:	80 93 8f 03 	sts	0x038F, r24
    3b78:	90 93 90 03 	sts	0x0390, r25
    3b7c:	a0 93 91 03 	sts	0x0391, r26
    3b80:	b0 93 92 03 	sts	0x0392, r27
    3b84:	80 91 5f 03 	lds	r24, 0x035F
    3b88:	90 91 60 03 	lds	r25, 0x0360
    3b8c:	aa 27       	eor	r26, r26
    3b8e:	97 fd       	sbrc	r25, 7
    3b90:	a0 95       	com	r26
    3b92:	ba 2f       	mov	r27, r26
    3b94:	40 91 93 03 	lds	r20, 0x0393
    3b98:	50 91 94 03 	lds	r21, 0x0394
    3b9c:	60 91 95 03 	lds	r22, 0x0395
    3ba0:	70 91 96 03 	lds	r23, 0x0396
    3ba4:	84 0f       	add	r24, r20
    3ba6:	95 1f       	adc	r25, r21
    3ba8:	a6 1f       	adc	r26, r22
    3baa:	b7 1f       	adc	r27, r23
    3bac:	80 93 93 03 	sts	0x0393, r24
    3bb0:	90 93 94 03 	sts	0x0394, r25
    3bb4:	a0 93 95 03 	sts	0x0395, r26
    3bb8:	b0 93 96 03 	sts	0x0396, r27
    3bbc:	80 91 61 03 	lds	r24, 0x0361
    3bc0:	90 91 62 03 	lds	r25, 0x0362
    3bc4:	aa 27       	eor	r26, r26
    3bc6:	97 fd       	sbrc	r25, 7
    3bc8:	a0 95       	com	r26
    3bca:	ba 2f       	mov	r27, r26
    3bcc:	40 91 97 03 	lds	r20, 0x0397
    3bd0:	50 91 98 03 	lds	r21, 0x0398
    3bd4:	60 91 99 03 	lds	r22, 0x0399
    3bd8:	70 91 9a 03 	lds	r23, 0x039A
    3bdc:	84 0f       	add	r24, r20
    3bde:	95 1f       	adc	r25, r21
    3be0:	a6 1f       	adc	r26, r22
    3be2:	b7 1f       	adc	r27, r23
    3be4:	80 93 97 03 	sts	0x0397, r24
    3be8:	90 93 98 03 	sts	0x0398, r25
    3bec:	a0 93 99 03 	sts	0x0399, r26
    3bf0:	b0 93 9a 03 	sts	0x039A, r27
    3bf4:	80 91 63 03 	lds	r24, 0x0363
    3bf8:	90 91 64 03 	lds	r25, 0x0364
    3bfc:	aa 27       	eor	r26, r26
    3bfe:	97 fd       	sbrc	r25, 7
    3c00:	a0 95       	com	r26
    3c02:	ba 2f       	mov	r27, r26
    3c04:	40 91 9b 03 	lds	r20, 0x039B
    3c08:	50 91 9c 03 	lds	r21, 0x039C
    3c0c:	60 91 9d 03 	lds	r22, 0x039D
    3c10:	70 91 9e 03 	lds	r23, 0x039E
    3c14:	84 0f       	add	r24, r20
    3c16:	95 1f       	adc	r25, r21
    3c18:	a6 1f       	adc	r26, r22
    3c1a:	b7 1f       	adc	r27, r23
    3c1c:	80 93 9b 03 	sts	0x039B, r24
    3c20:	90 93 9c 03 	sts	0x039C, r25
    3c24:	a0 93 9d 03 	sts	0x039D, r26
    3c28:	b0 93 9e 03 	sts	0x039E, r27
    3c2c:	80 91 65 03 	lds	r24, 0x0365
    3c30:	90 91 66 03 	lds	r25, 0x0366
    3c34:	aa 27       	eor	r26, r26
    3c36:	97 fd       	sbrc	r25, 7
    3c38:	a0 95       	com	r26
    3c3a:	ba 2f       	mov	r27, r26
    3c3c:	40 91 9f 03 	lds	r20, 0x039F
    3c40:	50 91 a0 03 	lds	r21, 0x03A0
    3c44:	60 91 a1 03 	lds	r22, 0x03A1
    3c48:	70 91 a2 03 	lds	r23, 0x03A2
    3c4c:	84 0f       	add	r24, r20
    3c4e:	95 1f       	adc	r25, r21
    3c50:	a6 1f       	adc	r26, r22
    3c52:	b7 1f       	adc	r27, r23
    3c54:	80 93 9f 03 	sts	0x039F, r24
    3c58:	90 93 a0 03 	sts	0x03A0, r25
    3c5c:	a0 93 a1 03 	sts	0x03A1, r26
    3c60:	b0 93 a2 03 	sts	0x03A2, r27
    3c64:	80 91 67 03 	lds	r24, 0x0367
    3c68:	90 91 68 03 	lds	r25, 0x0368
    3c6c:	aa 27       	eor	r26, r26
    3c6e:	97 fd       	sbrc	r25, 7
    3c70:	a0 95       	com	r26
    3c72:	ba 2f       	mov	r27, r26
    3c74:	40 91 a3 03 	lds	r20, 0x03A3
    3c78:	50 91 a4 03 	lds	r21, 0x03A4
    3c7c:	60 91 a5 03 	lds	r22, 0x03A5
    3c80:	70 91 a6 03 	lds	r23, 0x03A6
    3c84:	84 0f       	add	r24, r20
    3c86:	95 1f       	adc	r25, r21
    3c88:	a6 1f       	adc	r26, r22
    3c8a:	b7 1f       	adc	r27, r23
    3c8c:	80 93 a3 03 	sts	0x03A3, r24
    3c90:	90 93 a4 03 	sts	0x03A4, r25
    3c94:	a0 93 a5 03 	sts	0x03A5, r26
    3c98:	b0 93 a6 03 	sts	0x03A6, r27
    3c9c:	80 91 69 03 	lds	r24, 0x0369
    3ca0:	90 91 6a 03 	lds	r25, 0x036A
    3ca4:	aa 27       	eor	r26, r26
    3ca6:	97 fd       	sbrc	r25, 7
    3ca8:	a0 95       	com	r26
    3caa:	ba 2f       	mov	r27, r26
    3cac:	40 91 a7 03 	lds	r20, 0x03A7
    3cb0:	50 91 a8 03 	lds	r21, 0x03A8
    3cb4:	60 91 a9 03 	lds	r22, 0x03A9
    3cb8:	70 91 aa 03 	lds	r23, 0x03AA
    3cbc:	84 0f       	add	r24, r20
    3cbe:	95 1f       	adc	r25, r21
    3cc0:	a6 1f       	adc	r26, r22
    3cc2:	b7 1f       	adc	r27, r23
    3cc4:	80 93 a7 03 	sts	0x03A7, r24
    3cc8:	90 93 a8 03 	sts	0x03A8, r25
    3ccc:	a0 93 a9 03 	sts	0x03A9, r26
    3cd0:	b0 93 aa 03 	sts	0x03AA, r27
    3cd4:	80 91 6b 03 	lds	r24, 0x036B
    3cd8:	90 91 6c 03 	lds	r25, 0x036C
    3cdc:	aa 27       	eor	r26, r26
    3cde:	97 fd       	sbrc	r25, 7
    3ce0:	a0 95       	com	r26
    3ce2:	ba 2f       	mov	r27, r26
    3ce4:	40 91 ab 03 	lds	r20, 0x03AB
    3ce8:	50 91 ac 03 	lds	r21, 0x03AC
    3cec:	60 91 ad 03 	lds	r22, 0x03AD
    3cf0:	70 91 ae 03 	lds	r23, 0x03AE
    3cf4:	84 0f       	add	r24, r20
    3cf6:	95 1f       	adc	r25, r21
    3cf8:	a6 1f       	adc	r26, r22
    3cfa:	b7 1f       	adc	r27, r23
    3cfc:	80 93 ab 03 	sts	0x03AB, r24
    3d00:	90 93 ac 03 	sts	0x03AC, r25
    3d04:	a0 93 ad 03 	sts	0x03AD, r26
    3d08:	b0 93 ae 03 	sts	0x03AE, r27
    3d0c:	80 91 6d 03 	lds	r24, 0x036D
    3d10:	90 91 6e 03 	lds	r25, 0x036E
    3d14:	aa 27       	eor	r26, r26
    3d16:	97 fd       	sbrc	r25, 7
    3d18:	a0 95       	com	r26
    3d1a:	ba 2f       	mov	r27, r26
    3d1c:	40 91 af 03 	lds	r20, 0x03AF
    3d20:	50 91 b0 03 	lds	r21, 0x03B0
    3d24:	60 91 b1 03 	lds	r22, 0x03B1
    3d28:	70 91 b2 03 	lds	r23, 0x03B2
    3d2c:	84 0f       	add	r24, r20
    3d2e:	95 1f       	adc	r25, r21
    3d30:	a6 1f       	adc	r26, r22
    3d32:	b7 1f       	adc	r27, r23
    3d34:	80 93 af 03 	sts	0x03AF, r24
    3d38:	90 93 b0 03 	sts	0x03B0, r25
    3d3c:	a0 93 b1 03 	sts	0x03B1, r26
    3d40:	b0 93 b2 03 	sts	0x03B2, r27
    3d44:	80 91 6f 03 	lds	r24, 0x036F
    3d48:	90 91 70 03 	lds	r25, 0x0370
    3d4c:	aa 27       	eor	r26, r26
    3d4e:	97 fd       	sbrc	r25, 7
    3d50:	a0 95       	com	r26
    3d52:	ba 2f       	mov	r27, r26
    3d54:	40 91 b3 03 	lds	r20, 0x03B3
    3d58:	50 91 b4 03 	lds	r21, 0x03B4
    3d5c:	60 91 b5 03 	lds	r22, 0x03B5
    3d60:	70 91 b6 03 	lds	r23, 0x03B6
    3d64:	84 0f       	add	r24, r20
    3d66:	95 1f       	adc	r25, r21
    3d68:	a6 1f       	adc	r26, r22
    3d6a:	b7 1f       	adc	r27, r23
    3d6c:	80 93 b3 03 	sts	0x03B3, r24
    3d70:	90 93 b4 03 	sts	0x03B4, r25
    3d74:	a0 93 b5 03 	sts	0x03B5, r26
    3d78:	b0 93 b6 03 	sts	0x03B6, r27
    3d7c:	80 91 71 03 	lds	r24, 0x0371
    3d80:	90 91 72 03 	lds	r25, 0x0372
    3d84:	aa 27       	eor	r26, r26
    3d86:	97 fd       	sbrc	r25, 7
    3d88:	a0 95       	com	r26
    3d8a:	ba 2f       	mov	r27, r26
    3d8c:	40 91 b7 03 	lds	r20, 0x03B7
    3d90:	50 91 b8 03 	lds	r21, 0x03B8
    3d94:	60 91 b9 03 	lds	r22, 0x03B9
    3d98:	70 91 ba 03 	lds	r23, 0x03BA
    3d9c:	84 0f       	add	r24, r20
    3d9e:	95 1f       	adc	r25, r21
    3da0:	a6 1f       	adc	r26, r22
    3da2:	b7 1f       	adc	r27, r23
    3da4:	80 93 b7 03 	sts	0x03B7, r24
    3da8:	90 93 b8 03 	sts	0x03B8, r25
    3dac:	a0 93 b9 03 	sts	0x03B9, r26
    3db0:	b0 93 ba 03 	sts	0x03BA, r27
				}

				accOffsetXSum += accX;
    3db4:	80 91 12 04 	lds	r24, 0x0412
    3db8:	90 91 13 04 	lds	r25, 0x0413
    3dbc:	40 91 06 04 	lds	r20, 0x0406
    3dc0:	50 91 07 04 	lds	r21, 0x0407
    3dc4:	84 0f       	add	r24, r20
    3dc6:	95 1f       	adc	r25, r21
    3dc8:	90 93 13 04 	sts	0x0413, r25
    3dcc:	80 93 12 04 	sts	0x0412, r24
				accOffsetYSum += accY;
    3dd0:	80 91 14 04 	lds	r24, 0x0414
    3dd4:	90 91 15 04 	lds	r25, 0x0415
    3dd8:	40 91 08 04 	lds	r20, 0x0408
    3ddc:	50 91 09 04 	lds	r21, 0x0409
    3de0:	84 0f       	add	r24, r20
    3de2:	95 1f       	adc	r25, r21
    3de4:	90 93 15 04 	sts	0x0415, r25
    3de8:	80 93 14 04 	sts	0x0414, r24
				accOffsetZSum += accZ;
    3dec:	80 91 16 04 	lds	r24, 0x0416
    3df0:	90 91 17 04 	lds	r25, 0x0417
    3df4:	40 91 0a 04 	lds	r20, 0x040A
    3df8:	50 91 0b 04 	lds	r21, 0x040B
    3dfc:	84 0f       	add	r24, r20
    3dfe:	95 1f       	adc	r25, r21
    3e00:	90 93 17 04 	sts	0x0417, r25
    3e04:	80 93 16 04 	sts	0x0416, r24

				calibrationCycle++;
    3e08:	2f 5f       	subi	r18, 0xFF	; 255
    3e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0c:	30 93 1f 04 	sts	0x041F, r19
    3e10:	20 93 1e 04 	sts	0x041E, r18
    3e14:	80 91 4f 04 	lds	r24, 0x044F
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    3e18:	88 23       	and	r24, r24
    3e1a:	09 f0       	breq	.+2      	; 0x3e1e <calibrateSensors+0x5d6>
    3e1c:	31 cd       	rjmp	.-1438   	; 0x3880 <calibrateSensors+0x38>
    3e1e:	5b ce       	rjmp	.-842    	; 0x3ad6 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e20:	10 92 8b 03 	sts	0x038B, r1
    3e24:	10 92 8c 03 	sts	0x038C, r1
    3e28:	10 92 8d 03 	sts	0x038D, r1
    3e2c:	10 92 8e 03 	sts	0x038E, r1
						proximityOffset[i] = 0;
    3e30:	10 92 74 03 	sts	0x0374, r1
    3e34:	10 92 73 03 	sts	0x0373, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e38:	10 92 8f 03 	sts	0x038F, r1
    3e3c:	10 92 90 03 	sts	0x0390, r1
    3e40:	10 92 91 03 	sts	0x0391, r1
    3e44:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    3e48:	10 92 76 03 	sts	0x0376, r1
    3e4c:	10 92 75 03 	sts	0x0375, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e50:	10 92 93 03 	sts	0x0393, r1
    3e54:	10 92 94 03 	sts	0x0394, r1
    3e58:	10 92 95 03 	sts	0x0395, r1
    3e5c:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    3e60:	10 92 78 03 	sts	0x0378, r1
    3e64:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e68:	10 92 97 03 	sts	0x0397, r1
    3e6c:	10 92 98 03 	sts	0x0398, r1
    3e70:	10 92 99 03 	sts	0x0399, r1
    3e74:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    3e78:	10 92 7a 03 	sts	0x037A, r1
    3e7c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e80:	10 92 9b 03 	sts	0x039B, r1
    3e84:	10 92 9c 03 	sts	0x039C, r1
    3e88:	10 92 9d 03 	sts	0x039D, r1
    3e8c:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    3e90:	10 92 7c 03 	sts	0x037C, r1
    3e94:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3e98:	10 92 9f 03 	sts	0x039F, r1
    3e9c:	10 92 a0 03 	sts	0x03A0, r1
    3ea0:	10 92 a1 03 	sts	0x03A1, r1
    3ea4:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    3ea8:	10 92 7e 03 	sts	0x037E, r1
    3eac:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3eb0:	10 92 a3 03 	sts	0x03A3, r1
    3eb4:	10 92 a4 03 	sts	0x03A4, r1
    3eb8:	10 92 a5 03 	sts	0x03A5, r1
    3ebc:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    3ec0:	10 92 80 03 	sts	0x0380, r1
    3ec4:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3ec8:	10 92 a7 03 	sts	0x03A7, r1
    3ecc:	10 92 a8 03 	sts	0x03A8, r1
    3ed0:	10 92 a9 03 	sts	0x03A9, r1
    3ed4:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    3ed8:	10 92 82 03 	sts	0x0382, r1
    3edc:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3ee0:	10 92 ab 03 	sts	0x03AB, r1
    3ee4:	10 92 ac 03 	sts	0x03AC, r1
    3ee8:	10 92 ad 03 	sts	0x03AD, r1
    3eec:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    3ef0:	10 92 84 03 	sts	0x0384, r1
    3ef4:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3ef8:	10 92 af 03 	sts	0x03AF, r1
    3efc:	10 92 b0 03 	sts	0x03B0, r1
    3f00:	10 92 b1 03 	sts	0x03B1, r1
    3f04:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    3f08:	10 92 86 03 	sts	0x0386, r1
    3f0c:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3f10:	10 92 b3 03 	sts	0x03B3, r1
    3f14:	10 92 b4 03 	sts	0x03B4, r1
    3f18:	10 92 b5 03 	sts	0x03B5, r1
    3f1c:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    3f20:	10 92 88 03 	sts	0x0388, r1
    3f24:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    3f28:	10 92 b7 03 	sts	0x03B7, r1
    3f2c:	10 92 b8 03 	sts	0x03B8, r1
    3f30:	10 92 b9 03 	sts	0x03B9, r1
    3f34:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    3f38:	10 92 8a 03 	sts	0x038A, r1
    3f3c:	10 92 89 03 	sts	0x0389, r1
					}
					accOffsetXSum = 0;
    3f40:	10 92 13 04 	sts	0x0413, r1
    3f44:	10 92 12 04 	sts	0x0412, r1
					accOffsetYSum = 0;
    3f48:	10 92 15 04 	sts	0x0415, r1
    3f4c:	10 92 14 04 	sts	0x0414, r1
					accOffsetZSum = 0;
    3f50:	10 92 17 04 	sts	0x0417, r1
    3f54:	10 92 16 04 	sts	0x0416, r1

					calibrationCycle++;
    3f58:	d0 93 1f 04 	sts	0x041F, r29
    3f5c:	c0 93 1e 04 	sts	0x041E, r28
    3f60:	80 91 4f 04 	lds	r24, 0x044F

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    3f64:	59 cf       	rjmp	.-334    	; 0x3e18 <calibrateSensors+0x5d0>

00003f66 <computeAngle>:

	}

}

void computeAngle() {
    3f66:	ef 92       	push	r14
    3f68:	ff 92       	push	r15
    3f6a:	0f 93       	push	r16
    3f6c:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3f6e:	80 91 0a 04 	lds	r24, 0x040A
    3f72:	90 91 0b 04 	lds	r25, 0x040B
    3f76:	97 fd       	sbrc	r25, 7
    3f78:	5b c0       	rjmp	.+182    	; 0x4030 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    3f7a:	80 31       	cpi	r24, 0x10	; 16
    3f7c:	91 05       	cpc	r25, r1
    3f7e:	08 f0       	brcs	.+2      	; 0x3f82 <computeAngle+0x1c>
    3f80:	42 c0       	rjmp	.+132    	; 0x4006 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	80 93 15 02 	sts	0x0215, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    3f88:	90 91 14 02 	lds	r25, 0x0214
    3f8c:	98 17       	cp	r25, r24
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <computeAngle+0x2c>
    3f90:	42 c0       	rjmp	.+132    	; 0x4016 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    3f92:	10 92 1a 04 	sts	0x041A, r1
	}
	prevPosition = currPosition;
    3f96:	80 93 14 02 	sts	0x0214, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    3f9a:	60 91 06 04 	lds	r22, 0x0406
    3f9e:	70 91 07 04 	lds	r23, 0x0407
    3fa2:	88 27       	eor	r24, r24
    3fa4:	77 fd       	sbrc	r23, 7
    3fa6:	80 95       	com	r24
    3fa8:	98 2f       	mov	r25, r24
    3faa:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatsisf>
    3fae:	7b 01       	movw	r14, r22
    3fb0:	8c 01       	movw	r16, r24
    3fb2:	60 91 08 04 	lds	r22, 0x0408
    3fb6:	70 91 09 04 	lds	r23, 0x0409
    3fba:	88 27       	eor	r24, r24
    3fbc:	77 fd       	sbrc	r23, 7
    3fbe:	80 95       	com	r24
    3fc0:	98 2f       	mov	r25, r24
    3fc2:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatsisf>
    3fc6:	9b 01       	movw	r18, r22
    3fc8:	ac 01       	movw	r20, r24
    3fca:	c8 01       	movw	r24, r16
    3fcc:	b7 01       	movw	r22, r14
    3fce:	0e 94 f5 23 	call	0x47ea	; 0x47ea <atan2>
    3fd2:	21 ee       	ldi	r18, 0xE1	; 225
    3fd4:	3e e2       	ldi	r19, 0x2E	; 46
    3fd6:	45 e6       	ldi	r20, 0x65	; 101
    3fd8:	52 e4       	ldi	r21, 0x42	; 66
    3fda:	0e 94 1c 20 	call	0x4038	; 0x4038 <__mulsf3>
    3fde:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixsfsi>
    3fe2:	9b 01       	movw	r18, r22
    3fe4:	70 93 19 04 	sts	0x0419, r23
    3fe8:	60 93 18 04 	sts	0x0418, r22

	if(currentAngle < 0) {
    3fec:	77 ff       	sbrs	r23, 7
    3fee:	06 c0       	rjmp	.+12     	; 0x3ffc <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    3ff0:	28 59       	subi	r18, 0x98	; 152
    3ff2:	3e 4f       	sbci	r19, 0xFE	; 254
    3ff4:	30 93 19 04 	sts	0x0419, r19
    3ff8:	20 93 18 04 	sts	0x0418, r18
	}

}
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	ff 90       	pop	r15
    4002:	ef 90       	pop	r14
    4004:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    4006:	10 92 15 02 	sts	0x0215, r1
    400a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    400c:	90 91 14 02 	lds	r25, 0x0214
    4010:	98 17       	cp	r25, r24
    4012:	09 f0       	breq	.+2      	; 0x4016 <computeAngle+0xb0>
    4014:	be cf       	rjmp	.-132    	; 0x3f92 <computeAngle+0x2c>
		timesInSamePos++;
    4016:	90 91 1a 04 	lds	r25, 0x041A
    401a:	9f 5f       	subi	r25, 0xFF	; 255
    401c:	90 93 1a 04 	sts	0x041A, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    4020:	95 30       	cpi	r25, 0x05	; 5
    4022:	08 f4       	brcc	.+2      	; 0x4026 <computeAngle+0xc0>
    4024:	b8 cf       	rjmp	.-144    	; 0x3f96 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4026:	10 92 1a 04 	sts	0x041A, r1
			robotPosition = currPosition;
    402a:	80 93 16 02 	sts	0x0216, r24
    402e:	b3 cf       	rjmp	.-154    	; 0x3f96 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    4030:	90 95       	com	r25
    4032:	81 95       	neg	r24
    4034:	9f 4f       	sbci	r25, 0xFF	; 255
    4036:	a1 cf       	rjmp	.-190    	; 0x3f7a <computeAngle+0x14>

00004038 <__mulsf3>:
    4038:	a0 e2       	ldi	r26, 0x20	; 32
    403a:	b0 e0       	ldi	r27, 0x00	; 0
    403c:	e2 e2       	ldi	r30, 0x22	; 34
    403e:	f0 e2       	ldi	r31, 0x20	; 32
    4040:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__+0x4>
    4044:	69 83       	std	Y+1, r22	; 0x01
    4046:	7a 83       	std	Y+2, r23	; 0x02
    4048:	8b 83       	std	Y+3, r24	; 0x03
    404a:	9c 83       	std	Y+4, r25	; 0x04
    404c:	2d 83       	std	Y+5, r18	; 0x05
    404e:	3e 83       	std	Y+6, r19	; 0x06
    4050:	4f 83       	std	Y+7, r20	; 0x07
    4052:	58 87       	std	Y+8, r21	; 0x08
    4054:	99 e0       	ldi	r25, 0x09	; 9
    4056:	e9 2e       	mov	r14, r25
    4058:	f1 2c       	mov	r15, r1
    405a:	ec 0e       	add	r14, r28
    405c:	fd 1e       	adc	r15, r29
    405e:	b7 01       	movw	r22, r14
    4060:	ce 01       	movw	r24, r28
    4062:	01 96       	adiw	r24, 0x01	; 1
    4064:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__unpack_f>
    4068:	8e 01       	movw	r16, r28
    406a:	0f 5e       	subi	r16, 0xEF	; 239
    406c:	1f 4f       	sbci	r17, 0xFF	; 255
    406e:	b8 01       	movw	r22, r16
    4070:	ce 01       	movw	r24, r28
    4072:	05 96       	adiw	r24, 0x05	; 5
    4074:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__unpack_f>
    4078:	99 85       	ldd	r25, Y+9	; 0x09
    407a:	92 30       	cpi	r25, 0x02	; 2
    407c:	88 f0       	brcs	.+34     	; 0x40a0 <__mulsf3+0x68>
    407e:	89 89       	ldd	r24, Y+17	; 0x11
    4080:	82 30       	cpi	r24, 0x02	; 2
    4082:	c0 f0       	brcs	.+48     	; 0x40b4 <__mulsf3+0x7c>
    4084:	94 30       	cpi	r25, 0x04	; 4
    4086:	19 f4       	brne	.+6      	; 0x408e <__mulsf3+0x56>
    4088:	82 30       	cpi	r24, 0x02	; 2
    408a:	29 f0       	breq	.+10     	; 0x4096 <__mulsf3+0x5e>
    408c:	09 c0       	rjmp	.+18     	; 0x40a0 <__mulsf3+0x68>
    408e:	84 30       	cpi	r24, 0x04	; 4
    4090:	29 f4       	brne	.+10     	; 0x409c <__mulsf3+0x64>
    4092:	92 30       	cpi	r25, 0x02	; 2
    4094:	79 f4       	brne	.+30     	; 0x40b4 <__mulsf3+0x7c>
    4096:	67 e1       	ldi	r22, 0x17	; 23
    4098:	72 e0       	ldi	r23, 0x02	; 2
    409a:	c6 c0       	rjmp	.+396    	; 0x4228 <__mulsf3+0x1f0>
    409c:	92 30       	cpi	r25, 0x02	; 2
    409e:	41 f4       	brne	.+16     	; 0x40b0 <__mulsf3+0x78>
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a4:	8a 89       	ldd	r24, Y+18	; 0x12
    40a6:	98 13       	cpse	r25, r24
    40a8:	21 e0       	ldi	r18, 0x01	; 1
    40aa:	2a 87       	std	Y+10, r18	; 0x0a
    40ac:	b7 01       	movw	r22, r14
    40ae:	bc c0       	rjmp	.+376    	; 0x4228 <__mulsf3+0x1f0>
    40b0:	82 30       	cpi	r24, 0x02	; 2
    40b2:	41 f4       	brne	.+16     	; 0x40c4 <__mulsf3+0x8c>
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b8:	8a 89       	ldd	r24, Y+18	; 0x12
    40ba:	98 13       	cpse	r25, r24
    40bc:	21 e0       	ldi	r18, 0x01	; 1
    40be:	2a 8b       	std	Y+18, r18	; 0x12
    40c0:	b8 01       	movw	r22, r16
    40c2:	b2 c0       	rjmp	.+356    	; 0x4228 <__mulsf3+0x1f0>
    40c4:	cd 84       	ldd	r12, Y+13	; 0x0d
    40c6:	de 84       	ldd	r13, Y+14	; 0x0e
    40c8:	ef 84       	ldd	r14, Y+15	; 0x0f
    40ca:	f8 88       	ldd	r15, Y+16	; 0x10
    40cc:	0d 89       	ldd	r16, Y+21	; 0x15
    40ce:	1e 89       	ldd	r17, Y+22	; 0x16
    40d0:	2f 89       	ldd	r18, Y+23	; 0x17
    40d2:	38 8d       	ldd	r19, Y+24	; 0x18
    40d4:	88 24       	eor	r8, r8
    40d6:	99 24       	eor	r9, r9
    40d8:	54 01       	movw	r10, r8
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	60 e0       	ldi	r22, 0x00	; 0
    40e0:	70 e0       	ldi	r23, 0x00	; 0
    40e2:	44 24       	eor	r4, r4
    40e4:	55 24       	eor	r5, r5
    40e6:	32 01       	movw	r6, r4
    40e8:	e0 e0       	ldi	r30, 0x00	; 0
    40ea:	f0 e0       	ldi	r31, 0x00	; 0
    40ec:	c6 01       	movw	r24, r12
    40ee:	81 70       	andi	r24, 0x01	; 1
    40f0:	90 70       	andi	r25, 0x00	; 0
    40f2:	89 2b       	or	r24, r25
    40f4:	d9 f0       	breq	.+54     	; 0x412c <__mulsf3+0xf4>
    40f6:	80 0e       	add	r8, r16
    40f8:	91 1e       	adc	r9, r17
    40fa:	a2 1e       	adc	r10, r18
    40fc:	b3 1e       	adc	r11, r19
    40fe:	db 01       	movw	r26, r22
    4100:	ca 01       	movw	r24, r20
    4102:	84 0d       	add	r24, r4
    4104:	95 1d       	adc	r25, r5
    4106:	a6 1d       	adc	r26, r6
    4108:	b7 1d       	adc	r27, r7
    410a:	40 e0       	ldi	r20, 0x00	; 0
    410c:	50 e0       	ldi	r21, 0x00	; 0
    410e:	60 e0       	ldi	r22, 0x00	; 0
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	80 16       	cp	r8, r16
    4114:	91 06       	cpc	r9, r17
    4116:	a2 06       	cpc	r10, r18
    4118:	b3 06       	cpc	r11, r19
    411a:	20 f4       	brcc	.+8      	; 0x4124 <__mulsf3+0xec>
    411c:	41 e0       	ldi	r20, 0x01	; 1
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	70 e0       	ldi	r23, 0x00	; 0
    4124:	48 0f       	add	r20, r24
    4126:	59 1f       	adc	r21, r25
    4128:	6a 1f       	adc	r22, r26
    412a:	7b 1f       	adc	r23, r27
    412c:	44 0c       	add	r4, r4
    412e:	55 1c       	adc	r5, r5
    4130:	66 1c       	adc	r6, r6
    4132:	77 1c       	adc	r7, r7
    4134:	37 ff       	sbrs	r19, 7
    4136:	08 c0       	rjmp	.+16     	; 0x4148 <__mulsf3+0x110>
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	a0 e0       	ldi	r26, 0x00	; 0
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	48 2a       	or	r4, r24
    4142:	59 2a       	or	r5, r25
    4144:	6a 2a       	or	r6, r26
    4146:	7b 2a       	or	r7, r27
    4148:	31 96       	adiw	r30, 0x01	; 1
    414a:	e0 32       	cpi	r30, 0x20	; 32
    414c:	f1 05       	cpc	r31, r1
    414e:	49 f0       	breq	.+18     	; 0x4162 <__mulsf3+0x12a>
    4150:	00 0f       	add	r16, r16
    4152:	11 1f       	adc	r17, r17
    4154:	22 1f       	adc	r18, r18
    4156:	33 1f       	adc	r19, r19
    4158:	f6 94       	lsr	r15
    415a:	e7 94       	ror	r14
    415c:	d7 94       	ror	r13
    415e:	c7 94       	ror	r12
    4160:	c5 cf       	rjmp	.-118    	; 0x40ec <__mulsf3+0xb4>
    4162:	8b 89       	ldd	r24, Y+19	; 0x13
    4164:	9c 89       	ldd	r25, Y+20	; 0x14
    4166:	2b 85       	ldd	r18, Y+11	; 0x0b
    4168:	3c 85       	ldd	r19, Y+12	; 0x0c
    416a:	82 0f       	add	r24, r18
    416c:	93 1f       	adc	r25, r19
    416e:	02 96       	adiw	r24, 0x02	; 2
    4170:	9c 8f       	std	Y+28, r25	; 0x1c
    4172:	8b 8f       	std	Y+27, r24	; 0x1b
    4174:	1a 8e       	std	Y+26, r1	; 0x1a
    4176:	9a 85       	ldd	r25, Y+10	; 0x0a
    4178:	8a 89       	ldd	r24, Y+18	; 0x12
    417a:	98 17       	cp	r25, r24
    417c:	11 f0       	breq	.+4      	; 0x4182 <__mulsf3+0x14a>
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	8a 8f       	std	Y+26, r24	; 0x1a
    4182:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4184:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4186:	17 c0       	rjmp	.+46     	; 0x41b6 <__mulsf3+0x17e>
    4188:	ca 01       	movw	r24, r20
    418a:	81 70       	andi	r24, 0x01	; 1
    418c:	90 70       	andi	r25, 0x00	; 0
    418e:	89 2b       	or	r24, r25
    4190:	61 f0       	breq	.+24     	; 0x41aa <__mulsf3+0x172>
    4192:	b6 94       	lsr	r11
    4194:	a7 94       	ror	r10
    4196:	97 94       	ror	r9
    4198:	87 94       	ror	r8
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	a0 e0       	ldi	r26, 0x00	; 0
    41a0:	b0 e8       	ldi	r27, 0x80	; 128
    41a2:	88 2a       	or	r8, r24
    41a4:	99 2a       	or	r9, r25
    41a6:	aa 2a       	or	r10, r26
    41a8:	bb 2a       	or	r11, r27
    41aa:	76 95       	lsr	r23
    41ac:	67 95       	ror	r22
    41ae:	57 95       	ror	r21
    41b0:	47 95       	ror	r20
    41b2:	2f 5f       	subi	r18, 0xFF	; 255
    41b4:	3f 4f       	sbci	r19, 0xFF	; 255
    41b6:	77 fd       	sbrc	r23, 7
    41b8:	e7 cf       	rjmp	.-50     	; 0x4188 <__mulsf3+0x150>
    41ba:	c9 01       	movw	r24, r18
    41bc:	0b c0       	rjmp	.+22     	; 0x41d4 <__mulsf3+0x19c>
    41be:	44 0f       	add	r20, r20
    41c0:	55 1f       	adc	r21, r21
    41c2:	66 1f       	adc	r22, r22
    41c4:	77 1f       	adc	r23, r23
    41c6:	b7 fc       	sbrc	r11, 7
    41c8:	41 60       	ori	r20, 0x01	; 1
    41ca:	88 0c       	add	r8, r8
    41cc:	99 1c       	adc	r9, r9
    41ce:	aa 1c       	adc	r10, r10
    41d0:	bb 1c       	adc	r11, r11
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	40 30       	cpi	r20, 0x00	; 0
    41d6:	a0 e0       	ldi	r26, 0x00	; 0
    41d8:	5a 07       	cpc	r21, r26
    41da:	a0 e0       	ldi	r26, 0x00	; 0
    41dc:	6a 07       	cpc	r22, r26
    41de:	a0 e4       	ldi	r26, 0x40	; 64
    41e0:	7a 07       	cpc	r23, r26
    41e2:	68 f3       	brcs	.-38     	; 0x41be <__mulsf3+0x186>
    41e4:	9c 8f       	std	Y+28, r25	; 0x1c
    41e6:	8b 8f       	std	Y+27, r24	; 0x1b
    41e8:	db 01       	movw	r26, r22
    41ea:	ca 01       	movw	r24, r20
    41ec:	8f 77       	andi	r24, 0x7F	; 127
    41ee:	90 70       	andi	r25, 0x00	; 0
    41f0:	a0 70       	andi	r26, 0x00	; 0
    41f2:	b0 70       	andi	r27, 0x00	; 0
    41f4:	80 34       	cpi	r24, 0x40	; 64
    41f6:	91 05       	cpc	r25, r1
    41f8:	a1 05       	cpc	r26, r1
    41fa:	b1 05       	cpc	r27, r1
    41fc:	61 f4       	brne	.+24     	; 0x4216 <__mulsf3+0x1de>
    41fe:	47 fd       	sbrc	r20, 7
    4200:	0a c0       	rjmp	.+20     	; 0x4216 <__mulsf3+0x1de>
    4202:	81 14       	cp	r8, r1
    4204:	91 04       	cpc	r9, r1
    4206:	a1 04       	cpc	r10, r1
    4208:	b1 04       	cpc	r11, r1
    420a:	29 f0       	breq	.+10     	; 0x4216 <__mulsf3+0x1de>
    420c:	40 5c       	subi	r20, 0xC0	; 192
    420e:	5f 4f       	sbci	r21, 0xFF	; 255
    4210:	6f 4f       	sbci	r22, 0xFF	; 255
    4212:	7f 4f       	sbci	r23, 0xFF	; 255
    4214:	40 78       	andi	r20, 0x80	; 128
    4216:	4d 8f       	std	Y+29, r20	; 0x1d
    4218:	5e 8f       	std	Y+30, r21	; 0x1e
    421a:	6f 8f       	std	Y+31, r22	; 0x1f
    421c:	78 a3       	std	Y+32, r23	; 0x20
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	89 8f       	std	Y+25, r24	; 0x19
    4222:	be 01       	movw	r22, r28
    4224:	67 5e       	subi	r22, 0xE7	; 231
    4226:	7f 4f       	sbci	r23, 0xFF	; 255
    4228:	cb 01       	movw	r24, r22
    422a:	0e 94 19 22 	call	0x4432	; 0x4432 <__pack_f>
    422e:	e0 e1       	ldi	r30, 0x10	; 16
    4230:	a0 96       	adiw	r28, 0x20	; 32
    4232:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__+0x4>

00004236 <__floatsisf>:
    4236:	a8 e0       	ldi	r26, 0x08	; 8
    4238:	b0 e0       	ldi	r27, 0x00	; 0
    423a:	e1 e2       	ldi	r30, 0x21	; 33
    423c:	f1 e2       	ldi	r31, 0x21	; 33
    423e:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__prologue_saves__+0x12>
    4242:	9b 01       	movw	r18, r22
    4244:	ac 01       	movw	r20, r24
    4246:	83 e0       	ldi	r24, 0x03	; 3
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	da 01       	movw	r26, r20
    424c:	c9 01       	movw	r24, r18
    424e:	88 27       	eor	r24, r24
    4250:	b7 fd       	sbrc	r27, 7
    4252:	83 95       	inc	r24
    4254:	99 27       	eor	r25, r25
    4256:	aa 27       	eor	r26, r26
    4258:	bb 27       	eor	r27, r27
    425a:	b8 2e       	mov	r11, r24
    425c:	21 15       	cp	r18, r1
    425e:	31 05       	cpc	r19, r1
    4260:	41 05       	cpc	r20, r1
    4262:	51 05       	cpc	r21, r1
    4264:	19 f4       	brne	.+6      	; 0x426c <__floatsisf+0x36>
    4266:	82 e0       	ldi	r24, 0x02	; 2
    4268:	89 83       	std	Y+1, r24	; 0x01
    426a:	3a c0       	rjmp	.+116    	; 0x42e0 <__floatsisf+0xaa>
    426c:	88 23       	and	r24, r24
    426e:	a9 f0       	breq	.+42     	; 0x429a <__floatsisf+0x64>
    4270:	20 30       	cpi	r18, 0x00	; 0
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	38 07       	cpc	r19, r24
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	48 07       	cpc	r20, r24
    427a:	80 e8       	ldi	r24, 0x80	; 128
    427c:	58 07       	cpc	r21, r24
    427e:	29 f4       	brne	.+10     	; 0x428a <__floatsisf+0x54>
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	9f ec       	ldi	r25, 0xCF	; 207
    4288:	30 c0       	rjmp	.+96     	; 0x42ea <__floatsisf+0xb4>
    428a:	ee 24       	eor	r14, r14
    428c:	ff 24       	eor	r15, r15
    428e:	87 01       	movw	r16, r14
    4290:	e2 1a       	sub	r14, r18
    4292:	f3 0a       	sbc	r15, r19
    4294:	04 0b       	sbc	r16, r20
    4296:	15 0b       	sbc	r17, r21
    4298:	02 c0       	rjmp	.+4      	; 0x429e <__floatsisf+0x68>
    429a:	79 01       	movw	r14, r18
    429c:	8a 01       	movw	r16, r20
    429e:	8e e1       	ldi	r24, 0x1E	; 30
    42a0:	c8 2e       	mov	r12, r24
    42a2:	d1 2c       	mov	r13, r1
    42a4:	dc 82       	std	Y+4, r13	; 0x04
    42a6:	cb 82       	std	Y+3, r12	; 0x03
    42a8:	ed 82       	std	Y+5, r14	; 0x05
    42aa:	fe 82       	std	Y+6, r15	; 0x06
    42ac:	0f 83       	std	Y+7, r16	; 0x07
    42ae:	18 87       	std	Y+8, r17	; 0x08
    42b0:	c8 01       	movw	r24, r16
    42b2:	b7 01       	movw	r22, r14
    42b4:	0e 94 cc 21 	call	0x4398	; 0x4398 <__clzsi2>
    42b8:	01 97       	sbiw	r24, 0x01	; 1
    42ba:	18 16       	cp	r1, r24
    42bc:	19 06       	cpc	r1, r25
    42be:	84 f4       	brge	.+32     	; 0x42e0 <__floatsisf+0xaa>
    42c0:	08 2e       	mov	r0, r24
    42c2:	04 c0       	rjmp	.+8      	; 0x42cc <__floatsisf+0x96>
    42c4:	ee 0c       	add	r14, r14
    42c6:	ff 1c       	adc	r15, r15
    42c8:	00 1f       	adc	r16, r16
    42ca:	11 1f       	adc	r17, r17
    42cc:	0a 94       	dec	r0
    42ce:	d2 f7       	brpl	.-12     	; 0x42c4 <__floatsisf+0x8e>
    42d0:	ed 82       	std	Y+5, r14	; 0x05
    42d2:	fe 82       	std	Y+6, r15	; 0x06
    42d4:	0f 83       	std	Y+7, r16	; 0x07
    42d6:	18 87       	std	Y+8, r17	; 0x08
    42d8:	c8 1a       	sub	r12, r24
    42da:	d9 0a       	sbc	r13, r25
    42dc:	dc 82       	std	Y+4, r13	; 0x04
    42de:	cb 82       	std	Y+3, r12	; 0x03
    42e0:	ba 82       	std	Y+2, r11	; 0x02
    42e2:	ce 01       	movw	r24, r28
    42e4:	01 96       	adiw	r24, 0x01	; 1
    42e6:	0e 94 19 22 	call	0x4432	; 0x4432 <__pack_f>
    42ea:	e9 e0       	ldi	r30, 0x09	; 9
    42ec:	28 96       	adiw	r28, 0x08	; 8
    42ee:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__epilogue_restores__+0x12>

000042f2 <__fixsfsi>:
    42f2:	ac e0       	ldi	r26, 0x0C	; 12
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
    42f6:	ef e7       	ldi	r30, 0x7F	; 127
    42f8:	f1 e2       	ldi	r31, 0x21	; 33
    42fa:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x20>
    42fe:	69 83       	std	Y+1, r22	; 0x01
    4300:	7a 83       	std	Y+2, r23	; 0x02
    4302:	8b 83       	std	Y+3, r24	; 0x03
    4304:	9c 83       	std	Y+4, r25	; 0x04
    4306:	be 01       	movw	r22, r28
    4308:	6b 5f       	subi	r22, 0xFB	; 251
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	ce 01       	movw	r24, r28
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__unpack_f>
    4314:	8d 81       	ldd	r24, Y+5	; 0x05
    4316:	82 30       	cpi	r24, 0x02	; 2
    4318:	a9 f1       	breq	.+106    	; 0x4384 <__fixsfsi+0x92>
    431a:	82 30       	cpi	r24, 0x02	; 2
    431c:	98 f1       	brcs	.+102    	; 0x4384 <__fixsfsi+0x92>
    431e:	84 30       	cpi	r24, 0x04	; 4
    4320:	21 f4       	brne	.+8      	; 0x432a <__fixsfsi+0x38>
    4322:	8e 81       	ldd	r24, Y+6	; 0x06
    4324:	88 23       	and	r24, r24
    4326:	59 f4       	brne	.+22     	; 0x433e <__fixsfsi+0x4c>
    4328:	0f c0       	rjmp	.+30     	; 0x4348 <__fixsfsi+0x56>
    432a:	2f 81       	ldd	r18, Y+7	; 0x07
    432c:	38 85       	ldd	r19, Y+8	; 0x08
    432e:	37 fd       	sbrc	r19, 7
    4330:	29 c0       	rjmp	.+82     	; 0x4384 <__fixsfsi+0x92>
    4332:	6e 81       	ldd	r22, Y+6	; 0x06
    4334:	2f 31       	cpi	r18, 0x1F	; 31
    4336:	31 05       	cpc	r19, r1
    4338:	64 f0       	brlt	.+24     	; 0x4352 <__fixsfsi+0x60>
    433a:	66 23       	and	r22, r22
    433c:	29 f0       	breq	.+10     	; 0x4348 <__fixsfsi+0x56>
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	50 e8       	ldi	r21, 0x80	; 128
    4346:	22 c0       	rjmp	.+68     	; 0x438c <__fixsfsi+0x9a>
    4348:	2f ef       	ldi	r18, 0xFF	; 255
    434a:	3f ef       	ldi	r19, 0xFF	; 255
    434c:	4f ef       	ldi	r20, 0xFF	; 255
    434e:	5f e7       	ldi	r21, 0x7F	; 127
    4350:	1d c0       	rjmp	.+58     	; 0x438c <__fixsfsi+0x9a>
    4352:	8e e1       	ldi	r24, 0x1E	; 30
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	82 1b       	sub	r24, r18
    4358:	93 0b       	sbc	r25, r19
    435a:	29 85       	ldd	r18, Y+9	; 0x09
    435c:	3a 85       	ldd	r19, Y+10	; 0x0a
    435e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4360:	5c 85       	ldd	r21, Y+12	; 0x0c
    4362:	04 c0       	rjmp	.+8      	; 0x436c <__fixsfsi+0x7a>
    4364:	56 95       	lsr	r21
    4366:	47 95       	ror	r20
    4368:	37 95       	ror	r19
    436a:	27 95       	ror	r18
    436c:	8a 95       	dec	r24
    436e:	d2 f7       	brpl	.-12     	; 0x4364 <__fixsfsi+0x72>
    4370:	66 23       	and	r22, r22
    4372:	61 f0       	breq	.+24     	; 0x438c <__fixsfsi+0x9a>
    4374:	50 95       	com	r21
    4376:	40 95       	com	r20
    4378:	30 95       	com	r19
    437a:	21 95       	neg	r18
    437c:	3f 4f       	sbci	r19, 0xFF	; 255
    437e:	4f 4f       	sbci	r20, 0xFF	; 255
    4380:	5f 4f       	sbci	r21, 0xFF	; 255
    4382:	04 c0       	rjmp	.+8      	; 0x438c <__fixsfsi+0x9a>
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	ca 01       	movw	r24, r20
    438e:	b9 01       	movw	r22, r18
    4390:	e2 e0       	ldi	r30, 0x02	; 2
    4392:	2c 96       	adiw	r28, 0x0c	; 12
    4394:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x20>

00004398 <__clzsi2>:
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
    43a0:	9b 01       	movw	r18, r22
    43a2:	ac 01       	movw	r20, r24
    43a4:	20 30       	cpi	r18, 0x00	; 0
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	38 07       	cpc	r19, r24
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	48 07       	cpc	r20, r24
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	58 07       	cpc	r21, r24
    43b2:	80 f4       	brcc	.+32     	; 0x43d4 <__clzsi2+0x3c>
    43b4:	2f 3f       	cpi	r18, 0xFF	; 255
    43b6:	31 05       	cpc	r19, r1
    43b8:	41 05       	cpc	r20, r1
    43ba:	51 05       	cpc	r21, r1
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <__clzsi2+0x28>
    43be:	20 f4       	brcc	.+8      	; 0x43c8 <__clzsi2+0x30>
    43c0:	ee 24       	eor	r14, r14
    43c2:	ff 24       	eor	r15, r15
    43c4:	87 01       	movw	r16, r14
    43c6:	19 c0       	rjmp	.+50     	; 0x43fa <__clzsi2+0x62>
    43c8:	68 e0       	ldi	r22, 0x08	; 8
    43ca:	e6 2e       	mov	r14, r22
    43cc:	f1 2c       	mov	r15, r1
    43ce:	01 2d       	mov	r16, r1
    43d0:	11 2d       	mov	r17, r1
    43d2:	13 c0       	rjmp	.+38     	; 0x43fa <__clzsi2+0x62>
    43d4:	20 30       	cpi	r18, 0x00	; 0
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	38 07       	cpc	r19, r24
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	48 07       	cpc	r20, r24
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	58 07       	cpc	r21, r24
    43e2:	30 f4       	brcc	.+12     	; 0x43f0 <__clzsi2+0x58>
    43e4:	90 e1       	ldi	r25, 0x10	; 16
    43e6:	e9 2e       	mov	r14, r25
    43e8:	f1 2c       	mov	r15, r1
    43ea:	01 2d       	mov	r16, r1
    43ec:	11 2d       	mov	r17, r1
    43ee:	05 c0       	rjmp	.+10     	; 0x43fa <__clzsi2+0x62>
    43f0:	88 e1       	ldi	r24, 0x18	; 24
    43f2:	e8 2e       	mov	r14, r24
    43f4:	f1 2c       	mov	r15, r1
    43f6:	01 2d       	mov	r16, r1
    43f8:	11 2d       	mov	r17, r1
    43fa:	80 e2       	ldi	r24, 0x20	; 32
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	a0 e0       	ldi	r26, 0x00	; 0
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	8e 19       	sub	r24, r14
    4404:	9f 09       	sbc	r25, r15
    4406:	a0 0b       	sbc	r26, r16
    4408:	b1 0b       	sbc	r27, r17
    440a:	04 c0       	rjmp	.+8      	; 0x4414 <__clzsi2+0x7c>
    440c:	56 95       	lsr	r21
    440e:	47 95       	ror	r20
    4410:	37 95       	ror	r19
    4412:	27 95       	ror	r18
    4414:	ea 94       	dec	r14
    4416:	d2 f7       	brpl	.-12     	; 0x440c <__clzsi2+0x74>
    4418:	f9 01       	movw	r30, r18
    441a:	e1 5e       	subi	r30, 0xE1	; 225
    441c:	fd 4f       	sbci	r31, 0xFD	; 253
    441e:	20 81       	ld	r18, Z
    4420:	82 1b       	sub	r24, r18
    4422:	91 09       	sbc	r25, r1
    4424:	a1 09       	sbc	r26, r1
    4426:	b1 09       	sbc	r27, r1
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	ff 90       	pop	r15
    442e:	ef 90       	pop	r14
    4430:	08 95       	ret

00004432 <__pack_f>:
    4432:	9f 92       	push	r9
    4434:	af 92       	push	r10
    4436:	bf 92       	push	r11
    4438:	cf 92       	push	r12
    443a:	df 92       	push	r13
    443c:	ef 92       	push	r14
    443e:	ff 92       	push	r15
    4440:	0f 93       	push	r16
    4442:	1f 93       	push	r17
    4444:	ee 24       	eor	r14, r14
    4446:	ff 24       	eor	r15, r15
    4448:	87 01       	movw	r16, r14
    444a:	fc 01       	movw	r30, r24
    444c:	24 81       	ldd	r18, Z+4	; 0x04
    444e:	35 81       	ldd	r19, Z+5	; 0x05
    4450:	46 81       	ldd	r20, Z+6	; 0x06
    4452:	57 81       	ldd	r21, Z+7	; 0x07
    4454:	91 80       	ldd	r9, Z+1	; 0x01
    4456:	80 81       	ld	r24, Z
    4458:	82 30       	cpi	r24, 0x02	; 2
    445a:	10 f4       	brcc	.+4      	; 0x4460 <__pack_f+0x2e>
    445c:	40 61       	ori	r20, 0x10	; 16
    445e:	a2 c0       	rjmp	.+324    	; 0x45a4 <__pack_f+0x172>
    4460:	84 30       	cpi	r24, 0x04	; 4
    4462:	09 f4       	brne	.+2      	; 0x4466 <__pack_f+0x34>
    4464:	9b c0       	rjmp	.+310    	; 0x459c <__pack_f+0x16a>
    4466:	82 30       	cpi	r24, 0x02	; 2
    4468:	29 f4       	brne	.+10     	; 0x4474 <__pack_f+0x42>
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e0       	ldi	r20, 0x00	; 0
    4470:	50 e0       	ldi	r21, 0x00	; 0
    4472:	05 c0       	rjmp	.+10     	; 0x447e <__pack_f+0x4c>
    4474:	21 15       	cp	r18, r1
    4476:	31 05       	cpc	r19, r1
    4478:	41 05       	cpc	r20, r1
    447a:	51 05       	cpc	r21, r1
    447c:	19 f4       	brne	.+6      	; 0x4484 <__pack_f+0x52>
    447e:	e0 e0       	ldi	r30, 0x00	; 0
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	92 c0       	rjmp	.+292    	; 0x45a8 <__pack_f+0x176>
    4484:	82 81       	ldd	r24, Z+2	; 0x02
    4486:	93 81       	ldd	r25, Z+3	; 0x03
    4488:	6f ef       	ldi	r22, 0xFF	; 255
    448a:	82 38       	cpi	r24, 0x82	; 130
    448c:	96 07       	cpc	r25, r22
    448e:	0c f0       	brlt	.+2      	; 0x4492 <__pack_f+0x60>
    4490:	5a c0       	rjmp	.+180    	; 0x4546 <__pack_f+0x114>
    4492:	62 e8       	ldi	r22, 0x82	; 130
    4494:	7f ef       	ldi	r23, 0xFF	; 255
    4496:	68 1b       	sub	r22, r24
    4498:	79 0b       	sbc	r23, r25
    449a:	6a 31       	cpi	r22, 0x1A	; 26
    449c:	71 05       	cpc	r23, r1
    449e:	2c f0       	brlt	.+10     	; 0x44aa <__pack_f+0x78>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	50 e0       	ldi	r21, 0x00	; 0
    44a8:	2a c0       	rjmp	.+84     	; 0x44fe <__pack_f+0xcc>
    44aa:	aa 24       	eor	r10, r10
    44ac:	bb 24       	eor	r11, r11
    44ae:	65 01       	movw	r12, r10
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	a0 e0       	ldi	r26, 0x00	; 0
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	06 2e       	mov	r0, r22
    44ba:	04 c0       	rjmp	.+8      	; 0x44c4 <__pack_f+0x92>
    44bc:	88 0f       	add	r24, r24
    44be:	99 1f       	adc	r25, r25
    44c0:	aa 1f       	adc	r26, r26
    44c2:	bb 1f       	adc	r27, r27
    44c4:	0a 94       	dec	r0
    44c6:	d2 f7       	brpl	.-12     	; 0x44bc <__pack_f+0x8a>
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	a1 09       	sbc	r26, r1
    44cc:	b1 09       	sbc	r27, r1
    44ce:	82 23       	and	r24, r18
    44d0:	93 23       	and	r25, r19
    44d2:	a4 23       	and	r26, r20
    44d4:	b5 23       	and	r27, r21
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	a1 05       	cpc	r26, r1
    44da:	b1 05       	cpc	r27, r1
    44dc:	29 f0       	breq	.+10     	; 0x44e8 <__pack_f+0xb6>
    44de:	71 e0       	ldi	r23, 0x01	; 1
    44e0:	a7 2e       	mov	r10, r23
    44e2:	b1 2c       	mov	r11, r1
    44e4:	c1 2c       	mov	r12, r1
    44e6:	d1 2c       	mov	r13, r1
    44e8:	04 c0       	rjmp	.+8      	; 0x44f2 <__pack_f+0xc0>
    44ea:	56 95       	lsr	r21
    44ec:	47 95       	ror	r20
    44ee:	37 95       	ror	r19
    44f0:	27 95       	ror	r18
    44f2:	6a 95       	dec	r22
    44f4:	d2 f7       	brpl	.-12     	; 0x44ea <__pack_f+0xb8>
    44f6:	2a 29       	or	r18, r10
    44f8:	3b 29       	or	r19, r11
    44fa:	4c 29       	or	r20, r12
    44fc:	5d 29       	or	r21, r13
    44fe:	da 01       	movw	r26, r20
    4500:	c9 01       	movw	r24, r18
    4502:	8f 77       	andi	r24, 0x7F	; 127
    4504:	90 70       	andi	r25, 0x00	; 0
    4506:	a0 70       	andi	r26, 0x00	; 0
    4508:	b0 70       	andi	r27, 0x00	; 0
    450a:	80 34       	cpi	r24, 0x40	; 64
    450c:	91 05       	cpc	r25, r1
    450e:	a1 05       	cpc	r26, r1
    4510:	b1 05       	cpc	r27, r1
    4512:	39 f4       	brne	.+14     	; 0x4522 <__pack_f+0xf0>
    4514:	27 ff       	sbrs	r18, 7
    4516:	09 c0       	rjmp	.+18     	; 0x452a <__pack_f+0xf8>
    4518:	20 5c       	subi	r18, 0xC0	; 192
    451a:	3f 4f       	sbci	r19, 0xFF	; 255
    451c:	4f 4f       	sbci	r20, 0xFF	; 255
    451e:	5f 4f       	sbci	r21, 0xFF	; 255
    4520:	04 c0       	rjmp	.+8      	; 0x452a <__pack_f+0xf8>
    4522:	21 5c       	subi	r18, 0xC1	; 193
    4524:	3f 4f       	sbci	r19, 0xFF	; 255
    4526:	4f 4f       	sbci	r20, 0xFF	; 255
    4528:	5f 4f       	sbci	r21, 0xFF	; 255
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	20 30       	cpi	r18, 0x00	; 0
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	36 07       	cpc	r19, r22
    4534:	60 e0       	ldi	r22, 0x00	; 0
    4536:	46 07       	cpc	r20, r22
    4538:	60 e4       	ldi	r22, 0x40	; 64
    453a:	56 07       	cpc	r21, r22
    453c:	10 f0       	brcs	.+4      	; 0x4542 <__pack_f+0x110>
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	fc 01       	movw	r30, r24
    4544:	23 c0       	rjmp	.+70     	; 0x458c <__pack_f+0x15a>
    4546:	80 38       	cpi	r24, 0x80	; 128
    4548:	91 05       	cpc	r25, r1
    454a:	44 f5       	brge	.+80     	; 0x459c <__pack_f+0x16a>
    454c:	fc 01       	movw	r30, r24
    454e:	e1 58       	subi	r30, 0x81	; 129
    4550:	ff 4f       	sbci	r31, 0xFF	; 255
    4552:	da 01       	movw	r26, r20
    4554:	c9 01       	movw	r24, r18
    4556:	8f 77       	andi	r24, 0x7F	; 127
    4558:	90 70       	andi	r25, 0x00	; 0
    455a:	a0 70       	andi	r26, 0x00	; 0
    455c:	b0 70       	andi	r27, 0x00	; 0
    455e:	80 34       	cpi	r24, 0x40	; 64
    4560:	91 05       	cpc	r25, r1
    4562:	a1 05       	cpc	r26, r1
    4564:	b1 05       	cpc	r27, r1
    4566:	39 f4       	brne	.+14     	; 0x4576 <__pack_f+0x144>
    4568:	27 ff       	sbrs	r18, 7
    456a:	09 c0       	rjmp	.+18     	; 0x457e <__pack_f+0x14c>
    456c:	20 5c       	subi	r18, 0xC0	; 192
    456e:	3f 4f       	sbci	r19, 0xFF	; 255
    4570:	4f 4f       	sbci	r20, 0xFF	; 255
    4572:	5f 4f       	sbci	r21, 0xFF	; 255
    4574:	04 c0       	rjmp	.+8      	; 0x457e <__pack_f+0x14c>
    4576:	21 5c       	subi	r18, 0xC1	; 193
    4578:	3f 4f       	sbci	r19, 0xFF	; 255
    457a:	4f 4f       	sbci	r20, 0xFF	; 255
    457c:	5f 4f       	sbci	r21, 0xFF	; 255
    457e:	57 ff       	sbrs	r21, 7
    4580:	05 c0       	rjmp	.+10     	; 0x458c <__pack_f+0x15a>
    4582:	56 95       	lsr	r21
    4584:	47 95       	ror	r20
    4586:	37 95       	ror	r19
    4588:	27 95       	ror	r18
    458a:	31 96       	adiw	r30, 0x01	; 1
    458c:	87 e0       	ldi	r24, 0x07	; 7
    458e:	56 95       	lsr	r21
    4590:	47 95       	ror	r20
    4592:	37 95       	ror	r19
    4594:	27 95       	ror	r18
    4596:	8a 95       	dec	r24
    4598:	d1 f7       	brne	.-12     	; 0x458e <__pack_f+0x15c>
    459a:	06 c0       	rjmp	.+12     	; 0x45a8 <__pack_f+0x176>
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	ef ef       	ldi	r30, 0xFF	; 255
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	e2 2e       	mov	r14, r18
    45aa:	f3 2e       	mov	r15, r19
    45ac:	94 2f       	mov	r25, r20
    45ae:	9f 77       	andi	r25, 0x7F	; 127
    45b0:	80 2f       	mov	r24, r16
    45b2:	80 78       	andi	r24, 0x80	; 128
    45b4:	89 2b       	or	r24, r25
    45b6:	9e 2f       	mov	r25, r30
    45b8:	97 95       	ror	r25
    45ba:	99 27       	eor	r25, r25
    45bc:	97 95       	ror	r25
    45be:	8f 77       	andi	r24, 0x7F	; 127
    45c0:	08 2f       	mov	r16, r24
    45c2:	09 2b       	or	r16, r25
    45c4:	9e 2f       	mov	r25, r30
    45c6:	96 95       	lsr	r25
    45c8:	81 2f       	mov	r24, r17
    45ca:	80 78       	andi	r24, 0x80	; 128
    45cc:	89 2b       	or	r24, r25
    45ce:	97 94       	ror	r9
    45d0:	99 24       	eor	r9, r9
    45d2:	97 94       	ror	r9
    45d4:	8f 77       	andi	r24, 0x7F	; 127
    45d6:	18 2f       	mov	r17, r24
    45d8:	19 29       	or	r17, r9
    45da:	c8 01       	movw	r24, r16
    45dc:	b7 01       	movw	r22, r14
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	ff 90       	pop	r15
    45e4:	ef 90       	pop	r14
    45e6:	df 90       	pop	r13
    45e8:	cf 90       	pop	r12
    45ea:	bf 90       	pop	r11
    45ec:	af 90       	pop	r10
    45ee:	9f 90       	pop	r9
    45f0:	08 95       	ret

000045f2 <__unpack_f>:
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	fc 01       	movw	r30, r24
    45f8:	db 01       	movw	r26, r22
    45fa:	20 81       	ld	r18, Z
    45fc:	31 81       	ldd	r19, Z+1	; 0x01
    45fe:	92 81       	ldd	r25, Z+2	; 0x02
    4600:	49 2f       	mov	r20, r25
    4602:	4f 77       	andi	r20, 0x7F	; 127
    4604:	50 e0       	ldi	r21, 0x00	; 0
    4606:	99 1f       	adc	r25, r25
    4608:	99 27       	eor	r25, r25
    460a:	99 1f       	adc	r25, r25
    460c:	83 81       	ldd	r24, Z+3	; 0x03
    460e:	e8 2f       	mov	r30, r24
    4610:	ee 0f       	add	r30, r30
    4612:	e9 2b       	or	r30, r25
    4614:	6e 2f       	mov	r22, r30
    4616:	70 e0       	ldi	r23, 0x00	; 0
    4618:	88 1f       	adc	r24, r24
    461a:	88 27       	eor	r24, r24
    461c:	88 1f       	adc	r24, r24
    461e:	ed 01       	movw	r28, r26
    4620:	89 83       	std	Y+1, r24	; 0x01
    4622:	ee 23       	and	r30, r30
    4624:	71 f5       	brne	.+92     	; 0x4682 <__unpack_f+0x90>
    4626:	21 15       	cp	r18, r1
    4628:	31 05       	cpc	r19, r1
    462a:	41 05       	cpc	r20, r1
    462c:	51 05       	cpc	r21, r1
    462e:	11 f4       	brne	.+4      	; 0x4634 <__unpack_f+0x42>
    4630:	82 e0       	ldi	r24, 0x02	; 2
    4632:	2f c0       	rjmp	.+94     	; 0x4692 <__unpack_f+0xa0>
    4634:	6e 57       	subi	r22, 0x7E	; 126
    4636:	70 40       	sbci	r23, 0x00	; 0
    4638:	fd 01       	movw	r30, r26
    463a:	73 83       	std	Z+3, r23	; 0x03
    463c:	62 83       	std	Z+2, r22	; 0x02
    463e:	67 e0       	ldi	r22, 0x07	; 7
    4640:	22 0f       	add	r18, r18
    4642:	33 1f       	adc	r19, r19
    4644:	44 1f       	adc	r20, r20
    4646:	55 1f       	adc	r21, r21
    4648:	6a 95       	dec	r22
    464a:	d1 f7       	brne	.-12     	; 0x4640 <__unpack_f+0x4e>
    464c:	83 e0       	ldi	r24, 0x03	; 3
    464e:	8c 93       	st	X, r24
    4650:	0a c0       	rjmp	.+20     	; 0x4666 <__unpack_f+0x74>
    4652:	22 0f       	add	r18, r18
    4654:	33 1f       	adc	r19, r19
    4656:	44 1f       	adc	r20, r20
    4658:	55 1f       	adc	r21, r21
    465a:	ed 01       	movw	r28, r26
    465c:	8a 81       	ldd	r24, Y+2	; 0x02
    465e:	9b 81       	ldd	r25, Y+3	; 0x03
    4660:	01 97       	sbiw	r24, 0x01	; 1
    4662:	9b 83       	std	Y+3, r25	; 0x03
    4664:	8a 83       	std	Y+2, r24	; 0x02
    4666:	20 30       	cpi	r18, 0x00	; 0
    4668:	e0 e0       	ldi	r30, 0x00	; 0
    466a:	3e 07       	cpc	r19, r30
    466c:	e0 e0       	ldi	r30, 0x00	; 0
    466e:	4e 07       	cpc	r20, r30
    4670:	e0 e4       	ldi	r30, 0x40	; 64
    4672:	5e 07       	cpc	r21, r30
    4674:	70 f3       	brcs	.-36     	; 0x4652 <__unpack_f+0x60>
    4676:	ed 01       	movw	r28, r26
    4678:	2c 83       	std	Y+4, r18	; 0x04
    467a:	3d 83       	std	Y+5, r19	; 0x05
    467c:	4e 83       	std	Y+6, r20	; 0x06
    467e:	5f 83       	std	Y+7, r21	; 0x07
    4680:	25 c0       	rjmp	.+74     	; 0x46cc <__unpack_f+0xda>
    4682:	ef 3f       	cpi	r30, 0xFF	; 255
    4684:	79 f4       	brne	.+30     	; 0x46a4 <__unpack_f+0xb2>
    4686:	21 15       	cp	r18, r1
    4688:	31 05       	cpc	r19, r1
    468a:	41 05       	cpc	r20, r1
    468c:	51 05       	cpc	r21, r1
    468e:	19 f4       	brne	.+6      	; 0x4696 <__unpack_f+0xa4>
    4690:	84 e0       	ldi	r24, 0x04	; 4
    4692:	8c 93       	st	X, r24
    4694:	1b c0       	rjmp	.+54     	; 0x46cc <__unpack_f+0xda>
    4696:	44 ff       	sbrs	r20, 4
    4698:	03 c0       	rjmp	.+6      	; 0x46a0 <__unpack_f+0xae>
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	8c 93       	st	X, r24
    469e:	11 c0       	rjmp	.+34     	; 0x46c2 <__unpack_f+0xd0>
    46a0:	1c 92       	st	X, r1
    46a2:	0f c0       	rjmp	.+30     	; 0x46c2 <__unpack_f+0xd0>
    46a4:	6f 57       	subi	r22, 0x7F	; 127
    46a6:	70 40       	sbci	r23, 0x00	; 0
    46a8:	ed 01       	movw	r28, r26
    46aa:	7b 83       	std	Y+3, r23	; 0x03
    46ac:	6a 83       	std	Y+2, r22	; 0x02
    46ae:	83 e0       	ldi	r24, 0x03	; 3
    46b0:	8c 93       	st	X, r24
    46b2:	87 e0       	ldi	r24, 0x07	; 7
    46b4:	22 0f       	add	r18, r18
    46b6:	33 1f       	adc	r19, r19
    46b8:	44 1f       	adc	r20, r20
    46ba:	55 1f       	adc	r21, r21
    46bc:	8a 95       	dec	r24
    46be:	d1 f7       	brne	.-12     	; 0x46b4 <__unpack_f+0xc2>
    46c0:	50 64       	ori	r21, 0x40	; 64
    46c2:	fd 01       	movw	r30, r26
    46c4:	24 83       	std	Z+4, r18	; 0x04
    46c6:	35 83       	std	Z+5, r19	; 0x05
    46c8:	46 83       	std	Z+6, r20	; 0x06
    46ca:	57 83       	std	Z+7, r21	; 0x07
    46cc:	df 91       	pop	r29
    46ce:	cf 91       	pop	r28
    46d0:	08 95       	ret

000046d2 <__mulsi3>:
    46d2:	62 9f       	mul	r22, r18
    46d4:	d0 01       	movw	r26, r0
    46d6:	73 9f       	mul	r23, r19
    46d8:	f0 01       	movw	r30, r0
    46da:	82 9f       	mul	r24, r18
    46dc:	e0 0d       	add	r30, r0
    46de:	f1 1d       	adc	r31, r1
    46e0:	64 9f       	mul	r22, r20
    46e2:	e0 0d       	add	r30, r0
    46e4:	f1 1d       	adc	r31, r1
    46e6:	92 9f       	mul	r25, r18
    46e8:	f0 0d       	add	r31, r0
    46ea:	83 9f       	mul	r24, r19
    46ec:	f0 0d       	add	r31, r0
    46ee:	74 9f       	mul	r23, r20
    46f0:	f0 0d       	add	r31, r0
    46f2:	65 9f       	mul	r22, r21
    46f4:	f0 0d       	add	r31, r0
    46f6:	99 27       	eor	r25, r25
    46f8:	72 9f       	mul	r23, r18
    46fa:	b0 0d       	add	r27, r0
    46fc:	e1 1d       	adc	r30, r1
    46fe:	f9 1f       	adc	r31, r25
    4700:	63 9f       	mul	r22, r19
    4702:	b0 0d       	add	r27, r0
    4704:	e1 1d       	adc	r30, r1
    4706:	f9 1f       	adc	r31, r25
    4708:	bd 01       	movw	r22, r26
    470a:	cf 01       	movw	r24, r30
    470c:	11 24       	eor	r1, r1
    470e:	08 95       	ret

00004710 <__udivmodhi4>:
    4710:	aa 1b       	sub	r26, r26
    4712:	bb 1b       	sub	r27, r27
    4714:	51 e1       	ldi	r21, 0x11	; 17
    4716:	07 c0       	rjmp	.+14     	; 0x4726 <__udivmodhi4_ep>

00004718 <__udivmodhi4_loop>:
    4718:	aa 1f       	adc	r26, r26
    471a:	bb 1f       	adc	r27, r27
    471c:	a6 17       	cp	r26, r22
    471e:	b7 07       	cpc	r27, r23
    4720:	10 f0       	brcs	.+4      	; 0x4726 <__udivmodhi4_ep>
    4722:	a6 1b       	sub	r26, r22
    4724:	b7 0b       	sbc	r27, r23

00004726 <__udivmodhi4_ep>:
    4726:	88 1f       	adc	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	5a 95       	dec	r21
    472c:	a9 f7       	brne	.-22     	; 0x4718 <__udivmodhi4_loop>
    472e:	80 95       	com	r24
    4730:	90 95       	com	r25
    4732:	bc 01       	movw	r22, r24
    4734:	cd 01       	movw	r24, r26
    4736:	08 95       	ret

00004738 <__divmodhi4>:
    4738:	97 fb       	bst	r25, 7
    473a:	09 2e       	mov	r0, r25
    473c:	07 26       	eor	r0, r23
    473e:	0a d0       	rcall	.+20     	; 0x4754 <__divmodhi4_neg1>
    4740:	77 fd       	sbrc	r23, 7
    4742:	04 d0       	rcall	.+8      	; 0x474c <__divmodhi4_neg2>
    4744:	e5 df       	rcall	.-54     	; 0x4710 <__udivmodhi4>
    4746:	06 d0       	rcall	.+12     	; 0x4754 <__divmodhi4_neg1>
    4748:	00 20       	and	r0, r0
    474a:	1a f4       	brpl	.+6      	; 0x4752 <__divmodhi4_exit>

0000474c <__divmodhi4_neg2>:
    474c:	70 95       	com	r23
    474e:	61 95       	neg	r22
    4750:	7f 4f       	sbci	r23, 0xFF	; 255

00004752 <__divmodhi4_exit>:
    4752:	08 95       	ret

00004754 <__divmodhi4_neg1>:
    4754:	f6 f7       	brtc	.-4      	; 0x4752 <__divmodhi4_exit>
    4756:	90 95       	com	r25
    4758:	81 95       	neg	r24
    475a:	9f 4f       	sbci	r25, 0xFF	; 255
    475c:	08 95       	ret

0000475e <__prologue_saves__>:
    475e:	2f 92       	push	r2
    4760:	3f 92       	push	r3
    4762:	4f 92       	push	r4
    4764:	5f 92       	push	r5
    4766:	6f 92       	push	r6
    4768:	7f 92       	push	r7
    476a:	8f 92       	push	r8
    476c:	9f 92       	push	r9
    476e:	af 92       	push	r10
    4770:	bf 92       	push	r11
    4772:	cf 92       	push	r12
    4774:	df 92       	push	r13
    4776:	ef 92       	push	r14
    4778:	ff 92       	push	r15
    477a:	0f 93       	push	r16
    477c:	1f 93       	push	r17
    477e:	cf 93       	push	r28
    4780:	df 93       	push	r29
    4782:	cd b7       	in	r28, 0x3d	; 61
    4784:	de b7       	in	r29, 0x3e	; 62
    4786:	ca 1b       	sub	r28, r26
    4788:	db 0b       	sbc	r29, r27
    478a:	0f b6       	in	r0, 0x3f	; 63
    478c:	f8 94       	cli
    478e:	de bf       	out	0x3e, r29	; 62
    4790:	0f be       	out	0x3f, r0	; 63
    4792:	cd bf       	out	0x3d, r28	; 61
    4794:	19 94       	eijmp

00004796 <__epilogue_restores__>:
    4796:	2a 88       	ldd	r2, Y+18	; 0x12
    4798:	39 88       	ldd	r3, Y+17	; 0x11
    479a:	48 88       	ldd	r4, Y+16	; 0x10
    479c:	5f 84       	ldd	r5, Y+15	; 0x0f
    479e:	6e 84       	ldd	r6, Y+14	; 0x0e
    47a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    47a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    47a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    47a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    47a8:	b9 84       	ldd	r11, Y+9	; 0x09
    47aa:	c8 84       	ldd	r12, Y+8	; 0x08
    47ac:	df 80       	ldd	r13, Y+7	; 0x07
    47ae:	ee 80       	ldd	r14, Y+6	; 0x06
    47b0:	fd 80       	ldd	r15, Y+5	; 0x05
    47b2:	0c 81       	ldd	r16, Y+4	; 0x04
    47b4:	1b 81       	ldd	r17, Y+3	; 0x03
    47b6:	aa 81       	ldd	r26, Y+2	; 0x02
    47b8:	b9 81       	ldd	r27, Y+1	; 0x01
    47ba:	ce 0f       	add	r28, r30
    47bc:	d1 1d       	adc	r29, r1
    47be:	0f b6       	in	r0, 0x3f	; 63
    47c0:	f8 94       	cli
    47c2:	de bf       	out	0x3e, r29	; 62
    47c4:	0f be       	out	0x3f, r0	; 63
    47c6:	cd bf       	out	0x3d, r28	; 61
    47c8:	ed 01       	movw	r28, r26
    47ca:	08 95       	ret
    47cc:	f5 d0       	rcall	.+490    	; 0x49b8 <__fp_pscA>
    47ce:	58 f0       	brcs	.+22     	; 0x47e6 <__epilogue_restores__+0x50>
    47d0:	80 e8       	ldi	r24, 0x80	; 128
    47d2:	91 e0       	ldi	r25, 0x01	; 1
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <__epilogue_restores__+0x42>
    47d6:	9e ef       	ldi	r25, 0xFE	; 254
    47d8:	f6 d0       	rcall	.+492    	; 0x49c6 <__fp_pscB>
    47da:	28 f0       	brcs	.+10     	; 0x47e6 <__epilogue_restores__+0x50>
    47dc:	40 e8       	ldi	r20, 0x80	; 128
    47de:	51 e0       	ldi	r21, 0x01	; 1
    47e0:	59 f4       	brne	.+22     	; 0x47f8 <atan2+0xe>
    47e2:	5e ef       	ldi	r21, 0xFE	; 254
    47e4:	09 c0       	rjmp	.+18     	; 0x47f8 <atan2+0xe>
    47e6:	c0 c0       	rjmp	.+384    	; 0x4968 <__fp_nan>
    47e8:	28 c1       	rjmp	.+592    	; 0x4a3a <__fp_zero>

000047ea <atan2>:
    47ea:	e9 2f       	mov	r30, r25
    47ec:	e0 78       	andi	r30, 0x80	; 128
    47ee:	03 d1       	rcall	.+518    	; 0x49f6 <__fp_split3>
    47f0:	68 f3       	brcs	.-38     	; 0x47cc <__epilogue_restores__+0x36>
    47f2:	09 2e       	mov	r0, r25
    47f4:	05 2a       	or	r0, r21
    47f6:	c1 f3       	breq	.-16     	; 0x47e8 <__epilogue_restores__+0x52>
    47f8:	26 17       	cp	r18, r22
    47fa:	37 07       	cpc	r19, r23
    47fc:	48 07       	cpc	r20, r24
    47fe:	59 07       	cpc	r21, r25
    4800:	38 f0       	brcs	.+14     	; 0x4810 <atan2+0x26>
    4802:	0e 2e       	mov	r0, r30
    4804:	07 f8       	bld	r0, 7
    4806:	e0 25       	eor	r30, r0
    4808:	69 f0       	breq	.+26     	; 0x4824 <atan2+0x3a>
    480a:	e0 25       	eor	r30, r0
    480c:	e0 64       	ori	r30, 0x40	; 64
    480e:	0a c0       	rjmp	.+20     	; 0x4824 <atan2+0x3a>
    4810:	ef 63       	ori	r30, 0x3F	; 63
    4812:	07 f8       	bld	r0, 7
    4814:	00 94       	com	r0
    4816:	07 fa       	bst	r0, 7
    4818:	db 01       	movw	r26, r22
    481a:	b9 01       	movw	r22, r18
    481c:	9d 01       	movw	r18, r26
    481e:	dc 01       	movw	r26, r24
    4820:	ca 01       	movw	r24, r20
    4822:	ad 01       	movw	r20, r26
    4824:	ef 93       	push	r30
    4826:	41 d0       	rcall	.+130    	; 0x48aa <__divsf3_pse>
    4828:	d5 d0       	rcall	.+426    	; 0x49d4 <__fp_round>
    482a:	0a d0       	rcall	.+20     	; 0x4840 <atan>
    482c:	5f 91       	pop	r21
    482e:	55 23       	and	r21, r21
    4830:	31 f0       	breq	.+12     	; 0x483e <atan2+0x54>
    4832:	2b ed       	ldi	r18, 0xDB	; 219
    4834:	3f e0       	ldi	r19, 0x0F	; 15
    4836:	49 e4       	ldi	r20, 0x49	; 73
    4838:	50 fd       	sbrc	r21, 0
    483a:	49 ec       	ldi	r20, 0xC9	; 201
    483c:	71 c1       	rjmp	.+738    	; 0x4b20 <__addsf3>
    483e:	08 95       	ret

00004840 <atan>:
    4840:	df 93       	push	r29
    4842:	dd 27       	eor	r29, r29
    4844:	b9 2f       	mov	r27, r25
    4846:	bf 77       	andi	r27, 0x7F	; 127
    4848:	40 e8       	ldi	r20, 0x80	; 128
    484a:	5f e3       	ldi	r21, 0x3F	; 63
    484c:	16 16       	cp	r1, r22
    484e:	17 06       	cpc	r1, r23
    4850:	48 07       	cpc	r20, r24
    4852:	5b 07       	cpc	r21, r27
    4854:	10 f4       	brcc	.+4      	; 0x485a <atan+0x1a>
    4856:	d9 2f       	mov	r29, r25
    4858:	f7 d0       	rcall	.+494    	; 0x4a48 <inverse>
    485a:	9f 93       	push	r25
    485c:	8f 93       	push	r24
    485e:	7f 93       	push	r23
    4860:	6f 93       	push	r22
    4862:	5a d1       	rcall	.+692    	; 0x4b18 <square>
    4864:	ee e4       	ldi	r30, 0x4E	; 78
    4866:	f1 e0       	ldi	r31, 0x01	; 1
    4868:	82 d0       	rcall	.+260    	; 0x496e <__fp_powser>
    486a:	b4 d0       	rcall	.+360    	; 0x49d4 <__fp_round>
    486c:	2f 91       	pop	r18
    486e:	3f 91       	pop	r19
    4870:	4f 91       	pop	r20
    4872:	5f 91       	pop	r21
    4874:	fa d0       	rcall	.+500    	; 0x4a6a <__mulsf3x>
    4876:	dd 23       	and	r29, r29
    4878:	49 f0       	breq	.+18     	; 0x488c <atan+0x4c>
    487a:	90 58       	subi	r25, 0x80	; 128
    487c:	a2 ea       	ldi	r26, 0xA2	; 162
    487e:	2a ed       	ldi	r18, 0xDA	; 218
    4880:	3f e0       	ldi	r19, 0x0F	; 15
    4882:	49 ec       	ldi	r20, 0xC9	; 201
    4884:	5f e3       	ldi	r21, 0x3F	; 63
    4886:	d0 78       	andi	r29, 0x80	; 128
    4888:	5d 27       	eor	r21, r29
    488a:	5b d1       	rcall	.+694    	; 0x4b42 <__addsf3x>
    488c:	df 91       	pop	r29
    488e:	a2 c0       	rjmp	.+324    	; 0x49d4 <__fp_round>
    4890:	9a d0       	rcall	.+308    	; 0x49c6 <__fp_pscB>
    4892:	40 f0       	brcs	.+16     	; 0x48a4 <atan+0x64>
    4894:	91 d0       	rcall	.+290    	; 0x49b8 <__fp_pscA>
    4896:	30 f0       	brcs	.+12     	; 0x48a4 <atan+0x64>
    4898:	21 f4       	brne	.+8      	; 0x48a2 <atan+0x62>
    489a:	5f 3f       	cpi	r21, 0xFF	; 255
    489c:	19 f0       	breq	.+6      	; 0x48a4 <atan+0x64>
    489e:	5e c0       	rjmp	.+188    	; 0x495c <__fp_inf>
    48a0:	51 11       	cpse	r21, r1
    48a2:	cc c0       	rjmp	.+408    	; 0x4a3c <__fp_szero>
    48a4:	61 c0       	rjmp	.+194    	; 0x4968 <__fp_nan>

000048a6 <__divsf3x>:
    48a6:	a7 d0       	rcall	.+334    	; 0x49f6 <__fp_split3>
    48a8:	98 f3       	brcs	.-26     	; 0x4890 <atan+0x50>

000048aa <__divsf3_pse>:
    48aa:	99 23       	and	r25, r25
    48ac:	c9 f3       	breq	.-14     	; 0x48a0 <atan+0x60>
    48ae:	55 23       	and	r21, r21
    48b0:	b1 f3       	breq	.-20     	; 0x489e <atan+0x5e>
    48b2:	95 1b       	sub	r25, r21
    48b4:	55 0b       	sbc	r21, r21
    48b6:	bb 27       	eor	r27, r27
    48b8:	aa 27       	eor	r26, r26
    48ba:	62 17       	cp	r22, r18
    48bc:	73 07       	cpc	r23, r19
    48be:	84 07       	cpc	r24, r20
    48c0:	38 f0       	brcs	.+14     	; 0x48d0 <__divsf3_pse+0x26>
    48c2:	9f 5f       	subi	r25, 0xFF	; 255
    48c4:	5f 4f       	sbci	r21, 0xFF	; 255
    48c6:	22 0f       	add	r18, r18
    48c8:	33 1f       	adc	r19, r19
    48ca:	44 1f       	adc	r20, r20
    48cc:	aa 1f       	adc	r26, r26
    48ce:	a9 f3       	breq	.-22     	; 0x48ba <__divsf3_pse+0x10>
    48d0:	33 d0       	rcall	.+102    	; 0x4938 <__divsf3_pse+0x8e>
    48d2:	0e 2e       	mov	r0, r30
    48d4:	3a f0       	brmi	.+14     	; 0x48e4 <__divsf3_pse+0x3a>
    48d6:	e0 e8       	ldi	r30, 0x80	; 128
    48d8:	30 d0       	rcall	.+96     	; 0x493a <__divsf3_pse+0x90>
    48da:	91 50       	subi	r25, 0x01	; 1
    48dc:	50 40       	sbci	r21, 0x00	; 0
    48de:	e6 95       	lsr	r30
    48e0:	00 1c       	adc	r0, r0
    48e2:	ca f7       	brpl	.-14     	; 0x48d6 <__divsf3_pse+0x2c>
    48e4:	29 d0       	rcall	.+82     	; 0x4938 <__divsf3_pse+0x8e>
    48e6:	fe 2f       	mov	r31, r30
    48e8:	27 d0       	rcall	.+78     	; 0x4938 <__divsf3_pse+0x8e>
    48ea:	66 0f       	add	r22, r22
    48ec:	77 1f       	adc	r23, r23
    48ee:	88 1f       	adc	r24, r24
    48f0:	bb 1f       	adc	r27, r27
    48f2:	26 17       	cp	r18, r22
    48f4:	37 07       	cpc	r19, r23
    48f6:	48 07       	cpc	r20, r24
    48f8:	ab 07       	cpc	r26, r27
    48fa:	b0 e8       	ldi	r27, 0x80	; 128
    48fc:	09 f0       	breq	.+2      	; 0x4900 <__divsf3_pse+0x56>
    48fe:	bb 0b       	sbc	r27, r27
    4900:	80 2d       	mov	r24, r0
    4902:	bf 01       	movw	r22, r30
    4904:	ff 27       	eor	r31, r31
    4906:	93 58       	subi	r25, 0x83	; 131
    4908:	5f 4f       	sbci	r21, 0xFF	; 255
    490a:	2a f0       	brmi	.+10     	; 0x4916 <__divsf3_pse+0x6c>
    490c:	9e 3f       	cpi	r25, 0xFE	; 254
    490e:	51 05       	cpc	r21, r1
    4910:	68 f0       	brcs	.+26     	; 0x492c <__divsf3_pse+0x82>
    4912:	24 c0       	rjmp	.+72     	; 0x495c <__fp_inf>
    4914:	93 c0       	rjmp	.+294    	; 0x4a3c <__fp_szero>
    4916:	5f 3f       	cpi	r21, 0xFF	; 255
    4918:	ec f3       	brlt	.-6      	; 0x4914 <__divsf3_pse+0x6a>
    491a:	98 3e       	cpi	r25, 0xE8	; 232
    491c:	dc f3       	brlt	.-10     	; 0x4914 <__divsf3_pse+0x6a>
    491e:	86 95       	lsr	r24
    4920:	77 95       	ror	r23
    4922:	67 95       	ror	r22
    4924:	b7 95       	ror	r27
    4926:	f7 95       	ror	r31
    4928:	9f 5f       	subi	r25, 0xFF	; 255
    492a:	c9 f7       	brne	.-14     	; 0x491e <__divsf3_pse+0x74>
    492c:	88 0f       	add	r24, r24
    492e:	91 1d       	adc	r25, r1
    4930:	96 95       	lsr	r25
    4932:	87 95       	ror	r24
    4934:	97 f9       	bld	r25, 7
    4936:	08 95       	ret
    4938:	e1 e0       	ldi	r30, 0x01	; 1
    493a:	66 0f       	add	r22, r22
    493c:	77 1f       	adc	r23, r23
    493e:	88 1f       	adc	r24, r24
    4940:	bb 1f       	adc	r27, r27
    4942:	62 17       	cp	r22, r18
    4944:	73 07       	cpc	r23, r19
    4946:	84 07       	cpc	r24, r20
    4948:	ba 07       	cpc	r27, r26
    494a:	20 f0       	brcs	.+8      	; 0x4954 <__divsf3_pse+0xaa>
    494c:	62 1b       	sub	r22, r18
    494e:	73 0b       	sbc	r23, r19
    4950:	84 0b       	sbc	r24, r20
    4952:	ba 0b       	sbc	r27, r26
    4954:	ee 1f       	adc	r30, r30
    4956:	88 f7       	brcc	.-30     	; 0x493a <__divsf3_pse+0x90>
    4958:	e0 95       	com	r30
    495a:	08 95       	ret

0000495c <__fp_inf>:
    495c:	97 f9       	bld	r25, 7
    495e:	9f 67       	ori	r25, 0x7F	; 127
    4960:	80 e8       	ldi	r24, 0x80	; 128
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	60 e0       	ldi	r22, 0x00	; 0
    4966:	08 95       	ret

00004968 <__fp_nan>:
    4968:	9f ef       	ldi	r25, 0xFF	; 255
    496a:	80 ec       	ldi	r24, 0xC0	; 192
    496c:	08 95       	ret

0000496e <__fp_powser>:
    496e:	df 93       	push	r29
    4970:	cf 93       	push	r28
    4972:	1f 93       	push	r17
    4974:	0f 93       	push	r16
    4976:	ff 92       	push	r15
    4978:	ef 92       	push	r14
    497a:	df 92       	push	r13
    497c:	7b 01       	movw	r14, r22
    497e:	8c 01       	movw	r16, r24
    4980:	68 94       	set
    4982:	05 c0       	rjmp	.+10     	; 0x498e <__fp_powser+0x20>
    4984:	da 2e       	mov	r13, r26
    4986:	ef 01       	movw	r28, r30
    4988:	70 d0       	rcall	.+224    	; 0x4a6a <__mulsf3x>
    498a:	fe 01       	movw	r30, r28
    498c:	e8 94       	clt
    498e:	a5 91       	lpm	r26, Z+
    4990:	25 91       	lpm	r18, Z+
    4992:	35 91       	lpm	r19, Z+
    4994:	45 91       	lpm	r20, Z+
    4996:	55 91       	lpm	r21, Z+
    4998:	ae f3       	brts	.-22     	; 0x4984 <__fp_powser+0x16>
    499a:	ef 01       	movw	r28, r30
    499c:	d2 d0       	rcall	.+420    	; 0x4b42 <__addsf3x>
    499e:	fe 01       	movw	r30, r28
    49a0:	97 01       	movw	r18, r14
    49a2:	a8 01       	movw	r20, r16
    49a4:	da 94       	dec	r13
    49a6:	79 f7       	brne	.-34     	; 0x4986 <__fp_powser+0x18>
    49a8:	df 90       	pop	r13
    49aa:	ef 90       	pop	r14
    49ac:	ff 90       	pop	r15
    49ae:	0f 91       	pop	r16
    49b0:	1f 91       	pop	r17
    49b2:	cf 91       	pop	r28
    49b4:	df 91       	pop	r29
    49b6:	08 95       	ret

000049b8 <__fp_pscA>:
    49b8:	00 24       	eor	r0, r0
    49ba:	0a 94       	dec	r0
    49bc:	16 16       	cp	r1, r22
    49be:	17 06       	cpc	r1, r23
    49c0:	18 06       	cpc	r1, r24
    49c2:	09 06       	cpc	r0, r25
    49c4:	08 95       	ret

000049c6 <__fp_pscB>:
    49c6:	00 24       	eor	r0, r0
    49c8:	0a 94       	dec	r0
    49ca:	12 16       	cp	r1, r18
    49cc:	13 06       	cpc	r1, r19
    49ce:	14 06       	cpc	r1, r20
    49d0:	05 06       	cpc	r0, r21
    49d2:	08 95       	ret

000049d4 <__fp_round>:
    49d4:	09 2e       	mov	r0, r25
    49d6:	03 94       	inc	r0
    49d8:	00 0c       	add	r0, r0
    49da:	11 f4       	brne	.+4      	; 0x49e0 <__fp_round+0xc>
    49dc:	88 23       	and	r24, r24
    49de:	52 f0       	brmi	.+20     	; 0x49f4 <__fp_round+0x20>
    49e0:	bb 0f       	add	r27, r27
    49e2:	40 f4       	brcc	.+16     	; 0x49f4 <__fp_round+0x20>
    49e4:	bf 2b       	or	r27, r31
    49e6:	11 f4       	brne	.+4      	; 0x49ec <__fp_round+0x18>
    49e8:	60 ff       	sbrs	r22, 0
    49ea:	04 c0       	rjmp	.+8      	; 0x49f4 <__fp_round+0x20>
    49ec:	6f 5f       	subi	r22, 0xFF	; 255
    49ee:	7f 4f       	sbci	r23, 0xFF	; 255
    49f0:	8f 4f       	sbci	r24, 0xFF	; 255
    49f2:	9f 4f       	sbci	r25, 0xFF	; 255
    49f4:	08 95       	ret

000049f6 <__fp_split3>:
    49f6:	57 fd       	sbrc	r21, 7
    49f8:	90 58       	subi	r25, 0x80	; 128
    49fa:	44 0f       	add	r20, r20
    49fc:	55 1f       	adc	r21, r21
    49fe:	59 f0       	breq	.+22     	; 0x4a16 <__fp_splitA+0x10>
    4a00:	5f 3f       	cpi	r21, 0xFF	; 255
    4a02:	71 f0       	breq	.+28     	; 0x4a20 <__fp_splitA+0x1a>
    4a04:	47 95       	ror	r20

00004a06 <__fp_splitA>:
    4a06:	88 0f       	add	r24, r24
    4a08:	97 fb       	bst	r25, 7
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	61 f0       	breq	.+24     	; 0x4a26 <__fp_splitA+0x20>
    4a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    4a10:	79 f0       	breq	.+30     	; 0x4a30 <__fp_splitA+0x2a>
    4a12:	87 95       	ror	r24
    4a14:	08 95       	ret
    4a16:	12 16       	cp	r1, r18
    4a18:	13 06       	cpc	r1, r19
    4a1a:	14 06       	cpc	r1, r20
    4a1c:	55 1f       	adc	r21, r21
    4a1e:	f2 cf       	rjmp	.-28     	; 0x4a04 <__fp_split3+0xe>
    4a20:	46 95       	lsr	r20
    4a22:	f1 df       	rcall	.-30     	; 0x4a06 <__fp_splitA>
    4a24:	08 c0       	rjmp	.+16     	; 0x4a36 <__fp_splitA+0x30>
    4a26:	16 16       	cp	r1, r22
    4a28:	17 06       	cpc	r1, r23
    4a2a:	18 06       	cpc	r1, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	f1 cf       	rjmp	.-30     	; 0x4a12 <__fp_splitA+0xc>
    4a30:	86 95       	lsr	r24
    4a32:	71 05       	cpc	r23, r1
    4a34:	61 05       	cpc	r22, r1
    4a36:	08 94       	sec
    4a38:	08 95       	ret

00004a3a <__fp_zero>:
    4a3a:	e8 94       	clt

00004a3c <__fp_szero>:
    4a3c:	bb 27       	eor	r27, r27
    4a3e:	66 27       	eor	r22, r22
    4a40:	77 27       	eor	r23, r23
    4a42:	cb 01       	movw	r24, r22
    4a44:	97 f9       	bld	r25, 7
    4a46:	08 95       	ret

00004a48 <inverse>:
    4a48:	9b 01       	movw	r18, r22
    4a4a:	ac 01       	movw	r20, r24
    4a4c:	60 e0       	ldi	r22, 0x00	; 0
    4a4e:	70 e0       	ldi	r23, 0x00	; 0
    4a50:	80 e8       	ldi	r24, 0x80	; 128
    4a52:	9f e3       	ldi	r25, 0x3F	; 63
    4a54:	c9 c0       	rjmp	.+402    	; 0x4be8 <__divsf3>
    4a56:	b0 df       	rcall	.-160    	; 0x49b8 <__fp_pscA>
    4a58:	28 f0       	brcs	.+10     	; 0x4a64 <inverse+0x1c>
    4a5a:	b5 df       	rcall	.-150    	; 0x49c6 <__fp_pscB>
    4a5c:	18 f0       	brcs	.+6      	; 0x4a64 <inverse+0x1c>
    4a5e:	95 23       	and	r25, r21
    4a60:	09 f0       	breq	.+2      	; 0x4a64 <inverse+0x1c>
    4a62:	7c cf       	rjmp	.-264    	; 0x495c <__fp_inf>
    4a64:	81 cf       	rjmp	.-254    	; 0x4968 <__fp_nan>
    4a66:	11 24       	eor	r1, r1
    4a68:	e9 cf       	rjmp	.-46     	; 0x4a3c <__fp_szero>

00004a6a <__mulsf3x>:
    4a6a:	c5 df       	rcall	.-118    	; 0x49f6 <__fp_split3>
    4a6c:	a0 f3       	brcs	.-24     	; 0x4a56 <inverse+0xe>

00004a6e <__mulsf3_pse>:
    4a6e:	95 9f       	mul	r25, r21
    4a70:	d1 f3       	breq	.-12     	; 0x4a66 <inverse+0x1e>
    4a72:	95 0f       	add	r25, r21
    4a74:	50 e0       	ldi	r21, 0x00	; 0
    4a76:	55 1f       	adc	r21, r21
    4a78:	62 9f       	mul	r22, r18
    4a7a:	f0 01       	movw	r30, r0
    4a7c:	72 9f       	mul	r23, r18
    4a7e:	bb 27       	eor	r27, r27
    4a80:	f0 0d       	add	r31, r0
    4a82:	b1 1d       	adc	r27, r1
    4a84:	63 9f       	mul	r22, r19
    4a86:	aa 27       	eor	r26, r26
    4a88:	f0 0d       	add	r31, r0
    4a8a:	b1 1d       	adc	r27, r1
    4a8c:	aa 1f       	adc	r26, r26
    4a8e:	64 9f       	mul	r22, r20
    4a90:	66 27       	eor	r22, r22
    4a92:	b0 0d       	add	r27, r0
    4a94:	a1 1d       	adc	r26, r1
    4a96:	66 1f       	adc	r22, r22
    4a98:	82 9f       	mul	r24, r18
    4a9a:	22 27       	eor	r18, r18
    4a9c:	b0 0d       	add	r27, r0
    4a9e:	a1 1d       	adc	r26, r1
    4aa0:	62 1f       	adc	r22, r18
    4aa2:	73 9f       	mul	r23, r19
    4aa4:	b0 0d       	add	r27, r0
    4aa6:	a1 1d       	adc	r26, r1
    4aa8:	62 1f       	adc	r22, r18
    4aaa:	83 9f       	mul	r24, r19
    4aac:	a0 0d       	add	r26, r0
    4aae:	61 1d       	adc	r22, r1
    4ab0:	22 1f       	adc	r18, r18
    4ab2:	74 9f       	mul	r23, r20
    4ab4:	33 27       	eor	r19, r19
    4ab6:	a0 0d       	add	r26, r0
    4ab8:	61 1d       	adc	r22, r1
    4aba:	23 1f       	adc	r18, r19
    4abc:	84 9f       	mul	r24, r20
    4abe:	60 0d       	add	r22, r0
    4ac0:	21 1d       	adc	r18, r1
    4ac2:	82 2f       	mov	r24, r18
    4ac4:	76 2f       	mov	r23, r22
    4ac6:	6a 2f       	mov	r22, r26
    4ac8:	11 24       	eor	r1, r1
    4aca:	9f 57       	subi	r25, 0x7F	; 127
    4acc:	50 40       	sbci	r21, 0x00	; 0
    4ace:	8a f0       	brmi	.+34     	; 0x4af2 <__mulsf3_pse+0x84>
    4ad0:	e1 f0       	breq	.+56     	; 0x4b0a <__mulsf3_pse+0x9c>
    4ad2:	88 23       	and	r24, r24
    4ad4:	4a f0       	brmi	.+18     	; 0x4ae8 <__mulsf3_pse+0x7a>
    4ad6:	ee 0f       	add	r30, r30
    4ad8:	ff 1f       	adc	r31, r31
    4ada:	bb 1f       	adc	r27, r27
    4adc:	66 1f       	adc	r22, r22
    4ade:	77 1f       	adc	r23, r23
    4ae0:	88 1f       	adc	r24, r24
    4ae2:	91 50       	subi	r25, 0x01	; 1
    4ae4:	50 40       	sbci	r21, 0x00	; 0
    4ae6:	a9 f7       	brne	.-22     	; 0x4ad2 <__mulsf3_pse+0x64>
    4ae8:	9e 3f       	cpi	r25, 0xFE	; 254
    4aea:	51 05       	cpc	r21, r1
    4aec:	70 f0       	brcs	.+28     	; 0x4b0a <__mulsf3_pse+0x9c>
    4aee:	36 cf       	rjmp	.-404    	; 0x495c <__fp_inf>
    4af0:	a5 cf       	rjmp	.-182    	; 0x4a3c <__fp_szero>
    4af2:	5f 3f       	cpi	r21, 0xFF	; 255
    4af4:	ec f3       	brlt	.-6      	; 0x4af0 <__mulsf3_pse+0x82>
    4af6:	98 3e       	cpi	r25, 0xE8	; 232
    4af8:	dc f3       	brlt	.-10     	; 0x4af0 <__mulsf3_pse+0x82>
    4afa:	86 95       	lsr	r24
    4afc:	77 95       	ror	r23
    4afe:	67 95       	ror	r22
    4b00:	b7 95       	ror	r27
    4b02:	f7 95       	ror	r31
    4b04:	e7 95       	ror	r30
    4b06:	9f 5f       	subi	r25, 0xFF	; 255
    4b08:	c1 f7       	brne	.-16     	; 0x4afa <__mulsf3_pse+0x8c>
    4b0a:	fe 2b       	or	r31, r30
    4b0c:	88 0f       	add	r24, r24
    4b0e:	91 1d       	adc	r25, r1
    4b10:	96 95       	lsr	r25
    4b12:	87 95       	ror	r24
    4b14:	97 f9       	bld	r25, 7
    4b16:	08 95       	ret

00004b18 <square>:
    4b18:	9b 01       	movw	r18, r22
    4b1a:	ac 01       	movw	r20, r24
    4b1c:	8d ca       	rjmp	.-2790   	; 0x4038 <__mulsf3>

00004b1e <__subsf3>:
    4b1e:	50 58       	subi	r21, 0x80	; 128

00004b20 <__addsf3>:
    4b20:	bb 27       	eor	r27, r27
    4b22:	aa 27       	eor	r26, r26
    4b24:	0e d0       	rcall	.+28     	; 0x4b42 <__addsf3x>
    4b26:	56 cf       	rjmp	.-340    	; 0x49d4 <__fp_round>
    4b28:	47 df       	rcall	.-370    	; 0x49b8 <__fp_pscA>
    4b2a:	30 f0       	brcs	.+12     	; 0x4b38 <__addsf3+0x18>
    4b2c:	4c df       	rcall	.-360    	; 0x49c6 <__fp_pscB>
    4b2e:	20 f0       	brcs	.+8      	; 0x4b38 <__addsf3+0x18>
    4b30:	31 f4       	brne	.+12     	; 0x4b3e <__addsf3+0x1e>
    4b32:	9f 3f       	cpi	r25, 0xFF	; 255
    4b34:	11 f4       	brne	.+4      	; 0x4b3a <__addsf3+0x1a>
    4b36:	1e f4       	brtc	.+6      	; 0x4b3e <__addsf3+0x1e>
    4b38:	17 cf       	rjmp	.-466    	; 0x4968 <__fp_nan>
    4b3a:	0e f4       	brtc	.+2      	; 0x4b3e <__addsf3+0x1e>
    4b3c:	e0 95       	com	r30
    4b3e:	e7 fb       	bst	r30, 7
    4b40:	0d cf       	rjmp	.-486    	; 0x495c <__fp_inf>

00004b42 <__addsf3x>:
    4b42:	e9 2f       	mov	r30, r25
    4b44:	58 df       	rcall	.-336    	; 0x49f6 <__fp_split3>
    4b46:	80 f3       	brcs	.-32     	; 0x4b28 <__addsf3+0x8>
    4b48:	ba 17       	cp	r27, r26
    4b4a:	62 07       	cpc	r22, r18
    4b4c:	73 07       	cpc	r23, r19
    4b4e:	84 07       	cpc	r24, r20
    4b50:	95 07       	cpc	r25, r21
    4b52:	18 f0       	brcs	.+6      	; 0x4b5a <__addsf3x+0x18>
    4b54:	71 f4       	brne	.+28     	; 0x4b72 <__addsf3x+0x30>
    4b56:	9e f5       	brtc	.+102    	; 0x4bbe <__addsf3x+0x7c>
    4b58:	70 cf       	rjmp	.-288    	; 0x4a3a <__fp_zero>
    4b5a:	0e f4       	brtc	.+2      	; 0x4b5e <__addsf3x+0x1c>
    4b5c:	e0 95       	com	r30
    4b5e:	0b 2e       	mov	r0, r27
    4b60:	ba 2f       	mov	r27, r26
    4b62:	a0 2d       	mov	r26, r0
    4b64:	0b 01       	movw	r0, r22
    4b66:	b9 01       	movw	r22, r18
    4b68:	90 01       	movw	r18, r0
    4b6a:	0c 01       	movw	r0, r24
    4b6c:	ca 01       	movw	r24, r20
    4b6e:	a0 01       	movw	r20, r0
    4b70:	11 24       	eor	r1, r1
    4b72:	ff 27       	eor	r31, r31
    4b74:	59 1b       	sub	r21, r25
    4b76:	99 f0       	breq	.+38     	; 0x4b9e <__addsf3x+0x5c>
    4b78:	59 3f       	cpi	r21, 0xF9	; 249
    4b7a:	50 f4       	brcc	.+20     	; 0x4b90 <__addsf3x+0x4e>
    4b7c:	50 3e       	cpi	r21, 0xE0	; 224
    4b7e:	68 f1       	brcs	.+90     	; 0x4bda <__addsf3x+0x98>
    4b80:	1a 16       	cp	r1, r26
    4b82:	f0 40       	sbci	r31, 0x00	; 0
    4b84:	a2 2f       	mov	r26, r18
    4b86:	23 2f       	mov	r18, r19
    4b88:	34 2f       	mov	r19, r20
    4b8a:	44 27       	eor	r20, r20
    4b8c:	58 5f       	subi	r21, 0xF8	; 248
    4b8e:	f3 cf       	rjmp	.-26     	; 0x4b76 <__addsf3x+0x34>
    4b90:	46 95       	lsr	r20
    4b92:	37 95       	ror	r19
    4b94:	27 95       	ror	r18
    4b96:	a7 95       	ror	r26
    4b98:	f0 40       	sbci	r31, 0x00	; 0
    4b9a:	53 95       	inc	r21
    4b9c:	c9 f7       	brne	.-14     	; 0x4b90 <__addsf3x+0x4e>
    4b9e:	7e f4       	brtc	.+30     	; 0x4bbe <__addsf3x+0x7c>
    4ba0:	1f 16       	cp	r1, r31
    4ba2:	ba 0b       	sbc	r27, r26
    4ba4:	62 0b       	sbc	r22, r18
    4ba6:	73 0b       	sbc	r23, r19
    4ba8:	84 0b       	sbc	r24, r20
    4baa:	ba f0       	brmi	.+46     	; 0x4bda <__addsf3x+0x98>
    4bac:	91 50       	subi	r25, 0x01	; 1
    4bae:	a1 f0       	breq	.+40     	; 0x4bd8 <__addsf3x+0x96>
    4bb0:	ff 0f       	add	r31, r31
    4bb2:	bb 1f       	adc	r27, r27
    4bb4:	66 1f       	adc	r22, r22
    4bb6:	77 1f       	adc	r23, r23
    4bb8:	88 1f       	adc	r24, r24
    4bba:	c2 f7       	brpl	.-16     	; 0x4bac <__addsf3x+0x6a>
    4bbc:	0e c0       	rjmp	.+28     	; 0x4bda <__addsf3x+0x98>
    4bbe:	ba 0f       	add	r27, r26
    4bc0:	62 1f       	adc	r22, r18
    4bc2:	73 1f       	adc	r23, r19
    4bc4:	84 1f       	adc	r24, r20
    4bc6:	48 f4       	brcc	.+18     	; 0x4bda <__addsf3x+0x98>
    4bc8:	87 95       	ror	r24
    4bca:	77 95       	ror	r23
    4bcc:	67 95       	ror	r22
    4bce:	b7 95       	ror	r27
    4bd0:	f7 95       	ror	r31
    4bd2:	9e 3f       	cpi	r25, 0xFE	; 254
    4bd4:	08 f0       	brcs	.+2      	; 0x4bd8 <__addsf3x+0x96>
    4bd6:	b3 cf       	rjmp	.-154    	; 0x4b3e <__addsf3+0x1e>
    4bd8:	93 95       	inc	r25
    4bda:	88 0f       	add	r24, r24
    4bdc:	08 f0       	brcs	.+2      	; 0x4be0 <__addsf3x+0x9e>
    4bde:	99 27       	eor	r25, r25
    4be0:	ee 0f       	add	r30, r30
    4be2:	97 95       	ror	r25
    4be4:	87 95       	ror	r24
    4be6:	08 95       	ret

00004be8 <__divsf3>:
    4be8:	5e de       	rcall	.-836    	; 0x48a6 <__divsf3x>
    4bea:	f4 ce       	rjmp	.-536    	; 0x49d4 <__fp_round>

00004bec <_exit>:
    4bec:	ff cf       	rjmp	.-2      	; 0x4bec <_exit>
