
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  00004ce8  00004d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  0080032a  0080032a  00004ea6  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  000078ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f7a  00000000  00000000  00007b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003dff  00000000  00000000  00008ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000148c  00000000  00000000  0000c8e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004766  00000000  00000000  0000dd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  000124d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ed8  00000000  00000000  00012ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001115  00000000  00000000  000139c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f2  00000000  00000000  00014ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  00014cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__vector_32>
      84:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <__vector_42>
      ac:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	4d 0c       	add	r4, r13
      e6:	31 0c       	add	r3, r1
      e8:	fd 0b       	sbc	r31, r29
      ea:	b2 0c       	add	r11, r2
      ec:	78 0c       	add	r7, r8
      ee:	a5 0c       	add	r10, r5
      f0:	cf 0b       	sbc	r28, r31
      f2:	b2 0b       	sbc	r27, r18
      f4:	7d 0b       	sbc	r23, r29
      f6:	62 0b       	sbc	r22, r18
      f8:	1a 07       	cpc	r17, r26
      fa:	1a 07       	cpc	r17, r26
      fc:	1a 07       	cpc	r17, r26
      fe:	1a 07       	cpc	r17, r26
     100:	1a 07       	cpc	r17, r26
     102:	1a 07       	cpc	r17, r26
     104:	57 0b       	sbc	r21, r23
     106:	4c 0b       	sbc	r20, r28
     108:	1a 07       	cpc	r17, r26
     10a:	1a 07       	cpc	r17, r26
     10c:	1a 07       	cpc	r17, r26
     10e:	1a 07       	cpc	r17, r26
     110:	1a 07       	cpc	r17, r26
     112:	1a 07       	cpc	r17, r26
     114:	1a 07       	cpc	r17, r26
     116:	1a 07       	cpc	r17, r26
     118:	1a 07       	cpc	r17, r26
     11a:	1a 07       	cpc	r17, r26
     11c:	1a 07       	cpc	r17, r26
     11e:	1a 07       	cpc	r17, r26
     120:	7d 0b       	sbc	r23, r29
     122:	fd 0b       	sbc	r31, r29
     124:	3c 0b       	sbc	r19, r28
     126:	37 0b       	sbc	r19, r23
     128:	1a 07       	cpc	r17, r26
     12a:	1a 07       	cpc	r17, r26
     12c:	1a 07       	cpc	r17, r26
     12e:	1a 07       	cpc	r17, r26
     130:	1a 07       	cpc	r17, r26
     132:	1a 07       	cpc	r17, r26
     134:	1a 07       	cpc	r17, r26
     136:	1a 07       	cpc	r17, r26
     138:	1a 07       	cpc	r17, r26
     13a:	1a 07       	cpc	r17, r26
     13c:	1a 07       	cpc	r17, r26
     13e:	1a 07       	cpc	r17, r26
     140:	78 0c       	add	r7, r8
     142:	cf 0b       	sbc	r28, r31
     144:	1a 07       	cpc	r17, r26
     146:	1a 07       	cpc	r17, r26
     148:	4d 0c       	add	r4, r13
     14a:	a5 0c       	add	r10, r5
     14c:	25 0b       	sbc	r18, r21
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e8 ee       	ldi	r30, 0xE8	; 232
     194:	fc e4       	ldi	r31, 0x4C	; 76
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	aa 32       	cpi	r26, 0x2A	; 42
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	aa e2       	ldi	r26, 0x2A	; 42
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	ad 36       	cpi	r26, 0x6D	; 109
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "utility.h"
#include "speed_control.h"
#include "nRF24L01.h"
#include "behaviors.h"

int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	a6 97       	sbiw	r28, 0x26	; 38
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61

	unsigned int i = 0;
	choosePeripheral = 1;
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	10 93 18 02 	sts	0x0218, r17

	initPeripherals();
     1f8:	0e 94 bb 18 	call	0x3176	; 0x3176 <initPeripherals>

	startCalibration = 1;
     1fc:	10 93 2d 04 	sts	0x042D, r17
	calibrationCycle = 0;
     200:	10 92 2f 04 	sts	0x042F, r1
     204:	10 92 2e 04 	sts	0x042E, r1
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
					ackPayload[12] = accX>>8;
					ackPayload[13] = accY&0xFF;
					ackPayload[14] = accY>>8;
					ackPayload[15] = ir_move;
					packetId = 5;
     208:	05 e0       	ldi	r16, 0x05	; 5
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     20a:	21 2c       	mov	r2, r1
     20c:	52 e0       	ldi	r21, 0x02	; 2
     20e:	35 2e       	mov	r3, r21

	while(1) {

		//PORTB ^= (1 << 6); 	// toggle the green led

		currentSelector = getSelector();
     210:	0e 94 96 18 	call	0x312c	; 0x312c <getSelector>
     214:	80 93 2c 04 	sts	0x042C, r24

		readAccelXYZ();
     218:	0e 94 85 1a 	call	0x350a	; 0x350a <readAccelXYZ>

		computeAngle();
     21c:	0e 94 45 1b 	call	0x368a	; 0x368a <computeAngle>

		if(updateProx) {
     220:	80 91 9e 03 	lds	r24, 0x039E
     224:	88 23       	and	r24, r24
     226:	09 f0       	breq	.+2      	; 0x22a <main+0x6c>
     228:	87 c2       	rjmp	.+1294   	; 0x738 <main+0x57a>
     22a:	40 91 2d 04 	lds	r20, 0x042D
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
     22e:	20 91 2a 04 	lds	r18, 0x042A
     232:	30 91 2b 04 	lds	r19, 0x042B
     236:	5e e4       	ldi	r21, 0x4E	; 78
     238:	20 32       	cpi	r18, 0x20	; 32
     23a:	35 07       	cpc	r19, r21
     23c:	10 f0       	brcs	.+4      	; 0x242 <main+0x84>
			measBattery = 1;
     23e:	10 93 9b 03 	sts	0x039B, r17
			//sleep(20);
			//delayCounter = 0;
		}


		if(startCalibration && calibrationCycle<CALIBRATION_CYCLES) {
     242:	44 23       	and	r20, r20
     244:	09 f4       	brne	.+2      	; 0x248 <main+0x8a>
     246:	e0 c1       	rjmp	.+960    	; 0x608 <main+0x44a>
     248:	40 91 2e 04 	lds	r20, 0x042E
     24c:	50 91 2f 04 	lds	r21, 0x042F
     250:	40 31       	cpi	r20, 0x10	; 16
     252:	51 05       	cpc	r21, r1
     254:	0c f0       	brlt	.+2      	; 0x258 <main+0x9a>
     256:	dc c1       	rjmp	.+952    	; 0x610 <main+0x452>

			if(proxUpdated) {
     258:	80 91 cf 03 	lds	r24, 0x03CF
     25c:	88 23       	and	r24, r24
     25e:	c1 f2       	breq	.-80     	; 0x210 <main+0x52>

				proxUpdated = 0;
     260:	10 92 cf 03 	sts	0x03CF, r1

				if(calibrationCycle==0) {
     264:	41 15       	cp	r20, r1
     266:	51 05       	cpc	r21, r1
     268:	11 f4       	brne	.+4      	; 0x26e <main+0xb0>
     26a:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <main+0x13ee>
     26e:	20 91 22 04 	lds	r18, 0x0422
     272:	30 91 23 04 	lds	r19, 0x0423
     276:	60 91 24 04 	lds	r22, 0x0424
     27a:	70 91 25 04 	lds	r23, 0x0425
     27e:	80 91 26 04 	lds	r24, 0x0426
     282:	90 91 27 04 	lds	r25, 0x0427
     286:	9e a3       	std	Y+38, r25	; 0x26
     288:	8d a3       	std	Y+37, r24	; 0x25
     28a:	c0 90 9f 03 	lds	r12, 0x039F
     28e:	d0 90 a0 03 	lds	r13, 0x03A0
     292:	e0 90 a1 03 	lds	r14, 0x03A1
     296:	f0 90 a2 03 	lds	r15, 0x03A2
     29a:	80 90 a3 03 	lds	r8, 0x03A3
     29e:	90 90 a4 03 	lds	r9, 0x03A4
     2a2:	a0 90 a5 03 	lds	r10, 0x03A5
     2a6:	b0 90 a6 03 	lds	r11, 0x03A6
     2aa:	40 90 a7 03 	lds	r4, 0x03A7
     2ae:	50 90 a8 03 	lds	r5, 0x03A8
     2b2:	60 90 a9 03 	lds	r6, 0x03A9
     2b6:	70 90 aa 03 	lds	r7, 0x03AA
     2ba:	80 91 ab 03 	lds	r24, 0x03AB
     2be:	90 91 ac 03 	lds	r25, 0x03AC
     2c2:	a0 91 ad 03 	lds	r26, 0x03AD
     2c6:	b0 91 ae 03 	lds	r27, 0x03AE
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	ab 83       	std	Y+3, r26	; 0x03
     2d0:	bc 83       	std	Y+4, r27	; 0x04
     2d2:	80 91 af 03 	lds	r24, 0x03AF
     2d6:	90 91 b0 03 	lds	r25, 0x03B0
     2da:	a0 91 b1 03 	lds	r26, 0x03B1
     2de:	b0 91 b2 03 	lds	r27, 0x03B2
     2e2:	8d 83       	std	Y+5, r24	; 0x05
     2e4:	9e 83       	std	Y+6, r25	; 0x06
     2e6:	af 83       	std	Y+7, r26	; 0x07
     2e8:	b8 87       	std	Y+8, r27	; 0x08
     2ea:	80 91 b3 03 	lds	r24, 0x03B3
     2ee:	90 91 b4 03 	lds	r25, 0x03B4
     2f2:	a0 91 b5 03 	lds	r26, 0x03B5
     2f6:	b0 91 b6 03 	lds	r27, 0x03B6
     2fa:	89 87       	std	Y+9, r24	; 0x09
     2fc:	9a 87       	std	Y+10, r25	; 0x0a
     2fe:	ab 87       	std	Y+11, r26	; 0x0b
     300:	bc 87       	std	Y+12, r27	; 0x0c
     302:	80 91 b7 03 	lds	r24, 0x03B7
     306:	90 91 b8 03 	lds	r25, 0x03B8
     30a:	a0 91 b9 03 	lds	r26, 0x03B9
     30e:	b0 91 ba 03 	lds	r27, 0x03BA
     312:	8d 87       	std	Y+13, r24	; 0x0d
     314:	9e 87       	std	Y+14, r25	; 0x0e
     316:	af 87       	std	Y+15, r26	; 0x0f
     318:	b8 8b       	std	Y+16, r27	; 0x10
     31a:	80 91 bb 03 	lds	r24, 0x03BB
     31e:	90 91 bc 03 	lds	r25, 0x03BC
     322:	a0 91 bd 03 	lds	r26, 0x03BD
     326:	b0 91 be 03 	lds	r27, 0x03BE
     32a:	89 8b       	std	Y+17, r24	; 0x11
     32c:	9a 8b       	std	Y+18, r25	; 0x12
     32e:	ab 8b       	std	Y+19, r26	; 0x13
     330:	bc 8b       	std	Y+20, r27	; 0x14
     332:	80 91 bf 03 	lds	r24, 0x03BF
     336:	90 91 c0 03 	lds	r25, 0x03C0
     33a:	a0 91 c1 03 	lds	r26, 0x03C1
     33e:	b0 91 c2 03 	lds	r27, 0x03C2
     342:	8d 8b       	std	Y+21, r24	; 0x15
     344:	9e 8b       	std	Y+22, r25	; 0x16
     346:	af 8b       	std	Y+23, r26	; 0x17
     348:	b8 8f       	std	Y+24, r27	; 0x18
     34a:	80 91 c3 03 	lds	r24, 0x03C3
     34e:	90 91 c4 03 	lds	r25, 0x03C4
     352:	a0 91 c5 03 	lds	r26, 0x03C5
     356:	b0 91 c6 03 	lds	r27, 0x03C6
     35a:	89 8f       	std	Y+25, r24	; 0x19
     35c:	9a 8f       	std	Y+26, r25	; 0x1a
     35e:	ab 8f       	std	Y+27, r26	; 0x1b
     360:	bc 8f       	std	Y+28, r27	; 0x1c
     362:	80 91 c7 03 	lds	r24, 0x03C7
     366:	90 91 c8 03 	lds	r25, 0x03C8
     36a:	a0 91 c9 03 	lds	r26, 0x03C9
     36e:	b0 91 ca 03 	lds	r27, 0x03CA
     372:	8d 8f       	std	Y+29, r24	; 0x1d
     374:	9e 8f       	std	Y+30, r25	; 0x1e
     376:	af 8f       	std	Y+31, r26	; 0x1f
     378:	b8 a3       	std	Y+32, r27	; 0x20
     37a:	80 91 cb 03 	lds	r24, 0x03CB
     37e:	90 91 cc 03 	lds	r25, 0x03CC
     382:	a0 91 cd 03 	lds	r26, 0x03CD
     386:	b0 91 ce 03 	lds	r27, 0x03CE
     38a:	89 a3       	std	Y+33, r24	; 0x21
     38c:	9a a3       	std	Y+34, r25	; 0x22
     38e:	ab a3       	std	Y+35, r26	; 0x23
     390:	bc a3       	std	Y+36, r27	; 0x24
					accOffsetYSum = 0;
					accOffsetZSum = 0;
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
     392:	80 91 65 03 	lds	r24, 0x0365
     396:	90 91 66 03 	lds	r25, 0x0366
     39a:	aa 27       	eor	r26, r26
     39c:	97 fd       	sbrc	r25, 7
     39e:	a0 95       	com	r26
     3a0:	ba 2f       	mov	r27, r26
     3a2:	8c 0d       	add	r24, r12
     3a4:	9d 1d       	adc	r25, r13
     3a6:	ae 1d       	adc	r26, r14
     3a8:	bf 1d       	adc	r27, r15
     3aa:	80 93 9f 03 	sts	0x039F, r24
     3ae:	90 93 a0 03 	sts	0x03A0, r25
     3b2:	a0 93 a1 03 	sts	0x03A1, r26
     3b6:	b0 93 a2 03 	sts	0x03A2, r27
     3ba:	80 91 67 03 	lds	r24, 0x0367
     3be:	90 91 68 03 	lds	r25, 0x0368
     3c2:	aa 27       	eor	r26, r26
     3c4:	97 fd       	sbrc	r25, 7
     3c6:	a0 95       	com	r26
     3c8:	ba 2f       	mov	r27, r26
     3ca:	88 0d       	add	r24, r8
     3cc:	99 1d       	adc	r25, r9
     3ce:	aa 1d       	adc	r26, r10
     3d0:	bb 1d       	adc	r27, r11
     3d2:	80 93 a3 03 	sts	0x03A3, r24
     3d6:	90 93 a4 03 	sts	0x03A4, r25
     3da:	a0 93 a5 03 	sts	0x03A5, r26
     3de:	b0 93 a6 03 	sts	0x03A6, r27
     3e2:	80 91 69 03 	lds	r24, 0x0369
     3e6:	90 91 6a 03 	lds	r25, 0x036A
     3ea:	aa 27       	eor	r26, r26
     3ec:	97 fd       	sbrc	r25, 7
     3ee:	a0 95       	com	r26
     3f0:	ba 2f       	mov	r27, r26
     3f2:	84 0d       	add	r24, r4
     3f4:	95 1d       	adc	r25, r5
     3f6:	a6 1d       	adc	r26, r6
     3f8:	b7 1d       	adc	r27, r7
     3fa:	80 93 a7 03 	sts	0x03A7, r24
     3fe:	90 93 a8 03 	sts	0x03A8, r25
     402:	a0 93 a9 03 	sts	0x03A9, r26
     406:	b0 93 aa 03 	sts	0x03AA, r27
     40a:	80 91 6b 03 	lds	r24, 0x036B
     40e:	90 91 6c 03 	lds	r25, 0x036C
     412:	aa 27       	eor	r26, r26
     414:	97 fd       	sbrc	r25, 7
     416:	a0 95       	com	r26
     418:	ba 2f       	mov	r27, r26
     41a:	c9 80       	ldd	r12, Y+1	; 0x01
     41c:	da 80       	ldd	r13, Y+2	; 0x02
     41e:	eb 80       	ldd	r14, Y+3	; 0x03
     420:	fc 80       	ldd	r15, Y+4	; 0x04
     422:	8c 0d       	add	r24, r12
     424:	9d 1d       	adc	r25, r13
     426:	ae 1d       	adc	r26, r14
     428:	bf 1d       	adc	r27, r15
     42a:	80 93 ab 03 	sts	0x03AB, r24
     42e:	90 93 ac 03 	sts	0x03AC, r25
     432:	a0 93 ad 03 	sts	0x03AD, r26
     436:	b0 93 ae 03 	sts	0x03AE, r27
     43a:	80 91 6d 03 	lds	r24, 0x036D
     43e:	90 91 6e 03 	lds	r25, 0x036E
     442:	aa 27       	eor	r26, r26
     444:	97 fd       	sbrc	r25, 7
     446:	a0 95       	com	r26
     448:	ba 2f       	mov	r27, r26
     44a:	cd 80       	ldd	r12, Y+5	; 0x05
     44c:	de 80       	ldd	r13, Y+6	; 0x06
     44e:	ef 80       	ldd	r14, Y+7	; 0x07
     450:	f8 84       	ldd	r15, Y+8	; 0x08
     452:	8c 0d       	add	r24, r12
     454:	9d 1d       	adc	r25, r13
     456:	ae 1d       	adc	r26, r14
     458:	bf 1d       	adc	r27, r15
     45a:	80 93 af 03 	sts	0x03AF, r24
     45e:	90 93 b0 03 	sts	0x03B0, r25
     462:	a0 93 b1 03 	sts	0x03B1, r26
     466:	b0 93 b2 03 	sts	0x03B2, r27
     46a:	80 91 6f 03 	lds	r24, 0x036F
     46e:	90 91 70 03 	lds	r25, 0x0370
     472:	aa 27       	eor	r26, r26
     474:	97 fd       	sbrc	r25, 7
     476:	a0 95       	com	r26
     478:	ba 2f       	mov	r27, r26
     47a:	c9 84       	ldd	r12, Y+9	; 0x09
     47c:	da 84       	ldd	r13, Y+10	; 0x0a
     47e:	eb 84       	ldd	r14, Y+11	; 0x0b
     480:	fc 84       	ldd	r15, Y+12	; 0x0c
     482:	8c 0d       	add	r24, r12
     484:	9d 1d       	adc	r25, r13
     486:	ae 1d       	adc	r26, r14
     488:	bf 1d       	adc	r27, r15
     48a:	80 93 b3 03 	sts	0x03B3, r24
     48e:	90 93 b4 03 	sts	0x03B4, r25
     492:	a0 93 b5 03 	sts	0x03B5, r26
     496:	b0 93 b6 03 	sts	0x03B6, r27
     49a:	80 91 71 03 	lds	r24, 0x0371
     49e:	90 91 72 03 	lds	r25, 0x0372
     4a2:	aa 27       	eor	r26, r26
     4a4:	97 fd       	sbrc	r25, 7
     4a6:	a0 95       	com	r26
     4a8:	ba 2f       	mov	r27, r26
     4aa:	cd 84       	ldd	r12, Y+13	; 0x0d
     4ac:	de 84       	ldd	r13, Y+14	; 0x0e
     4ae:	ef 84       	ldd	r14, Y+15	; 0x0f
     4b0:	f8 88       	ldd	r15, Y+16	; 0x10
     4b2:	8c 0d       	add	r24, r12
     4b4:	9d 1d       	adc	r25, r13
     4b6:	ae 1d       	adc	r26, r14
     4b8:	bf 1d       	adc	r27, r15
     4ba:	80 93 b7 03 	sts	0x03B7, r24
     4be:	90 93 b8 03 	sts	0x03B8, r25
     4c2:	a0 93 b9 03 	sts	0x03B9, r26
     4c6:	b0 93 ba 03 	sts	0x03BA, r27
     4ca:	80 91 73 03 	lds	r24, 0x0373
     4ce:	90 91 74 03 	lds	r25, 0x0374
     4d2:	aa 27       	eor	r26, r26
     4d4:	97 fd       	sbrc	r25, 7
     4d6:	a0 95       	com	r26
     4d8:	ba 2f       	mov	r27, r26
     4da:	c9 88       	ldd	r12, Y+17	; 0x11
     4dc:	da 88       	ldd	r13, Y+18	; 0x12
     4de:	eb 88       	ldd	r14, Y+19	; 0x13
     4e0:	fc 88       	ldd	r15, Y+20	; 0x14
     4e2:	8c 0d       	add	r24, r12
     4e4:	9d 1d       	adc	r25, r13
     4e6:	ae 1d       	adc	r26, r14
     4e8:	bf 1d       	adc	r27, r15
     4ea:	80 93 bb 03 	sts	0x03BB, r24
     4ee:	90 93 bc 03 	sts	0x03BC, r25
     4f2:	a0 93 bd 03 	sts	0x03BD, r26
     4f6:	b0 93 be 03 	sts	0x03BE, r27
     4fa:	80 91 75 03 	lds	r24, 0x0375
     4fe:	90 91 76 03 	lds	r25, 0x0376
     502:	aa 27       	eor	r26, r26
     504:	97 fd       	sbrc	r25, 7
     506:	a0 95       	com	r26
     508:	ba 2f       	mov	r27, r26
     50a:	cd 88       	ldd	r12, Y+21	; 0x15
     50c:	de 88       	ldd	r13, Y+22	; 0x16
     50e:	ef 88       	ldd	r14, Y+23	; 0x17
     510:	f8 8c       	ldd	r15, Y+24	; 0x18
     512:	8c 0d       	add	r24, r12
     514:	9d 1d       	adc	r25, r13
     516:	ae 1d       	adc	r26, r14
     518:	bf 1d       	adc	r27, r15
     51a:	80 93 bf 03 	sts	0x03BF, r24
     51e:	90 93 c0 03 	sts	0x03C0, r25
     522:	a0 93 c1 03 	sts	0x03C1, r26
     526:	b0 93 c2 03 	sts	0x03C2, r27
     52a:	80 91 77 03 	lds	r24, 0x0377
     52e:	90 91 78 03 	lds	r25, 0x0378
     532:	aa 27       	eor	r26, r26
     534:	97 fd       	sbrc	r25, 7
     536:	a0 95       	com	r26
     538:	ba 2f       	mov	r27, r26
     53a:	c9 8c       	ldd	r12, Y+25	; 0x19
     53c:	da 8c       	ldd	r13, Y+26	; 0x1a
     53e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     540:	fc 8c       	ldd	r15, Y+28	; 0x1c
     542:	8c 0d       	add	r24, r12
     544:	9d 1d       	adc	r25, r13
     546:	ae 1d       	adc	r26, r14
     548:	bf 1d       	adc	r27, r15
     54a:	80 93 c3 03 	sts	0x03C3, r24
     54e:	90 93 c4 03 	sts	0x03C4, r25
     552:	a0 93 c5 03 	sts	0x03C5, r26
     556:	b0 93 c6 03 	sts	0x03C6, r27
     55a:	80 91 79 03 	lds	r24, 0x0379
     55e:	90 91 7a 03 	lds	r25, 0x037A
     562:	aa 27       	eor	r26, r26
     564:	97 fd       	sbrc	r25, 7
     566:	a0 95       	com	r26
     568:	ba 2f       	mov	r27, r26
     56a:	cd 8c       	ldd	r12, Y+29	; 0x1d
     56c:	de 8c       	ldd	r13, Y+30	; 0x1e
     56e:	ef 8c       	ldd	r14, Y+31	; 0x1f
     570:	f8 a0       	ldd	r15, Y+32	; 0x20
     572:	8c 0d       	add	r24, r12
     574:	9d 1d       	adc	r25, r13
     576:	ae 1d       	adc	r26, r14
     578:	bf 1d       	adc	r27, r15
     57a:	80 93 c7 03 	sts	0x03C7, r24
     57e:	90 93 c8 03 	sts	0x03C8, r25
     582:	a0 93 c9 03 	sts	0x03C9, r26
     586:	b0 93 ca 03 	sts	0x03CA, r27
     58a:	80 91 7b 03 	lds	r24, 0x037B
     58e:	90 91 7c 03 	lds	r25, 0x037C
     592:	aa 27       	eor	r26, r26
     594:	97 fd       	sbrc	r25, 7
     596:	a0 95       	com	r26
     598:	ba 2f       	mov	r27, r26
     59a:	c9 a0       	ldd	r12, Y+33	; 0x21
     59c:	da a0       	ldd	r13, Y+34	; 0x22
     59e:	eb a0       	ldd	r14, Y+35	; 0x23
     5a0:	fc a0       	ldd	r15, Y+36	; 0x24
     5a2:	8c 0d       	add	r24, r12
     5a4:	9d 1d       	adc	r25, r13
     5a6:	ae 1d       	adc	r26, r14
     5a8:	bf 1d       	adc	r27, r15
     5aa:	80 93 cb 03 	sts	0x03CB, r24
     5ae:	90 93 cc 03 	sts	0x03CC, r25
     5b2:	a0 93 cd 03 	sts	0x03CD, r26
     5b6:	b0 93 ce 03 	sts	0x03CE, r27
				}

				accOffsetXSum += accX;
     5ba:	80 91 0e 04 	lds	r24, 0x040E
     5be:	90 91 0f 04 	lds	r25, 0x040F
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	90 93 23 04 	sts	0x0423, r25
     5ca:	80 93 22 04 	sts	0x0422, r24
				accOffsetYSum += accY;
     5ce:	80 91 10 04 	lds	r24, 0x0410
     5d2:	90 91 11 04 	lds	r25, 0x0411
     5d6:	86 0f       	add	r24, r22
     5d8:	97 1f       	adc	r25, r23
     5da:	90 93 25 04 	sts	0x0425, r25
     5de:	80 93 24 04 	sts	0x0424, r24
				accOffsetZSum += accZ;
     5e2:	80 91 12 04 	lds	r24, 0x0412
     5e6:	90 91 13 04 	lds	r25, 0x0413
     5ea:	ed a0       	ldd	r14, Y+37	; 0x25
     5ec:	fe a0       	ldd	r15, Y+38	; 0x26
     5ee:	8e 0d       	add	r24, r14
     5f0:	9f 1d       	adc	r25, r15
     5f2:	90 93 27 04 	sts	0x0427, r25
     5f6:	80 93 26 04 	sts	0x0426, r24

				calibrationCycle++;
     5fa:	4f 5f       	subi	r20, 0xFF	; 255
     5fc:	5f 4f       	sbci	r21, 0xFF	; 255
     5fe:	50 93 2f 04 	sts	0x042F, r21
     602:	40 93 2e 04 	sts	0x042E, r20
     606:	04 ce       	rjmp	.-1016   	; 0x210 <main+0x52>
     608:	40 91 2e 04 	lds	r20, 0x042E
     60c:	50 91 2f 04 	lds	r21, 0x042F

			}

			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {
     610:	40 31       	cpi	r20, 0x10	; 16
     612:	51 05       	cpc	r21, r1
     614:	09 f4       	brne	.+2      	; 0x618 <main+0x45a>
     616:	2f c4       	rjmp	.+2142   	; 0xe76 <main+0xcb8>
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
     618:	80 91 19 02 	lds	r24, 0x0219
     61c:	88 23       	and	r24, r24
     61e:	09 f0       	breq	.+2      	; 0x622 <main+0x464>
     620:	f8 c3       	rjmp	.+2032   	; 0xe12 <main+0xc54>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
     622:	4e e4       	ldi	r20, 0x4E	; 78
     624:	20 32       	cpi	r18, 0x20	; 32
     626:	34 07       	cpc	r19, r20
     628:	20 f0       	brcs	.+8      	; 0x632 <main+0x474>
			delayCounter = 0;
     62a:	10 92 2b 04 	sts	0x042B, r1
     62e:	10 92 2a 04 	sts	0x042A, r1
			usartTransmit(CHARGE_ON);
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
     632:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <mirf_data_ready>
     636:	88 23       	and	r24, r24
     638:	09 f0       	breq	.+2      	; 0x63c <main+0x47e>
     63a:	61 c2       	rjmp	.+1218   	; 0xafe <main+0x940>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
     63c:	80 91 2c 04 	lds	r24, 0x042C
     640:	88 23       	and	r24, r24
     642:	09 f0       	breq	.+2      	; 0x646 <main+0x488>
     644:	43 c1       	rjmp	.+646    	; 0x8cc <main+0x70e>

			// compute velocities even if they aren't used...
			if(compute_left_vel) {
     646:	80 91 0f 02 	lds	r24, 0x020F
     64a:	88 23       	and	r24, r24
     64c:	a1 f0       	breq	.+40     	; 0x676 <main+0x4b8>
				last_left_vel = left_vel_sum>>2;
     64e:	80 91 dc 03 	lds	r24, 0x03DC
     652:	90 91 dd 03 	lds	r25, 0x03DD
     656:	96 95       	lsr	r25
     658:	87 95       	ror	r24
     65a:	96 95       	lsr	r25
     65c:	87 95       	ror	r24
     65e:	90 93 e1 03 	sts	0x03E1, r25
     662:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
     666:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
     66a:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
     66e:	10 92 dd 03 	sts	0x03DD, r1
     672:	10 92 dc 03 	sts	0x03DC, r1
			}

			if(compute_right_vel) {
     676:	80 91 10 02 	lds	r24, 0x0210
     67a:	88 23       	and	r24, r24
     67c:	a1 f0       	breq	.+40     	; 0x6a6 <main+0x4e8>
				last_right_vel = right_vel_sum>>2;
     67e:	80 91 de 03 	lds	r24, 0x03DE
     682:	90 91 df 03 	lds	r25, 0x03DF
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	90 93 e3 03 	sts	0x03E3, r25
     692:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
     696:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
     69a:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
     69e:	10 92 df 03 	sts	0x03DF, r1
     6a2:	10 92 de 03 	sts	0x03DE, r1
			}

			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     6a6:	80 91 ec 03 	lds	r24, 0x03EC
     6aa:	90 91 ed 03 	lds	r25, 0x03ED
     6ae:	90 93 ff 03 	sts	0x03FF, r25
     6b2:	80 93 fe 03 	sts	0x03FE, r24
			pwm_left_working = pwm_left_desired;
     6b6:	20 91 ee 03 	lds	r18, 0x03EE
     6ba:	30 91 ef 03 	lds	r19, 0x03EF
     6be:	30 93 01 04 	sts	0x0401, r19
     6c2:	20 93 00 04 	sts	0x0400, r18
            pwm_left_desired_to_control = pwm_left_desired;
     6c6:	30 93 db 03 	sts	0x03DB, r19
     6ca:	20 93 da 03 	sts	0x03DA, r18
            pwm_right_desired_to_control = pwm_right_desired;
     6ce:	90 93 d9 03 	sts	0x03D9, r25
     6d2:	80 93 d8 03 	sts	0x03D8, r24

			if(obstacleAvoidanceEnabled) {
     6d6:	80 91 30 04 	lds	r24, 0x0430
     6da:	88 23       	and	r24, r24
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <main+0x522>
     6de:	ad c5       	rjmp	.+2906   	; 0x123a <main+0x107c>
				obstacleAvoidance();
			}

			if(cliffAvoidanceEnabled) {
     6e0:	80 91 35 04 	lds	r24, 0x0435
     6e4:	88 23       	and	r24, r24
     6e6:	09 f0       	breq	.+2      	; 0x6ea <main+0x52c>
     6e8:	96 c5       	rjmp	.+2860   	; 0x1216 <main+0x1058>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
     6ea:	20 91 00 04 	lds	r18, 0x0400
     6ee:	30 91 01 04 	lds	r19, 0x0401
     6f2:	80 91 fe 03 	lds	r24, 0x03FE
     6f6:	90 91 ff 03 	lds	r25, 0x03FF

			update_pwm = 0;
     6fa:	10 92 02 04 	sts	0x0402, r1
			pwm_left = pwm_left_working;
     6fe:	30 93 e7 03 	sts	0x03E7, r19
     702:	20 93 e6 03 	sts	0x03E6, r18
			pwm_right = pwm_right_working;
     706:	90 93 e5 03 	sts	0x03E5, r25
     70a:	80 93 e4 03 	sts	0x03E4, r24

			if(pwm_right > 0) {
     70e:	18 16       	cp	r1, r24
     710:	19 06       	cpc	r1, r25
     712:	0c f0       	brlt	.+2      	; 0x716 <main+0x558>
     714:	eb c5       	rjmp	.+3030   	; 0x12ec <main+0x112e>
				OCR3A = (unsigned int)pwm_right;
     716:	90 93 99 00 	sts	0x0099, r25
     71a:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     71e:	80 91 e6 03 	lds	r24, 0x03E6
     722:	90 91 e7 03 	lds	r25, 0x03E7
     726:	18 16       	cp	r1, r24
     728:	19 06       	cpc	r1, r25
     72a:	0c f0       	brlt	.+2      	; 0x72e <main+0x570>
     72c:	d2 c5       	rjmp	.+2980   	; 0x12d2 <main+0x1114>
				OCR4A = (unsigned int)pwm_left;
     72e:	90 93 a9 00 	sts	0x00A9, r25
     732:	80 93 a8 00 	sts	0x00A8, r24
     736:	6c cd       	rjmp	.-1320   	; 0x210 <main+0x52>

		computeAngle();

		if(updateProx) {

			updateProx = 0;
     738:	10 92 9e 03 	sts	0x039E, r1
			if(startCalibration) {
     73c:	40 91 2d 04 	lds	r20, 0x042D
     740:	44 23       	and	r20, r20
     742:	09 f4       	brne	.+2      	; 0x746 <main+0x588>
     744:	cf c0       	rjmp	.+414    	; 0x8e4 <main+0x726>

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
     746:	80 91 35 03 	lds	r24, 0x0335
     74a:	90 91 36 03 	lds	r25, 0x0336
     74e:	20 91 37 03 	lds	r18, 0x0337
     752:	30 91 38 03 	lds	r19, 0x0338
     756:	82 1b       	sub	r24, r18
     758:	93 0b       	sbc	r25, r19
     75a:	90 93 66 03 	sts	0x0366, r25
     75e:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[0] < 0) {
     762:	97 fd       	sbrc	r25, 7
     764:	1e c7       	rjmp	.+3644   	; 0x15a2 <main+0x13e4>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
     766:	80 91 39 03 	lds	r24, 0x0339
     76a:	90 91 3a 03 	lds	r25, 0x033A
     76e:	20 91 3b 03 	lds	r18, 0x033B
     772:	30 91 3c 03 	lds	r19, 0x033C
     776:	82 1b       	sub	r24, r18
     778:	93 0b       	sbc	r25, r19
     77a:	90 93 68 03 	sts	0x0368, r25
     77e:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[1] < 0) {
     782:	97 fd       	sbrc	r25, 7
     784:	af c6       	rjmp	.+3422   	; 0x14e4 <main+0x1326>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
     786:	80 91 3d 03 	lds	r24, 0x033D
     78a:	90 91 3e 03 	lds	r25, 0x033E
     78e:	20 91 3f 03 	lds	r18, 0x033F
     792:	30 91 40 03 	lds	r19, 0x0340
     796:	82 1b       	sub	r24, r18
     798:	93 0b       	sbc	r25, r19
     79a:	90 93 6a 03 	sts	0x036A, r25
     79e:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[2] < 0) {
     7a2:	97 fd       	sbrc	r25, 7
     7a4:	9a c6       	rjmp	.+3380   	; 0x14da <main+0x131c>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
     7a6:	80 91 41 03 	lds	r24, 0x0341
     7aa:	90 91 42 03 	lds	r25, 0x0342
     7ae:	20 91 43 03 	lds	r18, 0x0343
     7b2:	30 91 44 03 	lds	r19, 0x0344
     7b6:	82 1b       	sub	r24, r18
     7b8:	93 0b       	sbc	r25, r19
     7ba:	90 93 6c 03 	sts	0x036C, r25
     7be:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[3] < 0) {
     7c2:	97 fd       	sbrc	r25, 7
     7c4:	99 c6       	rjmp	.+3378   	; 0x14f8 <main+0x133a>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
     7c6:	80 91 45 03 	lds	r24, 0x0345
     7ca:	90 91 46 03 	lds	r25, 0x0346
     7ce:	20 91 47 03 	lds	r18, 0x0347
     7d2:	30 91 48 03 	lds	r19, 0x0348
     7d6:	82 1b       	sub	r24, r18
     7d8:	93 0b       	sbc	r25, r19
     7da:	90 93 6e 03 	sts	0x036E, r25
     7de:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[4] < 0) {
     7e2:	97 fd       	sbrc	r25, 7
     7e4:	84 c6       	rjmp	.+3336   	; 0x14ee <main+0x1330>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
     7e6:	80 91 49 03 	lds	r24, 0x0349
     7ea:	90 91 4a 03 	lds	r25, 0x034A
     7ee:	20 91 4b 03 	lds	r18, 0x034B
     7f2:	30 91 4c 03 	lds	r19, 0x034C
     7f6:	82 1b       	sub	r24, r18
     7f8:	93 0b       	sbc	r25, r19
     7fa:	90 93 70 03 	sts	0x0370, r25
     7fe:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[5] < 0) {
     802:	97 fd       	sbrc	r25, 7
     804:	7e c6       	rjmp	.+3324   	; 0x1502 <main+0x1344>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
     806:	80 91 4d 03 	lds	r24, 0x034D
     80a:	90 91 4e 03 	lds	r25, 0x034E
     80e:	20 91 4f 03 	lds	r18, 0x034F
     812:	30 91 50 03 	lds	r19, 0x0350
     816:	82 1b       	sub	r24, r18
     818:	93 0b       	sbc	r25, r19
     81a:	90 93 72 03 	sts	0x0372, r25
     81e:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[6] < 0) {
     822:	97 fd       	sbrc	r25, 7
     824:	55 c6       	rjmp	.+3242   	; 0x14d0 <main+0x1312>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
     826:	80 91 51 03 	lds	r24, 0x0351
     82a:	90 91 52 03 	lds	r25, 0x0352
     82e:	20 91 53 03 	lds	r18, 0x0353
     832:	30 91 54 03 	lds	r19, 0x0354
     836:	82 1b       	sub	r24, r18
     838:	93 0b       	sbc	r25, r19
     83a:	90 93 74 03 	sts	0x0374, r25
     83e:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[7] < 0) {
     842:	97 fd       	sbrc	r25, 7
     844:	77 c6       	rjmp	.+3310   	; 0x1534 <main+0x1376>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
     846:	80 91 55 03 	lds	r24, 0x0355
     84a:	90 91 56 03 	lds	r25, 0x0356
     84e:	20 91 57 03 	lds	r18, 0x0357
     852:	30 91 58 03 	lds	r19, 0x0358
     856:	82 1b       	sub	r24, r18
     858:	93 0b       	sbc	r25, r19
     85a:	90 93 76 03 	sts	0x0376, r25
     85e:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[8] < 0) {
     862:	97 fd       	sbrc	r25, 7
     864:	62 c6       	rjmp	.+3268   	; 0x152a <main+0x136c>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
     866:	80 91 59 03 	lds	r24, 0x0359
     86a:	90 91 5a 03 	lds	r25, 0x035A
     86e:	20 91 5b 03 	lds	r18, 0x035B
     872:	30 91 5c 03 	lds	r19, 0x035C
     876:	82 1b       	sub	r24, r18
     878:	93 0b       	sbc	r25, r19
     87a:	90 93 78 03 	sts	0x0378, r25
     87e:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[9] < 0) {
     882:	97 fd       	sbrc	r25, 7
     884:	4d c6       	rjmp	.+3226   	; 0x1520 <main+0x1362>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
     886:	80 91 5d 03 	lds	r24, 0x035D
     88a:	90 91 5e 03 	lds	r25, 0x035E
     88e:	20 91 5f 03 	lds	r18, 0x035F
     892:	30 91 60 03 	lds	r19, 0x0360
     896:	82 1b       	sub	r24, r18
     898:	93 0b       	sbc	r25, r19
     89a:	90 93 7a 03 	sts	0x037A, r25
     89e:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[10] < 0) {
     8a2:	97 fd       	sbrc	r25, 7
     8a4:	38 c6       	rjmp	.+3184   	; 0x1516 <main+0x1358>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
     8a6:	80 91 61 03 	lds	r24, 0x0361
     8aa:	90 91 62 03 	lds	r25, 0x0362
     8ae:	20 91 63 03 	lds	r18, 0x0363
     8b2:	30 91 64 03 	lds	r19, 0x0364
     8b6:	82 1b       	sub	r24, r18
     8b8:	93 0b       	sbc	r25, r19
     8ba:	90 93 7c 03 	sts	0x037C, r25
     8be:	80 93 7b 03 	sts	0x037B, r24
				if(proximityResult[11] < 0) {
     8c2:	97 fd       	sbrc	r25, 7
     8c4:	17 c1       	rjmp	.+558    	; 0xaf4 <main+0x936>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
     8c6:	10 93 cf 03 	sts	0x03CF, r17
     8ca:	b1 cc       	rjmp	.-1694   	; 0x22e <main+0x70>
				}
			}

			update_pwm = 1;

		} else if(currentSelector == 1) {		// only horizontal speed control
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <main+0x714>
     8d0:	b7 c4       	rjmp	.+2414   	; 0x1240 <main+0x1082>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both speed control horizontal and vertical
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x71a>
     8d6:	6f c5       	rjmp	.+2782   	; 0x13b6 <main+0x11f8>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
     8d8:	80 91 02 04 	lds	r24, 0x0402
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <main+0x724>
     8e0:	97 cc       	rjmp	.-1746   	; 0x210 <main+0x52>
     8e2:	03 cf       	rjmp	.-506    	; 0x6ea <main+0x52c>
					proximityResult[11] = 0;
				}

			} else {

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
     8e4:	80 91 35 03 	lds	r24, 0x0335
     8e8:	90 91 36 03 	lds	r25, 0x0336
     8ec:	20 91 37 03 	lds	r18, 0x0337
     8f0:	30 91 38 03 	lds	r19, 0x0338
     8f4:	82 1b       	sub	r24, r18
     8f6:	93 0b       	sbc	r25, r19
     8f8:	20 91 7d 03 	lds	r18, 0x037D
     8fc:	30 91 7e 03 	lds	r19, 0x037E
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	90 93 66 03 	sts	0x0366, r25
     908:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[0] < 0) {
     90c:	97 fd       	sbrc	r25, 7
     90e:	44 c6       	rjmp	.+3208   	; 0x1598 <main+0x13da>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
     910:	80 91 39 03 	lds	r24, 0x0339
     914:	90 91 3a 03 	lds	r25, 0x033A
     918:	20 91 3b 03 	lds	r18, 0x033B
     91c:	30 91 3c 03 	lds	r19, 0x033C
     920:	82 1b       	sub	r24, r18
     922:	93 0b       	sbc	r25, r19
     924:	20 91 7f 03 	lds	r18, 0x037F
     928:	30 91 80 03 	lds	r19, 0x0380
     92c:	82 1b       	sub	r24, r18
     92e:	93 0b       	sbc	r25, r19
     930:	90 93 68 03 	sts	0x0368, r25
     934:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[1] < 0) {
     938:	97 fd       	sbrc	r25, 7
     93a:	29 c6       	rjmp	.+3154   	; 0x158e <main+0x13d0>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
     93c:	80 91 3d 03 	lds	r24, 0x033D
     940:	90 91 3e 03 	lds	r25, 0x033E
     944:	20 91 3f 03 	lds	r18, 0x033F
     948:	30 91 40 03 	lds	r19, 0x0340
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	20 91 81 03 	lds	r18, 0x0381
     954:	30 91 82 03 	lds	r19, 0x0382
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	90 93 6a 03 	sts	0x036A, r25
     960:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[2] < 0) {
     964:	97 fd       	sbrc	r25, 7
     966:	0e c6       	rjmp	.+3100   	; 0x1584 <main+0x13c6>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
     968:	80 91 41 03 	lds	r24, 0x0341
     96c:	90 91 42 03 	lds	r25, 0x0342
     970:	20 91 43 03 	lds	r18, 0x0343
     974:	30 91 44 03 	lds	r19, 0x0344
     978:	82 1b       	sub	r24, r18
     97a:	93 0b       	sbc	r25, r19
     97c:	20 91 83 03 	lds	r18, 0x0383
     980:	30 91 84 03 	lds	r19, 0x0384
     984:	82 1b       	sub	r24, r18
     986:	93 0b       	sbc	r25, r19
     988:	90 93 6c 03 	sts	0x036C, r25
     98c:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[3] < 0) {
     990:	97 fd       	sbrc	r25, 7
     992:	f3 c5       	rjmp	.+3046   	; 0x157a <main+0x13bc>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
     994:	80 91 45 03 	lds	r24, 0x0345
     998:	90 91 46 03 	lds	r25, 0x0346
     99c:	20 91 47 03 	lds	r18, 0x0347
     9a0:	30 91 48 03 	lds	r19, 0x0348
     9a4:	82 1b       	sub	r24, r18
     9a6:	93 0b       	sbc	r25, r19
     9a8:	20 91 85 03 	lds	r18, 0x0385
     9ac:	30 91 86 03 	lds	r19, 0x0386
     9b0:	82 1b       	sub	r24, r18
     9b2:	93 0b       	sbc	r25, r19
     9b4:	90 93 6e 03 	sts	0x036E, r25
     9b8:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[4] < 0) {
     9bc:	97 fd       	sbrc	r25, 7
     9be:	d8 c5       	rjmp	.+2992   	; 0x1570 <main+0x13b2>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
     9c0:	80 91 49 03 	lds	r24, 0x0349
     9c4:	90 91 4a 03 	lds	r25, 0x034A
     9c8:	20 91 4b 03 	lds	r18, 0x034B
     9cc:	30 91 4c 03 	lds	r19, 0x034C
     9d0:	82 1b       	sub	r24, r18
     9d2:	93 0b       	sbc	r25, r19
     9d4:	20 91 87 03 	lds	r18, 0x0387
     9d8:	30 91 88 03 	lds	r19, 0x0388
     9dc:	82 1b       	sub	r24, r18
     9de:	93 0b       	sbc	r25, r19
     9e0:	90 93 70 03 	sts	0x0370, r25
     9e4:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[5] < 0) {
     9e8:	97 fd       	sbrc	r25, 7
     9ea:	bd c5       	rjmp	.+2938   	; 0x1566 <main+0x13a8>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
     9ec:	80 91 4d 03 	lds	r24, 0x034D
     9f0:	90 91 4e 03 	lds	r25, 0x034E
     9f4:	20 91 4f 03 	lds	r18, 0x034F
     9f8:	30 91 50 03 	lds	r19, 0x0350
     9fc:	82 1b       	sub	r24, r18
     9fe:	93 0b       	sbc	r25, r19
     a00:	20 91 89 03 	lds	r18, 0x0389
     a04:	30 91 8a 03 	lds	r19, 0x038A
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	90 93 72 03 	sts	0x0372, r25
     a10:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[6] < 0) {
     a14:	97 fd       	sbrc	r25, 7
     a16:	a2 c5       	rjmp	.+2884   	; 0x155c <main+0x139e>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
     a18:	80 91 51 03 	lds	r24, 0x0351
     a1c:	90 91 52 03 	lds	r25, 0x0352
     a20:	20 91 53 03 	lds	r18, 0x0353
     a24:	30 91 54 03 	lds	r19, 0x0354
     a28:	82 1b       	sub	r24, r18
     a2a:	93 0b       	sbc	r25, r19
     a2c:	20 91 8b 03 	lds	r18, 0x038B
     a30:	30 91 8c 03 	lds	r19, 0x038C
     a34:	82 1b       	sub	r24, r18
     a36:	93 0b       	sbc	r25, r19
     a38:	90 93 74 03 	sts	0x0374, r25
     a3c:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[7] < 0) {
     a40:	97 fd       	sbrc	r25, 7
     a42:	87 c5       	rjmp	.+2830   	; 0x1552 <main+0x1394>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
     a44:	80 91 55 03 	lds	r24, 0x0355
     a48:	90 91 56 03 	lds	r25, 0x0356
     a4c:	20 91 57 03 	lds	r18, 0x0357
     a50:	30 91 58 03 	lds	r19, 0x0358
     a54:	82 1b       	sub	r24, r18
     a56:	93 0b       	sbc	r25, r19
     a58:	20 91 8d 03 	lds	r18, 0x038D
     a5c:	30 91 8e 03 	lds	r19, 0x038E
     a60:	82 1b       	sub	r24, r18
     a62:	93 0b       	sbc	r25, r19
     a64:	90 93 76 03 	sts	0x0376, r25
     a68:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[8] < 0) {
     a6c:	97 fd       	sbrc	r25, 7
     a6e:	6c c5       	rjmp	.+2776   	; 0x1548 <main+0x138a>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
     a70:	80 91 59 03 	lds	r24, 0x0359
     a74:	90 91 5a 03 	lds	r25, 0x035A
     a78:	20 91 5b 03 	lds	r18, 0x035B
     a7c:	30 91 5c 03 	lds	r19, 0x035C
     a80:	82 1b       	sub	r24, r18
     a82:	93 0b       	sbc	r25, r19
     a84:	20 91 8f 03 	lds	r18, 0x038F
     a88:	30 91 90 03 	lds	r19, 0x0390
     a8c:	82 1b       	sub	r24, r18
     a8e:	93 0b       	sbc	r25, r19
     a90:	90 93 78 03 	sts	0x0378, r25
     a94:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[9] < 0) {
     a98:	97 fd       	sbrc	r25, 7
     a9a:	51 c5       	rjmp	.+2722   	; 0x153e <main+0x1380>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
     a9c:	80 91 5d 03 	lds	r24, 0x035D
     aa0:	90 91 5e 03 	lds	r25, 0x035E
     aa4:	20 91 5f 03 	lds	r18, 0x035F
     aa8:	30 91 60 03 	lds	r19, 0x0360
     aac:	82 1b       	sub	r24, r18
     aae:	93 0b       	sbc	r25, r19
     ab0:	20 91 91 03 	lds	r18, 0x0391
     ab4:	30 91 92 03 	lds	r19, 0x0392
     ab8:	82 1b       	sub	r24, r18
     aba:	93 0b       	sbc	r25, r19
     abc:	90 93 7a 03 	sts	0x037A, r25
     ac0:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[10] < 0) {
     ac4:	97 fd       	sbrc	r25, 7
     ac6:	22 c5       	rjmp	.+2628   	; 0x150c <main+0x134e>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23] - proximityOffset[11];	// ambient - (ambient+reflected) - offset
     ac8:	80 91 61 03 	lds	r24, 0x0361
     acc:	90 91 62 03 	lds	r25, 0x0362
     ad0:	20 91 63 03 	lds	r18, 0x0363
     ad4:	30 91 64 03 	lds	r19, 0x0364
     ad8:	82 1b       	sub	r24, r18
     ada:	93 0b       	sbc	r25, r19
     adc:	20 91 93 03 	lds	r18, 0x0393
     ae0:	30 91 94 03 	lds	r19, 0x0394
     ae4:	82 1b       	sub	r24, r18
     ae6:	93 0b       	sbc	r25, r19
     ae8:	90 93 7c 03 	sts	0x037C, r25
     aec:	80 93 7b 03 	sts	0x037B, r24
				if(proximityResult[11] < 0) {
     af0:	97 ff       	sbrs	r25, 7
     af2:	e9 ce       	rjmp	.-558    	; 0x8c6 <main+0x708>
					proximityResult[11] = 0;
     af4:	10 92 7c 03 	sts	0x037C, r1
     af8:	10 92 7b 03 	sts	0x037B, r1
     afc:	e4 ce       	rjmp	.-568    	; 0x8c6 <main+0x708>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
     afe:	87 e0       	ldi	r24, 0x07	; 7
     b00:	60 e7       	ldi	r22, 0x70	; 112
     b02:	0e 94 65 0f 	call	0x1eca	; 0x1eca <mirf_config_register>

			mirf_get_data(rfData);
     b06:	8e e5       	ldi	r24, 0x5E	; 94
     b08:	94 e0       	ldi	r25, 0x04	; 4
     b0a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <mirf_get_data>
			flush_rx_fifo();
     b0e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <flush_rx_fifo>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     b12:	40 91 5e 04 	lds	r20, 0x045E
     b16:	44 23       	and	r20, r20
     b18:	71 f4       	brne	.+28     	; 0xb36 <main+0x978>
     b1a:	80 91 5f 04 	lds	r24, 0x045F
     b1e:	88 23       	and	r24, r24
     b20:	51 f4       	brne	.+20     	; 0xb36 <main+0x978>
     b22:	80 91 60 04 	lds	r24, 0x0460
     b26:	88 23       	and	r24, r24
     b28:	31 f4       	brne	.+12     	; 0xb36 <main+0x978>
     b2a:	80 91 61 04 	lds	r24, 0x0461
     b2e:	88 30       	cpi	r24, 0x08	; 8
     b30:	11 f4       	brne	.+4      	; 0xb36 <main+0x978>
     b32:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <main+0x19d2>
     b36:	60 91 62 04 	lds	r22, 0x0462
     b3a:	50 91 63 04 	lds	r21, 0x0463

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     b3e:	26 2f       	mov	r18, r22
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	2f 77       	andi	r18, 0x7F	; 127
     b44:	30 70       	andi	r19, 0x00	; 0
     b46:	30 93 06 04 	sts	0x0406, r19
     b4a:	20 93 05 04 	sts	0x0405, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     b4e:	85 2f       	mov	r24, r21
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8f 77       	andi	r24, 0x7F	; 127
     b54:	90 70       	andi	r25, 0x00	; 0
     b56:	90 93 04 04 	sts	0x0404, r25
     b5a:	80 93 03 04 	sts	0x0403, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
     b5e:	67 fd       	sbrc	r22, 7
     b60:	63 c5       	rjmp	.+2758   	; 0x1628 <main+0x146a>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	30 95       	com	r19
     b6c:	21 95       	neg	r18
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	30 93 ed 03 	sts	0x03ED, r19
     b74:	20 93 ec 03 	sts	0x03EC, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
     b78:	57 fd       	sbrc	r21, 7
     b7a:	4d c5       	rjmp	.+2714   	; 0x1616 <main+0x1458>
				pwm_left_desired = speedl<<2;
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	90 95       	com	r25
     b86:	81 95       	neg	r24
     b88:	9f 4f       	sbci	r25, 0xFF	; 255
     b8a:	90 93 ef 03 	sts	0x03EF, r25
     b8e:	80 93 ee 03 	sts	0x03EE, r24
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     b92:	52 e0       	ldi	r21, 0x02	; 2
     b94:	21 30       	cpi	r18, 0x01	; 1
     b96:	35 07       	cpc	r19, r21
     b98:	34 f0       	brlt	.+12     	; 0xba6 <main+0x9e8>
     b9a:	30 92 ed 03 	sts	0x03ED, r3
     b9e:	20 92 ec 03 	sts	0x03EC, r2
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	32 e0       	ldi	r19, 0x02	; 2
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     ba6:	a2 e0       	ldi	r26, 0x02	; 2
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	9a 07       	cpc	r25, r26
     bac:	34 f0       	brlt	.+12     	; 0xbba <main+0x9fc>
     bae:	30 92 ef 03 	sts	0x03EF, r3
     bb2:	20 92 ee 03 	sts	0x03EE, r2
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	92 e0       	ldi	r25, 0x02	; 2
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     bba:	be ef       	ldi	r27, 0xFE	; 254
     bbc:	20 30       	cpi	r18, 0x00	; 0
     bbe:	3b 07       	cpc	r19, r27
     bc0:	34 f4       	brge	.+12     	; 0xbce <main+0xa10>
     bc2:	e0 e0       	ldi	r30, 0x00	; 0
     bc4:	fe ef       	ldi	r31, 0xFE	; 254
     bc6:	f0 93 ed 03 	sts	0x03ED, r31
     bca:	e0 93 ec 03 	sts	0x03EC, r30
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     bce:	fe ef       	ldi	r31, 0xFE	; 254
     bd0:	80 30       	cpi	r24, 0x00	; 0
     bd2:	9f 07       	cpc	r25, r31
     bd4:	3c f4       	brge	.+14     	; 0xbe4 <main+0xa26>
     bd6:	c1 2c       	mov	r12, r1
     bd8:	be ef       	ldi	r27, 0xFE	; 254
     bda:	db 2e       	mov	r13, r27
     bdc:	d0 92 ef 03 	sts	0x03EF, r13
     be0:	c0 92 ee 03 	sts	0x03EE, r12


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	50 93 57 04 	sts	0x0457, r21
     bea:	40 93 56 04 	sts	0x0456, r20
     bee:	20 91 5f 04 	lds	r18, 0x045F
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	30 93 59 04 	sts	0x0459, r19
     bf8:	20 93 58 04 	sts	0x0458, r18
     bfc:	e0 91 60 04 	lds	r30, 0x0460
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	f0 93 5b 04 	sts	0x045B, r31
     c06:	e0 93 5a 04 	sts	0x045A, r30
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     c0a:	94 2f       	mov	r25, r20
     c0c:	88 27       	eor	r24, r24
     c0e:	84 1b       	sub	r24, r20
     c10:	95 0b       	sbc	r25, r21
     c12:	64 e6       	ldi	r22, 0x64	; 100
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	0e 94 05 24 	call	0x480a	; 0x480a <__udivmodhi4>
     c1a:	c6 2e       	mov	r12, r22
     c1c:	c0 94       	com	r12
     c1e:	c0 92 14 02 	sts	0x0214, r12
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     c22:	52 2f       	mov	r21, r18
     c24:	44 27       	eor	r20, r20
     c26:	42 1b       	sub	r20, r18
     c28:	53 0b       	sbc	r21, r19
     c2a:	ca 01       	movw	r24, r20
     c2c:	64 e6       	ldi	r22, 0x64	; 100
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 05 24 	call	0x480a	; 0x480a <__udivmodhi4>
     c34:	60 95       	com	r22
     c36:	60 93 16 02 	sts	0x0216, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     c3a:	3e 2f       	mov	r19, r30
     c3c:	22 27       	eor	r18, r18
     c3e:	2e 1b       	sub	r18, r30
     c40:	3f 0b       	sbc	r19, r31
     c42:	c9 01       	movw	r24, r18
     c44:	64 e6       	ldi	r22, 0x64	; 100
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 05 24 	call	0x480a	; 0x480a <__udivmodhi4>
     c4c:	60 95       	com	r22
     c4e:	60 93 15 02 	sts	0x0215, r22
			updateRedLed(pwm_red);
     c52:	8c 2d       	mov	r24, r12
     c54:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <updateRedLed>
			updateGreenLed(pwm_green);
     c58:	80 91 15 02 	lds	r24, 0x0215
     c5c:	0e 94 90 20 	call	0x4120	; 0x4120 <updateGreenLed>
			updateBlueLed(pwm_blue);
     c60:	80 91 16 02 	lds	r24, 0x0216
     c64:	0e 94 a4 20 	call	0x4148	; 0x4148 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     c68:	80 91 61 04 	lds	r24, 0x0461
     c6c:	80 ff       	sbrs	r24, 0
     c6e:	d1 c2       	rjmp	.+1442   	; 0x1212 <main+0x1054>
				LED_IR1_LOW;
     c70:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     c72:	81 ff       	sbrs	r24, 1
     c74:	cc c2       	rjmp	.+1432   	; 0x120e <main+0x1050>
				LED_IR2_LOW;
     c76:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     c78:	98 2f       	mov	r25, r24
     c7a:	82 ff       	sbrs	r24, 2
     c7c:	a9 c2       	rjmp	.+1362   	; 0x11d0 <main+0x1012>
				irEnabled = 1;
     c7e:	10 93 19 02 	sts	0x0219, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     c82:	94 fd       	sbrc	r25, 4
     c84:	a9 c2       	rjmp	.+1362   	; 0x11d8 <main+0x101a>
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     c86:	96 ff       	sbrs	r25, 6
     c88:	a0 c2       	rjmp	.+1344   	; 0x11ca <main+0x100c>
				obstacleAvoidanceEnabled = 1;
     c8a:	10 93 30 04 	sts	0x0430, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     c8e:	88 0f       	add	r24, r24
     c90:	88 0b       	sbc	r24, r24
     c92:	81 23       	and	r24, r17
     c94:	80 93 35 04 	sts	0x0435, r24
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
     c98:	80 91 64 04 	lds	r24, 0x0464
     c9c:	80 ff       	sbrs	r24, 0
     c9e:	8f c2       	rjmp	.+1310   	; 0x11be <main+0x1000>
					GRREEN_LED0_ON;
     ca0:	80 91 0b 01 	lds	r24, 0x010B
     ca4:	8e 7f       	andi	r24, 0xFE	; 254
     ca6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
     caa:	80 91 64 04 	lds	r24, 0x0464
     cae:	81 ff       	sbrs	r24, 1
     cb0:	80 c2       	rjmp	.+1280   	; 0x11b2 <main+0xff4>
					GRREEN_LED1_ON;
     cb2:	80 91 0b 01 	lds	r24, 0x010B
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
     cbc:	80 91 64 04 	lds	r24, 0x0464
     cc0:	82 ff       	sbrs	r24, 2
     cc2:	71 c2       	rjmp	.+1250   	; 0x11a6 <main+0xfe8>
					GRREEN_LED2_ON;
     cc4:	80 91 0b 01 	lds	r24, 0x010B
     cc8:	8b 7f       	andi	r24, 0xFB	; 251
     cca:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
     cce:	80 91 64 04 	lds	r24, 0x0464
     cd2:	83 ff       	sbrs	r24, 3
     cd4:	66 c2       	rjmp	.+1228   	; 0x11a2 <main+0xfe4>
					GRREEN_LED3_ON;
     cd6:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GRREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
     cd8:	80 91 64 04 	lds	r24, 0x0464
     cdc:	84 ff       	sbrs	r24, 4
     cde:	5b c2       	rjmp	.+1206   	; 0x1196 <main+0xfd8>
					GRREEN_LED4_ON;
     ce0:	80 91 0b 01 	lds	r24, 0x010B
     ce4:	8f 7e       	andi	r24, 0xEF	; 239
     ce6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
     cea:	80 91 64 04 	lds	r24, 0x0464
     cee:	85 ff       	sbrs	r24, 5
     cf0:	4c c2       	rjmp	.+1176   	; 0x118a <main+0xfcc>
					GRREEN_LED5_ON;
     cf2:	80 91 0b 01 	lds	r24, 0x010B
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
     cfc:	80 91 64 04 	lds	r24, 0x0464
     d00:	86 ff       	sbrs	r24, 6
     d02:	ef c1       	rjmp	.+990    	; 0x10e2 <main+0xf24>
					GRREEN_LED6_ON;
     d04:	80 91 0b 01 	lds	r24, 0x010B
     d08:	8f 7b       	andi	r24, 0xBF	; 191
     d0a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
     d0e:	80 91 64 04 	lds	r24, 0x0464
     d12:	87 fd       	sbrc	r24, 7
     d14:	ef c1       	rjmp	.+990    	; 0x10f4 <main+0xf36>
					GRREEN_LED7_ON;
				} else {
					GRREEN_LED7_OFF;
     d16:	80 91 0b 01 	lds	r24, 0x010B
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	80 93 0b 01 	sts	0x010B, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
     d20:	80 91 13 02 	lds	r24, 0x0213
     d24:	80 93 46 04 	sts	0x0446, r24

			switch(packetId) {
     d28:	84 30       	cpi	r24, 0x04	; 4
     d2a:	09 f4       	brne	.+2      	; 0xd2e <main+0xb70>
     d2c:	ef c1       	rjmp	.+990    	; 0x110c <main+0xf4e>
     d2e:	85 30       	cpi	r24, 0x05	; 5
     d30:	08 f0       	brcs	.+2      	; 0xd34 <main+0xb76>
     d32:	e8 c2       	rjmp	.+1488   	; 0x1304 <main+0x1146>
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	09 f0       	breq	.+2      	; 0xd3a <main+0xb7c>
     d38:	66 c0       	rjmp	.+204    	; 0xe06 <main+0xc48>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     d3a:	90 91 65 03 	lds	r25, 0x0365
     d3e:	80 91 66 03 	lds	r24, 0x0366
     d42:	90 93 47 04 	sts	0x0447, r25
					ackPayload[2] = proximityResult[0]>>8;
     d46:	80 93 48 04 	sts	0x0448, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     d4a:	90 91 67 03 	lds	r25, 0x0367
     d4e:	80 91 68 03 	lds	r24, 0x0368
     d52:	90 93 49 04 	sts	0x0449, r25
					ackPayload[4] = proximityResult[1]>>8;
     d56:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     d5a:	90 91 69 03 	lds	r25, 0x0369
     d5e:	80 91 6a 03 	lds	r24, 0x036A
     d62:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[6] = proximityResult[2]>>8;
     d66:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     d6a:	90 91 6b 03 	lds	r25, 0x036B
     d6e:	80 91 6c 03 	lds	r24, 0x036C
     d72:	90 93 4d 04 	sts	0x044D, r25
					ackPayload[8] = proximityResult[3]>>8;
     d76:	80 93 4e 04 	sts	0x044E, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     d7a:	90 91 6f 03 	lds	r25, 0x036F
     d7e:	80 91 70 03 	lds	r24, 0x0370
     d82:	90 93 4f 04 	sts	0x044F, r25
					ackPayload[10] = proximityResult[5]>>8;
     d86:	80 93 50 04 	sts	0x0450, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     d8a:	90 91 71 03 	lds	r25, 0x0371
     d8e:	80 91 72 03 	lds	r24, 0x0372
     d92:	90 93 51 04 	sts	0x0451, r25
					ackPayload[12] = proximityResult[6]>>8;
     d96:	80 93 52 04 	sts	0x0452, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     d9a:	90 91 73 03 	lds	r25, 0x0373
     d9e:	80 91 74 03 	lds	r24, 0x0374
     da2:	90 93 53 04 	sts	0x0453, r25
					ackPayload[14] = proximityResult[7]>>8;
     da6:	80 93 54 04 	sts	0x0454, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     daa:	30 91 03 01 	lds	r19, 0x0103
     dae:	80 91 03 01 	lds	r24, 0x0103
     db2:	20 91 03 01 	lds	r18, 0x0103
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	80 72       	andi	r24, 0x20	; 32
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	95 95       	asr	r25
     dbe:	87 95       	ror	r24
     dc0:	95 95       	asr	r25
     dc2:	87 95       	ror	r24
     dc4:	95 95       	asr	r25
     dc6:	87 95       	ror	r24
     dc8:	95 95       	asr	r25
     dca:	87 95       	ror	r24
     dcc:	95 95       	asr	r25
     dce:	87 95       	ror	r24
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	22 1f       	adc	r18, r18
     dd6:	22 27       	eor	r18, r18
     dd8:	22 1f       	adc	r18, r18
     dda:	22 0f       	add	r18, r18
     ddc:	22 0f       	add	r18, r18
     dde:	28 2b       	or	r18, r24
     de0:	83 2f       	mov	r24, r19
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	80 71       	andi	r24, 0x10	; 16
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	95 95       	asr	r25
     dee:	87 95       	ror	r24
     df0:	95 95       	asr	r25
     df2:	87 95       	ror	r24
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	28 2b       	or	r18, r24
     dfa:	20 93 55 04 	sts	0x0455, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     dfe:	a4 e0       	ldi	r26, 0x04	; 4
     e00:	da 2e       	mov	r13, r26
     e02:	d0 92 13 02 	sts	0x0213, r13
					break;


			}

			writeAckPayload(ackPayload, 16);
     e06:	86 e4       	ldi	r24, 0x46	; 70
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	60 e1       	ldi	r22, 0x10	; 16
     e0c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <writeAckPayload>
     e10:	15 cc       	rjmp	.-2006   	; 0x63c <main+0x47e>

		}

		if(irEnabled) {

			ir_move = ir_remote_get_data();
     e12:	0e 94 7e 11 	call	0x22fc	; 0x22fc <ir_remote_get_data>
     e16:	80 93 09 04 	sts	0x0409, r24

			if(command_received) {
     e1a:	90 91 0a 04 	lds	r25, 0x040A
     e1e:	99 23       	and	r25, r25
     e20:	09 f4       	brne	.+2      	; 0xe24 <main+0xc66>
     e22:	5a c1       	rjmp	.+692    	; 0x10d8 <main+0xf1a>

				command_received = 0;
     e24:	10 92 0a 04 	sts	0x040A, r1

				switch(ir_move) {
     e28:	e8 2f       	mov	r30, r24
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	e5 33       	cpi	r30, 0x35	; 53
     e2e:	f1 05       	cpc	r31, r1
     e30:	08 f4       	brcc	.+2      	; 0xe34 <main+0xc76>
     e32:	03 c4       	rjmp	.+2054   	; 0x163a <main+0x147c>
					case 52:
						behaviorState = (behaviorState+1)%4;
						switch(behaviorState) {
							case 0:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
     e34:	20 91 ec 03 	lds	r18, 0x03EC
     e38:	30 91 ed 03 	lds	r19, 0x03ED
     e3c:	80 91 ee 03 	lds	r24, 0x03EE
     e40:	90 91 ef 03 	lds	r25, 0x03EF
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
     e44:	37 fd       	sbrc	r19, 7
     e46:	24 c4       	rjmp	.+2120   	; 0x1690 <main+0x14d2>
					speedr = pwm_right_desired >> 2;
     e48:	35 95       	asr	r19
     e4a:	27 95       	ror	r18
     e4c:	35 95       	asr	r19
     e4e:	27 95       	ror	r18
				} else {
					speedr = (-pwm_right_desired) >> 2;
     e50:	30 93 06 04 	sts	0x0406, r19
     e54:	20 93 05 04 	sts	0x0405, r18
				}
				if(pwm_left_desired >= 0) {
     e58:	97 fd       	sbrc	r25, 7
     e5a:	33 c1       	rjmp	.+614    	; 0x10c2 <main+0xf04>
					speedl = pwm_left_desired >> 2;
     e5c:	95 95       	asr	r25
     e5e:	87 95       	ror	r24
     e60:	95 95       	asr	r25
     e62:	87 95       	ror	r24
     e64:	90 93 04 04 	sts	0x0404, r25
     e68:	80 93 03 04 	sts	0x0403, r24
     e6c:	20 91 2a 04 	lds	r18, 0x042A
     e70:	30 91 2b 04 	lds	r19, 0x042B
     e74:	d6 cb       	rjmp	.-2132   	; 0x622 <main+0x464>

		} else if(calibrationCycle == CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				//proximityOffset[i]=(unsigned int)((float)proximitySum[i]/(float)calibrationCycle);
				proximityOffset[i] = proximitySum[i]>>4;
     e76:	80 91 9f 03 	lds	r24, 0x039F
     e7a:	90 91 a0 03 	lds	r25, 0x03A0
     e7e:	a0 91 a1 03 	lds	r26, 0x03A1
     e82:	b0 91 a2 03 	lds	r27, 0x03A2
     e86:	44 e0       	ldi	r20, 0x04	; 4
     e88:	b6 95       	lsr	r27
     e8a:	a7 95       	ror	r26
     e8c:	97 95       	ror	r25
     e8e:	87 95       	ror	r24
     e90:	4a 95       	dec	r20
     e92:	d1 f7       	brne	.-12     	; 0xe88 <main+0xcca>
     e94:	90 93 7e 03 	sts	0x037E, r25
     e98:	80 93 7d 03 	sts	0x037D, r24
     e9c:	80 91 a3 03 	lds	r24, 0x03A3
     ea0:	90 91 a4 03 	lds	r25, 0x03A4
     ea4:	a0 91 a5 03 	lds	r26, 0x03A5
     ea8:	b0 91 a6 03 	lds	r27, 0x03A6
     eac:	f4 e0       	ldi	r31, 0x04	; 4
     eae:	b6 95       	lsr	r27
     eb0:	a7 95       	ror	r26
     eb2:	97 95       	ror	r25
     eb4:	87 95       	ror	r24
     eb6:	fa 95       	dec	r31
     eb8:	d1 f7       	brne	.-12     	; 0xeae <main+0xcf0>
     eba:	90 93 80 03 	sts	0x0380, r25
     ebe:	80 93 7f 03 	sts	0x037F, r24
     ec2:	80 91 a7 03 	lds	r24, 0x03A7
     ec6:	90 91 a8 03 	lds	r25, 0x03A8
     eca:	a0 91 a9 03 	lds	r26, 0x03A9
     ece:	b0 91 aa 03 	lds	r27, 0x03AA
     ed2:	e4 e0       	ldi	r30, 0x04	; 4
     ed4:	b6 95       	lsr	r27
     ed6:	a7 95       	ror	r26
     ed8:	97 95       	ror	r25
     eda:	87 95       	ror	r24
     edc:	ea 95       	dec	r30
     ede:	d1 f7       	brne	.-12     	; 0xed4 <main+0xd16>
     ee0:	90 93 82 03 	sts	0x0382, r25
     ee4:	80 93 81 03 	sts	0x0381, r24
     ee8:	80 91 ab 03 	lds	r24, 0x03AB
     eec:	90 91 ac 03 	lds	r25, 0x03AC
     ef0:	a0 91 ad 03 	lds	r26, 0x03AD
     ef4:	b0 91 ae 03 	lds	r27, 0x03AE
     ef8:	74 e0       	ldi	r23, 0x04	; 4
     efa:	b6 95       	lsr	r27
     efc:	a7 95       	ror	r26
     efe:	97 95       	ror	r25
     f00:	87 95       	ror	r24
     f02:	7a 95       	dec	r23
     f04:	d1 f7       	brne	.-12     	; 0xefa <main+0xd3c>
     f06:	90 93 84 03 	sts	0x0384, r25
     f0a:	80 93 83 03 	sts	0x0383, r24
     f0e:	80 91 af 03 	lds	r24, 0x03AF
     f12:	90 91 b0 03 	lds	r25, 0x03B0
     f16:	a0 91 b1 03 	lds	r26, 0x03B1
     f1a:	b0 91 b2 03 	lds	r27, 0x03B2
     f1e:	64 e0       	ldi	r22, 0x04	; 4
     f20:	b6 95       	lsr	r27
     f22:	a7 95       	ror	r26
     f24:	97 95       	ror	r25
     f26:	87 95       	ror	r24
     f28:	6a 95       	dec	r22
     f2a:	d1 f7       	brne	.-12     	; 0xf20 <main+0xd62>
     f2c:	90 93 86 03 	sts	0x0386, r25
     f30:	80 93 85 03 	sts	0x0385, r24
     f34:	80 91 b3 03 	lds	r24, 0x03B3
     f38:	90 91 b4 03 	lds	r25, 0x03B4
     f3c:	a0 91 b5 03 	lds	r26, 0x03B5
     f40:	b0 91 b6 03 	lds	r27, 0x03B6
     f44:	54 e0       	ldi	r21, 0x04	; 4
     f46:	b6 95       	lsr	r27
     f48:	a7 95       	ror	r26
     f4a:	97 95       	ror	r25
     f4c:	87 95       	ror	r24
     f4e:	5a 95       	dec	r21
     f50:	d1 f7       	brne	.-12     	; 0xf46 <main+0xd88>
     f52:	90 93 88 03 	sts	0x0388, r25
     f56:	80 93 87 03 	sts	0x0387, r24
     f5a:	80 91 b7 03 	lds	r24, 0x03B7
     f5e:	90 91 b8 03 	lds	r25, 0x03B8
     f62:	a0 91 b9 03 	lds	r26, 0x03B9
     f66:	b0 91 ba 03 	lds	r27, 0x03BA
     f6a:	44 e0       	ldi	r20, 0x04	; 4
     f6c:	b6 95       	lsr	r27
     f6e:	a7 95       	ror	r26
     f70:	97 95       	ror	r25
     f72:	87 95       	ror	r24
     f74:	4a 95       	dec	r20
     f76:	d1 f7       	brne	.-12     	; 0xf6c <main+0xdae>
     f78:	90 93 8a 03 	sts	0x038A, r25
     f7c:	80 93 89 03 	sts	0x0389, r24
     f80:	80 91 bb 03 	lds	r24, 0x03BB
     f84:	90 91 bc 03 	lds	r25, 0x03BC
     f88:	a0 91 bd 03 	lds	r26, 0x03BD
     f8c:	b0 91 be 03 	lds	r27, 0x03BE
     f90:	f4 e0       	ldi	r31, 0x04	; 4
     f92:	b6 95       	lsr	r27
     f94:	a7 95       	ror	r26
     f96:	97 95       	ror	r25
     f98:	87 95       	ror	r24
     f9a:	fa 95       	dec	r31
     f9c:	d1 f7       	brne	.-12     	; 0xf92 <main+0xdd4>
     f9e:	90 93 8c 03 	sts	0x038C, r25
     fa2:	80 93 8b 03 	sts	0x038B, r24
     fa6:	40 91 c3 03 	lds	r20, 0x03C3
     faa:	50 91 c4 03 	lds	r21, 0x03C4
     fae:	60 91 c5 03 	lds	r22, 0x03C5
     fb2:	70 91 c6 03 	lds	r23, 0x03C6
     fb6:	e4 e0       	ldi	r30, 0x04	; 4
     fb8:	76 95       	lsr	r23
     fba:	67 95       	ror	r22
     fbc:	57 95       	ror	r21
     fbe:	47 95       	ror	r20
     fc0:	ea 95       	dec	r30
     fc2:	d1 f7       	brne	.-12     	; 0xfb8 <main+0xdfa>
     fc4:	80 91 c7 03 	lds	r24, 0x03C7
     fc8:	90 91 c8 03 	lds	r25, 0x03C8
     fcc:	a0 91 c9 03 	lds	r26, 0x03C9
     fd0:	b0 91 ca 03 	lds	r27, 0x03CA
     fd4:	74 e0       	ldi	r23, 0x04	; 4
     fd6:	b6 95       	lsr	r27
     fd8:	a7 95       	ror	r26
     fda:	97 95       	ror	r25
     fdc:	87 95       	ror	r24
     fde:	7a 95       	dec	r23
     fe0:	d1 f7       	brne	.-12     	; 0xfd6 <main+0xe18>
     fe2:	fc 01       	movw	r30, r24
     fe4:	80 91 cb 03 	lds	r24, 0x03CB
     fe8:	90 91 cc 03 	lds	r25, 0x03CC
     fec:	a0 91 cd 03 	lds	r26, 0x03CD
     ff0:	b0 91 ce 03 	lds	r27, 0x03CE
     ff4:	64 e0       	ldi	r22, 0x04	; 4
     ff6:	b6 95       	lsr	r27
     ff8:	a7 95       	ror	r26
     ffa:	97 95       	ror	r25
     ffc:	87 95       	ror	r24
     ffe:	6a 95       	dec	r22
    1000:	d1 f7       	brne	.-12     	; 0xff6 <main+0xe38>
    1002:	bc 01       	movw	r22, r24
    1004:	80 91 bf 03 	lds	r24, 0x03BF
    1008:	90 91 c0 03 	lds	r25, 0x03C0
    100c:	a0 91 c1 03 	lds	r26, 0x03C1
    1010:	b0 91 c2 03 	lds	r27, 0x03C2
    1014:	68 94       	set
    1016:	13 f8       	bld	r1, 3
    1018:	b6 95       	lsr	r27
    101a:	a7 95       	ror	r26
    101c:	97 95       	ror	r25
    101e:	87 95       	ror	r24
    1020:	16 94       	lsr	r1
    1022:	d1 f7       	brne	.-12     	; 0x1018 <main+0xe5a>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    1024:	80 50       	subi	r24, 0x00	; 0
    1026:	92 40       	sbci	r25, 0x02	; 2
    1028:	90 93 8e 03 	sts	0x038E, r25
    102c:	80 93 8d 03 	sts	0x038D, r24
    1030:	40 50       	subi	r20, 0x00	; 0
    1032:	52 40       	sbci	r21, 0x02	; 2
    1034:	50 93 90 03 	sts	0x0390, r21
    1038:	40 93 8f 03 	sts	0x038F, r20
    103c:	e0 50       	subi	r30, 0x00	; 0
    103e:	f2 40       	sbci	r31, 0x02	; 2
    1040:	f0 93 92 03 	sts	0x0392, r31
    1044:	e0 93 91 03 	sts	0x0391, r30
    1048:	60 50       	subi	r22, 0x00	; 0
    104a:	72 40       	sbci	r23, 0x02	; 2
    104c:	70 93 94 03 	sts	0x0394, r23
    1050:	60 93 93 03 	sts	0x0393, r22
			}

			accOffsetX = accOffsetXSum>>4;
    1054:	80 91 22 04 	lds	r24, 0x0422
    1058:	90 91 23 04 	lds	r25, 0x0423
    105c:	95 95       	asr	r25
    105e:	87 95       	ror	r24
    1060:	95 95       	asr	r25
    1062:	87 95       	ror	r24
    1064:	95 95       	asr	r25
    1066:	87 95       	ror	r24
    1068:	95 95       	asr	r25
    106a:	87 95       	ror	r24
    106c:	90 93 1b 04 	sts	0x041B, r25
    1070:	80 93 1a 04 	sts	0x041A, r24
			accOffsetY = accOffsetYSum>>4;
    1074:	80 91 24 04 	lds	r24, 0x0424
    1078:	90 91 25 04 	lds	r25, 0x0425
    107c:	95 95       	asr	r25
    107e:	87 95       	ror	r24
    1080:	95 95       	asr	r25
    1082:	87 95       	ror	r24
    1084:	95 95       	asr	r25
    1086:	87 95       	ror	r24
    1088:	95 95       	asr	r25
    108a:	87 95       	ror	r24
    108c:	90 93 1d 04 	sts	0x041D, r25
    1090:	80 93 1c 04 	sts	0x041C, r24
			accOffsetZ = accOffsetZSum>>4;
    1094:	80 91 26 04 	lds	r24, 0x0426
    1098:	90 91 27 04 	lds	r25, 0x0427
    109c:	95 95       	asr	r25
    109e:	87 95       	ror	r24
    10a0:	95 95       	asr	r25
    10a2:	87 95       	ror	r24
    10a4:	95 95       	asr	r25
    10a6:	87 95       	ror	r24
    10a8:	95 95       	asr	r25
    10aa:	87 95       	ror	r24
    10ac:	90 93 1f 04 	sts	0x041F, r25
    10b0:	80 93 1e 04 	sts	0x041E, r24

			startCalibration = 0;
    10b4:	10 92 2d 04 	sts	0x042D, r1
			calibrationCycle = 0;
    10b8:	10 92 2f 04 	sts	0x042F, r1
    10bc:	10 92 2e 04 	sts	0x042E, r1
    10c0:	ab ca       	rjmp	.-2730   	; 0x618 <main+0x45a>
					speedr = (-pwm_right_desired) >> 2;
				}
				if(pwm_left_desired >= 0) {
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
    10c2:	90 95       	com	r25
    10c4:	81 95       	neg	r24
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	95 95       	asr	r25
    10ca:	87 95       	ror	r24
    10cc:	95 95       	asr	r25
    10ce:	87 95       	ror	r24
    10d0:	90 93 04 04 	sts	0x0404, r25
    10d4:	80 93 03 04 	sts	0x0403, r24
    10d8:	20 91 2a 04 	lds	r18, 0x042A
    10dc:	30 91 2b 04 	lds	r19, 0x042B
    10e0:	a0 ca       	rjmp	.-2752   	; 0x622 <main+0x464>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GRREEN_LED6_ON;
				} else {
					GRREEN_LED6_OFF;
    10e2:	80 91 0b 01 	lds	r24, 0x010B
    10e6:	80 64       	ori	r24, 0x40	; 64
    10e8:	80 93 0b 01 	sts	0x010B, r24
				}

				if(bit_is_set(rfData[6], 7) ) {
    10ec:	80 91 64 04 	lds	r24, 0x0464
    10f0:	87 ff       	sbrs	r24, 7
    10f2:	11 ce       	rjmp	.-990    	; 0xd16 <main+0xb58>
					GRREEN_LED7_ON;
    10f4:	80 91 0b 01 	lds	r24, 0x010B
    10f8:	8f 77       	andi	r24, 0x7F	; 127
    10fa:	80 93 0b 01 	sts	0x010B, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    10fe:	80 91 13 02 	lds	r24, 0x0213
    1102:	80 93 46 04 	sts	0x0446, r24

			switch(packetId) {
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	09 f0       	breq	.+2      	; 0x110c <main+0xf4e>
    110a:	11 ce       	rjmp	.-990    	; 0xd2e <main+0xb70>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    110c:	90 91 6d 03 	lds	r25, 0x036D
    1110:	80 91 6e 03 	lds	r24, 0x036E
    1114:	90 93 47 04 	sts	0x0447, r25
					ackPayload[2] = proximityResult[4]>>8;
    1118:	80 93 48 04 	sts	0x0448, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    111c:	90 91 75 03 	lds	r25, 0x0375
    1120:	80 91 76 03 	lds	r24, 0x0376
    1124:	90 93 49 04 	sts	0x0449, r25
					ackPayload[4] = proximityResult[8]>>8;
    1128:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    112c:	90 91 77 03 	lds	r25, 0x0377
    1130:	80 91 78 03 	lds	r24, 0x0378
    1134:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[6] = proximityResult[9]>>8;
    1138:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    113c:	90 91 79 03 	lds	r25, 0x0379
    1140:	80 91 7a 03 	lds	r24, 0x037A
    1144:	90 93 4d 04 	sts	0x044D, r25
					ackPayload[8] = proximityResult[10]>>8;
    1148:	80 93 4e 04 	sts	0x044E, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    114c:	90 91 7b 03 	lds	r25, 0x037B
    1150:	80 91 7c 03 	lds	r24, 0x037C
    1154:	90 93 4f 04 	sts	0x044F, r25
					ackPayload[10] = proximityResult[11]>>8;
    1158:	80 93 50 04 	sts	0x0450, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    115c:	90 91 0e 04 	lds	r25, 0x040E
    1160:	80 91 0f 04 	lds	r24, 0x040F
    1164:	90 93 51 04 	sts	0x0451, r25
					ackPayload[12] = accX>>8;
    1168:	80 93 52 04 	sts	0x0452, r24
					ackPayload[13] = accY&0xFF;
    116c:	90 91 10 04 	lds	r25, 0x0410
    1170:	80 91 11 04 	lds	r24, 0x0411
    1174:	90 93 53 04 	sts	0x0453, r25
					ackPayload[14] = accY>>8;
    1178:	80 93 54 04 	sts	0x0454, r24
					ackPayload[15] = ir_move;
    117c:	80 91 09 04 	lds	r24, 0x0409
    1180:	80 93 55 04 	sts	0x0455, r24
					packetId = 5;
    1184:	00 93 13 02 	sts	0x0213, r16
					break;
    1188:	3e ce       	rjmp	.-900    	; 0xe06 <main+0xc48>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GRREEN_LED5_ON;
				} else {
					GRREEN_LED5_OFF;
    118a:	80 91 0b 01 	lds	r24, 0x010B
    118e:	80 62       	ori	r24, 0x20	; 32
    1190:	80 93 0b 01 	sts	0x010B, r24
    1194:	b3 cd       	rjmp	.-1178   	; 0xcfc <main+0xb3e>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GRREEN_LED4_ON;
				} else {
					GRREEN_LED4_OFF;
    1196:	80 91 0b 01 	lds	r24, 0x010B
    119a:	80 61       	ori	r24, 0x10	; 16
    119c:	80 93 0b 01 	sts	0x010B, r24
    11a0:	a4 cd       	rjmp	.-1208   	; 0xcea <main+0xb2c>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GRREEN_LED3_ON;
				} else {
					GRREEN_LED3_OFF;
    11a2:	a3 9a       	sbi	0x14, 3	; 20
    11a4:	99 cd       	rjmp	.-1230   	; 0xcd8 <main+0xb1a>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GRREEN_LED2_ON;
				} else {
					GRREEN_LED2_OFF;
    11a6:	80 91 0b 01 	lds	r24, 0x010B
    11aa:	84 60       	ori	r24, 0x04	; 4
    11ac:	80 93 0b 01 	sts	0x010B, r24
    11b0:	8e cd       	rjmp	.-1252   	; 0xcce <main+0xb10>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GRREEN_LED1_ON;
				} else {
					GRREEN_LED1_OFF;
    11b2:	80 91 0b 01 	lds	r24, 0x010B
    11b6:	82 60       	ori	r24, 0x02	; 2
    11b8:	80 93 0b 01 	sts	0x010B, r24
    11bc:	7f cd       	rjmp	.-1282   	; 0xcbc <main+0xafe>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GRREEN_LED0_ON;
				} else {
					GRREEN_LED0_OFF;
    11be:	80 91 0b 01 	lds	r24, 0x010B
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	80 93 0b 01 	sts	0x010B, r24
    11c8:	70 cd       	rjmp	.-1312   	; 0xcaa <main+0xaec>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    11ca:	10 92 30 04 	sts	0x0430, r1
    11ce:	5f cd       	rjmp	.-1346   	; 0xc8e <main+0xad0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    11d0:	10 92 19 02 	sts	0x0219, r1
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    11d4:	94 ff       	sbrs	r25, 4
    11d6:	57 cd       	rjmp	.-1362   	; 0xc86 <main+0xac8>
				startCalibration = 1;
    11d8:	10 93 2d 04 	sts	0x042D, r17
				calibrationCycle = 0;
    11dc:	10 92 2f 04 	sts	0x042F, r1
    11e0:	10 92 2e 04 	sts	0x042E, r1
				pwm_red = 0;
    11e4:	10 92 14 02 	sts	0x0214, r1
				pwm_green = 0;
    11e8:	10 92 15 02 	sts	0x0215, r1
				pwm_blue = 0;
    11ec:	10 92 16 02 	sts	0x0216, r1
				updateRedLed(pwm_red);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <updateRedLed>
				updateGreenLed(pwm_green);
    11f6:	80 91 15 02 	lds	r24, 0x0215
    11fa:	0e 94 90 20 	call	0x4120	; 0x4120 <updateGreenLed>
				updateBlueLed(pwm_blue);
    11fe:	80 91 16 02 	lds	r24, 0x0216
    1202:	0e 94 a4 20 	call	0x4148	; 0x4148 <updateBlueLed>
    1206:	80 91 61 04 	lds	r24, 0x0461
    120a:	98 2f       	mov	r25, r24
    120c:	3c cd       	rjmp	.-1416   	; 0xc86 <main+0xac8>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    120e:	45 9a       	sbi	0x08, 5	; 8
    1210:	33 cd       	rjmp	.-1434   	; 0xc78 <main+0xaba>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    1212:	44 9a       	sbi	0x08, 4	; 8
    1214:	2e cd       	rjmp	.-1444   	; 0xc72 <main+0xab4>
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
			}

			if(cliffAvoidanceEnabled) {
				if(cliffDetected()) {
    1216:	0e 94 19 20 	call	0x4032	; 0x4032 <cliffDetected>
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <main+0x1062>
    121e:	65 ca       	rjmp	.-2870   	; 0x6ea <main+0x52c>
					pwm_right_working = 0;
    1220:	10 92 ff 03 	sts	0x03FF, r1
    1224:	10 92 fe 03 	sts	0x03FE, r1
					pwm_left_working = 0;
    1228:	10 92 01 04 	sts	0x0401, r1
    122c:	10 92 00 04 	sts	0x0400, r1
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	60 ca       	rjmp	.-2880   	; 0x6fa <main+0x53c>
			pwm_left_working = pwm_left_desired;
            pwm_left_desired_to_control = pwm_left_desired;
            pwm_right_desired_to_control = pwm_right_desired;

			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
    123a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <obstacleAvoidance>
    123e:	50 ca       	rjmp	.-2912   	; 0x6e0 <main+0x522>

			update_pwm = 1;

		} else if(currentSelector == 1) {		// only horizontal speed control

			if(obstacleAvoidanceEnabled) {
    1240:	80 91 30 04 	lds	r24, 0x0430
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <main+0x108c>
    1248:	49 c4       	rjmp	.+2194   	; 0x1adc <main+0x191e>
				obstacleAvoidance();
			}

			if(cliffAvoidanceEnabled) {
    124a:	80 91 35 04 	lds	r24, 0x0435
    124e:	88 23       	and	r24, r24
    1250:	09 f0       	breq	.+2      	; 0x1254 <main+0x1096>
    1252:	36 c4       	rjmp	.+2156   	; 0x1ac0 <main+0x1902>
					pwm_left_desired = 0;
					pwm_right_desired = 0;
				}
			}

			if(compute_left_vel) {
    1254:	80 91 0f 02 	lds	r24, 0x020F
    1258:	88 23       	and	r24, r24
    125a:	09 f0       	breq	.+2      	; 0x125e <main+0x10a0>
    125c:	fc c3       	rjmp	.+2040   	; 0x1a56 <main+0x1898>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
    125e:	80 91 10 02 	lds	r24, 0x0210
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <main+0x10aa>
    1266:	38 cb       	rjmp	.-2448   	; 0x8d8 <main+0x71a>
				last_right_vel = right_vel_sum>>2;
    1268:	80 91 de 03 	lds	r24, 0x03DE
    126c:	90 91 df 03 	lds	r25, 0x03DF
    1270:	96 95       	lsr	r25
    1272:	87 95       	ror	r24
    1274:	96 95       	lsr	r25
    1276:	87 95       	ror	r24
    1278:	90 93 e3 03 	sts	0x03E3, r25
    127c:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
    1280:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
    1284:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
    1288:	10 92 df 03 	sts	0x03DF, r1
    128c:	10 92 de 03 	sts	0x03DE, r1

				pwm_right_working = pwm_right_desired;
    1290:	80 91 ec 03 	lds	r24, 0x03EC
    1294:	90 91 ed 03 	lds	r25, 0x03ED
    1298:	90 93 ff 03 	sts	0x03FF, r25
    129c:	80 93 fe 03 	sts	0x03FE, r24
				pwm_right_desired_to_control = pwm_right_desired;
    12a0:	90 93 d9 03 	sts	0x03D9, r25
    12a4:	80 93 d8 03 	sts	0x03D8, r24

				start_horizontal_speed_control_right(&pwm_right_working);
    12a8:	8e ef       	ldi	r24, 0xFE	; 254
    12aa:	93 e0       	ldi	r25, 0x03	; 3
    12ac:	0e 94 0c 14 	call	0x2818	; 0x2818 <start_horizontal_speed_control_right>

				pwm_right = pwm_right_working;
    12b0:	80 91 fe 03 	lds	r24, 0x03FE
    12b4:	90 91 ff 03 	lds	r25, 0x03FF
    12b8:	90 93 e5 03 	sts	0x03E5, r25
    12bc:	80 93 e4 03 	sts	0x03E4, r24
				//} else {
				//	OCR3A = 0;
				//	OCR3B = 0;
				//}

				if(pwm_right > 0) {
    12c0:	18 16       	cp	r1, r24
    12c2:	19 06       	cpc	r1, r25
    12c4:	0c f0       	brlt	.+2      	; 0x12c8 <main+0x110a>
    12c6:	f8 c0       	rjmp	.+496    	; 0x14b8 <main+0x12fa>
				}

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
    12c8:	90 93 99 00 	sts	0x0099, r25
    12cc:	80 93 98 00 	sts	0x0098, r24
    12d0:	03 cb       	rjmp	.-2554   	; 0x8d8 <main+0x71a>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <main+0x111a>
    12d6:	0e c4       	rjmp	.+2076   	; 0x1af4 <main+0x1936>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
    12d8:	10 92 a9 00 	sts	0x00A9, r1
    12dc:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
    12e0:	10 92 ab 00 	sts	0x00AB, r1
    12e4:	10 92 aa 00 	sts	0x00AA, r1
    12e8:	0c 94 08 01 	jmp	0x210	; 0x210 <main+0x52>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <main+0x1134>
    12f0:	f8 c3       	rjmp	.+2032   	; 0x1ae2 <main+0x1924>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
    12f2:	10 92 99 00 	sts	0x0099, r1
    12f6:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
    12fa:	10 92 9b 00 	sts	0x009B, r1
    12fe:	10 92 9a 00 	sts	0x009A, r1
    1302:	0d ca       	rjmp	.-3046   	; 0x71e <main+0x560>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    1304:	85 30       	cpi	r24, 0x05	; 5
    1306:	09 f4       	brne	.+2      	; 0x130a <main+0x114c>
    1308:	49 c3       	rjmp	.+1682   	; 0x199c <main+0x17de>
    130a:	86 30       	cpi	r24, 0x06	; 6
    130c:	09 f0       	breq	.+2      	; 0x1310 <main+0x1152>
    130e:	7b cd       	rjmp	.-1290   	; 0xe06 <main+0xc48>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    1310:	80 91 45 03 	lds	r24, 0x0345
    1314:	90 91 46 03 	lds	r25, 0x0346
    1318:	80 93 47 04 	sts	0x0447, r24
					ackPayload[2] = proximityValue[8]>>8;
    131c:	80 91 45 03 	lds	r24, 0x0345
    1320:	90 91 46 03 	lds	r25, 0x0346
    1324:	90 93 48 04 	sts	0x0448, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    1328:	80 91 55 03 	lds	r24, 0x0355
    132c:	90 91 56 03 	lds	r25, 0x0356
    1330:	80 93 49 04 	sts	0x0449, r24
					ackPayload[4] = proximityValue[16]>>8;
    1334:	80 91 55 03 	lds	r24, 0x0355
    1338:	90 91 56 03 	lds	r25, 0x0356
    133c:	90 93 4a 04 	sts	0x044A, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    1340:	80 91 59 03 	lds	r24, 0x0359
    1344:	90 91 5a 03 	lds	r25, 0x035A
    1348:	80 93 4b 04 	sts	0x044B, r24
					ackPayload[6] = proximityValue[18]>>8;
    134c:	80 91 59 03 	lds	r24, 0x0359
    1350:	90 91 5a 03 	lds	r25, 0x035A
    1354:	90 93 4c 04 	sts	0x044C, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    1358:	80 91 5d 03 	lds	r24, 0x035D
    135c:	90 91 5e 03 	lds	r25, 0x035E
    1360:	80 93 4d 04 	sts	0x044D, r24
					ackPayload[8] = proximityValue[20]>>8;
    1364:	80 91 5d 03 	lds	r24, 0x035D
    1368:	90 91 5e 03 	lds	r25, 0x035E
    136c:	90 93 4e 04 	sts	0x044E, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    1370:	80 91 61 03 	lds	r24, 0x0361
    1374:	90 91 62 03 	lds	r25, 0x0362
    1378:	80 93 4f 04 	sts	0x044F, r24
					ackPayload[10] = proximityValue[22]>>8;
    137c:	80 91 61 03 	lds	r24, 0x0361
    1380:	90 91 62 03 	lds	r25, 0x0362
    1384:	90 93 50 04 	sts	0x0450, r25
					ackPayload[11] = accZ&0xFF;
    1388:	90 91 12 04 	lds	r25, 0x0412
    138c:	80 91 13 04 	lds	r24, 0x0413
    1390:	90 93 51 04 	sts	0x0451, r25
					ackPayload[12] = accZ>>8;
    1394:	80 93 52 04 	sts	0x0452, r24
					ackPayload[13] = batteryLevel&0xFF;
    1398:	90 91 99 03 	lds	r25, 0x0399
    139c:	80 91 9a 03 	lds	r24, 0x039A
    13a0:	90 93 53 04 	sts	0x0453, r25
					ackPayload[14] = batteryLevel>>8;
    13a4:	80 93 54 04 	sts	0x0454, r24
					ackPayload[15] = 0;
    13a8:	10 92 55 04 	sts	0x0455, r1
					packetId = 3;
    13ac:	e3 e0       	ldi	r30, 0x03	; 3
    13ae:	fe 2e       	mov	r15, r30
    13b0:	f0 92 13 02 	sts	0x0213, r15
					break;
    13b4:	28 cd       	rjmp	.-1456   	; 0xe06 <main+0xc48>
					OCR3B = (unsigned int)(-pwm_right);
				}
			}
*/

			if(obstacleAvoidanceEnabled) {
    13b6:	80 91 30 04 	lds	r24, 0x0430
    13ba:	88 23       	and	r24, r24
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <main+0x1202>
    13be:	b1 c3       	rjmp	.+1890   	; 0x1b22 <main+0x1964>
				obstacleAvoidance();
			}

			if(cliffAvoidanceEnabled) {
    13c0:	80 91 35 04 	lds	r24, 0x0435
    13c4:	88 23       	and	r24, r24
    13c6:	09 f0       	breq	.+2      	; 0x13ca <main+0x120c>
    13c8:	9e c3       	rjmp	.+1852   	; 0x1b06 <main+0x1948>
					pwm_left_desired = 0;
					pwm_right_desired = 0;
				}
			}

			if(compute_left_vel) {
    13ca:	80 91 0f 02 	lds	r24, 0x020F
    13ce:	88 23       	and	r24, r24
    13d0:	c9 f1       	breq	.+114    	; 0x1444 <main+0x1286>
				last_left_vel = left_vel_sum>>2;
    13d2:	80 91 dc 03 	lds	r24, 0x03DC
    13d6:	90 91 dd 03 	lds	r25, 0x03DD
    13da:	96 95       	lsr	r25
    13dc:	87 95       	ror	r24
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	90 93 e1 03 	sts	0x03E1, r25
    13e6:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
    13ea:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
    13ee:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    13f2:	10 92 dd 03 	sts	0x03DD, r1
    13f6:	10 92 dc 03 	sts	0x03DC, r1

				pwm_left_working = pwm_left_desired;
    13fa:	80 91 ee 03 	lds	r24, 0x03EE
    13fe:	90 91 ef 03 	lds	r25, 0x03EF
    1402:	90 93 01 04 	sts	0x0401, r25
    1406:	80 93 00 04 	sts	0x0400, r24
				pwm_left_desired_to_control = pwm_left_desired;
    140a:	90 93 db 03 	sts	0x03DB, r25
    140e:	80 93 da 03 	sts	0x03DA, r24

				if(robotPosition == HORIZONTAL_POS) {
    1412:	80 91 1e 02 	lds	r24, 0x021E
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	09 f4       	brne	.+2      	; 0x141c <main+0x125e>
    141a:	90 c3       	rjmp	.+1824   	; 0x1b3c <main+0x197e>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	0e 94 82 11 	call	0x2304	; 0x2304 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
    1424:	80 91 00 04 	lds	r24, 0x0400
    1428:	90 91 01 04 	lds	r25, 0x0401
    142c:	90 93 e7 03 	sts	0x03E7, r25
    1430:	80 93 e6 03 	sts	0x03E6, r24

				if(pwm_left > 0) {
    1434:	18 16       	cp	r1, r24
    1436:	19 06       	cpc	r1, r25
    1438:	0c f0       	brlt	.+2      	; 0x143c <main+0x127e>
    143a:	85 c3       	rjmp	.+1802   	; 0x1b46 <main+0x1988>
					OCR4A = (unsigned int)pwm_left;
    143c:	90 93 a9 00 	sts	0x00A9, r25
    1440:	80 93 a8 00 	sts	0x00A8, r24
					OCR4A = 0;
					OCR4B = 0;
				}
			}

			if(compute_right_vel) {
    1444:	80 91 10 02 	lds	r24, 0x0210
    1448:	88 23       	and	r24, r24
    144a:	09 f4       	brne	.+2      	; 0x144e <main+0x1290>
    144c:	45 ca       	rjmp	.-2934   	; 0x8d8 <main+0x71a>
				last_right_vel = right_vel_sum>>2;
    144e:	80 91 de 03 	lds	r24, 0x03DE
    1452:	90 91 df 03 	lds	r25, 0x03DF
    1456:	96 95       	lsr	r25
    1458:	87 95       	ror	r24
    145a:	96 95       	lsr	r25
    145c:	87 95       	ror	r24
    145e:	90 93 e3 03 	sts	0x03E3, r25
    1462:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
    1466:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
    146a:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
    146e:	10 92 df 03 	sts	0x03DF, r1
    1472:	10 92 de 03 	sts	0x03DE, r1

				pwm_right_working = pwm_right_desired;
    1476:	80 91 ec 03 	lds	r24, 0x03EC
    147a:	90 91 ed 03 	lds	r25, 0x03ED
    147e:	90 93 ff 03 	sts	0x03FF, r25
    1482:	80 93 fe 03 	sts	0x03FE, r24
				pwm_right_desired_to_control = pwm_right_desired;
    1486:	90 93 d9 03 	sts	0x03D9, r25
    148a:	80 93 d8 03 	sts	0x03D8, r24

				if(robotPosition == HORIZONTAL_POS) {
    148e:	80 91 1e 02 	lds	r24, 0x021E
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	09 f4       	brne	.+2      	; 0x1498 <main+0x12da>
    1496:	4d c3       	rjmp	.+1690   	; 0x1b32 <main+0x1974>
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
    1498:	8e ef       	ldi	r24, 0xFE	; 254
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 c7 12 	call	0x258e	; 0x258e <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
    14a0:	80 91 fe 03 	lds	r24, 0x03FE
    14a4:	90 91 ff 03 	lds	r25, 0x03FF
    14a8:	90 93 e5 03 	sts	0x03E5, r25
    14ac:	80 93 e4 03 	sts	0x03E4, r24

				if(pwm_right > 0) {
    14b0:	18 16       	cp	r1, r24
    14b2:	19 06       	cpc	r1, r25
    14b4:	0c f4       	brge	.+2      	; 0x14b8 <main+0x12fa>
    14b6:	08 cf       	rjmp	.-496    	; 0x12c8 <main+0x110a>
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	09 f0       	breq	.+2      	; 0x14be <main+0x1300>
    14bc:	71 c3       	rjmp	.+1762   	; 0x1ba0 <main+0x19e2>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
    14be:	10 92 99 00 	sts	0x0099, r1
    14c2:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    14c6:	10 92 9b 00 	sts	0x009B, r1
    14ca:	10 92 9a 00 	sts	0x009A, r1
    14ce:	04 ca       	rjmp	.-3064   	; 0x8d8 <main+0x71a>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    14d0:	10 92 72 03 	sts	0x0372, r1
    14d4:	10 92 71 03 	sts	0x0371, r1
    14d8:	a6 c9       	rjmp	.-3252   	; 0x826 <main+0x668>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    14da:	10 92 6a 03 	sts	0x036A, r1
    14de:	10 92 69 03 	sts	0x0369, r1
    14e2:	61 c9       	rjmp	.-3390   	; 0x7a6 <main+0x5e8>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    14e4:	10 92 68 03 	sts	0x0368, r1
    14e8:	10 92 67 03 	sts	0x0367, r1
    14ec:	4c c9       	rjmp	.-3432   	; 0x786 <main+0x5c8>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    14ee:	10 92 6e 03 	sts	0x036E, r1
    14f2:	10 92 6d 03 	sts	0x036D, r1
    14f6:	77 c9       	rjmp	.-3346   	; 0x7e6 <main+0x628>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    14f8:	10 92 6c 03 	sts	0x036C, r1
    14fc:	10 92 6b 03 	sts	0x036B, r1
    1500:	62 c9       	rjmp	.-3388   	; 0x7c6 <main+0x608>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    1502:	10 92 70 03 	sts	0x0370, r1
    1506:	10 92 6f 03 	sts	0x036F, r1
    150a:	7d c9       	rjmp	.-3334   	; 0x806 <main+0x648>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    150c:	10 92 7a 03 	sts	0x037A, r1
    1510:	10 92 79 03 	sts	0x0379, r1
    1514:	d9 ca       	rjmp	.-2638   	; 0xac8 <main+0x90a>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    1516:	10 92 7a 03 	sts	0x037A, r1
    151a:	10 92 79 03 	sts	0x0379, r1
    151e:	c3 c9       	rjmp	.-3194   	; 0x8a6 <main+0x6e8>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    1520:	10 92 78 03 	sts	0x0378, r1
    1524:	10 92 77 03 	sts	0x0377, r1
    1528:	ae c9       	rjmp	.-3236   	; 0x886 <main+0x6c8>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    152a:	10 92 76 03 	sts	0x0376, r1
    152e:	10 92 75 03 	sts	0x0375, r1
    1532:	99 c9       	rjmp	.-3278   	; 0x866 <main+0x6a8>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    1534:	10 92 74 03 	sts	0x0374, r1
    1538:	10 92 73 03 	sts	0x0373, r1
    153c:	84 c9       	rjmp	.-3320   	; 0x846 <main+0x688>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    153e:	10 92 78 03 	sts	0x0378, r1
    1542:	10 92 77 03 	sts	0x0377, r1
    1546:	aa ca       	rjmp	.-2732   	; 0xa9c <main+0x8de>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    1548:	10 92 76 03 	sts	0x0376, r1
    154c:	10 92 75 03 	sts	0x0375, r1
    1550:	8f ca       	rjmp	.-2786   	; 0xa70 <main+0x8b2>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    1552:	10 92 74 03 	sts	0x0374, r1
    1556:	10 92 73 03 	sts	0x0373, r1
    155a:	74 ca       	rjmp	.-2840   	; 0xa44 <main+0x886>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    155c:	10 92 72 03 	sts	0x0372, r1
    1560:	10 92 71 03 	sts	0x0371, r1
    1564:	59 ca       	rjmp	.-2894   	; 0xa18 <main+0x85a>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    1566:	10 92 70 03 	sts	0x0370, r1
    156a:	10 92 6f 03 	sts	0x036F, r1
    156e:	3e ca       	rjmp	.-2948   	; 0x9ec <main+0x82e>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    1570:	10 92 6e 03 	sts	0x036E, r1
    1574:	10 92 6d 03 	sts	0x036D, r1
    1578:	23 ca       	rjmp	.-3002   	; 0x9c0 <main+0x802>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    157a:	10 92 6c 03 	sts	0x036C, r1
    157e:	10 92 6b 03 	sts	0x036B, r1
    1582:	08 ca       	rjmp	.-3056   	; 0x994 <main+0x7d6>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    1584:	10 92 6a 03 	sts	0x036A, r1
    1588:	10 92 69 03 	sts	0x0369, r1
    158c:	ed c9       	rjmp	.-3110   	; 0x968 <main+0x7aa>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    158e:	10 92 68 03 	sts	0x0368, r1
    1592:	10 92 67 03 	sts	0x0367, r1
    1596:	d2 c9       	rjmp	.-3164   	; 0x93c <main+0x77e>

			} else {

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    1598:	10 92 66 03 	sts	0x0366, r1
    159c:	10 92 65 03 	sts	0x0365, r1
    15a0:	b7 c9       	rjmp	.-3218   	; 0x910 <main+0x752>
			updateProx = 0;
			if(startCalibration) {

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    15a2:	10 92 66 03 	sts	0x0366, r1
    15a6:	10 92 65 03 	sts	0x0365, r1
    15aa:	dd c8       	rjmp	.-3654   	; 0x766 <main+0x5a8>

			if(proxUpdated) {

				proxUpdated = 0;

				if(calibrationCycle==0) {
    15ac:	19 a2       	std	Y+33, r1	; 0x21
    15ae:	1a a2       	std	Y+34, r1	; 0x22
    15b0:	1b a2       	std	Y+35, r1	; 0x23
    15b2:	1c a2       	std	Y+36, r1	; 0x24
    15b4:	1d 8e       	std	Y+29, r1	; 0x1d
    15b6:	1e 8e       	std	Y+30, r1	; 0x1e
    15b8:	1f 8e       	std	Y+31, r1	; 0x1f
    15ba:	18 a2       	std	Y+32, r1	; 0x20
    15bc:	19 8e       	std	Y+25, r1	; 0x19
    15be:	1a 8e       	std	Y+26, r1	; 0x1a
    15c0:	1b 8e       	std	Y+27, r1	; 0x1b
    15c2:	1c 8e       	std	Y+28, r1	; 0x1c
    15c4:	1d 8a       	std	Y+21, r1	; 0x15
    15c6:	1e 8a       	std	Y+22, r1	; 0x16
    15c8:	1f 8a       	std	Y+23, r1	; 0x17
    15ca:	18 8e       	std	Y+24, r1	; 0x18
    15cc:	19 8a       	std	Y+17, r1	; 0x11
    15ce:	1a 8a       	std	Y+18, r1	; 0x12
    15d0:	1b 8a       	std	Y+19, r1	; 0x13
    15d2:	1c 8a       	std	Y+20, r1	; 0x14
    15d4:	1d 86       	std	Y+13, r1	; 0x0d
    15d6:	1e 86       	std	Y+14, r1	; 0x0e
    15d8:	1f 86       	std	Y+15, r1	; 0x0f
    15da:	18 8a       	std	Y+16, r1	; 0x10
    15dc:	19 86       	std	Y+9, r1	; 0x09
    15de:	1a 86       	std	Y+10, r1	; 0x0a
    15e0:	1b 86       	std	Y+11, r1	; 0x0b
    15e2:	1c 86       	std	Y+12, r1	; 0x0c
    15e4:	1d 82       	std	Y+5, r1	; 0x05
    15e6:	1e 82       	std	Y+6, r1	; 0x06
    15e8:	1f 82       	std	Y+7, r1	; 0x07
    15ea:	18 86       	std	Y+8, r1	; 0x08
    15ec:	19 82       	std	Y+1, r1	; 0x01
    15ee:	1a 82       	std	Y+2, r1	; 0x02
    15f0:	1b 82       	std	Y+3, r1	; 0x03
    15f2:	1c 82       	std	Y+4, r1	; 0x04
    15f4:	44 24       	eor	r4, r4
    15f6:	55 24       	eor	r5, r5
    15f8:	32 01       	movw	r6, r4
    15fa:	88 24       	eor	r8, r8
    15fc:	99 24       	eor	r9, r9
    15fe:	54 01       	movw	r10, r8
    1600:	cc 24       	eor	r12, r12
    1602:	dd 24       	eor	r13, r13
    1604:	76 01       	movw	r14, r12
    1606:	1e a2       	std	Y+38, r1	; 0x26
    1608:	1d a2       	std	Y+37, r1	; 0x25
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	0c 94 c9 01 	jmp	0x392	; 0x392 <main+0x1d4>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	90 93 ef 03 	sts	0x03EF, r25
    1622:	80 93 ee 03 	sts	0x03EE, r24
    1626:	b5 ca       	rjmp	.-2710   	; 0xb92 <main+0x9d4>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	30 93 ed 03 	sts	0x03ED, r19
    1634:	20 93 ec 03 	sts	0x03EC, r18
    1638:	9f ca       	rjmp	.-2754   	; 0xb78 <main+0x9ba>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    163a:	ee 58       	subi	r30, 0x8E	; 142
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	05 90       	lpm	r0, Z+
    1644:	f4 91       	lpm	r31, Z+
    1646:	e0 2d       	mov	r30, r0
    1648:	19 94       	eijmp
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;

					case 52:
						behaviorState = (behaviorState+1)%4;
    164a:	80 91 0c 04 	lds	r24, 0x040C
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	83 70       	andi	r24, 0x03	; 3
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	80 93 0c 04 	sts	0x040C, r24
						switch(behaviorState) {
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	59 f0       	breq	.+22     	; 0x1674 <main+0x14b6>
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	09 f4       	brne	.+2      	; 0x1664 <main+0x14a6>
    1662:	7d c2       	rjmp	.+1274   	; 0x1b5e <main+0x19a0>
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	09 f4       	brne	.+2      	; 0x166a <main+0x14ac>
    1668:	dc c2       	rjmp	.+1464   	; 0x1c22 <main+0x1a64>
							case 0:
								obstacleAvoidanceEnabled = 0;
    166a:	10 92 30 04 	sts	0x0430, r1
								cliffAvoidanceEnabled = 0;
    166e:	10 92 35 04 	sts	0x0435, r1
    1672:	e0 cb       	rjmp	.-2112   	; 0xe34 <main+0xc76>
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    1674:	10 92 30 04 	sts	0x0430, r1
								cliffAvoidanceEnabled = 1;
    1678:	10 93 35 04 	sts	0x0435, r17
    167c:	20 91 ec 03 	lds	r18, 0x03EC
    1680:	30 91 ed 03 	lds	r19, 0x03ED
    1684:	80 91 ee 03 	lds	r24, 0x03EE
    1688:	90 91 ef 03 	lds	r25, 0x03EF
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
    168c:	37 ff       	sbrs	r19, 7
    168e:	dc cb       	rjmp	.-2120   	; 0xe48 <main+0xc8a>
					speedr = pwm_right_desired >> 2;
    1690:	30 95       	com	r19
    1692:	21 95       	neg	r18
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	d8 cb       	rjmp	.-2128   	; 0xe48 <main+0xc8a>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;

					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    1698:	10 92 30 04 	sts	0x0430, r1
    169c:	20 91 ec 03 	lds	r18, 0x03EC
    16a0:	30 91 ed 03 	lds	r19, 0x03ED
    16a4:	80 91 ee 03 	lds	r24, 0x03EE
    16a8:	90 91 ef 03 	lds	r25, 0x03EF
						break;
    16ac:	cb cb       	rjmp	.-2154   	; 0xe44 <main+0xc86>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    16ae:	10 93 30 04 	sts	0x0430, r17
    16b2:	20 91 ec 03 	lds	r18, 0x03EC
    16b6:	30 91 ed 03 	lds	r19, 0x03ED
    16ba:	80 91 ee 03 	lds	r24, 0x03EE
    16be:	90 91 ef 03 	lds	r25, 0x03EF
						break;
    16c2:	c0 cb       	rjmp	.-2176   	; 0xe44 <main+0xc86>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    16c4:	80 91 ee 03 	lds	r24, 0x03EE
    16c8:	90 91 ef 03 	lds	r25, 0x03EF
    16cc:	4e 97       	sbiw	r24, 0x1e	; 30
    16ce:	90 93 ef 03 	sts	0x03EF, r25
    16d2:	80 93 ee 03 	sts	0x03EE, r24
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    16d6:	ac ef       	ldi	r26, 0xFC	; 252
    16d8:	80 30       	cpi	r24, 0x00	; 0
    16da:	9a 07       	cpc	r25, r26
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <main+0x1522>
    16de:	24 c2       	rjmp	.+1096   	; 0x1b28 <main+0x196a>
    16e0:	e0 e0       	ldi	r30, 0x00	; 0
    16e2:	fc ef       	ldi	r31, 0xFC	; 252
    16e4:	f0 93 ef 03 	sts	0x03EF, r31
    16e8:	e0 93 ee 03 	sts	0x03EE, r30
    16ec:	20 91 ec 03 	lds	r18, 0x03EC
    16f0:	30 91 ed 03 	lds	r19, 0x03ED
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	9c ef       	ldi	r25, 0xFC	; 252
    16f8:	a5 cb       	rjmp	.-2230   	; 0xe44 <main+0xc86>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    16fa:	20 91 ec 03 	lds	r18, 0x03EC
    16fe:	30 91 ed 03 	lds	r19, 0x03ED
    1702:	80 91 e6 03 	lds	r24, 0x03E6
    1706:	90 91 e7 03 	lds	r25, 0x03E7
    170a:	28 17       	cp	r18, r24
    170c:	39 07       	cpc	r19, r25
    170e:	24 f0       	brlt	.+8      	; 0x1718 <main+0x155a>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    1710:	20 91 ee 03 	lds	r18, 0x03EE
    1714:	30 91 ef 03 	lds	r19, 0x03EF
						}
						pwm_right_desired -= STEP_MOTORS;
    1718:	2e 51       	subi	r18, 0x1E	; 30
    171a:	30 40       	sbci	r19, 0x00	; 0
    171c:	30 93 ed 03 	sts	0x03ED, r19
    1720:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired -= STEP_MOTORS;
    1724:	c9 01       	movw	r24, r18
    1726:	30 93 ef 03 	sts	0x03EF, r19
    172a:	20 93 ee 03 	sts	0x03EE, r18
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    172e:	fc ef       	ldi	r31, 0xFC	; 252
    1730:	20 30       	cpi	r18, 0x00	; 0
    1732:	3f 07       	cpc	r19, r31
    1734:	3c f4       	brge	.+14     	; 0x1744 <main+0x1586>
    1736:	c1 2c       	mov	r12, r1
    1738:	5c ef       	ldi	r21, 0xFC	; 252
    173a:	d5 2e       	mov	r13, r21
    173c:	d0 92 ed 03 	sts	0x03ED, r13
    1740:	c0 92 ec 03 	sts	0x03EC, r12
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    1744:	4c ef       	ldi	r20, 0xFC	; 252
    1746:	20 30       	cpi	r18, 0x00	; 0
    1748:	34 07       	cpc	r19, r20
    174a:	0c f0       	brlt	.+2      	; 0x174e <main+0x1590>
    174c:	ed c1       	rjmp	.+986    	; 0x1b28 <main+0x196a>
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	9c ef       	ldi	r25, 0xFC	; 252
    1752:	90 93 ef 03 	sts	0x03EF, r25
    1756:	80 93 ee 03 	sts	0x03EE, r24
    175a:	20 91 ec 03 	lds	r18, 0x03EC
    175e:	30 91 ed 03 	lds	r19, 0x03ED
    1762:	70 cb       	rjmp	.-2336   	; 0xe44 <main+0xc86>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    1764:	20 91 ec 03 	lds	r18, 0x03EC
    1768:	30 91 ed 03 	lds	r19, 0x03ED
    176c:	2e 51       	subi	r18, 0x1E	; 30
    176e:	30 40       	sbci	r19, 0x00	; 0
    1770:	30 93 ed 03 	sts	0x03ED, r19
    1774:	20 93 ec 03 	sts	0x03EC, r18
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1778:	fc ef       	ldi	r31, 0xFC	; 252
    177a:	20 30       	cpi	r18, 0x00	; 0
    177c:	3f 07       	cpc	r19, r31
    177e:	0c f0       	brlt	.+2      	; 0x1782 <main+0x15c4>
    1780:	f6 c1       	rjmp	.+1004   	; 0x1b6e <main+0x19b0>
    1782:	c1 2c       	mov	r12, r1
    1784:	8c ef       	ldi	r24, 0xFC	; 252
    1786:	d8 2e       	mov	r13, r24
    1788:	d0 92 ed 03 	sts	0x03ED, r13
    178c:	c0 92 ec 03 	sts	0x03EC, r12
    1790:	80 91 ee 03 	lds	r24, 0x03EE
    1794:	90 91 ef 03 	lds	r25, 0x03EF
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	31 e0       	ldi	r19, 0x01	; 1
    179c:	59 cb       	rjmp	.-2382   	; 0xe50 <main+0xc92>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    179e:	20 91 ec 03 	lds	r18, 0x03EC
    17a2:	30 91 ed 03 	lds	r19, 0x03ED
    17a6:	2e 51       	subi	r18, 0x1E	; 30
    17a8:	30 40       	sbci	r19, 0x00	; 0
    17aa:	30 93 ed 03 	sts	0x03ED, r19
    17ae:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired += STEP_MOTORS;
    17b2:	80 91 ee 03 	lds	r24, 0x03EE
    17b6:	90 91 ef 03 	lds	r25, 0x03EF
    17ba:	4e 96       	adiw	r24, 0x1e	; 30
    17bc:	90 93 ef 03 	sts	0x03EF, r25
    17c0:	80 93 ee 03 	sts	0x03EE, r24
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    17c4:	ac ef       	ldi	r26, 0xFC	; 252
    17c6:	20 30       	cpi	r18, 0x00	; 0
    17c8:	3a 07       	cpc	r19, r26
    17ca:	44 f4       	brge	.+16     	; 0x17dc <main+0x161e>
    17cc:	e0 e0       	ldi	r30, 0x00	; 0
    17ce:	fc ef       	ldi	r31, 0xFC	; 252
    17d0:	f0 93 ed 03 	sts	0x03ED, r31
    17d4:	e0 93 ec 03 	sts	0x03EC, r30
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3c ef       	ldi	r19, 0xFC	; 252
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    17dc:	f4 e0       	ldi	r31, 0x04	; 4
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	9f 07       	cpc	r25, r31
    17e2:	0c f4       	brge	.+2      	; 0x17e6 <main+0x1628>
    17e4:	2f cb       	rjmp	.-2466   	; 0xe44 <main+0xc86>
    17e6:	c1 2c       	mov	r12, r1
    17e8:	44 e0       	ldi	r20, 0x04	; 4
    17ea:	d4 2e       	mov	r13, r20
    17ec:	d0 92 ef 03 	sts	0x03EF, r13
    17f0:	c0 92 ee 03 	sts	0x03EE, r12
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	94 e0       	ldi	r25, 0x04	; 4
    17f8:	25 cb       	rjmp	.-2486   	; 0xe44 <main+0xc86>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    17fa:	20 91 ec 03 	lds	r18, 0x03EC
    17fe:	30 91 ed 03 	lds	r19, 0x03ED
    1802:	80 91 ee 03 	lds	r24, 0x03EE
    1806:	90 91 ef 03 	lds	r25, 0x03EF
    180a:	82 17       	cp	r24, r18
    180c:	93 07       	cpc	r25, r19
    180e:	0c f4       	brge	.+2      	; 0x1812 <main+0x1654>
    1810:	e5 c1       	rjmp	.+970    	; 0x1bdc <main+0x1a1e>
    1812:	9c 01       	movw	r18, r24
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    1814:	22 5e       	subi	r18, 0xE2	; 226
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	30 93 ed 03 	sts	0x03ED, r19
    181c:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired += STEP_MOTORS;
    1820:	4e 96       	adiw	r24, 0x1e	; 30
    1822:	90 93 ef 03 	sts	0x03EF, r25
    1826:	80 93 ee 03 	sts	0x03EE, r24
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    182a:	44 e0       	ldi	r20, 0x04	; 4
    182c:	21 30       	cpi	r18, 0x01	; 1
    182e:	34 07       	cpc	r19, r20
    1830:	34 f0       	brlt	.+12     	; 0x183e <main+0x1680>
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b4 e0       	ldi	r27, 0x04	; 4
    1836:	b0 93 ed 03 	sts	0x03ED, r27
    183a:	a0 93 ec 03 	sts	0x03EC, r26
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    183e:	b4 e0       	ldi	r27, 0x04	; 4
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	9b 07       	cpc	r25, r27
    1844:	0c f4       	brge	.+2      	; 0x1848 <main+0x168a>
    1846:	70 c1       	rjmp	.+736    	; 0x1b28 <main+0x196a>
    1848:	e0 e0       	ldi	r30, 0x00	; 0
    184a:	f4 e0       	ldi	r31, 0x04	; 4
    184c:	f0 93 ef 03 	sts	0x03EF, r31
    1850:	e0 93 ee 03 	sts	0x03EE, r30
    1854:	20 91 ec 03 	lds	r18, 0x03EC
    1858:	30 91 ed 03 	lds	r19, 0x03ED
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	94 e0       	ldi	r25, 0x04	; 4
    1860:	f1 ca       	rjmp	.-2590   	; 0xe44 <main+0xc86>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1862:	20 91 ec 03 	lds	r18, 0x03EC
    1866:	30 91 ed 03 	lds	r19, 0x03ED
    186a:	22 5e       	subi	r18, 0xE2	; 226
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	30 93 ed 03 	sts	0x03ED, r19
    1872:	20 93 ec 03 	sts	0x03EC, r18
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1876:	44 e0       	ldi	r20, 0x04	; 4
    1878:	21 30       	cpi	r18, 0x01	; 1
    187a:	34 07       	cpc	r19, r20
    187c:	0c f4       	brge	.+2      	; 0x1880 <main+0x16c2>
    187e:	77 c1       	rjmp	.+750    	; 0x1b6e <main+0x19b0>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	94 e0       	ldi	r25, 0x04	; 4
    1884:	90 93 ed 03 	sts	0x03ED, r25
    1888:	80 93 ec 03 	sts	0x03EC, r24
    188c:	80 91 ee 03 	lds	r24, 0x03EE
    1890:	90 91 ef 03 	lds	r25, 0x03EF
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	31 e0       	ldi	r19, 0x01	; 1
    1898:	db ca       	rjmp	.-2634   	; 0xe50 <main+0xc92>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    189a:	80 91 0b 04 	lds	r24, 0x040B
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	65 e0       	ldi	r22, 0x05	; 5
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	0e 94 19 24 	call	0x4832	; 0x4832 <__divmodhi4>
    18aa:	80 93 0b 04 	sts	0x040B, r24

						if(colorState==0) {		// turn on blue
    18ae:	88 23       	and	r24, r24
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <main+0x16f6>
    18b2:	96 c1       	rjmp	.+812    	; 0x1be0 <main+0x1a22>
							LED_IR1_HIGH;
    18b4:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    18b6:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    18b8:	10 92 16 02 	sts	0x0216, r1
							pwm_green = MAX_LEDS_PWM;
    18bc:	dd 24       	eor	r13, r13
    18be:	da 94       	dec	r13
    18c0:	d0 92 15 02 	sts	0x0215, r13
							pwm_red = MAX_LEDS_PWM;
    18c4:	d0 92 14 02 	sts	0x0214, r13
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}

						updateRedLed(pwm_red);
    18ca:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <updateRedLed>
						updateGreenLed(pwm_green);
    18ce:	80 91 15 02 	lds	r24, 0x0215
    18d2:	0e 94 90 20 	call	0x4120	; 0x4120 <updateGreenLed>
						updateBlueLed(pwm_blue);
    18d6:	80 91 16 02 	lds	r24, 0x0216
    18da:	0e 94 a4 20 	call	0x4148	; 0x4148 <updateBlueLed>
    18de:	20 91 ec 03 	lds	r18, 0x03EC
    18e2:	30 91 ed 03 	lds	r19, 0x03ED
    18e6:	80 91 ee 03 	lds	r24, 0x03EE
    18ea:	90 91 ef 03 	lds	r25, 0x03EF

	                  	break;
    18ee:	aa ca       	rjmp	.-2732   	; 0xe44 <main+0xc86>
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    18f0:	20 91 ec 03 	lds	r18, 0x03EC
    18f4:	30 91 ed 03 	lds	r19, 0x03ED
    18f8:	22 5e       	subi	r18, 0xE2	; 226
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	30 93 ed 03 	sts	0x03ED, r19
    1900:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired -= STEP_MOTORS;
    1904:	80 91 ee 03 	lds	r24, 0x03EE
    1908:	90 91 ef 03 	lds	r25, 0x03EF
    190c:	4e 97       	sbiw	r24, 0x1e	; 30
    190e:	90 93 ef 03 	sts	0x03EF, r25
    1912:	80 93 ee 03 	sts	0x03EE, r24
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1916:	44 e0       	ldi	r20, 0x04	; 4
    1918:	21 30       	cpi	r18, 0x01	; 1
    191a:	34 07       	cpc	r19, r20
    191c:	44 f0       	brlt	.+16     	; 0x192e <main+0x1770>
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b4 e0       	ldi	r27, 0x04	; 4
    1922:	b0 93 ed 03 	sts	0x03ED, r27
    1926:	a0 93 ec 03 	sts	0x03EC, r26
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	34 e0       	ldi	r19, 0x04	; 4
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    192e:	bc ef       	ldi	r27, 0xFC	; 252
    1930:	80 30       	cpi	r24, 0x00	; 0
    1932:	9b 07       	cpc	r25, r27
    1934:	0c f0       	brlt	.+2      	; 0x1938 <main+0x177a>
    1936:	86 ca       	rjmp	.-2804   	; 0xe44 <main+0xc86>
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	fc ef       	ldi	r31, 0xFC	; 252
    193c:	f0 93 ef 03 	sts	0x03EF, r31
    1940:	e0 93 ee 03 	sts	0x03EE, r30
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	9c ef       	ldi	r25, 0xFC	; 252
    1948:	7d ca       	rjmp	.-2822   	; 0xe44 <main+0xc86>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    194a:	10 92 ed 03 	sts	0x03ED, r1
    194e:	10 92 ec 03 	sts	0x03EC, r1
						pwm_left_desired = 0;
    1952:	10 92 ef 03 	sts	0x03EF, r1
    1956:	10 92 ee 03 	sts	0x03EE, r1
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	72 ca       	rjmp	.-2844   	; 0xe48 <main+0xc8a>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    1964:	80 91 ee 03 	lds	r24, 0x03EE
    1968:	90 91 ef 03 	lds	r25, 0x03EF
    196c:	4e 96       	adiw	r24, 0x1e	; 30
    196e:	90 93 ef 03 	sts	0x03EF, r25
    1972:	80 93 ee 03 	sts	0x03EE, r24
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1976:	f4 e0       	ldi	r31, 0x04	; 4
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	9f 07       	cpc	r25, r31
    197c:	0c f4       	brge	.+2      	; 0x1980 <main+0x17c2>
    197e:	d4 c0       	rjmp	.+424    	; 0x1b28 <main+0x196a>
    1980:	c1 2c       	mov	r12, r1
    1982:	94 e0       	ldi	r25, 0x04	; 4
    1984:	d9 2e       	mov	r13, r25
    1986:	d0 92 ef 03 	sts	0x03EF, r13
    198a:	c0 92 ee 03 	sts	0x03EE, r12
    198e:	20 91 ec 03 	lds	r18, 0x03EC
    1992:	30 91 ed 03 	lds	r19, 0x03ED
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	94 e0       	ldi	r25, 0x04	; 4
    199a:	54 ca       	rjmp	.-2904   	; 0xe44 <main+0xc86>
					ackPayload[15] = ir_move;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    199c:	80 91 35 03 	lds	r24, 0x0335
    19a0:	90 91 36 03 	lds	r25, 0x0336
    19a4:	80 93 47 04 	sts	0x0447, r24
					ackPayload[2] = proximityValue[0]>>8;
    19a8:	80 91 35 03 	lds	r24, 0x0335
    19ac:	90 91 36 03 	lds	r25, 0x0336
    19b0:	90 93 48 04 	sts	0x0448, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    19b4:	80 91 39 03 	lds	r24, 0x0339
    19b8:	90 91 3a 03 	lds	r25, 0x033A
    19bc:	80 93 49 04 	sts	0x0449, r24
					ackPayload[4] = proximityValue[2]>>8;
    19c0:	80 91 39 03 	lds	r24, 0x0339
    19c4:	90 91 3a 03 	lds	r25, 0x033A
    19c8:	90 93 4a 04 	sts	0x044A, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    19cc:	80 91 3d 03 	lds	r24, 0x033D
    19d0:	90 91 3e 03 	lds	r25, 0x033E
    19d4:	80 93 4b 04 	sts	0x044B, r24
					ackPayload[6] = proximityValue[4]>>8;
    19d8:	80 91 3d 03 	lds	r24, 0x033D
    19dc:	90 91 3e 03 	lds	r25, 0x033E
    19e0:	90 93 4c 04 	sts	0x044C, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    19e4:	80 91 41 03 	lds	r24, 0x0341
    19e8:	90 91 42 03 	lds	r25, 0x0342
    19ec:	80 93 4d 04 	sts	0x044D, r24
					ackPayload[8] = proximityValue[6]>>8;
    19f0:	80 91 41 03 	lds	r24, 0x0341
    19f4:	90 91 42 03 	lds	r25, 0x0342
    19f8:	90 93 4e 04 	sts	0x044E, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    19fc:	80 91 49 03 	lds	r24, 0x0349
    1a00:	90 91 4a 03 	lds	r25, 0x034A
    1a04:	80 93 4f 04 	sts	0x044F, r24
					ackPayload[10] = proximityValue[10]>>8;
    1a08:	80 91 49 03 	lds	r24, 0x0349
    1a0c:	90 91 4a 03 	lds	r25, 0x034A
    1a10:	90 93 50 04 	sts	0x0450, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    1a14:	80 91 4d 03 	lds	r24, 0x034D
    1a18:	90 91 4e 03 	lds	r25, 0x034E
    1a1c:	80 93 51 04 	sts	0x0451, r24
					ackPayload[12] = proximityValue[12]>>8;
    1a20:	80 91 4d 03 	lds	r24, 0x034D
    1a24:	90 91 4e 03 	lds	r25, 0x034E
    1a28:	90 93 52 04 	sts	0x0452, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    1a2c:	80 91 51 03 	lds	r24, 0x0351
    1a30:	90 91 52 03 	lds	r25, 0x0352
    1a34:	80 93 53 04 	sts	0x0453, r24
					ackPayload[14] = proximityValue[14]>>8;
    1a38:	80 91 51 03 	lds	r24, 0x0351
    1a3c:	90 91 52 03 	lds	r25, 0x0352
    1a40:	90 93 54 04 	sts	0x0454, r25
					ackPayload[15] = currentSelector;
    1a44:	80 91 2c 04 	lds	r24, 0x042C
    1a48:	80 93 55 04 	sts	0x0455, r24
					packetId = 6;
    1a4c:	f6 e0       	ldi	r31, 0x06	; 6
    1a4e:	ef 2e       	mov	r14, r31
    1a50:	e0 92 13 02 	sts	0x0213, r14
					break;
    1a54:	d8 c9       	rjmp	.-3152   	; 0xe06 <main+0xc48>
				}
			}

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;
    1a56:	80 91 dc 03 	lds	r24, 0x03DC
    1a5a:	90 91 dd 03 	lds	r25, 0x03DD
    1a5e:	96 95       	lsr	r25
    1a60:	87 95       	ror	r24
    1a62:	96 95       	lsr	r25
    1a64:	87 95       	ror	r24
    1a66:	90 93 e1 03 	sts	0x03E1, r25
    1a6a:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
    1a6e:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
    1a72:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    1a76:	10 92 dd 03 	sts	0x03DD, r1
    1a7a:	10 92 dc 03 	sts	0x03DC, r1

				pwm_left_working = pwm_left_desired;
    1a7e:	80 91 ee 03 	lds	r24, 0x03EE
    1a82:	90 91 ef 03 	lds	r25, 0x03EF
    1a86:	90 93 01 04 	sts	0x0401, r25
    1a8a:	80 93 00 04 	sts	0x0400, r24
				pwm_left_desired_to_control = pwm_left_desired;
    1a8e:	90 93 db 03 	sts	0x03DB, r25
    1a92:	80 93 da 03 	sts	0x03DA, r24

				start_horizontal_speed_control_left(&pwm_left_working);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	94 e0       	ldi	r25, 0x04	; 4
    1a9a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <start_horizontal_speed_control_left>

				pwm_left = pwm_left_working;
    1a9e:	80 91 00 04 	lds	r24, 0x0400
    1aa2:	90 91 01 04 	lds	r25, 0x0401
    1aa6:	90 93 e7 03 	sts	0x03E7, r25
    1aaa:	80 93 e6 03 	sts	0x03E6, r24
				//} else {
				//	OCR4A = 0;
				//	OCR4B = 0;
				//}

				if(pwm_left > 0) {
    1aae:	18 16       	cp	r1, r24
    1ab0:	19 06       	cpc	r1, r25
    1ab2:	0c f0       	brlt	.+2      	; 0x1ab6 <main+0x18f8>
    1ab4:	61 c0       	rjmp	.+194    	; 0x1b78 <main+0x19ba>
					OCR4A = (unsigned int)pwm_left;
    1ab6:	90 93 a9 00 	sts	0x00A9, r25
    1aba:	80 93 a8 00 	sts	0x00A8, r24
    1abe:	cf cb       	rjmp	.-2146   	; 0x125e <main+0x10a0>
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
			}

			if(cliffAvoidanceEnabled) {
				if(cliffDetected()) {
    1ac0:	0e 94 19 20 	call	0x4032	; 0x4032 <cliffDetected>
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <main+0x190c>
    1ac8:	c5 cb       	rjmp	.-2166   	; 0x1254 <main+0x1096>
					pwm_left_desired = 0;
    1aca:	10 92 ef 03 	sts	0x03EF, r1
    1ace:	10 92 ee 03 	sts	0x03EE, r1
					pwm_right_desired = 0;
    1ad2:	10 92 ed 03 	sts	0x03ED, r1
    1ad6:	10 92 ec 03 	sts	0x03EC, r1
    1ada:	bc cb       	rjmp	.-2184   	; 0x1254 <main+0x1096>
			update_pwm = 1;

		} else if(currentSelector == 1) {		// only horizontal speed control

			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
    1adc:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <obstacleAvoidance>
    1ae0:	b4 cb       	rjmp	.-2200   	; 0x124a <main+0x108c>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
    1ae2:	90 95       	com	r25
    1ae4:	81 95       	neg	r24
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	90 93 9b 00 	sts	0x009B, r25
    1aec:	80 93 9a 00 	sts	0x009A, r24
    1af0:	0c 94 8f 03 	jmp	0x71e	; 0x71e <main+0x560>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
    1af4:	90 95       	com	r25
    1af6:	81 95       	neg	r24
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	90 93 ab 00 	sts	0x00AB, r25
    1afe:	80 93 aa 00 	sts	0x00AA, r24
    1b02:	0c 94 08 01 	jmp	0x210	; 0x210 <main+0x52>
			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
			}

			if(cliffAvoidanceEnabled) {
				if(cliffDetected()) {
    1b06:	0e 94 19 20 	call	0x4032	; 0x4032 <cliffDetected>
    1b0a:	88 23       	and	r24, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <main+0x1952>
    1b0e:	5d cc       	rjmp	.-1862   	; 0x13ca <main+0x120c>
					pwm_left_desired = 0;
    1b10:	10 92 ef 03 	sts	0x03EF, r1
    1b14:	10 92 ee 03 	sts	0x03EE, r1
					pwm_right_desired = 0;
    1b18:	10 92 ed 03 	sts	0x03ED, r1
    1b1c:	10 92 ec 03 	sts	0x03EC, r1
    1b20:	54 cc       	rjmp	.-1880   	; 0x13ca <main+0x120c>
				}
			}
*/

			if(obstacleAvoidanceEnabled) {
				obstacleAvoidance();
    1b22:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <obstacleAvoidance>
    1b26:	4c cc       	rjmp	.-1896   	; 0x13c0 <main+0x1202>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1b28:	20 91 ec 03 	lds	r18, 0x03EC
    1b2c:	30 91 ed 03 	lds	r19, 0x03ED
    1b30:	89 c9       	rjmp	.-3310   	; 0xe44 <main+0xc86>
				pwm_right_working = pwm_right_desired;
				pwm_right_desired_to_control = pwm_right_desired;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_right(&pwm_right_working);
    1b32:	8e ef       	ldi	r24, 0xFE	; 254
    1b34:	93 e0       	ldi	r25, 0x03	; 3
    1b36:	0e 94 0c 14 	call	0x2818	; 0x2818 <start_horizontal_speed_control_right>
    1b3a:	b2 cc       	rjmp	.-1692   	; 0x14a0 <main+0x12e2>
				pwm_left_working = pwm_left_desired;
				pwm_left_desired_to_control = pwm_left_desired;

				if(robotPosition == HORIZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_horizontal_speed_control_left(&pwm_left_working);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	94 e0       	ldi	r25, 0x04	; 4
    1b40:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <start_horizontal_speed_control_left>
    1b44:	6f cc       	rjmp	.-1826   	; 0x1424 <main+0x1266>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <main+0x198e>
    1b4a:	5b c0       	rjmp	.+182    	; 0x1c02 <main+0x1a44>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1b4c:	10 92 a9 00 	sts	0x00A9, r1
    1b50:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    1b54:	10 92 ab 00 	sts	0x00AB, r1
    1b58:	10 92 aa 00 	sts	0x00AA, r1
    1b5c:	73 cc       	rjmp	.-1818   	; 0x1444 <main+0x1286>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    1b5e:	10 93 30 04 	sts	0x0430, r17
								cliffAvoidanceEnabled = 1;
    1b62:	10 93 35 04 	sts	0x0435, r17
    1b66:	20 91 ec 03 	lds	r18, 0x03EC
    1b6a:	30 91 ed 03 	lds	r19, 0x03ED
    1b6e:	80 91 ee 03 	lds	r24, 0x03EE
    1b72:	90 91 ef 03 	lds	r25, 0x03EF
								break;
    1b76:	66 c9       	rjmp	.-3380   	; 0xe44 <main+0xc86>
				//	OCR4B = 0;
				//}

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <main+0x19c0>
    1b7c:	4a c0       	rjmp	.+148    	; 0x1c12 <main+0x1a54>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1b7e:	10 92 a9 00 	sts	0x00A9, r1
    1b82:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    1b86:	10 92 ab 00 	sts	0x00AB, r1
    1b8a:	10 92 aa 00 	sts	0x00AA, r1
    1b8e:	67 cb       	rjmp	.-2354   	; 0x125e <main+0x10a0>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1b90:	60 91 62 04 	lds	r22, 0x0462
    1b94:	66 23       	and	r22, r22
    1b96:	69 f0       	breq	.+26     	; 0x1bb2 <main+0x19f4>
    1b98:	50 91 63 04 	lds	r21, 0x0463
    1b9c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <main+0x980>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
    1ba0:	90 95       	com	r25
    1ba2:	81 95       	neg	r24
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	90 93 9b 00 	sts	0x009B, r25
    1baa:	80 93 9a 00 	sts	0x009A, r24
    1bae:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <main+0x71a>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1bb2:	50 91 63 04 	lds	r21, 0x0463
    1bb6:	55 23       	and	r21, r21
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <main+0x19fe>
    1bba:	40 c0       	rjmp	.+128    	; 0x1c3c <main+0x1a7e>

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1bbc:	10 92 06 04 	sts	0x0406, r1
    1bc0:	10 92 05 04 	sts	0x0405, r1
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1bc4:	85 2f       	mov	r24, r21
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	8f 77       	andi	r24, 0x7F	; 127
    1bca:	90 70       	andi	r25, 0x00	; 0
    1bcc:	90 93 04 04 	sts	0x0404, r25
    1bd0:	80 93 03 04 	sts	0x0403, r24

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <main+0x9a4>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    1bdc:	c9 01       	movw	r24, r18
    1bde:	1a ce       	rjmp	.-972    	; 0x1814 <main+0x1656>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <main+0x1a28>
    1be4:	42 c0       	rjmp	.+132    	; 0x1c6a <main+0x1aac>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    1be6:	82 30       	cpi	r24, 0x02	; 2
    1be8:	a1 f1       	breq	.+104    	; 0x1c52 <main+0x1a94>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <main+0x1a32>
    1bee:	47 c0       	rjmp	.+142    	; 0x1c7e <main+0x1ac0>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	20 93 16 02 	sts	0x0216, r18
							pwm_green = MAX_LEDS_PWM;
    1bf6:	20 93 15 02 	sts	0x0215, r18
							pwm_red = MAX_LEDS_PWM;
    1bfa:	20 93 14 02 	sts	0x0214, r18
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	64 ce       	rjmp	.-824    	; 0x18ca <main+0x170c>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1c02:	90 95       	com	r25
    1c04:	81 95       	neg	r24
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	90 93 ab 00 	sts	0x00AB, r25
    1c0c:	80 93 aa 00 	sts	0x00AA, r24
    1c10:	19 cc       	rjmp	.-1998   	; 0x1444 <main+0x1286>
				//}

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1c12:	90 95       	com	r25
    1c14:	81 95       	neg	r24
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	90 93 ab 00 	sts	0x00AB, r25
    1c1c:	80 93 aa 00 	sts	0x00AA, r24
    1c20:	1e cb       	rjmp	.-2500   	; 0x125e <main+0x10a0>
							case 0:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    1c22:	80 93 30 04 	sts	0x0430, r24
								cliffAvoidanceEnabled = 0;
    1c26:	10 92 35 04 	sts	0x0435, r1
    1c2a:	20 91 ec 03 	lds	r18, 0x03EC
    1c2e:	30 91 ed 03 	lds	r19, 0x03ED
    1c32:	80 91 ee 03 	lds	r24, 0x03EE
    1c36:	90 91 ef 03 	lds	r25, 0x03EF
								break;
    1c3a:	04 c9       	rjmp	.-3576   	; 0xe44 <main+0xc86>
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    1c3c:	8c e3       	ldi	r24, 0x3C	; 60
    1c3e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <sleep>
    1c42:	60 91 62 04 	lds	r22, 0x0462
    1c46:	50 91 63 04 	lds	r21, 0x0463
    1c4a:	40 91 5e 04 	lds	r20, 0x045E
    1c4e:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <main+0x980>
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    1c52:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    1c54:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    1c56:	ff 24       	eor	r15, r15
    1c58:	fa 94       	dec	r15
    1c5a:	f0 92 16 02 	sts	0x0216, r15
							pwm_green = MAX_LEDS_PWM;
    1c5e:	f0 92 15 02 	sts	0x0215, r15
							pwm_red = 0;
    1c62:	10 92 14 02 	sts	0x0214, r1
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	30 ce       	rjmp	.-928    	; 0x18ca <main+0x170c>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    1c6a:	ee 24       	eor	r14, r14
    1c6c:	ea 94       	dec	r14
    1c6e:	e0 92 16 02 	sts	0x0216, r14
							pwm_green = 0;
    1c72:	10 92 15 02 	sts	0x0215, r1
							pwm_red = MAX_LEDS_PWM;
    1c76:	e0 92 14 02 	sts	0x0214, r14
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	26 ce       	rjmp	.-948    	; 0x18ca <main+0x170c>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    1c7e:	10 92 16 02 	sts	0x0216, r1
							pwm_green = 0;
    1c82:	10 92 15 02 	sts	0x0215, r1
							pwm_red = 0;
    1c86:	10 92 14 02 	sts	0x0214, r1
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	1e ce       	rjmp	.-964    	; 0x18ca <main+0x170c>

00001c8e <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c8e:	84 b1       	in	r24, 0x04	; 4
    1c90:	80 7f       	andi	r24, 0xF0	; 240
    1c92:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c94:	84 b1       	in	r24, 0x04	; 4
    1c96:	87 60       	ori	r24, 0x07	; 7
    1c98:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1c9a:	80 e5       	ldi	r24, 0x50	; 80
    1c9c:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1c9e:	8d b5       	in	r24, 0x2d	; 45
    1ca0:	81 60       	ori	r24, 0x01	; 1
    1ca2:	8d bd       	out	0x2d, r24	; 45

}
    1ca4:	08 95       	ret

00001ca6 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1ca6:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1ca8:	1d bc       	out	0x2d, r1	; 45
}
    1caa:	08 95       	ret

00001cac <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cac:	44 23       	and	r20, r20
    1cae:	79 f0       	breq	.+30     	; 0x1cce <SPI_ReadWrite_Block+0x22>
    1cb0:	a8 2f       	mov	r26, r24
    1cb2:	b9 2f       	mov	r27, r25
    1cb4:	e6 2f       	mov	r30, r22
    1cb6:	f7 2f       	mov	r31, r23
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1cba:	9d 91       	ld	r25, X+
    1cbc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1cbe:	0d b4       	in	r0, 0x2d	; 45
    1cc0:	07 fe       	sbrs	r0, 7
    1cc2:	fd cf       	rjmp	.-6      	; 0x1cbe <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1cc4:	9e b5       	in	r25, 0x2e	; 46
    1cc6:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	84 17       	cp	r24, r20
    1ccc:	b0 f3       	brcs	.-20     	; 0x1cba <SPI_ReadWrite_Block+0xe>
    1cce:	08 95       	ret

00001cd0 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cd0:	66 23       	and	r22, r22
    1cd2:	59 f0       	breq	.+22     	; 0x1cea <SPI_Write_Block+0x1a>
    1cd4:	e8 2f       	mov	r30, r24
    1cd6:	f9 2f       	mov	r31, r25
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1cda:	91 91       	ld	r25, Z+
    1cdc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1cde:	0d b4       	in	r0, 0x2d	; 45
    1ce0:	07 fe       	sbrs	r0, 7
    1ce2:	fd cf       	rjmp	.-6      	; 0x1cde <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	86 17       	cp	r24, r22
    1ce8:	c0 f3       	brcs	.-16     	; 0x1cda <SPI_Write_Block+0xa>
    1cea:	08 95       	ret

00001cec <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1cec:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1cee:	0d b4       	in	r0, 0x2d	; 45
    1cf0:	07 fe       	sbrs	r0, 7
    1cf2:	fd cf       	rjmp	.-6      	; 0x1cee <SPI_Write_Byte+0x2>
    return SPDR;
    1cf4:	8e b5       	in	r24, 0x2e	; 46
}
    1cf6:	08 95       	ret

00001cf8 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <mirf_config+0xa>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d06:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d08:	80 e2       	ldi	r24, 0x20	; 32
    1d0a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d0e:	8d e0       	ldi	r24, 0x0D	; 13
    1d10:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d14:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d16:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d18:	83 e2       	ldi	r24, 0x23	; 35
    1d1a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d24:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    1d2a:	84 e8       	ldi	r24, 0x84	; 132
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1d2e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1d30:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d32:	80 e3       	ldi	r24, 0x30	; 48
    1d34:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d38:	8e 01       	movw	r16, r28
    1d3a:	0f 5f       	subi	r16, 0xFF	; 255
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	c8 01       	movw	r24, r16
    1d40:	63 e0       	ldi	r22, 0x03	; 3
    1d42:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1d46:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1d48:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d4a:	8a e2       	ldi	r24, 0x2A	; 42
    1d4c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d50:	c8 01       	movw	r24, r16
    1d52:	63 e0       	ldi	r22, 0x03	; 3
    1d54:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1d58:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d5a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d5c:	81 e2       	ldi	r24, 0x21	; 33
    1d5e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d68:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d6c:	82 e2       	ldi	r24, 0x22	; 34
    1d6e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d78:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d7a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d7c:	84 e2       	ldi	r24, 0x24	; 36
    1d7e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d82:	82 e1       	ldi	r24, 0x12	; 18
    1d84:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d88:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d8a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d8c:	85 e2       	ldi	r24, 0x25	; 37
    1d8e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d92:	88 e2       	ldi	r24, 0x28	; 40
    1d94:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d98:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d9a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d9c:	81 e3       	ldi	r24, 0x31	; 49
    1d9e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1da2:	8d e0       	ldi	r24, 0x0D	; 13
    1da4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1da8:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1daa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1dac:	80 e5       	ldi	r24, 0x50	; 80
    1dae:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1db2:	83 e7       	ldi	r24, 0x73	; 115
    1db4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1db8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dbc:	8c e3       	ldi	r24, 0x3C	; 60
    1dbe:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1dc8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dcc:	8d e3       	ldi	r24, 0x3D	; 61
    1dce:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dd2:	86 e0       	ldi	r24, 0x06	; 6
    1dd4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1dd8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1dda:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ddc:	80 e2       	ldi	r24, 0x20	; 32
    1dde:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1de2:	8f e0       	ldi	r24, 0x0F	; 15
    1de4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1de8:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1dfa:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1dfc:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1dfe:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <mirf_config>
}
    1e02:	08 95       	ret

00001e04 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1e0a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1e0c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e0e:	8a e2       	ldi	r24, 0x2A	; 42
    1e10:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e14:	ce 01       	movw	r24, r28
    1e16:	65 e0       	ldi	r22, 0x05	; 5
    1e18:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1e1c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1e1e:	2c 9a       	sbi	0x05, 4	; 5
}
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1e2c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e2e:	80 e3       	ldi	r24, 0x30	; 48
    1e30:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e34:	ce 01       	movw	r24, r28
    1e36:	65 e0       	ldi	r22, 0x05	; 5
    1e38:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1e3c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1e44:	80 91 39 04 	lds	r24, 0x0439
    1e48:	88 23       	and	r24, r24
    1e4a:	11 f0       	breq	.+4      	; 0x1e50 <mirf_data_ready+0xc>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1e4e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1e50:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1e58:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1e5a:	80 74       	andi	r24, 0x40	; 64
    1e5c:	08 95       	ret

00001e5e <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1e68:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1e6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1e6c:	87 e1       	ldi	r24, 0x17	; 23
    1e6e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1e72:	be 01       	movw	r22, r28
    1e74:	6f 5f       	subi	r22, 0xFF	; 255
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	cb 01       	movw	r24, r22
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1e80:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e84:	81 70       	andi	r24, 0x01	; 1
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1e8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1e90:	82 ee       	ldi	r24, 0xE2	; 226
    1e92:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1e96:	28 9a       	sbi	0x05, 0	; 5

}
    1e98:	08 95       	ret

00001e9a <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1ea0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1ea2:	81 e6       	ldi	r24, 0x61	; 97
    1ea4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	be 01       	movw	r22, r28
    1eac:	4d e0       	ldi	r20, 0x0D	; 13
    1eae:	0e 94 56 0e 	call	0x1cac	; 0x1cac <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1eb2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1eb4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1eb6:	87 e2       	ldi	r24, 0x27	; 39
    1eb8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ebc:	80 e4       	ldi	r24, 0x40	; 64
    1ebe:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1ec2:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1ed4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ed6:	8f 71       	andi	r24, 0x1F	; 31
    1ed8:	80 62       	ori	r24, 0x20	; 32
    1eda:	69 83       	std	Y+1, r22	; 0x01
    1edc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ee0:	69 81       	ldd	r22, Y+1	; 0x01
    1ee2:	86 2f       	mov	r24, r22
    1ee4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1ee8:	28 9a       	sbi	0x05, 0	; 5
}
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1f02:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1f04:	8f 71       	andi	r24, 0x1F	; 31
    1f06:	49 83       	std	Y+1, r20	; 0x01
    1f08:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	b8 01       	movw	r22, r16
    1f10:	49 81       	ldd	r20, Y+1	; 0x01
    1f12:	0e 94 56 0e 	call	0x1cac	; 0x1cac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1f16:	28 9a       	sbi	0x05, 0	; 5
}
    1f18:	0f 90       	pop	r0
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	0f 92       	push	r0
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1f34:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f36:	8f 71       	andi	r24, 0x1F	; 31
    1f38:	80 62       	ori	r24, 0x20	; 32
    1f3a:	49 83       	std	Y+1, r20	; 0x01
    1f3c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1f40:	c8 01       	movw	r24, r16
    1f42:	49 81       	ldd	r20, Y+1	; 0x01
    1f44:	64 2f       	mov	r22, r20
    1f46:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1f4a:	28 9a       	sbi	0x05, 0	; 5
}
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	08 95       	ret

00001f58 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1f68:	80 91 39 04 	lds	r24, 0x0439
    1f6c:	88 23       	and	r24, r24
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <mirf_send+0x10>

    mirf_CE_lo;
    1f70:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 39 04 	sts	0x0439, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f78:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f7a:	80 e2       	ldi	r24, 0x20	; 32
    1f7c:	69 83       	std	Y+1, r22	; 0x01
    1f7e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f82:	8a e4       	ldi	r24, 0x4A	; 74
    1f84:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1f88:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1f8a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1f8c:	81 ee       	ldi	r24, 0xE1	; 225
    1f8e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1f92:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1f94:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1f96:	80 ea       	ldi	r24, 0xA0	; 160
    1f98:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	69 81       	ldd	r22, Y+1	; 0x01
    1fa0:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1fa4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1fa6:	2c 9a       	sbi	0x05, 4	; 5
}
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	18 2f       	mov	r17, r24
    1fc8:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1fca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1fcc:	81 ee       	ldi	r24, 0xE1	; 225
    1fce:	99 83       	std	Y+1, r25	; 0x01
    1fd0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    1fd4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1fd6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1fd8:	88 ea       	ldi	r24, 0xA8	; 168
    1fda:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1fde:	99 81       	ldd	r25, Y+1	; 0x01
    1fe0:	00 23       	and	r16, r16
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <writeAckPayload+0x48>
    1fe4:	61 2f       	mov	r22, r17
    1fe6:	79 2f       	mov	r23, r25
    1fe8:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1fea:	f7 01       	movw	r30, r14
    1fec:	81 91       	ld	r24, Z+
    1fee:	7f 01       	movw	r14, r30
    1ff0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1ff4:	8e 2d       	mov	r24, r14
    1ff6:	81 1b       	sub	r24, r17
    1ff8:	80 17       	cp	r24, r16
    1ffa:	b8 f3       	brcs	.-18     	; 0x1fea <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1ffc:	28 9a       	sbi	0x05, 0	; 5


}
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	08 95       	ret

0000200e <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    200e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2010:	81 ee       	ldi	r24, 0xE1	; 225
    2012:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SPI_Write_Byte>
    mirf_CSN_hi;
    2016:	28 9a       	sbi	0x05, 0	; 5

}
    2018:	08 95       	ret

0000201a <init_ir_remote_control>:
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    201a:	e8 e6       	ldi	r30, 0x68	; 104
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	82 60       	ori	r24, 0x02	; 2
    2022:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    2024:	ec e6       	ldi	r30, 0x6C	; 108
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	80 68       	ori	r24, 0x80	; 128
    202c:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    202e:	e0 eb       	ldi	r30, 0xB0	; 176
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	82 60       	ori	r24, 0x02	; 2
    2036:	80 83       	st	Z, r24

}
    2038:	08 95       	ret

0000203a <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
    2044:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2046:	80 91 19 02 	lds	r24, 0x0219
    204a:	88 23       	and	r24, r24
    204c:	21 f1       	breq	.+72     	; 0x2096 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    204e:	80 91 03 01 	lds	r24, 0x0103
    2052:	86 fd       	sbrc	r24, 6
    2054:	20 c0       	rjmp	.+64     	; 0x2096 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2056:	80 91 68 00 	lds	r24, 0x0068
    205a:	8d 7f       	andi	r24, 0xFD	; 253
    205c:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2060:	80 91 6c 00 	lds	r24, 0x006C
    2064:	8f 77       	andi	r24, 0x7F	; 127
    2066:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	80 93 1a 02 	sts	0x021A, r24
			OCR2A = 13;									// output compare register
    2070:	8d e0       	ldi	r24, 0x0D	; 13
    2072:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2076:	80 91 b1 00 	lds	r24, 0x00B1
    207a:	86 60       	ori	r24, 0x06	; 6
    207c:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2080:	80 91 70 00 	lds	r24, 0x0070
    2084:	82 60       	ori	r24, 0x02	; 2
    2086:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    208a:	10 92 2c 03 	sts	0x032C, r1
    208e:	10 92 2d 03 	sts	0x032D, r1
    2092:	10 92 2e 03 	sts	0x032E, r1

		}

	}
	
}
    2096:	8f 91       	pop	r24
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	8f 93       	push	r24
    20b6:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    20b8:	80 91 b1 00 	lds	r24, 0x00B1
    20bc:	88 7f       	andi	r24, 0xF8	; 248
    20be:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    20c2:	80 91 1a 02 	lds	r24, 0x021A
    20c6:	88 23       	and	r24, r24
    20c8:	a9 f0       	breq	.+42     	; 0x20f4 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    20ca:	80 91 03 01 	lds	r24, 0x0103
    20ce:	86 ff       	sbrs	r24, 6
    20d0:	65 c0       	rjmp	.+202    	; 0x219c <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    20d2:	80 91 68 00 	lds	r24, 0x0068
    20d6:	82 60       	ori	r24, 0x02	; 2
    20d8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    20dc:	80 91 6c 00 	lds	r24, 0x006C
    20e0:	80 68       	ori	r24, 0x80	; 128
    20e2:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	9f ef       	ldi	r25, 0xFF	; 255
    20ea:	90 93 02 02 	sts	0x0202, r25
    20ee:	80 93 01 02 	sts	0x0201, r24
    20f2:	49 c0       	rjmp	.+146    	; 0x2186 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    20f4:	80 91 01 02 	lds	r24, 0x0201
    20f8:	90 91 02 02 	lds	r25, 0x0202
    20fc:	2f ef       	ldi	r18, 0xFF	; 255
    20fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2100:	92 07       	cpc	r25, r18
    2102:	09 f4       	brne	.+2      	; 0x2106 <__vector_13+0x64>
    2104:	63 c0       	rjmp	.+198    	; 0x21cc <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	91 05       	cpc	r25, r1
    210a:	09 f4       	brne	.+2      	; 0x210e <__vector_13+0x6c>
    210c:	98 c0       	rjmp	.+304    	; 0x223e <__stack+0x3f>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    210e:	9c 01       	movw	r18, r24
    2110:	22 50       	subi	r18, 0x02	; 2
    2112:	30 40       	sbci	r19, 0x00	; 0
    2114:	25 30       	cpi	r18, 0x05	; 5
    2116:	31 05       	cpc	r19, r1
    2118:	08 f4       	brcc	.+2      	; 0x211c <__vector_13+0x7a>
    211a:	67 c0       	rjmp	.+206    	; 0x21ea <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    211c:	9c 01       	movw	r18, r24
    211e:	27 50       	subi	r18, 0x07	; 7
    2120:	30 40       	sbci	r19, 0x00	; 0
    2122:	26 30       	cpi	r18, 0x06	; 6
    2124:	31 05       	cpc	r19, r1
    2126:	08 f0       	brcs	.+2      	; 0x212a <__vector_13+0x88>
    2128:	bd c0       	rjmp	.+378    	; 0x22a4 <__stack+0xa5>

				OCR2A = 54;
    212a:	26 e3       	ldi	r18, 0x36	; 54
    212c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2130:	20 91 b1 00 	lds	r18, 0x00B1
    2134:	26 60       	ori	r18, 0x06	; 6
    2136:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    213a:	20 91 70 00 	lds	r18, 0x0070
    213e:	22 60       	ori	r18, 0x02	; 2
    2140:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2144:	20 91 03 01 	lds	r18, 0x0103
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	20 74       	andi	r18, 0x40	; 64
    214c:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    214e:	00 24       	eor	r0, r0
    2150:	22 0f       	add	r18, r18
    2152:	33 1f       	adc	r19, r19
    2154:	00 1c       	adc	r0, r0
    2156:	22 0f       	add	r18, r18
    2158:	33 1f       	adc	r19, r19
    215a:	00 1c       	adc	r0, r0
    215c:	23 2f       	mov	r18, r19
    215e:	30 2d       	mov	r19, r0
    2160:	4c e0       	ldi	r20, 0x0C	; 12
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	48 1b       	sub	r20, r24
    2166:	59 0b       	sbc	r21, r25
    2168:	02 c0       	rjmp	.+4      	; 0x216e <__vector_13+0xcc>
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	4a 95       	dec	r20
    2170:	e2 f7       	brpl	.-8      	; 0x216a <__vector_13+0xc8>
				data_temp += temp;
    2172:	40 91 2c 03 	lds	r20, 0x032C
    2176:	42 0f       	add	r20, r18
    2178:	40 93 2c 03 	sts	0x032C, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    217c:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    217e:	90 93 02 02 	sts	0x0202, r25
    2182:	80 93 01 02 	sts	0x0201, r24

		}

}
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	5f 91       	pop	r21
    218c:	4f 91       	pop	r20
    218e:	3f 91       	pop	r19
    2190:	2f 91       	pop	r18
    2192:	0f 90       	pop	r0
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	0f 90       	pop	r0
    2198:	1f 90       	pop	r1
    219a:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    219c:	10 92 1a 02 	sts	0x021A, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    21a0:	83 e3       	ldi	r24, 0x33	; 51
    21a2:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    21a6:	80 91 b1 00 	lds	r24, 0x00B1
    21aa:	86 60       	ori	r24, 0x06	; 6
    21ac:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    21b0:	80 91 70 00 	lds	r24, 0x0070
    21b4:	82 60       	ori	r24, 0x02	; 2
    21b6:	80 93 70 00 	sts	0x0070, r24
    21ba:	80 91 01 02 	lds	r24, 0x0201
    21be:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    21c2:	2f ef       	ldi	r18, 0xFF	; 255
    21c4:	8f 3f       	cpi	r24, 0xFF	; 255
    21c6:	92 07       	cpc	r25, r18
    21c8:	c9 f6       	brne	.-78     	; 0x217c <__vector_13+0xda>
    21ca:	dd cf       	rjmp	.-70     	; 0x2186 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    21cc:	20 91 03 01 	lds	r18, 0x0103
    21d0:	26 ff       	sbrs	r18, 6
    21d2:	52 c0       	rjmp	.+164    	; 0x2278 <__stack+0x79>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    21d4:	20 91 68 00 	lds	r18, 0x0068
    21d8:	22 60       	ori	r18, 0x02	; 2
    21da:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    21de:	20 91 6c 00 	lds	r18, 0x006C
    21e2:	20 68       	ori	r18, 0x80	; 128
    21e4:	20 93 6c 00 	sts	0x006C, r18
    21e8:	ce cf       	rjmp	.-100    	; 0x2186 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    21ea:	26 e3       	ldi	r18, 0x36	; 54
    21ec:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    21f0:	20 91 b1 00 	lds	r18, 0x00B1
    21f4:	26 60       	ori	r18, 0x06	; 6
    21f6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    21fa:	20 91 70 00 	lds	r18, 0x0070
    21fe:	22 60       	ori	r18, 0x02	; 2
    2200:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2204:	20 91 03 01 	lds	r18, 0x0103
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	20 74       	andi	r18, 0x40	; 64
    220c:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    220e:	00 24       	eor	r0, r0
    2210:	22 0f       	add	r18, r18
    2212:	33 1f       	adc	r19, r19
    2214:	00 1c       	adc	r0, r0
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	00 1c       	adc	r0, r0
    221c:	23 2f       	mov	r18, r19
    221e:	30 2d       	mov	r19, r0
    2220:	46 e0       	ldi	r20, 0x06	; 6
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	48 1b       	sub	r20, r24
    2226:	59 0b       	sbc	r21, r25
    2228:	02 c0       	rjmp	.+4      	; 0x222e <__stack+0x2f>
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	4a 95       	dec	r20
    2230:	e2 f7       	brpl	.-8      	; 0x222a <__stack+0x2b>
				address_temp += temp;
    2232:	40 91 2d 03 	lds	r20, 0x032D
    2236:	42 0f       	add	r20, r18
    2238:	40 93 2d 03 	sts	0x032D, r20
    223c:	9f cf       	rjmp	.-194    	; 0x217c <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    223e:	20 91 03 01 	lds	r18, 0x0103
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	20 74       	andi	r18, 0x40	; 64
    2246:	30 70       	andi	r19, 0x00	; 0
    2248:	02 2e       	mov	r0, r18
    224a:	23 2f       	mov	r18, r19
    224c:	00 0c       	add	r0, r0
    224e:	22 1f       	adc	r18, r18
    2250:	33 0b       	sbc	r19, r19
    2252:	00 0c       	add	r0, r0
    2254:	22 1f       	adc	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	20 93 2e 03 	sts	0x032E, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    225c:	26 e3       	ldi	r18, 0x36	; 54
    225e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2262:	20 91 b1 00 	lds	r18, 0x00B1
    2266:	26 60       	ori	r18, 0x06	; 6
    2268:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    226c:	20 91 70 00 	lds	r18, 0x0070
    2270:	22 60       	ori	r18, 0x02	; 2
    2272:	20 93 70 00 	sts	0x0070, r18
    2276:	82 cf       	rjmp	.-252    	; 0x217c <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2278:	8c e1       	ldi	r24, 0x1C	; 28
    227a:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    227e:	80 91 b1 00 	lds	r24, 0x00B1
    2282:	86 60       	ori	r24, 0x06	; 6
    2284:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2288:	80 91 70 00 	lds	r24, 0x0070
    228c:	82 60       	ori	r24, 0x02	; 2
    228e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2292:	10 92 2c 03 	sts	0x032C, r1
    2296:	10 92 2d 03 	sts	0x032D, r1
    229a:	10 92 2e 03 	sts	0x032E, r1
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	6d cf       	rjmp	.-294    	; 0x217e <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    22a4:	8d 30       	cpi	r24, 0x0D	; 13
    22a6:	91 05       	cpc	r25, r1
    22a8:	09 f0       	breq	.+2      	; 0x22ac <__stack+0xad>
    22aa:	68 cf       	rjmp	.-304    	; 0x217c <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    22ac:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    22b0:	80 91 68 00 	lds	r24, 0x0068
    22b4:	82 60       	ori	r24, 0x02	; 2
    22b6:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    22ba:	80 91 6c 00 	lds	r24, 0x006C
    22be:	80 68       	ori	r24, 0x80	; 128
    22c0:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	9f ef       	ldi	r25, 0xFF	; 255
    22c8:	90 93 02 02 	sts	0x0202, r25
    22cc:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    22d0:	80 91 2e 03 	lds	r24, 0x032E
    22d4:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    22d8:	80 91 2d 03 	lds	r24, 0x032D
    22dc:	80 93 2a 03 	sts	0x032A, r24
				data_ir = data_temp;
    22e0:	80 91 2c 03 	lds	r24, 0x032C
    22e4:	80 93 2b 03 	sts	0x032B, r24
				command_received=1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	80 93 0a 04 	sts	0x040A, r24
    22ee:	4b cf       	rjmp	.-362    	; 0x2186 <__vector_13+0xe4>

000022f0 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    22f0:	80 91 00 02 	lds	r24, 0x0200
    22f4:	08 95       	ret

000022f6 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    22f6:	80 91 2a 03 	lds	r24, 0x032A
    22fa:	08 95       	ret

000022fc <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    22fc:	80 91 2b 03 	lds	r24, 0x032B
    2300:	08 95       	ret

00002302 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2302:	08 95       	ret

00002304 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	09 f4       	brne	.+2      	; 0x2318 <start_vertical_speed_control_left+0x14>
    2316:	b7 c0       	rjmp	.+366    	; 0x2486 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2318:	20 91 20 04 	lds	r18, 0x0420
    231c:	30 91 21 04 	lds	r19, 0x0421
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	2e 30       	cpi	r18, 0x0E	; 14
    2324:	34 07       	cpc	r19, r20
    2326:	0c f4       	brge	.+2      	; 0x232a <start_vertical_speed_control_left+0x26>
    2328:	88 c0       	rjmp	.+272    	; 0x243a <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    232a:	18 16       	cp	r1, r24
    232c:	19 06       	cpc	r1, r25
    232e:	0c f0       	brlt	.+2      	; 0x2332 <start_vertical_speed_control_left+0x2e>
    2330:	13 c1       	rjmp	.+550    	; 0x2558 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2332:	88 e6       	ldi	r24, 0x68	; 104
    2334:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2336:	82 1b       	sub	r24, r18
    2338:	93 0b       	sbc	r25, r19
    233a:	95 95       	asr	r25
    233c:	87 95       	ror	r24
    233e:	95 95       	asr	r25
    2340:	87 95       	ror	r24
    2342:	29 e1       	ldi	r18, 0x19	; 25
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	28 1b       	sub	r18, r24
    2348:	39 0b       	sbc	r19, r25
    234a:	30 93 0c 02 	sts	0x020C, r19
    234e:	20 93 0b 02 	sts	0x020B, r18
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_left_speed_prev = delta_left_speed_current; 
    2352:	40 91 3a 04 	lds	r20, 0x043A
    2356:	50 91 3b 04 	lds	r21, 0x043B
    235a:	50 93 5d 04 	sts	0x045D, r21
    235e:	40 93 5c 04 	sts	0x045C, r20
	if(*pwm_left >= 0) {
    2362:	20 81       	ld	r18, Z
    2364:	31 81       	ldd	r19, Z+1	; 0x01
    2366:	37 fd       	sbrc	r19, 7
    2368:	d2 c0       	rjmp	.+420    	; 0x250e <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    236a:	80 91 e0 03 	lds	r24, 0x03E0
    236e:	90 91 e1 03 	lds	r25, 0x03E1
    2372:	b9 01       	movw	r22, r18
    2374:	68 1b       	sub	r22, r24
    2376:	79 0b       	sbc	r23, r25
    2378:	cb 01       	movw	r24, r22
    237a:	70 93 3b 04 	sts	0x043B, r23
    237e:	60 93 3a 04 	sts	0x043A, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    2382:	20 91 f8 03 	lds	r18, 0x03F8
    2386:	30 91 f9 03 	lds	r19, 0x03F9
    238a:	28 0f       	add	r18, r24
    238c:	39 1f       	adc	r19, r25
    238e:	30 93 f9 03 	sts	0x03F9, r19
    2392:	20 93 f8 03 	sts	0x03F8, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2396:	76 e0       	ldi	r23, 0x06	; 6
    2398:	21 34       	cpi	r18, 0x41	; 65
    239a:	37 07       	cpc	r19, r23
    239c:	0c f4       	brge	.+2      	; 0x23a0 <start_vertical_speed_control_left+0x9c>
    239e:	84 c0       	rjmp	.+264    	; 0x24a8 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    23a0:	20 e4       	ldi	r18, 0x40	; 64
    23a2:	36 e0       	ldi	r19, 0x06	; 6
    23a4:	30 93 f9 03 	sts	0x03F9, r19
    23a8:	20 93 f8 03 	sts	0x03F8, r18
    23ac:	60 ec       	ldi	r22, 0xC0	; 192
    23ae:	72 e1       	ldi	r23, 0x12	; 18
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    23b0:	9c 01       	movw	r18, r24
    23b2:	22 0f       	add	r18, r18
    23b4:	33 1f       	adc	r19, r19
    23b6:	dc 01       	movw	r26, r24
    23b8:	aa 0f       	add	r26, r26
    23ba:	bb 1f       	adc	r27, r27
    23bc:	aa 0f       	add	r26, r26
    23be:	bb 1f       	adc	r27, r27
    23c0:	aa 0f       	add	r26, r26
    23c2:	bb 1f       	adc	r27, r27
    23c4:	2a 0f       	add	r18, r26
    23c6:	3b 1f       	adc	r19, r27
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
    23c8:	00 81       	ld	r16, Z
    23ca:	11 81       	ldd	r17, Z+1	; 0x01
    23cc:	c0 91 0b 02 	lds	r28, 0x020B
    23d0:	d0 91 0c 02 	lds	r29, 0x020C
    23d4:	0c 9f       	mul	r16, r28
    23d6:	d0 01       	movw	r26, r0
    23d8:	0d 9f       	mul	r16, r29
    23da:	b0 0d       	add	r27, r0
    23dc:	1c 9f       	mul	r17, r28
    23de:	b0 0d       	add	r27, r0
    23e0:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    23e2:	2a 0f       	add	r18, r26
    23e4:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    23e6:	48 1b       	sub	r20, r24
    23e8:	59 0b       	sbc	r21, r25
    23ea:	44 0f       	add	r20, r20
    23ec:	55 1f       	adc	r21, r21
    23ee:	24 0f       	add	r18, r20
    23f0:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    23f2:	26 0f       	add	r18, r22
    23f4:	37 1f       	adc	r19, r23
    23f6:	30 93 f3 03 	sts	0x03F3, r19
    23fa:	20 93 f2 03 	sts	0x03F2, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    23fe:	37 fd       	sbrc	r19, 7
    2400:	69 c0       	rjmp	.+210    	; 0x24d4 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2402:	12 16       	cp	r1, r18
    2404:	13 06       	cpc	r1, r19
    2406:	0c f0       	brlt	.+2      	; 0x240a <start_vertical_speed_control_left+0x106>
    2408:	6f c0       	rjmp	.+222    	; 0x24e8 <start_vertical_speed_control_left+0x1e4>
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	97 fd       	sbrc	r25, 7
    2410:	89 c0       	rjmp	.+274    	; 0x2524 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2412:	7d e5       	ldi	r23, 0x5D	; 93
    2414:	21 3c       	cpi	r18, 0xC1	; 193
    2416:	37 07       	cpc	r19, r23
    2418:	0c f4       	brge	.+2      	; 0x241c <start_vertical_speed_control_left+0x118>
    241a:	66 c0       	rjmp	.+204    	; 0x24e8 <start_vertical_speed_control_left+0x1e4>
    241c:	80 ec       	ldi	r24, 0xC0	; 192
    241e:	9d e5       	ldi	r25, 0x5D	; 93
    2420:	90 93 f3 03 	sts	0x03F3, r25
    2424:	80 93 f2 03 	sts	0x03F2, r24
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    243a:	24 3b       	cpi	r18, 0xB4	; 180
    243c:	31 05       	cpc	r19, r1
    243e:	94 f4       	brge	.+36     	; 0x2464 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    2440:	2a 35       	cpi	r18, 0x5A	; 90
    2442:	31 05       	cpc	r19, r1
    2444:	7c f4       	brge	.+30     	; 0x2464 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2446:	18 16       	cp	r1, r24
    2448:	19 06       	cpc	r1, r25
    244a:	0c f0       	brlt	.+2      	; 0x244e <start_vertical_speed_control_left+0x14a>
    244c:	93 c0       	rjmp	.+294    	; 0x2574 <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    244e:	35 95       	asr	r19
    2450:	27 95       	ror	r18
    2452:	35 95       	asr	r19
    2454:	27 95       	ror	r18
    2456:	27 5e       	subi	r18, 0xE7	; 231
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
    245a:	30 93 0c 02 	sts	0x020C, r19
    245e:	20 93 0b 02 	sts	0x020B, r18
    2462:	77 cf       	rjmp	.-274    	; 0x2352 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
    2464:	18 16       	cp	r1, r24
    2466:	19 06       	cpc	r1, r25
    2468:	94 f5       	brge	.+100    	; 0x24ce <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    246a:	84 eb       	ldi	r24, 0xB4	; 180
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	82 1b       	sub	r24, r18
    2470:	93 0b       	sbc	r25, r19
    2472:	95 95       	asr	r25
    2474:	87 95       	ror	r24
    2476:	95 95       	asr	r25
    2478:	87 95       	ror	r24
    247a:	49 96       	adiw	r24, 0x19	; 25
    247c:	90 93 0c 02 	sts	0x020C, r25
    2480:	80 93 0b 02 	sts	0x020B, r24
    2484:	66 cf       	rjmp	.-308    	; 0x2352 <start_vertical_speed_control_left+0x4e>
}

void start_vertical_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    2486:	10 92 f9 03 	sts	0x03F9, r1
    248a:	10 92 f8 03 	sts	0x03F8, r1
		delta_left_speed_current = 0;
    248e:	10 92 3b 04 	sts	0x043B, r1
    2492:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    2496:	10 92 5d 04 	sts	0x045D, r1
    249a:	10 92 5c 04 	sts	0x045C, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    24a8:	69 ef       	ldi	r22, 0xF9	; 249
    24aa:	20 3c       	cpi	r18, 0xC0	; 192
    24ac:	36 07       	cpc	r19, r22
    24ae:	4c f4       	brge	.+18     	; 0x24c2 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    24b0:	20 ec       	ldi	r18, 0xC0	; 192
    24b2:	39 ef       	ldi	r19, 0xF9	; 249
    24b4:	30 93 f9 03 	sts	0x03F9, r19
    24b8:	20 93 f8 03 	sts	0x03F8, r18
    24bc:	60 e4       	ldi	r22, 0x40	; 64
    24be:	7d ee       	ldi	r23, 0xED	; 237
    24c0:	77 cf       	rjmp	.-274    	; 0x23b0 <start_vertical_speed_control_left+0xac>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    24c2:	b9 01       	movw	r22, r18
    24c4:	66 0f       	add	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	62 0f       	add	r22, r18
    24ca:	73 1f       	adc	r23, r19
    24cc:	71 cf       	rjmp	.-286    	; 0x23b0 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    24ce:	84 eb       	ldi	r24, 0xB4	; 180
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	31 cf       	rjmp	.-414    	; 0x2336 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	97 fd       	sbrc	r25, 7
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    24dc:	10 92 f3 03 	sts	0x03F3, r1
    24e0:	10 92 f2 03 	sts	0x03F2, r1
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    24e8:	82 ea       	ldi	r24, 0xA2	; 162
    24ea:	20 34       	cpi	r18, 0x40	; 64
    24ec:	38 07       	cpc	r19, r24
    24ee:	04 f5       	brge	.+64     	; 0x2530 <start_vertical_speed_control_left+0x22c>
    24f0:	80 e4       	ldi	r24, 0x40	; 64
    24f2:	92 ea       	ldi	r25, 0xA2	; 162
    24f4:	90 93 f3 03 	sts	0x03F3, r25
    24f8:	80 93 f2 03 	sts	0x03F2, r24
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	9e ef       	ldi	r25, 0xFE	; 254
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24


}
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	08 95       	ret

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    250e:	80 91 e0 03 	lds	r24, 0x03E0
    2512:	90 91 e1 03 	lds	r25, 0x03E1
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	90 93 3b 04 	sts	0x043B, r25
    251e:	80 93 3a 04 	sts	0x043A, r24
    2522:	2f cf       	rjmp	.-418    	; 0x2382 <start_vertical_speed_control_left+0x7e>

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2524:	10 92 f3 03 	sts	0x03F3, r1
    2528:	10 92 f2 03 	sts	0x03F2, r1
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2530:	35 95       	asr	r19
    2532:	27 95       	ror	r18
    2534:	35 95       	asr	r19
    2536:	27 95       	ror	r18
    2538:	35 95       	asr	r19
    253a:	27 95       	ror	r18
    253c:	35 95       	asr	r19
    253e:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2540:	31 83       	std	Z+1, r19	; 0x01
    2542:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2544:	42 e0       	ldi	r20, 0x02	; 2
    2546:	21 30       	cpi	r18, 0x01	; 1
    2548:	34 07       	cpc	r19, r20
    254a:	0c f0       	brlt	.+2      	; 0x254e <start_vertical_speed_control_left+0x24a>
    254c:	6d cf       	rjmp	.-294    	; 0x2428 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    254e:	6e ef       	ldi	r22, 0xFE	; 254
    2550:	20 30       	cpi	r18, 0x00	; 0
    2552:	36 07       	cpc	r19, r22
    2554:	9c f2       	brlt	.-90     	; 0x24fc <start_vertical_speed_control_left+0x1f8>
    2556:	6c cf       	rjmp	.-296    	; 0x2430 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2558:	88 e6       	ldi	r24, 0x68	; 104
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	82 1b       	sub	r24, r18
    255e:	93 0b       	sbc	r25, r19
    2560:	95 95       	asr	r25
    2562:	87 95       	ror	r24
    2564:	95 95       	asr	r25
    2566:	87 95       	ror	r24
    2568:	49 96       	adiw	r24, 0x19	; 25
    256a:	90 93 0c 02 	sts	0x020C, r25
    256e:	80 93 0b 02 	sts	0x020B, r24
    2572:	ef ce       	rjmp	.-546    	; 0x2352 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2574:	35 95       	asr	r19
    2576:	27 95       	ror	r18
    2578:	35 95       	asr	r19
    257a:	27 95       	ror	r18
    257c:	89 e1       	ldi	r24, 0x19	; 25
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	82 1b       	sub	r24, r18
    2582:	93 0b       	sbc	r25, r19
    2584:	90 93 0c 02 	sts	0x020C, r25
    2588:	80 93 0b 02 	sts	0x020B, r24
    258c:	e2 ce       	rjmp	.-572    	; 0x2352 <start_vertical_speed_control_left+0x4e>

0000258e <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	09 f4       	brne	.+2      	; 0x25a2 <start_vertical_speed_control_right+0x14>
    25a0:	b7 c0       	rjmp	.+366    	; 0x2710 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    25a2:	20 91 20 04 	lds	r18, 0x0420
    25a6:	30 91 21 04 	lds	r19, 0x0421
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	2e 30       	cpi	r18, 0x0E	; 14
    25ae:	34 07       	cpc	r19, r20
    25b0:	0c f4       	brge	.+2      	; 0x25b4 <start_vertical_speed_control_right+0x26>
    25b2:	88 c0       	rjmp	.+272    	; 0x26c4 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    25b4:	18 16       	cp	r1, r24
    25b6:	19 06       	cpc	r1, r25
    25b8:	0c f0       	brlt	.+2      	; 0x25bc <start_vertical_speed_control_right+0x2e>
    25ba:	13 c1       	rjmp	.+550    	; 0x27e2 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    25bc:	88 e6       	ldi	r24, 0x68	; 104
    25be:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    25c0:	82 1b       	sub	r24, r18
    25c2:	93 0b       	sbc	r25, r19
    25c4:	95 95       	asr	r25
    25c6:	87 95       	ror	r24
    25c8:	95 95       	asr	r25
    25ca:	87 95       	ror	r24
    25cc:	29 e1       	ldi	r18, 0x19	; 25
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	28 1b       	sub	r18, r24
    25d2:	39 0b       	sbc	r19, r25
    25d4:	30 93 0e 02 	sts	0x020E, r19
    25d8:	20 93 0d 02 	sts	0x020D, r18
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_right_speed_prev = delta_right_speed_current;
    25dc:	40 91 6b 04 	lds	r20, 0x046B
    25e0:	50 91 6c 04 	lds	r21, 0x046C
    25e4:	50 93 45 04 	sts	0x0445, r21
    25e8:	40 93 44 04 	sts	0x0444, r20
	if(*pwm_right >= 0) {
    25ec:	20 81       	ld	r18, Z
    25ee:	31 81       	ldd	r19, Z+1	; 0x01
    25f0:	37 fd       	sbrc	r19, 7
    25f2:	d2 c0       	rjmp	.+420    	; 0x2798 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    25f4:	80 91 e2 03 	lds	r24, 0x03E2
    25f8:	90 91 e3 03 	lds	r25, 0x03E3
    25fc:	b9 01       	movw	r22, r18
    25fe:	68 1b       	sub	r22, r24
    2600:	79 0b       	sbc	r23, r25
    2602:	cb 01       	movw	r24, r22
    2604:	70 93 6c 04 	sts	0x046C, r23
    2608:	60 93 6b 04 	sts	0x046B, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    260c:	20 91 fa 03 	lds	r18, 0x03FA
    2610:	30 91 fb 03 	lds	r19, 0x03FB
    2614:	28 0f       	add	r18, r24
    2616:	39 1f       	adc	r19, r25
    2618:	30 93 fb 03 	sts	0x03FB, r19
    261c:	20 93 fa 03 	sts	0x03FA, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2620:	76 e0       	ldi	r23, 0x06	; 6
    2622:	21 34       	cpi	r18, 0x41	; 65
    2624:	37 07       	cpc	r19, r23
    2626:	0c f4       	brge	.+2      	; 0x262a <start_vertical_speed_control_right+0x9c>
    2628:	84 c0       	rjmp	.+264    	; 0x2732 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    262a:	20 e4       	ldi	r18, 0x40	; 64
    262c:	36 e0       	ldi	r19, 0x06	; 6
    262e:	30 93 fb 03 	sts	0x03FB, r19
    2632:	20 93 fa 03 	sts	0x03FA, r18
    2636:	60 ec       	ldi	r22, 0xC0	; 192
    2638:	72 e1       	ldi	r23, 0x12	; 18
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    263a:	9c 01       	movw	r18, r24
    263c:	22 0f       	add	r18, r18
    263e:	33 1f       	adc	r19, r19
    2640:	dc 01       	movw	r26, r24
    2642:	aa 0f       	add	r26, r26
    2644:	bb 1f       	adc	r27, r27
    2646:	aa 0f       	add	r26, r26
    2648:	bb 1f       	adc	r27, r27
    264a:	aa 0f       	add	r26, r26
    264c:	bb 1f       	adc	r27, r27
    264e:	2a 0f       	add	r18, r26
    2650:	3b 1f       	adc	r19, r27
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2652:	00 81       	ld	r16, Z
    2654:	11 81       	ldd	r17, Z+1	; 0x01
    2656:	c0 91 0d 02 	lds	r28, 0x020D
    265a:	d0 91 0e 02 	lds	r29, 0x020E
    265e:	0c 9f       	mul	r16, r28
    2660:	d0 01       	movw	r26, r0
    2662:	0d 9f       	mul	r16, r29
    2664:	b0 0d       	add	r27, r0
    2666:	1c 9f       	mul	r17, r28
    2668:	b0 0d       	add	r27, r0
    266a:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    266c:	2a 0f       	add	r18, r26
    266e:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2670:	48 1b       	sub	r20, r24
    2672:	59 0b       	sbc	r21, r25
    2674:	44 0f       	add	r20, r20
    2676:	55 1f       	adc	r21, r21
    2678:	24 0f       	add	r18, r20
    267a:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    267c:	26 0f       	add	r18, r22
    267e:	37 1f       	adc	r19, r23
    2680:	30 93 f1 03 	sts	0x03F1, r19
    2684:	20 93 f0 03 	sts	0x03F0, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2688:	37 fd       	sbrc	r19, 7
    268a:	69 c0       	rjmp	.+210    	; 0x275e <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    268c:	12 16       	cp	r1, r18
    268e:	13 06       	cpc	r1, r19
    2690:	0c f0       	brlt	.+2      	; 0x2694 <start_vertical_speed_control_right+0x106>
    2692:	6f c0       	rjmp	.+222    	; 0x2772 <start_vertical_speed_control_right+0x1e4>
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	97 fd       	sbrc	r25, 7
    269a:	89 c0       	rjmp	.+274    	; 0x27ae <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    269c:	7d e5       	ldi	r23, 0x5D	; 93
    269e:	21 3c       	cpi	r18, 0xC1	; 193
    26a0:	37 07       	cpc	r19, r23
    26a2:	0c f4       	brge	.+2      	; 0x26a6 <start_vertical_speed_control_right+0x118>
    26a4:	66 c0       	rjmp	.+204    	; 0x2772 <start_vertical_speed_control_right+0x1e4>
    26a6:	80 ec       	ldi	r24, 0xC0	; 192
    26a8:	9d e5       	ldi	r25, 0x5D	; 93
    26aa:	90 93 f1 03 	sts	0x03F1, r25
    26ae:	80 93 f0 03 	sts	0x03F0, r24
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    26c4:	24 3b       	cpi	r18, 0xB4	; 180
    26c6:	31 05       	cpc	r19, r1
    26c8:	94 f4       	brge	.+36     	; 0x26ee <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    26ca:	2a 35       	cpi	r18, 0x5A	; 90
    26cc:	31 05       	cpc	r19, r1
    26ce:	7c f4       	brge	.+30     	; 0x26ee <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    26d0:	18 16       	cp	r1, r24
    26d2:	19 06       	cpc	r1, r25
    26d4:	0c f0       	brlt	.+2      	; 0x26d8 <start_vertical_speed_control_right+0x14a>
    26d6:	93 c0       	rjmp	.+294    	; 0x27fe <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    26d8:	35 95       	asr	r19
    26da:	27 95       	ror	r18
    26dc:	35 95       	asr	r19
    26de:	27 95       	ror	r18
    26e0:	27 5e       	subi	r18, 0xE7	; 231
    26e2:	3f 4f       	sbci	r19, 0xFF	; 255
    26e4:	30 93 0e 02 	sts	0x020E, r19
    26e8:	20 93 0d 02 	sts	0x020D, r18
    26ec:	77 cf       	rjmp	.-274    	; 0x25dc <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
    26ee:	18 16       	cp	r1, r24
    26f0:	19 06       	cpc	r1, r25
    26f2:	94 f5       	brge	.+100    	; 0x2758 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    26f4:	84 eb       	ldi	r24, 0xB4	; 180
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	82 1b       	sub	r24, r18
    26fa:	93 0b       	sbc	r25, r19
    26fc:	95 95       	asr	r25
    26fe:	87 95       	ror	r24
    2700:	95 95       	asr	r25
    2702:	87 95       	ror	r24
    2704:	49 96       	adiw	r24, 0x19	; 25
    2706:	90 93 0e 02 	sts	0x020E, r25
    270a:	80 93 0d 02 	sts	0x020D, r24
    270e:	66 cf       	rjmp	.-308    	; 0x25dc <start_vertical_speed_control_right+0x4e>


void start_vertical_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    2710:	10 92 fb 03 	sts	0x03FB, r1
    2714:	10 92 fa 03 	sts	0x03FA, r1
		delta_right_speed_current = 0;
    2718:	10 92 6c 04 	sts	0x046C, r1
    271c:	10 92 6b 04 	sts	0x046B, r1
		delta_right_speed_prev = 0;
    2720:	10 92 45 04 	sts	0x0445, r1
    2724:	10 92 44 04 	sts	0x0444, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2732:	69 ef       	ldi	r22, 0xF9	; 249
    2734:	20 3c       	cpi	r18, 0xC0	; 192
    2736:	36 07       	cpc	r19, r22
    2738:	4c f4       	brge	.+18     	; 0x274c <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    273a:	20 ec       	ldi	r18, 0xC0	; 192
    273c:	39 ef       	ldi	r19, 0xF9	; 249
    273e:	30 93 fb 03 	sts	0x03FB, r19
    2742:	20 93 fa 03 	sts	0x03FA, r18
    2746:	60 e4       	ldi	r22, 0x40	; 64
    2748:	7d ee       	ldi	r23, 0xED	; 237
    274a:	77 cf       	rjmp	.-274    	; 0x263a <start_vertical_speed_control_right+0xac>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    274c:	b9 01       	movw	r22, r18
    274e:	66 0f       	add	r22, r22
    2750:	77 1f       	adc	r23, r23
    2752:	62 0f       	add	r22, r18
    2754:	73 1f       	adc	r23, r19
    2756:	71 cf       	rjmp	.-286    	; 0x263a <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2758:	84 eb       	ldi	r24, 0xB4	; 180
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	31 cf       	rjmp	.-414    	; 0x25c0 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	97 fd       	sbrc	r25, 7
    2764:	06 c0       	rjmp	.+12     	; 0x2772 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    2766:	10 92 f1 03 	sts	0x03F1, r1
    276a:	10 92 f0 03 	sts	0x03F0, r1
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2772:	82 ea       	ldi	r24, 0xA2	; 162
    2774:	20 34       	cpi	r18, 0x40	; 64
    2776:	38 07       	cpc	r19, r24
    2778:	04 f5       	brge	.+64     	; 0x27ba <start_vertical_speed_control_right+0x22c>
    277a:	80 e4       	ldi	r24, 0x40	; 64
    277c:	92 ea       	ldi	r25, 0xA2	; 162
    277e:	90 93 f1 03 	sts	0x03F1, r25
    2782:	80 93 f0 03 	sts	0x03F0, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	9e ef       	ldi	r25, 0xFE	; 254
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24

}
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	08 95       	ret

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2798:	80 91 e2 03 	lds	r24, 0x03E2
    279c:	90 91 e3 03 	lds	r25, 0x03E3
    27a0:	82 0f       	add	r24, r18
    27a2:	93 1f       	adc	r25, r19
    27a4:	90 93 6c 04 	sts	0x046C, r25
    27a8:	80 93 6b 04 	sts	0x046B, r24
    27ac:	2f cf       	rjmp	.-418    	; 0x260c <start_vertical_speed_control_right+0x7e>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    27ae:	10 92 f1 03 	sts	0x03F1, r1
    27b2:	10 92 f0 03 	sts	0x03F0, r1
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    27ba:	35 95       	asr	r19
    27bc:	27 95       	ror	r18
    27be:	35 95       	asr	r19
    27c0:	27 95       	ror	r18
    27c2:	35 95       	asr	r19
    27c4:	27 95       	ror	r18
    27c6:	35 95       	asr	r19
    27c8:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    27ca:	31 83       	std	Z+1, r19	; 0x01
    27cc:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    27ce:	42 e0       	ldi	r20, 0x02	; 2
    27d0:	21 30       	cpi	r18, 0x01	; 1
    27d2:	34 07       	cpc	r19, r20
    27d4:	0c f0       	brlt	.+2      	; 0x27d8 <start_vertical_speed_control_right+0x24a>
    27d6:	6d cf       	rjmp	.-294    	; 0x26b2 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    27d8:	6e ef       	ldi	r22, 0xFE	; 254
    27da:	20 30       	cpi	r18, 0x00	; 0
    27dc:	36 07       	cpc	r19, r22
    27de:	9c f2       	brlt	.-90     	; 0x2786 <start_vertical_speed_control_right+0x1f8>
    27e0:	6c cf       	rjmp	.-296    	; 0x26ba <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    27e2:	88 e6       	ldi	r24, 0x68	; 104
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	82 1b       	sub	r24, r18
    27e8:	93 0b       	sbc	r25, r19
    27ea:	95 95       	asr	r25
    27ec:	87 95       	ror	r24
    27ee:	95 95       	asr	r25
    27f0:	87 95       	ror	r24
    27f2:	49 96       	adiw	r24, 0x19	; 25
    27f4:	90 93 0e 02 	sts	0x020E, r25
    27f8:	80 93 0d 02 	sts	0x020D, r24
    27fc:	ef ce       	rjmp	.-546    	; 0x25dc <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    27fe:	35 95       	asr	r19
    2800:	27 95       	ror	r18
    2802:	35 95       	asr	r19
    2804:	27 95       	ror	r18
    2806:	89 e1       	ldi	r24, 0x19	; 25
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	82 1b       	sub	r24, r18
    280c:	93 0b       	sbc	r25, r19
    280e:	90 93 0e 02 	sts	0x020E, r25
    2812:	80 93 0d 02 	sts	0x020D, r24
    2816:	e2 ce       	rjmp	.-572    	; 0x25dc <start_vertical_speed_control_right+0x4e>

00002818 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2818:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	09 f4       	brne	.+2      	; 0x2824 <start_horizontal_speed_control_right+0xc>
    2822:	7b c0       	rjmp	.+246    	; 0x291a <start_horizontal_speed_control_right+0x102>
		delta_right_speed_current = 0;
		delta_right_speed_prev = 0;
		return;
	}

	delta_right_speed_prev = delta_right_speed_current;
    2824:	a0 91 6b 04 	lds	r26, 0x046B
    2828:	b0 91 6c 04 	lds	r27, 0x046C
    282c:	b0 93 45 04 	sts	0x0445, r27
    2830:	a0 93 44 04 	sts	0x0444, r26
	if(*pwm_right >= 0) {
    2834:	20 81       	ld	r18, Z
    2836:	31 81       	ldd	r19, Z+1	; 0x01
    2838:	37 fd       	sbrc	r19, 7
    283a:	89 c0       	rjmp	.+274    	; 0x294e <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    283c:	80 91 e2 03 	lds	r24, 0x03E2
    2840:	90 91 e3 03 	lds	r25, 0x03E3
    2844:	a9 01       	movw	r20, r18
    2846:	48 1b       	sub	r20, r24
    2848:	59 0b       	sbc	r21, r25
    284a:	ca 01       	movw	r24, r20
    284c:	50 93 6c 04 	sts	0x046C, r21
    2850:	40 93 6b 04 	sts	0x046B, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    2854:	20 91 fa 03 	lds	r18, 0x03FA
    2858:	30 91 fb 03 	lds	r19, 0x03FB
    285c:	28 0f       	add	r18, r24
    285e:	39 1f       	adc	r19, r25
    2860:	30 93 fb 03 	sts	0x03FB, r19
    2864:	20 93 fa 03 	sts	0x03FA, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2868:	56 e0       	ldi	r21, 0x06	; 6
    286a:	21 34       	cpi	r18, 0x41	; 65
    286c:	35 07       	cpc	r19, r21
    286e:	0c f4       	brge	.+2      	; 0x2872 <start_horizontal_speed_control_right+0x5a>
    2870:	61 c0       	rjmp	.+194    	; 0x2934 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2872:	20 e4       	ldi	r18, 0x40	; 64
    2874:	36 e0       	ldi	r19, 0x06	; 6
    2876:	30 93 fb 03 	sts	0x03FB, r19
    287a:	20 93 fa 03 	sts	0x03FA, r18
    287e:	60 e8       	ldi	r22, 0x80	; 128
    2880:	7c e0       	ldi	r23, 0x0C	; 12
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2882:	9c 01       	movw	r18, r24
    2884:	22 0f       	add	r18, r18
    2886:	33 1f       	adc	r19, r19
    2888:	28 0f       	add	r18, r24
    288a:	39 1f       	adc	r19, r25
    288c:	22 0f       	add	r18, r18
    288e:	33 1f       	adc	r19, r19
    2890:	22 0f       	add	r18, r18
    2892:	33 1f       	adc	r19, r19
    2894:	22 0f       	add	r18, r18
    2896:	33 1f       	adc	r19, r19
    2898:	28 0f       	add	r18, r24
    289a:	39 1f       	adc	r19, r25
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
    289c:	40 81       	ld	r20, Z
    289e:	51 81       	ldd	r21, Z+1	; 0x01
    28a0:	44 0f       	add	r20, r20
    28a2:	55 1f       	adc	r21, r21
    28a4:	44 0f       	add	r20, r20
    28a6:	55 1f       	adc	r21, r21
    28a8:	44 0f       	add	r20, r20
    28aa:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    28ac:	24 0f       	add	r18, r20
    28ae:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    28b0:	ad 01       	movw	r20, r26
    28b2:	48 1b       	sub	r20, r24
    28b4:	59 0b       	sbc	r21, r25
    28b6:	ca 01       	movw	r24, r20
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	84 0f       	add	r24, r20
    28be:	95 1f       	adc	r25, r21
    28c0:	28 0f       	add	r18, r24
    28c2:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    28c4:	26 0f       	add	r18, r22
    28c6:	37 1f       	adc	r19, r23
    28c8:	30 93 f1 03 	sts	0x03F1, r19
    28cc:	20 93 f0 03 	sts	0x03F0, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    28d0:	37 fd       	sbrc	r19, 7
    28d2:	4c c0       	rjmp	.+152    	; 0x296c <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    28d4:	12 16       	cp	r1, r18
    28d6:	13 06       	cpc	r1, r19
    28d8:	0c f0       	brlt	.+2      	; 0x28dc <start_horizontal_speed_control_right+0xc4>
    28da:	52 c0       	rjmp	.+164    	; 0x2980 <start_horizontal_speed_control_right+0x168>
    28dc:	80 81       	ld	r24, Z
    28de:	91 81       	ldd	r25, Z+1	; 0x01
    28e0:	97 fd       	sbrc	r25, 7
    28e2:	67 c0       	rjmp	.+206    	; 0x29b2 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    28e4:	5d e5       	ldi	r21, 0x5D	; 93
    28e6:	21 3c       	cpi	r18, 0xC1	; 193
    28e8:	35 07       	cpc	r19, r21
    28ea:	0c f4       	brge	.+2      	; 0x28ee <start_horizontal_speed_control_right+0xd6>
    28ec:	49 c0       	rjmp	.+146    	; 0x2980 <start_horizontal_speed_control_right+0x168>
    28ee:	80 ec       	ldi	r24, 0xC0	; 192
    28f0:	9d e5       	ldi	r25, 0x5D	; 93
    28f2:	90 93 f1 03 	sts	0x03F1, r25
    28f6:	80 93 f0 03 	sts	0x03F0, r24
    28fa:	2c ed       	ldi	r18, 0xDC	; 220
    28fc:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(*pwm_right > 0) {
		*pwm_right += 30;
    28fe:	22 5e       	subi	r18, 0xE2	; 226
    2900:	3f 4f       	sbci	r19, 0xFF	; 255
    2902:	31 83       	std	Z+1, r19	; 0x01
    2904:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2906:	42 e0       	ldi	r20, 0x02	; 2
    2908:	21 30       	cpi	r18, 0x01	; 1
    290a:	34 07       	cpc	r19, r20
    290c:	0c f4       	brge	.+2      	; 0x2910 <start_horizontal_speed_control_right+0xf8>
    290e:	48 c0       	rjmp	.+144    	; 0x29a0 <start_horizontal_speed_control_right+0x188>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	92 e0       	ldi	r25, 0x02	; 2
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
    2918:	08 95       	ret
}

void start_horizontal_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    291a:	10 92 fb 03 	sts	0x03FB, r1
    291e:	10 92 fa 03 	sts	0x03FA, r1
		delta_right_speed_current = 0;
    2922:	10 92 6c 04 	sts	0x046C, r1
    2926:	10 92 6b 04 	sts	0x046B, r1
		delta_right_speed_prev = 0;
    292a:	10 92 45 04 	sts	0x0445, r1
    292e:	10 92 44 04 	sts	0x0444, r1
		return;
    2932:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2934:	49 ef       	ldi	r20, 0xF9	; 249
    2936:	20 3c       	cpi	r18, 0xC0	; 192
    2938:	34 07       	cpc	r19, r20
    293a:	a4 f4       	brge	.+40     	; 0x2964 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    293c:	20 ec       	ldi	r18, 0xC0	; 192
    293e:	39 ef       	ldi	r19, 0xF9	; 249
    2940:	30 93 fb 03 	sts	0x03FB, r19
    2944:	20 93 fa 03 	sts	0x03FA, r18
    2948:	60 e8       	ldi	r22, 0x80	; 128
    294a:	73 ef       	ldi	r23, 0xF3	; 243
    294c:	9a cf       	rjmp	.-204    	; 0x2882 <start_horizontal_speed_control_right+0x6a>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    294e:	80 91 e2 03 	lds	r24, 0x03E2
    2952:	90 91 e3 03 	lds	r25, 0x03E3
    2956:	82 0f       	add	r24, r18
    2958:	93 1f       	adc	r25, r19
    295a:	90 93 6c 04 	sts	0x046C, r25
    295e:	80 93 6b 04 	sts	0x046B, r24
    2962:	78 cf       	rjmp	.-272    	; 0x2854 <start_horizontal_speed_control_right+0x3c>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2964:	b9 01       	movw	r22, r18
    2966:	66 0f       	add	r22, r22
    2968:	77 1f       	adc	r23, r23
    296a:	8b cf       	rjmp	.-234    	; 0x2882 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	97 fd       	sbrc	r25, 7
    2972:	06 c0       	rjmp	.+12     	; 0x2980 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2974:	10 92 f1 03 	sts	0x03F1, r1
    2978:	10 92 f0 03 	sts	0x03F0, r1
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2980:	82 ea       	ldi	r24, 0xA2	; 162
    2982:	20 34       	cpi	r18, 0x40	; 64
    2984:	38 07       	cpc	r19, r24
    2986:	dc f4       	brge	.+54     	; 0x29be <start_horizontal_speed_control_right+0x1a6>
    2988:	80 e4       	ldi	r24, 0x40	; 64
    298a:	92 ea       	ldi	r25, 0xA2	; 162
    298c:	90 93 f1 03 	sts	0x03F1, r25
    2990:	80 93 f0 03 	sts	0x03F0, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    2994:	24 e2       	ldi	r18, 0x24	; 36
    2996:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2998:	2e 51       	subi	r18, 0x1E	; 30
    299a:	30 40       	sbci	r19, 0x00	; 0
    299c:	31 83       	std	Z+1, r19	; 0x01
    299e:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    29a0:	5e ef       	ldi	r21, 0xFE	; 254
    29a2:	20 30       	cpi	r18, 0x00	; 0
    29a4:	35 07       	cpc	r19, r21
    29a6:	24 f4       	brge	.+8      	; 0x29b0 <start_horizontal_speed_control_right+0x198>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	9e ef       	ldi	r25, 0xFE	; 254
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	08 95       	ret

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    29b2:	10 92 f1 03 	sts	0x03F1, r1
    29b6:	10 92 f0 03 	sts	0x03F0, r1
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    29be:	35 95       	asr	r19
    29c0:	27 95       	ror	r18
    29c2:	35 95       	asr	r19
    29c4:	27 95       	ror	r18
    29c6:	35 95       	asr	r19
    29c8:	27 95       	ror	r18
    29ca:	35 95       	asr	r19
    29cc:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    29ce:	31 83       	std	Z+1, r19	; 0x01
    29d0:	20 83       	st	Z, r18
	if(*pwm_right > 0) {
    29d2:	12 16       	cp	r1, r18
    29d4:	13 06       	cpc	r1, r19
    29d6:	0c f4       	brge	.+2      	; 0x29da <start_horizontal_speed_control_right+0x1c2>
    29d8:	92 cf       	rjmp	.-220    	; 0x28fe <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    29da:	21 15       	cp	r18, r1
    29dc:	31 05       	cpc	r19, r1
    29de:	e1 f6       	brne	.-72     	; 0x2998 <start_horizontal_speed_control_right+0x180>
    29e0:	08 95       	ret

000029e2 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    29e2:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	09 f4       	brne	.+2      	; 0x29ee <start_horizontal_speed_control_left+0xc>
    29ec:	7b c0       	rjmp	.+246    	; 0x2ae4 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_current = 0;
		delta_left_speed_prev = 0;
		return;
	}

	delta_left_speed_prev = delta_left_speed_current; 
    29ee:	a0 91 3a 04 	lds	r26, 0x043A
    29f2:	b0 91 3b 04 	lds	r27, 0x043B
    29f6:	b0 93 5d 04 	sts	0x045D, r27
    29fa:	a0 93 5c 04 	sts	0x045C, r26
	if(*pwm_left >= 0) {
    29fe:	20 81       	ld	r18, Z
    2a00:	31 81       	ldd	r19, Z+1	; 0x01
    2a02:	37 fd       	sbrc	r19, 7
    2a04:	89 c0       	rjmp	.+274    	; 0x2b18 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2a06:	80 91 e0 03 	lds	r24, 0x03E0
    2a0a:	90 91 e1 03 	lds	r25, 0x03E1
    2a0e:	a9 01       	movw	r20, r18
    2a10:	48 1b       	sub	r20, r24
    2a12:	59 0b       	sbc	r21, r25
    2a14:	ca 01       	movw	r24, r20
    2a16:	50 93 3b 04 	sts	0x043B, r21
    2a1a:	40 93 3a 04 	sts	0x043A, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    2a1e:	20 91 f8 03 	lds	r18, 0x03F8
    2a22:	30 91 f9 03 	lds	r19, 0x03F9
    2a26:	28 0f       	add	r18, r24
    2a28:	39 1f       	adc	r19, r25
    2a2a:	30 93 f9 03 	sts	0x03F9, r19
    2a2e:	20 93 f8 03 	sts	0x03F8, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    2a32:	56 e0       	ldi	r21, 0x06	; 6
    2a34:	21 34       	cpi	r18, 0x41	; 65
    2a36:	35 07       	cpc	r19, r21
    2a38:	0c f4       	brge	.+2      	; 0x2a3c <start_horizontal_speed_control_left+0x5a>
    2a3a:	61 c0       	rjmp	.+194    	; 0x2afe <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    2a3c:	20 e4       	ldi	r18, 0x40	; 64
    2a3e:	36 e0       	ldi	r19, 0x06	; 6
    2a40:	30 93 f9 03 	sts	0x03F9, r19
    2a44:	20 93 f8 03 	sts	0x03F8, r18
    2a48:	60 e8       	ldi	r22, 0x80	; 128
    2a4a:	7c e0       	ldi	r23, 0x0C	; 12
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2a4c:	9c 01       	movw	r18, r24
    2a4e:	22 0f       	add	r18, r18
    2a50:	33 1f       	adc	r19, r19
    2a52:	28 0f       	add	r18, r24
    2a54:	39 1f       	adc	r19, r25
    2a56:	22 0f       	add	r18, r18
    2a58:	33 1f       	adc	r19, r19
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	28 0f       	add	r18, r24
    2a64:	39 1f       	adc	r19, r25
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
    2a66:	40 81       	ld	r20, Z
    2a68:	51 81       	ldd	r21, Z+1	; 0x01
    2a6a:	44 0f       	add	r20, r20
    2a6c:	55 1f       	adc	r21, r21
    2a6e:	44 0f       	add	r20, r20
    2a70:	55 1f       	adc	r21, r21
    2a72:	44 0f       	add	r20, r20
    2a74:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2a76:	24 0f       	add	r18, r20
    2a78:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	48 1b       	sub	r20, r24
    2a7e:	59 0b       	sbc	r21, r25
    2a80:	ca 01       	movw	r24, r20
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	84 0f       	add	r24, r20
    2a88:	95 1f       	adc	r25, r21
    2a8a:	28 0f       	add	r18, r24
    2a8c:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    2a8e:	26 0f       	add	r18, r22
    2a90:	37 1f       	adc	r19, r23
    2a92:	30 93 f3 03 	sts	0x03F3, r19
    2a96:	20 93 f2 03 	sts	0x03F2, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2a9a:	37 fd       	sbrc	r19, 7
    2a9c:	4c c0       	rjmp	.+152    	; 0x2b36 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2a9e:	12 16       	cp	r1, r18
    2aa0:	13 06       	cpc	r1, r19
    2aa2:	0c f0       	brlt	.+2      	; 0x2aa6 <start_horizontal_speed_control_left+0xc4>
    2aa4:	52 c0       	rjmp	.+164    	; 0x2b4a <start_horizontal_speed_control_left+0x168>
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	97 fd       	sbrc	r25, 7
    2aac:	67 c0       	rjmp	.+206    	; 0x2b7c <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2aae:	5d e5       	ldi	r21, 0x5D	; 93
    2ab0:	21 3c       	cpi	r18, 0xC1	; 193
    2ab2:	35 07       	cpc	r19, r21
    2ab4:	0c f4       	brge	.+2      	; 0x2ab8 <start_horizontal_speed_control_left+0xd6>
    2ab6:	49 c0       	rjmp	.+146    	; 0x2b4a <start_horizontal_speed_control_left+0x168>
    2ab8:	80 ec       	ldi	r24, 0xC0	; 192
    2aba:	9d e5       	ldi	r25, 0x5D	; 93
    2abc:	90 93 f3 03 	sts	0x03F3, r25
    2ac0:	80 93 f2 03 	sts	0x03F2, r24
    2ac4:	2c ed       	ldi	r18, 0xDC	; 220
    2ac6:	35 e0       	ldi	r19, 0x05	; 5
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
	if(*pwm_left > 0) {
		*pwm_left += 30;
    2ac8:	22 5e       	subi	r18, 0xE2	; 226
    2aca:	3f 4f       	sbci	r19, 0xFF	; 255
    2acc:	31 83       	std	Z+1, r19	; 0x01
    2ace:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2ad0:	42 e0       	ldi	r20, 0x02	; 2
    2ad2:	21 30       	cpi	r18, 0x01	; 1
    2ad4:	34 07       	cpc	r19, r20
    2ad6:	0c f4       	brge	.+2      	; 0x2ada <start_horizontal_speed_control_left+0xf8>
    2ad8:	48 c0       	rjmp	.+144    	; 0x2b6a <start_horizontal_speed_control_left+0x188>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	92 e0       	ldi	r25, 0x02	; 2
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	08 95       	ret
}

void start_horizontal_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    2ae4:	10 92 f9 03 	sts	0x03F9, r1
    2ae8:	10 92 f8 03 	sts	0x03F8, r1
		delta_left_speed_current = 0;
    2aec:	10 92 3b 04 	sts	0x043B, r1
    2af0:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    2af4:	10 92 5d 04 	sts	0x045D, r1
    2af8:	10 92 5c 04 	sts	0x045C, r1
		return;
    2afc:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2afe:	49 ef       	ldi	r20, 0xF9	; 249
    2b00:	20 3c       	cpi	r18, 0xC0	; 192
    2b02:	34 07       	cpc	r19, r20
    2b04:	a4 f4       	brge	.+40     	; 0x2b2e <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    2b06:	20 ec       	ldi	r18, 0xC0	; 192
    2b08:	39 ef       	ldi	r19, 0xF9	; 249
    2b0a:	30 93 f9 03 	sts	0x03F9, r19
    2b0e:	20 93 f8 03 	sts	0x03F8, r18
    2b12:	60 e8       	ldi	r22, 0x80	; 128
    2b14:	73 ef       	ldi	r23, 0xF3	; 243
    2b16:	9a cf       	rjmp	.-204    	; 0x2a4c <start_horizontal_speed_control_left+0x6a>

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2b18:	80 91 e0 03 	lds	r24, 0x03E0
    2b1c:	90 91 e1 03 	lds	r25, 0x03E1
    2b20:	82 0f       	add	r24, r18
    2b22:	93 1f       	adc	r25, r19
    2b24:	90 93 3b 04 	sts	0x043B, r25
    2b28:	80 93 3a 04 	sts	0x043A, r24
    2b2c:	78 cf       	rjmp	.-272    	; 0x2a1e <start_horizontal_speed_control_left+0x3c>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2b2e:	b9 01       	movw	r22, r18
    2b30:	66 0f       	add	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	8b cf       	rjmp	.-234    	; 0x2a4c <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	97 fd       	sbrc	r25, 7
    2b3c:	06 c0       	rjmp	.+12     	; 0x2b4a <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2b3e:	10 92 f3 03 	sts	0x03F3, r1
    2b42:	10 92 f2 03 	sts	0x03F2, r1
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2b4a:	82 ea       	ldi	r24, 0xA2	; 162
    2b4c:	20 34       	cpi	r18, 0x40	; 64
    2b4e:	38 07       	cpc	r19, r24
    2b50:	dc f4       	brge	.+54     	; 0x2b88 <start_horizontal_speed_control_left+0x1a6>
    2b52:	80 e4       	ldi	r24, 0x40	; 64
    2b54:	92 ea       	ldi	r25, 0xA2	; 162
    2b56:	90 93 f3 03 	sts	0x03F3, r25
    2b5a:	80 93 f2 03 	sts	0x03F2, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2b5e:	24 e2       	ldi	r18, 0x24	; 36
    2b60:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2b62:	2e 51       	subi	r18, 0x1E	; 30
    2b64:	30 40       	sbci	r19, 0x00	; 0
    2b66:	31 83       	std	Z+1, r19	; 0x01
    2b68:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2b6a:	5e ef       	ldi	r21, 0xFE	; 254
    2b6c:	20 30       	cpi	r18, 0x00	; 0
    2b6e:	35 07       	cpc	r19, r21
    2b70:	24 f4       	brge	.+8      	; 0x2b7a <start_horizontal_speed_control_left+0x198>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	9e ef       	ldi	r25, 0xFE	; 254
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
    2b7a:	08 95       	ret

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2b7c:	10 92 f3 03 	sts	0x03F3, r1
    2b80:	10 92 f2 03 	sts	0x03F2, r1
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2b88:	35 95       	asr	r19
    2b8a:	27 95       	ror	r18
    2b8c:	35 95       	asr	r19
    2b8e:	27 95       	ror	r18
    2b90:	35 95       	asr	r19
    2b92:	27 95       	ror	r18
    2b94:	35 95       	asr	r19
    2b96:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2b98:	31 83       	std	Z+1, r19	; 0x01
    2b9a:	20 83       	st	Z, r18
	if(*pwm_left > 0) {
    2b9c:	12 16       	cp	r1, r18
    2b9e:	13 06       	cpc	r1, r19
    2ba0:	0c f4       	brge	.+2      	; 0x2ba4 <start_horizontal_speed_control_left+0x1c2>
    2ba2:	92 cf       	rjmp	.-220    	; 0x2ac8 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2ba4:	21 15       	cp	r18, r1
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	e1 f6       	brne	.-72     	; 0x2b62 <start_horizontal_speed_control_left+0x180>
    2baa:	08 95       	ret

00002bac <initPortsIO>:
#include <avr\io.h>
#include "ports_io.h"

void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2bac:	85 b7       	in	r24, 0x35	; 53
    2bae:	80 61       	ori	r24, 0x10	; 16
    2bb0:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;	// proximity pulses as output
    2bb2:	8f ef       	ldi	r24, 0xFF	; 255
    2bb4:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    2bb6:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2bb8:	97 ef       	ldi	r25, 0xF7	; 247
    2bba:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    2bbc:	20 ee       	ldi	r18, 0xE0	; 224
    2bbe:	25 b9       	out	0x05, r18	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    2bc0:	20 ef       	ldi	r18, 0xF0	; 240
    2bc2:	27 b9       	out	0x07, r18	; 7
	PORTC = 0xB0;	// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2bc4:	20 eb       	ldi	r18, 0xB0	; 176
    2bc6:	28 b9       	out	0x08, r18	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2bc8:	2c ef       	ldi	r18, 0xFC	; 252
    2bca:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0x03;	// default for unused pins is 0
    2bcc:	23 e0       	ldi	r18, 0x03	; 3
    2bce:	2b b9       	out	0x0b, r18	; 11

	DDRE = 0xFF;	// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2bd0:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2bd2:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    2bd4:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    2bd6:	83 bb       	out	0x13, r24	; 19
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;	// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;	// default for unused pins is 0, led3 to 1
    2bd8:	28 e0       	ldi	r18, 0x08	; 8
    2bda:	24 bb       	out	0x14, r18	; 20
	#endif	

	DDRH = 0xFF;	// all pins to output; when usart is activated it changes the pins direction accordingly
    2bdc:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2be0:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;	// cliff pulses as output; charge-on, button0, remote, charge status as input
    2be4:	2f e0       	ldi	r18, 0x0F	; 15
    2be6:	20 93 04 01 	sts	0x0104, r18
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	#endif
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
    2bea:	20 93 05 01 	sts	0x0105, r18
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    2bee:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    2bf2:	80 93 0a 01 	sts	0x010A, r24
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;	// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;	// pwm (unused) to 0, leds to 1
    2bf6:	90 93 0b 01 	sts	0x010B, r25
	#endif
		
}
    2bfa:	08 95       	ret

00002bfc <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    2bfc:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2c00:	10 92 bc 00 	sts	0x00BC, r1
}
    2c04:	08 95       	ret

00002c06 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2c06:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2c08:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2c0a:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2c0e:	80 e2       	ldi	r24, 0x20	; 32
    2c10:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2c14:	08 95       	ret

00002c16 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c16:	94 ea       	ldi	r25, 0xA4	; 164
    2c18:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2c1c:	90 91 bc 00 	lds	r25, 0x00BC
    2c20:	97 ff       	sbrs	r25, 7
    2c22:	fc cf       	rjmp	.-8      	; 0x2c1c <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2c24:	90 91 b9 00 	lds	r25, 0x00B9
    2c28:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2c2a:	98 30       	cpi	r25, 0x08	; 8
    2c2c:	21 f0       	breq	.+8      	; 0x2c36 <i2c_start+0x20>
    2c2e:	90 31       	cpi	r25, 0x10	; 16
    2c30:	11 f0       	breq	.+4      	; 0x2c36 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2c36:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c3a:	84 e8       	ldi	r24, 0x84	; 132
    2c3c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2c40:	80 91 bc 00 	lds	r24, 0x00BC
    2c44:	87 ff       	sbrs	r24, 7
    2c46:	fc cf       	rjmp	.-8      	; 0x2c40 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2c48:	90 91 b9 00 	lds	r25, 0x00B9
    2c4c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2c4e:	98 31       	cpi	r25, 0x18	; 24
    2c50:	21 f0       	breq	.+8      	; 0x2c5a <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 34       	cpi	r25, 0x40	; 64
    2c56:	19 f0       	breq	.+6      	; 0x2c5e <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2c58:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2c5a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2c5c:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	08 95       	ret

00002c62 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c62:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2c64:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2c66:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c68:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2c6c:	90 91 bc 00 	lds	r25, 0x00BC
    2c70:	97 ff       	sbrs	r25, 7
    2c72:	fc cf       	rjmp	.-8      	; 0x2c6c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2c74:	90 91 b9 00 	lds	r25, 0x00B9
    2c78:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2c7a:	98 30       	cpi	r25, 0x08	; 8
    2c7c:	11 f0       	breq	.+4      	; 0x2c82 <i2c_start_wait+0x20>
    2c7e:	90 31       	cpi	r25, 0x10	; 16
    2c80:	99 f7       	brne	.-26     	; 0x2c68 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2c82:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2c86:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2c8a:	90 91 bc 00 	lds	r25, 0x00BC
    2c8e:	97 ff       	sbrs	r25, 7
    2c90:	fc cf       	rjmp	.-8      	; 0x2c8a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2c92:	90 91 b9 00 	lds	r25, 0x00B9
    2c96:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2c98:	90 32       	cpi	r25, 0x20	; 32
    2c9a:	19 f0       	breq	.+6      	; 0x2ca2 <i2c_start_wait+0x40>
    2c9c:	98 35       	cpi	r25, 0x58	; 88
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <i2c_start_wait+0x40>
    2ca0:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2ca2:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2ca6:	90 91 bc 00 	lds	r25, 0x00BC
    2caa:	94 fd       	sbrc	r25, 4
    2cac:	fc cf       	rjmp	.-8      	; 0x2ca6 <i2c_start_wait+0x44>
    2cae:	dc cf       	rjmp	.-72     	; 0x2c68 <i2c_start_wait+0x6>

00002cb0 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2cb0:	94 ea       	ldi	r25, 0xA4	; 164
    2cb2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2cb6:	90 91 bc 00 	lds	r25, 0x00BC
    2cba:	97 ff       	sbrs	r25, 7
    2cbc:	fc cf       	rjmp	.-8      	; 0x2cb6 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2cbe:	90 91 b9 00 	lds	r25, 0x00B9
    2cc2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2cc4:	98 30       	cpi	r25, 0x08	; 8
    2cc6:	21 f0       	breq	.+8      	; 0x2cd0 <i2c_rep_start+0x20>
    2cc8:	90 31       	cpi	r25, 0x10	; 16
    2cca:	11 f0       	breq	.+4      	; 0x2cd0 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2cd0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2cd4:	84 e8       	ldi	r24, 0x84	; 132
    2cd6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2cda:	80 91 bc 00 	lds	r24, 0x00BC
    2cde:	87 ff       	sbrs	r24, 7
    2ce0:	fc cf       	rjmp	.-8      	; 0x2cda <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ce2:	90 91 b9 00 	lds	r25, 0x00B9
    2ce6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2ce8:	98 31       	cpi	r25, 0x18	; 24
    2cea:	21 f0       	breq	.+8      	; 0x2cf4 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 34       	cpi	r25, 0x40	; 64
    2cf0:	19 f0       	breq	.+6      	; 0x2cf8 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2cf2:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2cf6:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	08 95       	ret

00002cfc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2cfc:	84 e9       	ldi	r24, 0x94	; 148
    2cfe:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2d02:	80 91 bc 00 	lds	r24, 0x00BC
    2d06:	84 fd       	sbrc	r24, 4
    2d08:	fc cf       	rjmp	.-8      	; 0x2d02 <i2c_stop+0x6>

}/* i2c_stop */
    2d0a:	08 95       	ret

00002d0c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2d0c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2d10:	84 e8       	ldi	r24, 0x84	; 132
    2d12:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2d16:	80 91 bc 00 	lds	r24, 0x00BC
    2d1a:	87 ff       	sbrs	r24, 7
    2d1c:	fc cf       	rjmp	.-8      	; 0x2d16 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2d1e:	90 91 b9 00 	lds	r25, 0x00B9
    2d22:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	98 32       	cpi	r25, 0x28	; 40
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2d2a:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2d2e:	08 95       	ret

00002d30 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2d30:	84 ec       	ldi	r24, 0xC4	; 196
    2d32:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2d36:	80 91 bc 00 	lds	r24, 0x00BC
    2d3a:	87 ff       	sbrs	r24, 7
    2d3c:	fc cf       	rjmp	.-8      	; 0x2d36 <i2c_readAck+0x6>

    return TWDR;
    2d3e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2d42:	08 95       	ret

00002d44 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2d44:	84 e8       	ldi	r24, 0x84	; 132
    2d46:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2d4a:	80 91 bc 00 	lds	r24, 0x00BC
    2d4e:	87 ff       	sbrs	r24, 7
    2d50:	fc cf       	rjmp	.-8      	; 0x2d4a <i2c_readNak+0x6>
	
    return TWDR;
    2d52:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2d56:	08 95       	ret

00002d58 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    2d58:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2d5c:	80 e1       	ldi	r24, 0x10	; 16
    2d5e:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2d62:	e0 ec       	ldi	r30, 0xC0	; 192
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	82 60       	ori	r24, 0x02	; 2
    2d6a:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2d6c:	e1 ec       	ldi	r30, 0xC1	; 193
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	88 69       	ori	r24, 0x98	; 152
    2d74:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    2d76:	e2 ec       	ldi	r30, 0xC2	; 194
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	86 60       	ori	r24, 0x06	; 6
    2d7e:	80 83       	st	Z, r24

}
    2d80:	08 95       	ret

00002d82 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;
    2d82:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2d86:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2d8a:	10 92 c2 00 	sts	0x00C2, r1

}
    2d8e:	08 95       	ret

00002d90 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    2d90:	90 91 c0 00 	lds	r25, 0x00C0
    2d94:	95 ff       	sbrs	r25, 5
    2d96:	fc cf       	rjmp	.-8      	; 0x2d90 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    2d98:	80 93 c6 00 	sts	0x00C6, r24

}
    2d9c:	08 95       	ret

00002d9e <__vector_25>:

ISR(USART0_RX_vect) {
    2d9e:	1f 92       	push	r1
    2da0:	0f 92       	push	r0
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	0f 92       	push	r0
    2da6:	11 24       	eor	r1, r1
    2da8:	2f 93       	push	r18
    2daa:	8f 93       	push	r24
    2dac:	9f 93       	push	r25

	char receivedByte = UDR0;
    2dae:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    2db2:	90 91 18 02 	lds	r25, 0x0218
    2db6:	99 23       	and	r25, r25
    2db8:	b9 f0       	breq	.+46     	; 0x2de8 <__vector_25+0x4a>
		switch(receivedByte) {
    2dba:	82 33       	cpi	r24, 0x32	; 50
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <__vector_25+0x22>
    2dbe:	5b c0       	rjmp	.+182    	; 0x2e76 <__vector_25+0xd8>
    2dc0:	83 33       	cpi	r24, 0x33	; 51
    2dc2:	80 f5       	brcc	.+96     	; 0x2e24 <__vector_25+0x86>
    2dc4:	80 33       	cpi	r24, 0x30	; 48
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <__vector_25+0x2c>
    2dc8:	7e c0       	rjmp	.+252    	; 0x2ec6 <__vector_25+0x128>
    2dca:	81 33       	cpi	r24, 0x31	; 49
    2dcc:	29 f4       	brne	.+10     	; 0x2dd8 <__vector_25+0x3a>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2dd4:	10 92 18 02 	sts	0x0218, r1

	}



}
    2dd8:	9f 91       	pop	r25
    2dda:	8f 91       	pop	r24
    2ddc:	2f 91       	pop	r18
    2dde:	0f 90       	pop	r0
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	0f 90       	pop	r0
    2de4:	1f 90       	pop	r1
    2de6:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2de8:	90 91 17 02 	lds	r25, 0x0217
    2dec:	92 30       	cpi	r25, 0x02	; 2
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <__vector_25+0x54>
    2df0:	48 c0       	rjmp	.+144    	; 0x2e82 <__vector_25+0xe4>
    2df2:	93 30       	cpi	r25, 0x03	; 3
    2df4:	40 f1       	brcs	.+80     	; 0x2e46 <__vector_25+0xa8>
    2df6:	94 30       	cpi	r25, 0x04	; 4
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <__vector_25+0x5e>
    2dfa:	8c c0       	rjmp	.+280    	; 0x2f14 <__vector_25+0x176>
    2dfc:	94 30       	cpi	r25, 0x04	; 4
    2dfe:	08 f4       	brcc	.+2      	; 0x2e02 <__vector_25+0x64>
    2e00:	73 c0       	rjmp	.+230    	; 0x2ee8 <__vector_25+0x14a>
    2e02:	95 30       	cpi	r25, 0x05	; 5
    2e04:	49 f7       	brne	.-46     	; 0x2dd8 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    2e06:	83 37       	cpi	r24, 0x73	; 115
    2e08:	39 f7       	brne	.-50     	; 0x2dd8 <__vector_25+0x3a>
					sendAdcValues = 0;
    2e0a:	10 92 08 04 	sts	0x0408, r1
					choosePeripheral = 1;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	80 93 18 02 	sts	0x0218, r24

	}



}
    2e14:	9f 91       	pop	r25
    2e16:	8f 91       	pop	r24
    2e18:	2f 91       	pop	r18
    2e1a:	0f 90       	pop	r0
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	0f 90       	pop	r0
    2e20:	1f 90       	pop	r1
    2e22:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    2e24:	84 33       	cpi	r24, 0x34	; 52
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <__vector_25+0x8c>
    2e28:	59 c0       	rjmp	.+178    	; 0x2edc <__vector_25+0x13e>
    2e2a:	84 33       	cpi	r24, 0x34	; 52
    2e2c:	08 f4       	brcc	.+2      	; 0x2e30 <__vector_25+0x92>
    2e2e:	50 c0       	rjmp	.+160    	; 0x2ed0 <__vector_25+0x132>
    2e30:	85 33       	cpi	r24, 0x35	; 53
    2e32:	91 f6       	brne	.-92     	; 0x2dd8 <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2e34:	85 e0       	ldi	r24, 0x05	; 5
    2e36:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2e3a:	10 92 18 02 	sts	0x0218, r1
				sendAdcValues = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 08 04 	sts	0x0408, r24
				break;
    2e44:	c9 cf       	rjmp	.-110    	; 0x2dd8 <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2e46:	99 23       	and	r25, r25
    2e48:	91 f5       	brne	.+100    	; 0x2eae <__vector_25+0x110>
			case 0:	// red led
				if(receivedByte == '-') {
    2e4a:	8d 32       	cpi	r24, 0x2D	; 45
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <__vector_25+0xb2>
    2e4e:	d5 c0       	rjmp	.+426    	; 0x2ffa <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2e50:	8b 32       	cpi	r24, 0x2B	; 43
    2e52:	e9 f6       	brne	.-70     	; 0x2e0e <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2e54:	80 91 14 02 	lds	r24, 0x0214
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2e5c:	97 fd       	sbrc	r25, 7
    2e5e:	3f c1       	rjmp	.+638    	; 0x30de <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2e60:	80 93 14 02 	sts	0x0214, r24
					if(pwm_red == 0) {
    2e64:	88 23       	and	r24, r24
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <__vector_25+0xcc>
    2e68:	3c c1       	rjmp	.+632    	; 0x30e2 <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	90 93 89 00 	sts	0x0089, r25
    2e70:	80 93 88 00 	sts	0x0088, r24
    2e74:	b1 cf       	rjmp	.-158    	; 0x2dd8 <__vector_25+0x3a>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2e76:	82 e0       	ldi	r24, 0x02	; 2
    2e78:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2e7c:	10 92 18 02 	sts	0x0218, r1
				break;
    2e80:	ab cf       	rjmp	.-170    	; 0x2dd8 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2e82:	8d 32       	cpi	r24, 0x2D	; 45
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <__vector_25+0xea>
    2e86:	e8 c0       	rjmp	.+464    	; 0x3058 <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2e88:	8b 32       	cpi	r24, 0x2B	; 43
    2e8a:	09 f6       	brne	.-126    	; 0x2e0e <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2e8c:	80 91 16 02 	lds	r24, 0x0216
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2e94:	97 fd       	sbrc	r25, 7
    2e96:	35 c1       	rjmp	.+618    	; 0x3102 <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2e98:	80 93 16 02 	sts	0x0216, r24
					if(pwm_blue == 0) {
    2e9c:	88 23       	and	r24, r24
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <__vector_25+0x104>
    2ea0:	32 c1       	rjmp	.+612    	; 0x3106 <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	90 93 8d 00 	sts	0x008D, r25
    2ea8:	80 93 8c 00 	sts	0x008C, r24
    2eac:	95 cf       	rjmp	.-214    	; 0x2dd8 <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2eae:	91 30       	cpi	r25, 0x01	; 1
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <__vector_25+0x116>
    2eb2:	92 cf       	rjmp	.-220    	; 0x2dd8 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2eb4:	8d 32       	cpi	r24, 0x2D	; 45
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <__vector_25+0x11c>
    2eb8:	89 c0       	rjmp	.+274    	; 0x2fcc <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2eba:	8b 32       	cpi	r24, 0x2B	; 43
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <__vector_25+0x122>
    2ebe:	3f c0       	rjmp	.+126    	; 0x2f3e <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2ec0:	90 93 18 02 	sts	0x0218, r25
    2ec4:	89 cf       	rjmp	.-238    	; 0x2dd8 <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2ec6:	10 92 17 02 	sts	0x0217, r1
				choosePeripheral = 0;
    2eca:	10 92 18 02 	sts	0x0218, r1
				break;
    2ece:	84 cf       	rjmp	.-248    	; 0x2dd8 <__vector_25+0x3a>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2ed6:	10 92 18 02 	sts	0x0218, r1
				break;
    2eda:	7e cf       	rjmp	.-260    	; 0x2dd8 <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
    2edc:	84 e0       	ldi	r24, 0x04	; 4
    2ede:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2ee2:	10 92 18 02 	sts	0x0218, r1
				break;
    2ee6:	78 cf       	rjmp	.-272    	; 0x2dd8 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    2ee8:	8b 32       	cpi	r24, 0x2B	; 43
    2eea:	09 f4       	brne	.+2      	; 0x2eee <__vector_25+0x150>
    2eec:	cc c0       	rjmp	.+408    	; 0x3086 <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    2eee:	8d 32       	cpi	r24, 0x2D	; 45
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <__vector_25+0x156>
    2ef2:	51 c0       	rjmp	.+162    	; 0x2f96 <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2ef4:	83 37       	cpi	r24, 0x73	; 115
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <__vector_25+0x15c>
    2ef8:	8a cf       	rjmp	.-236    	; 0x2e0e <__vector_25+0x70>
					pwm_right = 0;
    2efa:	10 92 e5 03 	sts	0x03E5, r1
    2efe:	10 92 e4 03 	sts	0x03E4, r1
					OCR3A = 0;
    2f02:	10 92 99 00 	sts	0x0099, r1
    2f06:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2f0a:	10 92 9b 00 	sts	0x009B, r1
    2f0e:	10 92 9a 00 	sts	0x009A, r1
    2f12:	62 cf       	rjmp	.-316    	; 0x2dd8 <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    2f14:	8b 32       	cpi	r24, 0x2B	; 43
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <__vector_25+0x17c>
    2f18:	87 c0       	rjmp	.+270    	; 0x3028 <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2f1a:	8d 32       	cpi	r24, 0x2D	; 45
    2f1c:	09 f1       	breq	.+66     	; 0x2f60 <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2f1e:	83 37       	cpi	r24, 0x73	; 115
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <__vector_25+0x186>
    2f22:	75 cf       	rjmp	.-278    	; 0x2e0e <__vector_25+0x70>
					pwm_left = 0;
    2f24:	10 92 e7 03 	sts	0x03E7, r1
    2f28:	10 92 e6 03 	sts	0x03E6, r1
					OCR4A = 0;
    2f2c:	10 92 a9 00 	sts	0x00A9, r1
    2f30:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2f34:	10 92 ab 00 	sts	0x00AB, r1
    2f38:	10 92 aa 00 	sts	0x00AA, r1
    2f3c:	4d cf       	rjmp	.-358    	; 0x2dd8 <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2f3e:	80 91 15 02 	lds	r24, 0x0215
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2f46:	97 fd       	sbrc	r25, 7
    2f48:	d3 c0       	rjmp	.+422    	; 0x30f0 <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2f4a:	80 93 15 02 	sts	0x0215, r24
					if(pwm_green == 0) {
    2f4e:	88 23       	and	r24, r24
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <__vector_25+0x1b6>
    2f52:	d0 c0       	rjmp	.+416    	; 0x30f4 <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	90 93 8b 00 	sts	0x008B, r25
    2f5a:	80 93 8a 00 	sts	0x008A, r24
    2f5e:	3c cf       	rjmp	.-392    	; 0x2dd8 <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2f60:	80 91 e6 03 	lds	r24, 0x03E6
    2f64:	90 91 e7 03 	lds	r25, 0x03E7
    2f68:	4e 97       	sbiw	r24, 0x1e	; 30
    2f6a:	90 93 e7 03 	sts	0x03E7, r25
    2f6e:	80 93 e6 03 	sts	0x03E6, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2f72:	2c ef       	ldi	r18, 0xFC	; 252
    2f74:	80 30       	cpi	r24, 0x00	; 0
    2f76:	92 07       	cpc	r25, r18
    2f78:	0c f0       	brlt	.+2      	; 0x2f7c <__vector_25+0x1de>
    2f7a:	cc c0       	rjmp	.+408    	; 0x3114 <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	9c ef       	ldi	r25, 0xFC	; 252
    2f80:	90 93 e7 03 	sts	0x03E7, r25
    2f84:	80 93 e6 03 	sts	0x03E6, r24
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2f8c:	90 93 ab 00 	sts	0x00AB, r25
    2f90:	80 93 aa 00 	sts	0x00AA, r24
    2f94:	21 cf       	rjmp	.-446    	; 0x2dd8 <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2f96:	80 91 e4 03 	lds	r24, 0x03E4
    2f9a:	90 91 e5 03 	lds	r25, 0x03E5
    2f9e:	4e 97       	sbiw	r24, 0x1e	; 30
    2fa0:	90 93 e5 03 	sts	0x03E5, r25
    2fa4:	80 93 e4 03 	sts	0x03E4, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2fa8:	2c ef       	ldi	r18, 0xFC	; 252
    2faa:	80 30       	cpi	r24, 0x00	; 0
    2fac:	92 07       	cpc	r25, r18
    2fae:	0c f0       	brlt	.+2      	; 0x2fb2 <__vector_25+0x214>
    2fb0:	b7 c0       	rjmp	.+366    	; 0x3120 <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	9c ef       	ldi	r25, 0xFC	; 252
    2fb6:	90 93 e5 03 	sts	0x03E5, r25
    2fba:	80 93 e4 03 	sts	0x03E4, r24
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2fc2:	90 93 9b 00 	sts	0x009B, r25
    2fc6:	80 93 9a 00 	sts	0x009A, r24
    2fca:	06 cf       	rjmp	.-500    	; 0x2dd8 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2fcc:	80 91 80 00 	lds	r24, 0x0080
    2fd0:	80 62       	ori	r24, 0x20	; 32
    2fd2:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2fd6:	80 91 15 02 	lds	r24, 0x0215
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2fde:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	19 f0       	breq	.+6      	; 0x2fea <__vector_25+0x24c>
    2fe4:	14 f0       	brlt	.+4      	; 0x2fea <__vector_25+0x24c>
    2fe6:	8f ef       	ldi	r24, 0xFF	; 255
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	80 93 15 02 	sts	0x0215, r24
					OCR1B = pwm_green;
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	90 93 8b 00 	sts	0x008B, r25
    2ff4:	80 93 8a 00 	sts	0x008A, r24
    2ff8:	ef ce       	rjmp	.-546    	; 0x2dd8 <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2ffa:	80 91 80 00 	lds	r24, 0x0080
    2ffe:	80 68       	ori	r24, 0x80	; 128
    3000:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    3004:	80 91 14 02 	lds	r24, 0x0214
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    300c:	8f 3f       	cpi	r24, 0xFF	; 255
    300e:	91 05       	cpc	r25, r1
    3010:	19 f0       	breq	.+6      	; 0x3018 <__vector_25+0x27a>
    3012:	14 f0       	brlt	.+4      	; 0x3018 <__vector_25+0x27a>
    3014:	8f ef       	ldi	r24, 0xFF	; 255
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	80 93 14 02 	sts	0x0214, r24
					OCR1A = pwm_red;
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	90 93 89 00 	sts	0x0089, r25
    3022:	80 93 88 00 	sts	0x0088, r24
    3026:	d8 ce       	rjmp	.-592    	; 0x2dd8 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    3028:	80 91 e6 03 	lds	r24, 0x03E6
    302c:	90 91 e7 03 	lds	r25, 0x03E7
    3030:	4e 96       	adiw	r24, 0x1e	; 30
    3032:	90 93 e7 03 	sts	0x03E7, r25
    3036:	80 93 e6 03 	sts	0x03E6, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    303a:	24 e0       	ldi	r18, 0x04	; 4
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	92 07       	cpc	r25, r18
    3040:	d4 f1       	brlt	.+116    	; 0x30b6 <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	94 e0       	ldi	r25, 0x04	; 4
    3046:	90 93 e7 03 	sts	0x03E7, r25
    304a:	80 93 e6 03 	sts	0x03E6, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    304e:	90 93 a9 00 	sts	0x00A9, r25
    3052:	80 93 a8 00 	sts	0x00A8, r24
    3056:	c0 ce       	rjmp	.-640    	; 0x2dd8 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    3058:	80 91 80 00 	lds	r24, 0x0080
    305c:	88 60       	ori	r24, 0x08	; 8
    305e:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    3062:	80 91 16 02 	lds	r24, 0x0216
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    306a:	8f 3f       	cpi	r24, 0xFF	; 255
    306c:	91 05       	cpc	r25, r1
    306e:	19 f0       	breq	.+6      	; 0x3076 <__vector_25+0x2d8>
    3070:	14 f0       	brlt	.+4      	; 0x3076 <__vector_25+0x2d8>
    3072:	8f ef       	ldi	r24, 0xFF	; 255
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	80 93 16 02 	sts	0x0216, r24
					OCR1C = pwm_blue;
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	90 93 8d 00 	sts	0x008D, r25
    3080:	80 93 8c 00 	sts	0x008C, r24
    3084:	a9 ce       	rjmp	.-686    	; 0x2dd8 <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    3086:	80 91 e4 03 	lds	r24, 0x03E4
    308a:	90 91 e5 03 	lds	r25, 0x03E5
    308e:	4e 96       	adiw	r24, 0x1e	; 30
    3090:	90 93 e5 03 	sts	0x03E5, r25
    3094:	80 93 e4 03 	sts	0x03E4, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    3098:	24 e0       	ldi	r18, 0x04	; 4
    309a:	81 30       	cpi	r24, 0x01	; 1
    309c:	92 07       	cpc	r25, r18
    309e:	ac f0       	brlt	.+42     	; 0x30ca <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	94 e0       	ldi	r25, 0x04	; 4
    30a4:	90 93 e5 03 	sts	0x03E5, r25
    30a8:	80 93 e4 03 	sts	0x03E4, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    30ac:	90 93 99 00 	sts	0x0099, r25
    30b0:	80 93 98 00 	sts	0x0098, r24
    30b4:	91 ce       	rjmp	.-734    	; 0x2dd8 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    30b6:	97 ff       	sbrs	r25, 7
    30b8:	ca cf       	rjmp	.-108    	; 0x304e <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    30ba:	90 95       	com	r25
    30bc:	81 95       	neg	r24
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	90 93 ab 00 	sts	0x00AB, r25
    30c4:	80 93 aa 00 	sts	0x00AA, r24
    30c8:	87 ce       	rjmp	.-754    	; 0x2dd8 <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    30ca:	97 ff       	sbrs	r25, 7
    30cc:	ef cf       	rjmp	.-34     	; 0x30ac <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    30ce:	90 95       	com	r25
    30d0:	81 95       	neg	r24
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	90 93 9b 00 	sts	0x009B, r25
    30d8:	80 93 9a 00 	sts	0x009A, r24
    30dc:	7d ce       	rjmp	.-774    	; 0x2dd8 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    30de:	10 92 14 02 	sts	0x0214, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    30e2:	80 91 80 00 	lds	r24, 0x0080
    30e6:	8f 77       	andi	r24, 0x7F	; 127
    30e8:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    30ec:	2d 98       	cbi	0x05, 5	; 5
    30ee:	74 ce       	rjmp	.-792    	; 0x2dd8 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    30f0:	10 92 15 02 	sts	0x0215, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    30f4:	80 91 80 00 	lds	r24, 0x0080
    30f8:	8f 7d       	andi	r24, 0xDF	; 223
    30fa:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    30fe:	2e 98       	cbi	0x05, 6	; 5
    3100:	6b ce       	rjmp	.-810    	; 0x2dd8 <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    3102:	10 92 16 02 	sts	0x0216, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    3106:	80 91 80 00 	lds	r24, 0x0080
    310a:	87 7f       	andi	r24, 0xF7	; 247
    310c:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    3110:	2f 98       	cbi	0x05, 7	; 5
    3112:	62 ce       	rjmp	.-828    	; 0x2dd8 <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    3114:	97 ff       	sbrs	r25, 7
    3116:	9b cf       	rjmp	.-202    	; 0x304e <__vector_25+0x2b0>
						OCR4A = pwm_left;
    3118:	90 95       	com	r25
    311a:	81 95       	neg	r24
    311c:	9f 4f       	sbci	r25, 0xFF	; 255
    311e:	36 cf       	rjmp	.-404    	; 0x2f8c <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3120:	97 ff       	sbrs	r25, 7
    3122:	c4 cf       	rjmp	.-120    	; 0x30ac <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    3124:	90 95       	com	r25
    3126:	81 95       	neg	r24
    3128:	9f 4f       	sbci	r25, 0xFF	; 255
    312a:	4b cf       	rjmp	.-362    	; 0x2fc2 <__vector_25+0x224>

0000312c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    312c:	86 b1       	in	r24, 0x06	; 6
    312e:	66 b1       	in	r22, 0x06	; 6
    3130:	26 b1       	in	r18, 0x06	; 6
    3132:	46 b1       	in	r20, 0x06	; 6
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	28 70       	andi	r18, 0x08	; 8
    3138:	30 70       	andi	r19, 0x00	; 0
    313a:	35 95       	asr	r19
    313c:	27 95       	ror	r18
    313e:	35 95       	asr	r19
    3140:	27 95       	ror	r18
    3142:	35 95       	asr	r19
    3144:	27 95       	ror	r18
    3146:	22 0f       	add	r18, r18
    3148:	33 1f       	adc	r19, r19
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	64 70       	andi	r22, 0x04	; 4
    314e:	70 70       	andi	r23, 0x00	; 0
    3150:	75 95       	asr	r23
    3152:	67 95       	ror	r22
    3154:	75 95       	asr	r23
    3156:	67 95       	ror	r22
    3158:	26 0f       	add	r18, r22
    315a:	37 1f       	adc	r19, r23
    315c:	22 0f       	add	r18, r18
    315e:	33 1f       	adc	r19, r19
    3160:	50 e0       	ldi	r21, 0x00	; 0
    3162:	42 70       	andi	r20, 0x02	; 2
    3164:	50 70       	andi	r21, 0x00	; 0
    3166:	55 95       	asr	r21
    3168:	47 95       	ror	r20
    316a:	24 0f       	add	r18, r20
    316c:	35 1f       	adc	r19, r21
    316e:	22 0f       	add	r18, r18
    3170:	81 70       	andi	r24, 0x01	; 1
}
    3172:	82 0f       	add	r24, r18
    3174:	08 95       	ret

00003176 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3176:	f8 94       	cli

	initPortsIO();
    3178:	0e 94 d6 15 	call	0x2bac	; 0x2bac <initPortsIO>
	initAdc();
    317c:	0e 94 ae 1b 	call	0x375c	; 0x375c <initAdc>
	initMotors();
    3180:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <initMotors>
	initRGBleds();
    3184:	0e 94 41 20 	call	0x4082	; 0x4082 <initRGBleds>
	initSPI();
    3188:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <initSPI>
	mirf_init();
    318c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <mirf_init>
	initUsart();
    3190:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <initUsart>
	initAccelerometer();
    3194:	0e 94 58 19 	call	0x32b0	; 0x32b0 <initAccelerometer>
	init_ir_remote_control();
    3198:	0e 94 0d 10 	call	0x201a	; 0x201a <init_ir_remote_control>

	sei();			// enable global interrupts
    319c:	78 94       	sei

	
}
    319e:	08 95       	ret

000031a0 <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    31a0:	1f 92       	push	r1
    31a2:	0f 92       	push	r0
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	0f 92       	push	r0
    31a8:	11 24       	eor	r1, r1

}
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <sleep>:

void sleep(unsigned char seconds) {
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    31b8:	9e e1       	ldi	r25, 0x1E	; 30
    31ba:	89 9f       	mul	r24, r25
    31bc:	e0 01       	movw	r28, r0
    31be:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    31c0:	80 91 68 00 	lds	r24, 0x0068
    31c4:	8d 7f       	andi	r24, 0xFD	; 253
    31c6:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    31ca:	80 91 6c 00 	lds	r24, 0x006C
    31ce:	8f 77       	andi	r24, 0x7F	; 127
    31d0:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    31d4:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    31d6:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    31da:	80 91 7a 00 	lds	r24, 0x007A
    31de:	80 61       	ori	r24, 0x10	; 16
    31e0:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    31e4:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    31e8:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    31ec:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    31f0:	88 b3       	in	r24, 0x18	; 24
    31f2:	87 60       	ori	r24, 0x07	; 7
    31f4:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    31f6:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    31fa:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    31fe:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3202:	89 b3       	in	r24, 0x19	; 25
    3204:	87 60       	ori	r24, 0x07	; 7
    3206:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3208:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    320c:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3210:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <closeUsart>
	closeSPI();
    3214:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <closeSPI>
	i2c_close();
    3218:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <i2c_close>

	// set port pins
	initPortsIO();
    321c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3220:	83 b7       	in	r24, 0x33	; 51
    3222:	8f 60       	ori	r24, 0x0F	; 15
    3224:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    322c:	80 91 b0 00 	lds	r24, 0x00B0
    3230:	8d 7f       	andi	r24, 0xFD	; 253
    3232:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3236:	80 91 b1 00 	lds	r24, 0x00B1
    323a:	87 60       	ori	r24, 0x07	; 7
    323c:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3240:	20 97       	sbiw	r28, 0x00	; 0
    3242:	19 f0       	breq	.+6      	; 0x324a <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3244:	88 95       	sleep
		pause--;
    3246:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3248:	e9 f7       	brne	.-6      	; 0x3244 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    324a:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    324c:	80 91 b1 00 	lds	r24, 0x00B1
    3250:	88 7f       	andi	r24, 0xF8	; 248
    3252:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3256:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    325a:	80 91 b0 00 	lds	r24, 0x00B0
    325e:	82 60       	ori	r24, 0x02	; 2
    3260:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3264:	8f ef       	ldi	r24, 0xFF	; 255
    3266:	80 93 14 02 	sts	0x0214, r24
	pwm_green = 255;
    326a:	80 93 15 02 	sts	0x0215, r24
	pwm_blue = 255;
    326e:	80 93 16 02 	sts	0x0216, r24
	pwm_right = 0;
    3272:	10 92 e5 03 	sts	0x03E5, r1
    3276:	10 92 e4 03 	sts	0x03E4, r1
	pwm_left = 0;
    327a:	10 92 e7 03 	sts	0x03E7, r1
    327e:	10 92 e6 03 	sts	0x03E6, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3282:	f8 94       	cli

	initPortsIO();
    3284:	0e 94 d6 15 	call	0x2bac	; 0x2bac <initPortsIO>
	initAdc();
    3288:	0e 94 ae 1b 	call	0x375c	; 0x375c <initAdc>
	initMotors();
    328c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <initMotors>
	initRGBleds();
    3290:	0e 94 41 20 	call	0x4082	; 0x4082 <initRGBleds>
	initSPI();
    3294:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <initSPI>
	mirf_init();
    3298:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <mirf_init>
	initUsart();
    329c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <initUsart>
	initAccelerometer();
    32a0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <initAccelerometer>
	init_ir_remote_control();
    32a4:	0e 94 0d 10 	call	0x201a	; 0x201a <init_ir_remote_control>

	sei();			// enable global interrupts
    32a8:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	08 95       	ret

000032b0 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    32b0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    32b4:	80 91 1b 02 	lds	r24, 0x021B
    32b8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    32bc:	88 23       	and	r24, r24
    32be:	49 f4       	brne	.+18     	; 0x32d2 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    32c0:	86 e1       	ldi	r24, 0x16	; 22
    32c2:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    32c6:	85 e4       	ldi	r24, 0x45	; 69
    32c8:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    32cc:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    32d0:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    32d2:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    32d6:	86 ea       	ldi	r24, 0xA6	; 166
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	90 93 1c 02 	sts	0x021C, r25
    32de:	80 93 1b 02 	sts	0x021B, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    32e2:	86 ea       	ldi	r24, 0xA6	; 166
    32e4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    32e8:	88 23       	and	r24, r24
    32ea:	41 f5       	brne	.+80     	; 0x333c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    32ec:	8d e2       	ldi	r24, 0x2D	; 45
    32ee:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x08);	// measurement mode
    32f2:	88 e0       	ldi	r24, 0x08	; 8
    32f4:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    32f8:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    32fc:	80 91 1b 02 	lds	r24, 0x021B
    3300:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3304:	88 23       	and	r24, r24
    3306:	d1 f4       	brne	.+52     	; 0x333c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3308:	81 e3       	ldi	r24, 0x31	; 49
    330a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3314:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3318:	80 91 1b 02 	lds	r24, 0x021B
    331c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3320:	88 23       	and	r24, r24
    3322:	61 f4       	brne	.+24     	; 0x333c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3324:	8c e2       	ldi	r24, 0x2C	; 44
    3326:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    332a:	89 e0       	ldi	r24, 0x09	; 9
    332c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3330:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	80 93 0d 04 	sts	0x040D, r24
    333a:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    333c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	80 93 0d 04 	sts	0x040D, r24
    3346:	08 95       	ret

00003348 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3348:	80 91 1b 02 	lds	r24, 0x021B
    334c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3350:	88 23       	and	r24, r24
    3352:	51 f4       	brne	.+20     	; 0x3368 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3354:	86 e1       	ldi	r24, 0x16	; 22
    3356:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    335a:	85 e4       	ldi	r24, 0x45	; 69
    335c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3360:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    }

	return 0;				// configuration ok
    3364:	80 e0       	ldi	r24, 0x00	; 0

}
    3366:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3368:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
		return 1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	08 95       	ret

00003370 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3370:	80 91 1b 02 	lds	r24, 0x021B
    3374:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3378:	88 23       	and	r24, r24
    337a:	31 f5       	brne	.+76     	; 0x33c8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    337c:	8d e2       	ldi	r24, 0x2D	; 45
    337e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x08);	// measurement mode
    3382:	88 e0       	ldi	r24, 0x08	; 8
    3384:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3388:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    338c:	80 91 1b 02 	lds	r24, 0x021B
    3390:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3394:	88 23       	and	r24, r24
    3396:	c1 f4       	brne	.+48     	; 0x33c8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3398:	81 e3       	ldi	r24, 0x31	; 49
    339a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    33a4:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    33a8:	80 91 1b 02 	lds	r24, 0x021B
    33ac:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    33b0:	88 23       	and	r24, r24
    33b2:	51 f4       	brne	.+20     	; 0x33c8 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    33b4:	8c e2       	ldi	r24, 0x2C	; 44
    33b6:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    33ba:	89 e0       	ldi	r24, 0x09	; 9
    33bc:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    33c0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
    }

	return 0;
    33c4:	80 e0       	ldi	r24, 0x00	; 0

}
    33c6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    33c8:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>
		return 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	08 95       	ret

000033d0 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    33d0:	ff 92       	push	r15
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	0f 92       	push	r0
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    33e0:	80 91 0d 04 	lds	r24, 0x040D
    33e4:	88 23       	and	r24, r24
    33e6:	91 f0       	breq	.+36     	; 0x340c <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	09 f4       	brne	.+2      	; 0x33ee <readAccelXY+0x1e>
    33ec:	88 c0       	rjmp	.+272    	; 0x34fe <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    33ee:	10 92 0f 04 	sts	0x040F, r1
    33f2:	10 92 0e 04 	sts	0x040E, r1
		accY = 0;
    33f6:	10 92 11 04 	sts	0x0411, r1
    33fa:	10 92 10 04 	sts	0x0410, r1

	}

}
    33fe:	0f 90       	pop	r0
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	ff 90       	pop	r15
    340a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    340c:	80 91 1b 02 	lds	r24, 0x021B
    3410:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3414:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    3416:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    341a:	80 91 1b 02 	lds	r24, 0x021B
    341e:	8f 5f       	subi	r24, 0xFF	; 255
    3420:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3424:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    3428:	08 2f       	mov	r16, r24
    342a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    342e:	f8 2e       	mov	r15, r24
    3430:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    3434:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3436:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3440:	90 91 2d 04 	lds	r25, 0x042D
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	99 23       	and	r25, r25
    3448:	39 f1       	breq	.+78     	; 0x3498 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    344a:	4f 2d       	mov	r20, r15
    344c:	55 27       	eor	r21, r21
    344e:	47 fd       	sbrc	r20, 7
    3450:	50 95       	com	r21
    3452:	54 2f       	mov	r21, r20
    3454:	44 27       	eor	r20, r20
    3456:	60 2f       	mov	r22, r16
    3458:	77 27       	eor	r23, r23
    345a:	67 fd       	sbrc	r22, 7
    345c:	70 95       	com	r23
    345e:	46 2b       	or	r20, r22
    3460:	57 2b       	or	r21, r23
    3462:	50 93 0f 04 	sts	0x040F, r21
    3466:	40 93 0e 04 	sts	0x040E, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    346a:	28 2f       	mov	r18, r24
    346c:	33 27       	eor	r19, r19
    346e:	27 fd       	sbrc	r18, 7
    3470:	30 95       	com	r19
    3472:	32 2f       	mov	r19, r18
    3474:	22 27       	eor	r18, r18
    3476:	81 2f       	mov	r24, r17
    3478:	99 27       	eor	r25, r25
    347a:	87 fd       	sbrc	r24, 7
    347c:	90 95       	com	r25
    347e:	28 2b       	or	r18, r24
    3480:	39 2b       	or	r19, r25
    3482:	30 93 11 04 	sts	0x0411, r19
    3486:	20 93 10 04 	sts	0x0410, r18
		accX = 0;
		accY = 0;

	}

}
    348a:	0f 90       	pop	r0
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	1f 91       	pop	r17
    3492:	0f 91       	pop	r16
    3494:	ff 90       	pop	r15
    3496:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3498:	4f 2d       	mov	r20, r15
    349a:	55 27       	eor	r21, r21
    349c:	47 fd       	sbrc	r20, 7
    349e:	50 95       	com	r21
    34a0:	54 2f       	mov	r21, r20
    34a2:	44 27       	eor	r20, r20
    34a4:	60 2f       	mov	r22, r16
    34a6:	77 27       	eor	r23, r23
    34a8:	67 fd       	sbrc	r22, 7
    34aa:	70 95       	com	r23
    34ac:	46 2b       	or	r20, r22
    34ae:	57 2b       	or	r21, r23
    34b0:	60 91 1a 04 	lds	r22, 0x041A
    34b4:	70 91 1b 04 	lds	r23, 0x041B
    34b8:	46 1b       	sub	r20, r22
    34ba:	57 0b       	sbc	r21, r23
    34bc:	50 93 0f 04 	sts	0x040F, r21
    34c0:	40 93 0e 04 	sts	0x040E, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    34c4:	28 2f       	mov	r18, r24
    34c6:	33 27       	eor	r19, r19
    34c8:	27 fd       	sbrc	r18, 7
    34ca:	30 95       	com	r19
    34cc:	32 2f       	mov	r19, r18
    34ce:	22 27       	eor	r18, r18
    34d0:	81 2f       	mov	r24, r17
    34d2:	99 27       	eor	r25, r25
    34d4:	87 fd       	sbrc	r24, 7
    34d6:	90 95       	com	r25
    34d8:	28 2b       	or	r18, r24
    34da:	39 2b       	or	r19, r25
    34dc:	80 91 1c 04 	lds	r24, 0x041C
    34e0:	90 91 1d 04 	lds	r25, 0x041D
    34e4:	28 1b       	sub	r18, r24
    34e6:	39 0b       	sbc	r19, r25
    34e8:	30 93 11 04 	sts	0x0411, r19
    34ec:	20 93 10 04 	sts	0x0410, r18
		accX = 0;
		accY = 0;

	}

}
    34f0:	0f 90       	pop	r0
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    34fe:	80 91 1b 02 	lds	r24, 0x021B
    3502:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3506:	82 e3       	ldi	r24, 0x32	; 50
    3508:	86 cf       	rjmp	.-244    	; 0x3416 <readAccelXY+0x46>

0000350a <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	00 d0       	rcall	.+0      	; 0x3510 <readAccelXYZ+0x6>
    3510:	00 d0       	rcall	.+0      	; 0x3512 <readAccelXYZ+0x8>
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    3516:	80 91 0d 04 	lds	r24, 0x040D
    351a:	88 23       	and	r24, r24
    351c:	c1 f0       	breq	.+48     	; 0x354e <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    351e:	81 30       	cpi	r24, 0x01	; 1
    3520:	09 f4       	brne	.+2      	; 0x3524 <readAccelXYZ+0x1a>
    3522:	ad c0       	rjmp	.+346    	; 0x367e <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    3524:	10 92 0f 04 	sts	0x040F, r1
    3528:	10 92 0e 04 	sts	0x040E, r1
		accY = 0;
    352c:	10 92 11 04 	sts	0x0411, r1
    3530:	10 92 10 04 	sts	0x0410, r1
		accZ = 0;
    3534:	10 92 13 04 	sts	0x0413, r1
    3538:	10 92 12 04 	sts	0x0412, r1

	}

}
    353c:	26 96       	adiw	r28, 0x06	; 6
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    354e:	80 91 1b 02 	lds	r24, 0x021B
    3552:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3556:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3558:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    355c:	80 91 1b 02 	lds	r24, 0x021B
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3566:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    3570:	8a 83       	std	Y+2, r24	; 0x02
    3572:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    3576:	8b 83       	std	Y+3, r24	; 0x03
    3578:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    357c:	8c 83       	std	Y+4, r24	; 0x04
    357e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <i2c_readAck>
    3582:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3584:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <i2c_readNak>
    3588:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    358a:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    358e:	80 91 2d 04 	lds	r24, 0x042D
    3592:	88 23       	and	r24, r24
    3594:	89 f1       	breq	.+98     	; 0x35f8 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	99 27       	eor	r25, r25
    359a:	87 fd       	sbrc	r24, 7
    359c:	90 95       	com	r25
    359e:	98 2f       	mov	r25, r24
    35a0:	88 27       	eor	r24, r24
    35a2:	29 81       	ldd	r18, Y+1	; 0x01
    35a4:	33 27       	eor	r19, r19
    35a6:	27 fd       	sbrc	r18, 7
    35a8:	30 95       	com	r19
    35aa:	82 2b       	or	r24, r18
    35ac:	93 2b       	or	r25, r19
    35ae:	90 93 0f 04 	sts	0x040F, r25
    35b2:	80 93 0e 04 	sts	0x040E, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    35b6:	8c 81       	ldd	r24, Y+4	; 0x04
    35b8:	99 27       	eor	r25, r25
    35ba:	87 fd       	sbrc	r24, 7
    35bc:	90 95       	com	r25
    35be:	98 2f       	mov	r25, r24
    35c0:	88 27       	eor	r24, r24
    35c2:	2b 81       	ldd	r18, Y+3	; 0x03
    35c4:	33 27       	eor	r19, r19
    35c6:	27 fd       	sbrc	r18, 7
    35c8:	30 95       	com	r19
    35ca:	82 2b       	or	r24, r18
    35cc:	93 2b       	or	r25, r19
    35ce:	90 93 11 04 	sts	0x0411, r25
    35d2:	80 93 10 04 	sts	0x0410, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    35d6:	8e 81       	ldd	r24, Y+6	; 0x06
    35d8:	99 27       	eor	r25, r25
    35da:	87 fd       	sbrc	r24, 7
    35dc:	90 95       	com	r25
    35de:	98 2f       	mov	r25, r24
    35e0:	88 27       	eor	r24, r24
    35e2:	2d 81       	ldd	r18, Y+5	; 0x05
    35e4:	33 27       	eor	r19, r19
    35e6:	27 fd       	sbrc	r18, 7
    35e8:	30 95       	com	r19
    35ea:	82 2b       	or	r24, r18
    35ec:	93 2b       	or	r25, r19
    35ee:	90 93 13 04 	sts	0x0413, r25
    35f2:	80 93 12 04 	sts	0x0412, r24
    35f6:	a2 cf       	rjmp	.-188    	; 0x353c <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    35f8:	8a 81       	ldd	r24, Y+2	; 0x02
    35fa:	99 27       	eor	r25, r25
    35fc:	87 fd       	sbrc	r24, 7
    35fe:	90 95       	com	r25
    3600:	98 2f       	mov	r25, r24
    3602:	88 27       	eor	r24, r24
    3604:	29 81       	ldd	r18, Y+1	; 0x01
    3606:	33 27       	eor	r19, r19
    3608:	27 fd       	sbrc	r18, 7
    360a:	30 95       	com	r19
    360c:	82 2b       	or	r24, r18
    360e:	93 2b       	or	r25, r19
    3610:	20 91 1a 04 	lds	r18, 0x041A
    3614:	30 91 1b 04 	lds	r19, 0x041B
    3618:	82 1b       	sub	r24, r18
    361a:	93 0b       	sbc	r25, r19
    361c:	90 93 0f 04 	sts	0x040F, r25
    3620:	80 93 0e 04 	sts	0x040E, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3624:	8c 81       	ldd	r24, Y+4	; 0x04
    3626:	99 27       	eor	r25, r25
    3628:	87 fd       	sbrc	r24, 7
    362a:	90 95       	com	r25
    362c:	98 2f       	mov	r25, r24
    362e:	88 27       	eor	r24, r24
    3630:	2b 81       	ldd	r18, Y+3	; 0x03
    3632:	33 27       	eor	r19, r19
    3634:	27 fd       	sbrc	r18, 7
    3636:	30 95       	com	r19
    3638:	82 2b       	or	r24, r18
    363a:	93 2b       	or	r25, r19
    363c:	20 91 1c 04 	lds	r18, 0x041C
    3640:	30 91 1d 04 	lds	r19, 0x041D
    3644:	82 1b       	sub	r24, r18
    3646:	93 0b       	sbc	r25, r19
    3648:	90 93 11 04 	sts	0x0411, r25
    364c:	80 93 10 04 	sts	0x0410, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3650:	8e 81       	ldd	r24, Y+6	; 0x06
    3652:	99 27       	eor	r25, r25
    3654:	87 fd       	sbrc	r24, 7
    3656:	90 95       	com	r25
    3658:	98 2f       	mov	r25, r24
    365a:	88 27       	eor	r24, r24
    365c:	2d 81       	ldd	r18, Y+5	; 0x05
    365e:	33 27       	eor	r19, r19
    3660:	27 fd       	sbrc	r18, 7
    3662:	30 95       	com	r19
    3664:	82 2b       	or	r24, r18
    3666:	93 2b       	or	r25, r19
    3668:	20 91 1e 04 	lds	r18, 0x041E
    366c:	30 91 1f 04 	lds	r19, 0x041F
    3670:	82 1b       	sub	r24, r18
    3672:	93 0b       	sbc	r25, r19
    3674:	90 93 13 04 	sts	0x0413, r25
    3678:	80 93 12 04 	sts	0x0412, r24
    367c:	5f cf       	rjmp	.-322    	; 0x353c <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    367e:	80 91 1b 02 	lds	r24, 0x021B
    3682:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3686:	82 e3       	ldi	r24, 0x32	; 50
    3688:	67 cf       	rjmp	.-306    	; 0x3558 <readAccelXYZ+0x4e>

0000368a <computeAngle>:

	}

}

void computeAngle() {
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3692:	80 91 12 04 	lds	r24, 0x0412
    3696:	90 91 13 04 	lds	r25, 0x0413
    369a:	97 fd       	sbrc	r25, 7
    369c:	5b c0       	rjmp	.+182    	; 0x3754 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    369e:	80 31       	cpi	r24, 0x10	; 16
    36a0:	91 05       	cpc	r25, r1
    36a2:	08 f0       	brcs	.+2      	; 0x36a6 <computeAngle+0x1c>
    36a4:	42 c0       	rjmp	.+132    	; 0x372a <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	80 93 1d 02 	sts	0x021D, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    36ac:	90 91 1c 02 	lds	r25, 0x021C
    36b0:	98 17       	cp	r25, r24
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <computeAngle+0x2c>
    36b4:	42 c0       	rjmp	.+132    	; 0x373a <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    36b6:	10 92 28 04 	sts	0x0428, r1
	}
	prevPosition = currPosition;
    36ba:	80 93 1c 02 	sts	0x021C, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    36be:	60 91 0e 04 	lds	r22, 0x040E
    36c2:	70 91 0f 04 	lds	r23, 0x040F
    36c6:	88 27       	eor	r24, r24
    36c8:	77 fd       	sbrc	r23, 7
    36ca:	80 95       	com	r24
    36cc:	98 2f       	mov	r25, r24
    36ce:	0e 94 b7 21 	call	0x436e	; 0x436e <__floatsisf>
    36d2:	7b 01       	movw	r14, r22
    36d4:	8c 01       	movw	r16, r24
    36d6:	60 91 10 04 	lds	r22, 0x0410
    36da:	70 91 11 04 	lds	r23, 0x0411
    36de:	88 27       	eor	r24, r24
    36e0:	77 fd       	sbrc	r23, 7
    36e2:	80 95       	com	r24
    36e4:	98 2f       	mov	r25, r24
    36e6:	0e 94 b7 21 	call	0x436e	; 0x436e <__floatsisf>
    36ea:	9b 01       	movw	r18, r22
    36ec:	ac 01       	movw	r20, r24
    36ee:	c8 01       	movw	r24, r16
    36f0:	b7 01       	movw	r22, r14
    36f2:	0e 94 72 24 	call	0x48e4	; 0x48e4 <atan2>
    36f6:	21 ee       	ldi	r18, 0xE1	; 225
    36f8:	3e e2       	ldi	r19, 0x2E	; 46
    36fa:	45 e6       	ldi	r20, 0x65	; 101
    36fc:	52 e4       	ldi	r21, 0x42	; 66
    36fe:	0e 94 b8 20 	call	0x4170	; 0x4170 <__mulsf3>
    3702:	0e 94 15 22 	call	0x442a	; 0x442a <__fixsfsi>
    3706:	9b 01       	movw	r18, r22
    3708:	70 93 21 04 	sts	0x0421, r23
    370c:	60 93 20 04 	sts	0x0420, r22

	if(currentAngle < 0) {
    3710:	77 ff       	sbrs	r23, 7
    3712:	06 c0       	rjmp	.+12     	; 0x3720 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    3714:	28 59       	subi	r18, 0x98	; 152
    3716:	3e 4f       	sbci	r19, 0xFE	; 254
    3718:	30 93 21 04 	sts	0x0421, r19
    371c:	20 93 20 04 	sts	0x0420, r18
	}

}
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    372a:	10 92 1d 02 	sts	0x021D, r1
    372e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    3730:	90 91 1c 02 	lds	r25, 0x021C
    3734:	98 17       	cp	r25, r24
    3736:	09 f0       	breq	.+2      	; 0x373a <computeAngle+0xb0>
    3738:	be cf       	rjmp	.-132    	; 0x36b6 <computeAngle+0x2c>
		timesInSamePos++;
    373a:	90 91 28 04 	lds	r25, 0x0428
    373e:	9f 5f       	subi	r25, 0xFF	; 255
    3740:	90 93 28 04 	sts	0x0428, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    3744:	95 30       	cpi	r25, 0x05	; 5
    3746:	08 f4       	brcc	.+2      	; 0x374a <computeAngle+0xc0>
    3748:	b8 cf       	rjmp	.-144    	; 0x36ba <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    374a:	10 92 28 04 	sts	0x0428, r1
			robotPosition = currPosition;
    374e:	80 93 1e 02 	sts	0x021E, r24
    3752:	b3 cf       	rjmp	.-154    	; 0x36ba <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3754:	90 95       	com	r25
    3756:	81 95       	neg	r24
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	a1 cf       	rjmp	.-190    	; 0x369e <computeAngle+0x14>

0000375c <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    375c:	ea e7       	ldi	r30, 0x7A	; 122
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	80 81       	ld	r24, Z
    3762:	86 60       	ori	r24, 0x06	; 6
    3764:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3766:	ac e7       	ldi	r26, 0x7C	; 124
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	8c 91       	ld	r24, X
    376c:	80 64       	ori	r24, 0x40	; 64
    376e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3770:	80 81       	ld	r24, Z
    3772:	80 62       	ori	r24, 0x20	; 32
    3774:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3776:	ab e7       	ldi	r26, 0x7B	; 123
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	8c 91       	ld	r24, X
    377c:	88 7f       	andi	r24, 0xF8	; 248
    377e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3780:	80 81       	ld	r24, Z
    3782:	88 60       	ori	r24, 0x08	; 8
    3784:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3786:	80 81       	ld	r24, Z
    3788:	80 68       	ori	r24, 0x80	; 128
    378a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    378c:	80 81       	ld	r24, Z
    378e:	80 64       	ori	r24, 0x40	; 64
    3790:	80 83       	st	Z, r24

}
    3792:	08 95       	ret

00003794 <__vector_29>:

ISR(ADC_vect) {
    3794:	1f 92       	push	r1
    3796:	0f 92       	push	r0
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	0f 92       	push	r0
    379c:	0b b6       	in	r0, 0x3b	; 59
    379e:	0f 92       	push	r0
    37a0:	11 24       	eor	r1, r1
    37a2:	2f 93       	push	r18
    37a4:	3f 93       	push	r19
    37a6:	4f 93       	push	r20
    37a8:	8f 93       	push	r24
    37aa:	9f 93       	push	r25
    37ac:	ef 93       	push	r30
    37ae:	ff 93       	push	r31

	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector

//	LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    37b0:	80 91 2a 04 	lds	r24, 0x042A
    37b4:	90 91 2b 04 	lds	r25, 0x042B
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	90 93 2b 04 	sts	0x042B, r25
    37be:	80 93 2a 04 	sts	0x042A, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    37c2:	20 91 78 00 	lds	r18, 0x0078
    37c6:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    37c8:	40 91 79 00 	lds	r20, 0x0079
    37cc:	94 2f       	mov	r25, r20
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	28 2b       	or	r18, r24
    37d2:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    37d4:	80 91 95 03 	lds	r24, 0x0395
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	09 f4       	brne	.+2      	; 0x37de <__vector_29+0x4a>
    37dc:	1f c1       	rjmp	.+574    	; 0x3a1c <__vector_29+0x288>
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	08 f4       	brcc	.+2      	; 0x37e4 <__vector_29+0x50>
    37e2:	44 c0       	rjmp	.+136    	; 0x386c <__vector_29+0xd8>
    37e4:	83 30       	cpi	r24, 0x03	; 3
    37e6:	09 f4       	brne	.+2      	; 0x37ea <__vector_29+0x56>
    37e8:	0c c1       	rjmp	.+536    	; 0x3a02 <__vector_29+0x26e>
    37ea:	84 30       	cpi	r24, 0x04	; 4
    37ec:	09 f4       	brne	.+2      	; 0x37f0 <__vector_29+0x5c>
    37ee:	ce c0       	rjmp	.+412    	; 0x398c <__vector_29+0x1f8>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    37f0:	80 91 96 03 	lds	r24, 0x0396
    37f4:	82 30       	cpi	r24, 0x02	; 2
    37f6:	09 f4       	brne	.+2      	; 0x37fa <__vector_29+0x66>
    37f8:	b5 c0       	rjmp	.+362    	; 0x3964 <__vector_29+0x1d0>
    37fa:	83 30       	cpi	r24, 0x03	; 3
    37fc:	08 f0       	brcs	.+2      	; 0x3800 <__vector_29+0x6c>
    37fe:	52 c0       	rjmp	.+164    	; 0x38a4 <__vector_29+0x110>
    3800:	88 23       	and	r24, r24
    3802:	09 f0       	breq	.+2      	; 0x3806 <__vector_29+0x72>
    3804:	8a c0       	rjmp	.+276    	; 0x391a <__vector_29+0x186>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3806:	80 91 30 03 	lds	r24, 0x0330
    380a:	86 95       	lsr	r24
    380c:	80 93 2f 03 	sts	0x032F, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3810:	80 91 97 03 	lds	r24, 0x0397
    3814:	88 23       	and	r24, r24
    3816:	09 f0       	breq	.+2      	; 0x381a <__vector_29+0x86>
    3818:	43 c1       	rjmp	.+646    	; 0x3aa0 <__vector_29+0x30c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	80 93 96 03 	sts	0x0396, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3826:	90 91 2f 03 	lds	r25, 0x032F
    382a:	98 30       	cpi	r25, 0x08	; 8
    382c:	08 f0       	brcs	.+2      	; 0x3830 <__vector_29+0x9c>
    382e:	6a c0       	rjmp	.+212    	; 0x3904 <__vector_29+0x170>
		ADCSRB &= ~(1 << MUX5);
    3830:	90 91 7b 00 	lds	r25, 0x007B
    3834:	97 7f       	andi	r25, 0xF7	; 247
    3836:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    383a:	90 91 2f 03 	lds	r25, 0x032F
    383e:	90 5c       	subi	r25, 0xC0	; 192
    3840:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3844:	82 30       	cpi	r24, 0x02	; 2
    3846:	21 f4       	brne	.+8      	; 0x3850 <__vector_29+0xbc>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		#endif

		#ifdef HW_REV_3_1
		PORTJ = 0xFF;
    3848:	8f ef       	ldi	r24, 0xFF	; 255
    384a:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    384e:	12 b8       	out	0x02, r1	; 2

	}

//	LED_BLUE_OFF;

}
    3850:	ff 91       	pop	r31
    3852:	ef 91       	pop	r30
    3854:	9f 91       	pop	r25
    3856:	8f 91       	pop	r24
    3858:	4f 91       	pop	r20
    385a:	3f 91       	pop	r19
    385c:	2f 91       	pop	r18
    385e:	0f 90       	pop	r0
    3860:	0b be       	out	0x3b, r0	; 59
    3862:	0f 90       	pop	r0
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	0f 90       	pop	r0
    3868:	1f 90       	pop	r1
    386a:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    386c:	88 23       	and	r24, r24
    386e:	09 f0       	breq	.+2      	; 0x3872 <__vector_29+0xde>
    3870:	65 c0       	rjmp	.+202    	; 0x393c <__vector_29+0x1a8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3872:	80 91 30 03 	lds	r24, 0x0330
    3876:	8e 30       	cpi	r24, 0x0E	; 14
    3878:	09 f4       	brne	.+2      	; 0x387c <__vector_29+0xe8>
    387a:	24 c1       	rjmp	.+584    	; 0x3ac4 <__vector_29+0x330>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    387c:	e8 2f       	mov	r30, r24
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	ee 0f       	add	r30, r30
    3882:	ff 1f       	adc	r31, r31
    3884:	eb 5c       	subi	r30, 0xCB	; 203
    3886:	fc 4f       	sbci	r31, 0xFC	; 252
    3888:	31 83       	std	Z+1, r19	; 0x01
    388a:	20 83       	st	Z, r18
			}
			currentProx++;
    388c:	8f 5f       	subi	r24, 0xFF	; 255
    388e:	80 93 30 03 	sts	0x0330, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3892:	88 31       	cpi	r24, 0x18	; 24
    3894:	08 f4       	brcc	.+2      	; 0x3898 <__vector_29+0x104>
    3896:	ac cf       	rjmp	.-168    	; 0x37f0 <__vector_29+0x5c>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3898:	10 92 30 03 	sts	0x0330, r1
				updateProx = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	80 93 9e 03 	sts	0x039E, r24
    38a2:	a6 cf       	rjmp	.-180    	; 0x37f0 <__vector_29+0x5c>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    38a4:	83 30       	cpi	r24, 0x03	; 3
    38a6:	09 f4       	brne	.+2      	; 0x38aa <__vector_29+0x116>
    38a8:	98 c0       	rjmp	.+304    	; 0x39da <__vector_29+0x246>
    38aa:	84 30       	cpi	r24, 0x04	; 4
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <__vector_29+0x11c>
    38ae:	bb cf       	rjmp	.-138    	; 0x3826 <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    38b0:	90 91 32 03 	lds	r25, 0x0332
    38b4:	90 93 2f 03 	sts	0x032F, r25
			rightChannelPhase = rightMotorPhase;
    38b8:	90 91 33 03 	lds	r25, 0x0333
    38bc:	90 93 97 03 	sts	0x0397, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    38c0:	90 91 98 03 	lds	r25, 0x0398
    38c4:	99 23       	and	r25, r25
    38c6:	09 f0       	breq	.+2      	; 0x38ca <__vector_29+0x136>
    38c8:	e5 c0       	rjmp	.+458    	; 0x3a94 <__vector_29+0x300>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    38ca:	83 e0       	ldi	r24, 0x03	; 3
    38cc:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    38d0:	10 92 96 03 	sts	0x0396, r1

			if(currentProx==14 && measBattery==1) {
    38d4:	20 91 30 03 	lds	r18, 0x0330
    38d8:	2e 30       	cpi	r18, 0x0E	; 14
    38da:	09 f4       	brne	.+2      	; 0x38de <__vector_29+0x14a>
    38dc:	ed c0       	rjmp	.+474    	; 0x3ab8 <__vector_29+0x324>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    38de:	82 2f       	mov	r24, r18
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	20 ff       	sbrs	r18, 0
    38e4:	ce c0       	rjmp	.+412    	; 0x3a82 <__vector_29+0x2ee>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    38e6:	20 31       	cpi	r18, 0x10	; 16
    38e8:	08 f0       	brcs	.+2      	; 0x38ec <__vector_29+0x158>
    38ea:	bb c0       	rjmp	.+374    	; 0x3a62 <__vector_29+0x2ce>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    38ec:	26 95       	lsr	r18
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <__vector_29+0x164>
    38f4:	88 0f       	add	r24, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	2a 95       	dec	r18
    38fa:	e2 f7       	brpl	.-8      	; 0x38f4 <__vector_29+0x160>
    38fc:	82 b9       	out	0x02, r24	; 2
    38fe:	80 91 96 03 	lds	r24, 0x0396
    3902:	91 cf       	rjmp	.-222    	; 0x3826 <__vector_29+0x92>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3904:	90 91 7b 00 	lds	r25, 0x007B
    3908:	98 60       	ori	r25, 0x08	; 8
    390a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    390e:	90 91 2f 03 	lds	r25, 0x032F
    3912:	98 5c       	subi	r25, 0xC8	; 200
    3914:	90 93 7c 00 	sts	0x007C, r25
    3918:	95 cf       	rjmp	.-214    	; 0x3844 <__vector_29+0xb0>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	09 f0       	breq	.+2      	; 0x3920 <__vector_29+0x18c>
    391e:	83 cf       	rjmp	.-250    	; 0x3826 <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3920:	80 91 31 03 	lds	r24, 0x0331
    3924:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    3928:	80 91 34 03 	lds	r24, 0x0334
    392c:	80 93 98 03 	sts	0x0398, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3930:	10 92 95 03 	sts	0x0395, r1
			adcSamplingState = 2;
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	80 93 96 03 	sts	0x0396, r24
			break;
    393a:	75 cf       	rjmp	.-278    	; 0x3826 <__vector_29+0x92>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    393c:	81 30       	cpi	r24, 0x01	; 1
    393e:	09 f0       	breq	.+2      	; 0x3942 <__vector_29+0x1ae>
    3940:	57 cf       	rjmp	.-338    	; 0x37f0 <__vector_29+0x5c>
				updateProx = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3942:	80 91 d2 03 	lds	r24, 0x03D2
    3946:	90 91 d3 03 	lds	r25, 0x03D3
    394a:	82 0f       	add	r24, r18
    394c:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    394e:	96 95       	lsr	r25
    3950:	87 95       	ror	r24
    3952:	90 93 d3 03 	sts	0x03D3, r25
    3956:	80 93 d2 03 	sts	0x03D2, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    395a:	80 91 96 03 	lds	r24, 0x0396
    395e:	82 30       	cpi	r24, 0x02	; 2
    3960:	09 f0       	breq	.+2      	; 0x3964 <__vector_29+0x1d0>
    3962:	4b cf       	rjmp	.-362    	; 0x37fa <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3964:	80 91 32 03 	lds	r24, 0x0332
    3968:	80 93 2f 03 	sts	0x032F, r24
			rightChannelPhase = rightMotorPhase;
    396c:	80 91 33 03 	lds	r24, 0x0333
    3970:	80 93 97 03 	sts	0x0397, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3974:	80 91 98 03 	lds	r24, 0x0398
    3978:	88 23       	and	r24, r24
    397a:	09 f0       	breq	.+2      	; 0x397e <__vector_29+0x1ea>
    397c:	97 c0       	rjmp	.+302    	; 0x3aac <__vector_29+0x318>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    397e:	83 e0       	ldi	r24, 0x03	; 3
    3980:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	80 93 96 03 	sts	0x0396, r24
			break;
    398a:	4d cf       	rjmp	.-358    	; 0x3826 <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    398c:	80 91 12 02 	lds	r24, 0x0212
    3990:	88 23       	and	r24, r24
    3992:	09 f4       	brne	.+2      	; 0x3996 <__vector_29+0x202>
    3994:	2d cf       	rjmp	.-422    	; 0x37f0 <__vector_29+0x5c>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3996:	90 91 00 01 	lds	r25, 0x0100
    399a:	93 fd       	sbrc	r25, 3
    399c:	29 cf       	rjmp	.-430    	; 0x37f0 <__vector_29+0x5c>
    399e:	90 91 00 01 	lds	r25, 0x0100
    39a2:	94 fd       	sbrc	r25, 4
    39a4:	25 cf       	rjmp	.-438    	; 0x37f0 <__vector_29+0x5c>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    39a6:	48 2f       	mov	r20, r24
    39a8:	4f 5f       	subi	r20, 0xFF	; 255
    39aa:	40 93 12 02 	sts	0x0212, r20
				if(firstSampleLeft > 4) {
    39ae:	45 30       	cpi	r20, 0x05	; 5
    39b0:	08 f4       	brcc	.+2      	; 0x39b4 <__vector_29+0x220>
    39b2:	1e cf       	rjmp	.-452    	; 0x37f0 <__vector_29+0x5c>
					left_vel_sum += value;
    39b4:	80 91 dc 03 	lds	r24, 0x03DC
    39b8:	90 91 dd 03 	lds	r25, 0x03DD
    39bc:	82 0f       	add	r24, r18
    39be:	93 1f       	adc	r25, r19
    39c0:	90 93 dd 03 	sts	0x03DD, r25
    39c4:	80 93 dc 03 	sts	0x03DC, r24
					if(firstSampleLeft==8) {
    39c8:	48 30       	cpi	r20, 0x08	; 8
    39ca:	09 f0       	breq	.+2      	; 0x39ce <__vector_29+0x23a>
    39cc:	11 cf       	rjmp	.-478    	; 0x37f0 <__vector_29+0x5c>
						firstSampleLeft = 0;
    39ce:	10 92 12 02 	sts	0x0212, r1
						compute_left_vel = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	80 93 0f 02 	sts	0x020F, r24
    39d8:	0b cf       	rjmp	.-490    	; 0x37f0 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    39da:	80 91 31 03 	lds	r24, 0x0331
    39de:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    39e2:	80 91 34 03 	lds	r24, 0x0334
    39e6:	80 93 98 03 	sts	0x0398, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    39ea:	80 91 97 03 	lds	r24, 0x0397
    39ee:	88 23       	and	r24, r24
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <__vector_29+0x260>
    39f2:	4a c0       	rjmp	.+148    	; 0x3a88 <__vector_29+0x2f4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    39fa:	84 e0       	ldi	r24, 0x04	; 4
    39fc:	80 93 96 03 	sts	0x0396, r24
			break;
    3a00:	12 cf       	rjmp	.-476    	; 0x3826 <__vector_29+0x92>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3a02:	80 91 d0 03 	lds	r24, 0x03D0
    3a06:	90 91 d1 03 	lds	r25, 0x03D1
    3a0a:	82 0f       	add	r24, r18
    3a0c:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3a0e:	96 95       	lsr	r25
    3a10:	87 95       	ror	r24
    3a12:	90 93 d1 03 	sts	0x03D1, r25
    3a16:	80 93 d0 03 	sts	0x03D0, r24
			break;
    3a1a:	ea ce       	rjmp	.-556    	; 0x37f0 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3a1c:	80 91 11 02 	lds	r24, 0x0211
    3a20:	88 23       	and	r24, r24
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <__vector_29+0x292>
    3a24:	e5 ce       	rjmp	.-566    	; 0x37f0 <__vector_29+0x5c>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3a26:	63 99       	sbic	0x0c, 3	; 12
    3a28:	e3 ce       	rjmp	.-570    	; 0x37f0 <__vector_29+0x5c>
    3a2a:	64 99       	sbic	0x0c, 4	; 12
    3a2c:	e1 ce       	rjmp	.-574    	; 0x37f0 <__vector_29+0x5c>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3a2e:	48 2f       	mov	r20, r24
    3a30:	4f 5f       	subi	r20, 0xFF	; 255
    3a32:	40 93 11 02 	sts	0x0211, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3a36:	45 30       	cpi	r20, 0x05	; 5
    3a38:	08 f4       	brcc	.+2      	; 0x3a3c <__vector_29+0x2a8>
    3a3a:	da ce       	rjmp	.-588    	; 0x37f0 <__vector_29+0x5c>
					right_vel_sum += value;
    3a3c:	80 91 de 03 	lds	r24, 0x03DE
    3a40:	90 91 df 03 	lds	r25, 0x03DF
    3a44:	82 0f       	add	r24, r18
    3a46:	93 1f       	adc	r25, r19
    3a48:	90 93 df 03 	sts	0x03DF, r25
    3a4c:	80 93 de 03 	sts	0x03DE, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    3a50:	48 30       	cpi	r20, 0x08	; 8
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <__vector_29+0x2c2>
    3a54:	cd ce       	rjmp	.-614    	; 0x37f0 <__vector_29+0x5c>
						firstSampleRight = 0;
    3a56:	10 92 11 02 	sts	0x0211, r1
						compute_right_vel = 1;
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	80 93 10 02 	sts	0x0210, r24
    3a60:	c7 ce       	rjmp	.-626    	; 0x37f0 <__vector_29+0x5c>
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					#endif

					#ifdef HW_REV_3_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3a62:	40 91 05 01 	lds	r20, 0x0105
    3a66:	40 97       	sbiw	r24, 0x10	; 16
    3a68:	95 95       	asr	r25
    3a6a:	87 95       	ror	r24
    3a6c:	21 e0       	ldi	r18, 0x01	; 1
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	02 c0       	rjmp	.+4      	; 0x3a76 <__vector_29+0x2e2>
    3a72:	22 0f       	add	r18, r18
    3a74:	33 1f       	adc	r19, r19
    3a76:	8a 95       	dec	r24
    3a78:	e2 f7       	brpl	.-8      	; 0x3a72 <__vector_29+0x2de>
    3a7a:	20 95       	com	r18
    3a7c:	24 23       	and	r18, r20
    3a7e:	20 93 05 01 	sts	0x0105, r18
    3a82:	80 91 96 03 	lds	r24, 0x0396
    3a86:	cf ce       	rjmp	.-610    	; 0x3826 <__vector_29+0x92>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3a88:	81 30       	cpi	r24, 0x01	; 1
    3a8a:	69 f1       	breq	.+90     	; 0x3ae6 <__vector_29+0x352>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3a8c:	85 e0       	ldi	r24, 0x05	; 5
    3a8e:	80 93 95 03 	sts	0x0395, r24
    3a92:	b3 cf       	rjmp	.-154    	; 0x39fa <__vector_29+0x266>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3a94:	91 30       	cpi	r25, 0x01	; 1
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <__vector_29+0x306>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3a98:	85 e0       	ldi	r24, 0x05	; 5
    3a9a:	80 93 95 03 	sts	0x0395, r24
    3a9e:	18 cf       	rjmp	.-464    	; 0x38d0 <__vector_29+0x13c>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3aa0:	81 30       	cpi	r24, 0x01	; 1
    3aa2:	e9 f0       	breq	.+58     	; 0x3ade <__vector_29+0x34a>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3aa4:	85 e0       	ldi	r24, 0x05	; 5
    3aa6:	80 93 95 03 	sts	0x0395, r24
    3aaa:	ba ce       	rjmp	.-652    	; 0x3820 <__vector_29+0x8c>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3aac:	81 30       	cpi	r24, 0x01	; 1
    3aae:	f9 f0       	breq	.+62     	; 0x3aee <__vector_29+0x35a>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3ab0:	85 e0       	ldi	r24, 0x05	; 5
    3ab2:	80 93 95 03 	sts	0x0395, r24
    3ab6:	66 cf       	rjmp	.-308    	; 0x3984 <__vector_29+0x1f0>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3ab8:	80 91 9b 03 	lds	r24, 0x039B
    3abc:	81 30       	cpi	r24, 0x01	; 1
    3abe:	d9 f0       	breq	.+54     	; 0x3af6 <__vector_29+0x362>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	b1 ce       	rjmp	.-670    	; 0x3826 <__vector_29+0x92>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3ac4:	90 91 9b 03 	lds	r25, 0x039B
    3ac8:	92 30       	cpi	r25, 0x02	; 2
    3aca:	09 f0       	breq	.+2      	; 0x3ace <__vector_29+0x33a>
    3acc:	d7 ce       	rjmp	.-594    	; 0x387c <__vector_29+0xe8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3ace:	30 93 9a 03 	sts	0x039A, r19
    3ad2:	20 93 99 03 	sts	0x0399, r18
				measBattery = 0;
    3ad6:	10 92 9b 03 	sts	0x039B, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    3ada:	46 98       	cbi	0x08, 6	; 8
    3adc:	d7 ce       	rjmp	.-594    	; 0x388c <__vector_29+0xf8>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3ade:	82 e0       	ldi	r24, 0x02	; 2
    3ae0:	80 93 95 03 	sts	0x0395, r24
    3ae4:	9d ce       	rjmp	.-710    	; 0x3820 <__vector_29+0x8c>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	80 93 95 03 	sts	0x0395, r24
    3aec:	86 cf       	rjmp	.-244    	; 0x39fa <__vector_29+0x266>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3aee:	84 e0       	ldi	r24, 0x04	; 4
    3af0:	80 93 95 03 	sts	0x0395, r24
    3af4:	47 cf       	rjmp	.-370    	; 0x3984 <__vector_29+0x1f0>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3af6:	82 e0       	ldi	r24, 0x02	; 2
    3af8:	80 93 9b 03 	sts	0x039B, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3afc:	46 9a       	sbi	0x08, 6	; 8
    3afe:	ef ce       	rjmp	.-546    	; 0x38de <__vector_29+0x14a>

00003b00 <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3b00:	e0 e9       	ldi	r30, 0x90	; 144
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	83 68       	ori	r24, 0x83	; 131
    3b08:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3b0a:	80 81       	ld	r24, Z
    3b0c:	83 60       	ori	r24, 0x03	; 3
    3b0e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3b10:	a1 e9       	ldi	r26, 0x91	; 145
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	8c 91       	ld	r24, X
    3b16:	8b 60       	ori	r24, 0x0B	; 11
    3b18:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3b1a:	80 91 e4 03 	lds	r24, 0x03E4
    3b1e:	90 91 e5 03 	lds	r25, 0x03E5
    3b22:	90 93 99 00 	sts	0x0099, r25
    3b26:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    3b2a:	10 92 9b 00 	sts	0x009B, r1
    3b2e:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3b32:	a1 e7       	ldi	r26, 0x71	; 113
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	8c 91       	ld	r24, X
    3b38:	81 60       	ori	r24, 0x01	; 1
    3b3a:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3b3c:	80 81       	ld	r24, Z
    3b3e:	8f 75       	andi	r24, 0x5F	; 95
    3b40:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3b42:	8e b1       	in	r24, 0x0e	; 14
    3b44:	87 7e       	andi	r24, 0xE7	; 231
    3b46:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3b48:	e0 ea       	ldi	r30, 0xA0	; 160
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	83 68       	ori	r24, 0x83	; 131
    3b50:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3b52:	a1 ea       	ldi	r26, 0xA1	; 161
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	8c 91       	ld	r24, X
    3b58:	8b 60       	ori	r24, 0x0B	; 11
    3b5a:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3b5c:	80 91 e6 03 	lds	r24, 0x03E6
    3b60:	90 91 e7 03 	lds	r25, 0x03E7
    3b64:	90 93 a9 00 	sts	0x00A9, r25
    3b68:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3b6c:	10 92 ab 00 	sts	0x00AB, r1
    3b70:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3b74:	a2 e7       	ldi	r26, 0x72	; 114
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	8c 91       	ld	r24, X
    3b7a:	81 60       	ori	r24, 0x01	; 1
    3b7c:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3b7e:	80 81       	ld	r24, Z
    3b80:	8f 75       	andi	r24, 0x5F	; 95
    3b82:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3b84:	e2 e0       	ldi	r30, 0x02	; 2
    3b86:	f1 e0       	ldi	r31, 0x01	; 1
    3b88:	80 81       	ld	r24, Z
    3b8a:	87 7e       	andi	r24, 0xE7	; 231
    3b8c:	80 83       	st	Z, r24


}
    3b8e:	08 95       	ret

00003b90 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    3b90:	1f 92       	push	r1
    3b92:	0f 92       	push	r0
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	0f 92       	push	r0
    3b98:	11 24       	eor	r1, r1
    3b9a:	8f 93       	push	r24
    3b9c:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	left_current_avg = 0;
    3b9e:	10 92 d1 03 	sts	0x03D1, r1
    3ba2:	10 92 d0 03 	sts	0x03D0, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3ba6:	80 91 e6 03 	lds	r24, 0x03E6
    3baa:	90 91 e7 03 	lds	r25, 0x03E7
    3bae:	00 97       	sbiw	r24, 0x00	; 0
    3bb0:	41 f5       	brne	.+80     	; 0x3c02 <__vector_45+0x72>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3bb2:	80 91 da 03 	lds	r24, 0x03DA
    3bb6:	90 91 db 03 	lds	r25, 0x03DB
    3bba:	97 fd       	sbrc	r25, 7
    3bbc:	69 c0       	rjmp	.+210    	; 0x3c90 <__vector_45+0x100>
			leftMotorPhase = PASSIVE_PHASE;
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 14;
    3bc4:	8e e0       	ldi	r24, 0x0E	; 14
    3bc6:	80 93 31 03 	sts	0x0331, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	80 93 12 02 	sts	0x0212, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3bd0:	80 91 a0 00 	lds	r24, 0x00A0
    3bd4:	8f 75       	andi	r24, 0x5F	; 95
    3bd6:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3bda:	80 91 02 01 	lds	r24, 0x0102
    3bde:	87 7e       	andi	r24, 0xE7	; 231
    3be0:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3be4:	80 91 72 00 	lds	r24, 0x0072
    3be8:	89 7f       	andi	r24, 0xF9	; 249
    3bea:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3bee:	89 b3       	in	r24, 0x19	; 25
    3bf0:	86 60       	ori	r24, 0x06	; 6
    3bf2:	89 bb       	out	0x19, r24	; 25
	}
*/

//	PORTB |= (1 << 6);

}
    3bf4:	9f 91       	pop	r25
    3bf6:	8f 91       	pop	r24
    3bf8:	0f 90       	pop	r0
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	0f 90       	pop	r0
    3bfe:	1f 90       	pop	r1
    3c00:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3c02:	18 16       	cp	r1, r24
    3c04:	19 06       	cpc	r1, r25
    3c06:	2c f5       	brge	.+74     	; 0x3c52 <__vector_45+0xc2>
		leftMotorPhase = ACTIVE_PHASE;
    3c08:	10 92 34 03 	sts	0x0334, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    3c0c:	8f e0       	ldi	r24, 0x0F	; 15
    3c0e:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3c12:	80 91 a0 00 	lds	r24, 0x00A0
    3c16:	8f 7d       	andi	r24, 0xDF	; 223
    3c18:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3c1c:	80 91 72 00 	lds	r24, 0x0072
    3c20:	8b 7f       	andi	r24, 0xFB	; 251
    3c22:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3c26:	80 91 02 01 	lds	r24, 0x0102
    3c2a:	8f 7e       	andi	r24, 0xEF	; 239
    3c2c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3c30:	80 91 a0 00 	lds	r24, 0x00A0
    3c34:	80 68       	ori	r24, 0x80	; 128
    3c36:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3c3a:	80 91 72 00 	lds	r24, 0x0072
    3c3e:	82 60       	ori	r24, 0x02	; 2
    3c40:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	PORTB |= (1 << 6);

}
    3c44:	9f 91       	pop	r25
    3c46:	8f 91       	pop	r24
    3c48:	0f 90       	pop	r0
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	0f 90       	pop	r0
    3c4e:	1f 90       	pop	r1
    3c50:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3c52:	10 92 34 03 	sts	0x0334, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3c56:	8e e0       	ldi	r24, 0x0E	; 14
    3c58:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3c5c:	80 91 a0 00 	lds	r24, 0x00A0
    3c60:	8f 77       	andi	r24, 0x7F	; 127
    3c62:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3c66:	80 91 72 00 	lds	r24, 0x0072
    3c6a:	8d 7f       	andi	r24, 0xFD	; 253
    3c6c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3c70:	80 91 02 01 	lds	r24, 0x0102
    3c74:	87 7f       	andi	r24, 0xF7	; 247
    3c76:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3c7a:	80 91 a0 00 	lds	r24, 0x00A0
    3c7e:	80 62       	ori	r24, 0x20	; 32
    3c80:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3c84:	80 91 72 00 	lds	r24, 0x0072
    3c88:	84 60       	ori	r24, 0x04	; 4
    3c8a:	80 93 72 00 	sts	0x0072, r24
    3c8e:	b2 cf       	rjmp	.-156    	; 0x3bf4 <__vector_45+0x64>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 15;
    3c96:	8f e0       	ldi	r24, 0x0F	; 15
    3c98:	80 93 31 03 	sts	0x0331, r24
    3c9c:	96 cf       	rjmp	.-212    	; 0x3bca <__vector_45+0x3a>

00003c9e <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3c9e:	1f 92       	push	r1
    3ca0:	0f 92       	push	r0
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	0f 92       	push	r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	8f 93       	push	r24
    3caa:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	80 93 34 03 	sts	0x0334, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3cb2:	9e e0       	ldi	r25, 0x0E	; 14
    3cb4:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    3cb8:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3cbc:	9f 91       	pop	r25
    3cbe:	8f 91       	pop	r24
    3cc0:	0f 90       	pop	r0
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	0f 90       	pop	r0
    3cc6:	1f 90       	pop	r1
    3cc8:	18 95       	reti

00003cca <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3cca:	1f 92       	push	r1
    3ccc:	0f 92       	push	r0
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	0f 92       	push	r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	8f 93       	push	r24
    3cd6:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	80 93 34 03 	sts	0x0334, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3cde:	9f e0       	ldi	r25, 0x0F	; 15
    3ce0:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    3ce4:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3ce8:	9f 91       	pop	r25
    3cea:	8f 91       	pop	r24
    3cec:	0f 90       	pop	r0
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	0f 90       	pop	r0
    3cf2:	1f 90       	pop	r1
    3cf4:	18 95       	reti

00003cf6 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3cf6:	1f 92       	push	r1
    3cf8:	0f 92       	push	r0
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	0f 92       	push	r0
    3cfe:	11 24       	eor	r1, r1
    3d00:	8f 93       	push	r24
    3d02:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	right_current_avg = 0;
    3d04:	10 92 d3 03 	sts	0x03D3, r1
    3d08:	10 92 d2 03 	sts	0x03D2, r1


	if(pwm_right == 0) {
    3d0c:	80 91 e4 03 	lds	r24, 0x03E4
    3d10:	90 91 e5 03 	lds	r25, 0x03E5
    3d14:	00 97       	sbiw	r24, 0x00	; 0
    3d16:	31 f5       	brne	.+76     	; 0x3d64 <__vector_35+0x6e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3d18:	80 91 d8 03 	lds	r24, 0x03D8
    3d1c:	90 91 d9 03 	lds	r25, 0x03D9
    3d20:	97 fd       	sbrc	r25, 7
    3d22:	5f c0       	rjmp	.+190    	; 0x3de2 <__vector_35+0xec>
			rightMotorPhase = PASSIVE_PHASE;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	80 93 33 03 	sts	0x0333, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3d2a:	8c e0       	ldi	r24, 0x0C	; 12
    3d2c:	80 93 32 03 	sts	0x0332, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	80 93 11 02 	sts	0x0211, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3d36:	80 91 90 00 	lds	r24, 0x0090
    3d3a:	8f 75       	andi	r24, 0x5F	; 95
    3d3c:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3d40:	8e b1       	in	r24, 0x0e	; 14
    3d42:	87 7e       	andi	r24, 0xE7	; 231
    3d44:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3d46:	80 91 71 00 	lds	r24, 0x0071
    3d4a:	89 7f       	andi	r24, 0xF9	; 249
    3d4c:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3d50:	88 b3       	in	r24, 0x18	; 24
    3d52:	86 60       	ori	r24, 0x06	; 6
    3d54:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3d56:	9f 91       	pop	r25
    3d58:	8f 91       	pop	r24
    3d5a:	0f 90       	pop	r0
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	0f 90       	pop	r0
    3d60:	1f 90       	pop	r1
    3d62:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3d64:	18 16       	cp	r1, r24
    3d66:	19 06       	cpc	r1, r25
    3d68:	0c f5       	brge	.+66     	; 0x3dac <__vector_35+0xb6>
		rightMotorPhase = ACTIVE_PHASE;
    3d6a:	10 92 33 03 	sts	0x0333, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3d6e:	8d e0       	ldi	r24, 0x0D	; 13
    3d70:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3d74:	80 91 90 00 	lds	r24, 0x0090
    3d78:	8f 7d       	andi	r24, 0xDF	; 223
    3d7a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3d7e:	80 91 71 00 	lds	r24, 0x0071
    3d82:	8b 7f       	andi	r24, 0xFB	; 251
    3d84:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3d88:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3d8a:	80 91 90 00 	lds	r24, 0x0090
    3d8e:	80 68       	ori	r24, 0x80	; 128
    3d90:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3d94:	80 91 71 00 	lds	r24, 0x0071
    3d98:	82 60       	ori	r24, 0x02	; 2
    3d9a:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3d9e:	9f 91       	pop	r25
    3da0:	8f 91       	pop	r24
    3da2:	0f 90       	pop	r0
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	0f 90       	pop	r0
    3da8:	1f 90       	pop	r1
    3daa:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3dac:	10 92 33 03 	sts	0x0333, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3db0:	8c e0       	ldi	r24, 0x0C	; 12
    3db2:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3db6:	80 91 90 00 	lds	r24, 0x0090
    3dba:	8f 77       	andi	r24, 0x7F	; 127
    3dbc:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3dc0:	80 91 71 00 	lds	r24, 0x0071
    3dc4:	8d 7f       	andi	r24, 0xFD	; 253
    3dc6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3dca:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3dcc:	80 91 90 00 	lds	r24, 0x0090
    3dd0:	80 62       	ori	r24, 0x20	; 32
    3dd2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3dd6:	80 91 71 00 	lds	r24, 0x0071
    3dda:	84 60       	ori	r24, 0x04	; 4
    3ddc:	80 93 71 00 	sts	0x0071, r24
    3de0:	ba cf       	rjmp	.-140    	; 0x3d56 <__vector_35+0x60>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	80 93 33 03 	sts	0x0333, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3de8:	8d e0       	ldi	r24, 0x0D	; 13
    3dea:	80 93 32 03 	sts	0x0332, r24
    3dee:	a0 cf       	rjmp	.-192    	; 0x3d30 <__vector_35+0x3a>

00003df0 <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3df0:	1f 92       	push	r1
    3df2:	0f 92       	push	r0
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	0f 92       	push	r0
    3df8:	11 24       	eor	r1, r1
    3dfa:	8f 93       	push	r24
    3dfc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	80 93 33 03 	sts	0x0333, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3e04:	9c e0       	ldi	r25, 0x0C	; 12
    3e06:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3e0a:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);

}
    3e0e:	9f 91       	pop	r25
    3e10:	8f 91       	pop	r24
    3e12:	0f 90       	pop	r0
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	0f 90       	pop	r0
    3e18:	1f 90       	pop	r1
    3e1a:	18 95       	reti

00003e1c <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3e1c:	1f 92       	push	r1
    3e1e:	0f 92       	push	r0
    3e20:	0f b6       	in	r0, 0x3f	; 63
    3e22:	0f 92       	push	r0
    3e24:	11 24       	eor	r1, r1
    3e26:	8f 93       	push	r24
    3e28:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	80 93 33 03 	sts	0x0333, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3e30:	9d e0       	ldi	r25, 0x0D	; 13
    3e32:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3e36:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);
}
    3e3a:	9f 91       	pop	r25
    3e3c:	8f 91       	pop	r24
    3e3e:	0f 90       	pop	r0
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	0f 90       	pop	r0
    3e44:	1f 90       	pop	r1
    3e46:	18 95       	reti

00003e48 <obstacleAvoidance>:

#include "behaviors.h"


void obstacleAvoidance() {
    3e48:	cf 92       	push	r12
    3e4a:	df 92       	push	r13
    3e4c:	ef 92       	push	r14
    3e4e:	ff 92       	push	r15
    3e50:	0f 93       	push	r16
    3e52:	1f 93       	push	r17

	signed int velX=0, velY=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int speedL=0, speedR=0;

	speedL = speedl;	// save the speeds in temporary variables
    3e54:	80 91 03 04 	lds	r24, 0x0403
    3e58:	90 91 04 04 	lds	r25, 0x0404
	speedR = speedr;
    3e5c:	60 91 05 04 	lds	r22, 0x0405
    3e60:	70 91 06 04 	lds	r23, 0x0406

	// speedr and speedl goes from 0 to 127 (usually 0..100), absolute value for both
	// forward and backward directions; we need a negative value for backward direction
	if(pwm_right_desired < 0) {
    3e64:	20 91 ec 03 	lds	r18, 0x03EC
    3e68:	30 91 ed 03 	lds	r19, 0x03ED
    3e6c:	37 fd       	sbrc	r19, 7
    3e6e:	b2 c0       	rjmp	.+356    	; 0x3fd4 <obstacleAvoidance+0x18c>
		speedR = -speedR; 
	}
	if(pwm_left_desired < 0) {
    3e70:	20 91 ee 03 	lds	r18, 0x03EE
    3e74:	30 91 ef 03 	lds	r19, 0x03EF
    3e78:	37 fd       	sbrc	r19, 7
    3e7a:	b5 c0       	rjmp	.+362    	; 0x3fe6 <obstacleAvoidance+0x19e>
		speedL = -speedL;
	}

	// compute the velocity components
	velX = (speedR + speedL)/2;
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	a6 0f       	add	r26, r22
    3e80:	b7 1f       	adc	r27, r23
    3e82:	b7 fd       	sbrc	r27, 7
    3e84:	b8 c0       	rjmp	.+368    	; 0x3ff6 <obstacleAvoidance+0x1ae>
    3e86:	b5 95       	asr	r27
    3e88:	a7 95       	ror	r26
	velY = (speedR - speedL)/2;
    3e8a:	68 1b       	sub	r22, r24
    3e8c:	79 0b       	sbc	r23, r25
    3e8e:	77 fd       	sbrc	r23, 7
    3e90:	b9 c0       	rjmp	.+370    	; 0x4004 <obstacleAvoidance+0x1bc>
    3e92:	75 95       	asr	r23
    3e94:	67 95       	ror	r22

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    3e96:	e0 90 67 03 	lds	r14, 0x0367
    3e9a:	f0 90 68 03 	lds	r15, 0x0368
    3e9e:	90 91 6b 03 	lds	r25, 0x036B
    3ea2:	80 91 6c 03 	lds	r24, 0x036C
    3ea6:	e9 2f       	mov	r30, r25
    3ea8:	f8 2f       	mov	r31, r24
    3eaa:	f7 fd       	sbrc	r31, 7
    3eac:	b6 c0       	rjmp	.+364    	; 0x401a <obstacleAvoidance+0x1d2>
    3eae:	f5 95       	asr	r31
    3eb0:	e7 95       	ror	r30
    3eb2:	00 91 6f 03 	lds	r16, 0x036F
    3eb6:	10 91 70 03 	lds	r17, 0x0370
    3eba:	90 91 73 03 	lds	r25, 0x0373
    3ebe:	80 91 74 03 	lds	r24, 0x0374
    3ec2:	49 2f       	mov	r20, r25
    3ec4:	58 2f       	mov	r21, r24
    3ec6:	57 fd       	sbrc	r21, 7
    3ec8:	b1 c0       	rjmp	.+354    	; 0x402c <obstacleAvoidance+0x1e4>
    3eca:	55 95       	asr	r21
    3ecc:	47 95       	ror	r20
    3ece:	50 95       	com	r21
    3ed0:	41 95       	neg	r20
    3ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed4:	8e 2d       	mov	r24, r14
    3ed6:	9f 2d       	mov	r25, r15
    3ed8:	97 fd       	sbrc	r25, 7
    3eda:	a6 c0       	rjmp	.+332    	; 0x4028 <obstacleAvoidance+0x1e0>
    3edc:	95 95       	asr	r25
    3ede:	87 95       	ror	r24
    3ee0:	9f 01       	movw	r18, r30
    3ee2:	28 1b       	sub	r18, r24
    3ee4:	39 0b       	sbc	r19, r25
    3ee6:	80 91 6d 03 	lds	r24, 0x036D
    3eea:	90 91 6e 03 	lds	r25, 0x036E
    3eee:	28 0f       	add	r18, r24
    3ef0:	39 1f       	adc	r19, r25
    3ef2:	c8 01       	movw	r24, r16
    3ef4:	17 fd       	sbrc	r17, 7
    3ef6:	96 c0       	rjmp	.+300    	; 0x4024 <obstacleAvoidance+0x1dc>
    3ef8:	95 95       	asr	r25
    3efa:	87 95       	ror	r24
    3efc:	82 0f       	add	r24, r18
    3efe:	93 1f       	adc	r25, r19
    3f00:	84 0f       	add	r24, r20
    3f02:	95 1f       	adc	r25, r21
    3f04:	20 91 65 03 	lds	r18, 0x0365
    3f08:	30 91 66 03 	lds	r19, 0x0366
    3f0c:	82 1b       	sub	r24, r18
    3f0e:	93 0b       	sbc	r25, r19
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;

	// modify the velocity components based on sensor values
	velX += sumSensorsX;	//4
    3f10:	8a 0f       	add	r24, r26
    3f12:	9b 1f       	adc	r25, r27
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    3f14:	4e 0f       	add	r20, r30
    3f16:	5f 1f       	adc	r21, r31
    3f18:	20 91 69 03 	lds	r18, 0x0369
    3f1c:	30 91 6a 03 	lds	r19, 0x036A
    3f20:	42 0f       	add	r20, r18
    3f22:	53 1f       	adc	r21, r19
    3f24:	2e 2d       	mov	r18, r14
    3f26:	3f 2d       	mov	r19, r15
    3f28:	37 fd       	sbrc	r19, 7
    3f2a:	79 c0       	rjmp	.+242    	; 0x401e <obstacleAvoidance+0x1d6>
    3f2c:	35 95       	asr	r19
    3f2e:	27 95       	ror	r18
    3f30:	24 0f       	add	r18, r20
    3f32:	35 1f       	adc	r19, r21
    3f34:	40 2f       	mov	r20, r16
    3f36:	51 2f       	mov	r21, r17
    3f38:	57 fd       	sbrc	r21, 7
    3f3a:	6c c0       	rjmp	.+216    	; 0x4014 <obstacleAvoidance+0x1cc>
    3f3c:	55 95       	asr	r21
    3f3e:	47 95       	ror	r20
    3f40:	24 1b       	sub	r18, r20
    3f42:	35 0b       	sbc	r19, r21
    3f44:	40 91 71 03 	lds	r20, 0x0371
    3f48:	50 91 72 03 	lds	r21, 0x0372
    3f4c:	24 1b       	sub	r18, r20
    3f4e:	35 0b       	sbc	r19, r21

	// modify the velocity components based on sensor values
	velX += sumSensorsX;	//4
	velY += sumSensorsY;	//4
    3f50:	26 0f       	add	r18, r22
    3f52:	37 1f       	adc	r19, r23

	// extract the left and right speeds from the velocity components
	speedR = (velX + velY);
    3f54:	a9 01       	movw	r20, r18
    3f56:	48 0f       	add	r20, r24
    3f58:	59 1f       	adc	r21, r25
	speedL = (velX - velY);
    3f5a:	82 1b       	sub	r24, r18
    3f5c:	93 0b       	sbc	r25, r19
	// set the pwm value that will be placed in the motors pwm
	if(speedL < 0) {
		speedL = -speedL;
		pwm_left_working = -(speedL);	//<<2
	} else {
		pwm_left_working = speedL;		//<<2
    3f5e:	90 93 01 04 	sts	0x0401, r25
    3f62:	80 93 00 04 	sts	0x0400, r24
	}

	if(speedR < 0) {
    3f66:	57 fd       	sbrc	r21, 7
    3f68:	50 c0       	rjmp	.+160    	; 0x400a <obstacleAvoidance+0x1c2>
		speedR = -speedR;
		pwm_right_working = -(speedR);	//<<2
	} else {
		pwm_right_working = speedR;		//<<2
    3f6a:	50 93 ff 03 	sts	0x03FF, r21
    3f6e:	40 93 fe 03 	sts	0x03FE, r20
	}


	if (pwm_right_working>(MAX_MOTORS_PWM/2)) pwm_right_working=(MAX_MOTORS_PWM/2);
    3f72:	22 e0       	ldi	r18, 0x02	; 2
    3f74:	41 30       	cpi	r20, 0x01	; 1
    3f76:	52 07       	cpc	r21, r18
    3f78:	44 f0       	brlt	.+16     	; 0x3f8a <obstacleAvoidance+0x142>
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	32 e0       	ldi	r19, 0x02	; 2
    3f7e:	30 93 ff 03 	sts	0x03FF, r19
    3f82:	20 93 fe 03 	sts	0x03FE, r18
    3f86:	40 e0       	ldi	r20, 0x00	; 0
    3f88:	52 e0       	ldi	r21, 0x02	; 2
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
    3f8a:	22 e0       	ldi	r18, 0x02	; 2
    3f8c:	81 30       	cpi	r24, 0x01	; 1
    3f8e:	92 07       	cpc	r25, r18
    3f90:	34 f0       	brlt	.+12     	; 0x3f9e <obstacleAvoidance+0x156>
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	92 e0       	ldi	r25, 0x02	; 2
    3f96:	90 93 01 04 	sts	0x0401, r25
    3f9a:	80 93 00 04 	sts	0x0400, r24
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
    3f9e:	2e ef       	ldi	r18, 0xFE	; 254
    3fa0:	40 30       	cpi	r20, 0x00	; 0
    3fa2:	52 07       	cpc	r21, r18
    3fa4:	34 f4       	brge	.+12     	; 0x3fb2 <obstacleAvoidance+0x16a>
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	3e ef       	ldi	r19, 0xFE	; 254
    3faa:	30 93 ff 03 	sts	0x03FF, r19
    3fae:	20 93 fe 03 	sts	0x03FE, r18
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
    3fb2:	2e ef       	ldi	r18, 0xFE	; 254
    3fb4:	80 30       	cpi	r24, 0x00	; 0
    3fb6:	92 07       	cpc	r25, r18
    3fb8:	34 f4       	brge	.+12     	; 0x3fc6 <obstacleAvoidance+0x17e>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	9e ef       	ldi	r25, 0xFE	; 254
    3fbe:	90 93 01 04 	sts	0x0401, r25
    3fc2:	80 93 00 04 	sts	0x0400, r24
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	ff 90       	pop	r15
    3fcc:	ef 90       	pop	r14
    3fce:	df 90       	pop	r13
    3fd0:	cf 90       	pop	r12
    3fd2:	08 95       	ret
	speedR = speedr;

	// speedr and speedl goes from 0 to 127 (usually 0..100), absolute value for both
	// forward and backward directions; we need a negative value for backward direction
	if(pwm_right_desired < 0) {
		speedR = -speedR; 
    3fd4:	70 95       	com	r23
    3fd6:	61 95       	neg	r22
    3fd8:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	if(pwm_left_desired < 0) {
    3fda:	20 91 ee 03 	lds	r18, 0x03EE
    3fde:	30 91 ef 03 	lds	r19, 0x03EF
    3fe2:	37 ff       	sbrs	r19, 7
    3fe4:	4b cf       	rjmp	.-362    	; 0x3e7c <obstacleAvoidance+0x34>
		speedL = -speedL;
    3fe6:	90 95       	com	r25
    3fe8:	81 95       	neg	r24
    3fea:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// compute the velocity components
	velX = (speedR + speedL)/2;
    3fec:	dc 01       	movw	r26, r24
    3fee:	a6 0f       	add	r26, r22
    3ff0:	b7 1f       	adc	r27, r23
    3ff2:	b7 ff       	sbrs	r27, 7
    3ff4:	48 cf       	rjmp	.-368    	; 0x3e86 <obstacleAvoidance+0x3e>
    3ff6:	11 96       	adiw	r26, 0x01	; 1
    3ff8:	b5 95       	asr	r27
    3ffa:	a7 95       	ror	r26
	velY = (speedR - speedL)/2;
    3ffc:	68 1b       	sub	r22, r24
    3ffe:	79 0b       	sbc	r23, r25
    4000:	77 ff       	sbrs	r23, 7
    4002:	47 cf       	rjmp	.-370    	; 0x3e92 <obstacleAvoidance+0x4a>
    4004:	6f 5f       	subi	r22, 0xFF	; 255
    4006:	7f 4f       	sbci	r23, 0xFF	; 255
    4008:	44 cf       	rjmp	.-376    	; 0x3e92 <obstacleAvoidance+0x4a>
		pwm_left_working = speedL;		//<<2
	}

	if(speedR < 0) {
		speedR = -speedR;
		pwm_right_working = -(speedR);	//<<2
    400a:	50 93 ff 03 	sts	0x03FF, r21
    400e:	40 93 fe 03 	sts	0x03FE, r20
    4012:	bb cf       	rjmp	.-138    	; 0x3f8a <obstacleAvoidance+0x142>
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    4014:	4f 5f       	subi	r20, 0xFF	; 255
    4016:	5f 4f       	sbci	r21, 0xFF	; 255
    4018:	91 cf       	rjmp	.-222    	; 0x3f3c <obstacleAvoidance+0xf4>
	// compute the velocity components
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    401a:	31 96       	adiw	r30, 0x01	; 1
    401c:	48 cf       	rjmp	.-368    	; 0x3eae <obstacleAvoidance+0x66>
	sumSensorsY = proximityResult[1]/2 + proximityResult[2] + proximityResult[3]/2 - proximityResult[5]/2 - proximityResult[6] - proximityResult[7]/2;
    401e:	2f 5f       	subi	r18, 0xFF	; 255
    4020:	3f 4f       	sbci	r19, 0xFF	; 255
    4022:	84 cf       	rjmp	.-248    	; 0x3f2c <obstacleAvoidance+0xe4>
	// compute the velocity components
	velX = (speedR + speedL)/2;
	velY = (speedR - speedL)/2;

	// sum the contribution of each sensor (based on the previous weights table)
	sumSensorsX = -proximityResult[0] - proximityResult[1]/2 + proximityResult[3]/2 + proximityResult[4] + proximityResult[5]/2 - proximityResult[7]/2;
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	68 cf       	rjmp	.-304    	; 0x3ef8 <obstacleAvoidance+0xb0>
    4028:	01 96       	adiw	r24, 0x01	; 1
    402a:	58 cf       	rjmp	.-336    	; 0x3edc <obstacleAvoidance+0x94>
    402c:	4f 5f       	subi	r20, 0xFF	; 255
    402e:	5f 4f       	sbci	r21, 0xFF	; 255
    4030:	4c cf       	rjmp	.-360    	; 0x3eca <obstacleAvoidance+0x82>

00004032 <cliffDetected>:
	} else {
		return 0;
	}
*/

	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4032:	80 91 75 03 	lds	r24, 0x0375
    4036:	90 91 76 03 	lds	r25, 0x0376
    403a:	21 e0       	ldi	r18, 0x01	; 1
    403c:	8a 3e       	cpi	r24, 0xEA	; 234
    403e:	92 07       	cpc	r25, r18
    4040:	d4 f0       	brlt	.+52     	; 0x4076 <cliffDetected+0x44>
    4042:	80 91 77 03 	lds	r24, 0x0377
    4046:	90 91 78 03 	lds	r25, 0x0378
    404a:	21 e0       	ldi	r18, 0x01	; 1
    404c:	8a 3e       	cpi	r24, 0xEA	; 234
    404e:	92 07       	cpc	r25, r18
    4050:	94 f0       	brlt	.+36     	; 0x4076 <cliffDetected+0x44>
    4052:	80 91 79 03 	lds	r24, 0x0379
    4056:	90 91 7a 03 	lds	r25, 0x037A
    405a:	21 e0       	ldi	r18, 0x01	; 1
    405c:	8a 3e       	cpi	r24, 0xEA	; 234
    405e:	92 07       	cpc	r25, r18
    4060:	74 f0       	brlt	.+28     	; 0x407e <cliffDetected+0x4c>
		return 1;
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	20 91 7b 03 	lds	r18, 0x037B
    4068:	30 91 7c 03 	lds	r19, 0x037C
    406c:	91 e0       	ldi	r25, 0x01	; 1
    406e:	2a 3e       	cpi	r18, 0xEA	; 234
    4070:	39 07       	cpc	r19, r25
    4072:	1c f4       	brge	.+6      	; 0x407a <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    4074:	08 95       	ret
		return 0;
	}
*/

	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	08 95       	ret
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	08 95       	ret
    407e:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    4080:	08 95       	ret

00004082 <initRGBleds>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
    4082:	e0 e8       	ldi	r30, 0x80	; 128
    4084:	f0 e0       	ldi	r31, 0x00	; 0
    4086:	80 81       	ld	r24, Z
    4088:	89 6a       	ori	r24, 0xA9	; 169
    408a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
    408c:	e1 e8       	ldi	r30, 0x81	; 129
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	89 60       	ori	r24, 0x09	; 9
    4094:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    4096:	80 91 14 02 	lds	r24, 0x0214
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	90 93 89 00 	sts	0x0089, r25
    40a0:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    40a4:	80 91 15 02 	lds	r24, 0x0215
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	90 93 8b 00 	sts	0x008B, r25
    40ae:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    40b2:	80 91 16 02 	lds	r24, 0x0216
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	90 93 8d 00 	sts	0x008D, r25
    40bc:	80 93 8c 00 	sts	0x008C, r24
	//TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1B1) & ~(1 << COM1C1);	// disable OCA, OCB, OCC to turn them off
	//TIMSK1 |= (1 << OCIE1A); 	// Enable output compare match interrupt
	//TIMSK1 |= (1 << TOIE1);	// Enable timer overflow interrupt


}
    40c0:	08 95       	ret

000040c2 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	90 91 07 04 	lds	r25, 0x0407
    40c8:	89 1b       	sub	r24, r25
    40ca:	80 93 07 04 	sts	0x0407, r24

	if(blinkState) {
    40ce:	88 23       	and	r24, r24
    40d0:	39 f4       	brne	.+14     	; 0x40e0 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
    40d2:	80 91 80 00 	lds	r24, 0x0080
    40d6:	87 7f       	andi	r24, 0xF7	; 247
    40d8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    40dc:	2f 98       	cbi	0x05, 7	; 5
    40de:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
    40e0:	80 91 80 00 	lds	r24, 0x0080
    40e4:	88 60       	ori	r24, 0x08	; 8
    40e6:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    40ea:	8f ef       	ldi	r24, 0xFF	; 255
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	90 93 8d 00 	sts	0x008D, r25
    40f2:	80 93 8c 00 	sts	0x008C, r24
    40f6:	08 95       	ret

000040f8 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    40f8:	88 23       	and	r24, r24
    40fa:	59 f0       	breq	.+22     	; 0x4112 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    40fc:	90 91 80 00 	lds	r25, 0x0080
    4100:	90 68       	ori	r25, 0x80	; 128
    4102:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	90 93 89 00 	sts	0x0089, r25
    410c:	80 93 88 00 	sts	0x0088, r24
    4110:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    4112:	80 91 80 00 	lds	r24, 0x0080
    4116:	8f 77       	andi	r24, 0x7F	; 127
    4118:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    411c:	2d 98       	cbi	0x05, 5	; 5
    411e:	08 95       	ret

00004120 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    4120:	88 23       	and	r24, r24
    4122:	59 f0       	breq	.+22     	; 0x413a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    4124:	90 91 80 00 	lds	r25, 0x0080
    4128:	90 62       	ori	r25, 0x20	; 32
    412a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	90 93 8b 00 	sts	0x008B, r25
    4134:	80 93 8a 00 	sts	0x008A, r24
    4138:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    413a:	80 91 80 00 	lds	r24, 0x0080
    413e:	8f 7d       	andi	r24, 0xDF	; 223
    4140:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    4144:	2e 98       	cbi	0x05, 6	; 5
    4146:	08 95       	ret

00004148 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    4148:	88 23       	and	r24, r24
    414a:	59 f0       	breq	.+22     	; 0x4162 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    414c:	90 91 80 00 	lds	r25, 0x0080
    4150:	98 60       	ori	r25, 0x08	; 8
    4152:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	90 93 8d 00 	sts	0x008D, r25
    415c:	80 93 8c 00 	sts	0x008C, r24
    4160:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    4162:	80 91 80 00 	lds	r24, 0x0080
    4166:	87 7f       	andi	r24, 0xF7	; 247
    4168:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    416c:	2f 98       	cbi	0x05, 7	; 5
    416e:	08 95       	ret

00004170 <__mulsf3>:
    4170:	a0 e2       	ldi	r26, 0x20	; 32
    4172:	b0 e0       	ldi	r27, 0x00	; 0
    4174:	ee eb       	ldi	r30, 0xBE	; 190
    4176:	f0 e2       	ldi	r31, 0x20	; 32
    4178:	0c 94 2e 24 	jmp	0x485c	; 0x485c <__prologue_saves__+0x4>
    417c:	69 83       	std	Y+1, r22	; 0x01
    417e:	7a 83       	std	Y+2, r23	; 0x02
    4180:	8b 83       	std	Y+3, r24	; 0x03
    4182:	9c 83       	std	Y+4, r25	; 0x04
    4184:	2d 83       	std	Y+5, r18	; 0x05
    4186:	3e 83       	std	Y+6, r19	; 0x06
    4188:	4f 83       	std	Y+7, r20	; 0x07
    418a:	58 87       	std	Y+8, r21	; 0x08
    418c:	99 e0       	ldi	r25, 0x09	; 9
    418e:	e9 2e       	mov	r14, r25
    4190:	f1 2c       	mov	r15, r1
    4192:	ec 0e       	add	r14, r28
    4194:	fd 1e       	adc	r15, r29
    4196:	b7 01       	movw	r22, r14
    4198:	ce 01       	movw	r24, r28
    419a:	01 96       	adiw	r24, 0x01	; 1
    419c:	0e 94 95 23 	call	0x472a	; 0x472a <__unpack_f>
    41a0:	8e 01       	movw	r16, r28
    41a2:	0f 5e       	subi	r16, 0xEF	; 239
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	b8 01       	movw	r22, r16
    41a8:	ce 01       	movw	r24, r28
    41aa:	05 96       	adiw	r24, 0x05	; 5
    41ac:	0e 94 95 23 	call	0x472a	; 0x472a <__unpack_f>
    41b0:	99 85       	ldd	r25, Y+9	; 0x09
    41b2:	92 30       	cpi	r25, 0x02	; 2
    41b4:	88 f0       	brcs	.+34     	; 0x41d8 <__mulsf3+0x68>
    41b6:	89 89       	ldd	r24, Y+17	; 0x11
    41b8:	82 30       	cpi	r24, 0x02	; 2
    41ba:	c0 f0       	brcs	.+48     	; 0x41ec <__mulsf3+0x7c>
    41bc:	94 30       	cpi	r25, 0x04	; 4
    41be:	19 f4       	brne	.+6      	; 0x41c6 <__mulsf3+0x56>
    41c0:	82 30       	cpi	r24, 0x02	; 2
    41c2:	29 f0       	breq	.+10     	; 0x41ce <__mulsf3+0x5e>
    41c4:	09 c0       	rjmp	.+18     	; 0x41d8 <__mulsf3+0x68>
    41c6:	84 30       	cpi	r24, 0x04	; 4
    41c8:	29 f4       	brne	.+10     	; 0x41d4 <__mulsf3+0x64>
    41ca:	92 30       	cpi	r25, 0x02	; 2
    41cc:	79 f4       	brne	.+30     	; 0x41ec <__mulsf3+0x7c>
    41ce:	61 e2       	ldi	r22, 0x21	; 33
    41d0:	72 e0       	ldi	r23, 0x02	; 2
    41d2:	c6 c0       	rjmp	.+396    	; 0x4360 <__mulsf3+0x1f0>
    41d4:	92 30       	cpi	r25, 0x02	; 2
    41d6:	41 f4       	brne	.+16     	; 0x41e8 <__mulsf3+0x78>
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	9a 85       	ldd	r25, Y+10	; 0x0a
    41dc:	8a 89       	ldd	r24, Y+18	; 0x12
    41de:	98 13       	cpse	r25, r24
    41e0:	21 e0       	ldi	r18, 0x01	; 1
    41e2:	2a 87       	std	Y+10, r18	; 0x0a
    41e4:	b7 01       	movw	r22, r14
    41e6:	bc c0       	rjmp	.+376    	; 0x4360 <__mulsf3+0x1f0>
    41e8:	82 30       	cpi	r24, 0x02	; 2
    41ea:	41 f4       	brne	.+16     	; 0x41fc <__mulsf3+0x8c>
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f0:	8a 89       	ldd	r24, Y+18	; 0x12
    41f2:	98 13       	cpse	r25, r24
    41f4:	21 e0       	ldi	r18, 0x01	; 1
    41f6:	2a 8b       	std	Y+18, r18	; 0x12
    41f8:	b8 01       	movw	r22, r16
    41fa:	b2 c0       	rjmp	.+356    	; 0x4360 <__mulsf3+0x1f0>
    41fc:	cd 84       	ldd	r12, Y+13	; 0x0d
    41fe:	de 84       	ldd	r13, Y+14	; 0x0e
    4200:	ef 84       	ldd	r14, Y+15	; 0x0f
    4202:	f8 88       	ldd	r15, Y+16	; 0x10
    4204:	0d 89       	ldd	r16, Y+21	; 0x15
    4206:	1e 89       	ldd	r17, Y+22	; 0x16
    4208:	2f 89       	ldd	r18, Y+23	; 0x17
    420a:	38 8d       	ldd	r19, Y+24	; 0x18
    420c:	88 24       	eor	r8, r8
    420e:	99 24       	eor	r9, r9
    4210:	54 01       	movw	r10, r8
    4212:	40 e0       	ldi	r20, 0x00	; 0
    4214:	50 e0       	ldi	r21, 0x00	; 0
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	44 24       	eor	r4, r4
    421c:	55 24       	eor	r5, r5
    421e:	32 01       	movw	r6, r4
    4220:	e0 e0       	ldi	r30, 0x00	; 0
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	c6 01       	movw	r24, r12
    4226:	81 70       	andi	r24, 0x01	; 1
    4228:	90 70       	andi	r25, 0x00	; 0
    422a:	89 2b       	or	r24, r25
    422c:	d9 f0       	breq	.+54     	; 0x4264 <__mulsf3+0xf4>
    422e:	80 0e       	add	r8, r16
    4230:	91 1e       	adc	r9, r17
    4232:	a2 1e       	adc	r10, r18
    4234:	b3 1e       	adc	r11, r19
    4236:	db 01       	movw	r26, r22
    4238:	ca 01       	movw	r24, r20
    423a:	84 0d       	add	r24, r4
    423c:	95 1d       	adc	r25, r5
    423e:	a6 1d       	adc	r26, r6
    4240:	b7 1d       	adc	r27, r7
    4242:	40 e0       	ldi	r20, 0x00	; 0
    4244:	50 e0       	ldi	r21, 0x00	; 0
    4246:	60 e0       	ldi	r22, 0x00	; 0
    4248:	70 e0       	ldi	r23, 0x00	; 0
    424a:	80 16       	cp	r8, r16
    424c:	91 06       	cpc	r9, r17
    424e:	a2 06       	cpc	r10, r18
    4250:	b3 06       	cpc	r11, r19
    4252:	20 f4       	brcc	.+8      	; 0x425c <__mulsf3+0xec>
    4254:	41 e0       	ldi	r20, 0x01	; 1
    4256:	50 e0       	ldi	r21, 0x00	; 0
    4258:	60 e0       	ldi	r22, 0x00	; 0
    425a:	70 e0       	ldi	r23, 0x00	; 0
    425c:	48 0f       	add	r20, r24
    425e:	59 1f       	adc	r21, r25
    4260:	6a 1f       	adc	r22, r26
    4262:	7b 1f       	adc	r23, r27
    4264:	44 0c       	add	r4, r4
    4266:	55 1c       	adc	r5, r5
    4268:	66 1c       	adc	r6, r6
    426a:	77 1c       	adc	r7, r7
    426c:	37 ff       	sbrs	r19, 7
    426e:	08 c0       	rjmp	.+16     	; 0x4280 <__mulsf3+0x110>
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	a0 e0       	ldi	r26, 0x00	; 0
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	48 2a       	or	r4, r24
    427a:	59 2a       	or	r5, r25
    427c:	6a 2a       	or	r6, r26
    427e:	7b 2a       	or	r7, r27
    4280:	31 96       	adiw	r30, 0x01	; 1
    4282:	e0 32       	cpi	r30, 0x20	; 32
    4284:	f1 05       	cpc	r31, r1
    4286:	49 f0       	breq	.+18     	; 0x429a <__mulsf3+0x12a>
    4288:	00 0f       	add	r16, r16
    428a:	11 1f       	adc	r17, r17
    428c:	22 1f       	adc	r18, r18
    428e:	33 1f       	adc	r19, r19
    4290:	f6 94       	lsr	r15
    4292:	e7 94       	ror	r14
    4294:	d7 94       	ror	r13
    4296:	c7 94       	ror	r12
    4298:	c5 cf       	rjmp	.-118    	; 0x4224 <__mulsf3+0xb4>
    429a:	8b 89       	ldd	r24, Y+19	; 0x13
    429c:	9c 89       	ldd	r25, Y+20	; 0x14
    429e:	2b 85       	ldd	r18, Y+11	; 0x0b
    42a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    42a2:	82 0f       	add	r24, r18
    42a4:	93 1f       	adc	r25, r19
    42a6:	02 96       	adiw	r24, 0x02	; 2
    42a8:	9c 8f       	std	Y+28, r25	; 0x1c
    42aa:	8b 8f       	std	Y+27, r24	; 0x1b
    42ac:	1a 8e       	std	Y+26, r1	; 0x1a
    42ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b0:	8a 89       	ldd	r24, Y+18	; 0x12
    42b2:	98 17       	cp	r25, r24
    42b4:	11 f0       	breq	.+4      	; 0x42ba <__mulsf3+0x14a>
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	8a 8f       	std	Y+26, r24	; 0x1a
    42ba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    42bc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    42be:	17 c0       	rjmp	.+46     	; 0x42ee <__mulsf3+0x17e>
    42c0:	ca 01       	movw	r24, r20
    42c2:	81 70       	andi	r24, 0x01	; 1
    42c4:	90 70       	andi	r25, 0x00	; 0
    42c6:	89 2b       	or	r24, r25
    42c8:	61 f0       	breq	.+24     	; 0x42e2 <__mulsf3+0x172>
    42ca:	b6 94       	lsr	r11
    42cc:	a7 94       	ror	r10
    42ce:	97 94       	ror	r9
    42d0:	87 94       	ror	r8
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a0 e0       	ldi	r26, 0x00	; 0
    42d8:	b0 e8       	ldi	r27, 0x80	; 128
    42da:	88 2a       	or	r8, r24
    42dc:	99 2a       	or	r9, r25
    42de:	aa 2a       	or	r10, r26
    42e0:	bb 2a       	or	r11, r27
    42e2:	76 95       	lsr	r23
    42e4:	67 95       	ror	r22
    42e6:	57 95       	ror	r21
    42e8:	47 95       	ror	r20
    42ea:	2f 5f       	subi	r18, 0xFF	; 255
    42ec:	3f 4f       	sbci	r19, 0xFF	; 255
    42ee:	77 fd       	sbrc	r23, 7
    42f0:	e7 cf       	rjmp	.-50     	; 0x42c0 <__mulsf3+0x150>
    42f2:	c9 01       	movw	r24, r18
    42f4:	0b c0       	rjmp	.+22     	; 0x430c <__mulsf3+0x19c>
    42f6:	44 0f       	add	r20, r20
    42f8:	55 1f       	adc	r21, r21
    42fa:	66 1f       	adc	r22, r22
    42fc:	77 1f       	adc	r23, r23
    42fe:	b7 fc       	sbrc	r11, 7
    4300:	41 60       	ori	r20, 0x01	; 1
    4302:	88 0c       	add	r8, r8
    4304:	99 1c       	adc	r9, r9
    4306:	aa 1c       	adc	r10, r10
    4308:	bb 1c       	adc	r11, r11
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	40 30       	cpi	r20, 0x00	; 0
    430e:	a0 e0       	ldi	r26, 0x00	; 0
    4310:	5a 07       	cpc	r21, r26
    4312:	a0 e0       	ldi	r26, 0x00	; 0
    4314:	6a 07       	cpc	r22, r26
    4316:	a0 e4       	ldi	r26, 0x40	; 64
    4318:	7a 07       	cpc	r23, r26
    431a:	68 f3       	brcs	.-38     	; 0x42f6 <__mulsf3+0x186>
    431c:	9c 8f       	std	Y+28, r25	; 0x1c
    431e:	8b 8f       	std	Y+27, r24	; 0x1b
    4320:	db 01       	movw	r26, r22
    4322:	ca 01       	movw	r24, r20
    4324:	8f 77       	andi	r24, 0x7F	; 127
    4326:	90 70       	andi	r25, 0x00	; 0
    4328:	a0 70       	andi	r26, 0x00	; 0
    432a:	b0 70       	andi	r27, 0x00	; 0
    432c:	80 34       	cpi	r24, 0x40	; 64
    432e:	91 05       	cpc	r25, r1
    4330:	a1 05       	cpc	r26, r1
    4332:	b1 05       	cpc	r27, r1
    4334:	61 f4       	brne	.+24     	; 0x434e <__mulsf3+0x1de>
    4336:	47 fd       	sbrc	r20, 7
    4338:	0a c0       	rjmp	.+20     	; 0x434e <__mulsf3+0x1de>
    433a:	81 14       	cp	r8, r1
    433c:	91 04       	cpc	r9, r1
    433e:	a1 04       	cpc	r10, r1
    4340:	b1 04       	cpc	r11, r1
    4342:	29 f0       	breq	.+10     	; 0x434e <__mulsf3+0x1de>
    4344:	40 5c       	subi	r20, 0xC0	; 192
    4346:	5f 4f       	sbci	r21, 0xFF	; 255
    4348:	6f 4f       	sbci	r22, 0xFF	; 255
    434a:	7f 4f       	sbci	r23, 0xFF	; 255
    434c:	40 78       	andi	r20, 0x80	; 128
    434e:	4d 8f       	std	Y+29, r20	; 0x1d
    4350:	5e 8f       	std	Y+30, r21	; 0x1e
    4352:	6f 8f       	std	Y+31, r22	; 0x1f
    4354:	78 a3       	std	Y+32, r23	; 0x20
    4356:	83 e0       	ldi	r24, 0x03	; 3
    4358:	89 8f       	std	Y+25, r24	; 0x19
    435a:	be 01       	movw	r22, r28
    435c:	67 5e       	subi	r22, 0xE7	; 231
    435e:	7f 4f       	sbci	r23, 0xFF	; 255
    4360:	cb 01       	movw	r24, r22
    4362:	0e 94 b5 22 	call	0x456a	; 0x456a <__pack_f>
    4366:	e0 e1       	ldi	r30, 0x10	; 16
    4368:	a0 96       	adiw	r28, 0x20	; 32
    436a:	0c 94 4a 24 	jmp	0x4894	; 0x4894 <__epilogue_restores__+0x4>

0000436e <__floatsisf>:
    436e:	a8 e0       	ldi	r26, 0x08	; 8
    4370:	b0 e0       	ldi	r27, 0x00	; 0
    4372:	ed eb       	ldi	r30, 0xBD	; 189
    4374:	f1 e2       	ldi	r31, 0x21	; 33
    4376:	0c 94 35 24 	jmp	0x486a	; 0x486a <__prologue_saves__+0x12>
    437a:	9b 01       	movw	r18, r22
    437c:	ac 01       	movw	r20, r24
    437e:	83 e0       	ldi	r24, 0x03	; 3
    4380:	89 83       	std	Y+1, r24	; 0x01
    4382:	da 01       	movw	r26, r20
    4384:	c9 01       	movw	r24, r18
    4386:	88 27       	eor	r24, r24
    4388:	b7 fd       	sbrc	r27, 7
    438a:	83 95       	inc	r24
    438c:	99 27       	eor	r25, r25
    438e:	aa 27       	eor	r26, r26
    4390:	bb 27       	eor	r27, r27
    4392:	b8 2e       	mov	r11, r24
    4394:	21 15       	cp	r18, r1
    4396:	31 05       	cpc	r19, r1
    4398:	41 05       	cpc	r20, r1
    439a:	51 05       	cpc	r21, r1
    439c:	19 f4       	brne	.+6      	; 0x43a4 <__floatsisf+0x36>
    439e:	82 e0       	ldi	r24, 0x02	; 2
    43a0:	89 83       	std	Y+1, r24	; 0x01
    43a2:	3a c0       	rjmp	.+116    	; 0x4418 <__floatsisf+0xaa>
    43a4:	88 23       	and	r24, r24
    43a6:	a9 f0       	breq	.+42     	; 0x43d2 <__floatsisf+0x64>
    43a8:	20 30       	cpi	r18, 0x00	; 0
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	38 07       	cpc	r19, r24
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	48 07       	cpc	r20, r24
    43b2:	80 e8       	ldi	r24, 0x80	; 128
    43b4:	58 07       	cpc	r21, r24
    43b6:	29 f4       	brne	.+10     	; 0x43c2 <__floatsisf+0x54>
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	70 e0       	ldi	r23, 0x00	; 0
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	9f ec       	ldi	r25, 0xCF	; 207
    43c0:	30 c0       	rjmp	.+96     	; 0x4422 <__floatsisf+0xb4>
    43c2:	ee 24       	eor	r14, r14
    43c4:	ff 24       	eor	r15, r15
    43c6:	87 01       	movw	r16, r14
    43c8:	e2 1a       	sub	r14, r18
    43ca:	f3 0a       	sbc	r15, r19
    43cc:	04 0b       	sbc	r16, r20
    43ce:	15 0b       	sbc	r17, r21
    43d0:	02 c0       	rjmp	.+4      	; 0x43d6 <__floatsisf+0x68>
    43d2:	79 01       	movw	r14, r18
    43d4:	8a 01       	movw	r16, r20
    43d6:	8e e1       	ldi	r24, 0x1E	; 30
    43d8:	c8 2e       	mov	r12, r24
    43da:	d1 2c       	mov	r13, r1
    43dc:	dc 82       	std	Y+4, r13	; 0x04
    43de:	cb 82       	std	Y+3, r12	; 0x03
    43e0:	ed 82       	std	Y+5, r14	; 0x05
    43e2:	fe 82       	std	Y+6, r15	; 0x06
    43e4:	0f 83       	std	Y+7, r16	; 0x07
    43e6:	18 87       	std	Y+8, r17	; 0x08
    43e8:	c8 01       	movw	r24, r16
    43ea:	b7 01       	movw	r22, r14
    43ec:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__clzsi2>
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	18 16       	cp	r1, r24
    43f4:	19 06       	cpc	r1, r25
    43f6:	84 f4       	brge	.+32     	; 0x4418 <__floatsisf+0xaa>
    43f8:	08 2e       	mov	r0, r24
    43fa:	04 c0       	rjmp	.+8      	; 0x4404 <__floatsisf+0x96>
    43fc:	ee 0c       	add	r14, r14
    43fe:	ff 1c       	adc	r15, r15
    4400:	00 1f       	adc	r16, r16
    4402:	11 1f       	adc	r17, r17
    4404:	0a 94       	dec	r0
    4406:	d2 f7       	brpl	.-12     	; 0x43fc <__floatsisf+0x8e>
    4408:	ed 82       	std	Y+5, r14	; 0x05
    440a:	fe 82       	std	Y+6, r15	; 0x06
    440c:	0f 83       	std	Y+7, r16	; 0x07
    440e:	18 87       	std	Y+8, r17	; 0x08
    4410:	c8 1a       	sub	r12, r24
    4412:	d9 0a       	sbc	r13, r25
    4414:	dc 82       	std	Y+4, r13	; 0x04
    4416:	cb 82       	std	Y+3, r12	; 0x03
    4418:	ba 82       	std	Y+2, r11	; 0x02
    441a:	ce 01       	movw	r24, r28
    441c:	01 96       	adiw	r24, 0x01	; 1
    441e:	0e 94 b5 22 	call	0x456a	; 0x456a <__pack_f>
    4422:	e9 e0       	ldi	r30, 0x09	; 9
    4424:	28 96       	adiw	r28, 0x08	; 8
    4426:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__epilogue_restores__+0x12>

0000442a <__fixsfsi>:
    442a:	ac e0       	ldi	r26, 0x0C	; 12
    442c:	b0 e0       	ldi	r27, 0x00	; 0
    442e:	eb e1       	ldi	r30, 0x1B	; 27
    4430:	f2 e2       	ldi	r31, 0x22	; 34
    4432:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__prologue_saves__+0x20>
    4436:	69 83       	std	Y+1, r22	; 0x01
    4438:	7a 83       	std	Y+2, r23	; 0x02
    443a:	8b 83       	std	Y+3, r24	; 0x03
    443c:	9c 83       	std	Y+4, r25	; 0x04
    443e:	be 01       	movw	r22, r28
    4440:	6b 5f       	subi	r22, 0xFB	; 251
    4442:	7f 4f       	sbci	r23, 0xFF	; 255
    4444:	ce 01       	movw	r24, r28
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	0e 94 95 23 	call	0x472a	; 0x472a <__unpack_f>
    444c:	8d 81       	ldd	r24, Y+5	; 0x05
    444e:	82 30       	cpi	r24, 0x02	; 2
    4450:	a9 f1       	breq	.+106    	; 0x44bc <__fixsfsi+0x92>
    4452:	82 30       	cpi	r24, 0x02	; 2
    4454:	98 f1       	brcs	.+102    	; 0x44bc <__fixsfsi+0x92>
    4456:	84 30       	cpi	r24, 0x04	; 4
    4458:	21 f4       	brne	.+8      	; 0x4462 <__fixsfsi+0x38>
    445a:	8e 81       	ldd	r24, Y+6	; 0x06
    445c:	88 23       	and	r24, r24
    445e:	59 f4       	brne	.+22     	; 0x4476 <__fixsfsi+0x4c>
    4460:	0f c0       	rjmp	.+30     	; 0x4480 <__fixsfsi+0x56>
    4462:	2f 81       	ldd	r18, Y+7	; 0x07
    4464:	38 85       	ldd	r19, Y+8	; 0x08
    4466:	37 fd       	sbrc	r19, 7
    4468:	29 c0       	rjmp	.+82     	; 0x44bc <__fixsfsi+0x92>
    446a:	6e 81       	ldd	r22, Y+6	; 0x06
    446c:	2f 31       	cpi	r18, 0x1F	; 31
    446e:	31 05       	cpc	r19, r1
    4470:	64 f0       	brlt	.+24     	; 0x448a <__fixsfsi+0x60>
    4472:	66 23       	and	r22, r22
    4474:	29 f0       	breq	.+10     	; 0x4480 <__fixsfsi+0x56>
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	50 e8       	ldi	r21, 0x80	; 128
    447e:	22 c0       	rjmp	.+68     	; 0x44c4 <__fixsfsi+0x9a>
    4480:	2f ef       	ldi	r18, 0xFF	; 255
    4482:	3f ef       	ldi	r19, 0xFF	; 255
    4484:	4f ef       	ldi	r20, 0xFF	; 255
    4486:	5f e7       	ldi	r21, 0x7F	; 127
    4488:	1d c0       	rjmp	.+58     	; 0x44c4 <__fixsfsi+0x9a>
    448a:	8e e1       	ldi	r24, 0x1E	; 30
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	82 1b       	sub	r24, r18
    4490:	93 0b       	sbc	r25, r19
    4492:	29 85       	ldd	r18, Y+9	; 0x09
    4494:	3a 85       	ldd	r19, Y+10	; 0x0a
    4496:	4b 85       	ldd	r20, Y+11	; 0x0b
    4498:	5c 85       	ldd	r21, Y+12	; 0x0c
    449a:	04 c0       	rjmp	.+8      	; 0x44a4 <__fixsfsi+0x7a>
    449c:	56 95       	lsr	r21
    449e:	47 95       	ror	r20
    44a0:	37 95       	ror	r19
    44a2:	27 95       	ror	r18
    44a4:	8a 95       	dec	r24
    44a6:	d2 f7       	brpl	.-12     	; 0x449c <__fixsfsi+0x72>
    44a8:	66 23       	and	r22, r22
    44aa:	61 f0       	breq	.+24     	; 0x44c4 <__fixsfsi+0x9a>
    44ac:	50 95       	com	r21
    44ae:	40 95       	com	r20
    44b0:	30 95       	com	r19
    44b2:	21 95       	neg	r18
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	4f 4f       	sbci	r20, 0xFF	; 255
    44b8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ba:	04 c0       	rjmp	.+8      	; 0x44c4 <__fixsfsi+0x9a>
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e0       	ldi	r20, 0x00	; 0
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	ca 01       	movw	r24, r20
    44c6:	b9 01       	movw	r22, r18
    44c8:	e2 e0       	ldi	r30, 0x02	; 2
    44ca:	2c 96       	adiw	r28, 0x0c	; 12
    44cc:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__epilogue_restores__+0x20>

000044d0 <__clzsi2>:
    44d0:	ef 92       	push	r14
    44d2:	ff 92       	push	r15
    44d4:	0f 93       	push	r16
    44d6:	1f 93       	push	r17
    44d8:	9b 01       	movw	r18, r22
    44da:	ac 01       	movw	r20, r24
    44dc:	20 30       	cpi	r18, 0x00	; 0
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	38 07       	cpc	r19, r24
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	48 07       	cpc	r20, r24
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	58 07       	cpc	r21, r24
    44ea:	80 f4       	brcc	.+32     	; 0x450c <__clzsi2+0x3c>
    44ec:	2f 3f       	cpi	r18, 0xFF	; 255
    44ee:	31 05       	cpc	r19, r1
    44f0:	41 05       	cpc	r20, r1
    44f2:	51 05       	cpc	r21, r1
    44f4:	09 f0       	breq	.+2      	; 0x44f8 <__clzsi2+0x28>
    44f6:	20 f4       	brcc	.+8      	; 0x4500 <__clzsi2+0x30>
    44f8:	ee 24       	eor	r14, r14
    44fa:	ff 24       	eor	r15, r15
    44fc:	87 01       	movw	r16, r14
    44fe:	19 c0       	rjmp	.+50     	; 0x4532 <__clzsi2+0x62>
    4500:	68 e0       	ldi	r22, 0x08	; 8
    4502:	e6 2e       	mov	r14, r22
    4504:	f1 2c       	mov	r15, r1
    4506:	01 2d       	mov	r16, r1
    4508:	11 2d       	mov	r17, r1
    450a:	13 c0       	rjmp	.+38     	; 0x4532 <__clzsi2+0x62>
    450c:	20 30       	cpi	r18, 0x00	; 0
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	38 07       	cpc	r19, r24
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	48 07       	cpc	r20, r24
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	58 07       	cpc	r21, r24
    451a:	30 f4       	brcc	.+12     	; 0x4528 <__clzsi2+0x58>
    451c:	90 e1       	ldi	r25, 0x10	; 16
    451e:	e9 2e       	mov	r14, r25
    4520:	f1 2c       	mov	r15, r1
    4522:	01 2d       	mov	r16, r1
    4524:	11 2d       	mov	r17, r1
    4526:	05 c0       	rjmp	.+10     	; 0x4532 <__clzsi2+0x62>
    4528:	88 e1       	ldi	r24, 0x18	; 24
    452a:	e8 2e       	mov	r14, r24
    452c:	f1 2c       	mov	r15, r1
    452e:	01 2d       	mov	r16, r1
    4530:	11 2d       	mov	r17, r1
    4532:	80 e2       	ldi	r24, 0x20	; 32
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	a0 e0       	ldi	r26, 0x00	; 0
    4538:	b0 e0       	ldi	r27, 0x00	; 0
    453a:	8e 19       	sub	r24, r14
    453c:	9f 09       	sbc	r25, r15
    453e:	a0 0b       	sbc	r26, r16
    4540:	b1 0b       	sbc	r27, r17
    4542:	04 c0       	rjmp	.+8      	; 0x454c <__clzsi2+0x7c>
    4544:	56 95       	lsr	r21
    4546:	47 95       	ror	r20
    4548:	37 95       	ror	r19
    454a:	27 95       	ror	r18
    454c:	ea 94       	dec	r14
    454e:	d2 f7       	brpl	.-12     	; 0x4544 <__clzsi2+0x74>
    4550:	f9 01       	movw	r30, r18
    4552:	e7 5d       	subi	r30, 0xD7	; 215
    4554:	fd 4f       	sbci	r31, 0xFD	; 253
    4556:	20 81       	ld	r18, Z
    4558:	82 1b       	sub	r24, r18
    455a:	91 09       	sbc	r25, r1
    455c:	a1 09       	sbc	r26, r1
    455e:	b1 09       	sbc	r27, r1
    4560:	1f 91       	pop	r17
    4562:	0f 91       	pop	r16
    4564:	ff 90       	pop	r15
    4566:	ef 90       	pop	r14
    4568:	08 95       	ret

0000456a <__pack_f>:
    456a:	9f 92       	push	r9
    456c:	af 92       	push	r10
    456e:	bf 92       	push	r11
    4570:	cf 92       	push	r12
    4572:	df 92       	push	r13
    4574:	ef 92       	push	r14
    4576:	ff 92       	push	r15
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	ee 24       	eor	r14, r14
    457e:	ff 24       	eor	r15, r15
    4580:	87 01       	movw	r16, r14
    4582:	fc 01       	movw	r30, r24
    4584:	24 81       	ldd	r18, Z+4	; 0x04
    4586:	35 81       	ldd	r19, Z+5	; 0x05
    4588:	46 81       	ldd	r20, Z+6	; 0x06
    458a:	57 81       	ldd	r21, Z+7	; 0x07
    458c:	91 80       	ldd	r9, Z+1	; 0x01
    458e:	80 81       	ld	r24, Z
    4590:	82 30       	cpi	r24, 0x02	; 2
    4592:	10 f4       	brcc	.+4      	; 0x4598 <__pack_f+0x2e>
    4594:	40 61       	ori	r20, 0x10	; 16
    4596:	a2 c0       	rjmp	.+324    	; 0x46dc <__pack_f+0x172>
    4598:	84 30       	cpi	r24, 0x04	; 4
    459a:	09 f4       	brne	.+2      	; 0x459e <__pack_f+0x34>
    459c:	9b c0       	rjmp	.+310    	; 0x46d4 <__pack_f+0x16a>
    459e:	82 30       	cpi	r24, 0x02	; 2
    45a0:	29 f4       	brne	.+10     	; 0x45ac <__pack_f+0x42>
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	40 e0       	ldi	r20, 0x00	; 0
    45a8:	50 e0       	ldi	r21, 0x00	; 0
    45aa:	05 c0       	rjmp	.+10     	; 0x45b6 <__pack_f+0x4c>
    45ac:	21 15       	cp	r18, r1
    45ae:	31 05       	cpc	r19, r1
    45b0:	41 05       	cpc	r20, r1
    45b2:	51 05       	cpc	r21, r1
    45b4:	19 f4       	brne	.+6      	; 0x45bc <__pack_f+0x52>
    45b6:	e0 e0       	ldi	r30, 0x00	; 0
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	92 c0       	rjmp	.+292    	; 0x46e0 <__pack_f+0x176>
    45bc:	82 81       	ldd	r24, Z+2	; 0x02
    45be:	93 81       	ldd	r25, Z+3	; 0x03
    45c0:	6f ef       	ldi	r22, 0xFF	; 255
    45c2:	82 38       	cpi	r24, 0x82	; 130
    45c4:	96 07       	cpc	r25, r22
    45c6:	0c f0       	brlt	.+2      	; 0x45ca <__pack_f+0x60>
    45c8:	5a c0       	rjmp	.+180    	; 0x467e <__pack_f+0x114>
    45ca:	62 e8       	ldi	r22, 0x82	; 130
    45cc:	7f ef       	ldi	r23, 0xFF	; 255
    45ce:	68 1b       	sub	r22, r24
    45d0:	79 0b       	sbc	r23, r25
    45d2:	6a 31       	cpi	r22, 0x1A	; 26
    45d4:	71 05       	cpc	r23, r1
    45d6:	2c f0       	brlt	.+10     	; 0x45e2 <__pack_f+0x78>
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e0       	ldi	r20, 0x00	; 0
    45de:	50 e0       	ldi	r21, 0x00	; 0
    45e0:	2a c0       	rjmp	.+84     	; 0x4636 <__pack_f+0xcc>
    45e2:	aa 24       	eor	r10, r10
    45e4:	bb 24       	eor	r11, r11
    45e6:	65 01       	movw	r12, r10
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	a0 e0       	ldi	r26, 0x00	; 0
    45ee:	b0 e0       	ldi	r27, 0x00	; 0
    45f0:	06 2e       	mov	r0, r22
    45f2:	04 c0       	rjmp	.+8      	; 0x45fc <__pack_f+0x92>
    45f4:	88 0f       	add	r24, r24
    45f6:	99 1f       	adc	r25, r25
    45f8:	aa 1f       	adc	r26, r26
    45fa:	bb 1f       	adc	r27, r27
    45fc:	0a 94       	dec	r0
    45fe:	d2 f7       	brpl	.-12     	; 0x45f4 <__pack_f+0x8a>
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	a1 09       	sbc	r26, r1
    4604:	b1 09       	sbc	r27, r1
    4606:	82 23       	and	r24, r18
    4608:	93 23       	and	r25, r19
    460a:	a4 23       	and	r26, r20
    460c:	b5 23       	and	r27, r21
    460e:	00 97       	sbiw	r24, 0x00	; 0
    4610:	a1 05       	cpc	r26, r1
    4612:	b1 05       	cpc	r27, r1
    4614:	29 f0       	breq	.+10     	; 0x4620 <__pack_f+0xb6>
    4616:	71 e0       	ldi	r23, 0x01	; 1
    4618:	a7 2e       	mov	r10, r23
    461a:	b1 2c       	mov	r11, r1
    461c:	c1 2c       	mov	r12, r1
    461e:	d1 2c       	mov	r13, r1
    4620:	04 c0       	rjmp	.+8      	; 0x462a <__pack_f+0xc0>
    4622:	56 95       	lsr	r21
    4624:	47 95       	ror	r20
    4626:	37 95       	ror	r19
    4628:	27 95       	ror	r18
    462a:	6a 95       	dec	r22
    462c:	d2 f7       	brpl	.-12     	; 0x4622 <__pack_f+0xb8>
    462e:	2a 29       	or	r18, r10
    4630:	3b 29       	or	r19, r11
    4632:	4c 29       	or	r20, r12
    4634:	5d 29       	or	r21, r13
    4636:	da 01       	movw	r26, r20
    4638:	c9 01       	movw	r24, r18
    463a:	8f 77       	andi	r24, 0x7F	; 127
    463c:	90 70       	andi	r25, 0x00	; 0
    463e:	a0 70       	andi	r26, 0x00	; 0
    4640:	b0 70       	andi	r27, 0x00	; 0
    4642:	80 34       	cpi	r24, 0x40	; 64
    4644:	91 05       	cpc	r25, r1
    4646:	a1 05       	cpc	r26, r1
    4648:	b1 05       	cpc	r27, r1
    464a:	39 f4       	brne	.+14     	; 0x465a <__pack_f+0xf0>
    464c:	27 ff       	sbrs	r18, 7
    464e:	09 c0       	rjmp	.+18     	; 0x4662 <__pack_f+0xf8>
    4650:	20 5c       	subi	r18, 0xC0	; 192
    4652:	3f 4f       	sbci	r19, 0xFF	; 255
    4654:	4f 4f       	sbci	r20, 0xFF	; 255
    4656:	5f 4f       	sbci	r21, 0xFF	; 255
    4658:	04 c0       	rjmp	.+8      	; 0x4662 <__pack_f+0xf8>
    465a:	21 5c       	subi	r18, 0xC1	; 193
    465c:	3f 4f       	sbci	r19, 0xFF	; 255
    465e:	4f 4f       	sbci	r20, 0xFF	; 255
    4660:	5f 4f       	sbci	r21, 0xFF	; 255
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	20 30       	cpi	r18, 0x00	; 0
    4668:	60 e0       	ldi	r22, 0x00	; 0
    466a:	36 07       	cpc	r19, r22
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	46 07       	cpc	r20, r22
    4670:	60 e4       	ldi	r22, 0x40	; 64
    4672:	56 07       	cpc	r21, r22
    4674:	10 f0       	brcs	.+4      	; 0x467a <__pack_f+0x110>
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	fc 01       	movw	r30, r24
    467c:	23 c0       	rjmp	.+70     	; 0x46c4 <__pack_f+0x15a>
    467e:	80 38       	cpi	r24, 0x80	; 128
    4680:	91 05       	cpc	r25, r1
    4682:	44 f5       	brge	.+80     	; 0x46d4 <__pack_f+0x16a>
    4684:	fc 01       	movw	r30, r24
    4686:	e1 58       	subi	r30, 0x81	; 129
    4688:	ff 4f       	sbci	r31, 0xFF	; 255
    468a:	da 01       	movw	r26, r20
    468c:	c9 01       	movw	r24, r18
    468e:	8f 77       	andi	r24, 0x7F	; 127
    4690:	90 70       	andi	r25, 0x00	; 0
    4692:	a0 70       	andi	r26, 0x00	; 0
    4694:	b0 70       	andi	r27, 0x00	; 0
    4696:	80 34       	cpi	r24, 0x40	; 64
    4698:	91 05       	cpc	r25, r1
    469a:	a1 05       	cpc	r26, r1
    469c:	b1 05       	cpc	r27, r1
    469e:	39 f4       	brne	.+14     	; 0x46ae <__pack_f+0x144>
    46a0:	27 ff       	sbrs	r18, 7
    46a2:	09 c0       	rjmp	.+18     	; 0x46b6 <__pack_f+0x14c>
    46a4:	20 5c       	subi	r18, 0xC0	; 192
    46a6:	3f 4f       	sbci	r19, 0xFF	; 255
    46a8:	4f 4f       	sbci	r20, 0xFF	; 255
    46aa:	5f 4f       	sbci	r21, 0xFF	; 255
    46ac:	04 c0       	rjmp	.+8      	; 0x46b6 <__pack_f+0x14c>
    46ae:	21 5c       	subi	r18, 0xC1	; 193
    46b0:	3f 4f       	sbci	r19, 0xFF	; 255
    46b2:	4f 4f       	sbci	r20, 0xFF	; 255
    46b4:	5f 4f       	sbci	r21, 0xFF	; 255
    46b6:	57 ff       	sbrs	r21, 7
    46b8:	05 c0       	rjmp	.+10     	; 0x46c4 <__pack_f+0x15a>
    46ba:	56 95       	lsr	r21
    46bc:	47 95       	ror	r20
    46be:	37 95       	ror	r19
    46c0:	27 95       	ror	r18
    46c2:	31 96       	adiw	r30, 0x01	; 1
    46c4:	87 e0       	ldi	r24, 0x07	; 7
    46c6:	56 95       	lsr	r21
    46c8:	47 95       	ror	r20
    46ca:	37 95       	ror	r19
    46cc:	27 95       	ror	r18
    46ce:	8a 95       	dec	r24
    46d0:	d1 f7       	brne	.-12     	; 0x46c6 <__pack_f+0x15c>
    46d2:	06 c0       	rjmp	.+12     	; 0x46e0 <__pack_f+0x176>
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	40 e0       	ldi	r20, 0x00	; 0
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	ef ef       	ldi	r30, 0xFF	; 255
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	e2 2e       	mov	r14, r18
    46e2:	f3 2e       	mov	r15, r19
    46e4:	94 2f       	mov	r25, r20
    46e6:	9f 77       	andi	r25, 0x7F	; 127
    46e8:	80 2f       	mov	r24, r16
    46ea:	80 78       	andi	r24, 0x80	; 128
    46ec:	89 2b       	or	r24, r25
    46ee:	9e 2f       	mov	r25, r30
    46f0:	97 95       	ror	r25
    46f2:	99 27       	eor	r25, r25
    46f4:	97 95       	ror	r25
    46f6:	8f 77       	andi	r24, 0x7F	; 127
    46f8:	08 2f       	mov	r16, r24
    46fa:	09 2b       	or	r16, r25
    46fc:	9e 2f       	mov	r25, r30
    46fe:	96 95       	lsr	r25
    4700:	81 2f       	mov	r24, r17
    4702:	80 78       	andi	r24, 0x80	; 128
    4704:	89 2b       	or	r24, r25
    4706:	97 94       	ror	r9
    4708:	99 24       	eor	r9, r9
    470a:	97 94       	ror	r9
    470c:	8f 77       	andi	r24, 0x7F	; 127
    470e:	18 2f       	mov	r17, r24
    4710:	19 29       	or	r17, r9
    4712:	c8 01       	movw	r24, r16
    4714:	b7 01       	movw	r22, r14
    4716:	1f 91       	pop	r17
    4718:	0f 91       	pop	r16
    471a:	ff 90       	pop	r15
    471c:	ef 90       	pop	r14
    471e:	df 90       	pop	r13
    4720:	cf 90       	pop	r12
    4722:	bf 90       	pop	r11
    4724:	af 90       	pop	r10
    4726:	9f 90       	pop	r9
    4728:	08 95       	ret

0000472a <__unpack_f>:
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	fc 01       	movw	r30, r24
    4730:	db 01       	movw	r26, r22
    4732:	20 81       	ld	r18, Z
    4734:	31 81       	ldd	r19, Z+1	; 0x01
    4736:	92 81       	ldd	r25, Z+2	; 0x02
    4738:	49 2f       	mov	r20, r25
    473a:	4f 77       	andi	r20, 0x7F	; 127
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	99 1f       	adc	r25, r25
    4740:	99 27       	eor	r25, r25
    4742:	99 1f       	adc	r25, r25
    4744:	83 81       	ldd	r24, Z+3	; 0x03
    4746:	e8 2f       	mov	r30, r24
    4748:	ee 0f       	add	r30, r30
    474a:	e9 2b       	or	r30, r25
    474c:	6e 2f       	mov	r22, r30
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	88 1f       	adc	r24, r24
    4752:	88 27       	eor	r24, r24
    4754:	88 1f       	adc	r24, r24
    4756:	ed 01       	movw	r28, r26
    4758:	89 83       	std	Y+1, r24	; 0x01
    475a:	ee 23       	and	r30, r30
    475c:	71 f5       	brne	.+92     	; 0x47ba <__unpack_f+0x90>
    475e:	21 15       	cp	r18, r1
    4760:	31 05       	cpc	r19, r1
    4762:	41 05       	cpc	r20, r1
    4764:	51 05       	cpc	r21, r1
    4766:	11 f4       	brne	.+4      	; 0x476c <__unpack_f+0x42>
    4768:	82 e0       	ldi	r24, 0x02	; 2
    476a:	2f c0       	rjmp	.+94     	; 0x47ca <__unpack_f+0xa0>
    476c:	6e 57       	subi	r22, 0x7E	; 126
    476e:	70 40       	sbci	r23, 0x00	; 0
    4770:	fd 01       	movw	r30, r26
    4772:	73 83       	std	Z+3, r23	; 0x03
    4774:	62 83       	std	Z+2, r22	; 0x02
    4776:	67 e0       	ldi	r22, 0x07	; 7
    4778:	22 0f       	add	r18, r18
    477a:	33 1f       	adc	r19, r19
    477c:	44 1f       	adc	r20, r20
    477e:	55 1f       	adc	r21, r21
    4780:	6a 95       	dec	r22
    4782:	d1 f7       	brne	.-12     	; 0x4778 <__unpack_f+0x4e>
    4784:	83 e0       	ldi	r24, 0x03	; 3
    4786:	8c 93       	st	X, r24
    4788:	0a c0       	rjmp	.+20     	; 0x479e <__unpack_f+0x74>
    478a:	22 0f       	add	r18, r18
    478c:	33 1f       	adc	r19, r19
    478e:	44 1f       	adc	r20, r20
    4790:	55 1f       	adc	r21, r21
    4792:	ed 01       	movw	r28, r26
    4794:	8a 81       	ldd	r24, Y+2	; 0x02
    4796:	9b 81       	ldd	r25, Y+3	; 0x03
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	9b 83       	std	Y+3, r25	; 0x03
    479c:	8a 83       	std	Y+2, r24	; 0x02
    479e:	20 30       	cpi	r18, 0x00	; 0
    47a0:	e0 e0       	ldi	r30, 0x00	; 0
    47a2:	3e 07       	cpc	r19, r30
    47a4:	e0 e0       	ldi	r30, 0x00	; 0
    47a6:	4e 07       	cpc	r20, r30
    47a8:	e0 e4       	ldi	r30, 0x40	; 64
    47aa:	5e 07       	cpc	r21, r30
    47ac:	70 f3       	brcs	.-36     	; 0x478a <__unpack_f+0x60>
    47ae:	ed 01       	movw	r28, r26
    47b0:	2c 83       	std	Y+4, r18	; 0x04
    47b2:	3d 83       	std	Y+5, r19	; 0x05
    47b4:	4e 83       	std	Y+6, r20	; 0x06
    47b6:	5f 83       	std	Y+7, r21	; 0x07
    47b8:	25 c0       	rjmp	.+74     	; 0x4804 <__unpack_f+0xda>
    47ba:	ef 3f       	cpi	r30, 0xFF	; 255
    47bc:	79 f4       	brne	.+30     	; 0x47dc <__unpack_f+0xb2>
    47be:	21 15       	cp	r18, r1
    47c0:	31 05       	cpc	r19, r1
    47c2:	41 05       	cpc	r20, r1
    47c4:	51 05       	cpc	r21, r1
    47c6:	19 f4       	brne	.+6      	; 0x47ce <__unpack_f+0xa4>
    47c8:	84 e0       	ldi	r24, 0x04	; 4
    47ca:	8c 93       	st	X, r24
    47cc:	1b c0       	rjmp	.+54     	; 0x4804 <__unpack_f+0xda>
    47ce:	44 ff       	sbrs	r20, 4
    47d0:	03 c0       	rjmp	.+6      	; 0x47d8 <__unpack_f+0xae>
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	8c 93       	st	X, r24
    47d6:	11 c0       	rjmp	.+34     	; 0x47fa <__unpack_f+0xd0>
    47d8:	1c 92       	st	X, r1
    47da:	0f c0       	rjmp	.+30     	; 0x47fa <__unpack_f+0xd0>
    47dc:	6f 57       	subi	r22, 0x7F	; 127
    47de:	70 40       	sbci	r23, 0x00	; 0
    47e0:	ed 01       	movw	r28, r26
    47e2:	7b 83       	std	Y+3, r23	; 0x03
    47e4:	6a 83       	std	Y+2, r22	; 0x02
    47e6:	83 e0       	ldi	r24, 0x03	; 3
    47e8:	8c 93       	st	X, r24
    47ea:	87 e0       	ldi	r24, 0x07	; 7
    47ec:	22 0f       	add	r18, r18
    47ee:	33 1f       	adc	r19, r19
    47f0:	44 1f       	adc	r20, r20
    47f2:	55 1f       	adc	r21, r21
    47f4:	8a 95       	dec	r24
    47f6:	d1 f7       	brne	.-12     	; 0x47ec <__unpack_f+0xc2>
    47f8:	50 64       	ori	r21, 0x40	; 64
    47fa:	fd 01       	movw	r30, r26
    47fc:	24 83       	std	Z+4, r18	; 0x04
    47fe:	35 83       	std	Z+5, r19	; 0x05
    4800:	46 83       	std	Z+6, r20	; 0x06
    4802:	57 83       	std	Z+7, r21	; 0x07
    4804:	df 91       	pop	r29
    4806:	cf 91       	pop	r28
    4808:	08 95       	ret

0000480a <__udivmodhi4>:
    480a:	aa 1b       	sub	r26, r26
    480c:	bb 1b       	sub	r27, r27
    480e:	51 e1       	ldi	r21, 0x11	; 17
    4810:	07 c0       	rjmp	.+14     	; 0x4820 <__udivmodhi4_ep>

00004812 <__udivmodhi4_loop>:
    4812:	aa 1f       	adc	r26, r26
    4814:	bb 1f       	adc	r27, r27
    4816:	a6 17       	cp	r26, r22
    4818:	b7 07       	cpc	r27, r23
    481a:	10 f0       	brcs	.+4      	; 0x4820 <__udivmodhi4_ep>
    481c:	a6 1b       	sub	r26, r22
    481e:	b7 0b       	sbc	r27, r23

00004820 <__udivmodhi4_ep>:
    4820:	88 1f       	adc	r24, r24
    4822:	99 1f       	adc	r25, r25
    4824:	5a 95       	dec	r21
    4826:	a9 f7       	brne	.-22     	; 0x4812 <__udivmodhi4_loop>
    4828:	80 95       	com	r24
    482a:	90 95       	com	r25
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	08 95       	ret

00004832 <__divmodhi4>:
    4832:	97 fb       	bst	r25, 7
    4834:	09 2e       	mov	r0, r25
    4836:	07 26       	eor	r0, r23
    4838:	0a d0       	rcall	.+20     	; 0x484e <__divmodhi4_neg1>
    483a:	77 fd       	sbrc	r23, 7
    483c:	04 d0       	rcall	.+8      	; 0x4846 <__divmodhi4_neg2>
    483e:	e5 df       	rcall	.-54     	; 0x480a <__udivmodhi4>
    4840:	06 d0       	rcall	.+12     	; 0x484e <__divmodhi4_neg1>
    4842:	00 20       	and	r0, r0
    4844:	1a f4       	brpl	.+6      	; 0x484c <__divmodhi4_exit>

00004846 <__divmodhi4_neg2>:
    4846:	70 95       	com	r23
    4848:	61 95       	neg	r22
    484a:	7f 4f       	sbci	r23, 0xFF	; 255

0000484c <__divmodhi4_exit>:
    484c:	08 95       	ret

0000484e <__divmodhi4_neg1>:
    484e:	f6 f7       	brtc	.-4      	; 0x484c <__divmodhi4_exit>
    4850:	90 95       	com	r25
    4852:	81 95       	neg	r24
    4854:	9f 4f       	sbci	r25, 0xFF	; 255
    4856:	08 95       	ret

00004858 <__prologue_saves__>:
    4858:	2f 92       	push	r2
    485a:	3f 92       	push	r3
    485c:	4f 92       	push	r4
    485e:	5f 92       	push	r5
    4860:	6f 92       	push	r6
    4862:	7f 92       	push	r7
    4864:	8f 92       	push	r8
    4866:	9f 92       	push	r9
    4868:	af 92       	push	r10
    486a:	bf 92       	push	r11
    486c:	cf 92       	push	r12
    486e:	df 92       	push	r13
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	ca 1b       	sub	r28, r26
    4882:	db 0b       	sbc	r29, r27
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	19 94       	eijmp

00004890 <__epilogue_restores__>:
    4890:	2a 88       	ldd	r2, Y+18	; 0x12
    4892:	39 88       	ldd	r3, Y+17	; 0x11
    4894:	48 88       	ldd	r4, Y+16	; 0x10
    4896:	5f 84       	ldd	r5, Y+15	; 0x0f
    4898:	6e 84       	ldd	r6, Y+14	; 0x0e
    489a:	7d 84       	ldd	r7, Y+13	; 0x0d
    489c:	8c 84       	ldd	r8, Y+12	; 0x0c
    489e:	9b 84       	ldd	r9, Y+11	; 0x0b
    48a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    48a2:	b9 84       	ldd	r11, Y+9	; 0x09
    48a4:	c8 84       	ldd	r12, Y+8	; 0x08
    48a6:	df 80       	ldd	r13, Y+7	; 0x07
    48a8:	ee 80       	ldd	r14, Y+6	; 0x06
    48aa:	fd 80       	ldd	r15, Y+5	; 0x05
    48ac:	0c 81       	ldd	r16, Y+4	; 0x04
    48ae:	1b 81       	ldd	r17, Y+3	; 0x03
    48b0:	aa 81       	ldd	r26, Y+2	; 0x02
    48b2:	b9 81       	ldd	r27, Y+1	; 0x01
    48b4:	ce 0f       	add	r28, r30
    48b6:	d1 1d       	adc	r29, r1
    48b8:	0f b6       	in	r0, 0x3f	; 63
    48ba:	f8 94       	cli
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	0f be       	out	0x3f, r0	; 63
    48c0:	cd bf       	out	0x3d, r28	; 61
    48c2:	ed 01       	movw	r28, r26
    48c4:	08 95       	ret
    48c6:	f5 d0       	rcall	.+490    	; 0x4ab2 <__fp_pscA>
    48c8:	58 f0       	brcs	.+22     	; 0x48e0 <__epilogue_restores__+0x50>
    48ca:	80 e8       	ldi	r24, 0x80	; 128
    48cc:	91 e0       	ldi	r25, 0x01	; 1
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <__epilogue_restores__+0x42>
    48d0:	9e ef       	ldi	r25, 0xFE	; 254
    48d2:	f6 d0       	rcall	.+492    	; 0x4ac0 <__fp_pscB>
    48d4:	28 f0       	brcs	.+10     	; 0x48e0 <__epilogue_restores__+0x50>
    48d6:	40 e8       	ldi	r20, 0x80	; 128
    48d8:	51 e0       	ldi	r21, 0x01	; 1
    48da:	59 f4       	brne	.+22     	; 0x48f2 <atan2+0xe>
    48dc:	5e ef       	ldi	r21, 0xFE	; 254
    48de:	09 c0       	rjmp	.+18     	; 0x48f2 <atan2+0xe>
    48e0:	c0 c0       	rjmp	.+384    	; 0x4a62 <__fp_nan>
    48e2:	28 c1       	rjmp	.+592    	; 0x4b34 <__fp_zero>

000048e4 <atan2>:
    48e4:	e9 2f       	mov	r30, r25
    48e6:	e0 78       	andi	r30, 0x80	; 128
    48e8:	03 d1       	rcall	.+518    	; 0x4af0 <__fp_split3>
    48ea:	68 f3       	brcs	.-38     	; 0x48c6 <__epilogue_restores__+0x36>
    48ec:	09 2e       	mov	r0, r25
    48ee:	05 2a       	or	r0, r21
    48f0:	c1 f3       	breq	.-16     	; 0x48e2 <__epilogue_restores__+0x52>
    48f2:	26 17       	cp	r18, r22
    48f4:	37 07       	cpc	r19, r23
    48f6:	48 07       	cpc	r20, r24
    48f8:	59 07       	cpc	r21, r25
    48fa:	38 f0       	brcs	.+14     	; 0x490a <atan2+0x26>
    48fc:	0e 2e       	mov	r0, r30
    48fe:	07 f8       	bld	r0, 7
    4900:	e0 25       	eor	r30, r0
    4902:	69 f0       	breq	.+26     	; 0x491e <atan2+0x3a>
    4904:	e0 25       	eor	r30, r0
    4906:	e0 64       	ori	r30, 0x40	; 64
    4908:	0a c0       	rjmp	.+20     	; 0x491e <atan2+0x3a>
    490a:	ef 63       	ori	r30, 0x3F	; 63
    490c:	07 f8       	bld	r0, 7
    490e:	00 94       	com	r0
    4910:	07 fa       	bst	r0, 7
    4912:	db 01       	movw	r26, r22
    4914:	b9 01       	movw	r22, r18
    4916:	9d 01       	movw	r18, r26
    4918:	dc 01       	movw	r26, r24
    491a:	ca 01       	movw	r24, r20
    491c:	ad 01       	movw	r20, r26
    491e:	ef 93       	push	r30
    4920:	41 d0       	rcall	.+130    	; 0x49a4 <__divsf3_pse>
    4922:	d5 d0       	rcall	.+426    	; 0x4ace <__fp_round>
    4924:	0a d0       	rcall	.+20     	; 0x493a <atan>
    4926:	5f 91       	pop	r21
    4928:	55 23       	and	r21, r21
    492a:	31 f0       	breq	.+12     	; 0x4938 <atan2+0x54>
    492c:	2b ed       	ldi	r18, 0xDB	; 219
    492e:	3f e0       	ldi	r19, 0x0F	; 15
    4930:	49 e4       	ldi	r20, 0x49	; 73
    4932:	50 fd       	sbrc	r21, 0
    4934:	49 ec       	ldi	r20, 0xC9	; 201
    4936:	71 c1       	rjmp	.+738    	; 0x4c1a <__addsf3>
    4938:	08 95       	ret

0000493a <atan>:
    493a:	df 93       	push	r29
    493c:	dd 27       	eor	r29, r29
    493e:	b9 2f       	mov	r27, r25
    4940:	bf 77       	andi	r27, 0x7F	; 127
    4942:	40 e8       	ldi	r20, 0x80	; 128
    4944:	5f e3       	ldi	r21, 0x3F	; 63
    4946:	16 16       	cp	r1, r22
    4948:	17 06       	cpc	r1, r23
    494a:	48 07       	cpc	r20, r24
    494c:	5b 07       	cpc	r21, r27
    494e:	10 f4       	brcc	.+4      	; 0x4954 <atan+0x1a>
    4950:	d9 2f       	mov	r29, r25
    4952:	f7 d0       	rcall	.+494    	; 0x4b42 <inverse>
    4954:	9f 93       	push	r25
    4956:	8f 93       	push	r24
    4958:	7f 93       	push	r23
    495a:	6f 93       	push	r22
    495c:	5a d1       	rcall	.+692    	; 0x4c12 <square>
    495e:	ee e4       	ldi	r30, 0x4E	; 78
    4960:	f1 e0       	ldi	r31, 0x01	; 1
    4962:	82 d0       	rcall	.+260    	; 0x4a68 <__fp_powser>
    4964:	b4 d0       	rcall	.+360    	; 0x4ace <__fp_round>
    4966:	2f 91       	pop	r18
    4968:	3f 91       	pop	r19
    496a:	4f 91       	pop	r20
    496c:	5f 91       	pop	r21
    496e:	fa d0       	rcall	.+500    	; 0x4b64 <__mulsf3x>
    4970:	dd 23       	and	r29, r29
    4972:	49 f0       	breq	.+18     	; 0x4986 <atan+0x4c>
    4974:	90 58       	subi	r25, 0x80	; 128
    4976:	a2 ea       	ldi	r26, 0xA2	; 162
    4978:	2a ed       	ldi	r18, 0xDA	; 218
    497a:	3f e0       	ldi	r19, 0x0F	; 15
    497c:	49 ec       	ldi	r20, 0xC9	; 201
    497e:	5f e3       	ldi	r21, 0x3F	; 63
    4980:	d0 78       	andi	r29, 0x80	; 128
    4982:	5d 27       	eor	r21, r29
    4984:	5b d1       	rcall	.+694    	; 0x4c3c <__addsf3x>
    4986:	df 91       	pop	r29
    4988:	a2 c0       	rjmp	.+324    	; 0x4ace <__fp_round>
    498a:	9a d0       	rcall	.+308    	; 0x4ac0 <__fp_pscB>
    498c:	40 f0       	brcs	.+16     	; 0x499e <atan+0x64>
    498e:	91 d0       	rcall	.+290    	; 0x4ab2 <__fp_pscA>
    4990:	30 f0       	brcs	.+12     	; 0x499e <atan+0x64>
    4992:	21 f4       	brne	.+8      	; 0x499c <atan+0x62>
    4994:	5f 3f       	cpi	r21, 0xFF	; 255
    4996:	19 f0       	breq	.+6      	; 0x499e <atan+0x64>
    4998:	5e c0       	rjmp	.+188    	; 0x4a56 <__fp_inf>
    499a:	51 11       	cpse	r21, r1
    499c:	cc c0       	rjmp	.+408    	; 0x4b36 <__fp_szero>
    499e:	61 c0       	rjmp	.+194    	; 0x4a62 <__fp_nan>

000049a0 <__divsf3x>:
    49a0:	a7 d0       	rcall	.+334    	; 0x4af0 <__fp_split3>
    49a2:	98 f3       	brcs	.-26     	; 0x498a <atan+0x50>

000049a4 <__divsf3_pse>:
    49a4:	99 23       	and	r25, r25
    49a6:	c9 f3       	breq	.-14     	; 0x499a <atan+0x60>
    49a8:	55 23       	and	r21, r21
    49aa:	b1 f3       	breq	.-20     	; 0x4998 <atan+0x5e>
    49ac:	95 1b       	sub	r25, r21
    49ae:	55 0b       	sbc	r21, r21
    49b0:	bb 27       	eor	r27, r27
    49b2:	aa 27       	eor	r26, r26
    49b4:	62 17       	cp	r22, r18
    49b6:	73 07       	cpc	r23, r19
    49b8:	84 07       	cpc	r24, r20
    49ba:	38 f0       	brcs	.+14     	; 0x49ca <__divsf3_pse+0x26>
    49bc:	9f 5f       	subi	r25, 0xFF	; 255
    49be:	5f 4f       	sbci	r21, 0xFF	; 255
    49c0:	22 0f       	add	r18, r18
    49c2:	33 1f       	adc	r19, r19
    49c4:	44 1f       	adc	r20, r20
    49c6:	aa 1f       	adc	r26, r26
    49c8:	a9 f3       	breq	.-22     	; 0x49b4 <__divsf3_pse+0x10>
    49ca:	33 d0       	rcall	.+102    	; 0x4a32 <__divsf3_pse+0x8e>
    49cc:	0e 2e       	mov	r0, r30
    49ce:	3a f0       	brmi	.+14     	; 0x49de <__divsf3_pse+0x3a>
    49d0:	e0 e8       	ldi	r30, 0x80	; 128
    49d2:	30 d0       	rcall	.+96     	; 0x4a34 <__divsf3_pse+0x90>
    49d4:	91 50       	subi	r25, 0x01	; 1
    49d6:	50 40       	sbci	r21, 0x00	; 0
    49d8:	e6 95       	lsr	r30
    49da:	00 1c       	adc	r0, r0
    49dc:	ca f7       	brpl	.-14     	; 0x49d0 <__divsf3_pse+0x2c>
    49de:	29 d0       	rcall	.+82     	; 0x4a32 <__divsf3_pse+0x8e>
    49e0:	fe 2f       	mov	r31, r30
    49e2:	27 d0       	rcall	.+78     	; 0x4a32 <__divsf3_pse+0x8e>
    49e4:	66 0f       	add	r22, r22
    49e6:	77 1f       	adc	r23, r23
    49e8:	88 1f       	adc	r24, r24
    49ea:	bb 1f       	adc	r27, r27
    49ec:	26 17       	cp	r18, r22
    49ee:	37 07       	cpc	r19, r23
    49f0:	48 07       	cpc	r20, r24
    49f2:	ab 07       	cpc	r26, r27
    49f4:	b0 e8       	ldi	r27, 0x80	; 128
    49f6:	09 f0       	breq	.+2      	; 0x49fa <__divsf3_pse+0x56>
    49f8:	bb 0b       	sbc	r27, r27
    49fa:	80 2d       	mov	r24, r0
    49fc:	bf 01       	movw	r22, r30
    49fe:	ff 27       	eor	r31, r31
    4a00:	93 58       	subi	r25, 0x83	; 131
    4a02:	5f 4f       	sbci	r21, 0xFF	; 255
    4a04:	2a f0       	brmi	.+10     	; 0x4a10 <__divsf3_pse+0x6c>
    4a06:	9e 3f       	cpi	r25, 0xFE	; 254
    4a08:	51 05       	cpc	r21, r1
    4a0a:	68 f0       	brcs	.+26     	; 0x4a26 <__divsf3_pse+0x82>
    4a0c:	24 c0       	rjmp	.+72     	; 0x4a56 <__fp_inf>
    4a0e:	93 c0       	rjmp	.+294    	; 0x4b36 <__fp_szero>
    4a10:	5f 3f       	cpi	r21, 0xFF	; 255
    4a12:	ec f3       	brlt	.-6      	; 0x4a0e <__divsf3_pse+0x6a>
    4a14:	98 3e       	cpi	r25, 0xE8	; 232
    4a16:	dc f3       	brlt	.-10     	; 0x4a0e <__divsf3_pse+0x6a>
    4a18:	86 95       	lsr	r24
    4a1a:	77 95       	ror	r23
    4a1c:	67 95       	ror	r22
    4a1e:	b7 95       	ror	r27
    4a20:	f7 95       	ror	r31
    4a22:	9f 5f       	subi	r25, 0xFF	; 255
    4a24:	c9 f7       	brne	.-14     	; 0x4a18 <__divsf3_pse+0x74>
    4a26:	88 0f       	add	r24, r24
    4a28:	91 1d       	adc	r25, r1
    4a2a:	96 95       	lsr	r25
    4a2c:	87 95       	ror	r24
    4a2e:	97 f9       	bld	r25, 7
    4a30:	08 95       	ret
    4a32:	e1 e0       	ldi	r30, 0x01	; 1
    4a34:	66 0f       	add	r22, r22
    4a36:	77 1f       	adc	r23, r23
    4a38:	88 1f       	adc	r24, r24
    4a3a:	bb 1f       	adc	r27, r27
    4a3c:	62 17       	cp	r22, r18
    4a3e:	73 07       	cpc	r23, r19
    4a40:	84 07       	cpc	r24, r20
    4a42:	ba 07       	cpc	r27, r26
    4a44:	20 f0       	brcs	.+8      	; 0x4a4e <__divsf3_pse+0xaa>
    4a46:	62 1b       	sub	r22, r18
    4a48:	73 0b       	sbc	r23, r19
    4a4a:	84 0b       	sbc	r24, r20
    4a4c:	ba 0b       	sbc	r27, r26
    4a4e:	ee 1f       	adc	r30, r30
    4a50:	88 f7       	brcc	.-30     	; 0x4a34 <__divsf3_pse+0x90>
    4a52:	e0 95       	com	r30
    4a54:	08 95       	ret

00004a56 <__fp_inf>:
    4a56:	97 f9       	bld	r25, 7
    4a58:	9f 67       	ori	r25, 0x7F	; 127
    4a5a:	80 e8       	ldi	r24, 0x80	; 128
    4a5c:	70 e0       	ldi	r23, 0x00	; 0
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	08 95       	ret

00004a62 <__fp_nan>:
    4a62:	9f ef       	ldi	r25, 0xFF	; 255
    4a64:	80 ec       	ldi	r24, 0xC0	; 192
    4a66:	08 95       	ret

00004a68 <__fp_powser>:
    4a68:	df 93       	push	r29
    4a6a:	cf 93       	push	r28
    4a6c:	1f 93       	push	r17
    4a6e:	0f 93       	push	r16
    4a70:	ff 92       	push	r15
    4a72:	ef 92       	push	r14
    4a74:	df 92       	push	r13
    4a76:	7b 01       	movw	r14, r22
    4a78:	8c 01       	movw	r16, r24
    4a7a:	68 94       	set
    4a7c:	05 c0       	rjmp	.+10     	; 0x4a88 <__fp_powser+0x20>
    4a7e:	da 2e       	mov	r13, r26
    4a80:	ef 01       	movw	r28, r30
    4a82:	70 d0       	rcall	.+224    	; 0x4b64 <__mulsf3x>
    4a84:	fe 01       	movw	r30, r28
    4a86:	e8 94       	clt
    4a88:	a5 91       	lpm	r26, Z+
    4a8a:	25 91       	lpm	r18, Z+
    4a8c:	35 91       	lpm	r19, Z+
    4a8e:	45 91       	lpm	r20, Z+
    4a90:	55 91       	lpm	r21, Z+
    4a92:	ae f3       	brts	.-22     	; 0x4a7e <__fp_powser+0x16>
    4a94:	ef 01       	movw	r28, r30
    4a96:	d2 d0       	rcall	.+420    	; 0x4c3c <__addsf3x>
    4a98:	fe 01       	movw	r30, r28
    4a9a:	97 01       	movw	r18, r14
    4a9c:	a8 01       	movw	r20, r16
    4a9e:	da 94       	dec	r13
    4aa0:	79 f7       	brne	.-34     	; 0x4a80 <__fp_powser+0x18>
    4aa2:	df 90       	pop	r13
    4aa4:	ef 90       	pop	r14
    4aa6:	ff 90       	pop	r15
    4aa8:	0f 91       	pop	r16
    4aaa:	1f 91       	pop	r17
    4aac:	cf 91       	pop	r28
    4aae:	df 91       	pop	r29
    4ab0:	08 95       	ret

00004ab2 <__fp_pscA>:
    4ab2:	00 24       	eor	r0, r0
    4ab4:	0a 94       	dec	r0
    4ab6:	16 16       	cp	r1, r22
    4ab8:	17 06       	cpc	r1, r23
    4aba:	18 06       	cpc	r1, r24
    4abc:	09 06       	cpc	r0, r25
    4abe:	08 95       	ret

00004ac0 <__fp_pscB>:
    4ac0:	00 24       	eor	r0, r0
    4ac2:	0a 94       	dec	r0
    4ac4:	12 16       	cp	r1, r18
    4ac6:	13 06       	cpc	r1, r19
    4ac8:	14 06       	cpc	r1, r20
    4aca:	05 06       	cpc	r0, r21
    4acc:	08 95       	ret

00004ace <__fp_round>:
    4ace:	09 2e       	mov	r0, r25
    4ad0:	03 94       	inc	r0
    4ad2:	00 0c       	add	r0, r0
    4ad4:	11 f4       	brne	.+4      	; 0x4ada <__fp_round+0xc>
    4ad6:	88 23       	and	r24, r24
    4ad8:	52 f0       	brmi	.+20     	; 0x4aee <__fp_round+0x20>
    4ada:	bb 0f       	add	r27, r27
    4adc:	40 f4       	brcc	.+16     	; 0x4aee <__fp_round+0x20>
    4ade:	bf 2b       	or	r27, r31
    4ae0:	11 f4       	brne	.+4      	; 0x4ae6 <__fp_round+0x18>
    4ae2:	60 ff       	sbrs	r22, 0
    4ae4:	04 c0       	rjmp	.+8      	; 0x4aee <__fp_round+0x20>
    4ae6:	6f 5f       	subi	r22, 0xFF	; 255
    4ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aea:	8f 4f       	sbci	r24, 0xFF	; 255
    4aec:	9f 4f       	sbci	r25, 0xFF	; 255
    4aee:	08 95       	ret

00004af0 <__fp_split3>:
    4af0:	57 fd       	sbrc	r21, 7
    4af2:	90 58       	subi	r25, 0x80	; 128
    4af4:	44 0f       	add	r20, r20
    4af6:	55 1f       	adc	r21, r21
    4af8:	59 f0       	breq	.+22     	; 0x4b10 <__fp_splitA+0x10>
    4afa:	5f 3f       	cpi	r21, 0xFF	; 255
    4afc:	71 f0       	breq	.+28     	; 0x4b1a <__fp_splitA+0x1a>
    4afe:	47 95       	ror	r20

00004b00 <__fp_splitA>:
    4b00:	88 0f       	add	r24, r24
    4b02:	97 fb       	bst	r25, 7
    4b04:	99 1f       	adc	r25, r25
    4b06:	61 f0       	breq	.+24     	; 0x4b20 <__fp_splitA+0x20>
    4b08:	9f 3f       	cpi	r25, 0xFF	; 255
    4b0a:	79 f0       	breq	.+30     	; 0x4b2a <__fp_splitA+0x2a>
    4b0c:	87 95       	ror	r24
    4b0e:	08 95       	ret
    4b10:	12 16       	cp	r1, r18
    4b12:	13 06       	cpc	r1, r19
    4b14:	14 06       	cpc	r1, r20
    4b16:	55 1f       	adc	r21, r21
    4b18:	f2 cf       	rjmp	.-28     	; 0x4afe <__fp_split3+0xe>
    4b1a:	46 95       	lsr	r20
    4b1c:	f1 df       	rcall	.-30     	; 0x4b00 <__fp_splitA>
    4b1e:	08 c0       	rjmp	.+16     	; 0x4b30 <__fp_splitA+0x30>
    4b20:	16 16       	cp	r1, r22
    4b22:	17 06       	cpc	r1, r23
    4b24:	18 06       	cpc	r1, r24
    4b26:	99 1f       	adc	r25, r25
    4b28:	f1 cf       	rjmp	.-30     	; 0x4b0c <__fp_splitA+0xc>
    4b2a:	86 95       	lsr	r24
    4b2c:	71 05       	cpc	r23, r1
    4b2e:	61 05       	cpc	r22, r1
    4b30:	08 94       	sec
    4b32:	08 95       	ret

00004b34 <__fp_zero>:
    4b34:	e8 94       	clt

00004b36 <__fp_szero>:
    4b36:	bb 27       	eor	r27, r27
    4b38:	66 27       	eor	r22, r22
    4b3a:	77 27       	eor	r23, r23
    4b3c:	cb 01       	movw	r24, r22
    4b3e:	97 f9       	bld	r25, 7
    4b40:	08 95       	ret

00004b42 <inverse>:
    4b42:	9b 01       	movw	r18, r22
    4b44:	ac 01       	movw	r20, r24
    4b46:	60 e0       	ldi	r22, 0x00	; 0
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	80 e8       	ldi	r24, 0x80	; 128
    4b4c:	9f e3       	ldi	r25, 0x3F	; 63
    4b4e:	c9 c0       	rjmp	.+402    	; 0x4ce2 <__divsf3>
    4b50:	b0 df       	rcall	.-160    	; 0x4ab2 <__fp_pscA>
    4b52:	28 f0       	brcs	.+10     	; 0x4b5e <inverse+0x1c>
    4b54:	b5 df       	rcall	.-150    	; 0x4ac0 <__fp_pscB>
    4b56:	18 f0       	brcs	.+6      	; 0x4b5e <inverse+0x1c>
    4b58:	95 23       	and	r25, r21
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <inverse+0x1c>
    4b5c:	7c cf       	rjmp	.-264    	; 0x4a56 <__fp_inf>
    4b5e:	81 cf       	rjmp	.-254    	; 0x4a62 <__fp_nan>
    4b60:	11 24       	eor	r1, r1
    4b62:	e9 cf       	rjmp	.-46     	; 0x4b36 <__fp_szero>

00004b64 <__mulsf3x>:
    4b64:	c5 df       	rcall	.-118    	; 0x4af0 <__fp_split3>
    4b66:	a0 f3       	brcs	.-24     	; 0x4b50 <inverse+0xe>

00004b68 <__mulsf3_pse>:
    4b68:	95 9f       	mul	r25, r21
    4b6a:	d1 f3       	breq	.-12     	; 0x4b60 <inverse+0x1e>
    4b6c:	95 0f       	add	r25, r21
    4b6e:	50 e0       	ldi	r21, 0x00	; 0
    4b70:	55 1f       	adc	r21, r21
    4b72:	62 9f       	mul	r22, r18
    4b74:	f0 01       	movw	r30, r0
    4b76:	72 9f       	mul	r23, r18
    4b78:	bb 27       	eor	r27, r27
    4b7a:	f0 0d       	add	r31, r0
    4b7c:	b1 1d       	adc	r27, r1
    4b7e:	63 9f       	mul	r22, r19
    4b80:	aa 27       	eor	r26, r26
    4b82:	f0 0d       	add	r31, r0
    4b84:	b1 1d       	adc	r27, r1
    4b86:	aa 1f       	adc	r26, r26
    4b88:	64 9f       	mul	r22, r20
    4b8a:	66 27       	eor	r22, r22
    4b8c:	b0 0d       	add	r27, r0
    4b8e:	a1 1d       	adc	r26, r1
    4b90:	66 1f       	adc	r22, r22
    4b92:	82 9f       	mul	r24, r18
    4b94:	22 27       	eor	r18, r18
    4b96:	b0 0d       	add	r27, r0
    4b98:	a1 1d       	adc	r26, r1
    4b9a:	62 1f       	adc	r22, r18
    4b9c:	73 9f       	mul	r23, r19
    4b9e:	b0 0d       	add	r27, r0
    4ba0:	a1 1d       	adc	r26, r1
    4ba2:	62 1f       	adc	r22, r18
    4ba4:	83 9f       	mul	r24, r19
    4ba6:	a0 0d       	add	r26, r0
    4ba8:	61 1d       	adc	r22, r1
    4baa:	22 1f       	adc	r18, r18
    4bac:	74 9f       	mul	r23, r20
    4bae:	33 27       	eor	r19, r19
    4bb0:	a0 0d       	add	r26, r0
    4bb2:	61 1d       	adc	r22, r1
    4bb4:	23 1f       	adc	r18, r19
    4bb6:	84 9f       	mul	r24, r20
    4bb8:	60 0d       	add	r22, r0
    4bba:	21 1d       	adc	r18, r1
    4bbc:	82 2f       	mov	r24, r18
    4bbe:	76 2f       	mov	r23, r22
    4bc0:	6a 2f       	mov	r22, r26
    4bc2:	11 24       	eor	r1, r1
    4bc4:	9f 57       	subi	r25, 0x7F	; 127
    4bc6:	50 40       	sbci	r21, 0x00	; 0
    4bc8:	8a f0       	brmi	.+34     	; 0x4bec <__mulsf3_pse+0x84>
    4bca:	e1 f0       	breq	.+56     	; 0x4c04 <__mulsf3_pse+0x9c>
    4bcc:	88 23       	and	r24, r24
    4bce:	4a f0       	brmi	.+18     	; 0x4be2 <__mulsf3_pse+0x7a>
    4bd0:	ee 0f       	add	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	bb 1f       	adc	r27, r27
    4bd6:	66 1f       	adc	r22, r22
    4bd8:	77 1f       	adc	r23, r23
    4bda:	88 1f       	adc	r24, r24
    4bdc:	91 50       	subi	r25, 0x01	; 1
    4bde:	50 40       	sbci	r21, 0x00	; 0
    4be0:	a9 f7       	brne	.-22     	; 0x4bcc <__mulsf3_pse+0x64>
    4be2:	9e 3f       	cpi	r25, 0xFE	; 254
    4be4:	51 05       	cpc	r21, r1
    4be6:	70 f0       	brcs	.+28     	; 0x4c04 <__mulsf3_pse+0x9c>
    4be8:	36 cf       	rjmp	.-404    	; 0x4a56 <__fp_inf>
    4bea:	a5 cf       	rjmp	.-182    	; 0x4b36 <__fp_szero>
    4bec:	5f 3f       	cpi	r21, 0xFF	; 255
    4bee:	ec f3       	brlt	.-6      	; 0x4bea <__mulsf3_pse+0x82>
    4bf0:	98 3e       	cpi	r25, 0xE8	; 232
    4bf2:	dc f3       	brlt	.-10     	; 0x4bea <__mulsf3_pse+0x82>
    4bf4:	86 95       	lsr	r24
    4bf6:	77 95       	ror	r23
    4bf8:	67 95       	ror	r22
    4bfa:	b7 95       	ror	r27
    4bfc:	f7 95       	ror	r31
    4bfe:	e7 95       	ror	r30
    4c00:	9f 5f       	subi	r25, 0xFF	; 255
    4c02:	c1 f7       	brne	.-16     	; 0x4bf4 <__mulsf3_pse+0x8c>
    4c04:	fe 2b       	or	r31, r30
    4c06:	88 0f       	add	r24, r24
    4c08:	91 1d       	adc	r25, r1
    4c0a:	96 95       	lsr	r25
    4c0c:	87 95       	ror	r24
    4c0e:	97 f9       	bld	r25, 7
    4c10:	08 95       	ret

00004c12 <square>:
    4c12:	9b 01       	movw	r18, r22
    4c14:	ac 01       	movw	r20, r24
    4c16:	ac ca       	rjmp	.-2728   	; 0x4170 <__mulsf3>

00004c18 <__subsf3>:
    4c18:	50 58       	subi	r21, 0x80	; 128

00004c1a <__addsf3>:
    4c1a:	bb 27       	eor	r27, r27
    4c1c:	aa 27       	eor	r26, r26
    4c1e:	0e d0       	rcall	.+28     	; 0x4c3c <__addsf3x>
    4c20:	56 cf       	rjmp	.-340    	; 0x4ace <__fp_round>
    4c22:	47 df       	rcall	.-370    	; 0x4ab2 <__fp_pscA>
    4c24:	30 f0       	brcs	.+12     	; 0x4c32 <__addsf3+0x18>
    4c26:	4c df       	rcall	.-360    	; 0x4ac0 <__fp_pscB>
    4c28:	20 f0       	brcs	.+8      	; 0x4c32 <__addsf3+0x18>
    4c2a:	31 f4       	brne	.+12     	; 0x4c38 <__addsf3+0x1e>
    4c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    4c2e:	11 f4       	brne	.+4      	; 0x4c34 <__addsf3+0x1a>
    4c30:	1e f4       	brtc	.+6      	; 0x4c38 <__addsf3+0x1e>
    4c32:	17 cf       	rjmp	.-466    	; 0x4a62 <__fp_nan>
    4c34:	0e f4       	brtc	.+2      	; 0x4c38 <__addsf3+0x1e>
    4c36:	e0 95       	com	r30
    4c38:	e7 fb       	bst	r30, 7
    4c3a:	0d cf       	rjmp	.-486    	; 0x4a56 <__fp_inf>

00004c3c <__addsf3x>:
    4c3c:	e9 2f       	mov	r30, r25
    4c3e:	58 df       	rcall	.-336    	; 0x4af0 <__fp_split3>
    4c40:	80 f3       	brcs	.-32     	; 0x4c22 <__addsf3+0x8>
    4c42:	ba 17       	cp	r27, r26
    4c44:	62 07       	cpc	r22, r18
    4c46:	73 07       	cpc	r23, r19
    4c48:	84 07       	cpc	r24, r20
    4c4a:	95 07       	cpc	r25, r21
    4c4c:	18 f0       	brcs	.+6      	; 0x4c54 <__addsf3x+0x18>
    4c4e:	71 f4       	brne	.+28     	; 0x4c6c <__addsf3x+0x30>
    4c50:	9e f5       	brtc	.+102    	; 0x4cb8 <__addsf3x+0x7c>
    4c52:	70 cf       	rjmp	.-288    	; 0x4b34 <__fp_zero>
    4c54:	0e f4       	brtc	.+2      	; 0x4c58 <__addsf3x+0x1c>
    4c56:	e0 95       	com	r30
    4c58:	0b 2e       	mov	r0, r27
    4c5a:	ba 2f       	mov	r27, r26
    4c5c:	a0 2d       	mov	r26, r0
    4c5e:	0b 01       	movw	r0, r22
    4c60:	b9 01       	movw	r22, r18
    4c62:	90 01       	movw	r18, r0
    4c64:	0c 01       	movw	r0, r24
    4c66:	ca 01       	movw	r24, r20
    4c68:	a0 01       	movw	r20, r0
    4c6a:	11 24       	eor	r1, r1
    4c6c:	ff 27       	eor	r31, r31
    4c6e:	59 1b       	sub	r21, r25
    4c70:	99 f0       	breq	.+38     	; 0x4c98 <__addsf3x+0x5c>
    4c72:	59 3f       	cpi	r21, 0xF9	; 249
    4c74:	50 f4       	brcc	.+20     	; 0x4c8a <__addsf3x+0x4e>
    4c76:	50 3e       	cpi	r21, 0xE0	; 224
    4c78:	68 f1       	brcs	.+90     	; 0x4cd4 <__addsf3x+0x98>
    4c7a:	1a 16       	cp	r1, r26
    4c7c:	f0 40       	sbci	r31, 0x00	; 0
    4c7e:	a2 2f       	mov	r26, r18
    4c80:	23 2f       	mov	r18, r19
    4c82:	34 2f       	mov	r19, r20
    4c84:	44 27       	eor	r20, r20
    4c86:	58 5f       	subi	r21, 0xF8	; 248
    4c88:	f3 cf       	rjmp	.-26     	; 0x4c70 <__addsf3x+0x34>
    4c8a:	46 95       	lsr	r20
    4c8c:	37 95       	ror	r19
    4c8e:	27 95       	ror	r18
    4c90:	a7 95       	ror	r26
    4c92:	f0 40       	sbci	r31, 0x00	; 0
    4c94:	53 95       	inc	r21
    4c96:	c9 f7       	brne	.-14     	; 0x4c8a <__addsf3x+0x4e>
    4c98:	7e f4       	brtc	.+30     	; 0x4cb8 <__addsf3x+0x7c>
    4c9a:	1f 16       	cp	r1, r31
    4c9c:	ba 0b       	sbc	r27, r26
    4c9e:	62 0b       	sbc	r22, r18
    4ca0:	73 0b       	sbc	r23, r19
    4ca2:	84 0b       	sbc	r24, r20
    4ca4:	ba f0       	brmi	.+46     	; 0x4cd4 <__addsf3x+0x98>
    4ca6:	91 50       	subi	r25, 0x01	; 1
    4ca8:	a1 f0       	breq	.+40     	; 0x4cd2 <__addsf3x+0x96>
    4caa:	ff 0f       	add	r31, r31
    4cac:	bb 1f       	adc	r27, r27
    4cae:	66 1f       	adc	r22, r22
    4cb0:	77 1f       	adc	r23, r23
    4cb2:	88 1f       	adc	r24, r24
    4cb4:	c2 f7       	brpl	.-16     	; 0x4ca6 <__addsf3x+0x6a>
    4cb6:	0e c0       	rjmp	.+28     	; 0x4cd4 <__addsf3x+0x98>
    4cb8:	ba 0f       	add	r27, r26
    4cba:	62 1f       	adc	r22, r18
    4cbc:	73 1f       	adc	r23, r19
    4cbe:	84 1f       	adc	r24, r20
    4cc0:	48 f4       	brcc	.+18     	; 0x4cd4 <__addsf3x+0x98>
    4cc2:	87 95       	ror	r24
    4cc4:	77 95       	ror	r23
    4cc6:	67 95       	ror	r22
    4cc8:	b7 95       	ror	r27
    4cca:	f7 95       	ror	r31
    4ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    4cce:	08 f0       	brcs	.+2      	; 0x4cd2 <__addsf3x+0x96>
    4cd0:	b3 cf       	rjmp	.-154    	; 0x4c38 <__addsf3+0x1e>
    4cd2:	93 95       	inc	r25
    4cd4:	88 0f       	add	r24, r24
    4cd6:	08 f0       	brcs	.+2      	; 0x4cda <__addsf3x+0x9e>
    4cd8:	99 27       	eor	r25, r25
    4cda:	ee 0f       	add	r30, r30
    4cdc:	97 95       	ror	r25
    4cde:	87 95       	ror	r24
    4ce0:	08 95       	ret

00004ce2 <__divsf3>:
    4ce2:	5e de       	rcall	.-836    	; 0x49a0 <__divsf3x>
    4ce4:	f4 ce       	rjmp	.-536    	; 0x4ace <__fp_round>

00004ce6 <_exit>:
    4ce6:	ff cf       	rjmp	.-2      	; 0x4ce6 <_exit>
