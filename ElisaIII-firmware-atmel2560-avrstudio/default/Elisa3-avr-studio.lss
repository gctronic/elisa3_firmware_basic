
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  00004a96  00004b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004a96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013b  0080032a  0080032a  00004c54  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00004c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000702  00000000  00000000  00006f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00007696  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f46  00000000  00000000  00007916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003da6  00000000  00000000  0000885c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001491  00000000  00000000  0000c602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000468d  00000000  00000000  0000da93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  00012120  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e77  00000000  00000000  00012730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f97  00000000  00000000  000135a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f2  00000000  00000000  0001453e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  00014730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__vector_32>
      84:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <__vector_42>
      ac:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	45 0c       	add	r4, r5
      e6:	29 0c       	add	r2, r9
      e8:	f5 0b       	sbc	r31, r21
      ea:	d3 0b       	sbc	r29, r19
      ec:	a6 0b       	sbc	r26, r22
      ee:	e8 0b       	sbc	r30, r24
      f0:	7d 0b       	sbc	r23, r29
      f2:	61 0b       	sbc	r22, r17
      f4:	34 0b       	sbc	r19, r20
      f6:	1a 0b       	sbc	r17, r26
      f8:	12 07       	cpc	r17, r18
      fa:	12 07       	cpc	r17, r18
      fc:	12 07       	cpc	r17, r18
      fe:	12 07       	cpc	r17, r18
     100:	12 07       	cpc	r17, r18
     102:	12 07       	cpc	r17, r18
     104:	0f 0b       	sbc	r16, r31
     106:	04 0b       	sbc	r16, r20
     108:	12 07       	cpc	r17, r18
     10a:	12 07       	cpc	r17, r18
     10c:	12 07       	cpc	r17, r18
     10e:	12 07       	cpc	r17, r18
     110:	12 07       	cpc	r17, r18
     112:	12 07       	cpc	r17, r18
     114:	12 07       	cpc	r17, r18
     116:	12 07       	cpc	r17, r18
     118:	12 07       	cpc	r17, r18
     11a:	12 07       	cpc	r17, r18
     11c:	12 07       	cpc	r17, r18
     11e:	12 07       	cpc	r17, r18
     120:	34 0b       	sbc	r19, r20
     122:	f5 0b       	sbc	r31, r21
     124:	f4 0a       	sbc	r15, r20
     126:	ef 0a       	sbc	r14, r31
     128:	12 07       	cpc	r17, r18
     12a:	12 07       	cpc	r17, r18
     12c:	12 07       	cpc	r17, r18
     12e:	12 07       	cpc	r17, r18
     130:	12 07       	cpc	r17, r18
     132:	12 07       	cpc	r17, r18
     134:	12 07       	cpc	r17, r18
     136:	12 07       	cpc	r17, r18
     138:	12 07       	cpc	r17, r18
     13a:	12 07       	cpc	r17, r18
     13c:	12 07       	cpc	r17, r18
     13e:	12 07       	cpc	r17, r18
     140:	a6 0b       	sbc	r26, r22
     142:	7d 0b       	sbc	r23, r29
     144:	12 07       	cpc	r17, r18
     146:	12 07       	cpc	r17, r18
     148:	45 0c       	add	r4, r5
     14a:	e8 0b       	sbc	r30, r24
     14c:	6f 0c       	add	r6, r15
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e6 e9       	ldi	r30, 0x96	; 150
     194:	fa e4       	ldi	r31, 0x4A	; 74
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	aa 32       	cpi	r26, 0x2A	; 42
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	14 e0       	ldi	r17, 0x04	; 4
     1a4:	aa e2       	ldi	r26, 0x2A	; 42
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a5 36       	cpi	r26, 0x65	; 101
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "utility.h"
#include "speed_control.h"
#include "nRF24L01.h"
#include "behaviors.h"

int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	a4 97       	sbiw	r28, 0x24	; 36
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61

	unsigned int i = 0;
	choosePeripheral = 1;
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	10 93 18 02 	sts	0x0218, r17

	initPeripherals();
     1f8:	0e 94 34 18 	call	0x3068	; 0x3068 <initPeripherals>

	startCalibration = 1;
     1fc:	10 93 2d 04 	sts	0x042D, r17
	calibrationCycle = 0;
     200:	10 92 2f 04 	sts	0x042F, r1
     204:	10 92 2e 04 	sts	0x042E, r1
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
					ackPayload[12] = accX>>8;
					ackPayload[13] = accY&0xFF;
					ackPayload[14] = accY>>8;
					ackPayload[15] = ir_move;
					packetId = 5;
     208:	05 e0       	ldi	r16, 0x05	; 5

	while(1) {

		//PORTB ^= (1 << 6); 	// toggle the green led

		currentSelector = getSelector();
     20a:	0e 94 0f 18 	call	0x301e	; 0x301e <getSelector>
     20e:	80 93 2c 04 	sts	0x042C, r24

		readAccelXYZ();
     212:	0e 94 fe 19 	call	0x33fc	; 0x33fc <readAccelXYZ>

		computeAngle();
     216:	0e 94 be 1a 	call	0x357c	; 0x357c <computeAngle>

		if(updateProx) {
     21a:	80 91 9e 03 	lds	r24, 0x039E
     21e:	88 23       	and	r24, r24
     220:	09 f0       	breq	.+2      	; 0x224 <main+0x66>
     222:	83 c2       	rjmp	.+1286   	; 0x72a <main+0x56c>
     224:	40 91 2d 04 	lds	r20, 0x042D
		} else {
			pwm_right_desired = 0;
			pwm_left_desired = 0;
		}
*/
		if(delayCounter >= 20000) {
     228:	20 91 2a 04 	lds	r18, 0x042A
     22c:	30 91 2b 04 	lds	r19, 0x042B
     230:	5e e4       	ldi	r21, 0x4E	; 78
     232:	20 32       	cpi	r18, 0x20	; 32
     234:	35 07       	cpc	r19, r21
     236:	10 f0       	brcs	.+4      	; 0x23c <main+0x7e>
			measBattery = 1;
     238:	10 93 9b 03 	sts	0x039B, r17
			//sleep(20);
			//delayCounter = 0;
		}


		if(startCalibration && calibrationCycle<CALIBRATION_CYCLES) {
     23c:	44 23       	and	r20, r20
     23e:	09 f4       	brne	.+2      	; 0x242 <main+0x84>
     240:	dc c1       	rjmp	.+952    	; 0x5fa <main+0x43c>
     242:	60 91 2e 04 	lds	r22, 0x042E
     246:	70 91 2f 04 	lds	r23, 0x042F
     24a:	60 31       	cpi	r22, 0x10	; 16
     24c:	71 05       	cpc	r23, r1
     24e:	0c f0       	brlt	.+2      	; 0x252 <main+0x94>
     250:	d8 c1       	rjmp	.+944    	; 0x602 <main+0x444>

			if(proxUpdated) {
     252:	80 91 cf 03 	lds	r24, 0x03CF
     256:	88 23       	and	r24, r24
     258:	c1 f2       	breq	.-80     	; 0x20a <main+0x4c>

				proxUpdated = 0;
     25a:	10 92 cf 03 	sts	0x03CF, r1

				if(calibrationCycle==0) {
     25e:	61 15       	cp	r22, r1
     260:	71 05       	cpc	r23, r1
     262:	11 f4       	brne	.+4      	; 0x268 <main+0xaa>
     264:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <main+0x1380>
     268:	80 91 22 04 	lds	r24, 0x0422
     26c:	90 91 23 04 	lds	r25, 0x0423
     270:	9c a3       	std	Y+36, r25	; 0x24
     272:	8b a3       	std	Y+35, r24	; 0x23
     274:	20 90 24 04 	lds	r2, 0x0424
     278:	30 90 25 04 	lds	r3, 0x0425
     27c:	a0 91 26 04 	lds	r26, 0x0426
     280:	b0 91 27 04 	lds	r27, 0x0427
     284:	ba 83       	std	Y+2, r27	; 0x02
     286:	a9 83       	std	Y+1, r26	; 0x01
     288:	20 91 9f 03 	lds	r18, 0x039F
     28c:	30 91 a0 03 	lds	r19, 0x03A0
     290:	40 91 a1 03 	lds	r20, 0x03A1
     294:	50 91 a2 03 	lds	r21, 0x03A2
     298:	c0 90 a3 03 	lds	r12, 0x03A3
     29c:	d0 90 a4 03 	lds	r13, 0x03A4
     2a0:	e0 90 a5 03 	lds	r14, 0x03A5
     2a4:	f0 90 a6 03 	lds	r15, 0x03A6
     2a8:	80 90 a7 03 	lds	r8, 0x03A7
     2ac:	90 90 a8 03 	lds	r9, 0x03A8
     2b0:	a0 90 a9 03 	lds	r10, 0x03A9
     2b4:	b0 90 aa 03 	lds	r11, 0x03AA
     2b8:	40 90 ab 03 	lds	r4, 0x03AB
     2bc:	50 90 ac 03 	lds	r5, 0x03AC
     2c0:	60 90 ad 03 	lds	r6, 0x03AD
     2c4:	70 90 ae 03 	lds	r7, 0x03AE
     2c8:	80 91 af 03 	lds	r24, 0x03AF
     2cc:	90 91 b0 03 	lds	r25, 0x03B0
     2d0:	a0 91 b1 03 	lds	r26, 0x03B1
     2d4:	b0 91 b2 03 	lds	r27, 0x03B2
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	ad 83       	std	Y+5, r26	; 0x05
     2de:	be 83       	std	Y+6, r27	; 0x06
     2e0:	80 91 b3 03 	lds	r24, 0x03B3
     2e4:	90 91 b4 03 	lds	r25, 0x03B4
     2e8:	a0 91 b5 03 	lds	r26, 0x03B5
     2ec:	b0 91 b6 03 	lds	r27, 0x03B6
     2f0:	8f 83       	std	Y+7, r24	; 0x07
     2f2:	98 87       	std	Y+8, r25	; 0x08
     2f4:	a9 87       	std	Y+9, r26	; 0x09
     2f6:	ba 87       	std	Y+10, r27	; 0x0a
     2f8:	80 91 b7 03 	lds	r24, 0x03B7
     2fc:	90 91 b8 03 	lds	r25, 0x03B8
     300:	a0 91 b9 03 	lds	r26, 0x03B9
     304:	b0 91 ba 03 	lds	r27, 0x03BA
     308:	8b 87       	std	Y+11, r24	; 0x0b
     30a:	9c 87       	std	Y+12, r25	; 0x0c
     30c:	ad 87       	std	Y+13, r26	; 0x0d
     30e:	be 87       	std	Y+14, r27	; 0x0e
     310:	80 91 bb 03 	lds	r24, 0x03BB
     314:	90 91 bc 03 	lds	r25, 0x03BC
     318:	a0 91 bd 03 	lds	r26, 0x03BD
     31c:	b0 91 be 03 	lds	r27, 0x03BE
     320:	8f 87       	std	Y+15, r24	; 0x0f
     322:	98 8b       	std	Y+16, r25	; 0x10
     324:	a9 8b       	std	Y+17, r26	; 0x11
     326:	ba 8b       	std	Y+18, r27	; 0x12
     328:	80 91 bf 03 	lds	r24, 0x03BF
     32c:	90 91 c0 03 	lds	r25, 0x03C0
     330:	a0 91 c1 03 	lds	r26, 0x03C1
     334:	b0 91 c2 03 	lds	r27, 0x03C2
     338:	8b 8b       	std	Y+19, r24	; 0x13
     33a:	9c 8b       	std	Y+20, r25	; 0x14
     33c:	ad 8b       	std	Y+21, r26	; 0x15
     33e:	be 8b       	std	Y+22, r27	; 0x16
     340:	80 91 c3 03 	lds	r24, 0x03C3
     344:	90 91 c4 03 	lds	r25, 0x03C4
     348:	a0 91 c5 03 	lds	r26, 0x03C5
     34c:	b0 91 c6 03 	lds	r27, 0x03C6
     350:	8f 8b       	std	Y+23, r24	; 0x17
     352:	98 8f       	std	Y+24, r25	; 0x18
     354:	a9 8f       	std	Y+25, r26	; 0x19
     356:	ba 8f       	std	Y+26, r27	; 0x1a
     358:	80 91 c7 03 	lds	r24, 0x03C7
     35c:	90 91 c8 03 	lds	r25, 0x03C8
     360:	a0 91 c9 03 	lds	r26, 0x03C9
     364:	b0 91 ca 03 	lds	r27, 0x03CA
     368:	8b 8f       	std	Y+27, r24	; 0x1b
     36a:	9c 8f       	std	Y+28, r25	; 0x1c
     36c:	ad 8f       	std	Y+29, r26	; 0x1d
     36e:	be 8f       	std	Y+30, r27	; 0x1e
     370:	80 91 cb 03 	lds	r24, 0x03CB
     374:	90 91 cc 03 	lds	r25, 0x03CC
     378:	a0 91 cd 03 	lds	r26, 0x03CD
     37c:	b0 91 ce 03 	lds	r27, 0x03CE
     380:	8f 8f       	std	Y+31, r24	; 0x1f
     382:	98 a3       	std	Y+32, r25	; 0x20
     384:	a9 a3       	std	Y+33, r26	; 0x21
     386:	ba a3       	std	Y+34, r27	; 0x22
					accOffsetYSum = 0;
					accOffsetZSum = 0;
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
     388:	80 91 65 03 	lds	r24, 0x0365
     38c:	90 91 66 03 	lds	r25, 0x0366
     390:	aa 27       	eor	r26, r26
     392:	97 fd       	sbrc	r25, 7
     394:	a0 95       	com	r26
     396:	ba 2f       	mov	r27, r26
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	a4 1f       	adc	r26, r20
     39e:	b5 1f       	adc	r27, r21
     3a0:	80 93 9f 03 	sts	0x039F, r24
     3a4:	90 93 a0 03 	sts	0x03A0, r25
     3a8:	a0 93 a1 03 	sts	0x03A1, r26
     3ac:	b0 93 a2 03 	sts	0x03A2, r27
     3b0:	80 91 67 03 	lds	r24, 0x0367
     3b4:	90 91 68 03 	lds	r25, 0x0368
     3b8:	aa 27       	eor	r26, r26
     3ba:	97 fd       	sbrc	r25, 7
     3bc:	a0 95       	com	r26
     3be:	ba 2f       	mov	r27, r26
     3c0:	8c 0d       	add	r24, r12
     3c2:	9d 1d       	adc	r25, r13
     3c4:	ae 1d       	adc	r26, r14
     3c6:	bf 1d       	adc	r27, r15
     3c8:	80 93 a3 03 	sts	0x03A3, r24
     3cc:	90 93 a4 03 	sts	0x03A4, r25
     3d0:	a0 93 a5 03 	sts	0x03A5, r26
     3d4:	b0 93 a6 03 	sts	0x03A6, r27
     3d8:	80 91 69 03 	lds	r24, 0x0369
     3dc:	90 91 6a 03 	lds	r25, 0x036A
     3e0:	aa 27       	eor	r26, r26
     3e2:	97 fd       	sbrc	r25, 7
     3e4:	a0 95       	com	r26
     3e6:	ba 2f       	mov	r27, r26
     3e8:	88 0d       	add	r24, r8
     3ea:	99 1d       	adc	r25, r9
     3ec:	aa 1d       	adc	r26, r10
     3ee:	bb 1d       	adc	r27, r11
     3f0:	80 93 a7 03 	sts	0x03A7, r24
     3f4:	90 93 a8 03 	sts	0x03A8, r25
     3f8:	a0 93 a9 03 	sts	0x03A9, r26
     3fc:	b0 93 aa 03 	sts	0x03AA, r27
     400:	80 91 6b 03 	lds	r24, 0x036B
     404:	90 91 6c 03 	lds	r25, 0x036C
     408:	aa 27       	eor	r26, r26
     40a:	97 fd       	sbrc	r25, 7
     40c:	a0 95       	com	r26
     40e:	ba 2f       	mov	r27, r26
     410:	84 0d       	add	r24, r4
     412:	95 1d       	adc	r25, r5
     414:	a6 1d       	adc	r26, r6
     416:	b7 1d       	adc	r27, r7
     418:	80 93 ab 03 	sts	0x03AB, r24
     41c:	90 93 ac 03 	sts	0x03AC, r25
     420:	a0 93 ad 03 	sts	0x03AD, r26
     424:	b0 93 ae 03 	sts	0x03AE, r27
     428:	80 91 6d 03 	lds	r24, 0x036D
     42c:	90 91 6e 03 	lds	r25, 0x036E
     430:	aa 27       	eor	r26, r26
     432:	97 fd       	sbrc	r25, 7
     434:	a0 95       	com	r26
     436:	ba 2f       	mov	r27, r26
     438:	2b 81       	ldd	r18, Y+3	; 0x03
     43a:	3c 81       	ldd	r19, Y+4	; 0x04
     43c:	4d 81       	ldd	r20, Y+5	; 0x05
     43e:	5e 81       	ldd	r21, Y+6	; 0x06
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
     444:	a4 1f       	adc	r26, r20
     446:	b5 1f       	adc	r27, r21
     448:	80 93 af 03 	sts	0x03AF, r24
     44c:	90 93 b0 03 	sts	0x03B0, r25
     450:	a0 93 b1 03 	sts	0x03B1, r26
     454:	b0 93 b2 03 	sts	0x03B2, r27
     458:	80 91 6f 03 	lds	r24, 0x036F
     45c:	90 91 70 03 	lds	r25, 0x0370
     460:	aa 27       	eor	r26, r26
     462:	97 fd       	sbrc	r25, 7
     464:	a0 95       	com	r26
     466:	ba 2f       	mov	r27, r26
     468:	2f 81       	ldd	r18, Y+7	; 0x07
     46a:	38 85       	ldd	r19, Y+8	; 0x08
     46c:	49 85       	ldd	r20, Y+9	; 0x09
     46e:	5a 85       	ldd	r21, Y+10	; 0x0a
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	a4 1f       	adc	r26, r20
     476:	b5 1f       	adc	r27, r21
     478:	80 93 b3 03 	sts	0x03B3, r24
     47c:	90 93 b4 03 	sts	0x03B4, r25
     480:	a0 93 b5 03 	sts	0x03B5, r26
     484:	b0 93 b6 03 	sts	0x03B6, r27
     488:	80 91 71 03 	lds	r24, 0x0371
     48c:	90 91 72 03 	lds	r25, 0x0372
     490:	aa 27       	eor	r26, r26
     492:	97 fd       	sbrc	r25, 7
     494:	a0 95       	com	r26
     496:	ba 2f       	mov	r27, r26
     498:	2b 85       	ldd	r18, Y+11	; 0x0b
     49a:	3c 85       	ldd	r19, Y+12	; 0x0c
     49c:	4d 85       	ldd	r20, Y+13	; 0x0d
     49e:	5e 85       	ldd	r21, Y+14	; 0x0e
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	a4 1f       	adc	r26, r20
     4a6:	b5 1f       	adc	r27, r21
     4a8:	80 93 b7 03 	sts	0x03B7, r24
     4ac:	90 93 b8 03 	sts	0x03B8, r25
     4b0:	a0 93 b9 03 	sts	0x03B9, r26
     4b4:	b0 93 ba 03 	sts	0x03BA, r27
     4b8:	80 91 73 03 	lds	r24, 0x0373
     4bc:	90 91 74 03 	lds	r25, 0x0374
     4c0:	aa 27       	eor	r26, r26
     4c2:	97 fd       	sbrc	r25, 7
     4c4:	a0 95       	com	r26
     4c6:	ba 2f       	mov	r27, r26
     4c8:	2f 85       	ldd	r18, Y+15	; 0x0f
     4ca:	38 89       	ldd	r19, Y+16	; 0x10
     4cc:	49 89       	ldd	r20, Y+17	; 0x11
     4ce:	5a 89       	ldd	r21, Y+18	; 0x12
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	a4 1f       	adc	r26, r20
     4d6:	b5 1f       	adc	r27, r21
     4d8:	80 93 bb 03 	sts	0x03BB, r24
     4dc:	90 93 bc 03 	sts	0x03BC, r25
     4e0:	a0 93 bd 03 	sts	0x03BD, r26
     4e4:	b0 93 be 03 	sts	0x03BE, r27
     4e8:	80 91 75 03 	lds	r24, 0x0375
     4ec:	90 91 76 03 	lds	r25, 0x0376
     4f0:	aa 27       	eor	r26, r26
     4f2:	97 fd       	sbrc	r25, 7
     4f4:	a0 95       	com	r26
     4f6:	ba 2f       	mov	r27, r26
     4f8:	2b 89       	ldd	r18, Y+19	; 0x13
     4fa:	3c 89       	ldd	r19, Y+20	; 0x14
     4fc:	4d 89       	ldd	r20, Y+21	; 0x15
     4fe:	5e 89       	ldd	r21, Y+22	; 0x16
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	a4 1f       	adc	r26, r20
     506:	b5 1f       	adc	r27, r21
     508:	80 93 bf 03 	sts	0x03BF, r24
     50c:	90 93 c0 03 	sts	0x03C0, r25
     510:	a0 93 c1 03 	sts	0x03C1, r26
     514:	b0 93 c2 03 	sts	0x03C2, r27
     518:	80 91 77 03 	lds	r24, 0x0377
     51c:	90 91 78 03 	lds	r25, 0x0378
     520:	aa 27       	eor	r26, r26
     522:	97 fd       	sbrc	r25, 7
     524:	a0 95       	com	r26
     526:	ba 2f       	mov	r27, r26
     528:	2f 89       	ldd	r18, Y+23	; 0x17
     52a:	38 8d       	ldd	r19, Y+24	; 0x18
     52c:	49 8d       	ldd	r20, Y+25	; 0x19
     52e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	a4 1f       	adc	r26, r20
     536:	b5 1f       	adc	r27, r21
     538:	80 93 c3 03 	sts	0x03C3, r24
     53c:	90 93 c4 03 	sts	0x03C4, r25
     540:	a0 93 c5 03 	sts	0x03C5, r26
     544:	b0 93 c6 03 	sts	0x03C6, r27
     548:	80 91 79 03 	lds	r24, 0x0379
     54c:	90 91 7a 03 	lds	r25, 0x037A
     550:	aa 27       	eor	r26, r26
     552:	97 fd       	sbrc	r25, 7
     554:	a0 95       	com	r26
     556:	ba 2f       	mov	r27, r26
     558:	2b 8d       	ldd	r18, Y+27	; 0x1b
     55a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     55c:	4d 8d       	ldd	r20, Y+29	; 0x1d
     55e:	5e 8d       	ldd	r21, Y+30	; 0x1e
     560:	82 0f       	add	r24, r18
     562:	93 1f       	adc	r25, r19
     564:	a4 1f       	adc	r26, r20
     566:	b5 1f       	adc	r27, r21
     568:	80 93 c7 03 	sts	0x03C7, r24
     56c:	90 93 c8 03 	sts	0x03C8, r25
     570:	a0 93 c9 03 	sts	0x03C9, r26
     574:	b0 93 ca 03 	sts	0x03CA, r27
     578:	80 91 7b 03 	lds	r24, 0x037B
     57c:	90 91 7c 03 	lds	r25, 0x037C
     580:	aa 27       	eor	r26, r26
     582:	97 fd       	sbrc	r25, 7
     584:	a0 95       	com	r26
     586:	ba 2f       	mov	r27, r26
     588:	2f 8d       	ldd	r18, Y+31	; 0x1f
     58a:	38 a1       	ldd	r19, Y+32	; 0x20
     58c:	49 a1       	ldd	r20, Y+33	; 0x21
     58e:	5a a1       	ldd	r21, Y+34	; 0x22
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	a4 1f       	adc	r26, r20
     596:	b5 1f       	adc	r27, r21
     598:	80 93 cb 03 	sts	0x03CB, r24
     59c:	90 93 cc 03 	sts	0x03CC, r25
     5a0:	a0 93 cd 03 	sts	0x03CD, r26
     5a4:	b0 93 ce 03 	sts	0x03CE, r27
				}

				accOffsetXSum += accX;
     5a8:	80 91 0e 04 	lds	r24, 0x040E
     5ac:	90 91 0f 04 	lds	r25, 0x040F
     5b0:	4b a1       	ldd	r20, Y+35	; 0x23
     5b2:	5c a1       	ldd	r21, Y+36	; 0x24
     5b4:	84 0f       	add	r24, r20
     5b6:	95 1f       	adc	r25, r21
     5b8:	90 93 23 04 	sts	0x0423, r25
     5bc:	80 93 22 04 	sts	0x0422, r24
				accOffsetYSum += accY;
     5c0:	80 91 10 04 	lds	r24, 0x0410
     5c4:	90 91 11 04 	lds	r25, 0x0411
     5c8:	82 0d       	add	r24, r2
     5ca:	93 1d       	adc	r25, r3
     5cc:	90 93 25 04 	sts	0x0425, r25
     5d0:	80 93 24 04 	sts	0x0424, r24
				accOffsetZSum += accZ;
     5d4:	80 91 12 04 	lds	r24, 0x0412
     5d8:	90 91 13 04 	lds	r25, 0x0413
     5dc:	a9 81       	ldd	r26, Y+1	; 0x01
     5de:	ba 81       	ldd	r27, Y+2	; 0x02
     5e0:	8a 0f       	add	r24, r26
     5e2:	9b 1f       	adc	r25, r27
     5e4:	90 93 27 04 	sts	0x0427, r25
     5e8:	80 93 26 04 	sts	0x0426, r24

				calibrationCycle++;
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	70 93 2f 04 	sts	0x042F, r23
     5f4:	60 93 2e 04 	sts	0x042E, r22
     5f8:	08 ce       	rjmp	.-1008   	; 0x20a <main+0x4c>
     5fa:	60 91 2e 04 	lds	r22, 0x042E
     5fe:	70 91 2f 04 	lds	r23, 0x042F

			}

			continue;

		} else if(calibrationCycle == CALIBRATION_CYCLES) {
     602:	60 31       	cpi	r22, 0x10	; 16
     604:	71 05       	cpc	r23, r1
     606:	09 f4       	brne	.+2      	; 0x60a <main+0x44c>
     608:	2e c4       	rjmp	.+2140   	; 0xe66 <main+0xca8>
			updateBlueLed(pwm_blue);
*/

		}

		if(irEnabled) {
     60a:	80 91 19 02 	lds	r24, 0x0219
     60e:	88 23       	and	r24, r24
     610:	09 f0       	breq	.+2      	; 0x614 <main+0x456>
     612:	f7 c3       	rjmp	.+2030   	; 0xe02 <main+0xc44>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
     614:	9e e4       	ldi	r25, 0x4E	; 78
     616:	20 32       	cpi	r18, 0x20	; 32
     618:	39 07       	cpc	r19, r25
     61a:	20 f0       	brcs	.+8      	; 0x624 <main+0x466>
			delayCounter = 0;
     61c:	10 92 2b 04 	sts	0x042B, r1
     620:	10 92 2a 04 	sts	0x042A, r1
			usartTransmit(CHARGE_ON);
*/
		}

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {
     624:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <mirf_data_ready>
     628:	88 23       	and	r24, r24
     62a:	09 f0       	breq	.+2      	; 0x62e <main+0x470>
     62c:	61 c2       	rjmp	.+1218   	; 0xaf0 <main+0x932>

		}
//PORTB |= (1 << 7);


		if(currentSelector == 0) {	// no control
     62e:	20 91 2c 04 	lds	r18, 0x042C
     632:	22 23       	and	r18, r18
     634:	09 f0       	breq	.+2      	; 0x638 <main+0x47a>
     636:	43 c1       	rjmp	.+646    	; 0x8be <main+0x700>

			// compute velocities even if they aren't used...
			if(compute_left_vel) {
     638:	80 91 0f 02 	lds	r24, 0x020F
     63c:	88 23       	and	r24, r24
     63e:	a1 f0       	breq	.+40     	; 0x668 <main+0x4aa>
				last_left_vel = left_vel_sum>>2;
     640:	80 91 dc 03 	lds	r24, 0x03DC
     644:	90 91 dd 03 	lds	r25, 0x03DD
     648:	96 95       	lsr	r25
     64a:	87 95       	ror	r24
     64c:	96 95       	lsr	r25
     64e:	87 95       	ror	r24
     650:	90 93 e1 03 	sts	0x03E1, r25
     654:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
     658:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
     65c:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
     660:	10 92 dd 03 	sts	0x03DD, r1
     664:	10 92 dc 03 	sts	0x03DC, r1
			}

			if(compute_right_vel) {
     668:	80 91 10 02 	lds	r24, 0x0210
     66c:	88 23       	and	r24, r24
     66e:	a1 f0       	breq	.+40     	; 0x698 <main+0x4da>
				last_right_vel = right_vel_sum>>2;
     670:	80 91 de 03 	lds	r24, 0x03DE
     674:	90 91 df 03 	lds	r25, 0x03DF
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	96 95       	lsr	r25
     67e:	87 95       	ror	r24
     680:	90 93 e3 03 	sts	0x03E3, r25
     684:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
     688:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
     68c:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
     690:	10 92 df 03 	sts	0x03DF, r1
     694:	10 92 de 03 	sts	0x03DE, r1
			}

			pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     698:	80 91 ec 03 	lds	r24, 0x03EC
     69c:	90 91 ed 03 	lds	r25, 0x03ED
     6a0:	90 93 ff 03 	sts	0x03FF, r25
     6a4:	80 93 fe 03 	sts	0x03FE, r24
			pwm_left_working = pwm_left_desired;
     6a8:	20 91 ee 03 	lds	r18, 0x03EE
     6ac:	30 91 ef 03 	lds	r19, 0x03EF
     6b0:	30 93 01 04 	sts	0x0401, r19
     6b4:	20 93 00 04 	sts	0x0400, r18
            pwm_left_desired_to_control = pwm_left_desired;
     6b8:	30 93 db 03 	sts	0x03DB, r19
     6bc:	20 93 da 03 	sts	0x03DA, r18
            pwm_right_desired_to_control = pwm_right_desired;
     6c0:	90 93 d9 03 	sts	0x03D9, r25
     6c4:	80 93 d8 03 	sts	0x03D8, r24

			if(obstacleAvoidanceEnabled) {
     6c8:	80 91 30 04 	lds	r24, 0x0430
     6cc:	88 23       	and	r24, r24
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <main+0x514>
     6d0:	92 c5       	rjmp	.+2852   	; 0x11f6 <main+0x1038>
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
				//PORTB |= (1 << 7);
			}

			if(cliffAvoidanceEnabled) {
     6d2:	80 91 35 04 	lds	r24, 0x0435
     6d6:	88 23       	and	r24, r24
     6d8:	09 f0       	breq	.+2      	; 0x6dc <main+0x51e>
     6da:	8a c5       	rjmp	.+2836   	; 0x11f0 <main+0x1032>
		}
*/

		if(update_pwm) {

			update_pwm = 0;
     6dc:	10 92 02 04 	sts	0x0402, r1
			pwm_left = pwm_left_working;
     6e0:	80 91 00 04 	lds	r24, 0x0400
     6e4:	90 91 01 04 	lds	r25, 0x0401
     6e8:	90 93 e7 03 	sts	0x03E7, r25
     6ec:	80 93 e6 03 	sts	0x03E6, r24
			pwm_right = pwm_right_working;
     6f0:	80 91 fe 03 	lds	r24, 0x03FE
     6f4:	90 91 ff 03 	lds	r25, 0x03FF
     6f8:	90 93 e5 03 	sts	0x03E5, r25
     6fc:	80 93 e4 03 	sts	0x03E4, r24

			if(pwm_right > 0) {
     700:	18 16       	cp	r1, r24
     702:	19 06       	cpc	r1, r25
     704:	0c f0       	brlt	.+2      	; 0x708 <main+0x54a>
     706:	c6 c5       	rjmp	.+2956   	; 0x1294 <main+0x10d6>
				OCR3A = (unsigned int)pwm_right;
     708:	90 93 99 00 	sts	0x0099, r25
     70c:	80 93 98 00 	sts	0x0098, r24
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
     710:	80 91 e6 03 	lds	r24, 0x03E6
     714:	90 91 e7 03 	lds	r25, 0x03E7
     718:	18 16       	cp	r1, r24
     71a:	19 06       	cpc	r1, r25
     71c:	0c f0       	brlt	.+2      	; 0x720 <main+0x562>
     71e:	ad c5       	rjmp	.+2906   	; 0x127a <main+0x10bc>
				OCR4A = (unsigned int)pwm_left;
     720:	90 93 a9 00 	sts	0x00A9, r25
     724:	80 93 a8 00 	sts	0x00A8, r24
     728:	70 cd       	rjmp	.-1312   	; 0x20a <main+0x4c>

		computeAngle();

		if(updateProx) {

			updateProx = 0;
     72a:	10 92 9e 03 	sts	0x039E, r1
			if(startCalibration) {
     72e:	40 91 2d 04 	lds	r20, 0x042D
     732:	44 23       	and	r20, r20
     734:	09 f4       	brne	.+2      	; 0x738 <main+0x57a>
     736:	cf c0       	rjmp	.+414    	; 0x8d6 <main+0x718>

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
     738:	80 91 35 03 	lds	r24, 0x0335
     73c:	90 91 36 03 	lds	r25, 0x0336
     740:	20 91 37 03 	lds	r18, 0x0337
     744:	30 91 38 03 	lds	r19, 0x0338
     748:	82 1b       	sub	r24, r18
     74a:	93 0b       	sbc	r25, r19
     74c:	90 93 66 03 	sts	0x0366, r25
     750:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[0] < 0) {
     754:	97 fd       	sbrc	r25, 7
     756:	ee c6       	rjmp	.+3548   	; 0x1534 <main+0x1376>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
     758:	80 91 39 03 	lds	r24, 0x0339
     75c:	90 91 3a 03 	lds	r25, 0x033A
     760:	20 91 3b 03 	lds	r18, 0x033B
     764:	30 91 3c 03 	lds	r19, 0x033C
     768:	82 1b       	sub	r24, r18
     76a:	93 0b       	sbc	r25, r19
     76c:	90 93 68 03 	sts	0x0368, r25
     770:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[1] < 0) {
     774:	97 fd       	sbrc	r25, 7
     776:	7f c6       	rjmp	.+3326   	; 0x1476 <main+0x12b8>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
     778:	80 91 3d 03 	lds	r24, 0x033D
     77c:	90 91 3e 03 	lds	r25, 0x033E
     780:	20 91 3f 03 	lds	r18, 0x033F
     784:	30 91 40 03 	lds	r19, 0x0340
     788:	82 1b       	sub	r24, r18
     78a:	93 0b       	sbc	r25, r19
     78c:	90 93 6a 03 	sts	0x036A, r25
     790:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[2] < 0) {
     794:	97 fd       	sbrc	r25, 7
     796:	6a c6       	rjmp	.+3284   	; 0x146c <main+0x12ae>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
     798:	80 91 41 03 	lds	r24, 0x0341
     79c:	90 91 42 03 	lds	r25, 0x0342
     7a0:	20 91 43 03 	lds	r18, 0x0343
     7a4:	30 91 44 03 	lds	r19, 0x0344
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	90 93 6c 03 	sts	0x036C, r25
     7b0:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[3] < 0) {
     7b4:	97 fd       	sbrc	r25, 7
     7b6:	73 c6       	rjmp	.+3302   	; 0x149e <main+0x12e0>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
     7b8:	80 91 45 03 	lds	r24, 0x0345
     7bc:	90 91 46 03 	lds	r25, 0x0346
     7c0:	20 91 47 03 	lds	r18, 0x0347
     7c4:	30 91 48 03 	lds	r19, 0x0348
     7c8:	82 1b       	sub	r24, r18
     7ca:	93 0b       	sbc	r25, r19
     7cc:	90 93 6e 03 	sts	0x036E, r25
     7d0:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[4] < 0) {
     7d4:	97 fd       	sbrc	r25, 7
     7d6:	5e c6       	rjmp	.+3260   	; 0x1494 <main+0x12d6>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
     7d8:	80 91 49 03 	lds	r24, 0x0349
     7dc:	90 91 4a 03 	lds	r25, 0x034A
     7e0:	20 91 4b 03 	lds	r18, 0x034B
     7e4:	30 91 4c 03 	lds	r19, 0x034C
     7e8:	82 1b       	sub	r24, r18
     7ea:	93 0b       	sbc	r25, r19
     7ec:	90 93 70 03 	sts	0x0370, r25
     7f0:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[5] < 0) {
     7f4:	97 fd       	sbrc	r25, 7
     7f6:	49 c6       	rjmp	.+3218   	; 0x148a <main+0x12cc>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
     7f8:	80 91 4d 03 	lds	r24, 0x034D
     7fc:	90 91 4e 03 	lds	r25, 0x034E
     800:	20 91 4f 03 	lds	r18, 0x034F
     804:	30 91 50 03 	lds	r19, 0x0350
     808:	82 1b       	sub	r24, r18
     80a:	93 0b       	sbc	r25, r19
     80c:	90 93 72 03 	sts	0x0372, r25
     810:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[6] < 0) {
     814:	97 fd       	sbrc	r25, 7
     816:	34 c6       	rjmp	.+3176   	; 0x1480 <main+0x12c2>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
     818:	80 91 51 03 	lds	r24, 0x0351
     81c:	90 91 52 03 	lds	r25, 0x0352
     820:	20 91 53 03 	lds	r18, 0x0353
     824:	30 91 54 03 	lds	r19, 0x0354
     828:	82 1b       	sub	r24, r18
     82a:	93 0b       	sbc	r25, r19
     82c:	90 93 74 03 	sts	0x0374, r25
     830:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[7] < 0) {
     834:	97 fd       	sbrc	r25, 7
     836:	47 c6       	rjmp	.+3214   	; 0x14c6 <main+0x1308>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
     838:	80 91 55 03 	lds	r24, 0x0355
     83c:	90 91 56 03 	lds	r25, 0x0356
     840:	20 91 57 03 	lds	r18, 0x0357
     844:	30 91 58 03 	lds	r19, 0x0358
     848:	82 1b       	sub	r24, r18
     84a:	93 0b       	sbc	r25, r19
     84c:	90 93 76 03 	sts	0x0376, r25
     850:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[8] < 0) {
     854:	97 fd       	sbrc	r25, 7
     856:	32 c6       	rjmp	.+3172   	; 0x14bc <main+0x12fe>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
     858:	80 91 59 03 	lds	r24, 0x0359
     85c:	90 91 5a 03 	lds	r25, 0x035A
     860:	20 91 5b 03 	lds	r18, 0x035B
     864:	30 91 5c 03 	lds	r19, 0x035C
     868:	82 1b       	sub	r24, r18
     86a:	93 0b       	sbc	r25, r19
     86c:	90 93 78 03 	sts	0x0378, r25
     870:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[9] < 0) {
     874:	97 fd       	sbrc	r25, 7
     876:	1d c6       	rjmp	.+3130   	; 0x14b2 <main+0x12f4>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
     878:	80 91 5d 03 	lds	r24, 0x035D
     87c:	90 91 5e 03 	lds	r25, 0x035E
     880:	20 91 5f 03 	lds	r18, 0x035F
     884:	30 91 60 03 	lds	r19, 0x0360
     888:	82 1b       	sub	r24, r18
     88a:	93 0b       	sbc	r25, r19
     88c:	90 93 7a 03 	sts	0x037A, r25
     890:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[10] < 0) {
     894:	97 fd       	sbrc	r25, 7
     896:	08 c6       	rjmp	.+3088   	; 0x14a8 <main+0x12ea>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
     898:	80 91 61 03 	lds	r24, 0x0361
     89c:	90 91 62 03 	lds	r25, 0x0362
     8a0:	20 91 63 03 	lds	r18, 0x0363
     8a4:	30 91 64 03 	lds	r19, 0x0364
     8a8:	82 1b       	sub	r24, r18
     8aa:	93 0b       	sbc	r25, r19
     8ac:	90 93 7c 03 	sts	0x037C, r25
     8b0:	80 93 7b 03 	sts	0x037B, r24
				if(proximityResult[11] < 0) {
     8b4:	97 fd       	sbrc	r25, 7
     8b6:	17 c1       	rjmp	.+558    	; 0xae6 <main+0x928>
				if(proximityResult[11] < 0) {
					proximityResult[11] = 0;
				}

			}
			proxUpdated = 1;
     8b8:	10 93 cf 03 	sts	0x03CF, r17
     8bc:	b5 cc       	rjmp	.-1686   	; 0x228 <main+0x6a>
				cliffAvoidance();
			}

			update_pwm = 1;

		} else if(currentSelector == 1) {		// only orizzontal speed control
     8be:	21 30       	cpi	r18, 0x01	; 1
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <main+0x706>
     8c2:	9c c4       	rjmp	.+2360   	; 0x11fc <main+0x103e>
					OCR3B = 0;
				}

			}

		} else if(currentSelector == 2) {		// both speed control orizzontal and vertical
     8c4:	22 30       	cpi	r18, 0x02	; 2
     8c6:	09 f4       	brne	.+2      	; 0x8ca <main+0x70c>
     8c8:	49 c5       	rjmp	.+2706   	; 0x135c <main+0x119e>
			compute_right_vel = 0;
			right_vel_sum = 0;
		}
*/

		if(update_pwm) {
     8ca:	80 91 02 04 	lds	r24, 0x0402
     8ce:	88 23       	and	r24, r24
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <main+0x716>
     8d2:	9b cc       	rjmp	.-1738   	; 0x20a <main+0x4c>
     8d4:	03 cf       	rjmp	.-506    	; 0x6dc <main+0x51e>
					proximityResult[11] = 0;
				}

			} else {

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
     8d6:	80 91 35 03 	lds	r24, 0x0335
     8da:	90 91 36 03 	lds	r25, 0x0336
     8de:	20 91 37 03 	lds	r18, 0x0337
     8e2:	30 91 38 03 	lds	r19, 0x0338
     8e6:	82 1b       	sub	r24, r18
     8e8:	93 0b       	sbc	r25, r19
     8ea:	20 91 7d 03 	lds	r18, 0x037D
     8ee:	30 91 7e 03 	lds	r19, 0x037E
     8f2:	82 1b       	sub	r24, r18
     8f4:	93 0b       	sbc	r25, r19
     8f6:	90 93 66 03 	sts	0x0366, r25
     8fa:	80 93 65 03 	sts	0x0365, r24
				if(proximityResult[0] < 0) {
     8fe:	97 fd       	sbrc	r25, 7
     900:	14 c6       	rjmp	.+3112   	; 0x152a <main+0x136c>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
     902:	80 91 39 03 	lds	r24, 0x0339
     906:	90 91 3a 03 	lds	r25, 0x033A
     90a:	20 91 3b 03 	lds	r18, 0x033B
     90e:	30 91 3c 03 	lds	r19, 0x033C
     912:	82 1b       	sub	r24, r18
     914:	93 0b       	sbc	r25, r19
     916:	20 91 7f 03 	lds	r18, 0x037F
     91a:	30 91 80 03 	lds	r19, 0x0380
     91e:	82 1b       	sub	r24, r18
     920:	93 0b       	sbc	r25, r19
     922:	90 93 68 03 	sts	0x0368, r25
     926:	80 93 67 03 	sts	0x0367, r24
				if(proximityResult[1] < 0) {
     92a:	97 fd       	sbrc	r25, 7
     92c:	f9 c5       	rjmp	.+3058   	; 0x1520 <main+0x1362>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
     92e:	80 91 3d 03 	lds	r24, 0x033D
     932:	90 91 3e 03 	lds	r25, 0x033E
     936:	20 91 3f 03 	lds	r18, 0x033F
     93a:	30 91 40 03 	lds	r19, 0x0340
     93e:	82 1b       	sub	r24, r18
     940:	93 0b       	sbc	r25, r19
     942:	20 91 81 03 	lds	r18, 0x0381
     946:	30 91 82 03 	lds	r19, 0x0382
     94a:	82 1b       	sub	r24, r18
     94c:	93 0b       	sbc	r25, r19
     94e:	90 93 6a 03 	sts	0x036A, r25
     952:	80 93 69 03 	sts	0x0369, r24
				if(proximityResult[2] < 0) {
     956:	97 fd       	sbrc	r25, 7
     958:	de c5       	rjmp	.+3004   	; 0x1516 <main+0x1358>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
     95a:	80 91 41 03 	lds	r24, 0x0341
     95e:	90 91 42 03 	lds	r25, 0x0342
     962:	20 91 43 03 	lds	r18, 0x0343
     966:	30 91 44 03 	lds	r19, 0x0344
     96a:	82 1b       	sub	r24, r18
     96c:	93 0b       	sbc	r25, r19
     96e:	20 91 83 03 	lds	r18, 0x0383
     972:	30 91 84 03 	lds	r19, 0x0384
     976:	82 1b       	sub	r24, r18
     978:	93 0b       	sbc	r25, r19
     97a:	90 93 6c 03 	sts	0x036C, r25
     97e:	80 93 6b 03 	sts	0x036B, r24
				if(proximityResult[3] < 0) {
     982:	97 fd       	sbrc	r25, 7
     984:	c3 c5       	rjmp	.+2950   	; 0x150c <main+0x134e>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
     986:	80 91 45 03 	lds	r24, 0x0345
     98a:	90 91 46 03 	lds	r25, 0x0346
     98e:	20 91 47 03 	lds	r18, 0x0347
     992:	30 91 48 03 	lds	r19, 0x0348
     996:	82 1b       	sub	r24, r18
     998:	93 0b       	sbc	r25, r19
     99a:	20 91 85 03 	lds	r18, 0x0385
     99e:	30 91 86 03 	lds	r19, 0x0386
     9a2:	82 1b       	sub	r24, r18
     9a4:	93 0b       	sbc	r25, r19
     9a6:	90 93 6e 03 	sts	0x036E, r25
     9aa:	80 93 6d 03 	sts	0x036D, r24
				if(proximityResult[4] < 0) {
     9ae:	97 fd       	sbrc	r25, 7
     9b0:	a8 c5       	rjmp	.+2896   	; 0x1502 <main+0x1344>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
     9b2:	80 91 49 03 	lds	r24, 0x0349
     9b6:	90 91 4a 03 	lds	r25, 0x034A
     9ba:	20 91 4b 03 	lds	r18, 0x034B
     9be:	30 91 4c 03 	lds	r19, 0x034C
     9c2:	82 1b       	sub	r24, r18
     9c4:	93 0b       	sbc	r25, r19
     9c6:	20 91 87 03 	lds	r18, 0x0387
     9ca:	30 91 88 03 	lds	r19, 0x0388
     9ce:	82 1b       	sub	r24, r18
     9d0:	93 0b       	sbc	r25, r19
     9d2:	90 93 70 03 	sts	0x0370, r25
     9d6:	80 93 6f 03 	sts	0x036F, r24
				if(proximityResult[5] < 0) {
     9da:	97 fd       	sbrc	r25, 7
     9dc:	8d c5       	rjmp	.+2842   	; 0x14f8 <main+0x133a>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
     9de:	80 91 4d 03 	lds	r24, 0x034D
     9e2:	90 91 4e 03 	lds	r25, 0x034E
     9e6:	20 91 4f 03 	lds	r18, 0x034F
     9ea:	30 91 50 03 	lds	r19, 0x0350
     9ee:	82 1b       	sub	r24, r18
     9f0:	93 0b       	sbc	r25, r19
     9f2:	20 91 89 03 	lds	r18, 0x0389
     9f6:	30 91 8a 03 	lds	r19, 0x038A
     9fa:	82 1b       	sub	r24, r18
     9fc:	93 0b       	sbc	r25, r19
     9fe:	90 93 72 03 	sts	0x0372, r25
     a02:	80 93 71 03 	sts	0x0371, r24
				if(proximityResult[6] < 0) {
     a06:	97 fd       	sbrc	r25, 7
     a08:	72 c5       	rjmp	.+2788   	; 0x14ee <main+0x1330>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
     a0a:	80 91 51 03 	lds	r24, 0x0351
     a0e:	90 91 52 03 	lds	r25, 0x0352
     a12:	20 91 53 03 	lds	r18, 0x0353
     a16:	30 91 54 03 	lds	r19, 0x0354
     a1a:	82 1b       	sub	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	20 91 8b 03 	lds	r18, 0x038B
     a22:	30 91 8c 03 	lds	r19, 0x038C
     a26:	82 1b       	sub	r24, r18
     a28:	93 0b       	sbc	r25, r19
     a2a:	90 93 74 03 	sts	0x0374, r25
     a2e:	80 93 73 03 	sts	0x0373, r24
				if(proximityResult[7] < 0) {
     a32:	97 fd       	sbrc	r25, 7
     a34:	57 c5       	rjmp	.+2734   	; 0x14e4 <main+0x1326>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
     a36:	80 91 55 03 	lds	r24, 0x0355
     a3a:	90 91 56 03 	lds	r25, 0x0356
     a3e:	20 91 57 03 	lds	r18, 0x0357
     a42:	30 91 58 03 	lds	r19, 0x0358
     a46:	82 1b       	sub	r24, r18
     a48:	93 0b       	sbc	r25, r19
     a4a:	20 91 8d 03 	lds	r18, 0x038D
     a4e:	30 91 8e 03 	lds	r19, 0x038E
     a52:	82 1b       	sub	r24, r18
     a54:	93 0b       	sbc	r25, r19
     a56:	90 93 76 03 	sts	0x0376, r25
     a5a:	80 93 75 03 	sts	0x0375, r24
				if(proximityResult[8] < 0) {
     a5e:	97 fd       	sbrc	r25, 7
     a60:	3c c5       	rjmp	.+2680   	; 0x14da <main+0x131c>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
     a62:	80 91 59 03 	lds	r24, 0x0359
     a66:	90 91 5a 03 	lds	r25, 0x035A
     a6a:	20 91 5b 03 	lds	r18, 0x035B
     a6e:	30 91 5c 03 	lds	r19, 0x035C
     a72:	82 1b       	sub	r24, r18
     a74:	93 0b       	sbc	r25, r19
     a76:	20 91 8f 03 	lds	r18, 0x038F
     a7a:	30 91 90 03 	lds	r19, 0x0390
     a7e:	82 1b       	sub	r24, r18
     a80:	93 0b       	sbc	r25, r19
     a82:	90 93 78 03 	sts	0x0378, r25
     a86:	80 93 77 03 	sts	0x0377, r24
				if(proximityResult[9] < 0) {
     a8a:	97 fd       	sbrc	r25, 7
     a8c:	21 c5       	rjmp	.+2626   	; 0x14d0 <main+0x1312>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
     a8e:	80 91 5d 03 	lds	r24, 0x035D
     a92:	90 91 5e 03 	lds	r25, 0x035E
     a96:	20 91 5f 03 	lds	r18, 0x035F
     a9a:	30 91 60 03 	lds	r19, 0x0360
     a9e:	82 1b       	sub	r24, r18
     aa0:	93 0b       	sbc	r25, r19
     aa2:	20 91 91 03 	lds	r18, 0x0391
     aa6:	30 91 92 03 	lds	r19, 0x0392
     aaa:	82 1b       	sub	r24, r18
     aac:	93 0b       	sbc	r25, r19
     aae:	90 93 7a 03 	sts	0x037A, r25
     ab2:	80 93 79 03 	sts	0x0379, r24
				if(proximityResult[10] < 0) {
     ab6:	97 fd       	sbrc	r25, 7
     ab8:	d4 c4       	rjmp	.+2472   	; 0x1462 <main+0x12a4>
					proximityResult[10] = 0;
				}

				proximityResult[11] = proximityValue[22] - proximityValue[23] - proximityOffset[11];	// ambient - (ambient+reflected) - offset
     aba:	80 91 61 03 	lds	r24, 0x0361
     abe:	90 91 62 03 	lds	r25, 0x0362
     ac2:	20 91 63 03 	lds	r18, 0x0363
     ac6:	30 91 64 03 	lds	r19, 0x0364
     aca:	82 1b       	sub	r24, r18
     acc:	93 0b       	sbc	r25, r19
     ace:	20 91 93 03 	lds	r18, 0x0393
     ad2:	30 91 94 03 	lds	r19, 0x0394
     ad6:	82 1b       	sub	r24, r18
     ad8:	93 0b       	sbc	r25, r19
     ada:	90 93 7c 03 	sts	0x037C, r25
     ade:	80 93 7b 03 	sts	0x037B, r24
				if(proximityResult[11] < 0) {
     ae2:	97 ff       	sbrs	r25, 7
     ae4:	e9 ce       	rjmp	.-558    	; 0x8b8 <main+0x6fa>
					proximityResult[11] = 0;
     ae6:	10 92 7c 03 	sts	0x037C, r1
     aea:	10 92 7b 03 	sts	0x037B, r1
     aee:	e4 ce       	rjmp	.-568    	; 0x8b8 <main+0x6fa>

//PORTB &= ~(1 << 7);
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	60 e7       	ldi	r22, 0x70	; 112
     af4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <mirf_config_register>

			mirf_get_data(rfData);
     af8:	86 e5       	ldi	r24, 0x56	; 86
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <mirf_get_data>
			flush_rx_fifo();
     b00:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <flush_rx_fifo>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     b04:	40 91 56 04 	lds	r20, 0x0456
     b08:	44 23       	and	r20, r20
     b0a:	69 f4       	brne	.+26     	; 0xb26 <main+0x968>
     b0c:	80 91 57 04 	lds	r24, 0x0457
     b10:	88 23       	and	r24, r24
     b12:	49 f4       	brne	.+18     	; 0xb26 <main+0x968>
     b14:	80 91 58 04 	lds	r24, 0x0458
     b18:	88 23       	and	r24, r24
     b1a:	29 f4       	brne	.+10     	; 0xb26 <main+0x968>
     b1c:	80 91 59 04 	lds	r24, 0x0459
     b20:	88 30       	cpi	r24, 0x08	; 8
     b22:	09 f4       	brne	.+2      	; 0xb26 <main+0x968>
     b24:	c3 c7       	rjmp	.+3974   	; 0x1aac <main+0x18ee>
     b26:	60 91 5a 04 	lds	r22, 0x045A
     b2a:	50 91 5b 04 	lds	r21, 0x045B

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     b2e:	26 2f       	mov	r18, r22
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	2f 77       	andi	r18, 0x7F	; 127
     b34:	30 70       	andi	r19, 0x00	; 0
     b36:	30 93 06 04 	sts	0x0406, r19
     b3a:	20 93 05 04 	sts	0x0405, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     b3e:	85 2f       	mov	r24, r21
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	90 70       	andi	r25, 0x00	; 0
     b46:	90 93 04 04 	sts	0x0404, r25
     b4a:	80 93 03 04 	sts	0x0403, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
     b4e:	67 fd       	sbrc	r22, 7
     b50:	33 c5       	rjmp	.+2662   	; 0x15b8 <main+0x13fa>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	22 0f       	add	r18, r18
     b58:	33 1f       	adc	r19, r19
     b5a:	30 95       	com	r19
     b5c:	21 95       	neg	r18
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	30 93 ed 03 	sts	0x03ED, r19
     b64:	20 93 ec 03 	sts	0x03EC, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
     b68:	57 fd       	sbrc	r21, 7
     b6a:	1d c5       	rjmp	.+2618   	; 0x15a6 <main+0x13e8>
				pwm_left_desired = speedl<<2;
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	90 95       	com	r25
     b76:	81 95       	neg	r24
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	90 93 ef 03 	sts	0x03EF, r25
     b7e:	80 93 ee 03 	sts	0x03EE, r24
			}

			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     b82:	a2 e0       	ldi	r26, 0x02	; 2
     b84:	21 30       	cpi	r18, 0x01	; 1
     b86:	3a 07       	cpc	r19, r26
     b88:	44 f0       	brlt	.+16     	; 0xb9a <main+0x9dc>
     b8a:	e0 e0       	ldi	r30, 0x00	; 0
     b8c:	f2 e0       	ldi	r31, 0x02	; 2
     b8e:	f0 93 ed 03 	sts	0x03ED, r31
     b92:	e0 93 ec 03 	sts	0x03EC, r30
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	32 e0       	ldi	r19, 0x02	; 2
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     b9a:	f2 e0       	ldi	r31, 0x02	; 2
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	9f 07       	cpc	r25, r31
     ba0:	34 f0       	brlt	.+12     	; 0xbae <main+0x9f0>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	90 93 ef 03 	sts	0x03EF, r25
     baa:	80 93 ee 03 	sts	0x03EE, r24
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     bae:	ae ef       	ldi	r26, 0xFE	; 254
     bb0:	20 30       	cpi	r18, 0x00	; 0
     bb2:	3a 07       	cpc	r19, r26
     bb4:	34 f4       	brge	.+12     	; 0xbc2 <main+0xa04>
     bb6:	e0 e0       	ldi	r30, 0x00	; 0
     bb8:	fe ef       	ldi	r31, 0xFE	; 254
     bba:	f0 93 ed 03 	sts	0x03ED, r31
     bbe:	e0 93 ec 03 	sts	0x03EC, r30
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     bc2:	fe ef       	ldi	r31, 0xFE	; 254
     bc4:	80 30       	cpi	r24, 0x00	; 0
     bc6:	9f 07       	cpc	r25, r31
     bc8:	34 f4       	brge	.+12     	; 0xbd6 <main+0xa18>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3e ef       	ldi	r19, 0xFE	; 254
     bce:	30 93 ef 03 	sts	0x03EF, r19
     bd2:	20 93 ee 03 	sts	0x03EE, r18


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	50 93 4f 04 	sts	0x044F, r21
     bdc:	40 93 4e 04 	sts	0x044E, r20
     be0:	20 91 57 04 	lds	r18, 0x0457
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	30 93 51 04 	sts	0x0451, r19
     bea:	20 93 50 04 	sts	0x0450, r18
     bee:	e0 91 58 04 	lds	r30, 0x0458
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	f0 93 53 04 	sts	0x0453, r31
     bf8:	e0 93 52 04 	sts	0x0452, r30
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     bfc:	94 2f       	mov	r25, r20
     bfe:	88 27       	eor	r24, r24
     c00:	84 1b       	sub	r24, r20
     c02:	95 0b       	sbc	r25, r21
     c04:	64 e6       	ldi	r22, 0x64	; 100
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__udivmodhi4>
     c0c:	c6 2e       	mov	r12, r22
     c0e:	c0 94       	com	r12
     c10:	c0 92 14 02 	sts	0x0214, r12
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     c14:	52 2f       	mov	r21, r18
     c16:	44 27       	eor	r20, r20
     c18:	42 1b       	sub	r20, r18
     c1a:	53 0b       	sbc	r21, r19
     c1c:	ca 01       	movw	r24, r20
     c1e:	64 e6       	ldi	r22, 0x64	; 100
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__udivmodhi4>
     c26:	60 95       	com	r22
     c28:	60 93 16 02 	sts	0x0216, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     c2c:	3e 2f       	mov	r19, r30
     c2e:	22 27       	eor	r18, r18
     c30:	2e 1b       	sub	r18, r30
     c32:	3f 0b       	sbc	r19, r31
     c34:	c9 01       	movw	r24, r18
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <__udivmodhi4>
     c3e:	60 95       	com	r22
     c40:	60 93 15 02 	sts	0x0215, r22
			updateRedLed(pwm_red);
     c44:	8c 2d       	mov	r24, r12
     c46:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <updateRedLed>
			updateGreenLed(pwm_green);
     c4a:	80 91 15 02 	lds	r24, 0x0215
     c4e:	0e 94 67 1f 	call	0x3ece	; 0x3ece <updateGreenLed>
			updateBlueLed(pwm_blue);
     c52:	80 91 16 02 	lds	r24, 0x0216
     c56:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     c5a:	80 91 59 04 	lds	r24, 0x0459
     c5e:	80 ff       	sbrs	r24, 0
     c60:	c5 c2       	rjmp	.+1418   	; 0x11ec <main+0x102e>
				LED_IR1_LOW;
     c62:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     c64:	81 ff       	sbrs	r24, 1
     c66:	c0 c2       	rjmp	.+1408   	; 0x11e8 <main+0x102a>
				LED_IR2_LOW;
     c68:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     c6a:	98 2f       	mov	r25, r24
     c6c:	82 ff       	sbrs	r24, 2
     c6e:	9d c2       	rjmp	.+1338   	; 0x11aa <main+0xfec>
				irEnabled = 1;
     c70:	10 93 19 02 	sts	0x0219, r17
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     c74:	94 fd       	sbrc	r25, 4
     c76:	9d c2       	rjmp	.+1338   	; 0x11b2 <main+0xff4>
				updateRedLed(pwm_red);
				updateGreenLed(pwm_green);
				updateBlueLed(pwm_blue);
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     c78:	96 ff       	sbrs	r25, 6
     c7a:	94 c2       	rjmp	.+1320   	; 0x11a4 <main+0xfe6>
				obstacleAvoidanceEnabled = 1;
     c7c:	10 93 30 04 	sts	0x0430, r17
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     c80:	88 0f       	add	r24, r24
     c82:	88 0b       	sbc	r24, r24
     c84:	81 23       	and	r24, r17
     c86:	80 93 35 04 	sts	0x0435, r24
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
     c8a:	80 91 5c 04 	lds	r24, 0x045C
     c8e:	80 ff       	sbrs	r24, 0
     c90:	83 c2       	rjmp	.+1286   	; 0x1198 <main+0xfda>
					GRREEN_LED0_ON;
     c92:	80 91 0b 01 	lds	r24, 0x010B
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
     c9c:	80 91 5c 04 	lds	r24, 0x045C
     ca0:	81 ff       	sbrs	r24, 1
     ca2:	74 c2       	rjmp	.+1256   	; 0x118c <main+0xfce>
					GRREEN_LED1_ON;
     ca4:	80 91 0b 01 	lds	r24, 0x010B
     ca8:	8d 7f       	andi	r24, 0xFD	; 253
     caa:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
     cae:	80 91 5c 04 	lds	r24, 0x045C
     cb2:	82 ff       	sbrs	r24, 2
     cb4:	65 c2       	rjmp	.+1226   	; 0x1180 <main+0xfc2>
					GRREEN_LED2_ON;
     cb6:	80 91 0b 01 	lds	r24, 0x010B
     cba:	8b 7f       	andi	r24, 0xFB	; 251
     cbc:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
     cc0:	80 91 5c 04 	lds	r24, 0x045C
     cc4:	83 ff       	sbrs	r24, 3
     cc6:	5a c2       	rjmp	.+1204   	; 0x117c <main+0xfbe>
					GRREEN_LED3_ON;
     cc8:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GRREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
     cca:	80 91 5c 04 	lds	r24, 0x045C
     cce:	84 ff       	sbrs	r24, 4
     cd0:	4f c2       	rjmp	.+1182   	; 0x1170 <main+0xfb2>
					GRREEN_LED4_ON;
     cd2:	80 91 0b 01 	lds	r24, 0x010B
     cd6:	8f 7e       	andi	r24, 0xEF	; 239
     cd8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
     cdc:	80 91 5c 04 	lds	r24, 0x045C
     ce0:	85 ff       	sbrs	r24, 5
     ce2:	40 c2       	rjmp	.+1152   	; 0x1164 <main+0xfa6>
					GRREEN_LED5_ON;
     ce4:	80 91 0b 01 	lds	r24, 0x010B
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
     cee:	80 91 5c 04 	lds	r24, 0x045C
     cf2:	86 ff       	sbrs	r24, 6
     cf4:	e3 c1       	rjmp	.+966    	; 0x10bc <main+0xefe>
					GRREEN_LED6_ON;
     cf6:	80 91 0b 01 	lds	r24, 0x010B
     cfa:	8f 7b       	andi	r24, 0xBF	; 191
     cfc:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GRREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
     d00:	80 91 5c 04 	lds	r24, 0x045C
     d04:	87 fd       	sbrc	r24, 7
     d06:	e3 c1       	rjmp	.+966    	; 0x10ce <main+0xf10>
					GRREEN_LED7_ON;
				} else {
					GRREEN_LED7_OFF;
     d08:	80 91 0b 01 	lds	r24, 0x010B
     d0c:	80 68       	ori	r24, 0x80	; 128
     d0e:	80 93 0b 01 	sts	0x010B, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
     d12:	80 91 13 02 	lds	r24, 0x0213
     d16:	80 93 3e 04 	sts	0x043E, r24

			switch(packetId) {
     d1a:	84 30       	cpi	r24, 0x04	; 4
     d1c:	09 f4       	brne	.+2      	; 0xd20 <main+0xb62>
     d1e:	e3 c1       	rjmp	.+966    	; 0x10e6 <main+0xf28>
     d20:	85 30       	cpi	r24, 0x05	; 5
     d22:	08 f0       	brcs	.+2      	; 0xd26 <main+0xb68>
     d24:	c3 c2       	rjmp	.+1414   	; 0x12ac <main+0x10ee>
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	09 f0       	breq	.+2      	; 0xd2c <main+0xb6e>
     d2a:	65 c0       	rjmp	.+202    	; 0xdf6 <main+0xc38>
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     d2c:	90 91 65 03 	lds	r25, 0x0365
     d30:	80 91 66 03 	lds	r24, 0x0366
     d34:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[2] = proximityResult[0]>>8;
     d38:	80 93 40 04 	sts	0x0440, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     d3c:	90 91 67 03 	lds	r25, 0x0367
     d40:	80 91 68 03 	lds	r24, 0x0368
     d44:	90 93 41 04 	sts	0x0441, r25
					ackPayload[4] = proximityResult[1]>>8;
     d48:	80 93 42 04 	sts	0x0442, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     d4c:	90 91 69 03 	lds	r25, 0x0369
     d50:	80 91 6a 03 	lds	r24, 0x036A
     d54:	90 93 43 04 	sts	0x0443, r25
					ackPayload[6] = proximityResult[2]>>8;
     d58:	80 93 44 04 	sts	0x0444, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     d5c:	90 91 6b 03 	lds	r25, 0x036B
     d60:	80 91 6c 03 	lds	r24, 0x036C
     d64:	90 93 45 04 	sts	0x0445, r25
					ackPayload[8] = proximityResult[3]>>8;
     d68:	80 93 46 04 	sts	0x0446, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     d6c:	90 91 6f 03 	lds	r25, 0x036F
     d70:	80 91 70 03 	lds	r24, 0x0370
     d74:	90 93 47 04 	sts	0x0447, r25
					ackPayload[10] = proximityResult[5]>>8;
     d78:	80 93 48 04 	sts	0x0448, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     d7c:	90 91 71 03 	lds	r25, 0x0371
     d80:	80 91 72 03 	lds	r24, 0x0372
     d84:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = proximityResult[6]>>8;
     d88:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     d8c:	90 91 73 03 	lds	r25, 0x0373
     d90:	80 91 74 03 	lds	r24, 0x0374
     d94:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = proximityResult[7]>>8;
     d98:	80 93 4c 04 	sts	0x044C, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     d9c:	30 91 03 01 	lds	r19, 0x0103
     da0:	80 91 03 01 	lds	r24, 0x0103
     da4:	20 91 03 01 	lds	r18, 0x0103
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	80 72       	andi	r24, 0x20	; 32
     dac:	90 70       	andi	r25, 0x00	; 0
     dae:	95 95       	asr	r25
     db0:	87 95       	ror	r24
     db2:	95 95       	asr	r25
     db4:	87 95       	ror	r24
     db6:	95 95       	asr	r25
     db8:	87 95       	ror	r24
     dba:	95 95       	asr	r25
     dbc:	87 95       	ror	r24
     dbe:	95 95       	asr	r25
     dc0:	87 95       	ror	r24
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	22 1f       	adc	r18, r18
     dc8:	22 27       	eor	r18, r18
     dca:	22 1f       	adc	r18, r18
     dcc:	22 0f       	add	r18, r18
     dce:	22 0f       	add	r18, r18
     dd0:	28 2b       	or	r18, r24
     dd2:	83 2f       	mov	r24, r19
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	80 71       	andi	r24, 0x10	; 16
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
     dde:	95 95       	asr	r25
     de0:	87 95       	ror	r24
     de2:	95 95       	asr	r25
     de4:	87 95       	ror	r24
     de6:	95 95       	asr	r25
     de8:	87 95       	ror	r24
     dea:	28 2b       	or	r18, r24
     dec:	20 93 4d 04 	sts	0x044D, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     df0:	34 e0       	ldi	r19, 0x04	; 4
     df2:	30 93 13 02 	sts	0x0213, r19
					break;


			}

			writeAckPayload(ackPayload, 16);
     df6:	8e e3       	ldi	r24, 0x3E	; 62
     df8:	94 e0       	ldi	r25, 0x04	; 4
     dfa:	60 e1       	ldi	r22, 0x10	; 16
     dfc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <writeAckPayload>
     e00:	16 cc       	rjmp	.-2004   	; 0x62e <main+0x470>

		}

		if(irEnabled) {

			ir_move = e_get_data();
     e02:	0e 94 f7 10 	call	0x21ee	; 0x21ee <e_get_data>
     e06:	80 93 09 04 	sts	0x0409, r24

			if(command_received) {
     e0a:	90 91 0a 04 	lds	r25, 0x040A
     e0e:	99 23       	and	r25, r25
     e10:	09 f4       	brne	.+2      	; 0xe14 <main+0xc56>
     e12:	4f c1       	rjmp	.+670    	; 0x10b2 <main+0xef4>

				command_received = 0;
     e14:	10 92 0a 04 	sts	0x040A, r1

				switch(ir_move) {
     e18:	e8 2f       	mov	r30, r24
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	e5 33       	cpi	r30, 0x35	; 53
     e1e:	f1 05       	cpc	r31, r1
     e20:	08 f4       	brcc	.+2      	; 0xe24 <main+0xc66>
     e22:	d3 c3       	rjmp	.+1958   	; 0x15ca <main+0x140c>
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
								cliffAvoidanceEnabled = 0;
     e24:	20 91 ec 03 	lds	r18, 0x03EC
     e28:	30 91 ed 03 	lds	r19, 0x03ED
     e2c:	80 91 ee 03 	lds	r24, 0x03EE
     e30:	90 91 ef 03 	lds	r25, 0x03EF
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
     e34:	37 fd       	sbrc	r19, 7
     e36:	e4 c3       	rjmp	.+1992   	; 0x1600 <main+0x1442>
					speedr = pwm_right_desired >> 2;
     e38:	35 95       	asr	r19
     e3a:	27 95       	ror	r18
     e3c:	35 95       	asr	r19
     e3e:	27 95       	ror	r18
				} else {
					speedr = (-pwm_right_desired) >> 2;
     e40:	30 93 06 04 	sts	0x0406, r19
     e44:	20 93 05 04 	sts	0x0405, r18
				}
				if(pwm_left_desired >= 0) {
     e48:	97 fd       	sbrc	r25, 7
     e4a:	28 c1       	rjmp	.+592    	; 0x109c <main+0xede>
					speedl = pwm_left_desired >> 2;
     e4c:	95 95       	asr	r25
     e4e:	87 95       	ror	r24
     e50:	95 95       	asr	r25
     e52:	87 95       	ror	r24
     e54:	90 93 04 04 	sts	0x0404, r25
     e58:	80 93 03 04 	sts	0x0403, r24
     e5c:	20 91 2a 04 	lds	r18, 0x042A
     e60:	30 91 2b 04 	lds	r19, 0x042B
     e64:	d7 cb       	rjmp	.-2130   	; 0x614 <main+0x456>

		} else if(calibrationCycle == CALIBRATION_CYCLES) {

			for (i=0;i<12;i++) {
				//proximityOffset[i]=(unsigned int)((float)proximitySum[i]/(float)calibrationCycle);
				proximityOffset[i] = proximitySum[i]>>4;
     e66:	80 91 9f 03 	lds	r24, 0x039F
     e6a:	90 91 a0 03 	lds	r25, 0x03A0
     e6e:	a0 91 a1 03 	lds	r26, 0x03A1
     e72:	b0 91 a2 03 	lds	r27, 0x03A2
     e76:	64 e0       	ldi	r22, 0x04	; 4
     e78:	b6 95       	lsr	r27
     e7a:	a7 95       	ror	r26
     e7c:	97 95       	ror	r25
     e7e:	87 95       	ror	r24
     e80:	6a 95       	dec	r22
     e82:	d1 f7       	brne	.-12     	; 0xe78 <main+0xcba>
     e84:	90 93 7e 03 	sts	0x037E, r25
     e88:	80 93 7d 03 	sts	0x037D, r24
     e8c:	80 91 a3 03 	lds	r24, 0x03A3
     e90:	90 91 a4 03 	lds	r25, 0x03A4
     e94:	a0 91 a5 03 	lds	r26, 0x03A5
     e98:	b0 91 a6 03 	lds	r27, 0x03A6
     e9c:	54 e0       	ldi	r21, 0x04	; 4
     e9e:	b6 95       	lsr	r27
     ea0:	a7 95       	ror	r26
     ea2:	97 95       	ror	r25
     ea4:	87 95       	ror	r24
     ea6:	5a 95       	dec	r21
     ea8:	d1 f7       	brne	.-12     	; 0xe9e <main+0xce0>
     eaa:	90 93 80 03 	sts	0x0380, r25
     eae:	80 93 7f 03 	sts	0x037F, r24
     eb2:	80 91 a7 03 	lds	r24, 0x03A7
     eb6:	90 91 a8 03 	lds	r25, 0x03A8
     eba:	a0 91 a9 03 	lds	r26, 0x03A9
     ebe:	b0 91 aa 03 	lds	r27, 0x03AA
     ec2:	44 e0       	ldi	r20, 0x04	; 4
     ec4:	b6 95       	lsr	r27
     ec6:	a7 95       	ror	r26
     ec8:	97 95       	ror	r25
     eca:	87 95       	ror	r24
     ecc:	4a 95       	dec	r20
     ece:	d1 f7       	brne	.-12     	; 0xec4 <main+0xd06>
     ed0:	90 93 82 03 	sts	0x0382, r25
     ed4:	80 93 81 03 	sts	0x0381, r24
     ed8:	80 91 ab 03 	lds	r24, 0x03AB
     edc:	90 91 ac 03 	lds	r25, 0x03AC
     ee0:	a0 91 ad 03 	lds	r26, 0x03AD
     ee4:	b0 91 ae 03 	lds	r27, 0x03AE
     ee8:	f4 e0       	ldi	r31, 0x04	; 4
     eea:	b6 95       	lsr	r27
     eec:	a7 95       	ror	r26
     eee:	97 95       	ror	r25
     ef0:	87 95       	ror	r24
     ef2:	fa 95       	dec	r31
     ef4:	d1 f7       	brne	.-12     	; 0xeea <main+0xd2c>
     ef6:	90 93 84 03 	sts	0x0384, r25
     efa:	80 93 83 03 	sts	0x0383, r24
     efe:	80 91 af 03 	lds	r24, 0x03AF
     f02:	90 91 b0 03 	lds	r25, 0x03B0
     f06:	a0 91 b1 03 	lds	r26, 0x03B1
     f0a:	b0 91 b2 03 	lds	r27, 0x03B2
     f0e:	e4 e0       	ldi	r30, 0x04	; 4
     f10:	b6 95       	lsr	r27
     f12:	a7 95       	ror	r26
     f14:	97 95       	ror	r25
     f16:	87 95       	ror	r24
     f18:	ea 95       	dec	r30
     f1a:	d1 f7       	brne	.-12     	; 0xf10 <main+0xd52>
     f1c:	90 93 86 03 	sts	0x0386, r25
     f20:	80 93 85 03 	sts	0x0385, r24
     f24:	80 91 b3 03 	lds	r24, 0x03B3
     f28:	90 91 b4 03 	lds	r25, 0x03B4
     f2c:	a0 91 b5 03 	lds	r26, 0x03B5
     f30:	b0 91 b6 03 	lds	r27, 0x03B6
     f34:	74 e0       	ldi	r23, 0x04	; 4
     f36:	b6 95       	lsr	r27
     f38:	a7 95       	ror	r26
     f3a:	97 95       	ror	r25
     f3c:	87 95       	ror	r24
     f3e:	7a 95       	dec	r23
     f40:	d1 f7       	brne	.-12     	; 0xf36 <main+0xd78>
     f42:	90 93 88 03 	sts	0x0388, r25
     f46:	80 93 87 03 	sts	0x0387, r24
     f4a:	80 91 b7 03 	lds	r24, 0x03B7
     f4e:	90 91 b8 03 	lds	r25, 0x03B8
     f52:	a0 91 b9 03 	lds	r26, 0x03B9
     f56:	b0 91 ba 03 	lds	r27, 0x03BA
     f5a:	64 e0       	ldi	r22, 0x04	; 4
     f5c:	b6 95       	lsr	r27
     f5e:	a7 95       	ror	r26
     f60:	97 95       	ror	r25
     f62:	87 95       	ror	r24
     f64:	6a 95       	dec	r22
     f66:	d1 f7       	brne	.-12     	; 0xf5c <main+0xd9e>
     f68:	90 93 8a 03 	sts	0x038A, r25
     f6c:	80 93 89 03 	sts	0x0389, r24
     f70:	80 91 bb 03 	lds	r24, 0x03BB
     f74:	90 91 bc 03 	lds	r25, 0x03BC
     f78:	a0 91 bd 03 	lds	r26, 0x03BD
     f7c:	b0 91 be 03 	lds	r27, 0x03BE
     f80:	54 e0       	ldi	r21, 0x04	; 4
     f82:	b6 95       	lsr	r27
     f84:	a7 95       	ror	r26
     f86:	97 95       	ror	r25
     f88:	87 95       	ror	r24
     f8a:	5a 95       	dec	r21
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <main+0xdc4>
     f8e:	90 93 8c 03 	sts	0x038C, r25
     f92:	80 93 8b 03 	sts	0x038B, r24
     f96:	80 91 bf 03 	lds	r24, 0x03BF
     f9a:	90 91 c0 03 	lds	r25, 0x03C0
     f9e:	a0 91 c1 03 	lds	r26, 0x03C1
     fa2:	b0 91 c2 03 	lds	r27, 0x03C2
     fa6:	44 e0       	ldi	r20, 0x04	; 4
     fa8:	b6 95       	lsr	r27
     faa:	a7 95       	ror	r26
     fac:	97 95       	ror	r25
     fae:	87 95       	ror	r24
     fb0:	4a 95       	dec	r20
     fb2:	d1 f7       	brne	.-12     	; 0xfa8 <main+0xdea>
     fb4:	90 93 8e 03 	sts	0x038E, r25
     fb8:	80 93 8d 03 	sts	0x038D, r24
     fbc:	80 91 c3 03 	lds	r24, 0x03C3
     fc0:	90 91 c4 03 	lds	r25, 0x03C4
     fc4:	a0 91 c5 03 	lds	r26, 0x03C5
     fc8:	b0 91 c6 03 	lds	r27, 0x03C6
     fcc:	f4 e0       	ldi	r31, 0x04	; 4
     fce:	b6 95       	lsr	r27
     fd0:	a7 95       	ror	r26
     fd2:	97 95       	ror	r25
     fd4:	87 95       	ror	r24
     fd6:	fa 95       	dec	r31
     fd8:	d1 f7       	brne	.-12     	; 0xfce <main+0xe10>
     fda:	90 93 90 03 	sts	0x0390, r25
     fde:	80 93 8f 03 	sts	0x038F, r24
     fe2:	80 91 c7 03 	lds	r24, 0x03C7
     fe6:	90 91 c8 03 	lds	r25, 0x03C8
     fea:	a0 91 c9 03 	lds	r26, 0x03C9
     fee:	b0 91 ca 03 	lds	r27, 0x03CA
     ff2:	e4 e0       	ldi	r30, 0x04	; 4
     ff4:	b6 95       	lsr	r27
     ff6:	a7 95       	ror	r26
     ff8:	97 95       	ror	r25
     ffa:	87 95       	ror	r24
     ffc:	ea 95       	dec	r30
     ffe:	d1 f7       	brne	.-12     	; 0xff4 <main+0xe36>
    1000:	90 93 92 03 	sts	0x0392, r25
    1004:	80 93 91 03 	sts	0x0391, r24
    1008:	80 91 cb 03 	lds	r24, 0x03CB
    100c:	90 91 cc 03 	lds	r25, 0x03CC
    1010:	a0 91 cd 03 	lds	r26, 0x03CD
    1014:	b0 91 ce 03 	lds	r27, 0x03CE
    1018:	74 e0       	ldi	r23, 0x04	; 4
    101a:	b6 95       	lsr	r27
    101c:	a7 95       	ror	r26
    101e:	97 95       	ror	r25
    1020:	87 95       	ror	r24
    1022:	7a 95       	dec	r23
    1024:	d1 f7       	brne	.-12     	; 0x101a <main+0xe5c>
    1026:	90 93 94 03 	sts	0x0394, r25
    102a:	80 93 93 03 	sts	0x0393, r24
			}

			accOffsetX = accOffsetXSum>>4;
    102e:	80 91 22 04 	lds	r24, 0x0422
    1032:	90 91 23 04 	lds	r25, 0x0423
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	95 95       	asr	r25
    103c:	87 95       	ror	r24
    103e:	95 95       	asr	r25
    1040:	87 95       	ror	r24
    1042:	95 95       	asr	r25
    1044:	87 95       	ror	r24
    1046:	90 93 1b 04 	sts	0x041B, r25
    104a:	80 93 1a 04 	sts	0x041A, r24
			accOffsetY = accOffsetYSum>>4;
    104e:	80 91 24 04 	lds	r24, 0x0424
    1052:	90 91 25 04 	lds	r25, 0x0425
    1056:	95 95       	asr	r25
    1058:	87 95       	ror	r24
    105a:	95 95       	asr	r25
    105c:	87 95       	ror	r24
    105e:	95 95       	asr	r25
    1060:	87 95       	ror	r24
    1062:	95 95       	asr	r25
    1064:	87 95       	ror	r24
    1066:	90 93 1d 04 	sts	0x041D, r25
    106a:	80 93 1c 04 	sts	0x041C, r24
			accOffsetZ = accOffsetZSum>>4;
    106e:	80 91 26 04 	lds	r24, 0x0426
    1072:	90 91 27 04 	lds	r25, 0x0427
    1076:	95 95       	asr	r25
    1078:	87 95       	ror	r24
    107a:	95 95       	asr	r25
    107c:	87 95       	ror	r24
    107e:	95 95       	asr	r25
    1080:	87 95       	ror	r24
    1082:	95 95       	asr	r25
    1084:	87 95       	ror	r24
    1086:	90 93 1f 04 	sts	0x041F, r25
    108a:	80 93 1e 04 	sts	0x041E, r24

			startCalibration = 0;
    108e:	10 92 2d 04 	sts	0x042D, r1
			calibrationCycle = 0;
    1092:	10 92 2f 04 	sts	0x042F, r1
    1096:	10 92 2e 04 	sts	0x042E, r1
    109a:	b7 ca       	rjmp	.-2706   	; 0x60a <main+0x44c>
					speedr = (-pwm_right_desired) >> 2;
				}
				if(pwm_left_desired >= 0) {
					speedl = pwm_left_desired >> 2;
				} else {
					speedl = (-pwm_left_desired) >> 2;
    109c:	90 95       	com	r25
    109e:	81 95       	neg	r24
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	95 95       	asr	r25
    10a4:	87 95       	ror	r24
    10a6:	95 95       	asr	r25
    10a8:	87 95       	ror	r24
    10aa:	90 93 04 04 	sts	0x0404, r25
    10ae:	80 93 03 04 	sts	0x0403, r24
    10b2:	20 91 2a 04 	lds	r18, 0x042A
    10b6:	30 91 2b 04 	lds	r19, 0x042B
    10ba:	ac ca       	rjmp	.-2728   	; 0x614 <main+0x456>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GRREEN_LED6_ON;
				} else {
					GRREEN_LED6_OFF;
    10bc:	80 91 0b 01 	lds	r24, 0x010B
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	80 93 0b 01 	sts	0x010B, r24
				}

				if(bit_is_set(rfData[6], 7) ) {
    10c6:	80 91 5c 04 	lds	r24, 0x045C
    10ca:	87 ff       	sbrs	r24, 7
    10cc:	1d ce       	rjmp	.-966    	; 0xd08 <main+0xb4a>
					GRREEN_LED7_ON;
    10ce:	80 91 0b 01 	lds	r24, 0x010B
    10d2:	8f 77       	andi	r24, 0x7F	; 127
    10d4:	80 93 0b 01 	sts	0x010B, r24
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    10d8:	80 91 13 02 	lds	r24, 0x0213
    10dc:	80 93 3e 04 	sts	0x043E, r24

			switch(packetId) {
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <main+0xf28>
    10e4:	1d ce       	rjmp	.-966    	; 0xd20 <main+0xb62>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    10e6:	90 91 6d 03 	lds	r25, 0x036D
    10ea:	80 91 6e 03 	lds	r24, 0x036E
    10ee:	90 93 3f 04 	sts	0x043F, r25
					ackPayload[2] = proximityResult[4]>>8;
    10f2:	80 93 40 04 	sts	0x0440, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    10f6:	90 91 75 03 	lds	r25, 0x0375
    10fa:	80 91 76 03 	lds	r24, 0x0376
    10fe:	90 93 41 04 	sts	0x0441, r25
					ackPayload[4] = proximityResult[8]>>8;
    1102:	80 93 42 04 	sts	0x0442, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    1106:	90 91 77 03 	lds	r25, 0x0377
    110a:	80 91 78 03 	lds	r24, 0x0378
    110e:	90 93 43 04 	sts	0x0443, r25
					ackPayload[6] = proximityResult[9]>>8;
    1112:	80 93 44 04 	sts	0x0444, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    1116:	90 91 79 03 	lds	r25, 0x0379
    111a:	80 91 7a 03 	lds	r24, 0x037A
    111e:	90 93 45 04 	sts	0x0445, r25
					ackPayload[8] = proximityResult[10]>>8;
    1122:	80 93 46 04 	sts	0x0446, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    1126:	90 91 7b 03 	lds	r25, 0x037B
    112a:	80 91 7c 03 	lds	r24, 0x037C
    112e:	90 93 47 04 	sts	0x0447, r25
					ackPayload[10] = proximityResult[11]>>8;
    1132:	80 93 48 04 	sts	0x0448, r24
					ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    1136:	90 91 0e 04 	lds	r25, 0x040E
    113a:	80 91 0f 04 	lds	r24, 0x040F
    113e:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = accX>>8;
    1142:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = accY&0xFF;
    1146:	90 91 10 04 	lds	r25, 0x0410
    114a:	80 91 11 04 	lds	r24, 0x0411
    114e:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = accY>>8;
    1152:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = ir_move;
    1156:	80 91 09 04 	lds	r24, 0x0409
    115a:	80 93 4d 04 	sts	0x044D, r24
					packetId = 5;
    115e:	00 93 13 02 	sts	0x0213, r16
					break;
    1162:	49 ce       	rjmp	.-878    	; 0xdf6 <main+0xc38>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GRREEN_LED5_ON;
				} else {
					GRREEN_LED5_OFF;
    1164:	80 91 0b 01 	lds	r24, 0x010B
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	80 93 0b 01 	sts	0x010B, r24
    116e:	bf cd       	rjmp	.-1154   	; 0xcee <main+0xb30>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GRREEN_LED4_ON;
				} else {
					GRREEN_LED4_OFF;
    1170:	80 91 0b 01 	lds	r24, 0x010B
    1174:	80 61       	ori	r24, 0x10	; 16
    1176:	80 93 0b 01 	sts	0x010B, r24
    117a:	b0 cd       	rjmp	.-1184   	; 0xcdc <main+0xb1e>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GRREEN_LED3_ON;
				} else {
					GRREEN_LED3_OFF;
    117c:	a3 9a       	sbi	0x14, 3	; 20
    117e:	a5 cd       	rjmp	.-1206   	; 0xcca <main+0xb0c>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GRREEN_LED2_ON;
				} else {
					GRREEN_LED2_OFF;
    1180:	80 91 0b 01 	lds	r24, 0x010B
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	80 93 0b 01 	sts	0x010B, r24
    118a:	9a cd       	rjmp	.-1228   	; 0xcc0 <main+0xb02>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GRREEN_LED1_ON;
				} else {
					GRREEN_LED1_OFF;
    118c:	80 91 0b 01 	lds	r24, 0x010B
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	80 93 0b 01 	sts	0x010B, r24
    1196:	8b cd       	rjmp	.-1258   	; 0xcae <main+0xaf0>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GRREEN_LED0_ON;
				} else {
					GRREEN_LED0_OFF;
    1198:	80 91 0b 01 	lds	r24, 0x010B
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	80 93 0b 01 	sts	0x010B, r24
    11a2:	7c cd       	rjmp	.-1288   	; 0xc9c <main+0xade>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    11a4:	10 92 30 04 	sts	0x0430, r1
    11a8:	6b cd       	rjmp	.-1322   	; 0xc80 <main+0xac2>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    11aa:	10 92 19 02 	sts	0x0219, r1
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    11ae:	94 ff       	sbrs	r25, 4
    11b0:	63 cd       	rjmp	.-1338   	; 0xc78 <main+0xaba>
				startCalibration = 1;
    11b2:	10 93 2d 04 	sts	0x042D, r17
				calibrationCycle = 0;
    11b6:	10 92 2f 04 	sts	0x042F, r1
    11ba:	10 92 2e 04 	sts	0x042E, r1
				pwm_red = 0;
    11be:	10 92 14 02 	sts	0x0214, r1
				pwm_green = 0;
    11c2:	10 92 15 02 	sts	0x0215, r1
				pwm_blue = 0;
    11c6:	10 92 16 02 	sts	0x0216, r1
				updateRedLed(pwm_red);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <updateRedLed>
				updateGreenLed(pwm_green);
    11d0:	80 91 15 02 	lds	r24, 0x0215
    11d4:	0e 94 67 1f 	call	0x3ece	; 0x3ece <updateGreenLed>
				updateBlueLed(pwm_blue);
    11d8:	80 91 16 02 	lds	r24, 0x0216
    11dc:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <updateBlueLed>
    11e0:	80 91 59 04 	lds	r24, 0x0459
    11e4:	98 2f       	mov	r25, r24
    11e6:	48 cd       	rjmp	.-1392   	; 0xc78 <main+0xaba>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    11e8:	45 9a       	sbi	0x08, 5	; 8
    11ea:	3f cd       	rjmp	.-1410   	; 0xc6a <main+0xaac>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    11ec:	44 9a       	sbi	0x08, 4	; 8
    11ee:	3a cd       	rjmp	.-1420   	; 0xc64 <main+0xaa6>
				obstacleAvoidance();
				//PORTB |= (1 << 7);
			}

			if(cliffAvoidanceEnabled) {
				cliffAvoidance();
    11f0:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <cliffAvoidance>
    11f4:	73 ca       	rjmp	.-2842   	; 0x6dc <main+0x51e>
            pwm_left_desired_to_control = pwm_left_desired;
            pwm_right_desired_to_control = pwm_right_desired;

			if(obstacleAvoidanceEnabled) {
				//PORTB &= ~(1 << 7);
				obstacleAvoidance();
    11f6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <obstacleAvoidance>
    11fa:	6b ca       	rjmp	.-2858   	; 0x6d2 <main+0x514>

			update_pwm = 1;

		} else if(currentSelector == 1) {		// only orizzontal speed control

			if(compute_left_vel) {
    11fc:	80 91 0f 02 	lds	r24, 0x020F
    1200:	88 23       	and	r24, r24
    1202:	09 f0       	breq	.+2      	; 0x1206 <main+0x1048>
    1204:	de c3       	rjmp	.+1980   	; 0x19c2 <main+0x1804>
					OCR4B = 0;
				}

			}

			if(compute_right_vel) {
    1206:	80 91 10 02 	lds	r24, 0x0210
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <main+0x1052>
    120e:	5d cb       	rjmp	.-2374   	; 0x8ca <main+0x70c>
				last_right_vel = right_vel_sum>>2;
    1210:	80 91 de 03 	lds	r24, 0x03DE
    1214:	90 91 df 03 	lds	r25, 0x03DF
    1218:	96 95       	lsr	r25
    121a:	87 95       	ror	r24
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	90 93 e3 03 	sts	0x03E3, r25
    1224:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
    1228:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
    122c:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
    1230:	10 92 df 03 	sts	0x03DF, r1
    1234:	10 92 de 03 	sts	0x03DE, r1

				pwm_right_working = pwm_right_desired;
    1238:	80 91 ec 03 	lds	r24, 0x03EC
    123c:	90 91 ed 03 	lds	r25, 0x03ED
    1240:	90 93 ff 03 	sts	0x03FF, r25
    1244:	80 93 fe 03 	sts	0x03FE, r24
				pwm_right_desired_to_control = pwm_right_desired;
    1248:	90 93 d9 03 	sts	0x03D9, r25
    124c:	80 93 d8 03 	sts	0x03D8, r24

				start_orizzontal_speed_control_right(&pwm_right_working);
    1250:	8e ef       	ldi	r24, 0xFE	; 254
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	0e 94 85 13 	call	0x270a	; 0x270a <start_orizzontal_speed_control_right>

				pwm_right = pwm_right_working;
    1258:	80 91 fe 03 	lds	r24, 0x03FE
    125c:	90 91 ff 03 	lds	r25, 0x03FF
    1260:	90 93 e5 03 	sts	0x03E5, r25
    1264:	80 93 e4 03 	sts	0x03E4, r24
				//} else {
				//	OCR3A = 0;
				//	OCR3B = 0;
				//}

				if(pwm_right > 0) {
    1268:	18 16       	cp	r1, r24
    126a:	19 06       	cpc	r1, r25
    126c:	0c f0       	brlt	.+2      	; 0x1270 <main+0x10b2>
    126e:	ed c0       	rjmp	.+474    	; 0x144a <main+0x128c>
				}

				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
    1270:	90 93 99 00 	sts	0x0099, r25
    1274:	80 93 98 00 	sts	0x0098, r24
    1278:	28 cb       	rjmp	.-2480   	; 0x8ca <main+0x70c>
				OCR3A = 0;
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	09 f0       	breq	.+2      	; 0x1280 <main+0x10c2>
    127e:	d5 c3       	rjmp	.+1962   	; 0x1a2a <main+0x186c>
				OCR4B =(unsigned int)( -pwm_left);
			} else {
				OCR4A = 0;
    1280:	10 92 a9 00 	sts	0x00A9, r1
    1284:	10 92 a8 00 	sts	0x00A8, r1
				OCR4B = 0;
    1288:	10 92 ab 00 	sts	0x00AB, r1
    128c:	10 92 aa 00 	sts	0x00AA, r1
    1290:	0c 94 05 01 	jmp	0x20a	; 0x20a <main+0x4c>
			pwm_left = pwm_left_working;
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	09 f0       	breq	.+2      	; 0x129a <main+0x10dc>
    1298:	d1 c3       	rjmp	.+1954   	; 0x1a3c <main+0x187e>
				OCR3B = (unsigned int)(-pwm_right);
			} else {
				OCR3A = 0;
    129a:	10 92 99 00 	sts	0x0099, r1
    129e:	10 92 98 00 	sts	0x0098, r1
				OCR3B = 0;
    12a2:	10 92 9b 00 	sts	0x009B, r1
    12a6:	10 92 9a 00 	sts	0x009A, r1
    12aa:	32 ca       	rjmp	.-2972   	; 0x710 <main+0x552>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    12ac:	85 30       	cpi	r24, 0x05	; 5
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <main+0x10f4>
    12b0:	2c c3       	rjmp	.+1624   	; 0x190a <main+0x174c>
    12b2:	86 30       	cpi	r24, 0x06	; 6
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <main+0x10fa>
    12b6:	9f cd       	rjmp	.-1218   	; 0xdf6 <main+0xc38>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    12b8:	80 91 45 03 	lds	r24, 0x0345
    12bc:	90 91 46 03 	lds	r25, 0x0346
    12c0:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[2] = proximityValue[8]>>8;
    12c4:	80 91 45 03 	lds	r24, 0x0345
    12c8:	90 91 46 03 	lds	r25, 0x0346
    12cc:	90 93 40 04 	sts	0x0440, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    12d0:	80 91 55 03 	lds	r24, 0x0355
    12d4:	90 91 56 03 	lds	r25, 0x0356
    12d8:	80 93 41 04 	sts	0x0441, r24
					ackPayload[4] = proximityValue[16]>>8;
    12dc:	80 91 55 03 	lds	r24, 0x0355
    12e0:	90 91 56 03 	lds	r25, 0x0356
    12e4:	90 93 42 04 	sts	0x0442, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    12e8:	80 91 59 03 	lds	r24, 0x0359
    12ec:	90 91 5a 03 	lds	r25, 0x035A
    12f0:	80 93 43 04 	sts	0x0443, r24
					ackPayload[6] = proximityValue[18]>>8;
    12f4:	80 91 59 03 	lds	r24, 0x0359
    12f8:	90 91 5a 03 	lds	r25, 0x035A
    12fc:	90 93 44 04 	sts	0x0444, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    1300:	80 91 5d 03 	lds	r24, 0x035D
    1304:	90 91 5e 03 	lds	r25, 0x035E
    1308:	80 93 45 04 	sts	0x0445, r24
					ackPayload[8] = proximityValue[20]>>8;
    130c:	80 91 5d 03 	lds	r24, 0x035D
    1310:	90 91 5e 03 	lds	r25, 0x035E
    1314:	90 93 46 04 	sts	0x0446, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    1318:	80 91 61 03 	lds	r24, 0x0361
    131c:	90 91 62 03 	lds	r25, 0x0362
    1320:	80 93 47 04 	sts	0x0447, r24
					ackPayload[10] = proximityValue[22]>>8;
    1324:	80 91 61 03 	lds	r24, 0x0361
    1328:	90 91 62 03 	lds	r25, 0x0362
    132c:	90 93 48 04 	sts	0x0448, r25
					ackPayload[11] = accZ&0xFF;
    1330:	90 91 12 04 	lds	r25, 0x0412
    1334:	80 91 13 04 	lds	r24, 0x0413
    1338:	90 93 49 04 	sts	0x0449, r25
					ackPayload[12] = accZ>>8;
    133c:	80 93 4a 04 	sts	0x044A, r24
					ackPayload[13] = batteryLevel&0xFF;
    1340:	90 91 99 03 	lds	r25, 0x0399
    1344:	80 91 9a 03 	lds	r24, 0x039A
    1348:	90 93 4b 04 	sts	0x044B, r25
					ackPayload[14] = batteryLevel>>8;
    134c:	80 93 4c 04 	sts	0x044C, r24
					ackPayload[15] = 0;
    1350:	10 92 4d 04 	sts	0x044D, r1
					packetId = 3;
    1354:	53 e0       	ldi	r21, 0x03	; 3
    1356:	50 93 13 02 	sts	0x0213, r21
					break;
    135a:	4d cd       	rjmp	.-1382   	; 0xdf6 <main+0xc38>
					OCR3B = (unsigned int)(-pwm_right);
				}
			}
*/

			if(compute_left_vel) {
    135c:	80 91 0f 02 	lds	r24, 0x020F
    1360:	88 23       	and	r24, r24
    1362:	c9 f1       	breq	.+114    	; 0x13d6 <main+0x1218>
				last_left_vel = left_vel_sum>>2;
    1364:	80 91 dc 03 	lds	r24, 0x03DC
    1368:	90 91 dd 03 	lds	r25, 0x03DD
    136c:	96 95       	lsr	r25
    136e:	87 95       	ror	r24
    1370:	96 95       	lsr	r25
    1372:	87 95       	ror	r24
    1374:	90 93 e1 03 	sts	0x03E1, r25
    1378:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
    137c:	10 93 fc 03 	sts	0x03FC, r17
				compute_left_vel = 0;
    1380:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    1384:	10 92 dd 03 	sts	0x03DD, r1
    1388:	10 92 dc 03 	sts	0x03DC, r1

				pwm_left_working = pwm_left_desired;
    138c:	80 91 ee 03 	lds	r24, 0x03EE
    1390:	90 91 ef 03 	lds	r25, 0x03EF
    1394:	90 93 01 04 	sts	0x0401, r25
    1398:	80 93 00 04 	sts	0x0400, r24
				pwm_left_desired_to_control = pwm_left_desired;
    139c:	90 93 db 03 	sts	0x03DB, r25
    13a0:	80 93 da 03 	sts	0x03DA, r24

				if(robotPosition == ORIZZONTAL_POS) {
    13a4:	80 91 1e 02 	lds	r24, 0x021E
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <main+0x11f0>
    13ac:	55 c3       	rjmp	.+1706   	; 0x1a58 <main+0x189a>
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_left(&pwm_left_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_left(&pwm_left_working);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <start_vertical_speed_control_left>
					//PORTB |= (1 << 6);
				}

				pwm_left = pwm_left_working;
    13b6:	80 91 00 04 	lds	r24, 0x0400
    13ba:	90 91 01 04 	lds	r25, 0x0401
    13be:	90 93 e7 03 	sts	0x03E7, r25
    13c2:	80 93 e6 03 	sts	0x03E6, r24

				if(pwm_left > 0) {
    13c6:	18 16       	cp	r1, r24
    13c8:	19 06       	cpc	r1, r25
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <main+0x1210>
    13cc:	4a c3       	rjmp	.+1684   	; 0x1a62 <main+0x18a4>
					OCR4A = (unsigned int)pwm_left;
    13ce:	90 93 a9 00 	sts	0x00A9, r25
    13d2:	80 93 a8 00 	sts	0x00A8, r24
					OCR4A = 0;
					OCR4B = 0;
				}
			}

			if(compute_right_vel) {
    13d6:	80 91 10 02 	lds	r24, 0x0210
    13da:	88 23       	and	r24, r24
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <main+0x1222>
    13de:	75 ca       	rjmp	.-2838   	; 0x8ca <main+0x70c>
				last_right_vel = right_vel_sum>>2;
    13e0:	80 91 de 03 	lds	r24, 0x03DE
    13e4:	90 91 df 03 	lds	r25, 0x03DF
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	90 93 e3 03 	sts	0x03E3, r25
    13f4:	80 93 e2 03 	sts	0x03E2, r24
				right_vel_changed = 1;
    13f8:	10 93 fd 03 	sts	0x03FD, r17
				compute_right_vel = 0;
    13fc:	10 92 10 02 	sts	0x0210, r1
				right_vel_sum = 0;
    1400:	10 92 df 03 	sts	0x03DF, r1
    1404:	10 92 de 03 	sts	0x03DE, r1

				pwm_right_working = pwm_right_desired;
    1408:	80 91 ec 03 	lds	r24, 0x03EC
    140c:	90 91 ed 03 	lds	r25, 0x03ED
    1410:	90 93 ff 03 	sts	0x03FF, r25
    1414:	80 93 fe 03 	sts	0x03FE, r24
				pwm_right_desired_to_control = pwm_right_desired;
    1418:	90 93 d9 03 	sts	0x03D9, r25
    141c:	80 93 d8 03 	sts	0x03D8, r24

				if(robotPosition == ORIZZONTAL_POS) {
    1420:	80 91 1e 02 	lds	r24, 0x021E
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	09 f4       	brne	.+2      	; 0x142a <main+0x126c>
    1428:	12 c3       	rjmp	.+1572   	; 0x1a4e <main+0x1890>
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_right(&pwm_right_working);
					//PORTB |= (1 << 5);
				} else {
					//PORTB &= ~(1 << 6);
					start_vertical_speed_control_right(&pwm_right_working);
    142a:	8e ef       	ldi	r24, 0xFE	; 254
    142c:	93 e0       	ldi	r25, 0x03	; 3
    142e:	0e 94 40 12 	call	0x2480	; 0x2480 <start_vertical_speed_control_right>
					//PORTB |= (1 << 6);
				}

				pwm_right = pwm_right_working;
    1432:	80 91 fe 03 	lds	r24, 0x03FE
    1436:	90 91 ff 03 	lds	r25, 0x03FF
    143a:	90 93 e5 03 	sts	0x03E5, r25
    143e:	80 93 e4 03 	sts	0x03E4, r24

				if(pwm_right > 0) {
    1442:	18 16       	cp	r1, r24
    1444:	19 06       	cpc	r1, r25
    1446:	0c f4       	brge	.+2      	; 0x144a <main+0x128c>
    1448:	13 cf       	rjmp	.-474    	; 0x1270 <main+0x10b2>
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	09 f0       	breq	.+2      	; 0x1450 <main+0x1292>
    144e:	35 c3       	rjmp	.+1642   	; 0x1aba <main+0x18fc>
					OCR3B = (unsigned int)(-pwm_right);
				} else {
					OCR3A = 0;
    1450:	10 92 99 00 	sts	0x0099, r1
    1454:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    1458:	10 92 9b 00 	sts	0x009B, r1
    145c:	10 92 9a 00 	sts	0x009A, r1
    1460:	34 ca       	rjmp	.-2968   	; 0x8ca <main+0x70c>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21] - proximityOffset[10];	// ambient - (ambient+reflected) - offset
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    1462:	10 92 7a 03 	sts	0x037A, r1
    1466:	10 92 79 03 	sts	0x0379, r1
    146a:	27 cb       	rjmp	.-2482   	; 0xaba <main+0x8fc>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    146c:	10 92 6a 03 	sts	0x036A, r1
    1470:	10 92 69 03 	sts	0x0369, r1
    1474:	91 c9       	rjmp	.-3294   	; 0x798 <main+0x5da>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    1476:	10 92 68 03 	sts	0x0368, r1
    147a:	10 92 67 03 	sts	0x0367, r1
    147e:	7c c9       	rjmp	.-3336   	; 0x778 <main+0x5ba>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    1480:	10 92 72 03 	sts	0x0372, r1
    1484:	10 92 71 03 	sts	0x0371, r1
    1488:	c7 c9       	rjmp	.-3186   	; 0x818 <main+0x65a>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    148a:	10 92 70 03 	sts	0x0370, r1
    148e:	10 92 6f 03 	sts	0x036F, r1
    1492:	b2 c9       	rjmp	.-3228   	; 0x7f8 <main+0x63a>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    1494:	10 92 6e 03 	sts	0x036E, r1
    1498:	10 92 6d 03 	sts	0x036D, r1
    149c:	9d c9       	rjmp	.-3270   	; 0x7d8 <main+0x61a>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    149e:	10 92 6c 03 	sts	0x036C, r1
    14a2:	10 92 6b 03 	sts	0x036B, r1
    14a6:	88 c9       	rjmp	.-3312   	; 0x7b8 <main+0x5fa>
					proximityResult[9] = 0;
				}

				proximityResult[10] = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
				if(proximityResult[10] < 0) {
					proximityResult[10] = 0;
    14a8:	10 92 7a 03 	sts	0x037A, r1
    14ac:	10 92 79 03 	sts	0x0379, r1
    14b0:	f3 c9       	rjmp	.-3098   	; 0x898 <main+0x6da>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    14b2:	10 92 78 03 	sts	0x0378, r1
    14b6:	10 92 77 03 	sts	0x0377, r1
    14ba:	de c9       	rjmp	.-3140   	; 0x878 <main+0x6ba>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    14bc:	10 92 76 03 	sts	0x0376, r1
    14c0:	10 92 75 03 	sts	0x0375, r1
    14c4:	c9 c9       	rjmp	.-3182   	; 0x858 <main+0x69a>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    14c6:	10 92 74 03 	sts	0x0374, r1
    14ca:	10 92 73 03 	sts	0x0373, r1
    14ce:	b4 c9       	rjmp	.-3224   	; 0x838 <main+0x67a>
					proximityResult[8] = 0;
				}

				proximityResult[9] = proximityValue[18] - proximityValue[19] - proximityOffset[9];	// ambient - (ambient+reflected) - offset
				if(proximityResult[9] < 0) {
					proximityResult[9] = 0;
    14d0:	10 92 78 03 	sts	0x0378, r1
    14d4:	10 92 77 03 	sts	0x0377, r1
    14d8:	da ca       	rjmp	.-2636   	; 0xa8e <main+0x8d0>
					proximityResult[7] = 0;
				}

				proximityResult[8] = proximityValue[16] - proximityValue[17] - proximityOffset[8];	// ambient - (ambient+reflected) - offset
				if(proximityResult[8] < 0) {
					proximityResult[8] = 0;
    14da:	10 92 76 03 	sts	0x0376, r1
    14de:	10 92 75 03 	sts	0x0375, r1
    14e2:	bf ca       	rjmp	.-2690   	; 0xa62 <main+0x8a4>
					proximityResult[6] = 0;
				}

				proximityResult[7] = proximityValue[14] - proximityValue[15] - proximityOffset[7];	// ambient - (ambient+reflected) - offset
				if(proximityResult[7] < 0) {
					proximityResult[7] = 0;
    14e4:	10 92 74 03 	sts	0x0374, r1
    14e8:	10 92 73 03 	sts	0x0373, r1
    14ec:	a4 ca       	rjmp	.-2744   	; 0xa36 <main+0x878>
					proximityResult[5] = 0;
				}

				proximityResult[6] = proximityValue[12] - proximityValue[13] - proximityOffset[6];	// ambient - (ambient+reflected) - offset
				if(proximityResult[6] < 0) {
					proximityResult[6] = 0;
    14ee:	10 92 72 03 	sts	0x0372, r1
    14f2:	10 92 71 03 	sts	0x0371, r1
    14f6:	89 ca       	rjmp	.-2798   	; 0xa0a <main+0x84c>
					proximityResult[4] = 0;
				}

				proximityResult[5] = proximityValue[10] - proximityValue[11] - proximityOffset[5];	// ambient - (ambient+reflected) - offset
				if(proximityResult[5] < 0) {
					proximityResult[5] = 0;
    14f8:	10 92 70 03 	sts	0x0370, r1
    14fc:	10 92 6f 03 	sts	0x036F, r1
    1500:	6e ca       	rjmp	.-2852   	; 0x9de <main+0x820>
					proximityResult[3] = 0;
				}

				proximityResult[4] = proximityValue[8] - proximityValue[9] - proximityOffset[4];	// ambient - (ambient+reflected) - offset
				if(proximityResult[4] < 0) {
					proximityResult[4] = 0;
    1502:	10 92 6e 03 	sts	0x036E, r1
    1506:	10 92 6d 03 	sts	0x036D, r1
    150a:	53 ca       	rjmp	.-2906   	; 0x9b2 <main+0x7f4>
					proximityResult[2] = 0;
				}

				proximityResult[3] = proximityValue[6] - proximityValue[7] - proximityOffset[3];	// ambient - (ambient+reflected) - offset
				if(proximityResult[3] < 0) {
					proximityResult[3] = 0;
    150c:	10 92 6c 03 	sts	0x036C, r1
    1510:	10 92 6b 03 	sts	0x036B, r1
    1514:	38 ca       	rjmp	.-2960   	; 0x986 <main+0x7c8>
					proximityResult[1] = 0;
				}

				proximityResult[2] = proximityValue[4] - proximityValue[5] - proximityOffset[2];	// ambient - (ambient+reflected) - offset
				if(proximityResult[2] < 0) {
					proximityResult[2] = 0;
    1516:	10 92 6a 03 	sts	0x036A, r1
    151a:	10 92 69 03 	sts	0x0369, r1
    151e:	1d ca       	rjmp	.-3014   	; 0x95a <main+0x79c>
					proximityResult[0] = 0;
				}

				proximityResult[1] = proximityValue[2] - proximityValue[3] - proximityOffset[1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[1] < 0) {
					proximityResult[1] = 0;
    1520:	10 92 68 03 	sts	0x0368, r1
    1524:	10 92 67 03 	sts	0x0367, r1
    1528:	02 ca       	rjmp	.-3068   	; 0x92e <main+0x770>

			} else {

				proximityResult[0] = proximityValue[0] - proximityValue[1] - proximityOffset[0];	// ambient - (ambient+reflected) - offset
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    152a:	10 92 66 03 	sts	0x0366, r1
    152e:	10 92 65 03 	sts	0x0365, r1
    1532:	e7 c9       	rjmp	.-3122   	; 0x902 <main+0x744>
			updateProx = 0;
			if(startCalibration) {

				proximityResult[0] = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
				if(proximityResult[0] < 0) {
					proximityResult[0] = 0;
    1534:	10 92 66 03 	sts	0x0366, r1
    1538:	10 92 65 03 	sts	0x0365, r1
    153c:	0d c9       	rjmp	.-3558   	; 0x758 <main+0x59a>

			if(proxUpdated) {

				proxUpdated = 0;

				if(calibrationCycle==0) {
    153e:	1f 8e       	std	Y+31, r1	; 0x1f
    1540:	18 a2       	std	Y+32, r1	; 0x20
    1542:	19 a2       	std	Y+33, r1	; 0x21
    1544:	1a a2       	std	Y+34, r1	; 0x22
    1546:	1b 8e       	std	Y+27, r1	; 0x1b
    1548:	1c 8e       	std	Y+28, r1	; 0x1c
    154a:	1d 8e       	std	Y+29, r1	; 0x1d
    154c:	1e 8e       	std	Y+30, r1	; 0x1e
    154e:	1f 8a       	std	Y+23, r1	; 0x17
    1550:	18 8e       	std	Y+24, r1	; 0x18
    1552:	19 8e       	std	Y+25, r1	; 0x19
    1554:	1a 8e       	std	Y+26, r1	; 0x1a
    1556:	1b 8a       	std	Y+19, r1	; 0x13
    1558:	1c 8a       	std	Y+20, r1	; 0x14
    155a:	1d 8a       	std	Y+21, r1	; 0x15
    155c:	1e 8a       	std	Y+22, r1	; 0x16
    155e:	1f 86       	std	Y+15, r1	; 0x0f
    1560:	18 8a       	std	Y+16, r1	; 0x10
    1562:	19 8a       	std	Y+17, r1	; 0x11
    1564:	1a 8a       	std	Y+18, r1	; 0x12
    1566:	1b 86       	std	Y+11, r1	; 0x0b
    1568:	1c 86       	std	Y+12, r1	; 0x0c
    156a:	1d 86       	std	Y+13, r1	; 0x0d
    156c:	1e 86       	std	Y+14, r1	; 0x0e
    156e:	1f 82       	std	Y+7, r1	; 0x07
    1570:	18 86       	std	Y+8, r1	; 0x08
    1572:	19 86       	std	Y+9, r1	; 0x09
    1574:	1a 86       	std	Y+10, r1	; 0x0a
    1576:	1b 82       	std	Y+3, r1	; 0x03
    1578:	1c 82       	std	Y+4, r1	; 0x04
    157a:	1d 82       	std	Y+5, r1	; 0x05
    157c:	1e 82       	std	Y+6, r1	; 0x06
    157e:	44 24       	eor	r4, r4
    1580:	55 24       	eor	r5, r5
    1582:	32 01       	movw	r6, r4
    1584:	88 24       	eor	r8, r8
    1586:	99 24       	eor	r9, r9
    1588:	54 01       	movw	r10, r8
    158a:	cc 24       	eor	r12, r12
    158c:	dd 24       	eor	r13, r13
    158e:	76 01       	movw	r14, r12
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	1a 82       	std	Y+2, r1	; 0x02
    1598:	19 82       	std	Y+1, r1	; 0x01
    159a:	22 24       	eor	r2, r2
    159c:	33 24       	eor	r3, r3
    159e:	1c a2       	std	Y+36, r1	; 0x24
    15a0:	1b a2       	std	Y+35, r1	; 0x23
    15a2:	0c 94 c4 01 	jmp	0x388	; 0x388 <main+0x1ca>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	90 93 ef 03 	sts	0x03EF, r25
    15b2:	80 93 ee 03 	sts	0x03EE, r24
    15b6:	e5 ca       	rjmp	.-2614   	; 0xb82 <main+0x9c4>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    15b8:	22 0f       	add	r18, r18
    15ba:	33 1f       	adc	r19, r19
    15bc:	22 0f       	add	r18, r18
    15be:	33 1f       	adc	r19, r19
    15c0:	30 93 ed 03 	sts	0x03ED, r19
    15c4:	20 93 ec 03 	sts	0x03EC, r18
    15c8:	cf ca       	rjmp	.-2658   	; 0xb68 <main+0x9aa>

			if(command_received) {

				command_received = 0;

				switch(ir_move) {
    15ca:	ee 58       	subi	r30, 0x8E	; 142
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	05 90       	lpm	r0, Z+
    15d4:	f4 91       	lpm	r31, Z+
    15d6:	e0 2d       	mov	r30, r0
    15d8:	19 94       	eijmp
							case 0:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 0;
								break;
							case 1:
								obstacleAvoidanceEnabled = 1;
    15da:	80 93 30 04 	sts	0x0430, r24
								cliffAvoidanceEnabled = 0;
    15de:	10 92 35 04 	sts	0x0435, r1
    15e2:	20 cc       	rjmp	.-1984   	; 0xe24 <main+0xc66>
								break;
							case 2:
								obstacleAvoidanceEnabled = 0;
    15e4:	10 92 30 04 	sts	0x0430, r1
								cliffAvoidanceEnabled = 1;
    15e8:	10 93 35 04 	sts	0x0435, r17
    15ec:	20 91 ec 03 	lds	r18, 0x03EC
    15f0:	30 91 ed 03 	lds	r19, 0x03ED
    15f4:	80 91 ee 03 	lds	r24, 0x03EE
    15f8:	90 91 ef 03 	lds	r25, 0x03EF
	               	default:
	                 	break;

	            }	// switch

				if(pwm_right_desired >= 0) {
    15fc:	37 ff       	sbrs	r19, 7
    15fe:	1c cc       	rjmp	.-1992   	; 0xe38 <main+0xc7a>
					speedr = pwm_right_desired >> 2;
    1600:	30 95       	com	r19
    1602:	21 95       	neg	r18
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	18 cc       	rjmp	.-2000   	; 0xe38 <main+0xc7a>
					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
						break;

					case 17:	// volume -
						obstacleAvoidanceEnabled = 0;
    1608:	10 92 30 04 	sts	0x0430, r1
    160c:	20 91 ec 03 	lds	r18, 0x03EC
    1610:	30 91 ed 03 	lds	r19, 0x03ED
    1614:	80 91 ee 03 	lds	r24, 0x03EE
    1618:	90 91 ef 03 	lds	r25, 0x03EF
						break;
    161c:	0b cc       	rjmp	.-2026   	; 0xe34 <main+0xc76>
						updateBlueLed(pwm_blue);

	                  	break;

					case 16:	// volume +
						obstacleAvoidanceEnabled = 1;
    161e:	10 93 30 04 	sts	0x0430, r17
    1622:	20 91 ec 03 	lds	r18, 0x03EC
    1626:	30 91 ed 03 	lds	r19, 0x03ED
    162a:	80 91 ee 03 	lds	r24, 0x03EE
    162e:	90 91 ef 03 	lds	r25, 0x03EF
						break;
    1632:	00 cc       	rjmp	.-2048   	; 0xe34 <main+0xc76>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    1634:	80 91 ee 03 	lds	r24, 0x03EE
    1638:	90 91 ef 03 	lds	r25, 0x03EF
    163c:	4e 97       	sbiw	r24, 0x1e	; 30
    163e:	90 93 ef 03 	sts	0x03EF, r25
    1642:	80 93 ee 03 	sts	0x03EE, r24
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1646:	bc ef       	ldi	r27, 0xFC	; 252
    1648:	80 30       	cpi	r24, 0x00	; 0
    164a:	9b 07       	cpc	r25, r27
    164c:	ac f5       	brge	.+106    	; 0x16b8 <main+0x14fa>
    164e:	e0 e0       	ldi	r30, 0x00	; 0
    1650:	fc ef       	ldi	r31, 0xFC	; 252
    1652:	f0 93 ef 03 	sts	0x03EF, r31
    1656:	e0 93 ee 03 	sts	0x03EE, r30
    165a:	20 91 ec 03 	lds	r18, 0x03EC
    165e:	30 91 ed 03 	lds	r19, 0x03ED
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	9c ef       	ldi	r25, 0xFC	; 252
    1666:	e6 cb       	rjmp	.-2100   	; 0xe34 <main+0xc76>
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
					case 30:
						if(pwm_right_desired < pwm_left) {
    1668:	20 91 ec 03 	lds	r18, 0x03EC
    166c:	30 91 ed 03 	lds	r19, 0x03ED
    1670:	80 91 e6 03 	lds	r24, 0x03E6
    1674:	90 91 e7 03 	lds	r25, 0x03E7
    1678:	28 17       	cp	r18, r24
    167a:	39 07       	cpc	r19, r25
    167c:	24 f0       	brlt	.+8      	; 0x1686 <main+0x14c8>
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    167e:	20 91 ee 03 	lds	r18, 0x03EE
    1682:	30 91 ef 03 	lds	r19, 0x03EF
						}
						pwm_right_desired -= STEP_MOTORS;
    1686:	2e 51       	subi	r18, 0x1E	; 30
    1688:	30 40       	sbci	r19, 0x00	; 0
    168a:	30 93 ed 03 	sts	0x03ED, r19
    168e:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired -= STEP_MOTORS;
    1692:	c9 01       	movw	r24, r18
    1694:	30 93 ef 03 	sts	0x03EF, r19
    1698:	20 93 ee 03 	sts	0x03EE, r18
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    169c:	4c ef       	ldi	r20, 0xFC	; 252
    169e:	20 30       	cpi	r18, 0x00	; 0
    16a0:	34 07       	cpc	r19, r20
    16a2:	34 f4       	brge	.+12     	; 0x16b0 <main+0x14f2>
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	bc ef       	ldi	r27, 0xFC	; 252
    16a8:	b0 93 ed 03 	sts	0x03ED, r27
    16ac:	a0 93 ec 03 	sts	0x03EC, r26
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
    16b0:	bc ef       	ldi	r27, 0xFC	; 252
    16b2:	20 30       	cpi	r18, 0x00	; 0
    16b4:	3b 07       	cpc	r19, r27
    16b6:	5c f2       	brlt	.-106    	; 0x164e <main+0x1490>
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    16b8:	20 91 ec 03 	lds	r18, 0x03EC
    16bc:	30 91 ed 03 	lds	r19, 0x03ED
    16c0:	b9 cb       	rjmp	.-2190   	; 0xe34 <main+0xc76>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    16c2:	20 91 ec 03 	lds	r18, 0x03EC
    16c6:	30 91 ed 03 	lds	r19, 0x03ED
    16ca:	2e 51       	subi	r18, 0x1E	; 30
    16cc:	30 40       	sbci	r19, 0x00	; 0
    16ce:	30 93 ed 03 	sts	0x03ED, r19
    16d2:	20 93 ec 03 	sts	0x03EC, r18
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    16d6:	fc ef       	ldi	r31, 0xFC	; 252
    16d8:	20 30       	cpi	r18, 0x00	; 0
    16da:	3f 07       	cpc	r19, r31
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <main+0x1522>
    16de:	d5 c1       	rjmp	.+938    	; 0x1a8a <main+0x18cc>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3c ef       	ldi	r19, 0xFC	; 252
    16e4:	30 93 ed 03 	sts	0x03ED, r19
    16e8:	20 93 ec 03 	sts	0x03EC, r18
    16ec:	80 91 ee 03 	lds	r24, 0x03EE
    16f0:	90 91 ef 03 	lds	r25, 0x03EF
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	31 e0       	ldi	r19, 0x01	; 1
    16f8:	a3 cb       	rjmp	.-2234   	; 0xe40 <main+0xc82>
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
					case 47:
						pwm_right_desired -= STEP_MOTORS;
    16fa:	20 91 ec 03 	lds	r18, 0x03EC
    16fe:	30 91 ed 03 	lds	r19, 0x03ED
    1702:	2e 51       	subi	r18, 0x1E	; 30
    1704:	30 40       	sbci	r19, 0x00	; 0
    1706:	30 93 ed 03 	sts	0x03ED, r19
    170a:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired += STEP_MOTORS;
    170e:	80 91 ee 03 	lds	r24, 0x03EE
    1712:	90 91 ef 03 	lds	r25, 0x03EF
    1716:	4e 96       	adiw	r24, 0x1e	; 30
    1718:	90 93 ef 03 	sts	0x03EF, r25
    171c:	80 93 ee 03 	sts	0x03EE, r24
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1720:	fc ef       	ldi	r31, 0xFC	; 252
    1722:	20 30       	cpi	r18, 0x00	; 0
    1724:	3f 07       	cpc	r19, r31
    1726:	34 f4       	brge	.+12     	; 0x1734 <main+0x1576>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	3c ef       	ldi	r19, 0xFC	; 252
    172c:	30 93 ed 03 	sts	0x03ED, r19
    1730:	20 93 ec 03 	sts	0x03EC, r18
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1734:	44 e0       	ldi	r20, 0x04	; 4
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	94 07       	cpc	r25, r20
    173a:	0c f4       	brge	.+2      	; 0x173e <main+0x1580>
    173c:	7b cb       	rjmp	.-2314   	; 0xe34 <main+0xc76>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	94 e0       	ldi	r25, 0x04	; 4
    1742:	90 93 ef 03 	sts	0x03EF, r25
    1746:	80 93 ee 03 	sts	0x03EE, r24
    174a:	74 cb       	rjmp	.-2328   	; 0xe34 <main+0xc76>
						break;

					case 4:	// both motors left
					case 46:
						pwm_right_desired += STEP_MOTORS;
    174c:	20 91 ec 03 	lds	r18, 0x03EC
    1750:	30 91 ed 03 	lds	r19, 0x03ED
    1754:	22 5e       	subi	r18, 0xE2	; 226
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	30 93 ed 03 	sts	0x03ED, r19
    175c:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired -= STEP_MOTORS;
    1760:	80 91 ee 03 	lds	r24, 0x03EE
    1764:	90 91 ef 03 	lds	r25, 0x03EF
    1768:	4e 97       	sbiw	r24, 0x1e	; 30
    176a:	90 93 ef 03 	sts	0x03EF, r25
    176e:	80 93 ee 03 	sts	0x03EE, r24
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1772:	a4 e0       	ldi	r26, 0x04	; 4
    1774:	21 30       	cpi	r18, 0x01	; 1
    1776:	3a 07       	cpc	r19, r26
    1778:	44 f0       	brlt	.+16     	; 0x178a <main+0x15cc>
    177a:	e0 e0       	ldi	r30, 0x00	; 0
    177c:	f4 e0       	ldi	r31, 0x04	; 4
    177e:	f0 93 ed 03 	sts	0x03ED, r31
    1782:	e0 93 ec 03 	sts	0x03EC, r30
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	34 e0       	ldi	r19, 0x04	; 4
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    178a:	fc ef       	ldi	r31, 0xFC	; 252
    178c:	80 30       	cpi	r24, 0x00	; 0
    178e:	9f 07       	cpc	r25, r31
    1790:	0c f0       	brlt	.+2      	; 0x1794 <main+0x15d6>
    1792:	50 cb       	rjmp	.-2400   	; 0xe34 <main+0xc76>
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	5c ef       	ldi	r21, 0xFC	; 252
    1798:	50 93 ef 03 	sts	0x03EF, r21
    179c:	40 93 ee 03 	sts	0x03EE, r20
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	9c ef       	ldi	r25, 0xFC	; 252
    17a4:	47 cb       	rjmp	.-2418   	; 0xe34 <main+0xc76>
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    17a6:	80 91 ee 03 	lds	r24, 0x03EE
    17aa:	90 91 ef 03 	lds	r25, 0x03EF
    17ae:	4e 96       	adiw	r24, 0x1e	; 30
    17b0:	90 93 ef 03 	sts	0x03EF, r25
    17b4:	80 93 ee 03 	sts	0x03EE, r24
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    17b8:	54 e0       	ldi	r21, 0x04	; 4
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	95 07       	cpc	r25, r21
    17be:	0c f4       	brge	.+2      	; 0x17c2 <main+0x1604>
    17c0:	7b cf       	rjmp	.-266    	; 0x16b8 <main+0x14fa>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	94 e0       	ldi	r25, 0x04	; 4
    17c6:	90 93 ef 03 	sts	0x03EF, r25
    17ca:	80 93 ee 03 	sts	0x03EE, r24
    17ce:	74 cf       	rjmp	.-280    	; 0x16b8 <main+0x14fa>

				switch(ir_move) {

					case 5:	// stop motors
					case 51:
						pwm_right_desired = 0;
    17d0:	10 92 ed 03 	sts	0x03ED, r1
    17d4:	10 92 ec 03 	sts	0x03EC, r1
						pwm_left_desired = 0;
    17d8:	10 92 ef 03 	sts	0x03EF, r1
    17dc:	10 92 ee 03 	sts	0x03EE, r1
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	27 cb       	rjmp	.-2482   	; 0xe38 <main+0xc7a>
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    17ea:	20 91 ec 03 	lds	r18, 0x03EC
    17ee:	30 91 ed 03 	lds	r19, 0x03ED
    17f2:	80 91 ee 03 	lds	r24, 0x03EE
    17f6:	90 91 ef 03 	lds	r25, 0x03EF
    17fa:	82 17       	cp	r24, r18
    17fc:	93 07       	cpc	r25, r19
    17fe:	0c f4       	brge	.+2      	; 0x1802 <main+0x1644>
    1800:	78 c1       	rjmp	.+752    	; 0x1af2 <main+0x1934>
    1802:	9c 01       	movw	r18, r24
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    1804:	22 5e       	subi	r18, 0xE2	; 226
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	30 93 ed 03 	sts	0x03ED, r19
    180c:	20 93 ec 03 	sts	0x03EC, r18
						pwm_left_desired += STEP_MOTORS;
    1810:	4e 96       	adiw	r24, 0x1e	; 30
    1812:	90 93 ef 03 	sts	0x03EF, r25
    1816:	80 93 ee 03 	sts	0x03EE, r24
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    181a:	b4 e0       	ldi	r27, 0x04	; 4
    181c:	21 30       	cpi	r18, 0x01	; 1
    181e:	3b 07       	cpc	r19, r27
    1820:	34 f0       	brlt	.+12     	; 0x182e <main+0x1670>
    1822:	e0 e0       	ldi	r30, 0x00	; 0
    1824:	f4 e0       	ldi	r31, 0x04	; 4
    1826:	f0 93 ed 03 	sts	0x03ED, r31
    182a:	e0 93 ec 03 	sts	0x03EC, r30
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
    182e:	f4 e0       	ldi	r31, 0x04	; 4
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	9f 07       	cpc	r25, r31
    1834:	0c f4       	brge	.+2      	; 0x1838 <main+0x167a>
    1836:	40 cf       	rjmp	.-384    	; 0x16b8 <main+0x14fa>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	34 e0       	ldi	r19, 0x04	; 4
    183c:	30 93 ef 03 	sts	0x03EF, r19
    1840:	20 93 ee 03 	sts	0x03EE, r18
    1844:	20 91 ec 03 	lds	r18, 0x03EC
    1848:	30 91 ed 03 	lds	r19, 0x03ED
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	94 e0       	ldi	r25, 0x04	; 4
    1850:	f1 ca       	rjmp	.-2590   	; 0xe34 <main+0xc76>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1852:	20 91 ec 03 	lds	r18, 0x03EC
    1856:	30 91 ed 03 	lds	r19, 0x03ED
    185a:	22 5e       	subi	r18, 0xE2	; 226
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	30 93 ed 03 	sts	0x03ED, r19
    1862:	20 93 ec 03 	sts	0x03EC, r18
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1866:	94 e0       	ldi	r25, 0x04	; 4
    1868:	21 30       	cpi	r18, 0x01	; 1
    186a:	39 07       	cpc	r19, r25
    186c:	0c f4       	brge	.+2      	; 0x1870 <main+0x16b2>
    186e:	0d c1       	rjmp	.+538    	; 0x1a8a <main+0x18cc>
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b4 e0       	ldi	r27, 0x04	; 4
    1874:	b0 93 ed 03 	sts	0x03ED, r27
    1878:	a0 93 ec 03 	sts	0x03EC, r26
    187c:	80 91 ee 03 	lds	r24, 0x03EE
    1880:	90 91 ef 03 	lds	r25, 0x03EF
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	31 e0       	ldi	r19, 0x01	; 1
    1888:	db ca       	rjmp	.-2634   	; 0xe40 <main+0xc82>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
					case 50:
						colorState = (colorState+1)%5;
    188a:	80 91 0b 04 	lds	r24, 0x040B
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	65 e0       	ldi	r22, 0x05	; 5
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <__divmodhi4>
    189a:	80 93 0b 04 	sts	0x040B, r24

						if(colorState==0) {		// turn on blue
    189e:	88 23       	and	r24, r24
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <main+0x16e6>
    18a2:	29 c1       	rjmp	.+594    	; 0x1af6 <main+0x1938>
							LED_IR1_HIGH;
    18a4:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    18a6:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    18a8:	10 92 16 02 	sts	0x0216, r1
							pwm_green = MAX_LEDS_PWM;
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	30 93 15 02 	sts	0x0215, r19
							pwm_red = MAX_LEDS_PWM;
    18b2:	30 93 14 02 	sts	0x0214, r19
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}

						updateRedLed(pwm_red);
    18b8:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <updateRedLed>
						updateGreenLed(pwm_green);
    18bc:	80 91 15 02 	lds	r24, 0x0215
    18c0:	0e 94 67 1f 	call	0x3ece	; 0x3ece <updateGreenLed>
						updateBlueLed(pwm_blue);
    18c4:	80 91 16 02 	lds	r24, 0x0216
    18c8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <updateBlueLed>
    18cc:	20 91 ec 03 	lds	r18, 0x03EC
    18d0:	30 91 ed 03 	lds	r19, 0x03ED
    18d4:	80 91 ee 03 	lds	r24, 0x03EE
    18d8:	90 91 ef 03 	lds	r25, 0x03EF

	                  	break;
    18dc:	ab ca       	rjmp	.-2730   	; 0xe34 <main+0xc76>
					case 33:	// program -
						cliffAvoidanceEnabled = 0;
						break;

					case 52:
						behaviorState = (behaviorState+1)%4;
    18de:	80 91 0c 04 	lds	r24, 0x040C
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	83 70       	andi	r24, 0x03	; 3
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	80 93 0c 04 	sts	0x040C, r24
						switch(behaviorState) {
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <main+0x1736>
    18f2:	78 ce       	rjmp	.-784    	; 0x15e4 <main+0x1426>
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	09 f4       	brne	.+2      	; 0x18fa <main+0x173c>
    18f8:	c0 c0       	rjmp	.+384    	; 0x1a7a <main+0x18bc>
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <main+0x1742>
    18fe:	6d ce       	rjmp	.-806    	; 0x15da <main+0x141c>
							case 0:
								obstacleAvoidanceEnabled = 0;
    1900:	10 92 30 04 	sts	0x0430, r1
								cliffAvoidanceEnabled = 0;
    1904:	10 92 35 04 	sts	0x0435, r1
    1908:	8d ca       	rjmp	.-2790   	; 0xe24 <main+0xc66>
					ackPayload[15] = ir_move;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    190a:	80 91 35 03 	lds	r24, 0x0335
    190e:	90 91 36 03 	lds	r25, 0x0336
    1912:	80 93 3f 04 	sts	0x043F, r24
					ackPayload[2] = proximityValue[0]>>8;
    1916:	80 91 35 03 	lds	r24, 0x0335
    191a:	90 91 36 03 	lds	r25, 0x0336
    191e:	90 93 40 04 	sts	0x0440, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    1922:	80 91 39 03 	lds	r24, 0x0339
    1926:	90 91 3a 03 	lds	r25, 0x033A
    192a:	80 93 41 04 	sts	0x0441, r24
					ackPayload[4] = proximityValue[2]>>8;
    192e:	80 91 39 03 	lds	r24, 0x0339
    1932:	90 91 3a 03 	lds	r25, 0x033A
    1936:	90 93 42 04 	sts	0x0442, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    193a:	80 91 3d 03 	lds	r24, 0x033D
    193e:	90 91 3e 03 	lds	r25, 0x033E
    1942:	80 93 43 04 	sts	0x0443, r24
					ackPayload[6] = proximityValue[4]>>8;
    1946:	80 91 3d 03 	lds	r24, 0x033D
    194a:	90 91 3e 03 	lds	r25, 0x033E
    194e:	90 93 44 04 	sts	0x0444, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    1952:	80 91 41 03 	lds	r24, 0x0341
    1956:	90 91 42 03 	lds	r25, 0x0342
    195a:	80 93 45 04 	sts	0x0445, r24
					ackPayload[8] = proximityValue[6]>>8;
    195e:	80 91 41 03 	lds	r24, 0x0341
    1962:	90 91 42 03 	lds	r25, 0x0342
    1966:	90 93 46 04 	sts	0x0446, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    196a:	80 91 49 03 	lds	r24, 0x0349
    196e:	90 91 4a 03 	lds	r25, 0x034A
    1972:	80 93 47 04 	sts	0x0447, r24
					ackPayload[10] = proximityValue[10]>>8;
    1976:	80 91 49 03 	lds	r24, 0x0349
    197a:	90 91 4a 03 	lds	r25, 0x034A
    197e:	90 93 48 04 	sts	0x0448, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    1982:	80 91 4d 03 	lds	r24, 0x034D
    1986:	90 91 4e 03 	lds	r25, 0x034E
    198a:	80 93 49 04 	sts	0x0449, r24
					ackPayload[12] = proximityValue[12]>>8;
    198e:	80 91 4d 03 	lds	r24, 0x034D
    1992:	90 91 4e 03 	lds	r25, 0x034E
    1996:	90 93 4a 04 	sts	0x044A, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    199a:	80 91 51 03 	lds	r24, 0x0351
    199e:	90 91 52 03 	lds	r25, 0x0352
    19a2:	80 93 4b 04 	sts	0x044B, r24
					ackPayload[14] = proximityValue[14]>>8;
    19a6:	80 91 51 03 	lds	r24, 0x0351
    19aa:	90 91 52 03 	lds	r25, 0x0352
    19ae:	90 93 4c 04 	sts	0x044C, r25
					ackPayload[15] = currentSelector;
    19b2:	80 91 2c 04 	lds	r24, 0x042C
    19b6:	80 93 4d 04 	sts	0x044D, r24
					packetId = 6;
    19ba:	46 e0       	ldi	r20, 0x06	; 6
    19bc:	40 93 13 02 	sts	0x0213, r20
					break;
    19c0:	1a ca       	rjmp	.-3020   	; 0xdf6 <main+0xc38>

		} else if(currentSelector == 1) {		// only orizzontal speed control

			if(compute_left_vel) {

				last_left_vel = left_vel_sum>>2;
    19c2:	80 91 dc 03 	lds	r24, 0x03DC
    19c6:	90 91 dd 03 	lds	r25, 0x03DD
    19ca:	96 95       	lsr	r25
    19cc:	87 95       	ror	r24
    19ce:	96 95       	lsr	r25
    19d0:	87 95       	ror	r24
    19d2:	90 93 e1 03 	sts	0x03E1, r25
    19d6:	80 93 e0 03 	sts	0x03E0, r24
				left_vel_changed = 1;
    19da:	20 93 fc 03 	sts	0x03FC, r18
				compute_left_vel = 0;
    19de:	10 92 0f 02 	sts	0x020F, r1
				left_vel_sum = 0;
    19e2:	10 92 dd 03 	sts	0x03DD, r1
    19e6:	10 92 dc 03 	sts	0x03DC, r1

				pwm_left_working = pwm_left_desired;
    19ea:	80 91 ee 03 	lds	r24, 0x03EE
    19ee:	90 91 ef 03 	lds	r25, 0x03EF
    19f2:	90 93 01 04 	sts	0x0401, r25
    19f6:	80 93 00 04 	sts	0x0400, r24
				pwm_left_desired_to_control = pwm_left_desired;
    19fa:	90 93 db 03 	sts	0x03DB, r25
    19fe:	80 93 da 03 	sts	0x03DA, r24

				start_orizzontal_speed_control_left(&pwm_left_working);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	94 e0       	ldi	r25, 0x04	; 4
    1a06:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <start_orizzontal_speed_control_left>

				pwm_left = pwm_left_working;
    1a0a:	80 91 00 04 	lds	r24, 0x0400
    1a0e:	90 91 01 04 	lds	r25, 0x0401
    1a12:	90 93 e7 03 	sts	0x03E7, r25
    1a16:	80 93 e6 03 	sts	0x03E6, r24
				//} else {
				//	OCR4A = 0;
				//	OCR4B = 0;
				//}

				if(pwm_left > 0) {
    1a1a:	18 16       	cp	r1, r24
    1a1c:	19 06       	cpc	r1, r25
    1a1e:	d4 f5       	brge	.+116    	; 0x1a94 <main+0x18d6>
					OCR4A = (unsigned int)pwm_left;
    1a20:	90 93 a9 00 	sts	0x00A9, r25
    1a24:	80 93 a8 00 	sts	0x00A8, r24
    1a28:	ee cb       	rjmp	.-2084   	; 0x1206 <main+0x1048>
				OCR3B = 0;
			}
            if(pwm_left > 0) {
				OCR4A = (unsigned int)pwm_left;
			} else if(pwm_left < 0) {
				OCR4B =(unsigned int)( -pwm_left);
    1a2a:	90 95       	com	r25
    1a2c:	81 95       	neg	r24
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	90 93 ab 00 	sts	0x00AB, r25
    1a34:	80 93 aa 00 	sts	0x00AA, r24
    1a38:	0c 94 05 01 	jmp	0x20a	; 0x20a <main+0x4c>
			pwm_right = pwm_right_working;

			if(pwm_right > 0) {
				OCR3A = (unsigned int)pwm_right;
			} else if(pwm_right < 0) {
				OCR3B = (unsigned int)(-pwm_right);
    1a3c:	90 95       	com	r25
    1a3e:	81 95       	neg	r24
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	90 93 9b 00 	sts	0x009B, r25
    1a46:	80 93 9a 00 	sts	0x009A, r24
    1a4a:	0c 94 88 03 	jmp	0x710	; 0x710 <main+0x552>
				pwm_right_working = pwm_right_desired;
				pwm_right_desired_to_control = pwm_right_desired;

				if(robotPosition == ORIZZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_right(&pwm_right_working);
    1a4e:	8e ef       	ldi	r24, 0xFE	; 254
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	0e 94 85 13 	call	0x270a	; 0x270a <start_orizzontal_speed_control_right>
    1a56:	ed cc       	rjmp	.-1574   	; 0x1432 <main+0x1274>
				pwm_left_working = pwm_left_desired;
				pwm_left_desired_to_control = pwm_left_desired;

				if(robotPosition == ORIZZONTAL_POS) {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control_left(&pwm_left_working);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	94 e0       	ldi	r25, 0x04	; 4
    1a5c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <start_orizzontal_speed_control_left>
    1a60:	aa cc       	rjmp	.-1708   	; 0x13b6 <main+0x11f8>

				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <main+0x18aa>
    1a66:	55 c0       	rjmp	.+170    	; 0x1b12 <main+0x1954>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1a68:	10 92 a9 00 	sts	0x00A9, r1
    1a6c:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    1a70:	10 92 ab 00 	sts	0x00AB, r1
    1a74:	10 92 aa 00 	sts	0x00AA, r1
    1a78:	ae cc       	rjmp	.-1700   	; 0x13d6 <main+0x1218>
							case 2:
								obstacleAvoidanceEnabled = 0;
								cliffAvoidanceEnabled = 1;
								break;
							case 3:
								obstacleAvoidanceEnabled = 1;
    1a7a:	10 93 30 04 	sts	0x0430, r17
								cliffAvoidanceEnabled = 1;
    1a7e:	10 93 35 04 	sts	0x0435, r17
    1a82:	20 91 ec 03 	lds	r18, 0x03EC
    1a86:	30 91 ed 03 	lds	r19, 0x03ED
    1a8a:	80 91 ee 03 	lds	r24, 0x03EE
    1a8e:	90 91 ef 03 	lds	r25, 0x03EF
								break;
    1a92:	d0 c9       	rjmp	.-3168   	; 0xe34 <main+0xc76>
				//	OCR4B = 0;
				//}

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <main+0x18dc>
    1a98:	44 c0       	rjmp	.+136    	; 0x1b22 <main+0x1964>
					OCR4B =(unsigned int)( -pwm_left);
				} else {
					OCR4A = 0;
    1a9a:	10 92 a9 00 	sts	0x00A9, r1
    1a9e:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    1aa2:	10 92 ab 00 	sts	0x00AB, r1
    1aa6:	10 92 aa 00 	sts	0x00AA, r1
    1aaa:	ad cb       	rjmp	.-2214   	; 0x1206 <main+0x1048>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1aac:	60 91 5a 04 	lds	r22, 0x045A
    1ab0:	66 23       	and	r22, r22
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <main+0x190e>
    1ab4:	50 91 5b 04 	lds	r21, 0x045B
    1ab8:	3a c8       	rjmp	.-3980   	; 0xb2e <main+0x970>
				pwm_right = pwm_right_working;

				if(pwm_right > 0) {
					OCR3A = (unsigned int)pwm_right;
				} else if(pwm_right < 0) {
					OCR3B = (unsigned int)(-pwm_right);
    1aba:	90 95       	com	r25
    1abc:	81 95       	neg	r24
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	90 93 9b 00 	sts	0x009B, r25
    1ac4:	80 93 9a 00 	sts	0x009A, r24
    1ac8:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <main+0x70c>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1acc:	50 91 5b 04 	lds	r21, 0x045B
    1ad0:	55 23       	and	r21, r21
    1ad2:	79 f1       	breq	.+94     	; 0x1b32 <main+0x1974>

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1ad4:	10 92 06 04 	sts	0x0406, r1
    1ad8:	10 92 05 04 	sts	0x0405, r1
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1adc:	85 2f       	mov	r24, r21
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	8f 77       	andi	r24, 0x7F	; 127
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	90 93 04 04 	sts	0x0404, r25
    1ae8:	80 93 03 04 	sts	0x0403, r24

				sleep(60);

			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	30 c8       	rjmp	.-4000   	; 0xb52 <main+0x994>
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
					case 31:
						if(pwm_right_desired > pwm_left_desired) {
    1af2:	c9 01       	movw	r24, r18
    1af4:	87 ce       	rjmp	.-754    	; 0x1804 <main+0x1646>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 f1       	breq	.+100    	; 0x1b5e <main+0x19a0>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	29 f1       	breq	.+74     	; 0x1b48 <main+0x198a>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	b9 f1       	breq	.+110    	; 0x1b70 <main+0x19b2>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	80 93 16 02 	sts	0x0216, r24
							pwm_green = MAX_LEDS_PWM;
    1b08:	80 93 15 02 	sts	0x0215, r24
							pwm_red = MAX_LEDS_PWM;
    1b0c:	80 93 14 02 	sts	0x0214, r24
    1b10:	d3 ce       	rjmp	.-602    	; 0x18b8 <main+0x16fa>
				pwm_left = pwm_left_working;

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1b12:	90 95       	com	r25
    1b14:	81 95       	neg	r24
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	90 93 ab 00 	sts	0x00AB, r25
    1b1c:	80 93 aa 00 	sts	0x00AA, r24
    1b20:	5a cc       	rjmp	.-1868   	; 0x13d6 <main+0x1218>
				//}

				if(pwm_left > 0) {
					OCR4A = (unsigned int)pwm_left;
				} else if(pwm_left < 0) {
					OCR4B =(unsigned int)( -pwm_left);
    1b22:	90 95       	com	r25
    1b24:	81 95       	neg	r24
    1b26:	9f 4f       	sbci	r25, 0xFF	; 255
    1b28:	90 93 ab 00 	sts	0x00AB, r25
    1b2c:	80 93 aa 00 	sts	0x00AA, r24
    1b30:	6a cb       	rjmp	.-2348   	; 0x1206 <main+0x1048>
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    1b32:	8c e3       	ldi	r24, 0x3C	; 60
    1b34:	0e 94 53 18 	call	0x30a6	; 0x30a6 <sleep>
    1b38:	60 91 5a 04 	lds	r22, 0x045A
    1b3c:	50 91 5b 04 	lds	r21, 0x045B
    1b40:	40 91 56 04 	lds	r20, 0x0456
    1b44:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <main+0x970>
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    1b48:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    1b4a:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    1b4c:	5f ef       	ldi	r21, 0xFF	; 255
    1b4e:	50 93 16 02 	sts	0x0216, r21
							pwm_green = MAX_LEDS_PWM;
    1b52:	50 93 15 02 	sts	0x0215, r21
							pwm_red = 0;
    1b56:	10 92 14 02 	sts	0x0214, r1
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	ad ce       	rjmp	.-678    	; 0x18b8 <main+0x16fa>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    1b5e:	4f ef       	ldi	r20, 0xFF	; 255
    1b60:	40 93 16 02 	sts	0x0216, r20
							pwm_green = 0;
    1b64:	10 92 15 02 	sts	0x0215, r1
							pwm_red = MAX_LEDS_PWM;
    1b68:	40 93 14 02 	sts	0x0214, r20
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	a4 ce       	rjmp	.-696    	; 0x18b8 <main+0x16fa>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    1b70:	10 92 16 02 	sts	0x0216, r1
							pwm_green = 0;
    1b74:	10 92 15 02 	sts	0x0215, r1
							pwm_red = 0;
    1b78:	10 92 14 02 	sts	0x0214, r1
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	9c ce       	rjmp	.-712    	; 0x18b8 <main+0x16fa>

00001b80 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1b80:	84 b1       	in	r24, 0x04	; 4
    1b82:	80 7f       	andi	r24, 0xF0	; 240
    1b84:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1b86:	84 b1       	in	r24, 0x04	; 4
    1b88:	87 60       	ori	r24, 0x07	; 7
    1b8a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1b8c:	80 e5       	ldi	r24, 0x50	; 80
    1b8e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1b90:	8d b5       	in	r24, 0x2d	; 45
    1b92:	81 60       	ori	r24, 0x01	; 1
    1b94:	8d bd       	out	0x2d, r24	; 45

}
    1b96:	08 95       	ret

00001b98 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1b98:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1b9a:	1d bc       	out	0x2d, r1	; 45
}
    1b9c:	08 95       	ret

00001b9e <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1b9e:	44 23       	and	r20, r20
    1ba0:	79 f0       	breq	.+30     	; 0x1bc0 <SPI_ReadWrite_Block+0x22>
    1ba2:	a8 2f       	mov	r26, r24
    1ba4:	b9 2f       	mov	r27, r25
    1ba6:	e6 2f       	mov	r30, r22
    1ba8:	f7 2f       	mov	r31, r23
    1baa:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1bac:	9d 91       	ld	r25, X+
    1bae:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1bb0:	0d b4       	in	r0, 0x2d	; 45
    1bb2:	07 fe       	sbrs	r0, 7
    1bb4:	fd cf       	rjmp	.-6      	; 0x1bb0 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1bb6:	9e b5       	in	r25, 0x2e	; 46
    1bb8:	91 93       	st	Z+, r25
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bba:	8f 5f       	subi	r24, 0xFF	; 255
    1bbc:	84 17       	cp	r24, r20
    1bbe:	b0 f3       	brcs	.-20     	; 0x1bac <SPI_ReadWrite_Block+0xe>
    1bc0:	08 95       	ret

00001bc2 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bc2:	66 23       	and	r22, r22
    1bc4:	59 f0       	breq	.+22     	; 0x1bdc <SPI_Write_Block+0x1a>
    1bc6:	e8 2f       	mov	r30, r24
    1bc8:	f9 2f       	mov	r31, r25
    1bca:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1bcc:	91 91       	ld	r25, Z+
    1bce:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1bd0:	0d b4       	in	r0, 0x2d	; 45
    1bd2:	07 fe       	sbrs	r0, 7
    1bd4:	fd cf       	rjmp	.-6      	; 0x1bd0 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	86 17       	cp	r24, r22
    1bda:	c0 f3       	brcs	.-16     	; 0x1bcc <SPI_Write_Block+0xa>
    1bdc:	08 95       	ret

00001bde <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1bde:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1be0:	0d b4       	in	r0, 0x2d	; 45
    1be2:	07 fe       	sbrs	r0, 7
    1be4:	fd cf       	rjmp	.-6      	; 0x1be0 <SPI_Write_Byte+0x2>
    return SPDR;
    1be6:	8e b5       	in	r24, 0x2e	; 46
}
    1be8:	08 95       	ret

00001bea <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <mirf_config+0xa>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1bf8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bfa:	80 e2       	ldi	r24, 0x20	; 32
    1bfc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c00:	8d e0       	ldi	r24, 0x0D	; 13
    1c02:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c06:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c08:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c0a:	83 e2       	ldi	r24, 0x23	; 35
    1c0c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c16:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    1c18:	8c e0       	ldi	r24, 0x0C	; 12
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    1c1c:	84 e8       	ldi	r24, 0x84	; 132
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1c20:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1c22:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	0f 5f       	subi	r16, 0xFF	; 255
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	c8 01       	movw	r24, r16
    1c32:	63 e0       	ldi	r22, 0x03	; 3
    1c34:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <SPI_Write_Block>
    mirf_CSN_hi;
    1c38:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1c3a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c3c:	8a e2       	ldi	r24, 0x2A	; 42
    1c3e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1c42:	c8 01       	movw	r24, r16
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <SPI_Write_Block>
    mirf_CSN_hi;
    1c4a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c4c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c4e:	81 e2       	ldi	r24, 0x21	; 33
    1c50:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c5a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c5c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c5e:	82 e2       	ldi	r24, 0x22	; 34
    1c60:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c6a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c6c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c6e:	84 e2       	ldi	r24, 0x24	; 36
    1c70:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c74:	82 e1       	ldi	r24, 0x12	; 18
    1c76:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c7a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c7c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c7e:	85 e2       	ldi	r24, 0x25	; 37
    1c80:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c84:	88 e2       	ldi	r24, 0x28	; 40
    1c86:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c8a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c8c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c8e:	81 e3       	ldi	r24, 0x31	; 49
    1c90:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c94:	8d e0       	ldi	r24, 0x0D	; 13
    1c96:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1c9a:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1c9c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1c9e:	80 e5       	ldi	r24, 0x50	; 80
    1ca0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1ca4:	83 e7       	ldi	r24, 0x73	; 115
    1ca6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1caa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cae:	8c e3       	ldi	r24, 0x3C	; 60
    1cb0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1cba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cbc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cbe:	8d e3       	ldi	r24, 0x3D	; 61
    1cc0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cc4:	86 e0       	ldi	r24, 0x06	; 6
    1cc6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1cca:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ccc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cd4:	8f e0       	ldi	r24, 0x0F	; 15
    1cd6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1cda:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1cec:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1cee:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1cf0:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <mirf_config>
}
    1cf4:	08 95       	ret

00001cf6 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1cfc:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1cfe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d00:	8a e2       	ldi	r24, 0x2A	; 42
    1d02:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d06:	ce 01       	movw	r24, r28
    1d08:	65 e0       	ldi	r22, 0x05	; 5
    1d0a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <SPI_Write_Block>
    mirf_CSN_hi;
    1d0e:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1d10:	2c 9a       	sbi	0x05, 4	; 5
}
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1d1e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d26:	ce 01       	movw	r24, r28
    1d28:	65 e0       	ldi	r22, 0x05	; 5
    1d2a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <SPI_Write_Block>
    mirf_CSN_hi;
    1d2e:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1d36:	80 91 39 04 	lds	r24, 0x0439
    1d3a:	88 23       	and	r24, r24
    1d3c:	11 f0       	breq	.+4      	; 0x1d42 <mirf_data_ready+0xc>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1d40:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1d42:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1d4a:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1d4c:	80 74       	andi	r24, 0x40	; 64
    1d4e:	08 95       	ret

00001d50 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1d5a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1d5c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1d5e:	87 e1       	ldi	r24, 0x17	; 23
    1d60:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1d64:	be 01       	movw	r22, r28
    1d66:	6f 5f       	subi	r22, 0xFF	; 255
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1d72:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d76:	81 70       	andi	r24, 0x01	; 1
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1d80:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1d82:	82 ee       	ldi	r24, 0xE2	; 226
    1d84:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1d88:	28 9a       	sbi	0x05, 0	; 5

}
    1d8a:	08 95       	ret

00001d8c <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1d92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1d94:	81 e6       	ldi	r24, 0x61	; 97
    1d96:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	be 01       	movw	r22, r28
    1d9e:	4d e0       	ldi	r20, 0x0D	; 13
    1da0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1da4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1da6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1da8:	87 e2       	ldi	r24, 0x27	; 39
    1daa:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dae:	80 e4       	ldi	r24, 0x40	; 64
    1db0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1db4:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1dc6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dc8:	8f 71       	andi	r24, 0x1F	; 31
    1dca:	80 62       	ori	r24, 0x20	; 32
    1dcc:	69 83       	std	Y+1, r22	; 0x01
    1dce:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dd2:	69 81       	ldd	r22, Y+1	; 0x01
    1dd4:	86 2f       	mov	r24, r22
    1dd6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1dda:	28 9a       	sbi	0x05, 0	; 5
}
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	0f 92       	push	r0
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1df4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1df6:	8f 71       	andi	r24, 0x1F	; 31
    1df8:	49 83       	std	Y+1, r20	; 0x01
    1dfa:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1dfe:	c8 01       	movw	r24, r16
    1e00:	b8 01       	movw	r22, r16
    1e02:	49 81       	ldd	r20, Y+1	; 0x01
    1e04:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1e08:	28 9a       	sbi	0x05, 0	; 5
}
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1e26:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e28:	8f 71       	andi	r24, 0x1F	; 31
    1e2a:	80 62       	ori	r24, 0x20	; 32
    1e2c:	49 83       	std	Y+1, r20	; 0x01
    1e2e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e32:	c8 01       	movw	r24, r16
    1e34:	49 81       	ldd	r20, Y+1	; 0x01
    1e36:	64 2f       	mov	r22, r20
    1e38:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <SPI_Write_Block>
    mirf_CSN_hi;
    1e3c:	28 9a       	sbi	0x05, 0	; 5
}
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1e5a:	80 91 39 04 	lds	r24, 0x0439
    1e5e:	88 23       	and	r24, r24
    1e60:	e1 f7       	brne	.-8      	; 0x1e5a <mirf_send+0x10>

    mirf_CE_lo;
    1e62:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 39 04 	sts	0x0439, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e6c:	80 e2       	ldi	r24, 0x20	; 32
    1e6e:	69 83       	std	Y+1, r22	; 0x01
    1e70:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e74:	8a e4       	ldi	r24, 0x4A	; 74
    1e76:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1e7a:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1e7c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1e7e:	81 ee       	ldi	r24, 0xE1	; 225
    1e80:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1e84:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1e86:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1e88:	80 ea       	ldi	r24, 0xA0	; 160
    1e8a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1e8e:	c8 01       	movw	r24, r16
    1e90:	69 81       	ldd	r22, Y+1	; 0x01
    1e92:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1e96:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1e98:	2c 9a       	sbi	0x05, 4	; 5
}
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	0f 92       	push	r0
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	18 2f       	mov	r17, r24
    1eba:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1ebc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1ebe:	81 ee       	ldi	r24, 0xE1	; 225
    1ec0:	99 83       	std	Y+1, r25	; 0x01
    1ec2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1ec6:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1ec8:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1eca:	88 ea       	ldi	r24, 0xA8	; 168
    1ecc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1ed0:	99 81       	ldd	r25, Y+1	; 0x01
    1ed2:	00 23       	and	r16, r16
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <writeAckPayload+0x48>
    1ed6:	61 2f       	mov	r22, r17
    1ed8:	79 2f       	mov	r23, r25
    1eda:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1edc:	f7 01       	movw	r30, r14
    1ede:	81 91       	ld	r24, Z+
    1ee0:	7f 01       	movw	r14, r30
    1ee2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1ee6:	8e 2d       	mov	r24, r14
    1ee8:	81 1b       	sub	r24, r17
    1eea:	80 17       	cp	r24, r16
    1eec:	b8 f3       	brcs	.-18     	; 0x1edc <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1eee:	28 9a       	sbi	0x05, 0	; 5


}
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	08 95       	ret

00001f00 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1f00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1f02:	81 ee       	ldi	r24, 0xE1	; 225
    1f04:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <SPI_Write_Byte>
    mirf_CSN_hi;
    1f08:	28 9a       	sbi	0x05, 0	; 5

}
    1f0a:	08 95       	ret

00001f0c <e_init_remote_control>:


/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) { 	// initialisation for IR interruptions on PCINT1 (external interrupt)

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1f0c:	e8 e6       	ldi	r30, 0x68	; 104
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	82 60       	ori	r24, 0x02	; 2
    1f14:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1f16:	ec e6       	ldi	r30, 0x6C	; 108
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1f20:	e0 eb       	ldi	r30, 0xB0	; 176
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	82 60       	ori	r24, 0x02	; 2
    1f28:	80 83       	st	Z, r24

}
    1f2a:	08 95       	ret

00001f2c <__vector_10>:

ISR(PCINT1_vect) {
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	8f 93       	push	r24

	if(irEnabled) {		// if the robot is configured to accept TV remote commands
    1f38:	80 91 19 02 	lds	r24, 0x0219
    1f3c:	88 23       	and	r24, r24
    1f3e:	21 f1       	breq	.+72     	; 0x1f88 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1f40:	80 91 03 01 	lds	r24, 0x0103
    1f44:	86 fd       	sbrc	r24, 6
    1f46:	20 c0       	rjmp	.+64     	; 0x1f88 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1f48:	80 91 68 00 	lds	r24, 0x0068
    1f4c:	8d 7f       	andi	r24, 0xFD	; 253
    1f4e:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1f52:	80 91 6c 00 	lds	r24, 0x006C
    1f56:	8f 77       	andi	r24, 0x7F	; 127
    1f58:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	80 93 1a 02 	sts	0x021A, r24
			OCR2A = 13;									// output compare register
    1f62:	8d e0       	ldi	r24, 0x0D	; 13
    1f64:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1f68:	80 91 b1 00 	lds	r24, 0x00B1
    1f6c:	86 60       	ori	r24, 0x06	; 6
    1f6e:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1f72:	80 91 70 00 	lds	r24, 0x0070
    1f76:	82 60       	ori	r24, 0x02	; 2
    1f78:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1f7c:	10 92 2c 03 	sts	0x032C, r1
    1f80:	10 92 2d 03 	sts	0x032D, r1
    1f84:	10 92 2e 03 	sts	0x032E, r1

		}

	}
	
}
    1f88:	8f 91       	pop	r24
    1f8a:	0f 90       	pop	r0
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	0f 90       	pop	r0
    1f90:	1f 90       	pop	r1
    1f92:	18 95       	reti

00001f94 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1f94:	1f 92       	push	r1
    1f96:	0f 92       	push	r0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	0f 92       	push	r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	2f 93       	push	r18
    1fa0:	3f 93       	push	r19
    1fa2:	4f 93       	push	r20
    1fa4:	5f 93       	push	r21
    1fa6:	8f 93       	push	r24
    1fa8:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1faa:	80 91 b1 00 	lds	r24, 0x00B1
    1fae:	88 7f       	andi	r24, 0xF8	; 248
    1fb0:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1fb4:	80 91 1a 02 	lds	r24, 0x021A
    1fb8:	88 23       	and	r24, r24
    1fba:	a9 f0       	breq	.+42     	; 0x1fe6 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1fbc:	80 91 03 01 	lds	r24, 0x0103
    1fc0:	86 ff       	sbrs	r24, 6
    1fc2:	65 c0       	rjmp	.+202    	; 0x208e <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1fc4:	80 91 68 00 	lds	r24, 0x0068
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1fce:	80 91 6c 00 	lds	r24, 0x006C
    1fd2:	80 68       	ori	r24, 0x80	; 128
    1fd4:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	90 93 02 02 	sts	0x0202, r25
    1fe0:	80 93 01 02 	sts	0x0201, r24
    1fe4:	49 c0       	rjmp	.+146    	; 0x2078 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1fe6:	80 91 01 02 	lds	r24, 0x0201
    1fea:	90 91 02 02 	lds	r25, 0x0202
    1fee:	2f ef       	ldi	r18, 0xFF	; 255
    1ff0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff2:	92 07       	cpc	r25, r18
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <__vector_13+0x64>
    1ff6:	63 c0       	rjmp	.+198    	; 0x20be <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <__vector_13+0x6c>
    1ffe:	98 c0       	rjmp	.+304    	; 0x2130 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2000:	9c 01       	movw	r18, r24
    2002:	22 50       	subi	r18, 0x02	; 2
    2004:	30 40       	sbci	r19, 0x00	; 0
    2006:	25 30       	cpi	r18, 0x05	; 5
    2008:	31 05       	cpc	r19, r1
    200a:	08 f4       	brcc	.+2      	; 0x200e <__vector_13+0x7a>
    200c:	67 c0       	rjmp	.+206    	; 0x20dc <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    200e:	9c 01       	movw	r18, r24
    2010:	27 50       	subi	r18, 0x07	; 7
    2012:	30 40       	sbci	r19, 0x00	; 0
    2014:	26 30       	cpi	r18, 0x06	; 6
    2016:	31 05       	cpc	r19, r1
    2018:	08 f0       	brcs	.+2      	; 0x201c <__vector_13+0x88>
    201a:	bd c0       	rjmp	.+378    	; 0x2196 <__vector_13+0x202>

				OCR2A = 54;
    201c:	26 e3       	ldi	r18, 0x36	; 54
    201e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2022:	20 91 b1 00 	lds	r18, 0x00B1
    2026:	26 60       	ori	r18, 0x06	; 6
    2028:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    202c:	20 91 70 00 	lds	r18, 0x0070
    2030:	22 60       	ori	r18, 0x02	; 2
    2032:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2036:	20 91 03 01 	lds	r18, 0x0103
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	20 74       	andi	r18, 0x40	; 64
    203e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2040:	00 24       	eor	r0, r0
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	00 1c       	adc	r0, r0
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	00 1c       	adc	r0, r0
    204e:	23 2f       	mov	r18, r19
    2050:	30 2d       	mov	r19, r0
    2052:	4c e0       	ldi	r20, 0x0C	; 12
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	48 1b       	sub	r20, r24
    2058:	59 0b       	sbc	r21, r25
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <__vector_13+0xcc>
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	4a 95       	dec	r20
    2062:	e2 f7       	brpl	.-8      	; 0x205c <__vector_13+0xc8>
				data_temp += temp;
    2064:	40 91 2c 03 	lds	r20, 0x032C
    2068:	42 0f       	add	r20, r18
    206a:	40 93 2c 03 	sts	0x032C, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    206e:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2070:	90 93 02 02 	sts	0x0202, r25
    2074:	80 93 01 02 	sts	0x0201, r24

		}

}
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	5f 91       	pop	r21
    207e:	4f 91       	pop	r20
    2080:	3f 91       	pop	r19
    2082:	2f 91       	pop	r18
    2084:	0f 90       	pop	r0
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	0f 90       	pop	r0
    208a:	1f 90       	pop	r1
    208c:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    208e:	10 92 1a 02 	sts	0x021A, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2092:	83 e3       	ldi	r24, 0x33	; 51
    2094:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2098:	80 91 b1 00 	lds	r24, 0x00B1
    209c:	86 60       	ori	r24, 0x06	; 6
    209e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    20a2:	80 91 70 00 	lds	r24, 0x0070
    20a6:	82 60       	ori	r24, 0x02	; 2
    20a8:	80 93 70 00 	sts	0x0070, r24
    20ac:	80 91 01 02 	lds	r24, 0x0201
    20b0:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    20b4:	2f ef       	ldi	r18, 0xFF	; 255
    20b6:	8f 3f       	cpi	r24, 0xFF	; 255
    20b8:	92 07       	cpc	r25, r18
    20ba:	c9 f6       	brne	.-78     	; 0x206e <__vector_13+0xda>
    20bc:	dd cf       	rjmp	.-70     	; 0x2078 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    20be:	20 91 03 01 	lds	r18, 0x0103
    20c2:	26 ff       	sbrs	r18, 6
    20c4:	52 c0       	rjmp	.+164    	; 0x216a <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    20c6:	20 91 68 00 	lds	r18, 0x0068
    20ca:	22 60       	ori	r18, 0x02	; 2
    20cc:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    20d0:	20 91 6c 00 	lds	r18, 0x006C
    20d4:	20 68       	ori	r18, 0x80	; 128
    20d6:	20 93 6c 00 	sts	0x006C, r18
    20da:	ce cf       	rjmp	.-100    	; 0x2078 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    20dc:	26 e3       	ldi	r18, 0x36	; 54
    20de:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    20e2:	20 91 b1 00 	lds	r18, 0x00B1
    20e6:	26 60       	ori	r18, 0x06	; 6
    20e8:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    20ec:	20 91 70 00 	lds	r18, 0x0070
    20f0:	22 60       	ori	r18, 0x02	; 2
    20f2:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    20f6:	20 91 03 01 	lds	r18, 0x0103
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	20 74       	andi	r18, 0x40	; 64
    20fe:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2100:	00 24       	eor	r0, r0
    2102:	22 0f       	add	r18, r18
    2104:	33 1f       	adc	r19, r19
    2106:	00 1c       	adc	r0, r0
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	00 1c       	adc	r0, r0
    210e:	23 2f       	mov	r18, r19
    2110:	30 2d       	mov	r19, r0
    2112:	46 e0       	ldi	r20, 0x06	; 6
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	48 1b       	sub	r20, r24
    2118:	59 0b       	sbc	r21, r25
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <__vector_13+0x18c>
    211c:	22 0f       	add	r18, r18
    211e:	33 1f       	adc	r19, r19
    2120:	4a 95       	dec	r20
    2122:	e2 f7       	brpl	.-8      	; 0x211c <__vector_13+0x188>
				address_temp += temp;
    2124:	40 91 2d 03 	lds	r20, 0x032D
    2128:	42 0f       	add	r20, r18
    212a:	40 93 2d 03 	sts	0x032D, r20
    212e:	9f cf       	rjmp	.-194    	; 0x206e <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2130:	20 91 03 01 	lds	r18, 0x0103
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	20 74       	andi	r18, 0x40	; 64
    2138:	30 70       	andi	r19, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	23 2f       	mov	r18, r19
    213e:	00 0c       	add	r0, r0
    2140:	22 1f       	adc	r18, r18
    2142:	33 0b       	sbc	r19, r19
    2144:	00 0c       	add	r0, r0
    2146:	22 1f       	adc	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	20 93 2e 03 	sts	0x032E, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    214e:	26 e3       	ldi	r18, 0x36	; 54
    2150:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2154:	20 91 b1 00 	lds	r18, 0x00B1
    2158:	26 60       	ori	r18, 0x06	; 6
    215a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    215e:	20 91 70 00 	lds	r18, 0x0070
    2162:	22 60       	ori	r18, 0x02	; 2
    2164:	20 93 70 00 	sts	0x0070, r18
    2168:	82 cf       	rjmp	.-252    	; 0x206e <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    216a:	8c e1       	ldi	r24, 0x1C	; 28
    216c:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2170:	80 91 b1 00 	lds	r24, 0x00B1
    2174:	86 60       	ori	r24, 0x06	; 6
    2176:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    217a:	80 91 70 00 	lds	r24, 0x0070
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2184:	10 92 2c 03 	sts	0x032C, r1
    2188:	10 92 2d 03 	sts	0x032D, r1
    218c:	10 92 2e 03 	sts	0x032E, r1
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	6d cf       	rjmp	.-294    	; 0x2070 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2196:	8d 30       	cpi	r24, 0x0D	; 13
    2198:	91 05       	cpc	r25, r1
    219a:	09 f0       	breq	.+2      	; 0x219e <__vector_13+0x20a>
    219c:	68 cf       	rjmp	.-304    	; 0x206e <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    219e:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    21a2:	80 91 68 00 	lds	r24, 0x0068
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    21ac:	80 91 6c 00 	lds	r24, 0x006C
    21b0:	80 68       	ori	r24, 0x80	; 128
    21b2:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	9f ef       	ldi	r25, 0xFF	; 255
    21ba:	90 93 02 02 	sts	0x0202, r25
    21be:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    21c2:	80 91 2e 03 	lds	r24, 0x032E
    21c6:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    21ca:	80 91 2d 03 	lds	r24, 0x032D
    21ce:	80 93 2a 03 	sts	0x032A, r24
				data_ir = data_temp;
    21d2:	80 91 2c 03 	lds	r24, 0x032C
    21d6:	80 93 2b 03 	sts	0x032B, r24
				command_received=1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	80 93 0a 04 	sts	0x040A, r24
    21e0:	4b cf       	rjmp	.-362    	; 0x2078 <__vector_13+0xe4>

000021e2 <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    21e2:	80 91 00 02 	lds	r24, 0x0200
    21e6:	08 95       	ret

000021e8 <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    21e8:	80 91 2a 03 	lds	r24, 0x032A
    21ec:	08 95       	ret

000021ee <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    21ee:	80 91 2b 03 	lds	r24, 0x032B
    21f2:	08 95       	ret

000021f4 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    21f4:	08 95       	ret

000021f6 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	09 f4       	brne	.+2      	; 0x220a <__stack+0xb>
    2208:	b7 c0       	rjmp	.+366    	; 0x2378 <__stack+0x179>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    220a:	20 91 20 04 	lds	r18, 0x0420
    220e:	30 91 21 04 	lds	r19, 0x0421
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	2e 30       	cpi	r18, 0x0E	; 14
    2216:	34 07       	cpc	r19, r20
    2218:	0c f4       	brge	.+2      	; 0x221c <__stack+0x1d>
    221a:	88 c0       	rjmp	.+272    	; 0x232c <__stack+0x12d>
		if(*pwm_left > 0) {
    221c:	18 16       	cp	r1, r24
    221e:	19 06       	cpc	r1, r25
    2220:	0c f0       	brlt	.+2      	; 0x2224 <__stack+0x25>
    2222:	13 c1       	rjmp	.+550    	; 0x244a <__stack+0x24b>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2224:	88 e6       	ldi	r24, 0x68	; 104
    2226:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2228:	82 1b       	sub	r24, r18
    222a:	93 0b       	sbc	r25, r19
    222c:	95 95       	asr	r25
    222e:	87 95       	ror	r24
    2230:	95 95       	asr	r25
    2232:	87 95       	ror	r24
    2234:	29 e1       	ldi	r18, 0x19	; 25
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	28 1b       	sub	r18, r24
    223a:	39 0b       	sbc	r19, r25
    223c:	30 93 0c 02 	sts	0x020C, r19
    2240:	20 93 0b 02 	sts	0x020B, r18
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_left_speed_prev = delta_left_speed_current; 
    2244:	40 91 3a 04 	lds	r20, 0x043A
    2248:	50 91 3b 04 	lds	r21, 0x043B
    224c:	50 93 55 04 	sts	0x0455, r21
    2250:	40 93 54 04 	sts	0x0454, r20
	if(*pwm_left >= 0) {
    2254:	20 81       	ld	r18, Z
    2256:	31 81       	ldd	r19, Z+1	; 0x01
    2258:	37 fd       	sbrc	r19, 7
    225a:	d2 c0       	rjmp	.+420    	; 0x2400 <__stack+0x201>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    225c:	80 91 e0 03 	lds	r24, 0x03E0
    2260:	90 91 e1 03 	lds	r25, 0x03E1
    2264:	b9 01       	movw	r22, r18
    2266:	68 1b       	sub	r22, r24
    2268:	79 0b       	sbc	r23, r25
    226a:	cb 01       	movw	r24, r22
    226c:	70 93 3b 04 	sts	0x043B, r23
    2270:	60 93 3a 04 	sts	0x043A, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    2274:	20 91 f8 03 	lds	r18, 0x03F8
    2278:	30 91 f9 03 	lds	r19, 0x03F9
    227c:	28 0f       	add	r18, r24
    227e:	39 1f       	adc	r19, r25
    2280:	30 93 f9 03 	sts	0x03F9, r19
    2284:	20 93 f8 03 	sts	0x03F8, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2288:	76 e0       	ldi	r23, 0x06	; 6
    228a:	21 34       	cpi	r18, 0x41	; 65
    228c:	37 07       	cpc	r19, r23
    228e:	0c f4       	brge	.+2      	; 0x2292 <__stack+0x93>
    2290:	84 c0       	rjmp	.+264    	; 0x239a <__stack+0x19b>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2292:	20 e4       	ldi	r18, 0x40	; 64
    2294:	36 e0       	ldi	r19, 0x06	; 6
    2296:	30 93 f9 03 	sts	0x03F9, r19
    229a:	20 93 f8 03 	sts	0x03F8, r18
    229e:	60 ec       	ldi	r22, 0xC0	; 192
    22a0:	72 e1       	ldi	r23, 0x12	; 18
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    22a2:	9c 01       	movw	r18, r24
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	dc 01       	movw	r26, r24
    22aa:	aa 0f       	add	r26, r26
    22ac:	bb 1f       	adc	r27, r27
    22ae:	aa 0f       	add	r26, r26
    22b0:	bb 1f       	adc	r27, r27
    22b2:	aa 0f       	add	r26, r26
    22b4:	bb 1f       	adc	r27, r27
    22b6:	2a 0f       	add	r18, r26
    22b8:	3b 1f       	adc	r19, r27
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
    22ba:	00 81       	ld	r16, Z
    22bc:	11 81       	ldd	r17, Z+1	; 0x01
    22be:	c0 91 0b 02 	lds	r28, 0x020B
    22c2:	d0 91 0c 02 	lds	r29, 0x020C
    22c6:	0c 9f       	mul	r16, r28
    22c8:	d0 01       	movw	r26, r0
    22ca:	0d 9f       	mul	r16, r29
    22cc:	b0 0d       	add	r27, r0
    22ce:	1c 9f       	mul	r17, r28
    22d0:	b0 0d       	add	r27, r0
    22d2:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    22d4:	2a 0f       	add	r18, r26
    22d6:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    22d8:	48 1b       	sub	r20, r24
    22da:	59 0b       	sbc	r21, r25
    22dc:	44 0f       	add	r20, r20
    22de:	55 1f       	adc	r21, r21
    22e0:	24 0f       	add	r18, r20
    22e2:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    22e4:	26 0f       	add	r18, r22
    22e6:	37 1f       	adc	r19, r23
    22e8:	30 93 f3 03 	sts	0x03F3, r19
    22ec:	20 93 f2 03 	sts	0x03F2, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    22f0:	37 fd       	sbrc	r19, 7
    22f2:	69 c0       	rjmp	.+210    	; 0x23c6 <__stack+0x1c7>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    22f4:	12 16       	cp	r1, r18
    22f6:	13 06       	cpc	r1, r19
    22f8:	0c f0       	brlt	.+2      	; 0x22fc <__stack+0xfd>
    22fa:	6f c0       	rjmp	.+222    	; 0x23da <__stack+0x1db>
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	97 fd       	sbrc	r25, 7
    2302:	89 c0       	rjmp	.+274    	; 0x2416 <__stack+0x217>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2304:	7d e5       	ldi	r23, 0x5D	; 93
    2306:	21 3c       	cpi	r18, 0xC1	; 193
    2308:	37 07       	cpc	r19, r23
    230a:	0c f4       	brge	.+2      	; 0x230e <__stack+0x10f>
    230c:	66 c0       	rjmp	.+204    	; 0x23da <__stack+0x1db>
    230e:	80 ec       	ldi	r24, 0xC0	; 192
    2310:	9d e5       	ldi	r25, 0x5D	; 93
    2312:	90 93 f3 03 	sts	0x03F3, r25
    2316:	80 93 f2 03 	sts	0x03F2, r24
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	92 e0       	ldi	r25, 0x02	; 2
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    232c:	24 3b       	cpi	r18, 0xB4	; 180
    232e:	31 05       	cpc	r19, r1
    2330:	94 f4       	brge	.+36     	; 0x2356 <__stack+0x157>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    2332:	2a 35       	cpi	r18, 0x5A	; 90
    2334:	31 05       	cpc	r19, r1
    2336:	7c f4       	brge	.+30     	; 0x2356 <__stack+0x157>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2338:	18 16       	cp	r1, r24
    233a:	19 06       	cpc	r1, r25
    233c:	0c f0       	brlt	.+2      	; 0x2340 <__stack+0x141>
    233e:	93 c0       	rjmp	.+294    	; 0x2466 <__stack+0x267>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2340:	35 95       	asr	r19
    2342:	27 95       	ror	r18
    2344:	35 95       	asr	r19
    2346:	27 95       	ror	r18
    2348:	27 5e       	subi	r18, 0xE7	; 231
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
    234c:	30 93 0c 02 	sts	0x020C, r19
    2350:	20 93 0b 02 	sts	0x020B, r18
    2354:	77 cf       	rjmp	.-274    	; 0x2244 <__stack+0x45>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
    2356:	18 16       	cp	r1, r24
    2358:	19 06       	cpc	r1, r25
    235a:	94 f5       	brge	.+100    	; 0x23c0 <__stack+0x1c1>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    235c:	84 eb       	ldi	r24, 0xB4	; 180
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	82 1b       	sub	r24, r18
    2362:	93 0b       	sbc	r25, r19
    2364:	95 95       	asr	r25
    2366:	87 95       	ror	r24
    2368:	95 95       	asr	r25
    236a:	87 95       	ror	r24
    236c:	49 96       	adiw	r24, 0x19	; 25
    236e:	90 93 0c 02 	sts	0x020C, r25
    2372:	80 93 0b 02 	sts	0x020B, r24
    2376:	66 cf       	rjmp	.-308    	; 0x2244 <__stack+0x45>
}

void start_vertical_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    2378:	10 92 f9 03 	sts	0x03F9, r1
    237c:	10 92 f8 03 	sts	0x03F8, r1
		delta_left_speed_current = 0;
    2380:	10 92 3b 04 	sts	0x043B, r1
    2384:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    2388:	10 92 55 04 	sts	0x0455, r1
    238c:	10 92 54 04 	sts	0x0454, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    239a:	69 ef       	ldi	r22, 0xF9	; 249
    239c:	20 3c       	cpi	r18, 0xC0	; 192
    239e:	36 07       	cpc	r19, r22
    23a0:	4c f4       	brge	.+18     	; 0x23b4 <__stack+0x1b5>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    23a2:	20 ec       	ldi	r18, 0xC0	; 192
    23a4:	39 ef       	ldi	r19, 0xF9	; 249
    23a6:	30 93 f9 03 	sts	0x03F9, r19
    23aa:	20 93 f8 03 	sts	0x03F8, r18
    23ae:	60 e4       	ldi	r22, 0x40	; 64
    23b0:	7d ee       	ldi	r23, 0xED	; 237
    23b2:	77 cf       	rjmp	.-274    	; 0x22a2 <__stack+0xa3>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    23b4:	b9 01       	movw	r22, r18
    23b6:	66 0f       	add	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	62 0f       	add	r22, r18
    23bc:	73 1f       	adc	r23, r19
    23be:	71 cf       	rjmp	.-286    	; 0x22a2 <__stack+0xa3>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    23c0:	84 eb       	ldi	r24, 0xB4	; 180
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	31 cf       	rjmp	.-414    	; 0x2228 <__stack+0x29>
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left)); //((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	97 fd       	sbrc	r25, 7
    23cc:	06 c0       	rjmp	.+12     	; 0x23da <__stack+0x1db>
		pwm_left_speed_controller = 0;
    23ce:	10 92 f3 03 	sts	0x03F3, r1
    23d2:	10 92 f2 03 	sts	0x03F2, r1
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    23da:	82 ea       	ldi	r24, 0xA2	; 162
    23dc:	20 34       	cpi	r18, 0x40	; 64
    23de:	38 07       	cpc	r19, r24
    23e0:	04 f5       	brge	.+64     	; 0x2422 <__stack+0x223>
    23e2:	80 e4       	ldi	r24, 0x40	; 64
    23e4:	92 ea       	ldi	r25, 0xA2	; 162
    23e6:	90 93 f3 03 	sts	0x03F3, r25
    23ea:	80 93 f2 03 	sts	0x03F2, r24
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	9e ef       	ldi	r25, 0xFE	; 254
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24


}
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	08 95       	ret

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2400:	80 91 e0 03 	lds	r24, 0x03E0
    2404:	90 91 e1 03 	lds	r25, 0x03E1
    2408:	82 0f       	add	r24, r18
    240a:	93 1f       	adc	r25, r19
    240c:	90 93 3b 04 	sts	0x043B, r25
    2410:	80 93 3a 04 	sts	0x043A, r24
    2414:	2f cf       	rjmp	.-418    	; 0x2274 <__stack+0x75>

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2416:	10 92 f3 03 	sts	0x03F3, r1
    241a:	10 92 f2 03 	sts	0x03F2, r1
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2422:	35 95       	asr	r19
    2424:	27 95       	ror	r18
    2426:	35 95       	asr	r19
    2428:	27 95       	ror	r18
    242a:	35 95       	asr	r19
    242c:	27 95       	ror	r18
    242e:	35 95       	asr	r19
    2430:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2432:	31 83       	std	Z+1, r19	; 0x01
    2434:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2436:	42 e0       	ldi	r20, 0x02	; 2
    2438:	21 30       	cpi	r18, 0x01	; 1
    243a:	34 07       	cpc	r19, r20
    243c:	0c f0       	brlt	.+2      	; 0x2440 <__stack+0x241>
    243e:	6d cf       	rjmp	.-294    	; 0x231a <__stack+0x11b>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2440:	6e ef       	ldi	r22, 0xFE	; 254
    2442:	20 30       	cpi	r18, 0x00	; 0
    2444:	36 07       	cpc	r19, r22
    2446:	9c f2       	brlt	.-90     	; 0x23ee <__stack+0x1ef>
    2448:	6c cf       	rjmp	.-296    	; 0x2322 <__stack+0x123>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    244a:	88 e6       	ldi	r24, 0x68	; 104
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	82 1b       	sub	r24, r18
    2450:	93 0b       	sbc	r25, r19
    2452:	95 95       	asr	r25
    2454:	87 95       	ror	r24
    2456:	95 95       	asr	r25
    2458:	87 95       	ror	r24
    245a:	49 96       	adiw	r24, 0x19	; 25
    245c:	90 93 0c 02 	sts	0x020C, r25
    2460:	80 93 0b 02 	sts	0x020B, r24
    2464:	ef ce       	rjmp	.-546    	; 0x2244 <__stack+0x45>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2466:	35 95       	asr	r19
    2468:	27 95       	ror	r18
    246a:	35 95       	asr	r19
    246c:	27 95       	ror	r18
    246e:	89 e1       	ldi	r24, 0x19	; 25
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	82 1b       	sub	r24, r18
    2474:	93 0b       	sbc	r25, r19
    2476:	90 93 0c 02 	sts	0x020C, r25
    247a:	80 93 0b 02 	sts	0x020B, r24
    247e:	e2 ce       	rjmp	.-572    	; 0x2244 <__stack+0x45>

00002480 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	09 f4       	brne	.+2      	; 0x2494 <start_vertical_speed_control_right+0x14>
    2492:	b7 c0       	rjmp	.+366    	; 0x2602 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2494:	20 91 20 04 	lds	r18, 0x0420
    2498:	30 91 21 04 	lds	r19, 0x0421
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	2e 30       	cpi	r18, 0x0E	; 14
    24a0:	34 07       	cpc	r19, r20
    24a2:	0c f4       	brge	.+2      	; 0x24a6 <start_vertical_speed_control_right+0x26>
    24a4:	88 c0       	rjmp	.+272    	; 0x25b6 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    24a6:	18 16       	cp	r1, r24
    24a8:	19 06       	cpc	r1, r25
    24aa:	0c f0       	brlt	.+2      	; 0x24ae <start_vertical_speed_control_right+0x2e>
    24ac:	13 c1       	rjmp	.+550    	; 0x26d4 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    24ae:	88 e6       	ldi	r24, 0x68	; 104
    24b0:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    24b2:	82 1b       	sub	r24, r18
    24b4:	93 0b       	sbc	r25, r19
    24b6:	95 95       	asr	r25
    24b8:	87 95       	ror	r24
    24ba:	95 95       	asr	r25
    24bc:	87 95       	ror	r24
    24be:	29 e1       	ldi	r18, 0x19	; 25
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	28 1b       	sub	r18, r24
    24c4:	39 0b       	sbc	r19, r25
    24c6:	30 93 0e 02 	sts	0x020E, r19
    24ca:	20 93 0d 02 	sts	0x020D, r18
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	delta_right_speed_prev = delta_right_speed_current;
    24ce:	40 91 63 04 	lds	r20, 0x0463
    24d2:	50 91 64 04 	lds	r21, 0x0464
    24d6:	50 93 3d 04 	sts	0x043D, r21
    24da:	40 93 3c 04 	sts	0x043C, r20
	if(*pwm_right >= 0) {
    24de:	20 81       	ld	r18, Z
    24e0:	31 81       	ldd	r19, Z+1	; 0x01
    24e2:	37 fd       	sbrc	r19, 7
    24e4:	d2 c0       	rjmp	.+420    	; 0x268a <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    24e6:	80 91 e2 03 	lds	r24, 0x03E2
    24ea:	90 91 e3 03 	lds	r25, 0x03E3
    24ee:	b9 01       	movw	r22, r18
    24f0:	68 1b       	sub	r22, r24
    24f2:	79 0b       	sbc	r23, r25
    24f4:	cb 01       	movw	r24, r22
    24f6:	70 93 64 04 	sts	0x0464, r23
    24fa:	60 93 63 04 	sts	0x0463, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    24fe:	20 91 fa 03 	lds	r18, 0x03FA
    2502:	30 91 fb 03 	lds	r19, 0x03FB
    2506:	28 0f       	add	r18, r24
    2508:	39 1f       	adc	r19, r25
    250a:	30 93 fb 03 	sts	0x03FB, r19
    250e:	20 93 fa 03 	sts	0x03FA, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2512:	76 e0       	ldi	r23, 0x06	; 6
    2514:	21 34       	cpi	r18, 0x41	; 65
    2516:	37 07       	cpc	r19, r23
    2518:	0c f4       	brge	.+2      	; 0x251c <start_vertical_speed_control_right+0x9c>
    251a:	84 c0       	rjmp	.+264    	; 0x2624 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    251c:	20 e4       	ldi	r18, 0x40	; 64
    251e:	36 e0       	ldi	r19, 0x06	; 6
    2520:	30 93 fb 03 	sts	0x03FB, r19
    2524:	20 93 fa 03 	sts	0x03FA, r18
    2528:	60 ec       	ldi	r22, 0xC0	; 192
    252a:	72 e1       	ldi	r23, 0x12	; 18
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    252c:	9c 01       	movw	r18, r24
    252e:	22 0f       	add	r18, r18
    2530:	33 1f       	adc	r19, r19
    2532:	dc 01       	movw	r26, r24
    2534:	aa 0f       	add	r26, r26
    2536:	bb 1f       	adc	r27, r27
    2538:	aa 0f       	add	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	aa 0f       	add	r26, r26
    253e:	bb 1f       	adc	r27, r27
    2540:	2a 0f       	add	r18, r26
    2542:	3b 1f       	adc	r19, r27
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2544:	00 81       	ld	r16, Z
    2546:	11 81       	ldd	r17, Z+1	; 0x01
    2548:	c0 91 0d 02 	lds	r28, 0x020D
    254c:	d0 91 0e 02 	lds	r29, 0x020E
    2550:	0c 9f       	mul	r16, r28
    2552:	d0 01       	movw	r26, r0
    2554:	0d 9f       	mul	r16, r29
    2556:	b0 0d       	add	r27, r0
    2558:	1c 9f       	mul	r17, r28
    255a:	b0 0d       	add	r27, r0
    255c:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    255e:	2a 0f       	add	r18, r26
    2560:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2562:	48 1b       	sub	r20, r24
    2564:	59 0b       	sbc	r21, r25
    2566:	44 0f       	add	r20, r20
    2568:	55 1f       	adc	r21, r21
    256a:	24 0f       	add	r18, r20
    256c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    256e:	26 0f       	add	r18, r22
    2570:	37 1f       	adc	r19, r23
    2572:	30 93 f1 03 	sts	0x03F1, r19
    2576:	20 93 f0 03 	sts	0x03F0, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    257a:	37 fd       	sbrc	r19, 7
    257c:	69 c0       	rjmp	.+210    	; 0x2650 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    257e:	12 16       	cp	r1, r18
    2580:	13 06       	cpc	r1, r19
    2582:	0c f0       	brlt	.+2      	; 0x2586 <start_vertical_speed_control_right+0x106>
    2584:	6f c0       	rjmp	.+222    	; 0x2664 <start_vertical_speed_control_right+0x1e4>
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	97 fd       	sbrc	r25, 7
    258c:	89 c0       	rjmp	.+274    	; 0x26a0 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    258e:	7d e5       	ldi	r23, 0x5D	; 93
    2590:	21 3c       	cpi	r18, 0xC1	; 193
    2592:	37 07       	cpc	r19, r23
    2594:	0c f4       	brge	.+2      	; 0x2598 <start_vertical_speed_control_right+0x118>
    2596:	66 c0       	rjmp	.+204    	; 0x2664 <start_vertical_speed_control_right+0x1e4>
    2598:	80 ec       	ldi	r24, 0xC0	; 192
    259a:	9d e5       	ldi	r25, 0x5D	; 93
    259c:	90 93 f1 03 	sts	0x03F1, r25
    25a0:	80 93 f0 03 	sts	0x03F0, r24
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    25b6:	24 3b       	cpi	r18, 0xB4	; 180
    25b8:	31 05       	cpc	r19, r1
    25ba:	94 f4       	brge	.+36     	; 0x25e0 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
    25bc:	2a 35       	cpi	r18, 0x5A	; 90
    25be:	31 05       	cpc	r19, r1
    25c0:	7c f4       	brge	.+30     	; 0x25e0 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    25c2:	18 16       	cp	r1, r24
    25c4:	19 06       	cpc	r1, r25
    25c6:	0c f0       	brlt	.+2      	; 0x25ca <start_vertical_speed_control_right+0x14a>
    25c8:	93 c0       	rjmp	.+294    	; 0x26f0 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    25ca:	35 95       	asr	r19
    25cc:	27 95       	ror	r18
    25ce:	35 95       	asr	r19
    25d0:	27 95       	ror	r18
    25d2:	27 5e       	subi	r18, 0xE7	; 231
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	30 93 0e 02 	sts	0x020E, r19
    25da:	20 93 0d 02 	sts	0x020D, r18
    25de:	77 cf       	rjmp	.-274    	; 0x24ce <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
    25e0:	18 16       	cp	r1, r24
    25e2:	19 06       	cpc	r1, r25
    25e4:	94 f5       	brge	.+100    	; 0x264a <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    25e6:	84 eb       	ldi	r24, 0xB4	; 180
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	82 1b       	sub	r24, r18
    25ec:	93 0b       	sbc	r25, r19
    25ee:	95 95       	asr	r25
    25f0:	87 95       	ror	r24
    25f2:	95 95       	asr	r25
    25f4:	87 95       	ror	r24
    25f6:	49 96       	adiw	r24, 0x19	; 25
    25f8:	90 93 0e 02 	sts	0x020E, r25
    25fc:	80 93 0d 02 	sts	0x020D, r24
    2600:	66 cf       	rjmp	.-308    	; 0x24ce <start_vertical_speed_control_right+0x4e>


void start_vertical_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    2602:	10 92 fb 03 	sts	0x03FB, r1
    2606:	10 92 fa 03 	sts	0x03FA, r1
		delta_right_speed_current = 0;
    260a:	10 92 64 04 	sts	0x0464, r1
    260e:	10 92 63 04 	sts	0x0463, r1
		delta_right_speed_prev = 0;
    2612:	10 92 3d 04 	sts	0x043D, r1
    2616:	10 92 3c 04 	sts	0x043C, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2624:	69 ef       	ldi	r22, 0xF9	; 249
    2626:	20 3c       	cpi	r18, 0xC0	; 192
    2628:	36 07       	cpc	r19, r22
    262a:	4c f4       	brge	.+18     	; 0x263e <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    262c:	20 ec       	ldi	r18, 0xC0	; 192
    262e:	39 ef       	ldi	r19, 0xF9	; 249
    2630:	30 93 fb 03 	sts	0x03FB, r19
    2634:	20 93 fa 03 	sts	0x03FA, r18
    2638:	60 e4       	ldi	r22, 0x40	; 64
    263a:	7d ee       	ldi	r23, 0xED	; 237
    263c:	77 cf       	rjmp	.-274    	; 0x252c <start_vertical_speed_control_right+0xac>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    263e:	b9 01       	movw	r22, r18
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	62 0f       	add	r22, r18
    2646:	73 1f       	adc	r23, r19
    2648:	71 cf       	rjmp	.-286    	; 0x252c <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {	// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    264a:	84 eb       	ldi	r24, 0xB4	; 180
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	31 cf       	rjmp	.-414    	; 0x24b2 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	97 fd       	sbrc	r25, 7
    2656:	06 c0       	rjmp	.+12     	; 0x2664 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    2658:	10 92 f1 03 	sts	0x03F1, r1
    265c:	10 92 f0 03 	sts	0x03F0, r1
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2664:	82 ea       	ldi	r24, 0xA2	; 162
    2666:	20 34       	cpi	r18, 0x40	; 64
    2668:	38 07       	cpc	r19, r24
    266a:	04 f5       	brge	.+64     	; 0x26ac <start_vertical_speed_control_right+0x22c>
    266c:	80 e4       	ldi	r24, 0x40	; 64
    266e:	92 ea       	ldi	r25, 0xA2	; 162
    2670:	90 93 f1 03 	sts	0x03F1, r25
    2674:	80 93 f0 03 	sts	0x03F0, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	9e ef       	ldi	r25, 0xFE	; 254
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24

}
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	08 95       	ret

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    268a:	80 91 e2 03 	lds	r24, 0x03E2
    268e:	90 91 e3 03 	lds	r25, 0x03E3
    2692:	82 0f       	add	r24, r18
    2694:	93 1f       	adc	r25, r19
    2696:	90 93 64 04 	sts	0x0464, r25
    269a:	80 93 63 04 	sts	0x0463, r24
    269e:	2f cf       	rjmp	.-418    	; 0x24fe <start_vertical_speed_control_right+0x7e>

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    26a0:	10 92 f1 03 	sts	0x03F1, r1
    26a4:	10 92 f0 03 	sts	0x03F0, r1
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    26ac:	35 95       	asr	r19
    26ae:	27 95       	ror	r18
    26b0:	35 95       	asr	r19
    26b2:	27 95       	ror	r18
    26b4:	35 95       	asr	r19
    26b6:	27 95       	ror	r18
    26b8:	35 95       	asr	r19
    26ba:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    26bc:	31 83       	std	Z+1, r19	; 0x01
    26be:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    26c0:	42 e0       	ldi	r20, 0x02	; 2
    26c2:	21 30       	cpi	r18, 0x01	; 1
    26c4:	34 07       	cpc	r19, r20
    26c6:	0c f0       	brlt	.+2      	; 0x26ca <start_vertical_speed_control_right+0x24a>
    26c8:	6d cf       	rjmp	.-294    	; 0x25a4 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    26ca:	6e ef       	ldi	r22, 0xFE	; 254
    26cc:	20 30       	cpi	r18, 0x00	; 0
    26ce:	36 07       	cpc	r19, r22
    26d0:	9c f2       	brlt	.-90     	; 0x2678 <start_vertical_speed_control_right+0x1f8>
    26d2:	6c cf       	rjmp	.-296    	; 0x25ac <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    26d4:	88 e6       	ldi	r24, 0x68	; 104
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	82 1b       	sub	r24, r18
    26da:	93 0b       	sbc	r25, r19
    26dc:	95 95       	asr	r25
    26de:	87 95       	ror	r24
    26e0:	95 95       	asr	r25
    26e2:	87 95       	ror	r24
    26e4:	49 96       	adiw	r24, 0x19	; 25
    26e6:	90 93 0e 02 	sts	0x020E, r25
    26ea:	80 93 0d 02 	sts	0x020D, r24
    26ee:	ef ce       	rjmp	.-546    	; 0x24ce <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    26f0:	35 95       	asr	r19
    26f2:	27 95       	ror	r18
    26f4:	35 95       	asr	r19
    26f6:	27 95       	ror	r18
    26f8:	89 e1       	ldi	r24, 0x19	; 25
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	82 1b       	sub	r24, r18
    26fe:	93 0b       	sbc	r25, r19
    2700:	90 93 0e 02 	sts	0x020E, r25
    2704:	80 93 0d 02 	sts	0x020D, r24
    2708:	e2 ce       	rjmp	.-572    	; 0x24ce <start_vertical_speed_control_right+0x4e>

0000270a <start_orizzontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_right(signed int *pwm_right) {
    270a:	fc 01       	movw	r30, r24

	if(*pwm_right==0) {
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	09 f4       	brne	.+2      	; 0x2716 <start_orizzontal_speed_control_right+0xc>
    2714:	7b c0       	rjmp	.+246    	; 0x280c <start_orizzontal_speed_control_right+0x102>
		delta_right_speed_current = 0;
		delta_right_speed_prev = 0;
		return;
	}

	delta_right_speed_prev = delta_right_speed_current;
    2716:	a0 91 63 04 	lds	r26, 0x0463
    271a:	b0 91 64 04 	lds	r27, 0x0464
    271e:	b0 93 3d 04 	sts	0x043D, r27
    2722:	a0 93 3c 04 	sts	0x043C, r26
	if(*pwm_right >= 0) {
    2726:	20 81       	ld	r18, Z
    2728:	31 81       	ldd	r19, Z+1	; 0x01
    272a:	37 fd       	sbrc	r19, 7
    272c:	89 c0       	rjmp	.+274    	; 0x2840 <start_orizzontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    272e:	80 91 e2 03 	lds	r24, 0x03E2
    2732:	90 91 e3 03 	lds	r25, 0x03E3
    2736:	a9 01       	movw	r20, r18
    2738:	48 1b       	sub	r20, r24
    273a:	59 0b       	sbc	r21, r25
    273c:	ca 01       	movw	r24, r20
    273e:	50 93 64 04 	sts	0x0464, r21
    2742:	40 93 63 04 	sts	0x0463, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	delta_right_speed_sum += delta_right_speed_current;
    2746:	20 91 fa 03 	lds	r18, 0x03FA
    274a:	30 91 fb 03 	lds	r19, 0x03FB
    274e:	28 0f       	add	r18, r24
    2750:	39 1f       	adc	r19, r25
    2752:	30 93 fb 03 	sts	0x03FB, r19
    2756:	20 93 fa 03 	sts	0x03FA, r18

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
    275a:	56 e0       	ldi	r21, 0x06	; 6
    275c:	21 34       	cpi	r18, 0x41	; 65
    275e:	35 07       	cpc	r19, r21
    2760:	0c f4       	brge	.+2      	; 0x2764 <start_orizzontal_speed_control_right+0x5a>
    2762:	61 c0       	rjmp	.+194    	; 0x2826 <start_orizzontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
    2764:	20 e4       	ldi	r18, 0x40	; 64
    2766:	36 e0       	ldi	r19, 0x06	; 6
    2768:	30 93 fb 03 	sts	0x03FB, r19
    276c:	20 93 fa 03 	sts	0x03FA, r18
    2770:	60 e8       	ldi	r22, 0x80	; 128
    2772:	7c e0       	ldi	r23, 0x0C	; 12
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
    2774:	9c 01       	movw	r18, r24
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	28 0f       	add	r18, r24
    277c:	39 1f       	adc	r19, r25
    277e:	22 0f       	add	r18, r18
    2780:	33 1f       	adc	r19, r19
    2782:	22 0f       	add	r18, r18
    2784:	33 1f       	adc	r19, r19
    2786:	22 0f       	add	r18, r18
    2788:	33 1f       	adc	r19, r19
    278a:	28 0f       	add	r18, r24
    278c:	39 1f       	adc	r19, r25
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
	}

	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
    278e:	40 81       	ld	r20, Z
    2790:	51 81       	ldd	r21, Z+1	; 0x01
    2792:	44 0f       	add	r20, r20
    2794:	55 1f       	adc	r21, r21
    2796:	44 0f       	add	r20, r20
    2798:	55 1f       	adc	r21, r21
    279a:	44 0f       	add	r20, r20
    279c:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
    279e:	24 0f       	add	r18, r20
    27a0:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
    27a2:	ad 01       	movw	r20, r26
    27a4:	48 1b       	sub	r20, r24
    27a6:	59 0b       	sbc	r21, r25
    27a8:	ca 01       	movw	r24, r20
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	84 0f       	add	r24, r20
    27b0:	95 1f       	adc	r25, r21
    27b2:	28 0f       	add	r18, r24
    27b4:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_ORIZZONTAL);
    27b6:	26 0f       	add	r18, r22
    27b8:	37 1f       	adc	r19, r23
    27ba:	30 93 f1 03 	sts	0x03F1, r19
    27be:	20 93 f0 03 	sts	0x03F0, r18

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    27c2:	37 fd       	sbrc	r19, 7
    27c4:	4c c0       	rjmp	.+152    	; 0x285e <start_orizzontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    27c6:	12 16       	cp	r1, r18
    27c8:	13 06       	cpc	r1, r19
    27ca:	0c f0       	brlt	.+2      	; 0x27ce <start_orizzontal_speed_control_right+0xc4>
    27cc:	52 c0       	rjmp	.+164    	; 0x2872 <start_orizzontal_speed_control_right+0x168>
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	97 fd       	sbrc	r25, 7
    27d4:	67 c0       	rjmp	.+206    	; 0x28a4 <start_orizzontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    27d6:	5d e5       	ldi	r21, 0x5D	; 93
    27d8:	21 3c       	cpi	r18, 0xC1	; 193
    27da:	35 07       	cpc	r19, r21
    27dc:	0c f4       	brge	.+2      	; 0x27e0 <start_orizzontal_speed_control_right+0xd6>
    27de:	49 c0       	rjmp	.+146    	; 0x2872 <start_orizzontal_speed_control_right+0x168>
    27e0:	80 ec       	ldi	r24, 0xC0	; 192
    27e2:	9d e5       	ldi	r25, 0x5D	; 93
    27e4:	90 93 f1 03 	sts	0x03F1, r25
    27e8:	80 93 f0 03 	sts	0x03F0, r24
    27ec:	2c ed       	ldi	r18, 0xDC	; 220
    27ee:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
	if(*pwm_right > 0) {
		*pwm_right += 30;
    27f0:	22 5e       	subi	r18, 0xE2	; 226
    27f2:	3f 4f       	sbci	r19, 0xFF	; 255
    27f4:	31 83       	std	Z+1, r19	; 0x01
    27f6:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    27f8:	42 e0       	ldi	r20, 0x02	; 2
    27fa:	21 30       	cpi	r18, 0x01	; 1
    27fc:	34 07       	cpc	r19, r20
    27fe:	0c f4       	brge	.+2      	; 0x2802 <start_orizzontal_speed_control_right+0xf8>
    2800:	48 c0       	rjmp	.+144    	; 0x2892 <start_orizzontal_speed_control_right+0x188>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	92 e0       	ldi	r25, 0x02	; 2
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
    280a:	08 95       	ret
}

void start_orizzontal_speed_control_right(signed int *pwm_right) {

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;
    280c:	10 92 fb 03 	sts	0x03FB, r1
    2810:	10 92 fa 03 	sts	0x03FA, r1
		delta_right_speed_current = 0;
    2814:	10 92 64 04 	sts	0x0464, r1
    2818:	10 92 63 04 	sts	0x0463, r1
		delta_right_speed_prev = 0;
    281c:	10 92 3d 04 	sts	0x043D, r1
    2820:	10 92 3c 04 	sts	0x043C, r1
		return;
    2824:	08 95       	ret
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2826:	49 ef       	ldi	r20, 0xF9	; 249
    2828:	20 3c       	cpi	r18, 0xC0	; 192
    282a:	34 07       	cpc	r19, r20
    282c:	a4 f4       	brge	.+40     	; 0x2856 <start_orizzontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_ORIZZONTAL;
    282e:	20 ec       	ldi	r18, 0xC0	; 192
    2830:	39 ef       	ldi	r19, 0xF9	; 249
    2832:	30 93 fb 03 	sts	0x03FB, r19
    2836:	20 93 fa 03 	sts	0x03FA, r18
    283a:	60 e8       	ldi	r22, 0x80	; 128
    283c:	73 ef       	ldi	r23, 0xF3	; 243
    283e:	9a cf       	rjmp	.-204    	; 0x2774 <start_orizzontal_speed_control_right+0x6a>

	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2840:	80 91 e2 03 	lds	r24, 0x03E2
    2844:	90 91 e3 03 	lds	r25, 0x03E3
    2848:	82 0f       	add	r24, r18
    284a:	93 1f       	adc	r25, r19
    284c:	90 93 64 04 	sts	0x0464, r25
    2850:	80 93 63 04 	sts	0x0463, r24
    2854:	78 cf       	rjmp	.-272    	; 0x2746 <start_orizzontal_speed_control_right+0x3c>
	}
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2856:	b9 01       	movw	r22, r18
    2858:	66 0f       	add	r22, r22
    285a:	77 1f       	adc	r23, r23
    285c:	8b cf       	rjmp	.-234    	; 0x2774 <start_orizzontal_speed_control_right+0x6a>
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_ORIZZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_ORIZZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_ORIZZONTAL);

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	97 fd       	sbrc	r25, 7
    2864:	06 c0       	rjmp	.+12     	; 0x2872 <start_orizzontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2866:	10 92 f1 03 	sts	0x03F1, r1
    286a:	10 92 f0 03 	sts	0x03F0, r1
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2872:	82 ea       	ldi	r24, 0xA2	; 162
    2874:	20 34       	cpi	r18, 0x40	; 64
    2876:	38 07       	cpc	r19, r24
    2878:	dc f4       	brge	.+54     	; 0x28b0 <start_orizzontal_speed_control_right+0x1a6>
    287a:	80 e4       	ldi	r24, 0x40	; 64
    287c:	92 ea       	ldi	r25, 0xA2	; 162
    287e:	90 93 f1 03 	sts	0x03F1, r25
    2882:	80 93 f0 03 	sts	0x03F0, r24

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    2886:	24 e2       	ldi	r18, 0x24	; 36
    2888:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    288a:	2e 51       	subi	r18, 0x1E	; 30
    288c:	30 40       	sbci	r19, 0x00	; 0
    288e:	31 83       	std	Z+1, r19	; 0x01
    2890:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2892:	5e ef       	ldi	r21, 0xFE	; 254
    2894:	20 30       	cpi	r18, 0x00	; 0
    2896:	35 07       	cpc	r19, r21
    2898:	24 f4       	brge	.+8      	; 0x28a2 <start_orizzontal_speed_control_right+0x198>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	9e ef       	ldi	r25, 0xFE	; 254
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	08 95       	ret

	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    28a4:	10 92 f1 03 	sts	0x03F1, r1
    28a8:	10 92 f0 03 	sts	0x03F0, r1
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    28b0:	35 95       	asr	r19
    28b2:	27 95       	ror	r18
    28b4:	35 95       	asr	r19
    28b6:	27 95       	ror	r18
    28b8:	35 95       	asr	r19
    28ba:	27 95       	ror	r18
    28bc:	35 95       	asr	r19
    28be:	27 95       	ror	r18

	//pwm_right_speed_controller = pwm_right_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4; //>>6;
    28c0:	31 83       	std	Z+1, r19	; 0x01
    28c2:	20 83       	st	Z, r18
	if(*pwm_right > 0) {
    28c4:	12 16       	cp	r1, r18
    28c6:	13 06       	cpc	r1, r19
    28c8:	0c f4       	brge	.+2      	; 0x28cc <start_orizzontal_speed_control_right+0x1c2>
    28ca:	92 cf       	rjmp	.-220    	; 0x27f0 <start_orizzontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    28cc:	21 15       	cp	r18, r1
    28ce:	31 05       	cpc	r19, r1
    28d0:	e1 f6       	brne	.-72     	; 0x288a <start_orizzontal_speed_control_right+0x180>
    28d2:	08 95       	ret

000028d4 <start_orizzontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_orizzontal_speed_control_left(signed int *pwm_left) {
    28d4:	fc 01       	movw	r30, r24

	if(*pwm_left==0) {
    28d6:	80 81       	ld	r24, Z
    28d8:	91 81       	ldd	r25, Z+1	; 0x01
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <start_orizzontal_speed_control_left+0xc>
    28de:	7b c0       	rjmp	.+246    	; 0x29d6 <start_orizzontal_speed_control_left+0x102>
		delta_left_speed_current = 0;
		delta_left_speed_prev = 0;
		return;
	}

	delta_left_speed_prev = delta_left_speed_current; 
    28e0:	a0 91 3a 04 	lds	r26, 0x043A
    28e4:	b0 91 3b 04 	lds	r27, 0x043B
    28e8:	b0 93 55 04 	sts	0x0455, r27
    28ec:	a0 93 54 04 	sts	0x0454, r26
	if(*pwm_left >= 0) {
    28f0:	20 81       	ld	r18, Z
    28f2:	31 81       	ldd	r19, Z+1	; 0x01
    28f4:	37 fd       	sbrc	r19, 7
    28f6:	89 c0       	rjmp	.+274    	; 0x2a0a <start_orizzontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    28f8:	80 91 e0 03 	lds	r24, 0x03E0
    28fc:	90 91 e1 03 	lds	r25, 0x03E1
    2900:	a9 01       	movw	r20, r18
    2902:	48 1b       	sub	r20, r24
    2904:	59 0b       	sbc	r21, r25
    2906:	ca 01       	movw	r24, r20
    2908:	50 93 3b 04 	sts	0x043B, r21
    290c:	40 93 3a 04 	sts	0x043A, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	delta_left_speed_sum += delta_left_speed_current;
    2910:	20 91 f8 03 	lds	r18, 0x03F8
    2914:	30 91 f9 03 	lds	r19, 0x03F9
    2918:	28 0f       	add	r18, r24
    291a:	39 1f       	adc	r19, r25
    291c:	30 93 f9 03 	sts	0x03F9, r19
    2920:	20 93 f8 03 	sts	0x03F8, r18

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
    2924:	56 e0       	ldi	r21, 0x06	; 6
    2926:	21 34       	cpi	r18, 0x41	; 65
    2928:	35 07       	cpc	r19, r21
    292a:	0c f4       	brge	.+2      	; 0x292e <start_orizzontal_speed_control_left+0x5a>
    292c:	61 c0       	rjmp	.+194    	; 0x29f0 <start_orizzontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
    292e:	20 e4       	ldi	r18, 0x40	; 64
    2930:	36 e0       	ldi	r19, 0x06	; 6
    2932:	30 93 f9 03 	sts	0x03F9, r19
    2936:	20 93 f8 03 	sts	0x03F8, r18
    293a:	60 e8       	ldi	r22, 0x80	; 128
    293c:	7c e0       	ldi	r23, 0x0C	; 12
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
    293e:	9c 01       	movw	r18, r24
    2940:	22 0f       	add	r18, r18
    2942:	33 1f       	adc	r19, r19
    2944:	28 0f       	add	r18, r24
    2946:	39 1f       	adc	r19, r25
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	22 0f       	add	r18, r18
    2952:	33 1f       	adc	r19, r19
    2954:	28 0f       	add	r18, r24
    2956:	39 1f       	adc	r19, r25
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
	}
	    
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
    2958:	40 81       	ld	r20, Z
    295a:	51 81       	ldd	r21, Z+1	; 0x01
    295c:	44 0f       	add	r20, r20
    295e:	55 1f       	adc	r21, r21
    2960:	44 0f       	add	r20, r20
    2962:	55 1f       	adc	r21, r21
    2964:	44 0f       	add	r20, r20
    2966:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
    2968:	24 0f       	add	r18, r20
    296a:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
    296c:	ad 01       	movw	r20, r26
    296e:	48 1b       	sub	r20, r24
    2970:	59 0b       	sbc	r21, r25
    2972:	ca 01       	movw	r24, r20
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	84 0f       	add	r24, r20
    297a:	95 1f       	adc	r25, r21
    297c:	28 0f       	add	r18, r24
    297e:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_ORIZZONTAL);
    2980:	26 0f       	add	r18, r22
    2982:	37 1f       	adc	r19, r23
    2984:	30 93 f3 03 	sts	0x03F3, r19
    2988:	20 93 f2 03 	sts	0x03F2, r18

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    298c:	37 fd       	sbrc	r19, 7
    298e:	4c c0       	rjmp	.+152    	; 0x2a28 <start_orizzontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2990:	12 16       	cp	r1, r18
    2992:	13 06       	cpc	r1, r19
    2994:	0c f0       	brlt	.+2      	; 0x2998 <start_orizzontal_speed_control_left+0xc4>
    2996:	52 c0       	rjmp	.+164    	; 0x2a3c <start_orizzontal_speed_control_left+0x168>
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	97 fd       	sbrc	r25, 7
    299e:	67 c0       	rjmp	.+206    	; 0x2a6e <start_orizzontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    29a0:	5d e5       	ldi	r21, 0x5D	; 93
    29a2:	21 3c       	cpi	r18, 0xC1	; 193
    29a4:	35 07       	cpc	r19, r21
    29a6:	0c f4       	brge	.+2      	; 0x29aa <start_orizzontal_speed_control_left+0xd6>
    29a8:	49 c0       	rjmp	.+146    	; 0x2a3c <start_orizzontal_speed_control_left+0x168>
    29aa:	80 ec       	ldi	r24, 0xC0	; 192
    29ac:	9d e5       	ldi	r25, 0x5D	; 93
    29ae:	90 93 f3 03 	sts	0x03F3, r25
    29b2:	80 93 f2 03 	sts	0x03F2, r24
    29b6:	2c ed       	ldi	r18, 0xDC	; 220
    29b8:	35 e0       	ldi	r19, 0x05	; 5
	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
	if(*pwm_left > 0) {
		*pwm_left += 30;
    29ba:	22 5e       	subi	r18, 0xE2	; 226
    29bc:	3f 4f       	sbci	r19, 0xFF	; 255
    29be:	31 83       	std	Z+1, r19	; 0x01
    29c0:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    29c2:	42 e0       	ldi	r20, 0x02	; 2
    29c4:	21 30       	cpi	r18, 0x01	; 1
    29c6:	34 07       	cpc	r19, r20
    29c8:	0c f4       	brge	.+2      	; 0x29cc <start_orizzontal_speed_control_left+0xf8>
    29ca:	48 c0       	rjmp	.+144    	; 0x2a5c <start_orizzontal_speed_control_left+0x188>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	92 e0       	ldi	r25, 0x02	; 2
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	08 95       	ret
}

void start_orizzontal_speed_control_left(signed int *pwm_left) {

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;
    29d6:	10 92 f9 03 	sts	0x03F9, r1
    29da:	10 92 f8 03 	sts	0x03F8, r1
		delta_left_speed_current = 0;
    29de:	10 92 3b 04 	sts	0x043B, r1
    29e2:	10 92 3a 04 	sts	0x043A, r1
		delta_left_speed_prev = 0;
    29e6:	10 92 55 04 	sts	0x0455, r1
    29ea:	10 92 54 04 	sts	0x0454, r1
		return;
    29ee:	08 95       	ret
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    29f0:	49 ef       	ldi	r20, 0xF9	; 249
    29f2:	20 3c       	cpi	r18, 0xC0	; 192
    29f4:	34 07       	cpc	r19, r20
    29f6:	a4 f4       	brge	.+40     	; 0x2a20 <start_orizzontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_ORIZZONTAL;
    29f8:	20 ec       	ldi	r18, 0xC0	; 192
    29fa:	39 ef       	ldi	r19, 0xF9	; 249
    29fc:	30 93 f9 03 	sts	0x03F9, r19
    2a00:	20 93 f8 03 	sts	0x03F8, r18
    2a04:	60 e8       	ldi	r22, 0x80	; 128
    2a06:	73 ef       	ldi	r23, 0xF3	; 243
    2a08:	9a cf       	rjmp	.-204    	; 0x293e <start_orizzontal_speed_control_left+0x6a>

	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2a0a:	80 91 e0 03 	lds	r24, 0x03E0
    2a0e:	90 91 e1 03 	lds	r25, 0x03E1
    2a12:	82 0f       	add	r24, r18
    2a14:	93 1f       	adc	r25, r19
    2a16:	90 93 3b 04 	sts	0x043B, r25
    2a1a:	80 93 3a 04 	sts	0x043A, r24
    2a1e:	78 cf       	rjmp	.-272    	; 0x2910 <start_orizzontal_speed_control_left+0x3c>
	}
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_ORIZZONTAL) {
    2a20:	b9 01       	movw	r22, r18
    2a22:	66 0f       	add	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	8b cf       	rjmp	.-234    	; 0x293e <start_orizzontal_speed_control_left+0x6a>
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3); //<< 5);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_ORIZZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_ORIZZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_ORIZZONTAL);

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	97 fd       	sbrc	r25, 7
    2a2e:	06 c0       	rjmp	.+12     	; 0x2a3c <start_orizzontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2a30:	10 92 f3 03 	sts	0x03F3, r1
    2a34:	10 92 f2 03 	sts	0x03F2, r1
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2a3c:	82 ea       	ldi	r24, 0xA2	; 162
    2a3e:	20 34       	cpi	r18, 0x40	; 64
    2a40:	38 07       	cpc	r19, r24
    2a42:	dc f4       	brge	.+54     	; 0x2a7a <start_orizzontal_speed_control_left+0x1a6>
    2a44:	80 e4       	ldi	r24, 0x40	; 64
    2a46:	92 ea       	ldi	r25, 0xA2	; 162
    2a48:	90 93 f3 03 	sts	0x03F3, r25
    2a4c:	80 93 f2 03 	sts	0x03F2, r24

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2a50:	24 e2       	ldi	r18, 0x24	; 36
    2a52:	3a ef       	ldi	r19, 0xFA	; 250
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2a54:	2e 51       	subi	r18, 0x1E	; 30
    2a56:	30 40       	sbci	r19, 0x00	; 0
    2a58:	31 83       	std	Z+1, r19	; 0x01
    2a5a:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2a5c:	5e ef       	ldi	r21, 0xFE	; 254
    2a5e:	20 30       	cpi	r18, 0x00	; 0
    2a60:	35 07       	cpc	r19, r21
    2a62:	24 f4       	brge	.+8      	; 0x2a6c <start_orizzontal_speed_control_left+0x198>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	9e ef       	ldi	r25, 0xFE	; 254
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	80 83       	st	Z, r24
    2a6c:	08 95       	ret

	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2a6e:	10 92 f3 03 	sts	0x03F3, r1
    2a72:	10 92 f2 03 	sts	0x03F2, r1
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2a7a:	35 95       	asr	r19
    2a7c:	27 95       	ror	r18
    2a7e:	35 95       	asr	r19
    2a80:	27 95       	ror	r18
    2a82:	35 95       	asr	r19
    2a84:	27 95       	ror	r18
    2a86:	35 95       	asr	r19
    2a88:	27 95       	ror	r18

	//pwm_left_speed_controller = pwm_left_speed_controller*(MAX_MOTORS_PWM/2)/MAX_PWM;
	// since the pwm_left_speed_controller goes from 0 to 24000 then the pwm_left goes
	// from 0 to 375
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4; //>>6;
    2a8a:	31 83       	std	Z+1, r19	; 0x01
    2a8c:	20 83       	st	Z, r18
	if(*pwm_left > 0) {
    2a8e:	12 16       	cp	r1, r18
    2a90:	13 06       	cpc	r1, r19
    2a92:	0c f4       	brge	.+2      	; 0x2a96 <start_orizzontal_speed_control_left+0x1c2>
    2a94:	92 cf       	rjmp	.-220    	; 0x29ba <start_orizzontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2a96:	21 15       	cp	r18, r1
    2a98:	31 05       	cpc	r19, r1
    2a9a:	e1 f6       	brne	.-72     	; 0x2a54 <start_orizzontal_speed_control_left+0x180>
    2a9c:	08 95       	ret

00002a9e <initPortsIO>:
#include <avr\io.h>
#include "ports_io.h"

void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2a9e:	85 b7       	in	r24, 0x35	; 53
    2aa0:	80 61       	ori	r24, 0x10	; 16
    2aa2:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;	// proximity pulses as output
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    2aa8:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2aaa:	97 ef       	ldi	r25, 0xF7	; 247
    2aac:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    2aae:	20 ee       	ldi	r18, 0xE0	; 224
    2ab0:	25 b9       	out	0x05, r18	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    2ab2:	20 ef       	ldi	r18, 0xF0	; 240
    2ab4:	27 b9       	out	0x07, r18	; 7
	PORTC = 0xB0;	// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2ab6:	20 eb       	ldi	r18, 0xB0	; 176
    2ab8:	28 b9       	out	0x08, r18	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2aba:	2c ef       	ldi	r18, 0xFC	; 252
    2abc:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0x03;	// default for unused pins is 0
    2abe:	23 e0       	ldi	r18, 0x03	; 3
    2ac0:	2b b9       	out	0x0b, r18	; 11

	DDRE = 0xFF;	// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2ac2:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2ac4:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    2ac6:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    2ac8:	83 bb       	out	0x13, r24	; 19
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;	// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;	// default for unused pins is 0, led3 to 1
    2aca:	28 e0       	ldi	r18, 0x08	; 8
    2acc:	24 bb       	out	0x14, r18	; 20
	#endif	

	DDRH = 0xFF;	// all pins to output; when usart is activated it changes the pins direction accordingly
    2ace:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2ad2:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;	// cliff pulses as output; charge-on, button0, remote, charge status as input
    2ad6:	2f e0       	ldi	r18, 0x0F	; 15
    2ad8:	20 93 04 01 	sts	0x0104, r18
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	#endif
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
    2adc:	20 93 05 01 	sts	0x0105, r18
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;	// adc channel pins as input
    2ae0:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    2ae4:	80 93 0a 01 	sts	0x010A, r24
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;	// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;	// pwm (unused) to 0, leds to 1
    2ae8:	90 93 0b 01 	sts	0x010B, r25
	#endif
		
}
    2aec:	08 95       	ret

00002aee <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  100000L

void i2c_close() {
	TWBR = 0x00;
    2aee:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2af2:	10 92 bc 00 	sts	0x00BC, r1
}
    2af6:	08 95       	ret

00002af8 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2af8:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2afa:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2afc:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2b00:	80 e2       	ldi	r24, 0x20	; 32
    2b02:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2b06:	08 95       	ret

00002b08 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2b08:	94 ea       	ldi	r25, 0xA4	; 164
    2b0a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2b0e:	90 91 bc 00 	lds	r25, 0x00BC
    2b12:	97 ff       	sbrs	r25, 7
    2b14:	fc cf       	rjmp	.-8      	; 0x2b0e <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2b16:	90 91 b9 00 	lds	r25, 0x00B9
    2b1a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2b1c:	98 30       	cpi	r25, 0x08	; 8
    2b1e:	21 f0       	breq	.+8      	; 0x2b28 <i2c_start+0x20>
    2b20:	90 31       	cpi	r25, 0x10	; 16
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2b28:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b2c:	84 e8       	ldi	r24, 0x84	; 132
    2b2e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2b32:	80 91 bc 00 	lds	r24, 0x00BC
    2b36:	87 ff       	sbrs	r24, 7
    2b38:	fc cf       	rjmp	.-8      	; 0x2b32 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2b3a:	90 91 b9 00 	lds	r25, 0x00B9
    2b3e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2b40:	98 31       	cpi	r25, 0x18	; 24
    2b42:	21 f0       	breq	.+8      	; 0x2b4c <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 34       	cpi	r25, 0x40	; 64
    2b48:	19 f0       	breq	.+6      	; 0x2b50 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2b4a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2b4c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2b4e:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	08 95       	ret

00002b54 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2b54:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2b56:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2b58:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2b5a:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2b5e:	90 91 bc 00 	lds	r25, 0x00BC
    2b62:	97 ff       	sbrs	r25, 7
    2b64:	fc cf       	rjmp	.-8      	; 0x2b5e <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2b66:	90 91 b9 00 	lds	r25, 0x00B9
    2b6a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2b6c:	98 30       	cpi	r25, 0x08	; 8
    2b6e:	11 f0       	breq	.+4      	; 0x2b74 <i2c_start_wait+0x20>
    2b70:	90 31       	cpi	r25, 0x10	; 16
    2b72:	99 f7       	brne	.-26     	; 0x2b5a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2b74:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2b78:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2b7c:	90 91 bc 00 	lds	r25, 0x00BC
    2b80:	97 ff       	sbrs	r25, 7
    2b82:	fc cf       	rjmp	.-8      	; 0x2b7c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2b84:	90 91 b9 00 	lds	r25, 0x00B9
    2b88:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2b8a:	90 32       	cpi	r25, 0x20	; 32
    2b8c:	19 f0       	breq	.+6      	; 0x2b94 <i2c_start_wait+0x40>
    2b8e:	98 35       	cpi	r25, 0x58	; 88
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <i2c_start_wait+0x40>
    2b92:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2b94:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2b98:	90 91 bc 00 	lds	r25, 0x00BC
    2b9c:	94 fd       	sbrc	r25, 4
    2b9e:	fc cf       	rjmp	.-8      	; 0x2b98 <i2c_start_wait+0x44>
    2ba0:	dc cf       	rjmp	.-72     	; 0x2b5a <i2c_start_wait+0x6>

00002ba2 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2ba2:	94 ea       	ldi	r25, 0xA4	; 164
    2ba4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2ba8:	90 91 bc 00 	lds	r25, 0x00BC
    2bac:	97 ff       	sbrs	r25, 7
    2bae:	fc cf       	rjmp	.-8      	; 0x2ba8 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2bb0:	90 91 b9 00 	lds	r25, 0x00B9
    2bb4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2bb6:	98 30       	cpi	r25, 0x08	; 8
    2bb8:	21 f0       	breq	.+8      	; 0x2bc2 <i2c_rep_start+0x20>
    2bba:	90 31       	cpi	r25, 0x10	; 16
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2bc2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bc6:	84 e8       	ldi	r24, 0x84	; 132
    2bc8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2bcc:	80 91 bc 00 	lds	r24, 0x00BC
    2bd0:	87 ff       	sbrs	r24, 7
    2bd2:	fc cf       	rjmp	.-8      	; 0x2bcc <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2bd4:	90 91 b9 00 	lds	r25, 0x00B9
    2bd8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2bda:	98 31       	cpi	r25, 0x18	; 24
    2bdc:	21 f0       	breq	.+8      	; 0x2be6 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 34       	cpi	r25, 0x40	; 64
    2be2:	19 f0       	breq	.+6      	; 0x2bea <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2be4:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2be6:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2be8:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	08 95       	ret

00002bee <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2bee:	84 e9       	ldi	r24, 0x94	; 148
    2bf0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2bf4:	80 91 bc 00 	lds	r24, 0x00BC
    2bf8:	84 fd       	sbrc	r24, 4
    2bfa:	fc cf       	rjmp	.-8      	; 0x2bf4 <i2c_stop+0x6>

}/* i2c_stop */
    2bfc:	08 95       	ret

00002bfe <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2bfe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c02:	84 e8       	ldi	r24, 0x84	; 132
    2c04:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2c08:	80 91 bc 00 	lds	r24, 0x00BC
    2c0c:	87 ff       	sbrs	r24, 7
    2c0e:	fc cf       	rjmp	.-8      	; 0x2c08 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2c10:	90 91 b9 00 	lds	r25, 0x00B9
    2c14:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	98 32       	cpi	r25, 0x28	; 40
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2c1c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2c20:	08 95       	ret

00002c22 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2c22:	84 ec       	ldi	r24, 0xC4	; 196
    2c24:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2c28:	80 91 bc 00 	lds	r24, 0x00BC
    2c2c:	87 ff       	sbrs	r24, 7
    2c2e:	fc cf       	rjmp	.-8      	; 0x2c28 <i2c_readAck+0x6>

    return TWDR;
    2c30:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2c34:	08 95       	ret

00002c36 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c36:	84 e8       	ldi	r24, 0x84	; 132
    2c38:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2c3c:	80 91 bc 00 	lds	r24, 0x00BC
    2c40:	87 ff       	sbrs	r24, 7
    2c42:	fc cf       	rjmp	.-8      	; 0x2c3c <i2c_readNak+0x6>
	
    return TWDR;
    2c44:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2c48:	08 95       	ret

00002c4a <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    2c4a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2c4e:	80 e1       	ldi	r24, 0x10	; 16
    2c50:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2c54:	e0 ec       	ldi	r30, 0xC0	; 192
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	82 60       	ori	r24, 0x02	; 2
    2c5c:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2c5e:	e1 ec       	ldi	r30, 0xC1	; 193
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	88 69       	ori	r24, 0x98	; 152
    2c66:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    2c68:	e2 ec       	ldi	r30, 0xC2	; 194
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	86 60       	ori	r24, 0x06	; 6
    2c70:	80 83       	st	Z, r24

}
    2c72:	08 95       	ret

00002c74 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;
    2c74:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2c78:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2c7c:	10 92 c2 00 	sts	0x00C2, r1

}
    2c80:	08 95       	ret

00002c82 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    2c82:	90 91 c0 00 	lds	r25, 0x00C0
    2c86:	95 ff       	sbrs	r25, 5
    2c88:	fc cf       	rjmp	.-8      	; 0x2c82 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    2c8a:	80 93 c6 00 	sts	0x00C6, r24

}
    2c8e:	08 95       	ret

00002c90 <__vector_25>:

ISR(USART0_RX_vect) {
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2f 93       	push	r18
    2c9c:	8f 93       	push	r24
    2c9e:	9f 93       	push	r25

	char receivedByte = UDR0;
    2ca0:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    2ca4:	90 91 18 02 	lds	r25, 0x0218
    2ca8:	99 23       	and	r25, r25
    2caa:	b9 f0       	breq	.+46     	; 0x2cda <__vector_25+0x4a>
		switch(receivedByte) {
    2cac:	82 33       	cpi	r24, 0x32	; 50
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <__vector_25+0x22>
    2cb0:	5b c0       	rjmp	.+182    	; 0x2d68 <__vector_25+0xd8>
    2cb2:	83 33       	cpi	r24, 0x33	; 51
    2cb4:	80 f5       	brcc	.+96     	; 0x2d16 <__vector_25+0x86>
    2cb6:	80 33       	cpi	r24, 0x30	; 48
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <__vector_25+0x2c>
    2cba:	7e c0       	rjmp	.+252    	; 0x2db8 <__vector_25+0x128>
    2cbc:	81 33       	cpi	r24, 0x31	; 49
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <__vector_25+0x3a>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2cc6:	10 92 18 02 	sts	0x0218, r1

	}



}
    2cca:	9f 91       	pop	r25
    2ccc:	8f 91       	pop	r24
    2cce:	2f 91       	pop	r18
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	0f 90       	pop	r0
    2cd6:	1f 90       	pop	r1
    2cd8:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2cda:	90 91 17 02 	lds	r25, 0x0217
    2cde:	92 30       	cpi	r25, 0x02	; 2
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <__vector_25+0x54>
    2ce2:	48 c0       	rjmp	.+144    	; 0x2d74 <__vector_25+0xe4>
    2ce4:	93 30       	cpi	r25, 0x03	; 3
    2ce6:	40 f1       	brcs	.+80     	; 0x2d38 <__vector_25+0xa8>
    2ce8:	94 30       	cpi	r25, 0x04	; 4
    2cea:	09 f4       	brne	.+2      	; 0x2cee <__vector_25+0x5e>
    2cec:	8c c0       	rjmp	.+280    	; 0x2e06 <__vector_25+0x176>
    2cee:	94 30       	cpi	r25, 0x04	; 4
    2cf0:	08 f4       	brcc	.+2      	; 0x2cf4 <__vector_25+0x64>
    2cf2:	73 c0       	rjmp	.+230    	; 0x2dda <__vector_25+0x14a>
    2cf4:	95 30       	cpi	r25, 0x05	; 5
    2cf6:	49 f7       	brne	.-46     	; 0x2cca <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    2cf8:	83 37       	cpi	r24, 0x73	; 115
    2cfa:	39 f7       	brne	.-50     	; 0x2cca <__vector_25+0x3a>
					sendAdcValues = 0;
    2cfc:	10 92 08 04 	sts	0x0408, r1
					choosePeripheral = 1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	80 93 18 02 	sts	0x0218, r24

	}



}
    2d06:	9f 91       	pop	r25
    2d08:	8f 91       	pop	r24
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	0f 90       	pop	r0
    2d12:	1f 90       	pop	r1
    2d14:	18 95       	reti
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    2d16:	84 33       	cpi	r24, 0x34	; 52
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <__vector_25+0x8c>
    2d1a:	59 c0       	rjmp	.+178    	; 0x2dce <__vector_25+0x13e>
    2d1c:	84 33       	cpi	r24, 0x34	; 52
    2d1e:	08 f4       	brcc	.+2      	; 0x2d22 <__vector_25+0x92>
    2d20:	50 c0       	rjmp	.+160    	; 0x2dc2 <__vector_25+0x132>
    2d22:	85 33       	cpi	r24, 0x35	; 53
    2d24:	91 f6       	brne	.-92     	; 0x2cca <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2d26:	85 e0       	ldi	r24, 0x05	; 5
    2d28:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2d2c:	10 92 18 02 	sts	0x0218, r1
				sendAdcValues = 1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	80 93 08 04 	sts	0x0408, r24
				break;
    2d36:	c9 cf       	rjmp	.-110    	; 0x2cca <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2d38:	99 23       	and	r25, r25
    2d3a:	91 f5       	brne	.+100    	; 0x2da0 <__vector_25+0x110>
			case 0:	// red led
				if(receivedByte == '-') {
    2d3c:	8d 32       	cpi	r24, 0x2D	; 45
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <__vector_25+0xb2>
    2d40:	d5 c0       	rjmp	.+426    	; 0x2eec <__vector_25+0x25c>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2d42:	8b 32       	cpi	r24, 0x2B	; 43
    2d44:	e9 f6       	brne	.-70     	; 0x2d00 <__vector_25+0x70>
					current_pwm = pwm_red-10;
    2d46:	80 91 14 02 	lds	r24, 0x0214
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2d4e:	97 fd       	sbrc	r25, 7
    2d50:	3f c1       	rjmp	.+638    	; 0x2fd0 <__vector_25+0x340>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2d52:	80 93 14 02 	sts	0x0214, r24
					if(pwm_red == 0) {
    2d56:	88 23       	and	r24, r24
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <__vector_25+0xcc>
    2d5a:	3c c1       	rjmp	.+632    	; 0x2fd4 <__vector_25+0x344>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	90 93 89 00 	sts	0x0089, r25
    2d62:	80 93 88 00 	sts	0x0088, r24
    2d66:	b1 cf       	rjmp	.-158    	; 0x2cca <__vector_25+0x3a>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2d6e:	10 92 18 02 	sts	0x0218, r1
				break;
    2d72:	ab cf       	rjmp	.-170    	; 0x2cca <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2d74:	8d 32       	cpi	r24, 0x2D	; 45
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <__vector_25+0xea>
    2d78:	e8 c0       	rjmp	.+464    	; 0x2f4a <__vector_25+0x2ba>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2d7a:	8b 32       	cpi	r24, 0x2B	; 43
    2d7c:	09 f6       	brne	.-126    	; 0x2d00 <__vector_25+0x70>
					current_pwm = pwm_blue-10;
    2d7e:	80 91 16 02 	lds	r24, 0x0216
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2d86:	97 fd       	sbrc	r25, 7
    2d88:	35 c1       	rjmp	.+618    	; 0x2ff4 <__vector_25+0x364>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2d8a:	80 93 16 02 	sts	0x0216, r24
					if(pwm_blue == 0) {
    2d8e:	88 23       	and	r24, r24
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <__vector_25+0x104>
    2d92:	32 c1       	rjmp	.+612    	; 0x2ff8 <__vector_25+0x368>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	90 93 8d 00 	sts	0x008D, r25
    2d9a:	80 93 8c 00 	sts	0x008C, r24
    2d9e:	95 cf       	rjmp	.-214    	; 0x2cca <__vector_25+0x3a>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2da0:	91 30       	cpi	r25, 0x01	; 1
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <__vector_25+0x116>
    2da4:	92 cf       	rjmp	.-220    	; 0x2cca <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2da6:	8d 32       	cpi	r24, 0x2D	; 45
    2da8:	09 f4       	brne	.+2      	; 0x2dac <__vector_25+0x11c>
    2daa:	89 c0       	rjmp	.+274    	; 0x2ebe <__vector_25+0x22e>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2dac:	8b 32       	cpi	r24, 0x2B	; 43
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <__vector_25+0x122>
    2db0:	3f c0       	rjmp	.+126    	; 0x2e30 <__vector_25+0x1a0>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2db2:	90 93 18 02 	sts	0x0218, r25
    2db6:	89 cf       	rjmp	.-238    	; 0x2cca <__vector_25+0x3a>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2db8:	10 92 17 02 	sts	0x0217, r1
				choosePeripheral = 0;
    2dbc:	10 92 18 02 	sts	0x0218, r1
				break;
    2dc0:	84 cf       	rjmp	.-248    	; 0x2cca <__vector_25+0x3a>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2dc8:	10 92 18 02 	sts	0x0218, r1
				break;
    2dcc:	7e cf       	rjmp	.-260    	; 0x2cca <__vector_25+0x3a>
			case '4': // left motor
				peripheralChoice = 4;
    2dce:	84 e0       	ldi	r24, 0x04	; 4
    2dd0:	80 93 17 02 	sts	0x0217, r24
				choosePeripheral = 0;
    2dd4:	10 92 18 02 	sts	0x0218, r1
				break;
    2dd8:	78 cf       	rjmp	.-272    	; 0x2cca <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    2dda:	8b 32       	cpi	r24, 0x2B	; 43
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <__vector_25+0x150>
    2dde:	cc c0       	rjmp	.+408    	; 0x2f78 <__vector_25+0x2e8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    2de0:	8d 32       	cpi	r24, 0x2D	; 45
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <__vector_25+0x156>
    2de4:	51 c0       	rjmp	.+162    	; 0x2e88 <__vector_25+0x1f8>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2de6:	83 37       	cpi	r24, 0x73	; 115
    2de8:	09 f0       	breq	.+2      	; 0x2dec <__vector_25+0x15c>
    2dea:	8a cf       	rjmp	.-236    	; 0x2d00 <__vector_25+0x70>
					pwm_right = 0;
    2dec:	10 92 e5 03 	sts	0x03E5, r1
    2df0:	10 92 e4 03 	sts	0x03E4, r1
					OCR3A = 0;
    2df4:	10 92 99 00 	sts	0x0099, r1
    2df8:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2dfc:	10 92 9b 00 	sts	0x009B, r1
    2e00:	10 92 9a 00 	sts	0x009A, r1
    2e04:	62 cf       	rjmp	.-316    	; 0x2cca <__vector_25+0x3a>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    2e06:	8b 32       	cpi	r24, 0x2B	; 43
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <__vector_25+0x17c>
    2e0a:	87 c0       	rjmp	.+270    	; 0x2f1a <__vector_25+0x28a>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2e0c:	8d 32       	cpi	r24, 0x2D	; 45
    2e0e:	09 f1       	breq	.+66     	; 0x2e52 <__vector_25+0x1c2>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2e10:	83 37       	cpi	r24, 0x73	; 115
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <__vector_25+0x186>
    2e14:	75 cf       	rjmp	.-278    	; 0x2d00 <__vector_25+0x70>
					pwm_left = 0;
    2e16:	10 92 e7 03 	sts	0x03E7, r1
    2e1a:	10 92 e6 03 	sts	0x03E6, r1
					OCR4A = 0;
    2e1e:	10 92 a9 00 	sts	0x00A9, r1
    2e22:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2e26:	10 92 ab 00 	sts	0x00AB, r1
    2e2a:	10 92 aa 00 	sts	0x00AA, r1
    2e2e:	4d cf       	rjmp	.-358    	; 0x2cca <__vector_25+0x3a>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2e30:	80 91 15 02 	lds	r24, 0x0215
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2e38:	97 fd       	sbrc	r25, 7
    2e3a:	d3 c0       	rjmp	.+422    	; 0x2fe2 <__vector_25+0x352>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2e3c:	80 93 15 02 	sts	0x0215, r24
					if(pwm_green == 0) {
    2e40:	88 23       	and	r24, r24
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <__vector_25+0x1b6>
    2e44:	d0 c0       	rjmp	.+416    	; 0x2fe6 <__vector_25+0x356>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	90 93 8b 00 	sts	0x008B, r25
    2e4c:	80 93 8a 00 	sts	0x008A, r24
    2e50:	3c cf       	rjmp	.-392    	; 0x2cca <__vector_25+0x3a>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2e52:	80 91 e6 03 	lds	r24, 0x03E6
    2e56:	90 91 e7 03 	lds	r25, 0x03E7
    2e5a:	4e 97       	sbiw	r24, 0x1e	; 30
    2e5c:	90 93 e7 03 	sts	0x03E7, r25
    2e60:	80 93 e6 03 	sts	0x03E6, r24
					if(pwm_left < -MAX_MOTORS_PWM) {
    2e64:	2c ef       	ldi	r18, 0xFC	; 252
    2e66:	80 30       	cpi	r24, 0x00	; 0
    2e68:	92 07       	cpc	r25, r18
    2e6a:	0c f0       	brlt	.+2      	; 0x2e6e <__vector_25+0x1de>
    2e6c:	cc c0       	rjmp	.+408    	; 0x3006 <__vector_25+0x376>
						pwm_left = -MAX_MOTORS_PWM;
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	9c ef       	ldi	r25, 0xFC	; 252
    2e72:	90 93 e7 03 	sts	0x03E7, r25
    2e76:	80 93 e6 03 	sts	0x03E6, r24
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2e7e:	90 93 ab 00 	sts	0x00AB, r25
    2e82:	80 93 aa 00 	sts	0x00AA, r24
    2e86:	21 cf       	rjmp	.-446    	; 0x2cca <__vector_25+0x3a>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2e88:	80 91 e4 03 	lds	r24, 0x03E4
    2e8c:	90 91 e5 03 	lds	r25, 0x03E5
    2e90:	4e 97       	sbiw	r24, 0x1e	; 30
    2e92:	90 93 e5 03 	sts	0x03E5, r25
    2e96:	80 93 e4 03 	sts	0x03E4, r24
					if(pwm_right < -MAX_MOTORS_PWM) {
    2e9a:	2c ef       	ldi	r18, 0xFC	; 252
    2e9c:	80 30       	cpi	r24, 0x00	; 0
    2e9e:	92 07       	cpc	r25, r18
    2ea0:	0c f0       	brlt	.+2      	; 0x2ea4 <__vector_25+0x214>
    2ea2:	b7 c0       	rjmp	.+366    	; 0x3012 <__vector_25+0x382>
						pwm_right = -MAX_MOTORS_PWM;
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	9c ef       	ldi	r25, 0xFC	; 252
    2ea8:	90 93 e5 03 	sts	0x03E5, r25
    2eac:	80 93 e4 03 	sts	0x03E4, r24
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	94 e0       	ldi	r25, 0x04	; 4
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2eb4:	90 93 9b 00 	sts	0x009B, r25
    2eb8:	80 93 9a 00 	sts	0x009A, r24
    2ebc:	06 cf       	rjmp	.-500    	; 0x2cca <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2ebe:	80 91 80 00 	lds	r24, 0x0080
    2ec2:	80 62       	ori	r24, 0x20	; 32
    2ec4:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2ec8:	80 91 15 02 	lds	r24, 0x0215
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	19 f0       	breq	.+6      	; 0x2edc <__vector_25+0x24c>
    2ed6:	14 f0       	brlt	.+4      	; 0x2edc <__vector_25+0x24c>
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	80 93 15 02 	sts	0x0215, r24
					OCR1B = pwm_green;
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	90 93 8b 00 	sts	0x008B, r25
    2ee6:	80 93 8a 00 	sts	0x008A, r24
    2eea:	ef ce       	rjmp	.-546    	; 0x2cca <__vector_25+0x3a>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2eec:	80 91 80 00 	lds	r24, 0x0080
    2ef0:	80 68       	ori	r24, 0x80	; 128
    2ef2:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2ef6:	80 91 14 02 	lds	r24, 0x0214
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2efe:	8f 3f       	cpi	r24, 0xFF	; 255
    2f00:	91 05       	cpc	r25, r1
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <__vector_25+0x27a>
    2f04:	14 f0       	brlt	.+4      	; 0x2f0a <__vector_25+0x27a>
    2f06:	8f ef       	ldi	r24, 0xFF	; 255
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	80 93 14 02 	sts	0x0214, r24
					OCR1A = pwm_red;
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	90 93 89 00 	sts	0x0089, r25
    2f14:	80 93 88 00 	sts	0x0088, r24
    2f18:	d8 ce       	rjmp	.-592    	; 0x2cca <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2f1a:	80 91 e6 03 	lds	r24, 0x03E6
    2f1e:	90 91 e7 03 	lds	r25, 0x03E7
    2f22:	4e 96       	adiw	r24, 0x1e	; 30
    2f24:	90 93 e7 03 	sts	0x03E7, r25
    2f28:	80 93 e6 03 	sts	0x03E6, r24
					if(pwm_left > MAX_MOTORS_PWM) {
    2f2c:	24 e0       	ldi	r18, 0x04	; 4
    2f2e:	81 30       	cpi	r24, 0x01	; 1
    2f30:	92 07       	cpc	r25, r18
    2f32:	d4 f1       	brlt	.+116    	; 0x2fa8 <__vector_25+0x318>
						pwm_left = MAX_MOTORS_PWM;
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	94 e0       	ldi	r25, 0x04	; 4
    2f38:	90 93 e7 03 	sts	0x03E7, r25
    2f3c:	80 93 e6 03 	sts	0x03E6, r24
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2f40:	90 93 a9 00 	sts	0x00A9, r25
    2f44:	80 93 a8 00 	sts	0x00A8, r24
    2f48:	c0 ce       	rjmp	.-640    	; 0x2cca <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2f4a:	80 91 80 00 	lds	r24, 0x0080
    2f4e:	88 60       	ori	r24, 0x08	; 8
    2f50:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2f54:	80 91 16 02 	lds	r24, 0x0216
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f5e:	91 05       	cpc	r25, r1
    2f60:	19 f0       	breq	.+6      	; 0x2f68 <__vector_25+0x2d8>
    2f62:	14 f0       	brlt	.+4      	; 0x2f68 <__vector_25+0x2d8>
    2f64:	8f ef       	ldi	r24, 0xFF	; 255
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	80 93 16 02 	sts	0x0216, r24
					OCR1C = pwm_blue;
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	90 93 8d 00 	sts	0x008D, r25
    2f72:	80 93 8c 00 	sts	0x008C, r24
    2f76:	a9 ce       	rjmp	.-686    	; 0x2cca <__vector_25+0x3a>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2f78:	80 91 e4 03 	lds	r24, 0x03E4
    2f7c:	90 91 e5 03 	lds	r25, 0x03E5
    2f80:	4e 96       	adiw	r24, 0x1e	; 30
    2f82:	90 93 e5 03 	sts	0x03E5, r25
    2f86:	80 93 e4 03 	sts	0x03E4, r24
					if(pwm_right > MAX_MOTORS_PWM) {
    2f8a:	24 e0       	ldi	r18, 0x04	; 4
    2f8c:	81 30       	cpi	r24, 0x01	; 1
    2f8e:	92 07       	cpc	r25, r18
    2f90:	ac f0       	brlt	.+42     	; 0x2fbc <__vector_25+0x32c>
						pwm_right = MAX_MOTORS_PWM;
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	94 e0       	ldi	r25, 0x04	; 4
    2f96:	90 93 e5 03 	sts	0x03E5, r25
    2f9a:	80 93 e4 03 	sts	0x03E4, r24
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2f9e:	90 93 99 00 	sts	0x0099, r25
    2fa2:	80 93 98 00 	sts	0x0098, r24
    2fa6:	91 ce       	rjmp	.-734    	; 0x2cca <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2fa8:	97 ff       	sbrs	r25, 7
    2faa:	ca cf       	rjmp	.-108    	; 0x2f40 <__vector_25+0x2b0>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2fac:	90 95       	com	r25
    2fae:	81 95       	neg	r24
    2fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb2:	90 93 ab 00 	sts	0x00AB, r25
    2fb6:	80 93 aa 00 	sts	0x00AA, r24
    2fba:	87 ce       	rjmp	.-754    	; 0x2cca <__vector_25+0x3a>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2fbc:	97 ff       	sbrs	r25, 7
    2fbe:	ef cf       	rjmp	.-34     	; 0x2f9e <__vector_25+0x30e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    2fc0:	90 95       	com	r25
    2fc2:	81 95       	neg	r24
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	90 93 9b 00 	sts	0x009B, r25
    2fca:	80 93 9a 00 	sts	0x009A, r24
    2fce:	7d ce       	rjmp	.-774    	; 0x2cca <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2fd0:	10 92 14 02 	sts	0x0214, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2fd4:	80 91 80 00 	lds	r24, 0x0080
    2fd8:	8f 77       	andi	r24, 0x7F	; 127
    2fda:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    2fde:	2d 98       	cbi	0x05, 5	; 5
    2fe0:	74 ce       	rjmp	.-792    	; 0x2cca <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2fe2:	10 92 15 02 	sts	0x0215, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2fe6:	80 91 80 00 	lds	r24, 0x0080
    2fea:	8f 7d       	andi	r24, 0xDF	; 223
    2fec:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2ff0:	2e 98       	cbi	0x05, 6	; 5
    2ff2:	6b ce       	rjmp	.-810    	; 0x2cca <__vector_25+0x3a>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2ff4:	10 92 16 02 	sts	0x0216, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2ff8:	80 91 80 00 	lds	r24, 0x0080
    2ffc:	87 7f       	andi	r24, 0xF7	; 247
    2ffe:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    3002:	2f 98       	cbi	0x05, 7	; 5
    3004:	62 ce       	rjmp	.-828    	; 0x2cca <__vector_25+0x3a>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    3006:	97 ff       	sbrs	r25, 7
    3008:	9b cf       	rjmp	.-202    	; 0x2f40 <__vector_25+0x2b0>
						OCR4A = pwm_left;
    300a:	90 95       	com	r25
    300c:	81 95       	neg	r24
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	36 cf       	rjmp	.-404    	; 0x2e7e <__vector_25+0x1ee>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3012:	97 ff       	sbrs	r25, 7
    3014:	c4 cf       	rjmp	.-120    	; 0x2f9e <__vector_25+0x30e>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    3016:	90 95       	com	r25
    3018:	81 95       	neg	r24
    301a:	9f 4f       	sbci	r25, 0xFF	; 255
    301c:	4b cf       	rjmp	.-362    	; 0x2eb4 <__vector_25+0x224>

0000301e <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    301e:	86 b1       	in	r24, 0x06	; 6
    3020:	66 b1       	in	r22, 0x06	; 6
    3022:	26 b1       	in	r18, 0x06	; 6
    3024:	46 b1       	in	r20, 0x06	; 6
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	28 70       	andi	r18, 0x08	; 8
    302a:	30 70       	andi	r19, 0x00	; 0
    302c:	35 95       	asr	r19
    302e:	27 95       	ror	r18
    3030:	35 95       	asr	r19
    3032:	27 95       	ror	r18
    3034:	35 95       	asr	r19
    3036:	27 95       	ror	r18
    3038:	22 0f       	add	r18, r18
    303a:	33 1f       	adc	r19, r19
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	64 70       	andi	r22, 0x04	; 4
    3040:	70 70       	andi	r23, 0x00	; 0
    3042:	75 95       	asr	r23
    3044:	67 95       	ror	r22
    3046:	75 95       	asr	r23
    3048:	67 95       	ror	r22
    304a:	26 0f       	add	r18, r22
    304c:	37 1f       	adc	r19, r23
    304e:	22 0f       	add	r18, r18
    3050:	33 1f       	adc	r19, r19
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	42 70       	andi	r20, 0x02	; 2
    3056:	50 70       	andi	r21, 0x00	; 0
    3058:	55 95       	asr	r21
    305a:	47 95       	ror	r20
    305c:	24 0f       	add	r18, r20
    305e:	35 1f       	adc	r19, r21
    3060:	22 0f       	add	r18, r18
    3062:	81 70       	andi	r24, 0x01	; 1
}
    3064:	82 0f       	add	r24, r18
    3066:	08 95       	ret

00003068 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3068:	f8 94       	cli

	initPortsIO();
    306a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <initPortsIO>
	initAdc();
    306e:	0e 94 27 1b 	call	0x364e	; 0x364e <initAdc>
	initMotors();
    3072:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <initMotors>
	initRGBleds();
    3076:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <initRGBleds>
	initSPI();
    307a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <initSPI>
	mirf_init();
    307e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <mirf_init>
	initUsart();
    3082:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <initUsart>
	initAccelerometer();
    3086:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <initAccelerometer>
	e_init_remote_control();
    308a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <e_init_remote_control>

	sei();			// enable global interrupts
    308e:	78 94       	sei

	
}
    3090:	08 95       	ret

00003092 <__vector_15>:

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3092:	1f 92       	push	r1
    3094:	0f 92       	push	r0
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	0f 92       	push	r0
    309a:	11 24       	eor	r1, r1

}
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <sleep>:

void sleep(unsigned char seconds) {
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    30aa:	9e e1       	ldi	r25, 0x1E	; 30
    30ac:	89 9f       	mul	r24, r25
    30ae:	e0 01       	movw	r28, r0
    30b0:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    30b2:	80 91 68 00 	lds	r24, 0x0068
    30b6:	8d 7f       	andi	r24, 0xFD	; 253
    30b8:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    30bc:	80 91 6c 00 	lds	r24, 0x006C
    30c0:	8f 77       	andi	r24, 0x7F	; 127
    30c2:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    30c6:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    30c8:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    30cc:	80 91 7a 00 	lds	r24, 0x007A
    30d0:	80 61       	ori	r24, 0x10	; 16
    30d2:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    30d6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    30da:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    30de:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    30e2:	88 b3       	in	r24, 0x18	; 24
    30e4:	87 60       	ori	r24, 0x07	; 7
    30e6:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    30e8:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    30ec:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    30f0:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    30f4:	89 b3       	in	r24, 0x19	; 25
    30f6:	87 60       	ori	r24, 0x07	; 7
    30f8:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    30fa:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    30fe:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3102:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <closeUsart>
	closeSPI();
    3106:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <closeSPI>
	i2c_close();
    310a:	0e 94 77 15 	call	0x2aee	; 0x2aee <i2c_close>

	// set port pins
	initPortsIO();
    310e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3112:	83 b7       	in	r24, 0x33	; 51
    3114:	8f 60       	ori	r24, 0x0F	; 15
    3116:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    311e:	80 91 b0 00 	lds	r24, 0x00B0
    3122:	8d 7f       	andi	r24, 0xFD	; 253
    3124:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3128:	80 91 b1 00 	lds	r24, 0x00B1
    312c:	87 60       	ori	r24, 0x07	; 7
    312e:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3132:	20 97       	sbiw	r28, 0x00	; 0
    3134:	19 f0       	breq	.+6      	; 0x313c <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3136:	88 95       	sleep
		pause--;
    3138:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    313a:	e9 f7       	brne	.-6      	; 0x3136 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    313c:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    313e:	80 91 b1 00 	lds	r24, 0x00B1
    3142:	88 7f       	andi	r24, 0xF8	; 248
    3144:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3148:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    314c:	80 91 b0 00 	lds	r24, 0x00B0
    3150:	82 60       	ori	r24, 0x02	; 2
    3152:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	80 93 14 02 	sts	0x0214, r24
	pwm_green = 255;
    315c:	80 93 15 02 	sts	0x0215, r24
	pwm_blue = 255;
    3160:	80 93 16 02 	sts	0x0216, r24
	pwm_right = 0;
    3164:	10 92 e5 03 	sts	0x03E5, r1
    3168:	10 92 e4 03 	sts	0x03E4, r1
	pwm_left = 0;
    316c:	10 92 e7 03 	sts	0x03E7, r1
    3170:	10 92 e6 03 	sts	0x03E6, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3174:	f8 94       	cli

	initPortsIO();
    3176:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <initPortsIO>
	initAdc();
    317a:	0e 94 27 1b 	call	0x364e	; 0x364e <initAdc>
	initMotors();
    317e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <initMotors>
	initRGBleds();
    3182:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <initRGBleds>
	initSPI();
    3186:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <initSPI>
	mirf_init();
    318a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <mirf_init>
	initUsart();
    318e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <initUsart>
	initAccelerometer();
    3192:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <initAccelerometer>
	e_init_remote_control();
    3196:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <e_init_remote_control>

	sei();			// enable global interrupts
    319a:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	08 95       	ret

000031a2 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    31a2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    31a6:	80 91 1b 02 	lds	r24, 0x021B
    31aa:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    31ae:	88 23       	and	r24, r24
    31b0:	49 f4       	brne	.+18     	; 0x31c4 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    31b2:	86 e1       	ldi	r24, 0x16	; 22
    31b4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    31b8:	85 e4       	ldi	r24, 0x45	; 69
    31ba:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    31be:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    31c2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    31c4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    31c8:	86 ea       	ldi	r24, 0xA6	; 166
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	90 93 1c 02 	sts	0x021C, r25
    31d0:	80 93 1b 02 	sts	0x021B, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    31d4:	86 ea       	ldi	r24, 0xA6	; 166
    31d6:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    31da:	88 23       	and	r24, r24
    31dc:	41 f5       	brne	.+80     	; 0x322e <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    31de:	8d e2       	ldi	r24, 0x2D	; 45
    31e0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x08);	// measurement mode
    31e4:	88 e0       	ldi	r24, 0x08	; 8
    31e6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    31ea:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    31ee:	80 91 1b 02 	lds	r24, 0x021B
    31f2:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    31f6:	88 23       	and	r24, r24
    31f8:	d1 f4       	brne	.+52     	; 0x322e <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    31fa:	81 e3       	ldi	r24, 0x31	; 49
    31fc:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3206:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    320a:	80 91 1b 02 	lds	r24, 0x021B
    320e:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3212:	88 23       	and	r24, r24
    3214:	61 f4       	brne	.+24     	; 0x322e <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3216:	8c e2       	ldi	r24, 0x2C	; 44
    3218:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    321c:	89 e0       	ldi	r24, 0x09	; 9
    321e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3222:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 0d 04 	sts	0x040D, r24
    322c:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    322e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	80 93 0d 04 	sts	0x040D, r24
    3238:	08 95       	ret

0000323a <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    323a:	80 91 1b 02 	lds	r24, 0x021B
    323e:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3242:	88 23       	and	r24, r24
    3244:	51 f4       	brne	.+20     	; 0x325a <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3246:	86 e1       	ldi	r24, 0x16	; 22
    3248:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    324c:	85 e4       	ldi	r24, 0x45	; 69
    324e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3252:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    }

	return 0;				// configuration ok
    3256:	80 e0       	ldi	r24, 0x00	; 0

}
    3258:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    325a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
		return 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	08 95       	ret

00003262 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3262:	80 91 1b 02 	lds	r24, 0x021B
    3266:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    326a:	88 23       	and	r24, r24
    326c:	31 f5       	brne	.+76     	; 0x32ba <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    326e:	8d e2       	ldi	r24, 0x2D	; 45
    3270:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x08);	// measurement mode
    3274:	88 e0       	ldi	r24, 0x08	; 8
    3276:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    327a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    327e:	80 91 1b 02 	lds	r24, 0x021B
    3282:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3286:	88 23       	and	r24, r24
    3288:	c1 f4       	brne	.+48     	; 0x32ba <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    328a:	81 e3       	ldi	r24, 0x31	; 49
    328c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3296:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    329a:	80 91 1b 02 	lds	r24, 0x021B
    329e:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    32a2:	88 23       	and	r24, r24
    32a4:	51 f4       	brne	.+20     	; 0x32ba <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    32a6:	8c e2       	ldi	r24, 0x2C	; 44
    32a8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    32ac:	89 e0       	ldi	r24, 0x09	; 9
    32ae:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    32b2:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
    }

	return 0;
    32b6:	80 e0       	ldi	r24, 0x00	; 0

}
    32b8:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    32ba:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>
		return 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	08 95       	ret

000032c2 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	0f 92       	push	r0
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    32d2:	80 91 0d 04 	lds	r24, 0x040D
    32d6:	88 23       	and	r24, r24
    32d8:	91 f0       	breq	.+36     	; 0x32fe <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    32da:	81 30       	cpi	r24, 0x01	; 1
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <readAccelXY+0x1e>
    32de:	88 c0       	rjmp	.+272    	; 0x33f0 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    32e0:	10 92 0f 04 	sts	0x040F, r1
    32e4:	10 92 0e 04 	sts	0x040E, r1
		accY = 0;
    32e8:	10 92 11 04 	sts	0x0411, r1
    32ec:	10 92 10 04 	sts	0x0410, r1

	}

}
    32f0:	0f 90       	pop	r0
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	1f 91       	pop	r17
    32f8:	0f 91       	pop	r16
    32fa:	ff 90       	pop	r15
    32fc:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    32fe:	80 91 1b 02 	lds	r24, 0x021B
    3302:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3306:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    3308:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    330c:	80 91 1b 02 	lds	r24, 0x021B
    3310:	8f 5f       	subi	r24, 0xFF	; 255
    3312:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3316:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    331a:	08 2f       	mov	r16, r24
    331c:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    3320:	f8 2e       	mov	r15, r24
    3322:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    3326:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3328:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3332:	90 91 2d 04 	lds	r25, 0x042D
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	99 23       	and	r25, r25
    333a:	39 f1       	breq	.+78     	; 0x338a <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    333c:	4f 2d       	mov	r20, r15
    333e:	55 27       	eor	r21, r21
    3340:	47 fd       	sbrc	r20, 7
    3342:	50 95       	com	r21
    3344:	54 2f       	mov	r21, r20
    3346:	44 27       	eor	r20, r20
    3348:	60 2f       	mov	r22, r16
    334a:	77 27       	eor	r23, r23
    334c:	67 fd       	sbrc	r22, 7
    334e:	70 95       	com	r23
    3350:	46 2b       	or	r20, r22
    3352:	57 2b       	or	r21, r23
    3354:	50 93 0f 04 	sts	0x040F, r21
    3358:	40 93 0e 04 	sts	0x040E, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    335c:	28 2f       	mov	r18, r24
    335e:	33 27       	eor	r19, r19
    3360:	27 fd       	sbrc	r18, 7
    3362:	30 95       	com	r19
    3364:	32 2f       	mov	r19, r18
    3366:	22 27       	eor	r18, r18
    3368:	81 2f       	mov	r24, r17
    336a:	99 27       	eor	r25, r25
    336c:	87 fd       	sbrc	r24, 7
    336e:	90 95       	com	r25
    3370:	28 2b       	or	r18, r24
    3372:	39 2b       	or	r19, r25
    3374:	30 93 11 04 	sts	0x0411, r19
    3378:	20 93 10 04 	sts	0x0410, r18
		accX = 0;
		accY = 0;

	}

}
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	ff 90       	pop	r15
    3388:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    338a:	4f 2d       	mov	r20, r15
    338c:	55 27       	eor	r21, r21
    338e:	47 fd       	sbrc	r20, 7
    3390:	50 95       	com	r21
    3392:	54 2f       	mov	r21, r20
    3394:	44 27       	eor	r20, r20
    3396:	60 2f       	mov	r22, r16
    3398:	77 27       	eor	r23, r23
    339a:	67 fd       	sbrc	r22, 7
    339c:	70 95       	com	r23
    339e:	46 2b       	or	r20, r22
    33a0:	57 2b       	or	r21, r23
    33a2:	60 91 1a 04 	lds	r22, 0x041A
    33a6:	70 91 1b 04 	lds	r23, 0x041B
    33aa:	46 1b       	sub	r20, r22
    33ac:	57 0b       	sbc	r21, r23
    33ae:	50 93 0f 04 	sts	0x040F, r21
    33b2:	40 93 0e 04 	sts	0x040E, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    33b6:	28 2f       	mov	r18, r24
    33b8:	33 27       	eor	r19, r19
    33ba:	27 fd       	sbrc	r18, 7
    33bc:	30 95       	com	r19
    33be:	32 2f       	mov	r19, r18
    33c0:	22 27       	eor	r18, r18
    33c2:	81 2f       	mov	r24, r17
    33c4:	99 27       	eor	r25, r25
    33c6:	87 fd       	sbrc	r24, 7
    33c8:	90 95       	com	r25
    33ca:	28 2b       	or	r18, r24
    33cc:	39 2b       	or	r19, r25
    33ce:	80 91 1c 04 	lds	r24, 0x041C
    33d2:	90 91 1d 04 	lds	r25, 0x041D
    33d6:	28 1b       	sub	r18, r24
    33d8:	39 0b       	sbc	r19, r25
    33da:	30 93 11 04 	sts	0x0411, r19
    33de:	20 93 10 04 	sts	0x0410, r18
		accX = 0;
		accY = 0;

	}

}
    33e2:	0f 90       	pop	r0
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    33f0:	80 91 1b 02 	lds	r24, 0x021B
    33f4:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    33f8:	82 e3       	ldi	r24, 0x32	; 50
    33fa:	86 cf       	rjmp	.-244    	; 0x3308 <readAccelXY+0x46>

000033fc <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	00 d0       	rcall	.+0      	; 0x3402 <readAccelXYZ+0x6>
    3402:	00 d0       	rcall	.+0      	; 0x3404 <readAccelXYZ+0x8>
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    3408:	80 91 0d 04 	lds	r24, 0x040D
    340c:	88 23       	and	r24, r24
    340e:	c1 f0       	breq	.+48     	; 0x3440 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    3410:	81 30       	cpi	r24, 0x01	; 1
    3412:	09 f4       	brne	.+2      	; 0x3416 <readAccelXYZ+0x1a>
    3414:	ad c0       	rjmp	.+346    	; 0x3570 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    3416:	10 92 0f 04 	sts	0x040F, r1
    341a:	10 92 0e 04 	sts	0x040E, r1
		accY = 0;
    341e:	10 92 11 04 	sts	0x0411, r1
    3422:	10 92 10 04 	sts	0x0410, r1
		accZ = 0;
    3426:	10 92 13 04 	sts	0x0413, r1
    342a:	10 92 12 04 	sts	0x0412, r1

	}

}
    342e:	26 96       	adiw	r28, 0x06	; 6
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3440:	80 91 1b 02 	lds	r24, 0x021B
    3444:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3448:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    344a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    344e:	80 91 1b 02 	lds	r24, 0x021B
    3452:	8f 5f       	subi	r24, 0xFF	; 255
    3454:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3458:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    3462:	8a 83       	std	Y+2, r24	; 0x02
    3464:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    346e:	8c 83       	std	Y+4, r24	; 0x04
    3470:	0e 94 11 16 	call	0x2c22	; 0x2c22 <i2c_readAck>
    3474:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3476:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2c_readNak>
    347a:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    347c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3480:	80 91 2d 04 	lds	r24, 0x042D
    3484:	88 23       	and	r24, r24
    3486:	89 f1       	breq	.+98     	; 0x34ea <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	99 27       	eor	r25, r25
    348c:	87 fd       	sbrc	r24, 7
    348e:	90 95       	com	r25
    3490:	98 2f       	mov	r25, r24
    3492:	88 27       	eor	r24, r24
    3494:	29 81       	ldd	r18, Y+1	; 0x01
    3496:	33 27       	eor	r19, r19
    3498:	27 fd       	sbrc	r18, 7
    349a:	30 95       	com	r19
    349c:	82 2b       	or	r24, r18
    349e:	93 2b       	or	r25, r19
    34a0:	90 93 0f 04 	sts	0x040F, r25
    34a4:	80 93 0e 04 	sts	0x040E, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    34a8:	8c 81       	ldd	r24, Y+4	; 0x04
    34aa:	99 27       	eor	r25, r25
    34ac:	87 fd       	sbrc	r24, 7
    34ae:	90 95       	com	r25
    34b0:	98 2f       	mov	r25, r24
    34b2:	88 27       	eor	r24, r24
    34b4:	2b 81       	ldd	r18, Y+3	; 0x03
    34b6:	33 27       	eor	r19, r19
    34b8:	27 fd       	sbrc	r18, 7
    34ba:	30 95       	com	r19
    34bc:	82 2b       	or	r24, r18
    34be:	93 2b       	or	r25, r19
    34c0:	90 93 11 04 	sts	0x0411, r25
    34c4:	80 93 10 04 	sts	0x0410, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    34c8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ca:	99 27       	eor	r25, r25
    34cc:	87 fd       	sbrc	r24, 7
    34ce:	90 95       	com	r25
    34d0:	98 2f       	mov	r25, r24
    34d2:	88 27       	eor	r24, r24
    34d4:	2d 81       	ldd	r18, Y+5	; 0x05
    34d6:	33 27       	eor	r19, r19
    34d8:	27 fd       	sbrc	r18, 7
    34da:	30 95       	com	r19
    34dc:	82 2b       	or	r24, r18
    34de:	93 2b       	or	r25, r19
    34e0:	90 93 13 04 	sts	0x0413, r25
    34e4:	80 93 12 04 	sts	0x0412, r24
    34e8:	a2 cf       	rjmp	.-188    	; 0x342e <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	99 27       	eor	r25, r25
    34ee:	87 fd       	sbrc	r24, 7
    34f0:	90 95       	com	r25
    34f2:	98 2f       	mov	r25, r24
    34f4:	88 27       	eor	r24, r24
    34f6:	29 81       	ldd	r18, Y+1	; 0x01
    34f8:	33 27       	eor	r19, r19
    34fa:	27 fd       	sbrc	r18, 7
    34fc:	30 95       	com	r19
    34fe:	82 2b       	or	r24, r18
    3500:	93 2b       	or	r25, r19
    3502:	20 91 1a 04 	lds	r18, 0x041A
    3506:	30 91 1b 04 	lds	r19, 0x041B
    350a:	82 1b       	sub	r24, r18
    350c:	93 0b       	sbc	r25, r19
    350e:	90 93 0f 04 	sts	0x040F, r25
    3512:	80 93 0e 04 	sts	0x040E, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3516:	8c 81       	ldd	r24, Y+4	; 0x04
    3518:	99 27       	eor	r25, r25
    351a:	87 fd       	sbrc	r24, 7
    351c:	90 95       	com	r25
    351e:	98 2f       	mov	r25, r24
    3520:	88 27       	eor	r24, r24
    3522:	2b 81       	ldd	r18, Y+3	; 0x03
    3524:	33 27       	eor	r19, r19
    3526:	27 fd       	sbrc	r18, 7
    3528:	30 95       	com	r19
    352a:	82 2b       	or	r24, r18
    352c:	93 2b       	or	r25, r19
    352e:	20 91 1c 04 	lds	r18, 0x041C
    3532:	30 91 1d 04 	lds	r19, 0x041D
    3536:	82 1b       	sub	r24, r18
    3538:	93 0b       	sbc	r25, r19
    353a:	90 93 11 04 	sts	0x0411, r25
    353e:	80 93 10 04 	sts	0x0410, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    3542:	8e 81       	ldd	r24, Y+6	; 0x06
    3544:	99 27       	eor	r25, r25
    3546:	87 fd       	sbrc	r24, 7
    3548:	90 95       	com	r25
    354a:	98 2f       	mov	r25, r24
    354c:	88 27       	eor	r24, r24
    354e:	2d 81       	ldd	r18, Y+5	; 0x05
    3550:	33 27       	eor	r19, r19
    3552:	27 fd       	sbrc	r18, 7
    3554:	30 95       	com	r19
    3556:	82 2b       	or	r24, r18
    3558:	93 2b       	or	r25, r19
    355a:	20 91 1e 04 	lds	r18, 0x041E
    355e:	30 91 1f 04 	lds	r19, 0x041F
    3562:	82 1b       	sub	r24, r18
    3564:	93 0b       	sbc	r25, r19
    3566:	90 93 13 04 	sts	0x0413, r25
    356a:	80 93 12 04 	sts	0x0412, r24
    356e:	5f cf       	rjmp	.-322    	; 0x342e <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    3570:	80 91 1b 02 	lds	r24, 0x021B
    3574:	0e 94 84 15 	call	0x2b08	; 0x2b08 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3578:	82 e3       	ldi	r24, 0x32	; 50
    357a:	67 cf       	rjmp	.-306    	; 0x344a <readAccelXYZ+0x4e>

0000357c <computeAngle>:

	}

}

void computeAngle() {
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    3584:	80 91 12 04 	lds	r24, 0x0412
    3588:	90 91 13 04 	lds	r25, 0x0413
    358c:	97 fd       	sbrc	r25, 7
    358e:	5b c0       	rjmp	.+182    	; 0x3646 <computeAngle+0xca>

	// check the robot position (orizzontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    3590:	80 31       	cpi	r24, 0x10	; 16
    3592:	91 05       	cpc	r25, r1
    3594:	08 f0       	brcs	.+2      	; 0x3598 <computeAngle+0x1c>
    3596:	42 c0       	rjmp	.+132    	; 0x361c <computeAngle+0xa0>
		currPosition = ORIZZONTAL_POS;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	80 93 1d 02 	sts	0x021D, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    359e:	90 91 1c 02 	lds	r25, 0x021C
    35a2:	98 17       	cp	r25, r24
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <computeAngle+0x2c>
    35a6:	42 c0       	rjmp	.+132    	; 0x362c <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    35a8:	10 92 28 04 	sts	0x0428, r1
	}
	prevPosition = currPosition;
    35ac:	80 93 1c 02 	sts	0x021C, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);
    35b0:	60 91 0e 04 	lds	r22, 0x040E
    35b4:	70 91 0f 04 	lds	r23, 0x040F
    35b8:	88 27       	eor	r24, r24
    35ba:	77 fd       	sbrc	r23, 7
    35bc:	80 95       	com	r24
    35be:	98 2f       	mov	r25, r24
    35c0:	0e 94 8e 20 	call	0x411c	; 0x411c <__floatsisf>
    35c4:	7b 01       	movw	r14, r22
    35c6:	8c 01       	movw	r16, r24
    35c8:	60 91 10 04 	lds	r22, 0x0410
    35cc:	70 91 11 04 	lds	r23, 0x0411
    35d0:	88 27       	eor	r24, r24
    35d2:	77 fd       	sbrc	r23, 7
    35d4:	80 95       	com	r24
    35d6:	98 2f       	mov	r25, r24
    35d8:	0e 94 8e 20 	call	0x411c	; 0x411c <__floatsisf>
    35dc:	9b 01       	movw	r18, r22
    35de:	ac 01       	movw	r20, r24
    35e0:	c8 01       	movw	r24, r16
    35e2:	b7 01       	movw	r22, r14
    35e4:	0e 94 49 23 	call	0x4692	; 0x4692 <atan2>
    35e8:	21 ee       	ldi	r18, 0xE1	; 225
    35ea:	3e e2       	ldi	r19, 0x2E	; 46
    35ec:	45 e6       	ldi	r20, 0x65	; 101
    35ee:	52 e4       	ldi	r21, 0x42	; 66
    35f0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__mulsf3>
    35f4:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <__fixsfsi>
    35f8:	9b 01       	movw	r18, r22
    35fa:	70 93 21 04 	sts	0x0421, r23
    35fe:	60 93 20 04 	sts	0x0420, r22

	if(currentAngle < 0) {
    3602:	77 ff       	sbrs	r23, 7
    3604:	06 c0       	rjmp	.+12     	; 0x3612 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    3606:	28 59       	subi	r18, 0x98	; 152
    3608:	3e 4f       	sbci	r19, 0xFE	; 254
    360a:	30 93 21 04 	sts	0x0421, r19
    360e:	20 93 20 04 	sts	0x0420, r18
	}

}
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	ff 90       	pop	r15
    3618:	ef 90       	pop	r14
    361a:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = ORIZZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    361c:	10 92 1d 02 	sts	0x021D, r1
    3620:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    3622:	90 91 1c 02 	lds	r25, 0x021C
    3626:	98 17       	cp	r25, r24
    3628:	09 f0       	breq	.+2      	; 0x362c <computeAngle+0xb0>
    362a:	be cf       	rjmp	.-132    	; 0x35a8 <computeAngle+0x2c>
		timesInSamePos++;
    362c:	90 91 28 04 	lds	r25, 0x0428
    3630:	9f 5f       	subi	r25, 0xFF	; 255
    3632:	90 93 28 04 	sts	0x0428, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    3636:	95 30       	cpi	r25, 0x05	; 5
    3638:	08 f4       	brcc	.+2      	; 0x363c <computeAngle+0xc0>
    363a:	b8 cf       	rjmp	.-144    	; 0x35ac <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    363c:	10 92 28 04 	sts	0x0428, r1
			robotPosition = currPosition;
    3640:	80 93 1e 02 	sts	0x021E, r24
    3644:	b3 cf       	rjmp	.-154    	; 0x35ac <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    3646:	90 95       	com	r25
    3648:	81 95       	neg	r24
    364a:	9f 4f       	sbci	r25, 0xFF	; 255
    364c:	a1 cf       	rjmp	.-190    	; 0x3590 <computeAngle+0x14>

0000364e <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    364e:	ea e7       	ldi	r30, 0x7A	; 122
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	86 60       	ori	r24, 0x06	; 6
    3656:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3658:	ac e7       	ldi	r26, 0x7C	; 124
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	8c 91       	ld	r24, X
    365e:	80 64       	ori	r24, 0x40	; 64
    3660:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3662:	80 81       	ld	r24, Z
    3664:	80 62       	ori	r24, 0x20	; 32
    3666:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3668:	ab e7       	ldi	r26, 0x7B	; 123
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	8c 91       	ld	r24, X
    366e:	88 7f       	andi	r24, 0xF8	; 248
    3670:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3672:	80 81       	ld	r24, Z
    3674:	88 60       	ori	r24, 0x08	; 8
    3676:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3678:	80 81       	ld	r24, Z
    367a:	80 68       	ori	r24, 0x80	; 128
    367c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    367e:	80 81       	ld	r24, Z
    3680:	80 64       	ori	r24, 0x40	; 64
    3682:	80 83       	st	Z, r24

}
    3684:	08 95       	ret

00003686 <__vector_29>:

ISR(ADC_vect) {
    3686:	1f 92       	push	r1
    3688:	0f 92       	push	r0
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	0f 92       	push	r0
    368e:	0b b6       	in	r0, 0x3b	; 59
    3690:	0f 92       	push	r0
    3692:	11 24       	eor	r1, r1
    3694:	2f 93       	push	r18
    3696:	3f 93       	push	r19
    3698:	4f 93       	push	r20
    369a:	8f 93       	push	r24
    369c:	9f 93       	push	r25
    369e:	ef 93       	push	r30
    36a0:	ff 93       	push	r31

	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector

//	LED_BLUE_ON;

	delayCounter++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    36a2:	80 91 2a 04 	lds	r24, 0x042A
    36a6:	90 91 2b 04 	lds	r25, 0x042B
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	90 93 2b 04 	sts	0x042B, r25
    36b0:	80 93 2a 04 	sts	0x042A, r24
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    36b4:	20 91 78 00 	lds	r18, 0x0078
    36b8:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    36ba:	40 91 79 00 	lds	r20, 0x0079
    36be:	94 2f       	mov	r25, r20
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	28 2b       	or	r18, r24
    36c4:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    36c6:	80 91 95 03 	lds	r24, 0x0395
    36ca:	82 30       	cpi	r24, 0x02	; 2
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <__vector_29+0x4a>
    36ce:	1f c1       	rjmp	.+574    	; 0x390e <__vector_29+0x288>
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	08 f4       	brcc	.+2      	; 0x36d6 <__vector_29+0x50>
    36d4:	44 c0       	rjmp	.+136    	; 0x375e <__vector_29+0xd8>
    36d6:	83 30       	cpi	r24, 0x03	; 3
    36d8:	09 f4       	brne	.+2      	; 0x36dc <__vector_29+0x56>
    36da:	0c c1       	rjmp	.+536    	; 0x38f4 <__vector_29+0x26e>
    36dc:	84 30       	cpi	r24, 0x04	; 4
    36de:	09 f4       	brne	.+2      	; 0x36e2 <__vector_29+0x5c>
    36e0:	ce c0       	rjmp	.+412    	; 0x387e <__vector_29+0x1f8>
			break;										// when the desired speed was zero. Now the speed is always sampled independently of the 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    36e2:	80 91 96 03 	lds	r24, 0x0396
    36e6:	82 30       	cpi	r24, 0x02	; 2
    36e8:	09 f4       	brne	.+2      	; 0x36ec <__vector_29+0x66>
    36ea:	b5 c0       	rjmp	.+362    	; 0x3856 <__vector_29+0x1d0>
    36ec:	83 30       	cpi	r24, 0x03	; 3
    36ee:	08 f0       	brcs	.+2      	; 0x36f2 <__vector_29+0x6c>
    36f0:	52 c0       	rjmp	.+164    	; 0x3796 <__vector_29+0x110>
    36f2:	88 23       	and	r24, r24
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <__vector_29+0x72>
    36f6:	8a c0       	rjmp	.+276    	; 0x380c <__vector_29+0x186>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    36f8:	80 91 30 03 	lds	r24, 0x0330
    36fc:	86 95       	lsr	r24
    36fe:	80 93 2f 03 	sts	0x032F, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3702:	80 91 97 03 	lds	r24, 0x0397
    3706:	88 23       	and	r24, r24
    3708:	09 f0       	breq	.+2      	; 0x370c <__vector_29+0x86>
    370a:	43 c1       	rjmp	.+646    	; 0x3992 <__vector_29+0x30c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	80 93 96 03 	sts	0x0396, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3718:	90 91 2f 03 	lds	r25, 0x032F
    371c:	98 30       	cpi	r25, 0x08	; 8
    371e:	08 f0       	brcs	.+2      	; 0x3722 <__vector_29+0x9c>
    3720:	6a c0       	rjmp	.+212    	; 0x37f6 <__vector_29+0x170>
		ADCSRB &= ~(1 << MUX5);
    3722:	90 91 7b 00 	lds	r25, 0x007B
    3726:	97 7f       	andi	r25, 0xF7	; 247
    3728:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    372c:	90 91 2f 03 	lds	r25, 0x032F
    3730:	90 5c       	subi	r25, 0xC0	; 192
    3732:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3736:	82 30       	cpi	r24, 0x02	; 2
    3738:	21 f4       	brne	.+8      	; 0x3742 <__vector_29+0xbc>
		PORTA = 0x00;
		//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		#endif

		#ifdef HW_REV_3_1
		PORTJ = 0xFF;
    373a:	8f ef       	ldi	r24, 0xFF	; 255
    373c:	80 93 05 01 	sts	0x0105, r24
		PORTA = 0x00;
    3740:	12 b8       	out	0x02, r1	; 2

	}

//	LED_BLUE_OFF;

}
    3742:	ff 91       	pop	r31
    3744:	ef 91       	pop	r30
    3746:	9f 91       	pop	r25
    3748:	8f 91       	pop	r24
    374a:	4f 91       	pop	r20
    374c:	3f 91       	pop	r19
    374e:	2f 91       	pop	r18
    3750:	0f 90       	pop	r0
    3752:	0b be       	out	0x3b, r0	; 59
    3754:	0f 90       	pop	r0
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	0f 90       	pop	r0
    375a:	1f 90       	pop	r1
    375c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    375e:	88 23       	and	r24, r24
    3760:	09 f0       	breq	.+2      	; 0x3764 <__vector_29+0xde>
    3762:	65 c0       	rjmp	.+202    	; 0x382e <__vector_29+0x1a8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3764:	80 91 30 03 	lds	r24, 0x0330
    3768:	8e 30       	cpi	r24, 0x0E	; 14
    376a:	09 f4       	brne	.+2      	; 0x376e <__vector_29+0xe8>
    376c:	24 c1       	rjmp	.+584    	; 0x39b6 <__vector_29+0x330>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    376e:	e8 2f       	mov	r30, r24
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	ee 0f       	add	r30, r30
    3774:	ff 1f       	adc	r31, r31
    3776:	eb 5c       	subi	r30, 0xCB	; 203
    3778:	fc 4f       	sbci	r31, 0xFC	; 252
    377a:	31 83       	std	Z+1, r19	; 0x01
    377c:	20 83       	st	Z, r18
			}
			currentProx++;
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	80 93 30 03 	sts	0x0330, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3784:	88 31       	cpi	r24, 0x18	; 24
    3786:	08 f4       	brcc	.+2      	; 0x378a <__vector_29+0x104>
    3788:	ac cf       	rjmp	.-168    	; 0x36e2 <__vector_29+0x5c>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    378a:	10 92 30 03 	sts	0x0330, r1
				updateProx = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	80 93 9e 03 	sts	0x039E, r24
    3794:	a6 cf       	rjmp	.-180    	; 0x36e2 <__vector_29+0x5c>
			break;										// when the desired speed was zero. Now the speed is always sampled independently of the 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3796:	83 30       	cpi	r24, 0x03	; 3
    3798:	09 f4       	brne	.+2      	; 0x379c <__vector_29+0x116>
    379a:	98 c0       	rjmp	.+304    	; 0x38cc <__vector_29+0x246>
    379c:	84 30       	cpi	r24, 0x04	; 4
    379e:	09 f0       	breq	.+2      	; 0x37a2 <__vector_29+0x11c>
    37a0:	bb cf       	rjmp	.-138    	; 0x3718 <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    37a2:	90 91 32 03 	lds	r25, 0x0332
    37a6:	90 93 2f 03 	sts	0x032F, r25
			rightChannelPhase = rightMotorPhase;
    37aa:	90 91 33 03 	lds	r25, 0x0333
    37ae:	90 93 97 03 	sts	0x0397, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    37b2:	90 91 98 03 	lds	r25, 0x0398
    37b6:	99 23       	and	r25, r25
    37b8:	09 f0       	breq	.+2      	; 0x37bc <__vector_29+0x136>
    37ba:	e5 c0       	rjmp	.+458    	; 0x3986 <__vector_29+0x300>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    37bc:	83 e0       	ldi	r24, 0x03	; 3
    37be:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    37c2:	10 92 96 03 	sts	0x0396, r1

			if(currentProx==14 && measBattery==1) {
    37c6:	20 91 30 03 	lds	r18, 0x0330
    37ca:	2e 30       	cpi	r18, 0x0E	; 14
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <__vector_29+0x14a>
    37ce:	ed c0       	rjmp	.+474    	; 0x39aa <__vector_29+0x324>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    37d0:	82 2f       	mov	r24, r18
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	20 ff       	sbrs	r18, 0
    37d6:	ce c0       	rjmp	.+412    	; 0x3974 <__vector_29+0x2ee>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports
    37d8:	20 31       	cpi	r18, 0x10	; 16
    37da:	08 f0       	brcs	.+2      	; 0x37de <__vector_29+0x158>
    37dc:	bb c0       	rjmp	.+374    	; 0x3954 <__vector_29+0x2ce>
					//if(currentProx==14 && measBattery==1) {	// channel 7 is shared for both prox7 and battery sampling
					//	measBattery=2;
					//	SENS_ENABLE_ON;
					//} else {
						PORTA = (1 << (currentProx>>1));	// pulse on
    37de:	26 95       	lsr	r18
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <__vector_29+0x164>
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	2a 95       	dec	r18
    37ec:	e2 f7       	brpl	.-8      	; 0x37e6 <__vector_29+0x160>
    37ee:	82 b9       	out	0x02, r24	; 2
    37f0:	80 91 96 03 	lds	r24, 0x0396
    37f4:	91 cf       	rjmp	.-222    	; 0x3718 <__vector_29+0x92>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    37f6:	90 91 7b 00 	lds	r25, 0x007B
    37fa:	98 60       	ori	r25, 0x08	; 8
    37fc:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3800:	90 91 2f 03 	lds	r25, 0x032F
    3804:	98 5c       	subi	r25, 0xC8	; 200
    3806:	90 93 7c 00 	sts	0x007C, r25
    380a:	95 cf       	rjmp	.-214    	; 0x3736 <__vector_29+0xb0>
			break;										// when the desired speed was zero. Now the speed is always sampled independently of the 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    380c:	81 30       	cpi	r24, 0x01	; 1
    380e:	09 f0       	breq	.+2      	; 0x3812 <__vector_29+0x18c>
    3810:	83 cf       	rjmp	.-250    	; 0x3718 <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3812:	80 91 31 03 	lds	r24, 0x0331
    3816:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    381a:	80 91 34 03 	lds	r24, 0x0334
    381e:	80 93 98 03 	sts	0x0398, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3822:	10 92 95 03 	sts	0x0395, r1
			adcSamplingState = 2;
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	80 93 96 03 	sts	0x0396, r24
			break;
    382c:	75 cf       	rjmp	.-278    	; 0x3718 <__vector_29+0x92>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    382e:	81 30       	cpi	r24, 0x01	; 1
    3830:	09 f0       	breq	.+2      	; 0x3834 <__vector_29+0x1ae>
    3832:	57 cf       	rjmp	.-338    	; 0x36e2 <__vector_29+0x5c>
				updateProx = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3834:	80 91 d2 03 	lds	r24, 0x03D2
    3838:	90 91 d3 03 	lds	r25, 0x03D3
    383c:	82 0f       	add	r24, r18
    383e:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3840:	96 95       	lsr	r25
    3842:	87 95       	ror	r24
    3844:	90 93 d3 03 	sts	0x03D3, r25
    3848:	80 93 d2 03 	sts	0x03D2, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently of the 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    384c:	80 91 96 03 	lds	r24, 0x0396
    3850:	82 30       	cpi	r24, 0x02	; 2
    3852:	09 f0       	breq	.+2      	; 0x3856 <__vector_29+0x1d0>
    3854:	4b cf       	rjmp	.-362    	; 0x36ec <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3856:	80 91 32 03 	lds	r24, 0x0332
    385a:	80 93 2f 03 	sts	0x032F, r24
			rightChannelPhase = rightMotorPhase;
    385e:	80 91 33 03 	lds	r24, 0x0333
    3862:	80 93 97 03 	sts	0x0397, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3866:	80 91 98 03 	lds	r24, 0x0398
    386a:	88 23       	and	r24, r24
    386c:	09 f0       	breq	.+2      	; 0x3870 <__vector_29+0x1ea>
    386e:	97 c0       	rjmp	.+302    	; 0x399e <__vector_29+0x318>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3870:	83 e0       	ldi	r24, 0x03	; 3
    3872:	80 93 95 03 	sts	0x0395, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3876:	83 e0       	ldi	r24, 0x03	; 3
    3878:	80 93 96 03 	sts	0x0396, r24
			break;
    387c:	4d cf       	rjmp	.-358    	; 0x3718 <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    387e:	80 91 12 02 	lds	r24, 0x0212
    3882:	88 23       	and	r24, r24
    3884:	09 f4       	brne	.+2      	; 0x3888 <__vector_29+0x202>
    3886:	2d cf       	rjmp	.-422    	; 0x36e2 <__vector_29+0x5c>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3888:	90 91 00 01 	lds	r25, 0x0100
    388c:	93 fd       	sbrc	r25, 3
    388e:	29 cf       	rjmp	.-430    	; 0x36e2 <__vector_29+0x5c>
    3890:	90 91 00 01 	lds	r25, 0x0100
    3894:	94 fd       	sbrc	r25, 4
    3896:	25 cf       	rjmp	.-438    	; 0x36e2 <__vector_29+0x5c>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3898:	48 2f       	mov	r20, r24
    389a:	4f 5f       	subi	r20, 0xFF	; 255
    389c:	40 93 12 02 	sts	0x0212, r20
				if(firstSampleLeft > 4) {
    38a0:	45 30       	cpi	r20, 0x05	; 5
    38a2:	08 f4       	brcc	.+2      	; 0x38a6 <__vector_29+0x220>
    38a4:	1e cf       	rjmp	.-452    	; 0x36e2 <__vector_29+0x5c>
					left_vel_sum += value;
    38a6:	80 91 dc 03 	lds	r24, 0x03DC
    38aa:	90 91 dd 03 	lds	r25, 0x03DD
    38ae:	82 0f       	add	r24, r18
    38b0:	93 1f       	adc	r25, r19
    38b2:	90 93 dd 03 	sts	0x03DD, r25
    38b6:	80 93 dc 03 	sts	0x03DC, r24
					if(firstSampleLeft==8) {
    38ba:	48 30       	cpi	r20, 0x08	; 8
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <__vector_29+0x23a>
    38be:	11 cf       	rjmp	.-478    	; 0x36e2 <__vector_29+0x5c>
						firstSampleLeft = 0;
    38c0:	10 92 12 02 	sts	0x0212, r1
						compute_left_vel = 1;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	80 93 0f 02 	sts	0x020F, r24
    38ca:	0b cf       	rjmp	.-490    	; 0x36e2 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    38cc:	80 91 31 03 	lds	r24, 0x0331
    38d0:	80 93 2f 03 	sts	0x032F, r24
			leftChannelPhase = leftMotorPhase;
    38d4:	80 91 34 03 	lds	r24, 0x0334
    38d8:	80 93 98 03 	sts	0x0398, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    38dc:	80 91 97 03 	lds	r24, 0x0397
    38e0:	88 23       	and	r24, r24
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <__vector_29+0x260>
    38e4:	4a c0       	rjmp	.+148    	; 0x397a <__vector_29+0x2f4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	80 93 95 03 	sts	0x0395, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    38ec:	84 e0       	ldi	r24, 0x04	; 4
    38ee:	80 93 96 03 	sts	0x0396, r24
			break;
    38f2:	12 cf       	rjmp	.-476    	; 0x3718 <__vector_29+0x92>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    38f4:	80 91 d0 03 	lds	r24, 0x03D0
    38f8:	90 91 d1 03 	lds	r25, 0x03D1
    38fc:	82 0f       	add	r24, r18
    38fe:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3900:	96 95       	lsr	r25
    3902:	87 95       	ror	r24
    3904:	90 93 d1 03 	sts	0x03D1, r25
    3908:	80 93 d0 03 	sts	0x03D0, r24
			break;
    390c:	ea ce       	rjmp	.-556    	; 0x36e2 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    390e:	80 91 11 02 	lds	r24, 0x0211
    3912:	88 23       	and	r24, r24
    3914:	09 f4       	brne	.+2      	; 0x3918 <__vector_29+0x292>
    3916:	e5 ce       	rjmp	.-566    	; 0x36e2 <__vector_29+0x5c>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3918:	63 99       	sbic	0x0c, 3	; 12
    391a:	e3 ce       	rjmp	.-570    	; 0x36e2 <__vector_29+0x5c>
    391c:	64 99       	sbic	0x0c, 4	; 12
    391e:	e1 ce       	rjmp	.-574    	; 0x36e2 <__vector_29+0x5c>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3920:	48 2f       	mov	r20, r24
    3922:	4f 5f       	subi	r20, 0xFF	; 255
    3924:	40 93 11 02 	sts	0x0211, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3928:	45 30       	cpi	r20, 0x05	; 5
    392a:	08 f4       	brcc	.+2      	; 0x392e <__vector_29+0x2a8>
    392c:	da ce       	rjmp	.-588    	; 0x36e2 <__vector_29+0x5c>
					right_vel_sum += value;
    392e:	80 91 de 03 	lds	r24, 0x03DE
    3932:	90 91 df 03 	lds	r25, 0x03DF
    3936:	82 0f       	add	r24, r18
    3938:	93 1f       	adc	r25, r19
    393a:	90 93 df 03 	sts	0x03DF, r25
    393e:	80 93 de 03 	sts	0x03DE, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    3942:	48 30       	cpi	r20, 0x08	; 8
    3944:	09 f0       	breq	.+2      	; 0x3948 <__vector_29+0x2c2>
    3946:	cd ce       	rjmp	.-614    	; 0x36e2 <__vector_29+0x5c>
						firstSampleRight = 0;
    3948:	10 92 11 02 	sts	0x0211, r1
						compute_right_vel = 1;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	80 93 10 02 	sts	0x0210, r24
    3952:	c7 ce       	rjmp	.-626    	; 0x36e2 <__vector_29+0x5c>
					#ifdef HW_REV_3_0_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					#endif

					#ifdef HW_REV_3_1
					PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3954:	40 91 05 01 	lds	r20, 0x0105
    3958:	40 97       	sbiw	r24, 0x10	; 16
    395a:	95 95       	asr	r25
    395c:	87 95       	ror	r24
    395e:	21 e0       	ldi	r18, 0x01	; 1
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	02 c0       	rjmp	.+4      	; 0x3968 <__vector_29+0x2e2>
    3964:	22 0f       	add	r18, r18
    3966:	33 1f       	adc	r19, r19
    3968:	8a 95       	dec	r24
    396a:	e2 f7       	brpl	.-8      	; 0x3964 <__vector_29+0x2de>
    396c:	20 95       	com	r18
    396e:	24 23       	and	r18, r20
    3970:	20 93 05 01 	sts	0x0105, r18
    3974:	80 91 96 03 	lds	r24, 0x0396
    3978:	cf ce       	rjmp	.-610    	; 0x3718 <__vector_29+0x92>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    397a:	81 30       	cpi	r24, 0x01	; 1
    397c:	69 f1       	breq	.+90     	; 0x39d8 <__vector_29+0x352>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    397e:	85 e0       	ldi	r24, 0x05	; 5
    3980:	80 93 95 03 	sts	0x0395, r24
    3984:	b3 cf       	rjmp	.-154    	; 0x38ec <__vector_29+0x266>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3986:	91 30       	cpi	r25, 0x01	; 1
    3988:	09 f0       	breq	.+2      	; 0x398c <__vector_29+0x306>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    398a:	85 e0       	ldi	r24, 0x05	; 5
    398c:	80 93 95 03 	sts	0x0395, r24
    3990:	18 cf       	rjmp	.-464    	; 0x37c2 <__vector_29+0x13c>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	e9 f0       	breq	.+58     	; 0x39d0 <__vector_29+0x34a>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3996:	85 e0       	ldi	r24, 0x05	; 5
    3998:	80 93 95 03 	sts	0x0395, r24
    399c:	ba ce       	rjmp	.-652    	; 0x3712 <__vector_29+0x8c>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    399e:	81 30       	cpi	r24, 0x01	; 1
    39a0:	f9 f0       	breq	.+62     	; 0x39e0 <__vector_29+0x35a>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    39a2:	85 e0       	ldi	r24, 0x05	; 5
    39a4:	80 93 95 03 	sts	0x0395, r24
    39a8:	66 cf       	rjmp	.-308    	; 0x3876 <__vector_29+0x1f0>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    39aa:	80 91 9b 03 	lds	r24, 0x039B
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	d9 f0       	breq	.+54     	; 0x39e8 <__vector_29+0x362>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	b1 ce       	rjmp	.-670    	; 0x3718 <__vector_29+0x92>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    39b6:	90 91 9b 03 	lds	r25, 0x039B
    39ba:	92 30       	cpi	r25, 0x02	; 2
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <__vector_29+0x33a>
    39be:	d7 ce       	rjmp	.-594    	; 0x376e <__vector_29+0xe8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    39c0:	30 93 9a 03 	sts	0x039A, r19
    39c4:	20 93 99 03 	sts	0x0399, r18
				measBattery = 0;
    39c8:	10 92 9b 03 	sts	0x039B, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    39cc:	46 98       	cbi	0x08, 6	; 8
    39ce:	d7 ce       	rjmp	.-594    	; 0x377e <__vector_29+0xf8>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    39d0:	82 e0       	ldi	r24, 0x02	; 2
    39d2:	80 93 95 03 	sts	0x0395, r24
    39d6:	9d ce       	rjmp	.-710    	; 0x3712 <__vector_29+0x8c>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	80 93 95 03 	sts	0x0395, r24
    39de:	86 cf       	rjmp	.-244    	; 0x38ec <__vector_29+0x266>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    39e0:	84 e0       	ldi	r24, 0x04	; 4
    39e2:	80 93 95 03 	sts	0x0395, r24
    39e6:	47 cf       	rjmp	.-370    	; 0x3876 <__vector_29+0x1f0>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	80 93 9b 03 	sts	0x039B, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    39ee:	46 9a       	sbi	0x08, 6	; 8
    39f0:	ef ce       	rjmp	.-546    	; 0x37d0 <__vector_29+0x14a>

000039f2 <initMotors>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    39f2:	e0 e9       	ldi	r30, 0x90	; 144
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	83 68       	ori	r24, 0x83	; 131
    39fa:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    39fc:	80 81       	ld	r24, Z
    39fe:	83 60       	ori	r24, 0x03	; 3
    3a00:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3a02:	a1 e9       	ldi	r26, 0x91	; 145
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	8c 91       	ld	r24, X
    3a08:	8b 60       	ori	r24, 0x0B	; 11
    3a0a:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3a0c:	80 91 e4 03 	lds	r24, 0x03E4
    3a10:	90 91 e5 03 	lds	r25, 0x03E5
    3a14:	90 93 99 00 	sts	0x0099, r25
    3a18:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    3a1c:	10 92 9b 00 	sts	0x009B, r1
    3a20:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3a24:	a1 e7       	ldi	r26, 0x71	; 113
    3a26:	b0 e0       	ldi	r27, 0x00	; 0
    3a28:	8c 91       	ld	r24, X
    3a2a:	81 60       	ori	r24, 0x01	; 1
    3a2c:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3a2e:	80 81       	ld	r24, Z
    3a30:	8f 75       	andi	r24, 0x5F	; 95
    3a32:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3a34:	8e b1       	in	r24, 0x0e	; 14
    3a36:	87 7e       	andi	r24, 0xE7	; 231
    3a38:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3a3a:	e0 ea       	ldi	r30, 0xA0	; 160
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
    3a40:	83 68       	ori	r24, 0x83	; 131
    3a42:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3a44:	a1 ea       	ldi	r26, 0xA1	; 161
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	8c 91       	ld	r24, X
    3a4a:	8b 60       	ori	r24, 0x0B	; 11
    3a4c:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3a4e:	80 91 e6 03 	lds	r24, 0x03E6
    3a52:	90 91 e7 03 	lds	r25, 0x03E7
    3a56:	90 93 a9 00 	sts	0x00A9, r25
    3a5a:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3a5e:	10 92 ab 00 	sts	0x00AB, r1
    3a62:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3a66:	a2 e7       	ldi	r26, 0x72	; 114
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	8c 91       	ld	r24, X
    3a6c:	81 60       	ori	r24, 0x01	; 1
    3a6e:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3a70:	80 81       	ld	r24, Z
    3a72:	8f 75       	andi	r24, 0x5F	; 95
    3a74:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3a76:	e2 e0       	ldi	r30, 0x02	; 2
    3a78:	f1 e0       	ldi	r31, 0x01	; 1
    3a7a:	80 81       	ld	r24, Z
    3a7c:	87 7e       	andi	r24, 0xE7	; 231
    3a7e:	80 83       	st	Z, r24


}
    3a80:	08 95       	ret

00003a82 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
    3a82:	1f 92       	push	r1
    3a84:	0f 92       	push	r0
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	0f 92       	push	r0
    3a8a:	11 24       	eor	r1, r1
    3a8c:	8f 93       	push	r24
    3a8e:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

	left_current_avg = 0;
    3a90:	10 92 d1 03 	sts	0x03D1, r1
    3a94:	10 92 d0 03 	sts	0x03D0, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3a98:	80 91 e6 03 	lds	r24, 0x03E6
    3a9c:	90 91 e7 03 	lds	r25, 0x03E7
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	41 f5       	brne	.+80     	; 0x3af4 <__vector_45+0x72>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3aa4:	80 91 da 03 	lds	r24, 0x03DA
    3aa8:	90 91 db 03 	lds	r25, 0x03DB
    3aac:	97 fd       	sbrc	r25, 7
    3aae:	69 c0       	rjmp	.+210    	; 0x3b82 <__vector_45+0x100>
			leftMotorPhase = PASSIVE_PHASE;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 14;
    3ab6:	8e e0       	ldi	r24, 0x0E	; 14
    3ab8:	80 93 31 03 	sts	0x0331, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	80 93 12 02 	sts	0x0212, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3ac2:	80 91 a0 00 	lds	r24, 0x00A0
    3ac6:	8f 75       	andi	r24, 0x5F	; 95
    3ac8:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3acc:	80 91 02 01 	lds	r24, 0x0102
    3ad0:	87 7e       	andi	r24, 0xE7	; 231
    3ad2:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3ad6:	80 91 72 00 	lds	r24, 0x0072
    3ada:	89 7f       	andi	r24, 0xF9	; 249
    3adc:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3ae0:	89 b3       	in	r24, 0x19	; 25
    3ae2:	86 60       	ori	r24, 0x06	; 6
    3ae4:	89 bb       	out	0x19, r24	; 25
	}
*/

//	PORTB |= (1 << 6);

}
    3ae6:	9f 91       	pop	r25
    3ae8:	8f 91       	pop	r24
    3aea:	0f 90       	pop	r0
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	0f 90       	pop	r0
    3af0:	1f 90       	pop	r1
    3af2:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3af4:	18 16       	cp	r1, r24
    3af6:	19 06       	cpc	r1, r25
    3af8:	2c f5       	brge	.+74     	; 0x3b44 <__vector_45+0xc2>
		leftMotorPhase = ACTIVE_PHASE;
    3afa:	10 92 34 03 	sts	0x0334, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    3afe:	8f e0       	ldi	r24, 0x0F	; 15
    3b00:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3b04:	80 91 a0 00 	lds	r24, 0x00A0
    3b08:	8f 7d       	andi	r24, 0xDF	; 223
    3b0a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3b0e:	80 91 72 00 	lds	r24, 0x0072
    3b12:	8b 7f       	andi	r24, 0xFB	; 251
    3b14:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3b18:	80 91 02 01 	lds	r24, 0x0102
    3b1c:	8f 7e       	andi	r24, 0xEF	; 239
    3b1e:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3b22:	80 91 a0 00 	lds	r24, 0x00A0
    3b26:	80 68       	ori	r24, 0x80	; 128
    3b28:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3b2c:	80 91 72 00 	lds	r24, 0x0072
    3b30:	82 60       	ori	r24, 0x02	; 2
    3b32:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	PORTB |= (1 << 6);

}
    3b36:	9f 91       	pop	r25
    3b38:	8f 91       	pop	r24
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	0f 90       	pop	r0
    3b40:	1f 90       	pop	r1
    3b42:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3b44:	10 92 34 03 	sts	0x0334, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3b48:	8e e0       	ldi	r24, 0x0E	; 14
    3b4a:	80 93 31 03 	sts	0x0331, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3b4e:	80 91 a0 00 	lds	r24, 0x00A0
    3b52:	8f 77       	andi	r24, 0x7F	; 127
    3b54:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3b58:	80 91 72 00 	lds	r24, 0x0072
    3b5c:	8d 7f       	andi	r24, 0xFD	; 253
    3b5e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3b62:	80 91 02 01 	lds	r24, 0x0102
    3b66:	87 7f       	andi	r24, 0xF7	; 247
    3b68:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3b6c:	80 91 a0 00 	lds	r24, 0x00A0
    3b70:	80 62       	ori	r24, 0x20	; 32
    3b72:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3b76:	80 91 72 00 	lds	r24, 0x0072
    3b7a:	84 60       	ori	r24, 0x04	; 4
    3b7c:	80 93 72 00 	sts	0x0072, r24
    3b80:	b2 cf       	rjmp	.-156    	; 0x3ae6 <__vector_45+0x64>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	80 93 34 03 	sts	0x0334, r24
			currentMotLeftChannel = 15;
    3b88:	8f e0       	ldi	r24, 0x0F	; 15
    3b8a:	80 93 31 03 	sts	0x0331, r24
    3b8e:	96 cf       	rjmp	.-212    	; 0x3abc <__vector_45+0x3a>

00003b90 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3b90:	1f 92       	push	r1
    3b92:	0f 92       	push	r0
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	0f 92       	push	r0
    3b98:	11 24       	eor	r1, r1
    3b9a:	8f 93       	push	r24
    3b9c:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	80 93 34 03 	sts	0x0334, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3ba4:	9e e0       	ldi	r25, 0x0E	; 14
    3ba6:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    3baa:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3bae:	9f 91       	pop	r25
    3bb0:	8f 91       	pop	r24
    3bb2:	0f 90       	pop	r0
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	0f 90       	pop	r0
    3bb8:	1f 90       	pop	r1
    3bba:	18 95       	reti

00003bbc <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3bbc:	1f 92       	push	r1
    3bbe:	0f 92       	push	r0
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	0f 92       	push	r0
    3bc4:	11 24       	eor	r1, r1
    3bc6:	8f 93       	push	r24
    3bc8:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	80 93 34 03 	sts	0x0334, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3bd0:	9f e0       	ldi	r25, 0x0F	; 15
    3bd2:	90 93 31 03 	sts	0x0331, r25

	firstSampleLeft = 1;
    3bd6:	80 93 12 02 	sts	0x0212, r24

//	PORTB |= (1 << 6);

}
    3bda:	9f 91       	pop	r25
    3bdc:	8f 91       	pop	r24
    3bde:	0f 90       	pop	r0
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	0f 90       	pop	r0
    3be4:	1f 90       	pop	r1
    3be6:	18 95       	reti

00003be8 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3be8:	1f 92       	push	r1
    3bea:	0f 92       	push	r0
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	0f 92       	push	r0
    3bf0:	11 24       	eor	r1, r1
    3bf2:	8f 93       	push	r24
    3bf4:	9f 93       	push	r25

//	PORTB &= ~(1 << 6);

  	// PORTB ^= (1 << 7); // Toggle the LED

	right_current_avg = 0;
    3bf6:	10 92 d3 03 	sts	0x03D3, r1
    3bfa:	10 92 d2 03 	sts	0x03D2, r1


	if(pwm_right == 0) {
    3bfe:	80 91 e4 03 	lds	r24, 0x03E4
    3c02:	90 91 e5 03 	lds	r25, 0x03E5
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	31 f5       	brne	.+76     	; 0x3c56 <__vector_35+0x6e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3c0a:	80 91 d8 03 	lds	r24, 0x03D8
    3c0e:	90 91 d9 03 	lds	r25, 0x03D9
    3c12:	97 fd       	sbrc	r25, 7
    3c14:	5f c0       	rjmp	.+190    	; 0x3cd4 <__vector_35+0xec>
			rightMotorPhase = PASSIVE_PHASE;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	80 93 33 03 	sts	0x0333, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3c1c:	8c e0       	ldi	r24, 0x0C	; 12
    3c1e:	80 93 32 03 	sts	0x0332, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	80 93 11 02 	sts	0x0211, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3c28:	80 91 90 00 	lds	r24, 0x0090
    3c2c:	8f 75       	andi	r24, 0x5F	; 95
    3c2e:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3c32:	8e b1       	in	r24, 0x0e	; 14
    3c34:	87 7e       	andi	r24, 0xE7	; 231
    3c36:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3c38:	80 91 71 00 	lds	r24, 0x0071
    3c3c:	89 7f       	andi	r24, 0xF9	; 249
    3c3e:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3c42:	88 b3       	in	r24, 0x18	; 24
    3c44:	86 60       	ori	r24, 0x06	; 6
    3c46:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3c48:	9f 91       	pop	r25
    3c4a:	8f 91       	pop	r24
    3c4c:	0f 90       	pop	r0
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	0f 90       	pop	r0
    3c52:	1f 90       	pop	r1
    3c54:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3c56:	18 16       	cp	r1, r24
    3c58:	19 06       	cpc	r1, r25
    3c5a:	0c f5       	brge	.+66     	; 0x3c9e <__vector_35+0xb6>
		rightMotorPhase = ACTIVE_PHASE;
    3c5c:	10 92 33 03 	sts	0x0333, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3c60:	8d e0       	ldi	r24, 0x0D	; 13
    3c62:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3c66:	80 91 90 00 	lds	r24, 0x0090
    3c6a:	8f 7d       	andi	r24, 0xDF	; 223
    3c6c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3c70:	80 91 71 00 	lds	r24, 0x0071
    3c74:	8b 7f       	andi	r24, 0xFB	; 251
    3c76:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3c7a:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3c7c:	80 91 90 00 	lds	r24, 0x0090
    3c80:	80 68       	ori	r24, 0x80	; 128
    3c82:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3c86:	80 91 71 00 	lds	r24, 0x0071
    3c8a:	82 60       	ori	r24, 0x02	; 2
    3c8c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	PORTB |= (1 << 6);

}
    3c90:	9f 91       	pop	r25
    3c92:	8f 91       	pop	r24
    3c94:	0f 90       	pop	r0
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	0f 90       	pop	r0
    3c9a:	1f 90       	pop	r1
    3c9c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3c9e:	10 92 33 03 	sts	0x0333, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3ca2:	8c e0       	ldi	r24, 0x0C	; 12
    3ca4:	80 93 32 03 	sts	0x0332, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3ca8:	80 91 90 00 	lds	r24, 0x0090
    3cac:	8f 77       	andi	r24, 0x7F	; 127
    3cae:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3cb2:	80 91 71 00 	lds	r24, 0x0071
    3cb6:	8d 7f       	andi	r24, 0xFD	; 253
    3cb8:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3cbc:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3cbe:	80 91 90 00 	lds	r24, 0x0090
    3cc2:	80 62       	ori	r24, 0x20	; 32
    3cc4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3cc8:	80 91 71 00 	lds	r24, 0x0071
    3ccc:	84 60       	ori	r24, 0x04	; 4
    3cce:	80 93 71 00 	sts	0x0071, r24
    3cd2:	ba cf       	rjmp	.-140    	; 0x3c48 <__vector_35+0x60>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	80 93 33 03 	sts	0x0333, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3cda:	8d e0       	ldi	r24, 0x0D	; 13
    3cdc:	80 93 32 03 	sts	0x0332, r24
    3ce0:	a0 cf       	rjmp	.-192    	; 0x3c22 <__vector_35+0x3a>

00003ce2 <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3ce2:	1f 92       	push	r1
    3ce4:	0f 92       	push	r0
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	0f 92       	push	r0
    3cea:	11 24       	eor	r1, r1
    3cec:	8f 93       	push	r24
    3cee:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	80 93 33 03 	sts	0x0333, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3cf6:	9c e0       	ldi	r25, 0x0C	; 12
    3cf8:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3cfc:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);

}
    3d00:	9f 91       	pop	r25
    3d02:	8f 91       	pop	r24
    3d04:	0f 90       	pop	r0
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	0f 90       	pop	r0
    3d0a:	1f 90       	pop	r1
    3d0c:	18 95       	reti

00003d0e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3d0e:	1f 92       	push	r1
    3d10:	0f 92       	push	r0
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	0f 92       	push	r0
    3d16:	11 24       	eor	r1, r1
    3d18:	8f 93       	push	r24
    3d1a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	80 93 33 03 	sts	0x0333, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3d22:	9d e0       	ldi	r25, 0x0D	; 13
    3d24:	90 93 32 03 	sts	0x0332, r25

	firstSampleRight = 1;
    3d28:	80 93 11 02 	sts	0x0211, r24

//	PORTB |= (1 << 5);
}
    3d2c:	9f 91       	pop	r25
    3d2e:	8f 91       	pop	r24
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	0f 90       	pop	r0
    3d36:	1f 90       	pop	r1
    3d38:	18 95       	reti

00003d3a <obstacleAvoidance>:
	if (pwm_left_working>(MAX_MOTORS_PWM/2)) pwm_left_working=(MAX_MOTORS_PWM/2);
	if (pwm_right_working<-(MAX_MOTORS_PWM/2)) pwm_right_working=-(MAX_MOTORS_PWM/2);
	if (pwm_left_working<-(MAX_MOTORS_PWM/2)) pwm_left_working=-(MAX_MOTORS_PWM/2);
*/

}
    3d3a:	08 95       	ret

00003d3c <cliffAvoidance>:

	// the robot only stop when a cliff is detected

	signed int g0=0, g1=0, g2=0, g3=0;

	g0 = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    3d3c:	80 91 55 03 	lds	r24, 0x0355
    3d40:	90 91 56 03 	lds	r25, 0x0356
    3d44:	20 91 57 03 	lds	r18, 0x0357
    3d48:	30 91 58 03 	lds	r19, 0x0358
    3d4c:	82 1b       	sub	r24, r18
    3d4e:	93 0b       	sbc	r25, r19
	if(g0 < 0) {
		g0 = 0;
	}

	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    3d50:	60 91 59 03 	lds	r22, 0x0359
    3d54:	70 91 5a 03 	lds	r23, 0x035A
    3d58:	20 91 5b 03 	lds	r18, 0x035B
    3d5c:	30 91 5c 03 	lds	r19, 0x035C
    3d60:	62 1b       	sub	r22, r18
    3d62:	73 0b       	sbc	r23, r19
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    3d64:	40 91 5d 03 	lds	r20, 0x035D
    3d68:	50 91 5e 03 	lds	r21, 0x035E
    3d6c:	20 91 5f 03 	lds	r18, 0x035F
    3d70:	30 91 60 03 	lds	r19, 0x0360
    3d74:	42 1b       	sub	r20, r18
    3d76:	53 0b       	sbc	r21, r19
    3d78:	57 fd       	sbrc	r21, 7
    3d7a:	4e c0       	rjmp	.+156    	; 0x3e18 <cliffAvoidance+0xdc>
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    3d7c:	20 91 61 03 	lds	r18, 0x0361
    3d80:	30 91 62 03 	lds	r19, 0x0362
    3d84:	e0 91 63 03 	lds	r30, 0x0363
    3d88:	f0 91 64 03 	lds	r31, 0x0364
    3d8c:	2e 1b       	sub	r18, r30
    3d8e:	3f 0b       	sbc	r19, r31
    3d90:	37 fd       	sbrc	r19, 7
    3d92:	4b c0       	rjmp	.+150    	; 0x3e2a <cliffAvoidance+0xee>
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    3d94:	97 fd       	sbrc	r25, 7
    3d96:	46 c0       	rjmp	.+140    	; 0x3e24 <cliffAvoidance+0xe8>
    3d98:	90 93 37 04 	sts	0x0437, r25
    3d9c:	80 93 36 04 	sts	0x0436, r24
	minGround = GROUND_LEFT;
    3da0:	e3 e0       	ldi	r30, 0x03	; 3
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	f0 93 20 02 	sts	0x0220, r31
    3da8:	e0 93 1f 02 	sts	0x021F, r30
	if(g1 < minGroundValue) {
    3dac:	77 fd       	sbrc	r23, 7
    3dae:	37 c0       	rjmp	.+110    	; 0x3e1e <cliffAvoidance+0xe2>
    3db0:	68 17       	cp	r22, r24
    3db2:	79 07       	cpc	r23, r25
    3db4:	58 f4       	brcc	.+22     	; 0x3dcc <cliffAvoidance+0x90>
		minGroundValue = g1;
    3db6:	70 93 37 04 	sts	0x0437, r23
    3dba:	60 93 36 04 	sts	0x0436, r22
		minGround = GROUND_CENTER_LEFT;
    3dbe:	82 e0       	ldi	r24, 0x02	; 2
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	90 93 20 02 	sts	0x0220, r25
    3dc6:	80 93 1f 02 	sts	0x021F, r24
    3dca:	cb 01       	movw	r24, r22
	}
	if(g2 < minGroundValue) {
    3dcc:	48 17       	cp	r20, r24
    3dce:	59 07       	cpc	r21, r25
    3dd0:	58 f4       	brcc	.+22     	; 0x3de8 <cliffAvoidance+0xac>
		minGroundValue = g2;
    3dd2:	50 93 37 04 	sts	0x0437, r21
    3dd6:	40 93 36 04 	sts	0x0436, r20
		minGround = GROUND_CENTER_RIGHT;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	90 93 20 02 	sts	0x0220, r25
    3de2:	80 93 1f 02 	sts	0x021F, r24
    3de6:	ca 01       	movw	r24, r20
	}
	if(g3 < minGroundValue) {
    3de8:	28 17       	cp	r18, r24
    3dea:	39 07       	cpc	r19, r25
    3dec:	48 f4       	brcc	.+18     	; 0x3e00 <cliffAvoidance+0xc4>
		minGroundValue = g3;
    3dee:	30 93 37 04 	sts	0x0437, r19
    3df2:	20 93 36 04 	sts	0x0436, r18
		minGround = GROUND_RIGHT;
    3df6:	10 92 20 02 	sts	0x0220, r1
    3dfa:	10 92 1f 02 	sts	0x021F, r1
    3dfe:	c9 01       	movw	r24, r18
	}

	if(minGroundValue <= CLIFF_THR) {
    3e00:	84 37       	cpi	r24, 0x74	; 116
    3e02:	91 05       	cpc	r25, r1
    3e04:	40 f4       	brcc	.+16     	; 0x3e16 <cliffAvoidance+0xda>
		pwm_right_working = 0;
    3e06:	10 92 ff 03 	sts	0x03FF, r1
    3e0a:	10 92 fe 03 	sts	0x03FE, r1
		pwm_left_working = 0;
    3e0e:	10 92 01 04 	sts	0x0401, r1
    3e12:	10 92 00 04 	sts	0x0400, r1
    3e16:	08 95       	ret
	g1 = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
	if(g1 < 0) {
		g1 = 0;
	}

	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	af cf       	rjmp	.-162    	; 0x3d7c <cliffAvoidance+0x40>
		g3 = 0;
	}

	minGroundValue = g0;
	minGround = GROUND_LEFT;
	if(g1 < minGroundValue) {
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	70 e0       	ldi	r23, 0x00	; 0
    3e22:	c6 cf       	rjmp	.-116    	; 0x3db0 <cliffAvoidance+0x74>
	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
	if(g3 < 0) {
		g3 = 0;
	}

	minGroundValue = g0;
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	b7 cf       	rjmp	.-146    	; 0x3d98 <cliffAvoidance+0x5c>
	g2 = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
	if(g2 < 0) {
		g2 = 0;
	}

	g3 = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	b2 cf       	rjmp	.-156    	; 0x3d94 <cliffAvoidance+0x58>

00003e30 <initRGBleds>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
    3e30:	e0 e8       	ldi	r30, 0x80	; 128
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	89 6a       	ori	r24, 0xA9	; 169
    3e38:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
    3e3a:	e1 e8       	ldi	r30, 0x81	; 129
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	89 60       	ori	r24, 0x09	; 9
    3e42:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3e44:	80 91 14 02 	lds	r24, 0x0214
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	90 93 89 00 	sts	0x0089, r25
    3e4e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3e52:	80 91 15 02 	lds	r24, 0x0215
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	90 93 8b 00 	sts	0x008B, r25
    3e5c:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3e60:	80 91 16 02 	lds	r24, 0x0216
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	90 93 8d 00 	sts	0x008D, r25
    3e6a:	80 93 8c 00 	sts	0x008C, r24
	//TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1B1) & ~(1 << COM1C1);	// disable OCA, OCB, OCC to turn them off
	//TIMSK1 |= (1 << OCIE1A); 	// Enable output compare match interrupt
	//TIMSK1 |= (1 << TOIE1);	// Enable timer overflow interrupt


}
    3e6e:	08 95       	ret

00003e70 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 91 07 04 	lds	r25, 0x0407
    3e76:	89 1b       	sub	r24, r25
    3e78:	80 93 07 04 	sts	0x0407, r24

	if(blinkState) {
    3e7c:	88 23       	and	r24, r24
    3e7e:	39 f4       	brne	.+14     	; 0x3e8e <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
    3e80:	80 91 80 00 	lds	r24, 0x0080
    3e84:	87 7f       	andi	r24, 0xF7	; 247
    3e86:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3e8a:	2f 98       	cbi	0x05, 7	; 5
    3e8c:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
    3e8e:	80 91 80 00 	lds	r24, 0x0080
    3e92:	88 60       	ori	r24, 0x08	; 8
    3e94:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3e98:	8f ef       	ldi	r24, 0xFF	; 255
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	90 93 8d 00 	sts	0x008D, r25
    3ea0:	80 93 8c 00 	sts	0x008C, r24
    3ea4:	08 95       	ret

00003ea6 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3ea6:	88 23       	and	r24, r24
    3ea8:	59 f0       	breq	.+22     	; 0x3ec0 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    3eaa:	90 91 80 00 	lds	r25, 0x0080
    3eae:	90 68       	ori	r25, 0x80	; 128
    3eb0:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	90 93 89 00 	sts	0x0089, r25
    3eba:	80 93 88 00 	sts	0x0088, r24
    3ebe:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    3ec0:	80 91 80 00 	lds	r24, 0x0080
    3ec4:	8f 77       	andi	r24, 0x7F	; 127
    3ec6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    3eca:	2d 98       	cbi	0x05, 5	; 5
    3ecc:	08 95       	ret

00003ece <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3ece:	88 23       	and	r24, r24
    3ed0:	59 f0       	breq	.+22     	; 0x3ee8 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    3ed2:	90 91 80 00 	lds	r25, 0x0080
    3ed6:	90 62       	ori	r25, 0x20	; 32
    3ed8:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	90 93 8b 00 	sts	0x008B, r25
    3ee2:	80 93 8a 00 	sts	0x008A, r24
    3ee6:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    3ee8:	80 91 80 00 	lds	r24, 0x0080
    3eec:	8f 7d       	andi	r24, 0xDF	; 223
    3eee:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    3ef2:	2e 98       	cbi	0x05, 6	; 5
    3ef4:	08 95       	ret

00003ef6 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3ef6:	88 23       	and	r24, r24
    3ef8:	59 f0       	breq	.+22     	; 0x3f10 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    3efa:	90 91 80 00 	lds	r25, 0x0080
    3efe:	98 60       	ori	r25, 0x08	; 8
    3f00:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	90 93 8d 00 	sts	0x008D, r25
    3f0a:	80 93 8c 00 	sts	0x008C, r24
    3f0e:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    3f10:	80 91 80 00 	lds	r24, 0x0080
    3f14:	87 7f       	andi	r24, 0xF7	; 247
    3f16:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    3f1a:	2f 98       	cbi	0x05, 7	; 5
    3f1c:	08 95       	ret

00003f1e <__mulsf3>:
    3f1e:	a0 e2       	ldi	r26, 0x20	; 32
    3f20:	b0 e0       	ldi	r27, 0x00	; 0
    3f22:	e5 e9       	ldi	r30, 0x95	; 149
    3f24:	ff e1       	ldi	r31, 0x1F	; 31
    3f26:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__+0x4>
    3f2a:	69 83       	std	Y+1, r22	; 0x01
    3f2c:	7a 83       	std	Y+2, r23	; 0x02
    3f2e:	8b 83       	std	Y+3, r24	; 0x03
    3f30:	9c 83       	std	Y+4, r25	; 0x04
    3f32:	2d 83       	std	Y+5, r18	; 0x05
    3f34:	3e 83       	std	Y+6, r19	; 0x06
    3f36:	4f 83       	std	Y+7, r20	; 0x07
    3f38:	58 87       	std	Y+8, r21	; 0x08
    3f3a:	99 e0       	ldi	r25, 0x09	; 9
    3f3c:	e9 2e       	mov	r14, r25
    3f3e:	f1 2c       	mov	r15, r1
    3f40:	ec 0e       	add	r14, r28
    3f42:	fd 1e       	adc	r15, r29
    3f44:	b7 01       	movw	r22, r14
    3f46:	ce 01       	movw	r24, r28
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__unpack_f>
    3f4e:	8e 01       	movw	r16, r28
    3f50:	0f 5e       	subi	r16, 0xEF	; 239
    3f52:	1f 4f       	sbci	r17, 0xFF	; 255
    3f54:	b8 01       	movw	r22, r16
    3f56:	ce 01       	movw	r24, r28
    3f58:	05 96       	adiw	r24, 0x05	; 5
    3f5a:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__unpack_f>
    3f5e:	99 85       	ldd	r25, Y+9	; 0x09
    3f60:	92 30       	cpi	r25, 0x02	; 2
    3f62:	88 f0       	brcs	.+34     	; 0x3f86 <__mulsf3+0x68>
    3f64:	89 89       	ldd	r24, Y+17	; 0x11
    3f66:	82 30       	cpi	r24, 0x02	; 2
    3f68:	c0 f0       	brcs	.+48     	; 0x3f9a <__mulsf3+0x7c>
    3f6a:	94 30       	cpi	r25, 0x04	; 4
    3f6c:	19 f4       	brne	.+6      	; 0x3f74 <__mulsf3+0x56>
    3f6e:	82 30       	cpi	r24, 0x02	; 2
    3f70:	29 f0       	breq	.+10     	; 0x3f7c <__mulsf3+0x5e>
    3f72:	09 c0       	rjmp	.+18     	; 0x3f86 <__mulsf3+0x68>
    3f74:	84 30       	cpi	r24, 0x04	; 4
    3f76:	29 f4       	brne	.+10     	; 0x3f82 <__mulsf3+0x64>
    3f78:	92 30       	cpi	r25, 0x02	; 2
    3f7a:	79 f4       	brne	.+30     	; 0x3f9a <__mulsf3+0x7c>
    3f7c:	61 e2       	ldi	r22, 0x21	; 33
    3f7e:	72 e0       	ldi	r23, 0x02	; 2
    3f80:	c6 c0       	rjmp	.+396    	; 0x410e <__mulsf3+0x1f0>
    3f82:	92 30       	cpi	r25, 0x02	; 2
    3f84:	41 f4       	brne	.+16     	; 0x3f96 <__mulsf3+0x78>
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f8c:	98 13       	cpse	r25, r24
    3f8e:	21 e0       	ldi	r18, 0x01	; 1
    3f90:	2a 87       	std	Y+10, r18	; 0x0a
    3f92:	b7 01       	movw	r22, r14
    3f94:	bc c0       	rjmp	.+376    	; 0x410e <__mulsf3+0x1f0>
    3f96:	82 30       	cpi	r24, 0x02	; 2
    3f98:	41 f4       	brne	.+16     	; 0x3faa <__mulsf3+0x8c>
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f9e:	8a 89       	ldd	r24, Y+18	; 0x12
    3fa0:	98 13       	cpse	r25, r24
    3fa2:	21 e0       	ldi	r18, 0x01	; 1
    3fa4:	2a 8b       	std	Y+18, r18	; 0x12
    3fa6:	b8 01       	movw	r22, r16
    3fa8:	b2 c0       	rjmp	.+356    	; 0x410e <__mulsf3+0x1f0>
    3faa:	cd 84       	ldd	r12, Y+13	; 0x0d
    3fac:	de 84       	ldd	r13, Y+14	; 0x0e
    3fae:	ef 84       	ldd	r14, Y+15	; 0x0f
    3fb0:	f8 88       	ldd	r15, Y+16	; 0x10
    3fb2:	0d 89       	ldd	r16, Y+21	; 0x15
    3fb4:	1e 89       	ldd	r17, Y+22	; 0x16
    3fb6:	2f 89       	ldd	r18, Y+23	; 0x17
    3fb8:	38 8d       	ldd	r19, Y+24	; 0x18
    3fba:	88 24       	eor	r8, r8
    3fbc:	99 24       	eor	r9, r9
    3fbe:	54 01       	movw	r10, r8
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	50 e0       	ldi	r21, 0x00	; 0
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	44 24       	eor	r4, r4
    3fca:	55 24       	eor	r5, r5
    3fcc:	32 01       	movw	r6, r4
    3fce:	e0 e0       	ldi	r30, 0x00	; 0
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	c6 01       	movw	r24, r12
    3fd4:	81 70       	andi	r24, 0x01	; 1
    3fd6:	90 70       	andi	r25, 0x00	; 0
    3fd8:	89 2b       	or	r24, r25
    3fda:	d9 f0       	breq	.+54     	; 0x4012 <__mulsf3+0xf4>
    3fdc:	80 0e       	add	r8, r16
    3fde:	91 1e       	adc	r9, r17
    3fe0:	a2 1e       	adc	r10, r18
    3fe2:	b3 1e       	adc	r11, r19
    3fe4:	db 01       	movw	r26, r22
    3fe6:	ca 01       	movw	r24, r20
    3fe8:	84 0d       	add	r24, r4
    3fea:	95 1d       	adc	r25, r5
    3fec:	a6 1d       	adc	r26, r6
    3fee:	b7 1d       	adc	r27, r7
    3ff0:	40 e0       	ldi	r20, 0x00	; 0
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	70 e0       	ldi	r23, 0x00	; 0
    3ff8:	80 16       	cp	r8, r16
    3ffa:	91 06       	cpc	r9, r17
    3ffc:	a2 06       	cpc	r10, r18
    3ffe:	b3 06       	cpc	r11, r19
    4000:	20 f4       	brcc	.+8      	; 0x400a <__mulsf3+0xec>
    4002:	41 e0       	ldi	r20, 0x01	; 1
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	60 e0       	ldi	r22, 0x00	; 0
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	48 0f       	add	r20, r24
    400c:	59 1f       	adc	r21, r25
    400e:	6a 1f       	adc	r22, r26
    4010:	7b 1f       	adc	r23, r27
    4012:	44 0c       	add	r4, r4
    4014:	55 1c       	adc	r5, r5
    4016:	66 1c       	adc	r6, r6
    4018:	77 1c       	adc	r7, r7
    401a:	37 ff       	sbrs	r19, 7
    401c:	08 c0       	rjmp	.+16     	; 0x402e <__mulsf3+0x110>
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	a0 e0       	ldi	r26, 0x00	; 0
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	48 2a       	or	r4, r24
    4028:	59 2a       	or	r5, r25
    402a:	6a 2a       	or	r6, r26
    402c:	7b 2a       	or	r7, r27
    402e:	31 96       	adiw	r30, 0x01	; 1
    4030:	e0 32       	cpi	r30, 0x20	; 32
    4032:	f1 05       	cpc	r31, r1
    4034:	49 f0       	breq	.+18     	; 0x4048 <__mulsf3+0x12a>
    4036:	00 0f       	add	r16, r16
    4038:	11 1f       	adc	r17, r17
    403a:	22 1f       	adc	r18, r18
    403c:	33 1f       	adc	r19, r19
    403e:	f6 94       	lsr	r15
    4040:	e7 94       	ror	r14
    4042:	d7 94       	ror	r13
    4044:	c7 94       	ror	r12
    4046:	c5 cf       	rjmp	.-118    	; 0x3fd2 <__mulsf3+0xb4>
    4048:	8b 89       	ldd	r24, Y+19	; 0x13
    404a:	9c 89       	ldd	r25, Y+20	; 0x14
    404c:	2b 85       	ldd	r18, Y+11	; 0x0b
    404e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4050:	82 0f       	add	r24, r18
    4052:	93 1f       	adc	r25, r19
    4054:	02 96       	adiw	r24, 0x02	; 2
    4056:	9c 8f       	std	Y+28, r25	; 0x1c
    4058:	8b 8f       	std	Y+27, r24	; 0x1b
    405a:	1a 8e       	std	Y+26, r1	; 0x1a
    405c:	9a 85       	ldd	r25, Y+10	; 0x0a
    405e:	8a 89       	ldd	r24, Y+18	; 0x12
    4060:	98 17       	cp	r25, r24
    4062:	11 f0       	breq	.+4      	; 0x4068 <__mulsf3+0x14a>
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	8a 8f       	std	Y+26, r24	; 0x1a
    4068:	2b 8d       	ldd	r18, Y+27	; 0x1b
    406a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    406c:	17 c0       	rjmp	.+46     	; 0x409c <__mulsf3+0x17e>
    406e:	ca 01       	movw	r24, r20
    4070:	81 70       	andi	r24, 0x01	; 1
    4072:	90 70       	andi	r25, 0x00	; 0
    4074:	89 2b       	or	r24, r25
    4076:	61 f0       	breq	.+24     	; 0x4090 <__mulsf3+0x172>
    4078:	b6 94       	lsr	r11
    407a:	a7 94       	ror	r10
    407c:	97 94       	ror	r9
    407e:	87 94       	ror	r8
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e0       	ldi	r26, 0x00	; 0
    4086:	b0 e8       	ldi	r27, 0x80	; 128
    4088:	88 2a       	or	r8, r24
    408a:	99 2a       	or	r9, r25
    408c:	aa 2a       	or	r10, r26
    408e:	bb 2a       	or	r11, r27
    4090:	76 95       	lsr	r23
    4092:	67 95       	ror	r22
    4094:	57 95       	ror	r21
    4096:	47 95       	ror	r20
    4098:	2f 5f       	subi	r18, 0xFF	; 255
    409a:	3f 4f       	sbci	r19, 0xFF	; 255
    409c:	77 fd       	sbrc	r23, 7
    409e:	e7 cf       	rjmp	.-50     	; 0x406e <__mulsf3+0x150>
    40a0:	c9 01       	movw	r24, r18
    40a2:	0b c0       	rjmp	.+22     	; 0x40ba <__mulsf3+0x19c>
    40a4:	44 0f       	add	r20, r20
    40a6:	55 1f       	adc	r21, r21
    40a8:	66 1f       	adc	r22, r22
    40aa:	77 1f       	adc	r23, r23
    40ac:	b7 fc       	sbrc	r11, 7
    40ae:	41 60       	ori	r20, 0x01	; 1
    40b0:	88 0c       	add	r8, r8
    40b2:	99 1c       	adc	r9, r9
    40b4:	aa 1c       	adc	r10, r10
    40b6:	bb 1c       	adc	r11, r11
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	40 30       	cpi	r20, 0x00	; 0
    40bc:	a0 e0       	ldi	r26, 0x00	; 0
    40be:	5a 07       	cpc	r21, r26
    40c0:	a0 e0       	ldi	r26, 0x00	; 0
    40c2:	6a 07       	cpc	r22, r26
    40c4:	a0 e4       	ldi	r26, 0x40	; 64
    40c6:	7a 07       	cpc	r23, r26
    40c8:	68 f3       	brcs	.-38     	; 0x40a4 <__mulsf3+0x186>
    40ca:	9c 8f       	std	Y+28, r25	; 0x1c
    40cc:	8b 8f       	std	Y+27, r24	; 0x1b
    40ce:	db 01       	movw	r26, r22
    40d0:	ca 01       	movw	r24, r20
    40d2:	8f 77       	andi	r24, 0x7F	; 127
    40d4:	90 70       	andi	r25, 0x00	; 0
    40d6:	a0 70       	andi	r26, 0x00	; 0
    40d8:	b0 70       	andi	r27, 0x00	; 0
    40da:	80 34       	cpi	r24, 0x40	; 64
    40dc:	91 05       	cpc	r25, r1
    40de:	a1 05       	cpc	r26, r1
    40e0:	b1 05       	cpc	r27, r1
    40e2:	61 f4       	brne	.+24     	; 0x40fc <__mulsf3+0x1de>
    40e4:	47 fd       	sbrc	r20, 7
    40e6:	0a c0       	rjmp	.+20     	; 0x40fc <__mulsf3+0x1de>
    40e8:	81 14       	cp	r8, r1
    40ea:	91 04       	cpc	r9, r1
    40ec:	a1 04       	cpc	r10, r1
    40ee:	b1 04       	cpc	r11, r1
    40f0:	29 f0       	breq	.+10     	; 0x40fc <__mulsf3+0x1de>
    40f2:	40 5c       	subi	r20, 0xC0	; 192
    40f4:	5f 4f       	sbci	r21, 0xFF	; 255
    40f6:	6f 4f       	sbci	r22, 0xFF	; 255
    40f8:	7f 4f       	sbci	r23, 0xFF	; 255
    40fa:	40 78       	andi	r20, 0x80	; 128
    40fc:	4d 8f       	std	Y+29, r20	; 0x1d
    40fe:	5e 8f       	std	Y+30, r21	; 0x1e
    4100:	6f 8f       	std	Y+31, r22	; 0x1f
    4102:	78 a3       	std	Y+32, r23	; 0x20
    4104:	83 e0       	ldi	r24, 0x03	; 3
    4106:	89 8f       	std	Y+25, r24	; 0x19
    4108:	be 01       	movw	r22, r28
    410a:	67 5e       	subi	r22, 0xE7	; 231
    410c:	7f 4f       	sbci	r23, 0xFF	; 255
    410e:	cb 01       	movw	r24, r22
    4110:	0e 94 8c 21 	call	0x4318	; 0x4318 <__pack_f>
    4114:	e0 e1       	ldi	r30, 0x10	; 16
    4116:	a0 96       	adiw	r28, 0x20	; 32
    4118:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__+0x4>

0000411c <__floatsisf>:
    411c:	a8 e0       	ldi	r26, 0x08	; 8
    411e:	b0 e0       	ldi	r27, 0x00	; 0
    4120:	e4 e9       	ldi	r30, 0x94	; 148
    4122:	f0 e2       	ldi	r31, 0x20	; 32
    4124:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__prologue_saves__+0x12>
    4128:	9b 01       	movw	r18, r22
    412a:	ac 01       	movw	r20, r24
    412c:	83 e0       	ldi	r24, 0x03	; 3
    412e:	89 83       	std	Y+1, r24	; 0x01
    4130:	da 01       	movw	r26, r20
    4132:	c9 01       	movw	r24, r18
    4134:	88 27       	eor	r24, r24
    4136:	b7 fd       	sbrc	r27, 7
    4138:	83 95       	inc	r24
    413a:	99 27       	eor	r25, r25
    413c:	aa 27       	eor	r26, r26
    413e:	bb 27       	eor	r27, r27
    4140:	b8 2e       	mov	r11, r24
    4142:	21 15       	cp	r18, r1
    4144:	31 05       	cpc	r19, r1
    4146:	41 05       	cpc	r20, r1
    4148:	51 05       	cpc	r21, r1
    414a:	19 f4       	brne	.+6      	; 0x4152 <__floatsisf+0x36>
    414c:	82 e0       	ldi	r24, 0x02	; 2
    414e:	89 83       	std	Y+1, r24	; 0x01
    4150:	3a c0       	rjmp	.+116    	; 0x41c6 <__floatsisf+0xaa>
    4152:	88 23       	and	r24, r24
    4154:	a9 f0       	breq	.+42     	; 0x4180 <__floatsisf+0x64>
    4156:	20 30       	cpi	r18, 0x00	; 0
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	38 07       	cpc	r19, r24
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	48 07       	cpc	r20, r24
    4160:	80 e8       	ldi	r24, 0x80	; 128
    4162:	58 07       	cpc	r21, r24
    4164:	29 f4       	brne	.+10     	; 0x4170 <__floatsisf+0x54>
    4166:	60 e0       	ldi	r22, 0x00	; 0
    4168:	70 e0       	ldi	r23, 0x00	; 0
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	9f ec       	ldi	r25, 0xCF	; 207
    416e:	30 c0       	rjmp	.+96     	; 0x41d0 <__floatsisf+0xb4>
    4170:	ee 24       	eor	r14, r14
    4172:	ff 24       	eor	r15, r15
    4174:	87 01       	movw	r16, r14
    4176:	e2 1a       	sub	r14, r18
    4178:	f3 0a       	sbc	r15, r19
    417a:	04 0b       	sbc	r16, r20
    417c:	15 0b       	sbc	r17, r21
    417e:	02 c0       	rjmp	.+4      	; 0x4184 <__floatsisf+0x68>
    4180:	79 01       	movw	r14, r18
    4182:	8a 01       	movw	r16, r20
    4184:	8e e1       	ldi	r24, 0x1E	; 30
    4186:	c8 2e       	mov	r12, r24
    4188:	d1 2c       	mov	r13, r1
    418a:	dc 82       	std	Y+4, r13	; 0x04
    418c:	cb 82       	std	Y+3, r12	; 0x03
    418e:	ed 82       	std	Y+5, r14	; 0x05
    4190:	fe 82       	std	Y+6, r15	; 0x06
    4192:	0f 83       	std	Y+7, r16	; 0x07
    4194:	18 87       	std	Y+8, r17	; 0x08
    4196:	c8 01       	movw	r24, r16
    4198:	b7 01       	movw	r22, r14
    419a:	0e 94 3f 21 	call	0x427e	; 0x427e <__clzsi2>
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	18 16       	cp	r1, r24
    41a2:	19 06       	cpc	r1, r25
    41a4:	84 f4       	brge	.+32     	; 0x41c6 <__floatsisf+0xaa>
    41a6:	08 2e       	mov	r0, r24
    41a8:	04 c0       	rjmp	.+8      	; 0x41b2 <__floatsisf+0x96>
    41aa:	ee 0c       	add	r14, r14
    41ac:	ff 1c       	adc	r15, r15
    41ae:	00 1f       	adc	r16, r16
    41b0:	11 1f       	adc	r17, r17
    41b2:	0a 94       	dec	r0
    41b4:	d2 f7       	brpl	.-12     	; 0x41aa <__floatsisf+0x8e>
    41b6:	ed 82       	std	Y+5, r14	; 0x05
    41b8:	fe 82       	std	Y+6, r15	; 0x06
    41ba:	0f 83       	std	Y+7, r16	; 0x07
    41bc:	18 87       	std	Y+8, r17	; 0x08
    41be:	c8 1a       	sub	r12, r24
    41c0:	d9 0a       	sbc	r13, r25
    41c2:	dc 82       	std	Y+4, r13	; 0x04
    41c4:	cb 82       	std	Y+3, r12	; 0x03
    41c6:	ba 82       	std	Y+2, r11	; 0x02
    41c8:	ce 01       	movw	r24, r28
    41ca:	01 96       	adiw	r24, 0x01	; 1
    41cc:	0e 94 8c 21 	call	0x4318	; 0x4318 <__pack_f>
    41d0:	e9 e0       	ldi	r30, 0x09	; 9
    41d2:	28 96       	adiw	r28, 0x08	; 8
    41d4:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__epilogue_restores__+0x12>

000041d8 <__fixsfsi>:
    41d8:	ac e0       	ldi	r26, 0x0C	; 12
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	e2 ef       	ldi	r30, 0xF2	; 242
    41de:	f0 e2       	ldi	r31, 0x20	; 32
    41e0:	0c 94 13 23 	jmp	0x4626	; 0x4626 <__prologue_saves__+0x20>
    41e4:	69 83       	std	Y+1, r22	; 0x01
    41e6:	7a 83       	std	Y+2, r23	; 0x02
    41e8:	8b 83       	std	Y+3, r24	; 0x03
    41ea:	9c 83       	std	Y+4, r25	; 0x04
    41ec:	be 01       	movw	r22, r28
    41ee:	6b 5f       	subi	r22, 0xFB	; 251
    41f0:	7f 4f       	sbci	r23, 0xFF	; 255
    41f2:	ce 01       	movw	r24, r28
    41f4:	01 96       	adiw	r24, 0x01	; 1
    41f6:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__unpack_f>
    41fa:	8d 81       	ldd	r24, Y+5	; 0x05
    41fc:	82 30       	cpi	r24, 0x02	; 2
    41fe:	a9 f1       	breq	.+106    	; 0x426a <__fixsfsi+0x92>
    4200:	82 30       	cpi	r24, 0x02	; 2
    4202:	98 f1       	brcs	.+102    	; 0x426a <__fixsfsi+0x92>
    4204:	84 30       	cpi	r24, 0x04	; 4
    4206:	21 f4       	brne	.+8      	; 0x4210 <__fixsfsi+0x38>
    4208:	8e 81       	ldd	r24, Y+6	; 0x06
    420a:	88 23       	and	r24, r24
    420c:	59 f4       	brne	.+22     	; 0x4224 <__fixsfsi+0x4c>
    420e:	0f c0       	rjmp	.+30     	; 0x422e <__fixsfsi+0x56>
    4210:	2f 81       	ldd	r18, Y+7	; 0x07
    4212:	38 85       	ldd	r19, Y+8	; 0x08
    4214:	37 fd       	sbrc	r19, 7
    4216:	29 c0       	rjmp	.+82     	; 0x426a <__fixsfsi+0x92>
    4218:	6e 81       	ldd	r22, Y+6	; 0x06
    421a:	2f 31       	cpi	r18, 0x1F	; 31
    421c:	31 05       	cpc	r19, r1
    421e:	64 f0       	brlt	.+24     	; 0x4238 <__fixsfsi+0x60>
    4220:	66 23       	and	r22, r22
    4222:	29 f0       	breq	.+10     	; 0x422e <__fixsfsi+0x56>
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	50 e8       	ldi	r21, 0x80	; 128
    422c:	22 c0       	rjmp	.+68     	; 0x4272 <__fixsfsi+0x9a>
    422e:	2f ef       	ldi	r18, 0xFF	; 255
    4230:	3f ef       	ldi	r19, 0xFF	; 255
    4232:	4f ef       	ldi	r20, 0xFF	; 255
    4234:	5f e7       	ldi	r21, 0x7F	; 127
    4236:	1d c0       	rjmp	.+58     	; 0x4272 <__fixsfsi+0x9a>
    4238:	8e e1       	ldi	r24, 0x1E	; 30
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	82 1b       	sub	r24, r18
    423e:	93 0b       	sbc	r25, r19
    4240:	29 85       	ldd	r18, Y+9	; 0x09
    4242:	3a 85       	ldd	r19, Y+10	; 0x0a
    4244:	4b 85       	ldd	r20, Y+11	; 0x0b
    4246:	5c 85       	ldd	r21, Y+12	; 0x0c
    4248:	04 c0       	rjmp	.+8      	; 0x4252 <__fixsfsi+0x7a>
    424a:	56 95       	lsr	r21
    424c:	47 95       	ror	r20
    424e:	37 95       	ror	r19
    4250:	27 95       	ror	r18
    4252:	8a 95       	dec	r24
    4254:	d2 f7       	brpl	.-12     	; 0x424a <__fixsfsi+0x72>
    4256:	66 23       	and	r22, r22
    4258:	61 f0       	breq	.+24     	; 0x4272 <__fixsfsi+0x9a>
    425a:	50 95       	com	r21
    425c:	40 95       	com	r20
    425e:	30 95       	com	r19
    4260:	21 95       	neg	r18
    4262:	3f 4f       	sbci	r19, 0xFF	; 255
    4264:	4f 4f       	sbci	r20, 0xFF	; 255
    4266:	5f 4f       	sbci	r21, 0xFF	; 255
    4268:	04 c0       	rjmp	.+8      	; 0x4272 <__fixsfsi+0x9a>
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	50 e0       	ldi	r21, 0x00	; 0
    4272:	ca 01       	movw	r24, r20
    4274:	b9 01       	movw	r22, r18
    4276:	e2 e0       	ldi	r30, 0x02	; 2
    4278:	2c 96       	adiw	r28, 0x0c	; 12
    427a:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__epilogue_restores__+0x20>

0000427e <__clzsi2>:
    427e:	ef 92       	push	r14
    4280:	ff 92       	push	r15
    4282:	0f 93       	push	r16
    4284:	1f 93       	push	r17
    4286:	9b 01       	movw	r18, r22
    4288:	ac 01       	movw	r20, r24
    428a:	20 30       	cpi	r18, 0x00	; 0
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	38 07       	cpc	r19, r24
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	48 07       	cpc	r20, r24
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	58 07       	cpc	r21, r24
    4298:	80 f4       	brcc	.+32     	; 0x42ba <__clzsi2+0x3c>
    429a:	2f 3f       	cpi	r18, 0xFF	; 255
    429c:	31 05       	cpc	r19, r1
    429e:	41 05       	cpc	r20, r1
    42a0:	51 05       	cpc	r21, r1
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <__clzsi2+0x28>
    42a4:	20 f4       	brcc	.+8      	; 0x42ae <__clzsi2+0x30>
    42a6:	ee 24       	eor	r14, r14
    42a8:	ff 24       	eor	r15, r15
    42aa:	87 01       	movw	r16, r14
    42ac:	19 c0       	rjmp	.+50     	; 0x42e0 <__clzsi2+0x62>
    42ae:	68 e0       	ldi	r22, 0x08	; 8
    42b0:	e6 2e       	mov	r14, r22
    42b2:	f1 2c       	mov	r15, r1
    42b4:	01 2d       	mov	r16, r1
    42b6:	11 2d       	mov	r17, r1
    42b8:	13 c0       	rjmp	.+38     	; 0x42e0 <__clzsi2+0x62>
    42ba:	20 30       	cpi	r18, 0x00	; 0
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	38 07       	cpc	r19, r24
    42c0:	80 e0       	ldi	r24, 0x00	; 0
    42c2:	48 07       	cpc	r20, r24
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	58 07       	cpc	r21, r24
    42c8:	30 f4       	brcc	.+12     	; 0x42d6 <__clzsi2+0x58>
    42ca:	90 e1       	ldi	r25, 0x10	; 16
    42cc:	e9 2e       	mov	r14, r25
    42ce:	f1 2c       	mov	r15, r1
    42d0:	01 2d       	mov	r16, r1
    42d2:	11 2d       	mov	r17, r1
    42d4:	05 c0       	rjmp	.+10     	; 0x42e0 <__clzsi2+0x62>
    42d6:	88 e1       	ldi	r24, 0x18	; 24
    42d8:	e8 2e       	mov	r14, r24
    42da:	f1 2c       	mov	r15, r1
    42dc:	01 2d       	mov	r16, r1
    42de:	11 2d       	mov	r17, r1
    42e0:	80 e2       	ldi	r24, 0x20	; 32
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	a0 e0       	ldi	r26, 0x00	; 0
    42e6:	b0 e0       	ldi	r27, 0x00	; 0
    42e8:	8e 19       	sub	r24, r14
    42ea:	9f 09       	sbc	r25, r15
    42ec:	a0 0b       	sbc	r26, r16
    42ee:	b1 0b       	sbc	r27, r17
    42f0:	04 c0       	rjmp	.+8      	; 0x42fa <__clzsi2+0x7c>
    42f2:	56 95       	lsr	r21
    42f4:	47 95       	ror	r20
    42f6:	37 95       	ror	r19
    42f8:	27 95       	ror	r18
    42fa:	ea 94       	dec	r14
    42fc:	d2 f7       	brpl	.-12     	; 0x42f2 <__clzsi2+0x74>
    42fe:	f9 01       	movw	r30, r18
    4300:	e7 5d       	subi	r30, 0xD7	; 215
    4302:	fd 4f       	sbci	r31, 0xFD	; 253
    4304:	20 81       	ld	r18, Z
    4306:	82 1b       	sub	r24, r18
    4308:	91 09       	sbc	r25, r1
    430a:	a1 09       	sbc	r26, r1
    430c:	b1 09       	sbc	r27, r1
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	ff 90       	pop	r15
    4314:	ef 90       	pop	r14
    4316:	08 95       	ret

00004318 <__pack_f>:
    4318:	9f 92       	push	r9
    431a:	af 92       	push	r10
    431c:	bf 92       	push	r11
    431e:	cf 92       	push	r12
    4320:	df 92       	push	r13
    4322:	ef 92       	push	r14
    4324:	ff 92       	push	r15
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
    432a:	ee 24       	eor	r14, r14
    432c:	ff 24       	eor	r15, r15
    432e:	87 01       	movw	r16, r14
    4330:	fc 01       	movw	r30, r24
    4332:	24 81       	ldd	r18, Z+4	; 0x04
    4334:	35 81       	ldd	r19, Z+5	; 0x05
    4336:	46 81       	ldd	r20, Z+6	; 0x06
    4338:	57 81       	ldd	r21, Z+7	; 0x07
    433a:	91 80       	ldd	r9, Z+1	; 0x01
    433c:	80 81       	ld	r24, Z
    433e:	82 30       	cpi	r24, 0x02	; 2
    4340:	10 f4       	brcc	.+4      	; 0x4346 <__pack_f+0x2e>
    4342:	40 61       	ori	r20, 0x10	; 16
    4344:	a2 c0       	rjmp	.+324    	; 0x448a <__pack_f+0x172>
    4346:	84 30       	cpi	r24, 0x04	; 4
    4348:	09 f4       	brne	.+2      	; 0x434c <__pack_f+0x34>
    434a:	9b c0       	rjmp	.+310    	; 0x4482 <__pack_f+0x16a>
    434c:	82 30       	cpi	r24, 0x02	; 2
    434e:	29 f4       	brne	.+10     	; 0x435a <__pack_f+0x42>
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	50 e0       	ldi	r21, 0x00	; 0
    4358:	05 c0       	rjmp	.+10     	; 0x4364 <__pack_f+0x4c>
    435a:	21 15       	cp	r18, r1
    435c:	31 05       	cpc	r19, r1
    435e:	41 05       	cpc	r20, r1
    4360:	51 05       	cpc	r21, r1
    4362:	19 f4       	brne	.+6      	; 0x436a <__pack_f+0x52>
    4364:	e0 e0       	ldi	r30, 0x00	; 0
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	92 c0       	rjmp	.+292    	; 0x448e <__pack_f+0x176>
    436a:	82 81       	ldd	r24, Z+2	; 0x02
    436c:	93 81       	ldd	r25, Z+3	; 0x03
    436e:	6f ef       	ldi	r22, 0xFF	; 255
    4370:	82 38       	cpi	r24, 0x82	; 130
    4372:	96 07       	cpc	r25, r22
    4374:	0c f0       	brlt	.+2      	; 0x4378 <__pack_f+0x60>
    4376:	5a c0       	rjmp	.+180    	; 0x442c <__pack_f+0x114>
    4378:	62 e8       	ldi	r22, 0x82	; 130
    437a:	7f ef       	ldi	r23, 0xFF	; 255
    437c:	68 1b       	sub	r22, r24
    437e:	79 0b       	sbc	r23, r25
    4380:	6a 31       	cpi	r22, 0x1A	; 26
    4382:	71 05       	cpc	r23, r1
    4384:	2c f0       	brlt	.+10     	; 0x4390 <__pack_f+0x78>
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e0       	ldi	r20, 0x00	; 0
    438c:	50 e0       	ldi	r21, 0x00	; 0
    438e:	2a c0       	rjmp	.+84     	; 0x43e4 <__pack_f+0xcc>
    4390:	aa 24       	eor	r10, r10
    4392:	bb 24       	eor	r11, r11
    4394:	65 01       	movw	r12, r10
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	a0 e0       	ldi	r26, 0x00	; 0
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	06 2e       	mov	r0, r22
    43a0:	04 c0       	rjmp	.+8      	; 0x43aa <__pack_f+0x92>
    43a2:	88 0f       	add	r24, r24
    43a4:	99 1f       	adc	r25, r25
    43a6:	aa 1f       	adc	r26, r26
    43a8:	bb 1f       	adc	r27, r27
    43aa:	0a 94       	dec	r0
    43ac:	d2 f7       	brpl	.-12     	; 0x43a2 <__pack_f+0x8a>
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	a1 09       	sbc	r26, r1
    43b2:	b1 09       	sbc	r27, r1
    43b4:	82 23       	and	r24, r18
    43b6:	93 23       	and	r25, r19
    43b8:	a4 23       	and	r26, r20
    43ba:	b5 23       	and	r27, r21
    43bc:	00 97       	sbiw	r24, 0x00	; 0
    43be:	a1 05       	cpc	r26, r1
    43c0:	b1 05       	cpc	r27, r1
    43c2:	29 f0       	breq	.+10     	; 0x43ce <__pack_f+0xb6>
    43c4:	71 e0       	ldi	r23, 0x01	; 1
    43c6:	a7 2e       	mov	r10, r23
    43c8:	b1 2c       	mov	r11, r1
    43ca:	c1 2c       	mov	r12, r1
    43cc:	d1 2c       	mov	r13, r1
    43ce:	04 c0       	rjmp	.+8      	; 0x43d8 <__pack_f+0xc0>
    43d0:	56 95       	lsr	r21
    43d2:	47 95       	ror	r20
    43d4:	37 95       	ror	r19
    43d6:	27 95       	ror	r18
    43d8:	6a 95       	dec	r22
    43da:	d2 f7       	brpl	.-12     	; 0x43d0 <__pack_f+0xb8>
    43dc:	2a 29       	or	r18, r10
    43de:	3b 29       	or	r19, r11
    43e0:	4c 29       	or	r20, r12
    43e2:	5d 29       	or	r21, r13
    43e4:	da 01       	movw	r26, r20
    43e6:	c9 01       	movw	r24, r18
    43e8:	8f 77       	andi	r24, 0x7F	; 127
    43ea:	90 70       	andi	r25, 0x00	; 0
    43ec:	a0 70       	andi	r26, 0x00	; 0
    43ee:	b0 70       	andi	r27, 0x00	; 0
    43f0:	80 34       	cpi	r24, 0x40	; 64
    43f2:	91 05       	cpc	r25, r1
    43f4:	a1 05       	cpc	r26, r1
    43f6:	b1 05       	cpc	r27, r1
    43f8:	39 f4       	brne	.+14     	; 0x4408 <__pack_f+0xf0>
    43fa:	27 ff       	sbrs	r18, 7
    43fc:	09 c0       	rjmp	.+18     	; 0x4410 <__pack_f+0xf8>
    43fe:	20 5c       	subi	r18, 0xC0	; 192
    4400:	3f 4f       	sbci	r19, 0xFF	; 255
    4402:	4f 4f       	sbci	r20, 0xFF	; 255
    4404:	5f 4f       	sbci	r21, 0xFF	; 255
    4406:	04 c0       	rjmp	.+8      	; 0x4410 <__pack_f+0xf8>
    4408:	21 5c       	subi	r18, 0xC1	; 193
    440a:	3f 4f       	sbci	r19, 0xFF	; 255
    440c:	4f 4f       	sbci	r20, 0xFF	; 255
    440e:	5f 4f       	sbci	r21, 0xFF	; 255
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	20 30       	cpi	r18, 0x00	; 0
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	36 07       	cpc	r19, r22
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	46 07       	cpc	r20, r22
    441e:	60 e4       	ldi	r22, 0x40	; 64
    4420:	56 07       	cpc	r21, r22
    4422:	10 f0       	brcs	.+4      	; 0x4428 <__pack_f+0x110>
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	fc 01       	movw	r30, r24
    442a:	23 c0       	rjmp	.+70     	; 0x4472 <__pack_f+0x15a>
    442c:	80 38       	cpi	r24, 0x80	; 128
    442e:	91 05       	cpc	r25, r1
    4430:	44 f5       	brge	.+80     	; 0x4482 <__pack_f+0x16a>
    4432:	fc 01       	movw	r30, r24
    4434:	e1 58       	subi	r30, 0x81	; 129
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	da 01       	movw	r26, r20
    443a:	c9 01       	movw	r24, r18
    443c:	8f 77       	andi	r24, 0x7F	; 127
    443e:	90 70       	andi	r25, 0x00	; 0
    4440:	a0 70       	andi	r26, 0x00	; 0
    4442:	b0 70       	andi	r27, 0x00	; 0
    4444:	80 34       	cpi	r24, 0x40	; 64
    4446:	91 05       	cpc	r25, r1
    4448:	a1 05       	cpc	r26, r1
    444a:	b1 05       	cpc	r27, r1
    444c:	39 f4       	brne	.+14     	; 0x445c <__pack_f+0x144>
    444e:	27 ff       	sbrs	r18, 7
    4450:	09 c0       	rjmp	.+18     	; 0x4464 <__pack_f+0x14c>
    4452:	20 5c       	subi	r18, 0xC0	; 192
    4454:	3f 4f       	sbci	r19, 0xFF	; 255
    4456:	4f 4f       	sbci	r20, 0xFF	; 255
    4458:	5f 4f       	sbci	r21, 0xFF	; 255
    445a:	04 c0       	rjmp	.+8      	; 0x4464 <__pack_f+0x14c>
    445c:	21 5c       	subi	r18, 0xC1	; 193
    445e:	3f 4f       	sbci	r19, 0xFF	; 255
    4460:	4f 4f       	sbci	r20, 0xFF	; 255
    4462:	5f 4f       	sbci	r21, 0xFF	; 255
    4464:	57 ff       	sbrs	r21, 7
    4466:	05 c0       	rjmp	.+10     	; 0x4472 <__pack_f+0x15a>
    4468:	56 95       	lsr	r21
    446a:	47 95       	ror	r20
    446c:	37 95       	ror	r19
    446e:	27 95       	ror	r18
    4470:	31 96       	adiw	r30, 0x01	; 1
    4472:	87 e0       	ldi	r24, 0x07	; 7
    4474:	56 95       	lsr	r21
    4476:	47 95       	ror	r20
    4478:	37 95       	ror	r19
    447a:	27 95       	ror	r18
    447c:	8a 95       	dec	r24
    447e:	d1 f7       	brne	.-12     	; 0x4474 <__pack_f+0x15c>
    4480:	06 c0       	rjmp	.+12     	; 0x448e <__pack_f+0x176>
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e0       	ldi	r20, 0x00	; 0
    4488:	50 e0       	ldi	r21, 0x00	; 0
    448a:	ef ef       	ldi	r30, 0xFF	; 255
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	e2 2e       	mov	r14, r18
    4490:	f3 2e       	mov	r15, r19
    4492:	94 2f       	mov	r25, r20
    4494:	9f 77       	andi	r25, 0x7F	; 127
    4496:	80 2f       	mov	r24, r16
    4498:	80 78       	andi	r24, 0x80	; 128
    449a:	89 2b       	or	r24, r25
    449c:	9e 2f       	mov	r25, r30
    449e:	97 95       	ror	r25
    44a0:	99 27       	eor	r25, r25
    44a2:	97 95       	ror	r25
    44a4:	8f 77       	andi	r24, 0x7F	; 127
    44a6:	08 2f       	mov	r16, r24
    44a8:	09 2b       	or	r16, r25
    44aa:	9e 2f       	mov	r25, r30
    44ac:	96 95       	lsr	r25
    44ae:	81 2f       	mov	r24, r17
    44b0:	80 78       	andi	r24, 0x80	; 128
    44b2:	89 2b       	or	r24, r25
    44b4:	97 94       	ror	r9
    44b6:	99 24       	eor	r9, r9
    44b8:	97 94       	ror	r9
    44ba:	8f 77       	andi	r24, 0x7F	; 127
    44bc:	18 2f       	mov	r17, r24
    44be:	19 29       	or	r17, r9
    44c0:	c8 01       	movw	r24, r16
    44c2:	b7 01       	movw	r22, r14
    44c4:	1f 91       	pop	r17
    44c6:	0f 91       	pop	r16
    44c8:	ff 90       	pop	r15
    44ca:	ef 90       	pop	r14
    44cc:	df 90       	pop	r13
    44ce:	cf 90       	pop	r12
    44d0:	bf 90       	pop	r11
    44d2:	af 90       	pop	r10
    44d4:	9f 90       	pop	r9
    44d6:	08 95       	ret

000044d8 <__unpack_f>:
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	fc 01       	movw	r30, r24
    44de:	db 01       	movw	r26, r22
    44e0:	20 81       	ld	r18, Z
    44e2:	31 81       	ldd	r19, Z+1	; 0x01
    44e4:	92 81       	ldd	r25, Z+2	; 0x02
    44e6:	49 2f       	mov	r20, r25
    44e8:	4f 77       	andi	r20, 0x7F	; 127
    44ea:	50 e0       	ldi	r21, 0x00	; 0
    44ec:	99 1f       	adc	r25, r25
    44ee:	99 27       	eor	r25, r25
    44f0:	99 1f       	adc	r25, r25
    44f2:	83 81       	ldd	r24, Z+3	; 0x03
    44f4:	e8 2f       	mov	r30, r24
    44f6:	ee 0f       	add	r30, r30
    44f8:	e9 2b       	or	r30, r25
    44fa:	6e 2f       	mov	r22, r30
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	88 1f       	adc	r24, r24
    4500:	88 27       	eor	r24, r24
    4502:	88 1f       	adc	r24, r24
    4504:	ed 01       	movw	r28, r26
    4506:	89 83       	std	Y+1, r24	; 0x01
    4508:	ee 23       	and	r30, r30
    450a:	71 f5       	brne	.+92     	; 0x4568 <__unpack_f+0x90>
    450c:	21 15       	cp	r18, r1
    450e:	31 05       	cpc	r19, r1
    4510:	41 05       	cpc	r20, r1
    4512:	51 05       	cpc	r21, r1
    4514:	11 f4       	brne	.+4      	; 0x451a <__unpack_f+0x42>
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	2f c0       	rjmp	.+94     	; 0x4578 <__unpack_f+0xa0>
    451a:	6e 57       	subi	r22, 0x7E	; 126
    451c:	70 40       	sbci	r23, 0x00	; 0
    451e:	fd 01       	movw	r30, r26
    4520:	73 83       	std	Z+3, r23	; 0x03
    4522:	62 83       	std	Z+2, r22	; 0x02
    4524:	67 e0       	ldi	r22, 0x07	; 7
    4526:	22 0f       	add	r18, r18
    4528:	33 1f       	adc	r19, r19
    452a:	44 1f       	adc	r20, r20
    452c:	55 1f       	adc	r21, r21
    452e:	6a 95       	dec	r22
    4530:	d1 f7       	brne	.-12     	; 0x4526 <__unpack_f+0x4e>
    4532:	83 e0       	ldi	r24, 0x03	; 3
    4534:	8c 93       	st	X, r24
    4536:	0a c0       	rjmp	.+20     	; 0x454c <__unpack_f+0x74>
    4538:	22 0f       	add	r18, r18
    453a:	33 1f       	adc	r19, r19
    453c:	44 1f       	adc	r20, r20
    453e:	55 1f       	adc	r21, r21
    4540:	ed 01       	movw	r28, r26
    4542:	8a 81       	ldd	r24, Y+2	; 0x02
    4544:	9b 81       	ldd	r25, Y+3	; 0x03
    4546:	01 97       	sbiw	r24, 0x01	; 1
    4548:	9b 83       	std	Y+3, r25	; 0x03
    454a:	8a 83       	std	Y+2, r24	; 0x02
    454c:	20 30       	cpi	r18, 0x00	; 0
    454e:	e0 e0       	ldi	r30, 0x00	; 0
    4550:	3e 07       	cpc	r19, r30
    4552:	e0 e0       	ldi	r30, 0x00	; 0
    4554:	4e 07       	cpc	r20, r30
    4556:	e0 e4       	ldi	r30, 0x40	; 64
    4558:	5e 07       	cpc	r21, r30
    455a:	70 f3       	brcs	.-36     	; 0x4538 <__unpack_f+0x60>
    455c:	ed 01       	movw	r28, r26
    455e:	2c 83       	std	Y+4, r18	; 0x04
    4560:	3d 83       	std	Y+5, r19	; 0x05
    4562:	4e 83       	std	Y+6, r20	; 0x06
    4564:	5f 83       	std	Y+7, r21	; 0x07
    4566:	25 c0       	rjmp	.+74     	; 0x45b2 <__unpack_f+0xda>
    4568:	ef 3f       	cpi	r30, 0xFF	; 255
    456a:	79 f4       	brne	.+30     	; 0x458a <__unpack_f+0xb2>
    456c:	21 15       	cp	r18, r1
    456e:	31 05       	cpc	r19, r1
    4570:	41 05       	cpc	r20, r1
    4572:	51 05       	cpc	r21, r1
    4574:	19 f4       	brne	.+6      	; 0x457c <__unpack_f+0xa4>
    4576:	84 e0       	ldi	r24, 0x04	; 4
    4578:	8c 93       	st	X, r24
    457a:	1b c0       	rjmp	.+54     	; 0x45b2 <__unpack_f+0xda>
    457c:	44 ff       	sbrs	r20, 4
    457e:	03 c0       	rjmp	.+6      	; 0x4586 <__unpack_f+0xae>
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	8c 93       	st	X, r24
    4584:	11 c0       	rjmp	.+34     	; 0x45a8 <__unpack_f+0xd0>
    4586:	1c 92       	st	X, r1
    4588:	0f c0       	rjmp	.+30     	; 0x45a8 <__unpack_f+0xd0>
    458a:	6f 57       	subi	r22, 0x7F	; 127
    458c:	70 40       	sbci	r23, 0x00	; 0
    458e:	ed 01       	movw	r28, r26
    4590:	7b 83       	std	Y+3, r23	; 0x03
    4592:	6a 83       	std	Y+2, r22	; 0x02
    4594:	83 e0       	ldi	r24, 0x03	; 3
    4596:	8c 93       	st	X, r24
    4598:	87 e0       	ldi	r24, 0x07	; 7
    459a:	22 0f       	add	r18, r18
    459c:	33 1f       	adc	r19, r19
    459e:	44 1f       	adc	r20, r20
    45a0:	55 1f       	adc	r21, r21
    45a2:	8a 95       	dec	r24
    45a4:	d1 f7       	brne	.-12     	; 0x459a <__unpack_f+0xc2>
    45a6:	50 64       	ori	r21, 0x40	; 64
    45a8:	fd 01       	movw	r30, r26
    45aa:	24 83       	std	Z+4, r18	; 0x04
    45ac:	35 83       	std	Z+5, r19	; 0x05
    45ae:	46 83       	std	Z+6, r20	; 0x06
    45b0:	57 83       	std	Z+7, r21	; 0x07
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	08 95       	ret

000045b8 <__udivmodhi4>:
    45b8:	aa 1b       	sub	r26, r26
    45ba:	bb 1b       	sub	r27, r27
    45bc:	51 e1       	ldi	r21, 0x11	; 17
    45be:	07 c0       	rjmp	.+14     	; 0x45ce <__udivmodhi4_ep>

000045c0 <__udivmodhi4_loop>:
    45c0:	aa 1f       	adc	r26, r26
    45c2:	bb 1f       	adc	r27, r27
    45c4:	a6 17       	cp	r26, r22
    45c6:	b7 07       	cpc	r27, r23
    45c8:	10 f0       	brcs	.+4      	; 0x45ce <__udivmodhi4_ep>
    45ca:	a6 1b       	sub	r26, r22
    45cc:	b7 0b       	sbc	r27, r23

000045ce <__udivmodhi4_ep>:
    45ce:	88 1f       	adc	r24, r24
    45d0:	99 1f       	adc	r25, r25
    45d2:	5a 95       	dec	r21
    45d4:	a9 f7       	brne	.-22     	; 0x45c0 <__udivmodhi4_loop>
    45d6:	80 95       	com	r24
    45d8:	90 95       	com	r25
    45da:	bc 01       	movw	r22, r24
    45dc:	cd 01       	movw	r24, r26
    45de:	08 95       	ret

000045e0 <__divmodhi4>:
    45e0:	97 fb       	bst	r25, 7
    45e2:	09 2e       	mov	r0, r25
    45e4:	07 26       	eor	r0, r23
    45e6:	0a d0       	rcall	.+20     	; 0x45fc <__divmodhi4_neg1>
    45e8:	77 fd       	sbrc	r23, 7
    45ea:	04 d0       	rcall	.+8      	; 0x45f4 <__divmodhi4_neg2>
    45ec:	e5 df       	rcall	.-54     	; 0x45b8 <__udivmodhi4>
    45ee:	06 d0       	rcall	.+12     	; 0x45fc <__divmodhi4_neg1>
    45f0:	00 20       	and	r0, r0
    45f2:	1a f4       	brpl	.+6      	; 0x45fa <__divmodhi4_exit>

000045f4 <__divmodhi4_neg2>:
    45f4:	70 95       	com	r23
    45f6:	61 95       	neg	r22
    45f8:	7f 4f       	sbci	r23, 0xFF	; 255

000045fa <__divmodhi4_exit>:
    45fa:	08 95       	ret

000045fc <__divmodhi4_neg1>:
    45fc:	f6 f7       	brtc	.-4      	; 0x45fa <__divmodhi4_exit>
    45fe:	90 95       	com	r25
    4600:	81 95       	neg	r24
    4602:	9f 4f       	sbci	r25, 0xFF	; 255
    4604:	08 95       	ret

00004606 <__prologue_saves__>:
    4606:	2f 92       	push	r2
    4608:	3f 92       	push	r3
    460a:	4f 92       	push	r4
    460c:	5f 92       	push	r5
    460e:	6f 92       	push	r6
    4610:	7f 92       	push	r7
    4612:	8f 92       	push	r8
    4614:	9f 92       	push	r9
    4616:	af 92       	push	r10
    4618:	bf 92       	push	r11
    461a:	cf 92       	push	r12
    461c:	df 92       	push	r13
    461e:	ef 92       	push	r14
    4620:	ff 92       	push	r15
    4622:	0f 93       	push	r16
    4624:	1f 93       	push	r17
    4626:	cf 93       	push	r28
    4628:	df 93       	push	r29
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    462e:	ca 1b       	sub	r28, r26
    4630:	db 0b       	sbc	r29, r27
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	19 94       	eijmp

0000463e <__epilogue_restores__>:
    463e:	2a 88       	ldd	r2, Y+18	; 0x12
    4640:	39 88       	ldd	r3, Y+17	; 0x11
    4642:	48 88       	ldd	r4, Y+16	; 0x10
    4644:	5f 84       	ldd	r5, Y+15	; 0x0f
    4646:	6e 84       	ldd	r6, Y+14	; 0x0e
    4648:	7d 84       	ldd	r7, Y+13	; 0x0d
    464a:	8c 84       	ldd	r8, Y+12	; 0x0c
    464c:	9b 84       	ldd	r9, Y+11	; 0x0b
    464e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4650:	b9 84       	ldd	r11, Y+9	; 0x09
    4652:	c8 84       	ldd	r12, Y+8	; 0x08
    4654:	df 80       	ldd	r13, Y+7	; 0x07
    4656:	ee 80       	ldd	r14, Y+6	; 0x06
    4658:	fd 80       	ldd	r15, Y+5	; 0x05
    465a:	0c 81       	ldd	r16, Y+4	; 0x04
    465c:	1b 81       	ldd	r17, Y+3	; 0x03
    465e:	aa 81       	ldd	r26, Y+2	; 0x02
    4660:	b9 81       	ldd	r27, Y+1	; 0x01
    4662:	ce 0f       	add	r28, r30
    4664:	d1 1d       	adc	r29, r1
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	ed 01       	movw	r28, r26
    4672:	08 95       	ret
    4674:	f5 d0       	rcall	.+490    	; 0x4860 <__fp_pscA>
    4676:	58 f0       	brcs	.+22     	; 0x468e <__epilogue_restores__+0x50>
    4678:	80 e8       	ldi	r24, 0x80	; 128
    467a:	91 e0       	ldi	r25, 0x01	; 1
    467c:	09 f4       	brne	.+2      	; 0x4680 <__epilogue_restores__+0x42>
    467e:	9e ef       	ldi	r25, 0xFE	; 254
    4680:	f6 d0       	rcall	.+492    	; 0x486e <__fp_pscB>
    4682:	28 f0       	brcs	.+10     	; 0x468e <__epilogue_restores__+0x50>
    4684:	40 e8       	ldi	r20, 0x80	; 128
    4686:	51 e0       	ldi	r21, 0x01	; 1
    4688:	59 f4       	brne	.+22     	; 0x46a0 <atan2+0xe>
    468a:	5e ef       	ldi	r21, 0xFE	; 254
    468c:	09 c0       	rjmp	.+18     	; 0x46a0 <atan2+0xe>
    468e:	c0 c0       	rjmp	.+384    	; 0x4810 <__fp_nan>
    4690:	28 c1       	rjmp	.+592    	; 0x48e2 <__fp_zero>

00004692 <atan2>:
    4692:	e9 2f       	mov	r30, r25
    4694:	e0 78       	andi	r30, 0x80	; 128
    4696:	03 d1       	rcall	.+518    	; 0x489e <__fp_split3>
    4698:	68 f3       	brcs	.-38     	; 0x4674 <__epilogue_restores__+0x36>
    469a:	09 2e       	mov	r0, r25
    469c:	05 2a       	or	r0, r21
    469e:	c1 f3       	breq	.-16     	; 0x4690 <__epilogue_restores__+0x52>
    46a0:	26 17       	cp	r18, r22
    46a2:	37 07       	cpc	r19, r23
    46a4:	48 07       	cpc	r20, r24
    46a6:	59 07       	cpc	r21, r25
    46a8:	38 f0       	brcs	.+14     	; 0x46b8 <atan2+0x26>
    46aa:	0e 2e       	mov	r0, r30
    46ac:	07 f8       	bld	r0, 7
    46ae:	e0 25       	eor	r30, r0
    46b0:	69 f0       	breq	.+26     	; 0x46cc <atan2+0x3a>
    46b2:	e0 25       	eor	r30, r0
    46b4:	e0 64       	ori	r30, 0x40	; 64
    46b6:	0a c0       	rjmp	.+20     	; 0x46cc <atan2+0x3a>
    46b8:	ef 63       	ori	r30, 0x3F	; 63
    46ba:	07 f8       	bld	r0, 7
    46bc:	00 94       	com	r0
    46be:	07 fa       	bst	r0, 7
    46c0:	db 01       	movw	r26, r22
    46c2:	b9 01       	movw	r22, r18
    46c4:	9d 01       	movw	r18, r26
    46c6:	dc 01       	movw	r26, r24
    46c8:	ca 01       	movw	r24, r20
    46ca:	ad 01       	movw	r20, r26
    46cc:	ef 93       	push	r30
    46ce:	41 d0       	rcall	.+130    	; 0x4752 <__divsf3_pse>
    46d0:	d5 d0       	rcall	.+426    	; 0x487c <__fp_round>
    46d2:	0a d0       	rcall	.+20     	; 0x46e8 <atan>
    46d4:	5f 91       	pop	r21
    46d6:	55 23       	and	r21, r21
    46d8:	31 f0       	breq	.+12     	; 0x46e6 <atan2+0x54>
    46da:	2b ed       	ldi	r18, 0xDB	; 219
    46dc:	3f e0       	ldi	r19, 0x0F	; 15
    46de:	49 e4       	ldi	r20, 0x49	; 73
    46e0:	50 fd       	sbrc	r21, 0
    46e2:	49 ec       	ldi	r20, 0xC9	; 201
    46e4:	71 c1       	rjmp	.+738    	; 0x49c8 <__addsf3>
    46e6:	08 95       	ret

000046e8 <atan>:
    46e8:	df 93       	push	r29
    46ea:	dd 27       	eor	r29, r29
    46ec:	b9 2f       	mov	r27, r25
    46ee:	bf 77       	andi	r27, 0x7F	; 127
    46f0:	40 e8       	ldi	r20, 0x80	; 128
    46f2:	5f e3       	ldi	r21, 0x3F	; 63
    46f4:	16 16       	cp	r1, r22
    46f6:	17 06       	cpc	r1, r23
    46f8:	48 07       	cpc	r20, r24
    46fa:	5b 07       	cpc	r21, r27
    46fc:	10 f4       	brcc	.+4      	; 0x4702 <atan+0x1a>
    46fe:	d9 2f       	mov	r29, r25
    4700:	f7 d0       	rcall	.+494    	; 0x48f0 <inverse>
    4702:	9f 93       	push	r25
    4704:	8f 93       	push	r24
    4706:	7f 93       	push	r23
    4708:	6f 93       	push	r22
    470a:	5a d1       	rcall	.+692    	; 0x49c0 <square>
    470c:	ee e4       	ldi	r30, 0x4E	; 78
    470e:	f1 e0       	ldi	r31, 0x01	; 1
    4710:	82 d0       	rcall	.+260    	; 0x4816 <__fp_powser>
    4712:	b4 d0       	rcall	.+360    	; 0x487c <__fp_round>
    4714:	2f 91       	pop	r18
    4716:	3f 91       	pop	r19
    4718:	4f 91       	pop	r20
    471a:	5f 91       	pop	r21
    471c:	fa d0       	rcall	.+500    	; 0x4912 <__mulsf3x>
    471e:	dd 23       	and	r29, r29
    4720:	49 f0       	breq	.+18     	; 0x4734 <atan+0x4c>
    4722:	90 58       	subi	r25, 0x80	; 128
    4724:	a2 ea       	ldi	r26, 0xA2	; 162
    4726:	2a ed       	ldi	r18, 0xDA	; 218
    4728:	3f e0       	ldi	r19, 0x0F	; 15
    472a:	49 ec       	ldi	r20, 0xC9	; 201
    472c:	5f e3       	ldi	r21, 0x3F	; 63
    472e:	d0 78       	andi	r29, 0x80	; 128
    4730:	5d 27       	eor	r21, r29
    4732:	5b d1       	rcall	.+694    	; 0x49ea <__addsf3x>
    4734:	df 91       	pop	r29
    4736:	a2 c0       	rjmp	.+324    	; 0x487c <__fp_round>
    4738:	9a d0       	rcall	.+308    	; 0x486e <__fp_pscB>
    473a:	40 f0       	brcs	.+16     	; 0x474c <atan+0x64>
    473c:	91 d0       	rcall	.+290    	; 0x4860 <__fp_pscA>
    473e:	30 f0       	brcs	.+12     	; 0x474c <atan+0x64>
    4740:	21 f4       	brne	.+8      	; 0x474a <atan+0x62>
    4742:	5f 3f       	cpi	r21, 0xFF	; 255
    4744:	19 f0       	breq	.+6      	; 0x474c <atan+0x64>
    4746:	5e c0       	rjmp	.+188    	; 0x4804 <__fp_inf>
    4748:	51 11       	cpse	r21, r1
    474a:	cc c0       	rjmp	.+408    	; 0x48e4 <__fp_szero>
    474c:	61 c0       	rjmp	.+194    	; 0x4810 <__fp_nan>

0000474e <__divsf3x>:
    474e:	a7 d0       	rcall	.+334    	; 0x489e <__fp_split3>
    4750:	98 f3       	brcs	.-26     	; 0x4738 <atan+0x50>

00004752 <__divsf3_pse>:
    4752:	99 23       	and	r25, r25
    4754:	c9 f3       	breq	.-14     	; 0x4748 <atan+0x60>
    4756:	55 23       	and	r21, r21
    4758:	b1 f3       	breq	.-20     	; 0x4746 <atan+0x5e>
    475a:	95 1b       	sub	r25, r21
    475c:	55 0b       	sbc	r21, r21
    475e:	bb 27       	eor	r27, r27
    4760:	aa 27       	eor	r26, r26
    4762:	62 17       	cp	r22, r18
    4764:	73 07       	cpc	r23, r19
    4766:	84 07       	cpc	r24, r20
    4768:	38 f0       	brcs	.+14     	; 0x4778 <__divsf3_pse+0x26>
    476a:	9f 5f       	subi	r25, 0xFF	; 255
    476c:	5f 4f       	sbci	r21, 0xFF	; 255
    476e:	22 0f       	add	r18, r18
    4770:	33 1f       	adc	r19, r19
    4772:	44 1f       	adc	r20, r20
    4774:	aa 1f       	adc	r26, r26
    4776:	a9 f3       	breq	.-22     	; 0x4762 <__divsf3_pse+0x10>
    4778:	33 d0       	rcall	.+102    	; 0x47e0 <__divsf3_pse+0x8e>
    477a:	0e 2e       	mov	r0, r30
    477c:	3a f0       	brmi	.+14     	; 0x478c <__divsf3_pse+0x3a>
    477e:	e0 e8       	ldi	r30, 0x80	; 128
    4780:	30 d0       	rcall	.+96     	; 0x47e2 <__divsf3_pse+0x90>
    4782:	91 50       	subi	r25, 0x01	; 1
    4784:	50 40       	sbci	r21, 0x00	; 0
    4786:	e6 95       	lsr	r30
    4788:	00 1c       	adc	r0, r0
    478a:	ca f7       	brpl	.-14     	; 0x477e <__divsf3_pse+0x2c>
    478c:	29 d0       	rcall	.+82     	; 0x47e0 <__divsf3_pse+0x8e>
    478e:	fe 2f       	mov	r31, r30
    4790:	27 d0       	rcall	.+78     	; 0x47e0 <__divsf3_pse+0x8e>
    4792:	66 0f       	add	r22, r22
    4794:	77 1f       	adc	r23, r23
    4796:	88 1f       	adc	r24, r24
    4798:	bb 1f       	adc	r27, r27
    479a:	26 17       	cp	r18, r22
    479c:	37 07       	cpc	r19, r23
    479e:	48 07       	cpc	r20, r24
    47a0:	ab 07       	cpc	r26, r27
    47a2:	b0 e8       	ldi	r27, 0x80	; 128
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <__divsf3_pse+0x56>
    47a6:	bb 0b       	sbc	r27, r27
    47a8:	80 2d       	mov	r24, r0
    47aa:	bf 01       	movw	r22, r30
    47ac:	ff 27       	eor	r31, r31
    47ae:	93 58       	subi	r25, 0x83	; 131
    47b0:	5f 4f       	sbci	r21, 0xFF	; 255
    47b2:	2a f0       	brmi	.+10     	; 0x47be <__divsf3_pse+0x6c>
    47b4:	9e 3f       	cpi	r25, 0xFE	; 254
    47b6:	51 05       	cpc	r21, r1
    47b8:	68 f0       	brcs	.+26     	; 0x47d4 <__divsf3_pse+0x82>
    47ba:	24 c0       	rjmp	.+72     	; 0x4804 <__fp_inf>
    47bc:	93 c0       	rjmp	.+294    	; 0x48e4 <__fp_szero>
    47be:	5f 3f       	cpi	r21, 0xFF	; 255
    47c0:	ec f3       	brlt	.-6      	; 0x47bc <__divsf3_pse+0x6a>
    47c2:	98 3e       	cpi	r25, 0xE8	; 232
    47c4:	dc f3       	brlt	.-10     	; 0x47bc <__divsf3_pse+0x6a>
    47c6:	86 95       	lsr	r24
    47c8:	77 95       	ror	r23
    47ca:	67 95       	ror	r22
    47cc:	b7 95       	ror	r27
    47ce:	f7 95       	ror	r31
    47d0:	9f 5f       	subi	r25, 0xFF	; 255
    47d2:	c9 f7       	brne	.-14     	; 0x47c6 <__divsf3_pse+0x74>
    47d4:	88 0f       	add	r24, r24
    47d6:	91 1d       	adc	r25, r1
    47d8:	96 95       	lsr	r25
    47da:	87 95       	ror	r24
    47dc:	97 f9       	bld	r25, 7
    47de:	08 95       	ret
    47e0:	e1 e0       	ldi	r30, 0x01	; 1
    47e2:	66 0f       	add	r22, r22
    47e4:	77 1f       	adc	r23, r23
    47e6:	88 1f       	adc	r24, r24
    47e8:	bb 1f       	adc	r27, r27
    47ea:	62 17       	cp	r22, r18
    47ec:	73 07       	cpc	r23, r19
    47ee:	84 07       	cpc	r24, r20
    47f0:	ba 07       	cpc	r27, r26
    47f2:	20 f0       	brcs	.+8      	; 0x47fc <__divsf3_pse+0xaa>
    47f4:	62 1b       	sub	r22, r18
    47f6:	73 0b       	sbc	r23, r19
    47f8:	84 0b       	sbc	r24, r20
    47fa:	ba 0b       	sbc	r27, r26
    47fc:	ee 1f       	adc	r30, r30
    47fe:	88 f7       	brcc	.-30     	; 0x47e2 <__divsf3_pse+0x90>
    4800:	e0 95       	com	r30
    4802:	08 95       	ret

00004804 <__fp_inf>:
    4804:	97 f9       	bld	r25, 7
    4806:	9f 67       	ori	r25, 0x7F	; 127
    4808:	80 e8       	ldi	r24, 0x80	; 128
    480a:	70 e0       	ldi	r23, 0x00	; 0
    480c:	60 e0       	ldi	r22, 0x00	; 0
    480e:	08 95       	ret

00004810 <__fp_nan>:
    4810:	9f ef       	ldi	r25, 0xFF	; 255
    4812:	80 ec       	ldi	r24, 0xC0	; 192
    4814:	08 95       	ret

00004816 <__fp_powser>:
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	1f 93       	push	r17
    481c:	0f 93       	push	r16
    481e:	ff 92       	push	r15
    4820:	ef 92       	push	r14
    4822:	df 92       	push	r13
    4824:	7b 01       	movw	r14, r22
    4826:	8c 01       	movw	r16, r24
    4828:	68 94       	set
    482a:	05 c0       	rjmp	.+10     	; 0x4836 <__fp_powser+0x20>
    482c:	da 2e       	mov	r13, r26
    482e:	ef 01       	movw	r28, r30
    4830:	70 d0       	rcall	.+224    	; 0x4912 <__mulsf3x>
    4832:	fe 01       	movw	r30, r28
    4834:	e8 94       	clt
    4836:	a5 91       	lpm	r26, Z+
    4838:	25 91       	lpm	r18, Z+
    483a:	35 91       	lpm	r19, Z+
    483c:	45 91       	lpm	r20, Z+
    483e:	55 91       	lpm	r21, Z+
    4840:	ae f3       	brts	.-22     	; 0x482c <__fp_powser+0x16>
    4842:	ef 01       	movw	r28, r30
    4844:	d2 d0       	rcall	.+420    	; 0x49ea <__addsf3x>
    4846:	fe 01       	movw	r30, r28
    4848:	97 01       	movw	r18, r14
    484a:	a8 01       	movw	r20, r16
    484c:	da 94       	dec	r13
    484e:	79 f7       	brne	.-34     	; 0x482e <__fp_powser+0x18>
    4850:	df 90       	pop	r13
    4852:	ef 90       	pop	r14
    4854:	ff 90       	pop	r15
    4856:	0f 91       	pop	r16
    4858:	1f 91       	pop	r17
    485a:	cf 91       	pop	r28
    485c:	df 91       	pop	r29
    485e:	08 95       	ret

00004860 <__fp_pscA>:
    4860:	00 24       	eor	r0, r0
    4862:	0a 94       	dec	r0
    4864:	16 16       	cp	r1, r22
    4866:	17 06       	cpc	r1, r23
    4868:	18 06       	cpc	r1, r24
    486a:	09 06       	cpc	r0, r25
    486c:	08 95       	ret

0000486e <__fp_pscB>:
    486e:	00 24       	eor	r0, r0
    4870:	0a 94       	dec	r0
    4872:	12 16       	cp	r1, r18
    4874:	13 06       	cpc	r1, r19
    4876:	14 06       	cpc	r1, r20
    4878:	05 06       	cpc	r0, r21
    487a:	08 95       	ret

0000487c <__fp_round>:
    487c:	09 2e       	mov	r0, r25
    487e:	03 94       	inc	r0
    4880:	00 0c       	add	r0, r0
    4882:	11 f4       	brne	.+4      	; 0x4888 <__fp_round+0xc>
    4884:	88 23       	and	r24, r24
    4886:	52 f0       	brmi	.+20     	; 0x489c <__fp_round+0x20>
    4888:	bb 0f       	add	r27, r27
    488a:	40 f4       	brcc	.+16     	; 0x489c <__fp_round+0x20>
    488c:	bf 2b       	or	r27, r31
    488e:	11 f4       	brne	.+4      	; 0x4894 <__fp_round+0x18>
    4890:	60 ff       	sbrs	r22, 0
    4892:	04 c0       	rjmp	.+8      	; 0x489c <__fp_round+0x20>
    4894:	6f 5f       	subi	r22, 0xFF	; 255
    4896:	7f 4f       	sbci	r23, 0xFF	; 255
    4898:	8f 4f       	sbci	r24, 0xFF	; 255
    489a:	9f 4f       	sbci	r25, 0xFF	; 255
    489c:	08 95       	ret

0000489e <__fp_split3>:
    489e:	57 fd       	sbrc	r21, 7
    48a0:	90 58       	subi	r25, 0x80	; 128
    48a2:	44 0f       	add	r20, r20
    48a4:	55 1f       	adc	r21, r21
    48a6:	59 f0       	breq	.+22     	; 0x48be <__fp_splitA+0x10>
    48a8:	5f 3f       	cpi	r21, 0xFF	; 255
    48aa:	71 f0       	breq	.+28     	; 0x48c8 <__fp_splitA+0x1a>
    48ac:	47 95       	ror	r20

000048ae <__fp_splitA>:
    48ae:	88 0f       	add	r24, r24
    48b0:	97 fb       	bst	r25, 7
    48b2:	99 1f       	adc	r25, r25
    48b4:	61 f0       	breq	.+24     	; 0x48ce <__fp_splitA+0x20>
    48b6:	9f 3f       	cpi	r25, 0xFF	; 255
    48b8:	79 f0       	breq	.+30     	; 0x48d8 <__fp_splitA+0x2a>
    48ba:	87 95       	ror	r24
    48bc:	08 95       	ret
    48be:	12 16       	cp	r1, r18
    48c0:	13 06       	cpc	r1, r19
    48c2:	14 06       	cpc	r1, r20
    48c4:	55 1f       	adc	r21, r21
    48c6:	f2 cf       	rjmp	.-28     	; 0x48ac <__fp_split3+0xe>
    48c8:	46 95       	lsr	r20
    48ca:	f1 df       	rcall	.-30     	; 0x48ae <__fp_splitA>
    48cc:	08 c0       	rjmp	.+16     	; 0x48de <__fp_splitA+0x30>
    48ce:	16 16       	cp	r1, r22
    48d0:	17 06       	cpc	r1, r23
    48d2:	18 06       	cpc	r1, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	f1 cf       	rjmp	.-30     	; 0x48ba <__fp_splitA+0xc>
    48d8:	86 95       	lsr	r24
    48da:	71 05       	cpc	r23, r1
    48dc:	61 05       	cpc	r22, r1
    48de:	08 94       	sec
    48e0:	08 95       	ret

000048e2 <__fp_zero>:
    48e2:	e8 94       	clt

000048e4 <__fp_szero>:
    48e4:	bb 27       	eor	r27, r27
    48e6:	66 27       	eor	r22, r22
    48e8:	77 27       	eor	r23, r23
    48ea:	cb 01       	movw	r24, r22
    48ec:	97 f9       	bld	r25, 7
    48ee:	08 95       	ret

000048f0 <inverse>:
    48f0:	9b 01       	movw	r18, r22
    48f2:	ac 01       	movw	r20, r24
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	80 e8       	ldi	r24, 0x80	; 128
    48fa:	9f e3       	ldi	r25, 0x3F	; 63
    48fc:	c9 c0       	rjmp	.+402    	; 0x4a90 <__divsf3>
    48fe:	b0 df       	rcall	.-160    	; 0x4860 <__fp_pscA>
    4900:	28 f0       	brcs	.+10     	; 0x490c <inverse+0x1c>
    4902:	b5 df       	rcall	.-150    	; 0x486e <__fp_pscB>
    4904:	18 f0       	brcs	.+6      	; 0x490c <inverse+0x1c>
    4906:	95 23       	and	r25, r21
    4908:	09 f0       	breq	.+2      	; 0x490c <inverse+0x1c>
    490a:	7c cf       	rjmp	.-264    	; 0x4804 <__fp_inf>
    490c:	81 cf       	rjmp	.-254    	; 0x4810 <__fp_nan>
    490e:	11 24       	eor	r1, r1
    4910:	e9 cf       	rjmp	.-46     	; 0x48e4 <__fp_szero>

00004912 <__mulsf3x>:
    4912:	c5 df       	rcall	.-118    	; 0x489e <__fp_split3>
    4914:	a0 f3       	brcs	.-24     	; 0x48fe <inverse+0xe>

00004916 <__mulsf3_pse>:
    4916:	95 9f       	mul	r25, r21
    4918:	d1 f3       	breq	.-12     	; 0x490e <inverse+0x1e>
    491a:	95 0f       	add	r25, r21
    491c:	50 e0       	ldi	r21, 0x00	; 0
    491e:	55 1f       	adc	r21, r21
    4920:	62 9f       	mul	r22, r18
    4922:	f0 01       	movw	r30, r0
    4924:	72 9f       	mul	r23, r18
    4926:	bb 27       	eor	r27, r27
    4928:	f0 0d       	add	r31, r0
    492a:	b1 1d       	adc	r27, r1
    492c:	63 9f       	mul	r22, r19
    492e:	aa 27       	eor	r26, r26
    4930:	f0 0d       	add	r31, r0
    4932:	b1 1d       	adc	r27, r1
    4934:	aa 1f       	adc	r26, r26
    4936:	64 9f       	mul	r22, r20
    4938:	66 27       	eor	r22, r22
    493a:	b0 0d       	add	r27, r0
    493c:	a1 1d       	adc	r26, r1
    493e:	66 1f       	adc	r22, r22
    4940:	82 9f       	mul	r24, r18
    4942:	22 27       	eor	r18, r18
    4944:	b0 0d       	add	r27, r0
    4946:	a1 1d       	adc	r26, r1
    4948:	62 1f       	adc	r22, r18
    494a:	73 9f       	mul	r23, r19
    494c:	b0 0d       	add	r27, r0
    494e:	a1 1d       	adc	r26, r1
    4950:	62 1f       	adc	r22, r18
    4952:	83 9f       	mul	r24, r19
    4954:	a0 0d       	add	r26, r0
    4956:	61 1d       	adc	r22, r1
    4958:	22 1f       	adc	r18, r18
    495a:	74 9f       	mul	r23, r20
    495c:	33 27       	eor	r19, r19
    495e:	a0 0d       	add	r26, r0
    4960:	61 1d       	adc	r22, r1
    4962:	23 1f       	adc	r18, r19
    4964:	84 9f       	mul	r24, r20
    4966:	60 0d       	add	r22, r0
    4968:	21 1d       	adc	r18, r1
    496a:	82 2f       	mov	r24, r18
    496c:	76 2f       	mov	r23, r22
    496e:	6a 2f       	mov	r22, r26
    4970:	11 24       	eor	r1, r1
    4972:	9f 57       	subi	r25, 0x7F	; 127
    4974:	50 40       	sbci	r21, 0x00	; 0
    4976:	8a f0       	brmi	.+34     	; 0x499a <__mulsf3_pse+0x84>
    4978:	e1 f0       	breq	.+56     	; 0x49b2 <__mulsf3_pse+0x9c>
    497a:	88 23       	and	r24, r24
    497c:	4a f0       	brmi	.+18     	; 0x4990 <__mulsf3_pse+0x7a>
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	bb 1f       	adc	r27, r27
    4984:	66 1f       	adc	r22, r22
    4986:	77 1f       	adc	r23, r23
    4988:	88 1f       	adc	r24, r24
    498a:	91 50       	subi	r25, 0x01	; 1
    498c:	50 40       	sbci	r21, 0x00	; 0
    498e:	a9 f7       	brne	.-22     	; 0x497a <__mulsf3_pse+0x64>
    4990:	9e 3f       	cpi	r25, 0xFE	; 254
    4992:	51 05       	cpc	r21, r1
    4994:	70 f0       	brcs	.+28     	; 0x49b2 <__mulsf3_pse+0x9c>
    4996:	36 cf       	rjmp	.-404    	; 0x4804 <__fp_inf>
    4998:	a5 cf       	rjmp	.-182    	; 0x48e4 <__fp_szero>
    499a:	5f 3f       	cpi	r21, 0xFF	; 255
    499c:	ec f3       	brlt	.-6      	; 0x4998 <__mulsf3_pse+0x82>
    499e:	98 3e       	cpi	r25, 0xE8	; 232
    49a0:	dc f3       	brlt	.-10     	; 0x4998 <__mulsf3_pse+0x82>
    49a2:	86 95       	lsr	r24
    49a4:	77 95       	ror	r23
    49a6:	67 95       	ror	r22
    49a8:	b7 95       	ror	r27
    49aa:	f7 95       	ror	r31
    49ac:	e7 95       	ror	r30
    49ae:	9f 5f       	subi	r25, 0xFF	; 255
    49b0:	c1 f7       	brne	.-16     	; 0x49a2 <__mulsf3_pse+0x8c>
    49b2:	fe 2b       	or	r31, r30
    49b4:	88 0f       	add	r24, r24
    49b6:	91 1d       	adc	r25, r1
    49b8:	96 95       	lsr	r25
    49ba:	87 95       	ror	r24
    49bc:	97 f9       	bld	r25, 7
    49be:	08 95       	ret

000049c0 <square>:
    49c0:	9b 01       	movw	r18, r22
    49c2:	ac 01       	movw	r20, r24
    49c4:	ac ca       	rjmp	.-2728   	; 0x3f1e <__mulsf3>

000049c6 <__subsf3>:
    49c6:	50 58       	subi	r21, 0x80	; 128

000049c8 <__addsf3>:
    49c8:	bb 27       	eor	r27, r27
    49ca:	aa 27       	eor	r26, r26
    49cc:	0e d0       	rcall	.+28     	; 0x49ea <__addsf3x>
    49ce:	56 cf       	rjmp	.-340    	; 0x487c <__fp_round>
    49d0:	47 df       	rcall	.-370    	; 0x4860 <__fp_pscA>
    49d2:	30 f0       	brcs	.+12     	; 0x49e0 <__addsf3+0x18>
    49d4:	4c df       	rcall	.-360    	; 0x486e <__fp_pscB>
    49d6:	20 f0       	brcs	.+8      	; 0x49e0 <__addsf3+0x18>
    49d8:	31 f4       	brne	.+12     	; 0x49e6 <__addsf3+0x1e>
    49da:	9f 3f       	cpi	r25, 0xFF	; 255
    49dc:	11 f4       	brne	.+4      	; 0x49e2 <__addsf3+0x1a>
    49de:	1e f4       	brtc	.+6      	; 0x49e6 <__addsf3+0x1e>
    49e0:	17 cf       	rjmp	.-466    	; 0x4810 <__fp_nan>
    49e2:	0e f4       	brtc	.+2      	; 0x49e6 <__addsf3+0x1e>
    49e4:	e0 95       	com	r30
    49e6:	e7 fb       	bst	r30, 7
    49e8:	0d cf       	rjmp	.-486    	; 0x4804 <__fp_inf>

000049ea <__addsf3x>:
    49ea:	e9 2f       	mov	r30, r25
    49ec:	58 df       	rcall	.-336    	; 0x489e <__fp_split3>
    49ee:	80 f3       	brcs	.-32     	; 0x49d0 <__addsf3+0x8>
    49f0:	ba 17       	cp	r27, r26
    49f2:	62 07       	cpc	r22, r18
    49f4:	73 07       	cpc	r23, r19
    49f6:	84 07       	cpc	r24, r20
    49f8:	95 07       	cpc	r25, r21
    49fa:	18 f0       	brcs	.+6      	; 0x4a02 <__addsf3x+0x18>
    49fc:	71 f4       	brne	.+28     	; 0x4a1a <__addsf3x+0x30>
    49fe:	9e f5       	brtc	.+102    	; 0x4a66 <__addsf3x+0x7c>
    4a00:	70 cf       	rjmp	.-288    	; 0x48e2 <__fp_zero>
    4a02:	0e f4       	brtc	.+2      	; 0x4a06 <__addsf3x+0x1c>
    4a04:	e0 95       	com	r30
    4a06:	0b 2e       	mov	r0, r27
    4a08:	ba 2f       	mov	r27, r26
    4a0a:	a0 2d       	mov	r26, r0
    4a0c:	0b 01       	movw	r0, r22
    4a0e:	b9 01       	movw	r22, r18
    4a10:	90 01       	movw	r18, r0
    4a12:	0c 01       	movw	r0, r24
    4a14:	ca 01       	movw	r24, r20
    4a16:	a0 01       	movw	r20, r0
    4a18:	11 24       	eor	r1, r1
    4a1a:	ff 27       	eor	r31, r31
    4a1c:	59 1b       	sub	r21, r25
    4a1e:	99 f0       	breq	.+38     	; 0x4a46 <__addsf3x+0x5c>
    4a20:	59 3f       	cpi	r21, 0xF9	; 249
    4a22:	50 f4       	brcc	.+20     	; 0x4a38 <__addsf3x+0x4e>
    4a24:	50 3e       	cpi	r21, 0xE0	; 224
    4a26:	68 f1       	brcs	.+90     	; 0x4a82 <__addsf3x+0x98>
    4a28:	1a 16       	cp	r1, r26
    4a2a:	f0 40       	sbci	r31, 0x00	; 0
    4a2c:	a2 2f       	mov	r26, r18
    4a2e:	23 2f       	mov	r18, r19
    4a30:	34 2f       	mov	r19, r20
    4a32:	44 27       	eor	r20, r20
    4a34:	58 5f       	subi	r21, 0xF8	; 248
    4a36:	f3 cf       	rjmp	.-26     	; 0x4a1e <__addsf3x+0x34>
    4a38:	46 95       	lsr	r20
    4a3a:	37 95       	ror	r19
    4a3c:	27 95       	ror	r18
    4a3e:	a7 95       	ror	r26
    4a40:	f0 40       	sbci	r31, 0x00	; 0
    4a42:	53 95       	inc	r21
    4a44:	c9 f7       	brne	.-14     	; 0x4a38 <__addsf3x+0x4e>
    4a46:	7e f4       	brtc	.+30     	; 0x4a66 <__addsf3x+0x7c>
    4a48:	1f 16       	cp	r1, r31
    4a4a:	ba 0b       	sbc	r27, r26
    4a4c:	62 0b       	sbc	r22, r18
    4a4e:	73 0b       	sbc	r23, r19
    4a50:	84 0b       	sbc	r24, r20
    4a52:	ba f0       	brmi	.+46     	; 0x4a82 <__addsf3x+0x98>
    4a54:	91 50       	subi	r25, 0x01	; 1
    4a56:	a1 f0       	breq	.+40     	; 0x4a80 <__addsf3x+0x96>
    4a58:	ff 0f       	add	r31, r31
    4a5a:	bb 1f       	adc	r27, r27
    4a5c:	66 1f       	adc	r22, r22
    4a5e:	77 1f       	adc	r23, r23
    4a60:	88 1f       	adc	r24, r24
    4a62:	c2 f7       	brpl	.-16     	; 0x4a54 <__addsf3x+0x6a>
    4a64:	0e c0       	rjmp	.+28     	; 0x4a82 <__addsf3x+0x98>
    4a66:	ba 0f       	add	r27, r26
    4a68:	62 1f       	adc	r22, r18
    4a6a:	73 1f       	adc	r23, r19
    4a6c:	84 1f       	adc	r24, r20
    4a6e:	48 f4       	brcc	.+18     	; 0x4a82 <__addsf3x+0x98>
    4a70:	87 95       	ror	r24
    4a72:	77 95       	ror	r23
    4a74:	67 95       	ror	r22
    4a76:	b7 95       	ror	r27
    4a78:	f7 95       	ror	r31
    4a7a:	9e 3f       	cpi	r25, 0xFE	; 254
    4a7c:	08 f0       	brcs	.+2      	; 0x4a80 <__addsf3x+0x96>
    4a7e:	b3 cf       	rjmp	.-154    	; 0x49e6 <__addsf3+0x1e>
    4a80:	93 95       	inc	r25
    4a82:	88 0f       	add	r24, r24
    4a84:	08 f0       	brcs	.+2      	; 0x4a88 <__addsf3x+0x9e>
    4a86:	99 27       	eor	r25, r25
    4a88:	ee 0f       	add	r30, r30
    4a8a:	97 95       	ror	r25
    4a8c:	87 95       	ror	r24
    4a8e:	08 95       	ret

00004a90 <__divsf3>:
    4a90:	5e de       	rcall	.-836    	; 0x474e <__divsf3x>
    4a92:	f4 ce       	rjmp	.-536    	; 0x487c <__fp_round>

00004a94 <_exit>:
    4a94:	ff cf       	rjmp	.-2      	; 0x4a94 <_exit>
