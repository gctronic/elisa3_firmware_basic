
ElisaII-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800200  000043ac  00004440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  00800322  00800322  00004562  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  00004564  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  0000682c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  00006ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d8a  00000000  00000000  000070f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d0b  00000000  00000000  00007e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000164e  00000000  00000000  0000bb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ddb  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000620  00000000  00000000  00010fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000dc1  00000000  00000000  000115d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a7a  00000000  00000000  00012395  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000177  00000000  00000000  00013e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001c0  00000000  00000000  00013f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__vector_10>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_13>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_25>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_29>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      80:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_32>
      84:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_33>
      88:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      8c:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_35>
      90:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      94:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      98:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      9c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a8:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_42>
      ac:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_43>
      b0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      b4:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_45>
      b8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      bc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      cc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      dc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ec ea       	ldi	r30, 0xAC	; 172
     12a:	f3 e4       	ldi	r31, 0x43	; 67
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a2 32       	cpi	r26, 0x22	; 34
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	14 e0       	ldi	r17, 0x04	; 4
     13a:	a2 e2       	ldi	r26, 0x22	; 34
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a1 31       	cpi	r26, 0x11	; 17
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
     14c:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	86 60       	ori	r24, 0x06	; 6
     15c:	80 83       	st	Z, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     15e:	ac e7       	ldi	r26, 0x7C	; 124
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	8c 91       	ld	r24, X
     164:	80 64       	ori	r24, 0x40	; 64
     166:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     168:	80 81       	ld	r24, Z
     16a:	80 62       	ori	r24, 0x20	; 32
     16c:	80 83       	st	Z, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     16e:	ab e7       	ldi	r26, 0x7B	; 123
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	8c 91       	ld	r24, X
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     178:	80 81       	ld	r24, Z
     17a:	88 60       	ori	r24, 0x08	; 8
     17c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     184:	80 81       	ld	r24, Z
     186:	80 64       	ori	r24, 0x40	; 64
     188:	80 83       	st	Z, r24

}
     18a:	08 95       	ret

0000018c <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	0b b6       	in	r0, 0x3b	; 59
     196:	0f 92       	push	r0
     198:	11 24       	eor	r1, r1
     19a:	2f 93       	push	r18
     19c:	3f 93       	push	r19
     19e:	4f 93       	push	r20
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
	PORTB &= ~(1 << 7);
     1a8:	2f 98       	cbi	0x05, 7	; 5

//	PORTA = 0x00;	// always turn off the pulses
//	PORTJ &= 0xF0;

	delayCounter++;
     1aa:	80 91 de 03 	lds	r24, 0x03DE
     1ae:	90 91 df 03 	lds	r25, 0x03DF
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	90 93 df 03 	sts	0x03DF, r25
     1b8:	80 93 de 03 	sts	0x03DE, r24

	int value = ADCL;			// must be read first!!
     1bc:	20 91 78 00 	lds	r18, 0x0078
     1c0:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     1c2:	40 91 79 00 	lds	r20, 0x0079
     1c6:	94 2f       	mov	r25, r20
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	28 2b       	or	r18, r24
     1cc:	39 2b       	or	r19, r25

	// save the last data

	switch(adcSaveDataTo) {
     1ce:	80 91 61 03 	lds	r24, 0x0361
     1d2:	82 30       	cpi	r24, 0x02	; 2
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <__vector_29+0x4c>
     1d6:	0d c1       	rjmp	.+538    	; 0x3f2 <__vector_29+0x266>
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	08 f4       	brcc	.+2      	; 0x1de <__vector_29+0x52>
     1dc:	3f c0       	rjmp	.+126    	; 0x25c <__vector_29+0xd0>
     1de:	83 30       	cpi	r24, 0x03	; 3
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <__vector_29+0x58>
     1e2:	fa c0       	rjmp	.+500    	; 0x3d8 <__vector_29+0x24c>
     1e4:	84 30       	cpi	r24, 0x04	; 4
     1e6:	09 f4       	brne	.+2      	; 0x1ea <__vector_29+0x5e>
     1e8:	d0 c0       	rjmp	.+416    	; 0x38a <__vector_29+0x1fe>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     1ea:	80 91 62 03 	lds	r24, 0x0362
     1ee:	82 30       	cpi	r24, 0x02	; 2
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <__vector_29+0x68>
     1f2:	56 c0       	rjmp	.+172    	; 0x2a0 <__vector_29+0x114>
     1f4:	83 30       	cpi	r24, 0x03	; 3
     1f6:	08 f0       	brcs	.+2      	; 0x1fa <__vector_29+0x6e>
     1f8:	76 c0       	rjmp	.+236    	; 0x2e6 <__vector_29+0x15a>
     1fa:	88 23       	and	r24, r24
     1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_29+0x74>
     1fe:	a4 c0       	rjmp	.+328    	; 0x348 <__vector_29+0x1bc>

		case 0:
			currentAdChannel = currentProx>>1;
     200:	80 91 2c 03 	lds	r24, 0x032C
     204:	86 95       	lsr	r24
     206:	80 93 2b 03 	sts	0x032B, r24
				} else {
					PORTJ = (1 << ((currentProx-16)>>1));
				}
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
     20a:	80 91 63 03 	lds	r24, 0x0363
     20e:	88 23       	and	r24, r24
     210:	09 f0       	breq	.+2      	; 0x214 <__vector_29+0x88>
     212:	03 c1       	rjmp	.+518    	; 0x41a <__vector_29+0x28e>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 62 03 	sts	0x0362, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     220:	80 91 2b 03 	lds	r24, 0x032B
     224:	88 30       	cpi	r24, 0x08	; 8
     226:	08 f4       	brcc	.+2      	; 0x22a <__vector_29+0x9e>
     228:	53 c0       	rjmp	.+166    	; 0x2d0 <__vector_29+0x144>
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     22a:	80 91 7b 00 	lds	r24, 0x007B
     22e:	88 60       	ori	r24, 0x08	; 8
     230:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
     234:	80 91 2b 03 	lds	r24, 0x032B
     238:	88 5c       	subi	r24, 0xC8	; 200
     23a:	80 93 7c 00 	sts	0x007C, r24
	}


	PORTB |= (1 << 7);
     23e:	2f 9a       	sbi	0x05, 7	; 5

}
     240:	ff 91       	pop	r31
     242:	ef 91       	pop	r30
     244:	9f 91       	pop	r25
     246:	8f 91       	pop	r24
     248:	4f 91       	pop	r20
     24a:	3f 91       	pop	r19
     24c:	2f 91       	pop	r18
     24e:	0f 90       	pop	r0
     250:	0b be       	out	0x3b, r0	; 59
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     25c:	88 23       	and	r24, r24
     25e:	09 f0       	breq	.+2      	; 0x262 <__vector_29+0xd6>
     260:	84 c0       	rjmp	.+264    	; 0x36a <__vector_29+0x1de>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     262:	80 91 2c 03 	lds	r24, 0x032C
     266:	8e 30       	cpi	r24, 0x0E	; 14
     268:	09 f4       	brne	.+2      	; 0x26c <__vector_29+0xe0>
     26a:	fd c0       	rjmp	.+506    	; 0x466 <__vector_29+0x2da>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     26c:	e8 2f       	mov	r30, r24
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ee 0f       	add	r30, r30
     272:	ff 1f       	adc	r31, r31
     274:	ef 5c       	subi	r30, 0xCF	; 207
     276:	fc 4f       	sbci	r31, 0xFC	; 252
     278:	31 83       	std	Z+1, r19	; 0x01
     27a:	20 83       	st	Z, r18
				//currentProx = (currentProx+1)%24;
			}
			currentProx++;
     27c:	8f 5f       	subi	r24, 0xFF	; 255
     27e:	80 93 2c 03 	sts	0x032C, r24
			if(currentProx > 23) {
     282:	88 31       	cpi	r24, 0x18	; 24
     284:	10 f0       	brcs	.+4      	; 0x28a <__vector_29+0xfe>
				currentProx = 0;
     286:	10 92 2c 03 	sts	0x032C, r1
			}
			PORTA = 0x00;	// always turn off the pulses
     28a:	12 b8       	out	0x02, r1	; 2
			PORTJ &= 0xF0;
     28c:	80 91 05 01 	lds	r24, 0x0105
     290:	80 7f       	andi	r24, 0xF0	; 240
     292:	80 93 05 01 	sts	0x0105, r24
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     296:	80 91 62 03 	lds	r24, 0x0362
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	09 f0       	breq	.+2      	; 0x2a0 <__vector_29+0x114>
     29e:	aa cf       	rjmp	.-172    	; 0x1f4 <__vector_29+0x68>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:
			currentAdChannel = currentMotRightChannel;
     2a0:	80 91 2e 03 	lds	r24, 0x032E
     2a4:	80 93 2b 03 	sts	0x032B, r24
			rightChannelPhase = rightMotorPhase;
     2a8:	80 91 2f 03 	lds	r24, 0x032F
     2ac:	80 93 63 03 	sts	0x0363, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     2b0:	80 91 64 03 	lds	r24, 0x0364
     2b4:	88 23       	and	r24, r24
     2b6:	09 f0       	breq	.+2      	; 0x2ba <__vector_29+0x12e>
     2b8:	bb c0       	rjmp	.+374    	; 0x430 <__vector_29+0x2a4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	80 93 62 03 	sts	0x0362, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     2c6:	80 91 2b 03 	lds	r24, 0x032B
     2ca:	88 30       	cpi	r24, 0x08	; 8
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <__vector_29+0x144>
     2ce:	ad cf       	rjmp	.-166    	; 0x22a <__vector_29+0x9e>
		ADCSRB &= ~(1 << MUX5);
     2d0:	80 91 7b 00 	lds	r24, 0x007B
     2d4:	87 7f       	andi	r24, 0xF7	; 247
     2d6:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
     2da:	80 91 2b 03 	lds	r24, 0x032B
     2de:	80 5c       	subi	r24, 0xC0	; 192
     2e0:	80 93 7c 00 	sts	0x007C, r24
     2e4:	ac cf       	rjmp	.-168    	; 0x23e <__vector_29+0xb2>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     2e6:	83 30       	cpi	r24, 0x03	; 3
     2e8:	09 f4       	brne	.+2      	; 0x2ec <__vector_29+0x160>
     2ea:	63 c0       	rjmp	.+198    	; 0x3b2 <__vector_29+0x226>
     2ec:	84 30       	cpi	r24, 0x04	; 4
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <__vector_29+0x166>
     2f0:	97 cf       	rjmp	.-210    	; 0x220 <__vector_29+0x94>
			}
			adcSamplingState = 4;
			break;

		case 4:
			currentAdChannel = currentMotRightChannel;	
     2f2:	90 91 2e 03 	lds	r25, 0x032E
     2f6:	90 93 2b 03 	sts	0x032B, r25
			rightChannelPhase = rightMotorPhase;	
     2fa:	90 91 2f 03 	lds	r25, 0x032F
     2fe:	90 93 63 03 	sts	0x0363, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     302:	90 91 64 03 	lds	r25, 0x0364
     306:	99 23       	and	r25, r25
     308:	09 f0       	breq	.+2      	; 0x30c <__vector_29+0x180>
     30a:	8f c0       	rjmp	.+286    	; 0x42a <__vector_29+0x29e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     312:	10 92 62 03 	sts	0x0362, r1
			
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
     316:	20 91 2c 03 	lds	r18, 0x032C
     31a:	2e 30       	cpi	r18, 0x0E	; 14
     31c:	09 f4       	brne	.+2      	; 0x320 <__vector_29+0x194>
     31e:	99 c0       	rjmp	.+306    	; 0x452 <__vector_29+0x2c6>
					measBattery=2;
					PORTC |= (1 << 6);	// sense enable on
				}

				if(currentProx & 0x01) {
     320:	82 2f       	mov	r24, r18
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	20 ff       	sbrs	r18, 0
     326:	7c cf       	rjmp	.-264    	; 0x220 <__vector_29+0x94>
					if(currentProx < 16) {
     328:	20 31       	cpi	r18, 0x10	; 16
     32a:	08 f0       	brcs	.+2      	; 0x32e <__vector_29+0x1a2>
     32c:	85 c0       	rjmp	.+266    	; 0x438 <__vector_29+0x2ac>
						if(currentProx==14 && measBattery==1) {
     32e:	2e 30       	cpi	r18, 0x0E	; 14
     330:	09 f4       	brne	.+2      	; 0x334 <__vector_29+0x1a8>
     332:	a6 c0       	rjmp	.+332    	; 0x480 <__vector_29+0x2f4>
							measBattery=2;
							PORTC |= (1 << 6);	// sense enable on
						} else {
							//PORTA = 0x00;	// already done at the ISR beginning...
							PORTA = (1 << (currentProx>>1));
     334:	26 95       	lsr	r18
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 c0       	rjmp	.+4      	; 0x340 <__vector_29+0x1b4>
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	2a 95       	dec	r18
     342:	e2 f7       	brpl	.-8      	; 0x33c <__vector_29+0x1b0>
     344:	82 b9       	out	0x02, r24	; 2
     346:	6c cf       	rjmp	.-296    	; 0x220 <__vector_29+0x94>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	09 f0       	breq	.+2      	; 0x34e <__vector_29+0x1c2>
     34c:	69 cf       	rjmp	.-302    	; 0x220 <__vector_29+0x94>
			}
			adcSamplingState = 1;
			break;

		case 1:
			currentAdChannel = currentMotLeftChannel;
     34e:	80 91 2d 03 	lds	r24, 0x032D
     352:	80 93 2b 03 	sts	0x032B, r24
			leftChannelPhase = leftMotorPhase;
     356:	80 91 30 03 	lds	r24, 0x0330
     35a:	80 93 64 03 	sts	0x0364, r24
			adcSaveDataTo = SAVE_TO_PROX;
     35e:	10 92 61 03 	sts	0x0361, r1
			adcSamplingState = 2;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 93 62 03 	sts	0x0362, r24
			break;
     368:	5b cf       	rjmp	.-330    	; 0x220 <__vector_29+0x94>
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	09 f0       	breq	.+2      	; 0x370 <__vector_29+0x1e4>
     36e:	3d cf       	rjmp	.-390    	; 0x1ea <__vector_29+0x5e>
			PORTA = 0x00;	// always turn off the pulses
			PORTJ &= 0xF0;
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     370:	80 91 6a 03 	lds	r24, 0x036A
     374:	90 91 6b 03 	lds	r25, 0x036B
     378:	82 0f       	add	r24, r18
     37a:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     37c:	96 95       	lsr	r25
     37e:	87 95       	ror	r24
     380:	90 93 6b 03 	sts	0x036B, r25
     384:	80 93 6a 03 	sts	0x036A, r24
			break;
     388:	30 cf       	rjmp	.-416    	; 0x1ea <__vector_29+0x5e>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     38a:	80 91 78 03 	lds	r24, 0x0378
     38e:	90 91 79 03 	lds	r25, 0x0379
     392:	82 0f       	add	r24, r18
     394:	93 1f       	adc	r25, r19
     396:	90 93 79 03 	sts	0x0379, r25
     39a:	80 93 78 03 	sts	0x0378, r24
			num_lvel_samples_avg++;
     39e:	80 91 70 03 	lds	r24, 0x0370
     3a2:	90 91 71 03 	lds	r25, 0x0371
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	90 93 71 03 	sts	0x0371, r25
     3ac:	80 93 70 03 	sts	0x0370, r24
			break;
     3b0:	1c cf       	rjmp	.-456    	; 0x1ea <__vector_29+0x5e>
			}
			adcSamplingState = 3;
			break;

		case 3:
			currentAdChannel = currentMotLeftChannel;
     3b2:	80 91 2d 03 	lds	r24, 0x032D
     3b6:	80 93 2b 03 	sts	0x032B, r24
			leftChannelPhase = leftMotorPhase;
     3ba:	80 91 30 03 	lds	r24, 0x0330
     3be:	80 93 64 03 	sts	0x0364, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     3c2:	80 91 63 03 	lds	r24, 0x0363
     3c6:	88 23       	and	r24, r24
     3c8:	61 f5       	brne	.+88     	; 0x422 <__vector_29+0x296>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     3d0:	84 e0       	ldi	r24, 0x04	; 4
     3d2:	80 93 62 03 	sts	0x0362, r24
			break;
     3d6:	24 cf       	rjmp	.-440    	; 0x220 <__vector_29+0x94>
			right_vel_sum += value;
			num_rvel_samples_avg++;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     3d8:	80 91 68 03 	lds	r24, 0x0368
     3dc:	90 91 69 03 	lds	r25, 0x0369
     3e0:	82 0f       	add	r24, r18
     3e2:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	90 93 69 03 	sts	0x0369, r25
     3ec:	80 93 68 03 	sts	0x0368, r24
			break;
     3f0:	fc ce       	rjmp	.-520    	; 0x1ea <__vector_29+0x5e>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     3f2:	80 91 7c 03 	lds	r24, 0x037C
     3f6:	90 91 7d 03 	lds	r25, 0x037D
     3fa:	82 0f       	add	r24, r18
     3fc:	93 1f       	adc	r25, r19
     3fe:	90 93 7d 03 	sts	0x037D, r25
     402:	80 93 7c 03 	sts	0x037C, r24
			num_rvel_samples_avg++;
     406:	80 91 74 03 	lds	r24, 0x0374
     40a:	90 91 75 03 	lds	r25, 0x0375
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 75 03 	sts	0x0375, r25
     414:	80 93 74 03 	sts	0x0374, r24
			break;
     418:	e8 ce       	rjmp	.-560    	; 0x1ea <__vector_29+0x5e>
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	80 93 61 03 	sts	0x0361, r24
     420:	fc ce       	rjmp	.-520    	; 0x21a <__vector_29+0x8e>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	80 93 61 03 	sts	0x0361, r24
     428:	d3 cf       	rjmp	.-90     	; 0x3d0 <__vector_29+0x244>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     42a:	80 93 61 03 	sts	0x0361, r24
     42e:	71 cf       	rjmp	.-286    	; 0x312 <__vector_29+0x186>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	80 93 61 03 	sts	0x0361, r24
     436:	44 cf       	rjmp	.-376    	; 0x2c0 <__vector_29+0x134>
							//PORTA = 0x00;	// already done at the ISR beginning...
							PORTA = (1 << (currentProx>>1));
							//PORTA = (1 << currentAdChannel);
						}
					} else {
						PORTJ = (1 << ((currentProx-16)>>1));
     438:	40 97       	sbiw	r24, 0x10	; 16
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	02 c0       	rjmp	.+4      	; 0x448 <__vector_29+0x2bc>
     444:	22 0f       	add	r18, r18
     446:	33 1f       	adc	r19, r19
     448:	8a 95       	dec	r24
     44a:	e2 f7       	brpl	.-8      	; 0x444 <__vector_29+0x2b8>
     44c:	20 93 05 01 	sts	0x0105, r18
     450:	e7 ce       	rjmp	.-562    	; 0x220 <__vector_29+0x94>
			
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
     452:	80 91 67 03 	lds	r24, 0x0367
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	09 f0       	breq	.+2      	; 0x45c <__vector_29+0x2d0>
     45a:	e2 ce       	rjmp	.-572    	; 0x220 <__vector_29+0x94>
					measBattery=2;
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	80 93 67 03 	sts	0x0367, r24
					PORTC |= (1 << 6);	// sense enable on
     462:	46 9a       	sbi	0x08, 6	; 8
     464:	5d cf       	rjmp	.-326    	; 0x320 <__vector_29+0x194>
	// save the last data

	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     466:	90 91 67 03 	lds	r25, 0x0367
     46a:	92 30       	cpi	r25, 0x02	; 2
     46c:	09 f0       	breq	.+2      	; 0x470 <__vector_29+0x2e4>
     46e:	fe ce       	rjmp	.-516    	; 0x26c <__vector_29+0xe0>
				batteryLevel = value;
     470:	30 93 66 03 	sts	0x0366, r19
     474:	20 93 65 03 	sts	0x0365, r18
				measBattery = 0;
     478:	10 92 67 03 	sts	0x0367, r1
				PORTC &= ~(1 << 6);
     47c:	46 98       	cbi	0x08, 6	; 8
     47e:	fe ce       	rjmp	.-516    	; 0x27c <__vector_29+0xf0>
					PORTC |= (1 << 6);	// sense enable on
				}

				if(currentProx & 0x01) {
					if(currentProx < 16) {
						if(currentProx==14 && measBattery==1) {
     480:	80 91 67 03 	lds	r24, 0x0367
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	09 f0       	breq	.+2      	; 0x48a <__vector_29+0x2fe>
     488:	55 cf       	rjmp	.-342    	; 0x334 <__vector_29+0x1a8>
							measBattery=2;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	80 93 67 03 	sts	0x0367, r24
							PORTC |= (1 << 6);	// sense enable on
     490:	46 9a       	sbi	0x08, 6	; 8
     492:	c6 ce       	rjmp	.-628    	; 0x220 <__vector_29+0x94>

00000494 <initPwm>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     494:	e0 e9       	ldi	r30, 0x90	; 144
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	83 68       	ori	r24, 0x83	; 131
     49c:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     49e:	80 81       	ld	r24, Z
     4a0:	83 60       	ori	r24, 0x03	; 3
     4a2:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     4a4:	a1 e9       	ldi	r26, 0x91	; 145
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	8c 91       	ld	r24, X
     4aa:	8b 60       	ori	r24, 0x0B	; 11
     4ac:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     4ae:	80 91 84 03 	lds	r24, 0x0384
     4b2:	90 91 85 03 	lds	r25, 0x0385
     4b6:	90 93 99 00 	sts	0x0099, r25
     4ba:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     4be:	10 92 9b 00 	sts	0x009B, r1
     4c2:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     4c6:	a1 e7       	ldi	r26, 0x71	; 113
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	8c 91       	ld	r24, X
     4cc:	81 60       	ori	r24, 0x01	; 1
     4ce:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     4d0:	80 81       	ld	r24, Z
     4d2:	8f 75       	andi	r24, 0x5F	; 95
     4d4:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     4d6:	8e b1       	in	r24, 0x0e	; 14
     4d8:	87 7e       	andi	r24, 0xE7	; 231
     4da:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     4dc:	e0 ea       	ldi	r30, 0xA0	; 160
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	83 68       	ori	r24, 0x83	; 131
     4e4:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     4e6:	a1 ea       	ldi	r26, 0xA1	; 161
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	8c 91       	ld	r24, X
     4ec:	8b 60       	ori	r24, 0x0B	; 11
     4ee:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     4f0:	80 91 88 03 	lds	r24, 0x0388
     4f4:	90 91 89 03 	lds	r25, 0x0389
     4f8:	90 93 a9 00 	sts	0x00A9, r25
     4fc:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     500:	10 92 ab 00 	sts	0x00AB, r1
     504:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     508:	a2 e7       	ldi	r26, 0x72	; 114
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	8c 91       	ld	r24, X
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     512:	80 81       	ld	r24, Z
     514:	8f 75       	andi	r24, 0x5F	; 95
     516:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     518:	e2 e0       	ldi	r30, 0x02	; 2
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	80 81       	ld	r24, Z
     51e:	87 7e       	andi	r24, 0xE7	; 231
     520:	80 83       	st	Z, r24


}
     522:	08 95       	ret

00000524 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27

	PORTB &= ~(1 << 6);
     536:	2e 98       	cbi	0x05, 6	; 5

	leftMotorPhase = ACTIVE_PHASE;
     538:	10 92 30 03 	sts	0x0330, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     53c:	80 91 68 03 	lds	r24, 0x0368
     540:	90 91 69 03 	lds	r25, 0x0369
     544:	90 93 6d 03 	sts	0x036D, r25
     548:	80 93 6c 03 	sts	0x036C, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     54c:	80 91 70 03 	lds	r24, 0x0370
     550:	90 91 71 03 	lds	r25, 0x0371
     554:	90 93 73 03 	sts	0x0373, r25
     558:	80 93 72 03 	sts	0x0372, r24
	last_left_vel_sum = left_vel_sum;
     55c:	80 91 78 03 	lds	r24, 0x0378
     560:	90 91 79 03 	lds	r25, 0x0379
     564:	90 93 7b 03 	sts	0x037B, r25
     568:	80 93 7a 03 	sts	0x037A, r24

	// reset sampling variables
	left_current_avg = 0;
     56c:	10 92 69 03 	sts	0x0369, r1
     570:	10 92 68 03 	sts	0x0368, r1
	num_lvel_samples_avg = 0;
     574:	10 92 71 03 	sts	0x0371, r1
     578:	10 92 70 03 	sts	0x0370, r1
	left_vel_sum = 0;
     57c:	10 92 79 03 	sts	0x0379, r1
     580:	10 92 78 03 	sts	0x0378, r1

	// start control
	compute_left_vel = 1;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 b4 03 	sts	0x03B4, r24
	start_control = 1;
     58a:	80 93 b6 03 	sts	0x03B6, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     58e:	80 91 88 03 	lds	r24, 0x0388
     592:	90 91 89 03 	lds	r25, 0x0389
     596:	a0 91 8a 03 	lds	r26, 0x038A
     59a:	b0 91 8b 03 	lds	r27, 0x038B
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	a1 05       	cpc	r26, r1
     5a2:	b1 05       	cpc	r27, r1
     5a4:	29 f0       	breq	.+10     	; 0x5b0 <__vector_45+0x8c>
//		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
//		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     5a6:	18 16       	cp	r1, r24
     5a8:	19 06       	cpc	r1, r25
     5aa:	1a 06       	cpc	r1, r26
     5ac:	1b 06       	cpc	r1, r27
     5ae:	6c f4       	brge	.+26     	; 0x5ca <__vector_45+0xa6>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     5b0:	8f e0       	ldi	r24, 0x0F	; 15
     5b2:	80 93 2d 03 	sts	0x032D, r24
//		PORTH &= ~(1 << 3);				// output to 0
//		TCCR4A |= (1 << COM4B1);		// enable OCB
//		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

	PORTB |= (1 << 6);
     5b6:	2e 9a       	sbi	0x05, 6	; 5

}
     5b8:	bf 91       	pop	r27
     5ba:	af 91       	pop	r26
     5bc:	9f 91       	pop	r25
     5be:	8f 91       	pop	r24
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti
//		PORTH &= ~(1 << 4);				// output to 0
//		TCCR4A |= (1 << COM4A1);		// enable OCA
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     5ca:	8e e0       	ldi	r24, 0x0E	; 14
     5cc:	80 93 2d 03 	sts	0x032D, r24
     5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <__vector_45+0x92>

000005d2 <__vector_42>:
	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	11 24       	eor	r1, r1
     5dc:	8f 93       	push	r24

	PORTB &= ~(1 << 6);
     5de:	2e 98       	cbi	0x05, 6	; 5

	leftMotorPhase = PASSIVE_PHASE;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 30 03 	sts	0x0330, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     5e6:	8e e0       	ldi	r24, 0x0E	; 14
     5e8:	80 93 2d 03 	sts	0x032D, r24

	PORTB |= (1 << 6);
     5ec:	2e 9a       	sbi	0x05, 6	; 5

}
     5ee:	8f 91       	pop	r24
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	8f 93       	push	r24

	PORTB &= ~(1 << 6);
     606:	2e 98       	cbi	0x05, 6	; 5

	leftMotorPhase = PASSIVE_PHASE;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 30 03 	sts	0x0330, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     60e:	8f e0       	ldi	r24, 0x0F	; 15
     610:	80 93 2d 03 	sts	0x032D, r24

	PORTB |= (1 << 6);
     614:	2e 9a       	sbi	0x05, 6	; 5

}
     616:	8f 91       	pop	r24
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	2f 93       	push	r18
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27

	PORTB &= ~(1 << 6);
     636:	2e 98       	cbi	0x05, 6	; 5

	rightMotorPhase = ACTIVE_PHASE;
     638:	10 92 2f 03 	sts	0x032F, r1
	sendAdcValues = 1;
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	20 93 c5 03 	sts	0x03C5, r18

	// copy sampling variables
	last_right_current = right_current_avg;
     642:	80 91 6a 03 	lds	r24, 0x036A
     646:	90 91 6b 03 	lds	r25, 0x036B
     64a:	90 93 6f 03 	sts	0x036F, r25
     64e:	80 93 6e 03 	sts	0x036E, r24
	last_right_vel_sum = right_vel_sum;
     652:	80 91 7c 03 	lds	r24, 0x037C
     656:	90 91 7d 03 	lds	r25, 0x037D
     65a:	90 93 7f 03 	sts	0x037F, r25
     65e:	80 93 7e 03 	sts	0x037E, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     662:	80 91 74 03 	lds	r24, 0x0374
     666:	90 91 75 03 	lds	r25, 0x0375
     66a:	90 93 77 03 	sts	0x0377, r25
     66e:	80 93 76 03 	sts	0x0376, r24

	// reset sampling variables
	right_current_avg = 0;
     672:	10 92 6b 03 	sts	0x036B, r1
     676:	10 92 6a 03 	sts	0x036A, r1
	right_vel_sum = 0;
     67a:	10 92 7d 03 	sts	0x037D, r1
     67e:	10 92 7c 03 	sts	0x037C, r1
	num_rvel_samples_avg = 0;
     682:	10 92 75 03 	sts	0x0375, r1
     686:	10 92 74 03 	sts	0x0374, r1

	// start control
	compute_right_vel = 1;
     68a:	20 93 b5 03 	sts	0x03B5, r18

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     68e:	80 91 84 03 	lds	r24, 0x0384
     692:	90 91 85 03 	lds	r25, 0x0385
     696:	a0 91 86 03 	lds	r26, 0x0386
     69a:	b0 91 87 03 	lds	r27, 0x0387
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	a1 05       	cpc	r26, r1
     6a2:	b1 05       	cpc	r27, r1
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <__vector_35+0x8e>
//		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
//		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     6a6:	18 16       	cp	r1, r24
     6a8:	19 06       	cpc	r1, r25
     6aa:	1a 06       	cpc	r1, r26
     6ac:	1b 06       	cpc	r1, r27
     6ae:	74 f4       	brge	.+28     	; 0x6cc <__vector_35+0xaa>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     6b0:	8d e0       	ldi	r24, 0x0D	; 13
     6b2:	80 93 2e 03 	sts	0x032E, r24
//		PORTE &= ~(1 << 3);				// output to 0
//		TCCR3A |= (1 << COM3B1);		// enable OCB
//		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

	PORTB |= (1 << 6);
     6b6:	2e 9a       	sbi	0x05, 6	; 5

}
     6b8:	bf 91       	pop	r27
     6ba:	af 91       	pop	r26
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	2f 91       	pop	r18
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti
//		PORTE &= ~(1 << 4);				// output to 0
//		TCCR3A |= (1 << COM3A1);		// enable OCA
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     6cc:	8c e0       	ldi	r24, 0x0C	; 12
     6ce:	80 93 2e 03 	sts	0x032E, r24
     6d2:	f1 cf       	rjmp	.-30     	; 0x6b6 <__vector_35+0x94>

000006d4 <__vector_32>:
	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	8f 93       	push	r24

	PORTB &= ~(1 << 6);
     6e0:	2e 98       	cbi	0x05, 6	; 5

	rightMotorPhase = PASSIVE_PHASE;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 2f 03 	sts	0x032F, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     6e8:	8c e0       	ldi	r24, 0x0C	; 12
     6ea:	80 93 2e 03 	sts	0x032E, r24

	PORTB |= (1 << 6);
     6ee:	2e 9a       	sbi	0x05, 6	; 5
}
     6f0:	8f 91       	pop	r24
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	8f 93       	push	r24

	PORTB &= ~(1 << 6);
     708:	2e 98       	cbi	0x05, 6	; 5

	rightMotorPhase = PASSIVE_PHASE;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 2f 03 	sts	0x032F, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     710:	8d e0       	ldi	r24, 0x0D	; 13
     712:	80 93 2e 03 	sts	0x032E, r24

	PORTB |= (1 << 6);
     716:	2e 9a       	sbi	0x05, 6	; 5
}
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	00 d0       	rcall	.+0      	; 0x72a <readAccelXYZ+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <readAccelXYZ+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     730:	80 91 12 02 	lds	r24, 0x0212
     734:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
	i2c_write(0x32);							// sends address to read from
     738:	82 e3       	ldi	r24, 0x32	; 50
     73a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     73e:	80 91 12 02 	lds	r24, 0x0212
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <i2c_rep_start>

	for(i=0; i<5; i++) {
		buff[i] = i2c_readAck();				// read one byte
     748:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     752:	8a 83       	std	Y+2, r24	; 0x02
     754:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     758:	8b 83       	std	Y+3, r24	; 0x03
     75a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     75e:	8c 83       	std	Y+4, r24	; 0x04
     760:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     764:	8d 83       	std	Y+5, r24	; 0x05
	}
	buff[i] = i2c_readNak();					// read last byte
     766:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <i2c_readNak>
     76a:	8e 83       	std	Y+6, r24	; 0x06
	i2c_stop();									// set stop conditon = release bus
     76c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>

	// 16 bits values in 2's complement
	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     770:	3a 81       	ldd	r19, Y+2	; 0x02
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	82 2b       	or	r24, r18
     77a:	93 2b       	or	r25, r19
     77c:	90 93 ca 03 	sts	0x03CA, r25
     780:	80 93 c9 03 	sts	0x03C9, r24
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     784:	3c 81       	ldd	r19, Y+4	; 0x04
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	82 2b       	or	r24, r18
     78e:	93 2b       	or	r25, r19
     790:	90 93 cc 03 	sts	0x03CC, r25
     794:	80 93 cb 03 	sts	0x03CB, r24
	accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     798:	3e 81       	ldd	r19, Y+6	; 0x06
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	8d 81       	ldd	r24, Y+5	; 0x05
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 2b       	or	r24, r18
     7a2:	93 2b       	or	r25, r19
     7a4:	90 93 ce 03 	sts	0x03CE, r25
     7a8:	80 93 cd 03 	sts	0x03CD, r24
	i2c_stop();
*/

#endif

}
     7ac:	26 96       	adiw	r28, 0x06	; 6
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <readAccelXY>:

void readAccelXY() {
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	0f 92       	push	r0
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     7ce:	80 91 12 02 	lds	r24, 0x0212
     7d2:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
	i2c_write(0x32);							// sends address to read from
     7d6:	82 e3       	ldi	r24, 0x32	; 50
     7d8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     7dc:	80 91 12 02 	lds	r24, 0x0212
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <i2c_rep_start>

	for(i=0; i<3; i++) {
		buff[i] = i2c_readAck();				// read one byte
     7e6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     7ea:	08 2f       	mov	r16, r24
     7ec:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     7f0:	f8 2e       	mov	r15, r24
     7f2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     7f6:	18 2f       	mov	r17, r24
	}
	buff[i] = i2c_readNak();					// read last byte
     7f8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <i2c_readNak>
	i2c_stop();									// set stop conditon = release bus
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     802:	5f 2d       	mov	r21, r15
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	20 2f       	mov	r18, r16
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	24 2b       	or	r18, r20
     80c:	35 2b       	or	r19, r21
     80e:	30 93 ca 03 	sts	0x03CA, r19
     812:	20 93 c9 03 	sts	0x03C9, r18
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	38 2f       	mov	r19, r24
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	81 2f       	mov	r24, r17
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	82 2b       	or	r24, r18
     822:	93 2b       	or	r25, r19
     824:	90 93 cc 03 	sts	0x03CC, r25
     828:	80 93 cb 03 	sts	0x03CB, r24

#endif

}
     82c:	0f 90       	pop	r0
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	08 95       	ret

0000083a <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     83a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <i2c_init>
#endif

#ifdef ACC_ADXL345

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     83e:	80 91 12 02 	lds	r24, 0x0212
     842:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     846:	88 23       	and	r24, r24
     848:	d9 f0       	breq	.+54     	; 0x880 <initI2C+0x46>
        i2c_stop();
     84a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>
		PORTB &= ~(1 << 5);
     84e:	2d 98       	cbi	0x05, 5	; 5
        i2c_write(0x2D);	// power register
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     850:	80 91 12 02 	lds	r24, 0x0212
     854:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     858:	88 23       	and	r24, r24
     85a:	01 f1       	breq	.+64     	; 0x89c <initI2C+0x62>
        i2c_stop();
     85c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>
		PORTB &= ~(1 << 5);
     860:	2d 98       	cbi	0x05, 5	; 5
        i2c_write(0x31);	// Data format register
        i2c_write(0x08);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     862:	80 91 12 02 	lds	r24, 0x0212
     866:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     86a:	88 23       	and	r24, r24
     86c:	29 f5       	brne	.+74     	; 0x8b8 <initI2C+0x7e>
        i2c_stop();
		PORTB &= ~(1 << 5);
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     86e:	8c e2       	ldi	r24, 0x2C	; 44
     870:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     874:	89 e0       	ldi	r24, 0x09	; 9
     876:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     87a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>
     87e:	08 95       	ret
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if ( ret ) {			// failed to issue start condition, possibly no device found
        i2c_stop();
		PORTB &= ~(1 << 5);
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     880:	8d e2       	ldi	r24, 0x2D	; 45
     882:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     886:	88 e0       	ldi	r24, 0x08	; 8
     888:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     88c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     890:	80 91 12 02 	lds	r24, 0x0212
     894:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     898:	88 23       	and	r24, r24
     89a:	01 f7       	brne	.-64     	; 0x85c <initI2C+0x22>
        i2c_stop();
		PORTB &= ~(1 << 5);
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     89c:	81 e3       	ldi	r24, 0x31	; 49
     89e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
        i2c_write(0x08);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     8a2:	88 e0       	ldi	r24, 0x08	; 8
     8a4:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     8a8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8ac:	80 91 12 02 	lds	r24, 0x0212
     8b0:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     8b4:	88 23       	and	r24, r24
     8b6:	d9 f2       	breq	.-74     	; 0x86e <initI2C+0x34>
        i2c_stop();
     8b8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>
		PORTB &= ~(1 << 5);
     8bc:	2d 98       	cbi	0x05, 5	; 5
     8be:	08 95       	ret

000008c0 <calibrateAccelerometer>:
	
#endif

}

void calibrateAccelerometer() {
     8c0:	4f 92       	push	r4
     8c2:	5f 92       	push	r5
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	0f 92       	push	r0
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62

	int j=0;
	accOffsetX = 0;
     8e4:	10 92 d6 03 	sts	0x03D6, r1
     8e8:	10 92 d5 03 	sts	0x03D5, r1
	accOffsetY = 0;
     8ec:	10 92 d8 03 	sts	0x03D8, r1
     8f0:	10 92 d7 03 	sts	0x03D7, r1
	accOffsetZ = 0;
     8f4:	10 92 da 03 	sts	0x03DA, r1
     8f8:	10 92 d9 03 	sts	0x03D9, r1
     8fc:	22 e3       	ldi	r18, 0x32	; 50
     8fe:	42 2e       	mov	r4, r18
     900:	51 2c       	mov	r5, r1


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     902:	80 91 12 02 	lds	r24, 0x0212
     906:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
	i2c_write(0x32);							// sends address to read from
     90a:	82 e3       	ldi	r24, 0x32	; 50
     90c:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     910:	80 91 12 02 	lds	r24, 0x0212
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <i2c_rep_start>

	for(i=0; i<5; i++) {
		buff[i] = i2c_readAck();				// read one byte
     91a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     91e:	88 2e       	mov	r8, r24
     920:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     924:	78 2e       	mov	r7, r24
     926:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     92a:	a8 2e       	mov	r10, r24
     92c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     930:	98 2e       	mov	r9, r24
     932:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     936:	b8 2e       	mov	r11, r24
	}
	buff[i] = i2c_readNak();					// read last byte
     938:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <i2c_readNak>
	i2c_stop();									// set stop conditon = release bus
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>

	// 16 bits values in 2's complement
	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     942:	d7 2c       	mov	r13, r7
     944:	cc 24       	eor	r12, r12
     946:	e8 2d       	mov	r30, r8
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	ec 29       	or	r30, r12
     94c:	fd 29       	or	r31, r13
     94e:	f0 93 ca 03 	sts	0x03CA, r31
     952:	e0 93 c9 03 	sts	0x03C9, r30
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     956:	f9 2c       	mov	r15, r9
     958:	ee 24       	eor	r14, r14
     95a:	2a 2d       	mov	r18, r10
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	2e 29       	or	r18, r14
     960:	3f 29       	or	r19, r15
     962:	30 93 cc 03 	sts	0x03CC, r19
     966:	20 93 cb 03 	sts	0x03CB, r18
	accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	18 2f       	mov	r17, r24
     96e:	00 e0       	ldi	r16, 0x00	; 0
     970:	4b 2d       	mov	r20, r11
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	40 2b       	or	r20, r16
     976:	51 2b       	or	r21, r17
     978:	50 93 ce 03 	sts	0x03CE, r21
     97c:	40 93 cd 03 	sts	0x03CD, r20
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
		readAccelXYZ();
		accOffsetX += accX;
     980:	60 91 d5 03 	lds	r22, 0x03D5
     984:	70 91 d6 03 	lds	r23, 0x03D6
     988:	6e 0f       	add	r22, r30
     98a:	7f 1f       	adc	r23, r31
     98c:	70 93 d6 03 	sts	0x03D6, r23
     990:	60 93 d5 03 	sts	0x03D5, r22
		accOffsetY += accY;
     994:	e0 91 d7 03 	lds	r30, 0x03D7
     998:	f0 91 d8 03 	lds	r31, 0x03D8
     99c:	e2 0f       	add	r30, r18
     99e:	f3 1f       	adc	r31, r19
     9a0:	f0 93 d8 03 	sts	0x03D8, r31
     9a4:	e0 93 d7 03 	sts	0x03D7, r30
		accOffsetZ += accZ;
     9a8:	20 91 d9 03 	lds	r18, 0x03D9
     9ac:	30 91 da 03 	lds	r19, 0x03DA
     9b0:	24 0f       	add	r18, r20
     9b2:	35 1f       	adc	r19, r21
     9b4:	30 93 da 03 	sts	0x03DA, r19
     9b8:	20 93 d9 03 	sts	0x03D9, r18
     9bc:	08 94       	sec
     9be:	41 08       	sbc	r4, r1
     9c0:	51 08       	sbc	r5, r1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     9c2:	41 14       	cp	r4, r1
     9c4:	51 04       	cpc	r5, r1
     9c6:	09 f0       	breq	.+2      	; 0x9ca <calibrateAccelerometer+0x10a>
     9c8:	9c cf       	rjmp	.-200    	; 0x902 <calibrateAccelerometer+0x42>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     9ca:	02 e3       	ldi	r16, 0x32	; 50
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	cb 01       	movw	r24, r22
     9d0:	b8 01       	movw	r22, r16
     9d2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
     9d6:	70 93 d6 03 	sts	0x03D6, r23
     9da:	60 93 d5 03 	sts	0x03D5, r22
	accOffsetY = accOffsetY/50;
     9de:	cf 01       	movw	r24, r30
     9e0:	b8 01       	movw	r22, r16
     9e2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
     9e6:	70 93 d8 03 	sts	0x03D8, r23
     9ea:	60 93 d7 03 	sts	0x03D7, r22
	accOffsetZ = accOffsetZ/50;
     9ee:	c9 01       	movw	r24, r18
     9f0:	b8 01       	movw	r22, r16
     9f2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
     9f6:	70 93 da 03 	sts	0x03DA, r23
     9fa:	60 93 d9 03 	sts	0x03D9, r22

}
     9fe:	0f 90       	pop	r0
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	af 90       	pop	r10
     a14:	9f 90       	pop	r9
     a16:	8f 90       	pop	r8
     a18:	7f 90       	pop	r7
     a1a:	5f 90       	pop	r5
     a1c:	4f 90       	pop	r4
     a1e:	08 95       	ret

00000a20 <computeAngle>:

void computeAngle() {
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	0f 92       	push	r0
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     a36:	80 91 12 02 	lds	r24, 0x0212
     a3a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
	i2c_write(0x32);							// sends address to read from
     a3e:	82 e3       	ldi	r24, 0x32	; 50
     a40:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     a44:	80 91 12 02 	lds	r24, 0x0212
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <i2c_rep_start>

	for(i=0; i<3; i++) {
		buff[i] = i2c_readAck();				// read one byte
     a4e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     a52:	18 2f       	mov	r17, r24
     a54:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     a58:	08 2f       	mov	r16, r24
     a5a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
     a5e:	e8 2e       	mov	r14, r24
	}
	buff[i] = i2c_readNak();					// read last byte
     a60:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <i2c_readNak>
	i2c_stop();									// set stop conditon = release bus
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     a6a:	30 2f       	mov	r19, r16
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	61 2f       	mov	r22, r17
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	62 2b       	or	r22, r18
     a74:	73 2b       	or	r23, r19
#ifdef ACC_MMA7455L

#endif

#ifdef ACC_ADXL345
	accX = accX-accOffsetX;
     a76:	20 91 d5 03 	lds	r18, 0x03D5
     a7a:	30 91 d6 03 	lds	r19, 0x03D6
     a7e:	62 1b       	sub	r22, r18
     a80:	73 0b       	sbc	r23, r19
     a82:	70 93 ca 03 	sts	0x03CA, r23
     a86:	60 93 c9 03 	sts	0x03C9, r22
	}
	buff[i] = i2c_readNak();					// read last byte
	i2c_stop();									// set stop conditon = release bus

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	38 2f       	mov	r19, r24
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	ce 2c       	mov	r12, r14
     a92:	dd 24       	eor	r13, r13
     a94:	c2 2a       	or	r12, r18
     a96:	d3 2a       	or	r13, r19

#endif

#ifdef ACC_ADXL345
	accX = accX-accOffsetX;
	accY = accY-accOffsetY;
     a98:	80 91 d7 03 	lds	r24, 0x03D7
     a9c:	90 91 d8 03 	lds	r25, 0x03D8
     aa0:	c8 1a       	sub	r12, r24
     aa2:	d9 0a       	sbc	r13, r25
     aa4:	d0 92 cc 03 	sts	0x03CC, r13
     aa8:	c0 92 cb 03 	sts	0x03CB, r12
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     aac:	88 27       	eor	r24, r24
     aae:	77 fd       	sbrc	r23, 7
     ab0:	80 95       	com	r24
     ab2:	98 2f       	mov	r25, r24
     ab4:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
     ab8:	7b 01       	movw	r14, r22
     aba:	8c 01       	movw	r16, r24
     abc:	b6 01       	movw	r22, r12
     abe:	88 27       	eor	r24, r24
     ac0:	77 fd       	sbrc	r23, 7
     ac2:	80 95       	com	r24
     ac4:	98 2f       	mov	r25, r24
     ac6:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c8 01       	movw	r24, r16
     ad0:	b7 01       	movw	r22, r14
     ad2:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <atan2>
     ad6:	21 ee       	ldi	r18, 0xE1	; 225
     ad8:	3e e2       	ldi	r19, 0x2E	; 46
     ada:	45 e6       	ldi	r20, 0x65	; 101
     adc:	52 e4       	ldi	r21, 0x42	; 66
     ade:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     ae2:	0e 94 ed 1b 	call	0x37da	; 0x37da <__fixsfsi>
     ae6:	9b 01       	movw	r18, r22
     ae8:	70 93 dc 03 	sts	0x03DC, r23
     aec:	60 93 db 03 	sts	0x03DB, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     af0:	77 ff       	sbrs	r23, 7
     af2:	06 c0       	rjmp	.+12     	; 0xb00 <computeAngle+0xe0>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     af4:	28 59       	subi	r18, 0x98	; 152
     af6:	3e 4f       	sbci	r19, 0xFE	; 254
     af8:	30 93 dc 03 	sts	0x03DC, r19
     afc:	20 93 db 03 	sts	0x03DB, r18
	}

}
     b00:	0f 90       	pop	r0
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	08 95       	ret

00000b14 <initPeripherals>:

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     b14:	f8 94       	cli

	initPortsIO();
     b16:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     b1a:	ea e7       	ldi	r30, 0x7A	; 122
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	86 60       	ori	r24, 0x06	; 6
     b22:	80 83       	st	Z, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     b24:	ac e7       	ldi	r26, 0x7C	; 124
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	8c 91       	ld	r24, X
     b2a:	80 64       	ori	r24, 0x40	; 64
     b2c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     b2e:	80 81       	ld	r24, Z
     b30:	80 62       	ori	r24, 0x20	; 32
     b32:	80 83       	st	Z, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     b34:	ab e7       	ldi	r26, 0x7B	; 123
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	8c 91       	ld	r24, X
     b3a:	88 7f       	andi	r24, 0xF8	; 248
     b3c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     b3e:	80 81       	ld	r24, Z
     b40:	88 60       	ori	r24, 0x08	; 8
     b42:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     b44:	80 81       	ld	r24, Z
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     b4a:	80 81       	ld	r24, Z
     b4c:	80 64       	ori	r24, 0x40	; 64
     b4e:	80 83       	st	Z, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     b50:	e0 e9       	ldi	r30, 0x90	; 144
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	83 68       	ori	r24, 0x83	; 131
     b58:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     b5a:	80 81       	ld	r24, Z
     b5c:	83 60       	ori	r24, 0x03	; 3
     b5e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     b60:	a1 e9       	ldi	r26, 0x91	; 145
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	8c 91       	ld	r24, X
     b66:	8b 60       	ori	r24, 0x0B	; 11
     b68:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     b6a:	80 91 84 03 	lds	r24, 0x0384
     b6e:	90 91 85 03 	lds	r25, 0x0385
     b72:	90 93 99 00 	sts	0x0099, r25
     b76:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     b7a:	10 92 9b 00 	sts	0x009B, r1
     b7e:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     b82:	a1 e7       	ldi	r26, 0x71	; 113
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	8c 91       	ld	r24, X
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 75       	andi	r24, 0x5F	; 95
     b90:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     b92:	8e b1       	in	r24, 0x0e	; 14
     b94:	87 7e       	andi	r24, 0xE7	; 231
     b96:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     b98:	e0 ea       	ldi	r30, 0xA0	; 160
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	83 68       	ori	r24, 0x83	; 131
     ba0:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     ba2:	a1 ea       	ldi	r26, 0xA1	; 161
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	8c 91       	ld	r24, X
     ba8:	8b 60       	ori	r24, 0x0B	; 11
     baa:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     bac:	80 91 88 03 	lds	r24, 0x0388
     bb0:	90 91 89 03 	lds	r25, 0x0389
     bb4:	90 93 a9 00 	sts	0x00A9, r25
     bb8:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     bbc:	10 92 ab 00 	sts	0x00AB, r1
     bc0:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     bc4:	a2 e7       	ldi	r26, 0x72	; 114
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	8c 91       	ld	r24, X
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     bce:	80 81       	ld	r24, Z
     bd0:	8f 75       	andi	r24, 0x5F	; 95
     bd2:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     bd4:	e2 e0       	ldi	r30, 0x02	; 2
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	80 81       	ld	r24, Z
     bda:	87 7e       	andi	r24, 0xE7	; 231
     bdc:	80 83       	st	Z, r24
	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
	initSPI();
     bde:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <initSPI>
	mirf_init();
     be2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <mirf_init>
	initUsart();
     be6:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <initUsart>
	initI2C();
     bea:	0e 94 1d 04 	call	0x83a	; 0x83a <initI2C>

	sei();			// enable global interrupts
     bee:	78 94       	sei

	

}
     bf0:	08 95       	ret

00000bf2 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 91 c4 03 	lds	r25, 0x03C4
     bf8:	89 1b       	sub	r24, r25
     bfa:	80 93 c4 03 	sts	0x03C4, r24

	if(blinkState) {
     bfe:	88 23       	and	r24, r24
     c00:	39 f4       	brne	.+14     	; 0xc10 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     c02:	80 91 80 00 	lds	r24, 0x0080
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     c0c:	2f 98       	cbi	0x05, 7	; 5
     c0e:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     c10:	80 91 80 00 	lds	r24, 0x0080
     c14:	88 60       	ori	r24, 0x08	; 8
     c16:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	90 93 8d 00 	sts	0x008D, r25
     c22:	80 93 8c 00 	sts	0x008C, r24
     c26:	08 95       	ret

00000c28 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     c28:	88 23       	and	r24, r24
     c2a:	59 f0       	breq	.+22     	; 0xc42 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     c2c:	90 91 80 00 	lds	r25, 0x0080
     c30:	90 68       	ori	r25, 0x80	; 128
     c32:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	90 93 89 00 	sts	0x0089, r25
     c3c:	80 93 88 00 	sts	0x0088, r24
     c40:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     c42:	80 91 80 00 	lds	r24, 0x0080
     c46:	8f 77       	andi	r24, 0x7F	; 127
     c48:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     c4c:	2d 98       	cbi	0x05, 5	; 5
     c4e:	08 95       	ret

00000c50 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     c50:	88 23       	and	r24, r24
     c52:	59 f0       	breq	.+22     	; 0xc6a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     c54:	90 91 80 00 	lds	r25, 0x0080
     c58:	90 62       	ori	r25, 0x20	; 32
     c5a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 8b 00 	sts	0x008B, r25
     c64:	80 93 8a 00 	sts	0x008A, r24
     c68:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     c6a:	80 91 80 00 	lds	r24, 0x0080
     c6e:	8f 7d       	andi	r24, 0xDF	; 223
     c70:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     c74:	2e 98       	cbi	0x05, 6	; 5
     c76:	08 95       	ret

00000c78 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     c78:	88 23       	and	r24, r24
     c7a:	59 f0       	breq	.+22     	; 0xc92 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     c7c:	90 91 80 00 	lds	r25, 0x0080
     c80:	98 60       	ori	r25, 0x08	; 8
     c82:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	90 93 8d 00 	sts	0x008D, r25
     c8c:	80 93 8c 00 	sts	0x008C, r24
     c90:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     c92:	80 91 80 00 	lds	r24, 0x0080
     c96:	87 7f       	andi	r24, 0xF7	; 247
     c98:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     c9c:	2f 98       	cbi	0x05, 7	; 5
     c9e:	08 95       	ret

00000ca0 <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 dd 03 	sts	0x03DD, r24
}
     ca6:	08 95       	ret

00000ca8 <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     ca8:	86 b1       	in	r24, 0x06	; 6
     caa:	66 b1       	in	r22, 0x06	; 6
     cac:	26 b1       	in	r18, 0x06	; 6
     cae:	46 b1       	in	r20, 0x06	; 6
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	28 70       	andi	r18, 0x08	; 8
     cb4:	30 70       	andi	r19, 0x00	; 0
     cb6:	35 95       	asr	r19
     cb8:	27 95       	ror	r18
     cba:	35 95       	asr	r19
     cbc:	27 95       	ror	r18
     cbe:	35 95       	asr	r19
     cc0:	27 95       	ror	r18
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	64 70       	andi	r22, 0x04	; 4
     cca:	70 70       	andi	r23, 0x00	; 0
     ccc:	75 95       	asr	r23
     cce:	67 95       	ror	r22
     cd0:	75 95       	asr	r23
     cd2:	67 95       	ror	r22
     cd4:	26 0f       	add	r18, r22
     cd6:	37 1f       	adc	r19, r23
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	42 70       	andi	r20, 0x02	; 2
     ce0:	50 70       	andi	r21, 0x00	; 0
     ce2:	55 95       	asr	r21
     ce4:	47 95       	ror	r20
     ce6:	24 0f       	add	r18, r20
     ce8:	35 1f       	adc	r19, r21
     cea:	22 0f       	add	r18, r18
     cec:	81 70       	andi	r24, 0x01	; 1
}
     cee:	82 0f       	add	r24, r18
     cf0:	08 95       	ret

00000cf2 <main>:


int main(void) {
     cf2:	2f 92       	push	r2
     cf4:	3f 92       	push	r3
     cf6:	4f 92       	push	r4
     cf8:	5f 92       	push	r5
     cfa:	6f 92       	push	r6
     cfc:	7f 92       	push	r7
     cfe:	8f 92       	push	r8
     d00:	9f 92       	push	r9
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	2c 97       	sbiw	r28, 0x0c	; 12
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	unsigned char packetId = 0;
	choosePeripheral = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 11 02 	sts	0x0211, r24

	initPeripherals();
     d2c:	0e 94 8a 05 	call	0xb14	; 0xb14 <initPeripherals>

PORTB &= ~(1 << 5);
     d30:	2d 98       	cbi	0x05, 5	; 5
	calibrateAccelerometer();
     d32:	0e 94 60 04 	call	0x8c0	; 0x8c0 <calibrateAccelerometer>
PORTB |= (1 << 5);
     d36:	2d 9a       	sbi	0x05, 5	; 5

//	e_start_agendas_processing();
	//e_activate_agenda(toggleBlueLed, 10000);		// every 1 seconds
//	e_activate_agenda(sendValues, 20000);	// every 2 seconds
	e_init_remote_control();
     d38:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <e_init_remote_control>

		//PORTB ^= (1 << 6); // Toggle the green LED


		if(delayCounter >= 10000) {
			measBattery = 1;
     d3c:	11 e0       	ldi	r17, 0x01	; 1
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     d3e:	24 e6       	ldi	r18, 0x64	; 100
     d40:	a2 2e       	mov	r10, r18
     d42:	b1 2c       	mov	r11, r1
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     d44:	9d ec       	ldi	r25, 0xCD	; 205
     d46:	69 2e       	mov	r6, r25
     d48:	9e ef       	ldi	r25, 0xFE	; 254
     d4a:	79 2e       	mov	r7, r25
     d4c:	9f ef       	ldi	r25, 0xFF	; 255
     d4e:	89 2e       	mov	r8, r25
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	99 2e       	mov	r9, r25
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     d54:	83 e3       	ldi	r24, 0x33	; 51
     d56:	28 2e       	mov	r2, r24
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	38 2e       	mov	r3, r24
     d5c:	41 2c       	mov	r4, r1
     d5e:	51 2c       	mov	r5, r1
	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED


		if(delayCounter >= 10000) {
     d60:	80 91 de 03 	lds	r24, 0x03DE
     d64:	90 91 df 03 	lds	r25, 0x03DF
     d68:	27 e2       	ldi	r18, 0x27	; 39
     d6a:	80 31       	cpi	r24, 0x10	; 16
     d6c:	92 07       	cpc	r25, r18
     d6e:	10 f0       	brcs	.+4      	; 0xd74 <main+0x82>
			measBattery = 1;
     d70:	10 93 67 03 	sts	0x0367, r17
		}

		ir_move = e_get_data();
     d74:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <e_get_data>
     d78:	80 93 c6 03 	sts	0x03C6, r24

		if(command_received) {
     d7c:	90 91 c7 03 	lds	r25, 0x03C7
     d80:	99 23       	and	r25, r25
     d82:	09 f4       	brne	.+2      	; 0xd86 <main+0x94>
     d84:	4b c0       	rjmp	.+150    	; 0xe1c <main+0x12a>

			command_received = 0;
     d86:	10 92 c7 03 	sts	0x03C7, r1

			//usartTransmit(ir_move);

			switch(ir_move) {
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	09 f4       	brne	.+2      	; 0xd90 <main+0x9e>
     d8e:	90 c6       	rjmp	.+3360   	; 0x1ab0 <main+0xdbe>
     d90:	85 30       	cpi	r24, 0x05	; 5
     d92:	08 f0       	brcs	.+2      	; 0xd96 <main+0xa4>
     d94:	61 c4       	rjmp	.+2242   	; 0x1658 <main+0x966>
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	09 f4       	brne	.+2      	; 0xd9c <main+0xaa>
     d9a:	f4 c5       	rjmp	.+3048   	; 0x1984 <main+0xc92>
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <main+0xb0>
     da0:	76 c5       	rjmp	.+2796   	; 0x188e <main+0xb9c>
					pwm_right_desired -= STEP_MOTORS;
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
					break;

               	case 0:	// colors
					colorState = (colorState+1)%5;
     da2:	80 91 c8 03 	lds	r24, 0x03C8
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	65 e0       	ldi	r22, 0x05	; 5
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__divmodhi4>
     db2:	80 93 c8 03 	sts	0x03C8, r24

					if(colorState==0) {		// turn on blue
     db6:	88 23       	and	r24, r24
     db8:	09 f0       	breq	.+2      	; 0xdbc <main+0xca>
     dba:	e3 c6       	rjmp	.+3526   	; 0x1b82 <main+0xe90>
						pwm_blue = 0;
     dbc:	10 92 0f 02 	sts	0x020F, r1
						pwm_green = MAX_LEDS_PWM;
     dc0:	9f ef       	ldi	r25, 0xFF	; 255
     dc2:	90 93 0e 02 	sts	0x020E, r25
						pwm_red = MAX_LEDS_PWM;					
     dc6:	90 93 0d 02 	sts	0x020D, r25

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     dca:	80 91 80 00 	lds	r24, 0x0080
     dce:	80 68       	ori	r24, 0x80	; 128
     dd0:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
     dd4:	2f ef       	ldi	r18, 0xFF	; 255
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	30 93 89 00 	sts	0x0089, r19
     ddc:	20 93 88 00 	sts	0x0088, r18
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
     de0:	80 91 0e 02 	lds	r24, 0x020E

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <main+0xf8>
     de8:	f1 c6       	rjmp	.+3554   	; 0x1bcc <main+0xeda>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     dea:	90 91 80 00 	lds	r25, 0x0080
     dee:	90 62       	ori	r25, 0x20	; 32
     df0:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 8b 00 	sts	0x008B, r25
     dfa:	80 93 8a 00 	sts	0x008A, r24
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);
     dfe:	80 91 0f 02 	lds	r24, 0x020F

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     e02:	88 23       	and	r24, r24
     e04:	09 f4       	brne	.+2      	; 0xe08 <main+0x116>
     e06:	ed c6       	rjmp	.+3546   	; 0x1be2 <main+0xef0>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     e08:	90 91 80 00 	lds	r25, 0x0080
     e0c:	98 60       	ori	r25, 0x08	; 8
     e0e:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	90 93 8d 00 	sts	0x008D, r25
     e18:	80 93 8c 00 	sts	0x008C, r24


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 10000) {
     e1c:	80 91 de 03 	lds	r24, 0x03DE
     e20:	90 91 df 03 	lds	r25, 0x03DF
     e24:	37 e2       	ldi	r19, 0x27	; 39
     e26:	80 31       	cpi	r24, 0x10	; 16
     e28:	93 07       	cpc	r25, r19
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <main+0x13c>
     e2c:	a1 c2       	rjmp	.+1346   	; 0x1370 <main+0x67e>
		}



		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {
     e2e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <mirf_data_ready>
     e32:	88 23       	and	r24, r24
     e34:	09 f0       	breq	.+2      	; 0xe38 <main+0x146>
     e36:	4c c1       	rjmp	.+664    	; 0x10d0 <main+0x3de>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     e38:	66 b1       	in	r22, 0x06	; 6
     e3a:	46 b1       	in	r20, 0x06	; 6
     e3c:	86 b1       	in	r24, 0x06	; 6
     e3e:	26 b1       	in	r18, 0x06	; 6
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	88 70       	andi	r24, 0x08	; 8
     e44:	90 70       	andi	r25, 0x00	; 0
     e46:	95 95       	asr	r25
     e48:	87 95       	ror	r24
     e4a:	95 95       	asr	r25
     e4c:	87 95       	ror	r24
     e4e:	95 95       	asr	r25
     e50:	87 95       	ror	r24
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	44 70       	andi	r20, 0x04	; 4
     e5a:	50 70       	andi	r21, 0x00	; 0
     e5c:	55 95       	asr	r21
     e5e:	47 95       	ror	r20
     e60:	55 95       	asr	r21
     e62:	47 95       	ror	r20
     e64:	84 0f       	add	r24, r20
     e66:	95 1f       	adc	r25, r21
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	22 70       	andi	r18, 0x02	; 2
     e70:	30 70       	andi	r19, 0x00	; 0
     e72:	35 95       	asr	r19
     e74:	27 95       	ror	r18
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	88 0f       	add	r24, r24
     e7c:	61 70       	andi	r22, 0x01	; 1
     e7e:	86 0f       	add	r24, r22
#endif


		}

		if(getSelector() == 0) {	// no control
     e80:	09 f0       	breq	.+2      	; 0xe84 <main+0x192>
     e82:	c1 c0       	rjmp	.+386    	; 0x1006 <main+0x314>

			if(start_control) {
     e84:	80 91 b6 03 	lds	r24, 0x03B6
     e88:	88 23       	and	r24, r24
     e8a:	09 f4       	brne	.+2      	; 0xe8e <main+0x19c>
     e8c:	e2 c0       	rjmp	.+452    	; 0x1052 <main+0x360>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     e8e:	80 91 8c 03 	lds	r24, 0x038C
     e92:	90 91 8d 03 	lds	r25, 0x038D
     e96:	a0 91 8e 03 	lds	r26, 0x038E
     e9a:	b0 91 8f 03 	lds	r27, 0x038F
     e9e:	80 93 b9 03 	sts	0x03B9, r24
     ea2:	90 93 ba 03 	sts	0x03BA, r25
     ea6:	a0 93 bb 03 	sts	0x03BB, r26
     eaa:	b0 93 bc 03 	sts	0x03BC, r27
				pwm_left_working = pwm_left_desired;	
     eae:	80 91 90 03 	lds	r24, 0x0390
     eb2:	90 91 91 03 	lds	r25, 0x0391
     eb6:	a0 91 92 03 	lds	r26, 0x0392
     eba:	b0 91 93 03 	lds	r27, 0x0393
     ebe:	80 93 bd 03 	sts	0x03BD, r24
     ec2:	90 93 be 03 	sts	0x03BE, r25
     ec6:	a0 93 bf 03 	sts	0x03BF, r26
     eca:	b0 93 c0 03 	sts	0x03C0, r27
				start_control = 0;
     ece:	10 92 b6 03 	sts	0x03B6, r1
				update_pwm = 1;
     ed2:	10 93 c1 03 	sts	0x03C1, r17
     ed6:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
     ed8:	80 91 b4 03 	lds	r24, 0x03B4
     edc:	88 23       	and	r24, r24
     ede:	91 f0       	breq	.+36     	; 0xf04 <main+0x212>
			last_left_vel = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
     ee0:	80 91 7a 03 	lds	r24, 0x037A
     ee4:	90 91 7b 03 	lds	r25, 0x037B
     ee8:	60 91 72 03 	lds	r22, 0x0372
     eec:	70 91 73 03 	lds	r23, 0x0373
     ef0:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
     ef4:	70 93 81 03 	sts	0x0381, r23
     ef8:	60 93 80 03 	sts	0x0380, r22
			left_vel_changed = 1;
     efc:	10 93 b7 03 	sts	0x03B7, r17
			compute_left_vel = 0;
     f00:	10 92 b4 03 	sts	0x03B4, r1
		}

		if(compute_right_vel) {
     f04:	80 91 b5 03 	lds	r24, 0x03B5
     f08:	88 23       	and	r24, r24
     f0a:	91 f0       	breq	.+36     	; 0xf30 <main+0x23e>
			last_right_vel = (unsigned int)(last_right_vel_sum/last_num_rvel_samples_avg);
     f0c:	80 91 7e 03 	lds	r24, 0x037E
     f10:	90 91 7f 03 	lds	r25, 0x037F
     f14:	60 91 76 03 	lds	r22, 0x0376
     f18:	70 91 77 03 	lds	r23, 0x0377
     f1c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
     f20:	70 93 83 03 	sts	0x0383, r23
     f24:	60 93 82 03 	sts	0x0382, r22
			right_vel_changed = 1;
     f28:	10 93 b8 03 	sts	0x03B8, r17
			compute_right_vel = 0;
     f2c:	10 92 b5 03 	sts	0x03B5, r1
		}

		if(update_pwm) {
     f30:	22 23       	and	r18, r18
     f32:	09 f4       	brne	.+2      	; 0xf36 <main+0x244>
     f34:	15 cf       	rjmp	.-470    	; 0xd60 <main+0x6e>

			update_pwm = 0;
     f36:	10 92 c1 03 	sts	0x03C1, r1
			pwm_left = pwm_left_working;
     f3a:	20 91 bd 03 	lds	r18, 0x03BD
     f3e:	30 91 be 03 	lds	r19, 0x03BE
     f42:	40 91 bf 03 	lds	r20, 0x03BF
     f46:	50 91 c0 03 	lds	r21, 0x03C0
     f4a:	20 93 88 03 	sts	0x0388, r18
     f4e:	30 93 89 03 	sts	0x0389, r19
     f52:	40 93 8a 03 	sts	0x038A, r20
     f56:	50 93 8b 03 	sts	0x038B, r21
			pwm_right = pwm_right_working;
     f5a:	80 91 b9 03 	lds	r24, 0x03B9
     f5e:	90 91 ba 03 	lds	r25, 0x03BA
     f62:	a0 91 bb 03 	lds	r26, 0x03BB
     f66:	b0 91 bc 03 	lds	r27, 0x03BC
     f6a:	80 93 84 03 	sts	0x0384, r24
     f6e:	90 93 85 03 	sts	0x0385, r25
     f72:	a0 93 86 03 	sts	0x0386, r26
     f76:	b0 93 87 03 	sts	0x0387, r27

			if(pwm_right >= 0) {
     f7a:	b7 fd       	sbrc	r27, 7
     f7c:	f9 c3       	rjmp	.+2034   	; 0x1770 <main+0xa7e>
				OCR3A = (int)pwm_right;
     f7e:	90 93 99 00 	sts	0x0099, r25
     f82:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
     f86:	57 fd       	sbrc	r21, 7
     f88:	d2 c3       	rjmp	.+1956   	; 0x172e <main+0xa3c>
				OCR4A = pwm_left;
     f8a:	30 93 a9 00 	sts	0x00A9, r19
     f8e:	20 93 a8 00 	sts	0x00A8, r18
			} else {
				OCR4B = -pwm_left;
			}

			if(pwm_left == 0) {
     f92:	21 15       	cp	r18, r1
     f94:	31 05       	cpc	r19, r1
     f96:	41 05       	cpc	r20, r1
     f98:	51 05       	cpc	r21, r1
     f9a:	09 f0       	breq	.+2      	; 0xf9e <main+0x2ac>
     f9c:	f1 c3       	rjmp	.+2018   	; 0x1780 <main+0xa8e>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     f9e:	80 91 a0 00 	lds	r24, 0x00A0
     fa2:	8f 75       	andi	r24, 0x5F	; 95
     fa4:	80 93 a0 00 	sts	0x00A0, r24
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     fa8:	80 91 02 01 	lds	r24, 0x0102
     fac:	87 7e       	andi	r24, 0xE7	; 231
     fae:	80 93 02 01 	sts	0x0102, r24
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
     fb2:	80 91 72 00 	lds	r24, 0x0072
     fb6:	89 7f       	andi	r24, 0xF9	; 249
     fb8:	80 93 72 00 	sts	0x0072, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
     fbc:	80 91 72 00 	lds	r24, 0x0072
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
				TCCR4A |= (1 << COM4B1);		// enable OCB
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
			}

			if(pwm_right == 0) {
     fc6:	80 91 84 03 	lds	r24, 0x0384
     fca:	90 91 85 03 	lds	r25, 0x0385
     fce:	a0 91 86 03 	lds	r26, 0x0386
     fd2:	b0 91 87 03 	lds	r27, 0x0387
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	a1 05       	cpc	r26, r1
     fda:	b1 05       	cpc	r27, r1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <main+0x2ee>
     fde:	20 c3       	rjmp	.+1600   	; 0x1620 <main+0x92e>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     fe0:	80 91 90 00 	lds	r24, 0x0090
     fe4:	8f 75       	andi	r24, 0x5F	; 95
     fe6:	80 93 90 00 	sts	0x0090, r24
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     fea:	8e b1       	in	r24, 0x0e	; 14
     fec:	87 7e       	andi	r24, 0xE7	; 231
     fee:	8e b9       	out	0x0e, r24	; 14
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
     ff0:	80 91 71 00 	lds	r24, 0x0071
     ff4:	89 7f       	andi	r24, 0xF9	; 249
     ff6:	80 93 71 00 	sts	0x0071, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
     ffa:	80 91 71 00 	lds	r24, 0x0071
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	80 93 71 00 	sts	0x0071, r24
    1004:	ad ce       	rjmp	.-678    	; 0xd60 <main+0x6e>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    1006:	66 b1       	in	r22, 0x06	; 6
    1008:	46 b1       	in	r20, 0x06	; 6
    100a:	86 b1       	in	r24, 0x06	; 6
    100c:	26 b1       	in	r18, 0x06	; 6
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 70       	andi	r24, 0x08	; 8
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	44 70       	andi	r20, 0x04	; 4
    1028:	50 70       	andi	r21, 0x00	; 0
    102a:	55 95       	asr	r21
    102c:	47 95       	ror	r20
    102e:	55 95       	asr	r21
    1030:	47 95       	ror	r20
    1032:	84 0f       	add	r24, r20
    1034:	95 1f       	adc	r25, r21
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	22 70       	andi	r18, 0x02	; 2
    103e:	30 70       	andi	r19, 0x00	; 0
    1040:	35 95       	asr	r19
    1042:	27 95       	ror	r18
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	88 0f       	add	r24, r24
    104a:	61 70       	andi	r22, 0x01	; 1
    104c:	86 0f       	add	r24, r22
				pwm_left_working = pwm_left_desired;	
				start_control = 0;
				update_pwm = 1;
			}

		} else if(getSelector() == 2) {		// speed control
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	19 f0       	breq	.+6      	; 0x1058 <main+0x366>

			if(start_control && left_vel_changed && right_vel_changed) {
    1052:	20 91 c1 03 	lds	r18, 0x03C1
    1056:	40 cf       	rjmp	.-384    	; 0xed8 <main+0x1e6>
    1058:	80 91 b6 03 	lds	r24, 0x03B6
    105c:	88 23       	and	r24, r24
    105e:	c9 f3       	breq	.-14     	; 0x1052 <main+0x360>
    1060:	80 91 b7 03 	lds	r24, 0x03B7
    1064:	88 23       	and	r24, r24
    1066:	a9 f3       	breq	.-22     	; 0x1052 <main+0x360>
    1068:	80 91 b8 03 	lds	r24, 0x03B8
    106c:	88 23       	and	r24, r24
    106e:	89 f3       	breq	.-30     	; 0x1052 <main+0x360>
				pwm_right_working = pwm_right_desired;
    1070:	80 91 8c 03 	lds	r24, 0x038C
    1074:	90 91 8d 03 	lds	r25, 0x038D
    1078:	a0 91 8e 03 	lds	r26, 0x038E
    107c:	b0 91 8f 03 	lds	r27, 0x038F
    1080:	80 93 b9 03 	sts	0x03B9, r24
    1084:	90 93 ba 03 	sts	0x03BA, r25
    1088:	a0 93 bb 03 	sts	0x03BB, r26
    108c:	b0 93 bc 03 	sts	0x03BC, r27
				pwm_left_working = pwm_left_desired;
    1090:	80 91 90 03 	lds	r24, 0x0390
    1094:	90 91 91 03 	lds	r25, 0x0391
    1098:	a0 91 92 03 	lds	r26, 0x0392
    109c:	b0 91 93 03 	lds	r27, 0x0393
    10a0:	80 93 bd 03 	sts	0x03BD, r24
    10a4:	90 93 be 03 	sts	0x03BE, r25
    10a8:	a0 93 bf 03 	sts	0x03BF, r26
    10ac:	b0 93 c0 03 	sts	0x03C0, r27
				start_control = 0;
    10b0:	10 92 b6 03 	sts	0x03B6, r1
				left_vel_changed = 0;
    10b4:	10 92 b7 03 	sts	0x03B7, r1
				right_vel_changed = 0;
    10b8:	10 92 b8 03 	sts	0x03B8, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    10bc:	8d eb       	ldi	r24, 0xBD	; 189
    10be:	93 e0       	ldi	r25, 0x03	; 3
    10c0:	69 eb       	ldi	r22, 0xB9	; 185
    10c2:	73 e0       	ldi	r23, 0x03	; 3
    10c4:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <start_orizzontal_speed_control>
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    10c8:	10 93 c1 03 	sts	0x03C1, r17
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	04 cf       	rjmp	.-504    	; 0xed8 <main+0x1e6>

		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	60 e7       	ldi	r22, 0x70	; 112
    10d4:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <mirf_config_register>

			mirf_get_data(rfData);
    10d8:	87 ef       	ldi	r24, 0xF7	; 247
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <mirf_get_data>
			flush_rx_fifo();
    10e0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && (rfData[3]==0b00001000 || rfData[3]==0b00011000) && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    10e4:	30 91 fb 03 	lds	r19, 0x03FB
    10e8:	23 2f       	mov	r18, r19
    10ea:	2f 77       	andi	r18, 0x7F	; 127
    10ec:	20 93 c3 03 	sts	0x03C3, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    10f0:	90 91 fc 03 	lds	r25, 0x03FC
    10f4:	89 2f       	mov	r24, r25
    10f6:	8f 77       	andi	r24, 0x7F	; 127
    10f8:	80 93 c2 03 	sts	0x03C2, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    10fc:	37 fd       	sbrc	r19, 7
    10fe:	86 c3       	rjmp	.+1804   	; 0x180c <main+0xb1a>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	30 95       	com	r19
    110c:	21 95       	neg	r18
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	44 27       	eor	r20, r20
    1112:	37 fd       	sbrc	r19, 7
    1114:	40 95       	com	r20
    1116:	54 2f       	mov	r21, r20
    1118:	20 93 8c 03 	sts	0x038C, r18
    111c:	30 93 8d 03 	sts	0x038D, r19
    1120:	40 93 8e 03 	sts	0x038E, r20
    1124:	50 93 8f 03 	sts	0x038F, r21
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1128:	97 fd       	sbrc	r25, 7
    112a:	5e c3       	rjmp	.+1724   	; 0x17e8 <main+0xaf6>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	90 95       	com	r25
    1138:	81 95       	neg	r24
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	aa 27       	eor	r26, r26
    113e:	97 fd       	sbrc	r25, 7
    1140:	a0 95       	com	r26
    1142:	ba 2f       	mov	r27, r26
    1144:	80 93 90 03 	sts	0x0390, r24
    1148:	90 93 91 03 	sts	0x0391, r25
    114c:	a0 93 92 03 	sts	0x0392, r26
    1150:	b0 93 93 03 	sts	0x0393, r27
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1154:	24 33       	cpi	r18, 0x34	; 52
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	36 07       	cpc	r19, r22
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	46 07       	cpc	r20, r22
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	56 07       	cpc	r21, r22
    1162:	64 f0       	brlt	.+24     	; 0x117c <main+0x48a>
    1164:	20 92 8c 03 	sts	0x038C, r2
    1168:	30 92 8d 03 	sts	0x038D, r3
    116c:	40 92 8e 03 	sts	0x038E, r4
    1170:	50 92 8f 03 	sts	0x038F, r5
    1174:	23 e3       	ldi	r18, 0x33	; 51
    1176:	31 e0       	ldi	r19, 0x01	; 1
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    117c:	84 33       	cpi	r24, 0x34	; 52
    117e:	e1 e0       	ldi	r30, 0x01	; 1
    1180:	9e 07       	cpc	r25, r30
    1182:	e0 e0       	ldi	r30, 0x00	; 0
    1184:	ae 07       	cpc	r26, r30
    1186:	e0 e0       	ldi	r30, 0x00	; 0
    1188:	be 07       	cpc	r27, r30
    118a:	64 f0       	brlt	.+24     	; 0x11a4 <main+0x4b2>
    118c:	20 92 90 03 	sts	0x0390, r2
    1190:	30 92 91 03 	sts	0x0391, r3
    1194:	40 92 92 03 	sts	0x0392, r4
    1198:	50 92 93 03 	sts	0x0393, r5
    119c:	83 e3       	ldi	r24, 0x33	; 51
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    11a4:	2d 3c       	cpi	r18, 0xCD	; 205
    11a6:	fe ef       	ldi	r31, 0xFE	; 254
    11a8:	3f 07       	cpc	r19, r31
    11aa:	ff ef       	ldi	r31, 0xFF	; 255
    11ac:	4f 07       	cpc	r20, r31
    11ae:	ff ef       	ldi	r31, 0xFF	; 255
    11b0:	5f 07       	cpc	r21, r31
    11b2:	44 f4       	brge	.+16     	; 0x11c4 <main+0x4d2>
    11b4:	60 92 8c 03 	sts	0x038C, r6
    11b8:	70 92 8d 03 	sts	0x038D, r7
    11bc:	80 92 8e 03 	sts	0x038E, r8
    11c0:	90 92 8f 03 	sts	0x038F, r9
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    11c4:	8d 3c       	cpi	r24, 0xCD	; 205
    11c6:	2e ef       	ldi	r18, 0xFE	; 254
    11c8:	92 07       	cpc	r25, r18
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	a2 07       	cpc	r26, r18
    11ce:	2f ef       	ldi	r18, 0xFF	; 255
    11d0:	b2 07       	cpc	r27, r18
    11d2:	44 f4       	brge	.+16     	; 0x11e4 <main+0x4f2>
    11d4:	60 92 90 03 	sts	0x0390, r6
    11d8:	70 92 91 03 	sts	0x0391, r7
    11dc:	80 92 92 03 	sts	0x0392, r8
    11e0:	90 92 93 03 	sts	0x0393, r9
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    11e4:	20 91 f7 03 	lds	r18, 0x03F7
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	30 93 f2 03 	sts	0x03F2, r19
    11ee:	20 93 f1 03 	sts	0x03F1, r18
    11f2:	e0 91 f8 03 	lds	r30, 0x03F8
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	f0 93 f4 03 	sts	0x03F4, r31
    11fc:	e0 93 f3 03 	sts	0x03F3, r30
    1200:	80 91 f9 03 	lds	r24, 0x03F9
    1204:	e8 2e       	mov	r14, r24
    1206:	ff 24       	eor	r15, r15
    1208:	f0 92 f6 03 	sts	0x03F6, r15
    120c:	e0 92 f5 03 	sts	0x03F5, r14
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1210:	92 2f       	mov	r25, r18
    1212:	88 27       	eor	r24, r24
    1214:	82 1b       	sub	r24, r18
    1216:	93 0b       	sbc	r25, r19
    1218:	b5 01       	movw	r22, r10
    121a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    121e:	26 2f       	mov	r18, r22
    1220:	20 95       	com	r18
    1222:	20 93 0d 02 	sts	0x020D, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1226:	9e 2f       	mov	r25, r30
    1228:	88 27       	eor	r24, r24
    122a:	8e 1b       	sub	r24, r30
    122c:	9f 0b       	sbc	r25, r31
    122e:	b5 01       	movw	r22, r10
    1230:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    1234:	60 95       	com	r22
    1236:	60 93 0f 02 	sts	0x020F, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    123a:	9e 2d       	mov	r25, r14
    123c:	88 27       	eor	r24, r24
    123e:	8e 19       	sub	r24, r14
    1240:	9f 09       	sbc	r25, r15
    1242:	b5 01       	movw	r22, r10
    1244:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    1248:	60 95       	com	r22
    124a:	60 93 0e 02 	sts	0x020E, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    124e:	22 23       	and	r18, r18
    1250:	09 f4       	brne	.+2      	; 0x1254 <main+0x562>
    1252:	c3 c2       	rjmp	.+1414   	; 0x17da <main+0xae8>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1254:	80 91 80 00 	lds	r24, 0x0080
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	30 93 89 00 	sts	0x0089, r19
    1264:	20 93 88 00 	sts	0x0088, r18
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    1268:	80 91 0e 02 	lds	r24, 0x020E

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <main+0x580>
    1270:	ad c2       	rjmp	.+1370   	; 0x17cc <main+0xada>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    1272:	90 91 80 00 	lds	r25, 0x0080
    1276:	90 62       	ori	r25, 0x20	; 32
    1278:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	90 93 8b 00 	sts	0x008B, r25
    1282:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    1286:	80 91 0f 02 	lds	r24, 0x020F

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <main+0x59e>
    128e:	97 c2       	rjmp	.+1326   	; 0x17be <main+0xacc>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    1290:	90 91 80 00 	lds	r25, 0x0080
    1294:	98 60       	ori	r25, 0x08	; 8
    1296:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	90 93 8d 00 	sts	0x008D, r25
    12a0:	80 93 8c 00 	sts	0x008C, r24
			packetId = (packetId+1)%256;
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}
			ackPayload[0] = proximityValue[0]&0xFF;
    12a4:	80 91 31 03 	lds	r24, 0x0331
    12a8:	90 91 32 03 	lds	r25, 0x0332
    12ac:	80 93 e1 03 	sts	0x03E1, r24
			ackPayload[1] = proximityValue[0]>>8;
    12b0:	80 91 31 03 	lds	r24, 0x0331
    12b4:	90 91 32 03 	lds	r25, 0x0332
    12b8:	90 93 e2 03 	sts	0x03E2, r25
			ackPayload[2] = proximityValue[1]&0xFF;
    12bc:	80 91 33 03 	lds	r24, 0x0333
    12c0:	90 91 34 03 	lds	r25, 0x0334
    12c4:	80 93 e3 03 	sts	0x03E3, r24
			ackPayload[3] = proximityValue[1]>>8;
    12c8:	80 91 33 03 	lds	r24, 0x0333
    12cc:	90 91 34 03 	lds	r25, 0x0334
    12d0:	90 93 e4 03 	sts	0x03E4, r25
			ackPayload[4] = proximityValue[2]&0xFF;
    12d4:	80 91 35 03 	lds	r24, 0x0335
    12d8:	90 91 36 03 	lds	r25, 0x0336
    12dc:	80 93 e5 03 	sts	0x03E5, r24
			ackPayload[5] = proximityValue[2]>>8;
    12e0:	80 91 35 03 	lds	r24, 0x0335
    12e4:	90 91 36 03 	lds	r25, 0x0336
    12e8:	90 93 e6 03 	sts	0x03E6, r25
			ackPayload[6] = proximityValue[3]&0xFF;
    12ec:	80 91 37 03 	lds	r24, 0x0337
    12f0:	90 91 38 03 	lds	r25, 0x0338
    12f4:	80 93 e7 03 	sts	0x03E7, r24
			ackPayload[7] = proximityValue[3]>>8;
    12f8:	80 91 37 03 	lds	r24, 0x0337
    12fc:	90 91 38 03 	lds	r25, 0x0338
    1300:	90 93 e8 03 	sts	0x03E8, r25
			ackPayload[8] = proximityValue[18]&0xFF;
    1304:	80 91 55 03 	lds	r24, 0x0355
    1308:	90 91 56 03 	lds	r25, 0x0356
    130c:	80 93 e9 03 	sts	0x03E9, r24
			ackPayload[9] = proximityValue[18]>>8;
    1310:	80 91 55 03 	lds	r24, 0x0355
    1314:	90 91 56 03 	lds	r25, 0x0356
    1318:	90 93 ea 03 	sts	0x03EA, r25
			ackPayload[10] = proximityValue[19]&0xFF;
    131c:	80 91 57 03 	lds	r24, 0x0357
    1320:	90 91 58 03 	lds	r25, 0x0358
    1324:	80 93 eb 03 	sts	0x03EB, r24
			ackPayload[11] = proximityValue[19]>>8;
    1328:	80 91 57 03 	lds	r24, 0x0357
    132c:	90 91 58 03 	lds	r25, 0x0358
    1330:	90 93 ec 03 	sts	0x03EC, r25
			ackPayload[12] = proximityValue[20]&0xFF;
    1334:	80 91 59 03 	lds	r24, 0x0359
    1338:	90 91 5a 03 	lds	r25, 0x035A
    133c:	80 93 ed 03 	sts	0x03ED, r24
			ackPayload[13] = proximityValue[20]>>8;
    1340:	80 91 59 03 	lds	r24, 0x0359
    1344:	90 91 5a 03 	lds	r25, 0x035A
    1348:	90 93 ee 03 	sts	0x03EE, r25
			ackPayload[14] = proximityValue[21]&0xFF;
    134c:	80 91 5b 03 	lds	r24, 0x035B
    1350:	90 91 5c 03 	lds	r25, 0x035C
    1354:	80 93 ef 03 	sts	0x03EF, r24
			ackPayload[15] = proximityValue[21]>>8;
    1358:	80 91 5b 03 	lds	r24, 0x035B
    135c:	90 91 5c 03 	lds	r25, 0x035C
    1360:	90 93 f0 03 	sts	0x03F0, r25
			writeAckPayload(ackPayload, 16);
    1364:	81 ee       	ldi	r24, 0xE1	; 225
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	60 e1       	ldi	r22, 0x10	; 16
    136a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <writeAckPayload>
    136e:	64 cd       	rjmp	.-1336   	; 0xe38 <main+0x146>

		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 10000) {
			delayCounter = 0;
    1370:	10 92 df 03 	sts	0x03DF, r1
    1374:	10 92 de 03 	sts	0x03DE, r1

			sendAdcValues = 0;
    1378:	10 92 c5 03 	sts	0x03C5, r1
			myTimeout = 0;
    137c:	10 92 dd 03 	sts	0x03DD, r1

			//PORTB &= ~(1 << 6);
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
    1380:	8a ea       	ldi	r24, 0xAA	; 170
    1382:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(0xAA);
    1386:	8a ea       	ldi	r24, 0xAA	; 170
    1388:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			for(i=0; i<24; i++) {
    138c:	ee 24       	eor	r14, r14
    138e:	ff 24       	eor	r15, r15
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
    1390:	67 01       	movw	r12, r14
    1392:	cc 0c       	add	r12, r12
    1394:	dd 1c       	adc	r13, r13
    1396:	41 e3       	ldi	r20, 0x31	; 49
    1398:	53 e0       	ldi	r21, 0x03	; 3
    139a:	c4 0e       	add	r12, r20
    139c:	d5 1e       	adc	r13, r21
    139e:	d6 01       	movw	r26, r12
    13a0:	8d 91       	ld	r24, X+
    13a2:	9c 91       	ld	r25, X
    13a4:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
				usartTransmit((unsigned char)(proximityValue[i]>>8));
    13a8:	f6 01       	movw	r30, r12
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	89 2f       	mov	r24, r25
    13b0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
			usartTransmit(0xAA);
			for(i=0; i<24; i++) {
    13b4:	08 94       	sec
    13b6:	e1 1c       	adc	r14, r1
    13b8:	f1 1c       	adc	r15, r1
    13ba:	f8 e1       	ldi	r31, 0x18	; 24
    13bc:	ef 16       	cp	r14, r31
    13be:	f1 04       	cpc	r15, r1
    13c0:	39 f7       	brne	.-50     	; 0x1390 <main+0x69e>
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
				usartTransmit((unsigned char)(proximityValue[i]>>8));
			}
			//usartTransmit(getselector());
			//usartTransmit(getselector());
			usartTransmit(last_right_current&0xFF);
    13c2:	80 91 6e 03 	lds	r24, 0x036E
    13c6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(last_right_current>>8);
    13ca:	80 91 6f 03 	lds	r24, 0x036F
    13ce:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(last_left_current&0xFF);
    13d2:	80 91 6c 03 	lds	r24, 0x036C
    13d6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(last_left_current>>8);
    13da:	80 91 6d 03 	lds	r24, 0x036D
    13de:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			

			// two possible cases cause the number of samples to be zero:
			// - when the pwm is at its maximum (thus no passive phase)
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
    13e2:	80 91 76 03 	lds	r24, 0x0376
    13e6:	90 91 77 03 	lds	r25, 0x0377
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <main+0x6fe>
    13ee:	98 c1       	rjmp	.+816    	; 0x1720 <main+0xa2e>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
    13f0:	80 91 7e 03 	lds	r24, 0x037E
    13f4:	90 91 7f 03 	lds	r25, 0x037F
    13f8:	60 91 76 03 	lds	r22, 0x0376
    13fc:	70 91 77 03 	lds	r23, 0x0377
    1400:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    1404:	86 2f       	mov	r24, r22
    1406:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
    140a:	80 91 7e 03 	lds	r24, 0x037E
    140e:	90 91 7f 03 	lds	r25, 0x037F
    1412:	60 91 76 03 	lds	r22, 0x0376
    1416:	70 91 77 03 	lds	r23, 0x0377
    141a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    141e:	87 2f       	mov	r24, r23
    1420:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			//usartTransmit((unsigned char)(last_num_rvel_samples_avg>>8));

			//usartTransmit((unsigned char)(last_num_lvel_samples_avg&0xFF));
			//usartTransmit((unsigned char)(last_num_lvel_samples_avg>>8));
						
			if(last_num_lvel_samples_avg != 0) {
    1424:	80 91 72 03 	lds	r24, 0x0372
    1428:	90 91 73 03 	lds	r25, 0x0373
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	09 f4       	brne	.+2      	; 0x1432 <main+0x740>
    1430:	70 c1       	rjmp	.+736    	; 0x1712 <main+0xa20>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
    1432:	80 91 7a 03 	lds	r24, 0x037A
    1436:	90 91 7b 03 	lds	r25, 0x037B
    143a:	60 91 72 03 	lds	r22, 0x0372
    143e:	70 91 73 03 	lds	r23, 0x0373
    1442:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    1446:	86 2f       	mov	r24, r22
    1448:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
    144c:	80 91 7a 03 	lds	r24, 0x037A
    1450:	90 91 7b 03 	lds	r25, 0x037B
    1454:	60 91 72 03 	lds	r22, 0x0372
    1458:	70 91 73 03 	lds	r23, 0x0373
    145c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__udivmodhi4>
    1460:	87 2f       	mov	r24, r23
    1462:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
    1466:	80 91 12 02 	lds	r24, 0x0212
    146a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
	i2c_write(0x32);							// sends address to read from
    146e:	82 e3       	ldi	r24, 0x32	; 50
    1470:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
    1474:	80 91 12 02 	lds	r24, 0x0212
    1478:	8f 5f       	subi	r24, 0xFF	; 255
    147a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <i2c_rep_start>

	for(i=0; i<5; i++) {
		buff[i] = i2c_readAck();				// read one byte
    147e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    1482:	d8 2e       	mov	r13, r24
    1484:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    1488:	8b 87       	std	Y+11, r24	; 0x0b
    148a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    148e:	f8 2e       	mov	r15, r24
    1490:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    1494:	e8 2e       	mov	r14, r24
    1496:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    149a:	08 2f       	mov	r16, r24
	}
	buff[i] = i2c_readNak();					// read last byte
    149c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <i2c_readNak>
    14a0:	c8 2e       	mov	r12, r24
	i2c_stop();									// set stop conditon = release bus
    14a2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>

	// 16 bits values in 2's complement
	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
    14a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	2d 2d       	mov	r18, r13
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	49 81       	ldd	r20, Y+1	; 0x01
    14b2:	5a 81       	ldd	r21, Y+2	; 0x02
    14b4:	24 2b       	or	r18, r20
    14b6:	35 2b       	or	r19, r21
    14b8:	30 93 ca 03 	sts	0x03CA, r19
    14bc:	20 93 c9 03 	sts	0x03C9, r18
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
    14c0:	ec 82       	std	Y+4, r14	; 0x04
    14c2:	1b 82       	std	Y+3, r1	; 0x03
    14c4:	4f 2d       	mov	r20, r15
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	48 2b       	or	r20, r24
    14ce:	59 2b       	or	r21, r25
    14d0:	50 93 cc 03 	sts	0x03CC, r21
    14d4:	40 93 cb 03 	sts	0x03CB, r20
	accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
    14d8:	ce 82       	std	Y+6, r12	; 0x06
    14da:	1d 82       	std	Y+5, r1	; 0x05
    14dc:	80 2f       	mov	r24, r16
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	ad 81       	ldd	r26, Y+5	; 0x05
    14e2:	be 81       	ldd	r27, Y+6	; 0x06
    14e4:	8a 2b       	or	r24, r26
    14e6:	9b 2b       	or	r25, r27
    14e8:	90 93 ce 03 	sts	0x03CE, r25
    14ec:	80 93 cd 03 	sts	0x03CD, r24
				//usartTransmit((unsigned char)((0)&0xFF));
				//usartTransmit((unsigned char)((0)>>8));
			}
			
			readAccelXYZ();
			usartTransmit(accX&0xFF);
    14f0:	82 2f       	mov	r24, r18
    14f2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(accX>>8);
    14f6:	80 91 ca 03 	lds	r24, 0x03CA
    14fa:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(accY&0xFF);
    14fe:	80 91 cb 03 	lds	r24, 0x03CB
    1502:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(accY>>8);
    1506:	80 91 cc 03 	lds	r24, 0x03CC
    150a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(accZ&0xFF);
    150e:	80 91 cd 03 	lds	r24, 0x03CD
    1512:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(accZ>>8);	
    1516:	80 91 ce 03 	lds	r24, 0x03CE
    151a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
    151e:	80 91 12 02 	lds	r24, 0x0212
    1522:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <i2c_start>
	i2c_write(0x32);							// sends address to read from
    1526:	82 e3       	ldi	r24, 0x32	; 50
    1528:	0e 94 89 16 	call	0x2d12	; 0x2d12 <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
    152c:	80 91 12 02 	lds	r24, 0x0212
    1530:	8f 5f       	subi	r24, 0xFF	; 255
    1532:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <i2c_rep_start>

	for(i=0; i<3; i++) {
		buff[i] = i2c_readAck();				// read one byte
    1536:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    153a:	f8 2e       	mov	r15, r24
    153c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    1540:	d8 2e       	mov	r13, r24
    1542:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <i2c_readAck>
    1546:	08 2f       	mov	r16, r24
	}
	buff[i] = i2c_readNak();					// read last byte
    1548:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <i2c_readNak>
    154c:	e8 2e       	mov	r14, r24
	i2c_stop();									// set stop conditon = release bus
    154e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
    1552:	d8 86       	std	Y+8, r13	; 0x08
    1554:	1f 82       	std	Y+7, r1	; 0x07
    1556:	6f 2d       	mov	r22, r15
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	ef 81       	ldd	r30, Y+7	; 0x07
    155c:	f8 85       	ldd	r31, Y+8	; 0x08
    155e:	6e 2b       	or	r22, r30
    1560:	7f 2b       	or	r23, r31
#ifdef ACC_MMA7455L

#endif

#ifdef ACC_ADXL345
	accX = accX-accOffsetX;
    1562:	20 91 d5 03 	lds	r18, 0x03D5
    1566:	30 91 d6 03 	lds	r19, 0x03D6
    156a:	62 1b       	sub	r22, r18
    156c:	73 0b       	sbc	r23, r19
    156e:	70 93 ca 03 	sts	0x03CA, r23
    1572:	60 93 c9 03 	sts	0x03C9, r22
	}
	buff[i] = i2c_readNak();					// read last byte
	i2c_stop();									// set stop conditon = release bus

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
    1576:	ea 86       	std	Y+10, r14	; 0x0a
    1578:	19 86       	std	Y+9, r1	; 0x09
    157a:	20 2f       	mov	r18, r16
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	49 85       	ldd	r20, Y+9	; 0x09
    1580:	5a 85       	ldd	r21, Y+10	; 0x0a
    1582:	24 2b       	or	r18, r20
    1584:	35 2b       	or	r19, r21

#endif

#ifdef ACC_ADXL345
	accX = accX-accOffsetX;
	accY = accY-accOffsetY;
    1586:	80 91 d7 03 	lds	r24, 0x03D7
    158a:	90 91 d8 03 	lds	r25, 0x03D8
    158e:	28 1b       	sub	r18, r24
    1590:	39 0b       	sbc	r19, r25
    1592:	30 93 cc 03 	sts	0x03CC, r19
    1596:	20 93 cb 03 	sts	0x03CB, r18
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
    159a:	88 27       	eor	r24, r24
    159c:	77 fd       	sbrc	r23, 7
    159e:	80 95       	com	r24
    15a0:	98 2f       	mov	r25, r24
    15a2:	2b 87       	std	Y+11, r18	; 0x0b
    15a4:	3c 87       	std	Y+12, r19	; 0x0c
    15a6:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
    15ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    15b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    15b2:	b9 01       	movw	r22, r18
    15b4:	88 27       	eor	r24, r24
    15b6:	77 fd       	sbrc	r23, 7
    15b8:	80 95       	com	r24
    15ba:	98 2f       	mov	r25, r24
    15bc:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    15c0:	9b 01       	movw	r18, r22
    15c2:	ac 01       	movw	r20, r24
    15c4:	c7 01       	movw	r24, r14
    15c6:	b6 01       	movw	r22, r12
    15c8:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <atan2>
    15cc:	21 ee       	ldi	r18, 0xE1	; 225
    15ce:	3e e2       	ldi	r19, 0x2E	; 46
    15d0:	45 e6       	ldi	r20, 0x65	; 101
    15d2:	52 e4       	ldi	r21, 0x42	; 66
    15d4:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    15d8:	0e 94 ed 1b 	call	0x37da	; 0x37da <__fixsfsi>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	30 93 dc 03 	sts	0x03DC, r19
    15e6:	20 93 db 03 	sts	0x03DB, r18

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
    15ea:	77 ff       	sbrs	r23, 7
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <main+0x908>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
    15ee:	88 59       	subi	r24, 0x98	; 152
    15f0:	9e 4f       	sbci	r25, 0xFE	; 254
    15f2:	90 93 dc 03 	sts	0x03DC, r25
    15f6:	80 93 db 03 	sts	0x03DB, r24
			usartTransmit(accZ&0xFF);
			usartTransmit(accZ>>8);	
			//PORTB &= ~(1 << 6);
			computeAngle();
			//PORTB |= (1 << 6);
			usartTransmit(currentAngle&0xFF);
    15fa:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(currentAngle>>8);		
    15fe:	80 91 dc 03 	lds	r24, 0x03DC
    1602:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			
			usartTransmit(batteryLevel&0xFF);
    1606:	80 91 65 03 	lds	r24, 0x0365
    160a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			usartTransmit(batteryLevel>>8);	
    160e:	80 91 66 03 	lds	r24, 0x0366
    1612:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
			
			usartTransmit(ir_move);									
    1616:	80 91 c6 03 	lds	r24, 0x03C6
    161a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
    161e:	07 cc       	rjmp	.-2034   	; 0xe2e <main+0x13c>
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			}else if(pwm_right > 0) {   		// move forward
    1620:	18 16       	cp	r1, r24
    1622:	19 06       	cpc	r1, r25
    1624:	1a 06       	cpc	r1, r26
    1626:	1b 06       	cpc	r1, r27
    1628:	0c f0       	brlt	.+2      	; 0x162c <main+0x93a>
    162a:	ba c2       	rjmp	.+1396   	; 0x1ba0 <main+0xeae>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    162c:	80 91 90 00 	lds	r24, 0x0090
    1630:	8f 7d       	andi	r24, 0xDF	; 223
    1632:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    1636:	80 91 71 00 	lds	r24, 0x0071
    163a:	8b 7f       	andi	r24, 0xFB	; 251
    163c:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 4);				// output to 0
    1640:	74 98       	cbi	0x0e, 4	; 14
				TCCR3A |= (1 << COM3A1);		// enable OCA
    1642:	80 91 90 00 	lds	r24, 0x0090
    1646:	80 68       	ori	r24, 0x80	; 128
    1648:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    164c:	80 91 71 00 	lds	r24, 0x0071
    1650:	82 60       	ori	r24, 0x02	; 2
    1652:	80 93 71 00 	sts	0x0071, r24
    1656:	84 cb       	rjmp	.-2296   	; 0xd60 <main+0x6e>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    1658:	87 30       	cpi	r24, 0x07	; 7
    165a:	09 f4       	brne	.+2      	; 0x165e <main+0x96c>
    165c:	66 c2       	rjmp	.+1228   	; 0x1b2a <main+0xe38>
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	08 f0       	brcs	.+2      	; 0x1664 <main+0x972>
    1662:	e6 c0       	rjmp	.+460    	; 0x1830 <main+0xb3e>
    1664:	85 30       	cpi	r24, 0x05	; 5
    1666:	09 f4       	brne	.+2      	; 0x166a <main+0x978>
    1668:	12 c2       	rjmp	.+1060   	; 0x1a8e <main+0xd9c>
    166a:	86 30       	cpi	r24, 0x06	; 6
    166c:	09 f0       	breq	.+2      	; 0x1670 <main+0x97e>
    166e:	d6 cb       	rjmp	.-2132   	; 0xe1c <main+0x12a>
	                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
                  	break;

				case 6:	// both motors right
					pwm_right_desired -= STEP_MOTORS;
    1670:	20 91 8c 03 	lds	r18, 0x038C
    1674:	30 91 8d 03 	lds	r19, 0x038D
    1678:	40 91 8e 03 	lds	r20, 0x038E
    167c:	50 91 8f 03 	lds	r21, 0x038F
    1680:	2e 51       	subi	r18, 0x1E	; 30
    1682:	30 40       	sbci	r19, 0x00	; 0
    1684:	40 40       	sbci	r20, 0x00	; 0
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	20 93 8c 03 	sts	0x038C, r18
    168c:	30 93 8d 03 	sts	0x038D, r19
    1690:	40 93 8e 03 	sts	0x038E, r20
    1694:	50 93 8f 03 	sts	0x038F, r21
					pwm_left_desired += STEP_MOTORS;
    1698:	80 91 90 03 	lds	r24, 0x0390
    169c:	90 91 91 03 	lds	r25, 0x0391
    16a0:	a0 91 92 03 	lds	r26, 0x0392
    16a4:	b0 91 93 03 	lds	r27, 0x0393
    16a8:	4e 96       	adiw	r24, 0x1e	; 30
    16aa:	a1 1d       	adc	r26, r1
    16ac:	b1 1d       	adc	r27, r1
    16ae:	80 93 90 03 	sts	0x0390, r24
    16b2:	90 93 91 03 	sts	0x0391, r25
    16b6:	a0 93 92 03 	sts	0x0392, r26
    16ba:	b0 93 93 03 	sts	0x0393, r27
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    16be:	2a 39       	cpi	r18, 0x9A	; 154
    16c0:	ed ef       	ldi	r30, 0xFD	; 253
    16c2:	3e 07       	cpc	r19, r30
    16c4:	ef ef       	ldi	r30, 0xFF	; 255
    16c6:	4e 07       	cpc	r20, r30
    16c8:	ef ef       	ldi	r30, 0xFF	; 255
    16ca:	5e 07       	cpc	r21, r30
    16cc:	64 f4       	brge	.+24     	; 0x16e6 <main+0x9f4>
    16ce:	2a e9       	ldi	r18, 0x9A	; 154
    16d0:	3d ef       	ldi	r19, 0xFD	; 253
    16d2:	4f ef       	ldi	r20, 0xFF	; 255
    16d4:	5f ef       	ldi	r21, 0xFF	; 255
    16d6:	20 93 8c 03 	sts	0x038C, r18
    16da:	30 93 8d 03 	sts	0x038D, r19
    16de:	40 93 8e 03 	sts	0x038E, r20
    16e2:	50 93 8f 03 	sts	0x038F, r21
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    16e6:	87 36       	cpi	r24, 0x67	; 103
    16e8:	32 e0       	ldi	r19, 0x02	; 2
    16ea:	93 07       	cpc	r25, r19
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	a3 07       	cpc	r26, r19
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	b3 07       	cpc	r27, r19
    16f4:	0c f4       	brge	.+2      	; 0x16f8 <main+0xa06>
    16f6:	92 cb       	rjmp	.-2268   	; 0xe1c <main+0x12a>
    16f8:	86 e6       	ldi	r24, 0x66	; 102
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	80 93 90 03 	sts	0x0390, r24
    1704:	90 93 91 03 	sts	0x0391, r25
    1708:	a0 93 92 03 	sts	0x0392, r26
    170c:	b0 93 93 03 	sts	0x0393, r27
    1710:	85 cb       	rjmp	.-2294   	; 0xe1c <main+0x12a>
						
			if(last_num_lvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
    171e:	a3 ce       	rjmp	.-698    	; 0x1466 <main+0x774>
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));	// probably we don't use the pwm to its maximum, so
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));	// if the number of samples is 0 it means that the 
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <usartTransmit>
    172c:	7b ce       	rjmp	.-778    	; 0x1424 <main+0x732>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    172e:	30 95       	com	r19
    1730:	21 95       	neg	r18
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	30 93 ab 00 	sts	0x00AB, r19
    1738:	20 93 aa 00 	sts	0x00AA, r18
				TCCR4A |= (1 << COM4A1);		// enable OCA
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
			} else if(pwm_left < 0) {      		// move backward
				// select channel 14 to sample left current
				//currentMotLeftChannel = 14;
				TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    173c:	80 91 a0 00 	lds	r24, 0x00A0
    1740:	8f 77       	andi	r24, 0x7F	; 127
    1742:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    1746:	80 91 72 00 	lds	r24, 0x0072
    174a:	8d 7f       	andi	r24, 0xFD	; 253
    174c:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
    1750:	80 91 02 01 	lds	r24, 0x0102
    1754:	87 7f       	andi	r24, 0xF7	; 247
    1756:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4B1);		// enable OCB
    175a:	80 91 a0 00 	lds	r24, 0x00A0
    175e:	80 62       	ori	r24, 0x20	; 32
    1760:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    1764:	80 91 72 00 	lds	r24, 0x0072
    1768:	84 60       	ori	r24, 0x04	; 4
    176a:	80 93 72 00 	sts	0x0072, r24
    176e:	2b cc       	rjmp	.-1962   	; 0xfc6 <main+0x2d4>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    1770:	90 95       	com	r25
    1772:	81 95       	neg	r24
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	90 93 9b 00 	sts	0x009B, r25
    177a:	80 93 9a 00 	sts	0x009A, r24
    177e:	03 cc       	rjmp	.-2042   	; 0xf86 <main+0x294>
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			} else if(pwm_left > 0) {   		// move forward
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	14 06       	cpc	r1, r20
    1786:	15 06       	cpc	r1, r21
    1788:	cc f6       	brge	.-78     	; 0x173c <main+0xa4a>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    178a:	80 91 a0 00 	lds	r24, 0x00A0
    178e:	8f 7d       	andi	r24, 0xDF	; 223
    1790:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    1794:	80 91 72 00 	lds	r24, 0x0072
    1798:	8b 7f       	andi	r24, 0xFB	; 251
    179a:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 4);				// output to 0
    179e:	80 91 02 01 	lds	r24, 0x0102
    17a2:	8f 7e       	andi	r24, 0xEF	; 239
    17a4:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
    17a8:	80 91 a0 00 	lds	r24, 0x00A0
    17ac:	80 68       	ori	r24, 0x80	; 128
    17ae:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    17b2:	80 91 72 00 	lds	r24, 0x0072
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	80 93 72 00 	sts	0x0072, r24
    17bc:	04 cc       	rjmp	.-2040   	; 0xfc6 <main+0x2d4>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    17be:	80 91 80 00 	lds	r24, 0x0080
    17c2:	87 7f       	andi	r24, 0xF7	; 247
    17c4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    17c8:	2f 98       	cbi	0x05, 7	; 5
    17ca:	6c cd       	rjmp	.-1320   	; 0x12a4 <main+0x5b2>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    17cc:	80 91 80 00 	lds	r24, 0x0080
    17d0:	8f 7d       	andi	r24, 0xDF	; 223
    17d2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    17d6:	2e 98       	cbi	0x05, 6	; 5
    17d8:	56 cd       	rjmp	.-1364   	; 0x1286 <main+0x594>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    17da:	80 91 80 00 	lds	r24, 0x0080
    17de:	8f 77       	andi	r24, 0x7F	; 127
    17e0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    17e4:	2d 98       	cbi	0x05, 5	; 5
    17e6:	40 cd       	rjmp	.-1408   	; 0x1268 <main+0x576>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	aa 27       	eor	r26, r26
    17f4:	97 fd       	sbrc	r25, 7
    17f6:	a0 95       	com	r26
    17f8:	ba 2f       	mov	r27, r26
    17fa:	80 93 90 03 	sts	0x0390, r24
    17fe:	90 93 91 03 	sts	0x0391, r25
    1802:	a0 93 92 03 	sts	0x0392, r26
    1806:	b0 93 93 03 	sts	0x0393, r27
    180a:	a4 cc       	rjmp	.-1720   	; 0x1154 <main+0x462>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	44 27       	eor	r20, r20
    1818:	37 fd       	sbrc	r19, 7
    181a:	40 95       	com	r20
    181c:	54 2f       	mov	r21, r20
    181e:	20 93 8c 03 	sts	0x038C, r18
    1822:	30 93 8d 03 	sts	0x038D, r19
    1826:	40 93 8e 03 	sts	0x038E, r20
    182a:	50 93 8f 03 	sts	0x038F, r21
    182e:	7c cc       	rjmp	.-1800   	; 0x1128 <main+0x436>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    1830:	88 30       	cpi	r24, 0x08	; 8
    1832:	09 f4       	brne	.+2      	; 0x1836 <main+0xb44>
    1834:	d0 c0       	rjmp	.+416    	; 0x19d6 <main+0xce4>
    1836:	89 30       	cpi	r24, 0x09	; 9
    1838:	09 f0       	breq	.+2      	; 0x183c <main+0xb4a>
    183a:	f0 ca       	rjmp	.-2592   	; 0xe1c <main+0x12a>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    183c:	80 91 90 03 	lds	r24, 0x0390
    1840:	90 91 91 03 	lds	r25, 0x0391
    1844:	a0 91 92 03 	lds	r26, 0x0392
    1848:	b0 91 93 03 	lds	r27, 0x0393
    184c:	4e 97       	sbiw	r24, 0x1e	; 30
    184e:	a1 09       	sbc	r26, r1
    1850:	b1 09       	sbc	r27, r1
    1852:	80 93 90 03 	sts	0x0390, r24
    1856:	90 93 91 03 	sts	0x0391, r25
    185a:	a0 93 92 03 	sts	0x0392, r26
    185e:	b0 93 93 03 	sts	0x0393, r27
            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1862:	8a 39       	cpi	r24, 0x9A	; 154
    1864:	ed ef       	ldi	r30, 0xFD	; 253
    1866:	9e 07       	cpc	r25, r30
    1868:	ef ef       	ldi	r30, 0xFF	; 255
    186a:	ae 07       	cpc	r26, r30
    186c:	ef ef       	ldi	r30, 0xFF	; 255
    186e:	be 07       	cpc	r27, r30
    1870:	0c f0       	brlt	.+2      	; 0x1874 <main+0xb82>
    1872:	d4 ca       	rjmp	.-2648   	; 0xe1c <main+0x12a>
    1874:	2a e9       	ldi	r18, 0x9A	; 154
    1876:	3d ef       	ldi	r19, 0xFD	; 253
    1878:	4f ef       	ldi	r20, 0xFF	; 255
    187a:	5f ef       	ldi	r21, 0xFF	; 255
    187c:	20 93 90 03 	sts	0x0390, r18
    1880:	30 93 91 03 	sts	0x0391, r19
    1884:	40 93 92 03 	sts	0x0392, r20
    1888:	50 93 93 03 	sts	0x0393, r21
    188c:	c7 ca       	rjmp	.-2674   	; 0xe1c <main+0x12a>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	61 f1       	breq	.+88     	; 0x18ea <main+0xbf8>
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	09 f0       	breq	.+2      	; 0x1898 <main+0xba6>
    1896:	c2 ca       	rjmp	.-2684   	; 0xe1c <main+0x12a>
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1898:	80 91 90 03 	lds	r24, 0x0390
    189c:	90 91 91 03 	lds	r25, 0x0391
    18a0:	a0 91 92 03 	lds	r26, 0x0392
    18a4:	b0 91 93 03 	lds	r27, 0x0393
    18a8:	4e 96       	adiw	r24, 0x1e	; 30
    18aa:	a1 1d       	adc	r26, r1
    18ac:	b1 1d       	adc	r27, r1
    18ae:	80 93 90 03 	sts	0x0390, r24
    18b2:	90 93 91 03 	sts	0x0391, r25
    18b6:	a0 93 92 03 	sts	0x0392, r26
    18ba:	b0 93 93 03 	sts	0x0393, r27
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    18be:	87 36       	cpi	r24, 0x67	; 103
    18c0:	e2 e0       	ldi	r30, 0x02	; 2
    18c2:	9e 07       	cpc	r25, r30
    18c4:	e0 e0       	ldi	r30, 0x00	; 0
    18c6:	ae 07       	cpc	r26, r30
    18c8:	e0 e0       	ldi	r30, 0x00	; 0
    18ca:	be 07       	cpc	r27, r30
    18cc:	0c f4       	brge	.+2      	; 0x18d0 <main+0xbde>
    18ce:	a6 ca       	rjmp	.-2740   	; 0xe1c <main+0x12a>
    18d0:	26 e6       	ldi	r18, 0x66	; 102
    18d2:	32 e0       	ldi	r19, 0x02	; 2
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	20 93 90 03 	sts	0x0390, r18
    18dc:	30 93 91 03 	sts	0x0391, r19
    18e0:	40 93 92 03 	sts	0x0392, r20
    18e4:	50 93 93 03 	sts	0x0393, r21
    18e8:	99 ca       	rjmp	.-2766   	; 0xe1c <main+0x12a>
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
					if(pwm_right_desired > pwm_left_desired) {
    18ea:	80 91 8c 03 	lds	r24, 0x038C
    18ee:	90 91 8d 03 	lds	r25, 0x038D
    18f2:	a0 91 8e 03 	lds	r26, 0x038E
    18f6:	b0 91 8f 03 	lds	r27, 0x038F
    18fa:	20 91 90 03 	lds	r18, 0x0390
    18fe:	30 91 91 03 	lds	r19, 0x0391
    1902:	40 91 92 03 	lds	r20, 0x0392
    1906:	50 91 93 03 	lds	r21, 0x0393
    190a:	28 17       	cp	r18, r24
    190c:	39 07       	cpc	r19, r25
    190e:	4a 07       	cpc	r20, r26
    1910:	5b 07       	cpc	r21, r27
    1912:	0c f4       	brge	.+2      	; 0x1916 <main+0xc24>
    1914:	33 c1       	rjmp	.+614    	; 0x1b7c <main+0xe8a>
    1916:	da 01       	movw	r26, r20
    1918:	c9 01       	movw	r24, r18
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    191a:	0e e1       	ldi	r16, 0x1E	; 30
    191c:	c0 2e       	mov	r12, r16
    191e:	d1 2c       	mov	r13, r1
    1920:	e1 2c       	mov	r14, r1
    1922:	f1 2c       	mov	r15, r1
    1924:	c8 0e       	add	r12, r24
    1926:	d9 1e       	adc	r13, r25
    1928:	ea 1e       	adc	r14, r26
    192a:	fb 1e       	adc	r15, r27
    192c:	c0 92 8c 03 	sts	0x038C, r12
    1930:	d0 92 8d 03 	sts	0x038D, r13
    1934:	e0 92 8e 03 	sts	0x038E, r14
    1938:	f0 92 8f 03 	sts	0x038F, r15
					pwm_left_desired += STEP_MOTORS;
    193c:	da 01       	movw	r26, r20
    193e:	c9 01       	movw	r24, r18
    1940:	4e 96       	adiw	r24, 0x1e	; 30
    1942:	a1 1d       	adc	r26, r1
    1944:	b1 1d       	adc	r27, r1
    1946:	80 93 90 03 	sts	0x0390, r24
    194a:	90 93 91 03 	sts	0x0391, r25
    194e:	a0 93 92 03 	sts	0x0392, r26
    1952:	b0 93 93 03 	sts	0x0393, r27
	                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    1956:	37 e6       	ldi	r19, 0x67	; 103
    1958:	c3 16       	cp	r12, r19
    195a:	32 e0       	ldi	r19, 0x02	; 2
    195c:	d3 06       	cpc	r13, r19
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	e3 06       	cpc	r14, r19
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	f3 06       	cpc	r15, r19
    1966:	0c f4       	brge	.+2      	; 0x196a <main+0xc78>
    1968:	be ce       	rjmp	.-644    	; 0x16e6 <main+0x9f4>
    196a:	26 e6       	ldi	r18, 0x66	; 102
    196c:	32 e0       	ldi	r19, 0x02	; 2
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	20 93 8c 03 	sts	0x038C, r18
    1976:	30 93 8d 03 	sts	0x038D, r19
    197a:	40 93 8e 03 	sts	0x038E, r20
    197e:	50 93 8f 03 	sts	0x038F, r21
    1982:	b1 ce       	rjmp	.-670    	; 0x16e6 <main+0x9f4>
					pwm_left_desired += STEP_MOTORS;
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1984:	80 91 8c 03 	lds	r24, 0x038C
    1988:	90 91 8d 03 	lds	r25, 0x038D
    198c:	a0 91 8e 03 	lds	r26, 0x038E
    1990:	b0 91 8f 03 	lds	r27, 0x038F
    1994:	4e 96       	adiw	r24, 0x1e	; 30
    1996:	a1 1d       	adc	r26, r1
    1998:	b1 1d       	adc	r27, r1
    199a:	80 93 8c 03 	sts	0x038C, r24
    199e:	90 93 8d 03 	sts	0x038D, r25
    19a2:	a0 93 8e 03 	sts	0x038E, r26
    19a6:	b0 93 8f 03 	sts	0x038F, r27
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    19aa:	87 36       	cpi	r24, 0x67	; 103
    19ac:	32 e0       	ldi	r19, 0x02	; 2
    19ae:	93 07       	cpc	r25, r19
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	a3 07       	cpc	r26, r19
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	b3 07       	cpc	r27, r19
    19b8:	0c f4       	brge	.+2      	; 0x19bc <main+0xcca>
    19ba:	30 ca       	rjmp	.-2976   	; 0xe1c <main+0x12a>
    19bc:	86 e6       	ldi	r24, 0x66	; 102
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	80 93 8c 03 	sts	0x038C, r24
    19c8:	90 93 8d 03 	sts	0x038D, r25
    19cc:	a0 93 8e 03 	sts	0x038E, r26
    19d0:	b0 93 8f 03 	sts	0x038F, r27
    19d4:	23 ca       	rjmp	.-3002   	; 0xe1c <main+0x12a>
	                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
               		break;

				case 8:	// both motors backward
					if(pwm_right_desired < pwm_left) {
    19d6:	20 91 8c 03 	lds	r18, 0x038C
    19da:	30 91 8d 03 	lds	r19, 0x038D
    19de:	40 91 8e 03 	lds	r20, 0x038E
    19e2:	50 91 8f 03 	lds	r21, 0x038F
    19e6:	80 91 88 03 	lds	r24, 0x0388
    19ea:	90 91 89 03 	lds	r25, 0x0389
    19ee:	a0 91 8a 03 	lds	r26, 0x038A
    19f2:	b0 91 8b 03 	lds	r27, 0x038B
    19f6:	28 17       	cp	r18, r24
    19f8:	39 07       	cpc	r19, r25
    19fa:	4a 07       	cpc	r20, r26
    19fc:	5b 07       	cpc	r21, r27
    19fe:	44 f0       	brlt	.+16     	; 0x1a10 <main+0xd1e>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1a00:	20 91 90 03 	lds	r18, 0x0390
    1a04:	30 91 91 03 	lds	r19, 0x0391
    1a08:	40 91 92 03 	lds	r20, 0x0392
    1a0c:	50 91 93 03 	lds	r21, 0x0393
					}
					pwm_right_desired -= STEP_MOTORS;
    1a10:	da 01       	movw	r26, r20
    1a12:	c9 01       	movw	r24, r18
    1a14:	4e 97       	sbiw	r24, 0x1e	; 30
    1a16:	a1 09       	sbc	r26, r1
    1a18:	b1 09       	sbc	r27, r1
    1a1a:	80 93 8c 03 	sts	0x038C, r24
    1a1e:	90 93 8d 03 	sts	0x038D, r25
    1a22:	a0 93 8e 03 	sts	0x038E, r26
    1a26:	b0 93 8f 03 	sts	0x038F, r27
					pwm_left_desired -= STEP_MOTORS;
    1a2a:	80 93 90 03 	sts	0x0390, r24
    1a2e:	90 93 91 03 	sts	0x0391, r25
    1a32:	a0 93 92 03 	sts	0x0392, r26
    1a36:	b0 93 93 03 	sts	0x0393, r27
	                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1a3a:	8a 39       	cpi	r24, 0x9A	; 154
    1a3c:	ed ef       	ldi	r30, 0xFD	; 253
    1a3e:	9e 07       	cpc	r25, r30
    1a40:	ef ef       	ldi	r30, 0xFF	; 255
    1a42:	ae 07       	cpc	r26, r30
    1a44:	ef ef       	ldi	r30, 0xFF	; 255
    1a46:	be 07       	cpc	r27, r30
    1a48:	64 f4       	brge	.+24     	; 0x1a62 <main+0xd70>
    1a4a:	2a e9       	ldi	r18, 0x9A	; 154
    1a4c:	3d ef       	ldi	r19, 0xFD	; 253
    1a4e:	4f ef       	ldi	r20, 0xFF	; 255
    1a50:	5f ef       	ldi	r21, 0xFF	; 255
    1a52:	20 93 8c 03 	sts	0x038C, r18
    1a56:	30 93 8d 03 	sts	0x038D, r19
    1a5a:	40 93 8e 03 	sts	0x038E, r20
    1a5e:	50 93 8f 03 	sts	0x038F, r21

				case 4:	// both motors left
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1a62:	8a 39       	cpi	r24, 0x9A	; 154
    1a64:	3d ef       	ldi	r19, 0xFD	; 253
    1a66:	93 07       	cpc	r25, r19
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	a3 07       	cpc	r26, r19
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	b3 07       	cpc	r27, r19
    1a70:	0c f0       	brlt	.+2      	; 0x1a74 <main+0xd82>
    1a72:	d4 c9       	rjmp	.-3160   	; 0xe1c <main+0x12a>
    1a74:	8a e9       	ldi	r24, 0x9A	; 154
    1a76:	9d ef       	ldi	r25, 0xFD	; 253
    1a78:	af ef       	ldi	r26, 0xFF	; 255
    1a7a:	bf ef       	ldi	r27, 0xFF	; 255
    1a7c:	80 93 90 03 	sts	0x0390, r24
    1a80:	90 93 91 03 	sts	0x0391, r25
    1a84:	a0 93 92 03 	sts	0x0392, r26
    1a88:	b0 93 93 03 	sts	0x0393, r27
    1a8c:	c7 c9       	rjmp	.-3186   	; 0xe1c <main+0x12a>
			//usartTransmit(ir_move);

			switch(ir_move) {

				case 5:	// stop motors
					pwm_right_desired = 0;
    1a8e:	10 92 8c 03 	sts	0x038C, r1
    1a92:	10 92 8d 03 	sts	0x038D, r1
    1a96:	10 92 8e 03 	sts	0x038E, r1
    1a9a:	10 92 8f 03 	sts	0x038F, r1
					pwm_left_desired = 0;
    1a9e:	10 92 90 03 	sts	0x0390, r1
    1aa2:	10 92 91 03 	sts	0x0391, r1
    1aa6:	10 92 92 03 	sts	0x0392, r1
    1aaa:	10 92 93 03 	sts	0x0393, r1
					break;
    1aae:	b6 c9       	rjmp	.-3220   	; 0xe1c <main+0x12a>
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
					break;

				case 4:	// both motors left
					pwm_right_desired += STEP_MOTORS;
    1ab0:	20 91 8c 03 	lds	r18, 0x038C
    1ab4:	30 91 8d 03 	lds	r19, 0x038D
    1ab8:	40 91 8e 03 	lds	r20, 0x038E
    1abc:	50 91 8f 03 	lds	r21, 0x038F
    1ac0:	22 5e       	subi	r18, 0xE2	; 226
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	20 93 8c 03 	sts	0x038C, r18
    1acc:	30 93 8d 03 	sts	0x038D, r19
    1ad0:	40 93 8e 03 	sts	0x038E, r20
    1ad4:	50 93 8f 03 	sts	0x038F, r21
					pwm_left_desired -= STEP_MOTORS;
    1ad8:	80 91 90 03 	lds	r24, 0x0390
    1adc:	90 91 91 03 	lds	r25, 0x0391
    1ae0:	a0 91 92 03 	lds	r26, 0x0392
    1ae4:	b0 91 93 03 	lds	r27, 0x0393
    1ae8:	4e 97       	sbiw	r24, 0x1e	; 30
    1aea:	a1 09       	sbc	r26, r1
    1aec:	b1 09       	sbc	r27, r1
    1aee:	80 93 90 03 	sts	0x0390, r24
    1af2:	90 93 91 03 	sts	0x0391, r25
    1af6:	a0 93 92 03 	sts	0x0392, r26
    1afa:	b0 93 93 03 	sts	0x0393, r27
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1afe:	27 36       	cpi	r18, 0x67	; 103
    1b00:	e2 e0       	ldi	r30, 0x02	; 2
    1b02:	3e 07       	cpc	r19, r30
    1b04:	e0 e0       	ldi	r30, 0x00	; 0
    1b06:	4e 07       	cpc	r20, r30
    1b08:	e0 e0       	ldi	r30, 0x00	; 0
    1b0a:	5e 07       	cpc	r21, r30
    1b0c:	0c f4       	brge	.+2      	; 0x1b10 <main+0xe1e>
    1b0e:	a9 cf       	rjmp	.-174    	; 0x1a62 <main+0xd70>
    1b10:	26 e6       	ldi	r18, 0x66	; 102
    1b12:	32 e0       	ldi	r19, 0x02	; 2
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	20 93 8c 03 	sts	0x038C, r18
    1b1c:	30 93 8d 03 	sts	0x038D, r19
    1b20:	40 93 8e 03 	sts	0x038E, r20
    1b24:	50 93 8f 03 	sts	0x038F, r21
    1b28:	9c cf       	rjmp	.-200    	; 0x1a62 <main+0xd70>
					pwm_left_desired -= STEP_MOTORS;
            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1b2a:	80 91 8c 03 	lds	r24, 0x038C
    1b2e:	90 91 8d 03 	lds	r25, 0x038D
    1b32:	a0 91 8e 03 	lds	r26, 0x038E
    1b36:	b0 91 8f 03 	lds	r27, 0x038F
    1b3a:	4e 97       	sbiw	r24, 0x1e	; 30
    1b3c:	a1 09       	sbc	r26, r1
    1b3e:	b1 09       	sbc	r27, r1
    1b40:	80 93 8c 03 	sts	0x038C, r24
    1b44:	90 93 8d 03 	sts	0x038D, r25
    1b48:	a0 93 8e 03 	sts	0x038E, r26
    1b4c:	b0 93 8f 03 	sts	0x038F, r27
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1b50:	8a 39       	cpi	r24, 0x9A	; 154
    1b52:	3d ef       	ldi	r19, 0xFD	; 253
    1b54:	93 07       	cpc	r25, r19
    1b56:	3f ef       	ldi	r19, 0xFF	; 255
    1b58:	a3 07       	cpc	r26, r19
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	b3 07       	cpc	r27, r19
    1b5e:	0c f0       	brlt	.+2      	; 0x1b62 <main+0xe70>
    1b60:	5d c9       	rjmp	.-3398   	; 0xe1c <main+0x12a>
    1b62:	8a e9       	ldi	r24, 0x9A	; 154
    1b64:	9d ef       	ldi	r25, 0xFD	; 253
    1b66:	af ef       	ldi	r26, 0xFF	; 255
    1b68:	bf ef       	ldi	r27, 0xFF	; 255
    1b6a:	80 93 8c 03 	sts	0x038C, r24
    1b6e:	90 93 8d 03 	sts	0x038D, r25
    1b72:	a0 93 8e 03 	sts	0x038E, r26
    1b76:	b0 93 8f 03 	sts	0x038F, r27
    1b7a:	50 c9       	rjmp	.-3424   	; 0xe1c <main+0x12a>
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
					if(pwm_right_desired > pwm_left_desired) {
    1b7c:	9c 01       	movw	r18, r24
    1b7e:	ad 01       	movw	r20, r26
    1b80:	cc ce       	rjmp	.-616    	; 0x191a <main+0xc28>

					if(colorState==0) {		// turn on blue
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;					
					} else if(colorState==1) {	// turn on green
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	a9 f1       	breq	.+106    	; 0x1bf0 <main+0xefe>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	d9 f1       	breq	.+118    	; 0x1c00 <main+0xf0e>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <main+0xe9e>
    1b8e:	46 c0       	rjmp	.+140    	; 0x1c1c <main+0xf2a>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off
						pwm_blue = MAX_LEDS_PWM;
    1b90:	ef ef       	ldi	r30, 0xFF	; 255
    1b92:	e0 93 0f 02 	sts	0x020F, r30
						pwm_green = MAX_LEDS_PWM;
    1b96:	e0 93 0e 02 	sts	0x020E, r30
						pwm_red = MAX_LEDS_PWM;
    1b9a:	e0 93 0d 02 	sts	0x020D, r30
    1b9e:	15 c9       	rjmp	.-3542   	; 0xdca <main+0xd8>
				TCCR3A |= (1 << COM3A1);		// enable OCA
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
			} else if(pwm_right < 0) {      	// move backward
				// select channel 12 to sample left current
				//currentMotRightChannel = 12;
				TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    1ba0:	80 91 90 00 	lds	r24, 0x0090
    1ba4:	8f 77       	andi	r24, 0x7F	; 127
    1ba6:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    1baa:	80 91 71 00 	lds	r24, 0x0071
    1bae:	8d 7f       	andi	r24, 0xFD	; 253
    1bb0:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 3);				// output to 0
    1bb4:	73 98       	cbi	0x0e, 3	; 14
				TCCR3A |= (1 << COM3B1);		// enable OCB
    1bb6:	80 91 90 00 	lds	r24, 0x0090
    1bba:	80 62       	ori	r24, 0x20	; 32
    1bbc:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    1bc0:	80 91 71 00 	lds	r24, 0x0071
    1bc4:	84 60       	ori	r24, 0x04	; 4
    1bc6:	80 93 71 00 	sts	0x0071, r24
    1bca:	ca c8       	rjmp	.-3692   	; 0xd60 <main+0x6e>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1bcc:	80 91 80 00 	lds	r24, 0x0080
    1bd0:	8f 7d       	andi	r24, 0xDF	; 223
    1bd2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    1bd6:	2e 98       	cbi	0x05, 6	; 5
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);
    1bd8:	80 91 0f 02 	lds	r24, 0x020F

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1bdc:	88 23       	and	r24, r24
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <main+0xef0>
    1be0:	13 c9       	rjmp	.-3546   	; 0xe08 <main+0x116>
		TCCR1A &= ~(1 << COM1C1);
    1be2:	80 91 80 00 	lds	r24, 0x0080
    1be6:	87 7f       	andi	r24, 0xF7	; 247
    1be8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    1bec:	2f 98       	cbi	0x05, 7	; 5
    1bee:	16 c9       	rjmp	.-3540   	; 0xe1c <main+0x12a>
					if(colorState==0) {		// turn on blue
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;					
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1bf0:	af ef       	ldi	r26, 0xFF	; 255
    1bf2:	a0 93 0f 02 	sts	0x020F, r26
						pwm_green = 0;
    1bf6:	10 92 0e 02 	sts	0x020E, r1
						pwm_red = MAX_LEDS_PWM;
    1bfa:	a0 93 0d 02 	sts	0x020D, r26
    1bfe:	e5 c8       	rjmp	.-3638   	; 0xdca <main+0xd8>
					} else if(colorState==2) {	// turn on red
						pwm_blue = MAX_LEDS_PWM;
    1c00:	bf ef       	ldi	r27, 0xFF	; 255
    1c02:	b0 93 0f 02 	sts	0x020F, r27
						pwm_green = MAX_LEDS_PWM;
    1c06:	b0 93 0e 02 	sts	0x020E, r27
						pwm_red = 0;
    1c0a:	10 92 0d 02 	sts	0x020D, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    1c0e:	80 91 80 00 	lds	r24, 0x0080
    1c12:	8f 77       	andi	r24, 0x7F	; 127
    1c14:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    1c18:	2d 98       	cbi	0x05, 5	; 5
    1c1a:	e2 c8       	rjmp	.-3644   	; 0xde0 <main+0xee>
					} else if(colorState==2) {	// turn on red
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1c1c:	10 92 0f 02 	sts	0x020F, r1
						pwm_green = 0;
    1c20:	10 92 0e 02 	sts	0x020E, r1
						pwm_red = 0;
    1c24:	10 92 0d 02 	sts	0x020D, r1
    1c28:	f2 cf       	rjmp	.-28     	; 0x1c0e <main+0xf1c>

00001c2a <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c2a:	84 b1       	in	r24, 0x04	; 4
    1c2c:	80 7f       	andi	r24, 0xF0	; 240
    1c2e:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c30:	84 b1       	in	r24, 0x04	; 4
    1c32:	87 60       	ori	r24, 0x07	; 7
    1c34:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1c36:	80 e5       	ldi	r24, 0x50	; 80
    1c38:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1c3a:	8d b5       	in	r24, 0x2d	; 45
    1c3c:	81 60       	ori	r24, 0x01	; 1
    1c3e:	8d bd       	out	0x2d, r24	; 45

}
    1c40:	08 95       	ret

00001c42 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c42:	44 23       	and	r20, r20
    1c44:	79 f0       	breq	.+30     	; 0x1c64 <SPI_ReadWrite_Block+0x22>
    1c46:	a8 2f       	mov	r26, r24
    1c48:	b9 2f       	mov	r27, r25
    1c4a:	e6 2f       	mov	r30, r22
    1c4c:	f7 2f       	mov	r31, r23
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1c50:	9d 91       	ld	r25, X+
    1c52:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c54:	0d b4       	in	r0, 0x2d	; 45
    1c56:	07 fe       	sbrs	r0, 7
    1c58:	fd cf       	rjmp	.-6      	; 0x1c54 <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1c5a:	9e b5       	in	r25, 0x2e	; 46
    1c5c:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	84 17       	cp	r24, r20
    1c62:	b0 f3       	brcs	.-20     	; 0x1c50 <SPI_ReadWrite_Block+0xe>
    1c64:	08 95       	ret

00001c66 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c66:	66 23       	and	r22, r22
    1c68:	59 f0       	breq	.+22     	; 0x1c80 <SPI_Write_Block+0x1a>
    1c6a:	e8 2f       	mov	r30, r24
    1c6c:	f9 2f       	mov	r31, r25
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1c70:	91 91       	ld	r25, Z+
    1c72:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c74:	0d b4       	in	r0, 0x2d	; 45
    1c76:	07 fe       	sbrs	r0, 7
    1c78:	fd cf       	rjmp	.-6      	; 0x1c74 <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c7a:	8f 5f       	subi	r24, 0xFF	; 255
    1c7c:	86 17       	cp	r24, r22
    1c7e:	c0 f3       	brcs	.-16     	; 0x1c70 <SPI_Write_Block+0xa>
    1c80:	08 95       	ret

00001c82 <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1c82:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1c84:	0d b4       	in	r0, 0x2d	; 45
    1c86:	07 fe       	sbrs	r0, 7
    1c88:	fd cf       	rjmp	.-6      	; 0x1c84 <SPI_Write_Byte+0x2>
    return SPDR;
    1c8a:	8e b5       	in	r24, 0x2e	; 46
}
    1c8c:	08 95       	ret

00001c8e <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <mirf_config+0xa>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c9c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c9e:	80 e2       	ldi	r24, 0x20	; 32
    1ca0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ca4:	8d e0       	ldi	r24, 0x0D	; 13
    1ca6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1caa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cae:	83 e2       	ldi	r24, 0x23	; 35
    1cb0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cba:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    1cbc:	8c e0       	ldi	r24, 0x0C	; 12
    1cbe:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    1cc0:	83 e8       	ldi	r24, 0x83	; 131
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1cc4:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1cc6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cc8:	80 e3       	ldi	r24, 0x30	; 48
    1cca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1cce:	8e 01       	movw	r16, r28
    1cd0:	0f 5f       	subi	r16, 0xFF	; 255
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	63 e0       	ldi	r22, 0x03	; 3
    1cd8:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <SPI_Write_Block>
    mirf_CSN_hi;
    1cdc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1cde:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ce0:	8a e2       	ldi	r24, 0x2A	; 42
    1ce2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <SPI_Write_Block>
    mirf_CSN_hi;
    1cee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cf0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cf2:	81 e2       	ldi	r24, 0x21	; 33
    1cf4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cfe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d02:	82 e2       	ldi	r24, 0x22	; 34
    1d04:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d0e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d10:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d12:	84 e2       	ldi	r24, 0x24	; 36
    1d14:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d18:	82 e1       	ldi	r24, 0x12	; 18
    1d1a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d1e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d20:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d22:	85 e2       	ldi	r24, 0x25	; 37
    1d24:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d28:	88 e2       	ldi	r24, 0x28	; 40
    1d2a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d2e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d30:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d32:	81 e3       	ldi	r24, 0x31	; 49
    1d34:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d38:	86 e0       	ldi	r24, 0x06	; 6
    1d3a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d3e:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    1d40:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1d42:	80 e5       	ldi	r24, 0x50	; 80
    1d44:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1d48:	83 e7       	ldi	r24, 0x73	; 115
    1d4a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d4e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d50:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d52:	8c e3       	ldi	r24, 0x3C	; 60
    1d54:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d5e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d60:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d62:	8d e3       	ldi	r24, 0x3D	; 61
    1d64:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d68:	86 e0       	ldi	r24, 0x06	; 6
    1d6a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d6e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d70:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d72:	80 e2       	ldi	r24, 0x20	; 32
    1d74:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d78:	8f e0       	ldi	r24, 0x0F	; 15
    1d7a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d7e:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	08 95       	ret

00001d90 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1d90:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1d92:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1d94:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <mirf_config>
}
    1d98:	08 95       	ret

00001d9a <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1da0:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1da2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1da4:	8a e2       	ldi	r24, 0x2A	; 42
    1da6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1daa:	ce 01       	movw	r24, r28
    1dac:	65 e0       	ldi	r22, 0x05	; 5
    1dae:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <SPI_Write_Block>
    mirf_CSN_hi;
    1db2:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1db4:	2c 9a       	sbi	0x05, 4	; 5
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1dc2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dc4:	80 e3       	ldi	r24, 0x30	; 48
    1dc6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1dca:	ce 01       	movw	r24, r28
    1dcc:	65 e0       	ldi	r22, 0x05	; 5
    1dce:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <SPI_Write_Block>
    mirf_CSN_hi;
    1dd2:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1dda:	80 91 e0 03 	lds	r24, 0x03E0
    1dde:	88 23       	and	r24, r24
    1de0:	11 f0       	breq	.+4      	; 0x1de6 <mirf_data_ready+0xc>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1de4:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1de6:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1dee:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1df0:	80 74       	andi	r24, 0x40	; 64
    1df2:	08 95       	ret

00001df4 <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1e00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1e02:	87 e1       	ldi	r24, 0x17	; 23
    1e04:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1e08:	be 01       	movw	r22, r28
    1e0a:	6f 5f       	subi	r22, 0xFF	; 255
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	cb 01       	movw	r24, r22
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1e16:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1a:	81 70       	andi	r24, 0x01	; 1
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1e24:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1e26:	82 ee       	ldi	r24, 0xE2	; 226
    1e28:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e2c:	28 9a       	sbi	0x05, 0	; 5

}
    1e2e:	08 95       	ret

00001e30 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1e36:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1e38:	81 e6       	ldi	r24, 0x61	; 97
    1e3a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1e3e:	ce 01       	movw	r24, r28
    1e40:	be 01       	movw	r22, r28
    1e42:	46 e0       	ldi	r20, 0x06	; 6
    1e44:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1e48:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e4a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e4c:	87 e2       	ldi	r24, 0x27	; 39
    1e4e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e52:	80 e4       	ldi	r24, 0x40	; 64
    1e54:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e58:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1e6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e6c:	8f 71       	andi	r24, 0x1F	; 31
    1e6e:	80 62       	ori	r24, 0x20	; 32
    1e70:	69 83       	std	Y+1, r22	; 0x01
    1e72:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e76:	69 81       	ldd	r22, Y+1	; 0x01
    1e78:	86 2f       	mov	r24, r22
    1e7a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e7e:	28 9a       	sbi	0x05, 0	; 5
}
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1e98:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1e9a:	8f 71       	andi	r24, 0x1F	; 31
    1e9c:	49 83       	std	Y+1, r20	; 0x01
    1e9e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	b8 01       	movw	r22, r16
    1ea6:	49 81       	ldd	r20, Y+1	; 0x01
    1ea8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1eac:	28 9a       	sbi	0x05, 0	; 5
}
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	08 95       	ret

00001eba <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1eca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ecc:	8f 71       	andi	r24, 0x1F	; 31
    1ece:	80 62       	ori	r24, 0x20	; 32
    1ed0:	49 83       	std	Y+1, r20	; 0x01
    1ed2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	49 81       	ldd	r20, Y+1	; 0x01
    1eda:	64 2f       	mov	r22, r20
    1edc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <SPI_Write_Block>
    mirf_CSN_hi;
    1ee0:	28 9a       	sbi	0x05, 0	; 5
}
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	0f 92       	push	r0
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1efe:	80 91 e0 03 	lds	r24, 0x03E0
    1f02:	88 23       	and	r24, r24
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <mirf_send+0x10>

    mirf_CE_lo;
    1f06:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	80 93 e0 03 	sts	0x03E0, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f0e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f10:	80 e2       	ldi	r24, 0x20	; 32
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f18:	8a e4       	ldi	r24, 0x4A	; 74
    1f1a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f1e:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1f20:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1f22:	81 ee       	ldi	r24, 0xE1	; 225
    1f24:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1f28:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1f2a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1f2c:	80 ea       	ldi	r24, 0xA0	; 160
    1f2e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1f32:	c8 01       	movw	r24, r16
    1f34:	69 81       	ldd	r22, Y+1	; 0x01
    1f36:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1f3a:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1f3c:	2c 9a       	sbi	0x05, 4	; 5
}
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	18 2f       	mov	r17, r24
    1f5e:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1f60:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1f62:	81 ee       	ldi	r24, 0xE1	; 225
    1f64:	99 83       	std	Y+1, r25	; 0x01
    1f66:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f6a:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1f6c:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1f6e:	88 ea       	ldi	r24, 0xA8	; 168
    1f70:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1f74:	99 81       	ldd	r25, Y+1	; 0x01
    1f76:	00 23       	and	r16, r16
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <writeAckPayload+0x48>
    1f7a:	61 2f       	mov	r22, r17
    1f7c:	79 2f       	mov	r23, r25
    1f7e:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1f80:	f7 01       	movw	r30, r14
    1f82:	81 91       	ld	r24, Z+
    1f84:	7f 01       	movw	r14, r30
    1f86:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1f8a:	8e 2d       	mov	r24, r14
    1f8c:	81 1b       	sub	r24, r17
    1f8e:	80 17       	cp	r24, r16
    1f90:	b8 f3       	brcs	.-18     	; 0x1f80 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1f92:	28 9a       	sbi	0x05, 0	; 5


}
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	08 95       	ret

00001fa4 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1fa4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1fa6:	81 ee       	ldi	r24, 0xE1	; 225
    1fa8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fac:	28 9a       	sbi	0x05, 0	; 5

}
    1fae:	08 95       	ret

00001fb0 <e_start_agendas_processing>:
	// Timer2 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of 10 KHz => 8000000/10000 = 800 (too much for 8-bits)
	// We use a 1/8 prescaler: 1000000/10000 = 100
	// The CTC mode let us chose the TOP value to be 100
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    1fb0:	e0 eb       	ldi	r30, 0xB0	; 176
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	82 60       	ori	r24, 0x02	; 2
    1fb8:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS01);		// 1/8 prescaler
    1fba:	e1 eb       	ldi	r30, 0xB1	; 177
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	82 60       	ori	r24, 0x02	; 2
    1fc2:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR2A = 100;
    1fc4:	84 e6       	ldi	r24, 0x64	; 100
    1fc6:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 |= (1 << OCIE2A);
    1fca:	e0 e7       	ldi	r30, 0x70	; 112
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	82 60       	ori	r24, 0x02	; 2
    1fd2:	80 83       	st	Z, r24
//	// Timer4 clock input = Fosc/2 = 2 MHz
//	// Period time = PR * 1/(Fosc/2) => PR = period time * Fosc/2
//	// We need a period time of 100 us => 0.0001 * 2000000 = 200
//	OpenTimer4(T4_ON | T4_PS_1_1 | T4_32BIT_MODE_OFF | T4_SOURCE_INT, 200);

}
    1fd4:	08 95       	ret

00001fd6 <e_end_agendas_processing>:
 * use \ref e_destroy_agenda(void (*func)(void)) for that.
 * \sa e_destroy_agenda
 */
void e_end_agendas_processing(void)
{
	TCCR2B &= ~(1 << CS01);
    1fd6:	e1 eb       	ldi	r30, 0xB1	; 177
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8d 7f       	andi	r24, 0xFD	; 253
    1fde:	80 83       	st	Z, r24
	//T4CONbits.TON = 0;    // disable Timer2
}
    1fe0:	08 95       	ret

00001fe2 <e_activate_agenda>:
 * \param func	 function called if the cycle value is reached by the counter
 * \param cycle      cycle value in millisec/10
 * \return \ref EXIT_OK if the agenda has been created, exit the programme otherwise
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	ec 01       	movw	r28, r24
    1ff0:	7b 01       	movw	r14, r22
	Agenda *current = agenda_list;
    1ff2:	00 91 23 03 	lds	r16, 0x0323
    1ff6:	10 91 24 03 	lds	r17, 0x0324

	while (current)
    1ffa:	01 15       	cp	r16, r1
    1ffc:	11 05       	cpc	r17, r1
    1ffe:	89 f0       	breq	.+34     	; 0x2022 <e_activate_agenda+0x40>
	{
		if (current->function == func)
    2000:	f8 01       	movw	r30, r16
    2002:	85 81       	ldd	r24, Z+5	; 0x05
    2004:	96 81       	ldd	r25, Z+6	; 0x06
    2006:	8c 17       	cp	r24, r28
    2008:	9d 07       	cpc	r25, r29
    200a:	31 f4       	brne	.+12     	; 0x2018 <e_activate_agenda+0x36>
    200c:	1f c0       	rjmp	.+62     	; 0x204c <e_activate_agenda+0x6a>
    200e:	85 81       	ldd	r24, Z+5	; 0x05
    2010:	96 81       	ldd	r25, Z+6	; 0x06
    2012:	8c 17       	cp	r24, r28
    2014:	9d 07       	cpc	r25, r29
    2016:	d1 f0       	breq	.+52     	; 0x204c <e_activate_agenda+0x6a>
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
    2018:	07 80       	ldd	r0, Z+7	; 0x07
    201a:	f0 85       	ldd	r31, Z+8	; 0x08
    201c:	e0 2d       	mov	r30, r0
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    201e:	30 97       	sbiw	r30, 0x00	; 0
    2020:	b1 f7       	brne	.-20     	; 0x200e <e_activate_agenda+0x2c>
		if (current->function == func)
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
    2022:	89 e0       	ldi	r24, 0x09	; 9
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <malloc>
    202a:	fc 01       	movw	r30, r24
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	b9 f0       	breq	.+46     	; 0x205e <e_activate_agenda+0x7c>
		exit (1); //(EXIT_FAILURE);

	current->cycle = cycle;
    2030:	f1 82       	std	Z+1, r15	; 0x01
    2032:	e0 82       	st	Z, r14
	current->counter = 0;
    2034:	13 82       	std	Z+3, r1	; 0x03
    2036:	12 82       	std	Z+2, r1	; 0x02
	current->activate = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	84 83       	std	Z+4, r24	; 0x04
	current->function = func;
    203c:	d6 83       	std	Z+6, r29	; 0x06
    203e:	c5 83       	std	Z+5, r28	; 0x05
	current->next = agenda_list;
    2040:	10 87       	std	Z+8, r17	; 0x08
    2042:	07 83       	std	Z+7, r16	; 0x07

	agenda_list = current;
    2044:	f0 93 24 03 	sts	0x0324, r31
    2048:	e0 93 23 03 	sts	0x0323, r30
	return(EXIT_OK);
}
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	08 95       	ret
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
		exit (1); //(EXIT_FAILURE);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_exit>

00002066 <e_destroy_agenda>:
 * \return \ref EXIT_OK if the agenda has been destroyed, \ref AG_NOT_FOUND otherwise
 */
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;
    2066:	a0 91 23 03 	lds	r26, 0x0323
    206a:	b0 91 24 03 	lds	r27, 0x0324

	while (current)
    206e:	10 97       	sbiw	r26, 0x00	; 0
    2070:	a1 f0       	breq	.+40     	; 0x209a <e_destroy_agenda+0x34>
	{
		if (current->function == func)
    2072:	15 96       	adiw	r26, 0x05	; 5
    2074:	2d 91       	ld	r18, X+
    2076:	3c 91       	ld	r19, X
    2078:	16 97       	sbiw	r26, 0x06	; 6
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	39 f4       	brne	.+14     	; 0x208e <e_destroy_agenda+0x28>
    2080:	1d c0       	rjmp	.+58     	; 0x20bc <e_destroy_agenda+0x56>
    2082:	25 81       	ldd	r18, Z+5	; 0x05
    2084:	36 81       	ldd	r19, Z+6	; 0x06
    2086:	28 17       	cp	r18, r24
    2088:	39 07       	cpc	r19, r25
    208a:	59 f0       	breq	.+22     	; 0x20a2 <e_destroy_agenda+0x3c>
    208c:	df 01       	movw	r26, r30
			return(EXIT_OK);
		}			
		else
		{
			preceding = current;
			current = current->next;
    208e:	17 96       	adiw	r26, 0x07	; 7
    2090:	ed 91       	ld	r30, X+
    2092:	fc 91       	ld	r31, X
    2094:	18 97       	sbiw	r26, 0x08	; 8
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;

	while (current)
    2096:	30 97       	sbiw	r30, 0x00	; 0
    2098:	a1 f7       	brne	.-24     	; 0x2082 <e_destroy_agenda+0x1c>
		{
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
    209a:	22 e0       	ldi	r18, 0x02	; 2
    209c:	30 e0       	ldi	r19, 0x00	; 0
}
    209e:	c9 01       	movw	r24, r18
    20a0:	08 95       	ret
	while (current)
	{
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
    20a2:	87 81       	ldd	r24, Z+7	; 0x07
    20a4:	90 85       	ldd	r25, Z+8	; 0x08
    20a6:	18 96       	adiw	r26, 0x08	; 8
    20a8:	9c 93       	st	X, r25
    20aa:	8e 93       	st	-X, r24
    20ac:	17 97       	sbiw	r26, 0x07	; 7
			else
				agenda_list		= current->next;

			free(current);
    20ae:	cf 01       	movw	r24, r30
    20b0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <free>
			return(EXIT_OK);
    20b4:	21 e0       	ldi	r18, 0x01	; 1
    20b6:	30 e0       	ldi	r19, 0x00	; 0
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
}
    20b8:	c9 01       	movw	r24, r18
    20ba:	08 95       	ret
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
			else
				agenda_list		= current->next;
    20bc:	17 96       	adiw	r26, 0x07	; 7
    20be:	8d 91       	ld	r24, X+
    20c0:	9c 91       	ld	r25, X
    20c2:	18 97       	sbiw	r26, 0x08	; 8
    20c4:	90 93 24 03 	sts	0x0324, r25
    20c8:	80 93 23 03 	sts	0x0323, r24
    20cc:	fd 01       	movw	r30, r26
    20ce:	ef cf       	rjmp	.-34     	; 0x20ae <e_destroy_agenda+0x48>

000020d0 <e_set_agenda_cycle>:
 * \return \ref EXIT_OK if the cycle of the agenda has been modified,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;
    20d0:	e0 91 23 03 	lds	r30, 0x0323
    20d4:	f0 91 24 03 	lds	r31, 0x0324

	while (current)
    20d8:	30 97       	sbiw	r30, 0x00	; 0
    20da:	31 f4       	brne	.+12     	; 0x20e8 <e_set_agenda_cycle+0x18>
    20dc:	10 c0       	rjmp	.+32     	; 0x20fe <e_set_agenda_cycle+0x2e>
		{
			current->cycle = cycle;
			return(EXIT_OK);
		}
		else
			current = current->next;
    20de:	07 80       	ldd	r0, Z+7	; 0x07
    20e0:	f0 85       	ldd	r31, Z+8	; 0x08
    20e2:	e0 2d       	mov	r30, r0
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    20e4:	30 97       	sbiw	r30, 0x00	; 0
    20e6:	59 f0       	breq	.+22     	; 0x20fe <e_set_agenda_cycle+0x2e>
	{
		if (current->function == func)
    20e8:	25 81       	ldd	r18, Z+5	; 0x05
    20ea:	36 81       	ldd	r19, Z+6	; 0x06
    20ec:	28 17       	cp	r18, r24
    20ee:	39 07       	cpc	r19, r25
    20f0:	b1 f7       	brne	.-20     	; 0x20de <e_set_agenda_cycle+0xe>
		{
			current->cycle = cycle;
    20f2:	71 83       	std	Z+1, r23	; 0x01
    20f4:	60 83       	st	Z, r22
			return(EXIT_OK);
    20f6:	21 e0       	ldi	r18, 0x01	; 1
    20f8:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    20fa:	c9 01       	movw	r24, r18
    20fc:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    20fe:	22 e0       	ldi	r18, 0x02	; 2
    2100:	30 e0       	ldi	r19, 0x00	; 0
}
    2102:	c9 01       	movw	r24, r18
    2104:	08 95       	ret

00002106 <e_reset_agenda>:
 * \ref e_pause_agenda(void (*func)(void))
 * \sa e_pause_agenda
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    2106:	e0 91 23 03 	lds	r30, 0x0323
    210a:	f0 91 24 03 	lds	r31, 0x0324

	while (current)
    210e:	30 97       	sbiw	r30, 0x00	; 0
    2110:	31 f4       	brne	.+12     	; 0x211e <e_reset_agenda+0x18>
    2112:	10 c0       	rjmp	.+32     	; 0x2134 <e_reset_agenda+0x2e>
		{
			current->counter = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    2114:	07 80       	ldd	r0, Z+7	; 0x07
    2116:	f0 85       	ldd	r31, Z+8	; 0x08
    2118:	e0 2d       	mov	r30, r0
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;

	while (current)
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	59 f0       	breq	.+22     	; 0x2134 <e_reset_agenda+0x2e>
	{
		if (current->function == func)
    211e:	25 81       	ldd	r18, Z+5	; 0x05
    2120:	36 81       	ldd	r19, Z+6	; 0x06
    2122:	28 17       	cp	r18, r24
    2124:	39 07       	cpc	r19, r25
    2126:	b1 f7       	brne	.-20     	; 0x2114 <e_reset_agenda+0xe>
		{
			current->counter = 0;
    2128:	13 82       	std	Z+3, r1	; 0x03
    212a:	12 82       	std	Z+2, r1	; 0x02
			return(EXIT_OK);
    212c:	21 e0       	ldi	r18, 0x01	; 1
    212e:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    2130:	c9 01       	movw	r24, r18
    2132:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2134:	22 e0       	ldi	r18, 0x02	; 2
    2136:	30 e0       	ldi	r19, 0x00	; 0
}
    2138:	c9 01       	movw	r24, r18
    213a:	08 95       	ret

0000213c <e_pause_agenda>:
 * \return \ref EXIT_OK the agenda has been paused,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    213c:	e0 91 23 03 	lds	r30, 0x0323
    2140:	f0 91 24 03 	lds	r31, 0x0324
	
	while (current)
    2144:	30 97       	sbiw	r30, 0x00	; 0
    2146:	31 f4       	brne	.+12     	; 0x2154 <e_pause_agenda+0x18>
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <e_pause_agenda+0x2c>
		{
			current->activate = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    214a:	07 80       	ldd	r0, Z+7	; 0x07
    214c:	f0 85       	ldd	r31, Z+8	; 0x08
    214e:	e0 2d       	mov	r30, r0
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	51 f0       	breq	.+20     	; 0x2168 <e_pause_agenda+0x2c>
	{
		if (current->function == func)
    2154:	25 81       	ldd	r18, Z+5	; 0x05
    2156:	36 81       	ldd	r19, Z+6	; 0x06
    2158:	28 17       	cp	r18, r24
    215a:	39 07       	cpc	r19, r25
    215c:	b1 f7       	brne	.-20     	; 0x214a <e_pause_agenda+0xe>
		{
			current->activate = 0;
    215e:	14 82       	std	Z+4, r1	; 0x04
			return(EXIT_OK);
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    2164:	c9 01       	movw	r24, r18
    2166:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2168:	22 e0       	ldi	r18, 0x02	; 2
    216a:	30 e0       	ldi	r19, 0x00	; 0
	
}
    216c:	c9 01       	movw	r24, r18
    216e:	08 95       	ret

00002170 <e_restart_agenda>:
 *         \ref AG_NOT_FOUND otherwise
 * \sa e_pause_agenda
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    2170:	e0 91 23 03 	lds	r30, 0x0323
    2174:	f0 91 24 03 	lds	r31, 0x0324
	
	while (current)
    2178:	30 97       	sbiw	r30, 0x00	; 0
    217a:	31 f4       	brne	.+12     	; 0x2188 <e_restart_agenda+0x18>
    217c:	10 c0       	rjmp	.+32     	; 0x219e <e_restart_agenda+0x2e>
		{
			current->activate = 1;
			return(EXIT_OK);
		}
		else
			current = current->next;
    217e:	07 80       	ldd	r0, Z+7	; 0x07
    2180:	f0 85       	ldd	r31, Z+8	; 0x08
    2182:	e0 2d       	mov	r30, r0
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    2184:	30 97       	sbiw	r30, 0x00	; 0
    2186:	59 f0       	breq	.+22     	; 0x219e <e_restart_agenda+0x2e>
	{
		if (current->function == func)
    2188:	25 81       	ldd	r18, Z+5	; 0x05
    218a:	36 81       	ldd	r19, Z+6	; 0x06
    218c:	28 17       	cp	r18, r24
    218e:	39 07       	cpc	r19, r25
    2190:	b1 f7       	brne	.-20     	; 0x217e <e_restart_agenda+0xe>
		{
			current->activate = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	84 83       	std	Z+4, r24	; 0x04
			return(EXIT_OK);
    2196:	21 e0       	ldi	r18, 0x01	; 1
    2198:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    219a:	c9 01       	movw	r24, r18
    219c:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    219e:	22 e0       	ldi	r18, 0x02	; 2
    21a0:	30 e0       	ldi	r19, 0x00	; 0
	
}
    21a2:	c9 01       	movw	r24, r18
    21a4:	08 95       	ret

000021a6 <e_init_remote_control>:

/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) // initialisation for IR interruptions on INT0
{

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    21a6:	e8 e6       	ldi	r30, 0x68	; 104
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	82 60       	ori	r24, 0x02	; 2
    21ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    21b0:	ec e6       	ldi	r30, 0x6C	; 108
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 68       	ori	r24, 0x80	; 128
    21b8:	80 83       	st	Z, r24
	IFS0bits.INT0IF = 0;      //clear to enable interrupt
	IEC0bits.INT0IE = 1;      //enable interrupt on INT0  
	return;
*/

	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    21ba:	e0 eb       	ldi	r30, 0xB0	; 176
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	82 60       	ori	r24, 0x02	; 2
    21c2:	80 83       	st	Z, r24

}
    21c4:	08 95       	ret

000021c6 <__vector_10>:

ISR(PCINT1_vect) {
    21c6:	1f 92       	push	r1
    21c8:	0f 92       	push	r0
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	0f 92       	push	r0
    21ce:	11 24       	eor	r1, r1
    21d0:	8f 93       	push	r24
    21d2:	9f 93       	push	r25
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}


	if(bit_is_clear(PINJ, 6)) {
    21d4:	80 91 03 01 	lds	r24, 0x0103
    21d8:	86 fd       	sbrc	r24, 6
    21da:	21 c0       	rjmp	.+66     	; 0x221e <__stack+0x1f>

	PORTB ^= (1 << 5);
    21dc:	85 b1       	in	r24, 0x05	; 5
    21de:	90 e2       	ldi	r25, 0x20	; 32
    21e0:	89 27       	eor	r24, r25
    21e2:	85 b9       	out	0x05, r24	; 5
			TCCR1A &= ~(1 << COM1C1);
			PORTB &= ~(1 << 7);
		}
*/
		//IEC0bits.INT0IE = 0;   			//disable interrup from falling edge
		PCICR &= ~(1 << PCIE1);
    21e4:	80 91 68 00 	lds	r24, 0x0068
    21e8:	8d 7f       	andi	r24, 0xFD	; 253
    21ea:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 &= ~(1 << PCINT15);
    21ee:	80 91 6c 00 	lds	r24, 0x006C
    21f2:	8f 77       	andi	r24, 0x7F	; 127
    21f4:	80 93 6c 00 	sts	0x006C, r24
		// we need 2 ms of delay:
		// 2/0.128 = 15.6
		//OCR2A = 16;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 2/0.032 = 63 => 2.016 ms
		OCR2A = 64;
    21f8:	80 e4       	ldi	r24, 0x40	; 64
    21fa:	80 93 b3 00 	sts	0x00B3, r24
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    21fe:	80 91 b1 00 	lds	r24, 0x00B1
    2202:	86 60       	ori	r24, 0x06	; 6
    2204:	80 93 b1 00 	sts	0x00B1, r24
		TIMSK2 |= (1 << OCIE2A);		
    2208:	80 91 70 00 	lds	r24, 0x0070
    220c:	82 60       	ori	r24, 0x02	; 2
    220e:	80 93 70 00 	sts	0x0070, r24
				
//		PORTB |= (1 << 5);

		check_temp = address_temp = data_temp = 0;
    2212:	10 92 28 03 	sts	0x0328, r1
    2216:	10 92 29 03 	sts	0x0329, r1
    221a:	10 92 2a 03 	sts	0x032A, r1
		return;
	}
}
    221e:	9f 91       	pop	r25
    2220:	8f 91       	pop	r24
    2222:	0f 90       	pop	r0
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	0f 90       	pop	r0
    2228:	1f 90       	pop	r1
    222a:	18 95       	reti

0000222c <e_read_remote_control>:
{
	static int i = -1;
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    222c:	80 91 03 02 	lds	r24, 0x0203
    2230:	90 91 04 02 	lds	r25, 0x0204
    2234:	2f ef       	ldi	r18, 0xFF	; 255
    2236:	8f 3f       	cpi	r24, 0xFF	; 255
    2238:	92 07       	cpc	r25, r18
    223a:	09 f4       	brne	.+2      	; 0x223e <e_read_remote_control+0x12>
    223c:	6a c0       	rjmp	.+212    	; 0x2312 <e_read_remote_control+0xe6>
				i=0;
			}
	} 	
//	e_set_led(2,1);
	
	else if (i == 1)	// check bit read and change timer period
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <e_read_remote_control+0x1a>
    2244:	75 c0       	rjmp	.+234    	; 0x2330 <e_read_remote_control+0x104>
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
		TIMSK2 |= (1 << OCIE2A);

		//e_set_led(1,1);
	} 
	else if ((i > 1) && (i < 7)) // we read address
    2246:	9c 01       	movw	r18, r24
    2248:	22 50       	subi	r18, 0x02	; 2
    224a:	30 40       	sbci	r19, 0x00	; 0
    224c:	25 30       	cpi	r18, 0x05	; 5
    224e:	31 05       	cpc	r19, r1
    2250:	78 f5       	brcc	.+94     	; 0x22b0 <e_read_remote_control+0x84>
//	e_set_led(4,1);
		
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 55;
    2252:	27 e3       	ldi	r18, 0x37	; 55
    2254:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2258:	20 91 b1 00 	lds	r18, 0x00B1
    225c:	26 60       	ori	r18, 0x06	; 6
    225e:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    2262:	20 91 70 00 	lds	r18, 0x0070
    2266:	22 60       	ori	r18, 0x02	; 2
    2268:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    226c:	20 91 03 01 	lds	r18, 0x0103
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	20 74       	andi	r18, 0x40	; 64
    2274:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6-i;
    2276:	00 24       	eor	r0, r0
    2278:	22 0f       	add	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	00 1c       	adc	r0, r0
    227e:	22 0f       	add	r18, r18
    2280:	33 1f       	adc	r19, r19
    2282:	00 1c       	adc	r0, r0
    2284:	23 2f       	mov	r18, r19
    2286:	30 2d       	mov	r19, r0
    2288:	46 e0       	ldi	r20, 0x06	; 6
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	48 1b       	sub	r20, r24
    228e:	59 0b       	sbc	r21, r25
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <e_read_remote_control+0x6a>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	4a 95       	dec	r20
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <e_read_remote_control+0x66>
		address_temp += temp;
    229a:	40 91 29 03 	lds	r20, 0x0329
    229e:	42 0f       	add	r20, r18
    22a0:	40 93 29 03 	sts	0x0329, r20
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
}
    22a4:	01 96       	adiw	r24, 0x01	; 1
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
    22a6:	90 93 04 02 	sts	0x0204, r25
    22aa:	80 93 03 02 	sts	0x0203, r24
    22ae:	08 95       	ret

		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;
	}
	else if ((i > 6) && (i < 13 )) // we read data
    22b0:	9c 01       	movw	r18, r24
    22b2:	27 50       	subi	r18, 0x07	; 7
    22b4:	30 40       	sbci	r19, 0x00	; 0
    22b6:	26 30       	cpi	r18, 0x06	; 6
    22b8:	31 05       	cpc	r19, r1
    22ba:	08 f0       	brcs	.+2      	; 0x22be <e_read_remote_control+0x92>
    22bc:	70 c0       	rjmp	.+224    	; 0x239e <e_read_remote_control+0x172>
//			e_set_led(5,1);

		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 54;
    22be:	26 e3       	ldi	r18, 0x36	; 54
    22c0:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    22c4:	20 91 b1 00 	lds	r18, 0x00B1
    22c8:	26 60       	ori	r18, 0x06	; 6
    22ca:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    22ce:	20 91 70 00 	lds	r18, 0x0070
    22d2:	22 60       	ori	r18, 0x02	; 2
    22d4:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    22d8:	20 91 03 01 	lds	r18, 0x0103
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	20 74       	andi	r18, 0x40	; 64
    22e0:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6+6-i;
    22e2:	00 24       	eor	r0, r0
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	00 1c       	adc	r0, r0
    22ea:	22 0f       	add	r18, r18
    22ec:	33 1f       	adc	r19, r19
    22ee:	00 1c       	adc	r0, r0
    22f0:	23 2f       	mov	r18, r19
    22f2:	30 2d       	mov	r19, r0
    22f4:	4c e0       	ldi	r20, 0x0C	; 12
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	48 1b       	sub	r20, r24
    22fa:	59 0b       	sbc	r21, r25
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <e_read_remote_control+0xd6>
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	4a 95       	dec	r20
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <e_read_remote_control+0xd2>
		data_temp += temp;
    2306:	40 91 28 03 	lds	r20, 0x0328
    230a:	42 0f       	add	r20, r18
    230c:	40 93 28 03 	sts	0x0328, r20
    2310:	c9 cf       	rjmp	.-110    	; 0x22a4 <e_read_remote_control+0x78>
//			SetDCOC3PWM_GB(64,64);
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

		if(REMOTE){
    2312:	20 91 03 01 	lds	r18, 0x0103
    2316:	26 ff       	sbrs	r18, 6
    2318:	28 c0       	rjmp	.+80     	; 0x236a <e_read_remote_control+0x13e>
		//if(bit_is_set(PINJ,6)) {
			//if high it is only a noise
				//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
				//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
				PCICR |= (1 << PCIE1);
    231a:	20 91 68 00 	lds	r18, 0x0068
    231e:	22 60       	ori	r18, 0x02	; 2
    2320:	20 93 68 00 	sts	0x0068, r18
				PCMSK1 |= (1 << PCINT15);
    2324:	20 91 6c 00 	lds	r18, 0x006C
    2328:	20 68       	ori	r18, 0x80	; 128
    232a:	20 93 6c 00 	sts	0x006C, r18
    232e:	08 95       	ret
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

//	e_set_led(3,1);
		check_temp = REMOTE;	   // read the check bit
    2330:	20 91 03 01 	lds	r18, 0x0103
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	20 74       	andi	r18, 0x40	; 64
    2338:	30 70       	andi	r19, 0x00	; 0
    233a:	02 2e       	mov	r0, r18
    233c:	23 2f       	mov	r18, r19
    233e:	00 0c       	add	r0, r0
    2340:	22 1f       	adc	r18, r18
    2342:	33 0b       	sbc	r19, r19
    2344:	00 0c       	add	r0, r0
    2346:	22 1f       	adc	r18, r18
    2348:	33 1f       	adc	r19, r19
    234a:	20 93 2a 03 	sts	0x032A, r18
		//e_set_agenda_cycle(e_read_remote_control, 18); //cycle value is 1.778[ms]
		// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
    234e:	25 e3       	ldi	r18, 0x35	; 53
    2350:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2354:	20 91 b1 00 	lds	r18, 0x00B1
    2358:	26 60       	ori	r18, 0x06	; 6
    235a:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    235e:	20 91 70 00 	lds	r18, 0x0070
    2362:	22 60       	ori	r18, 0x02	; 2
    2364:	20 93 70 00 	sts	0x0070, r18
    2368:	9d cf       	rjmp	.-198    	; 0x22a4 <e_read_remote_control+0x78>
				//e_set_agenda_cycle(e_read_remote_control, 6); //cycle value is 0.6 to go to check bit[ms]
				// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
				//OCR2A = 5;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 0.6/0.032 = 19 => 0.608
				OCR2A = 28;
    236a:	8c e1       	ldi	r24, 0x1C	; 28
    236c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2370:	80 91 b1 00 	lds	r24, 0x00B1
    2374:	86 60       	ori	r24, 0x06	; 6
    2376:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);									
    237a:	80 91 70 00 	lds	r24, 0x0070
    237e:	82 60       	ori	r24, 0x02	; 2
    2380:	80 93 70 00 	sts	0x0070, r24

				check_temp = address_temp = data_temp = 0;
    2384:	10 92 28 03 	sts	0x0328, r1
    2388:	10 92 29 03 	sts	0x0329, r1
    238c:	10 92 2a 03 	sts	0x032A, r1
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
    2394:	90 93 04 02 	sts	0x0204, r25
    2398:	80 93 03 02 	sts	0x0203, r24
    239c:	08 95       	ret
		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;
	}
	
	else if (i == 13) // last bit read
    239e:	8d 30       	cpi	r24, 0x0D	; 13
    23a0:	91 05       	cpc	r25, r1
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <e_read_remote_control+0x17a>
    23a4:	7f cf       	rjmp	.-258    	; 0x22a4 <e_read_remote_control+0x78>
//		}

		//e_set_led(1,0);
		//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
		//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
		PCICR |= (1 << PCIE1);
    23a6:	80 91 68 00 	lds	r24, 0x0068
    23aa:	82 60       	ori	r24, 0x02	; 2
    23ac:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);
    23b0:	80 91 6c 00 	lds	r24, 0x006C
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	80 93 6c 00 	sts	0x006C, r24
		//e_destroy_agenda(e_read_remote_control);
		i = -1;
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	9f ef       	ldi	r25, 0xFF	; 255
    23be:	90 93 04 02 	sts	0x0204, r25
    23c2:	80 93 03 02 	sts	0x0203, r24
		check = check_temp;
    23c6:	80 91 2a 03 	lds	r24, 0x032A
    23ca:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    23ce:	80 91 29 03 	lds	r24, 0x0329
    23d2:	80 93 25 03 	sts	0x0325, r24
		data_ir = data_temp;
    23d6:	80 91 28 03 	lds	r24, 0x0328
    23da:	80 93 26 03 	sts	0x0326, r24
		command_received=1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	80 93 c7 03 	sts	0x03C7, r24
    23e4:	08 95       	ret

000023e6 <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    23e6:	80 91 00 02 	lds	r24, 0x0200
    23ea:	08 95       	ret

000023ec <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    23ec:	80 91 25 03 	lds	r24, 0x0325
    23f0:	08 95       	ret

000023f2 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    23f2:	80 91 26 03 	lds	r24, 0x0326
    23f6:	08 95       	ret

000023f8 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	8f 93       	push	r24
    240c:	9f 93       	push	r25

	static int i = -1;

//	PORTB ^= (1 << 5);

	PORTB &= ~(1 << 5);
    240e:	2d 98       	cbi	0x05, 5	; 5

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);
    2410:	80 91 b1 00 	lds	r24, 0x00B1
    2414:	88 7f       	andi	r24, 0xF8	; 248
    2416:	80 93 b1 00 	sts	0x00B1, r24

	//e_read_remote_control();
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    241a:	80 91 01 02 	lds	r24, 0x0201
    241e:	90 91 02 02 	lds	r25, 0x0202
    2422:	2f ef       	ldi	r18, 0xFF	; 255
    2424:	8f 3f       	cpi	r24, 0xFF	; 255
    2426:	92 07       	cpc	r25, r18
    2428:	09 f4       	brne	.+2      	; 0x242c <__vector_13+0x34>
    242a:	75 c0       	rjmp	.+234    	; 0x2516 <__vector_13+0x11e>
			TIMSK2 |= (1 << OCIE2A);									

			check_temp = address_temp = data_temp = 0;
			i=0;
		}
	} else if (i == 1)	{ // check bit read and change timer period
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <__vector_13+0x3c>
    2432:	80 c0       	rjmp	.+256    	; 0x2534 <__vector_13+0x13c>
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
		TIMSK2 |= (1 << OCIE2A);

	} else if ((i > 1) && (i < 7)) { // we read address
    2434:	9c 01       	movw	r18, r24
    2436:	22 50       	subi	r18, 0x02	; 2
    2438:	30 40       	sbci	r19, 0x00	; 0
    243a:	25 30       	cpi	r18, 0x05	; 5
    243c:	31 05       	cpc	r19, r1
    243e:	d0 f5       	brcc	.+116    	; 0x24b4 <__vector_13+0xbc>
		
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 55;
    2440:	27 e3       	ldi	r18, 0x37	; 55
    2442:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2446:	20 91 b1 00 	lds	r18, 0x00B1
    244a:	26 60       	ori	r18, 0x06	; 6
    244c:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    2450:	20 91 70 00 	lds	r18, 0x0070
    2454:	22 60       	ori	r18, 0x02	; 2
    2456:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    245a:	20 91 03 01 	lds	r18, 0x0103
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	20 74       	andi	r18, 0x40	; 64
    2462:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6-i;
    2464:	00 24       	eor	r0, r0
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	00 1c       	adc	r0, r0
    246c:	22 0f       	add	r18, r18
    246e:	33 1f       	adc	r19, r19
    2470:	00 1c       	adc	r0, r0
    2472:	23 2f       	mov	r18, r19
    2474:	30 2d       	mov	r19, r0
    2476:	46 e0       	ldi	r20, 0x06	; 6
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	48 1b       	sub	r20, r24
    247c:	59 0b       	sbc	r21, r25
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <__vector_13+0x8c>
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	4a 95       	dec	r20
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <__vector_13+0x88>
		address_temp += temp;
    2488:	40 91 29 03 	lds	r20, 0x0329
    248c:	42 0f       	add	r20, r18
    248e:	40 93 29 03 	sts	0x0329, r20
	if(i!=-1)
		i++;

	PORTB |= (1 << 5);

}
    2492:	01 96       	adiw	r24, 0x01	; 1
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
		i++;
    2494:	90 93 02 02 	sts	0x0202, r25
    2498:	80 93 01 02 	sts	0x0201, r24

	PORTB |= (1 << 5);
    249c:	2d 9a       	sbi	0x05, 5	; 5

}
    249e:	9f 91       	pop	r25
    24a0:	8f 91       	pop	r24
    24a2:	5f 91       	pop	r21
    24a4:	4f 91       	pop	r20
    24a6:	3f 91       	pop	r19
    24a8:	2f 91       	pop	r18
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	0f 90       	pop	r0
    24b0:	1f 90       	pop	r1
    24b2:	18 95       	reti

		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;

	} else if ((i > 6) && (i < 13 )) { // we read data
    24b4:	9c 01       	movw	r18, r24
    24b6:	27 50       	subi	r18, 0x07	; 7
    24b8:	30 40       	sbci	r19, 0x00	; 0
    24ba:	26 30       	cpi	r18, 0x06	; 6
    24bc:	31 05       	cpc	r19, r1
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <__vector_13+0xca>
    24c0:	6c c0       	rjmp	.+216    	; 0x259a <__vector_13+0x1a2>

		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 54;
    24c2:	26 e3       	ldi	r18, 0x36	; 54
    24c4:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    24c8:	20 91 b1 00 	lds	r18, 0x00B1
    24cc:	26 60       	ori	r18, 0x06	; 6
    24ce:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    24d2:	20 91 70 00 	lds	r18, 0x0070
    24d6:	22 60       	ori	r18, 0x02	; 2
    24d8:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    24dc:	20 91 03 01 	lds	r18, 0x0103
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	20 74       	andi	r18, 0x40	; 64
    24e4:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6+6-i;
    24e6:	00 24       	eor	r0, r0
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	00 1c       	adc	r0, r0
    24ee:	22 0f       	add	r18, r18
    24f0:	33 1f       	adc	r19, r19
    24f2:	00 1c       	adc	r0, r0
    24f4:	23 2f       	mov	r18, r19
    24f6:	30 2d       	mov	r19, r0
    24f8:	4c e0       	ldi	r20, 0x0C	; 12
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	48 1b       	sub	r20, r24
    24fe:	59 0b       	sbc	r21, r25
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <__vector_13+0x10e>
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	4a 95       	dec	r20
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <__vector_13+0x10a>
		data_temp += temp;
    250a:	40 91 28 03 	lds	r20, 0x0328
    250e:	42 0f       	add	r20, r18
    2510:	40 93 28 03 	sts	0x0328, r20
    2514:	be cf       	rjmp	.-132    	; 0x2492 <__vector_13+0x9a>
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
	{

		if(REMOTE) {	//if high it is only a noise
    2516:	20 91 03 01 	lds	r18, 0x0103
    251a:	26 ff       	sbrs	r18, 6
    251c:	28 c0       	rjmp	.+80     	; 0x256e <__vector_13+0x176>

			PCICR |= (1 << PCIE1);		// enable interrupt
    251e:	20 91 68 00 	lds	r18, 0x0068
    2522:	22 60       	ori	r18, 0x02	; 2
    2524:	20 93 68 00 	sts	0x0068, r18
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2528:	20 91 6c 00 	lds	r18, 0x006C
    252c:	20 68       	ori	r18, 0x80	; 128
    252e:	20 93 6c 00 	sts	0x006C, r18
    2532:	b4 cf       	rjmp	.-152    	; 0x249c <__vector_13+0xa4>
			check_temp = address_temp = data_temp = 0;
			i=0;
		}
	} else if (i == 1)	{ // check bit read and change timer period

		check_temp = REMOTE;	   // read the check bit
    2534:	20 91 03 01 	lds	r18, 0x0103
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	20 74       	andi	r18, 0x40	; 64
    253c:	30 70       	andi	r19, 0x00	; 0
    253e:	02 2e       	mov	r0, r18
    2540:	23 2f       	mov	r18, r19
    2542:	00 0c       	add	r0, r0
    2544:	22 1f       	adc	r18, r18
    2546:	33 0b       	sbc	r19, r19
    2548:	00 0c       	add	r0, r0
    254a:	22 1f       	adc	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	20 93 2a 03 	sts	0x032A, r18
		//cycle value is 1.778[ms]
		// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
    2552:	25 e3       	ldi	r18, 0x35	; 53
    2554:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2558:	20 91 b1 00 	lds	r18, 0x00B1
    255c:	26 60       	ori	r18, 0x06	; 6
    255e:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    2562:	20 91 70 00 	lds	r18, 0x0070
    2566:	22 60       	ori	r18, 0x02	; 2
    2568:	20 93 70 00 	sts	0x0070, r18
    256c:	92 cf       	rjmp	.-220    	; 0x2492 <__vector_13+0x9a>
			//cycle value is 0.6 to go to check bit[ms]
			// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
			//OCR2A = 5;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 0.6/0.032 = 19 => 0.608
			OCR2A = 28;
    256e:	8c e1       	ldi	r24, 0x1C	; 28
    2570:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2574:	80 91 b1 00 	lds	r24, 0x00B1
    2578:	86 60       	ori	r24, 0x06	; 6
    257a:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);									
    257e:	80 91 70 00 	lds	r24, 0x0070
    2582:	82 60       	ori	r24, 0x02	; 2
    2584:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2588:	10 92 28 03 	sts	0x0328, r1
    258c:	10 92 29 03 	sts	0x0329, r1
    2590:	10 92 2a 03 	sts	0x032A, r1
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	7d cf       	rjmp	.-262    	; 0x2494 <__vector_13+0x9c>

		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;

	} else if (i == 13) { // last bit read
    259a:	8d 30       	cpi	r24, 0x0D	; 13
    259c:	91 05       	cpc	r25, r1
    259e:	09 f0       	breq	.+2      	; 0x25a2 <__vector_13+0x1aa>
    25a0:	78 cf       	rjmp	.-272    	; 0x2492 <__vector_13+0x9a>

		PCICR |= (1 << PCIE1);		// enable interrupt
    25a2:	80 91 68 00 	lds	r24, 0x0068
    25a6:	82 60       	ori	r24, 0x02	; 2
    25a8:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    25ac:	80 91 6c 00 	lds	r24, 0x006C
    25b0:	80 68       	ori	r24, 0x80	; 128
    25b2:	80 93 6c 00 	sts	0x006C, r24

		i = -1;
    25b6:	8f ef       	ldi	r24, 0xFF	; 255
    25b8:	9f ef       	ldi	r25, 0xFF	; 255
    25ba:	90 93 02 02 	sts	0x0202, r25
    25be:	80 93 01 02 	sts	0x0201, r24
		check = check_temp;
    25c2:	80 91 2a 03 	lds	r24, 0x032A
    25c6:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    25ca:	80 91 29 03 	lds	r24, 0x0329
    25ce:	80 93 25 03 	sts	0x0325, r24
		data_ir = data_temp;
    25d2:	80 91 28 03 	lds	r24, 0x0328
    25d6:	80 93 26 03 	sts	0x0326, r24
		command_received=1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	80 93 c7 03 	sts	0x03C7, r24
    25e0:	5d cf       	rjmp	.-326    	; 0x249c <__vector_13+0xa4>

000025e2 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    25e2:	08 95       	ret

000025e4 <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    25e4:	08 95       	ret

000025e6 <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    25e6:	2f 92       	push	r2
    25e8:	3f 92       	push	r3
    25ea:	4f 92       	push	r4
    25ec:	5f 92       	push	r5
    25ee:	6f 92       	push	r6
    25f0:	7f 92       	push	r7
    25f2:	8f 92       	push	r8
    25f4:	9f 92       	push	r9
    25f6:	af 92       	push	r10
    25f8:	bf 92       	push	r11
    25fa:	cf 92       	push	r12
    25fc:	df 92       	push	r13
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	2c 97       	sbiw	r28, 0x0c	; 12
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	9c 87       	std	Y+12, r25	; 0x0c
    261c:	8b 87       	std	Y+11, r24	; 0x0b
    261e:	79 87       	std	Y+9, r23	; 0x09
    2620:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    2622:	fc 01       	movw	r30, r24
    2624:	20 80       	ld	r2, Z
    2626:	31 80       	ldd	r3, Z+1	; 0x01
    2628:	42 80       	ldd	r4, Z+2	; 0x02
    262a:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    262c:	fb 01       	movw	r30, r22
    262e:	a0 80       	ld	r10, Z
    2630:	b1 80       	ldd	r11, Z+1	; 0x01
    2632:	c2 80       	ldd	r12, Z+2	; 0x02
    2634:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    2636:	21 14       	cp	r2, r1
    2638:	31 04       	cpc	r3, r1
    263a:	41 04       	cpc	r4, r1
    263c:	51 04       	cpc	r5, r1
    263e:	31 f4       	brne	.+12     	; 0x264c <start_orizzontal_speed_control+0x66>
    2640:	a1 14       	cp	r10, r1
    2642:	b1 04       	cpc	r11, r1
    2644:	c1 04       	cpc	r12, r1
    2646:	d1 04       	cpc	r13, r1
    2648:	09 f4       	brne	.+2      	; 0x264c <start_orizzontal_speed_control+0x66>
    264a:	bd c1       	rjmp	.+890    	; 0x29c6 <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    264c:	60 90 05 04 	lds	r6, 0x0405
    2650:	70 90 06 04 	lds	r7, 0x0406
    2654:	80 90 07 04 	lds	r8, 0x0407
    2658:	90 90 08 04 	lds	r9, 0x0408
    265c:	60 92 09 04 	sts	0x0409, r6
    2660:	70 92 0a 04 	sts	0x040A, r7
    2664:	80 92 0b 04 	sts	0x040B, r8
    2668:	90 92 0c 04 	sts	0x040C, r9
	if(pwm_right_working >= 0) {
    266c:	d7 fc       	sbrc	r13, 7
    266e:	35 c2       	rjmp	.+1130   	; 0x2ada <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    2670:	80 91 82 03 	lds	r24, 0x0382
    2674:	90 91 83 03 	lds	r25, 0x0383
    2678:	a0 e0       	ldi	r26, 0x00	; 0
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	86 01       	movw	r16, r12
    267e:	75 01       	movw	r14, r10
    2680:	e8 1a       	sub	r14, r24
    2682:	f9 0a       	sbc	r15, r25
    2684:	0a 0b       	sbc	r16, r26
    2686:	1b 0b       	sbc	r17, r27
    2688:	e0 92 a0 03 	sts	0x03A0, r14
    268c:	f0 92 a1 03 	sts	0x03A1, r15
    2690:	00 93 a2 03 	sts	0x03A2, r16
    2694:	10 93 a3 03 	sts	0x03A3, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    2698:	e0 92 05 04 	sts	0x0405, r14
    269c:	f0 92 06 04 	sts	0x0406, r15
    26a0:	00 93 07 04 	sts	0x0407, r16
    26a4:	10 93 08 04 	sts	0x0408, r17
	delta_right_speed_sum += delta_right_speed;
    26a8:	60 91 a8 03 	lds	r22, 0x03A8
    26ac:	70 91 a9 03 	lds	r23, 0x03A9
    26b0:	80 91 aa 03 	lds	r24, 0x03AA
    26b4:	90 91 ab 03 	lds	r25, 0x03AB
    26b8:	6e 0d       	add	r22, r14
    26ba:	7f 1d       	adc	r23, r15
    26bc:	80 1f       	adc	r24, r16
    26be:	91 1f       	adc	r25, r17
    26c0:	60 93 a8 03 	sts	0x03A8, r22
    26c4:	70 93 a9 03 	sts	0x03A9, r23
    26c8:	80 93 aa 03 	sts	0x03AA, r24
    26cc:	90 93 ab 03 	sts	0x03AB, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    26d0:	61 38       	cpi	r22, 0x81	; 129
    26d2:	fc e0       	ldi	r31, 0x0C	; 12
    26d4:	7f 07       	cpc	r23, r31
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	8f 07       	cpc	r24, r31
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	9f 07       	cpc	r25, r31
    26de:	0c f0       	brlt	.+2      	; 0x26e2 <start_orizzontal_speed_control+0xfc>
    26e0:	8b c1       	rjmp	.+790    	; 0x29f8 <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    26e2:	60 38       	cpi	r22, 0x80	; 128
    26e4:	e3 ef       	ldi	r30, 0xF3	; 243
    26e6:	7e 07       	cpc	r23, r30
    26e8:	ef ef       	ldi	r30, 0xFF	; 255
    26ea:	8e 07       	cpc	r24, r30
    26ec:	ef ef       	ldi	r30, 0xFF	; 255
    26ee:	9e 07       	cpc	r25, r30
    26f0:	0c f4       	brge	.+2      	; 0x26f4 <start_orizzontal_speed_control+0x10e>
    26f2:	2c c2       	rjmp	.+1112   	; 0x2b4c <start_orizzontal_speed_control+0x566>
    26f4:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    26f8:	9b 01       	movw	r18, r22
    26fa:	ac 01       	movw	r20, r24
    26fc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3>
    2700:	6d 83       	std	Y+5, r22	; 0x05
    2702:	7e 83       	std	Y+6, r23	; 0x06
    2704:	8f 83       	std	Y+7, r24	; 0x07
    2706:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    2708:	c8 01       	movw	r24, r16
    270a:	b7 01       	movw	r22, r14
    270c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	48 ec       	ldi	r20, 0xC8	; 200
    2716:	52 e4       	ldi	r21, 0x42	; 66
    2718:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    271c:	69 83       	std	Y+1, r22	; 0x01
    271e:	7a 83       	std	Y+2, r23	; 0x02
    2720:	8b 83       	std	Y+3, r24	; 0x03
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	c8 01       	movw	r24, r16
    2726:	b7 01       	movw	r22, r14
    2728:	66 19       	sub	r22, r6
    272a:	77 09       	sbc	r23, r7
    272c:	88 09       	sbc	r24, r8
    272e:	99 09       	sbc	r25, r9
    2730:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    2740:	9b 01       	movw	r18, r22
    2742:	ac 01       	movw	r20, r24
    2744:	69 81       	ldd	r22, Y+1	; 0x01
    2746:	7a 81       	ldd	r23, Y+2	; 0x02
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3>
    2750:	bd 81       	ldd	r27, Y+5	; 0x05
    2752:	ae 81       	ldd	r26, Y+6	; 0x06
    2754:	ef 80       	ldd	r14, Y+7	; 0x07
    2756:	6a 84       	ldd	r6, Y+10	; 0x0a
    2758:	2b 2f       	mov	r18, r27
    275a:	3a 2f       	mov	r19, r26
    275c:	4e 2d       	mov	r20, r14
    275e:	56 2d       	mov	r21, r6
    2760:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3>
    2764:	0e 94 ed 1b 	call	0x37da	; 0x37da <__fixsfsi>
    2768:	7b 01       	movw	r14, r22
    276a:	8c 01       	movw	r16, r24
    276c:	60 93 b0 03 	sts	0x03B0, r22
    2770:	70 93 b1 03 	sts	0x03B1, r23
    2774:	80 93 b2 03 	sts	0x03B2, r24
    2778:	90 93 b3 03 	sts	0x03B3, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    277c:	c6 01       	movw	r24, r12
    277e:	b5 01       	movw	r22, r10
    2780:	28 e7       	ldi	r18, 0x78	; 120
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__mulsi3>
    278c:	6e 0d       	add	r22, r14
    278e:	7f 1d       	adc	r23, r15
    2790:	80 1f       	adc	r24, r16
    2792:	91 1f       	adc	r25, r17
    2794:	60 93 94 03 	sts	0x0394, r22
    2798:	70 93 95 03 	sts	0x0395, r23
    279c:	80 93 96 03 	sts	0x0396, r24
    27a0:	90 93 97 03 	sts	0x0397, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    27a4:	97 fd       	sbrc	r25, 7
    27a6:	76 c1       	rjmp	.+748    	; 0x2a94 <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    27a8:	16 16       	cp	r1, r22
    27aa:	17 06       	cpc	r1, r23
    27ac:	18 06       	cpc	r1, r24
    27ae:	19 06       	cpc	r1, r25
    27b0:	0c f0       	brlt	.+2      	; 0x27b4 <start_orizzontal_speed_control+0x1ce>
    27b2:	7d c1       	rjmp	.+762    	; 0x2aae <start_orizzontal_speed_control+0x4c8>
    27b4:	d7 fc       	sbrc	r13, 7
    27b6:	fd c1       	rjmp	.+1018   	; 0x2bb2 <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    27b8:	61 3c       	cpi	r22, 0xC1	; 193
    27ba:	ed e5       	ldi	r30, 0x5D	; 93
    27bc:	7e 07       	cpc	r23, r30
    27be:	e0 e0       	ldi	r30, 0x00	; 0
    27c0:	8e 07       	cpc	r24, r30
    27c2:	e0 e0       	ldi	r30, 0x00	; 0
    27c4:	9e 07       	cpc	r25, r30
    27c6:	0c f4       	brge	.+2      	; 0x27ca <start_orizzontal_speed_control+0x1e4>
    27c8:	72 c1       	rjmp	.+740    	; 0x2aae <start_orizzontal_speed_control+0x4c8>
    27ca:	80 ec       	ldi	r24, 0xC0	; 192
    27cc:	9d e5       	ldi	r25, 0x5D	; 93
    27ce:	a0 e0       	ldi	r26, 0x00	; 0
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	80 93 94 03 	sts	0x0394, r24
    27d6:	90 93 95 03 	sts	0x0395, r25
    27da:	a0 93 96 03 	sts	0x0396, r26
    27de:	b0 93 97 03 	sts	0x0397, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    27e2:	a0 90 fd 03 	lds	r10, 0x03FD
    27e6:	b0 90 fe 03 	lds	r11, 0x03FE
    27ea:	c0 90 ff 03 	lds	r12, 0x03FF
    27ee:	d0 90 00 04 	lds	r13, 0x0400
    27f2:	a0 92 01 04 	sts	0x0401, r10
    27f6:	b0 92 02 04 	sts	0x0402, r11
    27fa:	c0 92 03 04 	sts	0x0403, r12
    27fe:	d0 92 04 04 	sts	0x0404, r13
	if(pwm_left_working >= 0) {
    2802:	57 fc       	sbrc	r5, 7
    2804:	7d c1       	rjmp	.+762    	; 0x2b00 <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    2806:	80 91 80 03 	lds	r24, 0x0380
    280a:	90 91 81 03 	lds	r25, 0x0381
    280e:	a0 e0       	ldi	r26, 0x00	; 0
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	82 01       	movw	r16, r4
    2814:	71 01       	movw	r14, r2
    2816:	e8 1a       	sub	r14, r24
    2818:	f9 0a       	sbc	r15, r25
    281a:	0a 0b       	sbc	r16, r26
    281c:	1b 0b       	sbc	r17, r27
    281e:	e0 92 9c 03 	sts	0x039C, r14
    2822:	f0 92 9d 03 	sts	0x039D, r15
    2826:	00 93 9e 03 	sts	0x039E, r16
    282a:	10 93 9f 03 	sts	0x039F, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    282e:	e0 92 fd 03 	sts	0x03FD, r14
    2832:	f0 92 fe 03 	sts	0x03FE, r15
    2836:	00 93 ff 03 	sts	0x03FF, r16
    283a:	10 93 00 04 	sts	0x0400, r17
	delta_left_speed_sum += delta_left_speed;
    283e:	60 91 a4 03 	lds	r22, 0x03A4
    2842:	70 91 a5 03 	lds	r23, 0x03A5
    2846:	80 91 a6 03 	lds	r24, 0x03A6
    284a:	90 91 a7 03 	lds	r25, 0x03A7
    284e:	6e 0d       	add	r22, r14
    2850:	7f 1d       	adc	r23, r15
    2852:	80 1f       	adc	r24, r16
    2854:	91 1f       	adc	r25, r17
    2856:	60 93 a4 03 	sts	0x03A4, r22
    285a:	70 93 a5 03 	sts	0x03A5, r23
    285e:	80 93 a6 03 	sts	0x03A6, r24
    2862:	90 93 a7 03 	sts	0x03A7, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    2866:	61 38       	cpi	r22, 0x81	; 129
    2868:	2c e0       	ldi	r18, 0x0C	; 12
    286a:	72 07       	cpc	r23, r18
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	82 07       	cpc	r24, r18
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	92 07       	cpc	r25, r18
    2874:	0c f4       	brge	.+2      	; 0x2878 <start_orizzontal_speed_control+0x292>
    2876:	d3 c0       	rjmp	.+422    	; 0x2a1e <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2878:	80 e8       	ldi	r24, 0x80	; 128
    287a:	9c e0       	ldi	r25, 0x0C	; 12
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	80 93 a4 03 	sts	0x03A4, r24
    2884:	90 93 a5 03 	sts	0x03A5, r25
    2888:	a0 93 a6 03 	sts	0x03A6, r26
    288c:	b0 93 a7 03 	sts	0x03A7, r27
    2890:	19 82       	std	Y+1, r1	; 0x01
    2892:	1d 82       	std	Y+5, r1	; 0x05
    2894:	88 ec       	ldi	r24, 0xC8	; 200
    2896:	8e 83       	std	Y+6, r24	; 0x06
    2898:	e5 e4       	ldi	r30, 0x45	; 69
    289a:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    289c:	c8 01       	movw	r24, r16
    289e:	b7 01       	movw	r22, r14
    28a0:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	48 ec       	ldi	r20, 0xC8	; 200
    28aa:	52 e4       	ldi	r21, 0x42	; 66
    28ac:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    28b0:	3b 01       	movw	r6, r22
    28b2:	4c 01       	movw	r8, r24
    28b4:	c8 01       	movw	r24, r16
    28b6:	b7 01       	movw	r22, r14
    28b8:	6a 19       	sub	r22, r10
    28ba:	7b 09       	sbc	r23, r11
    28bc:	8c 09       	sbc	r24, r12
    28be:	9d 09       	sbc	r25, r13
    28c0:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	c4 01       	movw	r24, r8
    28d6:	b3 01       	movw	r22, r6
    28d8:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3>
    28dc:	b9 81       	ldd	r27, Y+1	; 0x01
    28de:	ad 81       	ldd	r26, Y+5	; 0x05
    28e0:	ee 80       	ldd	r14, Y+6	; 0x06
    28e2:	af 80       	ldd	r10, Y+7	; 0x07
    28e4:	2b 2f       	mov	r18, r27
    28e6:	3a 2f       	mov	r19, r26
    28e8:	4e 2d       	mov	r20, r14
    28ea:	5a 2d       	mov	r21, r10
    28ec:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3>
    28f0:	0e 94 ed 1b 	call	0x37da	; 0x37da <__fixsfsi>
    28f4:	7b 01       	movw	r14, r22
    28f6:	8c 01       	movw	r16, r24
    28f8:	60 93 ac 03 	sts	0x03AC, r22
    28fc:	70 93 ad 03 	sts	0x03AD, r23
    2900:	80 93 ae 03 	sts	0x03AE, r24
    2904:	90 93 af 03 	sts	0x03AF, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    2908:	c2 01       	movw	r24, r4
    290a:	b1 01       	movw	r22, r2
    290c:	28 e7       	ldi	r18, 0x78	; 120
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__mulsi3>
    2918:	6e 0d       	add	r22, r14
    291a:	7f 1d       	adc	r23, r15
    291c:	80 1f       	adc	r24, r16
    291e:	91 1f       	adc	r25, r17
    2920:	60 93 98 03 	sts	0x0398, r22
    2924:	70 93 99 03 	sts	0x0399, r23
    2928:	80 93 9a 03 	sts	0x039A, r24
    292c:	90 93 9b 03 	sts	0x039B, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2930:	97 fd       	sbrc	r25, 7
    2932:	89 c0       	rjmp	.+274    	; 0x2a46 <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    2934:	16 16       	cp	r1, r22
    2936:	17 06       	cpc	r1, r23
    2938:	18 06       	cpc	r1, r24
    293a:	19 06       	cpc	r1, r25
    293c:	0c f0       	brlt	.+2      	; 0x2940 <start_orizzontal_speed_control+0x35a>
    293e:	90 c0       	rjmp	.+288    	; 0x2a60 <start_orizzontal_speed_control+0x47a>
    2940:	57 fc       	sbrc	r5, 7
    2942:	17 c1       	rjmp	.+558    	; 0x2b72 <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2944:	61 3c       	cpi	r22, 0xC1	; 193
    2946:	ed e5       	ldi	r30, 0x5D	; 93
    2948:	7e 07       	cpc	r23, r30
    294a:	e0 e0       	ldi	r30, 0x00	; 0
    294c:	8e 07       	cpc	r24, r30
    294e:	e0 e0       	ldi	r30, 0x00	; 0
    2950:	9e 07       	cpc	r25, r30
    2952:	0c f4       	brge	.+2      	; 0x2956 <start_orizzontal_speed_control+0x370>
    2954:	85 c0       	rjmp	.+266    	; 0x2a60 <start_orizzontal_speed_control+0x47a>
    2956:	80 ec       	ldi	r24, 0xC0	; 192
    2958:	9d e5       	ldi	r25, 0x5D	; 93
    295a:	a0 e0       	ldi	r26, 0x00	; 0
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	80 93 98 03 	sts	0x0398, r24
    2962:	90 93 99 03 	sts	0x0399, r25
    2966:	a0 93 9a 03 	sts	0x039A, r26
    296a:	b0 93 9b 03 	sts	0x039B, r27
    296e:	64 eb       	ldi	r22, 0xB4	; 180
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2976:	eb 85       	ldd	r30, Y+11	; 0x0b
    2978:	fc 85       	ldd	r31, Y+12	; 0x0c
    297a:	60 83       	st	Z, r22
    297c:	71 83       	std	Z+1, r23	; 0x01
    297e:	82 83       	std	Z+2, r24	; 0x02
    2980:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2982:	60 91 94 03 	lds	r22, 0x0394
    2986:	70 91 95 03 	lds	r23, 0x0395
    298a:	80 91 96 03 	lds	r24, 0x0396
    298e:	90 91 97 03 	lds	r25, 0x0397
    2992:	26 e6       	ldi	r18, 0x66	; 102
    2994:	32 e0       	ldi	r19, 0x02	; 2
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__mulsi3>
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	39 e0       	ldi	r19, 0x09	; 9
    29a2:	4d e3       	ldi	r20, 0x3D	; 61
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__divmodsi4>
    29aa:	ca 01       	movw	r24, r20
    29ac:	b9 01       	movw	r22, r18
    29ae:	2c e3       	ldi	r18, 0x3C	; 60
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__mulsi3>
    29ba:	e8 85       	ldd	r30, Y+8	; 0x08
    29bc:	f9 85       	ldd	r31, Y+9	; 0x09
    29be:	60 83       	st	Z, r22
    29c0:	71 83       	std	Z+1, r23	; 0x01
    29c2:	82 83       	std	Z+2, r24	; 0x02
    29c4:	93 83       	std	Z+3, r25	; 0x03

}
    29c6:	2c 96       	adiw	r28, 0x0c	; 12
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	7f 90       	pop	r7
    29ec:	6f 90       	pop	r6
    29ee:	5f 90       	pop	r5
    29f0:	4f 90       	pop	r4
    29f2:	3f 90       	pop	r3
    29f4:	2f 90       	pop	r2
    29f6:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    29f8:	80 e8       	ldi	r24, 0x80	; 128
    29fa:	9c e0       	ldi	r25, 0x0C	; 12
    29fc:	a0 e0       	ldi	r26, 0x00	; 0
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	80 93 a8 03 	sts	0x03A8, r24
    2a04:	90 93 a9 03 	sts	0x03A9, r25
    2a08:	a0 93 aa 03 	sts	0x03AA, r26
    2a0c:	b0 93 ab 03 	sts	0x03AB, r27
    2a10:	1d 82       	std	Y+5, r1	; 0x05
    2a12:	1e 82       	std	Y+6, r1	; 0x06
    2a14:	28 ec       	ldi	r18, 0xC8	; 200
    2a16:	2f 83       	std	Y+7, r18	; 0x07
    2a18:	85 e4       	ldi	r24, 0x45	; 69
    2a1a:	8a 87       	std	Y+10, r24	; 0x0a
    2a1c:	75 ce       	rjmp	.-790    	; 0x2708 <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2a1e:	60 38       	cpi	r22, 0x80	; 128
    2a20:	f3 ef       	ldi	r31, 0xF3	; 243
    2a22:	7f 07       	cpc	r23, r31
    2a24:	ff ef       	ldi	r31, 0xFF	; 255
    2a26:	8f 07       	cpc	r24, r31
    2a28:	ff ef       	ldi	r31, 0xFF	; 255
    2a2a:	9f 07       	cpc	r25, r31
    2a2c:	0c f4       	brge	.+2      	; 0x2a30 <start_orizzontal_speed_control+0x44a>
    2a2e:	7b c0       	rjmp	.+246    	; 0x2b26 <start_orizzontal_speed_control+0x540>
    2a30:	0e 94 8f 1b 	call	0x371e	; 0x371e <__floatsisf>
    2a34:	9b 01       	movw	r18, r22
    2a36:	ac 01       	movw	r20, r24
    2a38:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3>
    2a3c:	69 83       	std	Y+1, r22	; 0x01
    2a3e:	7d 83       	std	Y+5, r23	; 0x05
    2a40:	8e 83       	std	Y+6, r24	; 0x06
    2a42:	9f 83       	std	Y+7, r25	; 0x07
    2a44:	2b cf       	rjmp	.-426    	; 0x289c <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2a46:	57 fc       	sbrc	r5, 7
    2a48:	0b c0       	rjmp	.+22     	; 0x2a60 <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    2a4a:	10 92 98 03 	sts	0x0398, r1
    2a4e:	10 92 99 03 	sts	0x0399, r1
    2a52:	10 92 9a 03 	sts	0x039A, r1
    2a56:	10 92 9b 03 	sts	0x039B, r1
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2a60:	60 34       	cpi	r22, 0x40	; 64
    2a62:	f2 ea       	ldi	r31, 0xA2	; 162
    2a64:	7f 07       	cpc	r23, r31
    2a66:	ff ef       	ldi	r31, 0xFF	; 255
    2a68:	8f 07       	cpc	r24, r31
    2a6a:	ff ef       	ldi	r31, 0xFF	; 255
    2a6c:	9f 07       	cpc	r25, r31
    2a6e:	0c f0       	brlt	.+2      	; 0x2a72 <start_orizzontal_speed_control+0x48c>
    2a70:	8b c0       	rjmp	.+278    	; 0x2b88 <start_orizzontal_speed_control+0x5a2>
    2a72:	80 e4       	ldi	r24, 0x40	; 64
    2a74:	92 ea       	ldi	r25, 0xA2	; 162
    2a76:	af ef       	ldi	r26, 0xFF	; 255
    2a78:	bf ef       	ldi	r27, 0xFF	; 255
    2a7a:	80 93 98 03 	sts	0x0398, r24
    2a7e:	90 93 99 03 	sts	0x0399, r25
    2a82:	a0 93 9a 03 	sts	0x039A, r26
    2a86:	b0 93 9b 03 	sts	0x039B, r27
    2a8a:	6c e4       	ldi	r22, 0x4C	; 76
    2a8c:	7f ef       	ldi	r23, 0xFF	; 255
    2a8e:	8f ef       	ldi	r24, 0xFF	; 255
    2a90:	9f ef       	ldi	r25, 0xFF	; 255
    2a92:	71 cf       	rjmp	.-286    	; 0x2976 <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2a94:	d7 fc       	sbrc	r13, 7
    2a96:	0b c0       	rjmp	.+22     	; 0x2aae <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    2a98:	10 92 94 03 	sts	0x0394, r1
    2a9c:	10 92 95 03 	sts	0x0395, r1
    2aa0:	10 92 96 03 	sts	0x0396, r1
    2aa4:	10 92 97 03 	sts	0x0397, r1
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	70 e0       	ldi	r23, 0x00	; 0
    2aac:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2aae:	60 34       	cpi	r22, 0x40	; 64
    2ab0:	f2 ea       	ldi	r31, 0xA2	; 162
    2ab2:	7f 07       	cpc	r23, r31
    2ab4:	ff ef       	ldi	r31, 0xFF	; 255
    2ab6:	8f 07       	cpc	r24, r31
    2ab8:	ff ef       	ldi	r31, 0xFF	; 255
    2aba:	9f 07       	cpc	r25, r31
    2abc:	0c f0       	brlt	.+2      	; 0x2ac0 <start_orizzontal_speed_control+0x4da>
    2abe:	91 ce       	rjmp	.-734    	; 0x27e2 <start_orizzontal_speed_control+0x1fc>
    2ac0:	80 e4       	ldi	r24, 0x40	; 64
    2ac2:	92 ea       	ldi	r25, 0xA2	; 162
    2ac4:	af ef       	ldi	r26, 0xFF	; 255
    2ac6:	bf ef       	ldi	r27, 0xFF	; 255
    2ac8:	80 93 94 03 	sts	0x0394, r24
    2acc:	90 93 95 03 	sts	0x0395, r25
    2ad0:	a0 93 96 03 	sts	0x0396, r26
    2ad4:	b0 93 97 03 	sts	0x0397, r27
    2ad8:	84 ce       	rjmp	.-760    	; 0x27e2 <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    2ada:	e0 90 82 03 	lds	r14, 0x0382
    2ade:	f0 90 83 03 	lds	r15, 0x0383
    2ae2:	00 e0       	ldi	r16, 0x00	; 0
    2ae4:	10 e0       	ldi	r17, 0x00	; 0
    2ae6:	ea 0c       	add	r14, r10
    2ae8:	fb 1c       	adc	r15, r11
    2aea:	0c 1d       	adc	r16, r12
    2aec:	1d 1d       	adc	r17, r13
    2aee:	e0 92 a0 03 	sts	0x03A0, r14
    2af2:	f0 92 a1 03 	sts	0x03A1, r15
    2af6:	00 93 a2 03 	sts	0x03A2, r16
    2afa:	10 93 a3 03 	sts	0x03A3, r17
    2afe:	cc cd       	rjmp	.-1128   	; 0x2698 <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    2b00:	e0 90 80 03 	lds	r14, 0x0380
    2b04:	f0 90 81 03 	lds	r15, 0x0381
    2b08:	00 e0       	ldi	r16, 0x00	; 0
    2b0a:	10 e0       	ldi	r17, 0x00	; 0
    2b0c:	e2 0c       	add	r14, r2
    2b0e:	f3 1c       	adc	r15, r3
    2b10:	04 1d       	adc	r16, r4
    2b12:	15 1d       	adc	r17, r5
    2b14:	e0 92 9c 03 	sts	0x039C, r14
    2b18:	f0 92 9d 03 	sts	0x039D, r15
    2b1c:	00 93 9e 03 	sts	0x039E, r16
    2b20:	10 93 9f 03 	sts	0x039F, r17
    2b24:	84 ce       	rjmp	.-760    	; 0x282e <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2b26:	80 e8       	ldi	r24, 0x80	; 128
    2b28:	93 ef       	ldi	r25, 0xF3	; 243
    2b2a:	af ef       	ldi	r26, 0xFF	; 255
    2b2c:	bf ef       	ldi	r27, 0xFF	; 255
    2b2e:	80 93 a4 03 	sts	0x03A4, r24
    2b32:	90 93 a5 03 	sts	0x03A5, r25
    2b36:	a0 93 a6 03 	sts	0x03A6, r26
    2b3a:	b0 93 a7 03 	sts	0x03A7, r27
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	1d 82       	std	Y+5, r1	; 0x05
    2b42:	28 ec       	ldi	r18, 0xC8	; 200
    2b44:	2e 83       	std	Y+6, r18	; 0x06
    2b46:	85 ec       	ldi	r24, 0xC5	; 197
    2b48:	8f 83       	std	Y+7, r24	; 0x07
    2b4a:	a8 ce       	rjmp	.-688    	; 0x289c <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2b4c:	80 e8       	ldi	r24, 0x80	; 128
    2b4e:	93 ef       	ldi	r25, 0xF3	; 243
    2b50:	af ef       	ldi	r26, 0xFF	; 255
    2b52:	bf ef       	ldi	r27, 0xFF	; 255
    2b54:	80 93 a8 03 	sts	0x03A8, r24
    2b58:	90 93 a9 03 	sts	0x03A9, r25
    2b5c:	a0 93 aa 03 	sts	0x03AA, r26
    2b60:	b0 93 ab 03 	sts	0x03AB, r27
    2b64:	1d 82       	std	Y+5, r1	; 0x05
    2b66:	1e 82       	std	Y+6, r1	; 0x06
    2b68:	f8 ec       	ldi	r31, 0xC8	; 200
    2b6a:	ff 83       	std	Y+7, r31	; 0x07
    2b6c:	25 ec       	ldi	r18, 0xC5	; 197
    2b6e:	2a 87       	std	Y+10, r18	; 0x0a
    2b70:	cb cd       	rjmp	.-1130   	; 0x2708 <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    2b72:	10 92 98 03 	sts	0x0398, r1
    2b76:	10 92 99 03 	sts	0x0399, r1
    2b7a:	10 92 9a 03 	sts	0x039A, r1
    2b7e:	10 92 9b 03 	sts	0x039B, r1
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2b88:	26 e6       	ldi	r18, 0x66	; 102
    2b8a:	32 e0       	ldi	r19, 0x02	; 2
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__mulsi3>
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	39 e0       	ldi	r19, 0x09	; 9
    2b98:	4d e3       	ldi	r20, 0x3D	; 61
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__divmodsi4>
    2ba0:	ca 01       	movw	r24, r20
    2ba2:	b9 01       	movw	r22, r18
    2ba4:	2c e3       	ldi	r18, 0x3C	; 60
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__mulsi3>
    2bb0:	e2 ce       	rjmp	.-572    	; 0x2976 <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    2bb2:	10 92 94 03 	sts	0x0394, r1
    2bb6:	10 92 95 03 	sts	0x0395, r1
    2bba:	10 92 96 03 	sts	0x0396, r1
    2bbe:	10 92 97 03 	sts	0x0397, r1
    2bc2:	0f ce       	rjmp	.-994    	; 0x27e2 <start_orizzontal_speed_control+0x1fc>

00002bc4 <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    2bc4:	8f ef       	ldi	r24, 0xFF	; 255
    2bc6:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    2bc8:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2bca:	97 ef       	ldi	r25, 0xF7	; 247
    2bcc:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    2bce:	90 ee       	ldi	r25, 0xE0	; 224
    2bd0:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    2bd2:	90 ef       	ldi	r25, 0xF0	; 240
    2bd4:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    2bd6:	90 eb       	ldi	r25, 0xB0	; 176
    2bd8:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2bda:	9c ef       	ldi	r25, 0xFC	; 252
    2bdc:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    2bde:	93 e0       	ldi	r25, 0x03	; 3
    2be0:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    2be2:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2be4:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    2be6:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    2be8:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    2bea:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    2bec:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2bf0:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    2bf4:	9f e8       	ldi	r25, 0x8F	; 143
    2bf6:	90 93 04 01 	sts	0x0104, r25
	PORTJ = 0x00;	// cliff pulse turned off
    2bfa:	10 92 05 01 	sts	0x0105, r1

	DDRK = 0x00;	// adc channel pins as input
    2bfe:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    2c02:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    2c06:	10 92 0b 01 	sts	0x010B, r1

		
}
    2c0a:	08 95       	ret

00002c0c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2c0c:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2c0e:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2c10:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2c14:	80 e2       	ldi	r24, 0x20	; 32
    2c16:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2c1a:	08 95       	ret

00002c1c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c1c:	94 ea       	ldi	r25, 0xA4	; 164
    2c1e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2c22:	90 91 bc 00 	lds	r25, 0x00BC
    2c26:	97 ff       	sbrs	r25, 7
    2c28:	fc cf       	rjmp	.-8      	; 0x2c22 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2c2a:	90 91 b9 00 	lds	r25, 0x00B9
    2c2e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2c30:	98 30       	cpi	r25, 0x08	; 8
    2c32:	21 f0       	breq	.+8      	; 0x2c3c <i2c_start+0x20>
    2c34:	90 31       	cpi	r25, 0x10	; 16
    2c36:	11 f0       	breq	.+4      	; 0x2c3c <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2c3c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c40:	84 e8       	ldi	r24, 0x84	; 132
    2c42:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2c46:	80 91 bc 00 	lds	r24, 0x00BC
    2c4a:	87 ff       	sbrs	r24, 7
    2c4c:	fc cf       	rjmp	.-8      	; 0x2c46 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2c4e:	90 91 b9 00 	lds	r25, 0x00B9
    2c52:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2c54:	98 31       	cpi	r25, 0x18	; 24
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 34       	cpi	r25, 0x40	; 64
    2c5c:	19 f0       	breq	.+6      	; 0x2c64 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2c5e:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2c60:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2c62:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	08 95       	ret

00002c68 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c68:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2c6a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2c6c:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c6e:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2c72:	90 91 bc 00 	lds	r25, 0x00BC
    2c76:	97 ff       	sbrs	r25, 7
    2c78:	fc cf       	rjmp	.-8      	; 0x2c72 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2c7a:	90 91 b9 00 	lds	r25, 0x00B9
    2c7e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2c80:	98 30       	cpi	r25, 0x08	; 8
    2c82:	11 f0       	breq	.+4      	; 0x2c88 <i2c_start_wait+0x20>
    2c84:	90 31       	cpi	r25, 0x10	; 16
    2c86:	99 f7       	brne	.-26     	; 0x2c6e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2c88:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2c8c:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2c90:	90 91 bc 00 	lds	r25, 0x00BC
    2c94:	97 ff       	sbrs	r25, 7
    2c96:	fc cf       	rjmp	.-8      	; 0x2c90 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2c98:	90 91 b9 00 	lds	r25, 0x00B9
    2c9c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2c9e:	90 32       	cpi	r25, 0x20	; 32
    2ca0:	19 f0       	breq	.+6      	; 0x2ca8 <i2c_start_wait+0x40>
    2ca2:	98 35       	cpi	r25, 0x58	; 88
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <i2c_start_wait+0x40>
    2ca6:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2ca8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2cac:	90 91 bc 00 	lds	r25, 0x00BC
    2cb0:	94 fd       	sbrc	r25, 4
    2cb2:	fc cf       	rjmp	.-8      	; 0x2cac <i2c_start_wait+0x44>
    2cb4:	dc cf       	rjmp	.-72     	; 0x2c6e <i2c_start_wait+0x6>

00002cb6 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2cb6:	94 ea       	ldi	r25, 0xA4	; 164
    2cb8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2cbc:	90 91 bc 00 	lds	r25, 0x00BC
    2cc0:	97 ff       	sbrs	r25, 7
    2cc2:	fc cf       	rjmp	.-8      	; 0x2cbc <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2cc4:	90 91 b9 00 	lds	r25, 0x00B9
    2cc8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2cca:	98 30       	cpi	r25, 0x08	; 8
    2ccc:	21 f0       	breq	.+8      	; 0x2cd6 <i2c_rep_start+0x20>
    2cce:	90 31       	cpi	r25, 0x10	; 16
    2cd0:	11 f0       	breq	.+4      	; 0x2cd6 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2cd6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2cda:	84 e8       	ldi	r24, 0x84	; 132
    2cdc:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2ce0:	80 91 bc 00 	lds	r24, 0x00BC
    2ce4:	87 ff       	sbrs	r24, 7
    2ce6:	fc cf       	rjmp	.-8      	; 0x2ce0 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ce8:	90 91 b9 00 	lds	r25, 0x00B9
    2cec:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2cee:	98 31       	cpi	r25, 0x18	; 24
    2cf0:	21 f0       	breq	.+8      	; 0x2cfa <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 34       	cpi	r25, 0x40	; 64
    2cf6:	19 f0       	breq	.+6      	; 0x2cfe <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2cf8:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2cfc:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	08 95       	ret

00002d02 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2d02:	84 e9       	ldi	r24, 0x94	; 148
    2d04:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2d08:	80 91 bc 00 	lds	r24, 0x00BC
    2d0c:	84 fd       	sbrc	r24, 4
    2d0e:	fc cf       	rjmp	.-8      	; 0x2d08 <i2c_stop+0x6>

}/* i2c_stop */
    2d10:	08 95       	ret

00002d12 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2d12:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2d16:	84 e8       	ldi	r24, 0x84	; 132
    2d18:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2d1c:	80 91 bc 00 	lds	r24, 0x00BC
    2d20:	87 ff       	sbrs	r24, 7
    2d22:	fc cf       	rjmp	.-8      	; 0x2d1c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2d24:	90 91 b9 00 	lds	r25, 0x00B9
    2d28:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	98 32       	cpi	r25, 0x28	; 40
    2d2e:	09 f0       	breq	.+2      	; 0x2d32 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2d30:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2d32:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2d34:	08 95       	ret

00002d36 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2d36:	84 ec       	ldi	r24, 0xC4	; 196
    2d38:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2d3c:	80 91 bc 00 	lds	r24, 0x00BC
    2d40:	87 ff       	sbrs	r24, 7
    2d42:	fc cf       	rjmp	.-8      	; 0x2d3c <i2c_readAck+0x6>

    return TWDR;
    2d44:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2d48:	08 95       	ret

00002d4a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2d4a:	84 e8       	ldi	r24, 0x84	; 132
    2d4c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2d50:	80 91 bc 00 	lds	r24, 0x00BC
    2d54:	87 ff       	sbrs	r24, 7
    2d56:	fc cf       	rjmp	.-8      	; 0x2d50 <i2c_readNak+0x6>
	
    return TWDR;
    2d58:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2d5c:	08 95       	ret

00002d5e <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    2d5e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2d62:	80 e1       	ldi	r24, 0x10	; 16
    2d64:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2d68:	e0 ec       	ldi	r30, 0xC0	; 192
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	82 60       	ori	r24, 0x02	; 2
    2d70:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2d72:	e1 ec       	ldi	r30, 0xC1	; 193
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	88 69       	ori	r24, 0x98	; 152
    2d7a:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    2d7c:	e2 ec       	ldi	r30, 0xC2	; 194
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	86 60       	ori	r24, 0x06	; 6
    2d84:	80 83       	st	Z, r24

}
    2d86:	08 95       	ret

00002d88 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    2d88:	90 91 c0 00 	lds	r25, 0x00C0
    2d8c:	95 ff       	sbrs	r25, 5
    2d8e:	fc cf       	rjmp	.-8      	; 0x2d88 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    2d90:	80 93 c6 00 	sts	0x00C6, r24

}
    2d94:	08 95       	ret

00002d96 <__vector_25>:

ISR(USART0_RX_vect) {
    2d96:	1f 92       	push	r1
    2d98:	0f 92       	push	r0
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	0f 92       	push	r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	2f 93       	push	r18
    2da2:	8f 93       	push	r24
    2da4:	9f 93       	push	r25
    2da6:	af 93       	push	r26
    2da8:	bf 93       	push	r27

	char receivedByte = UDR0;
    2daa:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    2dae:	90 91 11 02 	lds	r25, 0x0211
    2db2:	99 23       	and	r25, r25
    2db4:	c9 f0       	breq	.+50     	; 0x2de8 <__vector_25+0x52>
		switch(receivedByte) {
    2db6:	82 33       	cpi	r24, 0x32	; 50
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <__vector_25+0x26>
    2dba:	56 c0       	rjmp	.+172    	; 0x2e68 <__vector_25+0xd2>
    2dbc:	83 33       	cpi	r24, 0x33	; 51
    2dbe:	58 f5       	brcc	.+86     	; 0x2e16 <__vector_25+0x80>
    2dc0:	80 33       	cpi	r24, 0x30	; 48
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <__vector_25+0x30>
    2dc4:	79 c0       	rjmp	.+242    	; 0x2eb8 <__vector_25+0x122>
    2dc6:	81 33       	cpi	r24, 0x31	; 49
    2dc8:	29 f4       	brne	.+10     	; 0x2dd4 <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	80 93 10 02 	sts	0x0210, r24
				choosePeripheral = 0;
    2dd0:	10 92 11 02 	sts	0x0211, r1

	}



}
    2dd4:	bf 91       	pop	r27
    2dd6:	af 91       	pop	r26
    2dd8:	9f 91       	pop	r25
    2dda:	8f 91       	pop	r24
    2ddc:	2f 91       	pop	r18
    2dde:	0f 90       	pop	r0
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	0f 90       	pop	r0
    2de4:	1f 90       	pop	r1
    2de6:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2de8:	90 91 10 02 	lds	r25, 0x0210
    2dec:	92 30       	cpi	r25, 0x02	; 2
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <__vector_25+0x5c>
    2df0:	41 c0       	rjmp	.+130    	; 0x2e74 <__vector_25+0xde>
    2df2:	93 30       	cpi	r25, 0x03	; 3
    2df4:	08 f1       	brcs	.+66     	; 0x2e38 <__vector_25+0xa2>
    2df6:	94 30       	cpi	r25, 0x04	; 4
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <__vector_25+0x66>
    2dfa:	89 c0       	rjmp	.+274    	; 0x2f0e <__vector_25+0x178>
    2dfc:	94 30       	cpi	r25, 0x04	; 4
    2dfe:	08 f4       	brcc	.+2      	; 0x2e02 <__vector_25+0x6c>
    2e00:	6c c0       	rjmp	.+216    	; 0x2eda <__vector_25+0x144>
    2e02:	95 30       	cpi	r25, 0x05	; 5
    2e04:	39 f7       	brne	.-50     	; 0x2dd4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    2e06:	83 37       	cpi	r24, 0x73	; 115
    2e08:	29 f7       	brne	.-54     	; 0x2dd4 <__vector_25+0x3e>
					sendAdcValues = 0;
    2e0a:	10 92 c5 03 	sts	0x03C5, r1
					choosePeripheral = 1;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	80 93 11 02 	sts	0x0211, r24
    2e14:	df cf       	rjmp	.-66     	; 0x2dd4 <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    2e16:	84 33       	cpi	r24, 0x34	; 52
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <__vector_25+0x86>
    2e1a:	59 c0       	rjmp	.+178    	; 0x2ece <__vector_25+0x138>
    2e1c:	84 33       	cpi	r24, 0x34	; 52
    2e1e:	08 f4       	brcc	.+2      	; 0x2e22 <__vector_25+0x8c>
    2e20:	50 c0       	rjmp	.+160    	; 0x2ec2 <__vector_25+0x12c>
    2e22:	85 33       	cpi	r24, 0x35	; 53
    2e24:	b9 f6       	brne	.-82     	; 0x2dd4 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2e26:	85 e0       	ldi	r24, 0x05	; 5
    2e28:	80 93 10 02 	sts	0x0210, r24
				choosePeripheral = 0;
    2e2c:	10 92 11 02 	sts	0x0211, r1
				sendAdcValues = 1;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	80 93 c5 03 	sts	0x03C5, r24
				break;
    2e36:	ce cf       	rjmp	.-100    	; 0x2dd4 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2e38:	99 23       	and	r25, r25
    2e3a:	91 f5       	brne	.+100    	; 0x2ea0 <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    2e3c:	8d 32       	cpi	r24, 0x2D	; 45
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <__vector_25+0xac>
    2e40:	05 c1       	rjmp	.+522    	; 0x304c <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2e42:	8b 32       	cpi	r24, 0x2B	; 43
    2e44:	21 f7       	brne	.-56     	; 0x2e0e <__vector_25+0x78>
					current_pwm = pwm_red-10;
    2e46:	80 91 0d 02 	lds	r24, 0x020D
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2e4e:	97 fd       	sbrc	r25, 7
    2e50:	9c c1       	rjmp	.+824    	; 0x318a <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2e52:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_red == 0) {
    2e56:	88 23       	and	r24, r24
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <__vector_25+0xc6>
    2e5a:	99 c1       	rjmp	.+818    	; 0x318e <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	90 93 89 00 	sts	0x0089, r25
    2e62:	80 93 88 00 	sts	0x0088, r24
    2e66:	b6 cf       	rjmp	.-148    	; 0x2dd4 <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	80 93 10 02 	sts	0x0210, r24
				choosePeripheral = 0;
    2e6e:	10 92 11 02 	sts	0x0211, r1
				break;
    2e72:	b0 cf       	rjmp	.-160    	; 0x2dd4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2e74:	8d 32       	cpi	r24, 0x2D	; 45
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <__vector_25+0xe4>
    2e78:	2f c1       	rjmp	.+606    	; 0x30d8 <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2e7a:	8b 32       	cpi	r24, 0x2B	; 43
    2e7c:	41 f6       	brne	.-112    	; 0x2e0e <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    2e7e:	80 91 0f 02 	lds	r24, 0x020F
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2e86:	97 fd       	sbrc	r25, 7
    2e88:	92 c1       	rjmp	.+804    	; 0x31ae <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2e8a:	80 93 0f 02 	sts	0x020F, r24
					if(pwm_blue == 0) {
    2e8e:	88 23       	and	r24, r24
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <__vector_25+0xfe>
    2e92:	8f c1       	rjmp	.+798    	; 0x31b2 <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	90 93 8d 00 	sts	0x008D, r25
    2e9a:	80 93 8c 00 	sts	0x008C, r24
    2e9e:	9a cf       	rjmp	.-204    	; 0x2dd4 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2ea0:	91 30       	cpi	r25, 0x01	; 1
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <__vector_25+0x110>
    2ea4:	97 cf       	rjmp	.-210    	; 0x2dd4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2ea6:	8d 32       	cpi	r24, 0x2D	; 45
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <__vector_25+0x116>
    2eaa:	b9 c0       	rjmp	.+370    	; 0x301e <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2eac:	8b 32       	cpi	r24, 0x2B	; 43
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <__vector_25+0x11c>
    2eb0:	47 c0       	rjmp	.+142    	; 0x2f40 <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2eb2:	90 93 11 02 	sts	0x0211, r25
    2eb6:	8e cf       	rjmp	.-228    	; 0x2dd4 <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2eb8:	10 92 10 02 	sts	0x0210, r1
				choosePeripheral = 0;
    2ebc:	10 92 11 02 	sts	0x0211, r1
				break;
    2ec0:	89 cf       	rjmp	.-238    	; 0x2dd4 <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	80 93 10 02 	sts	0x0210, r24
				choosePeripheral = 0;
    2ec8:	10 92 11 02 	sts	0x0211, r1
				break;
    2ecc:	83 cf       	rjmp	.-250    	; 0x2dd4 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    2ece:	84 e0       	ldi	r24, 0x04	; 4
    2ed0:	80 93 10 02 	sts	0x0210, r24
				choosePeripheral = 0;
    2ed4:	10 92 11 02 	sts	0x0211, r1
				break;
    2ed8:	7d cf       	rjmp	.-262    	; 0x2dd4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    2eda:	8b 32       	cpi	r24, 0x2B	; 43
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <__vector_25+0x14a>
    2ede:	13 c1       	rjmp	.+550    	; 0x3106 <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    2ee0:	8d 32       	cpi	r24, 0x2D	; 45
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <__vector_25+0x150>
    2ee4:	6d c0       	rjmp	.+218    	; 0x2fc0 <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2ee6:	83 37       	cpi	r24, 0x73	; 115
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <__vector_25+0x156>
    2eea:	91 cf       	rjmp	.-222    	; 0x2e0e <__vector_25+0x78>
					pwm_right = 0;
    2eec:	10 92 84 03 	sts	0x0384, r1
    2ef0:	10 92 85 03 	sts	0x0385, r1
    2ef4:	10 92 86 03 	sts	0x0386, r1
    2ef8:	10 92 87 03 	sts	0x0387, r1
					OCR3A = 0;
    2efc:	10 92 99 00 	sts	0x0099, r1
    2f00:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2f04:	10 92 9b 00 	sts	0x009B, r1
    2f08:	10 92 9a 00 	sts	0x009A, r1
    2f0c:	63 cf       	rjmp	.-314    	; 0x2dd4 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    2f0e:	8b 32       	cpi	r24, 0x2B	; 43
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <__vector_25+0x17e>
    2f12:	b3 c0       	rjmp	.+358    	; 0x307a <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2f14:	8d 32       	cpi	r24, 0x2D	; 45
    2f16:	29 f1       	breq	.+74     	; 0x2f62 <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2f18:	83 37       	cpi	r24, 0x73	; 115
    2f1a:	09 f0       	breq	.+2      	; 0x2f1e <__vector_25+0x188>
    2f1c:	78 cf       	rjmp	.-272    	; 0x2e0e <__vector_25+0x78>
					pwm_left = 0;
    2f1e:	10 92 88 03 	sts	0x0388, r1
    2f22:	10 92 89 03 	sts	0x0389, r1
    2f26:	10 92 8a 03 	sts	0x038A, r1
    2f2a:	10 92 8b 03 	sts	0x038B, r1
					OCR4A = 0;
    2f2e:	10 92 a9 00 	sts	0x00A9, r1
    2f32:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2f36:	10 92 ab 00 	sts	0x00AB, r1
    2f3a:	10 92 aa 00 	sts	0x00AA, r1
    2f3e:	4a cf       	rjmp	.-364    	; 0x2dd4 <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2f40:	80 91 0e 02 	lds	r24, 0x020E
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2f48:	97 fd       	sbrc	r25, 7
    2f4a:	28 c1       	rjmp	.+592    	; 0x319c <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2f4c:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_green == 0) {
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <__vector_25+0x1c0>
    2f54:	25 c1       	rjmp	.+586    	; 0x31a0 <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	90 93 8b 00 	sts	0x008B, r25
    2f5c:	80 93 8a 00 	sts	0x008A, r24
    2f60:	39 cf       	rjmp	.-398    	; 0x2dd4 <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2f62:	80 91 88 03 	lds	r24, 0x0388
    2f66:	90 91 89 03 	lds	r25, 0x0389
    2f6a:	a0 91 8a 03 	lds	r26, 0x038A
    2f6e:	b0 91 8b 03 	lds	r27, 0x038B
    2f72:	4e 97       	sbiw	r24, 0x1e	; 30
    2f74:	a1 09       	sbc	r26, r1
    2f76:	b1 09       	sbc	r27, r1
    2f78:	80 93 88 03 	sts	0x0388, r24
    2f7c:	90 93 89 03 	sts	0x0389, r25
    2f80:	a0 93 8a 03 	sts	0x038A, r26
    2f84:	b0 93 8b 03 	sts	0x038B, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    2f88:	8a 39       	cpi	r24, 0x9A	; 154
    2f8a:	2d ef       	ldi	r18, 0xFD	; 253
    2f8c:	92 07       	cpc	r25, r18
    2f8e:	2f ef       	ldi	r18, 0xFF	; 255
    2f90:	a2 07       	cpc	r26, r18
    2f92:	2f ef       	ldi	r18, 0xFF	; 255
    2f94:	b2 07       	cpc	r27, r18
    2f96:	0c f0       	brlt	.+2      	; 0x2f9a <__vector_25+0x204>
    2f98:	13 c1       	rjmp	.+550    	; 0x31c0 <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    2f9a:	8a e9       	ldi	r24, 0x9A	; 154
    2f9c:	9d ef       	ldi	r25, 0xFD	; 253
    2f9e:	af ef       	ldi	r26, 0xFF	; 255
    2fa0:	bf ef       	ldi	r27, 0xFF	; 255
    2fa2:	80 93 88 03 	sts	0x0388, r24
    2fa6:	90 93 89 03 	sts	0x0389, r25
    2faa:	a0 93 8a 03 	sts	0x038A, r26
    2fae:	b0 93 8b 03 	sts	0x038B, r27
    2fb2:	86 e6       	ldi	r24, 0x66	; 102
    2fb4:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2fb6:	90 93 ab 00 	sts	0x00AB, r25
    2fba:	80 93 aa 00 	sts	0x00AA, r24
    2fbe:	0a cf       	rjmp	.-492    	; 0x2dd4 <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2fc0:	80 91 84 03 	lds	r24, 0x0384
    2fc4:	90 91 85 03 	lds	r25, 0x0385
    2fc8:	a0 91 86 03 	lds	r26, 0x0386
    2fcc:	b0 91 87 03 	lds	r27, 0x0387
    2fd0:	4e 97       	sbiw	r24, 0x1e	; 30
    2fd2:	a1 09       	sbc	r26, r1
    2fd4:	b1 09       	sbc	r27, r1
    2fd6:	80 93 84 03 	sts	0x0384, r24
    2fda:	90 93 85 03 	sts	0x0385, r25
    2fde:	a0 93 86 03 	sts	0x0386, r26
    2fe2:	b0 93 87 03 	sts	0x0387, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    2fe6:	8a 39       	cpi	r24, 0x9A	; 154
    2fe8:	2d ef       	ldi	r18, 0xFD	; 253
    2fea:	92 07       	cpc	r25, r18
    2fec:	2f ef       	ldi	r18, 0xFF	; 255
    2fee:	a2 07       	cpc	r26, r18
    2ff0:	2f ef       	ldi	r18, 0xFF	; 255
    2ff2:	b2 07       	cpc	r27, r18
    2ff4:	0c f0       	brlt	.+2      	; 0x2ff8 <__vector_25+0x262>
    2ff6:	ea c0       	rjmp	.+468    	; 0x31cc <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    2ff8:	8a e9       	ldi	r24, 0x9A	; 154
    2ffa:	9d ef       	ldi	r25, 0xFD	; 253
    2ffc:	af ef       	ldi	r26, 0xFF	; 255
    2ffe:	bf ef       	ldi	r27, 0xFF	; 255
    3000:	80 93 84 03 	sts	0x0384, r24
    3004:	90 93 85 03 	sts	0x0385, r25
    3008:	a0 93 86 03 	sts	0x0386, r26
    300c:	b0 93 87 03 	sts	0x0387, r27
    3010:	86 e6       	ldi	r24, 0x66	; 102
    3012:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    3014:	90 93 9b 00 	sts	0x009B, r25
    3018:	80 93 9a 00 	sts	0x009A, r24
    301c:	db ce       	rjmp	.-586    	; 0x2dd4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    301e:	80 91 80 00 	lds	r24, 0x0080
    3022:	80 62       	ori	r24, 0x20	; 32
    3024:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    3028:	80 91 0e 02 	lds	r24, 0x020E
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    3030:	8f 3f       	cpi	r24, 0xFF	; 255
    3032:	91 05       	cpc	r25, r1
    3034:	19 f0       	breq	.+6      	; 0x303c <__vector_25+0x2a6>
    3036:	14 f0       	brlt	.+4      	; 0x303c <__vector_25+0x2a6>
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	80 93 0e 02 	sts	0x020E, r24
					OCR1B = pwm_green;
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	90 93 8b 00 	sts	0x008B, r25
    3046:	80 93 8a 00 	sts	0x008A, r24
    304a:	c4 ce       	rjmp	.-632    	; 0x2dd4 <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    304c:	80 91 80 00 	lds	r24, 0x0080
    3050:	80 68       	ori	r24, 0x80	; 128
    3052:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    3056:	80 91 0d 02 	lds	r24, 0x020D
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    305e:	8f 3f       	cpi	r24, 0xFF	; 255
    3060:	91 05       	cpc	r25, r1
    3062:	19 f0       	breq	.+6      	; 0x306a <__vector_25+0x2d4>
    3064:	14 f0       	brlt	.+4      	; 0x306a <__vector_25+0x2d4>
    3066:	8f ef       	ldi	r24, 0xFF	; 255
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	80 93 0d 02 	sts	0x020D, r24
					OCR1A = pwm_red;
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	90 93 89 00 	sts	0x0089, r25
    3074:	80 93 88 00 	sts	0x0088, r24
    3078:	ad ce       	rjmp	.-678    	; 0x2dd4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    307a:	80 91 88 03 	lds	r24, 0x0388
    307e:	90 91 89 03 	lds	r25, 0x0389
    3082:	a0 91 8a 03 	lds	r26, 0x038A
    3086:	b0 91 8b 03 	lds	r27, 0x038B
    308a:	4e 96       	adiw	r24, 0x1e	; 30
    308c:	a1 1d       	adc	r26, r1
    308e:	b1 1d       	adc	r27, r1
    3090:	80 93 88 03 	sts	0x0388, r24
    3094:	90 93 89 03 	sts	0x0389, r25
    3098:	a0 93 8a 03 	sts	0x038A, r26
    309c:	b0 93 8b 03 	sts	0x038B, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    30a0:	87 36       	cpi	r24, 0x67	; 103
    30a2:	22 e0       	ldi	r18, 0x02	; 2
    30a4:	92 07       	cpc	r25, r18
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	a2 07       	cpc	r26, r18
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	b2 07       	cpc	r27, r18
    30ae:	0c f4       	brge	.+2      	; 0x30b2 <__vector_25+0x31c>
    30b0:	58 c0       	rjmp	.+176    	; 0x3162 <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    30b2:	86 e6       	ldi	r24, 0x66	; 102
    30b4:	92 e0       	ldi	r25, 0x02	; 2
    30b6:	a0 e0       	ldi	r26, 0x00	; 0
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	80 93 88 03 	sts	0x0388, r24
    30be:	90 93 89 03 	sts	0x0389, r25
    30c2:	a0 93 8a 03 	sts	0x038A, r26
    30c6:	b0 93 8b 03 	sts	0x038B, r27
    30ca:	86 e6       	ldi	r24, 0x66	; 102
    30cc:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    30ce:	90 93 a9 00 	sts	0x00A9, r25
    30d2:	80 93 a8 00 	sts	0x00A8, r24
    30d6:	7e ce       	rjmp	.-772    	; 0x2dd4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    30d8:	80 91 80 00 	lds	r24, 0x0080
    30dc:	88 60       	ori	r24, 0x08	; 8
    30de:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    30e2:	80 91 0f 02 	lds	r24, 0x020F
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    30ea:	8f 3f       	cpi	r24, 0xFF	; 255
    30ec:	91 05       	cpc	r25, r1
    30ee:	19 f0       	breq	.+6      	; 0x30f6 <__vector_25+0x360>
    30f0:	14 f0       	brlt	.+4      	; 0x30f6 <__vector_25+0x360>
    30f2:	8f ef       	ldi	r24, 0xFF	; 255
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	80 93 0f 02 	sts	0x020F, r24
					OCR1C = pwm_blue;
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	90 93 8d 00 	sts	0x008D, r25
    3100:	80 93 8c 00 	sts	0x008C, r24
    3104:	67 ce       	rjmp	.-818    	; 0x2dd4 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    3106:	80 91 84 03 	lds	r24, 0x0384
    310a:	90 91 85 03 	lds	r25, 0x0385
    310e:	a0 91 86 03 	lds	r26, 0x0386
    3112:	b0 91 87 03 	lds	r27, 0x0387
    3116:	4e 96       	adiw	r24, 0x1e	; 30
    3118:	a1 1d       	adc	r26, r1
    311a:	b1 1d       	adc	r27, r1
    311c:	80 93 84 03 	sts	0x0384, r24
    3120:	90 93 85 03 	sts	0x0385, r25
    3124:	a0 93 86 03 	sts	0x0386, r26
    3128:	b0 93 87 03 	sts	0x0387, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    312c:	87 36       	cpi	r24, 0x67	; 103
    312e:	22 e0       	ldi	r18, 0x02	; 2
    3130:	92 07       	cpc	r25, r18
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	a2 07       	cpc	r26, r18
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	b2 07       	cpc	r27, r18
    313a:	ec f0       	brlt	.+58     	; 0x3176 <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    313c:	86 e6       	ldi	r24, 0x66	; 102
    313e:	92 e0       	ldi	r25, 0x02	; 2
    3140:	a0 e0       	ldi	r26, 0x00	; 0
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	80 93 84 03 	sts	0x0384, r24
    3148:	90 93 85 03 	sts	0x0385, r25
    314c:	a0 93 86 03 	sts	0x0386, r26
    3150:	b0 93 87 03 	sts	0x0387, r27
    3154:	86 e6       	ldi	r24, 0x66	; 102
    3156:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    3158:	90 93 99 00 	sts	0x0099, r25
    315c:	80 93 98 00 	sts	0x0098, r24
    3160:	39 ce       	rjmp	.-910    	; 0x2dd4 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    3162:	b7 ff       	sbrs	r27, 7
    3164:	b4 cf       	rjmp	.-152    	; 0x30ce <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3166:	90 95       	com	r25
    3168:	81 95       	neg	r24
    316a:	9f 4f       	sbci	r25, 0xFF	; 255
    316c:	90 93 ab 00 	sts	0x00AB, r25
    3170:	80 93 aa 00 	sts	0x00AA, r24
    3174:	2f ce       	rjmp	.-930    	; 0x2dd4 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3176:	b7 ff       	sbrs	r27, 7
    3178:	ef cf       	rjmp	.-34     	; 0x3158 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    317a:	90 95       	com	r25
    317c:	81 95       	neg	r24
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	90 93 9b 00 	sts	0x009B, r25
    3184:	80 93 9a 00 	sts	0x009A, r24
    3188:	25 ce       	rjmp	.-950    	; 0x2dd4 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    318a:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    318e:	80 91 80 00 	lds	r24, 0x0080
    3192:	8f 77       	andi	r24, 0x7F	; 127
    3194:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    3198:	2d 98       	cbi	0x05, 5	; 5
    319a:	1c ce       	rjmp	.-968    	; 0x2dd4 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    319c:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    31a0:	80 91 80 00 	lds	r24, 0x0080
    31a4:	8f 7d       	andi	r24, 0xDF	; 223
    31a6:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    31aa:	2e 98       	cbi	0x05, 6	; 5
    31ac:	13 ce       	rjmp	.-986    	; 0x2dd4 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    31ae:	10 92 0f 02 	sts	0x020F, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    31b2:	80 91 80 00 	lds	r24, 0x0080
    31b6:	87 7f       	andi	r24, 0xF7	; 247
    31b8:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    31bc:	2f 98       	cbi	0x05, 7	; 5
    31be:	0a ce       	rjmp	.-1004   	; 0x2dd4 <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    31c0:	b7 ff       	sbrs	r27, 7
    31c2:	85 cf       	rjmp	.-246    	; 0x30ce <__vector_25+0x338>
						OCR4A = pwm_left;
    31c4:	90 95       	com	r25
    31c6:	81 95       	neg	r24
    31c8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ca:	f5 ce       	rjmp	.-534    	; 0x2fb6 <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    31cc:	b7 ff       	sbrs	r27, 7
    31ce:	c4 cf       	rjmp	.-120    	; 0x3158 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    31d0:	90 95       	com	r25
    31d2:	81 95       	neg	r24
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	1e cf       	rjmp	.-452    	; 0x3014 <__vector_25+0x27e>

000031d8 <_fpadd_parts>:
    31d8:	a0 e0       	ldi	r26, 0x00	; 0
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e2 ef       	ldi	r30, 0xF2	; 242
    31de:	f8 e1       	ldi	r31, 0x18	; 24
    31e0:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x4>
    31e4:	2c 01       	movw	r4, r24
    31e6:	5b 01       	movw	r10, r22
    31e8:	fa 01       	movw	r30, r20
    31ea:	dc 01       	movw	r26, r24
    31ec:	9c 91       	ld	r25, X
    31ee:	92 30       	cpi	r25, 0x02	; 2
    31f0:	08 f4       	brcc	.+2      	; 0x31f4 <_fpadd_parts+0x1c>
    31f2:	32 c1       	rjmp	.+612    	; 0x3458 <_fpadd_parts+0x280>
    31f4:	eb 01       	movw	r28, r22
    31f6:	88 81       	ld	r24, Y
    31f8:	82 30       	cpi	r24, 0x02	; 2
    31fa:	08 f4       	brcc	.+2      	; 0x31fe <_fpadd_parts+0x26>
    31fc:	2c c1       	rjmp	.+600    	; 0x3456 <_fpadd_parts+0x27e>
    31fe:	94 30       	cpi	r25, 0x04	; 4
    3200:	71 f4       	brne	.+28     	; 0x321e <_fpadd_parts+0x46>
    3202:	84 30       	cpi	r24, 0x04	; 4
    3204:	09 f0       	breq	.+2      	; 0x3208 <_fpadd_parts+0x30>
    3206:	28 c1       	rjmp	.+592    	; 0x3458 <_fpadd_parts+0x280>
    3208:	f2 01       	movw	r30, r4
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	98 17       	cp	r25, r24
    3210:	09 f4       	brne	.+2      	; 0x3214 <_fpadd_parts+0x3c>
    3212:	22 c1       	rjmp	.+580    	; 0x3458 <_fpadd_parts+0x280>
    3214:	13 e1       	ldi	r17, 0x13	; 19
    3216:	41 2e       	mov	r4, r17
    3218:	12 e0       	ldi	r17, 0x02	; 2
    321a:	51 2e       	mov	r5, r17
    321c:	1d c1       	rjmp	.+570    	; 0x3458 <_fpadd_parts+0x280>
    321e:	84 30       	cpi	r24, 0x04	; 4
    3220:	09 f4       	brne	.+2      	; 0x3224 <_fpadd_parts+0x4c>
    3222:	19 c1       	rjmp	.+562    	; 0x3456 <_fpadd_parts+0x27e>
    3224:	82 30       	cpi	r24, 0x02	; 2
    3226:	a9 f4       	brne	.+42     	; 0x3252 <_fpadd_parts+0x7a>
    3228:	92 30       	cpi	r25, 0x02	; 2
    322a:	09 f0       	breq	.+2      	; 0x322e <_fpadd_parts+0x56>
    322c:	15 c1       	rjmp	.+554    	; 0x3458 <_fpadd_parts+0x280>
    322e:	ca 01       	movw	r24, r20
    3230:	a2 01       	movw	r20, r4
    3232:	28 e0       	ldi	r18, 0x08	; 8
    3234:	da 01       	movw	r26, r20
    3236:	0d 90       	ld	r0, X+
    3238:	ad 01       	movw	r20, r26
    323a:	ec 01       	movw	r28, r24
    323c:	09 92       	st	Y+, r0
    323e:	ce 01       	movw	r24, r28
    3240:	21 50       	subi	r18, 0x01	; 1
    3242:	c1 f7       	brne	.-16     	; 0x3234 <_fpadd_parts+0x5c>
    3244:	e5 01       	movw	r28, r10
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	e2 01       	movw	r28, r4
    324a:	99 81       	ldd	r25, Y+1	; 0x01
    324c:	89 23       	and	r24, r25
    324e:	81 83       	std	Z+1, r24	; 0x01
    3250:	00 c1       	rjmp	.+512    	; 0x3452 <_fpadd_parts+0x27a>
    3252:	92 30       	cpi	r25, 0x02	; 2
    3254:	09 f4       	brne	.+2      	; 0x3258 <_fpadd_parts+0x80>
    3256:	ff c0       	rjmp	.+510    	; 0x3456 <_fpadd_parts+0x27e>
    3258:	e2 01       	movw	r28, r4
    325a:	ca 80       	ldd	r12, Y+2	; 0x02
    325c:	db 80       	ldd	r13, Y+3	; 0x03
    325e:	eb 01       	movw	r28, r22
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	e2 01       	movw	r28, r4
    3266:	2c 81       	ldd	r18, Y+4	; 0x04
    3268:	3d 81       	ldd	r19, Y+5	; 0x05
    326a:	4e 81       	ldd	r20, Y+6	; 0x06
    326c:	5f 81       	ldd	r21, Y+7	; 0x07
    326e:	eb 01       	movw	r28, r22
    3270:	ec 80       	ldd	r14, Y+4	; 0x04
    3272:	fd 80       	ldd	r15, Y+5	; 0x05
    3274:	0e 81       	ldd	r16, Y+6	; 0x06
    3276:	1f 81       	ldd	r17, Y+7	; 0x07
    3278:	b6 01       	movw	r22, r12
    327a:	68 1b       	sub	r22, r24
    327c:	79 0b       	sbc	r23, r25
    327e:	db 01       	movw	r26, r22
    3280:	77 ff       	sbrs	r23, 7
    3282:	03 c0       	rjmp	.+6      	; 0x328a <_fpadd_parts+0xb2>
    3284:	70 95       	com	r23
    3286:	61 95       	neg	r22
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
    328a:	60 32       	cpi	r22, 0x20	; 32
    328c:	71 05       	cpc	r23, r1
    328e:	0c f0       	brlt	.+2      	; 0x3292 <_fpadd_parts+0xba>
    3290:	5d c0       	rjmp	.+186    	; 0x334c <_fpadd_parts+0x174>
    3292:	1a 16       	cp	r1, r26
    3294:	1b 06       	cpc	r1, r27
    3296:	5c f5       	brge	.+86     	; 0x32ee <_fpadd_parts+0x116>
    3298:	66 24       	eor	r6, r6
    329a:	77 24       	eor	r7, r7
    329c:	43 01       	movw	r8, r6
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	06 2e       	mov	r0, r22
    32a8:	04 c0       	rjmp	.+8      	; 0x32b2 <_fpadd_parts+0xda>
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	aa 1f       	adc	r26, r26
    32b0:	bb 1f       	adc	r27, r27
    32b2:	0a 94       	dec	r0
    32b4:	d2 f7       	brpl	.-12     	; 0x32aa <_fpadd_parts+0xd2>
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	a1 09       	sbc	r26, r1
    32ba:	b1 09       	sbc	r27, r1
    32bc:	8e 21       	and	r24, r14
    32be:	9f 21       	and	r25, r15
    32c0:	a0 23       	and	r26, r16
    32c2:	b1 23       	and	r27, r17
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	a1 05       	cpc	r26, r1
    32c8:	b1 05       	cpc	r27, r1
    32ca:	29 f0       	breq	.+10     	; 0x32d6 <_fpadd_parts+0xfe>
    32cc:	b1 e0       	ldi	r27, 0x01	; 1
    32ce:	6b 2e       	mov	r6, r27
    32d0:	71 2c       	mov	r7, r1
    32d2:	81 2c       	mov	r8, r1
    32d4:	91 2c       	mov	r9, r1
    32d6:	04 c0       	rjmp	.+8      	; 0x32e0 <_fpadd_parts+0x108>
    32d8:	16 95       	lsr	r17
    32da:	07 95       	ror	r16
    32dc:	f7 94       	ror	r15
    32de:	e7 94       	ror	r14
    32e0:	6a 95       	dec	r22
    32e2:	d2 f7       	brpl	.-12     	; 0x32d8 <_fpadd_parts+0x100>
    32e4:	e6 28       	or	r14, r6
    32e6:	f7 28       	or	r15, r7
    32e8:	08 29       	or	r16, r8
    32ea:	19 29       	or	r17, r9
    32ec:	3b c0       	rjmp	.+118    	; 0x3364 <_fpadd_parts+0x18c>
    32ee:	ab 2b       	or	r26, r27
    32f0:	c9 f1       	breq	.+114    	; 0x3364 <_fpadd_parts+0x18c>
    32f2:	c6 0e       	add	r12, r22
    32f4:	d7 1e       	adc	r13, r23
    32f6:	66 24       	eor	r6, r6
    32f8:	77 24       	eor	r7, r7
    32fa:	43 01       	movw	r8, r6
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	a0 e0       	ldi	r26, 0x00	; 0
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	06 2e       	mov	r0, r22
    3306:	04 c0       	rjmp	.+8      	; 0x3310 <_fpadd_parts+0x138>
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	aa 1f       	adc	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	0a 94       	dec	r0
    3312:	d2 f7       	brpl	.-12     	; 0x3308 <_fpadd_parts+0x130>
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	a1 09       	sbc	r26, r1
    3318:	b1 09       	sbc	r27, r1
    331a:	82 23       	and	r24, r18
    331c:	93 23       	and	r25, r19
    331e:	a4 23       	and	r26, r20
    3320:	b5 23       	and	r27, r21
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	a1 05       	cpc	r26, r1
    3326:	b1 05       	cpc	r27, r1
    3328:	29 f0       	breq	.+10     	; 0x3334 <_fpadd_parts+0x15c>
    332a:	a1 e0       	ldi	r26, 0x01	; 1
    332c:	6a 2e       	mov	r6, r26
    332e:	71 2c       	mov	r7, r1
    3330:	81 2c       	mov	r8, r1
    3332:	91 2c       	mov	r9, r1
    3334:	04 c0       	rjmp	.+8      	; 0x333e <_fpadd_parts+0x166>
    3336:	56 95       	lsr	r21
    3338:	47 95       	ror	r20
    333a:	37 95       	ror	r19
    333c:	27 95       	ror	r18
    333e:	6a 95       	dec	r22
    3340:	d2 f7       	brpl	.-12     	; 0x3336 <_fpadd_parts+0x15e>
    3342:	26 29       	or	r18, r6
    3344:	37 29       	or	r19, r7
    3346:	48 29       	or	r20, r8
    3348:	59 29       	or	r21, r9
    334a:	0c c0       	rjmp	.+24     	; 0x3364 <_fpadd_parts+0x18c>
    334c:	8c 15       	cp	r24, r12
    334e:	9d 05       	cpc	r25, r13
    3350:	34 f0       	brlt	.+12     	; 0x335e <_fpadd_parts+0x186>
    3352:	6c 01       	movw	r12, r24
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <_fpadd_parts+0x18c>
    335e:	ee 24       	eor	r14, r14
    3360:	ff 24       	eor	r15, r15
    3362:	87 01       	movw	r16, r14
    3364:	e2 01       	movw	r28, r4
    3366:	99 81       	ldd	r25, Y+1	; 0x01
    3368:	e5 01       	movw	r28, r10
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	98 17       	cp	r25, r24
    336e:	09 f4       	brne	.+2      	; 0x3372 <_fpadd_parts+0x19a>
    3370:	43 c0       	rjmp	.+134    	; 0x33f8 <_fpadd_parts+0x220>
    3372:	99 23       	and	r25, r25
    3374:	39 f0       	breq	.+14     	; 0x3384 <_fpadd_parts+0x1ac>
    3376:	e2 1a       	sub	r14, r18
    3378:	f3 0a       	sbc	r15, r19
    337a:	04 0b       	sbc	r16, r20
    337c:	15 0b       	sbc	r17, r21
    337e:	a8 01       	movw	r20, r16
    3380:	97 01       	movw	r18, r14
    3382:	04 c0       	rjmp	.+8      	; 0x338c <_fpadd_parts+0x1b4>
    3384:	2e 19       	sub	r18, r14
    3386:	3f 09       	sbc	r19, r15
    3388:	40 0b       	sbc	r20, r16
    338a:	51 0b       	sbc	r21, r17
    338c:	57 fd       	sbrc	r21, 7
    338e:	08 c0       	rjmp	.+16     	; 0x33a0 <_fpadd_parts+0x1c8>
    3390:	11 82       	std	Z+1, r1	; 0x01
    3392:	d3 82       	std	Z+3, r13	; 0x03
    3394:	c2 82       	std	Z+2, r12	; 0x02
    3396:	24 83       	std	Z+4, r18	; 0x04
    3398:	35 83       	std	Z+5, r19	; 0x05
    339a:	46 83       	std	Z+6, r20	; 0x06
    339c:	57 83       	std	Z+7, r21	; 0x07
    339e:	1d c0       	rjmp	.+58     	; 0x33da <_fpadd_parts+0x202>
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	81 83       	std	Z+1, r24	; 0x01
    33a4:	d3 82       	std	Z+3, r13	; 0x03
    33a6:	c2 82       	std	Z+2, r12	; 0x02
    33a8:	88 27       	eor	r24, r24
    33aa:	99 27       	eor	r25, r25
    33ac:	dc 01       	movw	r26, r24
    33ae:	82 1b       	sub	r24, r18
    33b0:	93 0b       	sbc	r25, r19
    33b2:	a4 0b       	sbc	r26, r20
    33b4:	b5 0b       	sbc	r27, r21
    33b6:	84 83       	std	Z+4, r24	; 0x04
    33b8:	95 83       	std	Z+5, r25	; 0x05
    33ba:	a6 83       	std	Z+6, r26	; 0x06
    33bc:	b7 83       	std	Z+7, r27	; 0x07
    33be:	0d c0       	rjmp	.+26     	; 0x33da <_fpadd_parts+0x202>
    33c0:	22 0f       	add	r18, r18
    33c2:	33 1f       	adc	r19, r19
    33c4:	44 1f       	adc	r20, r20
    33c6:	55 1f       	adc	r21, r21
    33c8:	24 83       	std	Z+4, r18	; 0x04
    33ca:	35 83       	std	Z+5, r19	; 0x05
    33cc:	46 83       	std	Z+6, r20	; 0x06
    33ce:	57 83       	std	Z+7, r21	; 0x07
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	93 83       	std	Z+3, r25	; 0x03
    33d8:	82 83       	std	Z+2, r24	; 0x02
    33da:	24 81       	ldd	r18, Z+4	; 0x04
    33dc:	35 81       	ldd	r19, Z+5	; 0x05
    33de:	46 81       	ldd	r20, Z+6	; 0x06
    33e0:	57 81       	ldd	r21, Z+7	; 0x07
    33e2:	da 01       	movw	r26, r20
    33e4:	c9 01       	movw	r24, r18
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	a1 09       	sbc	r26, r1
    33ea:	b1 09       	sbc	r27, r1
    33ec:	8f 5f       	subi	r24, 0xFF	; 255
    33ee:	9f 4f       	sbci	r25, 0xFF	; 255
    33f0:	af 4f       	sbci	r26, 0xFF	; 255
    33f2:	bf 43       	sbci	r27, 0x3F	; 63
    33f4:	28 f3       	brcs	.-54     	; 0x33c0 <_fpadd_parts+0x1e8>
    33f6:	0b c0       	rjmp	.+22     	; 0x340e <_fpadd_parts+0x236>
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	d3 82       	std	Z+3, r13	; 0x03
    33fc:	c2 82       	std	Z+2, r12	; 0x02
    33fe:	2e 0d       	add	r18, r14
    3400:	3f 1d       	adc	r19, r15
    3402:	40 1f       	adc	r20, r16
    3404:	51 1f       	adc	r21, r17
    3406:	24 83       	std	Z+4, r18	; 0x04
    3408:	35 83       	std	Z+5, r19	; 0x05
    340a:	46 83       	std	Z+6, r20	; 0x06
    340c:	57 83       	std	Z+7, r21	; 0x07
    340e:	83 e0       	ldi	r24, 0x03	; 3
    3410:	80 83       	st	Z, r24
    3412:	24 81       	ldd	r18, Z+4	; 0x04
    3414:	35 81       	ldd	r19, Z+5	; 0x05
    3416:	46 81       	ldd	r20, Z+6	; 0x06
    3418:	57 81       	ldd	r21, Z+7	; 0x07
    341a:	55 23       	and	r21, r21
    341c:	d4 f4       	brge	.+52     	; 0x3452 <_fpadd_parts+0x27a>
    341e:	c9 01       	movw	r24, r18
    3420:	aa 27       	eor	r26, r26
    3422:	97 fd       	sbrc	r25, 7
    3424:	a0 95       	com	r26
    3426:	ba 2f       	mov	r27, r26
    3428:	81 70       	andi	r24, 0x01	; 1
    342a:	90 70       	andi	r25, 0x00	; 0
    342c:	a0 70       	andi	r26, 0x00	; 0
    342e:	b0 70       	andi	r27, 0x00	; 0
    3430:	56 95       	lsr	r21
    3432:	47 95       	ror	r20
    3434:	37 95       	ror	r19
    3436:	27 95       	ror	r18
    3438:	82 2b       	or	r24, r18
    343a:	93 2b       	or	r25, r19
    343c:	a4 2b       	or	r26, r20
    343e:	b5 2b       	or	r27, r21
    3440:	84 83       	std	Z+4, r24	; 0x04
    3442:	95 83       	std	Z+5, r25	; 0x05
    3444:	a6 83       	std	Z+6, r26	; 0x06
    3446:	b7 83       	std	Z+7, r27	; 0x07
    3448:	82 81       	ldd	r24, Z+2	; 0x02
    344a:	93 81       	ldd	r25, Z+3	; 0x03
    344c:	01 96       	adiw	r24, 0x01	; 1
    344e:	93 83       	std	Z+3, r25	; 0x03
    3450:	82 83       	std	Z+2, r24	; 0x02
    3452:	2f 01       	movw	r4, r30
    3454:	01 c0       	rjmp	.+2      	; 0x3458 <_fpadd_parts+0x280>
    3456:	25 01       	movw	r4, r10
    3458:	c2 01       	movw	r24, r4
    345a:	e0 e1       	ldi	r30, 0x10	; 16
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x4>

00003464 <__subsf3>:
    3464:	a0 e2       	ldi	r26, 0x20	; 32
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	e8 e3       	ldi	r30, 0x38	; 56
    346a:	fa e1       	ldi	r31, 0x1A	; 26
    346c:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__prologue_saves__+0x18>
    3470:	69 83       	std	Y+1, r22	; 0x01
    3472:	7a 83       	std	Y+2, r23	; 0x02
    3474:	8b 83       	std	Y+3, r24	; 0x03
    3476:	9c 83       	std	Y+4, r25	; 0x04
    3478:	2d 83       	std	Y+5, r18	; 0x05
    347a:	3e 83       	std	Y+6, r19	; 0x06
    347c:	4f 83       	std	Y+7, r20	; 0x07
    347e:	58 87       	std	Y+8, r21	; 0x08
    3480:	09 e0       	ldi	r16, 0x09	; 9
    3482:	e0 2e       	mov	r14, r16
    3484:	f1 2c       	mov	r15, r1
    3486:	ec 0e       	add	r14, r28
    3488:	fd 1e       	adc	r15, r29
    348a:	b7 01       	movw	r22, r14
    348c:	ce 01       	movw	r24, r28
    348e:	01 96       	adiw	r24, 0x01	; 1
    3490:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    3494:	8e 01       	movw	r16, r28
    3496:	0f 5e       	subi	r16, 0xEF	; 239
    3498:	1f 4f       	sbci	r17, 0xFF	; 255
    349a:	b8 01       	movw	r22, r16
    349c:	ce 01       	movw	r24, r28
    349e:	05 96       	adiw	r24, 0x05	; 5
    34a0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    34a4:	8a 89       	ldd	r24, Y+18	; 0x12
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	89 27       	eor	r24, r25
    34aa:	8a 8b       	std	Y+18, r24	; 0x12
    34ac:	ae 01       	movw	r20, r28
    34ae:	47 5e       	subi	r20, 0xE7	; 231
    34b0:	5f 4f       	sbci	r21, 0xFF	; 255
    34b2:	b8 01       	movw	r22, r16
    34b4:	c7 01       	movw	r24, r14
    34b6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <_fpadd_parts>
    34ba:	0e 94 8d 1c 	call	0x391a	; 0x391a <__pack_f>
    34be:	e6 e0       	ldi	r30, 0x06	; 6
    34c0:	a0 96       	adiw	r28, 0x20	; 32
    34c2:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__epilogue_restores__+0x18>

000034c6 <__addsf3>:
    34c6:	a0 e2       	ldi	r26, 0x20	; 32
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e9 e6       	ldi	r30, 0x69	; 105
    34cc:	fa e1       	ldi	r31, 0x1A	; 26
    34ce:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__prologue_saves__+0x18>
    34d2:	69 83       	std	Y+1, r22	; 0x01
    34d4:	7a 83       	std	Y+2, r23	; 0x02
    34d6:	8b 83       	std	Y+3, r24	; 0x03
    34d8:	9c 83       	std	Y+4, r25	; 0x04
    34da:	2d 83       	std	Y+5, r18	; 0x05
    34dc:	3e 83       	std	Y+6, r19	; 0x06
    34de:	4f 83       	std	Y+7, r20	; 0x07
    34e0:	58 87       	std	Y+8, r21	; 0x08
    34e2:	89 e0       	ldi	r24, 0x09	; 9
    34e4:	e8 2e       	mov	r14, r24
    34e6:	f1 2c       	mov	r15, r1
    34e8:	ec 0e       	add	r14, r28
    34ea:	fd 1e       	adc	r15, r29
    34ec:	b7 01       	movw	r22, r14
    34ee:	ce 01       	movw	r24, r28
    34f0:	01 96       	adiw	r24, 0x01	; 1
    34f2:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    34f6:	8e 01       	movw	r16, r28
    34f8:	0f 5e       	subi	r16, 0xEF	; 239
    34fa:	1f 4f       	sbci	r17, 0xFF	; 255
    34fc:	b8 01       	movw	r22, r16
    34fe:	ce 01       	movw	r24, r28
    3500:	05 96       	adiw	r24, 0x05	; 5
    3502:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    3506:	ae 01       	movw	r20, r28
    3508:	47 5e       	subi	r20, 0xE7	; 231
    350a:	5f 4f       	sbci	r21, 0xFF	; 255
    350c:	b8 01       	movw	r22, r16
    350e:	c7 01       	movw	r24, r14
    3510:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <_fpadd_parts>
    3514:	0e 94 8d 1c 	call	0x391a	; 0x391a <__pack_f>
    3518:	e6 e0       	ldi	r30, 0x06	; 6
    351a:	a0 96       	adiw	r28, 0x20	; 32
    351c:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__epilogue_restores__+0x18>

00003520 <__mulsf3>:
    3520:	a0 e2       	ldi	r26, 0x20	; 32
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e6 e9       	ldi	r30, 0x96	; 150
    3526:	fa e1       	ldi	r31, 0x1A	; 26
    3528:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x4>
    352c:	69 83       	std	Y+1, r22	; 0x01
    352e:	7a 83       	std	Y+2, r23	; 0x02
    3530:	8b 83       	std	Y+3, r24	; 0x03
    3532:	9c 83       	std	Y+4, r25	; 0x04
    3534:	2d 83       	std	Y+5, r18	; 0x05
    3536:	3e 83       	std	Y+6, r19	; 0x06
    3538:	4f 83       	std	Y+7, r20	; 0x07
    353a:	58 87       	std	Y+8, r21	; 0x08
    353c:	99 e0       	ldi	r25, 0x09	; 9
    353e:	e9 2e       	mov	r14, r25
    3540:	f1 2c       	mov	r15, r1
    3542:	ec 0e       	add	r14, r28
    3544:	fd 1e       	adc	r15, r29
    3546:	b7 01       	movw	r22, r14
    3548:	ce 01       	movw	r24, r28
    354a:	01 96       	adiw	r24, 0x01	; 1
    354c:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    3550:	8e 01       	movw	r16, r28
    3552:	0f 5e       	subi	r16, 0xEF	; 239
    3554:	1f 4f       	sbci	r17, 0xFF	; 255
    3556:	b8 01       	movw	r22, r16
    3558:	ce 01       	movw	r24, r28
    355a:	05 96       	adiw	r24, 0x05	; 5
    355c:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    3560:	99 85       	ldd	r25, Y+9	; 0x09
    3562:	92 30       	cpi	r25, 0x02	; 2
    3564:	88 f0       	brcs	.+34     	; 0x3588 <__mulsf3+0x68>
    3566:	89 89       	ldd	r24, Y+17	; 0x11
    3568:	82 30       	cpi	r24, 0x02	; 2
    356a:	c0 f0       	brcs	.+48     	; 0x359c <__mulsf3+0x7c>
    356c:	94 30       	cpi	r25, 0x04	; 4
    356e:	19 f4       	brne	.+6      	; 0x3576 <__mulsf3+0x56>
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	29 f0       	breq	.+10     	; 0x357e <__mulsf3+0x5e>
    3574:	09 c0       	rjmp	.+18     	; 0x3588 <__mulsf3+0x68>
    3576:	84 30       	cpi	r24, 0x04	; 4
    3578:	29 f4       	brne	.+10     	; 0x3584 <__mulsf3+0x64>
    357a:	92 30       	cpi	r25, 0x02	; 2
    357c:	79 f4       	brne	.+30     	; 0x359c <__mulsf3+0x7c>
    357e:	63 e1       	ldi	r22, 0x13	; 19
    3580:	72 e0       	ldi	r23, 0x02	; 2
    3582:	c6 c0       	rjmp	.+396    	; 0x3710 <__mulsf3+0x1f0>
    3584:	92 30       	cpi	r25, 0x02	; 2
    3586:	41 f4       	brne	.+16     	; 0x3598 <__mulsf3+0x78>
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	9a 85       	ldd	r25, Y+10	; 0x0a
    358c:	8a 89       	ldd	r24, Y+18	; 0x12
    358e:	98 13       	cpse	r25, r24
    3590:	21 e0       	ldi	r18, 0x01	; 1
    3592:	2a 87       	std	Y+10, r18	; 0x0a
    3594:	b7 01       	movw	r22, r14
    3596:	bc c0       	rjmp	.+376    	; 0x3710 <__mulsf3+0x1f0>
    3598:	82 30       	cpi	r24, 0x02	; 2
    359a:	41 f4       	brne	.+16     	; 0x35ac <__mulsf3+0x8c>
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	8a 89       	ldd	r24, Y+18	; 0x12
    35a2:	98 13       	cpse	r25, r24
    35a4:	21 e0       	ldi	r18, 0x01	; 1
    35a6:	2a 8b       	std	Y+18, r18	; 0x12
    35a8:	b8 01       	movw	r22, r16
    35aa:	b2 c0       	rjmp	.+356    	; 0x3710 <__mulsf3+0x1f0>
    35ac:	cd 84       	ldd	r12, Y+13	; 0x0d
    35ae:	de 84       	ldd	r13, Y+14	; 0x0e
    35b0:	ef 84       	ldd	r14, Y+15	; 0x0f
    35b2:	f8 88       	ldd	r15, Y+16	; 0x10
    35b4:	0d 89       	ldd	r16, Y+21	; 0x15
    35b6:	1e 89       	ldd	r17, Y+22	; 0x16
    35b8:	2f 89       	ldd	r18, Y+23	; 0x17
    35ba:	38 8d       	ldd	r19, Y+24	; 0x18
    35bc:	88 24       	eor	r8, r8
    35be:	99 24       	eor	r9, r9
    35c0:	54 01       	movw	r10, r8
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	44 24       	eor	r4, r4
    35cc:	55 24       	eor	r5, r5
    35ce:	32 01       	movw	r6, r4
    35d0:	e0 e0       	ldi	r30, 0x00	; 0
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	c6 01       	movw	r24, r12
    35d6:	81 70       	andi	r24, 0x01	; 1
    35d8:	90 70       	andi	r25, 0x00	; 0
    35da:	89 2b       	or	r24, r25
    35dc:	d9 f0       	breq	.+54     	; 0x3614 <__mulsf3+0xf4>
    35de:	80 0e       	add	r8, r16
    35e0:	91 1e       	adc	r9, r17
    35e2:	a2 1e       	adc	r10, r18
    35e4:	b3 1e       	adc	r11, r19
    35e6:	db 01       	movw	r26, r22
    35e8:	ca 01       	movw	r24, r20
    35ea:	84 0d       	add	r24, r4
    35ec:	95 1d       	adc	r25, r5
    35ee:	a6 1d       	adc	r26, r6
    35f0:	b7 1d       	adc	r27, r7
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	80 16       	cp	r8, r16
    35fc:	91 06       	cpc	r9, r17
    35fe:	a2 06       	cpc	r10, r18
    3600:	b3 06       	cpc	r11, r19
    3602:	20 f4       	brcc	.+8      	; 0x360c <__mulsf3+0xec>
    3604:	41 e0       	ldi	r20, 0x01	; 1
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	48 0f       	add	r20, r24
    360e:	59 1f       	adc	r21, r25
    3610:	6a 1f       	adc	r22, r26
    3612:	7b 1f       	adc	r23, r27
    3614:	44 0c       	add	r4, r4
    3616:	55 1c       	adc	r5, r5
    3618:	66 1c       	adc	r6, r6
    361a:	77 1c       	adc	r7, r7
    361c:	37 ff       	sbrs	r19, 7
    361e:	08 c0       	rjmp	.+16     	; 0x3630 <__mulsf3+0x110>
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	a0 e0       	ldi	r26, 0x00	; 0
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	48 2a       	or	r4, r24
    362a:	59 2a       	or	r5, r25
    362c:	6a 2a       	or	r6, r26
    362e:	7b 2a       	or	r7, r27
    3630:	31 96       	adiw	r30, 0x01	; 1
    3632:	e0 32       	cpi	r30, 0x20	; 32
    3634:	f1 05       	cpc	r31, r1
    3636:	49 f0       	breq	.+18     	; 0x364a <__mulsf3+0x12a>
    3638:	00 0f       	add	r16, r16
    363a:	11 1f       	adc	r17, r17
    363c:	22 1f       	adc	r18, r18
    363e:	33 1f       	adc	r19, r19
    3640:	f6 94       	lsr	r15
    3642:	e7 94       	ror	r14
    3644:	d7 94       	ror	r13
    3646:	c7 94       	ror	r12
    3648:	c5 cf       	rjmp	.-118    	; 0x35d4 <__mulsf3+0xb4>
    364a:	8b 89       	ldd	r24, Y+19	; 0x13
    364c:	9c 89       	ldd	r25, Y+20	; 0x14
    364e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3650:	3c 85       	ldd	r19, Y+12	; 0x0c
    3652:	82 0f       	add	r24, r18
    3654:	93 1f       	adc	r25, r19
    3656:	02 96       	adiw	r24, 0x02	; 2
    3658:	9c 8f       	std	Y+28, r25	; 0x1c
    365a:	8b 8f       	std	Y+27, r24	; 0x1b
    365c:	1a 8e       	std	Y+26, r1	; 0x1a
    365e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3660:	8a 89       	ldd	r24, Y+18	; 0x12
    3662:	98 17       	cp	r25, r24
    3664:	11 f0       	breq	.+4      	; 0x366a <__mulsf3+0x14a>
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	8a 8f       	std	Y+26, r24	; 0x1a
    366a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    366c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    366e:	17 c0       	rjmp	.+46     	; 0x369e <__mulsf3+0x17e>
    3670:	ca 01       	movw	r24, r20
    3672:	81 70       	andi	r24, 0x01	; 1
    3674:	90 70       	andi	r25, 0x00	; 0
    3676:	89 2b       	or	r24, r25
    3678:	61 f0       	breq	.+24     	; 0x3692 <__mulsf3+0x172>
    367a:	b6 94       	lsr	r11
    367c:	a7 94       	ror	r10
    367e:	97 94       	ror	r9
    3680:	87 94       	ror	r8
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	a0 e0       	ldi	r26, 0x00	; 0
    3688:	b0 e8       	ldi	r27, 0x80	; 128
    368a:	88 2a       	or	r8, r24
    368c:	99 2a       	or	r9, r25
    368e:	aa 2a       	or	r10, r26
    3690:	bb 2a       	or	r11, r27
    3692:	76 95       	lsr	r23
    3694:	67 95       	ror	r22
    3696:	57 95       	ror	r21
    3698:	47 95       	ror	r20
    369a:	2f 5f       	subi	r18, 0xFF	; 255
    369c:	3f 4f       	sbci	r19, 0xFF	; 255
    369e:	77 fd       	sbrc	r23, 7
    36a0:	e7 cf       	rjmp	.-50     	; 0x3670 <__mulsf3+0x150>
    36a2:	c9 01       	movw	r24, r18
    36a4:	0b c0       	rjmp	.+22     	; 0x36bc <__mulsf3+0x19c>
    36a6:	44 0f       	add	r20, r20
    36a8:	55 1f       	adc	r21, r21
    36aa:	66 1f       	adc	r22, r22
    36ac:	77 1f       	adc	r23, r23
    36ae:	b7 fc       	sbrc	r11, 7
    36b0:	41 60       	ori	r20, 0x01	; 1
    36b2:	88 0c       	add	r8, r8
    36b4:	99 1c       	adc	r9, r9
    36b6:	aa 1c       	adc	r10, r10
    36b8:	bb 1c       	adc	r11, r11
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	40 30       	cpi	r20, 0x00	; 0
    36be:	a0 e0       	ldi	r26, 0x00	; 0
    36c0:	5a 07       	cpc	r21, r26
    36c2:	a0 e0       	ldi	r26, 0x00	; 0
    36c4:	6a 07       	cpc	r22, r26
    36c6:	a0 e4       	ldi	r26, 0x40	; 64
    36c8:	7a 07       	cpc	r23, r26
    36ca:	68 f3       	brcs	.-38     	; 0x36a6 <__mulsf3+0x186>
    36cc:	9c 8f       	std	Y+28, r25	; 0x1c
    36ce:	8b 8f       	std	Y+27, r24	; 0x1b
    36d0:	db 01       	movw	r26, r22
    36d2:	ca 01       	movw	r24, r20
    36d4:	8f 77       	andi	r24, 0x7F	; 127
    36d6:	90 70       	andi	r25, 0x00	; 0
    36d8:	a0 70       	andi	r26, 0x00	; 0
    36da:	b0 70       	andi	r27, 0x00	; 0
    36dc:	80 34       	cpi	r24, 0x40	; 64
    36de:	91 05       	cpc	r25, r1
    36e0:	a1 05       	cpc	r26, r1
    36e2:	b1 05       	cpc	r27, r1
    36e4:	61 f4       	brne	.+24     	; 0x36fe <__mulsf3+0x1de>
    36e6:	47 fd       	sbrc	r20, 7
    36e8:	0a c0       	rjmp	.+20     	; 0x36fe <__mulsf3+0x1de>
    36ea:	81 14       	cp	r8, r1
    36ec:	91 04       	cpc	r9, r1
    36ee:	a1 04       	cpc	r10, r1
    36f0:	b1 04       	cpc	r11, r1
    36f2:	29 f0       	breq	.+10     	; 0x36fe <__mulsf3+0x1de>
    36f4:	40 5c       	subi	r20, 0xC0	; 192
    36f6:	5f 4f       	sbci	r21, 0xFF	; 255
    36f8:	6f 4f       	sbci	r22, 0xFF	; 255
    36fa:	7f 4f       	sbci	r23, 0xFF	; 255
    36fc:	40 78       	andi	r20, 0x80	; 128
    36fe:	4d 8f       	std	Y+29, r20	; 0x1d
    3700:	5e 8f       	std	Y+30, r21	; 0x1e
    3702:	6f 8f       	std	Y+31, r22	; 0x1f
    3704:	78 a3       	std	Y+32, r23	; 0x20
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	89 8f       	std	Y+25, r24	; 0x19
    370a:	be 01       	movw	r22, r28
    370c:	67 5e       	subi	r22, 0xE7	; 231
    370e:	7f 4f       	sbci	r23, 0xFF	; 255
    3710:	cb 01       	movw	r24, r22
    3712:	0e 94 8d 1c 	call	0x391a	; 0x391a <__pack_f>
    3716:	e0 e1       	ldi	r30, 0x10	; 16
    3718:	a0 96       	adiw	r28, 0x20	; 32
    371a:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x4>

0000371e <__floatsisf>:
    371e:	a8 e0       	ldi	r26, 0x08	; 8
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e5 e9       	ldi	r30, 0x95	; 149
    3724:	fb e1       	ldi	r31, 0x1B	; 27
    3726:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x12>
    372a:	9b 01       	movw	r18, r22
    372c:	ac 01       	movw	r20, r24
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	da 01       	movw	r26, r20
    3734:	c9 01       	movw	r24, r18
    3736:	88 27       	eor	r24, r24
    3738:	b7 fd       	sbrc	r27, 7
    373a:	83 95       	inc	r24
    373c:	99 27       	eor	r25, r25
    373e:	aa 27       	eor	r26, r26
    3740:	bb 27       	eor	r27, r27
    3742:	b8 2e       	mov	r11, r24
    3744:	21 15       	cp	r18, r1
    3746:	31 05       	cpc	r19, r1
    3748:	41 05       	cpc	r20, r1
    374a:	51 05       	cpc	r21, r1
    374c:	19 f4       	brne	.+6      	; 0x3754 <__floatsisf+0x36>
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	3a c0       	rjmp	.+116    	; 0x37c8 <__floatsisf+0xaa>
    3754:	88 23       	and	r24, r24
    3756:	a9 f0       	breq	.+42     	; 0x3782 <__floatsisf+0x64>
    3758:	20 30       	cpi	r18, 0x00	; 0
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	38 07       	cpc	r19, r24
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	48 07       	cpc	r20, r24
    3762:	80 e8       	ldi	r24, 0x80	; 128
    3764:	58 07       	cpc	r21, r24
    3766:	29 f4       	brne	.+10     	; 0x3772 <__floatsisf+0x54>
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	9f ec       	ldi	r25, 0xCF	; 207
    3770:	30 c0       	rjmp	.+96     	; 0x37d2 <__floatsisf+0xb4>
    3772:	ee 24       	eor	r14, r14
    3774:	ff 24       	eor	r15, r15
    3776:	87 01       	movw	r16, r14
    3778:	e2 1a       	sub	r14, r18
    377a:	f3 0a       	sbc	r15, r19
    377c:	04 0b       	sbc	r16, r20
    377e:	15 0b       	sbc	r17, r21
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <__floatsisf+0x68>
    3782:	79 01       	movw	r14, r18
    3784:	8a 01       	movw	r16, r20
    3786:	8e e1       	ldi	r24, 0x1E	; 30
    3788:	c8 2e       	mov	r12, r24
    378a:	d1 2c       	mov	r13, r1
    378c:	dc 82       	std	Y+4, r13	; 0x04
    378e:	cb 82       	std	Y+3, r12	; 0x03
    3790:	ed 82       	std	Y+5, r14	; 0x05
    3792:	fe 82       	std	Y+6, r15	; 0x06
    3794:	0f 83       	std	Y+7, r16	; 0x07
    3796:	18 87       	std	Y+8, r17	; 0x08
    3798:	c8 01       	movw	r24, r16
    379a:	b7 01       	movw	r22, r14
    379c:	0e 94 40 1c 	call	0x3880	; 0x3880 <__clzsi2>
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	18 16       	cp	r1, r24
    37a4:	19 06       	cpc	r1, r25
    37a6:	84 f4       	brge	.+32     	; 0x37c8 <__floatsisf+0xaa>
    37a8:	08 2e       	mov	r0, r24
    37aa:	04 c0       	rjmp	.+8      	; 0x37b4 <__floatsisf+0x96>
    37ac:	ee 0c       	add	r14, r14
    37ae:	ff 1c       	adc	r15, r15
    37b0:	00 1f       	adc	r16, r16
    37b2:	11 1f       	adc	r17, r17
    37b4:	0a 94       	dec	r0
    37b6:	d2 f7       	brpl	.-12     	; 0x37ac <__floatsisf+0x8e>
    37b8:	ed 82       	std	Y+5, r14	; 0x05
    37ba:	fe 82       	std	Y+6, r15	; 0x06
    37bc:	0f 83       	std	Y+7, r16	; 0x07
    37be:	18 87       	std	Y+8, r17	; 0x08
    37c0:	c8 1a       	sub	r12, r24
    37c2:	d9 0a       	sbc	r13, r25
    37c4:	dc 82       	std	Y+4, r13	; 0x04
    37c6:	cb 82       	std	Y+3, r12	; 0x03
    37c8:	ba 82       	std	Y+2, r11	; 0x02
    37ca:	ce 01       	movw	r24, r28
    37cc:	01 96       	adiw	r24, 0x01	; 1
    37ce:	0e 94 8d 1c 	call	0x391a	; 0x391a <__pack_f>
    37d2:	e9 e0       	ldi	r30, 0x09	; 9
    37d4:	28 96       	adiw	r28, 0x08	; 8
    37d6:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x12>

000037da <__fixsfsi>:
    37da:	ac e0       	ldi	r26, 0x0C	; 12
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	e3 ef       	ldi	r30, 0xF3	; 243
    37e0:	fb e1       	ldi	r31, 0x1B	; 27
    37e2:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__prologue_saves__+0x20>
    37e6:	69 83       	std	Y+1, r22	; 0x01
    37e8:	7a 83       	std	Y+2, r23	; 0x02
    37ea:	8b 83       	std	Y+3, r24	; 0x03
    37ec:	9c 83       	std	Y+4, r25	; 0x04
    37ee:	be 01       	movw	r22, r28
    37f0:	6b 5f       	subi	r22, 0xFB	; 251
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	ce 01       	movw	r24, r28
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__unpack_f>
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	82 30       	cpi	r24, 0x02	; 2
    3800:	a9 f1       	breq	.+106    	; 0x386c <__fixsfsi+0x92>
    3802:	82 30       	cpi	r24, 0x02	; 2
    3804:	98 f1       	brcs	.+102    	; 0x386c <__fixsfsi+0x92>
    3806:	84 30       	cpi	r24, 0x04	; 4
    3808:	21 f4       	brne	.+8      	; 0x3812 <__fixsfsi+0x38>
    380a:	8e 81       	ldd	r24, Y+6	; 0x06
    380c:	88 23       	and	r24, r24
    380e:	59 f4       	brne	.+22     	; 0x3826 <__fixsfsi+0x4c>
    3810:	0f c0       	rjmp	.+30     	; 0x3830 <__fixsfsi+0x56>
    3812:	2f 81       	ldd	r18, Y+7	; 0x07
    3814:	38 85       	ldd	r19, Y+8	; 0x08
    3816:	37 fd       	sbrc	r19, 7
    3818:	29 c0       	rjmp	.+82     	; 0x386c <__fixsfsi+0x92>
    381a:	6e 81       	ldd	r22, Y+6	; 0x06
    381c:	2f 31       	cpi	r18, 0x1F	; 31
    381e:	31 05       	cpc	r19, r1
    3820:	64 f0       	brlt	.+24     	; 0x383a <__fixsfsi+0x60>
    3822:	66 23       	and	r22, r22
    3824:	29 f0       	breq	.+10     	; 0x3830 <__fixsfsi+0x56>
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e0       	ldi	r20, 0x00	; 0
    382c:	50 e8       	ldi	r21, 0x80	; 128
    382e:	22 c0       	rjmp	.+68     	; 0x3874 <__fixsfsi+0x9a>
    3830:	2f ef       	ldi	r18, 0xFF	; 255
    3832:	3f ef       	ldi	r19, 0xFF	; 255
    3834:	4f ef       	ldi	r20, 0xFF	; 255
    3836:	5f e7       	ldi	r21, 0x7F	; 127
    3838:	1d c0       	rjmp	.+58     	; 0x3874 <__fixsfsi+0x9a>
    383a:	8e e1       	ldi	r24, 0x1E	; 30
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	82 1b       	sub	r24, r18
    3840:	93 0b       	sbc	r25, r19
    3842:	29 85       	ldd	r18, Y+9	; 0x09
    3844:	3a 85       	ldd	r19, Y+10	; 0x0a
    3846:	4b 85       	ldd	r20, Y+11	; 0x0b
    3848:	5c 85       	ldd	r21, Y+12	; 0x0c
    384a:	04 c0       	rjmp	.+8      	; 0x3854 <__fixsfsi+0x7a>
    384c:	56 95       	lsr	r21
    384e:	47 95       	ror	r20
    3850:	37 95       	ror	r19
    3852:	27 95       	ror	r18
    3854:	8a 95       	dec	r24
    3856:	d2 f7       	brpl	.-12     	; 0x384c <__fixsfsi+0x72>
    3858:	66 23       	and	r22, r22
    385a:	61 f0       	breq	.+24     	; 0x3874 <__fixsfsi+0x9a>
    385c:	50 95       	com	r21
    385e:	40 95       	com	r20
    3860:	30 95       	com	r19
    3862:	21 95       	neg	r18
    3864:	3f 4f       	sbci	r19, 0xFF	; 255
    3866:	4f 4f       	sbci	r20, 0xFF	; 255
    3868:	5f 4f       	sbci	r21, 0xFF	; 255
    386a:	04 c0       	rjmp	.+8      	; 0x3874 <__fixsfsi+0x9a>
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e0       	ldi	r20, 0x00	; 0
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	ca 01       	movw	r24, r20
    3876:	b9 01       	movw	r22, r18
    3878:	e2 e0       	ldi	r30, 0x02	; 2
    387a:	2c 96       	adiw	r28, 0x0c	; 12
    387c:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__epilogue_restores__+0x20>

00003880 <__clzsi2>:
    3880:	ef 92       	push	r14
    3882:	ff 92       	push	r15
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	9b 01       	movw	r18, r22
    388a:	ac 01       	movw	r20, r24
    388c:	20 30       	cpi	r18, 0x00	; 0
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	38 07       	cpc	r19, r24
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	48 07       	cpc	r20, r24
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	58 07       	cpc	r21, r24
    389a:	80 f4       	brcc	.+32     	; 0x38bc <__clzsi2+0x3c>
    389c:	2f 3f       	cpi	r18, 0xFF	; 255
    389e:	31 05       	cpc	r19, r1
    38a0:	41 05       	cpc	r20, r1
    38a2:	51 05       	cpc	r21, r1
    38a4:	09 f0       	breq	.+2      	; 0x38a8 <__clzsi2+0x28>
    38a6:	20 f4       	brcc	.+8      	; 0x38b0 <__clzsi2+0x30>
    38a8:	ee 24       	eor	r14, r14
    38aa:	ff 24       	eor	r15, r15
    38ac:	87 01       	movw	r16, r14
    38ae:	19 c0       	rjmp	.+50     	; 0x38e2 <__clzsi2+0x62>
    38b0:	68 e0       	ldi	r22, 0x08	; 8
    38b2:	e6 2e       	mov	r14, r22
    38b4:	f1 2c       	mov	r15, r1
    38b6:	01 2d       	mov	r16, r1
    38b8:	11 2d       	mov	r17, r1
    38ba:	13 c0       	rjmp	.+38     	; 0x38e2 <__clzsi2+0x62>
    38bc:	20 30       	cpi	r18, 0x00	; 0
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	38 07       	cpc	r19, r24
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	48 07       	cpc	r20, r24
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	58 07       	cpc	r21, r24
    38ca:	30 f4       	brcc	.+12     	; 0x38d8 <__clzsi2+0x58>
    38cc:	90 e1       	ldi	r25, 0x10	; 16
    38ce:	e9 2e       	mov	r14, r25
    38d0:	f1 2c       	mov	r15, r1
    38d2:	01 2d       	mov	r16, r1
    38d4:	11 2d       	mov	r17, r1
    38d6:	05 c0       	rjmp	.+10     	; 0x38e2 <__clzsi2+0x62>
    38d8:	88 e1       	ldi	r24, 0x18	; 24
    38da:	e8 2e       	mov	r14, r24
    38dc:	f1 2c       	mov	r15, r1
    38de:	01 2d       	mov	r16, r1
    38e0:	11 2d       	mov	r17, r1
    38e2:	80 e2       	ldi	r24, 0x20	; 32
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	a0 e0       	ldi	r26, 0x00	; 0
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	8e 19       	sub	r24, r14
    38ec:	9f 09       	sbc	r25, r15
    38ee:	a0 0b       	sbc	r26, r16
    38f0:	b1 0b       	sbc	r27, r17
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <__clzsi2+0x7c>
    38f4:	56 95       	lsr	r21
    38f6:	47 95       	ror	r20
    38f8:	37 95       	ror	r19
    38fa:	27 95       	ror	r18
    38fc:	ea 94       	dec	r14
    38fe:	d2 f7       	brpl	.-12     	; 0x38f4 <__clzsi2+0x74>
    3900:	f9 01       	movw	r30, r18
    3902:	e5 5e       	subi	r30, 0xE5	; 229
    3904:	fd 4f       	sbci	r31, 0xFD	; 253
    3906:	20 81       	ld	r18, Z
    3908:	82 1b       	sub	r24, r18
    390a:	91 09       	sbc	r25, r1
    390c:	a1 09       	sbc	r26, r1
    390e:	b1 09       	sbc	r27, r1
    3910:	1f 91       	pop	r17
    3912:	0f 91       	pop	r16
    3914:	ff 90       	pop	r15
    3916:	ef 90       	pop	r14
    3918:	08 95       	ret

0000391a <__pack_f>:
    391a:	9f 92       	push	r9
    391c:	af 92       	push	r10
    391e:	bf 92       	push	r11
    3920:	cf 92       	push	r12
    3922:	df 92       	push	r13
    3924:	ef 92       	push	r14
    3926:	ff 92       	push	r15
    3928:	0f 93       	push	r16
    392a:	1f 93       	push	r17
    392c:	ee 24       	eor	r14, r14
    392e:	ff 24       	eor	r15, r15
    3930:	87 01       	movw	r16, r14
    3932:	fc 01       	movw	r30, r24
    3934:	24 81       	ldd	r18, Z+4	; 0x04
    3936:	35 81       	ldd	r19, Z+5	; 0x05
    3938:	46 81       	ldd	r20, Z+6	; 0x06
    393a:	57 81       	ldd	r21, Z+7	; 0x07
    393c:	91 80       	ldd	r9, Z+1	; 0x01
    393e:	80 81       	ld	r24, Z
    3940:	82 30       	cpi	r24, 0x02	; 2
    3942:	10 f4       	brcc	.+4      	; 0x3948 <__pack_f+0x2e>
    3944:	40 61       	ori	r20, 0x10	; 16
    3946:	a2 c0       	rjmp	.+324    	; 0x3a8c <__pack_f+0x172>
    3948:	84 30       	cpi	r24, 0x04	; 4
    394a:	09 f4       	brne	.+2      	; 0x394e <__pack_f+0x34>
    394c:	9b c0       	rjmp	.+310    	; 0x3a84 <__pack_f+0x16a>
    394e:	82 30       	cpi	r24, 0x02	; 2
    3950:	29 f4       	brne	.+10     	; 0x395c <__pack_f+0x42>
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	50 e0       	ldi	r21, 0x00	; 0
    395a:	05 c0       	rjmp	.+10     	; 0x3966 <__pack_f+0x4c>
    395c:	21 15       	cp	r18, r1
    395e:	31 05       	cpc	r19, r1
    3960:	41 05       	cpc	r20, r1
    3962:	51 05       	cpc	r21, r1
    3964:	19 f4       	brne	.+6      	; 0x396c <__pack_f+0x52>
    3966:	e0 e0       	ldi	r30, 0x00	; 0
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	92 c0       	rjmp	.+292    	; 0x3a90 <__pack_f+0x176>
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	6f ef       	ldi	r22, 0xFF	; 255
    3972:	82 38       	cpi	r24, 0x82	; 130
    3974:	96 07       	cpc	r25, r22
    3976:	0c f0       	brlt	.+2      	; 0x397a <__pack_f+0x60>
    3978:	5a c0       	rjmp	.+180    	; 0x3a2e <__pack_f+0x114>
    397a:	62 e8       	ldi	r22, 0x82	; 130
    397c:	7f ef       	ldi	r23, 0xFF	; 255
    397e:	68 1b       	sub	r22, r24
    3980:	79 0b       	sbc	r23, r25
    3982:	6a 31       	cpi	r22, 0x1A	; 26
    3984:	71 05       	cpc	r23, r1
    3986:	2c f0       	brlt	.+10     	; 0x3992 <__pack_f+0x78>
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e0       	ldi	r20, 0x00	; 0
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	2a c0       	rjmp	.+84     	; 0x39e6 <__pack_f+0xcc>
    3992:	aa 24       	eor	r10, r10
    3994:	bb 24       	eor	r11, r11
    3996:	65 01       	movw	r12, r10
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a0 e0       	ldi	r26, 0x00	; 0
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	06 2e       	mov	r0, r22
    39a2:	04 c0       	rjmp	.+8      	; 0x39ac <__pack_f+0x92>
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	aa 1f       	adc	r26, r26
    39aa:	bb 1f       	adc	r27, r27
    39ac:	0a 94       	dec	r0
    39ae:	d2 f7       	brpl	.-12     	; 0x39a4 <__pack_f+0x8a>
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	a1 09       	sbc	r26, r1
    39b4:	b1 09       	sbc	r27, r1
    39b6:	82 23       	and	r24, r18
    39b8:	93 23       	and	r25, r19
    39ba:	a4 23       	and	r26, r20
    39bc:	b5 23       	and	r27, r21
    39be:	00 97       	sbiw	r24, 0x00	; 0
    39c0:	a1 05       	cpc	r26, r1
    39c2:	b1 05       	cpc	r27, r1
    39c4:	29 f0       	breq	.+10     	; 0x39d0 <__pack_f+0xb6>
    39c6:	71 e0       	ldi	r23, 0x01	; 1
    39c8:	a7 2e       	mov	r10, r23
    39ca:	b1 2c       	mov	r11, r1
    39cc:	c1 2c       	mov	r12, r1
    39ce:	d1 2c       	mov	r13, r1
    39d0:	04 c0       	rjmp	.+8      	; 0x39da <__pack_f+0xc0>
    39d2:	56 95       	lsr	r21
    39d4:	47 95       	ror	r20
    39d6:	37 95       	ror	r19
    39d8:	27 95       	ror	r18
    39da:	6a 95       	dec	r22
    39dc:	d2 f7       	brpl	.-12     	; 0x39d2 <__pack_f+0xb8>
    39de:	2a 29       	or	r18, r10
    39e0:	3b 29       	or	r19, r11
    39e2:	4c 29       	or	r20, r12
    39e4:	5d 29       	or	r21, r13
    39e6:	da 01       	movw	r26, r20
    39e8:	c9 01       	movw	r24, r18
    39ea:	8f 77       	andi	r24, 0x7F	; 127
    39ec:	90 70       	andi	r25, 0x00	; 0
    39ee:	a0 70       	andi	r26, 0x00	; 0
    39f0:	b0 70       	andi	r27, 0x00	; 0
    39f2:	80 34       	cpi	r24, 0x40	; 64
    39f4:	91 05       	cpc	r25, r1
    39f6:	a1 05       	cpc	r26, r1
    39f8:	b1 05       	cpc	r27, r1
    39fa:	39 f4       	brne	.+14     	; 0x3a0a <__pack_f+0xf0>
    39fc:	27 ff       	sbrs	r18, 7
    39fe:	09 c0       	rjmp	.+18     	; 0x3a12 <__pack_f+0xf8>
    3a00:	20 5c       	subi	r18, 0xC0	; 192
    3a02:	3f 4f       	sbci	r19, 0xFF	; 255
    3a04:	4f 4f       	sbci	r20, 0xFF	; 255
    3a06:	5f 4f       	sbci	r21, 0xFF	; 255
    3a08:	04 c0       	rjmp	.+8      	; 0x3a12 <__pack_f+0xf8>
    3a0a:	21 5c       	subi	r18, 0xC1	; 193
    3a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0e:	4f 4f       	sbci	r20, 0xFF	; 255
    3a10:	5f 4f       	sbci	r21, 0xFF	; 255
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	20 30       	cpi	r18, 0x00	; 0
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	36 07       	cpc	r19, r22
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	46 07       	cpc	r20, r22
    3a20:	60 e4       	ldi	r22, 0x40	; 64
    3a22:	56 07       	cpc	r21, r22
    3a24:	10 f0       	brcs	.+4      	; 0x3a2a <__pack_f+0x110>
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	23 c0       	rjmp	.+70     	; 0x3a74 <__pack_f+0x15a>
    3a2e:	80 38       	cpi	r24, 0x80	; 128
    3a30:	91 05       	cpc	r25, r1
    3a32:	44 f5       	brge	.+80     	; 0x3a84 <__pack_f+0x16a>
    3a34:	fc 01       	movw	r30, r24
    3a36:	e1 58       	subi	r30, 0x81	; 129
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	da 01       	movw	r26, r20
    3a3c:	c9 01       	movw	r24, r18
    3a3e:	8f 77       	andi	r24, 0x7F	; 127
    3a40:	90 70       	andi	r25, 0x00	; 0
    3a42:	a0 70       	andi	r26, 0x00	; 0
    3a44:	b0 70       	andi	r27, 0x00	; 0
    3a46:	80 34       	cpi	r24, 0x40	; 64
    3a48:	91 05       	cpc	r25, r1
    3a4a:	a1 05       	cpc	r26, r1
    3a4c:	b1 05       	cpc	r27, r1
    3a4e:	39 f4       	brne	.+14     	; 0x3a5e <__pack_f+0x144>
    3a50:	27 ff       	sbrs	r18, 7
    3a52:	09 c0       	rjmp	.+18     	; 0x3a66 <__pack_f+0x14c>
    3a54:	20 5c       	subi	r18, 0xC0	; 192
    3a56:	3f 4f       	sbci	r19, 0xFF	; 255
    3a58:	4f 4f       	sbci	r20, 0xFF	; 255
    3a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a5c:	04 c0       	rjmp	.+8      	; 0x3a66 <__pack_f+0x14c>
    3a5e:	21 5c       	subi	r18, 0xC1	; 193
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	4f 4f       	sbci	r20, 0xFF	; 255
    3a64:	5f 4f       	sbci	r21, 0xFF	; 255
    3a66:	57 ff       	sbrs	r21, 7
    3a68:	05 c0       	rjmp	.+10     	; 0x3a74 <__pack_f+0x15a>
    3a6a:	56 95       	lsr	r21
    3a6c:	47 95       	ror	r20
    3a6e:	37 95       	ror	r19
    3a70:	27 95       	ror	r18
    3a72:	31 96       	adiw	r30, 0x01	; 1
    3a74:	87 e0       	ldi	r24, 0x07	; 7
    3a76:	56 95       	lsr	r21
    3a78:	47 95       	ror	r20
    3a7a:	37 95       	ror	r19
    3a7c:	27 95       	ror	r18
    3a7e:	8a 95       	dec	r24
    3a80:	d1 f7       	brne	.-12     	; 0x3a76 <__pack_f+0x15c>
    3a82:	06 c0       	rjmp	.+12     	; 0x3a90 <__pack_f+0x176>
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e0       	ldi	r20, 0x00	; 0
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	ef ef       	ldi	r30, 0xFF	; 255
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	e2 2e       	mov	r14, r18
    3a92:	f3 2e       	mov	r15, r19
    3a94:	94 2f       	mov	r25, r20
    3a96:	9f 77       	andi	r25, 0x7F	; 127
    3a98:	80 2f       	mov	r24, r16
    3a9a:	80 78       	andi	r24, 0x80	; 128
    3a9c:	89 2b       	or	r24, r25
    3a9e:	9e 2f       	mov	r25, r30
    3aa0:	97 95       	ror	r25
    3aa2:	99 27       	eor	r25, r25
    3aa4:	97 95       	ror	r25
    3aa6:	8f 77       	andi	r24, 0x7F	; 127
    3aa8:	08 2f       	mov	r16, r24
    3aaa:	09 2b       	or	r16, r25
    3aac:	9e 2f       	mov	r25, r30
    3aae:	96 95       	lsr	r25
    3ab0:	81 2f       	mov	r24, r17
    3ab2:	80 78       	andi	r24, 0x80	; 128
    3ab4:	89 2b       	or	r24, r25
    3ab6:	97 94       	ror	r9
    3ab8:	99 24       	eor	r9, r9
    3aba:	97 94       	ror	r9
    3abc:	8f 77       	andi	r24, 0x7F	; 127
    3abe:	18 2f       	mov	r17, r24
    3ac0:	19 29       	or	r17, r9
    3ac2:	c8 01       	movw	r24, r16
    3ac4:	b7 01       	movw	r22, r14
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	ff 90       	pop	r15
    3acc:	ef 90       	pop	r14
    3ace:	df 90       	pop	r13
    3ad0:	cf 90       	pop	r12
    3ad2:	bf 90       	pop	r11
    3ad4:	af 90       	pop	r10
    3ad6:	9f 90       	pop	r9
    3ad8:	08 95       	ret

00003ada <__unpack_f>:
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	fc 01       	movw	r30, r24
    3ae0:	db 01       	movw	r26, r22
    3ae2:	20 81       	ld	r18, Z
    3ae4:	31 81       	ldd	r19, Z+1	; 0x01
    3ae6:	92 81       	ldd	r25, Z+2	; 0x02
    3ae8:	49 2f       	mov	r20, r25
    3aea:	4f 77       	andi	r20, 0x7F	; 127
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	99 1f       	adc	r25, r25
    3af0:	99 27       	eor	r25, r25
    3af2:	99 1f       	adc	r25, r25
    3af4:	83 81       	ldd	r24, Z+3	; 0x03
    3af6:	e8 2f       	mov	r30, r24
    3af8:	ee 0f       	add	r30, r30
    3afa:	e9 2b       	or	r30, r25
    3afc:	6e 2f       	mov	r22, r30
    3afe:	70 e0       	ldi	r23, 0x00	; 0
    3b00:	88 1f       	adc	r24, r24
    3b02:	88 27       	eor	r24, r24
    3b04:	88 1f       	adc	r24, r24
    3b06:	ed 01       	movw	r28, r26
    3b08:	89 83       	std	Y+1, r24	; 0x01
    3b0a:	ee 23       	and	r30, r30
    3b0c:	71 f5       	brne	.+92     	; 0x3b6a <__unpack_f+0x90>
    3b0e:	21 15       	cp	r18, r1
    3b10:	31 05       	cpc	r19, r1
    3b12:	41 05       	cpc	r20, r1
    3b14:	51 05       	cpc	r21, r1
    3b16:	11 f4       	brne	.+4      	; 0x3b1c <__unpack_f+0x42>
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	2f c0       	rjmp	.+94     	; 0x3b7a <__unpack_f+0xa0>
    3b1c:	6e 57       	subi	r22, 0x7E	; 126
    3b1e:	70 40       	sbci	r23, 0x00	; 0
    3b20:	fd 01       	movw	r30, r26
    3b22:	73 83       	std	Z+3, r23	; 0x03
    3b24:	62 83       	std	Z+2, r22	; 0x02
    3b26:	67 e0       	ldi	r22, 0x07	; 7
    3b28:	22 0f       	add	r18, r18
    3b2a:	33 1f       	adc	r19, r19
    3b2c:	44 1f       	adc	r20, r20
    3b2e:	55 1f       	adc	r21, r21
    3b30:	6a 95       	dec	r22
    3b32:	d1 f7       	brne	.-12     	; 0x3b28 <__unpack_f+0x4e>
    3b34:	83 e0       	ldi	r24, 0x03	; 3
    3b36:	8c 93       	st	X, r24
    3b38:	0a c0       	rjmp	.+20     	; 0x3b4e <__unpack_f+0x74>
    3b3a:	22 0f       	add	r18, r18
    3b3c:	33 1f       	adc	r19, r19
    3b3e:	44 1f       	adc	r20, r20
    3b40:	55 1f       	adc	r21, r21
    3b42:	ed 01       	movw	r28, r26
    3b44:	8a 81       	ldd	r24, Y+2	; 0x02
    3b46:	9b 81       	ldd	r25, Y+3	; 0x03
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	9b 83       	std	Y+3, r25	; 0x03
    3b4c:	8a 83       	std	Y+2, r24	; 0x02
    3b4e:	20 30       	cpi	r18, 0x00	; 0
    3b50:	e0 e0       	ldi	r30, 0x00	; 0
    3b52:	3e 07       	cpc	r19, r30
    3b54:	e0 e0       	ldi	r30, 0x00	; 0
    3b56:	4e 07       	cpc	r20, r30
    3b58:	e0 e4       	ldi	r30, 0x40	; 64
    3b5a:	5e 07       	cpc	r21, r30
    3b5c:	70 f3       	brcs	.-36     	; 0x3b3a <__unpack_f+0x60>
    3b5e:	ed 01       	movw	r28, r26
    3b60:	2c 83       	std	Y+4, r18	; 0x04
    3b62:	3d 83       	std	Y+5, r19	; 0x05
    3b64:	4e 83       	std	Y+6, r20	; 0x06
    3b66:	5f 83       	std	Y+7, r21	; 0x07
    3b68:	25 c0       	rjmp	.+74     	; 0x3bb4 <__unpack_f+0xda>
    3b6a:	ef 3f       	cpi	r30, 0xFF	; 255
    3b6c:	79 f4       	brne	.+30     	; 0x3b8c <__unpack_f+0xb2>
    3b6e:	21 15       	cp	r18, r1
    3b70:	31 05       	cpc	r19, r1
    3b72:	41 05       	cpc	r20, r1
    3b74:	51 05       	cpc	r21, r1
    3b76:	19 f4       	brne	.+6      	; 0x3b7e <__unpack_f+0xa4>
    3b78:	84 e0       	ldi	r24, 0x04	; 4
    3b7a:	8c 93       	st	X, r24
    3b7c:	1b c0       	rjmp	.+54     	; 0x3bb4 <__unpack_f+0xda>
    3b7e:	44 ff       	sbrs	r20, 4
    3b80:	03 c0       	rjmp	.+6      	; 0x3b88 <__unpack_f+0xae>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	8c 93       	st	X, r24
    3b86:	11 c0       	rjmp	.+34     	; 0x3baa <__unpack_f+0xd0>
    3b88:	1c 92       	st	X, r1
    3b8a:	0f c0       	rjmp	.+30     	; 0x3baa <__unpack_f+0xd0>
    3b8c:	6f 57       	subi	r22, 0x7F	; 127
    3b8e:	70 40       	sbci	r23, 0x00	; 0
    3b90:	ed 01       	movw	r28, r26
    3b92:	7b 83       	std	Y+3, r23	; 0x03
    3b94:	6a 83       	std	Y+2, r22	; 0x02
    3b96:	83 e0       	ldi	r24, 0x03	; 3
    3b98:	8c 93       	st	X, r24
    3b9a:	87 e0       	ldi	r24, 0x07	; 7
    3b9c:	22 0f       	add	r18, r18
    3b9e:	33 1f       	adc	r19, r19
    3ba0:	44 1f       	adc	r20, r20
    3ba2:	55 1f       	adc	r21, r21
    3ba4:	8a 95       	dec	r24
    3ba6:	d1 f7       	brne	.-12     	; 0x3b9c <__unpack_f+0xc2>
    3ba8:	50 64       	ori	r21, 0x40	; 64
    3baa:	fd 01       	movw	r30, r26
    3bac:	24 83       	std	Z+4, r18	; 0x04
    3bae:	35 83       	std	Z+5, r19	; 0x05
    3bb0:	46 83       	std	Z+6, r20	; 0x06
    3bb2:	57 83       	std	Z+7, r21	; 0x07
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

00003bba <__mulsi3>:
    3bba:	62 9f       	mul	r22, r18
    3bbc:	d0 01       	movw	r26, r0
    3bbe:	73 9f       	mul	r23, r19
    3bc0:	f0 01       	movw	r30, r0
    3bc2:	82 9f       	mul	r24, r18
    3bc4:	e0 0d       	add	r30, r0
    3bc6:	f1 1d       	adc	r31, r1
    3bc8:	64 9f       	mul	r22, r20
    3bca:	e0 0d       	add	r30, r0
    3bcc:	f1 1d       	adc	r31, r1
    3bce:	92 9f       	mul	r25, r18
    3bd0:	f0 0d       	add	r31, r0
    3bd2:	83 9f       	mul	r24, r19
    3bd4:	f0 0d       	add	r31, r0
    3bd6:	74 9f       	mul	r23, r20
    3bd8:	f0 0d       	add	r31, r0
    3bda:	65 9f       	mul	r22, r21
    3bdc:	f0 0d       	add	r31, r0
    3bde:	99 27       	eor	r25, r25
    3be0:	72 9f       	mul	r23, r18
    3be2:	b0 0d       	add	r27, r0
    3be4:	e1 1d       	adc	r30, r1
    3be6:	f9 1f       	adc	r31, r25
    3be8:	63 9f       	mul	r22, r19
    3bea:	b0 0d       	add	r27, r0
    3bec:	e1 1d       	adc	r30, r1
    3bee:	f9 1f       	adc	r31, r25
    3bf0:	bd 01       	movw	r22, r26
    3bf2:	cf 01       	movw	r24, r30
    3bf4:	11 24       	eor	r1, r1
    3bf6:	08 95       	ret

00003bf8 <__udivmodhi4>:
    3bf8:	aa 1b       	sub	r26, r26
    3bfa:	bb 1b       	sub	r27, r27
    3bfc:	51 e1       	ldi	r21, 0x11	; 17
    3bfe:	07 c0       	rjmp	.+14     	; 0x3c0e <__udivmodhi4_ep>

00003c00 <__udivmodhi4_loop>:
    3c00:	aa 1f       	adc	r26, r26
    3c02:	bb 1f       	adc	r27, r27
    3c04:	a6 17       	cp	r26, r22
    3c06:	b7 07       	cpc	r27, r23
    3c08:	10 f0       	brcs	.+4      	; 0x3c0e <__udivmodhi4_ep>
    3c0a:	a6 1b       	sub	r26, r22
    3c0c:	b7 0b       	sbc	r27, r23

00003c0e <__udivmodhi4_ep>:
    3c0e:	88 1f       	adc	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	5a 95       	dec	r21
    3c14:	a9 f7       	brne	.-22     	; 0x3c00 <__udivmodhi4_loop>
    3c16:	80 95       	com	r24
    3c18:	90 95       	com	r25
    3c1a:	bc 01       	movw	r22, r24
    3c1c:	cd 01       	movw	r24, r26
    3c1e:	08 95       	ret

00003c20 <__divmodhi4>:
    3c20:	97 fb       	bst	r25, 7
    3c22:	09 2e       	mov	r0, r25
    3c24:	07 26       	eor	r0, r23
    3c26:	0a d0       	rcall	.+20     	; 0x3c3c <__divmodhi4_neg1>
    3c28:	77 fd       	sbrc	r23, 7
    3c2a:	04 d0       	rcall	.+8      	; 0x3c34 <__divmodhi4_neg2>
    3c2c:	e5 df       	rcall	.-54     	; 0x3bf8 <__udivmodhi4>
    3c2e:	06 d0       	rcall	.+12     	; 0x3c3c <__divmodhi4_neg1>
    3c30:	00 20       	and	r0, r0
    3c32:	1a f4       	brpl	.+6      	; 0x3c3a <__divmodhi4_exit>

00003c34 <__divmodhi4_neg2>:
    3c34:	70 95       	com	r23
    3c36:	61 95       	neg	r22
    3c38:	7f 4f       	sbci	r23, 0xFF	; 255

00003c3a <__divmodhi4_exit>:
    3c3a:	08 95       	ret

00003c3c <__divmodhi4_neg1>:
    3c3c:	f6 f7       	brtc	.-4      	; 0x3c3a <__divmodhi4_exit>
    3c3e:	90 95       	com	r25
    3c40:	81 95       	neg	r24
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	08 95       	ret

00003c46 <__divmodsi4>:
    3c46:	97 fb       	bst	r25, 7
    3c48:	09 2e       	mov	r0, r25
    3c4a:	05 26       	eor	r0, r21
    3c4c:	0e d0       	rcall	.+28     	; 0x3c6a <__divmodsi4_neg1>
    3c4e:	57 fd       	sbrc	r21, 7
    3c50:	04 d0       	rcall	.+8      	; 0x3c5a <__divmodsi4_neg2>
    3c52:	14 d0       	rcall	.+40     	; 0x3c7c <__udivmodsi4>
    3c54:	0a d0       	rcall	.+20     	; 0x3c6a <__divmodsi4_neg1>
    3c56:	00 1c       	adc	r0, r0
    3c58:	38 f4       	brcc	.+14     	; 0x3c68 <__divmodsi4_exit>

00003c5a <__divmodsi4_neg2>:
    3c5a:	50 95       	com	r21
    3c5c:	40 95       	com	r20
    3c5e:	30 95       	com	r19
    3c60:	21 95       	neg	r18
    3c62:	3f 4f       	sbci	r19, 0xFF	; 255
    3c64:	4f 4f       	sbci	r20, 0xFF	; 255
    3c66:	5f 4f       	sbci	r21, 0xFF	; 255

00003c68 <__divmodsi4_exit>:
    3c68:	08 95       	ret

00003c6a <__divmodsi4_neg1>:
    3c6a:	f6 f7       	brtc	.-4      	; 0x3c68 <__divmodsi4_exit>
    3c6c:	90 95       	com	r25
    3c6e:	80 95       	com	r24
    3c70:	70 95       	com	r23
    3c72:	61 95       	neg	r22
    3c74:	7f 4f       	sbci	r23, 0xFF	; 255
    3c76:	8f 4f       	sbci	r24, 0xFF	; 255
    3c78:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7a:	08 95       	ret

00003c7c <__udivmodsi4>:
    3c7c:	a1 e2       	ldi	r26, 0x21	; 33
    3c7e:	1a 2e       	mov	r1, r26
    3c80:	aa 1b       	sub	r26, r26
    3c82:	bb 1b       	sub	r27, r27
    3c84:	fd 01       	movw	r30, r26
    3c86:	0d c0       	rjmp	.+26     	; 0x3ca2 <__udivmodsi4_ep>

00003c88 <__udivmodsi4_loop>:
    3c88:	aa 1f       	adc	r26, r26
    3c8a:	bb 1f       	adc	r27, r27
    3c8c:	ee 1f       	adc	r30, r30
    3c8e:	ff 1f       	adc	r31, r31
    3c90:	a2 17       	cp	r26, r18
    3c92:	b3 07       	cpc	r27, r19
    3c94:	e4 07       	cpc	r30, r20
    3c96:	f5 07       	cpc	r31, r21
    3c98:	20 f0       	brcs	.+8      	; 0x3ca2 <__udivmodsi4_ep>
    3c9a:	a2 1b       	sub	r26, r18
    3c9c:	b3 0b       	sbc	r27, r19
    3c9e:	e4 0b       	sbc	r30, r20
    3ca0:	f5 0b       	sbc	r31, r21

00003ca2 <__udivmodsi4_ep>:
    3ca2:	66 1f       	adc	r22, r22
    3ca4:	77 1f       	adc	r23, r23
    3ca6:	88 1f       	adc	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	1a 94       	dec	r1
    3cac:	69 f7       	brne	.-38     	; 0x3c88 <__udivmodsi4_loop>
    3cae:	60 95       	com	r22
    3cb0:	70 95       	com	r23
    3cb2:	80 95       	com	r24
    3cb4:	90 95       	com	r25
    3cb6:	9b 01       	movw	r18, r22
    3cb8:	ac 01       	movw	r20, r24
    3cba:	bd 01       	movw	r22, r26
    3cbc:	cf 01       	movw	r24, r30
    3cbe:	08 95       	ret

00003cc0 <__prologue_saves__>:
    3cc0:	2f 92       	push	r2
    3cc2:	3f 92       	push	r3
    3cc4:	4f 92       	push	r4
    3cc6:	5f 92       	push	r5
    3cc8:	6f 92       	push	r6
    3cca:	7f 92       	push	r7
    3ccc:	8f 92       	push	r8
    3cce:	9f 92       	push	r9
    3cd0:	af 92       	push	r10
    3cd2:	bf 92       	push	r11
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	cd b7       	in	r28, 0x3d	; 61
    3ce6:	de b7       	in	r29, 0x3e	; 62
    3ce8:	ca 1b       	sub	r28, r26
    3cea:	db 0b       	sbc	r29, r27
    3cec:	0f b6       	in	r0, 0x3f	; 63
    3cee:	f8 94       	cli
    3cf0:	de bf       	out	0x3e, r29	; 62
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	cd bf       	out	0x3d, r28	; 61
    3cf6:	19 94       	eijmp

00003cf8 <__epilogue_restores__>:
    3cf8:	2a 88       	ldd	r2, Y+18	; 0x12
    3cfa:	39 88       	ldd	r3, Y+17	; 0x11
    3cfc:	48 88       	ldd	r4, Y+16	; 0x10
    3cfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d00:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d02:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d04:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d06:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d08:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d0a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d0c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d0e:	df 80       	ldd	r13, Y+7	; 0x07
    3d10:	ee 80       	ldd	r14, Y+6	; 0x06
    3d12:	fd 80       	ldd	r15, Y+5	; 0x05
    3d14:	0c 81       	ldd	r16, Y+4	; 0x04
    3d16:	1b 81       	ldd	r17, Y+3	; 0x03
    3d18:	aa 81       	ldd	r26, Y+2	; 0x02
    3d1a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d1c:	ce 0f       	add	r28, r30
    3d1e:	d1 1d       	adc	r29, r1
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	ed 01       	movw	r28, r26
    3d2c:	08 95       	ret

00003d2e <malloc>:
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
    3d32:	82 30       	cpi	r24, 0x02	; 2
    3d34:	91 05       	cpc	r25, r1
    3d36:	10 f4       	brcc	.+4      	; 0x3d3c <malloc+0xe>
    3d38:	82 e0       	ldi	r24, 0x02	; 2
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	e0 91 0f 04 	lds	r30, 0x040F
    3d40:	f0 91 10 04 	lds	r31, 0x0410
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	50 e0       	ldi	r21, 0x00	; 0
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	26 c0       	rjmp	.+76     	; 0x3d9a <malloc+0x6c>
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	68 17       	cp	r22, r24
    3d54:	79 07       	cpc	r23, r25
    3d56:	e0 f0       	brcs	.+56     	; 0x3d90 <malloc+0x62>
    3d58:	68 17       	cp	r22, r24
    3d5a:	79 07       	cpc	r23, r25
    3d5c:	81 f4       	brne	.+32     	; 0x3d7e <malloc+0x50>
    3d5e:	82 81       	ldd	r24, Z+2	; 0x02
    3d60:	93 81       	ldd	r25, Z+3	; 0x03
    3d62:	21 15       	cp	r18, r1
    3d64:	31 05       	cpc	r19, r1
    3d66:	31 f0       	breq	.+12     	; 0x3d74 <malloc+0x46>
    3d68:	d9 01       	movw	r26, r18
    3d6a:	13 96       	adiw	r26, 0x03	; 3
    3d6c:	9c 93       	st	X, r25
    3d6e:	8e 93       	st	-X, r24
    3d70:	12 97       	sbiw	r26, 0x02	; 2
    3d72:	2b c0       	rjmp	.+86     	; 0x3dca <malloc+0x9c>
    3d74:	90 93 10 04 	sts	0x0410, r25
    3d78:	80 93 0f 04 	sts	0x040F, r24
    3d7c:	26 c0       	rjmp	.+76     	; 0x3dca <malloc+0x9c>
    3d7e:	41 15       	cp	r20, r1
    3d80:	51 05       	cpc	r21, r1
    3d82:	19 f0       	breq	.+6      	; 0x3d8a <malloc+0x5c>
    3d84:	64 17       	cp	r22, r20
    3d86:	75 07       	cpc	r23, r21
    3d88:	18 f4       	brcc	.+6      	; 0x3d90 <malloc+0x62>
    3d8a:	ab 01       	movw	r20, r22
    3d8c:	e9 01       	movw	r28, r18
    3d8e:	df 01       	movw	r26, r30
    3d90:	9f 01       	movw	r18, r30
    3d92:	72 81       	ldd	r23, Z+2	; 0x02
    3d94:	63 81       	ldd	r22, Z+3	; 0x03
    3d96:	e7 2f       	mov	r30, r23
    3d98:	f6 2f       	mov	r31, r22
    3d9a:	30 97       	sbiw	r30, 0x00	; 0
    3d9c:	c1 f6       	brne	.-80     	; 0x3d4e <malloc+0x20>
    3d9e:	41 15       	cp	r20, r1
    3da0:	51 05       	cpc	r21, r1
    3da2:	01 f1       	breq	.+64     	; 0x3de4 <malloc+0xb6>
    3da4:	48 1b       	sub	r20, r24
    3da6:	59 0b       	sbc	r21, r25
    3da8:	44 30       	cpi	r20, 0x04	; 4
    3daa:	51 05       	cpc	r21, r1
    3dac:	80 f4       	brcc	.+32     	; 0x3dce <malloc+0xa0>
    3dae:	12 96       	adiw	r26, 0x02	; 2
    3db0:	8d 91       	ld	r24, X+
    3db2:	9c 91       	ld	r25, X
    3db4:	13 97       	sbiw	r26, 0x03	; 3
    3db6:	20 97       	sbiw	r28, 0x00	; 0
    3db8:	19 f0       	breq	.+6      	; 0x3dc0 <malloc+0x92>
    3dba:	9b 83       	std	Y+3, r25	; 0x03
    3dbc:	8a 83       	std	Y+2, r24	; 0x02
    3dbe:	04 c0       	rjmp	.+8      	; 0x3dc8 <malloc+0x9a>
    3dc0:	90 93 10 04 	sts	0x0410, r25
    3dc4:	80 93 0f 04 	sts	0x040F, r24
    3dc8:	fd 01       	movw	r30, r26
    3dca:	32 96       	adiw	r30, 0x02	; 2
    3dcc:	46 c0       	rjmp	.+140    	; 0x3e5a <malloc+0x12c>
    3dce:	fd 01       	movw	r30, r26
    3dd0:	e4 0f       	add	r30, r20
    3dd2:	f5 1f       	adc	r31, r21
    3dd4:	81 93       	st	Z+, r24
    3dd6:	91 93       	st	Z+, r25
    3dd8:	42 50       	subi	r20, 0x02	; 2
    3dda:	50 40       	sbci	r21, 0x00	; 0
    3ddc:	11 96       	adiw	r26, 0x01	; 1
    3dde:	5c 93       	st	X, r21
    3de0:	4e 93       	st	-X, r20
    3de2:	3b c0       	rjmp	.+118    	; 0x3e5a <malloc+0x12c>
    3de4:	20 91 0d 04 	lds	r18, 0x040D
    3de8:	30 91 0e 04 	lds	r19, 0x040E
    3dec:	21 15       	cp	r18, r1
    3dee:	31 05       	cpc	r19, r1
    3df0:	41 f4       	brne	.+16     	; 0x3e02 <malloc+0xd4>
    3df2:	20 91 1d 03 	lds	r18, 0x031D
    3df6:	30 91 1e 03 	lds	r19, 0x031E
    3dfa:	30 93 0e 04 	sts	0x040E, r19
    3dfe:	20 93 0d 04 	sts	0x040D, r18
    3e02:	20 91 1f 03 	lds	r18, 0x031F
    3e06:	30 91 20 03 	lds	r19, 0x0320
    3e0a:	21 15       	cp	r18, r1
    3e0c:	31 05       	cpc	r19, r1
    3e0e:	41 f4       	brne	.+16     	; 0x3e20 <malloc+0xf2>
    3e10:	2d b7       	in	r18, 0x3d	; 61
    3e12:	3e b7       	in	r19, 0x3e	; 62
    3e14:	40 91 1b 03 	lds	r20, 0x031B
    3e18:	50 91 1c 03 	lds	r21, 0x031C
    3e1c:	24 1b       	sub	r18, r20
    3e1e:	35 0b       	sbc	r19, r21
    3e20:	e0 91 0d 04 	lds	r30, 0x040D
    3e24:	f0 91 0e 04 	lds	r31, 0x040E
    3e28:	e2 17       	cp	r30, r18
    3e2a:	f3 07       	cpc	r31, r19
    3e2c:	a0 f4       	brcc	.+40     	; 0x3e56 <malloc+0x128>
    3e2e:	2e 1b       	sub	r18, r30
    3e30:	3f 0b       	sbc	r19, r31
    3e32:	28 17       	cp	r18, r24
    3e34:	39 07       	cpc	r19, r25
    3e36:	78 f0       	brcs	.+30     	; 0x3e56 <malloc+0x128>
    3e38:	ac 01       	movw	r20, r24
    3e3a:	4e 5f       	subi	r20, 0xFE	; 254
    3e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3e:	24 17       	cp	r18, r20
    3e40:	35 07       	cpc	r19, r21
    3e42:	48 f0       	brcs	.+18     	; 0x3e56 <malloc+0x128>
    3e44:	4e 0f       	add	r20, r30
    3e46:	5f 1f       	adc	r21, r31
    3e48:	50 93 0e 04 	sts	0x040E, r21
    3e4c:	40 93 0d 04 	sts	0x040D, r20
    3e50:	81 93       	st	Z+, r24
    3e52:	91 93       	st	Z+, r25
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <malloc+0x12c>
    3e56:	e0 e0       	ldi	r30, 0x00	; 0
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	cf 01       	movw	r24, r30
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	08 95       	ret

00003e62 <free>:
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	00 97       	sbiw	r24, 0x00	; 0
    3e68:	09 f4       	brne	.+2      	; 0x3e6c <free+0xa>
    3e6a:	91 c0       	rjmp	.+290    	; 0x3f8e <free+0x12c>
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	32 97       	sbiw	r30, 0x02	; 2
    3e70:	13 82       	std	Z+3, r1	; 0x03
    3e72:	12 82       	std	Z+2, r1	; 0x02
    3e74:	60 91 0f 04 	lds	r22, 0x040F
    3e78:	70 91 10 04 	lds	r23, 0x0410
    3e7c:	61 15       	cp	r22, r1
    3e7e:	71 05       	cpc	r23, r1
    3e80:	81 f4       	brne	.+32     	; 0x3ea2 <free+0x40>
    3e82:	20 81       	ld	r18, Z
    3e84:	31 81       	ldd	r19, Z+1	; 0x01
    3e86:	28 0f       	add	r18, r24
    3e88:	39 1f       	adc	r19, r25
    3e8a:	80 91 0d 04 	lds	r24, 0x040D
    3e8e:	90 91 0e 04 	lds	r25, 0x040E
    3e92:	82 17       	cp	r24, r18
    3e94:	93 07       	cpc	r25, r19
    3e96:	99 f5       	brne	.+102    	; 0x3efe <free+0x9c>
    3e98:	f0 93 0e 04 	sts	0x040E, r31
    3e9c:	e0 93 0d 04 	sts	0x040D, r30
    3ea0:	76 c0       	rjmp	.+236    	; 0x3f8e <free+0x12c>
    3ea2:	db 01       	movw	r26, r22
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <free+0x4c>
    3eaa:	cd 01       	movw	r24, r26
    3eac:	d9 01       	movw	r26, r18
    3eae:	ae 17       	cp	r26, r30
    3eb0:	bf 07       	cpc	r27, r31
    3eb2:	48 f4       	brcc	.+18     	; 0x3ec6 <free+0x64>
    3eb4:	12 96       	adiw	r26, 0x02	; 2
    3eb6:	2d 91       	ld	r18, X+
    3eb8:	3c 91       	ld	r19, X
    3eba:	13 97       	sbiw	r26, 0x03	; 3
    3ebc:	21 15       	cp	r18, r1
    3ebe:	31 05       	cpc	r19, r1
    3ec0:	a1 f7       	brne	.-24     	; 0x3eaa <free+0x48>
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	21 c0       	rjmp	.+66     	; 0x3f08 <free+0xa6>
    3ec6:	b3 83       	std	Z+3, r27	; 0x03
    3ec8:	a2 83       	std	Z+2, r26	; 0x02
    3eca:	ef 01       	movw	r28, r30
    3ecc:	49 91       	ld	r20, Y+
    3ece:	59 91       	ld	r21, Y+
    3ed0:	9e 01       	movw	r18, r28
    3ed2:	24 0f       	add	r18, r20
    3ed4:	35 1f       	adc	r19, r21
    3ed6:	a2 17       	cp	r26, r18
    3ed8:	b3 07       	cpc	r27, r19
    3eda:	79 f4       	brne	.+30     	; 0x3efa <free+0x98>
    3edc:	2d 91       	ld	r18, X+
    3ede:	3c 91       	ld	r19, X
    3ee0:	11 97       	sbiw	r26, 0x01	; 1
    3ee2:	24 0f       	add	r18, r20
    3ee4:	35 1f       	adc	r19, r21
    3ee6:	2e 5f       	subi	r18, 0xFE	; 254
    3ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eea:	31 83       	std	Z+1, r19	; 0x01
    3eec:	20 83       	st	Z, r18
    3eee:	12 96       	adiw	r26, 0x02	; 2
    3ef0:	2d 91       	ld	r18, X+
    3ef2:	3c 91       	ld	r19, X
    3ef4:	13 97       	sbiw	r26, 0x03	; 3
    3ef6:	33 83       	std	Z+3, r19	; 0x03
    3ef8:	22 83       	std	Z+2, r18	; 0x02
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	29 f4       	brne	.+10     	; 0x3f08 <free+0xa6>
    3efe:	f0 93 10 04 	sts	0x0410, r31
    3f02:	e0 93 0f 04 	sts	0x040F, r30
    3f06:	43 c0       	rjmp	.+134    	; 0x3f8e <free+0x12c>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	13 96       	adiw	r26, 0x03	; 3
    3f0c:	fc 93       	st	X, r31
    3f0e:	ee 93       	st	-X, r30
    3f10:	12 97       	sbiw	r26, 0x02	; 2
    3f12:	4d 91       	ld	r20, X+
    3f14:	5d 91       	ld	r21, X+
    3f16:	a4 0f       	add	r26, r20
    3f18:	b5 1f       	adc	r27, r21
    3f1a:	ea 17       	cp	r30, r26
    3f1c:	fb 07       	cpc	r31, r27
    3f1e:	69 f4       	brne	.+26     	; 0x3f3a <free+0xd8>
    3f20:	20 81       	ld	r18, Z
    3f22:	31 81       	ldd	r19, Z+1	; 0x01
    3f24:	24 0f       	add	r18, r20
    3f26:	35 1f       	adc	r19, r21
    3f28:	2e 5f       	subi	r18, 0xFE	; 254
    3f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2c:	ec 01       	movw	r28, r24
    3f2e:	39 83       	std	Y+1, r19	; 0x01
    3f30:	28 83       	st	Y, r18
    3f32:	22 81       	ldd	r18, Z+2	; 0x02
    3f34:	33 81       	ldd	r19, Z+3	; 0x03
    3f36:	3b 83       	std	Y+3, r19	; 0x03
    3f38:	2a 83       	std	Y+2, r18	; 0x02
    3f3a:	e0 e0       	ldi	r30, 0x00	; 0
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	02 c0       	rjmp	.+4      	; 0x3f44 <free+0xe2>
    3f40:	fb 01       	movw	r30, r22
    3f42:	bc 01       	movw	r22, r24
    3f44:	db 01       	movw	r26, r22
    3f46:	12 96       	adiw	r26, 0x02	; 2
    3f48:	8d 91       	ld	r24, X+
    3f4a:	9c 91       	ld	r25, X
    3f4c:	13 97       	sbiw	r26, 0x03	; 3
    3f4e:	00 97       	sbiw	r24, 0x00	; 0
    3f50:	b9 f7       	brne	.-18     	; 0x3f40 <free+0xde>
    3f52:	9b 01       	movw	r18, r22
    3f54:	2e 5f       	subi	r18, 0xFE	; 254
    3f56:	3f 4f       	sbci	r19, 0xFF	; 255
    3f58:	8d 91       	ld	r24, X+
    3f5a:	9c 91       	ld	r25, X
    3f5c:	11 97       	sbiw	r26, 0x01	; 1
    3f5e:	82 0f       	add	r24, r18
    3f60:	93 1f       	adc	r25, r19
    3f62:	40 91 0d 04 	lds	r20, 0x040D
    3f66:	50 91 0e 04 	lds	r21, 0x040E
    3f6a:	48 17       	cp	r20, r24
    3f6c:	59 07       	cpc	r21, r25
    3f6e:	79 f4       	brne	.+30     	; 0x3f8e <free+0x12c>
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	29 f4       	brne	.+10     	; 0x3f7e <free+0x11c>
    3f74:	10 92 10 04 	sts	0x0410, r1
    3f78:	10 92 0f 04 	sts	0x040F, r1
    3f7c:	02 c0       	rjmp	.+4      	; 0x3f82 <free+0x120>
    3f7e:	13 82       	std	Z+3, r1	; 0x03
    3f80:	12 82       	std	Z+2, r1	; 0x02
    3f82:	22 50       	subi	r18, 0x02	; 2
    3f84:	30 40       	sbci	r19, 0x00	; 0
    3f86:	30 93 0e 04 	sts	0x040E, r19
    3f8a:	20 93 0d 04 	sts	0x040D, r18
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
    3f92:	08 95       	ret
    3f94:	f5 d0       	rcall	.+490    	; 0x4180 <__fp_pscA>
    3f96:	58 f0       	brcs	.+22     	; 0x3fae <free+0x14c>
    3f98:	80 e8       	ldi	r24, 0x80	; 128
    3f9a:	91 e0       	ldi	r25, 0x01	; 1
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <free+0x13e>
    3f9e:	9e ef       	ldi	r25, 0xFE	; 254
    3fa0:	f6 d0       	rcall	.+492    	; 0x418e <__fp_pscB>
    3fa2:	28 f0       	brcs	.+10     	; 0x3fae <free+0x14c>
    3fa4:	40 e8       	ldi	r20, 0x80	; 128
    3fa6:	51 e0       	ldi	r21, 0x01	; 1
    3fa8:	59 f4       	brne	.+22     	; 0x3fc0 <atan2+0xe>
    3faa:	5e ef       	ldi	r21, 0xFE	; 254
    3fac:	09 c0       	rjmp	.+18     	; 0x3fc0 <atan2+0xe>
    3fae:	c0 c0       	rjmp	.+384    	; 0x4130 <__fp_nan>
    3fb0:	28 c1       	rjmp	.+592    	; 0x4202 <__fp_zero>

00003fb2 <atan2>:
    3fb2:	e9 2f       	mov	r30, r25
    3fb4:	e0 78       	andi	r30, 0x80	; 128
    3fb6:	03 d1       	rcall	.+518    	; 0x41be <__fp_split3>
    3fb8:	68 f3       	brcs	.-38     	; 0x3f94 <free+0x132>
    3fba:	09 2e       	mov	r0, r25
    3fbc:	05 2a       	or	r0, r21
    3fbe:	c1 f3       	breq	.-16     	; 0x3fb0 <free+0x14e>
    3fc0:	26 17       	cp	r18, r22
    3fc2:	37 07       	cpc	r19, r23
    3fc4:	48 07       	cpc	r20, r24
    3fc6:	59 07       	cpc	r21, r25
    3fc8:	38 f0       	brcs	.+14     	; 0x3fd8 <atan2+0x26>
    3fca:	0e 2e       	mov	r0, r30
    3fcc:	07 f8       	bld	r0, 7
    3fce:	e0 25       	eor	r30, r0
    3fd0:	69 f0       	breq	.+26     	; 0x3fec <atan2+0x3a>
    3fd2:	e0 25       	eor	r30, r0
    3fd4:	e0 64       	ori	r30, 0x40	; 64
    3fd6:	0a c0       	rjmp	.+20     	; 0x3fec <atan2+0x3a>
    3fd8:	ef 63       	ori	r30, 0x3F	; 63
    3fda:	07 f8       	bld	r0, 7
    3fdc:	00 94       	com	r0
    3fde:	07 fa       	bst	r0, 7
    3fe0:	db 01       	movw	r26, r22
    3fe2:	b9 01       	movw	r22, r18
    3fe4:	9d 01       	movw	r18, r26
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	ca 01       	movw	r24, r20
    3fea:	ad 01       	movw	r20, r26
    3fec:	ef 93       	push	r30
    3fee:	41 d0       	rcall	.+130    	; 0x4072 <__divsf3_pse>
    3ff0:	d5 d0       	rcall	.+426    	; 0x419c <__fp_round>
    3ff2:	0a d0       	rcall	.+20     	; 0x4008 <atan>
    3ff4:	5f 91       	pop	r21
    3ff6:	55 23       	and	r21, r21
    3ff8:	31 f0       	breq	.+12     	; 0x4006 <atan2+0x54>
    3ffa:	2b ed       	ldi	r18, 0xDB	; 219
    3ffc:	3f e0       	ldi	r19, 0x0F	; 15
    3ffe:	49 e4       	ldi	r20, 0x49	; 73
    4000:	50 fd       	sbrc	r21, 0
    4002:	49 ec       	ldi	r20, 0xC9	; 201
    4004:	60 ca       	rjmp	.-2880   	; 0x34c6 <__addsf3>
    4006:	08 95       	ret

00004008 <atan>:
    4008:	df 93       	push	r29
    400a:	dd 27       	eor	r29, r29
    400c:	b9 2f       	mov	r27, r25
    400e:	bf 77       	andi	r27, 0x7F	; 127
    4010:	40 e8       	ldi	r20, 0x80	; 128
    4012:	5f e3       	ldi	r21, 0x3F	; 63
    4014:	16 16       	cp	r1, r22
    4016:	17 06       	cpc	r1, r23
    4018:	48 07       	cpc	r20, r24
    401a:	5b 07       	cpc	r21, r27
    401c:	10 f4       	brcc	.+4      	; 0x4022 <atan+0x1a>
    401e:	d9 2f       	mov	r29, r25
    4020:	f7 d0       	rcall	.+494    	; 0x4210 <inverse>
    4022:	9f 93       	push	r25
    4024:	8f 93       	push	r24
    4026:	7f 93       	push	r23
    4028:	6f 93       	push	r22
    402a:	5a d1       	rcall	.+692    	; 0x42e0 <square>
    402c:	e4 ee       	ldi	r30, 0xE4	; 228
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	82 d0       	rcall	.+260    	; 0x4136 <__fp_powser>
    4032:	b4 d0       	rcall	.+360    	; 0x419c <__fp_round>
    4034:	2f 91       	pop	r18
    4036:	3f 91       	pop	r19
    4038:	4f 91       	pop	r20
    403a:	5f 91       	pop	r21
    403c:	fa d0       	rcall	.+500    	; 0x4232 <__mulsf3x>
    403e:	dd 23       	and	r29, r29
    4040:	49 f0       	breq	.+18     	; 0x4054 <atan+0x4c>
    4042:	90 58       	subi	r25, 0x80	; 128
    4044:	a2 ea       	ldi	r26, 0xA2	; 162
    4046:	2a ed       	ldi	r18, 0xDA	; 218
    4048:	3f e0       	ldi	r19, 0x0F	; 15
    404a:	49 ec       	ldi	r20, 0xC9	; 201
    404c:	5f e3       	ldi	r21, 0x3F	; 63
    404e:	d0 78       	andi	r29, 0x80	; 128
    4050:	5d 27       	eor	r21, r29
    4052:	56 d1       	rcall	.+684    	; 0x4300 <__addsf3x>
    4054:	df 91       	pop	r29
    4056:	a2 c0       	rjmp	.+324    	; 0x419c <__fp_round>
    4058:	9a d0       	rcall	.+308    	; 0x418e <__fp_pscB>
    405a:	40 f0       	brcs	.+16     	; 0x406c <atan+0x64>
    405c:	91 d0       	rcall	.+290    	; 0x4180 <__fp_pscA>
    405e:	30 f0       	brcs	.+12     	; 0x406c <atan+0x64>
    4060:	21 f4       	brne	.+8      	; 0x406a <atan+0x62>
    4062:	5f 3f       	cpi	r21, 0xFF	; 255
    4064:	19 f0       	breq	.+6      	; 0x406c <atan+0x64>
    4066:	5e c0       	rjmp	.+188    	; 0x4124 <__fp_inf>
    4068:	51 11       	cpse	r21, r1
    406a:	cc c0       	rjmp	.+408    	; 0x4204 <__fp_szero>
    406c:	61 c0       	rjmp	.+194    	; 0x4130 <__fp_nan>

0000406e <__divsf3x>:
    406e:	a7 d0       	rcall	.+334    	; 0x41be <__fp_split3>
    4070:	98 f3       	brcs	.-26     	; 0x4058 <atan+0x50>

00004072 <__divsf3_pse>:
    4072:	99 23       	and	r25, r25
    4074:	c9 f3       	breq	.-14     	; 0x4068 <atan+0x60>
    4076:	55 23       	and	r21, r21
    4078:	b1 f3       	breq	.-20     	; 0x4066 <atan+0x5e>
    407a:	95 1b       	sub	r25, r21
    407c:	55 0b       	sbc	r21, r21
    407e:	bb 27       	eor	r27, r27
    4080:	aa 27       	eor	r26, r26
    4082:	62 17       	cp	r22, r18
    4084:	73 07       	cpc	r23, r19
    4086:	84 07       	cpc	r24, r20
    4088:	38 f0       	brcs	.+14     	; 0x4098 <__divsf3_pse+0x26>
    408a:	9f 5f       	subi	r25, 0xFF	; 255
    408c:	5f 4f       	sbci	r21, 0xFF	; 255
    408e:	22 0f       	add	r18, r18
    4090:	33 1f       	adc	r19, r19
    4092:	44 1f       	adc	r20, r20
    4094:	aa 1f       	adc	r26, r26
    4096:	a9 f3       	breq	.-22     	; 0x4082 <__divsf3_pse+0x10>
    4098:	33 d0       	rcall	.+102    	; 0x4100 <__divsf3_pse+0x8e>
    409a:	0e 2e       	mov	r0, r30
    409c:	3a f0       	brmi	.+14     	; 0x40ac <__divsf3_pse+0x3a>
    409e:	e0 e8       	ldi	r30, 0x80	; 128
    40a0:	30 d0       	rcall	.+96     	; 0x4102 <__divsf3_pse+0x90>
    40a2:	91 50       	subi	r25, 0x01	; 1
    40a4:	50 40       	sbci	r21, 0x00	; 0
    40a6:	e6 95       	lsr	r30
    40a8:	00 1c       	adc	r0, r0
    40aa:	ca f7       	brpl	.-14     	; 0x409e <__divsf3_pse+0x2c>
    40ac:	29 d0       	rcall	.+82     	; 0x4100 <__divsf3_pse+0x8e>
    40ae:	fe 2f       	mov	r31, r30
    40b0:	27 d0       	rcall	.+78     	; 0x4100 <__divsf3_pse+0x8e>
    40b2:	66 0f       	add	r22, r22
    40b4:	77 1f       	adc	r23, r23
    40b6:	88 1f       	adc	r24, r24
    40b8:	bb 1f       	adc	r27, r27
    40ba:	26 17       	cp	r18, r22
    40bc:	37 07       	cpc	r19, r23
    40be:	48 07       	cpc	r20, r24
    40c0:	ab 07       	cpc	r26, r27
    40c2:	b0 e8       	ldi	r27, 0x80	; 128
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <__divsf3_pse+0x56>
    40c6:	bb 0b       	sbc	r27, r27
    40c8:	80 2d       	mov	r24, r0
    40ca:	bf 01       	movw	r22, r30
    40cc:	ff 27       	eor	r31, r31
    40ce:	93 58       	subi	r25, 0x83	; 131
    40d0:	5f 4f       	sbci	r21, 0xFF	; 255
    40d2:	2a f0       	brmi	.+10     	; 0x40de <__divsf3_pse+0x6c>
    40d4:	9e 3f       	cpi	r25, 0xFE	; 254
    40d6:	51 05       	cpc	r21, r1
    40d8:	68 f0       	brcs	.+26     	; 0x40f4 <__divsf3_pse+0x82>
    40da:	24 c0       	rjmp	.+72     	; 0x4124 <__fp_inf>
    40dc:	93 c0       	rjmp	.+294    	; 0x4204 <__fp_szero>
    40de:	5f 3f       	cpi	r21, 0xFF	; 255
    40e0:	ec f3       	brlt	.-6      	; 0x40dc <__divsf3_pse+0x6a>
    40e2:	98 3e       	cpi	r25, 0xE8	; 232
    40e4:	dc f3       	brlt	.-10     	; 0x40dc <__divsf3_pse+0x6a>
    40e6:	86 95       	lsr	r24
    40e8:	77 95       	ror	r23
    40ea:	67 95       	ror	r22
    40ec:	b7 95       	ror	r27
    40ee:	f7 95       	ror	r31
    40f0:	9f 5f       	subi	r25, 0xFF	; 255
    40f2:	c9 f7       	brne	.-14     	; 0x40e6 <__divsf3_pse+0x74>
    40f4:	88 0f       	add	r24, r24
    40f6:	91 1d       	adc	r25, r1
    40f8:	96 95       	lsr	r25
    40fa:	87 95       	ror	r24
    40fc:	97 f9       	bld	r25, 7
    40fe:	08 95       	ret
    4100:	e1 e0       	ldi	r30, 0x01	; 1
    4102:	66 0f       	add	r22, r22
    4104:	77 1f       	adc	r23, r23
    4106:	88 1f       	adc	r24, r24
    4108:	bb 1f       	adc	r27, r27
    410a:	62 17       	cp	r22, r18
    410c:	73 07       	cpc	r23, r19
    410e:	84 07       	cpc	r24, r20
    4110:	ba 07       	cpc	r27, r26
    4112:	20 f0       	brcs	.+8      	; 0x411c <__divsf3_pse+0xaa>
    4114:	62 1b       	sub	r22, r18
    4116:	73 0b       	sbc	r23, r19
    4118:	84 0b       	sbc	r24, r20
    411a:	ba 0b       	sbc	r27, r26
    411c:	ee 1f       	adc	r30, r30
    411e:	88 f7       	brcc	.-30     	; 0x4102 <__divsf3_pse+0x90>
    4120:	e0 95       	com	r30
    4122:	08 95       	ret

00004124 <__fp_inf>:
    4124:	97 f9       	bld	r25, 7
    4126:	9f 67       	ori	r25, 0x7F	; 127
    4128:	80 e8       	ldi	r24, 0x80	; 128
    412a:	70 e0       	ldi	r23, 0x00	; 0
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	08 95       	ret

00004130 <__fp_nan>:
    4130:	9f ef       	ldi	r25, 0xFF	; 255
    4132:	80 ec       	ldi	r24, 0xC0	; 192
    4134:	08 95       	ret

00004136 <__fp_powser>:
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	1f 93       	push	r17
    413c:	0f 93       	push	r16
    413e:	ff 92       	push	r15
    4140:	ef 92       	push	r14
    4142:	df 92       	push	r13
    4144:	7b 01       	movw	r14, r22
    4146:	8c 01       	movw	r16, r24
    4148:	68 94       	set
    414a:	05 c0       	rjmp	.+10     	; 0x4156 <__fp_powser+0x20>
    414c:	da 2e       	mov	r13, r26
    414e:	ef 01       	movw	r28, r30
    4150:	70 d0       	rcall	.+224    	; 0x4232 <__mulsf3x>
    4152:	fe 01       	movw	r30, r28
    4154:	e8 94       	clt
    4156:	a5 91       	lpm	r26, Z+
    4158:	25 91       	lpm	r18, Z+
    415a:	35 91       	lpm	r19, Z+
    415c:	45 91       	lpm	r20, Z+
    415e:	55 91       	lpm	r21, Z+
    4160:	ae f3       	brts	.-22     	; 0x414c <__fp_powser+0x16>
    4162:	ef 01       	movw	r28, r30
    4164:	cd d0       	rcall	.+410    	; 0x4300 <__addsf3x>
    4166:	fe 01       	movw	r30, r28
    4168:	97 01       	movw	r18, r14
    416a:	a8 01       	movw	r20, r16
    416c:	da 94       	dec	r13
    416e:	79 f7       	brne	.-34     	; 0x414e <__fp_powser+0x18>
    4170:	df 90       	pop	r13
    4172:	ef 90       	pop	r14
    4174:	ff 90       	pop	r15
    4176:	0f 91       	pop	r16
    4178:	1f 91       	pop	r17
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	08 95       	ret

00004180 <__fp_pscA>:
    4180:	00 24       	eor	r0, r0
    4182:	0a 94       	dec	r0
    4184:	16 16       	cp	r1, r22
    4186:	17 06       	cpc	r1, r23
    4188:	18 06       	cpc	r1, r24
    418a:	09 06       	cpc	r0, r25
    418c:	08 95       	ret

0000418e <__fp_pscB>:
    418e:	00 24       	eor	r0, r0
    4190:	0a 94       	dec	r0
    4192:	12 16       	cp	r1, r18
    4194:	13 06       	cpc	r1, r19
    4196:	14 06       	cpc	r1, r20
    4198:	05 06       	cpc	r0, r21
    419a:	08 95       	ret

0000419c <__fp_round>:
    419c:	09 2e       	mov	r0, r25
    419e:	03 94       	inc	r0
    41a0:	00 0c       	add	r0, r0
    41a2:	11 f4       	brne	.+4      	; 0x41a8 <__fp_round+0xc>
    41a4:	88 23       	and	r24, r24
    41a6:	52 f0       	brmi	.+20     	; 0x41bc <__fp_round+0x20>
    41a8:	bb 0f       	add	r27, r27
    41aa:	40 f4       	brcc	.+16     	; 0x41bc <__fp_round+0x20>
    41ac:	bf 2b       	or	r27, r31
    41ae:	11 f4       	brne	.+4      	; 0x41b4 <__fp_round+0x18>
    41b0:	60 ff       	sbrs	r22, 0
    41b2:	04 c0       	rjmp	.+8      	; 0x41bc <__fp_round+0x20>
    41b4:	6f 5f       	subi	r22, 0xFF	; 255
    41b6:	7f 4f       	sbci	r23, 0xFF	; 255
    41b8:	8f 4f       	sbci	r24, 0xFF	; 255
    41ba:	9f 4f       	sbci	r25, 0xFF	; 255
    41bc:	08 95       	ret

000041be <__fp_split3>:
    41be:	57 fd       	sbrc	r21, 7
    41c0:	90 58       	subi	r25, 0x80	; 128
    41c2:	44 0f       	add	r20, r20
    41c4:	55 1f       	adc	r21, r21
    41c6:	59 f0       	breq	.+22     	; 0x41de <__fp_splitA+0x10>
    41c8:	5f 3f       	cpi	r21, 0xFF	; 255
    41ca:	71 f0       	breq	.+28     	; 0x41e8 <__fp_splitA+0x1a>
    41cc:	47 95       	ror	r20

000041ce <__fp_splitA>:
    41ce:	88 0f       	add	r24, r24
    41d0:	97 fb       	bst	r25, 7
    41d2:	99 1f       	adc	r25, r25
    41d4:	61 f0       	breq	.+24     	; 0x41ee <__fp_splitA+0x20>
    41d6:	9f 3f       	cpi	r25, 0xFF	; 255
    41d8:	79 f0       	breq	.+30     	; 0x41f8 <__fp_splitA+0x2a>
    41da:	87 95       	ror	r24
    41dc:	08 95       	ret
    41de:	12 16       	cp	r1, r18
    41e0:	13 06       	cpc	r1, r19
    41e2:	14 06       	cpc	r1, r20
    41e4:	55 1f       	adc	r21, r21
    41e6:	f2 cf       	rjmp	.-28     	; 0x41cc <__fp_split3+0xe>
    41e8:	46 95       	lsr	r20
    41ea:	f1 df       	rcall	.-30     	; 0x41ce <__fp_splitA>
    41ec:	08 c0       	rjmp	.+16     	; 0x41fe <__fp_splitA+0x30>
    41ee:	16 16       	cp	r1, r22
    41f0:	17 06       	cpc	r1, r23
    41f2:	18 06       	cpc	r1, r24
    41f4:	99 1f       	adc	r25, r25
    41f6:	f1 cf       	rjmp	.-30     	; 0x41da <__fp_splitA+0xc>
    41f8:	86 95       	lsr	r24
    41fa:	71 05       	cpc	r23, r1
    41fc:	61 05       	cpc	r22, r1
    41fe:	08 94       	sec
    4200:	08 95       	ret

00004202 <__fp_zero>:
    4202:	e8 94       	clt

00004204 <__fp_szero>:
    4204:	bb 27       	eor	r27, r27
    4206:	66 27       	eor	r22, r22
    4208:	77 27       	eor	r23, r23
    420a:	cb 01       	movw	r24, r22
    420c:	97 f9       	bld	r25, 7
    420e:	08 95       	ret

00004210 <inverse>:
    4210:	9b 01       	movw	r18, r22
    4212:	ac 01       	movw	r20, r24
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	80 e8       	ldi	r24, 0x80	; 128
    421a:	9f e3       	ldi	r25, 0x3F	; 63
    421c:	c4 c0       	rjmp	.+392    	; 0x43a6 <__divsf3>
    421e:	b0 df       	rcall	.-160    	; 0x4180 <__fp_pscA>
    4220:	28 f0       	brcs	.+10     	; 0x422c <inverse+0x1c>
    4222:	b5 df       	rcall	.-150    	; 0x418e <__fp_pscB>
    4224:	18 f0       	brcs	.+6      	; 0x422c <inverse+0x1c>
    4226:	95 23       	and	r25, r21
    4228:	09 f0       	breq	.+2      	; 0x422c <inverse+0x1c>
    422a:	7c cf       	rjmp	.-264    	; 0x4124 <__fp_inf>
    422c:	81 cf       	rjmp	.-254    	; 0x4130 <__fp_nan>
    422e:	11 24       	eor	r1, r1
    4230:	e9 cf       	rjmp	.-46     	; 0x4204 <__fp_szero>

00004232 <__mulsf3x>:
    4232:	c5 df       	rcall	.-118    	; 0x41be <__fp_split3>
    4234:	a0 f3       	brcs	.-24     	; 0x421e <inverse+0xe>

00004236 <__mulsf3_pse>:
    4236:	95 9f       	mul	r25, r21
    4238:	d1 f3       	breq	.-12     	; 0x422e <inverse+0x1e>
    423a:	95 0f       	add	r25, r21
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	55 1f       	adc	r21, r21
    4240:	62 9f       	mul	r22, r18
    4242:	f0 01       	movw	r30, r0
    4244:	72 9f       	mul	r23, r18
    4246:	bb 27       	eor	r27, r27
    4248:	f0 0d       	add	r31, r0
    424a:	b1 1d       	adc	r27, r1
    424c:	63 9f       	mul	r22, r19
    424e:	aa 27       	eor	r26, r26
    4250:	f0 0d       	add	r31, r0
    4252:	b1 1d       	adc	r27, r1
    4254:	aa 1f       	adc	r26, r26
    4256:	64 9f       	mul	r22, r20
    4258:	66 27       	eor	r22, r22
    425a:	b0 0d       	add	r27, r0
    425c:	a1 1d       	adc	r26, r1
    425e:	66 1f       	adc	r22, r22
    4260:	82 9f       	mul	r24, r18
    4262:	22 27       	eor	r18, r18
    4264:	b0 0d       	add	r27, r0
    4266:	a1 1d       	adc	r26, r1
    4268:	62 1f       	adc	r22, r18
    426a:	73 9f       	mul	r23, r19
    426c:	b0 0d       	add	r27, r0
    426e:	a1 1d       	adc	r26, r1
    4270:	62 1f       	adc	r22, r18
    4272:	83 9f       	mul	r24, r19
    4274:	a0 0d       	add	r26, r0
    4276:	61 1d       	adc	r22, r1
    4278:	22 1f       	adc	r18, r18
    427a:	74 9f       	mul	r23, r20
    427c:	33 27       	eor	r19, r19
    427e:	a0 0d       	add	r26, r0
    4280:	61 1d       	adc	r22, r1
    4282:	23 1f       	adc	r18, r19
    4284:	84 9f       	mul	r24, r20
    4286:	60 0d       	add	r22, r0
    4288:	21 1d       	adc	r18, r1
    428a:	82 2f       	mov	r24, r18
    428c:	76 2f       	mov	r23, r22
    428e:	6a 2f       	mov	r22, r26
    4290:	11 24       	eor	r1, r1
    4292:	9f 57       	subi	r25, 0x7F	; 127
    4294:	50 40       	sbci	r21, 0x00	; 0
    4296:	8a f0       	brmi	.+34     	; 0x42ba <__mulsf3_pse+0x84>
    4298:	e1 f0       	breq	.+56     	; 0x42d2 <__mulsf3_pse+0x9c>
    429a:	88 23       	and	r24, r24
    429c:	4a f0       	brmi	.+18     	; 0x42b0 <__mulsf3_pse+0x7a>
    429e:	ee 0f       	add	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	bb 1f       	adc	r27, r27
    42a4:	66 1f       	adc	r22, r22
    42a6:	77 1f       	adc	r23, r23
    42a8:	88 1f       	adc	r24, r24
    42aa:	91 50       	subi	r25, 0x01	; 1
    42ac:	50 40       	sbci	r21, 0x00	; 0
    42ae:	a9 f7       	brne	.-22     	; 0x429a <__mulsf3_pse+0x64>
    42b0:	9e 3f       	cpi	r25, 0xFE	; 254
    42b2:	51 05       	cpc	r21, r1
    42b4:	70 f0       	brcs	.+28     	; 0x42d2 <__mulsf3_pse+0x9c>
    42b6:	36 cf       	rjmp	.-404    	; 0x4124 <__fp_inf>
    42b8:	a5 cf       	rjmp	.-182    	; 0x4204 <__fp_szero>
    42ba:	5f 3f       	cpi	r21, 0xFF	; 255
    42bc:	ec f3       	brlt	.-6      	; 0x42b8 <__mulsf3_pse+0x82>
    42be:	98 3e       	cpi	r25, 0xE8	; 232
    42c0:	dc f3       	brlt	.-10     	; 0x42b8 <__mulsf3_pse+0x82>
    42c2:	86 95       	lsr	r24
    42c4:	77 95       	ror	r23
    42c6:	67 95       	ror	r22
    42c8:	b7 95       	ror	r27
    42ca:	f7 95       	ror	r31
    42cc:	e7 95       	ror	r30
    42ce:	9f 5f       	subi	r25, 0xFF	; 255
    42d0:	c1 f7       	brne	.-16     	; 0x42c2 <__mulsf3_pse+0x8c>
    42d2:	fe 2b       	or	r31, r30
    42d4:	88 0f       	add	r24, r24
    42d6:	91 1d       	adc	r25, r1
    42d8:	96 95       	lsr	r25
    42da:	87 95       	ror	r24
    42dc:	97 f9       	bld	r25, 7
    42de:	08 95       	ret

000042e0 <square>:
    42e0:	9b 01       	movw	r18, r22
    42e2:	ac 01       	movw	r20, r24
    42e4:	1d c9       	rjmp	.-3526   	; 0x3520 <__mulsf3>
    42e6:	4c df       	rcall	.-360    	; 0x4180 <__fp_pscA>
    42e8:	30 f0       	brcs	.+12     	; 0x42f6 <square+0x16>
    42ea:	51 df       	rcall	.-350    	; 0x418e <__fp_pscB>
    42ec:	20 f0       	brcs	.+8      	; 0x42f6 <square+0x16>
    42ee:	31 f4       	brne	.+12     	; 0x42fc <square+0x1c>
    42f0:	9f 3f       	cpi	r25, 0xFF	; 255
    42f2:	11 f4       	brne	.+4      	; 0x42f8 <square+0x18>
    42f4:	1e f4       	brtc	.+6      	; 0x42fc <square+0x1c>
    42f6:	1c cf       	rjmp	.-456    	; 0x4130 <__fp_nan>
    42f8:	0e f4       	brtc	.+2      	; 0x42fc <square+0x1c>
    42fa:	e0 95       	com	r30
    42fc:	e7 fb       	bst	r30, 7
    42fe:	12 cf       	rjmp	.-476    	; 0x4124 <__fp_inf>

00004300 <__addsf3x>:
    4300:	e9 2f       	mov	r30, r25
    4302:	5d df       	rcall	.-326    	; 0x41be <__fp_split3>
    4304:	80 f3       	brcs	.-32     	; 0x42e6 <square+0x6>
    4306:	ba 17       	cp	r27, r26
    4308:	62 07       	cpc	r22, r18
    430a:	73 07       	cpc	r23, r19
    430c:	84 07       	cpc	r24, r20
    430e:	95 07       	cpc	r25, r21
    4310:	18 f0       	brcs	.+6      	; 0x4318 <__addsf3x+0x18>
    4312:	71 f4       	brne	.+28     	; 0x4330 <__addsf3x+0x30>
    4314:	9e f5       	brtc	.+102    	; 0x437c <__addsf3x+0x7c>
    4316:	75 cf       	rjmp	.-278    	; 0x4202 <__fp_zero>
    4318:	0e f4       	brtc	.+2      	; 0x431c <__addsf3x+0x1c>
    431a:	e0 95       	com	r30
    431c:	0b 2e       	mov	r0, r27
    431e:	ba 2f       	mov	r27, r26
    4320:	a0 2d       	mov	r26, r0
    4322:	0b 01       	movw	r0, r22
    4324:	b9 01       	movw	r22, r18
    4326:	90 01       	movw	r18, r0
    4328:	0c 01       	movw	r0, r24
    432a:	ca 01       	movw	r24, r20
    432c:	a0 01       	movw	r20, r0
    432e:	11 24       	eor	r1, r1
    4330:	ff 27       	eor	r31, r31
    4332:	59 1b       	sub	r21, r25
    4334:	99 f0       	breq	.+38     	; 0x435c <__addsf3x+0x5c>
    4336:	59 3f       	cpi	r21, 0xF9	; 249
    4338:	50 f4       	brcc	.+20     	; 0x434e <__addsf3x+0x4e>
    433a:	50 3e       	cpi	r21, 0xE0	; 224
    433c:	68 f1       	brcs	.+90     	; 0x4398 <__addsf3x+0x98>
    433e:	1a 16       	cp	r1, r26
    4340:	f0 40       	sbci	r31, 0x00	; 0
    4342:	a2 2f       	mov	r26, r18
    4344:	23 2f       	mov	r18, r19
    4346:	34 2f       	mov	r19, r20
    4348:	44 27       	eor	r20, r20
    434a:	58 5f       	subi	r21, 0xF8	; 248
    434c:	f3 cf       	rjmp	.-26     	; 0x4334 <__addsf3x+0x34>
    434e:	46 95       	lsr	r20
    4350:	37 95       	ror	r19
    4352:	27 95       	ror	r18
    4354:	a7 95       	ror	r26
    4356:	f0 40       	sbci	r31, 0x00	; 0
    4358:	53 95       	inc	r21
    435a:	c9 f7       	brne	.-14     	; 0x434e <__addsf3x+0x4e>
    435c:	7e f4       	brtc	.+30     	; 0x437c <__addsf3x+0x7c>
    435e:	1f 16       	cp	r1, r31
    4360:	ba 0b       	sbc	r27, r26
    4362:	62 0b       	sbc	r22, r18
    4364:	73 0b       	sbc	r23, r19
    4366:	84 0b       	sbc	r24, r20
    4368:	ba f0       	brmi	.+46     	; 0x4398 <__addsf3x+0x98>
    436a:	91 50       	subi	r25, 0x01	; 1
    436c:	a1 f0       	breq	.+40     	; 0x4396 <__addsf3x+0x96>
    436e:	ff 0f       	add	r31, r31
    4370:	bb 1f       	adc	r27, r27
    4372:	66 1f       	adc	r22, r22
    4374:	77 1f       	adc	r23, r23
    4376:	88 1f       	adc	r24, r24
    4378:	c2 f7       	brpl	.-16     	; 0x436a <__addsf3x+0x6a>
    437a:	0e c0       	rjmp	.+28     	; 0x4398 <__addsf3x+0x98>
    437c:	ba 0f       	add	r27, r26
    437e:	62 1f       	adc	r22, r18
    4380:	73 1f       	adc	r23, r19
    4382:	84 1f       	adc	r24, r20
    4384:	48 f4       	brcc	.+18     	; 0x4398 <__addsf3x+0x98>
    4386:	87 95       	ror	r24
    4388:	77 95       	ror	r23
    438a:	67 95       	ror	r22
    438c:	b7 95       	ror	r27
    438e:	f7 95       	ror	r31
    4390:	9e 3f       	cpi	r25, 0xFE	; 254
    4392:	08 f0       	brcs	.+2      	; 0x4396 <__addsf3x+0x96>
    4394:	b3 cf       	rjmp	.-154    	; 0x42fc <square+0x1c>
    4396:	93 95       	inc	r25
    4398:	88 0f       	add	r24, r24
    439a:	08 f0       	brcs	.+2      	; 0x439e <__addsf3x+0x9e>
    439c:	99 27       	eor	r25, r25
    439e:	ee 0f       	add	r30, r30
    43a0:	97 95       	ror	r25
    43a2:	87 95       	ror	r24
    43a4:	08 95       	ret

000043a6 <__divsf3>:
    43a6:	63 de       	rcall	.-826    	; 0x406e <__divsf3x>
    43a8:	f9 ce       	rjmp	.-526    	; 0x419c <__fp_round>

000043aa <_exit>:
    43aa:	ff cf       	rjmp	.-2      	; 0x43aa <_exit>
