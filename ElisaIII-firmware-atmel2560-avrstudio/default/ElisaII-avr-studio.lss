
ElisaII-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800200  00004666  000046fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004666  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  00800322  00800322  0000481c  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  0000481c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  00006ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  00007185  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000dd9  00000000  00000000  000073ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003db9  00000000  00000000  00008186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000bf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004168  00000000  00000000  0000d579  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000640  00000000  00000000  000116e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000df3  00000000  00000000  00011d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ab0  00000000  00000000  00012b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000177  00000000  00000000  000145c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  0001473e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__vector_10>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__vector_13>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_25>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_29>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      80:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_32>
      84:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_33>
      88:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      8c:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_35>
      90:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      94:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      98:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      9c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a8:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_42>
      ac:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_43>
      b0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      b4:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_45>
      b8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      bc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      cc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      dc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e6 e6       	ldi	r30, 0x66	; 102
     12a:	f6 e4       	ldi	r31, 0x46	; 70
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a2 32       	cpi	r26, 0x22	; 34
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	14 e0       	ldi	r17, 0x04	; 4
     13a:	a2 e2       	ldi	r26, 0x22	; 34
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a3 31       	cpi	r26, 0x13	; 19
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <main>
     14c:	0c 94 32 23 	jmp	0x4664	; 0x4664 <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	86 60       	ori	r24, 0x06	; 6
     15c:	80 83       	st	Z, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     15e:	ac e7       	ldi	r26, 0x7C	; 124
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	8c 91       	ld	r24, X
     164:	80 64       	ori	r24, 0x40	; 64
     166:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     168:	80 81       	ld	r24, Z
     16a:	80 62       	ori	r24, 0x20	; 32
     16c:	80 83       	st	Z, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     16e:	ab e7       	ldi	r26, 0x7B	; 123
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	8c 91       	ld	r24, X
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     178:	80 81       	ld	r24, Z
     17a:	88 60       	ori	r24, 0x08	; 8
     17c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     184:	80 81       	ld	r24, Z
     186:	80 64       	ori	r24, 0x40	; 64
     188:	80 83       	st	Z, r24

}
     18a:	08 95       	ret

0000018c <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	0b b6       	in	r0, 0x3b	; 59
     196:	0f 92       	push	r0
     198:	11 24       	eor	r1, r1
     19a:	2f 93       	push	r18
     19c:	3f 93       	push	r19
     19e:	4f 93       	push	r20
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;
     1a8:	80 91 df 03 	lds	r24, 0x03DF
     1ac:	90 91 e0 03 	lds	r25, 0x03E0
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	90 93 e0 03 	sts	0x03E0, r25
     1b6:	80 93 df 03 	sts	0x03DF, r24

	int value = ADCL;			// must be read first!!
     1ba:	20 91 78 00 	lds	r18, 0x0078
     1be:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     1c0:	40 91 79 00 	lds	r20, 0x0079
     1c4:	94 2f       	mov	r25, r20
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	28 2b       	or	r18, r24
     1ca:	39 2b       	or	r19, r25

	// save the last data

	switch(adcSaveDataTo) {
     1cc:	80 91 61 03 	lds	r24, 0x0361
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <__vector_29+0x4a>
     1d4:	0d c1       	rjmp	.+538    	; 0x3f0 <__vector_29+0x264>
     1d6:	83 30       	cpi	r24, 0x03	; 3
     1d8:	08 f4       	brcc	.+2      	; 0x1dc <__vector_29+0x50>
     1da:	46 c0       	rjmp	.+140    	; 0x268 <__vector_29+0xdc>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	09 f4       	brne	.+2      	; 0x1e2 <__vector_29+0x56>
     1e0:	fa c0       	rjmp	.+500    	; 0x3d6 <__vector_29+0x24a>
     1e2:	84 30       	cpi	r24, 0x04	; 4
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <__vector_29+0x5c>
     1e6:	d0 c0       	rjmp	.+416    	; 0x388 <__vector_29+0x1fc>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     1e8:	80 91 62 03 	lds	r24, 0x0362
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <__vector_29+0x66>
     1f0:	b7 c0       	rjmp	.+366    	; 0x360 <__vector_29+0x1d4>
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	08 f0       	brcs	.+2      	; 0x1f8 <__vector_29+0x6c>
     1f6:	51 c0       	rjmp	.+162    	; 0x29a <__vector_29+0x10e>
     1f8:	88 23       	and	r24, r24
     1fa:	09 f0       	breq	.+2      	; 0x1fe <__vector_29+0x72>
     1fc:	8c c0       	rjmp	.+280    	; 0x316 <__vector_29+0x18a>

		case 0:
			currentAdChannel = currentProx>>1;
     1fe:	80 91 2c 03 	lds	r24, 0x032C
     202:	86 95       	lsr	r24
     204:	80 93 2b 03 	sts	0x032B, r24
				} else {
					PORTJ = (1 << ((currentProx-16)>>1));
				}
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
     208:	80 91 63 03 	lds	r24, 0x0363
     20c:	88 23       	and	r24, r24
     20e:	09 f0       	breq	.+2      	; 0x212 <__vector_29+0x86>
     210:	19 c1       	rjmp	.+562    	; 0x444 <__vector_29+0x2b8>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 62 03 	sts	0x0362, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     21e:	90 91 2b 03 	lds	r25, 0x032B
     222:	98 30       	cpi	r25, 0x08	; 8
     224:	08 f0       	brcs	.+2      	; 0x228 <__vector_29+0x9c>
     226:	6c c0       	rjmp	.+216    	; 0x300 <__vector_29+0x174>
		ADCSRB &= ~(1 << MUX5);
     228:	90 91 7b 00 	lds	r25, 0x007B
     22c:	97 7f       	andi	r25, 0xF7	; 247
     22e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
     232:	90 91 2b 03 	lds	r25, 0x032B
     236:	90 5c       	subi	r25, 0xC0	; 192
     238:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}


	if(adcSamplingState == 2) {
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	31 f4       	brne	.+12     	; 0x24c <__vector_29+0xc0>
		PORTA = 0x00;	// always turn off the pulses
     240:	12 b8       	out	0x02, r1	; 2
		PORTJ &= 0xF0;
     242:	80 91 05 01 	lds	r24, 0x0105
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 93 05 01 	sts	0x0105, r24
	}

//	PORTB |= (1 << 7);

}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	4f 91       	pop	r20
     256:	3f 91       	pop	r19
     258:	2f 91       	pop	r18
     25a:	0f 90       	pop	r0
     25c:	0b be       	out	0x3b, r0	; 59
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     268:	88 23       	and	r24, r24
     26a:	09 f0       	breq	.+2      	; 0x26e <__vector_29+0xe2>
     26c:	65 c0       	rjmp	.+202    	; 0x338 <__vector_29+0x1ac>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     26e:	80 91 2c 03 	lds	r24, 0x032C
     272:	8e 30       	cpi	r24, 0x0E	; 14
     274:	09 f4       	brne	.+2      	; 0x278 <__vector_29+0xec>
     276:	f4 c0       	rjmp	.+488    	; 0x460 <__vector_29+0x2d4>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     278:	e8 2f       	mov	r30, r24
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ef 5c       	subi	r30, 0xCF	; 207
     282:	fc 4f       	sbci	r31, 0xFC	; 252
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
				//currentProx = (currentProx+1)%24;
			}
			currentProx++;
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 2c 03 	sts	0x032C, r24
			if(currentProx > 23) {
     28e:	88 31       	cpi	r24, 0x18	; 24
     290:	08 f4       	brcc	.+2      	; 0x294 <__vector_29+0x108>
     292:	aa cf       	rjmp	.-172    	; 0x1e8 <__vector_29+0x5c>
				currentProx = 0;
     294:	10 92 2c 03 	sts	0x032C, r1
     298:	a7 cf       	rjmp	.-178    	; 0x1e8 <__vector_29+0x5c>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     29a:	83 30       	cpi	r24, 0x03	; 3
     29c:	09 f4       	brne	.+2      	; 0x2a0 <__vector_29+0x114>
     29e:	88 c0       	rjmp	.+272    	; 0x3b0 <__vector_29+0x224>
     2a0:	84 30       	cpi	r24, 0x04	; 4
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <__vector_29+0x11a>
     2a4:	bc cf       	rjmp	.-136    	; 0x21e <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:
			currentAdChannel = currentMotRightChannel;	
     2a6:	90 91 2e 03 	lds	r25, 0x032E
     2aa:	90 93 2b 03 	sts	0x032B, r25
			rightChannelPhase = rightMotorPhase;	
     2ae:	90 91 2f 03 	lds	r25, 0x032F
     2b2:	90 93 63 03 	sts	0x0363, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     2b6:	90 91 64 03 	lds	r25, 0x0364
     2ba:	99 23       	and	r25, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <__vector_29+0x134>
     2be:	bf c0       	rjmp	.+382    	; 0x43e <__vector_29+0x2b2>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     2c6:	10 92 62 03 	sts	0x0362, r1
			
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
     2ca:	20 91 2c 03 	lds	r18, 0x032C
     2ce:	2e 30       	cpi	r18, 0x0E	; 14
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <__vector_29+0x148>
     2d2:	c0 c0       	rjmp	.+384    	; 0x454 <__vector_29+0x2c8>
					measBattery=2;
					PORTC |= (1 << 6);	// sense enable on
				}

				if(currentProx & 0x01) {
     2d4:	82 2f       	mov	r24, r18
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	20 ff       	sbrs	r18, 0
     2da:	aa c0       	rjmp	.+340    	; 0x430 <__vector_29+0x2a4>
					if(currentProx < 16) {
     2dc:	20 31       	cpi	r18, 0x10	; 16
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__vector_29+0x156>
     2e0:	9b c0       	rjmp	.+310    	; 0x418 <__vector_29+0x28c>
						if(currentProx==14 && measBattery==1) {
     2e2:	2e 30       	cpi	r18, 0x0E	; 14
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_29+0x15c>
     2e6:	ce c0       	rjmp	.+412    	; 0x484 <__vector_29+0x2f8>
							measBattery=2;
							PORTC |= (1 << 6);	// sense enable on
						} else {
							//PORTA = 0x00;	// already done at the ISR beginning...
							PORTA = (1 << (currentProx>>1));
     2e8:	26 95       	lsr	r18
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_29+0x168>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <__vector_29+0x164>
     2f8:	82 b9       	out	0x02, r24	; 2
     2fa:	80 91 62 03 	lds	r24, 0x0362
     2fe:	8f cf       	rjmp	.-226    	; 0x21e <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     300:	90 91 7b 00 	lds	r25, 0x007B
     304:	98 60       	ori	r25, 0x08	; 8
     306:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
     30a:	90 91 2b 03 	lds	r25, 0x032B
     30e:	98 5c       	subi	r25, 0xC8	; 200
     310:	90 93 7c 00 	sts	0x007C, r25
     314:	93 cf       	rjmp	.-218    	; 0x23c <__vector_29+0xb0>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__vector_29+0x190>
     31a:	81 cf       	rjmp	.-254    	; 0x21e <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:
			currentAdChannel = currentMotLeftChannel;
     31c:	80 91 2d 03 	lds	r24, 0x032D
     320:	80 93 2b 03 	sts	0x032B, r24
			leftChannelPhase = leftMotorPhase;
     324:	80 91 30 03 	lds	r24, 0x0330
     328:	80 93 64 03 	sts	0x0364, r24
			adcSaveDataTo = SAVE_TO_PROX;
     32c:	10 92 61 03 	sts	0x0361, r1
			adcSamplingState = 2;
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	80 93 62 03 	sts	0x0362, r24
			break;
     336:	73 cf       	rjmp	.-282    	; 0x21e <__vector_29+0x92>
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	09 f0       	breq	.+2      	; 0x33e <__vector_29+0x1b2>
     33c:	55 cf       	rjmp	.-342    	; 0x1e8 <__vector_29+0x5c>
			//PORTA = 0x00;	// always turn off the pulses
			//PORTJ &= 0xF0;
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     33e:	80 91 6a 03 	lds	r24, 0x036A
     342:	90 91 6b 03 	lds	r25, 0x036B
     346:	82 0f       	add	r24, r18
     348:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	90 93 6b 03 	sts	0x036B, r25
     352:	80 93 6a 03 	sts	0x036A, r24
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     356:	80 91 62 03 	lds	r24, 0x0362
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	09 f0       	breq	.+2      	; 0x360 <__vector_29+0x1d4>
     35e:	49 cf       	rjmp	.-366    	; 0x1f2 <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:
			currentAdChannel = currentMotRightChannel;
     360:	80 91 2e 03 	lds	r24, 0x032E
     364:	80 93 2b 03 	sts	0x032B, r24
			rightChannelPhase = rightMotorPhase;
     368:	80 91 2f 03 	lds	r24, 0x032F
     36c:	80 93 63 03 	sts	0x0363, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     370:	80 91 64 03 	lds	r24, 0x0364
     374:	88 23       	and	r24, r24
     376:	09 f0       	breq	.+2      	; 0x37a <__vector_29+0x1ee>
     378:	69 c0       	rjmp	.+210    	; 0x44c <__vector_29+0x2c0>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	80 93 62 03 	sts	0x0362, r24
			break;
     386:	4b cf       	rjmp	.-362    	; 0x21e <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     388:	80 91 78 03 	lds	r24, 0x0378
     38c:	90 91 79 03 	lds	r25, 0x0379
     390:	82 0f       	add	r24, r18
     392:	93 1f       	adc	r25, r19
     394:	90 93 79 03 	sts	0x0379, r25
     398:	80 93 78 03 	sts	0x0378, r24
			num_lvel_samples_avg++;
     39c:	80 91 70 03 	lds	r24, 0x0370
     3a0:	90 91 71 03 	lds	r25, 0x0371
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 71 03 	sts	0x0371, r25
     3aa:	80 93 70 03 	sts	0x0370, r24
			break;
     3ae:	1c cf       	rjmp	.-456    	; 0x1e8 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:
			currentAdChannel = currentMotLeftChannel;
     3b0:	80 91 2d 03 	lds	r24, 0x032D
     3b4:	80 93 2b 03 	sts	0x032B, r24
			leftChannelPhase = leftMotorPhase;
     3b8:	80 91 30 03 	lds	r24, 0x0330
     3bc:	80 93 64 03 	sts	0x0364, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     3c0:	80 91 63 03 	lds	r24, 0x0363
     3c4:	88 23       	and	r24, r24
     3c6:	b9 f5       	brne	.+110    	; 0x436 <__vector_29+0x2aa>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 61 03 	sts	0x0361, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	80 93 62 03 	sts	0x0362, r24
			break;
     3d4:	24 cf       	rjmp	.-440    	; 0x21e <__vector_29+0x92>
			right_vel_sum += value;
			num_rvel_samples_avg++;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     3d6:	80 91 68 03 	lds	r24, 0x0368
     3da:	90 91 69 03 	lds	r25, 0x0369
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	90 93 69 03 	sts	0x0369, r25
     3ea:	80 93 68 03 	sts	0x0368, r24
			break;
     3ee:	fc ce       	rjmp	.-520    	; 0x1e8 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     3f0:	80 91 7c 03 	lds	r24, 0x037C
     3f4:	90 91 7d 03 	lds	r25, 0x037D
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
     3fc:	90 93 7d 03 	sts	0x037D, r25
     400:	80 93 7c 03 	sts	0x037C, r24
			num_rvel_samples_avg++;
     404:	80 91 74 03 	lds	r24, 0x0374
     408:	90 91 75 03 	lds	r25, 0x0375
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	90 93 75 03 	sts	0x0375, r25
     412:	80 93 74 03 	sts	0x0374, r24
			break;
     416:	e8 ce       	rjmp	.-560    	; 0x1e8 <__vector_29+0x5c>
							//PORTA = 0x00;	// already done at the ISR beginning...
							PORTA = (1 << (currentProx>>1));
							//PORTA = (1 << currentAdChannel);
						}
					} else {
						PORTJ = (1 << ((currentProx-16)>>1));
     418:	40 97       	sbiw	r24, 0x10	; 16
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__vector_29+0x29c>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__vector_29+0x298>
     42c:	20 93 05 01 	sts	0x0105, r18
     430:	80 91 62 03 	lds	r24, 0x0362
     434:	f4 ce       	rjmp	.-536    	; 0x21e <__vector_29+0x92>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	80 93 61 03 	sts	0x0361, r24
     43c:	c8 cf       	rjmp	.-112    	; 0x3ce <__vector_29+0x242>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     43e:	80 93 61 03 	sts	0x0361, r24
     442:	41 cf       	rjmp	.-382    	; 0x2c6 <__vector_29+0x13a>
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 61 03 	sts	0x0361, r24
     44a:	e6 ce       	rjmp	.-564    	; 0x218 <__vector_29+0x8c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	80 93 61 03 	sts	0x0361, r24
     452:	96 cf       	rjmp	.-212    	; 0x380 <__vector_29+0x1f4>
			
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
     454:	80 91 67 03 	lds	r24, 0x0367
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	79 f0       	breq	.+30     	; 0x47a <__vector_29+0x2ee>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	df ce       	rjmp	.-578    	; 0x21e <__vector_29+0x92>
	// save the last data

	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     460:	90 91 67 03 	lds	r25, 0x0367
     464:	92 30       	cpi	r25, 0x02	; 2
     466:	09 f0       	breq	.+2      	; 0x46a <__vector_29+0x2de>
     468:	07 cf       	rjmp	.-498    	; 0x278 <__vector_29+0xec>
				batteryLevel = value;
     46a:	30 93 66 03 	sts	0x0366, r19
     46e:	20 93 65 03 	sts	0x0365, r18
				measBattery = 0;
     472:	10 92 67 03 	sts	0x0367, r1
				PORTC &= ~(1 << 6);
     476:	46 98       	cbi	0x08, 6	; 8
     478:	07 cf       	rjmp	.-498    	; 0x288 <__vector_29+0xfc>
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	80 93 67 03 	sts	0x0367, r24
					PORTC |= (1 << 6);	// sense enable on
     480:	46 9a       	sbi	0x08, 6	; 8
     482:	28 cf       	rjmp	.-432    	; 0x2d4 <__vector_29+0x148>
				}

				if(currentProx & 0x01) {
					if(currentProx < 16) {
						if(currentProx==14 && measBattery==1) {
     484:	80 91 67 03 	lds	r24, 0x0367
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	09 f0       	breq	.+2      	; 0x48e <__vector_29+0x302>
     48c:	2d cf       	rjmp	.-422    	; 0x2e8 <__vector_29+0x15c>
							measBattery=2;
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 93 67 03 	sts	0x0367, r24
							PORTC |= (1 << 6);	// sense enable on
     494:	46 9a       	sbi	0x08, 6	; 8
     496:	80 91 62 03 	lds	r24, 0x0362
     49a:	c1 ce       	rjmp	.-638    	; 0x21e <__vector_29+0x92>

0000049c <initPwm>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
     49c:	e0 e8       	ldi	r30, 0x80	; 128
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	89 6a       	ori	r24, 0xA9	; 169
     4a4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
     4a6:	e1 e8       	ldi	r30, 0x81	; 129
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	89 60       	ori	r24, 0x09	; 9
     4ae:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
     4b0:	80 91 0e 02 	lds	r24, 0x020E
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 89 00 	sts	0x0089, r25
     4ba:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
     4be:	80 91 0f 02 	lds	r24, 0x020F
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 8b 00 	sts	0x008B, r25
     4c8:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
     4cc:	80 91 10 02 	lds	r24, 0x0210
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	90 93 8d 00 	sts	0x008D, r25
     4d6:	80 93 8c 00 	sts	0x008C, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     4da:	e0 e9       	ldi	r30, 0x90	; 144
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	83 68       	ori	r24, 0x83	; 131
     4e2:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     4e4:	80 81       	ld	r24, Z
     4e6:	83 60       	ori	r24, 0x03	; 3
     4e8:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     4ea:	a1 e9       	ldi	r26, 0x91	; 145
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	8c 91       	ld	r24, X
     4f0:	8b 60       	ori	r24, 0x0B	; 11
     4f2:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     4f4:	80 91 84 03 	lds	r24, 0x0384
     4f8:	90 91 85 03 	lds	r25, 0x0385
     4fc:	90 93 99 00 	sts	0x0099, r25
     500:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     504:	10 92 9b 00 	sts	0x009B, r1
     508:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     50c:	a1 e7       	ldi	r26, 0x71	; 113
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	8c 91       	ld	r24, X
     512:	81 60       	ori	r24, 0x01	; 1
     514:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     516:	80 81       	ld	r24, Z
     518:	8f 75       	andi	r24, 0x5F	; 95
     51a:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     51c:	8e b1       	in	r24, 0x0e	; 14
     51e:	87 7e       	andi	r24, 0xE7	; 231
     520:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     522:	e0 ea       	ldi	r30, 0xA0	; 160
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	83 68       	ori	r24, 0x83	; 131
     52a:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     52c:	a1 ea       	ldi	r26, 0xA1	; 161
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	8c 91       	ld	r24, X
     532:	8b 60       	ori	r24, 0x0B	; 11
     534:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     536:	80 91 88 03 	lds	r24, 0x0388
     53a:	90 91 89 03 	lds	r25, 0x0389
     53e:	90 93 a9 00 	sts	0x00A9, r25
     542:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     546:	10 92 ab 00 	sts	0x00AB, r1
     54a:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     54e:	a2 e7       	ldi	r26, 0x72	; 114
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	8c 91       	ld	r24, X
     554:	81 60       	ori	r24, 0x01	; 1
     556:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     558:	80 81       	ld	r24, Z
     55a:	8f 75       	andi	r24, 0x5F	; 95
     55c:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     55e:	e2 e0       	ldi	r30, 0x02	; 2
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	80 81       	ld	r24, Z
     564:	87 7e       	andi	r24, 0xE7	; 231
     566:	80 83       	st	Z, r24


}
     568:	08 95       	ret

0000056a <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
     578:	af 93       	push	r26
     57a:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	leftMotorPhase = ACTIVE_PHASE;
     57c:	10 92 30 03 	sts	0x0330, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     580:	80 91 68 03 	lds	r24, 0x0368
     584:	90 91 69 03 	lds	r25, 0x0369
     588:	90 93 6d 03 	sts	0x036D, r25
     58c:	80 93 6c 03 	sts	0x036C, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     590:	80 91 70 03 	lds	r24, 0x0370
     594:	90 91 71 03 	lds	r25, 0x0371
     598:	90 93 73 03 	sts	0x0373, r25
     59c:	80 93 72 03 	sts	0x0372, r24
	last_left_vel_sum = left_vel_sum;
     5a0:	80 91 78 03 	lds	r24, 0x0378
     5a4:	90 91 79 03 	lds	r25, 0x0379
     5a8:	90 93 7b 03 	sts	0x037B, r25
     5ac:	80 93 7a 03 	sts	0x037A, r24

	// reset sampling variables
	left_current_avg = 0;
     5b0:	10 92 69 03 	sts	0x0369, r1
     5b4:	10 92 68 03 	sts	0x0368, r1
	num_lvel_samples_avg = 0;
     5b8:	10 92 71 03 	sts	0x0371, r1
     5bc:	10 92 70 03 	sts	0x0370, r1
	left_vel_sum = 0;
     5c0:	10 92 79 03 	sts	0x0379, r1
     5c4:	10 92 78 03 	sts	0x0378, r1

	// start control
	compute_left_vel = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 b4 03 	sts	0x03B4, r24
	start_control = 1;
     5ce:	80 93 b6 03 	sts	0x03B6, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     5d2:	80 91 88 03 	lds	r24, 0x0388
     5d6:	90 91 89 03 	lds	r25, 0x0389
     5da:	a0 91 8a 03 	lds	r26, 0x038A
     5de:	b0 91 8b 03 	lds	r27, 0x038B
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	a1 05       	cpc	r26, r1
     5e6:	b1 05       	cpc	r27, r1
     5e8:	29 f0       	breq	.+10     	; 0x5f4 <__vector_45+0x8a>
//		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
//		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     5ea:	18 16       	cp	r1, r24
     5ec:	19 06       	cpc	r1, r25
     5ee:	1a 06       	cpc	r1, r26
     5f0:	1b 06       	cpc	r1, r27
     5f2:	64 f4       	brge	.+24     	; 0x60c <__vector_45+0xa2>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     5f4:	8f e0       	ldi	r24, 0x0F	; 15
     5f6:	80 93 2d 03 	sts	0x032D, r24
//		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti
//		PORTH &= ~(1 << 4);				// output to 0
//		TCCR4A |= (1 << COM4A1);		// enable OCA
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     60c:	8e e0       	ldi	r24, 0x0E	; 14
     60e:	80 93 2d 03 	sts	0x032D, r24
     612:	f3 cf       	rjmp	.-26     	; 0x5fa <__vector_45+0x90>

00000614 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	80 93 30 03 	sts	0x0330, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     626:	8e e0       	ldi	r24, 0x0E	; 14
     628:	80 93 2d 03 	sts	0x032D, r24

//	PORTB |= (1 << 6);

}
     62c:	8f 91       	pop	r24
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 30 03 	sts	0x0330, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     64a:	8f e0       	ldi	r24, 0x0F	; 15
     64c:	80 93 2d 03 	sts	0x032D, r24

//	PORTB |= (1 << 6);

}
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
     666:	2f 93       	push	r18
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	rightMotorPhase = ACTIVE_PHASE;
     670:	10 92 2f 03 	sts	0x032F, r1
	sendAdcValues = 1;
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	20 93 c5 03 	sts	0x03C5, r18

	// copy sampling variables
	last_right_current = right_current_avg;
     67a:	80 91 6a 03 	lds	r24, 0x036A
     67e:	90 91 6b 03 	lds	r25, 0x036B
     682:	90 93 6f 03 	sts	0x036F, r25
     686:	80 93 6e 03 	sts	0x036E, r24
	last_right_vel_sum = right_vel_sum;
     68a:	80 91 7c 03 	lds	r24, 0x037C
     68e:	90 91 7d 03 	lds	r25, 0x037D
     692:	90 93 7f 03 	sts	0x037F, r25
     696:	80 93 7e 03 	sts	0x037E, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     69a:	80 91 74 03 	lds	r24, 0x0374
     69e:	90 91 75 03 	lds	r25, 0x0375
     6a2:	90 93 77 03 	sts	0x0377, r25
     6a6:	80 93 76 03 	sts	0x0376, r24

	// reset sampling variables
	right_current_avg = 0;
     6aa:	10 92 6b 03 	sts	0x036B, r1
     6ae:	10 92 6a 03 	sts	0x036A, r1
	right_vel_sum = 0;
     6b2:	10 92 7d 03 	sts	0x037D, r1
     6b6:	10 92 7c 03 	sts	0x037C, r1
	num_rvel_samples_avg = 0;
     6ba:	10 92 75 03 	sts	0x0375, r1
     6be:	10 92 74 03 	sts	0x0374, r1

	// start control
	compute_right_vel = 1;
     6c2:	20 93 b5 03 	sts	0x03B5, r18

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     6c6:	80 91 84 03 	lds	r24, 0x0384
     6ca:	90 91 85 03 	lds	r25, 0x0385
     6ce:	a0 91 86 03 	lds	r26, 0x0386
     6d2:	b0 91 87 03 	lds	r27, 0x0387
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	29 f0       	breq	.+10     	; 0x6e8 <__vector_35+0x8c>
//		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
//		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     6de:	18 16       	cp	r1, r24
     6e0:	19 06       	cpc	r1, r25
     6e2:	1a 06       	cpc	r1, r26
     6e4:	1b 06       	cpc	r1, r27
     6e6:	6c f4       	brge	.+26     	; 0x702 <__vector_35+0xa6>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     6e8:	8d e0       	ldi	r24, 0x0D	; 13
     6ea:	80 93 2e 03 	sts	0x032E, r24
//		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti
//		PORTE &= ~(1 << 4);				// output to 0
//		TCCR3A |= (1 << COM3A1);		// enable OCA
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     702:	8c e0       	ldi	r24, 0x0C	; 12
     704:	80 93 2e 03 	sts	0x032E, r24
     708:	f2 cf       	rjmp	.-28     	; 0x6ee <__vector_35+0x92>

0000070a <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     70a:	1f 92       	push	r1
     70c:	0f 92       	push	r0
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	0f 92       	push	r0
     712:	11 24       	eor	r1, r1
     714:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 2f 03 	sts	0x032F, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     71c:	8c e0       	ldi	r24, 0x0C	; 12
     71e:	80 93 2e 03 	sts	0x032E, r24

//	PORTB |= (1 << 6);
}
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 2f 03 	sts	0x032F, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     740:	8d e0       	ldi	r24, 0x0D	; 13
     742:	80 93 2e 03 	sts	0x032E, r24

//	PORTB |= (1 << 6);
}
     746:	8f 91       	pop	r24
     748:	0f 90       	pop	r0
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	0f 90       	pop	r0
     74e:	1f 90       	pop	r1
     750:	18 95       	reti

00000752 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	00 d0       	rcall	.+0      	; 0x758 <readAccelXYZ+0x6>
     758:	00 d0       	rcall	.+0      	; 0x75a <readAccelXYZ+0x8>
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {
     75e:	80 91 c9 03 	lds	r24, 0x03C9
     762:	88 23       	and	r24, r24
     764:	c1 f0       	breq	.+48     	; 0x796 <readAccelXYZ+0x44>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis


	} else if(useAccel == USE_ADXL345) {	
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	09 f4       	brne	.+2      	; 0x76c <readAccelXYZ+0x1a>
     76a:	54 c0       	rjmp	.+168    	; 0x814 <readAccelXYZ+0xc2>
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis

	} else {

		accX = 0;
     76c:	10 92 cb 03 	sts	0x03CB, r1
     770:	10 92 ca 03 	sts	0x03CA, r1
		accY = 0;
     774:	10 92 cd 03 	sts	0x03CD, r1
     778:	10 92 cc 03 	sts	0x03CC, r1
		accZ = 0;
     77c:	10 92 cf 03 	sts	0x03CF, r1
     780:	10 92 ce 03 	sts	0x03CE, r1

	}

}
     784:	26 96       	adiw	r28, 0x06	; 6
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	cf 91       	pop	r28
     792:	df 91       	pop	r29
     794:	08 95       	ret
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     796:	80 91 13 02 	lds	r24, 0x0213
     79a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
		i2c_write(0x00);							// sends address to read from
     79e:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     7a0:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     7a4:	80 91 13 02 	lds	r24, 0x0213
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
     7ae:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     7b8:	8a 83       	std	Y+2, r24	; 0x02
     7ba:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     7c4:	8c 83       	std	Y+4, r24	; 0x04
     7c6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     7ca:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
     7cc:	0e 94 02 18 	call	0x3004	; 0x3004 <i2c_readNak>
     7d0:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
     7d2:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>

		// 16 bits values in 2's complement
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     7d6:	3a 81       	ldd	r19, Y+2	; 0x02
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	82 2b       	or	r24, r18
     7e0:	93 2b       	or	r25, r19
     7e2:	90 93 cb 03 	sts	0x03CB, r25
     7e6:	80 93 ca 03 	sts	0x03CA, r24
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     7ea:	3c 81       	ldd	r19, Y+4	; 0x04
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	82 2b       	or	r24, r18
     7f4:	93 2b       	or	r25, r19
     7f6:	90 93 cd 03 	sts	0x03CD, r25
     7fa:	80 93 cc 03 	sts	0x03CC, r24
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     7fe:	3e 81       	ldd	r19, Y+6	; 0x06
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	8d 81       	ldd	r24, Y+5	; 0x05
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	82 2b       	or	r24, r18
     808:	93 2b       	or	r25, r19
     80a:	90 93 cf 03 	sts	0x03CF, r25
     80e:	80 93 ce 03 	sts	0x03CE, r24
     812:	b8 cf       	rjmp	.-144    	; 0x784 <readAccelXYZ+0x32>


	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     814:	80 91 13 02 	lds	r24, 0x0213
     818:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
		i2c_write(0x32);							// sends address to read from
     81c:	82 e3       	ldi	r24, 0x32	; 50
     81e:	c0 cf       	rjmp	.-128    	; 0x7a0 <readAccelXYZ+0x4e>

00000820 <readAccelXY>:

	}

}

void readAccelXY() {
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	0f 92       	push	r0
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[4], ret;


	if(useAccel == USE_MMAX7455L) {
     830:	80 91 c9 03 	lds	r24, 0x03C9
     834:	88 23       	and	r24, r24
     836:	91 f0       	breq	.+36     	; 0x85c <readAccelXY+0x3c>
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

		//accX = ((((buff[1]&0x02)<<6) | (buff[1]&0x01)) << 8) | buff[0];    // X axis
		//accY = ((((buff[3]&0x02)<<6) | (buff[1]&0x01)) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	09 f4       	brne	.+2      	; 0x83e <readAccelXY+0x1e>
     83c:	45 c0       	rjmp	.+138    	; 0x8c8 <readAccelXY+0xa8>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else {

		accX = 0;
     83e:	10 92 cb 03 	sts	0x03CB, r1
     842:	10 92 ca 03 	sts	0x03CA, r1
		accY = 0;
     846:	10 92 cd 03 	sts	0x03CD, r1
     84a:	10 92 cc 03 	sts	0x03CC, r1

	}


}
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     85c:	80 91 13 02 	lds	r24, 0x0213
     860:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
		i2c_write(0x00);							// sends address to read from
     864:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     866:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     86a:	80 91 13 02 	lds	r24, 0x0213
     86e:	8f 5f       	subi	r24, 0xFF	; 255
     870:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
     874:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     878:	08 2f       	mov	r16, r24
     87a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     87e:	f8 2e       	mov	r15, r24
     880:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <i2c_readAck>
     884:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
     886:	0e 94 02 18 	call	0x3004	; 0x3004 <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>

		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     890:	5f 2d       	mov	r21, r15
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	20 2f       	mov	r18, r16
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	24 2b       	or	r18, r20
     89a:	35 2b       	or	r19, r21
     89c:	30 93 cb 03 	sts	0x03CB, r19
     8a0:	20 93 ca 03 	sts	0x03CA, r18
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	38 2f       	mov	r19, r24
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	81 2f       	mov	r24, r17
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	82 2b       	or	r24, r18
     8b0:	93 2b       	or	r25, r19
     8b2:	90 93 cd 03 	sts	0x03CD, r25
     8b6:	80 93 cc 03 	sts	0x03CC, r24
		accY = 0;

	}


}
     8ba:	0f 90       	pop	r0
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	08 95       	ret
		//accY = ((((buff[3]&0x02)<<6) | (buff[1]&0x01)) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     8c8:	80 91 13 02 	lds	r24, 0x0213
     8cc:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
		i2c_write(0x32);							// sends address to read from
     8d0:	82 e3       	ldi	r24, 0x32	; 50
     8d2:	c9 cf       	rjmp	.-110    	; 0x866 <readAccelXY+0x46>

000008d4 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8d4:	80 91 13 02 	lds	r24, 0x0213
     8d8:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     8dc:	88 23       	and	r24, r24
     8de:	51 f4       	brne	.+20     	; 0x8f4 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     8e0:	86 e1       	ldi	r24, 0x16	; 22
     8e2:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     8e6:	85 e4       	ldi	r24, 0x45	; 69
     8e8:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     8ec:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	return 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0

}
     8f2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     8f4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
		return 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret

000008fc <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8fc:	80 91 13 02 	lds	r24, 0x0213
     900:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     904:	88 23       	and	r24, r24
     906:	31 f5       	brne	.+76     	; 0x954 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     908:	8d e2       	ldi	r24, 0x2D	; 45
     90a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     90e:	88 e0       	ldi	r24, 0x08	; 8
     910:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     914:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     918:	80 91 13 02 	lds	r24, 0x0213
     91c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     920:	88 23       	and	r24, r24
     922:	c1 f4       	brne	.+48     	; 0x954 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     924:	81 e3       	ldi	r24, 0x31	; 49
     926:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     930:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     934:	80 91 13 02 	lds	r24, 0x0213
     938:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     93c:	88 23       	and	r24, r24
     93e:	51 f4       	brne	.+20     	; 0x954 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     940:	8c e2       	ldi	r24, 0x2C	; 44
     942:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     94c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	return 0;
     950:	80 e0       	ldi	r24, 0x00	; 0

}
     952:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     954:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
		return 1;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	08 95       	ret

0000095c <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     95c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     960:	80 91 13 02 	lds	r24, 0x0213
     964:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     968:	88 23       	and	r24, r24
     96a:	49 f4       	brne	.+18     	; 0x97e <initI2C+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     96c:	86 e1       	ldi	r24, 0x16	; 22
     96e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     972:	85 e4       	ldi	r24, 0x45	; 69
     974:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     978:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
     97c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     97e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     982:	86 ea       	ldi	r24, 0xA6	; 166
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 14 02 	sts	0x0214, r25
     98a:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     98e:	86 ea       	ldi	r24, 0xA6	; 166
     990:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     994:	88 23       	and	r24, r24
     996:	41 f5       	brne	.+80     	; 0x9e8 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     998:	8d e2       	ldi	r24, 0x2D	; 45
     99a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9a4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9a8:	80 91 13 02 	lds	r24, 0x0213
     9ac:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9b0:	88 23       	and	r24, r24
     9b2:	d1 f4       	brne	.+52     	; 0x9e8 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     9b4:	81 e3       	ldi	r24, 0x31	; 49
     9b6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9c0:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9c4:	80 91 13 02 	lds	r24, 0x0213
     9c8:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9cc:	88 23       	and	r24, r24
     9ce:	61 f4       	brne	.+24     	; 0x9e8 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     9d0:	8c e2       	ldi	r24, 0x2C	; 44
     9d2:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     9d6:	89 e0       	ldi	r24, 0x09	; 9
     9d8:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9dc:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 c9 03 	sts	0x03C9, r24
     9e6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     9e8:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	80 93 c9 03 	sts	0x03C9, r24
     9f2:	08 95       	ret

000009f4 <calibrateAccelerometer>:
		}
	}

}

void calibrateAccelerometer() {
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29

	int j=0;
	accOffsetX = 0;
     9f8:	10 92 d7 03 	sts	0x03D7, r1
     9fc:	10 92 d6 03 	sts	0x03D6, r1
	accOffsetY = 0;
     a00:	10 92 d9 03 	sts	0x03D9, r1
     a04:	10 92 d8 03 	sts	0x03D8, r1
	accOffsetZ = 0;
     a08:	10 92 db 03 	sts	0x03DB, r1
     a0c:	10 92 da 03 	sts	0x03DA, r1
     a10:	c2 e3       	ldi	r28, 0x32	; 50
     a12:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     a14:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>
		accOffsetX += accX;
     a18:	80 91 ca 03 	lds	r24, 0x03CA
     a1c:	90 91 cb 03 	lds	r25, 0x03CB
     a20:	20 91 d6 03 	lds	r18, 0x03D6
     a24:	30 91 d7 03 	lds	r19, 0x03D7
     a28:	82 0f       	add	r24, r18
     a2a:	93 1f       	adc	r25, r19
     a2c:	90 93 d7 03 	sts	0x03D7, r25
     a30:	80 93 d6 03 	sts	0x03D6, r24
		accOffsetY += accY;
     a34:	e0 91 cc 03 	lds	r30, 0x03CC
     a38:	f0 91 cd 03 	lds	r31, 0x03CD
     a3c:	20 91 d8 03 	lds	r18, 0x03D8
     a40:	30 91 d9 03 	lds	r19, 0x03D9
     a44:	e2 0f       	add	r30, r18
     a46:	f3 1f       	adc	r31, r19
     a48:	f0 93 d9 03 	sts	0x03D9, r31
     a4c:	e0 93 d8 03 	sts	0x03D8, r30
		accOffsetZ += accZ;
     a50:	20 91 ce 03 	lds	r18, 0x03CE
     a54:	30 91 cf 03 	lds	r19, 0x03CF
     a58:	40 91 da 03 	lds	r20, 0x03DA
     a5c:	50 91 db 03 	lds	r21, 0x03DB
     a60:	24 0f       	add	r18, r20
     a62:	35 1f       	adc	r19, r21
     a64:	30 93 db 03 	sts	0x03DB, r19
     a68:	20 93 da 03 	sts	0x03DA, r18
     a6c:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     a6e:	91 f6       	brne	.-92     	; 0xa14 <calibrateAccelerometer+0x20>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     a70:	c2 e3       	ldi	r28, 0x32	; 50
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	be 01       	movw	r22, r28
     a76:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     a7a:	70 93 d7 03 	sts	0x03D7, r23
     a7e:	60 93 d6 03 	sts	0x03D6, r22
	accOffsetY = accOffsetY/50;
     a82:	cf 01       	movw	r24, r30
     a84:	be 01       	movw	r22, r28
     a86:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     a8a:	70 93 d9 03 	sts	0x03D9, r23
     a8e:	60 93 d8 03 	sts	0x03D8, r22
	accOffsetZ = accOffsetZ/50;
     a92:	c9 01       	movw	r24, r18
     a94:	be 01       	movw	r22, r28
     a96:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     a9a:	70 93 db 03 	sts	0x03DB, r23
     a9e:	60 93 da 03 	sts	0x03DA, r22

}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <computeAngle>:

void computeAngle() {
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29

	readAccelXY();
     ab4:	0e 94 10 04 	call	0x820	; 0x820 <readAccelXY>

	if(useAccel == USE_MMAX7455L) {
     ab8:	80 91 c9 03 	lds	r24, 0x03C9
     abc:	88 23       	and	r24, r24
     abe:	09 f0       	breq	.+2      	; 0xac2 <computeAngle+0x1a>
     ac0:	55 c0       	rjmp	.+170    	; 0xb6c <computeAngle+0xc4>
		if(accX > 511) {
     ac2:	60 91 ca 03 	lds	r22, 0x03CA
     ac6:	70 91 cb 03 	lds	r23, 0x03CB
     aca:	22 e0       	ldi	r18, 0x02	; 2
     acc:	60 30       	cpi	r22, 0x00	; 0
     ace:	72 07       	cpc	r23, r18
     ad0:	34 f0       	brlt	.+12     	; 0xade <computeAngle+0x36>
			accX -= 1023;
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	73 40       	sbci	r23, 0x03	; 3
     ad6:	70 93 cb 03 	sts	0x03CB, r23
     ada:	60 93 ca 03 	sts	0x03CA, r22
		}
		if(accY > 511) {
     ade:	c0 91 cc 03 	lds	r28, 0x03CC
     ae2:	d0 91 cd 03 	lds	r29, 0x03CD
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	c0 30       	cpi	r28, 0x00	; 0
     aea:	d8 07       	cpc	r29, r24
     aec:	34 f0       	brlt	.+12     	; 0xafa <computeAngle+0x52>
			accY -= 1023;
     aee:	cf 5f       	subi	r28, 0xFF	; 255
     af0:	d3 40       	sbci	r29, 0x03	; 3
     af2:	d0 93 cd 03 	sts	0x03CD, r29
     af6:	c0 93 cc 03 	sts	0x03CC, r28
		}
		if(accZ > 511) {
     afa:	80 91 ce 03 	lds	r24, 0x03CE
     afe:	90 91 cf 03 	lds	r25, 0x03CF
     b02:	22 e0       	ldi	r18, 0x02	; 2
     b04:	80 30       	cpi	r24, 0x00	; 0
     b06:	92 07       	cpc	r25, r18
     b08:	e4 f5       	brge	.+120    	; 0xb82 <computeAngle+0xda>
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     b0a:	88 27       	eor	r24, r24
     b0c:	77 fd       	sbrc	r23, 7
     b0e:	80 95       	com	r24
     b10:	98 2f       	mov	r25, r24
     b12:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
     b16:	7b 01       	movw	r14, r22
     b18:	8c 01       	movw	r16, r24
     b1a:	be 01       	movw	r22, r28
     b1c:	88 27       	eor	r24, r24
     b1e:	77 fd       	sbrc	r23, 7
     b20:	80 95       	com	r24
     b22:	98 2f       	mov	r25, r24
     b24:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	c8 01       	movw	r24, r16
     b2e:	b7 01       	movw	r22, r14
     b30:	0e 94 36 21 	call	0x426c	; 0x426c <atan2>
     b34:	21 ee       	ldi	r18, 0xE1	; 225
     b36:	3e e2       	ldi	r19, 0x2E	; 46
     b38:	45 e6       	ldi	r20, 0x65	; 101
     b3a:	52 e4       	ldi	r21, 0x42	; 66
     b3c:	0e 94 ed 1b 	call	0x37da	; 0x37da <__mulsf3>
     b40:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
     b44:	9b 01       	movw	r18, r22
     b46:	70 93 dd 03 	sts	0x03DD, r23
     b4a:	60 93 dc 03 	sts	0x03DC, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     b4e:	77 ff       	sbrs	r23, 7
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <computeAngle+0xb6>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     b52:	28 59       	subi	r18, 0x98	; 152
     b54:	3e 4f       	sbci	r19, 0xFE	; 254
     b56:	30 93 dd 03 	sts	0x03DD, r19
     b5a:	20 93 dc 03 	sts	0x03DC, r18
	}

}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
		}
	} else if(useAccel == USE_ADXL345) {
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	81 f0       	breq	.+32     	; 0xb90 <computeAngle+0xe8>
     b70:	60 91 ca 03 	lds	r22, 0x03CA
     b74:	70 91 cb 03 	lds	r23, 0x03CB
     b78:	c0 91 cc 03 	lds	r28, 0x03CC
     b7c:	d0 91 cd 03 	lds	r29, 0x03CD
     b80:	c4 cf       	rjmp	.-120    	; 0xb0a <computeAngle+0x62>
		}
		if(accY > 511) {
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	93 40       	sbci	r25, 0x03	; 3
     b86:	90 93 cf 03 	sts	0x03CF, r25
     b8a:	80 93 ce 03 	sts	0x03CE, r24
     b8e:	bd cf       	rjmp	.-134    	; 0xb0a <computeAngle+0x62>
		}
	} else if(useAccel == USE_ADXL345) {
		accX = accX-accOffsetX;
     b90:	60 91 ca 03 	lds	r22, 0x03CA
     b94:	70 91 cb 03 	lds	r23, 0x03CB
     b98:	80 91 d6 03 	lds	r24, 0x03D6
     b9c:	90 91 d7 03 	lds	r25, 0x03D7
     ba0:	68 1b       	sub	r22, r24
     ba2:	79 0b       	sbc	r23, r25
     ba4:	70 93 cb 03 	sts	0x03CB, r23
     ba8:	60 93 ca 03 	sts	0x03CA, r22
		accY = accY-accOffsetY;
     bac:	c0 91 cc 03 	lds	r28, 0x03CC
     bb0:	d0 91 cd 03 	lds	r29, 0x03CD
     bb4:	80 91 d8 03 	lds	r24, 0x03D8
     bb8:	90 91 d9 03 	lds	r25, 0x03D9
     bbc:	c8 1b       	sub	r28, r24
     bbe:	d9 0b       	sbc	r29, r25
     bc0:	d0 93 cd 03 	sts	0x03CD, r29
     bc4:	c0 93 cc 03 	sts	0x03CC, r28
     bc8:	a0 cf       	rjmp	.-192    	; 0xb0a <computeAngle+0x62>

00000bca <initPeripherals>:

}

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     bca:	f8 94       	cli

	initPortsIO();
     bcc:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     bd0:	80 91 7a 00 	lds	r24, 0x007A
     bd4:	86 60       	ori	r24, 0x06	; 6
     bd6:	80 93 7a 00 	sts	0x007A, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     bda:	80 91 7c 00 	lds	r24, 0x007C
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     be4:	80 91 7a 00 	lds	r24, 0x007A
     be8:	80 62       	ori	r24, 0x20	; 32
     bea:	80 93 7a 00 	sts	0x007A, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     bee:	80 91 7b 00 	lds	r24, 0x007B
     bf2:	88 7f       	andi	r24, 0xF8	; 248
     bf4:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     bf8:	80 91 7a 00 	lds	r24, 0x007A
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     c02:	80 91 7a 00 	lds	r24, 0x007A
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     c0c:	80 91 7a 00 	lds	r24, 0x007A
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	80 93 7a 00 	sts	0x007A, r24

	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
     c16:	0e 94 4e 02 	call	0x49c	; 0x49c <initPwm>
	initSPI();
     c1a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <initSPI>
	mirf_init();
     c1e:	0e 94 2d 10 	call	0x205a	; 0x205a <mirf_init>
	initUsart();
     c22:	0e 94 0c 18 	call	0x3018	; 0x3018 <initUsart>
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     c26:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c2a:	80 91 13 02 	lds	r24, 0x0213
     c2e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c32:	88 23       	and	r24, r24
     c34:	51 f4       	brne	.+20     	; 0xc4a <initPeripherals+0x80>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     c36:	86 e1       	ldi	r24, 0x16	; 22
     c38:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     c3c:	85 e4       	ldi	r24, 0x45	; 69
     c3e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c42:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     c46:	78 94       	sei

	

}
     c48:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     c4a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     c4e:	86 ea       	ldi	r24, 0xA6	; 166
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 14 02 	sts	0x0214, r25
     c56:	80 93 13 02 	sts	0x0213, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c5a:	86 ea       	ldi	r24, 0xA6	; 166
     c5c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c60:	88 23       	and	r24, r24
     c62:	41 f5       	brne	.+80     	; 0xcb4 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     c64:	8d e2       	ldi	r24, 0x2D	; 45
     c66:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     c6a:	88 e0       	ldi	r24, 0x08	; 8
     c6c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c70:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c74:	80 91 13 02 	lds	r24, 0x0213
     c78:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c7c:	88 23       	and	r24, r24
     c7e:	d1 f4       	brne	.+52     	; 0xcb4 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     c80:	81 e3       	ldi	r24, 0x31	; 49
     c82:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c8c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c90:	80 91 13 02 	lds	r24, 0x0213
     c94:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c98:	88 23       	and	r24, r24
     c9a:	61 f4       	brne	.+24     	; 0xcb4 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     c9c:	8c e2       	ldi	r24, 0x2C	; 44
     c9e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     ca2:	89 e0       	ldi	r24, 0x09	; 9
     ca4:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     ca8:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 c9 03 	sts	0x03C9, r24
     cb2:	c9 cf       	rjmp	.-110    	; 0xc46 <initPeripherals+0x7c>
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     cb4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	80 93 c9 03 	sts	0x03C9, r24
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     cbe:	78 94       	sei

	

}
     cc0:	08 95       	ret

00000cc2 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 91 c4 03 	lds	r25, 0x03C4
     cc8:	89 1b       	sub	r24, r25
     cca:	80 93 c4 03 	sts	0x03C4, r24

	if(blinkState) {
     cce:	88 23       	and	r24, r24
     cd0:	39 f4       	brne	.+14     	; 0xce0 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     cd2:	80 91 80 00 	lds	r24, 0x0080
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     cdc:	2f 98       	cbi	0x05, 7	; 5
     cde:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     ce0:	80 91 80 00 	lds	r24, 0x0080
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 8d 00 	sts	0x008D, r25
     cf2:	80 93 8c 00 	sts	0x008C, r24
     cf6:	08 95       	ret

00000cf8 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     cf8:	88 23       	and	r24, r24
     cfa:	59 f0       	breq	.+22     	; 0xd12 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     cfc:	90 91 80 00 	lds	r25, 0x0080
     d00:	90 68       	ori	r25, 0x80	; 128
     d02:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	90 93 89 00 	sts	0x0089, r25
     d0c:	80 93 88 00 	sts	0x0088, r24
     d10:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     d12:	80 91 80 00 	lds	r24, 0x0080
     d16:	8f 77       	andi	r24, 0x7F	; 127
     d18:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     d1c:	2d 98       	cbi	0x05, 5	; 5
     d1e:	08 95       	ret

00000d20 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     d20:	88 23       	and	r24, r24
     d22:	59 f0       	breq	.+22     	; 0xd3a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     d24:	90 91 80 00 	lds	r25, 0x0080
     d28:	90 62       	ori	r25, 0x20	; 32
     d2a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	90 93 8b 00 	sts	0x008B, r25
     d34:	80 93 8a 00 	sts	0x008A, r24
     d38:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     d3a:	80 91 80 00 	lds	r24, 0x0080
     d3e:	8f 7d       	andi	r24, 0xDF	; 223
     d40:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     d44:	2e 98       	cbi	0x05, 6	; 5
     d46:	08 95       	ret

00000d48 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     d48:	88 23       	and	r24, r24
     d4a:	59 f0       	breq	.+22     	; 0xd62 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     d4c:	90 91 80 00 	lds	r25, 0x0080
     d50:	98 60       	ori	r25, 0x08	; 8
     d52:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 8d 00 	sts	0x008D, r25
     d5c:	80 93 8c 00 	sts	0x008C, r24
     d60:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     d62:	80 91 80 00 	lds	r24, 0x0080
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     d6c:	2f 98       	cbi	0x05, 7	; 5
     d6e:	08 95       	ret

00000d70 <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 de 03 	sts	0x03DE, r24
}
     d76:	08 95       	ret

00000d78 <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     d78:	86 b1       	in	r24, 0x06	; 6
     d7a:	66 b1       	in	r22, 0x06	; 6
     d7c:	26 b1       	in	r18, 0x06	; 6
     d7e:	46 b1       	in	r20, 0x06	; 6
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	28 70       	andi	r18, 0x08	; 8
     d84:	30 70       	andi	r19, 0x00	; 0
     d86:	35 95       	asr	r19
     d88:	27 95       	ror	r18
     d8a:	35 95       	asr	r19
     d8c:	27 95       	ror	r18
     d8e:	35 95       	asr	r19
     d90:	27 95       	ror	r18
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	64 70       	andi	r22, 0x04	; 4
     d9a:	70 70       	andi	r23, 0x00	; 0
     d9c:	75 95       	asr	r23
     d9e:	67 95       	ror	r22
     da0:	75 95       	asr	r23
     da2:	67 95       	ror	r22
     da4:	26 0f       	add	r18, r22
     da6:	37 1f       	adc	r19, r23
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	42 70       	andi	r20, 0x02	; 2
     db0:	50 70       	andi	r21, 0x00	; 0
     db2:	55 95       	asr	r21
     db4:	47 95       	ror	r20
     db6:	24 0f       	add	r18, r20
     db8:	35 1f       	adc	r19, r21
     dba:	22 0f       	add	r18, r18
     dbc:	81 70       	andi	r24, 0x01	; 1
}
     dbe:	82 0f       	add	r24, r18
     dc0:	08 95       	ret

00000dc2 <main>:


int main(void) {
     dc2:	2f 92       	push	r2
     dc4:	3f 92       	push	r3
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <main+0x26>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	choosePeripheral = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 12 02 	sts	0x0212, r24

	initPeripherals();
     df4:	0e 94 e5 05 	call	0xbca	; 0xbca <initPeripherals>
}

void calibrateAccelerometer() {

	int j=0;
	accOffsetX = 0;
     df8:	10 92 d7 03 	sts	0x03D7, r1
     dfc:	10 92 d6 03 	sts	0x03D6, r1
	accOffsetY = 0;
     e00:	10 92 d9 03 	sts	0x03D9, r1
     e04:	10 92 d8 03 	sts	0x03D8, r1
	accOffsetZ = 0;
     e08:	10 92 db 03 	sts	0x03DB, r1
     e0c:	10 92 da 03 	sts	0x03DA, r1
     e10:	02 e3       	ldi	r16, 0x32	; 50
     e12:	10 e0       	ldi	r17, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     e14:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>
		accOffsetX += accX;
     e18:	80 91 ca 03 	lds	r24, 0x03CA
     e1c:	90 91 cb 03 	lds	r25, 0x03CB
     e20:	20 91 d6 03 	lds	r18, 0x03D6
     e24:	30 91 d7 03 	lds	r19, 0x03D7
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	90 93 d7 03 	sts	0x03D7, r25
     e30:	80 93 d6 03 	sts	0x03D6, r24
		accOffsetY += accY;
     e34:	e0 91 cc 03 	lds	r30, 0x03CC
     e38:	f0 91 cd 03 	lds	r31, 0x03CD
     e3c:	20 91 d8 03 	lds	r18, 0x03D8
     e40:	30 91 d9 03 	lds	r19, 0x03D9
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	f0 93 d9 03 	sts	0x03D9, r31
     e4c:	e0 93 d8 03 	sts	0x03D8, r30
		accOffsetZ += accZ;
     e50:	20 91 ce 03 	lds	r18, 0x03CE
     e54:	30 91 cf 03 	lds	r19, 0x03CF
     e58:	40 91 da 03 	lds	r20, 0x03DA
     e5c:	50 91 db 03 	lds	r21, 0x03DB
     e60:	24 0f       	add	r18, r20
     e62:	35 1f       	adc	r19, r21
     e64:	30 93 db 03 	sts	0x03DB, r19
     e68:	20 93 da 03 	sts	0x03DA, r18
     e6c:	01 50       	subi	r16, 0x01	; 1
     e6e:	10 40       	sbci	r17, 0x00	; 0
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     e70:	89 f6       	brne	.-94     	; 0xe14 <main+0x52>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     e72:	02 e3       	ldi	r16, 0x32	; 50
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	b8 01       	movw	r22, r16
     e78:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     e7c:	70 93 d7 03 	sts	0x03D7, r23
     e80:	60 93 d6 03 	sts	0x03D6, r22
	accOffsetY = accOffsetY/50;
     e84:	cf 01       	movw	r24, r30
     e86:	b8 01       	movw	r22, r16
     e88:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     e8c:	70 93 d9 03 	sts	0x03D9, r23
     e90:	60 93 d8 03 	sts	0x03D8, r22
	accOffsetZ = accOffsetZ/50;
     e94:	c9 01       	movw	r24, r18
     e96:	b8 01       	movw	r22, r16
     e98:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     e9c:	70 93 db 03 	sts	0x03DB, r23
     ea0:	60 93 da 03 	sts	0x03DA, r22
//PORTB |= (1 << 5);

//	e_start_agendas_processing();
	//e_activate_agenda(toggleBlueLed, 10000);		// every 1 seconds
//	e_activate_agenda(sendValues, 20000);	// every 2 seconds
	e_init_remote_control();
     ea4:	0e 94 38 12 	call	0x2470	; 0x2470 <e_init_remote_control>

		currentSelector = getSelector();
		readAccelXYZ();

		if(delayCounter >= 20000) {
			measBattery = 1;
     ea8:	ff 24       	eor	r15, r15
     eaa:	f3 94       	inc	r15
					pwm_right_desired -= STEP_MOTORS;
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
					break;

               	case 0:	// colors
					colorState = (colorState+1)%5;
     eac:	15 e0       	ldi	r17, 0x05	; 5
     eae:	21 2e       	mov	r2, r17
     eb0:	31 2c       	mov	r3, r1
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off
						pwm_blue = MAX_LEDS_PWM;
     eb2:	ee 24       	eor	r14, r14
     eb4:	ea 94       	dec	r14
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     eb6:	bd ec       	ldi	r27, 0xCD	; 205
     eb8:	8b 2e       	mov	r8, r27
     eba:	be ef       	ldi	r27, 0xFE	; 254
     ebc:	9b 2e       	mov	r9, r27
     ebe:	bf ef       	ldi	r27, 0xFF	; 255
     ec0:	ab 2e       	mov	r10, r27
     ec2:	bf ef       	ldi	r27, 0xFF	; 255
     ec4:	bb 2e       	mov	r11, r27
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     ec6:	a3 e3       	ldi	r26, 0x33	; 51
     ec8:	4a 2e       	mov	r4, r26
     eca:	a1 e0       	ldi	r26, 0x01	; 1
     ecc:	5a 2e       	mov	r5, r26
     ece:	61 2c       	mov	r6, r1
     ed0:	71 2c       	mov	r7, r1
     ed2:	59 c0       	rjmp	.+178    	; 0xf86 <main+0x1c4>

		}

		if(currentSelector == 0) {	// no control

			if(start_control) {
     ed4:	80 91 b6 03 	lds	r24, 0x03B6
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <main+0x11c>
     edc:	f0 c0       	rjmp	.+480    	; 0x10be <main+0x2fc>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     ede:	80 91 8c 03 	lds	r24, 0x038C
     ee2:	90 91 8d 03 	lds	r25, 0x038D
     ee6:	a0 91 8e 03 	lds	r26, 0x038E
     eea:	b0 91 8f 03 	lds	r27, 0x038F
     eee:	80 93 b9 03 	sts	0x03B9, r24
     ef2:	90 93 ba 03 	sts	0x03BA, r25
     ef6:	a0 93 bb 03 	sts	0x03BB, r26
     efa:	b0 93 bc 03 	sts	0x03BC, r27
				pwm_left_working = pwm_left_desired;	
     efe:	80 91 90 03 	lds	r24, 0x0390
     f02:	90 91 91 03 	lds	r25, 0x0391
     f06:	a0 91 92 03 	lds	r26, 0x0392
     f0a:	b0 91 93 03 	lds	r27, 0x0393
     f0e:	80 93 bd 03 	sts	0x03BD, r24
     f12:	90 93 be 03 	sts	0x03BE, r25
     f16:	a0 93 bf 03 	sts	0x03BF, r26
     f1a:	b0 93 c0 03 	sts	0x03C0, r27
				start_control = 0;
     f1e:	10 92 b6 03 	sts	0x03B6, r1
				update_pwm = 1;
     f22:	f0 92 c1 03 	sts	0x03C1, r15
     f26:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
     f28:	80 91 b4 03 	lds	r24, 0x03B4
     f2c:	88 23       	and	r24, r24
     f2e:	91 f0       	breq	.+36     	; 0xf54 <main+0x192>
			last_left_vel = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
     f30:	80 91 7a 03 	lds	r24, 0x037A
     f34:	90 91 7b 03 	lds	r25, 0x037B
     f38:	60 91 72 03 	lds	r22, 0x0372
     f3c:	70 91 73 03 	lds	r23, 0x0373
     f40:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     f44:	70 93 81 03 	sts	0x0381, r23
     f48:	60 93 80 03 	sts	0x0380, r22
			left_vel_changed = 1;
     f4c:	f0 92 b7 03 	sts	0x03B7, r15
			compute_left_vel = 0;
     f50:	10 92 b4 03 	sts	0x03B4, r1
		}

		if(compute_right_vel) {
     f54:	80 91 b5 03 	lds	r24, 0x03B5
     f58:	88 23       	and	r24, r24
     f5a:	91 f0       	breq	.+36     	; 0xf80 <main+0x1be>
			last_right_vel = (unsigned int)(last_right_vel_sum/last_num_rvel_samples_avg);
     f5c:	80 91 7e 03 	lds	r24, 0x037E
     f60:	90 91 7f 03 	lds	r25, 0x037F
     f64:	60 91 76 03 	lds	r22, 0x0376
     f68:	70 91 77 03 	lds	r23, 0x0377
     f6c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
     f70:	70 93 83 03 	sts	0x0383, r23
     f74:	60 93 82 03 	sts	0x0382, r22
			right_vel_changed = 1;
     f78:	f0 92 b8 03 	sts	0x03B8, r15
			compute_right_vel = 0;
     f7c:	10 92 b5 03 	sts	0x03B5, r1
		}

		if(update_pwm) {
     f80:	22 23       	and	r18, r18
     f82:	09 f0       	breq	.+2      	; 0xf86 <main+0x1c4>
     f84:	98 c3       	rjmp	.+1840   	; 0x16b6 <main+0x8f4>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     f86:	46 b1       	in	r20, 0x06	; 6
     f88:	86 b1       	in	r24, 0x06	; 6
     f8a:	26 b1       	in	r18, 0x06	; 6
     f8c:	56 b1       	in	r21, 0x06	; 6
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	28 70       	andi	r18, 0x08	; 8
     f92:	30 70       	andi	r19, 0x00	; 0
     f94:	35 95       	asr	r19
     f96:	27 95       	ror	r18
     f98:	35 95       	asr	r19
     f9a:	27 95       	ror	r18
     f9c:	35 95       	asr	r19
     f9e:	27 95       	ror	r18
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	84 70       	andi	r24, 0x04	; 4
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	95 95       	asr	r25
     fac:	87 95       	ror	r24
     fae:	95 95       	asr	r25
     fb0:	87 95       	ror	r24
     fb2:	28 0f       	add	r18, r24
     fb4:	39 1f       	adc	r19, r25
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	85 2f       	mov	r24, r21
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	82 70       	andi	r24, 0x02	; 2
     fc0:	90 70       	andi	r25, 0x00	; 0
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	28 0f       	add	r18, r24
     fc8:	39 1f       	adc	r19, r25
     fca:	22 0f       	add	r18, r18
     fcc:	41 70       	andi	r20, 0x01	; 1
     fce:	24 0f       	add	r18, r20

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		currentSelector = getSelector();
     fd0:	20 93 e1 03 	sts	0x03E1, r18
		readAccelXYZ();
     fd4:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>

		if(delayCounter >= 20000) {
     fd8:	80 91 df 03 	lds	r24, 0x03DF
     fdc:	90 91 e0 03 	lds	r25, 0x03E0
     fe0:	2e e4       	ldi	r18, 0x4E	; 78
     fe2:	80 32       	cpi	r24, 0x20	; 32
     fe4:	92 07       	cpc	r25, r18
     fe6:	10 f0       	brcs	.+4      	; 0xfec <main+0x22a>
			measBattery = 1;
     fe8:	f0 92 67 03 	sts	0x0367, r15
		}

		ir_move = e_get_data();
     fec:	0e 94 58 13 	call	0x26b0	; 0x26b0 <e_get_data>
     ff0:	80 93 c6 03 	sts	0x03C6, r24

		if(command_received) {
     ff4:	90 91 c7 03 	lds	r25, 0x03C7
     ff8:	99 23       	and	r25, r25
     ffa:	09 f4       	brne	.+2      	; 0xffe <main+0x23c>
     ffc:	4b c0       	rjmp	.+150    	; 0x1094 <main+0x2d2>

			command_received = 0;
     ffe:	10 92 c7 03 	sts	0x03C7, r1

			//usartTransmit(ir_move);

			switch(ir_move) {
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	09 f4       	brne	.+2      	; 0x1008 <main+0x246>
    1006:	9a c6       	rjmp	.+3380   	; 0x1d3c <main+0xf7a>
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	08 f0       	brcs	.+2      	; 0x100e <main+0x24c>
    100c:	aa c2       	rjmp	.+1364   	; 0x1562 <main+0x7a0>
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	09 f4       	brne	.+2      	; 0x1014 <main+0x252>
    1012:	31 c6       	rjmp	.+3170   	; 0x1c76 <main+0xeb4>
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	08 f0       	brcs	.+2      	; 0x101a <main+0x258>
    1018:	f5 c4       	rjmp	.+2538   	; 0x1a04 <main+0xc42>
					pwm_right_desired -= STEP_MOTORS;
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
					break;

               	case 0:	// colors
					colorState = (colorState+1)%5;
    101a:	80 91 c8 03 	lds	r24, 0x03C8
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	b1 01       	movw	r22, r2
    1024:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__divmodhi4>
    1028:	80 93 c8 03 	sts	0x03C8, r24

					if(colorState==0) {		// turn on blue
    102c:	88 23       	and	r24, r24
    102e:	09 f0       	breq	.+2      	; 0x1032 <main+0x270>
    1030:	0e c7       	rjmp	.+3612   	; 0x1e4e <main+0x108c>
						LED_IR1_HIGH;
    1032:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1034:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1036:	10 92 10 02 	sts	0x0210, r1
						pwm_green = MAX_LEDS_PWM;
    103a:	e0 92 0f 02 	sts	0x020F, r14
						pwm_red = MAX_LEDS_PWM;					
    103e:	e0 92 0e 02 	sts	0x020E, r14

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1042:	80 91 80 00 	lds	r24, 0x0080
    1046:	80 68       	ori	r24, 0x80	; 128
    1048:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    104c:	af ef       	ldi	r26, 0xFF	; 255
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	b0 93 89 00 	sts	0x0089, r27
    1054:	a0 93 88 00 	sts	0x0088, r26
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
    1058:	80 91 0f 02 	lds	r24, 0x020F

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <main+0x2a0>
    1060:	04 c7       	rjmp	.+3592   	; 0x1e6a <main+0x10a8>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    1062:	90 91 80 00 	lds	r25, 0x0080
    1066:	90 62       	ori	r25, 0x20	; 32
    1068:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 8b 00 	sts	0x008B, r25
    1072:	80 93 8a 00 	sts	0x008A, r24
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);
    1076:	80 91 10 02 	lds	r24, 0x0210

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <main+0x2be>
    107e:	00 c7       	rjmp	.+3584   	; 0x1e80 <main+0x10be>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    1080:	90 91 80 00 	lds	r25, 0x0080
    1084:	98 60       	ori	r25, 0x08	; 8
    1086:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 93 8d 00 	sts	0x008D, r25
    1090:	80 93 8c 00 	sts	0x008C, r24


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
    1094:	80 91 df 03 	lds	r24, 0x03DF
    1098:	90 91 e0 03 	lds	r25, 0x03E0
    109c:	be e4       	ldi	r27, 0x4E	; 78
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	9b 07       	cpc	r25, r27
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <main+0x2e4>
    10a4:	96 c1       	rjmp	.+812    	; 0x13d2 <main+0x610>
		}



		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {
    10a6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <mirf_data_ready>
    10aa:	88 23       	and	r24, r24
    10ac:	59 f4       	brne	.+22     	; 0x10c4 <main+0x302>
#endif


		}

		if(currentSelector == 0) {	// no control
    10ae:	80 91 e1 03 	lds	r24, 0x03E1
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <main+0x2f6>
    10b6:	0e cf       	rjmp	.-484    	; 0xed4 <main+0x112>
				pwm_left_working = pwm_left_desired;	
				start_control = 0;
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	09 f4       	brne	.+2      	; 0x10be <main+0x2fc>
    10bc:	bd c2       	rjmp	.+1402   	; 0x1638 <main+0x876>

			if(start_control && left_vel_changed && right_vel_changed) {
    10be:	20 91 c1 03 	lds	r18, 0x03C1
    10c2:	32 cf       	rjmp	.-412    	; 0xf28 <main+0x166>

		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    10c4:	87 e0       	ldi	r24, 0x07	; 7
    10c6:	60 e7       	ldi	r22, 0x70	; 112
    10c8:	0e 94 95 10 	call	0x212a	; 0x212a <mirf_config_register>

			mirf_get_data(rfData);
    10cc:	89 ef       	ldi	r24, 0xF9	; 249
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <mirf_get_data>
			flush_rx_fifo();
    10d4:	0e 94 77 10 	call	0x20ee	; 0x20ee <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && (rfData[3]==0b00001000 || rfData[3]==0b00011000) && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    10d8:	90 91 fd 03 	lds	r25, 0x03FD
    10dc:	89 2f       	mov	r24, r25
    10de:	8f 77       	andi	r24, 0x7F	; 127
    10e0:	80 93 c3 03 	sts	0x03C3, r24
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    10e4:	60 91 fe 03 	lds	r22, 0x03FE
    10e8:	76 2f       	mov	r23, r22
    10ea:	7f 77       	andi	r23, 0x7F	; 127
    10ec:	70 93 c2 03 	sts	0x03C2, r23
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    10f0:	97 fd       	sbrc	r25, 7
    10f2:	2a c4       	rjmp	.+2132   	; 0x1948 <main+0xb86>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	90 95       	com	r25
    1100:	81 95       	neg	r24
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	9c 01       	movw	r18, r24
    1106:	44 27       	eor	r20, r20
    1108:	37 fd       	sbrc	r19, 7
    110a:	40 95       	com	r20
    110c:	54 2f       	mov	r21, r20
    110e:	20 93 8c 03 	sts	0x038C, r18
    1112:	30 93 8d 03 	sts	0x038D, r19
    1116:	40 93 8e 03 	sts	0x038E, r20
    111a:	50 93 8f 03 	sts	0x038F, r21
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    111e:	67 fd       	sbrc	r22, 7
    1120:	00 c4       	rjmp	.+2048   	; 0x1922 <main+0xb60>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    1122:	87 2f       	mov	r24, r23
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	90 95       	com	r25
    1130:	81 95       	neg	r24
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	aa 27       	eor	r26, r26
    1136:	97 fd       	sbrc	r25, 7
    1138:	a0 95       	com	r26
    113a:	ba 2f       	mov	r27, r26
    113c:	80 93 90 03 	sts	0x0390, r24
    1140:	90 93 91 03 	sts	0x0391, r25
    1144:	a0 93 92 03 	sts	0x0392, r26
    1148:	b0 93 93 03 	sts	0x0393, r27
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    114c:	24 33       	cpi	r18, 0x34	; 52
    114e:	e1 e0       	ldi	r30, 0x01	; 1
    1150:	3e 07       	cpc	r19, r30
    1152:	e0 e0       	ldi	r30, 0x00	; 0
    1154:	4e 07       	cpc	r20, r30
    1156:	e0 e0       	ldi	r30, 0x00	; 0
    1158:	5e 07       	cpc	r21, r30
    115a:	64 f0       	brlt	.+24     	; 0x1174 <main+0x3b2>
    115c:	40 92 8c 03 	sts	0x038C, r4
    1160:	50 92 8d 03 	sts	0x038D, r5
    1164:	60 92 8e 03 	sts	0x038E, r6
    1168:	70 92 8f 03 	sts	0x038F, r7
    116c:	23 e3       	ldi	r18, 0x33	; 51
    116e:	31 e0       	ldi	r19, 0x01	; 1
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1174:	84 33       	cpi	r24, 0x34	; 52
    1176:	f1 e0       	ldi	r31, 0x01	; 1
    1178:	9f 07       	cpc	r25, r31
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	af 07       	cpc	r26, r31
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	bf 07       	cpc	r27, r31
    1182:	64 f0       	brlt	.+24     	; 0x119c <main+0x3da>
    1184:	40 92 90 03 	sts	0x0390, r4
    1188:	50 92 91 03 	sts	0x0391, r5
    118c:	60 92 92 03 	sts	0x0392, r6
    1190:	70 92 93 03 	sts	0x0393, r7
    1194:	83 e3       	ldi	r24, 0x33	; 51
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	a0 e0       	ldi	r26, 0x00	; 0
    119a:	b0 e0       	ldi	r27, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    119c:	2d 3c       	cpi	r18, 0xCD	; 205
    119e:	6e ef       	ldi	r22, 0xFE	; 254
    11a0:	36 07       	cpc	r19, r22
    11a2:	6f ef       	ldi	r22, 0xFF	; 255
    11a4:	46 07       	cpc	r20, r22
    11a6:	6f ef       	ldi	r22, 0xFF	; 255
    11a8:	56 07       	cpc	r21, r22
    11aa:	44 f4       	brge	.+16     	; 0x11bc <main+0x3fa>
    11ac:	80 92 8c 03 	sts	0x038C, r8
    11b0:	90 92 8d 03 	sts	0x038D, r9
    11b4:	a0 92 8e 03 	sts	0x038E, r10
    11b8:	b0 92 8f 03 	sts	0x038F, r11
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    11bc:	8d 3c       	cpi	r24, 0xCD	; 205
    11be:	ee ef       	ldi	r30, 0xFE	; 254
    11c0:	9e 07       	cpc	r25, r30
    11c2:	ef ef       	ldi	r30, 0xFF	; 255
    11c4:	ae 07       	cpc	r26, r30
    11c6:	ef ef       	ldi	r30, 0xFF	; 255
    11c8:	be 07       	cpc	r27, r30
    11ca:	44 f4       	brge	.+16     	; 0x11dc <main+0x41a>
    11cc:	80 92 90 03 	sts	0x0390, r8
    11d0:	90 92 91 03 	sts	0x0391, r9
    11d4:	a0 92 92 03 	sts	0x0392, r10
    11d8:	b0 92 93 03 	sts	0x0393, r11
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    11dc:	20 91 f9 03 	lds	r18, 0x03F9
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	30 93 f4 03 	sts	0x03F4, r19
    11e6:	20 93 f3 03 	sts	0x03F3, r18
    11ea:	e0 91 fa 03 	lds	r30, 0x03FA
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	f0 93 f6 03 	sts	0x03F6, r31
    11f4:	e0 93 f5 03 	sts	0x03F5, r30
    11f8:	00 91 fb 03 	lds	r16, 0x03FB
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	10 93 f8 03 	sts	0x03F8, r17
    1202:	00 93 f7 03 	sts	0x03F7, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1206:	92 2f       	mov	r25, r18
    1208:	88 27       	eor	r24, r24
    120a:	82 1b       	sub	r24, r18
    120c:	93 0b       	sbc	r25, r19
    120e:	64 e6       	ldi	r22, 0x64	; 100
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    1216:	26 2f       	mov	r18, r22
    1218:	20 95       	com	r18
    121a:	20 93 0e 02 	sts	0x020E, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    121e:	9e 2f       	mov	r25, r30
    1220:	88 27       	eor	r24, r24
    1222:	8e 1b       	sub	r24, r30
    1224:	9f 0b       	sbc	r25, r31
    1226:	64 e6       	ldi	r22, 0x64	; 100
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    122e:	60 95       	com	r22
    1230:	60 93 10 02 	sts	0x0210, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1234:	90 2f       	mov	r25, r16
    1236:	88 27       	eor	r24, r24
    1238:	80 1b       	sub	r24, r16
    123a:	91 0b       	sbc	r25, r17
    123c:	64 e6       	ldi	r22, 0x64	; 100
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    1244:	60 95       	com	r22
    1246:	60 93 0f 02 	sts	0x020F, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    124a:	22 23       	and	r18, r18
    124c:	09 f4       	brne	.+2      	; 0x1250 <main+0x48e>
    124e:	0a c3       	rjmp	.+1556   	; 0x1864 <main+0xaa2>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1250:	80 91 80 00 	lds	r24, 0x0080
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    125a:	82 2f       	mov	r24, r18
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	90 93 89 00 	sts	0x0089, r25
    1262:	80 93 88 00 	sts	0x0088, r24
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    1266:	80 91 0f 02 	lds	r24, 0x020F

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    126a:	88 23       	and	r24, r24
    126c:	09 f4       	brne	.+2      	; 0x1270 <main+0x4ae>
    126e:	f3 c2       	rjmp	.+1510   	; 0x1856 <main+0xa94>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    1270:	90 91 80 00 	lds	r25, 0x0080
    1274:	90 62       	ori	r25, 0x20	; 32
    1276:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	90 93 8b 00 	sts	0x008B, r25
    1280:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    1284:	80 91 10 02 	lds	r24, 0x0210

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1288:	88 23       	and	r24, r24
    128a:	09 f4       	brne	.+2      	; 0x128e <main+0x4cc>
    128c:	7c c2       	rjmp	.+1272   	; 0x1786 <main+0x9c4>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    128e:	90 91 80 00 	lds	r25, 0x0080
    1292:	98 60       	ori	r25, 0x08	; 8
    1294:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	90 93 8d 00 	sts	0x008D, r25
    129e:	80 93 8c 00 	sts	0x008C, r24
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if(rfData[3]== 1) {			// turn on one IR
    12a2:	80 91 fc 03 	lds	r24, 0x03FC
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <main+0x4ea>
    12aa:	78 c2       	rjmp	.+1264   	; 0x179c <main+0x9da>
				//LED_IR1 = 0;
				//LED_IR2 = 1;
				LED_IR1_LOW;
				LED_IR2_HIGH;
			} else if(rfData[3]==2) {	// turn on two IRs
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <main+0x4f0>
    12b0:	d8 c3       	rjmp	.+1968   	; 0x1a62 <main+0xca0>
				//LED_IR1 = 1;
				//LED_IR2 = 0;
				LED_IR1_HIGH;
				LED_IR2_LOW;
			} else if(rfData[3]==3) {	// turn on all three IRs
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <main+0x4f6>
    12b6:	7f c5       	rjmp	.+2814   	; 0x1db6 <main+0xff4>
				LED_IR1_LOW;
				LED_IR2_LOW;
			} else {					// turn off IRs
				//LED_IR1 = 1;
				//LED_IR2 = 1;
				LED_IR1_HIGH;
    12b8:	44 9a       	sbi	0x08, 4	; 8
				LED_IR2_HIGH;
    12ba:	45 9a       	sbi	0x08, 5	; 8
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    12bc:	80 91 0d 02 	lds	r24, 0x020D
    12c0:	80 93 e3 03 	sts	0x03E3, r24

			switch(packetId) {
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	09 f4       	brne	.+2      	; 0x12ca <main+0x508>
    12c8:	72 c2       	rjmp	.+1252   	; 0x17ae <main+0x9ec>
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <main+0x50e>
    12ce:	d1 c2       	rjmp	.+1442   	; 0x1872 <main+0xab0>
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <main+0x514>
    12d4:	78 c0       	rjmp	.+240    	; 0x13c6 <main+0x604>
				case 3: 
					ackPayload[1] = proximityValue[1]&0xFF;
    12d6:	80 91 33 03 	lds	r24, 0x0333
    12da:	90 91 34 03 	lds	r25, 0x0334
    12de:	80 93 e4 03 	sts	0x03E4, r24
					ackPayload[2] = proximityValue[1]>>8;
    12e2:	80 91 33 03 	lds	r24, 0x0333
    12e6:	90 91 34 03 	lds	r25, 0x0334
    12ea:	90 93 e5 03 	sts	0x03E5, r25
					ackPayload[3] = proximityValue[3]&0xFF;
    12ee:	80 91 37 03 	lds	r24, 0x0337
    12f2:	90 91 38 03 	lds	r25, 0x0338
    12f6:	80 93 e6 03 	sts	0x03E6, r24
					ackPayload[4] = proximityValue[3]>>8;
    12fa:	80 91 37 03 	lds	r24, 0x0337
    12fe:	90 91 38 03 	lds	r25, 0x0338
    1302:	90 93 e7 03 	sts	0x03E7, r25
					ackPayload[5] = proximityValue[5]&0xFF;
    1306:	80 91 3b 03 	lds	r24, 0x033B
    130a:	90 91 3c 03 	lds	r25, 0x033C
    130e:	80 93 e8 03 	sts	0x03E8, r24
					ackPayload[6] = proximityValue[5]>>8;
    1312:	80 91 3b 03 	lds	r24, 0x033B
    1316:	90 91 3c 03 	lds	r25, 0x033C
    131a:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[7] = proximityValue[7]&0xFF;
    131e:	80 91 3f 03 	lds	r24, 0x033F
    1322:	90 91 40 03 	lds	r25, 0x0340
    1326:	80 93 ea 03 	sts	0x03EA, r24
					ackPayload[8] = proximityValue[7]>>8;
    132a:	80 91 3f 03 	lds	r24, 0x033F
    132e:	90 91 40 03 	lds	r25, 0x0340
    1332:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[9] = proximityValue[11]&0xFF;
    1336:	80 91 47 03 	lds	r24, 0x0347
    133a:	90 91 48 03 	lds	r25, 0x0348
    133e:	80 93 ec 03 	sts	0x03EC, r24
					ackPayload[10] = proximityValue[11]>>8;
    1342:	80 91 47 03 	lds	r24, 0x0347
    1346:	90 91 48 03 	lds	r25, 0x0348
    134a:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[11] = proximityValue[13]&0xFF;
    134e:	80 91 4b 03 	lds	r24, 0x034B
    1352:	90 91 4c 03 	lds	r25, 0x034C
    1356:	80 93 ee 03 	sts	0x03EE, r24
					ackPayload[12] = proximityValue[13]>>8;
    135a:	80 91 4b 03 	lds	r24, 0x034B
    135e:	90 91 4c 03 	lds	r25, 0x034C
    1362:	90 93 ef 03 	sts	0x03EF, r25
					ackPayload[13] = proximityValue[15]&0xFF;
    1366:	80 91 4f 03 	lds	r24, 0x034F
    136a:	90 91 50 03 	lds	r25, 0x0350
    136e:	80 93 f0 03 	sts	0x03F0, r24
					ackPayload[14] = proximityValue[15]>>8;	
    1372:	80 91 4f 03 	lds	r24, 0x034F
    1376:	90 91 50 03 	lds	r25, 0x0350
    137a:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
    137e:	80 91 03 01 	lds	r24, 0x0103
    1382:	20 91 03 01 	lds	r18, 0x0103
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	20 72       	andi	r18, 0x20	; 32
    138a:	30 70       	andi	r19, 0x00	; 0
    138c:	35 95       	asr	r19
    138e:	27 95       	ror	r18
    1390:	35 95       	asr	r19
    1392:	27 95       	ror	r18
    1394:	35 95       	asr	r19
    1396:	27 95       	ror	r18
    1398:	35 95       	asr	r19
    139a:	27 95       	ror	r18
    139c:	35 95       	asr	r19
    139e:	27 95       	ror	r18
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	80 71       	andi	r24, 0x10	; 16
    13a8:	90 70       	andi	r25, 0x00	; 0
    13aa:	95 95       	asr	r25
    13ac:	87 95       	ror	r24
    13ae:	95 95       	asr	r25
    13b0:	87 95       	ror	r24
    13b2:	95 95       	asr	r25
    13b4:	87 95       	ror	r24
    13b6:	95 95       	asr	r25
    13b8:	87 95       	ror	r24
    13ba:	82 2b       	or	r24, r18
    13bc:	80 93 f2 03 	sts	0x03F2, r24
					packetId = 4;
    13c0:	f4 e0       	ldi	r31, 0x04	; 4
    13c2:	f0 93 0d 02 	sts	0x020D, r31
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
    13c6:	83 ee       	ldi	r24, 0xE3	; 227
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	60 e1       	ldi	r22, 0x10	; 16
    13cc:	0e 94 0a 11 	call	0x2214	; 0x2214 <writeAckPayload>
    13d0:	6e ce       	rjmp	.-804    	; 0x10ae <main+0x2ec>

		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
			delayCounter = 0;
    13d2:	10 92 e0 03 	sts	0x03E0, r1
    13d6:	10 92 df 03 	sts	0x03DF, r1

			sendAdcValues = 0;
    13da:	10 92 c5 03 	sts	0x03C5, r1
			myTimeout = 0;
    13de:	10 92 de 03 	sts	0x03DE, r1

			//PORTB &= ~(1 << 6);
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
    13e2:	8a ea       	ldi	r24, 0xAA	; 170
    13e4:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(0xAA);
    13e8:	8a ea       	ldi	r24, 0xAA	; 170
    13ea:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			for(i=0; i<24; i++) {
    13ee:	cc 24       	eor	r12, r12
    13f0:	dd 24       	eor	r13, r13
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
    13f2:	86 01       	movw	r16, r12
    13f4:	00 0f       	add	r16, r16
    13f6:	11 1f       	adc	r17, r17
    13f8:	0f 5c       	subi	r16, 0xCF	; 207
    13fa:	1c 4f       	sbci	r17, 0xFC	; 252
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
				usartTransmit((unsigned char)(proximityValue[i]>>8));
    1406:	d8 01       	movw	r26, r16
    1408:	8d 91       	ld	r24, X+
    140a:	9c 91       	ld	r25, X
    140c:	89 2f       	mov	r24, r25
    140e:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
			usartTransmit(0xAA);
			for(i=0; i<24; i++) {
    1412:	08 94       	sec
    1414:	c1 1c       	adc	r12, r1
    1416:	d1 1c       	adc	r13, r1
    1418:	b8 e1       	ldi	r27, 0x18	; 24
    141a:	cb 16       	cp	r12, r27
    141c:	d1 04       	cpc	r13, r1
    141e:	49 f7       	brne	.-46     	; 0x13f2 <main+0x630>
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
				usartTransmit((unsigned char)(proximityValue[i]>>8));
			}
			//usartTransmit(getselector());
			//usartTransmit(getselector());
			usartTransmit(last_right_current&0xFF);
    1420:	80 91 6e 03 	lds	r24, 0x036E
    1424:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(last_right_current>>8);
    1428:	80 91 6f 03 	lds	r24, 0x036F
    142c:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(last_left_current&0xFF);
    1430:	80 91 6c 03 	lds	r24, 0x036C
    1434:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(last_left_current>>8);
    1438:	80 91 6d 03 	lds	r24, 0x036D
    143c:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			

			// two possible cases cause the number of samples to be zero:
			// - when the pwm is at its maximum (thus no passive phase)
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
    1440:	80 91 76 03 	lds	r24, 0x0376
    1444:	90 91 77 03 	lds	r25, 0x0377
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	09 f4       	brne	.+2      	; 0x144e <main+0x68c>
    144c:	ee c0       	rjmp	.+476    	; 0x162a <main+0x868>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
    144e:	80 91 7e 03 	lds	r24, 0x037E
    1452:	90 91 7f 03 	lds	r25, 0x037F
    1456:	60 91 76 03 	lds	r22, 0x0376
    145a:	70 91 77 03 	lds	r23, 0x0377
    145e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    1462:	86 2f       	mov	r24, r22
    1464:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
    1468:	80 91 7e 03 	lds	r24, 0x037E
    146c:	90 91 7f 03 	lds	r25, 0x037F
    1470:	60 91 76 03 	lds	r22, 0x0376
    1474:	70 91 77 03 	lds	r23, 0x0377
    1478:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    147c:	87 2f       	mov	r24, r23
    147e:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			//usartTransmit((unsigned char)(last_num_rvel_samples_avg>>8));

			//usartTransmit((unsigned char)(last_num_lvel_samples_avg&0xFF));
			//usartTransmit((unsigned char)(last_num_lvel_samples_avg>>8));
						
			if(last_num_lvel_samples_avg != 0) {
    1482:	80 91 72 03 	lds	r24, 0x0372
    1486:	90 91 73 03 	lds	r25, 0x0373
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	09 f4       	brne	.+2      	; 0x1490 <main+0x6ce>
    148e:	c6 c0       	rjmp	.+396    	; 0x161c <main+0x85a>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
    1490:	80 91 7a 03 	lds	r24, 0x037A
    1494:	90 91 7b 03 	lds	r25, 0x037B
    1498:	60 91 72 03 	lds	r22, 0x0372
    149c:	70 91 73 03 	lds	r23, 0x0373
    14a0:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    14a4:	86 2f       	mov	r24, r22
    14a6:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
    14aa:	80 91 7a 03 	lds	r24, 0x037A
    14ae:	90 91 7b 03 	lds	r25, 0x037B
    14b2:	60 91 72 03 	lds	r22, 0x0372
    14b6:	70 91 73 03 	lds	r23, 0x0373
    14ba:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__udivmodhi4>
    14be:	87 2f       	mov	r24, r23
    14c0:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));
				//usartTransmit((unsigned char)((0)&0xFF));
				//usartTransmit((unsigned char)((0)>>8));
			}
			
			readAccelXYZ();
    14c4:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>
			usartTransmit(accX&0xFF);
    14c8:	80 91 ca 03 	lds	r24, 0x03CA
    14cc:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(accX>>8);
    14d0:	80 91 cb 03 	lds	r24, 0x03CB
    14d4:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(accY&0xFF);
    14d8:	80 91 cc 03 	lds	r24, 0x03CC
    14dc:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(accY>>8);
    14e0:	80 91 cd 03 	lds	r24, 0x03CD
    14e4:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(accZ&0xFF);
    14e8:	80 91 ce 03 	lds	r24, 0x03CE
    14ec:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(accZ>>8);	
    14f0:	80 91 cf 03 	lds	r24, 0x03CF
    14f4:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			//PORTB &= ~(1 << 6);
			//computeAngle();
			//PORTB |= (1 << 6);
			usartTransmit(currentAngle&0xFF);
    14f8:	80 91 dc 03 	lds	r24, 0x03DC
    14fc:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(currentAngle>>8);		
    1500:	80 91 dd 03 	lds	r24, 0x03DD
    1504:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			
			usartTransmit(batteryLevel&0xFF);
    1508:	80 91 65 03 	lds	r24, 0x0365
    150c:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			usartTransmit(batteryLevel>>8);	
    1510:	80 91 66 03 	lds	r24, 0x0366
    1514:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			
			usartTransmit(ir_move);	
    1518:	80 91 c6 03 	lds	r24, 0x03C6
    151c:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			
			usartTransmit(BUTTON0);
    1520:	80 91 03 01 	lds	r24, 0x0103
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	80 72       	andi	r24, 0x20	; 32
    1528:	90 70       	andi	r25, 0x00	; 0
    152a:	95 95       	asr	r25
    152c:	87 95       	ror	r24
    152e:	95 95       	asr	r25
    1530:	87 95       	ror	r24
    1532:	95 95       	asr	r25
    1534:	87 95       	ror	r24
    1536:	95 95       	asr	r25
    1538:	87 95       	ror	r24
    153a:	95 95       	asr	r25
    153c:	87 95       	ror	r24
    153e:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
			
			usartTransmit(CHARGE_ON);								
    1542:	80 91 03 01 	lds	r24, 0x0103
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	80 71       	andi	r24, 0x10	; 16
    154a:	90 70       	andi	r25, 0x00	; 0
    154c:	95 95       	asr	r25
    154e:	87 95       	ror	r24
    1550:	95 95       	asr	r25
    1552:	87 95       	ror	r24
    1554:	95 95       	asr	r25
    1556:	87 95       	ror	r24
    1558:	95 95       	asr	r25
    155a:	87 95       	ror	r24
    155c:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
    1560:	a2 cd       	rjmp	.-1212   	; 0x10a6 <main+0x2e4>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    1562:	87 30       	cpi	r24, 0x07	; 7
    1564:	09 f4       	brne	.+2      	; 0x1568 <main+0x7a6>
    1566:	b0 c3       	rjmp	.+1888   	; 0x1cc8 <main+0xf06>
    1568:	88 30       	cpi	r24, 0x08	; 8
    156a:	08 f0       	brcs	.+2      	; 0x156e <main+0x7ac>
    156c:	1c c2       	rjmp	.+1080   	; 0x19a6 <main+0xbe4>
    156e:	85 30       	cpi	r24, 0x05	; 5
    1570:	09 f4       	brne	.+2      	; 0x1574 <main+0x7b2>
    1572:	d3 c3       	rjmp	.+1958   	; 0x1d1a <main+0xf58>
    1574:	86 30       	cpi	r24, 0x06	; 6
    1576:	09 f0       	breq	.+2      	; 0x157a <main+0x7b8>
    1578:	8d cd       	rjmp	.-1254   	; 0x1094 <main+0x2d2>
	                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
                  	break;

				case 6:	// both motors right
					pwm_right_desired -= STEP_MOTORS;
    157a:	20 91 8c 03 	lds	r18, 0x038C
    157e:	30 91 8d 03 	lds	r19, 0x038D
    1582:	40 91 8e 03 	lds	r20, 0x038E
    1586:	50 91 8f 03 	lds	r21, 0x038F
    158a:	2e 51       	subi	r18, 0x1E	; 30
    158c:	30 40       	sbci	r19, 0x00	; 0
    158e:	40 40       	sbci	r20, 0x00	; 0
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	20 93 8c 03 	sts	0x038C, r18
    1596:	30 93 8d 03 	sts	0x038D, r19
    159a:	40 93 8e 03 	sts	0x038E, r20
    159e:	50 93 8f 03 	sts	0x038F, r21
					pwm_left_desired += STEP_MOTORS;
    15a2:	80 91 90 03 	lds	r24, 0x0390
    15a6:	90 91 91 03 	lds	r25, 0x0391
    15aa:	a0 91 92 03 	lds	r26, 0x0392
    15ae:	b0 91 93 03 	lds	r27, 0x0393
    15b2:	4e 96       	adiw	r24, 0x1e	; 30
    15b4:	a1 1d       	adc	r26, r1
    15b6:	b1 1d       	adc	r27, r1
    15b8:	80 93 90 03 	sts	0x0390, r24
    15bc:	90 93 91 03 	sts	0x0391, r25
    15c0:	a0 93 92 03 	sts	0x0392, r26
    15c4:	b0 93 93 03 	sts	0x0393, r27
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    15c8:	2a 39       	cpi	r18, 0x9A	; 154
    15ca:	ed ef       	ldi	r30, 0xFD	; 253
    15cc:	3e 07       	cpc	r19, r30
    15ce:	ef ef       	ldi	r30, 0xFF	; 255
    15d0:	4e 07       	cpc	r20, r30
    15d2:	ef ef       	ldi	r30, 0xFF	; 255
    15d4:	5e 07       	cpc	r21, r30
    15d6:	64 f4       	brge	.+24     	; 0x15f0 <main+0x82e>
    15d8:	2a e9       	ldi	r18, 0x9A	; 154
    15da:	3d ef       	ldi	r19, 0xFD	; 253
    15dc:	4f ef       	ldi	r20, 0xFF	; 255
    15de:	5f ef       	ldi	r21, 0xFF	; 255
    15e0:	20 93 8c 03 	sts	0x038C, r18
    15e4:	30 93 8d 03 	sts	0x038D, r19
    15e8:	40 93 8e 03 	sts	0x038E, r20
    15ec:	50 93 8f 03 	sts	0x038F, r21
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    15f0:	87 36       	cpi	r24, 0x67	; 103
    15f2:	32 e0       	ldi	r19, 0x02	; 2
    15f4:	93 07       	cpc	r25, r19
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	a3 07       	cpc	r26, r19
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	b3 07       	cpc	r27, r19
    15fe:	0c f4       	brge	.+2      	; 0x1602 <main+0x840>
    1600:	49 cd       	rjmp	.-1390   	; 0x1094 <main+0x2d2>
    1602:	86 e6       	ldi	r24, 0x66	; 102
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	a0 e0       	ldi	r26, 0x00	; 0
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	80 93 90 03 	sts	0x0390, r24
    160e:	90 93 91 03 	sts	0x0391, r25
    1612:	a0 93 92 03 	sts	0x0392, r26
    1616:	b0 93 93 03 	sts	0x0393, r27
    161a:	3c cd       	rjmp	.-1416   	; 0x1094 <main+0x2d2>
						
			if(last_num_lvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
    1628:	4d cf       	rjmp	.-358    	; 0x14c4 <main+0x702>
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));	// probably we don't use the pwm to its maximum, so
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));	// if the number of samples is 0 it means that the 
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	0e 94 21 18 	call	0x3042	; 0x3042 <usartTransmit>
    1636:	25 cf       	rjmp	.-438    	; 0x1482 <main+0x6c0>
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control

			if(start_control && left_vel_changed && right_vel_changed) {
    1638:	80 91 b6 03 	lds	r24, 0x03B6
    163c:	88 23       	and	r24, r24
    163e:	09 f4       	brne	.+2      	; 0x1642 <main+0x880>
    1640:	3e cd       	rjmp	.-1412   	; 0x10be <main+0x2fc>
    1642:	80 91 b7 03 	lds	r24, 0x03B7
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <main+0x88a>
    164a:	39 cd       	rjmp	.-1422   	; 0x10be <main+0x2fc>
    164c:	80 91 b8 03 	lds	r24, 0x03B8
    1650:	88 23       	and	r24, r24
    1652:	09 f4       	brne	.+2      	; 0x1656 <main+0x894>
    1654:	34 cd       	rjmp	.-1432   	; 0x10be <main+0x2fc>
				pwm_right_working = pwm_right_desired;
    1656:	80 91 8c 03 	lds	r24, 0x038C
    165a:	90 91 8d 03 	lds	r25, 0x038D
    165e:	a0 91 8e 03 	lds	r26, 0x038E
    1662:	b0 91 8f 03 	lds	r27, 0x038F
    1666:	80 93 b9 03 	sts	0x03B9, r24
    166a:	90 93 ba 03 	sts	0x03BA, r25
    166e:	a0 93 bb 03 	sts	0x03BB, r26
    1672:	b0 93 bc 03 	sts	0x03BC, r27
				pwm_left_working = pwm_left_desired;
    1676:	80 91 90 03 	lds	r24, 0x0390
    167a:	90 91 91 03 	lds	r25, 0x0391
    167e:	a0 91 92 03 	lds	r26, 0x0392
    1682:	b0 91 93 03 	lds	r27, 0x0393
    1686:	80 93 bd 03 	sts	0x03BD, r24
    168a:	90 93 be 03 	sts	0x03BE, r25
    168e:	a0 93 bf 03 	sts	0x03BF, r26
    1692:	b0 93 c0 03 	sts	0x03C0, r27
				start_control = 0;
    1696:	10 92 b6 03 	sts	0x03B6, r1
				left_vel_changed = 0;
    169a:	10 92 b7 03 	sts	0x03B7, r1
				right_vel_changed = 0;
    169e:	10 92 b8 03 	sts	0x03B8, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    16a2:	8d eb       	ldi	r24, 0xBD	; 189
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	69 eb       	ldi	r22, 0xB9	; 185
    16a8:	73 e0       	ldi	r23, 0x03	; 3
    16aa:	0e 94 50 14 	call	0x28a0	; 0x28a0 <start_orizzontal_speed_control>
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    16ae:	f0 92 c1 03 	sts	0x03C1, r15
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	39 cc       	rjmp	.-1934   	; 0xf28 <main+0x166>
			compute_right_vel = 0;
		}

		if(update_pwm) {

			update_pwm = 0;
    16b6:	10 92 c1 03 	sts	0x03C1, r1
			pwm_left = pwm_left_working;
    16ba:	20 91 bd 03 	lds	r18, 0x03BD
    16be:	30 91 be 03 	lds	r19, 0x03BE
    16c2:	40 91 bf 03 	lds	r20, 0x03BF
    16c6:	50 91 c0 03 	lds	r21, 0x03C0
    16ca:	20 93 88 03 	sts	0x0388, r18
    16ce:	30 93 89 03 	sts	0x0389, r19
    16d2:	40 93 8a 03 	sts	0x038A, r20
    16d6:	50 93 8b 03 	sts	0x038B, r21
			pwm_right = pwm_right_working;
    16da:	80 91 b9 03 	lds	r24, 0x03B9
    16de:	90 91 ba 03 	lds	r25, 0x03BA
    16e2:	a0 91 bb 03 	lds	r26, 0x03BB
    16e6:	b0 91 bc 03 	lds	r27, 0x03BC
    16ea:	80 93 84 03 	sts	0x0384, r24
    16ee:	90 93 85 03 	sts	0x0385, r25
    16f2:	a0 93 86 03 	sts	0x0386, r26
    16f6:	b0 93 87 03 	sts	0x0387, r27

			if(pwm_right >= 0) {
    16fa:	b7 fd       	sbrc	r27, 7
    16fc:	81 c3       	rjmp	.+1794   	; 0x1e00 <main+0x103e>
				OCR3A = (int)pwm_right;
    16fe:	90 93 99 00 	sts	0x0099, r25
    1702:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    1706:	57 fd       	sbrc	r21, 7
    1708:	59 c3       	rjmp	.+1714   	; 0x1dbc <main+0xffa>
				OCR4A = pwm_left;
    170a:	30 93 a9 00 	sts	0x00A9, r19
    170e:	20 93 a8 00 	sts	0x00A8, r18
			} else {
				OCR4B = -pwm_left;
			}

			if(pwm_left == 0) {
    1712:	21 15       	cp	r18, r1
    1714:	31 05       	cpc	r19, r1
    1716:	41 05       	cpc	r20, r1
    1718:	51 05       	cpc	r21, r1
    171a:	09 f0       	breq	.+2      	; 0x171e <main+0x95c>
    171c:	79 c3       	rjmp	.+1778   	; 0x1e10 <main+0x104e>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    171e:	80 91 a0 00 	lds	r24, 0x00A0
    1722:	8f 75       	andi	r24, 0x5F	; 95
    1724:	80 93 a0 00 	sts	0x00A0, r24
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    1728:	80 91 02 01 	lds	r24, 0x0102
    172c:	87 7e       	andi	r24, 0xE7	; 231
    172e:	80 93 02 01 	sts	0x0102, r24
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    1732:	80 91 72 00 	lds	r24, 0x0072
    1736:	89 7f       	andi	r24, 0xF9	; 249
    1738:	80 93 72 00 	sts	0x0072, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    173c:	80 91 72 00 	lds	r24, 0x0072
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
				TCCR4A |= (1 << COM4B1);		// enable OCB
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
			}

			if(pwm_right == 0) {
    1746:	80 91 84 03 	lds	r24, 0x0384
    174a:	90 91 85 03 	lds	r25, 0x0385
    174e:	a0 91 86 03 	lds	r26, 0x0386
    1752:	b0 91 87 03 	lds	r27, 0x0387
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	a1 05       	cpc	r26, r1
    175a:	b1 05       	cpc	r27, r1
    175c:	09 f0       	breq	.+2      	; 0x1760 <main+0x99e>
    175e:	07 c1       	rjmp	.+526    	; 0x196e <main+0xbac>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    1760:	80 91 90 00 	lds	r24, 0x0090
    1764:	8f 75       	andi	r24, 0x5F	; 95
    1766:	80 93 90 00 	sts	0x0090, r24
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    176a:	8e b1       	in	r24, 0x0e	; 14
    176c:	87 7e       	andi	r24, 0xE7	; 231
    176e:	8e b9       	out	0x0e, r24	; 14
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    1770:	80 91 71 00 	lds	r24, 0x0071
    1774:	89 7f       	andi	r24, 0xF9	; 249
    1776:	80 93 71 00 	sts	0x0071, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    177a:	80 91 71 00 	lds	r24, 0x0071
    177e:	82 60       	ori	r24, 0x02	; 2
    1780:	80 93 71 00 	sts	0x0071, r24
    1784:	00 cc       	rjmp	.-2048   	; 0xf86 <main+0x1c4>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    1786:	80 91 80 00 	lds	r24, 0x0080
    178a:	87 7f       	andi	r24, 0xF7	; 247
    178c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    1790:	2f 98       	cbi	0x05, 7	; 5
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if(rfData[3]== 1) {			// turn on one IR
    1792:	80 91 fc 03 	lds	r24, 0x03FC
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	09 f0       	breq	.+2      	; 0x179c <main+0x9da>
    179a:	88 cd       	rjmp	.-1264   	; 0x12ac <main+0x4ea>
				//LED_IR1 = 0;
				//LED_IR2 = 1;
				LED_IR1_LOW;
    179c:	44 98       	cbi	0x08, 4	; 8
				LED_IR2_HIGH;
    179e:	45 9a       	sbi	0x08, 5	; 8
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    17a0:	80 91 0d 02 	lds	r24, 0x020D
    17a4:	80 93 e3 03 	sts	0x03E3, r24

			switch(packetId) {
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	09 f0       	breq	.+2      	; 0x17ae <main+0x9ec>
    17ac:	8e cd       	rjmp	.-1252   	; 0x12ca <main+0x508>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityValue[9]&0xFF;
    17ae:	80 91 43 03 	lds	r24, 0x0343
    17b2:	90 91 44 03 	lds	r25, 0x0344
    17b6:	80 93 e4 03 	sts	0x03E4, r24
					ackPayload[2] = proximityValue[9]>>8;
    17ba:	80 91 43 03 	lds	r24, 0x0343
    17be:	90 91 44 03 	lds	r25, 0x0344
    17c2:	90 93 e5 03 	sts	0x03E5, r25
					ackPayload[3] = proximityValue[17]&0xFF;
    17c6:	80 91 53 03 	lds	r24, 0x0353
    17ca:	90 91 54 03 	lds	r25, 0x0354
    17ce:	80 93 e6 03 	sts	0x03E6, r24
					ackPayload[4] = proximityValue[17]>>8;
    17d2:	80 91 53 03 	lds	r24, 0x0353
    17d6:	90 91 54 03 	lds	r25, 0x0354
    17da:	90 93 e7 03 	sts	0x03E7, r25
					ackPayload[5] = proximityValue[19]&0xFF;
    17de:	80 91 57 03 	lds	r24, 0x0357
    17e2:	90 91 58 03 	lds	r25, 0x0358
    17e6:	80 93 e8 03 	sts	0x03E8, r24
					ackPayload[6] = proximityValue[19]>>8;
    17ea:	80 91 57 03 	lds	r24, 0x0357
    17ee:	90 91 58 03 	lds	r25, 0x0358
    17f2:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[7] = proximityValue[21]&0xFF;
    17f6:	80 91 5b 03 	lds	r24, 0x035B
    17fa:	90 91 5c 03 	lds	r25, 0x035C
    17fe:	80 93 ea 03 	sts	0x03EA, r24
					ackPayload[8] = proximityValue[21]>>8;
    1802:	80 91 5b 03 	lds	r24, 0x035B
    1806:	90 91 5c 03 	lds	r25, 0x035C
    180a:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[9] = proximityValue[23]&0xFF;
    180e:	80 91 5f 03 	lds	r24, 0x035F
    1812:	90 91 60 03 	lds	r25, 0x0360
    1816:	80 93 ec 03 	sts	0x03EC, r24
					ackPayload[10] = proximityValue[23]>>8;
    181a:	80 91 5f 03 	lds	r24, 0x035F
    181e:	90 91 60 03 	lds	r25, 0x0360
    1822:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[11] = accX&0xFF;
    1826:	90 91 ca 03 	lds	r25, 0x03CA
    182a:	80 91 cb 03 	lds	r24, 0x03CB
    182e:	90 93 ee 03 	sts	0x03EE, r25
					ackPayload[12] = accX>>8;
    1832:	80 93 ef 03 	sts	0x03EF, r24
					ackPayload[13] = accY&0xFF;
    1836:	90 91 cc 03 	lds	r25, 0x03CC
    183a:	80 91 cd 03 	lds	r24, 0x03CD
    183e:	90 93 f0 03 	sts	0x03F0, r25
					ackPayload[14] = accY>>8;
    1842:	80 93 f1 03 	sts	0x03F1, r24
					ackPayload[15] = ir_move;			
    1846:	80 91 c6 03 	lds	r24, 0x03C6
    184a:	80 93 f2 03 	sts	0x03F2, r24
					packetId = 5;
    184e:	25 e0       	ldi	r18, 0x05	; 5
    1850:	20 93 0d 02 	sts	0x020D, r18
					break;
    1854:	b8 cd       	rjmp	.-1168   	; 0x13c6 <main+0x604>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1856:	80 91 80 00 	lds	r24, 0x0080
    185a:	8f 7d       	andi	r24, 0xDF	; 223
    185c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    1860:	2e 98       	cbi	0x05, 6	; 5
    1862:	10 cd       	rjmp	.-1504   	; 0x1284 <main+0x4c2>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    1864:	80 91 80 00 	lds	r24, 0x0080
    1868:	8f 77       	andi	r24, 0x7F	; 127
    186a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    186e:	2d 98       	cbi	0x05, 5	; 5
    1870:	fa cc       	rjmp	.-1548   	; 0x1266 <main+0x4a4>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    1872:	85 30       	cpi	r24, 0x05	; 5
    1874:	09 f4       	brne	.+2      	; 0x1878 <main+0xab6>
    1876:	f8 c0       	rjmp	.+496    	; 0x1a68 <main+0xca6>
    1878:	86 30       	cpi	r24, 0x06	; 6
    187a:	09 f0       	breq	.+2      	; 0x187e <main+0xabc>
    187c:	a4 cd       	rjmp	.-1208   	; 0x13c6 <main+0x604>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    187e:	80 91 41 03 	lds	r24, 0x0341
    1882:	90 91 42 03 	lds	r25, 0x0342
    1886:	80 93 e4 03 	sts	0x03E4, r24
					ackPayload[2] = proximityValue[8]>>8;
    188a:	80 91 41 03 	lds	r24, 0x0341
    188e:	90 91 42 03 	lds	r25, 0x0342
    1892:	90 93 e5 03 	sts	0x03E5, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    1896:	80 91 51 03 	lds	r24, 0x0351
    189a:	90 91 52 03 	lds	r25, 0x0352
    189e:	80 93 e6 03 	sts	0x03E6, r24
					ackPayload[4] = proximityValue[16]>>8;
    18a2:	80 91 51 03 	lds	r24, 0x0351
    18a6:	90 91 52 03 	lds	r25, 0x0352
    18aa:	90 93 e7 03 	sts	0x03E7, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    18ae:	80 91 55 03 	lds	r24, 0x0355
    18b2:	90 91 56 03 	lds	r25, 0x0356
    18b6:	80 93 e8 03 	sts	0x03E8, r24
					ackPayload[6] = proximityValue[18]>>8;
    18ba:	80 91 55 03 	lds	r24, 0x0355
    18be:	90 91 56 03 	lds	r25, 0x0356
    18c2:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    18c6:	80 91 59 03 	lds	r24, 0x0359
    18ca:	90 91 5a 03 	lds	r25, 0x035A
    18ce:	80 93 ea 03 	sts	0x03EA, r24
					ackPayload[8] = proximityValue[20]>>8;
    18d2:	80 91 59 03 	lds	r24, 0x0359
    18d6:	90 91 5a 03 	lds	r25, 0x035A
    18da:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    18de:	80 91 5d 03 	lds	r24, 0x035D
    18e2:	90 91 5e 03 	lds	r25, 0x035E
    18e6:	80 93 ec 03 	sts	0x03EC, r24
					ackPayload[10] = proximityValue[22]>>8;
    18ea:	80 91 5d 03 	lds	r24, 0x035D
    18ee:	90 91 5e 03 	lds	r25, 0x035E
    18f2:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[11] = accZ&0xFF;
    18f6:	90 91 ce 03 	lds	r25, 0x03CE
    18fa:	80 91 cf 03 	lds	r24, 0x03CF
    18fe:	90 93 ee 03 	sts	0x03EE, r25
					ackPayload[12] = accZ>>8;
    1902:	80 93 ef 03 	sts	0x03EF, r24
					ackPayload[13] = batteryLevel&0xFF;
    1906:	90 91 65 03 	lds	r25, 0x0365
    190a:	80 91 66 03 	lds	r24, 0x0366
    190e:	90 93 f0 03 	sts	0x03F0, r25
					ackPayload[14] = batteryLevel>>8;
    1912:	80 93 f1 03 	sts	0x03F1, r24
					ackPayload[15] = 0;				
    1916:	10 92 f2 03 	sts	0x03F2, r1
					packetId = 3;
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	80 93 0d 02 	sts	0x020D, r24
					break;											
    1920:	52 cd       	rjmp	.-1372   	; 0x13c6 <main+0x604>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    1922:	87 2f       	mov	r24, r23
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	aa 27       	eor	r26, r26
    1930:	97 fd       	sbrc	r25, 7
    1932:	a0 95       	com	r26
    1934:	ba 2f       	mov	r27, r26
    1936:	80 93 90 03 	sts	0x0390, r24
    193a:	90 93 91 03 	sts	0x0391, r25
    193e:	a0 93 92 03 	sts	0x0392, r26
    1942:	b0 93 93 03 	sts	0x0393, r27
    1946:	02 cc       	rjmp	.-2044   	; 0x114c <main+0x38a>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	22 0f       	add	r18, r18
    194e:	33 1f       	adc	r19, r19
    1950:	22 0f       	add	r18, r18
    1952:	33 1f       	adc	r19, r19
    1954:	44 27       	eor	r20, r20
    1956:	37 fd       	sbrc	r19, 7
    1958:	40 95       	com	r20
    195a:	54 2f       	mov	r21, r20
    195c:	20 93 8c 03 	sts	0x038C, r18
    1960:	30 93 8d 03 	sts	0x038D, r19
    1964:	40 93 8e 03 	sts	0x038E, r20
    1968:	50 93 8f 03 	sts	0x038F, r21
    196c:	d8 cb       	rjmp	.-2128   	; 0x111e <main+0x35c>
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			}else if(pwm_right > 0) {   		// move forward
    196e:	18 16       	cp	r1, r24
    1970:	19 06       	cpc	r1, r25
    1972:	1a 06       	cpc	r1, r26
    1974:	1b 06       	cpc	r1, r27
    1976:	0c f0       	brlt	.+2      	; 0x197a <main+0xbb8>
    1978:	91 c2       	rjmp	.+1314   	; 0x1e9c <main+0x10da>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    197a:	80 91 90 00 	lds	r24, 0x0090
    197e:	8f 7d       	andi	r24, 0xDF	; 223
    1980:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    1984:	80 91 71 00 	lds	r24, 0x0071
    1988:	8b 7f       	andi	r24, 0xFB	; 251
    198a:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 4);				// output to 0
    198e:	74 98       	cbi	0x0e, 4	; 14
				TCCR3A |= (1 << COM3A1);		// enable OCA
    1990:	80 91 90 00 	lds	r24, 0x0090
    1994:	80 68       	ori	r24, 0x80	; 128
    1996:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    199a:	80 91 71 00 	lds	r24, 0x0071
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	80 93 71 00 	sts	0x0071, r24
    19a4:	f0 ca       	rjmp	.-2592   	; 0xf86 <main+0x1c4>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    19a6:	88 30       	cpi	r24, 0x08	; 8
    19a8:	09 f4       	brne	.+2      	; 0x19ac <main+0xbea>
    19aa:	09 c1       	rjmp	.+530    	; 0x1bbe <main+0xdfc>
    19ac:	89 30       	cpi	r24, 0x09	; 9
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <main+0xbf0>
    19b0:	71 cb       	rjmp	.-2334   	; 0x1094 <main+0x2d2>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    19b2:	80 91 90 03 	lds	r24, 0x0390
    19b6:	90 91 91 03 	lds	r25, 0x0391
    19ba:	a0 91 92 03 	lds	r26, 0x0392
    19be:	b0 91 93 03 	lds	r27, 0x0393
    19c2:	4e 97       	sbiw	r24, 0x1e	; 30
    19c4:	a1 09       	sbc	r26, r1
    19c6:	b1 09       	sbc	r27, r1
    19c8:	80 93 90 03 	sts	0x0390, r24
    19cc:	90 93 91 03 	sts	0x0391, r25
    19d0:	a0 93 92 03 	sts	0x0392, r26
    19d4:	b0 93 93 03 	sts	0x0393, r27
            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    19d8:	8a 39       	cpi	r24, 0x9A	; 154
    19da:	ed ef       	ldi	r30, 0xFD	; 253
    19dc:	9e 07       	cpc	r25, r30
    19de:	ef ef       	ldi	r30, 0xFF	; 255
    19e0:	ae 07       	cpc	r26, r30
    19e2:	ef ef       	ldi	r30, 0xFF	; 255
    19e4:	be 07       	cpc	r27, r30
    19e6:	0c f0       	brlt	.+2      	; 0x19ea <main+0xc28>
    19e8:	55 cb       	rjmp	.-2390   	; 0x1094 <main+0x2d2>
    19ea:	2a e9       	ldi	r18, 0x9A	; 154
    19ec:	3d ef       	ldi	r19, 0xFD	; 253
    19ee:	4f ef       	ldi	r20, 0xFF	; 255
    19f0:	5f ef       	ldi	r21, 0xFF	; 255
    19f2:	20 93 90 03 	sts	0x0390, r18
    19f6:	30 93 91 03 	sts	0x0391, r19
    19fa:	40 93 92 03 	sts	0x0392, r20
    19fe:	50 93 93 03 	sts	0x0393, r21
    1a02:	48 cb       	rjmp	.-2416   	; 0x1094 <main+0x2d2>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <main+0xc48>
    1a08:	8b c0       	rjmp	.+278    	; 0x1b20 <main+0xd5e>
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <main+0xc4e>
    1a0e:	42 cb       	rjmp	.-2428   	; 0x1094 <main+0x2d2>
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1a10:	80 91 90 03 	lds	r24, 0x0390
    1a14:	90 91 91 03 	lds	r25, 0x0391
    1a18:	a0 91 92 03 	lds	r26, 0x0392
    1a1c:	b0 91 93 03 	lds	r27, 0x0393
    1a20:	4e 96       	adiw	r24, 0x1e	; 30
    1a22:	a1 1d       	adc	r26, r1
    1a24:	b1 1d       	adc	r27, r1
    1a26:	80 93 90 03 	sts	0x0390, r24
    1a2a:	90 93 91 03 	sts	0x0391, r25
    1a2e:	a0 93 92 03 	sts	0x0392, r26
    1a32:	b0 93 93 03 	sts	0x0393, r27
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1a36:	87 36       	cpi	r24, 0x67	; 103
    1a38:	e2 e0       	ldi	r30, 0x02	; 2
    1a3a:	9e 07       	cpc	r25, r30
    1a3c:	e0 e0       	ldi	r30, 0x00	; 0
    1a3e:	ae 07       	cpc	r26, r30
    1a40:	e0 e0       	ldi	r30, 0x00	; 0
    1a42:	be 07       	cpc	r27, r30
    1a44:	0c f4       	brge	.+2      	; 0x1a48 <main+0xc86>
    1a46:	26 cb       	rjmp	.-2484   	; 0x1094 <main+0x2d2>
    1a48:	26 e6       	ldi	r18, 0x66	; 102
    1a4a:	32 e0       	ldi	r19, 0x02	; 2
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	20 93 90 03 	sts	0x0390, r18
    1a54:	30 93 91 03 	sts	0x0391, r19
    1a58:	40 93 92 03 	sts	0x0392, r20
    1a5c:	50 93 93 03 	sts	0x0393, r21
    1a60:	19 cb       	rjmp	.-2510   	; 0x1094 <main+0x2d2>
				LED_IR1_LOW;
				LED_IR2_HIGH;
			} else if(rfData[3]==2) {	// turn on two IRs
				//LED_IR1 = 1;
				//LED_IR2 = 0;
				LED_IR1_HIGH;
    1a62:	44 9a       	sbi	0x08, 4	; 8
				LED_IR2_LOW;
    1a64:	45 98       	cbi	0x08, 5	; 8
    1a66:	2a cc       	rjmp	.-1964   	; 0x12bc <main+0x4fa>
					ackPayload[15] = ir_move;			
					packetId = 5;
					break;
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    1a68:	80 91 31 03 	lds	r24, 0x0331
    1a6c:	90 91 32 03 	lds	r25, 0x0332
    1a70:	80 93 e4 03 	sts	0x03E4, r24
					ackPayload[2] = proximityValue[0]>>8;
    1a74:	80 91 31 03 	lds	r24, 0x0331
    1a78:	90 91 32 03 	lds	r25, 0x0332
    1a7c:	90 93 e5 03 	sts	0x03E5, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    1a80:	80 91 35 03 	lds	r24, 0x0335
    1a84:	90 91 36 03 	lds	r25, 0x0336
    1a88:	80 93 e6 03 	sts	0x03E6, r24
					ackPayload[4] = proximityValue[2]>>8;
    1a8c:	80 91 35 03 	lds	r24, 0x0335
    1a90:	90 91 36 03 	lds	r25, 0x0336
    1a94:	90 93 e7 03 	sts	0x03E7, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    1a98:	80 91 39 03 	lds	r24, 0x0339
    1a9c:	90 91 3a 03 	lds	r25, 0x033A
    1aa0:	80 93 e8 03 	sts	0x03E8, r24
					ackPayload[6] = proximityValue[4]>>8;
    1aa4:	80 91 39 03 	lds	r24, 0x0339
    1aa8:	90 91 3a 03 	lds	r25, 0x033A
    1aac:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    1ab0:	80 91 3d 03 	lds	r24, 0x033D
    1ab4:	90 91 3e 03 	lds	r25, 0x033E
    1ab8:	80 93 ea 03 	sts	0x03EA, r24
					ackPayload[8] = proximityValue[6]>>8;
    1abc:	80 91 3d 03 	lds	r24, 0x033D
    1ac0:	90 91 3e 03 	lds	r25, 0x033E
    1ac4:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    1ac8:	80 91 45 03 	lds	r24, 0x0345
    1acc:	90 91 46 03 	lds	r25, 0x0346
    1ad0:	80 93 ec 03 	sts	0x03EC, r24
					ackPayload[10] = proximityValue[10]>>8;
    1ad4:	80 91 45 03 	lds	r24, 0x0345
    1ad8:	90 91 46 03 	lds	r25, 0x0346
    1adc:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    1ae0:	80 91 49 03 	lds	r24, 0x0349
    1ae4:	90 91 4a 03 	lds	r25, 0x034A
    1ae8:	80 93 ee 03 	sts	0x03EE, r24
					ackPayload[12] = proximityValue[12]>>8;
    1aec:	80 91 49 03 	lds	r24, 0x0349
    1af0:	90 91 4a 03 	lds	r25, 0x034A
    1af4:	90 93 ef 03 	sts	0x03EF, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    1af8:	80 91 4d 03 	lds	r24, 0x034D
    1afc:	90 91 4e 03 	lds	r25, 0x034E
    1b00:	80 93 f0 03 	sts	0x03F0, r24
					ackPayload[14] = proximityValue[14]>>8;
    1b04:	80 91 4d 03 	lds	r24, 0x034D
    1b08:	90 91 4e 03 	lds	r25, 0x034E
    1b0c:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[15] = currentSelector;
    1b10:	80 91 e1 03 	lds	r24, 0x03E1
    1b14:	80 93 f2 03 	sts	0x03F2, r24
					packetId = 6;
    1b18:	36 e0       	ldi	r19, 0x06	; 6
    1b1a:	30 93 0d 02 	sts	0x020D, r19
					break;	
    1b1e:	53 cc       	rjmp	.-1882   	; 0x13c6 <main+0x604>
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
					if(pwm_right_desired > pwm_left_desired) {
    1b20:	80 91 8c 03 	lds	r24, 0x038C
    1b24:	90 91 8d 03 	lds	r25, 0x038D
    1b28:	a0 91 8e 03 	lds	r26, 0x038E
    1b2c:	b0 91 8f 03 	lds	r27, 0x038F
    1b30:	20 91 90 03 	lds	r18, 0x0390
    1b34:	30 91 91 03 	lds	r19, 0x0391
    1b38:	40 91 92 03 	lds	r20, 0x0392
    1b3c:	50 91 93 03 	lds	r21, 0x0393
    1b40:	28 17       	cp	r18, r24
    1b42:	39 07       	cpc	r19, r25
    1b44:	4a 07       	cpc	r20, r26
    1b46:	5b 07       	cpc	r21, r27
    1b48:	14 f4       	brge	.+4      	; 0x1b4e <main+0xd8c>
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	ad 01       	movw	r20, r26
    1b4e:	da 01       	movw	r26, r20
    1b50:	c9 01       	movw	r24, r18
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1b52:	4e 96       	adiw	r24, 0x1e	; 30
    1b54:	a1 1d       	adc	r26, r1
    1b56:	b1 1d       	adc	r27, r1
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	ab 83       	std	Y+3, r26	; 0x03
    1b5e:	bc 83       	std	Y+4, r27	; 0x04
    1b60:	80 93 8c 03 	sts	0x038C, r24
    1b64:	90 93 8d 03 	sts	0x038D, r25
    1b68:	a0 93 8e 03 	sts	0x038E, r26
    1b6c:	b0 93 8f 03 	sts	0x038F, r27
					pwm_left_desired += STEP_MOTORS;
    1b70:	da 01       	movw	r26, r20
    1b72:	c9 01       	movw	r24, r18
    1b74:	4e 96       	adiw	r24, 0x1e	; 30
    1b76:	a1 1d       	adc	r26, r1
    1b78:	b1 1d       	adc	r27, r1
    1b7a:	80 93 90 03 	sts	0x0390, r24
    1b7e:	90 93 91 03 	sts	0x0391, r25
    1b82:	a0 93 92 03 	sts	0x0392, r26
    1b86:	b0 93 93 03 	sts	0x0393, r27
	                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    1b8a:	29 81       	ldd	r18, Y+1	; 0x01
    1b8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b8e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b90:	5c 81       	ldd	r21, Y+4	; 0x04
    1b92:	27 36       	cpi	r18, 0x67	; 103
    1b94:	62 e0       	ldi	r22, 0x02	; 2
    1b96:	36 07       	cpc	r19, r22
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	46 07       	cpc	r20, r22
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	56 07       	cpc	r21, r22
    1ba0:	0c f4       	brge	.+2      	; 0x1ba4 <main+0xde2>
    1ba2:	26 cd       	rjmp	.-1460   	; 0x15f0 <main+0x82e>
    1ba4:	26 e6       	ldi	r18, 0x66	; 102
    1ba6:	32 e0       	ldi	r19, 0x02	; 2
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	20 93 8c 03 	sts	0x038C, r18
    1bb0:	30 93 8d 03 	sts	0x038D, r19
    1bb4:	40 93 8e 03 	sts	0x038E, r20
    1bb8:	50 93 8f 03 	sts	0x038F, r21
    1bbc:	19 cd       	rjmp	.-1486   	; 0x15f0 <main+0x82e>
    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
               		break;

				case 8:	// both motors backward
					if(pwm_right_desired < pwm_left) {
    1bbe:	20 91 8c 03 	lds	r18, 0x038C
    1bc2:	30 91 8d 03 	lds	r19, 0x038D
    1bc6:	40 91 8e 03 	lds	r20, 0x038E
    1bca:	50 91 8f 03 	lds	r21, 0x038F
    1bce:	80 91 88 03 	lds	r24, 0x0388
    1bd2:	90 91 89 03 	lds	r25, 0x0389
    1bd6:	a0 91 8a 03 	lds	r26, 0x038A
    1bda:	b0 91 8b 03 	lds	r27, 0x038B
    1bde:	28 17       	cp	r18, r24
    1be0:	39 07       	cpc	r19, r25
    1be2:	4a 07       	cpc	r20, r26
    1be4:	5b 07       	cpc	r21, r27
    1be6:	44 f0       	brlt	.+16     	; 0x1bf8 <main+0xe36>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1be8:	20 91 90 03 	lds	r18, 0x0390
    1bec:	30 91 91 03 	lds	r19, 0x0391
    1bf0:	40 91 92 03 	lds	r20, 0x0392
    1bf4:	50 91 93 03 	lds	r21, 0x0393
					}
					pwm_right_desired -= STEP_MOTORS;
    1bf8:	da 01       	movw	r26, r20
    1bfa:	c9 01       	movw	r24, r18
    1bfc:	4e 97       	sbiw	r24, 0x1e	; 30
    1bfe:	a1 09       	sbc	r26, r1
    1c00:	b1 09       	sbc	r27, r1
    1c02:	80 93 8c 03 	sts	0x038C, r24
    1c06:	90 93 8d 03 	sts	0x038D, r25
    1c0a:	a0 93 8e 03 	sts	0x038E, r26
    1c0e:	b0 93 8f 03 	sts	0x038F, r27
					pwm_left_desired -= STEP_MOTORS;
    1c12:	80 93 90 03 	sts	0x0390, r24
    1c16:	90 93 91 03 	sts	0x0391, r25
    1c1a:	a0 93 92 03 	sts	0x0392, r26
    1c1e:	b0 93 93 03 	sts	0x0393, r27
	                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1c22:	8a 39       	cpi	r24, 0x9A	; 154
    1c24:	ed ef       	ldi	r30, 0xFD	; 253
    1c26:	9e 07       	cpc	r25, r30
    1c28:	ef ef       	ldi	r30, 0xFF	; 255
    1c2a:	ae 07       	cpc	r26, r30
    1c2c:	ef ef       	ldi	r30, 0xFF	; 255
    1c2e:	be 07       	cpc	r27, r30
    1c30:	64 f4       	brge	.+24     	; 0x1c4a <main+0xe88>
    1c32:	2a e9       	ldi	r18, 0x9A	; 154
    1c34:	3d ef       	ldi	r19, 0xFD	; 253
    1c36:	4f ef       	ldi	r20, 0xFF	; 255
    1c38:	5f ef       	ldi	r21, 0xFF	; 255
    1c3a:	20 93 8c 03 	sts	0x038C, r18
    1c3e:	30 93 8d 03 	sts	0x038D, r19
    1c42:	40 93 8e 03 	sts	0x038E, r20
    1c46:	50 93 8f 03 	sts	0x038F, r21

				case 4:	// both motors left
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1c4a:	8a 39       	cpi	r24, 0x9A	; 154
    1c4c:	3d ef       	ldi	r19, 0xFD	; 253
    1c4e:	93 07       	cpc	r25, r19
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	a3 07       	cpc	r26, r19
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	b3 07       	cpc	r27, r19
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <main+0xe9a>
    1c5a:	1c ca       	rjmp	.-3016   	; 0x1094 <main+0x2d2>
    1c5c:	8a e9       	ldi	r24, 0x9A	; 154
    1c5e:	9d ef       	ldi	r25, 0xFD	; 253
    1c60:	af ef       	ldi	r26, 0xFF	; 255
    1c62:	bf ef       	ldi	r27, 0xFF	; 255
    1c64:	80 93 90 03 	sts	0x0390, r24
    1c68:	90 93 91 03 	sts	0x0391, r25
    1c6c:	a0 93 92 03 	sts	0x0392, r26
    1c70:	b0 93 93 03 	sts	0x0393, r27
    1c74:	0f ca       	rjmp	.-3042   	; 0x1094 <main+0x2d2>
					pwm_left_desired += STEP_MOTORS;
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1c76:	80 91 8c 03 	lds	r24, 0x038C
    1c7a:	90 91 8d 03 	lds	r25, 0x038D
    1c7e:	a0 91 8e 03 	lds	r26, 0x038E
    1c82:	b0 91 8f 03 	lds	r27, 0x038F
    1c86:	4e 96       	adiw	r24, 0x1e	; 30
    1c88:	a1 1d       	adc	r26, r1
    1c8a:	b1 1d       	adc	r27, r1
    1c8c:	80 93 8c 03 	sts	0x038C, r24
    1c90:	90 93 8d 03 	sts	0x038D, r25
    1c94:	a0 93 8e 03 	sts	0x038E, r26
    1c98:	b0 93 8f 03 	sts	0x038F, r27
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1c9c:	87 36       	cpi	r24, 0x67	; 103
    1c9e:	32 e0       	ldi	r19, 0x02	; 2
    1ca0:	93 07       	cpc	r25, r19
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	a3 07       	cpc	r26, r19
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	b3 07       	cpc	r27, r19
    1caa:	0c f4       	brge	.+2      	; 0x1cae <main+0xeec>
    1cac:	f3 c9       	rjmp	.-3098   	; 0x1094 <main+0x2d2>
    1cae:	86 e6       	ldi	r24, 0x66	; 102
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	80 93 8c 03 	sts	0x038C, r24
    1cba:	90 93 8d 03 	sts	0x038D, r25
    1cbe:	a0 93 8e 03 	sts	0x038E, r26
    1cc2:	b0 93 8f 03 	sts	0x038F, r27
    1cc6:	e6 c9       	rjmp	.-3124   	; 0x1094 <main+0x2d2>
					pwm_left_desired -= STEP_MOTORS;
            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1cc8:	80 91 8c 03 	lds	r24, 0x038C
    1ccc:	90 91 8d 03 	lds	r25, 0x038D
    1cd0:	a0 91 8e 03 	lds	r26, 0x038E
    1cd4:	b0 91 8f 03 	lds	r27, 0x038F
    1cd8:	4e 97       	sbiw	r24, 0x1e	; 30
    1cda:	a1 09       	sbc	r26, r1
    1cdc:	b1 09       	sbc	r27, r1
    1cde:	80 93 8c 03 	sts	0x038C, r24
    1ce2:	90 93 8d 03 	sts	0x038D, r25
    1ce6:	a0 93 8e 03 	sts	0x038E, r26
    1cea:	b0 93 8f 03 	sts	0x038F, r27
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1cee:	8a 39       	cpi	r24, 0x9A	; 154
    1cf0:	3d ef       	ldi	r19, 0xFD	; 253
    1cf2:	93 07       	cpc	r25, r19
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	a3 07       	cpc	r26, r19
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	b3 07       	cpc	r27, r19
    1cfc:	0c f0       	brlt	.+2      	; 0x1d00 <main+0xf3e>
    1cfe:	ca c9       	rjmp	.-3180   	; 0x1094 <main+0x2d2>
    1d00:	8a e9       	ldi	r24, 0x9A	; 154
    1d02:	9d ef       	ldi	r25, 0xFD	; 253
    1d04:	af ef       	ldi	r26, 0xFF	; 255
    1d06:	bf ef       	ldi	r27, 0xFF	; 255
    1d08:	80 93 8c 03 	sts	0x038C, r24
    1d0c:	90 93 8d 03 	sts	0x038D, r25
    1d10:	a0 93 8e 03 	sts	0x038E, r26
    1d14:	b0 93 8f 03 	sts	0x038F, r27
    1d18:	bd c9       	rjmp	.-3206   	; 0x1094 <main+0x2d2>
			//usartTransmit(ir_move);

			switch(ir_move) {

				case 5:	// stop motors
					pwm_right_desired = 0;
    1d1a:	10 92 8c 03 	sts	0x038C, r1
    1d1e:	10 92 8d 03 	sts	0x038D, r1
    1d22:	10 92 8e 03 	sts	0x038E, r1
    1d26:	10 92 8f 03 	sts	0x038F, r1
					pwm_left_desired = 0;
    1d2a:	10 92 90 03 	sts	0x0390, r1
    1d2e:	10 92 91 03 	sts	0x0391, r1
    1d32:	10 92 92 03 	sts	0x0392, r1
    1d36:	10 92 93 03 	sts	0x0393, r1
					break;
    1d3a:	ac c9       	rjmp	.-3240   	; 0x1094 <main+0x2d2>
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
					break;

				case 4:	// both motors left
					pwm_right_desired += STEP_MOTORS;
    1d3c:	20 91 8c 03 	lds	r18, 0x038C
    1d40:	30 91 8d 03 	lds	r19, 0x038D
    1d44:	40 91 8e 03 	lds	r20, 0x038E
    1d48:	50 91 8f 03 	lds	r21, 0x038F
    1d4c:	22 5e       	subi	r18, 0xE2	; 226
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	4f 4f       	sbci	r20, 0xFF	; 255
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	20 93 8c 03 	sts	0x038C, r18
    1d58:	30 93 8d 03 	sts	0x038D, r19
    1d5c:	40 93 8e 03 	sts	0x038E, r20
    1d60:	50 93 8f 03 	sts	0x038F, r21
					pwm_left_desired -= STEP_MOTORS;
    1d64:	80 91 90 03 	lds	r24, 0x0390
    1d68:	90 91 91 03 	lds	r25, 0x0391
    1d6c:	a0 91 92 03 	lds	r26, 0x0392
    1d70:	b0 91 93 03 	lds	r27, 0x0393
    1d74:	4e 97       	sbiw	r24, 0x1e	; 30
    1d76:	a1 09       	sbc	r26, r1
    1d78:	b1 09       	sbc	r27, r1
    1d7a:	80 93 90 03 	sts	0x0390, r24
    1d7e:	90 93 91 03 	sts	0x0391, r25
    1d82:	a0 93 92 03 	sts	0x0392, r26
    1d86:	b0 93 93 03 	sts	0x0393, r27
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1d8a:	27 36       	cpi	r18, 0x67	; 103
    1d8c:	e2 e0       	ldi	r30, 0x02	; 2
    1d8e:	3e 07       	cpc	r19, r30
    1d90:	e0 e0       	ldi	r30, 0x00	; 0
    1d92:	4e 07       	cpc	r20, r30
    1d94:	e0 e0       	ldi	r30, 0x00	; 0
    1d96:	5e 07       	cpc	r21, r30
    1d98:	0c f4       	brge	.+2      	; 0x1d9c <main+0xfda>
    1d9a:	57 cf       	rjmp	.-338    	; 0x1c4a <main+0xe88>
    1d9c:	26 e6       	ldi	r18, 0x66	; 102
    1d9e:	32 e0       	ldi	r19, 0x02	; 2
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	20 93 8c 03 	sts	0x038C, r18
    1da8:	30 93 8d 03 	sts	0x038D, r19
    1dac:	40 93 8e 03 	sts	0x038E, r20
    1db0:	50 93 8f 03 	sts	0x038F, r21
    1db4:	4a cf       	rjmp	.-364    	; 0x1c4a <main+0xe88>
				LED_IR1_HIGH;
				LED_IR2_LOW;
			} else if(rfData[3]==3) {	// turn on all three IRs
				//LED_IR1 = 0;
				//LED_IR2 = 0;											
				LED_IR1_LOW;
    1db6:	44 98       	cbi	0x08, 4	; 8
				LED_IR2_LOW;
    1db8:	45 98       	cbi	0x08, 5	; 8
    1dba:	80 ca       	rjmp	.-2816   	; 0x12bc <main+0x4fa>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    1dbc:	88 27       	eor	r24, r24
    1dbe:	99 27       	eor	r25, r25
    1dc0:	82 1b       	sub	r24, r18
    1dc2:	93 0b       	sbc	r25, r19
    1dc4:	90 93 ab 00 	sts	0x00AB, r25
    1dc8:	80 93 aa 00 	sts	0x00AA, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
			} else if(pwm_left < 0) {      		// move backward
				// select channel 14 to sample left current
				//currentMotLeftChannel = 14;
				TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    1dcc:	80 91 a0 00 	lds	r24, 0x00A0
    1dd0:	8f 77       	andi	r24, 0x7F	; 127
    1dd2:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    1dd6:	80 91 72 00 	lds	r24, 0x0072
    1dda:	8d 7f       	andi	r24, 0xFD	; 253
    1ddc:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
    1de0:	80 91 02 01 	lds	r24, 0x0102
    1de4:	87 7f       	andi	r24, 0xF7	; 247
    1de6:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4B1);		// enable OCB
    1dea:	80 91 a0 00 	lds	r24, 0x00A0
    1dee:	80 62       	ori	r24, 0x20	; 32
    1df0:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    1df4:	80 91 72 00 	lds	r24, 0x0072
    1df8:	84 60       	ori	r24, 0x04	; 4
    1dfa:	80 93 72 00 	sts	0x0072, r24
    1dfe:	a3 cc       	rjmp	.-1722   	; 0x1746 <main+0x984>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    1e00:	90 95       	com	r25
    1e02:	81 95       	neg	r24
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	90 93 9b 00 	sts	0x009B, r25
    1e0a:	80 93 9a 00 	sts	0x009A, r24
    1e0e:	7b cc       	rjmp	.-1802   	; 0x1706 <main+0x944>
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			} else if(pwm_left > 0) {   		// move forward
    1e10:	12 16       	cp	r1, r18
    1e12:	13 06       	cpc	r1, r19
    1e14:	14 06       	cpc	r1, r20
    1e16:	15 06       	cpc	r1, r21
    1e18:	cc f6       	brge	.-78     	; 0x1dcc <main+0x100a>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    1e1a:	80 91 a0 00 	lds	r24, 0x00A0
    1e1e:	8f 7d       	andi	r24, 0xDF	; 223
    1e20:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    1e24:	80 91 72 00 	lds	r24, 0x0072
    1e28:	8b 7f       	andi	r24, 0xFB	; 251
    1e2a:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 4);				// output to 0
    1e2e:	80 91 02 01 	lds	r24, 0x0102
    1e32:	8f 7e       	andi	r24, 0xEF	; 239
    1e34:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
    1e38:	80 91 a0 00 	lds	r24, 0x00A0
    1e3c:	80 68       	ori	r24, 0x80	; 128
    1e3e:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    1e42:	80 91 72 00 	lds	r24, 0x0072
    1e46:	82 60       	ori	r24, 0x02	; 2
    1e48:	80 93 72 00 	sts	0x0072, r24
    1e4c:	7c cc       	rjmp	.-1800   	; 0x1746 <main+0x984>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;					
					} else if(colorState==1) {	// turn on green
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	f1 f0       	breq	.+60     	; 0x1e8e <main+0x10cc>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	c9 f1       	breq	.+114    	; 0x1ec8 <main+0x1106>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1e56:	83 30       	cpi	r24, 0x03	; 3
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <main+0x109a>
    1e5a:	45 c0       	rjmp	.+138    	; 0x1ee6 <main+0x1124>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off
						pwm_blue = MAX_LEDS_PWM;
    1e5c:	e0 92 10 02 	sts	0x0210, r14
						pwm_green = MAX_LEDS_PWM;
    1e60:	e0 92 0f 02 	sts	0x020F, r14
						pwm_red = MAX_LEDS_PWM;
    1e64:	e0 92 0e 02 	sts	0x020E, r14
    1e68:	ec c8       	rjmp	.-3624   	; 0x1042 <main+0x280>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1e6a:	80 91 80 00 	lds	r24, 0x0080
    1e6e:	8f 7d       	andi	r24, 0xDF	; 223
    1e70:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    1e74:	2e 98       	cbi	0x05, 6	; 5
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);
    1e76:	80 91 10 02 	lds	r24, 0x0210

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1e7a:	88 23       	and	r24, r24
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <main+0x10be>
    1e7e:	00 c9       	rjmp	.-3584   	; 0x1080 <main+0x2be>
		TCCR1A &= ~(1 << COM1C1);
    1e80:	80 91 80 00 	lds	r24, 0x0080
    1e84:	87 7f       	andi	r24, 0xF7	; 247
    1e86:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    1e8a:	2f 98       	cbi	0x05, 7	; 5
    1e8c:	03 c9       	rjmp	.-3578   	; 0x1094 <main+0x2d2>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;					
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1e8e:	e0 92 10 02 	sts	0x0210, r14
						pwm_green = 0;
    1e92:	10 92 0f 02 	sts	0x020F, r1
						pwm_red = MAX_LEDS_PWM;
    1e96:	e0 92 0e 02 	sts	0x020E, r14
    1e9a:	d3 c8       	rjmp	.-3674   	; 0x1042 <main+0x280>
				TCCR3A |= (1 << COM3A1);		// enable OCA
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
			} else if(pwm_right < 0) {      	// move backward
				// select channel 12 to sample left current
				//currentMotRightChannel = 12;
				TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    1e9c:	80 91 90 00 	lds	r24, 0x0090
    1ea0:	8f 77       	andi	r24, 0x7F	; 127
    1ea2:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    1ea6:	80 91 71 00 	lds	r24, 0x0071
    1eaa:	8d 7f       	andi	r24, 0xFD	; 253
    1eac:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 3);				// output to 0
    1eb0:	73 98       	cbi	0x0e, 3	; 14
				TCCR3A |= (1 << COM3B1);		// enable OCB
    1eb2:	80 91 90 00 	lds	r24, 0x0090
    1eb6:	80 62       	ori	r24, 0x20	; 32
    1eb8:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    1ebc:	80 91 71 00 	lds	r24, 0x0071
    1ec0:	84 60       	ori	r24, 0x04	; 4
    1ec2:	80 93 71 00 	sts	0x0071, r24
    1ec6:	5f c8       	rjmp	.-3906   	; 0xf86 <main+0x1c4>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red
						LED_IR1_LOW;
    1ec8:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1eca:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1ecc:	e0 92 10 02 	sts	0x0210, r14
						pwm_green = MAX_LEDS_PWM;
    1ed0:	e0 92 0f 02 	sts	0x020F, r14
						pwm_red = 0;
    1ed4:	10 92 0e 02 	sts	0x020E, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    1ed8:	80 91 80 00 	lds	r24, 0x0080
    1edc:	8f 77       	andi	r24, 0x7F	; 127
    1ede:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    1ee2:	2d 98       	cbi	0x05, 5	; 5
    1ee4:	b9 c8       	rjmp	.-3726   	; 0x1058 <main+0x296>
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1ee6:	10 92 10 02 	sts	0x0210, r1
						pwm_green = 0;
    1eea:	10 92 0f 02 	sts	0x020F, r1
						pwm_red = 0;
    1eee:	10 92 0e 02 	sts	0x020E, r1
    1ef2:	f2 cf       	rjmp	.-28     	; 0x1ed8 <main+0x1116>

00001ef4 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1ef4:	84 b1       	in	r24, 0x04	; 4
    1ef6:	80 7f       	andi	r24, 0xF0	; 240
    1ef8:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1efa:	84 b1       	in	r24, 0x04	; 4
    1efc:	87 60       	ori	r24, 0x07	; 7
    1efe:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1f00:	80 e5       	ldi	r24, 0x50	; 80
    1f02:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1f04:	8d b5       	in	r24, 0x2d	; 45
    1f06:	81 60       	ori	r24, 0x01	; 1
    1f08:	8d bd       	out	0x2d, r24	; 45

}
    1f0a:	08 95       	ret

00001f0c <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f0c:	44 23       	and	r20, r20
    1f0e:	79 f0       	breq	.+30     	; 0x1f2e <SPI_ReadWrite_Block+0x22>
    1f10:	a8 2f       	mov	r26, r24
    1f12:	b9 2f       	mov	r27, r25
    1f14:	e6 2f       	mov	r30, r22
    1f16:	f7 2f       	mov	r31, r23
    1f18:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1f1a:	9d 91       	ld	r25, X+
    1f1c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1f1e:	0d b4       	in	r0, 0x2d	; 45
    1f20:	07 fe       	sbrs	r0, 7
    1f22:	fd cf       	rjmp	.-6      	; 0x1f1e <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1f24:	9e b5       	in	r25, 0x2e	; 46
    1f26:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f28:	8f 5f       	subi	r24, 0xFF	; 255
    1f2a:	84 17       	cp	r24, r20
    1f2c:	b0 f3       	brcs	.-20     	; 0x1f1a <SPI_ReadWrite_Block+0xe>
    1f2e:	08 95       	ret

00001f30 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f30:	66 23       	and	r22, r22
    1f32:	59 f0       	breq	.+22     	; 0x1f4a <SPI_Write_Block+0x1a>
    1f34:	e8 2f       	mov	r30, r24
    1f36:	f9 2f       	mov	r31, r25
    1f38:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1f3a:	91 91       	ld	r25, Z+
    1f3c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1f3e:	0d b4       	in	r0, 0x2d	; 45
    1f40:	07 fe       	sbrs	r0, 7
    1f42:	fd cf       	rjmp	.-6      	; 0x1f3e <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	86 17       	cp	r24, r22
    1f48:	c0 f3       	brcs	.-16     	; 0x1f3a <SPI_Write_Block+0xa>
    1f4a:	08 95       	ret

00001f4c <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1f4c:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1f4e:	0d b4       	in	r0, 0x2d	; 45
    1f50:	07 fe       	sbrs	r0, 7
    1f52:	fd cf       	rjmp	.-6      	; 0x1f4e <SPI_Write_Byte+0x2>
    return SPDR;
    1f54:	8e b5       	in	r24, 0x2e	; 46
}
    1f56:	08 95       	ret

00001f58 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <mirf_config+0xa>
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f66:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f68:	80 e2       	ldi	r24, 0x20	; 32
    1f6a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f6e:	8d e0       	ldi	r24, 0x0D	; 13
    1f70:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    1f74:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f76:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f78:	83 e2       	ldi	r24, 0x23	; 35
    1f7a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    1f84:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    1f86:	8c e0       	ldi	r24, 0x0C	; 12
    1f88:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    1f8a:	83 e8       	ldi	r24, 0x83	; 131
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1f8e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1f90:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f92:	80 e3       	ldi	r24, 0x30	; 48
    1f94:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1f98:	8e 01       	movw	r16, r28
    1f9a:	0f 5f       	subi	r16, 0xFF	; 255
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	63 e0       	ldi	r22, 0x03	; 3
    1fa2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <SPI_Write_Block>
    mirf_CSN_hi;
    1fa6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1fa8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1faa:	8a e2       	ldi	r24, 0x2A	; 42
    1fac:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	63 e0       	ldi	r22, 0x03	; 3
    1fb4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <SPI_Write_Block>
    mirf_CSN_hi;
    1fb8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fbc:	81 e2       	ldi	r24, 0x21	; 33
    1fbe:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    1fc8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fcc:	82 e2       	ldi	r24, 0x22	; 34
    1fce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    1fd8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fda:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fdc:	84 e2       	ldi	r24, 0x24	; 36
    1fde:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fe2:	82 e1       	ldi	r24, 0x12	; 18
    1fe4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    1fe8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fec:	85 e2       	ldi	r24, 0x25	; 37
    1fee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ff2:	88 e2       	ldi	r24, 0x28	; 40
    1ff4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    1ff8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ffa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ffc:	81 e3       	ldi	r24, 0x31	; 49
    1ffe:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2002:	86 e0       	ldi	r24, 0x06	; 6
    2004:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2008:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    200a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    200c:	80 e5       	ldi	r24, 0x50	; 80
    200e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    2012:	83 e7       	ldi	r24, 0x73	; 115
    2014:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2018:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    201a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    201c:	8c e3       	ldi	r24, 0x3C	; 60
    201e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2028:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    202a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    202c:	8d e3       	ldi	r24, 0x3D	; 61
    202e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2032:	86 e0       	ldi	r24, 0x06	; 6
    2034:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2038:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    203a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    203c:	80 e2       	ldi	r24, 0x20	; 32
    203e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2042:	8f e0       	ldi	r24, 0x0F	; 15
    2044:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2048:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    205a:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    205c:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    205e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <mirf_config>
}
    2062:	08 95       	ret

00002064 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    206a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    206c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    206e:	8a e2       	ldi	r24, 0x2A	; 42
    2070:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2074:	ce 01       	movw	r24, r28
    2076:	65 e0       	ldi	r22, 0x05	; 5
    2078:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <SPI_Write_Block>
    mirf_CSN_hi;
    207c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    207e:	2c 9a       	sbi	0x05, 4	; 5
}
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	08 95       	ret

00002086 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    208c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    208e:	80 e3       	ldi	r24, 0x30	; 48
    2090:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2094:	ce 01       	movw	r24, r28
    2096:	65 e0       	ldi	r22, 0x05	; 5
    2098:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <SPI_Write_Block>
    mirf_CSN_hi;
    209c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    20a4:	80 91 e2 03 	lds	r24, 0x03E2
    20a8:	88 23       	and	r24, r24
    20aa:	11 f0       	breq	.+4      	; 0x20b0 <mirf_data_ready+0xc>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    20ae:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    20b0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    20b8:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    20ba:	80 74       	andi	r24, 0x40	; 64
    20bc:	08 95       	ret

000020be <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    20c8:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    20ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    20cc:	87 e1       	ldi	r24, 0x17	; 23
    20ce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    20d2:	be 01       	movw	r22, r28
    20d4:	6f 5f       	subi	r22, 0xFF	; 255
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	cb 01       	movw	r24, r22
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    20e0:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e4:	81 70       	andi	r24, 0x01	; 1
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    20ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    20f0:	82 ee       	ldi	r24, 0xE2	; 226
    20f2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    20f6:	28 9a       	sbi	0x05, 0	; 5

}
    20f8:	08 95       	ret

000020fa <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    2100:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    2102:	81 e6       	ldi	r24, 0x61	; 97
    2104:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    2108:	ce 01       	movw	r24, r28
    210a:	be 01       	movw	r22, r28
    210c:	46 e0       	ldi	r20, 0x06	; 6
    210e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2112:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2114:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2116:	87 e2       	ldi	r24, 0x27	; 39
    2118:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    211c:	80 e4       	ldi	r24, 0x40	; 64
    211e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2122:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	08 95       	ret

0000212a <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    2134:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2136:	8f 71       	andi	r24, 0x1F	; 31
    2138:	80 62       	ori	r24, 0x20	; 32
    213a:	69 83       	std	Y+1, r22	; 0x01
    213c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2140:	69 81       	ldd	r22, Y+1	; 0x01
    2142:	86 2f       	mov	r24, r22
    2144:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2148:	28 9a       	sbi	0x05, 0	; 5
}
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2162:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2164:	8f 71       	andi	r24, 0x1F	; 31
    2166:	49 83       	std	Y+1, r20	; 0x01
    2168:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    216c:	c8 01       	movw	r24, r16
    216e:	b8 01       	movw	r22, r16
    2170:	49 81       	ldd	r20, Y+1	; 0x01
    2172:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2176:	28 9a       	sbi	0x05, 0	; 5
}
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	08 95       	ret

00002184 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	0f 92       	push	r0
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2194:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2196:	8f 71       	andi	r24, 0x1F	; 31
    2198:	80 62       	ori	r24, 0x20	; 32
    219a:	49 83       	std	Y+1, r20	; 0x01
    219c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    21a0:	c8 01       	movw	r24, r16
    21a2:	49 81       	ldd	r20, Y+1	; 0x01
    21a4:	64 2f       	mov	r22, r20
    21a6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <SPI_Write_Block>
    mirf_CSN_hi;
    21aa:	28 9a       	sbi	0x05, 0	; 5
}
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	0f 92       	push	r0
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    21c8:	80 91 e2 03 	lds	r24, 0x03E2
    21cc:	88 23       	and	r24, r24
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <mirf_send+0x10>

    mirf_CE_lo;
    21d0:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	80 93 e2 03 	sts	0x03E2, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21da:	80 e2       	ldi	r24, 0x20	; 32
    21dc:	69 83       	std	Y+1, r22	; 0x01
    21de:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21e2:	8a e4       	ldi	r24, 0x4A	; 74
    21e4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    21e8:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    21ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    21ec:	81 ee       	ldi	r24, 0xE1	; 225
    21ee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    21f2:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    21f4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    21f6:	80 ea       	ldi	r24, 0xA0	; 160
    21f8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    21fc:	c8 01       	movw	r24, r16
    21fe:	69 81       	ldd	r22, Y+1	; 0x01
    2200:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    2204:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    2206:	2c 9a       	sbi	0x05, 4	; 5
}
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	08 95       	ret

00002214 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	0f 92       	push	r0
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	18 2f       	mov	r17, r24
    2228:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    222a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    222c:	81 ee       	ldi	r24, 0xE1	; 225
    222e:	99 83       	std	Y+1, r25	; 0x01
    2230:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2234:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2236:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2238:	88 ea       	ldi	r24, 0xA8	; 168
    223a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    223e:	99 81       	ldd	r25, Y+1	; 0x01
    2240:	00 23       	and	r16, r16
    2242:	61 f0       	breq	.+24     	; 0x225c <writeAckPayload+0x48>
    2244:	61 2f       	mov	r22, r17
    2246:	79 2f       	mov	r23, r25
    2248:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    224a:	f7 01       	movw	r30, r14
    224c:	81 91       	ld	r24, Z+
    224e:	7f 01       	movw	r14, r30
    2250:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    2254:	8e 2d       	mov	r24, r14
    2256:	81 1b       	sub	r24, r17
    2258:	80 17       	cp	r24, r16
    225a:	b8 f3       	brcs	.-18     	; 0x224a <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    225c:	28 9a       	sbi	0x05, 0	; 5


}
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	1f 91       	pop	r17
    2266:	0f 91       	pop	r16
    2268:	ff 90       	pop	r15
    226a:	ef 90       	pop	r14
    226c:	08 95       	ret

0000226e <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    226e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2270:	81 ee       	ldi	r24, 0xE1	; 225
    2272:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SPI_Write_Byte>
    mirf_CSN_hi;
    2276:	28 9a       	sbi	0x05, 0	; 5

}
    2278:	08 95       	ret

0000227a <e_start_agendas_processing>:
	// Timer2 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of 10 KHz => 8000000/10000 = 800 (too much for 8-bits)
	// We use a 1/8 prescaler: 1000000/10000 = 100
	// The CTC mode let us chose the TOP value to be 100
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    227a:	e0 eb       	ldi	r30, 0xB0	; 176
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	82 60       	ori	r24, 0x02	; 2
    2282:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS01);		// 1/8 prescaler
    2284:	e1 eb       	ldi	r30, 0xB1	; 177
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR2A = 100;
    228e:	84 e6       	ldi	r24, 0x64	; 100
    2290:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 |= (1 << OCIE2A);
    2294:	e0 e7       	ldi	r30, 0x70	; 112
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	82 60       	ori	r24, 0x02	; 2
    229c:	80 83       	st	Z, r24
//	// Timer4 clock input = Fosc/2 = 2 MHz
//	// Period time = PR * 1/(Fosc/2) => PR = period time * Fosc/2
//	// We need a period time of 100 us => 0.0001 * 2000000 = 200
//	OpenTimer4(T4_ON | T4_PS_1_1 | T4_32BIT_MODE_OFF | T4_SOURCE_INT, 200);

}
    229e:	08 95       	ret

000022a0 <e_end_agendas_processing>:
 * use \ref e_destroy_agenda(void (*func)(void)) for that.
 * \sa e_destroy_agenda
 */
void e_end_agendas_processing(void)
{
	TCCR2B &= ~(1 << CS01);
    22a0:	e1 eb       	ldi	r30, 0xB1	; 177
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8d 7f       	andi	r24, 0xFD	; 253
    22a8:	80 83       	st	Z, r24
	//T4CONbits.TON = 0;    // disable Timer2
}
    22aa:	08 95       	ret

000022ac <e_activate_agenda>:
 * \param func	 function called if the cycle value is reached by the counter
 * \param cycle      cycle value in millisec/10
 * \return \ref EXIT_OK if the agenda has been created, exit the programme otherwise
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	ec 01       	movw	r28, r24
    22ba:	7b 01       	movw	r14, r22
	Agenda *current = agenda_list;
    22bc:	00 91 23 03 	lds	r16, 0x0323
    22c0:	10 91 24 03 	lds	r17, 0x0324

	while (current)
    22c4:	01 15       	cp	r16, r1
    22c6:	11 05       	cpc	r17, r1
    22c8:	89 f0       	breq	.+34     	; 0x22ec <e_activate_agenda+0x40>
	{
		if (current->function == func)
    22ca:	f8 01       	movw	r30, r16
    22cc:	85 81       	ldd	r24, Z+5	; 0x05
    22ce:	96 81       	ldd	r25, Z+6	; 0x06
    22d0:	8c 17       	cp	r24, r28
    22d2:	9d 07       	cpc	r25, r29
    22d4:	31 f4       	brne	.+12     	; 0x22e2 <e_activate_agenda+0x36>
    22d6:	1f c0       	rjmp	.+62     	; 0x2316 <e_activate_agenda+0x6a>
    22d8:	85 81       	ldd	r24, Z+5	; 0x05
    22da:	96 81       	ldd	r25, Z+6	; 0x06
    22dc:	8c 17       	cp	r24, r28
    22de:	9d 07       	cpc	r25, r29
    22e0:	d1 f0       	breq	.+52     	; 0x2316 <e_activate_agenda+0x6a>
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
    22e2:	07 80       	ldd	r0, Z+7	; 0x07
    22e4:	f0 85       	ldd	r31, Z+8	; 0x08
    22e6:	e0 2d       	mov	r30, r0
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    22e8:	30 97       	sbiw	r30, 0x00	; 0
    22ea:	b1 f7       	brne	.-20     	; 0x22d8 <e_activate_agenda+0x2c>
		if (current->function == func)
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
    22ec:	89 e0       	ldi	r24, 0x09	; 9
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <malloc>
    22f4:	fc 01       	movw	r30, r24
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	b9 f0       	breq	.+46     	; 0x2328 <e_activate_agenda+0x7c>
		exit (1); //(EXIT_FAILURE);

	current->cycle = cycle;
    22fa:	f1 82       	std	Z+1, r15	; 0x01
    22fc:	e0 82       	st	Z, r14
	current->counter = 0;
    22fe:	13 82       	std	Z+3, r1	; 0x03
    2300:	12 82       	std	Z+2, r1	; 0x02
	current->activate = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	84 83       	std	Z+4, r24	; 0x04
	current->function = func;
    2306:	d6 83       	std	Z+6, r29	; 0x06
    2308:	c5 83       	std	Z+5, r28	; 0x05
	current->next = agenda_list;
    230a:	10 87       	std	Z+8, r17	; 0x08
    230c:	07 83       	std	Z+7, r16	; 0x07

	agenda_list = current;
    230e:	f0 93 24 03 	sts	0x0324, r31
    2312:	e0 93 23 03 	sts	0x0323, r30
	return(EXIT_OK);
}
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	08 95       	ret
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
		exit (1); //(EXIT_FAILURE);
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 32 23 	call	0x4664	; 0x4664 <_exit>

00002330 <e_destroy_agenda>:
 * \return \ref EXIT_OK if the agenda has been destroyed, \ref AG_NOT_FOUND otherwise
 */
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;
    2330:	a0 91 23 03 	lds	r26, 0x0323
    2334:	b0 91 24 03 	lds	r27, 0x0324

	while (current)
    2338:	10 97       	sbiw	r26, 0x00	; 0
    233a:	a1 f0       	breq	.+40     	; 0x2364 <e_destroy_agenda+0x34>
	{
		if (current->function == func)
    233c:	15 96       	adiw	r26, 0x05	; 5
    233e:	2d 91       	ld	r18, X+
    2340:	3c 91       	ld	r19, X
    2342:	16 97       	sbiw	r26, 0x06	; 6
    2344:	28 17       	cp	r18, r24
    2346:	39 07       	cpc	r19, r25
    2348:	39 f4       	brne	.+14     	; 0x2358 <e_destroy_agenda+0x28>
    234a:	1d c0       	rjmp	.+58     	; 0x2386 <e_destroy_agenda+0x56>
    234c:	25 81       	ldd	r18, Z+5	; 0x05
    234e:	36 81       	ldd	r19, Z+6	; 0x06
    2350:	28 17       	cp	r18, r24
    2352:	39 07       	cpc	r19, r25
    2354:	59 f0       	breq	.+22     	; 0x236c <e_destroy_agenda+0x3c>
    2356:	df 01       	movw	r26, r30
			return(EXIT_OK);
		}			
		else
		{
			preceding = current;
			current = current->next;
    2358:	17 96       	adiw	r26, 0x07	; 7
    235a:	ed 91       	ld	r30, X+
    235c:	fc 91       	ld	r31, X
    235e:	18 97       	sbiw	r26, 0x08	; 8
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;

	while (current)
    2360:	30 97       	sbiw	r30, 0x00	; 0
    2362:	a1 f7       	brne	.-24     	; 0x234c <e_destroy_agenda+0x1c>
		{
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
    2364:	22 e0       	ldi	r18, 0x02	; 2
    2366:	30 e0       	ldi	r19, 0x00	; 0
}
    2368:	c9 01       	movw	r24, r18
    236a:	08 95       	ret
	while (current)
	{
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
    236c:	87 81       	ldd	r24, Z+7	; 0x07
    236e:	90 85       	ldd	r25, Z+8	; 0x08
    2370:	18 96       	adiw	r26, 0x08	; 8
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
    2376:	17 97       	sbiw	r26, 0x07	; 7
			else
				agenda_list		= current->next;

			free(current);
    2378:	cf 01       	movw	r24, r30
    237a:	0e 94 8e 20 	call	0x411c	; 0x411c <free>
			return(EXIT_OK);
    237e:	21 e0       	ldi	r18, 0x01	; 1
    2380:	30 e0       	ldi	r19, 0x00	; 0
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
}
    2382:	c9 01       	movw	r24, r18
    2384:	08 95       	ret
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
			else
				agenda_list		= current->next;
    2386:	17 96       	adiw	r26, 0x07	; 7
    2388:	8d 91       	ld	r24, X+
    238a:	9c 91       	ld	r25, X
    238c:	18 97       	sbiw	r26, 0x08	; 8
    238e:	90 93 24 03 	sts	0x0324, r25
    2392:	80 93 23 03 	sts	0x0323, r24
    2396:	fd 01       	movw	r30, r26
    2398:	ef cf       	rjmp	.-34     	; 0x2378 <e_destroy_agenda+0x48>

0000239a <e_set_agenda_cycle>:
 * \return \ref EXIT_OK if the cycle of the agenda has been modified,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;
    239a:	e0 91 23 03 	lds	r30, 0x0323
    239e:	f0 91 24 03 	lds	r31, 0x0324

	while (current)
    23a2:	30 97       	sbiw	r30, 0x00	; 0
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <e_set_agenda_cycle+0x18>
    23a6:	10 c0       	rjmp	.+32     	; 0x23c8 <e_set_agenda_cycle+0x2e>
		{
			current->cycle = cycle;
			return(EXIT_OK);
		}
		else
			current = current->next;
    23a8:	07 80       	ldd	r0, Z+7	; 0x07
    23aa:	f0 85       	ldd	r31, Z+8	; 0x08
    23ac:	e0 2d       	mov	r30, r0
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	59 f0       	breq	.+22     	; 0x23c8 <e_set_agenda_cycle+0x2e>
	{
		if (current->function == func)
    23b2:	25 81       	ldd	r18, Z+5	; 0x05
    23b4:	36 81       	ldd	r19, Z+6	; 0x06
    23b6:	28 17       	cp	r18, r24
    23b8:	39 07       	cpc	r19, r25
    23ba:	b1 f7       	brne	.-20     	; 0x23a8 <e_set_agenda_cycle+0xe>
		{
			current->cycle = cycle;
    23bc:	71 83       	std	Z+1, r23	; 0x01
    23be:	60 83       	st	Z, r22
			return(EXIT_OK);
    23c0:	21 e0       	ldi	r18, 0x01	; 1
    23c2:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    23c4:	c9 01       	movw	r24, r18
    23c6:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    23c8:	22 e0       	ldi	r18, 0x02	; 2
    23ca:	30 e0       	ldi	r19, 0x00	; 0
}
    23cc:	c9 01       	movw	r24, r18
    23ce:	08 95       	ret

000023d0 <e_reset_agenda>:
 * \ref e_pause_agenda(void (*func)(void))
 * \sa e_pause_agenda
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    23d0:	e0 91 23 03 	lds	r30, 0x0323
    23d4:	f0 91 24 03 	lds	r31, 0x0324

	while (current)
    23d8:	30 97       	sbiw	r30, 0x00	; 0
    23da:	31 f4       	brne	.+12     	; 0x23e8 <e_reset_agenda+0x18>
    23dc:	10 c0       	rjmp	.+32     	; 0x23fe <e_reset_agenda+0x2e>
		{
			current->counter = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    23de:	07 80       	ldd	r0, Z+7	; 0x07
    23e0:	f0 85       	ldd	r31, Z+8	; 0x08
    23e2:	e0 2d       	mov	r30, r0
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;

	while (current)
    23e4:	30 97       	sbiw	r30, 0x00	; 0
    23e6:	59 f0       	breq	.+22     	; 0x23fe <e_reset_agenda+0x2e>
	{
		if (current->function == func)
    23e8:	25 81       	ldd	r18, Z+5	; 0x05
    23ea:	36 81       	ldd	r19, Z+6	; 0x06
    23ec:	28 17       	cp	r18, r24
    23ee:	39 07       	cpc	r19, r25
    23f0:	b1 f7       	brne	.-20     	; 0x23de <e_reset_agenda+0xe>
		{
			current->counter = 0;
    23f2:	13 82       	std	Z+3, r1	; 0x03
    23f4:	12 82       	std	Z+2, r1	; 0x02
			return(EXIT_OK);
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    23fa:	c9 01       	movw	r24, r18
    23fc:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    23fe:	22 e0       	ldi	r18, 0x02	; 2
    2400:	30 e0       	ldi	r19, 0x00	; 0
}
    2402:	c9 01       	movw	r24, r18
    2404:	08 95       	ret

00002406 <e_pause_agenda>:
 * \return \ref EXIT_OK the agenda has been paused,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    2406:	e0 91 23 03 	lds	r30, 0x0323
    240a:	f0 91 24 03 	lds	r31, 0x0324
	
	while (current)
    240e:	30 97       	sbiw	r30, 0x00	; 0
    2410:	31 f4       	brne	.+12     	; 0x241e <e_pause_agenda+0x18>
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <e_pause_agenda+0x2c>
		{
			current->activate = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    2414:	07 80       	ldd	r0, Z+7	; 0x07
    2416:	f0 85       	ldd	r31, Z+8	; 0x08
    2418:	e0 2d       	mov	r30, r0
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    241a:	30 97       	sbiw	r30, 0x00	; 0
    241c:	51 f0       	breq	.+20     	; 0x2432 <e_pause_agenda+0x2c>
	{
		if (current->function == func)
    241e:	25 81       	ldd	r18, Z+5	; 0x05
    2420:	36 81       	ldd	r19, Z+6	; 0x06
    2422:	28 17       	cp	r18, r24
    2424:	39 07       	cpc	r19, r25
    2426:	b1 f7       	brne	.-20     	; 0x2414 <e_pause_agenda+0xe>
		{
			current->activate = 0;
    2428:	14 82       	std	Z+4, r1	; 0x04
			return(EXIT_OK);
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    242e:	c9 01       	movw	r24, r18
    2430:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2432:	22 e0       	ldi	r18, 0x02	; 2
    2434:	30 e0       	ldi	r19, 0x00	; 0
	
}
    2436:	c9 01       	movw	r24, r18
    2438:	08 95       	ret

0000243a <e_restart_agenda>:
 *         \ref AG_NOT_FOUND otherwise
 * \sa e_pause_agenda
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    243a:	e0 91 23 03 	lds	r30, 0x0323
    243e:	f0 91 24 03 	lds	r31, 0x0324
	
	while (current)
    2442:	30 97       	sbiw	r30, 0x00	; 0
    2444:	31 f4       	brne	.+12     	; 0x2452 <e_restart_agenda+0x18>
    2446:	10 c0       	rjmp	.+32     	; 0x2468 <e_restart_agenda+0x2e>
		{
			current->activate = 1;
			return(EXIT_OK);
		}
		else
			current = current->next;
    2448:	07 80       	ldd	r0, Z+7	; 0x07
    244a:	f0 85       	ldd	r31, Z+8	; 0x08
    244c:	e0 2d       	mov	r30, r0
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    244e:	30 97       	sbiw	r30, 0x00	; 0
    2450:	59 f0       	breq	.+22     	; 0x2468 <e_restart_agenda+0x2e>
	{
		if (current->function == func)
    2452:	25 81       	ldd	r18, Z+5	; 0x05
    2454:	36 81       	ldd	r19, Z+6	; 0x06
    2456:	28 17       	cp	r18, r24
    2458:	39 07       	cpc	r19, r25
    245a:	b1 f7       	brne	.-20     	; 0x2448 <e_restart_agenda+0xe>
		{
			current->activate = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	84 83       	std	Z+4, r24	; 0x04
			return(EXIT_OK);
    2460:	21 e0       	ldi	r18, 0x01	; 1
    2462:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    2464:	c9 01       	movw	r24, r18
    2466:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2468:	22 e0       	ldi	r18, 0x02	; 2
    246a:	30 e0       	ldi	r19, 0x00	; 0
	
}
    246c:	c9 01       	movw	r24, r18
    246e:	08 95       	ret

00002470 <e_init_remote_control>:

/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) // initialisation for IR interruptions on INT0
{

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    2470:	e8 e6       	ldi	r30, 0x68	; 104
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	82 60       	ori	r24, 0x02	; 2
    2478:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    247a:	ec e6       	ldi	r30, 0x6C	; 108
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	80 68       	ori	r24, 0x80	; 128
    2482:	80 83       	st	Z, r24
	IFS0bits.INT0IF = 0;      //clear to enable interrupt
	IEC0bits.INT0IE = 1;      //enable interrupt on INT0  
	return;
*/

	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    2484:	e0 eb       	ldi	r30, 0xB0	; 176
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	82 60       	ori	r24, 0x02	; 2
    248c:	80 83       	st	Z, r24

}
    248e:	08 95       	ret

00002490 <__vector_10>:

ISR(PCINT1_vect) {
    2490:	1f 92       	push	r1
    2492:	0f 92       	push	r0
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	0f 92       	push	r0
    2498:	11 24       	eor	r1, r1
    249a:	8f 93       	push	r24
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}


	if(bit_is_clear(PINJ, 6)) {
    249c:	80 91 03 01 	lds	r24, 0x0103
    24a0:	86 fd       	sbrc	r24, 6
    24a2:	1d c0       	rjmp	.+58     	; 0x24de <__vector_10+0x4e>
			TCCR1A &= ~(1 << COM1C1);
			PORTB &= ~(1 << 7);
		}
*/
		//IEC0bits.INT0IE = 0;   			//disable interrup from falling edge
		PCICR &= ~(1 << PCIE1);
    24a4:	80 91 68 00 	lds	r24, 0x0068
    24a8:	8d 7f       	andi	r24, 0xFD	; 253
    24aa:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 &= ~(1 << PCINT15);
    24ae:	80 91 6c 00 	lds	r24, 0x006C
    24b2:	8f 77       	andi	r24, 0x7F	; 127
    24b4:	80 93 6c 00 	sts	0x006C, r24
		// we need 2 ms of delay:
		// 2/0.128 = 15.6
		//OCR2A = 16;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 2/0.032 = 63 => 2.016 ms
		OCR2A = 64;
    24b8:	80 e4       	ldi	r24, 0x40	; 64
    24ba:	80 93 b3 00 	sts	0x00B3, r24
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    24be:	80 91 b1 00 	lds	r24, 0x00B1
    24c2:	86 60       	ori	r24, 0x06	; 6
    24c4:	80 93 b1 00 	sts	0x00B1, r24
		TIMSK2 |= (1 << OCIE2A);		
    24c8:	80 91 70 00 	lds	r24, 0x0070
    24cc:	82 60       	ori	r24, 0x02	; 2
    24ce:	80 93 70 00 	sts	0x0070, r24
				
//		PORTB |= (1 << 5);

		check_temp = address_temp = data_temp = 0;
    24d2:	10 92 28 03 	sts	0x0328, r1
    24d6:	10 92 29 03 	sts	0x0329, r1
    24da:	10 92 2a 03 	sts	0x032A, r1
		return;
	}
}
    24de:	8f 91       	pop	r24
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <e_read_remote_control>:
{
	static int i = -1;
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    24ea:	80 91 03 02 	lds	r24, 0x0203
    24ee:	90 91 04 02 	lds	r25, 0x0204
    24f2:	2f ef       	ldi	r18, 0xFF	; 255
    24f4:	8f 3f       	cpi	r24, 0xFF	; 255
    24f6:	92 07       	cpc	r25, r18
    24f8:	09 f4       	brne	.+2      	; 0x24fc <e_read_remote_control+0x12>
    24fa:	6a c0       	rjmp	.+212    	; 0x25d0 <e_read_remote_control+0xe6>
				i=0;
			}
	} 	
//	e_set_led(2,1);
	
	else if (i == 1)	// check bit read and change timer period
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	91 05       	cpc	r25, r1
    2500:	09 f4       	brne	.+2      	; 0x2504 <e_read_remote_control+0x1a>
    2502:	75 c0       	rjmp	.+234    	; 0x25ee <e_read_remote_control+0x104>
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
		TIMSK2 |= (1 << OCIE2A);

		//e_set_led(1,1);
	} 
	else if ((i > 1) && (i < 7)) // we read address
    2504:	9c 01       	movw	r18, r24
    2506:	22 50       	subi	r18, 0x02	; 2
    2508:	30 40       	sbci	r19, 0x00	; 0
    250a:	25 30       	cpi	r18, 0x05	; 5
    250c:	31 05       	cpc	r19, r1
    250e:	78 f5       	brcc	.+94     	; 0x256e <e_read_remote_control+0x84>
//	e_set_led(4,1);
		
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 55;
    2510:	27 e3       	ldi	r18, 0x37	; 55
    2512:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2516:	20 91 b1 00 	lds	r18, 0x00B1
    251a:	26 60       	ori	r18, 0x06	; 6
    251c:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    2520:	20 91 70 00 	lds	r18, 0x0070
    2524:	22 60       	ori	r18, 0x02	; 2
    2526:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    252a:	20 91 03 01 	lds	r18, 0x0103
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	20 74       	andi	r18, 0x40	; 64
    2532:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6-i;
    2534:	00 24       	eor	r0, r0
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	00 1c       	adc	r0, r0
    253c:	22 0f       	add	r18, r18
    253e:	33 1f       	adc	r19, r19
    2540:	00 1c       	adc	r0, r0
    2542:	23 2f       	mov	r18, r19
    2544:	30 2d       	mov	r19, r0
    2546:	46 e0       	ldi	r20, 0x06	; 6
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	48 1b       	sub	r20, r24
    254c:	59 0b       	sbc	r21, r25
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <e_read_remote_control+0x6a>
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	4a 95       	dec	r20
    2556:	e2 f7       	brpl	.-8      	; 0x2550 <e_read_remote_control+0x66>
		address_temp += temp;
    2558:	40 91 29 03 	lds	r20, 0x0329
    255c:	42 0f       	add	r20, r18
    255e:	40 93 29 03 	sts	0x0329, r20
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
}
    2562:	01 96       	adiw	r24, 0x01	; 1
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
    2564:	90 93 04 02 	sts	0x0204, r25
    2568:	80 93 03 02 	sts	0x0203, r24
    256c:	08 95       	ret

		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;
	}
	else if ((i > 6) && (i < 13 )) // we read data
    256e:	9c 01       	movw	r18, r24
    2570:	27 50       	subi	r18, 0x07	; 7
    2572:	30 40       	sbci	r19, 0x00	; 0
    2574:	26 30       	cpi	r18, 0x06	; 6
    2576:	31 05       	cpc	r19, r1
    2578:	08 f0       	brcs	.+2      	; 0x257c <e_read_remote_control+0x92>
    257a:	70 c0       	rjmp	.+224    	; 0x265c <e_read_remote_control+0x172>
//			e_set_led(5,1);

		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 54;
    257c:	26 e3       	ldi	r18, 0x36	; 54
    257e:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2582:	20 91 b1 00 	lds	r18, 0x00B1
    2586:	26 60       	ori	r18, 0x06	; 6
    2588:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    258c:	20 91 70 00 	lds	r18, 0x0070
    2590:	22 60       	ori	r18, 0x02	; 2
    2592:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    2596:	20 91 03 01 	lds	r18, 0x0103
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	20 74       	andi	r18, 0x40	; 64
    259e:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6+6-i;
    25a0:	00 24       	eor	r0, r0
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	00 1c       	adc	r0, r0
    25a8:	22 0f       	add	r18, r18
    25aa:	33 1f       	adc	r19, r19
    25ac:	00 1c       	adc	r0, r0
    25ae:	23 2f       	mov	r18, r19
    25b0:	30 2d       	mov	r19, r0
    25b2:	4c e0       	ldi	r20, 0x0C	; 12
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	48 1b       	sub	r20, r24
    25b8:	59 0b       	sbc	r21, r25
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <e_read_remote_control+0xd6>
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	4a 95       	dec	r20
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <e_read_remote_control+0xd2>
		data_temp += temp;
    25c4:	40 91 28 03 	lds	r20, 0x0328
    25c8:	42 0f       	add	r20, r18
    25ca:	40 93 28 03 	sts	0x0328, r20
    25ce:	c9 cf       	rjmp	.-110    	; 0x2562 <e_read_remote_control+0x78>
//			SetDCOC3PWM_GB(64,64);
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

		if(REMOTE){
    25d0:	20 91 03 01 	lds	r18, 0x0103
    25d4:	26 ff       	sbrs	r18, 6
    25d6:	28 c0       	rjmp	.+80     	; 0x2628 <e_read_remote_control+0x13e>
		//if(bit_is_set(PINJ,6)) {
			//if high it is only a noise
				//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
				//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
				PCICR |= (1 << PCIE1);
    25d8:	20 91 68 00 	lds	r18, 0x0068
    25dc:	22 60       	ori	r18, 0x02	; 2
    25de:	20 93 68 00 	sts	0x0068, r18
				PCMSK1 |= (1 << PCINT15);
    25e2:	20 91 6c 00 	lds	r18, 0x006C
    25e6:	20 68       	ori	r18, 0x80	; 128
    25e8:	20 93 6c 00 	sts	0x006C, r18
    25ec:	08 95       	ret
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

//	e_set_led(3,1);
		check_temp = REMOTE;	   // read the check bit
    25ee:	20 91 03 01 	lds	r18, 0x0103
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	20 74       	andi	r18, 0x40	; 64
    25f6:	30 70       	andi	r19, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	23 2f       	mov	r18, r19
    25fc:	00 0c       	add	r0, r0
    25fe:	22 1f       	adc	r18, r18
    2600:	33 0b       	sbc	r19, r19
    2602:	00 0c       	add	r0, r0
    2604:	22 1f       	adc	r18, r18
    2606:	33 1f       	adc	r19, r19
    2608:	20 93 2a 03 	sts	0x032A, r18
		//e_set_agenda_cycle(e_read_remote_control, 18); //cycle value is 1.778[ms]
		// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
    260c:	25 e3       	ldi	r18, 0x35	; 53
    260e:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2612:	20 91 b1 00 	lds	r18, 0x00B1
    2616:	26 60       	ori	r18, 0x06	; 6
    2618:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    261c:	20 91 70 00 	lds	r18, 0x0070
    2620:	22 60       	ori	r18, 0x02	; 2
    2622:	20 93 70 00 	sts	0x0070, r18
    2626:	9d cf       	rjmp	.-198    	; 0x2562 <e_read_remote_control+0x78>
				//e_set_agenda_cycle(e_read_remote_control, 6); //cycle value is 0.6 to go to check bit[ms]
				// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
				//OCR2A = 5;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 0.6/0.032 = 19 => 0.608
				OCR2A = 28;
    2628:	8c e1       	ldi	r24, 0x1C	; 28
    262a:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    262e:	80 91 b1 00 	lds	r24, 0x00B1
    2632:	86 60       	ori	r24, 0x06	; 6
    2634:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);									
    2638:	80 91 70 00 	lds	r24, 0x0070
    263c:	82 60       	ori	r24, 0x02	; 2
    263e:	80 93 70 00 	sts	0x0070, r24

				check_temp = address_temp = data_temp = 0;
    2642:	10 92 28 03 	sts	0x0328, r1
    2646:	10 92 29 03 	sts	0x0329, r1
    264a:	10 92 2a 03 	sts	0x032A, r1
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
    2652:	90 93 04 02 	sts	0x0204, r25
    2656:	80 93 03 02 	sts	0x0203, r24
    265a:	08 95       	ret
		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;
	}
	
	else if (i == 13) // last bit read
    265c:	8d 30       	cpi	r24, 0x0D	; 13
    265e:	91 05       	cpc	r25, r1
    2660:	09 f0       	breq	.+2      	; 0x2664 <e_read_remote_control+0x17a>
    2662:	7f cf       	rjmp	.-258    	; 0x2562 <e_read_remote_control+0x78>
//		}

		//e_set_led(1,0);
		//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
		//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
		PCICR |= (1 << PCIE1);
    2664:	80 91 68 00 	lds	r24, 0x0068
    2668:	82 60       	ori	r24, 0x02	; 2
    266a:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);
    266e:	80 91 6c 00 	lds	r24, 0x006C
    2672:	80 68       	ori	r24, 0x80	; 128
    2674:	80 93 6c 00 	sts	0x006C, r24
		//e_destroy_agenda(e_read_remote_control);
		i = -1;
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f ef       	ldi	r25, 0xFF	; 255
    267c:	90 93 04 02 	sts	0x0204, r25
    2680:	80 93 03 02 	sts	0x0203, r24
		check = check_temp;
    2684:	80 91 2a 03 	lds	r24, 0x032A
    2688:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    268c:	80 91 29 03 	lds	r24, 0x0329
    2690:	80 93 25 03 	sts	0x0325, r24
		data_ir = data_temp;
    2694:	80 91 28 03 	lds	r24, 0x0328
    2698:	80 93 26 03 	sts	0x0326, r24
		command_received=1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	80 93 c7 03 	sts	0x03C7, r24
    26a2:	08 95       	ret

000026a4 <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    26a4:	80 91 00 02 	lds	r24, 0x0200
    26a8:	08 95       	ret

000026aa <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    26aa:	80 91 25 03 	lds	r24, 0x0325
    26ae:	08 95       	ret

000026b0 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    26b0:	80 91 26 03 	lds	r24, 0x0326
    26b4:	08 95       	ret

000026b6 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    26b6:	1f 92       	push	r1
    26b8:	0f 92       	push	r0
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	0f 92       	push	r0
    26be:	11 24       	eor	r1, r1
    26c0:	2f 93       	push	r18
    26c2:	3f 93       	push	r19
    26c4:	4f 93       	push	r20
    26c6:	5f 93       	push	r21
    26c8:	8f 93       	push	r24
    26ca:	9f 93       	push	r25

//	PORTB ^= (1 << 5);

//	PORTB &= ~(1 << 5);

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);
    26cc:	80 91 b1 00 	lds	r24, 0x00B1
    26d0:	88 7f       	andi	r24, 0xF8	; 248
    26d2:	80 93 b1 00 	sts	0x00B1, r24

	//e_read_remote_control();
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    26d6:	80 91 01 02 	lds	r24, 0x0201
    26da:	90 91 02 02 	lds	r25, 0x0202
    26de:	2f ef       	ldi	r18, 0xFF	; 255
    26e0:	8f 3f       	cpi	r24, 0xFF	; 255
    26e2:	92 07       	cpc	r25, r18
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <__vector_13+0x32>
    26e6:	74 c0       	rjmp	.+232    	; 0x27d0 <__vector_13+0x11a>
			TIMSK2 |= (1 << OCIE2A);									

			check_temp = address_temp = data_temp = 0;
			i=0;
		}
	} else if (i == 1)	{ // check bit read and change timer period
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	91 05       	cpc	r25, r1
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <__vector_13+0x3a>
    26ee:	7f c0       	rjmp	.+254    	; 0x27ee <__vector_13+0x138>
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
		TIMSK2 |= (1 << OCIE2A);

	} else if ((i > 1) && (i < 7)) { // we read address
    26f0:	9c 01       	movw	r18, r24
    26f2:	22 50       	subi	r18, 0x02	; 2
    26f4:	30 40       	sbci	r19, 0x00	; 0
    26f6:	25 30       	cpi	r18, 0x05	; 5
    26f8:	31 05       	cpc	r19, r1
    26fa:	c8 f5       	brcc	.+114    	; 0x276e <__vector_13+0xb8>
		
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 55;
    26fc:	27 e3       	ldi	r18, 0x37	; 55
    26fe:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2702:	20 91 b1 00 	lds	r18, 0x00B1
    2706:	26 60       	ori	r18, 0x06	; 6
    2708:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    270c:	20 91 70 00 	lds	r18, 0x0070
    2710:	22 60       	ori	r18, 0x02	; 2
    2712:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    2716:	20 91 03 01 	lds	r18, 0x0103
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	20 74       	andi	r18, 0x40	; 64
    271e:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6-i;
    2720:	00 24       	eor	r0, r0
    2722:	22 0f       	add	r18, r18
    2724:	33 1f       	adc	r19, r19
    2726:	00 1c       	adc	r0, r0
    2728:	22 0f       	add	r18, r18
    272a:	33 1f       	adc	r19, r19
    272c:	00 1c       	adc	r0, r0
    272e:	23 2f       	mov	r18, r19
    2730:	30 2d       	mov	r19, r0
    2732:	46 e0       	ldi	r20, 0x06	; 6
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	48 1b       	sub	r20, r24
    2738:	59 0b       	sbc	r21, r25
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <__vector_13+0x8a>
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	4a 95       	dec	r20
    2742:	e2 f7       	brpl	.-8      	; 0x273c <__vector_13+0x86>
		address_temp += temp;
    2744:	40 91 29 03 	lds	r20, 0x0329
    2748:	42 0f       	add	r20, r18
    274a:	40 93 29 03 	sts	0x0329, r20
	if(i!=-1)
		i++;

//	PORTB |= (1 << 5);

}
    274e:	01 96       	adiw	r24, 0x01	; 1
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
		i++;
    2750:	90 93 02 02 	sts	0x0202, r25
    2754:	80 93 01 02 	sts	0x0201, r24

//	PORTB |= (1 << 5);

}
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	5f 91       	pop	r21
    275e:	4f 91       	pop	r20
    2760:	3f 91       	pop	r19
    2762:	2f 91       	pop	r18
    2764:	0f 90       	pop	r0
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	0f 90       	pop	r0
    276a:	1f 90       	pop	r1
    276c:	18 95       	reti

		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;

	} else if ((i > 6) && (i < 13 )) { // we read data
    276e:	9c 01       	movw	r18, r24
    2770:	27 50       	subi	r18, 0x07	; 7
    2772:	30 40       	sbci	r19, 0x00	; 0
    2774:	26 30       	cpi	r18, 0x06	; 6
    2776:	31 05       	cpc	r19, r1
    2778:	08 f0       	brcs	.+2      	; 0x277c <__vector_13+0xc6>
    277a:	6c c0       	rjmp	.+216    	; 0x2854 <__vector_13+0x19e>

		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 54;
    277c:	26 e3       	ldi	r18, 0x36	; 54
    277e:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2782:	20 91 b1 00 	lds	r18, 0x00B1
    2786:	26 60       	ori	r18, 0x06	; 6
    2788:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    278c:	20 91 70 00 	lds	r18, 0x0070
    2790:	22 60       	ori	r18, 0x02	; 2
    2792:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    2796:	20 91 03 01 	lds	r18, 0x0103
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	20 74       	andi	r18, 0x40	; 64
    279e:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6+6-i;
    27a0:	00 24       	eor	r0, r0
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	00 1c       	adc	r0, r0
    27a8:	22 0f       	add	r18, r18
    27aa:	33 1f       	adc	r19, r19
    27ac:	00 1c       	adc	r0, r0
    27ae:	23 2f       	mov	r18, r19
    27b0:	30 2d       	mov	r19, r0
    27b2:	4c e0       	ldi	r20, 0x0C	; 12
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	48 1b       	sub	r20, r24
    27b8:	59 0b       	sbc	r21, r25
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <__vector_13+0x10a>
    27bc:	22 0f       	add	r18, r18
    27be:	33 1f       	adc	r19, r19
    27c0:	4a 95       	dec	r20
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <__vector_13+0x106>
		data_temp += temp;
    27c4:	40 91 28 03 	lds	r20, 0x0328
    27c8:	42 0f       	add	r20, r18
    27ca:	40 93 28 03 	sts	0x0328, r20
    27ce:	bf cf       	rjmp	.-130    	; 0x274e <__vector_13+0x98>
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
	{

		if(REMOTE) {	//if high it is only a noise
    27d0:	20 91 03 01 	lds	r18, 0x0103
    27d4:	26 ff       	sbrs	r18, 6
    27d6:	28 c0       	rjmp	.+80     	; 0x2828 <__vector_13+0x172>

			PCICR |= (1 << PCIE1);		// enable interrupt
    27d8:	20 91 68 00 	lds	r18, 0x0068
    27dc:	22 60       	ori	r18, 0x02	; 2
    27de:	20 93 68 00 	sts	0x0068, r18
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    27e2:	20 91 6c 00 	lds	r18, 0x006C
    27e6:	20 68       	ori	r18, 0x80	; 128
    27e8:	20 93 6c 00 	sts	0x006C, r18
    27ec:	b5 cf       	rjmp	.-150    	; 0x2758 <__vector_13+0xa2>
			check_temp = address_temp = data_temp = 0;
			i=0;
		}
	} else if (i == 1)	{ // check bit read and change timer period

		check_temp = REMOTE;	   // read the check bit
    27ee:	20 91 03 01 	lds	r18, 0x0103
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	20 74       	andi	r18, 0x40	; 64
    27f6:	30 70       	andi	r19, 0x00	; 0
    27f8:	02 2e       	mov	r0, r18
    27fa:	23 2f       	mov	r18, r19
    27fc:	00 0c       	add	r0, r0
    27fe:	22 1f       	adc	r18, r18
    2800:	33 0b       	sbc	r19, r19
    2802:	00 0c       	add	r0, r0
    2804:	22 1f       	adc	r18, r18
    2806:	33 1f       	adc	r19, r19
    2808:	20 93 2a 03 	sts	0x032A, r18
		//cycle value is 1.778[ms]
		// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
    280c:	25 e3       	ldi	r18, 0x35	; 53
    280e:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2812:	20 91 b1 00 	lds	r18, 0x00B1
    2816:	26 60       	ori	r18, 0x06	; 6
    2818:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    281c:	20 91 70 00 	lds	r18, 0x0070
    2820:	22 60       	ori	r18, 0x02	; 2
    2822:	20 93 70 00 	sts	0x0070, r18
    2826:	93 cf       	rjmp	.-218    	; 0x274e <__vector_13+0x98>
			//cycle value is 0.6 to go to check bit[ms]
			// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
			//OCR2A = 5;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 0.6/0.032 = 19 => 0.608
			OCR2A = 28;
    2828:	8c e1       	ldi	r24, 0x1C	; 28
    282a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    282e:	80 91 b1 00 	lds	r24, 0x00B1
    2832:	86 60       	ori	r24, 0x06	; 6
    2834:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);									
    2838:	80 91 70 00 	lds	r24, 0x0070
    283c:	82 60       	ori	r24, 0x02	; 2
    283e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2842:	10 92 28 03 	sts	0x0328, r1
    2846:	10 92 29 03 	sts	0x0329, r1
    284a:	10 92 2a 03 	sts	0x032A, r1
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	7e cf       	rjmp	.-260    	; 0x2750 <__vector_13+0x9a>

		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;

	} else if (i == 13) { // last bit read
    2854:	8d 30       	cpi	r24, 0x0D	; 13
    2856:	91 05       	cpc	r25, r1
    2858:	09 f0       	breq	.+2      	; 0x285c <__vector_13+0x1a6>
    285a:	79 cf       	rjmp	.-270    	; 0x274e <__vector_13+0x98>

		PCICR |= (1 << PCIE1);		// enable interrupt
    285c:	80 91 68 00 	lds	r24, 0x0068
    2860:	82 60       	ori	r24, 0x02	; 2
    2862:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2866:	80 91 6c 00 	lds	r24, 0x006C
    286a:	80 68       	ori	r24, 0x80	; 128
    286c:	80 93 6c 00 	sts	0x006C, r24

		i = -1;
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	9f ef       	ldi	r25, 0xFF	; 255
    2874:	90 93 02 02 	sts	0x0202, r25
    2878:	80 93 01 02 	sts	0x0201, r24
		check = check_temp;
    287c:	80 91 2a 03 	lds	r24, 0x032A
    2880:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    2884:	80 91 29 03 	lds	r24, 0x0329
    2888:	80 93 25 03 	sts	0x0325, r24
		data_ir = data_temp;
    288c:	80 91 28 03 	lds	r24, 0x0328
    2890:	80 93 26 03 	sts	0x0326, r24
		command_received=1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	80 93 c7 03 	sts	0x03C7, r24
    289a:	5e cf       	rjmp	.-324    	; 0x2758 <__vector_13+0xa2>

0000289c <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    289c:	08 95       	ret

0000289e <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    289e:	08 95       	ret

000028a0 <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    28a0:	2f 92       	push	r2
    28a2:	3f 92       	push	r3
    28a4:	4f 92       	push	r4
    28a6:	5f 92       	push	r5
    28a8:	6f 92       	push	r6
    28aa:	7f 92       	push	r7
    28ac:	8f 92       	push	r8
    28ae:	9f 92       	push	r9
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	2c 97       	sbiw	r28, 0x0c	; 12
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	9c 87       	std	Y+12, r25	; 0x0c
    28d6:	8b 87       	std	Y+11, r24	; 0x0b
    28d8:	79 87       	std	Y+9, r23	; 0x09
    28da:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    28dc:	fc 01       	movw	r30, r24
    28de:	20 80       	ld	r2, Z
    28e0:	31 80       	ldd	r3, Z+1	; 0x01
    28e2:	42 80       	ldd	r4, Z+2	; 0x02
    28e4:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    28e6:	fb 01       	movw	r30, r22
    28e8:	a0 80       	ld	r10, Z
    28ea:	b1 80       	ldd	r11, Z+1	; 0x01
    28ec:	c2 80       	ldd	r12, Z+2	; 0x02
    28ee:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    28f0:	21 14       	cp	r2, r1
    28f2:	31 04       	cpc	r3, r1
    28f4:	41 04       	cpc	r4, r1
    28f6:	51 04       	cpc	r5, r1
    28f8:	31 f4       	brne	.+12     	; 0x2906 <start_orizzontal_speed_control+0x66>
    28fa:	a1 14       	cp	r10, r1
    28fc:	b1 04       	cpc	r11, r1
    28fe:	c1 04       	cpc	r12, r1
    2900:	d1 04       	cpc	r13, r1
    2902:	09 f4       	brne	.+2      	; 0x2906 <start_orizzontal_speed_control+0x66>
    2904:	bd c1       	rjmp	.+890    	; 0x2c80 <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    2906:	60 90 07 04 	lds	r6, 0x0407
    290a:	70 90 08 04 	lds	r7, 0x0408
    290e:	80 90 09 04 	lds	r8, 0x0409
    2912:	90 90 0a 04 	lds	r9, 0x040A
    2916:	60 92 0b 04 	sts	0x040B, r6
    291a:	70 92 0c 04 	sts	0x040C, r7
    291e:	80 92 0d 04 	sts	0x040D, r8
    2922:	90 92 0e 04 	sts	0x040E, r9
	if(pwm_right_working >= 0) {
    2926:	d7 fc       	sbrc	r13, 7
    2928:	35 c2       	rjmp	.+1130   	; 0x2d94 <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    292a:	80 91 82 03 	lds	r24, 0x0382
    292e:	90 91 83 03 	lds	r25, 0x0383
    2932:	a0 e0       	ldi	r26, 0x00	; 0
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	86 01       	movw	r16, r12
    2938:	75 01       	movw	r14, r10
    293a:	e8 1a       	sub	r14, r24
    293c:	f9 0a       	sbc	r15, r25
    293e:	0a 0b       	sbc	r16, r26
    2940:	1b 0b       	sbc	r17, r27
    2942:	e0 92 a0 03 	sts	0x03A0, r14
    2946:	f0 92 a1 03 	sts	0x03A1, r15
    294a:	00 93 a2 03 	sts	0x03A2, r16
    294e:	10 93 a3 03 	sts	0x03A3, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    2952:	e0 92 07 04 	sts	0x0407, r14
    2956:	f0 92 08 04 	sts	0x0408, r15
    295a:	00 93 09 04 	sts	0x0409, r16
    295e:	10 93 0a 04 	sts	0x040A, r17
	delta_right_speed_sum += delta_right_speed;
    2962:	60 91 a8 03 	lds	r22, 0x03A8
    2966:	70 91 a9 03 	lds	r23, 0x03A9
    296a:	80 91 aa 03 	lds	r24, 0x03AA
    296e:	90 91 ab 03 	lds	r25, 0x03AB
    2972:	6e 0d       	add	r22, r14
    2974:	7f 1d       	adc	r23, r15
    2976:	80 1f       	adc	r24, r16
    2978:	91 1f       	adc	r25, r17
    297a:	60 93 a8 03 	sts	0x03A8, r22
    297e:	70 93 a9 03 	sts	0x03A9, r23
    2982:	80 93 aa 03 	sts	0x03AA, r24
    2986:	90 93 ab 03 	sts	0x03AB, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    298a:	61 38       	cpi	r22, 0x81	; 129
    298c:	fc e0       	ldi	r31, 0x0C	; 12
    298e:	7f 07       	cpc	r23, r31
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	8f 07       	cpc	r24, r31
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	9f 07       	cpc	r25, r31
    2998:	0c f0       	brlt	.+2      	; 0x299c <start_orizzontal_speed_control+0xfc>
    299a:	8b c1       	rjmp	.+790    	; 0x2cb2 <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    299c:	60 38       	cpi	r22, 0x80	; 128
    299e:	e3 ef       	ldi	r30, 0xF3	; 243
    29a0:	7e 07       	cpc	r23, r30
    29a2:	ef ef       	ldi	r30, 0xFF	; 255
    29a4:	8e 07       	cpc	r24, r30
    29a6:	ef ef       	ldi	r30, 0xFF	; 255
    29a8:	9e 07       	cpc	r25, r30
    29aa:	0c f4       	brge	.+2      	; 0x29ae <start_orizzontal_speed_control+0x10e>
    29ac:	2c c2       	rjmp	.+1112   	; 0x2e06 <start_orizzontal_speed_control+0x566>
    29ae:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__addsf3>
    29ba:	6d 83       	std	Y+5, r22	; 0x05
    29bc:	7e 83       	std	Y+6, r23	; 0x06
    29be:	8f 83       	std	Y+7, r24	; 0x07
    29c0:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    29c2:	c8 01       	movw	r24, r16
    29c4:	b7 01       	movw	r22, r14
    29c6:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	48 ec       	ldi	r20, 0xC8	; 200
    29d0:	52 e4       	ldi	r21, 0x42	; 66
    29d2:	0e 94 ed 1b 	call	0x37da	; 0x37da <__mulsf3>
    29d6:	69 83       	std	Y+1, r22	; 0x01
    29d8:	7a 83       	std	Y+2, r23	; 0x02
    29da:	8b 83       	std	Y+3, r24	; 0x03
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	c8 01       	movw	r24, r16
    29e0:	b7 01       	movw	r22, r14
    29e2:	66 19       	sub	r22, r6
    29e4:	77 09       	sbc	r23, r7
    29e6:	88 09       	sbc	r24, r8
    29e8:	99 09       	sbc	r25, r9
    29ea:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 ed 1b 	call	0x37da	; 0x37da <__mulsf3>
    29fa:	9b 01       	movw	r18, r22
    29fc:	ac 01       	movw	r20, r24
    29fe:	69 81       	ldd	r22, Y+1	; 0x01
    2a00:	7a 81       	ldd	r23, Y+2	; 0x02
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__addsf3>
    2a0a:	bd 81       	ldd	r27, Y+5	; 0x05
    2a0c:	ae 81       	ldd	r26, Y+6	; 0x06
    2a0e:	ef 80       	ldd	r14, Y+7	; 0x07
    2a10:	6a 84       	ldd	r6, Y+10	; 0x0a
    2a12:	2b 2f       	mov	r18, r27
    2a14:	3a 2f       	mov	r19, r26
    2a16:	4e 2d       	mov	r20, r14
    2a18:	56 2d       	mov	r21, r6
    2a1a:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__addsf3>
    2a1e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    2a22:	7b 01       	movw	r14, r22
    2a24:	8c 01       	movw	r16, r24
    2a26:	60 93 b0 03 	sts	0x03B0, r22
    2a2a:	70 93 b1 03 	sts	0x03B1, r23
    2a2e:	80 93 b2 03 	sts	0x03B2, r24
    2a32:	90 93 b3 03 	sts	0x03B3, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    2a36:	c6 01       	movw	r24, r12
    2a38:	b5 01       	movw	r22, r10
    2a3a:	28 e7       	ldi	r18, 0x78	; 120
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__mulsi3>
    2a46:	6e 0d       	add	r22, r14
    2a48:	7f 1d       	adc	r23, r15
    2a4a:	80 1f       	adc	r24, r16
    2a4c:	91 1f       	adc	r25, r17
    2a4e:	60 93 94 03 	sts	0x0394, r22
    2a52:	70 93 95 03 	sts	0x0395, r23
    2a56:	80 93 96 03 	sts	0x0396, r24
    2a5a:	90 93 97 03 	sts	0x0397, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2a5e:	97 fd       	sbrc	r25, 7
    2a60:	76 c1       	rjmp	.+748    	; 0x2d4e <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    2a62:	16 16       	cp	r1, r22
    2a64:	17 06       	cpc	r1, r23
    2a66:	18 06       	cpc	r1, r24
    2a68:	19 06       	cpc	r1, r25
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <start_orizzontal_speed_control+0x1ce>
    2a6c:	7d c1       	rjmp	.+762    	; 0x2d68 <start_orizzontal_speed_control+0x4c8>
    2a6e:	d7 fc       	sbrc	r13, 7
    2a70:	fd c1       	rjmp	.+1018   	; 0x2e6c <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2a72:	61 3c       	cpi	r22, 0xC1	; 193
    2a74:	ed e5       	ldi	r30, 0x5D	; 93
    2a76:	7e 07       	cpc	r23, r30
    2a78:	e0 e0       	ldi	r30, 0x00	; 0
    2a7a:	8e 07       	cpc	r24, r30
    2a7c:	e0 e0       	ldi	r30, 0x00	; 0
    2a7e:	9e 07       	cpc	r25, r30
    2a80:	0c f4       	brge	.+2      	; 0x2a84 <start_orizzontal_speed_control+0x1e4>
    2a82:	72 c1       	rjmp	.+740    	; 0x2d68 <start_orizzontal_speed_control+0x4c8>
    2a84:	80 ec       	ldi	r24, 0xC0	; 192
    2a86:	9d e5       	ldi	r25, 0x5D	; 93
    2a88:	a0 e0       	ldi	r26, 0x00	; 0
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	80 93 94 03 	sts	0x0394, r24
    2a90:	90 93 95 03 	sts	0x0395, r25
    2a94:	a0 93 96 03 	sts	0x0396, r26
    2a98:	b0 93 97 03 	sts	0x0397, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    2a9c:	a0 90 ff 03 	lds	r10, 0x03FF
    2aa0:	b0 90 00 04 	lds	r11, 0x0400
    2aa4:	c0 90 01 04 	lds	r12, 0x0401
    2aa8:	d0 90 02 04 	lds	r13, 0x0402
    2aac:	a0 92 03 04 	sts	0x0403, r10
    2ab0:	b0 92 04 04 	sts	0x0404, r11
    2ab4:	c0 92 05 04 	sts	0x0405, r12
    2ab8:	d0 92 06 04 	sts	0x0406, r13
	if(pwm_left_working >= 0) {
    2abc:	57 fc       	sbrc	r5, 7
    2abe:	7d c1       	rjmp	.+762    	; 0x2dba <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    2ac0:	80 91 80 03 	lds	r24, 0x0380
    2ac4:	90 91 81 03 	lds	r25, 0x0381
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	82 01       	movw	r16, r4
    2ace:	71 01       	movw	r14, r2
    2ad0:	e8 1a       	sub	r14, r24
    2ad2:	f9 0a       	sbc	r15, r25
    2ad4:	0a 0b       	sbc	r16, r26
    2ad6:	1b 0b       	sbc	r17, r27
    2ad8:	e0 92 9c 03 	sts	0x039C, r14
    2adc:	f0 92 9d 03 	sts	0x039D, r15
    2ae0:	00 93 9e 03 	sts	0x039E, r16
    2ae4:	10 93 9f 03 	sts	0x039F, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    2ae8:	e0 92 ff 03 	sts	0x03FF, r14
    2aec:	f0 92 00 04 	sts	0x0400, r15
    2af0:	00 93 01 04 	sts	0x0401, r16
    2af4:	10 93 02 04 	sts	0x0402, r17
	delta_left_speed_sum += delta_left_speed;
    2af8:	60 91 a4 03 	lds	r22, 0x03A4
    2afc:	70 91 a5 03 	lds	r23, 0x03A5
    2b00:	80 91 a6 03 	lds	r24, 0x03A6
    2b04:	90 91 a7 03 	lds	r25, 0x03A7
    2b08:	6e 0d       	add	r22, r14
    2b0a:	7f 1d       	adc	r23, r15
    2b0c:	80 1f       	adc	r24, r16
    2b0e:	91 1f       	adc	r25, r17
    2b10:	60 93 a4 03 	sts	0x03A4, r22
    2b14:	70 93 a5 03 	sts	0x03A5, r23
    2b18:	80 93 a6 03 	sts	0x03A6, r24
    2b1c:	90 93 a7 03 	sts	0x03A7, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    2b20:	61 38       	cpi	r22, 0x81	; 129
    2b22:	2c e0       	ldi	r18, 0x0C	; 12
    2b24:	72 07       	cpc	r23, r18
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	82 07       	cpc	r24, r18
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	92 07       	cpc	r25, r18
    2b2e:	0c f4       	brge	.+2      	; 0x2b32 <start_orizzontal_speed_control+0x292>
    2b30:	d3 c0       	rjmp	.+422    	; 0x2cd8 <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2b32:	80 e8       	ldi	r24, 0x80	; 128
    2b34:	9c e0       	ldi	r25, 0x0C	; 12
    2b36:	a0 e0       	ldi	r26, 0x00	; 0
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	80 93 a4 03 	sts	0x03A4, r24
    2b3e:	90 93 a5 03 	sts	0x03A5, r25
    2b42:	a0 93 a6 03 	sts	0x03A6, r26
    2b46:	b0 93 a7 03 	sts	0x03A7, r27
    2b4a:	19 82       	std	Y+1, r1	; 0x01
    2b4c:	1d 82       	std	Y+5, r1	; 0x05
    2b4e:	88 ec       	ldi	r24, 0xC8	; 200
    2b50:	8e 83       	std	Y+6, r24	; 0x06
    2b52:	e5 e4       	ldi	r30, 0x45	; 69
    2b54:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    2b56:	c8 01       	movw	r24, r16
    2b58:	b7 01       	movw	r22, r14
    2b5a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	48 ec       	ldi	r20, 0xC8	; 200
    2b64:	52 e4       	ldi	r21, 0x42	; 66
    2b66:	0e 94 ed 1b 	call	0x37da	; 0x37da <__mulsf3>
    2b6a:	3b 01       	movw	r6, r22
    2b6c:	4c 01       	movw	r8, r24
    2b6e:	c8 01       	movw	r24, r16
    2b70:	b7 01       	movw	r22, r14
    2b72:	6a 19       	sub	r22, r10
    2b74:	7b 09       	sbc	r23, r11
    2b76:	8c 09       	sbc	r24, r12
    2b78:	9d 09       	sbc	r25, r13
    2b7a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 ed 1b 	call	0x37da	; 0x37da <__mulsf3>
    2b8a:	9b 01       	movw	r18, r22
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	c4 01       	movw	r24, r8
    2b90:	b3 01       	movw	r22, r6
    2b92:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__addsf3>
    2b96:	b9 81       	ldd	r27, Y+1	; 0x01
    2b98:	ad 81       	ldd	r26, Y+5	; 0x05
    2b9a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b9c:	af 80       	ldd	r10, Y+7	; 0x07
    2b9e:	2b 2f       	mov	r18, r27
    2ba0:	3a 2f       	mov	r19, r26
    2ba2:	4e 2d       	mov	r20, r14
    2ba4:	5a 2d       	mov	r21, r10
    2ba6:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__addsf3>
    2baa:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    2bae:	7b 01       	movw	r14, r22
    2bb0:	8c 01       	movw	r16, r24
    2bb2:	60 93 ac 03 	sts	0x03AC, r22
    2bb6:	70 93 ad 03 	sts	0x03AD, r23
    2bba:	80 93 ae 03 	sts	0x03AE, r24
    2bbe:	90 93 af 03 	sts	0x03AF, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    2bc2:	c2 01       	movw	r24, r4
    2bc4:	b1 01       	movw	r22, r2
    2bc6:	28 e7       	ldi	r18, 0x78	; 120
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__mulsi3>
    2bd2:	6e 0d       	add	r22, r14
    2bd4:	7f 1d       	adc	r23, r15
    2bd6:	80 1f       	adc	r24, r16
    2bd8:	91 1f       	adc	r25, r17
    2bda:	60 93 98 03 	sts	0x0398, r22
    2bde:	70 93 99 03 	sts	0x0399, r23
    2be2:	80 93 9a 03 	sts	0x039A, r24
    2be6:	90 93 9b 03 	sts	0x039B, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2bea:	97 fd       	sbrc	r25, 7
    2bec:	89 c0       	rjmp	.+274    	; 0x2d00 <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    2bee:	16 16       	cp	r1, r22
    2bf0:	17 06       	cpc	r1, r23
    2bf2:	18 06       	cpc	r1, r24
    2bf4:	19 06       	cpc	r1, r25
    2bf6:	0c f0       	brlt	.+2      	; 0x2bfa <start_orizzontal_speed_control+0x35a>
    2bf8:	90 c0       	rjmp	.+288    	; 0x2d1a <start_orizzontal_speed_control+0x47a>
    2bfa:	57 fc       	sbrc	r5, 7
    2bfc:	17 c1       	rjmp	.+558    	; 0x2e2c <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2bfe:	61 3c       	cpi	r22, 0xC1	; 193
    2c00:	ed e5       	ldi	r30, 0x5D	; 93
    2c02:	7e 07       	cpc	r23, r30
    2c04:	e0 e0       	ldi	r30, 0x00	; 0
    2c06:	8e 07       	cpc	r24, r30
    2c08:	e0 e0       	ldi	r30, 0x00	; 0
    2c0a:	9e 07       	cpc	r25, r30
    2c0c:	0c f4       	brge	.+2      	; 0x2c10 <start_orizzontal_speed_control+0x370>
    2c0e:	85 c0       	rjmp	.+266    	; 0x2d1a <start_orizzontal_speed_control+0x47a>
    2c10:	80 ec       	ldi	r24, 0xC0	; 192
    2c12:	9d e5       	ldi	r25, 0x5D	; 93
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	80 93 98 03 	sts	0x0398, r24
    2c1c:	90 93 99 03 	sts	0x0399, r25
    2c20:	a0 93 9a 03 	sts	0x039A, r26
    2c24:	b0 93 9b 03 	sts	0x039B, r27
    2c28:	64 eb       	ldi	r22, 0xB4	; 180
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2c30:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c32:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c34:	60 83       	st	Z, r22
    2c36:	71 83       	std	Z+1, r23	; 0x01
    2c38:	82 83       	std	Z+2, r24	; 0x02
    2c3a:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2c3c:	60 91 94 03 	lds	r22, 0x0394
    2c40:	70 91 95 03 	lds	r23, 0x0395
    2c44:	80 91 96 03 	lds	r24, 0x0396
    2c48:	90 91 97 03 	lds	r25, 0x0397
    2c4c:	26 e6       	ldi	r18, 0x66	; 102
    2c4e:	32 e0       	ldi	r19, 0x02	; 2
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__mulsi3>
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	39 e0       	ldi	r19, 0x09	; 9
    2c5c:	4d e3       	ldi	r20, 0x3D	; 61
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divmodsi4>
    2c64:	ca 01       	movw	r24, r20
    2c66:	b9 01       	movw	r22, r18
    2c68:	2c e3       	ldi	r18, 0x3C	; 60
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__mulsi3>
    2c74:	e8 85       	ldd	r30, Y+8	; 0x08
    2c76:	f9 85       	ldd	r31, Y+9	; 0x09
    2c78:	60 83       	st	Z, r22
    2c7a:	71 83       	std	Z+1, r23	; 0x01
    2c7c:	82 83       	std	Z+2, r24	; 0x02
    2c7e:	93 83       	std	Z+3, r25	; 0x03

}
    2c80:	2c 96       	adiw	r28, 0x0c	; 12
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	1f 91       	pop	r17
    2c92:	0f 91       	pop	r16
    2c94:	ff 90       	pop	r15
    2c96:	ef 90       	pop	r14
    2c98:	df 90       	pop	r13
    2c9a:	cf 90       	pop	r12
    2c9c:	bf 90       	pop	r11
    2c9e:	af 90       	pop	r10
    2ca0:	9f 90       	pop	r9
    2ca2:	8f 90       	pop	r8
    2ca4:	7f 90       	pop	r7
    2ca6:	6f 90       	pop	r6
    2ca8:	5f 90       	pop	r5
    2caa:	4f 90       	pop	r4
    2cac:	3f 90       	pop	r3
    2cae:	2f 90       	pop	r2
    2cb0:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2cb2:	80 e8       	ldi	r24, 0x80	; 128
    2cb4:	9c e0       	ldi	r25, 0x0C	; 12
    2cb6:	a0 e0       	ldi	r26, 0x00	; 0
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	80 93 a8 03 	sts	0x03A8, r24
    2cbe:	90 93 a9 03 	sts	0x03A9, r25
    2cc2:	a0 93 aa 03 	sts	0x03AA, r26
    2cc6:	b0 93 ab 03 	sts	0x03AB, r27
    2cca:	1d 82       	std	Y+5, r1	; 0x05
    2ccc:	1e 82       	std	Y+6, r1	; 0x06
    2cce:	28 ec       	ldi	r18, 0xC8	; 200
    2cd0:	2f 83       	std	Y+7, r18	; 0x07
    2cd2:	85 e4       	ldi	r24, 0x45	; 69
    2cd4:	8a 87       	std	Y+10, r24	; 0x0a
    2cd6:	75 ce       	rjmp	.-790    	; 0x29c2 <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2cd8:	60 38       	cpi	r22, 0x80	; 128
    2cda:	f3 ef       	ldi	r31, 0xF3	; 243
    2cdc:	7f 07       	cpc	r23, r31
    2cde:	ff ef       	ldi	r31, 0xFF	; 255
    2ce0:	8f 07       	cpc	r24, r31
    2ce2:	ff ef       	ldi	r31, 0xFF	; 255
    2ce4:	9f 07       	cpc	r25, r31
    2ce6:	0c f4       	brge	.+2      	; 0x2cea <start_orizzontal_speed_control+0x44a>
    2ce8:	7b c0       	rjmp	.+246    	; 0x2de0 <start_orizzontal_speed_control+0x540>
    2cea:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__floatsisf>
    2cee:	9b 01       	movw	r18, r22
    2cf0:	ac 01       	movw	r20, r24
    2cf2:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__addsf3>
    2cf6:	69 83       	std	Y+1, r22	; 0x01
    2cf8:	7d 83       	std	Y+5, r23	; 0x05
    2cfa:	8e 83       	std	Y+6, r24	; 0x06
    2cfc:	9f 83       	std	Y+7, r25	; 0x07
    2cfe:	2b cf       	rjmp	.-426    	; 0x2b56 <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2d00:	57 fc       	sbrc	r5, 7
    2d02:	0b c0       	rjmp	.+22     	; 0x2d1a <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    2d04:	10 92 98 03 	sts	0x0398, r1
    2d08:	10 92 99 03 	sts	0x0399, r1
    2d0c:	10 92 9a 03 	sts	0x039A, r1
    2d10:	10 92 9b 03 	sts	0x039B, r1
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2d1a:	60 34       	cpi	r22, 0x40	; 64
    2d1c:	f2 ea       	ldi	r31, 0xA2	; 162
    2d1e:	7f 07       	cpc	r23, r31
    2d20:	ff ef       	ldi	r31, 0xFF	; 255
    2d22:	8f 07       	cpc	r24, r31
    2d24:	ff ef       	ldi	r31, 0xFF	; 255
    2d26:	9f 07       	cpc	r25, r31
    2d28:	0c f0       	brlt	.+2      	; 0x2d2c <start_orizzontal_speed_control+0x48c>
    2d2a:	8b c0       	rjmp	.+278    	; 0x2e42 <start_orizzontal_speed_control+0x5a2>
    2d2c:	80 e4       	ldi	r24, 0x40	; 64
    2d2e:	92 ea       	ldi	r25, 0xA2	; 162
    2d30:	af ef       	ldi	r26, 0xFF	; 255
    2d32:	bf ef       	ldi	r27, 0xFF	; 255
    2d34:	80 93 98 03 	sts	0x0398, r24
    2d38:	90 93 99 03 	sts	0x0399, r25
    2d3c:	a0 93 9a 03 	sts	0x039A, r26
    2d40:	b0 93 9b 03 	sts	0x039B, r27
    2d44:	6c e4       	ldi	r22, 0x4C	; 76
    2d46:	7f ef       	ldi	r23, 0xFF	; 255
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	9f ef       	ldi	r25, 0xFF	; 255
    2d4c:	71 cf       	rjmp	.-286    	; 0x2c30 <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2d4e:	d7 fc       	sbrc	r13, 7
    2d50:	0b c0       	rjmp	.+22     	; 0x2d68 <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    2d52:	10 92 94 03 	sts	0x0394, r1
    2d56:	10 92 95 03 	sts	0x0395, r1
    2d5a:	10 92 96 03 	sts	0x0396, r1
    2d5e:	10 92 97 03 	sts	0x0397, r1
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2d68:	60 34       	cpi	r22, 0x40	; 64
    2d6a:	f2 ea       	ldi	r31, 0xA2	; 162
    2d6c:	7f 07       	cpc	r23, r31
    2d6e:	ff ef       	ldi	r31, 0xFF	; 255
    2d70:	8f 07       	cpc	r24, r31
    2d72:	ff ef       	ldi	r31, 0xFF	; 255
    2d74:	9f 07       	cpc	r25, r31
    2d76:	0c f0       	brlt	.+2      	; 0x2d7a <start_orizzontal_speed_control+0x4da>
    2d78:	91 ce       	rjmp	.-734    	; 0x2a9c <start_orizzontal_speed_control+0x1fc>
    2d7a:	80 e4       	ldi	r24, 0x40	; 64
    2d7c:	92 ea       	ldi	r25, 0xA2	; 162
    2d7e:	af ef       	ldi	r26, 0xFF	; 255
    2d80:	bf ef       	ldi	r27, 0xFF	; 255
    2d82:	80 93 94 03 	sts	0x0394, r24
    2d86:	90 93 95 03 	sts	0x0395, r25
    2d8a:	a0 93 96 03 	sts	0x0396, r26
    2d8e:	b0 93 97 03 	sts	0x0397, r27
    2d92:	84 ce       	rjmp	.-760    	; 0x2a9c <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    2d94:	e0 90 82 03 	lds	r14, 0x0382
    2d98:	f0 90 83 03 	lds	r15, 0x0383
    2d9c:	00 e0       	ldi	r16, 0x00	; 0
    2d9e:	10 e0       	ldi	r17, 0x00	; 0
    2da0:	ea 0c       	add	r14, r10
    2da2:	fb 1c       	adc	r15, r11
    2da4:	0c 1d       	adc	r16, r12
    2da6:	1d 1d       	adc	r17, r13
    2da8:	e0 92 a0 03 	sts	0x03A0, r14
    2dac:	f0 92 a1 03 	sts	0x03A1, r15
    2db0:	00 93 a2 03 	sts	0x03A2, r16
    2db4:	10 93 a3 03 	sts	0x03A3, r17
    2db8:	cc cd       	rjmp	.-1128   	; 0x2952 <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    2dba:	e0 90 80 03 	lds	r14, 0x0380
    2dbe:	f0 90 81 03 	lds	r15, 0x0381
    2dc2:	00 e0       	ldi	r16, 0x00	; 0
    2dc4:	10 e0       	ldi	r17, 0x00	; 0
    2dc6:	e2 0c       	add	r14, r2
    2dc8:	f3 1c       	adc	r15, r3
    2dca:	04 1d       	adc	r16, r4
    2dcc:	15 1d       	adc	r17, r5
    2dce:	e0 92 9c 03 	sts	0x039C, r14
    2dd2:	f0 92 9d 03 	sts	0x039D, r15
    2dd6:	00 93 9e 03 	sts	0x039E, r16
    2dda:	10 93 9f 03 	sts	0x039F, r17
    2dde:	84 ce       	rjmp	.-760    	; 0x2ae8 <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2de0:	80 e8       	ldi	r24, 0x80	; 128
    2de2:	93 ef       	ldi	r25, 0xF3	; 243
    2de4:	af ef       	ldi	r26, 0xFF	; 255
    2de6:	bf ef       	ldi	r27, 0xFF	; 255
    2de8:	80 93 a4 03 	sts	0x03A4, r24
    2dec:	90 93 a5 03 	sts	0x03A5, r25
    2df0:	a0 93 a6 03 	sts	0x03A6, r26
    2df4:	b0 93 a7 03 	sts	0x03A7, r27
    2df8:	19 82       	std	Y+1, r1	; 0x01
    2dfa:	1d 82       	std	Y+5, r1	; 0x05
    2dfc:	28 ec       	ldi	r18, 0xC8	; 200
    2dfe:	2e 83       	std	Y+6, r18	; 0x06
    2e00:	85 ec       	ldi	r24, 0xC5	; 197
    2e02:	8f 83       	std	Y+7, r24	; 0x07
    2e04:	a8 ce       	rjmp	.-688    	; 0x2b56 <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2e06:	80 e8       	ldi	r24, 0x80	; 128
    2e08:	93 ef       	ldi	r25, 0xF3	; 243
    2e0a:	af ef       	ldi	r26, 0xFF	; 255
    2e0c:	bf ef       	ldi	r27, 0xFF	; 255
    2e0e:	80 93 a8 03 	sts	0x03A8, r24
    2e12:	90 93 a9 03 	sts	0x03A9, r25
    2e16:	a0 93 aa 03 	sts	0x03AA, r26
    2e1a:	b0 93 ab 03 	sts	0x03AB, r27
    2e1e:	1d 82       	std	Y+5, r1	; 0x05
    2e20:	1e 82       	std	Y+6, r1	; 0x06
    2e22:	f8 ec       	ldi	r31, 0xC8	; 200
    2e24:	ff 83       	std	Y+7, r31	; 0x07
    2e26:	25 ec       	ldi	r18, 0xC5	; 197
    2e28:	2a 87       	std	Y+10, r18	; 0x0a
    2e2a:	cb cd       	rjmp	.-1130   	; 0x29c2 <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    2e2c:	10 92 98 03 	sts	0x0398, r1
    2e30:	10 92 99 03 	sts	0x0399, r1
    2e34:	10 92 9a 03 	sts	0x039A, r1
    2e38:	10 92 9b 03 	sts	0x039B, r1
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e42:	26 e6       	ldi	r18, 0x66	; 102
    2e44:	32 e0       	ldi	r19, 0x02	; 2
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__mulsi3>
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	39 e0       	ldi	r19, 0x09	; 9
    2e52:	4d e3       	ldi	r20, 0x3D	; 61
    2e54:	50 e0       	ldi	r21, 0x00	; 0
    2e56:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divmodsi4>
    2e5a:	ca 01       	movw	r24, r20
    2e5c:	b9 01       	movw	r22, r18
    2e5e:	2c e3       	ldi	r18, 0x3C	; 60
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__mulsi3>
    2e6a:	e2 ce       	rjmp	.-572    	; 0x2c30 <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    2e6c:	10 92 94 03 	sts	0x0394, r1
    2e70:	10 92 95 03 	sts	0x0395, r1
    2e74:	10 92 96 03 	sts	0x0396, r1
    2e78:	10 92 97 03 	sts	0x0397, r1
    2e7c:	0f ce       	rjmp	.-994    	; 0x2a9c <start_orizzontal_speed_control+0x1fc>

00002e7e <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    2e7e:	8f ef       	ldi	r24, 0xFF	; 255
    2e80:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    2e82:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2e84:	97 ef       	ldi	r25, 0xF7	; 247
    2e86:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    2e88:	90 ee       	ldi	r25, 0xE0	; 224
    2e8a:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    2e8c:	90 ef       	ldi	r25, 0xF0	; 240
    2e8e:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    2e90:	90 eb       	ldi	r25, 0xB0	; 176
    2e92:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2e94:	9c ef       	ldi	r25, 0xFC	; 252
    2e96:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    2e98:	93 e0       	ldi	r25, 0x03	; 3
    2e9a:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    2e9c:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2e9e:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    2ea0:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    2ea2:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    2ea4:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    2ea6:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    2eaa:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    2eae:	9f e8       	ldi	r25, 0x8F	; 143
    2eb0:	90 93 04 01 	sts	0x0104, r25
	PORTJ = 0x00;	// cliff pulse turned off
    2eb4:	10 92 05 01 	sts	0x0105, r1

	DDRK = 0x00;	// adc channel pins as input
    2eb8:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    2ebc:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    2ec0:	10 92 0b 01 	sts	0x010B, r1

		
}
    2ec4:	08 95       	ret

00002ec6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2ec6:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2ec8:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2eca:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2ece:	80 e2       	ldi	r24, 0x20	; 32
    2ed0:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2ed4:	08 95       	ret

00002ed6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2ed6:	94 ea       	ldi	r25, 0xA4	; 164
    2ed8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2edc:	90 91 bc 00 	lds	r25, 0x00BC
    2ee0:	97 ff       	sbrs	r25, 7
    2ee2:	fc cf       	rjmp	.-8      	; 0x2edc <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ee4:	90 91 b9 00 	lds	r25, 0x00B9
    2ee8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2eea:	98 30       	cpi	r25, 0x08	; 8
    2eec:	21 f0       	breq	.+8      	; 0x2ef6 <i2c_start+0x20>
    2eee:	90 31       	cpi	r25, 0x10	; 16
    2ef0:	11 f0       	breq	.+4      	; 0x2ef6 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2ef6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2efa:	84 e8       	ldi	r24, 0x84	; 132
    2efc:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2f00:	80 91 bc 00 	lds	r24, 0x00BC
    2f04:	87 ff       	sbrs	r24, 7
    2f06:	fc cf       	rjmp	.-8      	; 0x2f00 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2f08:	90 91 b9 00 	lds	r25, 0x00B9
    2f0c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2f0e:	98 31       	cpi	r25, 0x18	; 24
    2f10:	21 f0       	breq	.+8      	; 0x2f1a <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 34       	cpi	r25, 0x40	; 64
    2f16:	19 f0       	breq	.+6      	; 0x2f1e <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2f18:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2f1a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2f1c:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	08 95       	ret

00002f22 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f22:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2f24:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f26:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f28:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2f2c:	90 91 bc 00 	lds	r25, 0x00BC
    2f30:	97 ff       	sbrs	r25, 7
    2f32:	fc cf       	rjmp	.-8      	; 0x2f2c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2f34:	90 91 b9 00 	lds	r25, 0x00B9
    2f38:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2f3a:	98 30       	cpi	r25, 0x08	; 8
    2f3c:	11 f0       	breq	.+4      	; 0x2f42 <i2c_start_wait+0x20>
    2f3e:	90 31       	cpi	r25, 0x10	; 16
    2f40:	99 f7       	brne	.-26     	; 0x2f28 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2f42:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2f46:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2f4a:	90 91 bc 00 	lds	r25, 0x00BC
    2f4e:	97 ff       	sbrs	r25, 7
    2f50:	fc cf       	rjmp	.-8      	; 0x2f4a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2f52:	90 91 b9 00 	lds	r25, 0x00B9
    2f56:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2f58:	90 32       	cpi	r25, 0x20	; 32
    2f5a:	19 f0       	breq	.+6      	; 0x2f62 <i2c_start_wait+0x40>
    2f5c:	98 35       	cpi	r25, 0x58	; 88
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <i2c_start_wait+0x40>
    2f60:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f62:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2f66:	90 91 bc 00 	lds	r25, 0x00BC
    2f6a:	94 fd       	sbrc	r25, 4
    2f6c:	fc cf       	rjmp	.-8      	; 0x2f66 <i2c_start_wait+0x44>
    2f6e:	dc cf       	rjmp	.-72     	; 0x2f28 <i2c_start_wait+0x6>

00002f70 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f70:	94 ea       	ldi	r25, 0xA4	; 164
    2f72:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2f76:	90 91 bc 00 	lds	r25, 0x00BC
    2f7a:	97 ff       	sbrs	r25, 7
    2f7c:	fc cf       	rjmp	.-8      	; 0x2f76 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2f7e:	90 91 b9 00 	lds	r25, 0x00B9
    2f82:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2f84:	98 30       	cpi	r25, 0x08	; 8
    2f86:	21 f0       	breq	.+8      	; 0x2f90 <i2c_rep_start+0x20>
    2f88:	90 31       	cpi	r25, 0x10	; 16
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2f90:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2f94:	84 e8       	ldi	r24, 0x84	; 132
    2f96:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2f9a:	80 91 bc 00 	lds	r24, 0x00BC
    2f9e:	87 ff       	sbrs	r24, 7
    2fa0:	fc cf       	rjmp	.-8      	; 0x2f9a <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2fa2:	90 91 b9 00 	lds	r25, 0x00B9
    2fa6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2fa8:	98 31       	cpi	r25, 0x18	; 24
    2faa:	21 f0       	breq	.+8      	; 0x2fb4 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 34       	cpi	r25, 0x40	; 64
    2fb0:	19 f0       	breq	.+6      	; 0x2fb8 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2fb2:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2fb6:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	08 95       	ret

00002fbc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2fbc:	84 e9       	ldi	r24, 0x94	; 148
    2fbe:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2fc2:	80 91 bc 00 	lds	r24, 0x00BC
    2fc6:	84 fd       	sbrc	r24, 4
    2fc8:	fc cf       	rjmp	.-8      	; 0x2fc2 <i2c_stop+0x6>

}/* i2c_stop */
    2fca:	08 95       	ret

00002fcc <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2fcc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2fd0:	84 e8       	ldi	r24, 0x84	; 132
    2fd2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2fd6:	80 91 bc 00 	lds	r24, 0x00BC
    2fda:	87 ff       	sbrs	r24, 7
    2fdc:	fc cf       	rjmp	.-8      	; 0x2fd6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2fde:	90 91 b9 00 	lds	r25, 0x00B9
    2fe2:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	98 32       	cpi	r25, 0x28	; 40
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2fea:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2fec:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2fee:	08 95       	ret

00002ff0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2ff0:	84 ec       	ldi	r24, 0xC4	; 196
    2ff2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2ff6:	80 91 bc 00 	lds	r24, 0x00BC
    2ffa:	87 ff       	sbrs	r24, 7
    2ffc:	fc cf       	rjmp	.-8      	; 0x2ff6 <i2c_readAck+0x6>

    return TWDR;
    2ffe:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3002:	08 95       	ret

00003004 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3004:	84 e8       	ldi	r24, 0x84	; 132
    3006:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    300a:	80 91 bc 00 	lds	r24, 0x00BC
    300e:	87 ff       	sbrs	r24, 7
    3010:	fc cf       	rjmp	.-8      	; 0x300a <i2c_readNak+0x6>
	
    return TWDR;
    3012:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3016:	08 95       	ret

00003018 <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    3018:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    301c:	80 e1       	ldi	r24, 0x10	; 16
    301e:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3022:	e0 ec       	ldi	r30, 0xC0	; 192
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	82 60       	ori	r24, 0x02	; 2
    302a:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    302c:	e1 ec       	ldi	r30, 0xC1	; 193
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	88 69       	ori	r24, 0x98	; 152
    3034:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    3036:	e2 ec       	ldi	r30, 0xC2	; 194
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	86 60       	ori	r24, 0x06	; 6
    303e:	80 83       	st	Z, r24

}
    3040:	08 95       	ret

00003042 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    3042:	90 91 c0 00 	lds	r25, 0x00C0
    3046:	95 ff       	sbrs	r25, 5
    3048:	fc cf       	rjmp	.-8      	; 0x3042 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    304a:	80 93 c6 00 	sts	0x00C6, r24

}
    304e:	08 95       	ret

00003050 <__vector_25>:

ISR(USART0_RX_vect) {
    3050:	1f 92       	push	r1
    3052:	0f 92       	push	r0
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	0f 92       	push	r0
    3058:	11 24       	eor	r1, r1
    305a:	2f 93       	push	r18
    305c:	8f 93       	push	r24
    305e:	9f 93       	push	r25
    3060:	af 93       	push	r26
    3062:	bf 93       	push	r27

	char receivedByte = UDR0;
    3064:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    3068:	90 91 12 02 	lds	r25, 0x0212
    306c:	99 23       	and	r25, r25
    306e:	c9 f0       	breq	.+50     	; 0x30a2 <__vector_25+0x52>
		switch(receivedByte) {
    3070:	82 33       	cpi	r24, 0x32	; 50
    3072:	09 f4       	brne	.+2      	; 0x3076 <__vector_25+0x26>
    3074:	56 c0       	rjmp	.+172    	; 0x3122 <__vector_25+0xd2>
    3076:	83 33       	cpi	r24, 0x33	; 51
    3078:	58 f5       	brcc	.+86     	; 0x30d0 <__vector_25+0x80>
    307a:	80 33       	cpi	r24, 0x30	; 48
    307c:	09 f4       	brne	.+2      	; 0x3080 <__vector_25+0x30>
    307e:	79 c0       	rjmp	.+242    	; 0x3172 <__vector_25+0x122>
    3080:	81 33       	cpi	r24, 0x31	; 49
    3082:	29 f4       	brne	.+10     	; 0x308e <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    308a:	10 92 12 02 	sts	0x0212, r1

	}



}
    308e:	bf 91       	pop	r27
    3090:	af 91       	pop	r26
    3092:	9f 91       	pop	r25
    3094:	8f 91       	pop	r24
    3096:	2f 91       	pop	r18
    3098:	0f 90       	pop	r0
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	0f 90       	pop	r0
    309e:	1f 90       	pop	r1
    30a0:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    30a2:	90 91 11 02 	lds	r25, 0x0211
    30a6:	92 30       	cpi	r25, 0x02	; 2
    30a8:	09 f4       	brne	.+2      	; 0x30ac <__vector_25+0x5c>
    30aa:	41 c0       	rjmp	.+130    	; 0x312e <__vector_25+0xde>
    30ac:	93 30       	cpi	r25, 0x03	; 3
    30ae:	08 f1       	brcs	.+66     	; 0x30f2 <__vector_25+0xa2>
    30b0:	94 30       	cpi	r25, 0x04	; 4
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <__vector_25+0x66>
    30b4:	89 c0       	rjmp	.+274    	; 0x31c8 <__vector_25+0x178>
    30b6:	94 30       	cpi	r25, 0x04	; 4
    30b8:	08 f4       	brcc	.+2      	; 0x30bc <__vector_25+0x6c>
    30ba:	6c c0       	rjmp	.+216    	; 0x3194 <__vector_25+0x144>
    30bc:	95 30       	cpi	r25, 0x05	; 5
    30be:	39 f7       	brne	.-50     	; 0x308e <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    30c0:	83 37       	cpi	r24, 0x73	; 115
    30c2:	29 f7       	brne	.-54     	; 0x308e <__vector_25+0x3e>
					sendAdcValues = 0;
    30c4:	10 92 c5 03 	sts	0x03C5, r1
					choosePeripheral = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 93 12 02 	sts	0x0212, r24
    30ce:	df cf       	rjmp	.-66     	; 0x308e <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    30d0:	84 33       	cpi	r24, 0x34	; 52
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <__vector_25+0x86>
    30d4:	59 c0       	rjmp	.+178    	; 0x3188 <__vector_25+0x138>
    30d6:	84 33       	cpi	r24, 0x34	; 52
    30d8:	08 f4       	brcc	.+2      	; 0x30dc <__vector_25+0x8c>
    30da:	50 c0       	rjmp	.+160    	; 0x317c <__vector_25+0x12c>
    30dc:	85 33       	cpi	r24, 0x35	; 53
    30de:	b9 f6       	brne	.-82     	; 0x308e <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    30e0:	85 e0       	ldi	r24, 0x05	; 5
    30e2:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    30e6:	10 92 12 02 	sts	0x0212, r1
				sendAdcValues = 1;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	80 93 c5 03 	sts	0x03C5, r24
				break;
    30f0:	ce cf       	rjmp	.-100    	; 0x308e <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    30f2:	99 23       	and	r25, r25
    30f4:	91 f5       	brne	.+100    	; 0x315a <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    30f6:	8d 32       	cpi	r24, 0x2D	; 45
    30f8:	09 f4       	brne	.+2      	; 0x30fc <__vector_25+0xac>
    30fa:	05 c1       	rjmp	.+522    	; 0x3306 <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    30fc:	8b 32       	cpi	r24, 0x2B	; 43
    30fe:	21 f7       	brne	.-56     	; 0x30c8 <__vector_25+0x78>
					current_pwm = pwm_red-10;
    3100:	80 91 0e 02 	lds	r24, 0x020E
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3108:	97 fd       	sbrc	r25, 7
    310a:	9c c1       	rjmp	.+824    	; 0x3444 <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    310c:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_red == 0) {
    3110:	88 23       	and	r24, r24
    3112:	09 f4       	brne	.+2      	; 0x3116 <__vector_25+0xc6>
    3114:	99 c1       	rjmp	.+818    	; 0x3448 <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	90 93 89 00 	sts	0x0089, r25
    311c:	80 93 88 00 	sts	0x0088, r24
    3120:	b6 cf       	rjmp	.-148    	; 0x308e <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    3122:	82 e0       	ldi	r24, 0x02	; 2
    3124:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    3128:	10 92 12 02 	sts	0x0212, r1
				break;
    312c:	b0 cf       	rjmp	.-160    	; 0x308e <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    312e:	8d 32       	cpi	r24, 0x2D	; 45
    3130:	09 f4       	brne	.+2      	; 0x3134 <__vector_25+0xe4>
    3132:	2f c1       	rjmp	.+606    	; 0x3392 <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    3134:	8b 32       	cpi	r24, 0x2B	; 43
    3136:	41 f6       	brne	.-112    	; 0x30c8 <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    3138:	80 91 10 02 	lds	r24, 0x0210
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3140:	97 fd       	sbrc	r25, 7
    3142:	92 c1       	rjmp	.+804    	; 0x3468 <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    3144:	80 93 10 02 	sts	0x0210, r24
					if(pwm_blue == 0) {
    3148:	88 23       	and	r24, r24
    314a:	09 f4       	brne	.+2      	; 0x314e <__vector_25+0xfe>
    314c:	8f c1       	rjmp	.+798    	; 0x346c <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	90 93 8d 00 	sts	0x008D, r25
    3154:	80 93 8c 00 	sts	0x008C, r24
    3158:	9a cf       	rjmp	.-204    	; 0x308e <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    315a:	91 30       	cpi	r25, 0x01	; 1
    315c:	09 f0       	breq	.+2      	; 0x3160 <__vector_25+0x110>
    315e:	97 cf       	rjmp	.-210    	; 0x308e <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    3160:	8d 32       	cpi	r24, 0x2D	; 45
    3162:	09 f4       	brne	.+2      	; 0x3166 <__vector_25+0x116>
    3164:	b9 c0       	rjmp	.+370    	; 0x32d8 <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    3166:	8b 32       	cpi	r24, 0x2B	; 43
    3168:	09 f4       	brne	.+2      	; 0x316c <__vector_25+0x11c>
    316a:	47 c0       	rjmp	.+142    	; 0x31fa <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    316c:	90 93 12 02 	sts	0x0212, r25
    3170:	8e cf       	rjmp	.-228    	; 0x308e <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    3172:	10 92 11 02 	sts	0x0211, r1
				choosePeripheral = 0;
    3176:	10 92 12 02 	sts	0x0212, r1
				break;
    317a:	89 cf       	rjmp	.-238    	; 0x308e <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    317c:	83 e0       	ldi	r24, 0x03	; 3
    317e:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    3182:	10 92 12 02 	sts	0x0212, r1
				break;
    3186:	83 cf       	rjmp	.-250    	; 0x308e <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    3188:	84 e0       	ldi	r24, 0x04	; 4
    318a:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    318e:	10 92 12 02 	sts	0x0212, r1
				break;
    3192:	7d cf       	rjmp	.-262    	; 0x308e <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    3194:	8b 32       	cpi	r24, 0x2B	; 43
    3196:	09 f4       	brne	.+2      	; 0x319a <__vector_25+0x14a>
    3198:	13 c1       	rjmp	.+550    	; 0x33c0 <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    319a:	8d 32       	cpi	r24, 0x2D	; 45
    319c:	09 f4       	brne	.+2      	; 0x31a0 <__vector_25+0x150>
    319e:	6d c0       	rjmp	.+218    	; 0x327a <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    31a0:	83 37       	cpi	r24, 0x73	; 115
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <__vector_25+0x156>
    31a4:	91 cf       	rjmp	.-222    	; 0x30c8 <__vector_25+0x78>
					pwm_right = 0;
    31a6:	10 92 84 03 	sts	0x0384, r1
    31aa:	10 92 85 03 	sts	0x0385, r1
    31ae:	10 92 86 03 	sts	0x0386, r1
    31b2:	10 92 87 03 	sts	0x0387, r1
					OCR3A = 0;
    31b6:	10 92 99 00 	sts	0x0099, r1
    31ba:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    31be:	10 92 9b 00 	sts	0x009B, r1
    31c2:	10 92 9a 00 	sts	0x009A, r1
    31c6:	63 cf       	rjmp	.-314    	; 0x308e <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    31c8:	8b 32       	cpi	r24, 0x2B	; 43
    31ca:	09 f4       	brne	.+2      	; 0x31ce <__vector_25+0x17e>
    31cc:	b3 c0       	rjmp	.+358    	; 0x3334 <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    31ce:	8d 32       	cpi	r24, 0x2D	; 45
    31d0:	29 f1       	breq	.+74     	; 0x321c <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    31d2:	83 37       	cpi	r24, 0x73	; 115
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <__vector_25+0x188>
    31d6:	78 cf       	rjmp	.-272    	; 0x30c8 <__vector_25+0x78>
					pwm_left = 0;
    31d8:	10 92 88 03 	sts	0x0388, r1
    31dc:	10 92 89 03 	sts	0x0389, r1
    31e0:	10 92 8a 03 	sts	0x038A, r1
    31e4:	10 92 8b 03 	sts	0x038B, r1
					OCR4A = 0;
    31e8:	10 92 a9 00 	sts	0x00A9, r1
    31ec:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    31f0:	10 92 ab 00 	sts	0x00AB, r1
    31f4:	10 92 aa 00 	sts	0x00AA, r1
    31f8:	4a cf       	rjmp	.-364    	; 0x308e <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    31fa:	80 91 0f 02 	lds	r24, 0x020F
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    3202:	97 fd       	sbrc	r25, 7
    3204:	28 c1       	rjmp	.+592    	; 0x3456 <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    3206:	80 93 0f 02 	sts	0x020F, r24
					if(pwm_green == 0) {
    320a:	88 23       	and	r24, r24
    320c:	09 f4       	brne	.+2      	; 0x3210 <__vector_25+0x1c0>
    320e:	25 c1       	rjmp	.+586    	; 0x345a <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	90 93 8b 00 	sts	0x008B, r25
    3216:	80 93 8a 00 	sts	0x008A, r24
    321a:	39 cf       	rjmp	.-398    	; 0x308e <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    321c:	80 91 88 03 	lds	r24, 0x0388
    3220:	90 91 89 03 	lds	r25, 0x0389
    3224:	a0 91 8a 03 	lds	r26, 0x038A
    3228:	b0 91 8b 03 	lds	r27, 0x038B
    322c:	4e 97       	sbiw	r24, 0x1e	; 30
    322e:	a1 09       	sbc	r26, r1
    3230:	b1 09       	sbc	r27, r1
    3232:	80 93 88 03 	sts	0x0388, r24
    3236:	90 93 89 03 	sts	0x0389, r25
    323a:	a0 93 8a 03 	sts	0x038A, r26
    323e:	b0 93 8b 03 	sts	0x038B, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    3242:	8a 39       	cpi	r24, 0x9A	; 154
    3244:	2d ef       	ldi	r18, 0xFD	; 253
    3246:	92 07       	cpc	r25, r18
    3248:	2f ef       	ldi	r18, 0xFF	; 255
    324a:	a2 07       	cpc	r26, r18
    324c:	2f ef       	ldi	r18, 0xFF	; 255
    324e:	b2 07       	cpc	r27, r18
    3250:	0c f0       	brlt	.+2      	; 0x3254 <__vector_25+0x204>
    3252:	13 c1       	rjmp	.+550    	; 0x347a <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    3254:	8a e9       	ldi	r24, 0x9A	; 154
    3256:	9d ef       	ldi	r25, 0xFD	; 253
    3258:	af ef       	ldi	r26, 0xFF	; 255
    325a:	bf ef       	ldi	r27, 0xFF	; 255
    325c:	80 93 88 03 	sts	0x0388, r24
    3260:	90 93 89 03 	sts	0x0389, r25
    3264:	a0 93 8a 03 	sts	0x038A, r26
    3268:	b0 93 8b 03 	sts	0x038B, r27
    326c:	86 e6       	ldi	r24, 0x66	; 102
    326e:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3270:	90 93 ab 00 	sts	0x00AB, r25
    3274:	80 93 aa 00 	sts	0x00AA, r24
    3278:	0a cf       	rjmp	.-492    	; 0x308e <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    327a:	80 91 84 03 	lds	r24, 0x0384
    327e:	90 91 85 03 	lds	r25, 0x0385
    3282:	a0 91 86 03 	lds	r26, 0x0386
    3286:	b0 91 87 03 	lds	r27, 0x0387
    328a:	4e 97       	sbiw	r24, 0x1e	; 30
    328c:	a1 09       	sbc	r26, r1
    328e:	b1 09       	sbc	r27, r1
    3290:	80 93 84 03 	sts	0x0384, r24
    3294:	90 93 85 03 	sts	0x0385, r25
    3298:	a0 93 86 03 	sts	0x0386, r26
    329c:	b0 93 87 03 	sts	0x0387, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    32a0:	8a 39       	cpi	r24, 0x9A	; 154
    32a2:	2d ef       	ldi	r18, 0xFD	; 253
    32a4:	92 07       	cpc	r25, r18
    32a6:	2f ef       	ldi	r18, 0xFF	; 255
    32a8:	a2 07       	cpc	r26, r18
    32aa:	2f ef       	ldi	r18, 0xFF	; 255
    32ac:	b2 07       	cpc	r27, r18
    32ae:	0c f0       	brlt	.+2      	; 0x32b2 <__vector_25+0x262>
    32b0:	ea c0       	rjmp	.+468    	; 0x3486 <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    32b2:	8a e9       	ldi	r24, 0x9A	; 154
    32b4:	9d ef       	ldi	r25, 0xFD	; 253
    32b6:	af ef       	ldi	r26, 0xFF	; 255
    32b8:	bf ef       	ldi	r27, 0xFF	; 255
    32ba:	80 93 84 03 	sts	0x0384, r24
    32be:	90 93 85 03 	sts	0x0385, r25
    32c2:	a0 93 86 03 	sts	0x0386, r26
    32c6:	b0 93 87 03 	sts	0x0387, r27
    32ca:	86 e6       	ldi	r24, 0x66	; 102
    32cc:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    32ce:	90 93 9b 00 	sts	0x009B, r25
    32d2:	80 93 9a 00 	sts	0x009A, r24
    32d6:	db ce       	rjmp	.-586    	; 0x308e <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    32d8:	80 91 80 00 	lds	r24, 0x0080
    32dc:	80 62       	ori	r24, 0x20	; 32
    32de:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    32e2:	80 91 0f 02 	lds	r24, 0x020F
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    32ea:	8f 3f       	cpi	r24, 0xFF	; 255
    32ec:	91 05       	cpc	r25, r1
    32ee:	19 f0       	breq	.+6      	; 0x32f6 <__vector_25+0x2a6>
    32f0:	14 f0       	brlt	.+4      	; 0x32f6 <__vector_25+0x2a6>
    32f2:	8f ef       	ldi	r24, 0xFF	; 255
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	80 93 0f 02 	sts	0x020F, r24
					OCR1B = pwm_green;
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	90 93 8b 00 	sts	0x008B, r25
    3300:	80 93 8a 00 	sts	0x008A, r24
    3304:	c4 ce       	rjmp	.-632    	; 0x308e <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    3306:	80 91 80 00 	lds	r24, 0x0080
    330a:	80 68       	ori	r24, 0x80	; 128
    330c:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    3310:	80 91 0e 02 	lds	r24, 0x020E
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    3318:	8f 3f       	cpi	r24, 0xFF	; 255
    331a:	91 05       	cpc	r25, r1
    331c:	19 f0       	breq	.+6      	; 0x3324 <__vector_25+0x2d4>
    331e:	14 f0       	brlt	.+4      	; 0x3324 <__vector_25+0x2d4>
    3320:	8f ef       	ldi	r24, 0xFF	; 255
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	80 93 0e 02 	sts	0x020E, r24
					OCR1A = pwm_red;
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	90 93 89 00 	sts	0x0089, r25
    332e:	80 93 88 00 	sts	0x0088, r24
    3332:	ad ce       	rjmp	.-678    	; 0x308e <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    3334:	80 91 88 03 	lds	r24, 0x0388
    3338:	90 91 89 03 	lds	r25, 0x0389
    333c:	a0 91 8a 03 	lds	r26, 0x038A
    3340:	b0 91 8b 03 	lds	r27, 0x038B
    3344:	4e 96       	adiw	r24, 0x1e	; 30
    3346:	a1 1d       	adc	r26, r1
    3348:	b1 1d       	adc	r27, r1
    334a:	80 93 88 03 	sts	0x0388, r24
    334e:	90 93 89 03 	sts	0x0389, r25
    3352:	a0 93 8a 03 	sts	0x038A, r26
    3356:	b0 93 8b 03 	sts	0x038B, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    335a:	87 36       	cpi	r24, 0x67	; 103
    335c:	22 e0       	ldi	r18, 0x02	; 2
    335e:	92 07       	cpc	r25, r18
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	a2 07       	cpc	r26, r18
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	b2 07       	cpc	r27, r18
    3368:	0c f4       	brge	.+2      	; 0x336c <__vector_25+0x31c>
    336a:	58 c0       	rjmp	.+176    	; 0x341c <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    336c:	86 e6       	ldi	r24, 0x66	; 102
    336e:	92 e0       	ldi	r25, 0x02	; 2
    3370:	a0 e0       	ldi	r26, 0x00	; 0
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	80 93 88 03 	sts	0x0388, r24
    3378:	90 93 89 03 	sts	0x0389, r25
    337c:	a0 93 8a 03 	sts	0x038A, r26
    3380:	b0 93 8b 03 	sts	0x038B, r27
    3384:	86 e6       	ldi	r24, 0x66	; 102
    3386:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    3388:	90 93 a9 00 	sts	0x00A9, r25
    338c:	80 93 a8 00 	sts	0x00A8, r24
    3390:	7e ce       	rjmp	.-772    	; 0x308e <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    3392:	80 91 80 00 	lds	r24, 0x0080
    3396:	88 60       	ori	r24, 0x08	; 8
    3398:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    339c:	80 91 10 02 	lds	r24, 0x0210
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    33a4:	8f 3f       	cpi	r24, 0xFF	; 255
    33a6:	91 05       	cpc	r25, r1
    33a8:	19 f0       	breq	.+6      	; 0x33b0 <__vector_25+0x360>
    33aa:	14 f0       	brlt	.+4      	; 0x33b0 <__vector_25+0x360>
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	80 93 10 02 	sts	0x0210, r24
					OCR1C = pwm_blue;
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	90 93 8d 00 	sts	0x008D, r25
    33ba:	80 93 8c 00 	sts	0x008C, r24
    33be:	67 ce       	rjmp	.-818    	; 0x308e <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    33c0:	80 91 84 03 	lds	r24, 0x0384
    33c4:	90 91 85 03 	lds	r25, 0x0385
    33c8:	a0 91 86 03 	lds	r26, 0x0386
    33cc:	b0 91 87 03 	lds	r27, 0x0387
    33d0:	4e 96       	adiw	r24, 0x1e	; 30
    33d2:	a1 1d       	adc	r26, r1
    33d4:	b1 1d       	adc	r27, r1
    33d6:	80 93 84 03 	sts	0x0384, r24
    33da:	90 93 85 03 	sts	0x0385, r25
    33de:	a0 93 86 03 	sts	0x0386, r26
    33e2:	b0 93 87 03 	sts	0x0387, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    33e6:	87 36       	cpi	r24, 0x67	; 103
    33e8:	22 e0       	ldi	r18, 0x02	; 2
    33ea:	92 07       	cpc	r25, r18
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	a2 07       	cpc	r26, r18
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	b2 07       	cpc	r27, r18
    33f4:	ec f0       	brlt	.+58     	; 0x3430 <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    33f6:	86 e6       	ldi	r24, 0x66	; 102
    33f8:	92 e0       	ldi	r25, 0x02	; 2
    33fa:	a0 e0       	ldi	r26, 0x00	; 0
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	80 93 84 03 	sts	0x0384, r24
    3402:	90 93 85 03 	sts	0x0385, r25
    3406:	a0 93 86 03 	sts	0x0386, r26
    340a:	b0 93 87 03 	sts	0x0387, r27
    340e:	86 e6       	ldi	r24, 0x66	; 102
    3410:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    3412:	90 93 99 00 	sts	0x0099, r25
    3416:	80 93 98 00 	sts	0x0098, r24
    341a:	39 ce       	rjmp	.-910    	; 0x308e <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    341c:	b7 ff       	sbrs	r27, 7
    341e:	b4 cf       	rjmp	.-152    	; 0x3388 <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3420:	90 95       	com	r25
    3422:	81 95       	neg	r24
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	90 93 ab 00 	sts	0x00AB, r25
    342a:	80 93 aa 00 	sts	0x00AA, r24
    342e:	2f ce       	rjmp	.-930    	; 0x308e <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3430:	b7 ff       	sbrs	r27, 7
    3432:	ef cf       	rjmp	.-34     	; 0x3412 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    3434:	90 95       	com	r25
    3436:	81 95       	neg	r24
    3438:	9f 4f       	sbci	r25, 0xFF	; 255
    343a:	90 93 9b 00 	sts	0x009B, r25
    343e:	80 93 9a 00 	sts	0x009A, r24
    3442:	25 ce       	rjmp	.-950    	; 0x308e <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    3444:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    3448:	80 91 80 00 	lds	r24, 0x0080
    344c:	8f 77       	andi	r24, 0x7F	; 127
    344e:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    3452:	2d 98       	cbi	0x05, 5	; 5
    3454:	1c ce       	rjmp	.-968    	; 0x308e <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    3456:	10 92 0f 02 	sts	0x020F, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    345a:	80 91 80 00 	lds	r24, 0x0080
    345e:	8f 7d       	andi	r24, 0xDF	; 223
    3460:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    3464:	2e 98       	cbi	0x05, 6	; 5
    3466:	13 ce       	rjmp	.-986    	; 0x308e <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    3468:	10 92 10 02 	sts	0x0210, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    346c:	80 91 80 00 	lds	r24, 0x0080
    3470:	87 7f       	andi	r24, 0xF7	; 247
    3472:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    3476:	2f 98       	cbi	0x05, 7	; 5
    3478:	0a ce       	rjmp	.-1004   	; 0x308e <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    347a:	b7 ff       	sbrs	r27, 7
    347c:	85 cf       	rjmp	.-246    	; 0x3388 <__vector_25+0x338>
						OCR4A = pwm_left;
    347e:	90 95       	com	r25
    3480:	81 95       	neg	r24
    3482:	9f 4f       	sbci	r25, 0xFF	; 255
    3484:	f5 ce       	rjmp	.-534    	; 0x3270 <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    3486:	b7 ff       	sbrs	r27, 7
    3488:	c4 cf       	rjmp	.-120    	; 0x3412 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    348a:	90 95       	com	r25
    348c:	81 95       	neg	r24
    348e:	9f 4f       	sbci	r25, 0xFF	; 255
    3490:	1e cf       	rjmp	.-452    	; 0x32ce <__vector_25+0x27e>

00003492 <_fpadd_parts>:
    3492:	a0 e0       	ldi	r26, 0x00	; 0
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	ef e4       	ldi	r30, 0x4F	; 79
    3498:	fa e1       	ldi	r31, 0x1A	; 26
    349a:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__prologue_saves__+0x4>
    349e:	2c 01       	movw	r4, r24
    34a0:	5b 01       	movw	r10, r22
    34a2:	fa 01       	movw	r30, r20
    34a4:	dc 01       	movw	r26, r24
    34a6:	9c 91       	ld	r25, X
    34a8:	92 30       	cpi	r25, 0x02	; 2
    34aa:	08 f4       	brcc	.+2      	; 0x34ae <_fpadd_parts+0x1c>
    34ac:	32 c1       	rjmp	.+612    	; 0x3712 <_fpadd_parts+0x280>
    34ae:	eb 01       	movw	r28, r22
    34b0:	88 81       	ld	r24, Y
    34b2:	82 30       	cpi	r24, 0x02	; 2
    34b4:	08 f4       	brcc	.+2      	; 0x34b8 <_fpadd_parts+0x26>
    34b6:	2c c1       	rjmp	.+600    	; 0x3710 <_fpadd_parts+0x27e>
    34b8:	94 30       	cpi	r25, 0x04	; 4
    34ba:	71 f4       	brne	.+28     	; 0x34d8 <_fpadd_parts+0x46>
    34bc:	84 30       	cpi	r24, 0x04	; 4
    34be:	09 f0       	breq	.+2      	; 0x34c2 <_fpadd_parts+0x30>
    34c0:	28 c1       	rjmp	.+592    	; 0x3712 <_fpadd_parts+0x280>
    34c2:	f2 01       	movw	r30, r4
    34c4:	91 81       	ldd	r25, Z+1	; 0x01
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	98 17       	cp	r25, r24
    34ca:	09 f4       	brne	.+2      	; 0x34ce <_fpadd_parts+0x3c>
    34cc:	22 c1       	rjmp	.+580    	; 0x3712 <_fpadd_parts+0x280>
    34ce:	14 e1       	ldi	r17, 0x14	; 20
    34d0:	41 2e       	mov	r4, r17
    34d2:	12 e0       	ldi	r17, 0x02	; 2
    34d4:	51 2e       	mov	r5, r17
    34d6:	1d c1       	rjmp	.+570    	; 0x3712 <_fpadd_parts+0x280>
    34d8:	84 30       	cpi	r24, 0x04	; 4
    34da:	09 f4       	brne	.+2      	; 0x34de <_fpadd_parts+0x4c>
    34dc:	19 c1       	rjmp	.+562    	; 0x3710 <_fpadd_parts+0x27e>
    34de:	82 30       	cpi	r24, 0x02	; 2
    34e0:	a9 f4       	brne	.+42     	; 0x350c <_fpadd_parts+0x7a>
    34e2:	92 30       	cpi	r25, 0x02	; 2
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <_fpadd_parts+0x56>
    34e6:	15 c1       	rjmp	.+554    	; 0x3712 <_fpadd_parts+0x280>
    34e8:	ca 01       	movw	r24, r20
    34ea:	a2 01       	movw	r20, r4
    34ec:	28 e0       	ldi	r18, 0x08	; 8
    34ee:	da 01       	movw	r26, r20
    34f0:	0d 90       	ld	r0, X+
    34f2:	ad 01       	movw	r20, r26
    34f4:	ec 01       	movw	r28, r24
    34f6:	09 92       	st	Y+, r0
    34f8:	ce 01       	movw	r24, r28
    34fa:	21 50       	subi	r18, 0x01	; 1
    34fc:	c1 f7       	brne	.-16     	; 0x34ee <_fpadd_parts+0x5c>
    34fe:	e5 01       	movw	r28, r10
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	e2 01       	movw	r28, r4
    3504:	99 81       	ldd	r25, Y+1	; 0x01
    3506:	89 23       	and	r24, r25
    3508:	81 83       	std	Z+1, r24	; 0x01
    350a:	00 c1       	rjmp	.+512    	; 0x370c <_fpadd_parts+0x27a>
    350c:	92 30       	cpi	r25, 0x02	; 2
    350e:	09 f4       	brne	.+2      	; 0x3512 <_fpadd_parts+0x80>
    3510:	ff c0       	rjmp	.+510    	; 0x3710 <_fpadd_parts+0x27e>
    3512:	e2 01       	movw	r28, r4
    3514:	ca 80       	ldd	r12, Y+2	; 0x02
    3516:	db 80       	ldd	r13, Y+3	; 0x03
    3518:	eb 01       	movw	r28, r22
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	9b 81       	ldd	r25, Y+3	; 0x03
    351e:	e2 01       	movw	r28, r4
    3520:	2c 81       	ldd	r18, Y+4	; 0x04
    3522:	3d 81       	ldd	r19, Y+5	; 0x05
    3524:	4e 81       	ldd	r20, Y+6	; 0x06
    3526:	5f 81       	ldd	r21, Y+7	; 0x07
    3528:	eb 01       	movw	r28, r22
    352a:	ec 80       	ldd	r14, Y+4	; 0x04
    352c:	fd 80       	ldd	r15, Y+5	; 0x05
    352e:	0e 81       	ldd	r16, Y+6	; 0x06
    3530:	1f 81       	ldd	r17, Y+7	; 0x07
    3532:	b6 01       	movw	r22, r12
    3534:	68 1b       	sub	r22, r24
    3536:	79 0b       	sbc	r23, r25
    3538:	db 01       	movw	r26, r22
    353a:	77 ff       	sbrs	r23, 7
    353c:	03 c0       	rjmp	.+6      	; 0x3544 <_fpadd_parts+0xb2>
    353e:	70 95       	com	r23
    3540:	61 95       	neg	r22
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	60 32       	cpi	r22, 0x20	; 32
    3546:	71 05       	cpc	r23, r1
    3548:	0c f0       	brlt	.+2      	; 0x354c <_fpadd_parts+0xba>
    354a:	5d c0       	rjmp	.+186    	; 0x3606 <_fpadd_parts+0x174>
    354c:	1a 16       	cp	r1, r26
    354e:	1b 06       	cpc	r1, r27
    3550:	5c f5       	brge	.+86     	; 0x35a8 <_fpadd_parts+0x116>
    3552:	66 24       	eor	r6, r6
    3554:	77 24       	eor	r7, r7
    3556:	43 01       	movw	r8, r6
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	a0 e0       	ldi	r26, 0x00	; 0
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	06 2e       	mov	r0, r22
    3562:	04 c0       	rjmp	.+8      	; 0x356c <_fpadd_parts+0xda>
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	aa 1f       	adc	r26, r26
    356a:	bb 1f       	adc	r27, r27
    356c:	0a 94       	dec	r0
    356e:	d2 f7       	brpl	.-12     	; 0x3564 <_fpadd_parts+0xd2>
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	a1 09       	sbc	r26, r1
    3574:	b1 09       	sbc	r27, r1
    3576:	8e 21       	and	r24, r14
    3578:	9f 21       	and	r25, r15
    357a:	a0 23       	and	r26, r16
    357c:	b1 23       	and	r27, r17
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	a1 05       	cpc	r26, r1
    3582:	b1 05       	cpc	r27, r1
    3584:	29 f0       	breq	.+10     	; 0x3590 <_fpadd_parts+0xfe>
    3586:	b1 e0       	ldi	r27, 0x01	; 1
    3588:	6b 2e       	mov	r6, r27
    358a:	71 2c       	mov	r7, r1
    358c:	81 2c       	mov	r8, r1
    358e:	91 2c       	mov	r9, r1
    3590:	04 c0       	rjmp	.+8      	; 0x359a <_fpadd_parts+0x108>
    3592:	16 95       	lsr	r17
    3594:	07 95       	ror	r16
    3596:	f7 94       	ror	r15
    3598:	e7 94       	ror	r14
    359a:	6a 95       	dec	r22
    359c:	d2 f7       	brpl	.-12     	; 0x3592 <_fpadd_parts+0x100>
    359e:	e6 28       	or	r14, r6
    35a0:	f7 28       	or	r15, r7
    35a2:	08 29       	or	r16, r8
    35a4:	19 29       	or	r17, r9
    35a6:	3b c0       	rjmp	.+118    	; 0x361e <_fpadd_parts+0x18c>
    35a8:	ab 2b       	or	r26, r27
    35aa:	c9 f1       	breq	.+114    	; 0x361e <_fpadd_parts+0x18c>
    35ac:	c6 0e       	add	r12, r22
    35ae:	d7 1e       	adc	r13, r23
    35b0:	66 24       	eor	r6, r6
    35b2:	77 24       	eor	r7, r7
    35b4:	43 01       	movw	r8, r6
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a0 e0       	ldi	r26, 0x00	; 0
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	06 2e       	mov	r0, r22
    35c0:	04 c0       	rjmp	.+8      	; 0x35ca <_fpadd_parts+0x138>
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	aa 1f       	adc	r26, r26
    35c8:	bb 1f       	adc	r27, r27
    35ca:	0a 94       	dec	r0
    35cc:	d2 f7       	brpl	.-12     	; 0x35c2 <_fpadd_parts+0x130>
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	a1 09       	sbc	r26, r1
    35d2:	b1 09       	sbc	r27, r1
    35d4:	82 23       	and	r24, r18
    35d6:	93 23       	and	r25, r19
    35d8:	a4 23       	and	r26, r20
    35da:	b5 23       	and	r27, r21
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	a1 05       	cpc	r26, r1
    35e0:	b1 05       	cpc	r27, r1
    35e2:	29 f0       	breq	.+10     	; 0x35ee <_fpadd_parts+0x15c>
    35e4:	a1 e0       	ldi	r26, 0x01	; 1
    35e6:	6a 2e       	mov	r6, r26
    35e8:	71 2c       	mov	r7, r1
    35ea:	81 2c       	mov	r8, r1
    35ec:	91 2c       	mov	r9, r1
    35ee:	04 c0       	rjmp	.+8      	; 0x35f8 <_fpadd_parts+0x166>
    35f0:	56 95       	lsr	r21
    35f2:	47 95       	ror	r20
    35f4:	37 95       	ror	r19
    35f6:	27 95       	ror	r18
    35f8:	6a 95       	dec	r22
    35fa:	d2 f7       	brpl	.-12     	; 0x35f0 <_fpadd_parts+0x15e>
    35fc:	26 29       	or	r18, r6
    35fe:	37 29       	or	r19, r7
    3600:	48 29       	or	r20, r8
    3602:	59 29       	or	r21, r9
    3604:	0c c0       	rjmp	.+24     	; 0x361e <_fpadd_parts+0x18c>
    3606:	8c 15       	cp	r24, r12
    3608:	9d 05       	cpc	r25, r13
    360a:	34 f0       	brlt	.+12     	; 0x3618 <_fpadd_parts+0x186>
    360c:	6c 01       	movw	r12, r24
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	03 c0       	rjmp	.+6      	; 0x361e <_fpadd_parts+0x18c>
    3618:	ee 24       	eor	r14, r14
    361a:	ff 24       	eor	r15, r15
    361c:	87 01       	movw	r16, r14
    361e:	e2 01       	movw	r28, r4
    3620:	99 81       	ldd	r25, Y+1	; 0x01
    3622:	e5 01       	movw	r28, r10
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	98 17       	cp	r25, r24
    3628:	09 f4       	brne	.+2      	; 0x362c <_fpadd_parts+0x19a>
    362a:	43 c0       	rjmp	.+134    	; 0x36b2 <_fpadd_parts+0x220>
    362c:	99 23       	and	r25, r25
    362e:	39 f0       	breq	.+14     	; 0x363e <_fpadd_parts+0x1ac>
    3630:	e2 1a       	sub	r14, r18
    3632:	f3 0a       	sbc	r15, r19
    3634:	04 0b       	sbc	r16, r20
    3636:	15 0b       	sbc	r17, r21
    3638:	a8 01       	movw	r20, r16
    363a:	97 01       	movw	r18, r14
    363c:	04 c0       	rjmp	.+8      	; 0x3646 <_fpadd_parts+0x1b4>
    363e:	2e 19       	sub	r18, r14
    3640:	3f 09       	sbc	r19, r15
    3642:	40 0b       	sbc	r20, r16
    3644:	51 0b       	sbc	r21, r17
    3646:	57 fd       	sbrc	r21, 7
    3648:	08 c0       	rjmp	.+16     	; 0x365a <_fpadd_parts+0x1c8>
    364a:	11 82       	std	Z+1, r1	; 0x01
    364c:	d3 82       	std	Z+3, r13	; 0x03
    364e:	c2 82       	std	Z+2, r12	; 0x02
    3650:	24 83       	std	Z+4, r18	; 0x04
    3652:	35 83       	std	Z+5, r19	; 0x05
    3654:	46 83       	std	Z+6, r20	; 0x06
    3656:	57 83       	std	Z+7, r21	; 0x07
    3658:	1d c0       	rjmp	.+58     	; 0x3694 <_fpadd_parts+0x202>
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	81 83       	std	Z+1, r24	; 0x01
    365e:	d3 82       	std	Z+3, r13	; 0x03
    3660:	c2 82       	std	Z+2, r12	; 0x02
    3662:	88 27       	eor	r24, r24
    3664:	99 27       	eor	r25, r25
    3666:	dc 01       	movw	r26, r24
    3668:	82 1b       	sub	r24, r18
    366a:	93 0b       	sbc	r25, r19
    366c:	a4 0b       	sbc	r26, r20
    366e:	b5 0b       	sbc	r27, r21
    3670:	84 83       	std	Z+4, r24	; 0x04
    3672:	95 83       	std	Z+5, r25	; 0x05
    3674:	a6 83       	std	Z+6, r26	; 0x06
    3676:	b7 83       	std	Z+7, r27	; 0x07
    3678:	0d c0       	rjmp	.+26     	; 0x3694 <_fpadd_parts+0x202>
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	44 1f       	adc	r20, r20
    3680:	55 1f       	adc	r21, r21
    3682:	24 83       	std	Z+4, r18	; 0x04
    3684:	35 83       	std	Z+5, r19	; 0x05
    3686:	46 83       	std	Z+6, r20	; 0x06
    3688:	57 83       	std	Z+7, r21	; 0x07
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	93 83       	std	Z+3, r25	; 0x03
    3692:	82 83       	std	Z+2, r24	; 0x02
    3694:	24 81       	ldd	r18, Z+4	; 0x04
    3696:	35 81       	ldd	r19, Z+5	; 0x05
    3698:	46 81       	ldd	r20, Z+6	; 0x06
    369a:	57 81       	ldd	r21, Z+7	; 0x07
    369c:	da 01       	movw	r26, r20
    369e:	c9 01       	movw	r24, r18
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	a1 09       	sbc	r26, r1
    36a4:	b1 09       	sbc	r27, r1
    36a6:	8f 5f       	subi	r24, 0xFF	; 255
    36a8:	9f 4f       	sbci	r25, 0xFF	; 255
    36aa:	af 4f       	sbci	r26, 0xFF	; 255
    36ac:	bf 43       	sbci	r27, 0x3F	; 63
    36ae:	28 f3       	brcs	.-54     	; 0x367a <_fpadd_parts+0x1e8>
    36b0:	0b c0       	rjmp	.+22     	; 0x36c8 <_fpadd_parts+0x236>
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	d3 82       	std	Z+3, r13	; 0x03
    36b6:	c2 82       	std	Z+2, r12	; 0x02
    36b8:	2e 0d       	add	r18, r14
    36ba:	3f 1d       	adc	r19, r15
    36bc:	40 1f       	adc	r20, r16
    36be:	51 1f       	adc	r21, r17
    36c0:	24 83       	std	Z+4, r18	; 0x04
    36c2:	35 83       	std	Z+5, r19	; 0x05
    36c4:	46 83       	std	Z+6, r20	; 0x06
    36c6:	57 83       	std	Z+7, r21	; 0x07
    36c8:	83 e0       	ldi	r24, 0x03	; 3
    36ca:	80 83       	st	Z, r24
    36cc:	24 81       	ldd	r18, Z+4	; 0x04
    36ce:	35 81       	ldd	r19, Z+5	; 0x05
    36d0:	46 81       	ldd	r20, Z+6	; 0x06
    36d2:	57 81       	ldd	r21, Z+7	; 0x07
    36d4:	55 23       	and	r21, r21
    36d6:	d4 f4       	brge	.+52     	; 0x370c <_fpadd_parts+0x27a>
    36d8:	c9 01       	movw	r24, r18
    36da:	aa 27       	eor	r26, r26
    36dc:	97 fd       	sbrc	r25, 7
    36de:	a0 95       	com	r26
    36e0:	ba 2f       	mov	r27, r26
    36e2:	81 70       	andi	r24, 0x01	; 1
    36e4:	90 70       	andi	r25, 0x00	; 0
    36e6:	a0 70       	andi	r26, 0x00	; 0
    36e8:	b0 70       	andi	r27, 0x00	; 0
    36ea:	56 95       	lsr	r21
    36ec:	47 95       	ror	r20
    36ee:	37 95       	ror	r19
    36f0:	27 95       	ror	r18
    36f2:	82 2b       	or	r24, r18
    36f4:	93 2b       	or	r25, r19
    36f6:	a4 2b       	or	r26, r20
    36f8:	b5 2b       	or	r27, r21
    36fa:	84 83       	std	Z+4, r24	; 0x04
    36fc:	95 83       	std	Z+5, r25	; 0x05
    36fe:	a6 83       	std	Z+6, r26	; 0x06
    3700:	b7 83       	std	Z+7, r27	; 0x07
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	93 83       	std	Z+3, r25	; 0x03
    370a:	82 83       	std	Z+2, r24	; 0x02
    370c:	2f 01       	movw	r4, r30
    370e:	01 c0       	rjmp	.+2      	; 0x3712 <_fpadd_parts+0x280>
    3710:	25 01       	movw	r4, r10
    3712:	c2 01       	movw	r24, r4
    3714:	e0 e1       	ldi	r30, 0x10	; 16
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__epilogue_restores__+0x4>

0000371e <__subsf3>:
    371e:	a0 e2       	ldi	r26, 0x20	; 32
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e5 e9       	ldi	r30, 0x95	; 149
    3724:	fb e1       	ldi	r31, 0x1B	; 27
    3726:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
    372a:	69 83       	std	Y+1, r22	; 0x01
    372c:	7a 83       	std	Y+2, r23	; 0x02
    372e:	8b 83       	std	Y+3, r24	; 0x03
    3730:	9c 83       	std	Y+4, r25	; 0x04
    3732:	2d 83       	std	Y+5, r18	; 0x05
    3734:	3e 83       	std	Y+6, r19	; 0x06
    3736:	4f 83       	std	Y+7, r20	; 0x07
    3738:	58 87       	std	Y+8, r21	; 0x08
    373a:	09 e0       	ldi	r16, 0x09	; 9
    373c:	e0 2e       	mov	r14, r16
    373e:	f1 2c       	mov	r15, r1
    3740:	ec 0e       	add	r14, r28
    3742:	fd 1e       	adc	r15, r29
    3744:	b7 01       	movw	r22, r14
    3746:	ce 01       	movw	r24, r28
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    374e:	8e 01       	movw	r16, r28
    3750:	0f 5e       	subi	r16, 0xEF	; 239
    3752:	1f 4f       	sbci	r17, 0xFF	; 255
    3754:	b8 01       	movw	r22, r16
    3756:	ce 01       	movw	r24, r28
    3758:	05 96       	adiw	r24, 0x05	; 5
    375a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    375e:	8a 89       	ldd	r24, Y+18	; 0x12
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	89 27       	eor	r24, r25
    3764:	8a 8b       	std	Y+18, r24	; 0x12
    3766:	ae 01       	movw	r20, r28
    3768:	47 5e       	subi	r20, 0xE7	; 231
    376a:	5f 4f       	sbci	r21, 0xFF	; 255
    376c:	b8 01       	movw	r22, r16
    376e:	c7 01       	movw	r24, r14
    3770:	0e 94 49 1a 	call	0x3492	; 0x3492 <_fpadd_parts>
    3774:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__pack_f>
    3778:	e6 e0       	ldi	r30, 0x06	; 6
    377a:	a0 96       	adiw	r28, 0x20	; 32
    377c:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

00003780 <__addsf3>:
    3780:	a0 e2       	ldi	r26, 0x20	; 32
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e6 ec       	ldi	r30, 0xC6	; 198
    3786:	fb e1       	ldi	r31, 0x1B	; 27
    3788:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
    378c:	69 83       	std	Y+1, r22	; 0x01
    378e:	7a 83       	std	Y+2, r23	; 0x02
    3790:	8b 83       	std	Y+3, r24	; 0x03
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	2d 83       	std	Y+5, r18	; 0x05
    3796:	3e 83       	std	Y+6, r19	; 0x06
    3798:	4f 83       	std	Y+7, r20	; 0x07
    379a:	58 87       	std	Y+8, r21	; 0x08
    379c:	89 e0       	ldi	r24, 0x09	; 9
    379e:	e8 2e       	mov	r14, r24
    37a0:	f1 2c       	mov	r15, r1
    37a2:	ec 0e       	add	r14, r28
    37a4:	fd 1e       	adc	r15, r29
    37a6:	b7 01       	movw	r22, r14
    37a8:	ce 01       	movw	r24, r28
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    37b0:	8e 01       	movw	r16, r28
    37b2:	0f 5e       	subi	r16, 0xEF	; 239
    37b4:	1f 4f       	sbci	r17, 0xFF	; 255
    37b6:	b8 01       	movw	r22, r16
    37b8:	ce 01       	movw	r24, r28
    37ba:	05 96       	adiw	r24, 0x05	; 5
    37bc:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    37c0:	ae 01       	movw	r20, r28
    37c2:	47 5e       	subi	r20, 0xE7	; 231
    37c4:	5f 4f       	sbci	r21, 0xFF	; 255
    37c6:	b8 01       	movw	r22, r16
    37c8:	c7 01       	movw	r24, r14
    37ca:	0e 94 49 1a 	call	0x3492	; 0x3492 <_fpadd_parts>
    37ce:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__pack_f>
    37d2:	e6 e0       	ldi	r30, 0x06	; 6
    37d4:	a0 96       	adiw	r28, 0x20	; 32
    37d6:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

000037da <__mulsf3>:
    37da:	a0 e2       	ldi	r26, 0x20	; 32
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	e3 ef       	ldi	r30, 0xF3	; 243
    37e0:	fb e1       	ldi	r31, 0x1B	; 27
    37e2:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__prologue_saves__+0x4>
    37e6:	69 83       	std	Y+1, r22	; 0x01
    37e8:	7a 83       	std	Y+2, r23	; 0x02
    37ea:	8b 83       	std	Y+3, r24	; 0x03
    37ec:	9c 83       	std	Y+4, r25	; 0x04
    37ee:	2d 83       	std	Y+5, r18	; 0x05
    37f0:	3e 83       	std	Y+6, r19	; 0x06
    37f2:	4f 83       	std	Y+7, r20	; 0x07
    37f4:	58 87       	std	Y+8, r21	; 0x08
    37f6:	99 e0       	ldi	r25, 0x09	; 9
    37f8:	e9 2e       	mov	r14, r25
    37fa:	f1 2c       	mov	r15, r1
    37fc:	ec 0e       	add	r14, r28
    37fe:	fd 1e       	adc	r15, r29
    3800:	b7 01       	movw	r22, r14
    3802:	ce 01       	movw	r24, r28
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    380a:	8e 01       	movw	r16, r28
    380c:	0f 5e       	subi	r16, 0xEF	; 239
    380e:	1f 4f       	sbci	r17, 0xFF	; 255
    3810:	b8 01       	movw	r22, r16
    3812:	ce 01       	movw	r24, r28
    3814:	05 96       	adiw	r24, 0x05	; 5
    3816:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    381a:	99 85       	ldd	r25, Y+9	; 0x09
    381c:	92 30       	cpi	r25, 0x02	; 2
    381e:	88 f0       	brcs	.+34     	; 0x3842 <__mulsf3+0x68>
    3820:	89 89       	ldd	r24, Y+17	; 0x11
    3822:	82 30       	cpi	r24, 0x02	; 2
    3824:	c0 f0       	brcs	.+48     	; 0x3856 <__mulsf3+0x7c>
    3826:	94 30       	cpi	r25, 0x04	; 4
    3828:	19 f4       	brne	.+6      	; 0x3830 <__mulsf3+0x56>
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	29 f0       	breq	.+10     	; 0x3838 <__mulsf3+0x5e>
    382e:	09 c0       	rjmp	.+18     	; 0x3842 <__mulsf3+0x68>
    3830:	84 30       	cpi	r24, 0x04	; 4
    3832:	29 f4       	brne	.+10     	; 0x383e <__mulsf3+0x64>
    3834:	92 30       	cpi	r25, 0x02	; 2
    3836:	79 f4       	brne	.+30     	; 0x3856 <__mulsf3+0x7c>
    3838:	64 e1       	ldi	r22, 0x14	; 20
    383a:	72 e0       	ldi	r23, 0x02	; 2
    383c:	c6 c0       	rjmp	.+396    	; 0x39ca <__mulsf3+0x1f0>
    383e:	92 30       	cpi	r25, 0x02	; 2
    3840:	41 f4       	brne	.+16     	; 0x3852 <__mulsf3+0x78>
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	9a 85       	ldd	r25, Y+10	; 0x0a
    3846:	8a 89       	ldd	r24, Y+18	; 0x12
    3848:	98 13       	cpse	r25, r24
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	2a 87       	std	Y+10, r18	; 0x0a
    384e:	b7 01       	movw	r22, r14
    3850:	bc c0       	rjmp	.+376    	; 0x39ca <__mulsf3+0x1f0>
    3852:	82 30       	cpi	r24, 0x02	; 2
    3854:	41 f4       	brne	.+16     	; 0x3866 <__mulsf3+0x8c>
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	9a 85       	ldd	r25, Y+10	; 0x0a
    385a:	8a 89       	ldd	r24, Y+18	; 0x12
    385c:	98 13       	cpse	r25, r24
    385e:	21 e0       	ldi	r18, 0x01	; 1
    3860:	2a 8b       	std	Y+18, r18	; 0x12
    3862:	b8 01       	movw	r22, r16
    3864:	b2 c0       	rjmp	.+356    	; 0x39ca <__mulsf3+0x1f0>
    3866:	cd 84       	ldd	r12, Y+13	; 0x0d
    3868:	de 84       	ldd	r13, Y+14	; 0x0e
    386a:	ef 84       	ldd	r14, Y+15	; 0x0f
    386c:	f8 88       	ldd	r15, Y+16	; 0x10
    386e:	0d 89       	ldd	r16, Y+21	; 0x15
    3870:	1e 89       	ldd	r17, Y+22	; 0x16
    3872:	2f 89       	ldd	r18, Y+23	; 0x17
    3874:	38 8d       	ldd	r19, Y+24	; 0x18
    3876:	88 24       	eor	r8, r8
    3878:	99 24       	eor	r9, r9
    387a:	54 01       	movw	r10, r8
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	60 e0       	ldi	r22, 0x00	; 0
    3882:	70 e0       	ldi	r23, 0x00	; 0
    3884:	44 24       	eor	r4, r4
    3886:	55 24       	eor	r5, r5
    3888:	32 01       	movw	r6, r4
    388a:	e0 e0       	ldi	r30, 0x00	; 0
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	c6 01       	movw	r24, r12
    3890:	81 70       	andi	r24, 0x01	; 1
    3892:	90 70       	andi	r25, 0x00	; 0
    3894:	89 2b       	or	r24, r25
    3896:	d9 f0       	breq	.+54     	; 0x38ce <__mulsf3+0xf4>
    3898:	80 0e       	add	r8, r16
    389a:	91 1e       	adc	r9, r17
    389c:	a2 1e       	adc	r10, r18
    389e:	b3 1e       	adc	r11, r19
    38a0:	db 01       	movw	r26, r22
    38a2:	ca 01       	movw	r24, r20
    38a4:	84 0d       	add	r24, r4
    38a6:	95 1d       	adc	r25, r5
    38a8:	a6 1d       	adc	r26, r6
    38aa:	b7 1d       	adc	r27, r7
    38ac:	40 e0       	ldi	r20, 0x00	; 0
    38ae:	50 e0       	ldi	r21, 0x00	; 0
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	80 16       	cp	r8, r16
    38b6:	91 06       	cpc	r9, r17
    38b8:	a2 06       	cpc	r10, r18
    38ba:	b3 06       	cpc	r11, r19
    38bc:	20 f4       	brcc	.+8      	; 0x38c6 <__mulsf3+0xec>
    38be:	41 e0       	ldi	r20, 0x01	; 1
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	48 0f       	add	r20, r24
    38c8:	59 1f       	adc	r21, r25
    38ca:	6a 1f       	adc	r22, r26
    38cc:	7b 1f       	adc	r23, r27
    38ce:	44 0c       	add	r4, r4
    38d0:	55 1c       	adc	r5, r5
    38d2:	66 1c       	adc	r6, r6
    38d4:	77 1c       	adc	r7, r7
    38d6:	37 ff       	sbrs	r19, 7
    38d8:	08 c0       	rjmp	.+16     	; 0x38ea <__mulsf3+0x110>
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	a0 e0       	ldi	r26, 0x00	; 0
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	48 2a       	or	r4, r24
    38e4:	59 2a       	or	r5, r25
    38e6:	6a 2a       	or	r6, r26
    38e8:	7b 2a       	or	r7, r27
    38ea:	31 96       	adiw	r30, 0x01	; 1
    38ec:	e0 32       	cpi	r30, 0x20	; 32
    38ee:	f1 05       	cpc	r31, r1
    38f0:	49 f0       	breq	.+18     	; 0x3904 <__mulsf3+0x12a>
    38f2:	00 0f       	add	r16, r16
    38f4:	11 1f       	adc	r17, r17
    38f6:	22 1f       	adc	r18, r18
    38f8:	33 1f       	adc	r19, r19
    38fa:	f6 94       	lsr	r15
    38fc:	e7 94       	ror	r14
    38fe:	d7 94       	ror	r13
    3900:	c7 94       	ror	r12
    3902:	c5 cf       	rjmp	.-118    	; 0x388e <__mulsf3+0xb4>
    3904:	8b 89       	ldd	r24, Y+19	; 0x13
    3906:	9c 89       	ldd	r25, Y+20	; 0x14
    3908:	2b 85       	ldd	r18, Y+11	; 0x0b
    390a:	3c 85       	ldd	r19, Y+12	; 0x0c
    390c:	82 0f       	add	r24, r18
    390e:	93 1f       	adc	r25, r19
    3910:	02 96       	adiw	r24, 0x02	; 2
    3912:	9c 8f       	std	Y+28, r25	; 0x1c
    3914:	8b 8f       	std	Y+27, r24	; 0x1b
    3916:	1a 8e       	std	Y+26, r1	; 0x1a
    3918:	9a 85       	ldd	r25, Y+10	; 0x0a
    391a:	8a 89       	ldd	r24, Y+18	; 0x12
    391c:	98 17       	cp	r25, r24
    391e:	11 f0       	breq	.+4      	; 0x3924 <__mulsf3+0x14a>
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	8a 8f       	std	Y+26, r24	; 0x1a
    3924:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3926:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3928:	17 c0       	rjmp	.+46     	; 0x3958 <__mulsf3+0x17e>
    392a:	ca 01       	movw	r24, r20
    392c:	81 70       	andi	r24, 0x01	; 1
    392e:	90 70       	andi	r25, 0x00	; 0
    3930:	89 2b       	or	r24, r25
    3932:	61 f0       	breq	.+24     	; 0x394c <__mulsf3+0x172>
    3934:	b6 94       	lsr	r11
    3936:	a7 94       	ror	r10
    3938:	97 94       	ror	r9
    393a:	87 94       	ror	r8
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	a0 e0       	ldi	r26, 0x00	; 0
    3942:	b0 e8       	ldi	r27, 0x80	; 128
    3944:	88 2a       	or	r8, r24
    3946:	99 2a       	or	r9, r25
    3948:	aa 2a       	or	r10, r26
    394a:	bb 2a       	or	r11, r27
    394c:	76 95       	lsr	r23
    394e:	67 95       	ror	r22
    3950:	57 95       	ror	r21
    3952:	47 95       	ror	r20
    3954:	2f 5f       	subi	r18, 0xFF	; 255
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	77 fd       	sbrc	r23, 7
    395a:	e7 cf       	rjmp	.-50     	; 0x392a <__mulsf3+0x150>
    395c:	c9 01       	movw	r24, r18
    395e:	0b c0       	rjmp	.+22     	; 0x3976 <__mulsf3+0x19c>
    3960:	44 0f       	add	r20, r20
    3962:	55 1f       	adc	r21, r21
    3964:	66 1f       	adc	r22, r22
    3966:	77 1f       	adc	r23, r23
    3968:	b7 fc       	sbrc	r11, 7
    396a:	41 60       	ori	r20, 0x01	; 1
    396c:	88 0c       	add	r8, r8
    396e:	99 1c       	adc	r9, r9
    3970:	aa 1c       	adc	r10, r10
    3972:	bb 1c       	adc	r11, r11
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	40 30       	cpi	r20, 0x00	; 0
    3978:	a0 e0       	ldi	r26, 0x00	; 0
    397a:	5a 07       	cpc	r21, r26
    397c:	a0 e0       	ldi	r26, 0x00	; 0
    397e:	6a 07       	cpc	r22, r26
    3980:	a0 e4       	ldi	r26, 0x40	; 64
    3982:	7a 07       	cpc	r23, r26
    3984:	68 f3       	brcs	.-38     	; 0x3960 <__mulsf3+0x186>
    3986:	9c 8f       	std	Y+28, r25	; 0x1c
    3988:	8b 8f       	std	Y+27, r24	; 0x1b
    398a:	db 01       	movw	r26, r22
    398c:	ca 01       	movw	r24, r20
    398e:	8f 77       	andi	r24, 0x7F	; 127
    3990:	90 70       	andi	r25, 0x00	; 0
    3992:	a0 70       	andi	r26, 0x00	; 0
    3994:	b0 70       	andi	r27, 0x00	; 0
    3996:	80 34       	cpi	r24, 0x40	; 64
    3998:	91 05       	cpc	r25, r1
    399a:	a1 05       	cpc	r26, r1
    399c:	b1 05       	cpc	r27, r1
    399e:	61 f4       	brne	.+24     	; 0x39b8 <__mulsf3+0x1de>
    39a0:	47 fd       	sbrc	r20, 7
    39a2:	0a c0       	rjmp	.+20     	; 0x39b8 <__mulsf3+0x1de>
    39a4:	81 14       	cp	r8, r1
    39a6:	91 04       	cpc	r9, r1
    39a8:	a1 04       	cpc	r10, r1
    39aa:	b1 04       	cpc	r11, r1
    39ac:	29 f0       	breq	.+10     	; 0x39b8 <__mulsf3+0x1de>
    39ae:	40 5c       	subi	r20, 0xC0	; 192
    39b0:	5f 4f       	sbci	r21, 0xFF	; 255
    39b2:	6f 4f       	sbci	r22, 0xFF	; 255
    39b4:	7f 4f       	sbci	r23, 0xFF	; 255
    39b6:	40 78       	andi	r20, 0x80	; 128
    39b8:	4d 8f       	std	Y+29, r20	; 0x1d
    39ba:	5e 8f       	std	Y+30, r21	; 0x1e
    39bc:	6f 8f       	std	Y+31, r22	; 0x1f
    39be:	78 a3       	std	Y+32, r23	; 0x20
    39c0:	83 e0       	ldi	r24, 0x03	; 3
    39c2:	89 8f       	std	Y+25, r24	; 0x19
    39c4:	be 01       	movw	r22, r28
    39c6:	67 5e       	subi	r22, 0xE7	; 231
    39c8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ca:	cb 01       	movw	r24, r22
    39cc:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__pack_f>
    39d0:	e0 e1       	ldi	r30, 0x10	; 16
    39d2:	a0 96       	adiw	r28, 0x20	; 32
    39d4:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__epilogue_restores__+0x4>

000039d8 <__floatsisf>:
    39d8:	a8 e0       	ldi	r26, 0x08	; 8
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e2 ef       	ldi	r30, 0xF2	; 242
    39de:	fc e1       	ldi	r31, 0x1C	; 28
    39e0:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__prologue_saves__+0x12>
    39e4:	9b 01       	movw	r18, r22
    39e6:	ac 01       	movw	r20, r24
    39e8:	83 e0       	ldi	r24, 0x03	; 3
    39ea:	89 83       	std	Y+1, r24	; 0x01
    39ec:	da 01       	movw	r26, r20
    39ee:	c9 01       	movw	r24, r18
    39f0:	88 27       	eor	r24, r24
    39f2:	b7 fd       	sbrc	r27, 7
    39f4:	83 95       	inc	r24
    39f6:	99 27       	eor	r25, r25
    39f8:	aa 27       	eor	r26, r26
    39fa:	bb 27       	eor	r27, r27
    39fc:	b8 2e       	mov	r11, r24
    39fe:	21 15       	cp	r18, r1
    3a00:	31 05       	cpc	r19, r1
    3a02:	41 05       	cpc	r20, r1
    3a04:	51 05       	cpc	r21, r1
    3a06:	19 f4       	brne	.+6      	; 0x3a0e <__floatsisf+0x36>
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	89 83       	std	Y+1, r24	; 0x01
    3a0c:	3a c0       	rjmp	.+116    	; 0x3a82 <__floatsisf+0xaa>
    3a0e:	88 23       	and	r24, r24
    3a10:	a9 f0       	breq	.+42     	; 0x3a3c <__floatsisf+0x64>
    3a12:	20 30       	cpi	r18, 0x00	; 0
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	38 07       	cpc	r19, r24
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	48 07       	cpc	r20, r24
    3a1c:	80 e8       	ldi	r24, 0x80	; 128
    3a1e:	58 07       	cpc	r21, r24
    3a20:	29 f4       	brne	.+10     	; 0x3a2c <__floatsisf+0x54>
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	9f ec       	ldi	r25, 0xCF	; 207
    3a2a:	30 c0       	rjmp	.+96     	; 0x3a8c <__floatsisf+0xb4>
    3a2c:	ee 24       	eor	r14, r14
    3a2e:	ff 24       	eor	r15, r15
    3a30:	87 01       	movw	r16, r14
    3a32:	e2 1a       	sub	r14, r18
    3a34:	f3 0a       	sbc	r15, r19
    3a36:	04 0b       	sbc	r16, r20
    3a38:	15 0b       	sbc	r17, r21
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <__floatsisf+0x68>
    3a3c:	79 01       	movw	r14, r18
    3a3e:	8a 01       	movw	r16, r20
    3a40:	8e e1       	ldi	r24, 0x1E	; 30
    3a42:	c8 2e       	mov	r12, r24
    3a44:	d1 2c       	mov	r13, r1
    3a46:	dc 82       	std	Y+4, r13	; 0x04
    3a48:	cb 82       	std	Y+3, r12	; 0x03
    3a4a:	ed 82       	std	Y+5, r14	; 0x05
    3a4c:	fe 82       	std	Y+6, r15	; 0x06
    3a4e:	0f 83       	std	Y+7, r16	; 0x07
    3a50:	18 87       	std	Y+8, r17	; 0x08
    3a52:	c8 01       	movw	r24, r16
    3a54:	b7 01       	movw	r22, r14
    3a56:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__clzsi2>
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	18 16       	cp	r1, r24
    3a5e:	19 06       	cpc	r1, r25
    3a60:	84 f4       	brge	.+32     	; 0x3a82 <__floatsisf+0xaa>
    3a62:	08 2e       	mov	r0, r24
    3a64:	04 c0       	rjmp	.+8      	; 0x3a6e <__floatsisf+0x96>
    3a66:	ee 0c       	add	r14, r14
    3a68:	ff 1c       	adc	r15, r15
    3a6a:	00 1f       	adc	r16, r16
    3a6c:	11 1f       	adc	r17, r17
    3a6e:	0a 94       	dec	r0
    3a70:	d2 f7       	brpl	.-12     	; 0x3a66 <__floatsisf+0x8e>
    3a72:	ed 82       	std	Y+5, r14	; 0x05
    3a74:	fe 82       	std	Y+6, r15	; 0x06
    3a76:	0f 83       	std	Y+7, r16	; 0x07
    3a78:	18 87       	std	Y+8, r17	; 0x08
    3a7a:	c8 1a       	sub	r12, r24
    3a7c:	d9 0a       	sbc	r13, r25
    3a7e:	dc 82       	std	Y+4, r13	; 0x04
    3a80:	cb 82       	std	Y+3, r12	; 0x03
    3a82:	ba 82       	std	Y+2, r11	; 0x02
    3a84:	ce 01       	movw	r24, r28
    3a86:	01 96       	adiw	r24, 0x01	; 1
    3a88:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__pack_f>
    3a8c:	e9 e0       	ldi	r30, 0x09	; 9
    3a8e:	28 96       	adiw	r28, 0x08	; 8
    3a90:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__epilogue_restores__+0x12>

00003a94 <__fixsfsi>:
    3a94:	ac e0       	ldi	r26, 0x0C	; 12
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	e0 e5       	ldi	r30, 0x50	; 80
    3a9a:	fd e1       	ldi	r31, 0x1D	; 29
    3a9c:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x20>
    3aa0:	69 83       	std	Y+1, r22	; 0x01
    3aa2:	7a 83       	std	Y+2, r23	; 0x02
    3aa4:	8b 83       	std	Y+3, r24	; 0x03
    3aa6:	9c 83       	std	Y+4, r25	; 0x04
    3aa8:	be 01       	movw	r22, r28
    3aaa:	6b 5f       	subi	r22, 0xFB	; 251
    3aac:	7f 4f       	sbci	r23, 0xFF	; 255
    3aae:	ce 01       	movw	r24, r28
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__unpack_f>
    3ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab8:	82 30       	cpi	r24, 0x02	; 2
    3aba:	a9 f1       	breq	.+106    	; 0x3b26 <__fixsfsi+0x92>
    3abc:	82 30       	cpi	r24, 0x02	; 2
    3abe:	98 f1       	brcs	.+102    	; 0x3b26 <__fixsfsi+0x92>
    3ac0:	84 30       	cpi	r24, 0x04	; 4
    3ac2:	21 f4       	brne	.+8      	; 0x3acc <__fixsfsi+0x38>
    3ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac6:	88 23       	and	r24, r24
    3ac8:	59 f4       	brne	.+22     	; 0x3ae0 <__fixsfsi+0x4c>
    3aca:	0f c0       	rjmp	.+30     	; 0x3aea <__fixsfsi+0x56>
    3acc:	2f 81       	ldd	r18, Y+7	; 0x07
    3ace:	38 85       	ldd	r19, Y+8	; 0x08
    3ad0:	37 fd       	sbrc	r19, 7
    3ad2:	29 c0       	rjmp	.+82     	; 0x3b26 <__fixsfsi+0x92>
    3ad4:	6e 81       	ldd	r22, Y+6	; 0x06
    3ad6:	2f 31       	cpi	r18, 0x1F	; 31
    3ad8:	31 05       	cpc	r19, r1
    3ada:	64 f0       	brlt	.+24     	; 0x3af4 <__fixsfsi+0x60>
    3adc:	66 23       	and	r22, r22
    3ade:	29 f0       	breq	.+10     	; 0x3aea <__fixsfsi+0x56>
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e8       	ldi	r21, 0x80	; 128
    3ae8:	22 c0       	rjmp	.+68     	; 0x3b2e <__fixsfsi+0x9a>
    3aea:	2f ef       	ldi	r18, 0xFF	; 255
    3aec:	3f ef       	ldi	r19, 0xFF	; 255
    3aee:	4f ef       	ldi	r20, 0xFF	; 255
    3af0:	5f e7       	ldi	r21, 0x7F	; 127
    3af2:	1d c0       	rjmp	.+58     	; 0x3b2e <__fixsfsi+0x9a>
    3af4:	8e e1       	ldi	r24, 0x1E	; 30
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	82 1b       	sub	r24, r18
    3afa:	93 0b       	sbc	r25, r19
    3afc:	29 85       	ldd	r18, Y+9	; 0x09
    3afe:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b00:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b02:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b04:	04 c0       	rjmp	.+8      	; 0x3b0e <__fixsfsi+0x7a>
    3b06:	56 95       	lsr	r21
    3b08:	47 95       	ror	r20
    3b0a:	37 95       	ror	r19
    3b0c:	27 95       	ror	r18
    3b0e:	8a 95       	dec	r24
    3b10:	d2 f7       	brpl	.-12     	; 0x3b06 <__fixsfsi+0x72>
    3b12:	66 23       	and	r22, r22
    3b14:	61 f0       	breq	.+24     	; 0x3b2e <__fixsfsi+0x9a>
    3b16:	50 95       	com	r21
    3b18:	40 95       	com	r20
    3b1a:	30 95       	com	r19
    3b1c:	21 95       	neg	r18
    3b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b20:	4f 4f       	sbci	r20, 0xFF	; 255
    3b22:	5f 4f       	sbci	r21, 0xFF	; 255
    3b24:	04 c0       	rjmp	.+8      	; 0x3b2e <__fixsfsi+0x9a>
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e0       	ldi	r20, 0x00	; 0
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	ca 01       	movw	r24, r20
    3b30:	b9 01       	movw	r22, r18
    3b32:	e2 e0       	ldi	r30, 0x02	; 2
    3b34:	2c 96       	adiw	r28, 0x0c	; 12
    3b36:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x20>

00003b3a <__clzsi2>:
    3b3a:	ef 92       	push	r14
    3b3c:	ff 92       	push	r15
    3b3e:	0f 93       	push	r16
    3b40:	1f 93       	push	r17
    3b42:	9b 01       	movw	r18, r22
    3b44:	ac 01       	movw	r20, r24
    3b46:	20 30       	cpi	r18, 0x00	; 0
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	38 07       	cpc	r19, r24
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	48 07       	cpc	r20, r24
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	58 07       	cpc	r21, r24
    3b54:	80 f4       	brcc	.+32     	; 0x3b76 <__clzsi2+0x3c>
    3b56:	2f 3f       	cpi	r18, 0xFF	; 255
    3b58:	31 05       	cpc	r19, r1
    3b5a:	41 05       	cpc	r20, r1
    3b5c:	51 05       	cpc	r21, r1
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <__clzsi2+0x28>
    3b60:	20 f4       	brcc	.+8      	; 0x3b6a <__clzsi2+0x30>
    3b62:	ee 24       	eor	r14, r14
    3b64:	ff 24       	eor	r15, r15
    3b66:	87 01       	movw	r16, r14
    3b68:	19 c0       	rjmp	.+50     	; 0x3b9c <__clzsi2+0x62>
    3b6a:	68 e0       	ldi	r22, 0x08	; 8
    3b6c:	e6 2e       	mov	r14, r22
    3b6e:	f1 2c       	mov	r15, r1
    3b70:	01 2d       	mov	r16, r1
    3b72:	11 2d       	mov	r17, r1
    3b74:	13 c0       	rjmp	.+38     	; 0x3b9c <__clzsi2+0x62>
    3b76:	20 30       	cpi	r18, 0x00	; 0
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	38 07       	cpc	r19, r24
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	48 07       	cpc	r20, r24
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	58 07       	cpc	r21, r24
    3b84:	30 f4       	brcc	.+12     	; 0x3b92 <__clzsi2+0x58>
    3b86:	90 e1       	ldi	r25, 0x10	; 16
    3b88:	e9 2e       	mov	r14, r25
    3b8a:	f1 2c       	mov	r15, r1
    3b8c:	01 2d       	mov	r16, r1
    3b8e:	11 2d       	mov	r17, r1
    3b90:	05 c0       	rjmp	.+10     	; 0x3b9c <__clzsi2+0x62>
    3b92:	88 e1       	ldi	r24, 0x18	; 24
    3b94:	e8 2e       	mov	r14, r24
    3b96:	f1 2c       	mov	r15, r1
    3b98:	01 2d       	mov	r16, r1
    3b9a:	11 2d       	mov	r17, r1
    3b9c:	80 e2       	ldi	r24, 0x20	; 32
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	a0 e0       	ldi	r26, 0x00	; 0
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
    3ba4:	8e 19       	sub	r24, r14
    3ba6:	9f 09       	sbc	r25, r15
    3ba8:	a0 0b       	sbc	r26, r16
    3baa:	b1 0b       	sbc	r27, r17
    3bac:	04 c0       	rjmp	.+8      	; 0x3bb6 <__clzsi2+0x7c>
    3bae:	56 95       	lsr	r21
    3bb0:	47 95       	ror	r20
    3bb2:	37 95       	ror	r19
    3bb4:	27 95       	ror	r18
    3bb6:	ea 94       	dec	r14
    3bb8:	d2 f7       	brpl	.-12     	; 0x3bae <__clzsi2+0x74>
    3bba:	f9 01       	movw	r30, r18
    3bbc:	e4 5e       	subi	r30, 0xE4	; 228
    3bbe:	fd 4f       	sbci	r31, 0xFD	; 253
    3bc0:	20 81       	ld	r18, Z
    3bc2:	82 1b       	sub	r24, r18
    3bc4:	91 09       	sbc	r25, r1
    3bc6:	a1 09       	sbc	r26, r1
    3bc8:	b1 09       	sbc	r27, r1
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	08 95       	ret

00003bd4 <__pack_f>:
    3bd4:	9f 92       	push	r9
    3bd6:	af 92       	push	r10
    3bd8:	bf 92       	push	r11
    3bda:	cf 92       	push	r12
    3bdc:	df 92       	push	r13
    3bde:	ef 92       	push	r14
    3be0:	ff 92       	push	r15
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	ee 24       	eor	r14, r14
    3be8:	ff 24       	eor	r15, r15
    3bea:	87 01       	movw	r16, r14
    3bec:	fc 01       	movw	r30, r24
    3bee:	24 81       	ldd	r18, Z+4	; 0x04
    3bf0:	35 81       	ldd	r19, Z+5	; 0x05
    3bf2:	46 81       	ldd	r20, Z+6	; 0x06
    3bf4:	57 81       	ldd	r21, Z+7	; 0x07
    3bf6:	91 80       	ldd	r9, Z+1	; 0x01
    3bf8:	80 81       	ld	r24, Z
    3bfa:	82 30       	cpi	r24, 0x02	; 2
    3bfc:	10 f4       	brcc	.+4      	; 0x3c02 <__pack_f+0x2e>
    3bfe:	40 61       	ori	r20, 0x10	; 16
    3c00:	a2 c0       	rjmp	.+324    	; 0x3d46 <__pack_f+0x172>
    3c02:	84 30       	cpi	r24, 0x04	; 4
    3c04:	09 f4       	brne	.+2      	; 0x3c08 <__pack_f+0x34>
    3c06:	9b c0       	rjmp	.+310    	; 0x3d3e <__pack_f+0x16a>
    3c08:	82 30       	cpi	r24, 0x02	; 2
    3c0a:	29 f4       	brne	.+10     	; 0x3c16 <__pack_f+0x42>
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	05 c0       	rjmp	.+10     	; 0x3c20 <__pack_f+0x4c>
    3c16:	21 15       	cp	r18, r1
    3c18:	31 05       	cpc	r19, r1
    3c1a:	41 05       	cpc	r20, r1
    3c1c:	51 05       	cpc	r21, r1
    3c1e:	19 f4       	brne	.+6      	; 0x3c26 <__pack_f+0x52>
    3c20:	e0 e0       	ldi	r30, 0x00	; 0
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	92 c0       	rjmp	.+292    	; 0x3d4a <__pack_f+0x176>
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	6f ef       	ldi	r22, 0xFF	; 255
    3c2c:	82 38       	cpi	r24, 0x82	; 130
    3c2e:	96 07       	cpc	r25, r22
    3c30:	0c f0       	brlt	.+2      	; 0x3c34 <__pack_f+0x60>
    3c32:	5a c0       	rjmp	.+180    	; 0x3ce8 <__pack_f+0x114>
    3c34:	62 e8       	ldi	r22, 0x82	; 130
    3c36:	7f ef       	ldi	r23, 0xFF	; 255
    3c38:	68 1b       	sub	r22, r24
    3c3a:	79 0b       	sbc	r23, r25
    3c3c:	6a 31       	cpi	r22, 0x1A	; 26
    3c3e:	71 05       	cpc	r23, r1
    3c40:	2c f0       	brlt	.+10     	; 0x3c4c <__pack_f+0x78>
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	40 e0       	ldi	r20, 0x00	; 0
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	2a c0       	rjmp	.+84     	; 0x3ca0 <__pack_f+0xcc>
    3c4c:	aa 24       	eor	r10, r10
    3c4e:	bb 24       	eor	r11, r11
    3c50:	65 01       	movw	r12, r10
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	a0 e0       	ldi	r26, 0x00	; 0
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	06 2e       	mov	r0, r22
    3c5c:	04 c0       	rjmp	.+8      	; 0x3c66 <__pack_f+0x92>
    3c5e:	88 0f       	add	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	aa 1f       	adc	r26, r26
    3c64:	bb 1f       	adc	r27, r27
    3c66:	0a 94       	dec	r0
    3c68:	d2 f7       	brpl	.-12     	; 0x3c5e <__pack_f+0x8a>
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	a1 09       	sbc	r26, r1
    3c6e:	b1 09       	sbc	r27, r1
    3c70:	82 23       	and	r24, r18
    3c72:	93 23       	and	r25, r19
    3c74:	a4 23       	and	r26, r20
    3c76:	b5 23       	and	r27, r21
    3c78:	00 97       	sbiw	r24, 0x00	; 0
    3c7a:	a1 05       	cpc	r26, r1
    3c7c:	b1 05       	cpc	r27, r1
    3c7e:	29 f0       	breq	.+10     	; 0x3c8a <__pack_f+0xb6>
    3c80:	71 e0       	ldi	r23, 0x01	; 1
    3c82:	a7 2e       	mov	r10, r23
    3c84:	b1 2c       	mov	r11, r1
    3c86:	c1 2c       	mov	r12, r1
    3c88:	d1 2c       	mov	r13, r1
    3c8a:	04 c0       	rjmp	.+8      	; 0x3c94 <__pack_f+0xc0>
    3c8c:	56 95       	lsr	r21
    3c8e:	47 95       	ror	r20
    3c90:	37 95       	ror	r19
    3c92:	27 95       	ror	r18
    3c94:	6a 95       	dec	r22
    3c96:	d2 f7       	brpl	.-12     	; 0x3c8c <__pack_f+0xb8>
    3c98:	2a 29       	or	r18, r10
    3c9a:	3b 29       	or	r19, r11
    3c9c:	4c 29       	or	r20, r12
    3c9e:	5d 29       	or	r21, r13
    3ca0:	da 01       	movw	r26, r20
    3ca2:	c9 01       	movw	r24, r18
    3ca4:	8f 77       	andi	r24, 0x7F	; 127
    3ca6:	90 70       	andi	r25, 0x00	; 0
    3ca8:	a0 70       	andi	r26, 0x00	; 0
    3caa:	b0 70       	andi	r27, 0x00	; 0
    3cac:	80 34       	cpi	r24, 0x40	; 64
    3cae:	91 05       	cpc	r25, r1
    3cb0:	a1 05       	cpc	r26, r1
    3cb2:	b1 05       	cpc	r27, r1
    3cb4:	39 f4       	brne	.+14     	; 0x3cc4 <__pack_f+0xf0>
    3cb6:	27 ff       	sbrs	r18, 7
    3cb8:	09 c0       	rjmp	.+18     	; 0x3ccc <__pack_f+0xf8>
    3cba:	20 5c       	subi	r18, 0xC0	; 192
    3cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbe:	4f 4f       	sbci	r20, 0xFF	; 255
    3cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc2:	04 c0       	rjmp	.+8      	; 0x3ccc <__pack_f+0xf8>
    3cc4:	21 5c       	subi	r18, 0xC1	; 193
    3cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc8:	4f 4f       	sbci	r20, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	20 30       	cpi	r18, 0x00	; 0
    3cd2:	60 e0       	ldi	r22, 0x00	; 0
    3cd4:	36 07       	cpc	r19, r22
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	46 07       	cpc	r20, r22
    3cda:	60 e4       	ldi	r22, 0x40	; 64
    3cdc:	56 07       	cpc	r21, r22
    3cde:	10 f0       	brcs	.+4      	; 0x3ce4 <__pack_f+0x110>
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	23 c0       	rjmp	.+70     	; 0x3d2e <__pack_f+0x15a>
    3ce8:	80 38       	cpi	r24, 0x80	; 128
    3cea:	91 05       	cpc	r25, r1
    3cec:	44 f5       	brge	.+80     	; 0x3d3e <__pack_f+0x16a>
    3cee:	fc 01       	movw	r30, r24
    3cf0:	e1 58       	subi	r30, 0x81	; 129
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	da 01       	movw	r26, r20
    3cf6:	c9 01       	movw	r24, r18
    3cf8:	8f 77       	andi	r24, 0x7F	; 127
    3cfa:	90 70       	andi	r25, 0x00	; 0
    3cfc:	a0 70       	andi	r26, 0x00	; 0
    3cfe:	b0 70       	andi	r27, 0x00	; 0
    3d00:	80 34       	cpi	r24, 0x40	; 64
    3d02:	91 05       	cpc	r25, r1
    3d04:	a1 05       	cpc	r26, r1
    3d06:	b1 05       	cpc	r27, r1
    3d08:	39 f4       	brne	.+14     	; 0x3d18 <__pack_f+0x144>
    3d0a:	27 ff       	sbrs	r18, 7
    3d0c:	09 c0       	rjmp	.+18     	; 0x3d20 <__pack_f+0x14c>
    3d0e:	20 5c       	subi	r18, 0xC0	; 192
    3d10:	3f 4f       	sbci	r19, 0xFF	; 255
    3d12:	4f 4f       	sbci	r20, 0xFF	; 255
    3d14:	5f 4f       	sbci	r21, 0xFF	; 255
    3d16:	04 c0       	rjmp	.+8      	; 0x3d20 <__pack_f+0x14c>
    3d18:	21 5c       	subi	r18, 0xC1	; 193
    3d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d20:	57 ff       	sbrs	r21, 7
    3d22:	05 c0       	rjmp	.+10     	; 0x3d2e <__pack_f+0x15a>
    3d24:	56 95       	lsr	r21
    3d26:	47 95       	ror	r20
    3d28:	37 95       	ror	r19
    3d2a:	27 95       	ror	r18
    3d2c:	31 96       	adiw	r30, 0x01	; 1
    3d2e:	87 e0       	ldi	r24, 0x07	; 7
    3d30:	56 95       	lsr	r21
    3d32:	47 95       	ror	r20
    3d34:	37 95       	ror	r19
    3d36:	27 95       	ror	r18
    3d38:	8a 95       	dec	r24
    3d3a:	d1 f7       	brne	.-12     	; 0x3d30 <__pack_f+0x15c>
    3d3c:	06 c0       	rjmp	.+12     	; 0x3d4a <__pack_f+0x176>
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e0       	ldi	r20, 0x00	; 0
    3d44:	50 e0       	ldi	r21, 0x00	; 0
    3d46:	ef ef       	ldi	r30, 0xFF	; 255
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	e2 2e       	mov	r14, r18
    3d4c:	f3 2e       	mov	r15, r19
    3d4e:	94 2f       	mov	r25, r20
    3d50:	9f 77       	andi	r25, 0x7F	; 127
    3d52:	80 2f       	mov	r24, r16
    3d54:	80 78       	andi	r24, 0x80	; 128
    3d56:	89 2b       	or	r24, r25
    3d58:	9e 2f       	mov	r25, r30
    3d5a:	97 95       	ror	r25
    3d5c:	99 27       	eor	r25, r25
    3d5e:	97 95       	ror	r25
    3d60:	8f 77       	andi	r24, 0x7F	; 127
    3d62:	08 2f       	mov	r16, r24
    3d64:	09 2b       	or	r16, r25
    3d66:	9e 2f       	mov	r25, r30
    3d68:	96 95       	lsr	r25
    3d6a:	81 2f       	mov	r24, r17
    3d6c:	80 78       	andi	r24, 0x80	; 128
    3d6e:	89 2b       	or	r24, r25
    3d70:	97 94       	ror	r9
    3d72:	99 24       	eor	r9, r9
    3d74:	97 94       	ror	r9
    3d76:	8f 77       	andi	r24, 0x7F	; 127
    3d78:	18 2f       	mov	r17, r24
    3d7a:	19 29       	or	r17, r9
    3d7c:	c8 01       	movw	r24, r16
    3d7e:	b7 01       	movw	r22, r14
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	ff 90       	pop	r15
    3d86:	ef 90       	pop	r14
    3d88:	df 90       	pop	r13
    3d8a:	cf 90       	pop	r12
    3d8c:	bf 90       	pop	r11
    3d8e:	af 90       	pop	r10
    3d90:	9f 90       	pop	r9
    3d92:	08 95       	ret

00003d94 <__unpack_f>:
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	fc 01       	movw	r30, r24
    3d9a:	db 01       	movw	r26, r22
    3d9c:	20 81       	ld	r18, Z
    3d9e:	31 81       	ldd	r19, Z+1	; 0x01
    3da0:	92 81       	ldd	r25, Z+2	; 0x02
    3da2:	49 2f       	mov	r20, r25
    3da4:	4f 77       	andi	r20, 0x7F	; 127
    3da6:	50 e0       	ldi	r21, 0x00	; 0
    3da8:	99 1f       	adc	r25, r25
    3daa:	99 27       	eor	r25, r25
    3dac:	99 1f       	adc	r25, r25
    3dae:	83 81       	ldd	r24, Z+3	; 0x03
    3db0:	e8 2f       	mov	r30, r24
    3db2:	ee 0f       	add	r30, r30
    3db4:	e9 2b       	or	r30, r25
    3db6:	6e 2f       	mov	r22, r30
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	88 1f       	adc	r24, r24
    3dbc:	88 27       	eor	r24, r24
    3dbe:	88 1f       	adc	r24, r24
    3dc0:	ed 01       	movw	r28, r26
    3dc2:	89 83       	std	Y+1, r24	; 0x01
    3dc4:	ee 23       	and	r30, r30
    3dc6:	71 f5       	brne	.+92     	; 0x3e24 <__unpack_f+0x90>
    3dc8:	21 15       	cp	r18, r1
    3dca:	31 05       	cpc	r19, r1
    3dcc:	41 05       	cpc	r20, r1
    3dce:	51 05       	cpc	r21, r1
    3dd0:	11 f4       	brne	.+4      	; 0x3dd6 <__unpack_f+0x42>
    3dd2:	82 e0       	ldi	r24, 0x02	; 2
    3dd4:	2f c0       	rjmp	.+94     	; 0x3e34 <__unpack_f+0xa0>
    3dd6:	6e 57       	subi	r22, 0x7E	; 126
    3dd8:	70 40       	sbci	r23, 0x00	; 0
    3dda:	fd 01       	movw	r30, r26
    3ddc:	73 83       	std	Z+3, r23	; 0x03
    3dde:	62 83       	std	Z+2, r22	; 0x02
    3de0:	67 e0       	ldi	r22, 0x07	; 7
    3de2:	22 0f       	add	r18, r18
    3de4:	33 1f       	adc	r19, r19
    3de6:	44 1f       	adc	r20, r20
    3de8:	55 1f       	adc	r21, r21
    3dea:	6a 95       	dec	r22
    3dec:	d1 f7       	brne	.-12     	; 0x3de2 <__unpack_f+0x4e>
    3dee:	83 e0       	ldi	r24, 0x03	; 3
    3df0:	8c 93       	st	X, r24
    3df2:	0a c0       	rjmp	.+20     	; 0x3e08 <__unpack_f+0x74>
    3df4:	22 0f       	add	r18, r18
    3df6:	33 1f       	adc	r19, r19
    3df8:	44 1f       	adc	r20, r20
    3dfa:	55 1f       	adc	r21, r21
    3dfc:	ed 01       	movw	r28, r26
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	9b 81       	ldd	r25, Y+3	; 0x03
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	9b 83       	std	Y+3, r25	; 0x03
    3e06:	8a 83       	std	Y+2, r24	; 0x02
    3e08:	20 30       	cpi	r18, 0x00	; 0
    3e0a:	e0 e0       	ldi	r30, 0x00	; 0
    3e0c:	3e 07       	cpc	r19, r30
    3e0e:	e0 e0       	ldi	r30, 0x00	; 0
    3e10:	4e 07       	cpc	r20, r30
    3e12:	e0 e4       	ldi	r30, 0x40	; 64
    3e14:	5e 07       	cpc	r21, r30
    3e16:	70 f3       	brcs	.-36     	; 0x3df4 <__unpack_f+0x60>
    3e18:	ed 01       	movw	r28, r26
    3e1a:	2c 83       	std	Y+4, r18	; 0x04
    3e1c:	3d 83       	std	Y+5, r19	; 0x05
    3e1e:	4e 83       	std	Y+6, r20	; 0x06
    3e20:	5f 83       	std	Y+7, r21	; 0x07
    3e22:	25 c0       	rjmp	.+74     	; 0x3e6e <__unpack_f+0xda>
    3e24:	ef 3f       	cpi	r30, 0xFF	; 255
    3e26:	79 f4       	brne	.+30     	; 0x3e46 <__unpack_f+0xb2>
    3e28:	21 15       	cp	r18, r1
    3e2a:	31 05       	cpc	r19, r1
    3e2c:	41 05       	cpc	r20, r1
    3e2e:	51 05       	cpc	r21, r1
    3e30:	19 f4       	brne	.+6      	; 0x3e38 <__unpack_f+0xa4>
    3e32:	84 e0       	ldi	r24, 0x04	; 4
    3e34:	8c 93       	st	X, r24
    3e36:	1b c0       	rjmp	.+54     	; 0x3e6e <__unpack_f+0xda>
    3e38:	44 ff       	sbrs	r20, 4
    3e3a:	03 c0       	rjmp	.+6      	; 0x3e42 <__unpack_f+0xae>
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	8c 93       	st	X, r24
    3e40:	11 c0       	rjmp	.+34     	; 0x3e64 <__unpack_f+0xd0>
    3e42:	1c 92       	st	X, r1
    3e44:	0f c0       	rjmp	.+30     	; 0x3e64 <__unpack_f+0xd0>
    3e46:	6f 57       	subi	r22, 0x7F	; 127
    3e48:	70 40       	sbci	r23, 0x00	; 0
    3e4a:	ed 01       	movw	r28, r26
    3e4c:	7b 83       	std	Y+3, r23	; 0x03
    3e4e:	6a 83       	std	Y+2, r22	; 0x02
    3e50:	83 e0       	ldi	r24, 0x03	; 3
    3e52:	8c 93       	st	X, r24
    3e54:	87 e0       	ldi	r24, 0x07	; 7
    3e56:	22 0f       	add	r18, r18
    3e58:	33 1f       	adc	r19, r19
    3e5a:	44 1f       	adc	r20, r20
    3e5c:	55 1f       	adc	r21, r21
    3e5e:	8a 95       	dec	r24
    3e60:	d1 f7       	brne	.-12     	; 0x3e56 <__unpack_f+0xc2>
    3e62:	50 64       	ori	r21, 0x40	; 64
    3e64:	fd 01       	movw	r30, r26
    3e66:	24 83       	std	Z+4, r18	; 0x04
    3e68:	35 83       	std	Z+5, r19	; 0x05
    3e6a:	46 83       	std	Z+6, r20	; 0x06
    3e6c:	57 83       	std	Z+7, r21	; 0x07
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	08 95       	ret

00003e74 <__mulsi3>:
    3e74:	62 9f       	mul	r22, r18
    3e76:	d0 01       	movw	r26, r0
    3e78:	73 9f       	mul	r23, r19
    3e7a:	f0 01       	movw	r30, r0
    3e7c:	82 9f       	mul	r24, r18
    3e7e:	e0 0d       	add	r30, r0
    3e80:	f1 1d       	adc	r31, r1
    3e82:	64 9f       	mul	r22, r20
    3e84:	e0 0d       	add	r30, r0
    3e86:	f1 1d       	adc	r31, r1
    3e88:	92 9f       	mul	r25, r18
    3e8a:	f0 0d       	add	r31, r0
    3e8c:	83 9f       	mul	r24, r19
    3e8e:	f0 0d       	add	r31, r0
    3e90:	74 9f       	mul	r23, r20
    3e92:	f0 0d       	add	r31, r0
    3e94:	65 9f       	mul	r22, r21
    3e96:	f0 0d       	add	r31, r0
    3e98:	99 27       	eor	r25, r25
    3e9a:	72 9f       	mul	r23, r18
    3e9c:	b0 0d       	add	r27, r0
    3e9e:	e1 1d       	adc	r30, r1
    3ea0:	f9 1f       	adc	r31, r25
    3ea2:	63 9f       	mul	r22, r19
    3ea4:	b0 0d       	add	r27, r0
    3ea6:	e1 1d       	adc	r30, r1
    3ea8:	f9 1f       	adc	r31, r25
    3eaa:	bd 01       	movw	r22, r26
    3eac:	cf 01       	movw	r24, r30
    3eae:	11 24       	eor	r1, r1
    3eb0:	08 95       	ret

00003eb2 <__udivmodhi4>:
    3eb2:	aa 1b       	sub	r26, r26
    3eb4:	bb 1b       	sub	r27, r27
    3eb6:	51 e1       	ldi	r21, 0x11	; 17
    3eb8:	07 c0       	rjmp	.+14     	; 0x3ec8 <__udivmodhi4_ep>

00003eba <__udivmodhi4_loop>:
    3eba:	aa 1f       	adc	r26, r26
    3ebc:	bb 1f       	adc	r27, r27
    3ebe:	a6 17       	cp	r26, r22
    3ec0:	b7 07       	cpc	r27, r23
    3ec2:	10 f0       	brcs	.+4      	; 0x3ec8 <__udivmodhi4_ep>
    3ec4:	a6 1b       	sub	r26, r22
    3ec6:	b7 0b       	sbc	r27, r23

00003ec8 <__udivmodhi4_ep>:
    3ec8:	88 1f       	adc	r24, r24
    3eca:	99 1f       	adc	r25, r25
    3ecc:	5a 95       	dec	r21
    3ece:	a9 f7       	brne	.-22     	; 0x3eba <__udivmodhi4_loop>
    3ed0:	80 95       	com	r24
    3ed2:	90 95       	com	r25
    3ed4:	bc 01       	movw	r22, r24
    3ed6:	cd 01       	movw	r24, r26
    3ed8:	08 95       	ret

00003eda <__divmodhi4>:
    3eda:	97 fb       	bst	r25, 7
    3edc:	09 2e       	mov	r0, r25
    3ede:	07 26       	eor	r0, r23
    3ee0:	0a d0       	rcall	.+20     	; 0x3ef6 <__divmodhi4_neg1>
    3ee2:	77 fd       	sbrc	r23, 7
    3ee4:	04 d0       	rcall	.+8      	; 0x3eee <__divmodhi4_neg2>
    3ee6:	e5 df       	rcall	.-54     	; 0x3eb2 <__udivmodhi4>
    3ee8:	06 d0       	rcall	.+12     	; 0x3ef6 <__divmodhi4_neg1>
    3eea:	00 20       	and	r0, r0
    3eec:	1a f4       	brpl	.+6      	; 0x3ef4 <__divmodhi4_exit>

00003eee <__divmodhi4_neg2>:
    3eee:	70 95       	com	r23
    3ef0:	61 95       	neg	r22
    3ef2:	7f 4f       	sbci	r23, 0xFF	; 255

00003ef4 <__divmodhi4_exit>:
    3ef4:	08 95       	ret

00003ef6 <__divmodhi4_neg1>:
    3ef6:	f6 f7       	brtc	.-4      	; 0x3ef4 <__divmodhi4_exit>
    3ef8:	90 95       	com	r25
    3efa:	81 95       	neg	r24
    3efc:	9f 4f       	sbci	r25, 0xFF	; 255
    3efe:	08 95       	ret

00003f00 <__divmodsi4>:
    3f00:	97 fb       	bst	r25, 7
    3f02:	09 2e       	mov	r0, r25
    3f04:	05 26       	eor	r0, r21
    3f06:	0e d0       	rcall	.+28     	; 0x3f24 <__divmodsi4_neg1>
    3f08:	57 fd       	sbrc	r21, 7
    3f0a:	04 d0       	rcall	.+8      	; 0x3f14 <__divmodsi4_neg2>
    3f0c:	14 d0       	rcall	.+40     	; 0x3f36 <__udivmodsi4>
    3f0e:	0a d0       	rcall	.+20     	; 0x3f24 <__divmodsi4_neg1>
    3f10:	00 1c       	adc	r0, r0
    3f12:	38 f4       	brcc	.+14     	; 0x3f22 <__divmodsi4_exit>

00003f14 <__divmodsi4_neg2>:
    3f14:	50 95       	com	r21
    3f16:	40 95       	com	r20
    3f18:	30 95       	com	r19
    3f1a:	21 95       	neg	r18
    3f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1e:	4f 4f       	sbci	r20, 0xFF	; 255
    3f20:	5f 4f       	sbci	r21, 0xFF	; 255

00003f22 <__divmodsi4_exit>:
    3f22:	08 95       	ret

00003f24 <__divmodsi4_neg1>:
    3f24:	f6 f7       	brtc	.-4      	; 0x3f22 <__divmodsi4_exit>
    3f26:	90 95       	com	r25
    3f28:	80 95       	com	r24
    3f2a:	70 95       	com	r23
    3f2c:	61 95       	neg	r22
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	8f 4f       	sbci	r24, 0xFF	; 255
    3f32:	9f 4f       	sbci	r25, 0xFF	; 255
    3f34:	08 95       	ret

00003f36 <__udivmodsi4>:
    3f36:	a1 e2       	ldi	r26, 0x21	; 33
    3f38:	1a 2e       	mov	r1, r26
    3f3a:	aa 1b       	sub	r26, r26
    3f3c:	bb 1b       	sub	r27, r27
    3f3e:	fd 01       	movw	r30, r26
    3f40:	0d c0       	rjmp	.+26     	; 0x3f5c <__udivmodsi4_ep>

00003f42 <__udivmodsi4_loop>:
    3f42:	aa 1f       	adc	r26, r26
    3f44:	bb 1f       	adc	r27, r27
    3f46:	ee 1f       	adc	r30, r30
    3f48:	ff 1f       	adc	r31, r31
    3f4a:	a2 17       	cp	r26, r18
    3f4c:	b3 07       	cpc	r27, r19
    3f4e:	e4 07       	cpc	r30, r20
    3f50:	f5 07       	cpc	r31, r21
    3f52:	20 f0       	brcs	.+8      	; 0x3f5c <__udivmodsi4_ep>
    3f54:	a2 1b       	sub	r26, r18
    3f56:	b3 0b       	sbc	r27, r19
    3f58:	e4 0b       	sbc	r30, r20
    3f5a:	f5 0b       	sbc	r31, r21

00003f5c <__udivmodsi4_ep>:
    3f5c:	66 1f       	adc	r22, r22
    3f5e:	77 1f       	adc	r23, r23
    3f60:	88 1f       	adc	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	1a 94       	dec	r1
    3f66:	69 f7       	brne	.-38     	; 0x3f42 <__udivmodsi4_loop>
    3f68:	60 95       	com	r22
    3f6a:	70 95       	com	r23
    3f6c:	80 95       	com	r24
    3f6e:	90 95       	com	r25
    3f70:	9b 01       	movw	r18, r22
    3f72:	ac 01       	movw	r20, r24
    3f74:	bd 01       	movw	r22, r26
    3f76:	cf 01       	movw	r24, r30
    3f78:	08 95       	ret

00003f7a <__prologue_saves__>:
    3f7a:	2f 92       	push	r2
    3f7c:	3f 92       	push	r3
    3f7e:	4f 92       	push	r4
    3f80:	5f 92       	push	r5
    3f82:	6f 92       	push	r6
    3f84:	7f 92       	push	r7
    3f86:	8f 92       	push	r8
    3f88:	9f 92       	push	r9
    3f8a:	af 92       	push	r10
    3f8c:	bf 92       	push	r11
    3f8e:	cf 92       	push	r12
    3f90:	df 92       	push	r13
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	ca 1b       	sub	r28, r26
    3fa4:	db 0b       	sbc	r29, r27
    3fa6:	0f b6       	in	r0, 0x3f	; 63
    3fa8:	f8 94       	cli
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	0f be       	out	0x3f, r0	; 63
    3fae:	cd bf       	out	0x3d, r28	; 61
    3fb0:	19 94       	eijmp

00003fb2 <__epilogue_restores__>:
    3fb2:	2a 88       	ldd	r2, Y+18	; 0x12
    3fb4:	39 88       	ldd	r3, Y+17	; 0x11
    3fb6:	48 88       	ldd	r4, Y+16	; 0x10
    3fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fba:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fc4:	b9 84       	ldd	r11, Y+9	; 0x09
    3fc6:	c8 84       	ldd	r12, Y+8	; 0x08
    3fc8:	df 80       	ldd	r13, Y+7	; 0x07
    3fca:	ee 80       	ldd	r14, Y+6	; 0x06
    3fcc:	fd 80       	ldd	r15, Y+5	; 0x05
    3fce:	0c 81       	ldd	r16, Y+4	; 0x04
    3fd0:	1b 81       	ldd	r17, Y+3	; 0x03
    3fd2:	aa 81       	ldd	r26, Y+2	; 0x02
    3fd4:	b9 81       	ldd	r27, Y+1	; 0x01
    3fd6:	ce 0f       	add	r28, r30
    3fd8:	d1 1d       	adc	r29, r1
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	ed 01       	movw	r28, r26
    3fe6:	08 95       	ret

00003fe8 <malloc>:
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	82 30       	cpi	r24, 0x02	; 2
    3fee:	91 05       	cpc	r25, r1
    3ff0:	10 f4       	brcc	.+4      	; 0x3ff6 <malloc+0xe>
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	e0 91 11 04 	lds	r30, 0x0411
    3ffa:	f0 91 12 04 	lds	r31, 0x0412
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	50 e0       	ldi	r21, 0x00	; 0
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	26 c0       	rjmp	.+76     	; 0x4054 <malloc+0x6c>
    4008:	60 81       	ld	r22, Z
    400a:	71 81       	ldd	r23, Z+1	; 0x01
    400c:	68 17       	cp	r22, r24
    400e:	79 07       	cpc	r23, r25
    4010:	e0 f0       	brcs	.+56     	; 0x404a <malloc+0x62>
    4012:	68 17       	cp	r22, r24
    4014:	79 07       	cpc	r23, r25
    4016:	81 f4       	brne	.+32     	; 0x4038 <malloc+0x50>
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	21 15       	cp	r18, r1
    401e:	31 05       	cpc	r19, r1
    4020:	31 f0       	breq	.+12     	; 0x402e <malloc+0x46>
    4022:	d9 01       	movw	r26, r18
    4024:	13 96       	adiw	r26, 0x03	; 3
    4026:	9c 93       	st	X, r25
    4028:	8e 93       	st	-X, r24
    402a:	12 97       	sbiw	r26, 0x02	; 2
    402c:	2b c0       	rjmp	.+86     	; 0x4084 <malloc+0x9c>
    402e:	90 93 12 04 	sts	0x0412, r25
    4032:	80 93 11 04 	sts	0x0411, r24
    4036:	26 c0       	rjmp	.+76     	; 0x4084 <malloc+0x9c>
    4038:	41 15       	cp	r20, r1
    403a:	51 05       	cpc	r21, r1
    403c:	19 f0       	breq	.+6      	; 0x4044 <malloc+0x5c>
    403e:	64 17       	cp	r22, r20
    4040:	75 07       	cpc	r23, r21
    4042:	18 f4       	brcc	.+6      	; 0x404a <malloc+0x62>
    4044:	ab 01       	movw	r20, r22
    4046:	e9 01       	movw	r28, r18
    4048:	df 01       	movw	r26, r30
    404a:	9f 01       	movw	r18, r30
    404c:	72 81       	ldd	r23, Z+2	; 0x02
    404e:	63 81       	ldd	r22, Z+3	; 0x03
    4050:	e7 2f       	mov	r30, r23
    4052:	f6 2f       	mov	r31, r22
    4054:	30 97       	sbiw	r30, 0x00	; 0
    4056:	c1 f6       	brne	.-80     	; 0x4008 <malloc+0x20>
    4058:	41 15       	cp	r20, r1
    405a:	51 05       	cpc	r21, r1
    405c:	01 f1       	breq	.+64     	; 0x409e <malloc+0xb6>
    405e:	48 1b       	sub	r20, r24
    4060:	59 0b       	sbc	r21, r25
    4062:	44 30       	cpi	r20, 0x04	; 4
    4064:	51 05       	cpc	r21, r1
    4066:	80 f4       	brcc	.+32     	; 0x4088 <malloc+0xa0>
    4068:	12 96       	adiw	r26, 0x02	; 2
    406a:	8d 91       	ld	r24, X+
    406c:	9c 91       	ld	r25, X
    406e:	13 97       	sbiw	r26, 0x03	; 3
    4070:	20 97       	sbiw	r28, 0x00	; 0
    4072:	19 f0       	breq	.+6      	; 0x407a <malloc+0x92>
    4074:	9b 83       	std	Y+3, r25	; 0x03
    4076:	8a 83       	std	Y+2, r24	; 0x02
    4078:	04 c0       	rjmp	.+8      	; 0x4082 <malloc+0x9a>
    407a:	90 93 12 04 	sts	0x0412, r25
    407e:	80 93 11 04 	sts	0x0411, r24
    4082:	fd 01       	movw	r30, r26
    4084:	32 96       	adiw	r30, 0x02	; 2
    4086:	46 c0       	rjmp	.+140    	; 0x4114 <malloc+0x12c>
    4088:	fd 01       	movw	r30, r26
    408a:	e4 0f       	add	r30, r20
    408c:	f5 1f       	adc	r31, r21
    408e:	81 93       	st	Z+, r24
    4090:	91 93       	st	Z+, r25
    4092:	42 50       	subi	r20, 0x02	; 2
    4094:	50 40       	sbci	r21, 0x00	; 0
    4096:	11 96       	adiw	r26, 0x01	; 1
    4098:	5c 93       	st	X, r21
    409a:	4e 93       	st	-X, r20
    409c:	3b c0       	rjmp	.+118    	; 0x4114 <malloc+0x12c>
    409e:	20 91 0f 04 	lds	r18, 0x040F
    40a2:	30 91 10 04 	lds	r19, 0x0410
    40a6:	21 15       	cp	r18, r1
    40a8:	31 05       	cpc	r19, r1
    40aa:	41 f4       	brne	.+16     	; 0x40bc <malloc+0xd4>
    40ac:	20 91 1e 03 	lds	r18, 0x031E
    40b0:	30 91 1f 03 	lds	r19, 0x031F
    40b4:	30 93 10 04 	sts	0x0410, r19
    40b8:	20 93 0f 04 	sts	0x040F, r18
    40bc:	20 91 20 03 	lds	r18, 0x0320
    40c0:	30 91 21 03 	lds	r19, 0x0321
    40c4:	21 15       	cp	r18, r1
    40c6:	31 05       	cpc	r19, r1
    40c8:	41 f4       	brne	.+16     	; 0x40da <malloc+0xf2>
    40ca:	2d b7       	in	r18, 0x3d	; 61
    40cc:	3e b7       	in	r19, 0x3e	; 62
    40ce:	40 91 1c 03 	lds	r20, 0x031C
    40d2:	50 91 1d 03 	lds	r21, 0x031D
    40d6:	24 1b       	sub	r18, r20
    40d8:	35 0b       	sbc	r19, r21
    40da:	e0 91 0f 04 	lds	r30, 0x040F
    40de:	f0 91 10 04 	lds	r31, 0x0410
    40e2:	e2 17       	cp	r30, r18
    40e4:	f3 07       	cpc	r31, r19
    40e6:	a0 f4       	brcc	.+40     	; 0x4110 <malloc+0x128>
    40e8:	2e 1b       	sub	r18, r30
    40ea:	3f 0b       	sbc	r19, r31
    40ec:	28 17       	cp	r18, r24
    40ee:	39 07       	cpc	r19, r25
    40f0:	78 f0       	brcs	.+30     	; 0x4110 <malloc+0x128>
    40f2:	ac 01       	movw	r20, r24
    40f4:	4e 5f       	subi	r20, 0xFE	; 254
    40f6:	5f 4f       	sbci	r21, 0xFF	; 255
    40f8:	24 17       	cp	r18, r20
    40fa:	35 07       	cpc	r19, r21
    40fc:	48 f0       	brcs	.+18     	; 0x4110 <malloc+0x128>
    40fe:	4e 0f       	add	r20, r30
    4100:	5f 1f       	adc	r21, r31
    4102:	50 93 10 04 	sts	0x0410, r21
    4106:	40 93 0f 04 	sts	0x040F, r20
    410a:	81 93       	st	Z+, r24
    410c:	91 93       	st	Z+, r25
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <malloc+0x12c>
    4110:	e0 e0       	ldi	r30, 0x00	; 0
    4112:	f0 e0       	ldi	r31, 0x00	; 0
    4114:	cf 01       	movw	r24, r30
    4116:	df 91       	pop	r29
    4118:	cf 91       	pop	r28
    411a:	08 95       	ret

0000411c <free>:
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	09 f4       	brne	.+2      	; 0x4126 <free+0xa>
    4124:	91 c0       	rjmp	.+290    	; 0x4248 <free+0x12c>
    4126:	fc 01       	movw	r30, r24
    4128:	32 97       	sbiw	r30, 0x02	; 2
    412a:	13 82       	std	Z+3, r1	; 0x03
    412c:	12 82       	std	Z+2, r1	; 0x02
    412e:	60 91 11 04 	lds	r22, 0x0411
    4132:	70 91 12 04 	lds	r23, 0x0412
    4136:	61 15       	cp	r22, r1
    4138:	71 05       	cpc	r23, r1
    413a:	81 f4       	brne	.+32     	; 0x415c <free+0x40>
    413c:	20 81       	ld	r18, Z
    413e:	31 81       	ldd	r19, Z+1	; 0x01
    4140:	28 0f       	add	r18, r24
    4142:	39 1f       	adc	r19, r25
    4144:	80 91 0f 04 	lds	r24, 0x040F
    4148:	90 91 10 04 	lds	r25, 0x0410
    414c:	82 17       	cp	r24, r18
    414e:	93 07       	cpc	r25, r19
    4150:	99 f5       	brne	.+102    	; 0x41b8 <free+0x9c>
    4152:	f0 93 10 04 	sts	0x0410, r31
    4156:	e0 93 0f 04 	sts	0x040F, r30
    415a:	76 c0       	rjmp	.+236    	; 0x4248 <free+0x12c>
    415c:	db 01       	movw	r26, r22
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <free+0x4c>
    4164:	cd 01       	movw	r24, r26
    4166:	d9 01       	movw	r26, r18
    4168:	ae 17       	cp	r26, r30
    416a:	bf 07       	cpc	r27, r31
    416c:	48 f4       	brcc	.+18     	; 0x4180 <free+0x64>
    416e:	12 96       	adiw	r26, 0x02	; 2
    4170:	2d 91       	ld	r18, X+
    4172:	3c 91       	ld	r19, X
    4174:	13 97       	sbiw	r26, 0x03	; 3
    4176:	21 15       	cp	r18, r1
    4178:	31 05       	cpc	r19, r1
    417a:	a1 f7       	brne	.-24     	; 0x4164 <free+0x48>
    417c:	cd 01       	movw	r24, r26
    417e:	21 c0       	rjmp	.+66     	; 0x41c2 <free+0xa6>
    4180:	b3 83       	std	Z+3, r27	; 0x03
    4182:	a2 83       	std	Z+2, r26	; 0x02
    4184:	ef 01       	movw	r28, r30
    4186:	49 91       	ld	r20, Y+
    4188:	59 91       	ld	r21, Y+
    418a:	9e 01       	movw	r18, r28
    418c:	24 0f       	add	r18, r20
    418e:	35 1f       	adc	r19, r21
    4190:	a2 17       	cp	r26, r18
    4192:	b3 07       	cpc	r27, r19
    4194:	79 f4       	brne	.+30     	; 0x41b4 <free+0x98>
    4196:	2d 91       	ld	r18, X+
    4198:	3c 91       	ld	r19, X
    419a:	11 97       	sbiw	r26, 0x01	; 1
    419c:	24 0f       	add	r18, r20
    419e:	35 1f       	adc	r19, r21
    41a0:	2e 5f       	subi	r18, 0xFE	; 254
    41a2:	3f 4f       	sbci	r19, 0xFF	; 255
    41a4:	31 83       	std	Z+1, r19	; 0x01
    41a6:	20 83       	st	Z, r18
    41a8:	12 96       	adiw	r26, 0x02	; 2
    41aa:	2d 91       	ld	r18, X+
    41ac:	3c 91       	ld	r19, X
    41ae:	13 97       	sbiw	r26, 0x03	; 3
    41b0:	33 83       	std	Z+3, r19	; 0x03
    41b2:	22 83       	std	Z+2, r18	; 0x02
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	29 f4       	brne	.+10     	; 0x41c2 <free+0xa6>
    41b8:	f0 93 12 04 	sts	0x0412, r31
    41bc:	e0 93 11 04 	sts	0x0411, r30
    41c0:	43 c0       	rjmp	.+134    	; 0x4248 <free+0x12c>
    41c2:	dc 01       	movw	r26, r24
    41c4:	13 96       	adiw	r26, 0x03	; 3
    41c6:	fc 93       	st	X, r31
    41c8:	ee 93       	st	-X, r30
    41ca:	12 97       	sbiw	r26, 0x02	; 2
    41cc:	4d 91       	ld	r20, X+
    41ce:	5d 91       	ld	r21, X+
    41d0:	a4 0f       	add	r26, r20
    41d2:	b5 1f       	adc	r27, r21
    41d4:	ea 17       	cp	r30, r26
    41d6:	fb 07       	cpc	r31, r27
    41d8:	69 f4       	brne	.+26     	; 0x41f4 <free+0xd8>
    41da:	20 81       	ld	r18, Z
    41dc:	31 81       	ldd	r19, Z+1	; 0x01
    41de:	24 0f       	add	r18, r20
    41e0:	35 1f       	adc	r19, r21
    41e2:	2e 5f       	subi	r18, 0xFE	; 254
    41e4:	3f 4f       	sbci	r19, 0xFF	; 255
    41e6:	ec 01       	movw	r28, r24
    41e8:	39 83       	std	Y+1, r19	; 0x01
    41ea:	28 83       	st	Y, r18
    41ec:	22 81       	ldd	r18, Z+2	; 0x02
    41ee:	33 81       	ldd	r19, Z+3	; 0x03
    41f0:	3b 83       	std	Y+3, r19	; 0x03
    41f2:	2a 83       	std	Y+2, r18	; 0x02
    41f4:	e0 e0       	ldi	r30, 0x00	; 0
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	02 c0       	rjmp	.+4      	; 0x41fe <free+0xe2>
    41fa:	fb 01       	movw	r30, r22
    41fc:	bc 01       	movw	r22, r24
    41fe:	db 01       	movw	r26, r22
    4200:	12 96       	adiw	r26, 0x02	; 2
    4202:	8d 91       	ld	r24, X+
    4204:	9c 91       	ld	r25, X
    4206:	13 97       	sbiw	r26, 0x03	; 3
    4208:	00 97       	sbiw	r24, 0x00	; 0
    420a:	b9 f7       	brne	.-18     	; 0x41fa <free+0xde>
    420c:	9b 01       	movw	r18, r22
    420e:	2e 5f       	subi	r18, 0xFE	; 254
    4210:	3f 4f       	sbci	r19, 0xFF	; 255
    4212:	8d 91       	ld	r24, X+
    4214:	9c 91       	ld	r25, X
    4216:	11 97       	sbiw	r26, 0x01	; 1
    4218:	82 0f       	add	r24, r18
    421a:	93 1f       	adc	r25, r19
    421c:	40 91 0f 04 	lds	r20, 0x040F
    4220:	50 91 10 04 	lds	r21, 0x0410
    4224:	48 17       	cp	r20, r24
    4226:	59 07       	cpc	r21, r25
    4228:	79 f4       	brne	.+30     	; 0x4248 <free+0x12c>
    422a:	30 97       	sbiw	r30, 0x00	; 0
    422c:	29 f4       	brne	.+10     	; 0x4238 <free+0x11c>
    422e:	10 92 12 04 	sts	0x0412, r1
    4232:	10 92 11 04 	sts	0x0411, r1
    4236:	02 c0       	rjmp	.+4      	; 0x423c <free+0x120>
    4238:	13 82       	std	Z+3, r1	; 0x03
    423a:	12 82       	std	Z+2, r1	; 0x02
    423c:	22 50       	subi	r18, 0x02	; 2
    423e:	30 40       	sbci	r19, 0x00	; 0
    4240:	30 93 10 04 	sts	0x0410, r19
    4244:	20 93 0f 04 	sts	0x040F, r18
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	08 95       	ret
    424e:	f5 d0       	rcall	.+490    	; 0x443a <__fp_pscA>
    4250:	58 f0       	brcs	.+22     	; 0x4268 <free+0x14c>
    4252:	80 e8       	ldi	r24, 0x80	; 128
    4254:	91 e0       	ldi	r25, 0x01	; 1
    4256:	09 f4       	brne	.+2      	; 0x425a <free+0x13e>
    4258:	9e ef       	ldi	r25, 0xFE	; 254
    425a:	f6 d0       	rcall	.+492    	; 0x4448 <__fp_pscB>
    425c:	28 f0       	brcs	.+10     	; 0x4268 <free+0x14c>
    425e:	40 e8       	ldi	r20, 0x80	; 128
    4260:	51 e0       	ldi	r21, 0x01	; 1
    4262:	59 f4       	brne	.+22     	; 0x427a <atan2+0xe>
    4264:	5e ef       	ldi	r21, 0xFE	; 254
    4266:	09 c0       	rjmp	.+18     	; 0x427a <atan2+0xe>
    4268:	c0 c0       	rjmp	.+384    	; 0x43ea <__fp_nan>
    426a:	28 c1       	rjmp	.+592    	; 0x44bc <__fp_zero>

0000426c <atan2>:
    426c:	e9 2f       	mov	r30, r25
    426e:	e0 78       	andi	r30, 0x80	; 128
    4270:	03 d1       	rcall	.+518    	; 0x4478 <__fp_split3>
    4272:	68 f3       	brcs	.-38     	; 0x424e <free+0x132>
    4274:	09 2e       	mov	r0, r25
    4276:	05 2a       	or	r0, r21
    4278:	c1 f3       	breq	.-16     	; 0x426a <free+0x14e>
    427a:	26 17       	cp	r18, r22
    427c:	37 07       	cpc	r19, r23
    427e:	48 07       	cpc	r20, r24
    4280:	59 07       	cpc	r21, r25
    4282:	38 f0       	brcs	.+14     	; 0x4292 <atan2+0x26>
    4284:	0e 2e       	mov	r0, r30
    4286:	07 f8       	bld	r0, 7
    4288:	e0 25       	eor	r30, r0
    428a:	69 f0       	breq	.+26     	; 0x42a6 <atan2+0x3a>
    428c:	e0 25       	eor	r30, r0
    428e:	e0 64       	ori	r30, 0x40	; 64
    4290:	0a c0       	rjmp	.+20     	; 0x42a6 <atan2+0x3a>
    4292:	ef 63       	ori	r30, 0x3F	; 63
    4294:	07 f8       	bld	r0, 7
    4296:	00 94       	com	r0
    4298:	07 fa       	bst	r0, 7
    429a:	db 01       	movw	r26, r22
    429c:	b9 01       	movw	r22, r18
    429e:	9d 01       	movw	r18, r26
    42a0:	dc 01       	movw	r26, r24
    42a2:	ca 01       	movw	r24, r20
    42a4:	ad 01       	movw	r20, r26
    42a6:	ef 93       	push	r30
    42a8:	41 d0       	rcall	.+130    	; 0x432c <__divsf3_pse>
    42aa:	d5 d0       	rcall	.+426    	; 0x4456 <__fp_round>
    42ac:	0a d0       	rcall	.+20     	; 0x42c2 <atan>
    42ae:	5f 91       	pop	r21
    42b0:	55 23       	and	r21, r21
    42b2:	31 f0       	breq	.+12     	; 0x42c0 <atan2+0x54>
    42b4:	2b ed       	ldi	r18, 0xDB	; 219
    42b6:	3f e0       	ldi	r19, 0x0F	; 15
    42b8:	49 e4       	ldi	r20, 0x49	; 73
    42ba:	50 fd       	sbrc	r21, 0
    42bc:	49 ec       	ldi	r20, 0xC9	; 201
    42be:	60 ca       	rjmp	.-2880   	; 0x3780 <__addsf3>
    42c0:	08 95       	ret

000042c2 <atan>:
    42c2:	df 93       	push	r29
    42c4:	dd 27       	eor	r29, r29
    42c6:	b9 2f       	mov	r27, r25
    42c8:	bf 77       	andi	r27, 0x7F	; 127
    42ca:	40 e8       	ldi	r20, 0x80	; 128
    42cc:	5f e3       	ldi	r21, 0x3F	; 63
    42ce:	16 16       	cp	r1, r22
    42d0:	17 06       	cpc	r1, r23
    42d2:	48 07       	cpc	r20, r24
    42d4:	5b 07       	cpc	r21, r27
    42d6:	10 f4       	brcc	.+4      	; 0x42dc <atan+0x1a>
    42d8:	d9 2f       	mov	r29, r25
    42da:	f7 d0       	rcall	.+494    	; 0x44ca <inverse>
    42dc:	9f 93       	push	r25
    42de:	8f 93       	push	r24
    42e0:	7f 93       	push	r23
    42e2:	6f 93       	push	r22
    42e4:	5a d1       	rcall	.+692    	; 0x459a <square>
    42e6:	e4 ee       	ldi	r30, 0xE4	; 228
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	82 d0       	rcall	.+260    	; 0x43f0 <__fp_powser>
    42ec:	b4 d0       	rcall	.+360    	; 0x4456 <__fp_round>
    42ee:	2f 91       	pop	r18
    42f0:	3f 91       	pop	r19
    42f2:	4f 91       	pop	r20
    42f4:	5f 91       	pop	r21
    42f6:	fa d0       	rcall	.+500    	; 0x44ec <__mulsf3x>
    42f8:	dd 23       	and	r29, r29
    42fa:	49 f0       	breq	.+18     	; 0x430e <atan+0x4c>
    42fc:	90 58       	subi	r25, 0x80	; 128
    42fe:	a2 ea       	ldi	r26, 0xA2	; 162
    4300:	2a ed       	ldi	r18, 0xDA	; 218
    4302:	3f e0       	ldi	r19, 0x0F	; 15
    4304:	49 ec       	ldi	r20, 0xC9	; 201
    4306:	5f e3       	ldi	r21, 0x3F	; 63
    4308:	d0 78       	andi	r29, 0x80	; 128
    430a:	5d 27       	eor	r21, r29
    430c:	56 d1       	rcall	.+684    	; 0x45ba <__addsf3x>
    430e:	df 91       	pop	r29
    4310:	a2 c0       	rjmp	.+324    	; 0x4456 <__fp_round>
    4312:	9a d0       	rcall	.+308    	; 0x4448 <__fp_pscB>
    4314:	40 f0       	brcs	.+16     	; 0x4326 <atan+0x64>
    4316:	91 d0       	rcall	.+290    	; 0x443a <__fp_pscA>
    4318:	30 f0       	brcs	.+12     	; 0x4326 <atan+0x64>
    431a:	21 f4       	brne	.+8      	; 0x4324 <atan+0x62>
    431c:	5f 3f       	cpi	r21, 0xFF	; 255
    431e:	19 f0       	breq	.+6      	; 0x4326 <atan+0x64>
    4320:	5e c0       	rjmp	.+188    	; 0x43de <__fp_inf>
    4322:	51 11       	cpse	r21, r1
    4324:	cc c0       	rjmp	.+408    	; 0x44be <__fp_szero>
    4326:	61 c0       	rjmp	.+194    	; 0x43ea <__fp_nan>

00004328 <__divsf3x>:
    4328:	a7 d0       	rcall	.+334    	; 0x4478 <__fp_split3>
    432a:	98 f3       	brcs	.-26     	; 0x4312 <atan+0x50>

0000432c <__divsf3_pse>:
    432c:	99 23       	and	r25, r25
    432e:	c9 f3       	breq	.-14     	; 0x4322 <atan+0x60>
    4330:	55 23       	and	r21, r21
    4332:	b1 f3       	breq	.-20     	; 0x4320 <atan+0x5e>
    4334:	95 1b       	sub	r25, r21
    4336:	55 0b       	sbc	r21, r21
    4338:	bb 27       	eor	r27, r27
    433a:	aa 27       	eor	r26, r26
    433c:	62 17       	cp	r22, r18
    433e:	73 07       	cpc	r23, r19
    4340:	84 07       	cpc	r24, r20
    4342:	38 f0       	brcs	.+14     	; 0x4352 <__divsf3_pse+0x26>
    4344:	9f 5f       	subi	r25, 0xFF	; 255
    4346:	5f 4f       	sbci	r21, 0xFF	; 255
    4348:	22 0f       	add	r18, r18
    434a:	33 1f       	adc	r19, r19
    434c:	44 1f       	adc	r20, r20
    434e:	aa 1f       	adc	r26, r26
    4350:	a9 f3       	breq	.-22     	; 0x433c <__divsf3_pse+0x10>
    4352:	33 d0       	rcall	.+102    	; 0x43ba <__divsf3_pse+0x8e>
    4354:	0e 2e       	mov	r0, r30
    4356:	3a f0       	brmi	.+14     	; 0x4366 <__divsf3_pse+0x3a>
    4358:	e0 e8       	ldi	r30, 0x80	; 128
    435a:	30 d0       	rcall	.+96     	; 0x43bc <__divsf3_pse+0x90>
    435c:	91 50       	subi	r25, 0x01	; 1
    435e:	50 40       	sbci	r21, 0x00	; 0
    4360:	e6 95       	lsr	r30
    4362:	00 1c       	adc	r0, r0
    4364:	ca f7       	brpl	.-14     	; 0x4358 <__divsf3_pse+0x2c>
    4366:	29 d0       	rcall	.+82     	; 0x43ba <__divsf3_pse+0x8e>
    4368:	fe 2f       	mov	r31, r30
    436a:	27 d0       	rcall	.+78     	; 0x43ba <__divsf3_pse+0x8e>
    436c:	66 0f       	add	r22, r22
    436e:	77 1f       	adc	r23, r23
    4370:	88 1f       	adc	r24, r24
    4372:	bb 1f       	adc	r27, r27
    4374:	26 17       	cp	r18, r22
    4376:	37 07       	cpc	r19, r23
    4378:	48 07       	cpc	r20, r24
    437a:	ab 07       	cpc	r26, r27
    437c:	b0 e8       	ldi	r27, 0x80	; 128
    437e:	09 f0       	breq	.+2      	; 0x4382 <__divsf3_pse+0x56>
    4380:	bb 0b       	sbc	r27, r27
    4382:	80 2d       	mov	r24, r0
    4384:	bf 01       	movw	r22, r30
    4386:	ff 27       	eor	r31, r31
    4388:	93 58       	subi	r25, 0x83	; 131
    438a:	5f 4f       	sbci	r21, 0xFF	; 255
    438c:	2a f0       	brmi	.+10     	; 0x4398 <__divsf3_pse+0x6c>
    438e:	9e 3f       	cpi	r25, 0xFE	; 254
    4390:	51 05       	cpc	r21, r1
    4392:	68 f0       	brcs	.+26     	; 0x43ae <__divsf3_pse+0x82>
    4394:	24 c0       	rjmp	.+72     	; 0x43de <__fp_inf>
    4396:	93 c0       	rjmp	.+294    	; 0x44be <__fp_szero>
    4398:	5f 3f       	cpi	r21, 0xFF	; 255
    439a:	ec f3       	brlt	.-6      	; 0x4396 <__divsf3_pse+0x6a>
    439c:	98 3e       	cpi	r25, 0xE8	; 232
    439e:	dc f3       	brlt	.-10     	; 0x4396 <__divsf3_pse+0x6a>
    43a0:	86 95       	lsr	r24
    43a2:	77 95       	ror	r23
    43a4:	67 95       	ror	r22
    43a6:	b7 95       	ror	r27
    43a8:	f7 95       	ror	r31
    43aa:	9f 5f       	subi	r25, 0xFF	; 255
    43ac:	c9 f7       	brne	.-14     	; 0x43a0 <__divsf3_pse+0x74>
    43ae:	88 0f       	add	r24, r24
    43b0:	91 1d       	adc	r25, r1
    43b2:	96 95       	lsr	r25
    43b4:	87 95       	ror	r24
    43b6:	97 f9       	bld	r25, 7
    43b8:	08 95       	ret
    43ba:	e1 e0       	ldi	r30, 0x01	; 1
    43bc:	66 0f       	add	r22, r22
    43be:	77 1f       	adc	r23, r23
    43c0:	88 1f       	adc	r24, r24
    43c2:	bb 1f       	adc	r27, r27
    43c4:	62 17       	cp	r22, r18
    43c6:	73 07       	cpc	r23, r19
    43c8:	84 07       	cpc	r24, r20
    43ca:	ba 07       	cpc	r27, r26
    43cc:	20 f0       	brcs	.+8      	; 0x43d6 <__divsf3_pse+0xaa>
    43ce:	62 1b       	sub	r22, r18
    43d0:	73 0b       	sbc	r23, r19
    43d2:	84 0b       	sbc	r24, r20
    43d4:	ba 0b       	sbc	r27, r26
    43d6:	ee 1f       	adc	r30, r30
    43d8:	88 f7       	brcc	.-30     	; 0x43bc <__divsf3_pse+0x90>
    43da:	e0 95       	com	r30
    43dc:	08 95       	ret

000043de <__fp_inf>:
    43de:	97 f9       	bld	r25, 7
    43e0:	9f 67       	ori	r25, 0x7F	; 127
    43e2:	80 e8       	ldi	r24, 0x80	; 128
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	08 95       	ret

000043ea <__fp_nan>:
    43ea:	9f ef       	ldi	r25, 0xFF	; 255
    43ec:	80 ec       	ldi	r24, 0xC0	; 192
    43ee:	08 95       	ret

000043f0 <__fp_powser>:
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	1f 93       	push	r17
    43f6:	0f 93       	push	r16
    43f8:	ff 92       	push	r15
    43fa:	ef 92       	push	r14
    43fc:	df 92       	push	r13
    43fe:	7b 01       	movw	r14, r22
    4400:	8c 01       	movw	r16, r24
    4402:	68 94       	set
    4404:	05 c0       	rjmp	.+10     	; 0x4410 <__fp_powser+0x20>
    4406:	da 2e       	mov	r13, r26
    4408:	ef 01       	movw	r28, r30
    440a:	70 d0       	rcall	.+224    	; 0x44ec <__mulsf3x>
    440c:	fe 01       	movw	r30, r28
    440e:	e8 94       	clt
    4410:	a5 91       	lpm	r26, Z+
    4412:	25 91       	lpm	r18, Z+
    4414:	35 91       	lpm	r19, Z+
    4416:	45 91       	lpm	r20, Z+
    4418:	55 91       	lpm	r21, Z+
    441a:	ae f3       	brts	.-22     	; 0x4406 <__fp_powser+0x16>
    441c:	ef 01       	movw	r28, r30
    441e:	cd d0       	rcall	.+410    	; 0x45ba <__addsf3x>
    4420:	fe 01       	movw	r30, r28
    4422:	97 01       	movw	r18, r14
    4424:	a8 01       	movw	r20, r16
    4426:	da 94       	dec	r13
    4428:	79 f7       	brne	.-34     	; 0x4408 <__fp_powser+0x18>
    442a:	df 90       	pop	r13
    442c:	ef 90       	pop	r14
    442e:	ff 90       	pop	r15
    4430:	0f 91       	pop	r16
    4432:	1f 91       	pop	r17
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <__fp_pscA>:
    443a:	00 24       	eor	r0, r0
    443c:	0a 94       	dec	r0
    443e:	16 16       	cp	r1, r22
    4440:	17 06       	cpc	r1, r23
    4442:	18 06       	cpc	r1, r24
    4444:	09 06       	cpc	r0, r25
    4446:	08 95       	ret

00004448 <__fp_pscB>:
    4448:	00 24       	eor	r0, r0
    444a:	0a 94       	dec	r0
    444c:	12 16       	cp	r1, r18
    444e:	13 06       	cpc	r1, r19
    4450:	14 06       	cpc	r1, r20
    4452:	05 06       	cpc	r0, r21
    4454:	08 95       	ret

00004456 <__fp_round>:
    4456:	09 2e       	mov	r0, r25
    4458:	03 94       	inc	r0
    445a:	00 0c       	add	r0, r0
    445c:	11 f4       	brne	.+4      	; 0x4462 <__fp_round+0xc>
    445e:	88 23       	and	r24, r24
    4460:	52 f0       	brmi	.+20     	; 0x4476 <__fp_round+0x20>
    4462:	bb 0f       	add	r27, r27
    4464:	40 f4       	brcc	.+16     	; 0x4476 <__fp_round+0x20>
    4466:	bf 2b       	or	r27, r31
    4468:	11 f4       	brne	.+4      	; 0x446e <__fp_round+0x18>
    446a:	60 ff       	sbrs	r22, 0
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <__fp_round+0x20>
    446e:	6f 5f       	subi	r22, 0xFF	; 255
    4470:	7f 4f       	sbci	r23, 0xFF	; 255
    4472:	8f 4f       	sbci	r24, 0xFF	; 255
    4474:	9f 4f       	sbci	r25, 0xFF	; 255
    4476:	08 95       	ret

00004478 <__fp_split3>:
    4478:	57 fd       	sbrc	r21, 7
    447a:	90 58       	subi	r25, 0x80	; 128
    447c:	44 0f       	add	r20, r20
    447e:	55 1f       	adc	r21, r21
    4480:	59 f0       	breq	.+22     	; 0x4498 <__fp_splitA+0x10>
    4482:	5f 3f       	cpi	r21, 0xFF	; 255
    4484:	71 f0       	breq	.+28     	; 0x44a2 <__fp_splitA+0x1a>
    4486:	47 95       	ror	r20

00004488 <__fp_splitA>:
    4488:	88 0f       	add	r24, r24
    448a:	97 fb       	bst	r25, 7
    448c:	99 1f       	adc	r25, r25
    448e:	61 f0       	breq	.+24     	; 0x44a8 <__fp_splitA+0x20>
    4490:	9f 3f       	cpi	r25, 0xFF	; 255
    4492:	79 f0       	breq	.+30     	; 0x44b2 <__fp_splitA+0x2a>
    4494:	87 95       	ror	r24
    4496:	08 95       	ret
    4498:	12 16       	cp	r1, r18
    449a:	13 06       	cpc	r1, r19
    449c:	14 06       	cpc	r1, r20
    449e:	55 1f       	adc	r21, r21
    44a0:	f2 cf       	rjmp	.-28     	; 0x4486 <__fp_split3+0xe>
    44a2:	46 95       	lsr	r20
    44a4:	f1 df       	rcall	.-30     	; 0x4488 <__fp_splitA>
    44a6:	08 c0       	rjmp	.+16     	; 0x44b8 <__fp_splitA+0x30>
    44a8:	16 16       	cp	r1, r22
    44aa:	17 06       	cpc	r1, r23
    44ac:	18 06       	cpc	r1, r24
    44ae:	99 1f       	adc	r25, r25
    44b0:	f1 cf       	rjmp	.-30     	; 0x4494 <__fp_splitA+0xc>
    44b2:	86 95       	lsr	r24
    44b4:	71 05       	cpc	r23, r1
    44b6:	61 05       	cpc	r22, r1
    44b8:	08 94       	sec
    44ba:	08 95       	ret

000044bc <__fp_zero>:
    44bc:	e8 94       	clt

000044be <__fp_szero>:
    44be:	bb 27       	eor	r27, r27
    44c0:	66 27       	eor	r22, r22
    44c2:	77 27       	eor	r23, r23
    44c4:	cb 01       	movw	r24, r22
    44c6:	97 f9       	bld	r25, 7
    44c8:	08 95       	ret

000044ca <inverse>:
    44ca:	9b 01       	movw	r18, r22
    44cc:	ac 01       	movw	r20, r24
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	80 e8       	ldi	r24, 0x80	; 128
    44d4:	9f e3       	ldi	r25, 0x3F	; 63
    44d6:	c4 c0       	rjmp	.+392    	; 0x4660 <__divsf3>
    44d8:	b0 df       	rcall	.-160    	; 0x443a <__fp_pscA>
    44da:	28 f0       	brcs	.+10     	; 0x44e6 <inverse+0x1c>
    44dc:	b5 df       	rcall	.-150    	; 0x4448 <__fp_pscB>
    44de:	18 f0       	brcs	.+6      	; 0x44e6 <inverse+0x1c>
    44e0:	95 23       	and	r25, r21
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <inverse+0x1c>
    44e4:	7c cf       	rjmp	.-264    	; 0x43de <__fp_inf>
    44e6:	81 cf       	rjmp	.-254    	; 0x43ea <__fp_nan>
    44e8:	11 24       	eor	r1, r1
    44ea:	e9 cf       	rjmp	.-46     	; 0x44be <__fp_szero>

000044ec <__mulsf3x>:
    44ec:	c5 df       	rcall	.-118    	; 0x4478 <__fp_split3>
    44ee:	a0 f3       	brcs	.-24     	; 0x44d8 <inverse+0xe>

000044f0 <__mulsf3_pse>:
    44f0:	95 9f       	mul	r25, r21
    44f2:	d1 f3       	breq	.-12     	; 0x44e8 <inverse+0x1e>
    44f4:	95 0f       	add	r25, r21
    44f6:	50 e0       	ldi	r21, 0x00	; 0
    44f8:	55 1f       	adc	r21, r21
    44fa:	62 9f       	mul	r22, r18
    44fc:	f0 01       	movw	r30, r0
    44fe:	72 9f       	mul	r23, r18
    4500:	bb 27       	eor	r27, r27
    4502:	f0 0d       	add	r31, r0
    4504:	b1 1d       	adc	r27, r1
    4506:	63 9f       	mul	r22, r19
    4508:	aa 27       	eor	r26, r26
    450a:	f0 0d       	add	r31, r0
    450c:	b1 1d       	adc	r27, r1
    450e:	aa 1f       	adc	r26, r26
    4510:	64 9f       	mul	r22, r20
    4512:	66 27       	eor	r22, r22
    4514:	b0 0d       	add	r27, r0
    4516:	a1 1d       	adc	r26, r1
    4518:	66 1f       	adc	r22, r22
    451a:	82 9f       	mul	r24, r18
    451c:	22 27       	eor	r18, r18
    451e:	b0 0d       	add	r27, r0
    4520:	a1 1d       	adc	r26, r1
    4522:	62 1f       	adc	r22, r18
    4524:	73 9f       	mul	r23, r19
    4526:	b0 0d       	add	r27, r0
    4528:	a1 1d       	adc	r26, r1
    452a:	62 1f       	adc	r22, r18
    452c:	83 9f       	mul	r24, r19
    452e:	a0 0d       	add	r26, r0
    4530:	61 1d       	adc	r22, r1
    4532:	22 1f       	adc	r18, r18
    4534:	74 9f       	mul	r23, r20
    4536:	33 27       	eor	r19, r19
    4538:	a0 0d       	add	r26, r0
    453a:	61 1d       	adc	r22, r1
    453c:	23 1f       	adc	r18, r19
    453e:	84 9f       	mul	r24, r20
    4540:	60 0d       	add	r22, r0
    4542:	21 1d       	adc	r18, r1
    4544:	82 2f       	mov	r24, r18
    4546:	76 2f       	mov	r23, r22
    4548:	6a 2f       	mov	r22, r26
    454a:	11 24       	eor	r1, r1
    454c:	9f 57       	subi	r25, 0x7F	; 127
    454e:	50 40       	sbci	r21, 0x00	; 0
    4550:	8a f0       	brmi	.+34     	; 0x4574 <__mulsf3_pse+0x84>
    4552:	e1 f0       	breq	.+56     	; 0x458c <__mulsf3_pse+0x9c>
    4554:	88 23       	and	r24, r24
    4556:	4a f0       	brmi	.+18     	; 0x456a <__mulsf3_pse+0x7a>
    4558:	ee 0f       	add	r30, r30
    455a:	ff 1f       	adc	r31, r31
    455c:	bb 1f       	adc	r27, r27
    455e:	66 1f       	adc	r22, r22
    4560:	77 1f       	adc	r23, r23
    4562:	88 1f       	adc	r24, r24
    4564:	91 50       	subi	r25, 0x01	; 1
    4566:	50 40       	sbci	r21, 0x00	; 0
    4568:	a9 f7       	brne	.-22     	; 0x4554 <__mulsf3_pse+0x64>
    456a:	9e 3f       	cpi	r25, 0xFE	; 254
    456c:	51 05       	cpc	r21, r1
    456e:	70 f0       	brcs	.+28     	; 0x458c <__mulsf3_pse+0x9c>
    4570:	36 cf       	rjmp	.-404    	; 0x43de <__fp_inf>
    4572:	a5 cf       	rjmp	.-182    	; 0x44be <__fp_szero>
    4574:	5f 3f       	cpi	r21, 0xFF	; 255
    4576:	ec f3       	brlt	.-6      	; 0x4572 <__mulsf3_pse+0x82>
    4578:	98 3e       	cpi	r25, 0xE8	; 232
    457a:	dc f3       	brlt	.-10     	; 0x4572 <__mulsf3_pse+0x82>
    457c:	86 95       	lsr	r24
    457e:	77 95       	ror	r23
    4580:	67 95       	ror	r22
    4582:	b7 95       	ror	r27
    4584:	f7 95       	ror	r31
    4586:	e7 95       	ror	r30
    4588:	9f 5f       	subi	r25, 0xFF	; 255
    458a:	c1 f7       	brne	.-16     	; 0x457c <__mulsf3_pse+0x8c>
    458c:	fe 2b       	or	r31, r30
    458e:	88 0f       	add	r24, r24
    4590:	91 1d       	adc	r25, r1
    4592:	96 95       	lsr	r25
    4594:	87 95       	ror	r24
    4596:	97 f9       	bld	r25, 7
    4598:	08 95       	ret

0000459a <square>:
    459a:	9b 01       	movw	r18, r22
    459c:	ac 01       	movw	r20, r24
    459e:	1d c9       	rjmp	.-3526   	; 0x37da <__mulsf3>
    45a0:	4c df       	rcall	.-360    	; 0x443a <__fp_pscA>
    45a2:	30 f0       	brcs	.+12     	; 0x45b0 <square+0x16>
    45a4:	51 df       	rcall	.-350    	; 0x4448 <__fp_pscB>
    45a6:	20 f0       	brcs	.+8      	; 0x45b0 <square+0x16>
    45a8:	31 f4       	brne	.+12     	; 0x45b6 <square+0x1c>
    45aa:	9f 3f       	cpi	r25, 0xFF	; 255
    45ac:	11 f4       	brne	.+4      	; 0x45b2 <square+0x18>
    45ae:	1e f4       	brtc	.+6      	; 0x45b6 <square+0x1c>
    45b0:	1c cf       	rjmp	.-456    	; 0x43ea <__fp_nan>
    45b2:	0e f4       	brtc	.+2      	; 0x45b6 <square+0x1c>
    45b4:	e0 95       	com	r30
    45b6:	e7 fb       	bst	r30, 7
    45b8:	12 cf       	rjmp	.-476    	; 0x43de <__fp_inf>

000045ba <__addsf3x>:
    45ba:	e9 2f       	mov	r30, r25
    45bc:	5d df       	rcall	.-326    	; 0x4478 <__fp_split3>
    45be:	80 f3       	brcs	.-32     	; 0x45a0 <square+0x6>
    45c0:	ba 17       	cp	r27, r26
    45c2:	62 07       	cpc	r22, r18
    45c4:	73 07       	cpc	r23, r19
    45c6:	84 07       	cpc	r24, r20
    45c8:	95 07       	cpc	r25, r21
    45ca:	18 f0       	brcs	.+6      	; 0x45d2 <__addsf3x+0x18>
    45cc:	71 f4       	brne	.+28     	; 0x45ea <__addsf3x+0x30>
    45ce:	9e f5       	brtc	.+102    	; 0x4636 <__addsf3x+0x7c>
    45d0:	75 cf       	rjmp	.-278    	; 0x44bc <__fp_zero>
    45d2:	0e f4       	brtc	.+2      	; 0x45d6 <__addsf3x+0x1c>
    45d4:	e0 95       	com	r30
    45d6:	0b 2e       	mov	r0, r27
    45d8:	ba 2f       	mov	r27, r26
    45da:	a0 2d       	mov	r26, r0
    45dc:	0b 01       	movw	r0, r22
    45de:	b9 01       	movw	r22, r18
    45e0:	90 01       	movw	r18, r0
    45e2:	0c 01       	movw	r0, r24
    45e4:	ca 01       	movw	r24, r20
    45e6:	a0 01       	movw	r20, r0
    45e8:	11 24       	eor	r1, r1
    45ea:	ff 27       	eor	r31, r31
    45ec:	59 1b       	sub	r21, r25
    45ee:	99 f0       	breq	.+38     	; 0x4616 <__addsf3x+0x5c>
    45f0:	59 3f       	cpi	r21, 0xF9	; 249
    45f2:	50 f4       	brcc	.+20     	; 0x4608 <__addsf3x+0x4e>
    45f4:	50 3e       	cpi	r21, 0xE0	; 224
    45f6:	68 f1       	brcs	.+90     	; 0x4652 <__addsf3x+0x98>
    45f8:	1a 16       	cp	r1, r26
    45fa:	f0 40       	sbci	r31, 0x00	; 0
    45fc:	a2 2f       	mov	r26, r18
    45fe:	23 2f       	mov	r18, r19
    4600:	34 2f       	mov	r19, r20
    4602:	44 27       	eor	r20, r20
    4604:	58 5f       	subi	r21, 0xF8	; 248
    4606:	f3 cf       	rjmp	.-26     	; 0x45ee <__addsf3x+0x34>
    4608:	46 95       	lsr	r20
    460a:	37 95       	ror	r19
    460c:	27 95       	ror	r18
    460e:	a7 95       	ror	r26
    4610:	f0 40       	sbci	r31, 0x00	; 0
    4612:	53 95       	inc	r21
    4614:	c9 f7       	brne	.-14     	; 0x4608 <__addsf3x+0x4e>
    4616:	7e f4       	brtc	.+30     	; 0x4636 <__addsf3x+0x7c>
    4618:	1f 16       	cp	r1, r31
    461a:	ba 0b       	sbc	r27, r26
    461c:	62 0b       	sbc	r22, r18
    461e:	73 0b       	sbc	r23, r19
    4620:	84 0b       	sbc	r24, r20
    4622:	ba f0       	brmi	.+46     	; 0x4652 <__addsf3x+0x98>
    4624:	91 50       	subi	r25, 0x01	; 1
    4626:	a1 f0       	breq	.+40     	; 0x4650 <__addsf3x+0x96>
    4628:	ff 0f       	add	r31, r31
    462a:	bb 1f       	adc	r27, r27
    462c:	66 1f       	adc	r22, r22
    462e:	77 1f       	adc	r23, r23
    4630:	88 1f       	adc	r24, r24
    4632:	c2 f7       	brpl	.-16     	; 0x4624 <__addsf3x+0x6a>
    4634:	0e c0       	rjmp	.+28     	; 0x4652 <__addsf3x+0x98>
    4636:	ba 0f       	add	r27, r26
    4638:	62 1f       	adc	r22, r18
    463a:	73 1f       	adc	r23, r19
    463c:	84 1f       	adc	r24, r20
    463e:	48 f4       	brcc	.+18     	; 0x4652 <__addsf3x+0x98>
    4640:	87 95       	ror	r24
    4642:	77 95       	ror	r23
    4644:	67 95       	ror	r22
    4646:	b7 95       	ror	r27
    4648:	f7 95       	ror	r31
    464a:	9e 3f       	cpi	r25, 0xFE	; 254
    464c:	08 f0       	brcs	.+2      	; 0x4650 <__addsf3x+0x96>
    464e:	b3 cf       	rjmp	.-154    	; 0x45b6 <square+0x1c>
    4650:	93 95       	inc	r25
    4652:	88 0f       	add	r24, r24
    4654:	08 f0       	brcs	.+2      	; 0x4658 <__addsf3x+0x9e>
    4656:	99 27       	eor	r25, r25
    4658:	ee 0f       	add	r30, r30
    465a:	97 95       	ror	r25
    465c:	87 95       	ror	r24
    465e:	08 95       	ret

00004660 <__divsf3>:
    4660:	63 de       	rcall	.-826    	; 0x4328 <__divsf3x>
    4662:	f9 ce       	rjmp	.-526    	; 0x4456 <__fp_round>

00004664 <_exit>:
    4664:	ff cf       	rjmp	.-2      	; 0x4664 <_exit>
