
ElisaII-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  0000480a  0000489e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000480a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  00800324  00800324  000049c2  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  000049c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  0000732d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000dfc  00000000  00000000  00007555  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e11  00000000  00000000  00008351  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000c162  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042e5  00000000  00000000  0000d79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000640  00000000  00000000  00011a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e0e  00000000  00000000  000120c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ac8  00000000  00000000  00012ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000177  00000000  00000000  0001499a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  00014b11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__vector_10>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__vector_13>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__vector_25>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_29>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      80:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_32>
      84:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_33>
      88:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      8c:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_35>
      90:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      94:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      98:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      9c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a8:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_42>
      ac:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_43>
      b0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      b4:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_45>
      b8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      bc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      cc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      dc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ea e0       	ldi	r30, 0x0A	; 10
     12a:	f8 e4       	ldi	r31, 0x48	; 72
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a4 32       	cpi	r26, 0x24	; 36
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	14 e0       	ldi	r17, 0x04	; 4
     13a:	a4 e2       	ldi	r26, 0x24	; 36
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a7 31       	cpi	r26, 0x17	; 23
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <main>
     14c:	0c 94 04 24 	jmp	0x4808	; 0x4808 <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	86 60       	ori	r24, 0x06	; 6
     15c:	80 83       	st	Z, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     15e:	ac e7       	ldi	r26, 0x7C	; 124
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	8c 91       	ld	r24, X
     164:	80 64       	ori	r24, 0x40	; 64
     166:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     168:	80 81       	ld	r24, Z
     16a:	80 62       	ori	r24, 0x20	; 32
     16c:	80 83       	st	Z, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     16e:	ab e7       	ldi	r26, 0x7B	; 123
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	8c 91       	ld	r24, X
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     178:	80 81       	ld	r24, Z
     17a:	88 60       	ori	r24, 0x08	; 8
     17c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     184:	80 81       	ld	r24, Z
     186:	80 64       	ori	r24, 0x40	; 64
     188:	80 83       	st	Z, r24

}
     18a:	08 95       	ret

0000018c <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	0b b6       	in	r0, 0x3b	; 59
     196:	0f 92       	push	r0
     198:	11 24       	eor	r1, r1
     19a:	2f 93       	push	r18
     19c:	3f 93       	push	r19
     19e:	4f 93       	push	r20
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
	// ADIF is cleared by hardware when executing the corresponding interrupt handling vector
		
//	PORTB &= ~(1 << 7);

	delayCounter++;
     1a8:	80 91 e3 03 	lds	r24, 0x03E3
     1ac:	90 91 e4 03 	lds	r25, 0x03E4
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	90 93 e4 03 	sts	0x03E4, r25
     1b6:	80 93 e3 03 	sts	0x03E3, r24

	int value = ADCL;			// must be read first!!
     1ba:	20 91 78 00 	lds	r18, 0x0078
     1be:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     1c0:	40 91 79 00 	lds	r20, 0x0079
     1c4:	94 2f       	mov	r25, r20
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	28 2b       	or	r18, r24
     1ca:	39 2b       	or	r19, r25

	// save the last data

	switch(adcSaveDataTo) {
     1cc:	80 91 63 03 	lds	r24, 0x0363
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <__vector_29+0x4a>
     1d4:	0d c1       	rjmp	.+538    	; 0x3f0 <__vector_29+0x264>
     1d6:	83 30       	cpi	r24, 0x03	; 3
     1d8:	08 f4       	brcc	.+2      	; 0x1dc <__vector_29+0x50>
     1da:	46 c0       	rjmp	.+140    	; 0x268 <__vector_29+0xdc>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	09 f4       	brne	.+2      	; 0x1e2 <__vector_29+0x56>
     1e0:	fa c0       	rjmp	.+500    	; 0x3d6 <__vector_29+0x24a>
     1e2:	84 30       	cpi	r24, 0x04	; 4
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <__vector_29+0x5c>
     1e6:	d0 c0       	rjmp	.+416    	; 0x388 <__vector_29+0x1fc>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     1e8:	80 91 64 03 	lds	r24, 0x0364
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <__vector_29+0x66>
     1f0:	b7 c0       	rjmp	.+366    	; 0x360 <__vector_29+0x1d4>
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	08 f0       	brcs	.+2      	; 0x1f8 <__vector_29+0x6c>
     1f6:	51 c0       	rjmp	.+162    	; 0x29a <__vector_29+0x10e>
     1f8:	88 23       	and	r24, r24
     1fa:	09 f0       	breq	.+2      	; 0x1fe <__vector_29+0x72>
     1fc:	8c c0       	rjmp	.+280    	; 0x316 <__vector_29+0x18a>

		case 0:
			currentAdChannel = currentProx>>1;
     1fe:	80 91 2e 03 	lds	r24, 0x032E
     202:	86 95       	lsr	r24
     204:	80 93 2d 03 	sts	0x032D, r24
				} else {
					PORTJ = (1 << ((currentProx-16)>>1));
				}
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
     208:	80 91 65 03 	lds	r24, 0x0365
     20c:	88 23       	and	r24, r24
     20e:	09 f0       	breq	.+2      	; 0x212 <__vector_29+0x86>
     210:	19 c1       	rjmp	.+562    	; 0x444 <__vector_29+0x2b8>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 63 03 	sts	0x0363, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 64 03 	sts	0x0364, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     21e:	90 91 2d 03 	lds	r25, 0x032D
     222:	98 30       	cpi	r25, 0x08	; 8
     224:	08 f0       	brcs	.+2      	; 0x228 <__vector_29+0x9c>
     226:	6c c0       	rjmp	.+216    	; 0x300 <__vector_29+0x174>
		ADCSRB &= ~(1 << MUX5);
     228:	90 91 7b 00 	lds	r25, 0x007B
     22c:	97 7f       	andi	r25, 0xF7	; 247
     22e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
     232:	90 91 2d 03 	lds	r25, 0x032D
     236:	90 5c       	subi	r25, 0xC0	; 192
     238:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}


	if(adcSamplingState == 2) {
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	31 f4       	brne	.+12     	; 0x24c <__vector_29+0xc0>
		PORTA = 0x00;	// always turn off the pulses
     240:	12 b8       	out	0x02, r1	; 2
		PORTJ &= 0xF0;
     242:	80 91 05 01 	lds	r24, 0x0105
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 93 05 01 	sts	0x0105, r24
	}

//	PORTB |= (1 << 7);

}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	4f 91       	pop	r20
     256:	3f 91       	pop	r19
     258:	2f 91       	pop	r18
     25a:	0f 90       	pop	r0
     25c:	0b be       	out	0x3b, r0	; 59
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     268:	88 23       	and	r24, r24
     26a:	09 f0       	breq	.+2      	; 0x26e <__vector_29+0xe2>
     26c:	65 c0       	rjmp	.+202    	; 0x338 <__vector_29+0x1ac>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     26e:	80 91 2e 03 	lds	r24, 0x032E
     272:	8e 30       	cpi	r24, 0x0E	; 14
     274:	09 f4       	brne	.+2      	; 0x278 <__vector_29+0xec>
     276:	f4 c0       	rjmp	.+488    	; 0x460 <__vector_29+0x2d4>
				batteryLevel = value;
				measBattery = 0;
				PORTC &= ~(1 << 6);
			} else {
				proximityValue[currentProx] = value;
     278:	e8 2f       	mov	r30, r24
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	ed 5c       	subi	r30, 0xCD	; 205
     282:	fc 4f       	sbci	r31, 0xFC	; 252
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
				//currentProx = (currentProx+1)%24;
			}
			currentProx++;
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 2e 03 	sts	0x032E, r24
			if(currentProx > 23) {
     28e:	88 31       	cpi	r24, 0x18	; 24
     290:	08 f4       	brcc	.+2      	; 0x294 <__vector_29+0x108>
     292:	aa cf       	rjmp	.-172    	; 0x1e8 <__vector_29+0x5c>
				currentProx = 0;
     294:	10 92 2e 03 	sts	0x032E, r1
     298:	a7 cf       	rjmp	.-178    	; 0x1e8 <__vector_29+0x5c>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     29a:	83 30       	cpi	r24, 0x03	; 3
     29c:	09 f4       	brne	.+2      	; 0x2a0 <__vector_29+0x114>
     29e:	88 c0       	rjmp	.+272    	; 0x3b0 <__vector_29+0x224>
     2a0:	84 30       	cpi	r24, 0x04	; 4
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <__vector_29+0x11a>
     2a4:	bc cf       	rjmp	.-136    	; 0x21e <__vector_29+0x92>
			}
			adcSamplingState = 4;
			break;

		case 4:
			currentAdChannel = currentMotRightChannel;	
     2a6:	90 91 30 03 	lds	r25, 0x0330
     2aa:	90 93 2d 03 	sts	0x032D, r25
			rightChannelPhase = rightMotorPhase;	
     2ae:	90 91 31 03 	lds	r25, 0x0331
     2b2:	90 93 65 03 	sts	0x0365, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     2b6:	90 91 66 03 	lds	r25, 0x0366
     2ba:	99 23       	and	r25, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <__vector_29+0x134>
     2be:	bf c0       	rjmp	.+382    	; 0x43e <__vector_29+0x2b2>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	80 93 63 03 	sts	0x0363, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     2c6:	10 92 64 03 	sts	0x0364, r1
			
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
     2ca:	20 91 2e 03 	lds	r18, 0x032E
     2ce:	2e 30       	cpi	r18, 0x0E	; 14
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <__vector_29+0x148>
     2d2:	c0 c0       	rjmp	.+384    	; 0x454 <__vector_29+0x2c8>
					measBattery=2;
					PORTC |= (1 << 6);	// sense enable on
				}

				if(currentProx & 0x01) {
     2d4:	82 2f       	mov	r24, r18
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	20 ff       	sbrs	r18, 0
     2da:	aa c0       	rjmp	.+340    	; 0x430 <__vector_29+0x2a4>
					if(currentProx < 16) {
     2dc:	20 31       	cpi	r18, 0x10	; 16
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__vector_29+0x156>
     2e0:	9b c0       	rjmp	.+310    	; 0x418 <__vector_29+0x28c>
						if(currentProx==14 && measBattery==1) {
     2e2:	2e 30       	cpi	r18, 0x0E	; 14
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_29+0x15c>
     2e6:	ce c0       	rjmp	.+412    	; 0x484 <__vector_29+0x2f8>
							measBattery=2;
							PORTC |= (1 << 6);	// sense enable on
						} else {
							//PORTA = 0x00;	// already done at the ISR beginning...
							PORTA = (1 << (currentProx>>1));
     2e8:	26 95       	lsr	r18
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_29+0x168>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <__vector_29+0x164>
     2f8:	82 b9       	out	0x02, r24	; 2
     2fa:	80 91 64 03 	lds	r24, 0x0364
     2fe:	8f cf       	rjmp	.-226    	; 0x21e <__vector_29+0x92>
	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     300:	90 91 7b 00 	lds	r25, 0x007B
     304:	98 60       	ori	r25, 0x08	; 8
     306:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
     30a:	90 91 2d 03 	lds	r25, 0x032D
     30e:	98 5c       	subi	r25, 0xC8	; 200
     310:	90 93 7c 00 	sts	0x007C, r25
     314:	93 cf       	rjmp	.-218    	; 0x23c <__vector_29+0xb0>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__vector_29+0x190>
     31a:	81 cf       	rjmp	.-254    	; 0x21e <__vector_29+0x92>
			}
			adcSamplingState = 1;
			break;

		case 1:
			currentAdChannel = currentMotLeftChannel;
     31c:	80 91 2f 03 	lds	r24, 0x032F
     320:	80 93 2d 03 	sts	0x032D, r24
			leftChannelPhase = leftMotorPhase;
     324:	80 91 32 03 	lds	r24, 0x0332
     328:	80 93 66 03 	sts	0x0366, r24
			adcSaveDataTo = SAVE_TO_PROX;
     32c:	10 92 63 03 	sts	0x0363, r1
			adcSamplingState = 2;
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	80 93 64 03 	sts	0x0364, r24
			break;
     336:	73 cf       	rjmp	.-282    	; 0x21e <__vector_29+0x92>
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	09 f0       	breq	.+2      	; 0x33e <__vector_29+0x1b2>
     33c:	55 cf       	rjmp	.-342    	; 0x1e8 <__vector_29+0x5c>
			//PORTA = 0x00;	// always turn off the pulses
			//PORTJ &= 0xF0;
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     33e:	80 91 6e 03 	lds	r24, 0x036E
     342:	90 91 6f 03 	lds	r25, 0x036F
     346:	82 0f       	add	r24, r18
     348:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	90 93 6f 03 	sts	0x036F, r25
     352:	80 93 6e 03 	sts	0x036E, r24
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     356:	80 91 64 03 	lds	r24, 0x0364
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	09 f0       	breq	.+2      	; 0x360 <__vector_29+0x1d4>
     35e:	49 cf       	rjmp	.-366    	; 0x1f2 <__vector_29+0x66>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:
			currentAdChannel = currentMotRightChannel;
     360:	80 91 30 03 	lds	r24, 0x0330
     364:	80 93 2d 03 	sts	0x032D, r24
			rightChannelPhase = rightMotorPhase;
     368:	80 91 31 03 	lds	r24, 0x0331
     36c:	80 93 65 03 	sts	0x0365, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     370:	80 91 66 03 	lds	r24, 0x0366
     374:	88 23       	and	r24, r24
     376:	09 f0       	breq	.+2      	; 0x37a <__vector_29+0x1ee>
     378:	69 c0       	rjmp	.+210    	; 0x44c <__vector_29+0x2c0>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	80 93 63 03 	sts	0x0363, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	80 93 64 03 	sts	0x0364, r24
			break;
     386:	4b cf       	rjmp	.-362    	; 0x21e <__vector_29+0x92>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     388:	80 91 7c 03 	lds	r24, 0x037C
     38c:	90 91 7d 03 	lds	r25, 0x037D
     390:	82 0f       	add	r24, r18
     392:	93 1f       	adc	r25, r19
     394:	90 93 7d 03 	sts	0x037D, r25
     398:	80 93 7c 03 	sts	0x037C, r24
			num_lvel_samples_avg++;
     39c:	80 91 74 03 	lds	r24, 0x0374
     3a0:	90 91 75 03 	lds	r25, 0x0375
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 75 03 	sts	0x0375, r25
     3aa:	80 93 74 03 	sts	0x0374, r24
			break;
     3ae:	1c cf       	rjmp	.-456    	; 0x1e8 <__vector_29+0x5c>
			}
			adcSamplingState = 3;
			break;

		case 3:
			currentAdChannel = currentMotLeftChannel;
     3b0:	80 91 2f 03 	lds	r24, 0x032F
     3b4:	80 93 2d 03 	sts	0x032D, r24
			leftChannelPhase = leftMotorPhase;
     3b8:	80 91 32 03 	lds	r24, 0x0332
     3bc:	80 93 66 03 	sts	0x0366, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     3c0:	80 91 65 03 	lds	r24, 0x0365
     3c4:	88 23       	and	r24, r24
     3c6:	b9 f5       	brne	.+110    	; 0x436 <__vector_29+0x2aa>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 63 03 	sts	0x0363, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	80 93 64 03 	sts	0x0364, r24
			break;
     3d4:	24 cf       	rjmp	.-440    	; 0x21e <__vector_29+0x92>
			right_vel_sum += value;
			num_rvel_samples_avg++;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     3d6:	80 91 6c 03 	lds	r24, 0x036C
     3da:	90 91 6d 03 	lds	r25, 0x036D
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	90 93 6d 03 	sts	0x036D, r25
     3ea:	80 93 6c 03 	sts	0x036C, r24
			break;
     3ee:	fc ce       	rjmp	.-520    	; 0x1e8 <__vector_29+0x5c>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     3f0:	80 91 80 03 	lds	r24, 0x0380
     3f4:	90 91 81 03 	lds	r25, 0x0381
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
     3fc:	90 93 81 03 	sts	0x0381, r25
     400:	80 93 80 03 	sts	0x0380, r24
			num_rvel_samples_avg++;
     404:	80 91 78 03 	lds	r24, 0x0378
     408:	90 91 79 03 	lds	r25, 0x0379
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	90 93 79 03 	sts	0x0379, r25
     412:	80 93 78 03 	sts	0x0378, r24
			break;
     416:	e8 ce       	rjmp	.-560    	; 0x1e8 <__vector_29+0x5c>
							//PORTA = 0x00;	// already done at the ISR beginning...
							PORTA = (1 << (currentProx>>1));
							//PORTA = (1 << currentAdChannel);
						}
					} else {
						PORTJ = (1 << ((currentProx-16)>>1));
     418:	40 97       	sbiw	r24, 0x10	; 16
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__vector_29+0x29c>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__vector_29+0x298>
     42c:	20 93 05 01 	sts	0x0105, r18
     430:	80 91 64 03 	lds	r24, 0x0364
     434:	f4 ce       	rjmp	.-536    	; 0x21e <__vector_29+0x92>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	80 93 63 03 	sts	0x0363, r24
     43c:	c8 cf       	rjmp	.-112    	; 0x3ce <__vector_29+0x242>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     43e:	80 93 63 03 	sts	0x0363, r24
     442:	41 cf       	rjmp	.-382    	; 0x2c6 <__vector_29+0x13a>
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 63 03 	sts	0x0363, r24
     44a:	e6 ce       	rjmp	.-564    	; 0x218 <__vector_29+0x8c>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	80 93 63 03 	sts	0x0363, r24
     452:	96 cf       	rjmp	.-212    	; 0x380 <__vector_29+0x1f4>
			
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
     454:	80 91 69 03 	lds	r24, 0x0369
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	79 f0       	breq	.+30     	; 0x47a <__vector_29+0x2ee>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	df ce       	rjmp	.-578    	; 0x21e <__vector_29+0x92>
	// save the last data

	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {
     460:	90 91 69 03 	lds	r25, 0x0369
     464:	92 30       	cpi	r25, 0x02	; 2
     466:	09 f0       	breq	.+2      	; 0x46a <__vector_29+0x2de>
     468:	07 cf       	rjmp	.-498    	; 0x278 <__vector_29+0xec>
				batteryLevel = value;
     46a:	30 93 68 03 	sts	0x0368, r19
     46e:	20 93 67 03 	sts	0x0367, r18
				measBattery = 0;
     472:	10 92 69 03 	sts	0x0369, r1
				PORTC &= ~(1 << 6);
     476:	46 98       	cbi	0x08, 6	; 8
     478:	07 cf       	rjmp	.-498    	; 0x288 <__vector_29+0xfc>
//			if(measBattery) {
//				PORTC |= (1 << 6);	// sense enable on
//			} else { 	// activate pulses

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	80 93 69 03 	sts	0x0369, r24
					PORTC |= (1 << 6);	// sense enable on
     480:	46 9a       	sbi	0x08, 6	; 8
     482:	28 cf       	rjmp	.-432    	; 0x2d4 <__vector_29+0x148>
				}

				if(currentProx & 0x01) {
					if(currentProx < 16) {
						if(currentProx==14 && measBattery==1) {
     484:	80 91 69 03 	lds	r24, 0x0369
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	09 f0       	breq	.+2      	; 0x48e <__vector_29+0x302>
     48c:	2d cf       	rjmp	.-422    	; 0x2e8 <__vector_29+0x15c>
							measBattery=2;
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 93 69 03 	sts	0x0369, r24
							PORTC |= (1 << 6);	// sense enable on
     494:	46 9a       	sbi	0x08, 6	; 8
     496:	80 91 64 03 	lds	r24, 0x0364
     49a:	c1 ce       	rjmp	.-638    	; 0x21e <__vector_29+0x92>

0000049c <initPwm>:
	// Timer1 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	// enable OCA, OCB, OCC; clear on match, set at bottom
     49c:	e0 e8       	ldi	r30, 0x80	; 128
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	89 6a       	ori	r24, 0xA9	; 169
     4a4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS10);		// mode 5 => fast-pwm 8 bit; no prescaler
     4a6:	e1 e8       	ldi	r30, 0x81	; 129
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	89 60       	ori	r24, 0x09	; 9
     4ae:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
     4b0:	80 91 0e 02 	lds	r24, 0x020E
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 89 00 	sts	0x0089, r25
     4ba:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
     4be:	80 91 0f 02 	lds	r24, 0x020F
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 8b 00 	sts	0x008B, r25
     4c8:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
     4cc:	80 91 10 02 	lds	r24, 0x0210
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	90 93 8d 00 	sts	0x008D, r25
     4d6:	80 93 8c 00 	sts	0x008C, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     4da:	e0 e9       	ldi	r30, 0x90	; 144
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	83 68       	ori	r24, 0x83	; 131
     4e2:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     4e4:	80 81       	ld	r24, Z
     4e6:	83 60       	ori	r24, 0x03	; 3
     4e8:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     4ea:	a1 e9       	ldi	r26, 0x91	; 145
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	8c 91       	ld	r24, X
     4f0:	8b 60       	ori	r24, 0x0B	; 11
     4f2:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     4f4:	80 91 88 03 	lds	r24, 0x0388
     4f8:	90 91 89 03 	lds	r25, 0x0389
     4fc:	90 93 99 00 	sts	0x0099, r25
     500:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     504:	10 92 9b 00 	sts	0x009B, r1
     508:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     50c:	a1 e7       	ldi	r26, 0x71	; 113
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	8c 91       	ld	r24, X
     512:	81 60       	ori	r24, 0x01	; 1
     514:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     516:	80 81       	ld	r24, Z
     518:	8f 75       	andi	r24, 0x5F	; 95
     51a:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     51c:	8e b1       	in	r24, 0x0e	; 14
     51e:	87 7e       	andi	r24, 0xE7	; 231
     520:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     522:	e0 ea       	ldi	r30, 0xA0	; 160
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	83 68       	ori	r24, 0x83	; 131
     52a:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     52c:	a1 ea       	ldi	r26, 0xA1	; 161
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	8c 91       	ld	r24, X
     532:	8b 60       	ori	r24, 0x0B	; 11
     534:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     536:	80 91 8c 03 	lds	r24, 0x038C
     53a:	90 91 8d 03 	lds	r25, 0x038D
     53e:	90 93 a9 00 	sts	0x00A9, r25
     542:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     546:	10 92 ab 00 	sts	0x00AB, r1
     54a:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     54e:	a2 e7       	ldi	r26, 0x72	; 114
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	8c 91       	ld	r24, X
     554:	81 60       	ori	r24, 0x01	; 1
     556:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     558:	80 81       	ld	r24, Z
     55a:	8f 75       	andi	r24, 0x5F	; 95
     55c:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     55e:	e2 e0       	ldi	r30, 0x02	; 2
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	80 81       	ld	r24, Z
     564:	87 7e       	andi	r24, 0xE7	; 231
     566:	80 83       	st	Z, r24


}
     568:	08 95       	ret

0000056a <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
     578:	af 93       	push	r26
     57a:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	leftMotorPhase = ACTIVE_PHASE;
     57c:	10 92 32 03 	sts	0x0332, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     580:	80 91 6c 03 	lds	r24, 0x036C
     584:	90 91 6d 03 	lds	r25, 0x036D
     588:	90 93 71 03 	sts	0x0371, r25
     58c:	80 93 70 03 	sts	0x0370, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     590:	80 91 74 03 	lds	r24, 0x0374
     594:	90 91 75 03 	lds	r25, 0x0375
     598:	90 93 77 03 	sts	0x0377, r25
     59c:	80 93 76 03 	sts	0x0376, r24
	last_left_vel_sum = left_vel_sum;
     5a0:	80 91 7c 03 	lds	r24, 0x037C
     5a4:	90 91 7d 03 	lds	r25, 0x037D
     5a8:	90 93 7f 03 	sts	0x037F, r25
     5ac:	80 93 7e 03 	sts	0x037E, r24

	// reset sampling variables
	left_current_avg = 0;
     5b0:	10 92 6d 03 	sts	0x036D, r1
     5b4:	10 92 6c 03 	sts	0x036C, r1
	num_lvel_samples_avg = 0;
     5b8:	10 92 75 03 	sts	0x0375, r1
     5bc:	10 92 74 03 	sts	0x0374, r1
	left_vel_sum = 0;
     5c0:	10 92 7d 03 	sts	0x037D, r1
     5c4:	10 92 7c 03 	sts	0x037C, r1

	// start control
	compute_left_vel = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 b8 03 	sts	0x03B8, r24
	start_control = 1;
     5ce:	80 93 ba 03 	sts	0x03BA, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     5d2:	80 91 8c 03 	lds	r24, 0x038C
     5d6:	90 91 8d 03 	lds	r25, 0x038D
     5da:	a0 91 8e 03 	lds	r26, 0x038E
     5de:	b0 91 8f 03 	lds	r27, 0x038F
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	a1 05       	cpc	r26, r1
     5e6:	b1 05       	cpc	r27, r1
     5e8:	29 f0       	breq	.+10     	; 0x5f4 <__vector_45+0x8a>
//		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
//		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     5ea:	18 16       	cp	r1, r24
     5ec:	19 06       	cpc	r1, r25
     5ee:	1a 06       	cpc	r1, r26
     5f0:	1b 06       	cpc	r1, r27
     5f2:	64 f4       	brge	.+24     	; 0x60c <__vector_45+0xa2>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     5f4:	8f e0       	ldi	r24, 0x0F	; 15
     5f6:	80 93 2f 03 	sts	0x032F, r24
//		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti
//		PORTH &= ~(1 << 4);				// output to 0
//		TCCR4A |= (1 << COM4A1);		// enable OCA
//		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     60c:	8e e0       	ldi	r24, 0x0E	; 14
     60e:	80 93 2f 03 	sts	0x032F, r24
     612:	f3 cf       	rjmp	.-26     	; 0x5fa <__vector_45+0x90>

00000614 <__vector_42>:
//	PORTB |= (1 << 6);

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	80 93 32 03 	sts	0x0332, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     626:	8e e0       	ldi	r24, 0x0E	; 14
     628:	80 93 2f 03 	sts	0x032F, r24

//	PORTB |= (1 << 6);

}
     62c:	8f 91       	pop	r24
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	leftMotorPhase = PASSIVE_PHASE;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 32 03 	sts	0x0332, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     64a:	8f e0       	ldi	r24, 0x0F	; 15
     64c:	80 93 2f 03 	sts	0x032F, r24

//	PORTB |= (1 << 6);

}
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
     666:	2f 93       	push	r18
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27

//	PORTB &= ~(1 << 6);

	rightMotorPhase = ACTIVE_PHASE;
     670:	10 92 31 03 	sts	0x0331, r1
	sendAdcValues = 1;
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	20 93 c9 03 	sts	0x03C9, r18

	// copy sampling variables
	last_right_current = right_current_avg;
     67a:	80 91 6e 03 	lds	r24, 0x036E
     67e:	90 91 6f 03 	lds	r25, 0x036F
     682:	90 93 73 03 	sts	0x0373, r25
     686:	80 93 72 03 	sts	0x0372, r24
	last_right_vel_sum = right_vel_sum;
     68a:	80 91 80 03 	lds	r24, 0x0380
     68e:	90 91 81 03 	lds	r25, 0x0381
     692:	90 93 83 03 	sts	0x0383, r25
     696:	80 93 82 03 	sts	0x0382, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     69a:	80 91 78 03 	lds	r24, 0x0378
     69e:	90 91 79 03 	lds	r25, 0x0379
     6a2:	90 93 7b 03 	sts	0x037B, r25
     6a6:	80 93 7a 03 	sts	0x037A, r24

	// reset sampling variables
	right_current_avg = 0;
     6aa:	10 92 6f 03 	sts	0x036F, r1
     6ae:	10 92 6e 03 	sts	0x036E, r1
	right_vel_sum = 0;
     6b2:	10 92 81 03 	sts	0x0381, r1
     6b6:	10 92 80 03 	sts	0x0380, r1
	num_rvel_samples_avg = 0;
     6ba:	10 92 79 03 	sts	0x0379, r1
     6be:	10 92 78 03 	sts	0x0378, r1

	// start control
	compute_right_vel = 1;
     6c2:	20 93 b9 03 	sts	0x03B9, r18

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     6c6:	80 91 88 03 	lds	r24, 0x0388
     6ca:	90 91 89 03 	lds	r25, 0x0389
     6ce:	a0 91 8a 03 	lds	r26, 0x038A
     6d2:	b0 91 8b 03 	lds	r27, 0x038B
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	29 f0       	breq	.+10     	; 0x6e8 <__vector_35+0x8c>
//		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
//		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
//		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     6de:	18 16       	cp	r1, r24
     6e0:	19 06       	cpc	r1, r25
     6e2:	1a 06       	cpc	r1, r26
     6e4:	1b 06       	cpc	r1, r27
     6e6:	6c f4       	brge	.+26     	; 0x702 <__vector_35+0xa6>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     6e8:	8d e0       	ldi	r24, 0x0D	; 13
     6ea:	80 93 30 03 	sts	0x0330, r24
//		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

//	PORTB |= (1 << 6);

}
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti
//		PORTE &= ~(1 << 4);				// output to 0
//		TCCR3A |= (1 << COM3A1);		// enable OCA
//		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     702:	8c e0       	ldi	r24, 0x0C	; 12
     704:	80 93 30 03 	sts	0x0330, r24
     708:	f2 cf       	rjmp	.-28     	; 0x6ee <__vector_35+0x92>

0000070a <__vector_32>:
//	PORTB |= (1 << 6);

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     70a:	1f 92       	push	r1
     70c:	0f 92       	push	r0
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	0f 92       	push	r0
     712:	11 24       	eor	r1, r1
     714:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 31 03 	sts	0x0331, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     71c:	8c e0       	ldi	r24, 0x0C	; 12
     71e:	80 93 30 03 	sts	0x0330, r24

//	PORTB |= (1 << 6);
}
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	8f 93       	push	r24

//	PORTB &= ~(1 << 6);

	rightMotorPhase = PASSIVE_PHASE;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 31 03 	sts	0x0331, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     740:	8d e0       	ldi	r24, 0x0D	; 13
     742:	80 93 30 03 	sts	0x0330, r24

//	PORTB |= (1 << 6);
}
     746:	8f 91       	pop	r24
     748:	0f 90       	pop	r0
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	0f 90       	pop	r0
     74e:	1f 90       	pop	r1
     750:	18 95       	reti

00000752 <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	00 d0       	rcall	.+0      	; 0x758 <readAccelXYZ+0x6>
     758:	00 d0       	rcall	.+0      	; 0x75a <readAccelXYZ+0x8>
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {
     75e:	80 91 cd 03 	lds	r24, 0x03CD
     762:	88 23       	and	r24, r24
     764:	c1 f0       	breq	.+48     	; 0x796 <readAccelXYZ+0x44>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis


	} else if(useAccel == USE_ADXL345) {	
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	09 f4       	brne	.+2      	; 0x76c <readAccelXYZ+0x1a>
     76a:	54 c0       	rjmp	.+168    	; 0x814 <readAccelXYZ+0xc2>
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis

	} else {

		accX = 0;
     76c:	10 92 cf 03 	sts	0x03CF, r1
     770:	10 92 ce 03 	sts	0x03CE, r1
		accY = 0;
     774:	10 92 d1 03 	sts	0x03D1, r1
     778:	10 92 d0 03 	sts	0x03D0, r1
		accZ = 0;
     77c:	10 92 d3 03 	sts	0x03D3, r1
     780:	10 92 d2 03 	sts	0x03D2, r1

	}

}
     784:	26 96       	adiw	r28, 0x06	; 6
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	cf 91       	pop	r28
     792:	df 91       	pop	r29
     794:	08 95       	ret
	unsigned char buff[6], ret;

	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     796:	80 91 14 02 	lds	r24, 0x0214
     79a:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
		i2c_write(0x00);							// sends address to read from
     79e:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     7a0:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     7a4:	80 91 14 02 	lds	r24, 0x0214
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	0e 94 8a 18 	call	0x3114	; 0x3114 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();				// read one byte
     7ae:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     7b8:	8a 83       	std	Y+2, r24	; 0x02
     7ba:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     7c4:	8c 83       	std	Y+4, r24	; 0x04
     7c6:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     7ca:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();					// read last byte
     7cc:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <i2c_readNak>
     7d0:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();									// set stop conditon = release bus
     7d2:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>

		// 16 bits values in 2's complement
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     7d6:	3a 81       	ldd	r19, Y+2	; 0x02
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	82 2b       	or	r24, r18
     7e0:	93 2b       	or	r25, r19
     7e2:	90 93 cf 03 	sts	0x03CF, r25
     7e6:	80 93 ce 03 	sts	0x03CE, r24
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     7ea:	3c 81       	ldd	r19, Y+4	; 0x04
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	82 2b       	or	r24, r18
     7f4:	93 2b       	or	r25, r19
     7f6:	90 93 d1 03 	sts	0x03D1, r25
     7fa:	80 93 d0 03 	sts	0x03D0, r24
		accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     7fe:	3e 81       	ldd	r19, Y+6	; 0x06
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	8d 81       	ldd	r24, Y+5	; 0x05
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	82 2b       	or	r24, r18
     808:	93 2b       	or	r25, r19
     80a:	90 93 d3 03 	sts	0x03D3, r25
     80e:	80 93 d2 03 	sts	0x03D2, r24
     812:	b8 cf       	rjmp	.-144    	; 0x784 <readAccelXYZ+0x32>


	} else if(useAccel == USE_ADXL345) {	

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     814:	80 91 14 02 	lds	r24, 0x0214
     818:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
		i2c_write(0x32);							// sends address to read from
     81c:	82 e3       	ldi	r24, 0x32	; 50
     81e:	c0 cf       	rjmp	.-128    	; 0x7a0 <readAccelXYZ+0x4e>

00000820 <readAccelXY>:

	}

}

void readAccelXY() {
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	0f 92       	push	r0
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	unsigned char buff[4], ret;


	if(useAccel == USE_MMAX7455L) {
     830:	80 91 cd 03 	lds	r24, 0x03CD
     834:	88 23       	and	r24, r24
     836:	91 f0       	breq	.+36     	; 0x85c <readAccelXY+0x3c>
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

		//accX = ((((buff[1]&0x02)<<6) | (buff[1]&0x01)) << 8) | buff[0];    // X axis
		//accY = ((((buff[3]&0x02)<<6) | (buff[1]&0x01)) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	09 f4       	brne	.+2      	; 0x83e <readAccelXY+0x1e>
     83c:	45 c0       	rjmp	.+138    	; 0x8c8 <readAccelXY+0xa8>
		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis

	} else {

		accX = 0;
     83e:	10 92 cf 03 	sts	0x03CF, r1
     842:	10 92 ce 03 	sts	0x03CE, r1
		accY = 0;
     846:	10 92 d1 03 	sts	0x03D1, r1
     84a:	10 92 d0 03 	sts	0x03D0, r1

	}


}
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	08 95       	ret


	if(useAccel == USE_MMAX7455L) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     85c:	80 91 14 02 	lds	r24, 0x0214
     860:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
		i2c_write(0x00);							// sends address to read from
     864:	80 e0       	ldi	r24, 0x00	; 0

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
		i2c_write(0x32);							// sends address to read from
     866:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     86a:	80 91 14 02 	lds	r24, 0x0214
     86e:	8f 5f       	subi	r24, 0xFF	; 255
     870:	0e 94 8a 18 	call	0x3114	; 0x3114 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();				// read one byte
     874:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     878:	08 2f       	mov	r16, r24
     87a:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     87e:	f8 2e       	mov	r15, r24
     880:	0e 94 ca 18 	call	0x3194	; 0x3194 <i2c_readAck>
     884:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();					// read last byte
     886:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <i2c_readNak>
		i2c_stop();									// set stop conditon = release bus
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>

		accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     890:	5f 2d       	mov	r21, r15
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	20 2f       	mov	r18, r16
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	24 2b       	or	r18, r20
     89a:	35 2b       	or	r19, r21
     89c:	30 93 cf 03 	sts	0x03CF, r19
     8a0:	20 93 ce 03 	sts	0x03CE, r18
		accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	38 2f       	mov	r19, r24
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	81 2f       	mov	r24, r17
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	82 2b       	or	r24, r18
     8b0:	93 2b       	or	r25, r19
     8b2:	90 93 d1 03 	sts	0x03D1, r25
     8b6:	80 93 d0 03 	sts	0x03D0, r24
		accY = 0;

	}


}
     8ba:	0f 90       	pop	r0
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	08 95       	ret
		//accY = ((((buff[3]&0x02)<<6) | (buff[1]&0x01)) << 8) | buff[2];    // Y axis

	} else if(useAccel == USE_ADXL345) {

		//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
		i2c_start(accelAddress+I2C_WRITE);	
     8c8:	80 91 14 02 	lds	r24, 0x0214
     8cc:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
		i2c_write(0x32);							// sends address to read from
     8d0:	82 e3       	ldi	r24, 0x32	; 50
     8d2:	c9 cf       	rjmp	.-110    	; 0x866 <readAccelXY+0x46>

000008d4 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8d4:	80 91 14 02 	lds	r24, 0x0214
     8d8:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     8dc:	88 23       	and	r24, r24
     8de:	51 f4       	brne	.+20     	; 0x8f4 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     8e0:	86 e1       	ldi	r24, 0x16	; 22
     8e2:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     8e6:	85 e4       	ldi	r24, 0x45	; 69
     8e8:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     8ec:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	return 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0

}
     8f2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     8f4:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
		return 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret

000008fc <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8fc:	80 91 14 02 	lds	r24, 0x0214
     900:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     904:	88 23       	and	r24, r24
     906:	31 f5       	brne	.+76     	; 0x954 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     908:	8d e2       	ldi	r24, 0x2D	; 45
     90a:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     90e:	88 e0       	ldi	r24, 0x08	; 8
     910:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     914:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     918:	80 91 14 02 	lds	r24, 0x0214
     91c:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     920:	88 23       	and	r24, r24
     922:	c1 f4       	brne	.+48     	; 0x954 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     924:	81 e3       	ldi	r24, 0x31	; 49
     926:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     930:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     934:	80 91 14 02 	lds	r24, 0x0214
     938:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     93c:	88 23       	and	r24, r24
     93e:	51 f4       	brne	.+20     	; 0x954 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     940:	8c e2       	ldi	r24, 0x2C	; 44
     942:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     94c:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	return 0;
     950:	80 e0       	ldi	r24, 0x00	; 0

}
     952:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     954:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
		return 1;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	08 95       	ret

0000095c <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     95c:	0e 94 35 18 	call	0x306a	; 0x306a <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     960:	80 91 14 02 	lds	r24, 0x0214
     964:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     968:	88 23       	and	r24, r24
     96a:	49 f4       	brne	.+18     	; 0x97e <initI2C+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     96c:	86 e1       	ldi	r24, 0x16	; 22
     96e:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     972:	85 e4       	ldi	r24, 0x45	; 69
     974:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     978:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
     97c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     97e:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     982:	86 ea       	ldi	r24, 0xA6	; 166
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 15 02 	sts	0x0215, r25
     98a:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     98e:	86 ea       	ldi	r24, 0xA6	; 166
     990:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     994:	88 23       	and	r24, r24
     996:	41 f5       	brne	.+80     	; 0x9e8 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     998:	8d e2       	ldi	r24, 0x2D	; 45
     99a:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9a4:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9a8:	80 91 14 02 	lds	r24, 0x0214
     9ac:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9b0:	88 23       	and	r24, r24
     9b2:	d1 f4       	brne	.+52     	; 0x9e8 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     9b4:	81 e3       	ldi	r24, 0x31	; 49
     9b6:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9c0:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     9c4:	80 91 14 02 	lds	r24, 0x0214
     9c8:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     9cc:	88 23       	and	r24, r24
     9ce:	61 f4       	brne	.+24     	; 0x9e8 <initI2C+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     9d0:	8c e2       	ldi	r24, 0x2C	; 44
     9d2:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     9d6:	89 e0       	ldi	r24, 0x09	; 9
     9d8:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     9dc:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 cd 03 	sts	0x03CD, r24
     9e6:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     9e8:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	80 93 cd 03 	sts	0x03CD, r24
     9f2:	08 95       	ret

000009f4 <calibrateAccelerometer>:
		}
	}

}

void calibrateAccelerometer() {
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29

	int j=0;
	accOffsetX = 0;
     9f8:	10 92 db 03 	sts	0x03DB, r1
     9fc:	10 92 da 03 	sts	0x03DA, r1
	accOffsetY = 0;
     a00:	10 92 dd 03 	sts	0x03DD, r1
     a04:	10 92 dc 03 	sts	0x03DC, r1
	accOffsetZ = 0;
     a08:	10 92 df 03 	sts	0x03DF, r1
     a0c:	10 92 de 03 	sts	0x03DE, r1
     a10:	c2 e3       	ldi	r28, 0x32	; 50
     a12:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     a14:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>
		accOffsetX += accX;
     a18:	80 91 ce 03 	lds	r24, 0x03CE
     a1c:	90 91 cf 03 	lds	r25, 0x03CF
     a20:	20 91 da 03 	lds	r18, 0x03DA
     a24:	30 91 db 03 	lds	r19, 0x03DB
     a28:	82 0f       	add	r24, r18
     a2a:	93 1f       	adc	r25, r19
     a2c:	90 93 db 03 	sts	0x03DB, r25
     a30:	80 93 da 03 	sts	0x03DA, r24
		accOffsetY += accY;
     a34:	e0 91 d0 03 	lds	r30, 0x03D0
     a38:	f0 91 d1 03 	lds	r31, 0x03D1
     a3c:	20 91 dc 03 	lds	r18, 0x03DC
     a40:	30 91 dd 03 	lds	r19, 0x03DD
     a44:	e2 0f       	add	r30, r18
     a46:	f3 1f       	adc	r31, r19
     a48:	f0 93 dd 03 	sts	0x03DD, r31
     a4c:	e0 93 dc 03 	sts	0x03DC, r30
		accOffsetZ += accZ;
     a50:	20 91 d2 03 	lds	r18, 0x03D2
     a54:	30 91 d3 03 	lds	r19, 0x03D3
     a58:	40 91 de 03 	lds	r20, 0x03DE
     a5c:	50 91 df 03 	lds	r21, 0x03DF
     a60:	24 0f       	add	r18, r20
     a62:	35 1f       	adc	r19, r21
     a64:	30 93 df 03 	sts	0x03DF, r19
     a68:	20 93 de 03 	sts	0x03DE, r18
     a6c:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     a6e:	91 f6       	brne	.-92     	; 0xa14 <calibrateAccelerometer+0x20>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     a70:	c2 e3       	ldi	r28, 0x32	; 50
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	be 01       	movw	r22, r28
     a76:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     a7a:	70 93 db 03 	sts	0x03DB, r23
     a7e:	60 93 da 03 	sts	0x03DA, r22
	accOffsetY = accOffsetY/50;
     a82:	cf 01       	movw	r24, r30
     a84:	be 01       	movw	r22, r28
     a86:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     a8a:	70 93 dd 03 	sts	0x03DD, r23
     a8e:	60 93 dc 03 	sts	0x03DC, r22
	accOffsetZ = accOffsetZ/50;
     a92:	c9 01       	movw	r24, r18
     a94:	be 01       	movw	r22, r28
     a96:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     a9a:	70 93 df 03 	sts	0x03DF, r23
     a9e:	60 93 de 03 	sts	0x03DE, r22

}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <computeAngle>:

void computeAngle() {
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29

	readAccelXY();
     ab4:	0e 94 10 04 	call	0x820	; 0x820 <readAccelXY>

	if(useAccel == USE_MMAX7455L) {
     ab8:	80 91 cd 03 	lds	r24, 0x03CD
     abc:	88 23       	and	r24, r24
     abe:	09 f0       	breq	.+2      	; 0xac2 <computeAngle+0x1a>
     ac0:	55 c0       	rjmp	.+170    	; 0xb6c <computeAngle+0xc4>
		if(accX > 511) {
     ac2:	60 91 ce 03 	lds	r22, 0x03CE
     ac6:	70 91 cf 03 	lds	r23, 0x03CF
     aca:	22 e0       	ldi	r18, 0x02	; 2
     acc:	60 30       	cpi	r22, 0x00	; 0
     ace:	72 07       	cpc	r23, r18
     ad0:	34 f0       	brlt	.+12     	; 0xade <computeAngle+0x36>
			accX -= 1023;
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	73 40       	sbci	r23, 0x03	; 3
     ad6:	70 93 cf 03 	sts	0x03CF, r23
     ada:	60 93 ce 03 	sts	0x03CE, r22
		}
		if(accY > 511) {
     ade:	c0 91 d0 03 	lds	r28, 0x03D0
     ae2:	d0 91 d1 03 	lds	r29, 0x03D1
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	c0 30       	cpi	r28, 0x00	; 0
     aea:	d8 07       	cpc	r29, r24
     aec:	34 f0       	brlt	.+12     	; 0xafa <computeAngle+0x52>
			accY -= 1023;
     aee:	cf 5f       	subi	r28, 0xFF	; 255
     af0:	d3 40       	sbci	r29, 0x03	; 3
     af2:	d0 93 d1 03 	sts	0x03D1, r29
     af6:	c0 93 d0 03 	sts	0x03D0, r28
		}
		if(accZ > 511) {
     afa:	80 91 d2 03 	lds	r24, 0x03D2
     afe:	90 91 d3 03 	lds	r25, 0x03D3
     b02:	22 e0       	ldi	r18, 0x02	; 2
     b04:	80 30       	cpi	r24, 0x00	; 0
     b06:	92 07       	cpc	r25, r18
     b08:	e4 f5       	brge	.+120    	; 0xb82 <computeAngle+0xda>
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     b0a:	88 27       	eor	r24, r24
     b0c:	77 fd       	sbrc	r23, 7
     b0e:	80 95       	com	r24
     b10:	98 2f       	mov	r25, r24
     b12:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
     b16:	7b 01       	movw	r14, r22
     b18:	8c 01       	movw	r16, r24
     b1a:	be 01       	movw	r22, r28
     b1c:	88 27       	eor	r24, r24
     b1e:	77 fd       	sbrc	r23, 7
     b20:	80 95       	com	r24
     b22:	98 2f       	mov	r25, r24
     b24:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	c8 01       	movw	r24, r16
     b2e:	b7 01       	movw	r22, r14
     b30:	0e 94 08 22 	call	0x4410	; 0x4410 <atan2>
     b34:	21 ee       	ldi	r18, 0xE1	; 225
     b36:	3e e2       	ldi	r19, 0x2E	; 46
     b38:	45 e6       	ldi	r20, 0x65	; 101
     b3a:	52 e4       	ldi	r21, 0x42	; 66
     b3c:	0e 94 bf 1c 	call	0x397e	; 0x397e <__mulsf3>
     b40:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__fixsfsi>
     b44:	9b 01       	movw	r18, r22
     b46:	70 93 e1 03 	sts	0x03E1, r23
     b4a:	60 93 e0 03 	sts	0x03E0, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     b4e:	77 ff       	sbrs	r23, 7
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <computeAngle+0xb6>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     b52:	28 59       	subi	r18, 0x98	; 152
     b54:	3e 4f       	sbci	r19, 0xFE	; 254
     b56:	30 93 e1 03 	sts	0x03E1, r19
     b5a:	20 93 e0 03 	sts	0x03E0, r18
	}

}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
		}
	} else if(useAccel == USE_ADXL345) {
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	81 f0       	breq	.+32     	; 0xb90 <computeAngle+0xe8>
     b70:	60 91 ce 03 	lds	r22, 0x03CE
     b74:	70 91 cf 03 	lds	r23, 0x03CF
     b78:	c0 91 d0 03 	lds	r28, 0x03D0
     b7c:	d0 91 d1 03 	lds	r29, 0x03D1
     b80:	c4 cf       	rjmp	.-120    	; 0xb0a <computeAngle+0x62>
		}
		if(accY > 511) {
			accY -= 1023;
		}
		if(accZ > 511) {
			accZ -= 1023;
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	93 40       	sbci	r25, 0x03	; 3
     b86:	90 93 d3 03 	sts	0x03D3, r25
     b8a:	80 93 d2 03 	sts	0x03D2, r24
     b8e:	bd cf       	rjmp	.-134    	; 0xb0a <computeAngle+0x62>
		}
	} else if(useAccel == USE_ADXL345) {
		accX = accX-accOffsetX;
     b90:	60 91 ce 03 	lds	r22, 0x03CE
     b94:	70 91 cf 03 	lds	r23, 0x03CF
     b98:	80 91 da 03 	lds	r24, 0x03DA
     b9c:	90 91 db 03 	lds	r25, 0x03DB
     ba0:	68 1b       	sub	r22, r24
     ba2:	79 0b       	sbc	r23, r25
     ba4:	70 93 cf 03 	sts	0x03CF, r23
     ba8:	60 93 ce 03 	sts	0x03CE, r22
		accY = accY-accOffsetY;
     bac:	c0 91 d0 03 	lds	r28, 0x03D0
     bb0:	d0 91 d1 03 	lds	r29, 0x03D1
     bb4:	80 91 dc 03 	lds	r24, 0x03DC
     bb8:	90 91 dd 03 	lds	r25, 0x03DD
     bbc:	c8 1b       	sub	r28, r24
     bbe:	d9 0b       	sbc	r29, r25
     bc0:	d0 93 d1 03 	sts	0x03D1, r29
     bc4:	c0 93 d0 03 	sts	0x03D0, r28
     bc8:	a0 cf       	rjmp	.-192    	; 0xb0a <computeAngle+0x62>

00000bca <initPeripherals>:

}

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     bca:	f8 94       	cli

	initPortsIO();
     bcc:	0e 94 11 18 	call	0x3022	; 0x3022 <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     bd0:	80 91 7a 00 	lds	r24, 0x007A
     bd4:	86 60       	ori	r24, 0x06	; 6
     bd6:	80 93 7a 00 	sts	0x007A, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     bda:	80 91 7c 00 	lds	r24, 0x007C
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     be4:	80 91 7a 00 	lds	r24, 0x007A
     be8:	80 62       	ori	r24, 0x20	; 32
     bea:	80 93 7a 00 	sts	0x007A, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     bee:	80 91 7b 00 	lds	r24, 0x007B
     bf2:	88 7f       	andi	r24, 0xF8	; 248
     bf4:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     bf8:	80 91 7a 00 	lds	r24, 0x007A
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     c02:	80 91 7a 00 	lds	r24, 0x007A
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     c0c:	80 91 7a 00 	lds	r24, 0x007A
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	80 93 7a 00 	sts	0x007A, r24

	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
     c16:	0e 94 4e 02 	call	0x49c	; 0x49c <initPwm>
	initSPI();
     c1a:	0e 94 4a 10 	call	0x2094	; 0x2094 <initSPI>
	mirf_init();
     c1e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <mirf_init>
	initUsart();
     c22:	0e 94 de 18 	call	0x31bc	; 0x31bc <initUsart>
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     c26:	0e 94 35 18 	call	0x306a	; 0x306a <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c2a:	80 91 14 02 	lds	r24, 0x0214
     c2e:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c32:	88 23       	and	r24, r24
     c34:	51 f4       	brne	.+20     	; 0xc4a <initPeripherals+0x80>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
     c36:	86 e1       	ldi	r24, 0x16	; 22
     c38:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g; ret=0 -> Ok, ret=1 -> no ACK 
     c3c:	85 e4       	ldi	r24, 0x45	; 69
     c3e:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c42:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     c46:	78 94       	sei

	

}
     c48:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     c4a:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
	i2c_init();

	ret = initMMA7455L();

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
     c4e:	86 ea       	ldi	r24, 0xA6	; 166
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 15 02 	sts	0x0215, r25
     c56:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c5a:	86 ea       	ldi	r24, 0xA6	; 166
     c5c:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c60:	88 23       	and	r24, r24
     c62:	41 f5       	brne	.+80     	; 0xcb4 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     c64:	8d e2       	ldi	r24, 0x2D	; 45
     c66:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     c6a:	88 e0       	ldi	r24, 0x08	; 8
     c6c:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c70:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c74:	80 91 14 02 	lds	r24, 0x0214
     c78:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c7c:	88 23       	and	r24, r24
     c7e:	d1 f4       	brne	.+52     	; 0xcb4 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     c80:	81 e3       	ldi	r24, 0x31	; 49
     c82:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity; ret=0 -> Ok, ret=1 -> no ACK 
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     c8c:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     c90:	80 91 14 02 	lds	r24, 0x0214
     c94:	0e 94 3d 18 	call	0x307a	; 0x307a <i2c_start>
    if (ret) {			// failed to issue start condition, possibly no device found
     c98:	88 23       	and	r24, r24
     c9a:	61 f4       	brne	.+24     	; 0xcb4 <initPeripherals+0xea>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     c9c:	8c e2       	ldi	r24, 0x2C	; 44
     c9e:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     ca2:	89 e0       	ldi	r24, 0x09	; 9
     ca4:	0e 94 b8 18 	call	0x3170	; 0x3170 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     ca8:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 cd 03 	sts	0x03CD, r24
     cb2:	c9 cf       	rjmp	.-110    	; 0xc46 <initPeripherals+0x7c>
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if (ret) {			// failed to issue start condition, possibly no device found
        i2c_stop();
     cb4:	0e 94 b0 18 	call	0x3160	; 0x3160 <i2c_stop>

	if(ret) {	// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			useAccel = USE_NO_ACCEL;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	80 93 cd 03 	sts	0x03CD, r24
	initSPI();
	mirf_init();
	initUsart();
	initI2C();

	sei();			// enable global interrupts
     cbe:	78 94       	sei

	

}
     cc0:	08 95       	ret

00000cc2 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 91 c8 03 	lds	r25, 0x03C8
     cc8:	89 1b       	sub	r24, r25
     cca:	80 93 c8 03 	sts	0x03C8, r24

	if(blinkState) {
     cce:	88 23       	and	r24, r24
     cd0:	39 f4       	brne	.+14     	; 0xce0 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     cd2:	80 91 80 00 	lds	r24, 0x0080
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     cdc:	2f 98       	cbi	0x05, 7	; 5
     cde:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     ce0:	80 91 80 00 	lds	r24, 0x0080
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 8d 00 	sts	0x008D, r25
     cf2:	80 93 8c 00 	sts	0x008C, r24
     cf6:	08 95       	ret

00000cf8 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     cf8:	88 23       	and	r24, r24
     cfa:	59 f0       	breq	.+22     	; 0xd12 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     cfc:	90 91 80 00 	lds	r25, 0x0080
     d00:	90 68       	ori	r25, 0x80	; 128
     d02:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	90 93 89 00 	sts	0x0089, r25
     d0c:	80 93 88 00 	sts	0x0088, r24
     d10:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     d12:	80 91 80 00 	lds	r24, 0x0080
     d16:	8f 77       	andi	r24, 0x7F	; 127
     d18:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     d1c:	2d 98       	cbi	0x05, 5	; 5
     d1e:	08 95       	ret

00000d20 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     d20:	88 23       	and	r24, r24
     d22:	59 f0       	breq	.+22     	; 0xd3a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     d24:	90 91 80 00 	lds	r25, 0x0080
     d28:	90 62       	ori	r25, 0x20	; 32
     d2a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	90 93 8b 00 	sts	0x008B, r25
     d34:	80 93 8a 00 	sts	0x008A, r24
     d38:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     d3a:	80 91 80 00 	lds	r24, 0x0080
     d3e:	8f 7d       	andi	r24, 0xDF	; 223
     d40:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     d44:	2e 98       	cbi	0x05, 6	; 5
     d46:	08 95       	ret

00000d48 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     d48:	88 23       	and	r24, r24
     d4a:	59 f0       	breq	.+22     	; 0xd62 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     d4c:	90 91 80 00 	lds	r25, 0x0080
     d50:	98 60       	ori	r25, 0x08	; 8
     d52:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 8d 00 	sts	0x008D, r25
     d5c:	80 93 8c 00 	sts	0x008C, r24
     d60:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     d62:	80 91 80 00 	lds	r24, 0x0080
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     d6c:	2f 98       	cbi	0x05, 7	; 5
     d6e:	08 95       	ret

00000d70 <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 e2 03 	sts	0x03E2, r24
}
     d76:	08 95       	ret

00000d78 <getSelector>:

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     d78:	86 b1       	in	r24, 0x06	; 6
     d7a:	66 b1       	in	r22, 0x06	; 6
     d7c:	26 b1       	in	r18, 0x06	; 6
     d7e:	46 b1       	in	r20, 0x06	; 6
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	28 70       	andi	r18, 0x08	; 8
     d84:	30 70       	andi	r19, 0x00	; 0
     d86:	35 95       	asr	r19
     d88:	27 95       	ror	r18
     d8a:	35 95       	asr	r19
     d8c:	27 95       	ror	r18
     d8e:	35 95       	asr	r19
     d90:	27 95       	ror	r18
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	64 70       	andi	r22, 0x04	; 4
     d9a:	70 70       	andi	r23, 0x00	; 0
     d9c:	75 95       	asr	r23
     d9e:	67 95       	ror	r22
     da0:	75 95       	asr	r23
     da2:	67 95       	ror	r22
     da4:	26 0f       	add	r18, r22
     da6:	37 1f       	adc	r19, r23
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	42 70       	andi	r20, 0x02	; 2
     db0:	50 70       	andi	r21, 0x00	; 0
     db2:	55 95       	asr	r21
     db4:	47 95       	ror	r20
     db6:	24 0f       	add	r18, r20
     db8:	35 1f       	adc	r19, r21
     dba:	22 0f       	add	r18, r18
     dbc:	81 70       	andi	r24, 0x01	; 1
}
     dbe:	82 0f       	add	r24, r18
     dc0:	08 95       	ret

00000dc2 <main>:


int main(void) {
     dc2:	2f 92       	push	r2
     dc4:	3f 92       	push	r3
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	choosePeripheral = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 12 02 	sts	0x0212, r24

	initPeripherals();
     dec:	0e 94 e5 05 	call	0xbca	; 0xbca <initPeripherals>
}

void calibrateAccelerometer() {

	int j=0;
	accOffsetX = 0;
     df0:	10 92 db 03 	sts	0x03DB, r1
     df4:	10 92 da 03 	sts	0x03DA, r1
	accOffsetY = 0;
     df8:	10 92 dd 03 	sts	0x03DD, r1
     dfc:	10 92 dc 03 	sts	0x03DC, r1
	accOffsetZ = 0;
     e00:	10 92 df 03 	sts	0x03DF, r1
     e04:	10 92 de 03 	sts	0x03DE, r1
     e08:	c2 e3       	ldi	r28, 0x32	; 50
     e0a:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j<50; j++) {
		readAccelXYZ();
     e0c:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>
		accOffsetX += accX;
     e10:	80 91 ce 03 	lds	r24, 0x03CE
     e14:	90 91 cf 03 	lds	r25, 0x03CF
     e18:	20 91 da 03 	lds	r18, 0x03DA
     e1c:	30 91 db 03 	lds	r19, 0x03DB
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	90 93 db 03 	sts	0x03DB, r25
     e28:	80 93 da 03 	sts	0x03DA, r24
		accOffsetY += accY;
     e2c:	e0 91 d0 03 	lds	r30, 0x03D0
     e30:	f0 91 d1 03 	lds	r31, 0x03D1
     e34:	20 91 dc 03 	lds	r18, 0x03DC
     e38:	30 91 dd 03 	lds	r19, 0x03DD
     e3c:	e2 0f       	add	r30, r18
     e3e:	f3 1f       	adc	r31, r19
     e40:	f0 93 dd 03 	sts	0x03DD, r31
     e44:	e0 93 dc 03 	sts	0x03DC, r30
		accOffsetZ += accZ;
     e48:	20 91 d2 03 	lds	r18, 0x03D2
     e4c:	30 91 d3 03 	lds	r19, 0x03D3
     e50:	40 91 de 03 	lds	r20, 0x03DE
     e54:	50 91 df 03 	lds	r21, 0x03DF
     e58:	24 0f       	add	r18, r20
     e5a:	35 1f       	adc	r19, r21
     e5c:	30 93 df 03 	sts	0x03DF, r19
     e60:	20 93 de 03 	sts	0x03DE, r18
     e64:	21 97       	sbiw	r28, 0x01	; 1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     e66:	91 f6       	brne	.-92     	; 0xe0c <main+0x4a>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     e68:	c2 e3       	ldi	r28, 0x32	; 50
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
     e6c:	be 01       	movw	r22, r28
     e6e:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     e72:	70 93 db 03 	sts	0x03DB, r23
     e76:	60 93 da 03 	sts	0x03DA, r22
	accOffsetY = accOffsetY/50;
     e7a:	cf 01       	movw	r24, r30
     e7c:	be 01       	movw	r22, r28
     e7e:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     e82:	70 93 dd 03 	sts	0x03DD, r23
     e86:	60 93 dc 03 	sts	0x03DC, r22
	accOffsetZ = accOffsetZ/50;
     e8a:	c9 01       	movw	r24, r18
     e8c:	be 01       	movw	r22, r28
     e8e:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     e92:	70 93 df 03 	sts	0x03DF, r23
     e96:	60 93 de 03 	sts	0x03DE, r22
//PORTB |= (1 << 5);

//	e_start_agendas_processing();
	//e_activate_agenda(toggleBlueLed, 10000);		// every 1 seconds
//	e_activate_agenda(sendValues, 20000);	// every 2 seconds
	e_init_remote_control();
     e9a:	0e 94 08 13 	call	0x2610	; 0x2610 <e_init_remote_control>

		currentSelector = getSelector();
		readAccelXYZ();

		if(delayCounter >= 20000) {
			measBattery = 1;
     e9e:	ff 24       	eor	r15, r15
     ea0:	f3 94       	inc	r15
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
     ea2:	ee 24       	eor	r14, r14
     ea4:	ea 94       	dec	r14
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     ea6:	c4 e6       	ldi	r28, 0x64	; 100
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
					ackPayload[11] = accX&0xFF;
					ackPayload[12] = accX>>8;
					ackPayload[13] = accY&0xFF;
					ackPayload[14] = accY>>8;
					ackPayload[15] = ir_move;			
					packetId = 5;
     eaa:	05 e0       	ldi	r16, 0x05	; 5
     eac:	30 2e       	mov	r3, r16
					ackPayload[11] = proximityValue[12]&0xFF;
					ackPayload[12] = proximityValue[12]>>8;
					ackPayload[13] = proximityValue[14]&0xFF;
					ackPayload[14] = proximityValue[14]>>8;
					ackPayload[15] = currentSelector;
					packetId = 6;
     eae:	16 e0       	ldi	r17, 0x06	; 6
     eb0:	21 2e       	mov	r2, r17
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     eb2:	bd ec       	ldi	r27, 0xCD	; 205
     eb4:	8b 2e       	mov	r8, r27
     eb6:	be ef       	ldi	r27, 0xFE	; 254
     eb8:	9b 2e       	mov	r9, r27
     eba:	bf ef       	ldi	r27, 0xFF	; 255
     ebc:	ab 2e       	mov	r10, r27
     ebe:	bf ef       	ldi	r27, 0xFF	; 255
     ec0:	bb 2e       	mov	r11, r27
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     ec2:	a3 e3       	ldi	r26, 0x33	; 51
     ec4:	4a 2e       	mov	r4, r26
     ec6:	a1 e0       	ldi	r26, 0x01	; 1
     ec8:	5a 2e       	mov	r5, r26
     eca:	61 2c       	mov	r6, r1
     ecc:	71 2c       	mov	r7, r1
     ece:	59 c0       	rjmp	.+178    	; 0xf82 <main+0x1c0>

		}

		if(currentSelector == 0) {	// no control

			if(start_control) {
     ed0:	80 91 ba 03 	lds	r24, 0x03BA
     ed4:	88 23       	and	r24, r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <main+0x118>
     ed8:	9d c0       	rjmp	.+314    	; 0x1014 <main+0x252>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     eda:	80 91 90 03 	lds	r24, 0x0390
     ede:	90 91 91 03 	lds	r25, 0x0391
     ee2:	a0 91 92 03 	lds	r26, 0x0392
     ee6:	b0 91 93 03 	lds	r27, 0x0393
     eea:	80 93 bd 03 	sts	0x03BD, r24
     eee:	90 93 be 03 	sts	0x03BE, r25
     ef2:	a0 93 bf 03 	sts	0x03BF, r26
     ef6:	b0 93 c0 03 	sts	0x03C0, r27
				pwm_left_working = pwm_left_desired;	
     efa:	80 91 94 03 	lds	r24, 0x0394
     efe:	90 91 95 03 	lds	r25, 0x0395
     f02:	a0 91 96 03 	lds	r26, 0x0396
     f06:	b0 91 97 03 	lds	r27, 0x0397
     f0a:	80 93 c1 03 	sts	0x03C1, r24
     f0e:	90 93 c2 03 	sts	0x03C2, r25
     f12:	a0 93 c3 03 	sts	0x03C3, r26
     f16:	b0 93 c4 03 	sts	0x03C4, r27
				start_control = 0;
     f1a:	10 92 ba 03 	sts	0x03BA, r1
				update_pwm = 1;
     f1e:	f0 92 c5 03 	sts	0x03C5, r15
     f22:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
     f24:	80 91 b8 03 	lds	r24, 0x03B8
     f28:	88 23       	and	r24, r24
     f2a:	91 f0       	breq	.+36     	; 0xf50 <main+0x18e>
			last_left_vel = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
     f2c:	80 91 7e 03 	lds	r24, 0x037E
     f30:	90 91 7f 03 	lds	r25, 0x037F
     f34:	60 91 76 03 	lds	r22, 0x0376
     f38:	70 91 77 03 	lds	r23, 0x0377
     f3c:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     f40:	70 93 85 03 	sts	0x0385, r23
     f44:	60 93 84 03 	sts	0x0384, r22
			left_vel_changed = 1;
     f48:	f0 92 bb 03 	sts	0x03BB, r15
			compute_left_vel = 0;
     f4c:	10 92 b8 03 	sts	0x03B8, r1
		}

		if(compute_right_vel) {
     f50:	80 91 b9 03 	lds	r24, 0x03B9
     f54:	88 23       	and	r24, r24
     f56:	91 f0       	breq	.+36     	; 0xf7c <main+0x1ba>
			last_right_vel = (unsigned int)(last_right_vel_sum/last_num_rvel_samples_avg);
     f58:	80 91 82 03 	lds	r24, 0x0382
     f5c:	90 91 83 03 	lds	r25, 0x0383
     f60:	60 91 7a 03 	lds	r22, 0x037A
     f64:	70 91 7b 03 	lds	r23, 0x037B
     f68:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
     f6c:	70 93 87 03 	sts	0x0387, r23
     f70:	60 93 86 03 	sts	0x0386, r22
			right_vel_changed = 1;
     f74:	f0 92 bc 03 	sts	0x03BC, r15
			compute_right_vel = 0;
     f78:	10 92 b9 03 	sts	0x03B9, r1
		}

		if(update_pwm) {
     f7c:	22 23       	and	r18, r18
     f7e:	09 f0       	breq	.+2      	; 0xf82 <main+0x1c0>
     f80:	1e c3       	rjmp	.+1596   	; 0x15be <main+0x7fc>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     f82:	46 b1       	in	r20, 0x06	; 6
     f84:	86 b1       	in	r24, 0x06	; 6
     f86:	26 b1       	in	r18, 0x06	; 6
     f88:	56 b1       	in	r21, 0x06	; 6
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	28 70       	andi	r18, 0x08	; 8
     f8e:	30 70       	andi	r19, 0x00	; 0
     f90:	35 95       	asr	r19
     f92:	27 95       	ror	r18
     f94:	35 95       	asr	r19
     f96:	27 95       	ror	r18
     f98:	35 95       	asr	r19
     f9a:	27 95       	ror	r18
     f9c:	22 0f       	add	r18, r18
     f9e:	33 1f       	adc	r19, r19
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	84 70       	andi	r24, 0x04	; 4
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	95 95       	asr	r25
     fac:	87 95       	ror	r24
     fae:	28 0f       	add	r18, r24
     fb0:	39 1f       	adc	r19, r25
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	85 2f       	mov	r24, r21
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	82 70       	andi	r24, 0x02	; 2
     fbc:	90 70       	andi	r25, 0x00	; 0
     fbe:	95 95       	asr	r25
     fc0:	87 95       	ror	r24
     fc2:	28 0f       	add	r18, r24
     fc4:	39 1f       	adc	r19, r25
     fc6:	22 0f       	add	r18, r18
     fc8:	41 70       	andi	r20, 0x01	; 1
     fca:	24 0f       	add	r18, r20

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		currentSelector = getSelector();
     fcc:	20 93 e5 03 	sts	0x03E5, r18
		readAccelXYZ();
     fd0:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>

		if(delayCounter >= 20000) {
     fd4:	80 91 e3 03 	lds	r24, 0x03E3
     fd8:	90 91 e4 03 	lds	r25, 0x03E4
     fdc:	2e e4       	ldi	r18, 0x4E	; 78
     fde:	80 32       	cpi	r24, 0x20	; 32
     fe0:	92 07       	cpc	r25, r18
     fe2:	10 f0       	brcs	.+4      	; 0xfe8 <main+0x226>
			measBattery = 1;
     fe4:	f0 92 69 03 	sts	0x0369, r15
		}

		if(irEnabled) {
     fe8:	20 91 13 02 	lds	r18, 0x0213
     fec:	22 23       	and	r18, r18
     fee:	09 f0       	breq	.+2      	; 0xff2 <main+0x230>
     ff0:	f0 c1       	rjmp	.+992    	; 0x13d2 <main+0x610>


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
     ff2:	be e4       	ldi	r27, 0x4E	; 78
     ff4:	80 32       	cpi	r24, 0x20	; 32
     ff6:	9b 07       	cpc	r25, r27
     ff8:	80 f4       	brcc	.+32     	; 0x101a <main+0x258>
		}



		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {
     ffa:	0e 94 22 11 	call	0x2244	; 0x2244 <mirf_data_ready>
     ffe:	88 23       	and	r24, r24
    1000:	09 f0       	breq	.+2      	; 0x1004 <main+0x242>
    1002:	d7 c0       	rjmp	.+430    	; 0x11b2 <main+0x3f0>
#endif


		}

		if(currentSelector == 0) {	// no control
    1004:	80 91 e5 03 	lds	r24, 0x03E5
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <main+0x24c>
    100c:	61 cf       	rjmp	.-318    	; 0xed0 <main+0x10e>
				pwm_left_working = pwm_left_desired;	
				start_control = 0;
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	09 f4       	brne	.+2      	; 0x1014 <main+0x252>
    1012:	3d c3       	rjmp	.+1658   	; 0x168e <main+0x8cc>

			if(start_control && left_vel_changed && right_vel_changed) {
    1014:	20 91 c5 03 	lds	r18, 0x03C5
    1018:	85 cf       	rjmp	.-246    	; 0xf24 <main+0x162>

		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		//if(myTimeout) {
		if(delayCounter >= 20000) {
			delayCounter = 0;
    101a:	10 92 e4 03 	sts	0x03E4, r1
    101e:	10 92 e3 03 	sts	0x03E3, r1

			sendAdcValues = 0;
    1022:	10 92 c9 03 	sts	0x03C9, r1
			myTimeout = 0;
    1026:	10 92 e2 03 	sts	0x03E2, r1

			//PORTB &= ~(1 << 6);
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
    102a:	8a ea       	ldi	r24, 0xAA	; 170
    102c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(0xAA);
    1030:	8a ea       	ldi	r24, 0xAA	; 170
    1032:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			for(i=0; i<24; i++) {
    1036:	cc 24       	eor	r12, r12
    1038:	dd 24       	eor	r13, r13
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
    103a:	86 01       	movw	r16, r12
    103c:	00 0f       	add	r16, r16
    103e:	11 1f       	adc	r17, r17
    1040:	0d 5c       	subi	r16, 0xCD	; 205
    1042:	1c 4f       	sbci	r17, 0xFC	; 252
    1044:	f8 01       	movw	r30, r16
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
				usartTransmit((unsigned char)(proximityValue[i]>>8));
    104e:	d8 01       	movw	r26, r16
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	89 2f       	mov	r24, r25
    1056:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
			usartTransmit(0xAA);
			for(i=0; i<24; i++) {
    105a:	08 94       	sec
    105c:	c1 1c       	adc	r12, r1
    105e:	d1 1c       	adc	r13, r1
    1060:	b8 e1       	ldi	r27, 0x18	; 24
    1062:	cb 16       	cp	r12, r27
    1064:	d1 04       	cpc	r13, r1
    1066:	49 f7       	brne	.-46     	; 0x103a <main+0x278>
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
				usartTransmit((unsigned char)(proximityValue[i]>>8));
			}
			//usartTransmit(getselector());
			//usartTransmit(getselector());
			usartTransmit(last_right_current&0xFF);
    1068:	80 91 72 03 	lds	r24, 0x0372
    106c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(last_right_current>>8);
    1070:	80 91 73 03 	lds	r24, 0x0373
    1074:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(last_left_current&0xFF);
    1078:	80 91 70 03 	lds	r24, 0x0370
    107c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(last_left_current>>8);
    1080:	80 91 71 03 	lds	r24, 0x0371
    1084:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			

			// two possible cases cause the number of samples to be zero:
			// - when the pwm is at its maximum (thus no passive phase)
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
    1088:	80 91 7a 03 	lds	r24, 0x037A
    108c:	90 91 7b 03 	lds	r25, 0x037B
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	09 f4       	brne	.+2      	; 0x1096 <main+0x2d4>
    1094:	ff c1       	rjmp	.+1022   	; 0x1494 <main+0x6d2>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
    1096:	80 91 82 03 	lds	r24, 0x0382
    109a:	90 91 83 03 	lds	r25, 0x0383
    109e:	60 91 7a 03 	lds	r22, 0x037A
    10a2:	70 91 7b 03 	lds	r23, 0x037B
    10a6:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    10aa:	86 2f       	mov	r24, r22
    10ac:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
    10b0:	80 91 82 03 	lds	r24, 0x0382
    10b4:	90 91 83 03 	lds	r25, 0x0383
    10b8:	60 91 7a 03 	lds	r22, 0x037A
    10bc:	70 91 7b 03 	lds	r23, 0x037B
    10c0:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    10c4:	87 2f       	mov	r24, r23
    10c6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			//usartTransmit((unsigned char)(last_num_rvel_samples_avg>>8));

			//usartTransmit((unsigned char)(last_num_lvel_samples_avg&0xFF));
			//usartTransmit((unsigned char)(last_num_lvel_samples_avg>>8));
						
			if(last_num_lvel_samples_avg != 0) {
    10ca:	80 91 76 03 	lds	r24, 0x0376
    10ce:	90 91 77 03 	lds	r25, 0x0377
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <main+0x316>
    10d6:	d7 c1       	rjmp	.+942    	; 0x1486 <main+0x6c4>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
    10d8:	80 91 7e 03 	lds	r24, 0x037E
    10dc:	90 91 7f 03 	lds	r25, 0x037F
    10e0:	60 91 76 03 	lds	r22, 0x0376
    10e4:	70 91 77 03 	lds	r23, 0x0377
    10e8:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    10ec:	86 2f       	mov	r24, r22
    10ee:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
    10f2:	80 91 7e 03 	lds	r24, 0x037E
    10f6:	90 91 7f 03 	lds	r25, 0x037F
    10fa:	60 91 76 03 	lds	r22, 0x0376
    10fe:	70 91 77 03 	lds	r23, 0x0377
    1102:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    1106:	87 2f       	mov	r24, r23
    1108:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));
				//usartTransmit((unsigned char)((0)&0xFF));
				//usartTransmit((unsigned char)((0)>>8));
			}
			
			readAccelXYZ();
    110c:	0e 94 a9 03 	call	0x752	; 0x752 <readAccelXYZ>
			usartTransmit(accX&0xFF);
    1110:	80 91 ce 03 	lds	r24, 0x03CE
    1114:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(accX>>8);
    1118:	80 91 cf 03 	lds	r24, 0x03CF
    111c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(accY&0xFF);
    1120:	80 91 d0 03 	lds	r24, 0x03D0
    1124:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(accY>>8);
    1128:	80 91 d1 03 	lds	r24, 0x03D1
    112c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(accZ&0xFF);
    1130:	80 91 d2 03 	lds	r24, 0x03D2
    1134:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(accZ>>8);	
    1138:	80 91 d3 03 	lds	r24, 0x03D3
    113c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			//PORTB &= ~(1 << 6);
			//computeAngle();
			//PORTB |= (1 << 6);
			usartTransmit(currentAngle&0xFF);
    1140:	80 91 e0 03 	lds	r24, 0x03E0
    1144:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(currentAngle>>8);		
    1148:	80 91 e1 03 	lds	r24, 0x03E1
    114c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			
			usartTransmit(batteryLevel&0xFF);
    1150:	80 91 67 03 	lds	r24, 0x0367
    1154:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			usartTransmit(batteryLevel>>8);	
    1158:	80 91 68 03 	lds	r24, 0x0368
    115c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			
			usartTransmit(ir_move);	
    1160:	80 91 ca 03 	lds	r24, 0x03CA
    1164:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			
			usartTransmit(BUTTON0);
    1168:	80 91 03 01 	lds	r24, 0x0103
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	80 72       	andi	r24, 0x20	; 32
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	95 95       	asr	r25
    1174:	87 95       	ror	r24
    1176:	95 95       	asr	r25
    1178:	87 95       	ror	r24
    117a:	95 95       	asr	r25
    117c:	87 95       	ror	r24
    117e:	95 95       	asr	r25
    1180:	87 95       	ror	r24
    1182:	95 95       	asr	r25
    1184:	87 95       	ror	r24
    1186:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
			
			usartTransmit(CHARGE_ON);								
    118a:	80 91 03 01 	lds	r24, 0x0103
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	80 71       	andi	r24, 0x10	; 16
    1192:	90 70       	andi	r25, 0x00	; 0
    1194:	95 95       	asr	r25
    1196:	87 95       	ror	r24
    1198:	95 95       	asr	r25
    119a:	87 95       	ror	r24
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	95 95       	asr	r25
    11a2:	87 95       	ror	r24
    11a4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
		}



		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {
    11a8:	0e 94 22 11 	call	0x2244	; 0x2244 <mirf_data_ready>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <main+0x3f0>
    11b0:	29 cf       	rjmp	.-430    	; 0x1004 <main+0x242>

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    11b2:	87 e0       	ldi	r24, 0x07	; 7
    11b4:	60 e7       	ldi	r22, 0x70	; 112
    11b6:	0e 94 65 11 	call	0x22ca	; 0x22ca <mirf_config_register>

			mirf_get_data(rfData);
    11ba:	8d ef       	ldi	r24, 0xFD	; 253
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	0e 94 4d 11 	call	0x229a	; 0x229a <mirf_get_data>
			flush_rx_fifo();
    11c2:	0e 94 47 11 	call	0x228e	; 0x228e <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && (rfData[3]==0b00001000 || rfData[3]==0b00011000) && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    11c6:	90 91 01 04 	lds	r25, 0x0401
    11ca:	89 2f       	mov	r24, r25
    11cc:	8f 77       	andi	r24, 0x7F	; 127
    11ce:	80 93 c7 03 	sts	0x03C7, r24
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    11d2:	60 91 02 04 	lds	r22, 0x0402
    11d6:	76 2f       	mov	r23, r22
    11d8:	7f 77       	andi	r23, 0x7F	; 127
    11da:	70 93 c6 03 	sts	0x03C6, r23
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    11de:	97 fd       	sbrc	r25, 7
    11e0:	09 c3       	rjmp	.+1554   	; 0x17f4 <main+0xa32>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	90 95       	com	r25
    11ee:	81 95       	neg	r24
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	9c 01       	movw	r18, r24
    11f4:	44 27       	eor	r20, r20
    11f6:	37 fd       	sbrc	r19, 7
    11f8:	40 95       	com	r20
    11fa:	54 2f       	mov	r21, r20
    11fc:	20 93 90 03 	sts	0x0390, r18
    1200:	30 93 91 03 	sts	0x0391, r19
    1204:	40 93 92 03 	sts	0x0392, r20
    1208:	50 93 93 03 	sts	0x0393, r21
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    120c:	67 fd       	sbrc	r22, 7
    120e:	06 c3       	rjmp	.+1548   	; 0x181c <main+0xa5a>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    1210:	87 2f       	mov	r24, r23
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	90 95       	com	r25
    121e:	81 95       	neg	r24
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	aa 27       	eor	r26, r26
    1224:	97 fd       	sbrc	r25, 7
    1226:	a0 95       	com	r26
    1228:	ba 2f       	mov	r27, r26
    122a:	80 93 94 03 	sts	0x0394, r24
    122e:	90 93 95 03 	sts	0x0395, r25
    1232:	a0 93 96 03 	sts	0x0396, r26
    1236:	b0 93 97 03 	sts	0x0397, r27
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    123a:	24 33       	cpi	r18, 0x34	; 52
    123c:	e1 e0       	ldi	r30, 0x01	; 1
    123e:	3e 07       	cpc	r19, r30
    1240:	e0 e0       	ldi	r30, 0x00	; 0
    1242:	4e 07       	cpc	r20, r30
    1244:	e0 e0       	ldi	r30, 0x00	; 0
    1246:	5e 07       	cpc	r21, r30
    1248:	64 f0       	brlt	.+24     	; 0x1262 <main+0x4a0>
    124a:	40 92 90 03 	sts	0x0390, r4
    124e:	50 92 91 03 	sts	0x0391, r5
    1252:	60 92 92 03 	sts	0x0392, r6
    1256:	70 92 93 03 	sts	0x0393, r7
    125a:	23 e3       	ldi	r18, 0x33	; 51
    125c:	31 e0       	ldi	r19, 0x01	; 1
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1262:	84 33       	cpi	r24, 0x34	; 52
    1264:	f1 e0       	ldi	r31, 0x01	; 1
    1266:	9f 07       	cpc	r25, r31
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	af 07       	cpc	r26, r31
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	bf 07       	cpc	r27, r31
    1270:	64 f0       	brlt	.+24     	; 0x128a <main+0x4c8>
    1272:	40 92 94 03 	sts	0x0394, r4
    1276:	50 92 95 03 	sts	0x0395, r5
    127a:	60 92 96 03 	sts	0x0396, r6
    127e:	70 92 97 03 	sts	0x0397, r7
    1282:	83 e3       	ldi	r24, 0x33	; 51
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	a0 e0       	ldi	r26, 0x00	; 0
    1288:	b0 e0       	ldi	r27, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    128a:	2d 3c       	cpi	r18, 0xCD	; 205
    128c:	6e ef       	ldi	r22, 0xFE	; 254
    128e:	36 07       	cpc	r19, r22
    1290:	6f ef       	ldi	r22, 0xFF	; 255
    1292:	46 07       	cpc	r20, r22
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	56 07       	cpc	r21, r22
    1298:	44 f4       	brge	.+16     	; 0x12aa <main+0x4e8>
    129a:	80 92 90 03 	sts	0x0390, r8
    129e:	90 92 91 03 	sts	0x0391, r9
    12a2:	a0 92 92 03 	sts	0x0392, r10
    12a6:	b0 92 93 03 	sts	0x0393, r11
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    12aa:	8d 3c       	cpi	r24, 0xCD	; 205
    12ac:	ee ef       	ldi	r30, 0xFE	; 254
    12ae:	9e 07       	cpc	r25, r30
    12b0:	ef ef       	ldi	r30, 0xFF	; 255
    12b2:	ae 07       	cpc	r26, r30
    12b4:	ef ef       	ldi	r30, 0xFF	; 255
    12b6:	be 07       	cpc	r27, r30
    12b8:	44 f4       	brge	.+16     	; 0x12ca <main+0x508>
    12ba:	80 92 94 03 	sts	0x0394, r8
    12be:	90 92 95 03 	sts	0x0395, r9
    12c2:	a0 92 96 03 	sts	0x0396, r10
    12c6:	b0 92 97 03 	sts	0x0397, r11
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    12ca:	20 91 fd 03 	lds	r18, 0x03FD
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	30 93 f8 03 	sts	0x03F8, r19
    12d4:	20 93 f7 03 	sts	0x03F7, r18
    12d8:	e0 91 fe 03 	lds	r30, 0x03FE
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	f0 93 fa 03 	sts	0x03FA, r31
    12e2:	e0 93 f9 03 	sts	0x03F9, r30
    12e6:	00 91 ff 03 	lds	r16, 0x03FF
    12ea:	10 e0       	ldi	r17, 0x00	; 0
    12ec:	10 93 fc 03 	sts	0x03FC, r17
    12f0:	00 93 fb 03 	sts	0x03FB, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    12f4:	92 2f       	mov	r25, r18
    12f6:	88 27       	eor	r24, r24
    12f8:	82 1b       	sub	r24, r18
    12fa:	93 0b       	sbc	r25, r19
    12fc:	be 01       	movw	r22, r28
    12fe:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    1302:	26 2f       	mov	r18, r22
    1304:	20 95       	com	r18
    1306:	20 93 0e 02 	sts	0x020E, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    130a:	9e 2f       	mov	r25, r30
    130c:	88 27       	eor	r24, r24
    130e:	8e 1b       	sub	r24, r30
    1310:	9f 0b       	sbc	r25, r31
    1312:	be 01       	movw	r22, r28
    1314:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    1318:	60 95       	com	r22
    131a:	60 93 10 02 	sts	0x0210, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    131e:	90 2f       	mov	r25, r16
    1320:	88 27       	eor	r24, r24
    1322:	80 1b       	sub	r24, r16
    1324:	91 0b       	sbc	r25, r17
    1326:	be 01       	movw	r22, r28
    1328:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    132c:	60 95       	com	r22
    132e:	60 93 0f 02 	sts	0x020F, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    1332:	22 23       	and	r18, r18
    1334:	09 f4       	brne	.+2      	; 0x1338 <main+0x576>
    1336:	ff c1       	rjmp	.+1022   	; 0x1736 <main+0x974>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    1338:	80 91 80 00 	lds	r24, 0x0080
    133c:	80 68       	ori	r24, 0x80	; 128
    133e:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    1342:	82 2f       	mov	r24, r18
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	90 93 89 00 	sts	0x0089, r25
    134a:	80 93 88 00 	sts	0x0088, r24
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    134e:	80 91 0f 02 	lds	r24, 0x020F

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    1352:	88 23       	and	r24, r24
    1354:	09 f4       	brne	.+2      	; 0x1358 <main+0x596>
    1356:	e8 c1       	rjmp	.+976    	; 0x1728 <main+0x966>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    1358:	90 91 80 00 	lds	r25, 0x0080
    135c:	90 62       	ori	r25, 0x20	; 32
    135e:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	90 93 8b 00 	sts	0x008B, r25
    1368:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    136c:	80 91 10 02 	lds	r24, 0x0210

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1370:	88 23       	and	r24, r24
    1372:	09 f4       	brne	.+2      	; 0x1376 <main+0x5b4>
    1374:	cb c1       	rjmp	.+918    	; 0x170c <main+0x94a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    1376:	90 91 80 00 	lds	r25, 0x0080
    137a:	98 60       	ori	r25, 0x08	; 8
    137c:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	90 93 8d 00 	sts	0x008D, r25
    1386:	80 93 8c 00 	sts	0x008C, r24
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if(rfData[3]== 1) {			// turn on one IR
    138a:	80 91 00 04 	lds	r24, 0x0400
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	09 f4       	brne	.+2      	; 0x1394 <main+0x5d2>
    1392:	c7 c1       	rjmp	.+910    	; 0x1722 <main+0x960>
				//LED_IR1 = 0;
				//LED_IR2 = 1;
				LED_IR1_LOW;
				LED_IR2_HIGH;
			} else if(rfData[3]==2) {	// turn on two IRs
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	09 f4       	brne	.+2      	; 0x139a <main+0x5d8>
    1398:	70 c2       	rjmp	.+1248   	; 0x187a <main+0xab8>
				//LED_IR1 = 1;
				//LED_IR2 = 0;
				LED_IR1_HIGH;
				LED_IR2_LOW;
			} else if(rfData[3]==3) {	// turn on all three IRs
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	09 f4       	brne	.+2      	; 0x13a0 <main+0x5de>
    139e:	eb c3       	rjmp	.+2006   	; 0x1b76 <main+0xdb4>
				LED_IR1_LOW;
				LED_IR2_LOW;
			} else {					// turn off IRs
				//LED_IR1 = 1;
				//LED_IR2 = 1;
				LED_IR1_HIGH;
    13a0:	44 9a       	sbi	0x08, 4	; 8
				LED_IR2_HIGH;
    13a2:	45 9a       	sbi	0x08, 5	; 8
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    13a4:	82 ff       	sbrs	r24, 2
    13a6:	7d c0       	rjmp	.+250    	; 0x14a2 <main+0x6e0>
				irEnabled = 1;
    13a8:	f0 92 13 02 	sts	0x0213, r15
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    13ac:	80 91 0d 02 	lds	r24, 0x020D
    13b0:	80 93 e7 03 	sts	0x03E7, r24

			switch(packetId) {
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	09 f4       	brne	.+2      	; 0x13ba <main+0x5f8>
    13b8:	7d c0       	rjmp	.+250    	; 0x14b4 <main+0x6f2>
    13ba:	85 30       	cpi	r24, 0x05	; 5
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <main+0x5fe>
    13be:	c2 c1       	rjmp	.+900    	; 0x1744 <main+0x982>
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <main+0x604>
    13c4:	b8 c2       	rjmp	.+1392   	; 0x1936 <main+0xb74>
					break;											
								

			}

			writeAckPayload(ackPayload, 16);
    13c6:	87 ee       	ldi	r24, 0xE7	; 231
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	60 e1       	ldi	r22, 0x10	; 16
    13cc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <writeAckPayload>
    13d0:	19 ce       	rjmp	.-974    	; 0x1004 <main+0x242>
			measBattery = 1;
		}

		if(irEnabled) {

			ir_move = e_get_data();
    13d2:	0e 94 2a 14 	call	0x2854	; 0x2854 <e_get_data>
    13d6:	80 93 ca 03 	sts	0x03CA, r24

			if(command_received) {
    13da:	90 91 cb 03 	lds	r25, 0x03CB
    13de:	99 23       	and	r25, r25
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <main+0x622>
    13e2:	4c c0       	rjmp	.+152    	; 0x147c <main+0x6ba>

				command_received = 0;
    13e4:	10 92 cb 03 	sts	0x03CB, r1

				//usartTransmit(ir_move);

				switch(ir_move) {
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	09 f4       	brne	.+2      	; 0x13ee <main+0x62c>
    13ec:	a2 c4       	rjmp	.+2372   	; 0x1d32 <main+0xf70>
    13ee:	85 30       	cpi	r24, 0x05	; 5
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <main+0x632>
    13f2:	60 c3       	rjmp	.+1728   	; 0x1ab4 <main+0xcf2>
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <main+0x638>
    13f8:	63 c5       	rjmp	.+2758   	; 0x1ec0 <main+0x10fe>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <main+0x63e>
    13fe:	3a c4       	rjmp	.+2164   	; 0x1c74 <main+0xeb2>
						pwm_right_desired -= STEP_MOTORS;
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
						break;

	               	case 0:	// colors
						colorState = (colorState+1)%5;
    1400:	80 91 cc 03 	lds	r24, 0x03CC
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	0e 94 3f 20 	call	0x407e	; 0x407e <__divmodhi4>
    1410:	80 93 cc 03 	sts	0x03CC, r24

						if(colorState==0) {		// turn on blue
    1414:	88 23       	and	r24, r24
    1416:	09 f0       	breq	.+2      	; 0x141a <main+0x658>
    1418:	e8 c5       	rjmp	.+3024   	; 0x1fea <main+0x1228>
							LED_IR1_HIGH;
    141a:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
    141c:	45 9a       	sbi	0x08, 5	; 8
							pwm_blue = 0;
    141e:	10 92 10 02 	sts	0x0210, r1
							pwm_green = MAX_LEDS_PWM;
    1422:	e0 92 0f 02 	sts	0x020F, r14
							pwm_red = MAX_LEDS_PWM;					
    1426:	e0 92 0e 02 	sts	0x020E, r14

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    142a:	80 91 80 00 	lds	r24, 0x0080
    142e:	80 68       	ori	r24, 0x80	; 128
    1430:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    1434:	af ef       	ldi	r26, 0xFF	; 255
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	b0 93 89 00 	sts	0x0089, r27
    143c:	a0 93 88 00 	sts	0x0088, r26
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
    1440:	80 91 0f 02 	lds	r24, 0x020F

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <main+0x688>
    1448:	de c5       	rjmp	.+3004   	; 0x2006 <main+0x1244>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    144a:	90 91 80 00 	lds	r25, 0x0080
    144e:	90 62       	ori	r25, 0x20	; 32
    1450:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	90 93 8b 00 	sts	0x008B, r25
    145a:	80 93 8a 00 	sts	0x008A, r24
							pwm_red = MAX_LEDS_PWM;
						}					

						updateRedLed(pwm_red);	
						updateGreenLed(pwm_green);
						updateBlueLed(pwm_blue);
    145e:	80 91 10 02 	lds	r24, 0x0210

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <main+0x6a6>
    1466:	d6 c5       	rjmp	.+2988   	; 0x2014 <main+0x1252>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    1468:	90 91 80 00 	lds	r25, 0x0080
    146c:	98 60       	ori	r25, 0x08	; 8
    146e:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	90 93 8d 00 	sts	0x008D, r25
    1478:	80 93 8c 00 	sts	0x008C, r24
    147c:	80 91 e3 03 	lds	r24, 0x03E3
    1480:	90 91 e4 03 	lds	r25, 0x03E4
    1484:	b6 cd       	rjmp	.-1172   	; 0xff2 <main+0x230>
						
			if(last_num_lvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
    1492:	3c ce       	rjmp	.-904    	; 0x110c <main+0x34a>
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));	// probably we don't use the pwm to its maximum, so
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));	// if the number of samples is 0 it means that the 
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <usartTransmit>
    14a0:	14 ce       	rjmp	.-984    	; 0x10ca <main+0x308>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    14a2:	10 92 13 02 	sts	0x0213, r1
			//writeAckPayload(&packetId, 1);
			//for(i=0; i<12; i++) {
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;
    14a6:	80 91 0d 02 	lds	r24, 0x020D
    14aa:	80 93 e7 03 	sts	0x03E7, r24

			switch(packetId) {
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <main+0x6f2>
    14b2:	83 cf       	rjmp	.-250    	; 0x13ba <main+0x5f8>
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
					packetId = 4;
					break;

				case 4:
					currentProxValue = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
    14b4:	20 91 43 03 	lds	r18, 0x0343
    14b8:	30 91 44 03 	lds	r19, 0x0344
    14bc:	80 91 45 03 	lds	r24, 0x0345
    14c0:	90 91 46 03 	lds	r25, 0x0346
    14c4:	28 1b       	sub	r18, r24
    14c6:	39 0b       	sbc	r19, r25
    14c8:	30 93 6b 03 	sts	0x036B, r19
    14cc:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    14d0:	37 fd       	sbrc	r19, 7
    14d2:	13 c4       	rjmp	.+2086   	; 0x1cfa <main+0xf38>
    14d4:	92 2f       	mov	r25, r18
    14d6:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[1] = currentProxValue&0xFF;
    14d8:	90 93 e8 03 	sts	0x03E8, r25
					ackPayload[2] = currentProxValue>>8;
    14dc:	80 93 e9 03 	sts	0x03E9, r24

					currentProxValue = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
    14e0:	20 91 53 03 	lds	r18, 0x0353
    14e4:	30 91 54 03 	lds	r19, 0x0354
    14e8:	80 91 55 03 	lds	r24, 0x0355
    14ec:	90 91 56 03 	lds	r25, 0x0356
    14f0:	28 1b       	sub	r18, r24
    14f2:	39 0b       	sbc	r19, r25
    14f4:	30 93 6b 03 	sts	0x036B, r19
    14f8:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    14fc:	37 fd       	sbrc	r19, 7
    14fe:	fa c3       	rjmp	.+2036   	; 0x1cf4 <main+0xf32>
    1500:	92 2f       	mov	r25, r18
    1502:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[3] = currentProxValue&0xFF;
    1504:	90 93 ea 03 	sts	0x03EA, r25
					ackPayload[4] = currentProxValue>>8;
    1508:	80 93 eb 03 	sts	0x03EB, r24

					currentProxValue = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
    150c:	20 91 57 03 	lds	r18, 0x0357
    1510:	30 91 58 03 	lds	r19, 0x0358
    1514:	80 91 59 03 	lds	r24, 0x0359
    1518:	90 91 5a 03 	lds	r25, 0x035A
    151c:	28 1b       	sub	r18, r24
    151e:	39 0b       	sbc	r19, r25
    1520:	30 93 6b 03 	sts	0x036B, r19
    1524:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1528:	37 fd       	sbrc	r19, 7
    152a:	e1 c3       	rjmp	.+1986   	; 0x1cee <main+0xf2c>
    152c:	92 2f       	mov	r25, r18
    152e:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[5] = currentProxValue&0xFF;
    1530:	90 93 ec 03 	sts	0x03EC, r25
					ackPayload[6] = currentProxValue>>8;
    1534:	80 93 ed 03 	sts	0x03ED, r24

					currentProxValue = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
    1538:	20 91 5b 03 	lds	r18, 0x035B
    153c:	30 91 5c 03 	lds	r19, 0x035C
    1540:	80 91 5d 03 	lds	r24, 0x035D
    1544:	90 91 5e 03 	lds	r25, 0x035E
    1548:	28 1b       	sub	r18, r24
    154a:	39 0b       	sbc	r19, r25
    154c:	30 93 6b 03 	sts	0x036B, r19
    1550:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1554:	37 fd       	sbrc	r19, 7
    1556:	c8 c3       	rjmp	.+1936   	; 0x1ce8 <main+0xf26>
    1558:	92 2f       	mov	r25, r18
    155a:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[7] = currentProxValue&0xFF;
    155c:	90 93 ee 03 	sts	0x03EE, r25
					ackPayload[8] = currentProxValue>>8;
    1560:	80 93 ef 03 	sts	0x03EF, r24

					currentProxValue = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
    1564:	20 91 5f 03 	lds	r18, 0x035F
    1568:	30 91 60 03 	lds	r19, 0x0360
    156c:	80 91 61 03 	lds	r24, 0x0361
    1570:	90 91 62 03 	lds	r25, 0x0362
    1574:	28 1b       	sub	r18, r24
    1576:	39 0b       	sbc	r19, r25
    1578:	30 93 6b 03 	sts	0x036B, r19
    157c:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1580:	37 fd       	sbrc	r19, 7
    1582:	ab c3       	rjmp	.+1878   	; 0x1cda <main+0xf18>
    1584:	92 2f       	mov	r25, r18
    1586:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[9] = currentProxValue&0xFF;
    1588:	90 93 f0 03 	sts	0x03F0, r25
					ackPayload[10] = currentProxValue>>8;
    158c:	80 93 f1 03 	sts	0x03F1, r24

					ackPayload[11] = accX&0xFF;
    1590:	90 91 ce 03 	lds	r25, 0x03CE
    1594:	80 91 cf 03 	lds	r24, 0x03CF
    1598:	90 93 f2 03 	sts	0x03F2, r25
					ackPayload[12] = accX>>8;
    159c:	80 93 f3 03 	sts	0x03F3, r24
					ackPayload[13] = accY&0xFF;
    15a0:	90 91 d0 03 	lds	r25, 0x03D0
    15a4:	80 91 d1 03 	lds	r24, 0x03D1
    15a8:	90 93 f4 03 	sts	0x03F4, r25
					ackPayload[14] = accY>>8;
    15ac:	80 93 f5 03 	sts	0x03F5, r24
					ackPayload[15] = ir_move;			
    15b0:	80 91 ca 03 	lds	r24, 0x03CA
    15b4:	80 93 f6 03 	sts	0x03F6, r24
					packetId = 5;
    15b8:	30 92 0d 02 	sts	0x020D, r3
					break;
    15bc:	04 cf       	rjmp	.-504    	; 0x13c6 <main+0x604>
			compute_right_vel = 0;
		}

		if(update_pwm) {

			update_pwm = 0;
    15be:	10 92 c5 03 	sts	0x03C5, r1
			pwm_left = pwm_left_working;
    15c2:	20 91 c1 03 	lds	r18, 0x03C1
    15c6:	30 91 c2 03 	lds	r19, 0x03C2
    15ca:	40 91 c3 03 	lds	r20, 0x03C3
    15ce:	50 91 c4 03 	lds	r21, 0x03C4
    15d2:	20 93 8c 03 	sts	0x038C, r18
    15d6:	30 93 8d 03 	sts	0x038D, r19
    15da:	40 93 8e 03 	sts	0x038E, r20
    15de:	50 93 8f 03 	sts	0x038F, r21
			pwm_right = pwm_right_working;
    15e2:	80 91 bd 03 	lds	r24, 0x03BD
    15e6:	90 91 be 03 	lds	r25, 0x03BE
    15ea:	a0 91 bf 03 	lds	r26, 0x03BF
    15ee:	b0 91 c0 03 	lds	r27, 0x03C0
    15f2:	80 93 88 03 	sts	0x0388, r24
    15f6:	90 93 89 03 	sts	0x0389, r25
    15fa:	a0 93 8a 03 	sts	0x038A, r26
    15fe:	b0 93 8b 03 	sts	0x038B, r27

			if(pwm_right >= 0) {
    1602:	b7 fd       	sbrc	r27, 7
    1604:	dd c2       	rjmp	.+1466   	; 0x1bc0 <main+0xdfe>
				OCR3A = (int)pwm_right;
    1606:	90 93 99 00 	sts	0x0099, r25
    160a:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    160e:	57 fd       	sbrc	r21, 7
    1610:	b5 c2       	rjmp	.+1386   	; 0x1b7c <main+0xdba>
				OCR4A = pwm_left;
    1612:	30 93 a9 00 	sts	0x00A9, r19
    1616:	20 93 a8 00 	sts	0x00A8, r18
			} else {
				OCR4B = -pwm_left;
			}

			if(pwm_left == 0) {
    161a:	21 15       	cp	r18, r1
    161c:	31 05       	cpc	r19, r1
    161e:	41 05       	cpc	r20, r1
    1620:	51 05       	cpc	r21, r1
    1622:	09 f0       	breq	.+2      	; 0x1626 <main+0x864>
    1624:	d5 c2       	rjmp	.+1450   	; 0x1bd0 <main+0xe0e>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    1626:	80 91 a0 00 	lds	r24, 0x00A0
    162a:	8f 75       	andi	r24, 0x5F	; 95
    162c:	80 93 a0 00 	sts	0x00A0, r24
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    1630:	80 91 02 01 	lds	r24, 0x0102
    1634:	87 7e       	andi	r24, 0xE7	; 231
    1636:	80 93 02 01 	sts	0x0102, r24
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    163a:	80 91 72 00 	lds	r24, 0x0072
    163e:	89 7f       	andi	r24, 0xF9	; 249
    1640:	80 93 72 00 	sts	0x0072, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    1644:	80 91 72 00 	lds	r24, 0x0072
    1648:	82 60       	ori	r24, 0x02	; 2
    164a:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
				TCCR4A |= (1 << COM4B1);		// enable OCB
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
			}

			if(pwm_right == 0) {
    164e:	80 91 88 03 	lds	r24, 0x0388
    1652:	90 91 89 03 	lds	r25, 0x0389
    1656:	a0 91 8a 03 	lds	r26, 0x038A
    165a:	b0 91 8b 03 	lds	r27, 0x038B
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	a1 05       	cpc	r26, r1
    1662:	b1 05       	cpc	r27, r1
    1664:	09 f0       	breq	.+2      	; 0x1668 <main+0x8a6>
    1666:	ed c0       	rjmp	.+474    	; 0x1842 <main+0xa80>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    1668:	80 91 90 00 	lds	r24, 0x0090
    166c:	8f 75       	andi	r24, 0x5F	; 95
    166e:	80 93 90 00 	sts	0x0090, r24
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    1672:	8e b1       	in	r24, 0x0e	; 14
    1674:	87 7e       	andi	r24, 0xE7	; 231
    1676:	8e b9       	out	0x0e, r24	; 14
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    1678:	80 91 71 00 	lds	r24, 0x0071
    167c:	89 7f       	andi	r24, 0xF9	; 249
    167e:	80 93 71 00 	sts	0x0071, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
    1682:	80 91 71 00 	lds	r24, 0x0071
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	80 93 71 00 	sts	0x0071, r24
    168c:	7a cc       	rjmp	.-1804   	; 0xf82 <main+0x1c0>
				update_pwm = 1;
			}

		} else if(currentSelector == 2) {		// speed control

			if(start_control && left_vel_changed && right_vel_changed) {
    168e:	80 91 ba 03 	lds	r24, 0x03BA
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <main+0x8d6>
    1696:	be cc       	rjmp	.-1668   	; 0x1014 <main+0x252>
    1698:	80 91 bb 03 	lds	r24, 0x03BB
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <main+0x8e0>
    16a0:	b9 cc       	rjmp	.-1678   	; 0x1014 <main+0x252>
    16a2:	80 91 bc 03 	lds	r24, 0x03BC
    16a6:	88 23       	and	r24, r24
    16a8:	09 f4       	brne	.+2      	; 0x16ac <main+0x8ea>
    16aa:	b4 cc       	rjmp	.-1688   	; 0x1014 <main+0x252>
				pwm_right_working = pwm_right_desired;
    16ac:	80 91 90 03 	lds	r24, 0x0390
    16b0:	90 91 91 03 	lds	r25, 0x0391
    16b4:	a0 91 92 03 	lds	r26, 0x0392
    16b8:	b0 91 93 03 	lds	r27, 0x0393
    16bc:	80 93 bd 03 	sts	0x03BD, r24
    16c0:	90 93 be 03 	sts	0x03BE, r25
    16c4:	a0 93 bf 03 	sts	0x03BF, r26
    16c8:	b0 93 c0 03 	sts	0x03C0, r27
				pwm_left_working = pwm_left_desired;
    16cc:	80 91 94 03 	lds	r24, 0x0394
    16d0:	90 91 95 03 	lds	r25, 0x0395
    16d4:	a0 91 96 03 	lds	r26, 0x0396
    16d8:	b0 91 97 03 	lds	r27, 0x0397
    16dc:	80 93 c1 03 	sts	0x03C1, r24
    16e0:	90 93 c2 03 	sts	0x03C2, r25
    16e4:	a0 93 c3 03 	sts	0x03C3, r26
    16e8:	b0 93 c4 03 	sts	0x03C4, r27
				start_control = 0;
    16ec:	10 92 ba 03 	sts	0x03BA, r1
				left_vel_changed = 0;
    16f0:	10 92 bb 03 	sts	0x03BB, r1
				right_vel_changed = 0;
    16f4:	10 92 bc 03 	sts	0x03BC, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					//PORTB &= ~(1 << 5);
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    16f8:	81 ec       	ldi	r24, 0xC1	; 193
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	6d eb       	ldi	r22, 0xBD	; 189
    16fe:	73 e0       	ldi	r23, 0x03	; 3
    1700:	0e 94 22 15 	call	0x2a44	; 0x2a44 <start_orizzontal_speed_control>
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    1704:	f0 92 c5 03 	sts	0x03C5, r15
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	0c cc       	rjmp	.-2024   	; 0xf24 <main+0x162>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    170c:	80 91 80 00 	lds	r24, 0x0080
    1710:	87 7f       	andi	r24, 0xF7	; 247
    1712:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    1716:	2f 98       	cbi	0x05, 7	; 5
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
			

			if(rfData[3]== 1) {			// turn on one IR
    1718:	80 91 00 04 	lds	r24, 0x0400
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	09 f0       	breq	.+2      	; 0x1722 <main+0x960>
    1720:	39 ce       	rjmp	.-910    	; 0x1394 <main+0x5d2>
				//LED_IR1 = 0;
				//LED_IR2 = 1;
				LED_IR1_LOW;
    1722:	44 98       	cbi	0x08, 4	; 8
				LED_IR2_HIGH;
    1724:	45 9a       	sbi	0x08, 5	; 8
    1726:	3e ce       	rjmp	.-900    	; 0x13a4 <main+0x5e2>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1728:	80 91 80 00 	lds	r24, 0x0080
    172c:	8f 7d       	andi	r24, 0xDF	; 223
    172e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    1732:	2e 98       	cbi	0x05, 6	; 5
    1734:	1b ce       	rjmp	.-970    	; 0x136c <main+0x5aa>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    1736:	80 91 80 00 	lds	r24, 0x0080
    173a:	8f 77       	andi	r24, 0x7F	; 127
    173c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    1740:	2d 98       	cbi	0x05, 5	; 5
    1742:	05 ce       	rjmp	.-1014   	; 0x134e <main+0x58c>
			//	ackPayload[i] = (proximityValue[(i*2)+1]>>2);
			//}

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    1744:	85 30       	cpi	r24, 0x05	; 5
    1746:	09 f4       	brne	.+2      	; 0x174a <main+0x988>
    1748:	9b c0       	rjmp	.+310    	; 0x1880 <main+0xabe>
    174a:	86 30       	cpi	r24, 0x06	; 6
    174c:	09 f0       	breq	.+2      	; 0x1750 <main+0x98e>
    174e:	3b ce       	rjmp	.-906    	; 0x13c6 <main+0x604>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;	
					
				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    1750:	80 91 43 03 	lds	r24, 0x0343
    1754:	90 91 44 03 	lds	r25, 0x0344
    1758:	80 93 e8 03 	sts	0x03E8, r24
					ackPayload[2] = proximityValue[8]>>8;
    175c:	80 91 43 03 	lds	r24, 0x0343
    1760:	90 91 44 03 	lds	r25, 0x0344
    1764:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    1768:	80 91 53 03 	lds	r24, 0x0353
    176c:	90 91 54 03 	lds	r25, 0x0354
    1770:	80 93 ea 03 	sts	0x03EA, r24
					ackPayload[4] = proximityValue[16]>>8;
    1774:	80 91 53 03 	lds	r24, 0x0353
    1778:	90 91 54 03 	lds	r25, 0x0354
    177c:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    1780:	80 91 57 03 	lds	r24, 0x0357
    1784:	90 91 58 03 	lds	r25, 0x0358
    1788:	80 93 ec 03 	sts	0x03EC, r24
					ackPayload[6] = proximityValue[18]>>8;
    178c:	80 91 57 03 	lds	r24, 0x0357
    1790:	90 91 58 03 	lds	r25, 0x0358
    1794:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    1798:	80 91 5b 03 	lds	r24, 0x035B
    179c:	90 91 5c 03 	lds	r25, 0x035C
    17a0:	80 93 ee 03 	sts	0x03EE, r24
					ackPayload[8] = proximityValue[20]>>8;
    17a4:	80 91 5b 03 	lds	r24, 0x035B
    17a8:	90 91 5c 03 	lds	r25, 0x035C
    17ac:	90 93 ef 03 	sts	0x03EF, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    17b0:	80 91 5f 03 	lds	r24, 0x035F
    17b4:	90 91 60 03 	lds	r25, 0x0360
    17b8:	80 93 f0 03 	sts	0x03F0, r24
					ackPayload[10] = proximityValue[22]>>8;
    17bc:	80 91 5f 03 	lds	r24, 0x035F
    17c0:	90 91 60 03 	lds	r25, 0x0360
    17c4:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[11] = accZ&0xFF;
    17c8:	90 91 d2 03 	lds	r25, 0x03D2
    17cc:	80 91 d3 03 	lds	r24, 0x03D3
    17d0:	90 93 f2 03 	sts	0x03F2, r25
					ackPayload[12] = accZ>>8;
    17d4:	80 93 f3 03 	sts	0x03F3, r24
					ackPayload[13] = batteryLevel&0xFF;
    17d8:	90 91 67 03 	lds	r25, 0x0367
    17dc:	80 91 68 03 	lds	r24, 0x0368
    17e0:	90 93 f4 03 	sts	0x03F4, r25
					ackPayload[14] = batteryLevel>>8;
    17e4:	80 93 f5 03 	sts	0x03F5, r24
					ackPayload[15] = 0;				
    17e8:	10 92 f6 03 	sts	0x03F6, r1
					packetId = 3;
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	80 93 0d 02 	sts	0x020D, r24
					break;											
    17f2:	e9 cd       	rjmp	.-1070   	; 0x13c6 <main+0x604>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	44 27       	eor	r20, r20
    1802:	37 fd       	sbrc	r19, 7
    1804:	40 95       	com	r20
    1806:	54 2f       	mov	r21, r20
    1808:	20 93 90 03 	sts	0x0390, r18
    180c:	30 93 91 03 	sts	0x0391, r19
    1810:	40 93 92 03 	sts	0x0392, r20
    1814:	50 93 93 03 	sts	0x0393, r21
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1818:	67 ff       	sbrs	r22, 7
    181a:	fa cc       	rjmp	.-1548   	; 0x1210 <main+0x44e>
				pwm_left_desired = speedl<<2;		
    181c:	87 2f       	mov	r24, r23
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	aa 27       	eor	r26, r26
    182a:	97 fd       	sbrc	r25, 7
    182c:	a0 95       	com	r26
    182e:	ba 2f       	mov	r27, r26
    1830:	80 93 94 03 	sts	0x0394, r24
    1834:	90 93 95 03 	sts	0x0395, r25
    1838:	a0 93 96 03 	sts	0x0396, r26
    183c:	b0 93 97 03 	sts	0x0397, r27
    1840:	fc cc       	rjmp	.-1544   	; 0x123a <main+0x478>
				TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
				PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			}else if(pwm_right > 0) {   		// move forward
    1842:	18 16       	cp	r1, r24
    1844:	19 06       	cpc	r1, r25
    1846:	1a 06       	cpc	r1, r26
    1848:	1b 06       	cpc	r1, r27
    184a:	0c f0       	brlt	.+2      	; 0x184e <main+0xa8c>
    184c:	ef c3       	rjmp	.+2014   	; 0x202c <main+0x126a>
				// select channel 13 to sample left current
				//currentMotRightChannel = 13;
				TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    184e:	80 91 90 00 	lds	r24, 0x0090
    1852:	8f 7d       	andi	r24, 0xDF	; 223
    1854:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    1858:	80 91 71 00 	lds	r24, 0x0071
    185c:	8b 7f       	andi	r24, 0xFB	; 251
    185e:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 4);				// output to 0
    1862:	74 98       	cbi	0x0e, 4	; 14
				TCCR3A |= (1 << COM3A1);		// enable OCA
    1864:	80 91 90 00 	lds	r24, 0x0090
    1868:	80 68       	ori	r24, 0x80	; 128
    186a:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    186e:	80 91 71 00 	lds	r24, 0x0071
    1872:	82 60       	ori	r24, 0x02	; 2
    1874:	80 93 71 00 	sts	0x0071, r24
    1878:	84 cb       	rjmp	.-2296   	; 0xf82 <main+0x1c0>
				LED_IR1_LOW;
				LED_IR2_HIGH;
			} else if(rfData[3]==2) {	// turn on two IRs
				//LED_IR1 = 1;
				//LED_IR2 = 0;
				LED_IR1_HIGH;
    187a:	44 9a       	sbi	0x08, 4	; 8
				LED_IR2_LOW;
    187c:	45 98       	cbi	0x08, 5	; 8
    187e:	92 cd       	rjmp	.-1244   	; 0x13a4 <main+0x5e2>
					ackPayload[15] = ir_move;			
					packetId = 5;
					break;
				
				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    1880:	80 91 33 03 	lds	r24, 0x0333
    1884:	90 91 34 03 	lds	r25, 0x0334
    1888:	80 93 e8 03 	sts	0x03E8, r24
					ackPayload[2] = proximityValue[0]>>8;
    188c:	80 91 33 03 	lds	r24, 0x0333
    1890:	90 91 34 03 	lds	r25, 0x0334
    1894:	90 93 e9 03 	sts	0x03E9, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    1898:	80 91 37 03 	lds	r24, 0x0337
    189c:	90 91 38 03 	lds	r25, 0x0338
    18a0:	80 93 ea 03 	sts	0x03EA, r24
					ackPayload[4] = proximityValue[2]>>8;
    18a4:	80 91 37 03 	lds	r24, 0x0337
    18a8:	90 91 38 03 	lds	r25, 0x0338
    18ac:	90 93 eb 03 	sts	0x03EB, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    18b0:	80 91 3b 03 	lds	r24, 0x033B
    18b4:	90 91 3c 03 	lds	r25, 0x033C
    18b8:	80 93 ec 03 	sts	0x03EC, r24
					ackPayload[6] = proximityValue[4]>>8;
    18bc:	80 91 3b 03 	lds	r24, 0x033B
    18c0:	90 91 3c 03 	lds	r25, 0x033C
    18c4:	90 93 ed 03 	sts	0x03ED, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    18c8:	80 91 3f 03 	lds	r24, 0x033F
    18cc:	90 91 40 03 	lds	r25, 0x0340
    18d0:	80 93 ee 03 	sts	0x03EE, r24
					ackPayload[8] = proximityValue[6]>>8;
    18d4:	80 91 3f 03 	lds	r24, 0x033F
    18d8:	90 91 40 03 	lds	r25, 0x0340
    18dc:	90 93 ef 03 	sts	0x03EF, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    18e0:	80 91 47 03 	lds	r24, 0x0347
    18e4:	90 91 48 03 	lds	r25, 0x0348
    18e8:	80 93 f0 03 	sts	0x03F0, r24
					ackPayload[10] = proximityValue[10]>>8;
    18ec:	80 91 47 03 	lds	r24, 0x0347
    18f0:	90 91 48 03 	lds	r25, 0x0348
    18f4:	90 93 f1 03 	sts	0x03F1, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    18f8:	80 91 4b 03 	lds	r24, 0x034B
    18fc:	90 91 4c 03 	lds	r25, 0x034C
    1900:	80 93 f2 03 	sts	0x03F2, r24
					ackPayload[12] = proximityValue[12]>>8;
    1904:	80 91 4b 03 	lds	r24, 0x034B
    1908:	90 91 4c 03 	lds	r25, 0x034C
    190c:	90 93 f3 03 	sts	0x03F3, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    1910:	80 91 4f 03 	lds	r24, 0x034F
    1914:	90 91 50 03 	lds	r25, 0x0350
    1918:	80 93 f4 03 	sts	0x03F4, r24
					ackPayload[14] = proximityValue[14]>>8;
    191c:	80 91 4f 03 	lds	r24, 0x034F
    1920:	90 91 50 03 	lds	r25, 0x0350
    1924:	90 93 f5 03 	sts	0x03F5, r25
					ackPayload[15] = currentSelector;
    1928:	80 91 e5 03 	lds	r24, 0x03E5
    192c:	80 93 f6 03 	sts	0x03F6, r24
					packetId = 6;
    1930:	20 92 0d 02 	sts	0x020D, r2
					break;	
    1934:	48 cd       	rjmp	.-1392   	; 0x13c6 <main+0x604>

			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					currentProxValue = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
    1936:	20 91 33 03 	lds	r18, 0x0333
    193a:	30 91 34 03 	lds	r19, 0x0334
    193e:	80 91 35 03 	lds	r24, 0x0335
    1942:	90 91 36 03 	lds	r25, 0x0336
    1946:	28 1b       	sub	r18, r24
    1948:	39 0b       	sbc	r19, r25
    194a:	30 93 6b 03 	sts	0x036B, r19
    194e:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1952:	37 fd       	sbrc	r19, 7
    1954:	eb c1       	rjmp	.+982    	; 0x1d2c <main+0xf6a>
    1956:	92 2f       	mov	r25, r18
    1958:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[1] = currentProxValue&0xFF;
    195a:	90 93 e8 03 	sts	0x03E8, r25
					ackPayload[2] = currentProxValue>>8;
    195e:	80 93 e9 03 	sts	0x03E9, r24

					currentProxValue = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
    1962:	20 91 37 03 	lds	r18, 0x0337
    1966:	30 91 38 03 	lds	r19, 0x0338
    196a:	80 91 39 03 	lds	r24, 0x0339
    196e:	90 91 3a 03 	lds	r25, 0x033A
    1972:	28 1b       	sub	r18, r24
    1974:	39 0b       	sbc	r19, r25
    1976:	30 93 6b 03 	sts	0x036B, r19
    197a:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    197e:	37 fd       	sbrc	r19, 7
    1980:	d2 c1       	rjmp	.+932    	; 0x1d26 <main+0xf64>
    1982:	92 2f       	mov	r25, r18
    1984:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}					
					ackPayload[3] = currentProxValue&0xFF;
    1986:	90 93 ea 03 	sts	0x03EA, r25
					ackPayload[4] = currentProxValue>>8;
    198a:	80 93 eb 03 	sts	0x03EB, r24

					currentProxValue = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
    198e:	20 91 3b 03 	lds	r18, 0x033B
    1992:	30 91 3c 03 	lds	r19, 0x033C
    1996:	80 91 3d 03 	lds	r24, 0x033D
    199a:	90 91 3e 03 	lds	r25, 0x033E
    199e:	28 1b       	sub	r18, r24
    19a0:	39 0b       	sbc	r19, r25
    19a2:	30 93 6b 03 	sts	0x036B, r19
    19a6:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    19aa:	37 fd       	sbrc	r19, 7
    19ac:	b9 c1       	rjmp	.+882    	; 0x1d20 <main+0xf5e>
    19ae:	92 2f       	mov	r25, r18
    19b0:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[5] = currentProxValue&0xFF;
    19b2:	90 93 ec 03 	sts	0x03EC, r25
					ackPayload[6] = currentProxValue>>8;
    19b6:	80 93 ed 03 	sts	0x03ED, r24

					currentProxValue = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
    19ba:	20 91 3f 03 	lds	r18, 0x033F
    19be:	30 91 40 03 	lds	r19, 0x0340
    19c2:	80 91 41 03 	lds	r24, 0x0341
    19c6:	90 91 42 03 	lds	r25, 0x0342
    19ca:	28 1b       	sub	r18, r24
    19cc:	39 0b       	sbc	r19, r25
    19ce:	30 93 6b 03 	sts	0x036B, r19
    19d2:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    19d6:	37 fd       	sbrc	r19, 7
    19d8:	a0 c1       	rjmp	.+832    	; 0x1d1a <main+0xf58>
    19da:	92 2f       	mov	r25, r18
    19dc:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[7] = currentProxValue&0xFF;
    19de:	90 93 ee 03 	sts	0x03EE, r25
					ackPayload[8] = currentProxValue>>8;
    19e2:	80 93 ef 03 	sts	0x03EF, r24

					currentProxValue = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
    19e6:	20 91 47 03 	lds	r18, 0x0347
    19ea:	30 91 48 03 	lds	r19, 0x0348
    19ee:	80 91 49 03 	lds	r24, 0x0349
    19f2:	90 91 4a 03 	lds	r25, 0x034A
    19f6:	28 1b       	sub	r18, r24
    19f8:	39 0b       	sbc	r19, r25
    19fa:	30 93 6b 03 	sts	0x036B, r19
    19fe:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1a02:	37 fd       	sbrc	r19, 7
    1a04:	87 c1       	rjmp	.+782    	; 0x1d14 <main+0xf52>
    1a06:	92 2f       	mov	r25, r18
    1a08:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[9] = currentProxValue&0xFF;
    1a0a:	90 93 f0 03 	sts	0x03F0, r25
					ackPayload[10] = currentProxValue>>8;
    1a0e:	80 93 f1 03 	sts	0x03F1, r24

					currentProxValue = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
    1a12:	20 91 4b 03 	lds	r18, 0x034B
    1a16:	30 91 4c 03 	lds	r19, 0x034C
    1a1a:	80 91 4d 03 	lds	r24, 0x034D
    1a1e:	90 91 4e 03 	lds	r25, 0x034E
    1a22:	28 1b       	sub	r18, r24
    1a24:	39 0b       	sbc	r19, r25
    1a26:	30 93 6b 03 	sts	0x036B, r19
    1a2a:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1a2e:	37 fd       	sbrc	r19, 7
    1a30:	6e c1       	rjmp	.+732    	; 0x1d0e <main+0xf4c>
    1a32:	92 2f       	mov	r25, r18
    1a34:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[11] = currentProxValue&0xFF;
    1a36:	90 93 f2 03 	sts	0x03F2, r25
					ackPayload[12] = currentProxValue>>8;
    1a3a:	80 93 f3 03 	sts	0x03F3, r24

					currentProxValue = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
    1a3e:	20 91 4f 03 	lds	r18, 0x034F
    1a42:	30 91 50 03 	lds	r19, 0x0350
    1a46:	80 91 51 03 	lds	r24, 0x0351
    1a4a:	90 91 52 03 	lds	r25, 0x0352
    1a4e:	28 1b       	sub	r18, r24
    1a50:	39 0b       	sbc	r19, r25
    1a52:	30 93 6b 03 	sts	0x036B, r19
    1a56:	20 93 6a 03 	sts	0x036A, r18
					if(currentProxValue < 0) {
    1a5a:	37 fd       	sbrc	r19, 7
    1a5c:	51 c1       	rjmp	.+674    	; 0x1d00 <main+0xf3e>
    1a5e:	92 2f       	mov	r25, r18
    1a60:	83 2f       	mov	r24, r19
						currentProxValue = 0;
					}
					ackPayload[13] = currentProxValue&0xFF;
    1a62:	90 93 f4 03 	sts	0x03F4, r25
					ackPayload[14] = currentProxValue>>8;	
    1a66:	80 93 f5 03 	sts	0x03F5, r24

					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);		
    1a6a:	80 91 03 01 	lds	r24, 0x0103
    1a6e:	20 91 03 01 	lds	r18, 0x0103
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	20 72       	andi	r18, 0x20	; 32
    1a76:	30 70       	andi	r19, 0x00	; 0
    1a78:	35 95       	asr	r19
    1a7a:	27 95       	ror	r18
    1a7c:	35 95       	asr	r19
    1a7e:	27 95       	ror	r18
    1a80:	35 95       	asr	r19
    1a82:	27 95       	ror	r18
    1a84:	35 95       	asr	r19
    1a86:	27 95       	ror	r18
    1a88:	35 95       	asr	r19
    1a8a:	27 95       	ror	r18
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	80 71       	andi	r24, 0x10	; 16
    1a94:	90 70       	andi	r25, 0x00	; 0
    1a96:	95 95       	asr	r25
    1a98:	87 95       	ror	r24
    1a9a:	95 95       	asr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	95 95       	asr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	95 95       	asr	r25
    1aa4:	87 95       	ror	r24
    1aa6:	82 2b       	or	r24, r18
    1aa8:	80 93 f6 03 	sts	0x03F6, r24
					packetId = 4;
    1aac:	f4 e0       	ldi	r31, 0x04	; 4
    1aae:	f0 93 0d 02 	sts	0x020D, r31
					break;
    1ab2:	89 cc       	rjmp	.-1774   	; 0x13c6 <main+0x604>

				command_received = 0;

				//usartTransmit(ir_move);

				switch(ir_move) {
    1ab4:	87 30       	cpi	r24, 0x07	; 7
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <main+0xcf8>
    1ab8:	91 c1       	rjmp	.+802    	; 0x1ddc <main+0x101a>
    1aba:	88 30       	cpi	r24, 0x08	; 8
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <main+0xcfe>
    1abe:	a7 c0       	rjmp	.+334    	; 0x1c0e <main+0xe4c>
    1ac0:	85 30       	cpi	r24, 0x05	; 5
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <main+0xd04>
    1ac4:	6f c2       	rjmp	.+1246   	; 0x1fa4 <main+0x11e2>
    1ac6:	86 30       	cpi	r24, 0x06	; 6
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <main+0xd0a>
    1aca:	d8 cc       	rjmp	.-1616   	; 0x147c <main+0x6ba>
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
	    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
	                  	break;

					case 6:	// both motors right
						pwm_right_desired -= STEP_MOTORS;
    1acc:	20 91 90 03 	lds	r18, 0x0390
    1ad0:	30 91 91 03 	lds	r19, 0x0391
    1ad4:	40 91 92 03 	lds	r20, 0x0392
    1ad8:	50 91 93 03 	lds	r21, 0x0393
    1adc:	2e 51       	subi	r18, 0x1E	; 30
    1ade:	30 40       	sbci	r19, 0x00	; 0
    1ae0:	40 40       	sbci	r20, 0x00	; 0
    1ae2:	50 40       	sbci	r21, 0x00	; 0
    1ae4:	20 93 90 03 	sts	0x0390, r18
    1ae8:	30 93 91 03 	sts	0x0391, r19
    1aec:	40 93 92 03 	sts	0x0392, r20
    1af0:	50 93 93 03 	sts	0x0393, r21
						pwm_left_desired += STEP_MOTORS;
    1af4:	80 91 94 03 	lds	r24, 0x0394
    1af8:	90 91 95 03 	lds	r25, 0x0395
    1afc:	a0 91 96 03 	lds	r26, 0x0396
    1b00:	b0 91 97 03 	lds	r27, 0x0397
    1b04:	4e 96       	adiw	r24, 0x1e	; 30
    1b06:	a1 1d       	adc	r26, r1
    1b08:	b1 1d       	adc	r27, r1
    1b0a:	80 93 94 03 	sts	0x0394, r24
    1b0e:	90 93 95 03 	sts	0x0395, r25
    1b12:	a0 93 96 03 	sts	0x0396, r26
    1b16:	b0 93 97 03 	sts	0x0397, r27
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1b1a:	2a 39       	cpi	r18, 0x9A	; 154
    1b1c:	ed ef       	ldi	r30, 0xFD	; 253
    1b1e:	3e 07       	cpc	r19, r30
    1b20:	ef ef       	ldi	r30, 0xFF	; 255
    1b22:	4e 07       	cpc	r20, r30
    1b24:	ef ef       	ldi	r30, 0xFF	; 255
    1b26:	5e 07       	cpc	r21, r30
    1b28:	64 f4       	brge	.+24     	; 0x1b42 <main+0xd80>
    1b2a:	2a e9       	ldi	r18, 0x9A	; 154
    1b2c:	3d ef       	ldi	r19, 0xFD	; 253
    1b2e:	4f ef       	ldi	r20, 0xFF	; 255
    1b30:	5f ef       	ldi	r21, 0xFF	; 255
    1b32:	20 93 90 03 	sts	0x0390, r18
    1b36:	30 93 91 03 	sts	0x0391, r19
    1b3a:	40 93 92 03 	sts	0x0392, r20
    1b3e:	50 93 93 03 	sts	0x0393, r21
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1b42:	87 36       	cpi	r24, 0x67	; 103
    1b44:	32 e0       	ldi	r19, 0x02	; 2
    1b46:	93 07       	cpc	r25, r19
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	a3 07       	cpc	r26, r19
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	b3 07       	cpc	r27, r19
    1b50:	0c f4       	brge	.+2      	; 0x1b54 <main+0xd92>
    1b52:	94 cc       	rjmp	.-1752   	; 0x147c <main+0x6ba>
    1b54:	86 e6       	ldi	r24, 0x66	; 102
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	80 93 94 03 	sts	0x0394, r24
    1b60:	90 93 95 03 	sts	0x0395, r25
    1b64:	a0 93 96 03 	sts	0x0396, r26
    1b68:	b0 93 97 03 	sts	0x0397, r27
    1b6c:	80 91 e3 03 	lds	r24, 0x03E3
    1b70:	90 91 e4 03 	lds	r25, 0x03E4
    1b74:	3e ca       	rjmp	.-2948   	; 0xff2 <main+0x230>
				LED_IR1_HIGH;
				LED_IR2_LOW;
			} else if(rfData[3]==3) {	// turn on all three IRs
				//LED_IR1 = 0;
				//LED_IR2 = 0;											
				LED_IR1_LOW;
    1b76:	44 98       	cbi	0x08, 4	; 8
				LED_IR2_LOW;
    1b78:	45 98       	cbi	0x08, 5	; 8
    1b7a:	14 cc       	rjmp	.-2008   	; 0x13a4 <main+0x5e2>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    1b7c:	88 27       	eor	r24, r24
    1b7e:	99 27       	eor	r25, r25
    1b80:	82 1b       	sub	r24, r18
    1b82:	93 0b       	sbc	r25, r19
    1b84:	90 93 ab 00 	sts	0x00AB, r25
    1b88:	80 93 aa 00 	sts	0x00AA, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
			} else if(pwm_left < 0) {      		// move backward
				// select channel 14 to sample left current
				//currentMotLeftChannel = 14;
				TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    1b8c:	80 91 a0 00 	lds	r24, 0x00A0
    1b90:	8f 77       	andi	r24, 0x7F	; 127
    1b92:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    1b96:	80 91 72 00 	lds	r24, 0x0072
    1b9a:	8d 7f       	andi	r24, 0xFD	; 253
    1b9c:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 3);				// output to 0
    1ba0:	80 91 02 01 	lds	r24, 0x0102
    1ba4:	87 7f       	andi	r24, 0xF7	; 247
    1ba6:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4B1);		// enable OCB
    1baa:	80 91 a0 00 	lds	r24, 0x00A0
    1bae:	80 62       	ori	r24, 0x20	; 32
    1bb0:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    1bb4:	80 91 72 00 	lds	r24, 0x0072
    1bb8:	84 60       	ori	r24, 0x04	; 4
    1bba:	80 93 72 00 	sts	0x0072, r24
    1bbe:	47 cd       	rjmp	.-1394   	; 0x164e <main+0x88c>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    1bc0:	90 95       	com	r25
    1bc2:	81 95       	neg	r24
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	90 93 9b 00 	sts	0x009B, r25
    1bca:	80 93 9a 00 	sts	0x009A, r24
    1bce:	1f cd       	rjmp	.-1474   	; 0x160e <main+0x84c>
				TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
				PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
				TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
												// the pwm is turned off...is it correct??
			} else if(pwm_left > 0) {   		// move forward
    1bd0:	12 16       	cp	r1, r18
    1bd2:	13 06       	cpc	r1, r19
    1bd4:	14 06       	cpc	r1, r20
    1bd6:	15 06       	cpc	r1, r21
    1bd8:	cc f6       	brge	.-78     	; 0x1b8c <main+0xdca>
				// select channel 15 to sample left current
				//currentMotLeftChannel = 15;
				TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    1bda:	80 91 a0 00 	lds	r24, 0x00A0
    1bde:	8f 7d       	andi	r24, 0xDF	; 223
    1be0:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    1be4:	80 91 72 00 	lds	r24, 0x0072
    1be8:	8b 7f       	andi	r24, 0xFB	; 251
    1bea:	80 93 72 00 	sts	0x0072, r24
				PORTH &= ~(1 << 4);				// output to 0
    1bee:	80 91 02 01 	lds	r24, 0x0102
    1bf2:	8f 7e       	andi	r24, 0xEF	; 239
    1bf4:	80 93 02 01 	sts	0x0102, r24
				TCCR4A |= (1 << COM4A1);		// enable OCA
    1bf8:	80 91 a0 00 	lds	r24, 0x00A0
    1bfc:	80 68       	ori	r24, 0x80	; 128
    1bfe:	80 93 a0 00 	sts	0x00A0, r24
				TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    1c02:	80 91 72 00 	lds	r24, 0x0072
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	80 93 72 00 	sts	0x0072, r24
    1c0c:	20 cd       	rjmp	.-1472   	; 0x164e <main+0x88c>

				command_received = 0;

				//usartTransmit(ir_move);

				switch(ir_move) {
    1c0e:	88 30       	cpi	r24, 0x08	; 8
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <main+0xe52>
    1c12:	83 c1       	rjmp	.+774    	; 0x1f1a <main+0x1158>
    1c14:	89 30       	cpi	r24, 0x09	; 9
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <main+0xe58>
    1c18:	31 cc       	rjmp	.-1950   	; 0x147c <main+0x6ba>
						pwm_right_desired += STEP_MOTORS;
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
						break;

					case 9:	// left motor backward
						pwm_left_desired -= STEP_MOTORS;
    1c1a:	80 91 94 03 	lds	r24, 0x0394
    1c1e:	90 91 95 03 	lds	r25, 0x0395
    1c22:	a0 91 96 03 	lds	r26, 0x0396
    1c26:	b0 91 97 03 	lds	r27, 0x0397
    1c2a:	4e 97       	sbiw	r24, 0x1e	; 30
    1c2c:	a1 09       	sbc	r26, r1
    1c2e:	b1 09       	sbc	r27, r1
    1c30:	80 93 94 03 	sts	0x0394, r24
    1c34:	90 93 95 03 	sts	0x0395, r25
    1c38:	a0 93 96 03 	sts	0x0396, r26
    1c3c:	b0 93 97 03 	sts	0x0397, r27
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1c40:	8a 39       	cpi	r24, 0x9A	; 154
    1c42:	ed ef       	ldi	r30, 0xFD	; 253
    1c44:	9e 07       	cpc	r25, r30
    1c46:	ef ef       	ldi	r30, 0xFF	; 255
    1c48:	ae 07       	cpc	r26, r30
    1c4a:	ef ef       	ldi	r30, 0xFF	; 255
    1c4c:	be 07       	cpc	r27, r30
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <main+0xe90>
    1c50:	15 cc       	rjmp	.-2006   	; 0x147c <main+0x6ba>
    1c52:	2a e9       	ldi	r18, 0x9A	; 154
    1c54:	3d ef       	ldi	r19, 0xFD	; 253
    1c56:	4f ef       	ldi	r20, 0xFF	; 255
    1c58:	5f ef       	ldi	r21, 0xFF	; 255
    1c5a:	20 93 94 03 	sts	0x0394, r18
    1c5e:	30 93 95 03 	sts	0x0395, r19
    1c62:	40 93 96 03 	sts	0x0396, r20
    1c66:	50 93 97 03 	sts	0x0397, r21
    1c6a:	80 91 e3 03 	lds	r24, 0x03E3
    1c6e:	90 91 e4 03 	lds	r25, 0x03E4
    1c72:	bf c9       	rjmp	.-3202   	; 0xff2 <main+0x230>

				command_received = 0;

				//usartTransmit(ir_move);

				switch(ir_move) {
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <main+0xeb8>
    1c78:	de c0       	rjmp	.+444    	; 0x1e36 <main+0x1074>
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <main+0xebe>
    1c7e:	fe cb       	rjmp	.-2052   	; 0x147c <main+0x6ba>
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 3:	// left motor forward
						pwm_left_desired += STEP_MOTORS;
    1c80:	80 91 94 03 	lds	r24, 0x0394
    1c84:	90 91 95 03 	lds	r25, 0x0395
    1c88:	a0 91 96 03 	lds	r26, 0x0396
    1c8c:	b0 91 97 03 	lds	r27, 0x0397
    1c90:	4e 96       	adiw	r24, 0x1e	; 30
    1c92:	a1 1d       	adc	r26, r1
    1c94:	b1 1d       	adc	r27, r1
    1c96:	80 93 94 03 	sts	0x0394, r24
    1c9a:	90 93 95 03 	sts	0x0395, r25
    1c9e:	a0 93 96 03 	sts	0x0396, r26
    1ca2:	b0 93 97 03 	sts	0x0397, r27
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1ca6:	87 36       	cpi	r24, 0x67	; 103
    1ca8:	e2 e0       	ldi	r30, 0x02	; 2
    1caa:	9e 07       	cpc	r25, r30
    1cac:	e0 e0       	ldi	r30, 0x00	; 0
    1cae:	ae 07       	cpc	r26, r30
    1cb0:	e0 e0       	ldi	r30, 0x00	; 0
    1cb2:	be 07       	cpc	r27, r30
    1cb4:	0c f4       	brge	.+2      	; 0x1cb8 <main+0xef6>
    1cb6:	e2 cb       	rjmp	.-2108   	; 0x147c <main+0x6ba>
    1cb8:	26 e6       	ldi	r18, 0x66	; 102
    1cba:	32 e0       	ldi	r19, 0x02	; 2
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	20 93 94 03 	sts	0x0394, r18
    1cc4:	30 93 95 03 	sts	0x0395, r19
    1cc8:	40 93 96 03 	sts	0x0396, r20
    1ccc:	50 93 97 03 	sts	0x0397, r21
    1cd0:	80 91 e3 03 	lds	r24, 0x03E3
    1cd4:	90 91 e4 03 	lds	r25, 0x03E4
    1cd8:	8c c9       	rjmp	.-3304   	; 0xff2 <main+0x230>
					ackPayload[7] = currentProxValue&0xFF;
					ackPayload[8] = currentProxValue>>8;

					currentProxValue = proximityValue[22] - proximityValue[23];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
						currentProxValue = 0;
    1cda:	10 92 6b 03 	sts	0x036B, r1
    1cde:	10 92 6a 03 	sts	0x036A, r1
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	50 cc       	rjmp	.-1888   	; 0x1588 <main+0x7c6>
					}
					ackPayload[5] = currentProxValue&0xFF;
					ackPayload[6] = currentProxValue>>8;

					currentProxValue = proximityValue[20] - proximityValue[21];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	37 cc       	rjmp	.-1938   	; 0x155c <main+0x79a>
					}
					ackPayload[3] = currentProxValue&0xFF;
					ackPayload[4] = currentProxValue>>8;

					currentProxValue = proximityValue[18] - proximityValue[19];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	1e cc       	rjmp	.-1988   	; 0x1530 <main+0x76e>
					}
					ackPayload[1] = currentProxValue&0xFF;
					ackPayload[2] = currentProxValue>>8;

					currentProxValue = proximityValue[16] - proximityValue[17];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	05 cc       	rjmp	.-2038   	; 0x1504 <main+0x742>
					packetId = 4;
					break;

				case 4:
					currentProxValue = proximityValue[8] - proximityValue[9];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	ec cb       	rjmp	.-2088   	; 0x14d8 <main+0x716>
					ackPayload[11] = currentProxValue&0xFF;
					ackPayload[12] = currentProxValue>>8;

					currentProxValue = proximityValue[14] - proximityValue[15];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
						currentProxValue = 0;
    1d00:	10 92 6b 03 	sts	0x036B, r1
    1d04:	10 92 6a 03 	sts	0x036A, r1
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	aa ce       	rjmp	.-684    	; 0x1a62 <main+0xca0>
					}
					ackPayload[9] = currentProxValue&0xFF;
					ackPayload[10] = currentProxValue>>8;

					currentProxValue = proximityValue[12] - proximityValue[13];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	91 ce       	rjmp	.-734    	; 0x1a36 <main+0xc74>
					}
					ackPayload[7] = currentProxValue&0xFF;
					ackPayload[8] = currentProxValue>>8;

					currentProxValue = proximityValue[10] - proximityValue[11];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	78 ce       	rjmp	.-784    	; 0x1a0a <main+0xc48>
					}
					ackPayload[5] = currentProxValue&0xFF;
					ackPayload[6] = currentProxValue>>8;

					currentProxValue = proximityValue[6] - proximityValue[7];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	5f ce       	rjmp	.-834    	; 0x19de <main+0xc1c>
					}					
					ackPayload[3] = currentProxValue&0xFF;
					ackPayload[4] = currentProxValue>>8;

					currentProxValue = proximityValue[4] - proximityValue[5];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	46 ce       	rjmp	.-884    	; 0x19b2 <main+0xbf0>
					}
					ackPayload[1] = currentProxValue&0xFF;
					ackPayload[2] = currentProxValue>>8;

					currentProxValue = proximityValue[2] - proximityValue[3];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	2d ce       	rjmp	.-934    	; 0x1986 <main+0xbc4>
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					currentProxValue = proximityValue[0] - proximityValue[1];	// ambient - (ambient+reflected)
					if(currentProxValue < 0) {
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	14 ce       	rjmp	.-984    	; 0x195a <main+0xb98>
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 4:	// both motors left
						pwm_right_desired += STEP_MOTORS;
    1d32:	20 91 90 03 	lds	r18, 0x0390
    1d36:	30 91 91 03 	lds	r19, 0x0391
    1d3a:	40 91 92 03 	lds	r20, 0x0392
    1d3e:	50 91 93 03 	lds	r21, 0x0393
    1d42:	22 5e       	subi	r18, 0xE2	; 226
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	4f 4f       	sbci	r20, 0xFF	; 255
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	20 93 90 03 	sts	0x0390, r18
    1d4e:	30 93 91 03 	sts	0x0391, r19
    1d52:	40 93 92 03 	sts	0x0392, r20
    1d56:	50 93 93 03 	sts	0x0393, r21
						pwm_left_desired -= STEP_MOTORS;
    1d5a:	80 91 94 03 	lds	r24, 0x0394
    1d5e:	90 91 95 03 	lds	r25, 0x0395
    1d62:	a0 91 96 03 	lds	r26, 0x0396
    1d66:	b0 91 97 03 	lds	r27, 0x0397
    1d6a:	4e 97       	sbiw	r24, 0x1e	; 30
    1d6c:	a1 09       	sbc	r26, r1
    1d6e:	b1 09       	sbc	r27, r1
    1d70:	80 93 94 03 	sts	0x0394, r24
    1d74:	90 93 95 03 	sts	0x0395, r25
    1d78:	a0 93 96 03 	sts	0x0396, r26
    1d7c:	b0 93 97 03 	sts	0x0397, r27
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1d80:	27 36       	cpi	r18, 0x67	; 103
    1d82:	e2 e0       	ldi	r30, 0x02	; 2
    1d84:	3e 07       	cpc	r19, r30
    1d86:	e0 e0       	ldi	r30, 0x00	; 0
    1d88:	4e 07       	cpc	r20, r30
    1d8a:	e0 e0       	ldi	r30, 0x00	; 0
    1d8c:	5e 07       	cpc	r21, r30
    1d8e:	64 f0       	brlt	.+24     	; 0x1da8 <main+0xfe6>
    1d90:	26 e6       	ldi	r18, 0x66	; 102
    1d92:	32 e0       	ldi	r19, 0x02	; 2
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	20 93 90 03 	sts	0x0390, r18
    1d9c:	30 93 91 03 	sts	0x0391, r19
    1da0:	40 93 92 03 	sts	0x0392, r20
    1da4:	50 93 93 03 	sts	0x0393, r21
	    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1da8:	8a 39       	cpi	r24, 0x9A	; 154
    1daa:	3d ef       	ldi	r19, 0xFD	; 253
    1dac:	93 07       	cpc	r25, r19
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	a3 07       	cpc	r26, r19
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	b3 07       	cpc	r27, r19
    1db6:	0c f0       	brlt	.+2      	; 0x1dba <main+0xff8>
    1db8:	61 cb       	rjmp	.-2366   	; 0x147c <main+0x6ba>
    1dba:	8a e9       	ldi	r24, 0x9A	; 154
    1dbc:	9d ef       	ldi	r25, 0xFD	; 253
    1dbe:	af ef       	ldi	r26, 0xFF	; 255
    1dc0:	bf ef       	ldi	r27, 0xFF	; 255
    1dc2:	80 93 94 03 	sts	0x0394, r24
    1dc6:	90 93 95 03 	sts	0x0395, r25
    1dca:	a0 93 96 03 	sts	0x0396, r26
    1dce:	b0 93 97 03 	sts	0x0397, r27
    1dd2:	80 91 e3 03 	lds	r24, 0x03E3
    1dd6:	90 91 e4 03 	lds	r25, 0x03E4
    1dda:	0b c9       	rjmp	.-3562   	; 0xff2 <main+0x230>
						pwm_left_desired -= STEP_MOTORS;
	            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
						break;

					case 7:	// right motor backward
						pwm_right_desired -= STEP_MOTORS;
    1ddc:	80 91 90 03 	lds	r24, 0x0390
    1de0:	90 91 91 03 	lds	r25, 0x0391
    1de4:	a0 91 92 03 	lds	r26, 0x0392
    1de8:	b0 91 93 03 	lds	r27, 0x0393
    1dec:	4e 97       	sbiw	r24, 0x1e	; 30
    1dee:	a1 09       	sbc	r26, r1
    1df0:	b1 09       	sbc	r27, r1
    1df2:	80 93 90 03 	sts	0x0390, r24
    1df6:	90 93 91 03 	sts	0x0391, r25
    1dfa:	a0 93 92 03 	sts	0x0392, r26
    1dfe:	b0 93 93 03 	sts	0x0393, r27
	                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1e02:	8a 39       	cpi	r24, 0x9A	; 154
    1e04:	3d ef       	ldi	r19, 0xFD	; 253
    1e06:	93 07       	cpc	r25, r19
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	a3 07       	cpc	r26, r19
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	b3 07       	cpc	r27, r19
    1e10:	0c f0       	brlt	.+2      	; 0x1e14 <main+0x1052>
    1e12:	34 cb       	rjmp	.-2456   	; 0x147c <main+0x6ba>
    1e14:	8a e9       	ldi	r24, 0x9A	; 154
    1e16:	9d ef       	ldi	r25, 0xFD	; 253
    1e18:	af ef       	ldi	r26, 0xFF	; 255
    1e1a:	bf ef       	ldi	r27, 0xFF	; 255
    1e1c:	80 93 90 03 	sts	0x0390, r24
    1e20:	90 93 91 03 	sts	0x0391, r25
    1e24:	a0 93 92 03 	sts	0x0392, r26
    1e28:	b0 93 93 03 	sts	0x0393, r27
    1e2c:	80 91 e3 03 	lds	r24, 0x03E3
    1e30:	90 91 e4 03 	lds	r25, 0x03E4
    1e34:	de c8       	rjmp	.-3652   	; 0xff2 <main+0x230>
						pwm_right_desired = 0;
						pwm_left_desired = 0;
						break;

					case 2:	// both motors forward
						if(pwm_right_desired > pwm_left_desired) {
    1e36:	20 91 90 03 	lds	r18, 0x0390
    1e3a:	30 91 91 03 	lds	r19, 0x0391
    1e3e:	40 91 92 03 	lds	r20, 0x0392
    1e42:	50 91 93 03 	lds	r21, 0x0393
    1e46:	80 91 94 03 	lds	r24, 0x0394
    1e4a:	90 91 95 03 	lds	r25, 0x0395
    1e4e:	a0 91 96 03 	lds	r26, 0x0396
    1e52:	b0 91 97 03 	lds	r27, 0x0397
    1e56:	82 17       	cp	r24, r18
    1e58:	93 07       	cpc	r25, r19
    1e5a:	a4 07       	cpc	r26, r20
    1e5c:	b5 07       	cpc	r27, r21
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <main+0x10a0>
    1e60:	b6 c0       	rjmp	.+364    	; 0x1fce <main+0x120c>
    1e62:	da 01       	movw	r26, r20
    1e64:	c9 01       	movw	r24, r18
							pwm_left_desired = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired += STEP_MOTORS;
    1e66:	22 5e       	subi	r18, 0xE2	; 226
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6e:	20 93 90 03 	sts	0x0390, r18
    1e72:	30 93 91 03 	sts	0x0391, r19
    1e76:	40 93 92 03 	sts	0x0392, r20
    1e7a:	50 93 93 03 	sts	0x0393, r21
						pwm_left_desired += STEP_MOTORS;
    1e7e:	4e 96       	adiw	r24, 0x1e	; 30
    1e80:	a1 1d       	adc	r26, r1
    1e82:	b1 1d       	adc	r27, r1
    1e84:	80 93 94 03 	sts	0x0394, r24
    1e88:	90 93 95 03 	sts	0x0395, r25
    1e8c:	a0 93 96 03 	sts	0x0396, r26
    1e90:	b0 93 97 03 	sts	0x0397, r27
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    1e94:	27 36       	cpi	r18, 0x67	; 103
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	36 07       	cpc	r19, r22
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	46 07       	cpc	r20, r22
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	56 07       	cpc	r21, r22
    1ea2:	0c f4       	brge	.+2      	; 0x1ea6 <main+0x10e4>
    1ea4:	4e ce       	rjmp	.-868    	; 0x1b42 <main+0xd80>
    1ea6:	26 e6       	ldi	r18, 0x66	; 102
    1ea8:	32 e0       	ldi	r19, 0x02	; 2
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	20 93 90 03 	sts	0x0390, r18
    1eb2:	30 93 91 03 	sts	0x0391, r19
    1eb6:	40 93 92 03 	sts	0x0392, r20
    1eba:	50 93 93 03 	sts	0x0393, r21
    1ebe:	41 ce       	rjmp	.-894    	; 0x1b42 <main+0xd80>
						pwm_left_desired += STEP_MOTORS;
	                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
						break;

					case 1:	// right motor forward
						pwm_right_desired += STEP_MOTORS;
    1ec0:	80 91 90 03 	lds	r24, 0x0390
    1ec4:	90 91 91 03 	lds	r25, 0x0391
    1ec8:	a0 91 92 03 	lds	r26, 0x0392
    1ecc:	b0 91 93 03 	lds	r27, 0x0393
    1ed0:	4e 96       	adiw	r24, 0x1e	; 30
    1ed2:	a1 1d       	adc	r26, r1
    1ed4:	b1 1d       	adc	r27, r1
    1ed6:	80 93 90 03 	sts	0x0390, r24
    1eda:	90 93 91 03 	sts	0x0391, r25
    1ede:	a0 93 92 03 	sts	0x0392, r26
    1ee2:	b0 93 93 03 	sts	0x0393, r27
		                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1ee6:	87 36       	cpi	r24, 0x67	; 103
    1ee8:	32 e0       	ldi	r19, 0x02	; 2
    1eea:	93 07       	cpc	r25, r19
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	a3 07       	cpc	r26, r19
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	b3 07       	cpc	r27, r19
    1ef4:	0c f4       	brge	.+2      	; 0x1ef8 <main+0x1136>
    1ef6:	c2 ca       	rjmp	.-2684   	; 0x147c <main+0x6ba>
    1ef8:	86 e6       	ldi	r24, 0x66	; 102
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	80 93 90 03 	sts	0x0390, r24
    1f04:	90 93 91 03 	sts	0x0391, r25
    1f08:	a0 93 92 03 	sts	0x0392, r26
    1f0c:	b0 93 93 03 	sts	0x0393, r27
    1f10:	80 91 e3 03 	lds	r24, 0x03E3
    1f14:	90 91 e4 03 	lds	r25, 0x03E4
    1f18:	6c c8       	rjmp	.-3880   	; 0xff2 <main+0x230>
		                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
	    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
	               		break;

					case 8:	// both motors backward
						if(pwm_right_desired < pwm_left) {
    1f1a:	20 91 90 03 	lds	r18, 0x0390
    1f1e:	30 91 91 03 	lds	r19, 0x0391
    1f22:	40 91 92 03 	lds	r20, 0x0392
    1f26:	50 91 93 03 	lds	r21, 0x0393
    1f2a:	80 91 8c 03 	lds	r24, 0x038C
    1f2e:	90 91 8d 03 	lds	r25, 0x038D
    1f32:	a0 91 8e 03 	lds	r26, 0x038E
    1f36:	b0 91 8f 03 	lds	r27, 0x038F
    1f3a:	28 17       	cp	r18, r24
    1f3c:	39 07       	cpc	r19, r25
    1f3e:	4a 07       	cpc	r20, r26
    1f40:	5b 07       	cpc	r21, r27
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <main+0x1184>
    1f44:	47 c0       	rjmp	.+142    	; 0x1fd4 <main+0x1212>
    1f46:	da 01       	movw	r26, r20
    1f48:	c9 01       	movw	r24, r18
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
						}
						pwm_right_desired -= STEP_MOTORS;
    1f4a:	2e 51       	subi	r18, 0x1E	; 30
    1f4c:	30 40       	sbci	r19, 0x00	; 0
    1f4e:	40 40       	sbci	r20, 0x00	; 0
    1f50:	50 40       	sbci	r21, 0x00	; 0
    1f52:	20 93 90 03 	sts	0x0390, r18
    1f56:	30 93 91 03 	sts	0x0391, r19
    1f5a:	40 93 92 03 	sts	0x0392, r20
    1f5e:	50 93 93 03 	sts	0x0393, r21
						pwm_left_desired -= STEP_MOTORS;
    1f62:	4e 97       	sbiw	r24, 0x1e	; 30
    1f64:	a1 09       	sbc	r26, r1
    1f66:	b1 09       	sbc	r27, r1
    1f68:	80 93 94 03 	sts	0x0394, r24
    1f6c:	90 93 95 03 	sts	0x0395, r25
    1f70:	a0 93 96 03 	sts	0x0396, r26
    1f74:	b0 93 97 03 	sts	0x0397, r27
		                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1f78:	2a 39       	cpi	r18, 0x9A	; 154
    1f7a:	ed ef       	ldi	r30, 0xFD	; 253
    1f7c:	3e 07       	cpc	r19, r30
    1f7e:	ef ef       	ldi	r30, 0xFF	; 255
    1f80:	4e 07       	cpc	r20, r30
    1f82:	ef ef       	ldi	r30, 0xFF	; 255
    1f84:	5e 07       	cpc	r21, r30
    1f86:	0c f0       	brlt	.+2      	; 0x1f8a <main+0x11c8>
    1f88:	0f cf       	rjmp	.-482    	; 0x1da8 <main+0xfe6>
    1f8a:	2a e9       	ldi	r18, 0x9A	; 154
    1f8c:	3d ef       	ldi	r19, 0xFD	; 253
    1f8e:	4f ef       	ldi	r20, 0xFF	; 255
    1f90:	5f ef       	ldi	r21, 0xFF	; 255
    1f92:	20 93 90 03 	sts	0x0390, r18
    1f96:	30 93 91 03 	sts	0x0391, r19
    1f9a:	40 93 92 03 	sts	0x0392, r20
    1f9e:	50 93 93 03 	sts	0x0393, r21
    1fa2:	02 cf       	rjmp	.-508    	; 0x1da8 <main+0xfe6>
				//usartTransmit(ir_move);

				switch(ir_move) {

					case 5:	// stop motors
						pwm_right_desired = 0;
    1fa4:	10 92 90 03 	sts	0x0390, r1
    1fa8:	10 92 91 03 	sts	0x0391, r1
    1fac:	10 92 92 03 	sts	0x0392, r1
    1fb0:	10 92 93 03 	sts	0x0393, r1
						pwm_left_desired = 0;
    1fb4:	10 92 94 03 	sts	0x0394, r1
    1fb8:	10 92 95 03 	sts	0x0395, r1
    1fbc:	10 92 96 03 	sts	0x0396, r1
    1fc0:	10 92 97 03 	sts	0x0397, r1
    1fc4:	80 91 e3 03 	lds	r24, 0x03E3
    1fc8:	90 91 e4 03 	lds	r25, 0x03E4
						break;
    1fcc:	12 c8       	rjmp	.-4060   	; 0xff2 <main+0x230>
    1fce:	9c 01       	movw	r18, r24
    1fd0:	ad 01       	movw	r20, r26
    1fd2:	49 cf       	rjmp	.-366    	; 0x1e66 <main+0x10a4>

					case 8:	// both motors backward
						if(pwm_right_desired < pwm_left) {
							pwm_left_desired  = pwm_right_desired;
						} else {
							pwm_right_desired = pwm_left_desired;
    1fd4:	80 91 94 03 	lds	r24, 0x0394
    1fd8:	90 91 95 03 	lds	r25, 0x0395
    1fdc:	a0 91 96 03 	lds	r26, 0x0396
    1fe0:	b0 91 97 03 	lds	r27, 0x0397
    1fe4:	9c 01       	movw	r18, r24
    1fe6:	ad 01       	movw	r20, r26
    1fe8:	b0 cf       	rjmp	.-160    	; 0x1f4a <main+0x1188>
							LED_IR1_HIGH;
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	b1 f1       	breq	.+108    	; 0x205a <main+0x1298>
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = 0;
							pwm_red = MAX_LEDS_PWM;
						} else if(colorState==2) {	// turn on red
    1fee:	82 30       	cpi	r24, 0x02	; 2
    1ff0:	d9 f1       	breq	.+118    	; 0x2068 <main+0x12a6>
							LED_IR1_LOW;
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
    1ff2:	83 30       	cpi	r24, 0x03	; 3
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <main+0x1236>
    1ff6:	47 c0       	rjmp	.+142    	; 0x2086 <main+0x12c4>
							pwm_blue = 0;
							pwm_green = 0;
							pwm_red = 0;
						} else if(colorState==4) {	// turn off
							pwm_blue = MAX_LEDS_PWM;
    1ff8:	e0 92 10 02 	sts	0x0210, r14
							pwm_green = MAX_LEDS_PWM;
    1ffc:	e0 92 0f 02 	sts	0x020F, r14
							pwm_red = MAX_LEDS_PWM;
    2000:	e0 92 0e 02 	sts	0x020E, r14
    2004:	12 ca       	rjmp	.-3036   	; 0x142a <main+0x668>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    2006:	80 91 80 00 	lds	r24, 0x0080
    200a:	8f 7d       	andi	r24, 0xDF	; 223
    200c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    2010:	2e 98       	cbi	0x05, 6	; 5
    2012:	25 ca       	rjmp	.-2998   	; 0x145e <main+0x69c>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    2014:	80 91 80 00 	lds	r24, 0x0080
    2018:	87 7f       	andi	r24, 0xF7	; 247
    201a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    201e:	2f 98       	cbi	0x05, 7	; 5
    2020:	80 91 e3 03 	lds	r24, 0x03E3
    2024:	90 91 e4 03 	lds	r25, 0x03E4
    2028:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <main+0x230>
				TCCR3A |= (1 << COM3A1);		// enable OCA
				TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
			} else if(pwm_right < 0) {      	// move backward
				// select channel 12 to sample left current
				//currentMotRightChannel = 12;
				TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    202c:	80 91 90 00 	lds	r24, 0x0090
    2030:	8f 77       	andi	r24, 0x7F	; 127
    2032:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    2036:	80 91 71 00 	lds	r24, 0x0071
    203a:	8d 7f       	andi	r24, 0xFD	; 253
    203c:	80 93 71 00 	sts	0x0071, r24
				PORTE &= ~(1 << 3);				// output to 0
    2040:	73 98       	cbi	0x0e, 3	; 14
				TCCR3A |= (1 << COM3B1);		// enable OCB
    2042:	80 91 90 00 	lds	r24, 0x0090
    2046:	80 62       	ori	r24, 0x20	; 32
    2048:	80 93 90 00 	sts	0x0090, r24
				TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    204c:	80 91 71 00 	lds	r24, 0x0071
    2050:	84 60       	ori	r24, 0x04	; 4
    2052:	80 93 71 00 	sts	0x0071, r24
    2056:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <main+0x1c0>
							LED_IR2_HIGH;
							pwm_blue = 0;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = MAX_LEDS_PWM;					
						} else if(colorState==1) {	// turn on green
							pwm_blue = MAX_LEDS_PWM;
    205a:	e0 92 10 02 	sts	0x0210, r14
							pwm_green = 0;
    205e:	10 92 0f 02 	sts	0x020F, r1
							pwm_red = MAX_LEDS_PWM;
    2062:	e0 92 0e 02 	sts	0x020E, r14
    2066:	e1 c9       	rjmp	.-3134   	; 0x142a <main+0x668>
						} else if(colorState==2) {	// turn on red
							LED_IR1_LOW;
    2068:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    206a:	45 98       	cbi	0x08, 5	; 8
							pwm_blue = MAX_LEDS_PWM;
    206c:	e0 92 10 02 	sts	0x0210, r14
							pwm_green = MAX_LEDS_PWM;
    2070:	e0 92 0f 02 	sts	0x020F, r14
							pwm_red = 0;
    2074:	10 92 0e 02 	sts	0x020E, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    2078:	80 91 80 00 	lds	r24, 0x0080
    207c:	8f 77       	andi	r24, 0x7F	; 127
    207e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    2082:	2d 98       	cbi	0x05, 5	; 5
    2084:	dd c9       	rjmp	.-3142   	; 0x1440 <main+0x67e>
							LED_IR2_LOW;
							pwm_blue = MAX_LEDS_PWM;
							pwm_green = MAX_LEDS_PWM;
							pwm_red = 0;
						} else if(colorState==3) {	// turn on white
							pwm_blue = 0;
    2086:	10 92 10 02 	sts	0x0210, r1
							pwm_green = 0;
    208a:	10 92 0f 02 	sts	0x020F, r1
							pwm_red = 0;
    208e:	10 92 0e 02 	sts	0x020E, r1
    2092:	f2 cf       	rjmp	.-28     	; 0x2078 <main+0x12b6>

00002094 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    2094:	84 b1       	in	r24, 0x04	; 4
    2096:	80 7f       	andi	r24, 0xF0	; 240
    2098:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    209a:	84 b1       	in	r24, 0x04	; 4
    209c:	87 60       	ori	r24, 0x07	; 7
    209e:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    20a0:	80 e5       	ldi	r24, 0x50	; 80
    20a2:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    20a4:	8d b5       	in	r24, 0x2d	; 45
    20a6:	81 60       	ori	r24, 0x01	; 1
    20a8:	8d bd       	out	0x2d, r24	; 45

}
    20aa:	08 95       	ret

000020ac <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    20ac:	44 23       	and	r20, r20
    20ae:	79 f0       	breq	.+30     	; 0x20ce <SPI_ReadWrite_Block+0x22>
    20b0:	a8 2f       	mov	r26, r24
    20b2:	b9 2f       	mov	r27, r25
    20b4:	e6 2f       	mov	r30, r22
    20b6:	f7 2f       	mov	r31, r23
    20b8:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    20ba:	9d 91       	ld	r25, X+
    20bc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    20be:	0d b4       	in	r0, 0x2d	; 45
    20c0:	07 fe       	sbrs	r0, 7
    20c2:	fd cf       	rjmp	.-6      	; 0x20be <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    20c4:	9e b5       	in	r25, 0x2e	; 46
    20c6:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	84 17       	cp	r24, r20
    20cc:	b0 f3       	brcs	.-20     	; 0x20ba <SPI_ReadWrite_Block+0xe>
    20ce:	08 95       	ret

000020d0 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    20d0:	66 23       	and	r22, r22
    20d2:	59 f0       	breq	.+22     	; 0x20ea <SPI_Write_Block+0x1a>
    20d4:	e8 2f       	mov	r30, r24
    20d6:	f9 2f       	mov	r31, r25
    20d8:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    20da:	91 91       	ld	r25, Z+
    20dc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    20de:	0d b4       	in	r0, 0x2d	; 45
    20e0:	07 fe       	sbrs	r0, 7
    20e2:	fd cf       	rjmp	.-6      	; 0x20de <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	86 17       	cp	r24, r22
    20e8:	c0 f3       	brcs	.-16     	; 0x20da <SPI_Write_Block+0xa>
    20ea:	08 95       	ret

000020ec <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    20ec:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    20ee:	0d b4       	in	r0, 0x2d	; 45
    20f0:	07 fe       	sbrs	r0, 7
    20f2:	fd cf       	rjmp	.-6      	; 0x20ee <SPI_Write_Byte+0x2>
    return SPDR;
    20f4:	8e b5       	in	r24, 0x2e	; 46
}
    20f6:	08 95       	ret

000020f8 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <mirf_config+0xa>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2106:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2108:	80 e2       	ldi	r24, 0x20	; 32
    210a:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    210e:	8d e0       	ldi	r24, 0x0D	; 13
    2110:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2114:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2116:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2118:	83 e2       	ldi	r24, 0x23	; 35
    211a:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2124:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    2126:	8c e0       	ldi	r24, 0x0C	; 12
    2128:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    212a:	80 e8       	ldi	r24, 0x80	; 128
    212c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    212e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2130:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2132:	80 e3       	ldi	r24, 0x30	; 48
    2134:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2138:	8e 01       	movw	r16, r28
    213a:	0f 5f       	subi	r16, 0xFF	; 255
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	c8 01       	movw	r24, r16
    2140:	63 e0       	ldi	r22, 0x03	; 3
    2142:	0e 94 68 10 	call	0x20d0	; 0x20d0 <SPI_Write_Block>
    mirf_CSN_hi;
    2146:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    2148:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    214a:	8a e2       	ldi	r24, 0x2A	; 42
    214c:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2150:	c8 01       	movw	r24, r16
    2152:	63 e0       	ldi	r22, 0x03	; 3
    2154:	0e 94 68 10 	call	0x20d0	; 0x20d0 <SPI_Write_Block>
    mirf_CSN_hi;
    2158:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    215a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    215c:	81 e2       	ldi	r24, 0x21	; 33
    215e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2168:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    216a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    216c:	82 e2       	ldi	r24, 0x22	; 34
    216e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2178:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    217a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    217c:	84 e2       	ldi	r24, 0x24	; 36
    217e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2182:	82 e1       	ldi	r24, 0x12	; 18
    2184:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2188:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    218a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    218c:	85 e2       	ldi	r24, 0x25	; 37
    218e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2192:	88 e2       	ldi	r24, 0x28	; 40
    2194:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2198:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    219a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    219c:	81 e3       	ldi	r24, 0x31	; 49
    219e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21a2:	86 e0       	ldi	r24, 0x06	; 6
    21a4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    21a8:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    21aa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    21ac:	80 e5       	ldi	r24, 0x50	; 80
    21ae:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    21b2:	83 e7       	ldi	r24, 0x73	; 115
    21b4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    21b8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21bc:	8c e3       	ldi	r24, 0x3C	; 60
    21be:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    21c8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21cc:	8d e3       	ldi	r24, 0x3D	; 61
    21ce:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21d2:	86 e0       	ldi	r24, 0x06	; 6
    21d4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    21d8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    21da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    21dc:	80 e2       	ldi	r24, 0x20	; 32
    21de:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    21e2:	8f e0       	ldi	r24, 0x0F	; 15
    21e4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    21e8:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	08 95       	ret

000021fa <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    21fa:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    21fc:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    21fe:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <mirf_config>
}
    2202:	08 95       	ret

00002204 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    220a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    220c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    220e:	8a e2       	ldi	r24, 0x2A	; 42
    2210:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2214:	ce 01       	movw	r24, r28
    2216:	65 e0       	ldi	r22, 0x05	; 5
    2218:	0e 94 68 10 	call	0x20d0	; 0x20d0 <SPI_Write_Block>
    mirf_CSN_hi;
    221c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    221e:	2c 9a       	sbi	0x05, 4	; 5
}
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    222c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    222e:	80 e3       	ldi	r24, 0x30	; 48
    2230:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2234:	ce 01       	movw	r24, r28
    2236:	65 e0       	ldi	r22, 0x05	; 5
    2238:	0e 94 68 10 	call	0x20d0	; 0x20d0 <SPI_Write_Block>
    mirf_CSN_hi;
    223c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2244:	80 91 e6 03 	lds	r24, 0x03E6
    2248:	88 23       	and	r24, r24
    224a:	11 f0       	breq	.+4      	; 0x2250 <mirf_data_ready+0xc>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    224e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2250:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    2258:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    225a:	80 74       	andi	r24, 0x40	; 64
    225c:	08 95       	ret

0000225e <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    2268:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    226a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    226c:	87 e1       	ldi	r24, 0x17	; 23
    226e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2272:	be 01       	movw	r22, r28
    2274:	6f 5f       	subi	r22, 0xFF	; 255
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	cb 01       	movw	r24, r22
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	0e 94 56 10 	call	0x20ac	; 0x20ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2280:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    2282:	89 81       	ldd	r24, Y+1	; 0x01
}
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    228e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2290:	82 ee       	ldi	r24, 0xE2	; 226
    2292:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2296:	28 9a       	sbi	0x05, 0	; 5

}
    2298:	08 95       	ret

0000229a <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    22a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    22a2:	81 e6       	ldi	r24, 0x61	; 97
    22a4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    22a8:	ce 01       	movw	r24, r28
    22aa:	be 01       	movw	r22, r28
    22ac:	46 e0       	ldi	r20, 0x06	; 6
    22ae:	0e 94 56 10 	call	0x20ac	; 0x20ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    22b2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    22b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    22b6:	87 e2       	ldi	r24, 0x27	; 39
    22b8:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    22bc:	80 e4       	ldi	r24, 0x40	; 64
    22be:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    22c2:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    22d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    22d6:	8f 71       	andi	r24, 0x1F	; 31
    22d8:	80 62       	ori	r24, 0x20	; 32
    22da:	69 83       	std	Y+1, r22	; 0x01
    22dc:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    22e0:	69 81       	ldd	r22, Y+1	; 0x01
    22e2:	86 2f       	mov	r24, r22
    22e4:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    22e8:	28 9a       	sbi	0x05, 0	; 5
}
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	0f 92       	push	r0
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2302:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2304:	8f 71       	andi	r24, 0x1F	; 31
    2306:	49 83       	std	Y+1, r20	; 0x01
    2308:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    230c:	c8 01       	movw	r24, r16
    230e:	b8 01       	movw	r22, r16
    2310:	49 81       	ldd	r20, Y+1	; 0x01
    2312:	0e 94 56 10 	call	0x20ac	; 0x20ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2316:	28 9a       	sbi	0x05, 0	; 5
}
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	08 95       	ret

00002324 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	0f 92       	push	r0
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2334:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2336:	8f 71       	andi	r24, 0x1F	; 31
    2338:	80 62       	ori	r24, 0x20	; 32
    233a:	49 83       	std	Y+1, r20	; 0x01
    233c:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    2340:	c8 01       	movw	r24, r16
    2342:	49 81       	ldd	r20, Y+1	; 0x01
    2344:	64 2f       	mov	r22, r20
    2346:	0e 94 68 10 	call	0x20d0	; 0x20d0 <SPI_Write_Block>
    mirf_CSN_hi;
    234a:	28 9a       	sbi	0x05, 0	; 5
}
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    2368:	80 91 e6 03 	lds	r24, 0x03E6
    236c:	88 23       	and	r24, r24
    236e:	e1 f7       	brne	.-8      	; 0x2368 <mirf_send+0x10>

    mirf_CE_lo;
    2370:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	80 93 e6 03 	sts	0x03E6, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2378:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	69 83       	std	Y+1, r22	; 0x01
    237e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2382:	8a e4       	ldi	r24, 0x4A	; 74
    2384:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2388:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    238a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    238c:	81 ee       	ldi	r24, 0xE1	; 225
    238e:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    2392:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    2394:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    2396:	80 ea       	ldi	r24, 0xA0	; 160
    2398:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    239c:	c8 01       	movw	r24, r16
    239e:	69 81       	ldd	r22, Y+1	; 0x01
    23a0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    23a4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    23a6:	2c 9a       	sbi	0x05, 4	; 5
}
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	18 2f       	mov	r17, r24
    23c8:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    23ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    23cc:	81 ee       	ldi	r24, 0xE1	; 225
    23ce:	99 83       	std	Y+1, r25	; 0x01
    23d0:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    23d4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    23d6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    23d8:	88 ea       	ldi	r24, 0xA8	; 168
    23da:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    23de:	99 81       	ldd	r25, Y+1	; 0x01
    23e0:	00 23       	and	r16, r16
    23e2:	61 f0       	breq	.+24     	; 0x23fc <writeAckPayload+0x48>
    23e4:	61 2f       	mov	r22, r17
    23e6:	79 2f       	mov	r23, r25
    23e8:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    23ea:	f7 01       	movw	r30, r14
    23ec:	81 91       	ld	r24, Z+
    23ee:	7f 01       	movw	r14, r30
    23f0:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    23f4:	8e 2d       	mov	r24, r14
    23f6:	81 1b       	sub	r24, r17
    23f8:	80 17       	cp	r24, r16
    23fa:	b8 f3       	brcs	.-18     	; 0x23ea <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    23fc:	28 9a       	sbi	0x05, 0	; 5


}
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	08 95       	ret

0000240e <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    240e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2410:	81 ee       	ldi	r24, 0xE1	; 225
    2412:	0e 94 76 10 	call	0x20ec	; 0x20ec <SPI_Write_Byte>
    mirf_CSN_hi;
    2416:	28 9a       	sbi	0x05, 0	; 5

}
    2418:	08 95       	ret

0000241a <e_start_agendas_processing>:
	// Timer2 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of 10 KHz => 8000000/10000 = 800 (too much for 8-bits)
	// We use a 1/8 prescaler: 1000000/10000 = 100
	// The CTC mode let us chose the TOP value to be 100
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    241a:	e0 eb       	ldi	r30, 0xB0	; 176
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	82 60       	ori	r24, 0x02	; 2
    2422:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS01);		// 1/8 prescaler
    2424:	e1 eb       	ldi	r30, 0xB1	; 177
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	82 60       	ori	r24, 0x02	; 2
    242c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR2A = 100;
    242e:	84 e6       	ldi	r24, 0x64	; 100
    2430:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 |= (1 << OCIE2A);
    2434:	e0 e7       	ldi	r30, 0x70	; 112
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	82 60       	ori	r24, 0x02	; 2
    243c:	80 83       	st	Z, r24
//	// Timer4 clock input = Fosc/2 = 2 MHz
//	// Period time = PR * 1/(Fosc/2) => PR = period time * Fosc/2
//	// We need a period time of 100 us => 0.0001 * 2000000 = 200
//	OpenTimer4(T4_ON | T4_PS_1_1 | T4_32BIT_MODE_OFF | T4_SOURCE_INT, 200);

}
    243e:	08 95       	ret

00002440 <e_end_agendas_processing>:
 * use \ref e_destroy_agenda(void (*func)(void)) for that.
 * \sa e_destroy_agenda
 */
void e_end_agendas_processing(void)
{
	TCCR2B &= ~(1 << CS01);
    2440:	e1 eb       	ldi	r30, 0xB1	; 177
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	8d 7f       	andi	r24, 0xFD	; 253
    2448:	80 83       	st	Z, r24
	//T4CONbits.TON = 0;    // disable Timer2
}
    244a:	08 95       	ret

0000244c <e_activate_agenda>:
 * \param func	 function called if the cycle value is reached by the counter
 * \param cycle      cycle value in millisec/10
 * \return \ref EXIT_OK if the agenda has been created, exit the programme otherwise
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	ec 01       	movw	r28, r24
    245a:	7b 01       	movw	r14, r22
	Agenda *current = agenda_list;
    245c:	00 91 25 03 	lds	r16, 0x0325
    2460:	10 91 26 03 	lds	r17, 0x0326

	while (current)
    2464:	01 15       	cp	r16, r1
    2466:	11 05       	cpc	r17, r1
    2468:	89 f0       	breq	.+34     	; 0x248c <e_activate_agenda+0x40>
	{
		if (current->function == func)
    246a:	f8 01       	movw	r30, r16
    246c:	85 81       	ldd	r24, Z+5	; 0x05
    246e:	96 81       	ldd	r25, Z+6	; 0x06
    2470:	8c 17       	cp	r24, r28
    2472:	9d 07       	cpc	r25, r29
    2474:	31 f4       	brne	.+12     	; 0x2482 <e_activate_agenda+0x36>
    2476:	1f c0       	rjmp	.+62     	; 0x24b6 <e_activate_agenda+0x6a>
    2478:	85 81       	ldd	r24, Z+5	; 0x05
    247a:	96 81       	ldd	r25, Z+6	; 0x06
    247c:	8c 17       	cp	r24, r28
    247e:	9d 07       	cpc	r25, r29
    2480:	d1 f0       	breq	.+52     	; 0x24b6 <e_activate_agenda+0x6a>
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
    2482:	07 80       	ldd	r0, Z+7	; 0x07
    2484:	f0 85       	ldd	r31, Z+8	; 0x08
    2486:	e0 2d       	mov	r30, r0
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    2488:	30 97       	sbiw	r30, 0x00	; 0
    248a:	b1 f7       	brne	.-20     	; 0x2478 <e_activate_agenda+0x2c>
		if (current->function == func)
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
    248c:	89 e0       	ldi	r24, 0x09	; 9
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 c6 20 	call	0x418c	; 0x418c <malloc>
    2494:	fc 01       	movw	r30, r24
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	b9 f0       	breq	.+46     	; 0x24c8 <e_activate_agenda+0x7c>
		exit (1); //(EXIT_FAILURE);

	current->cycle = cycle;
    249a:	f1 82       	std	Z+1, r15	; 0x01
    249c:	e0 82       	st	Z, r14
	current->counter = 0;
    249e:	13 82       	std	Z+3, r1	; 0x03
    24a0:	12 82       	std	Z+2, r1	; 0x02
	current->activate = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	84 83       	std	Z+4, r24	; 0x04
	current->function = func;
    24a6:	d6 83       	std	Z+6, r29	; 0x06
    24a8:	c5 83       	std	Z+5, r28	; 0x05
	current->next = agenda_list;
    24aa:	10 87       	std	Z+8, r17	; 0x08
    24ac:	07 83       	std	Z+7, r16	; 0x07

	agenda_list = current;
    24ae:	f0 93 26 03 	sts	0x0326, r31
    24b2:	e0 93 25 03 	sts	0x0325, r30
	return(EXIT_OK);
}
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	08 95       	ret
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
		exit (1); //(EXIT_FAILURE);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 04 24 	call	0x4808	; 0x4808 <_exit>

000024d0 <e_destroy_agenda>:
 * \return \ref EXIT_OK if the agenda has been destroyed, \ref AG_NOT_FOUND otherwise
 */
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;
    24d0:	a0 91 25 03 	lds	r26, 0x0325
    24d4:	b0 91 26 03 	lds	r27, 0x0326

	while (current)
    24d8:	10 97       	sbiw	r26, 0x00	; 0
    24da:	a1 f0       	breq	.+40     	; 0x2504 <e_destroy_agenda+0x34>
	{
		if (current->function == func)
    24dc:	15 96       	adiw	r26, 0x05	; 5
    24de:	2d 91       	ld	r18, X+
    24e0:	3c 91       	ld	r19, X
    24e2:	16 97       	sbiw	r26, 0x06	; 6
    24e4:	28 17       	cp	r18, r24
    24e6:	39 07       	cpc	r19, r25
    24e8:	39 f4       	brne	.+14     	; 0x24f8 <e_destroy_agenda+0x28>
    24ea:	1d c0       	rjmp	.+58     	; 0x2526 <e_destroy_agenda+0x56>
    24ec:	25 81       	ldd	r18, Z+5	; 0x05
    24ee:	36 81       	ldd	r19, Z+6	; 0x06
    24f0:	28 17       	cp	r18, r24
    24f2:	39 07       	cpc	r19, r25
    24f4:	59 f0       	breq	.+22     	; 0x250c <e_destroy_agenda+0x3c>
    24f6:	df 01       	movw	r26, r30
			return(EXIT_OK);
		}			
		else
		{
			preceding = current;
			current = current->next;
    24f8:	17 96       	adiw	r26, 0x07	; 7
    24fa:	ed 91       	ld	r30, X+
    24fc:	fc 91       	ld	r31, X
    24fe:	18 97       	sbiw	r26, 0x08	; 8
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;

	while (current)
    2500:	30 97       	sbiw	r30, 0x00	; 0
    2502:	a1 f7       	brne	.-24     	; 0x24ec <e_destroy_agenda+0x1c>
		{
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
    2504:	22 e0       	ldi	r18, 0x02	; 2
    2506:	30 e0       	ldi	r19, 0x00	; 0
}
    2508:	c9 01       	movw	r24, r18
    250a:	08 95       	ret
	while (current)
	{
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
    250c:	87 81       	ldd	r24, Z+7	; 0x07
    250e:	90 85       	ldd	r25, Z+8	; 0x08
    2510:	18 96       	adiw	r26, 0x08	; 8
    2512:	9c 93       	st	X, r25
    2514:	8e 93       	st	-X, r24
    2516:	17 97       	sbiw	r26, 0x07	; 7
			else
				agenda_list		= current->next;

			free(current);
    2518:	cf 01       	movw	r24, r30
    251a:	0e 94 60 21 	call	0x42c0	; 0x42c0 <free>
			return(EXIT_OK);
    251e:	21 e0       	ldi	r18, 0x01	; 1
    2520:	30 e0       	ldi	r19, 0x00	; 0
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
}
    2522:	c9 01       	movw	r24, r18
    2524:	08 95       	ret
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
			else
				agenda_list		= current->next;
    2526:	17 96       	adiw	r26, 0x07	; 7
    2528:	8d 91       	ld	r24, X+
    252a:	9c 91       	ld	r25, X
    252c:	18 97       	sbiw	r26, 0x08	; 8
    252e:	90 93 26 03 	sts	0x0326, r25
    2532:	80 93 25 03 	sts	0x0325, r24
    2536:	fd 01       	movw	r30, r26
    2538:	ef cf       	rjmp	.-34     	; 0x2518 <e_destroy_agenda+0x48>

0000253a <e_set_agenda_cycle>:
 * \return \ref EXIT_OK if the cycle of the agenda has been modified,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;
    253a:	e0 91 25 03 	lds	r30, 0x0325
    253e:	f0 91 26 03 	lds	r31, 0x0326

	while (current)
    2542:	30 97       	sbiw	r30, 0x00	; 0
    2544:	31 f4       	brne	.+12     	; 0x2552 <e_set_agenda_cycle+0x18>
    2546:	10 c0       	rjmp	.+32     	; 0x2568 <e_set_agenda_cycle+0x2e>
		{
			current->cycle = cycle;
			return(EXIT_OK);
		}
		else
			current = current->next;
    2548:	07 80       	ldd	r0, Z+7	; 0x07
    254a:	f0 85       	ldd	r31, Z+8	; 0x08
    254c:	e0 2d       	mov	r30, r0
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    254e:	30 97       	sbiw	r30, 0x00	; 0
    2550:	59 f0       	breq	.+22     	; 0x2568 <e_set_agenda_cycle+0x2e>
	{
		if (current->function == func)
    2552:	25 81       	ldd	r18, Z+5	; 0x05
    2554:	36 81       	ldd	r19, Z+6	; 0x06
    2556:	28 17       	cp	r18, r24
    2558:	39 07       	cpc	r19, r25
    255a:	b1 f7       	brne	.-20     	; 0x2548 <e_set_agenda_cycle+0xe>
		{
			current->cycle = cycle;
    255c:	71 83       	std	Z+1, r23	; 0x01
    255e:	60 83       	st	Z, r22
			return(EXIT_OK);
    2560:	21 e0       	ldi	r18, 0x01	; 1
    2562:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    2564:	c9 01       	movw	r24, r18
    2566:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2568:	22 e0       	ldi	r18, 0x02	; 2
    256a:	30 e0       	ldi	r19, 0x00	; 0
}
    256c:	c9 01       	movw	r24, r18
    256e:	08 95       	ret

00002570 <e_reset_agenda>:
 * \ref e_pause_agenda(void (*func)(void))
 * \sa e_pause_agenda
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    2570:	e0 91 25 03 	lds	r30, 0x0325
    2574:	f0 91 26 03 	lds	r31, 0x0326

	while (current)
    2578:	30 97       	sbiw	r30, 0x00	; 0
    257a:	31 f4       	brne	.+12     	; 0x2588 <e_reset_agenda+0x18>
    257c:	10 c0       	rjmp	.+32     	; 0x259e <e_reset_agenda+0x2e>
		{
			current->counter = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    257e:	07 80       	ldd	r0, Z+7	; 0x07
    2580:	f0 85       	ldd	r31, Z+8	; 0x08
    2582:	e0 2d       	mov	r30, r0
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;

	while (current)
    2584:	30 97       	sbiw	r30, 0x00	; 0
    2586:	59 f0       	breq	.+22     	; 0x259e <e_reset_agenda+0x2e>
	{
		if (current->function == func)
    2588:	25 81       	ldd	r18, Z+5	; 0x05
    258a:	36 81       	ldd	r19, Z+6	; 0x06
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	b1 f7       	brne	.-20     	; 0x257e <e_reset_agenda+0xe>
		{
			current->counter = 0;
    2592:	13 82       	std	Z+3, r1	; 0x03
    2594:	12 82       	std	Z+2, r1	; 0x02
			return(EXIT_OK);
    2596:	21 e0       	ldi	r18, 0x01	; 1
    2598:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    259a:	c9 01       	movw	r24, r18
    259c:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    259e:	22 e0       	ldi	r18, 0x02	; 2
    25a0:	30 e0       	ldi	r19, 0x00	; 0
}
    25a2:	c9 01       	movw	r24, r18
    25a4:	08 95       	ret

000025a6 <e_pause_agenda>:
 * \return \ref EXIT_OK the agenda has been paused,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    25a6:	e0 91 25 03 	lds	r30, 0x0325
    25aa:	f0 91 26 03 	lds	r31, 0x0326
	
	while (current)
    25ae:	30 97       	sbiw	r30, 0x00	; 0
    25b0:	31 f4       	brne	.+12     	; 0x25be <e_pause_agenda+0x18>
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <e_pause_agenda+0x2c>
		{
			current->activate = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    25b4:	07 80       	ldd	r0, Z+7	; 0x07
    25b6:	f0 85       	ldd	r31, Z+8	; 0x08
    25b8:	e0 2d       	mov	r30, r0
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    25ba:	30 97       	sbiw	r30, 0x00	; 0
    25bc:	51 f0       	breq	.+20     	; 0x25d2 <e_pause_agenda+0x2c>
	{
		if (current->function == func)
    25be:	25 81       	ldd	r18, Z+5	; 0x05
    25c0:	36 81       	ldd	r19, Z+6	; 0x06
    25c2:	28 17       	cp	r18, r24
    25c4:	39 07       	cpc	r19, r25
    25c6:	b1 f7       	brne	.-20     	; 0x25b4 <e_pause_agenda+0xe>
		{
			current->activate = 0;
    25c8:	14 82       	std	Z+4, r1	; 0x04
			return(EXIT_OK);
    25ca:	21 e0       	ldi	r18, 0x01	; 1
    25cc:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    25ce:	c9 01       	movw	r24, r18
    25d0:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    25d2:	22 e0       	ldi	r18, 0x02	; 2
    25d4:	30 e0       	ldi	r19, 0x00	; 0
	
}
    25d6:	c9 01       	movw	r24, r18
    25d8:	08 95       	ret

000025da <e_restart_agenda>:
 *         \ref AG_NOT_FOUND otherwise
 * \sa e_pause_agenda
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    25da:	e0 91 25 03 	lds	r30, 0x0325
    25de:	f0 91 26 03 	lds	r31, 0x0326
	
	while (current)
    25e2:	30 97       	sbiw	r30, 0x00	; 0
    25e4:	31 f4       	brne	.+12     	; 0x25f2 <e_restart_agenda+0x18>
    25e6:	10 c0       	rjmp	.+32     	; 0x2608 <e_restart_agenda+0x2e>
		{
			current->activate = 1;
			return(EXIT_OK);
		}
		else
			current = current->next;
    25e8:	07 80       	ldd	r0, Z+7	; 0x07
    25ea:	f0 85       	ldd	r31, Z+8	; 0x08
    25ec:	e0 2d       	mov	r30, r0
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    25ee:	30 97       	sbiw	r30, 0x00	; 0
    25f0:	59 f0       	breq	.+22     	; 0x2608 <e_restart_agenda+0x2e>
	{
		if (current->function == func)
    25f2:	25 81       	ldd	r18, Z+5	; 0x05
    25f4:	36 81       	ldd	r19, Z+6	; 0x06
    25f6:	28 17       	cp	r18, r24
    25f8:	39 07       	cpc	r19, r25
    25fa:	b1 f7       	brne	.-20     	; 0x25e8 <e_restart_agenda+0xe>
		{
			current->activate = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	84 83       	std	Z+4, r24	; 0x04
			return(EXIT_OK);
    2600:	21 e0       	ldi	r18, 0x01	; 1
    2602:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    2604:	c9 01       	movw	r24, r18
    2606:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2608:	22 e0       	ldi	r18, 0x02	; 2
    260a:	30 e0       	ldi	r19, 0x00	; 0
	
}
    260c:	c9 01       	movw	r24, r18
    260e:	08 95       	ret

00002610 <e_init_remote_control>:

/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) // initialisation for IR interruptions on INT0
{

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    2610:	e8 e6       	ldi	r30, 0x68	; 104
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	82 60       	ori	r24, 0x02	; 2
    2618:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    261a:	ec e6       	ldi	r30, 0x6C	; 108
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	80 83       	st	Z, r24
	IFS0bits.INT0IF = 0;      //clear to enable interrupt
	IEC0bits.INT0IE = 1;      //enable interrupt on INT0  
	return;
*/

	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    2624:	e0 eb       	ldi	r30, 0xB0	; 176
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	82 60       	ori	r24, 0x02	; 2
    262c:	80 83       	st	Z, r24

}
    262e:	08 95       	ret

00002630 <__vector_10>:

ISR(PCINT1_vect) {
    2630:	1f 92       	push	r1
    2632:	0f 92       	push	r0
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	0f 92       	push	r0
    2638:	11 24       	eor	r1, r1
    263a:	8f 93       	push	r24
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}


	if(bit_is_clear(PINJ, 6)) {
    263c:	80 91 03 01 	lds	r24, 0x0103
    2640:	86 fd       	sbrc	r24, 6
    2642:	1d c0       	rjmp	.+58     	; 0x267e <__vector_10+0x4e>
			TCCR1A &= ~(1 << COM1C1);
			PORTB &= ~(1 << 7);
		}
*/
		//IEC0bits.INT0IE = 0;   			//disable interrup from falling edge
		PCICR &= ~(1 << PCIE1);
    2644:	80 91 68 00 	lds	r24, 0x0068
    2648:	8d 7f       	andi	r24, 0xFD	; 253
    264a:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 &= ~(1 << PCINT15);
    264e:	80 91 6c 00 	lds	r24, 0x006C
    2652:	8f 77       	andi	r24, 0x7F	; 127
    2654:	80 93 6c 00 	sts	0x006C, r24
		// we need 2 ms of delay:
		// 2/0.128 = 15.6
		//OCR2A = 16;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 2/0.032 = 63 => 2.016 ms
		OCR2A = 64;
    2658:	80 e4       	ldi	r24, 0x40	; 64
    265a:	80 93 b3 00 	sts	0x00B3, r24
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    265e:	80 91 b1 00 	lds	r24, 0x00B1
    2662:	86 60       	ori	r24, 0x06	; 6
    2664:	80 93 b1 00 	sts	0x00B1, r24
		TIMSK2 |= (1 << OCIE2A);		
    2668:	80 91 70 00 	lds	r24, 0x0070
    266c:	82 60       	ori	r24, 0x02	; 2
    266e:	80 93 70 00 	sts	0x0070, r24
				
//		PORTB |= (1 << 5);

		check_temp = address_temp = data_temp = 0;
    2672:	10 92 2a 03 	sts	0x032A, r1
    2676:	10 92 2b 03 	sts	0x032B, r1
    267a:	10 92 2c 03 	sts	0x032C, r1
		return;
	}
}
    267e:	8f 91       	pop	r24
    2680:	0f 90       	pop	r0
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	0f 90       	pop	r0
    2686:	1f 90       	pop	r1
    2688:	18 95       	reti

0000268a <e_read_remote_control>:
{
	static int i = -1;
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    268a:	80 91 03 02 	lds	r24, 0x0203
    268e:	90 91 04 02 	lds	r25, 0x0204
    2692:	2f ef       	ldi	r18, 0xFF	; 255
    2694:	8f 3f       	cpi	r24, 0xFF	; 255
    2696:	92 07       	cpc	r25, r18
    2698:	09 f4       	brne	.+2      	; 0x269c <e_read_remote_control+0x12>
    269a:	6a c0       	rjmp	.+212    	; 0x2770 <e_read_remote_control+0xe6>
				i=0;
			}
	} 	
//	e_set_led(2,1);
	
	else if (i == 1)	// check bit read and change timer period
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <e_read_remote_control+0x1a>
    26a2:	76 c0       	rjmp	.+236    	; 0x2790 <e_read_remote_control+0x106>
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
		TIMSK2 |= (1 << OCIE2A);

		//e_set_led(1,1);
	} 
	else if ((i > 1) && (i < 7)) // we read address
    26a4:	9c 01       	movw	r18, r24
    26a6:	22 50       	subi	r18, 0x02	; 2
    26a8:	30 40       	sbci	r19, 0x00	; 0
    26aa:	25 30       	cpi	r18, 0x05	; 5
    26ac:	31 05       	cpc	r19, r1
    26ae:	78 f5       	brcc	.+94     	; 0x270e <e_read_remote_control+0x84>
//	e_set_led(4,1);
		
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 55;
    26b0:	27 e3       	ldi	r18, 0x37	; 55
    26b2:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    26b6:	20 91 b1 00 	lds	r18, 0x00B1
    26ba:	26 60       	ori	r18, 0x06	; 6
    26bc:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    26c0:	20 91 70 00 	lds	r18, 0x0070
    26c4:	22 60       	ori	r18, 0x02	; 2
    26c6:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    26ca:	20 91 03 01 	lds	r18, 0x0103
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	20 74       	andi	r18, 0x40	; 64
    26d2:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6-i;
    26d4:	00 24       	eor	r0, r0
    26d6:	22 0f       	add	r18, r18
    26d8:	33 1f       	adc	r19, r19
    26da:	00 1c       	adc	r0, r0
    26dc:	22 0f       	add	r18, r18
    26de:	33 1f       	adc	r19, r19
    26e0:	00 1c       	adc	r0, r0
    26e2:	23 2f       	mov	r18, r19
    26e4:	30 2d       	mov	r19, r0
    26e6:	46 e0       	ldi	r20, 0x06	; 6
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	48 1b       	sub	r20, r24
    26ec:	59 0b       	sbc	r21, r25
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <e_read_remote_control+0x6a>
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	4a 95       	dec	r20
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <e_read_remote_control+0x66>
		address_temp += temp;
    26f8:	40 91 2b 03 	lds	r20, 0x032B
    26fc:	42 0f       	add	r20, r18
    26fe:	40 93 2b 03 	sts	0x032B, r20
		PORTB |= (1 << 6);
	} 
	
	if(i!=-1)
		i++;	
}
    2702:	01 96       	adiw	r24, 0x01	; 1

		PORTB |= (1 << 6);
	} 
	
	if(i!=-1)
		i++;	
    2704:	90 93 04 02 	sts	0x0204, r25
    2708:	80 93 03 02 	sts	0x0203, r24
    270c:	08 95       	ret

		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;
	}
	else if ((i > 6) && (i < 13 )) // we read data
    270e:	9c 01       	movw	r18, r24
    2710:	27 50       	subi	r18, 0x07	; 7
    2712:	30 40       	sbci	r19, 0x00	; 0
    2714:	26 30       	cpi	r18, 0x06	; 6
    2716:	31 05       	cpc	r19, r1
    2718:	08 f0       	brcs	.+2      	; 0x271c <e_read_remote_control+0x92>
    271a:	71 c0       	rjmp	.+226    	; 0x27fe <e_read_remote_control+0x174>
//			e_set_led(5,1);

		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 54;
    271c:	26 e3       	ldi	r18, 0x36	; 54
    271e:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2722:	20 91 b1 00 	lds	r18, 0x00B1
    2726:	26 60       	ori	r18, 0x06	; 6
    2728:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    272c:	20 91 70 00 	lds	r18, 0x0070
    2730:	22 60       	ori	r18, 0x02	; 2
    2732:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    2736:	20 91 03 01 	lds	r18, 0x0103
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	20 74       	andi	r18, 0x40	; 64
    273e:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6+6-i;
    2740:	00 24       	eor	r0, r0
    2742:	22 0f       	add	r18, r18
    2744:	33 1f       	adc	r19, r19
    2746:	00 1c       	adc	r0, r0
    2748:	22 0f       	add	r18, r18
    274a:	33 1f       	adc	r19, r19
    274c:	00 1c       	adc	r0, r0
    274e:	23 2f       	mov	r18, r19
    2750:	30 2d       	mov	r19, r0
    2752:	4c e0       	ldi	r20, 0x0C	; 12
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	48 1b       	sub	r20, r24
    2758:	59 0b       	sbc	r21, r25
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <e_read_remote_control+0xd6>
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	4a 95       	dec	r20
    2762:	e2 f7       	brpl	.-8      	; 0x275c <e_read_remote_control+0xd2>
		data_temp += temp;
    2764:	40 91 2a 03 	lds	r20, 0x032A
    2768:	42 0f       	add	r20, r18
    276a:	40 93 2a 03 	sts	0x032A, r20
    276e:	c9 cf       	rjmp	.-110    	; 0x2702 <e_read_remote_control+0x78>
//			SetDCOC3PWM_GB(64,64);
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

		if(REMOTE){
    2770:	20 91 03 01 	lds	r18, 0x0103
    2774:	26 ff       	sbrs	r18, 6
    2776:	29 c0       	rjmp	.+82     	; 0x27ca <e_read_remote_control+0x140>
		//if(bit_is_set(PINJ,6)) {
			//if high it is only a noise
				//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
				//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
				PCICR |= (1 << PCIE1);
    2778:	20 91 68 00 	lds	r18, 0x0068
    277c:	22 60       	ori	r18, 0x02	; 2
    277e:	20 93 68 00 	sts	0x0068, r18
				PCMSK1 |= (1 << PCINT15);
    2782:	20 91 6c 00 	lds	r18, 0x006C
    2786:	20 68       	ori	r18, 0x80	; 128
    2788:	20 93 6c 00 	sts	0x006C, r18
				//e_destroy_agenda(e_read_remote_control);
				i = -1;
				PORTB |= (1 << 6);
    278c:	2e 9a       	sbi	0x05, 6	; 5
    278e:	08 95       	ret
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

//	e_set_led(3,1);
		check_temp = REMOTE;	   // read the check bit
    2790:	20 91 03 01 	lds	r18, 0x0103
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	20 74       	andi	r18, 0x40	; 64
    2798:	30 70       	andi	r19, 0x00	; 0
    279a:	02 2e       	mov	r0, r18
    279c:	23 2f       	mov	r18, r19
    279e:	00 0c       	add	r0, r0
    27a0:	22 1f       	adc	r18, r18
    27a2:	33 0b       	sbc	r19, r19
    27a4:	00 0c       	add	r0, r0
    27a6:	22 1f       	adc	r18, r18
    27a8:	33 1f       	adc	r19, r19
    27aa:	20 93 2c 03 	sts	0x032C, r18
		//e_set_agenda_cycle(e_read_remote_control, 18); //cycle value is 1.778[ms]
		// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
    27ae:	25 e3       	ldi	r18, 0x35	; 53
    27b0:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    27b4:	20 91 b1 00 	lds	r18, 0x00B1
    27b8:	26 60       	ori	r18, 0x06	; 6
    27ba:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    27be:	20 91 70 00 	lds	r18, 0x0070
    27c2:	22 60       	ori	r18, 0x02	; 2
    27c4:	20 93 70 00 	sts	0x0070, r18
    27c8:	9c cf       	rjmp	.-200    	; 0x2702 <e_read_remote_control+0x78>
				//e_set_agenda_cycle(e_read_remote_control, 6); //cycle value is 0.6 to go to check bit[ms]
				// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
				//OCR2A = 5;
				//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
				// 0.6/0.032 = 19 => 0.608
				OCR2A = 28;
    27ca:	8c e1       	ldi	r24, 0x1C	; 28
    27cc:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    27d0:	80 91 b1 00 	lds	r24, 0x00B1
    27d4:	86 60       	ori	r24, 0x06	; 6
    27d6:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);									
    27da:	80 91 70 00 	lds	r24, 0x0070
    27de:	82 60       	ori	r24, 0x02	; 2
    27e0:	80 93 70 00 	sts	0x0070, r24

				check_temp = address_temp = data_temp = 0;
    27e4:	10 92 2a 03 	sts	0x032A, r1
    27e8:	10 92 2b 03 	sts	0x032B, r1
    27ec:	10 92 2c 03 	sts	0x032C, r1
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0

		PORTB |= (1 << 6);
	} 
	
	if(i!=-1)
		i++;	
    27f4:	90 93 04 02 	sts	0x0204, r25
    27f8:	80 93 03 02 	sts	0x0203, r24
    27fc:	08 95       	ret
		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;
	}
	
	else if (i == 13) // last bit read
    27fe:	8d 30       	cpi	r24, 0x0D	; 13
    2800:	91 05       	cpc	r25, r1
    2802:	09 f0       	breq	.+2      	; 0x2806 <e_read_remote_control+0x17c>
    2804:	7e cf       	rjmp	.-260    	; 0x2702 <e_read_remote_control+0x78>
//		}

		//e_set_led(1,0);
		//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
		//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
		PCICR |= (1 << PCIE1);
    2806:	80 91 68 00 	lds	r24, 0x0068
    280a:	82 60       	ori	r24, 0x02	; 2
    280c:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);
    2810:	80 91 6c 00 	lds	r24, 0x006C
    2814:	80 68       	ori	r24, 0x80	; 128
    2816:	80 93 6c 00 	sts	0x006C, r24
		//e_destroy_agenda(e_read_remote_control);
		i = -1;
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	9f ef       	ldi	r25, 0xFF	; 255
    281e:	90 93 04 02 	sts	0x0204, r25
    2822:	80 93 03 02 	sts	0x0203, r24
		check = check_temp;
    2826:	80 91 2c 03 	lds	r24, 0x032C
    282a:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    282e:	80 91 2b 03 	lds	r24, 0x032B
    2832:	80 93 27 03 	sts	0x0327, r24
		data_ir = data_temp;
    2836:	80 91 2a 03 	lds	r24, 0x032A
    283a:	80 93 28 03 	sts	0x0328, r24
		command_received=1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	80 93 cb 03 	sts	0x03CB, r24

		PORTB |= (1 << 6);
    2844:	2e 9a       	sbi	0x05, 6	; 5
    2846:	08 95       	ret

00002848 <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    2848:	80 91 00 02 	lds	r24, 0x0200
    284c:	08 95       	ret

0000284e <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    284e:	80 91 27 03 	lds	r24, 0x0327
    2852:	08 95       	ret

00002854 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    2854:	80 91 28 03 	lds	r24, 0x0328
    2858:	08 95       	ret

0000285a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    285a:	1f 92       	push	r1
    285c:	0f 92       	push	r0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	0f 92       	push	r0
    2862:	11 24       	eor	r1, r1
    2864:	2f 93       	push	r18
    2866:	3f 93       	push	r19
    2868:	4f 93       	push	r20
    286a:	5f 93       	push	r21
    286c:	8f 93       	push	r24
    286e:	9f 93       	push	r25

//	PORTB ^= (1 << 5);

//	PORTB &= ~(1 << 5);

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);
    2870:	80 91 b1 00 	lds	r24, 0x00B1
    2874:	88 7f       	andi	r24, 0xF8	; 248
    2876:	80 93 b1 00 	sts	0x00B1, r24

	//e_read_remote_control();
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    287a:	80 91 01 02 	lds	r24, 0x0201
    287e:	90 91 02 02 	lds	r25, 0x0202
    2882:	2f ef       	ldi	r18, 0xFF	; 255
    2884:	8f 3f       	cpi	r24, 0xFF	; 255
    2886:	92 07       	cpc	r25, r18
    2888:	09 f4       	brne	.+2      	; 0x288c <__vector_13+0x32>
    288a:	74 c0       	rjmp	.+232    	; 0x2974 <__vector_13+0x11a>
			TIMSK2 |= (1 << OCIE2A);									

			check_temp = address_temp = data_temp = 0;
			i=0;
		}
	} else if (i == 1)	{ // check bit read and change timer period
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	91 05       	cpc	r25, r1
    2890:	09 f4       	brne	.+2      	; 0x2894 <__vector_13+0x3a>
    2892:	7f c0       	rjmp	.+254    	; 0x2992 <__vector_13+0x138>
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
		TIMSK2 |= (1 << OCIE2A);

	} else if ((i > 1) && (i < 7)) { // we read address
    2894:	9c 01       	movw	r18, r24
    2896:	22 50       	subi	r18, 0x02	; 2
    2898:	30 40       	sbci	r19, 0x00	; 0
    289a:	25 30       	cpi	r18, 0x05	; 5
    289c:	31 05       	cpc	r19, r1
    289e:	c8 f5       	brcc	.+114    	; 0x2912 <__vector_13+0xb8>
		
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 55;
    28a0:	27 e3       	ldi	r18, 0x37	; 55
    28a2:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    28a6:	20 91 b1 00 	lds	r18, 0x00B1
    28aa:	26 60       	ori	r18, 0x06	; 6
    28ac:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    28b0:	20 91 70 00 	lds	r18, 0x0070
    28b4:	22 60       	ori	r18, 0x02	; 2
    28b6:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    28ba:	20 91 03 01 	lds	r18, 0x0103
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	20 74       	andi	r18, 0x40	; 64
    28c2:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6-i;
    28c4:	00 24       	eor	r0, r0
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	00 1c       	adc	r0, r0
    28cc:	22 0f       	add	r18, r18
    28ce:	33 1f       	adc	r19, r19
    28d0:	00 1c       	adc	r0, r0
    28d2:	23 2f       	mov	r18, r19
    28d4:	30 2d       	mov	r19, r0
    28d6:	46 e0       	ldi	r20, 0x06	; 6
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	48 1b       	sub	r20, r24
    28dc:	59 0b       	sbc	r21, r25
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <__vector_13+0x8a>
    28e0:	22 0f       	add	r18, r18
    28e2:	33 1f       	adc	r19, r19
    28e4:	4a 95       	dec	r20
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <__vector_13+0x86>
		address_temp += temp;
    28e8:	40 91 2b 03 	lds	r20, 0x032B
    28ec:	42 0f       	add	r20, r18
    28ee:	40 93 2b 03 	sts	0x032B, r20
	if(i!=-1)
		i++;

//	PORTB |= (1 << 5);

}
    28f2:	01 96       	adiw	r24, 0x01	; 1

//		PORTB |= (1 << 6);
	} 
	
	if(i!=-1)
		i++;
    28f4:	90 93 02 02 	sts	0x0202, r25
    28f8:	80 93 01 02 	sts	0x0201, r24

//	PORTB |= (1 << 5);

}
    28fc:	9f 91       	pop	r25
    28fe:	8f 91       	pop	r24
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0f 90       	pop	r0
    290e:	1f 90       	pop	r1
    2910:	18 95       	reti

		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;

	} else if ((i > 6) && (i < 13 )) { // we read data
    2912:	9c 01       	movw	r18, r24
    2914:	27 50       	subi	r18, 0x07	; 7
    2916:	30 40       	sbci	r19, 0x00	; 0
    2918:	26 30       	cpi	r18, 0x06	; 6
    291a:	31 05       	cpc	r19, r1
    291c:	08 f0       	brcs	.+2      	; 0x2920 <__vector_13+0xc6>
    291e:	6c c0       	rjmp	.+216    	; 0x29f8 <__vector_13+0x19e>

		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56
		OCR2A = 54;
    2920:	26 e3       	ldi	r18, 0x36	; 54
    2922:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    2926:	20 91 b1 00 	lds	r18, 0x00B1
    292a:	26 60       	ori	r18, 0x06	; 6
    292c:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    2930:	20 91 70 00 	lds	r18, 0x0070
    2934:	22 60       	ori	r18, 0x02	; 2
    2936:	20 93 70 00 	sts	0x0070, r18

		unsigned char temp = REMOTE;
    293a:	20 91 03 01 	lds	r18, 0x0103
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	20 74       	andi	r18, 0x40	; 64
    2942:	30 70       	andi	r19, 0x00	; 0
		temp <<= 6+6-i;
    2944:	00 24       	eor	r0, r0
    2946:	22 0f       	add	r18, r18
    2948:	33 1f       	adc	r19, r19
    294a:	00 1c       	adc	r0, r0
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	00 1c       	adc	r0, r0
    2952:	23 2f       	mov	r18, r19
    2954:	30 2d       	mov	r19, r0
    2956:	4c e0       	ldi	r20, 0x0C	; 12
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	48 1b       	sub	r20, r24
    295c:	59 0b       	sbc	r21, r25
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <__vector_13+0x10a>
    2960:	22 0f       	add	r18, r18
    2962:	33 1f       	adc	r19, r19
    2964:	4a 95       	dec	r20
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <__vector_13+0x106>
		data_temp += temp;
    2968:	40 91 2a 03 	lds	r20, 0x032A
    296c:	42 0f       	add	r20, r18
    296e:	40 93 2a 03 	sts	0x032A, r20
    2972:	bf cf       	rjmp	.-130    	; 0x28f2 <__vector_13+0x98>
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
	{

		if(REMOTE) {	//if high it is only a noise
    2974:	20 91 03 01 	lds	r18, 0x0103
    2978:	26 ff       	sbrs	r18, 6
    297a:	28 c0       	rjmp	.+80     	; 0x29cc <__vector_13+0x172>

			PCICR |= (1 << PCIE1);		// enable interrupt
    297c:	20 91 68 00 	lds	r18, 0x0068
    2980:	22 60       	ori	r18, 0x02	; 2
    2982:	20 93 68 00 	sts	0x0068, r18
			PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2986:	20 91 6c 00 	lds	r18, 0x006C
    298a:	20 68       	ori	r18, 0x80	; 128
    298c:	20 93 6c 00 	sts	0x006C, r18
    2990:	b5 cf       	rjmp	.-150    	; 0x28fc <__vector_13+0xa2>
			check_temp = address_temp = data_temp = 0;
			i=0;
		}
	} else if (i == 1)	{ // check bit read and change timer period

		check_temp = REMOTE;	   // read the check bit
    2992:	20 91 03 01 	lds	r18, 0x0103
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	20 74       	andi	r18, 0x40	; 64
    299a:	30 70       	andi	r19, 0x00	; 0
    299c:	02 2e       	mov	r0, r18
    299e:	23 2f       	mov	r18, r19
    29a0:	00 0c       	add	r0, r0
    29a2:	22 1f       	adc	r18, r18
    29a4:	33 0b       	sbc	r19, r19
    29a6:	00 0c       	add	r0, r0
    29a8:	22 1f       	adc	r18, r18
    29aa:	33 1f       	adc	r19, r19
    29ac:	20 93 2c 03 	sts	0x032C, r18
		//cycle value is 1.778[ms]
		// we need a delay of 0.6 ms: 1.8 / 0.128 = 14
		//OCR2A = 14;
		//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
		// 1.8/0.032 = 56 => 1.792
		OCR2A = 53;
    29b0:	25 e3       	ldi	r18, 0x35	; 53
    29b2:	20 93 b3 00 	sts	0x00B3, r18
		TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    29b6:	20 91 b1 00 	lds	r18, 0x00B1
    29ba:	26 60       	ori	r18, 0x06	; 6
    29bc:	20 93 b1 00 	sts	0x00B1, r18
		TIMSK2 |= (1 << OCIE2A);
    29c0:	20 91 70 00 	lds	r18, 0x0070
    29c4:	22 60       	ori	r18, 0x02	; 2
    29c6:	20 93 70 00 	sts	0x0070, r18
    29ca:	93 cf       	rjmp	.-218    	; 0x28f2 <__vector_13+0x98>
			//cycle value is 0.6 to go to check bit[ms]
			// we need a delay of 0.6 ms: 0.6 / 0.128 = 4.6
			//OCR2A = 5;
			//TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// 1/1024 prescaler
			// 0.6/0.032 = 19 => 0.608
			OCR2A = 28;
    29cc:	8c e1       	ldi	r24, 0x1C	; 28
    29ce:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler
    29d2:	80 91 b1 00 	lds	r24, 0x00B1
    29d6:	86 60       	ori	r24, 0x06	; 6
    29d8:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);									
    29dc:	80 91 70 00 	lds	r24, 0x0070
    29e0:	82 60       	ori	r24, 0x02	; 2
    29e2:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    29e6:	10 92 2a 03 	sts	0x032A, r1
    29ea:	10 92 2b 03 	sts	0x032B, r1
    29ee:	10 92 2c 03 	sts	0x032C, r1
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	7e cf       	rjmp	.-260    	; 0x28f4 <__vector_13+0x9a>

		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;

	} else if (i == 13) { // last bit read
    29f8:	8d 30       	cpi	r24, 0x0D	; 13
    29fa:	91 05       	cpc	r25, r1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <__vector_13+0x1a6>
    29fe:	79 cf       	rjmp	.-270    	; 0x28f2 <__vector_13+0x98>

		PCICR |= (1 << PCIE1);		// enable interrupt
    2a00:	80 91 68 00 	lds	r24, 0x0068
    2a04:	82 60       	ori	r24, 0x02	; 2
    2a06:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2a0a:	80 91 6c 00 	lds	r24, 0x006C
    2a0e:	80 68       	ori	r24, 0x80	; 128
    2a10:	80 93 6c 00 	sts	0x006C, r24

		i = -1;
    2a14:	8f ef       	ldi	r24, 0xFF	; 255
    2a16:	9f ef       	ldi	r25, 0xFF	; 255
    2a18:	90 93 02 02 	sts	0x0202, r25
    2a1c:	80 93 01 02 	sts	0x0201, r24
		check = check_temp;
    2a20:	80 91 2c 03 	lds	r24, 0x032C
    2a24:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    2a28:	80 91 2b 03 	lds	r24, 0x032B
    2a2c:	80 93 27 03 	sts	0x0327, r24
		data_ir = data_temp;
    2a30:	80 91 2a 03 	lds	r24, 0x032A
    2a34:	80 93 28 03 	sts	0x0328, r24
		command_received=1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 cb 03 	sts	0x03CB, r24
    2a3e:	5e cf       	rjmp	.-324    	; 0x28fc <__vector_13+0xa2>

00002a40 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2a40:	08 95       	ret

00002a42 <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    2a42:	08 95       	ret

00002a44 <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    2a44:	2f 92       	push	r2
    2a46:	3f 92       	push	r3
    2a48:	4f 92       	push	r4
    2a4a:	5f 92       	push	r5
    2a4c:	6f 92       	push	r6
    2a4e:	7f 92       	push	r7
    2a50:	8f 92       	push	r8
    2a52:	9f 92       	push	r9
    2a54:	af 92       	push	r10
    2a56:	bf 92       	push	r11
    2a58:	cf 92       	push	r12
    2a5a:	df 92       	push	r13
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	2c 97       	sbiw	r28, 0x0c	; 12
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	9c 87       	std	Y+12, r25	; 0x0c
    2a7a:	8b 87       	std	Y+11, r24	; 0x0b
    2a7c:	79 87       	std	Y+9, r23	; 0x09
    2a7e:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    2a80:	fc 01       	movw	r30, r24
    2a82:	20 80       	ld	r2, Z
    2a84:	31 80       	ldd	r3, Z+1	; 0x01
    2a86:	42 80       	ldd	r4, Z+2	; 0x02
    2a88:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    2a8a:	fb 01       	movw	r30, r22
    2a8c:	a0 80       	ld	r10, Z
    2a8e:	b1 80       	ldd	r11, Z+1	; 0x01
    2a90:	c2 80       	ldd	r12, Z+2	; 0x02
    2a92:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    2a94:	21 14       	cp	r2, r1
    2a96:	31 04       	cpc	r3, r1
    2a98:	41 04       	cpc	r4, r1
    2a9a:	51 04       	cpc	r5, r1
    2a9c:	31 f4       	brne	.+12     	; 0x2aaa <start_orizzontal_speed_control+0x66>
    2a9e:	a1 14       	cp	r10, r1
    2aa0:	b1 04       	cpc	r11, r1
    2aa2:	c1 04       	cpc	r12, r1
    2aa4:	d1 04       	cpc	r13, r1
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <start_orizzontal_speed_control+0x66>
    2aa8:	bd c1       	rjmp	.+890    	; 0x2e24 <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    2aaa:	60 90 0b 04 	lds	r6, 0x040B
    2aae:	70 90 0c 04 	lds	r7, 0x040C
    2ab2:	80 90 0d 04 	lds	r8, 0x040D
    2ab6:	90 90 0e 04 	lds	r9, 0x040E
    2aba:	60 92 0f 04 	sts	0x040F, r6
    2abe:	70 92 10 04 	sts	0x0410, r7
    2ac2:	80 92 11 04 	sts	0x0411, r8
    2ac6:	90 92 12 04 	sts	0x0412, r9
	if(pwm_right_working >= 0) {
    2aca:	d7 fc       	sbrc	r13, 7
    2acc:	35 c2       	rjmp	.+1130   	; 0x2f38 <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    2ace:	80 91 86 03 	lds	r24, 0x0386
    2ad2:	90 91 87 03 	lds	r25, 0x0387
    2ad6:	a0 e0       	ldi	r26, 0x00	; 0
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	86 01       	movw	r16, r12
    2adc:	75 01       	movw	r14, r10
    2ade:	e8 1a       	sub	r14, r24
    2ae0:	f9 0a       	sbc	r15, r25
    2ae2:	0a 0b       	sbc	r16, r26
    2ae4:	1b 0b       	sbc	r17, r27
    2ae6:	e0 92 a4 03 	sts	0x03A4, r14
    2aea:	f0 92 a5 03 	sts	0x03A5, r15
    2aee:	00 93 a6 03 	sts	0x03A6, r16
    2af2:	10 93 a7 03 	sts	0x03A7, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    2af6:	e0 92 0b 04 	sts	0x040B, r14
    2afa:	f0 92 0c 04 	sts	0x040C, r15
    2afe:	00 93 0d 04 	sts	0x040D, r16
    2b02:	10 93 0e 04 	sts	0x040E, r17
	delta_right_speed_sum += delta_right_speed;
    2b06:	60 91 ac 03 	lds	r22, 0x03AC
    2b0a:	70 91 ad 03 	lds	r23, 0x03AD
    2b0e:	80 91 ae 03 	lds	r24, 0x03AE
    2b12:	90 91 af 03 	lds	r25, 0x03AF
    2b16:	6e 0d       	add	r22, r14
    2b18:	7f 1d       	adc	r23, r15
    2b1a:	80 1f       	adc	r24, r16
    2b1c:	91 1f       	adc	r25, r17
    2b1e:	60 93 ac 03 	sts	0x03AC, r22
    2b22:	70 93 ad 03 	sts	0x03AD, r23
    2b26:	80 93 ae 03 	sts	0x03AE, r24
    2b2a:	90 93 af 03 	sts	0x03AF, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    2b2e:	61 38       	cpi	r22, 0x81	; 129
    2b30:	fc e0       	ldi	r31, 0x0C	; 12
    2b32:	7f 07       	cpc	r23, r31
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	8f 07       	cpc	r24, r31
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	9f 07       	cpc	r25, r31
    2b3c:	0c f0       	brlt	.+2      	; 0x2b40 <start_orizzontal_speed_control+0xfc>
    2b3e:	8b c1       	rjmp	.+790    	; 0x2e56 <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2b40:	60 38       	cpi	r22, 0x80	; 128
    2b42:	e3 ef       	ldi	r30, 0xF3	; 243
    2b44:	7e 07       	cpc	r23, r30
    2b46:	ef ef       	ldi	r30, 0xFF	; 255
    2b48:	8e 07       	cpc	r24, r30
    2b4a:	ef ef       	ldi	r30, 0xFF	; 255
    2b4c:	9e 07       	cpc	r25, r30
    2b4e:	0c f4       	brge	.+2      	; 0x2b52 <start_orizzontal_speed_control+0x10e>
    2b50:	2c c2       	rjmp	.+1112   	; 0x2faa <start_orizzontal_speed_control+0x566>
    2b52:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
    2b56:	9b 01       	movw	r18, r22
    2b58:	ac 01       	movw	r20, r24
    2b5a:	0e 94 92 1c 	call	0x3924	; 0x3924 <__addsf3>
    2b5e:	6d 83       	std	Y+5, r22	; 0x05
    2b60:	7e 83       	std	Y+6, r23	; 0x06
    2b62:	8f 83       	std	Y+7, r24	; 0x07
    2b64:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    2b66:	c8 01       	movw	r24, r16
    2b68:	b7 01       	movw	r22, r14
    2b6a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	48 ec       	ldi	r20, 0xC8	; 200
    2b74:	52 e4       	ldi	r21, 0x42	; 66
    2b76:	0e 94 bf 1c 	call	0x397e	; 0x397e <__mulsf3>
    2b7a:	69 83       	std	Y+1, r22	; 0x01
    2b7c:	7a 83       	std	Y+2, r23	; 0x02
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	c8 01       	movw	r24, r16
    2b84:	b7 01       	movw	r22, r14
    2b86:	66 19       	sub	r22, r6
    2b88:	77 09       	sbc	r23, r7
    2b8a:	88 09       	sbc	r24, r8
    2b8c:	99 09       	sbc	r25, r9
    2b8e:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 bf 1c 	call	0x397e	; 0x397e <__mulsf3>
    2b9e:	9b 01       	movw	r18, r22
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	69 81       	ldd	r22, Y+1	; 0x01
    2ba4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    2baa:	0e 94 92 1c 	call	0x3924	; 0x3924 <__addsf3>
    2bae:	bd 81       	ldd	r27, Y+5	; 0x05
    2bb0:	ae 81       	ldd	r26, Y+6	; 0x06
    2bb2:	ef 80       	ldd	r14, Y+7	; 0x07
    2bb4:	6a 84       	ldd	r6, Y+10	; 0x0a
    2bb6:	2b 2f       	mov	r18, r27
    2bb8:	3a 2f       	mov	r19, r26
    2bba:	4e 2d       	mov	r20, r14
    2bbc:	56 2d       	mov	r21, r6
    2bbe:	0e 94 92 1c 	call	0x3924	; 0x3924 <__addsf3>
    2bc2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__fixsfsi>
    2bc6:	7b 01       	movw	r14, r22
    2bc8:	8c 01       	movw	r16, r24
    2bca:	60 93 b4 03 	sts	0x03B4, r22
    2bce:	70 93 b5 03 	sts	0x03B5, r23
    2bd2:	80 93 b6 03 	sts	0x03B6, r24
    2bd6:	90 93 b7 03 	sts	0x03B7, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    2bda:	c6 01       	movw	r24, r12
    2bdc:	b5 01       	movw	r22, r10
    2bde:	28 e7       	ldi	r18, 0x78	; 120
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	0e 94 0c 20 	call	0x4018	; 0x4018 <__mulsi3>
    2bea:	6e 0d       	add	r22, r14
    2bec:	7f 1d       	adc	r23, r15
    2bee:	80 1f       	adc	r24, r16
    2bf0:	91 1f       	adc	r25, r17
    2bf2:	60 93 98 03 	sts	0x0398, r22
    2bf6:	70 93 99 03 	sts	0x0399, r23
    2bfa:	80 93 9a 03 	sts	0x039A, r24
    2bfe:	90 93 9b 03 	sts	0x039B, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2c02:	97 fd       	sbrc	r25, 7
    2c04:	76 c1       	rjmp	.+748    	; 0x2ef2 <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    2c06:	16 16       	cp	r1, r22
    2c08:	17 06       	cpc	r1, r23
    2c0a:	18 06       	cpc	r1, r24
    2c0c:	19 06       	cpc	r1, r25
    2c0e:	0c f0       	brlt	.+2      	; 0x2c12 <start_orizzontal_speed_control+0x1ce>
    2c10:	7d c1       	rjmp	.+762    	; 0x2f0c <start_orizzontal_speed_control+0x4c8>
    2c12:	d7 fc       	sbrc	r13, 7
    2c14:	fd c1       	rjmp	.+1018   	; 0x3010 <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2c16:	61 3c       	cpi	r22, 0xC1	; 193
    2c18:	ed e5       	ldi	r30, 0x5D	; 93
    2c1a:	7e 07       	cpc	r23, r30
    2c1c:	e0 e0       	ldi	r30, 0x00	; 0
    2c1e:	8e 07       	cpc	r24, r30
    2c20:	e0 e0       	ldi	r30, 0x00	; 0
    2c22:	9e 07       	cpc	r25, r30
    2c24:	0c f4       	brge	.+2      	; 0x2c28 <start_orizzontal_speed_control+0x1e4>
    2c26:	72 c1       	rjmp	.+740    	; 0x2f0c <start_orizzontal_speed_control+0x4c8>
    2c28:	80 ec       	ldi	r24, 0xC0	; 192
    2c2a:	9d e5       	ldi	r25, 0x5D	; 93
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	80 93 98 03 	sts	0x0398, r24
    2c34:	90 93 99 03 	sts	0x0399, r25
    2c38:	a0 93 9a 03 	sts	0x039A, r26
    2c3c:	b0 93 9b 03 	sts	0x039B, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    2c40:	a0 90 03 04 	lds	r10, 0x0403
    2c44:	b0 90 04 04 	lds	r11, 0x0404
    2c48:	c0 90 05 04 	lds	r12, 0x0405
    2c4c:	d0 90 06 04 	lds	r13, 0x0406
    2c50:	a0 92 07 04 	sts	0x0407, r10
    2c54:	b0 92 08 04 	sts	0x0408, r11
    2c58:	c0 92 09 04 	sts	0x0409, r12
    2c5c:	d0 92 0a 04 	sts	0x040A, r13
	if(pwm_left_working >= 0) {
    2c60:	57 fc       	sbrc	r5, 7
    2c62:	7d c1       	rjmp	.+762    	; 0x2f5e <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    2c64:	80 91 84 03 	lds	r24, 0x0384
    2c68:	90 91 85 03 	lds	r25, 0x0385
    2c6c:	a0 e0       	ldi	r26, 0x00	; 0
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	82 01       	movw	r16, r4
    2c72:	71 01       	movw	r14, r2
    2c74:	e8 1a       	sub	r14, r24
    2c76:	f9 0a       	sbc	r15, r25
    2c78:	0a 0b       	sbc	r16, r26
    2c7a:	1b 0b       	sbc	r17, r27
    2c7c:	e0 92 a0 03 	sts	0x03A0, r14
    2c80:	f0 92 a1 03 	sts	0x03A1, r15
    2c84:	00 93 a2 03 	sts	0x03A2, r16
    2c88:	10 93 a3 03 	sts	0x03A3, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    2c8c:	e0 92 03 04 	sts	0x0403, r14
    2c90:	f0 92 04 04 	sts	0x0404, r15
    2c94:	00 93 05 04 	sts	0x0405, r16
    2c98:	10 93 06 04 	sts	0x0406, r17
	delta_left_speed_sum += delta_left_speed;
    2c9c:	60 91 a8 03 	lds	r22, 0x03A8
    2ca0:	70 91 a9 03 	lds	r23, 0x03A9
    2ca4:	80 91 aa 03 	lds	r24, 0x03AA
    2ca8:	90 91 ab 03 	lds	r25, 0x03AB
    2cac:	6e 0d       	add	r22, r14
    2cae:	7f 1d       	adc	r23, r15
    2cb0:	80 1f       	adc	r24, r16
    2cb2:	91 1f       	adc	r25, r17
    2cb4:	60 93 a8 03 	sts	0x03A8, r22
    2cb8:	70 93 a9 03 	sts	0x03A9, r23
    2cbc:	80 93 aa 03 	sts	0x03AA, r24
    2cc0:	90 93 ab 03 	sts	0x03AB, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    2cc4:	61 38       	cpi	r22, 0x81	; 129
    2cc6:	2c e0       	ldi	r18, 0x0C	; 12
    2cc8:	72 07       	cpc	r23, r18
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	82 07       	cpc	r24, r18
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	92 07       	cpc	r25, r18
    2cd2:	0c f4       	brge	.+2      	; 0x2cd6 <start_orizzontal_speed_control+0x292>
    2cd4:	d3 c0       	rjmp	.+422    	; 0x2e7c <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2cd6:	80 e8       	ldi	r24, 0x80	; 128
    2cd8:	9c e0       	ldi	r25, 0x0C	; 12
    2cda:	a0 e0       	ldi	r26, 0x00	; 0
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	80 93 a8 03 	sts	0x03A8, r24
    2ce2:	90 93 a9 03 	sts	0x03A9, r25
    2ce6:	a0 93 aa 03 	sts	0x03AA, r26
    2cea:	b0 93 ab 03 	sts	0x03AB, r27
    2cee:	19 82       	std	Y+1, r1	; 0x01
    2cf0:	1d 82       	std	Y+5, r1	; 0x05
    2cf2:	88 ec       	ldi	r24, 0xC8	; 200
    2cf4:	8e 83       	std	Y+6, r24	; 0x06
    2cf6:	e5 e4       	ldi	r30, 0x45	; 69
    2cf8:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    2cfa:	c8 01       	movw	r24, r16
    2cfc:	b7 01       	movw	r22, r14
    2cfe:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	48 ec       	ldi	r20, 0xC8	; 200
    2d08:	52 e4       	ldi	r21, 0x42	; 66
    2d0a:	0e 94 bf 1c 	call	0x397e	; 0x397e <__mulsf3>
    2d0e:	3b 01       	movw	r6, r22
    2d10:	4c 01       	movw	r8, r24
    2d12:	c8 01       	movw	r24, r16
    2d14:	b7 01       	movw	r22, r14
    2d16:	6a 19       	sub	r22, r10
    2d18:	7b 09       	sbc	r23, r11
    2d1a:	8c 09       	sbc	r24, r12
    2d1c:	9d 09       	sbc	r25, r13
    2d1e:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 bf 1c 	call	0x397e	; 0x397e <__mulsf3>
    2d2e:	9b 01       	movw	r18, r22
    2d30:	ac 01       	movw	r20, r24
    2d32:	c4 01       	movw	r24, r8
    2d34:	b3 01       	movw	r22, r6
    2d36:	0e 94 92 1c 	call	0x3924	; 0x3924 <__addsf3>
    2d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d3c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d40:	af 80       	ldd	r10, Y+7	; 0x07
    2d42:	2b 2f       	mov	r18, r27
    2d44:	3a 2f       	mov	r19, r26
    2d46:	4e 2d       	mov	r20, r14
    2d48:	5a 2d       	mov	r21, r10
    2d4a:	0e 94 92 1c 	call	0x3924	; 0x3924 <__addsf3>
    2d4e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__fixsfsi>
    2d52:	7b 01       	movw	r14, r22
    2d54:	8c 01       	movw	r16, r24
    2d56:	60 93 b0 03 	sts	0x03B0, r22
    2d5a:	70 93 b1 03 	sts	0x03B1, r23
    2d5e:	80 93 b2 03 	sts	0x03B2, r24
    2d62:	90 93 b3 03 	sts	0x03B3, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    2d66:	c2 01       	movw	r24, r4
    2d68:	b1 01       	movw	r22, r2
    2d6a:	28 e7       	ldi	r18, 0x78	; 120
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	0e 94 0c 20 	call	0x4018	; 0x4018 <__mulsi3>
    2d76:	6e 0d       	add	r22, r14
    2d78:	7f 1d       	adc	r23, r15
    2d7a:	80 1f       	adc	r24, r16
    2d7c:	91 1f       	adc	r25, r17
    2d7e:	60 93 9c 03 	sts	0x039C, r22
    2d82:	70 93 9d 03 	sts	0x039D, r23
    2d86:	80 93 9e 03 	sts	0x039E, r24
    2d8a:	90 93 9f 03 	sts	0x039F, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2d8e:	97 fd       	sbrc	r25, 7
    2d90:	89 c0       	rjmp	.+274    	; 0x2ea4 <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    2d92:	16 16       	cp	r1, r22
    2d94:	17 06       	cpc	r1, r23
    2d96:	18 06       	cpc	r1, r24
    2d98:	19 06       	cpc	r1, r25
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <start_orizzontal_speed_control+0x35a>
    2d9c:	90 c0       	rjmp	.+288    	; 0x2ebe <start_orizzontal_speed_control+0x47a>
    2d9e:	57 fc       	sbrc	r5, 7
    2da0:	17 c1       	rjmp	.+558    	; 0x2fd0 <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2da2:	61 3c       	cpi	r22, 0xC1	; 193
    2da4:	ed e5       	ldi	r30, 0x5D	; 93
    2da6:	7e 07       	cpc	r23, r30
    2da8:	e0 e0       	ldi	r30, 0x00	; 0
    2daa:	8e 07       	cpc	r24, r30
    2dac:	e0 e0       	ldi	r30, 0x00	; 0
    2dae:	9e 07       	cpc	r25, r30
    2db0:	0c f4       	brge	.+2      	; 0x2db4 <start_orizzontal_speed_control+0x370>
    2db2:	85 c0       	rjmp	.+266    	; 0x2ebe <start_orizzontal_speed_control+0x47a>
    2db4:	80 ec       	ldi	r24, 0xC0	; 192
    2db6:	9d e5       	ldi	r25, 0x5D	; 93
    2db8:	a0 e0       	ldi	r26, 0x00	; 0
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	80 93 9c 03 	sts	0x039C, r24
    2dc0:	90 93 9d 03 	sts	0x039D, r25
    2dc4:	a0 93 9e 03 	sts	0x039E, r26
    2dc8:	b0 93 9f 03 	sts	0x039F, r27
    2dcc:	64 eb       	ldi	r22, 0xB4	; 180
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2dd4:	eb 85       	ldd	r30, Y+11	; 0x0b
    2dd6:	fc 85       	ldd	r31, Y+12	; 0x0c
    2dd8:	60 83       	st	Z, r22
    2dda:	71 83       	std	Z+1, r23	; 0x01
    2ddc:	82 83       	std	Z+2, r24	; 0x02
    2dde:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2de0:	60 91 98 03 	lds	r22, 0x0398
    2de4:	70 91 99 03 	lds	r23, 0x0399
    2de8:	80 91 9a 03 	lds	r24, 0x039A
    2dec:	90 91 9b 03 	lds	r25, 0x039B
    2df0:	26 e6       	ldi	r18, 0x66	; 102
    2df2:	32 e0       	ldi	r19, 0x02	; 2
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	50 e0       	ldi	r21, 0x00	; 0
    2df8:	0e 94 0c 20 	call	0x4018	; 0x4018 <__mulsi3>
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	39 e0       	ldi	r19, 0x09	; 9
    2e00:	4d e3       	ldi	r20, 0x3D	; 61
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__divmodsi4>
    2e08:	ca 01       	movw	r24, r20
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	2c e3       	ldi	r18, 0x3C	; 60
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	0e 94 0c 20 	call	0x4018	; 0x4018 <__mulsi3>
    2e18:	e8 85       	ldd	r30, Y+8	; 0x08
    2e1a:	f9 85       	ldd	r31, Y+9	; 0x09
    2e1c:	60 83       	st	Z, r22
    2e1e:	71 83       	std	Z+1, r23	; 0x01
    2e20:	82 83       	std	Z+2, r24	; 0x02
    2e22:	93 83       	std	Z+3, r25	; 0x03

}
    2e24:	2c 96       	adiw	r28, 0x0c	; 12
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15
    2e3a:	ef 90       	pop	r14
    2e3c:	df 90       	pop	r13
    2e3e:	cf 90       	pop	r12
    2e40:	bf 90       	pop	r11
    2e42:	af 90       	pop	r10
    2e44:	9f 90       	pop	r9
    2e46:	8f 90       	pop	r8
    2e48:	7f 90       	pop	r7
    2e4a:	6f 90       	pop	r6
    2e4c:	5f 90       	pop	r5
    2e4e:	4f 90       	pop	r4
    2e50:	3f 90       	pop	r3
    2e52:	2f 90       	pop	r2
    2e54:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2e56:	80 e8       	ldi	r24, 0x80	; 128
    2e58:	9c e0       	ldi	r25, 0x0C	; 12
    2e5a:	a0 e0       	ldi	r26, 0x00	; 0
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	80 93 ac 03 	sts	0x03AC, r24
    2e62:	90 93 ad 03 	sts	0x03AD, r25
    2e66:	a0 93 ae 03 	sts	0x03AE, r26
    2e6a:	b0 93 af 03 	sts	0x03AF, r27
    2e6e:	1d 82       	std	Y+5, r1	; 0x05
    2e70:	1e 82       	std	Y+6, r1	; 0x06
    2e72:	28 ec       	ldi	r18, 0xC8	; 200
    2e74:	2f 83       	std	Y+7, r18	; 0x07
    2e76:	85 e4       	ldi	r24, 0x45	; 69
    2e78:	8a 87       	std	Y+10, r24	; 0x0a
    2e7a:	75 ce       	rjmp	.-790    	; 0x2b66 <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    2e7c:	60 38       	cpi	r22, 0x80	; 128
    2e7e:	f3 ef       	ldi	r31, 0xF3	; 243
    2e80:	7f 07       	cpc	r23, r31
    2e82:	ff ef       	ldi	r31, 0xFF	; 255
    2e84:	8f 07       	cpc	r24, r31
    2e86:	ff ef       	ldi	r31, 0xFF	; 255
    2e88:	9f 07       	cpc	r25, r31
    2e8a:	0c f4       	brge	.+2      	; 0x2e8e <start_orizzontal_speed_control+0x44a>
    2e8c:	7b c0       	rjmp	.+246    	; 0x2f84 <start_orizzontal_speed_control+0x540>
    2e8e:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__floatsisf>
    2e92:	9b 01       	movw	r18, r22
    2e94:	ac 01       	movw	r20, r24
    2e96:	0e 94 92 1c 	call	0x3924	; 0x3924 <__addsf3>
    2e9a:	69 83       	std	Y+1, r22	; 0x01
    2e9c:	7d 83       	std	Y+5, r23	; 0x05
    2e9e:	8e 83       	std	Y+6, r24	; 0x06
    2ea0:	9f 83       	std	Y+7, r25	; 0x07
    2ea2:	2b cf       	rjmp	.-426    	; 0x2cfa <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2ea4:	57 fc       	sbrc	r5, 7
    2ea6:	0b c0       	rjmp	.+22     	; 0x2ebe <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    2ea8:	10 92 9c 03 	sts	0x039C, r1
    2eac:	10 92 9d 03 	sts	0x039D, r1
    2eb0:	10 92 9e 03 	sts	0x039E, r1
    2eb4:	10 92 9f 03 	sts	0x039F, r1
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2ebe:	60 34       	cpi	r22, 0x40	; 64
    2ec0:	f2 ea       	ldi	r31, 0xA2	; 162
    2ec2:	7f 07       	cpc	r23, r31
    2ec4:	ff ef       	ldi	r31, 0xFF	; 255
    2ec6:	8f 07       	cpc	r24, r31
    2ec8:	ff ef       	ldi	r31, 0xFF	; 255
    2eca:	9f 07       	cpc	r25, r31
    2ecc:	0c f0       	brlt	.+2      	; 0x2ed0 <start_orizzontal_speed_control+0x48c>
    2ece:	8b c0       	rjmp	.+278    	; 0x2fe6 <start_orizzontal_speed_control+0x5a2>
    2ed0:	80 e4       	ldi	r24, 0x40	; 64
    2ed2:	92 ea       	ldi	r25, 0xA2	; 162
    2ed4:	af ef       	ldi	r26, 0xFF	; 255
    2ed6:	bf ef       	ldi	r27, 0xFF	; 255
    2ed8:	80 93 9c 03 	sts	0x039C, r24
    2edc:	90 93 9d 03 	sts	0x039D, r25
    2ee0:	a0 93 9e 03 	sts	0x039E, r26
    2ee4:	b0 93 9f 03 	sts	0x039F, r27
    2ee8:	6c e4       	ldi	r22, 0x4C	; 76
    2eea:	7f ef       	ldi	r23, 0xFF	; 255
    2eec:	8f ef       	ldi	r24, 0xFF	; 255
    2eee:	9f ef       	ldi	r25, 0xFF	; 255
    2ef0:	71 cf       	rjmp	.-286    	; 0x2dd4 <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    2ef2:	d7 fc       	sbrc	r13, 7
    2ef4:	0b c0       	rjmp	.+22     	; 0x2f0c <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    2ef6:	10 92 98 03 	sts	0x0398, r1
    2efa:	10 92 99 03 	sts	0x0399, r1
    2efe:	10 92 9a 03 	sts	0x039A, r1
    2f02:	10 92 9b 03 	sts	0x039B, r1
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2f0c:	60 34       	cpi	r22, 0x40	; 64
    2f0e:	f2 ea       	ldi	r31, 0xA2	; 162
    2f10:	7f 07       	cpc	r23, r31
    2f12:	ff ef       	ldi	r31, 0xFF	; 255
    2f14:	8f 07       	cpc	r24, r31
    2f16:	ff ef       	ldi	r31, 0xFF	; 255
    2f18:	9f 07       	cpc	r25, r31
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <start_orizzontal_speed_control+0x4da>
    2f1c:	91 ce       	rjmp	.-734    	; 0x2c40 <start_orizzontal_speed_control+0x1fc>
    2f1e:	80 e4       	ldi	r24, 0x40	; 64
    2f20:	92 ea       	ldi	r25, 0xA2	; 162
    2f22:	af ef       	ldi	r26, 0xFF	; 255
    2f24:	bf ef       	ldi	r27, 0xFF	; 255
    2f26:	80 93 98 03 	sts	0x0398, r24
    2f2a:	90 93 99 03 	sts	0x0399, r25
    2f2e:	a0 93 9a 03 	sts	0x039A, r26
    2f32:	b0 93 9b 03 	sts	0x039B, r27
    2f36:	84 ce       	rjmp	.-760    	; 0x2c40 <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    2f38:	e0 90 86 03 	lds	r14, 0x0386
    2f3c:	f0 90 87 03 	lds	r15, 0x0387
    2f40:	00 e0       	ldi	r16, 0x00	; 0
    2f42:	10 e0       	ldi	r17, 0x00	; 0
    2f44:	ea 0c       	add	r14, r10
    2f46:	fb 1c       	adc	r15, r11
    2f48:	0c 1d       	adc	r16, r12
    2f4a:	1d 1d       	adc	r17, r13
    2f4c:	e0 92 a4 03 	sts	0x03A4, r14
    2f50:	f0 92 a5 03 	sts	0x03A5, r15
    2f54:	00 93 a6 03 	sts	0x03A6, r16
    2f58:	10 93 a7 03 	sts	0x03A7, r17
    2f5c:	cc cd       	rjmp	.-1128   	; 0x2af6 <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    2f5e:	e0 90 84 03 	lds	r14, 0x0384
    2f62:	f0 90 85 03 	lds	r15, 0x0385
    2f66:	00 e0       	ldi	r16, 0x00	; 0
    2f68:	10 e0       	ldi	r17, 0x00	; 0
    2f6a:	e2 0c       	add	r14, r2
    2f6c:	f3 1c       	adc	r15, r3
    2f6e:	04 1d       	adc	r16, r4
    2f70:	15 1d       	adc	r17, r5
    2f72:	e0 92 a0 03 	sts	0x03A0, r14
    2f76:	f0 92 a1 03 	sts	0x03A1, r15
    2f7a:	00 93 a2 03 	sts	0x03A2, r16
    2f7e:	10 93 a3 03 	sts	0x03A3, r17
    2f82:	84 ce       	rjmp	.-760    	; 0x2c8c <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2f84:	80 e8       	ldi	r24, 0x80	; 128
    2f86:	93 ef       	ldi	r25, 0xF3	; 243
    2f88:	af ef       	ldi	r26, 0xFF	; 255
    2f8a:	bf ef       	ldi	r27, 0xFF	; 255
    2f8c:	80 93 a8 03 	sts	0x03A8, r24
    2f90:	90 93 a9 03 	sts	0x03A9, r25
    2f94:	a0 93 aa 03 	sts	0x03AA, r26
    2f98:	b0 93 ab 03 	sts	0x03AB, r27
    2f9c:	19 82       	std	Y+1, r1	; 0x01
    2f9e:	1d 82       	std	Y+5, r1	; 0x05
    2fa0:	28 ec       	ldi	r18, 0xC8	; 200
    2fa2:	2e 83       	std	Y+6, r18	; 0x06
    2fa4:	85 ec       	ldi	r24, 0xC5	; 197
    2fa6:	8f 83       	std	Y+7, r24	; 0x07
    2fa8:	a8 ce       	rjmp	.-688    	; 0x2cfa <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2faa:	80 e8       	ldi	r24, 0x80	; 128
    2fac:	93 ef       	ldi	r25, 0xF3	; 243
    2fae:	af ef       	ldi	r26, 0xFF	; 255
    2fb0:	bf ef       	ldi	r27, 0xFF	; 255
    2fb2:	80 93 ac 03 	sts	0x03AC, r24
    2fb6:	90 93 ad 03 	sts	0x03AD, r25
    2fba:	a0 93 ae 03 	sts	0x03AE, r26
    2fbe:	b0 93 af 03 	sts	0x03AF, r27
    2fc2:	1d 82       	std	Y+5, r1	; 0x05
    2fc4:	1e 82       	std	Y+6, r1	; 0x06
    2fc6:	f8 ec       	ldi	r31, 0xC8	; 200
    2fc8:	ff 83       	std	Y+7, r31	; 0x07
    2fca:	25 ec       	ldi	r18, 0xC5	; 197
    2fcc:	2a 87       	std	Y+10, r18	; 0x0a
    2fce:	cb cd       	rjmp	.-1130   	; 0x2b66 <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    2fd0:	10 92 9c 03 	sts	0x039C, r1
    2fd4:	10 92 9d 03 	sts	0x039D, r1
    2fd8:	10 92 9e 03 	sts	0x039E, r1
    2fdc:	10 92 9f 03 	sts	0x039F, r1
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	70 e0       	ldi	r23, 0x00	; 0
    2fe4:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2fe6:	26 e6       	ldi	r18, 0x66	; 102
    2fe8:	32 e0       	ldi	r19, 0x02	; 2
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	0e 94 0c 20 	call	0x4018	; 0x4018 <__mulsi3>
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	39 e0       	ldi	r19, 0x09	; 9
    2ff6:	4d e3       	ldi	r20, 0x3D	; 61
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__divmodsi4>
    2ffe:	ca 01       	movw	r24, r20
    3000:	b9 01       	movw	r22, r18
    3002:	2c e3       	ldi	r18, 0x3C	; 60
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	0e 94 0c 20 	call	0x4018	; 0x4018 <__mulsi3>
    300e:	e2 ce       	rjmp	.-572    	; 0x2dd4 <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    3010:	10 92 98 03 	sts	0x0398, r1
    3014:	10 92 99 03 	sts	0x0399, r1
    3018:	10 92 9a 03 	sts	0x039A, r1
    301c:	10 92 9b 03 	sts	0x039B, r1
    3020:	0f ce       	rjmp	.-994    	; 0x2c40 <start_orizzontal_speed_control+0x1fc>

00003022 <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    3022:	8f ef       	ldi	r24, 0xFF	; 255
    3024:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    3026:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3028:	97 ef       	ldi	r25, 0xF7	; 247
    302a:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    302c:	90 ee       	ldi	r25, 0xE0	; 224
    302e:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    3030:	90 ef       	ldi	r25, 0xF0	; 240
    3032:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    3034:	90 eb       	ldi	r25, 0xB0	; 176
    3036:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3038:	9c ef       	ldi	r25, 0xFC	; 252
    303a:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    303c:	93 e0       	ldi	r25, 0x03	; 3
    303e:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    3040:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    3042:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    3044:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    3046:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    3048:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    304a:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    304e:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    3052:	9f e8       	ldi	r25, 0x8F	; 143
    3054:	90 93 04 01 	sts	0x0104, r25
	PORTJ = 0x00;	// cliff pulse turned off
    3058:	10 92 05 01 	sts	0x0105, r1

	DDRK = 0x00;	// adc channel pins as input
    305c:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    3060:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    3064:	10 92 0b 01 	sts	0x010B, r1

		
}
    3068:	08 95       	ret

0000306a <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    306a:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    306c:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    306e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3072:	80 e2       	ldi	r24, 0x20	; 32
    3074:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3078:	08 95       	ret

0000307a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    307a:	94 ea       	ldi	r25, 0xA4	; 164
    307c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3080:	90 91 bc 00 	lds	r25, 0x00BC
    3084:	97 ff       	sbrs	r25, 7
    3086:	fc cf       	rjmp	.-8      	; 0x3080 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3088:	90 91 b9 00 	lds	r25, 0x00B9
    308c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    308e:	98 30       	cpi	r25, 0x08	; 8
    3090:	21 f0       	breq	.+8      	; 0x309a <i2c_start+0x20>
    3092:	90 31       	cpi	r25, 0x10	; 16
    3094:	11 f0       	breq	.+4      	; 0x309a <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	08 95       	ret
	}

	// send device address
	TWDR = address;
    309a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    309e:	84 e8       	ldi	r24, 0x84	; 132
    30a0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    30a4:	80 91 bc 00 	lds	r24, 0x00BC
    30a8:	87 ff       	sbrs	r24, 7
    30aa:	fc cf       	rjmp	.-8      	; 0x30a4 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    30ac:	90 91 b9 00 	lds	r25, 0x00B9
    30b0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    30b2:	98 31       	cpi	r25, 0x18	; 24
    30b4:	21 f0       	breq	.+8      	; 0x30be <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 34       	cpi	r25, 0x40	; 64
    30ba:	19 f0       	breq	.+6      	; 0x30c2 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    30bc:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    30be:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    30c0:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	08 95       	ret

000030c6 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    30c6:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    30c8:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    30ca:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    30cc:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    30d0:	90 91 bc 00 	lds	r25, 0x00BC
    30d4:	97 ff       	sbrs	r25, 7
    30d6:	fc cf       	rjmp	.-8      	; 0x30d0 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    30d8:	90 91 b9 00 	lds	r25, 0x00B9
    30dc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    30de:	98 30       	cpi	r25, 0x08	; 8
    30e0:	11 f0       	breq	.+4      	; 0x30e6 <i2c_start_wait+0x20>
    30e2:	90 31       	cpi	r25, 0x10	; 16
    30e4:	99 f7       	brne	.-26     	; 0x30cc <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    30e6:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    30ea:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    30ee:	90 91 bc 00 	lds	r25, 0x00BC
    30f2:	97 ff       	sbrs	r25, 7
    30f4:	fc cf       	rjmp	.-8      	; 0x30ee <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    30f6:	90 91 b9 00 	lds	r25, 0x00B9
    30fa:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    30fc:	90 32       	cpi	r25, 0x20	; 32
    30fe:	19 f0       	breq	.+6      	; 0x3106 <i2c_start_wait+0x40>
    3100:	98 35       	cpi	r25, 0x58	; 88
    3102:	09 f0       	breq	.+2      	; 0x3106 <i2c_start_wait+0x40>
    3104:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3106:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    310a:	90 91 bc 00 	lds	r25, 0x00BC
    310e:	94 fd       	sbrc	r25, 4
    3110:	fc cf       	rjmp	.-8      	; 0x310a <i2c_start_wait+0x44>
    3112:	dc cf       	rjmp	.-72     	; 0x30cc <i2c_start_wait+0x6>

00003114 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3114:	94 ea       	ldi	r25, 0xA4	; 164
    3116:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    311a:	90 91 bc 00 	lds	r25, 0x00BC
    311e:	97 ff       	sbrs	r25, 7
    3120:	fc cf       	rjmp	.-8      	; 0x311a <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3122:	90 91 b9 00 	lds	r25, 0x00B9
    3126:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3128:	98 30       	cpi	r25, 0x08	; 8
    312a:	21 f0       	breq	.+8      	; 0x3134 <i2c_rep_start+0x20>
    312c:	90 31       	cpi	r25, 0x10	; 16
    312e:	11 f0       	breq	.+4      	; 0x3134 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3134:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3138:	84 e8       	ldi	r24, 0x84	; 132
    313a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    313e:	80 91 bc 00 	lds	r24, 0x00BC
    3142:	87 ff       	sbrs	r24, 7
    3144:	fc cf       	rjmp	.-8      	; 0x313e <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3146:	90 91 b9 00 	lds	r25, 0x00B9
    314a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    314c:	98 31       	cpi	r25, 0x18	; 24
    314e:	21 f0       	breq	.+8      	; 0x3158 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 34       	cpi	r25, 0x40	; 64
    3154:	19 f0       	breq	.+6      	; 0x315c <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3156:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3158:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    315a:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	08 95       	ret

00003160 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3160:	84 e9       	ldi	r24, 0x94	; 148
    3162:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3166:	80 91 bc 00 	lds	r24, 0x00BC
    316a:	84 fd       	sbrc	r24, 4
    316c:	fc cf       	rjmp	.-8      	; 0x3166 <i2c_stop+0x6>

}/* i2c_stop */
    316e:	08 95       	ret

00003170 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3170:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3174:	84 e8       	ldi	r24, 0x84	; 132
    3176:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    317a:	80 91 bc 00 	lds	r24, 0x00BC
    317e:	87 ff       	sbrs	r24, 7
    3180:	fc cf       	rjmp	.-8      	; 0x317a <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3182:	90 91 b9 00 	lds	r25, 0x00B9
    3186:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	98 32       	cpi	r25, 0x28	; 40
    318c:	09 f0       	breq	.+2      	; 0x3190 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    318e:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3190:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3192:	08 95       	ret

00003194 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3194:	84 ec       	ldi	r24, 0xC4	; 196
    3196:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    319a:	80 91 bc 00 	lds	r24, 0x00BC
    319e:	87 ff       	sbrs	r24, 7
    31a0:	fc cf       	rjmp	.-8      	; 0x319a <i2c_readAck+0x6>

    return TWDR;
    31a2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    31a6:	08 95       	ret

000031a8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    31a8:	84 e8       	ldi	r24, 0x84	; 132
    31aa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    31ae:	80 91 bc 00 	lds	r24, 0x00BC
    31b2:	87 ff       	sbrs	r24, 7
    31b4:	fc cf       	rjmp	.-8      	; 0x31ae <i2c_readNak+0x6>
	
    return TWDR;
    31b6:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    31ba:	08 95       	ret

000031bc <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    31bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    31c0:	80 e1       	ldi	r24, 0x10	; 16
    31c2:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    31c6:	e0 ec       	ldi	r30, 0xC0	; 192
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	82 60       	ori	r24, 0x02	; 2
    31ce:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    31d0:	e1 ec       	ldi	r30, 0xC1	; 193
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	88 69       	ori	r24, 0x98	; 152
    31d8:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    31da:	e2 ec       	ldi	r30, 0xC2	; 194
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	86 60       	ori	r24, 0x06	; 6
    31e2:	80 83       	st	Z, r24

}
    31e4:	08 95       	ret

000031e6 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    31e6:	90 91 c0 00 	lds	r25, 0x00C0
    31ea:	95 ff       	sbrs	r25, 5
    31ec:	fc cf       	rjmp	.-8      	; 0x31e6 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    31ee:	80 93 c6 00 	sts	0x00C6, r24

}
    31f2:	08 95       	ret

000031f4 <__vector_25>:

ISR(USART0_RX_vect) {
    31f4:	1f 92       	push	r1
    31f6:	0f 92       	push	r0
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	0f 92       	push	r0
    31fc:	11 24       	eor	r1, r1
    31fe:	2f 93       	push	r18
    3200:	8f 93       	push	r24
    3202:	9f 93       	push	r25
    3204:	af 93       	push	r26
    3206:	bf 93       	push	r27

	char receivedByte = UDR0;
    3208:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    320c:	90 91 12 02 	lds	r25, 0x0212
    3210:	99 23       	and	r25, r25
    3212:	c9 f0       	breq	.+50     	; 0x3246 <__vector_25+0x52>
		switch(receivedByte) {
    3214:	82 33       	cpi	r24, 0x32	; 50
    3216:	09 f4       	brne	.+2      	; 0x321a <__vector_25+0x26>
    3218:	56 c0       	rjmp	.+172    	; 0x32c6 <__vector_25+0xd2>
    321a:	83 33       	cpi	r24, 0x33	; 51
    321c:	58 f5       	brcc	.+86     	; 0x3274 <__vector_25+0x80>
    321e:	80 33       	cpi	r24, 0x30	; 48
    3220:	09 f4       	brne	.+2      	; 0x3224 <__vector_25+0x30>
    3222:	79 c0       	rjmp	.+242    	; 0x3316 <__vector_25+0x122>
    3224:	81 33       	cpi	r24, 0x31	; 49
    3226:	29 f4       	brne	.+10     	; 0x3232 <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    322e:	10 92 12 02 	sts	0x0212, r1

	}



}
    3232:	bf 91       	pop	r27
    3234:	af 91       	pop	r26
    3236:	9f 91       	pop	r25
    3238:	8f 91       	pop	r24
    323a:	2f 91       	pop	r18
    323c:	0f 90       	pop	r0
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	0f 90       	pop	r0
    3242:	1f 90       	pop	r1
    3244:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3246:	90 91 11 02 	lds	r25, 0x0211
    324a:	92 30       	cpi	r25, 0x02	; 2
    324c:	09 f4       	brne	.+2      	; 0x3250 <__vector_25+0x5c>
    324e:	41 c0       	rjmp	.+130    	; 0x32d2 <__vector_25+0xde>
    3250:	93 30       	cpi	r25, 0x03	; 3
    3252:	08 f1       	brcs	.+66     	; 0x3296 <__vector_25+0xa2>
    3254:	94 30       	cpi	r25, 0x04	; 4
    3256:	09 f4       	brne	.+2      	; 0x325a <__vector_25+0x66>
    3258:	89 c0       	rjmp	.+274    	; 0x336c <__vector_25+0x178>
    325a:	94 30       	cpi	r25, 0x04	; 4
    325c:	08 f4       	brcc	.+2      	; 0x3260 <__vector_25+0x6c>
    325e:	6c c0       	rjmp	.+216    	; 0x3338 <__vector_25+0x144>
    3260:	95 30       	cpi	r25, 0x05	; 5
    3262:	39 f7       	brne	.-50     	; 0x3232 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    3264:	83 37       	cpi	r24, 0x73	; 115
    3266:	29 f7       	brne	.-54     	; 0x3232 <__vector_25+0x3e>
					sendAdcValues = 0;
    3268:	10 92 c9 03 	sts	0x03C9, r1
					choosePeripheral = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	80 93 12 02 	sts	0x0212, r24
    3272:	df cf       	rjmp	.-66     	; 0x3232 <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    3274:	84 33       	cpi	r24, 0x34	; 52
    3276:	09 f4       	brne	.+2      	; 0x327a <__vector_25+0x86>
    3278:	59 c0       	rjmp	.+178    	; 0x332c <__vector_25+0x138>
    327a:	84 33       	cpi	r24, 0x34	; 52
    327c:	08 f4       	brcc	.+2      	; 0x3280 <__vector_25+0x8c>
    327e:	50 c0       	rjmp	.+160    	; 0x3320 <__vector_25+0x12c>
    3280:	85 33       	cpi	r24, 0x35	; 53
    3282:	b9 f6       	brne	.-82     	; 0x3232 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    3284:	85 e0       	ldi	r24, 0x05	; 5
    3286:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    328a:	10 92 12 02 	sts	0x0212, r1
				sendAdcValues = 1;
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	80 93 c9 03 	sts	0x03C9, r24
				break;
    3294:	ce cf       	rjmp	.-100    	; 0x3232 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    3296:	99 23       	and	r25, r25
    3298:	91 f5       	brne	.+100    	; 0x32fe <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    329a:	8d 32       	cpi	r24, 0x2D	; 45
    329c:	09 f4       	brne	.+2      	; 0x32a0 <__vector_25+0xac>
    329e:	05 c1       	rjmp	.+522    	; 0x34aa <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    32a0:	8b 32       	cpi	r24, 0x2B	; 43
    32a2:	21 f7       	brne	.-56     	; 0x326c <__vector_25+0x78>
					current_pwm = pwm_red-10;
    32a4:	80 91 0e 02 	lds	r24, 0x020E
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    32ac:	97 fd       	sbrc	r25, 7
    32ae:	9c c1       	rjmp	.+824    	; 0x35e8 <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    32b0:	80 93 0e 02 	sts	0x020E, r24
					if(pwm_red == 0) {
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <__vector_25+0xc6>
    32b8:	99 c1       	rjmp	.+818    	; 0x35ec <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	90 93 89 00 	sts	0x0089, r25
    32c0:	80 93 88 00 	sts	0x0088, r24
    32c4:	b6 cf       	rjmp	.-148    	; 0x3232 <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    32cc:	10 92 12 02 	sts	0x0212, r1
				break;
    32d0:	b0 cf       	rjmp	.-160    	; 0x3232 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    32d2:	8d 32       	cpi	r24, 0x2D	; 45
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <__vector_25+0xe4>
    32d6:	2f c1       	rjmp	.+606    	; 0x3536 <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    32d8:	8b 32       	cpi	r24, 0x2B	; 43
    32da:	41 f6       	brne	.-112    	; 0x326c <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    32dc:	80 91 10 02 	lds	r24, 0x0210
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    32e4:	97 fd       	sbrc	r25, 7
    32e6:	92 c1       	rjmp	.+804    	; 0x360c <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    32e8:	80 93 10 02 	sts	0x0210, r24
					if(pwm_blue == 0) {
    32ec:	88 23       	and	r24, r24
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <__vector_25+0xfe>
    32f0:	8f c1       	rjmp	.+798    	; 0x3610 <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	90 93 8d 00 	sts	0x008D, r25
    32f8:	80 93 8c 00 	sts	0x008C, r24
    32fc:	9a cf       	rjmp	.-204    	; 0x3232 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    32fe:	91 30       	cpi	r25, 0x01	; 1
    3300:	09 f0       	breq	.+2      	; 0x3304 <__vector_25+0x110>
    3302:	97 cf       	rjmp	.-210    	; 0x3232 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    3304:	8d 32       	cpi	r24, 0x2D	; 45
    3306:	09 f4       	brne	.+2      	; 0x330a <__vector_25+0x116>
    3308:	b9 c0       	rjmp	.+370    	; 0x347c <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    330a:	8b 32       	cpi	r24, 0x2B	; 43
    330c:	09 f4       	brne	.+2      	; 0x3310 <__vector_25+0x11c>
    330e:	47 c0       	rjmp	.+142    	; 0x339e <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    3310:	90 93 12 02 	sts	0x0212, r25
    3314:	8e cf       	rjmp	.-228    	; 0x3232 <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    3316:	10 92 11 02 	sts	0x0211, r1
				choosePeripheral = 0;
    331a:	10 92 12 02 	sts	0x0212, r1
				break;
    331e:	89 cf       	rjmp	.-238    	; 0x3232 <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    3326:	10 92 12 02 	sts	0x0212, r1
				break;
    332a:	83 cf       	rjmp	.-250    	; 0x3232 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    332c:	84 e0       	ldi	r24, 0x04	; 4
    332e:	80 93 11 02 	sts	0x0211, r24
				choosePeripheral = 0;
    3332:	10 92 12 02 	sts	0x0212, r1
				break;
    3336:	7d cf       	rjmp	.-262    	; 0x3232 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    3338:	8b 32       	cpi	r24, 0x2B	; 43
    333a:	09 f4       	brne	.+2      	; 0x333e <__vector_25+0x14a>
    333c:	13 c1       	rjmp	.+550    	; 0x3564 <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    333e:	8d 32       	cpi	r24, 0x2D	; 45
    3340:	09 f4       	brne	.+2      	; 0x3344 <__vector_25+0x150>
    3342:	6d c0       	rjmp	.+218    	; 0x341e <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    3344:	83 37       	cpi	r24, 0x73	; 115
    3346:	09 f0       	breq	.+2      	; 0x334a <__vector_25+0x156>
    3348:	91 cf       	rjmp	.-222    	; 0x326c <__vector_25+0x78>
					pwm_right = 0;
    334a:	10 92 88 03 	sts	0x0388, r1
    334e:	10 92 89 03 	sts	0x0389, r1
    3352:	10 92 8a 03 	sts	0x038A, r1
    3356:	10 92 8b 03 	sts	0x038B, r1
					OCR3A = 0;
    335a:	10 92 99 00 	sts	0x0099, r1
    335e:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    3362:	10 92 9b 00 	sts	0x009B, r1
    3366:	10 92 9a 00 	sts	0x009A, r1
    336a:	63 cf       	rjmp	.-314    	; 0x3232 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    336c:	8b 32       	cpi	r24, 0x2B	; 43
    336e:	09 f4       	brne	.+2      	; 0x3372 <__vector_25+0x17e>
    3370:	b3 c0       	rjmp	.+358    	; 0x34d8 <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    3372:	8d 32       	cpi	r24, 0x2D	; 45
    3374:	29 f1       	breq	.+74     	; 0x33c0 <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    3376:	83 37       	cpi	r24, 0x73	; 115
    3378:	09 f0       	breq	.+2      	; 0x337c <__vector_25+0x188>
    337a:	78 cf       	rjmp	.-272    	; 0x326c <__vector_25+0x78>
					pwm_left = 0;
    337c:	10 92 8c 03 	sts	0x038C, r1
    3380:	10 92 8d 03 	sts	0x038D, r1
    3384:	10 92 8e 03 	sts	0x038E, r1
    3388:	10 92 8f 03 	sts	0x038F, r1
					OCR4A = 0;
    338c:	10 92 a9 00 	sts	0x00A9, r1
    3390:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    3394:	10 92 ab 00 	sts	0x00AB, r1
    3398:	10 92 aa 00 	sts	0x00AA, r1
    339c:	4a cf       	rjmp	.-364    	; 0x3232 <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    339e:	80 91 0f 02 	lds	r24, 0x020F
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    33a6:	97 fd       	sbrc	r25, 7
    33a8:	28 c1       	rjmp	.+592    	; 0x35fa <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    33aa:	80 93 0f 02 	sts	0x020F, r24
					if(pwm_green == 0) {
    33ae:	88 23       	and	r24, r24
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <__vector_25+0x1c0>
    33b2:	25 c1       	rjmp	.+586    	; 0x35fe <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	90 93 8b 00 	sts	0x008B, r25
    33ba:	80 93 8a 00 	sts	0x008A, r24
    33be:	39 cf       	rjmp	.-398    	; 0x3232 <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    33c0:	80 91 8c 03 	lds	r24, 0x038C
    33c4:	90 91 8d 03 	lds	r25, 0x038D
    33c8:	a0 91 8e 03 	lds	r26, 0x038E
    33cc:	b0 91 8f 03 	lds	r27, 0x038F
    33d0:	4e 97       	sbiw	r24, 0x1e	; 30
    33d2:	a1 09       	sbc	r26, r1
    33d4:	b1 09       	sbc	r27, r1
    33d6:	80 93 8c 03 	sts	0x038C, r24
    33da:	90 93 8d 03 	sts	0x038D, r25
    33de:	a0 93 8e 03 	sts	0x038E, r26
    33e2:	b0 93 8f 03 	sts	0x038F, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    33e6:	8a 39       	cpi	r24, 0x9A	; 154
    33e8:	2d ef       	ldi	r18, 0xFD	; 253
    33ea:	92 07       	cpc	r25, r18
    33ec:	2f ef       	ldi	r18, 0xFF	; 255
    33ee:	a2 07       	cpc	r26, r18
    33f0:	2f ef       	ldi	r18, 0xFF	; 255
    33f2:	b2 07       	cpc	r27, r18
    33f4:	0c f0       	brlt	.+2      	; 0x33f8 <__vector_25+0x204>
    33f6:	13 c1       	rjmp	.+550    	; 0x361e <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    33f8:	8a e9       	ldi	r24, 0x9A	; 154
    33fa:	9d ef       	ldi	r25, 0xFD	; 253
    33fc:	af ef       	ldi	r26, 0xFF	; 255
    33fe:	bf ef       	ldi	r27, 0xFF	; 255
    3400:	80 93 8c 03 	sts	0x038C, r24
    3404:	90 93 8d 03 	sts	0x038D, r25
    3408:	a0 93 8e 03 	sts	0x038E, r26
    340c:	b0 93 8f 03 	sts	0x038F, r27
    3410:	86 e6       	ldi	r24, 0x66	; 102
    3412:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    3414:	90 93 ab 00 	sts	0x00AB, r25
    3418:	80 93 aa 00 	sts	0x00AA, r24
    341c:	0a cf       	rjmp	.-492    	; 0x3232 <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    341e:	80 91 88 03 	lds	r24, 0x0388
    3422:	90 91 89 03 	lds	r25, 0x0389
    3426:	a0 91 8a 03 	lds	r26, 0x038A
    342a:	b0 91 8b 03 	lds	r27, 0x038B
    342e:	4e 97       	sbiw	r24, 0x1e	; 30
    3430:	a1 09       	sbc	r26, r1
    3432:	b1 09       	sbc	r27, r1
    3434:	80 93 88 03 	sts	0x0388, r24
    3438:	90 93 89 03 	sts	0x0389, r25
    343c:	a0 93 8a 03 	sts	0x038A, r26
    3440:	b0 93 8b 03 	sts	0x038B, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    3444:	8a 39       	cpi	r24, 0x9A	; 154
    3446:	2d ef       	ldi	r18, 0xFD	; 253
    3448:	92 07       	cpc	r25, r18
    344a:	2f ef       	ldi	r18, 0xFF	; 255
    344c:	a2 07       	cpc	r26, r18
    344e:	2f ef       	ldi	r18, 0xFF	; 255
    3450:	b2 07       	cpc	r27, r18
    3452:	0c f0       	brlt	.+2      	; 0x3456 <__vector_25+0x262>
    3454:	ea c0       	rjmp	.+468    	; 0x362a <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    3456:	8a e9       	ldi	r24, 0x9A	; 154
    3458:	9d ef       	ldi	r25, 0xFD	; 253
    345a:	af ef       	ldi	r26, 0xFF	; 255
    345c:	bf ef       	ldi	r27, 0xFF	; 255
    345e:	80 93 88 03 	sts	0x0388, r24
    3462:	90 93 89 03 	sts	0x0389, r25
    3466:	a0 93 8a 03 	sts	0x038A, r26
    346a:	b0 93 8b 03 	sts	0x038B, r27
    346e:	86 e6       	ldi	r24, 0x66	; 102
    3470:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    3472:	90 93 9b 00 	sts	0x009B, r25
    3476:	80 93 9a 00 	sts	0x009A, r24
    347a:	db ce       	rjmp	.-586    	; 0x3232 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    347c:	80 91 80 00 	lds	r24, 0x0080
    3480:	80 62       	ori	r24, 0x20	; 32
    3482:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    3486:	80 91 0f 02 	lds	r24, 0x020F
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    348e:	8f 3f       	cpi	r24, 0xFF	; 255
    3490:	91 05       	cpc	r25, r1
    3492:	19 f0       	breq	.+6      	; 0x349a <__vector_25+0x2a6>
    3494:	14 f0       	brlt	.+4      	; 0x349a <__vector_25+0x2a6>
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	80 93 0f 02 	sts	0x020F, r24
					OCR1B = pwm_green;
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	90 93 8b 00 	sts	0x008B, r25
    34a4:	80 93 8a 00 	sts	0x008A, r24
    34a8:	c4 ce       	rjmp	.-632    	; 0x3232 <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    34aa:	80 91 80 00 	lds	r24, 0x0080
    34ae:	80 68       	ori	r24, 0x80	; 128
    34b0:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    34b4:	80 91 0e 02 	lds	r24, 0x020E
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    34bc:	8f 3f       	cpi	r24, 0xFF	; 255
    34be:	91 05       	cpc	r25, r1
    34c0:	19 f0       	breq	.+6      	; 0x34c8 <__vector_25+0x2d4>
    34c2:	14 f0       	brlt	.+4      	; 0x34c8 <__vector_25+0x2d4>
    34c4:	8f ef       	ldi	r24, 0xFF	; 255
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	80 93 0e 02 	sts	0x020E, r24
					OCR1A = pwm_red;
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	90 93 89 00 	sts	0x0089, r25
    34d2:	80 93 88 00 	sts	0x0088, r24
    34d6:	ad ce       	rjmp	.-678    	; 0x3232 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    34d8:	80 91 8c 03 	lds	r24, 0x038C
    34dc:	90 91 8d 03 	lds	r25, 0x038D
    34e0:	a0 91 8e 03 	lds	r26, 0x038E
    34e4:	b0 91 8f 03 	lds	r27, 0x038F
    34e8:	4e 96       	adiw	r24, 0x1e	; 30
    34ea:	a1 1d       	adc	r26, r1
    34ec:	b1 1d       	adc	r27, r1
    34ee:	80 93 8c 03 	sts	0x038C, r24
    34f2:	90 93 8d 03 	sts	0x038D, r25
    34f6:	a0 93 8e 03 	sts	0x038E, r26
    34fa:	b0 93 8f 03 	sts	0x038F, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    34fe:	87 36       	cpi	r24, 0x67	; 103
    3500:	22 e0       	ldi	r18, 0x02	; 2
    3502:	92 07       	cpc	r25, r18
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	a2 07       	cpc	r26, r18
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	b2 07       	cpc	r27, r18
    350c:	0c f4       	brge	.+2      	; 0x3510 <__vector_25+0x31c>
    350e:	58 c0       	rjmp	.+176    	; 0x35c0 <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    3510:	86 e6       	ldi	r24, 0x66	; 102
    3512:	92 e0       	ldi	r25, 0x02	; 2
    3514:	a0 e0       	ldi	r26, 0x00	; 0
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	80 93 8c 03 	sts	0x038C, r24
    351c:	90 93 8d 03 	sts	0x038D, r25
    3520:	a0 93 8e 03 	sts	0x038E, r26
    3524:	b0 93 8f 03 	sts	0x038F, r27
    3528:	86 e6       	ldi	r24, 0x66	; 102
    352a:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    352c:	90 93 a9 00 	sts	0x00A9, r25
    3530:	80 93 a8 00 	sts	0x00A8, r24
    3534:	7e ce       	rjmp	.-772    	; 0x3232 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    3536:	80 91 80 00 	lds	r24, 0x0080
    353a:	88 60       	ori	r24, 0x08	; 8
    353c:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    3540:	80 91 10 02 	lds	r24, 0x0210
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    3548:	8f 3f       	cpi	r24, 0xFF	; 255
    354a:	91 05       	cpc	r25, r1
    354c:	19 f0       	breq	.+6      	; 0x3554 <__vector_25+0x360>
    354e:	14 f0       	brlt	.+4      	; 0x3554 <__vector_25+0x360>
    3550:	8f ef       	ldi	r24, 0xFF	; 255
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	80 93 10 02 	sts	0x0210, r24
					OCR1C = pwm_blue;
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	90 93 8d 00 	sts	0x008D, r25
    355e:	80 93 8c 00 	sts	0x008C, r24
    3562:	67 ce       	rjmp	.-818    	; 0x3232 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    3564:	80 91 88 03 	lds	r24, 0x0388
    3568:	90 91 89 03 	lds	r25, 0x0389
    356c:	a0 91 8a 03 	lds	r26, 0x038A
    3570:	b0 91 8b 03 	lds	r27, 0x038B
    3574:	4e 96       	adiw	r24, 0x1e	; 30
    3576:	a1 1d       	adc	r26, r1
    3578:	b1 1d       	adc	r27, r1
    357a:	80 93 88 03 	sts	0x0388, r24
    357e:	90 93 89 03 	sts	0x0389, r25
    3582:	a0 93 8a 03 	sts	0x038A, r26
    3586:	b0 93 8b 03 	sts	0x038B, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    358a:	87 36       	cpi	r24, 0x67	; 103
    358c:	22 e0       	ldi	r18, 0x02	; 2
    358e:	92 07       	cpc	r25, r18
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	a2 07       	cpc	r26, r18
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	b2 07       	cpc	r27, r18
    3598:	ec f0       	brlt	.+58     	; 0x35d4 <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    359a:	86 e6       	ldi	r24, 0x66	; 102
    359c:	92 e0       	ldi	r25, 0x02	; 2
    359e:	a0 e0       	ldi	r26, 0x00	; 0
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	80 93 88 03 	sts	0x0388, r24
    35a6:	90 93 89 03 	sts	0x0389, r25
    35aa:	a0 93 8a 03 	sts	0x038A, r26
    35ae:	b0 93 8b 03 	sts	0x038B, r27
    35b2:	86 e6       	ldi	r24, 0x66	; 102
    35b4:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    35b6:	90 93 99 00 	sts	0x0099, r25
    35ba:	80 93 98 00 	sts	0x0098, r24
    35be:	39 ce       	rjmp	.-910    	; 0x3232 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    35c0:	b7 ff       	sbrs	r27, 7
    35c2:	b4 cf       	rjmp	.-152    	; 0x352c <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    35c4:	90 95       	com	r25
    35c6:	81 95       	neg	r24
    35c8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ca:	90 93 ab 00 	sts	0x00AB, r25
    35ce:	80 93 aa 00 	sts	0x00AA, r24
    35d2:	2f ce       	rjmp	.-930    	; 0x3232 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    35d4:	b7 ff       	sbrs	r27, 7
    35d6:	ef cf       	rjmp	.-34     	; 0x35b6 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    35d8:	90 95       	com	r25
    35da:	81 95       	neg	r24
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	90 93 9b 00 	sts	0x009B, r25
    35e2:	80 93 9a 00 	sts	0x009A, r24
    35e6:	25 ce       	rjmp	.-950    	; 0x3232 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    35e8:	10 92 0e 02 	sts	0x020E, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    35ec:	80 91 80 00 	lds	r24, 0x0080
    35f0:	8f 77       	andi	r24, 0x7F	; 127
    35f2:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    35f6:	2d 98       	cbi	0x05, 5	; 5
    35f8:	1c ce       	rjmp	.-968    	; 0x3232 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    35fa:	10 92 0f 02 	sts	0x020F, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    35fe:	80 91 80 00 	lds	r24, 0x0080
    3602:	8f 7d       	andi	r24, 0xDF	; 223
    3604:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    3608:	2e 98       	cbi	0x05, 6	; 5
    360a:	13 ce       	rjmp	.-986    	; 0x3232 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    360c:	10 92 10 02 	sts	0x0210, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    3610:	80 91 80 00 	lds	r24, 0x0080
    3614:	87 7f       	andi	r24, 0xF7	; 247
    3616:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    361a:	2f 98       	cbi	0x05, 7	; 5
    361c:	0a ce       	rjmp	.-1004   	; 0x3232 <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    361e:	b7 ff       	sbrs	r27, 7
    3620:	85 cf       	rjmp	.-246    	; 0x352c <__vector_25+0x338>
						OCR4A = pwm_left;
    3622:	90 95       	com	r25
    3624:	81 95       	neg	r24
    3626:	9f 4f       	sbci	r25, 0xFF	; 255
    3628:	f5 ce       	rjmp	.-534    	; 0x3414 <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    362a:	b7 ff       	sbrs	r27, 7
    362c:	c4 cf       	rjmp	.-120    	; 0x35b6 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    362e:	90 95       	com	r25
    3630:	81 95       	neg	r24
    3632:	9f 4f       	sbci	r25, 0xFF	; 255
    3634:	1e cf       	rjmp	.-452    	; 0x3472 <__vector_25+0x27e>

00003636 <_fpadd_parts>:
    3636:	a0 e0       	ldi	r26, 0x00	; 0
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e1 e2       	ldi	r30, 0x21	; 33
    363c:	fb e1       	ldi	r31, 0x1B	; 27
    363e:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__prologue_saves__+0x4>
    3642:	2c 01       	movw	r4, r24
    3644:	5b 01       	movw	r10, r22
    3646:	fa 01       	movw	r30, r20
    3648:	dc 01       	movw	r26, r24
    364a:	9c 91       	ld	r25, X
    364c:	92 30       	cpi	r25, 0x02	; 2
    364e:	08 f4       	brcc	.+2      	; 0x3652 <_fpadd_parts+0x1c>
    3650:	32 c1       	rjmp	.+612    	; 0x38b6 <_fpadd_parts+0x280>
    3652:	eb 01       	movw	r28, r22
    3654:	88 81       	ld	r24, Y
    3656:	82 30       	cpi	r24, 0x02	; 2
    3658:	08 f4       	brcc	.+2      	; 0x365c <_fpadd_parts+0x26>
    365a:	2c c1       	rjmp	.+600    	; 0x38b4 <_fpadd_parts+0x27e>
    365c:	94 30       	cpi	r25, 0x04	; 4
    365e:	71 f4       	brne	.+28     	; 0x367c <_fpadd_parts+0x46>
    3660:	84 30       	cpi	r24, 0x04	; 4
    3662:	09 f0       	breq	.+2      	; 0x3666 <_fpadd_parts+0x30>
    3664:	28 c1       	rjmp	.+592    	; 0x38b6 <_fpadd_parts+0x280>
    3666:	f2 01       	movw	r30, r4
    3668:	91 81       	ldd	r25, Z+1	; 0x01
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	98 17       	cp	r25, r24
    366e:	09 f4       	brne	.+2      	; 0x3672 <_fpadd_parts+0x3c>
    3670:	22 c1       	rjmp	.+580    	; 0x38b6 <_fpadd_parts+0x280>
    3672:	15 e1       	ldi	r17, 0x15	; 21
    3674:	41 2e       	mov	r4, r17
    3676:	12 e0       	ldi	r17, 0x02	; 2
    3678:	51 2e       	mov	r5, r17
    367a:	1d c1       	rjmp	.+570    	; 0x38b6 <_fpadd_parts+0x280>
    367c:	84 30       	cpi	r24, 0x04	; 4
    367e:	09 f4       	brne	.+2      	; 0x3682 <_fpadd_parts+0x4c>
    3680:	19 c1       	rjmp	.+562    	; 0x38b4 <_fpadd_parts+0x27e>
    3682:	82 30       	cpi	r24, 0x02	; 2
    3684:	a9 f4       	brne	.+42     	; 0x36b0 <_fpadd_parts+0x7a>
    3686:	92 30       	cpi	r25, 0x02	; 2
    3688:	09 f0       	breq	.+2      	; 0x368c <_fpadd_parts+0x56>
    368a:	15 c1       	rjmp	.+554    	; 0x38b6 <_fpadd_parts+0x280>
    368c:	ca 01       	movw	r24, r20
    368e:	a2 01       	movw	r20, r4
    3690:	28 e0       	ldi	r18, 0x08	; 8
    3692:	da 01       	movw	r26, r20
    3694:	0d 90       	ld	r0, X+
    3696:	ad 01       	movw	r20, r26
    3698:	ec 01       	movw	r28, r24
    369a:	09 92       	st	Y+, r0
    369c:	ce 01       	movw	r24, r28
    369e:	21 50       	subi	r18, 0x01	; 1
    36a0:	c1 f7       	brne	.-16     	; 0x3692 <_fpadd_parts+0x5c>
    36a2:	e5 01       	movw	r28, r10
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	e2 01       	movw	r28, r4
    36a8:	99 81       	ldd	r25, Y+1	; 0x01
    36aa:	89 23       	and	r24, r25
    36ac:	81 83       	std	Z+1, r24	; 0x01
    36ae:	00 c1       	rjmp	.+512    	; 0x38b0 <_fpadd_parts+0x27a>
    36b0:	92 30       	cpi	r25, 0x02	; 2
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <_fpadd_parts+0x80>
    36b4:	ff c0       	rjmp	.+510    	; 0x38b4 <_fpadd_parts+0x27e>
    36b6:	e2 01       	movw	r28, r4
    36b8:	ca 80       	ldd	r12, Y+2	; 0x02
    36ba:	db 80       	ldd	r13, Y+3	; 0x03
    36bc:	eb 01       	movw	r28, r22
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	9b 81       	ldd	r25, Y+3	; 0x03
    36c2:	e2 01       	movw	r28, r4
    36c4:	2c 81       	ldd	r18, Y+4	; 0x04
    36c6:	3d 81       	ldd	r19, Y+5	; 0x05
    36c8:	4e 81       	ldd	r20, Y+6	; 0x06
    36ca:	5f 81       	ldd	r21, Y+7	; 0x07
    36cc:	eb 01       	movw	r28, r22
    36ce:	ec 80       	ldd	r14, Y+4	; 0x04
    36d0:	fd 80       	ldd	r15, Y+5	; 0x05
    36d2:	0e 81       	ldd	r16, Y+6	; 0x06
    36d4:	1f 81       	ldd	r17, Y+7	; 0x07
    36d6:	b6 01       	movw	r22, r12
    36d8:	68 1b       	sub	r22, r24
    36da:	79 0b       	sbc	r23, r25
    36dc:	db 01       	movw	r26, r22
    36de:	77 ff       	sbrs	r23, 7
    36e0:	03 c0       	rjmp	.+6      	; 0x36e8 <_fpadd_parts+0xb2>
    36e2:	70 95       	com	r23
    36e4:	61 95       	neg	r22
    36e6:	7f 4f       	sbci	r23, 0xFF	; 255
    36e8:	60 32       	cpi	r22, 0x20	; 32
    36ea:	71 05       	cpc	r23, r1
    36ec:	0c f0       	brlt	.+2      	; 0x36f0 <_fpadd_parts+0xba>
    36ee:	5d c0       	rjmp	.+186    	; 0x37aa <_fpadd_parts+0x174>
    36f0:	1a 16       	cp	r1, r26
    36f2:	1b 06       	cpc	r1, r27
    36f4:	5c f5       	brge	.+86     	; 0x374c <_fpadd_parts+0x116>
    36f6:	66 24       	eor	r6, r6
    36f8:	77 24       	eor	r7, r7
    36fa:	43 01       	movw	r8, r6
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	a0 e0       	ldi	r26, 0x00	; 0
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	06 2e       	mov	r0, r22
    3706:	04 c0       	rjmp	.+8      	; 0x3710 <_fpadd_parts+0xda>
    3708:	88 0f       	add	r24, r24
    370a:	99 1f       	adc	r25, r25
    370c:	aa 1f       	adc	r26, r26
    370e:	bb 1f       	adc	r27, r27
    3710:	0a 94       	dec	r0
    3712:	d2 f7       	brpl	.-12     	; 0x3708 <_fpadd_parts+0xd2>
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	a1 09       	sbc	r26, r1
    3718:	b1 09       	sbc	r27, r1
    371a:	8e 21       	and	r24, r14
    371c:	9f 21       	and	r25, r15
    371e:	a0 23       	and	r26, r16
    3720:	b1 23       	and	r27, r17
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	a1 05       	cpc	r26, r1
    3726:	b1 05       	cpc	r27, r1
    3728:	29 f0       	breq	.+10     	; 0x3734 <_fpadd_parts+0xfe>
    372a:	b1 e0       	ldi	r27, 0x01	; 1
    372c:	6b 2e       	mov	r6, r27
    372e:	71 2c       	mov	r7, r1
    3730:	81 2c       	mov	r8, r1
    3732:	91 2c       	mov	r9, r1
    3734:	04 c0       	rjmp	.+8      	; 0x373e <_fpadd_parts+0x108>
    3736:	16 95       	lsr	r17
    3738:	07 95       	ror	r16
    373a:	f7 94       	ror	r15
    373c:	e7 94       	ror	r14
    373e:	6a 95       	dec	r22
    3740:	d2 f7       	brpl	.-12     	; 0x3736 <_fpadd_parts+0x100>
    3742:	e6 28       	or	r14, r6
    3744:	f7 28       	or	r15, r7
    3746:	08 29       	or	r16, r8
    3748:	19 29       	or	r17, r9
    374a:	3b c0       	rjmp	.+118    	; 0x37c2 <_fpadd_parts+0x18c>
    374c:	ab 2b       	or	r26, r27
    374e:	c9 f1       	breq	.+114    	; 0x37c2 <_fpadd_parts+0x18c>
    3750:	c6 0e       	add	r12, r22
    3752:	d7 1e       	adc	r13, r23
    3754:	66 24       	eor	r6, r6
    3756:	77 24       	eor	r7, r7
    3758:	43 01       	movw	r8, r6
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a0 e0       	ldi	r26, 0x00	; 0
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	06 2e       	mov	r0, r22
    3764:	04 c0       	rjmp	.+8      	; 0x376e <_fpadd_parts+0x138>
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	aa 1f       	adc	r26, r26
    376c:	bb 1f       	adc	r27, r27
    376e:	0a 94       	dec	r0
    3770:	d2 f7       	brpl	.-12     	; 0x3766 <_fpadd_parts+0x130>
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	a1 09       	sbc	r26, r1
    3776:	b1 09       	sbc	r27, r1
    3778:	82 23       	and	r24, r18
    377a:	93 23       	and	r25, r19
    377c:	a4 23       	and	r26, r20
    377e:	b5 23       	and	r27, r21
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	a1 05       	cpc	r26, r1
    3784:	b1 05       	cpc	r27, r1
    3786:	29 f0       	breq	.+10     	; 0x3792 <_fpadd_parts+0x15c>
    3788:	a1 e0       	ldi	r26, 0x01	; 1
    378a:	6a 2e       	mov	r6, r26
    378c:	71 2c       	mov	r7, r1
    378e:	81 2c       	mov	r8, r1
    3790:	91 2c       	mov	r9, r1
    3792:	04 c0       	rjmp	.+8      	; 0x379c <_fpadd_parts+0x166>
    3794:	56 95       	lsr	r21
    3796:	47 95       	ror	r20
    3798:	37 95       	ror	r19
    379a:	27 95       	ror	r18
    379c:	6a 95       	dec	r22
    379e:	d2 f7       	brpl	.-12     	; 0x3794 <_fpadd_parts+0x15e>
    37a0:	26 29       	or	r18, r6
    37a2:	37 29       	or	r19, r7
    37a4:	48 29       	or	r20, r8
    37a6:	59 29       	or	r21, r9
    37a8:	0c c0       	rjmp	.+24     	; 0x37c2 <_fpadd_parts+0x18c>
    37aa:	8c 15       	cp	r24, r12
    37ac:	9d 05       	cpc	r25, r13
    37ae:	34 f0       	brlt	.+12     	; 0x37bc <_fpadd_parts+0x186>
    37b0:	6c 01       	movw	r12, r24
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	03 c0       	rjmp	.+6      	; 0x37c2 <_fpadd_parts+0x18c>
    37bc:	ee 24       	eor	r14, r14
    37be:	ff 24       	eor	r15, r15
    37c0:	87 01       	movw	r16, r14
    37c2:	e2 01       	movw	r28, r4
    37c4:	99 81       	ldd	r25, Y+1	; 0x01
    37c6:	e5 01       	movw	r28, r10
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	98 17       	cp	r25, r24
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <_fpadd_parts+0x19a>
    37ce:	43 c0       	rjmp	.+134    	; 0x3856 <_fpadd_parts+0x220>
    37d0:	99 23       	and	r25, r25
    37d2:	39 f0       	breq	.+14     	; 0x37e2 <_fpadd_parts+0x1ac>
    37d4:	e2 1a       	sub	r14, r18
    37d6:	f3 0a       	sbc	r15, r19
    37d8:	04 0b       	sbc	r16, r20
    37da:	15 0b       	sbc	r17, r21
    37dc:	a8 01       	movw	r20, r16
    37de:	97 01       	movw	r18, r14
    37e0:	04 c0       	rjmp	.+8      	; 0x37ea <_fpadd_parts+0x1b4>
    37e2:	2e 19       	sub	r18, r14
    37e4:	3f 09       	sbc	r19, r15
    37e6:	40 0b       	sbc	r20, r16
    37e8:	51 0b       	sbc	r21, r17
    37ea:	57 fd       	sbrc	r21, 7
    37ec:	08 c0       	rjmp	.+16     	; 0x37fe <_fpadd_parts+0x1c8>
    37ee:	11 82       	std	Z+1, r1	; 0x01
    37f0:	d3 82       	std	Z+3, r13	; 0x03
    37f2:	c2 82       	std	Z+2, r12	; 0x02
    37f4:	24 83       	std	Z+4, r18	; 0x04
    37f6:	35 83       	std	Z+5, r19	; 0x05
    37f8:	46 83       	std	Z+6, r20	; 0x06
    37fa:	57 83       	std	Z+7, r21	; 0x07
    37fc:	1d c0       	rjmp	.+58     	; 0x3838 <_fpadd_parts+0x202>
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	81 83       	std	Z+1, r24	; 0x01
    3802:	d3 82       	std	Z+3, r13	; 0x03
    3804:	c2 82       	std	Z+2, r12	; 0x02
    3806:	88 27       	eor	r24, r24
    3808:	99 27       	eor	r25, r25
    380a:	dc 01       	movw	r26, r24
    380c:	82 1b       	sub	r24, r18
    380e:	93 0b       	sbc	r25, r19
    3810:	a4 0b       	sbc	r26, r20
    3812:	b5 0b       	sbc	r27, r21
    3814:	84 83       	std	Z+4, r24	; 0x04
    3816:	95 83       	std	Z+5, r25	; 0x05
    3818:	a6 83       	std	Z+6, r26	; 0x06
    381a:	b7 83       	std	Z+7, r27	; 0x07
    381c:	0d c0       	rjmp	.+26     	; 0x3838 <_fpadd_parts+0x202>
    381e:	22 0f       	add	r18, r18
    3820:	33 1f       	adc	r19, r19
    3822:	44 1f       	adc	r20, r20
    3824:	55 1f       	adc	r21, r21
    3826:	24 83       	std	Z+4, r18	; 0x04
    3828:	35 83       	std	Z+5, r19	; 0x05
    382a:	46 83       	std	Z+6, r20	; 0x06
    382c:	57 83       	std	Z+7, r21	; 0x07
    382e:	82 81       	ldd	r24, Z+2	; 0x02
    3830:	93 81       	ldd	r25, Z+3	; 0x03
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	93 83       	std	Z+3, r25	; 0x03
    3836:	82 83       	std	Z+2, r24	; 0x02
    3838:	24 81       	ldd	r18, Z+4	; 0x04
    383a:	35 81       	ldd	r19, Z+5	; 0x05
    383c:	46 81       	ldd	r20, Z+6	; 0x06
    383e:	57 81       	ldd	r21, Z+7	; 0x07
    3840:	da 01       	movw	r26, r20
    3842:	c9 01       	movw	r24, r18
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	a1 09       	sbc	r26, r1
    3848:	b1 09       	sbc	r27, r1
    384a:	8f 5f       	subi	r24, 0xFF	; 255
    384c:	9f 4f       	sbci	r25, 0xFF	; 255
    384e:	af 4f       	sbci	r26, 0xFF	; 255
    3850:	bf 43       	sbci	r27, 0x3F	; 63
    3852:	28 f3       	brcs	.-54     	; 0x381e <_fpadd_parts+0x1e8>
    3854:	0b c0       	rjmp	.+22     	; 0x386c <_fpadd_parts+0x236>
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	d3 82       	std	Z+3, r13	; 0x03
    385a:	c2 82       	std	Z+2, r12	; 0x02
    385c:	2e 0d       	add	r18, r14
    385e:	3f 1d       	adc	r19, r15
    3860:	40 1f       	adc	r20, r16
    3862:	51 1f       	adc	r21, r17
    3864:	24 83       	std	Z+4, r18	; 0x04
    3866:	35 83       	std	Z+5, r19	; 0x05
    3868:	46 83       	std	Z+6, r20	; 0x06
    386a:	57 83       	std	Z+7, r21	; 0x07
    386c:	83 e0       	ldi	r24, 0x03	; 3
    386e:	80 83       	st	Z, r24
    3870:	24 81       	ldd	r18, Z+4	; 0x04
    3872:	35 81       	ldd	r19, Z+5	; 0x05
    3874:	46 81       	ldd	r20, Z+6	; 0x06
    3876:	57 81       	ldd	r21, Z+7	; 0x07
    3878:	55 23       	and	r21, r21
    387a:	d4 f4       	brge	.+52     	; 0x38b0 <_fpadd_parts+0x27a>
    387c:	c9 01       	movw	r24, r18
    387e:	aa 27       	eor	r26, r26
    3880:	97 fd       	sbrc	r25, 7
    3882:	a0 95       	com	r26
    3884:	ba 2f       	mov	r27, r26
    3886:	81 70       	andi	r24, 0x01	; 1
    3888:	90 70       	andi	r25, 0x00	; 0
    388a:	a0 70       	andi	r26, 0x00	; 0
    388c:	b0 70       	andi	r27, 0x00	; 0
    388e:	56 95       	lsr	r21
    3890:	47 95       	ror	r20
    3892:	37 95       	ror	r19
    3894:	27 95       	ror	r18
    3896:	82 2b       	or	r24, r18
    3898:	93 2b       	or	r25, r19
    389a:	a4 2b       	or	r26, r20
    389c:	b5 2b       	or	r27, r21
    389e:	84 83       	std	Z+4, r24	; 0x04
    38a0:	95 83       	std	Z+5, r25	; 0x05
    38a2:	a6 83       	std	Z+6, r26	; 0x06
    38a4:	b7 83       	std	Z+7, r27	; 0x07
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	01 96       	adiw	r24, 0x01	; 1
    38ac:	93 83       	std	Z+3, r25	; 0x03
    38ae:	82 83       	std	Z+2, r24	; 0x02
    38b0:	2f 01       	movw	r4, r30
    38b2:	01 c0       	rjmp	.+2      	; 0x38b6 <_fpadd_parts+0x280>
    38b4:	25 01       	movw	r4, r10
    38b6:	c2 01       	movw	r24, r4
    38b8:	e0 e1       	ldi	r30, 0x10	; 16
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    38be:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__epilogue_restores__+0x4>

000038c2 <__subsf3>:
    38c2:	a0 e2       	ldi	r26, 0x20	; 32
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	e7 e6       	ldi	r30, 0x67	; 103
    38c8:	fc e1       	ldi	r31, 0x1C	; 28
    38ca:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__prologue_saves__+0x18>
    38ce:	69 83       	std	Y+1, r22	; 0x01
    38d0:	7a 83       	std	Y+2, r23	; 0x02
    38d2:	8b 83       	std	Y+3, r24	; 0x03
    38d4:	9c 83       	std	Y+4, r25	; 0x04
    38d6:	2d 83       	std	Y+5, r18	; 0x05
    38d8:	3e 83       	std	Y+6, r19	; 0x06
    38da:	4f 83       	std	Y+7, r20	; 0x07
    38dc:	58 87       	std	Y+8, r21	; 0x08
    38de:	09 e0       	ldi	r16, 0x09	; 9
    38e0:	e0 2e       	mov	r14, r16
    38e2:	f1 2c       	mov	r15, r1
    38e4:	ec 0e       	add	r14, r28
    38e6:	fd 1e       	adc	r15, r29
    38e8:	b7 01       	movw	r22, r14
    38ea:	ce 01       	movw	r24, r28
    38ec:	01 96       	adiw	r24, 0x01	; 1
    38ee:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    38f2:	8e 01       	movw	r16, r28
    38f4:	0f 5e       	subi	r16, 0xEF	; 239
    38f6:	1f 4f       	sbci	r17, 0xFF	; 255
    38f8:	b8 01       	movw	r22, r16
    38fa:	ce 01       	movw	r24, r28
    38fc:	05 96       	adiw	r24, 0x05	; 5
    38fe:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    3902:	8a 89       	ldd	r24, Y+18	; 0x12
    3904:	91 e0       	ldi	r25, 0x01	; 1
    3906:	89 27       	eor	r24, r25
    3908:	8a 8b       	std	Y+18, r24	; 0x12
    390a:	ae 01       	movw	r20, r28
    390c:	47 5e       	subi	r20, 0xE7	; 231
    390e:	5f 4f       	sbci	r21, 0xFF	; 255
    3910:	b8 01       	movw	r22, r16
    3912:	c7 01       	movw	r24, r14
    3914:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_fpadd_parts>
    3918:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__pack_f>
    391c:	e6 e0       	ldi	r30, 0x06	; 6
    391e:	a0 96       	adiw	r28, 0x20	; 32
    3920:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__epilogue_restores__+0x18>

00003924 <__addsf3>:
    3924:	a0 e2       	ldi	r26, 0x20	; 32
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	e8 e9       	ldi	r30, 0x98	; 152
    392a:	fc e1       	ldi	r31, 0x1C	; 28
    392c:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__prologue_saves__+0x18>
    3930:	69 83       	std	Y+1, r22	; 0x01
    3932:	7a 83       	std	Y+2, r23	; 0x02
    3934:	8b 83       	std	Y+3, r24	; 0x03
    3936:	9c 83       	std	Y+4, r25	; 0x04
    3938:	2d 83       	std	Y+5, r18	; 0x05
    393a:	3e 83       	std	Y+6, r19	; 0x06
    393c:	4f 83       	std	Y+7, r20	; 0x07
    393e:	58 87       	std	Y+8, r21	; 0x08
    3940:	89 e0       	ldi	r24, 0x09	; 9
    3942:	e8 2e       	mov	r14, r24
    3944:	f1 2c       	mov	r15, r1
    3946:	ec 0e       	add	r14, r28
    3948:	fd 1e       	adc	r15, r29
    394a:	b7 01       	movw	r22, r14
    394c:	ce 01       	movw	r24, r28
    394e:	01 96       	adiw	r24, 0x01	; 1
    3950:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    3954:	8e 01       	movw	r16, r28
    3956:	0f 5e       	subi	r16, 0xEF	; 239
    3958:	1f 4f       	sbci	r17, 0xFF	; 255
    395a:	b8 01       	movw	r22, r16
    395c:	ce 01       	movw	r24, r28
    395e:	05 96       	adiw	r24, 0x05	; 5
    3960:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    3964:	ae 01       	movw	r20, r28
    3966:	47 5e       	subi	r20, 0xE7	; 231
    3968:	5f 4f       	sbci	r21, 0xFF	; 255
    396a:	b8 01       	movw	r22, r16
    396c:	c7 01       	movw	r24, r14
    396e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <_fpadd_parts>
    3972:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__pack_f>
    3976:	e6 e0       	ldi	r30, 0x06	; 6
    3978:	a0 96       	adiw	r28, 0x20	; 32
    397a:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__epilogue_restores__+0x18>

0000397e <__mulsf3>:
    397e:	a0 e2       	ldi	r26, 0x20	; 32
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	e5 ec       	ldi	r30, 0xC5	; 197
    3984:	fc e1       	ldi	r31, 0x1C	; 28
    3986:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__prologue_saves__+0x4>
    398a:	69 83       	std	Y+1, r22	; 0x01
    398c:	7a 83       	std	Y+2, r23	; 0x02
    398e:	8b 83       	std	Y+3, r24	; 0x03
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	2d 83       	std	Y+5, r18	; 0x05
    3994:	3e 83       	std	Y+6, r19	; 0x06
    3996:	4f 83       	std	Y+7, r20	; 0x07
    3998:	58 87       	std	Y+8, r21	; 0x08
    399a:	99 e0       	ldi	r25, 0x09	; 9
    399c:	e9 2e       	mov	r14, r25
    399e:	f1 2c       	mov	r15, r1
    39a0:	ec 0e       	add	r14, r28
    39a2:	fd 1e       	adc	r15, r29
    39a4:	b7 01       	movw	r22, r14
    39a6:	ce 01       	movw	r24, r28
    39a8:	01 96       	adiw	r24, 0x01	; 1
    39aa:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    39ae:	8e 01       	movw	r16, r28
    39b0:	0f 5e       	subi	r16, 0xEF	; 239
    39b2:	1f 4f       	sbci	r17, 0xFF	; 255
    39b4:	b8 01       	movw	r22, r16
    39b6:	ce 01       	movw	r24, r28
    39b8:	05 96       	adiw	r24, 0x05	; 5
    39ba:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    39be:	99 85       	ldd	r25, Y+9	; 0x09
    39c0:	92 30       	cpi	r25, 0x02	; 2
    39c2:	88 f0       	brcs	.+34     	; 0x39e6 <__mulsf3+0x68>
    39c4:	89 89       	ldd	r24, Y+17	; 0x11
    39c6:	82 30       	cpi	r24, 0x02	; 2
    39c8:	c0 f0       	brcs	.+48     	; 0x39fa <__mulsf3+0x7c>
    39ca:	94 30       	cpi	r25, 0x04	; 4
    39cc:	19 f4       	brne	.+6      	; 0x39d4 <__mulsf3+0x56>
    39ce:	82 30       	cpi	r24, 0x02	; 2
    39d0:	29 f0       	breq	.+10     	; 0x39dc <__mulsf3+0x5e>
    39d2:	09 c0       	rjmp	.+18     	; 0x39e6 <__mulsf3+0x68>
    39d4:	84 30       	cpi	r24, 0x04	; 4
    39d6:	29 f4       	brne	.+10     	; 0x39e2 <__mulsf3+0x64>
    39d8:	92 30       	cpi	r25, 0x02	; 2
    39da:	79 f4       	brne	.+30     	; 0x39fa <__mulsf3+0x7c>
    39dc:	65 e1       	ldi	r22, 0x15	; 21
    39de:	72 e0       	ldi	r23, 0x02	; 2
    39e0:	c6 c0       	rjmp	.+396    	; 0x3b6e <__mulsf3+0x1f0>
    39e2:	92 30       	cpi	r25, 0x02	; 2
    39e4:	41 f4       	brne	.+16     	; 0x39f6 <__mulsf3+0x78>
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ea:	8a 89       	ldd	r24, Y+18	; 0x12
    39ec:	98 13       	cpse	r25, r24
    39ee:	21 e0       	ldi	r18, 0x01	; 1
    39f0:	2a 87       	std	Y+10, r18	; 0x0a
    39f2:	b7 01       	movw	r22, r14
    39f4:	bc c0       	rjmp	.+376    	; 0x3b6e <__mulsf3+0x1f0>
    39f6:	82 30       	cpi	r24, 0x02	; 2
    39f8:	41 f4       	brne	.+16     	; 0x3a0a <__mulsf3+0x8c>
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	8a 89       	ldd	r24, Y+18	; 0x12
    3a00:	98 13       	cpse	r25, r24
    3a02:	21 e0       	ldi	r18, 0x01	; 1
    3a04:	2a 8b       	std	Y+18, r18	; 0x12
    3a06:	b8 01       	movw	r22, r16
    3a08:	b2 c0       	rjmp	.+356    	; 0x3b6e <__mulsf3+0x1f0>
    3a0a:	cd 84       	ldd	r12, Y+13	; 0x0d
    3a0c:	de 84       	ldd	r13, Y+14	; 0x0e
    3a0e:	ef 84       	ldd	r14, Y+15	; 0x0f
    3a10:	f8 88       	ldd	r15, Y+16	; 0x10
    3a12:	0d 89       	ldd	r16, Y+21	; 0x15
    3a14:	1e 89       	ldd	r17, Y+22	; 0x16
    3a16:	2f 89       	ldd	r18, Y+23	; 0x17
    3a18:	38 8d       	ldd	r19, Y+24	; 0x18
    3a1a:	88 24       	eor	r8, r8
    3a1c:	99 24       	eor	r9, r9
    3a1e:	54 01       	movw	r10, r8
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	70 e0       	ldi	r23, 0x00	; 0
    3a28:	44 24       	eor	r4, r4
    3a2a:	55 24       	eor	r5, r5
    3a2c:	32 01       	movw	r6, r4
    3a2e:	e0 e0       	ldi	r30, 0x00	; 0
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	c6 01       	movw	r24, r12
    3a34:	81 70       	andi	r24, 0x01	; 1
    3a36:	90 70       	andi	r25, 0x00	; 0
    3a38:	89 2b       	or	r24, r25
    3a3a:	d9 f0       	breq	.+54     	; 0x3a72 <__mulsf3+0xf4>
    3a3c:	80 0e       	add	r8, r16
    3a3e:	91 1e       	adc	r9, r17
    3a40:	a2 1e       	adc	r10, r18
    3a42:	b3 1e       	adc	r11, r19
    3a44:	db 01       	movw	r26, r22
    3a46:	ca 01       	movw	r24, r20
    3a48:	84 0d       	add	r24, r4
    3a4a:	95 1d       	adc	r25, r5
    3a4c:	a6 1d       	adc	r26, r6
    3a4e:	b7 1d       	adc	r27, r7
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	50 e0       	ldi	r21, 0x00	; 0
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	80 16       	cp	r8, r16
    3a5a:	91 06       	cpc	r9, r17
    3a5c:	a2 06       	cpc	r10, r18
    3a5e:	b3 06       	cpc	r11, r19
    3a60:	20 f4       	brcc	.+8      	; 0x3a6a <__mulsf3+0xec>
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	70 e0       	ldi	r23, 0x00	; 0
    3a6a:	48 0f       	add	r20, r24
    3a6c:	59 1f       	adc	r21, r25
    3a6e:	6a 1f       	adc	r22, r26
    3a70:	7b 1f       	adc	r23, r27
    3a72:	44 0c       	add	r4, r4
    3a74:	55 1c       	adc	r5, r5
    3a76:	66 1c       	adc	r6, r6
    3a78:	77 1c       	adc	r7, r7
    3a7a:	37 ff       	sbrs	r19, 7
    3a7c:	08 c0       	rjmp	.+16     	; 0x3a8e <__mulsf3+0x110>
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	a0 e0       	ldi	r26, 0x00	; 0
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	48 2a       	or	r4, r24
    3a88:	59 2a       	or	r5, r25
    3a8a:	6a 2a       	or	r6, r26
    3a8c:	7b 2a       	or	r7, r27
    3a8e:	31 96       	adiw	r30, 0x01	; 1
    3a90:	e0 32       	cpi	r30, 0x20	; 32
    3a92:	f1 05       	cpc	r31, r1
    3a94:	49 f0       	breq	.+18     	; 0x3aa8 <__mulsf3+0x12a>
    3a96:	00 0f       	add	r16, r16
    3a98:	11 1f       	adc	r17, r17
    3a9a:	22 1f       	adc	r18, r18
    3a9c:	33 1f       	adc	r19, r19
    3a9e:	f6 94       	lsr	r15
    3aa0:	e7 94       	ror	r14
    3aa2:	d7 94       	ror	r13
    3aa4:	c7 94       	ror	r12
    3aa6:	c5 cf       	rjmp	.-118    	; 0x3a32 <__mulsf3+0xb4>
    3aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    3aac:	2b 85       	ldd	r18, Y+11	; 0x0b
    3aae:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ab0:	82 0f       	add	r24, r18
    3ab2:	93 1f       	adc	r25, r19
    3ab4:	02 96       	adiw	r24, 0x02	; 2
    3ab6:	9c 8f       	std	Y+28, r25	; 0x1c
    3ab8:	8b 8f       	std	Y+27, r24	; 0x1b
    3aba:	1a 8e       	std	Y+26, r1	; 0x1a
    3abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3abe:	8a 89       	ldd	r24, Y+18	; 0x12
    3ac0:	98 17       	cp	r25, r24
    3ac2:	11 f0       	breq	.+4      	; 0x3ac8 <__mulsf3+0x14a>
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	8a 8f       	std	Y+26, r24	; 0x1a
    3ac8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3aca:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3acc:	17 c0       	rjmp	.+46     	; 0x3afc <__mulsf3+0x17e>
    3ace:	ca 01       	movw	r24, r20
    3ad0:	81 70       	andi	r24, 0x01	; 1
    3ad2:	90 70       	andi	r25, 0x00	; 0
    3ad4:	89 2b       	or	r24, r25
    3ad6:	61 f0       	breq	.+24     	; 0x3af0 <__mulsf3+0x172>
    3ad8:	b6 94       	lsr	r11
    3ada:	a7 94       	ror	r10
    3adc:	97 94       	ror	r9
    3ade:	87 94       	ror	r8
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	a0 e0       	ldi	r26, 0x00	; 0
    3ae6:	b0 e8       	ldi	r27, 0x80	; 128
    3ae8:	88 2a       	or	r8, r24
    3aea:	99 2a       	or	r9, r25
    3aec:	aa 2a       	or	r10, r26
    3aee:	bb 2a       	or	r11, r27
    3af0:	76 95       	lsr	r23
    3af2:	67 95       	ror	r22
    3af4:	57 95       	ror	r21
    3af6:	47 95       	ror	r20
    3af8:	2f 5f       	subi	r18, 0xFF	; 255
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	77 fd       	sbrc	r23, 7
    3afe:	e7 cf       	rjmp	.-50     	; 0x3ace <__mulsf3+0x150>
    3b00:	c9 01       	movw	r24, r18
    3b02:	0b c0       	rjmp	.+22     	; 0x3b1a <__mulsf3+0x19c>
    3b04:	44 0f       	add	r20, r20
    3b06:	55 1f       	adc	r21, r21
    3b08:	66 1f       	adc	r22, r22
    3b0a:	77 1f       	adc	r23, r23
    3b0c:	b7 fc       	sbrc	r11, 7
    3b0e:	41 60       	ori	r20, 0x01	; 1
    3b10:	88 0c       	add	r8, r8
    3b12:	99 1c       	adc	r9, r9
    3b14:	aa 1c       	adc	r10, r10
    3b16:	bb 1c       	adc	r11, r11
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	40 30       	cpi	r20, 0x00	; 0
    3b1c:	a0 e0       	ldi	r26, 0x00	; 0
    3b1e:	5a 07       	cpc	r21, r26
    3b20:	a0 e0       	ldi	r26, 0x00	; 0
    3b22:	6a 07       	cpc	r22, r26
    3b24:	a0 e4       	ldi	r26, 0x40	; 64
    3b26:	7a 07       	cpc	r23, r26
    3b28:	68 f3       	brcs	.-38     	; 0x3b04 <__mulsf3+0x186>
    3b2a:	9c 8f       	std	Y+28, r25	; 0x1c
    3b2c:	8b 8f       	std	Y+27, r24	; 0x1b
    3b2e:	db 01       	movw	r26, r22
    3b30:	ca 01       	movw	r24, r20
    3b32:	8f 77       	andi	r24, 0x7F	; 127
    3b34:	90 70       	andi	r25, 0x00	; 0
    3b36:	a0 70       	andi	r26, 0x00	; 0
    3b38:	b0 70       	andi	r27, 0x00	; 0
    3b3a:	80 34       	cpi	r24, 0x40	; 64
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	a1 05       	cpc	r26, r1
    3b40:	b1 05       	cpc	r27, r1
    3b42:	61 f4       	brne	.+24     	; 0x3b5c <__mulsf3+0x1de>
    3b44:	47 fd       	sbrc	r20, 7
    3b46:	0a c0       	rjmp	.+20     	; 0x3b5c <__mulsf3+0x1de>
    3b48:	81 14       	cp	r8, r1
    3b4a:	91 04       	cpc	r9, r1
    3b4c:	a1 04       	cpc	r10, r1
    3b4e:	b1 04       	cpc	r11, r1
    3b50:	29 f0       	breq	.+10     	; 0x3b5c <__mulsf3+0x1de>
    3b52:	40 5c       	subi	r20, 0xC0	; 192
    3b54:	5f 4f       	sbci	r21, 0xFF	; 255
    3b56:	6f 4f       	sbci	r22, 0xFF	; 255
    3b58:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5a:	40 78       	andi	r20, 0x80	; 128
    3b5c:	4d 8f       	std	Y+29, r20	; 0x1d
    3b5e:	5e 8f       	std	Y+30, r21	; 0x1e
    3b60:	6f 8f       	std	Y+31, r22	; 0x1f
    3b62:	78 a3       	std	Y+32, r23	; 0x20
    3b64:	83 e0       	ldi	r24, 0x03	; 3
    3b66:	89 8f       	std	Y+25, r24	; 0x19
    3b68:	be 01       	movw	r22, r28
    3b6a:	67 5e       	subi	r22, 0xE7	; 231
    3b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6e:	cb 01       	movw	r24, r22
    3b70:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__pack_f>
    3b74:	e0 e1       	ldi	r30, 0x10	; 16
    3b76:	a0 96       	adiw	r28, 0x20	; 32
    3b78:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__epilogue_restores__+0x4>

00003b7c <__floatsisf>:
    3b7c:	a8 e0       	ldi	r26, 0x08	; 8
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e4 ec       	ldi	r30, 0xC4	; 196
    3b82:	fd e1       	ldi	r31, 0x1D	; 29
    3b84:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__prologue_saves__+0x12>
    3b88:	9b 01       	movw	r18, r22
    3b8a:	ac 01       	movw	r20, r24
    3b8c:	83 e0       	ldi	r24, 0x03	; 3
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	da 01       	movw	r26, r20
    3b92:	c9 01       	movw	r24, r18
    3b94:	88 27       	eor	r24, r24
    3b96:	b7 fd       	sbrc	r27, 7
    3b98:	83 95       	inc	r24
    3b9a:	99 27       	eor	r25, r25
    3b9c:	aa 27       	eor	r26, r26
    3b9e:	bb 27       	eor	r27, r27
    3ba0:	b8 2e       	mov	r11, r24
    3ba2:	21 15       	cp	r18, r1
    3ba4:	31 05       	cpc	r19, r1
    3ba6:	41 05       	cpc	r20, r1
    3ba8:	51 05       	cpc	r21, r1
    3baa:	19 f4       	brne	.+6      	; 0x3bb2 <__floatsisf+0x36>
    3bac:	82 e0       	ldi	r24, 0x02	; 2
    3bae:	89 83       	std	Y+1, r24	; 0x01
    3bb0:	3a c0       	rjmp	.+116    	; 0x3c26 <__floatsisf+0xaa>
    3bb2:	88 23       	and	r24, r24
    3bb4:	a9 f0       	breq	.+42     	; 0x3be0 <__floatsisf+0x64>
    3bb6:	20 30       	cpi	r18, 0x00	; 0
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	38 07       	cpc	r19, r24
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	48 07       	cpc	r20, r24
    3bc0:	80 e8       	ldi	r24, 0x80	; 128
    3bc2:	58 07       	cpc	r21, r24
    3bc4:	29 f4       	brne	.+10     	; 0x3bd0 <__floatsisf+0x54>
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	9f ec       	ldi	r25, 0xCF	; 207
    3bce:	30 c0       	rjmp	.+96     	; 0x3c30 <__floatsisf+0xb4>
    3bd0:	ee 24       	eor	r14, r14
    3bd2:	ff 24       	eor	r15, r15
    3bd4:	87 01       	movw	r16, r14
    3bd6:	e2 1a       	sub	r14, r18
    3bd8:	f3 0a       	sbc	r15, r19
    3bda:	04 0b       	sbc	r16, r20
    3bdc:	15 0b       	sbc	r17, r21
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <__floatsisf+0x68>
    3be0:	79 01       	movw	r14, r18
    3be2:	8a 01       	movw	r16, r20
    3be4:	8e e1       	ldi	r24, 0x1E	; 30
    3be6:	c8 2e       	mov	r12, r24
    3be8:	d1 2c       	mov	r13, r1
    3bea:	dc 82       	std	Y+4, r13	; 0x04
    3bec:	cb 82       	std	Y+3, r12	; 0x03
    3bee:	ed 82       	std	Y+5, r14	; 0x05
    3bf0:	fe 82       	std	Y+6, r15	; 0x06
    3bf2:	0f 83       	std	Y+7, r16	; 0x07
    3bf4:	18 87       	std	Y+8, r17	; 0x08
    3bf6:	c8 01       	movw	r24, r16
    3bf8:	b7 01       	movw	r22, r14
    3bfa:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__clzsi2>
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	18 16       	cp	r1, r24
    3c02:	19 06       	cpc	r1, r25
    3c04:	84 f4       	brge	.+32     	; 0x3c26 <__floatsisf+0xaa>
    3c06:	08 2e       	mov	r0, r24
    3c08:	04 c0       	rjmp	.+8      	; 0x3c12 <__floatsisf+0x96>
    3c0a:	ee 0c       	add	r14, r14
    3c0c:	ff 1c       	adc	r15, r15
    3c0e:	00 1f       	adc	r16, r16
    3c10:	11 1f       	adc	r17, r17
    3c12:	0a 94       	dec	r0
    3c14:	d2 f7       	brpl	.-12     	; 0x3c0a <__floatsisf+0x8e>
    3c16:	ed 82       	std	Y+5, r14	; 0x05
    3c18:	fe 82       	std	Y+6, r15	; 0x06
    3c1a:	0f 83       	std	Y+7, r16	; 0x07
    3c1c:	18 87       	std	Y+8, r17	; 0x08
    3c1e:	c8 1a       	sub	r12, r24
    3c20:	d9 0a       	sbc	r13, r25
    3c22:	dc 82       	std	Y+4, r13	; 0x04
    3c24:	cb 82       	std	Y+3, r12	; 0x03
    3c26:	ba 82       	std	Y+2, r11	; 0x02
    3c28:	ce 01       	movw	r24, r28
    3c2a:	01 96       	adiw	r24, 0x01	; 1
    3c2c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__pack_f>
    3c30:	e9 e0       	ldi	r30, 0x09	; 9
    3c32:	28 96       	adiw	r28, 0x08	; 8
    3c34:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__epilogue_restores__+0x12>

00003c38 <__fixsfsi>:
    3c38:	ac e0       	ldi	r26, 0x0C	; 12
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	e2 e2       	ldi	r30, 0x22	; 34
    3c3e:	fe e1       	ldi	r31, 0x1E	; 30
    3c40:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__prologue_saves__+0x20>
    3c44:	69 83       	std	Y+1, r22	; 0x01
    3c46:	7a 83       	std	Y+2, r23	; 0x02
    3c48:	8b 83       	std	Y+3, r24	; 0x03
    3c4a:	9c 83       	std	Y+4, r25	; 0x04
    3c4c:	be 01       	movw	r22, r28
    3c4e:	6b 5f       	subi	r22, 0xFB	; 251
    3c50:	7f 4f       	sbci	r23, 0xFF	; 255
    3c52:	ce 01       	movw	r24, r28
    3c54:	01 96       	adiw	r24, 0x01	; 1
    3c56:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__unpack_f>
    3c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5c:	82 30       	cpi	r24, 0x02	; 2
    3c5e:	a9 f1       	breq	.+106    	; 0x3cca <__fixsfsi+0x92>
    3c60:	82 30       	cpi	r24, 0x02	; 2
    3c62:	98 f1       	brcs	.+102    	; 0x3cca <__fixsfsi+0x92>
    3c64:	84 30       	cpi	r24, 0x04	; 4
    3c66:	21 f4       	brne	.+8      	; 0x3c70 <__fixsfsi+0x38>
    3c68:	8e 81       	ldd	r24, Y+6	; 0x06
    3c6a:	88 23       	and	r24, r24
    3c6c:	59 f4       	brne	.+22     	; 0x3c84 <__fixsfsi+0x4c>
    3c6e:	0f c0       	rjmp	.+30     	; 0x3c8e <__fixsfsi+0x56>
    3c70:	2f 81       	ldd	r18, Y+7	; 0x07
    3c72:	38 85       	ldd	r19, Y+8	; 0x08
    3c74:	37 fd       	sbrc	r19, 7
    3c76:	29 c0       	rjmp	.+82     	; 0x3cca <__fixsfsi+0x92>
    3c78:	6e 81       	ldd	r22, Y+6	; 0x06
    3c7a:	2f 31       	cpi	r18, 0x1F	; 31
    3c7c:	31 05       	cpc	r19, r1
    3c7e:	64 f0       	brlt	.+24     	; 0x3c98 <__fixsfsi+0x60>
    3c80:	66 23       	and	r22, r22
    3c82:	29 f0       	breq	.+10     	; 0x3c8e <__fixsfsi+0x56>
    3c84:	20 e0       	ldi	r18, 0x00	; 0
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	40 e0       	ldi	r20, 0x00	; 0
    3c8a:	50 e8       	ldi	r21, 0x80	; 128
    3c8c:	22 c0       	rjmp	.+68     	; 0x3cd2 <__fixsfsi+0x9a>
    3c8e:	2f ef       	ldi	r18, 0xFF	; 255
    3c90:	3f ef       	ldi	r19, 0xFF	; 255
    3c92:	4f ef       	ldi	r20, 0xFF	; 255
    3c94:	5f e7       	ldi	r21, 0x7F	; 127
    3c96:	1d c0       	rjmp	.+58     	; 0x3cd2 <__fixsfsi+0x9a>
    3c98:	8e e1       	ldi	r24, 0x1E	; 30
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	82 1b       	sub	r24, r18
    3c9e:	93 0b       	sbc	r25, r19
    3ca0:	29 85       	ldd	r18, Y+9	; 0x09
    3ca2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ca4:	4b 85       	ldd	r20, Y+11	; 0x0b
    3ca6:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ca8:	04 c0       	rjmp	.+8      	; 0x3cb2 <__fixsfsi+0x7a>
    3caa:	56 95       	lsr	r21
    3cac:	47 95       	ror	r20
    3cae:	37 95       	ror	r19
    3cb0:	27 95       	ror	r18
    3cb2:	8a 95       	dec	r24
    3cb4:	d2 f7       	brpl	.-12     	; 0x3caa <__fixsfsi+0x72>
    3cb6:	66 23       	and	r22, r22
    3cb8:	61 f0       	breq	.+24     	; 0x3cd2 <__fixsfsi+0x9a>
    3cba:	50 95       	com	r21
    3cbc:	40 95       	com	r20
    3cbe:	30 95       	com	r19
    3cc0:	21 95       	neg	r18
    3cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc4:	4f 4f       	sbci	r20, 0xFF	; 255
    3cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc8:	04 c0       	rjmp	.+8      	; 0x3cd2 <__fixsfsi+0x9a>
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e0       	ldi	r20, 0x00	; 0
    3cd0:	50 e0       	ldi	r21, 0x00	; 0
    3cd2:	ca 01       	movw	r24, r20
    3cd4:	b9 01       	movw	r22, r18
    3cd6:	e2 e0       	ldi	r30, 0x02	; 2
    3cd8:	2c 96       	adiw	r28, 0x0c	; 12
    3cda:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__epilogue_restores__+0x20>

00003cde <__clzsi2>:
    3cde:	ef 92       	push	r14
    3ce0:	ff 92       	push	r15
    3ce2:	0f 93       	push	r16
    3ce4:	1f 93       	push	r17
    3ce6:	9b 01       	movw	r18, r22
    3ce8:	ac 01       	movw	r20, r24
    3cea:	20 30       	cpi	r18, 0x00	; 0
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	38 07       	cpc	r19, r24
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	48 07       	cpc	r20, r24
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	58 07       	cpc	r21, r24
    3cf8:	80 f4       	brcc	.+32     	; 0x3d1a <__clzsi2+0x3c>
    3cfa:	2f 3f       	cpi	r18, 0xFF	; 255
    3cfc:	31 05       	cpc	r19, r1
    3cfe:	41 05       	cpc	r20, r1
    3d00:	51 05       	cpc	r21, r1
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <__clzsi2+0x28>
    3d04:	20 f4       	brcc	.+8      	; 0x3d0e <__clzsi2+0x30>
    3d06:	ee 24       	eor	r14, r14
    3d08:	ff 24       	eor	r15, r15
    3d0a:	87 01       	movw	r16, r14
    3d0c:	19 c0       	rjmp	.+50     	; 0x3d40 <__clzsi2+0x62>
    3d0e:	68 e0       	ldi	r22, 0x08	; 8
    3d10:	e6 2e       	mov	r14, r22
    3d12:	f1 2c       	mov	r15, r1
    3d14:	01 2d       	mov	r16, r1
    3d16:	11 2d       	mov	r17, r1
    3d18:	13 c0       	rjmp	.+38     	; 0x3d40 <__clzsi2+0x62>
    3d1a:	20 30       	cpi	r18, 0x00	; 0
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	38 07       	cpc	r19, r24
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	48 07       	cpc	r20, r24
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	58 07       	cpc	r21, r24
    3d28:	30 f4       	brcc	.+12     	; 0x3d36 <__clzsi2+0x58>
    3d2a:	90 e1       	ldi	r25, 0x10	; 16
    3d2c:	e9 2e       	mov	r14, r25
    3d2e:	f1 2c       	mov	r15, r1
    3d30:	01 2d       	mov	r16, r1
    3d32:	11 2d       	mov	r17, r1
    3d34:	05 c0       	rjmp	.+10     	; 0x3d40 <__clzsi2+0x62>
    3d36:	88 e1       	ldi	r24, 0x18	; 24
    3d38:	e8 2e       	mov	r14, r24
    3d3a:	f1 2c       	mov	r15, r1
    3d3c:	01 2d       	mov	r16, r1
    3d3e:	11 2d       	mov	r17, r1
    3d40:	80 e2       	ldi	r24, 0x20	; 32
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	a0 e0       	ldi	r26, 0x00	; 0
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	8e 19       	sub	r24, r14
    3d4a:	9f 09       	sbc	r25, r15
    3d4c:	a0 0b       	sbc	r26, r16
    3d4e:	b1 0b       	sbc	r27, r17
    3d50:	04 c0       	rjmp	.+8      	; 0x3d5a <__clzsi2+0x7c>
    3d52:	56 95       	lsr	r21
    3d54:	47 95       	ror	r20
    3d56:	37 95       	ror	r19
    3d58:	27 95       	ror	r18
    3d5a:	ea 94       	dec	r14
    3d5c:	d2 f7       	brpl	.-12     	; 0x3d52 <__clzsi2+0x74>
    3d5e:	f9 01       	movw	r30, r18
    3d60:	e3 5e       	subi	r30, 0xE3	; 227
    3d62:	fd 4f       	sbci	r31, 0xFD	; 253
    3d64:	20 81       	ld	r18, Z
    3d66:	82 1b       	sub	r24, r18
    3d68:	91 09       	sbc	r25, r1
    3d6a:	a1 09       	sbc	r26, r1
    3d6c:	b1 09       	sbc	r27, r1
    3d6e:	1f 91       	pop	r17
    3d70:	0f 91       	pop	r16
    3d72:	ff 90       	pop	r15
    3d74:	ef 90       	pop	r14
    3d76:	08 95       	ret

00003d78 <__pack_f>:
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	bf 92       	push	r11
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	ee 24       	eor	r14, r14
    3d8c:	ff 24       	eor	r15, r15
    3d8e:	87 01       	movw	r16, r14
    3d90:	fc 01       	movw	r30, r24
    3d92:	24 81       	ldd	r18, Z+4	; 0x04
    3d94:	35 81       	ldd	r19, Z+5	; 0x05
    3d96:	46 81       	ldd	r20, Z+6	; 0x06
    3d98:	57 81       	ldd	r21, Z+7	; 0x07
    3d9a:	91 80       	ldd	r9, Z+1	; 0x01
    3d9c:	80 81       	ld	r24, Z
    3d9e:	82 30       	cpi	r24, 0x02	; 2
    3da0:	10 f4       	brcc	.+4      	; 0x3da6 <__pack_f+0x2e>
    3da2:	40 61       	ori	r20, 0x10	; 16
    3da4:	a2 c0       	rjmp	.+324    	; 0x3eea <__pack_f+0x172>
    3da6:	84 30       	cpi	r24, 0x04	; 4
    3da8:	09 f4       	brne	.+2      	; 0x3dac <__pack_f+0x34>
    3daa:	9b c0       	rjmp	.+310    	; 0x3ee2 <__pack_f+0x16a>
    3dac:	82 30       	cpi	r24, 0x02	; 2
    3dae:	29 f4       	brne	.+10     	; 0x3dba <__pack_f+0x42>
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	05 c0       	rjmp	.+10     	; 0x3dc4 <__pack_f+0x4c>
    3dba:	21 15       	cp	r18, r1
    3dbc:	31 05       	cpc	r19, r1
    3dbe:	41 05       	cpc	r20, r1
    3dc0:	51 05       	cpc	r21, r1
    3dc2:	19 f4       	brne	.+6      	; 0x3dca <__pack_f+0x52>
    3dc4:	e0 e0       	ldi	r30, 0x00	; 0
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	92 c0       	rjmp	.+292    	; 0x3eee <__pack_f+0x176>
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	93 81       	ldd	r25, Z+3	; 0x03
    3dce:	6f ef       	ldi	r22, 0xFF	; 255
    3dd0:	82 38       	cpi	r24, 0x82	; 130
    3dd2:	96 07       	cpc	r25, r22
    3dd4:	0c f0       	brlt	.+2      	; 0x3dd8 <__pack_f+0x60>
    3dd6:	5a c0       	rjmp	.+180    	; 0x3e8c <__pack_f+0x114>
    3dd8:	62 e8       	ldi	r22, 0x82	; 130
    3dda:	7f ef       	ldi	r23, 0xFF	; 255
    3ddc:	68 1b       	sub	r22, r24
    3dde:	79 0b       	sbc	r23, r25
    3de0:	6a 31       	cpi	r22, 0x1A	; 26
    3de2:	71 05       	cpc	r23, r1
    3de4:	2c f0       	brlt	.+10     	; 0x3df0 <__pack_f+0x78>
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e0       	ldi	r20, 0x00	; 0
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	2a c0       	rjmp	.+84     	; 0x3e44 <__pack_f+0xcc>
    3df0:	aa 24       	eor	r10, r10
    3df2:	bb 24       	eor	r11, r11
    3df4:	65 01       	movw	r12, r10
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	a0 e0       	ldi	r26, 0x00	; 0
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	06 2e       	mov	r0, r22
    3e00:	04 c0       	rjmp	.+8      	; 0x3e0a <__pack_f+0x92>
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	aa 1f       	adc	r26, r26
    3e08:	bb 1f       	adc	r27, r27
    3e0a:	0a 94       	dec	r0
    3e0c:	d2 f7       	brpl	.-12     	; 0x3e02 <__pack_f+0x8a>
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	a1 09       	sbc	r26, r1
    3e12:	b1 09       	sbc	r27, r1
    3e14:	82 23       	and	r24, r18
    3e16:	93 23       	and	r25, r19
    3e18:	a4 23       	and	r26, r20
    3e1a:	b5 23       	and	r27, r21
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	a1 05       	cpc	r26, r1
    3e20:	b1 05       	cpc	r27, r1
    3e22:	29 f0       	breq	.+10     	; 0x3e2e <__pack_f+0xb6>
    3e24:	71 e0       	ldi	r23, 0x01	; 1
    3e26:	a7 2e       	mov	r10, r23
    3e28:	b1 2c       	mov	r11, r1
    3e2a:	c1 2c       	mov	r12, r1
    3e2c:	d1 2c       	mov	r13, r1
    3e2e:	04 c0       	rjmp	.+8      	; 0x3e38 <__pack_f+0xc0>
    3e30:	56 95       	lsr	r21
    3e32:	47 95       	ror	r20
    3e34:	37 95       	ror	r19
    3e36:	27 95       	ror	r18
    3e38:	6a 95       	dec	r22
    3e3a:	d2 f7       	brpl	.-12     	; 0x3e30 <__pack_f+0xb8>
    3e3c:	2a 29       	or	r18, r10
    3e3e:	3b 29       	or	r19, r11
    3e40:	4c 29       	or	r20, r12
    3e42:	5d 29       	or	r21, r13
    3e44:	da 01       	movw	r26, r20
    3e46:	c9 01       	movw	r24, r18
    3e48:	8f 77       	andi	r24, 0x7F	; 127
    3e4a:	90 70       	andi	r25, 0x00	; 0
    3e4c:	a0 70       	andi	r26, 0x00	; 0
    3e4e:	b0 70       	andi	r27, 0x00	; 0
    3e50:	80 34       	cpi	r24, 0x40	; 64
    3e52:	91 05       	cpc	r25, r1
    3e54:	a1 05       	cpc	r26, r1
    3e56:	b1 05       	cpc	r27, r1
    3e58:	39 f4       	brne	.+14     	; 0x3e68 <__pack_f+0xf0>
    3e5a:	27 ff       	sbrs	r18, 7
    3e5c:	09 c0       	rjmp	.+18     	; 0x3e70 <__pack_f+0xf8>
    3e5e:	20 5c       	subi	r18, 0xC0	; 192
    3e60:	3f 4f       	sbci	r19, 0xFF	; 255
    3e62:	4f 4f       	sbci	r20, 0xFF	; 255
    3e64:	5f 4f       	sbci	r21, 0xFF	; 255
    3e66:	04 c0       	rjmp	.+8      	; 0x3e70 <__pack_f+0xf8>
    3e68:	21 5c       	subi	r18, 0xC1	; 193
    3e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6c:	4f 4f       	sbci	r20, 0xFF	; 255
    3e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	20 30       	cpi	r18, 0x00	; 0
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	36 07       	cpc	r19, r22
    3e7a:	60 e0       	ldi	r22, 0x00	; 0
    3e7c:	46 07       	cpc	r20, r22
    3e7e:	60 e4       	ldi	r22, 0x40	; 64
    3e80:	56 07       	cpc	r21, r22
    3e82:	10 f0       	brcs	.+4      	; 0x3e88 <__pack_f+0x110>
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	fc 01       	movw	r30, r24
    3e8a:	23 c0       	rjmp	.+70     	; 0x3ed2 <__pack_f+0x15a>
    3e8c:	80 38       	cpi	r24, 0x80	; 128
    3e8e:	91 05       	cpc	r25, r1
    3e90:	44 f5       	brge	.+80     	; 0x3ee2 <__pack_f+0x16a>
    3e92:	fc 01       	movw	r30, r24
    3e94:	e1 58       	subi	r30, 0x81	; 129
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	da 01       	movw	r26, r20
    3e9a:	c9 01       	movw	r24, r18
    3e9c:	8f 77       	andi	r24, 0x7F	; 127
    3e9e:	90 70       	andi	r25, 0x00	; 0
    3ea0:	a0 70       	andi	r26, 0x00	; 0
    3ea2:	b0 70       	andi	r27, 0x00	; 0
    3ea4:	80 34       	cpi	r24, 0x40	; 64
    3ea6:	91 05       	cpc	r25, r1
    3ea8:	a1 05       	cpc	r26, r1
    3eaa:	b1 05       	cpc	r27, r1
    3eac:	39 f4       	brne	.+14     	; 0x3ebc <__pack_f+0x144>
    3eae:	27 ff       	sbrs	r18, 7
    3eb0:	09 c0       	rjmp	.+18     	; 0x3ec4 <__pack_f+0x14c>
    3eb2:	20 5c       	subi	r18, 0xC0	; 192
    3eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    3eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eba:	04 c0       	rjmp	.+8      	; 0x3ec4 <__pack_f+0x14c>
    3ebc:	21 5c       	subi	r18, 0xC1	; 193
    3ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec0:	4f 4f       	sbci	r20, 0xFF	; 255
    3ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec4:	57 ff       	sbrs	r21, 7
    3ec6:	05 c0       	rjmp	.+10     	; 0x3ed2 <__pack_f+0x15a>
    3ec8:	56 95       	lsr	r21
    3eca:	47 95       	ror	r20
    3ecc:	37 95       	ror	r19
    3ece:	27 95       	ror	r18
    3ed0:	31 96       	adiw	r30, 0x01	; 1
    3ed2:	87 e0       	ldi	r24, 0x07	; 7
    3ed4:	56 95       	lsr	r21
    3ed6:	47 95       	ror	r20
    3ed8:	37 95       	ror	r19
    3eda:	27 95       	ror	r18
    3edc:	8a 95       	dec	r24
    3ede:	d1 f7       	brne	.-12     	; 0x3ed4 <__pack_f+0x15c>
    3ee0:	06 c0       	rjmp	.+12     	; 0x3eee <__pack_f+0x176>
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	50 e0       	ldi	r21, 0x00	; 0
    3eea:	ef ef       	ldi	r30, 0xFF	; 255
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	e2 2e       	mov	r14, r18
    3ef0:	f3 2e       	mov	r15, r19
    3ef2:	94 2f       	mov	r25, r20
    3ef4:	9f 77       	andi	r25, 0x7F	; 127
    3ef6:	80 2f       	mov	r24, r16
    3ef8:	80 78       	andi	r24, 0x80	; 128
    3efa:	89 2b       	or	r24, r25
    3efc:	9e 2f       	mov	r25, r30
    3efe:	97 95       	ror	r25
    3f00:	99 27       	eor	r25, r25
    3f02:	97 95       	ror	r25
    3f04:	8f 77       	andi	r24, 0x7F	; 127
    3f06:	08 2f       	mov	r16, r24
    3f08:	09 2b       	or	r16, r25
    3f0a:	9e 2f       	mov	r25, r30
    3f0c:	96 95       	lsr	r25
    3f0e:	81 2f       	mov	r24, r17
    3f10:	80 78       	andi	r24, 0x80	; 128
    3f12:	89 2b       	or	r24, r25
    3f14:	97 94       	ror	r9
    3f16:	99 24       	eor	r9, r9
    3f18:	97 94       	ror	r9
    3f1a:	8f 77       	andi	r24, 0x7F	; 127
    3f1c:	18 2f       	mov	r17, r24
    3f1e:	19 29       	or	r17, r9
    3f20:	c8 01       	movw	r24, r16
    3f22:	b7 01       	movw	r22, r14
    3f24:	1f 91       	pop	r17
    3f26:	0f 91       	pop	r16
    3f28:	ff 90       	pop	r15
    3f2a:	ef 90       	pop	r14
    3f2c:	df 90       	pop	r13
    3f2e:	cf 90       	pop	r12
    3f30:	bf 90       	pop	r11
    3f32:	af 90       	pop	r10
    3f34:	9f 90       	pop	r9
    3f36:	08 95       	ret

00003f38 <__unpack_f>:
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	db 01       	movw	r26, r22
    3f40:	20 81       	ld	r18, Z
    3f42:	31 81       	ldd	r19, Z+1	; 0x01
    3f44:	92 81       	ldd	r25, Z+2	; 0x02
    3f46:	49 2f       	mov	r20, r25
    3f48:	4f 77       	andi	r20, 0x7F	; 127
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	99 1f       	adc	r25, r25
    3f4e:	99 27       	eor	r25, r25
    3f50:	99 1f       	adc	r25, r25
    3f52:	83 81       	ldd	r24, Z+3	; 0x03
    3f54:	e8 2f       	mov	r30, r24
    3f56:	ee 0f       	add	r30, r30
    3f58:	e9 2b       	or	r30, r25
    3f5a:	6e 2f       	mov	r22, r30
    3f5c:	70 e0       	ldi	r23, 0x00	; 0
    3f5e:	88 1f       	adc	r24, r24
    3f60:	88 27       	eor	r24, r24
    3f62:	88 1f       	adc	r24, r24
    3f64:	ed 01       	movw	r28, r26
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	ee 23       	and	r30, r30
    3f6a:	71 f5       	brne	.+92     	; 0x3fc8 <__unpack_f+0x90>
    3f6c:	21 15       	cp	r18, r1
    3f6e:	31 05       	cpc	r19, r1
    3f70:	41 05       	cpc	r20, r1
    3f72:	51 05       	cpc	r21, r1
    3f74:	11 f4       	brne	.+4      	; 0x3f7a <__unpack_f+0x42>
    3f76:	82 e0       	ldi	r24, 0x02	; 2
    3f78:	2f c0       	rjmp	.+94     	; 0x3fd8 <__unpack_f+0xa0>
    3f7a:	6e 57       	subi	r22, 0x7E	; 126
    3f7c:	70 40       	sbci	r23, 0x00	; 0
    3f7e:	fd 01       	movw	r30, r26
    3f80:	73 83       	std	Z+3, r23	; 0x03
    3f82:	62 83       	std	Z+2, r22	; 0x02
    3f84:	67 e0       	ldi	r22, 0x07	; 7
    3f86:	22 0f       	add	r18, r18
    3f88:	33 1f       	adc	r19, r19
    3f8a:	44 1f       	adc	r20, r20
    3f8c:	55 1f       	adc	r21, r21
    3f8e:	6a 95       	dec	r22
    3f90:	d1 f7       	brne	.-12     	; 0x3f86 <__unpack_f+0x4e>
    3f92:	83 e0       	ldi	r24, 0x03	; 3
    3f94:	8c 93       	st	X, r24
    3f96:	0a c0       	rjmp	.+20     	; 0x3fac <__unpack_f+0x74>
    3f98:	22 0f       	add	r18, r18
    3f9a:	33 1f       	adc	r19, r19
    3f9c:	44 1f       	adc	r20, r20
    3f9e:	55 1f       	adc	r21, r21
    3fa0:	ed 01       	movw	r28, r26
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	9b 83       	std	Y+3, r25	; 0x03
    3faa:	8a 83       	std	Y+2, r24	; 0x02
    3fac:	20 30       	cpi	r18, 0x00	; 0
    3fae:	e0 e0       	ldi	r30, 0x00	; 0
    3fb0:	3e 07       	cpc	r19, r30
    3fb2:	e0 e0       	ldi	r30, 0x00	; 0
    3fb4:	4e 07       	cpc	r20, r30
    3fb6:	e0 e4       	ldi	r30, 0x40	; 64
    3fb8:	5e 07       	cpc	r21, r30
    3fba:	70 f3       	brcs	.-36     	; 0x3f98 <__unpack_f+0x60>
    3fbc:	ed 01       	movw	r28, r26
    3fbe:	2c 83       	std	Y+4, r18	; 0x04
    3fc0:	3d 83       	std	Y+5, r19	; 0x05
    3fc2:	4e 83       	std	Y+6, r20	; 0x06
    3fc4:	5f 83       	std	Y+7, r21	; 0x07
    3fc6:	25 c0       	rjmp	.+74     	; 0x4012 <__unpack_f+0xda>
    3fc8:	ef 3f       	cpi	r30, 0xFF	; 255
    3fca:	79 f4       	brne	.+30     	; 0x3fea <__unpack_f+0xb2>
    3fcc:	21 15       	cp	r18, r1
    3fce:	31 05       	cpc	r19, r1
    3fd0:	41 05       	cpc	r20, r1
    3fd2:	51 05       	cpc	r21, r1
    3fd4:	19 f4       	brne	.+6      	; 0x3fdc <__unpack_f+0xa4>
    3fd6:	84 e0       	ldi	r24, 0x04	; 4
    3fd8:	8c 93       	st	X, r24
    3fda:	1b c0       	rjmp	.+54     	; 0x4012 <__unpack_f+0xda>
    3fdc:	44 ff       	sbrs	r20, 4
    3fde:	03 c0       	rjmp	.+6      	; 0x3fe6 <__unpack_f+0xae>
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	8c 93       	st	X, r24
    3fe4:	11 c0       	rjmp	.+34     	; 0x4008 <__unpack_f+0xd0>
    3fe6:	1c 92       	st	X, r1
    3fe8:	0f c0       	rjmp	.+30     	; 0x4008 <__unpack_f+0xd0>
    3fea:	6f 57       	subi	r22, 0x7F	; 127
    3fec:	70 40       	sbci	r23, 0x00	; 0
    3fee:	ed 01       	movw	r28, r26
    3ff0:	7b 83       	std	Y+3, r23	; 0x03
    3ff2:	6a 83       	std	Y+2, r22	; 0x02
    3ff4:	83 e0       	ldi	r24, 0x03	; 3
    3ff6:	8c 93       	st	X, r24
    3ff8:	87 e0       	ldi	r24, 0x07	; 7
    3ffa:	22 0f       	add	r18, r18
    3ffc:	33 1f       	adc	r19, r19
    3ffe:	44 1f       	adc	r20, r20
    4000:	55 1f       	adc	r21, r21
    4002:	8a 95       	dec	r24
    4004:	d1 f7       	brne	.-12     	; 0x3ffa <__unpack_f+0xc2>
    4006:	50 64       	ori	r21, 0x40	; 64
    4008:	fd 01       	movw	r30, r26
    400a:	24 83       	std	Z+4, r18	; 0x04
    400c:	35 83       	std	Z+5, r19	; 0x05
    400e:	46 83       	std	Z+6, r20	; 0x06
    4010:	57 83       	std	Z+7, r21	; 0x07
    4012:	df 91       	pop	r29
    4014:	cf 91       	pop	r28
    4016:	08 95       	ret

00004018 <__mulsi3>:
    4018:	62 9f       	mul	r22, r18
    401a:	d0 01       	movw	r26, r0
    401c:	73 9f       	mul	r23, r19
    401e:	f0 01       	movw	r30, r0
    4020:	82 9f       	mul	r24, r18
    4022:	e0 0d       	add	r30, r0
    4024:	f1 1d       	adc	r31, r1
    4026:	64 9f       	mul	r22, r20
    4028:	e0 0d       	add	r30, r0
    402a:	f1 1d       	adc	r31, r1
    402c:	92 9f       	mul	r25, r18
    402e:	f0 0d       	add	r31, r0
    4030:	83 9f       	mul	r24, r19
    4032:	f0 0d       	add	r31, r0
    4034:	74 9f       	mul	r23, r20
    4036:	f0 0d       	add	r31, r0
    4038:	65 9f       	mul	r22, r21
    403a:	f0 0d       	add	r31, r0
    403c:	99 27       	eor	r25, r25
    403e:	72 9f       	mul	r23, r18
    4040:	b0 0d       	add	r27, r0
    4042:	e1 1d       	adc	r30, r1
    4044:	f9 1f       	adc	r31, r25
    4046:	63 9f       	mul	r22, r19
    4048:	b0 0d       	add	r27, r0
    404a:	e1 1d       	adc	r30, r1
    404c:	f9 1f       	adc	r31, r25
    404e:	bd 01       	movw	r22, r26
    4050:	cf 01       	movw	r24, r30
    4052:	11 24       	eor	r1, r1
    4054:	08 95       	ret

00004056 <__udivmodhi4>:
    4056:	aa 1b       	sub	r26, r26
    4058:	bb 1b       	sub	r27, r27
    405a:	51 e1       	ldi	r21, 0x11	; 17
    405c:	07 c0       	rjmp	.+14     	; 0x406c <__udivmodhi4_ep>

0000405e <__udivmodhi4_loop>:
    405e:	aa 1f       	adc	r26, r26
    4060:	bb 1f       	adc	r27, r27
    4062:	a6 17       	cp	r26, r22
    4064:	b7 07       	cpc	r27, r23
    4066:	10 f0       	brcs	.+4      	; 0x406c <__udivmodhi4_ep>
    4068:	a6 1b       	sub	r26, r22
    406a:	b7 0b       	sbc	r27, r23

0000406c <__udivmodhi4_ep>:
    406c:	88 1f       	adc	r24, r24
    406e:	99 1f       	adc	r25, r25
    4070:	5a 95       	dec	r21
    4072:	a9 f7       	brne	.-22     	; 0x405e <__udivmodhi4_loop>
    4074:	80 95       	com	r24
    4076:	90 95       	com	r25
    4078:	bc 01       	movw	r22, r24
    407a:	cd 01       	movw	r24, r26
    407c:	08 95       	ret

0000407e <__divmodhi4>:
    407e:	97 fb       	bst	r25, 7
    4080:	09 2e       	mov	r0, r25
    4082:	07 26       	eor	r0, r23
    4084:	0a d0       	rcall	.+20     	; 0x409a <__divmodhi4_neg1>
    4086:	77 fd       	sbrc	r23, 7
    4088:	04 d0       	rcall	.+8      	; 0x4092 <__divmodhi4_neg2>
    408a:	e5 df       	rcall	.-54     	; 0x4056 <__udivmodhi4>
    408c:	06 d0       	rcall	.+12     	; 0x409a <__divmodhi4_neg1>
    408e:	00 20       	and	r0, r0
    4090:	1a f4       	brpl	.+6      	; 0x4098 <__divmodhi4_exit>

00004092 <__divmodhi4_neg2>:
    4092:	70 95       	com	r23
    4094:	61 95       	neg	r22
    4096:	7f 4f       	sbci	r23, 0xFF	; 255

00004098 <__divmodhi4_exit>:
    4098:	08 95       	ret

0000409a <__divmodhi4_neg1>:
    409a:	f6 f7       	brtc	.-4      	; 0x4098 <__divmodhi4_exit>
    409c:	90 95       	com	r25
    409e:	81 95       	neg	r24
    40a0:	9f 4f       	sbci	r25, 0xFF	; 255
    40a2:	08 95       	ret

000040a4 <__divmodsi4>:
    40a4:	97 fb       	bst	r25, 7
    40a6:	09 2e       	mov	r0, r25
    40a8:	05 26       	eor	r0, r21
    40aa:	0e d0       	rcall	.+28     	; 0x40c8 <__divmodsi4_neg1>
    40ac:	57 fd       	sbrc	r21, 7
    40ae:	04 d0       	rcall	.+8      	; 0x40b8 <__divmodsi4_neg2>
    40b0:	14 d0       	rcall	.+40     	; 0x40da <__udivmodsi4>
    40b2:	0a d0       	rcall	.+20     	; 0x40c8 <__divmodsi4_neg1>
    40b4:	00 1c       	adc	r0, r0
    40b6:	38 f4       	brcc	.+14     	; 0x40c6 <__divmodsi4_exit>

000040b8 <__divmodsi4_neg2>:
    40b8:	50 95       	com	r21
    40ba:	40 95       	com	r20
    40bc:	30 95       	com	r19
    40be:	21 95       	neg	r18
    40c0:	3f 4f       	sbci	r19, 0xFF	; 255
    40c2:	4f 4f       	sbci	r20, 0xFF	; 255
    40c4:	5f 4f       	sbci	r21, 0xFF	; 255

000040c6 <__divmodsi4_exit>:
    40c6:	08 95       	ret

000040c8 <__divmodsi4_neg1>:
    40c8:	f6 f7       	brtc	.-4      	; 0x40c6 <__divmodsi4_exit>
    40ca:	90 95       	com	r25
    40cc:	80 95       	com	r24
    40ce:	70 95       	com	r23
    40d0:	61 95       	neg	r22
    40d2:	7f 4f       	sbci	r23, 0xFF	; 255
    40d4:	8f 4f       	sbci	r24, 0xFF	; 255
    40d6:	9f 4f       	sbci	r25, 0xFF	; 255
    40d8:	08 95       	ret

000040da <__udivmodsi4>:
    40da:	a1 e2       	ldi	r26, 0x21	; 33
    40dc:	1a 2e       	mov	r1, r26
    40de:	aa 1b       	sub	r26, r26
    40e0:	bb 1b       	sub	r27, r27
    40e2:	fd 01       	movw	r30, r26
    40e4:	0d c0       	rjmp	.+26     	; 0x4100 <__udivmodsi4_ep>

000040e6 <__udivmodsi4_loop>:
    40e6:	aa 1f       	adc	r26, r26
    40e8:	bb 1f       	adc	r27, r27
    40ea:	ee 1f       	adc	r30, r30
    40ec:	ff 1f       	adc	r31, r31
    40ee:	a2 17       	cp	r26, r18
    40f0:	b3 07       	cpc	r27, r19
    40f2:	e4 07       	cpc	r30, r20
    40f4:	f5 07       	cpc	r31, r21
    40f6:	20 f0       	brcs	.+8      	; 0x4100 <__udivmodsi4_ep>
    40f8:	a2 1b       	sub	r26, r18
    40fa:	b3 0b       	sbc	r27, r19
    40fc:	e4 0b       	sbc	r30, r20
    40fe:	f5 0b       	sbc	r31, r21

00004100 <__udivmodsi4_ep>:
    4100:	66 1f       	adc	r22, r22
    4102:	77 1f       	adc	r23, r23
    4104:	88 1f       	adc	r24, r24
    4106:	99 1f       	adc	r25, r25
    4108:	1a 94       	dec	r1
    410a:	69 f7       	brne	.-38     	; 0x40e6 <__udivmodsi4_loop>
    410c:	60 95       	com	r22
    410e:	70 95       	com	r23
    4110:	80 95       	com	r24
    4112:	90 95       	com	r25
    4114:	9b 01       	movw	r18, r22
    4116:	ac 01       	movw	r20, r24
    4118:	bd 01       	movw	r22, r26
    411a:	cf 01       	movw	r24, r30
    411c:	08 95       	ret

0000411e <__prologue_saves__>:
    411e:	2f 92       	push	r2
    4120:	3f 92       	push	r3
    4122:	4f 92       	push	r4
    4124:	5f 92       	push	r5
    4126:	6f 92       	push	r6
    4128:	7f 92       	push	r7
    412a:	8f 92       	push	r8
    412c:	9f 92       	push	r9
    412e:	af 92       	push	r10
    4130:	bf 92       	push	r11
    4132:	cf 92       	push	r12
    4134:	df 92       	push	r13
    4136:	ef 92       	push	r14
    4138:	ff 92       	push	r15
    413a:	0f 93       	push	r16
    413c:	1f 93       	push	r17
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	ca 1b       	sub	r28, r26
    4148:	db 0b       	sbc	r29, r27
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	19 94       	eijmp

00004156 <__epilogue_restores__>:
    4156:	2a 88       	ldd	r2, Y+18	; 0x12
    4158:	39 88       	ldd	r3, Y+17	; 0x11
    415a:	48 88       	ldd	r4, Y+16	; 0x10
    415c:	5f 84       	ldd	r5, Y+15	; 0x0f
    415e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4160:	7d 84       	ldd	r7, Y+13	; 0x0d
    4162:	8c 84       	ldd	r8, Y+12	; 0x0c
    4164:	9b 84       	ldd	r9, Y+11	; 0x0b
    4166:	aa 84       	ldd	r10, Y+10	; 0x0a
    4168:	b9 84       	ldd	r11, Y+9	; 0x09
    416a:	c8 84       	ldd	r12, Y+8	; 0x08
    416c:	df 80       	ldd	r13, Y+7	; 0x07
    416e:	ee 80       	ldd	r14, Y+6	; 0x06
    4170:	fd 80       	ldd	r15, Y+5	; 0x05
    4172:	0c 81       	ldd	r16, Y+4	; 0x04
    4174:	1b 81       	ldd	r17, Y+3	; 0x03
    4176:	aa 81       	ldd	r26, Y+2	; 0x02
    4178:	b9 81       	ldd	r27, Y+1	; 0x01
    417a:	ce 0f       	add	r28, r30
    417c:	d1 1d       	adc	r29, r1
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	ed 01       	movw	r28, r26
    418a:	08 95       	ret

0000418c <malloc>:
    418c:	cf 93       	push	r28
    418e:	df 93       	push	r29
    4190:	82 30       	cpi	r24, 0x02	; 2
    4192:	91 05       	cpc	r25, r1
    4194:	10 f4       	brcc	.+4      	; 0x419a <malloc+0xe>
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	e0 91 15 04 	lds	r30, 0x0415
    419e:	f0 91 16 04 	lds	r31, 0x0416
    41a2:	40 e0       	ldi	r20, 0x00	; 0
    41a4:	50 e0       	ldi	r21, 0x00	; 0
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	26 c0       	rjmp	.+76     	; 0x41f8 <malloc+0x6c>
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	68 17       	cp	r22, r24
    41b2:	79 07       	cpc	r23, r25
    41b4:	e0 f0       	brcs	.+56     	; 0x41ee <malloc+0x62>
    41b6:	68 17       	cp	r22, r24
    41b8:	79 07       	cpc	r23, r25
    41ba:	81 f4       	brne	.+32     	; 0x41dc <malloc+0x50>
    41bc:	82 81       	ldd	r24, Z+2	; 0x02
    41be:	93 81       	ldd	r25, Z+3	; 0x03
    41c0:	21 15       	cp	r18, r1
    41c2:	31 05       	cpc	r19, r1
    41c4:	31 f0       	breq	.+12     	; 0x41d2 <malloc+0x46>
    41c6:	d9 01       	movw	r26, r18
    41c8:	13 96       	adiw	r26, 0x03	; 3
    41ca:	9c 93       	st	X, r25
    41cc:	8e 93       	st	-X, r24
    41ce:	12 97       	sbiw	r26, 0x02	; 2
    41d0:	2b c0       	rjmp	.+86     	; 0x4228 <malloc+0x9c>
    41d2:	90 93 16 04 	sts	0x0416, r25
    41d6:	80 93 15 04 	sts	0x0415, r24
    41da:	26 c0       	rjmp	.+76     	; 0x4228 <malloc+0x9c>
    41dc:	41 15       	cp	r20, r1
    41de:	51 05       	cpc	r21, r1
    41e0:	19 f0       	breq	.+6      	; 0x41e8 <malloc+0x5c>
    41e2:	64 17       	cp	r22, r20
    41e4:	75 07       	cpc	r23, r21
    41e6:	18 f4       	brcc	.+6      	; 0x41ee <malloc+0x62>
    41e8:	ab 01       	movw	r20, r22
    41ea:	e9 01       	movw	r28, r18
    41ec:	df 01       	movw	r26, r30
    41ee:	9f 01       	movw	r18, r30
    41f0:	72 81       	ldd	r23, Z+2	; 0x02
    41f2:	63 81       	ldd	r22, Z+3	; 0x03
    41f4:	e7 2f       	mov	r30, r23
    41f6:	f6 2f       	mov	r31, r22
    41f8:	30 97       	sbiw	r30, 0x00	; 0
    41fa:	c1 f6       	brne	.-80     	; 0x41ac <malloc+0x20>
    41fc:	41 15       	cp	r20, r1
    41fe:	51 05       	cpc	r21, r1
    4200:	01 f1       	breq	.+64     	; 0x4242 <malloc+0xb6>
    4202:	48 1b       	sub	r20, r24
    4204:	59 0b       	sbc	r21, r25
    4206:	44 30       	cpi	r20, 0x04	; 4
    4208:	51 05       	cpc	r21, r1
    420a:	80 f4       	brcc	.+32     	; 0x422c <malloc+0xa0>
    420c:	12 96       	adiw	r26, 0x02	; 2
    420e:	8d 91       	ld	r24, X+
    4210:	9c 91       	ld	r25, X
    4212:	13 97       	sbiw	r26, 0x03	; 3
    4214:	20 97       	sbiw	r28, 0x00	; 0
    4216:	19 f0       	breq	.+6      	; 0x421e <malloc+0x92>
    4218:	9b 83       	std	Y+3, r25	; 0x03
    421a:	8a 83       	std	Y+2, r24	; 0x02
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <malloc+0x9a>
    421e:	90 93 16 04 	sts	0x0416, r25
    4222:	80 93 15 04 	sts	0x0415, r24
    4226:	fd 01       	movw	r30, r26
    4228:	32 96       	adiw	r30, 0x02	; 2
    422a:	46 c0       	rjmp	.+140    	; 0x42b8 <malloc+0x12c>
    422c:	fd 01       	movw	r30, r26
    422e:	e4 0f       	add	r30, r20
    4230:	f5 1f       	adc	r31, r21
    4232:	81 93       	st	Z+, r24
    4234:	91 93       	st	Z+, r25
    4236:	42 50       	subi	r20, 0x02	; 2
    4238:	50 40       	sbci	r21, 0x00	; 0
    423a:	11 96       	adiw	r26, 0x01	; 1
    423c:	5c 93       	st	X, r21
    423e:	4e 93       	st	-X, r20
    4240:	3b c0       	rjmp	.+118    	; 0x42b8 <malloc+0x12c>
    4242:	20 91 13 04 	lds	r18, 0x0413
    4246:	30 91 14 04 	lds	r19, 0x0414
    424a:	21 15       	cp	r18, r1
    424c:	31 05       	cpc	r19, r1
    424e:	41 f4       	brne	.+16     	; 0x4260 <malloc+0xd4>
    4250:	20 91 1f 03 	lds	r18, 0x031F
    4254:	30 91 20 03 	lds	r19, 0x0320
    4258:	30 93 14 04 	sts	0x0414, r19
    425c:	20 93 13 04 	sts	0x0413, r18
    4260:	20 91 21 03 	lds	r18, 0x0321
    4264:	30 91 22 03 	lds	r19, 0x0322
    4268:	21 15       	cp	r18, r1
    426a:	31 05       	cpc	r19, r1
    426c:	41 f4       	brne	.+16     	; 0x427e <malloc+0xf2>
    426e:	2d b7       	in	r18, 0x3d	; 61
    4270:	3e b7       	in	r19, 0x3e	; 62
    4272:	40 91 1d 03 	lds	r20, 0x031D
    4276:	50 91 1e 03 	lds	r21, 0x031E
    427a:	24 1b       	sub	r18, r20
    427c:	35 0b       	sbc	r19, r21
    427e:	e0 91 13 04 	lds	r30, 0x0413
    4282:	f0 91 14 04 	lds	r31, 0x0414
    4286:	e2 17       	cp	r30, r18
    4288:	f3 07       	cpc	r31, r19
    428a:	a0 f4       	brcc	.+40     	; 0x42b4 <malloc+0x128>
    428c:	2e 1b       	sub	r18, r30
    428e:	3f 0b       	sbc	r19, r31
    4290:	28 17       	cp	r18, r24
    4292:	39 07       	cpc	r19, r25
    4294:	78 f0       	brcs	.+30     	; 0x42b4 <malloc+0x128>
    4296:	ac 01       	movw	r20, r24
    4298:	4e 5f       	subi	r20, 0xFE	; 254
    429a:	5f 4f       	sbci	r21, 0xFF	; 255
    429c:	24 17       	cp	r18, r20
    429e:	35 07       	cpc	r19, r21
    42a0:	48 f0       	brcs	.+18     	; 0x42b4 <malloc+0x128>
    42a2:	4e 0f       	add	r20, r30
    42a4:	5f 1f       	adc	r21, r31
    42a6:	50 93 14 04 	sts	0x0414, r21
    42aa:	40 93 13 04 	sts	0x0413, r20
    42ae:	81 93       	st	Z+, r24
    42b0:	91 93       	st	Z+, r25
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <malloc+0x12c>
    42b4:	e0 e0       	ldi	r30, 0x00	; 0
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	cf 01       	movw	r24, r30
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	08 95       	ret

000042c0 <free>:
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	09 f4       	brne	.+2      	; 0x42ca <free+0xa>
    42c8:	91 c0       	rjmp	.+290    	; 0x43ec <free+0x12c>
    42ca:	fc 01       	movw	r30, r24
    42cc:	32 97       	sbiw	r30, 0x02	; 2
    42ce:	13 82       	std	Z+3, r1	; 0x03
    42d0:	12 82       	std	Z+2, r1	; 0x02
    42d2:	60 91 15 04 	lds	r22, 0x0415
    42d6:	70 91 16 04 	lds	r23, 0x0416
    42da:	61 15       	cp	r22, r1
    42dc:	71 05       	cpc	r23, r1
    42de:	81 f4       	brne	.+32     	; 0x4300 <free+0x40>
    42e0:	20 81       	ld	r18, Z
    42e2:	31 81       	ldd	r19, Z+1	; 0x01
    42e4:	28 0f       	add	r18, r24
    42e6:	39 1f       	adc	r19, r25
    42e8:	80 91 13 04 	lds	r24, 0x0413
    42ec:	90 91 14 04 	lds	r25, 0x0414
    42f0:	82 17       	cp	r24, r18
    42f2:	93 07       	cpc	r25, r19
    42f4:	99 f5       	brne	.+102    	; 0x435c <free+0x9c>
    42f6:	f0 93 14 04 	sts	0x0414, r31
    42fa:	e0 93 13 04 	sts	0x0413, r30
    42fe:	76 c0       	rjmp	.+236    	; 0x43ec <free+0x12c>
    4300:	db 01       	movw	r26, r22
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	02 c0       	rjmp	.+4      	; 0x430c <free+0x4c>
    4308:	cd 01       	movw	r24, r26
    430a:	d9 01       	movw	r26, r18
    430c:	ae 17       	cp	r26, r30
    430e:	bf 07       	cpc	r27, r31
    4310:	48 f4       	brcc	.+18     	; 0x4324 <free+0x64>
    4312:	12 96       	adiw	r26, 0x02	; 2
    4314:	2d 91       	ld	r18, X+
    4316:	3c 91       	ld	r19, X
    4318:	13 97       	sbiw	r26, 0x03	; 3
    431a:	21 15       	cp	r18, r1
    431c:	31 05       	cpc	r19, r1
    431e:	a1 f7       	brne	.-24     	; 0x4308 <free+0x48>
    4320:	cd 01       	movw	r24, r26
    4322:	21 c0       	rjmp	.+66     	; 0x4366 <free+0xa6>
    4324:	b3 83       	std	Z+3, r27	; 0x03
    4326:	a2 83       	std	Z+2, r26	; 0x02
    4328:	ef 01       	movw	r28, r30
    432a:	49 91       	ld	r20, Y+
    432c:	59 91       	ld	r21, Y+
    432e:	9e 01       	movw	r18, r28
    4330:	24 0f       	add	r18, r20
    4332:	35 1f       	adc	r19, r21
    4334:	a2 17       	cp	r26, r18
    4336:	b3 07       	cpc	r27, r19
    4338:	79 f4       	brne	.+30     	; 0x4358 <free+0x98>
    433a:	2d 91       	ld	r18, X+
    433c:	3c 91       	ld	r19, X
    433e:	11 97       	sbiw	r26, 0x01	; 1
    4340:	24 0f       	add	r18, r20
    4342:	35 1f       	adc	r19, r21
    4344:	2e 5f       	subi	r18, 0xFE	; 254
    4346:	3f 4f       	sbci	r19, 0xFF	; 255
    4348:	31 83       	std	Z+1, r19	; 0x01
    434a:	20 83       	st	Z, r18
    434c:	12 96       	adiw	r26, 0x02	; 2
    434e:	2d 91       	ld	r18, X+
    4350:	3c 91       	ld	r19, X
    4352:	13 97       	sbiw	r26, 0x03	; 3
    4354:	33 83       	std	Z+3, r19	; 0x03
    4356:	22 83       	std	Z+2, r18	; 0x02
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	29 f4       	brne	.+10     	; 0x4366 <free+0xa6>
    435c:	f0 93 16 04 	sts	0x0416, r31
    4360:	e0 93 15 04 	sts	0x0415, r30
    4364:	43 c0       	rjmp	.+134    	; 0x43ec <free+0x12c>
    4366:	dc 01       	movw	r26, r24
    4368:	13 96       	adiw	r26, 0x03	; 3
    436a:	fc 93       	st	X, r31
    436c:	ee 93       	st	-X, r30
    436e:	12 97       	sbiw	r26, 0x02	; 2
    4370:	4d 91       	ld	r20, X+
    4372:	5d 91       	ld	r21, X+
    4374:	a4 0f       	add	r26, r20
    4376:	b5 1f       	adc	r27, r21
    4378:	ea 17       	cp	r30, r26
    437a:	fb 07       	cpc	r31, r27
    437c:	69 f4       	brne	.+26     	; 0x4398 <free+0xd8>
    437e:	20 81       	ld	r18, Z
    4380:	31 81       	ldd	r19, Z+1	; 0x01
    4382:	24 0f       	add	r18, r20
    4384:	35 1f       	adc	r19, r21
    4386:	2e 5f       	subi	r18, 0xFE	; 254
    4388:	3f 4f       	sbci	r19, 0xFF	; 255
    438a:	ec 01       	movw	r28, r24
    438c:	39 83       	std	Y+1, r19	; 0x01
    438e:	28 83       	st	Y, r18
    4390:	22 81       	ldd	r18, Z+2	; 0x02
    4392:	33 81       	ldd	r19, Z+3	; 0x03
    4394:	3b 83       	std	Y+3, r19	; 0x03
    4396:	2a 83       	std	Y+2, r18	; 0x02
    4398:	e0 e0       	ldi	r30, 0x00	; 0
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <free+0xe2>
    439e:	fb 01       	movw	r30, r22
    43a0:	bc 01       	movw	r22, r24
    43a2:	db 01       	movw	r26, r22
    43a4:	12 96       	adiw	r26, 0x02	; 2
    43a6:	8d 91       	ld	r24, X+
    43a8:	9c 91       	ld	r25, X
    43aa:	13 97       	sbiw	r26, 0x03	; 3
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	b9 f7       	brne	.-18     	; 0x439e <free+0xde>
    43b0:	9b 01       	movw	r18, r22
    43b2:	2e 5f       	subi	r18, 0xFE	; 254
    43b4:	3f 4f       	sbci	r19, 0xFF	; 255
    43b6:	8d 91       	ld	r24, X+
    43b8:	9c 91       	ld	r25, X
    43ba:	11 97       	sbiw	r26, 0x01	; 1
    43bc:	82 0f       	add	r24, r18
    43be:	93 1f       	adc	r25, r19
    43c0:	40 91 13 04 	lds	r20, 0x0413
    43c4:	50 91 14 04 	lds	r21, 0x0414
    43c8:	48 17       	cp	r20, r24
    43ca:	59 07       	cpc	r21, r25
    43cc:	79 f4       	brne	.+30     	; 0x43ec <free+0x12c>
    43ce:	30 97       	sbiw	r30, 0x00	; 0
    43d0:	29 f4       	brne	.+10     	; 0x43dc <free+0x11c>
    43d2:	10 92 16 04 	sts	0x0416, r1
    43d6:	10 92 15 04 	sts	0x0415, r1
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <free+0x120>
    43dc:	13 82       	std	Z+3, r1	; 0x03
    43de:	12 82       	std	Z+2, r1	; 0x02
    43e0:	22 50       	subi	r18, 0x02	; 2
    43e2:	30 40       	sbci	r19, 0x00	; 0
    43e4:	30 93 14 04 	sts	0x0414, r19
    43e8:	20 93 13 04 	sts	0x0413, r18
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	08 95       	ret
    43f2:	f5 d0       	rcall	.+490    	; 0x45de <__fp_pscA>
    43f4:	58 f0       	brcs	.+22     	; 0x440c <free+0x14c>
    43f6:	80 e8       	ldi	r24, 0x80	; 128
    43f8:	91 e0       	ldi	r25, 0x01	; 1
    43fa:	09 f4       	brne	.+2      	; 0x43fe <free+0x13e>
    43fc:	9e ef       	ldi	r25, 0xFE	; 254
    43fe:	f6 d0       	rcall	.+492    	; 0x45ec <__fp_pscB>
    4400:	28 f0       	brcs	.+10     	; 0x440c <free+0x14c>
    4402:	40 e8       	ldi	r20, 0x80	; 128
    4404:	51 e0       	ldi	r21, 0x01	; 1
    4406:	59 f4       	brne	.+22     	; 0x441e <atan2+0xe>
    4408:	5e ef       	ldi	r21, 0xFE	; 254
    440a:	09 c0       	rjmp	.+18     	; 0x441e <atan2+0xe>
    440c:	c0 c0       	rjmp	.+384    	; 0x458e <__fp_nan>
    440e:	28 c1       	rjmp	.+592    	; 0x4660 <__fp_zero>

00004410 <atan2>:
    4410:	e9 2f       	mov	r30, r25
    4412:	e0 78       	andi	r30, 0x80	; 128
    4414:	03 d1       	rcall	.+518    	; 0x461c <__fp_split3>
    4416:	68 f3       	brcs	.-38     	; 0x43f2 <free+0x132>
    4418:	09 2e       	mov	r0, r25
    441a:	05 2a       	or	r0, r21
    441c:	c1 f3       	breq	.-16     	; 0x440e <free+0x14e>
    441e:	26 17       	cp	r18, r22
    4420:	37 07       	cpc	r19, r23
    4422:	48 07       	cpc	r20, r24
    4424:	59 07       	cpc	r21, r25
    4426:	38 f0       	brcs	.+14     	; 0x4436 <atan2+0x26>
    4428:	0e 2e       	mov	r0, r30
    442a:	07 f8       	bld	r0, 7
    442c:	e0 25       	eor	r30, r0
    442e:	69 f0       	breq	.+26     	; 0x444a <atan2+0x3a>
    4430:	e0 25       	eor	r30, r0
    4432:	e0 64       	ori	r30, 0x40	; 64
    4434:	0a c0       	rjmp	.+20     	; 0x444a <atan2+0x3a>
    4436:	ef 63       	ori	r30, 0x3F	; 63
    4438:	07 f8       	bld	r0, 7
    443a:	00 94       	com	r0
    443c:	07 fa       	bst	r0, 7
    443e:	db 01       	movw	r26, r22
    4440:	b9 01       	movw	r22, r18
    4442:	9d 01       	movw	r18, r26
    4444:	dc 01       	movw	r26, r24
    4446:	ca 01       	movw	r24, r20
    4448:	ad 01       	movw	r20, r26
    444a:	ef 93       	push	r30
    444c:	41 d0       	rcall	.+130    	; 0x44d0 <__divsf3_pse>
    444e:	d5 d0       	rcall	.+426    	; 0x45fa <__fp_round>
    4450:	0a d0       	rcall	.+20     	; 0x4466 <atan>
    4452:	5f 91       	pop	r21
    4454:	55 23       	and	r21, r21
    4456:	31 f0       	breq	.+12     	; 0x4464 <atan2+0x54>
    4458:	2b ed       	ldi	r18, 0xDB	; 219
    445a:	3f e0       	ldi	r19, 0x0F	; 15
    445c:	49 e4       	ldi	r20, 0x49	; 73
    445e:	50 fd       	sbrc	r21, 0
    4460:	49 ec       	ldi	r20, 0xC9	; 201
    4462:	60 ca       	rjmp	.-2880   	; 0x3924 <__addsf3>
    4464:	08 95       	ret

00004466 <atan>:
    4466:	df 93       	push	r29
    4468:	dd 27       	eor	r29, r29
    446a:	b9 2f       	mov	r27, r25
    446c:	bf 77       	andi	r27, 0x7F	; 127
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	16 16       	cp	r1, r22
    4474:	17 06       	cpc	r1, r23
    4476:	48 07       	cpc	r20, r24
    4478:	5b 07       	cpc	r21, r27
    447a:	10 f4       	brcc	.+4      	; 0x4480 <atan+0x1a>
    447c:	d9 2f       	mov	r29, r25
    447e:	f7 d0       	rcall	.+494    	; 0x466e <inverse>
    4480:	9f 93       	push	r25
    4482:	8f 93       	push	r24
    4484:	7f 93       	push	r23
    4486:	6f 93       	push	r22
    4488:	5a d1       	rcall	.+692    	; 0x473e <square>
    448a:	e4 ee       	ldi	r30, 0xE4	; 228
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	82 d0       	rcall	.+260    	; 0x4594 <__fp_powser>
    4490:	b4 d0       	rcall	.+360    	; 0x45fa <__fp_round>
    4492:	2f 91       	pop	r18
    4494:	3f 91       	pop	r19
    4496:	4f 91       	pop	r20
    4498:	5f 91       	pop	r21
    449a:	fa d0       	rcall	.+500    	; 0x4690 <__mulsf3x>
    449c:	dd 23       	and	r29, r29
    449e:	49 f0       	breq	.+18     	; 0x44b2 <atan+0x4c>
    44a0:	90 58       	subi	r25, 0x80	; 128
    44a2:	a2 ea       	ldi	r26, 0xA2	; 162
    44a4:	2a ed       	ldi	r18, 0xDA	; 218
    44a6:	3f e0       	ldi	r19, 0x0F	; 15
    44a8:	49 ec       	ldi	r20, 0xC9	; 201
    44aa:	5f e3       	ldi	r21, 0x3F	; 63
    44ac:	d0 78       	andi	r29, 0x80	; 128
    44ae:	5d 27       	eor	r21, r29
    44b0:	56 d1       	rcall	.+684    	; 0x475e <__addsf3x>
    44b2:	df 91       	pop	r29
    44b4:	a2 c0       	rjmp	.+324    	; 0x45fa <__fp_round>
    44b6:	9a d0       	rcall	.+308    	; 0x45ec <__fp_pscB>
    44b8:	40 f0       	brcs	.+16     	; 0x44ca <atan+0x64>
    44ba:	91 d0       	rcall	.+290    	; 0x45de <__fp_pscA>
    44bc:	30 f0       	brcs	.+12     	; 0x44ca <atan+0x64>
    44be:	21 f4       	brne	.+8      	; 0x44c8 <atan+0x62>
    44c0:	5f 3f       	cpi	r21, 0xFF	; 255
    44c2:	19 f0       	breq	.+6      	; 0x44ca <atan+0x64>
    44c4:	5e c0       	rjmp	.+188    	; 0x4582 <__fp_inf>
    44c6:	51 11       	cpse	r21, r1
    44c8:	cc c0       	rjmp	.+408    	; 0x4662 <__fp_szero>
    44ca:	61 c0       	rjmp	.+194    	; 0x458e <__fp_nan>

000044cc <__divsf3x>:
    44cc:	a7 d0       	rcall	.+334    	; 0x461c <__fp_split3>
    44ce:	98 f3       	brcs	.-26     	; 0x44b6 <atan+0x50>

000044d0 <__divsf3_pse>:
    44d0:	99 23       	and	r25, r25
    44d2:	c9 f3       	breq	.-14     	; 0x44c6 <atan+0x60>
    44d4:	55 23       	and	r21, r21
    44d6:	b1 f3       	breq	.-20     	; 0x44c4 <atan+0x5e>
    44d8:	95 1b       	sub	r25, r21
    44da:	55 0b       	sbc	r21, r21
    44dc:	bb 27       	eor	r27, r27
    44de:	aa 27       	eor	r26, r26
    44e0:	62 17       	cp	r22, r18
    44e2:	73 07       	cpc	r23, r19
    44e4:	84 07       	cpc	r24, r20
    44e6:	38 f0       	brcs	.+14     	; 0x44f6 <__divsf3_pse+0x26>
    44e8:	9f 5f       	subi	r25, 0xFF	; 255
    44ea:	5f 4f       	sbci	r21, 0xFF	; 255
    44ec:	22 0f       	add	r18, r18
    44ee:	33 1f       	adc	r19, r19
    44f0:	44 1f       	adc	r20, r20
    44f2:	aa 1f       	adc	r26, r26
    44f4:	a9 f3       	breq	.-22     	; 0x44e0 <__divsf3_pse+0x10>
    44f6:	33 d0       	rcall	.+102    	; 0x455e <__divsf3_pse+0x8e>
    44f8:	0e 2e       	mov	r0, r30
    44fa:	3a f0       	brmi	.+14     	; 0x450a <__divsf3_pse+0x3a>
    44fc:	e0 e8       	ldi	r30, 0x80	; 128
    44fe:	30 d0       	rcall	.+96     	; 0x4560 <__divsf3_pse+0x90>
    4500:	91 50       	subi	r25, 0x01	; 1
    4502:	50 40       	sbci	r21, 0x00	; 0
    4504:	e6 95       	lsr	r30
    4506:	00 1c       	adc	r0, r0
    4508:	ca f7       	brpl	.-14     	; 0x44fc <__divsf3_pse+0x2c>
    450a:	29 d0       	rcall	.+82     	; 0x455e <__divsf3_pse+0x8e>
    450c:	fe 2f       	mov	r31, r30
    450e:	27 d0       	rcall	.+78     	; 0x455e <__divsf3_pse+0x8e>
    4510:	66 0f       	add	r22, r22
    4512:	77 1f       	adc	r23, r23
    4514:	88 1f       	adc	r24, r24
    4516:	bb 1f       	adc	r27, r27
    4518:	26 17       	cp	r18, r22
    451a:	37 07       	cpc	r19, r23
    451c:	48 07       	cpc	r20, r24
    451e:	ab 07       	cpc	r26, r27
    4520:	b0 e8       	ldi	r27, 0x80	; 128
    4522:	09 f0       	breq	.+2      	; 0x4526 <__divsf3_pse+0x56>
    4524:	bb 0b       	sbc	r27, r27
    4526:	80 2d       	mov	r24, r0
    4528:	bf 01       	movw	r22, r30
    452a:	ff 27       	eor	r31, r31
    452c:	93 58       	subi	r25, 0x83	; 131
    452e:	5f 4f       	sbci	r21, 0xFF	; 255
    4530:	2a f0       	brmi	.+10     	; 0x453c <__divsf3_pse+0x6c>
    4532:	9e 3f       	cpi	r25, 0xFE	; 254
    4534:	51 05       	cpc	r21, r1
    4536:	68 f0       	brcs	.+26     	; 0x4552 <__divsf3_pse+0x82>
    4538:	24 c0       	rjmp	.+72     	; 0x4582 <__fp_inf>
    453a:	93 c0       	rjmp	.+294    	; 0x4662 <__fp_szero>
    453c:	5f 3f       	cpi	r21, 0xFF	; 255
    453e:	ec f3       	brlt	.-6      	; 0x453a <__divsf3_pse+0x6a>
    4540:	98 3e       	cpi	r25, 0xE8	; 232
    4542:	dc f3       	brlt	.-10     	; 0x453a <__divsf3_pse+0x6a>
    4544:	86 95       	lsr	r24
    4546:	77 95       	ror	r23
    4548:	67 95       	ror	r22
    454a:	b7 95       	ror	r27
    454c:	f7 95       	ror	r31
    454e:	9f 5f       	subi	r25, 0xFF	; 255
    4550:	c9 f7       	brne	.-14     	; 0x4544 <__divsf3_pse+0x74>
    4552:	88 0f       	add	r24, r24
    4554:	91 1d       	adc	r25, r1
    4556:	96 95       	lsr	r25
    4558:	87 95       	ror	r24
    455a:	97 f9       	bld	r25, 7
    455c:	08 95       	ret
    455e:	e1 e0       	ldi	r30, 0x01	; 1
    4560:	66 0f       	add	r22, r22
    4562:	77 1f       	adc	r23, r23
    4564:	88 1f       	adc	r24, r24
    4566:	bb 1f       	adc	r27, r27
    4568:	62 17       	cp	r22, r18
    456a:	73 07       	cpc	r23, r19
    456c:	84 07       	cpc	r24, r20
    456e:	ba 07       	cpc	r27, r26
    4570:	20 f0       	brcs	.+8      	; 0x457a <__divsf3_pse+0xaa>
    4572:	62 1b       	sub	r22, r18
    4574:	73 0b       	sbc	r23, r19
    4576:	84 0b       	sbc	r24, r20
    4578:	ba 0b       	sbc	r27, r26
    457a:	ee 1f       	adc	r30, r30
    457c:	88 f7       	brcc	.-30     	; 0x4560 <__divsf3_pse+0x90>
    457e:	e0 95       	com	r30
    4580:	08 95       	ret

00004582 <__fp_inf>:
    4582:	97 f9       	bld	r25, 7
    4584:	9f 67       	ori	r25, 0x7F	; 127
    4586:	80 e8       	ldi	r24, 0x80	; 128
    4588:	70 e0       	ldi	r23, 0x00	; 0
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	08 95       	ret

0000458e <__fp_nan>:
    458e:	9f ef       	ldi	r25, 0xFF	; 255
    4590:	80 ec       	ldi	r24, 0xC0	; 192
    4592:	08 95       	ret

00004594 <__fp_powser>:
    4594:	df 93       	push	r29
    4596:	cf 93       	push	r28
    4598:	1f 93       	push	r17
    459a:	0f 93       	push	r16
    459c:	ff 92       	push	r15
    459e:	ef 92       	push	r14
    45a0:	df 92       	push	r13
    45a2:	7b 01       	movw	r14, r22
    45a4:	8c 01       	movw	r16, r24
    45a6:	68 94       	set
    45a8:	05 c0       	rjmp	.+10     	; 0x45b4 <__fp_powser+0x20>
    45aa:	da 2e       	mov	r13, r26
    45ac:	ef 01       	movw	r28, r30
    45ae:	70 d0       	rcall	.+224    	; 0x4690 <__mulsf3x>
    45b0:	fe 01       	movw	r30, r28
    45b2:	e8 94       	clt
    45b4:	a5 91       	lpm	r26, Z+
    45b6:	25 91       	lpm	r18, Z+
    45b8:	35 91       	lpm	r19, Z+
    45ba:	45 91       	lpm	r20, Z+
    45bc:	55 91       	lpm	r21, Z+
    45be:	ae f3       	brts	.-22     	; 0x45aa <__fp_powser+0x16>
    45c0:	ef 01       	movw	r28, r30
    45c2:	cd d0       	rcall	.+410    	; 0x475e <__addsf3x>
    45c4:	fe 01       	movw	r30, r28
    45c6:	97 01       	movw	r18, r14
    45c8:	a8 01       	movw	r20, r16
    45ca:	da 94       	dec	r13
    45cc:	79 f7       	brne	.-34     	; 0x45ac <__fp_powser+0x18>
    45ce:	df 90       	pop	r13
    45d0:	ef 90       	pop	r14
    45d2:	ff 90       	pop	r15
    45d4:	0f 91       	pop	r16
    45d6:	1f 91       	pop	r17
    45d8:	cf 91       	pop	r28
    45da:	df 91       	pop	r29
    45dc:	08 95       	ret

000045de <__fp_pscA>:
    45de:	00 24       	eor	r0, r0
    45e0:	0a 94       	dec	r0
    45e2:	16 16       	cp	r1, r22
    45e4:	17 06       	cpc	r1, r23
    45e6:	18 06       	cpc	r1, r24
    45e8:	09 06       	cpc	r0, r25
    45ea:	08 95       	ret

000045ec <__fp_pscB>:
    45ec:	00 24       	eor	r0, r0
    45ee:	0a 94       	dec	r0
    45f0:	12 16       	cp	r1, r18
    45f2:	13 06       	cpc	r1, r19
    45f4:	14 06       	cpc	r1, r20
    45f6:	05 06       	cpc	r0, r21
    45f8:	08 95       	ret

000045fa <__fp_round>:
    45fa:	09 2e       	mov	r0, r25
    45fc:	03 94       	inc	r0
    45fe:	00 0c       	add	r0, r0
    4600:	11 f4       	brne	.+4      	; 0x4606 <__fp_round+0xc>
    4602:	88 23       	and	r24, r24
    4604:	52 f0       	brmi	.+20     	; 0x461a <__fp_round+0x20>
    4606:	bb 0f       	add	r27, r27
    4608:	40 f4       	brcc	.+16     	; 0x461a <__fp_round+0x20>
    460a:	bf 2b       	or	r27, r31
    460c:	11 f4       	brne	.+4      	; 0x4612 <__fp_round+0x18>
    460e:	60 ff       	sbrs	r22, 0
    4610:	04 c0       	rjmp	.+8      	; 0x461a <__fp_round+0x20>
    4612:	6f 5f       	subi	r22, 0xFF	; 255
    4614:	7f 4f       	sbci	r23, 0xFF	; 255
    4616:	8f 4f       	sbci	r24, 0xFF	; 255
    4618:	9f 4f       	sbci	r25, 0xFF	; 255
    461a:	08 95       	ret

0000461c <__fp_split3>:
    461c:	57 fd       	sbrc	r21, 7
    461e:	90 58       	subi	r25, 0x80	; 128
    4620:	44 0f       	add	r20, r20
    4622:	55 1f       	adc	r21, r21
    4624:	59 f0       	breq	.+22     	; 0x463c <__fp_splitA+0x10>
    4626:	5f 3f       	cpi	r21, 0xFF	; 255
    4628:	71 f0       	breq	.+28     	; 0x4646 <__fp_splitA+0x1a>
    462a:	47 95       	ror	r20

0000462c <__fp_splitA>:
    462c:	88 0f       	add	r24, r24
    462e:	97 fb       	bst	r25, 7
    4630:	99 1f       	adc	r25, r25
    4632:	61 f0       	breq	.+24     	; 0x464c <__fp_splitA+0x20>
    4634:	9f 3f       	cpi	r25, 0xFF	; 255
    4636:	79 f0       	breq	.+30     	; 0x4656 <__fp_splitA+0x2a>
    4638:	87 95       	ror	r24
    463a:	08 95       	ret
    463c:	12 16       	cp	r1, r18
    463e:	13 06       	cpc	r1, r19
    4640:	14 06       	cpc	r1, r20
    4642:	55 1f       	adc	r21, r21
    4644:	f2 cf       	rjmp	.-28     	; 0x462a <__fp_split3+0xe>
    4646:	46 95       	lsr	r20
    4648:	f1 df       	rcall	.-30     	; 0x462c <__fp_splitA>
    464a:	08 c0       	rjmp	.+16     	; 0x465c <__fp_splitA+0x30>
    464c:	16 16       	cp	r1, r22
    464e:	17 06       	cpc	r1, r23
    4650:	18 06       	cpc	r1, r24
    4652:	99 1f       	adc	r25, r25
    4654:	f1 cf       	rjmp	.-30     	; 0x4638 <__fp_splitA+0xc>
    4656:	86 95       	lsr	r24
    4658:	71 05       	cpc	r23, r1
    465a:	61 05       	cpc	r22, r1
    465c:	08 94       	sec
    465e:	08 95       	ret

00004660 <__fp_zero>:
    4660:	e8 94       	clt

00004662 <__fp_szero>:
    4662:	bb 27       	eor	r27, r27
    4664:	66 27       	eor	r22, r22
    4666:	77 27       	eor	r23, r23
    4668:	cb 01       	movw	r24, r22
    466a:	97 f9       	bld	r25, 7
    466c:	08 95       	ret

0000466e <inverse>:
    466e:	9b 01       	movw	r18, r22
    4670:	ac 01       	movw	r20, r24
    4672:	60 e0       	ldi	r22, 0x00	; 0
    4674:	70 e0       	ldi	r23, 0x00	; 0
    4676:	80 e8       	ldi	r24, 0x80	; 128
    4678:	9f e3       	ldi	r25, 0x3F	; 63
    467a:	c4 c0       	rjmp	.+392    	; 0x4804 <__divsf3>
    467c:	b0 df       	rcall	.-160    	; 0x45de <__fp_pscA>
    467e:	28 f0       	brcs	.+10     	; 0x468a <inverse+0x1c>
    4680:	b5 df       	rcall	.-150    	; 0x45ec <__fp_pscB>
    4682:	18 f0       	brcs	.+6      	; 0x468a <inverse+0x1c>
    4684:	95 23       	and	r25, r21
    4686:	09 f0       	breq	.+2      	; 0x468a <inverse+0x1c>
    4688:	7c cf       	rjmp	.-264    	; 0x4582 <__fp_inf>
    468a:	81 cf       	rjmp	.-254    	; 0x458e <__fp_nan>
    468c:	11 24       	eor	r1, r1
    468e:	e9 cf       	rjmp	.-46     	; 0x4662 <__fp_szero>

00004690 <__mulsf3x>:
    4690:	c5 df       	rcall	.-118    	; 0x461c <__fp_split3>
    4692:	a0 f3       	brcs	.-24     	; 0x467c <inverse+0xe>

00004694 <__mulsf3_pse>:
    4694:	95 9f       	mul	r25, r21
    4696:	d1 f3       	breq	.-12     	; 0x468c <inverse+0x1e>
    4698:	95 0f       	add	r25, r21
    469a:	50 e0       	ldi	r21, 0x00	; 0
    469c:	55 1f       	adc	r21, r21
    469e:	62 9f       	mul	r22, r18
    46a0:	f0 01       	movw	r30, r0
    46a2:	72 9f       	mul	r23, r18
    46a4:	bb 27       	eor	r27, r27
    46a6:	f0 0d       	add	r31, r0
    46a8:	b1 1d       	adc	r27, r1
    46aa:	63 9f       	mul	r22, r19
    46ac:	aa 27       	eor	r26, r26
    46ae:	f0 0d       	add	r31, r0
    46b0:	b1 1d       	adc	r27, r1
    46b2:	aa 1f       	adc	r26, r26
    46b4:	64 9f       	mul	r22, r20
    46b6:	66 27       	eor	r22, r22
    46b8:	b0 0d       	add	r27, r0
    46ba:	a1 1d       	adc	r26, r1
    46bc:	66 1f       	adc	r22, r22
    46be:	82 9f       	mul	r24, r18
    46c0:	22 27       	eor	r18, r18
    46c2:	b0 0d       	add	r27, r0
    46c4:	a1 1d       	adc	r26, r1
    46c6:	62 1f       	adc	r22, r18
    46c8:	73 9f       	mul	r23, r19
    46ca:	b0 0d       	add	r27, r0
    46cc:	a1 1d       	adc	r26, r1
    46ce:	62 1f       	adc	r22, r18
    46d0:	83 9f       	mul	r24, r19
    46d2:	a0 0d       	add	r26, r0
    46d4:	61 1d       	adc	r22, r1
    46d6:	22 1f       	adc	r18, r18
    46d8:	74 9f       	mul	r23, r20
    46da:	33 27       	eor	r19, r19
    46dc:	a0 0d       	add	r26, r0
    46de:	61 1d       	adc	r22, r1
    46e0:	23 1f       	adc	r18, r19
    46e2:	84 9f       	mul	r24, r20
    46e4:	60 0d       	add	r22, r0
    46e6:	21 1d       	adc	r18, r1
    46e8:	82 2f       	mov	r24, r18
    46ea:	76 2f       	mov	r23, r22
    46ec:	6a 2f       	mov	r22, r26
    46ee:	11 24       	eor	r1, r1
    46f0:	9f 57       	subi	r25, 0x7F	; 127
    46f2:	50 40       	sbci	r21, 0x00	; 0
    46f4:	8a f0       	brmi	.+34     	; 0x4718 <__mulsf3_pse+0x84>
    46f6:	e1 f0       	breq	.+56     	; 0x4730 <__mulsf3_pse+0x9c>
    46f8:	88 23       	and	r24, r24
    46fa:	4a f0       	brmi	.+18     	; 0x470e <__mulsf3_pse+0x7a>
    46fc:	ee 0f       	add	r30, r30
    46fe:	ff 1f       	adc	r31, r31
    4700:	bb 1f       	adc	r27, r27
    4702:	66 1f       	adc	r22, r22
    4704:	77 1f       	adc	r23, r23
    4706:	88 1f       	adc	r24, r24
    4708:	91 50       	subi	r25, 0x01	; 1
    470a:	50 40       	sbci	r21, 0x00	; 0
    470c:	a9 f7       	brne	.-22     	; 0x46f8 <__mulsf3_pse+0x64>
    470e:	9e 3f       	cpi	r25, 0xFE	; 254
    4710:	51 05       	cpc	r21, r1
    4712:	70 f0       	brcs	.+28     	; 0x4730 <__mulsf3_pse+0x9c>
    4714:	36 cf       	rjmp	.-404    	; 0x4582 <__fp_inf>
    4716:	a5 cf       	rjmp	.-182    	; 0x4662 <__fp_szero>
    4718:	5f 3f       	cpi	r21, 0xFF	; 255
    471a:	ec f3       	brlt	.-6      	; 0x4716 <__mulsf3_pse+0x82>
    471c:	98 3e       	cpi	r25, 0xE8	; 232
    471e:	dc f3       	brlt	.-10     	; 0x4716 <__mulsf3_pse+0x82>
    4720:	86 95       	lsr	r24
    4722:	77 95       	ror	r23
    4724:	67 95       	ror	r22
    4726:	b7 95       	ror	r27
    4728:	f7 95       	ror	r31
    472a:	e7 95       	ror	r30
    472c:	9f 5f       	subi	r25, 0xFF	; 255
    472e:	c1 f7       	brne	.-16     	; 0x4720 <__mulsf3_pse+0x8c>
    4730:	fe 2b       	or	r31, r30
    4732:	88 0f       	add	r24, r24
    4734:	91 1d       	adc	r25, r1
    4736:	96 95       	lsr	r25
    4738:	87 95       	ror	r24
    473a:	97 f9       	bld	r25, 7
    473c:	08 95       	ret

0000473e <square>:
    473e:	9b 01       	movw	r18, r22
    4740:	ac 01       	movw	r20, r24
    4742:	1d c9       	rjmp	.-3526   	; 0x397e <__mulsf3>
    4744:	4c df       	rcall	.-360    	; 0x45de <__fp_pscA>
    4746:	30 f0       	brcs	.+12     	; 0x4754 <square+0x16>
    4748:	51 df       	rcall	.-350    	; 0x45ec <__fp_pscB>
    474a:	20 f0       	brcs	.+8      	; 0x4754 <square+0x16>
    474c:	31 f4       	brne	.+12     	; 0x475a <square+0x1c>
    474e:	9f 3f       	cpi	r25, 0xFF	; 255
    4750:	11 f4       	brne	.+4      	; 0x4756 <square+0x18>
    4752:	1e f4       	brtc	.+6      	; 0x475a <square+0x1c>
    4754:	1c cf       	rjmp	.-456    	; 0x458e <__fp_nan>
    4756:	0e f4       	brtc	.+2      	; 0x475a <square+0x1c>
    4758:	e0 95       	com	r30
    475a:	e7 fb       	bst	r30, 7
    475c:	12 cf       	rjmp	.-476    	; 0x4582 <__fp_inf>

0000475e <__addsf3x>:
    475e:	e9 2f       	mov	r30, r25
    4760:	5d df       	rcall	.-326    	; 0x461c <__fp_split3>
    4762:	80 f3       	brcs	.-32     	; 0x4744 <square+0x6>
    4764:	ba 17       	cp	r27, r26
    4766:	62 07       	cpc	r22, r18
    4768:	73 07       	cpc	r23, r19
    476a:	84 07       	cpc	r24, r20
    476c:	95 07       	cpc	r25, r21
    476e:	18 f0       	brcs	.+6      	; 0x4776 <__addsf3x+0x18>
    4770:	71 f4       	brne	.+28     	; 0x478e <__addsf3x+0x30>
    4772:	9e f5       	brtc	.+102    	; 0x47da <__addsf3x+0x7c>
    4774:	75 cf       	rjmp	.-278    	; 0x4660 <__fp_zero>
    4776:	0e f4       	brtc	.+2      	; 0x477a <__addsf3x+0x1c>
    4778:	e0 95       	com	r30
    477a:	0b 2e       	mov	r0, r27
    477c:	ba 2f       	mov	r27, r26
    477e:	a0 2d       	mov	r26, r0
    4780:	0b 01       	movw	r0, r22
    4782:	b9 01       	movw	r22, r18
    4784:	90 01       	movw	r18, r0
    4786:	0c 01       	movw	r0, r24
    4788:	ca 01       	movw	r24, r20
    478a:	a0 01       	movw	r20, r0
    478c:	11 24       	eor	r1, r1
    478e:	ff 27       	eor	r31, r31
    4790:	59 1b       	sub	r21, r25
    4792:	99 f0       	breq	.+38     	; 0x47ba <__addsf3x+0x5c>
    4794:	59 3f       	cpi	r21, 0xF9	; 249
    4796:	50 f4       	brcc	.+20     	; 0x47ac <__addsf3x+0x4e>
    4798:	50 3e       	cpi	r21, 0xE0	; 224
    479a:	68 f1       	brcs	.+90     	; 0x47f6 <__addsf3x+0x98>
    479c:	1a 16       	cp	r1, r26
    479e:	f0 40       	sbci	r31, 0x00	; 0
    47a0:	a2 2f       	mov	r26, r18
    47a2:	23 2f       	mov	r18, r19
    47a4:	34 2f       	mov	r19, r20
    47a6:	44 27       	eor	r20, r20
    47a8:	58 5f       	subi	r21, 0xF8	; 248
    47aa:	f3 cf       	rjmp	.-26     	; 0x4792 <__addsf3x+0x34>
    47ac:	46 95       	lsr	r20
    47ae:	37 95       	ror	r19
    47b0:	27 95       	ror	r18
    47b2:	a7 95       	ror	r26
    47b4:	f0 40       	sbci	r31, 0x00	; 0
    47b6:	53 95       	inc	r21
    47b8:	c9 f7       	brne	.-14     	; 0x47ac <__addsf3x+0x4e>
    47ba:	7e f4       	brtc	.+30     	; 0x47da <__addsf3x+0x7c>
    47bc:	1f 16       	cp	r1, r31
    47be:	ba 0b       	sbc	r27, r26
    47c0:	62 0b       	sbc	r22, r18
    47c2:	73 0b       	sbc	r23, r19
    47c4:	84 0b       	sbc	r24, r20
    47c6:	ba f0       	brmi	.+46     	; 0x47f6 <__addsf3x+0x98>
    47c8:	91 50       	subi	r25, 0x01	; 1
    47ca:	a1 f0       	breq	.+40     	; 0x47f4 <__addsf3x+0x96>
    47cc:	ff 0f       	add	r31, r31
    47ce:	bb 1f       	adc	r27, r27
    47d0:	66 1f       	adc	r22, r22
    47d2:	77 1f       	adc	r23, r23
    47d4:	88 1f       	adc	r24, r24
    47d6:	c2 f7       	brpl	.-16     	; 0x47c8 <__addsf3x+0x6a>
    47d8:	0e c0       	rjmp	.+28     	; 0x47f6 <__addsf3x+0x98>
    47da:	ba 0f       	add	r27, r26
    47dc:	62 1f       	adc	r22, r18
    47de:	73 1f       	adc	r23, r19
    47e0:	84 1f       	adc	r24, r20
    47e2:	48 f4       	brcc	.+18     	; 0x47f6 <__addsf3x+0x98>
    47e4:	87 95       	ror	r24
    47e6:	77 95       	ror	r23
    47e8:	67 95       	ror	r22
    47ea:	b7 95       	ror	r27
    47ec:	f7 95       	ror	r31
    47ee:	9e 3f       	cpi	r25, 0xFE	; 254
    47f0:	08 f0       	brcs	.+2      	; 0x47f4 <__addsf3x+0x96>
    47f2:	b3 cf       	rjmp	.-154    	; 0x475a <square+0x1c>
    47f4:	93 95       	inc	r25
    47f6:	88 0f       	add	r24, r24
    47f8:	08 f0       	brcs	.+2      	; 0x47fc <__addsf3x+0x9e>
    47fa:	99 27       	eor	r25, r25
    47fc:	ee 0f       	add	r30, r30
    47fe:	97 95       	ror	r25
    4800:	87 95       	ror	r24
    4802:	08 95       	ret

00004804 <__divsf3>:
    4804:	63 de       	rcall	.-826    	; 0x44cc <__divsf3x>
    4806:	f9 ce       	rjmp	.-526    	; 0x45fa <__fp_round>

00004808 <_exit>:
    4808:	ff cf       	rjmp	.-2      	; 0x4808 <_exit>
