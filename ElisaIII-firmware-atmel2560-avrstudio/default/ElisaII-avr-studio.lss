
ElisaII-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  000041b8  0000424c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ea  00800320  00800320  0000436c  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  0000436c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a1  00000000  00000000  00006634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  00006cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d58  00000000  00000000  00006efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c50  00000000  00000000  00007c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163f  00000000  00000000  0000b8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003baf  00000000  00000000  0000cee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000620  00000000  00000000  00010a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d9b  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ae5  00000000  00000000  00011e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000177  00000000  00000000  00013934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001c0  00000000  00000000  00013aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__vector_10>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__vector_13>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__vector_25>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_29>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      80:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_32>
      84:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_33>
      88:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      8c:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_35>
      90:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      94:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      98:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      9c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      a8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_42>
      ac:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_43>
      b0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      b4:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_45>
      b8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      bc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      c8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      cc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      d8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      dc:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e8 eb       	ldi	r30, 0xB8	; 184
     12a:	f1 e4       	ldi	r31, 0x41	; 65
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a0 32       	cpi	r26, 0x20	; 32
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	14 e0       	ldi	r17, 0x04	; 4
     13a:	a0 e2       	ldi	r26, 0x20	; 32
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	aa 30       	cpi	r26, 0x0A	; 10
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 c1 06 	call	0xd82	; 0xd82 <main>
     14c:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <sendValues>:
	}

}

void sendValues() {
	myTimeout = 1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 d8 03 	sts	0x03D8, r24
}
     15a:	08 95       	ret

0000015c <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     15c:	ea e7       	ldi	r30, 0x7A	; 122
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	86 60       	ori	r24, 0x06	; 6
     164:	80 83       	st	Z, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     166:	ac e7       	ldi	r26, 0x7C	; 124
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	8c 91       	ld	r24, X
     16c:	80 64       	ori	r24, 0x40	; 64
     16e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     170:	80 81       	ld	r24, Z
     172:	80 62       	ori	r24, 0x20	; 32
     174:	80 83       	st	Z, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     176:	ab e7       	ldi	r26, 0x7B	; 123
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	8c 91       	ld	r24, X
     17c:	88 7f       	andi	r24, 0xF8	; 248
     17e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     180:	80 81       	ld	r24, Z
     182:	88 60       	ori	r24, 0x08	; 8
     184:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     186:	80 81       	ld	r24, Z
     188:	80 68       	ori	r24, 0x80	; 128
     18a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     18c:	80 81       	ld	r24, Z
     18e:	80 64       	ori	r24, 0x40	; 64
     190:	80 83       	st	Z, r24

}
     192:	08 95       	ret

00000194 <__vector_29>:

// ISR_NOBLOCK enable the global interrupt flag when entering the interrupt service routine;
// this let us have nested interrupt, otherwise the interrupt generated during executing this ISR
// will not fire their corresponding ISR
//ISR(ADC_vect, ISR_NOBLOCK) {
ISR(ADC_vect) {	
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	0b b6       	in	r0, 0x3b	; 59
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	2f 93       	push	r18
     1a4:	3f 93       	push	r19
     1a6:	4f 93       	push	r20
     1a8:	8f 93       	push	r24
     1aa:	9f 93       	push	r25
     1ac:	ef 93       	push	r30
     1ae:	ff 93       	push	r31
//	PORTB &= ~(1 << 7);

//	PORTA = 0x00;	// always turn off the pulses
//	PORTJ &= 0xF0;

	int value = ADCL;			// must be read first!!
     1b0:	20 91 78 00 	lds	r18, 0x0078
     1b4:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
     1b6:	40 91 79 00 	lds	r20, 0x0079
     1ba:	94 2f       	mov	r25, r20
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	28 2b       	or	r18, r24
     1c0:	39 2b       	or	r19, r25

	// save the last data

	switch(adcSaveDataTo) {
     1c2:	80 91 5f 03 	lds	r24, 0x035F
     1c6:	82 30       	cpi	r24, 0x02	; 2
     1c8:	09 f4       	brne	.+2      	; 0x1cc <__vector_29+0x38>
     1ca:	02 c1       	rjmp	.+516    	; 0x3d0 <__vector_29+0x23c>
     1cc:	83 30       	cpi	r24, 0x03	; 3
     1ce:	f0 f1       	brcs	.+124    	; 0x24c <__vector_29+0xb8>
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <__vector_29+0x42>
     1d4:	f0 c0       	rjmp	.+480    	; 0x3b6 <__vector_29+0x222>
     1d6:	84 30       	cpi	r24, 0x04	; 4
     1d8:	09 f4       	brne	.+2      	; 0x1dc <__vector_29+0x48>
     1da:	c6 c0       	rjmp	.+396    	; 0x368 <__vector_29+0x1d4>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     1dc:	80 91 60 03 	lds	r24, 0x0360
     1e0:	82 30       	cpi	r24, 0x02	; 2
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <__vector_29+0x52>
     1e4:	52 c0       	rjmp	.+164    	; 0x28a <__vector_29+0xf6>
     1e6:	83 30       	cpi	r24, 0x03	; 3
     1e8:	08 f0       	brcs	.+2      	; 0x1ec <__vector_29+0x58>
     1ea:	72 c0       	rjmp	.+228    	; 0x2d0 <__vector_29+0x13c>
     1ec:	88 23       	and	r24, r24
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <__vector_29+0x5e>
     1f0:	9a c0       	rjmp	.+308    	; 0x326 <__vector_29+0x192>

		case 0:
			currentAdChannel = currentProx>>1;
     1f2:	80 91 2a 03 	lds	r24, 0x032A
     1f6:	86 95       	lsr	r24
     1f8:	80 93 29 03 	sts	0x0329, r24
				} else {
					PORTJ = (1 << ((currentProx-16)>>1));
				}
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
     1fc:	80 91 61 03 	lds	r24, 0x0361
     200:	88 23       	and	r24, r24
     202:	09 f0       	breq	.+2      	; 0x206 <__vector_29+0x72>
     204:	f9 c0       	rjmp	.+498    	; 0x3f8 <__vector_29+0x264>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 5f 03 	sts	0x035F, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 93 60 03 	sts	0x0360, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     212:	80 91 29 03 	lds	r24, 0x0329
     216:	88 30       	cpi	r24, 0x08	; 8
     218:	08 f4       	brcc	.+2      	; 0x21c <__vector_29+0x88>
     21a:	4f c0       	rjmp	.+158    	; 0x2ba <__vector_29+0x126>
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {
		ADCSRB |= (1 << MUX5);
     21c:	80 91 7b 00 	lds	r24, 0x007B
     220:	88 60       	ori	r24, 0x08	; 8
     222:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
     226:	80 91 29 03 	lds	r24, 0x0329
     22a:	88 5c       	subi	r24, 0xC8	; 200
     22c:	80 93 7c 00 	sts	0x007C, r24
	}


//	PORTB |= (1 << 7);

}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	4f 91       	pop	r20
     23a:	3f 91       	pop	r19
     23c:	2f 91       	pop	r18
     23e:	0f 90       	pop	r0
     240:	0b be       	out	0x3b, r0	; 59
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     24c:	88 23       	and	r24, r24
     24e:	09 f0       	breq	.+2      	; 0x252 <__vector_29+0xbe>
     250:	7b c0       	rjmp	.+246    	; 0x348 <__vector_29+0x1b4>

		case SAVE_TO_PROX:
			proximityValue[currentProx] = value;
     252:	80 91 2a 03 	lds	r24, 0x032A
     256:	e8 2f       	mov	r30, r24
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	e1 5d       	subi	r30, 0xD1	; 209
     260:	fc 4f       	sbci	r31, 0xFC	; 252
     262:	31 83       	std	Z+1, r19	; 0x01
     264:	20 83       	st	Z, r18
			//currentProx = (currentProx+1)%24;
			currentProx++;
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 2a 03 	sts	0x032A, r24
			if(currentProx > 23) {
     26c:	88 31       	cpi	r24, 0x18	; 24
     26e:	10 f0       	brcs	.+4      	; 0x274 <__vector_29+0xe0>
				currentProx = 0;
     270:	10 92 2a 03 	sts	0x032A, r1
			}
			PORTA = 0x00;	// always turn off the pulses
     274:	12 b8       	out	0x02, r1	; 2
			PORTJ &= 0xF0;
     276:	80 91 05 01 	lds	r24, 0x0105
     27a:	80 7f       	andi	r24, 0xF0	; 240
     27c:	80 93 05 01 	sts	0x0105, r24
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     280:	80 91 60 03 	lds	r24, 0x0360
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	09 f0       	breq	.+2      	; 0x28a <__vector_29+0xf6>
     288:	ae cf       	rjmp	.-164    	; 0x1e6 <__vector_29+0x52>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:
			currentAdChannel = currentMotRightChannel;
     28a:	80 91 2c 03 	lds	r24, 0x032C
     28e:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
     292:	80 91 2d 03 	lds	r24, 0x032D
     296:	80 93 61 03 	sts	0x0361, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
     29a:	80 91 62 03 	lds	r24, 0x0362
     29e:	88 23       	and	r24, r24
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <__vector_29+0x110>
     2a2:	b5 c0       	rjmp	.+362    	; 0x40e <__vector_29+0x27a>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	80 93 5f 03 	sts	0x035F, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 3;
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	80 93 60 03 	sts	0x0360, r24
			break;

	}

	// channel selection: continuously change the channel sampled in sequence
	if(currentAdChannel < 8) {
     2b0:	80 91 29 03 	lds	r24, 0x0329
     2b4:	88 30       	cpi	r24, 0x08	; 8
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__vector_29+0x126>
     2b8:	b1 cf       	rjmp	.-158    	; 0x21c <__vector_29+0x88>
		ADCSRB &= ~(1 << MUX5);
     2ba:	80 91 7b 00 	lds	r24, 0x007B
     2be:	87 7f       	andi	r24, 0xF7	; 247
     2c0:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
     2c4:	80 91 29 03 	lds	r24, 0x0329
     2c8:	80 5c       	subi	r24, 0xC0	; 192
     2ca:	80 93 7c 00 	sts	0x007C, r24
     2ce:	b0 cf       	rjmp	.-160    	; 0x230 <__vector_29+0x9c>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <__vector_29+0x142>
     2d4:	5d c0       	rjmp	.+186    	; 0x390 <__vector_29+0x1fc>
     2d6:	84 30       	cpi	r24, 0x04	; 4
     2d8:	09 f0       	breq	.+2      	; 0x2dc <__vector_29+0x148>
     2da:	9b cf       	rjmp	.-202    	; 0x212 <__vector_29+0x7e>
			}
			adcSamplingState = 4;
			break;

		case 4:
			currentAdChannel = currentMotRightChannel;	
     2dc:	90 91 2c 03 	lds	r25, 0x032C
     2e0:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;	
     2e4:	90 91 2d 03 	lds	r25, 0x032D
     2e8:	90 93 61 03 	sts	0x0361, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
     2ec:	90 91 62 03 	lds	r25, 0x0362
     2f0:	99 23       	and	r25, r25
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <__vector_29+0x162>
     2f4:	89 c0       	rjmp	.+274    	; 0x408 <__vector_29+0x274>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	80 93 5f 03 	sts	0x035F, r24
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			}
			adcSamplingState = 0;
     2fc:	10 92 60 03 	sts	0x0360, r1
			
			if(currentProx & 0x01) {
     300:	20 91 2a 03 	lds	r18, 0x032A
     304:	82 2f       	mov	r24, r18
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	20 ff       	sbrs	r18, 0
     30a:	83 cf       	rjmp	.-250    	; 0x212 <__vector_29+0x7e>
				if(currentProx < 16) {
     30c:	20 31       	cpi	r18, 0x10	; 16
     30e:	08 f0       	brcs	.+2      	; 0x312 <__vector_29+0x17e>
     310:	82 c0       	rjmp	.+260    	; 0x416 <__vector_29+0x282>
					//PORTA = 0x00;	// already done at the ISR beginning...
					PORTA = (1 << (currentProx>>1));
     312:	26 95       	lsr	r18
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 c0       	rjmp	.+4      	; 0x31e <__vector_29+0x18a>
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	2a 95       	dec	r18
     320:	e2 f7       	brpl	.-8      	; 0x31a <__vector_29+0x186>
     322:	82 b9       	out	0x02, r24	; 2
     324:	76 cf       	rjmp	.-276    	; 0x212 <__vector_29+0x7e>
	//PORTJ &= 0xF0;

	// complete sequence
	// select next channel
	// ...the sequence has to be changed in order to satisfy motors sampling requirements!
	switch(adcSamplingState) {
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	09 f0       	breq	.+2      	; 0x32c <__vector_29+0x198>
     32a:	73 cf       	rjmp	.-282    	; 0x212 <__vector_29+0x7e>
			}
			adcSamplingState = 1;
			break;

		case 1:
			currentAdChannel = currentMotLeftChannel;
     32c:	80 91 2b 03 	lds	r24, 0x032B
     330:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
     334:	80 91 2e 03 	lds	r24, 0x032E
     338:	80 93 62 03 	sts	0x0362, r24
			adcSaveDataTo = SAVE_TO_PROX;
     33c:	10 92 5f 03 	sts	0x035F, r1
			adcSamplingState = 2;
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	80 93 60 03 	sts	0x0360, r24
			break;
     346:	65 cf       	rjmp	.-310    	; 0x212 <__vector_29+0x7e>
	int value = ADCL;			// must be read first!!
	value = (ADCH<<8) | value;

	// save the last data

	switch(adcSaveDataTo) {
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	09 f0       	breq	.+2      	; 0x34e <__vector_29+0x1ba>
     34c:	47 cf       	rjmp	.-370    	; 0x1dc <__vector_29+0x48>
			PORTA = 0x00;	// always turn off the pulses
			PORTJ &= 0xF0;
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
     34e:	80 91 65 03 	lds	r24, 0x0365
     352:	90 91 66 03 	lds	r25, 0x0366
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;
     35a:	96 95       	lsr	r25
     35c:	87 95       	ror	r24
     35e:	90 93 66 03 	sts	0x0366, r25
     362:	80 93 65 03 	sts	0x0365, r24
			break;
     366:	3a cf       	rjmp	.-396    	; 0x1dc <__vector_29+0x48>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			left_vel_sum += value;
     368:	80 91 73 03 	lds	r24, 0x0373
     36c:	90 91 74 03 	lds	r25, 0x0374
     370:	82 0f       	add	r24, r18
     372:	93 1f       	adc	r25, r19
     374:	90 93 74 03 	sts	0x0374, r25
     378:	80 93 73 03 	sts	0x0373, r24
			num_lvel_samples_avg++;
     37c:	80 91 6b 03 	lds	r24, 0x036B
     380:	90 91 6c 03 	lds	r25, 0x036C
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	90 93 6c 03 	sts	0x036C, r25
     38a:	80 93 6b 03 	sts	0x036B, r24
			break;
     38e:	26 cf       	rjmp	.-436    	; 0x1dc <__vector_29+0x48>
			}
			adcSamplingState = 3;
			break;

		case 3:
			currentAdChannel = currentMotLeftChannel;
     390:	80 91 2b 03 	lds	r24, 0x032B
     394:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
     398:	80 91 2e 03 	lds	r24, 0x032E
     39c:	80 93 62 03 	sts	0x0362, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
     3a0:	80 91 61 03 	lds	r24, 0x0361
     3a4:	88 23       	and	r24, r24
     3a6:	61 f5       	brne	.+88     	; 0x400 <__vector_29+0x26c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	80 93 5f 03 	sts	0x035F, r24
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			}
			adcSamplingState = 4;
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	80 93 60 03 	sts	0x0360, r24
			break;
     3b4:	2e cf       	rjmp	.-420    	; 0x212 <__vector_29+0x7e>
			right_vel_sum += value;
			num_rvel_samples_avg++;
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
     3b6:	80 91 63 03 	lds	r24, 0x0363
     3ba:	90 91 64 03 	lds	r25, 0x0364
     3be:	82 0f       	add	r24, r18
     3c0:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
     3c2:	96 95       	lsr	r25
     3c4:	87 95       	ror	r24
     3c6:	90 93 64 03 	sts	0x0364, r25
     3ca:	80 93 63 03 	sts	0x0363, r24
			break;
     3ce:	06 cf       	rjmp	.-500    	; 0x1dc <__vector_29+0x48>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			right_vel_sum += value;
     3d0:	80 91 77 03 	lds	r24, 0x0377
     3d4:	90 91 78 03 	lds	r25, 0x0378
     3d8:	82 0f       	add	r24, r18
     3da:	93 1f       	adc	r25, r19
     3dc:	90 93 78 03 	sts	0x0378, r25
     3e0:	80 93 77 03 	sts	0x0377, r24
			num_rvel_samples_avg++;
     3e4:	80 91 6f 03 	lds	r24, 0x036F
     3e8:	90 91 70 03 	lds	r25, 0x0370
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	90 93 70 03 	sts	0x0370, r25
     3f2:	80 93 6f 03 	sts	0x036F, r24
			break;
     3f6:	f2 ce       	rjmp	.-540    	; 0x1dc <__vector_29+0x48>
			}
*/
			if(rightChannelPhase == ACTIVE_PHASE) {			// the first this isn't really correct
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	80 93 5f 03 	sts	0x035F, r24
     3fe:	06 cf       	rjmp	.-500    	; 0x20c <__vector_29+0x78>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	80 93 5f 03 	sts	0x035F, r24
     406:	d3 cf       	rjmp	.-90     	; 0x3ae <__vector_29+0x21a>
			currentAdChannel = currentMotRightChannel;	
			rightChannelPhase = rightMotorPhase;	
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     408:	80 93 5f 03 	sts	0x035F, r24
     40c:	77 cf       	rjmp	.-274    	; 0x2fc <__vector_29+0x168>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
     40e:	84 e0       	ldi	r24, 0x04	; 4
     410:	80 93 5f 03 	sts	0x035F, r24
     414:	4a cf       	rjmp	.-364    	; 0x2aa <__vector_29+0x116>
				if(currentProx < 16) {
					//PORTA = 0x00;	// already done at the ISR beginning...
					PORTA = (1 << (currentProx>>1));
					//PORTA = (1 << currentAdChannel);
				} else {
					PORTJ = (1 << ((currentProx-16)>>1));
     416:	40 97       	sbiw	r24, 0x10	; 16
     418:	95 95       	asr	r25
     41a:	87 95       	ror	r24
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__vector_29+0x292>
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	8a 95       	dec	r24
     428:	e2 f7       	brpl	.-8      	; 0x422 <__vector_29+0x28e>
     42a:	20 93 05 01 	sts	0x0105, r18
     42e:	f1 ce       	rjmp	.-542    	; 0x212 <__vector_29+0x7e>

00000430 <initPwm>:
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     430:	e0 e9       	ldi	r30, 0x90	; 144
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	83 68       	ori	r24, 0x83	; 131
     438:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     43a:	80 81       	ld	r24, Z
     43c:	83 60       	ori	r24, 0x03	; 3
     43e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     440:	a1 e9       	ldi	r26, 0x91	; 145
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	8c 91       	ld	r24, X
     446:	8b 60       	ori	r24, 0x0B	; 11
     448:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     44a:	80 91 7f 03 	lds	r24, 0x037F
     44e:	90 91 80 03 	lds	r25, 0x0380
     452:	90 93 99 00 	sts	0x0099, r25
     456:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     45a:	10 92 9b 00 	sts	0x009B, r1
     45e:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     462:	a1 e7       	ldi	r26, 0x71	; 113
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	8c 91       	ld	r24, X
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     46c:	80 81       	ld	r24, Z
     46e:	8f 75       	andi	r24, 0x5F	; 95
     470:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     472:	8e b1       	in	r24, 0x0e	; 14
     474:	87 7e       	andi	r24, 0xE7	; 231
     476:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     478:	e0 ea       	ldi	r30, 0xA0	; 160
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	83 68       	ori	r24, 0x83	; 131
     480:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     482:	a1 ea       	ldi	r26, 0xA1	; 161
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	8c 91       	ld	r24, X
     488:	8b 60       	ori	r24, 0x0B	; 11
     48a:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     48c:	80 91 83 03 	lds	r24, 0x0383
     490:	90 91 84 03 	lds	r25, 0x0384
     494:	90 93 a9 00 	sts	0x00A9, r25
     498:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     49c:	10 92 ab 00 	sts	0x00AB, r1
     4a0:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     4a4:	a2 e7       	ldi	r26, 0x72	; 114
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	8c 91       	ld	r24, X
     4aa:	81 60       	ori	r24, 0x01	; 1
     4ac:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     4ae:	80 81       	ld	r24, Z
     4b0:	8f 75       	andi	r24, 0x5F	; 95
     4b2:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     4b4:	e2 e0       	ldi	r30, 0x02	; 2
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	80 81       	ld	r24, Z
     4ba:	87 7e       	andi	r24, 0xE7	; 231
     4bc:	80 83       	st	Z, r24


}
     4be:	08 95       	ret

000004c0 <__vector_45>:

// Motor left
ISR(TIMER4_OVF_vect) {
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27

	leftMotorPhase = ACTIVE_PHASE;
     4d2:	10 92 2e 03 	sts	0x032E, r1

	// copy sampling variables
	last_left_current = left_current_avg;
     4d6:	80 91 63 03 	lds	r24, 0x0363
     4da:	90 91 64 03 	lds	r25, 0x0364
     4de:	90 93 68 03 	sts	0x0368, r25
     4e2:	80 93 67 03 	sts	0x0367, r24
	last_num_lvel_samples_avg = num_lvel_samples_avg;
     4e6:	80 91 6b 03 	lds	r24, 0x036B
     4ea:	90 91 6c 03 	lds	r25, 0x036C
     4ee:	90 93 6e 03 	sts	0x036E, r25
     4f2:	80 93 6d 03 	sts	0x036D, r24
	last_left_vel_sum = left_vel_sum;
     4f6:	80 91 73 03 	lds	r24, 0x0373
     4fa:	90 91 74 03 	lds	r25, 0x0374
     4fe:	90 93 76 03 	sts	0x0376, r25
     502:	80 93 75 03 	sts	0x0375, r24

	// reset sampling variables
	left_current_avg = 0;
     506:	10 92 64 03 	sts	0x0364, r1
     50a:	10 92 63 03 	sts	0x0363, r1
	num_lvel_samples_avg = 0;
     50e:	10 92 6c 03 	sts	0x036C, r1
     512:	10 92 6b 03 	sts	0x036B, r1
	left_vel_sum = 0;
     516:	10 92 74 03 	sts	0x0374, r1
     51a:	10 92 73 03 	sts	0x0373, r1

	// start control
	compute_left_vel = 1;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 af 03 	sts	0x03AF, r24
	start_control = 1;
     524:	80 93 b1 03 	sts	0x03B1, r24

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
     528:	80 91 83 03 	lds	r24, 0x0383
     52c:	90 91 84 03 	lds	r25, 0x0384
     530:	a0 91 85 03 	lds	r26, 0x0385
     534:	b0 91 86 03 	lds	r27, 0x0386
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	a1 05       	cpc	r26, r1
     53c:	b1 05       	cpc	r27, r1
     53e:	51 f1       	breq	.+84     	; 0x594 <__vector_45+0xd4>
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	} else if(pwm_left > 0) {   		// move forward
     540:	18 16       	cp	r1, r24
     542:	19 06       	cpc	r1, r25
     544:	1a 06       	cpc	r1, r26
     546:	1b 06       	cpc	r1, r27
     548:	ec f5       	brge	.+122    	; 0x5c4 <__vector_45+0x104>
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     54a:	8f e0       	ldi	r24, 0x0F	; 15
     54c:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
     550:	80 91 a0 00 	lds	r24, 0x00A0
     554:	8f 7d       	andi	r24, 0xDF	; 223
     556:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
     55a:	80 91 72 00 	lds	r24, 0x0072
     55e:	8b 7f       	andi	r24, 0xFB	; 251
     560:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
     564:	80 91 02 01 	lds	r24, 0x0102
     568:	8f 7e       	andi	r24, 0xEF	; 239
     56a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
     56e:	80 91 a0 00 	lds	r24, 0x00A0
     572:	80 68       	ori	r24, 0x80	; 128
     574:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
     578:	80 91 72 00 	lds	r24, 0x0072
     57c:	82 60       	ori	r24, 0x02	; 2
     57e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
		TCCR4A |= (1 << COM4B1);		// enable OCB
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
	}

}
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	0f 90       	pop	r0
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	0f 90       	pop	r0
     590:	1f 90       	pop	r1
     592:	18 95       	reti

	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_left == 0) {
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
     594:	8f e0       	ldi	r24, 0x0F	; 15
     596:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     59a:	80 91 a0 00 	lds	r24, 0x00A0
     59e:	8f 75       	andi	r24, 0x5F	; 95
     5a0:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     5a4:	80 91 02 01 	lds	r24, 0x0102
     5a8:	87 7e       	andi	r24, 0xE7	; 231
     5aa:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
     5ae:	80 91 72 00 	lds	r24, 0x0072
     5b2:	89 7f       	andi	r24, 0xF9	; 249
     5b4:	80 93 72 00 	sts	0x0072, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if 
     5b8:	80 91 72 00 	lds	r24, 0x0072
     5bc:	82 60       	ori	r24, 0x02	; 2
     5be:	80 93 72 00 	sts	0x0072, r24
     5c2:	df cf       	rjmp	.-66     	; 0x582 <__vector_45+0xc2>
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
     5c4:	8e e0       	ldi	r24, 0x0E	; 14
     5c6:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
     5ca:	80 91 a0 00 	lds	r24, 0x00A0
     5ce:	8f 77       	andi	r24, 0x7F	; 127
     5d0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
     5d4:	80 91 72 00 	lds	r24, 0x0072
     5d8:	8d 7f       	andi	r24, 0xFD	; 253
     5da:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
     5de:	80 91 02 01 	lds	r24, 0x0102
     5e2:	87 7f       	andi	r24, 0xF7	; 247
     5e4:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
     5e8:	80 91 a0 00 	lds	r24, 0x00A0
     5ec:	80 62       	ori	r24, 0x20	; 32
     5ee:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
     5f2:	80 91 72 00 	lds	r24, 0x0072
     5f6:	84 60       	ori	r24, 0x04	; 4
     5f8:	80 93 72 00 	sts	0x0072, r24
     5fc:	c2 cf       	rjmp	.-124    	; 0x582 <__vector_45+0xc2>

000005fe <__vector_42>:
	}

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	8f 93       	push	r24
	leftMotorPhase = PASSIVE_PHASE;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
     610:	8e e0       	ldi	r24, 0x0E	; 14
     612:	80 93 2b 03 	sts	0x032B, r24
}
     616:	8f 91       	pop	r24
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	8f 93       	push	r24
	leftMotorPhase = PASSIVE_PHASE;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
     634:	8f e0       	ldi	r24, 0x0F	; 15
     636:	80 93 2b 03 	sts	0x032B, r24
}
     63a:	8f 91       	pop	r24
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	2f 93       	push	r18
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27

	rightMotorPhase = ACTIVE_PHASE;
     65a:	10 92 2d 03 	sts	0x032D, r1
	sendAdcValues = 1;
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	20 93 c0 03 	sts	0x03C0, r18

	// copy sampling variables
	last_right_current = right_current_avg;
     664:	80 91 65 03 	lds	r24, 0x0365
     668:	90 91 66 03 	lds	r25, 0x0366
     66c:	90 93 6a 03 	sts	0x036A, r25
     670:	80 93 69 03 	sts	0x0369, r24
	last_right_vel_sum = right_vel_sum;
     674:	80 91 77 03 	lds	r24, 0x0377
     678:	90 91 78 03 	lds	r25, 0x0378
     67c:	90 93 7a 03 	sts	0x037A, r25
     680:	80 93 79 03 	sts	0x0379, r24
	last_num_rvel_samples_avg = num_rvel_samples_avg;
     684:	80 91 6f 03 	lds	r24, 0x036F
     688:	90 91 70 03 	lds	r25, 0x0370
     68c:	90 93 72 03 	sts	0x0372, r25
     690:	80 93 71 03 	sts	0x0371, r24

	// reset sampling variables
	right_current_avg = 0;
     694:	10 92 66 03 	sts	0x0366, r1
     698:	10 92 65 03 	sts	0x0365, r1
	right_vel_sum = 0;
     69c:	10 92 78 03 	sts	0x0378, r1
     6a0:	10 92 77 03 	sts	0x0377, r1
	num_rvel_samples_avg = 0;
     6a4:	10 92 70 03 	sts	0x0370, r1
     6a8:	10 92 6f 03 	sts	0x036F, r1

	// start control
	compute_right_vel = 1;
     6ac:	20 93 b0 03 	sts	0x03B0, r18

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
     6b0:	80 91 7f 03 	lds	r24, 0x037F
     6b4:	90 91 80 03 	lds	r25, 0x0380
     6b8:	a0 91 81 03 	lds	r26, 0x0381
     6bc:	b0 91 82 03 	lds	r27, 0x0382
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	a1 05       	cpc	r26, r1
     6c4:	b1 05       	cpc	r27, r1
     6c6:	39 f1       	breq	.+78     	; 0x716 <__vector_35+0xd0>
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
										// the pwm is turned off...is it correct??
	}else if(pwm_right > 0) {   		// move forward
     6c8:	18 16       	cp	r1, r24
     6ca:	19 06       	cpc	r1, r25
     6cc:	1a 06       	cpc	r1, r26
     6ce:	1b 06       	cpc	r1, r27
     6d0:	c4 f5       	brge	.+112    	; 0x742 <__vector_35+0xfc>
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     6d2:	8d e0       	ldi	r24, 0x0D	; 13
     6d4:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
     6d8:	80 91 90 00 	lds	r24, 0x0090
     6dc:	8f 7d       	andi	r24, 0xDF	; 223
     6de:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
     6e2:	80 91 71 00 	lds	r24, 0x0071
     6e6:	8b 7f       	andi	r24, 0xFB	; 251
     6e8:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
     6ec:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
     6ee:	80 91 90 00 	lds	r24, 0x0090
     6f2:	80 68       	ori	r24, 0x80	; 128
     6f4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
     6f8:	80 91 71 00 	lds	r24, 0x0071
     6fc:	82 60       	ori	r24, 0x02	; 2
     6fe:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
		TCCR3A |= (1 << COM3B1);		// enable OCB
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
	}

}
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	2f 91       	pop	r18
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(pwm_right == 0) {
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
     716:	8d e0       	ldi	r24, 0x0D	; 13
     718:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     71c:	80 91 90 00 	lds	r24, 0x0090
     720:	8f 75       	andi	r24, 0x5F	; 95
     722:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     726:	8e b1       	in	r24, 0x0e	; 14
     728:	87 7e       	andi	r24, 0xE7	; 231
     72a:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
     72c:	80 91 71 00 	lds	r24, 0x0071
     730:	89 7f       	andi	r24, 0xF9	; 249
     732:	80 93 71 00 	sts	0x0071, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if 
     736:	80 91 71 00 	lds	r24, 0x0071
     73a:	82 60       	ori	r24, 0x02	; 2
     73c:	80 93 71 00 	sts	0x0071, r24
     740:	e0 cf       	rjmp	.-64     	; 0x702 <__vector_35+0xbc>
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
     742:	8c e0       	ldi	r24, 0x0C	; 12
     744:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
     748:	80 91 90 00 	lds	r24, 0x0090
     74c:	8f 77       	andi	r24, 0x7F	; 127
     74e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
     752:	80 91 71 00 	lds	r24, 0x0071
     756:	8d 7f       	andi	r24, 0xFD	; 253
     758:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
     75c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
     75e:	80 91 90 00 	lds	r24, 0x0090
     762:	80 62       	ori	r24, 0x20	; 32
     764:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
     768:	80 91 71 00 	lds	r24, 0x0071
     76c:	84 60       	ori	r24, 0x04	; 4
     76e:	80 93 71 00 	sts	0x0071, r24
     772:	c7 cf       	rjmp	.-114    	; 0x702 <__vector_35+0xbc>

00000774 <__vector_32>:
	}

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	8f 93       	push	r24

//	PORTB &= ~(1 << 5);

	rightMotorPhase = PASSIVE_PHASE;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
     786:	8c e0       	ldi	r24, 0x0C	; 12
     788:	80 93 2c 03 	sts	0x032C, r24

//	PORTB |= (1 << 5);
}
     78c:	8f 91       	pop	r24
     78e:	0f 90       	pop	r0
     790:	0f be       	out	0x3f, r0	; 63
     792:	0f 90       	pop	r0
     794:	1f 90       	pop	r1
     796:	18 95       	reti

00000798 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	8f 93       	push	r24

	rightMotorPhase = PASSIVE_PHASE;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	80 93 2c 03 	sts	0x032C, r24
}
     7b0:	8f 91       	pop	r24
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <readAccelXYZ>:


}
*/

void readAccelXYZ() {
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <readAccelXYZ+0x6>
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <readAccelXYZ+0x8>
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     7c8:	80 91 10 02 	lds	r24, 0x0210
     7cc:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
	i2c_write(0x32);							// sends address to read from
     7d0:	82 e3       	ldi	r24, 0x32	; 50
     7d2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     7d6:	80 91 10 02 	lds	r24, 0x0210
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <i2c_rep_start>

	for(i=0; i<5; i++) {
		buff[i] = i2c_readAck();				// read one byte
     7e0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     7f0:	8b 83       	std	Y+3, r24	; 0x03
     7f2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     7f6:	8c 83       	std	Y+4, r24	; 0x04
     7f8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     7fc:	8d 83       	std	Y+5, r24	; 0x05
	}
	buff[i] = i2c_readNak();					// read last byte
     7fe:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <i2c_readNak>
     802:	8e 83       	std	Y+6, r24	; 0x06
	i2c_stop();									// set stop conditon = release bus
     804:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // Y axis
     808:	3a 81       	ldd	r19, Y+2	; 0x02
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	82 2b       	or	r24, r18
     812:	93 2b       	or	r25, r19
     814:	90 93 c5 03 	sts	0x03C5, r25
     818:	80 93 c4 03 	sts	0x03C4, r24
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     81c:	3c 81       	ldd	r19, Y+4	; 0x04
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	82 2b       	or	r24, r18
     826:	93 2b       	or	r25, r19
     828:	90 93 c7 03 	sts	0x03C7, r25
     82c:	80 93 c6 03 	sts	0x03C6, r24
	accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     830:	3e 81       	ldd	r19, Y+6	; 0x06
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	82 2b       	or	r24, r18
     83a:	93 2b       	or	r25, r19
     83c:	90 93 c9 03 	sts	0x03C9, r25
     840:	80 93 c8 03 	sts	0x03C8, r24
	i2c_stop();
*/

#endif

}
     844:	26 96       	adiw	r28, 0x06	; 6
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	08 95       	ret

00000856 <readAccelXY>:

void readAccelXY() {
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	df 93       	push	r29
     85e:	cf 93       	push	r28
     860:	0f 92       	push	r0
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     866:	80 91 10 02 	lds	r24, 0x0210
     86a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
	i2c_write(0x32);							// sends address to read from
     86e:	82 e3       	ldi	r24, 0x32	; 50
     870:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     874:	80 91 10 02 	lds	r24, 0x0210
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <i2c_rep_start>

	for(i=0; i<3; i++) {
		buff[i] = i2c_readAck();				// read one byte
     87e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     882:	08 2f       	mov	r16, r24
     884:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     888:	f8 2e       	mov	r15, r24
     88a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     88e:	18 2f       	mov	r17, r24
	}
	buff[i] = i2c_readNak();					// read last byte
     890:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <i2c_readNak>
	i2c_stop();									// set stop conditon = release bus
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     89a:	5f 2d       	mov	r21, r15
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	20 2f       	mov	r18, r16
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	24 2b       	or	r18, r20
     8a4:	35 2b       	or	r19, r21
     8a6:	30 93 c5 03 	sts	0x03C5, r19
     8aa:	20 93 c4 03 	sts	0x03C4, r18
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	38 2f       	mov	r19, r24
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	81 2f       	mov	r24, r17
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	82 2b       	or	r24, r18
     8ba:	93 2b       	or	r25, r19
     8bc:	90 93 c7 03 	sts	0x03C7, r25
     8c0:	80 93 c6 03 	sts	0x03C6, r24

#endif

}
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	08 95       	ret

000008d2 <initI2C>:
void initI2C() {

	unsigned char ret;
  
	// init I2C bus
	i2c_init();
     8d2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <i2c_init>
#endif

#ifdef ACC_ADXL345

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8d6:	80 91 10 02 	lds	r24, 0x0210
     8da:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     8de:	88 23       	and	r24, r24
     8e0:	d9 f0       	breq	.+54     	; 0x918 <initI2C+0x46>
        i2c_stop();
     8e2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>
		PORTB &= ~(1 << 5);
     8e6:	2d 98       	cbi	0x05, 5	; 5
        i2c_write(0x2D);	// power register
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8e8:	80 91 10 02 	lds	r24, 0x0210
     8ec:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     8f0:	88 23       	and	r24, r24
     8f2:	01 f1       	breq	.+64     	; 0x934 <initI2C+0x62>
        i2c_stop();
     8f4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>
		PORTB &= ~(1 << 5);
     8f8:	2d 98       	cbi	0x05, 5	; 5
        i2c_write(0x31);	// Data format register
        i2c_write(0x08);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     8fa:	80 91 10 02 	lds	r24, 0x0210
     8fe:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     902:	88 23       	and	r24, r24
     904:	29 f5       	brne	.+74     	; 0x950 <initI2C+0x7e>
        i2c_stop();
		PORTB &= ~(1 << 5);
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// Data format register
     906:	8c e2       	ldi	r24, 0x2C	; 44
     908:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
        i2c_write(0x09);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     90c:	89 e0       	ldi	r24, 0x09	; 9
     90e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     912:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>
     916:	08 95       	ret
	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
    if ( ret ) {			// failed to issue start condition, possibly no device found
        i2c_stop();
		PORTB &= ~(1 << 5);
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power register
     918:	8d e2       	ldi	r24, 0x2D	; 45
     91a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
        i2c_write(0x08);	// measurement mode; ret=0 -> Ok, ret=1 -> no ACK 
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     924:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     928:	80 91 10 02 	lds	r24, 0x0210
     92c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     930:	88 23       	and	r24, r24
     932:	01 f7       	brne	.-64     	; 0x8f4 <initI2C+0x22>
        i2c_stop();
		PORTB &= ~(1 << 5);
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
     934:	81 e3       	ldi	r24, 0x31	; 49
     936:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
        i2c_write(0x08);	// set to full resolution; ret=0 -> Ok, ret=1 -> no ACK 
     93a:	88 e0       	ldi	r24, 0x08	; 8
     93c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
     940:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);       // set device address and write mode
     944:	80 91 10 02 	lds	r24, 0x0210
     948:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
    if ( ret ) {			// failed to issue start condition, possibly no device found
     94c:	88 23       	and	r24, r24
     94e:	d9 f2       	breq	.-74     	; 0x906 <initI2C+0x34>
        i2c_stop();
     950:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>
		PORTB &= ~(1 << 5);
     954:	2d 98       	cbi	0x05, 5	; 5
     956:	08 95       	ret

00000958 <calibrateAccelerometer>:
	
#endif

}

void calibrateAccelerometer() {
     958:	4f 92       	push	r4
     95a:	5f 92       	push	r5
     95c:	7f 92       	push	r7
     95e:	8f 92       	push	r8
     960:	9f 92       	push	r9
     962:	af 92       	push	r10
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	0f 92       	push	r0
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62

	int j=0;
	accOffsetX = 0;
     97c:	10 92 d1 03 	sts	0x03D1, r1
     980:	10 92 d0 03 	sts	0x03D0, r1
	accOffsetY = 0;
     984:	10 92 d3 03 	sts	0x03D3, r1
     988:	10 92 d2 03 	sts	0x03D2, r1
	accOffsetZ = 0;
     98c:	10 92 d5 03 	sts	0x03D5, r1
     990:	10 92 d4 03 	sts	0x03D4, r1
     994:	22 e3       	ldi	r18, 0x32	; 50
     996:	42 2e       	mov	r4, r18
     998:	51 2c       	mov	r5, r1


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     99a:	80 91 10 02 	lds	r24, 0x0210
     99e:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
	i2c_write(0x32);							// sends address to read from
     9a2:	82 e3       	ldi	r24, 0x32	; 50
     9a4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     9a8:	80 91 10 02 	lds	r24, 0x0210
     9ac:	8f 5f       	subi	r24, 0xFF	; 255
     9ae:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <i2c_rep_start>

	for(i=0; i<5; i++) {
		buff[i] = i2c_readAck();				// read one byte
     9b2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     9b6:	88 2e       	mov	r8, r24
     9b8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     9bc:	78 2e       	mov	r7, r24
     9be:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     9c2:	a8 2e       	mov	r10, r24
     9c4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     9c8:	98 2e       	mov	r9, r24
     9ca:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     9ce:	b8 2e       	mov	r11, r24
	}
	buff[i] = i2c_readNak();					// read last byte
     9d0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <i2c_readNak>
	i2c_stop();									// set stop conditon = release bus
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // Y axis
     9da:	d7 2c       	mov	r13, r7
     9dc:	cc 24       	eor	r12, r12
     9de:	e8 2d       	mov	r30, r8
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	ec 29       	or	r30, r12
     9e4:	fd 29       	or	r31, r13
     9e6:	f0 93 c5 03 	sts	0x03C5, r31
     9ea:	e0 93 c4 03 	sts	0x03C4, r30
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     9ee:	f9 2c       	mov	r15, r9
     9f0:	ee 24       	eor	r14, r14
     9f2:	2a 2d       	mov	r18, r10
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	2e 29       	or	r18, r14
     9f8:	3f 29       	or	r19, r15
     9fa:	30 93 c7 03 	sts	0x03C7, r19
     9fe:	20 93 c6 03 	sts	0x03C6, r18
	accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	18 2f       	mov	r17, r24
     a06:	00 e0       	ldi	r16, 0x00	; 0
     a08:	4b 2d       	mov	r20, r11
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	40 2b       	or	r20, r16
     a0e:	51 2b       	or	r21, r17
     a10:	50 93 c9 03 	sts	0x03C9, r21
     a14:	40 93 c8 03 	sts	0x03C8, r20
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
		readAccelXYZ();
		accOffsetX += accX;
     a18:	60 91 d0 03 	lds	r22, 0x03D0
     a1c:	70 91 d1 03 	lds	r23, 0x03D1
     a20:	6e 0f       	add	r22, r30
     a22:	7f 1f       	adc	r23, r31
     a24:	70 93 d1 03 	sts	0x03D1, r23
     a28:	60 93 d0 03 	sts	0x03D0, r22
		accOffsetY += accY;
     a2c:	e0 91 d2 03 	lds	r30, 0x03D2
     a30:	f0 91 d3 03 	lds	r31, 0x03D3
     a34:	e2 0f       	add	r30, r18
     a36:	f3 1f       	adc	r31, r19
     a38:	f0 93 d3 03 	sts	0x03D3, r31
     a3c:	e0 93 d2 03 	sts	0x03D2, r30
		accOffsetZ += accZ;
     a40:	20 91 d4 03 	lds	r18, 0x03D4
     a44:	30 91 d5 03 	lds	r19, 0x03D5
     a48:	24 0f       	add	r18, r20
     a4a:	35 1f       	adc	r19, r21
     a4c:	30 93 d5 03 	sts	0x03D5, r19
     a50:	20 93 d4 03 	sts	0x03D4, r18
     a54:	08 94       	sec
     a56:	41 08       	sbc	r4, r1
     a58:	51 08       	sbc	r5, r1
	int j=0;
	accOffsetX = 0;
	accOffsetY = 0;
	accOffsetZ = 0;

	for(j=0; j<50; j++) {
     a5a:	41 14       	cp	r4, r1
     a5c:	51 04       	cpc	r5, r1
     a5e:	09 f0       	breq	.+2      	; 0xa62 <calibrateAccelerometer+0x10a>
     a60:	9c cf       	rjmp	.-200    	; 0x99a <calibrateAccelerometer+0x42>
		readAccelXYZ();
		accOffsetX += accX;
		accOffsetY += accY;
		accOffsetZ += accZ;
	}
	accOffsetX = accOffsetX/50;
     a62:	02 e3       	ldi	r16, 0x32	; 50
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	cb 01       	movw	r24, r22
     a68:	b8 01       	movw	r22, r16
     a6a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
     a6e:	70 93 d1 03 	sts	0x03D1, r23
     a72:	60 93 d0 03 	sts	0x03D0, r22
	accOffsetY = accOffsetY/50;
     a76:	cf 01       	movw	r24, r30
     a78:	b8 01       	movw	r22, r16
     a7a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
     a7e:	70 93 d3 03 	sts	0x03D3, r23
     a82:	60 93 d2 03 	sts	0x03D2, r22
	accOffsetZ = accOffsetZ/50;
     a86:	c9 01       	movw	r24, r18
     a88:	b8 01       	movw	r22, r16
     a8a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
     a8e:	70 93 d5 03 	sts	0x03D5, r23
     a92:	60 93 d4 03 	sts	0x03D4, r22

}
     a96:	0f 90       	pop	r0
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	bf 90       	pop	r11
     aaa:	af 90       	pop	r10
     aac:	9f 90       	pop	r9
     aae:	8f 90       	pop	r8
     ab0:	7f 90       	pop	r7
     ab2:	5f 90       	pop	r5
     ab4:	4f 90       	pop	r4
     ab6:	08 95       	ret

00000ab8 <computeAngle>:

void computeAngle() {
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	0f 92       	push	r0
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
     ace:	80 91 10 02 	lds	r24, 0x0210
     ad2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
	i2c_write(0x32);							// sends address to read from
     ad6:	82 e3       	ldi	r24, 0x32	; 50
     ad8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
     adc:	80 91 10 02 	lds	r24, 0x0210
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <i2c_rep_start>

	for(i=0; i<3; i++) {
		buff[i] = i2c_readAck();				// read one byte
     ae6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     aea:	18 2f       	mov	r17, r24
     aec:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     af0:	08 2f       	mov	r16, r24
     af2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
     af6:	e8 2e       	mov	r14, r24
	}
	buff[i] = i2c_readNak();					// read last byte
     af8:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <i2c_readNak>
	i2c_stop();									// set stop conditon = release bus
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
     b02:	30 2f       	mov	r19, r16
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	61 2f       	mov	r22, r17
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	62 2b       	or	r22, r18
     b0c:	73 2b       	or	r23, r19

void computeAngle() {

	readAccelXY();

	accX = accX-accOffsetX;
     b0e:	20 91 d0 03 	lds	r18, 0x03D0
     b12:	30 91 d1 03 	lds	r19, 0x03D1
     b16:	62 1b       	sub	r22, r18
     b18:	73 0b       	sbc	r23, r19
     b1a:	70 93 c5 03 	sts	0x03C5, r23
     b1e:	60 93 c4 03 	sts	0x03C4, r22
	}
	buff[i] = i2c_readNak();					// read last byte
	i2c_stop();									// set stop conditon = release bus

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	38 2f       	mov	r19, r24
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	ce 2c       	mov	r12, r14
     b2a:	dd 24       	eor	r13, r13
     b2c:	c2 2a       	or	r12, r18
     b2e:	d3 2a       	or	r13, r19
void computeAngle() {

	readAccelXY();

	accX = accX-accOffsetX;
	accY = accY-accOffsetY;
     b30:	80 91 d2 03 	lds	r24, 0x03D2
     b34:	90 91 d3 03 	lds	r25, 0x03D3
     b38:	c8 1a       	sub	r12, r24
     b3a:	d9 0a       	sbc	r13, r25
     b3c:	d0 92 c7 03 	sts	0x03C7, r13
     b40:	c0 92 c6 03 	sts	0x03C6, r12
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
     b44:	88 27       	eor	r24, r24
     b46:	77 fd       	sbrc	r23, 7
     b48:	80 95       	com	r24
     b4a:	98 2f       	mov	r25, r24
     b4c:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
     b50:	7b 01       	movw	r14, r22
     b52:	8c 01       	movw	r16, r24
     b54:	b6 01       	movw	r22, r12
     b56:	88 27       	eor	r24, r24
     b58:	77 fd       	sbrc	r23, 7
     b5a:	80 95       	com	r24
     b5c:	98 2f       	mov	r25, r24
     b5e:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
     b62:	9b 01       	movw	r18, r22
     b64:	ac 01       	movw	r20, r24
     b66:	c8 01       	movw	r24, r16
     b68:	b7 01       	movw	r22, r14
     b6a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <atan2>
     b6e:	21 ee       	ldi	r18, 0xE1	; 225
     b70:	3e e2       	ldi	r19, 0x2E	; 46
     b72:	45 e6       	ldi	r20, 0x65	; 101
     b74:	52 e4       	ldi	r21, 0x42	; 66
     b76:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3>
     b7a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__fixsfsi>
     b7e:	9b 01       	movw	r18, r22
     b80:	70 93 d7 03 	sts	0x03D7, r23
     b84:	60 93 d6 03 	sts	0x03D6, r22

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
     b88:	77 ff       	sbrs	r23, 7
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <computeAngle+0xe0>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
     b8c:	28 59       	subi	r18, 0x98	; 152
     b8e:	3e 4f       	sbci	r19, 0xFE	; 254
     b90:	30 93 d7 03 	sts	0x03D7, r19
     b94:	20 93 d6 03 	sts	0x03D6, r18
	}

}
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	08 95       	ret

00000bac <initPeripherals>:

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
     bac:	f8 94       	cli

	initPortsIO();
     bae:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <initPortsIO>
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	//				 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	//				 0		0		 0		0		0		 0		0		0

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz / 64 = 125 KHz => Tad;
     bb2:	ea e7       	ldi	r30, 0x7A	; 122
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	86 60       	ori	r24, 0x06	; 6
     bba:	80 83       	st	Z, r24
											// one sample need 13.5 Tad in free running mode, so interrupt frequency is 125/13.5= 9.26 KHz (107 us)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
     bbc:	ac e7       	ldi	r26, 0x7C	; 124
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	8c 91       	ld	r24, X
     bc2:	80 64       	ori	r24, 0x40	; 64
     bc4:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode
     bc6:	80 81       	ld	r24, Z
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	80 83       	st	Z, r24
	//ADRTS2:0 in ADCSRB  are already set to free running by default (0b000)
	ADCSRB &= 0xF8;
     bcc:	ab e7       	ldi	r26, 0x7B	; 123
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	8c 91       	ld	r24, X
     bd2:	88 7f       	andi	r24, 0xF8	; 248
     bd4:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
     bd6:	80 81       	ld	r24, Z
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
     bdc:	80 81       	ld	r24, Z
     bde:	80 68       	ori	r24, 0x80	; 128
     be0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
     be2:	80 81       	ld	r24, Z
     be4:	80 64       	ori	r24, 0x40	; 64
     be6:	80 83       	st	Z, r24
	// We need a period time of 10 ms (100 Hz)
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz
	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
     be8:	e0 e9       	ldi	r30, 0x90	; 144
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	83 68       	ori	r24, 0x83	; 131
     bf0:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);	
     bf2:	80 81       	ld	r24, Z
     bf4:	83 60       	ori	r24, 0x03	; 3
     bf6:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     bf8:	a1 e9       	ldi	r26, 0x91	; 145
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	8c 91       	ld	r24, X
     bfe:	8b 60       	ori	r24, 0x0B	; 11
     c00:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
     c02:	80 91 7f 03 	lds	r24, 0x037F
     c06:	90 91 80 03 	lds	r25, 0x0380
     c0a:	90 93 99 00 	sts	0x0099, r25
     c0e:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
     c12:	10 92 9b 00 	sts	0x009B, r1
     c16:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt	
     c1a:	a1 e7       	ldi	r26, 0x71	; 113
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	8c 91       	ld	r24, X
     c20:	81 60       	ori	r24, 0x01	; 1
     c22:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
     c24:	80 81       	ld	r24, Z
     c26:	8f 75       	andi	r24, 0x5F	; 95
     c28:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
     c2a:	8e b1       	in	r24, 0x0e	; 14
     c2c:	87 7e       	andi	r24, 0xE7	; 231
     c2e:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
     c30:	e0 ea       	ldi	r30, 0xA0	; 160
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	83 68       	ori	r24, 0x83	; 131
     c38:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
     c3a:	a1 ea       	ldi	r26, 0xA1	; 161
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	8c 91       	ld	r24, X
     c40:	8b 60       	ori	r24, 0x0B	; 11
     c42:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
     c44:	80 91 83 03 	lds	r24, 0x0383
     c48:	90 91 84 03 	lds	r25, 0x0384
     c4c:	90 93 a9 00 	sts	0x00A9, r25
     c50:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
     c54:	10 92 ab 00 	sts	0x00AB, r1
     c58:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
     c5c:	a2 e7       	ldi	r26, 0x72	; 114
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	8c 91       	ld	r24, X
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
     c66:	80 81       	ld	r24, Z
     c68:	8f 75       	andi	r24, 0x5F	; 95
     c6a:	80 83       	st	Z, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
     c6c:	e2 e0       	ldi	r30, 0x02	; 2
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	80 81       	ld	r24, Z
     c72:	87 7e       	andi	r24, 0xE7	; 231
     c74:	80 83       	st	Z, r24
	cli();			// disable global interrupts (by default it should already be disabled)

	initPortsIO();
	initAdc();
	initPwm();
	initSPI();
     c76:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <initSPI>
	mirf_init();
     c7a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <mirf_init>
	initUsart();
     c7e:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <initUsart>
	initI2C();
     c82:	0e 94 69 04 	call	0x8d2	; 0x8d2 <initI2C>

	sei();			// enable global interrupts
     c86:	78 94       	sei

	

}
     c88:	08 95       	ret

00000c8a <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 91 bf 03 	lds	r25, 0x03BF
     c90:	89 1b       	sub	r24, r25
     c92:	80 93 bf 03 	sts	0x03BF, r24

	if(blinkState) {
     c96:	88 23       	and	r24, r24
     c98:	39 f4       	brne	.+14     	; 0xca8 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// enable OCC
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);
     c9a:	80 91 80 00 	lds	r24, 0x0080
     c9e:	87 7f       	andi	r24, 0xF7	; 247
     ca0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     ca4:	2f 98       	cbi	0x05, 7	; 5
     ca6:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// enable OCC
     ca8:	80 91 80 00 	lds	r24, 0x0080
     cac:	88 60       	ori	r24, 0x08	; 8
     cae:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	90 93 8d 00 	sts	0x008D, r25
     cba:	80 93 8c 00 	sts	0x008C, r24
     cbe:	08 95       	ret

00000cc0 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
     cc0:	88 23       	and	r24, r24
     cc2:	59 f0       	breq	.+22     	; 0xcda <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     cc4:	90 91 80 00 	lds	r25, 0x0080
     cc8:	90 68       	ori	r25, 0x80	; 128
     cca:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	90 93 89 00 	sts	0x0089, r25
     cd4:	80 93 88 00 	sts	0x0088, r24
     cd8:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
     cda:	80 91 80 00 	lds	r24, 0x0080
     cde:	8f 77       	andi	r24, 0x7F	; 127
     ce0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
     ce4:	2d 98       	cbi	0x05, 5	; 5
     ce6:	08 95       	ret

00000ce8 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     ce8:	88 23       	and	r24, r24
     cea:	59 f0       	breq	.+22     	; 0xd02 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     cec:	90 91 80 00 	lds	r25, 0x0080
     cf0:	90 62       	ori	r25, 0x20	; 32
     cf2:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 8b 00 	sts	0x008B, r25
     cfc:	80 93 8a 00 	sts	0x008A, r24
     d00:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
     d02:	80 91 80 00 	lds	r24, 0x0080
     d06:	8f 7d       	andi	r24, 0xDF	; 223
     d08:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
     d0c:	2e 98       	cbi	0x05, 6	; 5
     d0e:	08 95       	ret

00000d10 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     d10:	88 23       	and	r24, r24
     d12:	59 f0       	breq	.+22     	; 0xd2a <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     d14:	90 91 80 00 	lds	r25, 0x0080
     d18:	98 60       	ori	r25, 0x08	; 8
     d1a:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 8d 00 	sts	0x008D, r25
     d24:	80 93 8c 00 	sts	0x008C, r24
     d28:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
     d2a:	80 91 80 00 	lds	r24, 0x0080
     d2e:	87 7f       	andi	r24, 0xF7	; 247
     d30:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
     d34:	2f 98       	cbi	0x05, 7	; 5
     d36:	08 95       	ret

00000d38 <getSelector>:
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     d38:	86 b1       	in	r24, 0x06	; 6
     d3a:	66 b1       	in	r22, 0x06	; 6
     d3c:	26 b1       	in	r18, 0x06	; 6
     d3e:	46 b1       	in	r20, 0x06	; 6
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	28 70       	andi	r18, 0x08	; 8
     d44:	30 70       	andi	r19, 0x00	; 0
     d46:	35 95       	asr	r19
     d48:	27 95       	ror	r18
     d4a:	35 95       	asr	r19
     d4c:	27 95       	ror	r18
     d4e:	35 95       	asr	r19
     d50:	27 95       	ror	r18
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	64 70       	andi	r22, 0x04	; 4
     d5a:	70 70       	andi	r23, 0x00	; 0
     d5c:	75 95       	asr	r23
     d5e:	67 95       	ror	r22
     d60:	75 95       	asr	r23
     d62:	67 95       	ror	r22
     d64:	26 0f       	add	r18, r22
     d66:	37 1f       	adc	r19, r23
     d68:	22 0f       	add	r18, r18
     d6a:	33 1f       	adc	r19, r19
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	42 70       	andi	r20, 0x02	; 2
     d70:	50 70       	andi	r21, 0x00	; 0
     d72:	55 95       	asr	r21
     d74:	47 95       	ror	r20
     d76:	24 0f       	add	r18, r20
     d78:	35 1f       	adc	r19, r21
     d7a:	22 0f       	add	r18, r18
     d7c:	81 70       	andi	r24, 0x01	; 1
}
     d7e:	82 0f       	add	r24, r18
     d80:	08 95       	ret

00000d82 <main>:


int main(void) {
     d82:	2f 92       	push	r2
     d84:	3f 92       	push	r3
     d86:	4f 92       	push	r4
     d88:	5f 92       	push	r5
     d8a:	6f 92       	push	r6
     d8c:	7f 92       	push	r7
     d8e:	8f 92       	push	r8
     d90:	9f 92       	push	r9
     d92:	af 92       	push	r10
     d94:	bf 92       	push	r11
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	2c 97       	sbiw	r28, 0x0c	; 12
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61

	//unsigned char debugData = 0xAA;
	unsigned int i = 0;
	unsigned char packetId = 0;
	choosePeripheral = 1;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 0f 02 	sts	0x020F, r24

	initPeripherals();
     dbc:	0e 94 d6 05 	call	0xbac	; 0xbac <initPeripherals>

PORTB &= ~(1 << 5);
     dc0:	2d 98       	cbi	0x05, 5	; 5
	calibrateAccelerometer();
     dc2:	0e 94 ac 04 	call	0x958	; 0x958 <calibrateAccelerometer>
PORTB |= (1 << 5);
     dc6:	2d 9a       	sbi	0x05, 5	; 5

	e_start_agendas_processing();
     dc8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <e_start_agendas_processing>
	//e_activate_agenda(toggleBlueLed, 10000);		// every 1 seconds
	e_activate_agenda(sendValues, 20000);	// every 2 seconds
     dcc:	8a ea       	ldi	r24, 0xAA	; 170
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	60 e2       	ldi	r22, 0x20	; 32
     dd2:	7e e4       	ldi	r23, 0x4E	; 78
     dd4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <e_activate_agenda>
	e_init_remote_control();
     dd8:	0e 94 a3 11 	call	0x2346	; 0x2346 <e_init_remote_control>
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     ddc:	24 e6       	ldi	r18, 0x64	; 100
     dde:	a2 2e       	mov	r10, r18
     de0:	b1 2c       	mov	r11, r1
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     de2:	9d ec       	ldi	r25, 0xCD	; 205
     de4:	69 2e       	mov	r6, r25
     de6:	9e ef       	ldi	r25, 0xFE	; 254
     de8:	79 2e       	mov	r7, r25
     dea:	9f ef       	ldi	r25, 0xFF	; 255
     dec:	89 2e       	mov	r8, r25
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	99 2e       	mov	r9, r25
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     df2:	83 e3       	ldi	r24, 0x33	; 51
     df4:	28 2e       	mov	r2, r24
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	38 2e       	mov	r3, r24
     dfa:	41 2c       	mov	r4, r1
     dfc:	51 2c       	mov	r5, r1
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
     dfe:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		ir_move = e_get_data();
     e00:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <e_get_data>
     e04:	80 93 c1 03 	sts	0x03C1, r24

		if(command_received) {
     e08:	90 91 c2 03 	lds	r25, 0x03C2
     e0c:	99 23       	and	r25, r25
     e0e:	09 f4       	brne	.+2      	; 0xe12 <main+0x90>
     e10:	4b c0       	rjmp	.+150    	; 0xea8 <main+0x126>

			command_received = 0;
     e12:	10 92 c2 03 	sts	0x03C2, r1

			//usartTransmit(ir_move);

			switch(ir_move) {
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	09 f4       	brne	.+2      	; 0xe1c <main+0x9a>
     e1a:	0b c1       	rjmp	.+534    	; 0x1032 <main+0x2b0>
     e1c:	85 30       	cpi	r24, 0x05	; 5
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <main+0xa0>
     e20:	60 c4       	rjmp	.+2240   	; 0x16e2 <main+0x960>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f4       	brne	.+2      	; 0xe28 <main+0xa6>
     e26:	51 c6       	rjmp	.+3234   	; 0x1aca <main+0xd48>
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <main+0xac>
     e2c:	3d c5       	rjmp	.+2682   	; 0x18a8 <main+0xb26>
					pwm_right_desired -= STEP_MOTORS;
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
					break;

               	case 0:	// colors
					colorState = (colorState+1)%5;
     e2e:	80 91 c3 03 	lds	r24, 0x03C3
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	65 e0       	ldi	r22, 0x05	; 5
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__divmodhi4>
     e3e:	80 93 c3 03 	sts	0x03C3, r24

					if(colorState==0) {		// turn on blue
     e42:	88 23       	and	r24, r24
     e44:	09 f0       	breq	.+2      	; 0xe48 <main+0xc6>
     e46:	6d c6       	rjmp	.+3290   	; 0x1b22 <main+0xda0>
						pwm_blue = 0;
     e48:	10 92 0d 02 	sts	0x020D, r1
						pwm_green = MAX_LEDS_PWM;
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	90 93 0c 02 	sts	0x020C, r25
						pwm_red = MAX_LEDS_PWM;					
     e52:	90 93 0b 02 	sts	0x020B, r25

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
     e56:	80 91 80 00 	lds	r24, 0x0080
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
     e60:	2f ef       	ldi	r18, 0xFF	; 255
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	30 93 89 00 	sts	0x0089, r19
     e68:	20 93 88 00 	sts	0x0088, r18
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
     e6c:	80 91 0c 02 	lds	r24, 0x020C

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
     e70:	88 23       	and	r24, r24
     e72:	09 f4       	brne	.+2      	; 0xe76 <main+0xf4>
     e74:	6b c6       	rjmp	.+3286   	; 0x1b4c <main+0xdca>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
     e76:	90 91 80 00 	lds	r25, 0x0080
     e7a:	90 62       	ori	r25, 0x20	; 32
     e7c:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 8b 00 	sts	0x008B, r25
     e86:	80 93 8a 00 	sts	0x008A, r24
						pwm_red = MAX_LEDS_PWM;
					}					

					updateRedLed(pwm_red);	
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);
     e8a:	80 91 0d 02 	lds	r24, 0x020D

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
     e8e:	88 23       	and	r24, r24
     e90:	09 f4       	brne	.+2      	; 0xe94 <main+0x112>
     e92:	55 c6       	rjmp	.+3242   	; 0x1b3e <main+0xdbc>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
     e94:	90 91 80 00 	lds	r25, 0x0080
     e98:	98 60       	ori	r25, 0x08	; 8
     e9a:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 8d 00 	sts	0x008D, r25
     ea4:	80 93 8c 00 	sts	0x008C, r24
		}	// ir command received


		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		if(myTimeout) {
     ea8:	80 91 d8 03 	lds	r24, 0x03D8
     eac:	88 23       	and	r24, r24
     eae:	09 f0       	breq	.+2      	; 0xeb2 <main+0x130>
     eb0:	cc c2       	rjmp	.+1432   	; 0x144a <main+0x6c8>
		}



		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {
     eb2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <mirf_data_ready>
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <main+0x13a>
     eba:	5f c1       	rjmp	.+702    	; 0x117a <main+0x3f8>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
     ebc:	66 b1       	in	r22, 0x06	; 6
     ebe:	46 b1       	in	r20, 0x06	; 6
     ec0:	86 b1       	in	r24, 0x06	; 6
     ec2:	26 b1       	in	r18, 0x06	; 6
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 70       	andi	r24, 0x08	; 8
     ec8:	90 70       	andi	r25, 0x00	; 0
     eca:	95 95       	asr	r25
     ecc:	87 95       	ror	r24
     ece:	95 95       	asr	r25
     ed0:	87 95       	ror	r24
     ed2:	95 95       	asr	r25
     ed4:	87 95       	ror	r24
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	44 70       	andi	r20, 0x04	; 4
     ede:	50 70       	andi	r21, 0x00	; 0
     ee0:	55 95       	asr	r21
     ee2:	47 95       	ror	r20
     ee4:	55 95       	asr	r21
     ee6:	47 95       	ror	r20
     ee8:	84 0f       	add	r24, r20
     eea:	95 1f       	adc	r25, r21
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	22 70       	andi	r18, 0x02	; 2
     ef4:	30 70       	andi	r19, 0x00	; 0
     ef6:	35 95       	asr	r19
     ef8:	27 95       	ror	r18
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	88 0f       	add	r24, r24
     f00:	61 70       	andi	r22, 0x01	; 1
     f02:	86 0f       	add	r24, r22
#endif


		}

		if(getSelector() == 0) {	// no control
     f04:	09 f0       	breq	.+2      	; 0xf08 <main+0x186>
     f06:	d2 c0       	rjmp	.+420    	; 0x10ac <main+0x32a>

			if(start_control) {
     f08:	80 91 b1 03 	lds	r24, 0x03B1
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <main+0x190>
     f10:	f3 c0       	rjmp	.+486    	; 0x10f8 <main+0x376>
				pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
     f12:	80 91 87 03 	lds	r24, 0x0387
     f16:	90 91 88 03 	lds	r25, 0x0388
     f1a:	a0 91 89 03 	lds	r26, 0x0389
     f1e:	b0 91 8a 03 	lds	r27, 0x038A
     f22:	80 93 b4 03 	sts	0x03B4, r24
     f26:	90 93 b5 03 	sts	0x03B5, r25
     f2a:	a0 93 b6 03 	sts	0x03B6, r26
     f2e:	b0 93 b7 03 	sts	0x03B7, r27
				pwm_left_working = pwm_left_desired;	
     f32:	80 91 8b 03 	lds	r24, 0x038B
     f36:	90 91 8c 03 	lds	r25, 0x038C
     f3a:	a0 91 8d 03 	lds	r26, 0x038D
     f3e:	b0 91 8e 03 	lds	r27, 0x038E
     f42:	80 93 b8 03 	sts	0x03B8, r24
     f46:	90 93 b9 03 	sts	0x03B9, r25
     f4a:	a0 93 ba 03 	sts	0x03BA, r26
     f4e:	b0 93 bb 03 	sts	0x03BB, r27
				start_control = 0;
     f52:	10 92 b1 03 	sts	0x03B1, r1
				update_pwm = 1;
     f56:	10 93 bc 03 	sts	0x03BC, r17
     f5a:	21 e0       	ldi	r18, 0x01	; 1
				update_pwm = 1;		
			}

		}

		if(compute_left_vel) {
     f5c:	80 91 af 03 	lds	r24, 0x03AF
     f60:	88 23       	and	r24, r24
     f62:	91 f0       	breq	.+36     	; 0xf88 <main+0x206>
			last_left_vel = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
     f64:	80 91 75 03 	lds	r24, 0x0375
     f68:	90 91 76 03 	lds	r25, 0x0376
     f6c:	60 91 6d 03 	lds	r22, 0x036D
     f70:	70 91 6e 03 	lds	r23, 0x036E
     f74:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
     f78:	70 93 7c 03 	sts	0x037C, r23
     f7c:	60 93 7b 03 	sts	0x037B, r22
			left_vel_changed = 1;
     f80:	10 93 b2 03 	sts	0x03B2, r17
			compute_left_vel = 0;
     f84:	10 92 af 03 	sts	0x03AF, r1
		}

		if(compute_right_vel) {
     f88:	80 91 b0 03 	lds	r24, 0x03B0
     f8c:	88 23       	and	r24, r24
     f8e:	91 f0       	breq	.+36     	; 0xfb4 <main+0x232>
			last_right_vel = (unsigned int)(last_right_vel_sum/last_num_rvel_samples_avg);
     f90:	80 91 79 03 	lds	r24, 0x0379
     f94:	90 91 7a 03 	lds	r25, 0x037A
     f98:	60 91 71 03 	lds	r22, 0x0371
     f9c:	70 91 72 03 	lds	r23, 0x0372
     fa0:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
     fa4:	70 93 7e 03 	sts	0x037E, r23
     fa8:	60 93 7d 03 	sts	0x037D, r22
			right_vel_changed = 1;
     fac:	10 93 b3 03 	sts	0x03B3, r17
			compute_right_vel = 0;
     fb0:	10 92 b0 03 	sts	0x03B0, r1
		}

		if(update_pwm) {
     fb4:	22 23       	and	r18, r18
     fb6:	09 f4       	brne	.+2      	; 0xfba <main+0x238>
     fb8:	23 cf       	rjmp	.-442    	; 0xe00 <main+0x7e>

			update_pwm = 0;
     fba:	10 92 bc 03 	sts	0x03BC, r1
			pwm_left = pwm_left_working;
     fbe:	20 91 b8 03 	lds	r18, 0x03B8
     fc2:	30 91 b9 03 	lds	r19, 0x03B9
     fc6:	40 91 ba 03 	lds	r20, 0x03BA
     fca:	50 91 bb 03 	lds	r21, 0x03BB
     fce:	20 93 83 03 	sts	0x0383, r18
     fd2:	30 93 84 03 	sts	0x0384, r19
     fd6:	40 93 85 03 	sts	0x0385, r20
     fda:	50 93 86 03 	sts	0x0386, r21
			pwm_right = pwm_right_working;
     fde:	80 91 b4 03 	lds	r24, 0x03B4
     fe2:	90 91 b5 03 	lds	r25, 0x03B5
     fe6:	a0 91 b6 03 	lds	r26, 0x03B6
     fea:	b0 91 b7 03 	lds	r27, 0x03B7
     fee:	80 93 7f 03 	sts	0x037F, r24
     ff2:	90 93 80 03 	sts	0x0380, r25
     ff6:	a0 93 81 03 	sts	0x0381, r26
     ffa:	b0 93 82 03 	sts	0x0382, r27

			if(pwm_right >= 0) {
     ffe:	b7 fd       	sbrc	r27, 7
    1000:	e3 c3       	rjmp	.+1990   	; 0x17c8 <main+0xa46>
				OCR3A = (int)pwm_right;
    1002:	90 93 99 00 	sts	0x0099, r25
    1006:	80 93 98 00 	sts	0x0098, r24
			} else {
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
    100a:	57 fd       	sbrc	r21, 7
    100c:	d5 c3       	rjmp	.+1962   	; 0x17b8 <main+0xa36>
				OCR4A = pwm_left;
    100e:	30 93 a9 00 	sts	0x00A9, r19
    1012:	20 93 a8 00 	sts	0x00A8, r18

	while(1) {

		//PORTB ^= (1 << 6); // Toggle the green LED

		ir_move = e_get_data();
    1016:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <e_get_data>
    101a:	80 93 c1 03 	sts	0x03C1, r24

		if(command_received) {
    101e:	90 91 c2 03 	lds	r25, 0x03C2
    1022:	99 23       	and	r25, r25
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x2a6>
    1026:	40 cf       	rjmp	.-384    	; 0xea8 <main+0x126>

			command_received = 0;
    1028:	10 92 c2 03 	sts	0x03C2, r1

			//usartTransmit(ir_move);

			switch(ir_move) {
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	09 f0       	breq	.+2      	; 0x1032 <main+0x2b0>
    1030:	f5 ce       	rjmp	.-534    	; 0xe1c <main+0x9a>
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
					break;

				case 4:	// both motors left
					pwm_right_desired += STEP_MOTORS;
    1032:	20 91 87 03 	lds	r18, 0x0387
    1036:	30 91 88 03 	lds	r19, 0x0388
    103a:	40 91 89 03 	lds	r20, 0x0389
    103e:	50 91 8a 03 	lds	r21, 0x038A
    1042:	22 5e       	subi	r18, 0xE2	; 226
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	4f 4f       	sbci	r20, 0xFF	; 255
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	20 93 87 03 	sts	0x0387, r18
    104e:	30 93 88 03 	sts	0x0388, r19
    1052:	40 93 89 03 	sts	0x0389, r20
    1056:	50 93 8a 03 	sts	0x038A, r21
					pwm_left_desired -= STEP_MOTORS;
    105a:	80 91 8b 03 	lds	r24, 0x038B
    105e:	90 91 8c 03 	lds	r25, 0x038C
    1062:	a0 91 8d 03 	lds	r26, 0x038D
    1066:	b0 91 8e 03 	lds	r27, 0x038E
    106a:	4e 97       	sbiw	r24, 0x1e	; 30
    106c:	a1 09       	sbc	r26, r1
    106e:	b1 09       	sbc	r27, r1
    1070:	80 93 8b 03 	sts	0x038B, r24
    1074:	90 93 8c 03 	sts	0x038C, r25
    1078:	a0 93 8d 03 	sts	0x038D, r26
    107c:	b0 93 8e 03 	sts	0x038E, r27
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1080:	27 36       	cpi	r18, 0x67	; 103
    1082:	e2 e0       	ldi	r30, 0x02	; 2
    1084:	3e 07       	cpc	r19, r30
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	4e 07       	cpc	r20, r30
    108a:	e0 e0       	ldi	r30, 0x00	; 0
    108c:	5e 07       	cpc	r21, r30
    108e:	0c f4       	brge	.+2      	; 0x1092 <main+0x310>
    1090:	cc c4       	rjmp	.+2456   	; 0x1a2a <main+0xca8>
    1092:	26 e6       	ldi	r18, 0x66	; 102
    1094:	32 e0       	ldi	r19, 0x02	; 2
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	20 93 87 03 	sts	0x0387, r18
    109e:	30 93 88 03 	sts	0x0388, r19
    10a2:	40 93 89 03 	sts	0x0389, r20
    10a6:	50 93 8a 03 	sts	0x038A, r21
    10aa:	bf c4       	rjmp	.+2430   	; 0x1a2a <main+0xca8>
void sendValues() {
	myTimeout = 1;
}

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    10ac:	66 b1       	in	r22, 0x06	; 6
    10ae:	46 b1       	in	r20, 0x06	; 6
    10b0:	86 b1       	in	r24, 0x06	; 6
    10b2:	26 b1       	in	r18, 0x06	; 6
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	88 70       	andi	r24, 0x08	; 8
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	95 95       	asr	r25
    10bc:	87 95       	ror	r24
    10be:	95 95       	asr	r25
    10c0:	87 95       	ror	r24
    10c2:	95 95       	asr	r25
    10c4:	87 95       	ror	r24
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	44 70       	andi	r20, 0x04	; 4
    10ce:	50 70       	andi	r21, 0x00	; 0
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	84 0f       	add	r24, r20
    10da:	95 1f       	adc	r25, r21
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	22 70       	andi	r18, 0x02	; 2
    10e4:	30 70       	andi	r19, 0x00	; 0
    10e6:	35 95       	asr	r19
    10e8:	27 95       	ror	r18
    10ea:	82 0f       	add	r24, r18
    10ec:	93 1f       	adc	r25, r19
    10ee:	88 0f       	add	r24, r24
    10f0:	61 70       	andi	r22, 0x01	; 1
    10f2:	86 0f       	add	r24, r22
				pwm_left_working = pwm_left_desired;	
				start_control = 0;
				update_pwm = 1;
			}

		} else if(getSelector() == 2) {		// speed control
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	19 f0       	breq	.+6      	; 0x10fe <main+0x37c>

			if(start_control && left_vel_changed && right_vel_changed) {
    10f8:	20 91 bc 03 	lds	r18, 0x03BC
    10fc:	2f cf       	rjmp	.-418    	; 0xf5c <main+0x1da>
    10fe:	80 91 b1 03 	lds	r24, 0x03B1
    1102:	88 23       	and	r24, r24
    1104:	c9 f3       	breq	.-14     	; 0x10f8 <main+0x376>
    1106:	80 91 b2 03 	lds	r24, 0x03B2
    110a:	88 23       	and	r24, r24
    110c:	a9 f3       	breq	.-22     	; 0x10f8 <main+0x376>
    110e:	80 91 b3 03 	lds	r24, 0x03B3
    1112:	88 23       	and	r24, r24
    1114:	89 f3       	breq	.-30     	; 0x10f8 <main+0x376>
				pwm_right_working = pwm_right_desired;
    1116:	80 91 87 03 	lds	r24, 0x0387
    111a:	90 91 88 03 	lds	r25, 0x0388
    111e:	a0 91 89 03 	lds	r26, 0x0389
    1122:	b0 91 8a 03 	lds	r27, 0x038A
    1126:	80 93 b4 03 	sts	0x03B4, r24
    112a:	90 93 b5 03 	sts	0x03B5, r25
    112e:	a0 93 b6 03 	sts	0x03B6, r26
    1132:	b0 93 b7 03 	sts	0x03B7, r27
				pwm_left_working = pwm_left_desired;
    1136:	80 91 8b 03 	lds	r24, 0x038B
    113a:	90 91 8c 03 	lds	r25, 0x038C
    113e:	a0 91 8d 03 	lds	r26, 0x038D
    1142:	b0 91 8e 03 	lds	r27, 0x038E
    1146:	80 93 b8 03 	sts	0x03B8, r24
    114a:	90 93 b9 03 	sts	0x03B9, r25
    114e:	a0 93 ba 03 	sts	0x03BA, r26
    1152:	b0 93 bb 03 	sts	0x03BB, r27
				start_control = 0;
    1156:	10 92 b1 03 	sts	0x03B1, r1
				left_vel_changed = 0;
    115a:	10 92 b2 03 	sts	0x03B2, r1
				right_vel_changed = 0;
    115e:	10 92 b3 03 	sts	0x03B3, r1
				//angle_changed = 0;
				//if(!orizzontal_position) {
				//	start_vertical_speed_control(&pwm_left_working, &pwm_right_working);
				//} else {
					PORTB &= ~(1 << 5);
    1162:	2d 98       	cbi	0x05, 5	; 5
					start_orizzontal_speed_control(&pwm_left_working, &pwm_right_working);
    1164:	88 eb       	ldi	r24, 0xB8	; 184
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	64 eb       	ldi	r22, 0xB4	; 180
    116a:	73 e0       	ldi	r23, 0x03	; 3
    116c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <start_orizzontal_speed_control>
					PORTB |= (1 << 5);
    1170:	2d 9a       	sbi	0x05, 5	; 5
				//start_power_control(&pwm_left_working, &pwm_right_working);		// the values for the new pwm must be current limited by the controller just before update them
				
				//pwm_right_working = pwm_right_desired;
				//pwm_left_working = pwm_left_desired;				
				
				update_pwm = 1;		
    1172:	10 93 bc 03 	sts	0x03BC, r17
    1176:	21 e0       	ldi	r18, 0x01	; 1
    1178:	f1 ce       	rjmp	.-542    	; 0xf5c <main+0x1da>

		//if(!rx_fifo_is_empty()) {
		if(mirf_data_ready()) {

			// clear irq status
			mirf_config_register(STATUS, 0x70);
    117a:	87 e0       	ldi	r24, 0x07	; 7
    117c:	60 e7       	ldi	r22, 0x70	; 112
    117e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <mirf_config_register>

			mirf_get_data(rfData);
    1182:	80 ef       	ldi	r24, 0xF0	; 240
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <mirf_get_data>
			flush_rx_fifo();
    118a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <flush_rx_fifo>
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && (rfData[3]==0b00001000 || rfData[3]==0b00011000) && rfData[4]==0 && rfData[5]==0) {
				//sleep(ALARM_PAUSE_1_MIN);
			}

			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    118e:	30 91 f4 03 	lds	r19, 0x03F4
    1192:	23 2f       	mov	r18, r19
    1194:	2f 77       	andi	r18, 0x7F	; 127
    1196:	20 93 be 03 	sts	0x03BE, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    119a:	90 91 f5 03 	lds	r25, 0x03F5
    119e:	89 2f       	mov	r24, r25
    11a0:	8f 77       	andi	r24, 0x7F	; 127
    11a2:	80 93 bd 03 	sts	0x03BD, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    11a6:	37 fd       	sbrc	r19, 7
    11a8:	3e c3       	rjmp	.+1660   	; 0x1826 <main+0xaa4>
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	30 95       	com	r19
    11b6:	21 95       	neg	r18
    11b8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ba:	44 27       	eor	r20, r20
    11bc:	37 fd       	sbrc	r19, 7
    11be:	40 95       	com	r20
    11c0:	54 2f       	mov	r21, r20
    11c2:	20 93 87 03 	sts	0x0387, r18
    11c6:	30 93 88 03 	sts	0x0388, r19
    11ca:	40 93 89 03 	sts	0x0389, r20
    11ce:	50 93 8a 03 	sts	0x038A, r21
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    11d2:	97 fd       	sbrc	r25, 7
    11d4:	16 c3       	rjmp	.+1580   	; 0x1802 <main+0xa80>
				pwm_left_desired = speedl<<2;		
			} else {								// backward
				pwm_left_desired = -(speedl<<2);
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	90 95       	com	r25
    11e2:	81 95       	neg	r24
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	aa 27       	eor	r26, r26
    11e8:	97 fd       	sbrc	r25, 7
    11ea:	a0 95       	com	r26
    11ec:	ba 2f       	mov	r27, r26
    11ee:	80 93 8b 03 	sts	0x038B, r24
    11f2:	90 93 8c 03 	sts	0x038C, r25
    11f6:	a0 93 8d 03 	sts	0x038D, r26
    11fa:	b0 93 8e 03 	sts	0x038E, r27
			}
			
			if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    11fe:	24 33       	cpi	r18, 0x34	; 52
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	36 07       	cpc	r19, r22
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	46 07       	cpc	r20, r22
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	56 07       	cpc	r21, r22
    120c:	64 f0       	brlt	.+24     	; 0x1226 <main+0x4a4>
    120e:	20 92 87 03 	sts	0x0387, r2
    1212:	30 92 88 03 	sts	0x0388, r3
    1216:	40 92 89 03 	sts	0x0389, r4
    121a:	50 92 8a 03 	sts	0x038A, r5
    121e:	23 e3       	ldi	r18, 0x33	; 51
    1220:	31 e0       	ldi	r19, 0x01	; 1
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
            if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1226:	84 33       	cpi	r24, 0x34	; 52
    1228:	e1 e0       	ldi	r30, 0x01	; 1
    122a:	9e 07       	cpc	r25, r30
    122c:	e0 e0       	ldi	r30, 0x00	; 0
    122e:	ae 07       	cpc	r26, r30
    1230:	e0 e0       	ldi	r30, 0x00	; 0
    1232:	be 07       	cpc	r27, r30
    1234:	64 f0       	brlt	.+24     	; 0x124e <main+0x4cc>
    1236:	20 92 8b 03 	sts	0x038B, r2
    123a:	30 92 8c 03 	sts	0x038C, r3
    123e:	40 92 8d 03 	sts	0x038D, r4
    1242:	50 92 8e 03 	sts	0x038E, r5
    1246:	83 e3       	ldi	r24, 0x33	; 51
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	a0 e0       	ldi	r26, 0x00	; 0
    124c:	b0 e0       	ldi	r27, 0x00	; 0
            if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    124e:	2d 3c       	cpi	r18, 0xCD	; 205
    1250:	fe ef       	ldi	r31, 0xFE	; 254
    1252:	3f 07       	cpc	r19, r31
    1254:	ff ef       	ldi	r31, 0xFF	; 255
    1256:	4f 07       	cpc	r20, r31
    1258:	ff ef       	ldi	r31, 0xFF	; 255
    125a:	5f 07       	cpc	r21, r31
    125c:	44 f4       	brge	.+16     	; 0x126e <main+0x4ec>
    125e:	60 92 87 03 	sts	0x0387, r6
    1262:	70 92 88 03 	sts	0x0388, r7
    1266:	80 92 89 03 	sts	0x0389, r8
    126a:	90 92 8a 03 	sts	0x038A, r9
            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    126e:	8d 3c       	cpi	r24, 0xCD	; 205
    1270:	2e ef       	ldi	r18, 0xFE	; 254
    1272:	92 07       	cpc	r25, r18
    1274:	2f ef       	ldi	r18, 0xFF	; 255
    1276:	a2 07       	cpc	r26, r18
    1278:	2f ef       	ldi	r18, 0xFF	; 255
    127a:	b2 07       	cpc	r27, r18
    127c:	44 f4       	brge	.+16     	; 0x128e <main+0x50c>
    127e:	60 92 8b 03 	sts	0x038B, r6
    1282:	70 92 8c 03 	sts	0x038C, r7
    1286:	80 92 8d 03 	sts	0x038D, r8
    128a:	90 92 8e 03 	sts	0x038E, r9
		

			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    128e:	20 91 f0 03 	lds	r18, 0x03F0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	30 93 eb 03 	sts	0x03EB, r19
    1298:	20 93 ea 03 	sts	0x03EA, r18
    129c:	e0 91 f1 03 	lds	r30, 0x03F1
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	f0 93 ed 03 	sts	0x03ED, r31
    12a6:	e0 93 ec 03 	sts	0x03EC, r30
    12aa:	80 91 f2 03 	lds	r24, 0x03F2
    12ae:	e8 2e       	mov	r14, r24
    12b0:	ff 24       	eor	r15, r15
    12b2:	f0 92 ef 03 	sts	0x03EF, r15
    12b6:	e0 92 ee 03 	sts	0x03EE, r14
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    12ba:	92 2f       	mov	r25, r18
    12bc:	88 27       	eor	r24, r24
    12be:	82 1b       	sub	r24, r18
    12c0:	93 0b       	sbc	r25, r19
    12c2:	b5 01       	movw	r22, r10
    12c4:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    12c8:	26 2f       	mov	r18, r22
    12ca:	20 95       	com	r18
    12cc:	20 93 0b 02 	sts	0x020B, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    12d0:	9e 2f       	mov	r25, r30
    12d2:	88 27       	eor	r24, r24
    12d4:	8e 1b       	sub	r24, r30
    12d6:	9f 0b       	sbc	r25, r31
    12d8:	b5 01       	movw	r22, r10
    12da:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    12de:	60 95       	com	r22
    12e0:	60 93 0d 02 	sts	0x020D, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    12e4:	9e 2d       	mov	r25, r14
    12e6:	88 27       	eor	r24, r24
    12e8:	8e 19       	sub	r24, r14
    12ea:	9f 09       	sbc	r25, r15
    12ec:	b5 01       	movw	r22, r10
    12ee:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    12f2:	60 95       	com	r22
    12f4:	60 93 0c 02 	sts	0x020C, r22

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    12f8:	22 23       	and	r18, r18
    12fa:	09 f4       	brne	.+2      	; 0x12fe <main+0x57c>
    12fc:	7b c2       	rjmp	.+1270   	; 0x17f4 <main+0xa72>
		TCCR1A &= ~(1 << COM1A1);
		PORTB &= ~(1 << 5);
	} else {
		TCCR1A |= (1 << COM1A1);
    12fe:	80 91 80 00 	lds	r24, 0x0080
    1302:	80 68       	ori	r24, 0x80	; 128
    1304:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	30 93 89 00 	sts	0x0089, r19
    130e:	20 93 88 00 	sts	0x0088, r18
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
    1312:	80 91 0c 02 	lds	r24, 0x020C

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    1316:	88 23       	and	r24, r24
    1318:	09 f4       	brne	.+2      	; 0x131c <main+0x59a>
    131a:	65 c2       	rjmp	.+1226   	; 0x17e6 <main+0xa64>
		TCCR1A &= ~(1 << COM1B1);
		PORTB &= ~(1 << 6);
	} else {
		TCCR1A |= (1 << COM1B1);
    131c:	90 91 80 00 	lds	r25, 0x0080
    1320:	90 62       	ori	r25, 0x20	; 32
    1322:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 8b 00 	sts	0x008B, r25
    132c:	80 93 8a 00 	sts	0x008A, r24
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
			updateRedLed(pwm_red);	
			updateGreenLed(pwm_green);
			updateBlueLed(pwm_blue);
    1330:	80 91 0d 02 	lds	r24, 0x020D

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    1334:	88 23       	and	r24, r24
    1336:	09 f4       	brne	.+2      	; 0x133a <main+0x5b8>
    1338:	4f c2       	rjmp	.+1182   	; 0x17d8 <main+0xa56>
		TCCR1A &= ~(1 << COM1C1);
		PORTB &= ~(1 << 7);
	} else {
		TCCR1A |= (1 << COM1C1);
    133a:	90 91 80 00 	lds	r25, 0x0080
    133e:	98 60       	ori	r25, 0x08	; 8
    1340:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	90 93 8d 00 	sts	0x008D, r25
    134a:	80 93 8c 00 	sts	0x008C, r24

#ifdef BIDIRECTIONAL
			packetId = (packetId+1)%256;
			//writeAckPayload(&packetId, 1);
			for(i=0; i<12; i++) {
				ackPayload[i] = (proximityValue[(i*2)+1]>>2);
    134e:	80 91 31 03 	lds	r24, 0x0331
    1352:	90 91 32 03 	lds	r25, 0x0332
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	96 95       	lsr	r25
    135c:	87 95       	ror	r24
    135e:	80 93 da 03 	sts	0x03DA, r24
    1362:	80 91 35 03 	lds	r24, 0x0335
    1366:	90 91 36 03 	lds	r25, 0x0336
    136a:	96 95       	lsr	r25
    136c:	87 95       	ror	r24
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	80 93 db 03 	sts	0x03DB, r24
    1376:	80 91 39 03 	lds	r24, 0x0339
    137a:	90 91 3a 03 	lds	r25, 0x033A
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	96 95       	lsr	r25
    1384:	87 95       	ror	r24
    1386:	80 93 dc 03 	sts	0x03DC, r24
    138a:	80 91 3d 03 	lds	r24, 0x033D
    138e:	90 91 3e 03 	lds	r25, 0x033E
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	80 93 dd 03 	sts	0x03DD, r24
    139e:	80 91 41 03 	lds	r24, 0x0341
    13a2:	90 91 42 03 	lds	r25, 0x0342
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	80 93 de 03 	sts	0x03DE, r24
    13b2:	80 91 45 03 	lds	r24, 0x0345
    13b6:	90 91 46 03 	lds	r25, 0x0346
    13ba:	96 95       	lsr	r25
    13bc:	87 95       	ror	r24
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	80 93 df 03 	sts	0x03DF, r24
    13c6:	80 91 49 03 	lds	r24, 0x0349
    13ca:	90 91 4a 03 	lds	r25, 0x034A
    13ce:	96 95       	lsr	r25
    13d0:	87 95       	ror	r24
    13d2:	96 95       	lsr	r25
    13d4:	87 95       	ror	r24
    13d6:	80 93 e0 03 	sts	0x03E0, r24
    13da:	80 91 4d 03 	lds	r24, 0x034D
    13de:	90 91 4e 03 	lds	r25, 0x034E
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	80 93 e1 03 	sts	0x03E1, r24
    13ee:	80 91 51 03 	lds	r24, 0x0351
    13f2:	90 91 52 03 	lds	r25, 0x0352
    13f6:	96 95       	lsr	r25
    13f8:	87 95       	ror	r24
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	80 93 e2 03 	sts	0x03E2, r24
    1402:	80 91 55 03 	lds	r24, 0x0355
    1406:	90 91 56 03 	lds	r25, 0x0356
    140a:	96 95       	lsr	r25
    140c:	87 95       	ror	r24
    140e:	96 95       	lsr	r25
    1410:	87 95       	ror	r24
    1412:	80 93 e3 03 	sts	0x03E3, r24
    1416:	80 91 59 03 	lds	r24, 0x0359
    141a:	90 91 5a 03 	lds	r25, 0x035A
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	96 95       	lsr	r25
    1424:	87 95       	ror	r24
    1426:	80 93 e4 03 	sts	0x03E4, r24
    142a:	80 91 5d 03 	lds	r24, 0x035D
    142e:	90 91 5e 03 	lds	r25, 0x035E
    1432:	96 95       	lsr	r25
    1434:	87 95       	ror	r24
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	80 93 e5 03 	sts	0x03E5, r24
			}
			writeAckPayload(ackPayload, 16);
    143e:	8a ed       	ldi	r24, 0xDA	; 218
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	60 e1       	ldi	r22, 0x10	; 16
    1444:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <writeAckPayload>
    1448:	39 cd       	rjmp	.-1422   	; 0xebc <main+0x13a>

		//if(sendAdcValues && myTimeout) {
		//if(sendAdcValues) {
		if(myTimeout) {
			
			sendAdcValues = 0;
    144a:	10 92 c0 03 	sts	0x03C0, r1
			myTimeout = 0;
    144e:	10 92 d8 03 	sts	0x03D8, r1

			//PORTB &= ~(1 << 6);
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
    1452:	8a ea       	ldi	r24, 0xAA	; 170
    1454:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(0xAA);
    1458:	8a ea       	ldi	r24, 0xAA	; 170
    145a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			for(i=0; i<24; i++) {
    145e:	ee 24       	eor	r14, r14
    1460:	ff 24       	eor	r15, r15
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
    1462:	67 01       	movw	r12, r14
    1464:	cc 0c       	add	r12, r12
    1466:	dd 1c       	adc	r13, r13
    1468:	4f e2       	ldi	r20, 0x2F	; 47
    146a:	53 e0       	ldi	r21, 0x03	; 3
    146c:	c4 0e       	add	r12, r20
    146e:	d5 1e       	adc	r13, r21
    1470:	d6 01       	movw	r26, r12
    1472:	8d 91       	ld	r24, X+
    1474:	9c 91       	ld	r25, X
    1476:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
				usartTransmit((unsigned char)(proximityValue[i]>>8));
    147a:	f6 01       	movw	r30, r12
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	89 2f       	mov	r24, r25
    1482:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			//last_left_vel_sum = (unsigned int)(last_left_vel_sum/last_num_lvel_samples_avg);
			//PORTB |= (1 << 6);

			usartTransmit(0xAA);
			usartTransmit(0xAA);
			for(i=0; i<24; i++) {
    1486:	08 94       	sec
    1488:	e1 1c       	adc	r14, r1
    148a:	f1 1c       	adc	r15, r1
    148c:	f8 e1       	ldi	r31, 0x18	; 24
    148e:	ef 16       	cp	r14, r31
    1490:	f1 04       	cpc	r15, r1
    1492:	39 f7       	brne	.-50     	; 0x1462 <main+0x6e0>
				usartTransmit((unsigned char)(proximityValue[i]&0xFF));
				usartTransmit((unsigned char)(proximityValue[i]>>8));
			}
			//usartTransmit(getselector());
			//usartTransmit(getselector());
			usartTransmit(last_right_current&0xFF);
    1494:	80 91 69 03 	lds	r24, 0x0369
    1498:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(last_right_current>>8);
    149c:	80 91 6a 03 	lds	r24, 0x036A
    14a0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(last_left_current&0xFF);
    14a4:	80 91 67 03 	lds	r24, 0x0367
    14a8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(last_left_current>>8);
    14ac:	80 91 68 03 	lds	r24, 0x0368
    14b0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			

			// two possible cases cause the number of samples to be zero:
			// - when the pwm is at its maximum (thus no passive phase)
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
    14b4:	80 91 71 03 	lds	r24, 0x0371
    14b8:	90 91 72 03 	lds	r25, 0x0372
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	09 f4       	brne	.+2      	; 0x14c2 <main+0x740>
    14c0:	74 c1       	rjmp	.+744    	; 0x17aa <main+0xa28>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
    14c2:	80 91 79 03 	lds	r24, 0x0379
    14c6:	90 91 7a 03 	lds	r25, 0x037A
    14ca:	60 91 71 03 	lds	r22, 0x0371
    14ce:	70 91 72 03 	lds	r23, 0x0372
    14d2:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    14d6:	86 2f       	mov	r24, r22
    14d8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
    14dc:	80 91 79 03 	lds	r24, 0x0379
    14e0:	90 91 7a 03 	lds	r25, 0x037A
    14e4:	60 91 71 03 	lds	r22, 0x0371
    14e8:	70 91 72 03 	lds	r23, 0x0372
    14ec:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    14f0:	87 2f       	mov	r24, r23
    14f2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			//usartTransmit((unsigned char)(last_num_rvel_samples_avg>>8));

			//usartTransmit((unsigned char)(last_num_lvel_samples_avg&0xFF));
			//usartTransmit((unsigned char)(last_num_lvel_samples_avg>>8));
						
			if(last_num_lvel_samples_avg != 0) {
    14f6:	80 91 6d 03 	lds	r24, 0x036D
    14fa:	90 91 6e 03 	lds	r25, 0x036E
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	09 f4       	brne	.+2      	; 0x1504 <main+0x782>
    1502:	4c c1       	rjmp	.+664    	; 0x179c <main+0xa1a>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
    1504:	80 91 75 03 	lds	r24, 0x0375
    1508:	90 91 76 03 	lds	r25, 0x0376
    150c:	60 91 6d 03 	lds	r22, 0x036D
    1510:	70 91 6e 03 	lds	r23, 0x036E
    1514:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    1518:	86 2f       	mov	r24, r22
    151a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
    151e:	80 91 75 03 	lds	r24, 0x0375
    1522:	90 91 76 03 	lds	r25, 0x0376
    1526:	60 91 6d 03 	lds	r22, 0x036D
    152a:	70 91 6e 03 	lds	r23, 0x036E
    152e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    1532:	87 2f       	mov	r24, r23
    1534:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
    1538:	80 91 10 02 	lds	r24, 0x0210
    153c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
	i2c_write(0x32);							// sends address to read from
    1540:	82 e3       	ldi	r24, 0x32	; 50
    1542:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
    1546:	80 91 10 02 	lds	r24, 0x0210
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <i2c_rep_start>

	for(i=0; i<5; i++) {
		buff[i] = i2c_readAck();				// read one byte
    1550:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    1554:	d8 2e       	mov	r13, r24
    1556:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    155a:	8b 87       	std	Y+11, r24	; 0x0b
    155c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    1560:	f8 2e       	mov	r15, r24
    1562:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    1566:	e8 2e       	mov	r14, r24
    1568:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    156c:	08 2f       	mov	r16, r24
	}
	buff[i] = i2c_readNak();					// read last byte
    156e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <i2c_readNak>
    1572:	c8 2e       	mov	r12, r24
	i2c_stop();									// set stop conditon = release bus
    1574:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // Y axis
    1578:	9b 85       	ldd	r25, Y+11	; 0x0b
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	2d 2d       	mov	r18, r13
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	49 81       	ldd	r20, Y+1	; 0x01
    1584:	5a 81       	ldd	r21, Y+2	; 0x02
    1586:	24 2b       	or	r18, r20
    1588:	35 2b       	or	r19, r21
    158a:	30 93 c5 03 	sts	0x03C5, r19
    158e:	20 93 c4 03 	sts	0x03C4, r18
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
    1592:	ec 82       	std	Y+4, r14	; 0x04
    1594:	1b 82       	std	Y+3, r1	; 0x03
    1596:	4f 2d       	mov	r20, r15
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	48 2b       	or	r20, r24
    15a0:	59 2b       	or	r21, r25
    15a2:	50 93 c7 03 	sts	0x03C7, r21
    15a6:	40 93 c6 03 	sts	0x03C6, r20
	accZ = (((int)buff[5]) << 8) | buff[4];    // Z axis
    15aa:	ce 82       	std	Y+6, r12	; 0x06
    15ac:	1d 82       	std	Y+5, r1	; 0x05
    15ae:	80 2f       	mov	r24, r16
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	ad 81       	ldd	r26, Y+5	; 0x05
    15b4:	be 81       	ldd	r27, Y+6	; 0x06
    15b6:	8a 2b       	or	r24, r26
    15b8:	9b 2b       	or	r25, r27
    15ba:	90 93 c9 03 	sts	0x03C9, r25
    15be:	80 93 c8 03 	sts	0x03C8, r24
				//usartTransmit((unsigned char)((0)&0xFF));
				//usartTransmit((unsigned char)((0)>>8));
			}
			
			readAccelXYZ();
			usartTransmit(accX&0xFF);
    15c2:	82 2f       	mov	r24, r18
    15c4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(accX>>8);
    15c8:	80 91 c5 03 	lds	r24, 0x03C5
    15cc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(accY&0xFF);
    15d0:	80 91 c6 03 	lds	r24, 0x03C6
    15d4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(accY>>8);
    15d8:	80 91 c7 03 	lds	r24, 0x03C7
    15dc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(accZ&0xFF);
    15e0:	80 91 c8 03 	lds	r24, 0x03C8
    15e4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(accZ>>8);	
    15e8:	80 91 c9 03 	lds	r24, 0x03C9
    15ec:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			PORTB &= ~(1 << 6);
    15f0:	2e 98       	cbi	0x05, 6	; 5


#ifdef ACC_ADXL345

	//i2c_start_wait(accelAddress+I2C_WRITE);		// set device address and write mode
	i2c_start(accelAddress+I2C_WRITE);	
    15f2:	80 91 10 02 	lds	r24, 0x0210
    15f6:	0e 94 14 15 	call	0x2a28	; 0x2a28 <i2c_start>
	i2c_write(0x32);							// sends address to read from
    15fa:	82 e3       	ldi	r24, 0x32	; 50
    15fc:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <i2c_write>
	i2c_rep_start(accelAddress+I2C_READ);		// set device address and read mode
    1600:	80 91 10 02 	lds	r24, 0x0210
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <i2c_rep_start>

	for(i=0; i<3; i++) {
		buff[i] = i2c_readAck();				// read one byte
    160a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    160e:	f8 2e       	mov	r15, r24
    1610:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    1614:	d8 2e       	mov	r13, r24
    1616:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <i2c_readAck>
    161a:	08 2f       	mov	r16, r24
	}
	buff[i] = i2c_readNak();					// read last byte
    161c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <i2c_readNak>
    1620:	e8 2e       	mov	r14, r24
	i2c_stop();									// set stop conditon = release bus
    1622:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <i2c_stop>

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
    1626:	d8 86       	std	Y+8, r13	; 0x08
    1628:	1f 82       	std	Y+7, r1	; 0x07
    162a:	6f 2d       	mov	r22, r15
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	ef 81       	ldd	r30, Y+7	; 0x07
    1630:	f8 85       	ldd	r31, Y+8	; 0x08
    1632:	6e 2b       	or	r22, r30
    1634:	7f 2b       	or	r23, r31

void computeAngle() {

	readAccelXY();

	accX = accX-accOffsetX;
    1636:	20 91 d0 03 	lds	r18, 0x03D0
    163a:	30 91 d1 03 	lds	r19, 0x03D1
    163e:	62 1b       	sub	r22, r18
    1640:	73 0b       	sbc	r23, r19
    1642:	70 93 c5 03 	sts	0x03C5, r23
    1646:	60 93 c4 03 	sts	0x03C4, r22
	}
	buff[i] = i2c_readNak();					// read last byte
	i2c_stop();									// set stop conditon = release bus

	accX = (((int)buff[1]) << 8) | buff[0];    // X axis
	accY = (((int)buff[3]) << 8) | buff[2];    // Y axis
    164a:	ea 86       	std	Y+10, r14	; 0x0a
    164c:	19 86       	std	Y+9, r1	; 0x09
    164e:	20 2f       	mov	r18, r16
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	49 85       	ldd	r20, Y+9	; 0x09
    1654:	5a 85       	ldd	r21, Y+10	; 0x0a
    1656:	24 2b       	or	r18, r20
    1658:	35 2b       	or	r19, r21
void computeAngle() {

	readAccelXY();

	accX = accX-accOffsetX;
	accY = accY-accOffsetY;
    165a:	80 91 d2 03 	lds	r24, 0x03D2
    165e:	90 91 d3 03 	lds	r25, 0x03D3
    1662:	28 1b       	sub	r18, r24
    1664:	39 0b       	sbc	r19, r25
    1666:	30 93 c7 03 	sts	0x03C7, r19
    166a:	20 93 c6 03 	sts	0x03C6, r18
	}

	prev_position = curr_position;	
*/

	currentAngle = (signed int)(atan2f((float)accX, (float)accY)*RAD_2_DEG);	//180.0/PI;	//x/y
    166e:	88 27       	eor	r24, r24
    1670:	77 fd       	sbrc	r23, 7
    1672:	80 95       	com	r24
    1674:	98 2f       	mov	r25, r24
    1676:	2b 87       	std	Y+11, r18	; 0x0b
    1678:	3c 87       	std	Y+12, r19	; 0x0c
    167a:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    167e:	6b 01       	movw	r12, r22
    1680:	7c 01       	movw	r14, r24
    1682:	2b 85       	ldd	r18, Y+11	; 0x0b
    1684:	3c 85       	ldd	r19, Y+12	; 0x0c
    1686:	b9 01       	movw	r22, r18
    1688:	88 27       	eor	r24, r24
    168a:	77 fd       	sbrc	r23, 7
    168c:	80 95       	com	r24
    168e:	98 2f       	mov	r25, r24
    1690:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
    1698:	c7 01       	movw	r24, r14
    169a:	b6 01       	movw	r22, r12
    169c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <atan2>
    16a0:	21 ee       	ldi	r18, 0xE1	; 225
    16a2:	3e e2       	ldi	r19, 0x2E	; 46
    16a4:	45 e6       	ldi	r20, 0x65	; 101
    16a6:	52 e4       	ldi	r21, 0x42	; 66
    16a8:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3>
    16ac:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__fixsfsi>
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	30 93 d7 03 	sts	0x03D7, r19
    16ba:	20 93 d6 03 	sts	0x03D6, r18

	//current_angle = current_angle*RAD_2_DEG;
	if(currentAngle<0) {
    16be:	77 ff       	sbrs	r23, 7
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <main+0x94c>
		currentAngle = 360+currentAngle;	// angles from 0 to 360
    16c2:	88 59       	subi	r24, 0x98	; 152
    16c4:	9e 4f       	sbci	r25, 0xFE	; 254
    16c6:	90 93 d7 03 	sts	0x03D7, r25
    16ca:	80 93 d6 03 	sts	0x03D6, r24
			usartTransmit(accY>>8);
			usartTransmit(accZ&0xFF);
			usartTransmit(accZ>>8);	
			PORTB &= ~(1 << 6);
			computeAngle();
			PORTB |= (1 << 6);
    16ce:	2e 9a       	sbi	0x05, 6	; 5
			usartTransmit(currentAngle&0xFF);
    16d0:	80 91 d6 03 	lds	r24, 0x03D6
    16d4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
			usartTransmit(currentAngle>>8);												
    16d8:	80 91 d7 03 	lds	r24, 0x03D7
    16dc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
    16e0:	e8 cb       	rjmp	.-2096   	; 0xeb2 <main+0x130>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    16e2:	87 30       	cpi	r24, 0x07	; 7
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <main+0x966>
    16e6:	c8 c1       	rjmp	.+912    	; 0x1a78 <main+0xcf6>
    16e8:	88 30       	cpi	r24, 0x08	; 8
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <main+0x96c>
    16ec:	ae c0       	rjmp	.+348    	; 0x184a <main+0xac8>
    16ee:	85 30       	cpi	r24, 0x05	; 5
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <main+0x972>
    16f2:	b1 c1       	rjmp	.+866    	; 0x1a56 <main+0xcd4>
    16f4:	86 30       	cpi	r24, 0x06	; 6
    16f6:	09 f0       	breq	.+2      	; 0x16fa <main+0x978>
    16f8:	d7 cb       	rjmp	.-2130   	; 0xea8 <main+0x126>
	                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    	            if (pwm_left_desired < -MAX_MOTORS_PWM) pwm_left_desired = -MAX_MOTORS_PWM;
                  	break;

				case 6:	// both motors right
					pwm_right_desired -= STEP_MOTORS;
    16fa:	20 91 87 03 	lds	r18, 0x0387
    16fe:	30 91 88 03 	lds	r19, 0x0388
    1702:	40 91 89 03 	lds	r20, 0x0389
    1706:	50 91 8a 03 	lds	r21, 0x038A
    170a:	2e 51       	subi	r18, 0x1E	; 30
    170c:	30 40       	sbci	r19, 0x00	; 0
    170e:	40 40       	sbci	r20, 0x00	; 0
    1710:	50 40       	sbci	r21, 0x00	; 0
    1712:	20 93 87 03 	sts	0x0387, r18
    1716:	30 93 88 03 	sts	0x0388, r19
    171a:	40 93 89 03 	sts	0x0389, r20
    171e:	50 93 8a 03 	sts	0x038A, r21
					pwm_left_desired += STEP_MOTORS;
    1722:	80 91 8b 03 	lds	r24, 0x038B
    1726:	90 91 8c 03 	lds	r25, 0x038C
    172a:	a0 91 8d 03 	lds	r26, 0x038D
    172e:	b0 91 8e 03 	lds	r27, 0x038E
    1732:	4e 96       	adiw	r24, 0x1e	; 30
    1734:	a1 1d       	adc	r26, r1
    1736:	b1 1d       	adc	r27, r1
    1738:	80 93 8b 03 	sts	0x038B, r24
    173c:	90 93 8c 03 	sts	0x038C, r25
    1740:	a0 93 8d 03 	sts	0x038D, r26
    1744:	b0 93 8e 03 	sts	0x038E, r27
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1748:	2a 39       	cpi	r18, 0x9A	; 154
    174a:	ed ef       	ldi	r30, 0xFD	; 253
    174c:	3e 07       	cpc	r19, r30
    174e:	ef ef       	ldi	r30, 0xFF	; 255
    1750:	4e 07       	cpc	r20, r30
    1752:	ef ef       	ldi	r30, 0xFF	; 255
    1754:	5e 07       	cpc	r21, r30
    1756:	64 f4       	brge	.+24     	; 0x1770 <main+0x9ee>
    1758:	2a e9       	ldi	r18, 0x9A	; 154
    175a:	3d ef       	ldi	r19, 0xFD	; 253
    175c:	4f ef       	ldi	r20, 0xFF	; 255
    175e:	5f ef       	ldi	r21, 0xFF	; 255
    1760:	20 93 87 03 	sts	0x0387, r18
    1764:	30 93 88 03 	sts	0x0388, r19
    1768:	40 93 89 03 	sts	0x0389, r20
    176c:	50 93 8a 03 	sts	0x038A, r21
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    1770:	87 36       	cpi	r24, 0x67	; 103
    1772:	32 e0       	ldi	r19, 0x02	; 2
    1774:	93 07       	cpc	r25, r19
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	a3 07       	cpc	r26, r19
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	b3 07       	cpc	r27, r19
    177e:	0c f4       	brge	.+2      	; 0x1782 <main+0xa00>
    1780:	93 cb       	rjmp	.-2266   	; 0xea8 <main+0x126>
    1782:	86 e6       	ldi	r24, 0x66	; 102
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	80 93 8b 03 	sts	0x038B, r24
    178e:	90 93 8c 03 	sts	0x038C, r25
    1792:	a0 93 8d 03 	sts	0x038D, r26
    1796:	b0 93 8e 03 	sts	0x038E, r27
    179a:	86 cb       	rjmp	.-2292   	; 0xea8 <main+0x126>
						
			if(last_num_lvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_left_vel_sum/last_num_lvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));
    17a2:	83 e0       	ldi	r24, 0x03	; 3
    17a4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
    17a8:	c7 ce       	rjmp	.-626    	; 0x1538 <main+0x7b6>
			// - a missing output compare match interrupt that indicates the start of the passive phase
			if(last_num_rvel_samples_avg != 0) {
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)&0xFF));
				usartTransmit((unsigned char)((last_right_vel_sum/last_num_rvel_samples_avg)>>8));
			} else {
				usartTransmit((unsigned char)((1023)&0xFF));	// probably we don't use the pwm to its maximum, so
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
				usartTransmit((unsigned char)((1023)>>8));	// if the number of samples is 0 it means that the 
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <usartTransmit>
    17b6:	9f ce       	rjmp	.-706    	; 0x14f6 <main+0x774>
				OCR3B = (int)(-pwm_right);
			}
			if(pwm_left >= 0) {
				OCR4A = pwm_left;
			} else {
				OCR4B = -pwm_left;
    17b8:	30 95       	com	r19
    17ba:	21 95       	neg	r18
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	30 93 ab 00 	sts	0x00AB, r19
    17c2:	20 93 aa 00 	sts	0x00AA, r18
    17c6:	1c cb       	rjmp	.-2504   	; 0xe00 <main+0x7e>
			pwm_right = pwm_right_working;

			if(pwm_right >= 0) {
				OCR3A = (int)pwm_right;
			} else {
				OCR3B = (int)(-pwm_right);
    17c8:	90 95       	com	r25
    17ca:	81 95       	neg	r24
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	90 93 9b 00 	sts	0x009B, r25
    17d2:	80 93 9a 00 	sts	0x009A, r24
    17d6:	19 cc       	rjmp	.-1998   	; 0x100a <main+0x288>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    17d8:	80 91 80 00 	lds	r24, 0x0080
    17dc:	87 7f       	andi	r24, 0xF7	; 247
    17de:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    17e2:	2f 98       	cbi	0x05, 7	; 5
    17e4:	b4 cd       	rjmp	.-1176   	; 0x134e <main+0x5cc>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    17e6:	80 91 80 00 	lds	r24, 0x0080
    17ea:	8f 7d       	andi	r24, 0xDF	; 223
    17ec:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    17f0:	2e 98       	cbi	0x05, 6	; 5
    17f2:	9e cd       	rjmp	.-1220   	; 0x1330 <main+0x5ae>
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    17f4:	80 91 80 00 	lds	r24, 0x0080
    17f8:	8f 77       	andi	r24, 0x7F	; 127
    17fa:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    17fe:	2d 98       	cbi	0x05, 5	; 5
    1800:	88 cd       	rjmp	.-1264   	; 0x1312 <main+0x590>
			} else {								// backward
				pwm_right_desired = -(speedr<<2);
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
				pwm_left_desired = speedl<<2;		
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	aa 27       	eor	r26, r26
    180e:	97 fd       	sbrc	r25, 7
    1810:	a0 95       	com	r26
    1812:	ba 2f       	mov	r27, r26
    1814:	80 93 8b 03 	sts	0x038B, r24
    1818:	90 93 8c 03 	sts	0x038C, r25
    181c:	a0 93 8d 03 	sts	0x038D, r26
    1820:	b0 93 8e 03 	sts	0x038E, r27
    1824:	ec cc       	rjmp	.-1576   	; 0x11fe <main+0x47c>
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
				pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 27       	eor	r20, r20
    1832:	37 fd       	sbrc	r19, 7
    1834:	40 95       	com	r20
    1836:	54 2f       	mov	r21, r20
    1838:	20 93 87 03 	sts	0x0387, r18
    183c:	30 93 88 03 	sts	0x0388, r19
    1840:	40 93 89 03 	sts	0x0389, r20
    1844:	50 93 8a 03 	sts	0x038A, r21
    1848:	c4 cc       	rjmp	.-1656   	; 0x11d2 <main+0x450>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    184a:	88 30       	cpi	r24, 0x08	; 8
    184c:	09 f4       	brne	.+2      	; 0x1850 <main+0xace>
    184e:	a7 c0       	rjmp	.+334    	; 0x199e <main+0xc1c>
    1850:	89 30       	cpi	r24, 0x09	; 9
    1852:	09 f0       	breq	.+2      	; 0x1856 <main+0xad4>
    1854:	29 cb       	rjmp	.-2478   	; 0xea8 <main+0x126>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1856:	80 91 8b 03 	lds	r24, 0x038B
    185a:	90 91 8c 03 	lds	r25, 0x038C
    185e:	a0 91 8d 03 	lds	r26, 0x038D
    1862:	b0 91 8e 03 	lds	r27, 0x038E
    1866:	4e 97       	sbiw	r24, 0x1e	; 30
    1868:	a1 09       	sbc	r26, r1
    186a:	b1 09       	sbc	r27, r1
    186c:	80 93 8b 03 	sts	0x038B, r24
    1870:	90 93 8c 03 	sts	0x038C, r25
    1874:	a0 93 8d 03 	sts	0x038D, r26
    1878:	b0 93 8e 03 	sts	0x038E, r27
            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    187c:	8a 39       	cpi	r24, 0x9A	; 154
    187e:	ed ef       	ldi	r30, 0xFD	; 253
    1880:	9e 07       	cpc	r25, r30
    1882:	ef ef       	ldi	r30, 0xFF	; 255
    1884:	ae 07       	cpc	r26, r30
    1886:	ef ef       	ldi	r30, 0xFF	; 255
    1888:	be 07       	cpc	r27, r30
    188a:	0c f0       	brlt	.+2      	; 0x188e <main+0xb0c>
    188c:	0d cb       	rjmp	.-2534   	; 0xea8 <main+0x126>
    188e:	2a e9       	ldi	r18, 0x9A	; 154
    1890:	3d ef       	ldi	r19, 0xFD	; 253
    1892:	4f ef       	ldi	r20, 0xFF	; 255
    1894:	5f ef       	ldi	r21, 0xFF	; 255
    1896:	20 93 8b 03 	sts	0x038B, r18
    189a:	30 93 8c 03 	sts	0x038C, r19
    189e:	40 93 8d 03 	sts	0x038D, r20
    18a2:	50 93 8e 03 	sts	0x038E, r21
    18a6:	00 cb       	rjmp	.-2560   	; 0xea8 <main+0x126>

			command_received = 0;

			//usartTransmit(ir_move);

			switch(ir_move) {
    18a8:	82 30       	cpi	r24, 0x02	; 2
    18aa:	61 f1       	breq	.+88     	; 0x1904 <main+0xb82>
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <main+0xb30>
    18b0:	fb ca       	rjmp	.-2570   	; 0xea8 <main+0x126>
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    18b2:	80 91 8b 03 	lds	r24, 0x038B
    18b6:	90 91 8c 03 	lds	r25, 0x038C
    18ba:	a0 91 8d 03 	lds	r26, 0x038D
    18be:	b0 91 8e 03 	lds	r27, 0x038E
    18c2:	4e 96       	adiw	r24, 0x1e	; 30
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	80 93 8b 03 	sts	0x038B, r24
    18cc:	90 93 8c 03 	sts	0x038C, r25
    18d0:	a0 93 8d 03 	sts	0x038D, r26
    18d4:	b0 93 8e 03 	sts	0x038E, r27
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
    18d8:	87 36       	cpi	r24, 0x67	; 103
    18da:	e2 e0       	ldi	r30, 0x02	; 2
    18dc:	9e 07       	cpc	r25, r30
    18de:	e0 e0       	ldi	r30, 0x00	; 0
    18e0:	ae 07       	cpc	r26, r30
    18e2:	e0 e0       	ldi	r30, 0x00	; 0
    18e4:	be 07       	cpc	r27, r30
    18e6:	0c f4       	brge	.+2      	; 0x18ea <main+0xb68>
    18e8:	df ca       	rjmp	.-2626   	; 0xea8 <main+0x126>
    18ea:	26 e6       	ldi	r18, 0x66	; 102
    18ec:	32 e0       	ldi	r19, 0x02	; 2
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	20 93 8b 03 	sts	0x038B, r18
    18f6:	30 93 8c 03 	sts	0x038C, r19
    18fa:	40 93 8d 03 	sts	0x038D, r20
    18fe:	50 93 8e 03 	sts	0x038E, r21
    1902:	d2 ca       	rjmp	.-2652   	; 0xea8 <main+0x126>
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
					if(pwm_right_desired > pwm_left_desired) {
    1904:	80 91 87 03 	lds	r24, 0x0387
    1908:	90 91 88 03 	lds	r25, 0x0388
    190c:	a0 91 89 03 	lds	r26, 0x0389
    1910:	b0 91 8a 03 	lds	r27, 0x038A
    1914:	20 91 8b 03 	lds	r18, 0x038B
    1918:	30 91 8c 03 	lds	r19, 0x038C
    191c:	40 91 8d 03 	lds	r20, 0x038D
    1920:	50 91 8e 03 	lds	r21, 0x038E
    1924:	28 17       	cp	r18, r24
    1926:	39 07       	cpc	r19, r25
    1928:	4a 07       	cpc	r20, r26
    192a:	5b 07       	cpc	r21, r27
    192c:	0c f4       	brge	.+2      	; 0x1930 <main+0xbae>
    192e:	f6 c0       	rjmp	.+492    	; 0x1b1c <main+0xd9a>
    1930:	da 01       	movw	r26, r20
    1932:	c9 01       	movw	r24, r18
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1934:	0e e1       	ldi	r16, 0x1E	; 30
    1936:	c0 2e       	mov	r12, r16
    1938:	d1 2c       	mov	r13, r1
    193a:	e1 2c       	mov	r14, r1
    193c:	f1 2c       	mov	r15, r1
    193e:	c8 0e       	add	r12, r24
    1940:	d9 1e       	adc	r13, r25
    1942:	ea 1e       	adc	r14, r26
    1944:	fb 1e       	adc	r15, r27
    1946:	c0 92 87 03 	sts	0x0387, r12
    194a:	d0 92 88 03 	sts	0x0388, r13
    194e:	e0 92 89 03 	sts	0x0389, r14
    1952:	f0 92 8a 03 	sts	0x038A, r15
					pwm_left_desired += STEP_MOTORS;
    1956:	da 01       	movw	r26, r20
    1958:	c9 01       	movw	r24, r18
    195a:	4e 96       	adiw	r24, 0x1e	; 30
    195c:	a1 1d       	adc	r26, r1
    195e:	b1 1d       	adc	r27, r1
    1960:	80 93 8b 03 	sts	0x038B, r24
    1964:	90 93 8c 03 	sts	0x038C, r25
    1968:	a0 93 8d 03 	sts	0x038D, r26
    196c:	b0 93 8e 03 	sts	0x038E, r27
	                if (pwm_right_desired > MAX_MOTORS_PWM) pwm_right_desired = MAX_MOTORS_PWM;
    1970:	27 e6       	ldi	r18, 0x67	; 103
    1972:	c2 16       	cp	r12, r18
    1974:	22 e0       	ldi	r18, 0x02	; 2
    1976:	d2 06       	cpc	r13, r18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	e2 06       	cpc	r14, r18
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	f2 06       	cpc	r15, r18
    1980:	0c f4       	brge	.+2      	; 0x1984 <main+0xc02>
    1982:	f6 ce       	rjmp	.-532    	; 0x1770 <main+0x9ee>
    1984:	26 e6       	ldi	r18, 0x66	; 102
    1986:	32 e0       	ldi	r19, 0x02	; 2
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	20 93 87 03 	sts	0x0387, r18
    1990:	30 93 88 03 	sts	0x0388, r19
    1994:	40 93 89 03 	sts	0x0389, r20
    1998:	50 93 8a 03 	sts	0x038A, r21
    199c:	e9 ce       	rjmp	.-558    	; 0x1770 <main+0x9ee>
    	            if (pwm_left_desired > MAX_MOTORS_PWM) pwm_left_desired = MAX_MOTORS_PWM;
               		break;

				case 8:	// both motors backward
					if(pwm_right_desired < pwm_left) {
    199e:	20 91 87 03 	lds	r18, 0x0387
    19a2:	30 91 88 03 	lds	r19, 0x0388
    19a6:	40 91 89 03 	lds	r20, 0x0389
    19aa:	50 91 8a 03 	lds	r21, 0x038A
    19ae:	80 91 83 03 	lds	r24, 0x0383
    19b2:	90 91 84 03 	lds	r25, 0x0384
    19b6:	a0 91 85 03 	lds	r26, 0x0385
    19ba:	b0 91 86 03 	lds	r27, 0x0386
    19be:	28 17       	cp	r18, r24
    19c0:	39 07       	cpc	r19, r25
    19c2:	4a 07       	cpc	r20, r26
    19c4:	5b 07       	cpc	r21, r27
    19c6:	44 f0       	brlt	.+16     	; 0x19d8 <main+0xc56>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    19c8:	20 91 8b 03 	lds	r18, 0x038B
    19cc:	30 91 8c 03 	lds	r19, 0x038C
    19d0:	40 91 8d 03 	lds	r20, 0x038D
    19d4:	50 91 8e 03 	lds	r21, 0x038E
					}
					pwm_right_desired -= STEP_MOTORS;
    19d8:	da 01       	movw	r26, r20
    19da:	c9 01       	movw	r24, r18
    19dc:	4e 97       	sbiw	r24, 0x1e	; 30
    19de:	a1 09       	sbc	r26, r1
    19e0:	b1 09       	sbc	r27, r1
    19e2:	80 93 87 03 	sts	0x0387, r24
    19e6:	90 93 88 03 	sts	0x0388, r25
    19ea:	a0 93 89 03 	sts	0x0389, r26
    19ee:	b0 93 8a 03 	sts	0x038A, r27
					pwm_left_desired -= STEP_MOTORS;
    19f2:	80 93 8b 03 	sts	0x038B, r24
    19f6:	90 93 8c 03 	sts	0x038C, r25
    19fa:	a0 93 8d 03 	sts	0x038D, r26
    19fe:	b0 93 8e 03 	sts	0x038E, r27
	                if (pwm_right_desired < -MAX_MOTORS_PWM) pwm_right_desired = -MAX_MOTORS_PWM;
    1a02:	8a 39       	cpi	r24, 0x9A	; 154
    1a04:	ed ef       	ldi	r30, 0xFD	; 253
    1a06:	9e 07       	cpc	r25, r30
    1a08:	ef ef       	ldi	r30, 0xFF	; 255
    1a0a:	ae 07       	cpc	r26, r30
    1a0c:	ef ef       	ldi	r30, 0xFF	; 255
    1a0e:	be 07       	cpc	r27, r30
    1a10:	64 f4       	brge	.+24     	; 0x1a2a <main+0xca8>
    1a12:	2a e9       	ldi	r18, 0x9A	; 154
    1a14:	3d ef       	ldi	r19, 0xFD	; 253
    1a16:	4f ef       	ldi	r20, 0xFF	; 255
    1a18:	5f ef       	ldi	r21, 0xFF	; 255
    1a1a:	20 93 87 03 	sts	0x0387, r18
    1a1e:	30 93 88 03 	sts	0x0388, r19
    1a22:	40 93 89 03 	sts	0x0389, r20
    1a26:	50 93 8a 03 	sts	0x038A, r21

				case 4:	// both motors left
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    	            if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
    1a2a:	8a 39       	cpi	r24, 0x9A	; 154
    1a2c:	3d ef       	ldi	r19, 0xFD	; 253
    1a2e:	93 07       	cpc	r25, r19
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	a3 07       	cpc	r26, r19
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	b3 07       	cpc	r27, r19
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <main+0xcba>
    1a3a:	36 ca       	rjmp	.-2964   	; 0xea8 <main+0x126>
    1a3c:	8a e9       	ldi	r24, 0x9A	; 154
    1a3e:	9d ef       	ldi	r25, 0xFD	; 253
    1a40:	af ef       	ldi	r26, 0xFF	; 255
    1a42:	bf ef       	ldi	r27, 0xFF	; 255
    1a44:	80 93 8b 03 	sts	0x038B, r24
    1a48:	90 93 8c 03 	sts	0x038C, r25
    1a4c:	a0 93 8d 03 	sts	0x038D, r26
    1a50:	b0 93 8e 03 	sts	0x038E, r27
    1a54:	29 ca       	rjmp	.-2990   	; 0xea8 <main+0x126>
			//usartTransmit(ir_move);

			switch(ir_move) {

				case 5:	// stop motors
					pwm_right_desired = 0;
    1a56:	10 92 87 03 	sts	0x0387, r1
    1a5a:	10 92 88 03 	sts	0x0388, r1
    1a5e:	10 92 89 03 	sts	0x0389, r1
    1a62:	10 92 8a 03 	sts	0x038A, r1
					pwm_left_desired = 0;
    1a66:	10 92 8b 03 	sts	0x038B, r1
    1a6a:	10 92 8c 03 	sts	0x038C, r1
    1a6e:	10 92 8d 03 	sts	0x038D, r1
    1a72:	10 92 8e 03 	sts	0x038E, r1
					break;
    1a76:	18 ca       	rjmp	.-3024   	; 0xea8 <main+0x126>
					pwm_left_desired -= STEP_MOTORS;
            	    if (pwm_left_desired<-MAX_MOTORS_PWM) pwm_left_desired=-MAX_MOTORS_PWM;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1a78:	80 91 87 03 	lds	r24, 0x0387
    1a7c:	90 91 88 03 	lds	r25, 0x0388
    1a80:	a0 91 89 03 	lds	r26, 0x0389
    1a84:	b0 91 8a 03 	lds	r27, 0x038A
    1a88:	4e 97       	sbiw	r24, 0x1e	; 30
    1a8a:	a1 09       	sbc	r26, r1
    1a8c:	b1 09       	sbc	r27, r1
    1a8e:	80 93 87 03 	sts	0x0387, r24
    1a92:	90 93 88 03 	sts	0x0388, r25
    1a96:	a0 93 89 03 	sts	0x0389, r26
    1a9a:	b0 93 8a 03 	sts	0x038A, r27
                	if (pwm_right_desired<-MAX_MOTORS_PWM) pwm_right_desired=-MAX_MOTORS_PWM;
    1a9e:	8a 39       	cpi	r24, 0x9A	; 154
    1aa0:	3d ef       	ldi	r19, 0xFD	; 253
    1aa2:	93 07       	cpc	r25, r19
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	a3 07       	cpc	r26, r19
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	b3 07       	cpc	r27, r19
    1aac:	0c f0       	brlt	.+2      	; 0x1ab0 <main+0xd2e>
    1aae:	fc c9       	rjmp	.-3080   	; 0xea8 <main+0x126>
    1ab0:	8a e9       	ldi	r24, 0x9A	; 154
    1ab2:	9d ef       	ldi	r25, 0xFD	; 253
    1ab4:	af ef       	ldi	r26, 0xFF	; 255
    1ab6:	bf ef       	ldi	r27, 0xFF	; 255
    1ab8:	80 93 87 03 	sts	0x0387, r24
    1abc:	90 93 88 03 	sts	0x0388, r25
    1ac0:	a0 93 89 03 	sts	0x0389, r26
    1ac4:	b0 93 8a 03 	sts	0x038A, r27
    1ac8:	ef c9       	rjmp	.-3106   	; 0xea8 <main+0x126>
					pwm_left_desired += STEP_MOTORS;
                	if (pwm_left_desired>MAX_MOTORS_PWM) pwm_left_desired=MAX_MOTORS_PWM;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1aca:	80 91 87 03 	lds	r24, 0x0387
    1ace:	90 91 88 03 	lds	r25, 0x0388
    1ad2:	a0 91 89 03 	lds	r26, 0x0389
    1ad6:	b0 91 8a 03 	lds	r27, 0x038A
    1ada:	4e 96       	adiw	r24, 0x1e	; 30
    1adc:	a1 1d       	adc	r26, r1
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	80 93 87 03 	sts	0x0387, r24
    1ae4:	90 93 88 03 	sts	0x0388, r25
    1ae8:	a0 93 89 03 	sts	0x0389, r26
    1aec:	b0 93 8a 03 	sts	0x038A, r27
	                if (pwm_right_desired>MAX_MOTORS_PWM) pwm_right_desired=MAX_MOTORS_PWM;
    1af0:	87 36       	cpi	r24, 0x67	; 103
    1af2:	32 e0       	ldi	r19, 0x02	; 2
    1af4:	93 07       	cpc	r25, r19
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	a3 07       	cpc	r26, r19
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	b3 07       	cpc	r27, r19
    1afe:	0c f4       	brge	.+2      	; 0x1b02 <main+0xd80>
    1b00:	d3 c9       	rjmp	.-3162   	; 0xea8 <main+0x126>
    1b02:	86 e6       	ldi	r24, 0x66	; 102
    1b04:	92 e0       	ldi	r25, 0x02	; 2
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	80 93 87 03 	sts	0x0387, r24
    1b0e:	90 93 88 03 	sts	0x0388, r25
    1b12:	a0 93 89 03 	sts	0x0389, r26
    1b16:	b0 93 8a 03 	sts	0x038A, r27
    1b1a:	c6 c9       	rjmp	.-3188   	; 0xea8 <main+0x126>
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
					if(pwm_right_desired > pwm_left_desired) {
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	ad 01       	movw	r20, r26
    1b20:	09 cf       	rjmp	.-494    	; 0x1934 <main+0xbb2>

					if(colorState==0) {		// turn on blue
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;					
					} else if(colorState==1) {	// turn on green
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	d1 f0       	breq	.+52     	; 0x1b5a <main+0xdd8>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	01 f1       	breq	.+64     	; 0x1b6a <main+0xde8>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	61 f1       	breq	.+88     	; 0x1b86 <main+0xe04>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off
						pwm_blue = MAX_LEDS_PWM;
    1b2e:	ef ef       	ldi	r30, 0xFF	; 255
    1b30:	e0 93 0d 02 	sts	0x020D, r30
						pwm_green = MAX_LEDS_PWM;
    1b34:	e0 93 0c 02 	sts	0x020C, r30
						pwm_red = MAX_LEDS_PWM;
    1b38:	e0 93 0b 02 	sts	0x020B, r30
    1b3c:	8c c9       	rjmp	.-3304   	; 0xe56 <main+0xd4>
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);
    1b3e:	80 91 80 00 	lds	r24, 0x0080
    1b42:	87 7f       	andi	r24, 0xF7	; 247
    1b44:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);
    1b48:	2f 98       	cbi	0x05, 7	; 5
    1b4a:	ae c9       	rjmp	.-3236   	; 0xea8 <main+0x126>
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);
    1b4c:	80 91 80 00 	lds	r24, 0x0080
    1b50:	8f 7d       	andi	r24, 0xDF	; 223
    1b52:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);
    1b56:	2e 98       	cbi	0x05, 6	; 5
    1b58:	98 c9       	rjmp	.-3280   	; 0xe8a <main+0x108>
					if(colorState==0) {		// turn on blue
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;					
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1b5a:	af ef       	ldi	r26, 0xFF	; 255
    1b5c:	a0 93 0d 02 	sts	0x020D, r26
						pwm_green = 0;
    1b60:	10 92 0c 02 	sts	0x020C, r1
						pwm_red = MAX_LEDS_PWM;
    1b64:	a0 93 0b 02 	sts	0x020B, r26
    1b68:	76 c9       	rjmp	.-3348   	; 0xe56 <main+0xd4>
					} else if(colorState==2) {	// turn on red
						pwm_blue = MAX_LEDS_PWM;
    1b6a:	bf ef       	ldi	r27, 0xFF	; 255
    1b6c:	b0 93 0d 02 	sts	0x020D, r27
						pwm_green = MAX_LEDS_PWM;
    1b70:	b0 93 0c 02 	sts	0x020C, r27
						pwm_red = 0;
    1b74:	10 92 0b 02 	sts	0x020B, r1
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);
    1b78:	80 91 80 00 	lds	r24, 0x0080
    1b7c:	8f 77       	andi	r24, 0x7F	; 127
    1b7e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);
    1b82:	2d 98       	cbi	0x05, 5	; 5
    1b84:	73 c9       	rjmp	.-3354   	; 0xe6c <main+0xea>
					} else if(colorState==2) {	// turn on red
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1b86:	10 92 0d 02 	sts	0x020D, r1
						pwm_green = 0;
    1b8a:	10 92 0c 02 	sts	0x020C, r1
						pwm_red = 0;
    1b8e:	10 92 0b 02 	sts	0x020B, r1
    1b92:	f2 cf       	rjmp	.-28     	; 0x1b78 <main+0xdf6>

00001b94 <initSPI>:
// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1b94:	84 b1       	in	r24, 0x04	; 4
    1b96:	80 7f       	andi	r24, 0xF0	; 240
    1b98:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1b9a:	84 b1       	in	r24, 0x04	; 4
    1b9c:	87 60       	ori	r24, 0x07	; 7
    1b9e:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1ba0:	80 e5       	ldi	r24, 0x50	; 80
    1ba2:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1ba4:	8d b5       	in	r24, 0x2d	; 45
    1ba6:	81 60       	ori	r24, 0x01	; 1
    1ba8:	8d bd       	out	0x2d, r24	; 45

}
    1baa:	08 95       	ret

00001bac <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bac:	44 23       	and	r20, r20
    1bae:	79 f0       	breq	.+30     	; 0x1bce <SPI_ReadWrite_Block+0x22>
    1bb0:	a8 2f       	mov	r26, r24
    1bb2:	b9 2f       	mov	r27, r25
    1bb4:	e6 2f       	mov	r30, r22
    1bb6:	f7 2f       	mov	r31, r23
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1bba:	9d 91       	ld	r25, X+
    1bbc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1bbe:	0d b4       	in	r0, 0x2d	; 45
    1bc0:	07 fe       	sbrs	r0, 7
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <SPI_ReadWrite_Block+0x12>
          buffer[i] = SPDR;
    1bc4:	9e b5       	in	r25, 0x2e	; 46
    1bc6:	91 93       	st	Z+, r25

}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	84 17       	cp	r24, r20
    1bcc:	b0 f3       	brcs	.-20     	; 0x1bba <SPI_ReadWrite_Block+0xe>
    1bce:	08 95       	ret

00001bd0 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bd0:	66 23       	and	r22, r22
    1bd2:	59 f0       	breq	.+22     	; 0x1bea <SPI_Write_Block+0x1a>
    1bd4:	e8 2f       	mov	r30, r24
    1bd6:	f9 2f       	mov	r31, r25
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
          SPDR = data[i];
    1bda:	91 91       	ld	r25, Z+
    1bdc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1bde:	0d b4       	in	r0, 0x2d	; 45
    1be0:	07 fe       	sbrs	r0, 7
    1be2:	fd cf       	rjmp	.-6      	; 0x1bde <SPI_Write_Block+0xe>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	86 17       	cp	r24, r22
    1be8:	c0 f3       	brcs	.-16     	; 0x1bda <SPI_Write_Block+0xa>
    1bea:	08 95       	ret

00001bec <SPI_Write_Byte>:
          SPI_WAIT();
    }
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1bec:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1bee:	0d b4       	in	r0, 0x2d	; 45
    1bf0:	07 fe       	sbrs	r0, 7
    1bf2:	fd cf       	rjmp	.-6      	; 0x1bee <SPI_Write_Byte+0x2>
    return SPDR;
    1bf4:	8e b5       	in	r24, 0x2e	; 46
}
    1bf6:	08 95       	ret

00001bf8 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <mirf_config+0xa>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c06:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c0e:	8d e0       	ldi	r24, 0x0D	; 13
    1c10:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1c14:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c16:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c18:	83 e2       	ldi	r24, 0x23	; 35
    1c1a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1c24:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (RF_ADDR>>8)&0xFF;
    1c26:	8c e0       	ldi	r24, 0x0C	; 12
    1c28:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = RF_ADDR & 0xFF;
    1c2a:	83 e8       	ldi	r24, 0x83	; 131
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1c2e:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1c30:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c32:	80 e3       	ldi	r24, 0x30	; 48
    1c34:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1c38:	8e 01       	movw	r16, r28
    1c3a:	0f 5f       	subi	r16, 0xFF	; 255
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	c8 01       	movw	r24, r16
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1c46:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1c48:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c4a:	8a e2       	ldi	r24, 0x2A	; 42
    1c4c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1c50:	c8 01       	movw	r24, r16
    1c52:	63 e0       	ldi	r22, 0x03	; 3
    1c54:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1c58:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c5a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c5c:	81 e2       	ldi	r24, 0x21	; 33
    1c5e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1c68:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c6c:	82 e2       	ldi	r24, 0x22	; 34
    1c6e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1c78:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c7a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c7c:	84 e2       	ldi	r24, 0x24	; 36
    1c7e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c82:	82 e1       	ldi	r24, 0x12	; 18
    1c84:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1c88:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c8a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c8c:	85 e2       	ldi	r24, 0x25	; 37
    1c8e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c92:	88 e2       	ldi	r24, 0x28	; 40
    1c94:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1c98:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c9a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c9c:	81 e3       	ldi	r24, 0x31	; 49
    1c9e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ca2:	86 e0       	ldi	r24, 0x06	; 6
    1ca4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1ca8:	28 9a       	sbi	0x05, 0	; 5
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

#ifdef BIDIRECTIONAL

	// enable extra features
    mirf_CSN_lo;
    1caa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1cac:	80 e5       	ldi	r24, 0x50	; 80
    1cae:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1cb2:	83 e7       	ldi	r24, 0x73	; 115
    1cb4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1cb8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cbc:	8c e3       	ldi	r24, 0x3C	; 60
    1cbe:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1cc8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ccc:	8d e3       	ldi	r24, 0x3D	; 61
    1cce:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cd2:	86 e0       	ldi	r24, 0x06	; 6
    1cd4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1cd8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cda:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cdc:	80 e2       	ldi	r24, 0x20	; 32
    1cde:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ce2:	8f e0       	ldi	r24, 0x0F	; 15
    1ce4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1ce8:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1cfa:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1cfc:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1cfe:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <mirf_config>
}
    1d02:	08 95       	ret

00001d04 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1d0a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1d0c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d0e:	8a e2       	ldi	r24, 0x2A	; 42
    1d10:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d14:	ce 01       	movw	r24, r28
    1d16:	65 e0       	ldi	r22, 0x05	; 5
    1d18:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1d1c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1d1e:	2c 9a       	sbi	0x05, 4	; 5
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1d2c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d2e:	80 e3       	ldi	r24, 0x30	; 48
    1d30:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1d34:	ce 01       	movw	r24, r28
    1d36:	65 e0       	ldi	r22, 0x05	; 5
    1d38:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1d3c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    mirf_write_register(TX_ADDR, adr,5);
}
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	08 95       	ret

00001d44 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1d44:	80 91 d9 03 	lds	r24, 0x03D9
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <mirf_data_ready+0xc>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1d4e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1d50:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1d58:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1d5a:	80 74       	andi	r24, 0x40	; 64
    1d5c:	08 95       	ret

00001d5e <rx_fifo_is_empty>:
}

uint8_t rx_fifo_is_empty() {
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1d68:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1d6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1d6c:	87 e1       	ldi	r24, 0x17	; 23
    1d6e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1d72:	be 01       	movw	r22, r28
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	cb 01       	movw	r24, r22
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1d80:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d84:	81 70       	andi	r24, 0x01	; 1
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1d8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1d90:	82 ee       	ldi	r24, 0xE2	; 226
    1d92:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1d96:	28 9a       	sbi	0x05, 0	; 5

}
    1d98:	08 95       	ret

00001d9a <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1da0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1da2:	81 e6       	ldi	r24, 0x61	; 97
    1da4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1da8:	ce 01       	movw	r24, r28
    1daa:	be 01       	movw	r22, r28
    1dac:	46 e0       	ldi	r20, 0x06	; 6
    1dae:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1db2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1db4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1db6:	87 e2       	ldi	r24, 0x27	; 39
    1db8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1dbc:	80 e4       	ldi	r24, 0x40	; 64
    1dbe:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1dc2:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	0f 92       	push	r0
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1dd4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dd6:	8f 71       	andi	r24, 0x1F	; 31
    1dd8:	80 62       	ori	r24, 0x20	; 32
    1dda:	69 83       	std	Y+1, r22	; 0x01
    1ddc:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1de0:	69 81       	ldd	r22, Y+1	; 0x01
    1de2:	86 2f       	mov	r24, r22
    1de4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1de8:	28 9a       	sbi	0x05, 0	; 5
}
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	0f 92       	push	r0
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1e02:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1e04:	8f 71       	andi	r24, 0x1F	; 31
    1e06:	49 83       	std	Y+1, r20	; 0x01
    1e08:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b8 01       	movw	r22, r16
    1e10:	49 81       	ldd	r20, Y+1	; 0x01
    1e12:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1e16:	28 9a       	sbi	0x05, 0	; 5
}
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	0f 92       	push	r0
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1e34:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e36:	8f 71       	andi	r24, 0x1F	; 31
    1e38:	80 62       	ori	r24, 0x20	; 32
    1e3a:	49 83       	std	Y+1, r20	; 0x01
    1e3c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1e40:	c8 01       	movw	r24, r16
    1e42:	49 81       	ldd	r20, Y+1	; 0x01
    1e44:	64 2f       	mov	r22, r20
    1e46:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <SPI_Write_Block>
    mirf_CSN_hi;
    1e4a:	28 9a       	sbi	0x05, 0	; 5
}
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1e68:	80 91 d9 03 	lds	r24, 0x03D9
    1e6c:	88 23       	and	r24, r24
    1e6e:	e1 f7       	brne	.-8      	; 0x1e68 <mirf_send+0x10>

    mirf_CE_lo;
    1e70:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 d9 03 	sts	0x03D9, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1e78:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1e7a:	80 e2       	ldi	r24, 0x20	; 32
    1e7c:	69 83       	std	Y+1, r22	; 0x01
    1e7e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1e82:	8a e4       	ldi	r24, 0x4A	; 74
    1e84:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1e88:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1e8a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1e8c:	81 ee       	ldi	r24, 0xE1	; 225
    1e8e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1e92:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1e94:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1e96:	80 ea       	ldi	r24, 0xA0	; 160
    1e98:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	69 81       	ldd	r22, Y+1	; 0x01
    1ea0:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1ea4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1ea6:	2c 9a       	sbi	0x05, 4	; 5
}
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	08 95       	ret

00001eb4 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	18 2f       	mov	r17, r24
    1ec8:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1eca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1ecc:	81 ee       	ldi	r24, 0xE1	; 225
    1ece:	99 83       	std	Y+1, r25	; 0x01
    1ed0:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1ed4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1ed6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1ed8:	88 ea       	ldi	r24, 0xA8	; 168
    1eda:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1ede:	99 81       	ldd	r25, Y+1	; 0x01
    1ee0:	00 23       	and	r16, r16
    1ee2:	61 f0       	breq	.+24     	; 0x1efc <writeAckPayload+0x48>
    1ee4:	61 2f       	mov	r22, r17
    1ee6:	79 2f       	mov	r23, r25
    1ee8:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1eea:	f7 01       	movw	r30, r14
    1eec:	81 91       	ld	r24, Z+
    1eee:	7f 01       	movw	r14, r30
    1ef0:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1ef4:	8e 2d       	mov	r24, r14
    1ef6:	81 1b       	sub	r24, r17
    1ef8:	80 17       	cp	r24, r16
    1efa:	b8 f3       	brcs	.-18     	; 0x1eea <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1efc:	28 9a       	sbi	0x05, 0	; 5


}
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	08 95       	ret

00001f0e <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1f0e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1f10:	81 ee       	ldi	r24, 0xE1	; 225
    1f12:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <SPI_Write_Byte>
    mirf_CSN_hi;
    1f16:	28 9a       	sbi	0x05, 0	; 5

}
    1f18:	08 95       	ret

00001f1a <e_start_agendas_processing>:
	// Timer2 clock input = Fosc = 8 MHz
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of 10 KHz => 8000000/10000 = 800 (too much for 8-bits)
	// We use a 1/8 prescaler: 1000000/10000 = 100
	// The CTC mode let us chose the TOP value to be 100
	TCCR2A |= (1 << WGM01); 	// mode 2 => CTC mode
    1f1a:	e0 eb       	ldi	r30, 0xB0	; 176
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	82 60       	ori	r24, 0x02	; 2
    1f22:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS01);		// 1/8 prescaler
    1f24:	e1 eb       	ldi	r30, 0xB1	; 177
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	82 60       	ori	r24, 0x02	; 2
    1f2c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR2A = 100;
    1f2e:	84 e6       	ldi	r24, 0x64	; 100
    1f30:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 |= (1 << OCIE2A);
    1f34:	e0 e7       	ldi	r30, 0x70	; 112
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	82 60       	ori	r24, 0x02	; 2
    1f3c:	80 83       	st	Z, r24
//	// Timer4 clock input = Fosc/2 = 2 MHz
//	// Period time = PR * 1/(Fosc/2) => PR = period time * Fosc/2
//	// We need a period time of 100 us => 0.0001 * 2000000 = 200
//	OpenTimer4(T4_ON | T4_PS_1_1 | T4_32BIT_MODE_OFF | T4_SOURCE_INT, 200);

}
    1f3e:	08 95       	ret

00001f40 <e_end_agendas_processing>:
 * use \ref e_destroy_agenda(void (*func)(void)) for that.
 * \sa e_destroy_agenda
 */
void e_end_agendas_processing(void)
{
	TCCR2B &= ~(1 << CS01);
    1f40:	e1 eb       	ldi	r30, 0xB1	; 177
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8d 7f       	andi	r24, 0xFD	; 253
    1f48:	80 83       	st	Z, r24
	//T4CONbits.TON = 0;    // disable Timer2
}
    1f4a:	08 95       	ret

00001f4c <e_activate_agenda>:
 * \param func	 function called if the cycle value is reached by the counter
 * \param cycle      cycle value in millisec/10
 * \return \ref EXIT_OK if the agenda has been created, exit the programme otherwise
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
    1f5a:	7b 01       	movw	r14, r22
	Agenda *current = agenda_list;
    1f5c:	00 91 21 03 	lds	r16, 0x0321
    1f60:	10 91 22 03 	lds	r17, 0x0322

	while (current)
    1f64:	01 15       	cp	r16, r1
    1f66:	11 05       	cpc	r17, r1
    1f68:	89 f0       	breq	.+34     	; 0x1f8c <e_activate_agenda+0x40>
	{
		if (current->function == func)
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	85 81       	ldd	r24, Z+5	; 0x05
    1f6e:	96 81       	ldd	r25, Z+6	; 0x06
    1f70:	8c 17       	cp	r24, r28
    1f72:	9d 07       	cpc	r25, r29
    1f74:	31 f4       	brne	.+12     	; 0x1f82 <e_activate_agenda+0x36>
    1f76:	1f c0       	rjmp	.+62     	; 0x1fb6 <e_activate_agenda+0x6a>
    1f78:	85 81       	ldd	r24, Z+5	; 0x05
    1f7a:	96 81       	ldd	r25, Z+6	; 0x06
    1f7c:	8c 17       	cp	r24, r28
    1f7e:	9d 07       	cpc	r25, r29
    1f80:	d1 f0       	breq	.+52     	; 0x1fb6 <e_activate_agenda+0x6a>
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
    1f82:	07 80       	ldd	r0, Z+7	; 0x07
    1f84:	f0 85       	ldd	r31, Z+8	; 0x08
    1f86:	e0 2d       	mov	r30, r0
 */
int e_activate_agenda(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    1f88:	30 97       	sbiw	r30, 0x00	; 0
    1f8a:	b1 f7       	brne	.-20     	; 0x1f78 <e_activate_agenda+0x2c>
		if (current->function == func)
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
    1f8c:	89 e0       	ldi	r24, 0x09	; 9
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <malloc>
    1f94:	fc 01       	movw	r30, r24
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	b9 f0       	breq	.+46     	; 0x1fc8 <e_activate_agenda+0x7c>
		exit (1); //(EXIT_FAILURE);

	current->cycle = cycle;
    1f9a:	f1 82       	std	Z+1, r15	; 0x01
    1f9c:	e0 82       	st	Z, r14
	current->counter = 0;
    1f9e:	13 82       	std	Z+3, r1	; 0x03
    1fa0:	12 82       	std	Z+2, r1	; 0x02
	current->activate = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	84 83       	std	Z+4, r24	; 0x04
	current->function = func;
    1fa6:	d6 83       	std	Z+6, r29	; 0x06
    1fa8:	c5 83       	std	Z+5, r28	; 0x05
	current->next = agenda_list;
    1faa:	10 87       	std	Z+8, r17	; 0x08
    1fac:	07 83       	std	Z+7, r16	; 0x07

	agenda_list = current;
    1fae:	f0 93 22 03 	sts	0x0322, r31
    1fb2:	e0 93 21 03 	sts	0x0321, r30
	return(EXIT_OK);
}
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	08 95       	ret
			return(AG_ALREADY_CREATED);
		else
			current = current->next;
	}
	if(!(current = (Agenda*) malloc(sizeof(Agenda))))
		exit (1); //(EXIT_FAILURE);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 db 20 	call	0x41b6	; 0x41b6 <_exit>

00001fd0 <e_destroy_agenda>:
 * \return \ref EXIT_OK if the agenda has been destroyed, \ref AG_NOT_FOUND otherwise
 */
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;
    1fd0:	a0 91 21 03 	lds	r26, 0x0321
    1fd4:	b0 91 22 03 	lds	r27, 0x0322

	while (current)
    1fd8:	10 97       	sbiw	r26, 0x00	; 0
    1fda:	a1 f0       	breq	.+40     	; 0x2004 <e_destroy_agenda+0x34>
	{
		if (current->function == func)
    1fdc:	15 96       	adiw	r26, 0x05	; 5
    1fde:	2d 91       	ld	r18, X+
    1fe0:	3c 91       	ld	r19, X
    1fe2:	16 97       	sbiw	r26, 0x06	; 6
    1fe4:	28 17       	cp	r18, r24
    1fe6:	39 07       	cpc	r19, r25
    1fe8:	39 f4       	brne	.+14     	; 0x1ff8 <e_destroy_agenda+0x28>
    1fea:	1d c0       	rjmp	.+58     	; 0x2026 <e_destroy_agenda+0x56>
    1fec:	25 81       	ldd	r18, Z+5	; 0x05
    1fee:	36 81       	ldd	r19, Z+6	; 0x06
    1ff0:	28 17       	cp	r18, r24
    1ff2:	39 07       	cpc	r19, r25
    1ff4:	59 f0       	breq	.+22     	; 0x200c <e_destroy_agenda+0x3c>
    1ff6:	df 01       	movw	r26, r30
			return(EXIT_OK);
		}			
		else
		{
			preceding = current;
			current = current->next;
    1ff8:	17 96       	adiw	r26, 0x07	; 7
    1ffa:	ed 91       	ld	r30, X+
    1ffc:	fc 91       	ld	r31, X
    1ffe:	18 97       	sbiw	r26, 0x08	; 8
int e_destroy_agenda(void (*func)(void))
{
	Agenda *preceding = 0;
	Agenda *current = agenda_list;

	while (current)
    2000:	30 97       	sbiw	r30, 0x00	; 0
    2002:	a1 f7       	brne	.-24     	; 0x1fec <e_destroy_agenda+0x1c>
		{
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
    2004:	22 e0       	ldi	r18, 0x02	; 2
    2006:	30 e0       	ldi	r19, 0x00	; 0
}
    2008:	c9 01       	movw	r24, r18
    200a:	08 95       	ret
	while (current)
	{
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
    200c:	87 81       	ldd	r24, Z+7	; 0x07
    200e:	90 85       	ldd	r25, Z+8	; 0x08
    2010:	18 96       	adiw	r26, 0x08	; 8
    2012:	9c 93       	st	X, r25
    2014:	8e 93       	st	-X, r24
    2016:	17 97       	sbiw	r26, 0x07	; 7
			else
				agenda_list		= current->next;

			free(current);
    2018:	cf 01       	movw	r24, r30
    201a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <free>
			return(EXIT_OK);
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	30 e0       	ldi	r19, 0x00	; 0
			preceding = current;
			current = current->next;
		}
	}
	return(AG_NOT_FOUND);
}
    2022:	c9 01       	movw	r24, r18
    2024:	08 95       	ret
		if (current->function == func)
		{
			if (preceding)
				preceding->next = current->next;
			else
				agenda_list		= current->next;
    2026:	17 96       	adiw	r26, 0x07	; 7
    2028:	8d 91       	ld	r24, X+
    202a:	9c 91       	ld	r25, X
    202c:	18 97       	sbiw	r26, 0x08	; 8
    202e:	90 93 22 03 	sts	0x0322, r25
    2032:	80 93 21 03 	sts	0x0321, r24
    2036:	fd 01       	movw	r30, r26
    2038:	ef cf       	rjmp	.-34     	; 0x2018 <e_destroy_agenda+0x48>

0000203a <e_set_agenda_cycle>:
 * \return \ref EXIT_OK if the cycle of the agenda has been modified,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;
    203a:	e0 91 21 03 	lds	r30, 0x0321
    203e:	f0 91 22 03 	lds	r31, 0x0322

	while (current)
    2042:	30 97       	sbiw	r30, 0x00	; 0
    2044:	31 f4       	brne	.+12     	; 0x2052 <e_set_agenda_cycle+0x18>
    2046:	10 c0       	rjmp	.+32     	; 0x2068 <e_set_agenda_cycle+0x2e>
		{
			current->cycle = cycle;
			return(EXIT_OK);
		}
		else
			current = current->next;
    2048:	07 80       	ldd	r0, Z+7	; 0x07
    204a:	f0 85       	ldd	r31, Z+8	; 0x08
    204c:	e0 2d       	mov	r30, r0
 */
int e_set_agenda_cycle(void (*func)(void), int cycle)
{
	Agenda *current = agenda_list;

	while (current)
    204e:	30 97       	sbiw	r30, 0x00	; 0
    2050:	59 f0       	breq	.+22     	; 0x2068 <e_set_agenda_cycle+0x2e>
	{
		if (current->function == func)
    2052:	25 81       	ldd	r18, Z+5	; 0x05
    2054:	36 81       	ldd	r19, Z+6	; 0x06
    2056:	28 17       	cp	r18, r24
    2058:	39 07       	cpc	r19, r25
    205a:	b1 f7       	brne	.-20     	; 0x2048 <e_set_agenda_cycle+0xe>
		{
			current->cycle = cycle;
    205c:	71 83       	std	Z+1, r23	; 0x01
    205e:	60 83       	st	Z, r22
			return(EXIT_OK);
    2060:	21 e0       	ldi	r18, 0x01	; 1
    2062:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    2064:	c9 01       	movw	r24, r18
    2066:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2068:	22 e0       	ldi	r18, 0x02	; 2
    206a:	30 e0       	ldi	r19, 0x00	; 0
}
    206c:	c9 01       	movw	r24, r18
    206e:	08 95       	ret

00002070 <e_reset_agenda>:
 * \ref e_pause_agenda(void (*func)(void))
 * \sa e_pause_agenda
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    2070:	e0 91 21 03 	lds	r30, 0x0321
    2074:	f0 91 22 03 	lds	r31, 0x0322

	while (current)
    2078:	30 97       	sbiw	r30, 0x00	; 0
    207a:	31 f4       	brne	.+12     	; 0x2088 <e_reset_agenda+0x18>
    207c:	10 c0       	rjmp	.+32     	; 0x209e <e_reset_agenda+0x2e>
		{
			current->counter = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    207e:	07 80       	ldd	r0, Z+7	; 0x07
    2080:	f0 85       	ldd	r31, Z+8	; 0x08
    2082:	e0 2d       	mov	r30, r0
 */
int e_reset_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;

	while (current)
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	59 f0       	breq	.+22     	; 0x209e <e_reset_agenda+0x2e>
	{
		if (current->function == func)
    2088:	25 81       	ldd	r18, Z+5	; 0x05
    208a:	36 81       	ldd	r19, Z+6	; 0x06
    208c:	28 17       	cp	r18, r24
    208e:	39 07       	cpc	r19, r25
    2090:	b1 f7       	brne	.-20     	; 0x207e <e_reset_agenda+0xe>
		{
			current->counter = 0;
    2092:	13 82       	std	Z+3, r1	; 0x03
    2094:	12 82       	std	Z+2, r1	; 0x02
			return(EXIT_OK);
    2096:	21 e0       	ldi	r18, 0x01	; 1
    2098:	30 e0       	ldi	r19, 0x00	; 0
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
}
    209a:	c9 01       	movw	r24, r18
    209c:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    209e:	22 e0       	ldi	r18, 0x02	; 2
    20a0:	30 e0       	ldi	r19, 0x00	; 0
}
    20a2:	c9 01       	movw	r24, r18
    20a4:	08 95       	ret

000020a6 <e_pause_agenda>:
 * \return \ref EXIT_OK the agenda has been paused,
 *         \ref AG_NOT_FOUND otherwise
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    20a6:	e0 91 21 03 	lds	r30, 0x0321
    20aa:	f0 91 22 03 	lds	r31, 0x0322
	
	while (current)
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	31 f4       	brne	.+12     	; 0x20be <e_pause_agenda+0x18>
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <e_pause_agenda+0x2c>
		{
			current->activate = 0;
			return(EXIT_OK);
		}
		else
			current = current->next;
    20b4:	07 80       	ldd	r0, Z+7	; 0x07
    20b6:	f0 85       	ldd	r31, Z+8	; 0x08
    20b8:	e0 2d       	mov	r30, r0
 */
int e_pause_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    20ba:	30 97       	sbiw	r30, 0x00	; 0
    20bc:	51 f0       	breq	.+20     	; 0x20d2 <e_pause_agenda+0x2c>
	{
		if (current->function == func)
    20be:	25 81       	ldd	r18, Z+5	; 0x05
    20c0:	36 81       	ldd	r19, Z+6	; 0x06
    20c2:	28 17       	cp	r18, r24
    20c4:	39 07       	cpc	r19, r25
    20c6:	b1 f7       	brne	.-20     	; 0x20b4 <e_pause_agenda+0xe>
		{
			current->activate = 0;
    20c8:	14 82       	std	Z+4, r1	; 0x04
			return(EXIT_OK);
    20ca:	21 e0       	ldi	r18, 0x01	; 1
    20cc:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    20ce:	c9 01       	movw	r24, r18
    20d0:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    20d2:	22 e0       	ldi	r18, 0x02	; 2
    20d4:	30 e0       	ldi	r19, 0x00	; 0
	
}
    20d6:	c9 01       	movw	r24, r18
    20d8:	08 95       	ret

000020da <e_restart_agenda>:
 *         \ref AG_NOT_FOUND otherwise
 * \sa e_pause_agenda
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
    20da:	e0 91 21 03 	lds	r30, 0x0321
    20de:	f0 91 22 03 	lds	r31, 0x0322
	
	while (current)
    20e2:	30 97       	sbiw	r30, 0x00	; 0
    20e4:	31 f4       	brne	.+12     	; 0x20f2 <e_restart_agenda+0x18>
    20e6:	10 c0       	rjmp	.+32     	; 0x2108 <e_restart_agenda+0x2e>
		{
			current->activate = 1;
			return(EXIT_OK);
		}
		else
			current = current->next;
    20e8:	07 80       	ldd	r0, Z+7	; 0x07
    20ea:	f0 85       	ldd	r31, Z+8	; 0x08
    20ec:	e0 2d       	mov	r30, r0
 */
int e_restart_agenda(void (*func)(void))
{
	Agenda *current = agenda_list;
	
	while (current)
    20ee:	30 97       	sbiw	r30, 0x00	; 0
    20f0:	59 f0       	breq	.+22     	; 0x2108 <e_restart_agenda+0x2e>
	{
		if (current->function == func)
    20f2:	25 81       	ldd	r18, Z+5	; 0x05
    20f4:	36 81       	ldd	r19, Z+6	; 0x06
    20f6:	28 17       	cp	r18, r24
    20f8:	39 07       	cpc	r19, r25
    20fa:	b1 f7       	brne	.-20     	; 0x20e8 <e_restart_agenda+0xe>
		{
			current->activate = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	84 83       	std	Z+4, r24	; 0x04
			return(EXIT_OK);
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	30 e0       	ldi	r19, 0x00	; 0
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
	
}
    2104:	c9 01       	movw	r24, r18
    2106:	08 95       	ret
			return(EXIT_OK);
		}
		else
			current = current->next;
	}
	return(AG_NOT_FOUND);
    2108:	22 e0       	ldi	r18, 0x02	; 2
    210a:	30 e0       	ldi	r19, 0x00	; 0
	
}
    210c:	c9 01       	movw	r24, r18
    210e:	08 95       	ret

00002110 <__vector_13>:
 * and current counter value.
 * \n Do it for number of cycle positive or null.
 * \n Check if a service has to be activated. 
 */

ISR(TIMER2_COMPA_vect) {
    2110:	1f 92       	push	r1
    2112:	0f 92       	push	r0
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	0f 92       	push	r0
    2118:	0b b6       	in	r0, 0x3b	; 59
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	ef 93       	push	r30
    2138:	ff 93       	push	r31
//void __attribute__((interrupt, auto_psv))
// _T4Interrupt(void)
//{

	Agenda *current = agenda_list;
    213a:	c0 91 21 03 	lds	r28, 0x0321
    213e:	d0 91 22 03 	lds	r29, 0x0322
//		SetDCOC3PWM_GB(32,32);
//		SetDCOC4PWM_GB(32,32);
//		SetDCOC5PWM_GB(32,32);
//	}

	while (current)
    2142:	20 97       	sbiw	r28, 0x00	; 0
    2144:	31 f4       	brne	.+12     	; 0x2152 <__vector_13+0x42>
    2146:	21 c0       	rjmp	.+66     	; 0x218a <__vector_13+0x7a>
			{
				current->function();	// trigger the associeted function
				current->counter=0;		// reset the counter
			}
		}
		current = current->next;
    2148:	0f 80       	ldd	r0, Y+7	; 0x07
    214a:	d8 85       	ldd	r29, Y+8	; 0x08
    214c:	c0 2d       	mov	r28, r0
//		SetDCOC3PWM_GB(32,32);
//		SetDCOC4PWM_GB(32,32);
//		SetDCOC5PWM_GB(32,32);
//	}

	while (current)
    214e:	20 97       	sbiw	r28, 0x00	; 0
    2150:	e1 f0       	breq	.+56     	; 0x218a <__vector_13+0x7a>
	{
		// agenda must be active with a positive non-null cycle value
		if(current->activate == 1 && current->cycle > 0) 
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	c1 f7       	brne	.-16     	; 0x2148 <__vector_13+0x38>
    2158:	28 81       	ld	r18, Y
    215a:	39 81       	ldd	r19, Y+1	; 0x01
    215c:	21 15       	cp	r18, r1
    215e:	31 05       	cpc	r19, r1
    2160:	99 f3       	breq	.-26     	; 0x2148 <__vector_13+0x38>
		{
			current->counter++;
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	9b 81       	ldd	r25, Y+3	; 0x03
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	9b 83       	std	Y+3, r25	; 0x03
    216a:	8a 83       	std	Y+2, r24	; 0x02
			// check if the agenda event must be triggered
			if(current->counter > current->cycle-1) // a cycle value of 1 will be performed every interupt
    216c:	21 50       	subi	r18, 0x01	; 1
    216e:	30 40       	sbci	r19, 0x00	; 0
    2170:	28 17       	cp	r18, r24
    2172:	39 07       	cpc	r19, r25
    2174:	48 f7       	brcc	.-46     	; 0x2148 <__vector_13+0x38>
			{
				current->function();	// trigger the associeted function
    2176:	ed 81       	ldd	r30, Y+5	; 0x05
    2178:	fe 81       	ldd	r31, Y+6	; 0x06
    217a:	19 95       	eicall
				current->counter=0;		// reset the counter
    217c:	1b 82       	std	Y+3, r1	; 0x03
    217e:	1a 82       	std	Y+2, r1	; 0x02
			}
		}
		current = current->next;
    2180:	0f 80       	ldd	r0, Y+7	; 0x07
    2182:	d8 85       	ldd	r29, Y+8	; 0x08
    2184:	c0 2d       	mov	r28, r0
//		SetDCOC3PWM_GB(32,32);
//		SetDCOC4PWM_GB(32,32);
//		SetDCOC5PWM_GB(32,32);
//	}

	while (current)
    2186:	20 97       	sbiw	r28, 0x00	; 0
    2188:	21 f7       	brne	.-56     	; 0x2152 <__vector_13+0x42>
			}
		}
		current = current->next;
	}
  return;
}
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	bf 91       	pop	r27
    2194:	af 91       	pop	r26
    2196:	9f 91       	pop	r25
    2198:	8f 91       	pop	r24
    219a:	7f 91       	pop	r23
    219c:	6f 91       	pop	r22
    219e:	5f 91       	pop	r21
    21a0:	4f 91       	pop	r20
    21a2:	3f 91       	pop	r19
    21a4:	2f 91       	pop	r18
    21a6:	0f 90       	pop	r0
    21a8:	0b be       	out	0x3b, r0	; 59
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	0f 90       	pop	r0
    21b0:	1f 90       	pop	r1
    21b2:	18 95       	reti

000021b4 <e_read_remote_control>:
	}
}

/*! \brief Read the signal and stock the information */
void e_read_remote_control(void) // interrupt from timer for next bits
{
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
	static int i = -1;
		
//	PORTB ^= (1 << 6);

	if (i == -1)	// start bit confirm  change timer period
    21b8:	c0 91 01 02 	lds	r28, 0x0201
    21bc:	d0 91 02 02 	lds	r29, 0x0202
    21c0:	8f ef       	ldi	r24, 0xFF	; 255
    21c2:	cf 3f       	cpi	r28, 0xFF	; 255
    21c4:	d8 07       	cpc	r29, r24
    21c6:	09 f4       	brne	.+2      	; 0x21ca <e_read_remote_control+0x16>
    21c8:	4f c0       	rjmp	.+158    	; 0x2268 <__stack+0x69>
				i=0;
			}
	} 	
//	e_set_led(2,1);
	
	else if (i == 1)	// check bit read and change timer period
    21ca:	c1 30       	cpi	r28, 0x01	; 1
    21cc:	d1 05       	cpc	r29, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <e_read_remote_control+0x1e>
    21d0:	9b c0       	rjmp	.+310    	; 0x2308 <__stack+0x109>
//	e_set_led(3,1);
		check_temp = REMOTE;	   // read the check bit
		e_set_agenda_cycle(e_read_remote_control, 18); //cycle value is 1.778[ms]
		//e_set_led(1,1);
	} 
	else if ((i > 1) && (i < 7)) // we read address
    21d2:	ce 01       	movw	r24, r28
    21d4:	02 97       	sbiw	r24, 0x02	; 2
    21d6:	85 30       	cpi	r24, 0x05	; 5
    21d8:	91 05       	cpc	r25, r1
    21da:	20 f5       	brcc	.+72     	; 0x2224 <__stack+0x25>
//			SetDCOC5PWM_GB(64,64);
//		}

//	e_set_led(4,1);
		
		unsigned char temp = REMOTE;
    21dc:	80 91 03 01 	lds	r24, 0x0103
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	80 74       	andi	r24, 0x40	; 64
    21e4:	90 70       	andi	r25, 0x00	; 0
		temp <<= 6-i;
    21e6:	00 24       	eor	r0, r0
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	00 1c       	adc	r0, r0
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	00 1c       	adc	r0, r0
    21f4:	89 2f       	mov	r24, r25
    21f6:	90 2d       	mov	r25, r0
    21f8:	26 e0       	ldi	r18, 0x06	; 6
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	2c 1b       	sub	r18, r28
    21fe:	3d 0b       	sbc	r19, r29
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <__stack+0x7>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	2a 95       	dec	r18
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <__stack+0x3>
		address_temp += temp;
    220a:	20 91 27 03 	lds	r18, 0x0327
    220e:	28 0f       	add	r18, r24
    2210:	20 93 27 03 	sts	0x0327, r18
		e_destroy_agenda(e_read_remote_control);
		i = -1;
		check = check_temp;
		address = address_temp;
		data_ir = data_temp;
		command_received=1;
    2214:	21 96       	adiw	r28, 0x01	; 1
	} 
	
	if(i!=-1)
		i++;	
    2216:	d0 93 02 02 	sts	0x0202, r29
    221a:	c0 93 01 02 	sts	0x0201, r28
}
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	08 95       	ret
		
		unsigned char temp = REMOTE;
		temp <<= 6-i;
		address_temp += temp;
	}
	else if ((i > 6) && (i < 13 )) // we read data
    2224:	ce 01       	movw	r24, r28
    2226:	07 97       	sbiw	r24, 0x07	; 7
    2228:	86 30       	cpi	r24, 0x06	; 6
    222a:	91 05       	cpc	r25, r1
    222c:	b0 f5       	brcc	.+108    	; 0x229a <__stack+0x9b>
//			SetDCOC5PWM_GB(64,64);
//		}

//			e_set_led(5,1);

		unsigned char temp = REMOTE;
    222e:	80 91 03 01 	lds	r24, 0x0103
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	80 74       	andi	r24, 0x40	; 64
    2236:	90 70       	andi	r25, 0x00	; 0
		temp <<= 6+6-i;
    2238:	00 24       	eor	r0, r0
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	00 1c       	adc	r0, r0
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	00 1c       	adc	r0, r0
    2246:	89 2f       	mov	r24, r25
    2248:	90 2d       	mov	r25, r0
    224a:	2c e0       	ldi	r18, 0x0C	; 12
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	2c 1b       	sub	r18, r28
    2250:	3d 0b       	sbc	r19, r29
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <__stack+0x59>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	2a 95       	dec	r18
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <__stack+0x55>
		data_temp += temp;
    225c:	20 91 26 03 	lds	r18, 0x0326
    2260:	28 0f       	add	r18, r24
    2262:	20 93 26 03 	sts	0x0326, r18
    2266:	d6 cf       	rjmp	.-84     	; 0x2214 <__stack+0x15>
//			SetDCOC3PWM_GB(64,64);
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

		if(REMOTE){
    2268:	80 91 03 01 	lds	r24, 0x0103
    226c:	86 ff       	sbrs	r24, 6
    226e:	3d c0       	rjmp	.+122    	; 0x22ea <__stack+0xeb>
		//if(bit_is_set(PINJ,6)) {
			//if high it is only a noise
				//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
				//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
				PCICR |= (1 << PCIE1);
    2270:	80 91 68 00 	lds	r24, 0x0068
    2274:	82 60       	ori	r24, 0x02	; 2
    2276:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);
    227a:	80 91 6c 00 	lds	r24, 0x006C
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	80 93 6c 00 	sts	0x006C, r24
				e_destroy_agenda(e_read_remote_control);
    2284:	8a ed       	ldi	r24, 0xDA	; 218
    2286:	90 e1       	ldi	r25, 0x10	; 16
    2288:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <e_destroy_agenda>
				i = -1;
    228c:	d0 93 02 02 	sts	0x0202, r29
    2290:	c0 93 01 02 	sts	0x0201, r28
		command_received=1;
	} 
	
	if(i!=-1)
		i++;	
}
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret
		unsigned char temp = REMOTE;
		temp <<= 6+6-i;
		data_temp += temp;
	}
	
	else if (i == 13) // last bit read
    229a:	cd 30       	cpi	r28, 0x0D	; 13
    229c:	d1 05       	cpc	r29, r1
    229e:	09 f0       	breq	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	b9 cf       	rjmp	.-142    	; 0x2214 <__stack+0x15>
//		}

		//e_set_led(1,0);
		//IEC0bits.INT0IE = 1;   	//enable interrupt from falling edge
		//IFS0bits.INT0IF = 0;    //clear interrupt flag from first receive !
		PCICR |= (1 << PCIE1);
    22a2:	80 91 68 00 	lds	r24, 0x0068
    22a6:	82 60       	ori	r24, 0x02	; 2
    22a8:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 |= (1 << PCINT15);
    22ac:	80 91 6c 00 	lds	r24, 0x006C
    22b0:	80 68       	ori	r24, 0x80	; 128
    22b2:	80 93 6c 00 	sts	0x006C, r24
		e_destroy_agenda(e_read_remote_control);
    22b6:	8a ed       	ldi	r24, 0xDA	; 218
    22b8:	90 e1       	ldi	r25, 0x10	; 16
    22ba:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <e_destroy_agenda>
		i = -1;
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	9f ef       	ldi	r25, 0xFF	; 255
    22c2:	90 93 02 02 	sts	0x0202, r25
    22c6:	80 93 01 02 	sts	0x0201, r24
		check = check_temp;
    22ca:	80 91 28 03 	lds	r24, 0x0328
    22ce:	80 93 00 02 	sts	0x0200, r24
		address = address_temp;
    22d2:	80 91 27 03 	lds	r24, 0x0327
    22d6:	80 93 23 03 	sts	0x0323, r24
		data_ir = data_temp;
    22da:	80 91 26 03 	lds	r24, 0x0326
    22de:	80 93 24 03 	sts	0x0324, r24
		command_received=1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	80 93 c2 03 	sts	0x03C2, r24
    22e8:	9a cf       	rjmp	.-204    	; 0x221e <__stack+0x1f>
				e_destroy_agenda(e_read_remote_control);
				i = -1;
			}
		else			   // read the check bit
			{
				e_set_agenda_cycle(e_read_remote_control, 6); //cycle value is 0.6 to go to check bit[ms]
    22ea:	8a ed       	ldi	r24, 0xDA	; 218
    22ec:	90 e1       	ldi	r25, 0x10	; 16
    22ee:	66 e0       	ldi	r22, 0x06	; 6
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	0e 94 1d 10 	call	0x203a	; 0x203a <e_set_agenda_cycle>
				check_temp = address_temp = data_temp = 0;
    22f6:	10 92 26 03 	sts	0x0326, r1
    22fa:	10 92 27 03 	sts	0x0327, r1
    22fe:	10 92 28 03 	sts	0x0328, r1
    2302:	c1 e0       	ldi	r28, 0x01	; 1
    2304:	d0 e0       	ldi	r29, 0x00	; 0
    2306:	87 cf       	rjmp	.-242    	; 0x2216 <__stack+0x17>
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}

//	e_set_led(3,1);
		check_temp = REMOTE;	   // read the check bit
    2308:	80 91 03 01 	lds	r24, 0x0103
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	80 74       	andi	r24, 0x40	; 64
    2310:	90 70       	andi	r25, 0x00	; 0
    2312:	08 2e       	mov	r0, r24
    2314:	89 2f       	mov	r24, r25
    2316:	00 0c       	add	r0, r0
    2318:	88 1f       	adc	r24, r24
    231a:	99 0b       	sbc	r25, r25
    231c:	00 0c       	add	r0, r0
    231e:	88 1f       	adc	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	80 93 28 03 	sts	0x0328, r24
		e_set_agenda_cycle(e_read_remote_control, 18); //cycle value is 1.778[ms]
    2326:	8a ed       	ldi	r24, 0xDA	; 218
    2328:	90 e1       	ldi	r25, 0x10	; 16
    232a:	62 e1       	ldi	r22, 0x12	; 18
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	0e 94 1d 10 	call	0x203a	; 0x203a <e_set_agenda_cycle>
    2332:	c0 91 01 02 	lds	r28, 0x0201
    2336:	d0 91 02 02 	lds	r29, 0x0202
		address = address_temp;
		data_ir = data_temp;
		command_received=1;
	} 
	
	if(i!=-1)
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	cf 3f       	cpi	r28, 0xFF	; 255
    233e:	d8 07       	cpc	r29, r24
    2340:	09 f0       	breq	.+2      	; 0x2344 <__stack+0x145>
    2342:	68 cf       	rjmp	.-304    	; 0x2214 <__stack+0x15>
    2344:	6c cf       	rjmp	.-296    	; 0x221e <__stack+0x1f>

00002346 <e_init_remote_control>:

/*! \brief Initialise the IR receiver ports */
void e_init_remote_control(void) // initialisation for IR interruptions on INT0
{

	PCICR |= (1 << PCIE1);		// enable interrupt on change of PCINT15:8 pins
    2346:	e8 e6       	ldi	r30, 0x68	; 104
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	82 60       	ori	r24, 0x02	; 2
    234e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);	// enable PCINT15
    2350:	ec e6       	ldi	r30, 0x6C	; 108
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 68       	ori	r24, 0x80	; 128
    2358:	80 83       	st	Z, r24
	INTCON2bits.INT0EP = 1;      //set interrupt polarity to falling edge
	IFS0bits.INT0IF = 0;      //clear to enable interrupt
	IEC0bits.INT0IE = 1;      //enable interrupt on INT0  
	return;
*/
}
    235a:	08 95       	ret

0000235c <__vector_10>:

ISR(PCINT1_vect) {
    235c:	1f 92       	push	r1
    235e:	0f 92       	push	r0
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	0f 92       	push	r0
    2364:	0b b6       	in	r0, 0x3b	; 59
    2366:	0f 92       	push	r0
    2368:	11 24       	eor	r1, r1
    236a:	2f 93       	push	r18
    236c:	3f 93       	push	r19
    236e:	4f 93       	push	r20
    2370:	5f 93       	push	r21
    2372:	6f 93       	push	r22
    2374:	7f 93       	push	r23
    2376:	8f 93       	push	r24
    2378:	9f 93       	push	r25
    237a:	af 93       	push	r26
    237c:	bf 93       	push	r27
    237e:	ef 93       	push	r30
    2380:	ff 93       	push	r31
//			SetDCOC4PWM_GB(64,64);
//			SetDCOC5PWM_GB(64,64);
//		}


	if(bit_is_clear(PINJ, 6)) {
    2382:	80 91 03 01 	lds	r24, 0x0103
    2386:	86 fd       	sbrc	r24, 6
    2388:	16 c0       	rjmp	.+44     	; 0x23b6 <__vector_10+0x5a>
			TCCR1A &= ~(1 << COM1C1);
			PORTB &= ~(1 << 7);
		}
*/
		//IEC0bits.INT0IE = 0;   			//disable interrup from falling edge
		PCICR &= ~(1 << PCIE1);
    238a:	80 91 68 00 	lds	r24, 0x0068
    238e:	8d 7f       	andi	r24, 0xFD	; 253
    2390:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 &= ~(1 << PCINT15);
    2394:	80 91 6c 00 	lds	r24, 0x006C
    2398:	8f 77       	andi	r24, 0x7F	; 127
    239a:	80 93 6c 00 	sts	0x006C, r24
	//	e_set_led(1,1);
		e_activate_agenda(e_read_remote_control, 20); //activate the IR Receiver agenda with a 2.1[ms] cycle value
    239e:	8a ed       	ldi	r24, 0xDA	; 218
    23a0:	90 e1       	ldi	r25, 0x10	; 16
    23a2:	64 e1       	ldi	r22, 0x14	; 20
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <e_activate_agenda>
		check_temp = address_temp = data_temp = 0;
    23aa:	10 92 26 03 	sts	0x0326, r1
    23ae:	10 92 27 03 	sts	0x0327, r1
    23b2:	10 92 28 03 	sts	0x0328, r1
		return;
	}
}
    23b6:	ff 91       	pop	r31
    23b8:	ef 91       	pop	r30
    23ba:	bf 91       	pop	r27
    23bc:	af 91       	pop	r26
    23be:	9f 91       	pop	r25
    23c0:	8f 91       	pop	r24
    23c2:	7f 91       	pop	r23
    23c4:	6f 91       	pop	r22
    23c6:	5f 91       	pop	r21
    23c8:	4f 91       	pop	r20
    23ca:	3f 91       	pop	r19
    23cc:	2f 91       	pop	r18
    23ce:	0f 90       	pop	r0
    23d0:	0b be       	out	0x3b, r0	; 59
    23d2:	0f 90       	pop	r0
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	0f 90       	pop	r0
    23d8:	1f 90       	pop	r1
    23da:	18 95       	reti

000023dc <e_get_check>:
/** \brief Read the check bit
 * \return	check	check bit of the signal
 */
unsigned char e_get_check(void) {
	return check;
}
    23dc:	80 91 00 02 	lds	r24, 0x0200
    23e0:	08 95       	ret

000023e2 <e_get_address>:
/** \brief Read the adress of the commande
 * \return	adress	adress part of the signal
 */
unsigned char e_get_address(void) {
	return address;
}
    23e2:	80 91 23 03 	lds	r24, 0x0323
    23e6:	08 95       	ret

000023e8 <e_get_data>:
/** \brief Read the data of the command
 * \return	data	data part of the signal
 */
unsigned char e_get_data(void) {
	return data_ir;
}
    23e8:	80 91 24 03 	lds	r24, 0x0324
    23ec:	08 95       	ret

000023ee <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    23ee:	08 95       	ret

000023f0 <start_vertical_speed_control>:

void start_vertical_speed_control(signed long int *pwm_left, signed long int *pwm_right) {

}
    23f0:	08 95       	ret

000023f2 <start_orizzontal_speed_control>:

void start_orizzontal_speed_control(signed long int *pwm_left, signed long int *pwm_right) {
    23f2:	2f 92       	push	r2
    23f4:	3f 92       	push	r3
    23f6:	4f 92       	push	r4
    23f8:	5f 92       	push	r5
    23fa:	6f 92       	push	r6
    23fc:	7f 92       	push	r7
    23fe:	8f 92       	push	r8
    2400:	9f 92       	push	r9
    2402:	af 92       	push	r10
    2404:	bf 92       	push	r11
    2406:	cf 92       	push	r12
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	2c 97       	sbiw	r28, 0x0c	; 12
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	9c 87       	std	Y+12, r25	; 0x0c
    2428:	8b 87       	std	Y+11, r24	; 0x0b
    242a:	79 87       	std	Y+9, r23	; 0x09
    242c:	68 87       	std	Y+8, r22	; 0x08

	signed long int pwm_left_working = *pwm_left;
    242e:	fc 01       	movw	r30, r24
    2430:	20 80       	ld	r2, Z
    2432:	31 80       	ldd	r3, Z+1	; 0x01
    2434:	42 80       	ldd	r4, Z+2	; 0x02
    2436:	53 80       	ldd	r5, Z+3	; 0x03
	signed long int pwm_right_working = *pwm_right;
    2438:	fb 01       	movw	r30, r22
    243a:	a0 80       	ld	r10, Z
    243c:	b1 80       	ldd	r11, Z+1	; 0x01
    243e:	c2 80       	ldd	r12, Z+2	; 0x02
    2440:	d3 80       	ldd	r13, Z+3	; 0x03

	if(*pwm_left==0 && *pwm_right==0)
    2442:	21 14       	cp	r2, r1
    2444:	31 04       	cpc	r3, r1
    2446:	41 04       	cpc	r4, r1
    2448:	51 04       	cpc	r5, r1
    244a:	31 f4       	brne	.+12     	; 0x2458 <start_orizzontal_speed_control+0x66>
    244c:	a1 14       	cp	r10, r1
    244e:	b1 04       	cpc	r11, r1
    2450:	c1 04       	cpc	r12, r1
    2452:	d1 04       	cpc	r13, r1
    2454:	09 f4       	brne	.+2      	; 0x2458 <start_orizzontal_speed_control+0x66>
    2456:	bd c1       	rjmp	.+890    	; 0x27d2 <start_orizzontal_speed_control+0x3e0>
		return;

	delta_right_speeds[1] = delta_right_speeds[0];
    2458:	60 90 fe 03 	lds	r6, 0x03FE
    245c:	70 90 ff 03 	lds	r7, 0x03FF
    2460:	80 90 00 04 	lds	r8, 0x0400
    2464:	90 90 01 04 	lds	r9, 0x0401
    2468:	60 92 02 04 	sts	0x0402, r6
    246c:	70 92 03 04 	sts	0x0403, r7
    2470:	80 92 04 04 	sts	0x0404, r8
    2474:	90 92 05 04 	sts	0x0405, r9
	if(pwm_right_working >= 0) {
    2478:	d7 fc       	sbrc	r13, 7
    247a:	35 c2       	rjmp	.+1130   	; 0x28e6 <start_orizzontal_speed_control+0x4f4>
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
    247c:	80 91 7d 03 	lds	r24, 0x037D
    2480:	90 91 7e 03 	lds	r25, 0x037E
    2484:	a0 e0       	ldi	r26, 0x00	; 0
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	86 01       	movw	r16, r12
    248a:	75 01       	movw	r14, r10
    248c:	e8 1a       	sub	r14, r24
    248e:	f9 0a       	sbc	r15, r25
    2490:	0a 0b       	sbc	r16, r26
    2492:	1b 0b       	sbc	r17, r27
    2494:	e0 92 9b 03 	sts	0x039B, r14
    2498:	f0 92 9c 03 	sts	0x039C, r15
    249c:	00 93 9d 03 	sts	0x039D, r16
    24a0:	10 93 9e 03 	sts	0x039E, r17
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
	}
	delta_right_speeds[0] = delta_right_speed;
    24a4:	e0 92 fe 03 	sts	0x03FE, r14
    24a8:	f0 92 ff 03 	sts	0x03FF, r15
    24ac:	00 93 00 04 	sts	0x0400, r16
    24b0:	10 93 01 04 	sts	0x0401, r17
	delta_right_speed_sum += delta_right_speed;
    24b4:	60 91 a3 03 	lds	r22, 0x03A3
    24b8:	70 91 a4 03 	lds	r23, 0x03A4
    24bc:	80 91 a5 03 	lds	r24, 0x03A5
    24c0:	90 91 a6 03 	lds	r25, 0x03A6
    24c4:	6e 0d       	add	r22, r14
    24c6:	7f 1d       	adc	r23, r15
    24c8:	80 1f       	adc	r24, r16
    24ca:	91 1f       	adc	r25, r17
    24cc:	60 93 a3 03 	sts	0x03A3, r22
    24d0:	70 93 a4 03 	sts	0x03A4, r23
    24d4:	80 93 a5 03 	sts	0x03A5, r24
    24d8:	90 93 a6 03 	sts	0x03A6, r25

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
    24dc:	61 38       	cpi	r22, 0x81	; 129
    24de:	fc e0       	ldi	r31, 0x0C	; 12
    24e0:	7f 07       	cpc	r23, r31
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	8f 07       	cpc	r24, r31
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	9f 07       	cpc	r25, r31
    24ea:	0c f0       	brlt	.+2      	; 0x24ee <start_orizzontal_speed_control+0xfc>
    24ec:	8b c1       	rjmp	.+790    	; 0x2804 <start_orizzontal_speed_control+0x412>
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    24ee:	60 38       	cpi	r22, 0x80	; 128
    24f0:	e3 ef       	ldi	r30, 0xF3	; 243
    24f2:	7e 07       	cpc	r23, r30
    24f4:	ef ef       	ldi	r30, 0xFF	; 255
    24f6:	8e 07       	cpc	r24, r30
    24f8:	ef ef       	ldi	r30, 0xFF	; 255
    24fa:	9e 07       	cpc	r25, r30
    24fc:	0c f4       	brge	.+2      	; 0x2500 <start_orizzontal_speed_control+0x10e>
    24fe:	2c c2       	rjmp	.+1112   	; 0x2958 <start_orizzontal_speed_control+0x566>
    2500:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    2504:	9b 01       	movw	r18, r22
    2506:	ac 01       	movw	r20, r24
    2508:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__addsf3>
    250c:	6d 83       	std	Y+5, r22	; 0x05
    250e:	7e 83       	std	Y+6, r23	; 0x06
    2510:	8f 83       	std	Y+7, r24	; 0x07
    2512:	9a 87       	std	Y+10, r25	; 0x0a
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
    2514:	c8 01       	movw	r24, r16
    2516:	b7 01       	movw	r22, r14
    2518:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	48 ec       	ldi	r20, 0xC8	; 200
    2522:	52 e4       	ldi	r21, 0x42	; 66
    2524:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3>
    2528:	69 83       	std	Y+1, r22	; 0x01
    252a:	7a 83       	std	Y+2, r23	; 0x02
    252c:	8b 83       	std	Y+3, r24	; 0x03
    252e:	9c 83       	std	Y+4, r25	; 0x04
    2530:	c8 01       	movw	r24, r16
    2532:	b7 01       	movw	r22, r14
    2534:	66 19       	sub	r22, r6
    2536:	77 09       	sbc	r23, r7
    2538:	88 09       	sbc	r24, r8
    253a:	99 09       	sbc	r25, r9
    253c:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3>
    254c:	9b 01       	movw	r18, r22
    254e:	ac 01       	movw	r20, r24
    2550:	69 81       	ldd	r22, Y+1	; 0x01
    2552:	7a 81       	ldd	r23, Y+2	; 0x02
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__addsf3>
    255c:	bd 81       	ldd	r27, Y+5	; 0x05
    255e:	ae 81       	ldd	r26, Y+6	; 0x06
    2560:	ef 80       	ldd	r14, Y+7	; 0x07
    2562:	6a 84       	ldd	r6, Y+10	; 0x0a
    2564:	2b 2f       	mov	r18, r27
    2566:	3a 2f       	mov	r19, r26
    2568:	4e 2d       	mov	r20, r14
    256a:	56 2d       	mov	r21, r6
    256c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__addsf3>
    2570:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__fixsfsi>
    2574:	7b 01       	movw	r14, r22
    2576:	8c 01       	movw	r16, r24
    2578:	60 93 ab 03 	sts	0x03AB, r22
    257c:	70 93 ac 03 	sts	0x03AC, r23
    2580:	80 93 ad 03 	sts	0x03AD, r24
    2584:	90 93 ae 03 	sts	0x03AE, r25
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;
    2588:	c6 01       	movw	r24, r12
    258a:	b5 01       	movw	r22, r10
    258c:	28 e7       	ldi	r18, 0x78	; 120
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	50 e0       	ldi	r21, 0x00	; 0
    2594:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__mulsi3>
    2598:	6e 0d       	add	r22, r14
    259a:	7f 1d       	adc	r23, r15
    259c:	80 1f       	adc	r24, r16
    259e:	91 1f       	adc	r25, r17
    25a0:	60 93 8f 03 	sts	0x038F, r22
    25a4:	70 93 90 03 	sts	0x0390, r23
    25a8:	80 93 91 03 	sts	0x0391, r24
    25ac:	90 93 92 03 	sts	0x0392, r25

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    25b0:	97 fd       	sbrc	r25, 7
    25b2:	76 c1       	rjmp	.+748    	; 0x28a0 <start_orizzontal_speed_control+0x4ae>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
    25b4:	16 16       	cp	r1, r22
    25b6:	17 06       	cpc	r1, r23
    25b8:	18 06       	cpc	r1, r24
    25ba:	19 06       	cpc	r1, r25
    25bc:	0c f0       	brlt	.+2      	; 0x25c0 <start_orizzontal_speed_control+0x1ce>
    25be:	7d c1       	rjmp	.+762    	; 0x28ba <start_orizzontal_speed_control+0x4c8>
    25c0:	d7 fc       	sbrc	r13, 7
    25c2:	fd c1       	rjmp	.+1018   	; 0x29be <start_orizzontal_speed_control+0x5cc>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    25c4:	61 3c       	cpi	r22, 0xC1	; 193
    25c6:	ed e5       	ldi	r30, 0x5D	; 93
    25c8:	7e 07       	cpc	r23, r30
    25ca:	e0 e0       	ldi	r30, 0x00	; 0
    25cc:	8e 07       	cpc	r24, r30
    25ce:	e0 e0       	ldi	r30, 0x00	; 0
    25d0:	9e 07       	cpc	r25, r30
    25d2:	0c f4       	brge	.+2      	; 0x25d6 <start_orizzontal_speed_control+0x1e4>
    25d4:	72 c1       	rjmp	.+740    	; 0x28ba <start_orizzontal_speed_control+0x4c8>
    25d6:	80 ec       	ldi	r24, 0xC0	; 192
    25d8:	9d e5       	ldi	r25, 0x5D	; 93
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	80 93 8f 03 	sts	0x038F, r24
    25e2:	90 93 90 03 	sts	0x0390, r25
    25e6:	a0 93 91 03 	sts	0x0391, r26
    25ea:	b0 93 92 03 	sts	0x0392, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	delta_left_speeds[1] = delta_left_speeds[0]; 
    25ee:	a0 90 f6 03 	lds	r10, 0x03F6
    25f2:	b0 90 f7 03 	lds	r11, 0x03F7
    25f6:	c0 90 f8 03 	lds	r12, 0x03F8
    25fa:	d0 90 f9 03 	lds	r13, 0x03F9
    25fe:	a0 92 fa 03 	sts	0x03FA, r10
    2602:	b0 92 fb 03 	sts	0x03FB, r11
    2606:	c0 92 fc 03 	sts	0x03FC, r12
    260a:	d0 92 fd 03 	sts	0x03FD, r13
	if(pwm_left_working >= 0) {
    260e:	57 fc       	sbrc	r5, 7
    2610:	7d c1       	rjmp	.+762    	; 0x290c <start_orizzontal_speed_control+0x51a>
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
    2612:	80 91 7b 03 	lds	r24, 0x037B
    2616:	90 91 7c 03 	lds	r25, 0x037C
    261a:	a0 e0       	ldi	r26, 0x00	; 0
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	82 01       	movw	r16, r4
    2620:	71 01       	movw	r14, r2
    2622:	e8 1a       	sub	r14, r24
    2624:	f9 0a       	sbc	r15, r25
    2626:	0a 0b       	sbc	r16, r26
    2628:	1b 0b       	sbc	r17, r27
    262a:	e0 92 97 03 	sts	0x0397, r14
    262e:	f0 92 98 03 	sts	0x0398, r15
    2632:	00 93 99 03 	sts	0x0399, r16
    2636:	10 93 9a 03 	sts	0x039A, r17
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
	}
	delta_left_speeds[0] = delta_left_speed;
    263a:	e0 92 f6 03 	sts	0x03F6, r14
    263e:	f0 92 f7 03 	sts	0x03F7, r15
    2642:	00 93 f8 03 	sts	0x03F8, r16
    2646:	10 93 f9 03 	sts	0x03F9, r17
	delta_left_speed_sum += delta_left_speed;
    264a:	60 91 9f 03 	lds	r22, 0x039F
    264e:	70 91 a0 03 	lds	r23, 0x03A0
    2652:	80 91 a1 03 	lds	r24, 0x03A1
    2656:	90 91 a2 03 	lds	r25, 0x03A2
    265a:	6e 0d       	add	r22, r14
    265c:	7f 1d       	adc	r23, r15
    265e:	80 1f       	adc	r24, r16
    2660:	91 1f       	adc	r25, r17
    2662:	60 93 9f 03 	sts	0x039F, r22
    2666:	70 93 a0 03 	sts	0x03A0, r23
    266a:	80 93 a1 03 	sts	0x03A1, r24
    266e:	90 93 a2 03 	sts	0x03A2, r25

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
    2672:	61 38       	cpi	r22, 0x81	; 129
    2674:	2c e0       	ldi	r18, 0x0C	; 12
    2676:	72 07       	cpc	r23, r18
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	82 07       	cpc	r24, r18
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	92 07       	cpc	r25, r18
    2680:	0c f4       	brge	.+2      	; 0x2684 <start_orizzontal_speed_control+0x292>
    2682:	d3 c0       	rjmp	.+422    	; 0x282a <start_orizzontal_speed_control+0x438>
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2684:	80 e8       	ldi	r24, 0x80	; 128
    2686:	9c e0       	ldi	r25, 0x0C	; 12
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	80 93 9f 03 	sts	0x039F, r24
    2690:	90 93 a0 03 	sts	0x03A0, r25
    2694:	a0 93 a1 03 	sts	0x03A1, r26
    2698:	b0 93 a2 03 	sts	0x03A2, r27
    269c:	19 82       	std	Y+1, r1	; 0x01
    269e:	1d 82       	std	Y+5, r1	; 0x05
    26a0:	88 ec       	ldi	r24, 0xC8	; 200
    26a2:	8e 83       	std	Y+6, r24	; 0x06
    26a4:	e5 e4       	ldi	r30, 0x45	; 69
    26a6:	ef 83       	std	Y+7, r30	; 0x07
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
	}
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
    26a8:	c8 01       	movw	r24, r16
    26aa:	b7 01       	movw	r22, r14
    26ac:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	48 ec       	ldi	r20, 0xC8	; 200
    26b6:	52 e4       	ldi	r21, 0x42	; 66
    26b8:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3>
    26bc:	3b 01       	movw	r6, r22
    26be:	4c 01       	movw	r8, r24
    26c0:	c8 01       	movw	r24, r16
    26c2:	b7 01       	movw	r22, r14
    26c4:	6a 19       	sub	r22, r10
    26c6:	7b 09       	sbc	r23, r11
    26c8:	8c 09       	sbc	r24, r12
    26ca:	9d 09       	sbc	r25, r13
    26cc:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3>
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	c4 01       	movw	r24, r8
    26e2:	b3 01       	movw	r22, r6
    26e4:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__addsf3>
    26e8:	b9 81       	ldd	r27, Y+1	; 0x01
    26ea:	ad 81       	ldd	r26, Y+5	; 0x05
    26ec:	ee 80       	ldd	r14, Y+6	; 0x06
    26ee:	af 80       	ldd	r10, Y+7	; 0x07
    26f0:	2b 2f       	mov	r18, r27
    26f2:	3a 2f       	mov	r19, r26
    26f4:	4e 2d       	mov	r20, r14
    26f6:	5a 2d       	mov	r21, r10
    26f8:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__addsf3>
    26fc:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__fixsfsi>
    2700:	7b 01       	movw	r14, r22
    2702:	8c 01       	movw	r16, r24
    2704:	60 93 a7 03 	sts	0x03A7, r22
    2708:	70 93 a8 03 	sts	0x03A8, r23
    270c:	80 93 a9 03 	sts	0x03A9, r24
    2710:	90 93 aa 03 	sts	0x03AA, r25
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;
    2714:	c2 01       	movw	r24, r4
    2716:	b1 01       	movw	r22, r2
    2718:	28 e7       	ldi	r18, 0x78	; 120
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__mulsi3>
    2724:	6e 0d       	add	r22, r14
    2726:	7f 1d       	adc	r23, r15
    2728:	80 1f       	adc	r24, r16
    272a:	91 1f       	adc	r25, r17
    272c:	60 93 93 03 	sts	0x0393, r22
    2730:	70 93 94 03 	sts	0x0394, r23
    2734:	80 93 95 03 	sts	0x0395, r24
    2738:	90 93 96 03 	sts	0x0396, r25

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    273c:	97 fd       	sbrc	r25, 7
    273e:	89 c0       	rjmp	.+274    	; 0x2852 <start_orizzontal_speed_control+0x460>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
    2740:	16 16       	cp	r1, r22
    2742:	17 06       	cpc	r1, r23
    2744:	18 06       	cpc	r1, r24
    2746:	19 06       	cpc	r1, r25
    2748:	0c f0       	brlt	.+2      	; 0x274c <start_orizzontal_speed_control+0x35a>
    274a:	90 c0       	rjmp	.+288    	; 0x286c <start_orizzontal_speed_control+0x47a>
    274c:	57 fc       	sbrc	r5, 7
    274e:	17 c1       	rjmp	.+558    	; 0x297e <start_orizzontal_speed_control+0x58c>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2750:	61 3c       	cpi	r22, 0xC1	; 193
    2752:	ed e5       	ldi	r30, 0x5D	; 93
    2754:	7e 07       	cpc	r23, r30
    2756:	e0 e0       	ldi	r30, 0x00	; 0
    2758:	8e 07       	cpc	r24, r30
    275a:	e0 e0       	ldi	r30, 0x00	; 0
    275c:	9e 07       	cpc	r25, r30
    275e:	0c f4       	brge	.+2      	; 0x2762 <start_orizzontal_speed_control+0x370>
    2760:	85 c0       	rjmp	.+266    	; 0x286c <start_orizzontal_speed_control+0x47a>
    2762:	80 ec       	ldi	r24, 0xC0	; 192
    2764:	9d e5       	ldi	r25, 0x5D	; 93
    2766:	a0 e0       	ldi	r26, 0x00	; 0
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	80 93 93 03 	sts	0x0393, r24
    276e:	90 93 94 03 	sts	0x0394, r25
    2772:	a0 93 95 03 	sts	0x0395, r26
    2776:	b0 93 96 03 	sts	0x0396, r27
    277a:	64 eb       	ldi	r22, 0xB4	; 180
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	*pwm_left = pwm_left_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    2782:	eb 85       	ldd	r30, Y+11	; 0x0b
    2784:	fc 85       	ldd	r31, Y+12	; 0x0c
    2786:	60 83       	st	Z, r22
    2788:	71 83       	std	Z+1, r23	; 0x01
    278a:	82 83       	std	Z+2, r24	; 0x02
    278c:	93 83       	std	Z+3, r25	; 0x03
	*pwm_right = pwm_right_speed_controller*MAX_MOTORS_PWM/MAX_PWM;
    278e:	60 91 8f 03 	lds	r22, 0x038F
    2792:	70 91 90 03 	lds	r23, 0x0390
    2796:	80 91 91 03 	lds	r24, 0x0391
    279a:	90 91 92 03 	lds	r25, 0x0392
    279e:	26 e6       	ldi	r18, 0x66	; 102
    27a0:	32 e0       	ldi	r19, 0x02	; 2
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__mulsi3>
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	39 e0       	ldi	r19, 0x09	; 9
    27ae:	4d e3       	ldi	r20, 0x3D	; 61
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <__divmodsi4>
    27b6:	ca 01       	movw	r24, r20
    27b8:	b9 01       	movw	r22, r18
    27ba:	2c e3       	ldi	r18, 0x3C	; 60
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__mulsi3>
    27c6:	e8 85       	ldd	r30, Y+8	; 0x08
    27c8:	f9 85       	ldd	r31, Y+9	; 0x09
    27ca:	60 83       	st	Z, r22
    27cc:	71 83       	std	Z+1, r23	; 0x01
    27ce:	82 83       	std	Z+2, r24	; 0x02
    27d0:	93 83       	std	Z+3, r25	; 0x03

}
    27d2:	2c 96       	adiw	r28, 0x0c	; 12
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	cf 90       	pop	r12
    27ee:	bf 90       	pop	r11
    27f0:	af 90       	pop	r10
    27f2:	9f 90       	pop	r9
    27f4:	8f 90       	pop	r8
    27f6:	7f 90       	pop	r7
    27f8:	6f 90       	pop	r6
    27fa:	5f 90       	pop	r5
    27fc:	4f 90       	pop	r4
    27fe:	3f 90       	pop	r3
    2800:	2f 90       	pop	r2
    2802:	08 95       	ret
	}
	delta_right_speeds[0] = delta_right_speed;
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
    2804:	80 e8       	ldi	r24, 0x80	; 128
    2806:	9c e0       	ldi	r25, 0x0C	; 12
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	80 93 a3 03 	sts	0x03A3, r24
    2810:	90 93 a4 03 	sts	0x03A4, r25
    2814:	a0 93 a5 03 	sts	0x03A5, r26
    2818:	b0 93 a6 03 	sts	0x03A6, r27
    281c:	1d 82       	std	Y+5, r1	; 0x05
    281e:	1e 82       	std	Y+6, r1	; 0x06
    2820:	28 ec       	ldi	r18, 0xC8	; 200
    2822:	2f 83       	std	Y+7, r18	; 0x07
    2824:	85 e4       	ldi	r24, 0x45	; 69
    2826:	8a 87       	std	Y+10, r24	; 0x0a
    2828:	75 ce       	rjmp	.-790    	; 0x2514 <start_orizzontal_speed_control+0x122>
	delta_left_speeds[0] = delta_left_speed;
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
    282a:	60 38       	cpi	r22, 0x80	; 128
    282c:	f3 ef       	ldi	r31, 0xF3	; 243
    282e:	7f 07       	cpc	r23, r31
    2830:	ff ef       	ldi	r31, 0xFF	; 255
    2832:	8f 07       	cpc	r24, r31
    2834:	ff ef       	ldi	r31, 0xFF	; 255
    2836:	9f 07       	cpc	r25, r31
    2838:	0c f4       	brge	.+2      	; 0x283c <start_orizzontal_speed_control+0x44a>
    283a:	7b c0       	rjmp	.+246    	; 0x2932 <start_orizzontal_speed_control+0x540>
    283c:	0e 94 95 1a 	call	0x352a	; 0x352a <__floatsisf>
    2840:	9b 01       	movw	r18, r22
    2842:	ac 01       	movw	r20, r24
    2844:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__addsf3>
    2848:	69 83       	std	Y+1, r22	; 0x01
    284a:	7d 83       	std	Y+5, r23	; 0x05
    284c:	8e 83       	std	Y+6, r24	; 0x06
    284e:	9f 83       	std	Y+7, r25	; 0x07
    2850:	2b cf       	rjmp	.-426    	; 0x26a8 <start_orizzontal_speed_control+0x2b6>
   
	left_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_left_speed) + (float)D_ORIZZONTAL*((float)(delta_left_speeds[0]-delta_left_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_left_speed_sum);
       
	pwm_left_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_left_working) + left_increment;

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
    2852:	57 fc       	sbrc	r5, 7
    2854:	0b c0       	rjmp	.+22     	; 0x286c <start_orizzontal_speed_control+0x47a>
		pwm_left_speed_controller = 0;
    2856:	10 92 93 03 	sts	0x0393, r1
    285a:	10 92 94 03 	sts	0x0394, r1
    285e:	10 92 95 03 	sts	0x0395, r1
    2862:	10 92 96 03 	sts	0x0396, r1
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	cb 01       	movw	r24, r22
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    286c:	60 34       	cpi	r22, 0x40	; 64
    286e:	f2 ea       	ldi	r31, 0xA2	; 162
    2870:	7f 07       	cpc	r23, r31
    2872:	ff ef       	ldi	r31, 0xFF	; 255
    2874:	8f 07       	cpc	r24, r31
    2876:	ff ef       	ldi	r31, 0xFF	; 255
    2878:	9f 07       	cpc	r25, r31
    287a:	0c f0       	brlt	.+2      	; 0x287e <start_orizzontal_speed_control+0x48c>
    287c:	8b c0       	rjmp	.+278    	; 0x2994 <start_orizzontal_speed_control+0x5a2>
    287e:	80 e4       	ldi	r24, 0x40	; 64
    2880:	92 ea       	ldi	r25, 0xA2	; 162
    2882:	af ef       	ldi	r26, 0xFF	; 255
    2884:	bf ef       	ldi	r27, 0xFF	; 255
    2886:	80 93 93 03 	sts	0x0393, r24
    288a:	90 93 94 03 	sts	0x0394, r25
    288e:	a0 93 95 03 	sts	0x0395, r26
    2892:	b0 93 96 03 	sts	0x0396, r27
    2896:	6c e4       	ldi	r22, 0x4C	; 76
    2898:	7f ef       	ldi	r23, 0xFF	; 255
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	9f ef       	ldi	r25, 0xFF	; 255
    289e:	71 cf       	rjmp	.-286    	; 0x2782 <start_orizzontal_speed_control+0x390>

	right_increment = (signed long int)((float)P_ORIZZONTAL*((float)delta_right_speed) + (float)D_ORIZZONTAL*((float)(delta_right_speeds[0]-delta_right_speeds[1])) + (float)I_ORIZZONTAL*(float)delta_right_speed_sum);
     
	pwm_right_speed_controller = (signed long int)(K_FF_ORIZZONTAL*pwm_right_working) + right_increment;

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
    28a0:	d7 fc       	sbrc	r13, 7
    28a2:	0b c0       	rjmp	.+22     	; 0x28ba <start_orizzontal_speed_control+0x4c8>
		pwm_right_speed_controller = 0;
    28a4:	10 92 8f 03 	sts	0x038F, r1
    28a8:	10 92 90 03 	sts	0x0390, r1
    28ac:	10 92 91 03 	sts	0x0391, r1
    28b0:	10 92 92 03 	sts	0x0392, r1
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	cb 01       	movw	r24, r22
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    28ba:	60 34       	cpi	r22, 0x40	; 64
    28bc:	f2 ea       	ldi	r31, 0xA2	; 162
    28be:	7f 07       	cpc	r23, r31
    28c0:	ff ef       	ldi	r31, 0xFF	; 255
    28c2:	8f 07       	cpc	r24, r31
    28c4:	ff ef       	ldi	r31, 0xFF	; 255
    28c6:	9f 07       	cpc	r25, r31
    28c8:	0c f0       	brlt	.+2      	; 0x28cc <start_orizzontal_speed_control+0x4da>
    28ca:	91 ce       	rjmp	.-734    	; 0x25ee <start_orizzontal_speed_control+0x1fc>
    28cc:	80 e4       	ldi	r24, 0x40	; 64
    28ce:	92 ea       	ldi	r25, 0xA2	; 162
    28d0:	af ef       	ldi	r26, 0xFF	; 255
    28d2:	bf ef       	ldi	r27, 0xFF	; 255
    28d4:	80 93 8f 03 	sts	0x038F, r24
    28d8:	90 93 90 03 	sts	0x0390, r25
    28dc:	a0 93 91 03 	sts	0x0391, r26
    28e0:	b0 93 92 03 	sts	0x0392, r27
    28e4:	84 ce       	rjmp	.-760    	; 0x25ee <start_orizzontal_speed_control+0x1fc>

	delta_right_speeds[1] = delta_right_speeds[0];
	if(pwm_right_working >= 0) {
		delta_right_speed = (signed long int)pwm_right_working - (signed long int)last_right_vel;
	} else {
		delta_right_speed = (signed long int)pwm_right_working + (signed long int)last_right_vel;
    28e6:	e0 90 7d 03 	lds	r14, 0x037D
    28ea:	f0 90 7e 03 	lds	r15, 0x037E
    28ee:	00 e0       	ldi	r16, 0x00	; 0
    28f0:	10 e0       	ldi	r17, 0x00	; 0
    28f2:	ea 0c       	add	r14, r10
    28f4:	fb 1c       	adc	r15, r11
    28f6:	0c 1d       	adc	r16, r12
    28f8:	1d 1d       	adc	r17, r13
    28fa:	e0 92 9b 03 	sts	0x039B, r14
    28fe:	f0 92 9c 03 	sts	0x039C, r15
    2902:	00 93 9d 03 	sts	0x039D, r16
    2906:	10 93 9e 03 	sts	0x039E, r17
    290a:	cc cd       	rjmp	.-1128   	; 0x24a4 <start_orizzontal_speed_control+0xb2>

	delta_left_speeds[1] = delta_left_speeds[0]; 
	if(pwm_left_working >= 0) {
		delta_left_speed = (signed long int)pwm_left_working - (signed long int)last_left_vel; 
	} else {
		delta_left_speed = (signed long int)pwm_left_working + (signed long int)last_left_vel; 
    290c:	e0 90 7b 03 	lds	r14, 0x037B
    2910:	f0 90 7c 03 	lds	r15, 0x037C
    2914:	00 e0       	ldi	r16, 0x00	; 0
    2916:	10 e0       	ldi	r17, 0x00	; 0
    2918:	e2 0c       	add	r14, r2
    291a:	f3 1c       	adc	r15, r3
    291c:	04 1d       	adc	r16, r4
    291e:	15 1d       	adc	r17, r5
    2920:	e0 92 97 03 	sts	0x0397, r14
    2924:	f0 92 98 03 	sts	0x0398, r15
    2928:	00 93 99 03 	sts	0x0399, r16
    292c:	10 93 9a 03 	sts	0x039A, r17
    2930:	84 ce       	rjmp	.-760    	; 0x263a <start_orizzontal_speed_control+0x248>
	delta_left_speed_sum += delta_left_speed;

	if(delta_left_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	} else if(delta_left_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_left_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2932:	80 e8       	ldi	r24, 0x80	; 128
    2934:	93 ef       	ldi	r25, 0xF3	; 243
    2936:	af ef       	ldi	r26, 0xFF	; 255
    2938:	bf ef       	ldi	r27, 0xFF	; 255
    293a:	80 93 9f 03 	sts	0x039F, r24
    293e:	90 93 a0 03 	sts	0x03A0, r25
    2942:	a0 93 a1 03 	sts	0x03A1, r26
    2946:	b0 93 a2 03 	sts	0x03A2, r27
    294a:	19 82       	std	Y+1, r1	; 0x01
    294c:	1d 82       	std	Y+5, r1	; 0x05
    294e:	28 ec       	ldi	r18, 0xC8	; 200
    2950:	2e 83       	std	Y+6, r18	; 0x06
    2952:	85 ec       	ldi	r24, 0xC5	; 197
    2954:	8f 83       	std	Y+7, r24	; 0x07
    2956:	a8 ce       	rjmp	.-688    	; 0x26a8 <start_orizzontal_speed_control+0x2b6>
	delta_right_speed_sum += delta_right_speed;

	if(delta_right_speed_sum > (signed long int)I_LIMIT_ORIZZONTAL ) {
		delta_right_speed_sum = (signed long int)I_LIMIT_ORIZZONTAL;
	}else if(delta_right_speed_sum < -(signed long int)I_LIMIT_ORIZZONTAL) {
		delta_right_speed_sum = -(signed long int)I_LIMIT_ORIZZONTAL;
    2958:	80 e8       	ldi	r24, 0x80	; 128
    295a:	93 ef       	ldi	r25, 0xF3	; 243
    295c:	af ef       	ldi	r26, 0xFF	; 255
    295e:	bf ef       	ldi	r27, 0xFF	; 255
    2960:	80 93 a3 03 	sts	0x03A3, r24
    2964:	90 93 a4 03 	sts	0x03A4, r25
    2968:	a0 93 a5 03 	sts	0x03A5, r26
    296c:	b0 93 a6 03 	sts	0x03A6, r27
    2970:	1d 82       	std	Y+5, r1	; 0x05
    2972:	1e 82       	std	Y+6, r1	; 0x06
    2974:	f8 ec       	ldi	r31, 0xC8	; 200
    2976:	ff 83       	std	Y+7, r31	; 0x07
    2978:	25 ec       	ldi	r18, 0xC5	; 197
    297a:	2a 87       	std	Y+10, r18	; 0x0a
    297c:	cb cd       	rjmp	.-1130   	; 0x2514 <start_orizzontal_speed_control+0x122>

	if(pwm_left_speed_controller < 0 && pwm_left_working >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && pwm_left_working < 0 ) {
		pwm_left_speed_controller = 0;
    297e:	10 92 93 03 	sts	0x0393, r1
    2982:	10 92 94 03 	sts	0x0394, r1
    2986:	10 92 95 03 	sts	0x0395, r1
    298a:	10 92 96 03 	sts	0x0396, r1
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	cb 01       	movw	r24, r22
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2994:	26 e6       	ldi	r18, 0x66	; 102
    2996:	32 e0       	ldi	r19, 0x02	; 2
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__mulsi3>
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	39 e0       	ldi	r19, 0x09	; 9
    29a4:	4d e3       	ldi	r20, 0x3D	; 61
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <__divmodsi4>
    29ac:	ca 01       	movw	r24, r20
    29ae:	b9 01       	movw	r22, r18
    29b0:	2c e3       	ldi	r18, 0x3C	; 60
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__mulsi3>
    29bc:	e2 ce       	rjmp	.-572    	; 0x2782 <start_orizzontal_speed_control+0x390>

	if(pwm_right_speed_controller < 0 && pwm_right_working >= 0) {	// avoid changing moving direction
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && pwm_right_working < 0 ) {
		pwm_right_speed_controller = 0;
    29be:	10 92 8f 03 	sts	0x038F, r1
    29c2:	10 92 90 03 	sts	0x0390, r1
    29c6:	10 92 91 03 	sts	0x0391, r1
    29ca:	10 92 92 03 	sts	0x0392, r1
    29ce:	0f ce       	rjmp	.-994    	; 0x25ee <start_orizzontal_speed_control+0x1fc>

000029d0 <initPortsIO>:
#include <avr\io.h>

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
    29d0:	8f ef       	ldi	r24, 0xFF	; 255
    29d2:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
    29d4:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    29d6:	97 ef       	ldi	r25, 0xF7	; 247
    29d8:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
    29da:	90 ee       	ldi	r25, 0xE0	; 224
    29dc:	95 b9       	out	0x05, r25	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
    29de:	90 ef       	ldi	r25, 0xF0	; 240
    29e0:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
    29e2:	90 eb       	ldi	r25, 0xB0	; 176
    29e4:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    29e6:	9c ef       	ldi	r25, 0xFC	; 252
    29e8:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;	// default for unused pins is 0
    29ea:	93 e0       	ldi	r25, 0x03	; 3
    29ec:	9b b9       	out	0x0b, r25	; 11

	//DDRE = 0x18;	// pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly
	DDRE = 0xFF;	// all pins to output
    29ee:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    29f0:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
    29f2:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
    29f4:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;	// default for unused pins is 0
    29f6:	14 ba       	out	0x14, r1	; 20
	
	//DDRH = 0x58;	// pwm and dir for motor left as output; when usart is activated it changes the pins direction accordingly
	DDRH = 0xFF;	// all pins to output
    29f8:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
    29fc:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x8F;	// cliff pulses as output; charge-on, button0, remote as input; unused as output
    2a00:	9f e8       	ldi	r25, 0x8F	; 143
    2a02:	90 93 04 01 	sts	0x0104, r25
	PORTJ = 0x00;	// cliff pulse turned off
    2a06:	10 92 05 01 	sts	0x0105, r1

	DDRK = 0x00;	// adc channel pins as input
    2a0a:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
    2a0e:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00;	// pwm (unused) and unused pins to 0
    2a12:	10 92 0b 01 	sts	0x010B, r1

		
}
    2a16:	08 95       	ret

00002a18 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2a18:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2a1a:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2a1c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2a26:	08 95       	ret

00002a28 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a28:	94 ea       	ldi	r25, 0xA4	; 164
    2a2a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2a2e:	90 91 bc 00 	lds	r25, 0x00BC
    2a32:	97 ff       	sbrs	r25, 7
    2a34:	fc cf       	rjmp	.-8      	; 0x2a2e <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2a36:	90 91 b9 00 	lds	r25, 0x00B9
    2a3a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2a3c:	98 30       	cpi	r25, 0x08	; 8
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <i2c_start+0x20>
    2a40:	90 31       	cpi	r25, 0x10	; 16
    2a42:	11 f0       	breq	.+4      	; 0x2a48 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2a48:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a4c:	84 e8       	ldi	r24, 0x84	; 132
    2a4e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2a52:	80 91 bc 00 	lds	r24, 0x00BC
    2a56:	87 ff       	sbrs	r24, 7
    2a58:	fc cf       	rjmp	.-8      	; 0x2a52 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2a5a:	90 91 b9 00 	lds	r25, 0x00B9
    2a5e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2a60:	98 31       	cpi	r25, 0x18	; 24
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 34       	cpi	r25, 0x40	; 64
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2a6a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2a6c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2a6e:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	08 95       	ret

00002a74 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a74:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2a76:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2a78:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a7a:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2a7e:	90 91 bc 00 	lds	r25, 0x00BC
    2a82:	97 ff       	sbrs	r25, 7
    2a84:	fc cf       	rjmp	.-8      	; 0x2a7e <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2a86:	90 91 b9 00 	lds	r25, 0x00B9
    2a8a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2a8c:	98 30       	cpi	r25, 0x08	; 8
    2a8e:	11 f0       	breq	.+4      	; 0x2a94 <i2c_start_wait+0x20>
    2a90:	90 31       	cpi	r25, 0x10	; 16
    2a92:	99 f7       	brne	.-26     	; 0x2a7a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2a94:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2a98:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2a9c:	90 91 bc 00 	lds	r25, 0x00BC
    2aa0:	97 ff       	sbrs	r25, 7
    2aa2:	fc cf       	rjmp	.-8      	; 0x2a9c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2aa4:	90 91 b9 00 	lds	r25, 0x00B9
    2aa8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2aaa:	90 32       	cpi	r25, 0x20	; 32
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <i2c_start_wait+0x40>
    2aae:	98 35       	cpi	r25, 0x58	; 88
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <i2c_start_wait+0x40>
    2ab2:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2ab4:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2ab8:	90 91 bc 00 	lds	r25, 0x00BC
    2abc:	94 fd       	sbrc	r25, 4
    2abe:	fc cf       	rjmp	.-8      	; 0x2ab8 <i2c_start_wait+0x44>
    2ac0:	dc cf       	rjmp	.-72     	; 0x2a7a <i2c_start_wait+0x6>

00002ac2 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2ac2:	94 ea       	ldi	r25, 0xA4	; 164
    2ac4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2ac8:	90 91 bc 00 	lds	r25, 0x00BC
    2acc:	97 ff       	sbrs	r25, 7
    2ace:	fc cf       	rjmp	.-8      	; 0x2ac8 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ad0:	90 91 b9 00 	lds	r25, 0x00B9
    2ad4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2ad6:	98 30       	cpi	r25, 0x08	; 8
    2ad8:	21 f0       	breq	.+8      	; 0x2ae2 <i2c_rep_start+0x20>
    2ada:	90 31       	cpi	r25, 0x10	; 16
    2adc:	11 f0       	breq	.+4      	; 0x2ae2 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2ae2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ae6:	84 e8       	ldi	r24, 0x84	; 132
    2ae8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2aec:	80 91 bc 00 	lds	r24, 0x00BC
    2af0:	87 ff       	sbrs	r24, 7
    2af2:	fc cf       	rjmp	.-8      	; 0x2aec <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2af4:	90 91 b9 00 	lds	r25, 0x00B9
    2af8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2afa:	98 31       	cpi	r25, 0x18	; 24
    2afc:	21 f0       	breq	.+8      	; 0x2b06 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 34       	cpi	r25, 0x40	; 64
    2b02:	19 f0       	breq	.+6      	; 0x2b0a <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2b04:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2b06:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2b08:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	08 95       	ret

00002b0e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2b0e:	84 e9       	ldi	r24, 0x94	; 148
    2b10:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2b14:	80 91 bc 00 	lds	r24, 0x00BC
    2b18:	84 fd       	sbrc	r24, 4
    2b1a:	fc cf       	rjmp	.-8      	; 0x2b14 <i2c_stop+0x6>

}/* i2c_stop */
    2b1c:	08 95       	ret

00002b1e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2b1e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b22:	84 e8       	ldi	r24, 0x84	; 132
    2b24:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2b28:	80 91 bc 00 	lds	r24, 0x00BC
    2b2c:	87 ff       	sbrs	r24, 7
    2b2e:	fc cf       	rjmp	.-8      	; 0x2b28 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2b30:	90 91 b9 00 	lds	r25, 0x00B9
    2b34:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	98 32       	cpi	r25, 0x28	; 40
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2b3c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2b40:	08 95       	ret

00002b42 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2b42:	84 ec       	ldi	r24, 0xC4	; 196
    2b44:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2b48:	80 91 bc 00 	lds	r24, 0x00BC
    2b4c:	87 ff       	sbrs	r24, 7
    2b4e:	fc cf       	rjmp	.-8      	; 0x2b48 <i2c_readAck+0x6>

    return TWDR;
    2b50:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2b54:	08 95       	ret

00002b56 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b56:	84 e8       	ldi	r24, 0x84	; 132
    2b58:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2b5c:	80 91 bc 00 	lds	r24, 0x00BC
    2b60:	87 ff       	sbrs	r24, 7
    2b62:	fc cf       	rjmp	.-8      	; 0x2b5c <i2c_readNak+0x6>
	
    return TWDR;
    2b64:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2b68:	08 95       	ret

00002b6a <initUsart>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	

	// set baudrate
	UBRR0H = 0;
    2b6a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2b6e:	80 e1       	ldi	r24, 0x10	; 16
    2b70:	80 93 c4 00 	sts	0x00C4, r24

	//UCSR0A  &= ~(1 << U2X0);								// disable double transmission speed
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2b74:	e0 ec       	ldi	r30, 0xC0	; 192
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	82 60       	ori	r24, 0x02	; 2
    2b7c:	80 83       	st	Z, r24

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt
    2b7e:	e1 ec       	ldi	r30, 0xC1	; 193
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	88 69       	ori	r24, 0x98	; 152
    2b86:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8data, no parity, 1 stop bit
    2b88:	e2 ec       	ldi	r30, 0xC2	; 194
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	86 60       	ori	r24, 0x06	; 6
    2b90:	80 83       	st	Z, r24

}
    2b92:	08 95       	ret

00002b94 <usartTransmit>:

void usartTransmit(unsigned char data) {

	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    2b94:	90 91 c0 00 	lds	r25, 0x00C0
    2b98:	95 ff       	sbrs	r25, 5
    2b9a:	fc cf       	rjmp	.-8      	; 0x2b94 <usartTransmit>

	// put data into buffer, sends the data
	UDR0 = data;
    2b9c:	80 93 c6 00 	sts	0x00C6, r24

}
    2ba0:	08 95       	ret

00002ba2 <__vector_25>:

ISR(USART0_RX_vect) {
    2ba2:	1f 92       	push	r1
    2ba4:	0f 92       	push	r0
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	0f 92       	push	r0
    2baa:	11 24       	eor	r1, r1
    2bac:	2f 93       	push	r18
    2bae:	8f 93       	push	r24
    2bb0:	9f 93       	push	r25
    2bb2:	af 93       	push	r26
    2bb4:	bf 93       	push	r27

	char receivedByte = UDR0;
    2bb6:	80 91 c6 00 	lds	r24, 0x00C6

	if(choosePeripheral) {
    2bba:	90 91 0f 02 	lds	r25, 0x020F
    2bbe:	99 23       	and	r25, r25
    2bc0:	c9 f0       	breq	.+50     	; 0x2bf4 <__vector_25+0x52>
		switch(receivedByte) {
    2bc2:	82 33       	cpi	r24, 0x32	; 50
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <__vector_25+0x26>
    2bc6:	56 c0       	rjmp	.+172    	; 0x2c74 <__vector_25+0xd2>
    2bc8:	83 33       	cpi	r24, 0x33	; 51
    2bca:	58 f5       	brcc	.+86     	; 0x2c22 <__vector_25+0x80>
    2bcc:	80 33       	cpi	r24, 0x30	; 48
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <__vector_25+0x30>
    2bd0:	79 c0       	rjmp	.+242    	; 0x2cc4 <__vector_25+0x122>
    2bd2:	81 33       	cpi	r24, 0x31	; 49
    2bd4:	29 f4       	brne	.+10     	; 0x2be0 <__vector_25+0x3e>
			case '0': // red led
				peripheralChoice = 0;
				choosePeripheral = 0;
				break;
			case '1': // green led
				peripheralChoice = 1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 0e 02 	sts	0x020E, r24
				choosePeripheral = 0;
    2bdc:	10 92 0f 02 	sts	0x020F, r1

	}



}
    2be0:	bf 91       	pop	r27
    2be2:	af 91       	pop	r26
    2be4:	9f 91       	pop	r25
    2be6:	8f 91       	pop	r24
    2be8:	2f 91       	pop	r18
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2bf4:	90 91 0e 02 	lds	r25, 0x020E
    2bf8:	92 30       	cpi	r25, 0x02	; 2
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <__vector_25+0x5c>
    2bfc:	41 c0       	rjmp	.+130    	; 0x2c80 <__vector_25+0xde>
    2bfe:	93 30       	cpi	r25, 0x03	; 3
    2c00:	08 f1       	brcs	.+66     	; 0x2c44 <__vector_25+0xa2>
    2c02:	94 30       	cpi	r25, 0x04	; 4
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <__vector_25+0x66>
    2c06:	89 c0       	rjmp	.+274    	; 0x2d1a <__vector_25+0x178>
    2c08:	94 30       	cpi	r25, 0x04	; 4
    2c0a:	08 f4       	brcc	.+2      	; 0x2c0e <__vector_25+0x6c>
    2c0c:	6c c0       	rjmp	.+216    	; 0x2ce6 <__vector_25+0x144>
    2c0e:	95 30       	cpi	r25, 0x05	; 5
    2c10:	39 f7       	brne	.-50     	; 0x2be0 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 5: // adc
				if(receivedByte == 's') {
    2c12:	83 37       	cpi	r24, 0x73	; 115
    2c14:	29 f7       	brne	.-54     	; 0x2be0 <__vector_25+0x3e>
					sendAdcValues = 0;
    2c16:	10 92 c0 03 	sts	0x03C0, r1
					choosePeripheral = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	80 93 0f 02 	sts	0x020F, r24
    2c20:	df cf       	rjmp	.-66     	; 0x2be0 <__vector_25+0x3e>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
    2c22:	84 33       	cpi	r24, 0x34	; 52
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <__vector_25+0x86>
    2c26:	59 c0       	rjmp	.+178    	; 0x2cda <__vector_25+0x138>
    2c28:	84 33       	cpi	r24, 0x34	; 52
    2c2a:	08 f4       	brcc	.+2      	; 0x2c2e <__vector_25+0x8c>
    2c2c:	50 c0       	rjmp	.+160    	; 0x2cce <__vector_25+0x12c>
    2c2e:	85 33       	cpi	r24, 0x35	; 53
    2c30:	b9 f6       	brne	.-82     	; 0x2be0 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
				choosePeripheral = 0;
				break;
			case '5':
				peripheralChoice = 5;
    2c32:	85 e0       	ldi	r24, 0x05	; 5
    2c34:	80 93 0e 02 	sts	0x020E, r24
				choosePeripheral = 0;
    2c38:	10 92 0f 02 	sts	0x020F, r1
				sendAdcValues = 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	80 93 c0 03 	sts	0x03C0, r24
				break;
    2c42:	ce cf       	rjmp	.-100    	; 0x2be0 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2c44:	99 23       	and	r25, r25
    2c46:	91 f5       	brne	.+100    	; 0x2cac <__vector_25+0x10a>
			case 0:	// red led
				if(receivedByte == '-') {
    2c48:	8d 32       	cpi	r24, 0x2D	; 45
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <__vector_25+0xac>
    2c4c:	05 c1       	rjmp	.+522    	; 0x2e58 <__vector_25+0x2b6>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
					OCR1A = pwm_red;
				} else if(receivedByte == '+') {
    2c4e:	8b 32       	cpi	r24, 0x2B	; 43
    2c50:	21 f7       	brne	.-56     	; 0x2c1a <__vector_25+0x78>
					current_pwm = pwm_red-10;
    2c52:	80 91 0b 02 	lds	r24, 0x020B
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2c5a:	97 fd       	sbrc	r25, 7
    2c5c:	9c c1       	rjmp	.+824    	; 0x2f96 <__vector_25+0x3f4>
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2c5e:	80 93 0b 02 	sts	0x020B, r24
					if(pwm_red == 0) {
    2c62:	88 23       	and	r24, r24
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <__vector_25+0xc6>
    2c66:	99 c1       	rjmp	.+818    	; 0x2f9a <__vector_25+0x3f8>
						TCCR1A &= ~(1 << COM1A1);
						PORTB &= ~(1 << 5);
					} else {
						OCR1A = pwm_red;
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	90 93 89 00 	sts	0x0089, r25
    2c6e:	80 93 88 00 	sts	0x0088, r24
    2c72:	b6 cf       	rjmp	.-148    	; 0x2be0 <__vector_25+0x3e>
			case '1': // green led
				peripheralChoice = 1;
				choosePeripheral = 0;
				break;
			case '2': // blue led
				peripheralChoice = 2;
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	80 93 0e 02 	sts	0x020E, r24
				choosePeripheral = 0;
    2c7a:	10 92 0f 02 	sts	0x020F, r1
				break;
    2c7e:	b0 cf       	rjmp	.-160    	; 0x2be0 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
    2c80:	8d 32       	cpi	r24, 0x2D	; 45
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <__vector_25+0xe4>
    2c84:	2f c1       	rjmp	.+606    	; 0x2ee4 <__vector_25+0x342>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
					OCR1C = pwm_blue;
				} else if(receivedByte == '+') {
    2c86:	8b 32       	cpi	r24, 0x2B	; 43
    2c88:	41 f6       	brne	.-112    	; 0x2c1a <__vector_25+0x78>
					current_pwm = pwm_blue-10;
    2c8a:	80 91 0d 02 	lds	r24, 0x020D
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2c92:	97 fd       	sbrc	r25, 7
    2c94:	92 c1       	rjmp	.+804    	; 0x2fba <__vector_25+0x418>
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2c96:	80 93 0d 02 	sts	0x020D, r24
					if(pwm_blue == 0) {
    2c9a:	88 23       	and	r24, r24
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <__vector_25+0xfe>
    2c9e:	8f c1       	rjmp	.+798    	; 0x2fbe <__vector_25+0x41c>
						TCCR1A &= ~(1 << COM1C1);
						PORTB &= ~(1 << 7);
					} else {
						OCR1C = pwm_blue;
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	90 93 8d 00 	sts	0x008D, r25
    2ca6:	80 93 8c 00 	sts	0x008C, r24
    2caa:	9a cf       	rjmp	.-204    	; 0x2be0 <__vector_25+0x3e>

	} else {	// apply values to chosen peripheral

		int current_pwm=0;

		switch(peripheralChoice) {
    2cac:	91 30       	cpi	r25, 0x01	; 1
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <__vector_25+0x110>
    2cb0:	97 cf       	rjmp	.-210    	; 0x2be0 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
    2cb2:	8d 32       	cpi	r24, 0x2D	; 45
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <__vector_25+0x116>
    2cb6:	b9 c0       	rjmp	.+370    	; 0x2e2a <__vector_25+0x288>
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
    2cb8:	8b 32       	cpi	r24, 0x2B	; 43
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <__vector_25+0x11c>
    2cbc:	47 c0       	rjmp	.+142    	; 0x2d4c <__vector_25+0x1aa>
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
					}
				} else {
					choosePeripheral = 1;
    2cbe:	90 93 0f 02 	sts	0x020F, r25
    2cc2:	8e cf       	rjmp	.-228    	; 0x2be0 <__vector_25+0x3e>
	char receivedByte = UDR0;

	if(choosePeripheral) {
		switch(receivedByte) {
			case '0': // red led
				peripheralChoice = 0;
    2cc4:	10 92 0e 02 	sts	0x020E, r1
				choosePeripheral = 0;
    2cc8:	10 92 0f 02 	sts	0x020F, r1
				break;
    2ccc:	89 cf       	rjmp	.-238    	; 0x2be0 <__vector_25+0x3e>
			case '2': // blue led
				peripheralChoice = 2;
				choosePeripheral = 0;
				break;
			case '3': // right motor
				peripheralChoice = 3;
    2cce:	83 e0       	ldi	r24, 0x03	; 3
    2cd0:	80 93 0e 02 	sts	0x020E, r24
				choosePeripheral = 0;
    2cd4:	10 92 0f 02 	sts	0x020F, r1
				break;
    2cd8:	83 cf       	rjmp	.-250    	; 0x2be0 <__vector_25+0x3e>
			case '4': // left motor
				peripheralChoice = 4;
    2cda:	84 e0       	ldi	r24, 0x04	; 4
    2cdc:	80 93 0e 02 	sts	0x020E, r24
				choosePeripheral = 0;
    2ce0:	10 92 0f 02 	sts	0x020F, r1
				break;
    2ce4:	7d cf       	rjmp	.-262    	; 0x2be0 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
    2ce6:	8b 32       	cpi	r24, 0x2B	; 43
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <__vector_25+0x14a>
    2cea:	13 c1       	rjmp	.+550    	; 0x2f12 <__vector_25+0x370>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
    2cec:	8d 32       	cpi	r24, 0x2D	; 45
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <__vector_25+0x150>
    2cf0:	6d c0       	rjmp	.+218    	; 0x2dcc <__vector_25+0x22a>
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
					}
				} else if(receivedByte == 's') {
    2cf2:	83 37       	cpi	r24, 0x73	; 115
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <__vector_25+0x156>
    2cf6:	91 cf       	rjmp	.-222    	; 0x2c1a <__vector_25+0x78>
					pwm_right = 0;
    2cf8:	10 92 7f 03 	sts	0x037F, r1
    2cfc:	10 92 80 03 	sts	0x0380, r1
    2d00:	10 92 81 03 	sts	0x0381, r1
    2d04:	10 92 82 03 	sts	0x0382, r1
					OCR3A = 0;
    2d08:	10 92 99 00 	sts	0x0099, r1
    2d0c:	10 92 98 00 	sts	0x0098, r1
					OCR3B = 0;
    2d10:	10 92 9b 00 	sts	0x009B, r1
    2d14:	10 92 9a 00 	sts	0x009A, r1
    2d18:	63 cf       	rjmp	.-314    	; 0x2be0 <__vector_25+0x3e>
				} else {
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
    2d1a:	8b 32       	cpi	r24, 0x2B	; 43
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <__vector_25+0x17e>
    2d1e:	b3 c0       	rjmp	.+358    	; 0x2e86 <__vector_25+0x2e4>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
    2d20:	8d 32       	cpi	r24, 0x2D	; 45
    2d22:	29 f1       	breq	.+74     	; 0x2d6e <__vector_25+0x1cc>
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == 's') {
    2d24:	83 37       	cpi	r24, 0x73	; 115
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <__vector_25+0x188>
    2d28:	78 cf       	rjmp	.-272    	; 0x2c1a <__vector_25+0x78>
					pwm_left = 0;
    2d2a:	10 92 83 03 	sts	0x0383, r1
    2d2e:	10 92 84 03 	sts	0x0384, r1
    2d32:	10 92 85 03 	sts	0x0385, r1
    2d36:	10 92 86 03 	sts	0x0386, r1
					OCR4A = 0;
    2d3a:	10 92 a9 00 	sts	0x00A9, r1
    2d3e:	10 92 a8 00 	sts	0x00A8, r1
					OCR4B = 0;
    2d42:	10 92 ab 00 	sts	0x00AB, r1
    2d46:	10 92 aa 00 	sts	0x00AA, r1
    2d4a:	4a cf       	rjmp	.-364    	; 0x2be0 <__vector_25+0x3e>
						current_pwm = 255;
					}
					pwm_green = current_pwm;
					OCR1B = pwm_green;
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
    2d4c:	80 91 0c 02 	lds	r24, 0x020C
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0a 97       	sbiw	r24, 0x0a	; 10
					if(current_pwm < 0) {
    2d54:	97 fd       	sbrc	r25, 7
    2d56:	28 c1       	rjmp	.+592    	; 0x2fa8 <__vector_25+0x406>
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2d58:	80 93 0c 02 	sts	0x020C, r24
					if(pwm_green == 0) {
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <__vector_25+0x1c0>
    2d60:	25 c1       	rjmp	.+586    	; 0x2fac <__vector_25+0x40a>
						TCCR1A &= ~(1 << COM1B1);
						PORTB &= ~(1 << 6);
					} else {
						OCR1B = pwm_green;
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	90 93 8b 00 	sts	0x008B, r25
    2d68:	80 93 8a 00 	sts	0x008A, r24
    2d6c:	39 cf       	rjmp	.-398    	; 0x2be0 <__vector_25+0x3e>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
					}
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
    2d6e:	80 91 83 03 	lds	r24, 0x0383
    2d72:	90 91 84 03 	lds	r25, 0x0384
    2d76:	a0 91 85 03 	lds	r26, 0x0385
    2d7a:	b0 91 86 03 	lds	r27, 0x0386
    2d7e:	4e 97       	sbiw	r24, 0x1e	; 30
    2d80:	a1 09       	sbc	r26, r1
    2d82:	b1 09       	sbc	r27, r1
    2d84:	80 93 83 03 	sts	0x0383, r24
    2d88:	90 93 84 03 	sts	0x0384, r25
    2d8c:	a0 93 85 03 	sts	0x0385, r26
    2d90:	b0 93 86 03 	sts	0x0386, r27
					if(pwm_left < -MAX_MOTORS_PWM) {
    2d94:	8a 39       	cpi	r24, 0x9A	; 154
    2d96:	2d ef       	ldi	r18, 0xFD	; 253
    2d98:	92 07       	cpc	r25, r18
    2d9a:	2f ef       	ldi	r18, 0xFF	; 255
    2d9c:	a2 07       	cpc	r26, r18
    2d9e:	2f ef       	ldi	r18, 0xFF	; 255
    2da0:	b2 07       	cpc	r27, r18
    2da2:	0c f0       	brlt	.+2      	; 0x2da6 <__vector_25+0x204>
    2da4:	13 c1       	rjmp	.+550    	; 0x2fcc <__vector_25+0x42a>
						pwm_left = -MAX_MOTORS_PWM;
    2da6:	8a e9       	ldi	r24, 0x9A	; 154
    2da8:	9d ef       	ldi	r25, 0xFD	; 253
    2daa:	af ef       	ldi	r26, 0xFF	; 255
    2dac:	bf ef       	ldi	r27, 0xFF	; 255
    2dae:	80 93 83 03 	sts	0x0383, r24
    2db2:	90 93 84 03 	sts	0x0384, r25
    2db6:	a0 93 85 03 	sts	0x0385, r26
    2dba:	b0 93 86 03 	sts	0x0386, r27
    2dbe:	86 e6       	ldi	r24, 0x66	; 102
    2dc0:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2dc2:	90 93 ab 00 	sts	0x00AB, r25
    2dc6:	80 93 aa 00 	sts	0x00AA, r24
    2dca:	0a cf       	rjmp	.-492    	; 0x2be0 <__vector_25+0x3e>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
					}
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
    2dcc:	80 91 7f 03 	lds	r24, 0x037F
    2dd0:	90 91 80 03 	lds	r25, 0x0380
    2dd4:	a0 91 81 03 	lds	r26, 0x0381
    2dd8:	b0 91 82 03 	lds	r27, 0x0382
    2ddc:	4e 97       	sbiw	r24, 0x1e	; 30
    2dde:	a1 09       	sbc	r26, r1
    2de0:	b1 09       	sbc	r27, r1
    2de2:	80 93 7f 03 	sts	0x037F, r24
    2de6:	90 93 80 03 	sts	0x0380, r25
    2dea:	a0 93 81 03 	sts	0x0381, r26
    2dee:	b0 93 82 03 	sts	0x0382, r27
					if(pwm_right < -MAX_MOTORS_PWM) {
    2df2:	8a 39       	cpi	r24, 0x9A	; 154
    2df4:	2d ef       	ldi	r18, 0xFD	; 253
    2df6:	92 07       	cpc	r25, r18
    2df8:	2f ef       	ldi	r18, 0xFF	; 255
    2dfa:	a2 07       	cpc	r26, r18
    2dfc:	2f ef       	ldi	r18, 0xFF	; 255
    2dfe:	b2 07       	cpc	r27, r18
    2e00:	0c f0       	brlt	.+2      	; 0x2e04 <__vector_25+0x262>
    2e02:	ea c0       	rjmp	.+468    	; 0x2fd8 <__vector_25+0x436>
						pwm_right = -MAX_MOTORS_PWM;
    2e04:	8a e9       	ldi	r24, 0x9A	; 154
    2e06:	9d ef       	ldi	r25, 0xFD	; 253
    2e08:	af ef       	ldi	r26, 0xFF	; 255
    2e0a:	bf ef       	ldi	r27, 0xFF	; 255
    2e0c:	80 93 7f 03 	sts	0x037F, r24
    2e10:	90 93 80 03 	sts	0x0380, r25
    2e14:	a0 93 81 03 	sts	0x0381, r26
    2e18:	b0 93 82 03 	sts	0x0382, r27
    2e1c:	86 e6       	ldi	r24, 0x66	; 102
    2e1e:	92 e0       	ldi	r25, 0x02	; 2
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
					} else {						// so the next timer interrupt the values are immediately
						OCR3B = (int)(-pwm_right);	// updated
    2e20:	90 93 9b 00 	sts	0x009B, r25
    2e24:	80 93 9a 00 	sts	0x009A, r24
    2e28:	db ce       	rjmp	.-586    	; 0x2be0 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 1:	// green led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1B1);	// enable OCB
    2e2a:	80 91 80 00 	lds	r24, 0x0080
    2e2e:	80 62       	ori	r24, 0x20	; 32
    2e30:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_green+10;
    2e34:	80 91 0c 02 	lds	r24, 0x020C
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_green = current_pwm;
    2e3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e3e:	91 05       	cpc	r25, r1
    2e40:	19 f0       	breq	.+6      	; 0x2e48 <__vector_25+0x2a6>
    2e42:	14 f0       	brlt	.+4      	; 0x2e48 <__vector_25+0x2a6>
    2e44:	8f ef       	ldi	r24, 0xFF	; 255
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	80 93 0c 02 	sts	0x020C, r24
					OCR1B = pwm_green;
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	90 93 8b 00 	sts	0x008B, r25
    2e52:	80 93 8a 00 	sts	0x008A, r24
    2e56:	c4 ce       	rjmp	.-632    	; 0x2be0 <__vector_25+0x3e>
		int current_pwm=0;

		switch(peripheralChoice) {
			case 0:	// red led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1A1);	// enable OCA
    2e58:	80 91 80 00 	lds	r24, 0x0080
    2e5c:	80 68       	ori	r24, 0x80	; 128
    2e5e:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_red+10;
    2e62:	80 91 0b 02 	lds	r24, 0x020B
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_red = current_pwm;
    2e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	19 f0       	breq	.+6      	; 0x2e76 <__vector_25+0x2d4>
    2e70:	14 f0       	brlt	.+4      	; 0x2e76 <__vector_25+0x2d4>
    2e72:	8f ef       	ldi	r24, 0xFF	; 255
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	80 93 0b 02 	sts	0x020B, r24
					OCR1A = pwm_red;
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	90 93 89 00 	sts	0x0089, r25
    2e80:	80 93 88 00 	sts	0x0088, r24
    2e84:	ad ce       	rjmp	.-678    	; 0x2be0 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 4: // left motor
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
    2e86:	80 91 83 03 	lds	r24, 0x0383
    2e8a:	90 91 84 03 	lds	r25, 0x0384
    2e8e:	a0 91 85 03 	lds	r26, 0x0385
    2e92:	b0 91 86 03 	lds	r27, 0x0386
    2e96:	4e 96       	adiw	r24, 0x1e	; 30
    2e98:	a1 1d       	adc	r26, r1
    2e9a:	b1 1d       	adc	r27, r1
    2e9c:	80 93 83 03 	sts	0x0383, r24
    2ea0:	90 93 84 03 	sts	0x0384, r25
    2ea4:	a0 93 85 03 	sts	0x0385, r26
    2ea8:	b0 93 86 03 	sts	0x0386, r27
					if(pwm_left > MAX_MOTORS_PWM) {
    2eac:	87 36       	cpi	r24, 0x67	; 103
    2eae:	22 e0       	ldi	r18, 0x02	; 2
    2eb0:	92 07       	cpc	r25, r18
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	a2 07       	cpc	r26, r18
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	b2 07       	cpc	r27, r18
    2eba:	0c f4       	brge	.+2      	; 0x2ebe <__vector_25+0x31c>
    2ebc:	58 c0       	rjmp	.+176    	; 0x2f6e <__vector_25+0x3cc>
						pwm_left = MAX_MOTORS_PWM;
    2ebe:	86 e6       	ldi	r24, 0x66	; 102
    2ec0:	92 e0       	ldi	r25, 0x02	; 2
    2ec2:	a0 e0       	ldi	r26, 0x00	; 0
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	80 93 83 03 	sts	0x0383, r24
    2eca:	90 93 84 03 	sts	0x0384, r25
    2ece:	a0 93 85 03 	sts	0x0385, r26
    2ed2:	b0 93 86 03 	sts	0x0386, r27
    2ed6:	86 e6       	ldi	r24, 0x66	; 102
    2ed8:	92 e0       	ldi	r25, 0x02	; 2
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
						OCR4A = pwm_left;
    2eda:	90 93 a9 00 	sts	0x00A9, r25
    2ede:	80 93 a8 00 	sts	0x00A8, r24
    2ee2:	7e ce       	rjmp	.-772    	; 0x2be0 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 2: // blue led
				if(receivedByte == '-') {
					TCCR1A |= (1 << COM1C1);	// enable OCC
    2ee4:	80 91 80 00 	lds	r24, 0x0080
    2ee8:	88 60       	ori	r24, 0x08	; 8
    2eea:	80 93 80 00 	sts	0x0080, r24
					current_pwm = pwm_blue+10;
    2eee:	80 91 0d 02 	lds	r24, 0x020D
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0a 96       	adiw	r24, 0x0a	; 10
					if(current_pwm > 255) {
						current_pwm = 255;
					}
					pwm_blue = current_pwm;
    2ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef8:	91 05       	cpc	r25, r1
    2efa:	19 f0       	breq	.+6      	; 0x2f02 <__vector_25+0x360>
    2efc:	14 f0       	brlt	.+4      	; 0x2f02 <__vector_25+0x360>
    2efe:	8f ef       	ldi	r24, 0xFF	; 255
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	80 93 0d 02 	sts	0x020D, r24
					OCR1C = pwm_blue;
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	90 93 8d 00 	sts	0x008D, r25
    2f0c:	80 93 8c 00 	sts	0x008C, r24
    2f10:	67 ce       	rjmp	.-818    	; 0x2be0 <__vector_25+0x3e>
					choosePeripheral = 1;
				}
				break;
			case 3: // right motor
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
    2f12:	80 91 7f 03 	lds	r24, 0x037F
    2f16:	90 91 80 03 	lds	r25, 0x0380
    2f1a:	a0 91 81 03 	lds	r26, 0x0381
    2f1e:	b0 91 82 03 	lds	r27, 0x0382
    2f22:	4e 96       	adiw	r24, 0x1e	; 30
    2f24:	a1 1d       	adc	r26, r1
    2f26:	b1 1d       	adc	r27, r1
    2f28:	80 93 7f 03 	sts	0x037F, r24
    2f2c:	90 93 80 03 	sts	0x0380, r25
    2f30:	a0 93 81 03 	sts	0x0381, r26
    2f34:	b0 93 82 03 	sts	0x0382, r27
					if(pwm_right > MAX_MOTORS_PWM) {
    2f38:	87 36       	cpi	r24, 0x67	; 103
    2f3a:	22 e0       	ldi	r18, 0x02	; 2
    2f3c:	92 07       	cpc	r25, r18
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	a2 07       	cpc	r26, r18
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	b2 07       	cpc	r27, r18
    2f46:	ec f0       	brlt	.+58     	; 0x2f82 <__vector_25+0x3e0>
						pwm_right = MAX_MOTORS_PWM;
    2f48:	86 e6       	ldi	r24, 0x66	; 102
    2f4a:	92 e0       	ldi	r25, 0x02	; 2
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	80 93 7f 03 	sts	0x037F, r24
    2f54:	90 93 80 03 	sts	0x0380, r25
    2f58:	a0 93 81 03 	sts	0x0381, r26
    2f5c:	b0 93 82 03 	sts	0x0382, r27
    2f60:	86 e6       	ldi	r24, 0x66	; 102
    2f62:	92 e0       	ldi	r25, 0x02	; 2
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2f64:	90 93 99 00 	sts	0x0099, r25
    2f68:	80 93 98 00 	sts	0x0098, r24
    2f6c:	39 ce       	rjmp	.-910    	; 0x2be0 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_left += STEP_MOTORS;
					if(pwm_left > MAX_MOTORS_PWM) {
						pwm_left = MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2f6e:	b7 ff       	sbrs	r27, 7
    2f70:	b4 cf       	rjmp	.-152    	; 0x2eda <__vector_25+0x338>
						OCR4A = pwm_left;
					} else {
						OCR4B = -pwm_left;
    2f72:	90 95       	com	r25
    2f74:	81 95       	neg	r24
    2f76:	9f 4f       	sbci	r25, 0xFF	; 255
    2f78:	90 93 ab 00 	sts	0x00AB, r25
    2f7c:	80 93 aa 00 	sts	0x00AA, r24
    2f80:	2f ce       	rjmp	.-930    	; 0x2be0 <__vector_25+0x3e>
				if(receivedByte == '+') {
					pwm_right += STEP_MOTORS;
					if(pwm_right > MAX_MOTORS_PWM) {
						pwm_right = MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2f82:	b7 ff       	sbrs	r27, 7
    2f84:	ef cf       	rjmp	.-34     	; 0x2f64 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;
					} else {
						OCR3B = (int)(-pwm_right);
    2f86:	90 95       	com	r25
    2f88:	81 95       	neg	r24
    2f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8c:	90 93 9b 00 	sts	0x009B, r25
    2f90:	80 93 9a 00 	sts	0x009A, r24
    2f94:	25 ce       	rjmp	.-950    	; 0x2be0 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_red-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_red = current_pwm;
    2f96:	10 92 0b 02 	sts	0x020B, r1
					if(pwm_red == 0) {
						TCCR1A &= ~(1 << COM1A1);
    2f9a:	80 91 80 00 	lds	r24, 0x0080
    2f9e:	8f 77       	andi	r24, 0x7F	; 127
    2fa0:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 5);
    2fa4:	2d 98       	cbi	0x05, 5	; 5
    2fa6:	1c ce       	rjmp	.-968    	; 0x2be0 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_green-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_green = current_pwm;
    2fa8:	10 92 0c 02 	sts	0x020C, r1
					if(pwm_green == 0) {
						TCCR1A &= ~(1 << COM1B1);
    2fac:	80 91 80 00 	lds	r24, 0x0080
    2fb0:	8f 7d       	andi	r24, 0xDF	; 223
    2fb2:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 6);
    2fb6:	2e 98       	cbi	0x05, 6	; 5
    2fb8:	13 ce       	rjmp	.-986    	; 0x2be0 <__vector_25+0x3e>
				} else if(receivedByte == '+') {
					current_pwm = pwm_blue-10;
					if(current_pwm < 0) {
						current_pwm = 0;
					}
					pwm_blue = current_pwm;
    2fba:	10 92 0d 02 	sts	0x020D, r1
					if(pwm_blue == 0) {
						TCCR1A &= ~(1 << COM1C1);
    2fbe:	80 91 80 00 	lds	r24, 0x0080
    2fc2:	87 7f       	andi	r24, 0xF7	; 247
    2fc4:	80 93 80 00 	sts	0x0080, r24
						PORTB &= ~(1 << 7);
    2fc8:	2f 98       	cbi	0x05, 7	; 5
    2fca:	0a ce       	rjmp	.-1004   	; 0x2be0 <__vector_25+0x3e>
				} else if(receivedByte == '-') {
					pwm_left -= STEP_MOTORS;
					if(pwm_left < -MAX_MOTORS_PWM) {
						pwm_left = -MAX_MOTORS_PWM;
					}
					if(pwm_left >= 0) {
    2fcc:	b7 ff       	sbrs	r27, 7
    2fce:	85 cf       	rjmp	.-246    	; 0x2eda <__vector_25+0x338>
						OCR4A = pwm_left;
    2fd0:	90 95       	com	r25
    2fd2:	81 95       	neg	r24
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	f5 ce       	rjmp	.-534    	; 0x2dc2 <__vector_25+0x220>
				} else if(receivedByte == '-') {
					pwm_right -= STEP_MOTORS;
					if(pwm_right < -MAX_MOTORS_PWM) {
						pwm_right = -MAX_MOTORS_PWM;
					}
					if(pwm_right >= 0) {
    2fd8:	b7 ff       	sbrs	r27, 7
    2fda:	c4 cf       	rjmp	.-120    	; 0x2f64 <__vector_25+0x3c2>
						OCR3A = (int)pwm_right;		// I set the new value for the output compares here
    2fdc:	90 95       	com	r25
    2fde:	81 95       	neg	r24
    2fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe2:	1e cf       	rjmp	.-452    	; 0x2e20 <__vector_25+0x27e>

00002fe4 <_fpadd_parts>:
    2fe4:	a0 e0       	ldi	r26, 0x00	; 0
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e8 ef       	ldi	r30, 0xF8	; 248
    2fea:	f7 e1       	ldi	r31, 0x17	; 23
    2fec:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__prologue_saves__+0x4>
    2ff0:	2c 01       	movw	r4, r24
    2ff2:	5b 01       	movw	r10, r22
    2ff4:	fa 01       	movw	r30, r20
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	9c 91       	ld	r25, X
    2ffa:	92 30       	cpi	r25, 0x02	; 2
    2ffc:	08 f4       	brcc	.+2      	; 0x3000 <_fpadd_parts+0x1c>
    2ffe:	32 c1       	rjmp	.+612    	; 0x3264 <_fpadd_parts+0x280>
    3000:	eb 01       	movw	r28, r22
    3002:	88 81       	ld	r24, Y
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	08 f4       	brcc	.+2      	; 0x300a <_fpadd_parts+0x26>
    3008:	2c c1       	rjmp	.+600    	; 0x3262 <_fpadd_parts+0x27e>
    300a:	94 30       	cpi	r25, 0x04	; 4
    300c:	71 f4       	brne	.+28     	; 0x302a <_fpadd_parts+0x46>
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	09 f0       	breq	.+2      	; 0x3014 <_fpadd_parts+0x30>
    3012:	28 c1       	rjmp	.+592    	; 0x3264 <_fpadd_parts+0x280>
    3014:	f2 01       	movw	r30, r4
    3016:	91 81       	ldd	r25, Z+1	; 0x01
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	98 17       	cp	r25, r24
    301c:	09 f4       	brne	.+2      	; 0x3020 <_fpadd_parts+0x3c>
    301e:	22 c1       	rjmp	.+580    	; 0x3264 <_fpadd_parts+0x280>
    3020:	11 e1       	ldi	r17, 0x11	; 17
    3022:	41 2e       	mov	r4, r17
    3024:	12 e0       	ldi	r17, 0x02	; 2
    3026:	51 2e       	mov	r5, r17
    3028:	1d c1       	rjmp	.+570    	; 0x3264 <_fpadd_parts+0x280>
    302a:	84 30       	cpi	r24, 0x04	; 4
    302c:	09 f4       	brne	.+2      	; 0x3030 <_fpadd_parts+0x4c>
    302e:	19 c1       	rjmp	.+562    	; 0x3262 <_fpadd_parts+0x27e>
    3030:	82 30       	cpi	r24, 0x02	; 2
    3032:	a9 f4       	brne	.+42     	; 0x305e <_fpadd_parts+0x7a>
    3034:	92 30       	cpi	r25, 0x02	; 2
    3036:	09 f0       	breq	.+2      	; 0x303a <_fpadd_parts+0x56>
    3038:	15 c1       	rjmp	.+554    	; 0x3264 <_fpadd_parts+0x280>
    303a:	ca 01       	movw	r24, r20
    303c:	a2 01       	movw	r20, r4
    303e:	28 e0       	ldi	r18, 0x08	; 8
    3040:	da 01       	movw	r26, r20
    3042:	0d 90       	ld	r0, X+
    3044:	ad 01       	movw	r20, r26
    3046:	ec 01       	movw	r28, r24
    3048:	09 92       	st	Y+, r0
    304a:	ce 01       	movw	r24, r28
    304c:	21 50       	subi	r18, 0x01	; 1
    304e:	c1 f7       	brne	.-16     	; 0x3040 <_fpadd_parts+0x5c>
    3050:	e5 01       	movw	r28, r10
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	e2 01       	movw	r28, r4
    3056:	99 81       	ldd	r25, Y+1	; 0x01
    3058:	89 23       	and	r24, r25
    305a:	81 83       	std	Z+1, r24	; 0x01
    305c:	00 c1       	rjmp	.+512    	; 0x325e <_fpadd_parts+0x27a>
    305e:	92 30       	cpi	r25, 0x02	; 2
    3060:	09 f4       	brne	.+2      	; 0x3064 <_fpadd_parts+0x80>
    3062:	ff c0       	rjmp	.+510    	; 0x3262 <_fpadd_parts+0x27e>
    3064:	e2 01       	movw	r28, r4
    3066:	ca 80       	ldd	r12, Y+2	; 0x02
    3068:	db 80       	ldd	r13, Y+3	; 0x03
    306a:	eb 01       	movw	r28, r22
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
    306e:	9b 81       	ldd	r25, Y+3	; 0x03
    3070:	e2 01       	movw	r28, r4
    3072:	2c 81       	ldd	r18, Y+4	; 0x04
    3074:	3d 81       	ldd	r19, Y+5	; 0x05
    3076:	4e 81       	ldd	r20, Y+6	; 0x06
    3078:	5f 81       	ldd	r21, Y+7	; 0x07
    307a:	eb 01       	movw	r28, r22
    307c:	ec 80       	ldd	r14, Y+4	; 0x04
    307e:	fd 80       	ldd	r15, Y+5	; 0x05
    3080:	0e 81       	ldd	r16, Y+6	; 0x06
    3082:	1f 81       	ldd	r17, Y+7	; 0x07
    3084:	b6 01       	movw	r22, r12
    3086:	68 1b       	sub	r22, r24
    3088:	79 0b       	sbc	r23, r25
    308a:	db 01       	movw	r26, r22
    308c:	77 ff       	sbrs	r23, 7
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <_fpadd_parts+0xb2>
    3090:	70 95       	com	r23
    3092:	61 95       	neg	r22
    3094:	7f 4f       	sbci	r23, 0xFF	; 255
    3096:	60 32       	cpi	r22, 0x20	; 32
    3098:	71 05       	cpc	r23, r1
    309a:	0c f0       	brlt	.+2      	; 0x309e <_fpadd_parts+0xba>
    309c:	5d c0       	rjmp	.+186    	; 0x3158 <_fpadd_parts+0x174>
    309e:	1a 16       	cp	r1, r26
    30a0:	1b 06       	cpc	r1, r27
    30a2:	5c f5       	brge	.+86     	; 0x30fa <_fpadd_parts+0x116>
    30a4:	66 24       	eor	r6, r6
    30a6:	77 24       	eor	r7, r7
    30a8:	43 01       	movw	r8, r6
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	a0 e0       	ldi	r26, 0x00	; 0
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	06 2e       	mov	r0, r22
    30b4:	04 c0       	rjmp	.+8      	; 0x30be <_fpadd_parts+0xda>
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	0a 94       	dec	r0
    30c0:	d2 f7       	brpl	.-12     	; 0x30b6 <_fpadd_parts+0xd2>
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	a1 09       	sbc	r26, r1
    30c6:	b1 09       	sbc	r27, r1
    30c8:	8e 21       	and	r24, r14
    30ca:	9f 21       	and	r25, r15
    30cc:	a0 23       	and	r26, r16
    30ce:	b1 23       	and	r27, r17
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	a1 05       	cpc	r26, r1
    30d4:	b1 05       	cpc	r27, r1
    30d6:	29 f0       	breq	.+10     	; 0x30e2 <_fpadd_parts+0xfe>
    30d8:	b1 e0       	ldi	r27, 0x01	; 1
    30da:	6b 2e       	mov	r6, r27
    30dc:	71 2c       	mov	r7, r1
    30de:	81 2c       	mov	r8, r1
    30e0:	91 2c       	mov	r9, r1
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <_fpadd_parts+0x108>
    30e4:	16 95       	lsr	r17
    30e6:	07 95       	ror	r16
    30e8:	f7 94       	ror	r15
    30ea:	e7 94       	ror	r14
    30ec:	6a 95       	dec	r22
    30ee:	d2 f7       	brpl	.-12     	; 0x30e4 <_fpadd_parts+0x100>
    30f0:	e6 28       	or	r14, r6
    30f2:	f7 28       	or	r15, r7
    30f4:	08 29       	or	r16, r8
    30f6:	19 29       	or	r17, r9
    30f8:	3b c0       	rjmp	.+118    	; 0x3170 <_fpadd_parts+0x18c>
    30fa:	ab 2b       	or	r26, r27
    30fc:	c9 f1       	breq	.+114    	; 0x3170 <_fpadd_parts+0x18c>
    30fe:	c6 0e       	add	r12, r22
    3100:	d7 1e       	adc	r13, r23
    3102:	66 24       	eor	r6, r6
    3104:	77 24       	eor	r7, r7
    3106:	43 01       	movw	r8, r6
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	a0 e0       	ldi	r26, 0x00	; 0
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	06 2e       	mov	r0, r22
    3112:	04 c0       	rjmp	.+8      	; 0x311c <_fpadd_parts+0x138>
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	aa 1f       	adc	r26, r26
    311a:	bb 1f       	adc	r27, r27
    311c:	0a 94       	dec	r0
    311e:	d2 f7       	brpl	.-12     	; 0x3114 <_fpadd_parts+0x130>
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	a1 09       	sbc	r26, r1
    3124:	b1 09       	sbc	r27, r1
    3126:	82 23       	and	r24, r18
    3128:	93 23       	and	r25, r19
    312a:	a4 23       	and	r26, r20
    312c:	b5 23       	and	r27, r21
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	a1 05       	cpc	r26, r1
    3132:	b1 05       	cpc	r27, r1
    3134:	29 f0       	breq	.+10     	; 0x3140 <_fpadd_parts+0x15c>
    3136:	a1 e0       	ldi	r26, 0x01	; 1
    3138:	6a 2e       	mov	r6, r26
    313a:	71 2c       	mov	r7, r1
    313c:	81 2c       	mov	r8, r1
    313e:	91 2c       	mov	r9, r1
    3140:	04 c0       	rjmp	.+8      	; 0x314a <_fpadd_parts+0x166>
    3142:	56 95       	lsr	r21
    3144:	47 95       	ror	r20
    3146:	37 95       	ror	r19
    3148:	27 95       	ror	r18
    314a:	6a 95       	dec	r22
    314c:	d2 f7       	brpl	.-12     	; 0x3142 <_fpadd_parts+0x15e>
    314e:	26 29       	or	r18, r6
    3150:	37 29       	or	r19, r7
    3152:	48 29       	or	r20, r8
    3154:	59 29       	or	r21, r9
    3156:	0c c0       	rjmp	.+24     	; 0x3170 <_fpadd_parts+0x18c>
    3158:	8c 15       	cp	r24, r12
    315a:	9d 05       	cpc	r25, r13
    315c:	34 f0       	brlt	.+12     	; 0x316a <_fpadd_parts+0x186>
    315e:	6c 01       	movw	r12, r24
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <_fpadd_parts+0x18c>
    316a:	ee 24       	eor	r14, r14
    316c:	ff 24       	eor	r15, r15
    316e:	87 01       	movw	r16, r14
    3170:	e2 01       	movw	r28, r4
    3172:	99 81       	ldd	r25, Y+1	; 0x01
    3174:	e5 01       	movw	r28, r10
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	98 17       	cp	r25, r24
    317a:	09 f4       	brne	.+2      	; 0x317e <_fpadd_parts+0x19a>
    317c:	43 c0       	rjmp	.+134    	; 0x3204 <_fpadd_parts+0x220>
    317e:	99 23       	and	r25, r25
    3180:	39 f0       	breq	.+14     	; 0x3190 <_fpadd_parts+0x1ac>
    3182:	e2 1a       	sub	r14, r18
    3184:	f3 0a       	sbc	r15, r19
    3186:	04 0b       	sbc	r16, r20
    3188:	15 0b       	sbc	r17, r21
    318a:	a8 01       	movw	r20, r16
    318c:	97 01       	movw	r18, r14
    318e:	04 c0       	rjmp	.+8      	; 0x3198 <_fpadd_parts+0x1b4>
    3190:	2e 19       	sub	r18, r14
    3192:	3f 09       	sbc	r19, r15
    3194:	40 0b       	sbc	r20, r16
    3196:	51 0b       	sbc	r21, r17
    3198:	57 fd       	sbrc	r21, 7
    319a:	08 c0       	rjmp	.+16     	; 0x31ac <_fpadd_parts+0x1c8>
    319c:	11 82       	std	Z+1, r1	; 0x01
    319e:	d3 82       	std	Z+3, r13	; 0x03
    31a0:	c2 82       	std	Z+2, r12	; 0x02
    31a2:	24 83       	std	Z+4, r18	; 0x04
    31a4:	35 83       	std	Z+5, r19	; 0x05
    31a6:	46 83       	std	Z+6, r20	; 0x06
    31a8:	57 83       	std	Z+7, r21	; 0x07
    31aa:	1d c0       	rjmp	.+58     	; 0x31e6 <_fpadd_parts+0x202>
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	81 83       	std	Z+1, r24	; 0x01
    31b0:	d3 82       	std	Z+3, r13	; 0x03
    31b2:	c2 82       	std	Z+2, r12	; 0x02
    31b4:	88 27       	eor	r24, r24
    31b6:	99 27       	eor	r25, r25
    31b8:	dc 01       	movw	r26, r24
    31ba:	82 1b       	sub	r24, r18
    31bc:	93 0b       	sbc	r25, r19
    31be:	a4 0b       	sbc	r26, r20
    31c0:	b5 0b       	sbc	r27, r21
    31c2:	84 83       	std	Z+4, r24	; 0x04
    31c4:	95 83       	std	Z+5, r25	; 0x05
    31c6:	a6 83       	std	Z+6, r26	; 0x06
    31c8:	b7 83       	std	Z+7, r27	; 0x07
    31ca:	0d c0       	rjmp	.+26     	; 0x31e6 <_fpadd_parts+0x202>
    31cc:	22 0f       	add	r18, r18
    31ce:	33 1f       	adc	r19, r19
    31d0:	44 1f       	adc	r20, r20
    31d2:	55 1f       	adc	r21, r21
    31d4:	24 83       	std	Z+4, r18	; 0x04
    31d6:	35 83       	std	Z+5, r19	; 0x05
    31d8:	46 83       	std	Z+6, r20	; 0x06
    31da:	57 83       	std	Z+7, r21	; 0x07
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	93 83       	std	Z+3, r25	; 0x03
    31e4:	82 83       	std	Z+2, r24	; 0x02
    31e6:	24 81       	ldd	r18, Z+4	; 0x04
    31e8:	35 81       	ldd	r19, Z+5	; 0x05
    31ea:	46 81       	ldd	r20, Z+6	; 0x06
    31ec:	57 81       	ldd	r21, Z+7	; 0x07
    31ee:	da 01       	movw	r26, r20
    31f0:	c9 01       	movw	r24, r18
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	a1 09       	sbc	r26, r1
    31f6:	b1 09       	sbc	r27, r1
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	af 4f       	sbci	r26, 0xFF	; 255
    31fe:	bf 43       	sbci	r27, 0x3F	; 63
    3200:	28 f3       	brcs	.-54     	; 0x31cc <_fpadd_parts+0x1e8>
    3202:	0b c0       	rjmp	.+22     	; 0x321a <_fpadd_parts+0x236>
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	d3 82       	std	Z+3, r13	; 0x03
    3208:	c2 82       	std	Z+2, r12	; 0x02
    320a:	2e 0d       	add	r18, r14
    320c:	3f 1d       	adc	r19, r15
    320e:	40 1f       	adc	r20, r16
    3210:	51 1f       	adc	r21, r17
    3212:	24 83       	std	Z+4, r18	; 0x04
    3214:	35 83       	std	Z+5, r19	; 0x05
    3216:	46 83       	std	Z+6, r20	; 0x06
    3218:	57 83       	std	Z+7, r21	; 0x07
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	80 83       	st	Z, r24
    321e:	24 81       	ldd	r18, Z+4	; 0x04
    3220:	35 81       	ldd	r19, Z+5	; 0x05
    3222:	46 81       	ldd	r20, Z+6	; 0x06
    3224:	57 81       	ldd	r21, Z+7	; 0x07
    3226:	55 23       	and	r21, r21
    3228:	d4 f4       	brge	.+52     	; 0x325e <_fpadd_parts+0x27a>
    322a:	c9 01       	movw	r24, r18
    322c:	aa 27       	eor	r26, r26
    322e:	97 fd       	sbrc	r25, 7
    3230:	a0 95       	com	r26
    3232:	ba 2f       	mov	r27, r26
    3234:	81 70       	andi	r24, 0x01	; 1
    3236:	90 70       	andi	r25, 0x00	; 0
    3238:	a0 70       	andi	r26, 0x00	; 0
    323a:	b0 70       	andi	r27, 0x00	; 0
    323c:	56 95       	lsr	r21
    323e:	47 95       	ror	r20
    3240:	37 95       	ror	r19
    3242:	27 95       	ror	r18
    3244:	82 2b       	or	r24, r18
    3246:	93 2b       	or	r25, r19
    3248:	a4 2b       	or	r26, r20
    324a:	b5 2b       	or	r27, r21
    324c:	84 83       	std	Z+4, r24	; 0x04
    324e:	95 83       	std	Z+5, r25	; 0x05
    3250:	a6 83       	std	Z+6, r26	; 0x06
    3252:	b7 83       	std	Z+7, r27	; 0x07
    3254:	82 81       	ldd	r24, Z+2	; 0x02
    3256:	93 81       	ldd	r25, Z+3	; 0x03
    3258:	01 96       	adiw	r24, 0x01	; 1
    325a:	93 83       	std	Z+3, r25	; 0x03
    325c:	82 83       	std	Z+2, r24	; 0x02
    325e:	2f 01       	movw	r4, r30
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <_fpadd_parts+0x280>
    3262:	25 01       	movw	r4, r10
    3264:	c2 01       	movw	r24, r4
    3266:	e0 e1       	ldi	r30, 0x10	; 16
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__epilogue_restores__+0x4>

00003270 <__subsf3>:
    3270:	a0 e2       	ldi	r26, 0x20	; 32
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	ee e3       	ldi	r30, 0x3E	; 62
    3276:	f9 e1       	ldi	r31, 0x19	; 25
    3278:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
    327c:	69 83       	std	Y+1, r22	; 0x01
    327e:	7a 83       	std	Y+2, r23	; 0x02
    3280:	8b 83       	std	Y+3, r24	; 0x03
    3282:	9c 83       	std	Y+4, r25	; 0x04
    3284:	2d 83       	std	Y+5, r18	; 0x05
    3286:	3e 83       	std	Y+6, r19	; 0x06
    3288:	4f 83       	std	Y+7, r20	; 0x07
    328a:	58 87       	std	Y+8, r21	; 0x08
    328c:	09 e0       	ldi	r16, 0x09	; 9
    328e:	e0 2e       	mov	r14, r16
    3290:	f1 2c       	mov	r15, r1
    3292:	ec 0e       	add	r14, r28
    3294:	fd 1e       	adc	r15, r29
    3296:	b7 01       	movw	r22, r14
    3298:	ce 01       	movw	r24, r28
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    32a0:	8e 01       	movw	r16, r28
    32a2:	0f 5e       	subi	r16, 0xEF	; 239
    32a4:	1f 4f       	sbci	r17, 0xFF	; 255
    32a6:	b8 01       	movw	r22, r16
    32a8:	ce 01       	movw	r24, r28
    32aa:	05 96       	adiw	r24, 0x05	; 5
    32ac:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    32b0:	8a 89       	ldd	r24, Y+18	; 0x12
    32b2:	91 e0       	ldi	r25, 0x01	; 1
    32b4:	89 27       	eor	r24, r25
    32b6:	8a 8b       	std	Y+18, r24	; 0x12
    32b8:	ae 01       	movw	r20, r28
    32ba:	47 5e       	subi	r20, 0xE7	; 231
    32bc:	5f 4f       	sbci	r21, 0xFF	; 255
    32be:	b8 01       	movw	r22, r16
    32c0:	c7 01       	movw	r24, r14
    32c2:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <_fpadd_parts>
    32c6:	0e 94 93 1b 	call	0x3726	; 0x3726 <__pack_f>
    32ca:	e6 e0       	ldi	r30, 0x06	; 6
    32cc:	a0 96       	adiw	r28, 0x20	; 32
    32ce:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

000032d2 <__addsf3>:
    32d2:	a0 e2       	ldi	r26, 0x20	; 32
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	ef e6       	ldi	r30, 0x6F	; 111
    32d8:	f9 e1       	ldi	r31, 0x19	; 25
    32da:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x18>
    32de:	69 83       	std	Y+1, r22	; 0x01
    32e0:	7a 83       	std	Y+2, r23	; 0x02
    32e2:	8b 83       	std	Y+3, r24	; 0x03
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	2d 83       	std	Y+5, r18	; 0x05
    32e8:	3e 83       	std	Y+6, r19	; 0x06
    32ea:	4f 83       	std	Y+7, r20	; 0x07
    32ec:	58 87       	std	Y+8, r21	; 0x08
    32ee:	89 e0       	ldi	r24, 0x09	; 9
    32f0:	e8 2e       	mov	r14, r24
    32f2:	f1 2c       	mov	r15, r1
    32f4:	ec 0e       	add	r14, r28
    32f6:	fd 1e       	adc	r15, r29
    32f8:	b7 01       	movw	r22, r14
    32fa:	ce 01       	movw	r24, r28
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    3302:	8e 01       	movw	r16, r28
    3304:	0f 5e       	subi	r16, 0xEF	; 239
    3306:	1f 4f       	sbci	r17, 0xFF	; 255
    3308:	b8 01       	movw	r22, r16
    330a:	ce 01       	movw	r24, r28
    330c:	05 96       	adiw	r24, 0x05	; 5
    330e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    3312:	ae 01       	movw	r20, r28
    3314:	47 5e       	subi	r20, 0xE7	; 231
    3316:	5f 4f       	sbci	r21, 0xFF	; 255
    3318:	b8 01       	movw	r22, r16
    331a:	c7 01       	movw	r24, r14
    331c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <_fpadd_parts>
    3320:	0e 94 93 1b 	call	0x3726	; 0x3726 <__pack_f>
    3324:	e6 e0       	ldi	r30, 0x06	; 6
    3326:	a0 96       	adiw	r28, 0x20	; 32
    3328:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x18>

0000332c <__mulsf3>:
    332c:	a0 e2       	ldi	r26, 0x20	; 32
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	ec e9       	ldi	r30, 0x9C	; 156
    3332:	f9 e1       	ldi	r31, 0x19	; 25
    3334:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__prologue_saves__+0x4>
    3338:	69 83       	std	Y+1, r22	; 0x01
    333a:	7a 83       	std	Y+2, r23	; 0x02
    333c:	8b 83       	std	Y+3, r24	; 0x03
    333e:	9c 83       	std	Y+4, r25	; 0x04
    3340:	2d 83       	std	Y+5, r18	; 0x05
    3342:	3e 83       	std	Y+6, r19	; 0x06
    3344:	4f 83       	std	Y+7, r20	; 0x07
    3346:	58 87       	std	Y+8, r21	; 0x08
    3348:	99 e0       	ldi	r25, 0x09	; 9
    334a:	e9 2e       	mov	r14, r25
    334c:	f1 2c       	mov	r15, r1
    334e:	ec 0e       	add	r14, r28
    3350:	fd 1e       	adc	r15, r29
    3352:	b7 01       	movw	r22, r14
    3354:	ce 01       	movw	r24, r28
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    335c:	8e 01       	movw	r16, r28
    335e:	0f 5e       	subi	r16, 0xEF	; 239
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	b8 01       	movw	r22, r16
    3364:	ce 01       	movw	r24, r28
    3366:	05 96       	adiw	r24, 0x05	; 5
    3368:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    336c:	99 85       	ldd	r25, Y+9	; 0x09
    336e:	92 30       	cpi	r25, 0x02	; 2
    3370:	88 f0       	brcs	.+34     	; 0x3394 <__mulsf3+0x68>
    3372:	89 89       	ldd	r24, Y+17	; 0x11
    3374:	82 30       	cpi	r24, 0x02	; 2
    3376:	c0 f0       	brcs	.+48     	; 0x33a8 <__mulsf3+0x7c>
    3378:	94 30       	cpi	r25, 0x04	; 4
    337a:	19 f4       	brne	.+6      	; 0x3382 <__mulsf3+0x56>
    337c:	82 30       	cpi	r24, 0x02	; 2
    337e:	29 f0       	breq	.+10     	; 0x338a <__mulsf3+0x5e>
    3380:	09 c0       	rjmp	.+18     	; 0x3394 <__mulsf3+0x68>
    3382:	84 30       	cpi	r24, 0x04	; 4
    3384:	29 f4       	brne	.+10     	; 0x3390 <__mulsf3+0x64>
    3386:	92 30       	cpi	r25, 0x02	; 2
    3388:	79 f4       	brne	.+30     	; 0x33a8 <__mulsf3+0x7c>
    338a:	61 e1       	ldi	r22, 0x11	; 17
    338c:	72 e0       	ldi	r23, 0x02	; 2
    338e:	c6 c0       	rjmp	.+396    	; 0x351c <__mulsf3+0x1f0>
    3390:	92 30       	cpi	r25, 0x02	; 2
    3392:	41 f4       	brne	.+16     	; 0x33a4 <__mulsf3+0x78>
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	9a 85       	ldd	r25, Y+10	; 0x0a
    3398:	8a 89       	ldd	r24, Y+18	; 0x12
    339a:	98 13       	cpse	r25, r24
    339c:	21 e0       	ldi	r18, 0x01	; 1
    339e:	2a 87       	std	Y+10, r18	; 0x0a
    33a0:	b7 01       	movw	r22, r14
    33a2:	bc c0       	rjmp	.+376    	; 0x351c <__mulsf3+0x1f0>
    33a4:	82 30       	cpi	r24, 0x02	; 2
    33a6:	41 f4       	brne	.+16     	; 0x33b8 <__mulsf3+0x8c>
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	8a 89       	ldd	r24, Y+18	; 0x12
    33ae:	98 13       	cpse	r25, r24
    33b0:	21 e0       	ldi	r18, 0x01	; 1
    33b2:	2a 8b       	std	Y+18, r18	; 0x12
    33b4:	b8 01       	movw	r22, r16
    33b6:	b2 c0       	rjmp	.+356    	; 0x351c <__mulsf3+0x1f0>
    33b8:	cd 84       	ldd	r12, Y+13	; 0x0d
    33ba:	de 84       	ldd	r13, Y+14	; 0x0e
    33bc:	ef 84       	ldd	r14, Y+15	; 0x0f
    33be:	f8 88       	ldd	r15, Y+16	; 0x10
    33c0:	0d 89       	ldd	r16, Y+21	; 0x15
    33c2:	1e 89       	ldd	r17, Y+22	; 0x16
    33c4:	2f 89       	ldd	r18, Y+23	; 0x17
    33c6:	38 8d       	ldd	r19, Y+24	; 0x18
    33c8:	88 24       	eor	r8, r8
    33ca:	99 24       	eor	r9, r9
    33cc:	54 01       	movw	r10, r8
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	44 24       	eor	r4, r4
    33d8:	55 24       	eor	r5, r5
    33da:	32 01       	movw	r6, r4
    33dc:	e0 e0       	ldi	r30, 0x00	; 0
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	c6 01       	movw	r24, r12
    33e2:	81 70       	andi	r24, 0x01	; 1
    33e4:	90 70       	andi	r25, 0x00	; 0
    33e6:	89 2b       	or	r24, r25
    33e8:	d9 f0       	breq	.+54     	; 0x3420 <__mulsf3+0xf4>
    33ea:	80 0e       	add	r8, r16
    33ec:	91 1e       	adc	r9, r17
    33ee:	a2 1e       	adc	r10, r18
    33f0:	b3 1e       	adc	r11, r19
    33f2:	db 01       	movw	r26, r22
    33f4:	ca 01       	movw	r24, r20
    33f6:	84 0d       	add	r24, r4
    33f8:	95 1d       	adc	r25, r5
    33fa:	a6 1d       	adc	r26, r6
    33fc:	b7 1d       	adc	r27, r7
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	70 e0       	ldi	r23, 0x00	; 0
    3406:	80 16       	cp	r8, r16
    3408:	91 06       	cpc	r9, r17
    340a:	a2 06       	cpc	r10, r18
    340c:	b3 06       	cpc	r11, r19
    340e:	20 f4       	brcc	.+8      	; 0x3418 <__mulsf3+0xec>
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	60 e0       	ldi	r22, 0x00	; 0
    3416:	70 e0       	ldi	r23, 0x00	; 0
    3418:	48 0f       	add	r20, r24
    341a:	59 1f       	adc	r21, r25
    341c:	6a 1f       	adc	r22, r26
    341e:	7b 1f       	adc	r23, r27
    3420:	44 0c       	add	r4, r4
    3422:	55 1c       	adc	r5, r5
    3424:	66 1c       	adc	r6, r6
    3426:	77 1c       	adc	r7, r7
    3428:	37 ff       	sbrs	r19, 7
    342a:	08 c0       	rjmp	.+16     	; 0x343c <__mulsf3+0x110>
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	a0 e0       	ldi	r26, 0x00	; 0
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	48 2a       	or	r4, r24
    3436:	59 2a       	or	r5, r25
    3438:	6a 2a       	or	r6, r26
    343a:	7b 2a       	or	r7, r27
    343c:	31 96       	adiw	r30, 0x01	; 1
    343e:	e0 32       	cpi	r30, 0x20	; 32
    3440:	f1 05       	cpc	r31, r1
    3442:	49 f0       	breq	.+18     	; 0x3456 <__mulsf3+0x12a>
    3444:	00 0f       	add	r16, r16
    3446:	11 1f       	adc	r17, r17
    3448:	22 1f       	adc	r18, r18
    344a:	33 1f       	adc	r19, r19
    344c:	f6 94       	lsr	r15
    344e:	e7 94       	ror	r14
    3450:	d7 94       	ror	r13
    3452:	c7 94       	ror	r12
    3454:	c5 cf       	rjmp	.-118    	; 0x33e0 <__mulsf3+0xb4>
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	2b 85       	ldd	r18, Y+11	; 0x0b
    345c:	3c 85       	ldd	r19, Y+12	; 0x0c
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	02 96       	adiw	r24, 0x02	; 2
    3464:	9c 8f       	std	Y+28, r25	; 0x1c
    3466:	8b 8f       	std	Y+27, r24	; 0x1b
    3468:	1a 8e       	std	Y+26, r1	; 0x1a
    346a:	9a 85       	ldd	r25, Y+10	; 0x0a
    346c:	8a 89       	ldd	r24, Y+18	; 0x12
    346e:	98 17       	cp	r25, r24
    3470:	11 f0       	breq	.+4      	; 0x3476 <__mulsf3+0x14a>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	8a 8f       	std	Y+26, r24	; 0x1a
    3476:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3478:	3c 8d       	ldd	r19, Y+28	; 0x1c
    347a:	17 c0       	rjmp	.+46     	; 0x34aa <__mulsf3+0x17e>
    347c:	ca 01       	movw	r24, r20
    347e:	81 70       	andi	r24, 0x01	; 1
    3480:	90 70       	andi	r25, 0x00	; 0
    3482:	89 2b       	or	r24, r25
    3484:	61 f0       	breq	.+24     	; 0x349e <__mulsf3+0x172>
    3486:	b6 94       	lsr	r11
    3488:	a7 94       	ror	r10
    348a:	97 94       	ror	r9
    348c:	87 94       	ror	r8
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	a0 e0       	ldi	r26, 0x00	; 0
    3494:	b0 e8       	ldi	r27, 0x80	; 128
    3496:	88 2a       	or	r8, r24
    3498:	99 2a       	or	r9, r25
    349a:	aa 2a       	or	r10, r26
    349c:	bb 2a       	or	r11, r27
    349e:	76 95       	lsr	r23
    34a0:	67 95       	ror	r22
    34a2:	57 95       	ror	r21
    34a4:	47 95       	ror	r20
    34a6:	2f 5f       	subi	r18, 0xFF	; 255
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	77 fd       	sbrc	r23, 7
    34ac:	e7 cf       	rjmp	.-50     	; 0x347c <__mulsf3+0x150>
    34ae:	c9 01       	movw	r24, r18
    34b0:	0b c0       	rjmp	.+22     	; 0x34c8 <__mulsf3+0x19c>
    34b2:	44 0f       	add	r20, r20
    34b4:	55 1f       	adc	r21, r21
    34b6:	66 1f       	adc	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	b7 fc       	sbrc	r11, 7
    34bc:	41 60       	ori	r20, 0x01	; 1
    34be:	88 0c       	add	r8, r8
    34c0:	99 1c       	adc	r9, r9
    34c2:	aa 1c       	adc	r10, r10
    34c4:	bb 1c       	adc	r11, r11
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	40 30       	cpi	r20, 0x00	; 0
    34ca:	a0 e0       	ldi	r26, 0x00	; 0
    34cc:	5a 07       	cpc	r21, r26
    34ce:	a0 e0       	ldi	r26, 0x00	; 0
    34d0:	6a 07       	cpc	r22, r26
    34d2:	a0 e4       	ldi	r26, 0x40	; 64
    34d4:	7a 07       	cpc	r23, r26
    34d6:	68 f3       	brcs	.-38     	; 0x34b2 <__mulsf3+0x186>
    34d8:	9c 8f       	std	Y+28, r25	; 0x1c
    34da:	8b 8f       	std	Y+27, r24	; 0x1b
    34dc:	db 01       	movw	r26, r22
    34de:	ca 01       	movw	r24, r20
    34e0:	8f 77       	andi	r24, 0x7F	; 127
    34e2:	90 70       	andi	r25, 0x00	; 0
    34e4:	a0 70       	andi	r26, 0x00	; 0
    34e6:	b0 70       	andi	r27, 0x00	; 0
    34e8:	80 34       	cpi	r24, 0x40	; 64
    34ea:	91 05       	cpc	r25, r1
    34ec:	a1 05       	cpc	r26, r1
    34ee:	b1 05       	cpc	r27, r1
    34f0:	61 f4       	brne	.+24     	; 0x350a <__mulsf3+0x1de>
    34f2:	47 fd       	sbrc	r20, 7
    34f4:	0a c0       	rjmp	.+20     	; 0x350a <__mulsf3+0x1de>
    34f6:	81 14       	cp	r8, r1
    34f8:	91 04       	cpc	r9, r1
    34fa:	a1 04       	cpc	r10, r1
    34fc:	b1 04       	cpc	r11, r1
    34fe:	29 f0       	breq	.+10     	; 0x350a <__mulsf3+0x1de>
    3500:	40 5c       	subi	r20, 0xC0	; 192
    3502:	5f 4f       	sbci	r21, 0xFF	; 255
    3504:	6f 4f       	sbci	r22, 0xFF	; 255
    3506:	7f 4f       	sbci	r23, 0xFF	; 255
    3508:	40 78       	andi	r20, 0x80	; 128
    350a:	4d 8f       	std	Y+29, r20	; 0x1d
    350c:	5e 8f       	std	Y+30, r21	; 0x1e
    350e:	6f 8f       	std	Y+31, r22	; 0x1f
    3510:	78 a3       	std	Y+32, r23	; 0x20
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	89 8f       	std	Y+25, r24	; 0x19
    3516:	be 01       	movw	r22, r28
    3518:	67 5e       	subi	r22, 0xE7	; 231
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	cb 01       	movw	r24, r22
    351e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__pack_f>
    3522:	e0 e1       	ldi	r30, 0x10	; 16
    3524:	a0 96       	adiw	r28, 0x20	; 32
    3526:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__epilogue_restores__+0x4>

0000352a <__floatsisf>:
    352a:	a8 e0       	ldi	r26, 0x08	; 8
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	eb e9       	ldi	r30, 0x9B	; 155
    3530:	fa e1       	ldi	r31, 0x1A	; 26
    3532:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__prologue_saves__+0x12>
    3536:	9b 01       	movw	r18, r22
    3538:	ac 01       	movw	r20, r24
    353a:	83 e0       	ldi	r24, 0x03	; 3
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	da 01       	movw	r26, r20
    3540:	c9 01       	movw	r24, r18
    3542:	88 27       	eor	r24, r24
    3544:	b7 fd       	sbrc	r27, 7
    3546:	83 95       	inc	r24
    3548:	99 27       	eor	r25, r25
    354a:	aa 27       	eor	r26, r26
    354c:	bb 27       	eor	r27, r27
    354e:	b8 2e       	mov	r11, r24
    3550:	21 15       	cp	r18, r1
    3552:	31 05       	cpc	r19, r1
    3554:	41 05       	cpc	r20, r1
    3556:	51 05       	cpc	r21, r1
    3558:	19 f4       	brne	.+6      	; 0x3560 <__floatsisf+0x36>
    355a:	82 e0       	ldi	r24, 0x02	; 2
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	3a c0       	rjmp	.+116    	; 0x35d4 <__floatsisf+0xaa>
    3560:	88 23       	and	r24, r24
    3562:	a9 f0       	breq	.+42     	; 0x358e <__floatsisf+0x64>
    3564:	20 30       	cpi	r18, 0x00	; 0
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	38 07       	cpc	r19, r24
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	48 07       	cpc	r20, r24
    356e:	80 e8       	ldi	r24, 0x80	; 128
    3570:	58 07       	cpc	r21, r24
    3572:	29 f4       	brne	.+10     	; 0x357e <__floatsisf+0x54>
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	9f ec       	ldi	r25, 0xCF	; 207
    357c:	30 c0       	rjmp	.+96     	; 0x35de <__floatsisf+0xb4>
    357e:	ee 24       	eor	r14, r14
    3580:	ff 24       	eor	r15, r15
    3582:	87 01       	movw	r16, r14
    3584:	e2 1a       	sub	r14, r18
    3586:	f3 0a       	sbc	r15, r19
    3588:	04 0b       	sbc	r16, r20
    358a:	15 0b       	sbc	r17, r21
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <__floatsisf+0x68>
    358e:	79 01       	movw	r14, r18
    3590:	8a 01       	movw	r16, r20
    3592:	8e e1       	ldi	r24, 0x1E	; 30
    3594:	c8 2e       	mov	r12, r24
    3596:	d1 2c       	mov	r13, r1
    3598:	dc 82       	std	Y+4, r13	; 0x04
    359a:	cb 82       	std	Y+3, r12	; 0x03
    359c:	ed 82       	std	Y+5, r14	; 0x05
    359e:	fe 82       	std	Y+6, r15	; 0x06
    35a0:	0f 83       	std	Y+7, r16	; 0x07
    35a2:	18 87       	std	Y+8, r17	; 0x08
    35a4:	c8 01       	movw	r24, r16
    35a6:	b7 01       	movw	r22, r14
    35a8:	0e 94 46 1b 	call	0x368c	; 0x368c <__clzsi2>
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	18 16       	cp	r1, r24
    35b0:	19 06       	cpc	r1, r25
    35b2:	84 f4       	brge	.+32     	; 0x35d4 <__floatsisf+0xaa>
    35b4:	08 2e       	mov	r0, r24
    35b6:	04 c0       	rjmp	.+8      	; 0x35c0 <__floatsisf+0x96>
    35b8:	ee 0c       	add	r14, r14
    35ba:	ff 1c       	adc	r15, r15
    35bc:	00 1f       	adc	r16, r16
    35be:	11 1f       	adc	r17, r17
    35c0:	0a 94       	dec	r0
    35c2:	d2 f7       	brpl	.-12     	; 0x35b8 <__floatsisf+0x8e>
    35c4:	ed 82       	std	Y+5, r14	; 0x05
    35c6:	fe 82       	std	Y+6, r15	; 0x06
    35c8:	0f 83       	std	Y+7, r16	; 0x07
    35ca:	18 87       	std	Y+8, r17	; 0x08
    35cc:	c8 1a       	sub	r12, r24
    35ce:	d9 0a       	sbc	r13, r25
    35d0:	dc 82       	std	Y+4, r13	; 0x04
    35d2:	cb 82       	std	Y+3, r12	; 0x03
    35d4:	ba 82       	std	Y+2, r11	; 0x02
    35d6:	ce 01       	movw	r24, r28
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	0e 94 93 1b 	call	0x3726	; 0x3726 <__pack_f>
    35de:	e9 e0       	ldi	r30, 0x09	; 9
    35e0:	28 96       	adiw	r28, 0x08	; 8
    35e2:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__epilogue_restores__+0x12>

000035e6 <__fixsfsi>:
    35e6:	ac e0       	ldi	r26, 0x0C	; 12
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e9 ef       	ldi	r30, 0xF9	; 249
    35ec:	fa e1       	ldi	r31, 0x1A	; 26
    35ee:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x20>
    35f2:	69 83       	std	Y+1, r22	; 0x01
    35f4:	7a 83       	std	Y+2, r23	; 0x02
    35f6:	8b 83       	std	Y+3, r24	; 0x03
    35f8:	9c 83       	std	Y+4, r25	; 0x04
    35fa:	be 01       	movw	r22, r28
    35fc:	6b 5f       	subi	r22, 0xFB	; 251
    35fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3600:	ce 01       	movw	r24, r28
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__unpack_f>
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	82 30       	cpi	r24, 0x02	; 2
    360c:	a9 f1       	breq	.+106    	; 0x3678 <__fixsfsi+0x92>
    360e:	82 30       	cpi	r24, 0x02	; 2
    3610:	98 f1       	brcs	.+102    	; 0x3678 <__fixsfsi+0x92>
    3612:	84 30       	cpi	r24, 0x04	; 4
    3614:	21 f4       	brne	.+8      	; 0x361e <__fixsfsi+0x38>
    3616:	8e 81       	ldd	r24, Y+6	; 0x06
    3618:	88 23       	and	r24, r24
    361a:	59 f4       	brne	.+22     	; 0x3632 <__fixsfsi+0x4c>
    361c:	0f c0       	rjmp	.+30     	; 0x363c <__fixsfsi+0x56>
    361e:	2f 81       	ldd	r18, Y+7	; 0x07
    3620:	38 85       	ldd	r19, Y+8	; 0x08
    3622:	37 fd       	sbrc	r19, 7
    3624:	29 c0       	rjmp	.+82     	; 0x3678 <__fixsfsi+0x92>
    3626:	6e 81       	ldd	r22, Y+6	; 0x06
    3628:	2f 31       	cpi	r18, 0x1F	; 31
    362a:	31 05       	cpc	r19, r1
    362c:	64 f0       	brlt	.+24     	; 0x3646 <__fixsfsi+0x60>
    362e:	66 23       	and	r22, r22
    3630:	29 f0       	breq	.+10     	; 0x363c <__fixsfsi+0x56>
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e0       	ldi	r20, 0x00	; 0
    3638:	50 e8       	ldi	r21, 0x80	; 128
    363a:	22 c0       	rjmp	.+68     	; 0x3680 <__fixsfsi+0x9a>
    363c:	2f ef       	ldi	r18, 0xFF	; 255
    363e:	3f ef       	ldi	r19, 0xFF	; 255
    3640:	4f ef       	ldi	r20, 0xFF	; 255
    3642:	5f e7       	ldi	r21, 0x7F	; 127
    3644:	1d c0       	rjmp	.+58     	; 0x3680 <__fixsfsi+0x9a>
    3646:	8e e1       	ldi	r24, 0x1E	; 30
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	82 1b       	sub	r24, r18
    364c:	93 0b       	sbc	r25, r19
    364e:	29 85       	ldd	r18, Y+9	; 0x09
    3650:	3a 85       	ldd	r19, Y+10	; 0x0a
    3652:	4b 85       	ldd	r20, Y+11	; 0x0b
    3654:	5c 85       	ldd	r21, Y+12	; 0x0c
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <__fixsfsi+0x7a>
    3658:	56 95       	lsr	r21
    365a:	47 95       	ror	r20
    365c:	37 95       	ror	r19
    365e:	27 95       	ror	r18
    3660:	8a 95       	dec	r24
    3662:	d2 f7       	brpl	.-12     	; 0x3658 <__fixsfsi+0x72>
    3664:	66 23       	and	r22, r22
    3666:	61 f0       	breq	.+24     	; 0x3680 <__fixsfsi+0x9a>
    3668:	50 95       	com	r21
    366a:	40 95       	com	r20
    366c:	30 95       	com	r19
    366e:	21 95       	neg	r18
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	4f 4f       	sbci	r20, 0xFF	; 255
    3674:	5f 4f       	sbci	r21, 0xFF	; 255
    3676:	04 c0       	rjmp	.+8      	; 0x3680 <__fixsfsi+0x9a>
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	ca 01       	movw	r24, r20
    3682:	b9 01       	movw	r22, r18
    3684:	e2 e0       	ldi	r30, 0x02	; 2
    3686:	2c 96       	adiw	r28, 0x0c	; 12
    3688:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x20>

0000368c <__clzsi2>:
    368c:	ef 92       	push	r14
    368e:	ff 92       	push	r15
    3690:	0f 93       	push	r16
    3692:	1f 93       	push	r17
    3694:	9b 01       	movw	r18, r22
    3696:	ac 01       	movw	r20, r24
    3698:	20 30       	cpi	r18, 0x00	; 0
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	38 07       	cpc	r19, r24
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	48 07       	cpc	r20, r24
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	58 07       	cpc	r21, r24
    36a6:	80 f4       	brcc	.+32     	; 0x36c8 <__clzsi2+0x3c>
    36a8:	2f 3f       	cpi	r18, 0xFF	; 255
    36aa:	31 05       	cpc	r19, r1
    36ac:	41 05       	cpc	r20, r1
    36ae:	51 05       	cpc	r21, r1
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <__clzsi2+0x28>
    36b2:	20 f4       	brcc	.+8      	; 0x36bc <__clzsi2+0x30>
    36b4:	ee 24       	eor	r14, r14
    36b6:	ff 24       	eor	r15, r15
    36b8:	87 01       	movw	r16, r14
    36ba:	19 c0       	rjmp	.+50     	; 0x36ee <__clzsi2+0x62>
    36bc:	68 e0       	ldi	r22, 0x08	; 8
    36be:	e6 2e       	mov	r14, r22
    36c0:	f1 2c       	mov	r15, r1
    36c2:	01 2d       	mov	r16, r1
    36c4:	11 2d       	mov	r17, r1
    36c6:	13 c0       	rjmp	.+38     	; 0x36ee <__clzsi2+0x62>
    36c8:	20 30       	cpi	r18, 0x00	; 0
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	38 07       	cpc	r19, r24
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	48 07       	cpc	r20, r24
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	58 07       	cpc	r21, r24
    36d6:	30 f4       	brcc	.+12     	; 0x36e4 <__clzsi2+0x58>
    36d8:	90 e1       	ldi	r25, 0x10	; 16
    36da:	e9 2e       	mov	r14, r25
    36dc:	f1 2c       	mov	r15, r1
    36de:	01 2d       	mov	r16, r1
    36e0:	11 2d       	mov	r17, r1
    36e2:	05 c0       	rjmp	.+10     	; 0x36ee <__clzsi2+0x62>
    36e4:	88 e1       	ldi	r24, 0x18	; 24
    36e6:	e8 2e       	mov	r14, r24
    36e8:	f1 2c       	mov	r15, r1
    36ea:	01 2d       	mov	r16, r1
    36ec:	11 2d       	mov	r17, r1
    36ee:	80 e2       	ldi	r24, 0x20	; 32
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a0 e0       	ldi	r26, 0x00	; 0
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	8e 19       	sub	r24, r14
    36f8:	9f 09       	sbc	r25, r15
    36fa:	a0 0b       	sbc	r26, r16
    36fc:	b1 0b       	sbc	r27, r17
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <__clzsi2+0x7c>
    3700:	56 95       	lsr	r21
    3702:	47 95       	ror	r20
    3704:	37 95       	ror	r19
    3706:	27 95       	ror	r18
    3708:	ea 94       	dec	r14
    370a:	d2 f7       	brpl	.-12     	; 0x3700 <__clzsi2+0x74>
    370c:	f9 01       	movw	r30, r18
    370e:	e7 5e       	subi	r30, 0xE7	; 231
    3710:	fd 4f       	sbci	r31, 0xFD	; 253
    3712:	20 81       	ld	r18, Z
    3714:	82 1b       	sub	r24, r18
    3716:	91 09       	sbc	r25, r1
    3718:	a1 09       	sbc	r26, r1
    371a:	b1 09       	sbc	r27, r1
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	08 95       	ret

00003726 <__pack_f>:
    3726:	9f 92       	push	r9
    3728:	af 92       	push	r10
    372a:	bf 92       	push	r11
    372c:	cf 92       	push	r12
    372e:	df 92       	push	r13
    3730:	ef 92       	push	r14
    3732:	ff 92       	push	r15
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	ee 24       	eor	r14, r14
    373a:	ff 24       	eor	r15, r15
    373c:	87 01       	movw	r16, r14
    373e:	fc 01       	movw	r30, r24
    3740:	24 81       	ldd	r18, Z+4	; 0x04
    3742:	35 81       	ldd	r19, Z+5	; 0x05
    3744:	46 81       	ldd	r20, Z+6	; 0x06
    3746:	57 81       	ldd	r21, Z+7	; 0x07
    3748:	91 80       	ldd	r9, Z+1	; 0x01
    374a:	80 81       	ld	r24, Z
    374c:	82 30       	cpi	r24, 0x02	; 2
    374e:	10 f4       	brcc	.+4      	; 0x3754 <__pack_f+0x2e>
    3750:	40 61       	ori	r20, 0x10	; 16
    3752:	a2 c0       	rjmp	.+324    	; 0x3898 <__pack_f+0x172>
    3754:	84 30       	cpi	r24, 0x04	; 4
    3756:	09 f4       	brne	.+2      	; 0x375a <__pack_f+0x34>
    3758:	9b c0       	rjmp	.+310    	; 0x3890 <__pack_f+0x16a>
    375a:	82 30       	cpi	r24, 0x02	; 2
    375c:	29 f4       	brne	.+10     	; 0x3768 <__pack_f+0x42>
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e0       	ldi	r20, 0x00	; 0
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	05 c0       	rjmp	.+10     	; 0x3772 <__pack_f+0x4c>
    3768:	21 15       	cp	r18, r1
    376a:	31 05       	cpc	r19, r1
    376c:	41 05       	cpc	r20, r1
    376e:	51 05       	cpc	r21, r1
    3770:	19 f4       	brne	.+6      	; 0x3778 <__pack_f+0x52>
    3772:	e0 e0       	ldi	r30, 0x00	; 0
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	92 c0       	rjmp	.+292    	; 0x389c <__pack_f+0x176>
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	6f ef       	ldi	r22, 0xFF	; 255
    377e:	82 38       	cpi	r24, 0x82	; 130
    3780:	96 07       	cpc	r25, r22
    3782:	0c f0       	brlt	.+2      	; 0x3786 <__pack_f+0x60>
    3784:	5a c0       	rjmp	.+180    	; 0x383a <__pack_f+0x114>
    3786:	62 e8       	ldi	r22, 0x82	; 130
    3788:	7f ef       	ldi	r23, 0xFF	; 255
    378a:	68 1b       	sub	r22, r24
    378c:	79 0b       	sbc	r23, r25
    378e:	6a 31       	cpi	r22, 0x1A	; 26
    3790:	71 05       	cpc	r23, r1
    3792:	2c f0       	brlt	.+10     	; 0x379e <__pack_f+0x78>
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	50 e0       	ldi	r21, 0x00	; 0
    379c:	2a c0       	rjmp	.+84     	; 0x37f2 <__pack_f+0xcc>
    379e:	aa 24       	eor	r10, r10
    37a0:	bb 24       	eor	r11, r11
    37a2:	65 01       	movw	r12, r10
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	a0 e0       	ldi	r26, 0x00	; 0
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	06 2e       	mov	r0, r22
    37ae:	04 c0       	rjmp	.+8      	; 0x37b8 <__pack_f+0x92>
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	aa 1f       	adc	r26, r26
    37b6:	bb 1f       	adc	r27, r27
    37b8:	0a 94       	dec	r0
    37ba:	d2 f7       	brpl	.-12     	; 0x37b0 <__pack_f+0x8a>
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	a1 09       	sbc	r26, r1
    37c0:	b1 09       	sbc	r27, r1
    37c2:	82 23       	and	r24, r18
    37c4:	93 23       	and	r25, r19
    37c6:	a4 23       	and	r26, r20
    37c8:	b5 23       	and	r27, r21
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	a1 05       	cpc	r26, r1
    37ce:	b1 05       	cpc	r27, r1
    37d0:	29 f0       	breq	.+10     	; 0x37dc <__pack_f+0xb6>
    37d2:	71 e0       	ldi	r23, 0x01	; 1
    37d4:	a7 2e       	mov	r10, r23
    37d6:	b1 2c       	mov	r11, r1
    37d8:	c1 2c       	mov	r12, r1
    37da:	d1 2c       	mov	r13, r1
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <__pack_f+0xc0>
    37de:	56 95       	lsr	r21
    37e0:	47 95       	ror	r20
    37e2:	37 95       	ror	r19
    37e4:	27 95       	ror	r18
    37e6:	6a 95       	dec	r22
    37e8:	d2 f7       	brpl	.-12     	; 0x37de <__pack_f+0xb8>
    37ea:	2a 29       	or	r18, r10
    37ec:	3b 29       	or	r19, r11
    37ee:	4c 29       	or	r20, r12
    37f0:	5d 29       	or	r21, r13
    37f2:	da 01       	movw	r26, r20
    37f4:	c9 01       	movw	r24, r18
    37f6:	8f 77       	andi	r24, 0x7F	; 127
    37f8:	90 70       	andi	r25, 0x00	; 0
    37fa:	a0 70       	andi	r26, 0x00	; 0
    37fc:	b0 70       	andi	r27, 0x00	; 0
    37fe:	80 34       	cpi	r24, 0x40	; 64
    3800:	91 05       	cpc	r25, r1
    3802:	a1 05       	cpc	r26, r1
    3804:	b1 05       	cpc	r27, r1
    3806:	39 f4       	brne	.+14     	; 0x3816 <__pack_f+0xf0>
    3808:	27 ff       	sbrs	r18, 7
    380a:	09 c0       	rjmp	.+18     	; 0x381e <__pack_f+0xf8>
    380c:	20 5c       	subi	r18, 0xC0	; 192
    380e:	3f 4f       	sbci	r19, 0xFF	; 255
    3810:	4f 4f       	sbci	r20, 0xFF	; 255
    3812:	5f 4f       	sbci	r21, 0xFF	; 255
    3814:	04 c0       	rjmp	.+8      	; 0x381e <__pack_f+0xf8>
    3816:	21 5c       	subi	r18, 0xC1	; 193
    3818:	3f 4f       	sbci	r19, 0xFF	; 255
    381a:	4f 4f       	sbci	r20, 0xFF	; 255
    381c:	5f 4f       	sbci	r21, 0xFF	; 255
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	20 30       	cpi	r18, 0x00	; 0
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	36 07       	cpc	r19, r22
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	46 07       	cpc	r20, r22
    382c:	60 e4       	ldi	r22, 0x40	; 64
    382e:	56 07       	cpc	r21, r22
    3830:	10 f0       	brcs	.+4      	; 0x3836 <__pack_f+0x110>
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	fc 01       	movw	r30, r24
    3838:	23 c0       	rjmp	.+70     	; 0x3880 <__pack_f+0x15a>
    383a:	80 38       	cpi	r24, 0x80	; 128
    383c:	91 05       	cpc	r25, r1
    383e:	44 f5       	brge	.+80     	; 0x3890 <__pack_f+0x16a>
    3840:	fc 01       	movw	r30, r24
    3842:	e1 58       	subi	r30, 0x81	; 129
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	da 01       	movw	r26, r20
    3848:	c9 01       	movw	r24, r18
    384a:	8f 77       	andi	r24, 0x7F	; 127
    384c:	90 70       	andi	r25, 0x00	; 0
    384e:	a0 70       	andi	r26, 0x00	; 0
    3850:	b0 70       	andi	r27, 0x00	; 0
    3852:	80 34       	cpi	r24, 0x40	; 64
    3854:	91 05       	cpc	r25, r1
    3856:	a1 05       	cpc	r26, r1
    3858:	b1 05       	cpc	r27, r1
    385a:	39 f4       	brne	.+14     	; 0x386a <__pack_f+0x144>
    385c:	27 ff       	sbrs	r18, 7
    385e:	09 c0       	rjmp	.+18     	; 0x3872 <__pack_f+0x14c>
    3860:	20 5c       	subi	r18, 0xC0	; 192
    3862:	3f 4f       	sbci	r19, 0xFF	; 255
    3864:	4f 4f       	sbci	r20, 0xFF	; 255
    3866:	5f 4f       	sbci	r21, 0xFF	; 255
    3868:	04 c0       	rjmp	.+8      	; 0x3872 <__pack_f+0x14c>
    386a:	21 5c       	subi	r18, 0xC1	; 193
    386c:	3f 4f       	sbci	r19, 0xFF	; 255
    386e:	4f 4f       	sbci	r20, 0xFF	; 255
    3870:	5f 4f       	sbci	r21, 0xFF	; 255
    3872:	57 ff       	sbrs	r21, 7
    3874:	05 c0       	rjmp	.+10     	; 0x3880 <__pack_f+0x15a>
    3876:	56 95       	lsr	r21
    3878:	47 95       	ror	r20
    387a:	37 95       	ror	r19
    387c:	27 95       	ror	r18
    387e:	31 96       	adiw	r30, 0x01	; 1
    3880:	87 e0       	ldi	r24, 0x07	; 7
    3882:	56 95       	lsr	r21
    3884:	47 95       	ror	r20
    3886:	37 95       	ror	r19
    3888:	27 95       	ror	r18
    388a:	8a 95       	dec	r24
    388c:	d1 f7       	brne	.-12     	; 0x3882 <__pack_f+0x15c>
    388e:	06 c0       	rjmp	.+12     	; 0x389c <__pack_f+0x176>
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	50 e0       	ldi	r21, 0x00	; 0
    3898:	ef ef       	ldi	r30, 0xFF	; 255
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	e2 2e       	mov	r14, r18
    389e:	f3 2e       	mov	r15, r19
    38a0:	94 2f       	mov	r25, r20
    38a2:	9f 77       	andi	r25, 0x7F	; 127
    38a4:	80 2f       	mov	r24, r16
    38a6:	80 78       	andi	r24, 0x80	; 128
    38a8:	89 2b       	or	r24, r25
    38aa:	9e 2f       	mov	r25, r30
    38ac:	97 95       	ror	r25
    38ae:	99 27       	eor	r25, r25
    38b0:	97 95       	ror	r25
    38b2:	8f 77       	andi	r24, 0x7F	; 127
    38b4:	08 2f       	mov	r16, r24
    38b6:	09 2b       	or	r16, r25
    38b8:	9e 2f       	mov	r25, r30
    38ba:	96 95       	lsr	r25
    38bc:	81 2f       	mov	r24, r17
    38be:	80 78       	andi	r24, 0x80	; 128
    38c0:	89 2b       	or	r24, r25
    38c2:	97 94       	ror	r9
    38c4:	99 24       	eor	r9, r9
    38c6:	97 94       	ror	r9
    38c8:	8f 77       	andi	r24, 0x7F	; 127
    38ca:	18 2f       	mov	r17, r24
    38cc:	19 29       	or	r17, r9
    38ce:	c8 01       	movw	r24, r16
    38d0:	b7 01       	movw	r22, r14
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	df 90       	pop	r13
    38dc:	cf 90       	pop	r12
    38de:	bf 90       	pop	r11
    38e0:	af 90       	pop	r10
    38e2:	9f 90       	pop	r9
    38e4:	08 95       	ret

000038e6 <__unpack_f>:
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	fc 01       	movw	r30, r24
    38ec:	db 01       	movw	r26, r22
    38ee:	20 81       	ld	r18, Z
    38f0:	31 81       	ldd	r19, Z+1	; 0x01
    38f2:	92 81       	ldd	r25, Z+2	; 0x02
    38f4:	49 2f       	mov	r20, r25
    38f6:	4f 77       	andi	r20, 0x7F	; 127
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	99 1f       	adc	r25, r25
    38fc:	99 27       	eor	r25, r25
    38fe:	99 1f       	adc	r25, r25
    3900:	83 81       	ldd	r24, Z+3	; 0x03
    3902:	e8 2f       	mov	r30, r24
    3904:	ee 0f       	add	r30, r30
    3906:	e9 2b       	or	r30, r25
    3908:	6e 2f       	mov	r22, r30
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	88 1f       	adc	r24, r24
    390e:	88 27       	eor	r24, r24
    3910:	88 1f       	adc	r24, r24
    3912:	ed 01       	movw	r28, r26
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	ee 23       	and	r30, r30
    3918:	71 f5       	brne	.+92     	; 0x3976 <__unpack_f+0x90>
    391a:	21 15       	cp	r18, r1
    391c:	31 05       	cpc	r19, r1
    391e:	41 05       	cpc	r20, r1
    3920:	51 05       	cpc	r21, r1
    3922:	11 f4       	brne	.+4      	; 0x3928 <__unpack_f+0x42>
    3924:	82 e0       	ldi	r24, 0x02	; 2
    3926:	2f c0       	rjmp	.+94     	; 0x3986 <__unpack_f+0xa0>
    3928:	6e 57       	subi	r22, 0x7E	; 126
    392a:	70 40       	sbci	r23, 0x00	; 0
    392c:	fd 01       	movw	r30, r26
    392e:	73 83       	std	Z+3, r23	; 0x03
    3930:	62 83       	std	Z+2, r22	; 0x02
    3932:	67 e0       	ldi	r22, 0x07	; 7
    3934:	22 0f       	add	r18, r18
    3936:	33 1f       	adc	r19, r19
    3938:	44 1f       	adc	r20, r20
    393a:	55 1f       	adc	r21, r21
    393c:	6a 95       	dec	r22
    393e:	d1 f7       	brne	.-12     	; 0x3934 <__unpack_f+0x4e>
    3940:	83 e0       	ldi	r24, 0x03	; 3
    3942:	8c 93       	st	X, r24
    3944:	0a c0       	rjmp	.+20     	; 0x395a <__unpack_f+0x74>
    3946:	22 0f       	add	r18, r18
    3948:	33 1f       	adc	r19, r19
    394a:	44 1f       	adc	r20, r20
    394c:	55 1f       	adc	r21, r21
    394e:	ed 01       	movw	r28, r26
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	9b 83       	std	Y+3, r25	; 0x03
    3958:	8a 83       	std	Y+2, r24	; 0x02
    395a:	20 30       	cpi	r18, 0x00	; 0
    395c:	e0 e0       	ldi	r30, 0x00	; 0
    395e:	3e 07       	cpc	r19, r30
    3960:	e0 e0       	ldi	r30, 0x00	; 0
    3962:	4e 07       	cpc	r20, r30
    3964:	e0 e4       	ldi	r30, 0x40	; 64
    3966:	5e 07       	cpc	r21, r30
    3968:	70 f3       	brcs	.-36     	; 0x3946 <__unpack_f+0x60>
    396a:	ed 01       	movw	r28, r26
    396c:	2c 83       	std	Y+4, r18	; 0x04
    396e:	3d 83       	std	Y+5, r19	; 0x05
    3970:	4e 83       	std	Y+6, r20	; 0x06
    3972:	5f 83       	std	Y+7, r21	; 0x07
    3974:	25 c0       	rjmp	.+74     	; 0x39c0 <__unpack_f+0xda>
    3976:	ef 3f       	cpi	r30, 0xFF	; 255
    3978:	79 f4       	brne	.+30     	; 0x3998 <__unpack_f+0xb2>
    397a:	21 15       	cp	r18, r1
    397c:	31 05       	cpc	r19, r1
    397e:	41 05       	cpc	r20, r1
    3980:	51 05       	cpc	r21, r1
    3982:	19 f4       	brne	.+6      	; 0x398a <__unpack_f+0xa4>
    3984:	84 e0       	ldi	r24, 0x04	; 4
    3986:	8c 93       	st	X, r24
    3988:	1b c0       	rjmp	.+54     	; 0x39c0 <__unpack_f+0xda>
    398a:	44 ff       	sbrs	r20, 4
    398c:	03 c0       	rjmp	.+6      	; 0x3994 <__unpack_f+0xae>
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	8c 93       	st	X, r24
    3992:	11 c0       	rjmp	.+34     	; 0x39b6 <__unpack_f+0xd0>
    3994:	1c 92       	st	X, r1
    3996:	0f c0       	rjmp	.+30     	; 0x39b6 <__unpack_f+0xd0>
    3998:	6f 57       	subi	r22, 0x7F	; 127
    399a:	70 40       	sbci	r23, 0x00	; 0
    399c:	ed 01       	movw	r28, r26
    399e:	7b 83       	std	Y+3, r23	; 0x03
    39a0:	6a 83       	std	Y+2, r22	; 0x02
    39a2:	83 e0       	ldi	r24, 0x03	; 3
    39a4:	8c 93       	st	X, r24
    39a6:	87 e0       	ldi	r24, 0x07	; 7
    39a8:	22 0f       	add	r18, r18
    39aa:	33 1f       	adc	r19, r19
    39ac:	44 1f       	adc	r20, r20
    39ae:	55 1f       	adc	r21, r21
    39b0:	8a 95       	dec	r24
    39b2:	d1 f7       	brne	.-12     	; 0x39a8 <__unpack_f+0xc2>
    39b4:	50 64       	ori	r21, 0x40	; 64
    39b6:	fd 01       	movw	r30, r26
    39b8:	24 83       	std	Z+4, r18	; 0x04
    39ba:	35 83       	std	Z+5, r19	; 0x05
    39bc:	46 83       	std	Z+6, r20	; 0x06
    39be:	57 83       	std	Z+7, r21	; 0x07
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	08 95       	ret

000039c6 <__mulsi3>:
    39c6:	62 9f       	mul	r22, r18
    39c8:	d0 01       	movw	r26, r0
    39ca:	73 9f       	mul	r23, r19
    39cc:	f0 01       	movw	r30, r0
    39ce:	82 9f       	mul	r24, r18
    39d0:	e0 0d       	add	r30, r0
    39d2:	f1 1d       	adc	r31, r1
    39d4:	64 9f       	mul	r22, r20
    39d6:	e0 0d       	add	r30, r0
    39d8:	f1 1d       	adc	r31, r1
    39da:	92 9f       	mul	r25, r18
    39dc:	f0 0d       	add	r31, r0
    39de:	83 9f       	mul	r24, r19
    39e0:	f0 0d       	add	r31, r0
    39e2:	74 9f       	mul	r23, r20
    39e4:	f0 0d       	add	r31, r0
    39e6:	65 9f       	mul	r22, r21
    39e8:	f0 0d       	add	r31, r0
    39ea:	99 27       	eor	r25, r25
    39ec:	72 9f       	mul	r23, r18
    39ee:	b0 0d       	add	r27, r0
    39f0:	e1 1d       	adc	r30, r1
    39f2:	f9 1f       	adc	r31, r25
    39f4:	63 9f       	mul	r22, r19
    39f6:	b0 0d       	add	r27, r0
    39f8:	e1 1d       	adc	r30, r1
    39fa:	f9 1f       	adc	r31, r25
    39fc:	bd 01       	movw	r22, r26
    39fe:	cf 01       	movw	r24, r30
    3a00:	11 24       	eor	r1, r1
    3a02:	08 95       	ret

00003a04 <__udivmodhi4>:
    3a04:	aa 1b       	sub	r26, r26
    3a06:	bb 1b       	sub	r27, r27
    3a08:	51 e1       	ldi	r21, 0x11	; 17
    3a0a:	07 c0       	rjmp	.+14     	; 0x3a1a <__udivmodhi4_ep>

00003a0c <__udivmodhi4_loop>:
    3a0c:	aa 1f       	adc	r26, r26
    3a0e:	bb 1f       	adc	r27, r27
    3a10:	a6 17       	cp	r26, r22
    3a12:	b7 07       	cpc	r27, r23
    3a14:	10 f0       	brcs	.+4      	; 0x3a1a <__udivmodhi4_ep>
    3a16:	a6 1b       	sub	r26, r22
    3a18:	b7 0b       	sbc	r27, r23

00003a1a <__udivmodhi4_ep>:
    3a1a:	88 1f       	adc	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	5a 95       	dec	r21
    3a20:	a9 f7       	brne	.-22     	; 0x3a0c <__udivmodhi4_loop>
    3a22:	80 95       	com	r24
    3a24:	90 95       	com	r25
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	08 95       	ret

00003a2c <__divmodhi4>:
    3a2c:	97 fb       	bst	r25, 7
    3a2e:	09 2e       	mov	r0, r25
    3a30:	07 26       	eor	r0, r23
    3a32:	0a d0       	rcall	.+20     	; 0x3a48 <__divmodhi4_neg1>
    3a34:	77 fd       	sbrc	r23, 7
    3a36:	04 d0       	rcall	.+8      	; 0x3a40 <__divmodhi4_neg2>
    3a38:	e5 df       	rcall	.-54     	; 0x3a04 <__udivmodhi4>
    3a3a:	06 d0       	rcall	.+12     	; 0x3a48 <__divmodhi4_neg1>
    3a3c:	00 20       	and	r0, r0
    3a3e:	1a f4       	brpl	.+6      	; 0x3a46 <__divmodhi4_exit>

00003a40 <__divmodhi4_neg2>:
    3a40:	70 95       	com	r23
    3a42:	61 95       	neg	r22
    3a44:	7f 4f       	sbci	r23, 0xFF	; 255

00003a46 <__divmodhi4_exit>:
    3a46:	08 95       	ret

00003a48 <__divmodhi4_neg1>:
    3a48:	f6 f7       	brtc	.-4      	; 0x3a46 <__divmodhi4_exit>
    3a4a:	90 95       	com	r25
    3a4c:	81 95       	neg	r24
    3a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a50:	08 95       	ret

00003a52 <__divmodsi4>:
    3a52:	97 fb       	bst	r25, 7
    3a54:	09 2e       	mov	r0, r25
    3a56:	05 26       	eor	r0, r21
    3a58:	0e d0       	rcall	.+28     	; 0x3a76 <__divmodsi4_neg1>
    3a5a:	57 fd       	sbrc	r21, 7
    3a5c:	04 d0       	rcall	.+8      	; 0x3a66 <__divmodsi4_neg2>
    3a5e:	14 d0       	rcall	.+40     	; 0x3a88 <__udivmodsi4>
    3a60:	0a d0       	rcall	.+20     	; 0x3a76 <__divmodsi4_neg1>
    3a62:	00 1c       	adc	r0, r0
    3a64:	38 f4       	brcc	.+14     	; 0x3a74 <__divmodsi4_exit>

00003a66 <__divmodsi4_neg2>:
    3a66:	50 95       	com	r21
    3a68:	40 95       	com	r20
    3a6a:	30 95       	com	r19
    3a6c:	21 95       	neg	r18
    3a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a70:	4f 4f       	sbci	r20, 0xFF	; 255
    3a72:	5f 4f       	sbci	r21, 0xFF	; 255

00003a74 <__divmodsi4_exit>:
    3a74:	08 95       	ret

00003a76 <__divmodsi4_neg1>:
    3a76:	f6 f7       	brtc	.-4      	; 0x3a74 <__divmodsi4_exit>
    3a78:	90 95       	com	r25
    3a7a:	80 95       	com	r24
    3a7c:	70 95       	com	r23
    3a7e:	61 95       	neg	r22
    3a80:	7f 4f       	sbci	r23, 0xFF	; 255
    3a82:	8f 4f       	sbci	r24, 0xFF	; 255
    3a84:	9f 4f       	sbci	r25, 0xFF	; 255
    3a86:	08 95       	ret

00003a88 <__udivmodsi4>:
    3a88:	a1 e2       	ldi	r26, 0x21	; 33
    3a8a:	1a 2e       	mov	r1, r26
    3a8c:	aa 1b       	sub	r26, r26
    3a8e:	bb 1b       	sub	r27, r27
    3a90:	fd 01       	movw	r30, r26
    3a92:	0d c0       	rjmp	.+26     	; 0x3aae <__udivmodsi4_ep>

00003a94 <__udivmodsi4_loop>:
    3a94:	aa 1f       	adc	r26, r26
    3a96:	bb 1f       	adc	r27, r27
    3a98:	ee 1f       	adc	r30, r30
    3a9a:	ff 1f       	adc	r31, r31
    3a9c:	a2 17       	cp	r26, r18
    3a9e:	b3 07       	cpc	r27, r19
    3aa0:	e4 07       	cpc	r30, r20
    3aa2:	f5 07       	cpc	r31, r21
    3aa4:	20 f0       	brcs	.+8      	; 0x3aae <__udivmodsi4_ep>
    3aa6:	a2 1b       	sub	r26, r18
    3aa8:	b3 0b       	sbc	r27, r19
    3aaa:	e4 0b       	sbc	r30, r20
    3aac:	f5 0b       	sbc	r31, r21

00003aae <__udivmodsi4_ep>:
    3aae:	66 1f       	adc	r22, r22
    3ab0:	77 1f       	adc	r23, r23
    3ab2:	88 1f       	adc	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	1a 94       	dec	r1
    3ab8:	69 f7       	brne	.-38     	; 0x3a94 <__udivmodsi4_loop>
    3aba:	60 95       	com	r22
    3abc:	70 95       	com	r23
    3abe:	80 95       	com	r24
    3ac0:	90 95       	com	r25
    3ac2:	9b 01       	movw	r18, r22
    3ac4:	ac 01       	movw	r20, r24
    3ac6:	bd 01       	movw	r22, r26
    3ac8:	cf 01       	movw	r24, r30
    3aca:	08 95       	ret

00003acc <__prologue_saves__>:
    3acc:	2f 92       	push	r2
    3ace:	3f 92       	push	r3
    3ad0:	4f 92       	push	r4
    3ad2:	5f 92       	push	r5
    3ad4:	6f 92       	push	r6
    3ad6:	7f 92       	push	r7
    3ad8:	8f 92       	push	r8
    3ada:	9f 92       	push	r9
    3adc:	af 92       	push	r10
    3ade:	bf 92       	push	r11
    3ae0:	cf 92       	push	r12
    3ae2:	df 92       	push	r13
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	ca 1b       	sub	r28, r26
    3af6:	db 0b       	sbc	r29, r27
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	f8 94       	cli
    3afc:	de bf       	out	0x3e, r29	; 62
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	cd bf       	out	0x3d, r28	; 61
    3b02:	19 94       	eijmp

00003b04 <__epilogue_restores__>:
    3b04:	2a 88       	ldd	r2, Y+18	; 0x12
    3b06:	39 88       	ldd	r3, Y+17	; 0x11
    3b08:	48 88       	ldd	r4, Y+16	; 0x10
    3b0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b10:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b12:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b14:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b16:	b9 84       	ldd	r11, Y+9	; 0x09
    3b18:	c8 84       	ldd	r12, Y+8	; 0x08
    3b1a:	df 80       	ldd	r13, Y+7	; 0x07
    3b1c:	ee 80       	ldd	r14, Y+6	; 0x06
    3b1e:	fd 80       	ldd	r15, Y+5	; 0x05
    3b20:	0c 81       	ldd	r16, Y+4	; 0x04
    3b22:	1b 81       	ldd	r17, Y+3	; 0x03
    3b24:	aa 81       	ldd	r26, Y+2	; 0x02
    3b26:	b9 81       	ldd	r27, Y+1	; 0x01
    3b28:	ce 0f       	add	r28, r30
    3b2a:	d1 1d       	adc	r29, r1
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	ed 01       	movw	r28, r26
    3b38:	08 95       	ret

00003b3a <malloc>:
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	82 30       	cpi	r24, 0x02	; 2
    3b40:	91 05       	cpc	r25, r1
    3b42:	10 f4       	brcc	.+4      	; 0x3b48 <malloc+0xe>
    3b44:	82 e0       	ldi	r24, 0x02	; 2
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	e0 91 08 04 	lds	r30, 0x0408
    3b4c:	f0 91 09 04 	lds	r31, 0x0409
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	26 c0       	rjmp	.+76     	; 0x3ba6 <malloc+0x6c>
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	68 17       	cp	r22, r24
    3b60:	79 07       	cpc	r23, r25
    3b62:	e0 f0       	brcs	.+56     	; 0x3b9c <malloc+0x62>
    3b64:	68 17       	cp	r22, r24
    3b66:	79 07       	cpc	r23, r25
    3b68:	81 f4       	brne	.+32     	; 0x3b8a <malloc+0x50>
    3b6a:	82 81       	ldd	r24, Z+2	; 0x02
    3b6c:	93 81       	ldd	r25, Z+3	; 0x03
    3b6e:	21 15       	cp	r18, r1
    3b70:	31 05       	cpc	r19, r1
    3b72:	31 f0       	breq	.+12     	; 0x3b80 <malloc+0x46>
    3b74:	d9 01       	movw	r26, r18
    3b76:	13 96       	adiw	r26, 0x03	; 3
    3b78:	9c 93       	st	X, r25
    3b7a:	8e 93       	st	-X, r24
    3b7c:	12 97       	sbiw	r26, 0x02	; 2
    3b7e:	2b c0       	rjmp	.+86     	; 0x3bd6 <malloc+0x9c>
    3b80:	90 93 09 04 	sts	0x0409, r25
    3b84:	80 93 08 04 	sts	0x0408, r24
    3b88:	26 c0       	rjmp	.+76     	; 0x3bd6 <malloc+0x9c>
    3b8a:	41 15       	cp	r20, r1
    3b8c:	51 05       	cpc	r21, r1
    3b8e:	19 f0       	breq	.+6      	; 0x3b96 <malloc+0x5c>
    3b90:	64 17       	cp	r22, r20
    3b92:	75 07       	cpc	r23, r21
    3b94:	18 f4       	brcc	.+6      	; 0x3b9c <malloc+0x62>
    3b96:	ab 01       	movw	r20, r22
    3b98:	e9 01       	movw	r28, r18
    3b9a:	df 01       	movw	r26, r30
    3b9c:	9f 01       	movw	r18, r30
    3b9e:	72 81       	ldd	r23, Z+2	; 0x02
    3ba0:	63 81       	ldd	r22, Z+3	; 0x03
    3ba2:	e7 2f       	mov	r30, r23
    3ba4:	f6 2f       	mov	r31, r22
    3ba6:	30 97       	sbiw	r30, 0x00	; 0
    3ba8:	c1 f6       	brne	.-80     	; 0x3b5a <malloc+0x20>
    3baa:	41 15       	cp	r20, r1
    3bac:	51 05       	cpc	r21, r1
    3bae:	01 f1       	breq	.+64     	; 0x3bf0 <malloc+0xb6>
    3bb0:	48 1b       	sub	r20, r24
    3bb2:	59 0b       	sbc	r21, r25
    3bb4:	44 30       	cpi	r20, 0x04	; 4
    3bb6:	51 05       	cpc	r21, r1
    3bb8:	80 f4       	brcc	.+32     	; 0x3bda <malloc+0xa0>
    3bba:	12 96       	adiw	r26, 0x02	; 2
    3bbc:	8d 91       	ld	r24, X+
    3bbe:	9c 91       	ld	r25, X
    3bc0:	13 97       	sbiw	r26, 0x03	; 3
    3bc2:	20 97       	sbiw	r28, 0x00	; 0
    3bc4:	19 f0       	breq	.+6      	; 0x3bcc <malloc+0x92>
    3bc6:	9b 83       	std	Y+3, r25	; 0x03
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
    3bca:	04 c0       	rjmp	.+8      	; 0x3bd4 <malloc+0x9a>
    3bcc:	90 93 09 04 	sts	0x0409, r25
    3bd0:	80 93 08 04 	sts	0x0408, r24
    3bd4:	fd 01       	movw	r30, r26
    3bd6:	32 96       	adiw	r30, 0x02	; 2
    3bd8:	46 c0       	rjmp	.+140    	; 0x3c66 <malloc+0x12c>
    3bda:	fd 01       	movw	r30, r26
    3bdc:	e4 0f       	add	r30, r20
    3bde:	f5 1f       	adc	r31, r21
    3be0:	81 93       	st	Z+, r24
    3be2:	91 93       	st	Z+, r25
    3be4:	42 50       	subi	r20, 0x02	; 2
    3be6:	50 40       	sbci	r21, 0x00	; 0
    3be8:	11 96       	adiw	r26, 0x01	; 1
    3bea:	5c 93       	st	X, r21
    3bec:	4e 93       	st	-X, r20
    3bee:	3b c0       	rjmp	.+118    	; 0x3c66 <malloc+0x12c>
    3bf0:	20 91 06 04 	lds	r18, 0x0406
    3bf4:	30 91 07 04 	lds	r19, 0x0407
    3bf8:	21 15       	cp	r18, r1
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	41 f4       	brne	.+16     	; 0x3c0e <malloc+0xd4>
    3bfe:	20 91 1b 03 	lds	r18, 0x031B
    3c02:	30 91 1c 03 	lds	r19, 0x031C
    3c06:	30 93 07 04 	sts	0x0407, r19
    3c0a:	20 93 06 04 	sts	0x0406, r18
    3c0e:	20 91 1d 03 	lds	r18, 0x031D
    3c12:	30 91 1e 03 	lds	r19, 0x031E
    3c16:	21 15       	cp	r18, r1
    3c18:	31 05       	cpc	r19, r1
    3c1a:	41 f4       	brne	.+16     	; 0x3c2c <malloc+0xf2>
    3c1c:	2d b7       	in	r18, 0x3d	; 61
    3c1e:	3e b7       	in	r19, 0x3e	; 62
    3c20:	40 91 19 03 	lds	r20, 0x0319
    3c24:	50 91 1a 03 	lds	r21, 0x031A
    3c28:	24 1b       	sub	r18, r20
    3c2a:	35 0b       	sbc	r19, r21
    3c2c:	e0 91 06 04 	lds	r30, 0x0406
    3c30:	f0 91 07 04 	lds	r31, 0x0407
    3c34:	e2 17       	cp	r30, r18
    3c36:	f3 07       	cpc	r31, r19
    3c38:	a0 f4       	brcc	.+40     	; 0x3c62 <malloc+0x128>
    3c3a:	2e 1b       	sub	r18, r30
    3c3c:	3f 0b       	sbc	r19, r31
    3c3e:	28 17       	cp	r18, r24
    3c40:	39 07       	cpc	r19, r25
    3c42:	78 f0       	brcs	.+30     	; 0x3c62 <malloc+0x128>
    3c44:	ac 01       	movw	r20, r24
    3c46:	4e 5f       	subi	r20, 0xFE	; 254
    3c48:	5f 4f       	sbci	r21, 0xFF	; 255
    3c4a:	24 17       	cp	r18, r20
    3c4c:	35 07       	cpc	r19, r21
    3c4e:	48 f0       	brcs	.+18     	; 0x3c62 <malloc+0x128>
    3c50:	4e 0f       	add	r20, r30
    3c52:	5f 1f       	adc	r21, r31
    3c54:	50 93 07 04 	sts	0x0407, r21
    3c58:	40 93 06 04 	sts	0x0406, r20
    3c5c:	81 93       	st	Z+, r24
    3c5e:	91 93       	st	Z+, r25
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <malloc+0x12c>
    3c62:	e0 e0       	ldi	r30, 0x00	; 0
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	cf 01       	movw	r24, r30
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	08 95       	ret

00003c6e <free>:
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	09 f4       	brne	.+2      	; 0x3c78 <free+0xa>
    3c76:	91 c0       	rjmp	.+290    	; 0x3d9a <free+0x12c>
    3c78:	fc 01       	movw	r30, r24
    3c7a:	32 97       	sbiw	r30, 0x02	; 2
    3c7c:	13 82       	std	Z+3, r1	; 0x03
    3c7e:	12 82       	std	Z+2, r1	; 0x02
    3c80:	60 91 08 04 	lds	r22, 0x0408
    3c84:	70 91 09 04 	lds	r23, 0x0409
    3c88:	61 15       	cp	r22, r1
    3c8a:	71 05       	cpc	r23, r1
    3c8c:	81 f4       	brne	.+32     	; 0x3cae <free+0x40>
    3c8e:	20 81       	ld	r18, Z
    3c90:	31 81       	ldd	r19, Z+1	; 0x01
    3c92:	28 0f       	add	r18, r24
    3c94:	39 1f       	adc	r19, r25
    3c96:	80 91 06 04 	lds	r24, 0x0406
    3c9a:	90 91 07 04 	lds	r25, 0x0407
    3c9e:	82 17       	cp	r24, r18
    3ca0:	93 07       	cpc	r25, r19
    3ca2:	99 f5       	brne	.+102    	; 0x3d0a <free+0x9c>
    3ca4:	f0 93 07 04 	sts	0x0407, r31
    3ca8:	e0 93 06 04 	sts	0x0406, r30
    3cac:	76 c0       	rjmp	.+236    	; 0x3d9a <free+0x12c>
    3cae:	db 01       	movw	r26, r22
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	02 c0       	rjmp	.+4      	; 0x3cba <free+0x4c>
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	d9 01       	movw	r26, r18
    3cba:	ae 17       	cp	r26, r30
    3cbc:	bf 07       	cpc	r27, r31
    3cbe:	48 f4       	brcc	.+18     	; 0x3cd2 <free+0x64>
    3cc0:	12 96       	adiw	r26, 0x02	; 2
    3cc2:	2d 91       	ld	r18, X+
    3cc4:	3c 91       	ld	r19, X
    3cc6:	13 97       	sbiw	r26, 0x03	; 3
    3cc8:	21 15       	cp	r18, r1
    3cca:	31 05       	cpc	r19, r1
    3ccc:	a1 f7       	brne	.-24     	; 0x3cb6 <free+0x48>
    3cce:	cd 01       	movw	r24, r26
    3cd0:	21 c0       	rjmp	.+66     	; 0x3d14 <free+0xa6>
    3cd2:	b3 83       	std	Z+3, r27	; 0x03
    3cd4:	a2 83       	std	Z+2, r26	; 0x02
    3cd6:	ef 01       	movw	r28, r30
    3cd8:	49 91       	ld	r20, Y+
    3cda:	59 91       	ld	r21, Y+
    3cdc:	9e 01       	movw	r18, r28
    3cde:	24 0f       	add	r18, r20
    3ce0:	35 1f       	adc	r19, r21
    3ce2:	a2 17       	cp	r26, r18
    3ce4:	b3 07       	cpc	r27, r19
    3ce6:	79 f4       	brne	.+30     	; 0x3d06 <free+0x98>
    3ce8:	2d 91       	ld	r18, X+
    3cea:	3c 91       	ld	r19, X
    3cec:	11 97       	sbiw	r26, 0x01	; 1
    3cee:	24 0f       	add	r18, r20
    3cf0:	35 1f       	adc	r19, r21
    3cf2:	2e 5f       	subi	r18, 0xFE	; 254
    3cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf6:	31 83       	std	Z+1, r19	; 0x01
    3cf8:	20 83       	st	Z, r18
    3cfa:	12 96       	adiw	r26, 0x02	; 2
    3cfc:	2d 91       	ld	r18, X+
    3cfe:	3c 91       	ld	r19, X
    3d00:	13 97       	sbiw	r26, 0x03	; 3
    3d02:	33 83       	std	Z+3, r19	; 0x03
    3d04:	22 83       	std	Z+2, r18	; 0x02
    3d06:	00 97       	sbiw	r24, 0x00	; 0
    3d08:	29 f4       	brne	.+10     	; 0x3d14 <free+0xa6>
    3d0a:	f0 93 09 04 	sts	0x0409, r31
    3d0e:	e0 93 08 04 	sts	0x0408, r30
    3d12:	43 c0       	rjmp	.+134    	; 0x3d9a <free+0x12c>
    3d14:	dc 01       	movw	r26, r24
    3d16:	13 96       	adiw	r26, 0x03	; 3
    3d18:	fc 93       	st	X, r31
    3d1a:	ee 93       	st	-X, r30
    3d1c:	12 97       	sbiw	r26, 0x02	; 2
    3d1e:	4d 91       	ld	r20, X+
    3d20:	5d 91       	ld	r21, X+
    3d22:	a4 0f       	add	r26, r20
    3d24:	b5 1f       	adc	r27, r21
    3d26:	ea 17       	cp	r30, r26
    3d28:	fb 07       	cpc	r31, r27
    3d2a:	69 f4       	brne	.+26     	; 0x3d46 <free+0xd8>
    3d2c:	20 81       	ld	r18, Z
    3d2e:	31 81       	ldd	r19, Z+1	; 0x01
    3d30:	24 0f       	add	r18, r20
    3d32:	35 1f       	adc	r19, r21
    3d34:	2e 5f       	subi	r18, 0xFE	; 254
    3d36:	3f 4f       	sbci	r19, 0xFF	; 255
    3d38:	ec 01       	movw	r28, r24
    3d3a:	39 83       	std	Y+1, r19	; 0x01
    3d3c:	28 83       	st	Y, r18
    3d3e:	22 81       	ldd	r18, Z+2	; 0x02
    3d40:	33 81       	ldd	r19, Z+3	; 0x03
    3d42:	3b 83       	std	Y+3, r19	; 0x03
    3d44:	2a 83       	std	Y+2, r18	; 0x02
    3d46:	e0 e0       	ldi	r30, 0x00	; 0
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	02 c0       	rjmp	.+4      	; 0x3d50 <free+0xe2>
    3d4c:	fb 01       	movw	r30, r22
    3d4e:	bc 01       	movw	r22, r24
    3d50:	db 01       	movw	r26, r22
    3d52:	12 96       	adiw	r26, 0x02	; 2
    3d54:	8d 91       	ld	r24, X+
    3d56:	9c 91       	ld	r25, X
    3d58:	13 97       	sbiw	r26, 0x03	; 3
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	b9 f7       	brne	.-18     	; 0x3d4c <free+0xde>
    3d5e:	9b 01       	movw	r18, r22
    3d60:	2e 5f       	subi	r18, 0xFE	; 254
    3d62:	3f 4f       	sbci	r19, 0xFF	; 255
    3d64:	8d 91       	ld	r24, X+
    3d66:	9c 91       	ld	r25, X
    3d68:	11 97       	sbiw	r26, 0x01	; 1
    3d6a:	82 0f       	add	r24, r18
    3d6c:	93 1f       	adc	r25, r19
    3d6e:	40 91 06 04 	lds	r20, 0x0406
    3d72:	50 91 07 04 	lds	r21, 0x0407
    3d76:	48 17       	cp	r20, r24
    3d78:	59 07       	cpc	r21, r25
    3d7a:	79 f4       	brne	.+30     	; 0x3d9a <free+0x12c>
    3d7c:	30 97       	sbiw	r30, 0x00	; 0
    3d7e:	29 f4       	brne	.+10     	; 0x3d8a <free+0x11c>
    3d80:	10 92 09 04 	sts	0x0409, r1
    3d84:	10 92 08 04 	sts	0x0408, r1
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <free+0x120>
    3d8a:	13 82       	std	Z+3, r1	; 0x03
    3d8c:	12 82       	std	Z+2, r1	; 0x02
    3d8e:	22 50       	subi	r18, 0x02	; 2
    3d90:	30 40       	sbci	r19, 0x00	; 0
    3d92:	30 93 07 04 	sts	0x0407, r19
    3d96:	20 93 06 04 	sts	0x0406, r18
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	08 95       	ret
    3da0:	f5 d0       	rcall	.+490    	; 0x3f8c <__fp_pscA>
    3da2:	58 f0       	brcs	.+22     	; 0x3dba <free+0x14c>
    3da4:	80 e8       	ldi	r24, 0x80	; 128
    3da6:	91 e0       	ldi	r25, 0x01	; 1
    3da8:	09 f4       	brne	.+2      	; 0x3dac <free+0x13e>
    3daa:	9e ef       	ldi	r25, 0xFE	; 254
    3dac:	f6 d0       	rcall	.+492    	; 0x3f9a <__fp_pscB>
    3dae:	28 f0       	brcs	.+10     	; 0x3dba <free+0x14c>
    3db0:	40 e8       	ldi	r20, 0x80	; 128
    3db2:	51 e0       	ldi	r21, 0x01	; 1
    3db4:	59 f4       	brne	.+22     	; 0x3dcc <atan2+0xe>
    3db6:	5e ef       	ldi	r21, 0xFE	; 254
    3db8:	09 c0       	rjmp	.+18     	; 0x3dcc <atan2+0xe>
    3dba:	c0 c0       	rjmp	.+384    	; 0x3f3c <__fp_nan>
    3dbc:	28 c1       	rjmp	.+592    	; 0x400e <__fp_zero>

00003dbe <atan2>:
    3dbe:	e9 2f       	mov	r30, r25
    3dc0:	e0 78       	andi	r30, 0x80	; 128
    3dc2:	03 d1       	rcall	.+518    	; 0x3fca <__fp_split3>
    3dc4:	68 f3       	brcs	.-38     	; 0x3da0 <free+0x132>
    3dc6:	09 2e       	mov	r0, r25
    3dc8:	05 2a       	or	r0, r21
    3dca:	c1 f3       	breq	.-16     	; 0x3dbc <free+0x14e>
    3dcc:	26 17       	cp	r18, r22
    3dce:	37 07       	cpc	r19, r23
    3dd0:	48 07       	cpc	r20, r24
    3dd2:	59 07       	cpc	r21, r25
    3dd4:	38 f0       	brcs	.+14     	; 0x3de4 <atan2+0x26>
    3dd6:	0e 2e       	mov	r0, r30
    3dd8:	07 f8       	bld	r0, 7
    3dda:	e0 25       	eor	r30, r0
    3ddc:	69 f0       	breq	.+26     	; 0x3df8 <atan2+0x3a>
    3dde:	e0 25       	eor	r30, r0
    3de0:	e0 64       	ori	r30, 0x40	; 64
    3de2:	0a c0       	rjmp	.+20     	; 0x3df8 <atan2+0x3a>
    3de4:	ef 63       	ori	r30, 0x3F	; 63
    3de6:	07 f8       	bld	r0, 7
    3de8:	00 94       	com	r0
    3dea:	07 fa       	bst	r0, 7
    3dec:	db 01       	movw	r26, r22
    3dee:	b9 01       	movw	r22, r18
    3df0:	9d 01       	movw	r18, r26
    3df2:	dc 01       	movw	r26, r24
    3df4:	ca 01       	movw	r24, r20
    3df6:	ad 01       	movw	r20, r26
    3df8:	ef 93       	push	r30
    3dfa:	41 d0       	rcall	.+130    	; 0x3e7e <__divsf3_pse>
    3dfc:	d5 d0       	rcall	.+426    	; 0x3fa8 <__fp_round>
    3dfe:	0a d0       	rcall	.+20     	; 0x3e14 <atan>
    3e00:	5f 91       	pop	r21
    3e02:	55 23       	and	r21, r21
    3e04:	31 f0       	breq	.+12     	; 0x3e12 <atan2+0x54>
    3e06:	2b ed       	ldi	r18, 0xDB	; 219
    3e08:	3f e0       	ldi	r19, 0x0F	; 15
    3e0a:	49 e4       	ldi	r20, 0x49	; 73
    3e0c:	50 fd       	sbrc	r21, 0
    3e0e:	49 ec       	ldi	r20, 0xC9	; 201
    3e10:	60 ca       	rjmp	.-2880   	; 0x32d2 <__addsf3>
    3e12:	08 95       	ret

00003e14 <atan>:
    3e14:	df 93       	push	r29
    3e16:	dd 27       	eor	r29, r29
    3e18:	b9 2f       	mov	r27, r25
    3e1a:	bf 77       	andi	r27, 0x7F	; 127
    3e1c:	40 e8       	ldi	r20, 0x80	; 128
    3e1e:	5f e3       	ldi	r21, 0x3F	; 63
    3e20:	16 16       	cp	r1, r22
    3e22:	17 06       	cpc	r1, r23
    3e24:	48 07       	cpc	r20, r24
    3e26:	5b 07       	cpc	r21, r27
    3e28:	10 f4       	brcc	.+4      	; 0x3e2e <atan+0x1a>
    3e2a:	d9 2f       	mov	r29, r25
    3e2c:	f7 d0       	rcall	.+494    	; 0x401c <inverse>
    3e2e:	9f 93       	push	r25
    3e30:	8f 93       	push	r24
    3e32:	7f 93       	push	r23
    3e34:	6f 93       	push	r22
    3e36:	5a d1       	rcall	.+692    	; 0x40ec <square>
    3e38:	e4 ee       	ldi	r30, 0xE4	; 228
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	82 d0       	rcall	.+260    	; 0x3f42 <__fp_powser>
    3e3e:	b4 d0       	rcall	.+360    	; 0x3fa8 <__fp_round>
    3e40:	2f 91       	pop	r18
    3e42:	3f 91       	pop	r19
    3e44:	4f 91       	pop	r20
    3e46:	5f 91       	pop	r21
    3e48:	fa d0       	rcall	.+500    	; 0x403e <__mulsf3x>
    3e4a:	dd 23       	and	r29, r29
    3e4c:	49 f0       	breq	.+18     	; 0x3e60 <atan+0x4c>
    3e4e:	90 58       	subi	r25, 0x80	; 128
    3e50:	a2 ea       	ldi	r26, 0xA2	; 162
    3e52:	2a ed       	ldi	r18, 0xDA	; 218
    3e54:	3f e0       	ldi	r19, 0x0F	; 15
    3e56:	49 ec       	ldi	r20, 0xC9	; 201
    3e58:	5f e3       	ldi	r21, 0x3F	; 63
    3e5a:	d0 78       	andi	r29, 0x80	; 128
    3e5c:	5d 27       	eor	r21, r29
    3e5e:	56 d1       	rcall	.+684    	; 0x410c <__addsf3x>
    3e60:	df 91       	pop	r29
    3e62:	a2 c0       	rjmp	.+324    	; 0x3fa8 <__fp_round>
    3e64:	9a d0       	rcall	.+308    	; 0x3f9a <__fp_pscB>
    3e66:	40 f0       	brcs	.+16     	; 0x3e78 <atan+0x64>
    3e68:	91 d0       	rcall	.+290    	; 0x3f8c <__fp_pscA>
    3e6a:	30 f0       	brcs	.+12     	; 0x3e78 <atan+0x64>
    3e6c:	21 f4       	brne	.+8      	; 0x3e76 <atan+0x62>
    3e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    3e70:	19 f0       	breq	.+6      	; 0x3e78 <atan+0x64>
    3e72:	5e c0       	rjmp	.+188    	; 0x3f30 <__fp_inf>
    3e74:	51 11       	cpse	r21, r1
    3e76:	cc c0       	rjmp	.+408    	; 0x4010 <__fp_szero>
    3e78:	61 c0       	rjmp	.+194    	; 0x3f3c <__fp_nan>

00003e7a <__divsf3x>:
    3e7a:	a7 d0       	rcall	.+334    	; 0x3fca <__fp_split3>
    3e7c:	98 f3       	brcs	.-26     	; 0x3e64 <atan+0x50>

00003e7e <__divsf3_pse>:
    3e7e:	99 23       	and	r25, r25
    3e80:	c9 f3       	breq	.-14     	; 0x3e74 <atan+0x60>
    3e82:	55 23       	and	r21, r21
    3e84:	b1 f3       	breq	.-20     	; 0x3e72 <atan+0x5e>
    3e86:	95 1b       	sub	r25, r21
    3e88:	55 0b       	sbc	r21, r21
    3e8a:	bb 27       	eor	r27, r27
    3e8c:	aa 27       	eor	r26, r26
    3e8e:	62 17       	cp	r22, r18
    3e90:	73 07       	cpc	r23, r19
    3e92:	84 07       	cpc	r24, r20
    3e94:	38 f0       	brcs	.+14     	; 0x3ea4 <__divsf3_pse+0x26>
    3e96:	9f 5f       	subi	r25, 0xFF	; 255
    3e98:	5f 4f       	sbci	r21, 0xFF	; 255
    3e9a:	22 0f       	add	r18, r18
    3e9c:	33 1f       	adc	r19, r19
    3e9e:	44 1f       	adc	r20, r20
    3ea0:	aa 1f       	adc	r26, r26
    3ea2:	a9 f3       	breq	.-22     	; 0x3e8e <__divsf3_pse+0x10>
    3ea4:	33 d0       	rcall	.+102    	; 0x3f0c <__divsf3_pse+0x8e>
    3ea6:	0e 2e       	mov	r0, r30
    3ea8:	3a f0       	brmi	.+14     	; 0x3eb8 <__divsf3_pse+0x3a>
    3eaa:	e0 e8       	ldi	r30, 0x80	; 128
    3eac:	30 d0       	rcall	.+96     	; 0x3f0e <__divsf3_pse+0x90>
    3eae:	91 50       	subi	r25, 0x01	; 1
    3eb0:	50 40       	sbci	r21, 0x00	; 0
    3eb2:	e6 95       	lsr	r30
    3eb4:	00 1c       	adc	r0, r0
    3eb6:	ca f7       	brpl	.-14     	; 0x3eaa <__divsf3_pse+0x2c>
    3eb8:	29 d0       	rcall	.+82     	; 0x3f0c <__divsf3_pse+0x8e>
    3eba:	fe 2f       	mov	r31, r30
    3ebc:	27 d0       	rcall	.+78     	; 0x3f0c <__divsf3_pse+0x8e>
    3ebe:	66 0f       	add	r22, r22
    3ec0:	77 1f       	adc	r23, r23
    3ec2:	88 1f       	adc	r24, r24
    3ec4:	bb 1f       	adc	r27, r27
    3ec6:	26 17       	cp	r18, r22
    3ec8:	37 07       	cpc	r19, r23
    3eca:	48 07       	cpc	r20, r24
    3ecc:	ab 07       	cpc	r26, r27
    3ece:	b0 e8       	ldi	r27, 0x80	; 128
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <__divsf3_pse+0x56>
    3ed2:	bb 0b       	sbc	r27, r27
    3ed4:	80 2d       	mov	r24, r0
    3ed6:	bf 01       	movw	r22, r30
    3ed8:	ff 27       	eor	r31, r31
    3eda:	93 58       	subi	r25, 0x83	; 131
    3edc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ede:	2a f0       	brmi	.+10     	; 0x3eea <__divsf3_pse+0x6c>
    3ee0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ee2:	51 05       	cpc	r21, r1
    3ee4:	68 f0       	brcs	.+26     	; 0x3f00 <__divsf3_pse+0x82>
    3ee6:	24 c0       	rjmp	.+72     	; 0x3f30 <__fp_inf>
    3ee8:	93 c0       	rjmp	.+294    	; 0x4010 <__fp_szero>
    3eea:	5f 3f       	cpi	r21, 0xFF	; 255
    3eec:	ec f3       	brlt	.-6      	; 0x3ee8 <__divsf3_pse+0x6a>
    3eee:	98 3e       	cpi	r25, 0xE8	; 232
    3ef0:	dc f3       	brlt	.-10     	; 0x3ee8 <__divsf3_pse+0x6a>
    3ef2:	86 95       	lsr	r24
    3ef4:	77 95       	ror	r23
    3ef6:	67 95       	ror	r22
    3ef8:	b7 95       	ror	r27
    3efa:	f7 95       	ror	r31
    3efc:	9f 5f       	subi	r25, 0xFF	; 255
    3efe:	c9 f7       	brne	.-14     	; 0x3ef2 <__divsf3_pse+0x74>
    3f00:	88 0f       	add	r24, r24
    3f02:	91 1d       	adc	r25, r1
    3f04:	96 95       	lsr	r25
    3f06:	87 95       	ror	r24
    3f08:	97 f9       	bld	r25, 7
    3f0a:	08 95       	ret
    3f0c:	e1 e0       	ldi	r30, 0x01	; 1
    3f0e:	66 0f       	add	r22, r22
    3f10:	77 1f       	adc	r23, r23
    3f12:	88 1f       	adc	r24, r24
    3f14:	bb 1f       	adc	r27, r27
    3f16:	62 17       	cp	r22, r18
    3f18:	73 07       	cpc	r23, r19
    3f1a:	84 07       	cpc	r24, r20
    3f1c:	ba 07       	cpc	r27, r26
    3f1e:	20 f0       	brcs	.+8      	; 0x3f28 <__divsf3_pse+0xaa>
    3f20:	62 1b       	sub	r22, r18
    3f22:	73 0b       	sbc	r23, r19
    3f24:	84 0b       	sbc	r24, r20
    3f26:	ba 0b       	sbc	r27, r26
    3f28:	ee 1f       	adc	r30, r30
    3f2a:	88 f7       	brcc	.-30     	; 0x3f0e <__divsf3_pse+0x90>
    3f2c:	e0 95       	com	r30
    3f2e:	08 95       	ret

00003f30 <__fp_inf>:
    3f30:	97 f9       	bld	r25, 7
    3f32:	9f 67       	ori	r25, 0x7F	; 127
    3f34:	80 e8       	ldi	r24, 0x80	; 128
    3f36:	70 e0       	ldi	r23, 0x00	; 0
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	08 95       	ret

00003f3c <__fp_nan>:
    3f3c:	9f ef       	ldi	r25, 0xFF	; 255
    3f3e:	80 ec       	ldi	r24, 0xC0	; 192
    3f40:	08 95       	ret

00003f42 <__fp_powser>:
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	1f 93       	push	r17
    3f48:	0f 93       	push	r16
    3f4a:	ff 92       	push	r15
    3f4c:	ef 92       	push	r14
    3f4e:	df 92       	push	r13
    3f50:	7b 01       	movw	r14, r22
    3f52:	8c 01       	movw	r16, r24
    3f54:	68 94       	set
    3f56:	05 c0       	rjmp	.+10     	; 0x3f62 <__fp_powser+0x20>
    3f58:	da 2e       	mov	r13, r26
    3f5a:	ef 01       	movw	r28, r30
    3f5c:	70 d0       	rcall	.+224    	; 0x403e <__mulsf3x>
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e8 94       	clt
    3f62:	a5 91       	lpm	r26, Z+
    3f64:	25 91       	lpm	r18, Z+
    3f66:	35 91       	lpm	r19, Z+
    3f68:	45 91       	lpm	r20, Z+
    3f6a:	55 91       	lpm	r21, Z+
    3f6c:	ae f3       	brts	.-22     	; 0x3f58 <__fp_powser+0x16>
    3f6e:	ef 01       	movw	r28, r30
    3f70:	cd d0       	rcall	.+410    	; 0x410c <__addsf3x>
    3f72:	fe 01       	movw	r30, r28
    3f74:	97 01       	movw	r18, r14
    3f76:	a8 01       	movw	r20, r16
    3f78:	da 94       	dec	r13
    3f7a:	79 f7       	brne	.-34     	; 0x3f5a <__fp_powser+0x18>
    3f7c:	df 90       	pop	r13
    3f7e:	ef 90       	pop	r14
    3f80:	ff 90       	pop	r15
    3f82:	0f 91       	pop	r16
    3f84:	1f 91       	pop	r17
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <__fp_pscA>:
    3f8c:	00 24       	eor	r0, r0
    3f8e:	0a 94       	dec	r0
    3f90:	16 16       	cp	r1, r22
    3f92:	17 06       	cpc	r1, r23
    3f94:	18 06       	cpc	r1, r24
    3f96:	09 06       	cpc	r0, r25
    3f98:	08 95       	ret

00003f9a <__fp_pscB>:
    3f9a:	00 24       	eor	r0, r0
    3f9c:	0a 94       	dec	r0
    3f9e:	12 16       	cp	r1, r18
    3fa0:	13 06       	cpc	r1, r19
    3fa2:	14 06       	cpc	r1, r20
    3fa4:	05 06       	cpc	r0, r21
    3fa6:	08 95       	ret

00003fa8 <__fp_round>:
    3fa8:	09 2e       	mov	r0, r25
    3faa:	03 94       	inc	r0
    3fac:	00 0c       	add	r0, r0
    3fae:	11 f4       	brne	.+4      	; 0x3fb4 <__fp_round+0xc>
    3fb0:	88 23       	and	r24, r24
    3fb2:	52 f0       	brmi	.+20     	; 0x3fc8 <__fp_round+0x20>
    3fb4:	bb 0f       	add	r27, r27
    3fb6:	40 f4       	brcc	.+16     	; 0x3fc8 <__fp_round+0x20>
    3fb8:	bf 2b       	or	r27, r31
    3fba:	11 f4       	brne	.+4      	; 0x3fc0 <__fp_round+0x18>
    3fbc:	60 ff       	sbrs	r22, 0
    3fbe:	04 c0       	rjmp	.+8      	; 0x3fc8 <__fp_round+0x20>
    3fc0:	6f 5f       	subi	r22, 0xFF	; 255
    3fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc8:	08 95       	ret

00003fca <__fp_split3>:
    3fca:	57 fd       	sbrc	r21, 7
    3fcc:	90 58       	subi	r25, 0x80	; 128
    3fce:	44 0f       	add	r20, r20
    3fd0:	55 1f       	adc	r21, r21
    3fd2:	59 f0       	breq	.+22     	; 0x3fea <__fp_splitA+0x10>
    3fd4:	5f 3f       	cpi	r21, 0xFF	; 255
    3fd6:	71 f0       	breq	.+28     	; 0x3ff4 <__fp_splitA+0x1a>
    3fd8:	47 95       	ror	r20

00003fda <__fp_splitA>:
    3fda:	88 0f       	add	r24, r24
    3fdc:	97 fb       	bst	r25, 7
    3fde:	99 1f       	adc	r25, r25
    3fe0:	61 f0       	breq	.+24     	; 0x3ffa <__fp_splitA+0x20>
    3fe2:	9f 3f       	cpi	r25, 0xFF	; 255
    3fe4:	79 f0       	breq	.+30     	; 0x4004 <__fp_splitA+0x2a>
    3fe6:	87 95       	ror	r24
    3fe8:	08 95       	ret
    3fea:	12 16       	cp	r1, r18
    3fec:	13 06       	cpc	r1, r19
    3fee:	14 06       	cpc	r1, r20
    3ff0:	55 1f       	adc	r21, r21
    3ff2:	f2 cf       	rjmp	.-28     	; 0x3fd8 <__fp_split3+0xe>
    3ff4:	46 95       	lsr	r20
    3ff6:	f1 df       	rcall	.-30     	; 0x3fda <__fp_splitA>
    3ff8:	08 c0       	rjmp	.+16     	; 0x400a <__fp_splitA+0x30>
    3ffa:	16 16       	cp	r1, r22
    3ffc:	17 06       	cpc	r1, r23
    3ffe:	18 06       	cpc	r1, r24
    4000:	99 1f       	adc	r25, r25
    4002:	f1 cf       	rjmp	.-30     	; 0x3fe6 <__fp_splitA+0xc>
    4004:	86 95       	lsr	r24
    4006:	71 05       	cpc	r23, r1
    4008:	61 05       	cpc	r22, r1
    400a:	08 94       	sec
    400c:	08 95       	ret

0000400e <__fp_zero>:
    400e:	e8 94       	clt

00004010 <__fp_szero>:
    4010:	bb 27       	eor	r27, r27
    4012:	66 27       	eor	r22, r22
    4014:	77 27       	eor	r23, r23
    4016:	cb 01       	movw	r24, r22
    4018:	97 f9       	bld	r25, 7
    401a:	08 95       	ret

0000401c <inverse>:
    401c:	9b 01       	movw	r18, r22
    401e:	ac 01       	movw	r20, r24
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	80 e8       	ldi	r24, 0x80	; 128
    4026:	9f e3       	ldi	r25, 0x3F	; 63
    4028:	c4 c0       	rjmp	.+392    	; 0x41b2 <__divsf3>
    402a:	b0 df       	rcall	.-160    	; 0x3f8c <__fp_pscA>
    402c:	28 f0       	brcs	.+10     	; 0x4038 <inverse+0x1c>
    402e:	b5 df       	rcall	.-150    	; 0x3f9a <__fp_pscB>
    4030:	18 f0       	brcs	.+6      	; 0x4038 <inverse+0x1c>
    4032:	95 23       	and	r25, r21
    4034:	09 f0       	breq	.+2      	; 0x4038 <inverse+0x1c>
    4036:	7c cf       	rjmp	.-264    	; 0x3f30 <__fp_inf>
    4038:	81 cf       	rjmp	.-254    	; 0x3f3c <__fp_nan>
    403a:	11 24       	eor	r1, r1
    403c:	e9 cf       	rjmp	.-46     	; 0x4010 <__fp_szero>

0000403e <__mulsf3x>:
    403e:	c5 df       	rcall	.-118    	; 0x3fca <__fp_split3>
    4040:	a0 f3       	brcs	.-24     	; 0x402a <inverse+0xe>

00004042 <__mulsf3_pse>:
    4042:	95 9f       	mul	r25, r21
    4044:	d1 f3       	breq	.-12     	; 0x403a <inverse+0x1e>
    4046:	95 0f       	add	r25, r21
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	55 1f       	adc	r21, r21
    404c:	62 9f       	mul	r22, r18
    404e:	f0 01       	movw	r30, r0
    4050:	72 9f       	mul	r23, r18
    4052:	bb 27       	eor	r27, r27
    4054:	f0 0d       	add	r31, r0
    4056:	b1 1d       	adc	r27, r1
    4058:	63 9f       	mul	r22, r19
    405a:	aa 27       	eor	r26, r26
    405c:	f0 0d       	add	r31, r0
    405e:	b1 1d       	adc	r27, r1
    4060:	aa 1f       	adc	r26, r26
    4062:	64 9f       	mul	r22, r20
    4064:	66 27       	eor	r22, r22
    4066:	b0 0d       	add	r27, r0
    4068:	a1 1d       	adc	r26, r1
    406a:	66 1f       	adc	r22, r22
    406c:	82 9f       	mul	r24, r18
    406e:	22 27       	eor	r18, r18
    4070:	b0 0d       	add	r27, r0
    4072:	a1 1d       	adc	r26, r1
    4074:	62 1f       	adc	r22, r18
    4076:	73 9f       	mul	r23, r19
    4078:	b0 0d       	add	r27, r0
    407a:	a1 1d       	adc	r26, r1
    407c:	62 1f       	adc	r22, r18
    407e:	83 9f       	mul	r24, r19
    4080:	a0 0d       	add	r26, r0
    4082:	61 1d       	adc	r22, r1
    4084:	22 1f       	adc	r18, r18
    4086:	74 9f       	mul	r23, r20
    4088:	33 27       	eor	r19, r19
    408a:	a0 0d       	add	r26, r0
    408c:	61 1d       	adc	r22, r1
    408e:	23 1f       	adc	r18, r19
    4090:	84 9f       	mul	r24, r20
    4092:	60 0d       	add	r22, r0
    4094:	21 1d       	adc	r18, r1
    4096:	82 2f       	mov	r24, r18
    4098:	76 2f       	mov	r23, r22
    409a:	6a 2f       	mov	r22, r26
    409c:	11 24       	eor	r1, r1
    409e:	9f 57       	subi	r25, 0x7F	; 127
    40a0:	50 40       	sbci	r21, 0x00	; 0
    40a2:	8a f0       	brmi	.+34     	; 0x40c6 <__mulsf3_pse+0x84>
    40a4:	e1 f0       	breq	.+56     	; 0x40de <__mulsf3_pse+0x9c>
    40a6:	88 23       	and	r24, r24
    40a8:	4a f0       	brmi	.+18     	; 0x40bc <__mulsf3_pse+0x7a>
    40aa:	ee 0f       	add	r30, r30
    40ac:	ff 1f       	adc	r31, r31
    40ae:	bb 1f       	adc	r27, r27
    40b0:	66 1f       	adc	r22, r22
    40b2:	77 1f       	adc	r23, r23
    40b4:	88 1f       	adc	r24, r24
    40b6:	91 50       	subi	r25, 0x01	; 1
    40b8:	50 40       	sbci	r21, 0x00	; 0
    40ba:	a9 f7       	brne	.-22     	; 0x40a6 <__mulsf3_pse+0x64>
    40bc:	9e 3f       	cpi	r25, 0xFE	; 254
    40be:	51 05       	cpc	r21, r1
    40c0:	70 f0       	brcs	.+28     	; 0x40de <__mulsf3_pse+0x9c>
    40c2:	36 cf       	rjmp	.-404    	; 0x3f30 <__fp_inf>
    40c4:	a5 cf       	rjmp	.-182    	; 0x4010 <__fp_szero>
    40c6:	5f 3f       	cpi	r21, 0xFF	; 255
    40c8:	ec f3       	brlt	.-6      	; 0x40c4 <__mulsf3_pse+0x82>
    40ca:	98 3e       	cpi	r25, 0xE8	; 232
    40cc:	dc f3       	brlt	.-10     	; 0x40c4 <__mulsf3_pse+0x82>
    40ce:	86 95       	lsr	r24
    40d0:	77 95       	ror	r23
    40d2:	67 95       	ror	r22
    40d4:	b7 95       	ror	r27
    40d6:	f7 95       	ror	r31
    40d8:	e7 95       	ror	r30
    40da:	9f 5f       	subi	r25, 0xFF	; 255
    40dc:	c1 f7       	brne	.-16     	; 0x40ce <__mulsf3_pse+0x8c>
    40de:	fe 2b       	or	r31, r30
    40e0:	88 0f       	add	r24, r24
    40e2:	91 1d       	adc	r25, r1
    40e4:	96 95       	lsr	r25
    40e6:	87 95       	ror	r24
    40e8:	97 f9       	bld	r25, 7
    40ea:	08 95       	ret

000040ec <square>:
    40ec:	9b 01       	movw	r18, r22
    40ee:	ac 01       	movw	r20, r24
    40f0:	1d c9       	rjmp	.-3526   	; 0x332c <__mulsf3>
    40f2:	4c df       	rcall	.-360    	; 0x3f8c <__fp_pscA>
    40f4:	30 f0       	brcs	.+12     	; 0x4102 <square+0x16>
    40f6:	51 df       	rcall	.-350    	; 0x3f9a <__fp_pscB>
    40f8:	20 f0       	brcs	.+8      	; 0x4102 <square+0x16>
    40fa:	31 f4       	brne	.+12     	; 0x4108 <square+0x1c>
    40fc:	9f 3f       	cpi	r25, 0xFF	; 255
    40fe:	11 f4       	brne	.+4      	; 0x4104 <square+0x18>
    4100:	1e f4       	brtc	.+6      	; 0x4108 <square+0x1c>
    4102:	1c cf       	rjmp	.-456    	; 0x3f3c <__fp_nan>
    4104:	0e f4       	brtc	.+2      	; 0x4108 <square+0x1c>
    4106:	e0 95       	com	r30
    4108:	e7 fb       	bst	r30, 7
    410a:	12 cf       	rjmp	.-476    	; 0x3f30 <__fp_inf>

0000410c <__addsf3x>:
    410c:	e9 2f       	mov	r30, r25
    410e:	5d df       	rcall	.-326    	; 0x3fca <__fp_split3>
    4110:	80 f3       	brcs	.-32     	; 0x40f2 <square+0x6>
    4112:	ba 17       	cp	r27, r26
    4114:	62 07       	cpc	r22, r18
    4116:	73 07       	cpc	r23, r19
    4118:	84 07       	cpc	r24, r20
    411a:	95 07       	cpc	r25, r21
    411c:	18 f0       	brcs	.+6      	; 0x4124 <__addsf3x+0x18>
    411e:	71 f4       	brne	.+28     	; 0x413c <__addsf3x+0x30>
    4120:	9e f5       	brtc	.+102    	; 0x4188 <__addsf3x+0x7c>
    4122:	75 cf       	rjmp	.-278    	; 0x400e <__fp_zero>
    4124:	0e f4       	brtc	.+2      	; 0x4128 <__addsf3x+0x1c>
    4126:	e0 95       	com	r30
    4128:	0b 2e       	mov	r0, r27
    412a:	ba 2f       	mov	r27, r26
    412c:	a0 2d       	mov	r26, r0
    412e:	0b 01       	movw	r0, r22
    4130:	b9 01       	movw	r22, r18
    4132:	90 01       	movw	r18, r0
    4134:	0c 01       	movw	r0, r24
    4136:	ca 01       	movw	r24, r20
    4138:	a0 01       	movw	r20, r0
    413a:	11 24       	eor	r1, r1
    413c:	ff 27       	eor	r31, r31
    413e:	59 1b       	sub	r21, r25
    4140:	99 f0       	breq	.+38     	; 0x4168 <__addsf3x+0x5c>
    4142:	59 3f       	cpi	r21, 0xF9	; 249
    4144:	50 f4       	brcc	.+20     	; 0x415a <__addsf3x+0x4e>
    4146:	50 3e       	cpi	r21, 0xE0	; 224
    4148:	68 f1       	brcs	.+90     	; 0x41a4 <__addsf3x+0x98>
    414a:	1a 16       	cp	r1, r26
    414c:	f0 40       	sbci	r31, 0x00	; 0
    414e:	a2 2f       	mov	r26, r18
    4150:	23 2f       	mov	r18, r19
    4152:	34 2f       	mov	r19, r20
    4154:	44 27       	eor	r20, r20
    4156:	58 5f       	subi	r21, 0xF8	; 248
    4158:	f3 cf       	rjmp	.-26     	; 0x4140 <__addsf3x+0x34>
    415a:	46 95       	lsr	r20
    415c:	37 95       	ror	r19
    415e:	27 95       	ror	r18
    4160:	a7 95       	ror	r26
    4162:	f0 40       	sbci	r31, 0x00	; 0
    4164:	53 95       	inc	r21
    4166:	c9 f7       	brne	.-14     	; 0x415a <__addsf3x+0x4e>
    4168:	7e f4       	brtc	.+30     	; 0x4188 <__addsf3x+0x7c>
    416a:	1f 16       	cp	r1, r31
    416c:	ba 0b       	sbc	r27, r26
    416e:	62 0b       	sbc	r22, r18
    4170:	73 0b       	sbc	r23, r19
    4172:	84 0b       	sbc	r24, r20
    4174:	ba f0       	brmi	.+46     	; 0x41a4 <__addsf3x+0x98>
    4176:	91 50       	subi	r25, 0x01	; 1
    4178:	a1 f0       	breq	.+40     	; 0x41a2 <__addsf3x+0x96>
    417a:	ff 0f       	add	r31, r31
    417c:	bb 1f       	adc	r27, r27
    417e:	66 1f       	adc	r22, r22
    4180:	77 1f       	adc	r23, r23
    4182:	88 1f       	adc	r24, r24
    4184:	c2 f7       	brpl	.-16     	; 0x4176 <__addsf3x+0x6a>
    4186:	0e c0       	rjmp	.+28     	; 0x41a4 <__addsf3x+0x98>
    4188:	ba 0f       	add	r27, r26
    418a:	62 1f       	adc	r22, r18
    418c:	73 1f       	adc	r23, r19
    418e:	84 1f       	adc	r24, r20
    4190:	48 f4       	brcc	.+18     	; 0x41a4 <__addsf3x+0x98>
    4192:	87 95       	ror	r24
    4194:	77 95       	ror	r23
    4196:	67 95       	ror	r22
    4198:	b7 95       	ror	r27
    419a:	f7 95       	ror	r31
    419c:	9e 3f       	cpi	r25, 0xFE	; 254
    419e:	08 f0       	brcs	.+2      	; 0x41a2 <__addsf3x+0x96>
    41a0:	b3 cf       	rjmp	.-154    	; 0x4108 <square+0x1c>
    41a2:	93 95       	inc	r25
    41a4:	88 0f       	add	r24, r24
    41a6:	08 f0       	brcs	.+2      	; 0x41aa <__addsf3x+0x9e>
    41a8:	99 27       	eor	r25, r25
    41aa:	ee 0f       	add	r30, r30
    41ac:	97 95       	ror	r25
    41ae:	87 95       	ror	r24
    41b0:	08 95       	ret

000041b2 <__divsf3>:
    41b2:	63 de       	rcall	.-826    	; 0x3e7a <__divsf3x>
    41b4:	f9 ce       	rjmp	.-526    	; 0x3fa8 <__fp_round>

000041b6 <_exit>:
    41b6:	ff cf       	rjmp	.-2      	; 0x41b6 <_exit>
